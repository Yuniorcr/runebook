<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="zh-CN" datatype="htmlbody" original="mocha">
    <body>
      <group id="mocha">
        <trans-unit id="4880e5997d2e5c91707be1f2cf1644a4e0521957" translate="yes" xml:space="preserve">
          <source>&amp;copy; 2011&amp;ndash;2018 JS Foundation and contributors</source>
          <target state="translated">&amp;copy;2011&amp;ndash;2018 JS基金会和贡献者</target>
        </trans-unit>
        <trans-unit id="0cf2f1a85ad7053644855b71c6a7053e215276b8" translate="yes" xml:space="preserve">
          <source>&amp;ldquo;Hanging&amp;rdquo; most often manifests itself if a server is still listening on a port, or a socket is still open, etc. It can also be something like a runaway &lt;code&gt;setInterval()&lt;/code&gt;, or even an errant &lt;code&gt;Promise&lt;/code&gt; that never fulfilled.</source>
          <target state="translated">如果服务器仍在侦听端口，或者套接字仍在打开，等等，&amp;ldquo;挂起&amp;rdquo;通常会表现出来。它也可能像是 &lt;code&gt;setInterval()&lt;/code&gt; 失控，甚至是从未实现的错误 &lt;code&gt;Promise&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="29ca21d51a81c6a488a2680abedc2d67a518ac71" translate="yes" xml:space="preserve">
          <source>&amp;ldquo;Pending&amp;rdquo;&amp;ndash;as in &amp;ldquo;someone should write these test cases eventually&amp;rdquo;&amp;ndash;test-cases are simply those &lt;em&gt;without&lt;/em&gt; a callback:</source>
          <target state="translated">&amp;ldquo;待定&amp;rdquo;-就像&amp;ldquo;最终应该写这些测试用例的人&amp;rdquo;中一样-测试用例就是那些&lt;em&gt;没有&lt;/em&gt;回调的用例：</target>
        </trans-unit>
        <trans-unit id="25ed9012bafe6e305d78705fd4bf34bc131c9626" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;http://chaijs.com/&quot;&gt;chai&lt;/a&gt; - &lt;code&gt;expect()&lt;/code&gt;, &lt;code&gt;assert()&lt;/code&gt; and &lt;code&gt;should&lt;/code&gt;-style assertions</source>
          <target state="translated">&lt;a href=&quot;http://chaijs.com/&quot;&gt;chai&lt;/a&gt; - &lt;code&gt;expect()&lt;/code&gt; ， &lt;code&gt;assert()&lt;/code&gt; 和 &lt;code&gt;should&lt;/code&gt; 样式的断言</target>
        </trans-unit>
        <trans-unit id="5bb4230cc3fd86b530db1acfe8036464113cd96d" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;http://unexpected.js.org&quot;&gt;unexpected&lt;/a&gt; - &amp;ldquo;the extensible BDD assertion toolkit&amp;rdquo;</source>
          <target state="translated">&lt;a href=&quot;http://unexpected.js.org&quot;&gt;意想不到的&lt;/a&gt; -&amp;ldquo;可扩展的BDD断言工具包&amp;rdquo;</target>
        </trans-unit>
        <trans-unit id="1564a69b76b202f4b70459e52fc79d3de8d7ccf7" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://github.com/LearnBoost/expect.js&quot;&gt;expect.js&lt;/a&gt; - &lt;code&gt;expect()&lt;/code&gt; style assertions</source>
          <target state="translated">&lt;a href=&quot;https://github.com/LearnBoost/expect.js&quot;&gt;Expect.js&lt;/a&gt; - Expect &lt;code&gt;expect()&lt;/code&gt; 风格的断言</target>
        </trans-unit>
        <trans-unit id="ccf6128796caad47bf922901f1f89ce8973d11ed" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://github.com/shouldjs/should.js&quot;&gt;should.js&lt;/a&gt; - BDD style shown throughout these docs</source>
          <target state="translated">&lt;a href=&quot;https://github.com/shouldjs/should.js&quot;&gt;should.js-&lt;/a&gt;这些文档中显示的BDD样式</target>
        </trans-unit>
        <trans-unit id="f2735f46f5835a9f801e5ea1398a95235e55f2c5" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://github.com/visionmedia/better-assert&quot;&gt;better-assert&lt;/a&gt; - C-style self-documenting &lt;code&gt;assert()&lt;/code&gt;</source>
          <target state="translated">&lt;a href=&quot;https://github.com/visionmedia/better-assert&quot;&gt;更好的断言&lt;/a&gt; -C风格的自记录 &lt;code&gt;assert()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="b71b6885763b5a41994b3d2a2cb89e5b27dcd14a" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=maty.vscode-mocha-sidebar&quot;&gt;Mocha sidebar&lt;/a&gt; is the most complete mocha extension for vs code.</source>
          <target state="translated">&lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=maty.vscode-mocha-sidebar&quot;&gt;Mocha侧边栏&lt;/a&gt;是vs代码最完整的Mocha扩展。</target>
        </trans-unit>
        <trans-unit id="503fa814b546e45dd52784f0523272a9253e8f6c" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://wallabyjs.com/&quot;&gt;Wallaby.js&lt;/a&gt; is a continuous testing tool that enables real-time code coverage for Mocha with any assertion library in VS Code, Atom, JetBrains IDEs (IntelliJ IDEA, WebStorm, etc.), Sublime Text and Visual Studio for both browser and node.js projects.</source>
          <target state="translated">&lt;a href=&quot;https://wallabyjs.com/&quot;&gt;Wallaby.js&lt;/a&gt;是一个持续测试工具，可使用VS Code，Atom，JetBrains IDE（IntelliJ IDEA，WebStorm等），Sublime Text和Visual Studio中的任何断言库（适用于浏览器和节点）对Mocha进行实时代码覆盖。 js项目。</target>
        </trans-unit>
        <trans-unit id="44372724c81d9e9e00f55a25b45700c20a62cfc6" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://www.gnu.org/software/emacs/&quot;&gt;Emacs&lt;/a&gt; support for running Mocha tests is available via a 3rd party package &lt;a href=&quot;https://github.com/scottaj/mocha.el&quot;&gt;mocha.el&lt;/a&gt;. The package is available on MELPA, and can be installed via &lt;code&gt;M-x package-install mocha&lt;/code&gt;.</source>
          <target state="translated">&lt;a href=&quot;https://www.gnu.org/software/emacs/&quot;&gt;&lt;/a&gt;可通过第三方软件包&lt;a href=&quot;https://github.com/scottaj/mocha.el&quot;&gt;mocha.el&lt;/a&gt;获得Emacs对运行Mocha测试的支持。该软件包在MELPA上可用，可以通过 &lt;code&gt;M-x package-install mocha&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="a4aaad3792c24d5288746210dca61d836f7a2b70" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://www.jetbrains.com/&quot;&gt;JetBrains&lt;/a&gt; provides a &lt;a href=&quot;https://www.jetbrains.com/idea/features/nodejs.html&quot;&gt;NodeJS plugin&lt;/a&gt; for its suite of IDEs (IntelliJ IDEA, WebStorm, etc.), which contains a Mocha test runner, among other things.</source>
          <target state="translated">&lt;a href=&quot;https://www.jetbrains.com/&quot;&gt;JetBrains&lt;/a&gt;为其IDE套件（IntelliJ IDEA，WebStorm等）提供了&lt;a href=&quot;https://www.jetbrains.com/idea/features/nodejs.html&quot;&gt;NodeJS插件&lt;/a&gt;，其中包括Mocha测试运行程序。</target>
        </trans-unit>
        <trans-unit id="11291f2858e846ccb99830c798ce583b966f2c98" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://www.npmjs.com/package/mochawesome&quot;&gt;Mochawesome&lt;/a&gt; is a great alternative to the default HTML reporter.</source>
          <target state="translated">&lt;a href=&quot;https://www.npmjs.com/package/mochawesome&quot;&gt;Mochawesome&lt;/a&gt;是默认HTML报告程序的绝佳替代方案。</target>
        </trans-unit>
        <trans-unit id="c5713812df5d43a6deaf12c65bcdb06b48905d51" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;--exit&lt;/code&gt; / &lt;code&gt;--no-exit&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;--exit&lt;/code&gt; / &lt;code&gt;--no-exit&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="56b7c5cfeaded6ce0ea7e6c4d4d438bdd19cffbd" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;context()&lt;/code&gt; is just an alias for &lt;code&gt;describe()&lt;/code&gt;, and behaves the same way; it just provides a way to keep tests easier to read and organized. Similarly, &lt;code&gt;specify()&lt;/code&gt; is an alias for &lt;code&gt;it()&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;context()&lt;/code&gt; 只是 &lt;code&gt;describe()&lt;/code&gt; 的别名，其行为方式相同；它只是提供一种使测试更易于阅读和组织的方法。类似地， &lt;code&gt;specify()&lt;/code&gt; 是 &lt;code&gt;it()&lt;/code&gt; 的别名。</target>
        </trans-unit>
        <trans-unit id="5068d189907c7d855768fab68d718a9be022de60" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;mocha.allowUncaught()&lt;/code&gt; : If called, uncaught errors will not be absorbed by the error handler.</source>
          <target state="translated">&lt;code&gt;mocha.allowUncaught()&lt;/code&gt; ：如果调用，未捕获的错误将不会被错误处理程序吸收。</target>
        </trans-unit>
        <trans-unit id="bfedfd7c997cd3bf4a80b5a5f8369a1e541211bd" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;noHighlighting&lt;/code&gt;: If set to &lt;code&gt;true&lt;/code&gt;, do not attempt to use syntax highlighting on output test code.</source>
          <target state="translated">&lt;code&gt;noHighlighting&lt;/code&gt; ：如果设置为 &lt;code&gt;true&lt;/code&gt; ，请不要尝试在输出测试代码上使用语法突出显示。</target>
        </trans-unit>
        <trans-unit id="0928996ca546cd8754bd4fbae4ffc7e1c53c09a7" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Best practice&lt;/em&gt;: Don&amp;rsquo;t do nothing! A test should make an assertion or use &lt;code&gt;this.skip()&lt;/code&gt;.</source>
          <target state="translated">&lt;em&gt;最佳做法&lt;/em&gt;：什么都不做！测试应该声明或使用 &lt;code&gt;this.skip()&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="89c3b78b1338c34c1054e3cfdcf74ed2974b90eb" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Best practice&lt;/em&gt;: To avoid confusion, do not execute further instructions in a test or hook after calling &lt;code&gt;this.skip()&lt;/code&gt;.</source>
          <target state="translated">&lt;em&gt;最佳实践&lt;/em&gt;：为避免混淆，请在调用 &lt;code&gt;this.skip()&lt;/code&gt; 之后不要在测试或挂钩中执行更多说明。</target>
        </trans-unit>
        <trans-unit id="334b6d6a556867914bb2b447cf3f8a036662d66b" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Best practice&lt;/em&gt;: Use &lt;code&gt;.skip()&lt;/code&gt; instead of commenting tests out.</source>
          <target state="translated">&lt;em&gt;最佳实践&lt;/em&gt;：使用 &lt;code&gt;.skip()&lt;/code&gt; 而不是注释掉测试。</target>
        </trans-unit>
        <trans-unit id="65eadcbf418cf5130eba58897cb4af4e5e2ea8c8" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;If you do not need to use&lt;/em&gt; Mocha&amp;rsquo;s context, lambdas should work. However, the result will be more difficult to refactor if the need eventually arises.</source>
          <target state="translated">&lt;em&gt;如果您不需要使用&lt;/em&gt; Mocha的上下文，则lambdas应该起作用。但是，如果最终需要，结果将很难重构。</target>
        </trans-unit>
        <trans-unit id="4a0edfb51f0156b9ebb2dc4a46c65c0e9b5e9717" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Note&lt;/em&gt;: All nested suites will still be executed.</source>
          <target state="translated">&lt;em&gt;注意&lt;/em&gt;：所有嵌套套件仍将执行。</target>
        </trans-unit>
        <trans-unit id="4f727f5f0c387f4d76840c0b9751e20d642d7645" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Note&lt;/em&gt;: Double quotes around the glob are recommended for portability.</source>
          <target state="translated">&lt;em&gt;注意&lt;/em&gt;：为了便于移植，建议在全局名称周围使用双引号。</target>
        </trans-unit>
        <trans-unit id="02ad39309be3772f389ea773e9d23183fe6d1694" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Note&lt;/em&gt;: Hooks, if present, will still be executed.</source>
          <target state="translated">&lt;em&gt;注意&lt;/em&gt;：如果存在钩子，仍将执行。</target>
        </trans-unit>
        <trans-unit id="110e2d10c2ab554a2d2a5743c8a99ef43321577c" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Note&lt;/em&gt;: The &lt;code&gt;require&lt;/code&gt; interface cannot be run via the &lt;code&gt;node&lt;/code&gt; executable, and must be run via &lt;code&gt;mocha&lt;/code&gt;.</source>
          <target state="translated">&lt;em&gt;注意&lt;/em&gt;： &lt;code&gt;require&lt;/code&gt; 接口不能通过 &lt;code&gt;node&lt;/code&gt; 可执行文件运行，而必须通过 &lt;code&gt;mocha&lt;/code&gt; 运行。</target>
        </trans-unit>
        <trans-unit id="27a683517748a0c2755328ea767522c20595a687" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Prior to&lt;/em&gt; version v4.0.0, &lt;em&gt;by default&lt;/em&gt;, Mocha would force its own process to exit once it was finished executing all tests. This behavior enables a set of potential problems; it&amp;rsquo;s indicative of tests (or fixtures, harnesses, code under test, etc.) which don&amp;rsquo;t clean up after themselves properly. Ultimately, &amp;ldquo;dirty&amp;rdquo; tests can (but not always) lead to &lt;em&gt;false positive&lt;/em&gt; or &lt;em&gt;false negative&lt;/em&gt; results.</source>
          <target state="translated">&lt;em&gt;在&lt;/em&gt;&lt;em&gt;默认&lt;/em&gt;版本v4.0.0 &lt;em&gt;之前&lt;/em&gt;，Mocha将在完成所有测试后强制退出自己的进程。这种行为会带来一系列潜在的问题。它表示测试（或固定装置，线束，被测代码等）无法正确清理后的状态。最终，&amp;ldquo;脏&amp;rdquo;测试可能（但并非总是）导致&lt;em&gt;假阳性&lt;/em&gt;或&lt;em&gt;假阴性&lt;/em&gt;结果。</target>
        </trans-unit>
        <trans-unit id="b1c748253cdbecc40d965c206f0cf424884c0b53" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Updated in Mocha v4.0.0&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;在Mocha v4.0.0中更新&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="7542c68c1542b245f7a2242d4daea6e0514d3bbd" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;code&gt;--compilers&lt;/code&gt; is deprecated as of Mocha v4.0.0. See &lt;a href=&quot;https://github.com/mochajs/mocha/wiki/compilers-deprecation&quot;&gt;further explanation and workarounds&lt;/a&gt;.&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt; &lt;code&gt;--compilers&lt;/code&gt; 被弃用摩卡V4.0.0的。请参阅&lt;a href=&quot;https://github.com/mochajs/mocha/wiki/compilers-deprecation&quot;&gt;进一步的解释和解决方法&lt;/a&gt;。&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="ee8b552bf5ae2f79e3e3ef40675d7a798575de65" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;NOTE&lt;/strong&gt;: Example below was written using Selenium webdriver (which &lt;a href=&quot;https://github.com/SeleniumHQ/selenium/blob/c10e8a955883f004452cdde18096d70738397788/javascript/node/selenium-webdriver/testing/index.js&quot;&gt;overwrites global Mocha hooks&lt;/a&gt; for &lt;code&gt;Promise&lt;/code&gt; chain).</source>
          <target state="translated">&lt;strong&gt;注意&lt;/strong&gt;：以下示例是使用Selenium Webdriver编写的（它&lt;a href=&quot;https://github.com/SeleniumHQ/selenium/blob/c10e8a955883f004452cdde18096d70738397788/javascript/node/selenium-webdriver/testing/index.js&quot;&gt;覆盖&lt;/a&gt;了 &lt;code&gt;Promise&lt;/code&gt; 链的全局Mocha挂钩）。</target>
        </trans-unit>
        <trans-unit id="de16085c47655e171af51180d7ee56cc5015980b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;The HTML reporter is not intended for use on the command-line.&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;HTML报告程序不适用于命令行。&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="892de634332bd473af3b1289e44a4321bab50f85" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;The easiest way to &amp;ldquo;fix&amp;rdquo; the issue is to simply pass &lt;code&gt;--exit&lt;/code&gt; to the Mocha process.&lt;/strong&gt; It &lt;em&gt;can&lt;/em&gt; be time-consuming to debug&amp;ndash;because it&amp;rsquo;s not always obvious where the problem is&amp;ndash;but it &lt;em&gt;is&lt;/em&gt; recommended to do so.</source>
          <target state="translated">&lt;strong&gt;解决问题的最简单方法是将 &lt;code&gt;--exit&lt;/code&gt; 传递给Mocha流程。&lt;/strong&gt;它&lt;em&gt;可以&lt;/em&gt;是耗时的调试，因为它是哪里的问题并不总是显而易见的，但它&lt;em&gt;是&lt;/em&gt;建议这样做。</target>
        </trans-unit>
        <trans-unit id="a0f13d884830b5fdf5116a0ae9b36c1b10716a99" translate="yes" xml:space="preserve">
          <source>A brief outline on the order Mocha&amp;rsquo;s components are executed. Worth noting that all hooks, &lt;code&gt;describe&lt;/code&gt; and &lt;code&gt;it&lt;/code&gt; callbacks are run in the order they are defined (i.e. found in the file).</source>
          <target state="translated">有关执行Mocha组件顺序的简要概述。值得注意的是，所有的钩子， &lt;code&gt;describe&lt;/code&gt; 和 &lt;code&gt;it&lt;/code&gt; 的回调在它们被定义的顺序运行（即在文件中找到）。</target>
        </trans-unit>
        <trans-unit id="0dddd338ac80883aa9a63cca03ecd57465127f01" translate="yes" xml:space="preserve">
          <source>A typical setup might look something like the following, where we call &lt;code&gt;mocha.setup('bdd')&lt;/code&gt; to use the &lt;strong&gt;BDD&lt;/strong&gt; interface before loading the test scripts, running them &lt;code&gt;onload&lt;/code&gt; with &lt;code&gt;mocha.run()&lt;/code&gt;.</source>
          <target state="translated">一个典型的设置可能类似于以下内容，在加载测试脚本之前，我们调用 &lt;code&gt;mocha.setup('bdd')&lt;/code&gt; 使用&lt;strong&gt;BDD&lt;/strong&gt;接口，并使用 &lt;code&gt;mocha.run()&lt;/code&gt; &lt;code&gt;onload&lt;/code&gt; 运行它们。</target>
        </trans-unit>
        <trans-unit id="d93d10ff0fbef1b4aa0ddc24e10e907746d3c85a" translate="yes" xml:space="preserve">
          <source>API</source>
          <target state="translated">API</target>
        </trans-unit>
        <trans-unit id="390d8b7936094f003575622b17c10a13f1682936" translate="yes" xml:space="preserve">
          <source>About Babel</source>
          <target state="translated">关于巴别</target>
        </trans-unit>
        <trans-unit id="ce20799f82cbdcfea600bef25db5ac2131c4d651" translate="yes" xml:space="preserve">
          <source>Accepts a comma-delimited list of accepted global variable names. For example, suppose your app deliberately exposes a global named &lt;code&gt;app&lt;/code&gt; and &lt;code&gt;YUI&lt;/code&gt;, you may want to add &lt;code&gt;--globals app,YUI&lt;/code&gt;. It also accepts wildcards. You could do &lt;code&gt;--globals '*bar'&lt;/code&gt; and it would match &lt;code&gt;foobar&lt;/code&gt;, &lt;code&gt;barbar&lt;/code&gt;, etc. You can also simply pass in &lt;code&gt;'*'&lt;/code&gt; to ignore all globals.</source>
          <target state="translated">接受以逗号分隔的已接受全局变量名称列表。例如，假设您的应用故意公开了一个全局名称的 &lt;code&gt;app&lt;/code&gt; 和 &lt;code&gt;YUI&lt;/code&gt; ，则可能要添加 &lt;code&gt;--globals app,YUI&lt;/code&gt; 。它还接受通配符。您可以执行 &lt;code&gt;--globals '*bar'&lt;/code&gt; ，它将与 &lt;code&gt;foobar&lt;/code&gt; ， &lt;code&gt;barbar&lt;/code&gt; 等匹配。您也可以简单地传入 &lt;code&gt;'*'&lt;/code&gt; 来忽略所有全局变量。</target>
        </trans-unit>
        <trans-unit id="f6eb19d71e1ae75e095ac9db79aab38637aa620f" translate="yes" xml:space="preserve">
          <source>Add a file you want included first in a test suite. This is useful if you have some generic setup code that must be included within the test suite. The file passed is not affected by any other flags (&lt;code&gt;--recursive&lt;/code&gt; or &lt;code&gt;--sort&lt;/code&gt; have no effect). Accepts multiple &lt;code&gt;--file&lt;/code&gt; flags to include multiple files, the order in which the flags are given are the order in which the files are included in the test suite. Can also be used in &lt;code&gt;mocha.opts&lt;/code&gt;.</source>
          <target state="translated">添加您想要首先包含在测试套件中的文件。如果您必须在测试套件中包含一些通用设置代码，这将很有用。传递的文件不受任何其他标志的影响（ &lt;code&gt;--recursive&lt;/code&gt; 或 &lt;code&gt;--sort&lt;/code&gt; 无效）。接受多个 &lt;code&gt;--file&lt;/code&gt; 标志以包含多个文件，标志的给出顺序是测试套件中文件的包含顺序。也可以在 &lt;code&gt;mocha.opts&lt;/code&gt; 中使用。</target>
        </trans-unit>
        <trans-unit id="0d2f09268f0c41b32392346459a011f44d861320" translate="yes" xml:space="preserve">
          <source>Again, use &lt;code&gt;this.timeout(0)&lt;/code&gt; to disable the timeout for a hook.</source>
          <target state="translated">同样，使用 &lt;code&gt;this.timeout(0)&lt;/code&gt; 禁用挂钩的超时。</target>
        </trans-unit>
        <trans-unit id="289af3fcb7614daa438cf729070ffef737957648" translate="yes" xml:space="preserve">
          <source>All hooks (&lt;code&gt;before()&lt;/code&gt;, &lt;code&gt;after()&lt;/code&gt;, &lt;code&gt;beforeEach()&lt;/code&gt;, &lt;code&gt;afterEach()&lt;/code&gt;) may be sync or async as well, behaving much like a regular test-case. For example, you may wish to populate database with dummy content before each test:</source>
          <target state="translated">所有钩子（ &lt;code&gt;before()&lt;/code&gt; ， &lt;code&gt;after()&lt;/code&gt; ， &lt;code&gt;beforeEach()&lt;/code&gt; ， &lt;code&gt;afterEach()&lt;/code&gt; ）也可以同步或异步，其行为与常规测试用例非常相似。例如，您可能希望在每次测试之前用虚拟内容填充数据库：</target>
        </trans-unit>
        <trans-unit id="a0600916547646b30608339ed0566a7a7311cb26" translate="yes" xml:space="preserve">
          <source>All of the previous examples were written using the &lt;strong&gt;BDD&lt;/strong&gt; interface.</source>
          <target state="translated">所有先前的示例都是使用&lt;strong&gt;BDD&lt;/strong&gt;接口编写的。</target>
        </trans-unit>
        <trans-unit id="6633fa7c33d41f9538bafc31713f5cc20e7e52c5" translate="yes" xml:space="preserve">
          <source>Alternately, instead of using the &lt;code&gt;done()&lt;/code&gt; callback, you may return a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise&quot;&gt;Promise&lt;/a&gt;. This is useful if the APIs you are testing return promises instead of taking callbacks:</source>
          <target state="translated">或者，您可以返回&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise&quot;&gt;Promise&lt;/a&gt;，而不是使用 &lt;code&gt;done()&lt;/code&gt; 回调。如果要测试的API返回承诺而不是使用回调，则此方法很有用：</target>
        </trans-unit>
        <trans-unit id="03f510bb6cb4dea10971d9bb6c0260d30a7de793" translate="yes" xml:space="preserve">
          <source>Any hook can be invoked with an optional description, making it easier to pinpoint errors in your tests. If a hook is given a named function, that name will be used if no description is supplied.</source>
          <target state="translated">任何钩子都可以用可选的描述来调用,这样可以更容易地确定测试中的错误。如果一个钩子被赋予了一个命名的函数,那么如果没有提供描述,就会使用该名称。</target>
        </trans-unit>
        <trans-unit id="2eff12655bfd37e8aba34fc4ce9e8a7b43bbf939" translate="yes" xml:space="preserve">
          <source>Arrow Functions</source>
          <target state="translated">箭头功能</target>
        </trans-unit>
        <trans-unit id="49bf55dc112eb3597726ba8ecf785a4fae4cbce0" translate="yes" xml:space="preserve">
          <source>Assertions</source>
          <target state="translated">Assertions</target>
        </trans-unit>
        <trans-unit id="9dafd7cfbbe492b64e8825fd60794e30fb996eaa" translate="yes" xml:space="preserve">
          <source>Asynchronous Code</source>
          <target state="translated">异步代码</target>
        </trans-unit>
        <trans-unit id="1dc7d645ff307166377bb1ae5a2ceb0ed4f4a597" translate="yes" xml:space="preserve">
          <source>Asynchronous Hooks</source>
          <target state="translated">异步钩子</target>
        </trans-unit>
        <trans-unit id="38b5d0dd2a1d99cba157a215ae014edf10488b48" translate="yes" xml:space="preserve">
          <source>BDD</source>
          <target state="translated">BDD</target>
        </trans-unit>
        <trans-unit id="93c1dca080e0df99b78d4c9a4de497925b17b740" translate="yes" xml:space="preserve">
          <source>Back in the terminal:</source>
          <target state="translated">回到终端。</target>
        </trans-unit>
        <trans-unit id="76932969916b9530f79f906d201312b3c98aa939" translate="yes" xml:space="preserve">
          <source>Back on the server, Mocha will attempt to load &lt;code&gt;&quot;./test/mocha.opts&quot;&lt;/code&gt; as a Run-Control file of sorts.</source>
          <target state="translated">回到服务器上，Mocha将尝试加载 &lt;code&gt;&quot;./test/mocha.opts&quot;&lt;/code&gt; 作为各种运行控制文件。</target>
        </trans-unit>
        <trans-unit id="6a9c9bab317fe02e67112c150ce937d254a60e32" translate="yes" xml:space="preserve">
          <source>Be mindful not to commit usages of &lt;code&gt;.only()&lt;/code&gt; to version control, unless you really mean it! To do so one can run mocha with the option &lt;code&gt;--forbid-only&lt;/code&gt; in the continuous integration test command (or in a git precommit hook).</source>
          <target state="translated">注意不要将 &lt;code&gt;.only()&lt;/code&gt; 的用法提交给版本控制，除非您确实如此！为此，可以在持续集成测试命令（或git precommit钩子）中使用 &lt;code&gt;--forbid-only&lt;/code&gt; 选项运行mocha 。</target>
        </trans-unit>
        <trans-unit id="035742046edc6a28a1cf9823f15f50ac906b0794" translate="yes" xml:space="preserve">
          <source>Because this test &lt;em&gt;does nothing&lt;/em&gt;, it will be reported as &lt;em&gt;passing&lt;/em&gt;.</source>
          <target state="translated">由于此测试&lt;em&gt;不执行任何操作&lt;/em&gt;，因此将报告为&lt;em&gt;通过&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="b9a22b5b44d7a2e3bf14c0874ea69cef878081f7" translate="yes" xml:space="preserve">
          <source>Before Mocha v3.0.0, &lt;code&gt;this.skip()&lt;/code&gt; was not supported in asynchronous tests and hooks.</source>
          <target state="translated">在Mocha v3.0.0之前，异步测试和挂钩中不支持 &lt;code&gt;this.skip()&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="dd97b1d45a21d2dca8f76533e8120a4564b26f0f" translate="yes" xml:space="preserve">
          <source>Beginning-of-line comment support is available; any line &lt;em&gt;starting&lt;/em&gt; with a hash (#) symbol will be considered a comment. Blank lines may also be used. Any other line will be treated as a command-line argument (along with any associated option value) to be used as a default setting. Settings should be specified one per line.</source>
          <target state="translated">提供行首注释支持；以井号（＃）&lt;em&gt;开头的&lt;/em&gt;任何行都将被视为注释。也可以使用空行。任何其他行都将被当作命令行参数（以及任何相关的选项值）用作默认设置。设置应指定为每行一个。</target>
        </trans-unit>
        <trans-unit id="1fe5f18a82f2f33248c686dc8605a6041ecad6f9" translate="yes" xml:space="preserve">
          <source>Browser Configuration</source>
          <target state="translated">浏览器配置</target>
        </trans-unit>
        <trans-unit id="7264b421a309869abd486d52587fd493e2717efb" translate="yes" xml:space="preserve">
          <source>Browser-specific Option(s)</source>
          <target state="translated">浏览器专用选项</target>
        </trans-unit>
        <trans-unit id="ee269b8b06248dcfd3dcba5fa33bdeb97ed38dc6" translate="yes" xml:space="preserve">
          <source>Browser-specific methods</source>
          <target state="translated">浏览器专用方法</target>
        </trans-unit>
        <trans-unit id="4334130e97520ac7097525a48ac1e304d360c7cb" translate="yes" xml:space="preserve">
          <source>But &lt;em&gt;tests will have precedence&lt;/em&gt;:</source>
          <target state="translated">但是&lt;em&gt;测试将具有优先权&lt;/em&gt;：</target>
        </trans-unit>
        <trans-unit id="84d09fc276227a99a85ff46a9de164688194ec4a" translate="yes" xml:space="preserve">
          <source>By default, &lt;code&gt;mocha&lt;/code&gt; looks for the glob &lt;code&gt;./test/*.js&lt;/code&gt;, so you may want to put your tests in &lt;code&gt;test/&lt;/code&gt; folder. If you want to include sub directories, pass the &lt;code&gt;--recursive&lt;/code&gt; option.</source>
          <target state="translated">默认情况下， &lt;code&gt;mocha&lt;/code&gt; 将查找 &lt;code&gt;./test/*.js&lt;/code&gt; 文件，因此您可能希望将测试放在 &lt;code&gt;test/&lt;/code&gt; 文件夹中。如果要包括子目录，请传递 &lt;code&gt;--recursive&lt;/code&gt; 选项。</target>
        </trans-unit>
        <trans-unit id="c7927d0b938949e3c69d17add97d21ff99bf3841" translate="yes" xml:space="preserve">
          <source>By default, it will output to the console. To write directly to a file, use &lt;code&gt;--reporter-options output=filename.xml&lt;/code&gt;.</source>
          <target state="translated">默认情况下，它将输出到控制台。要直接写入文件，请使用 &lt;code&gt;--reporter-options output=filename.xml&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="50b2705a7a7fbc592728f9775d0530826eb9332f" translate="yes" xml:space="preserve">
          <source>By using this option in conjunction with &lt;code&gt;--check-leaks&lt;/code&gt;, you can specify a whitelist of known global variables that you would expect to leak into global scope.</source>
          <target state="translated">通过将此选项与 &lt;code&gt;--check-leaks&lt;/code&gt; 结合使用，您可以指定一个已知的全局变量白名单，希望将其泄漏到全局范围内。</target>
        </trans-unit>
        <trans-unit id="5df9bae9c75abec6d59a80bfbda9901d5365728f" translate="yes" xml:space="preserve">
          <source>CoffeeScript is no longer supported out of the box. CS and similar transpilers may be used by mapping the file extensions (for use with &lt;code&gt;--watch&lt;/code&gt;) and the module name. For example &lt;code&gt;--compilers coffee:coffee-script&lt;/code&gt; with CoffeeScript 1.6- or &lt;code&gt;--compilers coffee:coffee-script/register&lt;/code&gt; with CoffeeScript 1.7+.</source>
          <target state="translated">开箱即用的方式不再支持CoffeeScript。通过映射文件扩展名（与 &lt;code&gt;--watch&lt;/code&gt; 一起使用）和模块名称，可以使用CS和类似的编译器。例如 &lt;code&gt;--compilers coffee:coffee-script&lt;/code&gt; 与CoffeeScript的1.6倍或 &lt;code&gt;--compilers coffee:coffee-script/register&lt;/code&gt; 与CoffeeScript的1.7+。</target>
        </trans-unit>
        <trans-unit id="b65463cb6a42a17de514acc4659f7fd331e0876a" translate="yes" xml:space="preserve">
          <source>Connect</source>
          <target state="translated">Connect</target>
        </trans-unit>
        <trans-unit id="66716e9eea1ed594ef32a49efc5599e83d44105f" translate="yes" xml:space="preserve">
          <source>Contrast the above test with the following code:</source>
          <target state="translated">将上述测试与下面的代码进行对比。</target>
        </trans-unit>
        <trans-unit id="e1e22a2edf0e09bfb03c176871687bac5efad07b" translate="yes" xml:space="preserve">
          <source>Delayed Root Suite</source>
          <target state="translated">延迟的根套件</target>
        </trans-unit>
        <trans-unit id="47eb9c334c8a2e0a8a91f2e8b48e60e41e096aef" translate="yes" xml:space="preserve">
          <source>Describing Hooks</source>
          <target state="translated">钩子的描述</target>
        </trans-unit>
        <trans-unit id="1c23dd4256655591e65e1cbc41de626aaf29c582" translate="yes" xml:space="preserve">
          <source>Detects Multiple Calls to &lt;code&gt;done()&lt;/code&gt;</source>
          <target state="translated">检测到对 &lt;code&gt;done()&lt;/code&gt; 的多次调用</target>
        </trans-unit>
        <trans-unit id="4ed7a7b52b1dde0f16ee0faa573e3bfbbef4f4db" translate="yes" xml:space="preserve">
          <source>Detects Multiple Calls to done()</source>
          <target state="translated">检测对 done()的多次调用</target>
        </trans-unit>
        <trans-unit id="f65624aa7c4a5284f37560a89a431cca52591579" translate="yes" xml:space="preserve">
          <source>Diffs</source>
          <target state="translated">Diffs</target>
        </trans-unit>
        <trans-unit id="018f842784720aaa37c65f55fdf9542a1da068a7" translate="yes" xml:space="preserve">
          <source>Disables timeouts. Equivalent to &lt;code&gt;--timeout 0&lt;/code&gt;.</source>
          <target state="translated">禁用超时。等效于 &lt;code&gt;--timeout 0&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="cdba60a525e91017acace2575a32341fe23198be" translate="yes" xml:space="preserve">
          <source>Doc</source>
          <target state="translated">Doc</target>
        </trans-unit>
        <trans-unit id="21c65003e5889c6eb18f808fd5fd858b05812ef2" translate="yes" xml:space="preserve">
          <source>Dot Matrix</source>
          <target state="translated">点阵</target>
        </trans-unit>
        <trans-unit id="010f60616208f0911f365735f9d10694e2a3ff48" translate="yes" xml:space="preserve">
          <source>Dynamically Generating Tests</source>
          <target state="translated">动态生成测试</target>
        </trans-unit>
        <trans-unit id="df188f599aae58c67186d8ff806ff395566e71eb" translate="yes" xml:space="preserve">
          <source>Editor Plugins</source>
          <target state="translated">编辑插件</target>
        </trans-unit>
        <trans-unit id="d89a5ec1140ce5dd978c2baf15972fdf48b8b61f" translate="yes" xml:space="preserve">
          <source>Emacs</source>
          <target state="translated">Emacs</target>
        </trans-unit>
        <trans-unit id="33326c8c1b47f26cc19939feab6072343a029216" translate="yes" xml:space="preserve">
          <source>Enables node&amp;rsquo;s debugger support, this executes your script(s) with &lt;code&gt;node debug &amp;lt;file ...&amp;gt;&lt;/code&gt; allowing you to step through code and break with the &lt;code&gt;debugger&lt;/code&gt; statement. Note the difference between &lt;code&gt;mocha debug&lt;/code&gt; and &lt;code&gt;mocha --debug&lt;/code&gt;: &lt;code&gt;mocha debug&lt;/code&gt; will fire up node&amp;rsquo;s built-in debug client, &lt;code&gt;mocha --debug&lt;/code&gt; will allow you to use a different interface &amp;mdash; such as the Blink Developer Tools. Implies &lt;code&gt;--no-timeouts&lt;/code&gt;.</source>
          <target state="translated">启用节点的调试器支持，这将使用 &lt;code&gt;node debug &amp;lt;file ...&amp;gt;&lt;/code&gt; 执行脚本，从而使您可以逐步执行代码并使用 &lt;code&gt;debugger&lt;/code&gt; 语句中断。注意 &lt;code&gt;mocha debug&lt;/code&gt; 和 &lt;code&gt;mocha --debug&lt;/code&gt; 之间的区别： &lt;code&gt;mocha debug&lt;/code&gt; 将启动节点的内置调试客户端， &lt;code&gt;mocha --debug&lt;/code&gt; 将允许您使用其他接口，例如Blink Developer Tools。表示 &lt;code&gt;--no-timeouts&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="eb01bf04c9a0e8a71c45816513df424f1c7ffedb" translate="yes" xml:space="preserve">
          <source>Examples</source>
          <target state="translated">Examples</target>
        </trans-unit>
        <trans-unit id="c6b73f631d9ed023ec9b067a90f104d4c4a8d5e2" translate="yes" xml:space="preserve">
          <source>Exclusive Tests</source>
          <target state="translated">独家测试</target>
        </trans-unit>
        <trans-unit id="7ee1f8db6ab4251f4638f9fbba832f76a0ec0db6" translate="yes" xml:space="preserve">
          <source>Executes tests on changes to JavaScript in the CWD, and once initially.</source>
          <target state="translated">对CWD中JavaScript的变化执行测试,一旦初始。</target>
        </trans-unit>
        <trans-unit id="0e16537914a0163e01ecd7e0945bc56c50eb3849" translate="yes" xml:space="preserve">
          <source>Exports</source>
          <target state="translated">Exports</target>
        </trans-unit>
        <trans-unit id="8b652040961793dd0ebfc35016e694eff7d88f91" translate="yes" xml:space="preserve">
          <source>Express</source>
          <target state="translated">Express</target>
        </trans-unit>
        <trans-unit id="fc338f87a058158eb824b53705961801516a9460" translate="yes" xml:space="preserve">
          <source>Features</source>
          <target state="translated">Features</target>
        </trans-unit>
        <trans-unit id="e2b5dbde05a80900b6d36cfb626524c53a5cd0a7" translate="yes" xml:space="preserve">
          <source>For example, suppose you have the following &lt;code&gt;mocha.opts&lt;/code&gt; file:</source>
          <target state="translated">例如，假设您具有以下 &lt;code&gt;mocha.opts&lt;/code&gt; 文件：</target>
        </trans-unit>
        <trans-unit id="5f7c8b40764d6e6cba3037654fe88223f8cbc034" translate="yes" xml:space="preserve">
          <source>For example, suppose you have the following JavaScript:</source>
          <target state="translated">例如,假设你有以下JavaScript。</target>
        </trans-unit>
        <trans-unit id="010b85ad56b34c34c7c2a3b2436c740e30428ed5" translate="yes" xml:space="preserve">
          <source>Getting Started</source>
          <target state="translated">入门</target>
        </trans-unit>
        <trans-unit id="25f6f8824c49094eb1fdcf8139b250636d9a6086" translate="yes" xml:space="preserve">
          <source>Given Mocha&amp;rsquo;s use of &lt;code&gt;Function.prototype.call&lt;/code&gt; and function expressions to define suites and test cases, it&amp;rsquo;s straightforward to generate your tests dynamically. No special syntax is required &amp;mdash; plain ol&amp;rsquo; JavaScript can be used to achieve functionality similar to &amp;ldquo;parameterized&amp;rdquo; tests, which you may have seen in other frameworks.</source>
          <target state="translated">鉴于Mocha使用 &lt;code&gt;Function.prototype.call&lt;/code&gt; 和函数表达式来定义套件和测试用例，可以轻松地动态生成测试。不需要特殊的语法-普通的JavaScript可用于实现类似于&amp;ldquo;参数化&amp;rdquo;测试的功能，您可能已经在其他框架中看到了这种功能。</target>
        </trans-unit>
        <trans-unit id="2589b1f45c54b66754ff3a6ba0b78a1a2c58e37d" translate="yes" xml:space="preserve">
          <source>Grep</source>
          <target state="translated">Grep</target>
        </trans-unit>
        <trans-unit id="21a3c554b2b3f33d141b4b3dba634c148e87f258" translate="yes" xml:space="preserve">
          <source>HTML Reporter</source>
          <target state="translated">HTML报告器</target>
        </trans-unit>
        <trans-unit id="7b84bacdbcc873fa7100354ef56eee9e3ca78c5f" translate="yes" xml:space="preserve">
          <source>Here&amp;rsquo;s an example of executing an individual test case:</source>
          <target state="translated">这是一个执行单个测试用例的示例：</target>
        </trans-unit>
        <trans-unit id="54601f868c7e4383dd09d71df7cfdac40c45ce96" translate="yes" xml:space="preserve">
          <source>Hook-level</source>
          <target state="translated">Hook-level</target>
        </trans-unit>
        <trans-unit id="5c7eb9c28bf847e23d9f404dedbac5f071586b71" translate="yes" xml:space="preserve">
          <source>Hook-level timeouts may also be applied:</source>
          <target state="translated">钩子级超时也可以应用。</target>
        </trans-unit>
        <trans-unit id="4bd8f3f03a576b2088bd73a2339d07fca1de805d" translate="yes" xml:space="preserve">
          <source>Hooks</source>
          <target state="translated">Hooks</target>
        </trans-unit>
        <trans-unit id="98e19c16786b297b22eefa7e77183940457614e1" translate="yes" xml:space="preserve">
          <source>If you need to perform asynchronous operations before any of your suites are run, you may delay the root suite. Run &lt;code&gt;mocha&lt;/code&gt; with the &lt;code&gt;--delay&lt;/code&gt; flag. This will attach a special callback function, &lt;code&gt;run()&lt;/code&gt;, to the global context:</source>
          <target state="translated">如果需要在运行任何套件之前执行异步操作，则可以延迟根套件。使用 &lt;code&gt;--delay&lt;/code&gt; 标志运行 &lt;code&gt;mocha&lt;/code&gt; 。这会将特殊的回调函数 &lt;code&gt;run()&lt;/code&gt; 附加到全局上下文：</target>
        </trans-unit>
        <trans-unit id="ced3214c512472a19816679d43a3cb0180c1f760" translate="yes" xml:space="preserve">
          <source>If you use callback-based async tests, Mocha will throw an error if &lt;code&gt;done()&lt;/code&gt; is called multiple times. This is handy for catching accidental double callbacks.</source>
          <target state="translated">如果您使用基于回调的异步测试，则如果多次调用 &lt;code&gt;done()&lt;/code&gt; ，则Mocha将引发错误。这对于捕获意外的双回调很方便。</target>
        </trans-unit>
        <trans-unit id="e53b5d739b41e36dae9122b4b8c6364051302d79" translate="yes" xml:space="preserve">
          <source>If your ES6 modules have extension &lt;code&gt;.js&lt;/code&gt;, you can &lt;code&gt;npm install --save-dev babel-register&lt;/code&gt; and use &lt;code&gt;mocha --require babel-register&lt;/code&gt;; &lt;code&gt;--compilers&lt;/code&gt; is only necessary if you need to specify a file extension.</source>
          <target state="translated">如果您的ES6模块具有 &lt;code&gt;.js&lt;/code&gt; 扩展名，则可以 &lt;code&gt;npm install --save-dev babel-register&lt;/code&gt; 并使用 &lt;code&gt;mocha --require babel-register&lt;/code&gt; ; &lt;code&gt;--compilers&lt;/code&gt; 仅在需要指定文件扩展名时才是必需的。</target>
        </trans-unit>
        <trans-unit id="5f10ae75160b68a23b879ce505262f4e06bab893" translate="yes" xml:space="preserve">
          <source>If your JS environment supports &lt;a href=&quot;https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Statements/async_function&quot;&gt;async / await&lt;/a&gt; you can also write asynchronous tests like this:</source>
          <target state="translated">如果您的JS环境支持&lt;a href=&quot;https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Statements/async_function&quot;&gt;async / await，&lt;/a&gt;那么您还可以编写如下异步测试：</target>
        </trans-unit>
        <trans-unit id="67c9a62a8265332e6a725438c6dbed5631b96c93" translate="yes" xml:space="preserve">
          <source>In Mocha v3.0.0 and newer, returning a &lt;code&gt;Promise&lt;/code&gt;&lt;em&gt;and&lt;/em&gt; calling &lt;code&gt;done()&lt;/code&gt; will result in an exception, as this is generally a mistake:</source>
          <target state="translated">在Mocha v3.0.0和更高版本中，返回 &lt;code&gt;Promise&lt;/code&gt; &lt;em&gt;并&lt;/em&gt;调用 &lt;code&gt;done()&lt;/code&gt; 将导致异常，因为通常这是一个错误：</target>
        </trans-unit>
        <trans-unit id="e4957f53647ae1ea26d2f70a3e99bbe8d5ec37e7" translate="yes" xml:space="preserve">
          <source>In addition to chatting with us on &lt;a href=&quot;https://gitter.im/mochajs/mocha&quot;&gt;Gitter&lt;/a&gt;, for additional information such as using spies, mocking, and shared behaviours be sure to check out the &lt;a href=&quot;https://github.com/mochajs/mocha/wiki&quot;&gt;Mocha Wiki&lt;/a&gt; on GitHub. For discussions join the &lt;a href=&quot;https://groups.google.com/group/mochajs&quot;&gt;Google Group&lt;/a&gt;. For a running example of Mocha, view &lt;a href=&quot;https://mochajs.org/example/tests.html&quot;&gt;example/tests.html&lt;/a&gt;. For the JavaScript API, view the &lt;a href=&quot;https://mochajs.org/api/&quot;&gt;API documentation&lt;/a&gt; or the &lt;a href=&quot;https://github.com/mochajs/mocha/blob/master/lib/mocha.js#L51&quot;&gt;source&lt;/a&gt;.</source>
          <target state="translated">除了在&lt;a href=&quot;https://gitter.im/mochajs/mocha&quot;&gt;Gitter&lt;/a&gt;上与我们聊天外，有关使用间谍，嘲笑和共享行为等其他信息，请确保查看GitHub上的&lt;a href=&quot;https://github.com/mochajs/mocha/wiki&quot;&gt;Mocha Wiki&lt;/a&gt;。如需讨论，请加入&lt;a href=&quot;https://groups.google.com/group/mochajs&quot;&gt;Google网上论坛&lt;/a&gt;。有关Mocha的运行示例，请查看&lt;a href=&quot;https://mochajs.org/example/tests.html&quot;&gt;example / tests.html&lt;/a&gt;。对于JavaScript API，请查看&lt;a href=&quot;https://mochajs.org/api/&quot;&gt;API文档&lt;/a&gt;或&lt;a href=&quot;https://github.com/mochajs/mocha/blob/master/lib/mocha.js#L51&quot;&gt;源代码&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="01185b69a2c11773f1cd33b6b7ed8811ab0ff74f" translate="yes" xml:space="preserve">
          <source>In v3.0.0 or newer, a parameter passed to &lt;code&gt;this.timeout()&lt;/code&gt; greater than the &lt;a href=&quot;https://developer.mozilla.org/docs/Web/API/WindowTimers/setTimeout#Maximum_delay_value&quot;&gt;maximum delay value&lt;/a&gt; will cause the timeout to be disabled.</source>
          <target state="translated">在v3.0.0或更高版本中，传递给 &lt;code&gt;this.timeout()&lt;/code&gt; 的参数大于&lt;a href=&quot;https://developer.mozilla.org/docs/Web/API/WindowTimers/setTimeout#Maximum_delay_value&quot;&gt;最大延迟值&lt;/a&gt;将导致禁用超时。</target>
        </trans-unit>
        <trans-unit id="2526253f77ad1393ef0e5ead8d9eeed17e0a233b" translate="yes" xml:space="preserve">
          <source>In your editor:</source>
          <target state="translated">在你的编辑。</target>
        </trans-unit>
        <trans-unit id="cf9c82da65b44e4184e1c5823378fdf93d0e9b32" translate="yes" xml:space="preserve">
          <source>Inclusive Tests</source>
          <target state="translated">包容性测试</target>
        </trans-unit>
        <trans-unit id="fe49f05d2e68f4e9de00c0a17a8c0520bda7af2c" translate="yes" xml:space="preserve">
          <source>Install with &lt;a href=&quot;https://npmjs.org&quot;&gt;npm&lt;/a&gt; globally:</source>
          <target state="translated">全局安装&lt;a href=&quot;https://npmjs.org&quot;&gt;npm&lt;/a&gt;：</target>
        </trans-unit>
        <trans-unit id="c81b79df3c6448eae7c4f80428b54cd5692a17d7" translate="yes" xml:space="preserve">
          <source>Installation</source>
          <target state="translated">Installation</target>
        </trans-unit>
        <trans-unit id="b356313f979923fc829adb909098ed26a5a01aff" translate="yes" xml:space="preserve">
          <source>Interfaces</source>
          <target state="translated">Interfaces</target>
        </trans-unit>
        <trans-unit id="031a4e76f0b39d0df073d934da5fc48da8d737e5" translate="yes" xml:space="preserve">
          <source>JSON</source>
          <target state="translated">JSON</target>
        </trans-unit>
        <trans-unit id="a21d3253170de617a66bdbbbae1fd764d407b56b" translate="yes" xml:space="preserve">
          <source>JSON Stream</source>
          <target state="translated">JSON流</target>
        </trans-unit>
        <trans-unit id="323c15dbe6740ee6540be2d0b506bd248ff8987b" translate="yes" xml:space="preserve">
          <source>JetBrains</source>
          <target state="translated">JetBrains</target>
        </trans-unit>
        <trans-unit id="b1d5bc4319f7f8bf5b33719fb0fb6310897e8fa3" translate="yes" xml:space="preserve">
          <source>Landing Strip</source>
          <target state="translated">起落带</target>
        </trans-unit>
        <trans-unit id="a9ce522cb0a03624969154fd5e6aceacb8a3f714" translate="yes" xml:space="preserve">
          <source>Licensed under the Creative Commons Attribution 4.0 International License.</source>
          <target state="translated">采用知识共享署名4.0国际许可协议进行许可。</target>
        </trans-unit>
        <trans-unit id="a1fffaaafb7cc996685bceb829c053cc4f7de43d" translate="yes" xml:space="preserve">
          <source>List</source>
          <target state="translated">List</target>
        </trans-unit>
        <trans-unit id="4e836fdc2572ab23d5dc8c36bd613ac6b0f82d63" translate="yes" xml:space="preserve">
          <source>Manual</source>
          <target state="translated">Manual</target>
        </trans-unit>
        <trans-unit id="bfb0bedadfed8788447822b5ff9afc80a1eced19" translate="yes" xml:space="preserve">
          <source>Many reporters will display test duration, as well as flagging tests that are slow, as shown here with the &amp;ldquo;spec&amp;rdquo; reporter:</source>
          <target state="translated">许多报告程序将显示测试持续时间，以及标记速度较慢的测试，如此处与&amp;ldquo; spec&amp;rdquo;报告程序所示：</target>
        </trans-unit>
        <trans-unit id="23e67fceae0d77dd571dd25695fc0499faf1bb77" translate="yes" xml:space="preserve">
          <source>Markdown</source>
          <target state="translated">Markdown</target>
        </trans-unit>
        <trans-unit id="7eb0cee888ab55b559592d38eec027e9118d7d35" translate="yes" xml:space="preserve">
          <source>Min</source>
          <target state="translated">Min</target>
        </trans-unit>
        <trans-unit id="814d5c9075ac58da08deb4e3d88f6089a78f380d" translate="yes" xml:space="preserve">
          <source>Mocha</source>
          <target state="translated">Mocha</target>
        </trans-unit>
        <trans-unit id="2fcfac04215b5cfde8e6b64f5182684c5ddff757" translate="yes" xml:space="preserve">
          <source>Mocha Sidebar (VS Code)</source>
          <target state="translated">摩卡边栏 (VS代码)</target>
        </trans-unit>
        <trans-unit id="6c79a6b78a1b13f1d9fff2ae10078198d72760ac" translate="yes" xml:space="preserve">
          <source>Mocha allows you to define custom reporters. For more information see the &lt;a href=&quot;https://github.com/mochajs/mocha/wiki/Third-party-reporters&quot;&gt;wiki&lt;/a&gt;. An example is the &lt;a href=&quot;https://github.com/travisjeffery/mocha-teamcity-reporter&quot;&gt;TeamCity reporter&lt;/a&gt;.</source>
          <target state="translated">Mocha允许您定义自定义报告器。有关更多信息，请参见&lt;a href=&quot;https://github.com/mochajs/mocha/wiki/Third-party-reporters&quot;&gt;Wiki&lt;/a&gt;。&lt;a href=&quot;https://github.com/travisjeffery/mocha-teamcity-reporter&quot;&gt;TeamCity记者&lt;/a&gt;就是一个例子。</target>
        </trans-unit>
        <trans-unit id="3f59749d3a9db27b1ed50c290daac3034aeba7fb" translate="yes" xml:space="preserve">
          <source>Mocha allows you to use any assertion library you wish. In the above example, we&amp;rsquo;re using Node.js&amp;rsquo; built-in &lt;a href=&quot;https://nodejs.org/api/assert.html&quot;&gt;assert&lt;/a&gt; module&amp;ndash;but generally, if it throws an &lt;code&gt;Error&lt;/code&gt;, it will work! This means you can use libraries such as:</source>
          <target state="translated">Mocha允许您使用所需的任何断言库。在上面的示例中，我们使用Node.js的内置&lt;a href=&quot;https://nodejs.org/api/assert.html&quot;&gt;assert&lt;/a&gt;模块-但通常，如果抛出 &lt;code&gt;Error&lt;/code&gt; ，它将起作用！这意味着您可以使用以下库：</target>
        </trans-unit>
        <trans-unit id="e7c4e152770dd7db227ea5ce0c15dd7acf5fe835" translate="yes" xml:space="preserve">
          <source>Mocha currently requires Node.js v6.x or newer.</source>
          <target state="translated">Mocha目前需要Node.js v6.x或更新版本。</target>
        </trans-unit>
        <trans-unit id="e4549e0da2843af2164ef0f1363635cac6c7a2b1" translate="yes" xml:space="preserve">
          <source>Mocha options can be set via &lt;code&gt;mocha.setup()&lt;/code&gt;. Examples:</source>
          <target state="translated">可以通过 &lt;code&gt;mocha.setup()&lt;/code&gt; 设置Mocha选项。例子：</target>
        </trans-unit>
        <trans-unit id="c9790eb8ea7d71a62db4b3faa0acda2f1f003d89" translate="yes" xml:space="preserve">
          <source>Mocha reporters adjust to the terminal window, and always disable ANSI-escape coloring when the stdio streams are not associated with a TTY.</source>
          <target state="translated">摩卡报告器调整到终端窗口,并且当stdio流不与TTY相关联时,总是禁用ANSI-escape着色。</target>
        </trans-unit>
        <trans-unit id="d8db60c9e0cda6e115805304c42eac4e4413bf8a" translate="yes" xml:space="preserve">
          <source>Mocha runs in the browser. Every release of Mocha will have new builds of &lt;code&gt;./mocha.js&lt;/code&gt; and &lt;code&gt;./mocha.css&lt;/code&gt; for use in the browser.</source>
          <target state="translated">Mocha在浏览器中运行。Mocha的每个发行版都将具有在浏览器中使用的 &lt;code&gt;./mocha.js&lt;/code&gt; 和 &lt;code&gt;./mocha.css&lt;/code&gt; 的新版本。</target>
        </trans-unit>
        <trans-unit id="bdaf5d42996c9782025035e4e23b2ead0e71a84c" translate="yes" xml:space="preserve">
          <source>Mocha supports the &lt;code&gt;err.expected&lt;/code&gt; and &lt;code&gt;err.actual&lt;/code&gt; properties of any thrown &lt;code&gt;AssertionError&lt;/code&gt;s from an assertion library. Mocha will attempt to display the difference between what was expected, and what the assertion actually saw. Here&amp;rsquo;s an example of a &amp;ldquo;string&amp;rdquo; diff:</source>
          <target state="translated">Mocha支持从断言库中抛出的任何 &lt;code&gt;AssertionError&lt;/code&gt; 的 &lt;code&gt;err.expected&lt;/code&gt; 和 &lt;code&gt;err.actual&lt;/code&gt; 属性。Mocha将尝试显示期望值与断言实际看到的值之间的差异。这是&amp;ldquo;字符串&amp;rdquo;差异的示例：</target>
        </trans-unit>
        <trans-unit id="986c77af424daa79d6d9089aa97d53b7cb4f282b" translate="yes" xml:space="preserve">
          <source>Mocha&amp;rsquo;s &amp;ldquo;interface&amp;rdquo; system allows developers to choose their style of DSL. Mocha has &lt;strong&gt;BDD&lt;/strong&gt;, &lt;strong&gt;TDD&lt;/strong&gt;, &lt;strong&gt;Exports&lt;/strong&gt;, &lt;strong&gt;QUnit&lt;/strong&gt; and &lt;strong&gt;Require&lt;/strong&gt;-style interfaces.</source>
          <target state="translated">Mocha的&amp;ldquo;接口&amp;rdquo;系统使开发人员可以选择自己的DSL样式。Mocha具有&lt;strong&gt;BDD&lt;/strong&gt;，&lt;strong&gt;TDD&lt;/strong&gt;，&lt;strong&gt;Exports&lt;/strong&gt;，&lt;strong&gt;QUnit&lt;/strong&gt;和&lt;strong&gt;Require&lt;/strong&gt;样式的接口。</target>
        </trans-unit>
        <trans-unit id="22ffffbccfcf501db363d7084eeed3e3deb28b71" translate="yes" xml:space="preserve">
          <source>More Information</source>
          <target state="translated">更多信息</target>
        </trans-unit>
        <trans-unit id="d178d5c2e5c837309098fe81d7dfb445cfcf5e3d" translate="yes" xml:space="preserve">
          <source>Nyan</source>
          <target state="translated">Nyan</target>
        </trans-unit>
        <trans-unit id="6c9c3c2d7cdb1a5c91ca482eb4a85c1635a147a9" translate="yes" xml:space="preserve">
          <source>Only interested in the first exception? use &lt;code&gt;--bail&lt;/code&gt;!</source>
          <target state="translated">只对第一个例外感兴趣？使用 &lt;code&gt;--bail&lt;/code&gt; ！</target>
        </trans-unit>
        <trans-unit id="170cef265c96be8bcb76d1e2fa57cce18bef2e96" translate="yes" xml:space="preserve">
          <source>Or a specific test-case:</source>
          <target state="translated">或者是一个具体的测试案例。</target>
        </trans-unit>
        <trans-unit id="648c367a6a72cc9ba9319737869be7ad94adca1e" translate="yes" xml:space="preserve">
          <source>Passing &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions&quot;&gt;arrow functions&lt;/a&gt; (&amp;ldquo;lambdas&amp;rdquo;) to Mocha is discouraged. Lambdas lexically bind &lt;code&gt;this&lt;/code&gt; and cannot access the Mocha context. For example, the following code will fail:</source>
          <target state="translated">不建议将&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions&quot;&gt;箭头函数&lt;/a&gt;（&amp;ldquo; lambdas&amp;rdquo;）传递给Mocha。Lambda以词法绑定 &lt;code&gt;this&lt;/code&gt; ，并且无法访问Mocha上下文。例如，以下代码将失败：</target>
        </trans-unit>
        <trans-unit id="9451e4aac5f5c3fcea46531060b150e2b9a36c06" translate="yes" xml:space="preserve">
          <source>Pending Tests</source>
          <target state="translated">待定测试</target>
        </trans-unit>
        <trans-unit id="f6f87e4ab77e9426de1be27e566eec10532e5475" translate="yes" xml:space="preserve">
          <source>Pending tests will be included in the test results, and marked as pending. A pending test is not considered a failed test.</source>
          <target state="translated">待定的测试将包括在测试结果中,并标记为待定。待定的测试不被视为失败的测试。</target>
        </trans-unit>
        <trans-unit id="6037078963a82ab9952637e38bf310d2bc92819c" translate="yes" xml:space="preserve">
          <source>Previous to v3.0.0, &lt;code&gt;.only()&lt;/code&gt; used string matching to decide which tests to execute. As of v3.0.0, this is no longer the case. In v3.0.0 or newer, &lt;code&gt;.only()&lt;/code&gt; can be used multiple times to define a subset of tests to run:</source>
          <target state="translated">在v3.0.0之前， &lt;code&gt;.only()&lt;/code&gt; 使用字符串匹配来确定要执行的测试。从v3.0.0开始，情况不再如此。在v3.0.0或更高版本中， &lt;code&gt;.only()&lt;/code&gt; 可以多次使用以定义要运行的测试的子集：</target>
        </trans-unit>
        <trans-unit id="1b90271d66cf2d3ac755d49a550fe5f31b9eca5f" translate="yes" xml:space="preserve">
          <source>Progress</source>
          <target state="translated">Progress</target>
        </trans-unit>
        <trans-unit id="6392d1964def385ce87ea1765cc583aeecab5db6" translate="yes" xml:space="preserve">
          <source>QUnit</source>
          <target state="translated">QUnit</target>
        </trans-unit>
        <trans-unit id="065082ec90d58ac01e4f147aae2024dbd1935ef3" translate="yes" xml:space="preserve">
          <source>Real live example code:</source>
          <target state="translated">真正的实战范例代码。</target>
        </trans-unit>
        <trans-unit id="4a28165bd85132c82d26771bbd29abef42ef343a" translate="yes" xml:space="preserve">
          <source>Reporters</source>
          <target state="translated">Reporters</target>
        </trans-unit>
        <trans-unit id="c9e579d6d1ba09edc7af3d2bf94ca4c747181eb4" translate="yes" xml:space="preserve">
          <source>Reporting</source>
          <target state="translated">Reporting</target>
        </trans-unit>
        <trans-unit id="bff5c4dd0585a4f0e68311b683e36c85f477b138" translate="yes" xml:space="preserve">
          <source>Require</source>
          <target state="translated">Require</target>
        </trans-unit>
        <trans-unit id="1d778624bd69fa07fabf3003c8ae159e173f0408" translate="yes" xml:space="preserve">
          <source>Retry Tests</source>
          <target state="translated">重试测试</target>
        </trans-unit>
        <trans-unit id="25785cb889647cb80cd687be550b38d7f7bb2fa7" translate="yes" xml:space="preserve">
          <source>Root-Level Hooks</source>
          <target state="translated">根级钩</target>
        </trans-unit>
        <trans-unit id="4dc6baa8ed35e401c3c76b62f93ec1655235ebb1" translate="yes" xml:space="preserve">
          <source>Run Cycle Overview</source>
          <target state="translated">运行周期概述</target>
        </trans-unit>
        <trans-unit id="74dc676b7dbb52e4370ff466a15d00f6536664dd" translate="yes" xml:space="preserve">
          <source>Running Mocha in the Browser</source>
          <target state="translated">在浏览器中运行摩卡</target>
        </trans-unit>
        <trans-unit id="71674a60d50c138461eacf95cfe2fab80c6d2435" translate="yes" xml:space="preserve">
          <source>Running the above test will give you the below error message:</source>
          <target state="translated">运行上述测试,会得到以下错误信息。</target>
        </trans-unit>
        <trans-unit id="553ee09f100ae39f8a3fa8c7318da6a02b5987e5" translate="yes" xml:space="preserve">
          <source>See the &lt;a href=&quot;https://nodejs.org/en/docs/inspector/&quot;&gt;Node.js guide to debugging&lt;/a&gt;</source>
          <target state="translated">请参阅&lt;a href=&quot;https://nodejs.org/en/docs/inspector/&quot;&gt;Node.js调试指南&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="fb9bc0e8eb2d2a1244e30e88e2759e92b67ca429" translate="yes" xml:space="preserve">
          <source>Set up a test script in package.json:</source>
          <target state="translated">在package.json中设置一个测试脚本。</target>
        </trans-unit>
        <trans-unit id="e3aed3813cd1d21207e380d65f283f43f45fe33e" translate="yes" xml:space="preserve">
          <source>Some shells support recursive matching by using the &lt;code&gt;**&lt;/code&gt; wildcard in a glob. Bash &amp;gt;= 4.3 supports this with the &lt;a href=&quot;https://www.gnu.org/software/bash/manual/html_node/The-Shopt-Builtin.html&quot;&gt;&lt;code&gt;globstar&lt;/code&gt; option&lt;/a&gt; which &lt;a href=&quot;https://github.com/mochajs/mocha/pull/3348#issuecomment-383937247&quot;&gt;must be enabled&lt;/a&gt; to get the same results as passing the &lt;code&gt;--recursive&lt;/code&gt; option (&lt;a href=&quot;http://zsh.sourceforge.net/Doc/Release/Expansion.html#Recursive-Globbing&quot;&gt;ZSH&lt;/a&gt; and &lt;a href=&quot;https://fishshell.com/docs/current/#expand-wildcard&quot;&gt;Fish&lt;/a&gt; support this by default). With recursive matching enabled, the following is the same as passing &lt;code&gt;--recursive&lt;/code&gt;:</source>
          <target state="translated">一些外壳程序通过在glob中使用 &lt;code&gt;**&lt;/code&gt; 通配符来支持递归匹配。Bash&amp;gt; = 4.3通过&lt;a href=&quot;https://www.gnu.org/software/bash/manual/html_node/The-Shopt-Builtin.html&quot;&gt; &lt;code&gt;globstar&lt;/code&gt; 选项&lt;/a&gt;支持此&lt;a href=&quot;https://github.com/mochajs/mocha/pull/3348#issuecomment-383937247&quot;&gt;功能&lt;/a&gt;，必须启用它才能获得与传递 &lt;code&gt;--recursive&lt;/code&gt; 选项相同的结果（默认情况下，&lt;a href=&quot;http://zsh.sourceforge.net/Doc/Release/Expansion.html#Recursive-Globbing&quot;&gt;ZSH&lt;/a&gt;和&lt;a href=&quot;https://fishshell.com/docs/current/#expand-wildcard&quot;&gt;Fish&lt;/a&gt;支持此功能）。启用递归匹配后，以下内容与传递 &lt;code&gt;--recursive&lt;/code&gt; 相同：</target>
        </trans-unit>
        <trans-unit id="8d89530314527c8d7d9d9cb95ec6f5bdd921a1b9" translate="yes" xml:space="preserve">
          <source>Spec</source>
          <target state="translated">Spec</target>
        </trans-unit>
        <trans-unit id="bc3e3590e34c5723bef3b0b8f869fa10928242fe" translate="yes" xml:space="preserve">
          <source>Specifies the test-case timeout, defaulting to 2 seconds. To override you may pass the timeout in milliseconds, or a value with the &lt;code&gt;s&lt;/code&gt; suffix, ex: &lt;code&gt;--timeout 2s&lt;/code&gt; or &lt;code&gt;--timeout 2000&lt;/code&gt; would be equivalent.</source>
          <target state="translated">指定测试用例超时，默认为2秒。要覆盖你可以通过以毫秒为单位的超时，或与一个值 &lt;code&gt;s&lt;/code&gt; 后缀，例如： &lt;code&gt;--timeout 2s&lt;/code&gt; 或 &lt;code&gt;--timeout 2000&lt;/code&gt; 将是等效的。</target>
        </trans-unit>
        <trans-unit id="98a2ec177a17b29fd0e23e1b0c56a42c28684fcb" translate="yes" xml:space="preserve">
          <source>Specify the &amp;ldquo;slow&amp;rdquo; test threshold, defaulting to 75ms. Mocha uses this to highlight test-cases that are taking too long.</source>
          <target state="translated">指定&amp;ldquo;慢速&amp;rdquo;测试阈值，默认为75ms。Mocha使用它来突出显示耗时太长的测试用例。</target>
        </trans-unit>
        <trans-unit id="c4ceaad1f510ef5ea705ba3585d2de1d4a13cb21" translate="yes" xml:space="preserve">
          <source>Suite-level</source>
          <target state="translated">Suite-level</target>
        </trans-unit>
        <trans-unit id="de6db89ceed0133d6ad5521c06e4b825b9904621" translate="yes" xml:space="preserve">
          <source>Suite-level timeouts may be applied to entire test &amp;ldquo;suites&amp;rdquo;, or disabled via &lt;code&gt;this.timeout(0)&lt;/code&gt;. This will be inherited by all nested suites and test-cases that do not override the value.</source>
          <target state="translated">套件级别的超时可以应用于整个测试&amp;ldquo;套件&amp;rdquo;，也可以通过 &lt;code&gt;this.timeout(0)&lt;/code&gt; 禁用。这将被所有不覆盖该值的嵌套套件和测试用例继承。</target>
        </trans-unit>
        <trans-unit id="3c2ff3b3d96a22f0b23ce441a04c0a0c2fa45884" translate="yes" xml:space="preserve">
          <source>SuperAgent</source>
          <target state="translated">SuperAgent</target>
        </trans-unit>
        <trans-unit id="3c8dc3c357e48b97bb72efa9edaf9b8260cf8b2f" translate="yes" xml:space="preserve">
          <source>Suppose, for example, you have &amp;ldquo;api&amp;rdquo; related tests, as well as &amp;ldquo;app&amp;rdquo; related tests, as shown in the following snippet; One could use &lt;code&gt;--grep api&lt;/code&gt; or &lt;code&gt;--grep app&lt;/code&gt; to run one or the other. The same goes for any other part of a suite or test-case title, &lt;code&gt;--grep users&lt;/code&gt; would be valid as well, or even &lt;code&gt;--grep GET&lt;/code&gt;.</source>
          <target state="translated">例如，假设您具有与&amp;ldquo; api&amp;rdquo;相关的测试，以及与&amp;ldquo; app&amp;rdquo;相关的测试，如以下代码片段所示；一个可以使用 &lt;code&gt;--grep api&lt;/code&gt; 或 &lt;code&gt;--grep app&lt;/code&gt; 来运行其中一个。套件或测试用例标题的任何其他部分也是如此，-- &lt;code&gt;--grep users&lt;/code&gt; 也将有效，甚至 &lt;code&gt;--grep GET&lt;/code&gt; 也将有效。</target>
        </trans-unit>
        <trans-unit id="db4a04db5ccf9a8f908403383aa7476a2855f541" translate="yes" xml:space="preserve">
          <source>Synchronous Code</source>
          <target state="translated">同步代码</target>
        </trans-unit>
        <trans-unit id="fb7bc71b84dc9f961e5538c6dc0bfa7d98e5f671" translate="yes" xml:space="preserve">
          <source>TAP</source>
          <target state="translated">TAP</target>
        </trans-unit>
        <trans-unit id="a296b616f4529b6139114abe32f60836e9b40b52" translate="yes" xml:space="preserve">
          <source>TDD</source>
          <target state="translated">TDD</target>
        </trans-unit>
        <trans-unit id="4e5c1cb438afe66a7a3ce7f0162632afd0f40816" translate="yes" xml:space="preserve">
          <source>Take the following example:</source>
          <target state="translated">下面举例说明。</target>
        </trans-unit>
        <trans-unit id="d7d96b74e9a4844754af7453ceddbe412fc31872" translate="yes" xml:space="preserve">
          <source>Test duration</source>
          <target state="translated">测试时间</target>
        </trans-unit>
        <trans-unit id="9992314b32825a3bd8d55164b1d035efa115fc21" translate="yes" xml:space="preserve">
          <source>Test-level</source>
          <target state="translated">Test-level</target>
        </trans-unit>
        <trans-unit id="2da7e47e548df7e7571fdfa271f2a99f9c93ed57" translate="yes" xml:space="preserve">
          <source>Test-specific timeouts may also be applied, or the use of &lt;code&gt;this.timeout(0)&lt;/code&gt; to disable timeouts all together:</source>
          <target state="translated">也可以应用特定于测试的超时，或者使用 &lt;code&gt;this.timeout(0)&lt;/code&gt; 一起禁用超时：</target>
        </trans-unit>
        <trans-unit id="547d8ac3e28e4f0acda600f6e096dac65de667c6" translate="yes" xml:space="preserve">
          <source>Testing Mocha</source>
          <target state="translated">摩卡测试</target>
        </trans-unit>
        <trans-unit id="bab18b9734400748db3af2cebab49889718863f6" translate="yes" xml:space="preserve">
          <source>Testing asynchronous code with Mocha could not be simpler! Simply invoke the callback when your test is complete. By adding a callback (usually named &lt;code&gt;done&lt;/code&gt;) to &lt;code&gt;it()&lt;/code&gt;, Mocha will know that it should wait for this function to be called to complete the test. This callback accepts both an &lt;code&gt;Error&lt;/code&gt; instance (or subclass thereof) &lt;em&gt;or&lt;/em&gt; a falsy value; anything else will cause a failed test.</source>
          <target state="translated">使用Mocha测试异步代码再简单不过了！测试完成后，只需调用回调即可。通过向 &lt;code&gt;it()&lt;/code&gt; 添加回调（通常命名为 &lt;code&gt;done&lt;/code&gt; ），Mocha将知道它应该等待该函数被调用以完成测试。该回调既接受 &lt;code&gt;Error&lt;/code&gt; 实例（或其子类），&lt;em&gt;也&lt;/em&gt;接受伪造的值。其他任何事情都会导致测试失败。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="2a8a0fd2032a59ba64906f503a8fcf520c263411" translate="yes" xml:space="preserve">
          <source>Tests can appear before, after, or interspersed with your hooks. Hooks will run in the order they are defined, as appropriate; all &lt;code&gt;before()&lt;/code&gt; hooks run (once), then any &lt;code&gt;beforeEach()&lt;/code&gt; hooks, tests, any &lt;code&gt;afterEach()&lt;/code&gt; hooks, and finally &lt;code&gt;after()&lt;/code&gt; hooks (once).</source>
          <target state="translated">测试可以出现在您的钩子之前，之后或之间。挂钩将按照定义的顺序运行；所有 &lt;code&gt;before()&lt;/code&gt; 钩子都运行一次，然后运行任何 &lt;code&gt;beforeEach()&lt;/code&gt; 钩子，测试，任何 &lt;code&gt;afterEach()&lt;/code&gt; 钩子，最后是 &lt;code&gt;after()&lt;/code&gt; 钩子（一次）。</target>
        </trans-unit>
        <trans-unit id="cb66034b6a518b97ae4eb07cdc2717ab088f1068" translate="yes" xml:space="preserve">
          <source>TextMate</source>
          <target state="translated">TextMate</target>
        </trans-unit>
        <trans-unit id="2c6457fc57c8740f5cc64bb2c936f816468641c5" translate="yes" xml:space="preserve">
          <source>The &amp;ldquo;HTML&amp;rdquo; reporter is what you see when running Mocha in the browser. It looks like this:</source>
          <target state="translated">在浏览器中运行Mocha时，您将看到&amp;ldquo; HTML&amp;rdquo;报告器。看起来像这样：</target>
        </trans-unit>
        <trans-unit id="5333d52961e14491540412769193ff75d5df45ca" translate="yes" xml:space="preserve">
          <source>The &amp;ldquo;JSON stream&amp;rdquo; reporter outputs newline-delimited JSON &amp;ldquo;events&amp;rdquo; as they occur, beginning with a &amp;ldquo;start&amp;rdquo; event, followed by test passes or failures, and then the final &amp;ldquo;end&amp;rdquo; event.</source>
          <target state="translated">&amp;ldquo; JSON流&amp;rdquo;报告程序在发生时以换行分隔的JSON&amp;ldquo;事件&amp;rdquo;输出，从&amp;ldquo;开始&amp;rdquo;事件开始，然后是测试通过或失败，然后是最终的&amp;ldquo;结束&amp;rdquo;事件。</target>
        </trans-unit>
        <trans-unit id="3368e20feab3c06a96a469ab2bad643063f723e3" translate="yes" xml:space="preserve">
          <source>The &amp;ldquo;JSON&amp;rdquo; reporter outputs a single large JSON object when the tests have completed (failures or not).</source>
          <target state="translated">测试完成（是否失败）后，&amp;ldquo; JSON&amp;rdquo;报告器将输出一个大的JSON对象。</target>
        </trans-unit>
        <trans-unit id="64c8c54c7f79b833030381e6e9717c6ff5bcf9be" translate="yes" xml:space="preserve">
          <source>The &amp;ldquo;doc&amp;rdquo; reporter outputs a hierarchical HTML body representation of your tests. Wrap it with a header, footer, and some styling, then you have some fantastic documentation!</source>
          <target state="translated">&amp;ldquo; doc&amp;rdquo;报告器输出测试的分层HTML正文表示。用页眉，页脚和一些样式包装它，然后您会得到一些很棒的文档！</target>
        </trans-unit>
        <trans-unit id="0aad810ee8f2dec17d9ab81389da6967325218e4" translate="yes" xml:space="preserve">
          <source>The &amp;ldquo;list&amp;rdquo; reporter outputs a simple specifications list as test cases pass or fail, outputting the failure details at the bottom of the output.</source>
          <target state="translated">当测试用例通过或失败时，&amp;ldquo;列表&amp;rdquo;报告器将输出一个简单的规格列表，并在输出的底部输出失败的详细信息。</target>
        </trans-unit>
        <trans-unit id="4f248694160214415f2b010680f15162b41fa9ec" translate="yes" xml:space="preserve">
          <source>The &amp;ldquo;markdown&amp;rdquo; reporter generates a markdown TOC and body for your test suite. This is great if you want to use the tests as documentation within a Github wiki page, or a markdown file in the repository that Github can render. For example here is the Connect &lt;a href=&quot;https://github.com/senchalabs/connect/blob/90a725343c2945aaee637e799b1cd11e065b2bff/tests.md&quot;&gt;test output&lt;/a&gt;.</source>
          <target state="translated">&amp;ldquo;降价&amp;rdquo;报告器为您的测试套件生成降价目录和主体。如果您想将测试用作Github Wiki页面中的文档或Github可以呈现的存储库中的markdown文件，那么这非常好。例如，这里是Connect &lt;a href=&quot;https://github.com/senchalabs/connect/blob/90a725343c2945aaee637e799b1cd11e065b2bff/tests.md&quot;&gt;测试输出&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="e0d1db1adc546e3453bd023c105509dc9ff10741" translate="yes" xml:space="preserve">
          <source>The &amp;ldquo;min&amp;rdquo; reporter displays the summary only, while still outputting errors on failure. This reporter works great with &lt;code&gt;--watch&lt;/code&gt; as it clears the terminal in order to keep your test summary at the top.</source>
          <target state="translated">&amp;ldquo;最小&amp;rdquo;报告器仅显示摘要，而在失败时仍会输出错误。该报告器与 &lt;code&gt;--watch&lt;/code&gt; 配合使用非常好，因为它清除了终端，以便将测试摘要保持在顶部。</target>
        </trans-unit>
        <trans-unit id="661986fe32882ea8bd3d2690dacc77d81f35edc9" translate="yes" xml:space="preserve">
          <source>The &amp;ldquo;nyan&amp;rdquo; reporter is exactly what you might expect:</source>
          <target state="translated">&amp;ldquo; nyan&amp;rdquo;记者正是您所期望的：</target>
        </trans-unit>
        <trans-unit id="39ee7d9c094fb73922b809761d1bec30a6aee208" translate="yes" xml:space="preserve">
          <source>The &amp;ldquo;progress&amp;rdquo; reporter implements a simple progress-bar:</source>
          <target state="translated">&amp;ldquo;进度&amp;rdquo;报告器实现了一个简单的进度栏：</target>
        </trans-unit>
        <trans-unit id="be7f0cfae842826207ddea8730297b59a89f272c" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://github.com/mochajs/mocha.tmbundle&quot;&gt;Mocha TextMate bundle&lt;/a&gt; includes snippets to make writing tests quicker and more enjoyable.</source>
          <target state="translated">在&lt;a href=&quot;https://github.com/mochajs/mocha.tmbundle&quot;&gt;摩卡TextMate的捆绑&lt;/a&gt;包括片段，以编写测试更快，更愉快。</target>
        </trans-unit>
        <trans-unit id="950b4f2098ee9a6022de133bca2fd3e30ab8b4cc" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://qunitjs.com&quot;&gt;QUnit&lt;/a&gt;-inspired interface matches the &amp;ldquo;flat&amp;rdquo; look of QUnit, where the test suite title is simply defined before the test-cases. Like TDD, it uses &lt;code&gt;suite()&lt;/code&gt; and &lt;code&gt;test()&lt;/code&gt;, but resembling BDD, it also contains &lt;code&gt;before()&lt;/code&gt;, &lt;code&gt;after()&lt;/code&gt;, &lt;code&gt;beforeEach()&lt;/code&gt;, and &lt;code&gt;afterEach()&lt;/code&gt;.</source>
          <target state="translated">受&lt;a href=&quot;https://qunitjs.com&quot;&gt;QUnit启发的&lt;/a&gt;界面与QUnit的&amp;ldquo;扁平&amp;rdquo;外观相匹配，其中，测试套件标题仅在测试用例之前定义。与TDD一样，它使用 &lt;code&gt;suite()&lt;/code&gt; 和 &lt;code&gt;test()&lt;/code&gt; ，但类似于BDD，它还包含 &lt;code&gt;before()&lt;/code&gt; ， &lt;code&gt;after()&lt;/code&gt; ， &lt;code&gt;beforeEach()&lt;/code&gt; 和 &lt;code&gt;afterEach()&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="0bcbec0f5943ef167d67d70d4e9e088446901237" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;--grep&lt;/code&gt; option when specified will trigger mocha to only run tests matching the given &lt;code&gt;pattern&lt;/code&gt; which is internally compiled to a &lt;code&gt;RegExp&lt;/code&gt;.</source>
          <target state="translated">该 &lt;code&gt;--grep&lt;/code&gt; 时指定将触发摩卡匹配的只给出运行测试选项 &lt;code&gt;pattern&lt;/code&gt; 在内部编译为 &lt;code&gt;RegExp&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="1f5d1ce5911c30ebbdbdee19275338c5b20db5b2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;--reporter&lt;/code&gt; option allows you to specify the reporter that will be used, defaulting to &amp;ldquo;spec&amp;rdquo;. This flag may also be used to utilize third-party reporters. For example if you &lt;code&gt;npm install mocha-lcov-reporter&lt;/code&gt; you may then do &lt;code&gt;--reporter mocha-lcov-reporter&lt;/code&gt;.</source>
          <target state="translated">该 &lt;code&gt;--reporter&lt;/code&gt; 选项允许你指定将被使用，默认为&amp;ldquo;规范&amp;rdquo;的记者。此标志也可以用于利用第三方报告程序。例如，如果您 &lt;code&gt;npm install mocha-lcov-reporter&lt;/code&gt; ，则可以执行 &lt;code&gt;--reporter mocha-lcov-reporter&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="b837e62d6ccb34aba9ee913d1bd84721c5ee4971" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;--require&lt;/code&gt; option is useful for libraries such as &lt;a href=&quot;https://github.com/shouldjs/should.js&quot;&gt;should.js&lt;/a&gt;, so you may simply &lt;code&gt;--require should&lt;/code&gt; instead of manually invoking &lt;code&gt;require('should')&lt;/code&gt; within each test file. Note that this works well for &lt;code&gt;should&lt;/code&gt; as it augments &lt;code&gt;Object.prototype&lt;/code&gt;, however if you wish to access a module&amp;rsquo;s exports you will have to require them, for example &lt;code&gt;var should = require('should')&lt;/code&gt;. Furthermore, it can be used with relative paths, e.g. &lt;code&gt;--require ./test/helper.js&lt;/code&gt;</source>
          <target state="translated">该 &lt;code&gt;--require&lt;/code&gt; 选项对于库，比如有用&lt;a href=&quot;https://github.com/shouldjs/should.js&quot;&gt;should.js&lt;/a&gt;，所以你可以简单地 &lt;code&gt;--require should&lt;/code&gt; ，而不是手动调用 &lt;code&gt;require('should')&lt;/code&gt; 每个测试文件中。请注意，这 &lt;code&gt;should&lt;/code&gt; 很好，因为它可以 &lt;code&gt;Object.prototype&lt;/code&gt; ，但是，如果您希望访问模块的导出，则必须要求它们，例如 &lt;code&gt;var should = require('should')&lt;/code&gt; 。此外，它可以与相对路径一起使用，例如 &lt;code&gt;--require ./test/helper.js&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="4c95a6e8fa7be939b839ec9ed431e8bb4e972c5c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;--ui&lt;/code&gt; option lets you specify the interface to use, defaulting to &amp;ldquo;bdd&amp;rdquo;.</source>
          <target state="translated">该 &lt;code&gt;--ui&lt;/code&gt; 选项允许你指定的接口来使用，默认为&amp;ldquo;BDD&amp;rdquo;。</target>
        </trans-unit>
        <trans-unit id="c9edaa4bc7f927943c6a1ff634f69ebb2ef69a16" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;require&lt;/code&gt; interface allows you to require the &lt;code&gt;describe&lt;/code&gt; and friend words directly using &lt;code&gt;require&lt;/code&gt; and call them whatever you want. This interface is also useful if you want to avoid global variables in your tests.</source>
          <target state="translated">在 &lt;code&gt;require&lt;/code&gt; 的界面允许您所需要的 &lt;code&gt;describe&lt;/code&gt; 和朋友的话，直接使用 &lt;code&gt;require&lt;/code&gt; ，并呼吁他们任何你想要的。如果要避免测试中使用全局变量，此接口也很有用。</target>
        </trans-unit>
        <trans-unit id="7bf2c17fd8b3b553c9cde160ac5358d9bb3aee1c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;test/&lt;/code&gt; Directory</source>
          <target state="translated">该 &lt;code&gt;test/&lt;/code&gt; 目录</target>
        </trans-unit>
        <trans-unit id="7c70715d9a9f5600b6ff4177f08406292ceafebe" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;xunit&lt;/code&gt; reporter is also available. It outputs an XUnit-compatible XML document, often applicable in CI servers.</source>
          <target state="translated">该 &lt;code&gt;xunit&lt;/code&gt; 记者也可以。它输出一个XUnit兼容的XML文档，通常适用于CI服务器。</target>
        </trans-unit>
        <trans-unit id="3b37a40988604936193e8ed0680d361779e5c577" translate="yes" xml:space="preserve">
          <source>The &lt;em&gt;default behavior&lt;/em&gt; in v4.0.0 is &lt;code&gt;--no-exit&lt;/code&gt;, where previously it was &lt;code&gt;--exit&lt;/code&gt;.</source>
          <target state="translated">v4.0.0中的&lt;em&gt;默认行为&lt;/em&gt;是 &lt;code&gt;--no-exit&lt;/code&gt; ，以前是 &lt;code&gt;--exit&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="c763b13298e1fb9caa00fce37d979e4c5d9f789c" translate="yes" xml:space="preserve">
          <source>The &lt;strong&gt;BDD&lt;/strong&gt; interface provides &lt;code&gt;describe()&lt;/code&gt;, &lt;code&gt;context()&lt;/code&gt;, &lt;code&gt;it()&lt;/code&gt;, &lt;code&gt;specify()&lt;/code&gt;, &lt;code&gt;before()&lt;/code&gt;, &lt;code&gt;after()&lt;/code&gt;, &lt;code&gt;beforeEach()&lt;/code&gt;, and &lt;code&gt;afterEach()&lt;/code&gt;.</source>
          <target state="translated">的&lt;strong&gt;BDD&lt;/strong&gt;接口提供 &lt;code&gt;describe()&lt;/code&gt; ， &lt;code&gt;context()&lt;/code&gt; ， &lt;code&gt;it()&lt;/code&gt; （） &lt;code&gt;specify()&lt;/code&gt; ， &lt;code&gt;before()&lt;/code&gt; ， &lt;code&gt;after()&lt;/code&gt; ， &lt;code&gt;beforeEach()&lt;/code&gt; ，和 &lt;code&gt;afterEach()&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="9598d1f67c84a73ecf1910adbcd35914585a841a" translate="yes" xml:space="preserve">
          <source>The &lt;strong&gt;Exports&lt;/strong&gt; interface is much like Mocha&amp;rsquo;s predecessor &lt;a href=&quot;https://github.com/tj/expresso&quot;&gt;expresso&lt;/a&gt;. The keys &lt;code&gt;before&lt;/code&gt;, &lt;code&gt;after&lt;/code&gt;, &lt;code&gt;beforeEach&lt;/code&gt;, and &lt;code&gt;afterEach&lt;/code&gt; are special-cased, object values are suites, and function values are test-cases:</source>
          <target state="translated">该&lt;strong&gt;出口&lt;/strong&gt;界面很像摩卡的前身&lt;a href=&quot;https://github.com/tj/expresso&quot;&gt;快报&lt;/a&gt;。该键 &lt;code&gt;before&lt;/code&gt; ， &lt;code&gt;after&lt;/code&gt; ， &lt;code&gt;beforeEach&lt;/code&gt; 和 &lt;code&gt;afterEach&lt;/code&gt; 属于特例，对象的值是套房和函数值是测试情况：</target>
        </trans-unit>
        <trans-unit id="e699cb022e1a1575f3e999f496d5f126cbc6b954" translate="yes" xml:space="preserve">
          <source>The &lt;strong&gt;TDD&lt;/strong&gt; interface provides &lt;code&gt;suite()&lt;/code&gt;, &lt;code&gt;test()&lt;/code&gt;, &lt;code&gt;suiteSetup()&lt;/code&gt;, &lt;code&gt;suiteTeardown()&lt;/code&gt;, &lt;code&gt;setup()&lt;/code&gt;, and &lt;code&gt;teardown()&lt;/code&gt;:</source>
          <target state="translated">的&lt;strong&gt;TDD&lt;/strong&gt;接口提供 &lt;code&gt;suite()&lt;/code&gt; ， &lt;code&gt;test()&lt;/code&gt; ， &lt;code&gt;suiteSetup()&lt;/code&gt; ， &lt;code&gt;suiteTeardown()&lt;/code&gt; ， &lt;code&gt;setup()&lt;/code&gt; ，和 &lt;code&gt;teardown()&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="ad4c565465894c8ee61e971557b761d7a88df144" translate="yes" xml:space="preserve">
          <source>The Landing Strip (&lt;code&gt;landing&lt;/code&gt;) reporter is a gimmicky test reporter simulating a plane landing :) unicode ftw</source>
          <target state="translated">The Landing Strip（ &lt;code&gt;landing&lt;/code&gt; ）记者是模仿飞机降落的：头测试记者：) unicode ftw</target>
        </trans-unit>
        <trans-unit id="eba3b26cd15b029054ccfea1e07e24021de410dc" translate="yes" xml:space="preserve">
          <source>The SuperAgent request library &lt;a href=&quot;https://visionmedia.github.io/superagent/docs/test.html&quot;&gt;test documentation&lt;/a&gt; was generated with Mocha&amp;rsquo;s doc reporter using this Bash command:</source>
          <target state="translated">SuperAgent请求库&lt;a href=&quot;https://visionmedia.github.io/superagent/docs/test.html&quot;&gt;测试文档&lt;/a&gt;是使用以下Bash命令由Mocha的文档报告器生成的：</target>
        </trans-unit>
        <trans-unit id="1e1aa347e3007252705de1fb497adc5b25ccab0c" translate="yes" xml:space="preserve">
          <source>The TAP reporter emits lines for a &lt;a href=&quot;https://en.wikipedia.org/wiki/Test_Anything_Protocol&quot;&gt;Test-Anything-Protocol&lt;/a&gt; consumer.</source>
          <target state="translated">TAP报告程序为&lt;a href=&quot;https://en.wikipedia.org/wiki/Test_Anything_Protocol&quot;&gt;Test-Anything-Protocol&lt;/a&gt;使用者发出行。</target>
        </trans-unit>
        <trans-unit id="db8032248965c09d3c38c18fd4d34750b613f87a" translate="yes" xml:space="preserve">
          <source>The above code will produce a suite with three specs:</source>
          <target state="translated">上面的代码将产生一个有三种规格的套件。</target>
        </trans-unit>
        <trans-unit id="565ecc014c359d6d8748abc8825f30c68254f333" translate="yes" xml:space="preserve">
          <source>The above test will be reported as &lt;a href=&quot;#pending-tests&quot;&gt;pending&lt;/a&gt;. It&amp;rsquo;s also important to note that calling &lt;code&gt;this.skip()&lt;/code&gt; will effectively &lt;em&gt;abort&lt;/em&gt; the test.</source>
          <target state="translated">以上测试将报告为&lt;a href=&quot;#pending-tests&quot;&gt;未决&lt;/a&gt;。还需要注意的是，调用 &lt;code&gt;this.skip()&lt;/code&gt; 将有效地&lt;em&gt;中止&lt;/em&gt;测试。</target>
        </trans-unit>
        <trans-unit id="d2dd497c39681e399376a5d4b169a7504f7c7d8f" translate="yes" xml:space="preserve">
          <source>The above test will fail with &lt;code&gt;Error: Resolution method is overspecified. Specify a callback *or* return a Promise; not both.&lt;/code&gt;. In versions older than v3.0.0, the call to &lt;code&gt;done()&lt;/code&gt; is effectively ignored.</source>
          <target state="translated">上面的测试将失败，并显示以下 &lt;code&gt;Error: Resolution method is overspecified. Specify a callback *or* return a Promise; not both.&lt;/code&gt; 。在v3.0.0之前的版本中，对 &lt;code&gt;done()&lt;/code&gt; 的调用实际上被忽略。</target>
        </trans-unit>
        <trans-unit id="a241b6cc077b36452b7f07c4225946989798ecf5" translate="yes" xml:space="preserve">
          <source>The browser may use the &lt;code&gt;--grep&lt;/code&gt; as functionality. Append a query-string to your URL: &lt;code&gt;?grep=api&lt;/code&gt;.</source>
          <target state="translated">浏览器可以使用 &lt;code&gt;--grep&lt;/code&gt; 作为功​​能。将查询字符串追加到您的URL： &lt;code&gt;?grep=api&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="f45d77921e402759985d1c018e180499c835b031" translate="yes" xml:space="preserve">
          <source>The command &lt;code&gt;mocha --reporter doc array&lt;/code&gt; would yield:</source>
          <target state="translated">命令 &lt;code&gt;mocha --reporter doc array&lt;/code&gt; 将产生：</target>
        </trans-unit>
        <trans-unit id="5f7afc116111ee3a0af1a9b5d7649a87db9b33d9" translate="yes" xml:space="preserve">
          <source>The dot matrix (or &amp;ldquo;dot&amp;rdquo;) reporter is simply a series of characters which represent test cases. Failures highlight in red exclamation marks (&lt;code&gt;!&lt;/code&gt;), pending tests with a blue comma (&lt;code&gt;,&lt;/code&gt;), and slow tests as yellow. Good if you prefer minimal output.</source>
          <target state="translated">点矩阵（或&amp;ldquo;点&amp;rdquo;）报告程序只是代表测试用例的一系列字符。失败突显红色的感叹号（ &lt;code&gt;!&lt;/code&gt; ），等待与蓝色逗号（测试 &lt;code&gt;,&lt;/code&gt; ），和缓慢的测试，黄色。如果您更喜欢最小的输出，则很好。</target>
        </trans-unit>
        <trans-unit id="18c2a13535cef8cc9c7c5aa8dbed597228314d82" translate="yes" xml:space="preserve">
          <source>The exclusivity feature allows you to run &lt;em&gt;only&lt;/em&gt; the specified suite or test-case by appending &lt;code&gt;.only()&lt;/code&gt; to the function. Here&amp;rsquo;s an example of executing only a particular suite:</source>
          <target state="translated">排他性功能允许您通过将 &lt;code&gt;.only()&lt;/code&gt; 附加到函数中来&lt;em&gt;仅&lt;/em&gt;运行指定的套件或测试用例。这是仅执行特定套件的示例：</target>
        </trans-unit>
        <trans-unit id="345c002964155b4ecb8800d430c5a697a4f87083" translate="yes" xml:space="preserve">
          <source>The following editor-related packages are available:</source>
          <target state="translated">以下是与编辑相关的软件包。</target>
        </trans-unit>
        <trans-unit id="8c066e5de249b831fcb1a137433b90c38715e5a5" translate="yes" xml:space="preserve">
          <source>The following method(s) &lt;em&gt;only&lt;/em&gt; function in a browser context:</source>
          <target state="translated">以下方法&lt;em&gt;仅&lt;/em&gt;在浏览器上下文中起作用：</target>
        </trans-unit>
        <trans-unit id="447ede2a00c21abc1ae5460592695448444ebb10" translate="yes" xml:space="preserve">
          <source>The following option(s) &lt;em&gt;only&lt;/em&gt; function in a browser context:</source>
          <target state="translated">以下选项&lt;em&gt;仅&lt;/em&gt;在浏览器上下文中起作用：</target>
        </trans-unit>
        <trans-unit id="2b9f45fc951a3f573a3abefe11f51cb8bbe4c380" translate="yes" xml:space="preserve">
          <source>The latter example uses &lt;a href=&quot;https://www.npmjs.com/package/chai-as-promised&quot;&gt;Chai as Promised&lt;/a&gt; for fluent promise assertions.</source>
          <target state="translated">后一个示例将&lt;a href=&quot;https://www.npmjs.com/package/chai-as-promised&quot;&gt;Chai用作&lt;/a&gt;对流利的诺言断言的承诺。</target>
        </trans-unit>
        <trans-unit id="802ceff010c366f7513ae9f2a1750f92540980f4" translate="yes" xml:space="preserve">
          <source>The lines in this file are prepended to any actual command-line arguments. As such, actual command-line arguments will take precedence over the defaults.</source>
          <target state="translated">本文件中的行是在任何实际的命令行参数前加上的,因此,实际的命令行参数将优先于默认值。因此,实际的命令行参数将优先于默认值。</target>
        </trans-unit>
        <trans-unit id="d6fafdc37c0c812465c5b779825d606227ed3c0b" translate="yes" xml:space="preserve">
          <source>The plugin is titled &lt;strong&gt;NodeJS&lt;/strong&gt;, and can be installed via &lt;strong&gt;Preferences&lt;/strong&gt; &amp;gt; &lt;strong&gt;Plugins&lt;/strong&gt;, assuming your license allows it.</source>
          <target state="translated">该插件名为&lt;strong&gt;NodeJS&lt;/strong&gt;，可以在您的许可证允许的情况下通过&lt;strong&gt;&amp;ldquo;首选项&amp;rdquo;&lt;/strong&gt; &amp;gt;&amp;ldquo; &lt;strong&gt;插件&amp;rdquo;&lt;/strong&gt;进行安装。</target>
        </trans-unit>
        <trans-unit id="ff3f53522b46c827c4ab4a8231b5511e5bd9d7f6" translate="yes" xml:space="preserve">
          <source>The settings above will default the reporter to &lt;code&gt;dot&lt;/code&gt;, require the &lt;code&gt;should&lt;/code&gt; library, and use &lt;code&gt;bdd&lt;/code&gt; as the interface. With this, you may then invoke &lt;code&gt;mocha&lt;/code&gt; with additional arguments, here enabling &lt;a href=&quot;http://growl.info/&quot;&gt;Growl&lt;/a&gt; support, and changing the reporter to &lt;code&gt;list&lt;/code&gt;:</source>
          <target state="translated">上面的设置将默认将报告程序设置为 &lt;code&gt;dot&lt;/code&gt; ，需要 &lt;code&gt;should&lt;/code&gt; 库，并使用 &lt;code&gt;bdd&lt;/code&gt; 作为界面。这样，您就可以使用附加参数调用 &lt;code&gt;mocha&lt;/code&gt; ，在此处启用&lt;a href=&quot;http://growl.info/&quot;&gt;Growl&lt;/a&gt;支持，并将报告器更改为 &lt;code&gt;list&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="74c14ebd3cffb48c3668201eb3d66bbad116c502" translate="yes" xml:space="preserve">
          <source>The test/ Directory</source>
          <target state="translated">测试/目录</target>
        </trans-unit>
        <trans-unit id="56bc4260522d50687c27d129cd0392807c1034ea" translate="yes" xml:space="preserve">
          <source>Then run tests with:</source>
          <target state="translated">然后用运行测试。</target>
        </trans-unit>
        <trans-unit id="69262a2b56999cfe1e9fdda96faf079263c46e51" translate="yes" xml:space="preserve">
          <source>Third-Party Reporters</source>
          <target state="translated">第三方记者</target>
        </trans-unit>
        <trans-unit id="7939bc5c6712cd9ba0c108140dcbed3f31c76456" translate="yes" xml:space="preserve">
          <source>This feature does re-run &lt;code&gt;beforeEach/afterEach&lt;/code&gt; hooks but not &lt;code&gt;before/after&lt;/code&gt; hooks.</source>
          <target state="translated">此功能会在 &lt;code&gt;beforeEach/afterEach&lt;/code&gt; 挂钩 &lt;code&gt;before/after&lt;/code&gt; 重新运行，但不会在之前/之后挂钩上重新运行。</target>
        </trans-unit>
        <trans-unit id="60707f6239eafe97ee7fca274db835f26058a03c" translate="yes" xml:space="preserve">
          <source>This feature is the inverse of &lt;code&gt;.only()&lt;/code&gt;. By appending &lt;code&gt;.skip()&lt;/code&gt;, you may tell Mocha to simply ignore these suite(s) and test case(s). Anything skipped will be marked as &lt;a href=&quot;#pending-tests&quot;&gt;pending&lt;/a&gt;, and reported as such. Here&amp;rsquo;s an example of skipping an entire suite:</source>
          <target state="translated">此功能是 &lt;code&gt;.only()&lt;/code&gt; 的反函数。通过附加 &lt;code&gt;.skip()&lt;/code&gt; ，您可以告诉Mocha简单地忽略这些套件和测试用例。跳过的所有内容都将标记为&lt;a href=&quot;#pending-tests&quot;&gt;未决&lt;/a&gt;，并以此报告。以下是跳过整个套件的示例：</target>
        </trans-unit>
        <trans-unit id="db6fb9c76f97b4dc11607aaf93d9c0861add85c8" translate="yes" xml:space="preserve">
          <source>This is the default reporter. The &amp;ldquo;spec&amp;rdquo; reporter outputs a hierarchical view nested just as the test cases are.</source>
          <target state="translated">这是默认的报告者。&amp;ldquo;规范&amp;rdquo;报告器输出嵌套的层次结构视图，就像测试用例一样。</target>
        </trans-unit>
        <trans-unit id="27a4f2c5a6aa7d957af2668e0ec53e32944aba26" translate="yes" xml:space="preserve">
          <source>Timeouts</source>
          <target state="translated">Timeouts</target>
        </trans-unit>
        <trans-unit id="79d18461c6ac14a2122bc3476f1b9e29df62dcb9" translate="yes" xml:space="preserve">
          <source>To configure where &lt;code&gt;mocha&lt;/code&gt; looks for tests, you may pass your own glob:</source>
          <target state="translated">要配置 &lt;code&gt;mocha&lt;/code&gt; 在哪里寻找测试，您可以传递自己的glob：</target>
        </trans-unit>
        <trans-unit id="f42dba1c3aa3966e335877c4abaa6c8d2851edbb" translate="yes" xml:space="preserve">
          <source>To ensure your tests aren&amp;rsquo;t leaving messes around, here are some ideas to get started:</source>
          <target state="translated">为确保您的测试不会乱七八糟，以下是一些入门指南：</target>
        </trans-unit>
        <trans-unit id="8a094ac9a15fef3b07e9d66f499b8ea5894cc8b3" translate="yes" xml:space="preserve">
          <source>To make things even easier, the &lt;code&gt;done()&lt;/code&gt; callback also accepts an &lt;code&gt;Error&lt;/code&gt; instance (i.e. &lt;code&gt;new Error()&lt;/code&gt;), so we may use this directly:</source>
          <target state="translated">为了使事情变得更加简单， &lt;code&gt;done()&lt;/code&gt; 回调还接受一个 &lt;code&gt;Error&lt;/code&gt; 实例（即 &lt;code&gt;new Error()&lt;/code&gt; ），因此我们可以直接使用它：</target>
        </trans-unit>
        <trans-unit id="181147873dde77a66b9e8936a82a57a1c0d43a0b" translate="yes" xml:space="preserve">
          <source>To run Mocha&amp;rsquo;s tests, you will need GNU Make or compatible; Cygwin should work.</source>
          <target state="translated">要运行Mocha的测试，您将需要GNU Make或兼容版本。Cygwin应该工作。</target>
        </trans-unit>
        <trans-unit id="124a97823b2ea07d462afbbcf69e674aeafa0dd8" translate="yes" xml:space="preserve">
          <source>To skip &lt;em&gt;multiple&lt;/em&gt; tests in this manner, use &lt;code&gt;this.skip()&lt;/code&gt; in a &amp;ldquo;before&amp;rdquo; hook:</source>
          <target state="translated">要以这种方式跳过&lt;em&gt;多个&lt;/em&gt;测试，请在&amp;ldquo; before&amp;rdquo;挂钩中使用 &lt;code&gt;this.skip()&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="7260172f73da876c1c01ac390ce0bacfa8301c04" translate="yes" xml:space="preserve">
          <source>To tweak what&amp;rsquo;s considered &amp;ldquo;slow&amp;rdquo;, you can use the &lt;code&gt;slow()&lt;/code&gt; method:</source>
          <target state="translated">要调整所谓的&amp;ldquo;慢速&amp;rdquo;，可以使用 &lt;code&gt;slow()&lt;/code&gt; 方法：</target>
        </trans-unit>
        <trans-unit id="4aff415f99540d0b50b0e89660fe5754193c5ce0" translate="yes" xml:space="preserve">
          <source>To use a different reporter:</source>
          <target state="translated">要使用不同的记者。</target>
        </trans-unit>
        <trans-unit id="4d67647d97898e9540d474b58f2a7cd6420e6599" translate="yes" xml:space="preserve">
          <source>Try something like &lt;a href=&quot;https://npm.im/why-is-node-running&quot;&gt;why-is-node-running&lt;/a&gt;</source>
          <target state="translated">试试像&lt;a href=&quot;https://npm.im/why-is-node-running&quot;&gt;为什么节点正在运行&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="0bb18642b70b9f8a9c12ccf39487328f306b8e19" translate="yes" xml:space="preserve">
          <source>Usage</source>
          <target state="translated">Usage</target>
        </trans-unit>
        <trans-unit id="60ed9ffde5c3bc9c4eb8943a408076b8dfe51f28" translate="yes" xml:space="preserve">
          <source>Use &lt;a href=&quot;#exclusive-tests&quot;&gt;&lt;code&gt;.only&lt;/code&gt;&lt;/a&gt; until you find the test that causes Mocha to hang</source>
          <target state="translated">使用&lt;a href=&quot;#exclusive-tests&quot;&gt; &lt;code&gt;.only&lt;/code&gt; ,&lt;/a&gt;直到找到导致Mocha挂起的测试</target>
        </trans-unit>
        <trans-unit id="ec02773b86986cfdb5c4d1ecb9e0c327c5d9c709" translate="yes" xml:space="preserve">
          <source>Use the new &lt;a href=&quot;https://github.com/nodejs/node/blob/master/doc/api/async_hooks.md&quot;&gt;&lt;code&gt;async_hooks&lt;/code&gt;&lt;/a&gt; API (&lt;a href=&quot;https://git.io/vdlNM&quot;&gt;example&lt;/a&gt;)</source>
          <target state="translated">使用新的&lt;a href=&quot;https://github.com/nodejs/node/blob/master/doc/api/async_hooks.md&quot;&gt; &lt;code&gt;async_hooks&lt;/code&gt; &lt;/a&gt; API（&lt;a href=&quot;https://git.io/vdlNM&quot;&gt;示例&lt;/a&gt;）</target>
        </trans-unit>
        <trans-unit id="337aaed86842f2d6aa0bad6af3291d8271ad3377" translate="yes" xml:space="preserve">
          <source>Use this option to have Mocha check for global variables that are leaked while running tests. Specify globals that are acceptable via the &lt;code&gt;--globals&lt;/code&gt; option (for example: &lt;code&gt;--check-leaks --globals jQuery,MyLib&lt;/code&gt;).</source>
          <target state="translated">使用此选项可使Mocha检查运行测试时泄漏的全局变量。通过 &lt;code&gt;--globals&lt;/code&gt; 选项指定可接受的全局变量（例如： &lt;code&gt;--check-leaks --globals jQuery,MyLib&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="6520ff806f47de65e65ee6d0478f3e24eb1fb32b" translate="yes" xml:space="preserve">
          <source>Using async / await</source>
          <target state="translated">使用async/await</target>
        </trans-unit>
        <trans-unit id="3524cc2fcdcb4100bc0a15fc50b996cff06a83f0" translate="yes" xml:space="preserve">
          <source>View SuperAgent&amp;rsquo;s &lt;a href=&quot;https://github.com/visionmedia/superagent/blob/master/Makefile&quot;&gt;Makefile&lt;/a&gt; for reference.</source>
          <target state="translated">查看SuperAgent的&lt;a href=&quot;https://github.com/visionmedia/superagent/blob/master/Makefile&quot;&gt;Makefile&lt;/a&gt;以供参考。</target>
        </trans-unit>
        <trans-unit id="46ce53208c0b44d4824e60e18f475a3488a4cf23" translate="yes" xml:space="preserve">
          <source>Wallaby.js</source>
          <target state="translated">Wallaby.js</target>
        </trans-unit>
        <trans-unit id="007f2a3d03e97100b115da180988c4633173e84d" translate="yes" xml:space="preserve">
          <source>WebSocket.io</source>
          <target state="translated">WebSocket.io</target>
        </trans-unit>
        <trans-unit id="9e83e679040d85a449b1822c88d3ad567f5eef32" translate="yes" xml:space="preserve">
          <source>When testing synchronous code, omit the callback and Mocha will automatically continue on to the next test.</source>
          <target state="translated">测试同步代码时,省略回调,Mocha会自动继续进行下一个测试。</target>
        </trans-unit>
        <trans-unit id="dc62639f5265fad900da247d38f006b2a4ffdf0c" translate="yes" xml:space="preserve">
          <source>With its default &amp;ldquo;BDD&amp;rdquo;-style interface, Mocha provides the hooks &lt;code&gt;before()&lt;/code&gt;, &lt;code&gt;after()&lt;/code&gt;, &lt;code&gt;beforeEach()&lt;/code&gt;, and &lt;code&gt;afterEach()&lt;/code&gt;. These should be used to set up preconditions and clean up after your tests.</source>
          <target state="translated">通过其默认的&amp;ldquo; BDD&amp;rdquo;样式接口，Mocha提供了钩子 &lt;code&gt;before()&lt;/code&gt; ， &lt;code&gt;after()&lt;/code&gt; ， &lt;code&gt;beforeEach()&lt;/code&gt; 和 &lt;code&gt;afterEach()&lt;/code&gt; 。这些应用于设置前提条件并在测试后清理。</target>
        </trans-unit>
        <trans-unit id="b0a77555be0622b8ee3dc42afae18948e8477c1b" translate="yes" xml:space="preserve">
          <source>Working with Promises</source>
          <target state="translated">承诺工作</target>
        </trans-unit>
        <trans-unit id="886a64c45d3e00ddc7bf5f5fb27189e7a4f8985b" translate="yes" xml:space="preserve">
          <source>XUnit</source>
          <target state="translated">XUnit</target>
        </trans-unit>
        <trans-unit id="4e19397d678bf6b1ecd2b44b2845afaa38c6ac24" translate="yes" xml:space="preserve">
          <source>You can choose to retry failed tests up to a certain number of times. This feature is designed to handle end-to-end tests (functional tests/Selenium&amp;hellip;) where resources cannot be easily mocked/stubbed. &lt;strong&gt;It&amp;rsquo;s not recommended to use this feature for unit tests&lt;/strong&gt;.</source>
          <target state="translated">您可以选择最多重试失败的测试。此功能旨在处理无法轻松模拟/存根资源的端到端测试（功能测试/ Selenium&amp;hellip;）。&lt;strong&gt;不建议将此功能用于单元测试&lt;/strong&gt;。</target>
        </trans-unit>
        <trans-unit id="f005210d275a1a8eb71a10ca4d3e586d175c0169" translate="yes" xml:space="preserve">
          <source>You may also choose multiple suites:</source>
          <target state="translated">你也可以选择多套房。</target>
        </trans-unit>
        <trans-unit id="eb919cbe2da233a5f01bbc2c6d1554c50ab176a9" translate="yes" xml:space="preserve">
          <source>You may also pick any file and add &amp;ldquo;root&amp;rdquo;-level hooks. For example, add &lt;code&gt;beforeEach()&lt;/code&gt; outside of all &lt;code&gt;describe()&lt;/code&gt; blocks. This will cause the callback to &lt;code&gt;beforeEach()&lt;/code&gt; to run before any test case, regardless of the file it lives in (this is because Mocha has an &lt;em&gt;implied&lt;/em&gt;&lt;code&gt;describe()&lt;/code&gt; block, called the &amp;ldquo;root suite&amp;rdquo;).</source>
          <target state="translated">您也可以选择任何文件并添加&amp;ldquo;根&amp;rdquo;级挂钩。例如，在所有 &lt;code&gt;describe()&lt;/code&gt; 块之外添加 &lt;code&gt;beforeEach()&lt;/code&gt; 。这将使对 &lt;code&gt;beforeEach()&lt;/code&gt; 的回调在任何测试用例之前运行，无论其位于哪个文件中（这是因为Mocha具有&lt;em&gt;隐式&lt;/em&gt; &lt;code&gt;describe()&lt;/code&gt; 块，称为&amp;ldquo;根套件&amp;rdquo;）。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="53a40e9ac08f8e56ed58d18aad7e7338c0d58b43" translate="yes" xml:space="preserve">
          <source>You may also skip &lt;em&gt;at runtime&lt;/em&gt; using &lt;code&gt;this.skip()&lt;/code&gt;. If a test needs an environment or configuration which cannot be detected beforehand, a runtime skip is appropriate. For example:</source>
          <target state="translated">您也可以使用 &lt;code&gt;this.skip()&lt;/code&gt; &lt;em&gt;在运行时&lt;/em&gt;跳过。如果测试需要无法事先检测到的环境或配置，则可以使用运行时跳过。例如：</target>
        </trans-unit>
        <trans-unit id="32fab07543a277b879029abf99d6e89ba5b11c84" translate="yes" xml:space="preserve">
          <source>auto run tests on file save</source>
          <target state="translated">保存文件时自动运行测试</target>
        </trans-unit>
        <trans-unit id="f0f10b7b77b19c7640a562cf9060fead1bff0494" translate="yes" xml:space="preserve">
          <source>done()</source>
          <target state="translated">done()</target>
        </trans-unit>
        <trans-unit id="e87e846a2b2da5dfadb82e7cc09eefd99016f221" translate="yes" xml:space="preserve">
          <source>exports</source>
          <target state="translated">exports</target>
        </trans-unit>
        <trans-unit id="a619da43c8cb95adf890b628630836654a0a3077" translate="yes" xml:space="preserve">
          <source>mocha</source>
          <target state="translated">mocha</target>
        </trans-unit>
        <trans-unit id="4bfb16b073994e714d04294f5bca1c3e894db573" translate="yes" xml:space="preserve">
          <source>mocha.opts</source>
          <target state="translated">mocha.opts</target>
        </trans-unit>
        <trans-unit id="1859cc6fb110f181dca7c365469d9905153a1bd4" translate="yes" xml:space="preserve">
          <source>mocha.setup()</source>
          <target state="translated">mocha.setup()</target>
        </trans-unit>
        <trans-unit id="cbe19f375a678776beb07f153186eb8e9713ad96" translate="yes" xml:space="preserve">
          <source>only()</source>
          <target state="translated">only()</target>
        </trans-unit>
        <trans-unit id="66afd2a4fec11527d32e28b8e991cb7947e40089" translate="yes" xml:space="preserve">
          <source>or as a development dependency for your project:</source>
          <target state="translated">或作为项目的开发依赖。</target>
        </trans-unit>
        <trans-unit id="623e76c36aa2a886542011e28412cc761d7ceb01" translate="yes" xml:space="preserve">
          <source>require</source>
          <target state="translated">require</target>
        </trans-unit>
        <trans-unit id="f58113e053e9cfabd8f5da0edb51764ffe848135" translate="yes" xml:space="preserve">
          <source>run &amp;amp; debug tests for each level hierarchy from all tests to a single test (and each describe of course)</source>
          <target state="translated">针对所有测试到单个测试的每个级别层次结构运行和调试测试（当然，每个测试都可以描述）</target>
        </trans-unit>
        <trans-unit id="75a7aab533cbd0d4b0a0f60439ef76ac4367c817" translate="yes" xml:space="preserve">
          <source>see all tests in VS Code sidebar menu</source>
          <target state="translated">在VS Code侧边栏菜单中查看所有测试。</target>
        </trans-unit>
        <trans-unit id="b015dd3ac23d491eb96c2099ff31b741d8ad935d" translate="yes" xml:space="preserve">
          <source>see tests results directly in the code editor</source>
          <target state="translated">在代码编辑器中直接查看测试结果</target>
        </trans-unit>
        <trans-unit id="1c32fed0b0a4ddd34877f85ef98fc80b6eef760b" translate="yes" xml:space="preserve">
          <source>skip()</source>
          <target state="translated">skip()</target>
        </trans-unit>
        <trans-unit id="55187fbc9d22bfac69ba93172a722f9efba0e3ef" translate="yes" xml:space="preserve">
          <source>specify()</source>
          <target state="translated">specify()</target>
        </trans-unit>
        <trans-unit id="89dfaa12d7e423bcf84be8320838b8e822e3099d" translate="yes" xml:space="preserve">
          <source>teardown()</source>
          <target state="translated">teardown()</target>
        </trans-unit>
        <trans-unit id="1a13bd67d53c6ca5d0ba854cc1c6d8e1dc4db3cb" translate="yes" xml:space="preserve">
          <source>test()</source>
          <target state="translated">test()</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
