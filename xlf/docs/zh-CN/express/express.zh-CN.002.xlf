<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="zh-CN" datatype="htmlbody" original="express">
    <body>
      <group id="express">
        <trans-unit id="b5ef97f3eb356131ee3ae97d67740cadea0106df" translate="yes" xml:space="preserve">
          <source>Sparse arrays that have extremely high indexes in the query string could cause the process to run out of memory and crash the server.</source>
          <target state="translated">稀疏数组如果在查询字符串中有极高的索引,可能会导致进程跑出内存并使服务器崩溃。</target>
        </trans-unit>
        <trans-unit id="27e4aa8b4b82b8acf4f1b3767be3f84835fed96a" translate="yes" xml:space="preserve">
          <source>Specifies the default JSONP callback name.</source>
          <target state="translated">指定默认的JSONP回调名。</target>
        </trans-unit>
        <trans-unit id="641bd5916707fec2514d601040b5fbc4f5128c46" translate="yes" xml:space="preserve">
          <source>Specify a single subnet:</source>
          <target state="translated">指定一个子网。</target>
        </trans-unit>
        <trans-unit id="ca32bd89167c893429f6d68f325a9cdaf08c7f96" translate="yes" xml:space="preserve">
          <source>Specify a subnet and an address:</source>
          <target state="translated">指定一个子网和一个地址。</target>
        </trans-unit>
        <trans-unit id="5355dbee8cd53350b3184a9df563491afbcb0b6b" translate="yes" xml:space="preserve">
          <source>Specify if overlapping &amp;amp; adjacent ranges should be combined, defaults to &lt;code&gt;false&lt;/code&gt;. When &lt;code&gt;true&lt;/code&gt;, ranges will be combined and returned as if they were specified that way in the header.</source>
          <target state="translated">指定是否应合并重叠范围和相邻范围，默认为 &lt;code&gt;false&lt;/code&gt; 。如果为 &lt;code&gt;true&lt;/code&gt; ，则将合并范围并返回它们，就像在标头中以这种方式指定它们一样。</target>
        </trans-unit>
        <trans-unit id="18383c4f427413fa108687c9edaf868e15415a28" translate="yes" xml:space="preserve">
          <source>Specify multiple subnets as CSV:</source>
          <target state="translated">将多个子网指定为CSV。</target>
        </trans-unit>
        <trans-unit id="d2fa130b3c0a38c091a238309f12fc577d8e93ec" translate="yes" xml:space="preserve">
          <source>Specify multiple subnets as an array:</source>
          <target state="translated">将多个子网指定为一个数组。</target>
        </trans-unit>
        <trans-unit id="de2530d91c66a2a2a148a5d5403ab6ccefce43c3" translate="yes" xml:space="preserve">
          <source>Specify the default character set for the text content if the charset is not specified in the &lt;code&gt;Content-Type&lt;/code&gt; header of the request.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="41b25279c02f0454306860e1895780af22fb451c" translate="yes" xml:space="preserve">
          <source>Start service</source>
          <target state="translated">开始服务</target>
        </trans-unit>
        <trans-unit id="c07f6ba63bfbd56f1c9456402bf7340ad56d5c3f" translate="yes" xml:space="preserve">
          <source>Starting with Express 5, middleware functions that return a Promise will call &lt;code&gt;next(value)&lt;/code&gt; when they reject or throw an error. &lt;code&gt;next&lt;/code&gt; will be called with either the rejected value or the thrown Error.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a2eb3845bfbede256dff3b4d1ebdd68188b840c8" translate="yes" xml:space="preserve">
          <source>Starting with Express 5, route handlers and middleware that return a Promise will call &lt;code&gt;next(value)&lt;/code&gt; automatically when they reject or throw an error. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9fa48ff981e1f3d94d7aad2e9d994440e5718d47" translate="yes" xml:space="preserve">
          <source>Starting with version 4.x, Express no longer depends on &lt;a href=&quot;https://github.com/senchalabs/connect&quot;&gt;Connect&lt;/a&gt;. The middleware functions that were previously included with Express are now in separate modules; see &lt;a href=&quot;https://github.com/senchalabs/connect#middleware&quot;&gt;the list of middleware functions&lt;/a&gt;.</source>
          <target state="translated">从版本4.x开始，Express不再依赖&lt;a href=&quot;https://github.com/senchalabs/connect&quot;&gt;Connect&lt;/a&gt;。Express以前包含的中间件功能现在位于单独的模块中；请参阅&lt;a href=&quot;https://github.com/senchalabs/connect#middleware&quot;&gt;中间件功能列表&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="1db4b70a1d677af14340b5de81a5e1ad2c5f2b94" translate="yes" xml:space="preserve">
          <source>Starts a UNIX socket and listens for connections on the given path. This method is identical to Node&amp;rsquo;s &lt;a href=&quot;https://nodejs.org/api/http.html#http_server_listen&quot;&gt;http.Server.listen()&lt;/a&gt;.</source>
          <target state="translated">启动UNIX套接字，并侦听给定路径上的连接。此方法与Node的&lt;a href=&quot;https://nodejs.org/api/http.html#http_server_listen&quot;&gt;http.Server.listen（）&lt;/a&gt;相同。</target>
        </trans-unit>
        <trans-unit id="1336694741e37c2efe3ec6e6b8bf2710beea656b" translate="yes" xml:space="preserve">
          <source>Stop an app:</source>
          <target state="translated">停止一个应用程序。</target>
        </trans-unit>
        <trans-unit id="3df63b7acb0522da685dad5fe84b81fdd7b25264" translate="yes" xml:space="preserve">
          <source>String</source>
          <target state="translated">String</target>
        </trans-unit>
        <trans-unit id="67de91247cb6f05f729a5729c810ee5169375d87" translate="yes" xml:space="preserve">
          <source>String containing comma-separated values</source>
          <target state="translated">包含逗号分隔值的字符串</target>
        </trans-unit>
        <trans-unit id="a7703adac3d9d86521f6328a718d53d9e3bf1899" translate="yes" xml:space="preserve">
          <source>String or Array</source>
          <target state="translated">字符串或数组</target>
        </trans-unit>
        <trans-unit id="be0871945f3a0cf8f9c63879bae1d648fdfc8018" translate="yes" xml:space="preserve">
          <source>StrongLoop PM as a systemd service</source>
          <target state="translated">将StrongLoop PM作为一个systemd服务</target>
        </trans-unit>
        <trans-unit id="ee376430f32806754027051a398213a171b8d246" translate="yes" xml:space="preserve">
          <source>StrongLoop PM as an Upstart service</source>
          <target state="translated">StrongLoop PM作为一项新兴服务</target>
        </trans-unit>
        <trans-unit id="578e6b53e19303f150bfa5732e00c71b1c184f8a" translate="yes" xml:space="preserve">
          <source>StrongLoop Process Manager</source>
          <target state="translated">StrongLoop流程管理器</target>
        </trans-unit>
        <trans-unit id="f29707d9893bc17fe5d19ca7cb9ba5744f744a8a" translate="yes" xml:space="preserve">
          <source>StrongLoop Process Manager (StrongLoop PM) is a production process manager for Node.js applications. StrongLoop PM has built-in load balancing, monitoring, and multi-host deployment, and a graphical console. You can use StrongLoop PM for the following tasks:</source>
          <target state="translated">StrongLoop Process Manager(StrongLoop PM)是一款针对Node.js应用的生产流程管理器。StrongLoop PM内置了负载均衡、监控、多主机部署以及一个图形化控制台。您可以使用StrongLoop PM完成以下任务。</target>
        </trans-unit>
        <trans-unit id="44b45f56a502953d4331e3eb571e87a866c04bb5" translate="yes" xml:space="preserve">
          <source>Sub-apps will:</source>
          <target state="translated">子应用将。</target>
        </trans-unit>
        <trans-unit id="988723fca0b1f92286dd3fa5e6c185f434cbe8c7" translate="yes" xml:space="preserve">
          <source>Synchronous functions and methods tie up the executing process until they return. A single call to a synchronous function might return in a few microseconds or milliseconds, however in high-traffic websites, these calls add up and reduce the performance of the app. Avoid their use in production.</source>
          <target state="translated">同步函数和方法会束缚执行进程,直到它们返回。对同步函数的一次调用可能会在几微秒或几毫秒内返回,然而在高流量的网站中,这些调用会累积起来,并降低应用程序的性能。避免在生产中使用它们。</target>
        </trans-unit>
        <trans-unit id="456d2198000ded3f2dc429dc773ea33964d80d31" translate="yes" xml:space="preserve">
          <source>SystemD</source>
          <target state="translated">SystemD</target>
        </trans-unit>
        <trans-unit id="124493a955eff3531dfe489a5cd138ba10cca742" translate="yes" xml:space="preserve">
          <source>SystemD is the default process manager on modern Linux distributions. Running a Node service based on SystemD is very simple. NOTE: This section is based on &lt;a href=&quot;https://www.axllent.org/docs/view/nodejs-service-with-systemd/&quot;&gt;a blog post by Ralph Slooten (@axllent)&lt;/a&gt;.</source>
          <target state="translated">SystemD是现代Linux发行版上的默认进程管理器。基于SystemD运行Node服务非常简单。注意：本节基于&lt;a href=&quot;https://www.axllent.org/docs/view/nodejs-service-with-systemd/&quot;&gt;Ralph Slooten（@axllent）的博客文章&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="a44a53c54ba77f8a2ae69713f422d9f138899fdb" translate="yes" xml:space="preserve">
          <source>Systemd</source>
          <target state="translated">Systemd</target>
        </trans-unit>
        <trans-unit id="dfc4b18ab42a0ba369543ea528891a7f5db6913f" translate="yes" xml:space="preserve">
          <source>Systemd is a Linux system and service manager. Most major Linux distributions have adopted systemd as their default init system.</source>
          <target state="translated">systemd是一个Linux系统和服务管理器。大多数主流的Linux发行版都采用systemd作为默认的init系统。</target>
        </trans-unit>
        <trans-unit id="d65bf0a0757703865df78ceed495b5e2950eb82c" translate="yes" xml:space="preserve">
          <source>Terminating a HTTP server in Node.js requires keeping track of all open connections and signaling them that the server is shutting down. http-terminator implements the logic for tracking all connections and their termination upon a timeout. http-terminator also ensures graceful communication of the server intention to shutdown to any clients that are currently receiving response from this server.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="011295c68cd0477af5d16facb34108e6cb4f7e07" translate="yes" xml:space="preserve">
          <source>Terminus</source>
          <target state="translated">Terminus</target>
        </trans-unit>
        <trans-unit id="f347b94c14fb35d60c7d81d615e7a006098e0875" translate="yes" xml:space="preserve">
          <source>The &amp;ldquo;mount&amp;rdquo; path is stripped and is &lt;em&gt;not&lt;/em&gt; visible to the middleware function. The main effect of this feature is that a mounted middleware function may operate without code changes regardless of its &amp;ldquo;prefix&amp;rdquo; pathname.</source>
          <target state="translated">&amp;ldquo;安装&amp;rdquo;路径已删除，并且对中间件功能&lt;em&gt;不&lt;/em&gt;可见。此功能的主要作用是，无论其&amp;ldquo;前缀&amp;rdquo;路径名如何，安装的中间件功能都可以在不更改代码的情况下运行。</target>
        </trans-unit>
        <trans-unit id="9f9b4406fa85667b917de06916c12d08be62cdfb" translate="yes" xml:space="preserve">
          <source>The &amp;lsquo;&lt;code&gt;.&lt;/code&gt;&amp;rsquo; character can&amp;rsquo;t be used to capture a character in your capturing regexp. For example you can&amp;rsquo;t use &lt;code&gt;'/user-.+/'&lt;/code&gt; to capture &lt;code&gt;'users-gami'&lt;/code&gt;, use &lt;code&gt;[\\s\\S]&lt;/code&gt; or &lt;code&gt;[\\w\\W]&lt;/code&gt; instead (as in &lt;code&gt;'/user-[\\s\\S]+/'&lt;/code&gt;.</source>
          <target state="translated">的' &lt;code&gt;.&lt;/code&gt; '字符不能用于在捕获正则表达式中捕获字符。例如，您不能使用 &lt;code&gt;'/user-.+/'&lt;/code&gt; 来捕获 &lt;code&gt;'users-gami'&lt;/code&gt; ，而应使用 &lt;code&gt;[\\s\\S]&lt;/code&gt; 或 &lt;code&gt;[\\w\\W]&lt;/code&gt; 代替（如 &lt;code&gt;'/user-[\\s\\S]+/'&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="806f45f972b0cb5e2c8b22b7034c2fd8c9e3a37b" translate="yes" xml:space="preserve">
          <source>The 404 response of an unsupported method override attempt was susceptible to cross-site scripting attacks.</source>
          <target state="translated">不支持的方法覆盖尝试的404响应容易受到跨站脚本攻击。</target>
        </trans-unit>
        <trans-unit id="9f310b4e80cc8571e0196cc728be354de5dca8b8" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;http://expressjs.com/en/api.html#req.ip&quot;&gt;req.ip&lt;/a&gt; and &lt;a href=&quot;http://expressjs.com/en/api.html#req.ips&quot;&gt;req.ips&lt;/a&gt; values are populated with the list of addresses from &lt;code&gt;X-Forwarded-For&lt;/code&gt;.</source>
          <target state="translated">该&lt;a href=&quot;http://expressjs.com/en/api.html#req.ip&quot;&gt;req.ip&lt;/a&gt;和&lt;a href=&quot;http://expressjs.com/en/api.html#req.ips&quot;&gt;req.ips&lt;/a&gt;值填入地址从名单 &lt;code&gt;X-Forwarded-For&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="99cc27e4563e8667a19d300476c8819b3a920c19" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify#The_replacer_parameter&quot;&gt;'replacer' argument used by `JSON.stringify`&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify#The_replacer_parameter&quot;&gt;JSON.stringify`使用&lt;/a&gt;的'replacer'参数。</target>
        </trans-unit>
        <trans-unit id="e000f0b12fa4e781f803aff248bd6ae2207e2d42" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify#The_space_argument&quot;&gt;'space' argument used by `JSON.stringify`&lt;/a&gt;. This is typically set to the number of spaces to use to indent prettified JSON.</source>
          <target state="translated">&lt;a href=&quot;https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify#The_space_argument&quot;&gt;JSON.stringify`使用&lt;/a&gt;的'space'参数。通常将其设置为用于缩进经过修饰的JSON的空格数。</target>
        </trans-unit>
        <trans-unit id="719f7690e4db0c63a362c9d877b1b4ec945c5a5c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Content-Type&lt;/code&gt; response header is set when a callback is selected. However, you may alter this within the callback using methods such as &lt;code&gt;res.set()&lt;/code&gt; or &lt;code&gt;res.type()&lt;/code&gt;.</source>
          <target state="translated">的 &lt;code&gt;Content-Type&lt;/code&gt; 当选择一个回调响应首部设置。但是，您可以使用 &lt;code&gt;res.set()&lt;/code&gt; 或 &lt;code&gt;res.type()&lt;/code&gt; 之类的方法在回调中更改此设置。</target>
        </trans-unit>
        <trans-unit id="1cb48940d20c0a4670fddb7155d79ad49843e2ae" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;app.all()&lt;/code&gt; method is useful for mapping &amp;ldquo;global&amp;rdquo; logic for specific path prefixes or arbitrary matches. For example, if you put the following at the top of all other route definitions, it requires that all routes from that point on require authentication, and automatically load a user. Keep in mind that these callbacks do not have to act as end-points: &lt;code&gt;loadUser&lt;/code&gt; can perform a task, then call &lt;code&gt;next()&lt;/code&gt; to continue matching subsequent routes.</source>
          <target state="translated">所述 &lt;code&gt;app.all()&lt;/code&gt; 方法是用于特定路径的前缀或任意匹配映射&amp;ldquo;全局&amp;rdquo;逻辑电路。例如，如果将以下内容放在所有其他路由定义的顶部，则要求从该点开始的所有路由都需要身份验证，并自动加载用户。请记住，这些回调不必充当端点： &lt;code&gt;loadUser&lt;/code&gt; 可以执行任务，然后调用 &lt;code&gt;next()&lt;/code&gt; 继续匹配后续路由。</target>
        </trans-unit>
        <trans-unit id="4095cbb4de9229fa5a410fcf5c487b65fb556833" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;app.configure()&lt;/code&gt; function has been removed. Use the &lt;code&gt;process.env.NODE_ENV&lt;/code&gt; or &lt;code&gt;app.get('env')&lt;/code&gt; function to detect the environment and configure the app accordingly.</source>
          <target state="translated">该 &lt;code&gt;app.configure()&lt;/code&gt; 函数已被删除。使用 &lt;code&gt;process.env.NODE_ENV&lt;/code&gt; 或 &lt;code&gt;app.get('env')&lt;/code&gt; 函数检测环境并相应地配置应用程序。</target>
        </trans-unit>
        <trans-unit id="acb546a414f22260abb5b78d7fc6fd20b6d2e059" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;app.get()&lt;/code&gt; function is automatically called for the HTTP &lt;code&gt;HEAD&lt;/code&gt; method in addition to the &lt;code&gt;GET&lt;/code&gt; method if &lt;code&gt;app.head()&lt;/code&gt; was not called for the path before &lt;code&gt;app.get()&lt;/code&gt;.</source>
          <target state="translated">所述 &lt;code&gt;app.get()&lt;/code&gt; 函数被自动调用用于HTTP &lt;code&gt;HEAD&lt;/code&gt; 除了方法 &lt;code&gt;GET&lt;/code&gt; 方法如果 &lt;code&gt;app.head()&lt;/code&gt; 未要求的路径之前 &lt;code&gt;app.get()&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="96f33f2b20cbe266f1dd0490ba383c791d9f43fe" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;app.listen()&lt;/code&gt; method returns an &lt;a href=&quot;https://nodejs.org/api/http.html#http_class_http_server&quot;&gt;http.Server&lt;/a&gt; object and (for HTTP) is a convenience method for the following:</source>
          <target state="translated">所述 &lt;code&gt;app.listen()&lt;/code&gt; 方法返回的&lt;a href=&quot;https://nodejs.org/api/http.html#http_class_http_server&quot;&gt;http.Server&lt;/a&gt;对象和（对于HTTP）是用于以下内容的方便的方法：</target>
        </trans-unit>
        <trans-unit id="4cd9436d8fdbfcee064950de3803e909fc7a44eb" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;app.locals&lt;/code&gt; object has properties that are local variables within the application.</source>
          <target state="translated">该 &lt;code&gt;app.locals&lt;/code&gt; 对象具有的应用程序中的局部变量的性质。</target>
        </trans-unit>
        <trans-unit id="539eb4a461d245199bfc06b59dace03889dd323b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;app.mountpath&lt;/code&gt; property contains one or more path patterns on which a sub-app was mounted.</source>
          <target state="translated">所述 &lt;code&gt;app.mountpath&lt;/code&gt; 属性包含在其上安装一个子应用程序的一个或多个路径的模式。</target>
        </trans-unit>
        <trans-unit id="ce5c0b00a2968479d672439b233f7f4ada488316" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;app.param(fn)&lt;/code&gt; signature was used for modifying the behavior of the &lt;code&gt;app.param(name, fn)&lt;/code&gt; function. It has been deprecated since v4.11.0, and Express 5 no longer supports it at all.</source>
          <target state="translated">该 &lt;code&gt;app.param(fn)&lt;/code&gt; 用于修改的行为签名 &lt;code&gt;app.param(name, fn)&lt;/code&gt; 功能。从v4.11.0开始不推荐使用它，Express 5不再支持它。</target>
        </trans-unit>
        <trans-unit id="6f8d512599341d1ffccb646a9d53c3815a9909f6" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;app.router&lt;/code&gt; object, which was removed in Express 4, has made a comeback in Express 5. In the new version, this object is a just a reference to the base Express router, unlike in Express 3, where an app had to explicitly load it.</source>
          <target state="translated">在Express 4中已删除的 &lt;code&gt;app.router&lt;/code&gt; 对象已在Express 5中卷土重来。在新版本中，此对象仅是对基本Express路由器的引用，这与Express 3中的应用程序必须显式不同。加载它。</target>
        </trans-unit>
        <trans-unit id="322f724b66d8c50047b10c341f72a6c913117c32" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;app&lt;/code&gt; object conventionally denotes the Express application. Create it by calling the top-level &lt;code&gt;express()&lt;/code&gt; function exported by the Express module:</source>
          <target state="translated">该 &lt;code&gt;app&lt;/code&gt; 对象通常表示Express应用程序。通过调用Express模块​​导出的顶级 &lt;code&gt;express()&lt;/code&gt; 函数来创建它：</target>
        </trans-unit>
        <trans-unit id="4d2eb7a6d67f2af542c52887819aa5c7a9ea35e3" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;app&lt;/code&gt; object has methods for</source>
          <target state="translated">该 &lt;code&gt;app&lt;/code&gt; 对象具有用于</target>
        </trans-unit>
        <trans-unit id="0942753a74f14391c17666295ada55f0357a2421" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;app&lt;/code&gt; returned by &lt;code&gt;express()&lt;/code&gt; is in fact a JavaScript &lt;code&gt;Function&lt;/code&gt;, designed to be passed to Node&amp;rsquo;s HTTP servers as a callback to handle requests. This makes it easy to provide both HTTP and HTTPS versions of your app with the same code base, as the app does not inherit from these (it is simply a callback):</source>
          <target state="translated">&lt;code&gt;express()&lt;/code&gt; 返回的 &lt;code&gt;app&lt;/code&gt; 实际上是一个JavaScript &lt;code&gt;Function&lt;/code&gt; ，旨在将其作为处理请求的回调传递给Node的HTTP服务器。这使为应用程序的HTTP和HTTPS版本提供相同的代码库变得容易，因为该应用程序不继承自这些代码（它只是一个回调）：</target>
        </trans-unit>
        <trans-unit id="15504d5c9867f072a0b5e7041ff31d51029b40d2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;body&lt;/code&gt; parameter can be a &lt;code&gt;Buffer&lt;/code&gt; object, a &lt;code&gt;String&lt;/code&gt;, an object, &lt;code&gt;Boolean&lt;/code&gt;, or an &lt;code&gt;Array&lt;/code&gt;. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3710b539edaf72141eda35322195cb5211c30446" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;body&lt;/code&gt; parameter can be a &lt;code&gt;Buffer&lt;/code&gt; object, a &lt;code&gt;String&lt;/code&gt;, an object, or an &lt;code&gt;Array&lt;/code&gt;. For example:</source>
          <target state="translated">所述 &lt;code&gt;body&lt;/code&gt; 参数可以是一个 &lt;code&gt;Buffer&lt;/code&gt; 对象，一个 &lt;code&gt;String&lt;/code&gt; ，一个对象，或者一个 &lt;code&gt;Array&lt;/code&gt; 。例如：</target>
        </trans-unit>
        <trans-unit id="646ee064f4d7aac435257422c741d543065adf38" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;encode&lt;/code&gt; option allows you to choose the function used for cookie value encoding. Does not support asynchronous functions.</source>
          <target state="translated">该 &lt;code&gt;encode&lt;/code&gt; 选项允许您选择使用cookie值编码的功能。不支持异步功能。</target>
        </trans-unit>
        <trans-unit id="dcde2c62c28f339505069f2c78c0d47a8cc0096e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;express-generator&lt;/code&gt; package installs the &lt;code&gt;express&lt;/code&gt; command-line tool. Use the following command to do so:</source>
          <target state="translated">所述 &lt;code&gt;express-generator&lt;/code&gt; 包安装 &lt;code&gt;express&lt;/code&gt; 命令行工具。使用以下命令执行此操作：</target>
        </trans-unit>
        <trans-unit id="fa33f6c71acb5cd1027066747426935e8d3abbf8" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;http&lt;/code&gt; module is no longer needed, unless you need to directly work with it (socket.io/SPDY/HTTPS). The app can be started by using the &lt;code&gt;app.listen()&lt;/code&gt; function.</source>
          <target state="translated">该 &lt;code&gt;http&lt;/code&gt; 模块不再需要，除非你需要它（socket.io/SPDY/HTTPS）直接工作。可以使用 &lt;code&gt;app.listen()&lt;/code&gt; 函数启动该应用程序。</target>
        </trans-unit>
        <trans-unit id="d1384e2c629872060ee158c830dde728621143f6" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;if-modified-since&lt;/code&gt; request header is specified and &lt;code&gt;last-modified&lt;/code&gt; request header is equal to or earlier than the &lt;code&gt;modified&lt;/code&gt; response header.</source>
          <target state="translated">的 &lt;code&gt;if-modified-since&lt;/code&gt; 被指定的请求报头和 &lt;code&gt;last-modified&lt;/code&gt; 请求头等于或早于 &lt;code&gt;modified&lt;/code&gt; 响应头。</target>
        </trans-unit>
        <trans-unit id="4b139985ad45a6255e1c2f1a60421b2f0fbbd846" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;if-none-match&lt;/code&gt; request header is &lt;code&gt;*&lt;/code&gt;.</source>
          <target state="translated">的 &lt;code&gt;if-none-match&lt;/code&gt; 请求头是 &lt;code&gt;*&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="ef1552976afa7fe055a52d204daed39fa8c98dee" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;if-none-match&lt;/code&gt; request header, after being parsed into its directives, does not match the &lt;code&gt;etag&lt;/code&gt; response header.</source>
          <target state="translated">&lt;code&gt;if-none-match&lt;/code&gt; 将if-none-match请求标头解析为伪指令，则与 &lt;code&gt;etag&lt;/code&gt; 响应标头不匹配。</target>
        </trans-unit>
        <trans-unit id="a2ef33f6b802f3fa64f468732ef34ea70c4a5ab5" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;json spaces&lt;/code&gt; application property is disabled by default in Express 4.</source>
          <target state="translated">该 &lt;code&gt;json spaces&lt;/code&gt; 应用属性默认是在快递4禁用。</target>
        </trans-unit>
        <trans-unit id="b3f5170b81dcb3fc1fe5d48c64ba8dcc9163863f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;maxAge&lt;/code&gt; option is a convenience option for setting &amp;ldquo;expires&amp;rdquo; relative to the current time in milliseconds. The following is equivalent to the second example above.</source>
          <target state="translated">所述 &lt;code&gt;maxAge&lt;/code&gt; 选项是设定一个方便的选项&amp;ldquo;过期&amp;rdquo;相对于以毫秒为单位的当前时间。以下等效于上面的第二个示例。</target>
        </trans-unit>
        <trans-unit id="ee985fff3d87125feddfb563c4b7ac49b311a5ff" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;mount&lt;/code&gt; event is fired on a sub-app, when it is mounted on a parent app. The parent app is passed to the callback function.</source>
          <target state="translated">当将其挂载在父应用程序上时，将在子应用程序上触发该 &lt;code&gt;mount&lt;/code&gt; 事件。父应用程序将传递给回调函数。</target>
        </trans-unit>
        <trans-unit id="39db5f1c6b6deff262849b77da59d5bb09d64b07" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;options&lt;/code&gt; parameter is an object that can have the following properties.</source>
          <target state="translated">的 &lt;code&gt;options&lt;/code&gt; 的参数是一个对象，该对象可以具有以下性质。</target>
        </trans-unit>
        <trans-unit id="03e608ced78a8bb15c5e52c1e15cf30f2fdbfdfe" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;req.baseUrl&lt;/code&gt; property is similar to the &lt;a href=&quot;#app.mountpath&quot;&gt;mountpath&lt;/a&gt; property of the &lt;code&gt;app&lt;/code&gt; object, except &lt;code&gt;app.mountpath&lt;/code&gt; returns the matched path pattern(s).</source>
          <target state="translated">所述 &lt;code&gt;req.baseUrl&lt;/code&gt; 属性类似于&lt;a href=&quot;#app.mountpath&quot;&gt;装载路径&lt;/a&gt;的属性的 &lt;code&gt;app&lt;/code&gt; 对象，除了 &lt;code&gt;app.mountpath&lt;/code&gt; 返回匹配的路径模式（一个或多个）。</target>
        </trans-unit>
        <trans-unit id="97664149cc7813b09c11f3d26721f8d091db904b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;req&lt;/code&gt; (request) and &lt;code&gt;res&lt;/code&gt; (response) are the exact same objects that Node provides, so you can invoke &lt;code&gt;req.pipe()&lt;/code&gt;, &lt;code&gt;req.on('data', callback)&lt;/code&gt;, and anything else you would do without Express involved.</source>
          <target state="translated">该 &lt;code&gt;req&lt;/code&gt; （请求）和 &lt;code&gt;res&lt;/code&gt; （响应）是完全一样的对象节点提供，这样你就可以调用 &lt;code&gt;req.pipe()&lt;/code&gt; ， &lt;code&gt;req.on('data', callback)&lt;/code&gt; ，和其他任何你会怎么做，没有任何明示参与。</target>
        </trans-unit>
        <trans-unit id="d7840a4b9899b464f407be3492025caedf59ca8b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;req&lt;/code&gt; object is an enhanced version of Node&amp;rsquo;s own request object and supports all &lt;a href=&quot;https://nodejs.org/api/http.html#http_class_http_incomingmessage&quot;&gt;built-in fields and methods&lt;/a&gt;.</source>
          <target state="translated">该 &lt;code&gt;req&lt;/code&gt; 对象是节点自身的请求对象的增强版本，支持所有&lt;a href=&quot;https://nodejs.org/api/http.html#http_class_http_incomingmessage&quot;&gt;内置的属性和方法&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="f4cef768a6774c9602c48cd9ac1ab6e1dcea3423" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;req&lt;/code&gt; object represents the HTTP request and has properties for the request query string, parameters, body, HTTP headers, and so on. In this documentation and by convention, the object is always referred to as &lt;code&gt;req&lt;/code&gt; (and the HTTP response is &lt;code&gt;res&lt;/code&gt;) but its actual name is determined by the parameters to the callback function in which you&amp;rsquo;re working.</source>
          <target state="translated">所述 &lt;code&gt;req&lt;/code&gt; 对象表示该HTTP请求，并且具有属性请求查询字符串，参数，身体，HTTP报头，等等。在本文档中，按照约定，该对象始终称为 &lt;code&gt;req&lt;/code&gt; （HTTP响应为 &lt;code&gt;res&lt;/code&gt; ），但其实际名称由您正在使用的回调函数的参数确定。</target>
        </trans-unit>
        <trans-unit id="ce00b7b794b62165916a53daadcdc131b5c48602" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;res.sendfile()&lt;/code&gt; function has been replaced by a camel-cased version &lt;code&gt;res.sendFile()&lt;/code&gt; in Express 5.</source>
          <target state="translated">该 &lt;code&gt;res.sendfile()&lt;/code&gt; 函数已取代了骆驼外装版 &lt;code&gt;res.sendFile()&lt;/code&gt; 在快5。</target>
        </trans-unit>
        <trans-unit id="d91c6af758be8a5f933aee2c3d9bb08e9588bcb5" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;res.statusCode&lt;/code&gt; is set from &lt;code&gt;err.status&lt;/code&gt; (or &lt;code&gt;err.statusCode&lt;/code&gt;). If this value is outside the 4xx or 5xx range, it will be set to 500.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9294c3767003c3ea14f768625ec79e6c8099dce6" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;res.statusMessage&lt;/code&gt; is set according to the status code.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="665e873d76738ff5cdb789eddd585b08214508f7" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;res&lt;/code&gt; object is an enhanced version of Node&amp;rsquo;s own response object and supports all &lt;a href=&quot;https://nodejs.org/api/http.html#http_class_http_serverresponse&quot;&gt;built-in fields and methods&lt;/a&gt;.</source>
          <target state="translated">该 &lt;code&gt;res&lt;/code&gt; 对象是节点本身的响应对象的增强版本，支持所有&lt;a href=&quot;https://nodejs.org/api/http.html#http_class_http_serverresponse&quot;&gt;内置的属性和方法&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="4e86c4c9c4020c1f3800c6056f4d8c2e4e17dca7" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;res&lt;/code&gt; object represents the HTTP response that an Express app sends when it gets an HTTP request.</source>
          <target state="translated">所述 &lt;code&gt;res&lt;/code&gt; 对象表示HTTP应答时，它得到一个HTTP请求一个Express应用发送。</target>
        </trans-unit>
        <trans-unit id="da2836d9568d8cc693f28fc9fda795c6af3a7f41" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;reviver&lt;/code&gt; option is passed directly to &lt;code&gt;JSON.parse&lt;/code&gt; as the second argument. You can find more information on this argument &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/parse#Example.3A_Using_the_reviver_parameter&quot;&gt;in the MDN documentation about JSON.parse&lt;/a&gt;.</source>
          <target state="translated">该 &lt;code&gt;reviver&lt;/code&gt; 选项直接传递到 &lt;code&gt;JSON.parse&lt;/code&gt; 作为第二个参数。您可以&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/parse#Example.3A_Using_the_reviver_parameter&quot;&gt;在MDN文档中有关JSON.parse的&lt;/a&gt;此参数上找到更多信息。</target>
        </trans-unit>
        <trans-unit id="dc3b090da72862a26917330a106d605ca7385cb0" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;root&lt;/code&gt; argument specifies the root directory from which to serve static assets. For more information on the &lt;code&gt;options&lt;/code&gt; argument, see &lt;a href=&quot;../index#express.static&quot;&gt;express.static&lt;/a&gt;.</source>
          <target state="translated">该 &lt;code&gt;root&lt;/code&gt; 参数指定从中提供静态资产的根目录。有关 &lt;code&gt;options&lt;/code&gt; 参数的更多信息，请参见&lt;a href=&quot;../index#express.static&quot;&gt;express.static&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="09ae8335ab9e3498dcb6c17a9a88f87d7bd082f8" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;root&lt;/code&gt; argument specifies the root directory from which to serve static assets. The function determines the file to serve by combining &lt;code&gt;req.url&lt;/code&gt; with the provided &lt;code&gt;root&lt;/code&gt; directory. When a file is not found, instead of sending a 404 response, it instead calls &lt;code&gt;next()&lt;/code&gt; to move on to the next middleware, allowing for stacking and fall-backs.</source>
          <target state="translated">该 &lt;code&gt;root&lt;/code&gt; 参数指定从中提供静态资产的根目录。该函数通过将 &lt;code&gt;req.url&lt;/code&gt; 与提供的 &lt;code&gt;root&lt;/code&gt; 目录组合来确定要提供的文件。当找不到文件时，它不发送404响应，而是调用 &lt;code&gt;next()&lt;/code&gt; 移至下一个中间件，从而可以进行堆栈和回退。</target>
        </trans-unit>
        <trans-unit id="06d4fa1ded976d7ba4ea0c31fd91e3a000e303c7" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;router.METHOD()&lt;/code&gt; methods provide the routing functionality in Express, where METHOD is one of the HTTP methods, such as GET, PUT, POST, and so on, in lowercase. Thus, the actual methods are &lt;code&gt;router.get()&lt;/code&gt;, &lt;code&gt;router.post()&lt;/code&gt;, &lt;code&gt;router.put()&lt;/code&gt;, and so on.</source>
          <target state="translated">所述 &lt;code&gt;router.METHOD()&lt;/code&gt; 方法提供了快速，其中方法是HTTP方法，如GET，PUT，POST等之一，小写的路由功能。因此，实际的方法是 &lt;code&gt;router.get()&lt;/code&gt; ， &lt;code&gt;router.post()&lt;/code&gt; ， &lt;code&gt;router.put()&lt;/code&gt; 等。</target>
        </trans-unit>
        <trans-unit id="0f5c090896a67738df95a8ff1ebef6ab21ca885e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;router.get()&lt;/code&gt; function is automatically called for the HTTP &lt;code&gt;HEAD&lt;/code&gt; method in addition to the &lt;code&gt;GET&lt;/code&gt; method if &lt;code&gt;router.head()&lt;/code&gt; was not called for the path before &lt;code&gt;router.get()&lt;/code&gt;.</source>
          <target state="translated">所述 &lt;code&gt;router.get()&lt;/code&gt; 函数被自动调用用于HTTP &lt;code&gt;HEAD&lt;/code&gt; 除了方法 &lt;code&gt;GET&lt;/code&gt; 方法如果 &lt;code&gt;router.head()&lt;/code&gt; 未要求的路径之前 &lt;code&gt;router.get()&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="b88921f8fbc9d3675fa2dda9005ee9371a119b41" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;router.use()&lt;/code&gt; method also supports named parameters so that your mount points for other routers can benefit from preloading using named parameters.</source>
          <target state="translated">该 &lt;code&gt;router.use()&lt;/code&gt; 方法也支持命名参数，以便为其他路由器的安装点可以使用命名参数预压中受益。</target>
        </trans-unit>
        <trans-unit id="93628b545dd9a8cf446c1702f0dafaac83b43b54" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;size&lt;/code&gt; parameter is the maximum size of the resource.</source>
          <target state="translated">该 &lt;code&gt;size&lt;/code&gt; 参数是资源的最大尺寸。</target>
        </trans-unit>
        <trans-unit id="419eab728395557afd72910235674dc9431b1fb5" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;trust proxy&lt;/code&gt; setting is implemented using the &lt;a href=&quot;https://www.npmjs.com/package/proxy-addr&quot;&gt;proxy-addr&lt;/a&gt; package. For more information, see its documentation.</source>
          <target state="translated">该 &lt;code&gt;trust proxy&lt;/code&gt; 设置使用实现&lt;a href=&quot;https://www.npmjs.com/package/proxy-addr&quot;&gt;代理地址&lt;/a&gt;包。有关更多信息，请参见其文档。</target>
        </trans-unit>
        <trans-unit id="9e2c34404f445fba4d95e98b4b3a0945269c4bde" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;type&lt;/code&gt; value may be a single MIME type string (such as &amp;ldquo;application/json&amp;rdquo;), an extension name such as &amp;ldquo;json&amp;rdquo;, a comma-delimited list, or an array. For a list or array, the method returns the &lt;em&gt;best&lt;/em&gt; match (if any).</source>
          <target state="translated">该 &lt;code&gt;type&lt;/code&gt; 值可以是一个单一的MIME类型字符串（如&amp;ldquo;应用程序/ JSON&amp;rdquo;），扩展名，例如&amp;ldquo;JSON&amp;rdquo;，逗号分隔的列表，或阵列。对于列表或数组，该方法返回&lt;em&gt;最佳&lt;/em&gt;匹配项（如果有）。</target>
        </trans-unit>
        <trans-unit id="5cee7f330a71930eb97bb7a298841b534b9d0c11" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;view&lt;/code&gt; argument is a string that is the file path of the view file to render. This can be an absolute path, or a path relative to the &lt;code&gt;views&lt;/code&gt; setting. If the path does not contain a file extension, then the &lt;code&gt;view engine&lt;/code&gt; setting determines the file extension. If the path does contain a file extension, then Express will load the module for the specified template engine (via &lt;code&gt;require()&lt;/code&gt;) and render it using the loaded module&amp;rsquo;s &lt;code&gt;__express&lt;/code&gt; function.</source>
          <target state="translated">该 &lt;code&gt;view&lt;/code&gt; 参数是一个字符串，它是视图文件来渲染的文件路径。这可以是绝对路径，也可以是相对于 &lt;code&gt;views&lt;/code&gt; 设置的路径。如果路径不包含文件扩展名，则 &lt;code&gt;view engine&lt;/code&gt; 设置将确定文件扩展名。如果路径中确实包含文件扩展名，则Express将为指定的模板引擎加载模块（通过 &lt;code&gt;require()&lt;/code&gt; ），并使用加载的模块的 &lt;code&gt;__express&lt;/code&gt; 函数对其进行呈现。</target>
        </trans-unit>
        <trans-unit id="7764713403915d90175dcfe6fa9815431bfa7fa3" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;wrap()&lt;/code&gt; function is a wrapper that catches rejected promises and calls &lt;code&gt;next()&lt;/code&gt; with the error as the first argument. For details, see &lt;a href=&quot;https://strongloop.com/strongblog/async-error-handling-expressjs-es7-promises-generators/#cleaner-code-with-generators&quot;&gt;Asynchronous Error Handling in Express with Promises, Generators and ES7&lt;/a&gt;.</source>
          <target state="translated">的 &lt;code&gt;wrap()&lt;/code&gt; 函数是一个封装器，渔获拒绝承诺和调用 &lt;code&gt;next()&lt;/code&gt; 的与该错误作为第一个参数。有关详细信息，请参阅&lt;a href=&quot;https://strongloop.com/strongblog/async-error-handling-expressjs-es7-promises-generators/#cleaner-code-with-generators&quot;&gt;带有Promises，Generators和ES7的Express中的异步错误处理&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="636f2eb8f455afb32588c3b71cd7e3a000c6d4b4" translate="yes" xml:space="preserve">
          <source>The API documentation has explicit entries only for the most popular HTTP methods &lt;code&gt;app.get()&lt;/code&gt;, &lt;code&gt;app.post()&lt;/code&gt;, &lt;code&gt;app.put()&lt;/code&gt;, and &lt;code&gt;app.delete()&lt;/code&gt;. However, the other methods listed above work in exactly the same way.</source>
          <target state="translated">API文档仅针对最流行的HTTP方法 &lt;code&gt;app.get()&lt;/code&gt; ， &lt;code&gt;app.post()&lt;/code&gt; ， &lt;code&gt;app.put()&lt;/code&gt; 和 &lt;code&gt;app.delete()&lt;/code&gt; 拥有显式条目。但是，上面列出的其他方法以完全相同的方式工作。</target>
        </trans-unit>
        <trans-unit id="6444e8516fffae4ffd8a27433e5b7e79a09e4281" translate="yes" xml:space="preserve">
          <source>The ETag functionality is implemented using the &lt;a href=&quot;https://www.npmjs.org/package/etag&quot;&gt;etag&lt;/a&gt; package. For more information, see its documentation.</source>
          <target state="translated">ETag功能是使用&lt;a href=&quot;https://www.npmjs.org/package/etag&quot;&gt;etag&lt;/a&gt;包实现的。有关更多信息，请参见其文档。</target>
        </trans-unit>
        <trans-unit id="18cb1b398fe0d4ac163e09dc3656c3e838f6239d" translate="yes" xml:space="preserve">
          <source>The Express API consists of various methods and properties on the request and response objects. These are inherited by prototype. There are two extension points for the Express API:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aa23fc0be6e7667e622057a6857f7dee3e50b309" translate="yes" xml:space="preserve">
          <source>The Express application object can be referred from the &lt;a href=&quot;#req&quot;&gt;request object&lt;/a&gt; and the &lt;a href=&quot;#res&quot;&gt;response object&lt;/a&gt; as &lt;code&gt;req.app&lt;/code&gt;, and &lt;code&gt;res.app&lt;/code&gt;, respectively.</source>
          <target state="translated">可以从&lt;a href=&quot;#req&quot;&gt;请求对象&lt;/a&gt;和&lt;a href=&quot;#res&quot;&gt;响应对象&lt;/a&gt;分别将Express应用程序对象称为 &lt;code&gt;req.app&lt;/code&gt; 和 &lt;code&gt;res.app&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="d15ee51e33a595f230c9f6ecde552a577aa38791" translate="yes" xml:space="preserve">
          <source>The NODE_ENV environment variable specifies the environment in which an application is running (usually, development or production). One of the simplest things you can do to improve performance is to set NODE_ENV to &amp;ldquo;production.&amp;rdquo;</source>
          <target state="translated">NODE_ENV环境变量指定运行应用程序的环境（通常是开发或生产环境）。可以提高性能的最简单的操作之一就是将NODE_ENV设置为&amp;ldquo;生产&amp;rdquo;。</target>
        </trans-unit>
        <trans-unit id="99668da26e842a1fa1567212fe4d4df926fffbba" translate="yes" xml:space="preserve">
          <source>The URL path on which a router instance was mounted.</source>
          <target state="translated">挂载路由器实例的URL路径。</target>
        </trans-unit>
        <trans-unit id="0d61d6b96b69739da66dd508a20eb3f5655e2ece" translate="yes" xml:space="preserve">
          <source>The `trust proxy` setting is implemented using the &lt;a href=&quot;https://www.npmjs.org/package/proxy-addr&quot;&gt;proxy-addr&lt;/a&gt; package. For more information, see its documentation.</source>
          <target state="translated">&amp;ldquo; trust proxy&amp;rdquo;设置是使用&lt;a href=&quot;https://www.npmjs.org/package/proxy-addr&quot;&gt;proxy-addr&lt;/a&gt;包实现的。有关更多信息，请参见其文档。</target>
        </trans-unit>
        <trans-unit id="71a453ec834b9e12e465dd375ed1853982d627e6" translate="yes" xml:space="preserve">
          <source>The above example has a couple of trivial statements from the &lt;code&gt;readFile&lt;/code&gt; call. If &lt;code&gt;readFile&lt;/code&gt; causes an error, then it passes the error to Express, otherwise you quickly return to the world of synchronous error handling in the next handler in the chain. Then, the example above tries to process the data. If this fails then the synchronous error handler will catch it. If you had done this processing inside the &lt;code&gt;readFile&lt;/code&gt; callback then the application might exit and the Express error handlers would not run.</source>
          <target state="translated">上面的示例从 &lt;code&gt;readFile&lt;/code&gt; 调用中获得了一些简单的语句。如果 &lt;code&gt;readFile&lt;/code&gt; 导致错误，则它将错误传递给Express，否则您将快速回到链中下一个处理程序中的同步错误处理领域。然后，上面的示例尝试处理数据。如果失败，则同步错误处理程序将捕获该错误。如果您在 &lt;code&gt;readFile&lt;/code&gt; 回调中完成了此处理，则应用程序可能会退出，并且Express错误处理程序将无法运行。</target>
        </trans-unit>
        <trans-unit id="e6c6ef511007a581b79e3699b304a80c0405aac7" translate="yes" xml:space="preserve">
          <source>The above example uses a &lt;code&gt;try...catch&lt;/code&gt; block to catch errors in the asynchronous code and pass them to Express. If the &lt;code&gt;try...catch&lt;/code&gt; block were omitted, Express would not catch the error since it is not part of the synchronous handler code.</source>
          <target state="translated">上面的示例使用 &lt;code&gt;try...catch&lt;/code&gt; 块来捕获异步代码中的错误，并将它们传递给Express。如果省略了 &lt;code&gt;try...catch&lt;/code&gt; 块，则Express将不会捕获该错误，因为它不是同步处理程序代码的一部分。</target>
        </trans-unit>
        <trans-unit id="19007f1377bc5269a421d2ca4a38221ad96af569" translate="yes" xml:space="preserve">
          <source>The above implementation completely changes the original signature of &lt;code&gt;res.sendStatus&lt;/code&gt;. It now accepts a status code, encoding type, and the message to be sent to the client.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d2eb5b722580e926cc275f013178b13b598d9fe9" translate="yes" xml:space="preserve">
          <source>The accompanying version 3 &lt;code&gt;package.json&lt;/code&gt; file might look something like this:</source>
          <target state="translated">随附的版本3 &lt;code&gt;package.json&lt;/code&gt; 文件可能如下所示：</target>
        </trans-unit>
        <trans-unit id="f9285091cb60a2f048078960f37f9793691fe017" translate="yes" xml:space="preserve">
          <source>The app now uses the &lt;code&gt;requestTime&lt;/code&gt; middleware function. Also, the callback function of the root path route uses the property that the middleware function adds to &lt;code&gt;req&lt;/code&gt; (the request object).</source>
          <target state="translated">该应用程序现在使用 &lt;code&gt;requestTime&lt;/code&gt; 中间件功能。而且，根路径路由的回调函数使用中间件函数添加到 &lt;code&gt;req&lt;/code&gt; （请求对象）的属性。</target>
        </trans-unit>
        <trans-unit id="4f592327481abe53c8da8a91bec1c5299cd0d0f4" translate="yes" xml:space="preserve">
          <source>The app structure created by the generator is just one of many ways to structure Express apps. Feel free to use this structure or modify it to best suit your needs.</source>
          <target state="translated">由生成器创建的应用程序结构只是构建Express应用程序的众多方法之一。你可以自由使用这个结构,也可以根据自己的需要进行修改。</target>
        </trans-unit>
        <trans-unit id="4f3dc7ac408979ce55e54c5e6f6011531c7891e1" translate="yes" xml:space="preserve">
          <source>The app will now be able to handle requests to &lt;code&gt;/birds&lt;/code&gt; and &lt;code&gt;/birds/about&lt;/code&gt;, as well as call the &lt;code&gt;timeLog&lt;/code&gt; middleware function that is specific to the route.</source>
          <target state="translated">该应用程序现在将能够处理对 &lt;code&gt;/birds&lt;/code&gt; 和 &lt;code&gt;/birds/about&lt;/code&gt; 的请求，以及调用特定于该路线的 &lt;code&gt;timeLog&lt;/code&gt; 中间件函数。</target>
        </trans-unit>
        <trans-unit id="43564ee35dc45456553e061cd72abe65409e3b07" translate="yes" xml:space="preserve">
          <source>The app will now be able to handle requests to the &lt;code&gt;/birds&lt;/code&gt; and &lt;code&gt;/birds/about&lt;/code&gt; paths, and will call the &lt;code&gt;timeLog&lt;/code&gt; middleware that is specific to the route.</source>
          <target state="translated">该应用程序现在将能够处理对 &lt;code&gt;/birds&lt;/code&gt; 和 &lt;code&gt;/birds/about&lt;/code&gt; 路径的请求，并将调用特定于该路线的 &lt;code&gt;timeLog&lt;/code&gt; 中间件。</target>
        </trans-unit>
        <trans-unit id="01ce441d028bb19f6dcd18f3298cb4ad9ec6242c" translate="yes" xml:space="preserve">
          <source>The application property &lt;code&gt;subdomain offset&lt;/code&gt;, which defaults to 2, is used for determining the beginning of the subdomain segments. To change this behavior, change its value using &lt;a href=&quot;index#app.set&quot;&gt;app.set&lt;/a&gt;.</source>
          <target state="translated">应用程序属性 &lt;code&gt;subdomain offset&lt;/code&gt; （默认为2）用于确定子域段的开头。要更改此行为，请使用&lt;a href=&quot;index#app.set&quot;&gt;app.set&lt;/a&gt;更改其值。</target>
        </trans-unit>
        <trans-unit id="62fc2cf45f2b0723ecbe32d7594f5536c451bd6f" translate="yes" xml:space="preserve">
          <source>The behavior of the &lt;code&gt;app.param(name, callback)&lt;/code&gt; method can be altered entirely by passing only a function to &lt;code&gt;app.param()&lt;/code&gt;. This function is a custom implementation of how &lt;code&gt;app.param(name, callback)&lt;/code&gt; should behave - it accepts two parameters and must return a middleware.</source>
          <target state="translated">通过仅将函数传递给 &lt;code&gt;app.param()&lt;/code&gt; ,可以完全更改 &lt;code&gt;app.param(name, callback)&lt;/code&gt; 方法的行为。此函数是 &lt;code&gt;app.param(name, callback)&lt;/code&gt; 行为的自定义实现-它接受两个参数，并且必须返回中间件。</target>
        </trans-unit>
        <trans-unit id="1bb9429ca0b9b2b5fbe9b1561cd435ee0baa0be6" translate="yes" xml:space="preserve">
          <source>The behavior of the &lt;code&gt;router.param(name, callback)&lt;/code&gt; method can be altered entirely by passing only a function to &lt;code&gt;router.param()&lt;/code&gt;. This function is a custom implementation of how &lt;code&gt;router.param(name, callback)&lt;/code&gt; should behave - it accepts two parameters and must return a middleware.</source>
          <target state="translated">可以通过仅将一个函数传递给 &lt;code&gt;router.param()&lt;/code&gt; 来完全改变 &lt;code&gt;router.param(name, callback)&lt;/code&gt; 方法的行为。此函数是 &lt;code&gt;router.param(name, callback)&lt;/code&gt; 行为的自定义实现-接受两个参数，并且必须返回中间件。</target>
        </trans-unit>
        <trans-unit id="2579c2a1743afc4e5330236fc98952eed78d1243" translate="yes" xml:space="preserve">
          <source>The behavior of this method can become very complicated in complex cases of mounted apps: it is usually better to use &lt;a href=&quot;#req.baseUrl&quot;&gt;req.baseUrl&lt;/a&gt; to get the canonical path of the app.</source>
          <target state="translated">在挂载的应用程序的复杂情况下，此方法的行为会变得非常复杂：通常最好使用&lt;a href=&quot;#req.baseUrl&quot;&gt;req.baseUrl&lt;/a&gt;来获取应用程序的规范路径。</target>
        </trans-unit>
        <trans-unit id="ce2b3277f296132eef0f6b1e3a6a2ff9176db431" translate="yes" xml:space="preserve">
          <source>The body will be the HTML of the status code message when in production environment, otherwise will be &lt;code&gt;err.stack&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a82646d60479b16dff5ceac35aff1e284b2a3487" translate="yes" xml:space="preserve">
          <source>The built-in Express middleware functions &lt;code&gt;express.favicon&lt;/code&gt;, &lt;code&gt;express.logger&lt;/code&gt;, &lt;code&gt;express.methodOverride&lt;/code&gt;, &lt;code&gt;express.session&lt;/code&gt;, &lt;code&gt;express.bodyParser&lt;/code&gt; and &lt;code&gt;express.errorHandler&lt;/code&gt; are no longer available on the &lt;code&gt;express&lt;/code&gt; object. You must install their alternatives manually and load them in the app.</source>
          <target state="translated">内置的Express中间件功能 &lt;code&gt;express.favicon&lt;/code&gt; ， &lt;code&gt;express.logger&lt;/code&gt; ， &lt;code&gt;express.methodOverride&lt;/code&gt; ， &lt;code&gt;express.session&lt;/code&gt; ， &lt;code&gt;express.bodyParser&lt;/code&gt; 和 &lt;code&gt;express.errorHandler&lt;/code&gt; 在 &lt;code&gt;express&lt;/code&gt; 对象上不再可用。您必须手动安装其替代产品并将其加载到应用程序中。</target>
        </trans-unit>
        <trans-unit id="76f8b1a7ae101b67ea30400fb9fa71250d9c3e0e" translate="yes" xml:space="preserve">
          <source>The characters &lt;code&gt;?&lt;/code&gt;, &lt;code&gt;+&lt;/code&gt;, &lt;code&gt;*&lt;/code&gt;, and &lt;code&gt;()&lt;/code&gt; are subsets of their regular expression counterparts. The hyphen (&lt;code&gt;-&lt;/code&gt;) and the dot (&lt;code&gt;.&lt;/code&gt;) are interpreted literally by string-based paths.</source>
          <target state="translated">人物 &lt;code&gt;?&lt;/code&gt; ， &lt;code&gt;+&lt;/code&gt; ， &lt;code&gt;*&lt;/code&gt; 和 &lt;code&gt;()&lt;/code&gt; 是其正则表达式对应项的子集。连字符（ &lt;code&gt;-&lt;/code&gt; ）和点（ &lt;code&gt;.&lt;/code&gt; ）由基于字符串的路径按字面意义解释。</target>
        </trans-unit>
        <trans-unit id="8c4f6de1b84ea0bf3aa72ffef8deb21d304078da" translate="yes" xml:space="preserve">
          <source>The command-line tool to generate an Express app is still &lt;code&gt;express&lt;/code&gt;, but to upgrade to the new version, you must uninstall the Express 3 app generator and then install the new &lt;code&gt;express-generator&lt;/code&gt;.</source>
          <target state="translated">生成Express应用程序的命令行工具仍然是 &lt;code&gt;express&lt;/code&gt; ，但要升级到新版本，必须卸载Express 3应用程序生成器，然后安装新的 &lt;code&gt;express-generator&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="dd9fb68dfb14081773583c810d61b5264d8ccf3d" translate="yes" xml:space="preserve">
          <source>The default engine extension to use when omitted.</source>
          <target state="translated">省略时默认使用的引擎扩展名。</target>
        </trans-unit>
        <trans-unit id="35a1f0c09848d7dbf92d2352ae16557dd15abac0" translate="yes" xml:space="preserve">
          <source>The default error handler</source>
          <target state="translated">默认的错误处理程序</target>
        </trans-unit>
        <trans-unit id="8f34da9ad01a9672e52fd904ed294264c2272634" translate="yes" xml:space="preserve">
          <source>The dependency &lt;code&gt;debug&lt;/code&gt; has been updated to address a &lt;a href=&quot;https://snyk.io/vuln/npm:debug:20170905&quot;&gt;vulnerability&lt;/a&gt;, but this issue does not impact Express.</source>
          <target state="translated">依赖项 &lt;code&gt;debug&lt;/code&gt; 已更新，可以解决&lt;a href=&quot;https://snyk.io/vuln/npm:debug:20170905&quot;&gt;漏洞&lt;/a&gt;，但是此问题不会影响Express。</target>
        </trans-unit>
        <trans-unit id="73d1aa9cf8ca71183bc46c337b50290348e33d58" translate="yes" xml:space="preserve">
          <source>The dependency &lt;code&gt;forwarded&lt;/code&gt; has been updated to address a &lt;a href=&quot;https://nodesecurity.io/advisories/527&quot;&gt;vulnerability&lt;/a&gt;. This may affect your application if the following APIs are used: &lt;code&gt;req.host&lt;/code&gt;, &lt;code&gt;req.hostname&lt;/code&gt;, &lt;code&gt;req.ip&lt;/code&gt;, &lt;code&gt;req.ips&lt;/code&gt;, &lt;code&gt;req.protocol&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;forwarded&lt;/code&gt; 的依赖项已更新，可以解决&lt;a href=&quot;https://nodesecurity.io/advisories/527&quot;&gt;漏洞&lt;/a&gt;。如果使用以下API，这可能会影响您的应用程序： &lt;code&gt;req.host&lt;/code&gt; ， &lt;code&gt;req.hostname&lt;/code&gt; ， &lt;code&gt;req.ip&lt;/code&gt; ， &lt;code&gt;req.ips&lt;/code&gt; 和 &lt;code&gt;req.protocol&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="a1bafdd5d44eb8e729df74bd9f9dedb3d2e237fa" translate="yes" xml:space="preserve">
          <source>The dependency &lt;code&gt;fresh&lt;/code&gt; has been updated to address a &lt;a href=&quot;https://nodesecurity.io/advisories/526&quot;&gt;vulnerability&lt;/a&gt;. This will affect your application if the following APIs are used: &lt;code&gt;express.static&lt;/code&gt;, &lt;code&gt;req.fresh&lt;/code&gt;, &lt;code&gt;res.json&lt;/code&gt;, &lt;code&gt;res.jsonp&lt;/code&gt;, &lt;code&gt;res.send&lt;/code&gt;, &lt;code&gt;res.sendfile&lt;/code&gt;&lt;code&gt;res.sendFile&lt;/code&gt;, &lt;code&gt;res.sendStatus&lt;/code&gt;.</source>
          <target state="translated">依赖 &lt;code&gt;fresh&lt;/code&gt; 已更新以解决&lt;a href=&quot;https://nodesecurity.io/advisories/526&quot;&gt;漏洞&lt;/a&gt;。如果使用以下API，这将影响您的应用程序： &lt;code&gt;express.static&lt;/code&gt; ， &lt;code&gt;req.fresh&lt;/code&gt; ， &lt;code&gt;res.json&lt;/code&gt; ， &lt;code&gt;res.jsonp&lt;/code&gt; ， &lt;code&gt;res.send&lt;/code&gt; ， &lt;code&gt;res.sendfile&lt;/code&gt; &lt;code&gt;res.sendFile&lt;/code&gt; ， &lt;code&gt;res.sendStatus&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="12ad23e58a9efcc0e4015d2084a124afe512cc11" translate="yes" xml:space="preserve">
          <source>The dependency &lt;code&gt;mime&lt;/code&gt; has been updated to address a &lt;a href=&quot;https://nodesecurity.io/advisories/535&quot;&gt;vulnerability&lt;/a&gt;, but this issue does not impact Express.</source>
          <target state="translated">依赖性 &lt;code&gt;mime&lt;/code&gt; 已更新，可以解决&lt;a href=&quot;https://nodesecurity.io/advisories/535&quot;&gt;漏洞&lt;/a&gt;，但是此问题不会影响Express。</target>
        </trans-unit>
        <trans-unit id="8c7c7fe87b35b93cf83d36b993636f41764188b0" translate="yes" xml:space="preserve">
          <source>The dependency &lt;code&gt;ms&lt;/code&gt; has been updated to address a &lt;a href=&quot;https://snyk.io/vuln/npm:ms:20170412&quot;&gt;vulnerability&lt;/a&gt;. This may affect your application if untrusted string input is passed to the &lt;code&gt;maxAge&lt;/code&gt; option in the following APIs: &lt;code&gt;express.static&lt;/code&gt;, &lt;code&gt;res.sendfile&lt;/code&gt;, and &lt;code&gt;res.sendFile&lt;/code&gt;.</source>
          <target state="translated">依赖项 &lt;code&gt;ms&lt;/code&gt; 已更新，可以解决&lt;a href=&quot;https://snyk.io/vuln/npm:ms:20170412&quot;&gt;漏洞&lt;/a&gt;。如果将不可信的字符串输入传递给以下API中的 &lt;code&gt;maxAge&lt;/code&gt; 选项，则这可能会影响您的应用程序： &lt;code&gt;express.static&lt;/code&gt; ， &lt;code&gt;res.sendfile&lt;/code&gt; 和 &lt;code&gt;res.sendFile&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="fb8f9b239e31ccbd89b7d9750312cd9c985a89af" translate="yes" xml:space="preserve">
          <source>The dependency &lt;code&gt;qs&lt;/code&gt; has been updated to address a &lt;a href=&quot;https://snyk.io/vuln/npm:qs:20170213&quot;&gt;vulnerability&lt;/a&gt;, but this issue does not impact Express. Updating to 4.15.2 is a good practice, but not required to address the vulnerability.</source>
          <target state="translated">依赖性 &lt;code&gt;qs&lt;/code&gt; 已更新，可以解决&lt;a href=&quot;https://snyk.io/vuln/npm:qs:20170213&quot;&gt;漏洞&lt;/a&gt;，但是此问题不会影响Express。升级到4.15.2是一个好习惯，但是解决此漏洞不是必需的。</target>
        </trans-unit>
        <trans-unit id="f6ffa71268873e9f1db06246219951b6250e7a8c" translate="yes" xml:space="preserve">
          <source>The dependency &lt;code&gt;send&lt;/code&gt; has been updated to provide a protection against a &lt;a href=&quot;https://nodejs.org/en/blog/vulnerability/september-2017-path-validation/&quot;&gt;Node.js 8.5.0 vulnerability&lt;/a&gt;. This only impacts running Express on the specific Node.js version 8.5.0.</source>
          <target state="translated">依赖性 &lt;code&gt;send&lt;/code&gt; 已更新，以提供针对&lt;a href=&quot;https://nodejs.org/en/blog/vulnerability/september-2017-path-validation/&quot;&gt;Node.js 8.5.0漏洞&lt;/a&gt;的保护。这仅影响在特定的Node.js版本8.5.0上运行Express。</target>
        </trans-unit>
        <trans-unit id="0d5b14bebd29280c1f0b59553c644dc20ce5f43e" translate="yes" xml:space="preserve">
          <source>The example above is actually a working server: Go ahead and click on the URL shown. You&amp;rsquo;ll get a response, with real-time logs on the page, and any changes you make will be reflected in real time. This is powered by &lt;a href=&quot;https://runkit.com&quot;&gt;RunKit&lt;/a&gt;, which provides an interactive JavaScript playground connected to a complete Node environment that runs in your web browser. Below are instructions for running the same app on your local machine.</source>
          <target state="translated">上面的示例实际上是一个正常工作的服务器：继续并单击显示的URL。您会在页面上获得实时日志的响应，并且您所做的任何更改都会实时反映。它由&lt;a href=&quot;https://runkit.com&quot;&gt;RunKit&lt;/a&gt;提供支持，它提供了一个交互式JavaScript游乐场，该游乐场连接到在Web浏览器中运行的完整Node环境。以下是在本地计算机上运行同一应用程序的说明。</target>
        </trans-unit>
        <trans-unit id="67d80e19feb2bea29bde8221fad6260bc0e6dcdf" translate="yes" xml:space="preserve">
          <source>The extended query parser is based on &lt;a href=&quot;https://www.npmjs.org/package/qs&quot;&gt;qs&lt;/a&gt;.</source>
          <target state="translated">扩展查询解析器基于&lt;a href=&quot;https://www.npmjs.org/package/qs&quot;&gt;qs&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="71035a52a34fae9e701510e711aacb671f3e940d" translate="yes" xml:space="preserve">
          <source>The first is number of consecutive failed attempts by the same user name and IP address.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9d064391c2c58b65cec66e432fa3cce2c567f934" translate="yes" xml:space="preserve">
          <source>The first parameter of this function is the name of the URL parameter that should be captured, the second parameter can be any JavaScript object which might be used for returning the middleware implementation.</source>
          <target state="translated">该函数的第一个参数是应该捕获的URL参数的名称,第二个参数可以是任何可能用于返回中间件实现的JavaScript对象。</target>
        </trans-unit>
        <trans-unit id="5e67447c702b1616d7cb4807161e65e722cfa2e4" translate="yes" xml:space="preserve">
          <source>The following are some examples of JSONP responses using the same code:</source>
          <target state="translated">以下是使用相同代码的JSONP响应的一些例子。</target>
        </trans-unit>
        <trans-unit id="27771c350437291bfc4199d8a18151bdf4220b74" translate="yes" xml:space="preserve">
          <source>The following callback is executed for requests to &lt;code&gt;/secret&lt;/code&gt; whether using GET, POST, PUT, DELETE, or any other HTTP request method:</source>
          <target state="translated">无论使用GET，POST，PUT，DELETE还是任何其他HTTP请求方法，都会对 &lt;code&gt;/secret&lt;/code&gt; 的请求执行以下回调：</target>
        </trans-unit>
        <trans-unit id="f183a5de5e3641cf6dea5713c604982ebef6c40c" translate="yes" xml:space="preserve">
          <source>The following code is an example of a very basic route.</source>
          <target state="translated">下面的代码是一个非常基本的路由的例子。</target>
        </trans-unit>
        <trans-unit id="2112d26073621878d92877e16883b0699e34e46c" translate="yes" xml:space="preserve">
          <source>The following code is an example of implementing a very simple template engine for rendering &lt;code&gt;.ntl&lt;/code&gt; files.</source>
          <target state="translated">以下代码是实现用于渲染 &lt;code&gt;.ntl&lt;/code&gt; 文件的非常简单的模板引擎的示例。</target>
        </trans-unit>
        <trans-unit id="854bf564b7531125ef409382bc5152acb792aa64" translate="yes" xml:space="preserve">
          <source>The following code is an example of routes that are defined for the GET and the POST methods to the root of the app.</source>
          <target state="translated">下面的代码是一个为GET和POST方法定义到应用程序根部的路由的例子。</target>
        </trans-unit>
        <trans-unit id="c8a532f5d008e5f4d4e7a4f4d3376ffa8481a22c" translate="yes" xml:space="preserve">
          <source>The following code rewrites how the value of &lt;code&gt;req.ip&lt;/code&gt; is to be derived. Now, it simply returns the value of the &lt;code&gt;Client-IP&lt;/code&gt; request header.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0683f525112e4f9ca9c79be2ffdebe3c222996d3" translate="yes" xml:space="preserve">
          <source>The following example code replicates the middleware system that is shown above for application-level middleware, by using router-level middleware:</source>
          <target state="translated">下面的示例代码通过使用路由器级的中间件,复制了上面所示的应用级中间件系统。</target>
        </trans-unit>
        <trans-unit id="bc674592472fd34344a233cc2565a1a76b804171" translate="yes" xml:space="preserve">
          <source>The following example creates a router as a module, loads a middleware function in it, defines some routes, and mounts the router module on a path in the main app.</source>
          <target state="translated">下面的例子将路由器创建为一个模块,在其中加载一个中间件函数,定义一些路由,并将路由器模块挂载在主应用程序的路径上。</target>
        </trans-unit>
        <trans-unit id="2f8df33945f09449cf748cbda26de967201b2596" translate="yes" xml:space="preserve">
          <source>The following example creates a router as a module, loads middleware in it, defines some routes, and mounts it on a path on the main app.</source>
          <target state="translated">下面的例子创建了一个路由器作为模块,在其中加载中间件,定义了一些路由,并将其挂载在主应用程序的路径上。</target>
        </trans-unit>
        <trans-unit id="cedad6af7293e1fbecbd439fc94b5500bf411ad5" translate="yes" xml:space="preserve">
          <source>The following example illustrates installing and loading the cookie-parsing middleware function &lt;code&gt;cookie-parser&lt;/code&gt;.</source>
          <target state="translated">以下示例说明了如何安装和加载cookie解析中间件函数 &lt;code&gt;cookie-parser&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="64fbe352f4fa8ee31f7001ea1b6933d9579c3987" translate="yes" xml:space="preserve">
          <source>The following example illustrates using &lt;code&gt;res.sendFile&lt;/code&gt; to provide fine-grained support for serving files:</source>
          <target state="translated">以下示例说明了如何使用 &lt;code&gt;res.sendFile&lt;/code&gt; 为服务文件提供细粒度的支持：</target>
        </trans-unit>
        <trans-unit id="9df7f733b626d181e924fa4ba8bad6adc0bde52b" translate="yes" xml:space="preserve">
          <source>The following example shows how to use body-parsing middleware to populate &lt;code&gt;req.body&lt;/code&gt;.</source>
          <target state="translated">以下示例显示如何使用正文解析中间件填充 &lt;code&gt;req.body&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="194fd91ca9b0f6ce68763a85171bd1775c53eba9" translate="yes" xml:space="preserve">
          <source>The following example would respond with &lt;code&gt;{ &quot;message&quot;: &quot;hey&quot; }&lt;/code&gt; when the &lt;code&gt;Accept&lt;/code&gt; header field is set to &amp;ldquo;application/json&amp;rdquo; or &amp;ldquo;*/json&amp;rdquo; (however if it is &amp;ldquo;*/*&amp;rdquo;, then the response will be &amp;ldquo;hey&amp;rdquo;).</source>
          <target state="translated">以下示例将在 &lt;code&gt;Accept&lt;/code&gt; 标头字段设置为&amp;ldquo; application / json&amp;rdquo;或&amp;ldquo; * / json&amp;rdquo;（但是如果为&amp;ldquo; * / *&amp;rdquo;，则响应为 &lt;code&gt;{ &quot;message&quot;: &quot;hey&quot; }&lt;/code&gt; 时进行响应） &amp;ldquo;嘿&amp;rdquo;）。</target>
        </trans-unit>
        <trans-unit id="d19f8fc615e192261cd7c29898d3b4f7c2e34ae9" translate="yes" xml:space="preserve">
          <source>The following examples illustrate defining simple routes.</source>
          <target state="translated">下面的例子说明了简单路线的定义。</target>
        </trans-unit>
        <trans-unit id="380794ce66523ed44188fd85a6b21fbfde8e3b05" translate="yes" xml:space="preserve">
          <source>The following figure shows the elements of a middleware function call:</source>
          <target state="translated">下图是中间件函数调用的要素。</target>
        </trans-unit>
        <trans-unit id="862820bceeab2b0882f2ba366cf2bccb81d7ea6d" translate="yes" xml:space="preserve">
          <source>The following method names have been pluralized. In Express 4, using the old methods resulted in a deprecation warning. Express 5 no longer supports them at all:</source>
          <target state="translated">以下方法的名称已被复数化。在Express 4中,使用旧的方法会导致一个废弃的警告。Express 5完全不支持这些方法了。</target>
        </trans-unit>
        <trans-unit id="fe7c891d7ac1d3cb696999ebf066c1230c0c17a1" translate="yes" xml:space="preserve">
          <source>The following section describes &lt;code&gt;app.param(callback)&lt;/code&gt;, which is deprecated as of v4.11.0.</source>
          <target state="translated">以下部分描述了 &lt;code&gt;app.param(callback)&lt;/code&gt; ，从v4.11.0开始不推荐使用。</target>
        </trans-unit>
        <trans-unit id="a8e4eb3141b906fa57053ab91217e0b8c835a4e5" translate="yes" xml:space="preserve">
          <source>The following section describes &lt;code&gt;router.param(callback)&lt;/code&gt;, which is deprecated as of v4.11.0.</source>
          <target state="translated">以下部分描述了 &lt;code&gt;router.param(callback)&lt;/code&gt; ，从v4.11.0开始不推荐使用。</target>
        </trans-unit>
        <trans-unit id="ac7e14d52d419d2dfe7b26d664e382ff519dfa3f" translate="yes" xml:space="preserve">
          <source>The following snippet illustrates the most simple route definition possible. Express translates the path strings to regular expressions, used internally to match incoming requests. Query strings are &lt;em&gt;not&lt;/em&gt; considered when performing these matches, for example &amp;ldquo;GET /&amp;rdquo; would match the following route, as would &amp;ldquo;GET /?name=tobi&amp;rdquo;.</source>
          <target state="translated">以下代码段说明了最简单的路由定义。Express将路径字符串转换为正则表达式，在内部用于匹配传入的请求。执行这些匹配时&lt;em&gt;不&lt;/em&gt;考虑查询字符串，例如&amp;ldquo; GET /&amp;rdquo;将匹配以下路由，&amp;ldquo; GET /？name = tobi&amp;rdquo;也将匹配。</target>
        </trans-unit>
        <trans-unit id="322afa8c682cc54a48a36b4f79cc9e3a498a30f0" translate="yes" xml:space="preserve">
          <source>The following table describes the properties of the &lt;code&gt;options&lt;/code&gt; object. See also the &lt;a href=&quot;#example.of.express.static&quot;&gt;example below&lt;/a&gt;.</source>
          <target state="translated">下表描述了 &lt;code&gt;options&lt;/code&gt; 对象的属性。另请参见&lt;a href=&quot;#example.of.express.static&quot;&gt;下面&lt;/a&gt;的示例。</target>
        </trans-unit>
        <trans-unit id="2f6ded38e758ab87128a3104421456d4e2d163d4" translate="yes" xml:space="preserve">
          <source>The following table describes the properties of the optional &lt;code&gt;options&lt;/code&gt; object.</source>
          <target state="translated">下表描述了可选 &lt;code&gt;options&lt;/code&gt; 对象的属性。</target>
        </trans-unit>
        <trans-unit id="20d022061839cfe4ccc4b747ede20bacce929fa7" translate="yes" xml:space="preserve">
          <source>The following table lists Express 3 middleware and their counterparts in Express 4.</source>
          <target state="translated">下表列出了Express 3中间件及其在Express 4中的对应件。</target>
        </trans-unit>
        <trans-unit id="db0dc0a712b2f5737feeeecd3c1d50e43fa019da" translate="yes" xml:space="preserve">
          <source>The following table lists application settings.</source>
          <target state="translated">下表列出了应用程序的设置。</target>
        </trans-unit>
        <trans-unit id="c4c8a2a9021a711c4e6bcbb6a535cddbaa7cddca" translate="yes" xml:space="preserve">
          <source>The following table lists other small but important changes in Express 4:</source>
          <target state="translated">下表列出了Express 4中其他微小但重要的变化。</target>
        </trans-unit>
        <trans-unit id="729adb640a1f26923c6692f59e687d97657279bc" translate="yes" xml:space="preserve">
          <source>The following table provides details on the &lt;code&gt;options&lt;/code&gt; parameter.</source>
          <target state="translated">下表提供了 &lt;code&gt;options&lt;/code&gt; 参数的详细信息。</target>
        </trans-unit>
        <trans-unit id="92e7a0c7d12528c52cb31fc91be69f288ed104ad" translate="yes" xml:space="preserve">
          <source>The following table provides some simple examples of middleware functions that can be used as the &lt;code&gt;callback&lt;/code&gt; argument to &lt;code&gt;app.use()&lt;/code&gt;, &lt;code&gt;app.METHOD()&lt;/code&gt;, and &lt;code&gt;app.all()&lt;/code&gt;. Even though the examples are for &lt;code&gt;app.use()&lt;/code&gt;, they are also valid for &lt;code&gt;app.use()&lt;/code&gt;, &lt;code&gt;app.METHOD()&lt;/code&gt;, and &lt;code&gt;app.all()&lt;/code&gt;.</source>
          <target state="translated">下表提供了一些中间件函数的简单示例，这些中间件函数可用作 &lt;code&gt;app.use()&lt;/code&gt; ， &lt;code&gt;app.METHOD()&lt;/code&gt; 和 &lt;code&gt;app.all()&lt;/code&gt; 的 &lt;code&gt;callback&lt;/code&gt; 参数。即使示例适用于 &lt;code&gt;app.use()&lt;/code&gt; ，它们也适用于 &lt;code&gt;app.use()&lt;/code&gt; ， &lt;code&gt;app.METHOD()&lt;/code&gt; 和 &lt;code&gt;app.all()&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="8272ae472962abdf7c6f5721b444c7ac41e39794" translate="yes" xml:space="preserve">
          <source>The following table provides some simple examples of valid &lt;code&gt;path&lt;/code&gt; values for mounting middleware.</source>
          <target state="translated">下表提供了一些用于安装中间件的有效 &lt;code&gt;path&lt;/code&gt; 值的简单示例。</target>
        </trans-unit>
        <trans-unit id="a379d1ac7543c2c5d93f03d189bb0f4060bf7bc9" translate="yes" xml:space="preserve">
          <source>The function signature is:</source>
          <target state="translated">职能签名是:</target>
        </trans-unit>
        <trans-unit id="6d44e667576f6fd0d6e7fed034ced8b5b1daea77" translate="yes" xml:space="preserve">
          <source>The generated app has the following directory structure:</source>
          <target state="translated">生成的app有如下目录结构。</target>
        </trans-unit>
        <trans-unit id="86589695e60b29aef4fb8618475a17cc50047f8b" translate="yes" xml:space="preserve">
          <source>The global protoypes at &lt;code&gt;express.request&lt;/code&gt; and &lt;code&gt;express.response&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="71cc0ff633eeb477a04fb93d26af959d8ee4e102" translate="yes" xml:space="preserve">
          <source>The list below enumerates the Express vulnerabilities that were fixed in the specified version update.</source>
          <target state="translated">以下列表列举了在指定版本更新中修复的 Express 漏洞。</target>
        </trans-unit>
        <trans-unit id="745b31949705d01311954e795252221d028278c2" translate="yes" xml:space="preserve">
          <source>The local variable &lt;code&gt;cache&lt;/code&gt; enables view caching. Set it to &lt;code&gt;true&lt;/code&gt;, to cache the view during development; view caching is enabled in production by default.</source>
          <target state="translated">局部变量 &lt;code&gt;cache&lt;/code&gt; 启用视图缓存。将其设置为 &lt;code&gt;true&lt;/code&gt; ，以在开发期间缓存视图；默认情况下，生产中启用了视图缓存。</target>
        </trans-unit>
        <trans-unit id="8ccd8df08d0a6e146210e4565c7219ed71d7baff" translate="yes" xml:space="preserve">
          <source>The local variable &lt;code&gt;cache&lt;/code&gt; is reserved for enabling view cache. Set it to &lt;code&gt;true&lt;/code&gt;, if you want to cache view during development; view caching is enabled in production by default.</source>
          <target state="translated">保留本地变量 &lt;code&gt;cache&lt;/code&gt; 以启用视图缓存。如果要在开发过程中缓存视图，请将其设置为 &lt;code&gt;true&lt;/code&gt; ；否则，请设置为true。默认情况下，生产中启用了视图缓存。</target>
        </trans-unit>
        <trans-unit id="4fb6d2ff33c4f3184c113ca9dc51fd6262ec5cd7" translate="yes" xml:space="preserve">
          <source>The main difference between these two modules is how they save cookie session data. The &lt;a href=&quot;https://www.npmjs.com/package/express-session&quot;&gt;express-session&lt;/a&gt; middleware stores session data on the server; it only saves the session ID in the cookie itself, not session data. By default, it uses in-memory storage and is not designed for a production environment. In production, you&amp;rsquo;ll need to set up a scalable session-store; see the list of &lt;a href=&quot;https://github.com/expressjs/session#compatible-session-stores&quot;&gt;compatible session stores&lt;/a&gt;.</source>
          <target state="translated">这两个模块之间的主要区别在于它们如何保存cookie会话数据。该&lt;a href=&quot;https://www.npmjs.com/package/express-session&quot;&gt;快递会话&lt;/a&gt;服务器上的中间件存储会话数据; 它将会话ID仅保存在cookie本身中，而不保存会话数据。默认情况下，它使用内存存储，并且不适用于生产环境。在生产中，您需要设置一个可伸缩的会话存储；请参阅&lt;a href=&quot;https://github.com/expressjs/session#compatible-session-stores&quot;&gt;兼容的会话存储&lt;/a&gt;列表。</target>
        </trans-unit>
        <trans-unit id="7b1b372bcb81e0289afd1ed3e186dd836f491281" translate="yes" xml:space="preserve">
          <source>The method invokes the callback function &lt;code&gt;fn(err)&lt;/code&gt; when the transfer is complete or when an error occurs. If the callback function is specified and an error occurs, the callback function must explicitly handle the response process either by ending the request-response cycle, or by passing control to the next route.</source>
          <target state="translated">传输完成或发生错误时，该方法将调用回调函数 &lt;code&gt;fn(err)&lt;/code&gt; 。如果指定了回调函数并且发生错误，则回调函数必须通过结束请求-响应周期或将控制权传递到下一个路由来显式处理响应过程。</target>
        </trans-unit>
        <trans-unit id="5dcc129b584cc9823eb78eff32f3c1cb0ff56262" translate="yes" xml:space="preserve">
          <source>The method, &lt;code&gt;app.all()&lt;/code&gt;, is not derived from any HTTP method and loads middleware at the specified path for &lt;em&gt;all&lt;/em&gt; HTTP request methods. For more information, see &lt;a href=&quot;#app.all&quot;&gt;app.all&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;app.all()&lt;/code&gt; 方法不是从任何HTTP方法派生的，而是在&lt;em&gt;所有&lt;/em&gt; HTTP请求方法的指定路径处加载中间件。有关更多信息，请参见&lt;a href=&quot;#app.all&quot;&gt;app.all&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="b8493250a5bdf079e195f274e6e913153c67d104" translate="yes" xml:space="preserve">
          <source>The methods on the response object (&lt;code&gt;res&lt;/code&gt;) in the following table can send a response to the client, and terminate the request-response cycle. If none of these methods are called from a route handler, the client request will be left hanging.</source>
          <target state="translated">下表中响应对象（ &lt;code&gt;res&lt;/code&gt; ）上的方法可以将响应发送到客户端，并终止请求-响应周期。如果从路由处理程序中未调用这些方法，则客户端请求将被挂起。</target>
        </trans-unit>
        <trans-unit id="10d7588188297d2d65c1b8248fcd338d1d8b81a4" translate="yes" xml:space="preserve">
          <source>The middleware can now be used as shown below.</source>
          <target state="translated">现在可以使用中间件,如下图所示。</target>
        </trans-unit>
        <trans-unit id="d1a80788e900a2a6d84f06c8627ba0cd7b74a0ee" translate="yes" xml:space="preserve">
          <source>The middleware function &lt;code&gt;myLogger&lt;/code&gt; simply prints a message, then passes on the request to the next middleware function in the stack by calling the &lt;code&gt;next()&lt;/code&gt; function.</source>
          <target state="translated">中间件函数 &lt;code&gt;myLogger&lt;/code&gt; 仅打印一条消息，然后通过调用 &lt;code&gt;next()&lt;/code&gt; 函数将请求传递给堆栈中的下一个中间件函数。</target>
        </trans-unit>
        <trans-unit id="94c8ac0886d198b91e9077bed48289509283d123" translate="yes" xml:space="preserve">
          <source>The middleware function.</source>
          <target state="translated">中间件功能。</target>
        </trans-unit>
        <trans-unit id="33d705aa13e658f2ea9de1b55df20df09589e9ac" translate="yes" xml:space="preserve">
          <source>The middleware returned by the function decides the behavior of what happens when a URL parameter is captured.</source>
          <target state="translated">该函数返回的中间件决定了URL参数被捕获时的行为。</target>
        </trans-unit>
        <trans-unit id="d14d24eb4ee9d1ad43138aef6c20de0afde95848" translate="yes" xml:space="preserve">
          <source>The migration process is complete, and the app is now an Express 4 app. To confirm, start the app by using the following command:</source>
          <target state="translated">迁移过程已经完成,该应用程序现在是一个Express 4应用程序。要确认,请使用以下命令启动应用程序。</target>
        </trans-unit>
        <trans-unit id="e63a9d0c9071d0d38f70bbfe0ce6caf6da86ec36" translate="yes" xml:space="preserve">
          <source>The most popular process managers for Express and other Node.js applications are as follows:</source>
          <target state="translated">Express和其他Node.js应用中最流行的进程管理器如下。</target>
        </trans-unit>
        <trans-unit id="23a28a15d36b4a34e2c78f847fee1c6d4d50ae15" translate="yes" xml:space="preserve">
          <source>The most popular process managers for Express and other Node.js applications are:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="09698134b122c0ffff93c5c25f39cbb42fa728d6" translate="yes" xml:space="preserve">
          <source>The most popular process managers for Node are as follows:</source>
          <target state="translated">Node最流行的进程管理器如下。</target>
        </trans-unit>
        <trans-unit id="eea6ff6794091a677adaf97c0608a3c275772d58" translate="yes" xml:space="preserve">
          <source>The name of route parameters must be made up of &amp;ldquo;word characters&amp;rdquo; ([A-Za-z0-9_]).</source>
          <target state="translated">路径参数的名称必须由&amp;ldquo;文字字符&amp;rdquo;（[A-Za-z0-9_]）组成。</target>
        </trans-unit>
        <trans-unit id="3769b527bb8624b7887fa5dc2bf5b6c49ca51e94" translate="yes" xml:space="preserve">
          <source>The name of the parameter.</source>
          <target state="translated">参数的名称。</target>
        </trans-unit>
        <trans-unit id="0b62beade8625118367581cd1f9b6bbaf8702af3" translate="yes" xml:space="preserve">
          <source>The new &lt;code&gt;app.route()&lt;/code&gt; method enables you to create chainable route handlers for a route path. Because the path is specified in a single location, creating modular routes is helpful, as is reducing redundancy and typos. For more information about routes, see &lt;a href=&quot;../index#router&quot;&gt;&lt;code&gt;Router()&lt;/code&gt; documentation&lt;/a&gt;.</source>
          <target state="translated">新的 &lt;code&gt;app.route()&lt;/code&gt; 方法使您可以为路由路径创建可链接的路由处理程序。由于路径是在单个位置指定的，因此创建模块化路由非常有帮助，减少冗余和错别字也很有帮助。有关路由的更多信息，请参见&lt;a href=&quot;../index#router&quot;&gt; &lt;code&gt;Router()&lt;/code&gt; 文档&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="10a6a5833f67253c478510a4917e0deee66501ce" translate="yes" xml:space="preserve">
          <source>The next layer of reliability is to ensure that your app restarts when the server restarts. Systems can still go down for a variety of reasons. To ensure that your app restarts if the server crashes, use the init system built into your OS. The two main init systems in use today are &lt;a href=&quot;https://wiki.debian.org/systemd&quot;&gt;systemd&lt;/a&gt; and &lt;a href=&quot;http://upstart.ubuntu.com/&quot;&gt;Upstart&lt;/a&gt;.</source>
          <target state="translated">可靠性的下一层是确保服务器重新启动时您的应用程序重新启动。系统仍然可能由于多种原因而崩溃。为确保在服务器崩溃时您的应用程序重启，请使用操作系统内置的init系统。今天使用的两个主要的初始化系统是&lt;a href=&quot;https://wiki.debian.org/systemd&quot;&gt;systemd&lt;/a&gt;和&lt;a href=&quot;http://upstart.ubuntu.com/&quot;&gt;Upstart&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="bc06a7949dfa84edd4397fc3dcab3611d8683e6c" translate="yes" xml:space="preserve">
          <source>The number of dot-separated parts of the host to remove to access subdomain.</source>
          <target state="translated">要访问子域,需要删除主机的点分隔部分的数量。</target>
        </trans-unit>
        <trans-unit id="94be16c086d5530b471614800979016aaa69e7d3" translate="yes" xml:space="preserve">
          <source>The optional &lt;code&gt;options&lt;/code&gt; argument is supported by Express v4.16.0 onwards.</source>
          <target state="translated">Express v4.16.0及更高版本支持可选 &lt;code&gt;options&lt;/code&gt; 参数。</target>
        </trans-unit>
        <trans-unit id="72d2bdfa9db85f99caefb5b5e21fc49e1332176e" translate="yes" xml:space="preserve">
          <source>The optional &lt;code&gt;options&lt;/code&gt; argument passes through to the underlying &lt;a href=&quot;#res.sendFile&quot;&gt;res.sendFile()&lt;/a&gt; call, and takes the exact same parameters.</source>
          <target state="translated">可选的 &lt;code&gt;options&lt;/code&gt; 参数传递给基础的&lt;a href=&quot;#res.sendFile&quot;&gt;res.sendFile（）&lt;/a&gt;调用，并采用完全相同的参数。</target>
        </trans-unit>
        <trans-unit id="730ddf9384d35b501405cb3bb361b853fea7b60b" translate="yes" xml:space="preserve">
          <source>The optional &lt;code&gt;options&lt;/code&gt; parameter specifies the behavior of the router.</source>
          <target state="translated">可选的 &lt;code&gt;options&lt;/code&gt; 参数指定路由器的行为。</target>
        </trans-unit>
        <trans-unit id="9b01c9fe98918094f83127af0c6de4c5af3dd7a4" translate="yes" xml:space="preserve">
          <source>The order in which you define middleware with &lt;code&gt;router.use()&lt;/code&gt; is very important. They are invoked sequentially, thus the order defines middleware precedence. For example, usually a logger is the very first middleware you would use, so that every request gets logged.</source>
          <target state="translated">使用 &lt;code&gt;router.use()&lt;/code&gt; 定义中间件的顺序非常重要。它们被顺序调用，因此顺序定义了中间件优先级。例如，通常记录器是您要使用的第一个中间件，因此每个请求都会被记录。</target>
        </trans-unit>
        <trans-unit id="928c48d6dbd0dcf89cf48ee881b21b3dddb2678b" translate="yes" xml:space="preserve">
          <source>The order of middleware loading is important: middleware functions that are loaded first are also executed first.</source>
          <target state="translated">中间件加载的顺序很重要:先加载的中间件函数也会先执行。</target>
        </trans-unit>
        <trans-unit id="ab8fef2dda6e310a3561720d3d648f13d663e8af" translate="yes" xml:space="preserve">
          <source>The other feature that helps to organize routes is a new class, &lt;code&gt;express.Router&lt;/code&gt;, that you can use to create modular mountable route handlers. A &lt;code&gt;Router&lt;/code&gt; instance is a complete middleware and routing system; for this reason it is often referred to as a &amp;ldquo;mini-app&amp;rdquo;.</source>
          <target state="translated">有助于组织路由的另一个功能是新类 &lt;code&gt;express.Router&lt;/code&gt; ，您可以使用它来创建模块化的可安装路由处理程序。一个 &lt;code&gt;Router&lt;/code&gt; 的实例是一个完整的中间件和路由系统; 因此，它通常被称为&amp;ldquo;迷你应用程序&amp;rdquo;。</target>
        </trans-unit>
        <trans-unit id="ea0419ba7cbaff27ca13036e76d96fc4bc0a8079" translate="yes" xml:space="preserve">
          <source>The overridden method may now be used this way:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f47d1151418158d498232d12797af9de15401aab" translate="yes" xml:space="preserve">
          <source>The parameter can be any JSON type, including object, array, string, Boolean, number, or null, and you can also use it to convert other values to JSON.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="336fcb00801481f781e66eb98b3b9c9500dc2194" translate="yes" xml:space="preserve">
          <source>The parameter can be any JSON type, including object, array, string, Boolean, or number, and you can also use it to convert other values to JSON, such as &lt;code&gt;null&lt;/code&gt;, and &lt;code&gt;undefined&lt;/code&gt; (although these are technically not valid JSON).</source>
          <target state="translated">该参数可以是任何JSON类型，包括对象，数组，字符串，布尔值或数字，并且您还可以使用该参数将其他值转换为JSON，例如 &lt;code&gt;null&lt;/code&gt; 和 &lt;code&gt;undefined&lt;/code&gt; （尽管从技术上讲，这些都是无效的JSON）。</target>
        </trans-unit>
        <trans-unit id="d74624806a6d45e120df27881778e7a6fc9c9286" translate="yes" xml:space="preserve">
          <source>The parameters of the callback function are:</source>
          <target state="translated">回调函数的参数是:</target>
        </trans-unit>
        <trans-unit id="c8b9471cdfcef206ff7bec325d770ad0eed900e0" translate="yes" xml:space="preserve">
          <source>The path for which the middleware function is invoked; can be any of:</source>
          <target state="translated">调用中间件函数的路径;可以是以下任何一种:</target>
        </trans-unit>
        <trans-unit id="3eb90f07dac6f867c04a4bc720cde4444d7253fd" translate="yes" xml:space="preserve">
          <source>The routing system</source>
          <target state="translated">路由系统</target>
        </trans-unit>
        <trans-unit id="84083fe4c01082c93c50f8d66a6b98f5fbc47749" translate="yes" xml:space="preserve">
          <source>The second is number of failed attempts from an IP address over some long period of time. For example, block an IP address if it makes 100 failed attempts in one day.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="05c938e6d78d20e713ee6d52559f43a38ccf487d" translate="yes" xml:space="preserve">
          <source>The signature of the function is:</source>
          <target state="translated">该函数的签名是:</target>
        </trans-unit>
        <trans-unit id="ab81e1bad3146fc4bccfb542a97be989f42ff828" translate="yes" xml:space="preserve">
          <source>The simple query parser is based on Node&amp;rsquo;s native query parser, &lt;a href=&quot;http://nodejs.org/api/querystring.html&quot;&gt;querystring&lt;/a&gt;.</source>
          <target state="translated">简单的查询解析器基于Node的本机查询解析器&lt;a href=&quot;http://nodejs.org/api/querystring.html&quot;&gt;querystring&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="ca8eee6339ec1006a47a22c850013a5b158772d7" translate="yes" xml:space="preserve">
          <source>The term &lt;em&gt;&amp;ldquo;production&amp;rdquo;&lt;/em&gt; refers to the stage in the software lifecycle when an application or API is generally available to its end-users or consumers. In contrast, in the &lt;em&gt;&amp;ldquo;development&amp;rdquo;&lt;/em&gt; stage, you&amp;rsquo;re still actively writing and testing code, and the application is not open to external access. The corresponding system environments are known as &lt;em&gt;production&lt;/em&gt; and &lt;em&gt;development&lt;/em&gt; environments, respectively.</source>
          <target state="translated">术语&lt;em&gt;&amp;ldquo;生产&amp;rdquo;&lt;/em&gt;指的是应用程序或API通常可供其最终用户或消费者使用的软件生命周期中的阶段。相反，在&lt;em&gt;&amp;ldquo;开发&amp;rdquo;&lt;/em&gt;阶段，您仍在积极编写和测试代码，并且该应用程序不对外开放。相应的系统环境分别称为&lt;em&gt;生产&lt;/em&gt;和&lt;em&gt;开发&lt;/em&gt;环境。</target>
        </trans-unit>
        <trans-unit id="abfd5f3fd1531af155b8fa89b622ca06a7b2e418" translate="yes" xml:space="preserve">
          <source>The top-level &lt;code&gt;express&lt;/code&gt; object has a &lt;a href=&quot;#express.router&quot;&gt;Router()&lt;/a&gt; method that creates a new &lt;code&gt;router&lt;/code&gt; object.</source>
          <target state="translated">顶级 &lt;code&gt;express&lt;/code&gt; 对象具有一个&lt;a href=&quot;#express.router&quot;&gt;Router（）&lt;/a&gt;方法，该方法创建一个新的 &lt;code&gt;router&lt;/code&gt; 对象。</target>
        </trans-unit>
        <trans-unit id="8b6bd02109d9c9ba4f8073cc245d97c7a45a1128" translate="yes" xml:space="preserve">
          <source>The value of &lt;a href=&quot;http://expressjs.com/en/api.html#req.hostname&quot;&gt;req.hostname&lt;/a&gt; is derived from the value set in the &lt;code&gt;X-Forwarded-Host&lt;/code&gt; header, which can be set by the client or by the proxy.</source>
          <target state="translated">&lt;a href=&quot;http://expressjs.com/en/api.html#req.hostname&quot;&gt;req.hostname&lt;/a&gt;的值是从 &lt;code&gt;X-Forwarded-Host&lt;/code&gt; 标头中设置的值派生的，该值可以由客户端或代理设置。</target>
        </trans-unit>
        <trans-unit id="b3ca029ce98ea4b9224656043b13bdef9b1564fc" translate="yes" xml:space="preserve">
          <source>The value of the &lt;code&gt;name&lt;/code&gt; parameter.</source>
          <target state="translated">&lt;code&gt;name&lt;/code&gt; 参数的值。</target>
        </trans-unit>
        <trans-unit id="e3b16790690d51857f362e0bfe828daf1acc0af9" translate="yes" xml:space="preserve">
          <source>The way you define routes is unchanged, but the routing system has two new features to help organize your routes:</source>
          <target state="translated">你定义路由的方式没有改变,但路由系统有两个新的功能来帮助组织你的路由。</target>
        </trans-unit>
        <trans-unit id="33214671538150f77e53cdf9f7e4b84e8a56e09e" translate="yes" xml:space="preserve">
          <source>Then create a route to render the &lt;code&gt;index.pug&lt;/code&gt; file. If the &lt;code&gt;view engine&lt;/code&gt; property is not set, you must specify the extension of the &lt;code&gt;view&lt;/code&gt; file. Otherwise, you can omit it.</source>
          <target state="translated">然后创建路由以呈现 &lt;code&gt;index.pug&lt;/code&gt; 文件。如果未设置 &lt;code&gt;view engine&lt;/code&gt; 属性，则必须指定 &lt;code&gt;view&lt;/code&gt; 文件的扩展名。否则，您可以忽略它。</target>
        </trans-unit>
        <trans-unit id="6c82585775e5cad2aff928e1d12e385a6813cb7b" translate="yes" xml:space="preserve">
          <source>Then install dependencies:</source>
          <target state="translated">然后安装依赖关系。</target>
        </trans-unit>
        <trans-unit id="0b11d4df9e46cf7f12bdddd1817579121eab0ef0" translate="yes" xml:space="preserve">
          <source>Then install the corresponding template engine npm package; for example to install Pug:</source>
          <target state="translated">然后安装相应的模板引擎npm包;例如安装Pug。</target>
        </trans-unit>
        <trans-unit id="e60ca4b8e3d0c2392c17476bd9bab2d79bc35dac" translate="yes" xml:space="preserve">
          <source>Then load &lt;code&gt;http://localhost:3000/&lt;/code&gt; in your browser to access the app.</source>
          <target state="translated">然后在浏览器中加载 &lt;code&gt;http://localhost:3000/&lt;/code&gt; 以访问该应用程序。</target>
        </trans-unit>
        <trans-unit id="7fae67f35e1ce6760152544dd2e31157d5b0e646" translate="yes" xml:space="preserve">
          <source>Then run the service with:</source>
          <target state="translated">然后用运行服务。</target>
        </trans-unit>
        <trans-unit id="60dd8ce3d1564d3cfff7bf8cfdbc99c375c37583" translate="yes" xml:space="preserve">
          <source>Then start the service with:</source>
          <target state="translated">然后启动服务与。</target>
        </trans-unit>
        <trans-unit id="f1344d5024e8280dc94dd2c532c5d9f9c43d785a" translate="yes" xml:space="preserve">
          <source>Then to use it in your code:</source>
          <target state="translated">然后在你的代码中使用它。</target>
        </trans-unit>
        <trans-unit id="e0f8a4a914369f83038f069eb0a65844df12fc30" translate="yes" xml:space="preserve">
          <source>Then, create the following route in your app.</source>
          <target state="translated">然后,在你的应用程序中创建以下路径。</target>
        </trans-unit>
        <trans-unit id="7200e6f2f424015df41973313013765338beb3c1" translate="yes" xml:space="preserve">
          <source>Then, load &lt;code&gt;http://localhost:3000/&lt;/code&gt; in a browser to see the output.</source>
          <target state="translated">然后，在浏览器中加载 &lt;code&gt;http://localhost:3000/&lt;/code&gt; 以查看输出。</target>
        </trans-unit>
        <trans-unit id="065e8d6b87455fea692b5996a0909443c140cc4e" translate="yes" xml:space="preserve">
          <source>Then, load the router module in the app:</source>
          <target state="translated">然后,在应用中加载路由器模块。</target>
        </trans-unit>
        <trans-unit id="f13fd315b2fad8692cf76eae1dd6e29885611d35" translate="yes" xml:space="preserve">
          <source>Then, remove invalid code, load the required middleware, and make other changes as necessary. The &lt;code&gt;app.js&lt;/code&gt; file will look like this:</source>
          <target state="translated">然后，删除无效的代码，加载所需的中间件，并根据需要进行其他更改。在 &lt;code&gt;app.js&lt;/code&gt; 文件看起来是这样的：</target>
        </trans-unit>
        <trans-unit id="991a23aae9cdfdc87568b871e83b58064a39c63c" translate="yes" xml:space="preserve">
          <source>There are several significant changes in Express 4:</source>
          <target state="translated">快递4有几个重大变化。</target>
        </trans-unit>
        <trans-unit id="bd1af7fc5f124707d3d486f9e632314f3b36c58c" translate="yes" xml:space="preserve">
          <source>There are two main middleware cookie session modules:</source>
          <target state="translated">主要有两个中间件cookie会话模块。</target>
        </trans-unit>
        <trans-unit id="2f758c1cf6d4c8cb9e9cd51e5dec0ee41ce2374f" translate="yes" xml:space="preserve">
          <source>There are two ways to use init systems with your Express app:</source>
          <target state="translated">有两种方法可以在你的Express应用中使用init系统。</target>
        </trans-unit>
        <trans-unit id="9351e9914c8bc586d41c0c4a01832839a34f310b" translate="yes" xml:space="preserve">
          <source>There is a special routing method, &lt;code&gt;app.all()&lt;/code&gt;, used to load middleware functions at a path for &lt;em&gt;all&lt;/em&gt; HTTP request methods. For example, the following handler is executed for requests to the route &amp;ldquo;/secret&amp;rdquo; whether using GET, POST, PUT, DELETE, or any other HTTP request method supported in the &lt;a href=&quot;https://nodejs.org/api/http.html#http_http_methods&quot;&gt;http module&lt;/a&gt;.</source>
          <target state="translated">有一个特殊的路由方法 &lt;code&gt;app.all()&lt;/code&gt; ，用于为&lt;em&gt;所有&lt;/em&gt; HTTP请求方法的路径加载中间件功能。例如，无论是使用GET，POST，PUT，DELETE还是&lt;a href=&quot;https://nodejs.org/api/http.html#http_http_methods&quot;&gt;http模块&lt;/a&gt;支持的任何其他HTTP请求方法，都会对路由&amp;ldquo; / secret&amp;rdquo;的请求执行以下处理程序。</target>
        </trans-unit>
        <trans-unit id="aa1d6dc8e632f8aa86480e78f1c3005fddd15f8b" translate="yes" xml:space="preserve">
          <source>There is no definitive answer to this question. The answer depends on the scale of your application and the team that is involved. To be as flexible as possible, Express makes no assumptions in terms of structure.</source>
          <target state="translated">这个问题没有明确的答案。答案取决于你的应用规模和参与的团队。为了尽可能的灵活,Express在结构上不做任何假设。</target>
        </trans-unit>
        <trans-unit id="63b9dd413da07edf287e7fe6981e9b8f72c900c9" translate="yes" xml:space="preserve">
          <source>These database drivers are among many that are available. For other options, search on the &lt;a href=&quot;https://www.npmjs.com/&quot;&gt;npm&lt;/a&gt; site.</source>
          <target state="translated">这些数据库驱动程序是许多可用的。对于其他选项，请在&lt;a href=&quot;https://www.npmjs.com/&quot;&gt;npm&lt;/a&gt;网站上搜索。</target>
        </trans-unit>
        <trans-unit id="99bb054abe760f22530355254d09281008974ff3" translate="yes" xml:space="preserve">
          <source>These routing methods specify a callback function (sometimes called &amp;ldquo;handler functions&amp;rdquo;) called when the application receives a request to the specified route (endpoint) and HTTP method. In other words, the application &amp;ldquo;listens&amp;rdquo; for requests that match the specified route(s) and method(s), and when it detects a match, it calls the specified callback function.</source>
          <target state="translated">这些路由方法指定在应用程序收到对指定路由（端点）和HTTP方法的请求时调用的回调函数（有时称为&amp;ldquo;处理函数&amp;rdquo;）。换句话说，应用程序&amp;ldquo;侦听&amp;rdquo;与指定的路由和方法匹配的请求，并且当它检测到匹配项时，它将调用指定的回调函数。</target>
        </trans-unit>
        <trans-unit id="f46d47c06c7d915c40e70255eb957409610468fd" translate="yes" xml:space="preserve">
          <source>Things to do in your code</source>
          <target state="translated">在你的代码中要做的事情</target>
        </trans-unit>
        <trans-unit id="a235dc03a74ce9e2751a9a72025475f40ce97169" translate="yes" xml:space="preserve">
          <source>Things to do in your code (the dev part):</source>
          <target state="translated">在你的代码中要做的事情(开发部分)。</target>
        </trans-unit>
        <trans-unit id="5d6a2a16dd07c4b465cbbb29719ced0eb4bc6db6" translate="yes" xml:space="preserve">
          <source>Things to do in your environment / setup</source>
          <target state="translated">在您的环境中要做的事情/设置</target>
        </trans-unit>
        <trans-unit id="699cb6d5b2493ef4b92f01b495acbdc09f859a81" translate="yes" xml:space="preserve">
          <source>Things to do in your environment / setup (the ops part):</source>
          <target state="translated">在你的环境/设置中要做的事情(操作部分)。</target>
        </trans-unit>
        <trans-unit id="559a5f7f0ea436d823c1ba60e07a18a0dfdabe73" translate="yes" xml:space="preserve">
          <source>Think of &lt;code&gt;app.render()&lt;/code&gt; as a utility function for generating rendered view strings. Internally &lt;code&gt;res.render()&lt;/code&gt; uses &lt;code&gt;app.render()&lt;/code&gt; to render views.</source>
          <target state="translated">将 &lt;code&gt;app.render()&lt;/code&gt; 视为用于生成渲染视图字符串的实用程序函数。内部 &lt;code&gt;res.render()&lt;/code&gt; 使用 &lt;code&gt;app.render()&lt;/code&gt; 呈现视图。</target>
        </trans-unit>
        <trans-unit id="5ab7780493a98e511acb8e937e221168d4665a10" translate="yes" xml:space="preserve">
          <source>Third-party middleware</source>
          <target state="translated">第三方中间件</target>
        </trans-unit>
        <trans-unit id="f75cab7683b144c5a84f60e5a14ef4dbf7592d5b" translate="yes" xml:space="preserve">
          <source>Third-party solution: terminus</source>
          <target state="translated">第三方解决方案:总站</target>
        </trans-unit>
        <trans-unit id="2612d57a5ef17fe4d49fb78f6d7734e40b0f1045" translate="yes" xml:space="preserve">
          <source>Third-party solutions</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4d2cbe6590eb5fa2fb65723fb66e125a528cf39d" translate="yes" xml:space="preserve">
          <source>This API provides access to data on the running file system. Ensure that either (a) the way in which the &lt;code&gt;path&lt;/code&gt; argument was constructed into an absolute path is secure if it contains user input or (b) set the &lt;code&gt;root&lt;/code&gt; option to the absolute path of a directory to contain access within.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ee732985d852e0a58e1362f30062069245ba8f74" translate="yes" xml:space="preserve">
          <source>This app starts a server and listens on port 3000 for connections. The app responds with &amp;ldquo;Hello World!&amp;rdquo; for requests to the root URL (&lt;code&gt;/&lt;/code&gt;) or &lt;em&gt;route&lt;/em&gt;. For every other path, it will respond with a &lt;strong&gt;404 Not Found&lt;/strong&gt;.</source>
          <target state="translated">此应用程序启动服务器，并在端口3000上监听连接。该应用会显示&amp;ldquo; Hello World！&amp;rdquo;。用于对根URL（ &lt;code&gt;/&lt;/code&gt; ）或&lt;em&gt;路由的&lt;/em&gt;请求。对于其他所有路径，它将以&lt;strong&gt;404 Not Found&lt;/strong&gt;响应。</target>
        </trans-unit>
        <trans-unit id="36efd58e9596ed2d83d3910f938e1f6d51e40a6a" translate="yes" xml:space="preserve">
          <source>This approach re-uses the single &lt;code&gt;/users/:user_id&lt;/code&gt; path and adds handlers for various HTTP methods.</source>
          <target state="translated">这种方法重复使用了 &lt;code&gt;/users/:user_id&lt;/code&gt; 路径，并为各种HTTP方法添加了处理程序。</target>
        </trans-unit>
        <trans-unit id="15f640bcd1b157d93a815d6bfb75ed7442c38f34" translate="yes" xml:space="preserve">
          <source>This article covers:</source>
          <target state="translated">本条涉及:</target>
        </trans-unit>
        <trans-unit id="c9516eb72662bc86c4292c21dba5f6a5bbbe2d51" translate="yes" xml:space="preserve">
          <source>This article discusses performance and reliability best practices for Express applications deployed to production.</source>
          <target state="translated">本文讨论了部署到生产中的Express应用程序的性能和可靠性最佳实践。</target>
        </trans-unit>
        <trans-unit id="d5b49bbbcdc2e9fa9a985699da5173951223f7fb" translate="yes" xml:space="preserve">
          <source>This can also be configured within a PM2 process file (&lt;code&gt;ecosystem.config.js&lt;/code&gt; or similar) by setting &lt;code&gt;exec_mode&lt;/code&gt; to &lt;code&gt;cluster&lt;/code&gt; and &lt;code&gt;instances&lt;/code&gt; to the number of workers to start.</source>
          <target state="translated">也可以通过将 &lt;code&gt;exec_mode&lt;/code&gt; 设置为 &lt;code&gt;cluster&lt;/code&gt; 并将 &lt;code&gt;instances&lt;/code&gt; 设置为要启动的工作程序数，来在PM2进程文件（ &lt;code&gt;ecosystem.config.js&lt;/code&gt; 或类似文件）中进行配置。</target>
        </trans-unit>
        <trans-unit id="ae431e3803edf6da1aa164607df8bd9bf2b05bfb" translate="yes" xml:space="preserve">
          <source>This command prompts you for a number of things, such as the name and version of your application. For now, you can simply hit RETURN to accept the defaults for most of them, with the following exception:</source>
          <target state="translated">这个命令会提示你一些事情,比如你的应用程序的名称和版本。现在,你可以简单地点击RETURN来接受大多数的默认值,除了下面的例外。</target>
        </trans-unit>
        <trans-unit id="566bc7ee678acbf385a283af7180d512ebfb19ea" translate="yes" xml:space="preserve">
          <source>This command will run the script in daemon mode (in the background).</source>
          <target state="translated">该命令将以守护进程模式(在后台)运行脚本。</target>
        </trans-unit>
        <trans-unit id="58d477748b97bf167d282df7ffa9a1891cca0c1a" translate="yes" xml:space="preserve">
          <source>This example shows a middleware function mounted on the &lt;code&gt;/user/:id&lt;/code&gt; path. The function is executed for any type of HTTP request on the &lt;code&gt;/user/:id&lt;/code&gt; path.</source>
          <target state="translated">此示例显示了安装在 &lt;code&gt;/user/:id&lt;/code&gt; 路径上的中间件功能。该函数在 &lt;code&gt;/user/:id&lt;/code&gt; 路径上针对任何类型的HTTP请求执行。</target>
        </trans-unit>
        <trans-unit id="1d5c2cbfa770a96f4b141b6897a34db0dbc7535c" translate="yes" xml:space="preserve">
          <source>This example shows a middleware function with no mount path. The function is executed every time the app receives a request.</source>
          <target state="translated">这个例子展示了一个没有挂载路径的中间件函数。该函数在应用程序每次收到请求时都会执行。</target>
        </trans-unit>
        <trans-unit id="9cefc3f75f01437fc9cc6427cd73ab2845d6b98e" translate="yes" xml:space="preserve">
          <source>This example shows a middleware sub-stack that handles GET requests to the &lt;code&gt;/user/:id&lt;/code&gt; path.</source>
          <target state="translated">此示例显示了一个中间件子堆栈，该子堆栈处理对 &lt;code&gt;/user/:id&lt;/code&gt; 路径的GET请求。</target>
        </trans-unit>
        <trans-unit id="8f8016d96e4d65b50f07562de145ce0bdf0e1399" translate="yes" xml:space="preserve">
          <source>This example shows a route and its handler function (middleware system). The function handles GET requests to the &lt;code&gt;/user/:id&lt;/code&gt; path.</source>
          <target state="translated">此示例显示了路由及其处理程序功能（中间件系统）。该函数处理对 &lt;code&gt;/user/:id&lt;/code&gt; 路径的GET请求。</target>
        </trans-unit>
        <trans-unit id="81ab12ce60756e8d0f7bde88788a292df98fcbe1" translate="yes" xml:space="preserve">
          <source>This example shows an array with a middleware sub-stack that handles GET requests to the &lt;code&gt;/user/:id&lt;/code&gt; path</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c4a02c7c014e2ccf2d2089858e1e33898ab89b68" translate="yes" xml:space="preserve">
          <source>This is a built-in middleware function in Express. It parses incoming request payloads into a &lt;code&gt;Buffer&lt;/code&gt; and is based on &lt;a href=&quot;http://expressjs.com/resources/middleware/body-parser.html&quot;&gt;body-parser&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="44f3f4ac34f02dac90091a9c71dd1e7de5487bd3" translate="yes" xml:space="preserve">
          <source>This is a built-in middleware function in Express. It parses incoming request payloads into a string and is based on &lt;a href=&quot;http://expressjs.com/resources/middleware/body-parser.html&quot;&gt;body-parser&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c90a6b0044a0af85a69597582e3ab719a3739104" translate="yes" xml:space="preserve">
          <source>This is a built-in middleware function in Express. It parses incoming requests with JSON payloads and is based on &lt;a href=&quot;http://expressjs.com/en/resources/middleware/body-parser.html&quot;&gt;body-parser&lt;/a&gt;.</source>
          <target state="translated">这是Express中的内置中间件功能。它使用&lt;a href=&quot;http://expressjs.com/en/resources/middleware/body-parser.html&quot;&gt;body解析器&lt;/a&gt;解析带有JSON负载的传入请求。</target>
        </trans-unit>
        <trans-unit id="10acacd215e7c98a06786d3f4b77d6cf8bc61d08" translate="yes" xml:space="preserve">
          <source>This is a built-in middleware function in Express. It parses incoming requests with JSON payloads and is based on &lt;a href=&quot;http://expressjs.com/resources/middleware/body-parser.html&quot;&gt;body-parser&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4bbe82504369c95b9102307a8cf4f3e2d3176028" translate="yes" xml:space="preserve">
          <source>This is a built-in middleware function in Express. It parses incoming requests with urlencoded payloads and is based on &lt;a href=&quot;http://expressjs.com/en/resources/middleware/body-parser.html&quot;&gt;body-parser&lt;/a&gt;.</source>
          <target state="translated">这是Express中的内置中间件功能。它使用urlencoded的有效载荷解析传入的请求，并且基于&lt;a href=&quot;http://expressjs.com/en/resources/middleware/body-parser.html&quot;&gt;body-parser&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="dc995425695069d3dcf0dab1c57eadaaec496d9a" translate="yes" xml:space="preserve">
          <source>This is a built-in middleware function in Express. It parses incoming requests with urlencoded payloads and is based on &lt;a href=&quot;http://expressjs.com/resources/middleware/body-parser.html&quot;&gt;body-parser&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="29bc77ae6bbabb233725459b0510c827a0610701" translate="yes" xml:space="preserve">
          <source>This is a built-in middleware function in Express. It serves static files and is based on &lt;a href=&quot;http://expressjs.com/en/resources/middleware/serve-static.html&quot;&gt;serve-static&lt;/a&gt;.</source>
          <target state="translated">这是Express中的内置中间件功能。它提供静态文件，并基于&lt;a href=&quot;http://expressjs.com/en/resources/middleware/serve-static.html&quot;&gt;serve-static&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="14a14f3ebcab251ce8c689060c5c9df8d95bf404" translate="yes" xml:space="preserve">
          <source>This is a built-in middleware function in Express. It serves static files and is based on &lt;a href=&quot;http://expressjs.com/resources/middleware/serve-static.html&quot;&gt;serve-static&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ba3161c6fc316443fceaac32641ff76a588f6c2a" translate="yes" xml:space="preserve">
          <source>This is used to determine what media type the middleware will parse. This option can be a string, array of strings, or a function. If not a function, &lt;code&gt;type&lt;/code&gt; option is passed directly to the &lt;a href=&quot;https://www.npmjs.org/package/type-is#readme&quot;&gt;type-is&lt;/a&gt; library and this can be an extension name (like &lt;code&gt;bin&lt;/code&gt;), a mime type (like &lt;code&gt;application/octet-stream&lt;/code&gt;), or a mime type with a wildcard (like &lt;code&gt;*/*&lt;/code&gt; or &lt;code&gt;application/*&lt;/code&gt;). If a function, the &lt;code&gt;type&lt;/code&gt; option is called as &lt;code&gt;fn(req)&lt;/code&gt; and the request is parsed if it returns a truthy value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="52f181e2c6c39faa736cc2ef98a667cf8cfea26f" translate="yes" xml:space="preserve">
          <source>This is used to determine what media type the middleware will parse. This option can be a string, array of strings, or a function. If not a function, &lt;code&gt;type&lt;/code&gt; option is passed directly to the &lt;a href=&quot;https://www.npmjs.org/package/type-is#readme&quot;&gt;type-is&lt;/a&gt; library and this can be an extension name (like &lt;code&gt;json&lt;/code&gt;), a mime type (like &lt;code&gt;application/json&lt;/code&gt;), or a mime type with a wildcard (like &lt;code&gt;*/*&lt;/code&gt; or &lt;code&gt;*/json&lt;/code&gt;). If a function, the &lt;code&gt;type&lt;/code&gt; option is called as &lt;code&gt;fn(req)&lt;/code&gt; and the request is parsed if it returns a truthy value.</source>
          <target state="translated">这用于确定中间件将解析的媒体类型。此选项可以是字符串，字符串数组或函数。如果不是函数，则将 &lt;code&gt;type&lt;/code&gt; 选项直接传递到&lt;a href=&quot;https://www.npmjs.org/package/type-is#readme&quot;&gt;type-is&lt;/a&gt;库，并且可以是扩展名（例如 &lt;code&gt;json&lt;/code&gt; ），mime类型（例如 &lt;code&gt;application/json&lt;/code&gt; ）或带通配符的mime类型（例如 &lt;code&gt;*/*&lt;/code&gt; )或 &lt;code&gt;*/json&lt;/code&gt; ）。如果是函数，则将 &lt;code&gt;type&lt;/code&gt; 选项称为 &lt;code&gt;fn(req)&lt;/code&gt; ，如果请求返回真实值，则对该请求进行解析。</target>
        </trans-unit>
        <trans-unit id="4ceb3f43e2a1d698ef77fe966ee3a76ee67aec0a" translate="yes" xml:space="preserve">
          <source>This is used to determine what media type the middleware will parse. This option can be a string, array of strings, or a function. If not a function, &lt;code&gt;type&lt;/code&gt; option is passed directly to the &lt;a href=&quot;https://www.npmjs.org/package/type-is#readme&quot;&gt;type-is&lt;/a&gt; library and this can be an extension name (like &lt;code&gt;txt&lt;/code&gt;), a mime type (like &lt;code&gt;text/plain&lt;/code&gt;), or a mime type with a wildcard (like &lt;code&gt;*/*&lt;/code&gt; or &lt;code&gt;text/*&lt;/code&gt;). If a function, the &lt;code&gt;type&lt;/code&gt; option is called as &lt;code&gt;fn(req)&lt;/code&gt; and the request is parsed if it returns a truthy value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="676612b8539e51a6459e419fd9a06c46e6bcca17" translate="yes" xml:space="preserve">
          <source>This is used to determine what media type the middleware will parse. This option can be a string, array of strings, or a function. If not a function, &lt;code&gt;type&lt;/code&gt; option is passed directly to the &lt;a href=&quot;https://www.npmjs.org/package/type-is#readme&quot;&gt;type-is&lt;/a&gt; library and this can be an extension name (like &lt;code&gt;urlencoded&lt;/code&gt;), a mime type (like &lt;code&gt;application/x-www-form-urlencoded&lt;/code&gt;), or a mime type with a wildcard (like &lt;code&gt;*/x-www-form-urlencoded&lt;/code&gt;). If a function, the &lt;code&gt;type&lt;/code&gt; option is called as &lt;code&gt;fn(req)&lt;/code&gt; and the request is parsed if it returns a truthy value.</source>
          <target state="translated">这用于确定中间件将解析的媒体类型。此选项可以是字符串，字符串数组或函数。如果不是函数，则将 &lt;code&gt;type&lt;/code&gt; 选项直接传递给&lt;a href=&quot;https://www.npmjs.org/package/type-is#readme&quot;&gt;type-is&lt;/a&gt;库，该扩展名可以是扩展名（如 &lt;code&gt;urlencoded&lt;/code&gt; ），mime类型（如 &lt;code&gt;application/x-www-form-urlencoded&lt;/code&gt; ）或带有a的mime类型。通配符（例如 &lt;code&gt;*/x-www-form-urlencoded&lt;/code&gt; ）。如果是函数，则将 &lt;code&gt;type&lt;/code&gt; 选项称为 &lt;code&gt;fn(req)&lt;/code&gt; ,并且如果请求返回真实值，则对该请求进行解析。</target>
        </trans-unit>
        <trans-unit id="ed47c755eaa7b19095ecd45a3de07ddd5f8ca6ec" translate="yes" xml:space="preserve">
          <source>This method is extremely useful for mapping &amp;ldquo;global&amp;rdquo; logic for specific path prefixes or arbitrary matches. For example, if you placed the following route at the top of all other route definitions, it would require that all routes from that point on would require authentication, and automatically load a user. Keep in mind that these callbacks do not have to act as end points; &lt;code&gt;loadUser&lt;/code&gt; can perform a task, then call &lt;code&gt;next()&lt;/code&gt; to continue matching subsequent routes.</source>
          <target state="translated">该方法对于映射&amp;ldquo;全局&amp;rdquo;逻辑以获取特定的路径前缀或任意匹配项非常有用。例如，如果将以下路由放在所有其他路由定义的顶部，则将要求从该点开始的所有路由都需要身份验证，并自动加载用户。请记住，这些回调不必充当端点。 &lt;code&gt;loadUser&lt;/code&gt; 可以执行任务，然后调用 &lt;code&gt;next()&lt;/code&gt; 继续匹配后续路由。</target>
        </trans-unit>
        <trans-unit id="838e5b05a805cfc293c010b0fc4905f0f167264e" translate="yes" xml:space="preserve">
          <source>This method is just like the &lt;code&gt;router.METHOD()&lt;/code&gt; methods, except that it matches all HTTP methods (verbs).</source>
          <target state="translated">此方法类似于 &lt;code&gt;router.METHOD()&lt;/code&gt; 方法，除了它与所有HTTP方法（动词）匹配之外。</target>
        </trans-unit>
        <trans-unit id="c90c875b757be730a3772a4a27392d7b09e9be19" translate="yes" xml:space="preserve">
          <source>This method is like the standard &lt;a href=&quot;#app.METHOD&quot;&gt;app.METHOD()&lt;/a&gt; methods, except it matches all HTTP verbs.</source>
          <target state="translated">此方法类似于标准的&lt;a href=&quot;#app.METHOD&quot;&gt;app.METHOD（）&lt;/a&gt;方法，但它匹配所有HTTP动词。</target>
        </trans-unit>
        <trans-unit id="cf56cb52c0c76c96a67f1f83f961a6e9c0378047" translate="yes" xml:space="preserve">
          <source>This method is similar to &lt;a href=&quot;#app.use&quot;&gt;app.use()&lt;/a&gt;. A simple example and use case is described below. See &lt;a href=&quot;#app.use&quot;&gt;app.use()&lt;/a&gt; for more information.</source>
          <target state="translated">此方法类似于&lt;a href=&quot;#app.use&quot;&gt;app.use（）&lt;/a&gt;。下面描述了一个简单的示例和用例。有关更多信息，请参见&lt;a href=&quot;#app.use&quot;&gt;app.use（）&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="00076ed1b4d5e7715ecdc20b994b41c690eae8d3" translate="yes" xml:space="preserve">
          <source>This method now enforces asynchronous behavior for all view engines, avoiding bugs caused by view engines that had a synchronous implementation and that violated the recommended interface.</source>
          <target state="translated">该方法现在为所有的视图引擎强制执行异步行为,避免了因视图引擎具有同步实现而违反推荐接口而引起的错误。</target>
        </trans-unit>
        <trans-unit id="6b1a6c0a79f9dcc510d5992813a536810c87f5c8" translate="yes" xml:space="preserve">
          <source>This method performs many useful tasks for simple non-streaming responses: For example, it automatically assigns the &lt;code&gt;Content-Length&lt;/code&gt; HTTP response header field (unless previously defined) and provides automatic HEAD and HTTP cache freshness support.</source>
          <target state="translated">此方法对简单的非流式响应执行许多有用的任务：例如，它自动分配 &lt;code&gt;Content-Length&lt;/code&gt; HTTP响应标头字段（除非先前定义），并提供自动的HEAD和HTTP缓存新鲜度支持。</target>
        </trans-unit>
        <trans-unit id="49116002c4bfce97e880a28a9dd031fcfa18e6e9" translate="yes" xml:space="preserve">
          <source>This middleware is available in Express v4.16.0 onwards.</source>
          <target state="translated">这个中间件可以在Express v4.16.0以后使用。</target>
        </trans-unit>
        <trans-unit id="aa2da2c1b6a71e94152ca6eecf6535dc7cbc2dbe" translate="yes" xml:space="preserve">
          <source>This middleware is available in Express v4.17.0 onwards.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b56e031c5c7795accd8ffe8cb03cb1c8fe9da732" translate="yes" xml:space="preserve">
          <source>This option allows to choose between parsing the URL-encoded data with the &lt;code&gt;querystring&lt;/code&gt; library (when &lt;code&gt;false&lt;/code&gt;) or the &lt;code&gt;qs&lt;/code&gt; library (when &lt;code&gt;true&lt;/code&gt;). The &amp;ldquo;extended&amp;rdquo; syntax allows for rich objects and arrays to be encoded into the URL-encoded format, allowing for a JSON-like experience with URL-encoded. For more information, please &lt;a href=&quot;https://www.npmjs.org/package/qs#readme&quot;&gt;see the qs library&lt;/a&gt;.</source>
          <target state="translated">此选项允许您在使用 &lt;code&gt;querystring&lt;/code&gt; 库（当 &lt;code&gt;false&lt;/code&gt; ）或 &lt;code&gt;qs&lt;/code&gt; 库（当 &lt;code&gt;true&lt;/code&gt; ）解析URL编码的数据之间进行选择。&amp;ldquo;扩展&amp;rdquo;语法允许将丰富的对象和数组编码为URL编码格式，从而使URL编码具有类似JSON的体验。有关更多信息，请&lt;a href=&quot;https://www.npmjs.org/package/qs#readme&quot;&gt;参见qs库&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="b2a0c97a43cb8e3078822cc255b6382a146c2671" translate="yes" xml:space="preserve">
          <source>This option controls the maximum number of parameters that are allowed in the URL-encoded data. If a request contains more parameters than this value, an error will be raised.</source>
          <target state="translated">这个选项控制URL编码数据中允许的最大参数数量。如果请求中包含的参数超过这个值,就会出现错误。</target>
        </trans-unit>
        <trans-unit id="6a3efb98930e470bc9733bc6f117eafc912ee9e2" translate="yes" xml:space="preserve">
          <source>This option, if supplied, is called as &lt;code&gt;verify(req, res, buf, encoding)&lt;/code&gt;, where &lt;code&gt;buf&lt;/code&gt; is a &lt;code&gt;Buffer&lt;/code&gt; of the raw request body and &lt;code&gt;encoding&lt;/code&gt; is the encoding of the request. The parsing can be aborted by throwing an error.</source>
          <target state="translated">如果提供此选项，则称为 &lt;code&gt;verify(req, res, buf, encoding)&lt;/code&gt; ，其中 &lt;code&gt;buf&lt;/code&gt; 是原始请求主体的 &lt;code&gt;Buffer&lt;/code&gt; ，而 &lt;code&gt;encoding&lt;/code&gt; 是请求的编码。抛出错误可以中止解析。</target>
        </trans-unit>
        <trans-unit id="a6ceb5ff97eef7c446d8730c4e50f1c21c7aed11" translate="yes" xml:space="preserve">
          <source>This page contains list of examples using Express.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f9c46f7597dea04c7cf428ffaf0e872629e37804" translate="yes" xml:space="preserve">
          <source>This potentially confusing and dangerous method of retrieving form data has been removed. You will now need to specifically look for the submitted parameter name in the &lt;code&gt;req.params&lt;/code&gt;, &lt;code&gt;req.body&lt;/code&gt;, or &lt;code&gt;req.query&lt;/code&gt; object.</source>
          <target state="translated">检索表单数据的这种潜在的混乱且危险的方法已被删除。现在，您将需要在 &lt;code&gt;req.params&lt;/code&gt; ， &lt;code&gt;req.body&lt;/code&gt; 或 &lt;code&gt;req.query&lt;/code&gt; 对象中专门查找提交的参数名称。</target>
        </trans-unit>
        <trans-unit id="0c30d6396be263e9272d62be76ccbb0f7258e52a" translate="yes" xml:space="preserve">
          <source>This property holds a reference to the instance of the Express application that is using the middleware.</source>
          <target state="translated">此属性持有对使用中间件的 Express 应用程序实例的引用。</target>
        </trans-unit>
        <trans-unit id="4639436b062fc694302176c104048361b091b002" translate="yes" xml:space="preserve">
          <source>This property is an object containing a property for each query string parameter in the route. If there is no query string, it is the empty object, &lt;code&gt;{}&lt;/code&gt;.</source>
          <target state="translated">此属性是一个对象，其中包含路由中每个查询字符串参数的属性。如果没有查询字符串，则为空对象 &lt;code&gt;{}&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="aed1fb50e2cca83bed4859c329c5152816e5862f" translate="yes" xml:space="preserve">
          <source>This property is an object containing a property for each query string parameter in the route. When &lt;a href=&quot;#app.settings.table&quot;&gt;query parser&lt;/a&gt; is set to disabled, it is an empty object &lt;code&gt;{}&lt;/code&gt;, otherwise it is the result of the configured query parser.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="94b585f1ffae7c231195df5813092e052b4259dc" translate="yes" xml:space="preserve">
          <source>This property is an object containing properties mapped to the &lt;a href=&quot;guide/routing#route-parameters&quot;&gt;named route &amp;ldquo;parameters&amp;rdquo;&lt;/a&gt;. For example, if you have the route &lt;code&gt;/user/:name&lt;/code&gt;, then the &amp;ldquo;name&amp;rdquo; property is available as &lt;code&gt;req.params.name&lt;/code&gt;. This object defaults to &lt;code&gt;{}&lt;/code&gt;.</source>
          <target state="translated">此属性是一个对象，其中包含映射到&lt;a href=&quot;guide/routing#route-parameters&quot;&gt;命名路由&amp;ldquo; parameters&amp;rdquo;的&lt;/a&gt;属性。例如，如果您具有路由 &lt;code&gt;/user/:name&lt;/code&gt; ，则&amp;ldquo; name&amp;rdquo;属性可以作为 &lt;code&gt;req.params.name&lt;/code&gt; 使用。该对象默认为 &lt;code&gt;{}&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="1044dd424ff21196f0650d68bea91e62c630e482" translate="yes" xml:space="preserve">
          <source>This property is much like &lt;code&gt;req.url&lt;/code&gt;; however, it retains the original request URL, allowing you to rewrite &lt;code&gt;req.url&lt;/code&gt; freely for internal routing purposes. For example, the &amp;ldquo;mounting&amp;rdquo; feature of &lt;a href=&quot;#app.use&quot;&gt;app.use()&lt;/a&gt; will rewrite &lt;code&gt;req.url&lt;/code&gt; to strip the mount point.</source>
          <target state="translated">这个属性很像 &lt;code&gt;req.url&lt;/code&gt; ; 但是，它保留了原始请求URL，允许您自由重写 &lt;code&gt;req.url&lt;/code&gt; 以进行内部路由。例如，&lt;a href=&quot;#app.use&quot;&gt;app.use（）&lt;/a&gt;的&amp;ldquo;安装&amp;rdquo;功能将重写 &lt;code&gt;req.url&lt;/code&gt; 以剥离安装点。</target>
        </trans-unit>
        <trans-unit id="c0289192a83596cb79a0734069985a1b8903bac8" translate="yes" xml:space="preserve">
          <source>This property is useful for exposing request-level information such as the request path name, authenticated user, user settings, and so on.</source>
          <target state="translated">这个属性对于暴露请求级信息很有用,比如请求路径名、认证用户、用户设置等。</target>
        </trans-unit>
        <trans-unit id="3abc0f802a527da9953fd7611de9ae3cf7df10a0" translate="yes" xml:space="preserve">
          <source>This route path will match &lt;code&gt;/abe&lt;/code&gt; and &lt;code&gt;/abcde&lt;/code&gt;.</source>
          <target state="translated">此路由路径将匹配 &lt;code&gt;/abe&lt;/code&gt; 和 &lt;code&gt;/abcde&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="60052f35a103754e81aa05e013591352e892bb44" translate="yes" xml:space="preserve">
          <source>This route path will match &lt;code&gt;abcd&lt;/code&gt;, &lt;code&gt;abbcd&lt;/code&gt;, &lt;code&gt;abbbcd&lt;/code&gt;, and so on.</source>
          <target state="translated">此路由路径将匹配 &lt;code&gt;abcd&lt;/code&gt; ， &lt;code&gt;abbcd&lt;/code&gt; ， &lt;code&gt;abbbcd&lt;/code&gt; 等。</target>
        </trans-unit>
        <trans-unit id="f1ff5af1cd371d50fc340a9f4c567cc1c94a391d" translate="yes" xml:space="preserve">
          <source>This route path will match &lt;code&gt;abcd&lt;/code&gt;, &lt;code&gt;abxcd&lt;/code&gt;, &lt;code&gt;abRANDOMcd&lt;/code&gt;, &lt;code&gt;ab123cd&lt;/code&gt;, and so on.</source>
          <target state="translated">此路由路径将匹配 &lt;code&gt;abcd&lt;/code&gt; ， &lt;code&gt;abxcd&lt;/code&gt; ， &lt;code&gt;abRANDOMcd&lt;/code&gt; ， &lt;code&gt;ab123cd&lt;/code&gt; 等。</target>
        </trans-unit>
        <trans-unit id="9e0f177459664773b537fa28909645541fe435b4" translate="yes" xml:space="preserve">
          <source>This route path will match &lt;code&gt;acd&lt;/code&gt; and &lt;code&gt;abcd&lt;/code&gt;.</source>
          <target state="translated">此路由路径将匹配 &lt;code&gt;acd&lt;/code&gt; 和 &lt;code&gt;abcd&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="3f073528ec1f551c90a8b35f9a8eaa3ac640a80d" translate="yes" xml:space="preserve">
          <source>This route path will match &lt;code&gt;butterfly&lt;/code&gt; and &lt;code&gt;dragonfly&lt;/code&gt;, but not &lt;code&gt;butterflyman&lt;/code&gt;, &lt;code&gt;dragonflyman&lt;/code&gt;, and so on.</source>
          <target state="translated">这条路线的路径将匹配 &lt;code&gt;butterfly&lt;/code&gt; 和 &lt;code&gt;dragonfly&lt;/code&gt; ，但不 &lt;code&gt;butterflyman&lt;/code&gt; ， &lt;code&gt;dragonflyman&lt;/code&gt; ，等等。</target>
        </trans-unit>
        <trans-unit id="2fbd74a88b38190f0ef1d961e49022795a361e44" translate="yes" xml:space="preserve">
          <source>This route path will match anything with an &amp;ldquo;a&amp;rdquo; in it.</source>
          <target state="translated">此路由路径将匹配其中带有&amp;ldquo; a&amp;rdquo;的任何内容。</target>
        </trans-unit>
        <trans-unit id="bdfcc9e95077df3c0fc6c31f30437e8b2663d6d1" translate="yes" xml:space="preserve">
          <source>This route path will match requests to &lt;code&gt;/about&lt;/code&gt;.</source>
          <target state="translated">此路由路径会将请求匹配到 &lt;code&gt;/about&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="58387bf487afa1113753e71a0cae2b0212feacf2" translate="yes" xml:space="preserve">
          <source>This route path will match requests to &lt;code&gt;/random.text&lt;/code&gt;.</source>
          <target state="translated">该路由路径会将请求匹配到 &lt;code&gt;/random.text&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="62a598c25ea684b94de3293e017b1e83e69a0c04" translate="yes" xml:space="preserve">
          <source>This route path will match requests to the root route, &lt;code&gt;/&lt;/code&gt;.</source>
          <target state="translated">此路由路径会将请求匹配到根路由 &lt;code&gt;/&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="7368005de74370f3529bb041a70e104f947f5f30" translate="yes" xml:space="preserve">
          <source>This should not affect your code if you follow the Express 4 documentation of &lt;a href=&quot;../index#app.param&quot;&gt;app.param&lt;/a&gt;, as it makes no mention of the leading colon.</source>
          <target state="translated">如果您遵循&lt;a href=&quot;../index#app.param&quot;&gt;app.param&lt;/a&gt;的Express 4文档，这不会影响您的代码，因为它没有提到前导冒号。</target>
        </trans-unit>
        <trans-unit id="fe79a028de6351d5457903e4ee44238b7ce90b8f" translate="yes" xml:space="preserve">
          <source>This topic clearly falls into the &amp;ldquo;devops&amp;rdquo; world, spanning both traditional development and operations. Accordingly, the information is divided into two parts:</source>
          <target state="translated">这个主题显然属于&amp;ldquo;发展&amp;rdquo;世界，涵盖了传统的开发和运营。因此，信息分为两个部分：</target>
        </trans-unit>
        <trans-unit id="4ec4fd32478986815d2f0fa47a088b06e395b391" translate="yes" xml:space="preserve">
          <source>This tutorial assumes that an instance of &lt;code&gt;express&lt;/code&gt; named &lt;code&gt;app&lt;/code&gt; is created and the server is running. If you are not familiar with creating an app and starting it, see the &lt;a href=&quot;hello-world&quot;&gt;Hello world example&lt;/a&gt;.</source>
          <target state="translated">本教程假定已创建一个名为 &lt;code&gt;app&lt;/code&gt; 的 &lt;code&gt;express&lt;/code&gt; 实例，并且服务器正在运行。如果您不熟悉创建和启动应用程序，请参阅&lt;a href=&quot;hello-world&quot;&gt;Hello world示例&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="d01ef283da347650a3411bb7e58d7d617b48d0d9" translate="yes" xml:space="preserve">
          <source>This will match paths starting with `/abc` and `/xyz`:</source>
          <target state="translated">这将匹配以`/abc`和`/xyz`开头的路径。</target>
        </trans-unit>
        <trans-unit id="f4b781798be2a4f0d248c0a4ba715440d0a3f01f" translate="yes" xml:space="preserve">
          <source>This will match paths starting with `/abcd` and `/abd`:</source>
          <target state="translated">这将匹配以`/abcd`和`/abd`开头的路径。</target>
        </trans-unit>
        <trans-unit id="18bfff599c45ed15caa41cf6f665f414c21cedbe" translate="yes" xml:space="preserve">
          <source>This will match paths starting with `/abcd`, `/abbcd`, `/abbbbbcd`, and so on:</source>
          <target state="translated">这将匹配以`/abcd`、`/abbcd`、`/abbbbbcd`等开头的路径。</target>
        </trans-unit>
        <trans-unit id="50988b7ce5ab1e9d8a8a7408d1b628bc70fd1c11" translate="yes" xml:space="preserve">
          <source>This will match paths starting with `/abcd`, `/abxcd`, `/abFOOcd`, `/abbArcd`, and so on:</source>
          <target state="translated">这将匹配以`/abcd`、`/abxcd`、`/abFOOcd`、`/abbArcd`等开头的路径。</target>
        </trans-unit>
        <trans-unit id="637082278ad75872c412668b93aecbf4244b500e" translate="yes" xml:space="preserve">
          <source>This will match paths starting with `/abcd`, `/xyza`, `/lmn`, and `/pqr`:</source>
          <target state="translated">这将匹配以`/abcd`、`/xyza`、`/lmn`和`/pqr`开头的路径。</target>
        </trans-unit>
        <trans-unit id="1070fae6f19aa324457a0bc087a38ad9c08e740b" translate="yes" xml:space="preserve">
          <source>This will match paths starting with `/abcd`:</source>
          <target state="translated">这将匹配以`/abcd`开头的路径。</target>
        </trans-unit>
        <trans-unit id="2462d9dc5f5bcd31e6573510daecb10e95bf162e" translate="yes" xml:space="preserve">
          <source>This will match paths starting with `/ad` and `/abcd`:</source>
          <target state="translated">这将匹配以`/ad`和`/abcd`开头的路径。</target>
        </trans-unit>
        <trans-unit id="9d1c503406001fbdd2189da2b95349ba7b42b622" translate="yes" xml:space="preserve">
          <source>To avoid this problem, use generic cookie names; for example using &lt;a href=&quot;https://www.npmjs.com/package/express-session&quot;&gt;express-session&lt;/a&gt; middleware:</source>
          <target state="translated">为避免此问题，请使用通用cookie名称。例如，使用&lt;a href=&quot;https://www.npmjs.com/package/express-session&quot;&gt;快速会话&lt;/a&gt;中间件：</target>
        </trans-unit>
        <trans-unit id="70de49e4beafd96bc96b83e88468c789f24fc8de" translate="yes" xml:space="preserve">
          <source>To create a virtual path prefix (where the path does not actually exist in the file system) for files that are served by the &lt;code&gt;express.static&lt;/code&gt; function, &lt;a href=&quot;../index#app.use&quot;&gt;specify a mount path&lt;/a&gt; for the static directory, as shown below:</source>
          <target state="translated">要为 &lt;code&gt;express.static&lt;/code&gt; 函数提供服务的文件创建虚拟路径前缀（文件系统中实际上不存在该路径），请为静态目录&lt;a href=&quot;../index#app.use&quot;&gt;指定安装路径&lt;/a&gt;，如下所示：</target>
        </trans-unit>
        <trans-unit id="a0b534121b9c7593a6d1cfea749627d520a71e95" translate="yes" xml:space="preserve">
          <source>To define routes with route parameters, simply specify the route parameters in the path of the route as shown below.</source>
          <target state="translated">要定义带有路由参数的路由,只需在路由的路径中指定路由参数,如下图所示。</target>
        </trans-unit>
        <trans-unit id="764c26101974c824af2f1da1b98284a5b20afc68" translate="yes" xml:space="preserve">
          <source>To enable cluster mode, start your application like so:</source>
          <target state="translated">要启用集群模式,请像这样启动您的应用程序。</target>
        </trans-unit>
        <trans-unit id="0f96dd4baffb52d50feb8c73808a2be59f65dbc4" translate="yes" xml:space="preserve">
          <source>To ensure cookies don&amp;rsquo;t open your app to exploits, don&amp;rsquo;t use the default session cookie name and set cookie security options appropriately.</source>
          <target state="translated">为确保cookie不会打开您的应用程序以进行利用，请不要使用默认的会话cookie名称，并适当地设置cookie安全性选项。</target>
        </trans-unit>
        <trans-unit id="790e51c14fc23369f47b40e4a8ffc841bb32158c" translate="yes" xml:space="preserve">
          <source>To ensure you handle all exceptions, use the following techniques:</source>
          <target state="translated">为了确保你处理所有的异常,请使用以下技术。</target>
        </trans-unit>
        <trans-unit id="41609a57e3ab7975f4c451831acbc047c0f0d51b" translate="yes" xml:space="preserve">
          <source>To get rid of the &lt;code&gt;www&lt;/code&gt; directory and keep things the &amp;ldquo;Express 3 way&amp;rdquo;, delete the line that says &lt;code&gt;module.exports = app;&lt;/code&gt; at the end of the &lt;code&gt;app.js&lt;/code&gt; file, then paste the following code in its place:</source>
          <target state="translated">要摆脱 &lt;code&gt;www&lt;/code&gt; 目录并使东西保持&amp;ldquo; Express 3方式&amp;rdquo;，请删除显示为 &lt;code&gt;module.exports = app;&lt;/code&gt; 的行。在 &lt;code&gt;app.js&lt;/code&gt; 文件的末尾，然后将以下代码粘贴到其位置：</target>
        </trans-unit>
        <trans-unit id="c1beb29a2014abbed3c385925bdbf252eca04a20" translate="yes" xml:space="preserve">
          <source>To have more control over the exact string that can be matched by a route parameter, you can append a regular expression in parentheses (&lt;code&gt;()&lt;/code&gt;):</source>
          <target state="translated">为了更好地控制可以由route参数匹配的确切字符串，可以在括号（ &lt;code&gt;()&lt;/code&gt; ）中附加一个正则表达式：</target>
        </trans-unit>
        <trans-unit id="e3a80b2ecde7d262e30f3f506adb50320479a603" translate="yes" xml:space="preserve">
          <source>To install Express temporarily and not add it to the dependencies list:</source>
          <target state="translated">暂时安装Express,不将其添加到依赖列表中。</target>
        </trans-unit>
        <trans-unit id="800782a4da9a7253ba3eb71924b97cc3c7c9cb09" translate="yes" xml:space="preserve">
          <source>To install StrongLoop PM as a systemd service:</source>
          <target state="translated">将StrongLoop PM安装为系统服务。</target>
        </trans-unit>
        <trans-unit id="0a0b9acbd1f9e6bc422b6fd6713f7383d422aad4" translate="yes" xml:space="preserve">
          <source>To install StrongLoop PM as an Upstart 1.4 service:</source>
          <target state="translated">将 StrongLoop PM 安装为 Upstart 1.4 服务。</target>
        </trans-unit>
        <trans-unit id="296a4bfe6e60b561d69a5e0bb6146cfa46c308e8" translate="yes" xml:space="preserve">
          <source>To install the latest alpha and to preview Express 5, enter the following command in your application root directory:</source>
          <target state="translated">要安装最新的alpha并预览Express 5,请在您的应用程序根目录中输入以下命令。</target>
        </trans-unit>
        <trans-unit id="92d0608cd352d5c2fc87e0effe600a7a27ed50be" translate="yes" xml:space="preserve">
          <source>To learn more about how template engines work in Express, see: &lt;a href=&quot;../advanced/developing-template-engines&quot;&gt;&amp;ldquo;Developing template engines for Express&amp;rdquo;&lt;/a&gt;.</source>
          <target state="translated">要了解有关模板引擎如何在Express中工作的更多信息，请参见：&lt;a href=&quot;../advanced/developing-template-engines&quot;&gt;&amp;ldquo;为Express开发模板引擎&amp;rdquo;&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="c80176cd042205531cb13f4f13f0e26b951ab32e" translate="yes" xml:space="preserve">
          <source>To load the middleware function, call &lt;code&gt;app.use()&lt;/code&gt;, specifying the middleware function. For example, the following code loads the &lt;code&gt;myLogger&lt;/code&gt; middleware function before the route to the root path (/).</source>
          <target state="translated">要加载中间件函数，请调用 &lt;code&gt;app.use()&lt;/code&gt; ，指定中间件函数。例如，以下代码在路由到根路径（/）之前加载 &lt;code&gt;myLogger&lt;/code&gt; 中间件函数。</target>
        </trans-unit>
        <trans-unit id="6662fbd38726ccc12e34e964bac507fe1bcba315" translate="yes" xml:space="preserve">
          <source>To remove an app from PM2&amp;rsquo;s registry:</source>
          <target state="translated">要从PM2的注册表中删除应用程序，请执行以下操作：</target>
        </trans-unit>
        <trans-unit id="2564c5b3f834d0b8f7af686a29a177bc783fa61d" translate="yes" xml:space="preserve">
          <source>To remove an app from management:</source>
          <target state="translated">要从管理中删除一个应用程序。</target>
        </trans-unit>
        <trans-unit id="d5bc3d4f8d4358cbbff256367a0f328d858c7959" translate="yes" xml:space="preserve">
          <source>To render template files, set the following &lt;a href=&quot;../index#app.set&quot;&gt;application setting properties&lt;/a&gt;, set in &lt;code&gt;app.js&lt;/code&gt; in the default app created by the generator:</source>
          <target state="translated">要渲染模板文件，请设置以下&lt;a href=&quot;../index#app.set&quot;&gt;应用程序设置属性&lt;/a&gt;，在生成器创建的默认应用程序的 &lt;code&gt;app.js&lt;/code&gt; 中进行设置：</target>
        </trans-unit>
        <trans-unit id="7d0f6cf6c5f8b764d50004f97817954f3166b8f0" translate="yes" xml:space="preserve">
          <source>To route methods that translate to invalid JavaScript variable names, use the bracket notation. For example, &lt;code&gt;app['m-search']('/', function ...&lt;/code&gt;.</source>
          <target state="translated">要路由转换为无效JavaScript变量名称的方法，请使用方括号表示法。例如， &lt;code&gt;app['m-search']('/', function ...&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="1d7f7e3a4de3894abfdc8caee99a8babab1d31c1" translate="yes" xml:space="preserve">
          <source>To run the script so that it is attached to the terminal, omit &lt;code&gt;start&lt;/code&gt;:</source>
          <target state="translated">要运行脚本以便将其附加到终端，请省略 &lt;code&gt;start&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="552cb19dd03b77d93dc0d30ab216d99368217be4" translate="yes" xml:space="preserve">
          <source>To see all the internal logs used in Express, set the &lt;code&gt;DEBUG&lt;/code&gt; environment variable to &lt;code&gt;express:*&lt;/code&gt; when launching your app.</source>
          <target state="translated">要查看Express中使用的所有内部日志，请在启动应用程序时将 &lt;code&gt;DEBUG&lt;/code&gt; 环境变量设置为 &lt;code&gt;express:*&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="c89a30d4aa5c388c56654c4b5aaf14746777f571" translate="yes" xml:space="preserve">
          <source>To see the logs only from the router implementation set the value of &lt;code&gt;DEBUG&lt;/code&gt; to &lt;code&gt;express:router&lt;/code&gt;. Likewise, to see logs only from the application implementation set the value of &lt;code&gt;DEBUG&lt;/code&gt; to &lt;code&gt;express:application&lt;/code&gt;, and so on.</source>
          <target state="translated">要仅查看来自路由器实现的日志，请将 &lt;code&gt;DEBUG&lt;/code&gt; 的值设置为 &lt;code&gt;express:router&lt;/code&gt; 。同样，要仅查看来自应用程序实现的日志，请将 &lt;code&gt;DEBUG&lt;/code&gt; 的值设置为 &lt;code&gt;express:application&lt;/code&gt; ，依此类推。</target>
        </trans-unit>
        <trans-unit id="db9d240c057bf8c5ec5baf7229fa37ab9ca10595" translate="yes" xml:space="preserve">
          <source>To serve static files such as images, CSS files, and JavaScript files, use the &lt;code&gt;express.static&lt;/code&gt; built-in middleware function in Express.</source>
          <target state="translated">要提供静态文件（例如图像，CSS文件和JavaScript文件），请使用Express中的 &lt;code&gt;express.static&lt;/code&gt; 内置中间件功能。</target>
        </trans-unit>
        <trans-unit id="ef0b3ce1769ca1c370ce68ad18599938d1dc28d2" translate="yes" xml:space="preserve">
          <source>To skip the rest of the middleware functions from a router middleware stack, call &lt;code&gt;next('route')&lt;/code&gt; to pass control to the next route. &lt;strong&gt;NOTE&lt;/strong&gt;: &lt;code&gt;next('route')&lt;/code&gt; will work only in middleware functions that were loaded by using the &lt;code&gt;app.METHOD()&lt;/code&gt; or &lt;code&gt;router.METHOD()&lt;/code&gt; functions.</source>
          <target state="translated">要从路由器中间件堆栈中跳过其余中间件功能，请调用 &lt;code&gt;next('route')&lt;/code&gt; 将控制权传递给下一条路由。&lt;strong&gt;注意&lt;/strong&gt;： &lt;code&gt;next('route')&lt;/code&gt; 仅在使用 &lt;code&gt;app.METHOD()&lt;/code&gt; 或 &lt;code&gt;router.METHOD()&lt;/code&gt; 函数加载的中间件函数中起作用。</target>
        </trans-unit>
        <trans-unit id="9d814e6b9633e4adf25443034eb37fa975c489ba" translate="yes" xml:space="preserve">
          <source>To skip the rest of the router&amp;rsquo;s middleware functions, call &lt;code&gt;next('router')&lt;/code&gt; to pass control back out of the router instance.</source>
          <target state="translated">要跳过路由器的其余中间件功能，请调用 &lt;code&gt;next('router')&lt;/code&gt; 将控制权转回路由器实例。</target>
        </trans-unit>
        <trans-unit id="cd544db021bd5efb6f3f66fe83d3d7692f80e2c9" translate="yes" xml:space="preserve">
          <source>To start a script, use the &lt;code&gt;forever start&lt;/code&gt; command and specify the path of the script:</source>
          <target state="translated">要启动脚本，请使用 &lt;code&gt;forever start&lt;/code&gt; 命令并指定脚本的路径：</target>
        </trans-unit>
        <trans-unit id="b352b5d51736731ab31821097fa398fcf08a1edc" translate="yes" xml:space="preserve">
          <source>To stop a script that was started by Forever use the &lt;code&gt;forever stop&lt;/code&gt; command and specify the process index (as listed by the &lt;code&gt;forever list&lt;/code&gt; command).</source>
          <target state="translated">要停止由Forever启动的脚本，请使用 &lt;code&gt;forever stop&lt;/code&gt; 命令并指定进程索引（由 &lt;code&gt;forever list&lt;/code&gt; 命令列出）。</target>
        </trans-unit>
        <trans-unit id="96fb7872e3f4f0c650e76255b149f3bbe68bc286" translate="yes" xml:space="preserve">
          <source>To stop all the scripts that were started by Forever:</source>
          <target state="translated">停止所有由Forever启动的脚本。</target>
        </trans-unit>
        <trans-unit id="ca5ca602885d49606c457d484a3453c0e237c01f" translate="yes" xml:space="preserve">
          <source>To use multiple static assets directories, call the &lt;code&gt;express.static&lt;/code&gt; middleware function multiple times:</source>
          <target state="translated">要使用多个静态资产目录，请多次调用 &lt;code&gt;express.static&lt;/code&gt; 中间件函数：</target>
        </trans-unit>
        <trans-unit id="e3f2d2b7be73a7a1089185b391b590a70ad34810" translate="yes" xml:space="preserve">
          <source>To view detailed information about an app:</source>
          <target state="translated">要查看应用程序的详细信息。</target>
        </trans-unit>
        <trans-unit id="77340b9ee0ab1bcf2bc1e395c700959f0330134e" translate="yes" xml:space="preserve">
          <source>To view the list of scripts that were started by Forever:</source>
          <target state="translated">要查看由Forever启动的脚本列表。</target>
        </trans-unit>
        <trans-unit id="813595a271258afbaaf456e614a60924bc719e61" translate="yes" xml:space="preserve">
          <source>Transfers the file at &lt;code&gt;path&lt;/code&gt; as an &amp;ldquo;attachment&amp;rdquo;. Typically, browsers will prompt the user for download. By default, the &lt;code&gt;Content-Disposition&lt;/code&gt; header &amp;ldquo;filename=&amp;rdquo; parameter is &lt;code&gt;path&lt;/code&gt; (this typically appears in the browser dialog). Override this default with the &lt;code&gt;filename&lt;/code&gt; parameter.</source>
          <target state="translated">以&amp;ldquo;附件&amp;rdquo;形式在 &lt;code&gt;path&lt;/code&gt; 处传输文件。通常，浏览器会提示用户下载。默认情况下， &lt;code&gt;Content-Disposition&lt;/code&gt; 标头的&amp;ldquo; filename =&amp;rdquo;参数是 &lt;code&gt;path&lt;/code&gt; （通常显示在浏览器对话框中）。使用 &lt;code&gt;filename&lt;/code&gt; 参数覆盖此默认值。</target>
        </trans-unit>
        <trans-unit id="b1110c972c4b1318fb6f953698f8f57f1408e54f" translate="yes" xml:space="preserve">
          <source>Transfers the file at the given &lt;code&gt;path&lt;/code&gt;. Sets the &lt;code&gt;Content-Type&lt;/code&gt; response HTTP header field based on the filename&amp;rsquo;s extension. Unless the &lt;code&gt;root&lt;/code&gt; option is set in the options object, &lt;code&gt;path&lt;/code&gt; must be an absolute path to the file.</source>
          <target state="translated">在给定 &lt;code&gt;path&lt;/code&gt; 传输文件。根据文件名的扩展名设置 &lt;code&gt;Content-Type&lt;/code&gt; 响应HTTP标头字段。除非在options对象中设置了 &lt;code&gt;root&lt;/code&gt; 选项，否则 &lt;code&gt;path&lt;/code&gt; 必须是文件的绝对路径。</target>
        </trans-unit>
        <trans-unit id="0e32a089aa2349ed04cb819b16b721bcf1ec543a" translate="yes" xml:space="preserve">
          <source>Trust the</source>
          <target state="translated">信任</target>
        </trans-unit>
        <trans-unit id="8ba4c13364dc9fbd26f7d827764a19c0630616ba" translate="yes" xml:space="preserve">
          <source>Trust the &lt;code&gt;n&lt;/code&gt;th hop from the front-facing proxy server as the client.</source>
          <target state="translated">信任来自前端代理服务器的第 &lt;code&gt;n&lt;/code&gt; 个跃点作为客户端。</target>
        </trans-unit>
        <trans-unit id="d8e592f92fad96eb3037716c43aee515afb5488e" translate="yes" xml:space="preserve">
          <source>Try-catch is a JavaScript language construct that you can use to catch exceptions in synchronous code. Use try-catch, for example, to handle JSON parsing errors as shown below.</source>
          <target state="translated">try-catch是一种JavaScript语言结构,你可以用它来捕捉同步代码中的异常。例如,使用try-catch来处理JSON解析错误,如下图所示。</target>
        </trans-unit>
        <trans-unit id="3deb7456519697ecf4eefc455516c969a3681bae" translate="yes" xml:space="preserve">
          <source>Type</source>
          <target state="translated">Type</target>
        </trans-unit>
        <trans-unit id="7a82c5ffc33c76a2d189706604a691cc757084b7" translate="yes" xml:space="preserve">
          <source>Unify multiple StrongLoop PMs to a distributed microservices runtime that is managed from Arc.</source>
          <target state="translated">将多个StrongLoop PM统一到一个分布式微服务运行时,由Arc管理。</target>
        </trans-unit>
        <trans-unit id="be91ee2527adb4d5295a14e8f4c70d557c9ee45d" translate="yes" xml:space="preserve">
          <source>Unless you need to work directly with the &lt;code&gt;http&lt;/code&gt; module (socket.io/SPDY/HTTPS), loading it is not required, and the app can be simply started this way:</source>
          <target state="translated">除非您需要直接使用 &lt;code&gt;http&lt;/code&gt; 模块（socket.io/SPDY/HTTPS），否则不需要加载它，并且可以通过以下方式简单地启动该应用程序：</target>
        </trans-unit>
        <trans-unit id="f85371579c00ca2ba8a0632fdb6d0f5c2ed67fc1" translate="yes" xml:space="preserve">
          <source>Unlike &lt;code&gt;app.param()&lt;/code&gt;, &lt;code&gt;router.param()&lt;/code&gt; does not accept an array of route parameters.</source>
          <target state="translated">与 &lt;code&gt;app.param()&lt;/code&gt; 不同， &lt;code&gt;router.param()&lt;/code&gt; 不接受路由参数数组。</target>
        </trans-unit>
        <trans-unit id="eb3720f042ef2dc469a062002b304ed3f943018a" translate="yes" xml:space="preserve">
          <source>Upgrading to the Express 4 app generator</source>
          <target state="translated">升级到快4应用生成器</target>
        </trans-unit>
        <trans-unit id="9100b7ce2f64a70e8a1c5883615a9f34edb2815c" translate="yes" xml:space="preserve">
          <source>Upstart</source>
          <target state="translated">Upstart</target>
        </trans-unit>
        <trans-unit id="0d84ca8bcef7004ca57c061fb2af74408a7daa97" translate="yes" xml:space="preserve">
          <source>Upstart is a system tool available on many Linux distributions for starting tasks and services during system startup, stopping them during shutdown, and supervising them. You can configure your Express app or process manager as a service and then Upstart will automatically restart it when it crashes.</source>
          <target state="translated">Upstart是许多Linux发行版上可用的系统工具,用于在系统启动时启动任务和服务,在关机时停止它们,并监督它们。您可以将您的Express应用程序或进程管理器配置为服务,然后Upstart会在它崩溃时自动重新启动它。</target>
        </trans-unit>
        <trans-unit id="0bb18642b70b9f8a9c12ccf39487328f306b8e19" translate="yes" xml:space="preserve">
          <source>Usage</source>
          <target state="translated">Usage</target>
        </trans-unit>
        <trans-unit id="92953bf89f16bbc8d0777a585a83944c0a9331ee" translate="yes" xml:space="preserve">
          <source>Use &lt;a href=&quot;https://www.npmjs.com/package/csurf&quot;&gt;csurf&lt;/a&gt; middleware to protect against cross-site request forgery (CSRF).</source>
          <target state="translated">使用&lt;a href=&quot;https://www.npmjs.com/package/csurf&quot;&gt;csurf&lt;/a&gt;中间件来防止跨站点请求伪造（CSRF）。</target>
        </trans-unit>
        <trans-unit id="029916f122cc122d4922df388d06b3723375f842" translate="yes" xml:space="preserve">
          <source>Use &lt;a href=&quot;https://www.npmjs.com/package/safe-regex&quot;&gt;safe-regex&lt;/a&gt; to ensure your regular expressions are not susceptible to &lt;a href=&quot;https://www.owasp.org/index.php/Regular_expression_Denial_of_Service_-_ReDoS&quot;&gt;regular expression denial of service&lt;/a&gt; attacks.</source>
          <target state="translated">使用&lt;a href=&quot;https://www.npmjs.com/package/safe-regex&quot;&gt;安全正则表达式&lt;/a&gt;可确保您的正则表达式不受&lt;a href=&quot;https://www.owasp.org/index.php/Regular_expression_Denial_of_Service_-_ReDoS&quot;&gt;正则表达式拒绝服务&lt;/a&gt;攻击的影响。</target>
        </trans-unit>
        <trans-unit id="ec7a61534f1816ead22365bba6458427adc90f3c" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;false&lt;/code&gt; if you have mounted this middleware at a path designed to be strictly a single file system directory, which allows for short-circuiting 404s for less overhead. This middleware will also reply to all methods.</source>
          <target state="translated">如果已将此中间件安装在严格设计为单个文件系统目录的路径上，则使用 &lt;code&gt;false&lt;/code&gt; ，这可以使404短路以减少开销。该中间件还将答复所有方法。</target>
        </trans-unit>
        <trans-unit id="c513011c4f6c45303d53f25059cbea71a137c8ab" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;req.accepts()&lt;/code&gt;, &lt;code&gt;req.acceptsEncodings()&lt;/code&gt;, &lt;code&gt;req.acceptsCharsets()&lt;/code&gt;, and &lt;code&gt;req.acceptsLanguages()&lt;/code&gt;.</source>
          <target state="translated">使用 &lt;code&gt;req.accepts()&lt;/code&gt; ， &lt;code&gt;req.acceptsEncodings()&lt;/code&gt; ， &lt;code&gt;req.acceptsCharsets()&lt;/code&gt; 和 &lt;code&gt;req.acceptsLanguages()&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="99aab5c9dce5ec98bf0489b75ecda59765fdb297" translate="yes" xml:space="preserve">
          <source>Use Helmet</source>
          <target state="translated">使用头盔</target>
        </trans-unit>
        <trans-unit id="f5c26334c3707c998f07f49984cc50ae8ba2df75" translate="yes" xml:space="preserve">
          <source>Use TLS</source>
          <target state="translated">使用TLS</target>
        </trans-unit>
        <trans-unit id="8ce0779b98259c382ad04f568518386e95df45bd" translate="yes" xml:space="preserve">
          <source>Use a caching server like &lt;a href=&quot;https://www.varnish-cache.org/&quot;&gt;Varnish&lt;/a&gt; or &lt;a href=&quot;https://www.nginx.com/resources/wiki/start/topics/examples/reverseproxycachingexample/&quot;&gt;Nginx&lt;/a&gt; (see also &lt;a href=&quot;https://serversforhackers.com/nginx-caching/&quot;&gt;Nginx Caching&lt;/a&gt;) to greatly improve the speed and performance of your app.</source>
          <target state="translated">使用&lt;a href=&quot;https://www.varnish-cache.org/&quot;&gt;Varnish&lt;/a&gt;或&lt;a href=&quot;https://www.nginx.com/resources/wiki/start/topics/examples/reverseproxycachingexample/&quot;&gt;Nginx之&lt;/a&gt;类的缓存服务器（另请参见&lt;a href=&quot;https://serversforhackers.com/nginx-caching/&quot;&gt;Nginx Caching&lt;/a&gt;）可以大大提高应用程序的速度和性能。</target>
        </trans-unit>
        <trans-unit id="edf6c7b3cd19181653c23de6840110ccdbe0d79d" translate="yes" xml:space="preserve">
          <source>Use a load balancer</source>
          <target state="translated">使用负载平衡器</target>
        </trans-unit>
        <trans-unit id="7acf259d66d15c7080bc5835b24d74a75ab53179" translate="yes" xml:space="preserve">
          <source>Use a process manager</source>
          <target state="translated">使用流程管理器</target>
        </trans-unit>
        <trans-unit id="d8c16b8ec94d201e75a5346f4cb14b0e1d2e2499" translate="yes" xml:space="preserve">
          <source>Use a reverse proxy</source>
          <target state="translated">使用反向代理</target>
        </trans-unit>
        <trans-unit id="2beaf7fd84f8ae48408301b6008ba574fa9c83a1" translate="yes" xml:space="preserve">
          <source>Use a tool such as &lt;a href=&quot;http://jshint.com/&quot;&gt;JSHint&lt;/a&gt; or &lt;a href=&quot;http://www.jslint.com/&quot;&gt;JSLint&lt;/a&gt; to help you find implicit exceptions like &lt;a href=&quot;http://www.jshint.com/docs/options/#undef&quot;&gt;reference errors on undefined variables&lt;/a&gt;.</source>
          <target state="translated">使用的工具，如&lt;a href=&quot;http://jshint.com/&quot;&gt;JSHint&lt;/a&gt;或&lt;a href=&quot;http://www.jslint.com/&quot;&gt;JSLint的&lt;/a&gt;帮你找到像隐含例外&lt;a href=&quot;http://www.jshint.com/docs/options/#undef&quot;&gt;未定义变量引用错误&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="86e8e9a32e6ad3c7570ff7b27af04d865718ba55" translate="yes" xml:space="preserve">
          <source>Use an array to group middleware logically. If you pass an array of middleware as the first or only middleware parameters, then you &lt;em&gt;must&lt;/em&gt; specify the mount path.</source>
          <target state="translated">使用数组对逻辑中间件进行分组。如果将中间件数组作为第一个或唯一的中间件参数，则&lt;em&gt;必须&lt;/em&gt;指定安装路径。</target>
        </trans-unit>
        <trans-unit id="27a741103afa3ffffd43676c4ac698704424f032" translate="yes" xml:space="preserve">
          <source>Use an init system</source>
          <target state="translated">使用init系统</target>
        </trans-unit>
        <trans-unit id="975a1cb62c4c0de841d4ba0e44fb702cff6b1937" translate="yes" xml:space="preserve">
          <source>Use cookies securely</source>
          <target state="translated">安全地使用cookies</target>
        </trans-unit>
        <trans-unit id="9a7d880256013e0fbc96622b6897da9ed70c2e59" translate="yes" xml:space="preserve">
          <source>Use gzip compression</source>
          <target state="translated">使用gzip压缩</target>
        </trans-unit>
        <trans-unit id="bf3ad30cb26ebd99be031d05deef7058432597bd" translate="yes" xml:space="preserve">
          <source>Use promises</source>
          <target state="translated">使用承诺</target>
        </trans-unit>
        <trans-unit id="c2eaf7dafcff98319621114957e9f32fc2b6b505" translate="yes" xml:space="preserve">
          <source>Use promises to avoid the overhead of the &lt;code&gt;try..catch&lt;/code&gt; block or when using functions that return promises. For example:</source>
          <target state="translated">使用promise可以避免 &lt;code&gt;try..catch&lt;/code&gt; 块的开销，或使用返回promise的函数时的开销。例如：</target>
        </trans-unit>
        <trans-unit id="ac06791a68881a1b554d195ce538cc4aa8d60dd7" translate="yes" xml:space="preserve">
          <source>Use the &lt;a href=&quot;https://nmap.org/&quot;&gt;nmap&lt;/a&gt; and &lt;a href=&quot;https://github.com/nabla-c0d3/sslyze&quot;&gt;sslyze&lt;/a&gt; tools to test the configuration of your SSL ciphers, keys, and renegotiation as well as the validity of your certificate.</source>
          <target state="translated">使用&lt;a href=&quot;https://nmap.org/&quot;&gt;nmap&lt;/a&gt;和&lt;a href=&quot;https://github.com/nabla-c0d3/sslyze&quot;&gt;sslyze&lt;/a&gt;工具测试SSL密码，密钥和重新协商的配置以及证书的有效性。</target>
        </trans-unit>
        <trans-unit id="402e2cebebb17d60701c9b4a2ec5aeca0353738a" translate="yes" xml:space="preserve">
          <source>Use the &lt;code&gt;app.engine(ext, callback)&lt;/code&gt; method to create your own template engine. &lt;code&gt;ext&lt;/code&gt; refers to the file extension, and &lt;code&gt;callback&lt;/code&gt; is the template engine function, which accepts the following items as parameters: the location of the file, the options object, and the callback function.</source>
          <target state="translated">使用 &lt;code&gt;app.engine(ext, callback)&lt;/code&gt; 方法创建您自己的模板引擎。 &lt;code&gt;ext&lt;/code&gt; 是文件扩展名， &lt;code&gt;callback&lt;/code&gt; 是模板引擎函数，它接受以下各项作为参数：文件的位置，options对象和callback函数。</target>
        </trans-unit>
        <trans-unit id="10a48ab614a8bd860342c4a69066fc9f8ce06896" translate="yes" xml:space="preserve">
          <source>Use the &lt;code&gt;express.Router&lt;/code&gt; class to create modular, mountable route handlers. A &lt;code&gt;Router&lt;/code&gt; instance is a complete middleware and routing system; for this reason, it is often referred to as a &amp;ldquo;mini-app&amp;rdquo;.</source>
          <target state="translated">使用 &lt;code&gt;express.Router&lt;/code&gt; 类创建模块化的可安装路由处理程序。一个 &lt;code&gt;Router&lt;/code&gt; 的实例是一个完整的中间件和路由系统; 因此，它通常被称为&amp;ldquo;迷你应用程序&amp;rdquo;。</target>
        </trans-unit>
        <trans-unit id="2b0f5e15d50e3580e380b77c0b8193c797838c29" translate="yes" xml:space="preserve">
          <source>Use the &lt;code&gt;npm init&lt;/code&gt; command to create a &lt;code&gt;package.json&lt;/code&gt; file for your application. For more information on how &lt;code&gt;package.json&lt;/code&gt; works, see &lt;a href=&quot;https://docs.npmjs.com/files/package.json&quot;&gt;Specifics of npm&amp;rsquo;s package.json handling&lt;/a&gt;.</source>
          <target state="translated">使用 &lt;code&gt;npm init&lt;/code&gt; 命令为您的应用程序创建 &lt;code&gt;package.json&lt;/code&gt; 文件。有关 &lt;code&gt;package.json&lt;/code&gt; 如何工作的更多信息，请参见&lt;a href=&quot;https://docs.npmjs.com/files/package.json&quot;&gt;npm的package.json处理的细节&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="8a5ed754a08ec38ba5129971920e73486079d9ca" translate="yes" xml:space="preserve">
          <source>Use the application generator tool, &lt;code&gt;express-generator&lt;/code&gt;, to quickly create an application skeleton.</source>
          <target state="translated">使用应用程序生成器工具 &lt;code&gt;express-generator&lt;/code&gt; 可以快速创建应用程序框架。</target>
        </trans-unit>
        <trans-unit id="b167954a8c8aaef02302a47b4713756baeca2f5b" translate="yes" xml:space="preserve">
          <source>Use the module according to its documentation: &lt;code&gt;app.use( ... )&lt;/code&gt;</source>
          <target state="translated">根据其文档使用模块： &lt;code&gt;app.use( ... )&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="eb65cda5338a2a461000fb0f78b38d5bda1aabef" translate="yes" xml:space="preserve">
          <source>Use the open-source &lt;a href=&quot;http://sqlmap.org/&quot;&gt;sqlmap&lt;/a&gt; tool to detect SQL injection vulnerabilities in your app.</source>
          <target state="translated">使用开源&lt;a href=&quot;http://sqlmap.org/&quot;&gt;sqlmap&lt;/a&gt;工具检测您的应用程序中的SQL注入漏洞。</target>
        </trans-unit>
        <trans-unit id="d9fc0658b28305b4640074d3f740947da7109632" translate="yes" xml:space="preserve">
          <source>Use third-party middleware to add functionality to Express apps.</source>
          <target state="translated">使用第三方中间件为Express应用程序添加功能。</target>
        </trans-unit>
        <trans-unit id="d09c99575956d0ad4f4fb22fd6a6f7d9b2dfc48c" translate="yes" xml:space="preserve">
          <source>Use this command to open a wizard that walks you through the process of applying updates or patches to fix the vulnerabilities that were found:</source>
          <target state="translated">使用此命令打开一个向导,引导您完成应用更新或补丁的过程,以修复发现的漏洞。</target>
        </trans-unit>
        <trans-unit id="26cb220c84713286eebb65fe910ff44a323d050a" translate="yes" xml:space="preserve">
          <source>Use this command to test your application for vulnerabilities:</source>
          <target state="translated">使用这个命令来测试你的应用程序是否存在漏洞。</target>
        </trans-unit>
        <trans-unit id="20d50c5d7ebafbb34dd5729ecbb1bc3fed22d92e" translate="yes" xml:space="preserve">
          <source>Use this method for engines that do not provide &lt;code&gt;.__express&lt;/code&gt; out of the box, or if you wish to &amp;ldquo;map&amp;rdquo; a different extension to the template engine.</source>
          <target state="translated">对于不提供开箱即用 &lt;code&gt;.__express&lt;/code&gt; 的引擎，或者如果您希望将另一个扩展名&amp;ldquo;映射&amp;rdquo;到模板引擎，请使用此方法。</target>
        </trans-unit>
        <trans-unit id="85fae4738cd97d2316ea63e464bf7578d52bcff3" translate="yes" xml:space="preserve">
          <source>Use to quickly end the response without any data. If you need to respond with data, instead use methods such as &lt;a href=&quot;#res.send&quot;&gt;res.send()&lt;/a&gt; and &lt;a href=&quot;#res.json&quot;&gt;res.json()&lt;/a&gt;.</source>
          <target state="translated">用于快速结束响应，而无需任何数据。如果需要用数据响应，请使用诸如&lt;a href=&quot;#res.send&quot;&gt;res.send（）&lt;/a&gt;和&lt;a href=&quot;#res.json&quot;&gt;res.json（）之类的方法&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="902e06128bbbdbfa5af337a6b50e502630b4a69f" translate="yes" xml:space="preserve">
          <source>Use try-catch</source>
          <target state="translated">使用试捕</target>
        </trans-unit>
        <trans-unit id="4e340171e2a1dbe1b56c47d487e564503cfd65a4" translate="yes" xml:space="preserve">
          <source>Uses the specified middleware function or functions, with optional mount path &lt;code&gt;path&lt;/code&gt;, that defaults to &amp;ldquo;/&amp;rdquo;.</source>
          <target state="translated">使用指定的一个或多个中间件函数，以及可选的安装路径 &lt;code&gt;path&lt;/code&gt; ，默认为&amp;ldquo; /&amp;rdquo;。</target>
        </trans-unit>
        <trans-unit id="654f3bf05b77360df0a3406aeca71887e7f6c41d" translate="yes" xml:space="preserve">
          <source>Using Node&amp;rsquo;s cluster module</source>
          <target state="translated">使用Node的集群模块</target>
        </trans-unit>
        <trans-unit id="ed7e58dba08b5bbd33a51ab77dc535570101ba4b" translate="yes" xml:space="preserve">
          <source>Using PM2</source>
          <target state="translated">使用PM2</target>
        </trans-unit>
        <trans-unit id="99dc3d579975a83c8bfee195fa3c382d605df9cb" translate="yes" xml:space="preserve">
          <source>Using StrongLoop PM</source>
          <target state="translated">使用StrongLoop PM</target>
        </trans-unit>
        <trans-unit id="93af00e90887257be98737715d7b9512739fd90b" translate="yes" xml:space="preserve">
          <source>Using a process manager to restart the app (and Node) when it crashes.</source>
          <target state="translated">当应用程序(和Node)崩溃时,使用进程管理器重新启动应用程序(和Node)。</target>
        </trans-unit>
        <trans-unit id="e9e88d83e9f5bdd6606c81ada6a1e5e4a7e2c54d" translate="yes" xml:space="preserve">
          <source>Using any of these four tools can be very helpful, however StrongLoop Process Manager is the only tool that provides a comprehensive runtime and deployment solution that addresses the entire Node.js application life cycle, with tooling for every step before and after production, in a unified interface.</source>
          <target state="translated">使用这四种工具中的任何一种都是非常有帮助的,然而StrongLoop Process Manager是唯一一个提供全面的运行时和部署解决方案的工具,它在统一的界面中解决了整个Node.js应用的生命周期,为生产前后的每一步提供了工具。</target>
        </trans-unit>
        <trans-unit id="6b59ba3bacb0395c40b1cd2367e58d01d3cb95f7" translate="yes" xml:space="preserve">
          <source>Using any of these process managers will suffice to keep your application up, even if it does crash from time to time.</source>
          <target state="translated">使用这些进程管理器中的任何一个都足以让你的应用程序保持正常,即使它时常崩溃。</target>
        </trans-unit>
        <trans-unit id="083a810caa46fbc37f37806ef55b10b0f6008390" translate="yes" xml:space="preserve">
          <source>Using middleware</source>
          <target state="translated">使用中间件</target>
        </trans-unit>
        <trans-unit id="986b1f6b1ad043d2ce053a3361640dbdb32b8b1a" translate="yes" xml:space="preserve">
          <source>Using npm to manage your application&amp;rsquo;s dependencies is powerful and convenient. But the packages that you use may contain critical security vulnerabilities that could also affect your application. The security of your app is only as strong as the &amp;ldquo;weakest link&amp;rdquo; in your dependencies.</source>
          <target state="translated">使用npm管理应用程序的依赖项功能强大且方便。但是，您使用的软件包可能包含严重的安全漏洞，这些漏洞也可能影响您的应用程序。您的应用程序的安全性仅与依赖项中的&amp;ldquo;最弱链接&amp;rdquo;一样强大。</target>
        </trans-unit>
        <trans-unit id="d15e03d3bf76fe22116274f02829fd0f950aef97" translate="yes" xml:space="preserve">
          <source>Using template engines with Express</source>
          <target state="translated">使用Express的模板引擎</target>
        </trans-unit>
        <trans-unit id="88dad4f352fd25bbb342e06fd4d4f3aaf02ad16d" translate="yes" xml:space="preserve">
          <source>Using the default session cookie name can open your app to attacks. The security issue posed is similar to &lt;code&gt;X-Powered-By&lt;/code&gt;: a potential attacker can use it to fingerprint the server and target attacks accordingly.</source>
          <target state="translated">使用默认的会话Cookie名称可以使您的应用程序容易受到攻击。造成的安全问题类似于 &lt;code&gt;X-Powered-By&lt;/code&gt; ：潜在的攻击者可以使用它来对服务器进行指纹识别并相应地进行攻击。</target>
        </trans-unit>
        <trans-unit id="ff9cc0c45cda492964982d7bb4e6026ccfa4d1d8" translate="yes" xml:space="preserve">
          <source>Using the init system provided by your OS to restart the process manager when the OS crashes. It&amp;rsquo;s also possible to use the init system without a process manager.</source>
          <target state="translated">当操作系统崩溃时，使用操作系统提供的初始化系统重新启动进程管理器。也可以在没有流程管理器的情况下使用init系统。</target>
        </trans-unit>
        <trans-unit id="8dce170de238b1feda2ecd9674ea3ca0d068fbcb" translate="yes" xml:space="preserve">
          <source>Value</source>
          <target state="translated">Value</target>
        </trans-unit>
        <trans-unit id="b384be08e3744f644d6661d74d37f3a2500f08d7" translate="yes" xml:space="preserve">
          <source>Value of the &amp;ldquo;SameSite&amp;rdquo; &lt;strong&gt;Set-Cookie&lt;/strong&gt; attribute. More information at &lt;a href=&quot;https://tools.ietf.org/html/draft-ietf-httpbis-cookie-same-site-00#section-4.1.1&quot;&gt;https://tools.ietf.org/html/draft-ietf-httpbis-cookie-same-site-00#section-4.1.1&lt;/a&gt;.</source>
          <target state="translated">&amp;ldquo; SameSite&amp;rdquo; &lt;strong&gt;Set-Cookie&lt;/strong&gt;属性的值。有关更多信息，&lt;a href=&quot;https://tools.ietf.org/html/draft-ietf-httpbis-cookie-same-site-00#section-4.1.1&quot;&gt;请参见https://tools.ietf.org/html/draft-ietf-httpbis-cookie-same-site-00#section-4.1.1&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="07e9c0b5945c7935722397003f02b17b15f53167" translate="yes" xml:space="preserve">
          <source>Varied</source>
          <target state="translated">Varied</target>
        </trans-unit>
        <trans-unit id="313e3195b8777bdfcaf118aada15075b112e9026" translate="yes" xml:space="preserve">
          <source>Various other changes.</source>
          <target state="translated">其他各种变化。</target>
        </trans-unit>
        <trans-unit id="1b75cf0a0a90a6e984c7c739220f3506d3b65e97" translate="yes" xml:space="preserve">
          <source>Version 3 app</source>
          <target state="translated">第三版应用</target>
        </trans-unit>
        <trans-unit id="bba4be33fc4135a08d9f92218a86cb87aaf67a8a" translate="yes" xml:space="preserve">
          <source>Version 4 app</source>
          <target state="translated">第四版应用</target>
        </trans-unit>
        <trans-unit id="8d3a5f6f7177b543da808decde47ae7014e5e733" translate="yes" xml:space="preserve">
          <source>View CPU profiles and heap snapshots to optimize performance and diagnose memory leaks.</source>
          <target state="translated">查看CPU配置文件和堆快照,以优化性能和诊断内存泄漏。</target>
        </trans-unit>
        <trans-unit id="8dbc5ebdf047a122b839510acaf7e34e34ee82a6" translate="yes" xml:space="preserve">
          <source>View performance metrics for your application.</source>
          <target state="translated">查看应用程序的性能指标。</target>
        </trans-unit>
        <trans-unit id="8f6d0d87ece400b8cf64cd304ffa809e3eaac0af" translate="yes" xml:space="preserve">
          <source>View performance metrics on your application.</source>
          <target state="translated">查看应用程序的性能指标。</target>
        </trans-unit>
        <trans-unit id="032b39e1a29b75323ed6e822431fdf1653840053" translate="yes" xml:space="preserve">
          <source>View the status of Process Manager and all deployed apps:</source>
          <target state="translated">查看进程管理器和所有部署的应用程序的状态。</target>
        </trans-unit>
        <trans-unit id="840005c99ca00aaadff0aa978bf6fd105851a418" translate="yes" xml:space="preserve">
          <source>Was a function; now an object.</source>
          <target state="translated">以前是一个函数,现在是一个对象。</target>
        </trans-unit>
        <trans-unit id="e2ce2bc0e4251b94db6ef70e713d919be237ddd7" translate="yes" xml:space="preserve">
          <source>Was an array; now an object.</source>
          <target state="translated">以前是一个数组,现在是一个对象。</target>
        </trans-unit>
        <trans-unit id="cbe5e34be9e88f0e513902136c6edc0db8309f06" translate="yes" xml:space="preserve">
          <source>We also don&amp;rsquo;t recommend using &lt;a href=&quot;https://nodejs.org/api/domain.html&quot;&gt;domains&lt;/a&gt;. It generally doesn&amp;rsquo;t solve the problem and is a deprecated module.</source>
          <target state="translated">我们也不建议使用&lt;a href=&quot;https://nodejs.org/api/domain.html&quot;&gt;domains&lt;/a&gt;。它通常不能解决问题，并且是已弃用的模块。</target>
        </trans-unit>
        <trans-unit id="725f77d1ff07e7333aab3f34668b6b7e73d2487d" translate="yes" xml:space="preserve">
          <source>Web browsers and other compliant clients will only clear the cookie if the given &lt;code&gt;options&lt;/code&gt; is identical to those given to &lt;a href=&quot;#res.cookie&quot;&gt;res.cookie()&lt;/a&gt;, excluding &lt;code&gt;expires&lt;/code&gt; and &lt;code&gt;maxAge&lt;/code&gt;.</source>
          <target state="translated">如果给定的 &lt;code&gt;options&lt;/code&gt; 与给&lt;a href=&quot;#res.cookie&quot;&gt;res.cookie（）&lt;/a&gt;相同的选项（不包括 &lt;code&gt;expires&lt;/code&gt; 和 &lt;code&gt;maxAge&lt;/code&gt; ），则Web浏览器和其他兼容的客户端只会清除cookie 。</target>
        </trans-unit>
        <trans-unit id="e57180805b4fa9b41b1a61c5b0fcb6b6d98b20c3" translate="yes" xml:space="preserve">
          <source>What not to do</source>
          <target state="translated">不要做什么</target>
        </trans-unit>
        <trans-unit id="9705af16b960bbfb3b6da178b485da7d5dc3aa9b" translate="yes" xml:space="preserve">
          <source>When StrongLoop Process Manager (PM) runs an application, it automatically runs it in a cluster with a number of workers equal to the number of CPU cores on the system. You can manually change the number of worker processes in the cluster using the slc command line tool without stopping the app.</source>
          <target state="translated">当StrongLoop Process Manager (PM)运行应用程序时,它会自动将其运行在一个集群中,集群中的工作者数量等于系统上的CPU核数。您可以在不停止应用程序的情况下,使用slc命令行工具手动更改集群中的工作者进程数量。</target>
        </trans-unit>
        <trans-unit id="22fcf3ab0c770fc0609563dd477686e765908780" translate="yes" xml:space="preserve">
          <source>When a client sends the &lt;code&gt;Cache-Control: no-cache&lt;/code&gt; request header to indicate an end-to-end reload request, this module will return &lt;code&gt;false&lt;/code&gt; to make handling these requests transparent.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="501c75627bf5873f6ed0764334661d4dd399725c" translate="yes" xml:space="preserve">
          <source>When a request is made to &lt;code&gt;/greet/jp&lt;/code&gt;, &lt;code&gt;req.baseUrl&lt;/code&gt; is &amp;ldquo;/greet&amp;rdquo;. When a request is made to &lt;code&gt;/hello/jp&lt;/code&gt;, &lt;code&gt;req.baseUrl&lt;/code&gt; is &amp;ldquo;/hello&amp;rdquo;.</source>
          <target state="translated">当对 &lt;code&gt;/greet/jp&lt;/code&gt; 发出请求时， &lt;code&gt;req.baseUrl&lt;/code&gt; 为&amp;ldquo; / greet&amp;rdquo;。当对 &lt;code&gt;/hello/jp&lt;/code&gt; 发出请求时， &lt;code&gt;req.baseUrl&lt;/code&gt; 为&amp;ldquo; / hello&amp;rdquo;。</target>
        </trans-unit>
        <trans-unit id="2a13209ce06db6ad843d64699453b28b2d44f24b" translate="yes" xml:space="preserve">
          <source>When a request is then made to the app, you will see the logs specified in the Express code:</source>
          <target state="translated">然后向应用发出请求时,你会看到快递代码中指定的日志。</target>
        </trans-unit>
        <trans-unit id="3763069422f8e223e5f809023d15f1f53eb78128" translate="yes" xml:space="preserve">
          <source>When an error is written, the following information is added to the response:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="02e357d1d01f898305f5390f0fdd3955974b7d32" translate="yes" xml:space="preserve">
          <source>When an error occurs or transfer is complete, the method calls the optional callback function &lt;code&gt;fn&lt;/code&gt;. This method uses &lt;a href=&quot;#res.sendFile&quot;&gt;res.sendFile()&lt;/a&gt; to transfer the file.</source>
          <target state="translated">当发生错误或传输完成时，该方法将调用可选的回调函数 &lt;code&gt;fn&lt;/code&gt; 。此方法使用&lt;a href=&quot;#res.sendFile&quot;&gt;res.sendFile（）&lt;/a&gt;传输文件。</target>
        </trans-unit>
        <trans-unit id="4ed6b235e1c71c4d3da06dd2039800decab66c92" translate="yes" xml:space="preserve">
          <source>When called from a middleware, the mount point is not included in &lt;code&gt;req.path&lt;/code&gt;. See &lt;a href=&quot;http://expressjs.com/index.html#app.use&quot;&gt;app.use()&lt;/a&gt; for more details.</source>
          <target state="translated">从中间件调用时，安装点不包括在 &lt;code&gt;req.path&lt;/code&gt; 中。有关更多详细信息，请参见&lt;a href=&quot;http://expressjs.com/index.html#app.use&quot;&gt;app.use（）&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="55d9aaa93ce05438d0e4ea773e11b6e9636744be" translate="yes" xml:space="preserve">
          <source>When enabled, Express attempts to determine the IP address of the client connected through the front-facing proxy, or series of proxies. The `req.ips` property, then contains an array of IP addresses the client is connected through. To enable it, use the values described in the &lt;a href=&quot;#trust.proxy.options.table&quot;&gt;trust proxy options table&lt;/a&gt;.</source>
          <target state="translated">启用后，Express会尝试确定通过前端代理或一系列代理连接的客户端的IP地址。然后，&amp;ldquo; req.ips&amp;rdquo;属性包含客户端连接所经过的IP地址数组。要启用它，请使用&lt;a href=&quot;#trust.proxy.options.table&quot;&gt;信任代理选项表中&lt;/a&gt;描述的值。</target>
        </trans-unit>
        <trans-unit id="32c85044bc57f0d6a884e4489274a420e7a2a184" translate="yes" xml:space="preserve">
          <source>When running an Express app behind a proxy, set (by using &lt;a href=&quot;../index#app.set&quot;&gt;app.set()&lt;/a&gt;) the application variable &lt;code&gt;trust proxy&lt;/code&gt; to one of the values listed in the following table.</source>
          <target state="translated">在代理后面运行Express应用程序时，（通过使用&lt;a href=&quot;../index#app.set&quot;&gt;app.set（）&lt;/a&gt;）将应用程序变量 &lt;code&gt;trust proxy&lt;/code&gt; 设置为下表中列出的值之一。</target>
        </trans-unit>
        <trans-unit id="a7c9495350f9799c80da28b9b15615ee54293fc4" translate="yes" xml:space="preserve">
          <source>When running an application with PM2, you can enable &lt;strong&gt;cluster mode&lt;/strong&gt; to run it in a cluster with a number of instances of your choosing, such as the matching the number of available CPUs on the machine. You can manually change the number of processes in the cluster using the &lt;code&gt;pm2&lt;/code&gt; command line tool without stopping the app.</source>
          <target state="translated">使用PM2运行应用程序时，可以启用&lt;strong&gt;集群模式&lt;/strong&gt;以在具有多个所选实例的集群中运行它，例如匹配计算机上可用CPU的数量。您可以使用 &lt;code&gt;pm2&lt;/code&gt; 命令行工具手动更改集群中的进程数，而无需停止应用程序。</target>
        </trans-unit>
        <trans-unit id="8718d114494b58133c220dfc493f3bb36c1dd6d5" translate="yes" xml:space="preserve">
          <source>When running through Node.js, you can set a few environment variables that will change the behavior of the debug logging:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e3bf187cc64c7a6034a0b049373e96ea76d47cc0" translate="yes" xml:space="preserve">
          <source>When specified, the IP addresses or the subnets are excluded from the address determination process, and the untrusted IP address nearest to the application server is determined as the client&amp;rsquo;s IP address.</source>
          <target state="translated">指定后，IP地址或子网将从地址确定过程中排除，并且最接近应用程序服务器的不受信任IP地址被确定为客户端的IP地址。</target>
        </trans-unit>
        <trans-unit id="8ee3b71d91dea9af0efb8da6ed0f211084882e46" translate="yes" xml:space="preserve">
          <source>When the &lt;a href=&quot;#trust.proxy.options.table&quot;&gt;&lt;code&gt;trust proxy&lt;/code&gt; setting&lt;/a&gt; does not evaluate to &lt;code&gt;false&lt;/code&gt;, this property will use the value of the &lt;code&gt;X-Forwarded-Proto&lt;/code&gt; header field if present. This header can be set by the client or by the proxy.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fbd362e75c41d7b3a53b3434b31e630d2d3538a4" translate="yes" xml:space="preserve">
          <source>When the &lt;a href=&quot;http://expressjs.com/index.html#trust.proxy.options.table&quot;&gt;&lt;code&gt;trust proxy&lt;/code&gt; setting&lt;/a&gt; does not evaluate to &lt;code&gt;false&lt;/code&gt;, the value of this property is derived from the left-most entry in the &lt;code&gt;X-Forwarded-For&lt;/code&gt; header. This header can be set by the client or by the proxy.</source>
          <target state="translated">当&lt;a href=&quot;http://expressjs.com/index.html#trust.proxy.options.table&quot;&gt; &lt;code&gt;trust proxy&lt;/code&gt; 设置的&lt;/a&gt;评估结果不为 &lt;code&gt;false&lt;/code&gt; 时，此属性的值从 &lt;code&gt;X-Forwarded-For&lt;/code&gt; 标头中最左边的条目派生。此标头可以由客户端或代理设置。</target>
        </trans-unit>
        <trans-unit id="ce50831515757b2bb1be2df81591c7189da47af2" translate="yes" xml:space="preserve">
          <source>When the &lt;a href=&quot;http://expressjs.com/index.html#trust.proxy.options.table&quot;&gt;&lt;code&gt;trust proxy&lt;/code&gt; setting&lt;/a&gt; does not evaluate to &lt;code&gt;false&lt;/code&gt;, this property contains an array of IP addresses specified in the &lt;code&gt;X-Forwarded-For&lt;/code&gt; request header. Otherwise, it contains an empty array. This header can be set by the client or by the proxy.</source>
          <target state="translated">当&lt;a href=&quot;http://expressjs.com/index.html#trust.proxy.options.table&quot;&gt; &lt;code&gt;trust proxy&lt;/code&gt; 设置的&lt;/a&gt;评估结果不为 &lt;code&gt;false&lt;/code&gt; 时，此属性包含 &lt;code&gt;X-Forwarded-For&lt;/code&gt; 请求标头中指定的IP地址数组。否则，它包含一个空数组。此标头可以由客户端或代理设置。</target>
        </trans-unit>
        <trans-unit id="c3c8243790cc76f8a149a9d0f261b0fa1b235df1" translate="yes" xml:space="preserve">
          <source>When the &lt;a href=&quot;http://expressjs.com/index.html#trust.proxy.options.table&quot;&gt;&lt;code&gt;trust proxy&lt;/code&gt; setting&lt;/a&gt; does not evaluate to &lt;code&gt;false&lt;/code&gt;, this property will instead get the value from the &lt;code&gt;X-Forwarded-Host&lt;/code&gt; header field. This header can be set by the client or by the proxy.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="43b29989490006b123a1fed6d88ef54e8b7bd056" translate="yes" xml:space="preserve">
          <source>When the &lt;a href=&quot;http://expressjs.com/index.html#trust.proxy.options.table&quot;&gt;&lt;code&gt;trust proxy&lt;/code&gt; setting&lt;/a&gt; does not evaluate to &lt;code&gt;false&lt;/code&gt;, this property will instead have the value of the &lt;code&gt;X-Forwarded-Host&lt;/code&gt; header field. This header can be set by the client or by the proxy.</source>
          <target state="translated">当&lt;a href=&quot;http://expressjs.com/index.html#trust.proxy.options.table&quot;&gt; &lt;code&gt;trust proxy&lt;/code&gt; 设置的&lt;/a&gt;评估结果不为 &lt;code&gt;false&lt;/code&gt; 时，此属性将具有 &lt;code&gt;X-Forwarded-Host&lt;/code&gt; 标头字段的值。此标头可以由客户端或代理设置。</target>
        </trans-unit>
        <trans-unit id="d7f7c94e0ad0f11ece916f4860888b8e24018424" translate="yes" xml:space="preserve">
          <source>When the &lt;a href=&quot;http://expressjs.com/index.html#trust.proxy.options.table&quot;&gt;&lt;code&gt;trust proxy&lt;/code&gt; setting&lt;/a&gt; does not evaluate to &lt;code&gt;false&lt;/code&gt;, this property will use the value of the &lt;code&gt;X-Forwarded-Proto&lt;/code&gt; header field if present. This header can be set by the client or by the proxy.</source>
          <target state="translated">当&lt;a href=&quot;http://expressjs.com/index.html#trust.proxy.options.table&quot;&gt; &lt;code&gt;trust proxy&lt;/code&gt; 设置的&lt;/a&gt;评估结果不为 &lt;code&gt;false&lt;/code&gt; 时，此属性将使用 &lt;code&gt;X-Forwarded-Proto&lt;/code&gt; 标头字段的值（如果存在）。此标头可以由客户端或代理设置。</target>
        </trans-unit>
        <trans-unit id="5626e2a7a298a5a2201387af8876bd72beda3a53" translate="yes" xml:space="preserve">
          <source>When the &lt;code&gt;root&lt;/code&gt; option is provided, the &lt;code&gt;path&lt;/code&gt; argument is allowed to be a relative path, including containing &lt;code&gt;..&lt;/code&gt;. Express will validate that the relative path provided as &lt;code&gt;path&lt;/code&gt; will resolve within the given &lt;code&gt;root&lt;/code&gt; option.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d53fc9203cdc95f94a55562a14485c99b8a9949d" translate="yes" xml:space="preserve">
          <source>When the parameter is a &lt;code&gt;Buffer&lt;/code&gt; object, the method sets the &lt;code&gt;Content-Type&lt;/code&gt; response header field to &amp;ldquo;application/octet-stream&amp;rdquo;, unless previously defined as shown below:</source>
          <target state="translated">当参数是 &lt;code&gt;Buffer&lt;/code&gt; 对象时，该方法将 &lt;code&gt;Content-Type&lt;/code&gt; 响应标头字段设置为&amp;ldquo; application / octet-stream&amp;rdquo;，除非先前定义如下：</target>
        </trans-unit>
        <trans-unit id="7b0049ab549f6d0d34dc584905288009eb3cb2e4" translate="yes" xml:space="preserve">
          <source>When the parameter is a &lt;code&gt;String&lt;/code&gt;, the method sets the &lt;code&gt;Content-Type&lt;/code&gt; to &amp;ldquo;text/html&amp;rdquo;:</source>
          <target state="translated">当参数为 &lt;code&gt;String&lt;/code&gt; 时，该方法将 &lt;code&gt;Content-Type&lt;/code&gt; 设置为&amp;ldquo; text / html&amp;rdquo;：</target>
        </trans-unit>
        <trans-unit id="c7ba0d6a23b9ed3115c1635386577be778c6b4aa" translate="yes" xml:space="preserve">
          <source>When the parameter is an &lt;code&gt;Array&lt;/code&gt; or &lt;code&gt;Object&lt;/code&gt;, Express responds with the JSON representation:</source>
          <target state="translated">当参数是 &lt;code&gt;Array&lt;/code&gt; 或 &lt;code&gt;Object&lt;/code&gt; 时，Express会以JSON表示形式进行响应：</target>
        </trans-unit>
        <trans-unit id="7abf9099a612dd6978b67d1aa48069db28a0d4fe" translate="yes" xml:space="preserve">
          <source>When the response is still &amp;ldquo;fresh&amp;rdquo; in the client&amp;rsquo;s cache &lt;code&gt;true&lt;/code&gt; is returned, otherwise &lt;code&gt;false&lt;/code&gt; is returned to indicate that the client cache is now stale and the full response should be sent.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="34ef7c7734b2e6c93e13e00c6118eca632c95cd0" translate="yes" xml:space="preserve">
          <source>When this option is &lt;code&gt;true&lt;/code&gt;, client errors such as a bad request or a request to a non-existent file will cause this middleware to simply call &lt;code&gt;next()&lt;/code&gt; to invoke the next middleware in the stack. When false, these errors (even 404s), will invoke &lt;code&gt;next(err)&lt;/code&gt;.</source>
          <target state="translated">当此选项为 &lt;code&gt;true&lt;/code&gt; 时，客户端错误（例如错误的请求或对不存在的文件的请求）将导致此中间件仅调用 &lt;code&gt;next()&lt;/code&gt; 来调用堆栈中的下一个中间件。如果为false，则这些错误（甚至是404错误）将调用 &lt;code&gt;next(err)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="241a1ef9cbb953d3dd1bcbdf485e7709184954a6" translate="yes" xml:space="preserve">
          <source>When using &lt;a href=&quot;https://www.npmjs.com/package/cookie-parser&quot;&gt;cookie-parser&lt;/a&gt; middleware, this method also supports signed cookies. Simply include the &lt;code&gt;signed&lt;/code&gt; option set to &lt;code&gt;true&lt;/code&gt;. Then &lt;code&gt;res.cookie()&lt;/code&gt; will use the secret passed to &lt;code&gt;cookieParser(secret)&lt;/code&gt; to sign the value.</source>
          <target state="translated">使用&lt;a href=&quot;https://www.npmjs.com/package/cookie-parser&quot;&gt;cookie解析器&lt;/a&gt;中间件时，此方法还支持签名的cookie。只需将设置为 &lt;code&gt;true&lt;/code&gt; 的 &lt;code&gt;signed&lt;/code&gt; 选项包括在内即可。然后 &lt;code&gt;res.cookie()&lt;/code&gt; 将使用传递给 &lt;code&gt;cookieParser(secret)&lt;/code&gt; 的密钥对值进行签名。</target>
        </trans-unit>
        <trans-unit id="cbc29d15127af324c2a1391b359a25496708ce09" translate="yes" xml:space="preserve">
          <source>When using &lt;a href=&quot;https://www.npmjs.com/package/cookie-parser&quot;&gt;cookie-parser&lt;/a&gt; middleware, this property contains signed cookies sent by the request, unsigned and ready for use. Signed cookies reside in a different object to show developer intent; otherwise, a malicious attack could be placed on &lt;code&gt;req.cookie&lt;/code&gt; values (which are easy to spoof). Note that signing a cookie does not make it &amp;ldquo;hidden&amp;rdquo; or encrypted; but simply prevents tampering (because the secret used to sign is private).</source>
          <target state="translated">使用&lt;a href=&quot;https://www.npmjs.com/package/cookie-parser&quot;&gt;cookie解析器&lt;/a&gt;中间件时，此属性包含请求发送的已签名的cookie，未签名且可以使用。已签名的cookie位于另一个对象中，以显示开发人员的意图。否则，可能会对 &lt;code&gt;req.cookie&lt;/code&gt; 值（很容易欺骗）进行恶意攻击。请注意，对cookie签名不会使其&amp;ldquo;隐藏&amp;rdquo;或加密。但只是防止篡改（因为用于签名的秘密是私有的）。</target>
        </trans-unit>
        <trans-unit id="6aca4707c58c587acb5d60b42e8c8c750f5a5242" translate="yes" xml:space="preserve">
          <source>When using &lt;a href=&quot;https://www.npmjs.com/package/cookie-parser&quot;&gt;cookie-parser&lt;/a&gt; middleware, this property is an object that contains cookies sent by the request. If the request contains no cookies, it defaults to &lt;code&gt;{}&lt;/code&gt;.</source>
          <target state="translated">使用&lt;a href=&quot;https://www.npmjs.com/package/cookie-parser&quot;&gt;cookie解析器&lt;/a&gt;中间件时，此属性是一个包含请求发送的cookie的对象。如果请求不包含cookie，则默认为 &lt;code&gt;{}&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="03f62ca822bb0bd974e0c5045f5d781823948cd7" translate="yes" xml:space="preserve">
          <source>When you deploy a new version of your application, you must replace the previous version. The &lt;a href=&quot;pm&quot;&gt;process manager&lt;/a&gt; you&amp;rsquo;re using will first send a SIGTERM signal to the application to notify it that it will be killed. Once the application gets this signal, it should stop accepting new requests, finish all the ongoing requests, clean up the resources it used, including database connections and file locks then exit.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="527bc3d9a378866748647528d7a788311664bf1e" translate="yes" xml:space="preserve">
          <source>When you deploy a new version of your application, you must replace the previous version. The &lt;a href=&quot;pm&quot;&gt;process manager&lt;/a&gt; you&amp;rsquo;re using will first send a SIGTERM signal to the application to notify it that it will be killed. Once the application gets this signal, it will stop accepting new requests, finish all the ongoing requests, and clean up the resources it used, including database connections and file locks.</source>
          <target state="translated">部署应用程序的新版本时，必须替换以前的版本。您正在使用的&lt;a href=&quot;pm&quot;&gt;流程管理器&lt;/a&gt;将首先向应用程序发送SIGTERM信号，以通知它将被杀死。一旦应用程序收到此信号，它将停止接受新请求，完成所有正在进行的请求，并清理其使用的资源，包括数据库连接和文件锁。</target>
        </trans-unit>
        <trans-unit id="112db72b1b684632edf5399c5fd68decb2048e78" translate="yes" xml:space="preserve">
          <source>When you make a request to the home page, &lt;code&gt;index.ntl&lt;/code&gt; will be rendered as HTML.</source>
          <target state="translated">当您请求主页时， &lt;code&gt;index.ntl&lt;/code&gt; 将呈现为HTML。</target>
        </trans-unit>
        <trans-unit id="f40ea203a597f70c6562ce508b93150441d07be2" translate="yes" xml:space="preserve">
          <source>When you make a request to the home page, the &lt;code&gt;index.pug&lt;/code&gt; file will be rendered as HTML.</source>
          <target state="translated">当您请求主页时， &lt;code&gt;index.pug&lt;/code&gt; 文件将呈现为HTML。</target>
        </trans-unit>
        <trans-unit id="28e2a41040365a3317d4cc514f3f135fc159164e" translate="yes" xml:space="preserve">
          <source>When you make a request to the root of the app, the app now displays the timestamp of your request in the browser.</source>
          <target state="translated">当您向应用程序的根部提出请求时,应用程序现在会在浏览器中显示您的请求的时间戳。</target>
        </trans-unit>
        <trans-unit id="15a48d068b5118e8159fde711e2291a6f8f2ce62" translate="yes" xml:space="preserve">
          <source>When you run Express apps for production, it is helpful to use a &lt;em&gt;process manager&lt;/em&gt; to achieve the following tasks:</source>
          <target state="translated">当运行Express应用进行生产时，使用&lt;em&gt;流程管理器&lt;/em&gt;来完成以下任务会很有帮助：</target>
        </trans-unit>
        <trans-unit id="009f86cf89a86f0607fb4fd4704007c386d7da46" translate="yes" xml:space="preserve">
          <source>When you run Express apps for production, it is helpful to use a &lt;em&gt;process manager&lt;/em&gt; to:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="13e6fb3d9ea8a3687a1f5b5b573d13fbe7bb3b86" translate="yes" xml:space="preserve">
          <source>When you start an app by using the &lt;code&gt;pm2&lt;/code&gt; command, the app is immediately sent to the background. You can control the background app from the command line by using various &lt;code&gt;pm2&lt;/code&gt; commands.</source>
          <target state="translated">使用 &lt;code&gt;pm2&lt;/code&gt; 命令启动应用程序时，该应用程序将立即发送到后台。您可以使用各种 &lt;code&gt;pm2&lt;/code&gt; 命令从命令行控制后台应用程序。</target>
        </trans-unit>
        <trans-unit id="c59bfe72d6d73e91826b5eca71df05ad7544aa6c" translate="yes" xml:space="preserve">
          <source>When you start an app by using the &lt;code&gt;pm2&lt;/code&gt; command, you must specify the path of the app. However, when you stop, restart, or delete an app, you can specify just the name or the id of the app.</source>
          <target state="translated">使用 &lt;code&gt;pm2&lt;/code&gt; 命令启动应用程序时，必须指定应用程序的路径。但是，在停止，重新启动或删除应用程序时，您可以仅指定应用程序的名称或ID。</target>
        </trans-unit>
        <trans-unit id="bd69fd61eae1415d060d6fc65ebc3eed412af958" translate="yes" xml:space="preserve">
          <source>When you use a regular expression for the route definition, capture groups are provided in the array using &lt;code&gt;req.params[n]&lt;/code&gt;, where &lt;code&gt;n&lt;/code&gt; is the n&lt;sup&gt;th&lt;/sup&gt; capture group. This rule is applied to unnamed wild card matches with string routes such as &lt;code&gt;/file/*&lt;/code&gt;:</source>
          <target state="translated">将正则表达式用于路由定义时，使用 &lt;code&gt;req.params[n]&lt;/code&gt; 在数组中提供捕获组，其中 &lt;code&gt;n&lt;/code&gt; 是第n &lt;sup&gt;个&lt;/sup&gt;捕获组。此规则适用于具有字符串路由（例如 &lt;code&gt;/file/*&lt;/code&gt; )的未命名通配符匹配：</target>
        </trans-unit>
        <trans-unit id="7e741bc3dcef0123eeda11543758853be2aac149" translate="yes" xml:space="preserve">
          <source>Where:</source>
          <target state="translated">Where:</target>
        </trans-unit>
        <trans-unit id="f73b8c8177773c5a8c233b30149804b08bab6db2" translate="yes" xml:space="preserve">
          <source>Whether or not to use colors in the debug output.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="015deb11a0b53c5bec42b592c6680d2852f63bab" translate="yes" xml:space="preserve">
          <source>Which template engines does Express support?</source>
          <target state="translated">Express支持哪些模板引擎?</target>
        </trans-unit>
        <trans-unit id="c0541422e39055f0122db6367a3febd98e3075d8" translate="yes" xml:space="preserve">
          <source>Whichever method you use, if you want Express error handlers to be called in and the application to survive, you must ensure that Express receives the error.</source>
          <target state="translated">无论你使用哪种方法,如果你想让Express错误处理程序被调用进来,并且应用程序能够存活下来,你必须确保Express收到错误。</target>
        </trans-unit>
        <trans-unit id="57770079da3be365b005a2a2304f26f4a961d641" translate="yes" xml:space="preserve">
          <source>With Upstart, use the &lt;code&gt;env&lt;/code&gt; keyword in your job file. For example:</source>
          <target state="translated">对于Upstart，在作业文件中使用 &lt;code&gt;env&lt;/code&gt; 关键字。例如：</target>
        </trans-unit>
        <trans-unit id="9126b23002c151251365607be139da9c53a52c81" translate="yes" xml:space="preserve">
          <source>With load balancing, you might have to ensure that requests that are associated with a particular session ID connect to the process that originated them. This is known as &lt;em&gt;session affinity&lt;/em&gt;, or &lt;em&gt;sticky sessions&lt;/em&gt;, and may be addressed by the suggestion above to use a data store such as Redis for session data (depending on your application). For a discussion, see &lt;a href=&quot;http://socket.io/docs/using-multiple-nodes/&quot;&gt;Using multiple nodes&lt;/a&gt;.</source>
          <target state="translated">使用负载平衡时，您可能必须确保与特定会话ID关联的请求连接到发起它们的进程。这被称为&lt;em&gt;会话亲和性&lt;/em&gt;或&lt;em&gt;粘性会话&lt;/em&gt;，可以通过以上建议解决，以将数据存储（例如Redis）用于会话数据（取决于您的应用程序）。有关讨论，请参见&lt;a href=&quot;http://socket.io/docs/using-multiple-nodes/&quot;&gt;使用多个节点&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="a9d0a21af360f9a50bd9513ad5278e2d81d25739" translate="yes" xml:space="preserve">
          <source>With systemd, use the &lt;code&gt;Environment&lt;/code&gt; directive in your unit file. For example:</source>
          <target state="translated">对于systemd，请在您的单元文件中使用 &lt;code&gt;Environment&lt;/code&gt; 指令。例如：</target>
        </trans-unit>
        <trans-unit id="ad4b282b9b543394da45c47db8aef175048b5d84" translate="yes" xml:space="preserve">
          <source>Without built-in middleware, you must explicitly add all the middleware that is required to run your app. Simply follow these steps:</source>
          <target state="translated">如果没有内置的中间件,您必须明确添加运行应用程序所需的所有中间件。只需遵循以下步骤即可。</target>
        </trans-unit>
        <trans-unit id="73c719370b85f52a302f9af0bc5e8dffa6230d34" translate="yes" xml:space="preserve">
          <source>Writing error handlers</source>
          <target state="translated">编写错误处理程序</target>
        </trans-unit>
        <trans-unit id="3372b1b5955f502cd5c59cee832b86b347d9ff1e" translate="yes" xml:space="preserve">
          <source>Writing middleware for use in Express apps</source>
          <target state="translated">编写用于Express应用的中间件</target>
        </trans-unit>
        <trans-unit id="4c6e3d4c09f9f5d74359d9d5e16938c14c10017d" translate="yes" xml:space="preserve">
          <source>Yields the following results:</source>
          <target state="translated">产生以下结果:</target>
        </trans-unit>
        <trans-unit id="5ef34ed32c89d8ecd7d5129a83874c305deb4868" translate="yes" xml:space="preserve">
          <source>You can access local variables in templates rendered within the application. This is useful for providing helper functions to templates, as well as application-level data. Local variables are available in middleware via &lt;code&gt;req.app.locals&lt;/code&gt; (see &lt;a href=&quot;#req.app&quot;&gt;req.app&lt;/a&gt;)</source>
          <target state="translated">您可以在应用程序内呈现的模板中访问局部变量。这对于为模板以及应用程序级数据提供帮助功能很有用。局部变量可通过 &lt;code&gt;req.app.locals&lt;/code&gt; 在中间件中使用（请参阅&lt;a href=&quot;#req.app&quot;&gt;req.app&lt;/a&gt;）</target>
        </trans-unit>
        <trans-unit id="76ba5cbf9ec74c5bfa4b4e04b502d3e22f0f08bb" translate="yes" xml:space="preserve">
          <source>You can add middleware and HTTP method routes (such as &lt;code&gt;get&lt;/code&gt;, &lt;code&gt;put&lt;/code&gt;, &lt;code&gt;post&lt;/code&gt;, and so on) to &lt;code&gt;router&lt;/code&gt; just like an application.</source>
          <target state="translated">您可以像应用程序一样向 &lt;code&gt;router&lt;/code&gt; 添加中间件和HTTP方法路由（例如 &lt;code&gt;get&lt;/code&gt; ， &lt;code&gt;put&lt;/code&gt; ， &lt;code&gt;post&lt;/code&gt; 等）。</target>
        </trans-unit>
        <trans-unit id="f9298bfc210261527b90870db24a5f9c65bc99de" translate="yes" xml:space="preserve">
          <source>You can also &amp;ldquo;soft restart,&amp;rdquo; which gives worker processes a grace period to close existing connections, then restarts the current application:</source>
          <target state="translated">您还可以&amp;ldquo;软重启&amp;rdquo;，这为工作进程提供了宽限期以关闭现有连接，然后重启当前应用程序：</target>
        </trans-unit>
        <trans-unit id="c160ab1af9771808d27a6250c8f1317c88050706" translate="yes" xml:space="preserve">
          <source>You can also use regular expressions&amp;mdash;useful if you have very specific constraints, for example the following would match &amp;ldquo;GET /commits/71dbb9c&amp;rdquo; as well as &amp;ldquo;GET /commits/71dbb9c..4c084f9&amp;rdquo;.</source>
          <target state="translated">您还可以使用正则表达式-如果您有非常特定的约束，则很有用，例如，以下内容将匹配&amp;ldquo; GET / commits / 71dbb9c&amp;rdquo;和&amp;ldquo; GET /commits/71dbb9c..4c084f9&amp;rdquo;。</target>
        </trans-unit>
        <trans-unit id="4cd37ca0380136541bb2cdb065d0f644848ef0fa" translate="yes" xml:space="preserve">
          <source>You can combine all the above ways of mounting middleware.</source>
          <target state="translated">你可以结合以上所有的中间件安装方式。</target>
        </trans-unit>
        <trans-unit id="98410bf4500a3e769cf2974ff2789c94beb8a263" translate="yes" xml:space="preserve">
          <source>You can create chainable route handlers for a route path by using &lt;code&gt;app.route()&lt;/code&gt;. Because the path is specified at a single location, creating modular routes is helpful, as is reducing redundancy and typos. For more information about routes, see: &lt;a href=&quot;../index#router&quot;&gt;Router() documentation&lt;/a&gt;.</source>
          <target state="translated">您可以使用 &lt;code&gt;app.route()&lt;/code&gt; 为路由路径创建可链接的路由处理程序。由于路径是在单个位置指定的，因此创建模块化路由非常有帮助，减少冗余和错别字也很有帮助。有关路由的更多信息，请参见：&lt;a href=&quot;../index#router&quot;&gt;Router（）文档&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="d5a3b1fb3b3d7101453eaa0c578ee607a4cb3a4c" translate="yes" xml:space="preserve">
          <source>You can define and mount a middleware function locally.</source>
          <target state="translated">你可以在本地定义和挂载一个中间件函数。</target>
        </trans-unit>
        <trans-unit id="bf6be1821000bc03fe174db325d7a155613fd483" translate="yes" xml:space="preserve">
          <source>You can easily install StrongLoop Process Manager as a systemd service. After you do, when the server restarts, it will automatically restart StrongLoop PM, which will then restart all the apps it is managing.</source>
          <target state="translated">你可以很容易地将StrongLoop Process Manager安装为systemd服务。安装后,当服务器重启时,它会自动重启StrongLoop PM,然后重启它管理的所有应用程序。</target>
        </trans-unit>
        <trans-unit id="0e947505467b4fe74639dadcb47ce3642b79f9be" translate="yes" xml:space="preserve">
          <source>You can easily install StrongLoop Process Manager as an Upstart service. After you do, when the server restarts, it will automatically restart StrongLoop PM, which will then restart all the apps it is managing.</source>
          <target state="translated">您可以轻松地将StrongLoop Process Manager安装为Upstart服务。安装后,当服务器重启时,它会自动重启StrongLoop PM,然后重启它管理的所有应用程序。</target>
        </trans-unit>
        <trans-unit id="bb6387910e4bed6dd6f4b1178c5b289b5a6fa20c" translate="yes" xml:space="preserve">
          <source>You can load application-level and router-level middleware with an optional mount path. You can also load a series of middleware functions together, which creates a sub-stack of the middleware system at a mount point.</source>
          <target state="translated">你可以加载应用级和路由器级的中间件,可以选择挂载路径。您也可以将一系列中间件函数一起加载,这样就可以在挂载点创建中间件系统的子栈。</target>
        </trans-unit>
        <trans-unit id="f54e45775688802f42924ff2ad74adf8791258a3" translate="yes" xml:space="preserve">
          <source>You can override the signature and behavior of existing methods with your own, by assigning a custom function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f54d6d83c2831da220dc839d0f1f1c85ce840c31" translate="yes" xml:space="preserve">
          <source>You can pass an object as the &lt;code&gt;value&lt;/code&gt; parameter; it is then serialized as JSON and parsed by &lt;code&gt;bodyParser()&lt;/code&gt; middleware.</source>
          <target state="translated">您可以传递一个对象作为 &lt;code&gt;value&lt;/code&gt; 参数。然后将其序列化为JSON，并由 &lt;code&gt;bodyParser()&lt;/code&gt; 中间件进行解析。</target>
        </trans-unit>
        <trans-unit id="b33543cbc9ae9b756d1c80e53a9a660a2b80fc8f" translate="yes" xml:space="preserve">
          <source>You can provide multiple callback functions that behave just like middleware, except that these callbacks can invoke &lt;code&gt;next('route')&lt;/code&gt; to bypass the remaining route callback(s). You can use this mechanism to impose pre-conditions on a route, then pass control to subsequent routes if there is no reason to proceed with the current route.</source>
          <target state="translated">您可以提供行为类似于中间件的多个回调函数，除了这些回调可以调用 &lt;code&gt;next('route')&lt;/code&gt; 绕过其余的路由回调。您可以使用此机制在路由上施加先决条件，然后在没有理由继续使用当前路由的情况下将控制权传递给后续路由。</target>
        </trans-unit>
        <trans-unit id="4f413616449c4f8674342bf9524c0861b22e6054" translate="yes" xml:space="preserve">
          <source>You can provide multiple callback functions that behave like &lt;a href=&quot;using-middleware&quot;&gt;middleware&lt;/a&gt; to handle a request. The only exception is that these callbacks might invoke &lt;code&gt;next('route')&lt;/code&gt; to bypass the remaining route callbacks. You can use this mechanism to impose pre-conditions on a route, then pass control to subsequent routes if there&amp;rsquo;s no reason to proceed with the current route.</source>
          <target state="translated">您可以提供行为类似于&lt;a href=&quot;using-middleware&quot;&gt;中间件的&lt;/a&gt;多个回调函数来处理请求。唯一的例外是这些回调可能会调用 &lt;code&gt;next('route')&lt;/code&gt; 绕过其余的路由回调。您可以使用此机制在路由上施加先决条件，然后在没有理由继续使用当前路由的情况下将控制权传递给后续路由。</target>
        </trans-unit>
        <trans-unit id="3f3160d5888f53a0436dc8303e6a7b32382d04b1" translate="yes" xml:space="preserve">
          <source>You can provide multiple callbacks, and all are treated equally, and behave just like middleware, except that these callbacks may invoke &lt;code&gt;next('route')&lt;/code&gt; to bypass the remaining route callback(s). You can use this mechanism to perform pre-conditions on a route then pass control to subsequent routes when there is no reason to proceed with the route matched.</source>
          <target state="translated">您可以提供多个回调，所有回调都被同等对待，并且其行为与中间件相同，不同之处在于这些回调可以调用 &lt;code&gt;next('route')&lt;/code&gt; 绕过其余的路由回调。您可以使用此机制在路由上执行前提条件，然后在没有理由继续进行匹配的路由时将控制权传递给后续路由。</target>
        </trans-unit>
        <trans-unit id="4ffad1b43151b1628003dde27e303c902a2bcc81" translate="yes" xml:space="preserve">
          <source>You can run the application generator with the &lt;code&gt;npx&lt;/code&gt; command (available in Node.js 8.2.0).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="353ae66caf29607f1e61863fb32c5e585e174482" translate="yes" xml:space="preserve">
          <source>You can set IP addresses in any of the following ways:</source>
          <target state="translated">您可以通过以下任何一种方式设置IP地址。</target>
        </trans-unit>
        <trans-unit id="c556f65328f999b65f4ce06f22ac39ca15333189" translate="yes" xml:space="preserve">
          <source>You can set multiple cookies in a single response by calling &lt;code&gt;res.cookie&lt;/code&gt; multiple times, for example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="570005772e6d8637491c837390c8f86ee11ffd94" translate="yes" xml:space="preserve">
          <source>You can specify more than one debug namespace by assigning a comma-separated list of names:</source>
          <target state="translated">您可以通过指定一个以逗号分隔的名称列表来指定多个调试名称空间。</target>
        </trans-unit>
        <trans-unit id="6f6a1726fe64b7e031645302d21eb2777b6da994" translate="yes" xml:space="preserve">
          <source>You can specify more than one middleware function at the same mount path.</source>
          <target state="translated">您可以在同一挂载路径上指定多个中间件函数。</target>
        </trans-unit>
        <trans-unit id="8c8bfecfd02bf22b488eccf0b73dbf30f9f0e9f5" translate="yes" xml:space="preserve">
          <source>You can then run your automated tests to see what fails, and fix problems according to the updates listed below. After addressing test failures, run your app to see what errors occur. You&amp;rsquo;ll find out right away if the app uses any methods or properties that are not supported.</source>
          <target state="translated">然后，您可以运行自动化测试以查看失败的原因，并根据下面列出的更新来解决问题。解决测试失败后，运行您的应用程序以查看发生了什么错误。您会立即了解该应用程序是否使用了不支持的任何方法或属性。</target>
        </trans-unit>
        <trans-unit id="2878120e801b6538ece42279b7388f977e27d91e" translate="yes" xml:space="preserve">
          <source>You can then use a router for a particular root URL in this way separating your routes into files or even mini-apps.</source>
          <target state="translated">然后,你可以使用一个路由器为一个特定的根网址,以这种方式将你的路由分离成文件甚至是小程序。</target>
        </trans-unit>
        <trans-unit id="e59600f0f18a0f8c79ce7c42cdc9cbed617dab47" translate="yes" xml:space="preserve">
          <source>You can work with StrongLoop PM by using a powerful command-line interface tool called &lt;code&gt;slc&lt;/code&gt;, or a graphical tool called Arc. Arc is open source, with professional support provided by StrongLoop.</source>
          <target state="translated">您可以使用功能强大的命令行界面工具 &lt;code&gt;slc&lt;/code&gt; 或图形工具Arc 来使用StrongLoop PM 。Arc是开放源代码，由StrongLoop提供专业支持。</target>
        </trans-unit>
        <trans-unit id="5f6c2ca9bdc896797e058fe4987d31f4ea111eb1" translate="yes" xml:space="preserve">
          <source>You could also use a chain of handlers to rely on synchronous error catching, by reducing the asynchronous code to something trivial. For example:</source>
          <target state="translated">你也可以使用一个处理程序链来依靠同步错误捕获,通过将异步代码减少到一些琐碎的东西。比如说</target>
        </trans-unit>
        <trans-unit id="3b63f34d17f9e0ec5789ae699119332e25efa5cf" translate="yes" xml:space="preserve">
          <source>You define error-handling middleware in the same way as other middleware, except with four arguments instead of three; specifically with the signature &lt;code&gt;(err, req, res, next)&lt;/code&gt;:</source>
          <target state="translated">您使用与其他中间件相同的方式来定义错误处理中间件，除了使用四个参数而不是三个参数之外；特别是签名 &lt;code&gt;(err, req, res, next)&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="3b86858d0f37ba393118efcc6591e14415ebe664" translate="yes" xml:space="preserve">
          <source>You define error-handling middleware last, after other &lt;code&gt;app.use()&lt;/code&gt; and routes calls; for example:</source>
          <target state="translated">在其他 &lt;code&gt;app.use()&lt;/code&gt; 之后，您最后定义错误处理中间件并路由调用；例如：</target>
        </trans-unit>
        <trans-unit id="a01686d33994edd50201b6783e4606ef768e78f0" translate="yes" xml:space="preserve">
          <source>You define routing using methods of the Express &lt;code&gt;app&lt;/code&gt; object that correspond to HTTP methods; for example, &lt;code&gt;app.get()&lt;/code&gt; to handle GET requests and &lt;code&gt;app.post&lt;/code&gt; to handle POST requests. For a full list, see &lt;a href=&quot;../index#app.METHOD&quot;&gt;app.METHOD&lt;/a&gt;. You can also use &lt;a href=&quot;../index#app.all&quot;&gt;app.all()&lt;/a&gt; to handle all HTTP methods and &lt;a href=&quot;../index#app.use&quot;&gt;app.use()&lt;/a&gt; to specify middleware as the callback function (See &lt;a href=&quot;using-middleware&quot;&gt;Using middleware&lt;/a&gt; for details).</source>
          <target state="translated">您可以使用Express &lt;code&gt;app&lt;/code&gt; 对象的与HTTP方法相对应的方法来定义路由。例如， &lt;code&gt;app.get()&lt;/code&gt; 处理GET请求，而 &lt;code&gt;app.post&lt;/code&gt; 处理POST请求。有关完整列表，请参见&lt;a href=&quot;../index#app.METHOD&quot;&gt;app.METHOD&lt;/a&gt;。您还可以使用&lt;a href=&quot;../index#app.all&quot;&gt;app.all（）&lt;/a&gt;处理所有HTTP方法，并使用&lt;a href=&quot;../index#app.use&quot;&gt;app.use（）&lt;/a&gt;将中间件指定为回调函数（有关详细信息，请参见&lt;a href=&quot;using-middleware&quot;&gt;使用中间件&lt;/a&gt;）。</target>
        </trans-unit>
        <trans-unit id="42dcbc260ccad05bbf0833210397f0ef0602f413" translate="yes" xml:space="preserve">
          <source>You don&amp;rsquo;t! There&amp;rsquo;s no need to &amp;ldquo;render&amp;rdquo; HTML with the &lt;code&gt;res.render()&lt;/code&gt; function. If you have a specific file, use the &lt;code&gt;res.sendFile()&lt;/code&gt; function. If you are serving many assets from a directory, use the &lt;code&gt;express.static()&lt;/code&gt; middleware function.</source>
          <target state="translated">你不！无需使用 &lt;code&gt;res.render()&lt;/code&gt; 函数&amp;ldquo;渲染&amp;rdquo; HTML 。如果您有特定文件，请使用 &lt;code&gt;res.sendFile()&lt;/code&gt; 函数。如果要从目录中提供许多资产，请使用 &lt;code&gt;express.static()&lt;/code&gt; 中间件功能。</target>
        </trans-unit>
        <trans-unit id="f08fc535c4618cf05fb6de4cc356326814161ef2" translate="yes" xml:space="preserve">
          <source>You have now moved the functionality of &lt;code&gt;./bin/www&lt;/code&gt; back to &lt;code&gt;app.js&lt;/code&gt;. This change is not recommended, but the exercise helps you to understand how the &lt;code&gt;./bin/www&lt;/code&gt; file works, and why the &lt;code&gt;app.js&lt;/code&gt; file no longer starts on its own.</source>
          <target state="translated">现在，您已经转移的功能 &lt;code&gt;./bin/www&lt;/code&gt; 回 &lt;code&gt;app.js&lt;/code&gt; 。不建议进行此更改，但是此练习可帮助您了解 &lt;code&gt;./bin/www&lt;/code&gt; 文件的工作方式以及为何 &lt;code&gt;app.js&lt;/code&gt; 文件不再自行启动。</target>
        </trans-unit>
        <trans-unit id="a9d30ce5abc7d8039203f11555293bb4e8bbdba1" translate="yes" xml:space="preserve">
          <source>You may be familiar with Secure Socket Layer (SSL) encryption. &lt;a href=&quot;https://msdn.microsoft.com/en-us/library/windows/desktop/aa380515(v=vs.85).aspx&quot;&gt;TLS is simply the next progression of SSL&lt;/a&gt;. In other words, if you were using SSL before, consider upgrading to TLS. In general, we recommend Nginx to handle TLS. For a good reference to configure TLS on Nginx (and other servers), see &lt;a href=&quot;https://wiki.mozilla.org/Security/Server_Side_TLS#Recommended_Server_Configurations&quot;&gt;Recommended Server Configurations (Mozilla Wiki)&lt;/a&gt;.</source>
          <target state="translated">您可能熟悉安全套接字层（SSL）加密。&lt;a href=&quot;https://msdn.microsoft.com/en-us/library/windows/desktop/aa380515(v=vs.85).aspx&quot;&gt;TLS只是SSL的下一步发展&lt;/a&gt;。换句话说，如果您以前使用过SSL，请考虑升级到TLS。通常，我们建议Nginx处理TLS。有关在Nginx（和其他服务器）上配置TLS的良好参考，请参阅&lt;a href=&quot;https://wiki.mozilla.org/Security/Server_Side_TLS#Recommended_Server_Configurations&quot;&gt;推荐的服务器配置（Mozilla Wiki）&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="8aae250f7999dbc21f586d6ea27e4dee5436f84e" translate="yes" xml:space="preserve">
          <source>You must catch errors that occur in asynchronous code invoked by route handlers or middleware and pass them to Express for processing. For example:</source>
          <target state="translated">您必须捕捉路由处理程序或中间件调用的异步代码中发生的错误,并将其传递给 Express 进行处理。例如:</target>
        </trans-unit>
        <trans-unit id="91bff4e5944a817d2b779f6298b31e6262e47f1d" translate="yes" xml:space="preserve">
          <source>You no longer need to load the &lt;code&gt;app.router&lt;/code&gt; function. It is not a valid Express 4 app object, so remove the &lt;code&gt;app.use(app.router);&lt;/code&gt; code.</source>
          <target state="translated">您不再需要加载 &lt;code&gt;app.router&lt;/code&gt; 函数。它不是有效的Express 4应用程序对象，因此请删除 &lt;code&gt;app.use(app.router);&lt;/code&gt; 。码。</target>
        </trans-unit>
        <trans-unit id="4c280e38b87ac78f4bcb841159de9ed86291faa5" translate="yes" xml:space="preserve">
          <source>You will also notice that the &lt;code&gt;app.js&lt;/code&gt; file is now a Node.js module, in contrast to the standalone app that was generated by the old generator.</source>
          <target state="translated">您还将注意到 &lt;code&gt;app.js&lt;/code&gt; 文件现在是Node.js模块，这与旧生成器生成的独立应用程序不同。</target>
        </trans-unit>
        <trans-unit id="59082a2396586f774d1cab2f7a3f8a4b9c0f946d" translate="yes" xml:space="preserve">
          <source>Your app will now be able to render &lt;code&gt;.ntl&lt;/code&gt; files. Create a file named &lt;code&gt;index.ntl&lt;/code&gt; in the &lt;code&gt;views&lt;/code&gt; directory with the following content.</source>
          <target state="translated">您的应用现在将能够呈现 &lt;code&gt;.ntl&lt;/code&gt; 文件。在 &lt;code&gt;views&lt;/code&gt; 目录中创建一个名为 &lt;code&gt;index.ntl&lt;/code&gt; 的文件，内容如下。</target>
        </trans-unit>
        <trans-unit id="a838ff1a911eb3f4af98ef687b76715c682147c0" translate="yes" xml:space="preserve">
          <source>app.METHOD()</source>
          <target state="translated">app.METHOD()</target>
        </trans-unit>
        <trans-unit id="f3f6ec3046b7162e61285bc0748169141af181c0" translate="yes" xml:space="preserve">
          <source>app.METHOD(path, callback [, callback ...])</source>
          <target state="translated">app.METHOD(path,callback [,callback ...])</target>
        </trans-unit>
        <trans-unit id="72e55a2e4936fdca99b5697552b3b1e0469ff658" translate="yes" xml:space="preserve">
          <source>app.all()</source>
          <target state="translated">app.all()</target>
        </trans-unit>
        <trans-unit id="9cb57d8e4680cc2c1874ad526f059e2bed5a3251" translate="yes" xml:space="preserve">
          <source>app.all(path, callback [, callback ...])</source>
          <target state="translated">app.all(path,callback [,callback ...])</target>
        </trans-unit>
        <trans-unit id="b00be65b35b7e8b804e9efbd03c668fbeb75bc20" translate="yes" xml:space="preserve">
          <source>app.del()</source>
          <target state="translated">app.del()</target>
        </trans-unit>
        <trans-unit id="6b03211e8fe91b9a33ba359e93af1d45d34a839b" translate="yes" xml:space="preserve">
          <source>app.delete()</source>
          <target state="translated">app.delete()</target>
        </trans-unit>
        <trans-unit id="5dfa82fa9634c97068378ca973320ca0260c0545" translate="yes" xml:space="preserve">
          <source>app.delete(path, callback [, callback ...])</source>
          <target state="translated">app.delete(path,callback [,callback ...])</target>
        </trans-unit>
        <trans-unit id="a95bac08da335ff48120839521aa81dc0f56bc01" translate="yes" xml:space="preserve">
          <source>app.disable()</source>
          <target state="translated">app.disable()</target>
        </trans-unit>
        <trans-unit id="02d88135e3e28dd96dffcefb711a1e56d406811c" translate="yes" xml:space="preserve">
          <source>app.disable(name)</source>
          <target state="translated">app.disable(name)</target>
        </trans-unit>
        <trans-unit id="9d4957c4bc18288fc56a8d5179d909162132b1c0" translate="yes" xml:space="preserve">
          <source>app.disabled()</source>
          <target state="translated">app.disabled()</target>
        </trans-unit>
        <trans-unit id="461fd03f28cf1c66c31b58fe640165cb316282da" translate="yes" xml:space="preserve">
          <source>app.disabled(name)</source>
          <target state="translated">app.disabled(name)</target>
        </trans-unit>
        <trans-unit id="8a348956a1d39cf3ddf33f6585b104288457e209" translate="yes" xml:space="preserve">
          <source>app.enable()</source>
          <target state="translated">app.enable()</target>
        </trans-unit>
        <trans-unit id="6de3d9252ddaa1f91f299b9917c5bb7d0fe58e62" translate="yes" xml:space="preserve">
          <source>app.enable(name)</source>
          <target state="translated">app.enable(name)</target>
        </trans-unit>
        <trans-unit id="62d2c462b4c1d5268aaf45210d145baab573d4c7" translate="yes" xml:space="preserve">
          <source>app.enabled()</source>
          <target state="translated">app.enabled()</target>
        </trans-unit>
        <trans-unit id="e57ca2d1382c6376c7dd2231e97c8323651f2c64" translate="yes" xml:space="preserve">
          <source>app.enabled(name)</source>
          <target state="translated">app.enabled(name)</target>
        </trans-unit>
        <trans-unit id="ff09693ef1b27c6ac3769f579205fbe7fb7d7630" translate="yes" xml:space="preserve">
          <source>app.engine()</source>
          <target state="translated">app.engine()</target>
        </trans-unit>
        <trans-unit id="6839aa7526163d3421a1ab736549c8c402d226a7" translate="yes" xml:space="preserve">
          <source>app.engine(ext, callback)</source>
          <target state="translated">app.engine(ext,callback)</target>
        </trans-unit>
        <trans-unit id="c5f464cad95a85e6de551e6f032792402fe2a483" translate="yes" xml:space="preserve">
          <source>app.get()</source>
          <target state="translated">app.get()</target>
        </trans-unit>
        <trans-unit id="c7d373bd472acb2058c399476e974f26979ca762" translate="yes" xml:space="preserve">
          <source>app.get(name)</source>
          <target state="translated">app.get(name)</target>
        </trans-unit>
        <trans-unit id="bfc09379b954e0bc4cb7b44b6d30a18d269104a4" translate="yes" xml:space="preserve">
          <source>app.get(path, callback [, callback ...])</source>
          <target state="translated">app.get(path,callback [,callback ...])</target>
        </trans-unit>
        <trans-unit id="72e865215b0a584ffca00b4e67de78ec2a3e0ed0" translate="yes" xml:space="preserve">
          <source>app.listen()</source>
          <target state="translated">app.listen()</target>
        </trans-unit>
        <trans-unit id="42e83e86bcd51a22128cd9f638d86e1a90e22a97" translate="yes" xml:space="preserve">
          <source>app.listen([port[, host[, backlog]]][, callback])</source>
          <target state="translated">app.listen([port[,host[,backlog]][,callback])</target>
        </trans-unit>
        <trans-unit id="034b5efe6a9c5bc7bd5f0f7ff4b64b0cf43197eb" translate="yes" xml:space="preserve">
          <source>app.listen(path, [callback])</source>
          <target state="translated">app.listen(path,[callback])</target>
        </trans-unit>
        <trans-unit id="8553d4240cb81aa6198823b92dcb651766d4bf4b" translate="yes" xml:space="preserve">
          <source>app.locals</source>
          <target state="translated">app.locals</target>
        </trans-unit>
        <trans-unit id="bb7ebf675e483c5ae4f49f6af5f6ad24e55ef389" translate="yes" xml:space="preserve">
          <source>app.mountpath</source>
          <target state="translated">app.mountpath</target>
        </trans-unit>
        <trans-unit id="12cdb3903f6c8a973e6d0092c1fc7a9b98e2a650" translate="yes" xml:space="preserve">
          <source>app.on('mount', callback(parent))</source>
          <target state="translated">app.on('mount',callback(parent))</target>
        </trans-unit>
        <trans-unit id="3e5fafbbfac1475a116085409056abbc510708ae" translate="yes" xml:space="preserve">
          <source>app.on()</source>
          <target state="translated">app.on()</target>
        </trans-unit>
        <trans-unit id="5dd07676a8d0e78040af8d4aa702ee0fedf720c5" translate="yes" xml:space="preserve">
          <source>app.param()</source>
          <target state="translated">app.param()</target>
        </trans-unit>
        <trans-unit id="31899f869d9363a677df7cb478103a65d3574135" translate="yes" xml:space="preserve">
          <source>app.param([name], callback)</source>
          <target state="translated">app.param([name],callback)</target>
        </trans-unit>
        <trans-unit id="7d0c185ff686f9ce2a34776e2750f73918574444" translate="yes" xml:space="preserve">
          <source>app.param(fn)</source>
          <target state="translated">app.param(fn)</target>
        </trans-unit>
        <trans-unit id="08d2cd9e9b518830c37b54e4dcbfb58878f6b965" translate="yes" xml:space="preserve">
          <source>app.path()</source>
          <target state="translated">app.path()</target>
        </trans-unit>
        <trans-unit id="679596d299677c2bad263cb8f2aedfe469512252" translate="yes" xml:space="preserve">
          <source>app.post()</source>
          <target state="translated">app.post()</target>
        </trans-unit>
        <trans-unit id="4855f39f495af951f33dbd8c43bc77de838bf78d" translate="yes" xml:space="preserve">
          <source>app.post(path, callback [, callback ...])</source>
          <target state="translated">app.post(path,callback [,callback ...])</target>
        </trans-unit>
        <trans-unit id="8d30009bb11d533c956eb27eb017e8523b42d9d5" translate="yes" xml:space="preserve">
          <source>app.put()</source>
          <target state="translated">app.put()</target>
        </trans-unit>
        <trans-unit id="35a37cfb8f71d31dd9b48144a81923a746c61098" translate="yes" xml:space="preserve">
          <source>app.put(path, callback [, callback ...])</source>
          <target state="translated">app.put(path,callback [,callback ...])</target>
        </trans-unit>
        <trans-unit id="6165a666cad761f82cd239272ea43d20cfeabc9f" translate="yes" xml:space="preserve">
          <source>app.render()</source>
          <target state="translated">app.render()</target>
        </trans-unit>
        <trans-unit id="e7fe78a7c9aabf41daa35ff43d22dcd9da2b58cf" translate="yes" xml:space="preserve">
          <source>app.render(view, [locals], callback)</source>
          <target state="translated">app.render(view,[locals],callback)</target>
        </trans-unit>
        <trans-unit id="95cf6417b823019e37aac623934d67ce2bc3a036" translate="yes" xml:space="preserve">
          <source>app.route()</source>
          <target state="translated">app.route()</target>
        </trans-unit>
        <trans-unit id="ef403c5ae042d5139816a9b362f7073de4fc6a22" translate="yes" xml:space="preserve">
          <source>app.route(path)</source>
          <target state="translated">app.route(path)</target>
        </trans-unit>
        <trans-unit id="54160d53742fa246cf6e9617e93c555bef2ad5ee" translate="yes" xml:space="preserve">
          <source>app.router</source>
          <target state="translated">app.router</target>
        </trans-unit>
        <trans-unit id="a5e371552e3d2936a3d4bdf72646abf244a4346c" translate="yes" xml:space="preserve">
          <source>app.set()</source>
          <target state="translated">app.set()</target>
        </trans-unit>
        <trans-unit id="5ce1dd408ca0b7f0ffc9dfc6cf8505ec39c5e608" translate="yes" xml:space="preserve">
          <source>app.set(name, value)</source>
          <target state="translated">app.set(name,value)</target>
        </trans-unit>
        <trans-unit id="64cc94153849c91b77d0739b693a0814eee45666" translate="yes" xml:space="preserve">
          <source>app.use()</source>
          <target state="translated">app.use()</target>
        </trans-unit>
        <trans-unit id="59d50fcd03051afcdfa39c0a77fb15c313db975d" translate="yes" xml:space="preserve">
          <source>app.use([path,] callback [, callback...])</source>
          <target state="translated">app.use([path,]callback [,callback...])</target>
        </trans-unit>
        <trans-unit id="e4c94651c6dfed693ca8e5c7ebc8e201be81fb74" translate="yes" xml:space="preserve">
          <source>compression</source>
          <target state="translated">compression</target>
        </trans-unit>
        <trans-unit id="cab0f5624db8cb73abb99e85bd9ca1d11d1458c5" translate="yes" xml:space="preserve">
          <source>connect-timeout</source>
          <target state="translated">connect-timeout</target>
        </trans-unit>
        <trans-unit id="558682e9a8606eadee61d393c36c68d315869b3f" translate="yes" xml:space="preserve">
          <source>cookie-parser</source>
          <target state="translated">cookie-parser</target>
        </trans-unit>
        <trans-unit id="c4736ce5561fcb21e9981845ff2907e2388f8a62" translate="yes" xml:space="preserve">
          <source>cookie-session</source>
          <target state="translated">cookie-session</target>
        </trans-unit>
        <trans-unit id="41ee80a53c1d882ca9c974670f1c037fc380e83e" translate="yes" xml:space="preserve">
          <source>csurf</source>
          <target state="translated">csurf</target>
        </trans-unit>
        <trans-unit id="1587c51d541276724d2e1d176819746317137164" translate="yes" xml:space="preserve">
          <source>dotfiles</source>
          <target state="translated">dotfiles</target>
        </trans-unit>
        <trans-unit id="27617c0e0564364346bd433b20612f0b0fccc154" translate="yes" xml:space="preserve">
          <source>errorhandler</source>
          <target state="translated">errorhandler</target>
        </trans-unit>
        <trans-unit id="bba37bccd187ac39286ab2f65c0a90b2a327a437" translate="yes" xml:space="preserve">
          <source>express()</source>
          <target state="translated">express()</target>
        </trans-unit>
        <trans-unit id="6ca9c35e4a89979f1d80e1aeb61800650968b7fb" translate="yes" xml:space="preserve">
          <source>express-session</source>
          <target state="translated">express-session</target>
        </trans-unit>
        <trans-unit id="d8399bf4ffcaf94469d588787f36eb4347b161a6" translate="yes" xml:space="preserve">
          <source>express.Router</source>
          <target state="translated">express.Router</target>
        </trans-unit>
        <trans-unit id="1d97037b9bb7fc5944dc67651d55bbe109673f16" translate="yes" xml:space="preserve">
          <source>express.Router()</source>
          <target state="translated">express.Router()</target>
        </trans-unit>
        <trans-unit id="c9ebb15c536c0c81e95d98819026323f2008108e" translate="yes" xml:space="preserve">
          <source>express.Router([options])</source>
          <target state="translated">express.Router([options])</target>
        </trans-unit>
        <trans-unit id="7d24a187b8abd31ebe16afd44c64f0a6847367d0" translate="yes" xml:space="preserve">
          <source>express.json()</source>
          <target state="translated">express.json()</target>
        </trans-unit>
        <trans-unit id="173878196b2e58c5b7b68d23f968b05d6909ab14" translate="yes" xml:space="preserve">
          <source>express.json([options])</source>
          <target state="translated">express.json([options])</target>
        </trans-unit>
        <trans-unit id="2022cb41d6316384d8997d071811d1c3c7e759ff" translate="yes" xml:space="preserve">
          <source>express.raw([options])</source>
          <target state="translated">express.raw([options])</target>
        </trans-unit>
        <trans-unit id="e80f14809aed87513756371d68b4053e20766a7c" translate="yes" xml:space="preserve">
          <source>express.static()</source>
          <target state="translated">express.static()</target>
        </trans-unit>
        <trans-unit id="37bdc01607dc7c622029d937af399044eaad0e41" translate="yes" xml:space="preserve">
          <source>express.static(root, [options])</source>
          <target state="translated">express.static(root,[options])</target>
        </trans-unit>
        <trans-unit id="bdb435b6b6896ccbebff549991e1fe352694a0a8" translate="yes" xml:space="preserve">
          <source>express.text([options])</source>
          <target state="translated">express.text([options])</target>
        </trans-unit>
        <trans-unit id="931644caa0ed99aad45bfe9b177b15b07c545079" translate="yes" xml:space="preserve">
          <source>express.urlencoded()</source>
          <target state="translated">express.urlencoded()</target>
        </trans-unit>
        <trans-unit id="a0bbf7f5c077234fdae52b5ecb0b095d579e9c14" translate="yes" xml:space="preserve">
          <source>express.urlencoded([options])</source>
          <target state="translated">express.urlencoded([options])</target>
        </trans-unit>
        <trans-unit id="302537ac017dcbf48c03777d4be2e78fcd5aa71a" translate="yes" xml:space="preserve">
          <source>fallthrough</source>
          <target state="translated">fallthrough</target>
        </trans-unit>
        <trans-unit id="1f369c8bd1569394fb3ddb8f4d09cb9a9b21e527" translate="yes" xml:space="preserve">
          <source>http-terminator</source>
          <target state="translated">http-terminator</target>
        </trans-unit>
        <trans-unit id="c7868b0ca6417a8c9e4ea8eff421703e5ff95304" translate="yes" xml:space="preserve">
          <source>inherit the value of this setting, even though it has a default value.</source>
          <target state="translated">继承此设置的值,即使它有一个默认值。</target>
        </trans-unit>
        <trans-unit id="78ffe21eeabe8d0af01cdddd41a5adee0f68d76d" translate="yes" xml:space="preserve">
          <source>linklocal - &lt;code&gt;169.254.0.0/16&lt;/code&gt;, &lt;code&gt;fe80::/10&lt;/code&gt;</source>
          <target state="translated">linklocal- &lt;code&gt;169.254.0.0/16&lt;/code&gt; &lt;code&gt;fe80::/10&lt;/code&gt; ，fe80 :: / 10</target>
        </trans-unit>
        <trans-unit id="c3115012771630a9f133aea2eef1c5714c36b40d" translate="yes" xml:space="preserve">
          <source>loopback - &lt;code&gt;127.0.0.1/8&lt;/code&gt;, &lt;code&gt;::1/128&lt;/code&gt;</source>
          <target state="translated">回送 &lt;code&gt;127.0.0.1/8&lt;/code&gt; ， &lt;code&gt;::1/128&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="0b00fa9d468f2a76a3f394f47bf897a57c3841bf" translate="yes" xml:space="preserve">
          <source>method-override</source>
          <target state="translated">method-override</target>
        </trans-unit>
        <trans-unit id="519bc3f0fda96312357e1409de278bff4d5f5b25" translate="yes" xml:space="preserve">
          <source>morgan</source>
          <target state="translated">morgan</target>
        </trans-unit>
        <trans-unit id="d1854cae891ec7b29161ccaf79a24b00c274bdaa" translate="yes" xml:space="preserve">
          <source>n</source>
          <target state="translated">n</target>
        </trans-unit>
        <trans-unit id="0573a9a28d76348073d0992e349e6d16e168c2b6" translate="yes" xml:space="preserve">
          <source>req.accepts()</source>
          <target state="translated">req.accepts()</target>
        </trans-unit>
        <trans-unit id="c2fd085c6f47415a8b07cb8793c96b2ab5ce86a3" translate="yes" xml:space="preserve">
          <source>req.accepts(types)</source>
          <target state="translated">req.accepts(types)</target>
        </trans-unit>
        <trans-unit id="abdf0f7bfa9bcee5f8ae30009b58641de200222e" translate="yes" xml:space="preserve">
          <source>req.acceptsCharsets()</source>
          <target state="translated">req.acceptsCharsets()</target>
        </trans-unit>
        <trans-unit id="f9df014f398a14da8070a481c747f1cc52544f26" translate="yes" xml:space="preserve">
          <source>req.acceptsCharsets(charset [, ...])</source>
          <target state="translated">req.acceptsCharsets(charset[,...])</target>
        </trans-unit>
        <trans-unit id="c500b7d919d3ee5d83cc4d699081cf3168cd9dce" translate="yes" xml:space="preserve">
          <source>req.acceptsEncodings()</source>
          <target state="translated">req.acceptsEncodings()</target>
        </trans-unit>
        <trans-unit id="e59cb2c81e6e04fd410d33fcf5349b0642ee9b26" translate="yes" xml:space="preserve">
          <source>req.acceptsEncodings(encoding [, ...])</source>
          <target state="translated">req.acceptsEncodings(encoding[,...])</target>
        </trans-unit>
        <trans-unit id="65fed5fbe88100a956f74f80374b9dc66ad25fea" translate="yes" xml:space="preserve">
          <source>req.acceptsLanguages()</source>
          <target state="translated">req.acceptsLanguages()</target>
        </trans-unit>
        <trans-unit id="91c737a7254e0522e28123cd9831e5b72318c684" translate="yes" xml:space="preserve">
          <source>req.acceptsLanguages(lang [, ...])</source>
          <target state="translated">req.acceptsLanguages(lang[,...])</target>
        </trans-unit>
        <trans-unit id="ceea344f474505d214adecf449c7ebc5bc076dc5" translate="yes" xml:space="preserve">
          <source>req.app</source>
          <target state="translated">req.app</target>
        </trans-unit>
        <trans-unit id="a64ffadcd5fa0a8a144649dcf2c8ff3c2a409c29" translate="yes" xml:space="preserve">
          <source>req.baseUrl</source>
          <target state="translated">req.baseUrl</target>
        </trans-unit>
        <trans-unit id="c09b3cf3a63a04bfdc00b09ed53963e899af3079" translate="yes" xml:space="preserve">
          <source>req.body</source>
          <target state="translated">req.body</target>
        </trans-unit>
        <trans-unit id="b0fe86d4749862cf23747240c6adb64773533292" translate="yes" xml:space="preserve">
          <source>req.cookies</source>
          <target state="translated">req.cookies</target>
        </trans-unit>
        <trans-unit id="6d10b1f040b25f3b1f9225c2cc3d139126e3bc45" translate="yes" xml:space="preserve">
          <source>req.fresh</source>
          <target state="translated">req.fresh</target>
        </trans-unit>
        <trans-unit id="2caae5d78eb439354a3392577f19ad92c976190d" translate="yes" xml:space="preserve">
          <source>req.get()</source>
          <target state="translated">req.get()</target>
        </trans-unit>
        <trans-unit id="dc830fb7ae5e0449b46798a7312055cfb356a346" translate="yes" xml:space="preserve">
          <source>req.get(field)</source>
          <target state="translated">req.get(field)</target>
        </trans-unit>
        <trans-unit id="3315a1d3f43addc98b7837512e14740a9484e908" translate="yes" xml:space="preserve">
          <source>req.host</source>
          <target state="translated">req.host</target>
        </trans-unit>
        <trans-unit id="a8c128a537175820007a6e925205fe65ff896d61" translate="yes" xml:space="preserve">
          <source>req.hostname</source>
          <target state="translated">req.hostname</target>
        </trans-unit>
        <trans-unit id="38d0fb279d6126607ded35c39ff584032668dc2c" translate="yes" xml:space="preserve">
          <source>req.ip</source>
          <target state="translated">req.ip</target>
        </trans-unit>
        <trans-unit id="4067c6f2a97609981b358cee9d6dce548fdda8e3" translate="yes" xml:space="preserve">
          <source>req.ips</source>
          <target state="translated">req.ips</target>
        </trans-unit>
        <trans-unit id="9b1d85aba335e65747c25c6810d61a12e4cf7266" translate="yes" xml:space="preserve">
          <source>req.is()</source>
          <target state="translated">req.is()</target>
        </trans-unit>
        <trans-unit id="24269cbb1290603169b693b936906800d7ea35ef" translate="yes" xml:space="preserve">
          <source>req.is(type)</source>
          <target state="translated">req.is(type)</target>
        </trans-unit>
        <trans-unit id="0375227020ede7f69e6cfa0585a2a18ba889b300" translate="yes" xml:space="preserve">
          <source>req.method</source>
          <target state="translated">req.method</target>
        </trans-unit>
        <trans-unit id="e7d41d891589f04499a39addb298ca4c20450922" translate="yes" xml:space="preserve">
          <source>req.originalUrl</source>
          <target state="translated">req.originalUrl</target>
        </trans-unit>
        <trans-unit id="7a2f22abe7b87d06a9ada54ab2215e59e94271bf" translate="yes" xml:space="preserve">
          <source>req.param()</source>
          <target state="translated">req.param()</target>
        </trans-unit>
        <trans-unit id="def4edeb854e454304ae9f045c230d5ff08a401a" translate="yes" xml:space="preserve">
          <source>req.param(name [, defaultValue])</source>
          <target state="translated">req.param(name[,defaultValue])</target>
        </trans-unit>
        <trans-unit id="2d0ab7cc86b03e2f1c73f0cea5ca521aaac2782e" translate="yes" xml:space="preserve">
          <source>req.param(name)</source>
          <target state="translated">req.param(name)</target>
        </trans-unit>
        <trans-unit id="d9f1403de6f4160062a44db7f69ab376946a8c24" translate="yes" xml:space="preserve">
          <source>req.params</source>
          <target state="translated">req.params</target>
        </trans-unit>
        <trans-unit id="19f5f28b5e85f198eb2b25e6d302763759110a3f" translate="yes" xml:space="preserve">
          <source>req.path</source>
          <target state="translated">req.path</target>
        </trans-unit>
        <trans-unit id="7c1a4b0d2680a7dec6110dc617959b9e785871da" translate="yes" xml:space="preserve">
          <source>req.protocol</source>
          <target state="translated">req.protocol</target>
        </trans-unit>
        <trans-unit id="979e40316b240d89f020ab27fccc81fe9d093ba1" translate="yes" xml:space="preserve">
          <source>req.query</source>
          <target state="translated">req.query</target>
        </trans-unit>
        <trans-unit id="16a46aca4b79907155e4bfec2d5711b9bea8dad6" translate="yes" xml:space="preserve">
          <source>req.range()</source>
          <target state="translated">req.range()</target>
        </trans-unit>
        <trans-unit id="84530fcf152ab20166be9822d850fe6e0d9d4405" translate="yes" xml:space="preserve">
          <source>req.range(size[, options])</source>
          <target state="translated">req.range(size[,options])</target>
        </trans-unit>
        <trans-unit id="63a009be30a101bad68597d689fda2a2e086257c" translate="yes" xml:space="preserve">
          <source>req.route</source>
          <target state="translated">req.route</target>
        </trans-unit>
        <trans-unit id="8a4e0a01700a2de190316747dbbb3acd298dfee2" translate="yes" xml:space="preserve">
          <source>req.secure</source>
          <target state="translated">req.secure</target>
        </trans-unit>
        <trans-unit id="da8c2de355db5eb4da50c8fc89efa7c9e5c92780" translate="yes" xml:space="preserve">
          <source>req.signedCookies</source>
          <target state="translated">req.signedCookies</target>
        </trans-unit>
        <trans-unit id="67dd3f50bf529295dee306d162ee028e21478dc0" translate="yes" xml:space="preserve">
          <source>req.stale</source>
          <target state="translated">req.stale</target>
        </trans-unit>
        <trans-unit id="3ca99d41ad8dad2a97a61cdb2b14ce48aca53b93" translate="yes" xml:space="preserve">
          <source>req.subdomains</source>
          <target state="translated">req.subdomains</target>
        </trans-unit>
        <trans-unit id="6d92923eaa52431a959ff1f65835d2111ab1e9f5" translate="yes" xml:space="preserve">
          <source>req.xhr</source>
          <target state="translated">req.xhr</target>
        </trans-unit>
        <trans-unit id="dbfdd9f3454d267306feb0bbf77da093dbfa0ffd" translate="yes" xml:space="preserve">
          <source>res.app</source>
          <target state="translated">res.app</target>
        </trans-unit>
        <trans-unit id="552d5cd0a26979f6cb9eab9511549012d2edd7ff" translate="yes" xml:space="preserve">
          <source>res.append()</source>
          <target state="translated">res.append()</target>
        </trans-unit>
        <trans-unit id="46da46a5dcc17b35a2f1c7c1a554e22e571cd01e" translate="yes" xml:space="preserve">
          <source>res.append(field [, value])</source>
          <target state="translated">res.append(field[,value])</target>
        </trans-unit>
        <trans-unit id="60065656c823adc312515e29c90e7ac4a6a58fe4" translate="yes" xml:space="preserve">
          <source>res.attachment()</source>
          <target state="translated">res.attachment()</target>
        </trans-unit>
        <trans-unit id="c6bf1656677d6be8b1bf6d015dd8a465026949cf" translate="yes" xml:space="preserve">
          <source>res.attachment([filename])</source>
          <target state="translated">res.attachment([filename])</target>
        </trans-unit>
        <trans-unit id="279a92c6f0d376e1ca3f7160c456a7ea76b73ea8" translate="yes" xml:space="preserve">
          <source>res.clearCookie()</source>
          <target state="translated">res.clearCookie()</target>
        </trans-unit>
        <trans-unit id="5450dea065376384554a1043dd594f31e084177a" translate="yes" xml:space="preserve">
          <source>res.clearCookie(name [, options])</source>
          <target state="translated">res.clearCookie(name[,options])</target>
        </trans-unit>
        <trans-unit id="022e05e9c9e3db5d610cb27c43d21465c05c5864" translate="yes" xml:space="preserve">
          <source>res.cookie()</source>
          <target state="translated">res.cookie()</target>
        </trans-unit>
        <trans-unit id="7ed0a66256d36951ef2068cb85bdb6028d166d37" translate="yes" xml:space="preserve">
          <source>res.cookie(name, value [, options])</source>
          <target state="translated">res.cookie(name,value [,options])</target>
        </trans-unit>
        <trans-unit id="83716236a26c5b875be376269e1bc6e4e8e82209" translate="yes" xml:space="preserve">
          <source>res.download()</source>
          <target state="translated">res.download()</target>
        </trans-unit>
        <trans-unit id="f05b3a2ae767a9068e7ee75549478b240c915314" translate="yes" xml:space="preserve">
          <source>res.download(path [, filename] [, options] [, fn])</source>
          <target state="translated">res.download(path [,filename][,options][,fn])</target>
        </trans-unit>
        <trans-unit id="819c01b624ee810f1c8dcdc320f86a26a308d917" translate="yes" xml:space="preserve">
          <source>res.end()</source>
          <target state="translated">res.end()</target>
        </trans-unit>
        <trans-unit id="b5bf967b0b9915d9a2a120f53bab1736cb9cf7bb" translate="yes" xml:space="preserve">
          <source>res.end([data] [, encoding])</source>
          <target state="translated">res.end([数据][,编码])</target>
        </trans-unit>
        <trans-unit id="001efc2ac33184e05bd5985cfe6848826d30e9db" translate="yes" xml:space="preserve">
          <source>res.format()</source>
          <target state="translated">res.format()</target>
        </trans-unit>
        <trans-unit id="df6f32370a29d86049d9e95d67f57d6b17424f88" translate="yes" xml:space="preserve">
          <source>res.format(object)</source>
          <target state="translated">res.format(object)</target>
        </trans-unit>
        <trans-unit id="1eac806898fcfdfd6d848cab03a6f41e01759059" translate="yes" xml:space="preserve">
          <source>res.get()</source>
          <target state="translated">res.get()</target>
        </trans-unit>
        <trans-unit id="f47260b11a7d3f7d396eb8374b11dde3e08200b4" translate="yes" xml:space="preserve">
          <source>res.get(field)</source>
          <target state="translated">res.get(field)</target>
        </trans-unit>
        <trans-unit id="ad044b84dc8dd0f126496fb95d0d243240abd61a" translate="yes" xml:space="preserve">
          <source>res.headersSent</source>
          <target state="translated">res.headersSent</target>
        </trans-unit>
        <trans-unit id="104ecc2c15e364a063fe2a8ee446da65e5358d02" translate="yes" xml:space="preserve">
          <source>res.json()</source>
          <target state="translated">res.json()</target>
        </trans-unit>
        <trans-unit id="d4c0c7d52d4a80d1e599383e993776c1cb7b32fb" translate="yes" xml:space="preserve">
          <source>res.json([body])</source>
          <target state="translated">res.json([body])</target>
        </trans-unit>
        <trans-unit id="a00a09ee307543b703439968f17119a2c3da75aa" translate="yes" xml:space="preserve">
          <source>res.json(obj, status)</source>
          <target state="translated">res.json (volume,status)</target>
        </trans-unit>
        <trans-unit id="e66c858e7faea6fd4a219f62263e2828333593ac" translate="yes" xml:space="preserve">
          <source>res.jsonp()</source>
          <target state="translated">res.jsonp()</target>
        </trans-unit>
        <trans-unit id="7e4ca2e94d3497ba0a53dcbfbc3151b555ff5060" translate="yes" xml:space="preserve">
          <source>res.jsonp([body])</source>
          <target state="translated">res.jsonp([body])</target>
        </trans-unit>
        <trans-unit id="cee87dab6a4a380352567cc52f41aebe7610b1ee" translate="yes" xml:space="preserve">
          <source>res.jsonp(obj, status)</source>
          <target state="translated">res.jsonp(obj,status)</target>
        </trans-unit>
        <trans-unit id="8547ef25de8f7b6be7966ae7fa6bc5480ec080b6" translate="yes" xml:space="preserve">
          <source>res.links()</source>
          <target state="translated">res.links()</target>
        </trans-unit>
        <trans-unit id="a8fe9e83ad549a184cfb5dabd6039a97c6aa1ead" translate="yes" xml:space="preserve">
          <source>res.links(links)</source>
          <target state="translated">res.links(links)</target>
        </trans-unit>
        <trans-unit id="10ee7e912d3f45329a7e20dfe0929a9eba1e770c" translate="yes" xml:space="preserve">
          <source>res.locals</source>
          <target state="translated">res.locals</target>
        </trans-unit>
        <trans-unit id="ecee29772d360af4c9df81955546ec19d2bab7fd" translate="yes" xml:space="preserve">
          <source>res.location()</source>
          <target state="translated">res.location()</target>
        </trans-unit>
        <trans-unit id="3648756abde5edf94fe1a44e7ffec86fcd7fde72" translate="yes" xml:space="preserve">
          <source>res.location(path)</source>
          <target state="translated">res.location(path)</target>
        </trans-unit>
        <trans-unit id="db689745fd1784885c81318dd7a36275a572b475" translate="yes" xml:space="preserve">
          <source>res.redirect()</source>
          <target state="translated">res.redirect()</target>
        </trans-unit>
        <trans-unit id="77c12ba62b8063aed92cd0ac9a19b38b6fad6893" translate="yes" xml:space="preserve">
          <source>res.redirect([status,] path)</source>
          <target state="translated">res.redirect([status,]path)</target>
        </trans-unit>
        <trans-unit id="2c56c99126aaef66b730ddeeea5cdac83d9fd31a" translate="yes" xml:space="preserve">
          <source>res.render()</source>
          <target state="translated">res.render()</target>
        </trans-unit>
        <trans-unit id="aade41007808e4f875a0cccad77bd169dc15fc04" translate="yes" xml:space="preserve">
          <source>res.render(view [, locals] [, callback])</source>
          <target state="translated">res.render(view [,locals][,callback])</target>
        </trans-unit>
        <trans-unit id="80a399e3340e14335bb31f075b3dc0da017d9ece" translate="yes" xml:space="preserve">
          <source>res.send()</source>
          <target state="translated">res.send()</target>
        </trans-unit>
        <trans-unit id="4b226cc66a813582f24d0d59aee2733b034ce1ba" translate="yes" xml:space="preserve">
          <source>res.send([body])</source>
          <target state="translated">res.send([body])</target>
        </trans-unit>
        <trans-unit id="9ee6550cba81611d25838adfbe6c17488a1310a6" translate="yes" xml:space="preserve">
          <source>res.send(body, status)</source>
          <target state="translated">res.send(body,status)</target>
        </trans-unit>
        <trans-unit id="1191cee7db001968f190519ebed49bc5b3676627" translate="yes" xml:space="preserve">
          <source>res.send(status)</source>
          <target state="translated">res.send(status)</target>
        </trans-unit>
        <trans-unit id="dc6c0e48c64bbfcdfeb3e7af3d83e26cc72c61e9" translate="yes" xml:space="preserve">
          <source>res.sendFile()</source>
          <target state="translated">res.sendFile()</target>
        </trans-unit>
        <trans-unit id="6f6accc02d8f1c14cc0424189472752ee3a2d51e" translate="yes" xml:space="preserve">
          <source>res.sendFile(path [, options] [, fn])</source>
          <target state="translated">res.sendFile(path [,options][,fn])</target>
        </trans-unit>
        <trans-unit id="63dd552f80083a69d873a3e60807a5bafd63e340" translate="yes" xml:space="preserve">
          <source>res.sendStatus()</source>
          <target state="translated">res.sendStatus()</target>
        </trans-unit>
        <trans-unit id="bf307262cb0eb7a057c0d9cb5503342c3bb82042" translate="yes" xml:space="preserve">
          <source>res.sendStatus(statusCode)</source>
          <target state="translated">res.sendStatus(statusCode)</target>
        </trans-unit>
        <trans-unit id="71f7e30176b432408f38acda415a62d8ddcd272e" translate="yes" xml:space="preserve">
          <source>res.sendfile()</source>
          <target state="translated">res.sendfile()</target>
        </trans-unit>
        <trans-unit id="19bb83ed5ec58c3a114e87c47ae515179e617cb7" translate="yes" xml:space="preserve">
          <source>res.set()</source>
          <target state="translated">res.set()</target>
        </trans-unit>
        <trans-unit id="5a2e87ca7b60a593207c894c6eda7ffff24eaa3a" translate="yes" xml:space="preserve">
          <source>res.set(field [, value])</source>
          <target state="translated">res.set(field[,value])</target>
        </trans-unit>
        <trans-unit id="1b5a22853f5922e76efab1500ca1fe41ea759736" translate="yes" xml:space="preserve">
          <source>res.status()</source>
          <target state="translated">res.status()</target>
        </trans-unit>
        <trans-unit id="eefce9919c36ec6a0adeeedc7191b80abc86408b" translate="yes" xml:space="preserve">
          <source>res.status(code)</source>
          <target state="translated">res.status(code)</target>
        </trans-unit>
        <trans-unit id="b0127d5b2f0d9821c360ef760121e602c0d2bf22" translate="yes" xml:space="preserve">
          <source>res.type()</source>
          <target state="translated">res.type()</target>
        </trans-unit>
        <trans-unit id="d38e248fd694a0958037ec7f6f91a3665cf72c8d" translate="yes" xml:space="preserve">
          <source>res.type(type)</source>
          <target state="translated">res.type(type)</target>
        </trans-unit>
        <trans-unit id="44730073d9f80b39259a36c8ad46e35cdc2889e4" translate="yes" xml:space="preserve">
          <source>res.vary()</source>
          <target state="translated">res.vary()</target>
        </trans-unit>
        <trans-unit id="690d3d1d374a6aa2294ce75a4bfda0fd1b430341" translate="yes" xml:space="preserve">
          <source>res.vary(field)</source>
          <target state="translated">res.vary(field)</target>
        </trans-unit>
        <trans-unit id="55bc846e88a6febe851934450a72d65318b85f78" translate="yes" xml:space="preserve">
          <source>response-time</source>
          <target state="translated">response-time</target>
        </trans-unit>
        <trans-unit id="1c94ac827ab88d29cc39474371e7a8b70d603c5f" translate="yes" xml:space="preserve">
          <source>router.METHOD()</source>
          <target state="translated">router.METHOD()</target>
        </trans-unit>
        <trans-unit id="6eb6a302f12a6f6d5e9ddef289f65eb7793b8825" translate="yes" xml:space="preserve">
          <source>router.METHOD(path, [callback, ...] callback)</source>
          <target state="translated">路由器.METHOD(path,[callback,...]callback)</target>
        </trans-unit>
        <trans-unit id="f84e6dac1f8d334e00c2415507c5d6337751fe51" translate="yes" xml:space="preserve">
          <source>router.all()</source>
          <target state="translated">router.all()</target>
        </trans-unit>
        <trans-unit id="c0e47131c47c4c81e093b88f5f48c3a373b54e8f" translate="yes" xml:space="preserve">
          <source>router.all(path, [callback, ...] callback)</source>
          <target state="translated">router.all(path,[callback,...]callback)</target>
        </trans-unit>
        <trans-unit id="c3cbe5704d39a68da489447cd2f492118cb8f1a7" translate="yes" xml:space="preserve">
          <source>router.param()</source>
          <target state="translated">router.param()</target>
        </trans-unit>
        <trans-unit id="8b9b95024a7fb7e4502a8f587f2b8cd47c7cffe4" translate="yes" xml:space="preserve">
          <source>router.param(name, callback)</source>
          <target state="translated">路由器.param(name,callback)</target>
        </trans-unit>
        <trans-unit id="05213405ad3e982f74ba1bdb896dba6ebd383604" translate="yes" xml:space="preserve">
          <source>router.route()</source>
          <target state="translated">router.route()</target>
        </trans-unit>
        <trans-unit id="6b74d17e788a4608e25428b4650dca605ba8c685" translate="yes" xml:space="preserve">
          <source>router.route(path)</source>
          <target state="translated">router.route(path)</target>
        </trans-unit>
        <trans-unit id="21765202948a7298719daa10e75001db652eb2f9" translate="yes" xml:space="preserve">
          <source>router.use()</source>
          <target state="translated">router.use()</target>
        </trans-unit>
        <trans-unit id="777cd87b38a78f87aaa233a8508aa0bcc8e8537a" translate="yes" xml:space="preserve">
          <source>router.use([path], [function, ...] function)</source>
          <target state="translated">router.use([path],[function,...]function)</target>
        </trans-unit>
        <trans-unit id="0af74e3c01ca7b6492b5d01b640ecb8188796e1f" translate="yes" xml:space="preserve">
          <source>serve-favicon</source>
          <target state="translated">serve-favicon</target>
        </trans-unit>
        <trans-unit id="d15917a9a70998b4e091520ab28f9727ef390f0f" translate="yes" xml:space="preserve">
          <source>serve-index</source>
          <target state="translated">serve-index</target>
        </trans-unit>
        <trans-unit id="fae0c2c0f96ac832e715c29ba152e7253c8f2987" translate="yes" xml:space="preserve">
          <source>serve-static</source>
          <target state="translated">serve-static</target>
        </trans-unit>
        <trans-unit id="36a8065db3b305cacce5d2a79c6eb94f976ee64e" translate="yes" xml:space="preserve">
          <source>setHeaders</source>
          <target state="translated">setHeaders</target>
        </trans-unit>
        <trans-unit id="4ec425e40046d264c02628b94f12daa230c34ee4" translate="yes" xml:space="preserve">
          <source>uniquelocal - &lt;code&gt;10.0.0.0/8&lt;/code&gt;, &lt;code&gt;172.16.0.0/12&lt;/code&gt;, &lt;code&gt;192.168.0.0/16&lt;/code&gt;, &lt;code&gt;fc00::/7&lt;/code&gt;</source>
          <target state="translated">uniquelocal - &lt;code&gt;10.0.0.0/8&lt;/code&gt; ， &lt;code&gt;172.16.0.0/12&lt;/code&gt; ， &lt;code&gt;192.168.0.0/16&lt;/code&gt; ， &lt;code&gt;fc00::/7&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="f60bd82a61f2f560092ee3376ac781a684f11d57" translate="yes" xml:space="preserve">
          <source>vhost</source>
          <target state="translated">vhost</target>
        </trans-unit>
        <trans-unit id="37d41699bdee4fcb969ca499eb0f8b82c60d59cc" translate="yes" xml:space="preserve">
          <source>will</source>
          <target state="translated">will</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
