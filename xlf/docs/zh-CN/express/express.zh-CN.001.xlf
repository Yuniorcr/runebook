<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="zh-CN" datatype="htmlbody" original="express">
    <body>
      <group id="express">
        <trans-unit id="82772fb274b426ca103a906a4cdb5fe75509c9c5" translate="yes" xml:space="preserve">
          <source>&quot;extended&quot;</source>
          <target state="translated">&quot;extended&quot;</target>
        </trans-unit>
        <trans-unit id="ceb7b4c4dcc301fcffa3a79f50225dd8d319789e" translate="yes" xml:space="preserve">
          <source>&amp;copy; 2017 StrongLoop, IBM, and other expressjs.com contributors.</source>
          <target state="translated">&amp;copy;2017 StrongLoop，IBM和其他expressjs.com贡献者。</target>
        </trans-unit>
        <trans-unit id="5e488a6a97202260e840272ab8794a2e4bbd2f41" translate="yes" xml:space="preserve">
          <source>&amp;ldquo;allow&amp;rdquo; - No special treatment for dotfiles.</source>
          <target state="translated">&amp;ldquo;允许&amp;rdquo;-对点文件没有特殊处理。</target>
        </trans-unit>
        <trans-unit id="0d043713c2d20f3947236730e7d8fae3f720fb01" translate="yes" xml:space="preserve">
          <source>&amp;ldquo;callback&amp;rdquo;</source>
          <target state="translated">&amp;ldquo;callback&amp;rdquo;</target>
        </trans-unit>
        <trans-unit id="58b5178e0e8c20ec97e2dc1c882fb68e4c38f1da" translate="yes" xml:space="preserve">
          <source>&amp;ldquo;deny&amp;rdquo; - Deny a request for a dotfile, respond with &lt;code&gt;403&lt;/code&gt;, then call &lt;code&gt;next()&lt;/code&gt;.</source>
          <target state="translated">&amp;ldquo; deny&amp;rdquo;-拒绝对点文件的请求，以 &lt;code&gt;403&lt;/code&gt; 响应，然后调用 &lt;code&gt;next()&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="c40c5bae8da6d62b6bb6755328eb17b6caffda0e" translate="yes" xml:space="preserve">
          <source>&amp;ldquo;ignore&amp;rdquo;</source>
          <target state="translated">&amp;ldquo;ignore&amp;rdquo;</target>
        </trans-unit>
        <trans-unit id="0e784eeb8854bb66eef5f2830d5f04550d855bfe" translate="yes" xml:space="preserve">
          <source>&amp;ldquo;ignore&amp;rdquo; - Act as if the dotfile does not exist, respond with &lt;code&gt;404&lt;/code&gt;, then call &lt;code&gt;next()&lt;/code&gt;.</source>
          <target state="translated">&amp;ldquo;忽略&amp;rdquo;-就像点文件不存在一样，以 &lt;code&gt;404&lt;/code&gt; 响应，然后调用 &lt;code&gt;next()&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="40b072ad25e8b72c62446e4981f54a5bfab18085" translate="yes" xml:space="preserve">
          <source>&amp;ldquo;index.html&amp;rdquo;</source>
          <target state="translated">&amp;ldquo;index.html&amp;rdquo;</target>
        </trans-unit>
        <trans-unit id="a17fef7284f01b5469ecad66ec74c5f517f15eae" translate="yes" xml:space="preserve">
          <source>'/' (root path)</source>
          <target state="translated">'/'（根路径）</target>
        </trans-unit>
        <trans-unit id="4f18fdaf28bbaa5f26f0efd4d973dac1bdaf7362" translate="yes" xml:space="preserve">
          <source>1. Developing template engines for Express</source>
          <target state="translated">1.开发Express的模板引擎</target>
        </trans-unit>
        <trans-unit id="6b2aba740d7c38d220ab5f8d054bef8e922990ce" translate="yes" xml:space="preserve">
          <source>1. Installing</source>
          <target state="translated">1.安装</target>
        </trans-unit>
        <trans-unit id="811baf41619d43b160d4112a6be6587d23b8dcb0" translate="yes" xml:space="preserve">
          <source>1. Routing</source>
          <target state="translated">1.路由</target>
        </trans-unit>
        <trans-unit id="f9b4775815c53cb327631d9f486b0a25024e5938" translate="yes" xml:space="preserve">
          <source>10. Database integration</source>
          <target state="translated">10.数据库一体化</target>
        </trans-unit>
        <trans-unit id="17df6e02f977b07b07d0190598e8755748c61028" translate="yes" xml:space="preserve">
          <source>2. Hello world example</source>
          <target state="translated">2.你好,世界的例子</target>
        </trans-unit>
        <trans-unit id="67a2c4d0f99dd2da7c608e4bd743c298443afc1c" translate="yes" xml:space="preserve">
          <source>2. Process managers for Express apps</source>
          <target state="translated">2.快捷应用程序的流程管理人员</target>
        </trans-unit>
        <trans-unit id="c7d9350597393f0dabf7eb749bfab112e145764f" translate="yes" xml:space="preserve">
          <source>2. Writing middleware for use in Express apps</source>
          <target state="translated">2.编写用于Express应用程序的中间件</target>
        </trans-unit>
        <trans-unit id="38c7842feedd87de1e2a0162d1a17260a6d9aefb" translate="yes" xml:space="preserve">
          <source>3. Express application generator</source>
          <target state="translated">3.快速应用生成器</target>
        </trans-unit>
        <trans-unit id="6cc8b6cd1790f0fabb8f15697fa3387360be5852" translate="yes" xml:space="preserve">
          <source>3. Security updates</source>
          <target state="translated">3.安全更新</target>
        </trans-unit>
        <trans-unit id="b4423a00d59bd655d33fd6c15827d8d487664d1e" translate="yes" xml:space="preserve">
          <source>3. Using middleware</source>
          <target state="translated">3.使用中间件</target>
        </trans-unit>
        <trans-unit id="baf4af1c92b9431d9d7938826a292c4edcb69819" translate="yes" xml:space="preserve">
          <source>3.16.0</source>
          <target state="translated">3.16.0</target>
        </trans-unit>
        <trans-unit id="1d86b586c3098498174b02c68bab55a0cb956014" translate="yes" xml:space="preserve">
          <source>3.16.10</source>
          <target state="translated">3.16.10</target>
        </trans-unit>
        <trans-unit id="424257104153917e8e6f388584332d0e039aacfa" translate="yes" xml:space="preserve">
          <source>3.16.6</source>
          <target state="translated">3.16.6</target>
        </trans-unit>
        <trans-unit id="dc8df538e1a9a04b434e0bf21b9131541ac733ac" translate="yes" xml:space="preserve">
          <source>3.19.0</source>
          <target state="translated">3.19.0</target>
        </trans-unit>
        <trans-unit id="726e67dfcb49919a9bc0f209e70225e8ea69843e" translate="yes" xml:space="preserve">
          <source>3.19.1</source>
          <target state="translated">3.19.1</target>
        </trans-unit>
        <trans-unit id="3a8e01bbd716628be7b89f1ec085442592846654" translate="yes" xml:space="preserve">
          <source>3.3.0</source>
          <target state="translated">3.3.0</target>
        </trans-unit>
        <trans-unit id="2a75ee1c8b691fdb43e2c8e24304e6a3ce742c4e" translate="yes" xml:space="preserve">
          <source>3.x</source>
          <target state="translated">3.x</target>
        </trans-unit>
        <trans-unit id="645d7cd0d89ce1916d1a3768558807fcf90fc4f2" translate="yes" xml:space="preserve">
          <source>4. Basic routing</source>
          <target state="translated">4.基本路由选择</target>
        </trans-unit>
        <trans-unit id="3ed5eba420c9ff2ff459192a695169a55e8b3d01" translate="yes" xml:space="preserve">
          <source>4. Production Best Practices: Security</source>
          <target state="translated">4.生产最佳实践。安全</target>
        </trans-unit>
        <trans-unit id="2c38c97e0ec6a50d8be62a184f513ad13cfeb64e" translate="yes" xml:space="preserve">
          <source>4. Using template engines with Express</source>
          <target state="translated">4.使用Express的模板引擎</target>
        </trans-unit>
        <trans-unit id="fba90fa57ee2b5dbb2faec1c33e96813ccb14fd5" translate="yes" xml:space="preserve">
          <source>4.10.7</source>
          <target state="translated">4.10.7</target>
        </trans-unit>
        <trans-unit id="291e357ce96dde2c46df4a84e44fd1d04ed7cb73" translate="yes" xml:space="preserve">
          <source>4.11.1</source>
          <target state="translated">4.11.1</target>
        </trans-unit>
        <trans-unit id="cf32739ccdf9900e27611336c93027a7d59f0e18" translate="yes" xml:space="preserve">
          <source>4.15.2</source>
          <target state="translated">4.15.2</target>
        </trans-unit>
        <trans-unit id="64353c986633a5f5a934550290d65f79b2dadaf3" translate="yes" xml:space="preserve">
          <source>4.15.3</source>
          <target state="translated">4.15.3</target>
        </trans-unit>
        <trans-unit id="a75744f8a36111a23dd390952a11271415b968dd" translate="yes" xml:space="preserve">
          <source>4.15.5</source>
          <target state="translated">4.15.5</target>
        </trans-unit>
        <trans-unit id="ee49c41e728b7af9b4fa9de669951863a79a98b1" translate="yes" xml:space="preserve">
          <source>4.16.0</source>
          <target state="translated">4.16.0</target>
        </trans-unit>
        <trans-unit id="9c246e774133b218196eb640cfce4ffd05206b2b" translate="yes" xml:space="preserve">
          <source>4.8.0</source>
          <target state="translated">4.8.0</target>
        </trans-unit>
        <trans-unit id="22f3c084a338e7e16ec380b6b66c3ef5b4de7111" translate="yes" xml:space="preserve">
          <source>4.8.4</source>
          <target state="translated">4.8.4</target>
        </trans-unit>
        <trans-unit id="509ef1ec5246e64eae8e05acb9f3b776cdba270a" translate="yes" xml:space="preserve">
          <source>4.8.8</source>
          <target state="translated">4.8.8</target>
        </trans-unit>
        <trans-unit id="e84cb7901bfc0c77ad7acf3cc599c644e3b8fcf6" translate="yes" xml:space="preserve">
          <source>4.x</source>
          <target state="translated">4.x</target>
        </trans-unit>
        <trans-unit id="fa8f0e356b73b7ae0ed85184c607bc640e54a95d" translate="yes" xml:space="preserve">
          <source>5. Error Handling</source>
          <target state="translated">5.错误处理</target>
        </trans-unit>
        <trans-unit id="3c4b1edc26c1e5385a7d1f2de43e0d94dd3ed486" translate="yes" xml:space="preserve">
          <source>5. Production best practices: performance and reliability</source>
          <target state="translated">5.生产最佳做法:性能和可靠性</target>
        </trans-unit>
        <trans-unit id="9212540982208fd6ec1065c307eecdc320f52c2e" translate="yes" xml:space="preserve">
          <source>5. Serving static files in Express</source>
          <target state="translated">5.在Express中服务静态文件</target>
        </trans-unit>
        <trans-unit id="fb071d8b575d91069a5f152b5a24037131fde3d7" translate="yes" xml:space="preserve">
          <source>6. Debugging Express</source>
          <target state="translated">6.调试快递</target>
        </trans-unit>
        <trans-unit id="b4c73b1ffef51dd7026e3246012f30a3b57f0234" translate="yes" xml:space="preserve">
          <source>6. FAQ</source>
          <target state="translated">6TH FAQ</target>
        </trans-unit>
        <trans-unit id="48c272c3d3eb217411cdffba94d0a0931deff26a" translate="yes" xml:space="preserve">
          <source>6. Health Checks and Graceful Shutdown</source>
          <target state="translated">6.健康检查和优雅关闭</target>
        </trans-unit>
        <trans-unit id="29bb9bc3421c82c3d72294089ef3e10da62e626a" translate="yes" xml:space="preserve">
          <source>7. Express behind proxies</source>
          <target state="translated">7.代理人背后的快递</target>
        </trans-unit>
        <trans-unit id="a8577429dc304f04f88fc50034ac37192dc79231" translate="yes" xml:space="preserve">
          <source>8. Moving to Express 4</source>
          <target state="translated">8.转入快车道 4</target>
        </trans-unit>
        <trans-unit id="350e61e0a349f0771f45074f098028710242a484" translate="yes" xml:space="preserve">
          <source>9. Moving to Express 5</source>
          <target state="translated">9.转入快车道 5</target>
        </trans-unit>
        <trans-unit id="b150cc387a1175c8ec4bd5a8eff46b333057996d" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;#app-gen&quot;&gt;Upgrading to the Express 4 app generator&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;#app-gen&quot;&gt;升级到Express 4应用程序生成器&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="aec241eed907aa17d6951c9c47fe4302c7ae7d17" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;#changes&quot;&gt;Changes in Express 4&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;#changes&quot;&gt;Express的变化4&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="de78f219b12e11601ccef9587b35ae6641b48a3a" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;#core-changes&quot;&gt;Changes to Express core and middleware system.&lt;/a&gt; The dependencies on Connect and built-in middleware were removed, so you must add middleware yourself.</source>
          <target state="translated">&lt;a href=&quot;#core-changes&quot;&gt;Express核心和中间件系统的更改。&lt;/a&gt;删除了对Connect和内置中间件的依赖，因此您必须自己添加中间件。</target>
        </trans-unit>
        <trans-unit id="85467d7b732ba0edeac677c523265d0f94b88355" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;#example-migration&quot;&gt;An example&lt;/a&gt; of migrating an Express 3 app to Express 4.</source>
          <target state="translated">&lt;a href=&quot;#example-migration&quot;&gt;将&lt;/a&gt; Express 3应用迁移到Express 4 的示例。</target>
        </trans-unit>
        <trans-unit id="1c5f2e81338b96dce8b57219ace3fd2961a4b9a8" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;../index#express.json&quot;&gt;express.json&lt;/a&gt; parses incoming requests with JSON payloads. &lt;strong&gt;NOTE: Available with Express 4.16.0+&lt;/strong&gt;</source>
          <target state="translated">&lt;a href=&quot;../index#express.json&quot;&gt;express.json&lt;/a&gt;使用JSON负载解析传入的请求。&lt;strong&gt;注意：Express 4.16.0+中可用&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="332d1f391923a357eeb17b30ee6e9bd25902bab6" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;../index#express.static&quot;&gt;express.static&lt;/a&gt; serves static assets such as HTML files, images, and so on.</source>
          <target state="translated">&lt;a href=&quot;../index#express.static&quot;&gt;express.static&lt;/a&gt;提供静态资产，例如HTML文件，图像等。</target>
        </trans-unit>
        <trans-unit id="dc53b7d35cb0907289d39a5a9a81c7280a88acd8" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;../index#express.urlencoded&quot;&gt;express.urlencoded&lt;/a&gt; parses incoming requests with URL-encoded payloads. &lt;strong&gt;NOTE: Available with Express 4.16.0+&lt;/strong&gt;</source>
          <target state="translated">&lt;a href=&quot;../index#express.urlencoded&quot;&gt;express.urlencoded&lt;/a&gt;使用URL编码的有效内容解析传入的请求。&lt;strong&gt;注意：Express 4.16.0+中可用&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="750290caedf3ae0e1063857ea5acb10d078f3ade" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;basic-routing&quot;&gt;Previous: Basic Routing &lt;/a&gt;&lt;a href=&quot;examples&quot;&gt;Next: More examples &lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;basic-routing&quot;&gt;上&lt;/a&gt;&lt;a href=&quot;examples&quot;&gt;一篇：&lt;/a&gt;基本路由下一篇：更多示例</target>
        </trans-unit>
        <trans-unit id="e2bf34ba4dcf55a264fb6c7ab6841e523acccdbf" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;generator&quot;&gt;Previous: Express application generator &lt;/a&gt;&lt;a href=&quot;static-files&quot;&gt;Next: Serving static files in Express &lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;generator&quot;&gt;上&lt;/a&gt;&lt;a href=&quot;static-files&quot;&gt;一篇&lt;/a&gt;：Express应用程序生成器下一篇：在Express中提供静态文件</target>
        </trans-unit>
        <trans-unit id="5140cd20016aa29025fc4ea5bd298552e30e488e" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;hello-world&quot;&gt;Previous: Hello World &lt;/a&gt;&lt;a href=&quot;basic-routing&quot;&gt;Next: Basic routing&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;hello-world&quot;&gt;上&lt;/a&gt;&lt;a href=&quot;basic-routing&quot;&gt;一篇：&lt;/a&gt;Hello World下一篇：基本路由</target>
        </trans-unit>
        <trans-unit id="6607d56c1e6b000b90ba04d404bd1e446fe98767" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;http://apmblog.dynatrace.com/2015/07/22/the-drastic-effects-of-omitting-node_env-in-your-express-js-applications/&quot;&gt;Tests indicate&lt;/a&gt; that just doing this can improve app performance by a factor of three!</source>
          <target state="translated">&lt;a href=&quot;http://apmblog.dynatrace.com/2015/07/22/the-drastic-effects-of-omitting-node_env-in-your-express-js-applications/&quot;&gt;测试表明&lt;/a&gt;，仅执行此操作就可以将应用程序性能提高三倍！</target>
        </trans-unit>
        <trans-unit id="cf19770f782e1efdfb1470fdec83e19051567e2c" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;http://docs.strongloop.com/display/SLC/Using+Process+Manager&quot;&gt;Using StrongLoop Process Manager&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;http://docs.strongloop.com/display/SLC/Using+Process+Manager&quot;&gt;使用StrongLoop流程管理器&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="d0d3de7700db4706b7dd97676722f8604e911eac" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;http://en.wikipedia.org/wiki/HTTP_ETag&quot;&gt;More about the HTTP ETag header&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;http://en.wikipedia.org/wiki/HTTP_ETag&quot;&gt;有关HTTP ETag标头的更多信息&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="e7b3cbc838dc1b7b4360dbc802f65c17ffc14232" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://github.com/animir/node-rate-limiter-flexible&quot;&gt;rate-limiter-flexible&lt;/a&gt; package provides tools to make this technique easy and fast. You can find &lt;a href=&quot;https://github.com/animir/node-rate-limiter-flexible/wiki/Overall-example#login-endpoint-protection&quot;&gt;an example of brute-force protection in the documentation&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;https://github.com/animir/node-rate-limiter-flexible&quot;&gt;rate-limiter-flexible&lt;/a&gt;软件包提供了使该技术轻松快速的工具。您可以&lt;a href=&quot;https://github.com/animir/node-rate-limiter-flexible/wiki/Overall-example#login-endpoint-protection&quot;&gt;在文档中&lt;/a&gt;找到暴力保护的示例</target>
        </trans-unit>
        <trans-unit id="782c5f8c9b4602abbc4dff0c6d65621e952361c8" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://github.com/expressjs/body-parser&quot;&gt;body-parser&lt;/a&gt; + &lt;a href=&quot;https://github.com/expressjs/multer&quot;&gt;multer&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;https://github.com/expressjs/body-parser&quot;&gt;人体解析器&lt;/a&gt; + &lt;a href=&quot;https://github.com/expressjs/multer&quot;&gt;multer&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="f2e6f14a2d090b755784a60c0ea69b2498d3f597" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://github.com/expressjs/express/tree/master/examples/auth&quot;&gt;auth&lt;/a&gt; - Authentication with login and password</source>
          <target state="translated">&lt;a href=&quot;https://github.com/expressjs/express/tree/master/examples/auth&quot;&gt;auth-&lt;/a&gt;使用登录名和密码进行身份验证</target>
        </trans-unit>
        <trans-unit id="1aad00e57e5d781bbe6f9f9748131ea4b63297c9" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://github.com/expressjs/express/tree/master/examples/content-negotiation&quot;&gt;content-negotiation&lt;/a&gt; - HTTP content negotiation</source>
          <target state="translated">&lt;a href=&quot;https://github.com/expressjs/express/tree/master/examples/content-negotiation&quot;&gt;内容协商&lt;/a&gt;-HTTP内容协商</target>
        </trans-unit>
        <trans-unit id="29b1d9754d05d306b3379f75a360c11bab04f653" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://github.com/expressjs/express/tree/master/examples/cookie-sessions&quot;&gt;cookie-sessions&lt;/a&gt; - Working with cookie-based sessions</source>
          <target state="translated">&lt;a href=&quot;https://github.com/expressjs/express/tree/master/examples/cookie-sessions&quot;&gt;cookie会话&lt;/a&gt;-使用基于cookie的会话</target>
        </trans-unit>
        <trans-unit id="645bebd896586de4e6ce9a280ca097385598c7a1" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://github.com/expressjs/express/tree/master/examples/cookies&quot;&gt;cookies&lt;/a&gt; - Working with cookies</source>
          <target state="translated">&lt;a href=&quot;https://github.com/expressjs/express/tree/master/examples/cookies&quot;&gt;cookie-&lt;/a&gt;使用cookie</target>
        </trans-unit>
        <trans-unit id="d96d4688c4b1de2caa059d7b7f86a9d3227f336f" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://github.com/expressjs/express/tree/master/examples/downloads&quot;&gt;downloads&lt;/a&gt; - Transferring files to client</source>
          <target state="translated">&lt;a href=&quot;https://github.com/expressjs/express/tree/master/examples/downloads&quot;&gt;下载&lt;/a&gt;-将文件传输到客户端</target>
        </trans-unit>
        <trans-unit id="007d0cc8164d1087c36521a6760adf66375784d3" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://github.com/expressjs/express/tree/master/examples/ejs&quot;&gt;ejs&lt;/a&gt; - Working with Embedded JavaScript templating (ejs)</source>
          <target state="translated">&lt;a href=&quot;https://github.com/expressjs/express/tree/master/examples/ejs&quot;&gt;ejs-&lt;/a&gt;使用嵌入式JavaScript模板（ejs）</target>
        </trans-unit>
        <trans-unit id="f057d80375ed8ae76e74a3d7236afc7a09fe2fa5" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://github.com/expressjs/express/tree/master/examples/error&quot;&gt;error&lt;/a&gt; - Working with error middleware</source>
          <target state="translated">&lt;a href=&quot;https://github.com/expressjs/express/tree/master/examples/error&quot;&gt;错误&lt;/a&gt;-使用错误中间件</target>
        </trans-unit>
        <trans-unit id="d5d5859af0fe4febf79e7594138d6c7c352a6536" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://github.com/expressjs/express/tree/master/examples/error-pages&quot;&gt;error-pages&lt;/a&gt; - Creating error pages</source>
          <target state="translated">&lt;a href=&quot;https://github.com/expressjs/express/tree/master/examples/error-pages&quot;&gt;错误页面&lt;/a&gt;-创建错误页面</target>
        </trans-unit>
        <trans-unit id="1ea3ab253e072f38d8d54d7a3f2b9d9916204fee" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://github.com/expressjs/express/tree/master/examples/hello-world&quot;&gt;hello-world&lt;/a&gt; - Simple request handler</source>
          <target state="translated">&lt;a href=&quot;https://github.com/expressjs/express/tree/master/examples/hello-world&quot;&gt;hello-&lt;/a&gt; world-简单的请求处理程序</target>
        </trans-unit>
        <trans-unit id="7df015da5c081d976c47d25273435f1ac6985344" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://github.com/expressjs/express/tree/master/examples/markdown&quot;&gt;markdown&lt;/a&gt; - Markdown as template engine</source>
          <target state="translated">&lt;a href=&quot;https://github.com/expressjs/express/tree/master/examples/markdown&quot;&gt;markdown&lt;/a&gt; -Markdown作为模板引擎</target>
        </trans-unit>
        <trans-unit id="642334b29e5fd2b5cae4a99d9a4945a5bccf2ba0" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://github.com/expressjs/express/tree/master/examples/multi-router&quot;&gt;multi-router&lt;/a&gt; - Working with multiple Express routers</source>
          <target state="translated">&lt;a href=&quot;https://github.com/expressjs/express/tree/master/examples/multi-router&quot;&gt;多路由器&lt;/a&gt;-使用多个Express路由器</target>
        </trans-unit>
        <trans-unit id="d604f20558254dc02398950ce0c7cc8e3045c9a7" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://github.com/expressjs/express/tree/master/examples/multipart&quot;&gt;multipart&lt;/a&gt; - Accepting multipart-encoded forms</source>
          <target state="translated">&lt;a href=&quot;https://github.com/expressjs/express/tree/master/examples/multipart&quot;&gt;多部分&lt;/a&gt;-接受多部分编码的表单</target>
        </trans-unit>
        <trans-unit id="8204de228923d31e9d732e18eec68e32971c380b" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://github.com/expressjs/express/tree/master/examples/mvc&quot;&gt;mvc&lt;/a&gt; - MVC-style controllers</source>
          <target state="translated">&lt;a href=&quot;https://github.com/expressjs/express/tree/master/examples/mvc&quot;&gt;mvc&lt;/a&gt; -MVC样式的控制器</target>
        </trans-unit>
        <trans-unit id="ad061552117d0cc6347cdf190c4a8b90e779bf41" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://github.com/expressjs/express/tree/master/examples/online&quot;&gt;online&lt;/a&gt; - Tracking online user activity with &lt;code&gt;online&lt;/code&gt; and &lt;code&gt;redis&lt;/code&gt; packages</source>
          <target state="translated">&lt;a href=&quot;https://github.com/expressjs/express/tree/master/examples/online&quot;&gt;在线&lt;/a&gt;-使用 &lt;code&gt;online&lt;/code&gt; 和 &lt;code&gt;redis&lt;/code&gt; 软件包跟踪在线用户活动</target>
        </trans-unit>
        <trans-unit id="d24d2b2e47756bce7fe277e70afe9df7e7f91537" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://github.com/expressjs/express/tree/master/examples/params&quot;&gt;params&lt;/a&gt; - Working with route parameters</source>
          <target state="translated">&lt;a href=&quot;https://github.com/expressjs/express/tree/master/examples/params&quot;&gt;参数&lt;/a&gt;-使用路线参数</target>
        </trans-unit>
        <trans-unit id="2307f44064d9aaed7c2716e744fc85dd130fdc58" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://github.com/expressjs/express/tree/master/examples/resource&quot;&gt;resource&lt;/a&gt; - Multiple HTTP operations on the same resource</source>
          <target state="translated">&lt;a href=&quot;https://github.com/expressjs/express/tree/master/examples/resource&quot;&gt;资源&lt;/a&gt;-对同一资源的多个HTTP操作</target>
        </trans-unit>
        <trans-unit id="24174775b30aaec70ff95acbe7642be14ed8b88a" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://github.com/expressjs/express/tree/master/examples/route-map&quot;&gt;route-map&lt;/a&gt; - Organizing routes using a map</source>
          <target state="translated">&lt;a href=&quot;https://github.com/expressjs/express/tree/master/examples/route-map&quot;&gt;route-&lt;/a&gt; map-使用地图组织路线</target>
        </trans-unit>
        <trans-unit id="3c5ae1bd21eb6afd5352869bdbb9742fe07b0af5" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://github.com/expressjs/express/tree/master/examples/route-middleware&quot;&gt;route-middleware&lt;/a&gt; - Working with route middleware</source>
          <target state="translated">&lt;a href=&quot;https://github.com/expressjs/express/tree/master/examples/route-middleware&quot;&gt;route-middleware-&lt;/a&gt;使用路由中间件</target>
        </trans-unit>
        <trans-unit id="e66a279a41e66540346ce07d698b251361ad29f1" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://github.com/expressjs/express/tree/master/examples/route-separation&quot;&gt;route-separation&lt;/a&gt; - Organizing routes per each resource</source>
          <target state="translated">&lt;a href=&quot;https://github.com/expressjs/express/tree/master/examples/route-separation&quot;&gt;路线分隔&lt;/a&gt;-每个资源组织路线</target>
        </trans-unit>
        <trans-unit id="8acb5042517ac95ec5d0df01b7d9c97103306f2f" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://github.com/expressjs/express/tree/master/examples/search&quot;&gt;search&lt;/a&gt; - Search API</source>
          <target state="translated">&lt;a href=&quot;https://github.com/expressjs/express/tree/master/examples/search&quot;&gt;搜索&lt;/a&gt;-搜索API</target>
        </trans-unit>
        <trans-unit id="d3e83702da7b921b83807f39bbfc58f438dffdf6" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://github.com/expressjs/express/tree/master/examples/session&quot;&gt;session&lt;/a&gt; - User sessions</source>
          <target state="translated">&lt;a href=&quot;https://github.com/expressjs/express/tree/master/examples/session&quot;&gt;会话&lt;/a&gt;-用户会话</target>
        </trans-unit>
        <trans-unit id="a3189b067dfd0aa8e93dab6c616cc56b625b7ea9" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://github.com/expressjs/express/tree/master/examples/static-files&quot;&gt;static-files&lt;/a&gt; - Serving static files</source>
          <target state="translated">&lt;a href=&quot;https://github.com/expressjs/express/tree/master/examples/static-files&quot;&gt;静态文件&lt;/a&gt;-提供静态文件</target>
        </trans-unit>
        <trans-unit id="be61406076374f56ead9a6e4237be0aa316d7e40" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://github.com/expressjs/express/tree/master/examples/vhost&quot;&gt;vhost&lt;/a&gt; - Working with virtual hosts</source>
          <target state="translated">&lt;a href=&quot;https://github.com/expressjs/express/tree/master/examples/vhost&quot;&gt;vhost-&lt;/a&gt;使用虚拟主机</target>
        </trans-unit>
        <trans-unit id="306a112aa22ce662e6f4c9132c1faff9f6ba72e6" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://github.com/expressjs/express/tree/master/examples/view-constructor&quot;&gt;view-constructor&lt;/a&gt; - Rendering views dynamically</source>
          <target state="translated">&lt;a href=&quot;https://github.com/expressjs/express/tree/master/examples/view-constructor&quot;&gt;view-constructor-&lt;/a&gt;动态渲染视图</target>
        </trans-unit>
        <trans-unit id="fe85e109ae53ad47c4b7c41e5d58ce7f7c7a1054" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://github.com/expressjs/express/tree/master/examples/view-locals&quot;&gt;view-locals&lt;/a&gt; - Saving data in request object between middleware calls</source>
          <target state="translated">&lt;a href=&quot;https://github.com/expressjs/express/tree/master/examples/view-locals&quot;&gt;view-locals-&lt;/a&gt;在中间件调用之间将数据保存在请求对象中</target>
        </trans-unit>
        <trans-unit id="0b44dd678b1ad6bde11f056e431ea813db8dc1cf" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://github.com/expressjs/express/tree/master/examples/web-service&quot;&gt;web-service&lt;/a&gt; - Simple API service</source>
          <target state="translated">&lt;a href=&quot;https://github.com/expressjs/express/tree/master/examples/web-service&quot;&gt;网络服务&lt;/a&gt;-简单的API服务</target>
        </trans-unit>
        <trans-unit id="8fe53aa490ad2ca63f884fcbfca729eff086476e" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://github.com/gajus/http-terminator&quot;&gt;http-terminator documentation&lt;/a&gt; provides API documentation and comparison to other existing third-party solutions.</source>
          <target state="translated">&lt;a href=&quot;https://github.com/gajus/http-terminator&quot;&gt;http-terminator文档&lt;/a&gt;提供了API文档以及与其他现有第三方解决方案的比较。</target>
        </trans-unit>
        <trans-unit id="fc0810b4bc222cd6fe749bb9f11813ddcdd4a1ad" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://github.com/gajus/http-terminator&quot;&gt;http-terminator&lt;/a&gt; implements logic for gracefully terminating an express.js server.</source>
          <target state="translated">&lt;a href=&quot;https://github.com/gajus/http-terminator&quot;&gt;http-terminator&lt;/a&gt;实现了用于优雅终止express.js服务器的逻辑。</target>
        </trans-unit>
        <trans-unit id="e6eae24495ec0efbb476dc929dfb2d0d9e0c2795" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://github.com/gajus/lightship&quot;&gt;Lightship documentation&lt;/a&gt; provides examples of the corresponding &lt;a href=&quot;https://github.com/gajus/lightship#lightship-usage-kubernetes-container-probe-configuration&quot;&gt;Kubernetes configuration&lt;/a&gt; and a complete example of integration with &lt;a href=&quot;https://github.com/gajus/lightship#using-with-expressjs&quot;&gt;Express.js&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;https://github.com/gajus/lightship&quot;&gt;Lightship文档&lt;/a&gt;提供了相应的&lt;a href=&quot;https://github.com/gajus/lightship#lightship-usage-kubernetes-container-probe-configuration&quot;&gt;Kubernetes配置&lt;/a&gt;的示例，以及与&lt;a href=&quot;https://github.com/gajus/lightship#using-with-expressjs&quot;&gt;Express.js&lt;/a&gt;集成的完整示例。</target>
        </trans-unit>
        <trans-unit id="0796f10669a1c3c071a03828d42527206a485102" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://github.com/gajus/lightship&quot;&gt;Lightship&lt;/a&gt; is an open-source project that adds health, readiness and liveness checks to your application. Lightship is a standalone HTTP-service that runs as a separate HTTP service; this allows having health-readiness-liveness HTTP endpoints without exposing them on the public interface.</source>
          <target state="translated">&lt;a href=&quot;https://github.com/gajus/lightship&quot;&gt;Lightship&lt;/a&gt;是一个开源项目，可以为您的应用程序增加健康，就绪和活跃性检查。Lightship是一个独立的HTTP服务，可作为单独的HTTP服务运行；这允许拥有健康就绪性HTTP终结点，而无需在公共接口上公开它们。</target>
        </trans-unit>
        <trans-unit id="d6c58a35521dd742ec419c194564119c9f0e2957" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://github.com/godaddy/terminus&quot;&gt;Terminus&lt;/a&gt; is an open-source project that adds health checks and graceful shutdown to your application to eliminate the need to write boilerplate code. You just provide the cleanup logic for graceful shutdowns and the health check logic for health checks, and terminus handles the rest.</source>
          <target state="translated">&lt;a href=&quot;https://github.com/godaddy/terminus&quot;&gt;Terminus&lt;/a&gt;是一个开源项目，可以为您的应用程序添加运行状况检查和正常关闭，从而无需编写样板代码。您只需提供用于正常关闭的清理逻辑和用于运行状况检查的运行状况检查逻辑，然后由终端处理其余内容。</target>
        </trans-unit>
        <trans-unit id="e24a1393c99ed60d386973b370428e1a1a3e5c33" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://github.com/helmetjs/csp&quot;&gt;csp&lt;/a&gt; sets the &lt;code&gt;Content-Security-Policy&lt;/code&gt; header to help prevent cross-site scripting attacks and other cross-site injections.</source>
          <target state="translated">&lt;a href=&quot;https://github.com/helmetjs/csp&quot;&gt;csp&lt;/a&gt;设置 &lt;code&gt;Content-Security-Policy&lt;/code&gt; 标头可帮助防止跨站点脚本攻击和其他跨站点注入。</target>
        </trans-unit>
        <trans-unit id="d8fafe9630c7a2c3edb7d54fc0983df733a5451b" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://github.com/helmetjs/dont-sniff-mimetype&quot;&gt;noSniff&lt;/a&gt; sets &lt;code&gt;X-Content-Type-Options&lt;/code&gt; to prevent browsers from MIME-sniffing a response away from the declared content-type.</source>
          <target state="translated">&lt;a href=&quot;https://github.com/helmetjs/dont-sniff-mimetype&quot;&gt;noSniff&lt;/a&gt;设置 &lt;code&gt;X-Content-Type-Options&lt;/code&gt; 来防止浏览器MIME嗅探远离声明的内容类型的响应。</target>
        </trans-unit>
        <trans-unit id="998fd1d2810a66da86c74abd7ebe53e08c637efb" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://github.com/helmetjs/frameguard&quot;&gt;frameguard&lt;/a&gt; sets the &lt;code&gt;X-Frame-Options&lt;/code&gt; header to provide &lt;a href=&quot;https://www.owasp.org/index.php/Clickjacking&quot;&gt;clickjacking&lt;/a&gt; protection.</source>
          <target state="translated">&lt;a href=&quot;https://github.com/helmetjs/frameguard&quot;&gt;frameguard&lt;/a&gt;设置 &lt;code&gt;X-Frame-Options&lt;/code&gt; 标头以提供&lt;a href=&quot;https://www.owasp.org/index.php/Clickjacking&quot;&gt;点击劫持&lt;/a&gt;保护。</target>
        </trans-unit>
        <trans-unit id="e792b8ab50efbbea817d69af9af8e5b13ea1e7d0" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://github.com/helmetjs/hide-powered-by&quot;&gt;hidePoweredBy&lt;/a&gt; removes the &lt;code&gt;X-Powered-By&lt;/code&gt; header.</source>
          <target state="translated">&lt;a href=&quot;https://github.com/helmetjs/hide-powered-by&quot;&gt;hidePoweredBy&lt;/a&gt;删除 &lt;code&gt;X-Powered-By&lt;/code&gt; 标头。</target>
        </trans-unit>
        <trans-unit id="0bdae4dbfa85f3ca57d805f967693e0ac71207e3" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://github.com/helmetjs/hpkp&quot;&gt;hpkp&lt;/a&gt; Adds &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Security/Public_Key_Pinning&quot;&gt;Public Key Pinning&lt;/a&gt; headers to prevent man-in-the-middle attacks with forged certificates.</source>
          <target state="translated">&lt;a href=&quot;https://github.com/helmetjs/hpkp&quot;&gt;hpkp&lt;/a&gt;添加了&amp;ldquo; &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Security/Public_Key_Pinning&quot;&gt;公钥固定&amp;rdquo;&lt;/a&gt;标头，以防止伪造证书对中间人的攻击。</target>
        </trans-unit>
        <trans-unit id="403defe58d222fbd5e859404d05b7f0be18cbb6c" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://github.com/helmetjs/hsts&quot;&gt;hsts&lt;/a&gt; sets &lt;code&gt;Strict-Transport-Security&lt;/code&gt; header that enforces secure (HTTP over SSL/TLS) connections to the server.</source>
          <target state="translated">&lt;a href=&quot;https://github.com/helmetjs/hsts&quot;&gt;hsts&lt;/a&gt;设置 &lt;code&gt;Strict-Transport-Security&lt;/code&gt; 标头，以强制与服务器建立安全（HTTP通过SSL / TLS）连接。</target>
        </trans-unit>
        <trans-unit id="18cc1793663b618f035ac09dccb6af43c5ad82e4" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://github.com/helmetjs/ienoopen&quot;&gt;ieNoOpen&lt;/a&gt; sets &lt;code&gt;X-Download-Options&lt;/code&gt; for IE8+.</source>
          <target state="translated">&lt;a href=&quot;https://github.com/helmetjs/ienoopen&quot;&gt;ieNoOpen&lt;/a&gt;设置IE8 +的 &lt;code&gt;X-Download-Options&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="ca592111ffd154015e645b2bdfd83555d5da0dc0" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://github.com/helmetjs/nocache&quot;&gt;noCache&lt;/a&gt; sets &lt;code&gt;Cache-Control&lt;/code&gt; and Pragma headers to disable client-side caching.</source>
          <target state="translated">&lt;a href=&quot;https://github.com/helmetjs/nocache&quot;&gt;noCache&lt;/a&gt;设置 &lt;code&gt;Cache-Control&lt;/code&gt; 和Pragma标头以禁用客户端缓存。</target>
        </trans-unit>
        <trans-unit id="81d82c3f50eb26a66d91a728441b7fcd6f4ad886" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://github.com/helmetjs/x-xss-protection&quot;&gt;xssFilter&lt;/a&gt; sets &lt;code&gt;X-XSS-Protection&lt;/code&gt; to enable the Cross-site scripting (XSS) filter in most recent web browsers.</source>
          <target state="translated">&lt;a href=&quot;https://github.com/helmetjs/x-xss-protection&quot;&gt;xssFilter&lt;/a&gt;设置 &lt;code&gt;X-XSS-Protection&lt;/code&gt; 以在最新的Web浏览器中启用跨站点脚本（XSS）过滤器。</target>
        </trans-unit>
        <trans-unit id="b229b8d1287e1c931ea8b28f1ccc511d5abb3431" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://strongloop.com/strongblog/robust-node-applications-error-handling/&quot;&gt;Building Robust Node Applications: Error Handling&lt;/a&gt; (StrongLoop blog)</source>
          <target state="translated">&lt;a href=&quot;https://strongloop.com/strongblog/robust-node-applications-error-handling/&quot;&gt;构建健壮的节点应用程序：错误处理&lt;/a&gt;（StrongLoop博客）</target>
        </trans-unit>
        <trans-unit id="a2b485dde752f28cdf659fefbb6255a40fbf3891" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://www.npmjs.com/package/cookie-session&quot;&gt;cookie-session&lt;/a&gt; that replaces &lt;code&gt;express.cookieSession&lt;/code&gt; middleware built-in to Express 3.x.</source>
          <target state="translated">&lt;a href=&quot;https://www.npmjs.com/package/cookie-session&quot;&gt;cookie-session&lt;/a&gt;替代Express 3.x内置的 &lt;code&gt;express.cookieSession&lt;/code&gt; 中间件。</target>
        </trans-unit>
        <trans-unit id="07af77aa91fc5619759b0db1f90bbd136a701e35" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://www.npmjs.com/package/express-session&quot;&gt;express-session&lt;/a&gt; that replaces &lt;code&gt;express.session&lt;/code&gt; middleware built-in to Express 3.x.</source>
          <target state="translated">&lt;a href=&quot;https://www.npmjs.com/package/express-session&quot;&gt;express-session&lt;/a&gt;取代Express 3.x内置的 &lt;code&gt;express.session&lt;/code&gt; 中间件。</target>
        </trans-unit>
        <trans-unit id="990f3a311240ff3da689328702904f0d79c23435" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://www.npmjs.com/package/helmet&quot;&gt;Helmet&lt;/a&gt; can help protect your app from some well-known web vulnerabilities by setting HTTP headers appropriately.</source>
          <target state="translated">&lt;a href=&quot;https://www.npmjs.com/package/helmet&quot;&gt;头盔&lt;/a&gt;可以通过适当设置HTTP标头来帮助保护您的应用程序免受某些知名的网络漏洞的侵害。</target>
        </trans-unit>
        <trans-unit id="c39715644008249a7c383945e3e680a7b6139500" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;installing&quot;&gt;Previous: Installing &lt;/a&gt;&lt;a href=&quot;generator&quot;&gt;Next: Express Generator &lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;installing&quot;&gt;上一页：安装&lt;/a&gt;&lt;a href=&quot;generator&quot;&gt;下一页：Express Generator&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="6c85a4f76ba4dc7e0560128b3b3eea902ad4d306" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;static-files&quot;&gt;Previous: Static Files &lt;/a&gt;&lt;a href=&quot;faq&quot;&gt;Next: FAQ &lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;static-files&quot;&gt;上&lt;/a&gt;&lt;a href=&quot;faq&quot;&gt;一篇：&lt;/a&gt;静态文件下一篇：常见问题</target>
        </trans-unit>
        <trans-unit id="27e0cef6c350929b9bc18478b7ab0efc18ff2a84" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;NOTE&lt;/b&gt;: Sub-apps</source>
          <target state="translated">&lt;b&gt;注意&lt;/b&gt;：子应用</target>
        </trans-unit>
        <trans-unit id="b4cb5373c927ba606f727cc51fa6d6cd468a018f" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;NOTE&lt;/b&gt;: Sub-apps will inherit the value of this setting.</source>
          <target state="translated">&lt;b&gt;注意&lt;/b&gt;：子应用程序将继承此设置的值。</target>
        </trans-unit>
        <trans-unit id="bf33d8dba55868bf533b5c04389a3c29d8965386" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;NOTE&lt;/b&gt;: Sub-apps will not inherit the value of this setting in production (when `NODE_ENV` is &quot;production&quot;).</source>
          <target state="translated">&lt;b&gt;注意&lt;/b&gt;：子应用程序将不会在生产环境中继承此设置的值（&amp;ldquo; NODE_ENV&amp;rdquo;为&amp;ldquo;生产环境&amp;rdquo;时）。</target>
        </trans-unit>
        <trans-unit id="151505b4fa15bee14a6f2eb556f4919d059ed05d" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;Note&lt;/b&gt;: Disabling the &lt;code&gt;X-Powered-By header&lt;/code&gt; does not prevent a sophisticated attacker from determining that an app is running Express. It may discourage a casual exploit, but there are other ways to determine an app is running Express.</source>
          <target state="translated">&lt;b&gt;注意&lt;/b&gt;：禁用 &lt;code&gt;X-Powered-By header&lt;/code&gt; 不会阻止老练的攻击者确定应用程序正在运行Express。它可能不鼓励随意利用，但还有其他方法可以确定应用程序正在运行Express。</target>
        </trans-unit>
        <trans-unit id="a8b6c7236febfb8e90718ee5c98c8618606ec946" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;Note&lt;/b&gt;: If you believe you have discovered a security vulnerability in Express, please see &lt;a href=&quot;http://expressjs.com/en/resources/contributing.html#security-policies-and-procedures&quot;&gt;Security Policies and Procedures&lt;/a&gt;.</source>
          <target state="translated">&lt;b&gt;注意&lt;/b&gt;：如果您认为自己在Express中发现了安全漏洞，请参阅&amp;ldquo; &lt;a href=&quot;http://expressjs.com/en/resources/contributing.html#security-policies-and-procedures&quot;&gt;安全策略和过程&amp;rdquo;&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="9fa8141635bc27328f1adb45904d4772707dd628" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;Warning&lt;/b&gt;: This information refers to third-party sites, products, or modules that are not maintained by the Expressjs team. Listing here does not constitute an endorsement or recommendation from the Expressjs project team.</source>
          <target state="translated">&lt;b&gt;警告&lt;/b&gt;：此信息是指Expressjs团队未维护的第三方站点，产品或模块。此处列出的内容并不表示Expressjs项目团队的认可或推荐。</target>
        </trans-unit>
        <trans-unit id="b5f7b2fa8526d17c2761643994fa57736a04a85b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;-1&lt;/code&gt; signals an unsatisfiable range</source>
          <target state="translated">&lt;code&gt;-1&lt;/code&gt; 表示范围无法满足</target>
        </trans-unit>
        <trans-unit id="5ff8d82cfe54008d39bb9560274545f86cc3b1c9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;-2&lt;/code&gt; signals a malformed header string</source>
          <target state="translated">&lt;code&gt;-2&lt;/code&gt; 表示格式错误的标题字符串</target>
        </trans-unit>
        <trans-unit id="0e305f9446de72950d2455db5e0ed9a48ec3fe70" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;HANDLER&lt;/code&gt; is the function executed when the route is matched.</source>
          <target state="translated">&lt;code&gt;HANDLER&lt;/code&gt; 是匹配路线时执行的功能。</target>
        </trans-unit>
        <trans-unit id="21253ea9c54330d7cc9d1097c0861ce0032246aa" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;METHOD&lt;/code&gt; is an &lt;a href=&quot;https://en.wikipedia.org/wiki/Hypertext_Transfer_Protocol#Request_methods&quot;&gt;HTTP request method&lt;/a&gt;, in lowercase.</source>
          <target state="translated">&lt;code&gt;METHOD&lt;/code&gt; 是小写的&lt;a href=&quot;https://en.wikipedia.org/wiki/Hypertext_Transfer_Protocol#Request_methods&quot;&gt;HTTP请求方法&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="3c7d988e0c72ca86047c2781a270b697504eb59c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;PATH&lt;/code&gt; is a path on the server.</source>
          <target state="translated">&lt;code&gt;PATH&lt;/code&gt; 是服务器上的路径。</target>
        </trans-unit>
        <trans-unit id="65dbc0e3703a9d43a9d7e6f6c89ec9e66415cca6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Range&lt;/code&gt; header parser.</source>
          <target state="translated">&lt;code&gt;Range&lt;/code&gt; 标头解析器。</target>
        </trans-unit>
        <trans-unit id="ef42330685f0dbbfaf5d58c39fcffd960f4cae39" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;X-Forwarded-Proto&lt;/code&gt; can be set by the reverse proxy to tell the app whether it is &lt;code&gt;https&lt;/code&gt; or &lt;code&gt;http&lt;/code&gt; or even an invalid name. This value is reflected by &lt;a href=&quot;http://expressjs.com/en/api.html#req.protocol&quot;&gt;req.protocol&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;X-Forwarded-Proto&lt;/code&gt; 反向代理可以设置X-Forwarded-Proto，以告知应用程序是 &lt;code&gt;https&lt;/code&gt; 还是 &lt;code&gt;http&lt;/code&gt; 甚至是无效名称。该值由&lt;a href=&quot;http://expressjs.com/en/api.html#req.protocol&quot;&gt;req.protocol&lt;/a&gt;反映。</target>
        </trans-unit>
        <trans-unit id="59a16f84d85d3d4b24f1dafe652be2a1d20cdbdb" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;app.route()&lt;/code&gt; method</source>
          <target state="translated">&lt;code&gt;app.route()&lt;/code&gt; 方法</target>
        </trans-unit>
        <trans-unit id="90465936294152a8e63f64540f4c97468f25086f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;app.use&lt;/code&gt; accepts parameters</source>
          <target state="translated">&lt;code&gt;app.use&lt;/code&gt; 接受参数</target>
        </trans-unit>
        <trans-unit id="13fccfb5ad591cfa016b38aa2f32001281ecfed6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;app&lt;/code&gt; is an instance of &lt;code&gt;express&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;app&lt;/code&gt; 是 &lt;code&gt;express&lt;/code&gt; 的实例。</target>
        </trans-unit>
        <trans-unit id="adbe8728c6166a80d83fa6bb7b4fe15ac29d0581" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;callback&lt;/code&gt;, a callback function. If provided, the method returns both the possible error and rendered string, but does not perform an automated response. When an error occurs, the method invokes &lt;code&gt;next(err)&lt;/code&gt; internally.</source>
          <target state="translated">&lt;code&gt;callback&lt;/code&gt; ，一个回调函数。如果提供了该方法，则该方法将同时返回可能的错误和呈现的字符串，但不会执行自动响应。发生错误时，该方法 &lt;code&gt;next(err)&lt;/code&gt; 内部调用next（err）。</target>
        </trans-unit>
        <trans-unit id="4742ebedca157519ec8aa4e296a1395a99a041da" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;debug&lt;/code&gt; is like an augmented version of &lt;code&gt;console.log&lt;/code&gt;, but unlike &lt;code&gt;console.log&lt;/code&gt;, you don&amp;rsquo;t have to comment out &lt;code&gt;debug&lt;/code&gt; logs in production code. Logging is turned off by default and can be conditionally turned on by using the &lt;code&gt;DEBUG&lt;/code&gt; environment variable.</source>
          <target state="translated">&lt;code&gt;debug&lt;/code&gt; 就像 &lt;code&gt;console.log&lt;/code&gt; 的增强版，但是与 &lt;code&gt;console.log&lt;/code&gt; 不同，您不必在生产代码中注释掉 &lt;code&gt;debug&lt;/code&gt; 日志。默认情况下，日志记录是关闭的，可以使用 &lt;code&gt;DEBUG&lt;/code&gt; 环境变量有条件地将其打开。</target>
        </trans-unit>
        <trans-unit id="9a5843f1ce1ad1f2f1d576e7e40f42dae5e1f7a2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;domain&lt;/code&gt; - indicates the domain of the cookie; use it to compare against the domain of the server in which the URL is being requested. If they match, then check the path attribute next.</source>
          <target state="translated">&lt;code&gt;domain&lt;/code&gt; -表示cookie的域；使用它与请求URL的服务器域进行比较。如果它们匹配，则接下来检查path属性。</target>
        </trans-unit>
        <trans-unit id="f0dc47da00eee9bdee0a333aa1eb0a29555c355c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;expires&lt;/code&gt; - use to set expiration date for persistent cookies.</source>
          <target state="translated">&lt;code&gt;expires&lt;/code&gt; -用于设置永久性cookie的过期日期。</target>
        </trans-unit>
        <trans-unit id="c7a97cbbcc775c9f7b6e340e2bbfb33641126932" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;express.Router&lt;/code&gt; class</source>
          <target state="translated">&lt;code&gt;express.Router&lt;/code&gt; 类</target>
        </trans-unit>
        <trans-unit id="6a71351e91089a48b5a3bed09f61b223593d16c9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;false&lt;/code&gt; (disabled)</source>
          <target state="translated">&lt;code&gt;false&lt;/code&gt; （禁用）</target>
        </trans-unit>
        <trans-unit id="8668678bfb185db45353bdd7e8542e7b3f106c3d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;false&lt;/code&gt; disables ETag altogether.</source>
          <target state="translated">&lt;code&gt;false&lt;/code&gt; 完全禁用ETag。</target>
        </trans-unit>
        <trans-unit id="54bdf58e6edeccc5d939d65c6e13320cc3cf3814" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;httpOnly&lt;/code&gt; - Ensures the cookie is sent only over HTTP(S), not client JavaScript, helping to protect against cross-site scripting attacks.</source>
          <target state="translated">&lt;code&gt;httpOnly&lt;/code&gt; -确保Cookie仅通过HTTP（S）发送，而不通过客户端JavaScript发送，从而有助于防止跨站点脚本攻击。</target>
        </trans-unit>
        <trans-unit id="31781145007734e836ec4e56539b65b9ba9f0da6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;liveness&lt;/code&gt;, that determines when to restart a container.</source>
          <target state="translated">&lt;code&gt;liveness&lt;/code&gt; ，它确定何时重新启动容器。</target>
        </trans-unit>
        <trans-unit id="423d38adc55135e36dfcccd57ae144bf0106cccf" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;locals&lt;/code&gt;, an object whose properties define local variables for the view.</source>
          <target state="translated">&lt;code&gt;locals&lt;/code&gt; ，一个对象，其属性定义视图的局部变量。</target>
        </trans-unit>
        <trans-unit id="22085d8c6f9255c4caa97f98da40b8666e31096d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;next&lt;/code&gt;, indicating the next middleware function.</source>
          <target state="translated">&lt;code&gt;next&lt;/code&gt; ，指示下一个中间件功能。</target>
        </trans-unit>
        <trans-unit id="9a2d4fb2553c866fdb3f00c6c8e0877533726fdd" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;path&lt;/code&gt; - indicates the path of the cookie; use it to compare against the request path. If this and domain match, then send the cookie in the request.</source>
          <target state="translated">&lt;code&gt;path&lt;/code&gt; -指示cookie的路径；使用它与请求路径进行比较。如果与域匹配，则在请求中发送cookie。</target>
        </trans-unit>
        <trans-unit id="a1f8ed9bbbbba79d6dcc938f1c7337d2b35cf5ab" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;path&lt;/code&gt;, the file path that is being sent.</source>
          <target state="translated">&lt;code&gt;path&lt;/code&gt; ，正在发送的文件路径。</target>
        </trans-unit>
        <trans-unit id="14df7e6276f029b3fb06a5ed3d8ddb1d4708c029" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;process.env.NODE_ENV&lt;/code&gt; (&lt;code&gt;NODE_ENV&lt;/code&gt; environment variable) or &amp;ldquo;development&amp;rdquo; if &lt;code&gt;NODE_ENV&lt;/code&gt; is not set.</source>
          <target state="translated">&lt;code&gt;process.env.NODE_ENV&lt;/code&gt; （ &lt;code&gt;NODE_ENV&lt;/code&gt; 环境变量）或&amp;ldquo;开发&amp;rdquo;（如果未设置 &lt;code&gt;NODE_ENV&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="69e61828a9616ae698b434fe009ed7579bc92375" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;readiness&lt;/code&gt;, that determines when a container is ready to start accepting traffic. When a pod is not ready, it is removed from the service load balancers.</source>
          <target state="translated">&lt;code&gt;readiness&lt;/code&gt; ，确定容器何时准备开始接受流量。如果未准备好容器，则将其从服务负载平衡器中删除。</target>
        </trans-unit>
        <trans-unit id="d51caca592e50db03889ebf871577ace8e15e79d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;req.acceptsCharset()&lt;/code&gt; is replaced by &lt;code&gt;req.acceptsCharsets()&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;req.acceptsCharset()&lt;/code&gt; 替换为 &lt;code&gt;req.acceptsCharsets()&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="e692f620f5e30d4c09afcc1a29d0d5b6816894cd" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;req.acceptsEncoding()&lt;/code&gt; is replaced by &lt;code&gt;req.acceptsEncodings()&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;req.acceptsEncoding()&lt;/code&gt; 替换为 &lt;code&gt;req.acceptsEncodings()&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="209c3ad7da150942fb852f1c5ab1ba114e34eb57" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;req.acceptsLanguage()&lt;/code&gt; is replaced by &lt;code&gt;req.acceptsLanguages()&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;req.acceptsLanguage()&lt;/code&gt; 替换为 &lt;code&gt;req.acceptsLanguages()&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="0843c232fcdf0dc7442d0c2ffc7801e553c3ce57" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;req.url&lt;/code&gt; is not a native Express property, it is inherited from Node&amp;rsquo;s &lt;a href=&quot;https://nodejs.org/api/http.html#http_message_url&quot;&gt;http module&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;req.url&lt;/code&gt; 不是Express的本机属性，它是从Node的&lt;a href=&quot;https://nodejs.org/api/http.html#http_message_url&quot;&gt;http模块&lt;/a&gt;继承的。</target>
        </trans-unit>
        <trans-unit id="e79df7e39ba1b4f6d1c0ad97f7daadf2e024b84c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;req&lt;/code&gt;, the request object.</source>
          <target state="translated">&lt;code&gt;req&lt;/code&gt; ，请求对象。</target>
        </trans-unit>
        <trans-unit id="0dc7f251aeb9a1bcb8936d4b8d76140dcf44065e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;res.app&lt;/code&gt; is identical to the &lt;a href=&quot;#req.app&quot;&gt;req.app&lt;/a&gt; property in the request object.</source>
          <target state="translated">&lt;code&gt;res.app&lt;/code&gt; 与请求对象中的&lt;a href=&quot;#req.app&quot;&gt;req.app&lt;/a&gt;属性相同。</target>
        </trans-unit>
        <trans-unit id="3949554b07d64f466c2da02d9406bd54a39bd434" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;res.append()&lt;/code&gt; is supported by Express v4.11.0+</source>
          <target state="translated">&lt;code&gt;res.append()&lt;/code&gt; Express v4.11.0 +支持res.append（）</target>
        </trans-unit>
        <trans-unit id="0a0851fbc6cd5a0c9c0dc5cf80e8eb7f6b8c91b3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;res.sendFile()&lt;/code&gt; is supported by Express v4.8.0 onwards.</source>
          <target state="translated">&lt;code&gt;res.sendFile()&lt;/code&gt; Express v4.8.0及更高版本支持res.sendFile（）。</target>
        </trans-unit>
        <trans-unit id="f7a6886880746e745643740a5f27d07828693ede" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;res&lt;/code&gt;, the &lt;a href=&quot;#res&quot;&gt;response object&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;res&lt;/code&gt; ，&lt;a href=&quot;#res&quot;&gt;响应对象&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="b3cd4585a14ec2ccde3594c7cae8243097372c58" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;res&lt;/code&gt;, the response object.</source>
          <target state="translated">&lt;code&gt;res&lt;/code&gt; ，响应对象。</target>
        </trans-unit>
        <trans-unit id="ce55256f1045b5c509146ac265c61407f9656562" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;restart myapp&lt;/code&gt; &amp;ndash; Restart the app</source>
          <target state="translated">&lt;code&gt;restart myapp&lt;/code&gt; &amp;ndash;重新启动应用</target>
        </trans-unit>
        <trans-unit id="90653c61ccbb363e6a33dc5530c7ef46f6e1cfb9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;secure&lt;/code&gt; - Ensures the browser only sends the cookie over HTTPS.</source>
          <target state="translated">&lt;code&gt;secure&lt;/code&gt; -确保浏览器仅通过HTTPS发送cookie。</target>
        </trans-unit>
        <trans-unit id="b85376026ab8f0707d9042fcdd56fb56add1f447" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;start myapp&lt;/code&gt; &amp;ndash; Start the app</source>
          <target state="translated">&lt;code&gt;start myapp&lt;/code&gt; &amp;ndash;启动应用</target>
        </trans-unit>
        <trans-unit id="5a037bdb19f6f5f31374b8e882c78314dcd120e5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;stat&lt;/code&gt;, the &lt;code&gt;stat&lt;/code&gt; object of the file that is being sent.</source>
          <target state="translated">&lt;code&gt;stat&lt;/code&gt; ，正在发送的文件的 &lt;code&gt;stat&lt;/code&gt; 对象。</target>
        </trans-unit>
        <trans-unit id="cad2f2bff6c55d5c50423c45fe0313c4ac37c699" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;stop myapp&lt;/code&gt; &amp;ndash; Stop the app.</source>
          <target state="translated">&lt;code&gt;stop myapp&lt;/code&gt; &amp;ndash;停止应用。</target>
        </trans-unit>
        <trans-unit id="2a837838b4026dc96d379720c33f3ec09d269376" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; enables weak ETag. This is the default setting.</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; 启用弱ETag。这是默认设置。</target>
        </trans-unit>
        <trans-unit id="e6cf6c306dac01be7973c2d98f1dad2d4b7ce953" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; in production, otherwise undefined.</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; 在生产中为true，否则为undefined。</target>
        </trans-unit>
        <trans-unit id="7de546236482668234b81b821d594230fc3c3ecc" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;view engine&lt;/code&gt;, the template engine to use. For example, to use the Pug template engine: &lt;code&gt;app.set('view engine', 'pug')&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;view engine&lt;/code&gt; ，要使用的模板引擎。例如，要使用Pug模板引擎： &lt;code&gt;app.set('view engine', 'pug')&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="2b6f93d6e66e6da8e611e0a505e72cf0243e5afa" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;views&lt;/code&gt;, the directory where the template files are located. Eg: &lt;code&gt;app.set('views', './views')&lt;/code&gt;. This defaults to the &lt;code&gt;views&lt;/code&gt; directory in the application root directory.</source>
          <target state="translated">&lt;code&gt;views&lt;/code&gt; ，模板文件所在的目录。例如： &lt;code&gt;app.set('views', './views')&lt;/code&gt; 。这默认为应用程序根目录中的 &lt;code&gt;views&lt;/code&gt; 目录。</target>
        </trans-unit>
        <trans-unit id="227e31db773b1022014ebd6b0457643a9074df26" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Error Handling&lt;/em&gt; refers to how Express catches and processes errors that occur both synchronously and asynchronously. Express comes with a default error handler so you don&amp;rsquo;t need to write your own to get started.</source>
          <target state="translated">&lt;em&gt;错误处理&lt;/em&gt;是指Express如何捕获和处理同步和异步发生的错误。Express带有默认错误处理程序，因此您无需自己编写即可开始使用。</target>
        </trans-unit>
        <trans-unit id="313a0765988b12c7d6bd8e0251052115177ff28c" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Middleware&lt;/em&gt; functions are functions that have access to the &lt;a href=&quot;../index#req&quot;&gt;request object&lt;/a&gt; (&lt;code&gt;req&lt;/code&gt;), the &lt;a href=&quot;../index#res&quot;&gt;response object&lt;/a&gt; (&lt;code&gt;res&lt;/code&gt;), and the &lt;code&gt;next&lt;/code&gt; function in the application&amp;rsquo;s request-response cycle. The &lt;code&gt;next&lt;/code&gt; function is a function in the Express router which, when invoked, executes the middleware succeeding the current middleware.</source>
          <target state="translated">&lt;em&gt;中间件&lt;/em&gt;功能是可以访问&lt;a href=&quot;../index#req&quot;&gt;请求对象&lt;/a&gt;（ &lt;code&gt;req&lt;/code&gt; ），&lt;a href=&quot;../index#res&quot;&gt;响应对象&lt;/a&gt;（ &lt;code&gt;res&lt;/code&gt; ）和应用程序的请求-响应周期中的 &lt;code&gt;next&lt;/code&gt; 功能的函数。在 &lt;code&gt;next&lt;/code&gt; 功能是在高速路由器，该路由器被调用时，执行后续的中间件目前中间件的功能。</target>
        </trans-unit>
        <trans-unit id="4cef0e586aee889429cd3ed634d2056ea66df4d4" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Middleware&lt;/em&gt; functions are functions that have access to the &lt;a href=&quot;../index#req&quot;&gt;request object&lt;/a&gt; (&lt;code&gt;req&lt;/code&gt;), the &lt;a href=&quot;../index#res&quot;&gt;response object&lt;/a&gt; (&lt;code&gt;res&lt;/code&gt;), and the next middleware function in the application&amp;rsquo;s request-response cycle. The next middleware function is commonly denoted by a variable named &lt;code&gt;next&lt;/code&gt;.</source>
          <target state="translated">&lt;em&gt;中间件&lt;/em&gt;功能是可以访问&lt;a href=&quot;../index#req&quot;&gt;请求对象&lt;/a&gt;（ &lt;code&gt;req&lt;/code&gt; ），&lt;a href=&quot;../index#res&quot;&gt;响应对象&lt;/a&gt;（ &lt;code&gt;res&lt;/code&gt; ）和应用程序的请求-响应周期中的下一个中间件功能的功能。下一个中间件功能通常由名为 &lt;code&gt;next&lt;/code&gt; 的变量表示。</target>
        </trans-unit>
        <trans-unit id="8aefad9bf057bf466065ee668967c898214cbed4" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Routing&lt;/em&gt; refers to determining how an application responds to a client request to a particular endpoint, which is a URI (or path) and a specific HTTP request method (GET, POST, and so on).</source>
          <target state="translated">&lt;em&gt;路由&lt;/em&gt;是指确定应用程序如何响应客户端对特定端点的请求，该特定端点是URI（或路径）和特定的HTTP请求方法（GET，POST等）。</target>
        </trans-unit>
        <trans-unit id="b11801a24925add430152f1445ae8271c10d2c51" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Routing&lt;/em&gt; refers to how an application&amp;rsquo;s endpoints (URIs) respond to client requests. For an introduction to routing, see &lt;a href=&quot;../starter/basic-routing&quot;&gt;Basic routing&lt;/a&gt;.</source>
          <target state="translated">&lt;em&gt;路由&lt;/em&gt;是指应用程序的端点（URI）如何响应客户端请求。有关路由的介绍，请参见&lt;a href=&quot;../starter/basic-routing&quot;&gt;基本路由&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="9502d1b0532c542a7affe8226787378bd7474e3d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;a href=&quot;http://strong-pm.io/&quot;&gt;StrongLoop Process Manager (Strong-PM)&lt;/a&gt;&lt;/strong&gt;: A production process manager for Node.js applications with built-in load balancing, monitoring, and multi-host deployment. Includes a CLI to build, package, and deploy Node.js applications to a local or remote system.</source>
          <target state="translated">&lt;strong&gt;&lt;a href=&quot;http://strong-pm.io/&quot;&gt;StrongLoop Process Manager（Strong-PM）&lt;/a&gt;&lt;/strong&gt;：具有内置负载平衡，监视和多主机部署的Node.js应用程序的生产过程管理器。包括一个CLI，用于将Node.js应用程序构建，打包和部署到本地或远程系统。</target>
        </trans-unit>
        <trans-unit id="d77b28533025cb687ff7b7692b5535e3463fe5f2" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;a href=&quot;https://github.com/Unitech/pm2&quot;&gt;PM2&lt;/a&gt;&lt;/strong&gt;: A production process manager for Node.js applications that has a built-in load balancer. PM2 enables you to keep applications alive forever, reloads them without downtime, helps you to manage application logging, monitoring, and clustering.</source>
          <target state="translated">&lt;strong&gt;&lt;a href=&quot;https://github.com/Unitech/pm2&quot;&gt;PM2&lt;/a&gt;&lt;/strong&gt;：Node.js应用程序的生产过程管理器，具有内置的负载平衡器。PM2使您可以使应用程序永远保持活动状态，无需停机即可重新加载它们，还可以帮助您管理应用程序日志记录，监视和群集。</target>
        </trans-unit>
        <trans-unit id="28f82db31b3763b5498ce79581e7e7d860042dc6" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;a href=&quot;https://github.com/foreverjs/forever&quot;&gt;Forever&lt;/a&gt;&lt;/strong&gt;: A simple command-line interface tool to ensure that a script runs continuously (forever). Forever&amp;rsquo;s simple interface makes it ideal for running smaller deployments of Node.js apps and scripts.</source>
          <target state="translated">&lt;strong&gt;&lt;a href=&quot;https://github.com/foreverjs/forever&quot;&gt;永远&lt;/a&gt;&lt;/strong&gt;：一个简单的命令行界面工具，可确保脚本连续（永远）运行。Forever的简单界面使其非常适合运行Node.js应用程序和脚本的较小部署。</target>
        </trans-unit>
        <trans-unit id="5454d0375d7ec69566c3f2ab2d3afc8555abd83d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Changed&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Changed&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="852d725222bcafd264b396a53e26612a7dc393ba" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Error-handling middleware&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;错误处理中间件&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="b88f74e43c0912ff4d325bb1015b1e1f17c63fd4" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Express 3.x IS NO LONGER MAINTAINED&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Express 3.x不再被维护&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="654d363a7527a4168f82eb4b3199a4c9078d91c8" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Improvements&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Improvements&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="dabb7cae0474afc1ffc486536ad87da3a562d236" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Module&lt;/strong&gt;: &lt;a href=&quot;https://github.com/couchbase/couchnode&quot;&gt;couchnode&lt;/a&gt;</source>
          <target state="translated">&lt;strong&gt;模块&lt;/strong&gt;：&lt;a href=&quot;https://github.com/couchbase/couchnode&quot;&gt;长椅&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="ea8da15268194ccc28005d761560d7fa90285dc3" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Module&lt;/strong&gt;: &lt;a href=&quot;https://github.com/datastax/nodejs-driver&quot;&gt;cassandra-driver&lt;/a&gt;</source>
          <target state="translated">&lt;strong&gt;模块&lt;/strong&gt;：&lt;a href=&quot;https://github.com/datastax/nodejs-driver&quot;&gt;cassandra驱动&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="4340ea656c2a8e7ed39e0c840c093087ac38f5ce" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Module&lt;/strong&gt;: &lt;a href=&quot;https://github.com/dscape/nano&quot;&gt;nano&lt;/a&gt;</source>
          <target state="translated">&lt;strong&gt;模组&lt;/strong&gt;：&lt;a href=&quot;https://github.com/dscape/nano&quot;&gt;纳米&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="d8454dac4641f1ac688283ef032729dc087aa14e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Module&lt;/strong&gt;: &lt;a href=&quot;https://github.com/elastic/elasticsearch-js&quot;&gt;elasticsearch&lt;/a&gt;</source>
          <target state="translated">&lt;strong&gt;模组&lt;/strong&gt;：&lt;a href=&quot;https://github.com/elastic/elasticsearch-js&quot;&gt;elasticsearch&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="21b484042bec2ef656771ed20c205aac6050508c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Module&lt;/strong&gt;: &lt;a href=&quot;https://github.com/felixge/node-mysql/&quot;&gt;mysql&lt;/a&gt;</source>
          <target state="translated">&lt;strong&gt;模块&lt;/strong&gt;：&lt;a href=&quot;https://github.com/felixge/node-mysql/&quot;&gt;MySQL&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="c0b550f7d45974dea3b1ac95939e4ab0b6a7e548" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Module&lt;/strong&gt;: &lt;a href=&quot;https://github.com/hacksparrow/apoc&quot;&gt;apoc&lt;/a&gt;</source>
          <target state="translated">&lt;strong&gt;模组&lt;/strong&gt;：&lt;a href=&quot;https://github.com/hacksparrow/apoc&quot;&gt;apoc&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="293192bb45948147f02b09c51f38b4e0cfe8ab68" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Module&lt;/strong&gt;: &lt;a href=&quot;https://github.com/mapbox/node-sqlite3&quot;&gt;sqlite3&lt;/a&gt;</source>
          <target state="translated">&lt;strong&gt;模组&lt;/strong&gt;：&lt;a href=&quot;https://github.com/mapbox/node-sqlite3&quot;&gt;sqlite3&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="06448398afda08bb5cdbbfc4cff41e6216354433" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Module&lt;/strong&gt;: &lt;a href=&quot;https://github.com/mongodb/node-mongodb-native&quot;&gt;mongodb&lt;/a&gt;</source>
          <target state="translated">&lt;strong&gt;模块&lt;/strong&gt;：&lt;a href=&quot;https://github.com/mongodb/node-mongodb-native&quot;&gt;mongodb&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="5179a5dfc75ec7265f09c04d2f2a2f761aa2ba34" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Module&lt;/strong&gt;: &lt;a href=&quot;https://github.com/mranney/node_redis&quot;&gt;redis&lt;/a&gt;</source>
          <target state="translated">&lt;strong&gt;模块&lt;/strong&gt;：&lt;a href=&quot;https://github.com/mranney/node_redis&quot;&gt;redis&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="b071a71aee4378c59dc8b7d7c8439c333f1427d4" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Module&lt;/strong&gt;: &lt;a href=&quot;https://github.com/oracle/node-oracledb&quot;&gt;oracledb&lt;/a&gt;</source>
          <target state="translated">&lt;strong&gt;模块&lt;/strong&gt;：&lt;a href=&quot;https://github.com/oracle/node-oracledb&quot;&gt;oracledb&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="1aa7f61b20b8d497a2fffa802b20bd66afc52db5" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Module&lt;/strong&gt;: &lt;a href=&quot;https://github.com/rvagg/node-levelup&quot;&gt;levelup&lt;/a&gt;</source>
          <target state="translated">&lt;strong&gt;模块&lt;/strong&gt;：&lt;a href=&quot;https://github.com/rvagg/node-levelup&quot;&gt;升级&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="747f15f2b6be327f8be2f6822aa102a9687ddb9b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Module&lt;/strong&gt;: &lt;a href=&quot;https://github.com/tediousjs/tedious&quot;&gt;tedious&lt;/a&gt;</source>
          <target state="translated">&lt;strong&gt;模块&lt;/strong&gt;：&lt;a href=&quot;https://github.com/tediousjs/tedious&quot;&gt;乏味&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="e2f54d8c195c7cfcdbafd5032225a116b6c83800" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Module&lt;/strong&gt;: &lt;a href=&quot;https://github.com/vitaly-t/pg-promise&quot;&gt;pg-promise&lt;/a&gt;</source>
          <target state="translated">&lt;strong&gt;模组&lt;/strong&gt;：&lt;a href=&quot;https://github.com/vitaly-t/pg-promise&quot;&gt;pg-promise&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="100d21febb03dd8279f48192722ad6009d0b5ed4" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;NOTE:&lt;/strong&gt; The &lt;code&gt;view&lt;/code&gt; argument performs file system operations like reading a file from disk and evaluating Node.js modules, and as so for security reasons should not contain input from the end-user.</source>
          <target state="translated">&lt;strong&gt;注意：&lt;/strong&gt;所述的 &lt;code&gt;view&lt;/code&gt; 参数执行文件系统操作，如从磁盘读取一个文件和评估的Node.js模块，并且作为这样出于安全原因不应该从终端用户包含输入。</target>
        </trans-unit>
        <trans-unit id="4fc1597dfe992d87dcc418262208d7b520cc2ad4" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;NOTE&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;NOTE&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="02483d5a3acc9cd87e654d7dd1c17bffb518a6af" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;NOTE&lt;/strong&gt;: Although these middleware functions are added via a particular router, &lt;em&gt;when&lt;/em&gt; they run is defined by the path they are attached to (not the router). Therefore, middleware added via one router may run for other routers if its routes match. For example, this code shows two different routers mounted on the same path:</source>
          <target state="translated">&lt;strong&gt;注意&lt;/strong&gt;：尽管这些中间件功能是通过特定的路由器添加的，&lt;em&gt;但是&lt;/em&gt;它们的运行时间是由它们附加到的路径（而不是路由器）定义的。因此，如果一个路由器添加的中间件的路由匹配，则该中间件可以为其他路由器运行。例如，此代码显示了安装在同一路径上的两个不同的路由器：</target>
        </trans-unit>
        <trans-unit id="29aef9716b5bcd1c3ce90f8ab42741548bbb9f11" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;NOTE&lt;/strong&gt;: If you believe you have discovered a security vulnerability in Express, please see &lt;a href=&quot;http://expressjs.com/en/resources/contributing.html#security-policies-and-procedures&quot;&gt;Security Policies and Procedures&lt;/a&gt;.</source>
          <target state="translated">&lt;strong&gt;注意&lt;/strong&gt;：如果您相信已在Express中发现了安全漏洞，请参阅&amp;ldquo; &lt;a href=&quot;http://expressjs.com/en/resources/contributing.html#security-policies-and-procedures&quot;&gt;安全策略和过程&amp;rdquo;&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="067afe59c5369af2ecc5365228588fe29b034395" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;NOTE&lt;/strong&gt;: These settings apply only to dynamic files, not static files. The &lt;a href=&quot;#express.static&quot;&gt;express.static&lt;/a&gt; middleware ignores these settings.</source>
          <target state="translated">&lt;strong&gt;注意&lt;/strong&gt;：这些设置仅适用于动态文件，不适用于静态文件。该&lt;a href=&quot;#express.static&quot;&gt;express.static&lt;/a&gt;中间件忽略这些设置。</target>
        </trans-unit>
        <trans-unit id="c219236be2354a0b1c0f685d1f785328e563f143" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;NOTE&lt;/strong&gt;: With the default value, it will not ignore files in a directory that begins with a dot.</source>
          <target state="translated">&lt;strong&gt;注意&lt;/strong&gt;：使用默认值时，它将不会忽略以点开头的目录中的文件。</target>
        </trans-unit>
        <trans-unit id="3444f58c56bec5114853d5a49adde8fc107cae67" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; The environment variables beginning with &lt;code&gt;DEBUG_&lt;/code&gt; end up being converted into an Options object that gets used with &lt;code&gt;%o&lt;/code&gt;/&lt;code&gt;%O&lt;/code&gt; formatters. See the Node.js documentation for &lt;a href=&quot;https://nodejs.org/api/util.html#util_util_inspect_object_options&quot;&gt;&lt;code&gt;util.inspect()&lt;/code&gt;&lt;/a&gt; for the complete list.</source>
          <target state="translated">&lt;strong&gt;注意：&lt;/strong&gt;以 &lt;code&gt;DEBUG_&lt;/code&gt; 开头的环境变量最终被转换为与 &lt;code&gt;%o&lt;/code&gt; / &lt;code&gt;%O&lt;/code&gt; 格式化程序一起使用的Options对象。有关完整列表，请参见&lt;a href=&quot;https://nodejs.org/api/util.html#util_util_inspect_object_options&quot;&gt; &lt;code&gt;util.inspect()&lt;/code&gt; &lt;/a&gt;的Node.js文档。</target>
        </trans-unit>
        <trans-unit id="63fcf747477833a3c150fcbe36dc0253404dadb1" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: Jade has been renamed to &lt;a href=&quot;https://www.npmjs.com/package/pug&quot;&gt;Pug&lt;/a&gt;. You can continue to use Jade in your app, and it will work just fine. However if you want the latest updates to the template engine, you must replace Jade with Pug in your app.</source>
          <target state="translated">&lt;strong&gt;注意&lt;/strong&gt;：翡翠已重命名为&lt;a href=&quot;https://www.npmjs.com/package/pug&quot;&gt;帕格&lt;/a&gt;。您可以继续在您的应用程序中使用Jade，它将正常工作。但是，如果要对模板引擎进行最新更新，则必须在应用程序中将Jade替换为Pug。</target>
        </trans-unit>
        <trans-unit id="34cab5224d09d7570fcd45a88c384b4289bae90f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Removed methods and properties&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;删除的方法和属性&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="7d30160ed6f321a85568d1331d9623a7f7d09926" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;SystemD&lt;/strong&gt;: The default process manager on modern Linux distributions, that makes it simple to run a Node application as a service. For more information, see &lt;a href=&quot;https://www.axllent.org/docs/view/nodejs-service-with-systemd/&quot;&gt;&amp;ldquo;Run node.js service with systemd&amp;rdquo; by Ralph Slooten (@axllent)&lt;/a&gt;.</source>
          <target state="translated">&lt;strong&gt;SystemD&lt;/strong&gt;：现代Linux发行版上的默认进程管理器，使将Node应用程序作为服务运行变得很简单。有关更多信息，请参见&lt;a href=&quot;https://www.axllent.org/docs/view/nodejs-service-with-systemd/&quot;&gt;Ralph Slooten（@axllent）的&amp;ldquo;使用systemd运行node.js服务&amp;rdquo;&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="825e3223ab8a79167886ad1a851c9efc93a66111" translate="yes" xml:space="preserve">
          <source>&lt;sup&gt;th&lt;/sup&gt; hop from the front-facing proxy server as the client.</source>
          <target state="translated">&lt;sup&gt;&lt;/sup&gt;从前端代理服务器作为客户端的&lt;sup&gt;第一个&lt;/sup&gt;跃点。</target>
        </trans-unit>
        <trans-unit id="6e8cf9b51fa0efc8bf55f02ba2146510457b07a8" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;back&lt;/code&gt; redirection redirects the request back to the &lt;a href=&quot;http://en.wikipedia.org/wiki/HTTP_referer&quot;&gt;referer&lt;/a&gt;, defaulting to &lt;code&gt;/&lt;/code&gt; when the referer is missing.</source>
          <target state="translated">甲 &lt;code&gt;back&lt;/code&gt; 重定向请求重定向回&lt;a href=&quot;http://en.wikipedia.org/wiki/HTTP_referer&quot;&gt;引荐&lt;/a&gt;，默认为 &lt;code&gt;/&lt;/code&gt; 引荐丢失时。</target>
        </trans-unit>
        <trans-unit id="a8a55ffc9eece1595b14c281ea06ae87c85d279a" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;path&lt;/code&gt; value of &amp;ldquo;back&amp;rdquo; has a special meaning, it refers to the URL specified in the &lt;code&gt;Referer&lt;/code&gt; header of the request. If the &lt;code&gt;Referer&lt;/code&gt; header was not specified, it refers to &amp;ldquo;/&amp;rdquo;.</source>
          <target state="translated">甲 &lt;code&gt;path&lt;/code&gt; &amp;ldquo;背&amp;rdquo;的值具有特殊的含义，它指的是在指定的URL &lt;code&gt;Referer&lt;/code&gt; 请求的报头中。如果未指定 &lt;code&gt;Referer&lt;/code&gt; 标头，则它引用&amp;ldquo; /&amp;rdquo;。</target>
        </trans-unit>
        <trans-unit id="d59dfcc6a5035ea151973a1e4b8863d0b01ac675" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;router&lt;/code&gt; object is an isolated instance of middleware and routes. You can think of it as a &amp;ldquo;mini-application,&amp;rdquo; capable only of performing middleware and routing functions. Every Express application has a built-in app router.</source>
          <target state="translated">甲 &lt;code&gt;router&lt;/code&gt; 目的是中间件和路由的分离的实例。您可以将其视为&amp;ldquo;微型应用程序&amp;rdquo;，仅能够执行中间件和路由功能。每个Express应用程序都有一个内置的应用路由器。</target>
        </trans-unit>
        <trans-unit id="4f949b8b99c4692925f23d35d29f38e7bbf02338" translate="yes" xml:space="preserve">
          <source>A &lt;em&gt;template engine&lt;/em&gt; enables you to use static template files in your application. At runtime, the template engine replaces variables in a template file with actual values, and transforms the template into an HTML file sent to the client. This approach makes it easier to design an HTML page.</source>
          <target state="translated">一个&lt;em&gt;模板引擎&lt;/em&gt;使您能够在您的应用程序中使用静态模板文件。在运行时，模板引擎用实际值替换模板文件中的变量，并将模板转换为发送给客户端的HTML文件。这种方法使设计HTML页面更加容易。</target>
        </trans-unit>
        <trans-unit id="6b7961a7c5537a99b213be824954f48846b39765" translate="yes" xml:space="preserve">
          <source>A Boolean property that is &lt;code&gt;true&lt;/code&gt; if the request&amp;rsquo;s &lt;code&gt;X-Requested-With&lt;/code&gt; header field is &amp;ldquo;XMLHttpRequest&amp;rdquo;, indicating that the request was issued by a client library such as jQuery.</source>
          <target state="translated">一个布尔型属性，如果请求的 &lt;code&gt;X-Requested-With&lt;/code&gt; 标头字段为&amp;ldquo; XMLHttpRequest&amp;rdquo;，则为 &lt;code&gt;true&lt;/code&gt; ，指示该请求是由客户端库（如jQuery）发出的。</target>
        </trans-unit>
        <trans-unit id="9fed5f66d90922c731a8fe856f209e942be6b504" translate="yes" xml:space="preserve">
          <source>A Boolean property that is true if a TLS connection is established. Equivalent to:</source>
          <target state="translated">一个布尔属性,如果建立了TLS连接,则为真。相当于:</target>
        </trans-unit>
        <trans-unit id="1a75f96535d0ecf7ad3f2c5c9c53b866fc8db4d1" translate="yes" xml:space="preserve">
          <source>A combination of all of the above.</source>
          <target state="translated">以上各项的结合。</target>
        </trans-unit>
        <trans-unit id="193e3dad8ae2b33f7e4840778404a86d966de7cf" translate="yes" xml:space="preserve">
          <source>A combination of independent functions and arrays of functions can handle a route. For example:</source>
          <target state="translated">独立函数和函数数组的组合可以处理一个路由。例如:</target>
        </trans-unit>
        <trans-unit id="ddd5191f34f83990783dabcc9dbae1d282d52ecd" translate="yes" xml:space="preserve">
          <source>A custom query string parsing function will receive the complete query string, and must return an object of query keys and their values.</source>
          <target state="translated">自定义查询字符串解析函数将接收完整的查询字符串,并且必须返回一个查询键及其值的对象。</target>
        </trans-unit>
        <trans-unit id="46930e0e80154ffd07d068f28fe391624e148057" translate="yes" xml:space="preserve">
          <source>A directory or an array of directories for the application's views. If an array, the views are looked up in the order they occur in the array.</source>
          <target state="translated">应用程序视图的目录或目录数组。如果是数组,则按照数组中出现的顺序查找视图。</target>
        </trans-unit>
        <trans-unit id="40f63a8239a6492d8dce32081c2282f92cce46e7" translate="yes" xml:space="preserve">
          <source>A leading colon character (:) in the name for the &lt;code&gt;app.param(name, fn)&lt;/code&gt; function is a remnant of Express 3, and for the sake of backwards compatibility, Express 4 supported it with a deprecation notice. Express 5 will silently ignore it and use the name parameter without prefixing it with a colon.</source>
          <target state="translated">&lt;code&gt;app.param(name, fn)&lt;/code&gt; 函数名称中的冒号（:)前导是Express 3的残余，并且为了向后兼容，Express 4支持弃用通知。Express 5会静默忽略它，并使用name参数，而不用冒号作为前缀。</target>
        </trans-unit>
        <trans-unit id="60941ea387d9f47246f86a217d44e0a8a122279e" translate="yes" xml:space="preserve">
          <source>A load balancer is usually a reverse proxy that orchestrates traffic to and from multiple application instances and servers. You can easily set up a load balancer for your app by using &lt;a href=&quot;http://nginx.org/en/docs/http/load_balancing.html&quot;&gt;Nginx&lt;/a&gt; or &lt;a href=&quot;https://www.digitalocean.com/community/tutorials/an-introduction-to-haproxy-and-load-balancing-concepts&quot;&gt;HAProxy&lt;/a&gt;.</source>
          <target state="translated">负载平衡器通常是反向代理，可以协调往返多个应用程序实例和服务器的流量。您可以使用&lt;a href=&quot;http://nginx.org/en/docs/http/load_balancing.html&quot;&gt;Nginx&lt;/a&gt;或&lt;a href=&quot;https://www.digitalocean.com/community/tutorials/an-introduction-to-haproxy-and-load-balancing-concepts&quot;&gt;HAProxy&lt;/a&gt;轻松为您的应用设置负载均衡器。</target>
        </trans-unit>
        <trans-unit id="72e3418c1daceeebfd798c8446443521ccb8461d" translate="yes" xml:space="preserve">
          <source>A load balancer uses health checks to determine if an application instance is healthy and can accept requests. For example, &lt;a href=&quot;https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-probes/&quot;&gt;Kubernetes has two health checks&lt;/a&gt;:</source>
          <target state="translated">负载平衡器使用运行状况检查来确定应用程序实例是否运行正常并可以接受请求。例如，&lt;a href=&quot;https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-probes/&quot;&gt;Kubernetes有两个运行状况检查&lt;/a&gt;：</target>
        </trans-unit>
        <trans-unit id="9436c73a732f1ca26e08496bc0f00abf85901340" translate="yes" xml:space="preserve">
          <source>A middleware function.</source>
          <target state="translated">一个中间件功能。</target>
        </trans-unit>
        <trans-unit id="8ccb382345ef90199608d591c808e9a7346fabdc" translate="yes" xml:space="preserve">
          <source>A new &lt;code&gt;body&lt;/code&gt; object containing the parsed data is populated on the &lt;code&gt;request&lt;/code&gt; object after the middleware (i.e. &lt;code&gt;req.body&lt;/code&gt;), or an empty object (&lt;code&gt;{}&lt;/code&gt;) if there was no body to parse, the &lt;code&gt;Content-Type&lt;/code&gt; was not matched, or an error occurred.</source>
          <target state="translated">在中间件（即 &lt;code&gt;req.body&lt;/code&gt; ）之后，在 &lt;code&gt;request&lt;/code&gt; 对象上填充一个包含已解析数据的新 &lt;code&gt;body&lt;/code&gt; 对象；如果没有要解析的主体， &lt;code&gt;Content-Type&lt;/code&gt; 不匹配，则填充一个空对象（ &lt;code&gt;{}&lt;/code&gt; ）。错误发生。</target>
        </trans-unit>
        <trans-unit id="d2823499c630a696b388793baf596a31acf63142" translate="yes" xml:space="preserve">
          <source>A new &lt;code&gt;body&lt;/code&gt; object containing the parsed data is populated on the &lt;code&gt;request&lt;/code&gt; object after the middleware (i.e. &lt;code&gt;req.body&lt;/code&gt;), or an empty object (&lt;code&gt;{}&lt;/code&gt;) if there was no body to parse, the &lt;code&gt;Content-Type&lt;/code&gt; was not matched, or an error occurred. This object will contain key-value pairs, where the value can be a string or array (when &lt;code&gt;extended&lt;/code&gt; is &lt;code&gt;false&lt;/code&gt;), or any type (when &lt;code&gt;extended&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt;).</source>
          <target state="translated">在中间件（即 &lt;code&gt;req.body&lt;/code&gt; ）之后，在 &lt;code&gt;request&lt;/code&gt; 对象上填充一个包含已解析数据的新 &lt;code&gt;body&lt;/code&gt; 对象；如果没有要解析的主体， &lt;code&gt;Content-Type&lt;/code&gt; 不匹配，则填充一个空对象（ &lt;code&gt;{}&lt;/code&gt; ）。错误发生。该对象将包含键值对，其中值可以是字符串或数组（ &lt;code&gt;extended&lt;/code&gt; 为 &lt;code&gt;false&lt;/code&gt; 时）或任何类型（ &lt;code&gt;extended&lt;/code&gt; 为 &lt;code&gt;true&lt;/code&gt; 时）。</target>
        </trans-unit>
        <trans-unit id="5538c306afdbcf22a6a7ffa3eb3533c8e9a73c3c" translate="yes" xml:space="preserve">
          <source>A new &lt;code&gt;body&lt;/code&gt; string containing the parsed data is populated on the &lt;code&gt;request&lt;/code&gt; object after the middleware (i.e. &lt;code&gt;req.body&lt;/code&gt;), or an empty object (&lt;code&gt;{}&lt;/code&gt;) if there was no body to parse, the &lt;code&gt;Content-Type&lt;/code&gt; was not matched, or an error occurred.</source>
          <target state="translated">在中间件（即 &lt;code&gt;req.body&lt;/code&gt; ）之后，将在 &lt;code&gt;request&lt;/code&gt; 对象上填充一个包含已解析数据的新 &lt;code&gt;body&lt;/code&gt; 字符串；如果没有要解析的主体， &lt;code&gt;Content-Type&lt;/code&gt; 不匹配，则填充一个空对象（ &lt;code&gt;{}&lt;/code&gt; ）。错误发生。</target>
        </trans-unit>
        <trans-unit id="51cfc01db7f6c42db37b3f98bf5db0c4a7875ce2" translate="yes" xml:space="preserve">
          <source>A new &lt;code&gt;body&lt;/code&gt;&lt;code&gt;Buffer&lt;/code&gt; containing the parsed data is populated on the &lt;code&gt;request&lt;/code&gt; object after the middleware (i.e. &lt;code&gt;req.body&lt;/code&gt;), or an empty object (&lt;code&gt;{}&lt;/code&gt;) if there was no body to parse, the &lt;code&gt;Content-Type&lt;/code&gt; was not matched, or an error occurred.</source>
          <target state="translated">在中间件（即 &lt;code&gt;req.body&lt;/code&gt; ）之后，将在 &lt;code&gt;request&lt;/code&gt; 对象上填充一个包含已解析数据的新 &lt;code&gt;body&lt;/code&gt; &lt;code&gt;Buffer&lt;/code&gt; 如果没有要解析的主体， &lt;code&gt;Content-Type&lt;/code&gt; 不匹配，则填充一个空对象（ &lt;code&gt;{}&lt;/code&gt; ）。错误发生。</target>
        </trans-unit>
        <trans-unit id="97d452a6cb1370559254f98897e8a9ba7d499649" translate="yes" xml:space="preserve">
          <source>A new class, &lt;code&gt;express.Router&lt;/code&gt;, to create modular mountable route handlers.</source>
          <target state="translated">一个新类 &lt;code&gt;express.Router&lt;/code&gt; ，用于创建模块化可安装的路由处理程序。</target>
        </trans-unit>
        <trans-unit id="3cc937a685ea447599b4241d63390e81c64ada2f" translate="yes" xml:space="preserve">
          <source>A new method, &lt;code&gt;app.route()&lt;/code&gt;, to create chainable route handlers for a route path.</source>
          <target state="translated">一种新方法 &lt;code&gt;app.route()&lt;/code&gt; ，用于为路由路径创建可链接的路由处理程序。</target>
        </trans-unit>
        <trans-unit id="89c199d69e8b78edd3ce240270476eb7dc9e04c1" translate="yes" xml:space="preserve">
          <source>A param callback will be called only once in a request-response cycle, even if the parameter is matched in multiple routes, as shown in the following examples.</source>
          <target state="translated">一个param回调在一个请求-响应周期中只会被调用一次,即使参数在多个路由中被匹配,如下面的例子所示。</target>
        </trans-unit>
        <trans-unit id="23dd5ad49f5a44cada097ad3097dc45d45e72495" translate="yes" xml:space="preserve">
          <source>A path pattern.</source>
          <target state="translated">一种路径模式。</target>
        </trans-unit>
        <trans-unit id="699b669022b7626ad4b16bb6b497a9c8f2ded9b8" translate="yes" xml:space="preserve">
          <source>A process manager is somewhat like an application server: it&amp;rsquo;s a &amp;ldquo;container&amp;rdquo; for applications that facilitates deployment, provides high availability, and enables you to manage the application at runtime.</source>
          <target state="translated">流程管理器有点像应用程序服务器：它是应用程序的&amp;ldquo;容器&amp;rdquo;，可促进部署，提供高可用性并允许您在运行时管理应用程序。</target>
        </trans-unit>
        <trans-unit id="fbaff52558fded378d7f9410df1805562da47262" translate="yes" xml:space="preserve">
          <source>A regular expression pattern to match paths.</source>
          <target state="translated">一个匹配路径的正则表达式模式。</target>
        </trans-unit>
        <trans-unit id="887e75394832088aa1953a29686be70f2b3a74b3" translate="yes" xml:space="preserve">
          <source>A reverse proxy sits in front of a web app and performs supporting operations on the requests, apart from directing requests to the app. It can handle error pages, compression, caching, serving files, and load balancing among other things.</source>
          <target state="translated">反向代理位于网络应用的前面,除了将请求引导到应用外,还对请求进行辅助操作。它可以处理错误页面、压缩、缓存、服务文件和负载均衡等。</target>
        </trans-unit>
        <trans-unit id="7fa82bbdf88240e7eea15273b926ee06b152bb66" translate="yes" xml:space="preserve">
          <source>A route method is derived from one of the HTTP methods, and is attached to an instance of the &lt;code&gt;express&lt;/code&gt; class.</source>
          <target state="translated">路由方法是从HTTP方法之一派生的，并附加到 &lt;code&gt;express&lt;/code&gt; 类的实例。</target>
        </trans-unit>
        <trans-unit id="e30e06cb10d2cdfeb796e73d06a1abd9c8b69ebb" translate="yes" xml:space="preserve">
          <source>A route will match any path that follows its path immediately with a &amp;ldquo;&lt;code&gt;/&lt;/code&gt;&amp;rdquo;. For example: &lt;code&gt;app.use('/apple', ...)&lt;/code&gt; will match &amp;ldquo;/apple&amp;rdquo;, &amp;ldquo;/apple/images&amp;rdquo;, &amp;ldquo;/apple/images/news&amp;rdquo;, and so on.</source>
          <target state="translated">一条路线将匹配紧随其后的任何路径，并带有&amp;ldquo; &lt;code&gt;/&lt;/code&gt; &amp;rdquo;。例如： &lt;code&gt;app.use('/apple', ...)&lt;/code&gt; 将匹配&amp;ldquo; / apple&amp;rdquo;，&amp;ldquo; / apple / images&amp;rdquo;，&amp;ldquo; / apple / images / news&amp;rdquo;，依此类推。</target>
        </trans-unit>
        <trans-unit id="40a300173081d5b6dd250e10d043a039cafcfe48" translate="yes" xml:space="preserve">
          <source>A router behaves like middleware itself, so you can use it as an argument to &lt;a href=&quot;#app.use&quot;&gt;app.use()&lt;/a&gt; or as the argument to another router&amp;rsquo;s &lt;a href=&quot;#router.use&quot;&gt;use()&lt;/a&gt; method.</source>
          <target state="translated">路由器的行为类似于中间件本身，因此您可以将其用作&lt;a href=&quot;#app.use&quot;&gt;app.use（）&lt;/a&gt;的参数或用作另一台路由器的&lt;a href=&quot;#router.use&quot;&gt;use（）&lt;/a&gt;方法的参数。</target>
        </trans-unit>
        <trans-unit id="90b7d58381dd830b6ed0a22b31e3947435c5f907" translate="yes" xml:space="preserve">
          <source>A router is valid middleware.</source>
          <target state="translated">路由器是有效的中间件。</target>
        </trans-unit>
        <trans-unit id="fae0457d772c13f6ef9abc542542f7c427088e67" translate="yes" xml:space="preserve">
          <source>A series of middleware functions (separated by commas).</source>
          <target state="translated">一系列的中间件功能(用逗号隔开)。</target>
        </trans-unit>
        <trans-unit id="4ffff8834c15608a7a7690734b562691dcaab5ca" translate="yes" xml:space="preserve">
          <source>A simple and powerful technique is to block authorization attempts using two metrics:</source>
          <target state="translated">一个简单而强大的技术是使用两个指标来阻止授权尝试。</target>
        </trans-unit>
        <trans-unit id="6b49e87d5c250cf8ee285214237f575462d100b3" translate="yes" xml:space="preserve">
          <source>A single callback function can handle a route. For example:</source>
          <target state="translated">一个回调函数就可以处理一个路由。例如:</target>
        </trans-unit>
        <trans-unit id="f98d95135c7ae62f83f7cb441bf77c309a4981eb" translate="yes" xml:space="preserve">
          <source>A string representing a path.</source>
          <target state="translated">一个代表路径的字符串。</target>
        </trans-unit>
        <trans-unit id="229b731ae67bffae5deb8ff18c4aa1a811db308a" translate="yes" xml:space="preserve">
          <source>A sub-app is an instance of &lt;code&gt;express&lt;/code&gt; that may be used for handling the request to a route.</source>
          <target state="translated">子应用是 &lt;code&gt;express&lt;/code&gt; 的一个实例，可用于处理对路线的请求。</target>
        </trans-unit>
        <trans-unit id="65b9a9cd5fe9230f62a223678e98843501d66a14" translate="yes" xml:space="preserve">
          <source>A synchronous function used for cookie value encoding. Defaults to &lt;code&gt;encodeURIComponent&lt;/code&gt;.</source>
          <target state="translated">用于cookie值编码的同步函数。默认为 &lt;code&gt;encodeURIComponent&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="1fafeecde20053b459296b14402cc5b0495f80d2" translate="yes" xml:space="preserve">
          <source>A systemd service configuration file is called a &lt;em&gt;unit file&lt;/em&gt;, with a filename ending in .service. Here&amp;rsquo;s an example unit file to manage a Node app directly (replace the bold text with values for your system and app):</source>
          <target state="translated">系统服务配置文件称为&lt;em&gt;单元文件&lt;/em&gt;，文件名以.service结尾。这是一个示例单元文件，用于直接管理Node应用程序（将粗体文本替换为系统和应用程序的值）：</target>
        </trans-unit>
        <trans-unit id="828e9f851b0cc4224fefec72afbe9034ee1a6611" translate="yes" xml:space="preserve">
          <source>A systemd service configuration file is called a &lt;em&gt;unit file&lt;/em&gt;, with a filename ending in &lt;code&gt;.service&lt;/code&gt;. Here&amp;rsquo;s an example unit file to manage a Node app directly. Replace the values enclosed in &lt;code&gt;&amp;lt;angle brackets&amp;gt;&lt;/code&gt; for your system and app:</source>
          <target state="translated">系统服务配置文件称为&lt;em&gt;单元文件&lt;/em&gt;，文件名以 &lt;code&gt;.service&lt;/code&gt; 结尾。这是一个直接管理Node应用程序的示例单位文件。替换系统和应用程序中 &lt;code&gt;&amp;lt;angle brackets&amp;gt;&lt;/code&gt; 包含的值：</target>
        </trans-unit>
        <trans-unit id="3df94f5e981eebea83ceda2defe5a16f62424eca" translate="yes" xml:space="preserve">
          <source>Add callback triggers to &lt;a href=&quot;guide/routing#route-parameters&quot;&gt;route parameters&lt;/a&gt;, where &lt;code&gt;name&lt;/code&gt; is the name of the parameter or an array of them, and &lt;code&gt;callback&lt;/code&gt; is the callback function. The parameters of the callback function are the request object, the response object, the next middleware, the value of the parameter and the name of the parameter, in that order.</source>
          <target state="translated">向&lt;a href=&quot;guide/routing#route-parameters&quot;&gt;路由参数&lt;/a&gt;添加回调触发器，其中 &lt;code&gt;name&lt;/code&gt; 是参数的名称或它们的数组， &lt;code&gt;callback&lt;/code&gt; 是回调函数。回调函数的参数依次为请求对象，响应对象，下一个中间件，参数值和参数名称。</target>
        </trans-unit>
        <trans-unit id="27c2f8e639ad8ac54997096959cd543b13b4fa3f" translate="yes" xml:space="preserve">
          <source>Add routes dynamically at runtime on an instance of &lt;code&gt;express.Router()&lt;/code&gt; so the routes are not superseded by a middleware function.</source>
          <target state="translated">在运行时在 &lt;code&gt;express.Router()&lt;/code&gt; 实例上动态添加路由，这样路由就不会被中间件功能所取代。</target>
        </trans-unit>
        <trans-unit id="6811fd65164ad5ae3c77549d4a47827c2d7d4717" translate="yes" xml:space="preserve">
          <source>Added the &lt;code&gt;--hogan&lt;/code&gt; option to support &lt;a href=&quot;http://twitter.github.io/hogan.js/&quot;&gt;Hogan.js&lt;/a&gt;.</source>
          <target state="translated">添加了 &lt;code&gt;--hogan&lt;/code&gt; 选项以支持&lt;a href=&quot;http://twitter.github.io/hogan.js/&quot;&gt;Hogan.js&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="3b93b5185aa99d13fc038e4d0091630d27a0e294" translate="yes" xml:space="preserve">
          <source>Adding the capability to connect databases to Express apps is just a matter of loading an appropriate Node.js driver for the database in your app. This document briefly explains how to add and use some of the most popular Node.js modules for database systems in your Express app:</source>
          <target state="translated">将连接数据库的功能添加到Express应用程序中,只需为您的应用程序中的数据库加载适当的Node.js驱动程序即可。本文档简要介绍了如何在您的 Express 应用程序中添加和使用一些最流行的 Node.js 模块来连接数据库系统。</target>
        </trans-unit>
        <trans-unit id="6213449961b9306cdaf661411c97b1944e20e97a" translate="yes" xml:space="preserve">
          <source>Additional considerations</source>
          <target state="translated">其他考虑因素</target>
        </trans-unit>
        <trans-unit id="51f76d93c1c7e58cf66141ad873fd03926a158d7" translate="yes" xml:space="preserve">
          <source>Additionally, using &lt;code&gt;uncaughtException&lt;/code&gt; is officially recognized as &lt;a href=&quot;https://nodejs.org/api/process.html#process_event_uncaughtexception&quot;&gt;crude&lt;/a&gt;. So listening for &lt;code&gt;uncaughtException&lt;/code&gt; is just a bad idea. This is why we recommend things like multiple processes and supervisors: crashing and restarting is often the most reliable way to recover from an error.</source>
          <target state="translated">此外，使用 &lt;code&gt;uncaughtException&lt;/code&gt; 被正式确认为&lt;a href=&quot;https://nodejs.org/api/process.html#process_event_uncaughtexception&quot;&gt;raw&lt;/a&gt;。因此，监听 &lt;code&gt;uncaughtException&lt;/code&gt; 只是一个坏主意。这就是为什么我们建议使用多个流程和管理程序之类的原因：崩溃和重新启动通常是从错误中恢复的最可靠方法。</target>
        </trans-unit>
        <trans-unit id="714a1cb4ae6bdc5dc779657d3f2e30b31231dd9b" translate="yes" xml:space="preserve">
          <source>Adds callback triggers to route parameters, where &lt;code&gt;name&lt;/code&gt; is the name of the parameter and &lt;code&gt;callback&lt;/code&gt; is the callback function. Although &lt;code&gt;name&lt;/code&gt; is technically optional, using this method without it is deprecated starting with Express v4.11.0 (see below).</source>
          <target state="translated">将回调触发器添加到路由参数，其中 &lt;code&gt;name&lt;/code&gt; 是参数的名称， &lt;code&gt;callback&lt;/code&gt; 是回调函数。尽管 &lt;code&gt;name&lt;/code&gt; 在技​​术上是可选的，但从Express v4.11.0开始，不建议使用不带name的方法（请参见下文）。</target>
        </trans-unit>
        <trans-unit id="fe4dadb51ce11587689d4253819cf23a7653bf00" translate="yes" xml:space="preserve">
          <source>Adds the field to the &lt;code&gt;Vary&lt;/code&gt; response header, if it is not there already.</source>
          <target state="translated">如果该字段尚未存在，则将其添加到 &lt;code&gt;Vary&lt;/code&gt; 响应头中。</target>
        </trans-unit>
        <trans-unit id="63c9e0bac98e698a29bdae673d4e9edfa151c025" translate="yes" xml:space="preserve">
          <source>Advanced options</source>
          <target state="translated">高级选项</target>
        </trans-unit>
        <trans-unit id="99b0021e8fdff5ec6edaa329da8ecb296223d390" translate="yes" xml:space="preserve">
          <source>Advanced topics</source>
          <target state="translated">高级主题</target>
        </trans-unit>
        <trans-unit id="bf89e33381e6d156d3a3813008265d5f0bebd56d" translate="yes" xml:space="preserve">
          <source>After an app is started by using the &lt;code&gt;pm2&lt;/code&gt; command, it is registered in PM2&amp;rsquo;s list of processes with an ID. You can therefore manage apps with the same name from different directories on the system, by using their IDs.</source>
          <target state="translated">使用 &lt;code&gt;pm2&lt;/code&gt; 命令启动应用程序后，该应用程序将使用ID注册到PM2的进程列表中。因此，您可以使用ID来管理系统中不同目录中具有相同名称的应用。</target>
        </trans-unit>
        <trans-unit id="0253d14635a8819537ef35febf1a918a5c76c6af" translate="yes" xml:space="preserve">
          <source>After encoding the URL, if not encoded already, Express passes the specified URL to the browser in the &lt;code&gt;Location&lt;/code&gt; header, without any validation.</source>
          <target state="translated">对URL进行编码后，如果尚未进行编码，则Express会在不进行任何验证的情况下将指定的URL传递给 &lt;code&gt;Location&lt;/code&gt; 标头中的浏览器。</target>
        </trans-unit>
        <trans-unit id="4b0b83b80534dcc19c737147cebfa4417617a1df" translate="yes" xml:space="preserve">
          <source>After installing the dependencies, start the app by using the following command:</source>
          <target state="translated">安装好依赖项后,使用以下命令启动应用程序。</target>
        </trans-unit>
        <trans-unit id="c3dca1814ebfaa64e9d2471dca89c335e0ad6d99" translate="yes" xml:space="preserve">
          <source>After the view engine is set, you don&amp;rsquo;t have to specify the engine or load the template engine module in your app; Express loads the module internally, as shown below (for the above example).</source>
          <target state="translated">设置视图引擎后，您无需指定引擎或在应用程序中加载模板引擎模块。Express在内部加载模块，如下所示（对于上面的示例）。</target>
        </trans-unit>
        <trans-unit id="f2e339bd1c442276d1b48c0ab4af5f037279a296" translate="yes" xml:space="preserve">
          <source>Aliased as &lt;code&gt;req.header(field)&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;req.header(field)&lt;/code&gt; 为req.header（field）。</target>
        </trans-unit>
        <trans-unit id="d503e1c586396571733e7787d7ec1e455476e84d" translate="yes" xml:space="preserve">
          <source>Aliased as &lt;code&gt;res.header(field [, value])&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;res.header(field [, value])&lt;/code&gt; 为res.header（field [，value]）。</target>
        </trans-unit>
        <trans-unit id="ee60c39fc06cb647d77a516b33c7b545cbf8ecf9" translate="yes" xml:space="preserve">
          <source>All &lt;code&gt;res.cookie()&lt;/code&gt; does is set the HTTP &lt;code&gt;Set-Cookie&lt;/code&gt; header with the options provided. Any option not specified defaults to the value stated in &lt;a href=&quot;http://tools.ietf.org/html/rfc6265&quot;&gt;RFC 6265&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;res.cookie()&lt;/code&gt; 所做的所有操作均使用提供的选项设置HTTP &lt;code&gt;Set-Cookie&lt;/code&gt; 标头。未指定的任何选项默认为&lt;a href=&quot;http://tools.ietf.org/html/rfc6265&quot;&gt;RFC 6265中&lt;/a&gt;规定的值。</target>
        </trans-unit>
        <trans-unit id="a24de729c6e3f66c4017b03fbf614e66e0c7c2c0" translate="yes" xml:space="preserve">
          <source>All param callbacks will be called before any handler of any route in which the param occurs, and they will each be called only once in a request-response cycle, even if the parameter is matched in multiple routes, as shown in the following examples.</source>
          <target state="translated">所有的param回调将在出现param的任何路由的任何处理程序之前被调用,而且每个回调在一个请求-响应周期中只被调用一次,即使参数在多个路由中被匹配,如下面的例子所示。</target>
        </trans-unit>
        <trans-unit id="76151404df9d73f6c31aaea91d71c212ec256343" translate="yes" xml:space="preserve">
          <source>All your asynchronous code must return promises (except emitters). If a particular library does not return promises, convert the base object by using a helper function like &lt;a href=&quot;http://bluebirdjs.com/docs/api/promise.promisifyall.html&quot;&gt;Bluebird.promisifyAll()&lt;/a&gt;.</source>
          <target state="translated">您的所有异步代码都必须返回promise（发射器除外）。如果特定的库不返回promise，则使用诸如&lt;a href=&quot;http://bluebirdjs.com/docs/api/promise.promisifyall.html&quot;&gt;Bluebird.promisifyAll（）之&lt;/a&gt;类的辅助函数来转换基础对象。</target>
        </trans-unit>
        <trans-unit id="a381833eabedb920ea96a63c87fca3ca339f6b0a" translate="yes" xml:space="preserve">
          <source>Also ensure you are not using any of the vulnerable Express versions listed on the &lt;a href=&quot;security-updates&quot;&gt;Security updates page&lt;/a&gt;. If you are, update to one of the stable releases, preferably the latest.</source>
          <target state="translated">另外，请确保您没有使用&amp;ldquo; &lt;a href=&quot;security-updates&quot;&gt;安全更新&amp;rdquo;页面&lt;/a&gt;上列出的任何易受攻击的Express版本。如果是这样，请更新到稳定版本之一，最好是最新版本。</target>
        </trans-unit>
        <trans-unit id="01cb7c555b1065607baae2af22f78be914eb437b" translate="yes" xml:space="preserve">
          <source>Also in this example, &lt;code&gt;clientErrorHandler&lt;/code&gt; is defined as follows; in this case, the error is explicitly passed along to the next one.</source>
          <target state="translated">同样在此示例中， &lt;code&gt;clientErrorHandler&lt;/code&gt; 定义如下：在这种情况下，错误将明确传递给下一个错误。</target>
        </trans-unit>
        <trans-unit id="81138243a7e83ff7659fefaa71bb5b5b753acf85" translate="yes" xml:space="preserve">
          <source>Also, a handy tool to get a free TLS certificate is &lt;a href=&quot;https://letsencrypt.org/about/&quot;&gt;Let&amp;rsquo;s Encrypt&lt;/a&gt;, a free, automated, and open certificate authority (CA) provided by the &lt;a href=&quot;https://letsencrypt.org/isrg/&quot;&gt;Internet Security Research Group (ISRG)&lt;/a&gt;.</source>
          <target state="translated">另外，获得免费TLS证书的便捷工具是&lt;a href=&quot;https://letsencrypt.org/about/&quot;&gt;Let's Encrypt&lt;/a&gt;，它是由&lt;a href=&quot;https://letsencrypt.org/isrg/&quot;&gt;Internet Security Research Group（ISRG）&lt;/a&gt;提供的免费，自动和开放的证书颁发机构（CA ）。</target>
        </trans-unit>
        <trans-unit id="c37c50f00f91260e4ba02060bb83db6e0e96d228" translate="yes" xml:space="preserve">
          <source>Also, a handy tool to get a free TLS certificate is &lt;a href=&quot;https://letsencrypt.org/about/&quot;&gt;Let&amp;rsquo;s Encrypt&lt;/a&gt;, a free, automated, and open certificate authority (CA) provided by the &lt;a href=&quot;https://www.abetterinternet.org/&quot;&gt;Internet Security Research Group (ISRG)&lt;/a&gt;.</source>
          <target state="translated">同样，获得免费TLS证书的便捷工具是&lt;a href=&quot;https://letsencrypt.org/about/&quot;&gt;Let's Encrypt&lt;/a&gt;，它是由&lt;a href=&quot;https://www.abetterinternet.org/&quot;&gt;Internet Security Research Group（ISRG）&lt;/a&gt;提供的免费，自动化和开放的证书颁发机构（CA ）。</target>
        </trans-unit>
        <trans-unit id="300f2f8b2561387ab4ed64c26e39a132432899ea" translate="yes" xml:space="preserve">
          <source>Also, there are third-party extensions for Express, which simplify some of these patterns:</source>
          <target state="translated">另外,还有第三方的Express扩展,可以简化其中的一些模式。</target>
        </trans-unit>
        <trans-unit id="47385ca9d8849bcad7716aed7a16486e6dab1da8" translate="yes" xml:space="preserve">
          <source>Altering the global prototypes will affect all loaded Express apps in the same process. If desired, alterations can be made app-specific by only altering the app-specific prototypes after creating a new app.</source>
          <target state="translated">更改全局原型将在同一过程中影响所有加载的 Express 应用程序。如果需要,可以在创建新的应用程序后,仅通过更改应用程序特定的原型,使更改成为特定的应用程序。</target>
        </trans-unit>
        <trans-unit id="732fad69d95176790674a25f918b3068f84d2ff6" translate="yes" xml:space="preserve">
          <source>Alternatively, specify the path of the file:</source>
          <target state="translated">或者,指定文件的路径。</target>
        </trans-unit>
        <trans-unit id="1f19e2aaedb13a26607f8541350aa64967ad7536" translate="yes" xml:space="preserve">
          <source>Although Node and many modules provide synchronous and asynchronous versions of their functions, always use the asynchronous version in production. The only time when a synchronous function can be justified is upon initial startup.</source>
          <target state="translated">虽然Node和许多模块提供了同步和异步版本的函数,但在生产中始终使用异步版本。只有在初始启动时才能证明同步函数的合理性。</target>
        </trans-unit>
        <trans-unit id="a3fb0d9eab287cb47a95ce5739d340491ea30ee1" translate="yes" xml:space="preserve">
          <source>Although the app will not fail to run if the application variable &lt;code&gt;trust proxy&lt;/code&gt; is not set, it will incorrectly register the proxy&amp;rsquo;s IP address as the client IP address unless &lt;code&gt;trust proxy&lt;/code&gt; is configured.</source>
          <target state="translated">尽管如果未设置应用程序变量 &lt;code&gt;trust proxy&lt;/code&gt; ，应用将不会运行失败，但是除非配置了 &lt;code&gt;trust proxy&lt;/code&gt; ，否则它将错误地将代理的IP地址注册为客户端IP地址。</target>
        </trans-unit>
        <trans-unit id="199b0227334a912ede60f97c6616814c70d14a64" translate="yes" xml:space="preserve">
          <source>Always filter and sanitize user input to protect against cross-site scripting (XSS) and command injection attacks.</source>
          <target state="translated">始终对用户输入进行过滤和消毒,以防止跨站脚本(XSS)和命令注入攻击。</target>
        </trans-unit>
        <trans-unit id="d7a47f9b0d65f648ec0079cd3ca12f85815610bf" translate="yes" xml:space="preserve">
          <source>An Express app is valid middleware.</source>
          <target state="translated">一个快递应用是有效的中间件。</target>
        </trans-unit>
        <trans-unit id="8d027076489247ca8bc918bff02160ba73d5bc97" translate="yes" xml:space="preserve">
          <source>An Express application can use the following types of middleware:</source>
          <target state="translated">一个Express应用程序可以使用以下类型的中间件。</target>
        </trans-unit>
        <trans-unit id="66e8d4fcb14f4de42209766ff75bb499ae5f355c" translate="yes" xml:space="preserve">
          <source>An IP address, subnet, or an array of IP addresses and subnets to trust. The following list shows the pre-configured subnet names:</source>
          <target state="translated">要信任的IP地址、子网或一系列IP地址和子网。以下列表显示了预先配置的子网名称。</target>
        </trans-unit>
        <trans-unit id="9ab832be3f015f7a3818fcb67bd89d0be8ddbffa" translate="yes" xml:space="preserve">
          <source>An IP address, subnet, or an array of IP addresses, and subnets to trust. Pre-configured subnet names are:</source>
          <target state="translated">要信任的IP地址、子网或IP地址数组,以及子网。预先配置的子网名称有:</target>
        </trans-unit>
        <trans-unit id="f8329fe850337a91c7e8b27995ca52db9037701d" translate="yes" xml:space="preserve">
          <source>An Upstart service is defined in a job configuration file (also called a &amp;ldquo;job&amp;rdquo;) with filename ending in &lt;code&gt;.conf&lt;/code&gt;. The following example shows how to create a job called &amp;ldquo;myapp&amp;rdquo; for an app named &amp;ldquo;myapp&amp;rdquo; with the main file located at &lt;code&gt;/projects/myapp/index.js&lt;/code&gt;.</source>
          <target state="translated">Upstart服务在作业配置文件（也称为&amp;ldquo;作业&amp;rdquo;）中定义，文件名以 &lt;code&gt;.conf&lt;/code&gt; 结尾。以下示例显示如何为名为&amp;ldquo; myapp&amp;rdquo;的应用程序创建一个名为&amp;ldquo; myapp&amp;rdquo;的作业，其主文件位于 &lt;code&gt;/projects/myapp/index.js&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="20c78fc45bb2978c77ed3b3d491b56deec7514f6" translate="yes" xml:space="preserve">
          <source>An application generated by the &lt;code&gt;express&lt;/code&gt; command also uses the &lt;code&gt;debug&lt;/code&gt; module and its debug namespace is scoped to the name of the application.</source>
          <target state="translated">&lt;code&gt;express&lt;/code&gt; 命令生成的应用程序还使用 &lt;code&gt;debug&lt;/code&gt; 模块，其调试名称空间的作用域为应用程序的名称。</target>
        </trans-unit>
        <trans-unit id="b3d3d30dda9c8bc55e46ab41a8552b82a25fa14e" translate="yes" xml:space="preserve">
          <source>An array of callback functions can handle a route. For example:</source>
          <target state="translated">一个回调函数数组可以处理一个路由。例如:&quot;回调函数数组 &quot;可以处理一条路由。</target>
        </trans-unit>
        <trans-unit id="8f1ecce503b4be46e1a7c4a494b729c4cc41c665" translate="yes" xml:space="preserve">
          <source>An array of combinations of any of the above.</source>
          <target state="translated">上述任何一种组合的阵列。</target>
        </trans-unit>
        <trans-unit id="7fa292c6a041aa0da713425e4a304d376780d891" translate="yes" xml:space="preserve">
          <source>An array of middleware functions.</source>
          <target state="translated">一系列中间件功能。</target>
        </trans-unit>
        <trans-unit id="1ef2a62c299704da52d350f96549469c509f903c" translate="yes" xml:space="preserve">
          <source>An array of ranges will be returned or negative numbers indicating an error parsing.</source>
          <target state="translated">将返回一个范围数组或负数,表示解析错误。</target>
        </trans-unit>
        <trans-unit id="8735295ea868513cca9b9e3c73a29dc467dae132" translate="yes" xml:space="preserve">
          <source>An array of subdomains in the domain name of the request.</source>
          <target state="translated">请求域名中的子域数组。</target>
        </trans-unit>
        <trans-unit id="12038cb78ffa1ec85af9c57e97b4b70bdb317d74" translate="yes" xml:space="preserve">
          <source>An object that contains response local variables scoped to the request, and therefore available only to the view(s) rendered during that request / response cycle (if any). Otherwise, this property is identical to &lt;a href=&quot;#app.locals&quot;&gt;app.locals&lt;/a&gt;.</source>
          <target state="translated">一个对象，该对象包含范围为请求的响应局部变量，因此仅可用于在该请求/响应周期（如果有）中呈现的视图。否则，此属性与&lt;a href=&quot;#app.locals&quot;&gt;app.locals&lt;/a&gt;相同。</target>
        </trans-unit>
        <trans-unit id="616eecaa7f9dfcd63ef55c53f604078c5489cba2" translate="yes" xml:space="preserve">
          <source>Another example is serving files from multiple directories, giving precedence to &amp;ldquo;./public&amp;rdquo; over the others:</source>
          <target state="translated">另一个示例是提供多个目录中的文件，将&amp;ldquo; ./public&amp;rdquo;放在其他目录之前：</target>
        </trans-unit>
        <trans-unit id="b54ef1b8fc88bd0f6c28b8d017e9347023d3ac75" translate="yes" xml:space="preserve">
          <source>Another example is white-listed &amp;ldquo;global&amp;rdquo; functionality. The example is similar to the ones above, but it only restricts paths that start with &amp;ldquo;/api&amp;rdquo;:</source>
          <target state="translated">另一个示例是列入白名单的&amp;ldquo;全局&amp;rdquo;功能。该示例与上面的示例相似，但是仅限制以&amp;ldquo; / api&amp;rdquo;开头的路径：</target>
        </trans-unit>
        <trans-unit id="736a15bfe73941313abd77d0a77400879219a669" translate="yes" xml:space="preserve">
          <source>Another example of this is white-listed &amp;ldquo;global&amp;rdquo; functionality. Here the example is much like before, but it only restricts paths prefixed with &amp;ldquo;/api&amp;rdquo;:</source>
          <target state="translated">另一个例子是列入白名单的&amp;ldquo;全局&amp;rdquo;功能。这里的示例与以前非常相似，但是只限制了以&amp;ldquo; / api&amp;rdquo;为前缀的路径：</target>
        </trans-unit>
        <trans-unit id="56cf94b739573aed41bda8709c93351d246b45e6" translate="yes" xml:space="preserve">
          <source>Another strategy to improve the performance in production is to cache the result of requests, so that your app does not repeat the operation to serve the same request repeatedly.</source>
          <target state="translated">另一个在生产中提高性能的策略是缓存请求的结果,这样你的应用就不会重复操作来重复服务同一个请求。</target>
        </trans-unit>
        <trans-unit id="f5895c408aa3bfbb9e9fcb87ca3fd38b817f468a" translate="yes" xml:space="preserve">
          <source>Any changes made to the &lt;code&gt;req.params&lt;/code&gt; object in a middleware or route handler will be reset.</source>
          <target state="translated">在中间件或路由处理程序中对 &lt;code&gt;req.params&lt;/code&gt; 对象所做的任何更改都将被重置。</target>
        </trans-unit>
        <trans-unit id="09cccdc8e57cc28bb939f788033fe3efa98ac1e4" translate="yes" xml:space="preserve">
          <source>Any headers specified in an &lt;code&gt;err.headers&lt;/code&gt; object.</source>
          <target state="translated">&lt;code&gt;err.headers&lt;/code&gt; 对象中指定的任何标头。</target>
        </trans-unit>
        <trans-unit id="8571b4b17492cb24c36d096f88fc57c1b7cbaac9" translate="yes" xml:space="preserve">
          <source>Apart from automatically restarting the app, Upstart enables you to use these commands:</source>
          <target state="translated">除了自动重启应用外,Upstart还能让您使用这些命令。</target>
        </trans-unit>
        <trans-unit id="f3787d97244ae628c117de682eec85e20b1e4ec4" translate="yes" xml:space="preserve">
          <source>App-specific prototypes at &lt;code&gt;app.request&lt;/code&gt; and &lt;code&gt;app.response&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;app.request&lt;/code&gt; 和 &lt;code&gt;app.response&lt;/code&gt; 上的特定于应用程序的原型。</target>
        </trans-unit>
        <trans-unit id="bc912209a4a10ce3095ac635b03494d258643ecb" translate="yes" xml:space="preserve">
          <source>Appends the specified &lt;code&gt;value&lt;/code&gt; to the HTTP response header &lt;code&gt;field&lt;/code&gt;. If the header is not already set, it creates the header with the specified value. The &lt;code&gt;value&lt;/code&gt; parameter can be a string or an array.</source>
          <target state="translated">将指定的 &lt;code&gt;value&lt;/code&gt; 附加到HTTP响应标头 &lt;code&gt;field&lt;/code&gt; 。如果尚未设置标题，它将创建具有指定值的标题。所述 &lt;code&gt;value&lt;/code&gt; 参数可以是字符串或数组。</target>
        </trans-unit>
        <trans-unit id="b291beb8793f4f3308c463951165dad483715a6c" translate="yes" xml:space="preserve">
          <source>Application</source>
          <target state="translated">Application</target>
        </trans-unit>
        <trans-unit id="626dbef44ab40ac72a2aaf345db7297fdce42642" translate="yes" xml:space="preserve">
          <source>Application Settings</source>
          <target state="translated">应用设置</target>
        </trans-unit>
        <trans-unit id="6b4003cdd901041cdd4dba8a480436645ba809bc" translate="yes" xml:space="preserve">
          <source>Application-level middleware</source>
          <target state="translated">应用级中间件</target>
        </trans-unit>
        <trans-unit id="599bfea14bcae842b3ca687eb25eb420944e7f68" translate="yes" xml:space="preserve">
          <source>Applications generated by &lt;code&gt;express&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;express&lt;/code&gt; 产生的申请</target>
        </trans-unit>
        <trans-unit id="1d1010e518f5b5f575aa3d6b5cfd1cd0f8ba6a75" translate="yes" xml:space="preserve">
          <source>Apps now implicitly load routing middleware, so you no longer have to worry about the order in which middleware is loaded with respect to the &lt;code&gt;router&lt;/code&gt; middleware.</source>
          <target state="translated">现在，应用程序隐式地加载路由中间件，因此您不必担心中间件相对于 &lt;code&gt;router&lt;/code&gt; 中间件的加载顺序。</target>
        </trans-unit>
        <trans-unit id="ce5e5792e97fe5c7861d6ae9b29cf5a25cc0e70a" translate="yes" xml:space="preserve">
          <source>Argument</source>
          <target state="translated">Argument</target>
        </trans-unit>
        <trans-unit id="cbb9fa252e60809efa55a7ad83aea5438ef56753" translate="yes" xml:space="preserve">
          <source>Arguments</source>
          <target state="translated">Arguments</target>
        </trans-unit>
        <trans-unit id="a0478ca5f4c068ca3ac12f9474f6a15865ce9053" translate="yes" xml:space="preserve">
          <source>Arguments:</source>
          <target state="translated">Arguments:</target>
        </trans-unit>
        <trans-unit id="107004472b7ba4e5e31f3082ee1fb5a1239eec61" translate="yes" xml:space="preserve">
          <source>Array</source>
          <target state="translated">Array</target>
        </trans-unit>
        <trans-unit id="8102e79711120d1b8d856914fba828685e294ba5" translate="yes" xml:space="preserve">
          <source>Array of strings</source>
          <target state="translated">字符串阵列</target>
        </trans-unit>
        <trans-unit id="c1d6b65a68de3f9fcc06f3c016889190306c647a" translate="yes" xml:space="preserve">
          <source>As &lt;code&gt;req.body&lt;/code&gt;&amp;rsquo;s shape is based on user-controlled input, all properties and values in this object are untrusted and should be validated before trusting. For example, &lt;code&gt;req.body.foo.toString()&lt;/code&gt; may fail in multiple ways, for example &lt;code&gt;foo&lt;/code&gt; may not be there or may not be a string, and &lt;code&gt;toString&lt;/code&gt; may not be a function and instead a string or other user-input.</source>
          <target state="translated">由于 &lt;code&gt;req.body&lt;/code&gt; 的形状基于用户控制的输入，因此该对象中的所有属性和值都是不受信任的，因此应在信任之前进行验证。例如， &lt;code&gt;req.body.foo.toString()&lt;/code&gt; 可能以多种方式失败，例如 &lt;code&gt;foo&lt;/code&gt; 可能不存在或可能不是字符串，并且 &lt;code&gt;toString&lt;/code&gt; 可能不是函数，而是字符串或其他用户输入。</target>
        </trans-unit>
        <trans-unit id="5964c96bdcfc834f2e7f35db1661b0b9d508f0b6" translate="yes" xml:space="preserve">
          <source>As &lt;code&gt;req.body&lt;/code&gt;&amp;rsquo;s shape is based on user-controlled input, all properties and values in this object are untrusted and should be validated before trusting. For example, &lt;code&gt;req.body.toString()&lt;/code&gt; may fail in multiple ways, for example stacking multiple parsers &lt;code&gt;req.body&lt;/code&gt; may be from a different parser. Testing that &lt;code&gt;req.body&lt;/code&gt; is a &lt;code&gt;Buffer&lt;/code&gt; before calling buffer methods is recommended.</source>
          <target state="translated">由于 &lt;code&gt;req.body&lt;/code&gt; 的形状基于用户控制的输入，因此该对象中的所有属性和值都是不受信任的，应在信任之前进行验证。例如， &lt;code&gt;req.body.toString()&lt;/code&gt; 可能以多种方式失败，例如，堆叠多个解析器 &lt;code&gt;req.body&lt;/code&gt; 可能来自不同的解析器。建议在调用缓冲区方法之前测试 &lt;code&gt;req.body&lt;/code&gt; 是一个 &lt;code&gt;Buffer&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="c306adb9b4ef7004bd1fd88bdea5c148653309b4" translate="yes" xml:space="preserve">
          <source>As &lt;code&gt;req.body&lt;/code&gt;&amp;rsquo;s shape is based on user-controlled input, all properties and values in this object are untrusted and should be validated before trusting. For example, &lt;code&gt;req.body.trim()&lt;/code&gt; may fail in multiple ways, for example stacking multiple parsers &lt;code&gt;req.body&lt;/code&gt; may be from a different parser. Testing that &lt;code&gt;req.body&lt;/code&gt; is a string before calling string methods is recommended.</source>
          <target state="translated">由于 &lt;code&gt;req.body&lt;/code&gt; 的形状基于用户控制的输入，因此该对象中的所有属性和值都是不受信任的，应在信任之前进行验证。例如， &lt;code&gt;req.body.trim()&lt;/code&gt; 可能以多种方式失败，例如，堆叠多个解析器 &lt;code&gt;req.body&lt;/code&gt; 可能来自不同的解析器。建议在调用字符串方法之前测试 &lt;code&gt;req.body&lt;/code&gt; 是字符串。</target>
        </trans-unit>
        <trans-unit id="53d1473db927b31ea5a1ecfa6a531861c6ed5b48" translate="yes" xml:space="preserve">
          <source>As &lt;code&gt;req.query&lt;/code&gt;&amp;rsquo;s shape is based on user-controlled input, all properties and values in this object are untrusted and should be validated before trusting. For example, &lt;code&gt;req.query.foo.toString()&lt;/code&gt; may fail in multiple ways, for example &lt;code&gt;foo&lt;/code&gt; may not be there or may not be a string, and &lt;code&gt;toString&lt;/code&gt; may not be a function and instead a string or other user-input.</source>
          <target state="translated">由于 &lt;code&gt;req.query&lt;/code&gt; 的形状基于用户控制的输入，因此该对象中的所有属性和值都是不受信任的，应在信任之前进行验证。例如， &lt;code&gt;req.query.foo.toString()&lt;/code&gt; 可能以多种方式失败，例如 &lt;code&gt;foo&lt;/code&gt; 可能不存在或可能不是字符串，并且 &lt;code&gt;toString&lt;/code&gt; 可能不是函数，而是字符串或其他用户输入。</target>
        </trans-unit>
        <trans-unit id="b0b283fdc7ceeb7cc37b0e5ca1192165f6cd4092" translate="yes" xml:space="preserve">
          <source>As explained below, when you install StrongLoop PM as an operating system service using your init system, it will automatically restart when the system restarts. Thus, it will keep your application processes and clusters alive forever.</source>
          <target state="translated">如下文所述,当您使用init系统安装StrongLoop PM作为操作系统服务时,当系统重新启动时,它将自动重新启动。因此,它将使您的应用进程和集群永远保持活力。</target>
        </trans-unit>
        <trans-unit id="62be091c0aa8ecca81fa535b75fad5e85fa5eb5b" translate="yes" xml:space="preserve">
          <source>Assigned properties (ex: &lt;code&gt;req.baseUrl&lt;/code&gt;, &lt;code&gt;req.originalUrl&lt;/code&gt;)</source>
          <target state="translated">分配的属性（例如： &lt;code&gt;req.baseUrl&lt;/code&gt; ， &lt;code&gt;req.originalUrl&lt;/code&gt; ）</target>
        </trans-unit>
        <trans-unit id="7fe81777b037ce2cc2d87fbae1a3e0c6680be3e2" translate="yes" xml:space="preserve">
          <source>Assigns setting &lt;code&gt;name&lt;/code&gt; to &lt;code&gt;value&lt;/code&gt;. You may store any value that you want, but certain names can be used to configure the behavior of the server. These special names are listed in the &lt;a href=&quot;#app.settings.table&quot;&gt;app settings table&lt;/a&gt;.</source>
          <target state="translated">将设置 &lt;code&gt;name&lt;/code&gt; 分配给 &lt;code&gt;value&lt;/code&gt; 。您可以存储所需的任何值，但可以使用某些名称来配置服务器的行为。这些特殊名称在&lt;a href=&quot;#app.settings.table&quot;&gt;应用程序设置表中列出&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="b6a837b7d9b2cf2f5c4a7d6fdc02210e20a1e245" translate="yes" xml:space="preserve">
          <source>Assuming you&amp;rsquo;ve already installed &lt;a href=&quot;https://nodejs.org/&quot;&gt;Node.js&lt;/a&gt;, create a directory to hold your application, and make that your working directory.</source>
          <target state="translated">假设您已经安装了&lt;a href=&quot;https://nodejs.org/&quot;&gt;Node.js&lt;/a&gt;，请创建一个目录来保存您的应用程序，并将其作为您的工作目录。</target>
        </trans-unit>
        <trans-unit id="c4dd53826c1b3992511dc63161144025385ddd4a" translate="yes" xml:space="preserve">
          <source>At a minimum, disable X-Powered-By header</source>
          <target state="translated">最低限度,禁用X-Powered-By标题</target>
        </trans-unit>
        <trans-unit id="47f6139603f69997950c5358baa5c8892e48e81c" translate="yes" xml:space="preserve">
          <source>Authentication is another opinionated area that Express does not venture into. You may use any authentication scheme you wish. For a simple username / password scheme, see &lt;a href=&quot;https://github.com/expressjs/express/tree/master/examples/auth&quot;&gt;this example&lt;/a&gt;.</source>
          <target state="translated">身份验证是Express禁止涉足的另一个领域。您可以使用所需的任何身份验证方案。有关简单的用户名/密码方案，请参见&lt;a href=&quot;https://github.com/expressjs/express/tree/master/examples/auth&quot;&gt;以下示例&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="6ef078262c0d409a711238a1e946a611c810a5c0" translate="yes" xml:space="preserve">
          <source>Automatically restart your app if it crashes for any reason.</source>
          <target state="translated">如果应用程序因任何原因崩溃,会自动重启。</target>
        </trans-unit>
        <trans-unit id="681b5b5ae10b994e61d9fc53cf8a95498ff0df39" translate="yes" xml:space="preserve">
          <source>Availability</source>
          <target state="translated">Availability</target>
        </trans-unit>
        <trans-unit id="67f999b6099810775aa1aafa856bdea78a9e78e1" translate="yes" xml:space="preserve">
          <source>Avoid other known vulnerabilities</source>
          <target state="translated">避免其他已知的漏洞</target>
        </trans-unit>
        <trans-unit id="2180d4b1d73ffc01559433d09562f2f973046468" translate="yes" xml:space="preserve">
          <source>Basic routing</source>
          <target state="translated">基本路由</target>
        </trans-unit>
        <trans-unit id="53112c150dc23fb20ba1924a172fa415a57d5386" translate="yes" xml:space="preserve">
          <source>Basic template that illustrates using Lightship:</source>
          <target state="translated">说明使用Lightship的基本模板。</target>
        </trans-unit>
        <trans-unit id="a4bd7204b41c35a96f4ff9f7a9b408d86dcdd1a9" translate="yes" xml:space="preserve">
          <source>Basic template that illustrates using http-terminator:</source>
          <target state="translated">说明如何使用http-terminator的基本模板。</target>
        </trans-unit>
        <trans-unit id="168929183d2470cb5fd9c8ab272eed288ccb698d" translate="yes" xml:space="preserve">
          <source>Basic use</source>
          <target state="translated">基本用途</target>
        </trans-unit>
        <trans-unit id="73499cdf7aa32da8eb57df6e6bda45f6f9ecc130" translate="yes" xml:space="preserve">
          <source>Because the &lt;code&gt;app.js&lt;/code&gt; file that was generated by the Express 4 generator is now a Node.js module, it can no longer be started independently as an app (unless you modify the code). The module must be loaded in a Node.js file and started via the Node.js file. The Node.js file is &lt;code&gt;./bin/www&lt;/code&gt; in this case.</source>
          <target state="translated">由于Express 4生成器生成的 &lt;code&gt;app.js&lt;/code&gt; 文件现在是Node.js模块，因此无法再作为应用程序独立启动（除非您修改代码）。该模块必须加载到Node.js文件中，并通过Node.js文件启动。在这种情况下，Node.js文件为 &lt;code&gt;./bin/www&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="d24fcf443661642b29d224b9173067f56c14dc68" translate="yes" xml:space="preserve">
          <source>Because the regular expression is usually part of a literal string, be sure to escape any &lt;code&gt;\&lt;/code&gt; characters with an additional backslash, for example &lt;code&gt;\\d+&lt;/code&gt;.</source>
          <target state="translated">因为正则表达式通常是文字字符串的一部分，所以请确保使用任何反斜杠转义任何 &lt;code&gt;\&lt;/code&gt; 字符，例如 &lt;code&gt;\\d+&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="f63d82dd8465b5ce5e7e01fe78f03a210a0f388c" translate="yes" xml:space="preserve">
          <source>Because you have access to the request object, the response object, the next middleware function in the stack, and the whole Node.js API, the possibilities with middleware functions are endless.</source>
          <target state="translated">因为你可以访问请求对象、响应对象、堆栈中的下一个中间件函数以及整个Node.js API,所以中间件函数的可能性是无限的。</target>
        </trans-unit>
        <trans-unit id="341b6faff2a554e512c0626782e1796c26148ea1" translate="yes" xml:space="preserve">
          <source>Before diving into these topics, you should have a basic understanding of Node/Express error handling: using error-first callbacks, and propagating errors in middleware. Node uses an &amp;ldquo;error-first callback&amp;rdquo; convention for returning errors from asynchronous functions, where the first parameter to the callback function is the error object, followed by result data in succeeding parameters. To indicate no error, pass null as the first parameter. The callback function must correspondingly follow the error-first callback convention to meaningfully handle the error. And in Express, the best practice is to use the next() function to propagate errors through the middleware chain.</source>
          <target state="translated">在深入探讨这些主题之前，您应该对Node / Express错误处理有基本的了解：使用错误优先的回调，以及在中间件中传播错误。 Node使用&amp;ldquo;错误优先回调&amp;rdquo;约定从异步函数返回错误，其中回调函数的第一个参数是错误对象，后继参数中包含结果数据。为了指示没有错误，请传递null作为第一个参数。回调函数必须相应地遵循错误优先回调约定，以有意义地处理错误。在Express中，最佳实践是使用next（）函数通过中间件链传播错误。</target>
        </trans-unit>
        <trans-unit id="d35fab277b58560fc799c9acbcf5ef71a1334a69" translate="yes" xml:space="preserve">
          <source>Begin the migration process by installing the required middleware for the Express 4 app and updating Express and Pug to their respective latest version with the following command:</source>
          <target state="translated">通过安装Express 4应用程序所需的中间件,并使用以下命令将Express和Pug更新到各自的最新版本,开始迁移过程。</target>
        </trans-unit>
        <trans-unit id="e894581c71991717050cb1e377b1c6075da4f634" translate="yes" xml:space="preserve">
          <source>Bind application-level middleware to an instance of the &lt;a href=&quot;../index#app&quot;&gt;app object&lt;/a&gt; by using the &lt;code&gt;app.use()&lt;/code&gt; and &lt;code&gt;app.METHOD()&lt;/code&gt; functions, where &lt;code&gt;METHOD&lt;/code&gt; is the HTTP method of the request that the middleware function handles (such as GET, PUT, or POST) in lowercase.</source>
          <target state="translated">通过使用 &lt;code&gt;app.use()&lt;/code&gt; 和 &lt;code&gt;app.METHOD()&lt;/code&gt; 函数将&lt;a href=&quot;../index#app&quot;&gt;应用&lt;/a&gt;程序级中间件绑定到app对象的实例，其中 &lt;code&gt;METHOD&lt;/code&gt; 是中间件函数处理的请求的HTTP方法（例如GET，PUT或POST）（小写）。</target>
        </trans-unit>
        <trans-unit id="69bd62e308a8ef4f438e00cb2c74fba92608e0db" translate="yes" xml:space="preserve">
          <source>Binds and listens for connections on the specified host and port. This method is identical to Node&amp;rsquo;s &lt;a href=&quot;https://nodejs.org/api/http.html#http_server_listen&quot;&gt;http.Server.listen()&lt;/a&gt;.</source>
          <target state="translated">绑定并侦听指定主机和端口上的连接。此方法与Node的&lt;a href=&quot;https://nodejs.org/api/http.html#http_server_listen&quot;&gt;http.Server.listen（）&lt;/a&gt;相同。</target>
        </trans-unit>
        <trans-unit id="ea5adc4375e45984bc195c2653204c764deddeab" translate="yes" xml:space="preserve">
          <source>Body-parsing middleware must be loaded for &lt;code&gt;req.param()&lt;/code&gt; to work predictably. Refer &lt;a href=&quot;#req.body&quot;&gt;req.body&lt;/a&gt; for details.</source>
          <target state="translated">必须加载人体分析中间件，才能使 &lt;code&gt;req.param()&lt;/code&gt; 正常工作。有关详细信息，请参见&lt;a href=&quot;#req.body&quot;&gt;主体&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="b76ff4906f33c2dd97ddd929b9662ba8cac6174c" translate="yes" xml:space="preserve">
          <source>Boolean</source>
          <target state="translated">Boolean</target>
        </trans-unit>
        <trans-unit id="d4a7aa44cc98faf99ef648465fb87cf26e3894fb" translate="yes" xml:space="preserve">
          <source>Boolean or String</source>
          <target state="translated">布尔或字符串</target>
        </trans-unit>
        <trans-unit id="bc458f9370a71baf0a4e92c38dbf6f8c7c0b50de" translate="yes" xml:space="preserve">
          <source>Boolean property that indicates if the app sent HTTP headers for the response.</source>
          <target state="translated">表示应用程序是否为响应发送HTTP头的布尔属性。</target>
        </trans-unit>
        <trans-unit id="5e6ed8e8d552e3494d52f5e3f5f37934559ecafd" translate="yes" xml:space="preserve">
          <source>Browsers take the responsibility of deriving the intended URL from the current URL or the referring URL, and the URL specified in the &lt;code&gt;Location&lt;/code&gt; header; and redirect the user accordingly.</source>
          <target state="translated">浏览器负责从当前URL或引用URL以及 &lt;code&gt;Location&lt;/code&gt; 标头中指定的URL派生预期URL ；并相应地重定向用户。</target>
        </trans-unit>
        <trans-unit id="1cd470f77f17c01cda03356a5f7d5cf9fe00ea91" translate="yes" xml:space="preserve">
          <source>Build and package your app locally, then deploy it securely to your production system.</source>
          <target state="translated">在本地构建和打包您的应用程序,然后将其安全地部署到您的生产系统。</target>
        </trans-unit>
        <trans-unit id="fa5439265b03b3eac653152bc49bcd47d70baaed" translate="yes" xml:space="preserve">
          <source>Build, package, and deploy your Node.js application to a local or remote system.</source>
          <target state="translated">构建、打包和部署您的Node.js应用程序到本地或远程系统。</target>
        </trans-unit>
        <trans-unit id="27d138fa4a42577920b0483f30934ac175e0cd01" translate="yes" xml:space="preserve">
          <source>Building on the &lt;code&gt;router.param()&lt;/code&gt; example above, the following code shows how to use &lt;code&gt;router.route()&lt;/code&gt; to specify various HTTP method handlers.</source>
          <target state="translated">以下代码建立在上面的 &lt;code&gt;router.param()&lt;/code&gt; 示例的基础上，显示了如何使用 &lt;code&gt;router.route()&lt;/code&gt; 指定各种HTTP方法处理程序。</target>
        </trans-unit>
        <trans-unit id="e4127f9bc892b5183728e60e46a78ffe67f1cb3e" translate="yes" xml:space="preserve">
          <source>Built-in middleware</source>
          <target state="translated">内置中间件</target>
        </trans-unit>
        <trans-unit id="08ae5ac9260efbb4ac9344f65718db9255f782fb" translate="yes" xml:space="preserve">
          <source>But you could just as well have:</source>
          <target state="translated">但你也可以有。</target>
        </trans-unit>
        <trans-unit id="d0d55cc853a41a2795cc532c8a9dd852ad55fbf8" translate="yes" xml:space="preserve">
          <source>By default with version npm 5.0+ npm install adds the module to the &lt;code&gt;dependencies&lt;/code&gt; list in the &lt;code&gt;package.json&lt;/code&gt; file; with earlier versions of npm, you must specify the &lt;code&gt;--save&lt;/code&gt; option explicitly. Then, afterwards, running &lt;code&gt;npm install&lt;/code&gt; in the app directory will automatically install modules in the dependencies list.</source>
          <target state="translated">默认情况下，版本为npm 5.0+ npm install将模块添加到 &lt;code&gt;package.json&lt;/code&gt; 文件的 &lt;code&gt;dependencies&lt;/code&gt; 列表中；对于较早版本的npm，必须显式指定 &lt;code&gt;--save&lt;/code&gt; 选项。然后，在app目录中运行 &lt;code&gt;npm install&lt;/code&gt; 将自动在依赖项列表中安装模块。</target>
        </trans-unit>
        <trans-unit id="c532e29ee53279091d205d6985f3b87579513efb" translate="yes" xml:space="preserve">
          <source>By default, Express will &lt;code&gt;require()&lt;/code&gt; the engine based on the file extension. For example, if you try to render a &amp;ldquo;foo.pug&amp;rdquo; file, Express invokes the following internally, and caches the &lt;code&gt;require()&lt;/code&gt; on subsequent calls to increase performance.</source>
          <target state="translated">默认情况下，Express将基于文件扩展名 &lt;code&gt;require()&lt;/code&gt; 引擎。例如，如果尝试呈现&amp;ldquo; foo.pug&amp;rdquo;文件，则Express在内部调用以下内容，并在后续调用中缓存 &lt;code&gt;require()&lt;/code&gt; 以提高性能。</target>
        </trans-unit>
        <trans-unit id="fe4c1e683fe5d87acc817c348aa5dec7443c6ad1" translate="yes" xml:space="preserve">
          <source>By default, the JSONP callback name is simply &lt;code&gt;callback&lt;/code&gt;. Override this with the &lt;a href=&quot;#app.settings.table&quot;&gt;jsonp callback name&lt;/a&gt; setting.</source>
          <target state="translated">默认情况下，JSONP回调名称就是 &lt;code&gt;callback&lt;/code&gt; 。使用&lt;a href=&quot;#app.settings.table&quot;&gt;jsonp回调名称&lt;/a&gt;设置覆盖此设置。</target>
        </trans-unit>
        <trans-unit id="1e6b711b4000b0309a0c2f5fb7ecfad4e9c17527" translate="yes" xml:space="preserve">
          <source>Cache CSS files generated from CSS extensions.</source>
          <target state="translated">缓存由CSS扩展名生成的CSS文件。</target>
        </trans-unit>
        <trans-unit id="27cf63a8644f4531a9738e03c8d964a31a448f54" translate="yes" xml:space="preserve">
          <source>Cache request results</source>
          <target state="translated">缓存请求结果</target>
        </trans-unit>
        <trans-unit id="ce727b7db9bf4e505cde3e0fb96702b86f605d0b" translate="yes" xml:space="preserve">
          <source>Cache view templates.</source>
          <target state="translated">缓存视图模板。</target>
        </trans-unit>
        <trans-unit id="7c9a412744d996b1a5f33871a3d2816ec5386aea" translate="yes" xml:space="preserve">
          <source>Call the next middleware function in the stack.</source>
          <target state="translated">调用堆栈中的下一个中间件函数。</target>
        </trans-unit>
        <trans-unit id="92af351a8025c11ee09d1ecd883172a68670aba1" translate="yes" xml:space="preserve">
          <source>Call the next middleware in the stack.</source>
          <target state="translated">调用堆栈中的下一个中间件。</target>
        </trans-unit>
        <trans-unit id="fcf204e86ac5dbba6258bb828013a0d629f92dd3" translate="yes" xml:space="preserve">
          <source>Callback argument to the middleware function, called &quot;next&quot; by convention.</source>
          <target state="translated">中间件函数的回调参数,习惯上称为 &quot;next&quot;。</target>
        </trans-unit>
        <trans-unit id="10837f6058b72e83ab8b01ead3c530c70f492e91" translate="yes" xml:space="preserve">
          <source>Callback functions; can be:</source>
          <target state="translated">回调函数;可。</target>
        </trans-unit>
        <trans-unit id="0986d08d007c51dc8fd58504df8b36b8e9b12b43" translate="yes" xml:space="preserve">
          <source>Calling &lt;code&gt;app.set('foo', true)&lt;/code&gt; for a Boolean property is the same as calling &lt;code&gt;app.enable('foo')&lt;/code&gt;. Similarly, calling &lt;code&gt;app.set('foo', false)&lt;/code&gt; for a Boolean property is the same as calling &lt;code&gt;app.disable('foo')&lt;/code&gt;.</source>
          <target state="translated">为布尔属性调用 &lt;code&gt;app.set('foo', true)&lt;/code&gt; 与调用 &lt;code&gt;app.enable('foo')&lt;/code&gt; 相同。同样，为布尔属性调用 &lt;code&gt;app.set('foo', false)&lt;/code&gt; 与调用 &lt;code&gt;app.disable('foo')&lt;/code&gt; 相同。</target>
        </trans-unit>
        <trans-unit id="79e218233908db0a49dad7b29f8e1301192c890b" translate="yes" xml:space="preserve">
          <source>Calls to &lt;code&gt;next()&lt;/code&gt; and &lt;code&gt;next(err)&lt;/code&gt; indicate that the current handler is complete and in what state. &lt;code&gt;next(err)&lt;/code&gt; will skip all remaining handlers in the chain except for those that are set up to handle errors as described above.</source>
          <target state="translated">调用 &lt;code&gt;next()&lt;/code&gt; 和 &lt;code&gt;next(err)&lt;/code&gt; 表示当前处理程序已完成并且处于什么状态。 &lt;code&gt;next(err)&lt;/code&gt; 将跳过该链中所有剩余的处理程序，除了如上所述设置为处理错误的那些处理程序。</target>
        </trans-unit>
        <trans-unit id="533a38eeeef68b2a6dff0543d2d23fed7b8f462e" translate="yes" xml:space="preserve">
          <source>Cassandra</source>
          <target state="translated">Cassandra</target>
        </trans-unit>
        <trans-unit id="5dc28fede606eef603fb7498465cddf910f08e54" translate="yes" xml:space="preserve">
          <source>Catching Errors</source>
          <target state="translated">捕捉错误</target>
        </trans-unit>
        <trans-unit id="cb5424f67784790891d1c6e9c08d167139b91601" translate="yes" xml:space="preserve">
          <source>Changed</source>
          <target state="translated">Changed</target>
        </trans-unit>
        <trans-unit id="327b9eb14af1d972792cfbb1726e7e98a26ec7ca" translate="yes" xml:space="preserve">
          <source>Changed to &lt;code&gt;res.headersSent&lt;/code&gt;.</source>
          <target state="translated">更改为 &lt;code&gt;res.headersSent&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="eec1655e8fc69c2ffa62794fc14943690f452b45" translate="yes" xml:space="preserve">
          <source>Changes in Express 4</source>
          <target state="translated">快捷4的变化</target>
        </trans-unit>
        <trans-unit id="cba1bc523fa7688f1fbc809dd4c80b39bb1435f8" translate="yes" xml:space="preserve">
          <source>Changes in Express 5</source>
          <target state="translated">快报5中的变化</target>
        </trans-unit>
        <trans-unit id="077e2722b2d517580b524986fa47e395f8fa4ecd" translate="yes" xml:space="preserve">
          <source>Changes to Express core and middleware system</source>
          <target state="translated">Express核心和中间件系统的变化</target>
        </trans-unit>
        <trans-unit id="ca2ed8ce67c19a24a57e3ee5c805ef733f7bb830" translate="yes" xml:space="preserve">
          <source>Changes to the app generator</source>
          <target state="translated">应用程序生成器的变化</target>
        </trans-unit>
        <trans-unit id="d3a6abff5998ee42be4fea3fc58ce594be82beb3" translate="yes" xml:space="preserve">
          <source>Changes to the routing system.</source>
          <target state="translated">改变路由系统。</target>
        </trans-unit>
        <trans-unit id="3a32ba6bffc86b589903570f4bd0f9acaedb4985" translate="yes" xml:space="preserve">
          <source>Check service status</source>
          <target state="translated">检查服务状态</target>
        </trans-unit>
        <trans-unit id="6bfb23de59645549c2d532c18569a4d0b292d948" translate="yes" xml:space="preserve">
          <source>Checks if the specified content types are acceptable, based on the request&amp;rsquo;s &lt;code&gt;Accept&lt;/code&gt; HTTP header field. The method returns the best match, or if none of the specified content types is acceptable, returns &lt;code&gt;false&lt;/code&gt; (in which case, the application should respond with &lt;code&gt;406 &quot;Not Acceptable&quot;&lt;/code&gt;).</source>
          <target state="translated">根据请求的&amp;ldquo; &lt;code&gt;Accept&lt;/code&gt; HTTP标头&amp;rdquo;字段检查指定的内容类型是否可接受。该方法返回最佳匹配，或者如果指定的内容类型都不可接受，则返回 &lt;code&gt;false&lt;/code&gt; （在这种情况下，应用程序应使用 &lt;code&gt;406 &quot;Not Acceptable&quot;&lt;/code&gt; 响应）。</target>
        </trans-unit>
        <trans-unit id="7cc82949d388c11ba1990f3bec0249a5b3139235" translate="yes" xml:space="preserve">
          <source>Clears the cookie specified by &lt;code&gt;name&lt;/code&gt;. For details about the &lt;code&gt;options&lt;/code&gt; object, see &lt;a href=&quot;#res.cookie&quot;&gt;res.cookie()&lt;/a&gt;.</source>
          <target state="translated">清除由 &lt;code&gt;name&lt;/code&gt; 指定的cookie 。有关 &lt;code&gt;options&lt;/code&gt; 对象的详细信息，请参见&lt;a href=&quot;#res.cookie&quot;&gt;res.cookie（）&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="081f8cebf3ac6804eb325e6ec0d25e55f02b4708" translate="yes" xml:space="preserve">
          <source>Clustering is made possible with Node&amp;rsquo;s &lt;a href=&quot;https://nodejs.org/dist/latest-v4.x/docs/api/cluster.html&quot;&gt;cluster module&lt;/a&gt;. This enables a master process to spawn worker processes and distribute incoming connections among the workers. However, rather than using this module directly, it&amp;rsquo;s far better to use one of the many tools out there that does it for you automatically; for example &lt;a href=&quot;https://www.npmjs.com/package/node-pm&quot;&gt;node-pm&lt;/a&gt; or &lt;a href=&quot;https://www.npmjs.com/package/cluster-service&quot;&gt;cluster-service&lt;/a&gt;.</source>
          <target state="translated">Node的&lt;a href=&quot;https://nodejs.org/dist/latest-v4.x/docs/api/cluster.html&quot;&gt;集群模块&lt;/a&gt;使集群成为可能。这使主进程可以生成工作进程并在工作进程之间分配传入的连接。但是，与其直接使用此模块，不如使用其中自动为您执行此操作的众多工具中的一种。例如&lt;a href=&quot;https://www.npmjs.com/package/node-pm&quot;&gt;node-pm&lt;/a&gt;或&lt;a href=&quot;https://www.npmjs.com/package/cluster-service&quot;&gt;cluster-service&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="db316d38e0f2c64e217b3a2605bcc3104e4dc570" translate="yes" xml:space="preserve">
          <source>Combination</source>
          <target state="translated">Combination</target>
        </trans-unit>
        <trans-unit id="dbd46d2571d16a185836f62fb4a998da516b36f7" translate="yes" xml:space="preserve">
          <source>Command options and use largely remain the same, with the following exceptions:</source>
          <target state="translated">命令选项和使用方法基本不变,但有以下例外。</target>
        </trans-unit>
        <trans-unit id="4603babd52df2e74fd06c06e5ec03f563679fec2" translate="yes" xml:space="preserve">
          <source>Configurable middleware</source>
          <target state="translated">可配置的中间件</target>
        </trans-unit>
        <trans-unit id="340a3d5354b977658e857cbdc54323a09f000f6c" translate="yes" xml:space="preserve">
          <source>Configuring middleware; see &lt;a href=&quot;#app.route&quot;&gt;app.route&lt;/a&gt;.</source>
          <target state="translated">配置中间件；请参阅&lt;a href=&quot;#app.route&quot;&gt;app.route&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="6e21f8f23c79f46efbffa6f57896b24f02c9be93" translate="yes" xml:space="preserve">
          <source>Consider an Express v.3 application with the following &lt;code&gt;app.js&lt;/code&gt; file:</source>
          <target state="translated">考虑具有以下 &lt;code&gt;app.js&lt;/code&gt; 文件的Express v.3应用程序：</target>
        </trans-unit>
        <trans-unit id="bb3f5901d0fec16f3f611581288141ffe170d15b" translate="yes" xml:space="preserve">
          <source>Contains a string corresponding to the HTTP method of the request: &lt;code&gt;GET&lt;/code&gt;, &lt;code&gt;POST&lt;/code&gt;, &lt;code&gt;PUT&lt;/code&gt;, and so on.</source>
          <target state="translated">包含与请求的HTTP方法相对应的字符串： &lt;code&gt;GET&lt;/code&gt; ， &lt;code&gt;POST&lt;/code&gt; ， &lt;code&gt;PUT&lt;/code&gt; 等。</target>
        </trans-unit>
        <trans-unit id="b9549b2286745c7b3c9a849aef1c19054bae339e" translate="yes" xml:space="preserve">
          <source>Contains key-value pairs of data submitted in the request body. By default, it is &lt;code&gt;undefined&lt;/code&gt;, and is populated when you use body-parsing middleware such as &lt;a href=&quot;#express.json&quot;&gt;&lt;code&gt;express.json()&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;#express.urlencoded&quot;&gt;&lt;code&gt;express.urlencoded()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">包含在请求正文中提交的数据的键值对。默认情况下，它是 &lt;code&gt;undefined&lt;/code&gt; ，并且当您使用主体解析中间件（例如&lt;a href=&quot;#express.json&quot;&gt; &lt;code&gt;express.json()&lt;/code&gt; &lt;/a&gt;或&lt;a href=&quot;#express.urlencoded&quot;&gt; &lt;code&gt;express.urlencoded()&lt;/code&gt; )&lt;/a&gt;时填充它。</target>
        </trans-unit>
        <trans-unit id="2a3ec3691b6885bf96d8ead84aca19ae870aaaaf" translate="yes" xml:space="preserve">
          <source>Contains key-value pairs of data submitted in the request body. By default, it is &lt;code&gt;undefined&lt;/code&gt;, and is populated when you use body-parsing middleware such as &lt;a href=&quot;https://www.npmjs.org/package/body-parser&quot;&gt;body-parser&lt;/a&gt; and &lt;a href=&quot;https://www.npmjs.org/package/multer&quot;&gt;multer&lt;/a&gt;.</source>
          <target state="translated">包含在请求正文中提交的数据的键值对。默认情况下，它是 &lt;code&gt;undefined&lt;/code&gt; ，并且在使用&lt;a href=&quot;https://www.npmjs.org/package/body-parser&quot;&gt;body-parser&lt;/a&gt;和&lt;a href=&quot;https://www.npmjs.org/package/multer&quot;&gt;multer&lt;/a&gt;等正文分析中间件时填充。</target>
        </trans-unit>
        <trans-unit id="783d83025119e53078283b4686df3a6e731ae270" translate="yes" xml:space="preserve">
          <source>Contains the currently-matched route, a string. For example:</source>
          <target state="translated">包含当前匹配的路由,是一个字符串。例如:</target>
        </trans-unit>
        <trans-unit id="1c80c08531ee5f06a30971bc23b21208d66fe64d" translate="yes" xml:space="preserve">
          <source>Contains the hostname derived from the &lt;code&gt;Host&lt;/code&gt; HTTP header.</source>
          <target state="translated">包含从 &lt;code&gt;Host&lt;/code&gt; HTTP标头派生的主机名。</target>
        </trans-unit>
        <trans-unit id="0cbc4a2e88972704b570ff9a0560ce98f9f127da" translate="yes" xml:space="preserve">
          <source>Contains the path part of the request URL.</source>
          <target state="translated">包含请求URL的路径部分。</target>
        </trans-unit>
        <trans-unit id="bbd25a57931e72096cb5b64f4362667fc36711ec" translate="yes" xml:space="preserve">
          <source>Contains the remote IP address of the request.</source>
          <target state="translated">包含请求的远程IP地址。</target>
        </trans-unit>
        <trans-unit id="f9ffb6887f23209cfcc45dd3c22f8b6aeccc1ef5" translate="yes" xml:space="preserve">
          <source>Contains the request protocol string: either &lt;code&gt;http&lt;/code&gt; or (for TLS requests) &lt;code&gt;https&lt;/code&gt;.</source>
          <target state="translated">包含请求协议字符串： &lt;code&gt;http&lt;/code&gt; 或（对于TLS请求） &lt;code&gt;https&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="35a91c9da1fcd97b2d1ffc9e356938457d3d2ff7" translate="yes" xml:space="preserve">
          <source>Control clustering (StrongLoop PM and pm2).</source>
          <target state="translated">控制聚类(StrongLoop PM和pm2)。</target>
        </trans-unit>
        <trans-unit id="e18921eec56769e2c14b27f9a86e39dced102a62" translate="yes" xml:space="preserve">
          <source>Control clustering.</source>
          <target state="translated">控制聚类。</target>
        </trans-unit>
        <trans-unit id="df4eb88a986720b3a43d7ff7370bc423ded7b9f8" translate="yes" xml:space="preserve">
          <source>Controls the maximum request body size. If this is a number, then the value specifies the number of bytes; if it is a string, the value is passed to the &lt;a href=&quot;https://www.npmjs.com/package/bytes&quot;&gt;bytes&lt;/a&gt; library for parsing.</source>
          <target state="translated">控制最大请求正文大小。如果这是一个数字，则该值指定字节数；如果是字符串，则将值传递到&lt;a href=&quot;https://www.npmjs.com/package/bytes&quot;&gt;字节&lt;/a&gt;库进行解析。</target>
        </trans-unit>
        <trans-unit id="c412ecc9f179814af20f3b6bfdbc938fd116b12b" translate="yes" xml:space="preserve">
          <source>Convenient option for setting the expiry time relative to the current time in milliseconds.</source>
          <target state="translated">方便的选项,用于设置相对于当前时间的到期时间,单位为毫秒。</target>
        </trans-unit>
        <trans-unit id="e5503b67729c0db6ba79658202124a1cb8563ab8" translate="yes" xml:space="preserve">
          <source>CouchDB</source>
          <target state="translated">CouchDB</target>
        </trans-unit>
        <trans-unit id="9304cdd066efa64f78387e9cc9240a70527271bc" translate="yes" xml:space="preserve">
          <source>Couchbase</source>
          <target state="translated">Couchbase</target>
        </trans-unit>
        <trans-unit id="69635e64f5efc46f5a8578245cdc40b3314d0daa" translate="yes" xml:space="preserve">
          <source>Create a Pug template file named &lt;code&gt;index.pug&lt;/code&gt; in the &lt;code&gt;views&lt;/code&gt; directory, with the following content:</source>
          <target state="translated">在 &lt;code&gt;views&lt;/code&gt; 目录中创建一个名为 &lt;code&gt;index.pug&lt;/code&gt; 的Pug模板文件，其内容如下：</target>
        </trans-unit>
        <trans-unit id="3f5539746d990008773f9631056a57f64b93ef1e" translate="yes" xml:space="preserve">
          <source>Create a file in &lt;code&gt;/etc/systemd/system/express.service&lt;/code&gt;:</source>
          <target state="translated">在 &lt;code&gt;/etc/systemd/system/express.service&lt;/code&gt; 中创建一个文件：</target>
        </trans-unit>
        <trans-unit id="08c382b1dcea8712c5e3d1604523defedbc10018" translate="yes" xml:space="preserve">
          <source>Create a file named &lt;code&gt;myapp.conf&lt;/code&gt; at &lt;code&gt;/etc/init/&lt;/code&gt; with the following content (replace the bold text with values for your system and app):</source>
          <target state="translated">在 &lt;code&gt;/etc/init/&lt;/code&gt; 创建一个名为 &lt;code&gt;myapp.conf&lt;/code&gt; 的文件，其内容如下（用系统和应用程序的值替换粗体文本）：</target>
        </trans-unit>
        <trans-unit id="cff7be9dd35721376a2803e5a182868c0933a45a" translate="yes" xml:space="preserve">
          <source>Create a router file named &lt;code&gt;birds.js&lt;/code&gt; in the app directory, with the following content:</source>
          <target state="translated">在app目录中创建一个名为 &lt;code&gt;birds.js&lt;/code&gt; 的路由器文件，其内容如下：</target>
        </trans-unit>
        <trans-unit id="0699dfac75204a51005af19824c2925bae2aaf53" translate="yes" xml:space="preserve">
          <source>Creates a new &lt;a href=&quot;#router&quot;&gt;router&lt;/a&gt; object.</source>
          <target state="translated">创建一个新的&lt;a href=&quot;#router&quot;&gt;路由器&lt;/a&gt;对象。</target>
        </trans-unit>
        <trans-unit id="5df6af5213e90d671116e0332aad4fba444c827e" translate="yes" xml:space="preserve">
          <source>Creates an Express application. The &lt;code&gt;express()&lt;/code&gt; function is a top-level function exported by the &lt;code&gt;express&lt;/code&gt; module.</source>
          <target state="translated">创建一个Express应用程序。所述 &lt;code&gt;express()&lt;/code&gt; 函数是通过将导出的顶级功能 &lt;code&gt;express&lt;/code&gt; 模块。</target>
        </trans-unit>
        <trans-unit id="b5f9768df081f1924c9b18ffb3dfa94aea45ed27" translate="yes" xml:space="preserve">
          <source>Custom ETag function implementation. Use this only if you know what you are doing.</source>
          <target state="translated">自定义ETag函数的实现。只有在你知道自己在做什么的情况下才使用这个功能。</target>
        </trans-unit>
        <trans-unit id="fef08213d349f28f036380d77e8c32f99a480dfe" translate="yes" xml:space="preserve">
          <source>Custom trust implementation. Use this only if you know what you are doing.</source>
          <target state="translated">自定义信任实施。只有在你知道自己在做什么的情况下才使用这个。</target>
        </trans-unit>
        <trans-unit id="bbf6822e7b38afad37af8f466801fe46bd54a7a5" translate="yes" xml:space="preserve">
          <source>Database integration</source>
          <target state="translated">数据库集成</target>
        </trans-unit>
        <trans-unit id="eb9a4bc1c0c153e4e4b042a79113b815b7e3021d" translate="yes" xml:space="preserve">
          <source>Date</source>
          <target state="translated">Date</target>
        </trans-unit>
        <trans-unit id="69b5effa09b6ccbb3f8c7139ed0171e16055e242" translate="yes" xml:space="preserve">
          <source>Debugging Express</source>
          <target state="translated">调试快递</target>
        </trans-unit>
        <trans-unit id="808d7dca8a74d84af27a2d6602c3d786de45fe1e" translate="yes" xml:space="preserve">
          <source>Default</source>
          <target state="translated">Default</target>
        </trans-unit>
        <trans-unit id="283147ee408e671dc411e548f906c967eaa09ebb" translate="yes" xml:space="preserve">
          <source>Defend against SQL injection attacks by using parameterized queries or prepared statements.</source>
          <target state="translated">通过使用参数化查询或准备好的语句来防御SQL注入攻击。</target>
        </trans-unit>
        <trans-unit id="63457bed982aca50d677cb6b107cd96fd69707e3" translate="yes" xml:space="preserve">
          <source>Define error-handling middleware functions in the same way as other middleware functions, except error-handling functions have four arguments instead of three: &lt;code&gt;(err, req, res, next)&lt;/code&gt;. For example:</source>
          <target state="translated">定义错误处理中间件功能的方式与其他中间件功能相同，只是错误处理功能具有四个参数而不是三个参数： &lt;code&gt;(err, req, res, next)&lt;/code&gt; 。例如：</target>
        </trans-unit>
        <trans-unit id="74410d88f9bcbabc46b8d2b9794524e545a7d113" translate="yes" xml:space="preserve">
          <source>Define error-handling middleware functions in the same way as other middleware functions, except with four arguments instead of three, specifically with the signature &lt;code&gt;(err, req, res, next)&lt;/code&gt;):</source>
          <target state="translated">定义错误处理中间件函数的方式与其他中间件函数相同，除了使用四个参数而不是三个参数外，特别是使用签名 &lt;code&gt;(err, req, res, next)&lt;/code&gt; ）：</target>
        </trans-unit>
        <trans-unit id="bc91f608c3de892e5daa8d6d1783aebc987186a8" translate="yes" xml:space="preserve">
          <source>Defined as getters (ex: &lt;code&gt;req.secure&lt;/code&gt;, &lt;code&gt;req.ip&lt;/code&gt;)</source>
          <target state="translated">定义为吸气剂（例如： &lt;code&gt;req.secure&lt;/code&gt; ， &lt;code&gt;req.ip&lt;/code&gt; ）</target>
        </trans-unit>
        <trans-unit id="efa3856cae077ea25e7a24ff86483690e66719e1" translate="yes" xml:space="preserve">
          <source>Depending on how your file and directory privileges are configured, you might need to run this command with &lt;code&gt;sudo&lt;/code&gt;.</source>
          <target state="translated">根据文件和目录特权的配置方式，您可能需要使用 &lt;code&gt;sudo&lt;/code&gt; 运行此命令。</target>
        </trans-unit>
        <trans-unit id="e890fe73a613555ff53cc22d6259fcf78b15bb71" translate="yes" xml:space="preserve">
          <source>Deprecated. Use either &lt;code&gt;req.params&lt;/code&gt;, &lt;code&gt;req.body&lt;/code&gt; or &lt;code&gt;req.query&lt;/code&gt;, as applicable.</source>
          <target state="translated">不推荐使用。根据需要使用 &lt;code&gt;req.params&lt;/code&gt; ， &lt;code&gt;req.body&lt;/code&gt; 或 &lt;code&gt;req.query&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="55f8ebc805e65b5b71ddafdae390e3be2bcd69af" translate="yes" xml:space="preserve">
          <source>Description</source>
          <target state="translated">Description</target>
        </trans-unit>
        <trans-unit id="355b40c6a56802c99d08deb2869f9ff4908b9b30" translate="yes" xml:space="preserve">
          <source>Determines how dotfiles (files or directories that begin with a dot &amp;ldquo;.&amp;rdquo;) are treated.</source>
          <target state="translated">确定如何处理点文件（以点&amp;ldquo;。&amp;rdquo;开头的文件或目录）。</target>
        </trans-unit>
        <trans-unit id="8e967c392d45c339a714e68356e7584d4cef20dd" translate="yes" xml:space="preserve">
          <source>Developing template engines for Express</source>
          <target state="translated">为Express开发模板引擎</target>
        </trans-unit>
        <trans-unit id="395319dc3ac6ba2eadf3e73f941388e5d68cc916" translate="yes" xml:space="preserve">
          <source>Development and production environments are usually set up differently and have vastly different requirements. What&amp;rsquo;s fine in development may not be acceptable in production. For example, in a development environment you may want verbose logging of errors for debugging, while the same behavior can become a security concern in a production environment. And in development, you don&amp;rsquo;t need to worry about scalability, reliability, and performance, while those concerns become critical in production.</source>
          <target state="translated">开发和生产环境通常设置不同，并且有很大不同的要求。开发中的优点在生产中可能是不可接受的。例如，在开发环境中，您可能希望详细记录错误以进行调试，而相同的行为可能会在生产环境中成为安全问题。在开发中，您不必担心可伸缩性，可靠性和性能，而这些问题在生产中变得至关重要。</target>
        </trans-unit>
        <trans-unit id="3b4148395bb6549811f872a7ceeaea541533ad74" translate="yes" xml:space="preserve">
          <source>Direct access to &lt;code&gt;req.body&lt;/code&gt;, &lt;code&gt;req.params&lt;/code&gt;, and &lt;code&gt;req.query&lt;/code&gt; should be favoured for clarity - unless you truly accept input from each object.</source>
          <target state="translated">为了清楚起见，应该倾向于直接访问 &lt;code&gt;req.body&lt;/code&gt; ， &lt;code&gt;req.params&lt;/code&gt; 和 &lt;code&gt;req.query&lt;/code&gt; ，除非您真正接受每个对象的输入。</target>
        </trans-unit>
        <trans-unit id="177b170232cb2b6f2679fe51e94b3eb6bb0030cb" translate="yes" xml:space="preserve">
          <source>Disable logging for static content requests by loading the logger middleware after the static middleware:</source>
          <target state="translated">通过在静态中间件之后加载记录器中间件,禁用静态内容请求的记录。</target>
        </trans-unit>
        <trans-unit id="de7f437451643bf07da610fc32ccc892f4e42e0f" translate="yes" xml:space="preserve">
          <source>Disable query parsing by setting the value to &lt;code&gt;false&lt;/code&gt;, or set the query parser to use either &amp;ldquo;simple&amp;rdquo; or &amp;ldquo;extended&amp;rdquo; or a custom query string parsing function.</source>
          <target state="translated">通过将值设置为 &lt;code&gt;false&lt;/code&gt; 来禁用查询解析，或者将查询解析器设置为使用&amp;ldquo;简单&amp;rdquo;或&amp;ldquo;扩展&amp;rdquo;或自定义查询字符串解析功能。</target>
        </trans-unit>
        <trans-unit id="ecefd5dcb9ac37b6c6fd72059f423b6bb6a06c0b" translate="yes" xml:space="preserve">
          <source>Disabled by default, &amp;ldquo;/foo&amp;rdquo; and &amp;ldquo;/foo/&amp;rdquo; are treated the same by the router.</source>
          <target state="translated">默认情况下禁用，路由器将&amp;ldquo; / foo&amp;rdquo;和&amp;ldquo; / foo /&amp;rdquo;视为相同。</target>
        </trans-unit>
        <trans-unit id="1b0e1d5ccf4b50e274020c71b61f85d00aeb83e0" translate="yes" xml:space="preserve">
          <source>Disabled by default, treating &amp;ldquo;/Foo&amp;rdquo; and &amp;ldquo;/foo&amp;rdquo; as the same.</source>
          <target state="translated">默认情况下禁用，将&amp;ldquo; / Foo&amp;rdquo;和&amp;ldquo; / foo&amp;rdquo;视为相同。</target>
        </trans-unit>
        <trans-unit id="933c4cca541b19809e42884f7bd1ee08237a999d" translate="yes" xml:space="preserve">
          <source>Display the command options with the &lt;code&gt;-h&lt;/code&gt; option:</source>
          <target state="translated">显示带有 &lt;code&gt;-h&lt;/code&gt; 选项的命令选项：</target>
        </trans-unit>
        <trans-unit id="19c9b4d67d7f2f85a95c6850ccf2bc6dd1f307e8" translate="yes" xml:space="preserve">
          <source>Do logging correctly</source>
          <target state="translated">正确进行日志记录</target>
        </trans-unit>
        <trans-unit id="3abfaa6f9945482eef90724bb65936e73d40132d" translate="yes" xml:space="preserve">
          <source>Domain name for the cookie. Defaults to the domain name of the app.</source>
          <target state="translated">Cookie的域名。默认为应用程序的域名。</target>
        </trans-unit>
        <trans-unit id="4daa1b4d384252c37dcc70f8befd62bc8e7ceacb" translate="yes" xml:space="preserve">
          <source>Don&amp;rsquo;t use deprecated or vulnerable versions of Express</source>
          <target state="translated">不要使用过时或易受攻击的Express版本</target>
        </trans-unit>
        <trans-unit id="296d8acfb36e5628ff91d68643f0449036029b34" translate="yes" xml:space="preserve">
          <source>Don&amp;rsquo;t use synchronous functions</source>
          <target state="translated">不要使用同步功能</target>
        </trans-unit>
        <trans-unit id="9cac199c873b3d4a0b8745e8b8991bffb9da76f6" translate="yes" xml:space="preserve">
          <source>Don&amp;rsquo;t use the default session cookie name</source>
          <target state="translated">不要使用默认的会话Cookie名称</target>
        </trans-unit>
        <trans-unit id="56d4922a1b14e40a4157bc19bed28daa3d77af6c" translate="yes" xml:space="preserve">
          <source>Each route can have one or more handler functions, which are executed when the route is matched.</source>
          <target state="translated">每个途径可以有一个或多个处理函数,当途径被匹配时,处理函数被执行。</target>
        </trans-unit>
        <trans-unit id="a93da6fd3db3cf2b7d517575dc24e78cc5ef81bb" translate="yes" xml:space="preserve">
          <source>Easily manage multi-host deployments with Nginx integration.</source>
          <target state="translated">通过集成Nginx,轻松管理多主机部署。</target>
        </trans-unit>
        <trans-unit id="65e77a657e6f7606609d964055dbc77d35aca70d" translate="yes" xml:space="preserve">
          <source>Easily scale to multiple hosts with integrated control for Nginx load balancer.</source>
          <target state="translated">通过对Nginx负载均衡器的集成控制,轻松扩展到多台主机。</target>
        </trans-unit>
        <trans-unit id="584a02b90ea0bff9e02bf65dd40ffc1d35622c27" translate="yes" xml:space="preserve">
          <source>ElasticSearch</source>
          <target state="translated">ElasticSearch</target>
        </trans-unit>
        <trans-unit id="85bb5d88d7f7c89b76d36dfc3c4155f873032a5e" translate="yes" xml:space="preserve">
          <source>Elasticsearch</source>
          <target state="translated">Elasticsearch</target>
        </trans-unit>
        <trans-unit id="5a227f0a032d8f32f13183dceacbb6f0bd6738df" translate="yes" xml:space="preserve">
          <source>Embedded below is essentially the simplest Express app you can create. It is a single file app &amp;mdash; &lt;em&gt;not&lt;/em&gt; what you&amp;rsquo;d get if you use the &lt;a href=&quot;generator&quot;&gt;Express generator&lt;/a&gt;, which creates the scaffolding for a full app with numerous JavaScript files, Jade templates, and sub-directories for various purposes.</source>
          <target state="translated">本质上，下面嵌入是您可以创建的最简单的Express应用程序。它是一个单一文件的应用程序- 如果使用&lt;a href=&quot;generator&quot;&gt;Express generator&lt;/a&gt;，您将获得的&lt;em&gt;不是&lt;/em&gt;它。它为具有多种用途的JavaScript文件，Jade模板和子目录的完整应用程序创建了脚手架。</target>
        </trans-unit>
        <trans-unit id="aaae3f8a6561770f46b72bdb101aef7e553d615e" translate="yes" xml:space="preserve">
          <source>Enable case sensitivity.</source>
          <target state="translated">启用大小写敏感度。</target>
        </trans-unit>
        <trans-unit id="290934897c1ae866ca5a42316e7aff2e90c8bd5a" translate="yes" xml:space="preserve">
          <source>Enable case sensitivity. When enabled, &quot;/Foo&quot; and &quot;/foo&quot; are different routes. When disabled, &quot;/Foo&quot; and &quot;/foo&quot; are treated the same.</source>
          <target state="translated">启用大小写敏感度。启用时,&quot;/Foo &quot;和&quot;/foo &quot;是不同的路径。当禁用时,&quot;/Foo &quot;和&quot;/foo &quot;的处理方式相同。</target>
        </trans-unit>
        <trans-unit id="b4925bdf056754098ee593a4509dcc3bbe83d191" translate="yes" xml:space="preserve">
          <source>Enable escaping JSON responses from the &lt;code&gt;res.json&lt;/code&gt;, &lt;code&gt;res.jsonp&lt;/code&gt;, and &lt;code&gt;res.send&lt;/code&gt; APIs. This will escape the characters &lt;code&gt;&amp;lt;&lt;/code&gt;, &lt;code&gt;&amp;gt;&lt;/code&gt;, and &lt;code&gt;&amp;amp;&lt;/code&gt; as Unicode escape sequences in JSON. The purpose of this it to assist with &lt;a href=&quot;https://blog.mozilla.org/security/2017/07/18/web-service-audits-firefox-accounts/&quot;&gt;mitigating certain types of persistent XSS attacks&lt;/a&gt; when clients sniff responses for HTML.</source>
          <target state="translated">从 &lt;code&gt;res.json&lt;/code&gt; ， &lt;code&gt;res.jsonp&lt;/code&gt; 和 &lt;code&gt;res.send&lt;/code&gt; API 启用转义JSON响应。这将转义字符 &lt;code&gt;&amp;lt;&lt;/code&gt; ， &lt;code&gt;&amp;gt;&lt;/code&gt; 和 &lt;code&gt;&amp;amp;&lt;/code&gt; 作为JSON中的Unicode转义序列。其目的是在客户端嗅探HTML响应时帮助&lt;a href=&quot;https://blog.mozilla.org/security/2017/07/18/web-service-audits-firefox-accounts/&quot;&gt;缓解某些类型的持久XSS攻击&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="b0fc9a744bd05f7f71df33f42087b2c0f435a9c7" translate="yes" xml:space="preserve">
          <source>Enable or disable accepting ranged requests.</source>
          <target state="translated">启用或禁用接受范围请求。</target>
        </trans-unit>
        <trans-unit id="683b0a904d666142219022571616465fa3d6da2c" translate="yes" xml:space="preserve">
          <source>Enable or disable etag generation</source>
          <target state="translated">启用或禁用电子标签生成</target>
        </trans-unit>
        <trans-unit id="308623cd84148b092681fb0e3b18eb11379c8147" translate="yes" xml:space="preserve">
          <source>Enable or disable setting &lt;code&gt;Cache-Control&lt;/code&gt; response header.</source>
          <target state="translated">启用或禁用设置 &lt;code&gt;Cache-Control&lt;/code&gt; 响应标头。</target>
        </trans-unit>
        <trans-unit id="ee7f574f5f24332efc93e0aaa4b80169cf7b3d20" translate="yes" xml:space="preserve">
          <source>Enable or disable the &lt;code&gt;immutable&lt;/code&gt; directive in the &lt;code&gt;Cache-Control&lt;/code&gt; response header. If enabled, the &lt;code&gt;maxAge&lt;/code&gt; option should also be specified to enable caching. The &lt;code&gt;immutable&lt;/code&gt; directive will prevent supported clients from making conditional requests during the life of the &lt;code&gt;maxAge&lt;/code&gt; option to check if the file has changed.</source>
          <target state="translated">在 &lt;code&gt;Cache-Control&lt;/code&gt; 响应标头中启用或禁用 &lt;code&gt;immutable&lt;/code&gt; 指令。如果启用，还应指定 &lt;code&gt;maxAge&lt;/code&gt; 选项以启用缓存。在 &lt;code&gt;immutable&lt;/code&gt; 指令将阻止支持的客户端从生活中进行条件请求 &lt;code&gt;maxAge&lt;/code&gt; 选项来检查文件是否已经改变。</target>
        </trans-unit>
        <trans-unit id="fd28c0780fb38d33a717b8ae0d6f206e8210a23f" translate="yes" xml:space="preserve">
          <source>Enable service</source>
          <target state="translated">启用服务</target>
        </trans-unit>
        <trans-unit id="daea9cd09e7d3ff730530d1d6dd5c8fb4d59c7d9" translate="yes" xml:space="preserve">
          <source>Enable strict routing.</source>
          <target state="translated">启用严格的路由。</target>
        </trans-unit>
        <trans-unit id="b0fd3968227e357983b2d0342190fd0f040096c9" translate="yes" xml:space="preserve">
          <source>Enable strict routing. When enabled, the router treats &quot;/foo&quot; and &quot;/foo/&quot; as different. Otherwise, the router treats &quot;/foo&quot; and &quot;/foo/&quot; as the same.</source>
          <target state="translated">启用严格路由。当启用时,路由器将&quot;/foo &quot;和&quot;/foo/&quot;视为不同的。否则,路由器将&quot;/foo &quot;和&quot;/foo/&quot;视为相同。</target>
        </trans-unit>
        <trans-unit id="df174a3f2faa31814e06540acda7af8825403fac" translate="yes" xml:space="preserve">
          <source>Enabled</source>
          <target state="translated">Enabled</target>
        </trans-unit>
        <trans-unit id="4fb36a502afc43e2085c32693013b19cb30d5949" translate="yes" xml:space="preserve">
          <source>Enables or disables handling deflated (compressed) bodies; when disabled, deflated bodies are rejected.</source>
          <target state="translated">启用或禁用处理放气(压缩)机构;禁用时,将拒绝放气机构。</target>
        </trans-unit>
        <trans-unit id="c8dbf4ebae577d8a22b7bb1410c30a40d565b09e" translate="yes" xml:space="preserve">
          <source>Enables or disables only accepting arrays and objects; when disabled will accept anything &lt;code&gt;JSON.parse&lt;/code&gt; accepts.</source>
          <target state="translated">启用或禁用仅接受数组和对象；禁用时将接受 &lt;code&gt;JSON.parse&lt;/code&gt; 接受的任何内容。</target>
        </trans-unit>
        <trans-unit id="e02124e195f8401437f6e1760caddbe296b09841" translate="yes" xml:space="preserve">
          <source>Enables the &quot;X-Powered-By: Express&quot; HTTP header.</source>
          <target state="translated">启用 &quot;X-Powered-By:Express &quot;的HTTP头。</target>
        </trans-unit>
        <trans-unit id="b831099575472a0997d0cd9cec90b1e61747bab2" translate="yes" xml:space="preserve">
          <source>Enables view template compilation caching.</source>
          <target state="translated">启用视图模板编译缓存。</target>
        </trans-unit>
        <trans-unit id="97130d1ef64c9d9709cdffff31ebf7ff3379d87f" translate="yes" xml:space="preserve">
          <source>Enables/disables specific debugging namespaces.</source>
          <target state="translated">启用/禁用特定的调试命名空间。</target>
        </trans-unit>
        <trans-unit id="5ee8b1cd18665546f9feb923141e6fcde419c3d7" translate="yes" xml:space="preserve">
          <source>Enabling &lt;code&gt;trust proxy&lt;/code&gt; will have the following impact:</source>
          <target state="translated">启用 &lt;code&gt;trust proxy&lt;/code&gt; 将产生以下影响：</target>
        </trans-unit>
        <trans-unit id="26d259233f7c87b0a6bc726137c058ca8161952f" translate="yes" xml:space="preserve">
          <source>End the request-response cycle.</source>
          <target state="translated">结束请求-响应周期。</target>
        </trans-unit>
        <trans-unit id="09370a9dadac55b49447c02db9cd08d0d8d99aba" translate="yes" xml:space="preserve">
          <source>End the response process.</source>
          <target state="translated">结束答复过程。</target>
        </trans-unit>
        <trans-unit id="9c63a8c2a5cd15f961c097c5bd515c652c759b1f" translate="yes" xml:space="preserve">
          <source>Ends the response process. This method actually comes from Node core, specifically the &lt;a href=&quot;https://nodejs.org/api/http.html#http_response_end_data_encoding_callback&quot;&gt;response.end() method of http.ServerResponse&lt;/a&gt;.</source>
          <target state="translated">结束响应过程。该方法实际上来自Node核心，特别&lt;a href=&quot;https://nodejs.org/api/http.html#http_response_end_data_encoding_callback&quot;&gt;是http.ServerResponse&lt;/a&gt;的response.end（）方法。</target>
        </trans-unit>
        <trans-unit id="fa647a2778919f7258bf7fd4e7b43b96889c41ad" translate="yes" xml:space="preserve">
          <source>Ensure that you load the &lt;code&gt;debug&lt;/code&gt; module at the top of the &lt;code&gt;app.js&lt;/code&gt; file by using the following code:</source>
          <target state="translated">确保使用以下代码将 &lt;code&gt;debug&lt;/code&gt; 模块加载到 &lt;code&gt;app.js&lt;/code&gt; 文件的顶部：</target>
        </trans-unit>
        <trans-unit id="9331c28dfcf6513451a3a3900685f58b58408845" translate="yes" xml:space="preserve">
          <source>Ensure your app automatically restarts</source>
          <target state="translated">确保您的应用程序自动重新启动</target>
        </trans-unit>
        <trans-unit id="921ff94608d0044deb33358a872725af10a5e4cc" translate="yes" xml:space="preserve">
          <source>Ensure your dependencies are secure</source>
          <target state="translated">确保你的依赖性是安全的</target>
        </trans-unit>
        <trans-unit id="9caa5a83c98554a44535c501ff2c2d0cbe0ce963" translate="yes" xml:space="preserve">
          <source>Enter &lt;code&gt;app.js&lt;/code&gt;, or whatever you want the name of the main file to be. If you want it to be &lt;code&gt;index.js&lt;/code&gt;, hit RETURN to accept the suggested default file name.</source>
          <target state="translated">输入 &lt;code&gt;app.js&lt;/code&gt; ，或者输入任何您想要的主文件名。如果希望它是 &lt;code&gt;index.js&lt;/code&gt; ，请按RETURN接受建议的默认文件名。</target>
        </trans-unit>
        <trans-unit id="0d05e4786c70859b9060b91fc7226e8f68f81644" translate="yes" xml:space="preserve">
          <source>Environment mode. Be sure to set to &quot;production&quot; in a production environment; see &lt;a href=&quot;http://expressjs.com/advanced/best-practice-performance.html#env&quot;&gt;Production best practices: performance and reliability&lt;/a&gt;.</source>
          <target state="translated">环境模式。确保在生产环境中设置为&amp;ldquo;生产&amp;rdquo;；请参见&lt;a href=&quot;http://expressjs.com/advanced/best-practice-performance.html#env&quot;&gt;生产最佳实践：性能和可靠性&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="5fff1f56919b006049c274c6c76fbbe56470ee4c" translate="yes" xml:space="preserve">
          <source>Error Handling</source>
          <target state="translated">错误处理</target>
        </trans-unit>
        <trans-unit id="8281542a412265940e3267b1ec8612b789126d4b" translate="yes" xml:space="preserve">
          <source>Error Handling in Node.js</source>
          <target state="translated">Node.js中的错误处理</target>
        </trans-unit>
        <trans-unit id="5e71f261f0dd38232943dfd87fe479dd7c19cdcb" translate="yes" xml:space="preserve">
          <source>Error-handling middleware</source>
          <target state="translated">错误处理中间件</target>
        </trans-unit>
        <trans-unit id="f7ca32af93ddb79fa55144e3c8df59140806aea2" translate="yes" xml:space="preserve">
          <source>Error-handling middleware always takes &lt;em&gt;four&lt;/em&gt; arguments. You must provide four arguments to identify it as an error-handling middleware function. Even if you don&amp;rsquo;t need to use the &lt;code&gt;next&lt;/code&gt; object, you must specify it to maintain the signature. Otherwise, the &lt;code&gt;next&lt;/code&gt; object will be interpreted as regular middleware and will fail to handle errors.</source>
          <target state="translated">错误处理中间件始终采用&lt;em&gt;四个&lt;/em&gt;参数。您必须提供四个参数以将其标识为错误处理中间件函数。即使您不需要使用 &lt;code&gt;next&lt;/code&gt; 对象，也必须指定它来维护签名。否则， &lt;code&gt;next&lt;/code&gt; 对象将被解释为常规中间件，并且将无法处理错误。</target>
        </trans-unit>
        <trans-unit id="c6ca31933bd984ea2c860446228da1566be399ee" translate="yes" xml:space="preserve">
          <source>Error-handling middleware always takes &lt;em&gt;four&lt;/em&gt; arguments. You must provide four arguments to identify it as an error-handling middleware function. Even if you don&amp;rsquo;t need to use the &lt;code&gt;next&lt;/code&gt; object, you must specify it to maintain the signature. Otherwise, the &lt;code&gt;next&lt;/code&gt; object will be interpreted as regular middleware and will fail to handle errors. For details about error-handling middleware, see: &lt;a href=&quot;guide/error-handling&quot;&gt;Error handling&lt;/a&gt;.</source>
          <target state="translated">错误处理中间件始终采用&lt;em&gt;四个&lt;/em&gt;参数。您必须提供四个参数以将其标识为错误处理中间件函数。即使您不需要使用 &lt;code&gt;next&lt;/code&gt; 对象，也必须指定它来维护签名。否则， &lt;code&gt;next&lt;/code&gt; 对象将被解释为常规中间件，并且将无法处理错误。有关错误处理中间件的详细信息，请参见：&lt;a href=&quot;guide/error-handling&quot;&gt;错误处理&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="0ce9d9e0a68ed06118b1ffcc01b0e2fc1defe7ef" translate="yes" xml:space="preserve">
          <source>Errors that occur in synchronous code inside route handlers and middleware require no extra work. If synchronous code throws an error, then Express will catch and process it. For example:</source>
          <target state="translated">路由处理程序和中间件内部的同步代码发生的错误不需要额外的工作。如果同步代码抛出了错误,那么Express将捕获并处理它。比如说</target>
        </trans-unit>
        <trans-unit id="f7406fc33372be802c862fdccd6bc7614bdb8a5a" translate="yes" xml:space="preserve">
          <source>Even if you use a path pattern or a set of path patterns to load the router, the &lt;code&gt;baseUrl&lt;/code&gt; property returns the matched string, not the pattern(s). In the following example, the &lt;code&gt;greet&lt;/code&gt; router is loaded on two path patterns.</source>
          <target state="translated">即使使用路径模式或一组路径模式来加载路由器， &lt;code&gt;baseUrl&lt;/code&gt; 属性也会返回匹配的字符串，而不是模式。在以下示例中， &lt;code&gt;greet&lt;/code&gt; 路由器被加载到两个路径模式上。</target>
        </trans-unit>
        <trans-unit id="0c274a5610a446bdb5d5fc8235d3f9b9c4b109f2" translate="yes" xml:space="preserve">
          <source>Even though the authentication middleware was added via the &lt;code&gt;authRouter&lt;/code&gt; it will run on the routes defined by the &lt;code&gt;openRouter&lt;/code&gt; as well since both routers were mounted on &lt;code&gt;/users&lt;/code&gt;. To avoid this behavior, use different paths for each router.</source>
          <target state="translated">即使经由所添加的认证中间件 &lt;code&gt;authRouter&lt;/code&gt; 它将由所限定的路线运行 &lt;code&gt;openRouter&lt;/code&gt; ，以及因为两个路由器被安装在 &lt;code&gt;/users&lt;/code&gt; 。为避免此现象，请为每个路由器使用不同的路径。</target>
        </trans-unit>
        <trans-unit id="9363c652e438297c2a368c79ef52bcb161df4d27" translate="yes" xml:space="preserve">
          <source>Event emitters (like streams) can still cause uncaught exceptions. So make sure you are handling the error event properly; for example:</source>
          <target state="translated">事件发射器(如流)仍然可以引起未捕获的异常。所以要确保你正确处理错误事件;例如。</target>
        </trans-unit>
        <trans-unit id="c5497bca58468ae64aed6c0fd921109217988db3" translate="yes" xml:space="preserve">
          <source>Events</source>
          <target state="translated">Events</target>
        </trans-unit>
        <trans-unit id="65619610050ac2e98be01ba3a9ad5fa1553b30fc" translate="yes" xml:space="preserve">
          <source>Every time the app receives a request, it prints the message &amp;ldquo;LOGGED&amp;rdquo; to the terminal.</source>
          <target state="translated">每次应用程序收到请求时，它将消息&amp;ldquo; LOGGED&amp;rdquo;记录到终端。</target>
        </trans-unit>
        <trans-unit id="0f01ed56a1e32a05e5ef96e4d779f34784af9a96" translate="yes" xml:space="preserve">
          <source>Example</source>
          <target state="translated">Example</target>
        </trans-unit>
        <trans-unit id="12c8833ce8cbdb16bb6aa3ade9305cfe4e091e32" translate="yes" xml:space="preserve">
          <source>Example (v2.*)</source>
          <target state="translated">例子(v2.*)</target>
        </trans-unit>
        <trans-unit id="dde6571d55508797814836beeddcf4137f57cecb" translate="yes" xml:space="preserve">
          <source>Example (v3.*)</source>
          <target state="translated">例子(v3.*)</target>
        </trans-unit>
        <trans-unit id="316b5d13127224eb102fe8dcd01317838b31e717" translate="yes" xml:space="preserve">
          <source>Example Graceful Shutdown</source>
          <target state="translated">示例 优雅关机</target>
        </trans-unit>
        <trans-unit id="299c7f425e0a9c911a627d9bda1241ca4ff68141" translate="yes" xml:space="preserve">
          <source>Example app migration</source>
          <target state="translated">应用程序迁移示例</target>
        </trans-unit>
        <trans-unit id="dd94ba99bf7abc74d479f670089b45dea2900278" translate="yes" xml:space="preserve">
          <source>Example of express.static</source>
          <target state="translated">Express.static的例子</target>
        </trans-unit>
        <trans-unit id="ef78410618df3c7269c534510b45cc0449040c3b" translate="yes" xml:space="preserve">
          <source>Example output from the previous snippet:</source>
          <target state="translated">上一个片段的输出示例。</target>
        </trans-unit>
        <trans-unit id="1acbe55bd8a3c83dd1fbadb8a8db9d81006a79c9" translate="yes" xml:space="preserve">
          <source>Example use case: You need to set a domain-wide cookie for another site in your organization. This other site (not under your administrative control) does not use URI-encoded cookie values.</source>
          <target state="translated">使用案例示例。您需要为您的组织中的另一个站点设置一个域范围的 cookie。这个其他网站(不在您的管理控制之下)不使用URI编码的cookie值。</target>
        </trans-unit>
        <trans-unit id="eb01bf04c9a0e8a71c45816513df424f1c7ffedb" translate="yes" xml:space="preserve">
          <source>Examples</source>
          <target state="translated">Examples</target>
        </trans-unit>
        <trans-unit id="305f3d3ccbbbf08250508b2e0d204454f1a1d49e" translate="yes" xml:space="preserve">
          <source>Examples of route paths based on regular expressions:</source>
          <target state="translated">基于正则表达式的途径路径的例子。</target>
        </trans-unit>
        <trans-unit id="fb3447b632f6a431215776dcf254a01001a40c4f" translate="yes" xml:space="preserve">
          <source>Examples:</source>
          <target state="translated">Examples:</target>
        </trans-unit>
        <trans-unit id="e9992f62588d0ca9c8dbf56eb92dc1764347f9a7" translate="yes" xml:space="preserve">
          <source>Exceptions: Sub-apps will inherit the value of &lt;code&gt;trust proxy&lt;/code&gt; even though it has a default value (for backward-compatibility); Sub-apps will not inherit the value of &lt;code&gt;view cache&lt;/code&gt; in production (when &lt;code&gt;NODE_ENV&lt;/code&gt; is &amp;ldquo;production&amp;rdquo;).</source>
          <target state="translated">例外：子应用程序将继承 &lt;code&gt;trust proxy&lt;/code&gt; 的值，即使它具有默认值（出于向后兼容性）；子应用程序将不会继承生产环境中 &lt;code&gt;view cache&lt;/code&gt; 的值（当 &lt;code&gt;NODE_ENV&lt;/code&gt; 为&amp;ldquo;生产环境&amp;rdquo;时）。</target>
        </trans-unit>
        <trans-unit id="370ba317bdf9c07fc70af648c857d625e16cf9a8" translate="yes" xml:space="preserve">
          <source>Execute any code.</source>
          <target state="translated">执行任何代码。</target>
        </trans-unit>
        <trans-unit id="2fc1d6576199547fe59e32b2865eca4d8495be27" translate="yes" xml:space="preserve">
          <source>Execute the following command to create an Express 4 app:</source>
          <target state="translated">执行以下命令来创建一个Express 4应用程序。</target>
        </trans-unit>
        <trans-unit id="e12214976fff259be4a8925b389673e6259fdb9d" translate="yes" xml:space="preserve">
          <source>Expiry date of the cookie in GMT. If not specified or set to 0, creates a session cookie.</source>
          <target state="translated">Cookie的到期日,GMT。如果没有指定或设置为0,则创建一个会话cookie。</target>
        </trans-unit>
        <trans-unit id="8b652040961793dd0ebfc35016e694eff7d88f91" translate="yes" xml:space="preserve">
          <source>Express</source>
          <target state="translated">Express</target>
        </trans-unit>
        <trans-unit id="ad5d6fe52dea035b0141b8257837a4fbaeb9c918" translate="yes" xml:space="preserve">
          <source>Express 2.x and 3.x are no longer maintained. Security and performance issues in these versions won&amp;rsquo;t be fixed. Do not use them! If you haven&amp;rsquo;t moved to version 4, follow the &lt;a href=&quot;../guide/migrating-4&quot;&gt;migration guide&lt;/a&gt;.</source>
          <target state="translated">Express 2.x和3.x不再维护。这些版本中的安全性和性能问题不会得到解决。不要使用它们！如果您尚未迁移到版本4，请按照&lt;a href=&quot;../guide/migrating-4&quot;&gt;迁移指南进行操作&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="3d9bf96593fc845e97e1749566cd8d3b18b7f796" translate="yes" xml:space="preserve">
          <source>Express 3</source>
          <target state="translated">快3</target>
        </trans-unit>
        <trans-unit id="0e94a09f46665d5d136219942ff7993c91d1317b" translate="yes" xml:space="preserve">
          <source>Express 4</source>
          <target state="translated">快速4</target>
        </trans-unit>
        <trans-unit id="aee6363985963f481bba1667bfa659a741e5f0dc" translate="yes" xml:space="preserve">
          <source>Express 4 is a breaking change from Express 3. That means an existing Express 3 app will &lt;em&gt;not&lt;/em&gt; work if you update the Express version in its dependencies.</source>
          <target state="translated">Express 4是Express 3的一项重大更改，这意味着如果您更新Express版本中的依存关系，则现有的Express 3应用程序将&lt;em&gt;无法&lt;/em&gt;使用。</target>
        </trans-unit>
        <trans-unit id="ef9e667a979971e36ea13a44a155e281bb31a995" translate="yes" xml:space="preserve">
          <source>Express 4 no longer depends on Connect, and removes all built-in middleware from its core, except for the &lt;code&gt;express.static&lt;/code&gt; function. This means that Express is now an independent routing and middleware web framework, and Express versioning and releases are not affected by middleware updates.</source>
          <target state="translated">Express 4不再依赖Connect，并且从 &lt;code&gt;express.static&lt;/code&gt; 函数中删除了所有内置的中间件。这意味着Express现在是一个独立的路由和中间件Web框架，并且Express版本和发行版本不受中间件更新的影响。</target>
        </trans-unit>
        <trans-unit id="c5a23224dc0b116541eff1df047d6d454b87fbde" translate="yes" xml:space="preserve">
          <source>Express 4 requires Node.js 0.10.x or later and has dropped support for Node.js 0.8.x.</source>
          <target state="translated">Express 4需要Node.js 0.10.x或更高版本,并且放弃了对Node.js 0.8.x的支持。</target>
        </trans-unit>
        <trans-unit id="3fe2bc821c6deb30be5bb9b75d083e0324c44bc8" translate="yes" xml:space="preserve">
          <source>Express 5 is not very different from Express 4: The changes to the API are not as significant as from 3.0 to 4.0. Although the basic API remains the same, there are still breaking changes; in other words an existing Express 4 program might not work if you update it to use Express 5.</source>
          <target state="translated">Express 5与Express 4的区别不大:API的变化没有3.0到4.0那么大。虽然基本的API保持不变,但仍有一些突破性的变化;换句话说,如果你将现有的Express 4程序更新为使用Express 5,它可能无法工作。</target>
        </trans-unit>
        <trans-unit id="51aa71f9113c8621abe8c305410e7d30f30e4b55" translate="yes" xml:space="preserve">
          <source>Express 5 no longer supports the &lt;code&gt;app.del()&lt;/code&gt; function. If you use this function an error is thrown. For registering HTTP DELETE routes, use the &lt;code&gt;app.delete()&lt;/code&gt; function instead.</source>
          <target state="translated">Express 5不再支持 &lt;code&gt;app.del()&lt;/code&gt; 函数。如果使用此功能，则会引发错误。要注册HTTP DELETE路由，请改用 &lt;code&gt;app.delete()&lt;/code&gt; 函数。</target>
        </trans-unit>
        <trans-unit id="4815903856badbfa626d8921d196c44f893d16bb" translate="yes" xml:space="preserve">
          <source>Express 5 no longer supports the signature &lt;code&gt;res.json(obj, status)&lt;/code&gt;. Instead, set the status and then chain it to the &lt;code&gt;res.json()&lt;/code&gt; method like this: &lt;code&gt;res.status(status).json(obj)&lt;/code&gt;.</source>
          <target state="translated">Express 5不再支持签名 &lt;code&gt;res.json(obj, status)&lt;/code&gt; 。而是设置状态，然后将其链接到 &lt;code&gt;res.json()&lt;/code&gt; 方法，如下所示： &lt;code&gt;res.status(status).json(obj)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="52bbb014dd443c7120b5b8b0b927b55126255027" translate="yes" xml:space="preserve">
          <source>Express 5 no longer supports the signature &lt;code&gt;res.jsonp(obj, status)&lt;/code&gt;. Instead, set the status and then chain it to the &lt;code&gt;res.jsonp()&lt;/code&gt; method like this: &lt;code&gt;res.status(status).jsonp(obj)&lt;/code&gt;.</source>
          <target state="translated">Express 5不再支持签名 &lt;code&gt;res.jsonp(obj, status)&lt;/code&gt; 。而是设置状态，然后将其链接到 &lt;code&gt;res.jsonp()&lt;/code&gt; 方法，如下所示： &lt;code&gt;res.status(status).jsonp(obj)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="5bdfe43c809e3e3d58b054a9d1884d885d3e4b49" translate="yes" xml:space="preserve">
          <source>Express 5 no longer supports the signature &lt;code&gt;res.send(&lt;em&gt;status&lt;/em&gt;)&lt;/code&gt;, where &lt;em&gt;&lt;code&gt;status&lt;/code&gt;&lt;/em&gt; is a number. Instead, use the &lt;code&gt;res.sendStatus(statusCode)&lt;/code&gt; function, which sets the HTTP response header status code and sends the text version of the code: &amp;ldquo;Not Found&amp;rdquo;, &amp;ldquo;Internal Server Error&amp;rdquo;, and so on. If you need to send a number by using the &lt;code&gt;res.send()&lt;/code&gt; function, quote the number to convert it to a string, so that Express does not interpret it as an attempt to use the unsupported old signature.</source>
          <target state="translated">Express 5不再支持签名 &lt;code&gt;res.send(&lt;em&gt;status&lt;/em&gt;)&lt;/code&gt; ，其中&lt;em&gt; &lt;code&gt;status&lt;/code&gt; &lt;/em&gt;是一个数字。而是使用 &lt;code&gt;res.sendStatus(statusCode)&lt;/code&gt; 函数，该函数设置HTTP响应标头状态代码并发送该代码的文本版本：&amp;ldquo;未找到&amp;rdquo;，&amp;ldquo;内部服务器错误&amp;rdquo;，等等。如果需要使用 &lt;code&gt;res.send()&lt;/code&gt; 函数发送数字，请用数字引号将其转换为字符串，以便Express不会将其解释为尝试使用不受支持的旧签名。</target>
        </trans-unit>
        <trans-unit id="dc743dc3a52d4882e64fffd799de194f73c656aa" translate="yes" xml:space="preserve">
          <source>Express 5 no longer supports the signature &lt;code&gt;res.send(obj, status)&lt;/code&gt;. Instead, set the status and then chain it to the &lt;code&gt;res.send()&lt;/code&gt; method like this: &lt;code&gt;res.status(status).send(obj)&lt;/code&gt;.</source>
          <target state="translated">Express 5不再支持签名 &lt;code&gt;res.send(obj, status)&lt;/code&gt; 。而是设置状态，然后将其链接到 &lt;code&gt;res.send()&lt;/code&gt; 方法，如下所示： &lt;code&gt;res.status(status).send(obj)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="d115d8039b4e68a805613633ec80224b78699388" translate="yes" xml:space="preserve">
          <source>Express 5.0 is still in the alpha release stage, but here is a preview of the changes that will be in the release and how to migrate your Express 4 app to Express 5.</source>
          <target state="translated">Express 5.0仍处于alpha发布阶段,但这里是对该版本中的变化以及如何将你的Express 4应用迁移到Express 5的预览。</target>
        </trans-unit>
        <trans-unit id="1c079477e7fb1b53626e8efcbd0bf6844793708f" translate="yes" xml:space="preserve">
          <source>Express application generator</source>
          <target state="translated">快速应用生成器</target>
        </trans-unit>
        <trans-unit id="e8236b4029899aba96fb949a3639ae589a00d033" translate="yes" xml:space="preserve">
          <source>Express behind proxies</source>
          <target state="translated">代理人背后的快递</target>
        </trans-unit>
        <trans-unit id="1a1fa9a47485e8344e2b19ca23b1da7c381fb835" translate="yes" xml:space="preserve">
          <source>Express comes with a built-in error handler that takes care of any errors that might be encountered in the app. This default error-handling middleware function is added at the end of the middleware function stack.</source>
          <target state="translated">Express自带一个内置的错误处理程序,可以处理应用中可能遇到的任何错误。这个默认的错误处理中间件函数被添加在中间件函数栈的最后。</target>
        </trans-unit>
        <trans-unit id="1370d4e772b4e288fa3d314852b78e436fafd4b0" translate="yes" xml:space="preserve">
          <source>Express examples</source>
          <target state="translated">快捷的例子</target>
        </trans-unit>
        <trans-unit id="9bdcddec39e37e93db9915e12a5e151bc4ca90e8" translate="yes" xml:space="preserve">
          <source>Express has no notion of a database. This concept is left up to third-party Node modules, allowing you to interface with nearly any database.</source>
          <target state="translated">Express没有数据库的概念。这个概念是留给第三方Node模块的,允许你与几乎所有的数据库接口。</target>
        </trans-unit>
        <trans-unit id="c54a2456daa991b01562a70bb06c154efd81bdfe" translate="yes" xml:space="preserve">
          <source>Express has the following built-in middleware functions:</source>
          <target state="translated">Express有以下内置的中间件功能。</target>
        </trans-unit>
        <trans-unit id="947ec9fdb910970e90d5b4d30f29d2774efe0272" translate="yes" xml:space="preserve">
          <source>Express is a routing and middleware web framework that has minimal functionality of its own: An Express application is essentially a series of middleware function calls.</source>
          <target state="translated">Express是一个路由和中间件的网络框架,它本身的功能很小。一个Express应用程序本质上是一系列的中间件函数调用。</target>
        </trans-unit>
        <trans-unit id="2143e0061636801d688a3573d60a19bc831bfd70" translate="yes" xml:space="preserve">
          <source>Express looks up the files in the order in which you set the static directories with the &lt;code&gt;express.static&lt;/code&gt; middleware function.</source>
          <target state="translated">Express使用 &lt;code&gt;express.static&lt;/code&gt; 中间件功能按设置静态目录的顺序查找文件。</target>
        </trans-unit>
        <trans-unit id="c7c1bc8fd1ab75ca2f3c84e5e43534558919455a" translate="yes" xml:space="preserve">
          <source>Express looks up the files relative to the static directory, so the name of the static directory is not part of the URL.</source>
          <target state="translated">Express查找的文件是相对于静态目录的,所以静态目录的名称不是URL的一部分。</target>
        </trans-unit>
        <trans-unit id="cac2a48b045013479fd1d6ab8616723ca1a65dc0" translate="yes" xml:space="preserve">
          <source>Express supports any template engine that conforms with the &lt;code&gt;(path, locals, callback)&lt;/code&gt; signature. To normalize template engine interfaces and caching, see the &lt;a href=&quot;https://github.com/visionmedia/consolidate.js&quot;&gt;consolidate.js&lt;/a&gt; project for support. Unlisted template engines might still support the Express signature.</source>
          <target state="translated">Express支持符合 &lt;code&gt;(path, locals, callback)&lt;/code&gt; 签名的任何模板引擎。要规范化模板引擎接口和缓存，请参阅&lt;a href=&quot;https://github.com/visionmedia/consolidate.js&quot;&gt;consolidate.js&lt;/a&gt;项目以获得支持。未列出的模板引擎可能仍支持Express签名。</target>
        </trans-unit>
        <trans-unit id="57a7e0b2368e275bea970406ea2ac043737a2054" translate="yes" xml:space="preserve">
          <source>Express supports methods that correspond to all HTTP request methods: &lt;code&gt;get&lt;/code&gt;, &lt;code&gt;post&lt;/code&gt;, and so on. For a full list, see &lt;a href=&quot;../index#app.METHOD&quot;&gt;app.METHOD&lt;/a&gt;.</source>
          <target state="translated">Express支持与所有HTTP请求方法相对应的方法： &lt;code&gt;get&lt;/code&gt; ， &lt;code&gt;post&lt;/code&gt; 等。有关完整列表，请参见&lt;a href=&quot;../index#app.METHOD&quot;&gt;app.METHOD&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="89f5ea3deac416c98c517d536b6580cb1e997c98" translate="yes" xml:space="preserve">
          <source>Express supports the following routing methods corresponding to the HTTP methods of the same names:</source>
          <target state="translated">Express支持以下路由方法,对应于同名的HTTP方法。</target>
        </trans-unit>
        <trans-unit id="cf5dd4560778faa8f909a554dbc6f922d743e0d5" translate="yes" xml:space="preserve">
          <source>Express uses &lt;a href=&quot;https://www.npmjs.com/package/path-to-regexp&quot;&gt;path-to-regexp&lt;/a&gt; for matching the route paths; see the path-to-regexp documentation for all the possibilities in defining route paths. &lt;a href=&quot;http://forbeslindesay.github.io/express-route-tester/&quot;&gt;Express Route Tester&lt;/a&gt; is a handy tool for testing basic Express routes, although it does not support pattern matching.</source>
          <target state="translated">Express使用&lt;a href=&quot;https://www.npmjs.com/package/path-to-regexp&quot;&gt;path-to-regexp&lt;/a&gt;来匹配路由路径；有关定义路由路径的所有可能性，请参阅正则表达式路径文档。&lt;a href=&quot;http://forbeslindesay.github.io/express-route-tester/&quot;&gt;Express Route Tester&lt;/a&gt;虽然不支持模式匹配，但却是用于测试基本Express路由的便捷工具。</target>
        </trans-unit>
        <trans-unit id="7d1f7a0e26837ca8238bcdb411d54630c7101395" translate="yes" xml:space="preserve">
          <source>Express uses the &lt;a href=&quot;https://www.npmjs.com/package/debug&quot;&gt;debug&lt;/a&gt; module internally to log information about route matches, middleware functions that are in use, application mode, and the flow of the request-response cycle.</source>
          <target state="translated">Express在内部使用&lt;a href=&quot;https://www.npmjs.com/package/debug&quot;&gt;调试&lt;/a&gt;模块记录有关路由匹配，正在使用的中间件功能，应用程序模式以及请求-响应周期流的信息。</target>
        </trans-unit>
        <trans-unit id="3f8fa5951568a3821e908ee3f98dc83138ef7063" translate="yes" xml:space="preserve">
          <source>Express-compliant template engines such as Jade and Pug export a function named &lt;code&gt;__express(filePath, options, callback)&lt;/code&gt;, which is called by the &lt;code&gt;res.render()&lt;/code&gt; function to render the template code.</source>
          <target state="translated">兼容Jade和Pug的Express模板引擎导出了一个名为 &lt;code&gt;__express(filePath, options, callback)&lt;/code&gt; &lt;code&gt;res.render()&lt;/code&gt; 函数，由res.render（）函数调用以呈现模板代码。</target>
        </trans-unit>
        <trans-unit id="5267965aa5e51c5d1115f0226abfbc07bc7f50ba" translate="yes" xml:space="preserve">
          <source>Extremely nested query string objects could cause the process to block and make the server unresponsive temporarily.</source>
          <target state="translated">极度嵌套的查询字符串对象可能导致进程阻塞,使服务器暂时无法响应。</target>
        </trans-unit>
        <trans-unit id="03688ba6aa340b87549088aa5739944cb6b1dc73" translate="yes" xml:space="preserve">
          <source>FAQ</source>
          <target state="translated">FAQ</target>
        </trans-unit>
        <trans-unit id="c696b8506c8d090129f6c43ca3106d9d2df675c6" translate="yes" xml:space="preserve">
          <source>File descriptor to write debug output to.</source>
          <target state="translated">写调试输出的文件描述符。</target>
        </trans-unit>
        <trans-unit id="b8f874dbb82312c887de039c46c8f53c2278e19f" translate="yes" xml:space="preserve">
          <source>File: &lt;code&gt;my-middleware.js&lt;/code&gt;</source>
          <target state="translated">文件： &lt;code&gt;my-middleware.js&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="4fc8df7c43555125566f5ee75d9082ab9f82c482" translate="yes" xml:space="preserve">
          <source>Finally, Express apps - like any other web apps - can be vulnerable to a variety of web-based attacks. Familiarize yourself with known &lt;a href=&quot;https://www.owasp.org/index.php/Top_10-2017_Top_10&quot;&gt;web vulnerabilities&lt;/a&gt; and take precautions to avoid them.</source>
          <target state="translated">最后，与其他任何Web应用程序一样，Express应用程序也容易受到各种基于Web的攻击。熟悉已知的&lt;a href=&quot;https://www.owasp.org/index.php/Top_10-2017_Top_10&quot;&gt;网络漏洞，&lt;/a&gt;并采取预防措施来避免它们。</target>
        </trans-unit>
        <trans-unit id="873e51f6528d21aa5b4719691a22f0cfe31d32cd" translate="yes" xml:space="preserve">
          <source>Finally, we&amp;rsquo;ll create a middleware function that validates incoming cookies and sends a 400 response if cookies are invalid.</source>
          <target state="translated">最后，我们将创建一个中间件功能，该功能验证传入的Cookie并在Cookie无效的情况下发送400响应。</target>
        </trans-unit>
        <trans-unit id="f044285af4e5d5f25713fed8bc8b5812321fd97f" translate="yes" xml:space="preserve">
          <source>First create a directory named &lt;code&gt;myapp&lt;/code&gt;, change to it and run &lt;code&gt;npm init&lt;/code&gt;. Then install &lt;code&gt;express&lt;/code&gt; as a dependency, as per the &lt;a href=&quot;installing&quot;&gt;installation guide&lt;/a&gt;.</source>
          <target state="translated">首先创建一个名为 &lt;code&gt;myapp&lt;/code&gt; 的目录，切换到该目录并运行 &lt;code&gt;npm init&lt;/code&gt; 。然后按照&lt;a href=&quot;installing&quot;&gt;安装指南&lt;/a&gt;，将 &lt;code&gt;express&lt;/code&gt; 作为依赖项进行安装。</target>
        </trans-unit>
        <trans-unit id="33170e4f7913a77062d044be1776de2e2a1a0fcf" translate="yes" xml:space="preserve">
          <source>Fixed directory traversal vulnerabilities in &lt;code&gt;express.static&lt;/code&gt; (&lt;a href=&quot;http://nodesecurity.io/advisories/send-directory-traversal&quot;&gt;advisory&lt;/a&gt; , &lt;a href=&quot;http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2014-6394&quot;&gt;CVE-2014-6394&lt;/a&gt;).</source>
          <target state="translated">在固定目录遍历漏洞 &lt;code&gt;express.static&lt;/code&gt; （&lt;a href=&quot;http://nodesecurity.io/advisories/send-directory-traversal&quot;&gt;咨询&lt;/a&gt;，&lt;a href=&quot;http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2014-6394&quot;&gt;CVE-2014-6394&lt;/a&gt;）。</target>
        </trans-unit>
        <trans-unit id="f8778042389a64a175753e1dedfdcd9c25fb3f70" translate="yes" xml:space="preserve">
          <source>Fixed directory traversal vulnerabilities in &lt;code&gt;express.static&lt;/code&gt;.</source>
          <target state="translated">修复 &lt;code&gt;express.static&lt;/code&gt; 中的目录遍历漏洞。</target>
        </trans-unit>
        <trans-unit id="ecca725d626f59ec7358a976f29f270b2735eebe" translate="yes" xml:space="preserve">
          <source>Fixed open redirect vulnerability in &lt;code&gt;express.static&lt;/code&gt; (&lt;a href=&quot;https://nodesecurity.io/advisories/serve-static-open-redirect&quot;&gt;advisory&lt;/a&gt;, &lt;a href=&quot;http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2015-1164&quot;&gt;CVE-2015-1164&lt;/a&gt;).</source>
          <target state="translated">在固定开放重定向漏洞 &lt;code&gt;express.static&lt;/code&gt; （&lt;a href=&quot;https://nodesecurity.io/advisories/serve-static-open-redirect&quot;&gt;咨询&lt;/a&gt;，&lt;a href=&quot;http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2015-1164&quot;&gt;CVE-2015至1164年&lt;/a&gt;）。</target>
        </trans-unit>
        <trans-unit id="96f7d71e633082a9f96dcfafd2f5bb7d76dc44ad" translate="yes" xml:space="preserve">
          <source>Fixed root path disclosure vulnerability in &lt;code&gt;express.static&lt;/code&gt;, &lt;code&gt;res.sendfile&lt;/code&gt;, and &lt;code&gt;res.sendFile&lt;/code&gt;</source>
          <target state="translated">修复了 &lt;code&gt;express.static&lt;/code&gt; ， &lt;code&gt;res.sendfile&lt;/code&gt; 和 &lt;code&gt;res.sendFile&lt;/code&gt; 中的根路径泄露漏洞</target>
        </trans-unit>
        <trans-unit id="2165917db51662b2b01caf405e9f6f8b3c2fd935" translate="yes" xml:space="preserve">
          <source>Flags the cookie to be accessible only by the web server.</source>
          <target state="translated">将cookie标记为只能由Web服务器访问。</target>
        </trans-unit>
        <trans-unit id="bd3cee274803bfd1580197733b062aa046d4b915" translate="yes" xml:space="preserve">
          <source>Following are some examples of using the &lt;a href=&quot;http://expressjs.com/guide/using-middleware.html#middleware.built-in&quot;&gt;express.static&lt;/a&gt; middleware in an Express app.</source>
          <target state="translated">以下是在Express应用程序中使用&lt;a href=&quot;http://expressjs.com/guide/using-middleware.html#middleware.built-in&quot;&gt;express.static&lt;/a&gt;中间件的一些示例。</target>
        </trans-unit>
        <trans-unit id="815713da0a3b88e4b726d1635e7f5bf066d5eec3" translate="yes" xml:space="preserve">
          <source>Following is an example of overriding the behavior of &lt;a href=&quot;http://expressjs.com/index.html#res.sendStatus&quot;&gt;res.sendStatus&lt;/a&gt;.</source>
          <target state="translated">以下是重写&lt;a href=&quot;http://expressjs.com/index.html#res.sendStatus&quot;&gt;res.sendStatus&lt;/a&gt;行为的示例。</target>
        </trans-unit>
        <trans-unit id="d8a3a896b0a54915e23a5dfe2c2ca9f71ccda0f6" translate="yes" xml:space="preserve">
          <source>For a feature-by-feature comparison of the three process managers, see &lt;a href=&quot;http://strong-pm.io/compare/&quot;&gt;http://strong-pm.io/compare/&lt;/a&gt;. For a more detailed introduction to all three, see &lt;a href=&quot;pm&quot;&gt;Process managers for Express apps&lt;/a&gt;.</source>
          <target state="translated">有关三个流程管理器的逐项功能比较，请参见&lt;a href=&quot;http://strong-pm.io/compare/&quot;&gt;http://strong-pm.io/compare/&lt;/a&gt;。有关这三个的更详细的介绍，请参阅&lt;a href=&quot;pm&quot;&gt;Express应用程序的流程管理器&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="ea0e9e8a4a46180846d953160ce0b6e02849a2ef" translate="yes" xml:space="preserve">
          <source>For a high-traffic website in production, the best way to put compression in place is to implement it at a reverse proxy level (see &lt;a href=&quot;#use-a-reverse-proxy&quot;&gt;Use a reverse proxy&lt;/a&gt;). In that case, you do not need to use compression middleware. For details on enabling gzip compression in Nginx, see &lt;a href=&quot;http://nginx.org/en/docs/http/ngx_http_gzip_module.html&quot;&gt;Module ngx_http_gzip_module&lt;/a&gt; in the Nginx documentation.</source>
          <target state="translated">对于生产中流量较高的网站，进行压缩的最佳方法是在反向代理级别实现它（请参阅&lt;a href=&quot;#use-a-reverse-proxy&quot;&gt;使用反向代理&lt;/a&gt;）。在这种情况下，您无需使用压缩中间件。有关在Nginx中启用gzip压缩的详细信息，请参见Nginx文档中的&lt;a href=&quot;http://nginx.org/en/docs/http/ngx_http_gzip_module.html&quot;&gt;ngx_http_gzip_module模块&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="107fff1e09504008be83aec1828f0ec496feaa84" translate="yes" xml:space="preserve">
          <source>For a partial list of third-party middleware functions that are commonly used with Express, see: &lt;a href=&quot;http://expressjs.com/en/resources/middleware.html&quot;&gt;Third-party middleware&lt;/a&gt;.</source>
          <target state="translated">有关Express常用的第三方中间件功能的部分列表，请参阅：&lt;a href=&quot;http://expressjs.com/en/resources/middleware.html&quot;&gt;第三方中间件&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="cbbdf002b27958f16a729ae5eb64cafa37e57cab" translate="yes" xml:space="preserve">
          <source>For app activity</source>
          <target state="translated">对于应用程序的活动</target>
        </trans-unit>
        <trans-unit id="890686791677a9a0f957638386e7f11c81ed3e1f" translate="yes" xml:space="preserve">
          <source>For debugging</source>
          <target state="translated">用于调试</target>
        </trans-unit>
        <trans-unit id="ea926f410da4309da4f060ad6afbcaed89c267c7" translate="yes" xml:space="preserve">
          <source>For details about error-handling middleware, see: &lt;a href=&quot;error-handling&quot;&gt;Error handling&lt;/a&gt;.</source>
          <target state="translated">有关错误处理中间件的详细信息，请参见：&lt;a href=&quot;error-handling&quot;&gt;错误处理&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="6e33b48001bf34b562926843b0490a86ef43723e" translate="yes" xml:space="preserve">
          <source>For details, see &lt;a href=&quot;index#app.settings.table&quot;&gt;Application settings&lt;/a&gt;.</source>
          <target state="translated">有关详细信息，请参阅&amp;ldquo; &lt;a href=&quot;index#app.settings.table&quot;&gt;应用程序设置&amp;rdquo;&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="351c75e79ef91927a7aa6bd431571191ecd86272" translate="yes" xml:space="preserve">
          <source>For earlier Node versions, install the application generator as a global npm package and then launch it.</source>
          <target state="translated">对于早期的Node版本,将应用程序生成器安装为全局npm包,然后启动它。</target>
        </trans-unit>
        <trans-unit id="b242df6a0fe5ef3fe38301fdd07f54d2e6660508" translate="yes" xml:space="preserve">
          <source>For errors returned from asynchronous functions invoked by route handlers and middleware, you must pass them to the &lt;code&gt;next()&lt;/code&gt; function, where Express will catch and process them. For example:</source>
          <target state="translated">对于由路由处理程序和中间件调用的异步函数返回的错误，必须将它们传递给 &lt;code&gt;next()&lt;/code&gt; 函数，Express将在其中捕获并处理它们。例如：</target>
        </trans-unit>
        <trans-unit id="41b45a58292e15215ca0202da4732d883b26b833" translate="yes" xml:space="preserve">
          <source>For example, assuming you&amp;rsquo;ve deployed your app to prod.foo.com and StrongLoop PM is listening on port 8701 (the default), then to set the cluster size to eight using slc:</source>
          <target state="translated">例如，假设您已将应用程序部署到prod.foo.com，并且StrongLoop PM正在监听端口8701（默认值），然后使用slc将群集大小设置为8：</target>
        </trans-unit>
        <trans-unit id="3a18ceb5befff444757a76a5705ec118c5988293" translate="yes" xml:space="preserve">
          <source>For example, create a router file named &lt;code&gt;birds.js&lt;/code&gt; in the app directory, with the following content:</source>
          <target state="translated">例如，在app目录中创建一个名为 &lt;code&gt;birds.js&lt;/code&gt; 的路由器文件，其内容如下：</target>
        </trans-unit>
        <trans-unit id="0eb8d5095d437aa73f505cfb169e4a626d7b794b" translate="yes" xml:space="preserve">
          <source>For example, if &lt;code&gt;X-Forwarded-For&lt;/code&gt; is &lt;code&gt;client, proxy1, proxy2&lt;/code&gt;, &lt;code&gt;req.ips&lt;/code&gt; would be &lt;code&gt;[&quot;client&quot;, &quot;proxy1&quot;, &quot;proxy2&quot;]&lt;/code&gt;, where &lt;code&gt;proxy2&lt;/code&gt; is the furthest downstream.</source>
          <target state="translated">例如，如果 &lt;code&gt;X-Forwarded-For&lt;/code&gt; 是 &lt;code&gt;client, proxy1, proxy2&lt;/code&gt; ，则 &lt;code&gt;req.ips&lt;/code&gt; 将是 &lt;code&gt;[&quot;client&quot;, &quot;proxy1&quot;, &quot;proxy2&quot;]&lt;/code&gt; ，其中 &lt;code&gt;proxy2&lt;/code&gt; 是最远的下游。</target>
        </trans-unit>
        <trans-unit id="1c3a405891fc53eb4879e096e2ca9705b3d911a0" translate="yes" xml:space="preserve">
          <source>For example, if you generated the app with &lt;code&gt;$ express sample-app&lt;/code&gt;, you can enable the debug statements with the following command:</source>
          <target state="translated">例如，如果使用 &lt;code&gt;$ express sample-app&lt;/code&gt; 生成了应用程序，则可以使用以下命令启用调试语句：</target>
        </trans-unit>
        <trans-unit id="e9923e3ae4792b863970bd40ecff98f41d0af593" translate="yes" xml:space="preserve">
          <source>For example, the following call:</source>
          <target state="translated">例如,下面的呼叫。</target>
        </trans-unit>
        <trans-unit id="c6fa00698917ac2a9c231d826dc453eb57a6fd9b" translate="yes" xml:space="preserve">
          <source>For example, the following creates an Express app named &lt;em&gt;myapp&lt;/em&gt;. The app will be created in a folder named &lt;em&gt;myapp&lt;/em&gt; in the current working directory and the view engine will be set to &lt;a href=&quot;https://pugjs.org/&quot;&gt;Pug&lt;/a&gt;:</source>
          <target state="translated">例如，以下创建了一个名为&lt;em&gt;myapp&lt;/em&gt;的Express应用程序。该应用程序将在当前工作目录的名为&lt;em&gt;myapp&lt;/em&gt;的文件夹中创建，并且视图引擎将设置为&lt;a href=&quot;https://pugjs.org/&quot;&gt;Pug&lt;/a&gt;：</target>
        </trans-unit>
        <trans-unit id="770868dbfe20cfff7b14c286d2d604c868f3eeac" translate="yes" xml:space="preserve">
          <source>For example, this middleware function will be executed for &lt;em&gt;every&lt;/em&gt; request to the app:</source>
          <target state="translated">例如，此中间件功能将针对对应用程序的&lt;em&gt;每个&lt;/em&gt;请求执行：</target>
        </trans-unit>
        <trans-unit id="d26010a3cd600c1570d3dfe9a847aac7263bd127" translate="yes" xml:space="preserve">
          <source>For example, to map the EJS template engine to &amp;ldquo;.html&amp;rdquo; files:</source>
          <target state="translated">例如，要将EJS模板引擎映射到&amp;ldquo; .html&amp;rdquo;文件：</target>
        </trans-unit>
        <trans-unit id="05abdda4e81b1b2eb8d6240ac991191aa63bdaa4" translate="yes" xml:space="preserve">
          <source>For example, use the following code to serve images, CSS files, and JavaScript files in a directory named &lt;code&gt;public&lt;/code&gt;:</source>
          <target state="translated">例如，使用以下代码在名为 &lt;code&gt;public&lt;/code&gt; 的目录中提供图像，CSS文件和JavaScript文件：</target>
        </trans-unit>
        <trans-unit id="02fd5814da2cf119d4770e29aef01110d485c55e" translate="yes" xml:space="preserve">
          <source>For example, when &lt;code&gt;:user&lt;/code&gt; is present in a route path, you may map user loading logic to automatically provide &lt;code&gt;req.user&lt;/code&gt; to the route, or perform validations on the parameter input.</source>
          <target state="translated">例如，当 &lt;code&gt;:user&lt;/code&gt; 存在于路径路径中时，您可以映射用户加载逻辑以自动将 &lt;code&gt;req.user&lt;/code&gt; 提供给路径，或对参数输入执行验证。</target>
        </trans-unit>
        <trans-unit id="059c3e8cce263b2945a18ac90b2637e10a8026b1" translate="yes" xml:space="preserve">
          <source>For example:</source>
          <target state="translated">例如:</target>
        </trans-unit>
        <trans-unit id="ae59db9ec11e287a117f93804341ebb0ceb1bf09" translate="yes" xml:space="preserve">
          <source>For examples, see &lt;a href=&quot;#middleware-callback-function-examples&quot;&gt;Middleware callback function examples&lt;/a&gt;.</source>
          <target state="translated">有关示例，请参见&lt;a href=&quot;#middleware-callback-function-examples&quot;&gt;Middleware回调函数示例&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="923d53cdb06c427521d5fadcb04556d1ec4e7c21" translate="yes" xml:space="preserve">
          <source>For examples, see &lt;a href=&quot;#path-examples&quot;&gt;Path examples&lt;/a&gt;.</source>
          <target state="translated">有关示例，请参见&lt;a href=&quot;#path-examples&quot;&gt;路径示例&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="4e92672e012e5693967c60f51abb202d8f5384b0" translate="yes" xml:space="preserve">
          <source>For more details about routing, see the &lt;a href=&quot;../guide/routing&quot;&gt;routing guide&lt;/a&gt;.</source>
          <target state="translated">有关路由的更多详细信息，请参见&lt;a href=&quot;../guide/routing&quot;&gt;路由指南&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="cb05a7214778709f81fb690e9792e2c8c9a1d914" translate="yes" xml:space="preserve">
          <source>For more details about the &lt;code&gt;serve-static&lt;/code&gt; function and its options, see &lt;a href=&quot;http://expressjs.com/en/resources/middleware/serve-static.html&quot;&gt;serve-static&lt;/a&gt;.</source>
          <target state="translated">有关 &lt;code&gt;serve-static&lt;/code&gt; 函数及其选项的更多详细信息，请参见&lt;a href=&quot;http://expressjs.com/en/resources/middleware/serve-static.html&quot;&gt;serve-static&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="851b9bcd5ef984d3fed37d6579e2eedeb36d6d3e" translate="yes" xml:space="preserve">
          <source>For more details about the &lt;code&gt;serve-static&lt;/code&gt; function and its options, see &lt;a href=&quot;http://expressjs.com/resources/middleware/serve-static.html&quot;&gt;serve-static&lt;/a&gt;.</source>
          <target state="translated">有关 &lt;code&gt;serve-static&lt;/code&gt; 函数及其选项的更多详细信息，请参见&lt;a href=&quot;http://expressjs.com/resources/middleware/serve-static.html&quot;&gt;serve-static&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="7ed53ffddacc7965cbe9983b5c8bcb3af321cd5a" translate="yes" xml:space="preserve">
          <source>For more information about &lt;code&gt;debug&lt;/code&gt;, see the &lt;a href=&quot;https://www.npmjs.com/package/debug&quot;&gt;debug&lt;/a&gt;.</source>
          <target state="translated">有关 &lt;code&gt;debug&lt;/code&gt; 的更多信息，请参见&lt;a href=&quot;https://www.npmjs.com/package/debug&quot;&gt;debug&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="e8b924f6ac0c779b8d832e11a364fb3a985f95e8" translate="yes" xml:space="preserve">
          <source>For more information about Express middleware, see: &lt;a href=&quot;using-middleware&quot;&gt;Using Express middleware&lt;/a&gt;.</source>
          <target state="translated">有关Express中间件的更多信息，请参见：&lt;a href=&quot;using-middleware&quot;&gt;使用Express中间件&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="7da2688b0dc4efb6bd13ddb724c64cbe5338d59d" translate="yes" xml:space="preserve">
          <source>For more information about error-handling by using promises, see &lt;a href=&quot;https://strongloop.com/strongblog/promises-in-node-js-with-q-an-alternative-to-callbacks/&quot;&gt;Promises in Node.js with Q &amp;ndash; An Alternative to Callbacks&lt;/a&gt;.</source>
          <target state="translated">有关使用Promise处理错误的更多信息，请参阅&lt;a href=&quot;https://strongloop.com/strongblog/promises-in-node-js-with-q-an-alternative-to-callbacks/&quot;&gt;带有Q的Node.js中的Promises-回调的替代方法&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="83aa465bc71b9fb1170a0b299cccedeefc9397e7" translate="yes" xml:space="preserve">
          <source>For more information on Upstart, see &lt;a href=&quot;http://upstart.ubuntu.com/cookbook&quot;&gt;Upstart Intro, Cookbook and Best Practises&lt;/a&gt;.</source>
          <target state="translated">有关Upstart的更多信息，请参阅&lt;a href=&quot;http://upstart.ubuntu.com/cookbook&quot;&gt;Upstart简介，食谱和最佳实践&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="2e5234d505aa344c642297fbe8145633929012b1" translate="yes" xml:space="preserve">
          <source>For more information on clustering with PM2, see &lt;a href=&quot;https://pm2.keymetrics.io/docs/usage/cluster-mode/&quot;&gt;Cluster Mode&lt;/a&gt; in the PM2 documentation.</source>
          <target state="translated">有关使用PM2进行集群的更多信息，请参阅PM2文档中的&lt;a href=&quot;https://pm2.keymetrics.io/docs/usage/cluster-mode/&quot;&gt;集群模式&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="20d405b8d5ba09a61b63170793e30c9d980914d8" translate="yes" xml:space="preserve">
          <source>For more information on clustering with StrongLoop PM, see &lt;a href=&quot;https://docs.strongloop.com/display/SLC/Clustering&quot;&gt;Clustering&lt;/a&gt; in StrongLoop documentation.</source>
          <target state="translated">有关使用StrongLoop PM进行群集的更多信息，请参见StrongLoop文档中的&lt;a href=&quot;https://docs.strongloop.com/display/SLC/Clustering&quot;&gt;群集&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="f2fe2e442f3b9b203eacf3e272f19953e3a063ae" translate="yes" xml:space="preserve">
          <source>For more information on routing, see the &lt;a href=&quot;http://expressjs.com/guide/routing.html&quot;&gt;routing guide&lt;/a&gt;.</source>
          <target state="translated">有关路由的更多信息，请参见&lt;a href=&quot;http://expressjs.com/guide/routing.html&quot;&gt;路由指南&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="e68e46fd31a4361db6126c11d17f40c667a4e5a8" translate="yes" xml:space="preserve">
          <source>For more information on systemd, see the &lt;a href=&quot;http://www.freedesktop.org/software/systemd/man/systemd.unit.html&quot;&gt;systemd reference (man page)&lt;/a&gt;.</source>
          <target state="translated">有关systemd的更多信息，请参见&lt;a href=&quot;http://www.freedesktop.org/software/systemd/man/systemd.unit.html&quot;&gt;systemd参考（手册页）&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="e6242f401a0d033d8cbcd0e2c2bb56c183f77347" translate="yes" xml:space="preserve">
          <source>For more information, issues, or concerns, see &lt;a href=&quot;https://github.com/expressjs/cookie-parser&quot;&gt;cookie-parser&lt;/a&gt;.</source>
          <target state="translated">有关更多信息，问题或疑虑，请参阅&lt;a href=&quot;https://github.com/expressjs/cookie-parser&quot;&gt;cookie-parser&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="04237f3e7ea883360229ee1da075678a34d9eb99" translate="yes" xml:space="preserve">
          <source>For more information, issues, or concerns, see &lt;a href=&quot;https://github.com/jshttp/fresh&quot;&gt;fresh&lt;/a&gt;.</source>
          <target state="translated">欲了解更多信息，问题或疑虑，看&lt;a href=&quot;https://github.com/jshttp/fresh&quot;&gt;新鲜&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="9a279de21935971fc0b25a2b82c15f3a1a3116df" translate="yes" xml:space="preserve">
          <source>For more information, or if you have issues or concerns, see &lt;a href=&quot;https://github.com/expressjs/accepts&quot;&gt;accepts&lt;/a&gt;.</source>
          <target state="translated">有关更多信息，或者您有任何问题或疑虑，请参见&lt;a href=&quot;https://github.com/expressjs/accepts&quot;&gt;接受&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="24e630174a81f1034c5408baccd5fb379d48816d" translate="yes" xml:space="preserve">
          <source>For more information, or if you have issues or concerns, see &lt;a href=&quot;https://github.com/expressjs/type-is&quot;&gt;type-is&lt;/a&gt;.</source>
          <target state="translated">有关更多信息，或者如果您有任何问题或疑虑，请参阅&lt;a href=&quot;https://github.com/expressjs/type-is&quot;&gt;type-is&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="e0f55de4ccaf166572f024e516e7c09546e17b99" translate="yes" xml:space="preserve">
          <source>For more information, or if you have issues or concerns, see &lt;a href=&quot;https://github.com/pillarjs/send&quot;&gt;send&lt;/a&gt;.</source>
          <target state="translated">有关更多信息，或者如果您有任何问题或疑虑，请参阅&lt;a href=&quot;https://github.com/pillarjs/send&quot;&gt;发送&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="f8f5a96010dd8090a6fcc5e0c8660915535bc22f" translate="yes" xml:space="preserve">
          <source>For more information, see &lt;a href=&quot;#router&quot;&gt;Router&lt;/a&gt;.</source>
          <target state="translated">有关更多信息，请参见&lt;a href=&quot;#router&quot;&gt;Router&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="ee805cde1cf95d631d776598f1443476ac3eb561" translate="yes" xml:space="preserve">
          <source>For more information, see &lt;a href=&quot;../guide/error-handling&quot;&gt;Error handling&lt;/a&gt;.</source>
          <target state="translated">有关更多信息，请参见&lt;a href=&quot;../guide/error-handling&quot;&gt;错误处理&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="c7345e9b46a715df23054d17930acaca8621afee" translate="yes" xml:space="preserve">
          <source>For more information, see &lt;a href=&quot;../guide/using-template-engines&quot;&gt;Using template engines with Express&lt;/a&gt;.</source>
          <target state="translated">有关更多信息，请参阅&lt;a href=&quot;../guide/using-template-engines&quot;&gt;将模板引擎与Express结合使用&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="92247c8391742ab87f38c920c145f2b7e3cefb19" translate="yes" xml:space="preserve">
          <source>For more information, see &lt;a href=&quot;http://expressjs.com/guide/using-template-engines.html&quot;&gt;Using template engines with Express&lt;/a&gt;.</source>
          <target state="translated">有关更多信息，请参阅&lt;a href=&quot;http://expressjs.com/guide/using-template-engines.html&quot;&gt;将模板引擎与Express结合使用&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="b35260c8fd3567739c2567438afd84eb4156db28" translate="yes" xml:space="preserve">
          <source>For more information, see &lt;a href=&quot;http://expressjs.com/starter/static-files.html&quot;&gt;Serving static files in Express&lt;/a&gt;. and &lt;a href=&quot;guide/using-middleware#middleware.built-in&quot;&gt;Using middleware - Built-in middleware&lt;/a&gt;.</source>
          <target state="translated">有关更多信息，请参见&lt;a href=&quot;http://expressjs.com/starter/static-files.html&quot;&gt;在Express中提供静态文件&lt;/a&gt;。和&lt;a href=&quot;guide/using-middleware#middleware.built-in&quot;&gt;使用中间件-内置中间件&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="7271ad962ac79494079eccb3689910bfac87a7ba" translate="yes" xml:space="preserve">
          <source>For more information, see &lt;a href=&quot;http://strong-pm.io/&quot;&gt;http://strong-pm.io/&lt;/a&gt;.</source>
          <target state="translated">有关更多信息，请参见&lt;a href=&quot;http://strong-pm.io/&quot;&gt;http://strong-pm.io/&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="7410b77fc2c5a20b86e1fd2b9bf49e5a2891462c" translate="yes" xml:space="preserve">
          <source>For more information, see &lt;a href=&quot;https://coreos.com/os/docs/latest/using-environment-variables-in-systemd-units.html&quot;&gt;Using Environment Variables In systemd Units&lt;/a&gt;.</source>
          <target state="translated">有关更多信息，请参见&lt;a href=&quot;https://coreos.com/os/docs/latest/using-environment-variables-in-systemd-units.html&quot;&gt;在系统单位中使用环境变量&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="47a00568c6e2e980e9ba9bfc0ad2aaf022567398" translate="yes" xml:space="preserve">
          <source>For more information, see &lt;a href=&quot;https://docs.strongloop.com/display/SLC/Setting+up+a+production+host#Settingupaproductionhost-RHEL7+,Ubuntu15.04or15.10&quot;&gt;Setting up a production host (StrongLoop documentation)&lt;/a&gt;.</source>
          <target state="translated">有关更多信息，请参见&lt;a href=&quot;https://docs.strongloop.com/display/SLC/Setting+up+a+production+host#Settingupaproductionhost-RHEL7+,Ubuntu15.04or15.10&quot;&gt;设置生产主机（StrongLoop文档）&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="8cba8680f31f438e197a40c17b26bb168cda7363" translate="yes" xml:space="preserve">
          <source>For more information, see &lt;a href=&quot;https://github.com/Unitech/pm2&quot;&gt;https://github.com/Unitech/pm2&lt;/a&gt;.</source>
          <target state="translated">有关更多信息，请参见&lt;a href=&quot;https://github.com/Unitech/pm2&quot;&gt;https://github.com/Unitech/pm2&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="1d4905f91bcd6ba74d96e4be4ca1544961dd470e" translate="yes" xml:space="preserve">
          <source>For more information, see &lt;a href=&quot;https://github.com/foreverjs/forever&quot;&gt;https://github.com/foreverjs/forever&lt;/a&gt;.</source>
          <target state="translated">有关更多信息，请参见&lt;a href=&quot;https://github.com/foreverjs/forever&quot;&gt;https://github.com/foreverjs/forever&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="60cedf67661df057f1467b732cbe873383458691" translate="yes" xml:space="preserve">
          <source>For more information, see the &lt;a href=&quot;http://expressjs.com/guide/routing.html&quot;&gt;routing guide&lt;/a&gt;.</source>
          <target state="translated">有关更多信息，请参阅&lt;a href=&quot;http://expressjs.com/guide/routing.html&quot;&gt;路由指南&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="c80fa6cc7e9d3396c7e6c8af834b7d306d877896" translate="yes" xml:space="preserve">
          <source>For more information, see the &lt;a href=&quot;http://upstart.ubuntu.com/cookbook/#environment-variables&quot;&gt;Upstart Intro, Cookbook and Best Practices&lt;/a&gt;.</source>
          <target state="translated">有关更多信息，请参见&lt;a href=&quot;http://upstart.ubuntu.com/cookbook/#environment-variables&quot;&gt;Upstart简介，菜谱和最佳实践&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="36c8bd9186b85eb2e772132202f44908152f3ba6" translate="yes" xml:space="preserve">
          <source>For more on the fundamentals of error handling, see:</source>
          <target state="translated">关于错误处理的基本原理,请看。</target>
        </trans-unit>
        <trans-unit id="a465342a7d718effd2000910f5a4118c0e8dfe39" translate="yes" xml:space="preserve">
          <source>For organizational (and higher-level framework) purposes, you can define several error-handling middleware functions, much as you would with regular middleware functions. For example, to define an error-handler for requests made by using &lt;code&gt;XHR&lt;/code&gt; and those without:</source>
          <target state="translated">为了组织（和更高级别的框架）的目的，您可以定义几个错误处理中间件功能，就像使用常规中间件功能一样。例如，为使用 &lt;code&gt;XHR&lt;/code&gt; 和不使用XHR的请求定义错误处理程序：</target>
        </trans-unit>
        <trans-unit id="d39acc8a0649e7b14f420422e8fac72b243870ed" translate="yes" xml:space="preserve">
          <source>For this option, specify a function to set custom response headers. Alterations to the headers must occur synchronously.</source>
          <target state="translated">对于这个选项,指定一个函数来设置自定义响应头。对标题的修改必须同步进行。</target>
        </trans-unit>
        <trans-unit id="2502483d832cd812cb8342e1e9630c3fc9b01539" translate="yes" xml:space="preserve">
          <source>Forever</source>
          <target state="translated">Forever</target>
        </trans-unit>
        <trans-unit id="dcf5ef8cc9a491fcb763a2ac5d0048282126959d" translate="yes" xml:space="preserve">
          <source>Forever has many more options, and it also provides a programmatic API.</source>
          <target state="translated">Forever有更多的选择,它还提供了一个程序化的API。</target>
        </trans-unit>
        <trans-unit id="486b0ab7ef9f56d764bcfa4c8e6a3f17b20a1b8f" translate="yes" xml:space="preserve">
          <source>Forever is a simple command-line interface tool for ensuring that a given script runs continuously (forever). Forever&amp;rsquo;s simple interface makes it ideal for running smaller deployments of Node.js apps and scripts.</source>
          <target state="translated">Forever是一个简单的命令行界面工具，用于确保给定脚本连续（永久）运行。Forever的简单界面使其非常适合运行Node.js应用程序和脚本的较小部署。</target>
        </trans-unit>
        <trans-unit id="4b37d52e38be107d44edec47bb2ad2b0fcdfb343" translate="yes" xml:space="preserve">
          <source>Full documentation:</source>
          <target state="translated">文件齐全。</target>
        </trans-unit>
        <trans-unit id="f1e410ad1472b42cb42cc98962428637290b6706" translate="yes" xml:space="preserve">
          <source>Function</source>
          <target state="translated">Function</target>
        </trans-unit>
        <trans-unit id="b3fc9aa85f301e677097caf7b0af2568ecf7421e" translate="yes" xml:space="preserve">
          <source>Function for setting HTTP headers to serve with the file.</source>
          <target state="translated">功能用于设置HTTP头文件。</target>
        </trans-unit>
        <trans-unit id="22c55d1312d4259a34a1930c72c6ea5e6c801b3e" translate="yes" xml:space="preserve">
          <source>Functionality is now limited to setting the basic cookie value. Use &lt;code&gt;res.cookie()&lt;/code&gt; for added functionality.</source>
          <target state="translated">现在，功能仅限于设置基本Cookie值。使用 &lt;code&gt;res.cookie()&lt;/code&gt; 获得更多功能。</target>
        </trans-unit>
        <trans-unit id="1f00c3fc5546a8076b31068f91f62eca9987ea4e" translate="yes" xml:space="preserve">
          <source>Further details for how cache validation works can be found in the &lt;a href=&quot;https://tools.ietf.org/html/rfc7234&quot;&gt;HTTP/1.1 Caching Specification&lt;/a&gt;.</source>
          <target state="translated">有关缓存验证工作原理的更多详细信息，请参见&lt;a href=&quot;https://tools.ietf.org/html/rfc7234&quot;&gt;HTTP / 1.1缓存规范&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="e65db94506fadbfe9efb5048e52597202c8babd1" translate="yes" xml:space="preserve">
          <source>Gain insights into runtime performance and resource consumption.</source>
          <target state="translated">深入了解运行时性能和资源消耗情况。</target>
        </trans-unit>
        <trans-unit id="c84736cc9e45c60a93f696fb821192dfb5a37470" translate="yes" xml:space="preserve">
          <source>Generate less verbose error messages.</source>
          <target state="translated">生成不那么啰嗦的错误信息。</target>
        </trans-unit>
        <trans-unit id="76e7a3a3f9c225fe820ba7e9cff10ea2a73b79a1" translate="yes" xml:space="preserve">
          <source>Getting started</source>
          <target state="translated">开始</target>
        </trans-unit>
        <trans-unit id="8ef85cc7a7c6444cb46bd7b35e8249c9ee990a3c" translate="yes" xml:space="preserve">
          <source>Graceful shutdown</source>
          <target state="translated">优雅的关闭</target>
        </trans-unit>
        <trans-unit id="bf073fae640ded81eeb7a4cee70faff4a623c16c" translate="yes" xml:space="preserve">
          <source>Guide</source>
          <target state="translated">Guide</target>
        </trans-unit>
        <trans-unit id="07bfe8b3304d8367ba7334927f2af3a42ccbb6f9" translate="yes" xml:space="preserve">
          <source>Gzip compressing can greatly decrease the size of the response body and hence increase the speed of a web app. Use the &lt;a href=&quot;https://www.npmjs.com/package/compression&quot;&gt;compression&lt;/a&gt; middleware for gzip compression in your Express app. For example:</source>
          <target state="translated">Gzip压缩可以大大减小响应主体的大小，从而提高Web应用程序的速度。在Express应用程序中使用&lt;a href=&quot;https://www.npmjs.com/package/compression&quot;&gt;压缩&lt;/a&gt;中间件进行gzip压缩。例如：</target>
        </trans-unit>
        <trans-unit id="75001e7f0d5e62d027fba5485030ff95a08ba5d1" translate="yes" xml:space="preserve">
          <source>HTTP &lt;a href=&quot;../index#req&quot;&gt;request&lt;/a&gt; argument to the middleware function, called &quot;req&quot; by convention.</source>
          <target state="translated">中间件功能的HTTP &lt;a href=&quot;../index#req&quot;&gt;请求&lt;/a&gt;参数，按照惯例称为&amp;ldquo; req&amp;rdquo;。</target>
        </trans-unit>
        <trans-unit id="89bbaa2ca865d86eecc63870dec97b0530cdf51b" translate="yes" xml:space="preserve">
          <source>HTTP &lt;a href=&quot;../index#res&quot;&gt;response&lt;/a&gt; argument to the middleware function, called &quot;res&quot; by convention.</source>
          <target state="translated">中间件函数的HTTP &lt;a href=&quot;../index#res&quot;&gt;响应&lt;/a&gt;参数，按照惯例称为&amp;ldquo; res&amp;rdquo;。</target>
        </trans-unit>
        <trans-unit id="b9fdbb72ba1161e80c277e071a6b1ffaad455c29" translate="yes" xml:space="preserve">
          <source>HTTP method for which the middleware function applies.</source>
          <target state="translated">适用于中间件功能的HTTP方法。</target>
        </trans-unit>
        <trans-unit id="d3f69543d7eb8323f92fefc9e2dfc9d34b08a951" translate="yes" xml:space="preserve">
          <source>Handing over tasks that do not require knowledge of application state to a reverse proxy frees up Express to perform specialized application tasks. For this reason, it is recommended to run Express behind a reverse proxy like &lt;a href=&quot;https://www.nginx.com/&quot;&gt;Nginx&lt;/a&gt; or &lt;a href=&quot;http://www.haproxy.org/&quot;&gt;HAProxy&lt;/a&gt; in production.</source>
          <target state="translated">将不需要了解应用程序状态的任务移交给反向代理可以释放Express来执行专门的应用程序任务。因此，建议在生产环境中在诸如&lt;a href=&quot;https://www.nginx.com/&quot;&gt;Nginx&lt;/a&gt;或&lt;a href=&quot;http://www.haproxy.org/&quot;&gt;HAProxy&lt;/a&gt;的反向代理后面运行Express 。</target>
        </trans-unit>
        <trans-unit id="23d638c85f93da70aec51e09294273a48bacf39c" translate="yes" xml:space="preserve">
          <source>Handle exceptions properly</source>
          <target state="translated">妥善处理异常情况</target>
        </trans-unit>
        <trans-unit id="a2c1adcb564bc12136b48171a19dc887945a7536" translate="yes" xml:space="preserve">
          <source>Health Checks and Graceful Shutdown</source>
          <target state="translated">健康检查和优雅的关闭</target>
        </trans-unit>
        <trans-unit id="87398e24ea58e8cafa77352da02409bcf395978d" translate="yes" xml:space="preserve">
          <source>Health checks</source>
          <target state="translated">健康检查</target>
        </trans-unit>
        <trans-unit id="cf41eac7b471300e445d18307ee85ea1edba1a1b" translate="yes" xml:space="preserve">
          <source>Hello world example</source>
          <target state="translated">你好,世界的例子</target>
        </trans-unit>
        <trans-unit id="edd56ca85d75a122309281df34044efea68dc2cd" translate="yes" xml:space="preserve">
          <source>Helmet is actually just a collection of nine smaller middleware functions that set security-related HTTP headers:</source>
          <target state="translated">Helmet其实只是九个较小的中间件函数的集合,这些函数可以设置与安全相关的HTTP头文件。</target>
        </trans-unit>
        <trans-unit id="e5d489a8ddc8ce37b15c28d02e498d31d198cacf" translate="yes" xml:space="preserve">
          <source>Helmet is actually just a collection of smaller middleware functions that set security-related HTTP response headers:</source>
          <target state="translated">Helmet其实只是一个较小的中间件函数的集合,它可以设置安全相关的HTTP响应头。</target>
        </trans-unit>
        <trans-unit id="9a6bb045d2e4c4eca6977cdb8aaffc48157ebece" translate="yes" xml:space="preserve">
          <source>Here are some examples of route paths based on string patterns.</source>
          <target state="translated">下面是一些基于字符串模式的途径路径的例子。</target>
        </trans-unit>
        <trans-unit id="fd76d4add41cb79fef0581b21f2a1ebaaeee501b" translate="yes" xml:space="preserve">
          <source>Here are some examples of route paths based on strings.</source>
          <target state="translated">下面是一些基于字符串的途径路径的例子。</target>
        </trans-unit>
        <trans-unit id="fd8c766e2d9cdba3e56401aa3bc5d966cd7ac761" translate="yes" xml:space="preserve">
          <source>Here are some further recommendations from the excellent &lt;a href=&quot;https://blog.risingstack.com/node-js-security-checklist/&quot;&gt;Node.js Security Checklist&lt;/a&gt;. Refer to that blog post for all the details on these recommendations:</source>
          <target state="translated">这是出色的&lt;a href=&quot;https://blog.risingstack.com/node-js-security-checklist/&quot;&gt;Node.js安全清单&lt;/a&gt;中的一些进一步建议。有关这些建议的所有详细信息，请参阅该博客文章：</target>
        </trans-unit>
        <trans-unit id="43ad73ec7564c756614dece67281edec275e4b2c" translate="yes" xml:space="preserve">
          <source>Here are some things you can do in your code to improve your application&amp;rsquo;s performance:</source>
          <target state="translated">您可以在代码中执行以下操作来提高应用程序的性能：</target>
        </trans-unit>
        <trans-unit id="6a612c035d8cca8bf1922ba64ae32743af23a1a7" translate="yes" xml:space="preserve">
          <source>Here are some things you can do in your system environment to improve your app&amp;rsquo;s performance:</source>
          <target state="translated">您可以在系统环境中执行以下操作来提高应用程序的性能：</target>
        </trans-unit>
        <trans-unit id="f54a6b60ff987a13387f1b45020214d11b5fe94d" translate="yes" xml:space="preserve">
          <source>Here is a simple example of a middleware function called &amp;ldquo;myLogger&amp;rdquo;. This function just prints &amp;ldquo;LOGGED&amp;rdquo; when a request to the app passes through it. The middleware function is assigned to a variable named &lt;code&gt;myLogger&lt;/code&gt;.</source>
          <target state="translated">这是一个称为&amp;ldquo; myLogger&amp;rdquo;的中间件功能的简单示例。当对应用程序的请求通过时，此功能仅显示&amp;ldquo;已记录&amp;rdquo;。中间件功能已分配给名为 &lt;code&gt;myLogger&lt;/code&gt; 的变量。</target>
        </trans-unit>
        <trans-unit id="0e440d1c5314c642e7dfe914a3a9b50810da5459" translate="yes" xml:space="preserve">
          <source>Here is an example of a simple &amp;ldquo;Hello World&amp;rdquo; Express application. The remainder of this article will define and add three middleware functions to the application: one called &lt;code&gt;myLogger&lt;/code&gt; that prints a simple log message, one called &lt;code&gt;requestTime&lt;/code&gt; that displays the timestamp of the HTTP request, and one called &lt;code&gt;validateCookies&lt;/code&gt; that validates incoming cookies.</source>
          <target state="translated">这是一个简单的&amp;ldquo; Hello World&amp;rdquo; Express应用程序的示例。本文的其余部分将定义三个中间件功能并将其添加到应用程序中：一个名为 &lt;code&gt;myLogger&lt;/code&gt; 的功能可显示一条简单的日志消息，一个名为 &lt;code&gt;requestTime&lt;/code&gt; 的功能可显示HTTP请求的时间戳，而另一个名为 &lt;code&gt;validateCookies&lt;/code&gt; 的功能可验证传入的Cookie。</target>
        </trans-unit>
        <trans-unit id="29eee523e6ac7cfd2b3f4ba5bd6fa42bf2c15da2" translate="yes" xml:space="preserve">
          <source>Here is an example of a simple &amp;ldquo;Hello World&amp;rdquo; Express application. The remainder of this article will define and add two middleware functions to the application: one called &lt;code&gt;myLogger&lt;/code&gt; that prints a simple log message and another called &lt;code&gt;requestTime&lt;/code&gt; that displays the timestamp of the HTTP request.</source>
          <target state="translated">这是一个简单的&amp;ldquo; Hello World&amp;rdquo; Express应用程序的示例。本文的其余部分将定义并向应用程序添加两个中间件功能：一个名为 &lt;code&gt;myLogger&lt;/code&gt; 的功能，它输出一条简单的日志消息，另一个名为 &lt;code&gt;requestTime&lt;/code&gt; 的功能，用于显示HTTP请求的时间戳。</target>
        </trans-unit>
        <trans-unit id="5904b4e4df3a387c7672ef1a6aa92ddaea0bf476" translate="yes" xml:space="preserve">
          <source>Here is an example of chained route handlers that are defined by using &lt;code&gt;app.route()&lt;/code&gt;.</source>
          <target state="translated">这是使用 &lt;code&gt;app.route()&lt;/code&gt; 定义的链式路由处理程序的示例。</target>
        </trans-unit>
        <trans-unit id="ae885d4e8d4f5b6f3e41d3ffabc8a16e2fbeed60" translate="yes" xml:space="preserve">
          <source>Here is an example of chained route handlers that are defined by using the &lt;code&gt;app.route()&lt;/code&gt; function.</source>
          <target state="translated">这是通过使用 &lt;code&gt;app.route()&lt;/code&gt; 函数定义的链式路由处理程序的示例。</target>
        </trans-unit>
        <trans-unit id="7c789453e6914f13e7f8cd7eb7ad8cb2a8f907ae" translate="yes" xml:space="preserve">
          <source>Here is an example of loading a series of middleware functions at a mount point, with a mount path. It illustrates a middleware sub-stack that prints request info for any type of HTTP request to the &lt;code&gt;/user/:id&lt;/code&gt; path.</source>
          <target state="translated">这是在具有安装路径的安装点加载一系列中间件功能的示例。它说明了一个中间件子栈，该子栈将任何类型的HTTP请求的请求信息打印到 &lt;code&gt;/user/:id&lt;/code&gt; 路径。</target>
        </trans-unit>
        <trans-unit id="ebb96428459638c03c2d8be69dee3c56ccc0ac44" translate="yes" xml:space="preserve">
          <source>Here is an example of migrating an Express 3 application to Express 4. The files of interest are &lt;code&gt;app.js&lt;/code&gt; and &lt;code&gt;package.json&lt;/code&gt;.</source>
          <target state="translated">这是将Express 3应用程序迁移到Express 4的示例。感兴趣的文件是 &lt;code&gt;app.js&lt;/code&gt; 和 &lt;code&gt;package.json&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="8266fb3bd0bf006985e3824d729536c3a8ff648a" translate="yes" xml:space="preserve">
          <source>Here is an example of using &lt;code&gt;res.sendFile&lt;/code&gt; with all its arguments.</source>
          <target state="translated">这是使用带有所有参数的 &lt;code&gt;res.sendFile&lt;/code&gt; 的示例。</target>
        </trans-unit>
        <trans-unit id="d856aeccf40dbeaa41a7a6a8f6314e0d867c3f25" translate="yes" xml:space="preserve">
          <source>Here is an example of using the &lt;code&gt;express.static&lt;/code&gt; middleware function with an elaborate options object:</source>
          <target state="translated">这是将 &lt;code&gt;express.static&lt;/code&gt; 中间件函数与精心设计的options对象结合使用的示例：</target>
        </trans-unit>
        <trans-unit id="dc3b8fb4235dd12be6ae895105e0ba2e0ca40bbe" translate="yes" xml:space="preserve">
          <source>Here is an example of using try-catch to handle a potential process-crashing exception. This middleware function accepts a query field parameter named &amp;ldquo;params&amp;rdquo; that is a JSON object.</source>
          <target state="translated">这是一个使用try-catch处理潜在的进程崩溃异常的示例。该中间件函数接受名为&amp;ldquo; params&amp;rdquo;的查询字段参数，该参数是JSON对象。</target>
        </trans-unit>
        <trans-unit id="42931526f56e065ecdd4e7bb2baad3b3f3afd0a4" translate="yes" xml:space="preserve">
          <source>Here is an example using &lt;a href=&quot;https://www.npmjs.com/package/cookie-session&quot;&gt;cookie-session&lt;/a&gt; middleware:</source>
          <target state="translated">这是使用&lt;a href=&quot;https://www.npmjs.com/package/cookie-session&quot;&gt;cookie会话&lt;/a&gt;中间件的示例：</target>
        </trans-unit>
        <trans-unit id="6435fe2b12e66e23fb23b9ac2f8ef5c0c528c949" translate="yes" xml:space="preserve">
          <source>Here is the &lt;a href=&quot;https://github.com/senchalabs/connect#middleware&quot;&gt;complete list&lt;/a&gt; of Express 4 middleware.</source>
          <target state="translated">这是Express 4中间件的&lt;a href=&quot;https://github.com/senchalabs/connect#middleware&quot;&gt;完整列表&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="0d9d89a392e994ae3b7a07b169cd6a95f7ec63ab" translate="yes" xml:space="preserve">
          <source>Here is the list of changes (as of the alpha 2 release ) that will affect you as a user of Express. See the &lt;a href=&quot;https://github.com/expressjs/express/pull/2237&quot;&gt;pull request&lt;/a&gt; for a list of all the planned features.</source>
          <target state="translated">以下是更改列表（从alpha 2版本开始），这些更改将影响您作为Express的用户。有关所有计划功能的列表，请参阅&lt;a href=&quot;https://github.com/expressjs/express/pull/2237&quot;&gt;拉取请求&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="7a8087aa754c87c467bd05bcfecc805d8e7787f9" translate="yes" xml:space="preserve">
          <source>Here is the list of changes (as of the alpha 2 release ) that will affect you as a user of Express. See the &lt;a href=&quot;https://github.com/strongloop/express/pull/2237&quot;&gt;pull request&lt;/a&gt; for a list of all the planned features.</source>
          <target state="translated">以下是更改列表（从alpha 2版本开始），这些更改将影响您作为Express的用户。请参阅&lt;a href=&quot;https://github.com/strongloop/express/pull/2237&quot;&gt;拉取请求&lt;/a&gt;，以获取所有计划功能的列表。</target>
        </trans-unit>
        <trans-unit id="441898fff425785c15c5f31f406252c702cd6c85" translate="yes" xml:space="preserve">
          <source>Here we use the &lt;a href=&quot;http://expressjs.com/resources/middleware/cookie-parser.html&quot;&gt;&lt;code&gt;cookie-parser&lt;/code&gt;&lt;/a&gt; middleware to parse incoming cookies off the &lt;code&gt;req&lt;/code&gt; object and pass them to our &lt;code&gt;cookieValidator&lt;/code&gt; function. The &lt;code&gt;validateCookies&lt;/code&gt; middleware returns a Promise that upon rejection will automatically trigger our error handler.</source>
          <target state="translated">在这里，我们使用&lt;a href=&quot;http://expressjs.com/resources/middleware/cookie-parser.html&quot;&gt; &lt;code&gt;cookie-parser&lt;/code&gt; &lt;/a&gt;中间件来解析来自 &lt;code&gt;req&lt;/code&gt; 对象的传入cookie ，并将它们传递给我们的 &lt;code&gt;cookieValidator&lt;/code&gt; 函数。该 &lt;code&gt;validateCookies&lt;/code&gt; 中间件回报承诺，拒绝时会自动触发我们的错误处理程序。</target>
        </trans-unit>
        <trans-unit id="5dd162baa2b444ee3b6306d34b2ea01915cb4529" translate="yes" xml:space="preserve">
          <source>Here&amp;rsquo;s a basic template that illustrates using terminus. For more information, see &lt;a href=&quot;https://github.com/godaddy/terminus&quot;&gt;https://github.com/godaddy/terminus&lt;/a&gt;.</source>
          <target state="translated">这是一个说明如何使用终点的基本模板。有关更多信息，请参见&lt;a href=&quot;https://github.com/godaddy/terminus&quot;&gt;https://github.com/godaddy/terminus&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="c5183c261f44ea5bf95d7dee1d6a67b57ebbb693" translate="yes" xml:space="preserve">
          <source>Here&amp;rsquo;s a brief look at each of these tools. For a detailed comparison, see &lt;a href=&quot;http://strong-pm.io/compare/&quot;&gt;http://strong-pm.io/compare/&lt;/a&gt;.</source>
          <target state="translated">下面简要介绍这些工具。有关详细的比较，请参见&lt;a href=&quot;http://strong-pm.io/compare/&quot;&gt;http://strong-pm.io/compare/&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="cc952ed08923505a80e70a80db8dec75730ab665" translate="yes" xml:space="preserve">
          <source>Here&amp;rsquo;s an example function that validates cookies with an external async service.</source>
          <target state="translated">这是一个使用外部异步服务验证Cookie的示例函数。</target>
        </trans-unit>
        <trans-unit id="4d83b66bd9c3d34caf62d68c628ba7d2f0aa5f92" translate="yes" xml:space="preserve">
          <source>How can I authenticate users?</source>
          <target state="translated">如何认证用户?</target>
        </trans-unit>
        <trans-unit id="1c8e7e8cdd157da7ebdab4903ec993d058905211" translate="yes" xml:space="preserve">
          <source>How do I define models?</source>
          <target state="translated">如何定义模型?</target>
        </trans-unit>
        <trans-unit id="e3022adde31b812ad240becc8e1f6be69af66a4b" translate="yes" xml:space="preserve">
          <source>How do I handle 404 responses?</source>
          <target state="translated">如何处理404回复?</target>
        </trans-unit>
        <trans-unit id="feb77df15023f9935deb230a2aea22843e253eff" translate="yes" xml:space="preserve">
          <source>How do I render plain HTML?</source>
          <target state="translated">如何渲染纯HTML?</target>
        </trans-unit>
        <trans-unit id="3cc556aa8db25e9e223f8ad78d3c4d3c7c518192" translate="yes" xml:space="preserve">
          <source>How do I setup an error handler?</source>
          <target state="translated">如何设置错误处理程序?</target>
        </trans-unit>
        <trans-unit id="b4b579cb7673d085f9414e548b8c413f90e6c035" translate="yes" xml:space="preserve">
          <source>How should I structure my application?</source>
          <target state="translated">我应该如何架构我的申请?</target>
        </trans-unit>
        <trans-unit id="c3e8ccbc97249d44851b21b156c0c5f3d825fe78" translate="yes" xml:space="preserve">
          <source>However, StrongLoop PM has lots of features that specifically target production deployment. You can use it and the related StrongLoop tools to:</source>
          <target state="translated">然而,StrongLoop PM有很多专门针对生产部署的功能。你可以使用它和相关的StrongLoop工具来。</target>
        </trans-unit>
        <trans-unit id="4bf4f2b89171b2852eab41d443cd4ba81309c661" translate="yes" xml:space="preserve">
          <source>However, the path that you provide to the &lt;code&gt;express.static&lt;/code&gt; function is relative to the directory from where you launch your &lt;code&gt;node&lt;/code&gt; process. If you run the express app from another directory, it&amp;rsquo;s safer to use the absolute path of the directory that you want to serve:</source>
          <target state="translated">但是，您提供给 &lt;code&gt;express.static&lt;/code&gt; 函数的路径是相对于您启动 &lt;code&gt;node&lt;/code&gt; 进程的目录的。如果从另一个目录运行express app，则使用要提供服务的目录的绝对路径更为安全：</target>
        </trans-unit>
        <trans-unit id="d3b727274649dce5e00077cb30821d704b38e9ef" translate="yes" xml:space="preserve">
          <source>However, there are two caveats:</source>
          <target state="translated">但是,有两个注意事项。</target>
        </trans-unit>
        <trans-unit id="18ea19776f8b299064d4fe790b7bc9b75ae09e06" translate="yes" xml:space="preserve">
          <source>However, try-catch works only for synchronous code. Because the Node platform is primarily asynchronous (particularly in a production environment), try-catch won&amp;rsquo;t catch a lot of exceptions.</source>
          <target state="translated">但是，try-catch仅适用于同步代码。由于Node平台主要是异步的（特别是在生产环境中），因此try-catch不会捕获很多异常。</target>
        </trans-unit>
        <trans-unit id="a1696bb2633c96db12c0bcdfb577d6da23981437" translate="yes" xml:space="preserve">
          <source>IMPORTANT: Since the app instances run as separate processes, they do not share the same memory space. That is, objects are local to each instance of the app. Therefore, you cannot maintain state in the application code. However, you can use an in-memory datastore like &lt;a href=&quot;http://redis.io/&quot;&gt;Redis&lt;/a&gt; to store session-related data and state. This caveat applies to essentially all forms of horizontal scaling, whether clustering with multiple processes or multiple physical servers.</source>
          <target state="translated">重要说明：由于应用程序实例作为单独的进程运行，因此它们不会共享相同的内存空间。也就是说，对象是应用程序每个实例的本地对象。因此，您不能在应用程序代码中维护状态。但是，您可以使用像&lt;a href=&quot;http://redis.io/&quot;&gt;Redis&lt;/a&gt;这样的内存中数据存储来存储与会话相关的数据和状态。此警告实际上适用于所有形式的水平扩展，无论是与多个进程或多个物理服务器进行群集。</target>
        </trans-unit>
        <trans-unit id="2d68eb41b0bf6d9f4a1f3670230185ea623a1f26" translate="yes" xml:space="preserve">
          <source>IP addresses</source>
          <target state="translated">IP地址</target>
        </trans-unit>
        <trans-unit id="92e0bf434a9c5656b33cddfda88618ca016db3db" translate="yes" xml:space="preserve">
          <source>If &quot;strong&quot;, enables strong ETag.</source>
          <target state="translated">如果 &quot;强&quot;,则启用强ETag。</target>
        </trans-unit>
        <trans-unit id="01addcc33f6e28da623a5bb7a77866f99a9ed76a" translate="yes" xml:space="preserve">
          <source>If &quot;weak&quot;, enables weak ETag.</source>
          <target state="translated">如果为 &quot;弱&quot;,则启用弱ETag。</target>
        </trans-unit>
        <trans-unit id="ae2fff480e9fc6127f296270617bb7c428b6d9f0" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;false&lt;/code&gt;, the app is understood as directly facing the Internet and the client&amp;rsquo;s IP address is derived from &lt;code&gt;req.connection.remoteAddress&lt;/code&gt;. This is the default setting.</source>
          <target state="translated">如果为 &lt;code&gt;false&lt;/code&gt; ，则该应用程序被视为直接面向Internet，并且客户端的IP地址是从 &lt;code&gt;req.connection.remoteAddress&lt;/code&gt; 派生的。这是默认设置。</target>
        </trans-unit>
        <trans-unit id="1601500081a8882681be41d6393567ee192d4d4c" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;getUserById&lt;/code&gt; throws an error or rejects, &lt;code&gt;next&lt;/code&gt; will be called with either the thrown error or the rejected value. If no rejected value is provided, &lt;code&gt;next&lt;/code&gt; will be called with a default Error object provided by the Express router.</source>
          <target state="translated">如果 &lt;code&gt;getUserById&lt;/code&gt; 抛出错误或拒绝，则将使用抛出的错误或拒绝的值来调用 &lt;code&gt;next&lt;/code&gt; 。如果未提供拒绝值，则将使用Express路由器提供的默认Error对象调用 &lt;code&gt;next&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="0c9558ebb73416ba72c987975c84fde1b1e832fd" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;myLogger&lt;/code&gt; is loaded after the route to the root path, the request never reaches it and the app doesn&amp;rsquo;t print &amp;ldquo;LOGGED&amp;rdquo;, because the route handler of the root path terminates the request-response cycle.</source>
          <target state="translated">如果 &lt;code&gt;myLogger&lt;/code&gt; 是在到达根路径的路由之后加载的，则该请求永远不会到达该请求，并且该应用不会显示&amp;ldquo; LOGGED&amp;rdquo;，因为根路径的路由处理程序会终止请求-响应周期。</target>
        </trans-unit>
        <trans-unit id="056224c71a6291d7279aa8baf4ee7f6192cfb78e" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;name&lt;/code&gt; is an array, the &lt;code&gt;callback&lt;/code&gt; trigger is registered for each parameter declared in it, in the order in which they are declared. Furthermore, for each declared parameter except the last one, a call to &lt;code&gt;next&lt;/code&gt; inside the callback will call the callback for the next declared parameter. For the last parameter, a call to &lt;code&gt;next&lt;/code&gt; will call the next middleware in place for the route currently being processed, just like it would if &lt;code&gt;name&lt;/code&gt; were just a string.</source>
          <target state="translated">如果 &lt;code&gt;name&lt;/code&gt; 是一个数组，则为其声明的每个参数按声明顺序注册 &lt;code&gt;callback&lt;/code&gt; 触发器。此外，对于除最后一个参数以外的每个已声明参数，在回调内部调用 &lt;code&gt;next&lt;/code&gt; 将调用下一个已声明参数的回调。对于最后一个参数，对 &lt;code&gt;next&lt;/code&gt; 的调用将在当前正在处理的路由的位置调用下一个中间件，就像 &lt;code&gt;name&lt;/code&gt; 只是一个字符串一样。</target>
        </trans-unit>
        <trans-unit id="02d369aa0775929b28c3372446dffc8a1888df91" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;true&lt;/code&gt;, the client&amp;rsquo;s IP address is understood as the left-most entry in the &lt;code&gt;X-Forwarded-*&lt;/code&gt; header.</source>
          <target state="translated">如果为 &lt;code&gt;true&lt;/code&gt; ，则将客户端的IP地址理解为 &lt;code&gt;X-Forwarded-*&lt;/code&gt; 标头中的最左侧条目。</target>
        </trans-unit>
        <trans-unit id="31791714f3fda698d2a47c8e6b402d3a6f836774" translate="yes" xml:space="preserve">
          <source>If a sub-app is mounted on multiple path patterns, &lt;code&gt;app.mountpath&lt;/code&gt; returns the list of patterns it is mounted on, as shown in the following example.</source>
          <target state="translated">如果将子应用程序安装在多个路径模式上，则 &lt;code&gt;app.mountpath&lt;/code&gt; 返回其安装的模式列表，如以下示例所示。</target>
        </trans-unit>
        <trans-unit id="b0d6b3c2f72479a5b69c27eb17bd4356e2405f52" translate="yes" xml:space="preserve">
          <source>If an unsupported status code is specified, the HTTP status is still set to &lt;code&gt;statusCode&lt;/code&gt; and the string version of the code is sent as the response body.</source>
          <target state="translated">如果指定了不受支持的状态代码，则HTTP状态仍设置为 &lt;code&gt;statusCode&lt;/code&gt; ,并且该代码的字符串版本作为响应正文发送。</target>
        </trans-unit>
        <trans-unit id="11045bad3f2c8f679da552c49dcb01e446a83188" translate="yes" xml:space="preserve">
          <source>If no signed cookies are sent, the property defaults to &lt;code&gt;{}&lt;/code&gt;.</source>
          <target state="translated">如果没有发送签名的cookie，则该属性默认为 &lt;code&gt;{}&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="a4f2bc8e2dfb5c24e37a8093b40c483e4cd6d36b" translate="yes" xml:space="preserve">
          <source>If port is omitted or is 0, the operating system will assign an arbitrary unused port, which is useful for cases like automated tasks (tests, etc.).</source>
          <target state="translated">如果端口被省略或为0,操作系统将分配一个任意的未使用的端口,这对自动任务(测试等)等情况很有用。</target>
        </trans-unit>
        <trans-unit id="29970526271d09358c59cb05c881b5576f7eb2c2" translate="yes" xml:space="preserve">
          <source>If the callback in a sequence provides no data, only errors, you can simplify this code as follows:</source>
          <target state="translated">如果序列中的回调不提供数据,只提供错误,可以将这段代码简化如下。</target>
        </trans-unit>
        <trans-unit id="933954ce91190a7a525c85c619fe65eb07d62358" translate="yes" xml:space="preserve">
          <source>If the cookie has been signed, you have to use &lt;a href=&quot;#req.signedCookies&quot;&gt;req.signedCookies&lt;/a&gt;.</source>
          <target state="translated">如果cookie已经签名，则必须使用&lt;a href=&quot;#req.signedCookies&quot;&gt;req.signedCookies&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="a55a299297ecc876ea30e666395f9359d9372ca5" translate="yes" xml:space="preserve">
          <source>If the current middleware function does not end the request-response cycle, it must call &lt;code&gt;next()&lt;/code&gt; to pass control to the next middleware function. Otherwise, the request will be left hanging.</source>
          <target state="translated">如果当前中间件函数没有结束请求-响应周期，则它必须调用 &lt;code&gt;next()&lt;/code&gt; 将控制权传递给下一个中间件函数。否则，该请求将被挂起。</target>
        </trans-unit>
        <trans-unit id="57826cf54938d934726b8234ebd5d328f4052f25" translate="yes" xml:space="preserve">
          <source>If there is more than one &lt;code&gt;X-Forwarded-Host&lt;/code&gt; header in the request, the value of the first header is used. This includes a single header with comma-separated values, in which the first value is used.</source>
          <target state="translated">如果请求中有多个 &lt;code&gt;X-Forwarded-Host&lt;/code&gt; 标头，则使用第一个标头的值。这包括带有逗号分隔值的单个标头，其中使用了第一个值。</target>
        </trans-unit>
        <trans-unit id="e1f1a80344dcfb92361d5f135bb286071c1a5646" translate="yes" xml:space="preserve">
          <source>If you already have the Express 3 app generator installed on your system, you must uninstall it:</source>
          <target state="translated">如果你的系统中已经安装了快3应用生成器,你必须卸载它。</target>
        </trans-unit>
        <trans-unit id="e0a41b42dfc013aa5ef155edcfc958c395f488e6" translate="yes" xml:space="preserve">
          <source>If you are using Node.js 4.0+ or io.js 2.1.0+, you can use the &lt;code&gt;--trace-sync-io&lt;/code&gt; command-line flag to print a warning and a stack trace whenever your application uses a synchronous API. Of course, you wouldn&amp;rsquo;t want to use this in production, but rather to ensure that your code is ready for production. See the &lt;a href=&quot;https://nodejs.org/api/cli.html#cli_trace_sync_io&quot;&gt;node command-line options documentation&lt;/a&gt; for more information.</source>
          <target state="translated">如果您使用的是Node.js 4.0+或io.js 2.1.0+，则只要您的应用程序使用同步API ，就可以使用 &lt;code&gt;--trace-sync-io&lt;/code&gt; 命令行标志来打印警告和堆栈跟踪。当然，您不想在生产中使用它，而是要确保您的代码已准备好用于生产。有关更多信息，请参见&lt;a href=&quot;https://nodejs.org/api/cli.html#cli_trace_sync_io&quot;&gt;节点命令行选项文档&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="2e50bfdb6d008631ee77562751dbc5df1a0891f9" translate="yes" xml:space="preserve">
          <source>If you call &lt;code&gt;next()&lt;/code&gt; with an error after you have started writing the response (for example, if you encounter an error while streaming the response to the client) the Express default error handler closes the connection and fails the request.</source>
          <target state="translated">如果您在开始编写响应后用错误调用 &lt;code&gt;next()&lt;/code&gt; （例如，如果在将响应流传输到客户端时遇到错误），则Express默认错误处理程序将关闭连接并使请求失败。</target>
        </trans-unit>
        <trans-unit id="5a5193563ca4a33ff304f3e6fed6d641785803f8" translate="yes" xml:space="preserve">
          <source>If you deploy your application to StrongLoop Process Manager (PM), then you can take advantage of clustering &lt;em&gt;without&lt;/em&gt; modifying your application code.</source>
          <target state="translated">如果将应用程序部署到StrongLoop Process Manager（PM），则可以利用群集&lt;em&gt;而无需&lt;/em&gt;修改应用程序代码。</target>
        </trans-unit>
        <trans-unit id="bb8f3011d872f96786d8d650cde63b4fe7b540ee" translate="yes" xml:space="preserve">
          <source>If you deploy your application with PM2, then you can take advantage of clustering &lt;em&gt;without&lt;/em&gt; modifying your application code. You should ensure your &lt;a href=&quot;http://pm2.keymetrics.io/docs/usage/specifics/#stateless-apps&quot;&gt;application is stateless&lt;/a&gt; first, meaning no local data is stored in the process (such as sessions, websocket connections and the like).</source>
          <target state="translated">如果使用PM2部署应用程序，则可以利用群集的优势而&lt;em&gt;无需&lt;/em&gt;修改应用程序代码。您应该确保您的&lt;a href=&quot;http://pm2.keymetrics.io/docs/usage/specifics/#stateless-apps&quot;&gt;应用程序&lt;/a&gt;首先是无状态的，这意味着该过程中不会存储任何本地数据（例如会话，websocket连接等）。</target>
        </trans-unit>
        <trans-unit id="80b338185da4af57837e716d37f8c79971bb7b82" translate="yes" xml:space="preserve">
          <source>If you don&amp;rsquo;t want to use Helmet, then at least disable the &lt;code&gt;X-Powered-By&lt;/code&gt; header. Attackers can use this header (which is enabled by default) to detect apps running Express and then launch specifically-targeted attacks.</source>
          <target state="translated">如果您不想使用头盔，则至少禁用 &lt;code&gt;X-Powered-By&lt;/code&gt; 标头。攻击者可以使用此标头（默认情况下已启用）来检测运行Express的应用程序，然后发起针对特定目标的攻击。</target>
        </trans-unit>
        <trans-unit id="a5ed12e507ca31cdcda25284d69078edbb84359a" translate="yes" xml:space="preserve">
          <source>If you follow the pattern in which you create a module that just exports a middleware function and &lt;code&gt;require()&lt;/code&gt; it in your main file, then the middleware can access the Express instance via &lt;code&gt;req.app&lt;/code&gt;</source>
          <target state="translated">如果遵循创建仅导出中间件功能并将其在主文件中 &lt;code&gt;require()&lt;/code&gt; 的模块的模式，则中间件可以通过 &lt;code&gt;req.app&lt;/code&gt; 访问Express实例。</target>
        </trans-unit>
        <trans-unit id="c0067c5f5d67278ba7b6fc1fbfb8c28c4d7e2f58" translate="yes" xml:space="preserve">
          <source>If you found the above behavior confusing, think of path segments as directories (with trailing slashes) and files, it will start to make sense.</source>
          <target state="translated">如果你觉得上面的行为令人困惑,把路径段看成是目录(带尾部的斜线)和文件,它将开始变得有意义。</target>
        </trans-unit>
        <trans-unit id="a587c353ca4afc9178eb142caf4ebbb8cf3ebd59" translate="yes" xml:space="preserve">
          <source>If you have a route handler with multiple callback functions you can use the &lt;code&gt;route&lt;/code&gt; parameter to skip to the next route handler. For example:</source>
          <target state="translated">如果您的路由处理程序具有多个回调函数，则可以使用 &lt;code&gt;route&lt;/code&gt; 参数跳到下一个路由处理程序。例如：</target>
        </trans-unit>
        <trans-unit id="3ccd10d03f9fd5c6409f6ed22eb03dff4f490928" translate="yes" xml:space="preserve">
          <source>If you look at the contents of the &lt;code&gt;app4/app.js&lt;/code&gt; file, you will notice that all the middleware functions (except &lt;code&gt;express.static&lt;/code&gt;) that are required for the app are loaded as independent modules, and the &lt;code&gt;router&lt;/code&gt; middleware is no longer explicitly loaded in the app.</source>
          <target state="translated">如果查看 &lt;code&gt;app4/app.js&lt;/code&gt; 文件的内容，则会注意到该应用程序所需的所有中间件功能（ &lt;code&gt;express.static&lt;/code&gt; 除外）均作为独立模块加载，并且 &lt;code&gt;router&lt;/code&gt; 中间件不再显式加载。在应用程序中。</target>
        </trans-unit>
        <trans-unit id="907299c24280a55ee74849f6783b224df5b93631" translate="yes" xml:space="preserve">
          <source>If you look at the npm start script in the &lt;code&gt;package.json&lt;/code&gt; file, you will notice that the actual command that starts the app is &lt;code&gt;node ./bin/www&lt;/code&gt;, which used to be &lt;code&gt;node app.js&lt;/code&gt; in Express 3.</source>
          <target state="translated">如果你看一下在故宫启动脚本 &lt;code&gt;package.json&lt;/code&gt; 文件，你会发现，启动应用程序的实际命令是 &lt;code&gt;node ./bin/www&lt;/code&gt; ，这曾经是 &lt;code&gt;node app.js&lt;/code&gt; 在快递3。</target>
        </trans-unit>
        <trans-unit id="727dca035da7af2ee06bd21f1aa4b3a54a2f3854" translate="yes" xml:space="preserve">
          <source>If you need to make changes to a key in &lt;code&gt;req.params&lt;/code&gt;, use the &lt;a href=&quot;index#app.param&quot;&gt;app.param&lt;/a&gt; handler. Changes are applicable only to &lt;a href=&quot;guide/routing#route-parameters&quot;&gt;parameters&lt;/a&gt; already defined in the route path.</source>
          <target state="translated">如果您需要对 &lt;code&gt;req.params&lt;/code&gt; 中的键进行更改，请使用&lt;a href=&quot;index#app.param&quot;&gt;app.param&lt;/a&gt;处理程序。更改仅适用于已在路径中定义的&lt;a href=&quot;guide/routing#route-parameters&quot;&gt;参数&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="44208ca647301ec25437d6d4a3fb6878ffefdfbd" translate="yes" xml:space="preserve">
          <source>If you need to use the dollar character (&lt;code&gt;$&lt;/code&gt;) in a path string, enclose it escaped within &lt;code&gt;([&lt;/code&gt; and &lt;code&gt;])&lt;/code&gt;. For example, the path string for requests at &amp;ldquo;&lt;code&gt;/data/$book&lt;/code&gt;&amp;rdquo;, would be &amp;ldquo;&lt;code&gt;/data/([\$])book&lt;/code&gt;&amp;rdquo;.</source>
          <target state="translated">如果需要在路径字符串中使用美元字符（ &lt;code&gt;$&lt;/code&gt; ），请将其转义包含在 &lt;code&gt;([&lt;/code&gt; 和 &lt;code&gt;])&lt;/code&gt; 中。例如，&amp;ldquo; &lt;code&gt;/data/$book&lt;/code&gt; &amp;rdquo; 处的请求的路径字符串应为&amp;ldquo; &lt;code&gt;/data/([\$])book&lt;/code&gt; &amp;rdquo;。</target>
        </trans-unit>
        <trans-unit id="f847a330b53c117f417033ab77cb84b2088a6f02" translate="yes" xml:space="preserve">
          <source>If you need to write environment-specific code, you can check the value of NODE_ENV with &lt;code&gt;process.env.NODE_ENV&lt;/code&gt;. Be aware that checking the value of any environment variable incurs a performance penalty, and so should be done sparingly.</source>
          <target state="translated">如果需要编写特定于环境的代码，则可以使用 &lt;code&gt;process.env.NODE_ENV&lt;/code&gt; 检查NODE_ENV的值。请注意，检查任何环境变量的值都会导致性能下降，因此应谨慎执行。</target>
        </trans-unit>
        <trans-unit id="99eac75fd4d83d69721b9be343e3a1f5112d408a" translate="yes" xml:space="preserve">
          <source>If you need your middleware to be configurable, export a function which accepts an options object or other parameters, which, then returns the middleware implementation based on the input parameters.</source>
          <target state="translated">如果你需要你的中间件是可配置的,可以导出一个函数,该函数接受一个选项对象或其他参数,然后,根据输入的参数返回中间件的实现。</target>
        </trans-unit>
        <trans-unit id="a74a9b00b118621b25b08e66514d10e28c1b33ed" translate="yes" xml:space="preserve">
          <source>If you pass an error to &lt;code&gt;next()&lt;/code&gt; and you do not handle it in a custom error handler, it will be handled by the built-in error handler; the error will be written to the client with the stack trace. The stack trace is not included in the production environment.</source>
          <target state="translated">如果将错误传递给 &lt;code&gt;next()&lt;/code&gt; 并且未在自定义错误处理程序中进行处理，则它将由内置错误处理程序进行处理；错误将与堆栈跟踪一起写入客户端。堆栈跟踪不包括在生产环境中。</target>
        </trans-unit>
        <trans-unit id="79b0d111c085b80c000246d4d39ca53916f2b53a" translate="yes" xml:space="preserve">
          <source>If you pass anything to the &lt;code&gt;next()&lt;/code&gt; function (except the string &lt;code&gt;'route'&lt;/code&gt;), Express regards the current request as being an error and will skip any remaining non-error handling routing and middleware functions.</source>
          <target state="translated">如果将任何内容传递给 &lt;code&gt;next()&lt;/code&gt; 函数（字符串 &lt;code&gt;'route'&lt;/code&gt; 除外），Express都会将当前请求视为错误，并会跳过所有剩余的非错误处理路由和中间件函数。</target>
        </trans-unit>
        <trans-unit id="3905618cd351c788875d5f115409084f86f19ff5" translate="yes" xml:space="preserve">
          <source>If you pass anything to the &lt;code&gt;next()&lt;/code&gt; function (except the string &lt;code&gt;'route'&lt;/code&gt;), Express regards the current request as being an error and will skip any remaining non-error handling routing and middleware functions. If you want to handle that error, you&amp;rsquo;ll have to create an error-handling route as described in the next section.</source>
          <target state="translated">如果将任何内容传递给 &lt;code&gt;next()&lt;/code&gt; 函数（字符串 &lt;code&gt;'route'&lt;/code&gt; 除外），Express都会将当前请求视为错误，并会跳过所有剩余的非错误处理路由和中间件函数。如果要处理该错误，则必须创建一个错误处理路由，如下一节所述。</target>
        </trans-unit>
        <trans-unit id="c92b8af7f8923f9f935cbdbd328d5ab032b1d55a" translate="yes" xml:space="preserve">
          <source>If you use &lt;code&gt;helmet.js&lt;/code&gt;, it takes care of this for you.</source>
          <target state="translated">如果您使用 &lt;code&gt;helmet.js&lt;/code&gt; ，它将为您解决这一问题。</target>
        </trans-unit>
        <trans-unit id="4b56bac7c5caa8bd3babf8429ba9cd9333aab01d" translate="yes" xml:space="preserve">
          <source>If you use any of these methods or properties in your app, it will crash. So, you&amp;rsquo;ll need to change your app after you update to version 5.</source>
          <target state="translated">如果您在应用中使用任何这些方法或属性，它将崩溃。因此，更新到版本5后，您需要更改应用程序。</target>
        </trans-unit>
        <trans-unit id="cb07d1be238ebec33e695d0ede0807c26ba02c3e" translate="yes" xml:space="preserve">
          <source>If you want an object model driver for MongoDB, look at &lt;a href=&quot;https://github.com/LearnBoost/mongoose&quot;&gt;Mongoose&lt;/a&gt;.</source>
          <target state="translated">如果要使用MongoDB的对象模型驱动程序，请查看&lt;a href=&quot;https://github.com/LearnBoost/mongoose&quot;&gt;Mongoose&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="3b3d046b97bd3bdb67004e097ac60a403f6c5bda" translate="yes" xml:space="preserve">
          <source>If you want to stay more secure, consider &lt;a href=&quot;https://snyk.io/&quot;&gt;Snyk&lt;/a&gt;.</source>
          <target state="translated">如果您想保持更安全，请考虑&lt;a href=&quot;https://snyk.io/&quot;&gt;Snyk&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="8f50b62a245a5f1f32836f68db67743ca4100327" translate="yes" xml:space="preserve">
          <source>If you&amp;rsquo;re logging app activity (for example, tracking traffic or API calls), instead of using &lt;code&gt;console.log()&lt;/code&gt;, use a logging library like &lt;a href=&quot;https://www.npmjs.com/package/winston&quot;&gt;Winston&lt;/a&gt; or &lt;a href=&quot;https://www.npmjs.com/package/bunyan&quot;&gt;Bunyan&lt;/a&gt;. For a detailed comparison of these two libraries, see the StrongLoop blog post &lt;a href=&quot;https://strongloop.com/strongblog/compare-node-js-logging-winston-bunyan/&quot;&gt;Comparing Winston and Bunyan Node.js Logging&lt;/a&gt;.</source>
          <target state="translated">如果要记录应用程序活动（例如，跟踪流量或API调用），请使用&lt;a href=&quot;https://www.npmjs.com/package/winston&quot;&gt;Winston&lt;/a&gt;或&lt;a href=&quot;https://www.npmjs.com/package/bunyan&quot;&gt;Bunyan之&lt;/a&gt;类的日志记录库，而不要使用 &lt;code&gt;console.log()&lt;/code&gt; 。有关这两个库的详细比较，请参见StrongLoop博客文章&lt;a href=&quot;https://strongloop.com/strongblog/compare-node-js-logging-winston-bunyan/&quot;&gt;比较Winston和Bunyan Node.js日志记录&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="fb97141b80cd9e7ad14d9046ac73e9b3406f1585" translate="yes" xml:space="preserve">
          <source>If you&amp;rsquo;re logging for purposes of debugging, then instead of using &lt;code&gt;console.log()&lt;/code&gt;, use a special debugging module like &lt;a href=&quot;https://www.npmjs.com/package/debug&quot;&gt;debug&lt;/a&gt;. This module enables you to use the DEBUG environment variable to control what debug messages are sent to &lt;code&gt;console.err()&lt;/code&gt;, if any. To keep your app purely asynchronous, you&amp;rsquo;d still want to pipe &lt;code&gt;console.err()&lt;/code&gt; to another program. But then, you&amp;rsquo;re not really going to debug in production, are you?</source>
          <target state="translated">如果您出于调试目的而记录日志，那么请使用特殊的调试模块（例如&lt;a href=&quot;https://www.npmjs.com/package/debug&quot;&gt;debug &lt;/a&gt; &lt;code&gt;console.log()&lt;/code&gt; ，而不要使用console.log（）。该模块使您可以使用DEBUG环境变量来控制将哪些调试消息发送到 &lt;code&gt;console.err()&lt;/code&gt; （如果有）。为了保持您的应用程序完全异步，您仍然需要将 &lt;code&gt;console.err()&lt;/code&gt; 传递到另一个程序。但是，那么，您真的不会在生产中进行调试，是吗？</target>
        </trans-unit>
        <trans-unit id="c0354d2f468bff0dc7733090ab0ced51a1560a81" translate="yes" xml:space="preserve">
          <source>If you&amp;rsquo;re logging for purposes of debugging, then instead of using &lt;code&gt;console.log()&lt;/code&gt;, use a special debugging module like &lt;a href=&quot;https://www.npmjs.com/package/debug&quot;&gt;debug&lt;/a&gt;. This module enables you to use the DEBUG environment variable to control what debug messages are sent to &lt;code&gt;console.error()&lt;/code&gt;, if any. To keep your app purely asynchronous, you&amp;rsquo;d still want to pipe &lt;code&gt;console.error()&lt;/code&gt; to another program. But then, you&amp;rsquo;re not really going to debug in production, are you?</source>
          <target state="translated">如果您出于调试目的而记录日志，那么请使用特殊的调试模块（例如&lt;a href=&quot;https://www.npmjs.com/package/debug&quot;&gt;debug &lt;/a&gt; &lt;code&gt;console.log()&lt;/code&gt; ，而不要使用console.log（）。此模块使您可以使用DEBUG环境变量来控制将哪些调试消息发送到 &lt;code&gt;console.error()&lt;/code&gt; （如果有）。为了使您的应用程序完全异步，您仍然需要将 &lt;code&gt;console.error()&lt;/code&gt; 传递给另一个程序。但是，那么，您真的不会在生产中进行调试，是吗？</target>
        </trans-unit>
        <trans-unit id="7cc2ae614864c49923ab28d53e79d90029f52d98" translate="yes" xml:space="preserve">
          <source>If your app deals with or transmits sensitive data, use &lt;a href=&quot;https://en.wikipedia.org/wiki/Transport_Layer_Security&quot;&gt;Transport Layer Security&lt;/a&gt; (TLS) to secure the connection and the data. This technology encrypts data before it is sent from the client to the server, thus preventing some common (and easy) hacks. Although Ajax and POST requests might not be visibly obvious and seem &amp;ldquo;hidden&amp;rdquo; in browsers, their network traffic is vulnerable to &lt;a href=&quot;https://en.wikipedia.org/wiki/Packet_analyzer&quot;&gt;packet sniffing&lt;/a&gt; and &lt;a href=&quot;https://en.wikipedia.org/wiki/Man-in-the-middle_attack&quot;&gt;man-in-the-middle attacks&lt;/a&gt;.</source>
          <target state="translated">如果您的应用处理或传输敏感数据，请使用&lt;a href=&quot;https://en.wikipedia.org/wiki/Transport_Layer_Security&quot;&gt;传输层安全性&lt;/a&gt;（TLS）来保护连接和数据。这项技术会在将数据从客户端发送到服务器之前对其进行加密，从而防止了一些常见（且容易）的黑客攻击。尽管Ajax和POST请求在浏览器中可能不明显，但似乎&amp;ldquo;隐藏&amp;rdquo;，但它们的网络流量容易受到&lt;a href=&quot;https://en.wikipedia.org/wiki/Packet_analyzer&quot;&gt;数据包嗅探&lt;/a&gt;和&lt;a href=&quot;https://en.wikipedia.org/wiki/Man-in-the-middle_attack&quot;&gt;中间人攻击&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="a02de4d359af11627308bb38ced386f5caa4e09d" translate="yes" xml:space="preserve">
          <source>Implement rate-limiting to prevent brute-force attacks against authentication. One way to do this is to use &lt;a href=&quot;https://github.com/strongloop/microgateway&quot;&gt;StrongLoop Microgateway&lt;/a&gt; to enforce a rate-limiting policy. Alternatively, you can use package such as &lt;a href=&quot;https://github.com/animir/node-rate-limiter-flexible&quot;&gt;rate-limiter-flexible&lt;/a&gt; and configure limits.</source>
          <target state="translated">实施速率限制，以防止对身份验证的暴力攻击。一种实现方法是使用&lt;a href=&quot;https://github.com/strongloop/microgateway&quot;&gt;StrongLoop Microgateway&lt;/a&gt;实施速率限制策略。另外，您可以使用&lt;a href=&quot;https://github.com/animir/node-rate-limiter-flexible&quot;&gt;rate-limiter-flexible之类的包&lt;/a&gt;并配置限制。</target>
        </trans-unit>
        <trans-unit id="5472549ab72b55046a693bb06c4c1bd944f70c2d" translate="yes" xml:space="preserve">
          <source>Implement the &amp;ldquo;catch-all&amp;rdquo; &lt;code&gt;errorHandler&lt;/code&gt; function as follows (for example):</source>
          <target state="translated">如下实现&amp;ldquo; catch-all&amp;rdquo; &lt;code&gt;errorHandler&lt;/code&gt; 函数（例如）：</target>
        </trans-unit>
        <trans-unit id="df66ef4f9fec541e48971fe99984a92ee3d241bf" translate="yes" xml:space="preserve">
          <source>Improvements</source>
          <target state="translated">Improvements</target>
        </trans-unit>
        <trans-unit id="619c2087032eb572722ee7afc9d66edb0f5d5e54" translate="yes" xml:space="preserve">
          <source>In Express 4, &lt;code&gt;req.files&lt;/code&gt; is no longer available on the &lt;code&gt;req&lt;/code&gt; object by default. To access uploaded files on the &lt;code&gt;req.files&lt;/code&gt; object, use multipart-handling middleware like busboy, &lt;a href=&quot;https://www.npmjs.com/package/multer&quot;&gt;multer&lt;/a&gt;, &lt;a href=&quot;https://www.npmjs.com/package/formidable&quot;&gt;formidable&lt;/a&gt;, &lt;a href=&quot;https://www.npmjs.com/package/multiparty&quot;&gt;multiparty&lt;/a&gt;, &lt;a href=&quot;https://www.npmjs.com/package/connect-multiparty&quot;&gt;connect-multiparty&lt;/a&gt;, or &lt;a href=&quot;https://www.npmjs.com/package/pez&quot;&gt;pez&lt;/a&gt;.</source>
          <target state="translated">在Express 4中，默认情况下， &lt;code&gt;req.files&lt;/code&gt; 在 &lt;code&gt;req&lt;/code&gt; 对象上不再可用。要访问 &lt;code&gt;req.files&lt;/code&gt; 对象上的上传文件，请使用多部分处理中间件，例如&lt;a href=&quot;https://www.npmjs.com/package/multer&quot;&gt;busboy&lt;/a&gt;，multer，&lt;a href=&quot;https://www.npmjs.com/package/formidable&quot;&gt;formidable&lt;/a&gt;，&lt;a href=&quot;https://www.npmjs.com/package/multiparty&quot;&gt;multiparty&lt;/a&gt;，&lt;a href=&quot;https://www.npmjs.com/package/connect-multiparty&quot;&gt;connect-multiparty&lt;/a&gt;或&lt;a href=&quot;https://www.npmjs.com/package/pez&quot;&gt;pez&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="f52896695367ceed8a45424d1a45616404dca6f6" translate="yes" xml:space="preserve">
          <source>In Express 4, the &lt;code&gt;req.host&lt;/code&gt; function incorrectly stripped off the port number if it was present. In Express 5 the port number is maintained.</source>
          <target state="translated">在Express 4中， &lt;code&gt;req.host&lt;/code&gt; 函数错误地剥离了端口号（如果存在）。在Express 5中，将保留端口号。</target>
        </trans-unit>
        <trans-unit id="5d679d9589465c282abb43cdd261bb629c012b70" translate="yes" xml:space="preserve">
          <source>In Express 4.7 and Express 5 onwards, the query parser option can accept &lt;code&gt;false&lt;/code&gt; to disable query string parsing when you want to use your own function for query string parsing logic.</source>
          <target state="translated">在Express 4.7和Express 5及更高版本中，当您要使用自己的函数进行查询字符串解析逻辑时，query parser选项可以接受 &lt;code&gt;false&lt;/code&gt; 以禁用查询字符串解析。</target>
        </trans-unit>
        <trans-unit id="4c3faca5746ceefc7bfb32f84d6f0db2a77325c3" translate="yes" xml:space="preserve">
          <source>In Express 4.x, &lt;a href=&quot;https://github.com/expressjs/express/issues/2495&quot;&gt;the &lt;code&gt;*&lt;/code&gt; character in regular expressions is not interpreted in the usual way&lt;/a&gt;. As a workaround, use &lt;code&gt;{0,}&lt;/code&gt; instead of &lt;code&gt;*&lt;/code&gt;. This will likely be fixed in Express 5.</source>
          <target state="translated">在Express 4.x中，&lt;a href=&quot;https://github.com/expressjs/express/issues/2495&quot;&gt;不以常规方式解释正则表达式中&lt;/a&gt;的 &lt;code&gt;*&lt;/code&gt; 字符。解决方法是使用 &lt;code&gt;{0,}&lt;/code&gt; 代替 &lt;code&gt;*&lt;/code&gt; 。这可能会在Express 5中修复。</target>
        </trans-unit>
        <trans-unit id="7786c45c55cd9bd3fd25078b3bdd3f190ec6ed58" translate="yes" xml:space="preserve">
          <source>In Express, 404 responses are not the result of an error, so the error-handler middleware will not capture them. This behavior is because a 404 response simply indicates the absence of additional work to do; in other words, Express has executed all middleware functions and routes, and found that none of them responded. All you need to do is add a middleware function at the very bottom of the stack (below all other functions) to handle a 404 response:</source>
          <target state="translated">在 Express 中,404 响应不是错误的结果,所以错误处理中间件不会捕获它们。这种行为是因为404响应只是表明没有额外的工作要做;换句话说,Express已经执行了所有的中间件函数和路由,并发现它们都没有响应。你需要做的就是在堆栈的最底层添加一个中间件函数(低于所有其他函数)来处理404响应。</target>
        </trans-unit>
        <trans-unit id="b9a6fec1c20a63e5d8f21ecc4405afa8dd515a85" translate="yes" xml:space="preserve">
          <source>In a middleware function, &lt;code&gt;req.originalUrl&lt;/code&gt; is a combination of &lt;code&gt;req.baseUrl&lt;/code&gt; and &lt;code&gt;req.path&lt;/code&gt;, as shown in the following example.</source>
          <target state="translated">在中间件功能中， &lt;code&gt;req.originalUrl&lt;/code&gt; 是 &lt;code&gt;req.baseUrl&lt;/code&gt; 和 &lt;code&gt;req.path&lt;/code&gt; 的组合，如以下示例所示。</target>
        </trans-unit>
        <trans-unit id="1b9695c5a95683098cbe83e501c623d197fb2c54" translate="yes" xml:space="preserve">
          <source>In a multi-core system, you can increase the performance of a Node app by many times by launching a cluster of processes. A cluster runs multiple instances of the app, ideally one instance on each CPU core, thereby distributing the load and tasks among the instances.</source>
          <target state="translated">在多核系统中,您可以通过启动一个进程集群,将Node应用的性能提高很多倍。一个集群可以运行多个应用实例,理想的情况是每个CPU核上都有一个实例,从而在实例之间分配负载和任务。</target>
        </trans-unit>
        <trans-unit id="d9219943d8751ee08ccae4f63e118550ed716b5a" translate="yes" xml:space="preserve">
          <source>In addition to canonicalized MIME types, you may also use extension names mapped to these types for a slightly less verbose implementation:</source>
          <target state="translated">除了规范化的MIME类型,你也可以使用映射到这些类型的扩展名来实现一个稍微不那么啰嗦的实现。</target>
        </trans-unit>
        <trans-unit id="3a1ebe6a316944120f054e6b3ecf86bec4a3a893" translate="yes" xml:space="preserve">
          <source>In addition to restarting your app when it crashes, a process manager can enable you to:</source>
          <target state="translated">除了在应用程序崩溃时重启它,进程管理器还可以让你。</target>
        </trans-unit>
        <trans-unit id="cdbf043562176c3537e55ba0cfe2a4f1c7af06b3" translate="yes" xml:space="preserve">
          <source>In clustered apps, worker processes can crash individually without affecting the rest of the processes. Apart from performance advantages, failure isolation is another reason to run a cluster of app processes. Whenever a worker process crashes, always make sure to log the event and spawn a new process using cluster.fork().</source>
          <target state="translated">在集群应用中,工作进程可以单独崩溃而不影响其他进程。除了性能上的优势,故障隔离也是运行应用进程集群的另一个原因。每当一个工作进程崩溃时,一定要确保记录该事件,并使用 cluster.fork()生成一个新进程。</target>
        </trans-unit>
        <trans-unit id="a2e137b80252b7795c24b6fbfd91d5ad4e839ab1" translate="yes" xml:space="preserve">
          <source>In contrast, &lt;a href=&quot;https://www.npmjs.com/package/cookie-session&quot;&gt;cookie-session&lt;/a&gt; middleware implements cookie-backed storage: it serializes the entire session to the cookie, rather than just a session key. Only use it when session data is relatively small and easily encoded as primitive values (rather than objects). Although browsers are supposed to support at least 4096 bytes per cookie, to ensure you don&amp;rsquo;t exceed the limit, don&amp;rsquo;t exceed a size of 4093 bytes per domain. Also, be aware that the cookie data will be visible to the client, so if there is any reason to keep it secure or obscure, then express-session may be a better choice.</source>
          <target state="translated">相反，&lt;a href=&quot;https://www.npmjs.com/package/cookie-session&quot;&gt;cookie会话&lt;/a&gt;中间件实现了cookie支持的存储：它将整个会话序列化为cookie，而不仅仅是会话密钥。仅当会话数据相对较小且容易编码为原始值（而不是对象）时才使用它。尽管浏览器每个cookie至少应支持4096字节，但为确保不超出限制，每个域的大小不得超过4093字节。另外，请注意，cookie数据对于客户端将是可见的，因此，如果有任何理由确保它的安全或晦涩，则快速会话可能是一个更好的选择。</target>
        </trans-unit>
        <trans-unit id="dc45996bb8a7cf045e17bc6315b466bce596e8f1" translate="yes" xml:space="preserve">
          <source>In development, you started your app simply from the command line with &lt;code&gt;node server.js&lt;/code&gt; or something similar. But doing this in production is a recipe for disaster. If the app crashes, it will be offline until you restart it. To ensure your app restarts if it crashes, use a process manager. A process manager is a &amp;ldquo;container&amp;rdquo; for applications that facilitates deployment, provides high availability, and enables you to manage the application at runtime.</source>
          <target state="translated">在开发中，您只需使用 &lt;code&gt;node server.js&lt;/code&gt; 或类似的东西从命令行启动应用程序。但是在生产中这样做会带来灾难。如果应用程序崩溃，它将重新启动直到您重新启动。为确保您的应用在崩溃时重启，请使用进程管理器。流程管理器是应用程序的&amp;ldquo;容器&amp;rdquo;，可促进部署，提供高可用性并允许您在运行时管理应用程序。</target>
        </trans-unit>
        <trans-unit id="7b1a22cb1292dfa35893663bf985bc60671821fb" translate="yes" xml:space="preserve">
          <source>In development, you typically set environment variables in your interactive shell, for example by using &lt;code&gt;export&lt;/code&gt; or your &lt;code&gt;.bash_profile&lt;/code&gt; file. But in general you shouldn&amp;rsquo;t do that on a production server; instead, use your OS&amp;rsquo;s init system (systemd or Upstart). The next section provides more details about using your init system in general, but setting NODE_ENV is so important for performance (and easy to do), that it&amp;rsquo;s highlighted here.</source>
          <target state="translated">在开发中，通常会在交互式外壳中设置环境变量，例如通过使用 &lt;code&gt;export&lt;/code&gt; 或 &lt;code&gt;.bash_profile&lt;/code&gt; 文件。但是总的来说，您不应该在生产服务器上这样做；相反，请使用操作系统的初始化系统（systemd或Upstart）。下一节将提供有关一般使用初始化系统的更多详细信息，但是设置NODE_ENV对于性能非常重要（并且很容易做到），因此此处重点介绍。</target>
        </trans-unit>
        <trans-unit id="152698c9d800827204274bd7559be6a5fc677ffd" translate="yes" xml:space="preserve">
          <source>In fact, the routing methods can have more than one callback function as arguments. With multiple callback functions, it is important to provide &lt;code&gt;next&lt;/code&gt; as an argument to the callback function and then call &lt;code&gt;next()&lt;/code&gt; within the body of the function to hand off control to the next callback.</source>
          <target state="translated">实际上，路由方法可以具有多个回调函数作为参数。对于多个回调函数，重要的是提供 &lt;code&gt;next&lt;/code&gt; 作为回调函数的参数，然后在函数体内调用 &lt;code&gt;next()&lt;/code&gt; 将控制权移交给下一个回调。</target>
        </trans-unit>
        <trans-unit id="dc62d9a80194415bbeaa9339d2910d93f182c822" translate="yes" xml:space="preserve">
          <source>In general, there are two reasons for logging from your app: For debugging and for logging app activity (essentially, everything else). Using &lt;code&gt;console.log()&lt;/code&gt; or &lt;code&gt;console.error()&lt;/code&gt; to print log messages to the terminal is common practice in development. But &lt;a href=&quot;https://nodejs.org/api/console.html#console_console_1&quot;&gt;these functions are synchronous&lt;/a&gt; when the destination is a terminal or a file, so they are not suitable for production, unless you pipe the output to another program.</source>
          <target state="translated">通常，从您的应用程序记录日志有两个原因：调试和记录应用程序活动（本质上是其他所有事情）。在开发中，通常使用 &lt;code&gt;console.log()&lt;/code&gt; 或 &lt;code&gt;console.error()&lt;/code&gt; 将日志消息打印到终端。但是，当目标是终端或文件时，&lt;a href=&quot;https://nodejs.org/api/console.html#console_console_1&quot;&gt;这些功能是同步&lt;/a&gt;的，因此它们不适合生产，除非您将输出通过管道传输到另一个程序。</target>
        </trans-unit>
        <trans-unit id="3f5be045451a968bdc222ef5da33e50b1cb4f7f9" translate="yes" xml:space="preserve">
          <source>In most cases, you can simply replace the old version 3 middleware with its Express 4 counterpart. For details, see the module documentation in GitHub.</source>
          <target state="translated">在大多数情况下,你可以简单地用Express 4对应的模块替换旧的3版本中间件。详情请参见GitHub中的模块文档。</target>
        </trans-unit>
        <trans-unit id="159de15770e574438bbae749fda34e42a66cf946" translate="yes" xml:space="preserve">
          <source>In production, you don&amp;rsquo;t want your application to be offline, ever. This means you need to make sure it restarts both if the app crashes and if the server itself crashes. Although you hope that neither of those events occurs, realistically you must account for both eventualities by:</source>
          <target state="translated">在生产中，您永远都不希望应用程序处于脱机状态。这意味着您需要确保在应用程序崩溃以及服务器本身崩溃的情况下都重新启动。尽管您希望这些事件均不会发生，但实际上，您必须通过以下方法解决这两种情况：</target>
        </trans-unit>
        <trans-unit id="09a13f298fec0161077615289ef79338cded9d9a" translate="yes" xml:space="preserve">
          <source>In the &lt;code&gt;myapp&lt;/code&gt; directory, create a file named &lt;code&gt;app.js&lt;/code&gt; and copy in the code from the example above.</source>
          <target state="translated">在 &lt;code&gt;myapp&lt;/code&gt; 目录中，创建一个名为 &lt;code&gt;app.js&lt;/code&gt; 的文件，然后复制上面示例中的代码。</target>
        </trans-unit>
        <trans-unit id="f225e001ba23454a735ba8df37e6da8e06e2cc7b" translate="yes" xml:space="preserve">
          <source>In the above example &lt;code&gt;next&lt;/code&gt; is provided as the callback for &lt;code&gt;fs.writeFile&lt;/code&gt;, which is called with or without errors. If there is no error the second handler is executed, otherwise Express catches and processes the error.</source>
          <target state="translated">在上面的示例中， &lt;code&gt;next&lt;/code&gt; 提供了 &lt;code&gt;fs.writeFile&lt;/code&gt; 的回调，无论有无错误都将调用该回调。如果没有错误，则执行第二个处理程序，否则Express捕获并处理该错误。</target>
        </trans-unit>
        <trans-unit id="95c287f5cc79bdfc7ac60eb45684fdd3dd980b4c" translate="yes" xml:space="preserve">
          <source>In this case, EJS provides a &lt;code&gt;.renderFile()&lt;/code&gt; method with the same signature that Express expects: &lt;code&gt;(path, options, callback)&lt;/code&gt;, though note that it aliases this method as &lt;code&gt;ejs.__express&lt;/code&gt; internally so if you&amp;rsquo;re using &amp;ldquo;.ejs&amp;rdquo; extensions you don&amp;rsquo;t need to do anything.</source>
          <target state="translated">在这种情况下，EJS提供的 &lt;code&gt;.renderFile()&lt;/code&gt; 方法具有Express期望的相同签名：（ &lt;code&gt;(path, options, callback)&lt;/code&gt; ，但请注意，它在内部将此方法别名为 &lt;code&gt;ejs.__express&lt;/code&gt; 因此，如果您使用的是&amp;ldquo; .ejs&amp;rdquo;扩展程序，您无需执行任何操作。</target>
        </trans-unit>
        <trans-unit id="a6b42b96809ac3f60f7a81a9d5683d3a0c9f64ff" translate="yes" xml:space="preserve">
          <source>In this documentation and by convention, the object is always referred to as &lt;code&gt;res&lt;/code&gt; (and the HTTP request is &lt;code&gt;req&lt;/code&gt;) but its actual name is determined by the parameters to the callback function in which you&amp;rsquo;re working.</source>
          <target state="translated">在本文档中，按照惯例，该对象始终被称为 &lt;code&gt;res&lt;/code&gt; （并且HTTP请求为 &lt;code&gt;req&lt;/code&gt; ），但是其实际名称由您正在使用的回调函数的参数确定。</target>
        </trans-unit>
        <trans-unit id="9582bf3832738701b5764e47dbe543be76b78f1a" translate="yes" xml:space="preserve">
          <source>In this example, the &lt;code&gt;app.param(name, callback)&lt;/code&gt; signature is modified to &lt;code&gt;app.param(name, accessId)&lt;/code&gt;. Instead of accepting a name and a callback, &lt;code&gt;app.param()&lt;/code&gt; will now accept a name and a number.</source>
          <target state="translated">在此示例中， &lt;code&gt;app.param(name, callback)&lt;/code&gt; 签名被修改为 &lt;code&gt;app.param(name, accessId)&lt;/code&gt; 。 &lt;code&gt;app.param()&lt;/code&gt; 现在不再接受名称和回调，而是接受名称和数字。</target>
        </trans-unit>
        <trans-unit id="6c3a20ef60e847c02b61ef94b3e0849b5a7d178d" translate="yes" xml:space="preserve">
          <source>In this example, the &lt;code&gt;app.param(name, callback)&lt;/code&gt; signature remains the same, but instead of a middleware callback, a custom data type checking function has been defined to validate the data type of the user id.</source>
          <target state="translated">在此示例中， &lt;code&gt;app.param(name, callback)&lt;/code&gt; 签名保持不变，但是已定义了自定义数据类型检查功能来验证用户ID的数据类型，而不是中间件回调。</target>
        </trans-unit>
        <trans-unit id="4d9889978feab28ccfa5f51508e3caad96f4aab9" translate="yes" xml:space="preserve">
          <source>In this example, the &lt;code&gt;getPaidContent&lt;/code&gt; handler will be skipped but any remaining handlers in &lt;code&gt;app&lt;/code&gt; for &lt;code&gt;/a_route_behind_paywall&lt;/code&gt; would continue to be executed.</source>
          <target state="translated">在此示例中，将跳过 &lt;code&gt;getPaidContent&lt;/code&gt; 处理程序，但 &lt;code&gt;app&lt;/code&gt; 中 &lt;code&gt;/a_route_behind_paywall&lt;/code&gt; 的所有其余处理程序将继续执行。</target>
        </trans-unit>
        <trans-unit id="c9ffa45262c8a16d601014a91db15783b5bf118e" translate="yes" xml:space="preserve">
          <source>In this example, the &lt;code&gt;router.param(name, callback)&lt;/code&gt; signature is modified to &lt;code&gt;router.param(name, accessId)&lt;/code&gt;. Instead of accepting a name and a callback, &lt;code&gt;router.param()&lt;/code&gt; will now accept a name and a number.</source>
          <target state="translated">在此示例中，将 &lt;code&gt;router.param(name, callback)&lt;/code&gt; 签名修改为 &lt;code&gt;router.param(name, accessId)&lt;/code&gt; 。 &lt;code&gt;router.param()&lt;/code&gt; 现在将接受名称和数字，而不是接受名称和回调。</target>
        </trans-unit>
        <trans-unit id="74566bb259f5070a55f09e134a198ee8ae3b5df6" translate="yes" xml:space="preserve">
          <source>In this example, the &lt;code&gt;router.param(name, callback)&lt;/code&gt; signature remains the same, but instead of a middleware callback, a custom data type checking function has been defined to validate the data type of the user id.</source>
          <target state="translated">在此示例中， &lt;code&gt;router.param(name, callback)&lt;/code&gt; 签名保持不变，但是已定义了自定义数据类型检查功能来验证用户ID的数据类型，而不是中间件回调。</target>
        </trans-unit>
        <trans-unit id="bd9c1d20d6ac273e97036aa72676a475e6acde47" translate="yes" xml:space="preserve">
          <source>In this example, the generic &lt;code&gt;logErrors&lt;/code&gt; might write request and error information to &lt;code&gt;stderr&lt;/code&gt;, for example:</source>
          <target state="translated">在此示例中，通用 &lt;code&gt;logErrors&lt;/code&gt; 可能会将请求和错误信息写入 &lt;code&gt;stderr&lt;/code&gt; ，例如：</target>
        </trans-unit>
        <trans-unit id="bcad245b51efe7984b5dade0bf5a7cbeb031952a" translate="yes" xml:space="preserve">
          <source>In version 4 you can use a variable parameter to define the path where middleware functions are loaded, then read the value of the parameter from the route handler. For example:</source>
          <target state="translated">在第4版中,你可以使用一个变量参数来定义加载中间件函数的路径,然后从路由处理程序中读取参数的值。比如说</target>
        </trans-unit>
        <trans-unit id="66c16818de5666f307a77bcb440a8eecc1fcd43c" translate="yes" xml:space="preserve">
          <source>In your app, require the module: &lt;code&gt;require('module-name')&lt;/code&gt;</source>
          <target state="translated">在您的应用中，需要模块： &lt;code&gt;require('module-name')&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="395d7062ab7843a7ee4f5991daf254aa3b93669c" translate="yes" xml:space="preserve">
          <source>Indicates if the cookie should be signed.</source>
          <target state="translated">表示是否应该对cookie进行签名。</target>
        </trans-unit>
        <trans-unit id="211f40ef28c7f5b14c935100c27a2653ce0960b6" translate="yes" xml:space="preserve">
          <source>Indicates the app is behind a front-facing proxy, and to use the &lt;code&gt;X-Forwarded-*&lt;/code&gt; headers to determine the connection and the IP address of the client. NOTE: &lt;code&gt;X-Forwarded-*&lt;/code&gt; headers are easily spoofed and the detected IP addresses are unreliable.</source>
          <target state="translated">表示该应用程序位于前端代理之后，并使用 &lt;code&gt;X-Forwarded-*&lt;/code&gt; 标头确定客户端的连接和IP地址。注意： &lt;code&gt;X-Forwarded-*&lt;/code&gt; 标头很容易被欺骗，并且检测到的IP地址不可靠。</target>
        </trans-unit>
        <trans-unit id="703ffaf35e63b4913294162ae17f11e35f8cb893" translate="yes" xml:space="preserve">
          <source>Indicates whether the request is &amp;ldquo;fresh.&amp;rdquo; It is the opposite of &lt;code&gt;req.stale&lt;/code&gt;.</source>
          <target state="translated">指示请求是否为&amp;ldquo;新鲜&amp;rdquo;。这与 &lt;code&gt;req.stale&lt;/code&gt; 相反。</target>
        </trans-unit>
        <trans-unit id="d9e512e54d616ab1c0807de548067baef9d6c05a" translate="yes" xml:space="preserve">
          <source>Indicates whether the request is &amp;ldquo;stale,&amp;rdquo; and is the opposite of &lt;code&gt;req.fresh&lt;/code&gt;. For more information, see &lt;a href=&quot;#req.fresh&quot;&gt;req.fresh&lt;/a&gt;.</source>
          <target state="translated">指示请求是否为&amp;ldquo;过时&amp;rdquo;，与 &lt;code&gt;req.fresh&lt;/code&gt; 相反。有关更多信息，请参见&lt;a href=&quot;#req.fresh&quot;&gt;req.fresh&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="949b26dc9b76f03892a6d9c907fbfc374dc0381f" translate="yes" xml:space="preserve">
          <source>Inherit the value of settings with no default value.</source>
          <target state="translated">继承没有默认值的设置值。</target>
        </trans-unit>
        <trans-unit id="9f132f2d22a50934e4cd875664ea413e93e819ae" translate="yes" xml:space="preserve">
          <source>Inherit the value of settings with no default value; these are explicitly noted in the table below.</source>
          <target state="translated">继承没有默认值的设置值;这些设置值在下表中有明确说明。</target>
        </trans-unit>
        <trans-unit id="930b16535db4940aa3ef5f6374ce447ceadd0a3c" translate="yes" xml:space="preserve">
          <source>Initially &lt;code&gt;del&lt;/code&gt; was used instead of &lt;code&gt;delete&lt;/code&gt;, because &lt;code&gt;delete&lt;/code&gt; is a reserved keyword in JavaScript. However, as of ECMAScript 6, &lt;code&gt;delete&lt;/code&gt; and other reserved keywords can legally be used as property names.</source>
          <target state="translated">最初使用 &lt;code&gt;del&lt;/code&gt; 而不是 &lt;code&gt;delete&lt;/code&gt; ，因为 &lt;code&gt;delete&lt;/code&gt; 是JavaScript中的保留关键字。但是，从ECMAScript 6开始，可以合法使用 &lt;code&gt;delete&lt;/code&gt; 和其他保留关键字作为属性名称。</target>
        </trans-unit>
        <trans-unit id="4ffc08f6f5bdf8bfad718c7b4b614a3709b04e2b" translate="yes" xml:space="preserve">
          <source>Install Helmet like any other module:</source>
          <target state="translated">像其他模块一样安装Helmet。</target>
        </trans-unit>
        <trans-unit id="b89161bf34fe26894bf99744bd2b92e059003d00" translate="yes" xml:space="preserve">
          <source>Install Lightship as follows:</source>
          <target state="translated">安装光飞船的方法如下。</target>
        </trans-unit>
        <trans-unit id="2b00c0a835ec68a46a304a444cabe347ae9d8d1b" translate="yes" xml:space="preserve">
          <source>Install http-terminator as follows:</source>
          <target state="translated">安装http-terminator的方法如下。</target>
        </trans-unit>
        <trans-unit id="d79a75e251a2567eec31dc307e2d76419c66d43a" translate="yes" xml:space="preserve">
          <source>Install terminus as follows:</source>
          <target state="translated">安装总站的方法如下:</target>
        </trans-unit>
        <trans-unit id="f1390449425f8b24c7212143527fbad52edd087f" translate="yes" xml:space="preserve">
          <source>Install the Node.js module for the required functionality, then load it in your app at the application level or at the router level.</source>
          <target state="translated">为所需功能安装Node.js模块,然后在应用程序级别或路由器级别的应用程序中加载它。</target>
        </trans-unit>
        <trans-unit id="e71dd971fc6f2470094737a5dca246995ccd74e0" translate="yes" xml:space="preserve">
          <source>Install the module: &lt;code&gt;npm install --save &amp;lt;module-name&amp;gt;&lt;/code&gt;</source>
          <target state="translated">安装模块： &lt;code&gt;npm install --save &amp;lt;module-name&amp;gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="c81b79df3c6448eae7c4f80428b54cd5692a17d7" translate="yes" xml:space="preserve">
          <source>Installation</source>
          <target state="translated">Installation</target>
        </trans-unit>
        <trans-unit id="e38432618ce4d39079fc324e614d4d92a2815160" translate="yes" xml:space="preserve">
          <source>Installing</source>
          <target state="translated">Installing</target>
        </trans-unit>
        <trans-unit id="2473e96bc614a911821242119918a241a41836d6" translate="yes" xml:space="preserve">
          <source>Introduction</source>
          <target state="translated">Introduction</target>
        </trans-unit>
        <trans-unit id="31b353412d852ddf7a216dfe4d883a74e0af12b8" translate="yes" xml:space="preserve">
          <source>It also has settings (properties) that affect how the application behaves; for more information, see &lt;a href=&quot;#app.settings.table&quot;&gt;Application settings&lt;/a&gt;.</source>
          <target state="translated">它还具有影响应用程序行为的设置（属性）。有关更多信息，请参阅&lt;a href=&quot;#app.settings.table&quot;&gt;应用程序设置&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="85d63c29a8fff42f624e6456a349e0a5032185b9" translate="yes" xml:space="preserve">
          <source>It is a good idea to log output from the Forever tool and the script by using the logging options &lt;code&gt;-l&lt;/code&gt;, &lt;code&gt;-o&lt;/code&gt;, and &lt;code&gt;-e&lt;/code&gt;, as shown this example:</source>
          <target state="translated">最好使用日志记录选项 &lt;code&gt;-l&lt;/code&gt; ， &lt;code&gt;-o&lt;/code&gt; 和 &lt;code&gt;-e&lt;/code&gt; 来记录Forever工具和脚本的输出，如以下示例所示：</target>
        </trans-unit>
        <trans-unit id="7d99bfa8cd563b7ad4382f0598eaa633251afff3" translate="yes" xml:space="preserve">
          <source>It is similar to the &lt;a href=&quot;#req.baseUrl&quot;&gt;baseUrl&lt;/a&gt; property of the &lt;code&gt;req&lt;/code&gt; object, except &lt;code&gt;req.baseUrl&lt;/code&gt; returns the matched URL path, instead of the matched patterns.</source>
          <target state="translated">这是类似&lt;a href=&quot;#req.baseUrl&quot;&gt;的baseUrl&lt;/a&gt;的财产 &lt;code&gt;req&lt;/code&gt; 对象，除了 &lt;code&gt;req.baseUrl&lt;/code&gt; 返回，而不是匹配模式匹配的URL路径。</target>
        </trans-unit>
        <trans-unit id="9daf0d00dd679e88b3e1fb7d925c5313d5eca90a" translate="yes" xml:space="preserve">
          <source>It is true if the &lt;code&gt;cache-control&lt;/code&gt; request header doesn&amp;rsquo;t have a &lt;code&gt;no-cache&lt;/code&gt; directive and any of the following are true:</source>
          <target state="translated">如果 &lt;code&gt;cache-control&lt;/code&gt; 请求标头中没有 &lt;code&gt;no-cache&lt;/code&gt; 指令，并且以下任何一项为真，则为真：</target>
        </trans-unit>
        <trans-unit id="4b7e61af8cd1a601f5c3c06becc07e5484d2daec" translate="yes" xml:space="preserve">
          <source>It&amp;rsquo;s important to ensure that Express catches all errors that occur while running route handlers and middleware.</source>
          <target state="translated">确保Express能够捕获运行路由处理程序和中间件时发生的所有错误，这一点很重要。</target>
        </trans-unit>
        <trans-unit id="46379f1a97c84a9a0876ecbfec4fef449fd9deff" translate="yes" xml:space="preserve">
          <source>Joins the &lt;code&gt;links&lt;/code&gt; provided as properties of the parameter to populate the response&amp;rsquo;s &lt;code&gt;Link&lt;/code&gt; HTTP header field.</source>
          <target state="translated">连接作为参数属性提供的 &lt;code&gt;links&lt;/code&gt; ，以填充响应的&amp;ldquo; &lt;code&gt;Link&lt;/code&gt; HTTP&amp;rdquo;头字段。</target>
        </trans-unit>
        <trans-unit id="64b183e265c4ac7068d86bf6a5a9f60590f15264" translate="yes" xml:space="preserve">
          <source>Keep an eye out for &lt;a href=&quot;https://nodesecurity.io/advisories&quot;&gt;Node Security Project&lt;/a&gt; or &lt;a href=&quot;https://snyk.io/vuln/&quot;&gt;Snyk&lt;/a&gt; advisories that may affect Express or other modules that your app uses. In general, these databases are excellent resources for knowledge and tools about Node security.</source>
          <target state="translated">留意的&lt;a href=&quot;https://nodesecurity.io/advisories&quot;&gt;节点安全项目&lt;/a&gt;或&lt;a href=&quot;https://snyk.io/vuln/&quot;&gt;Snyk&lt;/a&gt;公告可能影响快递或其他的模块，应用程序使用。通常，这些数据库是有关节点安全性的知识和工具的绝佳资源。</target>
        </trans-unit>
        <trans-unit id="26906a858be062571856dd4980661de91f201f05" translate="yes" xml:space="preserve">
          <source>Keep processes and clusters alive forever.</source>
          <target state="translated">让进程和集群永远活着。</target>
        </trans-unit>
        <trans-unit id="a4129d993e8dffcb1e45f1dc72dbb846a789fbfe" translate="yes" xml:space="preserve">
          <source>Known and unknown security issues in 3.x have not been addressed since the last update (1 August, 2015). Using the 3.x line should not be considered secure.</source>
          <target state="translated">自上次更新(2015年8月1日)以来,3.x中已知和未知的安全问题尚未得到解决。使用3.x行不应被认为是安全的。</target>
        </trans-unit>
        <trans-unit id="199c619a5252be68272c05410a55eedcceab62cd" translate="yes" xml:space="preserve">
          <source>Later you may access this value through the &lt;a href=&quot;#req.signedCookies&quot;&gt;req.signedCookie&lt;/a&gt; object.</source>
          <target state="translated">稍后，您可以通过&lt;a href=&quot;#req.signedCookies&quot;&gt;req.signedCookie&lt;/a&gt;对象访问此值。</target>
        </trans-unit>
        <trans-unit id="9fe3e9c95f034b072a2a6a5c5ae760db38634aa5" translate="yes" xml:space="preserve">
          <source>Leading colon (:) in the name for app.param(name, fn)</source>
          <target state="translated">app.param(name,fn)名称中的前导冒号(:)。</target>
        </trans-unit>
        <trans-unit id="20d95d41d3198ed43f52c40e717843c04015f08b" translate="yes" xml:space="preserve">
          <source>Leading colon in name argument to app.param(name, fn)</source>
          <target state="translated">app.param(name,fn)的name参数中的前导冒号。</target>
        </trans-unit>
        <trans-unit id="651f9d8d6de1ab9afe3d64aa83b7b4296f811c6d" translate="yes" xml:space="preserve">
          <source>Let client errors fall-through as unhandled requests, otherwise forward a client error.</source>
          <target state="translated">让客户端错误作为未处理的请求落空,否则转发客户端错误。</target>
        </trans-unit>
        <trans-unit id="b7bd213f5681cd69a37c2a64347b2791cac4c11d" translate="yes" xml:space="preserve">
          <source>LevelDB</source>
          <target state="translated">LevelDB</target>
        </trans-unit>
        <trans-unit id="2cdc41a93f5cb0fa43d3beaa1b0481aeffc808a2" translate="yes" xml:space="preserve">
          <source>Licensed under the Creative Commons Attribution-ShareAlike License v3.0.</source>
          <target state="translated">根据知识共享署名-相同方式共享许可协议V3.0许可。</target>
        </trans-unit>
        <trans-unit id="86205b6f705f3bc6cdb86ea4c16a08e848aac545" translate="yes" xml:space="preserve">
          <source>Lightship</source>
          <target state="translated">Lightship</target>
        </trans-unit>
        <trans-unit id="db60f946c788f900abe16f7ff334645911fe2e35" translate="yes" xml:space="preserve">
          <source>List all running processes:</source>
          <target state="translated">列出所有正在运行的进程。</target>
        </trans-unit>
        <trans-unit id="a4651ac625be3e54ddc1113b9a13879f0a4799d7" translate="yes" xml:space="preserve">
          <source>List all the apps (services) under management:</source>
          <target state="translated">列出管理中的所有应用程序(服务)。</target>
        </trans-unit>
        <trans-unit id="c5d804870a4d5cd59c89d9151435d4c4a22dc053" translate="yes" xml:space="preserve">
          <source>Load &lt;a href=&quot;http://localhost:3000&quot;&gt;http://localhost:3000&lt;/a&gt; and see the home page being rendered by Express 4.</source>
          <target state="translated">加载&lt;a href=&quot;http://localhost:3000&quot;&gt;http：// localhost：3000&lt;/a&gt;并查看Express 4呈现的主页。</target>
        </trans-unit>
        <trans-unit id="8ecbe06616adfbc88a908b2817302de44250ecf9" translate="yes" xml:space="preserve">
          <source>Load router-level middleware by using the &lt;code&gt;router.use()&lt;/code&gt; and &lt;code&gt;router.METHOD()&lt;/code&gt; functions.</source>
          <target state="translated">通过使用 &lt;code&gt;router.use()&lt;/code&gt; 和 &lt;code&gt;router.METHOD()&lt;/code&gt; 函数加载路由器级中间件。</target>
        </trans-unit>
        <trans-unit id="33453bedcc4ce8753f1b797280d4235b68c3fe64" translate="yes" xml:space="preserve">
          <source>Lookup is performed in the following order:</source>
          <target state="translated">查询按以下顺序进行。</target>
        </trans-unit>
        <trans-unit id="eb67b8d64c494e14c3cb9c3388441d609b831965" translate="yes" xml:space="preserve">
          <source>MVC style controllers</source>
          <target state="translated">MVC风格的控制器</target>
        </trans-unit>
        <trans-unit id="0a2ef2b03dbaa594fb2ffdecb2bd6069073a2780" translate="yes" xml:space="preserve">
          <source>Make changes to the request and the response objects.</source>
          <target state="translated">对请求和响应对象进行修改。</target>
        </trans-unit>
        <trans-unit id="45b017a2f495f56735e99e7965f61a6563a63e61" translate="yes" xml:space="preserve">
          <source>Make sure login endpoints are protected to make private data more secure.</source>
          <target state="translated">确保登录端点受到保护,使私人数据更加安全。</target>
        </trans-unit>
        <trans-unit id="90d5fc913fb104ac305d946aff06c25ffdbd51bb" translate="yes" xml:space="preserve">
          <source>Make sure that the middleware functions are loaded in the correct order - load &lt;code&gt;errorHandler&lt;/code&gt; after loading the app routes.</source>
          <target state="translated">确保以正确的顺序加载中间件功能- 在加载应用程序路由后加载 &lt;code&gt;errorHandler&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="7adcd0c3d92807134c504e3a8b2475e210f165ff" translate="yes" xml:space="preserve">
          <source>Make the following changes to &lt;code&gt;app.js&lt;/code&gt;:</source>
          <target state="translated">对 &lt;code&gt;app.js&lt;/code&gt; 进行以下更改：</target>
        </trans-unit>
        <trans-unit id="02b393bac0cbea60a2720acf1e500c1464e94ddc" translate="yes" xml:space="preserve">
          <source>Manage your clusters remotely.</source>
          <target state="translated">远程管理您的集群。</target>
        </trans-unit>
        <trans-unit id="39c49957be44af6a3ec5e14f2fc41545ff844518" translate="yes" xml:space="preserve">
          <source>Marks the cookie to be used with HTTPS only.</source>
          <target state="translated">标志着该cookie只能在HTTPS下使用。</target>
        </trans-unit>
        <trans-unit id="88306943fea7e76f9cd57cae0ea6d8b32d2e8434" translate="yes" xml:space="preserve">
          <source>Method</source>
          <target state="translated">Method</target>
        </trans-unit>
        <trans-unit id="7e4ac6803c9159c694f63d089cb06b2519c16aba" translate="yes" xml:space="preserve">
          <source>Methods</source>
          <target state="translated">Methods</target>
        </trans-unit>
        <trans-unit id="4760ae67e6f3d26388471383c7378c4ba80f0baa" translate="yes" xml:space="preserve">
          <source>Middleware callback function examples</source>
          <target state="translated">中间件回调函数示例</target>
        </trans-unit>
        <trans-unit id="0fe0a9f4c586f8dc193511e302dc93a6dfcc5a05" translate="yes" xml:space="preserve">
          <source>Middleware can also be declared in an array for reusability.</source>
          <target state="translated">中间件也可以用数组来声明,以实现可重用。</target>
        </trans-unit>
        <trans-unit id="4e39e010957f9ac03c460538c049bf5ff52a15e0" translate="yes" xml:space="preserve">
          <source>Middleware function myLogger</source>
          <target state="translated">中间件函数myLogger</target>
        </trans-unit>
        <trans-unit id="d5192851e9be33f2620c994dcbab2c592551a143" translate="yes" xml:space="preserve">
          <source>Middleware function requestTime</source>
          <target state="translated">中间件函数 requestTime</target>
        </trans-unit>
        <trans-unit id="c67fbcdc5b5885d76b83c1e0c844c465e86fea8c" translate="yes" xml:space="preserve">
          <source>Middleware function validateCookies</source>
          <target state="translated">中间件函数validateCookies</target>
        </trans-unit>
        <trans-unit id="886002e3f779b0e4ff504a9c98f9ce3266ee151f" translate="yes" xml:space="preserve">
          <source>Middleware functions are executed sequentially, therefore the order of middleware inclusion is important.</source>
          <target state="translated">中间件功能是按顺序执行的,因此中间件的收录顺序很重要。</target>
        </trans-unit>
        <trans-unit id="327036496cbb48424162501a3ef70e28c1954d4d" translate="yes" xml:space="preserve">
          <source>Middleware functions can perform the following tasks:</source>
          <target state="translated">中间件功能可以执行以下任务:</target>
        </trans-unit>
        <trans-unit id="b70461c21d2c5132b2b2becb7e676b6df9437999" translate="yes" xml:space="preserve">
          <source>Middleware is like a plumbing pipe: requests start at the first middleware function defined and work their way &amp;ldquo;down&amp;rdquo; the middleware stack processing for each path they match.</source>
          <target state="translated">中间件就像是一条管道：请求从定义的第一个中间件功能开始，并按照其匹配的每个路径&amp;ldquo;向下&amp;rdquo;进行中间件堆栈处理。</target>
        </trans-unit>
        <trans-unit id="feb77a8ca8f6a6b24c0cfb335bc2a8ea63f008fa" translate="yes" xml:space="preserve">
          <source>Migrating from 3.x to 4.x.</source>
          <target state="translated">从3.x迁移到4.x。</target>
        </trans-unit>
        <trans-unit id="c0dcb865ad81a32e522b11fd1e33bae685e88709" translate="yes" xml:space="preserve">
          <source>Mixed</source>
          <target state="translated">Mixed</target>
        </trans-unit>
        <trans-unit id="fe2821d778e2849c2a35b47fa53f494ca2d14fa6" translate="yes" xml:space="preserve">
          <source>Modify settings dynamically to improve performance.</source>
          <target state="translated">动态修改设置以提高性能。</target>
        </trans-unit>
        <trans-unit id="f0c6acff24bc7941d7797f41a861782190b4b85f" translate="yes" xml:space="preserve">
          <source>MongoDB</source>
          <target state="translated">MongoDB</target>
        </trans-unit>
        <trans-unit id="47db1c37dff531d01f2702355c877c2b443d1b1e" translate="yes" xml:space="preserve">
          <source>More about HTTP Status Codes</source>
          <target state="translated">更多关于HTTP状态码</target>
        </trans-unit>
        <trans-unit id="fe6b75d221ea224bfb330bd02bedd9024c76025b" translate="yes" xml:space="preserve">
          <source>More than one callback function can handle a route (make sure you specify the &lt;code&gt;next&lt;/code&gt; object). For example:</source>
          <target state="translated">多个回调函数可以处理一条路由（确保指定了 &lt;code&gt;next&lt;/code&gt; 对象）。例如：</target>
        </trans-unit>
        <trans-unit id="727213957ff3274cceabb7e2ca22919105e2af96" translate="yes" xml:space="preserve">
          <source>Mount the middleware at &amp;ldquo;/static&amp;rdquo; to serve static content only when their request path is prefixed with &amp;ldquo;/static&amp;rdquo;:</source>
          <target state="translated">仅在中间件的请求路径带有&amp;ldquo; / static&amp;rdquo;前缀时，才将中间件安装在&amp;ldquo; / static&amp;rdquo;上以提供静态内容：</target>
        </trans-unit>
        <trans-unit id="3dd5dc7f551987273023bd069ccef8270b5514ba" translate="yes" xml:space="preserve">
          <source>Mounts the specified &lt;a href=&quot;http://expressjs.com/guide/using-middleware.html&quot;&gt;middleware&lt;/a&gt; function or functions at the specified path: the middleware function is executed when the base of the requested path matches &lt;code&gt;path&lt;/code&gt;.</source>
          <target state="translated">安装指定的&lt;a href=&quot;http://expressjs.com/guide/using-middleware.html&quot;&gt;中间件&lt;/a&gt;在指定的路径功能或多个功能：当请求的路径的基座匹配执行中间件功能 &lt;code&gt;path&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="1d6539d6900f82ce1dc307ff2b5a3a5b79eba74d" translate="yes" xml:space="preserve">
          <source>Moving to Express 4</source>
          <target state="translated">移动到Express 4</target>
        </trans-unit>
        <trans-unit id="8c437e7dc23532334c7556b8c3c40775a03f3c61" translate="yes" xml:space="preserve">
          <source>Moving to Express 5</source>
          <target state="translated">迁往Express 5</target>
        </trans-unit>
        <trans-unit id="deaa0c393a6613972aaccbf1fecfdad67aa21e88" translate="yes" xml:space="preserve">
          <source>MySQL</source>
          <target state="translated">MySQL</target>
        </trans-unit>
        <trans-unit id="71239dc7fa63320bc54fc3ac9302541e8f718aef" translate="yes" xml:space="preserve">
          <source>N/A (undefined)</source>
          <target state="translated">不适用(未定义)</target>
        </trans-unit>
        <trans-unit id="5010409ff1dbe4cbe7d17afd567c15ce82d5ad2a" translate="yes" xml:space="preserve">
          <source>NOTE: &lt;a href=&quot;https://github.com/oracle/node-oracledb#-installation&quot;&gt;See installation prerequisites&lt;/a&gt;.</source>
          <target state="translated">注意：&lt;a href=&quot;https://github.com/oracle/node-oracledb#-installation&quot;&gt;请参阅安装先决条件&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="0c7636ffe974139f353c811f06c3a3f2716844ba" translate="yes" xml:space="preserve">
          <source>NOTE: &lt;code&gt;express.static&lt;/code&gt; always sends weak ETags.</source>
          <target state="translated">注意： &lt;code&gt;express.static&lt;/code&gt; 始终发送弱ETag。</target>
        </trans-unit>
        <trans-unit id="b184a4e72b55f520f244b3c34bbb0da11b3b0da3" translate="yes" xml:space="preserve">
          <source>NOTE: All the forms of Node&amp;rsquo;s &lt;a href=&quot;https://nodejs.org/api/http.html#http_server_listen&quot;&gt;http.Server.listen()&lt;/a&gt; method are in fact actually supported.</source>
          <target state="translated">注意：实际上，实际上支持Node的&lt;a href=&quot;https://nodejs.org/api/http.html#http_server_listen&quot;&gt;http.Server.listen（）&lt;/a&gt;方法的所有形式。</target>
        </trans-unit>
        <trans-unit id="433e3b4f2ddb47dc43074f146fc5a2ed0e6e8a2e" translate="yes" xml:space="preserve">
          <source>NOTE: Express automatically decodes the values in &lt;code&gt;req.params&lt;/code&gt; (using &lt;code&gt;decodeURIComponent&lt;/code&gt;).</source>
          <target state="translated">注意：Express会自动解码 &lt;code&gt;req.params&lt;/code&gt; 中的值（使用 &lt;code&gt;decodeURIComponent&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="ffac96f05f9fb88c581942c23c1ae588749ece07" translate="yes" xml:space="preserve">
          <source>NOTE: For best results, &lt;a href=&quot;../advanced/best-practice-performance#use-a-reverse-proxy&quot;&gt;use a reverse proxy&lt;/a&gt; cache to improve performance of serving static assets.</source>
          <target state="translated">注意：为了获得最佳结果，请&lt;a href=&quot;../advanced/best-practice-performance#use-a-reverse-proxy&quot;&gt;使用反向代理&lt;/a&gt;缓存来提高服务静态资产的性能。</target>
        </trans-unit>
        <trans-unit id="01ddfe22c54681667d4c7d4858355434cfde4224" translate="yes" xml:space="preserve">
          <source>NOTE: For best results, &lt;a href=&quot;advanced/best-practice-performance#use-a-reverse-proxy&quot;&gt;use a reverse proxy&lt;/a&gt; cache to improve performance of serving static assets.</source>
          <target state="translated">注意：为了获得最佳结果，请&lt;a href=&quot;advanced/best-practice-performance#use-a-reverse-proxy&quot;&gt;使用反向代理&lt;/a&gt;缓存来提高服务静态资产的性能。</target>
        </trans-unit>
        <trans-unit id="c9cfcd7dab21d6d3ce7f79353e2abe260c5d6daa" translate="yes" xml:space="preserve">
          <source>NOTE: On systems that don&amp;rsquo;t support Upstart 1.4, the commands are slightly different. See &lt;a href=&quot;https://docs.strongloop.com/display/SLC/Setting+up+a+production+host#Settingupaproductionhost-RHELLinux5and6,Ubuntu10.04-.10,11.04-.10&quot;&gt;Setting up a production host (StrongLoop documentation)&lt;/a&gt; for more information.</source>
          <target state="translated">注意：在不支持Upstart 1.4的系统上，命令略有不同。有关更多信息，请参见&lt;a href=&quot;https://docs.strongloop.com/display/SLC/Setting+up+a+production+host#Settingupaproductionhost-RHELLinux5and6,Ubuntu10.04-.10,11.04-.10&quot;&gt;设置生产主机（StrongLoop文档）&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="45a9d38a34b92c068d0f922c978c01d380103af6" translate="yes" xml:space="preserve">
          <source>NOTE: This script requires Upstart 1.4 or newer, supported on Ubuntu 12.04-14.10.</source>
          <target state="translated">注意:这个脚本需要Upstart 1.4或更新版本,支持Ubuntu 12.04-14.10。</target>
        </trans-unit>
        <trans-unit id="e0990c59b7b6ef4dc7e1d6b135a418a2f074471b" translate="yes" xml:space="preserve">
          <source>NOTE: When you use &lt;code&gt;router.route()&lt;/code&gt;, middleware ordering is based on when the &lt;em&gt;route&lt;/em&gt; is created, not when method handlers are added to the route. For this purpose, you can consider method handlers to belong to the route to which they were added.</source>
          <target state="translated">注意：使用 &lt;code&gt;router.route()&lt;/code&gt; 时，中间件排序基于创建&lt;em&gt;路由的&lt;/em&gt;时间，而不是基于将方法处理程序添加到路由的时间。为此，您可以考虑方法处理程序属于它们添加到的路由。</target>
        </trans-unit>
        <trans-unit id="709a23220f2c3d64d1e1d6d18c4d5280f8d82fca" translate="yes" xml:space="preserve">
          <source>Name</source>
          <target state="translated">Name</target>
        </trans-unit>
        <trans-unit id="612a09210b2772847d45e0993f553be521760e68" translate="yes" xml:space="preserve">
          <source>Neither the &lt;code&gt;bin&lt;/code&gt; directory nor the extensionless &lt;code&gt;www&lt;/code&gt; file is mandatory for creating an Express app or starting the app. They are just suggestions made by the generator, so feel free to modify them to suit your needs.</source>
          <target state="translated">创建Express应用程序或启动该应用程序时， &lt;code&gt;bin&lt;/code&gt; 目录和无扩展名的 &lt;code&gt;www&lt;/code&gt; 文件都不是必需的。它们只是生成器提出的建议，因此可以随时对其进行修改以满足您的需求。</target>
        </trans-unit>
        <trans-unit id="40376d294105c45cc4be1971b67aad52424bac59" translate="yes" xml:space="preserve">
          <source>Neo4j</source>
          <target state="translated">Neo4j</target>
        </trans-unit>
        <trans-unit id="bb91a301ed292141003d1d5a1e5543d14d45f5d4" translate="yes" xml:space="preserve">
          <source>New features in 4.x.</source>
          <target state="translated">4.x中的新功能。</target>
        </trans-unit>
        <trans-unit id="6710871ed2399485ffa7720b360988d74d447270" translate="yes" xml:space="preserve">
          <source>Next, change &lt;code&gt;&quot;start&quot;: &quot;node ./bin/www&quot;&lt;/code&gt; in the &lt;code&gt;package.json&lt;/code&gt; file to &lt;code&gt;&quot;start&quot;: &quot;node app.js&quot;&lt;/code&gt;.</source>
          <target state="translated">接下来，将 &lt;code&gt;package.json&lt;/code&gt; 文件中的 &lt;code&gt;&quot;start&quot;: &quot;node ./bin/www&quot;&lt;/code&gt; 更改为 &lt;code&gt;&quot;start&quot;: &quot;node app.js&quot;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="c72dc19d3459d27d271478b5b7cc716bd405a272" translate="yes" xml:space="preserve">
          <source>Next, we&amp;rsquo;ll create a middleware function called &amp;ldquo;requestTime&amp;rdquo; and add a property called &lt;code&gt;requestTime&lt;/code&gt; to the request object.</source>
          <target state="translated">接下来，我们将创建一个名为&amp;ldquo; requestTime&amp;rdquo;的中间件函数，并将一个名为 &lt;code&gt;requestTime&lt;/code&gt; 的属性添加到请求对象。</target>
        </trans-unit>
        <trans-unit id="9525fa3e57e407965d47d1a562768efcd2349d03" translate="yes" xml:space="preserve">
          <source>Next, we&amp;rsquo;ll create a middleware function called &amp;ldquo;requestTime&amp;rdquo; and add it as a property called &lt;code&gt;requestTime&lt;/code&gt; to the request object.</source>
          <target state="translated">接下来，我们将创建一个名为&amp;ldquo; requestTime&amp;rdquo;的中间件函数，并将其作为名为 &lt;code&gt;requestTime&lt;/code&gt; 的属性添加到请求对象。</target>
        </trans-unit>
        <trans-unit id="7015a203ba7225b5f94e3a06a0955f7185fc3cd0" translate="yes" xml:space="preserve">
          <source>Next: Hello World</source>
          <target state="translated">下一个 你好,世界</target>
        </trans-unit>
        <trans-unit id="0562f580f124a61f177ad1f7356e26265e5f6944" translate="yes" xml:space="preserve">
          <source>No longer resolves relative URLs.</source>
          <target state="translated">不再解析相对URL。</target>
        </trans-unit>
        <trans-unit id="da851b820a844f905420515fc0764c867dc88f51" translate="yes" xml:space="preserve">
          <source>No matter how optimized an app is, a single instance can handle only a limited amount of load and traffic. One way to scale an app is to run multiple instances of it and distribute the traffic via a load balancer. Setting up a load balancer can improve your app&amp;rsquo;s performance and speed, and enable it to scale more than is possible with a single instance.</source>
          <target state="translated">无论应用程序如何优化，单个实例只能处理有限的负载和流量。扩展应用程序的一种方法是运行该应用程序的多个实例，并通过负载平衡器分配流量。设置负载平衡器可以提高应用程序的性能和速度，并使它的扩展能力超过单个实例。</target>
        </trans-unit>
        <trans-unit id="4a4c692813903d7fb04fffc1c18820b385f393fa" translate="yes" xml:space="preserve">
          <source>Node applications crash if they encounter an uncaught exception. The foremost thing you need to do is to ensure your app is well-tested and handles all exceptions (see &lt;a href=&quot;#handle-exceptions-properly&quot;&gt;handle exceptions properly&lt;/a&gt; for details). But as a fail-safe, put a mechanism in place to ensure that if and when your app crashes, it will automatically restart.</source>
          <target state="translated">如果节点应用程序遇到未捕获的异常，则会崩溃。您需要做的最重要的事情是确保您的应用程序经过了良好的测试并可以处理所有异常（有关详细信息，请参阅&lt;a href=&quot;#handle-exceptions-properly&quot;&gt;正确处理异常&lt;/a&gt;）。但是，为确保故障安全，请采用适当的机制以确保当您的应用崩溃时，它会自动重启。</target>
        </trans-unit>
        <trans-unit id="a5941f7d8c7d9c43b943aeba94475609e690935f" translate="yes" xml:space="preserve">
          <source>Node apps crash when they encounter an uncaught exception. Not handling exceptions and taking appropriate actions will make your Express app crash and go offline. If you follow the advice in &lt;a href=&quot;#ensure-your-app-automatically-restarts&quot;&gt;Ensure your app automatically restarts&lt;/a&gt; below, then your app will recover from a crash. Fortunately, Express apps typically have a short startup time. Nevertheless, you want to avoid crashing in the first place, and to do that, you need to handle exceptions properly.</source>
          <target state="translated">节点应用程序遇到未捕获的异常时崩溃。不处理异常并采取适当措施将使您的Express应用程序崩溃并脱机。如果您遵循下面的&amp;ldquo; &lt;a href=&quot;#ensure-your-app-automatically-restarts&quot;&gt;确保应用程序自动重启&amp;rdquo;&lt;/a&gt;中的建议，则您的应用程序将从崩溃中恢复。幸运的是，Express应用程序的启动时间通常很短。不过，您首先要避免崩溃，而要做到这一点，您需要正确处理异常。</target>
        </trans-unit>
        <trans-unit id="10b3493287f831e81a438811a1ffba01f8cec4b7" translate="yes" xml:space="preserve">
          <source>Node.js</source>
          <target state="translated">Node.js</target>
        </trans-unit>
        <trans-unit id="3ddce1f09b12c9b74fa5f507618d99fa0a205280" translate="yes" xml:space="preserve">
          <source>Node.js 0.10 can leak &lt;code&gt;fd&lt;/code&gt;s in certain situations that affect &lt;code&gt;express.static&lt;/code&gt; and &lt;code&gt;res.sendfile&lt;/code&gt;. Malicious requests could cause &lt;code&gt;fd&lt;/code&gt;s to leak and eventually lead to &lt;code&gt;EMFILE&lt;/code&gt; errors and server unresponsiveness.</source>
          <target state="translated">在某些情况下，Node.js 0.10可能会泄漏 &lt;code&gt;fd&lt;/code&gt; ，从而影响 &lt;code&gt;express.static&lt;/code&gt; 和 &lt;code&gt;res.sendfile&lt;/code&gt; 。恶意请求可能导致 &lt;code&gt;fd&lt;/code&gt; 泄漏，并最终导致 &lt;code&gt;EMFILE&lt;/code&gt; 错误和服务器无响应。</target>
        </trans-unit>
        <trans-unit id="9741f2a3bd55c90d910a8ecc5c0414ce610d4764" translate="yes" xml:space="preserve">
          <source>Node.js vulnerabilities directly affect Express. Therefore &lt;a href=&quot;http://blog.nodejs.org/vulnerability/&quot;&gt;keep a watch on Node.js vulnerabilities&lt;/a&gt; and make sure you are using the latest stable version of Node.js.</source>
          <target state="translated">Node.js漏洞直接影响Express。因此，&lt;a href=&quot;http://blog.nodejs.org/vulnerability/&quot;&gt;请密切注意Node.js漏洞&lt;/a&gt;，并确保您使用的是Node.js的最新稳定版本。</target>
        </trans-unit>
        <trans-unit id="6eef6648406c333a4035cd5e60d0bf2ecf2606d7" translate="yes" xml:space="preserve">
          <source>None</source>
          <target state="translated">None</target>
        </trans-unit>
        <trans-unit id="69c7a0869924ab847d45496a2c4c369e67fc828b" translate="yes" xml:space="preserve">
          <source>Not inherit the value of settings that have a default value. You must set the value in the sub-app.</source>
          <target state="translated">不继承有默认值的设置值。您必须在子应用中设置该值。</target>
        </trans-unit>
        <trans-unit id="075ad17bf0b7941dbb5266dff29ce789f19a2c4c" translate="yes" xml:space="preserve">
          <source>Note how &lt;code&gt;next()&lt;/code&gt; is called after &lt;code&gt;await cookieValidator(req.cookies)&lt;/code&gt;. This ensures that if &lt;code&gt;cookieValidator&lt;/code&gt; resolves, the next middleware in the stack will get called. If you pass anything to the &lt;code&gt;next()&lt;/code&gt; function (except the string &lt;code&gt;'route'&lt;/code&gt; or &lt;code&gt;'router'&lt;/code&gt;), Express regards the current request as being an error and will skip any remaining non-error handling routing and middleware functions.</source>
          <target state="translated">注意如何 &lt;code&gt;next()&lt;/code&gt; 之后被调用 &lt;code&gt;await cookieValidator(req.cookies)&lt;/code&gt; 。这样可以确保如果 &lt;code&gt;cookieValidator&lt;/code&gt; 解析，则将调用堆栈中的下一个中间件。如果将任何内容传递给 &lt;code&gt;next()&lt;/code&gt; 函数（字符串 &lt;code&gt;'route'&lt;/code&gt; 或 &lt;code&gt;'router'&lt;/code&gt; 除外），Express都会将当前请求视为错误，并会跳过所有剩余的非错误处理路由和中间件函数。</target>
        </trans-unit>
        <trans-unit id="92dd104c13ec8b17b8cc83276153017e9866e189" translate="yes" xml:space="preserve">
          <source>Note that if more than one app with the same name is running, &lt;code&gt;pm2&lt;/code&gt; commands affect all of them. So use IDs instead of names to manage individual apps.</source>
          <target state="translated">请注意，如果正在运行多个同名应用程序，则 &lt;code&gt;pm2&lt;/code&gt; 命令会影响所有这些应用程序。因此，请使用ID而非名称来管理单个应用。</target>
        </trans-unit>
        <trans-unit id="e95a96ffefc105691ef7c3e1d1ba12457886d14b" translate="yes" xml:space="preserve">
          <source>Note that sub-apps will:</source>
          <target state="translated">注意,子应用将。</target>
        </trans-unit>
        <trans-unit id="1dd9ac5b73067a6e6eb2985047c770241ffa317a" translate="yes" xml:space="preserve">
          <source>Note that the default error handler can get triggered if you call &lt;code&gt;next()&lt;/code&gt; with an error in your code more than once, even if custom error handling middleware is in place.</source>
          <target state="translated">请注意，如果使用代码中的错误多次调用 &lt;code&gt;next()&lt;/code&gt; ，则即使使用了自定义错误处理中间件，也会触发默认错误处理程序。</target>
        </trans-unit>
        <trans-unit id="edd4bd395ffe452d04f35bc47b8eb7ca06225c08" translate="yes" xml:space="preserve">
          <source>Note: The view engine cache does not cache the contents of the template&amp;rsquo;s output, only the underlying template itself. The view is still re-rendered with every request even when the cache is on.</source>
          <target state="translated">注意：视图引擎缓存不缓存模板输出的内容，仅缓存基础模板本身。即使打开了缓存，该视图仍会与每个请求一起重新呈现。</target>
        </trans-unit>
        <trans-unit id="62b3d65b056b5fb7bd9a77db248e1eb431fd3e7e" translate="yes" xml:space="preserve">
          <source>Note: calling &lt;code&gt;res.set()&lt;/code&gt; after &lt;code&gt;res.append()&lt;/code&gt; will reset the previously-set header value.</source>
          <target state="translated">注：调用 &lt;code&gt;res.set()&lt;/code&gt; 后 &lt;code&gt;res.append()&lt;/code&gt; 将重置预先设定的头值。</target>
        </trans-unit>
        <trans-unit id="ee00ea842b7774ac5424a94c3f8a1eca9bf291a6" translate="yes" xml:space="preserve">
          <source>Notice that when &lt;em&gt;not&lt;/em&gt; calling &amp;ldquo;next&amp;rdquo; in an error-handling function, you are responsible for writing (and ending) the response. Otherwise those requests will &amp;ldquo;hang&amp;rdquo; and will not be eligible for garbage collection.</source>
          <target state="translated">请注意，在错误处理函数中&lt;em&gt;不&lt;/em&gt;调用&amp;ldquo; next&amp;rdquo;时，您负责编写（并结束）响应。否则，这些请求将&amp;ldquo;挂起&amp;rdquo;，并且不符合垃圾回收的条件。</target>
        </trans-unit>
        <trans-unit id="8f0e59d44f7350ade4f4561e1c79a9f237691602" translate="yes" xml:space="preserve">
          <source>Notice the call above to &lt;code&gt;next()&lt;/code&gt;. Calling this function invokes the next middleware function in the app. The &lt;code&gt;next()&lt;/code&gt; function is not a part of the Node.js or Express API, but is the third argument that is passed to the middleware function. The &lt;code&gt;next()&lt;/code&gt; function could be named anything, but by convention it is always named &amp;ldquo;next&amp;rdquo;. To avoid confusion, always use this convention.</source>
          <target state="translated">注意上面对 &lt;code&gt;next()&lt;/code&gt; 的调用。调用此函数将调用应用程序中的下一个中间件函数。在 &lt;code&gt;next()&lt;/code&gt; 函数不是Node.js的或快递API的一部分，但传递给中间件功能的第三个参数。在 &lt;code&gt;next()&lt;/code&gt; 函数可以被命名为任何东西，但是按照惯例，它总是被命名为&amp;ldquo;下一个&amp;rdquo;。为避免混淆，请始终使用此约定。</target>
        </trans-unit>
        <trans-unit id="ac34737375e1ec466948749162a90d6ccec28327" translate="yes" xml:space="preserve">
          <source>Now all errors asynchronous and synchronous get propagated to the error middleware.</source>
          <target state="translated">现在,所有异步和同步的错误都会被传播到错误中间件。</target>
        </trans-unit>
        <trans-unit id="66c86cbbcaa5bb9e0ee7b12ec877ad1f51ccb64a" translate="yes" xml:space="preserve">
          <source>Now available as &lt;code&gt;app.mountpath&lt;/code&gt;.</source>
          <target state="translated">现在可以作为 &lt;code&gt;app.mountpath&lt;/code&gt; 使用。</target>
        </trans-unit>
        <trans-unit id="ac561347d088b0883fb91d6a892240f8d83ba881" translate="yes" xml:space="preserve">
          <source>Now install Express in the &lt;code&gt;myapp&lt;/code&gt; directory and save it in the dependencies list. For example:</source>
          <target state="translated">现在，将Express安装在 &lt;code&gt;myapp&lt;/code&gt; 目录中，并将其保存在依赖项列表中。例如：</target>
        </trans-unit>
        <trans-unit id="e6bb906b09f620bee31f484609b2f0b4c223d479" translate="yes" xml:space="preserve">
          <source>Now install the new generator:</source>
          <target state="translated">现在安装新的发电机。</target>
        </trans-unit>
        <trans-unit id="6869df3970ebf8c3d5ac8230dcc3a9906ee7e596" translate="yes" xml:space="preserve">
          <source>Now suppose you wanted to ignore logging requests for static files, but to continue logging routes and middleware defined after &lt;code&gt;logger()&lt;/code&gt;. You would simply move the call to &lt;code&gt;express.static()&lt;/code&gt; to the top, before adding the logger middleware:</source>
          <target state="translated">现在，假设您想忽略对静态文件的日志记录请求，但是继续记录在 &lt;code&gt;logger()&lt;/code&gt; 之后定义的路由和中间件。在添加记录器中间件之前，您只需将对 &lt;code&gt;express.static()&lt;/code&gt; 的调用移到顶部即可：</target>
        </trans-unit>
        <trans-unit id="5d017fbc4da6a1d882e691e9b179dfce350b8c28" translate="yes" xml:space="preserve">
          <source>Now the &lt;code&gt;express&lt;/code&gt; command on your system is updated to the Express 4 generator.</source>
          <target state="translated">现在，系统上的 &lt;code&gt;express&lt;/code&gt; 命令已更新为Express 4生成器。</target>
        </trans-unit>
        <trans-unit id="3cbc3e742af294ec1390daf4b1237500726631d4" translate="yes" xml:space="preserve">
          <source>Now, you can load the files that are in the &lt;code&gt;public&lt;/code&gt; directory from the &lt;code&gt;/static&lt;/code&gt; path prefix.</source>
          <target state="translated">现在，您可以从 &lt;code&gt;/static&lt;/code&gt; 路径前缀加载 &lt;code&gt;public&lt;/code&gt; 目录中的文件。</target>
        </trans-unit>
        <trans-unit id="5c6651072154305e52e1341f9e514f61cde2de3f" translate="yes" xml:space="preserve">
          <source>Now, you can load the files that are in the &lt;code&gt;public&lt;/code&gt; directory:</source>
          <target state="translated">现在，您可以加载 &lt;code&gt;public&lt;/code&gt; 目录中的文件：</target>
        </trans-unit>
        <trans-unit id="b7baa1d40c4ea29afc9098732bffee2a861a6c44" translate="yes" xml:space="preserve">
          <source>Number</source>
          <target state="translated">Number</target>
        </trans-unit>
        <trans-unit id="2883f191bc5ebfdc16c0813eff659b35363ea69b" translate="yes" xml:space="preserve">
          <source>Object</source>
          <target state="translated">Object</target>
        </trans-unit>
        <trans-unit id="807bbc0f11d53f3f607798ea46a9ad44137ad154" translate="yes" xml:space="preserve">
          <source>Object containing HTTP headers to serve with the file.</source>
          <target state="translated">包含HTTP头文件的对象。</target>
        </trans-unit>
        <trans-unit id="520b5013d8cc60ba1ed6f2ecea81361f62092f18" translate="yes" xml:space="preserve">
          <source>Object inspection depth.</source>
          <target state="translated">对象检查深度。</target>
        </trans-unit>
        <trans-unit id="c79eb463042b176d839e8dc0f651ddc205e8b8fb" translate="yes" xml:space="preserve">
          <source>On &lt;code&gt;GET /user/42/3&lt;/code&gt;, the following is printed:</source>
          <target state="translated">在 &lt;code&gt;GET /user/42/3&lt;/code&gt; ，打印以下内容：</target>
        </trans-unit>
        <trans-unit id="eb678c7ff155ef3b53cbe888ea6d4e3adf535c26" translate="yes" xml:space="preserve">
          <source>On &lt;code&gt;GET /user/42&lt;/code&gt;, the following is printed:</source>
          <target state="translated">在 &lt;code&gt;GET /user/42&lt;/code&gt; ，打印以下内容：</target>
        </trans-unit>
        <trans-unit id="99ee71c23f48bc7f1e8d68720910df2862398888" translate="yes" xml:space="preserve">
          <source>On MacOS or Linux, run the app with this command:</source>
          <target state="translated">在MacOS或Linux上,用这个命令运行应用程序。</target>
        </trans-unit>
        <trans-unit id="f8b5fa4990ddf0c149d79acf346899fb6ce7fe05" translate="yes" xml:space="preserve">
          <source>On Windows Command Prompt, use this command:</source>
          <target state="translated">在Windows命令提示符下,使用此命令。</target>
        </trans-unit>
        <trans-unit id="5f56e0542378d07492126894fd7416616005bd31" translate="yes" xml:space="preserve">
          <source>On Windows PowerShell, use this command:</source>
          <target state="translated">在Windows PowerShell中,使用此命令。</target>
        </trans-unit>
        <trans-unit id="58d0a8a0be8f218b5d6ba5182069de6033c6eada" translate="yes" xml:space="preserve">
          <source>On Windows, use the corresponding command.</source>
          <target state="translated">在Windows上,使用相应的命令。</target>
        </trans-unit>
        <trans-unit id="3cc478e962d2cf3b3f6b50aab1cee5be70a74d77" translate="yes" xml:space="preserve">
          <source>On Windows, use this command:</source>
          <target state="translated">在Windows上,使用此命令。</target>
        </trans-unit>
        <trans-unit id="56555e12431403f8b119ea9fa00ba4191809642b" translate="yes" xml:space="preserve">
          <source>Once running, a given application with the name &lt;code&gt;app&lt;/code&gt; can be scaled like so:</source>
          <target state="translated">运行后，可以按以下方式缩放名称为 &lt;code&gt;app&lt;/code&gt; 的给定应用程序：</target>
        </trans-unit>
        <trans-unit id="b2c8eb68d5989afbc0861f4f3404dc10e0df228d" translate="yes" xml:space="preserve">
          <source>Once set, the value of &lt;code&gt;app.locals&lt;/code&gt; properties persist throughout the life of the application, in contrast with &lt;a href=&quot;#res.locals&quot;&gt;res.locals&lt;/a&gt; properties that are valid only for the lifetime of the request.</source>
          <target state="translated">设置后， &lt;code&gt;app.locals&lt;/code&gt; 属性的值将在应用程序的整个生命周期中保持不变，而&lt;a href=&quot;#res.locals&quot;&gt;res.locals&lt;/a&gt;属性仅在请求的生命周期内有效。</target>
        </trans-unit>
        <trans-unit id="5693dbe548abe2948dff59c9d800c9b159494875" translate="yes" xml:space="preserve">
          <source>Once you&amp;rsquo;ve created a router object, you can add middleware and HTTP method routes (such as &lt;code&gt;get&lt;/code&gt;, &lt;code&gt;put&lt;/code&gt;, &lt;code&gt;post&lt;/code&gt;, and so on) to it just like an application. For example:</source>
          <target state="translated">创建路由器对象 &lt;code&gt;post&lt;/code&gt; ，就可以像应用程序一样向其添加中间件和HTTP方法路由（例如 &lt;code&gt;get&lt;/code&gt; ， &lt;code&gt;put&lt;/code&gt; ，post等）。例如：</target>
        </trans-unit>
        <trans-unit id="9508ce31745dab5c28e0b5f9b3eeee9c92446502" translate="yes" xml:space="preserve">
          <source>One thing you should &lt;em&gt;not&lt;/em&gt; do is to listen for the &lt;code&gt;uncaughtException&lt;/code&gt; event, emitted when an exception bubbles all the way back to the event loop. Adding an event listener for &lt;code&gt;uncaughtException&lt;/code&gt; will change the default behavior of the process that is encountering an exception; the process will continue to run despite the exception. This might sound like a good way of preventing your app from crashing, but continuing to run the app after an uncaught exception is a dangerous practice and is not recommended, because the state of the process becomes unreliable and unpredictable.</source>
          <target state="translated">你应该有一两件事&lt;em&gt;不能&lt;/em&gt;做的是侦听 &lt;code&gt;uncaughtException&lt;/code&gt; 事件，当异常气泡一路回到事件循环发出。为 &lt;code&gt;uncaughtException&lt;/code&gt; 添加事件侦听器将更改遇到异常的进程的默认行为。尽管有例外，该过程将继续运行。这听起来像是防止应用程序崩溃的好方法，但是在未捕获的异常之后继续运行应用程序是一种危险的做法，因此不建议这样做，因为进程的状态变得不可靠且不可预测。</target>
        </trans-unit>
        <trans-unit id="4326bbc97fbaf369425a4247c85a2f7aa4cd2f26" translate="yes" xml:space="preserve">
          <source>Operating Node apps (StrongLoop documentation)</source>
          <target state="translated">操作Node应用(StrongLoop文档)。</target>
        </trans-unit>
        <trans-unit id="85babb5b3aa1279e6bfb7260c5ea33f7fc7d97ba" translate="yes" xml:space="preserve">
          <source>Option for serving dotfiles. Possible values are &amp;ldquo;allow&amp;rdquo;, &amp;ldquo;deny&amp;rdquo;, &amp;ldquo;ignore&amp;rdquo;.</source>
          <target state="translated">用于提供点文件的选项。可能的值为&amp;ldquo;允许&amp;rdquo;，&amp;ldquo;拒绝&amp;rdquo;，&amp;ldquo;忽略&amp;rdquo;。</target>
        </trans-unit>
        <trans-unit id="dc993d1cbb242d7c8de4a7dfd3af6bd299104236" translate="yes" xml:space="preserve">
          <source>Optionally, you can specify &lt;code&gt;defaultValue&lt;/code&gt; to set a default value if the parameter is not found in any of the request objects.</source>
          <target state="translated">（可选）如果在任何请求对象中都找不到该参数，则可以指定 &lt;code&gt;defaultValue&lt;/code&gt; 设置默认值。</target>
        </trans-unit>
        <trans-unit id="f7a2df8722f3d4dab4468810910f5632a6dfab8c" translate="yes" xml:space="preserve">
          <source>Options for `etag` setting</source>
          <target state="translated">`etag`设置的选项</target>
        </trans-unit>
        <trans-unit id="50e64249cb8131bb957cf969ebe09c06d2b4e117" translate="yes" xml:space="preserve">
          <source>Options for `trust proxy` setting</source>
          <target state="translated">&quot;信任代理 &quot;设置的选项</target>
        </trans-unit>
        <trans-unit id="5608055a9f70afc706ebfece230f48148759dd29" translate="yes" xml:space="preserve">
          <source>Or the equivalent:</source>
          <target state="translated">或同等的。</target>
        </trans-unit>
        <trans-unit id="8a1681e612a2025087b703fdf1f8f617e506b053" translate="yes" xml:space="preserve">
          <source>Oracle</source>
          <target state="translated">Oracle</target>
        </trans-unit>
        <trans-unit id="bbafc259f7206d8b67a407f80c6229a1b5c432ad" translate="yes" xml:space="preserve">
          <source>Other changes</source>
          <target state="translated">其他变动</target>
        </trans-unit>
        <trans-unit id="b5a572632bc96cbca5352ea6f702955ab6ccb58f" translate="yes" xml:space="preserve">
          <source>Overriding the Express API</source>
          <target state="translated">覆盖Express API</target>
        </trans-unit>
        <trans-unit id="0efc2e6be4c23b9a513d7ce0dcff8ed80e8912e7" translate="yes" xml:space="preserve">
          <source>Overview</source>
          <target state="translated">Overview</target>
        </trans-unit>
        <trans-unit id="885406d21e0b67e81c188e8aac4751a3ede8af09" translate="yes" xml:space="preserve">
          <source>PM2</source>
          <target state="translated">PM2</target>
        </trans-unit>
        <trans-unit id="84fe177f5f3bec84074dbeb3a3f954d349f4cb69" translate="yes" xml:space="preserve">
          <source>PM2 is a production process manager for Node.js applications, that has a built-in load balancer. PM2 allows you to keep applications alive forever and reload them without downtime, and will facilitate common system admin tasks. PM2 also enables you to manage application logging, monitoring, and clustering.</source>
          <target state="translated">PM2是一个Node.js应用的生产流程管理器,它内置了一个负载平衡器。PM2可以让你永远保持应用程序的活力,并在不停机的情况下重新加载它们,并将方便常见的系统管理任务。PM2还可以让你管理应用程序的日志、监控和集群。</target>
        </trans-unit>
        <trans-unit id="f138388f35dc966da7a35fe2df2e27e241f4554e" translate="yes" xml:space="preserve">
          <source>Param callback functions are local to the router on which they are defined. They are not inherited by mounted apps or routers. Hence, param callbacks defined on &lt;code&gt;app&lt;/code&gt; will be triggered only by route parameters defined on &lt;code&gt;app&lt;/code&gt; routes.</source>
          <target state="translated">参数回调函数对于定义它们的路由器而言是本地的。它们不会被已安装的应用程序或路由器继承。因此，仅在 &lt;code&gt;app&lt;/code&gt; 路由上定义的路由参数才会触发在 &lt;code&gt;app&lt;/code&gt; 定义的参数回调。</target>
        </trans-unit>
        <trans-unit id="80f8d55bd236670f21f27b8474a8d4d3facaa4da" translate="yes" xml:space="preserve">
          <source>Param callback functions are local to the router on which they are defined. They are not inherited by mounted apps or routers. Hence, param callbacks defined on &lt;code&gt;router&lt;/code&gt; will be triggered only by route parameters defined on &lt;code&gt;router&lt;/code&gt; routes.</source>
          <target state="translated">参数回调函数对于定义它们的路由器而言是本地的。它们不会被已安装的应用程序或路由器继承。因此， &lt;code&gt;router&lt;/code&gt; 定义的参数回调仅由 &lt;code&gt;router&lt;/code&gt; 路由上定义的路由参数触发。</target>
        </trans-unit>
        <trans-unit id="519e39132bb98418cc0483cc446ccf5f3c8dcffe" translate="yes" xml:space="preserve">
          <source>Path</source>
          <target state="translated">Path</target>
        </trans-unit>
        <trans-unit id="61788d22ee17f02f69df425aee02ba8cfff34af4" translate="yes" xml:space="preserve">
          <source>Path (route) for which the middleware function applies.</source>
          <target state="translated">中间件功能适用的路径(途径)。</target>
        </trans-unit>
        <trans-unit id="48a73f8059b8cb5bcff8c0fe6505c6a59c998de2" translate="yes" xml:space="preserve">
          <source>Path Pattern</source>
          <target state="translated">路径模式</target>
        </trans-unit>
        <trans-unit id="c9bcba0223827d43099c567d879e2392a81b7c50" translate="yes" xml:space="preserve">
          <source>Path examples</source>
          <target state="translated">路径示例</target>
        </trans-unit>
        <trans-unit id="fef5b3031d3908cdf103ff04f26284ecdaed8f1d" translate="yes" xml:space="preserve">
          <source>Path for the cookie. Defaults to &amp;ldquo;/&amp;rdquo;.</source>
          <target state="translated">Cookie的路径。默认为&amp;ldquo; /&amp;rdquo;。</target>
        </trans-unit>
        <trans-unit id="725dc941a27ffdbae57de49d342b6b2f81c87e2d" translate="yes" xml:space="preserve">
          <source>Path-relative redirects are also possible. If you were on &lt;code&gt;http://example.com/admin/post/new&lt;/code&gt;, the following would redirect to &lt;code&gt;http://example.com/admin/post&lt;/code&gt;:</source>
          <target state="translated">相对路径重定向也是可能的。如果您使用的是 &lt;code&gt;http://example.com/admin/post/new&lt;/code&gt; ，则以下内容将重定向到 &lt;code&gt;http://example.com/admin/post&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="5cc38630617140005413c660475ab5d759acc863" translate="yes" xml:space="preserve">
          <source>Performs content-negotiation on the &lt;code&gt;Accept&lt;/code&gt; HTTP header on the request object, when present. It uses &lt;a href=&quot;#req.accepts&quot;&gt;req.accepts()&lt;/a&gt; to select a handler for the request, based on the acceptable types ordered by their quality values. If the header is not specified, the first callback is invoked. When no match is found, the server responds with 406 &amp;ldquo;Not Acceptable&amp;rdquo;, or invokes the &lt;code&gt;default&lt;/code&gt; callback.</source>
          <target state="translated">如果存在，则对请求对象上的 &lt;code&gt;Accept&lt;/code&gt; HTTP标头执行内容协商。它使用&lt;a href=&quot;#req.accepts&quot;&gt;req.accepts（）&lt;/a&gt;根据质量值排序的可接受类型为请求选择处理程序。如果未指定头，则调用第一个回调。如果找不到匹配项，则服务器以406&amp;ldquo;不可接受&amp;rdquo;响应，或调用 &lt;code&gt;default&lt;/code&gt; 回调。</target>
        </trans-unit>
        <trans-unit id="664cab1511f48664dceb585cdc7f594862da6a1d" translate="yes" xml:space="preserve">
          <source>Pluralized method names</source>
          <target state="translated">复数的方法名称</target>
        </trans-unit>
        <trans-unit id="2f5ff2956e4d801beaf30b23a4b1680121296458" translate="yes" xml:space="preserve">
          <source>Possible values for this option are:</source>
          <target state="translated">该选项的可能值为:</target>
        </trans-unit>
        <trans-unit id="24fd6c2d1150de6a47543209150ff4c2a2d3104f" translate="yes" xml:space="preserve">
          <source>PostgreSQL</source>
          <target state="translated">PostgreSQL</target>
        </trans-unit>
        <trans-unit id="1d3bfab6a4379b32c0191366d08cc547061cbb5c" translate="yes" xml:space="preserve">
          <source>Preserve the &lt;code&gt;req.params&lt;/code&gt; values from the parent router. If the parent and the child have conflicting param names, the child&amp;rsquo;s value take precedence.</source>
          <target state="translated">保留父路由器的 &lt;code&gt;req.params&lt;/code&gt; 值。如果父项和子项的参数名称冲突，则子项的值优先。</target>
        </trans-unit>
        <trans-unit id="18b78dfdecad9d838866a9d370f25c4621ee53f6" translate="yes" xml:space="preserve">
          <source>Prevent brute-force attacks against authorization</source>
          <target state="translated">防止针对授权的暴力攻击</target>
        </trans-unit>
        <trans-unit id="949b12a72c1d35e33598e5b2aa91e49df443f90f" translate="yes" xml:space="preserve">
          <source>Previous: More examples</source>
          <target state="translated">上一篇:更多的例子</target>
        </trans-unit>
        <trans-unit id="bee97ecd78d25fea4968151542fc4812a2b58ee7" translate="yes" xml:space="preserve">
          <source>Prior to Express v4.17.0, the &lt;code&gt;X-Forwarded-Host&lt;/code&gt; could not contain multiple values or be present more than once.</source>
          <target state="translated">在Express v4.17.0之前， &lt;code&gt;X-Forwarded-Host&lt;/code&gt; 不能包含多个值或不能多次出现。</target>
        </trans-unit>
        <trans-unit id="12f4c13a6a06f999cc56eb966c94f71ef2658a3f" translate="yes" xml:space="preserve">
          <source>Process</source>
          <target state="translated">Process</target>
        </trans-unit>
        <trans-unit id="9d69b18c96f755e0d2c72d6cabe982d6e40f60c4" translate="yes" xml:space="preserve">
          <source>Process managers for Express apps</source>
          <target state="translated">Express应用程序的流程管理器</target>
        </trans-unit>
        <trans-unit id="d1f4e5dff31059309500a5b8db5af30936a11b64" translate="yes" xml:space="preserve">
          <source>Production Best Practices: Security</source>
          <target state="translated">生产最佳实践。安全</target>
        </trans-unit>
        <trans-unit id="69635c22b455ec7f8fb846ff2c1aef7a9cb8c0d0" translate="yes" xml:space="preserve">
          <source>Production best practices: performance and reliability</source>
          <target state="translated">最佳生产实践:性能和可靠性</target>
        </trans-unit>
        <trans-unit id="d84f3fe17aa6acf2bd35040c5b6abfa32758525c" translate="yes" xml:space="preserve">
          <source>Promises will handle any exceptions (both explicit and implicit) in asynchronous code blocks that use &lt;code&gt;then()&lt;/code&gt;. Just add &lt;code&gt;.catch(next)&lt;/code&gt; to the end of promise chains. For example:</source>
          <target state="translated">Promise将处理使用 &lt;code&gt;then()&lt;/code&gt; 的异步代码块中的所有异常（显式和隐式）。只需在承诺链的末尾添加 &lt;code&gt;.catch(next)&lt;/code&gt; 。例如：</target>
        </trans-unit>
        <trans-unit id="59cc3b940c599e3677dc76fc0d131631519d1297" translate="yes" xml:space="preserve">
          <source>Prompt a file to be downloaded.</source>
          <target state="translated">提示要下载的文件。</target>
        </trans-unit>
        <trans-unit id="bc6c88db2f0703a9e2461a4a8060ccf1cb881998" translate="yes" xml:space="preserve">
          <source>Properties</source>
          <target state="translated">Properties</target>
        </trans-unit>
        <trans-unit id="37c6ecbd79ee0556f7197e601315161931fc1091" translate="yes" xml:space="preserve">
          <source>Properties in the Express API are either:</source>
          <target state="translated">Express API中的属性要么是。</target>
        </trans-unit>
        <trans-unit id="0f20fd3da3c80a8dc705305fdf38721785d70950" translate="yes" xml:space="preserve">
          <source>Properties under category 2 can be overwritten using the Express API extensions API.</source>
          <target state="translated">第2类下的属性可以使用Express API扩展API进行覆盖。</target>
        </trans-unit>
        <trans-unit id="9ae33a7d0ecb82cae8f04aafab20bf90425b7b8c" translate="yes" xml:space="preserve">
          <source>Property</source>
          <target state="translated">Property</target>
        </trans-unit>
        <trans-unit id="a0fb821bdaf93ed9a1f1e920acfb2840eff5b153" translate="yes" xml:space="preserve">
          <source>Purpose</source>
          <target state="translated">Purpose</target>
        </trans-unit>
        <trans-unit id="773da65540aea2674cafe1bf06f58363a2510f7c" translate="yes" xml:space="preserve">
          <source>Query strings are not part of the route path.</source>
          <target state="translated">查询字符串不是途径路径的一部分。</target>
        </trans-unit>
        <trans-unit id="406e3354ded7a30533a16d61e783eefd42b55bc3" translate="yes" xml:space="preserve">
          <source>Read &lt;a href=&quot;http://expressjs.com/guide/behind-proxies.html&quot;&gt;Express behind proxies&lt;/a&gt; for more information.</source>
          <target state="translated">有关更多信息，请阅读&lt;a href=&quot;http://expressjs.com/guide/behind-proxies.html&quot;&gt;代理后的Express&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="f09862fdd5ee49343d7995d709e752a415649383" translate="yes" xml:space="preserve">
          <source>Redirect a request.</source>
          <target state="translated">重定向请求。</target>
        </trans-unit>
        <trans-unit id="f95dec5f96b45f5f4ad8a553ed18778a4226b9cd" translate="yes" xml:space="preserve">
          <source>Redirect to trailing &amp;ldquo;/&amp;rdquo; when the pathname is a directory.</source>
          <target state="translated">当路径名是目录时，重定向到结尾的&amp;ldquo; /&amp;rdquo;。</target>
        </trans-unit>
        <trans-unit id="022a59f41b379759912fe6436dd7ef0b37cdd3ec" translate="yes" xml:space="preserve">
          <source>Redirecting to &lt;code&gt;post/new&lt;/code&gt; from &lt;code&gt;http://example.com/blog/admin&lt;/code&gt; (no trailing slash), will redirect to &lt;code&gt;http://example.com/blog/post/new&lt;/code&gt;.</source>
          <target state="translated">从 &lt;code&gt;http://example.com/blog/admin&lt;/code&gt; 重定向到 &lt;code&gt;post/new&lt;/code&gt; （没有斜杠），将重定向到 &lt;code&gt;http://example.com/blog/post/new&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="96f83b037c0fdfefc3ffe93813992f3e213ef656" translate="yes" xml:space="preserve">
          <source>Redirects can be a fully-qualified URL for redirecting to a different site:</source>
          <target state="translated">重定向可以是一个完全合格的URL,用于重定向到不同的网站。</target>
        </trans-unit>
        <trans-unit id="22ffdc4fa4f4c697c7ea8f274a2b813f4cea3604" translate="yes" xml:space="preserve">
          <source>Redirects can be relative to the current URL. For example, from &lt;code&gt;http://example.com/blog/admin/&lt;/code&gt; (notice the trailing slash), the following would redirect to the URL &lt;code&gt;http://example.com/blog/admin/post/new&lt;/code&gt;.</source>
          <target state="translated">重定向可以相对于当前URL。例如，从 &lt;code&gt;http://example.com/blog/admin/&lt;/code&gt; （请注意后跟斜杠）中，以下内容将重定向到URL &lt;code&gt;http://example.com/blog/admin/post/new&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="6996750ab11398227aaff24f6aa8d4a45c5ca1e0" translate="yes" xml:space="preserve">
          <source>Redirects can be relative to the root of the host name. For example, if the application is on &lt;code&gt;http://example.com/admin/post/new&lt;/code&gt;, the following would redirect to the URL &lt;code&gt;http://example.com/admin&lt;/code&gt;:</source>
          <target state="translated">重定向可以相对于主机名的根。例如，如果应用程序位于 &lt;code&gt;http://example.com/admin/post/new&lt;/code&gt; 上，则以下内容将重定向到URL &lt;code&gt;http://example.com/admin&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="0775d35b0d0e8d4cc7d9bd7b0ec2e0e0e65e4c91" translate="yes" xml:space="preserve">
          <source>Redirects to the URL derived from the specified &lt;code&gt;path&lt;/code&gt;, with specified &lt;code&gt;status&lt;/code&gt;, a positive integer that corresponds to an &lt;a href=&quot;http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html&quot;&gt;HTTP status code&lt;/a&gt; . If not specified, &lt;code&gt;status&lt;/code&gt; defaults to &amp;ldquo;302 &amp;ldquo;Found&amp;rdquo;.</source>
          <target state="translated">重定向到从具有指定 &lt;code&gt;status&lt;/code&gt; 的指定 &lt;code&gt;path&lt;/code&gt; 派生的URL，该状态为与&lt;a href=&quot;http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html&quot;&gt;HTTP状态代码&lt;/a&gt;相对应的正整数。如果未指定，则 &lt;code&gt;status&lt;/code&gt; 默认为&amp;ldquo; 302&amp;rdquo;已找到&amp;rdquo;。</target>
        </trans-unit>
        <trans-unit id="24071b57a13027c01339027dcccb98218f052a8f" translate="yes" xml:space="preserve">
          <source>Redis</source>
          <target state="translated">Redis</target>
        </trans-unit>
        <trans-unit id="0dac9c55fe4efaf6801999afd6539f476cd22954" translate="yes" xml:space="preserve">
          <source>Refer to &lt;a href=&quot;https://github.com/expressjs/cookie-session&quot;&gt;cookie-session&lt;/a&gt; and &lt;a href=&quot;https://github.com/expressjs/compression&quot;&gt;compression&lt;/a&gt; for examples of configurable middleware.</source>
          <target state="translated">有关可配置中间件的示例，请参考&lt;a href=&quot;https://github.com/expressjs/cookie-session&quot;&gt;cookie会话&lt;/a&gt;和&lt;a href=&quot;https://github.com/expressjs/compression&quot;&gt;压缩&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="6cd44855b27b599ae9e1fbdb389c1ad144477dcb" translate="yes" xml:space="preserve">
          <source>Registering a template engine; see &lt;a href=&quot;#app.engine&quot;&gt;app.engine&lt;/a&gt;.</source>
          <target state="translated">注册模板引擎；请参阅&lt;a href=&quot;#app.engine&quot;&gt;app.engine&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="8727039ca261fb51ebc7af17d17baeae66e840db" translate="yes" xml:space="preserve">
          <source>Registers the given template engine &lt;code&gt;callback&lt;/code&gt; as &lt;code&gt;ext&lt;/code&gt;.</source>
          <target state="translated">将给定的模板引擎 &lt;code&gt;callback&lt;/code&gt; 注册为 &lt;code&gt;ext&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="469415c626b697430fa86fc9993ad32f63927e1f" translate="yes" xml:space="preserve">
          <source>Regular Expression</source>
          <target state="translated">正则表达式</target>
        </trans-unit>
        <trans-unit id="6c8c2c3614aecfcda1772e6bbd65c7467184be07" translate="yes" xml:space="preserve">
          <source>Removed methods and properties</source>
          <target state="translated">删除了方法和属性</target>
        </trans-unit>
        <trans-unit id="626e614a2f0eccecba8a278191a9002f3f2bc85a" translate="yes" xml:space="preserve">
          <source>Removed the &lt;code&gt;--jshtml&lt;/code&gt; option.</source>
          <target state="translated">删除了 &lt;code&gt;--jshtml&lt;/code&gt; 选项。</target>
        </trans-unit>
        <trans-unit id="2174ec2d849fe4bbf69958359caffe35d82437cf" translate="yes" xml:space="preserve">
          <source>Removed the &lt;code&gt;--sessions&lt;/code&gt; option.</source>
          <target state="translated">删除了 &lt;code&gt;--sessions&lt;/code&gt; 选项。</target>
        </trans-unit>
        <trans-unit id="aca57ff9f0109fe2c858e8c044daed36a6122377" translate="yes" xml:space="preserve">
          <source>Removed.</source>
          <target state="translated">Removed.</target>
        </trans-unit>
        <trans-unit id="945377d9d89f1976bc09bede2d7f815aaef63055" translate="yes" xml:space="preserve">
          <source>Render a view template.</source>
          <target state="translated">渲染一个视图模板。</target>
        </trans-unit>
        <trans-unit id="018b969b49b70909ae4c21ee153cb9be998a5b74" translate="yes" xml:space="preserve">
          <source>Rendering HTML views; see &lt;a href=&quot;#app.render&quot;&gt;app.render&lt;/a&gt;.</source>
          <target state="translated">渲染HTML视图；参见&lt;a href=&quot;#app.render&quot;&gt;app.render&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="3a7fafeb35e33f37e0ac69b7863d53f3ff3931dd" translate="yes" xml:space="preserve">
          <source>Renders a &lt;code&gt;view&lt;/code&gt; and sends the rendered HTML string to the client. Optional parameters:</source>
          <target state="translated">渲染 &lt;code&gt;view&lt;/code&gt; ，并将渲染的HTML字符串发送到客户端。可选参数：</target>
        </trans-unit>
        <trans-unit id="4aed03cac49d5e43da4e855a967286931a4d621a" translate="yes" xml:space="preserve">
          <source>Request</source>
          <target state="translated">Request</target>
        </trans-unit>
        <trans-unit id="98e2cc8b902f65361680f565da65cb169e0d964a" translate="yes" xml:space="preserve">
          <source>Resourceful routing</source>
          <target state="translated">资源丰富的路由</target>
        </trans-unit>
        <trans-unit id="87df60de337fb58864343e396696d74611e0d403" translate="yes" xml:space="preserve">
          <source>Resources</source>
          <target state="translated">Resources</target>
        </trans-unit>
        <trans-unit id="7ba17bd526e0d7f2a06b8a19d2d65726c3053a28" translate="yes" xml:space="preserve">
          <source>Respond to POST request on the root route (&lt;code&gt;/&lt;/code&gt;), the application&amp;rsquo;s home page:</source>
          <target state="translated">响应根路由（ &lt;code&gt;/&lt;/code&gt; ）（应用程序的主页）上的POST请求：</target>
        </trans-unit>
        <trans-unit id="e5e4209ac38bb92cab3524b7b851e3924fcc0975" translate="yes" xml:space="preserve">
          <source>Respond to a DELETE request to the &lt;code&gt;/user&lt;/code&gt; route:</source>
          <target state="translated">响应对 &lt;code&gt;/user&lt;/code&gt; 路由的DELETE请求：</target>
        </trans-unit>
        <trans-unit id="e5337f0a2e0d5819d8eba3231dfe78dabc3e5746" translate="yes" xml:space="preserve">
          <source>Respond to a PUT request to the &lt;code&gt;/user&lt;/code&gt; route:</source>
          <target state="translated">响应对 &lt;code&gt;/user&lt;/code&gt; 路由的PUT请求：</target>
        </trans-unit>
        <trans-unit id="9436a3edfdc89441f72f63993bf3e8f8eb426912" translate="yes" xml:space="preserve">
          <source>Respond with &lt;code&gt;Hello World!&lt;/code&gt; on the homepage:</source>
          <target state="translated">用 &lt;code&gt;Hello World!&lt;/code&gt; 回应！在首页上：</target>
        </trans-unit>
        <trans-unit id="6e617e4fc9da3de9693eac5990613543b86c63f9" translate="yes" xml:space="preserve">
          <source>Response</source>
          <target state="translated">Response</target>
        </trans-unit>
        <trans-unit id="3f24998028394f1be20196df841d9976df6e4a6d" translate="yes" xml:space="preserve">
          <source>Response methods</source>
          <target state="translated">应对方法</target>
        </trans-unit>
        <trans-unit id="5fef41135e9cdf06c5145b6d4bf8709a92b7d8d5" translate="yes" xml:space="preserve">
          <source>Responses from within a middleware function can be in any format, such as an HTML error page, a simple message, or a JSON string.</source>
          <target state="translated">来自中间件函数内的响应可以是任何格式,如HTML错误页面、简单的消息或JSON字符串。</target>
        </trans-unit>
        <trans-unit id="0da2e4fc9aaa966482acba758303f6e6f1353da8" translate="yes" xml:space="preserve">
          <source>Restart an app:</source>
          <target state="translated">重新启动一个应用程序。</target>
        </trans-unit>
        <trans-unit id="2ae676cd487bb80f3ec41f4458469793336d90aa" translate="yes" xml:space="preserve">
          <source>Restart the app automatically if it crashes.</source>
          <target state="translated">崩溃时自动重启应用。</target>
        </trans-unit>
        <trans-unit id="7c5820da342c61b021ecb17f5d3043764aa30d88" translate="yes" xml:space="preserve">
          <source>Retrieve the value of a setting with &lt;a href=&quot;#app.get&quot;&gt;&lt;code&gt;app.get()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">使用&lt;a href=&quot;#app.get&quot;&gt; &lt;code&gt;app.get()&lt;/code&gt; &lt;/a&gt;检索设置的值。</target>
        </trans-unit>
        <trans-unit id="b4cc6d166b13a4a9f23ffc92f6a17c3055a226a9" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;true&lt;/code&gt; if the Boolean setting &lt;code&gt;name&lt;/code&gt; is disabled (&lt;code&gt;false&lt;/code&gt;), where &lt;code&gt;name&lt;/code&gt; is one of the properties from the &lt;a href=&quot;#app.settings.table&quot;&gt;app settings table&lt;/a&gt;.</source>
          <target state="translated">如果禁用了布尔设置 &lt;code&gt;name&lt;/code&gt; （ &lt;code&gt;false&lt;/code&gt; ），则返回 &lt;code&gt;true&lt;/code&gt; ，其中 &lt;code&gt;name&lt;/code&gt; 是&lt;a href=&quot;#app.settings.table&quot;&gt;应用程序设置表&lt;/a&gt;中的属性之一。</target>
        </trans-unit>
        <trans-unit id="3ac8a29bf7632784f14ab42343d4653ff1ff4805" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;true&lt;/code&gt; if the setting &lt;code&gt;name&lt;/code&gt; is enabled (&lt;code&gt;true&lt;/code&gt;), where &lt;code&gt;name&lt;/code&gt; is one of the properties from the &lt;a href=&quot;#app.settings.table&quot;&gt;app settings table&lt;/a&gt;.</source>
          <target state="translated">如果启用了设置 &lt;code&gt;name&lt;/code&gt; （ &lt;code&gt;true&lt;/code&gt; ），则返回 &lt;code&gt;true&lt;/code&gt; ，其中 &lt;code&gt;name&lt;/code&gt; 是&lt;a href=&quot;#app.settings.table&quot;&gt;应用程序设置表&lt;/a&gt;中的属性之一。</target>
        </trans-unit>
        <trans-unit id="e851b1f65bf25bd5e53b1e962e97e932071b90fa" translate="yes" xml:space="preserve">
          <source>Returns an instance of a single route which you can then use to handle HTTP verbs with optional middleware. Use &lt;code&gt;router.route()&lt;/code&gt; to avoid duplicate route naming and thus typing errors.</source>
          <target state="translated">返回单个路由的实例，然后您可以使用该路由使用可选的中间件来处理HTTP动词。使用 &lt;code&gt;router.route()&lt;/code&gt; 避免重复的路由命名，从而避免键入错误。</target>
        </trans-unit>
        <trans-unit id="9487eb5a3a0bef826f2397478e3723a7ac09d287" translate="yes" xml:space="preserve">
          <source>Returns an instance of a single route, which you can then use to handle HTTP verbs with optional middleware. Use &lt;code&gt;app.route()&lt;/code&gt; to avoid duplicate route names (and thus typo errors).</source>
          <target state="translated">返回单个路由的实例，然后您可以使用该路由通过可选的中间件来处理HTTP动词。使用 &lt;code&gt;app.route()&lt;/code&gt; 避免重复的路由名称（从而避免输入错误）。</target>
        </trans-unit>
        <trans-unit id="130f780dc7797f7c91157d4d04f908e7e4926800" translate="yes" xml:space="preserve">
          <source>Returns middleware that only parses JSON and only looks at requests where the &lt;code&gt;Content-Type&lt;/code&gt; header matches the &lt;code&gt;type&lt;/code&gt; option. This parser accepts any Unicode encoding of the body and supports automatic inflation of &lt;code&gt;gzip&lt;/code&gt; and &lt;code&gt;deflate&lt;/code&gt; encodings.</source>
          <target state="translated">返回仅解析JSON并且仅查看 &lt;code&gt;Content-Type&lt;/code&gt; 标头与 &lt;code&gt;type&lt;/code&gt; 选项匹配的请求的中间件。该解析器接受主体的任何Unicode编码，并支持 &lt;code&gt;gzip&lt;/code&gt; 和 &lt;code&gt;deflate&lt;/code&gt; 编码的自动填充。</target>
        </trans-unit>
        <trans-unit id="91246fbd5ccc48d81b7560de5f04930b0acfd179" translate="yes" xml:space="preserve">
          <source>Returns middleware that only parses urlencoded bodies and only looks at requests where the &lt;code&gt;Content-Type&lt;/code&gt; header matches the &lt;code&gt;type&lt;/code&gt; option. This parser accepts only UTF-8 encoding of the body and supports automatic inflation of &lt;code&gt;gzip&lt;/code&gt; and &lt;code&gt;deflate&lt;/code&gt; encodings.</source>
          <target state="translated">返回仅解析urlencoded主体并且仅查看 &lt;code&gt;Content-Type&lt;/code&gt; 标头与 &lt;code&gt;type&lt;/code&gt; 选项匹配的请求的中间件。该解析器仅接受主体的UTF-8编码，并支持 &lt;code&gt;gzip&lt;/code&gt; 和 &lt;code&gt;deflate&lt;/code&gt; 编码的自动填充。</target>
        </trans-unit>
        <trans-unit id="86737b833c1365755363090a5bc065001159a176" translate="yes" xml:space="preserve">
          <source>Returns middleware that parses all bodies as a &lt;code&gt;Buffer&lt;/code&gt; and only looks at requests where the &lt;code&gt;Content-Type&lt;/code&gt; header matches the &lt;code&gt;type&lt;/code&gt; option. This parser accepts any Unicode encoding of the body and supports automatic inflation of &lt;code&gt;gzip&lt;/code&gt; and &lt;code&gt;deflate&lt;/code&gt; encodings.</source>
          <target state="translated">返回将所有主体解析为 &lt;code&gt;Buffer&lt;/code&gt; 的中间件，并且仅查看 &lt;code&gt;Content-Type&lt;/code&gt; 标头与 &lt;code&gt;type&lt;/code&gt; 选项匹配的请求。该解析器接受主体的任何Unicode编码，并支持 &lt;code&gt;gzip&lt;/code&gt; 和 &lt;code&gt;deflate&lt;/code&gt; 编码的自动填充。</target>
        </trans-unit>
        <trans-unit id="486316107ae0cb71f5ab41e30b2dc288408fc9a5" translate="yes" xml:space="preserve">
          <source>Returns middleware that parses all bodies as a string and only looks at requests where the &lt;code&gt;Content-Type&lt;/code&gt; header matches the &lt;code&gt;type&lt;/code&gt; option. This parser accepts any Unicode encoding of the body and supports automatic inflation of &lt;code&gt;gzip&lt;/code&gt; and &lt;code&gt;deflate&lt;/code&gt; encodings.</source>
          <target state="translated">返回将所有主体解析为字符串并且仅查看 &lt;code&gt;Content-Type&lt;/code&gt; 标头与 &lt;code&gt;type&lt;/code&gt; 选项匹配的请求的中间件。该解析器接受主体的任何Unicode编码，并支持 &lt;code&gt;gzip&lt;/code&gt; 和 &lt;code&gt;deflate&lt;/code&gt; 编码的自动填充。</target>
        </trans-unit>
        <trans-unit id="bfe5078c9921c495db28d87aadf221ad7a44753a" translate="yes" xml:space="preserve">
          <source>Returns the HTTP response header specified by &lt;code&gt;field&lt;/code&gt;. The match is case-insensitive.</source>
          <target state="translated">返回由 &lt;code&gt;field&lt;/code&gt; 指定的HTTP响应标头。匹配不区分大小写。</target>
        </trans-unit>
        <trans-unit id="59698ffdb5c65c6c13b853732ccc073920ac9e99" translate="yes" xml:space="preserve">
          <source>Returns the canonical path of the app, a string.</source>
          <target state="translated">返回应用程序的规范路径,一个字符串。</target>
        </trans-unit>
        <trans-unit id="4f5b26572cad508cbadac7b911398c8be798f34d" translate="yes" xml:space="preserve">
          <source>Returns the first accepted charset of the specified character sets, based on the request&amp;rsquo;s &lt;code&gt;Accept-Charset&lt;/code&gt; HTTP header field. If none of the specified charsets is accepted, returns &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">根据请求的 &lt;code&gt;Accept-Charset&lt;/code&gt; HTTP标头字段，返回指定字符集的第一个接受的字符集。如果不接受任何指定的字符集，则返回 &lt;code&gt;false&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="cbaace1c0726fe7471b1996d8e8f4c641d97ad9c" translate="yes" xml:space="preserve">
          <source>Returns the first accepted encoding of the specified encodings, based on the request&amp;rsquo;s &lt;code&gt;Accept-Encoding&lt;/code&gt; HTTP header field. If none of the specified encodings is accepted, returns &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">根据请求的 &lt;code&gt;Accept-Encoding&lt;/code&gt; HTTP标头字段，返回指定编码的第一个接受的编码。如果不接受任何指定的编码，则返回 &lt;code&gt;false&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="ef3bb7648f8077718c3f8af8fcab04ba509d04c7" translate="yes" xml:space="preserve">
          <source>Returns the first accepted language of the specified languages, based on the request&amp;rsquo;s &lt;code&gt;Accept-Language&lt;/code&gt; HTTP header field. If none of the specified languages is accepted, returns &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">根据请求的 &lt;code&gt;Accept-Language&lt;/code&gt; HTTP标头字段，返回指定语言的第一种接受的语言。如果不接受任何指定的语言，则返回 &lt;code&gt;false&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="b03311840fd1b1f21386b5485902595cde099f32" translate="yes" xml:space="preserve">
          <source>Returns the matching content type if the incoming request&amp;rsquo;s &amp;ldquo;Content-Type&amp;rdquo; HTTP header field matches the MIME type specified by the &lt;code&gt;type&lt;/code&gt; parameter. If the request has no body, returns &lt;code&gt;null&lt;/code&gt;. Returns &lt;code&gt;false&lt;/code&gt; otherwise.</source>
          <target state="translated">如果传入请求的&amp;ldquo; Content-Type&amp;rdquo; HTTP标头字段与 &lt;code&gt;type&lt;/code&gt; 参数指定的MIME类型匹配，则返回匹配的内容类型。如果请求没有正文，则返回 &lt;code&gt;null&lt;/code&gt; 。否则返回 &lt;code&gt;false&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="0061e9477288412877890d1f4eb86a3fef229008" translate="yes" xml:space="preserve">
          <source>Returns the rendered HTML of a view via the &lt;code&gt;callback&lt;/code&gt; function. It accepts an optional parameter that is an object containing local variables for the view. It is like &lt;a href=&quot;#res.render&quot;&gt;res.render()&lt;/a&gt;, except it cannot send the rendered view to the client on its own.</source>
          <target state="translated">通过 &lt;code&gt;callback&lt;/code&gt; 函数返回视图的呈现HTML 。它接受一个可选参数，该参数是一个包含视图局部变量的对象。就像&lt;a href=&quot;#res.render&quot;&gt;res.render（）一样&lt;/a&gt;，除了它不能自行将渲染的视图发送给客户端。</target>
        </trans-unit>
        <trans-unit id="f4109b9fe6d8c3ae88e12a8c2ade8cf8324908ee" translate="yes" xml:space="preserve">
          <source>Returns the specified HTTP request header field (case-insensitive match). The &lt;code&gt;Referrer&lt;/code&gt; and &lt;code&gt;Referer&lt;/code&gt; fields are interchangeable.</source>
          <target state="translated">返回指定的HTTP请求标头字段（不区分大小写的匹配）。该 &lt;code&gt;Referrer&lt;/code&gt; 和 &lt;code&gt;Referer&lt;/code&gt; 的领域是可以互换的。</target>
        </trans-unit>
        <trans-unit id="ac335e34898a2340a5caa5c0f862344e63d37d4c" translate="yes" xml:space="preserve">
          <source>Returns the value of &lt;code&gt;name&lt;/code&gt; app setting, where &lt;code&gt;name&lt;/code&gt; is one of the strings in the &lt;a href=&quot;#app.settings.table&quot;&gt;app settings table&lt;/a&gt;. For example:</source>
          <target state="translated">返回 &lt;code&gt;name&lt;/code&gt; 应用程序设置的值，其中 &lt;code&gt;name&lt;/code&gt; 是&lt;a href=&quot;#app.settings.table&quot;&gt;应用程序设置表&lt;/a&gt;中的字符串之一。例如：</target>
        </trans-unit>
        <trans-unit id="3b470af2032ab7ae57eadf2173967457afedff1d" translate="yes" xml:space="preserve">
          <source>Returns the value of param &lt;code&gt;name&lt;/code&gt; when present.</source>
          <target state="translated">如果存在，则返回参数 &lt;code&gt;name&lt;/code&gt; 的值。</target>
        </trans-unit>
        <trans-unit id="20cf632e40faa4450eb0fe0c2fa1791ce84c04f7" translate="yes" xml:space="preserve">
          <source>Root directory for relative filenames.</source>
          <target state="translated">相对文件名的根目录。</target>
        </trans-unit>
        <trans-unit id="d348be6a29eb1f409b2cc658ce6085157eae7c07" translate="yes" xml:space="preserve">
          <source>Route definition takes the following structure:</source>
          <target state="translated">路线定义采用以下结构。</target>
        </trans-unit>
        <trans-unit id="d988d65892c0a4717adf63f3cad16d3aa99c0af3" translate="yes" xml:space="preserve">
          <source>Route handlers</source>
          <target state="translated">路线处理程序</target>
        </trans-unit>
        <trans-unit id="2a5f0ac083bfd3d420b77a2525ebd5dfd3bf0461" translate="yes" xml:space="preserve">
          <source>Route handlers can be in the form of a function, an array of functions, or combinations of both, as shown in the following examples.</source>
          <target state="translated">路由处理程序可以是函数的形式,也可以是函数数组的形式,或者两者的组合,如下例所示。</target>
        </trans-unit>
        <trans-unit id="43772e2b1c82f4ef675fda7d8659725a3ad66256" translate="yes" xml:space="preserve">
          <source>Route handlers enable you to define multiple routes for a path. The example below defines two routes for GET requests to the &lt;code&gt;/user/:id&lt;/code&gt; path. The second route will not cause any problems, but it will never get called because the first route ends the request-response cycle.</source>
          <target state="translated">路由处理程序使您可以为一个路径定义多个路由。下面的示例为到 &lt;code&gt;/user/:id&lt;/code&gt; 路径的GET请求定义了两条路由。第二条路由不会引起任何问题，但是它永远不会被调用，因为第一条路由会结束请求-响应周期。</target>
        </trans-unit>
        <trans-unit id="47f0e2e1ccfbbcf0915a2a336f96263197df933e" translate="yes" xml:space="preserve">
          <source>Route listings</source>
          <target state="translated">路线列表</target>
        </trans-unit>
        <trans-unit id="3fb2e05f4286fef126784d33123dc78b2612dcc7" translate="yes" xml:space="preserve">
          <source>Route map</source>
          <target state="translated">路线图</target>
        </trans-unit>
        <trans-unit id="6b520cbc2448ae9fcbd3b75bd86718f582806cdb" translate="yes" xml:space="preserve">
          <source>Route methods</source>
          <target state="translated">路线方法</target>
        </trans-unit>
        <trans-unit id="bc1b5693daa93fdd15bd76177c20f8b8594e1a3c" translate="yes" xml:space="preserve">
          <source>Route parameters</source>
          <target state="translated">航线参数</target>
        </trans-unit>
        <trans-unit id="9930b0e015172c19ec7a530ce90b4dbc1f187bd7" translate="yes" xml:space="preserve">
          <source>Route parameters are named URL segments that are used to capture the values specified at their position in the URL. The captured values are populated in the &lt;code&gt;req.params&lt;/code&gt; object, with the name of the route parameter specified in the path as their respective keys.</source>
          <target state="translated">路由参数被命名为URL段，用于捕获URL中在其位置处指定的值。捕获的值将填充到 &lt;code&gt;req.params&lt;/code&gt; 对象中，并将在路径中指定的route参数的名称作为其各自的键。</target>
        </trans-unit>
        <trans-unit id="089c9aa88668cbda92612701ea3db4dad7b2f139" translate="yes" xml:space="preserve">
          <source>Route paths</source>
          <target state="translated">航线路径</target>
        </trans-unit>
        <trans-unit id="ec232e98a9dfda720ba1fef0bc0a5b30053af068" translate="yes" xml:space="preserve">
          <source>Route paths, in combination with a request method, define the endpoints at which requests can be made. Route paths can be strings, string patterns, or regular expressions.</source>
          <target state="translated">路由路径与请求方法相结合,定义了可以进行请求的端点。路由路径可以是字符串、字符串模式或正则表达式。</target>
        </trans-unit>
        <trans-unit id="6dcf16e1c5d3e9fd2ae4a4d54c174448fe43e1b6" translate="yes" xml:space="preserve">
          <source>Router</source>
          <target state="translated">Router</target>
        </trans-unit>
        <trans-unit id="fcc9904e39f246418481eeb399ed1fb6f43df0bb" translate="yes" xml:space="preserve">
          <source>Router-level middleware</source>
          <target state="translated">路由器级中间件</target>
        </trans-unit>
        <trans-unit id="5dce0619e0e7ed08fff08132210b24a774347d69" translate="yes" xml:space="preserve">
          <source>Router-level middleware works in the same way as application-level middleware, except it is bound to an instance of &lt;code&gt;express.Router()&lt;/code&gt;.</source>
          <target state="translated">路由器级中间件与应用程序级中间件的工作方式相同，只不过它绑定到 &lt;code&gt;express.Router()&lt;/code&gt; 的实例。</target>
        </trans-unit>
        <trans-unit id="33d7f21ca0c3f57268ef0450ed68717436d80aa0" translate="yes" xml:space="preserve">
          <source>Routes HTTP DELETE requests to the specified path with the specified callback functions. For more information, see the &lt;a href=&quot;http://expressjs.com/guide/routing.html&quot;&gt;routing guide&lt;/a&gt;.</source>
          <target state="translated">使用指定的回调函数将HTTP DELETE请求路由到指定的路径。有关更多信息，请参阅&lt;a href=&quot;http://expressjs.com/guide/routing.html&quot;&gt;路由指南&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="ec3bfbe92582a193d7f157f9209f058334bedd2d" translate="yes" xml:space="preserve">
          <source>Routes HTTP GET requests to the specified path with the specified callback functions.</source>
          <target state="translated">通过指定的回调函数将HTTP GET请求路由到指定的路径。</target>
        </trans-unit>
        <trans-unit id="9d149fa04fc54b7fb2e8e78a9951e110f1ba0931" translate="yes" xml:space="preserve">
          <source>Routes HTTP POST requests to the specified path with the specified callback functions. For more information, see the &lt;a href=&quot;http://expressjs.com/guide/routing.html&quot;&gt;routing guide&lt;/a&gt;.</source>
          <target state="translated">使用指定的回调函数将HTTP POST请求路由到指定的路径。有关更多信息，请参阅&lt;a href=&quot;http://expressjs.com/guide/routing.html&quot;&gt;路由指南&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="ca2ef131e7f8787ecdd8a4c2eb333e0bbdf50958" translate="yes" xml:space="preserve">
          <source>Routes HTTP PUT requests to the specified path with the specified callback functions.</source>
          <target state="translated">通过指定的回调函数将HTTP PUT请求路由到指定的路径。</target>
        </trans-unit>
        <trans-unit id="d8daf651dbea2d45ea29cfecefe6459929754177" translate="yes" xml:space="preserve">
          <source>Routes an HTTP request, where METHOD is the HTTP method of the request, such as GET, PUT, POST, and so on, in lowercase. Thus, the actual methods are &lt;code&gt;app.get()&lt;/code&gt;, &lt;code&gt;app.post()&lt;/code&gt;, &lt;code&gt;app.put()&lt;/code&gt;, and so on. See &lt;a href=&quot;#routing-methods&quot;&gt;Routing methods&lt;/a&gt; below for the complete list.</source>
          <target state="translated">路由一个HTTP请求，其中METHOD是该请求的HTTP方法，例如小写的GET，PUT，POST等。因此，实际的方法是 &lt;code&gt;app.get()&lt;/code&gt; ， &lt;code&gt;app.post()&lt;/code&gt; ， &lt;code&gt;app.put()&lt;/code&gt; 等等。有关完整列表，请参见下面的&lt;a href=&quot;#routing-methods&quot;&gt;路由方法&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="684ddef7686ea772c5de5131ad3f99f3168dbb44" translate="yes" xml:space="preserve">
          <source>Routes and other application-specific logic can live in as many files as you wish, in any directory structure you prefer. View the following examples for inspiration:</source>
          <target state="translated">路由和其他特定于应用程序的逻辑可以存在于任何你想要的文件中,在任何你喜欢的目录结构中。请看下面的例子以获得灵感。</target>
        </trans-unit>
        <trans-unit id="7d15dd1bec2e055c5b177c9f869305ae6c54c9bb" translate="yes" xml:space="preserve">
          <source>Routing</source>
          <target state="translated">Routing</target>
        </trans-unit>
        <trans-unit id="37bccd83b95d4d4d857bdb2c0977c034be919ada" translate="yes" xml:space="preserve">
          <source>Routing HTTP requests; see for example, &lt;a href=&quot;#app.METHOD&quot;&gt;app.METHOD&lt;/a&gt; and &lt;a href=&quot;#app.param&quot;&gt;app.param&lt;/a&gt;.</source>
          <target state="translated">路由HTTP请求；参见例如&lt;a href=&quot;#app.METHOD&quot;&gt;app.METHOD&lt;/a&gt;和&lt;a href=&quot;#app.param&quot;&gt;app.param&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="7e59aec0c4a3591933eaad7d693cbb63354f979f" translate="yes" xml:space="preserve">
          <source>Routing methods</source>
          <target state="translated">路由方法</target>
        </trans-unit>
        <trans-unit id="a097a274167aef2a6b177a27a1004721cde84799" translate="yes" xml:space="preserve">
          <source>Run the app</source>
          <target state="translated">运行应用程序</target>
        </trans-unit>
        <trans-unit id="7bc9aec7275134fa998a9e27d9f1304942965710" translate="yes" xml:space="preserve">
          <source>Run the app with the following command:</source>
          <target state="translated">用以下命令运行该应用程序。</target>
        </trans-unit>
        <trans-unit id="3e5f85459f630d13605e9ef3b5e3c83fda838f84" translate="yes" xml:space="preserve">
          <source>Run your app (and Node) directly with the init system. This is somewhat simpler, but you don&amp;rsquo;t get the additional advantages of using a process manager.</source>
          <target state="translated">直接使用init系统运行您的应用程序（和Node）。这有点简单，但是您没有获得使用流程管理器的其他优点。</target>
        </trans-unit>
        <trans-unit id="6715abc55b076c169ab12e25ab5709199babe16e" translate="yes" xml:space="preserve">
          <source>Run your app in a cluster</source>
          <target state="translated">在集群中运行您的应用程序</target>
        </trans-unit>
        <trans-unit id="d82defaf0a2b5898fe678ac25aac2bb936182657" translate="yes" xml:space="preserve">
          <source>Run your app in a process manager, and install the process manager as a service with the init system. The process manager will restart your app when the app crashes, and the init system will restart the process manager when the OS restarts. This is the recommended approach.</source>
          <target state="translated">在进程管理器中运行你的应用程序,并将进程管理器作为服务与init系统一起安装。当应用程序崩溃时,进程管理器将重启你的应用程序,而当操作系统重启时,init系统将重启进程管理器。这是推荐的方法。</target>
        </trans-unit>
        <trans-unit id="af123e2f1a1209ae34e31a2012d1a0bec2962db1" translate="yes" xml:space="preserve">
          <source>RunKit is a third-party service not affiliated with the Express project.</source>
          <target state="translated">RunKit是与Express项目无关的第三方服务。</target>
        </trans-unit>
        <trans-unit id="737f194343d1a6519b1ba60b56cfd68faa0bd3e0" translate="yes" xml:space="preserve">
          <source>Running Locally</source>
          <target state="translated">本地运行</target>
        </trans-unit>
        <trans-unit id="93328240d9a34d0bd164529a8ce49946ffca0894" translate="yes" xml:space="preserve">
          <source>Running the above &lt;code&gt;npm&lt;/code&gt; command will update &lt;code&gt;package.json&lt;/code&gt; as follows:</source>
          <target state="translated">运行上面的 &lt;code&gt;npm&lt;/code&gt; 命令将更新 &lt;code&gt;package.json&lt;/code&gt; ，如下所示：</target>
        </trans-unit>
        <trans-unit id="311911c9c8793473c30d3432cd79a04e54ca52c5" translate="yes" xml:space="preserve">
          <source>Running this command on the default app generated by the &lt;a href=&quot;../starter/generator&quot;&gt;express generator&lt;/a&gt; prints the following output:</source>
          <target state="translated">在&lt;a href=&quot;../starter/generator&quot;&gt;express生成器&lt;/a&gt;生成的默认应用程序上运行此命令将输出以下输出：</target>
        </trans-unit>
        <trans-unit id="725d4af7c0a6c33765e24e91b6d9cef2b17c21cb" translate="yes" xml:space="preserve">
          <source>SQL Server</source>
          <target state="translated">SQL服务器</target>
        </trans-unit>
        <trans-unit id="9f09ccbd1cfb65aced3eb531305e671e40b95dd3" translate="yes" xml:space="preserve">
          <source>SQLite</source>
          <target state="translated">SQLite</target>
        </trans-unit>
        <trans-unit id="482b46339dd80a5f4d548a5dcf4dc43aa25df229" translate="yes" xml:space="preserve">
          <source>Security best practices for Express applications in production include:</source>
          <target state="translated">快递应用程序在生产中的安全最佳做法包括:</target>
        </trans-unit>
        <trans-unit id="9ff9c4a165ef8a521b042e0b8febf47b66094a81" translate="yes" xml:space="preserve">
          <source>Security updates</source>
          <target state="translated">安全更新</target>
        </trans-unit>
        <trans-unit id="a66d10fb0f7589ce4b597538adb9ca6aff4f3311" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;#dotfiles&quot;&gt;dotfiles&lt;/a&gt; below.</source>
          <target state="translated">见&lt;a href=&quot;#dotfiles&quot;&gt;点文件&lt;/a&gt;下方。</target>
        </trans-unit>
        <trans-unit id="801fae78fc810b25c6e055a5a05d588c67270589" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;#fallthrough&quot;&gt;fallthrough&lt;/a&gt; below.</source>
          <target state="translated">参见&lt;a href=&quot;#fallthrough&quot;&gt;下通&lt;/a&gt;下方。</target>
        </trans-unit>
        <trans-unit id="9f5769ce60aea42ee0508720d5ef65b8cab29f75" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;#setHeaders&quot;&gt;setHeaders&lt;/a&gt; below.</source>
          <target state="translated">请参阅下面的&lt;a href=&quot;#setHeaders&quot;&gt;setHeaders&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="a7ad695d876b308715f9464f8ae701fa436638aa" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;http://loopback.io&quot;&gt;LoopBack&lt;/a&gt; for an Express-based framework that is centered around models.</source>
          <target state="translated">有关以模型为中心的基于Express的框架，请参见&lt;a href=&quot;http://loopback.io&quot;&gt;LoopBack&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="8703d7e2e074d0434d805da751c61d43f3de5b31" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;https://github.com/expressjs/express/wiki#template-engines&quot;&gt;Template Engines (Express wiki)&lt;/a&gt; for a list of template engines you can use with Express. See also &lt;a href=&quot;https://strongloop.com/strongblog/compare-javascript-templates-jade-mustache-dust/&quot;&gt;Comparing JavaScript Templating Engines: Jade, Mustache, Dust and More&lt;/a&gt;.</source>
          <target state="translated">有关可以与Express一起使用的模板引擎的列表，请参见&lt;a href=&quot;https://github.com/expressjs/express/wiki#template-engines&quot;&gt;模板引擎（Express Wiki）&lt;/a&gt;。另请参阅&lt;a href=&quot;https://strongloop.com/strongblog/compare-javascript-templates-jade-mustache-dust/&quot;&gt;比较JavaScript模板引擎：Jade，Mustache，Dust等&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="9b807d5dc98816d41f9805d4848a1d04f5770351" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;https://github.com/strongloop/express/wiki#template-engines&quot;&gt;Template Engines (Express wiki)&lt;/a&gt; for a list of template engines you can use with Express. See also &lt;a href=&quot;https://strongloop.com/strongblog/compare-javascript-templates-jade-mustache-dust/&quot;&gt;Comparing JavaScript Templating Engines: Jade, Mustache, Dust and More&lt;/a&gt;.</source>
          <target state="translated">有关可以与Express一起使用的模板引擎的列表，请参见&lt;a href=&quot;https://github.com/strongloop/express/wiki#template-engines&quot;&gt;模板引擎（Express Wiki）&lt;/a&gt;。另请参阅&lt;a href=&quot;https://strongloop.com/strongblog/compare-javascript-templates-jade-mustache-dust/&quot;&gt;比较JavaScript模板引擎：Jade，Mustache，Dust等&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="371a87eafb4de078ff674d69a5a89c186532eb49" translate="yes" xml:space="preserve">
          <source>See also:</source>
          <target state="translated">另见:</target>
        </trans-unit>
        <trans-unit id="bedeb5fdfff0203be10fee3f1e72fa03c0485f83" translate="yes" xml:space="preserve">
          <source>Send a JSON response with JSONP support.</source>
          <target state="translated">发送支持JSONP的JSON响应。</target>
        </trans-unit>
        <trans-unit id="ddea9c326b772509249a2bbc22aab6161aacc007" translate="yes" xml:space="preserve">
          <source>Send a JSON response.</source>
          <target state="translated">发送JSON响应。</target>
        </trans-unit>
        <trans-unit id="4b0726571c70fe4e4f6dabb3f875ed67b14c1c6a" translate="yes" xml:space="preserve">
          <source>Send a file as an octet stream.</source>
          <target state="translated">以八位数流的形式发送文件。</target>
        </trans-unit>
        <trans-unit id="7cf66335161f5611707bdfdea876afd40d391127" translate="yes" xml:space="preserve">
          <source>Send a response of various types.</source>
          <target state="translated">发送各种类型的回复。</target>
        </trans-unit>
        <trans-unit id="de1d1db925efd2a34a7453e440636c373e556dd3" translate="yes" xml:space="preserve">
          <source>Sends a JSON response with JSONP support. This method is identical to &lt;code&gt;res.json()&lt;/code&gt;, except that it opts-in to JSONP callback support.</source>
          <target state="translated">发送带有JSONP支持的JSON响应。此方法与 &lt;code&gt;res.json()&lt;/code&gt; 相同，除了它选择加入JSONP回调支持。</target>
        </trans-unit>
        <trans-unit id="9ff943732681c5e689092199536663c2b18d1885" translate="yes" xml:space="preserve">
          <source>Sends a JSON response. This method sends a response (with the correct content-type) that is the parameter converted to a JSON string using &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify&quot;&gt;JSON.stringify()&lt;/a&gt;.</source>
          <target state="translated">发送JSON响应。此方法发送响应（具有正确的内容类型），该响应是使用&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify&quot;&gt;JSON.stringify（）&lt;/a&gt;转换为JSON字符串的参数。</target>
        </trans-unit>
        <trans-unit id="c752aa500f04751a8ecc07cf833dec15fd0aa666" translate="yes" xml:space="preserve">
          <source>Sends the HTTP response.</source>
          <target state="translated">发送HTTP响应。</target>
        </trans-unit>
        <trans-unit id="03f782a46a8bac211976d671f1da36c68557b6cf" translate="yes" xml:space="preserve">
          <source>Sends the specified directory index file. Set to &lt;code&gt;false&lt;/code&gt; to disable directory indexing.</source>
          <target state="translated">发送指定的目录索引文件。设置为 &lt;code&gt;false&lt;/code&gt; 可禁用目录索引。</target>
        </trans-unit>
        <trans-unit id="af8bdf6b81d4ae60d688b0791219fe89ca5a2438" translate="yes" xml:space="preserve">
          <source>Series of Middleware</source>
          <target state="translated">中间件系列</target>
        </trans-unit>
        <trans-unit id="9a4eb089f7abeeea82c5decd04ec86a7598c4b43" translate="yes" xml:space="preserve">
          <source>Serve static content for the app from the &amp;ldquo;public&amp;rdquo; directory in the application directory:</source>
          <target state="translated">从应用程序目录中的&amp;ldquo;公共&amp;rdquo;目录为应用程序提供静态内容：</target>
        </trans-unit>
        <trans-unit id="0050fe91f0a2cee4def4345175b4477ffe748fe3" translate="yes" xml:space="preserve">
          <source>Serve static files from multiple directories, but give precedence to &amp;ldquo;./public&amp;rdquo; over the others:</source>
          <target state="translated">提供来自多个目录的静态文件，但将&amp;ldquo; ./public&amp;rdquo;优先于其他目录：</target>
        </trans-unit>
        <trans-unit id="1a6c6d19d3933d04b334c2828256c5c55e2803f2" translate="yes" xml:space="preserve">
          <source>Serving static files in Express</source>
          <target state="translated">在Express中服务静态文件</target>
        </trans-unit>
        <trans-unit id="aff609eaa51f20e20af5643a4811126aa73883e2" translate="yes" xml:space="preserve">
          <source>Set IP addresses in any of the following ways:</source>
          <target state="translated">以下列任何一种方式设置IP地址。</target>
        </trans-unit>
        <trans-unit id="0e01006a77c6e07e7ebce0253f3d51211e9b83a4" translate="yes" xml:space="preserve">
          <source>Set NODE_ENV to &amp;ldquo;production&amp;rdquo;</source>
          <target state="translated">将NODE_ENV设置为&amp;ldquo; production&amp;rdquo;</target>
        </trans-unit>
        <trans-unit id="6909ce8ae4c4ace4144dc0743f026a3ce5e0eaa8" translate="yes" xml:space="preserve">
          <source>Set cookie security options</source>
          <target state="translated">设置cookie安全选项</target>
        </trans-unit>
        <trans-unit id="6d24f885871d861c63b8506027f42ef219a98332" translate="yes" xml:space="preserve">
          <source>Set the &lt;code&gt;Last-Modified&lt;/code&gt; header to the last modified date of the file on the OS.</source>
          <target state="translated">将 &lt;code&gt;Last-Modified&lt;/code&gt; 标头设置为OS上文件的最后修改日期。</target>
        </trans-unit>
        <trans-unit id="fe1675aa1046d105878a7a7221af43aae399e09f" translate="yes" xml:space="preserve">
          <source>Set the ETag response header. For possible values, see the &lt;a href=&quot;#etag.options.table&quot;&gt;&lt;code&gt;etag&lt;/code&gt; options table&lt;/a&gt;.</source>
          <target state="translated">设置ETag响应头。有关可能的值，请参阅&lt;a href=&quot;#etag.options.table&quot;&gt; &lt;code&gt;etag&lt;/code&gt; 选项表&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="ca3595f7f468697dac8f5eac858853777a733dca" translate="yes" xml:space="preserve">
          <source>Set the environment variable &lt;code&gt;NODE_ENV&lt;/code&gt; to &lt;code&gt;production&lt;/code&gt;, to run the app in production mode.</source>
          <target state="translated">将环境变量 &lt;code&gt;NODE_ENV&lt;/code&gt; 设置为 &lt;code&gt;production&lt;/code&gt; ，以在生产模式下运行该应用程序。</target>
        </trans-unit>
        <trans-unit id="812871f8aff15822574da03c93bd7a3c69501915" translate="yes" xml:space="preserve">
          <source>Set the following cookie options to enhance security:</source>
          <target state="translated">设置以下cookie选项以提高安全性。</target>
        </trans-unit>
        <trans-unit id="4bb24da44fa19b1e64023a68f806c871ceb12b90" translate="yes" xml:space="preserve">
          <source>Set the max-age property of the Cache-Control header in milliseconds or a string in &lt;a href=&quot;https://www.npmjs.org/package/ms&quot;&gt;ms format&lt;/a&gt;.</source>
          <target state="translated">设置Cache-Control标头的max-age属性（以毫秒为单位）或以&lt;a href=&quot;https://www.npmjs.org/package/ms&quot;&gt;ms格式&lt;/a&gt;设置字符串。</target>
        </trans-unit>
        <trans-unit id="8067e687f2b903faa6d7ffd92b0873cef84879e1" translate="yes" xml:space="preserve">
          <source>Set the response status code and send its string representation as the response body.</source>
          <target state="translated">设置响应状态码,并将其字符串表示作为响应体发送。</target>
        </trans-unit>
        <trans-unit id="4f3627cc843e619ce208469b210a455da4e1cd95" translate="yes" xml:space="preserve">
          <source>Set this option to &lt;code&gt;true&lt;/code&gt; so you can map multiple physical directories to the same web address or for routes to fill in non-existent files.</source>
          <target state="translated">将此选项设置为 &lt;code&gt;true&lt;/code&gt; ,这样就可以将多个物理目录映射到相同的网址，或用于路由以填充不存在的文件。</target>
        </trans-unit>
        <trans-unit id="e868de397f8212c4c955107ef305f4249469f617" translate="yes" xml:space="preserve">
          <source>Set up the service</source>
          <target state="translated">设置服务</target>
        </trans-unit>
        <trans-unit id="d9d26a176d24ac16c5f304697d0c422ed72ecb7b" translate="yes" xml:space="preserve">
          <source>Sets cookie &lt;code&gt;name&lt;/code&gt; to &lt;code&gt;value&lt;/code&gt;. The &lt;code&gt;value&lt;/code&gt; parameter may be a string or object converted to JSON.</source>
          <target state="translated">将cookie &lt;code&gt;name&lt;/code&gt; 设置为 &lt;code&gt;value&lt;/code&gt; 。所述 &lt;code&gt;value&lt;/code&gt; 参数可以是转换为JSON字符串或对象。</target>
        </trans-unit>
        <trans-unit id="6d957615f8daf970417d58c1b4e7b575ea9ce61a" translate="yes" xml:space="preserve">
          <source>Sets file extension fallbacks: If a file is not found, search for files with the specified extensions and serve the first one found. Example: &lt;code&gt;['html', 'htm']&lt;/code&gt;.</source>
          <target state="translated">设置文件扩展名后备：如果未找到文件，请搜索具有指定扩展名的文件并提供找到的第一个文件。示例： &lt;code&gt;['html', 'htm']&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="3f1735cf33f94bf2c25d077c6707cd2b1c3368d3" translate="yes" xml:space="preserve">
          <source>Sets the &lt;code&gt;Content-Type&lt;/code&gt; HTTP header to the MIME type as determined by &lt;a href=&quot;https://github.com/broofa/node-mime#mimelookuppath&quot;&gt;mime.lookup()&lt;/a&gt; for the specified &lt;code&gt;type&lt;/code&gt;. If &lt;code&gt;type&lt;/code&gt; contains the &amp;ldquo;/&amp;rdquo; character, then it sets the &lt;code&gt;Content-Type&lt;/code&gt; to &lt;code&gt;type&lt;/code&gt;.</source>
          <target state="translated">将 &lt;code&gt;Content-Type&lt;/code&gt; HTTP标头设置为&lt;a href=&quot;https://github.com/broofa/node-mime#mimelookuppath&quot;&gt;mime.lookup（）&lt;/a&gt;为指定 &lt;code&gt;type&lt;/code&gt; 确定的MIME 类型。如果 &lt;code&gt;type&lt;/code&gt; 包含&amp;ldquo; /&amp;rdquo;字符，则它将 &lt;code&gt;Content-Type&lt;/code&gt; 设置为 &lt;code&gt;type&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="ae2c1bc5b61320843da480f7f584847472a50adc" translate="yes" xml:space="preserve">
          <source>Sets the &lt;code&gt;Last-Modified&lt;/code&gt; header to the last modified date of the file on the OS. Set &lt;code&gt;false&lt;/code&gt; to disable it.</source>
          <target state="translated">将 &lt;code&gt;Last-Modified&lt;/code&gt; 标头设置为OS上文件的最后修改日期。设置为 &lt;code&gt;false&lt;/code&gt; 可将其禁用。</target>
        </trans-unit>
        <trans-unit id="3c127a5206298b34086b761ceb16071ab006c8bd" translate="yes" xml:space="preserve">
          <source>Sets the Boolean setting &lt;code&gt;name&lt;/code&gt; to &lt;code&gt;false&lt;/code&gt;, where &lt;code&gt;name&lt;/code&gt; is one of the properties from the &lt;a href=&quot;#app.settings.table&quot;&gt;app settings table&lt;/a&gt;. Calling &lt;code&gt;app.set('foo', false)&lt;/code&gt; for a Boolean property is the same as calling &lt;code&gt;app.disable('foo')&lt;/code&gt;.</source>
          <target state="translated">将布尔设置 &lt;code&gt;name&lt;/code&gt; 设置为 &lt;code&gt;false&lt;/code&gt; ，其中 &lt;code&gt;name&lt;/code&gt; 是&lt;a href=&quot;#app.settings.table&quot;&gt;应用程序设置表&lt;/a&gt;中的属性之一。为布尔属性调用 &lt;code&gt;app.set('foo', false)&lt;/code&gt; 与调用 &lt;code&gt;app.disable('foo')&lt;/code&gt; 相同。</target>
        </trans-unit>
        <trans-unit id="96afd3b383e32a571150e39f004f8ef4b9ff759b" translate="yes" xml:space="preserve">
          <source>Sets the Boolean setting &lt;code&gt;name&lt;/code&gt; to &lt;code&gt;true&lt;/code&gt;, where &lt;code&gt;name&lt;/code&gt; is one of the properties from the &lt;a href=&quot;#app.settings.table&quot;&gt;app settings table&lt;/a&gt;. Calling &lt;code&gt;app.set('foo', true)&lt;/code&gt; for a Boolean property is the same as calling &lt;code&gt;app.enable('foo')&lt;/code&gt;.</source>
          <target state="translated">将布尔设置 &lt;code&gt;name&lt;/code&gt; 设置为 &lt;code&gt;true&lt;/code&gt; ，其中 &lt;code&gt;name&lt;/code&gt; 是&lt;a href=&quot;#app.settings.table&quot;&gt;应用程序设置表&lt;/a&gt;中的属性之一。为布尔属性调用 &lt;code&gt;app.set('foo', true)&lt;/code&gt; 与调用 &lt;code&gt;app.enable('foo')&lt;/code&gt; 相同。</target>
        </trans-unit>
        <trans-unit id="9a92ec83cd28e0293317d07432beedeaaf625282" translate="yes" xml:space="preserve">
          <source>Sets the HTTP response &lt;code&gt;Content-Disposition&lt;/code&gt; header field to &amp;ldquo;attachment&amp;rdquo;. If a &lt;code&gt;filename&lt;/code&gt; is given, then it sets the Content-Type based on the extension name via &lt;code&gt;res.type()&lt;/code&gt;, and sets the &lt;code&gt;Content-Disposition&lt;/code&gt; &amp;ldquo;filename=&amp;rdquo; parameter.</source>
          <target state="translated">将HTTP响应的 &lt;code&gt;Content-Disposition&lt;/code&gt; 标头字段设置为&amp;ldquo; attachment&amp;rdquo;。如果提供了 &lt;code&gt;filename&lt;/code&gt; ，则它将通过 &lt;code&gt;res.type()&lt;/code&gt; 基于扩展名设置Content-Type ，并设置 &lt;code&gt;Content-Disposition&lt;/code&gt; &amp;ldquo; filename =&amp;rdquo;参数。</target>
        </trans-unit>
        <trans-unit id="f8f93665b83107c2e6d681f6e0b70dd01ef33dcd" translate="yes" xml:space="preserve">
          <source>Sets the HTTP status for the response. It is a chainable alias of Node&amp;rsquo;s &lt;a href=&quot;http://nodejs.org/api/http.html#http_response_statuscode&quot;&gt;response.statusCode&lt;/a&gt;.</source>
          <target state="translated">设置响应的HTTP状态。它是Node的&lt;a href=&quot;http://nodejs.org/api/http.html#http_response_statuscode&quot;&gt;response.statusCode&lt;/a&gt;的可链接别名。</target>
        </trans-unit>
        <trans-unit id="e75189e99f79f581448de6a2aab88f05edd08070" translate="yes" xml:space="preserve">
          <source>Sets the max-age property of the &lt;code&gt;Cache-Control&lt;/code&gt; header in milliseconds or a string in &lt;a href=&quot;https://www.npmjs.org/package/ms&quot;&gt;ms format&lt;/a&gt;</source>
          <target state="translated">设置 &lt;code&gt;Cache-Control&lt;/code&gt; 标头的max-age属性（以毫秒为单位）或以&lt;a href=&quot;https://www.npmjs.org/package/ms&quot;&gt;ms格式设置&lt;/a&gt;的字符串</target>
        </trans-unit>
        <trans-unit id="ed8e34cb68c3c293a176f69f586487abb0752075" translate="yes" xml:space="preserve">
          <source>Sets the response &lt;code&gt;Location&lt;/code&gt; HTTP header to the specified &lt;code&gt;path&lt;/code&gt; parameter.</source>
          <target state="translated">将响应 &lt;code&gt;Location&lt;/code&gt; HTTP标头设置为指定的 &lt;code&gt;path&lt;/code&gt; 参数。</target>
        </trans-unit>
        <trans-unit id="b841ff934b1c8b793f4fac863ece282f7abaf401" translate="yes" xml:space="preserve">
          <source>Sets the response HTTP status code to &lt;code&gt;statusCode&lt;/code&gt; and send its string representation as the response body.</source>
          <target state="translated">将响应HTTP状态代码设置为 &lt;code&gt;statusCode&lt;/code&gt; 并将其字符串表示形式发送为响应主体。</target>
        </trans-unit>
        <trans-unit id="fea677509563fa0e4df6fb90d0275556cc21d2f7" translate="yes" xml:space="preserve">
          <source>Sets the response&amp;rsquo;s HTTP header &lt;code&gt;field&lt;/code&gt; to &lt;code&gt;value&lt;/code&gt;. To set multiple fields at once, pass an object as the parameter.</source>
          <target state="translated">将响应的HTTP标头 &lt;code&gt;field&lt;/code&gt; 为 &lt;code&gt;value&lt;/code&gt; 。要一次设置多个字段，请传递一个对象作为参数。</target>
        </trans-unit>
        <trans-unit id="01c57596ded7f92c61eb9b9ca61f031a0a6f9415" translate="yes" xml:space="preserve">
          <source>Setting NODE_ENV to &amp;ldquo;production&amp;rdquo; makes Express:</source>
          <target state="translated">将NODE_ENV设置为&amp;ldquo;生产&amp;rdquo;将使Express：</target>
        </trans-unit>
        <trans-unit id="8fd26d0061bbc4e4ba2738b42cb7c96d5ec29c18" translate="yes" xml:space="preserve">
          <source>Shows hidden properties on inspected objects.</source>
          <target state="translated">显示被检查对象的隐藏属性。</target>
        </trans-unit>
        <trans-unit id="cc39f490b7ece8cf214b816546411004285f66e0" translate="yes" xml:space="preserve">
          <source>Since &lt;a href=&quot;#router&quot;&gt;router&lt;/a&gt; and &lt;a href=&quot;#application&quot;&gt;app&lt;/a&gt; implement the middleware interface, you can use them as you would any other middleware function.</source>
          <target state="translated">由于&lt;a href=&quot;#router&quot;&gt;路由器&lt;/a&gt;和&lt;a href=&quot;#application&quot;&gt;应用程序&lt;/a&gt;实现了中间件接口，因此您可以像使用任何其他中间件功能一样使用它们。</target>
        </trans-unit>
        <trans-unit id="52d9700618ec718ef68c23a46edf1c02cf117f08" translate="yes" xml:space="preserve">
          <source>Since &lt;code&gt;path&lt;/code&gt; defaults to &amp;ldquo;/&amp;rdquo;, middleware mounted without a path will be executed for every request to the app.</source>
          <target state="translated">由于 &lt;code&gt;path&lt;/code&gt; 默认为&amp;ldquo; /&amp;rdquo;，因此将为对应用程序的每个请求执行不带路径安装的中间件。</target>
        </trans-unit>
        <trans-unit id="3f19de106e2828a5cbd72d9b5a11c55936497375" translate="yes" xml:space="preserve">
          <source>Since npm@6, npm automatically reviews every install request. Also you can use &amp;lsquo;npm audit&amp;rsquo; to analyze your dependency tree.</source>
          <target state="translated">从npm @ 6开始，npm会自动检查每个安装请求。您也可以使用&amp;ldquo; npm audit&amp;rdquo;来分析您的依赖树。</target>
        </trans-unit>
        <trans-unit id="488e6573921b32ba221f55e5ab7919687604d70e" translate="yes" xml:space="preserve">
          <source>Since promises automatically catch both synchronous errors and rejected promises, you can simply provide &lt;code&gt;next&lt;/code&gt; as the final catch handler and Express will catch errors, because the catch handler is given the error as the first argument.</source>
          <target state="translated">由于Promise会自动捕获同步错误和已拒绝的Promise，因此您可以简单地提供 &lt;code&gt;next&lt;/code&gt; 作为最终的catch处理程序，而Express将捕获错误，因为catch处理程序将错误作为第一个参数。</target>
        </trans-unit>
        <trans-unit id="ab699cab9b6a96efd28eddcd1c6d6ba657ae17ff" translate="yes" xml:space="preserve">
          <source>Since properties under category 1 are dynamically assigned on the &lt;code&gt;request&lt;/code&gt; and &lt;code&gt;response&lt;/code&gt; objects in the context of the current request-response cycle, their behavior cannot be overriden.</source>
          <target state="translated">由于类别1下的属性是在当前请求-响应周期的上下文中动态分配给 &lt;code&gt;request&lt;/code&gt; 和 &lt;code&gt;response&lt;/code&gt; 对象的，因此不能覆盖它们的行为。</target>
        </trans-unit>
        <trans-unit id="c711b307679327e62bd7aafaf064a6a1fb9ba9c8" translate="yes" xml:space="preserve">
          <source>Since the hyphen (&lt;code&gt;-&lt;/code&gt;) and the dot (&lt;code&gt;.&lt;/code&gt;) are interpreted literally, they can be used along with route parameters for useful purposes.</source>
          <target state="translated">由于连字符（ &lt;code&gt;-&lt;/code&gt; ）和点（ &lt;code&gt;.&lt;/code&gt; ）是按字面意义解释的，因此可以将它们与路由参数一起使用，以达到有用的目的。</target>
        </trans-unit>
        <trans-unit id="26051ca8f4d7cc2dea4df889a3ca6dc8fc390c4a" translate="yes" xml:space="preserve">
          <source>Since the job is configured to run when the system starts, your app will be started along with the operating system, and automatically restarted if the app crashes or the system goes down.</source>
          <target state="translated">由于作业被配置为在系统启动时运行,所以你的应用程序将与操作系统一起启动,并在应用程序崩溃或系统瘫痪时自动重启。</target>
        </trans-unit>
        <trans-unit id="0d5974c872752dfafcaffd48b1470f8eaf4502f7" translate="yes" xml:space="preserve">
          <source>Single Middleware</source>
          <target state="translated">单一中间件</target>
        </trans-unit>
        <trans-unit id="607fb25f51b09c7bc30244aee3c6db9642bf3afb" translate="yes" xml:space="preserve">
          <source>Snyk offers both a &lt;a href=&quot;https://www.npmjs.com/package/snyk&quot;&gt;command-line tool&lt;/a&gt; and a &lt;a href=&quot;https://snyk.io/docs/github&quot;&gt;Github integration&lt;/a&gt; that checks your application against &lt;a href=&quot;https://snyk.io/vuln/&quot;&gt;Snyk&amp;rsquo;s open source vulnerability database&lt;/a&gt; for any known vulnerabilities in your dependencies. Install the CLI as follows:</source>
          <target state="translated">Snyk提供了&lt;a href=&quot;https://www.npmjs.com/package/snyk&quot;&gt;命令行工具&lt;/a&gt;和&lt;a href=&quot;https://snyk.io/docs/github&quot;&gt;Github集成&lt;/a&gt;，可以根据&lt;a href=&quot;https://snyk.io/vuln/&quot;&gt;Snyk的开源漏洞数据库&lt;/a&gt;检查您的应用程序中是否存在依赖项中的任何已知漏洞。如下安装CLI：</target>
        </trans-unit>
        <trans-unit id="6279396013b64257c617ddc7110244eed1d31981" translate="yes" xml:space="preserve">
          <source>So when you add a custom error handler, you must delegate to the default Express error handler, when the headers have already been sent to the client:</source>
          <target state="translated">所以当你添加一个自定义的错误处理程序时,你必须委托给默认的Express错误处理程序,当头信息已经被发送到客户端时。</target>
        </trans-unit>
        <trans-unit id="9d68a7207b7e44dd4624efa92c02b135877d0417" translate="yes" xml:space="preserve">
          <source>So, best practice is to to turn off the header with the &lt;code&gt;app.disable()&lt;/code&gt; method:</source>
          <target state="translated">因此，最佳实践是使用 &lt;code&gt;app.disable()&lt;/code&gt; 方法关闭标头：</target>
        </trans-unit>
        <trans-unit id="584c02398e2b65a55588933aa5127177d2d8bf7d" translate="yes" xml:space="preserve">
          <source>So, best practice is to turn off the header with the &lt;code&gt;app.disable()&lt;/code&gt; method:</source>
          <target state="translated">因此，最佳做法是使用 &lt;code&gt;app.disable()&lt;/code&gt; 方法关闭标头：</target>
        </trans-unit>
        <trans-unit id="a687a2be0072445ebe09751e2859f8e59a7a95ff" translate="yes" xml:space="preserve">
          <source>Some popular template engines that work with Express are &lt;a href=&quot;https://pugjs.org/api/getting-started.html&quot;&gt;Pug&lt;/a&gt;, &lt;a href=&quot;https://www.npmjs.com/package/mustache&quot;&gt;Mustache&lt;/a&gt;, and &lt;a href=&quot;https://www.npmjs.com/package/ejs&quot;&gt;EJS&lt;/a&gt;. The &lt;a href=&quot;../starter/generator&quot;&gt;Express application generator&lt;/a&gt; uses &lt;a href=&quot;https://www.npmjs.com/package/jade&quot;&gt;Jade&lt;/a&gt; as its default, but it also supports several others.</source>
          <target state="translated">与Express一起使用的一些流行模板引擎是&lt;a href=&quot;https://pugjs.org/api/getting-started.html&quot;&gt;Pug&lt;/a&gt;，&lt;a href=&quot;https://www.npmjs.com/package/mustache&quot;&gt;Mustache&lt;/a&gt;和&lt;a href=&quot;https://www.npmjs.com/package/ejs&quot;&gt;EJS&lt;/a&gt;。该&lt;a href=&quot;../starter/generator&quot;&gt;Express应用程序生成器&lt;/a&gt;使用&lt;a href=&quot;https://www.npmjs.com/package/jade&quot;&gt;玉器&lt;/a&gt;作为其默认的，但它也支持其他几个人。</target>
        </trans-unit>
        <trans-unit id="ad21a0fa8305b84398f97adf2adfa2f2df5895d2" translate="yes" xml:space="preserve">
          <source>Some template engines do not follow this convention. The &lt;a href=&quot;https://github.com/tj/consolidate.js&quot;&gt;consolidate.js&lt;/a&gt; library maps Node template engines to follow this convention, so they work seamlessly with Express.</source>
          <target state="translated">某些模板引擎不遵循此约定。该&lt;a href=&quot;https://github.com/tj/consolidate.js&quot;&gt;consolidate.js&lt;/a&gt;库映射节点模板引擎要遵守这个习惯，所以他们与快递无缝协作。</target>
        </trans-unit>
        <trans-unit id="6d225d49e44b9f256124d3c29d27b557e2aaecb1" translate="yes" xml:space="preserve">
          <source>Some template engines do not follow this convention. The &lt;a href=&quot;https://www.npmjs.org/package/consolidate&quot;&gt;Consolidate.js&lt;/a&gt; library follows this convention by mapping all of the popular Node.js template engines, and therefore works seamlessly within Express.</source>
          <target state="translated">某些模板引擎不遵循此约定。该&lt;a href=&quot;https://www.npmjs.org/package/consolidate&quot;&gt;Consolidate.js&lt;/a&gt;通过映射所有流行的Node.js的模板引擎库遵循此惯例，因此，无缝内快车。</target>
        </trans-unit>
        <trans-unit id="ee469dd894d2c0d5112eca8d1731b75ff0b3f857" translate="yes" xml:space="preserve">
          <source>Some versions of Node.js will throw when &lt;code&gt;res.statusCode&lt;/code&gt; is set to an invalid HTTP status code (outside of the range &lt;code&gt;100&lt;/code&gt; to &lt;code&gt;599&lt;/code&gt;). Consult the HTTP server documentation for the Node.js version being used.</source>
          <target state="translated">当 &lt;code&gt;res.statusCode&lt;/code&gt; 设置为无效的HTTP状态代码（超出 &lt;code&gt;100&lt;/code&gt; 到 &lt;code&gt;599&lt;/code&gt; 的范围）时，将抛出某些版本的Node.js。请查阅HTTP服务器文档以获取所使用的Node.js版本。</target>
        </trans-unit>
        <trans-unit id="2336973f3c4b42f5d83e68cea9dcad2127cff9ac" translate="yes" xml:space="preserve">
          <source>Sparse arrays that have extremely high indexes in query string could cause the process to run out of memory and crash the server.</source>
          <target state="translated">稀疏数组如果在查询字符串中有极高的索引,可能会导致进程跑出内存,使服务器崩溃。</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
