<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="es" datatype="htmlbody" original="yii">
    <body>
      <group id="yii">
        <trans-unit id="05e6432034ef916c839ed453942007df9bbc7e35" translate="yes" xml:space="preserve">
          <source>If a relation name corresponds to multiple links, use an array to represent them.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="07fc1fbe30461163a4d7edb3d7b9c41f2deb4130" translate="yes" xml:space="preserve">
          <source>If a relation query does not need modification, you may use the relation name as the array value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2893ac46b4db20dcedcb8dbcb59c152f70a87929" translate="yes" xml:space="preserve">
          <source>If a table name is given as &lt;code&gt;{{%TableName}}&lt;/code&gt;, then the percentage character &lt;code&gt;%&lt;/code&gt; will be replaced with the table prefix. For example, &lt;code&gt;{{%post}}&lt;/code&gt; becomes &lt;code&gt;{{tbl_post}}&lt;/code&gt;. The brackets around the table name are used for &lt;a href=&quot;guide-db-dao#quoting-table-and-column-names&quot;&gt;quoting in an SQL query&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="223600ba55b08146154a14f8154fbb1bbc5531c7" translate="yes" xml:space="preserve">
          <source>If a translation is not found, a &lt;a href=&quot;yii-i18n-messagesource#EVENT_MISSING_TRANSLATION-detail&quot;&gt;missingTranslation&lt;/a&gt; event will be triggered.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="38ce3549db44a118e6b64c9cfe24960da7174370" translate="yes" xml:space="preserve">
          <source>If a type cannot be found in &lt;a href=&quot;yii-db-querybuilder#%24typeMap-detail&quot;&gt;$typeMap&lt;/a&gt;, it will be returned without any change.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="95b2951225cd70cf76423e2a351e9210a631d915" translate="yes" xml:space="preserve">
          <source>If a value is &lt;code&gt;null&lt;/code&gt;, the corresponding attribute will not be rendered.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3c08e7ad31eb045621b72a7b1ab5f79522b335b2" translate="yes" xml:space="preserve">
          <source>If a view is rendered within another view, the directory containing the other view file will be prefixed to the new view name to form the actual view file path. For example, &lt;code&gt;item&lt;/code&gt; will be resolved into &lt;code&gt;@app/views/post/item.php&lt;/code&gt; if it is being rendered in the view &lt;code&gt;@app/views/post/index.php&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a742dbe317b1b848b9f3c6ded469a88e7aa150e3" translate="yes" xml:space="preserve">
          <source>If access is granted</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="42e7d85c50bf4c4991b2a8033db2a13ae6a18d3e" translate="yes" xml:space="preserve">
          <source>If additional transformations are required or the way of getting value is complex, second argument could be specified as an anonymous function:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b9ceff565c106def18cbb9d250587250aa578794" translate="yes" xml:space="preserve">
          <source>If address is already in use</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6ce5090ec8349b3b513dc3d84a59303a02cb6be7" translate="yes" xml:space="preserve">
          <source>If all the CRUD operations are managed together then it's a good idea to use a single permission, like &lt;code&gt;managePost&lt;/code&gt;, and check it in &lt;a href=&quot;yii-web-controller#beforeAction()-detail&quot;&gt;yii\web\Controller::beforeAction()&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6b2e25615ef256ccccfd5d502967e33985ff1a0d" translate="yes" xml:space="preserve">
          <source>If all you need is plain text then escaping is as easy as the following:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2c3dee110b5c42fa6eb43d86ddbcfcf0a649fcf2" translate="yes" xml:space="preserve">
          <source>If an attribute fails the validation, the method/function should call &lt;a href=&quot;yii-base-model#addError()-detail&quot;&gt;yii\base\Model::addError()&lt;/a&gt; to save the error message in the model so that it can be retrieved back later to present to end users.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="997fe1e2325ed5be0a8af05fc54f08dc290b7b4a" translate="yes" xml:space="preserve">
          <source>If an attribute value is an instance of &lt;a href=&quot;yii-db-activerecordinterface&quot;&gt;yii\db\ActiveRecordInterface&lt;/a&gt; or an array of such instances, the primary value(s) of the AR instance(s) will be returned instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7d137b7f63db74e30d1896ed425bcda906a256fd" translate="yes" xml:space="preserve">
          <source>If an extension does not have a class autoloader but follows the &lt;a href=&quot;http://www.php-fig.org/psr/psr-4/&quot;&gt;PSR-4 standard&lt;/a&gt;, you may use the class autoloader provided by Yii to autoload the extension classes. All you need to do is just to declare a &lt;a href=&quot;guide-concept-aliases#defining-aliases&quot;&gt;root alias&lt;/a&gt; for the extension root directory. For example, assuming you have installed an extension in the directory &lt;code&gt;vendor/mycompany/myext&lt;/code&gt;, and the extension classes are under the &lt;code&gt;myext&lt;/code&gt; namespace, then you can include the following code in your application configuration:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c25ebc5293d0e152bf2e20dfb7ff919b2c15aa1a" translate="yes" xml:space="preserve">
          <source>If any of the above steps resolves into a controller, it is returned together with the rest part of the route which will be treated as the action ID. Otherwise, &lt;code&gt;false&lt;/code&gt; will be returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3ec5aa866b1b32b89aad2e953478986516e2daf4" translate="yes" xml:space="preserve">
          <source>If any of the filters cancel the action execution, the filters (both pre-filters and post-filters) after it will not be applied.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a7a45bbff22367b061c745ed6d5e7b26e6210ab0" translate="yes" xml:space="preserve">
          <source>If array - request data, otherwise - request content.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f62c088ec033fbb93dcb286068f7ebdb02e96cf9" translate="yes" xml:space="preserve">
          <source>If array given, each element of it will be processed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f11e980ab02eb3b139dff315ba27380bfafd2c82" translate="yes" xml:space="preserve">
          <source>If authentication fails, a response with HTTP status 401 will be sent back together with other appropriate headers (such as a &lt;code&gt;WWW-Authenticate&lt;/code&gt; header for HTTP Basic Auth).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a559c001a5940e739fca0014d88e55097e606bdc" translate="yes" xml:space="preserve">
          <source>If authentication succeeds, the controller will perform other checks (such as rate limiting, authorization) and then run the action. The authenticated user identity information can be retrieved via &lt;code&gt;Yii::$app-&amp;gt;user-&amp;gt;identity&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7812529036e081ea6133baea3187ec5f297cd136" translate="yes" xml:space="preserve">
          <source>If base value is set</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b6b4e127b6d8e4bcf8dd852f2b2a2081b7d3c9ea" translate="yes" xml:space="preserve">
          <source>If body is already set and its content type matches given one, it will be overridden, if content type miss match the multipart message will be composed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="099aa1cd3808f580f4372e95a7c4d749a4dd6082" translate="yes" xml:space="preserve">
          <source>If both Last-Modified and ETag are null, returns false.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b250fde6ec6530eee061bbc13257eb5eb95a76a7" translate="yes" xml:space="preserve">
          <source>If bundle should be published</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0517f838ae9ee8f77b88300f42a2b3f09eae86fa" translate="yes" xml:space="preserve">
          <source>If data is used to specify column names or table names the best thing to do is to allow only predefined set of values:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="031596c967f1eed4d6c72b62b771db2ff232f37d" translate="yes" xml:space="preserve">
          <source>If each array has an element with the same string key value, the latter will overwrite the former (different from array_merge_recursive). Recursive merging will be conducted if both arrays have an element of array type and are having the same key. For integer-keyed elements, the elements from the latter array will be appended to the former array. You can use &lt;a href=&quot;yii-helpers-unsetarrayvalue&quot;&gt;yii\helpers\UnsetArrayValue&lt;/a&gt; object to unset value from previous array or &lt;a href=&quot;yii-helpers-replacearrayvalue&quot;&gt;yii\helpers\ReplaceArrayValue&lt;/a&gt; to force replace former value instead of recursive merging.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a30c1dbc1ae9c5879108573ac9579e937826a5e4" translate="yes" xml:space="preserve">
          <source>If error is one of fatal type</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7aa6da69fd6b2a24ac80f07abc11630fe37a3dc4" translate="yes" xml:space="preserve">
          <source>If existing file should be overwritten without backup</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a594b4be4fca8e7c5b2346783e67846f1d48aef4" translate="yes" xml:space="preserve">
          <source>If false carousel indicators (</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="afa90e727a43a2ed8bd10b9879eba1564cb612ef" translate="yes" xml:space="preserve">
          <source>If intl extension is loaded</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="78ade4d7e982d95934c57c2a009b333e29b4a3c1" translate="yes" xml:space="preserve">
          <source>If intl extension isn't available uses fallback that converts latin characters only and removes the rest. You may customize characters map via $transliteration property of the helper.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2474b60b32e60e2e083dde1c95d1593a697cdc0a" translate="yes" xml:space="preserve">
          <source>If it is the first time you are releasing an extension, you should register it on a Composer repository, such as &lt;a href=&quot;https://packagist.org/&quot;&gt;Packagist&lt;/a&gt;. After that, all you need to do is simply create a release tag (e.g. &lt;code&gt;v1.0.1&lt;/code&gt;) on the VCS repository of your extension and notify the Composer repository about the new release. People will then be able to find the new release, and install or update the extension through the Composer repository.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bdce04541a3e084a3c66dc7fd4de0a0f84a1805c" translate="yes" xml:space="preserve">
          <source>If it should be HTML we could get some help from HtmlPurifier:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ecb86142fffc322bbba2009336aba359bb8dd102" translate="yes" xml:space="preserve">
          <source>If it's the case don't forget to deny access to everything except &lt;code&gt;web&lt;/code&gt;. If it can't be done consider hosting your application elsewhere.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8507a4cf09db708e4fbf14ec0335fbe6f901f5a0" translate="yes" xml:space="preserve">
          <source>If message was sent successfully.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5f92506f19def9069d6a88ef5be3bcb4d1bf0df2" translate="yes" xml:space="preserve">
          <source>If most of your DB tables names share a common prefix, you may use the table prefix feature provided by Yii DAO.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="73e3fd63985d864c72e16bb65657fa000e1864fb" translate="yes" xml:space="preserve">
          <source>If need to build models from log messages and refresh them.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1bb5f9bd79229e1bf9ddf5f5527086670488a827" translate="yes" xml:space="preserve">
          <source>If needed you can pass transaction isolation level as a second parameter:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="24f76137c3d1ac0a7da27dfd4aae8dc782056714" translate="yes" xml:space="preserve">
          <source>If no error happens during deletion</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="179b61a5213f3bcea415d706500dd7f533cc6a41" translate="yes" xml:space="preserve">
          <source>If no parameter is passed, the generated URL is relative. You can either pass &lt;code&gt;true&lt;/code&gt; to get an absolute URL for the current schema or specify a schema explicitly (&lt;code&gt;https&lt;/code&gt;, &lt;code&gt;http&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f9d379a49170ee8cca999f33f9b2c03d2170a703" translate="yes" xml:space="preserve">
          <source>If no renderer is available for the given view file, the view file will be treated as a normal PHP and rendered via &lt;a href=&quot;yii-base-view#renderPhpFile()-detail&quot;&gt;renderPhpFile()&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e18ed81a57461e23b23fb56496f6f86cd9732a5a" translate="yes" xml:space="preserve">
          <source>If none of the above operators is detected, the &lt;code&gt;$defaultOperator&lt;/code&gt; will be used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4c47821db582b0de51f4d0ce64e727247b64ab77" translate="yes" xml:space="preserve">
          <source>If not listed by this method, attributes retrieved through &lt;a href=&quot;yii-elasticsearch-query#fields()-detail&quot;&gt;yii\elasticsearch\ActiveQuery::fields()&lt;/a&gt; will converted to a scalar value when the result array contains only one value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9b2b751adffebf8c2af7b0a71526c135c0fdfa67" translate="yes" xml:space="preserve">
          <source>If not set - &lt;a href=&quot;yii-db-queryinterface#one()-detail&quot;&gt;yii\db\QueryInterface::one()&lt;/a&gt; will be used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3e0ffcd889630e8aed7165b8c3be21bb87924e9a" translate="yes" xml:space="preserve">
          <source>If not set - application 'session' component will be used, but only, if it is available (e.g. in web application), otherwise - no session will be used and no data saving will be performed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fb62da5c6478461f9eac123c021de7dab78d8b3f" translate="yes" xml:space="preserve">
          <source>If not set explicitly in the application config, this property will be populated with the contents of &lt;code&gt;@vendor/yiisoft/extensions.php&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9b6cb2dfb8e9531ebd9fe6253f3e645ad7009c7c" translate="yes" xml:space="preserve">
          <source>If not set or empty, it means this rule applies to all controllers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="604e8c580e47b4ca19f15f2f42df59e2a727a9d9" translate="yes" xml:space="preserve">
          <source>If not set the default value will be taken from &lt;code&gt;Yii::$app-&amp;gt;formatter-&amp;gt;dateFormat&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c979fcf344412c1700f08cf7587f16467c67969a" translate="yes" xml:space="preserve">
          <source>If not set unique slug will be generated adding incrementing suffix to the base slug.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="18f471cd3cabad13614fb92598ccdaa08ec91d8a" translate="yes" xml:space="preserve">
          <source>If not set, &lt;a href=&quot;yii-baseyii#getLogger()-detail&quot;&gt;Yii::getLogger()&lt;/a&gt; will be used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d8652222a10e264a872f3456e5e838e863270f75" translate="yes" xml:space="preserve">
          <source>If not set, &lt;a href=&quot;yii-log-target#getMessagePrefix()-detail&quot;&gt;getMessagePrefix()&lt;/a&gt; will be used, which prefixes the message with context information such as user IP, user ID and session ID.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="598244aad0b8b5a3d25dc3ad366072c313b162ad" translate="yes" xml:space="preserve">
          <source>If not set, &lt;a href=&quot;yii-validators-datevalidator#%24timestampAttribute-detail&quot;&gt;$timestampAttribute&lt;/a&gt; will receive a UNIX timestamp. If &lt;a href=&quot;yii-validators-datevalidator#%24timestampAttribute-detail&quot;&gt;$timestampAttribute&lt;/a&gt; is not set, this property will be ignored.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6f0159300f503950ad0cafa083a6a5451887329c" translate="yes" xml:space="preserve">
          <source>If not set, attribute type map will be composed automatically from the owner validation rules.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c7ba6cf13dbde30bbf876ef13767afa18e0f6f50" translate="yes" xml:space="preserve">
          <source>If not set, it will use the &lt;code&gt;controllers&lt;/code&gt; sub-namespace under the namespace of this module. For example, if the namespace of this module is &lt;code&gt;foo\bar&lt;/code&gt;, then the default controller namespace would be &lt;code&gt;foo\bar\controllers&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6cb28085c35f61ff67f1625031bdec1323c891ac" translate="yes" xml:space="preserve">
          <source>If not, use radio list:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="79d598537e0ab26c10557e14982c6ecf0e1efced" translate="yes" xml:space="preserve">
          <source>If object tags should be added</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3cc4368a6f2e22b506c6355d54bb9b8354d29db8" translate="yes" xml:space="preserve">
          <source>If obsolete translations should be marked</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ce2587abda112e3f1ab3670ea7fefe36f3c59a94" translate="yes" xml:space="preserve">
          <source>If obsolete translations should be removed</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="927aca9111385a996b928446d5d0bd9c92ba6744" translate="yes" xml:space="preserve">
          <source>If one of the calls returns &lt;code&gt;false&lt;/code&gt;, the rest of the uncalled &lt;code&gt;beforeAction()&lt;/code&gt; methods will be skipped and the action execution will be cancelled.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4e2ffb22a05cead6ff0620f77d289bb40e0357e5" translate="yes" xml:space="preserve">
          <source>If partial match should be used</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="075825610310b5c6cb6078260fc13ca717495d28" translate="yes" xml:space="preserve">
          <source>If partial match should be used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="91dd0765a1c03f17ceb419a01dcf89142fa16a49" translate="yes" xml:space="preserve">
          <source>If request failed</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="08a10fa4be221ceef987c0f17fc663e01d397fb0" translate="yes" xml:space="preserve">
          <source>If resolved to an abstract class or an interface (since 2.0.9)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cd9e4f2310e3dae8708c94347dc9c241334cde3a" translate="yes" xml:space="preserve">
          <source>If response body contains JSON and should be decoded</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fc99290efe0a7a2f4ade2f8d14a22f2dbee5af4c" translate="yes" xml:space="preserve">
          <source>If screen size could not be detected, or the indentation is greater than the screen size, the text will not be wrapped.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6b9028d582601ca15d2ae87a68345097e5b21da8" translate="yes" xml:space="preserve">
          <source>If set to true, returns the raw string without trimming</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5c8947b0d73bad0c2e5251344a1b78b894714e6c" translate="yes" xml:space="preserve">
          <source>If set, this forces a minimum position for javascript files. This will adjust depending assets javascript file position or fail if requirement can not be met. If this is null, asset bundles position settings will not be changed. See &lt;a href=&quot;yii-web-view#registerJsFile()-detail&quot;&gt;registerJsFile()&lt;/a&gt; for more details on javascript position.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="738fd291d476f5f498d53a1de0155485cd11e05c" translate="yes" xml:space="preserve">
          <source>If simple HTML should be rendered</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b07125ba6075068db374f5180cb5266ac762a261" translate="yes" xml:space="preserve">
          <source>If some URL rules share the same prefix in their patterns or routes, you may consider using &lt;a href=&quot;yii-web-groupurlrule&quot;&gt;yii\web\GroupUrlRule&lt;/a&gt; so that they can be more efficiently examined by &lt;a href=&quot;yii-web-urlmanager&quot;&gt;URL manager&lt;/a&gt; as a group. This is often the case when your application is composed by modules, each having its own set of URL rules with module ID as their common prefixes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cce8dee872e81ca0756c094c1fac1e7f5426e5b7" translate="yes" xml:space="preserve">
          <source>If specified as a string an own query method with such name will be invoked, passing &lt;a href=&quot;yii-caching-dbquerydependency#%24db-detail&quot;&gt;$db&lt;/a&gt; value as its first argument. For example: &lt;code&gt;exists&lt;/code&gt;, &lt;code&gt;all&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="27208a4ad10ef5cbc8c2fb53fb3aa650f99cd1d1" translate="yes" xml:space="preserve">
          <source>If specified the value is used as a reference time instead of &lt;code&gt;now&lt;/code&gt; when &lt;code&gt;$value&lt;/code&gt; is not a &lt;code&gt;DateInterval&lt;/code&gt; object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="80b76f8a6ebb8192019ecd47793c4e15a130b06a" translate="yes" xml:space="preserve">
          <source>If specified, this variable will be set to &lt;code&gt;true&lt;/code&gt; if $pathInfo was changed during normalization</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ff1b7d6a0ddb8123caa86dd780a874c42e9cb6e3" translate="yes" xml:space="preserve">
          <source>If such a key exists, the corresponding value will be used to replace the corresponding part in the view file path;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="797d82aedf8008681fcc25e29412ef0ca6c8c64e" translate="yes" xml:space="preserve">
          <source>If the &lt;a href=&quot;http://php.net/manual/en/book.intl.php&quot;&gt;PHP intl extension&lt;/a&gt; is not available, setting this property will have no effect.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0b63857e685d3fab747cd3889c9245f048f5dbcc" translate="yes" xml:space="preserve">
          <source>If the &lt;a href=&quot;yii-base-controller#%24layout-detail&quot;&gt;yii\base\Controller::$layout&lt;/a&gt; property of the controller is &lt;code&gt;null&lt;/code&gt;, search through all ancestor modules (including the application itself) of the controller and find the first module whose &lt;a href=&quot;yii-base-module#%24layout-detail&quot;&gt;layout&lt;/a&gt; property is not &lt;code&gt;null&lt;/code&gt;. Use that module and its &lt;a href=&quot;yii-base-module#%24layout-detail&quot;&gt;layout&lt;/a&gt; value as the context module and the chosen layout value. If such a module cannot be found, it means no layout will be applied.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3c9cba2b12960d3694209b568c8e5b827f1dd561" translate="yes" xml:space="preserve">
          <source>If the &lt;a href=&quot;yii-base-controller#%24layout-detail&quot;&gt;yii\base\Controller::$layout&lt;/a&gt; property of the controller is not &lt;code&gt;null&lt;/code&gt;, use it as the layout value and the &lt;a href=&quot;yii-base-controller#%24module-detail&quot;&gt;module&lt;/a&gt; of the controller as the context module.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="15e659462542fcd8ac528aac9d835aacc6e70a24" translate="yes" xml:space="preserve">
          <source>If the &lt;a href=&quot;yii-elasticsearch-activerecord#primaryKey()-detail&quot;&gt;primary key&lt;/a&gt; is not set (null) during insertion, it will be populated with a &lt;a href=&quot;http://www.elastic.co/guide/en/elasticsearch/reference/current/docs-index_.html#_automatic_id_generation&quot;&gt;randomly generated value&lt;/a&gt; after insertion.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="60c3e09752f4cccf4e25e0bc8b62b7ef3900924e" translate="yes" xml:space="preserve">
          <source>If the &lt;a href=&quot;yii-validators-regularexpressionvalidator#%24not-detail&quot;&gt;$not&lt;/a&gt; property is set true, the validator will ensure the attribute value do NOT match the &lt;a href=&quot;yii-validators-regularexpressionvalidator#%24pattern-detail&quot;&gt;$pattern&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b726822910d28d332236ad4e701764ee8dab2771" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;$eagerLoading&lt;/code&gt; parameter is true, the method will also perform eager loading for the specified relations, which is equivalent to calling &lt;a href=&quot;yii-db-activequerytrait#with()-detail&quot;&gt;with()&lt;/a&gt; using the specified relations.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4b3e451a466028d2dddaffb05f79610042b56865" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;$key&lt;/code&gt; attribute or its value for the particular element is &lt;code&gt;null&lt;/code&gt; and &lt;code&gt;$groups&lt;/code&gt; is not defined, the array element will be discarded. Otherwise, if &lt;code&gt;$groups&lt;/code&gt; is specified, array element will be added to the result array without any key.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f833d8e783f409cda178c69f0e5fc2ce24108bdf" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;$key&lt;/code&gt; is specified as &lt;code&gt;null&lt;/code&gt; or a value of an element corresponding to the key is &lt;code&gt;null&lt;/code&gt; in addition to &lt;code&gt;$groups&lt;/code&gt; not specified then the element is discarded.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="92f05b9592fa5b6440250467f8b030637944b9f9" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;extends&lt;/code&gt; option is specified, it will also check if the class is a child class of the class represented by the &lt;code&gt;extends&lt;/code&gt; option.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fb860477def6ff786d16a900f8897215f952839b" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;init()&lt;/code&gt; method contains a lot of code initializing the module's properties, you may also save them in terms of a &lt;a href=&quot;guide-concept-configurations&quot;&gt;configuration&lt;/a&gt; and load it with the following code in &lt;code&gt;init()&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4ccc9c9de135774c682ee962ad83a69c75ff0165" translate="yes" xml:space="preserve">
          <source>If the CSS class is already in the options, it will not be added again. If class specification at given options is an array, and some class placed there with the named (string) key, overriding of such key will have no effect. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="319699e7d35150aed7560472fd2a4efd71efb896" translate="yes" xml:space="preserve">
          <source>If the CSS class option is specified using the array style, you may use a named key to mark the logical purpose of the class. In this case, a class with the same key in the array style will be ignored in &lt;code&gt;Html::addCssClass()&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fe435042db98105dfeb61298abc6cb52667537ce" translate="yes" xml:space="preserve">
          <source>If the DB table does not declare any primary key, you should override this method to return the attributes that you want to use as primary keys for this AR class.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7e7904588bfd946f23764cda2151317184f585d5" translate="yes" xml:space="preserve">
          <source>If the GET parameter does not exist, the second parameter passed to this method will be returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="831d7a47f15e87ddeb56c28687b69570124aca33" translate="yes" xml:space="preserve">
          <source>If the abstract type contains two or more parts separated by spaces (e.g. &quot;string NOT NULL&quot;), then only the first part will be converted, and the rest of the parts will be appended to the converted result. For example, 'string NOT NULL' is converted to 'varchar(255) NOT NULL'.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="34509f6ce379bc4a2ec1f4e2efa95f17d40bb35e" translate="yes" xml:space="preserve">
          <source>If the action ID is empty, the method will use &lt;a href=&quot;yii-base-controller#%24defaultAction-detail&quot;&gt;$defaultAction&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="46b7fb124fee260f3f8c361111dd42e02cc9788f" translate="yes" xml:space="preserve">
          <source>If the action ID is found in the &lt;a href=&quot;yii-base-controller#actions()-detail&quot;&gt;action map&lt;/a&gt;, a standalone action will be created;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0795366db3f4de44ba4856acc0a941ce474a80d9" translate="yes" xml:space="preserve">
          <source>If the action ID is found to match an action method, an inline action will be created;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6caa330420e94f90c46774207afa96fbca0e9d4e" translate="yes" xml:space="preserve">
          <source>If the action ID is not specified, the &lt;a href=&quot;yii-base-controller#%24defaultAction-detail&quot;&gt;default action ID&lt;/a&gt; will be used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e86c07d7c07aa69f441f7c0d2ac335abde6a1764" translate="yes" xml:space="preserve">
          <source>If the anonymous function requires some data from the outer scope, you can pass it with the &lt;code&gt;use&lt;/code&gt; statement. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4d37b040e8c9d874ff5a34d05cde58a8b9cf80ab" translate="yes" xml:space="preserve">
          <source>If the asset is a directory, all files and subdirectories under it will be published recursively. Note, in case $forceCopy is false the method only checks the existence of the target directory to avoid repetitive copying (which is very expensive).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7a9beab4c907cdc1337c3b83420284e62f0d48d3" translate="yes" xml:space="preserve">
          <source>If the asset is a file, its file modification time will be checked to avoid unnecessary file copying.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="43a15ff763a3efa8200fece736f8781e56a9022b" translate="yes" xml:space="preserve">
          <source>If the attribute is NOT a data attribute, the value will be JSON-encoded. For example, &lt;code&gt;['params' =&amp;gt; ['id' =&amp;gt; 1, 'name' =&amp;gt; 'yii']&lt;/code&gt; generates &lt;code&gt;params='{&quot;id&quot;:1,&quot;name&quot;:&quot;yii&quot;}'&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c21572ff46d266cfa6f711b9ed2f6e413847c270" translate="yes" xml:space="preserve">
          <source>If the attribute is a data attribute as listed in &lt;a href=&quot;yii-helpers-basehtml#%24dataAttributes-detail&quot;&gt;yii\helpers\Html::$dataAttributes&lt;/a&gt;, such as &lt;code&gt;data&lt;/code&gt; or &lt;code&gt;ng&lt;/code&gt;, a list of attributes will be rendered, one for each element in the value array. For example, &lt;code&gt;'data' =&amp;gt; ['id' =&amp;gt; 1, 'name' =&amp;gt; 'yii']&lt;/code&gt; generates &lt;code&gt;data-id=&quot;1&quot; data-name=&quot;yii&quot;&lt;/code&gt;; and &lt;code&gt;'data' =&amp;gt; ['params' =&amp;gt; ['id' =&amp;gt; 1, 'name' =&amp;gt; 'yii'], 'status' =&amp;gt; 'ok']&lt;/code&gt; generates &lt;code&gt;data-params='{&quot;id&quot;:1,&quot;name&quot;:&quot;yii&quot;}' data-status=&quot;ok&quot;&lt;/code&gt;. Note that in the latter example JSON format is used to render a sub-array.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f7eb995867a2b5c0f548cc0689286ae195f21536" translate="yes" xml:space="preserve">
          <source>If the attribute looks like &lt;code&gt;relatedModel.attribute&lt;/code&gt;, then the attribute will be received from the related model.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="991357ecb7a52cf2c1b0a8fcc6b21099023f377b" translate="yes" xml:space="preserve">
          <source>If the cache already contains such a key, the existing value and expiration time will be preserved.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f5328dbd14665e4d191562a915b68e87d3f63e77" translate="yes" xml:space="preserve">
          <source>If the cache already contains such a key, the existing value and expiration time will be replaced with the new ones, respectively.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d4d29c734e6c7ab6e36766949e5193d4328bded3" translate="yes" xml:space="preserve">
          <source>If the cache already contains such a key, the existing value will be replaced with the new ones. To add expiration and dependencies, use the &lt;a href=&quot;yii-caching-cache#set()-detail&quot;&gt;set()&lt;/a&gt; method. This method is required by the interface &lt;a href=&quot;http://www.php.net/class.arrayaccess&quot;&gt;ArrayAccess&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="71c6ecd8fecfd5bf5b80a4e9fa08aab627852f4c" translate="yes" xml:space="preserve">
          <source>If the class implements &lt;a href=&quot;yii-base-configurable&quot;&gt;yii\base\Configurable&lt;/a&gt;, the &lt;code&gt;$config&lt;/code&gt; parameter will be passed as the last parameter to the class constructor; Otherwise, the configuration will be applied &lt;em&gt;after&lt;/em&gt; the object is instantiated.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ffb0e8dd94449e34cb4791fce13eb2f285ccd815" translate="yes" xml:space="preserve">
          <source>If the class is namespaced (e.g. &lt;code&gt;yii\base\Component&lt;/code&gt;), it will attempt to include the file associated with the corresponding path alias (e.g. &lt;code&gt;@yii/base/Component.php&lt;/code&gt;);</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="46a49bf5074f1e23d2e11e0c2533c509d2543bd4" translate="yes" xml:space="preserve">
          <source>If the client is already authenticated and is simply not allowed to perform the action, consider using a 403 &lt;a href=&quot;yii-web-forbiddenhttpexception&quot;&gt;yii\web\ForbiddenHttpException&lt;/a&gt; or 404 &lt;a href=&quot;yii-web-notfoundhttpexception&quot;&gt;yii\web\NotFoundHttpException&lt;/a&gt; instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a4afb3ae4826775361cb53807e80ec0513aba0e3" translate="yes" xml:space="preserve">
          <source>If the column name contains prefix, the prefix will also be properly quoted. If the column name is already quoted or contains '(', '[[' or '{{', then this method will do nothing.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="111ea23a815468b8542654d9ba8e50b3b2db6c86" translate="yes" xml:space="preserve">
          <source>If the column name contains prefix, the prefix will also be properly quoted. If the column name is already quoted or contains special characters including '(', '[[' and '{{', then this method will do nothing.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="78ed0e45182c28a5a62d90af60d34815bfcb9387" translate="yes" xml:space="preserve">
          <source>If the controller is created successfully, it will be returned together with the requested action ID. Otherwise &lt;code&gt;false&lt;/code&gt; will be returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8df51f10a10aa23c96c3fbba561e221c7a96ad1e" translate="yes" xml:space="preserve">
          <source>If the current user is Jane with &lt;code&gt;ID=1&lt;/code&gt; we are starting at &lt;code&gt;createPost&lt;/code&gt; and trying to get to &lt;code&gt;Jane&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f671841eb513a2d78326da7dc330c2d4543ccb40" translate="yes" xml:space="preserve">
          <source>If the cursor is already at the edge of the screen, this has no effect.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4f536e333a3f9ab34a0f84bbeffbce31a916292f" translate="yes" xml:space="preserve">
          <source>If the data file does not exist, an empty array will be returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9e07282e7c4fe55930d9abaedca212205f5be171" translate="yes" xml:space="preserve">
          <source>If the data model is not found, a 404 HTTP exception will be raised.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1089463ec3410a7e5667dfdf26e0d44cbaa1c8e9" translate="yes" xml:space="preserve">
          <source>If the database supports transactions, you may also override &lt;a href=&quot;yii-db-migration#safeUp()-detail&quot;&gt;safeUp()&lt;/a&gt; and &lt;a href=&quot;yii-db-migration#safeDown()-detail&quot;&gt;safeDown()&lt;/a&gt; so that if anything wrong happens during the upgrading or downgrading, the whole migration can be reverted in a whole.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="965be86d15b1c168d72ddc33107636b6de7a8c0d" translate="yes" xml:space="preserve">
          <source>If the default value of an option is of an array type and you set this option while running the command, the option value will be converted into an array by splitting the input string on any commas.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="18852f402d118c92ad33505eee22e5c4e36dac5e" translate="yes" xml:space="preserve">
          <source>If the exception that you want to throw is not among the above list, you may create one by extending from &lt;a href=&quot;yii-web-httpexception&quot;&gt;yii\web\HttpException&lt;/a&gt;, or directly throw it with a status code, for example,</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a167e3b831b3c5c7691a7a82b3b2435dccb0cf2c" translate="yes" xml:space="preserve">
          <source>If the extension displays messages intended for end users, the messages should be wrapped into &lt;code&gt;Yii::t()&lt;/code&gt; so that they can be translated. Messages meant for developers (such as internal exception messages) do not need to be translated.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7268ec4ffbf2e0f2000f9e900ab403b03f3ecbea" translate="yes" xml:space="preserve">
          <source>If the extension displays numbers, dates, etc., they should be formatted using &lt;a href=&quot;yii-i18n-formatter&quot;&gt;yii\i18n\Formatter&lt;/a&gt; with appropriate formatting rules.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9ee396891cae37eb2190c50fe42731292e994321" translate="yes" xml:space="preserve">
          <source>If the extension is installed, the bootstrap information will be saved in &lt;a href=&quot;yii-base-application#%24extensions-detail&quot;&gt;yii\base\Application::$extensions&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c95b6ef1844724f6f2cef65a0c30130d32d60871" translate="yes" xml:space="preserve">
          <source>If the first segment of the route is a valid module ID as declared in &lt;a href=&quot;yii-base-module#%24modules-detail&quot;&gt;$modules&lt;/a&gt;, call the module's &lt;code&gt;createController()&lt;/code&gt; with the rest part of the route;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5682a6ad10f54d1ab8de6e8e26878747ecf83b26" translate="yes" xml:space="preserve">
          <source>If the first segment of the route is found in &lt;a href=&quot;yii-base-module#%24controllerMap-detail&quot;&gt;$controllerMap&lt;/a&gt;, create a controller based on the corresponding configuration found in &lt;a href=&quot;yii-base-module#%24controllerMap-detail&quot;&gt;$controllerMap&lt;/a&gt;;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="67c5b4daf81f8105e3129be53ee97325c66c6d89" translate="yes" xml:space="preserve">
          <source>If the given alias does not start with '@', it is returned back without change;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e6299b014135cdc2ea19d847471fe7cf0a177496" translate="yes" xml:space="preserve">
          <source>If the given key is a string containing alphanumeric characters only and no more than 32 characters, then the key will be returned back prefixed with &lt;a href=&quot;yii-caching-cache#%24keyPrefix-detail&quot;&gt;$keyPrefix&lt;/a&gt;. Otherwise, a normalized key is generated by serializing the given key, applying MD5 hashing, and prefixing with &lt;a href=&quot;yii-caching-cache#%24keyPrefix-detail&quot;&gt;$keyPrefix&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d0725036f254f8eb438ca8c976d7d67fa9628356" translate="yes" xml:space="preserve">
          <source>If the given key is a string containing alphanumeric characters only and no more than 32 characters, then the key will be returned back prefixed with \yii\caching\keyPrefix. Otherwise, a normalized key is generated by serializing the given key, applying MD5 hashing, and prefixing with \yii\caching\keyPrefix.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="63a25578aee6a19c0bbc1e83352adb9b15a44c4d" translate="yes" xml:space="preserve">
          <source>If the index name contains schema prefix, the prefix will also be properly quoted. If the index name is already quoted or contains '(' or '{{', then this method will do nothing.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7b15c4cb7241e973ebeffe74ebed5ab0b57b9271" translate="yes" xml:space="preserve">
          <source>If the index name contains schema prefix, the prefix will also be properly quoted. If the index name is already quoted or contains special characters including '(', '[[' and '{{', then this method will do nothing.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cb65208309929f0205b374bd46d3b2d18e00ca4a" translate="yes" xml:space="preserve">
          <source>If the intl extension is not installed, the data will not be localized.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eb04bced2b762b5611e2073ca497d3a3cec5aba0" translate="yes" xml:space="preserve">
          <source>If the item does not specify a rule, this method will return true. Otherwise, it will return the value of &lt;a href=&quot;yii-rbac-rule#execute()-detail&quot;&gt;yii\rbac\Rule::execute()&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="464d5c7723263a6e210a472995e8a1ef86cb868c" translate="yes" xml:space="preserve">
          <source>If the key does not exist in the array or object, the default value will be returned instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="28abaad2dab1c192a41509dcaa3373d20cbb10ff" translate="yes" xml:space="preserve">
          <source>If the last modification time of the file specified via &lt;a href=&quot;yii-caching-filedependency#%24fileName-detail&quot;&gt;$fileName&lt;/a&gt; is changed, the dependency is considered as changed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f10872e3d505c91361fc20a27e2e7c9f26a0e4ed" translate="yes" xml:space="preserve">
          <source>If the layout name does not contain a file extension, it will use the default one &lt;code&gt;.php&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1adfaa28635e75391026a3fab1af3f10b8633727" translate="yes" xml:space="preserve">
          <source>If the layout value does not contain a file extension, it will use the default one &lt;code&gt;.php&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f99bbb69debee97ab3722854804d80e833c99f6d" translate="yes" xml:space="preserve">
          <source>If the message is not found, a &lt;a href=&quot;yii-i18n-messagesource#EVENT_MISSING_TRANSLATION-detail&quot;&gt;missingTranslation&lt;/a&gt; event will be triggered. If there is an event handler, it may provide a &lt;a href=&quot;yii-i18n-missingtranslationevent#%24translatedMessage-detail&quot;&gt;fallback translation&lt;/a&gt;. If no fallback translation is provided this method will return &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3e53480c37a69c20f9e07010c9df1433b41f36e9" translate="yes" xml:space="preserve">
          <source>If the migration name is of a special form, for example &lt;code&gt;create_xxx_table&lt;/code&gt; or &lt;code&gt;drop_xxx_table&lt;/code&gt; then the generated migration file will contain extra code, in this case for creating/dropping tables. In the following all variants of this feature are described.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="37737e37d6c6ba206e741a4a589339ee4135543e" translate="yes" xml:space="preserve">
          <source>If the migration name is of the form &lt;code&gt;add_xxx_column_to_yyy_table&lt;/code&gt; then the file content would contain &lt;code&gt;addColumn&lt;/code&gt; and &lt;code&gt;dropColumn&lt;/code&gt; statements necessary.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="83f6ba1dabb2953813fc6afa2504fa618fa75641" translate="yes" xml:space="preserve">
          <source>If the migration name is of the form &lt;code&gt;create_junction_table_for_xxx_and_yyy_tables&lt;/code&gt; or &lt;code&gt;create_junction_xxx_and_yyy_tables&lt;/code&gt; then code necessary to create junction table will be generated.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f2b52716cb6e3c3f42e5862aabb33951cbe297c4" translate="yes" xml:space="preserve">
          <source>If the migration name is of the form &lt;code&gt;drop_xxx_column_from_yyy_table&lt;/code&gt; then the file content would contain &lt;code&gt;addColumn&lt;/code&gt; and &lt;code&gt;dropColumn&lt;/code&gt; statements necessary.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9e25c9ac5a967181c247af86ad7118df11aa6fcf" translate="yes" xml:space="preserve">
          <source>If the model implements the &lt;a href=&quot;yii-web-linkable&quot;&gt;yii\web\Linkable&lt;/a&gt; interface, the resulting array will also have a &lt;code&gt;_link&lt;/code&gt; element which refers to a list of links as specified by the interface.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fc6fb379798cff43ff0d7eeb05a7a08c5f067acc" translate="yes" xml:space="preserve">
          <source>If the model implements the \yii\mongodb\Linkable interface, the resulting array will also have a &lt;code&gt;_link&lt;/code&gt; element which refers to a list of links as specified by the interface.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="864c4315179c19afa9cbdfca598bd45ccabe9c46" translate="yes" xml:space="preserve">
          <source>If the module class is not currently requested, &lt;code&gt;null&lt;/code&gt; will be returned. This method is provided so that you access the module instance from anywhere within the module.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="314f89ffb5629d58a0d8dd7cda2b215711d540f2" translate="yes" xml:space="preserve">
          <source>If the name component ends in suffix this will also be cut off.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b4f840a232a2bae8526e8bdc26da6fb04cecddde" translate="yes" xml:space="preserve">
          <source>If the name of such a property is the same as a class member variable, the latter will take precedence. For example, if the above &lt;code&gt;Foo&lt;/code&gt; class has a member variable &lt;code&gt;label&lt;/code&gt;, then the assignment &lt;code&gt;$object-&amp;gt;label = 'abc'&lt;/code&gt; will affect the &lt;em&gt;member variable&lt;/em&gt;&lt;code&gt;label&lt;/code&gt;; that line would not call the &lt;code&gt;setLabel()&lt;/code&gt; setter method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="33b6177337aa1d78aed63ca0d334a34c3f7b86f6" translate="yes" xml:space="preserve">
          <source>If the named section is not supported, false will be returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c7ffd99a2666ace78a222547697eec2dbd191df2" translate="yes" xml:space="preserve">
          <source>If the option is not set, it will take the default value 60, which means the cached content will expire in 60 seconds.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="991632dc9c80b91464d6917b5b70313af5d5a278" translate="yes" xml:space="preserve">
          <source>If the options already contain a &lt;code&gt;style&lt;/code&gt; element, the new style will be merged with the existing one. If a CSS property exists in both the new and the old styles, the old one may be overwritten if &lt;code&gt;$overwrite&lt;/code&gt; is true.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bd38a58c74fc2e4fd0a9fb5cf2cdd1b5b9148919" translate="yes" xml:space="preserve">
          <source>If the parameter does not exist, the second parameter passed to this method will be returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1bad09223aa6043f0b902569689ce7f36cf25067" translate="yes" xml:space="preserve">
          <source>If the primary key is null during insertion, it will be populated with the actual value after insertion.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f93039cbd82996308b8ae0155db98d81f47dc18a" translate="yes" xml:space="preserve">
          <source>If the query result changes, the dependency is considered as changed. The query is specified via the &lt;a href=&quot;yii-caching-dbdependency#%24sql-detail&quot;&gt;$sql&lt;/a&gt; property.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d9edfc64ae3639222067d216475f59e26ba12a8e" translate="yes" xml:space="preserve">
          <source>If the query result changes, the dependency is considered as changed. The query is specified via the &lt;a href=&quot;yii-caching-dbquerydependency#%24query-detail&quot;&gt;$query&lt;/a&gt; property.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c8d80c07f2b1c4a22cf81655e5e4686316013a15" translate="yes" xml:space="preserve">
          <source>If the refresh is successful, an &lt;a href=&quot;yii-db-baseactiverecord#EVENT_AFTER_REFRESH-detail&quot;&gt;EVENT_AFTER_REFRESH&lt;/a&gt; event will be triggered. This event is available since version 2.0.8.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="77c3cf84bd28206a063a2d48b84454e1d467a717" translate="yes" xml:space="preserve">
          <source>If the relationship involves a junction table, a new row will be inserted into the junction table which contains the primary key values from both models.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0dfea4c4a20add74a144d414bb7319306468f13b" translate="yes" xml:space="preserve">
          <source>If the relationship involves a junction table, a new row will be inserted into the junction table which contains the primary key values from both records.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="528b86f65ddcbc43111bc59039f52bef4d29816e" translate="yes" xml:space="preserve">
          <source>If the request is sent via secure channel (https)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="77171108b842023023b62901521e12fa2b85b6e6" translate="yes" xml:space="preserve">
          <source>If the route contains no slashes at all (e.g. &lt;code&gt;index&lt;/code&gt;), it is considered to be an action ID of the current controller and will be prepended with &lt;a href=&quot;yii-base-controller#%24uniqueId-detail&quot;&gt;yii\web\Controller::$uniqueId&lt;/a&gt;;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0e4c11e702fe6ea152d353f6e5e8b5d29fc39bae" translate="yes" xml:space="preserve">
          <source>If the route contains no slashes at all, it is considered to be an action ID of the current controller and will be prepended with &lt;a href=&quot;yii-base-controller#%24uniqueId-detail&quot;&gt;yii\web\Controller::$uniqueId&lt;/a&gt;;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8f199c5dc9161b654aab2fa62e45c8429d419620" translate="yes" xml:space="preserve">
          <source>If the route contains no slashes at all, it is considered to be an action ID of the current controller and will be prepended with the &lt;a href=&quot;yii-base-controller#%24uniqueId-detail&quot;&gt;uniqueId&lt;/a&gt; value of the current controller;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3838e013d15124b57ec37a951bf2edf7f0f06c01" translate="yes" xml:space="preserve">
          <source>If the route has no leading slash (e.g. &lt;code&gt;site/index&lt;/code&gt;), it is considered to be a route relative to the current module and will be prepended with the module's &lt;a href=&quot;yii-base-module#%24uniqueId-detail&quot;&gt;uniqueId&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c0f7f945f90ddfa6b8e8aac1248995518474c2d3" translate="yes" xml:space="preserve">
          <source>If the route has no leading slash, it is considered to be a route relative to the current module and will be prepended with the &lt;a href=&quot;yii-base-module#%24uniqueId-detail&quot;&gt;uniqueId&lt;/a&gt; value of the current module.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dba2ca08b788d93a668b0cf04bccd5bc4bf84f9b" translate="yes" xml:space="preserve">
          <source>If the route has no leading slash, it is considered to be a route relative to the current module and will be prepended with the module's uniqueId.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f9b0655708e7c7bc84f9755131ce868541ec8827" translate="yes" xml:space="preserve">
          <source>If the route is an empty string, the current &lt;a href=&quot;yii-base-controller#%24route-detail&quot;&gt;route&lt;/a&gt; will be used;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="10fc382bcadef53e08e5b0075bb47c5977816c0b" translate="yes" xml:space="preserve">
          <source>If the route is an empty string, the currently requested &lt;a href=&quot;yii-base-controller#%24route-detail&quot;&gt;route&lt;/a&gt; will be used;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6d390401d5a2f0927e56256fc5350845e3e02c05" translate="yes" xml:space="preserve">
          <source>If the route is empty, use &lt;a href=&quot;yii-base-module#%24defaultRoute-detail&quot;&gt;$defaultRoute&lt;/a&gt;;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="acf331fe50a8d9665060ecced5e6ae0ff505ab28" translate="yes" xml:space="preserve">
          <source>If the schema is not cached, or it is necessary to run other queries while the batch query is being processed, you can create a separate unbuffered connection to the database:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4c1b85fdce45cf1b0309ee0e1142afc27a62e326" translate="yes" xml:space="preserve">
          <source>If the server should be flagged as online upon a failure.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a2c301f0800ad79885ea318453a7929c4d6f23bb" translate="yes" xml:space="preserve">
          <source>If the server should be flagged as online upon a failure. This is used by memcache only.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cd09912a220042ec76431b08939b461985d7292a" translate="yes" xml:space="preserve">
          <source>If the session variable does not exist, the &lt;code&gt;$defaultValue&lt;/code&gt; will be returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b8af8fd9bf5ece008cfde6d5a5ff5e5ec4cd2c9d" translate="yes" xml:space="preserve">
          <source>If the specified migration has already been applied before, any later applied migrations will be reverted.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5c3984832c3d7b5cae3b14747a16e7d495d9306d" translate="yes" xml:space="preserve">
          <source>If the specified name already exists, the old value will be overwritten.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6dcf7e963583b93cd66a4735b0e5fa1a0a89d01f" translate="yes" xml:space="preserve">
          <source>If the table name contains schema prefix, the prefix will also be properly quoted. If the table name is already quoted or contains '(' or '{{', then this method will do nothing.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a4b06fb2e4d3186151060a68c1c913150f1d75af" translate="yes" xml:space="preserve">
          <source>If the table name contains schema prefix, the prefix will also be properly quoted. If the table name is already quoted or contains special characters including '(', '[[' and '{{', then this method will do nothing.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f91dae3e2c4249b13e68f7a97f7d516a7e97fd9b" translate="yes" xml:space="preserve">
          <source>If the table's primary key is auto-incremental and is &lt;code&gt;null&lt;/code&gt; during insertion, it will be populated with the actual value after insertion.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6c7b978da51a4ba24ea582ab630c0078fb0250b0" translate="yes" xml:space="preserve">
          <source>If the target and the source language codes are the same, the original file will be returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8125400e5c5d70ac31f1d8f0d996fd9ffa3353f4" translate="yes" xml:space="preserve">
          <source>If the underlying DBMS supports transactions, you can perform transactional SQL queries like the following:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="615abde542964e67dddd6c3082eddfd5364b4d99" translate="yes" xml:space="preserve">
          <source>If the user identity cannot be determined by session, this method will try to &lt;a href=&quot;yii-web-user#loginByCookie()-detail&quot;&gt;login by cookie&lt;/a&gt; if &lt;a href=&quot;yii-web-user#%24enableAutoLogin-detail&quot;&gt;$enableAutoLogin&lt;/a&gt; is true.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="705592b8c2383f219608117cc81ad438abd7d266" translate="yes" xml:space="preserve">
          <source>If the user is a guest, it will call &lt;a href=&quot;yii-web-user#loginRequired()-detail&quot;&gt;yii\web\User::loginRequired()&lt;/a&gt; to redirect the user browser to the login page.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6af13fa95d246847d3bc07a440ae9cd0789781bb" translate="yes" xml:space="preserve">
          <source>If the user is already authenticated, it will throw a &lt;a href=&quot;yii-web-forbiddenhttpexception&quot;&gt;yii\web\ForbiddenHttpException&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2e10aa866d4fbdb8c9c091aa3afb0a9ff74dd6f8" translate="yes" xml:space="preserve">
          <source>If the value is empty</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e3aebffcd1da079cb9b912016de5c6f7b6f93f05" translate="yes" xml:space="preserve">
          <source>If the value is null or an &lt;a href=&quot;yii-db-expression&quot;&gt;yii\db\Expression&lt;/a&gt;, it will not be converted.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3d9dc1b09b963e65cfad2ba6083954b4fd87f8ea" translate="yes" xml:space="preserve">
          <source>If the value of an attribute is an array, it will be handled as follows:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9f91e357d1a5b97858654c415b39e699c66e7aa7" translate="yes" xml:space="preserve">
          <source>If the variable does not exist, the &lt;code&gt;$defaultValue&lt;/code&gt; will be returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b4e0283136edc7546152648f82c7fe8973f97484" translate="yes" xml:space="preserve">
          <source>If the view is rendered with a &lt;a href=&quot;yii-base-view#%24context-detail&quot;&gt;context&lt;/a&gt; and the context implements &lt;a href=&quot;yii-base-viewcontextinterface&quot;&gt;yii\base\ViewContextInterface&lt;/a&gt;, the view file path is formed by prefixing the &lt;a href=&quot;yii-base-viewcontextinterface#getViewPath()-detail&quot;&gt;view path&lt;/a&gt; of the context to the view name. This mainly applies to the views rendered within controllers and widgets. For example, &lt;code&gt;about&lt;/code&gt; will be resolved into &lt;code&gt;@app/views/site/about.php&lt;/code&gt; if the context is the controller &lt;code&gt;SiteController&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b07718384b1a789030f1bbc8e8c74be97baa6e2a" translate="yes" xml:space="preserve">
          <source>If the view name does not contain a file extension, it will use the default one &lt;code&gt;.php&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="143675328ee1511cec615714266cf85228a771f7" translate="yes" xml:space="preserve">
          <source>If the view name starts with a single slash &lt;code&gt;/&lt;/code&gt;, the view file path is formed by prefixing the view name with the &lt;a href=&quot;yii-base-module#%24viewPath-detail&quot;&gt;view path&lt;/a&gt; of the currently active &lt;a href=&quot;guide-structure-modules&quot;&gt;module&lt;/a&gt;. If there is no active module, &lt;code&gt;@app/views/ViewName&lt;/code&gt; will be used. For example, &lt;code&gt;/user/create&lt;/code&gt; will be resolved into &lt;code&gt;@app/modules/user/views/user/create.php&lt;/code&gt;, if the currently active module is &lt;code&gt;user&lt;/code&gt;. If there is no active module, the view file path would be &lt;code&gt;@app/views/user/create.php&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="35abd4ea596b4641d909b8e80a5f564e1ff92982" translate="yes" xml:space="preserve">
          <source>If the view name starts with double slashes &lt;code&gt;//&lt;/code&gt;, the corresponding view file path would be &lt;code&gt;@app/views/ViewName&lt;/code&gt;. That is, the view is looked for under the &lt;a href=&quot;yii-base-module#%24viewPath-detail&quot;&gt;application's view path&lt;/a&gt;. For example, &lt;code&gt;//site/about&lt;/code&gt; will be resolved into &lt;code&gt;@app/views/site/about.php&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="170fa172f5ef290babcc98d20f22052ffd6efeb1" translate="yes" xml:space="preserve">
          <source>If there are any unapplied migrations earlier than the specified one, they will all be applied before the specified migration is applied.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3d6269efdd87d35e81a6e30b44c8c4d25feaf266" translate="yes" xml:space="preserve">
          <source>If there are existing flash messages with the same key, the new one will be appended to the existing message array.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="675bacb81959d8deb64b51bb88241ea7a951784d" translate="yes" xml:space="preserve">
          <source>If there are less than count bytes available, return as many as are available. If no more data is available, return &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f507778199bb49929c2f181eacac367bbb5b8865" translate="yes" xml:space="preserve">
          <source>If there is a match</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b7395b370d45629b7dc70fa54628e41910a9ce57" translate="yes" xml:space="preserve">
          <source>If there is already a cookie with the same name in the collection, it will be removed first.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="37c9451c80c6201c31b145498ab546069975fb11" translate="yes" xml:space="preserve">
          <source>If there is already a header with the same name, it will be replaced.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="56742f49bb631ba105a20e59ff25c692c57251d4" translate="yes" xml:space="preserve">
          <source>If there is already a header with the same name, the new one will be appended to it instead of replacing it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a77342df47cc04f34e01b7fc3f1a0ebbf922cef6" translate="yes" xml:space="preserve">
          <source>If there is already a header with the same name, the new one will be ignored.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3fb1daa693c715a7f944d8ae3cf782d4929b4458" translate="yes" xml:space="preserve">
          <source>If there is no corresponding themed file, the original file will be returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8e4ad10c5e73f8be318acbc44cbef562d5fb588f" translate="yes" xml:space="preserve">
          <source>If there is no validation error, an empty error summary markup will still be generated, but it will be hidden.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5fe82a202e7d5bdd734ae4113e13e67b775c3c26" translate="yes" xml:space="preserve">
          <source>If there's active tab defined</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3283b3c2e482ab68171dc0341bb5983f400daef0" translate="yes" xml:space="preserve">
          <source>If this callback returns &lt;a href=&quot;yii-web-response&quot;&gt;yii\web\Response&lt;/a&gt; instance, it will be used as action response, otherwise redirection to &lt;a href=&quot;yii-authclient-authaction#%24successUrl-detail&quot;&gt;$successUrl&lt;/a&gt; will be performed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b8fc3244a33ca746e6b9ed2492e56036d2ddd8b6" translate="yes" xml:space="preserve">
          <source>If this field is not set - no host name check will be performed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0e866213638741762a83c4f351d7b8b96a6ec683" translate="yes" xml:space="preserve">
          <source>If this is an anonymous function, it will be called for each row and the return value will be used as the value to display for every data model. The signature of this function should be: &lt;code&gt;function ($model, $key, $index, $column)&lt;/code&gt;. Where &lt;code&gt;$model&lt;/code&gt;, &lt;code&gt;$key&lt;/code&gt;, and &lt;code&gt;$index&lt;/code&gt; refer to the model, key and index of the row currently being rendered and &lt;code&gt;$column&lt;/code&gt; is a reference to the &lt;a href=&quot;yii-grid-datacolumn&quot;&gt;yii\grid\DataColumn&lt;/a&gt; object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fbf6722cdafe67c212a5ddf61cafab63f5cb1cb2" translate="yes" xml:space="preserve">
          <source>If this is an array, it will be passed directly to &lt;a href=&quot;yii-web-user#can()-detail&quot;&gt;yii\web\User::can()&lt;/a&gt;. For example for passing an ID from the current request, you may use the following:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="761eb1705ad22831150a87cc36264273756425bf" translate="yes" xml:space="preserve">
          <source>If this is not set, &lt;code&gt;$model[$attribute]&lt;/code&gt; will be used to obtain the value, where &lt;code&gt;$attribute&lt;/code&gt; is the value of &lt;a href=&quot;yii-grid-datacolumn#%24attribute-detail&quot;&gt;$attribute&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="794189c37f43f22f9917f60650b2dfcecb055bfd" translate="yes" xml:space="preserve">
          <source>If this is not set, the asset manager will use the default CRC32 and filemtime in the &lt;code&gt;hash&lt;/code&gt; method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c83721f74f2afcc718a014333d39fecdc6b37065" translate="yes" xml:space="preserve">
          <source>If this is not set, the following rules will be used to determine the keys of the data models:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bf414659f003b83c3edf7f1c703c1d5b71419781" translate="yes" xml:space="preserve">
          <source>If this is not set, the keys of the &lt;a href=&quot;yii-data-basedataprovider#%24models-detail&quot;&gt;$models&lt;/a&gt; array will be used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="92a4fa48092d8c3b5d7bfd67fbd44b3aa340a186" translate="yes" xml:space="preserve">
          <source>If this method is called for the first time, it will try to open a master connection.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e01642b6d332ec2ef8cf5bdc44df748cdf249d18" translate="yes" xml:space="preserve">
          <source>If this method is called for the first time, it will try to open a slave connection when &lt;a href=&quot;yii-db-connection#%24enableSlaves-detail&quot;&gt;$enableSlaves&lt;/a&gt; is true.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4b7817e9aab2d820377ca6bbbbf78628c37fdfe5" translate="yes" xml:space="preserve">
          <source>If this method is overridden in a child class, it is recommended that</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c5725d8902bb45ae2616fbe9c182021cab28ca93" translate="yes" xml:space="preserve">
          <source>If this option is disabled by the web server, when this method is called a download configuration dialog will open but the downloaded file will have 0 bytes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5ec8809778f160f65925278e47ba02f9f4c26b6b" translate="yes" xml:space="preserve">
          <source>If this property is &lt;code&gt;null&lt;/code&gt;, a 403 HTTP exception will be raised when &lt;a href=&quot;yii-web-user#loginRequired()-detail&quot;&gt;loginRequired()&lt;/a&gt; is called.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d3eb3feb60ffc05455aedb0bb8723cfe18b1b43a" translate="yes" xml:space="preserve">
          <source>If this property is &lt;code&gt;null&lt;/code&gt;, then &lt;code&gt;session_cache_limiter()&lt;/code&gt; will not be called. As a result, PHP will send headers according to the &lt;code&gt;session.cache_limiter&lt;/code&gt; PHP ini setting.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d8f6ebb990cfb2c3d2bed9d15e01ef3ff1669c27" translate="yes" xml:space="preserve">
          <source>If this property is an array, a dropdown list will be generated that uses this property value as the list options.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8e67c42d2d158b7329818fac60a3394a4f446e33" translate="yes" xml:space="preserve">
          <source>If this property is empty or not set, language negotiation will be skipped.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ddb881d35c0a9793c4530636b14e5dc121a4bf66" translate="yes" xml:space="preserve">
          <source>If this property is empty or not set, response format negotiation will be skipped.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="405afefe29b13f7aef198bc023c70a501085c899" translate="yes" xml:space="preserve">
          <source>If this property is empty, no authentication will be performed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6c328ce57a50b4e54b6d098d9573758322fbc020" translate="yes" xml:space="preserve">
          <source>If this property is false, it means the whole asset bundle feature is disabled and &lt;a href=&quot;yii-web-assetmanager#getBundle()-detail&quot;&gt;getBundle()&lt;/a&gt; will always return null.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aef0a3538f3df323434f2c81123afd00592192b5" translate="yes" xml:space="preserve">
          <source>If this property is not set or empty, it means this rule applies to all roles.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6c3529cc5dd62162c7cfc46f76acb9eecc8c5a0c" translate="yes" xml:space="preserve">
          <source>If this property is not set, a text field will be generated as the filter input;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d2aa03b44febc64b0a26b4c7ef2415cc3db737a0" translate="yes" xml:space="preserve">
          <source>If this property is not set, button URLs will be created using &lt;a href=&quot;yii-grid-actioncolumn#createUrl()-detail&quot;&gt;createUrl()&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3e69efef20b9de65aaf0a9d9599496343fb846f0" translate="yes" xml:space="preserve">
          <source>If this property is not set, the default value will be obtained from &lt;code&gt;Yii::$app-&amp;gt;formatter-&amp;gt;dateFormat&lt;/code&gt;, see &lt;a href=&quot;yii-i18n-formatter#%24dateFormat-detail&quot;&gt;yii\i18n\Formatter::$dateFormat&lt;/a&gt; for details. Since version 2.0.8 the default value will be determined from different formats of the formatter class, dependent on the value of &lt;a href=&quot;yii-validators-datevalidator#%24type-detail&quot;&gt;$type&lt;/a&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="98d105681c9d81a0809894b0464b26c0a4dd813a" translate="yes" xml:space="preserve">
          <source>If this property is not set, the resource arrays will be directly returned without using envelope. The pagination information as shown in &lt;code&gt;_links&lt;/code&gt; and &lt;code&gt;_meta&lt;/code&gt; can be accessed from the response HTTP headers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f59858c6ae5ce0a9a0f7dd8716effab2652e820f" translate="yes" xml:space="preserve">
          <source>If this property is not set, the username information will be considered as an access token while the password information will be ignored. The &lt;a href=&quot;yii-web-user#loginByAccessToken()-detail&quot;&gt;yii\web\User::loginByAccessToken()&lt;/a&gt; method will be called to authenticate and login the user.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1b11585caec536adf53c89c8d43d6fd0e82f525e" translate="yes" xml:space="preserve">
          <source>If this property is specified as a callback, it should have the following signature:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e58b23b2569be835f78c6402f0301eef9b4d3346" translate="yes" xml:space="preserve">
          <source>If this property is specified as an anonymous function, it should have the following signature:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a86cc1af09da5de44b3ddd37d7899250d535585a" translate="yes" xml:space="preserve">
          <source>If this record is the result of a query and the attribute is not loaded, &lt;code&gt;null&lt;/code&gt; will be returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="595d230f5bfe79f8070489d0205e83a77b43797f" translate="yes" xml:space="preserve">
          <source>If translation for specific locale code such as &lt;code&gt;en-US&lt;/code&gt; isn't found it tries more generic &lt;code&gt;en&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2a4191dd0e6f33b444f0dc7b6e1f2840830e59ac" translate="yes" xml:space="preserve">
          <source>If translation for specific locale code such as &lt;code&gt;en-US&lt;/code&gt; isn't found it tries more generic &lt;code&gt;en&lt;/code&gt;. When both are present, the &lt;code&gt;en-US&lt;/code&gt; messages will be merged over &lt;code&gt;en&lt;/code&gt;. See &lt;a href=&quot;yii-i18n-gettextmessagesource#loadFallbackMessages()-detail&quot;&gt;loadFallbackMessages()&lt;/a&gt; for details. If the $language is less specific than &lt;a href=&quot;yii-i18n-messagesource#%24sourceLanguage-detail&quot;&gt;$sourceLanguage&lt;/a&gt;, the method will try to load the messages for &lt;a href=&quot;yii-i18n-messagesource#%24sourceLanguage-detail&quot;&gt;$sourceLanguage&lt;/a&gt;. For example: &lt;a href=&quot;yii-i18n-messagesource#%24sourceLanguage-detail&quot;&gt;$sourceLanguage&lt;/a&gt; is &lt;code&gt;en-GB&lt;/code&gt;, $language is &lt;code&gt;en&lt;/code&gt;. The method will load the messages for &lt;code&gt;en&lt;/code&gt; and merge them over &lt;code&gt;en-GB&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bdaf153b5c170ff45ca76308bff663eff053e8ad" translate="yes" xml:space="preserve">
          <source>If translation for specific locale code such as &lt;code&gt;en-US&lt;/code&gt; isn't found it tries more generic &lt;code&gt;en&lt;/code&gt;. When both are present, the &lt;code&gt;en-US&lt;/code&gt; messages will be merged over &lt;code&gt;en&lt;/code&gt;. See &lt;a href=&quot;yii-i18n-phpmessagesource#loadFallbackMessages()-detail&quot;&gt;loadFallbackMessages()&lt;/a&gt; for details. If the $language is less specific than &lt;a href=&quot;yii-i18n-messagesource#%24sourceLanguage-detail&quot;&gt;$sourceLanguage&lt;/a&gt;, the method will try to load the messages for &lt;a href=&quot;yii-i18n-messagesource#%24sourceLanguage-detail&quot;&gt;$sourceLanguage&lt;/a&gt;. For example: &lt;a href=&quot;yii-i18n-messagesource#%24sourceLanguage-detail&quot;&gt;$sourceLanguage&lt;/a&gt; is &lt;code&gt;en-GB&lt;/code&gt;, $language is &lt;code&gt;en&lt;/code&gt;. The method will load the messages for &lt;code&gt;en&lt;/code&gt; and merge them over &lt;code&gt;en-GB&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0851fde4b410d1ade4416c888f897ac84ba83813" translate="yes" xml:space="preserve">
          <source>If translations should be sorted</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="863ea3e36d5d2bad422712c1e74f66f72cd13c87" translate="yes" xml:space="preserve">
          <source>If true, context message will cached once it's been created.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5942f3ab0aead82e8a4880596207dee1d0abae22" translate="yes" xml:space="preserve">
          <source>If true, context message will cached once it's been created. Makes sense to use with &lt;a href=&quot;yii-elasticsearch-elasticsearchtarget#%24includeContext-detail&quot;&gt;$includeContext&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2bc2f4eec112d8e1ca6337f23ea84dfde92d2572" translate="yes" xml:space="preserve">
          <source>If true, context will be included in every message.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d4f7d62a318fe9b61eb15a99b13fe92e8af72527" translate="yes" xml:space="preserve">
          <source>If true, context will be included in every message. This is convenient if you log application errors and analyze them with tools like Kibana.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8588e71490d2b8f7b9be0e55dfd8e7a7e5aad9a4" translate="yes" xml:space="preserve">
          <source>If true, context will be logged as a separate message after all other messages.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="48be22f667695315030c677c2aea101404ac6c6a" translate="yes" xml:space="preserve">
          <source>If true, shows the widget as an inline calendar and the input as a hidden field.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="415f678f3922bf74cfc39f8b5a24ecb578df6a13" translate="yes" xml:space="preserve">
          <source>If two behaviors define the same property or method and they are both attached to the same component, the behavior that is attached to the component &lt;em&gt;first&lt;/em&gt; will take precedence when the property or method is accessed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="50f3e45b0f74d8f2394ec529276f40a2d3782bd7" translate="yes" xml:space="preserve">
          <source>If version is not explicitly set, &lt;a href=&quot;yii-base-module#defaultVersion()-detail&quot;&gt;defaultVersion()&lt;/a&gt; method will be used to determine its value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e619fb3201f37a533d9bc1619294228a4621a868" translate="yes" xml:space="preserve">
          <source>If we are using fixture that loads data into database then these rows will be applied to &lt;code&gt;users&lt;/code&gt; table. If we are using nosql fixtures, for example &lt;code&gt;mongodb&lt;/code&gt; fixture, then this data will be applied to &lt;code&gt;users&lt;/code&gt; mongodb collection. In order to learn about implementing various loading strategies and more, refer to official &lt;a href=&quot;https://github.com/yiisoft/yii2/blob/master/docs/guide/test-fixtures.md&quot;&gt;documentation&lt;/a&gt;. Above fixture example was auto-generated by &lt;code&gt;yii2-faker&lt;/code&gt; extension, read more about it in these &lt;a href=&quot;#auto-generating-fixtures&quot;&gt;section&lt;/a&gt;. Fixture classes name should not be plural.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="94b47be848c0711aef8f85ca6431d684f03c677a" translate="yes" xml:space="preserve">
          <source>If you access this controller from browser, you will see an error complaining the &lt;code&gt;BookingInterface&lt;/code&gt; cannot be instantiated. This is because you need to tell the DI container how to deal with this dependency:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b65c7c3bf9c3c8458864283b217efb447132a6d3" translate="yes" xml:space="preserve">
          <source>If you already have a formatted body string, you may assign it to the &lt;a href=&quot;yii-web-response#%24content-detail&quot;&gt;yii\web\Response::$content&lt;/a&gt; property of the response. For example,</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0fb4988697011a42f159bad2641e0d77b8761b7a" translate="yes" xml:space="preserve">
          <source>If you already have an object, you may use &lt;a href=&quot;yii-baseyii#configure()-detail&quot;&gt;Yii::configure()&lt;/a&gt; to initialize the object's properties with a configuration array:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b5bc44656c8b621ae37e089b46f97b3fe69216b4" translate="yes" xml:space="preserve">
          <source>If you also need to support client-side conditional validation, you should configure the &lt;a href=&quot;yii-validators-validator#%24whenClient-detail&quot;&gt;whenClient&lt;/a&gt; property which takes a string representing a JavaScript function whose return value determines whether to apply the rule or not. For example,</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="015c2306247e95ea889ed473e6fce52b12b81385" translate="yes" xml:space="preserve">
          <source>If you are calling the file sending method in places other than an action method, you should also call the &lt;a href=&quot;yii-web-response#send()-detail&quot;&gt;yii\web\Response::send()&lt;/a&gt; method afterwards to ensure no extra content will be appended to the response.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2b8119693bac426cf5390310731d2dd4315e59fb" translate="yes" xml:space="preserve">
          <source>If you are interested in the attribute values prior to their most recent modification, you may call &lt;a href=&quot;yii-db-baseactiverecord#getOldAttributes()-detail&quot;&gt;getOldAttributes()&lt;/a&gt; or &lt;a href=&quot;yii-db-baseactiverecord#getOldAttribute()-detail&quot;&gt;getOldAttribute()&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1576c65845d56e383650720054efede4cd92f6ad" translate="yes" xml:space="preserve">
          <source>If you are registering an asset bundle in other places, you should provide the needed view object. For example, to register an asset bundle in a &lt;a href=&quot;guide-structure-widgets&quot;&gt;widget&lt;/a&gt; class, you can get the view object by &lt;code&gt;$this-&amp;gt;view&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e66182a77eb78e65351400c3acc25a8757dced18" translate="yes" xml:space="preserve">
          <source>If you are the developer of a redistributable &lt;a href=&quot;guide-structure-extensions&quot;&gt;extension&lt;/a&gt;, you can register dependencies in the bootstrapping class of the extension.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="88a0770ee0f1566f7b66faeaa988abce546693b8" translate="yes" xml:space="preserve">
          <source>If you are the developer of an application, you can register your dependencies using application configuration. Please, read the &lt;a href=&quot;guide-concept-configurations#application-configurations&quot;&gt;Application Configurations&lt;/a&gt; subsection of the &lt;a href=&quot;guide-concept-configurations&quot;&gt;Configurations&lt;/a&gt; guide article.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="06902672b81cadfce97d71b07442604af26c59fb" translate="yes" xml:space="preserve">
          <source>If you are using &lt;a href=&quot;http://codeception.com/&quot;&gt;Codeception&lt;/a&gt; to test your code, you should consider using the &lt;code&gt;yii2-codeception&lt;/code&gt; extension which has built-in support for loading and accessing fixtures. If you are using other testing frameworks, you may use &lt;a href=&quot;yii-test-fixturetrait&quot;&gt;yii\test\FixtureTrait&lt;/a&gt; in your test cases to achieve the same goal.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d09c3d1a47aec1e68c234972666fda76e27c788e" translate="yes" xml:space="preserve">
          <source>If you are using RBAC (Role-Based Access Control), you may also specify role or permission names. In this case, &lt;a href=&quot;yii-web-user#can()-detail&quot;&gt;yii\web\User::can()&lt;/a&gt; will be called to check access.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ad1c6d719e6dccd6b9958b5720f3b6a3500673c6" translate="yes" xml:space="preserve">
          <source>If you are using the array format to specify columns, you can also use the array keys to specify the column aliases. For example, the above code can be rewritten as follows,</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cca6006b06430b370aef7e215d362f4f853ce00b" translate="yes" xml:space="preserve">
          <source>If you are using the array format, you can also use the array keys to specify the table aliases, like the following:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cf272a02eda59adafb9739848242520368c3b760" translate="yes" xml:space="preserve">
          <source>If you can write to the root level directory i.e. where &lt;code&gt;config&lt;/code&gt;, &lt;code&gt;logs&lt;/code&gt; and &lt;code&gt;www&lt;/code&gt; are, then upload &lt;code&gt;assets&lt;/code&gt;, &lt;code&gt;commands&lt;/code&gt; etc. as is to the root level directory.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="df8767bc6311f37d43cc764bb148cd0b46cfb3c4" translate="yes" xml:space="preserve">
          <source>If you check the &lt;a href=&quot;guide-structure-entry-scripts&quot;&gt;entry script&lt;/a&gt;&lt;code&gt;web/index.php&lt;/code&gt; of your application, you will find the following line, which essentially makes &lt;code&gt;YII_ENV_DEV&lt;/code&gt; to be &lt;code&gt;true&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0e2b8995bac820139370c7025dec71f9ddc12641" translate="yes" xml:space="preserve">
          <source>If you do not already have Composer installed, you may do so by following the instructions at &lt;a href=&quot;https://getcomposer.org/download/&quot;&gt;getcomposer.org&lt;/a&gt;. On Linux and Mac OS X, you'll run the following commands:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="34e02e29d3b917fae8bc5e506145f3a5d872502e" translate="yes" xml:space="preserve">
          <source>If you do not call the &lt;a href=&quot;yii-db-query#select()-detail&quot;&gt;select()&lt;/a&gt; method when building a query, &lt;code&gt;*&lt;/code&gt; will be selected, which means selecting &lt;em&gt;all&lt;/em&gt; columns.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9bbd9756599724c118670f73c6822737993caac2" translate="yes" xml:space="preserve">
          <source>If you do not set this property, it means the source asset files are located under &lt;a href=&quot;yii-web-assetbundle#%24basePath-detail&quot;&gt;$basePath&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="15df1e1bf52515ef5c414fda35e0f81dc0c5cf8b" translate="yes" xml:space="preserve">
          <source>If you do not specify a container, the method will first try &lt;code&gt;Yii::$app&lt;/code&gt; followed by &lt;code&gt;Yii::$container&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bbfbd8d8baef3ed91f59f15a458d0e79092210a1" translate="yes" xml:space="preserve">
          <source>If you do not specify the &lt;a href=&quot;yii-log-target#%24categories-detail&quot;&gt;categories&lt;/a&gt; property, it means the target will process messages of &lt;em&gt;any&lt;/em&gt; category.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c83976f53814a5c6e157693af42cd201c01528fa" translate="yes" xml:space="preserve">
          <source>If you do not specify the &lt;a href=&quot;yii-log-target#%24levels-detail&quot;&gt;levels&lt;/a&gt; property, it means the target will process messages of &lt;em&gt;any&lt;/em&gt; severity level.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a0dc687b3f47759a70f2551c6991ad2949f4ffe4" translate="yes" xml:space="preserve">
          <source>If you do not specify the &lt;code&gt;on&lt;/code&gt; property, the rule would be applied in all scenarios. A rule is called an &lt;em&gt;active rule&lt;/em&gt; if it can be applied in the current &lt;a href=&quot;yii-base-model#%24scenario-detail&quot;&gt;scenario&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="02e99cf5bbefbfce55e712a3a93d5a3e326a4e7e" translate="yes" xml:space="preserve">
          <source>If you do not want to use automatically generated labels, you may override &lt;a href=&quot;yii-base-model#attributeLabels()-detail&quot;&gt;yii\base\Model::attributeLabels()&lt;/a&gt; to explicitly declare attribute labels. For example,</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2233096be3004f1317ef8ce2d620d5044d2276ed" translate="yes" xml:space="preserve">
          <source>If you don't have access to the server configuration, you can setup &lt;a href=&quot;yii-filters-hostcontrol&quot;&gt;yii\filters\HostControl&lt;/a&gt; filter at application level in order to protect against such kind of attack:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="297fdf89d1ba18aa001365c462a967490eb1353d" translate="yes" xml:space="preserve">
          <source>If you don't want a filter for this data column, set this value to be false.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8f16ee7856b24b7e128f183542176ba6c98a7896" translate="yes" xml:space="preserve">
          <source>If you don't want to hardcode what users have certain roles, don't put &lt;code&gt;-&amp;gt;assign()&lt;/code&gt; calls into the command. Instead, create either UI or console command to manage assignments.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="10dd3b49a623e880cab614b0f3f3f9cb137d0787" translate="yes" xml:space="preserve">
          <source>If you don't want to hardcode which users have certain roles, don't put &lt;code&gt;-&amp;gt;assign()&lt;/code&gt; calls in migrations. Instead, create either UI or console command to manage assignments.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="75c1aeab64a68a337bfda4419659b6450aa83471" translate="yes" xml:space="preserve">
          <source>If you don't want to use migration and need SQL instead, files for all databases are in migrations directory.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="81567f29f5cd049f5d932ed4b5a9c26bb0d3983c" translate="yes" xml:space="preserve">
          <source>If you had Composer already installed before, make sure you use an up to date version. You can update Composer by running &lt;code&gt;composer self-update&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="226c85b94e088f58e757c44ac9999f77253a0581" translate="yes" xml:space="preserve">
          <source>If you have multiple migrations that use the same database, it is recommended that you create a base migration class with the above &lt;code&gt;init()&lt;/code&gt; code. Then each migration class can extend from this base class.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3ca820c6a3f148bcdc5cc2897e2506bd35c89231" translate="yes" xml:space="preserve">
          <source>If you have registered two aliases '@foo' and '@foo/bar'. Then translating '@foo/bar/config' would replace the part '@foo/bar' (instead of '@foo') with the corresponding registered path. This is because the longest alias takes precedence.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="074a0067623a940403724020352ca9fff63461f7" translate="yes" xml:space="preserve">
          <source>If you have set up &lt;a href=&quot;yii-console-controllers-basemigratecontroller#%24migrationNamespaces-detail&quot;&gt;$migrationNamespaces&lt;/a&gt;, you may set this field to &lt;code&gt;null&lt;/code&gt; in order to disable usage of migrations that are not namespaced.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bf461844ffbd3c10d5abbe039431781f607e5f46" translate="yes" xml:space="preserve">
          <source>If you just want to use query caching for a single query, you can call &lt;a href=&quot;yii-db-command#cache()-detail&quot;&gt;yii\db\Command::cache()&lt;/a&gt; when building the command. For example,</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c5064b4e1cd50b3f1237adabca0cffd7e52dc8a2" translate="yes" xml:space="preserve">
          <source>If you know the input type in advance, it's more convenient to use the shortcut methods:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="20205f9420f300877ed35da67fba58c90dbbbc0d" translate="yes" xml:space="preserve">
          <source>If you miss &lt;code&gt;\Yii::endProfile('block1')&lt;/code&gt; or switch the order of &lt;code&gt;\Yii::endProfile('block1')&lt;/code&gt; and &lt;code&gt;\Yii::endProfile('block2')&lt;/code&gt;, the performance profiling will not work.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="17e6d86332962c0e1a0a19ec8415cad80fa6504b" translate="yes" xml:space="preserve">
          <source>If you need to build string dynamically combining multiple styles it's better to use &lt;a href=&quot;yii-helpers-baseconsole#ansiFormat()-detail&quot;&gt;ansiFormat()&lt;/a&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d50f41ee67e8569f928d2157e8866cbe9e336b7c" translate="yes" xml:space="preserve">
          <source>If you need to generate &lt;code&gt;mailto&lt;/code&gt; links, you can use the following code:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9b2f9aa5737990c5740d2b149e2d7b6b607e62f6" translate="yes" xml:space="preserve">
          <source>If you need to pass additional data to each view, you can use the &lt;a href=&quot;yii-widgets-listview#%24viewParams-detail&quot;&gt;$viewParams&lt;/a&gt; property to pass key value pairs like the following:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="792f7deec5e7c3ac4cfae0908b2093492aab2f2e" translate="yes" xml:space="preserve">
          <source>If you need to perform asynchronous client-side validation, you can create &lt;a href=&quot;http://api.jquery.com/category/deferred-object/&quot;&gt;Deferred objects&lt;/a&gt;. For example, to perform a custom AJAX validation, you can use the following code:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d8a69e74f2142a7da431174b057d7c7fab686eff" translate="yes" xml:space="preserve">
          <source>If you need to perform multiple validations against several values, you can use &lt;a href=&quot;yii-base-dynamicmodel&quot;&gt;yii\base\DynamicModel&lt;/a&gt; which supports declaring both attributes and rules on the fly. Its usage is like the following:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f08e17867db1f3d19412df39187a07c792cfbd39" translate="yes" xml:space="preserve">
          <source>If you only need to perform one type of validation (e.g. validating email addresses), you may call the &lt;a href=&quot;yii-validators-validator#validate()-detail&quot;&gt;validate()&lt;/a&gt; method of the desired validator, like the following:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="92fe42db235098b77ea17bda7aa92d3f4609001d" translate="yes" xml:space="preserve">
          <source>If you only want to install the core framework and would like to build an entire application from scratch, you may follow the instructions as explained in &lt;a href=&quot;guide-tutorial-start-from-scratch&quot;&gt;Building Application from Scratch&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5132167b73f3206327b1551caa7d3bd82c21435d" translate="yes" xml:space="preserve">
          <source>If you override the &lt;a href=&quot;yii-base-object#init()-detail&quot;&gt;yii\base\Object::init()&lt;/a&gt; method, make sure you call the parent implementation of &lt;code&gt;init()&lt;/code&gt;&lt;em&gt;at the beginning&lt;/em&gt; of your &lt;code&gt;init()&lt;/code&gt; method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f5ff7ba9e299b08518cab5f6fc7a7b51d30603d9" translate="yes" xml:space="preserve">
          <source>If you override the constructor, specify a &lt;code&gt;$config&lt;/code&gt; parameter as the constructor's &lt;em&gt;last&lt;/em&gt; parameter, and then pass this parameter to the parent constructor.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cda60d790c37655ba5e4268ca2f7190265c10c83" translate="yes" xml:space="preserve">
          <source>If you override this method, make sure you call the parent implementation first.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eef6866dec6da3b2206202cc146d4c98d8a132d8" translate="yes" xml:space="preserve">
          <source>If you override this method, make sure you call the parent implementation in the last.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="789a89c920137236a0377112c245ee793f9f0db7" translate="yes" xml:space="preserve">
          <source>If you override this method, please make sure you call the parent implementation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="00ca879ed9c67ca95fe8e219c8f8ea6b15834a0a" translate="yes" xml:space="preserve">
          <source>If you override this method, you should consider calling the parent implementation so that the data returned by &lt;a href=&quot;yii-elasticsearch-activefixture#getData()-detail&quot;&gt;getData()&lt;/a&gt; can be populated into the index.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5d394008a8d1ec16ea61030a724ae789587aec39" translate="yes" xml:space="preserve">
          <source>If you override this method, you should consider calling the parent implementation so that the data returned by &lt;a href=&quot;yii-sphinx-activefixture#getData()-detail&quot;&gt;getData()&lt;/a&gt; can be populated into the index.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fb5638ac19004d386e25e4df5ee6752ad149ab1d" translate="yes" xml:space="preserve">
          <source>If you override this method, you should consider calling the parent implementation so that the data returned by &lt;a href=&quot;yii-test-activefixture#getData()-detail&quot;&gt;getData()&lt;/a&gt; can be populated into the table.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3524d4f731d1186bff33d0f612c1a67ae12da79a" translate="yes" xml:space="preserve">
          <source>If you override this method, your code should look like the following:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="41bdba2faa8095bf8604ac901078b7a369d4754b" translate="yes" xml:space="preserve">
          <source>If you previously created the &lt;code&gt;controllers/CountryController.php&lt;/code&gt; and &lt;code&gt;views/country/index.php&lt;/code&gt; files (in the databases section of the guide), check the &quot;overwrite&quot; box to replace them. (The previous versions did not have full CRUD support.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4db19082b234b0490ce30c7c7c6df9fd6697790d" translate="yes" xml:space="preserve">
          <source>If you set a custom &lt;code&gt;id&lt;/code&gt; for the container element, you may need to adjust the &lt;a href=&quot;yii-widgets-activefield#%24selectors-detail&quot;&gt;$selectors&lt;/a&gt; accordingly.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d635d4b83c6c1478ebc67e883a1fdc20f440e21b" translate="yes" xml:space="preserve">
          <source>If you set a custom &lt;code&gt;id&lt;/code&gt; for the error element, you may need to adjust the &lt;a href=&quot;yii-widgets-activefield#%24selectors-detail&quot;&gt;$selectors&lt;/a&gt; accordingly.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="af94c050f74ecdf042ac85674c3bdcad83c69f7d" translate="yes" xml:space="preserve">
          <source>If you set a custom &lt;code&gt;id&lt;/code&gt; for the input element, you may need to adjust the &lt;a href=&quot;yii-widgets-activefield#%24selectors-detail&quot;&gt;$selectors&lt;/a&gt; accordingly.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="75d36be3956961e96969f915a0b15f3fa2b95cbd" translate="yes" xml:space="preserve">
          <source>If you set a custom &lt;code&gt;id&lt;/code&gt; for the textarea element, you may need to adjust the &lt;a href=&quot;yii-widgets-activefield#%24selectors-detail&quot;&gt;$selectors&lt;/a&gt; accordingly.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="81d5471e4053253eb9f42280d7521cb6afd7d948" translate="yes" xml:space="preserve">
          <source>If you specify an invalid limit or offset (e.g. a negative value), it will be ignored.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a34fe2f0885048bb9fe4db8cb3e69dd8b5091175" translate="yes" xml:space="preserve">
          <source>If you specify the query result to be indexed by some column via &lt;a href=&quot;yii-db-querytrait#indexBy()-detail&quot;&gt;yii\db\Query::indexBy()&lt;/a&gt;, the batch query will still keep the proper index.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7ac4b149f8d3d808c930cc0b94116aa25c9764ca" translate="yes" xml:space="preserve">
          <source>If you specify view name as a scalar string, its rendering result will be used as HTML body, while plain text body will be composed by removing all HTML entities from HTML one.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eb19bfefe929b6c29848d7e1776c6d00c34d3cc5" translate="yes" xml:space="preserve">
          <source>If you use callback as an attribute value it will be called with the following three parameters:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6543e55b509c45e792379a58952614f592b38291" translate="yes" xml:space="preserve">
          <source>If you use the &quot;yii&quot; JavaScript module, it will handle the AJAX redirection as described above. Otherwise, you should write the following JavaScript code to handle the redirection:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d48e18a9ccf2ddbe904498f6864ad878a0ea4b3a" translate="yes" xml:space="preserve">
          <source>If you want an action parameter to accept array values, you should type-hint it with &lt;code&gt;array&lt;/code&gt;, like the following:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9744fe362c811352b1b65a34f3e252ff2d358a3a" translate="yes" xml:space="preserve">
          <source>If you want multiple choices to be selectable, you can use a checkbox list:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="caa73650d998bff5569c491747f3a175e8cd1f1e" translate="yes" xml:space="preserve">
          <source>If you want several migrations to be applied and tracked down completely separated from each other, you can configure multiple migration commands which will use different namespaces and migration history tables:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3d46b091dc01e90d1a3c337e76eb07f5e2dbf441" translate="yes" xml:space="preserve">
          <source>If you want to access other data in layouts, you have to use the pull method as described in the &lt;a href=&quot;#accessing-data-in-views&quot;&gt;Accessing Data in Views&lt;/a&gt; subsection. If you want to pass data from a content view to a layout, you may use the method described in the &lt;a href=&quot;#sharing-data-among-views&quot;&gt;Sharing Data among Views&lt;/a&gt; subsection.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="96c97c9d156f964d584377c0f7dc4b51df7486ab" translate="yes" xml:space="preserve">
          <source>If you want to authenticate users using username and password, you should provide the &lt;a href=&quot;yii-filters-auth-httpbasicauth#%24auth-detail&quot;&gt;$auth&lt;/a&gt; function for example like the following:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="973062f3d1c199266c4bb56840280c6f05a20624" translate="yes" xml:space="preserve">
          <source>If you want to build UI element manually, you may use &lt;a href=&quot;yii-data-pagination#createUrl()-detail&quot;&gt;yii\data\Pagination::createUrl()&lt;/a&gt; to create URLs that would lead to different pages. The method requires a page parameter and will create a properly formatted URL containing the page parameter. For example,</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cfdac1c47758b755ae4fc2575033927454706401" translate="yes" xml:space="preserve">
          <source>If you want to configure it:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8784c117ab38842c5a718d041de7d5d60cdf83f5" translate="yes" xml:space="preserve">
          <source>If you want to create a URL with an anchor, you can use the array format with a &lt;code&gt;#&lt;/code&gt; parameter. For example,</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4930d393b0bf6975b94b5fdf61801cb1fcd6e99a" translate="yes" xml:space="preserve">
          <source>If you want to ensure that the &lt;code&gt;$unbufferedDb&lt;/code&gt; has exactly the same PDO attributes like the original buffered &lt;code&gt;$db&lt;/code&gt; but the &lt;code&gt;PDO::MYSQL_ATTR_USE_BUFFERED_QUERY&lt;/code&gt; is &lt;code&gt;false&lt;/code&gt;, &lt;a href=&quot;https://github.com/yiisoft/yii2/issues/8420#issuecomment-301423833&quot;&gt;consider a deep copy of &lt;code&gt;$db&lt;/code&gt;&lt;/a&gt;, set it to false manually.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ff5cf31e060bb3ae5d605ca84033c8473ea9f53c" translate="yes" xml:space="preserve">
          <source>If you want to show an error page telling the user that his request is invalid or unexpected, you may simply throw an &lt;a href=&quot;yii-web-httpexception&quot;&gt;HTTP exception&lt;/a&gt;, such as &lt;a href=&quot;yii-web-notfoundhttpexception&quot;&gt;yii\web\NotFoundHttpException&lt;/a&gt;. The error handler will correctly set the HTTP status code of the response and use an appropriate error view to display the error message.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d04941355e3e0b34ca78d75fc75e90af4a129166" translate="yes" xml:space="preserve">
          <source>If you want to specify additional properties of the style tag, pass an array of name-values to the second argument. The last argument is a unique ID that is used to identify the style block and make sure it is only added once in case the same style is registered from different places in the code.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="181efa07bdef332fb8a67bc20224485544c2983e" translate="yes" xml:space="preserve">
          <source>If you want to specify what meta tags to generate in content views, you can call &lt;a href=&quot;yii-web-view#registerMetaTag()-detail&quot;&gt;yii\web\View::registerMetaTag()&lt;/a&gt; in a content view, like the following:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0df30b48387d57bac7fe29b7f26676c4821e6997" translate="yes" xml:space="preserve">
          <source>If you want to start a transaction with the slave connection, you should explicitly do so, like the following:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5ca04f49460e5df3ea9089fdbecfc9801486620f" translate="yes" xml:space="preserve">
          <source>If you want to start with a more sophisticated application, better suited to team development environments, you may consider installing the &lt;a href=&quot;https://github.com/yiisoft/yii2-app-advanced/blob/master/docs/guide/README.md&quot;&gt;Advanced Project Template&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a4fbaac18f251bdf4e9cb8186739748bfd2b2b0c" translate="yes" xml:space="preserve">
          <source>If you want to support all three authentication methods explained above, you can use &lt;code&gt;CompositeAuth&lt;/code&gt; like the following,</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a16ee12993c92cce650c40593db10383ad12ebe3" translate="yes" xml:space="preserve">
          <source>If you want to translate the messages for a module and avoid using a single translation file for all the messages, you can do it like the following:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fc549bc1078d0feb282c28a7ae4502ae7a3a403c" translate="yes" xml:space="preserve">
          <source>If you want to turn off client-side validation completely, you may configure the &lt;a href=&quot;yii-widgets-activeform#%24enableClientValidation-detail&quot;&gt;yii\widgets\ActiveForm::$enableClientValidation&lt;/a&gt; property to be &lt;code&gt;false&lt;/code&gt;. You may also turn off client-side validation of individual input fields by configuring their &lt;a href=&quot;yii-widgets-activefield#%24enableClientValidation-detail&quot;&gt;yii\widgets\ActiveField::$enableClientValidation&lt;/a&gt; property to be false. When &lt;code&gt;enableClientValidation&lt;/code&gt; is configured at both the input field level and the form level, the former will take precedence.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4d5d579ce05e6854d9f90531c98c9e2a9306c487" translate="yes" xml:space="preserve">
          <source>If you want to use a different database connection other than the &lt;code&gt;db&lt;/code&gt; component, you should override the &lt;a href=&quot;yii-db-activerecord#getDb()-detail&quot;&gt;getDb()&lt;/a&gt; method:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="52f55d3c04e1f5c45cc778dbf626fbdf705ac5a9" translate="yes" xml:space="preserve">
          <source>If you want to use a widget that does not have &lt;code&gt;model&lt;/code&gt; and &lt;code&gt;attribute&lt;/code&gt; properties, please use &lt;a href=&quot;yii-widgets-activefield#render()-detail&quot;&gt;render()&lt;/a&gt; instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4232e534d47ba4fe2443dc263ccd877595f5005a" translate="yes" xml:space="preserve">
          <source>If you want to use an absolute url you can call &lt;a href=&quot;yii-helpers-baseurl#to()-detail&quot;&gt;yii\helpers\Url::to()&lt;/a&gt; yourself, before passing the URL to this method, like this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9c00554841920360df5b674312015f71e11043fa" translate="yes" xml:space="preserve">
          <source>If you want to use an external style in a CSS file:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b3c0dd1714d3e1f73614955b786e10ad9946b51d" translate="yes" xml:space="preserve">
          <source>If you want your validator to support validating a value without a model, you should also override &lt;a href=&quot;yii-validators-validator#validate()-detail&quot;&gt;yii\validators\Validator::validate()&lt;/a&gt;. You may also override &lt;a href=&quot;yii-validators-validator#validateValue()-detail&quot;&gt;yii\validators\Validator::validateValue()&lt;/a&gt; instead of &lt;code&gt;validateAttribute()&lt;/code&gt; and &lt;code&gt;validate()&lt;/code&gt; because by default the latter two methods are implemented by calling &lt;code&gt;validateValue()&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="75f25d4428efca03d2fa5ec005ba3811fa93de25" translate="yes" xml:space="preserve">
          <source>If you wish to render the report with your own representation, use &lt;a href=&quot;yiirequirementchecker#getResult()-detail&quot;&gt;getResult()&lt;/a&gt; instead of &lt;a href=&quot;yiirequirementchecker#render()-detail&quot;&gt;render()&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aecdccc20549210b9767f57636f6f477e22ea4f8" translate="yes" xml:space="preserve">
          <source>If your DBMS supports Savepoint, you may nest multiple transactions like the following:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dc1b68aacc536f7e825ed1e2f72965abafe596d3" translate="yes" xml:space="preserve">
          <source>If your application allows user signup you need to assign roles to these new users once. For example, in order for all signed up users to become authors in your advanced project template you need to modify &lt;code&gt;frontend\models\SignupForm::signup()&lt;/code&gt; as follows:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9c5f333f02e07ebac084592c1d7ddcf8419143df" translate="yes" xml:space="preserve">
          <source>If your application enables &lt;a href=&quot;yii-web-urlmanager#%24enablePrettyUrl-detail&quot;&gt;pretty URLs&lt;/a&gt;, you can then access Gii via URL: &lt;code&gt;http://localhost/path/to/index.php/gii&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fe801a3b4f552be6a8d316446a768ffa0b9b757d" translate="yes" xml:space="preserve">
          <source>If your application supports multiple languages and you want to display pages in the language that is the most preferred by the end user, you may use the language negotiation method &lt;a href=&quot;yii-web-request#getPreferredLanguage()-detail&quot;&gt;yii\web\Request::getPreferredLanguage()&lt;/a&gt;. This method takes a list of languages supported by your application, compares them with &lt;a href=&quot;yii-web-request#%24acceptableLanguages-detail&quot;&gt;acceptableLanguages&lt;/a&gt;, and returns the most appropriate language.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="30540e5536bbc5532e4ac632d4b4fbe84251097e" translate="yes" xml:space="preserve">
          <source>If your attribute name is different, you may configure the &lt;a href=&quot;yii-behaviors-sluggablebehavior#%24slugAttribute-detail&quot;&gt;$slugAttribute&lt;/a&gt; property like the following:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d12f53fc7cc057edf533cc2d5d0b58fb6435d569" translate="yes" xml:space="preserve">
          <source>If your attribute names are different or you want to use a different way of calculating the timestamp, you may configure the &lt;a href=&quot;yii-behaviors-timestampbehavior#%24createdAtAttribute-detail&quot;&gt;$createdAtAttribute&lt;/a&gt;, &lt;a href=&quot;yii-behaviors-timestampbehavior#%24updatedAtAttribute-detail&quot;&gt;$updatedAtAttribute&lt;/a&gt; and &lt;a href=&quot;yii-behaviors-timestampbehavior#%24value-detail&quot;&gt;$value&lt;/a&gt; properties like the following:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="655f56fb704f928de2fb1d3f2cf3423caa814d2e" translate="yes" xml:space="preserve">
          <source>If your attribute names are different, you may configure the &lt;a href=&quot;yii-behaviors-blameablebehavior#%24createdByAttribute-detail&quot;&gt;$createdByAttribute&lt;/a&gt; and &lt;a href=&quot;yii-behaviors-blameablebehavior#%24updatedByAttribute-detail&quot;&gt;$updatedByAttribute&lt;/a&gt; properties like the following:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="04e1fd7301c8b0a8c2eb130213b405fc33de7f48" translate="yes" xml:space="preserve">
          <source>If your code depends on jQuery, jQuery UI or Bootstrap, you should use these predefined asset bundles rather than creating your own versions. If the default setting of these bundles do not satisfy your needs, you may customize them as described in the &lt;a href=&quot;#customizing-asset-bundles&quot;&gt;Customizing Asset Bundle&lt;/a&gt; subsection.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4f2a41d12081f71e67635e96eb2364dde97bd614" translate="yes" xml:space="preserve">
          <source>If your controller class extends from &lt;a href=&quot;yii-rest-activecontroller&quot;&gt;yii\rest\ActiveController&lt;/a&gt;, you should set its &lt;a href=&quot;yii-rest-activecontroller#%24modelClass-detail&quot;&gt;modelClass&lt;/a&gt; property to be the name of the resource class that you plan to serve through this controller. The class must extend from &lt;a href=&quot;yii-db-activerecord&quot;&gt;yii\db\ActiveRecord&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a0a95f72d004584eaac38eaddc0002f08046ec4b" translate="yes" xml:space="preserve">
          <source>If your controllers extend from &lt;a href=&quot;yii-rest-activecontroller&quot;&gt;yii\rest\ActiveController&lt;/a&gt;, you may override the &lt;a href=&quot;yii-rest-activecontroller#checkAccess()-detail&quot;&gt;checkAccess()&lt;/a&gt; method to perform authorization check. The method will be called by the built-in actions provided by &lt;a href=&quot;yii-rest-activecontroller&quot;&gt;yii\rest\ActiveController&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0e64627496264d0eb09507e6456eacd2317502a7" translate="yes" xml:space="preserve">
          <source>If your data needs to be formatted before sending it to end users, you should set both of the &lt;a href=&quot;yii-web-response#%24format-detail&quot;&gt;format&lt;/a&gt; and &lt;a href=&quot;yii-web-response#%24data-detail&quot;&gt;data&lt;/a&gt; properties. The &lt;a href=&quot;yii-web-response#%24format-detail&quot;&gt;format&lt;/a&gt; property specifies in which format the &lt;a href=&quot;yii-web-response#%24data-detail&quot;&gt;data&lt;/a&gt; should be formatted. For example,</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="57555b93a460402573dd29a7d141b6b53f3f5666" translate="yes" xml:space="preserve">
          <source>If your extension is a widget or a module, chances are that it may require some &lt;a href=&quot;guide-structure-assets&quot;&gt;assets&lt;/a&gt; to work. For example, a module may display some pages which contain images, JavaScript, and CSS. Because the files of an extension are all under the same directory which is not Web accessible when installed in an application, you have two choices to make the asset files directly accessible via Web:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="11dd86967cbdc21c7aa0e26aad43324a07db00ad" translate="yes" xml:space="preserve">
          <source>If your extension needs to create specific DB tables or make changes to DB schema, you should</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2e89acf6ec364549e6dca3fd852fd80d97fad5ae" translate="yes" xml:space="preserve">
          <source>If your permissions hierarchy doesn't change at all and you have a fixed number of users you can create a -&lt;a href=&quot;guide-tutorial-console#create-command&quot;&gt;console command&lt;/a&gt; that will initialize authorization data once via APIs offered by &lt;code&gt;authManager&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4b4c4ad4371c9bf3bf03e546c4781230762f2e6b" translate="yes" xml:space="preserve">
          <source>If your web application and console application share a lot of configuration parameters and values, you may consider moving the common parts into a separate file, and including this file in both of the application configurations (web and console). You can see an example of this in the advanced project template.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3a536ec1a08142297386e172ddffda41d5e2e56a" translate="yes" xml:space="preserve">
          <source>If your webserver is Apache you'll need to add an &lt;code&gt;.htaccess&lt;/code&gt; file with the following content to &lt;code&gt;web&lt;/code&gt; (or &lt;code&gt;public_html&lt;/code&gt; or whatever) (where the &lt;code&gt;index.php&lt;/code&gt; file is located):</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ce6c30e230e10dcde1716030700b4f9b0a9510a5" translate="yes" xml:space="preserve">
          <source>Image contents</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9afbc432fdf4f4f29ea724144e64d868ea432467" translate="yes" xml:space="preserve">
          <source>Image contents in PNG format.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="764dba28eb0f45ff3dd6549b0ba060aa2f9bdc8e" translate="yes" xml:space="preserve">
          <source>ImageValidator verifies if an attribute is receiving a valid image.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="09e871c98fef3b901a775def173e4126aaf73b42" translate="yes" xml:space="preserve">
          <source>Images</source>
          <target state="translated">Images</target>
        </trans-unit>
        <trans-unit id="83c9906a6ba1c6eebe2d4c7b54d399618204b9c7" translate="yes" xml:space="preserve">
          <source>Implement &lt;a href=&quot;yii-web-identityinterface#findIdentityByAccessToken()-detail&quot;&gt;yii\web\IdentityInterface::findIdentityByAccessToken()&lt;/a&gt; in your &lt;a href=&quot;yii-web-user#%24identityClass-detail&quot;&gt;user identity class&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="99ac8896f0b8e4fb226d431e9d558d4b8b692dbe" translate="yes" xml:space="preserve">
          <source>Implementation in the &lt;code&gt;User&lt;/code&gt; model could look like the following:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eef447a098b65c07343d0573ed93bad4b771eec6" translate="yes" xml:space="preserve">
          <source>Implementation of &lt;code&gt;findIdentityByAccessToken()&lt;/code&gt; is application specific. For example, in simple scenarios when each user can only have one access token, you may store the access token in an &lt;code&gt;access_token&lt;/code&gt; column in the user table. The method can then be readily implemented in the &lt;code&gt;User&lt;/code&gt; class as follows,</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="18fc5be5203380c325a1f096ff8242d1b6df5755" translate="yes" xml:space="preserve">
          <source>Implementation of &lt;code&gt;validateChildrenFunds&lt;/code&gt; can be like this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="75ac4ae1dbbdf0e323f5a3d365241165b3d30df4" translate="yes" xml:space="preserve">
          <source>Implementation of IdentityInterface</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eb88c33bd464bfa9f39365c0015e38ae930937f8" translate="yes" xml:space="preserve">
          <source>Implemented by</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a15dbec766115594c5c0793a66731e33650eda71" translate="yes" xml:space="preserve">
          <source>Implementing &lt;a href=&quot;yii-web-identityinterface&quot;&gt;yii\web\IdentityInterface&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5147dd8f9a2656c00a2bad55fbcf10f095123217" translate="yes" xml:space="preserve">
          <source>Implementing Client-Side Validation</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9082f008cd6f06e66b87644eb0d48acef966f656" translate="yes" xml:space="preserve">
          <source>Implementing yii\web\IdentityInterface</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8011cb5556f43ad7310267c2a3929ab7da14c6f2" translate="yes" xml:space="preserve">
          <source>Implements</source>
          <target state="translated">Implements</target>
        </trans-unit>
        <trans-unit id="7aeceabf8ce0c5bc87ccf00b716a69809e03e3eb" translate="yes" xml:space="preserve">
          <source>Implements HKDF specified in &lt;a href=&quot;https://tools.ietf.org/html/rfc5869&quot;&gt;RFC 5869&lt;/a&gt;. Recommend use one of the SHA-2 hash algorithms: sha224, sha256, sha384 or sha512.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4d38d0a1528b9d39c1ac239f1457a17b936d53d8" translate="yes" xml:space="preserve">
          <source>Implements HKDF2 specified in &lt;a href=&quot;http://tools.ietf.org/html/rfc2898#section-5.2&quot;&gt;RFC 2898&lt;/a&gt; Recommend use one of the SHA-2 hash algorithms: sha224, sha256, sha384 or sha512.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="133507769129b57cd7e00743e5d80044b6d57f9f" translate="yes" xml:space="preserve">
          <source>Implements of User model with search method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="484ddd6d1a627d12739d48ff1825511be4a327a1" translate="yes" xml:space="preserve">
          <source>Important Properties</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5b4287989d3a3b5906b72557b9cc98ebc73d0c1e" translate="yes" xml:space="preserve">
          <source>Improve code and make sure tests are still OK.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="df5792a70749c5238d889147e6729926aac96a68" translate="yes" xml:space="preserve">
          <source>In &lt;a href=&quot;#accessing-relational-data&quot;&gt;Accessing Relational Data&lt;/a&gt;, we explained that you can access a relation property of an Active Record instance like accessing a normal object property. A SQL statement will be executed only when you access the relation property the first time. We call such relational data accessing method &lt;em&gt;lazy loading&lt;/em&gt;. For example,</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="637cef6e1625741ad246d70ea515a0955b16dc62" translate="yes" xml:space="preserve">
          <source>In &lt;a href=&quot;guide-db-query-builder&quot;&gt;Query Builder&lt;/a&gt;, we have explained that you may use &lt;em&gt;batch query&lt;/em&gt; to minimize your memory usage when querying a large amount of data from the database. You may use the same technique in Active Record. For example,</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="207c9814e0b88206738f05e6de5079954856b9d0" translate="yes" xml:space="preserve">
          <source>In &lt;a href=&quot;yii-web-application&quot;&gt;Web applications&lt;/a&gt;, controllers should extend from &lt;a href=&quot;yii-web-controller&quot;&gt;yii\web\Controller&lt;/a&gt; or its child classes. Similarly in &lt;a href=&quot;yii-console-application&quot;&gt;console applications&lt;/a&gt;, controllers should extend from &lt;a href=&quot;yii-console-controller&quot;&gt;yii\console\Controller&lt;/a&gt; or its child classes. The following code defines a &lt;code&gt;site&lt;/code&gt; controller:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fe8e8664f862bd61570b2f16619d402eecb37bd1" translate="yes" xml:space="preserve">
          <source>In &lt;code&gt;search()&lt;/code&gt; you then just add another filter condition with:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c8af23a07546714ca95ff73b5f3ab92ee0fb3ca9" translate="yes" xml:space="preserve">
          <source>In AJAX mode, this normally will not work as expected unless there are some client-side JavaScript code handling the redirection. To help achieve this goal, this method will send out a &quot;X-Redirect&quot; header instead of &quot;Location&quot;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c1f723e70c53be0cfc36d8849f10bdd614bba60f" translate="yes" xml:space="preserve">
          <source>In JavaScript, you may get the values of &lt;a href=&quot;yii-web-request#%24csrfParam-detail&quot;&gt;$csrfParam&lt;/a&gt; and &lt;a href=&quot;yii-web-request#%24csrfToken-detail&quot;&gt;$csrfToken&lt;/a&gt; via &lt;code&gt;yii.getCsrfParam()&lt;/code&gt; and &lt;code&gt;yii.getCsrfToken()&lt;/code&gt;, respectively. The &lt;a href=&quot;yii-web-yiiasset&quot;&gt;yii\web\YiiAsset&lt;/a&gt; asset must be registered. You also need to include CSRF meta tags in your pages by using &lt;a href=&quot;yii-helpers-basehtml#csrfMetaTags()-detail&quot;&gt;yii\helpers\Html::csrfMetaTags()&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="927e174e4106b452b588459c497c27e588b306a5" translate="yes" xml:space="preserve">
          <source>In PHP, class member variables are also called &lt;em&gt;properties&lt;/em&gt;. These variables are part of the class definition, and are used to represent the state of a class instance (i.e., to differentiate one instance of the class from another). In practice, you may often want to handle the reading or writing of properties in special ways. For example, you may want to always trim a string when it is being assigned to a &lt;code&gt;label&lt;/code&gt; property. You &lt;em&gt;could&lt;/em&gt; use the following code to achieve this task:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="672788c73a675b474b222103e325a67052f82755" translate="yes" xml:space="preserve">
          <source>In Yii most of database querying happens via &lt;a href=&quot;guide-db-active-record&quot;&gt;Active Record&lt;/a&gt; which properly uses PDO prepared statements internally. In case of prepared statements it's not possible to manipulate query as was demonstrated above.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bcef10dfa50886d5445e85ea30866f411cef3e02" translate="yes" xml:space="preserve">
          <source>In Yii, a service locator is simply an instance of &lt;a href=&quot;yii-di-servicelocator&quot;&gt;yii\di\ServiceLocator&lt;/a&gt; or a child class.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4d3b35ae790e3f70c92e6de5dd1c5ac31d086006" translate="yes" xml:space="preserve">
          <source>In Yii, most probably you'll use &lt;a href=&quot;guide-input-validation&quot;&gt;form validation&lt;/a&gt; to do alike checks.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8c8da1bb8dd752422ec6ddd77eea7e4d47261ff7" translate="yes" xml:space="preserve">
          <source>In Yii, we often use the term &quot;language&quot; to refer to a locale.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="12182fac915d3de68bdb4b7a44aa8181229eca83" translate="yes" xml:space="preserve">
          <source>In a controller action you may use this method like this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="71be5b4661cbd45d7c73edf23249028eaad9aaad" translate="yes" xml:space="preserve">
          <source>In a message to be translated, you can embed one or multiple parameters (also called placeholders) so that they can be replaced by the given values. By giving different sets of values, you can variate the translated message dynamically. In the following example, the placeholder &lt;code&gt;{username}&lt;/code&gt; in the message &lt;code&gt;'Hello, {username}!'&lt;/code&gt; will be replaced by &lt;code&gt;'Alexander'&lt;/code&gt; and &lt;code&gt;'Qiang'&lt;/code&gt;, respectively.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8186cbab42cf501b8e19d36cbdb7970f39f6e830" translate="yes" xml:space="preserve">
          <source>In a well-designed application, controllers are often very thin, with each action containing only a few lines of code. If your controller is rather complicated, it usually indicates that you should refactor it and move some code to other classes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="361806aa4dc4e336a54c75c305ea2b35f0ea29fc" translate="yes" xml:space="preserve">
          <source>In addition to column classes provided by Yii that we'll review below, you can create your own column classes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="20146be38ec2d61dd7e5e5c3a117346dcc16a50e" translate="yes" xml:space="preserve">
          <source>In any application, you should at least configure two properties: &lt;a href=&quot;yii-base-module#%24id-detail&quot;&gt;id&lt;/a&gt; and &lt;a href=&quot;yii-base-module#%24basePath-detail&quot;&gt;basePath&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="43c112b5f30a2205f4501ab1dd5da1007abdddde" translate="yes" xml:space="preserve">
          <source>In any place, you can get access to the &lt;a href=&quot;yii-base-view&quot;&gt;view&lt;/a&gt; application component by the expression &lt;code&gt;Yii::$app-&amp;gt;view&lt;/code&gt; and then call its aforementioned methods to render a view. For example,</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a03fbf90e5ee72f1d1b77e3333c2919a3335a850" translate="yes" xml:space="preserve">
          <source>In case &lt;a href=&quot;yii-console-controllers-basemigratecontroller#%24migrationPath-detail&quot;&gt;$migrationPath&lt;/a&gt; is not set and no namespace is provided, the first entry of &lt;a href=&quot;yii-console-controllers-basemigratecontroller#%24migrationNamespaces-detail&quot;&gt;$migrationNamespaces&lt;/a&gt; will be used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bbaeab39a9473a0d389ee5d972c286be4e2a1175" translate="yes" xml:space="preserve">
          <source>In case &lt;a href=&quot;yii-sphinx-query#showMeta()-detail&quot;&gt;yii\sphinx\Query::showMeta()&lt;/a&gt; is set ActiveDataProvider will fetch total count value from the query meta information, avoiding extra counting query:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9257125a23fc2102e9c66cb31081137bf8a1bb9d" translate="yes" xml:space="preserve">
          <source>In case it's not possible, table and column names should be escaped. Yii has special syntax for such escaping which allows doing it the same way for all databases it supports:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6a24af6493e84ccab50c34b1ea726f95b8e7ff43" translate="yes" xml:space="preserve">
          <source>In case of Jane it is a bit simpler since she is an admin:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="78bf3afc6473cb67f16ebf2f2e28f02700f18047" translate="yes" xml:space="preserve">
          <source>In case of a single positional parameter its value could be specified without wrapping it into array:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2fe94a70a859a5f3af709c1d0d193919bdf947ae" translate="yes" xml:space="preserve">
          <source>In case of nginx you should not need any extra config files.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="33ef5f5724a7f5d8ef33fc5c217e59be44e29506" translate="yes" xml:space="preserve">
          <source>In case the action should not run, the request should be handled inside of the &lt;code&gt;beforeAction&lt;/code&gt; code by either providing the necessary output or redirecting the request. Otherwise the response will be empty.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a92175de985d4aa65a968ba18cec6b69b9d7a504" translate="yes" xml:space="preserve">
          <source>In case the input is optional you may also want to add a &lt;a href=&quot;#default&quot;&gt;default value filter&lt;/a&gt; in addition to the date validator to ensure empty input is stored as &lt;code&gt;null&lt;/code&gt;. Otherwise you may end up with dates like &lt;code&gt;0000-00-00&lt;/code&gt; in your database or &lt;code&gt;1970-01-01&lt;/code&gt; in the input field of a date picker.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7a62b57857fce24824ce67d2d705d7a4638c4b59" translate="yes" xml:space="preserve">
          <source>In case there is no exception in the component, treat as the action has been invoked not from error handler, but by direct route, so '404 Not Found' error will be displayed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eaabad93cc875ed73d4db3fe7213a9ced27c48d2" translate="yes" xml:space="preserve">
          <source>In case when the automatic pluralization does not meet your requirement, you may also configure the &lt;a href=&quot;yii-rest-urlrule#%24controller-detail&quot;&gt;yii\rest\UrlRule::$controller&lt;/a&gt; property to explicitly specify how to map a name used in endpoint URLs to a controller ID. For example, the following code maps the name &lt;code&gt;u&lt;/code&gt; to the controller ID &lt;code&gt;user&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="48bf1ba46f667eb9a012fda9dc211446b54a6b72" translate="yes" xml:space="preserve">
          <source>In case you do not use the Yii autoloader, the Composer autoloader can still autoload extension classes for you.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c6d00d465c4acbcf00323e2f2c63667612e6d0e3" translate="yes" xml:space="preserve">
          <source>In case you need just an opening or closing tag, you can use the &lt;code&gt;Html::beginTag()&lt;/code&gt; and &lt;code&gt;Html::endTag()&lt;/code&gt; methods.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="00f830d0b7596fcb1c0cd6d3e1fc337869d97177" translate="yes" xml:space="preserve">
          <source>In case you need permissions hierarchy to be formed dynamically you need a UI or a console command. API used to build the hierarchy itself won't be different.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6d5db19d05fdac2d3a12405b342322a54c0c4d8b" translate="yes" xml:space="preserve">
          <source>In case you use an &lt;a href=&quot;yii-db-expression&quot;&gt;yii\db\Expression&lt;/a&gt; object as in the example above, the attribute will not hold the timestamp value, but the Expression object itself after the record has been saved. If you need the value from DB afterwards you should call the &lt;a href=&quot;yii-db-baseactiverecord#refresh()-detail&quot;&gt;refresh()&lt;/a&gt; method of the record.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2977971cc385b42b9e37d10b995aac7cc37c6fcf" translate="yes" xml:space="preserve">
          <source>In case you want to break the convention as described above, you may configure the &lt;a href=&quot;#controllerMap&quot;&gt;controllerMap&lt;/a&gt; property.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5f7b7ba1b4cc2d45f36a4e78bddc7b63ad9e1add" translate="yes" xml:space="preserve">
          <source>In case you want to get the value and then immediately remove it from array you can use &lt;code&gt;remove&lt;/code&gt; method:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d07a26e9cdda2d886061e951566fd2d2d3d86319" translate="yes" xml:space="preserve">
          <source>In case, when the &lt;a href=&quot;yii-behaviors-blameablebehavior#%24value-detail&quot;&gt;$value&lt;/a&gt; property is &lt;code&gt;null&lt;/code&gt;, the value of &lt;code&gt;Yii::$app-&amp;gt;user-&amp;gt;id&lt;/code&gt; will be used as the value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d14a4bb43947d1b412fc5b1bd50ff4c675cf554d" translate="yes" xml:space="preserve">
          <source>In case, when the &lt;a href=&quot;yii-behaviors-timestampbehavior#%24value-detail&quot;&gt;$value&lt;/a&gt; is &lt;code&gt;null&lt;/code&gt;, the result of the PHP function &lt;a href=&quot;http://php.net/manual/en/function.time.php&quot;&gt;time()&lt;/a&gt; will be used as value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="526054892fd32fe87d7f7de2e41a85c0aa4be415" translate="yes" xml:space="preserve">
          <source>In case, when the property is &lt;code&gt;null&lt;/code&gt;, the value of &lt;code&gt;Yii::$app-&amp;gt;user-&amp;gt;id&lt;/code&gt; will be used as the value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9564171aca75e76624dc565ca06192455459af18" translate="yes" xml:space="preserve">
          <source>In case, when the value is &lt;code&gt;null&lt;/code&gt;, the result of the PHP function &lt;a href=&quot;http://php.net/manual/en/function.time.php&quot;&gt;time()&lt;/a&gt; will be used as value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9749a54364ea6fe5c6022ef4bd789bcf6fb12750" translate="yes" xml:space="preserve">
          <source>In classes which use service locator to obtain dependent objects.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a28f37f1c5783111edd24e61758b73478c8a9e4e" translate="yes" xml:space="preserve">
          <source>In conjunction with &lt;a href=&quot;yii-sphinx-matchbuilder&quot;&gt;yii\sphinx\MatchBuilder&lt;/a&gt; this class provides ability to build sophisticated MATCH expressions. Instance of this class can be passed to &lt;a href=&quot;yii-sphinx-query#match()-detail&quot;&gt;yii\sphinx\Query::match()&lt;/a&gt;. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4e6a44c798c65c94fe27655e06212cb6fd0197bb" translate="yes" xml:space="preserve">
          <source>In contrast to the single model forms explained before, we are working with an array of models now. This array is passed to the view to display the input fields for each model in a table like style and we will use helper methods of &lt;a href=&quot;yii-base-model&quot;&gt;yii\base\Model&lt;/a&gt; that allow loading and validating multiple models at once:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="21c81d733976c0e859768c7761a3a5754aabe5c1" translate="yes" xml:space="preserve">
          <source>In database modelling, when the multiplicity between two related tables is many-to-many, a &lt;a href=&quot;https://en.wikipedia.org/wiki/Junction_table&quot;&gt;junction table&lt;/a&gt; is usually introduced. For example, the &lt;code&gt;order&lt;/code&gt; table and the &lt;code&gt;item&lt;/code&gt; table may be related via a junction table named &lt;code&gt;order_item&lt;/code&gt;. One order will then correspond to multiple order items, while one product item will also correspond to multiple order items.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f2c03dffbf661b3707cfb1ab25115b89be06fc51" translate="yes" xml:space="preserve">
          <source>In debug mode Yii shows quite verbose errors which are certainly helpful for development. The thing is that these verbose errors are handy for attacker as well since these could reveal database structure, configuration values and parts of your code. Never run production applications with &lt;code&gt;YII_DEBUG&lt;/code&gt; set to &lt;code&gt;true&lt;/code&gt; in your &lt;code&gt;index.php&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f6476bed2efb8416e1f88656caa94a2df20ce1e5" translate="yes" xml:space="preserve">
          <source>In each &lt;a href=&quot;guide-structure-applications&quot;&gt;application&lt;/a&gt; or &lt;a href=&quot;guide-structure-modules&quot;&gt;module&lt;/a&gt; that uses a model, define a concrete model class by extending from the corresponding base model class. The concrete model classes should contain rules and logic that are specific for that application or module.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9191020487ad3c1c36bba5781eeaa2c2ea995540" translate="yes" xml:space="preserve">
          <source>In each element, the key is one of the ciphers supported by OpenSSL (@see openssl_get_cipher_methods()). The value is an array of two integers, the first is the cipher's block size in bytes and the second is the key size in bytes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="943aa28d921b00f4501d3a1aefac536b80c7cc7c" translate="yes" xml:space="preserve">
          <source>In general, to load migrations from different locations, &lt;a href=&quot;yii-console-controllers-basemigratecontroller#%24migrationNamespaces-detail&quot;&gt;$migrationNamespaces&lt;/a&gt; is the preferable solution as the migration name contains the origin of the migration in the history, which is not the case when using multiple migration paths.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6dd2878d7d38e6005c4b2ddbc596fb6d9bf2e492" translate="yes" xml:space="preserve">
          <source>In most cases you should mainly deal with the &lt;code&gt;response&lt;/code&gt;&lt;a href=&quot;guide-structure-application-components&quot;&gt;application component&lt;/a&gt; which is an instance of &lt;a href=&quot;yii-web-response&quot;&gt;yii\web\Response&lt;/a&gt;, by default. However, Yii also allows you to create your own response objects and send them to end users as we will explain in the following.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7c39c0e0a62be9ff367056f057942d4b243801d6" translate="yes" xml:space="preserve">
          <source>In oder to acquire access token perform following sequence:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7dfbc915ac708c96111ef4645795b450aeba23f1" translate="yes" xml:space="preserve">
          <source>In order for content to be displayed properly and securely in HTML, special characters in the content should be encoded. In PHP this is done with &lt;a href=&quot;http://www.php.net/manual/en/function.htmlspecialchars.php&quot;&gt;htmlspecialchars&lt;/a&gt; and &lt;a href=&quot;http://www.php.net/manual/en/function.htmlspecialchars-decode.php&quot;&gt;htmlspecialchars_decode&lt;/a&gt;. The issue with using these methods directly is that you have to specify encoding and extra flags all the time. Since these flags are the same all the time and the encoding should match the one of the application in order to prevent security issues, Yii provides two compact and simple-to-use methods:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="de775412071f9c20514e596d5ac2742225c85839" translate="yes" xml:space="preserve">
          <source>In order for the command line utility to see your commands, you will need to change the &lt;a href=&quot;yii-base-module#%24controllerNamespace-detail&quot;&gt;yii\base\Module::$controllerNamespace&lt;/a&gt; property, when Yii is executed in the console mode, and point it to your commands namespace.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="223a733e50855645d206d75e30009ecec04a494a" translate="yes" xml:space="preserve">
          <source>In order for your classes to be autoloaded by the Yii class autoloader or the Composer class autoloader, you should specify the &lt;code&gt;autoload&lt;/code&gt; entry in the &lt;code&gt;composer.json&lt;/code&gt; file, like shown below:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7b9a72656a0c3e94933c931a20d4250ae3b56ab9" translate="yes" xml:space="preserve">
          <source>In order to access server from remote machines use 0.0.0.0:8000. That is especially useful when running server in a virtual machine.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="237b10302060d386286ebb41982352399dc836c5" translate="yes" xml:space="preserve">
          <source>In order to acquire access token perform following sequence:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eb0ef91de056ce90c7a709745fbc53b0cb04ead3" translate="yes" xml:space="preserve">
          <source>In order to add hash to all links use &lt;code&gt;array_merge($_GET, ['#' =&amp;gt; 'my-hash'])&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e8bb3b39b17a730be5838452811e8932c7e28363" translate="yes" xml:space="preserve">
          <source>In order to avoid CSRF you should always:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9f7fe63f8a92b1bbe95650e847e93f1f6f78f73e" translate="yes" xml:space="preserve">
          <source>In order to build a map (key-value pairs) from a multidimensional array or an array of objects you can use &lt;code&gt;map&lt;/code&gt; method. The &lt;code&gt;$from&lt;/code&gt; and &lt;code&gt;$to&lt;/code&gt; parameters specify the key names or property names to set up the map. Optionally, one can further group the map according to a grouping field &lt;code&gt;$group&lt;/code&gt;. For example,</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5c6f8f27a6760964e4cd9f17ee909090deef18ab" translate="yes" xml:space="preserve">
          <source>In order to catch logs written by this class, you need to setup a log route for 'yii\swiftmailer\Logger::add' category. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="532468d261862f09dde4c5f58f7aebedd1786f90" translate="yes" xml:space="preserve">
          <source>In order to check if a user can update a post, we need to pass an extra parameter that is required by &lt;code&gt;AuthorRule&lt;/code&gt; described before:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9478d992d55e8b2e3148a336d2f884dcb660089f" translate="yes" xml:space="preserve">
          <source>In order to compose message content via view file simply pass view name to the &lt;code&gt;compose()&lt;/code&gt; method:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1943811e5349383b3acc9d54937cd8ffdbfd5747" translate="yes" xml:space="preserve">
          <source>In order to create a URL to a given route use the &lt;code&gt;Url::toRoute()&lt;/code&gt; method. The method uses &lt;a href=&quot;yii-web-urlmanager&quot;&gt;yii\web\UrlManager&lt;/a&gt; to create a URL:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="205bf34fb5e393be1b1a52ddab72aab973b52595" translate="yes" xml:space="preserve">
          <source>In order to create a form element in the form, along with the element's label, and any applicable JavaScript validation, the &lt;a href=&quot;yii-widgets-activeform#field()-detail&quot;&gt;ActiveForm::field()&lt;/a&gt; method is called, which returns an instance of &lt;a href=&quot;yii-widgets-activefield&quot;&gt;yii\widgets\ActiveField&lt;/a&gt;. When the result of this method is echoed directly, the result is a regular (text) input. To customize the output, you can chain additional methods of &lt;a href=&quot;yii-widgets-activefield&quot;&gt;ActiveField&lt;/a&gt; to this call:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="59a7f8340a18d3106127ee372ea417327d5ecb11" translate="yes" xml:space="preserve">
          <source>In order to create your own custom mail solution, you need to create 2 classes: one for the &lt;code&gt;Mailer&lt;/code&gt; and another one for the &lt;code&gt;Message&lt;/code&gt;. You can use &lt;code&gt;yii\mail\BaseMailer&lt;/code&gt; and &lt;code&gt;yii\mail\BaseMessage&lt;/code&gt; as the base classes for your solution. These classes already contain the basic logic, which is described in this guide. However, their usage is not mandatory, it is enough to implement &lt;code&gt;yii\mail\MailerInterface&lt;/code&gt; and &lt;code&gt;yii\mail\MessageInterface&lt;/code&gt; interfaces. Then you need to implement all the abstract methods to build your solution.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9ba710a4251d38c946f9e6b5cfc456507763dab7" translate="yes" xml:space="preserve">
          <source>In order to display form errors from a model or models as a summary, you could use:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a76c921f704b6e4916193f4009429fc0fc00bc72" translate="yes" xml:space="preserve">
          <source>In order to enable cookie-based login, you need to configure &lt;a href=&quot;yii-web-user#%24enableAutoLogin-detail&quot;&gt;yii\web\User::$enableAutoLogin&lt;/a&gt; to be &lt;code&gt;true&lt;/code&gt; in the application configuration. You also need to provide a duration time parameter when calling the &lt;a href=&quot;yii-web-user#login()-detail&quot;&gt;yii\web\User::login()&lt;/a&gt; method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a3d3196e1aa838b941845ee2fe6c315bdb0acfac" translate="yes" xml:space="preserve">
          <source>In order to enable this command you should adjust the configuration of your console application:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0f567bfe6a52c32cfdda3ce9e688431db0552980" translate="yes" xml:space="preserve">
          <source>In order to enable this parser you should configure &lt;a href=&quot;yii-web-request#%24parsers-detail&quot;&gt;yii\web\Request::$parsers&lt;/a&gt; in the following way:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="75e77e1f49c52febe0442d63e1b6ac0342bb11a6" translate="yes" xml:space="preserve">
          <source>In order to encode or decode special characters in an array of strings into HTML entities you can use the following:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="95c509395307e548e7fb57fa34c4904374080b8a" translate="yes" xml:space="preserve">
          <source>In order to ensure the above life cycles, if a child class of Object needs to override the constructor, it should be done like the following:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a99e8065744f9d2153d11083e290e5b89090d120" translate="yes" xml:space="preserve">
          <source>In order to generate a namespaced migration, you should specify a namespace before the migration's name. Note that backslash (&lt;code&gt;\&lt;/code&gt;) is usually considered a special character in the shell, so you need to escape it properly to avoid shell errors or incorrect behavior. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="40714802db4ad8dd55fad1e51be288ae9f84940a" translate="yes" xml:space="preserve">
          <source>In order to generate an image tag, use the following:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="51028e7f8369a624bd567b83f02efaefb9f0b169" translate="yes" xml:space="preserve">
          <source>In order to generate buttons, you can use the following code:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="429db4c04ca41454c5225407eba386dba119684d" translate="yes" xml:space="preserve">
          <source>In order to get ordered list, use &lt;code&gt;Html::ol()&lt;/code&gt; instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aebe343be8ed8922ba43fdbc487945fdaf835974" translate="yes" xml:space="preserve">
          <source>In order to get the attribute name without suffixes or prefixes, one can use the following:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="48e24505352b3b8e1745343538d99deacc73164f" translate="yes" xml:space="preserve">
          <source>In order to index an array according to a specified key, the &lt;code&gt;index&lt;/code&gt; method can be used. The input should be either multidimensional array or an array of objects. The &lt;code&gt;$key&lt;/code&gt; can be either a key name of the sub-array, a property name of object, or an anonymous function that must return the value that will be used as a key.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8b4ec312165f3e9a304f2ff73d3818ed2e5992ac" translate="yes" xml:space="preserve">
          <source>In order to perform &quot;find&quot; queries use &lt;a href=&quot;yii-mongodb-file-query&quot;&gt;yii\mongodb\file\Query&lt;/a&gt; class.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="59c8918b05350f0ee10ab16169e9539098c71a16" translate="yes" xml:space="preserve">
          <source>In order to perform &quot;find&quot; queries use &lt;a href=&quot;yii-mongodb-query&quot;&gt;yii\mongodb\Query&lt;/a&gt; class.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bcfca2d3f7f9e1584749a3e58ee0618f650287e5" translate="yes" xml:space="preserve">
          <source>In order to provide increased security for user passwords, even in the worst case scenario (your application is breached), you need to use a hashing algorithm that is resilient against brute force attacks. The best current choice is &lt;code&gt;bcrypt&lt;/code&gt;. In PHP, you can create a &lt;code&gt;bcrypt&lt;/code&gt; hash using the &lt;a href=&quot;http://php.net/manual/en/function.crypt.php&quot;&gt;crypt function&lt;/a&gt;. Yii provides two helper functions which make using &lt;code&gt;crypt&lt;/code&gt; to securely generate and verify hashes easier.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="551eb9be6a321036a10f20511e3a53e143c556b6" translate="yes" xml:space="preserve">
          <source>In order to run Yii, your webserver must meet its requirements. The very minimum requirement is PHP 5.4. In order to check the requirements copy &lt;code&gt;requirements.php&lt;/code&gt; from your root directory into the webroot directory and run it via browser using &lt;code&gt;http://example.com/requirements.php&lt;/code&gt; URL. Don't forget to delete the file afterwards.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b00cce8aef0e2c6851c7189dd5989555ddf4021b" translate="yes" xml:space="preserve">
          <source>In order to setup Sphinx &quot;searchd&quot; to support MySQL protocol following configuration should be added:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f6133ca192354c0e131ed1c794a686c48ed7e0dd" translate="yes" xml:space="preserve">
          <source>In order to theme modules, &lt;a href=&quot;yii-base-theme#%24pathMap-detail&quot;&gt;yii\base\Theme::$pathMap&lt;/a&gt; can be configured like the following:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a710788aa13f189276cb2a9a7f5410a30b5ca017" translate="yes" xml:space="preserve">
          <source>In order to theme widgets, you can configure &lt;a href=&quot;yii-base-theme#%24pathMap-detail&quot;&gt;yii\base\Theme::$pathMap&lt;/a&gt; in the following way:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8ce27104e11d931a6691a80c425ae98e20fe3ffa" translate="yes" xml:space="preserve">
          <source>In order to use Facebook OAuth you must register your application at &lt;a href=&quot;https://developers.facebook.com/apps&quot;&gt;https://developers.facebook.com/apps&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="37aee35b502e65c15cd467eec8f3af7e8d304237" translate="yes" xml:space="preserve">
          <source>In order to use GitHub OAuth you must register your application at &lt;a href=&quot;https://github.com/settings/applications/new&quot;&gt;https://github.com/settings/applications/new&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8b9dfb8de106378a14ebc735283dc1490d42850d" translate="yes" xml:space="preserve">
          <source>In order to use Google OAuth you must create a project at &lt;a href=&quot;https://console.developers.google.com/project&quot;&gt;https://console.developers.google.com/project&lt;/a&gt; and setup its credentials at https://console.developers.google.com/project/[yourProjectId]/apiui/credential. In order to enable using scopes for retrieving user attributes, you should also enable Google+ API at https://console.developers.google.com/project/[yourProjectId]/apiui/api/plus</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6a0c5470f29449b1d799f1f989a2750c53e9170f" translate="yes" xml:space="preserve">
          <source>In order to use Microsoft Live OAuth you must register your application at &lt;a href=&quot;https://account.live.com/developers/applications&quot;&gt;https://account.live.com/developers/applications&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7b4a065e9f223269d86e3e030a91c75d11657c2a" translate="yes" xml:space="preserve">
          <source>In order to use Twitter OAuth you must register your application at &lt;a href=&quot;https://dev.twitter.com/apps/new&quot;&gt;https://dev.twitter.com/apps/new&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="19214c5bb0b0f85974868e73873ffa04d35f752c" translate="yes" xml:space="preserve">
          <source>In order to use VKontakte OAuth you must register your application at &lt;a href=&quot;http://vk.com/editapp?act=create&quot;&gt;http://vk.com/editapp?act=create&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d5a88e41c598b6680378cd0d6034da6c8b43c482" translate="yes" xml:space="preserve">
          <source>In order to use Yandex OAuth you must register your application at &lt;a href=&quot;https://oauth.yandex.ru/client/new&quot;&gt;https://oauth.yandex.ru/client/new&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0c82ae15a36d8819e26fe9ee26b31e6fe1622bb0" translate="yes" xml:space="preserve">
          <source>In order to use linkedIn OAuth you must register your application at &lt;a href=&quot;https://www.linkedin.com/secure/developer&quot;&gt;https://www.linkedin.com/secure/developer&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="de37b0661b2941b5f47798772a08d71eedec623f" translate="yes" xml:space="preserve">
          <source>In other places, if you want to send out the &quot;Location&quot; header immediately, you should use the following code:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fb537221d2c1614f92fb897d078fe4c7c6b3c556" translate="yes" xml:space="preserve">
          <source>In particular, Security supports the following features:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2bbde8db494df90be702d5b5d346c75616dab39f" translate="yes" xml:space="preserve">
          <source>In places other than an action method, you should call &lt;a href=&quot;yii-web-response#redirect()-detail&quot;&gt;yii\web\Response::redirect()&lt;/a&gt; directly followed by a chained call to the &lt;a href=&quot;yii-web-response#send()-detail&quot;&gt;yii\web\Response::send()&lt;/a&gt; method to ensure no extra content will be appended to the response.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1fbdc15fb21ded0a3a54bf98d1312a1f30e24c1e" translate="yes" xml:space="preserve">
          <source>In practice, you usually want to enable pretty URLs and take advantage of HTTP verbs. For example, a request &lt;code&gt;POST /users&lt;/code&gt; would mean accessing the &lt;code&gt;user/create&lt;/code&gt; action. This can be done easily by configuring the &lt;code&gt;urlManager&lt;/code&gt;&lt;a href=&quot;guide-structure-application-components&quot;&gt;application component&lt;/a&gt; in the application configuration like the following:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a610654095da50b607045621c707cae0689602d0" translate="yes" xml:space="preserve">
          <source>In production mode, enable a bytecode cache, such as &lt;a href=&quot;http://php.net/manual/en/intro.opcache.php&quot;&gt;PHP OPcache&lt;/a&gt; or &lt;a href=&quot;http://php.net/manual/en/book.apc.php&quot;&gt;APC&lt;/a&gt;, to minimize the time needed for including and parsing PHP files.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ef9067f0e8276f31c8e8537f005de545bcc6ff0c" translate="yes" xml:space="preserve">
          <source>In relational context ActiveQuery represents a relation between two Active Record classes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="91fba3216272f1517910651b76fc3094fe4c7e95" translate="yes" xml:space="preserve">
          <source>In some cases any form of automated testing could be overkill:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="09ec95920ff23b38ff29ba5af603a969840f9a11" translate="yes" xml:space="preserve">
          <source>In some rare occasions, you may want to install some or all extensions manually, rather than relying on Composer. To do so, you should:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3ea81eac69c47ebc18ea5dc5ebea45220554b17b" translate="yes" xml:space="preserve">
          <source>In some scenarios, to ensure data consistency, you may want to enclose some or all of them in transactions. You can do so by overriding this method and returning the operations that need to be transactional. For example,</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3ed8a59a56249cf24f13e7ffcf67fc4dcffea023" translate="yes" xml:space="preserve">
          <source>In summary, models</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="61a2e894a6164c1560b05ee22a2faf1053a05402" translate="yes" xml:space="preserve">
          <source>In the &lt;a href=&quot;guide-output-pagination&quot;&gt;Pagination&lt;/a&gt; and &lt;a href=&quot;guide-output-sorting&quot;&gt;Sorting&lt;/a&gt; sections, we have described how to allow end users to choose a particular page of data to display and sort them by some columns. Because the task of paginating and sorting data is very common, Yii provides a set of &lt;em&gt;data provider&lt;/em&gt; classes to encapsulate it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="48ee1e4e346026fc9e757bff8e6e6cdaa606fd0e" translate="yes" xml:space="preserve">
          <source>In the &lt;a href=&quot;guide-structure-entry-scripts&quot;&gt;entry script&lt;/a&gt;, class autoloaders for different libraries are registered. This includes the Composer autoloader through its &lt;code&gt;autoload.php&lt;/code&gt; file and the Yii autoloader through its &lt;code&gt;Yii&lt;/code&gt; class file. The entry script then loads the application &lt;a href=&quot;guide-concept-configurations&quot;&gt;configuration&lt;/a&gt; and creates an &lt;a href=&quot;guide-structure-applications&quot;&gt;application&lt;/a&gt; instance.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="77e3595c24ae1d4de4f6354d101786dd64c6a0fd" translate="yes" xml:space="preserve">
          <source>In the &lt;a href=&quot;https://github.com/yiisoft/yii2-app-advanced/blob/master/docs/guide/README.md&quot;&gt;Advanced Project Template&lt;/a&gt;, each tier has its own root alias. For example, the front-end tier has a root alias &lt;code&gt;@frontend&lt;/code&gt;, while the back-end tier root alias is &lt;code&gt;@backend&lt;/code&gt;. As a result, you may put the front-end classes under the namespace &lt;code&gt;frontend&lt;/code&gt; while the back-end classes are under &lt;code&gt;backend&lt;/code&gt;. This will allow these classes to be autoloaded by the Yii autoloader.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cccdafc371d04e0912238d3b7289c362d079b412" translate="yes" xml:space="preserve">
          <source>In the &lt;code&gt;composer.json&lt;/code&gt; of your project, add the following lines:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c9d3dd633c3452ece02051a45be5a07698138947" translate="yes" xml:space="preserve">
          <source>In the &lt;code&gt;create&lt;/code&gt; action (defined by the &lt;code&gt;actionCreate()&lt;/code&gt; method), the code is similar. It first tries to populate a new instance of the &lt;a href=&quot;guide-structure-models&quot;&gt;model&lt;/a&gt; using the request data and save the model. If both succeed it will redirect the browser to the &lt;code&gt;view&lt;/code&gt; action with the ID of the newly created model. Otherwise it will display the &lt;code&gt;create&lt;/code&gt; view through which users can provide the needed input.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d937606db7a455e2bb87dcde4e18035a444b3d63" translate="yes" xml:space="preserve">
          <source>In the &lt;code&gt;update&lt;/code&gt; action, we first load the &lt;code&gt;$user&lt;/code&gt; and &lt;code&gt;$profile&lt;/code&gt; models to be updated from the database. We then call &lt;a href=&quot;yii-base-model#load()-detail&quot;&gt;yii\base\Model::load()&lt;/a&gt; to populate these two models with the user input. If loading is successful, we will validate the two models and then save them &amp;mdash; please note that we use &lt;code&gt;save(false)&lt;/code&gt; to skip over validations inside the models as the user input data have already been validated. If loading is not successful, we will render the &lt;code&gt;update&lt;/code&gt; view which has the following content:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="abb70b6b8810a76c79b24275d41e814fa1614c65" translate="yes" xml:space="preserve">
          <source>In the &lt;code&gt;view&lt;/code&gt; action (defined by the &lt;code&gt;actionView()&lt;/code&gt; method), the code first loads the &lt;a href=&quot;guide-structure-models&quot;&gt;model&lt;/a&gt; according to the requested model ID; If the model is loaded successfully, it will display it using a &lt;a href=&quot;guide-structure-views&quot;&gt;view&lt;/a&gt; named &lt;code&gt;view&lt;/code&gt;. Otherwise, it will throw an exception.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="38741ea73b0ac314976a3a1c53ba3a0b26fa8acf" translate="yes" xml:space="preserve">
          <source>In the SQL statement, you can embed one or multiple parameter placeholders (e.g. &lt;code&gt;:id&lt;/code&gt; in the above example). A parameter placeholder should be a string starting with a colon. You may then call one of the following parameter binding methods to bind the parameter values:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9b817ffd564bb4dc6ff99c9eff425cc1b63e04f7" translate="yes" xml:space="preserve">
          <source>In the Web form that collects the user input, add a hidden field that stores the lock version of the recording being updated.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a6e413a8811435732fdc1f5d13e97397205f6e39" translate="yes" xml:space="preserve">
          <source>In the Web form that takes user inputs, add a hidden field to store the current version number of the row being updated. Be sure your version attribute has input validation rules and validates successfully.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="92a0f38a4d2046996a85f125b92cd25b82aaa4fa" translate="yes" xml:space="preserve">
          <source>In the above &lt;code&gt;$attribute&lt;/code&gt; refers to the attribute currently being validated while &lt;code&gt;$params&lt;/code&gt; contains an array of validator configuration options such as &lt;code&gt;max&lt;/code&gt; in case of &lt;code&gt;string&lt;/code&gt; validator. The value of the attribute currently being validated can be accessed as &lt;code&gt;$this-&amp;gt;$attribute&lt;/code&gt;. Note the &lt;code&gt;$&lt;/code&gt; before &lt;code&gt;attribute&lt;/code&gt;; this is taking the value of the variable &lt;code&gt;$attribute&lt;/code&gt; and using it as the name of the property to access.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ee29e244aa41f83a1f032e5e3ffd0a11ce8e58bd" translate="yes" xml:space="preserve">
          <source>In the above &lt;code&gt;mailer&lt;/code&gt; is ID of the component that sends email and should be already configured.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="468a966a350a2c46623415d1c74ea08b02a9c077" translate="yes" xml:space="preserve">
          <source>In the above code, &lt;a href=&quot;yii-base-widget#begin()-detail&quot;&gt;ActiveForm::begin()&lt;/a&gt; not only creates a form instance, but also marks the beginning of the form. All of the content placed between &lt;a href=&quot;yii-base-widget#begin()-detail&quot;&gt;ActiveForm::begin()&lt;/a&gt; and &lt;a href=&quot;yii-base-widget#end()-detail&quot;&gt;ActiveForm::end()&lt;/a&gt; will be wrapped within the HTML &lt;code&gt;&amp;lt;form&amp;gt;&lt;/code&gt; tag. As with any widget, you can specify some options as to how the widget should be configured by passing an array to the &lt;code&gt;begin&lt;/code&gt; method. In this case, an extra CSS class and identifying ID are passed to be used in the opening &lt;code&gt;&amp;lt;form&amp;gt;&lt;/code&gt; tag. For all available options, please refer to the API documentation of &lt;a href=&quot;yii-widgets-activeform&quot;&gt;yii\widgets\ActiveForm&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aecd6b07c362c37a4a41f804d85cc593aa548092" translate="yes" xml:space="preserve">
          <source>In the above code, a message source supported by &lt;a href=&quot;yii-i18n-phpmessagesource&quot;&gt;yii\i18n\PhpMessageSource&lt;/a&gt; is being configured.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="06c11d2674ddaa447071f06b82909700160d299e" translate="yes" xml:space="preserve">
          <source>In the above code, in the context of a view file, the &lt;code&gt;AppAsset&lt;/code&gt; bundle is registered on the current view (represented by &lt;code&gt;$this&lt;/code&gt;). When registering asset bundles from within a widget, you would pass the &lt;a href=&quot;yii-base-widget#%24view-detail&quot;&gt;$view&lt;/a&gt; of the widget instead (&lt;code&gt;$this-&amp;gt;view&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="47980e038a276420642b24d2763eecc4cb20ef1e" translate="yes" xml:space="preserve">
          <source>In the above code, the action method returns the result of the &lt;code&gt;redirect()&lt;/code&gt; method. As explained before, the response object returned by an action method will be used as the response sending to end users.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d5e58f85f4445c478e50307b833ef852f842dc29" translate="yes" xml:space="preserve">
          <source>In the above code, the array keys are column names while the array values are the corresponding order by directions. The PHP constant &lt;code&gt;SORT_ASC&lt;/code&gt; specifies ascending sort and &lt;code&gt;SORT_DESC&lt;/code&gt; descending sort.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6465f501e9a43adc22b5ea2a23b8faee05dfcaa2" translate="yes" xml:space="preserve">
          <source>In the above code, two log targets are registered in the &lt;a href=&quot;yii-log-dispatcher#%24targets-detail&quot;&gt;yii\log\Dispatcher::$targets&lt;/a&gt; property:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1177a53bf1566d73d8297f0378bbb0c3a2f7fd89" translate="yes" xml:space="preserve">
          <source>In the above code, we have declared an &lt;code&gt;orders&lt;/code&gt; relation for the &lt;code&gt;Customer&lt;/code&gt; class, and a &lt;code&gt;customer&lt;/code&gt; relation for the &lt;code&gt;Order&lt;/code&gt; class.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7a5ebc97c6876660b07545f44b5d99da277f6373" translate="yes" xml:space="preserve">
          <source>In the above code, when the form is submitted, the &lt;a href=&quot;yii-web-uploadedfile#getInstance()-detail&quot;&gt;yii\web\UploadedFile::getInstance()&lt;/a&gt; method is called to represent the uploaded file as an &lt;code&gt;UploadedFile&lt;/code&gt; instance. We then rely on the model validation to make sure the uploaded file is valid and save the file on the server.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="817ab8597a650262634bfec9b1d2bd4b35e7ce3f" translate="yes" xml:space="preserve">
          <source>In the above example the method &lt;code&gt;compose()&lt;/code&gt; creates an instance of the mail message, which then is populated and sent. You may put more complex logic in this process if needed:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="60c490d6ea2de69fb4645106ce917af1ed70c92a" translate="yes" xml:space="preserve">
          <source>In the above example, &lt;a href=&quot;yii-filters-accessrule#%24roleParams-detail&quot;&gt;roleParams&lt;/a&gt; is a Closure that will be evaluated when the access rule is checked, so the model will only be loaded when needed. If the creation of role parameters is a simple operation, you may just specify an array, like so:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9c07ebedbca92612df62e48e0250c344a54260b7" translate="yes" xml:space="preserve">
          <source>In the above example, because you provide to &lt;a href=&quot;yii-data-activedataprovider&quot;&gt;yii\data\ActiveDataProvider&lt;/a&gt; an &lt;a href=&quot;yii-db-activequery&quot;&gt;yii\db\ActiveQuery&lt;/a&gt; object, it is intelligent enough to return primary key values as the keys. You may also explicitly specify how the key values should be calculated by configuring &lt;a href=&quot;yii-data-activedataprovider#%24key-detail&quot;&gt;yii\data\ActiveDataProvider::$key&lt;/a&gt; with a column name or a callable calculating key values. For example,</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="72086c9910dd67f6c856d8e8f1850e851d969ab7" translate="yes" xml:space="preserve">
          <source>In the above example, no parameters are passed with the roles specified for accessing an action, but in case of the &lt;code&gt;updatePost&lt;/code&gt; permission, we need to pass a &lt;code&gt;post&lt;/code&gt; parameter for it to work properly. You can pass parameters to &lt;a href=&quot;yii-web-user#can()-detail&quot;&gt;yii\web\User::can()&lt;/a&gt; by specifying &lt;a href=&quot;yii-filters-accessrule#%24roleParams-detail&quot;&gt;roleParams&lt;/a&gt; on the access rule:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6c78c95f5b923119ce871df7a517ee3991bbcd40" translate="yes" xml:space="preserve">
          <source>In the above example, the category &lt;code&gt;app/error&lt;/code&gt; is mapped to the PHP file &lt;code&gt;@app/messages/ru-RU/error.php&lt;/code&gt; (assuming &lt;code&gt;ru-RU&lt;/code&gt; is the target language). However, without this configuration the category would be mapped to &lt;code&gt;@app/messages/ru-RU/app/error.php&lt;/code&gt; instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f26e007eacc84b914e412c472dc2c19f2d4e6b88" translate="yes" xml:space="preserve">
          <source>In the above example, two attributes are declared for the &lt;a href=&quot;yii-data-sort&quot;&gt;Sort&lt;/a&gt; object: &lt;code&gt;age&lt;/code&gt; and &lt;code&gt;name&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="177e373efcb93ee3d29013397019cccb45a864b0" translate="yes" xml:space="preserve">
          <source>In the above step 1 and 3, events named &lt;a href=&quot;yii-db-baseactiverecord#EVENT_BEFORE_DELETE-detail&quot;&gt;EVENT_BEFORE_DELETE&lt;/a&gt; and &lt;a href=&quot;yii-db-baseactiverecord#EVENT_AFTER_DELETE-detail&quot;&gt;EVENT_AFTER_DELETE&lt;/a&gt; will be raised by the corresponding methods.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="28a44c7ea3ef235cbcd6d073a45e7541ff9d79f8" translate="yes" xml:space="preserve">
          <source>In the above step 1, 2, 3 and 5, events &lt;a href=&quot;yii-base-model#EVENT_BEFORE_VALIDATE-detail&quot;&gt;EVENT_BEFORE_VALIDATE&lt;/a&gt;, &lt;a href=&quot;yii-base-model#EVENT_AFTER_VALIDATE-detail&quot;&gt;EVENT_AFTER_VALIDATE&lt;/a&gt;, &lt;a href=&quot;yii-db-baseactiverecord#EVENT_BEFORE_INSERT-detail&quot;&gt;EVENT_BEFORE_INSERT&lt;/a&gt;, and &lt;a href=&quot;yii-db-baseactiverecord#EVENT_AFTER_INSERT-detail&quot;&gt;EVENT_AFTER_INSERT&lt;/a&gt; will be raised by the corresponding methods.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4a0c5e3b1be87b1c782054438d67f072025ad539" translate="yes" xml:space="preserve">
          <source>In the above step 1, 2, 3 and 5, events &lt;a href=&quot;yii-base-model#EVENT_BEFORE_VALIDATE-detail&quot;&gt;EVENT_BEFORE_VALIDATE&lt;/a&gt;, &lt;a href=&quot;yii-base-model#EVENT_AFTER_VALIDATE-detail&quot;&gt;EVENT_AFTER_VALIDATE&lt;/a&gt;, &lt;a href=&quot;yii-db-baseactiverecord#EVENT_BEFORE_UPDATE-detail&quot;&gt;EVENT_BEFORE_UPDATE&lt;/a&gt;, and &lt;a href=&quot;yii-db-baseactiverecord#EVENT_AFTER_UPDATE-detail&quot;&gt;EVENT_AFTER_UPDATE&lt;/a&gt; will be raised by the corresponding methods.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="12e9a59d333bfe2b6a9e9f4df5571be4f4b28fa1" translate="yes" xml:space="preserve">
          <source>In the above step 1, 2, 3 and 5, events &lt;a href=&quot;yii-base-model#EVENT_BEFORE_VALIDATE-detail&quot;&gt;EVENT_BEFORE_VALIDATE&lt;/a&gt;, &lt;a href=&quot;yii-db-baseactiverecord#EVENT_BEFORE_INSERT-detail&quot;&gt;EVENT_BEFORE_INSERT&lt;/a&gt;, &lt;a href=&quot;yii-db-baseactiverecord#EVENT_AFTER_INSERT-detail&quot;&gt;EVENT_AFTER_INSERT&lt;/a&gt; and &lt;a href=&quot;yii-base-model#EVENT_AFTER_VALIDATE-detail&quot;&gt;EVENT_AFTER_VALIDATE&lt;/a&gt; will be raised by the corresponding methods.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6d19d8d8dd4d6d48e978523e03bb1023a3bee9c5" translate="yes" xml:space="preserve">
          <source>In the above step 1, 2, 3 and 5, events &lt;a href=&quot;yii-base-model#EVENT_BEFORE_VALIDATE-detail&quot;&gt;EVENT_BEFORE_VALIDATE&lt;/a&gt;, &lt;a href=&quot;yii-db-baseactiverecord#EVENT_BEFORE_UPDATE-detail&quot;&gt;EVENT_BEFORE_UPDATE&lt;/a&gt;, &lt;a href=&quot;yii-db-baseactiverecord#EVENT_AFTER_UPDATE-detail&quot;&gt;EVENT_AFTER_UPDATE&lt;/a&gt; and &lt;a href=&quot;yii-base-model#EVENT_AFTER_VALIDATE-detail&quot;&gt;EVENT_AFTER_VALIDATE&lt;/a&gt; will be raised by the corresponding methods.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f847f6d8632888c1c5ff2d0944391dbaf1a9939f" translate="yes" xml:space="preserve">
          <source>In the above, &lt;code&gt;$customer&lt;/code&gt; is a &lt;code&gt;Customer&lt;/code&gt; object while &lt;code&gt;$customers&lt;/code&gt; is an array of &lt;code&gt;Customer&lt;/code&gt; objects. They are all populated with the data retrieved from the &lt;code&gt;customer&lt;/code&gt; table.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f74bb67034e86890a2d422c3c96fe8fa856db298" translate="yes" xml:space="preserve">
          <source>In the above, &lt;code&gt;&amp;lt;route&amp;gt;&lt;/code&gt; refers to the route to the controller action. The options will populate the class properties and arguments are the parameters of the action method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1a7628f6d0a0c48d3ea61a8a3d25fdde1730a198" translate="yes" xml:space="preserve">
          <source>In the above, &lt;code&gt;text&lt;/code&gt; corresponds to &lt;a href=&quot;yii-i18n-formatter#asText()-detail&quot;&gt;yii\i18n\Formatter::asText()&lt;/a&gt;. The value of the column is passed as the first argument. In the second column definition, &lt;code&gt;date&lt;/code&gt; corresponds to &lt;a href=&quot;yii-i18n-formatter#asDate()-detail&quot;&gt;yii\i18n\Formatter::asDate()&lt;/a&gt;. The value of the column is, again, passed as the first argument while 'php:Y-m-d' is used as the second argument value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1cec26f1484115686c1c006e4ac6624ae20e5ade" translate="yes" xml:space="preserve">
          <source>In the above, &lt;code&gt;www&lt;/code&gt; is your webserver webroot directory. It could be named differently. Common names are: &lt;code&gt;www&lt;/code&gt;, &lt;code&gt;htdocs&lt;/code&gt;, and &lt;code&gt;public_html&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ef0b4ec31ea4811be604363ebf134034263baf6d" translate="yes" xml:space="preserve">
          <source>In the above, an anonymous function is attached to the &quot;update&quot; event of the post. You may attach the following types of event handlers:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9f81b5924ae8633ba936771163879bac06e1c572" translate="yes" xml:space="preserve">
          <source>In the above, both Step 2 and 3 occur at the end of the class constructor. It is recommended that you perform object initialization in the &lt;code&gt;init()&lt;/code&gt; method because at that stage, the object configuration is already applied.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3a865e97e29e600f5fb600a24b2e029e48fe4080" translate="yes" xml:space="preserve">
          <source>In the above, if the command name is not provided, all available commands will be displayed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3c3e7963a7dd4d40b6df5a3b76080a9721df058b" translate="yes" xml:space="preserve">
          <source>In the above, the &lt;code&gt;deferred&lt;/code&gt; variable is provided by Yii, which is an array of Deferred objects. The &lt;code&gt;$.get()&lt;/code&gt; jQuery method creates a Deferred object which is pushed to the &lt;code&gt;deferred&lt;/code&gt; array.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="41d890539b4bc592bd83034ef7d007fb18aed747" translate="yes" xml:space="preserve">
          <source>In the above, the first argument is the model, while the second one is the attribute expression. In its simplest form the expression is just an attribute name, but it can be an attribute name prefixed and/or suffixed with array indexes, which is mainly used for tabular input:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="18c50d5918e7e82b04c55c829b22ffe4502a7861" translate="yes" xml:space="preserve">
          <source>In the above, there is an alternative way to configure the &lt;code&gt;search&lt;/code&gt; component. Instead of directly writing a PHP callback which builds a &lt;code&gt;SolrService&lt;/code&gt; instance, you can use a static class method to return such a callback, like shown as below:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="81a6020d8ad894793a9f072d8598bc5cf6cec1a7" translate="yes" xml:space="preserve">
          <source>In the above, two attributes are declared: &lt;code&gt;age&lt;/code&gt; and &lt;code&gt;name&lt;/code&gt;. The &lt;code&gt;age&lt;/code&gt; attribute is a simple attribute which is equivalent to the following:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ed25307523e215dbfeb3bdb2d82f57dbf6ee70a7" translate="yes" xml:space="preserve">
          <source>In the above, two memcache servers are used: server1 and server2. You can configure more properties of each server, such as &lt;code&gt;persistent&lt;/code&gt;, &lt;code&gt;weight&lt;/code&gt;, &lt;code&gt;timeout&lt;/code&gt;. Please see &lt;a href=&quot;yii-caching-memcacheserver&quot;&gt;yii\caching\MemCacheServer&lt;/a&gt; for available options.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a56fa7a3535171f417cfb3fc8c7dd673c7076fd7" translate="yes" xml:space="preserve">
          <source>In the above, we declare two &lt;a href=&quot;yii-data-sort#%24attributes-detail&quot;&gt;$attributes&lt;/a&gt; that support sorting: &lt;code&gt;name&lt;/code&gt; and &lt;code&gt;age&lt;/code&gt;. We pass the sort information to the Article query so that the query results are sorted by the orders specified by the Sort object. In the view, we show two hyperlinks that can lead to pages with the data sorted by the corresponding attributes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2cacbaf14d669acabadd0db9aece91da9e0ce9c4" translate="yes" xml:space="preserve">
          <source>In the above, we have described how to define and use fixtures. Below we summarize the typical workflow of running unit tests related with DB:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="81ced116e0947fe97060e14e70a25c32de0343f8" translate="yes" xml:space="preserve">
          <source>In the above, we have shown how to define a fixture about a DB table. To define a fixture not related with DB (e.g. a fixture about certain files and directories), you may extend from the more general base class &lt;a href=&quot;yii-test-fixture&quot;&gt;yii\test\Fixture&lt;/a&gt; and override the &lt;a href=&quot;yii-test-fixture#load()-detail&quot;&gt;load()&lt;/a&gt; and &lt;a href=&quot;yii-test-fixture#unload()-detail&quot;&gt;unload()&lt;/a&gt; methods.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ddc41b8472e6c983809c0ebc64666cbc5076f64a" translate="yes" xml:space="preserve">
          <source>In the above, we specify the supported extended syntax via the &lt;a href=&quot;yii-web-assetconverter#%24commands-detail&quot;&gt;yii\web\AssetConverter::$commands&lt;/a&gt; property. The array keys are the file extension names (without leading dot), and the array values are the resulting asset file extension names and the commands for performing the asset conversion. The tokens &lt;code&gt;{from}&lt;/code&gt; and &lt;code&gt;{to}&lt;/code&gt; in the commands will be replaced with the source asset file paths and the target asset file paths.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="26ebeb4f72567e250bbe931dc04eafce66c1cb0c" translate="yes" xml:space="preserve">
          <source>In the code above &quot;users&quot; is template name, after this command run, new file named same as template will be created under the &lt;code&gt;$fixtureDataPath&lt;/code&gt; folder. You can generate fixtures for all templates, for example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="897bd332a9b46e74287f3d96b9c20447a13f4284" translate="yes" xml:space="preserve">
          <source>In the code above ACF is attached to the &lt;code&gt;site&lt;/code&gt; controller as a behavior. This is the typical way of using an action filter. The &lt;code&gt;only&lt;/code&gt; option specifies that the ACF should only be applied to the &lt;code&gt;login&lt;/code&gt;, &lt;code&gt;logout&lt;/code&gt; and &lt;code&gt;signup&lt;/code&gt; actions. All other actions in the &lt;code&gt;site&lt;/code&gt; controller are not subject to the access control. The &lt;code&gt;rules&lt;/code&gt; option lists the &lt;a href=&quot;yii-filters-accessrule&quot;&gt;access rules&lt;/a&gt;, which reads as follows:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8f79771a19a5d1563ceed68426976905ea509d12" translate="yes" xml:space="preserve">
          <source>In the code above we're using &lt;a href=&quot;yii-db-querytrait#indexBy()-detail&quot;&gt;indexBy()&lt;/a&gt; when retrieving models from the database to populate an array indexed by models primary keys. These will be later used to identify form fields. &lt;a href=&quot;yii-base-model#loadMultiple()-detail&quot;&gt;Model::loadMultiple()&lt;/a&gt; fills multiple models with the form data coming from POST and &lt;a href=&quot;yii-base-model#validateMultiple()-detail&quot;&gt;Model::validateMultiple()&lt;/a&gt; validates all models at once. As we have validated our models before, using &lt;code&gt;validateMultiple()&lt;/code&gt;, we're now passing &lt;code&gt;false&lt;/code&gt; as a parameter to &lt;a href=&quot;yii-db-baseactiverecord#save()-detail&quot;&gt;save()&lt;/a&gt; to not run validation twice.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bd3f74ef35a1905aee6c542c505734e8c77c325c" translate="yes" xml:space="preserve">
          <source>In the code above, &lt;code&gt;$url&lt;/code&gt; is the URL that the column creates for the button, &lt;code&gt;$model&lt;/code&gt; is the model object being rendered for the current row, and &lt;code&gt;$key&lt;/code&gt; is the key of the model in the data provider array.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="32475e2479879768004e96a9e331fb94d0c500fd" translate="yes" xml:space="preserve">
          <source>In the code above, both Smarty and Twig are configured to be useable by the view files. But in order to get these extensions into your project, you need to also modify your &lt;code&gt;composer.json&lt;/code&gt; file to include them, too:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f877d21ab84581197677deed46e76a38d0cac6c5" translate="yes" xml:space="preserve">
          <source>In the code above, the &lt;code&gt;imageFile&lt;/code&gt; attribute is used to keep the uploaded file instance. It is associated with a &lt;code&gt;file&lt;/code&gt; validation rule which uses &lt;a href=&quot;yii-validators-filevalidator&quot;&gt;yii\validators\FileValidator&lt;/a&gt; to ensure a file with extension name &lt;code&gt;png&lt;/code&gt; or &lt;code&gt;jpg&lt;/code&gt; is uploaded. The &lt;code&gt;upload()&lt;/code&gt; method will perform the validation and save the uploaded file on the server.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f97d55983c247932583fb30aad343970e4e9b6a1" translate="yes" xml:space="preserve">
          <source>In the constructor of the application, the following bootstrapping work is done:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b1d0a045d632aa6fcc67d9e062e210d8b30ef29b" translate="yes" xml:space="preserve">
          <source>In the controller action that does the data updating, try to catch the &lt;a href=&quot;yii-db-staleobjectexception&quot;&gt;yii\db\StaleObjectException&lt;/a&gt; and implement necessary business logic (e.g. merging the changes, prompting stated data) to resolve the conflict.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="19aacb613a6bf0af3193525b4f5693e4dbad7203" translate="yes" xml:space="preserve">
          <source>In the controller action that updates the row using Active Record, try and catch the &lt;a href=&quot;yii-db-staleobjectexception&quot;&gt;yii\db\StaleObjectException&lt;/a&gt; exception. Implement necessary business logic (e.g. merging the changes, prompting staled data) to resolve the conflict.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="83d499730cd38291506c9394c86f71f6247d0881" translate="yes" xml:space="preserve">
          <source>In the controller view, insert a &lt;a href=&quot;yii-captcha-captcha&quot;&gt;yii\captcha\Captcha&lt;/a&gt; widget in the form.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1c44ac8125ea9f2a96b51a8beee2a5ab3b37fc1c" translate="yes" xml:space="preserve">
          <source>In the controller, we will pass an instance of that model to the view, wherein the &lt;a href=&quot;yii-widgets-activeform&quot;&gt;ActiveForm&lt;/a&gt; widget is used to display the form:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5c4414f85b4c33fd8923cfd169f0e323c9cc1dbd" translate="yes" xml:space="preserve">
          <source>In the example above &lt;code&gt;author_id:integer:notNull:foreignKey(user)&lt;/code&gt; will generate a column named &lt;code&gt;author_id&lt;/code&gt; with a foreign key to the &lt;code&gt;user&lt;/code&gt; table while &lt;code&gt;category_id:integer:defaultValue(1):foreignKey&lt;/code&gt; will generate a column &lt;code&gt;category_id&lt;/code&gt; with a foreign key to the &lt;code&gt;category&lt;/code&gt; table.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b67e7f4075f261551e9dd87400a1e59bc66b8939" translate="yes" xml:space="preserve">
          <source>In the example above we are using wildcard for matching and then filtering each category per needed file. Instead of using &lt;code&gt;fileMap&lt;/code&gt;, you can simply use the convention of the category mapping to the same named file. Now you can use &lt;code&gt;Module::t('validation', 'your custom validation message')&lt;/code&gt; or &lt;code&gt;Module::t('form', 'some form label')&lt;/code&gt; directly.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0550ac988e107e5bdb246c879ed2d54a95bc1d83" translate="yes" xml:space="preserve">
          <source>In the examples shown above, the action results are all strings which will be treated as the response body to be sent to end users. The following example shows how an action can redirect the user browser to a new URL by returning a response object (because the &lt;a href=&quot;yii-web-controller#redirect()-detail&quot;&gt;redirect()&lt;/a&gt; method returns a response object):</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8f31d382030614295df897cf04c919e7fba1b667" translate="yes" xml:space="preserve">
          <source>In the expression above, both &lt;code&gt;female&lt;/code&gt; and &lt;code&gt;male&lt;/code&gt; are possible parameter values, while &lt;code&gt;other&lt;/code&gt; handles values that do not match either one of them. Following each possible parameter value, you should specify a phrase and enclose it in a pair of curly brackets.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f7b82950ca3eb74c085ec39aa5d76079eb2a26c7" translate="yes" xml:space="preserve">
          <source>In the first step, it determines the layout name and the context module:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c4c20ec84413f9f817b768847f82c4c4c222f04b" translate="yes" xml:space="preserve">
          <source>In the first step, it determines the layout value and the context module:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0d03a44a8f83b3126ab36a60c6635d351ceeb16a" translate="yes" xml:space="preserve">
          <source>In the following example, &lt;code&gt;HelloWidget&lt;/code&gt; HTML-encodes and displays the content assigned to its &lt;code&gt;message&lt;/code&gt; property. If the property is not set, it will display &quot;Hello World&quot; by default.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a647d4fa1c2d60d6e11de96eee8f2fc97c1d5384" translate="yes" xml:space="preserve">
          <source>In the following example, ContentNegotiator is configured to support JSON and XML response formats, and English (United States) and German languages.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bf725dd452115361d74ea9e8fcc7de10d135c8e7" translate="yes" xml:space="preserve">
          <source>In the following example, an &lt;a href=&quot;yii-web-user#%24identityClass-detail&quot;&gt;identity class&lt;/a&gt; is implemented as an &lt;a href=&quot;guide-db-active-record&quot;&gt;Active Record&lt;/a&gt; class associated with the &lt;code&gt;user&lt;/code&gt; database table.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f45b7737e0f3b93eb2ce5e2c4a22789b33f27fe1" translate="yes" xml:space="preserve">
          <source>In the following example, any assets ending with &lt;code&gt;jquery.min.js&lt;/code&gt; will be replaced with &lt;code&gt;jquery/dist/jquery.js&lt;/code&gt; which is relative to &lt;a href=&quot;yii-web-assetmanager#%24baseUrl-detail&quot;&gt;$baseUrl&lt;/a&gt; and &lt;a href=&quot;yii-web-assetmanager#%24basePath-detail&quot;&gt;$basePath&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="26544fda077baba51d34d725ee9e838ad7c7dce2" translate="yes" xml:space="preserve">
          <source>In the following example, besides creating the &lt;code&gt;news&lt;/code&gt; table we also insert an initial row into this table.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cca725f3af415949b4f3338963fc58a1ed58dd03" translate="yes" xml:space="preserve">
          <source>In the following example, the &lt;code&gt;view&lt;/code&gt; action (an inline action) has declared two parameters: &lt;code&gt;$id&lt;/code&gt; and &lt;code&gt;$version&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a01213e67d94863f63c6439ee835d7c80581123f" translate="yes" xml:space="preserve">
          <source>In the following example, we create a &lt;code&gt;StatusValidator&lt;/code&gt; which validates if an input is a valid status input against the existing status data. The validator supports both server-side and client-side validation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bd2a966019903cdd109b89075a74858a08235878" translate="yes" xml:space="preserve">
          <source>In the following example, we declare an Active Record class named &lt;code&gt;Customer&lt;/code&gt; for the &lt;code&gt;customer&lt;/code&gt; database table.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3d9adffb2c4b59d542dca0f3a2f98e46672747d9" translate="yes" xml:space="preserve">
          <source>In the following example, we show how a generic model can be used for a login form:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e94f6172c80c1ed223ed5c2e9252a5b74d834432" translate="yes" xml:space="preserve">
          <source>In the following examples, we assume the target &lt;a href=&quot;yii-i18n-formatter#%24timeZone-detail&quot;&gt;time zone&lt;/a&gt; is set as &lt;code&gt;Europe/Berlin&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="63dff8635262222c8d1db6e4b2a14e6b3412d3df" translate="yes" xml:space="preserve">
          <source>In the following rule declaration, the &lt;code&gt;page&lt;/code&gt; and &lt;code&gt;tag&lt;/code&gt; parameters are both optional and will take the value of 1 and empty string, respectively, when they are not provided.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d9fdf281902e61d3446b55099e65b227216990e4" translate="yes" xml:space="preserve">
          <source>In the following we will describe how to write a &lt;code&gt;UserProfile&lt;/code&gt; unit test class using &lt;code&gt;yii2-codeception&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a2a25380e22ec4a9056e9aa4f46f274522493632" translate="yes" xml:space="preserve">
          <source>In the following you find some examples:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bb4317488c64a617db36451042d438ecffd0b026" translate="yes" xml:space="preserve">
          <source>In the following, a configuration is used to create and initialize a database connection:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="34b24fa1e0b3e264622d2211c950bf562870a9b6" translate="yes" xml:space="preserve">
          <source>In the following, we introduce an approach to combine and compress asset files without the need to modify your existing application code.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="006f6f0d755bfb0c4016b3c8b51f72b46caa7e76" translate="yes" xml:space="preserve">
          <source>In the following, we use an example to illustrate how you can build a set of RESTful APIs with some minimal coding effort.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3b85145d55d27de74750582ebdc2fad9e8452ce9" translate="yes" xml:space="preserve">
          <source>In the following, we will describe the features common to all log targets.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b08a026c58882ab85e8ff91613f612f1786333a7" translate="yes" xml:space="preserve">
          <source>In the following, we will describe the main usage and properties of every core validator.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6ede61bc57857e88e7216550c91ac20509a5e48f" translate="yes" xml:space="preserve">
          <source>In the following, we will describe the usage of each query building method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="593e237107fe1a364b93a34a2cc13596f7ad1482" translate="yes" xml:space="preserve">
          <source>In the following, we will show how you can create a form that would allow you to collect data for both &lt;code&gt;User&lt;/code&gt; and &lt;code&gt;Profile&lt;/code&gt; models.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="92d40b91f1c0b567e616eb289beb07faa00a1825" translate="yes" xml:space="preserve">
          <source>In the following, we will summarize the various Active Record life cycles and the methods/events that are involved in the life cycles.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="930ad6f754d1291a8567c57a0325259b09ef74bc" translate="yes" xml:space="preserve">
          <source>In the form model, declare an attribute to store user-entered verification code, and declare the attribute to be validated by the 'captcha' validator.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7798b4f07de510bb5f985bc6028cec3fe3961ddb" translate="yes" xml:space="preserve">
          <source>In the last subsection, we have explained how to combine all asset bundles into a single one in order to minimize the HTTP requests for asset files referenced in an application. This is not always desirable in practice. For example, imagine your application has a &quot;front end&quot; as well as a &quot;back end&quot;, each of which uses a different set of JavaScript and CSS files. In this case, combining all asset bundles from both ends into a single one does not make sense, because the asset bundles for the &quot;front end&quot; are not used by the &quot;back end&quot; and it would be a waste of network bandwidth to send the &quot;back end&quot; assets when a &quot;front end&quot; page is requested.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="01772b7e084f1afe8f8d19da7ef79b38926b9866" translate="yes" xml:space="preserve">
          <source>In the long term it usually gives you a good time-saving effect.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="11181a7f8a9f99639c8791d18596ce6da30fb091" translate="yes" xml:space="preserve">
          <source>In the migration class, you are expected to write code in the &lt;code&gt;up()&lt;/code&gt; method that makes changes to the database structure. You may also want to write code in the &lt;code&gt;down()&lt;/code&gt; method to revert the changes made by &lt;code&gt;up()&lt;/code&gt;. The &lt;code&gt;up()&lt;/code&gt; method is invoked when you upgrade the database with this migration, while the &lt;code&gt;down()&lt;/code&gt; method is invoked when you downgrade the database. The following code shows how you may implement the migration class to create a &lt;code&gt;news&lt;/code&gt; table:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b5352f6e8746aecc5d93256d8c7969529f55442b" translate="yes" xml:space="preserve">
          <source>In the next request we can get URL remembered in the following way:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0388b91d4a6be44e30e1cbd299bf00b4bfcc95f8" translate="yes" xml:space="preserve">
          <source>In the plural rule arguments above, &lt;code&gt;=&lt;/code&gt; means explicit value. So &lt;code&gt;=0&lt;/code&gt; means exactly zero, &lt;code&gt;=1&lt;/code&gt; means exactly one. &lt;code&gt;other&lt;/code&gt; stands for any other value. &lt;code&gt;#&lt;/code&gt; is replaced with the value of &lt;code&gt;n&lt;/code&gt; formatted according to target language.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e0137ded62f4a20b6e3f580da6808d8376faf51f" translate="yes" xml:space="preserve">
          <source>In the releases of your extension, in addition to code files, you should also consider including the following to help other people learn about and use your extension:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="90d0b6f6db0613112ab59dc16feeb14ce715a152" translate="yes" xml:space="preserve">
          <source>In the second step, it determines the actual layout file according to the layout value and the context module determined in the first step. The layout value can be:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="74162be168ede01b54358940789028f7eedc3694" translate="yes" xml:space="preserve">
          <source>In the second step, it determines the actual layout file according to the previously found layout name and context module. The layout name can be:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e5e6e3e552627d5c595da898832c1ee3ecec7729" translate="yes" xml:space="preserve">
          <source>In the special case when you want to maintain extensions manually, you may configure this property as follows:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2d4938470f107ce0270bb4bfb3290c224b8ca98e" translate="yes" xml:space="preserve">
          <source>In the view file above, the current data model is available as &lt;code&gt;$model&lt;/code&gt;. Additionally the following variables are available:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0bb7197979c5d62d6e9876d2665e34a7b0d1a2d4" translate="yes" xml:space="preserve">
          <source>In the view file, you should add the &lt;code&gt;multiple&lt;/code&gt; option to the &lt;code&gt;fileInput()&lt;/code&gt; call so that the file upload field can receive multiple files:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dc1cc2dfa07b545938ca7e8c892c39c16846d199" translate="yes" xml:space="preserve">
          <source>In the view you can use javascript to add new input lines dynamically.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8739cc5ba8a1e32ca4949a66c7709ae8161a6046" translate="yes" xml:space="preserve">
          <source>In this and the next few sections, we will describe how to install Yii with the so-called &lt;em&gt;Basic Project Template&lt;/em&gt; and how to implement new features on top of this template. Yii also provides another template called the &lt;a href=&quot;https://github.com/yiisoft/yii2-app-advanced/blob/master/docs/guide/README.md&quot;&gt;Advanced Project Template&lt;/a&gt; which is better used in a team development environment to develop applications with multiple tiers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4366eb881bb5453529c5307d54196f6265e320d4" translate="yes" xml:space="preserve">
          <source>In this case attributes &lt;code&gt;username&lt;/code&gt;, &lt;code&gt;password&lt;/code&gt; and &lt;code&gt;secret&lt;/code&gt; are required, but &lt;code&gt;secret&lt;/code&gt; must be assigned explicitly.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6d9a3494231bb923705dde8c50a9551ddc7f9752" translate="yes" xml:space="preserve">
          <source>In this case, the container will use a registered PHP callable to build new instances of a class. Each time when &lt;a href=&quot;yii-di-container#get()-detail&quot;&gt;yii\di\Container::get()&lt;/a&gt; is called, the corresponding callable will be invoked. The callable is responsible to resolve the dependencies and inject them appropriately to the newly created objects. For example,</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="26eb690dbd2c78d43e9a964771ba439ac1acd7c3" translate="yes" xml:space="preserve">
          <source>In this case, the themed version could be either &lt;code&gt;@app/themes/christmas/site/index.php&lt;/code&gt; or &lt;code&gt;@app/themes/basic/site/index.php&lt;/code&gt;. The former has precedence over the latter if both files exist.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7c5fe2392a26a651ff9104e5951e87011d834326" translate="yes" xml:space="preserve">
          <source>In this case, the view &lt;code&gt;@app/views/site/index.php&lt;/code&gt; would be themed as either &lt;code&gt;@app/themes/christmas/site/index.php&lt;/code&gt; or &lt;code&gt;@app/themes/basic/site/index.php&lt;/code&gt;, depending on which themed file exists. If both themed files exist, the first one will take precedence. In practice, you would keep most themed view files in &lt;code&gt;@app/themes/basic&lt;/code&gt; and customize some of them in &lt;code&gt;@app/themes/christmas&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a965d447e60a37553486daddd7ee6fc9fef1cf3d" translate="yes" xml:space="preserve">
          <source>In this case, you should put the sub-query in an array and use the array key to specify the alias.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ad2adbe1e86cc2a2d6674dfccc81ce9cbc89e449" translate="yes" xml:space="preserve">
          <source>In this example we use an array to pass global configuration parameters from the PHP part of the application to the JS frontend code.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="be93219142dfb672afd6eb71e888ad89024c03cf" translate="yes" xml:space="preserve">
          <source>In this example, access is allowed for all the IPv4 and IPv6 addresses excluding the &lt;code&gt;192.168.10.0/24&lt;/code&gt; subnet. IPv4 address &lt;code&gt;192.168.10.128&lt;/code&gt; is also allowed, because it is listed before the restriction.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="697384e31c1de90bd1e6bbc4532ab13e48f4f048" translate="yes" xml:space="preserve">
          <source>In this guide all composer commands assume you have installed composer &lt;a href=&quot;https://getcomposer.org/doc/00-intro.md#globally&quot;&gt;globally&lt;/a&gt; so that it is available as the &lt;code&gt;composer&lt;/code&gt; command. If you are using the &lt;code&gt;composer.phar&lt;/code&gt; in the local directory instead, you have to adjust the example commands accordingly.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5436fce9d897c4424437c2c9fbdd3b4a63f3cb1f" translate="yes" xml:space="preserve">
          <source>In this method, you may also want to return different lists of fields based on some context information. For example, depending on &lt;a href=&quot;yii-base-model#%24scenario-detail&quot;&gt;$scenario&lt;/a&gt; or the privilege of the current application user, you may return different sets of visible fields or filter out some fields.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="600a972a598e27df6b4dcb4d42c25bcb6044490a" translate="yes" xml:space="preserve">
          <source>In this method, you may also want to return different lists of fields based on some context information. For example, depending on the privilege of the current application user, you may return different sets of visible fields or filter out some fields.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0ad9d436ae6e4b37d8dfe306b7b3c4bf9e51af12" translate="yes" xml:space="preserve">
          <source>In this section we'll review the following security aspects:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="79675da0a827e23bf791e7a8383835c34be74fd3" translate="yes" xml:space="preserve">
          <source>In this section, we will describe how to compose and send responses to end users.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ba259a8c8b10c6ee64d0185493b7c2b214d2502d" translate="yes" xml:space="preserve">
          <source>In this section, we will mainly describe how a resource class extending from &lt;a href=&quot;yii-base-model&quot;&gt;yii\base\Model&lt;/a&gt; (or its child classes) can specify what data may be returned via RESTful APIs. If the resource class does not extend from &lt;a href=&quot;yii-base-model&quot;&gt;yii\base\Model&lt;/a&gt;, then all its public member variables will be returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7e6949cd2bd7b47ca2fa811fd8de9d13fb7e9d25" translate="yes" xml:space="preserve">
          <source>In this section, we will mainly describe the first two steps.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a46fcea3c9be5bbc6fbd46ca7954d4e8360c62cb" translate="yes" xml:space="preserve">
          <source>In this section, you have learned how to use Gii to generate the code that implements complete CRUD functionality for content stored in a database table.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="40046d0924f75606215143f4bec5d1df81fac54c" translate="yes" xml:space="preserve">
          <source>In this tutorial, we will mainly describe the usage of Active Record for relational databases. However, most content described here are also applicable to Active Record for NoSQL databases.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="874ffee33f1b020d8b8a956709a23e150e249d7b" translate="yes" xml:space="preserve">
          <source>In this way you will avoid collision of fixture data files between tests and use them as you need.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a1a5f71916336b95986d3d9bba5e7e86ead0ee52" translate="yes" xml:space="preserve">
          <source>In view files often the HTML code is not written out directly but generated by some PHP code dependent on the variables of the view. In order for the generated HTML to be manipulated with Javascript, the JS code has to contain dynamic parts too, for example the IDs of the jQuery selectors.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e3f29f71c6c6618a65fcb7924a133f223e54a9ca" translate="yes" xml:space="preserve">
          <source>In which format should the value of each data model be displayed as (e.g. &lt;code&gt;&quot;raw&quot;&lt;/code&gt;, &lt;code&gt;&quot;text&quot;&lt;/code&gt;, &lt;code&gt;&quot;html&quot;&lt;/code&gt;, &lt;code&gt;['date', 'php:Y-m-d']&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="02d4acf11ad177c49763e80afd208b4892f18537" translate="yes" xml:space="preserve">
          <source>In which format should the value of each data model be displayed as (e.g. &lt;code&gt;&quot;raw&quot;&lt;/code&gt;, &lt;code&gt;&quot;text&quot;&lt;/code&gt;, &lt;code&gt;&quot;html&quot;&lt;/code&gt;, &lt;code&gt;['date', 'php:Y-m-d']&lt;/code&gt;). Supported formats are determined by the &lt;a href=&quot;yii-grid-gridview#%24formatter-detail&quot;&gt;formatter&lt;/a&gt; used by the &lt;a href=&quot;yii-grid-gridview&quot;&gt;yii\grid\GridView&lt;/a&gt;. Default format is &quot;text&quot; which will format the value as an HTML-encoded plain text when &lt;a href=&quot;yii-i18n-formatter&quot;&gt;yii\i18n\Formatter&lt;/a&gt; is used as the &lt;a href=&quot;yii-grid-gridview#%24formatter-detail&quot;&gt;formatter&lt;/a&gt; of the GridView.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="43f1840020864c280b6030185f71cbc6507de538" translate="yes" xml:space="preserve">
          <source>In your JavaScript code you can now access these like &lt;code&gt;yiiOptions.baseUrl&lt;/code&gt; or &lt;code&gt;yiiOptions.language&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="00bd92117b61de092e8b53f27488ce9889f6f063" translate="yes" xml:space="preserve">
          <source>In your unit test class extending &lt;a href=&quot;yii-codeception-dbtestcase&quot;&gt;yii\codeception\DbTestCase&lt;/a&gt; or &lt;a href=&quot;yii-codeception-testcase&quot;&gt;yii\codeception\TestCase&lt;/a&gt;, declare which fixtures you want to use in the &lt;a href=&quot;yii-test-fixturetrait#fixtures()-detail&quot;&gt;fixtures()&lt;/a&gt; method. For example,</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="73caa3358e297d4c512dad71b8f738fa3cc27275" translate="yes" xml:space="preserve">
          <source>Include file(s) before starting tinker shell</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="724fc6eae7e32c77ed08a9cab9ea718258ffe375" translate="yes" xml:space="preserve">
          <source>Include the &lt;a href=&quot;yii&quot;&gt;Yii&lt;/a&gt; class file;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5c53f1d11bfa21025286f5120779565f88c97f72" translate="yes" xml:space="preserve">
          <source>Include the directory in the &lt;code&gt;$fpath&lt;/code&gt;, e.g. by adding it to &lt;code&gt;~/.zshrc&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5c0a29bb504a876c51cd7ad9a22fe9190f2ae7e9" translate="yes" xml:space="preserve">
          <source>Include the extension manifest file &lt;code&gt;vendor/yiisoft/extensions.php&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c37d3c1a0bacc352c9589efc03a4fab916f3683f" translate="yes" xml:space="preserve">
          <source>Includes client assets of &lt;a href=&quot;https://github.com/RobinHerbots/Inputmask&quot;&gt;jQuery input mask plugin&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="15c22d169f90cb83d8893cd476573b43732b45a8" translate="yes" xml:space="preserve">
          <source>Includes the migration file for a given migration class name.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fef77fd0793d3c2cf3b857ff00cad601ec7a2695" translate="yes" xml:space="preserve">
          <source>Index metadata. &lt;code&gt;null&lt;/code&gt; - if the named index does not exist.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="27bf949a8c6bbf392cd9bbfb0a23ac87298c9ae6" translate="yes" xml:space="preserve">
          <source>Index name</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e6bada87abc8ee10df4583463137a3f0b7f63d38" translate="yes" xml:space="preserve">
          <source>Index name or pattern, use &lt;code&gt;*&lt;/code&gt; in order to drop all indexes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6e92b7a2785e378d347a5dbba4568f754e0b3cfb" translate="yes" xml:space="preserve">
          <source>Index name.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="82abe6b26544e9ff8eed1b4c2cd35852eb64f8ee" translate="yes" xml:space="preserve">
          <source>Index name. The index name may contain schema name if any. Do not quote the index name.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bac2a9da8998703d93adb1d10003f51ef53e0fae" translate="yes" xml:space="preserve">
          <source>Index schema information. Null if the named index does not exist.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b94962abe613b3ebfaaf8264a4cf8a31f00b0c22" translate="yes" xml:space="preserve">
          <source>Index that the document belogs to. Can be set to null if the command has a default index (&lt;a href=&quot;yii-elasticsearch-bulkcommand#%24index-detail&quot;&gt;yii\elasticsearch\BulkCommand::$index&lt;/a&gt;) assigned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f28c7134fe738b1baa2e6bc30b4ff32821809b3d" translate="yes" xml:space="preserve">
          <source>IndexAction implements the API endpoint for listing multiple models.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ae7d1fe5edff93d934063cc390217314b9e2bb0a" translate="yes" xml:space="preserve">
          <source>Indexes and/or groups the array according to a specified key.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f77617d70f83cf7b1d1896f4cfb5f9927286bc2e" translate="yes" xml:space="preserve">
          <source>Indexes specification. Each specification should be an array in format: optionName =&amp;gt; value The main options are:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b1f3cbbf8d37f08e3d21cd4bc0a7ffe67e04ef6b" translate="yes" xml:space="preserve">
          <source>Indexes specifications.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7fad0e26fd25542aa035943bb4dcf7b1bd89671d" translate="yes" xml:space="preserve">
          <source>Indexing Query Results</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9e3d96a1631811addaed53777a78194601c63eac" translate="yes" xml:space="preserve">
          <source>Indicates if popup window should be used instead of direct links.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8fdca9d873a9836142abfa8fdd037626dd0ec980" translate="yes" xml:space="preserve">
          <source>Indicates if redirect should be performed even in case of popup window.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="014c9e6f0fea8c9251e7ce51fd892a3b1ebde501" translate="yes" xml:space="preserve">
          <source>Indicates if widget content, should be rendered automatically.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c6eebbca3ecf02356cd6356837f1a3edde7acdbb" translate="yes" xml:space="preserve">
          <source>Indicates if widget content, should be rendered automatically. Note: this value automatically set to 'false' at the first call of &lt;a href=&quot;yii-authclient-widgets-authchoice#createClientUrl()-detail&quot;&gt;createClientUrl()&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4da078df730dd61103f92529eb7beeeb860b245a" translate="yes" xml:space="preserve">
          <source>Indicates whether the table names generated should consider the &lt;code&gt;tablePrefix&lt;/code&gt; setting of the DB connection.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="182149604b0beba8e881df7dba223d823250da6e" translate="yes" xml:space="preserve">
          <source>Indicates whether the table names generated should consider the &lt;code&gt;tablePrefix&lt;/code&gt; setting of the DB connection. For example, if the table name is &lt;code&gt;post&lt;/code&gt; the generator wil return &lt;code&gt;{{%post}}&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cc43eabb9fc7f8889ee1414fb8485f7e4a474877" translate="yes" xml:space="preserve">
          <source>Inflector pluralizes and singularizes English nouns. It also contains some other useful methods.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f0ad3fca6ab05d833db8b58699b7e26836b20db6" translate="yes" xml:space="preserve">
          <source>Info attribute input search value</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e64e08fc9d6921155de313395207352b842d485e" translate="yes" xml:space="preserve">
          <source>Info message.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8e8955cb8a8c349fdc96dfe7fee4218234a6a552" translate="yes" xml:space="preserve">
          <source>Informational message level. An informational message is one that includes certain information for developers to review.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fdaddb9ce367c2ca746a97cc24d2e8817a51f27d" translate="yes" xml:space="preserve">
          <source>Inheritance</source>
          <target state="translated">Inheritance</target>
        </trans-unit>
        <trans-unit id="67eb7c4bdb557e17a2430101a293ded796c9767a" translate="yes" xml:space="preserve">
          <source>InitDbFixture represents the initial state needed for DB-related tests.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5a3ebe3b930b896810c07c00c18665e24d06eced" translate="yes" xml:space="preserve">
          <source>Initial property values for &lt;a href=&quot;yii-widgets-fragmentcache&quot;&gt;yii\widgets\FragmentCache&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ff527de3138c137e8846197e6df479c84e326d99" translate="yes" xml:space="preserve">
          <source>Initial value of the aggregation counter object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7be9c79533ef1a080403e2d429e2019bb365e678" translate="yes" xml:space="preserve">
          <source>Initial values specified in &lt;a href=&quot;yii-web-request#%24csrfCookie-detail&quot;&gt;$csrfCookie&lt;/a&gt; will be applied to the generated cookie.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="31d0bce9606c028997ba6db8124f4694480e575b" translate="yes" xml:space="preserve">
          <source>Initial values to be applied to the validator properties.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="725d944eb21453b9e5e699e05ed30327e4078dd8" translate="yes" xml:space="preserve">
          <source>Initialize application properties using the given application configuration.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="81b5a3cd380686d55c9373b4efb4a8672465f50e" translate="yes" xml:space="preserve">
          <source>Initialize the application.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6b0fabaec77b757d9c0aac60716f70308c134417" translate="yes" xml:space="preserve">
          <source>Initialize the fixtures</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="74cf2ec766f57a4aea10a8bdc040b936b2d9d1e3" translate="yes" xml:space="preserve">
          <source>Initializes MySQL specific mutex component implementation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="19500c74e6bf616441c781164eb6aa77a9632058" translate="yes" xml:space="preserve">
          <source>Initializes Oracle specific mutex component implementation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="142836f24de27536e6e2f30ef6c1ba689666353f" translate="yes" xml:space="preserve">
          <source>Initializes PgSQL specific mutex component implementation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bdf7e1762088769cadf6fce17e9594a394e41661" translate="yes" xml:space="preserve">
          <source>Initializes UrlManager.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="92f182596182178dc3ada47b35e212673ad6a5d2" translate="yes" xml:space="preserve">
          <source>Initializes authenticated user attributes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="44eeead23e09f7100e24be51b647cde1ea01278f" translate="yes" xml:space="preserve">
          <source>Initializes client options</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a4bcac598c2fb71446a83f3fddb78d24f4b86058" translate="yes" xml:space="preserve">
          <source>Initializes extensions and executes bootstrap components.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="63418b854aa1f329fbeefa31ed5abb9a7b5a0083" translate="yes" xml:space="preserve">
          <source>Initializes generic database table based mutex implementation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="10a02dd3c4321f9e65c311349a9cb2c359b009d7" translate="yes" xml:space="preserve">
          <source>Initializes information about name and type of all index in the Sphinx.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2b41d5d488fe9dcb6877325d9accfa718c6f1cf3" translate="yes" xml:space="preserve">
          <source>Initializes mutex component implementation dedicated for UNIX, GNU/Linux, Mac OS X, and other UNIX-like operating systems.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7c98cd73bd563886fd1e2f81255452e02f27b389" translate="yes" xml:space="preserve">
          <source>Initializes panels.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="670253633ca7e20b6f0f6b5f28c9227280ccc507" translate="yes" xml:space="preserve">
          <source>Initializes the &lt;a href=&quot;yii-filters-accesscontrol#%24rules-detail&quot;&gt;$rules&lt;/a&gt; array by instantiating rule objects from configurations.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="df61805cefa87f9c38bfcd370e364975b0bf4586" translate="yes" xml:space="preserve">
          <source>Initializes the Cache component.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="afd801846cdb45453ccfa7ae1d54ae5888d8076e" translate="yes" xml:space="preserve">
          <source>Initializes the DB connection component.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0fccbe8193c2c2d4ed880169998161716239cbc4" translate="yes" xml:space="preserve">
          <source>Initializes the DB connection.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ed92eeb27d8136d4280e370dc71fc9646f85b220" translate="yes" xml:space="preserve">
          <source>Initializes the DbCache component.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1e64b09c712c76bf69c5a494164e3196c083dae0" translate="yes" xml:space="preserve">
          <source>Initializes the DbMessageSource component.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bc4f3187874b94367f57cd5f5611b9d2912e50c8" translate="yes" xml:space="preserve">
          <source>Initializes the DbSession component.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b072eb061afed48d79161c46e362ef7d589978ef" translate="yes" xml:space="preserve">
          <source>Initializes the DbTarget component.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fa7ee1ba32d1b9aeeb32240c349b3814c8f3f853" translate="yes" xml:space="preserve">
          <source>Initializes the FragmentCache object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e26884c940e732795e4852c157b5965968ea4cc6" translate="yes" xml:space="preserve">
          <source>Initializes the MongoDbTarget component.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a6442f02945b02a93f74e91f049fc346ab458c8f" translate="yes" xml:space="preserve">
          <source>Initializes the Mutex component.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b5bbe27ad7df4cc69816250d797a08a8da751035" translate="yes" xml:space="preserve">
          <source>Initializes the Session component.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f8f3f4331bea110bce3dfea352ade952ca42f5c4" translate="yes" xml:space="preserve">
          <source>Initializes the action.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ce0c174ceb8af15700aff4a38c51e9f3544365eb" translate="yes" xml:space="preserve">
          <source>Initializes the application component.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e67c3be4e756ca776750317ad4bdea87d7f0d1b7" translate="yes" xml:space="preserve">
          <source>Initializes the bundle.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7d1c6227a025cbe089f7a7774de272c245d7c24e" translate="yes" xml:space="preserve">
          <source>Initializes the component by configuring the default message categories.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e6bbd5d2931b613f33c3b48e6bdf504489c82050" translate="yes" xml:space="preserve">
          <source>Initializes the component.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1ff780a75b126503c3778b4fa72703553277d654" translate="yes" xml:space="preserve">
          <source>Initializes the default button rendering callback for single button</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b6efa85a6a2aee4c2619bcaec1d820644f6cbb7a" translate="yes" xml:space="preserve">
          <source>Initializes the default button rendering callbacks.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ded69346230122835907d0079fa1ea5d6a7a5578" translate="yes" xml:space="preserve">
          <source>Initializes the detail view.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8d6b246f880a8ba9b5a365a42c5168734116c150" translate="yes" xml:space="preserve">
          <source>Initializes the grid view.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="76d148ef3491068666f35ec5925bc3a52a430190" translate="yes" xml:space="preserve">
          <source>Initializes the logger by registering &lt;a href=&quot;yii-log-logger#flush()-detail&quot;&gt;flush()&lt;/a&gt; as a shutdown function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="22acedcdcd5e351b54488486230c46378d043e28" translate="yes" xml:space="preserve">
          <source>Initializes the migration.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a9d15a56f7e9305b63d8db596d0bc3df9076b5fc" translate="yes" xml:space="preserve">
          <source>Initializes the module.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cc2058d972ac1ce9084f899484a2c772f989b0dc" translate="yes" xml:space="preserve">
          <source>Initializes the object with the given configuration &lt;code&gt;$config&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2a2ebcb62e07bfa23fe63ff902381554659598f7" translate="yes" xml:space="preserve">
          <source>Initializes the object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="960f35e87f34e9197eb23444c1df22c411aac44c" translate="yes" xml:space="preserve">
          <source>Initializes the pager.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="585d5607f12a3969f864fd206d39423586de087e" translate="yes" xml:space="preserve">
          <source>Initializes the redis Cache component.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4162605a32d8a4305ce8b03449544e56cb73d0f7" translate="yes" xml:space="preserve">
          <source>Initializes the redis Mutex component.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f096e311f53101d14d480cbbbe0e8274e91821cc" translate="yes" xml:space="preserve">
          <source>Initializes the redis Session component.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="300e055eaff3119ea26b221786e378f629b3f86f" translate="yes" xml:space="preserve">
          <source>Initializes the route.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3822532e5e6f3a373e145076be61482b2d2bf093" translate="yes" xml:space="preserve">
          <source>Initializes the sorter.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a36e1f98155f489853f5269d54dcaa5575ce2010" translate="yes" xml:space="preserve">
          <source>Initializes the view component.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e769f0ac978f54f6e8d71a32d13085bdc2e240de" translate="yes" xml:space="preserve">
          <source>Initializes the view.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="daf999cf79369c4690f8c4173e650d121cd7901f" translate="yes" xml:space="preserve">
          <source>Initializes the widget options.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5ee0a73357c706f6366227bda4effb01e2119791" translate="yes" xml:space="preserve">
          <source>Initializes the widget.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d4350faccf44a9137e5b92ea075883a90d174d8c" translate="yes" xml:space="preserve">
          <source>Initializes this application component.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c261c57f05a0c92c8c281423671937ed888f1ed6" translate="yes" xml:space="preserve">
          <source>Initializes this component by ensuring the existence of the cache path.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="de3bbc19e58e3ad4a69013a5f66908e913c75558" translate="yes" xml:space="preserve">
          <source>Initializes this component.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cb2999d9364098818b312b69cf21d725718ba247" translate="yes" xml:space="preserve">
          <source>Initializes this rule.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cef2cf7efb3d11b6e4f06ec176884d1144eea489" translate="yes" xml:space="preserve">
          <source>Inline Actions</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bb3336fa39fec4be365b76323158beafb5003a9c" translate="yes" xml:space="preserve">
          <source>Inline Validators</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="97d4a8593c24cd6f8730add5bc1fbcdc6670657c" translate="yes" xml:space="preserve">
          <source>Inline actions are the most commonly defined actions because they take little effort to create. However, if you plan to reuse the same action in different places, or if you want to redistribute an action, you should consider defining it as a &lt;em&gt;standalone action&lt;/em&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="642e40c88280f47676f64b5a4c250937145c873b" translate="yes" xml:space="preserve">
          <source>Inline actions refer to the actions that are defined in terms of action methods as we just described.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3bdfb11bae51f20f1ee7e1c1a1279cf43650c0f0" translate="yes" xml:space="preserve">
          <source>Inline scripts are useful for configuration, dynamically generated code and small snippets created by reusable frontend code contained in &lt;a href=&quot;guide-structure-widgets&quot;&gt;widgets&lt;/a&gt;. The &lt;a href=&quot;yii-web-view#registerJs()-detail&quot;&gt;registerJs()&lt;/a&gt; method for adding these can be used as follows:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="11c3b1b7ca351ef4ccdedeeccf19ed99c9c13436" translate="yes" xml:space="preserve">
          <source>InlineAction represents an action that is defined as a controller method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="30c5649eded82d3e3be576f33d359cd9996ec234" translate="yes" xml:space="preserve">
          <source>InlineValidator represents a validator which is defined as a method in the object being validated.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c03caeef02108c6f2afa47e5c5e2a5d0a67d8091" translate="yes" xml:space="preserve">
          <source>Inner joins with the specified relations.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c3e25ca576e396f7f7ca07c51c68d0045face42a" translate="yes" xml:space="preserve">
          <source>Input CSS file name.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="df5d437a42f572d0e0a1c5d22258b521cd8ca7e7" translate="yes" xml:space="preserve">
          <source>Input Fields</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="48706e56aa935bef2083be3ad06d7a71f3624f45" translate="yes" xml:space="preserve">
          <source>Input Names and Values</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0ccf7df786c4c24c937ef4429a0248a86f57588f" translate="yes" xml:space="preserve">
          <source>Input array with replaced placeholder keys</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6d206308e60db70d1b0e69e6818ee2fca5a79400" translate="yes" xml:space="preserve">
          <source>Input name.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b040d1819589fb36c90f50dd95e60c4dda95cac0" translate="yes" xml:space="preserve">
          <source>Input parameters (name =&amp;gt; value) for the SQL execution. See &lt;a href=&quot;yii-db-command#execute()-detail&quot;&gt;yii\db\Command::execute()&lt;/a&gt; for more details.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2194413609b4f971534953bb2ee656c00a1de56c" translate="yes" xml:space="preserve">
          <source>Input string</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="58e49189baab320a0ada7a4875f1c82eb580df6d" translate="yes" xml:space="preserve">
          <source>Input string to check</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0dac1a70c96f388509f66290a3d22d9300e6b8e7" translate="yes" xml:space="preserve">
          <source>Input type, can be:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4247619c2cd9ede80b6fff35d0c3d7200393f8dd" translate="yes" xml:space="preserve">
          <source>Input type, can be: - 'checkbox' - 'radio'</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a9e020d632ebb33c3a6a2f5cc2af3d36d9ba1540" translate="yes" xml:space="preserve">
          <source>Input value</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="103b73f8b8612de7f92ed544d130aab2ccb3dead" translate="yes" xml:space="preserve">
          <source>Input value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="72f802b268034dc5346369ad70e75693d101634f" translate="yes" xml:space="preserve">
          <source>InputWidget is the base class for widgets that collect user inputs.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fe4fa9ffdbf4577fd592df056d6c2025eab35a46" translate="yes" xml:space="preserve">
          <source>Inserted data, each row will have &quot;_id&quot; key assigned to it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="94403dc7609bd5e3d3fd6768c751909856bc73d9" translate="yes" xml:space="preserve">
          <source>Inserted record ID, &lt;code&gt;false&lt;/code&gt; - on failure.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9b0c3395b88187ccbfc85a2801cd30eb7752d408" translate="yes" xml:space="preserve">
          <source>Inserts a document into an index</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f6e52cde7fa2f8dbd9923be91ebe47f32f99a080" translate="yes" xml:space="preserve">
          <source>Inserts a document into the associated index using the attribute values of this record.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dc4b8a44766f134b9d8265d8695b4c7f5c14b762" translate="yes" xml:space="preserve">
          <source>Inserts a row into the associated Mongo collection using the attribute values of this record.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ef32118a9ba09a14cc4516fb9f82a0bac1db006b" translate="yes" xml:space="preserve">
          <source>Inserts a row into the associated Sphinx index using the attribute values of this record.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1816c802c05f0969666a55e6312cd44681a7a500" translate="yes" xml:space="preserve">
          <source>Inserts a row into the associated database table using the attribute values of this record.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="11edb8fc62bf3fc7f91afbfe6371f2de6fe9cba9" translate="yes" xml:space="preserve">
          <source>Inserts an ActiveRecord into DB without considering transaction.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="79d5584ce263b0b34b1786daea6d1120bc19fb32" translate="yes" xml:space="preserve">
          <source>Inserts batch of new documents into collection.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9dd12eaed0a08018acf670a1d47efe93c511313e" translate="yes" xml:space="preserve">
          <source>Inserts new data into collection.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3cfbe27efcdaa47639c005f377696ad1e4271e1c" translate="yes" xml:space="preserve">
          <source>Inserts new document into collection.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1c9f5b8e44c7191e2537f31e05e12769d0067158" translate="yes" xml:space="preserve">
          <source>Inserts several new rows into collection.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bf2eee84e640e4fd3496ccb0d9d8b0c2b5228815" translate="yes" xml:space="preserve">
          <source>Inserts the record into the database using the attribute values of this record.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="95b5771df0479ee4cf97eb31d2fb3d39b695097c" translate="yes" xml:space="preserve">
          <source>Inside your controller there are a few ways to implement authorization. If you want granular permissions that separate access to adding and deleting, then you need to check access for each action. You can either use the above condition in each action method, or use &lt;a href=&quot;yii-filters-accesscontrol&quot;&gt;yii\filters\AccessControl&lt;/a&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c81b79df3c6448eae7c4f80428b54cd5692a17d7" translate="yes" xml:space="preserve">
          <source>Installation</source>
          <target state="translated">Installation</target>
        </trans-unit>
        <trans-unit id="b53fd13b9fec1a5e462e7bd89731997206b86335" translate="yes" xml:space="preserve">
          <source>Installing Composer</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="94192738c8065f994879b8b91734a6608f420e1f" translate="yes" xml:space="preserve">
          <source>Installing Extensions Manually</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="46b981e97a4ea8c2ec0403fa3c275b1fe8ccb413" translate="yes" xml:space="preserve">
          <source>Installing Yii</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3829a4b0a280f4637e0d3bd035e95fa412ce25a2" translate="yes" xml:space="preserve">
          <source>Installing Yii from an archive file involves three steps:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c1e820aecee17ad3e4d768df0da74050fd15d27b" translate="yes" xml:space="preserve">
          <source>Installing from an Archive File</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="85bf6a7d0b6bacb168397719f473b9ef92d613e3" translate="yes" xml:space="preserve">
          <source>Installing via Composer</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="190de99eb315315ab7a29177474e35d219cd57d3" translate="yes" xml:space="preserve">
          <source>Instance is mainly used in two places:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b922dec9a4c45821cc2f06c79cd2b2ecfd56b685" translate="yes" xml:space="preserve">
          <source>Instance represents a reference to a named object in a dependency injection (DI) container or a service locator.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f091fdab5a1a6500405887cdd5448baf822164da" translate="yes" xml:space="preserve">
          <source>Instantiates and configures the Smarty object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="54271f22dc7286475ff1ed18402d5835dc383898" translate="yes" xml:space="preserve">
          <source>Instead of actually applying or reverting migrations, sometimes you may simply want to mark that your database has been upgraded to a particular migration. This often happens when you manually change the database to a particular state and you do not want the migration(s) for that change to be re-applied later. You can achieve this goal with the following command:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="87198a7795a15848a302a47e84e5f18c288b43df" translate="yes" xml:space="preserve">
          <source>Instead of directly writing CSS and/or JavaScript code, developers often write them in some extended syntax and use special tools to convert it into CSS/JavaScript. For example, for CSS code you may use &lt;a href=&quot;http://lesscss.org/&quot;&gt;LESS&lt;/a&gt; or &lt;a href=&quot;http://sass-lang.com/&quot;&gt;SCSS&lt;/a&gt;; and for JavaScript you may use &lt;a href=&quot;http://www.typescriptlang.org/&quot;&gt;TypeScript&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="61846135400171c7e17ff0131d792d10f4e7ead8" translate="yes" xml:space="preserve">
          <source>Instead of entering the same option values every time you run the migration command, you may configure it once for all in the application configuration like shown below:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ba2b13e5d275bc7464ec9c952a2e787efa562747" translate="yes" xml:space="preserve">
          <source>Instead of publishing assets by file copying, you may consider using symbolic links, if your OS and Web server allow. This feature can be enabled by setting &lt;a href=&quot;yii-web-assetmanager#%24linkAssets-detail&quot;&gt;linkAssets&lt;/a&gt; to be &lt;code&gt;true&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3a474af5236c02af7167b64236c27df9232b3c5c" translate="yes" xml:space="preserve">
          <source>Instead of supplying correct username attacker could give your applications something like &lt;code&gt;'; DROP TABLE user; --&lt;/code&gt;. Resulting SQL will be the following:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a67d8d7c704681e689d46a9abdcea343d2bd9b06" translate="yes" xml:space="preserve">
          <source>Instead of translating individual text messages, sometimes you may want to translate a whole view script. To achieve this goal, simply translate the view and save it under a subdirectory whose name is the same as target language. For example, if you want to translate the view script &lt;code&gt;views/site/index.php&lt;/code&gt; and the target language is &lt;code&gt;ru-RU&lt;/code&gt;, you may translate the view and save it as the file &lt;code&gt;views/site/ru-RU/index.php&lt;/code&gt;. Now whenever you call &lt;a href=&quot;yii-base-view#renderFile()-detail&quot;&gt;yii\base\View::renderFile()&lt;/a&gt; or any method that invoke this method (e.g. &lt;a href=&quot;yii-base-controller#render()-detail&quot;&gt;yii\base\Controller::render()&lt;/a&gt;) to render the view &lt;code&gt;views/site/index.php&lt;/code&gt;, it will end up rendering the translated view &lt;code&gt;views/site/ru-RU/index.php&lt;/code&gt;, instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="40c2096e78beb32cbe63471aaba3fc0d8e0ea23e" translate="yes" xml:space="preserve">
          <source>Instead of using &lt;code&gt;fileMap&lt;/code&gt; you can simply use the convention of the category mapping to the same named file. Now you can use &lt;code&gt;Menu::t('messages', 'new messages {messages}', ['{messages}' =&amp;gt; 10])&lt;/code&gt; directly.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1d79346606bd16622cb5ce534f3441a8504da23a" translate="yes" xml:space="preserve">
          <source>Interface for classes that parse the raw request body into a parameters array.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2e64df73956dc9f366b6debf17bcc754875788f2" translate="yes" xml:space="preserve">
          <source>Interface yii\authclient\ClientInterface</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="47e6fa02edc4ef53d6701680e0509ea86bf1e4a1" translate="yes" xml:space="preserve">
          <source>Interface yii\authclient\StateStorageInterface</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a0c2a283035c8447d452d140d608b3ea34a9ae44" translate="yes" xml:space="preserve">
          <source>Interface yii\base\Arrayable</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f9348fa8fea4b947559c8276e1c19882f6bf870c" translate="yes" xml:space="preserve">
          <source>Interface yii\base\BootstrapInterface</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f1a835b623f61839c543c4c354fb2437bbec6885" translate="yes" xml:space="preserve">
          <source>Interface yii\base\Configurable</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8145b87ccf48dd0a4d69b85f7037d177cf61e921" translate="yes" xml:space="preserve">
          <source>Interface yii\base\ViewContextInterface</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="434e73ec1f3c8f176b060bb141e7b710ecc68746" translate="yes" xml:space="preserve">
          <source>Interface yii\caching\CacheInterface</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="96c6034e8e14d867e3fb530e5e9850e815420169" translate="yes" xml:space="preserve">
          <source>Interface yii\data\DataProviderInterface</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5252f5bd1cd9fb41d7b736dcbebacb24ecb235be" translate="yes" xml:space="preserve">
          <source>Interface yii\db\ActiveQueryInterface</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="613b51b10a0300d57ef23980ecb0418dc08b03ca" translate="yes" xml:space="preserve">
          <source>Interface yii\db\ActiveRecordInterface</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6f6bf76a7f1e077d267dad182984d3cd91ec202a" translate="yes" xml:space="preserve">
          <source>Interface yii\db\MigrationInterface</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d44f129e06b1fcff2c69051e092e1fe9023efe16" translate="yes" xml:space="preserve">
          <source>Interface yii\db\QueryInterface</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f5ed6426bfd34fc7569556b3cb9ae86477027907" translate="yes" xml:space="preserve">
          <source>Interface yii\debug\components\search\matchers\MatcherInterface</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a5b048f87c4ba8ec0c9eae493c7c7ce2f9d1151d" translate="yes" xml:space="preserve">
          <source>Interface yii\debug\models\search\UserSearchInterface</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fa6aeb3fc2d12c482beb79bc7a25c199c1c8c1ef" translate="yes" xml:space="preserve">
          <source>Interface yii\filters\RateLimitInterface</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="70b21e72dcc7a7bc099e45ff68390ad2e6efd5b2" translate="yes" xml:space="preserve">
          <source>Interface yii\filters\auth\AuthInterface</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="01a4c481c64d75df7379e9b57e9ecf30cc790f7e" translate="yes" xml:space="preserve">
          <source>Interface yii\httpclient\FormatterInterface</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6e20152ef5f704bfb0398d3c2dcdf9e690424edb" translate="yes" xml:space="preserve">
          <source>Interface yii\httpclient\ParserInterface</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0784064d46f0b15165ba8cf710a9a6f56ac68f2b" translate="yes" xml:space="preserve">
          <source>Interface yii\mail\MailerInterface</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c96d3b021ab4844b56494f4f59b5b3fb9c0e0527" translate="yes" xml:space="preserve">
          <source>Interface yii\mail\MessageInterface</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="366f28ebb01ee88bdf4745ac927f364eec5b8714" translate="yes" xml:space="preserve">
          <source>Interface yii\rbac\CheckAccessInterface</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="80b3aa9add198313bdb04eebcdf27573d2b50db1" translate="yes" xml:space="preserve">
          <source>Interface yii\rbac\ManagerInterface</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dd9c12990586c7d349300b85c5abf58d22bdddaf" translate="yes" xml:space="preserve">
          <source>Interface yii\web\AssetConverterInterface</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="17b9167faecd28e1fb2a0bbcb2a644b43c6899d8" translate="yes" xml:space="preserve">
          <source>Interface yii\web\IdentityInterface</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="90ae37c7b4ff7c57786e77c63323c9bdb1ebc8c9" translate="yes" xml:space="preserve">
          <source>Interface yii\web\Linkable</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="251266ee55efea4f724611aa72115696d8ed7612" translate="yes" xml:space="preserve">
          <source>Interface yii\web\RequestParserInterface</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1ae71e68adf3eb105abd5c8a9a4a317266872bab" translate="yes" xml:space="preserve">
          <source>Interface yii\web\ResponseFormatterInterface</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="45fbaa06ae92011d63ead7bc9e0b32a97f2e0b6a" translate="yes" xml:space="preserve">
          <source>Interface yii\web\UrlRuleInterface</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c3a5ace31cf0a4fd6a24f272d8420df6f5f549e5" translate="yes" xml:space="preserve">
          <source>Internal HTTP client.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3b755f7b857b999860755840e5f0964f6b120c4d" translate="yes" xml:space="preserve">
          <source>Internationalization</source>
          <target state="translated">Internationalization</target>
        </trans-unit>
        <trans-unit id="55678c6233b4e8256403a6d87de8bda0e77808ff" translate="yes" xml:space="preserve">
          <source>Internationalization (I18N) refers to the process of designing a software application so that it can be adapted to various languages and regions without engineering changes. For Web applications, this is of particular importance because the potential users may be worldwide. Yii offers a full spectrum of I18N features that support message translation, view translation, date and number formatting.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ec41529ec988c31d48e2791253f7675f0f07663a" translate="yes" xml:space="preserve">
          <source>Internationalization and Localization</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3b345225b8997a0b00986b3ccff1b1f8b9bab1b5" translate="yes" xml:space="preserve">
          <source>InvalidCallException represents an exception caused by calling a method in a wrong way.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="212caccaad772fbea21747ed08a5e69221b90f8d" translate="yes" xml:space="preserve">
          <source>InvalidConfigException represents an exception caused by incorrect object configuration.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dd51af202c401c05f263fec1cf8d0ab7f4a2f1af" translate="yes" xml:space="preserve">
          <source>InvalidParamException represents an exception caused by invalid parameters passed to a method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0832988a1cf88136c2c529b068a1b86e9ca606f0" translate="yes" xml:space="preserve">
          <source>InvalidRouteException represents an exception caused by an invalid route.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5410323db3762a7d4ca4b3ee268a8421b445a052" translate="yes" xml:space="preserve">
          <source>InvalidValueException represents an exception caused by a function returning a value of unexpected type.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ed078df4d003d0b3cd855001e0db2c1f5865f3fc" translate="yes" xml:space="preserve">
          <source>Invalidates RBAC related cache</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4137efe1ea3617156377ecbf8f099c49915a6a78" translate="yes" xml:space="preserve">
          <source>Invalidates all of the cached data items that are associated with any of the specified &lt;a href=&quot;yii-caching-tagdependency#%24tags-detail&quot;&gt;$tags&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="40eae926bb84850c7e2e401ca1aba8fefc88f58f" translate="yes" xml:space="preserve">
          <source>Invalidates precompiled script cache (such as OPCache or APC) for the given file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="72a6aa2eb2ce4c79f3d15f1fe0bcf96592dbc4e2" translate="yes" xml:space="preserve">
          <source>Inverse Relations</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5237a71ae84eb0a88d8b429891cd78b9a5d46089" translate="yes" xml:space="preserve">
          <source>Inverts an SQL expressions with &lt;code&gt;NOT&lt;/code&gt; operator.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="81595013b8a47ec2d8e093b03d5f7bf04cbcd2cf" translate="yes" xml:space="preserve">
          <source>Invoke a callback with resolving dependencies in parameters.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="91dca1b632934189d9d6c880aa7bc4214c9a6563" translate="yes" xml:space="preserve">
          <source>Ip attribute input search value</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="302ef212e27e87db676e356a7b80c0951cfde119" translate="yes" xml:space="preserve">
          <source>Is the source data to extract a snippet from. It could be either a single string or array of strings.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eaa6ecd01685548632bbee726641854e5a1ab02d" translate="yes" xml:space="preserve">
          <source>Is token expired.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e4b33cfebdea4f3a0d4c2cd23cb8399beaaa2964" translate="yes" xml:space="preserve">
          <source>Is token valid.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d35d4477210affed8cfe05ccd3595f4f940e7ea2" translate="yes" xml:space="preserve">
          <source>Issues no error when an insufficient number of arguments have been provided. Instead, the placeholders will not be substituted.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="90fafd1df93c5da0d163104f07e23e90c26a073f" translate="yes" xml:space="preserve">
          <source>It accepts named arguments and mixed numeric and named arguments.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2f267867645da8df922bdc8b4c4f126a00b71b3b" translate="yes" xml:space="preserve">
          <source>It adds an additional WHERE condition for the given field and determines the comparison operator based on the first few characters of the given value. The condition is added in the same way as in &lt;a href=&quot;yii-db-querytrait#andFilterWhere()-detail&quot;&gt;andFilterWhere()&lt;/a&gt; so &lt;a href=&quot;yii-db-querytrait#isEmpty()-detail&quot;&gt;empty values&lt;/a&gt; are ignored. The new condition and the existing one will be joined using the &lt;code&gt;AND&lt;/code&gt; operator.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c43a145728fee1444ace624821b3d4b822029b6f" translate="yes" xml:space="preserve">
          <source>It allows to define allowed HTTP request methods for each action and will throw an HTTP 405 error when the method is not allowed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="90f6b20cb43792a3f75521480aee97ff781b7cb2" translate="yes" xml:space="preserve">
          <source>It allows to fetch not only rows and total rows count, but also a meta information and facet results.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="32d22bee08011b2ca7a95df3f084d49b8939aa57" translate="yes" xml:space="preserve">
          <source>It allows to fetch not only rows and total rows count, but full query results including aggregations and so on.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1199a1616d7b035e2dae63f9388ce454979590ea" translate="yes" xml:space="preserve">
          <source>It also handles objects by using the PHP functions serialize() and unserialize().</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7a9217699b2832f178701bede490df16cdc08538" translate="yes" xml:space="preserve">
          <source>It also may change attribute's value if normalization of IPv6 expansion is enabled.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6a8c9f29b7655a6022e9fe1ec05b097999e21a6c" translate="yes" xml:space="preserve">
          <source>It also supports &lt;a href=&quot;http://redis.io/commands/auth&quot;&gt;the AUTH command&lt;/a&gt; of redis. When the server needs authentication, you can set the &lt;a href=&quot;yii-redis-connection#%24password-detail&quot;&gt;$password&lt;/a&gt; property to authenticate with the server after connect.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d065b2a737f424b6bb2a086d524e74ef12a8d02a" translate="yes" xml:space="preserve">
          <source>It can also be a custom format as specified in the &lt;a href=&quot;http://userguide.icu-project.org/formatparse/datetime#TOC-Date-Time-Format-Syntax&quot;&gt;ICU manual&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="454aa12e82d2bbc8154a8e17e87458a55b943ef0" translate="yes" xml:space="preserve">
          <source>It can also be a custom format as specified in the &lt;a href=&quot;http://userguide.icu-project.org/formatparse/datetime#TOC-Date-Time-Format-Syntax&quot;&gt;ICU manual&lt;/a&gt;. Alternatively this can be a string prefixed with &lt;code&gt;php:&lt;/code&gt; representing a format that can be recognized by the PHP &lt;a href=&quot;http://php.net/manual/de/function.date.php&quot;&gt;date()&lt;/a&gt;-function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5133633d36549fbebf4958e0a82525110ad9f120" translate="yes" xml:space="preserve">
          <source>It can also be a custom format as specified in the &lt;a href=&quot;http://userguide.icu-project.org/formatparse/datetime#TOC-Date-Time-Format-Syntax&quot;&gt;ICU manual&lt;/a&gt;. Alternatively this can be a string prefixed with &lt;code&gt;php:&lt;/code&gt; representing a format that can be recognized by the PHP &lt;a href=&quot;http://php.net/manual/en/function.date.php&quot;&gt;date()&lt;/a&gt;-function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="75fe673e5394f576a5d11a8507b0c0b6ec22bfbf" translate="yes" xml:space="preserve">
          <source>It can also parse internationalized dates in a specific &lt;a href=&quot;yii-validators-datevalidator#%24locale-detail&quot;&gt;$locale&lt;/a&gt; like e.g. &lt;code&gt;12 мая 2014&lt;/code&gt; when &lt;a href=&quot;yii-validators-datevalidator#%24format-detail&quot;&gt;$format&lt;/a&gt; is configured to use a time pattern in ICU format.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a27990bf66f0d948f795885b7a43141c8f274077" translate="yes" xml:space="preserve">
          <source>It can correctly identify the recursively referenced objects in a complex object structure. It also has a recursive depth control to avoid indefinite recursive display of some peculiar variables.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="11d519ecbf2d2361f4b5d76a28bc37f5b72f996f" translate="yes" xml:space="preserve">
          <source>It checks if extension required is loaded.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4e9a32e88c2062df79e089e3d217fcbbc68b2221" translate="yes" xml:space="preserve">
          <source>It could be useful to specify extra configuration that is applied to each rule contained within &lt;a href=&quot;yii-rest-urlrule&quot;&gt;yii\rest\UrlRule&lt;/a&gt;. A good example would be specifying defaults for &lt;code&gt;expand&lt;/code&gt; parameter:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="05e01bb517ce649066d217b8860059ba8c136db5" translate="yes" xml:space="preserve">
          <source>It creates the memcache instance and adds memcache servers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="89899e1ef9b0fe529fde8aeaf6009c836cab54cb" translate="yes" xml:space="preserve">
          <source>It defaults to &lt;a href=&quot;yii-web-request#%24baseUrl-detail&quot;&gt;yii\web\Request::$baseUrl&lt;/a&gt;. This is mainly used when &lt;a href=&quot;yii-web-urlmanager#%24enablePrettyUrl-detail&quot;&gt;$enablePrettyUrl&lt;/a&gt; is &lt;code&gt;true&lt;/code&gt; and &lt;a href=&quot;yii-web-urlmanager#%24showScriptName-detail&quot;&gt;$showScriptName&lt;/a&gt; is &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8a728ca560a8aae336f221bc87c5181b5e5bee64" translate="yes" xml:space="preserve">
          <source>It defaults to &lt;a href=&quot;yii-web-request#%24scriptUrl-detail&quot;&gt;yii\web\Request::$scriptUrl&lt;/a&gt;. This is mainly used when &lt;a href=&quot;yii-web-urlmanager#%24enablePrettyUrl-detail&quot;&gt;$enablePrettyUrl&lt;/a&gt; is &lt;code&gt;false&lt;/code&gt; or &lt;a href=&quot;yii-web-urlmanager#%24showScriptName-detail&quot;&gt;$showScriptName&lt;/a&gt; is &lt;code&gt;true&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="10c5c351d15f103b9bc17ac09e45ba4c8a30db99" translate="yes" xml:space="preserve">
          <source>It defaults to &lt;code&gt;UTC&lt;/code&gt; so you only have to adjust this value if you store datetime values in another time zone in your database.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7e44ed7cf450651d283b26b3f88309329d180d35" translate="yes" xml:space="preserve">
          <source>It defaults to the directory containing the module class file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0bc3a1d545b7a0e506f429cba21a5d92903d23e6" translate="yes" xml:space="preserve">
          <source>It does nothing if a DB connection has already been established.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7cb4d76c2627f3ed0c1b85af950a217139857ca3" translate="yes" xml:space="preserve">
          <source>It does nothing if a MongoDB connection has already been established.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e5c06d71a780645ac1bafd69375220fdc4c7fde0" translate="yes" xml:space="preserve">
          <source>It does nothing if the connection is already closed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="db179dae3eada9ef431dc9a5f2a9899c6f5be58a" translate="yes" xml:space="preserve">
          <source>It does the translation by looking up the message to be translated in a message source which stores the original messages and the translated messages. If the message is found, the corresponding translated message will be returned; otherwise the original message will be returned untranslated.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="389ac910ce18f55d0bdbc0a953df1628d698fa01" translate="yes" xml:space="preserve">
          <source>It encapsulates the $_SERVER variable and resolves its inconsistency among different Web servers. Also it provides an interface to retrieve request parameters from $_POST, $_GET, $_COOKIES and REST parameters sent via other HTTP methods like PUT or DELETE.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c8ce105c040f1e461505a3672e95ceb67bd4300f" translate="yes" xml:space="preserve">
          <source>It encapsulates the parameters associated with an event. The &lt;a href=&quot;yii-base-event#%24sender-detail&quot;&gt;$sender&lt;/a&gt; property describes who raises the event. And the &lt;a href=&quot;yii-base-event#%24handled-detail&quot;&gt;$handled&lt;/a&gt; property indicates if the event is handled. If an event handler sets &lt;a href=&quot;yii-base-event#%24handled-detail&quot;&gt;$handled&lt;/a&gt; to be &lt;code&gt;true&lt;/code&gt;, the rest of the uninvoked handlers will no longer be called to handle the event.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8acc93b65ad30c37d9b974bd00555eb3cb6abbfa" translate="yes" xml:space="preserve">
          <source>It enhances the PHP built-in functions &lt;code&gt;json_encode()&lt;/code&gt; and &lt;code&gt;json_decode()&lt;/code&gt; by supporting encoding JavaScript expressions and throwing exceptions when decoding fails.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aed15eec7537c46d1666b1fb8fe89b67147949f3" translate="yes" xml:space="preserve">
          <source>It ensures &lt;a href=&quot;yii-swiftmailer-message#%24swiftMessage-detail&quot;&gt;$swiftMessage&lt;/a&gt; is also cloned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="db5e9c9e70524e8687126d5d61c516e0df75e517" translate="yes" xml:space="preserve">
          <source>It extends from &lt;a href=&quot;yii-baseyii&quot;&gt;yii\BaseYii&lt;/a&gt; which provides the actual implementation. By writing your own Yii class, you can customize some functionalities of &lt;a href=&quot;yii-baseyii&quot;&gt;yii\BaseYii&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ded4a272ba4b68057d44447d9738be4d747e5d94" translate="yes" xml:space="preserve">
          <source>It first looks for a key in &lt;a href=&quot;yii-base-theme#%24pathMap-detail&quot;&gt;$pathMap&lt;/a&gt; that is a substring of the given view file path;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a5ad7cd4f17ed35ef1b100c9654872d1ba80d7aa" translate="yes" xml:space="preserve">
          <source>It has no content yet.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="62b76ebe8d88156dc4de0944165d5ec409bd9e43" translate="yes" xml:space="preserve">
          <source>It has support for getting &lt;a href=&quot;yii-db-queryinterface#one()-detail&quot;&gt;one()&lt;/a&gt; instance or &lt;a href=&quot;yii-db-queryinterface#all()-detail&quot;&gt;all()&lt;/a&gt;. Allows pagination via &lt;a href=&quot;yii-db-queryinterface#limit()-detail&quot;&gt;limit()&lt;/a&gt; and &lt;a href=&quot;yii-db-queryinterface#offset()-detail&quot;&gt;offset()&lt;/a&gt;. Sorting is supported via &lt;a href=&quot;yii-db-queryinterface#orderBy()-detail&quot;&gt;orderBy()&lt;/a&gt; and items can be limited to match some conditions using &lt;a href=&quot;yii-db-queryinterface#where()-detail&quot;&gt;where()&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="06b262991f92d5df8d52d9d96f779941475b6812" translate="yes" xml:space="preserve">
          <source>It holds the &lt;a href=&quot;yii-web-response#%24headers-detail&quot;&gt;$headers&lt;/a&gt;, &lt;a href=&quot;yii-web-response#%24cookies-detail&quot;&gt;$cookies&lt;/a&gt; and &lt;a href=&quot;yii-web-response#%24content-detail&quot;&gt;$content&lt;/a&gt; that is to be sent to the client. It also controls the HTTP &lt;a href=&quot;yii-web-response#%24statusCode-detail&quot;&gt;status code&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="58c970be17232bf64859d3d2c88d274a68e51f85" translate="yes" xml:space="preserve">
          <source>It is a common task to increment or decrement a column in a database table. We call these columns &quot;counter columns&quot;. You can use &lt;a href=&quot;yii-db-baseactiverecord#updateCounters()-detail&quot;&gt;updateCounters()&lt;/a&gt; to update one or multiple counter columns. For example,</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3c1e64d0ec1283fec7e84d0c14f8d11c2efb9848" translate="yes" xml:space="preserve">
          <source>It is a wrapper for the PHP &lt;code&gt;$_SERVER&lt;/code&gt; variable which holds information about the currently running PHP script and the command line arguments given to it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="badd5c80e7a8585fdf6c7200f7a1b0a55ed4ef5d" translate="yes" xml:space="preserve">
          <source>It is also possible to just call &lt;code&gt;$query-&amp;gt;joinWith(['author']);&lt;/code&gt; when the alias is defined in the relation definition.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2b93ff272f7cbc1df49d8d1c3f40d5c181296e78" translate="yes" xml:space="preserve">
          <source>It is also recommended that you use an ICU version equal or greater than version 49. This will ensure you can use all the features described in this document. For example, an ICU version below 49 does not support using &lt;code&gt;#&lt;/code&gt; placeholders in plural rules. Please refer to &lt;a href=&quot;http://site.icu-project.org/download&quot;&gt;http://site.icu-project.org/download&lt;/a&gt; for a complete list of available ICU versions. Note that the version numbering has changed after the 4.8 release (e.g., ICU 4.8, ICU 49, ICU 50, etc.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="435705785b2f2b2097bdca619cf904bdadae211d" translate="yes" xml:space="preserve">
          <source>It is an action filter that can be added to a controller and handles the &lt;code&gt;beforeAction&lt;/code&gt; event.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f272a70db1a6bbedb3d2b2a8920bf62d946bc257" translate="yes" xml:space="preserve">
          <source>It is best used for displaying a model in a regular format (e.g. each model attribute is displayed as a row in a table). The model can be either an instance or subclass of &lt;a href=&quot;yii-base-model&quot;&gt;yii\base\Model&lt;/a&gt; such as an &lt;a href=&quot;guide-db-active-record&quot;&gt;active record&lt;/a&gt; or an associative array.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2fc0c00c45d1f0f2a5d16046ddd364fec4d8b490" translate="yes" xml:space="preserve">
          <source>It is further possible to limit the date within a certain range using &lt;a href=&quot;yii-validators-datevalidator#%24min-detail&quot;&gt;$min&lt;/a&gt; and &lt;a href=&quot;yii-validators-datevalidator#%24max-detail&quot;&gt;$max&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9e29a18e20911f45dcf0ba7bfb1ce0c0f6b1e175" translate="yes" xml:space="preserve">
          <source>It is handy to know whether an array is indexed or an associative. Here's an example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e505bc9470131ba9fd9fa473d57301f150832431" translate="yes" xml:space="preserve">
          <source>It is highly recommended to use &lt;a href=&quot;guide-structure-assets&quot;&gt;asset bundles&lt;/a&gt; to register external CSS files rather than &lt;a href=&quot;yii-web-view#registerCssFile()-detail&quot;&gt;registerCssFile()&lt;/a&gt;. Using asset bundles allows you to combine and compress multiple CSS files, which is desirable for high traffic websites. It also provides more flexibility as all asset dependencies of your application are configured in one place.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ba5dd4d1609e1ccfe3332edf7a29eb242b331604" translate="yes" xml:space="preserve">
          <source>It is highly recommended to use &lt;a href=&quot;guide-structure-assets&quot;&gt;asset bundles&lt;/a&gt; to register external JS files rather than &lt;a href=&quot;yii-web-view#registerJsFile()-detail&quot;&gt;registerJsFile()&lt;/a&gt; because these allow better flexibility and more granular dependency configuration. Also using asset bundles allows you to combine and compress multiple JS files, which is desirable for high traffic websites.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d756d6d1864092502123de800e04e1d1f88c6456" translate="yes" xml:space="preserve">
          <source>It is important that the fully qualified controller classes should be &lt;a href=&quot;guide-concept-autoloading&quot;&gt;autoloadable&lt;/a&gt; and the actual namespace of your controller classes match the value of this property. Otherwise, you will receive a &quot;Page Not Found&quot; error when accessing the application.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3ec72f61b6feaf6c072e9a4bd04490913c9c7610" translate="yes" xml:space="preserve">
          <source>It is important that you specify the package type of your extension as &lt;code&gt;yii2-extension&lt;/code&gt; so that the package can be recognized as a Yii extension when being installed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="84e963549c8e0626ef39e6bd02a7ede21a869fa4" translate="yes" xml:space="preserve">
          <source>It is important to make sure that the pairs of &lt;code&gt;beginProfile&lt;/code&gt; and &lt;code&gt;endProfile&lt;/code&gt; are properly nested. For example,</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="062dc60dfbba51727d4a7e5335c0df3e49a9ed97" translate="yes" xml:space="preserve">
          <source>It is important to remember that you add the &lt;code&gt;enctype&lt;/code&gt; option to the form so that the file can be properly uploaded. The &lt;code&gt;fileInput()&lt;/code&gt; call will render a &lt;code&gt;&amp;lt;input type=&quot;file&quot;&amp;gt;&lt;/code&gt; tag which will allow users to select a file to upload.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b68125c76b99aac4ae94a9acca2f53ca843b771b" translate="yes" xml:space="preserve">
          <source>It is important to understand the life cycles of Active Record when it is used for different purposes. During each life cycle, a certain sequence of methods will be invoked, and you can override these methods to get a chance to customize the life cycle. You can also respond to certain Active Record events triggered during a life cycle to inject your custom code. These events are especially useful when you are developing Active Record &lt;a href=&quot;guide-concept-behaviors&quot;&gt;behaviors&lt;/a&gt; which need to customize Active Record life cycles.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="16541b98b077f4ebcb4c47fc17115652e92c0ac1" translate="yes" xml:space="preserve">
          <source>It is necessary to override PDO's method as some MSSQL PDO driver (e.g. dblib) does not support getting attributes</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c8c70386e63814ee892359a581c8af4f52d03df7" translate="yes" xml:space="preserve">
          <source>It is often preferable to manage assets programmatically. For example, when you use the &lt;a href=&quot;yii-jui-datepicker&quot;&gt;yii\jui\DatePicker&lt;/a&gt; widget in a page, it will automatically include the required CSS and JavaScript files, instead of asking you to manually find these files and include them. And when you upgrade the widget to a new version, it will automatically use the new version of the asset files. In this tutorial, we will describe the powerful asset management capability provided in Yii.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9b38538428b5b6461dfc79ad3cb235d550c4d4b0" translate="yes" xml:space="preserve">
          <source>It is possible to configure multiple definitions at once, passing configuration array to &lt;a href=&quot;yii-di-container#setDefinitions()-detail&quot;&gt;setDefinitions()&lt;/a&gt; or &lt;a href=&quot;yii-di-container#setSingletons()-detail&quot;&gt;setSingletons()&lt;/a&gt; method. Iterating over the configuration array, the methods will call &lt;a href=&quot;yii-di-container#set()-detail&quot;&gt;set()&lt;/a&gt; or &lt;a href=&quot;yii-di-container#setSingleton()-detail&quot;&gt;setSingleton()&lt;/a&gt; respectively for each item.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4a7b8db1916ecef5539d848d8928c2b1fb5795ae" translate="yes" xml:space="preserve">
          <source>It is possible to connect to a redis server using &lt;a href=&quot;yii-redis-connection#%24hostname-detail&quot;&gt;$hostname&lt;/a&gt; and &lt;a href=&quot;yii-redis-connection#%24port-detail&quot;&gt;$port&lt;/a&gt; or using a &lt;a href=&quot;yii-redis-connection#%24unixSocket-detail&quot;&gt;$unixSocket&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cb05251de537836c044a98b48cc29adb29cddbc2" translate="yes" xml:space="preserve">
          <source>It is possible to include Web server names in the patterns of URL rules. This is mainly useful when your application should behave differently for different Web server names. For example, the following rules will parse the URL &lt;code&gt;http://admin.example.com/login&lt;/code&gt; into the route &lt;code&gt;admin/user/login&lt;/code&gt; and &lt;code&gt;http://www.example.com/login&lt;/code&gt; into &lt;code&gt;site/login&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="07c53912dd5fa17c6ec70a347e1f858ac2f4433c" translate="yes" xml:space="preserve">
          <source>It is possible to map a single path to multiple paths. For example,</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a1bc5beceb79eedc2c43fcca4fc0eda27dfdafe7" translate="yes" xml:space="preserve">
          <source>It is possible to provide default way of converting object to array for a specific class by implementing &lt;a href=&quot;yii-base-arrayable&quot;&gt;Arrayable&lt;/a&gt; interface in that class.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a6783dea010b569b6ca1b14b387cebbf69baebd7" translate="yes" xml:space="preserve">
          <source>It is possible to use a specific mode of data fetching by setting &lt;a href=&quot;yii-db-datareader#%24fetchMode-detail&quot;&gt;$fetchMode&lt;/a&gt;. See the &lt;a href=&quot;http://www.php.net/manual/en/function.PDOStatement-setFetchMode.php&quot;&gt;PHP manual&lt;/a&gt; for more details about possible fetch mode.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a4fa2b2497794839540c020e4aaf1a9f8f690162" translate="yes" xml:space="preserve">
          <source>It is recommended that you create an extension in terms of a &lt;a href=&quot;https://getcomposer.org/&quot;&gt;Composer package&lt;/a&gt; so that it can be more easily installed and used by other users, as described in the last subsection.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9f21b449e6f28ed349d2e6d4e2b73523a8be3f48" translate="yes" xml:space="preserve">
          <source>It is recommended that you create various test cases to cover your extension code rather than relying on manual tests. Each time before you release a new version of your extension, you may simply run these test cases to make sure everything is in good shape. Yii provides testing support, which can help you to more easily write unit tests, acceptance tests and functionality tests. For more details, please refer to the &lt;a href=&quot;guide-test-overview&quot;&gt;Testing&lt;/a&gt; section.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5463f47310fa33410358d0e2b962c1ff4e075c2b" translate="yes" xml:space="preserve">
          <source>It is recommended that you place assets belonging to an application in a Web directory to avoid the unnecessary asset publishing process. This is why &lt;code&gt;AppAsset&lt;/code&gt; in the prior example specifies &lt;a href=&quot;yii-web-assetbundle#%24basePath-detail&quot;&gt;basePath&lt;/a&gt; instead of &lt;a href=&quot;yii-web-assetbundle#%24sourcePath-detail&quot;&gt;sourcePath&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="00f46f7066f9d224c48b366c7692131decdbb782" translate="yes" xml:space="preserve">
          <source>It is recommended that you specify a language in terms of an &lt;a href=&quot;http://en.wikipedia.org/wiki/IETF_language_tag&quot;&gt;IETF language tag&lt;/a&gt;. For example, &lt;code&gt;en&lt;/code&gt; stands for English, while &lt;code&gt;en-US&lt;/code&gt; stands for English (United States).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="639559a18ed28fb96c7be7b03405b2b2f3819c61" translate="yes" xml:space="preserve">
          <source>It is supposed to be used in a class that implements the &lt;a href=&quot;yii-db-queryinterface&quot;&gt;yii\db\QueryInterface&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c3ce90737a765c504ddd862b28787fa840b2fa68" translate="yes" xml:space="preserve">
          <source>It is used by &lt;a href=&quot;yii-mongodb-command&quot;&gt;yii\mongodb\Command&lt;/a&gt; for particular commands and queries composition.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c2b24adea233777ea9c2a4b4ee5ff3cb198c30fd" translate="yes" xml:space="preserve">
          <source>It is used by &lt;a href=&quot;yii-web-assetmanager&quot;&gt;yii\web\AssetManager&lt;/a&gt; to convert files after they have been published.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="516a53c699a38ed82299e7bb54464186143ca6cd" translate="yes" xml:space="preserve">
          <source>It is used by &lt;a href=&quot;yii-web-response&quot;&gt;yii\web\Response&lt;/a&gt; to format response data.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="254ae0b615f45d6ec497d47e8ae361512b97982c" translate="yes" xml:space="preserve">
          <source>It is used to show data columns and allows &lt;a href=&quot;yii-grid-datacolumn#%24enableSorting-detail&quot;&gt;sorting&lt;/a&gt; and &lt;a href=&quot;yii-grid-datacolumn#%24filter-detail&quot;&gt;filtering&lt;/a&gt; them.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6902b56f58f3c5f376113def885af6be42675e73" translate="yes" xml:space="preserve">
          <source>It is usually created by calling &lt;a href=&quot;yii-db-connection#beginTransaction()-detail&quot;&gt;yii\db\Connection::beginTransaction()&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ece9eaccb18f9d5abc0a0d696e3031c7914976f4" translate="yes" xml:space="preserve">
          <source>It needs to be configured with a redis &lt;a href=&quot;yii-redis-connection&quot;&gt;yii\redis\Connection&lt;/a&gt; that is also configured as an application component. By default it will use the &lt;code&gt;redis&lt;/code&gt; application component.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b5b08891cccb4c34c0a495a0adc07afdfcf5204f" translate="yes" xml:space="preserve">
          <source>It often happens that the data being entered and/or displayed are in a format which is different from the one used in storing the data in a database. For example, in the database you are storing customers' birthdays as UNIX timestamps (which is not a good design, though), while in most cases you would like to manipulate birthdays as strings in the format of &lt;code&gt;'YYYY/MM/DD'&lt;/code&gt;. To achieve this goal, you can define &lt;em&gt;data transformation&lt;/em&gt; methods in the &lt;code&gt;Customer&lt;/code&gt; Active Record class like the following:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bea8cfcbc4eac41533c4914ce2c490623e21b837" translate="yes" xml:space="preserve">
          <source>It opens a popup window for the client authentication process. By default this widget relies on presence of &lt;a href=&quot;yii-authclient-collection&quot;&gt;yii\authclient\Collection&lt;/a&gt; among application components to get auth clients information.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="44a35c0bac74c7f72ab524e62d8ac9b6e7ad3795" translate="yes" xml:space="preserve">
          <source>It passes value to the inner iterator.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="34b1daeb190d978303ab027d93fc6cd4037bdc5c" translate="yes" xml:space="preserve">
          <source>It populate the table with the data returned by &lt;a href=&quot;yii-test-activefixture#getData()-detail&quot;&gt;getData()&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f131bff557d2143a7c13fe1c9968b87b68f3b69c" translate="yes" xml:space="preserve">
          <source>It provides features like &lt;a href=&quot;yii-widgets-baselistview#%24sorter-detail&quot;&gt;sorting&lt;/a&gt;, &lt;a href=&quot;yii-widgets-baselistview#%24pager-detail&quot;&gt;paging&lt;/a&gt; and also &lt;a href=&quot;yii-grid-gridview#%24filterModel-detail&quot;&gt;filtering&lt;/a&gt; the data.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7424318227eb48acdef562d28f805170e4b866a2" translate="yes" xml:space="preserve">
          <source>It provides features like sorting, paging and also filtering the data.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d5dc687d54aac6a85ffccb90ae2203ba202b7609" translate="yes" xml:space="preserve">
          <source>It provides functions to convert date format patterns between different conventions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6748c3e79ef95cc29bfcba1c70beae706418e4c9" translate="yes" xml:space="preserve">
          <source>It provides workarounds for improperly implemented functionalities of the MSSQL and DBLIB drivers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8b6f6ebbb61b8c66f95755d69161a146eeceb44c" translate="yes" xml:space="preserve">
          <source>It provides workarounds for improperly implemented functionalities of the SQLSRV driver.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="802bf4f719e3360a0082db55583b249fcdc55f49" translate="yes" xml:space="preserve">
          <source>It redirects method call to inner iterator.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e580b09190a2c303b5402ad9188dcf56c0dd8b0a" translate="yes" xml:space="preserve">
          <source>It removes all behaviors because they are attached to the old object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1e24a38f99fe0f09182e9bee4c537ed048247773" translate="yes" xml:space="preserve">
          <source>It returns value from the inner iterator.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e3020b1d152d6059769014c428299a6e3c5b5c24" translate="yes" xml:space="preserve">
          <source>It should have the same signature as &lt;a href=&quot;yii-widgets-listview#%24beforeItem-detail&quot;&gt;$beforeItem&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7595018fc143457ecb0d164e5c783edc9a45b5c6" translate="yes" xml:space="preserve">
          <source>It supports &lt;a href=&quot;yii-authclient-openid&quot;&gt;yii\authclient\OpenId&lt;/a&gt;, &lt;a href=&quot;yii-authclient-oauth1&quot;&gt;yii\authclient\OAuth1&lt;/a&gt; and &lt;a href=&quot;yii-authclient-oauth2&quot;&gt;yii\authclient\OAuth2&lt;/a&gt; client types.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="51cb992866e9a16606be035789f3c2b5e635e986" translate="yes" xml:space="preserve">
          <source>It uses the PHP intl extension's &lt;a href=&quot;http://www.php.net/manual/en/class.messageformatter.php&quot;&gt;MessageFormatter&lt;/a&gt; and works around some issues. If PHP intl is not installed a fallback will be used that supports a subset of the ICU message format.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5c418f46b6898971cd81466eec272703dcdddc1d" translate="yes" xml:space="preserve">
          <source>It uses the PHP intl extension's &lt;a href=&quot;http://www.php.net/manual/en/messageformatter.parsemessage.php&quot;&gt;MessageFormatter::parse()&lt;/a&gt; and adds support for named arguments. Usage of this method requires PHP intl extension to be installed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="de7d84e952f5373c3277dbce4a728b3ddf6d8d40" translate="yes" xml:space="preserve">
          <source>It will allow you to theme &lt;code&gt;@app/modules/blog/views/comment/index.php&lt;/code&gt; into &lt;code&gt;@app/themes/basic/modules/blog/views/comment/index.php&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4a69f4ab14d39fb98d118848d66da79417698347" translate="yes" xml:space="preserve">
          <source>It will also try to convert non-CSS or JS files (e.g. LESS, Sass) into the corresponding CSS or JS files using &lt;a href=&quot;yii-web-assetmanager#%24converter-detail&quot;&gt;asset converter&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c29732523a5be5f4a01c51f1ab8b28d6f577e7d9" translate="yes" xml:space="preserve">
          <source>It will join all columns into a string with comma as separators.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1cacf9359d6cad637a6a34b4805a0a69023006b3" translate="yes" xml:space="preserve">
          <source>It will then check if the updated view file exists or not. If so, that file will be used to replace the original view file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="22dba5bdedd78fa7de659a7ce12a85deea2dbdd5" translate="yes" xml:space="preserve">
          <source>It's a good practice to define meaningful constants for your controller in case you have more error code types.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b71a537ef5bb5a2eaf3606015fdc78eb142da6d4" translate="yes" xml:space="preserve">
          <source>It's a one-time project that will no longer be worked on.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9425ca1cca62ec8a8bcdc958d3c1bbd5887e2772" translate="yes" xml:space="preserve">
          <source>It's also possible to use key instead of password via &lt;a href=&quot;yii-base-security#encryptByKey()-detail&quot;&gt;yii\base\Security::encryptByKey()&lt;/a&gt; and &lt;a href=&quot;yii-base-security#decryptByKey()-detail&quot;&gt;yii\base\Security::decryptByKey()&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="14d5c9fde290fe01df6f45234cdc30f9759137af" translate="yes" xml:space="preserve">
          <source>Item 1</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="18ced5c76db797e1292c85b44d21d36295e5a2f8" translate="yes" xml:space="preserve">
          <source>Item 2</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e44739c3e353a3ae73c55984dd40ae4b03f08097" translate="yes" xml:space="preserve">
          <source>Item 3</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ed8246a860cdb8b17508b2b2e298eec6cac7ab35" translate="yes" xml:space="preserve">
          <source>Item 4</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c0fcc554ccff879f567ef032a1d01802ce78956a" translate="yes" xml:space="preserve">
          <source>Item index.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="29e34590c00f9404b818d318193cb5de69513705" translate="yes" xml:space="preserve">
          <source>Item label.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6bc5eec04878d10b41059c11a4cce09c74455c81" translate="yes" xml:space="preserve">
          <source>Iterates over &lt;a href=&quot;yii-web-urlrule#%24placeholders-detail&quot;&gt;$placeholders&lt;/a&gt; and checks whether each placeholder exists as a key in $matches array.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="78f1b4e4c6d73e121256eefe6748ba446c8487ee" translate="yes" xml:space="preserve">
          <source>Iterates through specified rules and calls &lt;a href=&quot;yii-web-compositeurlrule#createUrl()-detail&quot;&gt;createUrl()&lt;/a&gt; for each of them.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="954c8b41c673d8226e3e3467a1a8343177ec64d1" translate="yes" xml:space="preserve">
          <source>Iteration number</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bae8809b2429231a50c28ba87cecc038aac88855" translate="yes" xml:space="preserve">
          <source>Iterator</source>
          <target state="translated">Iterator</target>
        </trans-unit>
        <trans-unit id="9403aa5efbdb22c2f1977f9b3d45b6c23b569ce4" translate="yes" xml:space="preserve">
          <source>Its main task is to toggle integrity check of the database during data loading. This is needed by other DB-related fixtures (e.g. &lt;a href=&quot;yii-test-activefixture&quot;&gt;yii\test\ActiveFixture&lt;/a&gt;) so that they can populate data into the database without triggering integrity check errors.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5766bfd5841dee1b6f2aaf89bbb921f60e7d1b6f" translate="yes" xml:space="preserve">
          <source>JSON format</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="adf3b32b70ceb32a9085598f64127c92241a1e9f" translate="yes" xml:space="preserve">
          <source>JWS algorithms, which are allowed to be used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0bdbf91316a853d735e420a1dafcace50da7151a" translate="yes" xml:space="preserve">
          <source>JWS algorithms, which are allowed to be used. These are used by &lt;code&gt;spomky-labs/jose&lt;/code&gt; library for JWS validation/decryption. Make sure &lt;code&gt;spomky-labs/jose&lt;/code&gt; supports the particular algorithm before adding it here.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="394dea453fe0f2d46e856dd2664100b7169fa2e6" translate="yes" xml:space="preserve">
          <source>JWS underlying data.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="48bc7c7e77cc67e67c2a92ccb875a96515be001f" translate="yes" xml:space="preserve">
          <source>JavaScript button itself generated by \yii\authclient\clients\yii\authclient\widgets\GooglePlusButton widget. If you are using \yii\authclient\clients\yii\authclient\widgets\AuthChoice it will appear automatically. Otherwise you need to add it into your page manually. You may customize its appearance using 'widget' key at &lt;a href=&quot;yii-authclient-baseclient#%24viewOptions-detail&quot;&gt;$viewOptions&lt;/a&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9ee87f77ff1cd9a798e5b0c75ba2d2de50ea237d" translate="yes" xml:space="preserve">
          <source>JavaScript file compressor.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="40da65be9a7c8710e9aa40b96f54c02232a955ba" translate="yes" xml:space="preserve">
          <source>JavaScript file compressor. If a string, it is treated as shell command template, which should contain placeholders {from} - source file name - and {to} - output file name. Otherwise, it is treated as PHP callback, which should perform the compression.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0d8f160a6c2fd9ddf6bf32b0a9d0699412d032dc" translate="yes" xml:space="preserve">
          <source>JavaScript files are combined, compressed and written to &lt;code&gt;js/all-{hash}.js&lt;/code&gt; where {hash} is replaced with the hash of the resulting file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="37fc744b377e37e4d25b618eb94f2e5961da9223" translate="yes" xml:space="preserve">
          <source>JavaScript function name.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="45104ab0da2643be241e111b35b858fab612105e" translate="yes" xml:space="preserve">
          <source>Joining with Relations</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fe79a8c2a70073c5f85a3dd5282c58ea806f0110" translate="yes" xml:space="preserve">
          <source>Joins with the specified relations.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0a553bfa58667cdae81434070798b551c5c7b08b" translate="yes" xml:space="preserve">
          <source>JsExpression marks a string as a JavaScript expression.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a39c80ac4ae6093a2cb99575bc52b72b361ab4dd" translate="yes" xml:space="preserve">
          <source>Json is a helper class providing JSON data encoding and decoding.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3137c3bdc4254e2d689f3bae4bc9ec23609e2b89" translate="yes" xml:space="preserve">
          <source>Json string or array of data to store</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f1f4129b55aad72ca05992463d9fae98f805894d" translate="yes" xml:space="preserve">
          <source>JsonResponseFormatter formats the given data into a JSON or JSONP response content.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="efada65b775773e67d70408dadefb1568f30d3e9" translate="yes" xml:space="preserve">
          <source>Keep Yii CSRF protection enabled.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="abca61e71b2fade3d232154e06c85efccc13232b" translate="yes" xml:space="preserve">
          <source>Keep in mind that customization made via &lt;a href=&quot;yii-web-assetmanager#%24bundles-detail&quot;&gt;yii\web\AssetManager::$bundles&lt;/a&gt; is applied at the creation of the asset bundle, e.g. at object constructor stage. Thus any adjustments made to the bundle object after that will override the mapping setup at &lt;a href=&quot;yii-web-assetmanager#%24bundles-detail&quot;&gt;yii\web\AssetManager::$bundles&lt;/a&gt; level. In particular: adjustments made inside &lt;a href=&quot;yii-web-assetbundle#init()-detail&quot;&gt;yii\web\AssetBundle::init()&lt;/a&gt; method or over the registered bundle object will take precedence over &lt;code&gt;AssetManager&lt;/code&gt; configuration. Here are the examples, where mapping set via &lt;a href=&quot;yii-web-assetmanager#%24bundles-detail&quot;&gt;yii\web\AssetManager::$bundles&lt;/a&gt; makes no effect:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d310f486f71abe6bf48b2e365d77a015524fdf48" translate="yes" xml:space="preserve">
          <source>Keeps you focused on one thing at a time which results in improved planning and implementation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9a5a2bb480940ca6c7e9aefe683b69c88e51f3b6" translate="yes" xml:space="preserve">
          <source>Kept to match &lt;a href=&quot;yii-db-queryinterface&quot;&gt;yii\db\QueryInterface&lt;/a&gt;, its value is ignored.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1eeffa78fdad9a849e09f54683bacf7438ed48cb" translate="yes" xml:space="preserve">
          <source>Key derivation using standard algorithms: &lt;a href=&quot;yii-base-security#pbkdf2()-detail&quot;&gt;pbkdf2()&lt;/a&gt; and &lt;a href=&quot;yii-base-security#hkdf()-detail&quot;&gt;hkdf()&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eacd56ec60f535fbfc83f6a9a35278b0ec2b3b14" translate="yes" xml:space="preserve">
          <source>Key identifying the flash message type</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e3948cf0b8bb28a87e036f7a59e208c3d5160050" translate="yes" xml:space="preserve">
          <source>Key in &lt;a href=&quot;yii-authclient-oauthtoken#%24params-detail&quot;&gt;$params&lt;/a&gt; array, which stores token key.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="965d2014aceeff49347b18d3699fd60c662d6412" translate="yes" xml:space="preserve">
          <source>Key in &lt;a href=&quot;yii-authclient-oauthtoken#%24params-detail&quot;&gt;$params&lt;/a&gt; array, which stores token secret key.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="572f0e0eb3891af729345868f4e3bc5502ab39a3" translate="yes" xml:space="preserve">
          <source>Key name of the array element</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="228ea3a37fec3998b56612bb0b1b43383fdf01ee" translate="yes" xml:space="preserve">
          <source>Key name of the array element, an array of keys or property name of the object, or an anonymous function returning the value. The anonymous function signature should be: &lt;code&gt;function($array, $defaultValue)&lt;/code&gt;. The possibility to pass an array of keys is available since version 2.0.4.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5a9e0f9669aaad5f3d4171b4572a9606fb11bb05" translate="yes" xml:space="preserve">
          <source>Key-value array of options to choose from</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9eec3d361dacbe41c0e70149bbca3539358acd8d" translate="yes" xml:space="preserve">
          <source>Keywords and statistics</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d2b1b5b3f5b6446d9521318155583acc76ce31db" translate="yes" xml:space="preserve">
          <source>LEVEL_ERROR</source>
          <target state="translated">LEVEL_ERROR</target>
        </trans-unit>
        <trans-unit id="659d13d5307a068a64cf185be136b0b17490214a" translate="yes" xml:space="preserve">
          <source>LEVEL_INFO</source>
          <target state="translated">LEVEL_INFO</target>
        </trans-unit>
        <trans-unit id="a72936db7d36c8346805ea98d4f6f40726fa2061" translate="yes" xml:space="preserve">
          <source>LEVEL_PROFILE</source>
          <target state="translated">LEVEL_PROFILE</target>
        </trans-unit>
        <trans-unit id="eb98608d5086f9b5c4d50e67ed41388a834ed080" translate="yes" xml:space="preserve">
          <source>LEVEL_PROFILE_BEGIN</source>
          <target state="translated">LEVEL_PROFILE_BEGIN</target>
        </trans-unit>
        <trans-unit id="a2e7efcc224d4ab029fba6835603957ebffe77ed" translate="yes" xml:space="preserve">
          <source>LEVEL_PROFILE_END</source>
          <target state="translated">LEVEL_PROFILE_END</target>
        </trans-unit>
        <trans-unit id="322e32ed2759b3527609622ac419af89b0abb6d2" translate="yes" xml:space="preserve">
          <source>LEVEL_TRACE</source>
          <target state="translated">LEVEL_TRACE</target>
        </trans-unit>
        <trans-unit id="040ff5de31b9f372ed7c317fd1dda33aa88925ff" translate="yes" xml:space="preserve">
          <source>LEVEL_WARNING</source>
          <target state="translated">LEVEL_WARNING</target>
        </trans-unit>
        <trans-unit id="29bc302e46b9e3593b40478f9b0a81df7e77d119" translate="yes" xml:space="preserve">
          <source>LINK_FIRST</source>
          <target state="translated">LINK_FIRST</target>
        </trans-unit>
        <trans-unit id="e7dfdf12c1a6de7352d6ba432245c486f12cd86a" translate="yes" xml:space="preserve">
          <source>LINK_LAST</source>
          <target state="translated">LINK_LAST</target>
        </trans-unit>
        <trans-unit id="42ac3a5f5e93bc6de89e295520640bd3aa2feb04" translate="yes" xml:space="preserve">
          <source>LINK_NEXT</source>
          <target state="translated">LINK_NEXT</target>
        </trans-unit>
        <trans-unit id="b39d244a1226958f318d091f41ebab07b04ab5bb" translate="yes" xml:space="preserve">
          <source>LINK_PREV</source>
          <target state="translated">LINK_PREV</target>
        </trans-unit>
        <trans-unit id="74341e3c271df3c784e595b804b1f90be0f80429" translate="yes" xml:space="preserve">
          <source>Label</source>
          <target state="translated">Label</target>
        </trans-unit>
        <trans-unit id="c5344369303c85be0908c150ac1a540b775f9039" translate="yes" xml:space="preserve">
          <source>Label text. It will NOT be HTML-encoded. Therefore you can pass in HTML code such as an image tag. If this is is coming from end users, you should &lt;a href=&quot;yii-helpers-basehtml#encode()-detail&quot;&gt;encode()&lt;/a&gt; it to prevent XSS attacks.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a738fcb18716cbb58c41215f91444ae9df063b24" translate="yes" xml:space="preserve">
          <source>Label to be displayed in the &lt;a href=&quot;yii-grid-column#%24header-detail&quot;&gt;header cell&lt;/a&gt; and also to be used as the sorting link label when sorting is enabled for this column.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3332875152d1f6e56c2b0f6d7ced5d53b540a47a" translate="yes" xml:space="preserve">
          <source>Label to be displayed in the &lt;a href=&quot;yii-grid-column#%24header-detail&quot;&gt;header cell&lt;/a&gt; and also to be used as the sorting link label when sorting is enabled for this column. If it is not set and the models provided by the GridViews data provider are instances of &lt;a href=&quot;yii-db-activerecord&quot;&gt;yii\db\ActiveRecord&lt;/a&gt;, the label will be determined using &lt;a href=&quot;yii-db-baseactiverecord#getAttributeLabel()-detail&quot;&gt;yii\db\ActiveRecord::getAttributeLabel()&lt;/a&gt;. Otherwise &lt;a href=&quot;yii-helpers-baseinflector#camel2words()-detail&quot;&gt;yii\helpers\Inflector::camel2words()&lt;/a&gt; will be used to get a label.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="797385a38b7c23c4f8d9af4e72c95ca916ebef45" translate="yes" xml:space="preserve">
          <source>Labels and Errors</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="89b86ab0e66f527166d98df92ddbcf5416ed58f6" translate="yes" xml:space="preserve">
          <source>Language</source>
          <target state="translated">Language</target>
        </trans-unit>
        <trans-unit id="ff14617dcce78e689190623094ddf0b27d032404" translate="yes" xml:space="preserve">
          <source>Language to register translation file for</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="809ffb8821d48d8016d76dc7b28ffe5e9e9fd2b0" translate="yes" xml:space="preserve">
          <source>Language to use when generating fixtures data.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="218ad5a5d35ce65484235ded24fe59527a857c58" translate="yes" xml:space="preserve">
          <source>Last argument is PHP sort flag that could take the same values as the ones passed to PHP &lt;a href=&quot;http://php.net/manual/en/function.sort.php&quot;&gt;sort()&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9d89f36b5bb4fe24ac35cf180d0a95954f3a3212" translate="yes" xml:space="preserve">
          <source>Last inserted ID value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4312b9cdc22a0d8cf25ab213c9d034cee9ce16ee" translate="yes" xml:space="preserve">
          <source>Last-Modified</source>
          <target state="translated">Last-Modified</target>
        </trans-unit>
        <trans-unit id="d85f400bc21b862742e07779e4d34b5a43f231ee" translate="yes" xml:space="preserve">
          <source>Last-Modified Header</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="39353b2a101d4b28790e11da6d758cfa0cdeb81b" translate="yes" xml:space="preserve">
          <source>Later if you decide to change the thumbnail size, you only need to modify it in the application configuration; you don't need to touch any dependent code.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7bda8fc960e092db98f8703723b250cddb1296fe" translate="yes" xml:space="preserve">
          <source>Layout view name or &lt;a href=&quot;guide-concept-aliases&quot;&gt;path alias&lt;/a&gt;. If false, no layout will be applied.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="28e6f54e33a1151bfd4c7cc4affd14df3525f2db" translate="yes" xml:space="preserve">
          <source>Layouts</source>
          <target state="translated">Layouts</target>
        </trans-unit>
        <trans-unit id="6b2a6fb47bfc0655afde70e1af2fdc52c76b1680" translate="yes" xml:space="preserve">
          <source>Layouts are a special type of views that represent the common parts of multiple views. For example, the pages for most Web applications share the same page header and footer. While you can repeat the same page header and footer in every view, a better way is to do this once in a layout and embed the rendering result of a content view at an appropriate place in the layout.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cd9fa8949a528c77e40f0fcf701086c4c2abe613" translate="yes" xml:space="preserve">
          <source>Lazy Loading and Eager Loading</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="231cc2f077a23c082f774f5b05c49ed128af6ed2" translate="yes" xml:space="preserve">
          <source>Lazy loading is very convenient to use. However, it may suffer from a performance issue when you need to access the same relation property of multiple Active Record instances. Consider the following code example. How many SQL statements will be executed?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4afd149dcc08248cc4b4d3d72d4c42502e166254" translate="yes" xml:space="preserve">
          <source>Length for character types. This parameter is available since version 2.0.4.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d3a2a067efb54eb5864893e7d51bbad1e563829c" translate="yes" xml:space="preserve">
          <source>Length of the data type</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b757d3a9d080c4d44178dda4972fffb8c745b11c" translate="yes" xml:space="preserve">
          <source>Length of the output key in bytes. If 0, the output key is the length of the hash algorithm output.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a6898ed257f17b315468150764d7ec6839eeee3c" translate="yes" xml:space="preserve">
          <source>Length or precision of the column. See &lt;a href=&quot;yii-db-columnschemabuilder#%24length-detail&quot;&gt;$length&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="797bf1ffea40b9a1b9878306ce6dde8b7c67ad4a" translate="yes" xml:space="preserve">
          <source>Length or precision of the column. See &lt;a href=&quot;yii-db-columnschemabuilder#%24length-detail&quot;&gt;yii\db\ColumnSchemaBuilder::$length&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="835c5440c9d24f5ee57c0ff9f04ed20c76e24933" translate="yes" xml:space="preserve">
          <source>Length or precision of the column. See &lt;a href=&quot;yii-db-columnschemabuilder#%24length-detail&quot;&gt;yii\db\cubrid\ColumnSchemaBuilder::$length&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ddd7fbcf7caabfa012a3cd9a0e8a66723a8c5b21" translate="yes" xml:space="preserve">
          <source>Length or precision of the column. See &lt;a href=&quot;yii-db-columnschemabuilder#%24length-detail&quot;&gt;yii\db\mysql\ColumnSchemaBuilder::$length&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4c558a3ab4ab5bb80daa2e9ff2fb5e2acbfa86f5" translate="yes" xml:space="preserve">
          <source>Length or precision of the column. See &lt;a href=&quot;yii-db-columnschemabuilder#%24length-detail&quot;&gt;yii\db\oci\ColumnSchemaBuilder::$length&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a7cdeddf2735ecbac1e196480e2de30811f85be3" translate="yes" xml:space="preserve">
          <source>Length or precision of the column. See &lt;a href=&quot;yii-db-columnschemabuilder#%24length-detail&quot;&gt;yii\db\sqlite\ColumnSchemaBuilder::$length&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="33b931e15d1b897ad63eb06842e636934b9dc9b6" translate="yes" xml:space="preserve">
          <source>Let the translators translate messages and store them in the message source(s).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b9dda8dd777500112d0a3d6b488e1901110b75ba" translate="yes" xml:space="preserve">
          <source>Let's modify our example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ce7f8511a04f764e4ba9ea54216c405bc0e5cf4e" translate="yes" xml:space="preserve">
          <source>Let's say we need to check if the family income is enough for children. We can create inline validator &lt;code&gt;validateChildrenFunds&lt;/code&gt; for that which will run only when &lt;code&gt;childrenCount&lt;/code&gt; is more than 0.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f57406887eddf15717b6e8357580a6a092289d65" translate="yes" xml:space="preserve">
          <source>Let's start with the controller action:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="09f9976967e26045514aebbc88cac3cb535095c4" translate="yes" xml:space="preserve">
          <source>Let's use an example to further explain the above approach.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0496e84a828182064fc0adcd88efceb527d84020" translate="yes" xml:space="preserve">
          <source>Let's use some examples to illustrate how named parameters work. Assume we have declared the following three URL rules:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d5be32a05365447b9dc9613fb840f1e533d53ba2" translate="yes" xml:space="preserve">
          <source>Level filter and category filter are combinatorial, i.e., only messages satisfying both filter conditions will be handled. Additionally, you may specify &lt;a href=&quot;yii-log-target#%24except-detail&quot;&gt;$except&lt;/a&gt; to exclude messages of certain categories.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b8784441607e9ae1e4a0d363f27f45028b927794" translate="yes" xml:space="preserve">
          <source>Licensed under the three clause BSD license.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="91a0dc86d2f4bb13716169ba8cd98e33cccfe26c" translate="yes" xml:space="preserve">
          <source>Lighttpd v1.4: &lt;a href=&quot;http://redmine.lighttpd.net/projects/lighttpd/wiki/X-LIGHTTPD-send-file&quot;&gt;X-LIGHTTPD-send-file&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b2dceb54584b72164cfe0a96e11cc226e13c0ca1" translate="yes" xml:space="preserve">
          <source>Lighttpd v1.5: &lt;a href=&quot;http://redmine.lighttpd.net/projects/lighttpd/wiki/X-LIGHTTPD-send-file&quot;&gt;X-Sendfile&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="482884c11d536f0dab53357909c0c907fbd842ac" translate="yes" xml:space="preserve">
          <source>Like &lt;a href=&quot;#registering-meta-tags&quot;&gt;meta tags&lt;/a&gt;, link tags are useful in many cases, such as customizing favicon, pointing to RSS feed or delegating OpenID to another server. You can work with link tags in the similar way as meta tags by using &lt;a href=&quot;yii-web-view#registerLinkTag()-detail&quot;&gt;yii\web\View::registerLinkTag()&lt;/a&gt;. For example, in a content view, you can register a link tag like follows,</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2337907c5bba5b9e3ff0576a7608802b34561427" translate="yes" xml:space="preserve">
          <source>Like &lt;a href=&quot;guide-caching-data&quot;&gt;data caching&lt;/a&gt;, a unique &lt;code&gt;$id&lt;/code&gt; is needed to identify a content cache.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dae05612b3de910ef5e39063047988c22759df1a" translate="yes" xml:space="preserve">
          <source>Like &lt;a href=&quot;guide-caching-data#cache-dependencies&quot;&gt;data caching&lt;/a&gt;, content fragment being cached can also have dependencies. For example, the content of a post being displayed depends on whether or not the post is modified.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cc03393f986360d65cf27f07982c09182f8930f4" translate="yes" xml:space="preserve">
          <source>Like &lt;a href=&quot;guide-runtime-requests&quot;&gt;requests&lt;/a&gt; and &lt;a href=&quot;guide-runtime-responses&quot;&gt;responses&lt;/a&gt;, you can get access to sessions via the &lt;code&gt;session&lt;/code&gt;&lt;a href=&quot;guide-structure-application-components&quot;&gt;application component&lt;/a&gt; which is an instance of &lt;a href=&quot;yii-web-session&quot;&gt;yii\web\Session&lt;/a&gt;, by default.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d979d2f6074ce4ff67f39867cd18ba940210aa0b" translate="yes" xml:space="preserve">
          <source>Like &lt;a href=&quot;guide-structure-controllers&quot;&gt;controllers&lt;/a&gt; and &lt;a href=&quot;guide-structure-models&quot;&gt;models&lt;/a&gt;, there are conventions to organize views.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c1b6da1a8de29c6581cf1d21c54c38f071954f29" translate="yes" xml:space="preserve">
          <source>Like &lt;a href=&quot;yii-db-activequerytrait#with()-detail&quot;&gt;with()&lt;/a&gt;, you can join with one or multiple relations; you may customize the relation queries on-the-fly; you may join with nested relations; and you may mix the use of &lt;a href=&quot;yii-db-activequerytrait#with()-detail&quot;&gt;with()&lt;/a&gt; and &lt;a href=&quot;yii-db-activequery#joinWith()-detail&quot;&gt;joinWith()&lt;/a&gt;. For example,</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="94c94f83017eb3cbdaf2f4519fd53333e57bed8d" translate="yes" xml:space="preserve">
          <source>Like &lt;a href=&quot;yii-db-query#andWhere()-detail&quot;&gt;andWhere()&lt;/a&gt; and &lt;a href=&quot;yii-db-query#orWhere()-detail&quot;&gt;orWhere()&lt;/a&gt;, you can use &lt;a href=&quot;yii-db-querytrait#andFilterWhere()-detail&quot;&gt;andFilterWhere()&lt;/a&gt; and &lt;a href=&quot;yii-db-querytrait#orFilterWhere()-detail&quot;&gt;orFilterWhere()&lt;/a&gt; to append additional filter conditions to the existing one.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ef662e1b5e1beb2e90349f34328e9e70576fc69e" translate="yes" xml:space="preserve">
          <source>Like accessing controllers in an application, &lt;a href=&quot;guide-structure-controllers#routes&quot;&gt;routes&lt;/a&gt; are used to address controllers in a module. A route for a controller within a module must begin with the module ID followed by the &lt;a href=&quot;guide-structure-controllers#controller-ids&quot;&gt;controller ID&lt;/a&gt; and &lt;a href=&quot;structure-controllers.md#action-ids&quot;&gt;action ID&lt;/a&gt;. For example, if an application uses a module named &lt;code&gt;forum&lt;/code&gt;, then the route &lt;code&gt;forum/post/index&lt;/code&gt; would represent the &lt;code&gt;index&lt;/code&gt; action of the &lt;code&gt;post&lt;/code&gt; controller in the module. If the route only contains the module ID, then the &lt;a href=&quot;yii-base-module#%24defaultRoute-detail&quot;&gt;yii\base\Module::$defaultRoute&lt;/a&gt; property, which defaults to &lt;code&gt;default&lt;/code&gt;, will determine which controller/action should be used. This means a route &lt;code&gt;forum&lt;/code&gt; would represent the &lt;code&gt;default&lt;/code&gt; controller in the &lt;code&gt;forum&lt;/code&gt; module.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fe5373551bdb5d80f2496cb6e802026b7a419bf6" translate="yes" xml:space="preserve">
          <source>Like browser redirection, file sending is another feature that relies on specific HTTP headers. Yii provides a set of methods to support various file sending needs. They all have built-in support for the HTTP range header.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="65804e0016ba3e0c6503a7d96dc18a760df2c778" translate="yes" xml:space="preserve">
          <source>Like normal &lt;a href=&quot;guide-concept-configurations&quot;&gt;configurations&lt;/a&gt;, application configurations specify how to initialize properties of application objects. Because application configurations are often very complex, they usually are kept in &lt;a href=&quot;guide-concept-configurations#configuration-files&quot;&gt;configuration files&lt;/a&gt;, like the &lt;code&gt;web.php&lt;/code&gt; file in the above example.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7cf89d3c1ef52311cdd7408cf24ee707b624de2f" translate="yes" xml:space="preserve">
          <source>Like normal &lt;a href=&quot;guide-structure-models&quot;&gt;models&lt;/a&gt;, Active Record instances also enjoy the &lt;a href=&quot;guide-structure-models#massive-assignment&quot;&gt;massive assignment feature&lt;/a&gt;. Using this feature, you can assign values to multiple attributes of an Active Record instance in a single PHP statement, like shown below. Do remember that only &lt;a href=&quot;guide-structure-models#safe-attributes&quot;&gt;safe attributes&lt;/a&gt; can be massively assigned, though.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a2bc4dcfcf66746759e460440884ea203327d5d3" translate="yes" xml:space="preserve">
          <source>Like other data providers, SqlDataProvider also supports sorting and pagination. It does so by modifying the given &lt;a href=&quot;yii-data-sqldataprovider#%24sql-detail&quot;&gt;$sql&lt;/a&gt; statement with &quot;ORDER BY&quot; and &quot;LIMIT&quot; clauses. You may configure the &lt;a href=&quot;yii-data-basedataprovider#%24sort-detail&quot;&gt;$sort&lt;/a&gt; and &lt;a href=&quot;yii-data-basedataprovider#%24pagination-detail&quot;&gt;$pagination&lt;/a&gt; properties to customize sorting and pagination behaviors.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9338779c08933a376067cbdeb6d3e58d970d4673" translate="yes" xml:space="preserve">
          <source>Like regular session data, you can store arbitrary data as flash data.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="71e126d0d7c3f09b4e0b83582f3862361b467a8c" translate="yes" xml:space="preserve">
          <source>Like the &lt;a href=&quot;#language&quot;&gt;language&lt;/a&gt; property, you should configure this property in terms of an &lt;a href=&quot;http://en.wikipedia.org/wiki/IETF_language_tag&quot;&gt;IETF language tag&lt;/a&gt;. For example, &lt;code&gt;en&lt;/code&gt; stands for English, while &lt;code&gt;en-US&lt;/code&gt; stands for English (United States).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="628670184009c73fd7b4f2706c21acfc8d32e72d" translate="yes" xml:space="preserve">
          <source>Like working with plain text inputs, to upload a single file you would create a model class and use an attribute of the model to keep the uploaded file instance. You should also declare a validation rule to validate the file upload. For example,</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a7c04c64ed3f2a9374590c76c50d3b7f1b18e3da" translate="yes" xml:space="preserve">
          <source>Limitations</source>
          <target state="translated">Limitations</target>
        </trans-unit>
        <trans-unit id="f013cda76513264cfa583f0ca11bbe304d7f3a0e" translate="yes" xml:space="preserve">
          <source>Limitations of batch query in MySQL</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7566f85bc7398a183c295a555beb9cffb0fa5ca6" translate="yes" xml:space="preserve">
          <source>Link HTML options.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0eaa4a7f34a5354401866258f3b38e3115f942d3" translate="yes" xml:space="preserve">
          <source>Link body. It will NOT be HTML-encoded. Therefore you can pass in HTML code such as an image tag. If this is coming from end users, you should consider &lt;a href=&quot;yii-helpers-basehtml#encode()-detail&quot;&gt;encode()&lt;/a&gt; it to prevent XSS attacks.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1d2708f91272830e257be97266a06389c3e80d15" translate="yes" xml:space="preserve">
          <source>Link represents a link object as defined in &lt;a href=&quot;https://tools.ietf.org/html/draft-kelly-json-hal-03&quot;&gt;JSON Hypermedia API Language&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="32432a5d1fec70c525588e3aedb7e461abf59715" translate="yes" xml:space="preserve">
          <source>Link text, if not set - default value will be generated.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2cb68fb93681c3eb52e4447dbd6af16744b1a6a7" translate="yes" xml:space="preserve">
          <source>LinkPager displays a list of hyperlinks that lead to different pages of target.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9f5dde2fe3a5b1bff3251f5d9639b0c4de9d7fcb" translate="yes" xml:space="preserve">
          <source>LinkPager works with a &lt;a href=&quot;yii-data-pagination&quot;&gt;yii\data\Pagination&lt;/a&gt; object which specifies the total number of pages and the current page number.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="95dfacf07c3b56e60b62ce5bd4ca9c9b1a1b4dcb" translate="yes" xml:space="preserve">
          <source>LinkSorter renders a list of sort links for the given sort definition.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="48bdaaa6866e1404161de03a8fd9c4a7de6e2104" translate="yes" xml:space="preserve">
          <source>LinkSorter will generate a hyperlink for every attribute declared in &lt;a href=&quot;yii-widgets-linksorter#%24sort-detail&quot;&gt;$sort&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1abcf3efac2961bd6ee8a5da07cd75ac321766d6" translate="yes" xml:space="preserve">
          <source>Linkable is the interface that should be implemented by classes that typically represent locatable resources.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5e253f97052f961c78cb839ac5145fcfa7b8f188" translate="yes" xml:space="preserve">
          <source>Linkified with HTML type/class name.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="014bcd654c60d5250fad2123b073b9c0ac3340f6" translate="yes" xml:space="preserve">
          <source>Links</source>
          <target state="translated">Links</target>
        </trans-unit>
        <trans-unit id="648024d2b05620106a8c9984529a47346df6045c" translate="yes" xml:space="preserve">
          <source>List all available controllers and actions in machine readable format.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d4ef3ef4566f01fa81b7ad45415b207d83d0f662" translate="yes" xml:space="preserve">
          <source>List all available options for the $action in machine readable format.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="34dab8478695722f1cfea55a712d89281ba3253b" translate="yes" xml:space="preserve">
          <source>List of &lt;a href=&quot;yii-i18n-messagesource&quot;&gt;yii\i18n\MessageSource&lt;/a&gt; configurations or objects.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3824a565b6d589fa09f737fec7b052f864f57e04" translate="yes" xml:space="preserve">
          <source>List of &lt;a href=&quot;yii-i18n-messagesource&quot;&gt;yii\i18n\MessageSource&lt;/a&gt; configurations or objects. The array keys are message category patterns, and the array values are the corresponding &lt;a href=&quot;yii-i18n-messagesource&quot;&gt;yii\i18n\MessageSource&lt;/a&gt; objects or the configurations for creating the &lt;a href=&quot;yii-i18n-messagesource&quot;&gt;yii\i18n\MessageSource&lt;/a&gt; objects.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3f8f051447597b283c71b4d9d7fdb2a3ba8c2304" translate="yes" xml:space="preserve">
          <source>List of CSS files that this bundle contains.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="943f4415ff4513c612a8ad38e00edadda2c57efc" translate="yes" xml:space="preserve">
          <source>List of CSS files that this bundle contains. Each CSS file can be specified in one of the three formats as explained in &lt;a href=&quot;yii-web-assetbundle#%24js-detail&quot;&gt;$js&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f771c0bbea2209353980ab2d239220875acf76c6" translate="yes" xml:space="preserve">
          <source>List of HTML attributes for the &lt;code&gt;tab-content&lt;/code&gt; container.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f7c9b1002953abbefde7b1b2490853e47f6b47c5" translate="yes" xml:space="preserve">
          <source>List of HTML attributes for the &lt;code&gt;tab-content&lt;/code&gt; container. This will always contain the CSS class &lt;code&gt;tab-content&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9529d53f912f25efa400179349dd8c597d7caab9" translate="yes" xml:space="preserve">
          <source>List of HTML attributes for the header container tags.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5abba5dac1a4a64e4a3d796afb7fafa650e221fa" translate="yes" xml:space="preserve">
          <source>List of HTML attributes for the header container tags. This will be overwritten by the &quot;headerOptions&quot; set in individual &lt;a href=&quot;yii-bootstrap-tabs#%24items-detail&quot;&gt;$items&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c1185d4557fd2432da672a2604cddf48e69403ba" translate="yes" xml:space="preserve">
          <source>List of HTML attributes for the header container tags. This will be overwritten by the &quot;headerOptions&quot; set in individual &lt;a href=&quot;yii-jui-tabs#%24items-detail&quot;&gt;$items&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1cb71ade2d47a827d6fe3cce0dbaca61c12de041" translate="yes" xml:space="preserve">
          <source>List of HTML attributes for the item container tags.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f15162ddd2f220173ef05a2e252f16f136cbaa55" translate="yes" xml:space="preserve">
          <source>List of HTML attributes for the item container tags. This will be overwritten by the &quot;options&quot; set in individual &lt;a href=&quot;yii-bootstrap-tabs#%24items-detail&quot;&gt;$items&lt;/a&gt;. The following special options are recognized:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="408fce264b71f4d4ac59ee746838d35540a4c8d5" translate="yes" xml:space="preserve">
          <source>List of HTML attributes for the item container tags. This will be overwritten by the &quot;options&quot; set in individual &lt;a href=&quot;yii-jui-accordion#%24items-detail&quot;&gt;$items&lt;/a&gt;. The following special options are recognized:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="76ec4dd974d8bb1898dcf8d78de91ea1cf04938c" translate="yes" xml:space="preserve">
          <source>List of HTML attributes for the item container tags. This will be overwritten by the &quot;options&quot; set in individual &lt;a href=&quot;yii-jui-selectable#%24items-detail&quot;&gt;$items&lt;/a&gt;. The following special options are recognized:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a04b6e5e6f87670216a63fdfd92c4e203720d21e" translate="yes" xml:space="preserve">
          <source>List of HTML attributes for the item container tags. This will be overwritten by the &quot;options&quot; set in individual &lt;a href=&quot;yii-jui-sortable#%24items-detail&quot;&gt;$items&lt;/a&gt;. The following special options are recognized:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e73777739572a0b598482737c8083a27dd48c125" translate="yes" xml:space="preserve">
          <source>List of HTML attributes for the item container tags. This will be overwritten by the &quot;options&quot; set in individual &lt;a href=&quot;yii-jui-tabs#%24items-detail&quot;&gt;$items&lt;/a&gt;. The following special options are recognized:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="48183e619bf765eba0a524889d105e528c00769f" translate="yes" xml:space="preserve">
          <source>List of HTML attributes for the item header container tags.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5d804a1960621d5e35d6c363111325e3a69e0c75" translate="yes" xml:space="preserve">
          <source>List of HTML attributes for the item header container tags. This will be overwritten by the &quot;headerOptions&quot; set in individual &lt;a href=&quot;yii-jui-accordion#%24items-detail&quot;&gt;$items&lt;/a&gt;. The following special options are recognized:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="645b2c6af6a4f5a72ac955eb40a317939400ff78" translate="yes" xml:space="preserve">
          <source>List of HTML attributes for the tab header link tags.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="733e382fa690255d5efe8fd015d9cc8ebb5a562c" translate="yes" xml:space="preserve">
          <source>List of HTML attributes for the tab header link tags. This will be overwritten by the &quot;linkOptions&quot; set in individual &lt;a href=&quot;yii-bootstrap-tabs#%24items-detail&quot;&gt;$items&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="18a66158b032478c928e2098cc4671dba4d3fbb9" translate="yes" xml:space="preserve">
          <source>List of HTML attributes shared by all menu &lt;a href=&quot;yii-widgets-menu#%24items-detail&quot;&gt;$items&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4d84af1e62d06939a01c8d6c8a199417cf0bdd9e" translate="yes" xml:space="preserve">
          <source>List of HTML attributes shared by all menu &lt;a href=&quot;yii-widgets-menu#%24items-detail&quot;&gt;$items&lt;/a&gt;. If any individual menu item specifies its &lt;code&gt;options&lt;/code&gt;, it will be merged with this property before being used to generate the HTML attributes for the menu item tag. The following special options are recognized:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9f8975482ad85f42ed3ea3552f75321c0969e4d0" translate="yes" xml:space="preserve">
          <source>List of HTTP status codes and the corresponding texts</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a187876cdeee7199e74fcfe11f2ca1b7b10e1f82" translate="yes" xml:space="preserve">
          <source>List of JavaScript files that this bundle contains.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="44068b0da7b01ed7762aaf082929c2193d3da56a" translate="yes" xml:space="preserve">
          <source>List of JavaScript files that this bundle contains. Each JavaScript file can be specified in one of the following formats:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1971a7c0a32e0139a7abb06b7566a5f473ff22a8" translate="yes" xml:space="preserve">
          <source>List of URI schemes which should be considered valid.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5df5595ae03f96eb3280b58bbd58201fc022a130" translate="yes" xml:space="preserve">
          <source>List of URI schemes which should be considered valid. By default, http and https are considered to be valid schemes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f3b3af3ed85e014b879a624ba6c970d5f0b38fdd" translate="yes" xml:space="preserve">
          <source>List of acceptable actions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1c4a5225423ce40ecbf40b44bb95f1c56f30801a" translate="yes" xml:space="preserve">
          <source>List of acceptable actions. If not empty, only the actions within this array will have the corresponding URL rules created.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cadeafbe0cfd0737272fdbc3af594787c13f4421" translate="yes" xml:space="preserve">
          <source>List of action IDs separated by commas or spaces</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="12be6d9f9c9d08722dd3c13a58607e4df7f22964" translate="yes" xml:space="preserve">
          <source>List of action IDs that this filter should apply to.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c31de6d69574282c97def9e757c3148417f41b39" translate="yes" xml:space="preserve">
          <source>List of action IDs that this filter should apply to. If this property is not set, then the filter applies to all actions, unless they are listed in &lt;a href=&quot;yii-base-actionfilter#%24except-detail&quot;&gt;$except&lt;/a&gt;. If an action ID appears in both &lt;a href=&quot;yii-base-actionfilter#%24only-detail&quot;&gt;$only&lt;/a&gt; and &lt;a href=&quot;yii-base-actionfilter#%24except-detail&quot;&gt;$except&lt;/a&gt;, this filter will NOT apply to it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9149a4c229706ee4d1e8380b4853d295706fb87a" translate="yes" xml:space="preserve">
          <source>List of action IDs that this filter should not apply to.</source>
          <target state="new"/>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
