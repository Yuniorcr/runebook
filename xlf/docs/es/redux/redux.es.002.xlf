<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="es" datatype="htmlbody" original="redux">
    <body>
      <group id="redux">
        <trans-unit id="f289628c32a4808458fe68440054d194866e8e5c" translate="yes" xml:space="preserve">
          <source>Is there value to you in being able to restore this state to a given point in time (ie, time travel debugging)?</source>
          <target state="translated">¿Tiene algún valor para usted el poder restaurar este estado a un punto dado en el tiempo (es decir,la depuración del viaje en el tiempo)?</target>
        </trans-unit>
        <trans-unit id="ea4cec2a5adc22a33671afe8c2442bda5e76ae5a" translate="yes" xml:space="preserve">
          <source>Isolating Redux Sub-Apps</source>
          <target state="translated">Aislando las Sub-Apps de Redux</target>
        </trans-unit>
        <trans-unit id="ce286d263926cfdb1859da7cb4876ed9e5c9ba84" translate="yes" xml:space="preserve">
          <source>Isolating Subapps</source>
          <target state="translated">Aislamiento de subapartados</target>
        </trans-unit>
        <trans-unit id="b03cd03c1cbbbb49e2d53831a74d4f4cbf478570" translate="yes" xml:space="preserve">
          <source>Isolating a Redux app as a component in a bigger application, in which case you might want to create a store per root component instance.</source>
          <target state="translated">Aislar una aplicación Redux como un componente de una aplicación más grande,en cuyo caso puede que quieras crear una tienda por cada instancia de componente raíz.</target>
        </trans-unit>
        <trans-unit id="3e2da235921f2dc98b67a3405af6d4d8b66644a3" translate="yes" xml:space="preserve">
          <source>It detects a change by keeping a reference to the root state object, and a reference to &lt;em&gt;each value&lt;/em&gt; in the props object that's returned from the &lt;code&gt;mapStateToProps&lt;/code&gt; function.</source>
          <target state="translated">Detecta un cambio manteniendo una referencia al objeto de estado ra&amp;iacute;z y una referencia a &lt;em&gt;cada valor&lt;/em&gt; en el objeto props que devuelve la funci&amp;oacute;n &lt;code&gt;mapStateToProps&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="0678b386548901ffe5796fba691a7dd7a055517b" translate="yes" xml:space="preserve">
          <source>It does a bit of trickery to make sure that if you call &lt;code&gt;store.dispatch(action)&lt;/code&gt; from your middleware instead of &lt;code&gt;next(action)&lt;/code&gt;, the action will actually travel the whole middleware chain again, including the current middleware. This is useful for asynchronous middleware, as we have seen &lt;a href=&quot;asyncactions&quot;&gt;previously&lt;/a&gt;.</source>
          <target state="translated">Es un poco enga&amp;ntilde;oso asegurarse de que si llama &lt;code&gt;store.dispatch(action)&lt;/code&gt; desde su middleware en lugar de &lt;code&gt;next(action)&lt;/code&gt; , la acci&amp;oacute;n recorrer&amp;aacute; toda la cadena de middleware nuevamente, incluido el middleware actual. Esto es &amp;uacute;til para middleware asincr&amp;oacute;nico, como hemos visto &lt;a href=&quot;asyncactions&quot;&gt;anteriormente&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="c838975ff8bc1485249cfc27d4ffd7a7c7eba961" translate="yes" xml:space="preserve">
          <source>It does not require a build system or a view framework and exists to show the raw Redux API used with ES5.</source>
          <target state="translated">No requiere un sistema de construcción o un marco de visualización y existe para mostrar la API de Redux en bruto utilizado con ES5.</target>
        </trans-unit>
        <trans-unit id="72186694410e16c516c9d596656e81807bdc0ee2" translate="yes" xml:space="preserve">
          <source>It does so because the props object is actually a hash of prop names and their values (or selector functions that are used to retrieve or generate the values), such as in this example:</source>
          <target state="translated">Lo hace porque el objeto de utilería es en realidad un hash de nombres de utilería y sus valores (o funciones de selección que se utilizan para recuperar o generar los valores),como en este ejemplo:</target>
        </trans-unit>
        <trans-unit id="cd40f9379225350f73c28d7d8b350321206fccb5" translate="yes" xml:space="preserve">
          <source>It does this by performing a shallow equality check on each value within the object individually, and will only trigger a re-render if one of those checks fails.</source>
          <target state="translated">Lo hace realizando una comprobación de igualdad superficial de cada valor dentro del objeto de forma individual,y sólo desencadenará una nueva representación si una de esas comprobaciones falla.</target>
        </trans-unit>
        <trans-unit id="cc8c262fccc1fd13b37e15839544d8f0e42b7f17" translate="yes" xml:space="preserve">
          <source>It doesn't work because your action creator is just a function that &lt;em&gt;returns&lt;/em&gt; an action. It is up to you to actually dispatch it. We can't bind your action creators to a particular Store instance during the definition because apps that render on the server need a separate Redux store for every request.</source>
          <target state="translated">No funciona porque tu creador de acciones es solo una funci&amp;oacute;n que &lt;em&gt;devuelve&lt;/em&gt; una acci&amp;oacute;n. Depende de usted enviarlo. No podemos vincular a sus creadores de acciones a una instancia de Store en particular durante la definici&amp;oacute;n porque las aplicaciones que se procesan en el servidor necesitan una tienda Redux separada para cada solicitud.</target>
        </trans-unit>
        <trans-unit id="50bdebff8f75748e8eb5b1028b6f9e739d1e11eb" translate="yes" xml:space="preserve">
          <source>It helps keep the naming consistent because all action types are gathered in a single place.</source>
          <target state="translated">Ayuda a mantener la consistencia de los nombres porque todos los tipos de acción están reunidos en un solo lugar.</target>
        </trans-unit>
        <trans-unit id="79e39e70b7c42af694874a6eb695630593111193" translate="yes" xml:space="preserve">
          <source>It helps you write applications that behave consistently, run in different environments (client, server, and native), and are easy to test. On top of that, it provides a great developer experience, such as &lt;a href=&quot;https://github.com/gaearon/redux-devtools&quot;&gt;live code editing combined with a time traveling debugger&lt;/a&gt;.</source>
          <target state="translated">Le ayuda a escribir aplicaciones que se comportan de forma coherente, se ejecutan en diferentes entornos (cliente, servidor y nativo) y son f&amp;aacute;ciles de probar. Adem&amp;aacute;s de eso, proporciona una gran experiencia de desarrollador, como la &lt;a href=&quot;https://github.com/gaearon/redux-devtools&quot;&gt;edici&amp;oacute;n de c&amp;oacute;digo en vivo combinada con un depurador que viaja en el tiempo&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="94502169236559f86f242ead05d16d88d3912a58" translate="yes" xml:space="preserve">
          <source>It is a common convention that actions have a constant type that helps reducers (or Stores in Flux) identify them. We recommend that you use strings and not &lt;a href=&quot;https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Symbol&quot;&gt;Symbols&lt;/a&gt; for action types, because strings are serializable, and by using Symbols you make recording and replaying harder than it needs to be.</source>
          <target state="translated">Es una convenci&amp;oacute;n com&amp;uacute;n que las acciones tengan un tipo constante que ayude a los reductores (o Stores in Flux) a identificarlas. Recomendamos que utilice cadenas y no &lt;a href=&quot;https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Symbol&quot;&gt;s&amp;iacute;mbolos&lt;/a&gt; para los tipos de acci&amp;oacute;n, porque las cadenas se pueden serializar y, al usar s&amp;iacute;mbolos, hace que la grabaci&amp;oacute;n y la reproducci&amp;oacute;n sean m&amp;aacute;s dif&amp;iacute;ciles de lo necesario.</target>
        </trans-unit>
        <trans-unit id="61c76ff225751e91aabc5dfc794a50b75a44444c" translate="yes" xml:space="preserve">
          <source>It is a low-level API. Most likely, instead of using it directly, you'll use React (or other) bindings. If you commonly use the callback as a hook to react to state changes, you might want to &lt;a href=&quot;https://github.com/reactjs/redux/issues/303#issuecomment-125184409&quot;&gt;write a custom &lt;code&gt;observeStore&lt;/code&gt; utility&lt;/a&gt;. The &lt;code&gt;Store&lt;/code&gt; is also an &lt;a href=&quot;https://github.com/zenparsing/es-observable&quot;&gt;&lt;code&gt;Observable&lt;/code&gt;&lt;/a&gt;, so you can &lt;code&gt;subscribe&lt;/code&gt; to changes with libraries like &lt;a href=&quot;https://github.com/ReactiveX/RxJS&quot;&gt;RxJS&lt;/a&gt;.</source>
          <target state="translated">Es una API de bajo nivel. Lo m&amp;aacute;s probable es que, en lugar de usarlo directamente, use React (u otros) enlaces. Si utiliza habitualmente la devoluci&amp;oacute;n de llamada como un gancho para reaccionar a los cambios de estado, es posible que desee &lt;a href=&quot;https://github.com/reactjs/redux/issues/303#issuecomment-125184409&quot;&gt;escribir una utilidad &lt;code&gt;observeStore&lt;/code&gt; personalizada&lt;/a&gt; . La &lt;code&gt;Store&lt;/code&gt; tambi&amp;eacute;n es &lt;a href=&quot;https://github.com/zenparsing/es-observable&quot;&gt; &lt;code&gt;Observable&lt;/code&gt; &lt;/a&gt; , por lo que puede &lt;code&gt;subscribe&lt;/code&gt; a cambios con bibliotecas como &lt;a href=&quot;https://github.com/ReactiveX/RxJS&quot;&gt;RxJS&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="018b00e74a0acae9e7da52a47b45a777f33a4762" translate="yes" xml:space="preserve">
          <source>It is a low-level API. Most likely, instead of using it directly, you'll use React (or other) bindings. If you commonly use the callback as a hook to react to state changes, you might want to &lt;a href=&quot;https://github.com/reduxjs/redux/issues/303#issuecomment-125184409&quot;&gt;write a custom &lt;code&gt;observeStore&lt;/code&gt; utility&lt;/a&gt;. The &lt;code&gt;Store&lt;/code&gt; is also an &lt;a href=&quot;https://github.com/zenparsing/es-observable&quot;&gt;&lt;code&gt;Observable&lt;/code&gt;&lt;/a&gt;, so you can &lt;code&gt;subscribe&lt;/code&gt; to changes with libraries like &lt;a href=&quot;https://github.com/ReactiveX/RxJS&quot;&gt;RxJS&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3b86f7926b42042d8d9540bde7f55a9d1fbef0e9" translate="yes" xml:space="preserve">
          <source>It is also possible to do the reverse and migrate from Redux to any of these libraries following the same steps.</source>
          <target state="translated">También es posible hacer lo contrario y migrar de Redux a cualquiera de estas bibliotecas siguiendo los mismos pasos.</target>
        </trans-unit>
        <trans-unit id="f367ba512c5331d9b1a4dc415838a8c2dbcc6d80" translate="yes" xml:space="preserve">
          <source>It is also up to us whether to keep a single top-level history:</source>
          <target state="translated">También depende de nosotros si mantenemos una sola historia de alto nivel:</target>
        </trans-unit>
        <trans-unit id="837f9f9a88a29e4f25a6eaa8ea75e703183100af" translate="yes" xml:space="preserve">
          <source>It is an advanced API. You might need this if your app implements code splitting, and you want to load some of the reducers dynamically. You might also need this if you implement a hot reloading mechanism for Redux.</source>
          <target state="translated">Es una API avanzada.Puede que la necesites si tu aplicación implementa la división de código,y quieres cargar algunos de los reductores dinámicamente.También podrías necesitar esto si implementas un mecanismo de recarga en caliente para Redux.</target>
        </trans-unit>
        <trans-unit id="79971d102866cc7813eb74dfec64bdc730b286c2" translate="yes" xml:space="preserve">
          <source>It is another common convention that, instead of creating action objects inline in the places where you dispatch the actions, you would create functions generating them.</source>
          <target state="translated">Es otra convención común que,en lugar de crear objetos de acción en línea en los lugares donde se despachan las acciones,se crearían funciones que las generen.</target>
        </trans-unit>
        <trans-unit id="249542e851b7d943285bfc44e6d5f0e85e9977ed" translate="yes" xml:space="preserve">
          <source>It is equal to the last value returned by the store's reducer.</source>
          <target state="translated">Es igual al último valor devuelto por el reductor de la tienda.</target>
        </trans-unit>
        <trans-unit id="312b7c808648f4df7cabafd144e579400360a08e" translate="yes" xml:space="preserve">
          <source>It is essential to chaining middleware!</source>
          <target state="translated">¡Es esencial para encadenar el middleware!</target>
        </trans-unit>
        <trans-unit id="dda50451faae254a9269dbf26176ea6006fc9b9e" translate="yes" xml:space="preserve">
          <source>It is highly recommended that you only put plain serializable objects, arrays, and primitives into your store. It's &lt;em&gt;technically&lt;/em&gt; possible to insert non-serializable items into the store, but doing so can break the ability to persist and rehydrate the contents of a store, as well as interfere with time-travel debugging.</source>
          <target state="translated">Se recomienda encarecidamente que solo coloque objetos, matrices y primitivas simples serializables en su tienda. Es &lt;em&gt;t&amp;eacute;cnicamente&lt;/em&gt; posible insertar elementos no serializables en la tienda, pero hacerlo puede romper la capacidad de persistir y rehidratar el contenido de una tienda, as&amp;iacute; como interferir con la depuraci&amp;oacute;n del viaje en el tiempo.</target>
        </trans-unit>
        <trans-unit id="0d99f22665bd7c5155d03f21570bcb486fa6b3cf" translate="yes" xml:space="preserve">
          <source>It is important for it to be separate from &lt;code&gt;SELECT_SUBREDDIT&lt;/code&gt; or &lt;code&gt;INVALIDATE_SUBREDDIT&lt;/code&gt;. While they may occur one after another, as the app grows more complex, you might want to fetch some data independently of the user action (for example, to prefetch the most popular subreddits, or to refresh stale data once in a while). You may also want to fetch in response to a route change, so it's not wise to couple fetching to some particular UI event early on.</source>
          <target state="translated">Es importante para que sea separado de &lt;code&gt;SELECT_SUBREDDIT&lt;/code&gt; o &lt;code&gt;INVALIDATE_SUBREDDIT&lt;/code&gt; . Si bien pueden ocurrir uno tras otro, a medida que la aplicaci&amp;oacute;n se vuelve m&amp;aacute;s compleja, es posible que desee obtener algunos datos independientemente de la acci&amp;oacute;n del usuario (por ejemplo, para obtener los subreddits m&amp;aacute;s populares o para actualizar los datos obsoletos de vez en cuando). Tambi&amp;eacute;n es posible que desee buscar en respuesta a un cambio de ruta, por lo que no es aconsejable acoplar la b&amp;uacute;squeda a alg&amp;uacute;n evento de IU particular desde el principio.</target>
        </trans-unit>
        <trans-unit id="22e208a1f7d32f64abf692053d9b4ade71eacca6" translate="yes" xml:space="preserve">
          <source>It is reasonable to suggest that our state shape should change to answer these questions:</source>
          <target state="translated">Es razonable sugerir que nuestra forma de estado debería cambiar para responder a estas preguntas:</target>
        </trans-unit>
        <trans-unit id="2826728cd3002c85132f865368ccf2dfda1f035c" translate="yes" xml:space="preserve">
          <source>It is tempting to modify the &lt;code&gt;state&lt;/code&gt; or &lt;code&gt;action&lt;/code&gt; passed to you by Redux. Don't do this!</source>
          <target state="translated">Es tentador modificar el &lt;code&gt;state&lt;/code&gt; o la &lt;code&gt;action&lt;/code&gt; pasado Redux. &amp;iexcl;No hagas esto!</target>
        </trans-unit>
        <trans-unit id="d8e2ea8d61178d3cf1c5299a500dca66ebcdf724" translate="yes" xml:space="preserve">
          <source>It is tiny (2kB, including dependencies).</source>
          <target state="translated">Es diminuto (2kB,incluyendo las dependencias).</target>
        </trans-unit>
        <trans-unit id="c1c823da484f24ab1a299266700f4f493b22a5d4" translate="yes" xml:space="preserve">
          <source>It is up to you to choose the conventions for your project. You may start by using inline strings, and later transition to constants, and maybe later group them into a single file. Redux does not have any opinion here, so use your best judgment.</source>
          <target state="translated">Depende de usted elegir las convenciones para su proyecto.Puede comenzar usando cadenas en línea,y luego pasar a constantes,y tal vez más tarde agruparlas en un solo archivo.Redux no tiene ninguna opinión aquí,así que usa tu mejor criterio.</target>
        </trans-unit>
        <trans-unit id="05093663f45944f4c69e8ddf69de181df8a06f66" translate="yes" xml:space="preserve">
          <source>It is up to you to choose the state format. You can use plain objects or something like &lt;a href=&quot;http://facebook.github.io/immutable-js/&quot;&gt;Immutable&lt;/a&gt;. If you're not sure, start with plain objects.</source>
          <target state="translated">Depende de usted elegir el formato de estado. Puede usar objetos simples o algo como &lt;a href=&quot;http://facebook.github.io/immutable-js/&quot;&gt;Immutable&lt;/a&gt; . Si no est&amp;aacute; seguro, comience con objetos simples.</target>
        </trans-unit>
        <trans-unit id="42b2119c004b2cd337e8e588b7cbb41f7bc8bdc4" translate="yes" xml:space="preserve">
          <source>It is up to you to choose the state format. You can use plain objects or something like &lt;a href=&quot;https://facebook.github.io/immutable-js/&quot;&gt;Immutable&lt;/a&gt;. If you're not sure, start with plain objects.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="40839b1c8a38e69ec4218f19c9a385d95915a832" translate="yes" xml:space="preserve">
          <source>It is up to you to try a few options, choose a convention you like, and follow it, whether with, or without the middleware.</source>
          <target state="translated">Depende de ti probar algunas opciones,elegir una convención que te guste y seguirla,ya sea con o sin el middleware.</target>
        </trans-unit>
        <trans-unit id="b392f0ed8ea05e547e964224687831827c136e29" translate="yes" xml:space="preserve">
          <source>It is vital that these Prerequisite Concepts are &lt;strong&gt;thoroughly understood&lt;/strong&gt; before moving on to more advanced and Redux-specific techniques. A recommended reading list is available at:</source>
          <target state="translated">Es vital que estos conceptos de requisitos previos se &lt;strong&gt;comprendan a fondo&lt;/strong&gt; antes de pasar a t&amp;eacute;cnicas m&amp;aacute;s avanzadas y espec&amp;iacute;ficas de Redux. Una lista de lecturas recomendadas est&amp;aacute; disponible en:</target>
        </trans-unit>
        <trans-unit id="d5fa6252549b34d2727aeeb1fe8e3c816a3d8827" translate="yes" xml:space="preserve">
          <source>It may be helpful to see examples of what the different types of sub-reducer functions look like and how they fit together. Let's look at a demonstration of how a large single reducer function can be refactored into a composition of several smaller functions.</source>
          <target state="translated">Puede ser útil ver ejemplos de cómo son los diferentes tipos de funciones de los subreductores y cómo encajan entre sí.Veamos una demostración de cómo una gran función de un único reductor puede ser refactorizada en una composición de varias funciones más pequeñas.</target>
        </trans-unit>
        <trans-unit id="e02627810b718b477472f1f76a7b34ecc56b8eb7" translate="yes" xml:space="preserve">
          <source>It must never return &lt;code&gt;undefined&lt;/code&gt;. It is too easy to do this by mistake via an early &lt;code&gt;return&lt;/code&gt; statement, so &lt;code&gt;combineReducers&lt;/code&gt; throws if you do that instead of letting the error manifest itself somewhere else.</source>
          <target state="translated">Nunca debe volver &lt;code&gt;undefined&lt;/code&gt; . Es demasiado f&amp;aacute;cil hacer esto por error a trav&amp;eacute;s de una declaraci&amp;oacute;n de &lt;code&gt;return&lt;/code&gt; anticipada , por lo que &lt;code&gt;combineReducers&lt;/code&gt; arroja si lo hace en lugar de dejar que el error se manifieste en otro lugar.</target>
        </trans-unit>
        <trans-unit id="b1440628c9081aad68267a2e66c7ba0b0ef6cf7d" translate="yes" xml:space="preserve">
          <source>It needs to be rewritten like this:</source>
          <target state="translated">Necesita ser reescrito así:</target>
        </trans-unit>
        <trans-unit id="2003fb7b90831988d1d806aec866ee85ca010393" translate="yes" xml:space="preserve">
          <source>It needs to look at the previous state and the dispatched action, and determine what kind of work needs to be done</source>
          <target state="translated">Necesita mirar el estado previo y la acción despachada,y determinar qué tipo de trabajo debe hacerse</target>
        </trans-unit>
        <trans-unit id="5761524a50c8fdeeafeab8c5ae63d8a8423998ef" translate="yes" xml:space="preserve">
          <source>It only exposes a subset of the &lt;a href=&quot;../api/store&quot;&gt;store API&lt;/a&gt; to the middleware: &lt;a href=&quot;../api/store#dispatch&quot;&gt;&lt;code&gt;dispatch(action)&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../api/store#getState&quot;&gt;&lt;code&gt;getState()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">Solo expone un subconjunto de la &lt;a href=&quot;../api/store&quot;&gt;API&lt;/a&gt; de la tienda al middleware: &lt;a href=&quot;../api/store#dispatch&quot;&gt; &lt;code&gt;dispatch(action)&lt;/code&gt; &lt;/a&gt; y &lt;a href=&quot;../api/store#getState&quot;&gt; &lt;code&gt;getState()&lt;/code&gt; &lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="c914355546b42c63de745bfcca2aaeb3e2313f74" translate="yes" xml:space="preserve">
          <source>It seems that reducer isn't the right abstraction, but we're very close.</source>
          <target state="translated">Parece que ese reductor no es la abstracción correcta,pero estamos muy cerca.</target>
        </trans-unit>
        <trans-unit id="beb2e2454ed95b3107fe31d45f50cecc81a6856f" translate="yes" xml:space="preserve">
          <source>It then runs a shallow equality check on its reference to the root state object and the state object passed to it, and a separate series of shallow checks on each reference to the props object&amp;rsquo;s values and those that are returned from running the &lt;code&gt;mapStateToProps&lt;/code&gt; function again.</source>
          <target state="translated">Luego ejecuta una verificaci&amp;oacute;n de igualdad superficial en su referencia al objeto de estado ra&amp;iacute;z y el objeto de estado que se le ha pasado, y una serie separada de verificaciones superficiales en cada referencia a los valores del objeto props y los que se devuelven al ejecutar la funci&amp;oacute;n &lt;code&gt;mapStateToProps&lt;/code&gt; nuevamente.</target>
        </trans-unit>
        <trans-unit id="7396f0cc913742a2329483587f6bde1029a53425" translate="yes" xml:space="preserve">
          <source>It will then combine both sets of results into a single state tree:</source>
          <target state="translated">Luego combinará ambos conjuntos de resultados en un único árbol de estados:</target>
        </trans-unit>
        <trans-unit id="fe6fecbba3b0b6d0528af6e5ce21a171dd9d1cfb" translate="yes" xml:space="preserve">
          <source>It's a &lt;a href=&quot;http://knowyourmeme.com/memes/we-need-to-go-deeper&quot;&gt;&amp;ldquo;we need to go deeper&amp;rdquo;&lt;/a&gt; kind of moment, so it might take a while for this to make sense. The function cascade feels intimidating. ES6 arrow functions make this &lt;a href=&quot;https://en.wikipedia.org/wiki/Currying&quot;&gt;currying&lt;/a&gt; easier on eyes:</source>
          <target state="translated">Es un momento en el que &lt;a href=&quot;http://knowyourmeme.com/memes/we-need-to-go-deeper&quot;&gt;&quot;tenemos que ir m&amp;aacute;s profundo&quot;&lt;/a&gt; , por lo que puede llevar un tiempo que esto tenga sentido. La cascada de funciones resulta intimidante. Las funciones de flecha de ES6 facilitan este &lt;a href=&quot;https://en.wikipedia.org/wiki/Currying&quot;&gt;curado&lt;/a&gt; para los ojos:</target>
        </trans-unit>
        <trans-unit id="53bb5e1d4ed878477f0cfe96c4cca984251e5713" translate="yes" xml:space="preserve">
          <source>It's a good idea to pass as little data in each action as possible. For example, it's better to pass &lt;code&gt;index&lt;/code&gt; than the whole todo object.</source>
          <target state="translated">Es una buena idea pasar la menor cantidad de datos posible en cada acci&amp;oacute;n. Por ejemplo, es mejor pasar el &lt;code&gt;index&lt;/code&gt; que todo el objeto todo.</target>
        </trans-unit>
        <trans-unit id="66564241e2f2072f8ffd6342ef4d5f057cfbf2e9" translate="yes" xml:space="preserve">
          <source>It's also important to note that some of these suggestions may or may not be directly applicable based on architectural decisions in a specific application. For example, an application using Immutable.js Maps to store data would likely have its reducer logic structured at least somewhat differently than an application using plain Javascript objects. This documentation primarily assumes use of plain Javascript objects, but many of the principles would still apply if using other tools.</source>
          <target state="translated">También es importante señalar que algunas de estas sugerencias pueden o no ser directamente aplicables sobre la base de decisiones arquitectónicas en una aplicación específica.Por ejemplo,una aplicación que utilice Mapas Immutable.js para almacenar datos probablemente tendría su lógica reductora estructurada al menos de forma algo diferente a una aplicación que utilice objetos Javascript simples.Esta documentación asume principalmente el uso de objetos Javascript simples,pero muchos de los principios seguirían aplicándose si se utilizaran otras herramientas.</target>
        </trans-unit>
        <trans-unit id="1d8a4e5e3006a924b03ad0f0eb598b2f0f5eaed6" translate="yes" xml:space="preserve">
          <source>It's best not to mix this approach with standard Redux reducer composition. For typical web apps, stick with reducer composition. For &amp;ldquo;product hubs&amp;rdquo;, &amp;ldquo;dashboards&amp;rdquo;, or enterprise software that groups disparate tools into a unified package, give the sub-app approach a try.</source>
          <target state="translated">Es mejor no mezclar este enfoque con la composici&amp;oacute;n est&amp;aacute;ndar del reductor Redux. Para aplicaciones web t&amp;iacute;picas, qu&amp;eacute;dese con la composici&amp;oacute;n reductora. Para los &quot;centros de productos&quot;, los &quot;paneles de control&quot; o el software empresarial que agrupa herramientas dispares en un paquete unificado, pruebe el enfoque de la sub-aplicaci&amp;oacute;n.</target>
        </trans-unit>
        <trans-unit id="252a3efbc077a7d5a93fd6d1dbfedaa2d2669df6" translate="yes" xml:space="preserve">
          <source>It's called a reducer because it's the type of function you would pass to &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/Reduce&quot;&gt;&lt;code&gt;Array.prototype.reduce(reducer, ?initialValue)&lt;/code&gt;&lt;/a&gt;. It's very important that the reducer stays pure. Things you should &lt;strong&gt;never&lt;/strong&gt; do inside a reducer:</source>
          <target state="translated">Se llama reductor porque es el tipo de funci&amp;oacute;n que pasar&amp;iacute;a a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/Reduce&quot;&gt; &lt;code&gt;Array.prototype.reduce(reducer, ?initialValue)&lt;/code&gt; &lt;/a&gt; . Es muy importante que el reductor se mantenga puro. Cosas que &lt;strong&gt;nunca&lt;/strong&gt; debes hacer dentro de un reductor:</target>
        </trans-unit>
        <trans-unit id="6a58a3a8e0f482a446b06f379efada2fd4c57438" translate="yes" xml:space="preserve">
          <source>It's easy to create a store if you have a reducer. In the &lt;a href=&quot;reducers&quot;&gt;previous section&lt;/a&gt;, we used &lt;a href=&quot;../api/combinereducers&quot;&gt;&lt;code&gt;combineReducers()&lt;/code&gt;&lt;/a&gt; to combine several reducers into one. We will now import it, and pass it to &lt;a href=&quot;../api/createstore&quot;&gt;&lt;code&gt;createStore()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">Es f&amp;aacute;cil crear una tienda si tienes un reductor. En la &lt;a href=&quot;reducers&quot;&gt;secci&amp;oacute;n anterior&lt;/a&gt; , usamos &lt;a href=&quot;../api/combinereducers&quot;&gt; &lt;code&gt;combineReducers()&lt;/code&gt; &lt;/a&gt; para combinar varios reductores en uno. Ahora lo importaremos y lo &lt;a href=&quot;../api/createstore&quot;&gt; &lt;code&gt;createStore()&lt;/code&gt; &lt;/a&gt; a createStore () .</target>
        </trans-unit>
        <trans-unit id="fb4ae669548f27a4108b547b46fa2c12ac612f32" translate="yes" xml:space="preserve">
          <source>It's for this improvement in performance that Redux uses shallow equality checking.</source>
          <target state="translated">Es por esta mejora en el rendimiento que Redux utiliza un control de igualdad superficial.</target>
        </trans-unit>
        <trans-unit id="98dcf0d417fbe43fd9477364b70c4f9d857c65e0" translate="yes" xml:space="preserve">
          <source>It's generally suggested that selectors are defined alongside reducers and exported, and then reused elsewhere (such as in &lt;code&gt;mapStateToProps&lt;/code&gt; functions, in async action creators, or sagas) to colocate all the code that knows about the actual shape of the state tree in the reducer files.</source>
          <target state="translated">En general, se sugiere que los selectores se definan junto con los reductores y se exporten, y luego se reutilicen en otro lugar (como en &lt;code&gt;mapStateToProps&lt;/code&gt; funciones mapStateToProps , en creadores de acciones as&amp;iacute;ncronas o sagas) para colocar todo el c&amp;oacute;digo que conoce la forma real del &amp;aacute;rbol de estado en los archivos del reductor. .</target>
        </trans-unit>
        <trans-unit id="9a8921bdd4ecd237805498907dc4327f0981b88e" translate="yes" xml:space="preserve">
          <source>It's important to note that a Redux store really only has a single reducer function. The store passes the current state and dispatched action to that one reducer function, and lets the reducer handle things appropriately.</source>
          <target state="translated">Es importante señalar que una tienda Redux realmente sólo tiene una única función reductora.La tienda pasa el estado actual y la acción enviada a esa única función reductora,y deja que el reductor maneje las cosas apropiadamente.</target>
        </trans-unit>
        <trans-unit id="c36768ba51d801006d900629e7ac3f3a13e90bcd" translate="yes" xml:space="preserve">
          <source>It's important to note that you'll only have a single store in a Redux application. When you want to split your data handling logic, you'll use &lt;a href=&quot;reducers#splitting-reducers&quot;&gt;reducer composition&lt;/a&gt; instead of many stores.</source>
          <target state="translated">Es importante tener en cuenta que solo tendr&amp;aacute; una tienda en una aplicaci&amp;oacute;n Redux. Cuando desee dividir su l&amp;oacute;gica de manejo de datos, utilizar&amp;aacute; la &lt;a href=&quot;reducers#splitting-reducers&quot;&gt;composici&amp;oacute;n reductora en&lt;/a&gt; lugar de muchas tiendas.</target>
        </trans-unit>
        <trans-unit id="61d4dad8daf83a3b27a53b849070082ed3ffa990" translate="yes" xml:space="preserve">
          <source>It's important to remember that whenever you update a nested value, you must also return new copies of anything above it in your state tree. If you have &lt;code&gt;state.a.b.c.d&lt;/code&gt;, and you want to make an update to &lt;code&gt;d&lt;/code&gt;, you would also need to return new copies of &lt;code&gt;c&lt;/code&gt;, &lt;code&gt;b&lt;/code&gt;, &lt;code&gt;a&lt;/code&gt;, and &lt;code&gt;state&lt;/code&gt;. This &lt;a href=&quot;http://arqex.com/wp-content/uploads/2015/02/trees.png&quot;&gt;state tree mutation diagram&lt;/a&gt; demonstrates how a change deep in a tree requires changes all the way up.</source>
          <target state="translated">Es importante recordar que cada vez que actualiza un valor anidado, tambi&amp;eacute;n debe devolver nuevas copias de cualquier cosa por encima de &amp;eacute;l en su &amp;aacute;rbol de estado. Si tiene &lt;code&gt;state.a.b.c.d&lt;/code&gt; , y desea realizar una actualizaci&amp;oacute;n a &lt;code&gt;d&lt;/code&gt; , tambi&amp;eacute;n tendr&amp;iacute;a que volver nuevas copias de &lt;code&gt;c&lt;/code&gt; , &lt;code&gt;b&lt;/code&gt; , &lt;code&gt;a&lt;/code&gt; , y &lt;code&gt;state&lt;/code&gt; . Este &lt;a href=&quot;http://arqex.com/wp-content/uploads/2015/02/trees.png&quot;&gt;diagrama de mutaci&amp;oacute;n de &amp;aacute;rbol de estado&lt;/a&gt; demuestra c&amp;oacute;mo un cambio profundo en un &amp;aacute;rbol requiere cambios hacia arriba.</target>
        </trans-unit>
        <trans-unit id="c339b6732e0d2b2a42a0ddd93251b26fe3ad96b4" translate="yes" xml:space="preserve">
          <source>It's more code, but it's exactly what makes Redux predictable and efficient. If you want to have less code, you can use a helper like &lt;a href=&quot;https://facebook.github.io/react/docs/update.html&quot;&gt;&lt;code&gt;React.addons.update&lt;/code&gt;&lt;/a&gt; to write immutable transformations with a terse syntax:</source>
          <target state="translated">Es m&amp;aacute;s c&amp;oacute;digo, pero es exactamente lo que hace que Redux sea predecible y eficiente. Si desea tener menos c&amp;oacute;digo, puede usar un ayudante como &lt;a href=&quot;https://facebook.github.io/react/docs/update.html&quot;&gt; &lt;code&gt;React.addons.update&lt;/code&gt; &lt;/a&gt; para escribir transformaciones inmutables con una sintaxis concisa:</target>
        </trans-unit>
        <trans-unit id="6f3ca2b8ee117276e54d75838be64e770429f6ba" translate="yes" xml:space="preserve">
          <source>It's not always immediately clear how these two approaches interact. Fortunately, the process does follow some predictable rules. Here's how the pieces fit together.</source>
          <target state="translated">No siempre está inmediatamente claro cómo interactúan estos dos enfoques.Afortunadamente,el proceso sigue algunas reglas predecibles.Así es como las piezas encajan entre sí.</target>
        </trans-unit>
        <trans-unit id="d0ab78e0353e7cd035a999d2fa8e5af4c2f963ef" translate="yes" xml:space="preserve">
          <source>It's possible you're correctly dispatching an action and applying your reducer but the corresponding state is not being correctly translated into props.</source>
          <target state="translated">Es posible que esté despachando correctamente una acción y aplicando su reductor,pero el estado correspondiente no se está traduciendo correctamente en atrezzo.</target>
        </trans-unit>
        <trans-unit id="4543176cfbe02cd87a4507bdb08d9c22f1859120" translate="yes" xml:space="preserve">
          <source>It's unfortunate that many still choose Flux framework based on whether it uses &lt;code&gt;switch&lt;/code&gt; statements in the documentation. If you don't like &lt;code&gt;switch&lt;/code&gt;, you can solve this with a single function, as we show below.</source>
          <target state="translated">Es lamentable que muchos sigan eligiendo el marco Flux en funci&amp;oacute;n de si utiliza declaraciones de &lt;code&gt;switch&lt;/code&gt; en la documentaci&amp;oacute;n. Si no le gusta el &lt;code&gt;switch&lt;/code&gt; , puede resolver esto con una sola funci&amp;oacute;n, como mostramos a continuaci&amp;oacute;n.</target>
        </trans-unit>
        <trans-unit id="7e539fa93863f712b20c2f16d75b4287d6434876" translate="yes" xml:space="preserve">
          <source>It's unfortunate that many still choose a framework based on whether it uses &lt;code&gt;switch&lt;/code&gt; statements in the documentation. If you don't like &lt;code&gt;switch&lt;/code&gt;, you can use a custom &lt;code&gt;createReducer&lt;/code&gt; function that accepts a handler map, as shown in &lt;a href=&quot;../recipes/reducingboilerplate#reducers&quot;&gt;&amp;ldquo;reducing boilerplate&amp;rdquo;&lt;/a&gt;.</source>
          <target state="translated">Es lamentable que muchos todav&amp;iacute;a elijan un marco en funci&amp;oacute;n de si utiliza declaraciones de &lt;code&gt;switch&lt;/code&gt; en la documentaci&amp;oacute;n. Si no le gusta el &lt;code&gt;switch&lt;/code&gt; , puede usar una funci&amp;oacute;n &lt;code&gt;createReducer&lt;/code&gt; personalizada que acepte un mapa de controlador, como se muestra en &lt;a href=&quot;../recipes/reducingboilerplate#reducers&quot;&gt;&quot;Reducir el texto est&amp;aacute;ndar&quot;&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="2bb2765277319f208309e2db82a727dcbfdec808" translate="yes" xml:space="preserve">
          <source>JavaScript Application Architecture On The Road To 2015</source>
          <target state="translated">Arquitectura de aplicaciones JavaScript en el camino hacia 2015</target>
        </trans-unit>
        <trans-unit id="5663d16ece82a891feaade5f2800177cdbd06bf0" translate="yes" xml:space="preserve">
          <source>JavaScript Immutability presentation (PDF - see slide 12 for benefits)</source>
          <target state="translated">Presentación de Inmutabilidad de JavaScript (PDF-ver diapositiva 12 para los beneficios)</target>
        </trans-unit>
        <trans-unit id="5686c8f6acca3473e05ae8e791a2b0127eaac9e5" translate="yes" xml:space="preserve">
          <source>JavaScript and Immutability</source>
          <target state="translated">JavaScript e Inmutabilidad</target>
        </trans-unit>
        <trans-unit id="48e85cf4e700b35b1170cf47611de9569a23efdc" translate="yes" xml:space="preserve">
          <source>JavaScript does not provide immutable data structures. As such, for Immutable.JS to provide its immutable guarantees, your data must be encapsulated within an Immutable.JS object (such as a &lt;code&gt;Map&lt;/code&gt; or a &lt;code&gt;List&lt;/code&gt;, etc.). Once it&amp;rsquo;s contained in this way, it&amp;rsquo;s hard for that data to then interoperate with other, plain JavaScript objects.</source>
          <target state="translated">JavaScript no proporciona estructuras de datos inmutables. Como tal, para que Immutable.JS proporcione sus garant&amp;iacute;as inmutables, sus datos deben estar encapsulados dentro de un objeto Immutable.JS (como un &lt;code&gt;Map&lt;/code&gt; o una &lt;code&gt;List&lt;/code&gt; , etc.). Una vez que est&amp;aacute; contenido de esta manera, es dif&amp;iacute;cil que esos datos interoperen con otros objetos JavaScript simples.</target>
        </trans-unit>
        <trans-unit id="db1e7af6d4d988f37e8c96dfd9be6dd7f8c52667" translate="yes" xml:space="preserve">
          <source>JavaScript was never designed to provide guaranteed immutable operations. Accordingly, there are several issues you need to be aware of if you choose to use it for your immutable operations in your Redux app.</source>
          <target state="translated">JavaScript nunca fue diseñado para proporcionar operaciones inmutables garantizadas.En consecuencia,hay varios asuntos que debe tener en cuenta si decide usarlo para sus operaciones inmutables en su aplicación Redux.</target>
        </trans-unit>
        <trans-unit id="e4f9a7a1a37cb18678bb27808982a0fab518f2bf" translate="yes" xml:space="preserve">
          <source>Javascript and Immutability</source>
          <target state="translated">Javascript e Inmutabilidad</target>
        </trans-unit>
        <trans-unit id="8190845a1ebdd8d76968f6c6f761a6be3b93edae" translate="yes" xml:space="preserve">
          <source>Jing Chen, creator of Flux</source>
          <target state="translated">Jing Chen,creador de Flux</target>
        </trans-unit>
        <trans-unit id="951a42e3bc90a6103cf2aad8fcbde2477e07ad4f" translate="yes" xml:space="preserve">
          <source>Join the &lt;a href=&quot;https://discord.gg/0ZcbPKXt5bZ6au5t&quot;&gt;#redux&lt;/a&gt; channel of the &lt;a href=&quot;http://www.reactiflux.com&quot;&gt;Reactiflux&lt;/a&gt; Discord community.</source>
          <target state="translated">&amp;Uacute;nase al canal &lt;a href=&quot;https://discord.gg/0ZcbPKXt5bZ6au5t&quot;&gt;#redux&lt;/a&gt; de la comunidad &lt;a href=&quot;http://www.reactiflux.com&quot;&gt;Reactiflux&lt;/a&gt; Discord.</target>
        </trans-unit>
        <trans-unit id="e399f1c349f8769ebbb0daf23b23eccbf46daf27" translate="yes" xml:space="preserve">
          <source>Just like before, we never write directly to &lt;code&gt;state&lt;/code&gt; or its fields, and instead we return new objects. The new &lt;code&gt;todos&lt;/code&gt; is equal to the old &lt;code&gt;todos&lt;/code&gt; concatenated with a single new item at the end. The fresh todo was constructed using the data from the action.</source>
          <target state="translated">Al igual que antes, nunca escribimos directamente en el &lt;code&gt;state&lt;/code&gt; o sus campos, sino que devolvemos nuevos objetos. Los nuevos &lt;code&gt;todos&lt;/code&gt; son iguales a los viejos &lt;code&gt;todos&lt;/code&gt; concatenados con un &amp;uacute;nico elemento nuevo al final. El todo nuevo se construy&amp;oacute; utilizando los datos de la acci&amp;oacute;n.</target>
        </trans-unit>
        <trans-unit id="4775133d954dab5abc63710e9c6e38a2239ee177" translate="yes" xml:space="preserve">
          <source>Just like in the basic tutorial, you'll need to &lt;a href=&quot;../basics/reducers#designing-the-state-shape&quot;&gt;design the shape of your application's state&lt;/a&gt; before rushing into the implementation. With asynchronous code, there is more state to take care of, so we need to think it through.</source>
          <target state="translated">Al igual que en el tutorial b&amp;aacute;sico, deber&amp;aacute; &lt;a href=&quot;../basics/reducers#designing-the-state-shape&quot;&gt;dise&amp;ntilde;ar la forma del estado de su aplicaci&amp;oacute;n&lt;/a&gt; antes de apresurarse a la implementaci&amp;oacute;n. Con el c&amp;oacute;digo asincr&amp;oacute;nico, hay m&amp;aacute;s estados que cuidar, por lo que debemos pensarlo detenidamente.</target>
        </trans-unit>
        <trans-unit id="c6df178ca4d41674a93e54d6ff850afe3eceb958" translate="yes" xml:space="preserve">
          <source>Laurence Roberts</source>
          <target state="translated">Laurence Roberts</target>
        </trans-unit>
        <trans-unit id="a8e78fb63e60ac2949bd5cbbb13dfecd20351939" translate="yes" xml:space="preserve">
          <source>Learn Redux from Its Creator</source>
          <target state="translated">Aprende Redux de su creador</target>
        </trans-unit>
        <trans-unit id="815813ef04db0611309243e056689002bfca2f51" translate="yes" xml:space="preserve">
          <source>Learning Functional Programming in Javascript</source>
          <target state="translated">Aprendizaje de la programación funcional en Javascript</target>
        </trans-unit>
        <trans-unit id="204c47c7f7b6077c5cc66fb4275cccc654adf5ff" translate="yes" xml:space="preserve">
          <source>Learning Redux</source>
          <target state="translated">Aprender Redux</target>
        </trans-unit>
        <trans-unit id="f18ace0f4dc5ebb1cb3f958d948cec6b1bfd54fc" translate="yes" xml:space="preserve">
          <source>Lee Byron on Twitter: &amp;ldquo;Perf tip for #immutablejs&amp;hellip;&amp;rdquo;</source>
          <target state="translated">Lee Byron en Twitter: &quot;Sugerencia de rendimiento para # immutablejs ...&quot;</target>
        </trans-unit>
        <trans-unit id="0d516f563abbe7f29a4e3ee915a4a5746abb4a29" translate="yes" xml:space="preserve">
          <source>Let's consider a different scenario:</source>
          <target state="translated">Consideremos un escenario diferente:</target>
        </trans-unit>
        <trans-unit id="30e9663293d38e3d33c344fc2983eb83f3e158b6" translate="yes" xml:space="preserve">
          <source>Let's create a function named &lt;code&gt;makeGetVisibleTodos&lt;/code&gt; that returns a new copy of the &lt;code&gt;getVisibleTodos&lt;/code&gt; selector each time it is called:</source>
          <target state="translated">&lt;code&gt;makeGetVisibleTodos&lt;/code&gt; una funci&amp;oacute;n llamada makeGetVisibleTodos que devuelve una nueva copia del selector &lt;code&gt;getVisibleTodos&lt;/code&gt; cada vez que se llama:</target>
        </trans-unit>
        <trans-unit id="fd130845bbec5d16d12cb399e0c3cbfeb2c430a7" translate="yes" xml:space="preserve">
          <source>Let's define a memoized selector named &lt;code&gt;getVisibleTodos&lt;/code&gt; to replace the non-memoized version above:</source>
          <target state="translated">Definamos un selector memorizado llamado &lt;code&gt;getVisibleTodos&lt;/code&gt; para reemplazar la versi&amp;oacute;n no memorizada anterior:</target>
        </trans-unit>
        <trans-unit id="c3a4dc14b145305dfe293196d07e8aa73560d7a5" translate="yes" xml:space="preserve">
          <source>Let's explore reducer composition more. Can we also extract a reducer managing just &lt;code&gt;visibilityFilter&lt;/code&gt;? We can.</source>
          <target state="translated">Exploremos m&amp;aacute;s la composici&amp;oacute;n del reductor. &amp;iquest;Podemos tambi&amp;eacute;n extraer un reductor gestionando solo el &lt;code&gt;visibilityFilter&lt;/code&gt; ? Podemos.</target>
        </trans-unit>
        <trans-unit id="3d63428074244e2479b8e425262f560268ac5f43" translate="yes" xml:space="preserve">
          <source>Let's recall what the combined reducer does:</source>
          <target state="translated">Recordemos lo que hace el reductor combinado:</target>
        </trans-unit>
        <trans-unit id="384774d8dbe43962eb49ce001e2d96e26d96ea07" translate="yes" xml:space="preserve">
          <source>Let's revisit the &lt;a href=&quot;../basics/usagewithreact&quot;&gt;Todos List example&lt;/a&gt;:</source>
          <target state="translated">Repasemos el &lt;a href=&quot;../basics/usagewithreact&quot;&gt;ejemplo de Todos List&lt;/a&gt; :</target>
        </trans-unit>
        <trans-unit id="ed19a0e0fde116aef33b7018b7a9bbcce6346bdc" translate="yes" xml:space="preserve">
          <source>Let's say a designer comes back to us after reviewing our prototype, and tells us that we need to allow three todos maximum. We can enforce this by rewriting our action creator to a callback form with &lt;a href=&quot;https://github.com/gaearon/redux-thunk&quot;&gt;redux-thunk&lt;/a&gt; middleware and adding an early exit:</source>
          <target state="translated">Digamos que un dise&amp;ntilde;ador vuelve a nosotros despu&amp;eacute;s de revisar nuestro prototipo y nos dice que tenemos que permitir tres tareas como m&amp;aacute;ximo. Podemos hacer cumplir esto reescribiendo nuestro creador de acciones a un formulario de devoluci&amp;oacute;n de llamada con middleware &lt;a href=&quot;https://github.com/gaearon/redux-thunk&quot;&gt;redux-thunk&lt;/a&gt; y agregando una salida temprana:</target>
        </trans-unit>
        <trans-unit id="d23a5d0451ec5d5abafa771961468240b19ed964" translate="yes" xml:space="preserve">
          <source>Let's say that our initial reducer looks like this:</source>
          <target state="translated">Digamos que nuestro reductor inicial se ve así:</target>
        </trans-unit>
        <trans-unit id="a42244fb104feca9e7eb72186a85fa8a258a8b6f" translate="yes" xml:space="preserve">
          <source>Let's start by defining the several synchronous action types and action creators we need in our example app. Here, the user can select a subreddit to display:</source>
          <target state="translated">Comencemos por definir los diversos tipos de acciones sincrónicas y creadores de acciones que necesitamos en nuestra aplicación de ejemplo.Aquí,el usuario puede seleccionar un subreretorno para mostrar:</target>
        </trans-unit>
        <trans-unit id="6be34e2837216ea61f99fc5d5668808369bc5adc" translate="yes" xml:space="preserve">
          <source>Let's take a look at our new client file:</source>
          <target state="translated">Echemos un vistazo a nuestro nuevo archivo de clientes:</target>
        </trans-unit>
        <trans-unit id="b409b71e81ab2b58978b981a343bc5bce51dcd92" translate="yes" xml:space="preserve">
          <source>Let's talk through the algorithm to manipulate the state shape described above. We can define two actions to operate on this state: &lt;code&gt;UNDO&lt;/code&gt; and &lt;code&gt;REDO&lt;/code&gt;. In our reducer, we will do the following steps to handle these actions:</source>
          <target state="translated">Hablemos del algoritmo para manipular la forma de estado descrita anteriormente. Podemos definir dos acciones para operar en este estado: &lt;code&gt;UNDO&lt;/code&gt; y &lt;code&gt;REDO&lt;/code&gt; . En nuestro reductor, haremos los siguientes pasos para manejar estas acciones:</target>
        </trans-unit>
        <trans-unit id="dd3902ab0d1d59de82883d31a36cdd78b461122c" translate="yes" xml:space="preserve">
          <source>Let's write a function that lets us express reducers as an object mapping from action types to handlers. For example, if we want our &lt;code&gt;todos&lt;/code&gt; reducers to be defined like this:</source>
          <target state="translated">Escribamos una funci&amp;oacute;n que nos permita expresar reductores como un mapeo de objetos de tipos de acci&amp;oacute;n a controladores. Por ejemplo, si queremos que nuestros reductores de &lt;code&gt;todos&lt;/code&gt; se definan as&amp;iacute;:</target>
        </trans-unit>
        <trans-unit id="e72eaffd3ac1dcb5208c2d6ea7b42f2173627e6a" translate="yes" xml:space="preserve">
          <source>Let's write the components! We begin with the presentational components so we don't need to think about binding to Redux yet.</source>
          <target state="translated">¡Escribamos los componentes! Empezamos con los componentes de presentación,así que no tenemos que pensar en unirnos a Redux todavía.</target>
        </trans-unit>
        <trans-unit id="4642d8e2bbb9a67ffddd44f6258e15948144b9a5" translate="yes" xml:space="preserve">
          <source>Leveling Up with React: Redux</source>
          <target state="translated">Nivelando con Reaccionar:Redux</target>
        </trans-unit>
        <trans-unit id="3229609e15436ec51bcf00818a69a84dbc58a0c2" translate="yes" xml:space="preserve">
          <source>License</source>
          <target state="translated">License</target>
        </trans-unit>
        <trans-unit id="58fd3b1b83cc7fc933d72fe934bdb6e534441281" translate="yes" xml:space="preserve">
          <source>Licensed under the MIT License.</source>
          <target state="translated">Con licencia del MIT.</target>
        </trans-unit>
        <trans-unit id="ef7dd92b3bad02dfcc7661e876c8b68c18ebfc35" translate="yes" xml:space="preserve">
          <source>Limit your use of &lt;code&gt;toJS()&lt;/code&gt;</source>
          <target state="translated">Limite el uso de &lt;code&gt;toJS()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="83fce8327410848c9eb609acb21732c7c0fec96a" translate="yes" xml:space="preserve">
          <source>Logo</source>
          <target state="translated">Logo</target>
        </trans-unit>
        <trans-unit id="89690ac571dcf4c9c40c842efed3f11171d07b29" translate="yes" xml:space="preserve">
          <source>MIT</source>
          <target state="translated">MIT</target>
        </trans-unit>
        <trans-unit id="17367293ad2021231bf611dd0dd27a355d38e2d6" translate="yes" xml:space="preserve">
          <source>Make sure mapStateToProps is correct</source>
          <target state="translated">Asegúrate de que mapStateToProps es correcto</target>
        </trans-unit>
        <trans-unit id="9f370227bbf65772938b3d8e358e2ce2218a1a54" translate="yes" xml:space="preserve">
          <source>Make sure that you use &lt;code&gt;Object.assign&lt;/code&gt; correctly. For example, instead of returning something like &lt;code&gt;Object.assign(state, newData)&lt;/code&gt; from your reducers, return &lt;code&gt;Object.assign({}, state, newData)&lt;/code&gt;. This way you don't override the previous &lt;code&gt;state&lt;/code&gt;.</source>
          <target state="translated">Aseg&amp;uacute;rese de utilizar &lt;code&gt;Object.assign&lt;/code&gt; correctamente. Por ejemplo, en lugar de devolver algo como &lt;code&gt;Object.assign(state, newData)&lt;/code&gt; de sus reductores, devuelva &lt;code&gt;Object.assign({}, state, newData)&lt;/code&gt; . De esta forma, no anula el &lt;code&gt;state&lt;/code&gt; anterior .</target>
        </trans-unit>
        <trans-unit id="5d8418eedd0d6a2db483537e4446820ce1952555" translate="yes" xml:space="preserve">
          <source>Make your entire Redux state tree an Immutable.JS object</source>
          <target state="translated">Haz que todo tu árbol de estado Redux sea un objeto inmutable.</target>
        </trans-unit>
        <trans-unit id="91529d50836c68b2f85612f8480c39828f101131" translate="yes" xml:space="preserve">
          <source>Managing Normalized Data</source>
          <target state="translated">Gestión de los datos normalizados</target>
        </trans-unit>
        <trans-unit id="b8cfd188b6fb6ef58e95265e7bee55786bad588a" translate="yes" xml:space="preserve">
          <source>Managing this ever-changing state is hard. If a model can update another model, then a view can update a model, which updates another model, and this, in turn, might cause another view to update. At some point, you no longer understand what happens in your app as you have &lt;strong&gt;lost control over the when, why, and how of its state.&lt;/strong&gt; When a system is opaque and non-deterministic, it's hard to reproduce bugs or add new features.</source>
          <target state="translated">Manejar este estado en constante cambio es dif&amp;iacute;cil. Si un modelo puede actualizar otro modelo, entonces una vista puede actualizar un modelo, que actualiza otro modelo, y esto, a su vez, puede hacer que se actualice otra vista. En alg&amp;uacute;n momento, ya no comprende lo que sucede en su aplicaci&amp;oacute;n, ya que ha &lt;strong&gt;perdido el control sobre cu&amp;aacute;ndo, por qu&amp;eacute; y c&amp;oacute;mo de su estado. &lt;/strong&gt;Cuando un sistema es opaco y no determinista, es dif&amp;iacute;cil reproducir errores o agregar nuevas funciones.</target>
        </trans-unit>
        <trans-unit id="770e69d1c946703f5c3589b40d2b5d1f60424fb5" translate="yes" xml:space="preserve">
          <source>Many applications deal with data that is nested or relational in nature. For example, a blog editor could have many Posts, each Post could have many Comments, and both Posts and Comments would be written by a User. Data for this kind of application might look like:</source>
          <target state="translated">Muchas aplicaciones se ocupan de datos anidados o de naturaleza relacional.Por ejemplo,un editor de blog podría tener muchos Posts,cada Post podría tener muchos Comentarios,y tanto los Posts como los Comentarios serían escritos por un Usuario.Los datos para este tipo de aplicación podrían parecerse:</target>
        </trans-unit>
        <trans-unit id="d062b20c46aa58461072521c5ff06fd5c22eadb2" translate="yes" xml:space="preserve">
          <source>Many users later want to try to share data between two reducers, but find that &lt;code&gt;combineReducers&lt;/code&gt; does not allow them to do so. There are several approaches that can be used:</source>
          <target state="translated">M&amp;aacute;s tarde, muchos usuarios quieren intentar compartir datos entre dos reductores, pero descubren que &lt;code&gt;combineReducers&lt;/code&gt; no les permite hacerlo. Hay varios enfoques que se pueden utilizar:</target>
        </trans-unit>
        <trans-unit id="1f7bcd6c888e6b88d0545bc697de285055397b49" translate="yes" xml:space="preserve">
          <source>Maybe we want to be able to run multiple instances of it in the same &amp;ldquo;bigger&amp;rdquo; app and keep it as a complete black box, with Redux being an implementation detail.</source>
          <target state="translated">Tal vez queramos poder ejecutar m&amp;uacute;ltiples instancias de la misma en la misma aplicaci&amp;oacute;n &quot;m&amp;aacute;s grande&quot; y mantenerla como una caja negra completa, con Redux como un detalle de implementaci&amp;oacute;n.</target>
        </trans-unit>
        <trans-unit id="99890f553cee2767e33647e04645b77191093369" translate="yes" xml:space="preserve">
          <source>Meet Reducer Enhancers</source>
          <target state="translated">Conozca a los Mejoradores de Reductores</target>
        </trans-unit>
        <trans-unit id="1335c9d05ff6249a581b2af47d8ca262af71f878" translate="yes" xml:space="preserve">
          <source>Meet some of the outstanding companies that made it possible:</source>
          <target state="translated">Conoce a algunas de las destacadas empresas que lo hicieron posible:</target>
        </trans-unit>
        <trans-unit id="eb8978ed84b5906ad4191a0b252828be64701bfa" translate="yes" xml:space="preserve">
          <source>Middleware</source>
          <target state="translated">Middleware</target>
        </trans-unit>
        <trans-unit id="4de8569a40d6be412d5f73fc6d679fbd847a1bc7" translate="yes" xml:space="preserve">
          <source>Middleware functions wrap behavior of &lt;code&gt;dispatch&lt;/code&gt; calls in Redux, so to test this modified behavior we need to mock the behavior of the &lt;code&gt;dispatch&lt;/code&gt; call.</source>
          <target state="translated">Las funciones de middleware envuelven el comportamiento de las llamadas de &lt;code&gt;dispatch&lt;/code&gt; en Redux, por lo que para probar este comportamiento modificado necesitamos simular el comportamiento de la llamada de &lt;code&gt;dispatch&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="4cfdea7cdd9cbecf25a5a88942621957d5c3dd05" translate="yes" xml:space="preserve">
          <source>Middleware is composable using function composition. It is useful for logging actions, performing side effects like routing, or turning an asynchronous API call into a series of synchronous actions.</source>
          <target state="translated">El middleware se puede componer usando la composición de funciones.Es útil para registrar acciones,realizar efectos secundarios como el enrutamiento o convertir una llamada asíncrona a la API en una serie de acciones síncronas.</target>
        </trans-unit>
        <trans-unit id="b3958295af5cb6ac63c96e1bbd5629db43b83e95" translate="yes" xml:space="preserve">
          <source>Middleware is created by the community and does not ship with Redux by default. You need to explicitly install packages like &lt;a href=&quot;https://github.com/gaearon/redux-thunk&quot;&gt;redux-thunk&lt;/a&gt; or &lt;a href=&quot;https://github.com/acdlite/redux-promise&quot;&gt;redux-promise&lt;/a&gt; to use it. You may also create your own middleware.</source>
          <target state="translated">El middleware lo crea la comunidad y no se env&amp;iacute;a con Redux de forma predeterminada. Necesita instalar expl&amp;iacute;citamente paquetes como &lt;a href=&quot;https://github.com/gaearon/redux-thunk&quot;&gt;redux-thunk&lt;/a&gt; o &lt;a href=&quot;https://github.com/acdlite/redux-promise&quot;&gt;redux-promise&lt;/a&gt; para usarlo. Tambi&amp;eacute;n puede crear su propio middleware.</target>
        </trans-unit>
        <trans-unit id="709ac9c564fa8004f1018815a013faace4ceaf9b" translate="yes" xml:space="preserve">
          <source>Middleware is not baked into &lt;a href=&quot;createstore&quot;&gt;&lt;code&gt;createStore&lt;/code&gt;&lt;/a&gt; and is not a fundamental part of the Redux architecture, but we consider it useful enough to be supported right in the core. This way, there is a single standard way to extend &lt;a href=&quot;store#dispatch&quot;&gt;&lt;code&gt;dispatch&lt;/code&gt;&lt;/a&gt; in the ecosystem, and different middleware may compete in expressiveness and utility.</source>
          <target state="translated">El middleware no est&amp;aacute; &lt;a href=&quot;createstore&quot;&gt; &lt;code&gt;createStore&lt;/code&gt; &lt;/a&gt; en createStore y no es una parte fundamental de la arquitectura de Redux, pero lo consideramos lo suficientemente &amp;uacute;til como para ser compatible directamente en el n&amp;uacute;cleo. De esta forma, existe una &amp;uacute;nica forma est&amp;aacute;ndar de extender el &lt;a href=&quot;store#dispatch&quot;&gt; &lt;code&gt;dispatch&lt;/code&gt; &lt;/a&gt; en el ecosistema, y ​​diferentes middleware pueden competir en expresividad y utilidad.</target>
        </trans-unit>
        <trans-unit id="44bb138a9d25525c5ea6b439a580ee67fd5a1ee9" translate="yes" xml:space="preserve">
          <source>Middleware is not baked into &lt;a href=&quot;createstore&quot;&gt;&lt;code&gt;createStore&lt;/code&gt;&lt;/a&gt; and is not a fundamental part of the Redux architecture, but we consider it useful enough to be supported right in the core. This way, there is a single standard way to extend &lt;a href=&quot;store#dispatchaction&quot;&gt;&lt;code&gt;dispatch&lt;/code&gt;&lt;/a&gt; in the ecosystem, and different middleware may compete in expressiveness and utility.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="00c8a7e2c0f9e6b20fe14442f77d182a03eebb64" translate="yes" xml:space="preserve">
          <source>Middleware is the suggested way to extend Redux with custom functionality. Middleware lets you wrap the store's &lt;a href=&quot;store#dispatch&quot;&gt;&lt;code&gt;dispatch&lt;/code&gt;&lt;/a&gt; method for fun and profit. The key feature of middleware is that it is composable. Multiple middleware can be combined together, where each middleware requires no knowledge of what comes before or after it in the chain.</source>
          <target state="translated">Middleware es la forma sugerida de extender Redux con funcionalidad personalizada. Middleware le permite ajustar el m&amp;eacute;todo de &lt;a href=&quot;store#dispatch&quot;&gt; &lt;code&gt;dispatch&lt;/code&gt; &lt;/a&gt; la tienda por diversi&amp;oacute;n y ganancias. La caracter&amp;iacute;stica clave del middleware es que se puede componer. Se pueden combinar varios middleware, donde cada middleware no requiere conocimiento de lo que viene antes o despu&amp;eacute;s de &amp;eacute;l en la cadena.</target>
        </trans-unit>
        <trans-unit id="39238a8d7919adb7f2defae4e78aa73bb9a0fc2f" translate="yes" xml:space="preserve">
          <source>Middleware is the suggested way to extend Redux with custom functionality. Middleware lets you wrap the store's &lt;a href=&quot;store#dispatchaction&quot;&gt;&lt;code&gt;dispatch&lt;/code&gt;&lt;/a&gt; method for fun and profit. The key feature of middleware is that it is composable. Multiple middleware can be combined together, where each middleware requires no knowledge of what comes before or after it in the chain.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9772321b9da9e355cae92c8995bc9b6d9b873c30" translate="yes" xml:space="preserve">
          <source>Middleware only wraps the store's &lt;a href=&quot;store#dispatch&quot;&gt;&lt;code&gt;dispatch&lt;/code&gt;&lt;/a&gt; function. Technically, anything a middleware can do, you can do manually by wrapping every &lt;code&gt;dispatch&lt;/code&gt; call, but it's easier to manage this in a single place and define action transformations on the scale of the whole project.</source>
          <target state="translated">Middleware solo envuelve la funci&amp;oacute;n de &lt;a href=&quot;store#dispatch&quot;&gt; &lt;code&gt;dispatch&lt;/code&gt; &lt;/a&gt; la tienda . T&amp;eacute;cnicamente, cualquier cosa que pueda hacer un middleware, puede hacerlo manualmente agrupando cada llamada de &lt;code&gt;dispatch&lt;/code&gt; , pero es m&amp;aacute;s f&amp;aacute;cil administrar esto en un solo lugar y definir transformaciones de acci&amp;oacute;n en la escala de todo el proyecto.</target>
        </trans-unit>
        <trans-unit id="da1c87b8d7e2336732bb5e2c32e20b95e5a52fd5" translate="yes" xml:space="preserve">
          <source>Middleware only wraps the store's &lt;a href=&quot;store#dispatchaction&quot;&gt;&lt;code&gt;dispatch&lt;/code&gt;&lt;/a&gt; function. Technically, anything a middleware can do, you can do manually by wrapping every &lt;code&gt;dispatch&lt;/code&gt; call, but it's easier to manage this in a single place and define action transformations on the scale of the whole project.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="904b42b851f9aa103d834460d3e42948c262c785" translate="yes" xml:space="preserve">
          <source>Middleware sounds much more complicated than it really is. The only way to really understand middleware is to see how the existing middleware works, and try to write your own. The function nesting can be intimidating, but most of the middleware you'll find are, in fact, 10-liners, and the nesting and composability is what makes the middleware system powerful.</source>
          <target state="translated">El middleware suena mucho más complicado de lo que realmente es.La única manera de entender realmente el middleware es ver cómo funciona el middleware existente,e intentar escribir el tuyo propio.La función de anidación puede ser intimidante,pero la mayoría de los middleware que encontrarás son,de hecho,de 10 líneas,y la anidación y la componibilidad es lo que hace que el sistema de middleware sea poderoso.</target>
        </trans-unit>
        <trans-unit id="9302feee19404010fcac9af350604fe588e01046" translate="yes" xml:space="preserve">
          <source>Migrating to Redux</source>
          <target state="translated">Migrando a Redux</target>
        </trans-unit>
        <trans-unit id="5f2cbd107037ed23248e5058a7a64cd6bae05468" translate="yes" xml:space="preserve">
          <source>Miscellaneous</source>
          <target state="translated">Miscellaneous</target>
        </trans-unit>
        <trans-unit id="7cc7d31118fe440474864da8b1d74f693cb0f866" translate="yes" xml:space="preserve">
          <source>Modular Reducers and Selectors</source>
          <target state="translated">Reductores y selectores modulares</target>
        </trans-unit>
        <trans-unit id="4e7b0b1e9c0a61f16b9a2611a1aa537d440279de" translate="yes" xml:space="preserve">
          <source>Monkeypatching is a hack. &amp;ldquo;Replace any method you like&amp;rdquo;, what kind of API is that? Let's figure out the essence of it instead. Previously, our functions replaced &lt;code&gt;store.dispatch&lt;/code&gt;. What if they &lt;em&gt;returned&lt;/em&gt; the new &lt;code&gt;dispatch&lt;/code&gt; function instead?</source>
          <target state="translated">Monkeypatching es un truco. &amp;ldquo;Reemplaza cualquier m&amp;eacute;todo que quieras&amp;rdquo;, &amp;iquest;qu&amp;eacute; tipo de API es esa? En su lugar, descubramos la esencia de esto. Anteriormente, nuestras funciones reemplazaron &lt;code&gt;store.dispatch&lt;/code&gt; . &amp;iquest;Qu&amp;eacute; pasa si en su lugar &lt;em&gt;devuelven&lt;/em&gt; la nueva funci&amp;oacute;n de &lt;code&gt;dispatch&lt;/code&gt; ?</target>
        </trans-unit>
        <trans-unit id="4bab2d8fe13fa6ab57f80098b414f0f734c5dd25" translate="yes" xml:space="preserve">
          <source>More</source>
          <target state="translated">More</target>
        </trans-unit>
        <trans-unit id="65607507695dbb68853f7200e33956e39fd6a15d" translate="yes" xml:space="preserve">
          <source>More Examples</source>
          <target state="translated">Más ejemplos</target>
        </trans-unit>
        <trans-unit id="fbb1457de42e260b67aaf3c234080db729e6567f" translate="yes" xml:space="preserve">
          <source>Most applications deal with multiple types of data, which can be broadly divided into three categories:</source>
          <target state="translated">La mayoría de las aplicaciones se ocupan de múltiples tipos de datos,que pueden dividirse a grandes rasgos en tres categorías:</target>
        </trans-unit>
        <trans-unit id="89d03ee4b54b44641100dd50cccd338fa1f41b27" translate="yes" xml:space="preserve">
          <source>Most commonly people consume Redux as a collection of &lt;a href=&quot;http://webpack.github.io/docs/commonjs.html&quot;&gt;CommonJS&lt;/a&gt; modules. These modules are what you get when you import &lt;code&gt;redux&lt;/code&gt; in a &lt;a href=&quot;https://webpack.js.org/&quot;&gt;Webpack&lt;/a&gt;, &lt;a href=&quot;http://browserify.org/&quot;&gt;Browserify&lt;/a&gt;, or a Node environment. If you like to live on the edge and use &lt;a href=&quot;http://rollupjs.org&quot;&gt;Rollup&lt;/a&gt;, we support that as well.</source>
          <target state="translated">Por lo general, la gente consume Redux como una colecci&amp;oacute;n de m&amp;oacute;dulos &lt;a href=&quot;http://webpack.github.io/docs/commonjs.html&quot;&gt;CommonJS&lt;/a&gt; . Estos m&amp;oacute;dulos son lo que obtiene cuando importa &lt;code&gt;redux&lt;/code&gt; en un &lt;a href=&quot;https://webpack.js.org/&quot;&gt;entorno Webpack&lt;/a&gt; , &lt;a href=&quot;http://browserify.org/&quot;&gt;Browserify&lt;/a&gt; o Node. Si te gusta vivir al l&amp;iacute;mite y usar &lt;a href=&quot;http://rollupjs.org&quot;&gt;Rollup&lt;/a&gt; , tambi&amp;eacute;n lo apoyamos.</target>
        </trans-unit>
        <trans-unit id="09f0cc4aec4d47d93c4e8a96edd682217c9476ac" translate="yes" xml:space="preserve">
          <source>Most likely you'll never write a store enhancer, but you may use the one provided by the &lt;a href=&quot;https://github.com/gaearon/redux-devtools&quot;&gt;developer tools&lt;/a&gt;. It is what makes time travel possible without the app being aware it is happening. Amusingly, the &lt;a href=&quot;api/applymiddleware&quot;&gt;Redux middleware implementation&lt;/a&gt; is itself a store enhancer.</source>
          <target state="translated">Lo m&amp;aacute;s probable es que nunca escriba un potenciador de tienda, pero puede usar el que le proporcionan las &lt;a href=&quot;https://github.com/gaearon/redux-devtools&quot;&gt;herramientas de desarrollo&lt;/a&gt; . Es lo que hace posible el viaje en el tiempo sin que la aplicaci&amp;oacute;n sepa que est&amp;aacute; sucediendo. Curiosamente, la &lt;a href=&quot;api/applymiddleware&quot;&gt;implementaci&amp;oacute;n del middleware de Redux&lt;/a&gt; es en s&amp;iacute; misma un potenciador de la tienda.</target>
        </trans-unit>
        <trans-unit id="390f7c239e26365aa378c0e0495e19cfea627097" translate="yes" xml:space="preserve">
          <source>Most likely, you'll also need &lt;a href=&quot;https://github.com/reactjs/react-redux&quot;&gt;the React bindings&lt;/a&gt; and &lt;a href=&quot;https://github.com/gaearon/redux-devtools&quot;&gt;the developer tools&lt;/a&gt;.</source>
          <target state="translated">Lo m&amp;aacute;s probable es que tambi&amp;eacute;n necesite &lt;a href=&quot;https://github.com/reactjs/react-redux&quot;&gt;los enlaces React&lt;/a&gt; y &lt;a href=&quot;https://github.com/gaearon/redux-devtools&quot;&gt;las herramientas de desarrollo&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="7e3a3d184b0b6d4dfa96e5964033c932e00274c5" translate="yes" xml:space="preserve">
          <source>Most of the components we'll write will be presentational, but we'll need to generate a few container components to connect them to the Redux store. This and the design brief below do not imply container components must be near the top of the component tree. If a container component becomes too complex (i.e. it has heavily nested presentional components with countless callbacks being passed down), introduce another container within the component tree as noted in the &lt;a href=&quot;../faq/reactredux#react-multiple-components&quot;&gt;FAQ&lt;/a&gt;.</source>
          <target state="translated">La mayor&amp;iacute;a de los componentes que escribiremos ser&amp;aacute;n de presentaci&amp;oacute;n, pero necesitaremos generar algunos componentes de contenedor para conectarlos a la tienda Redux. Esto y el resumen de dise&amp;ntilde;o a continuaci&amp;oacute;n no implican que los componentes del contenedor deban estar cerca de la parte superior del &amp;aacute;rbol de componentes. Si un componente contenedor se vuelve demasiado complejo (es decir, tiene componentes presentionales fuertemente anidados con innumerables devoluciones de llamada que se transmiten), introduzca otro contenedor dentro del &amp;aacute;rbol de componentes como se indica en las &lt;a href=&quot;../faq/reactredux#react-multiple-components&quot;&gt;Preguntas frecuentes&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="4fd704d00a4e5a0c3b40b38e9218c4cbbf210bcc" translate="yes" xml:space="preserve">
          <source>Most of the functionality Baobab provides is related to updating the data with cursors, but Redux enforces that the only way to update the data is to dispatch an action. Therefore they solve the same problem differently, and don't complement each other.</source>
          <target state="translated">La mayor parte de la funcionalidad que proporciona Baobab está relacionada con la actualización de los datos con cursores,pero Redux hace cumplir que la única forma de actualizar los datos es despachando una acción.Por lo tanto,resuelven el mismo problema de forma diferente,y no se complementan entre sí.</target>
        </trans-unit>
        <trans-unit id="d6a06199cc127e571d3588aef63c79108675eabc" translate="yes" xml:space="preserve">
          <source>Motivation</source>
          <target state="translated">Motivation</target>
        </trans-unit>
        <trans-unit id="723bf632acd68a56f2a8abd2cb40c71cceac0c0d" translate="yes" xml:space="preserve">
          <source>Motivation for Memoized Selectors</source>
          <target state="translated">Motivación para los selectores memorizados</target>
        </trans-unit>
        <trans-unit id="552b006eca5b663e553068321aa1dddaf3b1befb" translate="yes" xml:space="preserve">
          <source>Mozilla's experimental browser testbed</source>
          <target state="translated">El navegador experimental de Mozilla es un banco de pruebas</target>
        </trans-unit>
        <trans-unit id="d88a4a071f039297bbb69db92ff026e19cea735d" translate="yes" xml:space="preserve">
          <source>Mutability vs immutability</source>
          <target state="translated">Mutabilidad vs.inmutabilidad</target>
        </trans-unit>
        <trans-unit id="efd8a68660022a43293fd5a672afacaf4b2ee1a5" translate="yes" xml:space="preserve">
          <source>Mutate its arguments;</source>
          <target state="translated">Mueve sus argumentos;</target>
        </trans-unit>
        <trans-unit id="654f242c8a1a04fd78d46a2eed456576101047e8" translate="yes" xml:space="preserve">
          <source>Mutation is discouraged because it generally breaks time-travel debugging, and React Redux's &lt;code&gt;connect&lt;/code&gt; function:</source>
          <target state="translated">Se desaconseja la mutaci&amp;oacute;n porque generalmente rompe la depuraci&amp;oacute;n del viaje en el tiempo y la funci&amp;oacute;n de &lt;code&gt;connect&lt;/code&gt; React Redux :</target>
        </trans-unit>
        <trans-unit id="14131d656db4b7bdd8f8e3f363d86fcd460046b5" translate="yes" xml:space="preserve">
          <source>My journey towards a maintainable project structure for React/Redux</source>
          <target state="translated">Mi viaje hacia una estructura de proyecto sostenible para React/Redux</target>
        </trans-unit>
        <trans-unit id="7b24ea7fdf4c6ff696c569545bd59b1ddc1a2075" translate="yes" xml:space="preserve">
          <source>Navigating with React Router</source>
          <target state="translated">Navegando con el router React</target>
        </trans-unit>
        <trans-unit id="ffb832014d4614f14ecdf3023143c63e959c339a" translate="yes" xml:space="preserve">
          <source>Nested data means that the corresponding reducer logic has to be more nested or more complex. In particular, trying to update a deeply nested field can become very ugly very fast.</source>
          <target state="translated">Datos anidados significa que la lógica reductora correspondiente tiene que ser más anidada o más compleja.En particular,tratar de actualizar un campo profundamente anidado puede volverse muy feo muy rápido.</target>
        </trans-unit>
        <trans-unit id="80a420ddf85790605c162653ce53a583b0952bbf" translate="yes" xml:space="preserve">
          <source>Never let a plain JavaScript object contain Immutable.JS properties. Equally, never let an Immutable.JS object contain a plain JavaScript object.</source>
          <target state="translated">Nunca dejes que un simple objeto JavaScript contenga propiedades de Immutable.JS.Igualmente,nunca dejes que un objeto Immutable.JS contenga un simple objeto JavaScript.</target>
        </trans-unit>
        <trans-unit id="a430ed54fb612f337f2ab8273ec4cbf9b6644bd7" translate="yes" xml:space="preserve">
          <source>Never mix plain JavaScript objects with Immutable.JS</source>
          <target state="translated">Nunca mezcle objetos simples de JavaScript con Immutable.JS</target>
        </trans-unit>
        <trans-unit id="5a34cbfaae2d3943f4277799da4593a9d4e8866b" translate="yes" xml:space="preserve">
          <source>Never mutate reducer arguments</source>
          <target state="translated">Nunca mute los argumentos reductores</target>
        </trans-unit>
        <trans-unit id="d5c80dd926f59c776bb8a92ea2761368f2163c20" translate="yes" xml:space="preserve">
          <source>Never use &lt;code&gt;toJS()&lt;/code&gt; in &lt;code&gt;mapStateToProps&lt;/code&gt;</source>
          <target state="translated">Nunca use &lt;code&gt;toJS()&lt;/code&gt; en &lt;code&gt;mapStateToProps&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="880eef8459e455b9917669c0f642e566841426d2" translate="yes" xml:space="preserve">
          <source>Never use Immutable.JS in your Dumb Components</source>
          <target state="translated">Nunca uses Immutable.JS en tus componentes tontos</target>
        </trans-unit>
        <trans-unit id="3f170caead65df254d786032a409a6f6d204bca6" translate="yes" xml:space="preserve">
          <source>Next Steps</source>
          <target state="translated">Próximos pasos</target>
        </trans-unit>
        <trans-unit id="0264cc83b356bb6ea59a462a975e062d839151d9" translate="yes" xml:space="preserve">
          <source>Next, we can split each specific case into its own function:</source>
          <target state="translated">A continuación,podemos dividir cada caso específico en su propia función:</target>
        </trans-unit>
        <trans-unit id="841e4eea113da2949d5aa791e51d64a552200a40" translate="yes" xml:space="preserve">
          <source>Next, we'll explore how to &lt;a href=&quot;store&quot;&gt;create a Redux store&lt;/a&gt; that holds the state and takes care of calling your reducer when you dispatch an action.</source>
          <target state="translated">A continuaci&amp;oacute;n, exploraremos c&amp;oacute;mo &lt;a href=&quot;store&quot;&gt;crear una tienda Redux&lt;/a&gt; que mantenga el estado y se encargue de llamar a su reductor cuando env&amp;iacute;a una acci&amp;oacute;n.</target>
        </trans-unit>
        <trans-unit id="816c52fd2bdd94a63cd0944823a6c0aa9384c103" translate="yes" xml:space="preserve">
          <source>No</source>
          <target state="translated">No</target>
        </trans-unit>
        <trans-unit id="00e1f82b828451acc6eb547238db43005cf32c21" translate="yes" xml:space="preserve">
          <source>No Destructuring or Spread Operators</source>
          <target state="translated">No hay operadores de desestructuración o de propagación</target>
        </trans-unit>
        <trans-unit id="45a97bbdd6d1c0b59be783757a1880b3f98ba017" translate="yes" xml:space="preserve">
          <source>No. We suggest you write independent small reducer functions that are each responsible for updates to a specific slice of state. We call this pattern &amp;ldquo;reducer composition&amp;rdquo;. A given action could be handled by all, some, or none of them. This keeps components decoupled from the actual data changes, as one action may affect different parts of the state tree, and there is no need for the component to be aware of this. Some users do choose to bind them more tightly together, such as the &amp;ldquo;ducks&amp;rdquo; file structure, but there is definitely no one-to-one mapping by default, and you should break out of such a paradigm any time you feel you want to handle an action in many reducers.</source>
          <target state="translated">No. Le sugerimos que escriba funciones reductoras peque&amp;ntilde;as independientes que sean responsables de las actualizaciones de un segmento espec&amp;iacute;fico del estado. A este patr&amp;oacute;n lo llamamos &quot;composici&amp;oacute;n reductora&quot;. Una acci&amp;oacute;n determinada podr&amp;iacute;a ser manejada por todos, algunos o ninguno. Esto mantiene los componentes desacoplados de los cambios de datos reales, ya que una acci&amp;oacute;n puede afectar a diferentes partes del &amp;aacute;rbol de estado y no es necesario que el componente sea consciente de esto. Algunos usuarios eligen vincularlos m&amp;aacute;s estrechamente, como la estructura de archivos &quot;ducks&quot;, pero definitivamente no hay un mapeo uno a uno por defecto, y debe romper con ese paradigma cada vez que lo desee. manejar una acci&amp;oacute;n en muchos reductores.</target>
        </trans-unit>
        <trans-unit id="2d55eda060d4abd9e941e61eac1c5a4760b4b7fb" translate="yes" xml:space="preserve">
          <source>No. You are welcome to use any approach you'd like to respond to an action in a reducer. The &lt;code&gt;switch&lt;/code&gt; statement is the most common approach, but it's fine to use &lt;code&gt;if&lt;/code&gt; statements, a lookup table of functions, or to create a function that abstracts this away. In fact, while Redux does require that action objects contain a &lt;code&gt;type&lt;/code&gt; field, your reducer logic doesn't even have to rely on that to handle the action. That said, the standard approach is definitely using a switch statement or a lookup table based on &lt;code&gt;type&lt;/code&gt;.</source>
          <target state="translated">No. Puede utilizar cualquier enfoque que desee para responder a una acci&amp;oacute;n en un reductor. La instrucci&amp;oacute;n de &lt;code&gt;switch&lt;/code&gt; es el enfoque m&amp;aacute;s com&amp;uacute;n, pero est&amp;aacute; bien usar declaraciones &lt;code&gt;if&lt;/code&gt; , una tabla de b&amp;uacute;squeda de funciones o crear una funci&amp;oacute;n que abstraiga esto. De hecho, si bien Redux requiere que los objetos de acci&amp;oacute;n contengan un campo de &lt;code&gt;type&lt;/code&gt; , su l&amp;oacute;gica reductora ni siquiera tiene que depender de eso para manejar la acci&amp;oacute;n. Dicho esto, el enfoque est&amp;aacute;ndar definitivamente es usar una declaraci&amp;oacute;n de cambio o una tabla de b&amp;uacute;squeda basada en el &lt;code&gt;type&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="0e0d7b6b9e9168e473b1803957df55eb87b2031d" translate="yes" xml:space="preserve">
          <source>Nope, it's just HTML, some artisanal &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; tags, and plain old DOM manipulation. Enjoy!</source>
          <target state="translated">No, es solo HTML, algunas etiquetas &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; artesanales y una simple manipulaci&amp;oacute;n DOM. &amp;iexcl;Disfrutar!</target>
        </trans-unit>
        <trans-unit id="327c34539b30a346bec5ad81c0c1b3f68e1bdeed" translate="yes" xml:space="preserve">
          <source>Normalizing Data</source>
          <target state="translated">Normalizando los datos</target>
        </trans-unit>
        <trans-unit id="24e6df000cfc0eae18573e3ca083b23c0599cf6a" translate="yes" xml:space="preserve">
          <source>Normalizing Nested Data</source>
          <target state="translated">Normalizando los datos anidados</target>
        </trans-unit>
        <trans-unit id="dcd338fb8e5bd8068c0c2b43bfce9d5de3e8a57c" translate="yes" xml:space="preserve">
          <source>Normalizing State Shape</source>
          <target state="translated">Normalizando la forma del estado</target>
        </trans-unit>
        <trans-unit id="eb23cc3f5afc902e5be043420e1d724b51659962" translate="yes" xml:space="preserve">
          <source>Normalizr Documentation</source>
          <target state="translated">Normalizar la documentación</target>
        </trans-unit>
        <trans-unit id="335b95f34a7df1f471d9e66d848a822638f18b4c" translate="yes" xml:space="preserve">
          <source>Normally you should just call &lt;a href=&quot;store#dispatch&quot;&gt;&lt;code&gt;dispatch&lt;/code&gt;&lt;/a&gt; directly on your &lt;a href=&quot;store&quot;&gt;&lt;code&gt;Store&lt;/code&gt;&lt;/a&gt; instance. If you use Redux with React, &lt;a href=&quot;https://github.com/gaearon/react-redux&quot;&gt;react-redux&lt;/a&gt; will provide you with the &lt;a href=&quot;store#dispatch&quot;&gt;&lt;code&gt;dispatch&lt;/code&gt;&lt;/a&gt; function so you can call it directly, too.</source>
          <target state="translated">Normalmente, deber&amp;iacute;a llamar a &lt;a href=&quot;store#dispatch&quot;&gt; &lt;code&gt;dispatch&lt;/code&gt; &lt;/a&gt; directamente en su instancia de &lt;a href=&quot;store&quot;&gt; &lt;code&gt;Store&lt;/code&gt; &lt;/a&gt; . Si usa Redux con React, &lt;a href=&quot;https://github.com/gaearon/react-redux&quot;&gt;react-redux&lt;/a&gt; le proporcionar&amp;aacute; la funci&amp;oacute;n de &lt;a href=&quot;store#dispatch&quot;&gt; &lt;code&gt;dispatch&lt;/code&gt; &lt;/a&gt; para que tambi&amp;eacute;n pueda llamarla directamente.</target>
        </trans-unit>
        <trans-unit id="26c3f41f979e0141ba2295989bb6b08208506c7a" translate="yes" xml:space="preserve">
          <source>Normally you should just call &lt;a href=&quot;store#dispatchaction&quot;&gt;&lt;code&gt;dispatch&lt;/code&gt;&lt;/a&gt; directly on your &lt;a href=&quot;store&quot;&gt;&lt;code&gt;Store&lt;/code&gt;&lt;/a&gt; instance. If you use Redux with React, &lt;a href=&quot;https://github.com/gaearon/react-redux&quot;&gt;react-redux&lt;/a&gt; will provide you with the &lt;a href=&quot;store#dispatchaction&quot;&gt;&lt;code&gt;dispatch&lt;/code&gt;&lt;/a&gt; function so you can call it directly, too.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3c4e5332959aece0b47c0b738573f9bd470cb893" translate="yes" xml:space="preserve">
          <source>Normally, a Javascript array's contents are modified using mutative functions like &lt;code&gt;push&lt;/code&gt;, &lt;code&gt;unshift&lt;/code&gt;, and &lt;code&gt;splice&lt;/code&gt;. Since we don't want to mutate state directly in reducers, those should normally be avoided. Because of that, you might see &quot;insert&quot; or &quot;remove&quot; behavior written like this:</source>
          <target state="translated">Normalmente, los contenidos de una matriz de Javascript se modifican mediante funciones mutativas como &lt;code&gt;push&lt;/code&gt; , &lt;code&gt;unshift&lt;/code&gt; y &lt;code&gt;splice&lt;/code&gt; . Dado que no queremos mutar el estado directamente en los reductores, normalmente se deben evitar. Por eso, es posible que vea el comportamiento de &quot;insertar&quot; o &quot;eliminar&quot; escrito as&amp;iacute;:</target>
        </trans-unit>
        <trans-unit id="5bf716978826f82f5c2d71096281b5d3d023f9c8" translate="yes" xml:space="preserve">
          <source>Not suitable for small values that change often</source>
          <target state="translated">No es adecuado para valores pequeños que cambian a menudo</target>
        </trans-unit>
        <trans-unit id="2c924e3088204ee77ba681f72be3444357932fca" translate="yes" xml:space="preserve">
          <source>Note</source>
          <target state="translated">Note</target>
        </trans-unit>
        <trans-unit id="eb86ccd5312e5081a352de1334537a0b4650d54d" translate="yes" xml:space="preserve">
          <source>Note About Other Routing Libraries</source>
          <target state="translated">Nota sobre otras bibliotecas de rutas</target>
        </trans-unit>
        <trans-unit id="6bbf18fa1a59b4aceea2d7935084a5984b1e6199" translate="yes" xml:space="preserve">
          <source>Note about Server Rendering</source>
          <target state="translated">Nota sobre la representación del servidor</target>
        </trans-unit>
        <trans-unit id="4c76dccbb579daeff6d19eccfc8338e7cf2dfdca" translate="yes" xml:space="preserve">
          <source>Note for Advanced Users</source>
          <target state="translated">Nota para los usuarios avanzados</target>
        </trans-unit>
        <trans-unit id="0e1755ef6326ca3fc737a66979bb10b7fe7587af" translate="yes" xml:space="preserve">
          <source>Note for ES6 Savvy Users</source>
          <target state="translated">Nota para los usuarios expertos en ES6</target>
        </trans-unit>
        <trans-unit id="4bfd422b1acf7ab6bcc2d683c3dcc9593e8dfe47" translate="yes" xml:space="preserve">
          <source>Note on &lt;code&gt;Object.assign&lt;/code&gt;</source>
          <target state="translated">Nota sobre &lt;code&gt;Object.assign&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="759269df6e82649e8ad3a46ac965bc2b1dbc225c" translate="yes" xml:space="preserve">
          <source>Note on &lt;code&gt;fetch&lt;/code&gt;</source>
          <target state="translated">Nota sobre la &lt;code&gt;fetch&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="4191e14191dc73a177c536b0008fd934e599f6c0" translate="yes" xml:space="preserve">
          <source>Note on &lt;code&gt;switch&lt;/code&gt; and Boilerplate</source>
          <target state="translated">Nota sobre el &lt;code&gt;switch&lt;/code&gt; y la placa de caldera</target>
        </trans-unit>
        <trans-unit id="ae1778afee8eaabfaf5e882ffee86fd7dfad1748" translate="yes" xml:space="preserve">
          <source>Note on Boilerplate</source>
          <target state="translated">Nota sobre Boilerplate</target>
        </trans-unit>
        <trans-unit id="f520e769580a42a8ec1ab5c7de5b32126ab034fd" translate="yes" xml:space="preserve">
          <source>Note on Create React App</source>
          <target state="translated">Nota sobre la aplicación &quot;Create React&quot; (Crear Reaccionar)</target>
        </trans-unit>
        <trans-unit id="0dba1d6300344edb76956054e6c0d4c05d8a5923" translate="yes" xml:space="preserve">
          <source>Note on Error Handling</source>
          <target state="translated">Nota sobre el manejo de errores</target>
        </trans-unit>
        <trans-unit id="226b6e169b44973eab9a3a7d4ce9abe63d0c7f07" translate="yes" xml:space="preserve">
          <source>Note on Nested Entities</source>
          <target state="translated">Nota sobre las entidades anidadas</target>
        </trans-unit>
        <trans-unit id="f85a104fce56d4fdf589c3dd1d9c7b40327d3c8b" translate="yes" xml:space="preserve">
          <source>Note on Reducer Composition</source>
          <target state="translated">Nota sobre la composición del reductor</target>
        </trans-unit>
        <trans-unit id="4d5561853fa6b8c8692a5c30631ba7770fde7366" translate="yes" xml:space="preserve">
          <source>Note on Relationships</source>
          <target state="translated">Nota sobre las relaciones</target>
        </trans-unit>
        <trans-unit id="0b2ca83fd75e901aec616d782b23314502061cce" translate="yes" xml:space="preserve">
          <source>Note on immutability, side effects, and mutation</source>
          <target state="translated">Nota sobre la inmutabilidad,los efectos secundarios y la mutación</target>
        </trans-unit>
        <trans-unit id="068f9eefaa044d6807c7bf4c8c0f32ef9489c02e" translate="yes" xml:space="preserve">
          <source>Note that &amp;ldquo;updating data immutably&amp;rdquo; does &lt;em&gt;not&lt;/em&gt; mean that you must use &lt;a href=&quot;https://facebook.github.io/immutable-js/&quot;&gt;Immutable.js&lt;/a&gt;, although that is certainly an option. You can do immutable updates to plain JS objects and arrays using several different approaches:</source>
          <target state="translated">Tenga en cuenta que &quot;actualizar los datos de forma inmutable&quot; &lt;em&gt;no&lt;/em&gt; significa que deba utilizar &lt;a href=&quot;https://facebook.github.io/immutable-js/&quot;&gt;Immutable.js&lt;/a&gt; , aunque sin duda es una opci&amp;oacute;n. Puede realizar actualizaciones inmutables en matrices y objetos JS simples utilizando varios enfoques diferentes:</target>
        </trans-unit>
        <trans-unit id="03a447c3fbe3d52e5d3b4ec4eb5f4cbd98b4d07a" translate="yes" xml:space="preserve">
          <source>Note that &lt;code&gt;combineReducers&lt;/code&gt; doesn't know or care that there's anything special about the reducer function that's responsible for managing &lt;code&gt;a&lt;/code&gt;. We didn't need to modify &lt;code&gt;combineReducers&lt;/code&gt; to specifically know how to undo things - we just built up the pieces we needed into a new composed function.</source>
          <target state="translated">Tenga en cuenta que &lt;code&gt;combineReducers&lt;/code&gt; no sabe ni le importa que haya algo especial en la funci&amp;oacute;n reductora que es responsable de administrar &lt;code&gt;a&lt;/code&gt; . No necesit&amp;aacute;bamos modificar &lt;code&gt;combineReducers&lt;/code&gt; para saber espec&amp;iacute;ficamente c&amp;oacute;mo deshacer cosas, simplemente construimos las piezas que necesit&amp;aacute;bamos en una nueva funci&amp;oacute;n compuesta.</target>
        </trans-unit>
        <trans-unit id="b8cedc1c11fc5e0b2729544aacc4a299dcef1a86" translate="yes" xml:space="preserve">
          <source>Note that &lt;code&gt;todos&lt;/code&gt; also accepts &lt;code&gt;state&lt;/code&gt;&amp;mdash;but it's an array! Now &lt;code&gt;todoApp&lt;/code&gt; just gives it the slice of the state to manage, and &lt;code&gt;todos&lt;/code&gt; knows how to update just that slice. &lt;strong&gt;This is called &lt;em&gt;reducer composition&lt;/em&gt;, and it's the fundamental pattern of building Redux apps.&lt;/strong&gt;</source>
          <target state="translated">Tenga en cuenta que &lt;code&gt;todos&lt;/code&gt; tambi&amp;eacute;n acepta el &lt;code&gt;state&lt;/code&gt; pero es una matriz! Ahora &lt;code&gt;todoApp&lt;/code&gt; solo le da la porci&amp;oacute;n del estado para administrar, y &lt;code&gt;todos&lt;/code&gt; saben c&amp;oacute;mo actualizar esa porci&amp;oacute;n. &lt;strong&gt;Esto se llama &lt;em&gt;composici&amp;oacute;n reductora&lt;/em&gt; y es el patr&amp;oacute;n fundamental para crear aplicaciones Redux.&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="1f8b0362b0a282b6bc627b26a9692c8cb48f4d7f" translate="yes" xml:space="preserve">
          <source>Note that Immutable.JS objects do have a &lt;code&gt;toJS()&lt;/code&gt; method, which returns the data as a plain JavaScript data structure, but this method is extremely slow, and using it extensively will negate the performance benefits that Immutable.JS provides</source>
          <target state="translated">Tenga en cuenta que los objetos &lt;code&gt;toJS()&lt;/code&gt; tienen un m&amp;eacute;todo toJS () , que devuelve los datos como una estructura de datos JavaScript simple, pero este m&amp;eacute;todo es extremadamente lento y su uso extensivo anular&amp;aacute; los beneficios de rendimiento que Immutable.JS proporciona</target>
        </trans-unit>
        <trans-unit id="453c35dfa0c302d121b3eadd02c225634676ef9a" translate="yes" xml:space="preserve">
          <source>Note that a normalized state structure generally implies that more components are connected and each component is responsible for looking up its own data, as opposed to a few connected components looking up large amounts of data and passing all that data downwards. As it turns out, having connected parent components simply pass item IDs to connected children is a good pattern for optimizing UI performance in a React Redux application, so keeping state normalized plays a key role in improving performance.</source>
          <target state="translated">Obsérvese que una estructura de estado normalizado implica generalmente que más componentes están conectados y cada uno de ellos es responsable de buscar sus propios datos,a diferencia de unos pocos componentes conectados que buscan grandes cantidades de datos y pasan todos esos datos hacia abajo.Resulta que el hecho de que los componentes padres conectados simplemente pasen los ID de los artículos a los hijos conectados es un buen patrón para optimizar el rendimiento de la interfaz de usuario en una aplicación React Redux,por lo que mantener el estado normalizado desempeña un papel clave en la mejora del rendimiento.</target>
        </trans-unit>
        <trans-unit id="bd5f79bd2131ac43e4417a0d7a6aaff0b70dafa1" translate="yes" xml:space="preserve">
          <source>Note that a reducer is a pure function. It only &lt;em&gt;computes&lt;/em&gt; the next state. It should be completely predictable: calling it with the same inputs many times should produce the same outputs. It shouldn't perform any side effects like API calls or router transitions. These should happen before an action is dispatched.</source>
          <target state="translated">Tenga en cuenta que un reductor es una funci&amp;oacute;n pura. Solo &lt;em&gt;calcula&lt;/em&gt; el siguiente estado. Deber&amp;iacute;a ser completamente predecible: llamarlo con las mismas entradas muchas veces deber&amp;iacute;a producir las mismas salidas. No deber&amp;iacute;a tener efectos secundarios como llamadas a API o transiciones de enrutadores. Esto deber&amp;iacute;a ocurrir antes de que se env&amp;iacute;e una acci&amp;oacute;n.</target>
        </trans-unit>
        <trans-unit id="dce445ddd99a63b5841226d22eed33b3bf5571f8" translate="yes" xml:space="preserve">
          <source>Note that experimental language features are subject to change.</source>
          <target state="translated">Tenga en cuenta que las características del lenguaje experimental están sujetas a cambios.</target>
        </trans-unit>
        <trans-unit id="6b9f2be80295a73b990bda31c5fcc186d2c3fd08" translate="yes" xml:space="preserve">
          <source>Note that if you use &lt;code&gt;reduceReducers&lt;/code&gt;, you should make sure that the first reducer in the list is able to define the initial state, since the later reducers will generally assume that the entire state already exists and not try to provide defaults.</source>
          <target state="translated">Tenga en cuenta que si usa &lt;code&gt;reduceReducers&lt;/code&gt; , debe asegurarse de que el primer reductor de la lista pueda definir el estado inicial, ya que los reductores posteriores generalmente asumir&amp;aacute;n que todo el estado ya existe y no intentar&amp;aacute;n proporcionar valores predeterminados.</target>
        </trans-unit>
        <trans-unit id="3299e9657e0599957e5ab9cd478270d217e7c17c" translate="yes" xml:space="preserve">
          <source>Note that this is equivalent to:</source>
          <target state="translated">Tenga en cuenta que esto equivale a..:</target>
        </trans-unit>
        <trans-unit id="e53104dd9201201207a0d3f3e75f9194a7e7bc6e" translate="yes" xml:space="preserve">
          <source>Note that this is still an experimental language feature proposal so it may change in the future. Nevertheless some large projects such as &lt;a href=&quot;https://github.com/facebook/react-native&quot;&gt;React Native&lt;/a&gt; already use it extensively so it is safe to say that there will be a good automated migration path if it changes.</source>
          <target state="translated">Tenga en cuenta que esta sigue siendo una propuesta de funci&amp;oacute;n de lenguaje experimental, por lo que puede cambiar en el futuro. Sin embargo, algunos proyectos grandes como &lt;a href=&quot;https://github.com/facebook/react-native&quot;&gt;React Native&lt;/a&gt; ya lo utilizan ampliamente, por lo que es seguro decir que habr&amp;aacute; una buena ruta de migraci&amp;oacute;n automatizada si cambia.</target>
        </trans-unit>
        <trans-unit id="83b83325ce50b1549fdb9a559ec6487d2af3c6cb" translate="yes" xml:space="preserve">
          <source>Note that unlike Redux itself, many packages in the Redux ecosystem don't provide UMD builds, so we recommend using CommonJS module bundlers like &lt;a href=&quot;https://webpack.js.org/&quot;&gt;Webpack&lt;/a&gt; and &lt;a href=&quot;http://browserify.org/&quot;&gt;Browserify&lt;/a&gt; for the most comfortable development experience.</source>
          <target state="translated">Tenga en cuenta que, a diferencia del propio Redux, muchos paquetes del ecosistema de Redux no proporcionan compilaciones UMD, por lo que recomendamos utilizar los paquetes de m&amp;oacute;dulos &lt;a href=&quot;https://webpack.js.org/&quot;&gt;CommonJS&lt;/a&gt; como Webpack y &lt;a href=&quot;http://browserify.org/&quot;&gt;Browserify&lt;/a&gt; para una experiencia de desarrollo m&amp;aacute;s c&amp;oacute;moda.</target>
        </trans-unit>
        <trans-unit id="62f695305f86349d2a0577aa88e353229236d1f1" translate="yes" xml:space="preserve">
          <source>Note that we are using &lt;a href=&quot;https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment&quot;&gt;ES6 destructuring&lt;/a&gt; on the properties to pass in &lt;code&gt;params&lt;/code&gt; to &lt;code&gt;&amp;lt;VisibleTodoList /&amp;gt;&lt;/code&gt;.</source>
          <target state="translated">Tenga en cuenta que estamos usando la &lt;a href=&quot;https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment&quot;&gt;desestructuraci&amp;oacute;n de ES6&lt;/a&gt; en las propiedades para pasar &lt;code&gt;params&lt;/code&gt; a &lt;code&gt;&amp;lt;VisibleTodoList /&amp;gt;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="1618ff7b8e1c0dbfdbf2def8e4b7d2220f232032" translate="yes" xml:space="preserve">
          <source>Note that your &lt;code&gt;combineReducers()&lt;/code&gt; call will stay exactly as it was, but the &lt;code&gt;todos&lt;/code&gt; reducer will now refer to the reducer enhanced with Redux Undo:</source>
          <target state="translated">Tenga en cuenta que su llamada &lt;code&gt;combineReducers()&lt;/code&gt; permanecer&amp;aacute; exactamente como estaba, pero &lt;code&gt;todos&lt;/code&gt; reducer ahora se referir&amp;aacute; al reductor mejorado con Redux Undo:</target>
        </trans-unit>
        <trans-unit id="727f3c121140693e9689630208289bf9c864cbb3" translate="yes" xml:space="preserve">
          <source>Note that, conversely, if an &lt;em&gt;immutable&lt;/em&gt; object is used, the &lt;a href=&quot;#immutability-issues-with-react-redux&quot;&gt;component may re-render when it should not&lt;/a&gt;.</source>
          <target state="translated">Tenga en cuenta que, a la inversa, si se utiliza un objeto &lt;em&gt;inmutable&lt;/em&gt; , el &lt;a href=&quot;#immutability-issues-with-react-redux&quot;&gt;componente puede volver a renderizarse cuando no deber&amp;iacute;a&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="b863cfb1b4dca7e52579f1008befc33963aff3ba" translate="yes" xml:space="preserve">
          <source>Note that, conversely, if the values in your props object refer to mutable objects, &lt;a href=&quot;#shallow-checking-stops-component-re-rendering&quot;&gt;your component may not render when it should&lt;/a&gt;.</source>
          <target state="translated">Tenga en cuenta que, a la inversa, si los valores en su objeto props se refieren a objetos mutables, es &lt;a href=&quot;#shallow-checking-stops-component-re-rendering&quot;&gt;posible que su componente no se procese cuando deber&amp;iacute;a&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="e99340e9e77003c33d3f85a388e8f45942421146" translate="yes" xml:space="preserve">
          <source>Note that, even if your immutable library supports cursors, you shouldn't use them in a Redux app. The whole state tree should be considered read-only, and you should use Redux for updating the state, and subscribing to the updates. Therefore writing via cursor doesn't make sense for Redux. &lt;strong&gt;If your only use case for cursors is decoupling the state tree from the UI tree and gradually refining the cursors, you should look at selectors instead.&lt;/strong&gt; Selectors are composable getter functions. See &lt;a href=&quot;http://github.com/faassen/reselect&quot;&gt;reselect&lt;/a&gt; for a really great and concise implementation of composable selectors.</source>
          <target state="translated">Tenga en cuenta que, incluso si su biblioteca inmutable admite cursores, no debe usarlos en una aplicaci&amp;oacute;n Redux. Todo el &amp;aacute;rbol de estado debe considerarse de solo lectura y debe usar Redux para actualizar el estado y suscribirse a las actualizaciones. Por lo tanto, escribir a trav&amp;eacute;s del cursor no tiene sentido para Redux. &lt;strong&gt;Si su &amp;uacute;nico caso de uso para los cursores es desacoplar el &amp;aacute;rbol de estado del &amp;aacute;rbol de la interfaz de usuario y refinar gradualmente los cursores, deber&amp;iacute;a buscar en los selectores.&lt;/strong&gt; Los selectores son funciones getter componibles. Consulte &lt;a href=&quot;http://github.com/faassen/reselect&quot;&gt;reselect&lt;/a&gt; para una implementaci&amp;oacute;n realmente excelente y concisa de selectores componibles.</target>
        </trans-unit>
        <trans-unit id="285f98e8d01e4962eff6724b78a3c6724d0931e6" translate="yes" xml:space="preserve">
          <source>Note that:</source>
          <target state="translated">Fíjese en eso:</target>
        </trans-unit>
        <trans-unit id="9b3033c3ffc250f6cdbccd213236b9854f6e17c7" translate="yes" xml:space="preserve">
          <source>Note, however, that this does not apply to the Redux state tree, which is (usually) represented as a large collection of data.</source>
          <target state="translated">Nótese,sin embargo,que esto no se aplica al árbol de estado Redux,que se representa (normalmente)como una gran colección de datos.</target>
        </trans-unit>
        <trans-unit id="70440046a3dc2e079f23ee1c57dfa76669b732aa" translate="yes" xml:space="preserve">
          <source>Notes</source>
          <target state="translated">Notes</target>
        </trans-unit>
        <trans-unit id="401d2785d679a18987a35eba32cda5b4c90664ab" translate="yes" xml:space="preserve">
          <source>Nothing happens when I dispatch an action</source>
          <target state="translated">No pasa nada cuando envío una acción</target>
        </trans-unit>
        <trans-unit id="f2f081e8fb2d918d664c68f1b3afaafa905dc9ec" translate="yes" xml:space="preserve">
          <source>Notice that because the two &quot;slice of state&quot; reducers are now getting only their own part of the whole state as arguments, they no longer need to return complex nested state objects, and are now simpler as a result.</source>
          <target state="translated">Obsérvese que debido a que los dos reductores de &quot;rebanadas de estado&quot; están recibiendo ahora sólo su propia parte de todo el estado como argumentos,ya no necesitan devolver los objetos complejos de estado anidados,y son ahora más simples como resultado.</target>
        </trans-unit>
        <trans-unit id="259bf730b245ab69768be3ff064b89e550ad7e24" translate="yes" xml:space="preserve">
          <source>Notice that because we used the ES6 shorthand for defining an object literal, the key names in the resulting state are the same as the variable names from the imports. This may not always be the desired behavior, and is often a cause of confusion for those who aren't as familiar with ES6 syntax.</source>
          <target state="translated">Fíjese que como usamos la abreviatura ES6 para definir un objeto literalmente,los nombres clave en el estado resultante son los mismos que los nombres de las variables de las importaciones.Esto puede no ser siempre el comportamiento deseado,y es a menudo una causa de confusión para aquellos que no están tan familiarizados con la sintaxis ES6.</target>
        </trans-unit>
        <trans-unit id="c55d1d53bcc6077be7393d548df6e69409007456" translate="yes" xml:space="preserve">
          <source>Notice that the structure of the data is a bit complex, and some of the data is repeated. This is a concern for several reasons:</source>
          <target state="translated">Fíjese que la estructura de los datos es un poco compleja,y algunos de los datos se repiten.Esto es una preocupación por varias razones:</target>
        </trans-unit>
        <trans-unit id="31c43966210d015eb458a0c29218a03e52a64682" translate="yes" xml:space="preserve">
          <source>Notice that this simple function fulfills all the basic requirements. It returns a default value if none exists, initializing the store; it determines what sort of update needs to be done based on the type of the action, and returns new values; and it returns the previous state if no work needs to be done.</source>
          <target state="translated">Fíjese que esta simple función cumple todos los requisitos básicos.Devuelve un valor por defecto si no existe ninguno,inicializando la tienda;determina qué tipo de actualización debe realizarse en función del tipo de acción,y devuelve nuevos valores;y devuelve el estado anterior si no es necesario realizar ningún trabajo.</target>
        </trans-unit>
        <trans-unit id="2f594ca01c521a947b3e348a3910ebef9ac4949d" translate="yes" xml:space="preserve">
          <source>Now I specified the &lt;code&gt;preloadedState&lt;/code&gt; as the argument to &lt;code&gt;createStore()&lt;/code&gt;. The state returned from the combined reducer &lt;em&gt;combines&lt;/em&gt; the initial state I specified for the &lt;code&gt;a&lt;/code&gt; reducer with the &lt;code&gt;'wat'&lt;/code&gt; default argument specified that &lt;code&gt;b&lt;/code&gt; reducer chose itself.</source>
          <target state="translated">Ahora especifiqu&amp;eacute; &lt;code&gt;preloadedState&lt;/code&gt; como argumento para &lt;code&gt;createStore()&lt;/code&gt; . El estado devuelto desde el reductor combinado &lt;em&gt;combina&lt;/em&gt; el estado inicial I especificado para el &lt;code&gt;a&lt;/code&gt; reductor con el &lt;code&gt;'wat'&lt;/code&gt; argumento predeterminado especifica que &lt;code&gt;b&lt;/code&gt; reductor eligi&amp;oacute; s&amp;iacute; mismo.</target>
        </trans-unit>
        <trans-unit id="2b89cc88436f6b137ad4a9f780f72e731b9b03e7" translate="yes" xml:space="preserve">
          <source>Now all that's left to do is to port the UI to &lt;a href=&quot;../basics/usagewithreact&quot;&gt;use react-redux&lt;/a&gt; or equivalent.</source>
          <target state="translated">Ahora todo lo que queda por hacer es portar la interfaz de usuario para &lt;a href=&quot;../basics/usagewithreact&quot;&gt;usar react-redux&lt;/a&gt; o equivalente.</target>
        </trans-unit>
        <trans-unit id="eb64c52d4e3660f6e76a49dcb8eecf7480f674ab" translate="yes" xml:space="preserve">
          <source>Now all you need to do is add the buttons for the Undo and Redo actions.</source>
          <target state="translated">Ahora todo lo que necesitas hacer es añadir los botones para las acciones de Deshacer y Rehacer.</target>
        </trans-unit>
        <trans-unit id="a13470744cb184c27b6870ae352da0030e60cab7" translate="yes" xml:space="preserve">
          <source>Now if you click on &lt;code&gt;&amp;lt;FilterLink /&amp;gt;&lt;/code&gt; you will see that your URL will change between &lt;code&gt;'/SHOW_COMPLETED'&lt;/code&gt;, &lt;code&gt;'/SHOW_ACTIVE'&lt;/code&gt;, and &lt;code&gt;'/'&lt;/code&gt;. Even if you are going back with your browser, it will use your browser's history and effectively go to your previous URL.</source>
          <target state="translated">Ahora, si hace clic en &lt;code&gt;&amp;lt;FilterLink /&amp;gt;&lt;/code&gt; , ver&amp;aacute; que su URL cambiar&amp;aacute; entre &lt;code&gt;'/SHOW_COMPLETED'&lt;/code&gt; , &lt;code&gt;'/SHOW_ACTIVE'&lt;/code&gt; y &lt;code&gt;'/'&lt;/code&gt; . Incluso si regresa con su navegador, usar&amp;aacute; el historial de su navegador y efectivamente ir&amp;aacute; a su URL anterior.</target>
        </trans-unit>
        <trans-unit id="b5c5b26561c588a93e62173562a3ad6868edb589" translate="yes" xml:space="preserve">
          <source>Now it's &lt;em&gt;very&lt;/em&gt; clear what's happening in each case. We can also start to see some patterns emerging.</source>
          <target state="translated">Ahora est&amp;aacute; &lt;em&gt;muy&lt;/em&gt; claro lo que sucede en cada caso. Tambi&amp;eacute;n podemos empezar a ver algunos patrones emergentes.</target>
        </trans-unit>
        <trans-unit id="039958ecab3a233f66de07e31ed5de4247ff1cc6" translate="yes" xml:space="preserve">
          <source>Now it's time to hook up those presentational components to Redux by creating some containers. Technically, a container component is just a React component that uses &lt;a href=&quot;../api/store#subscribe&quot;&gt;&lt;code&gt;store.subscribe()&lt;/code&gt;&lt;/a&gt; to read a part of the Redux state tree and supply props to a presentational component it renders. You could write a container component by hand, but we suggest instead generating container components with the React Redux library's &lt;a href=&quot;https://github.com/reactjs/react-redux/blob/master/docs/api.md#connectmapstatetoprops-mapdispatchtoprops-mergeprops-options&quot;&gt;&lt;code&gt;connect()&lt;/code&gt;&lt;/a&gt; function, which provides many useful optimizations to prevent unnecessary re-renders. (One result of this is that you shouldn't have to worry about the &lt;a href=&quot;https://facebook.github.io/react/docs/advanced-performance.html&quot;&gt;React performance suggestion&lt;/a&gt; of implementing &lt;code&gt;shouldComponentUpdate&lt;/code&gt; yourself.)</source>
          <target state="translated">Ahora es el momento de conectar esos componentes de presentaci&amp;oacute;n a Redux creando algunos contenedores. T&amp;eacute;cnicamente, un componente contenedor es solo un componente de React que usa &lt;a href=&quot;../api/store#subscribe&quot;&gt; &lt;code&gt;store.subscribe()&lt;/code&gt; &lt;/a&gt; para leer una parte del &amp;aacute;rbol de estado de Redux y proporcionar accesorios a un componente de presentaci&amp;oacute;n que representa. Puede escribir un componente de contenedor a mano, pero sugerimos generar componentes de contenedor con la funci&amp;oacute;n &lt;a href=&quot;https://github.com/reactjs/react-redux/blob/master/docs/api.md#connectmapstatetoprops-mapdispatchtoprops-mergeprops-options&quot;&gt; &lt;code&gt;connect()&lt;/code&gt; &lt;/a&gt; la biblioteca React Redux , que proporciona muchas optimizaciones &amp;uacute;tiles para evitar re-renderizaciones innecesarias. (Un resultado de esto es que no deber&amp;iacute;a tener que preocuparse por la &lt;a href=&quot;https://facebook.github.io/react/docs/advanced-performance.html&quot;&gt;sugerencia&lt;/a&gt; de rendimiento de React de implementar &lt;code&gt;shouldComponentUpdate&lt;/code&gt; usted mismo).</target>
        </trans-unit>
        <trans-unit id="9e400bbf3cbd513fc16c8f3c4354394f2d6dfefd" translate="yes" xml:space="preserve">
          <source>Now let's &lt;a href=&quot;reducers&quot;&gt;define some reducers&lt;/a&gt; to specify how the state updates when you dispatch these actions!</source>
          <target state="translated">&amp;iexcl;Ahora &lt;a href=&quot;reducers&quot;&gt;definamos algunos reductores&lt;/a&gt; para especificar c&amp;oacute;mo se actualiza el estado cuando env&amp;iacute;as estas acciones!</target>
        </trans-unit>
        <trans-unit id="a861289e4760b669f41d014c314ded1b05995e5c" translate="yes" xml:space="preserve">
          <source>Now let's consider a case where you use &lt;code&gt;combineReducers()&lt;/code&gt;.</source>
          <target state="translated">Ahora consideremos un caso en el que usa &lt;code&gt;combineReducers()&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="25793e0576f1da9e1c2bfbfd26f6e9946bceb3cb" translate="yes" xml:space="preserve">
          <source>Now let's handle &lt;code&gt;SET_VISIBILITY_FILTER&lt;/code&gt;. All it needs to do is to change &lt;code&gt;visibilityFilter&lt;/code&gt; on the state. Easy:</source>
          <target state="translated">Ahora manejemos &lt;code&gt;SET_VISIBILITY_FILTER&lt;/code&gt; . Todo lo que necesita hacer es cambiar el &lt;code&gt;visibilityFilter&lt;/code&gt; de visibilidad en el estado. F&amp;aacute;cil:</target>
        </trans-unit>
        <trans-unit id="f7f2dcd080c7438e503e2c14d7c5e936c3fb8edb" translate="yes" xml:space="preserve">
          <source>Now let's say you create a store with it.</source>
          <target state="translated">Ahora digamos que creas una tienda con él.</target>
        </trans-unit>
        <trans-unit id="29c32e5fc4131c9dccec8ae29eeeaccbf917ea78" translate="yes" xml:space="preserve">
          <source>Now middleware takes the &lt;code&gt;next()&lt;/code&gt; dispatch function, and returns a dispatch function, which in turn serves as &lt;code&gt;next()&lt;/code&gt; to the middleware to the left, and so on. It's still useful to have access to some store methods like &lt;code&gt;getState()&lt;/code&gt;, so &lt;code&gt;store&lt;/code&gt; stays available as the top-level argument.</source>
          <target state="translated">Ahora el middleware toma la funci&amp;oacute;n de env&amp;iacute;o &lt;code&gt;next()&lt;/code&gt; y devuelve una funci&amp;oacute;n de env&amp;iacute;o, que a su vez sirve como &lt;code&gt;next()&lt;/code&gt; al middleware de la izquierda, y as&amp;iacute; sucesivamente. Todav&amp;iacute;a es &amp;uacute;til tener acceso a algunos m&amp;eacute;todos de tienda como &lt;code&gt;getState()&lt;/code&gt; , por lo que la &lt;code&gt;store&lt;/code&gt; permanece disponible como argumento de nivel superior.</target>
        </trans-unit>
        <trans-unit id="382b9eb84610aaa6ea11db467333f8d6953604ec" translate="yes" xml:space="preserve">
          <source>Now that we have a better understanding of reducer enhancers, we can see that this is exactly what &lt;code&gt;undoable&lt;/code&gt; should have been:</source>
          <target state="translated">Ahora que tenemos una mejor comprensi&amp;oacute;n de los potenciadores de reductores, podemos ver que esto es exactamente lo que deber&amp;iacute;a haber sido &lt;code&gt;undoable&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="a5a09e1de7d9c9396b8d34429449e39f8bd9943d" translate="yes" xml:space="preserve">
          <source>Now that we have created a store, let's verify our program works! Even without any UI, we can already test the update logic.</source>
          <target state="translated">Ahora que hemos creado una tienda,¡vamos a verificar que nuestro programa funciona! Incluso sin ninguna UI,ya podemos probar la lógica de la actualización.</target>
        </trans-unit>
        <trans-unit id="b286277222e0bb8486e6265c655c4d0a7094d7a9" translate="yes" xml:space="preserve">
          <source>Now that we've decided what our state object looks like, we're ready to write a reducer for it. The reducer is a pure function that takes the previous state and an action, and returns the next state.</source>
          <target state="translated">Ahora que hemos decidido cómo es nuestro objeto de estado,estamos listos para escribir un reductor para él.El reductor es una función pura que toma el estado anterior y una acción,y devuelve el siguiente estado.</target>
        </trans-unit>
        <trans-unit id="c21e7038b2cfa1d79db9097dffc1cae32ab8eff6" translate="yes" xml:space="preserve">
          <source>Now that you know how Redux works, let's &lt;a href=&quot;usagewithreact&quot;&gt;connect it to a React app&lt;/a&gt;.</source>
          <target state="translated">Ahora que sabe c&amp;oacute;mo funciona Redux, &lt;a href=&quot;usagewithreact&quot;&gt;con&amp;eacute;ctelo a una aplicaci&amp;oacute;n React&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="04bd1420551bdec742d2330183e8fe0464300fae" translate="yes" xml:space="preserve">
          <source>Now that you know how to do basic routing, you can learn more about &lt;a href=&quot;https://github.com/reactjs/react-router/tree/v3/docs/&quot;&gt;React Router API&lt;/a&gt;</source>
          <target state="translated">Ahora que sabe c&amp;oacute;mo realizar el enrutamiento b&amp;aacute;sico, puede obtener m&amp;aacute;s informaci&amp;oacute;n sobre &lt;a href=&quot;https://github.com/reactjs/react-router/tree/v3/docs/&quot;&gt;React Router API&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="df198929b555d3f025b9f4c6dce1d531c1c5ab85" translate="yes" xml:space="preserve">
          <source>Now the &lt;code&gt;&amp;lt;App /&amp;gt;&lt;/code&gt; component will be rendered if the URL matches '/'. Additionally, we will add the optional &lt;code&gt;(:filter)&lt;/code&gt; parameter to &lt;code&gt;/&lt;/code&gt;, because we will need it further on when we try to read the parameter &lt;code&gt;(:filter)&lt;/code&gt; from the URL.</source>
          <target state="translated">Ahora, el componente &lt;code&gt;&amp;lt;App /&amp;gt;&lt;/code&gt; se renderizar&amp;aacute; si la URL coincide con '/'. Adem&amp;aacute;s, agregaremos el par&amp;aacute;metro opcional &lt;code&gt;(:filter)&lt;/code&gt; a &lt;code&gt;/&lt;/code&gt; , porque lo necesitaremos m&amp;aacute;s adelante cuando intentemos leer el par&amp;aacute;metro &lt;code&gt;(:filter)&lt;/code&gt; de la URL.</target>
        </trans-unit>
        <trans-unit id="5d916cc36e1dd4f19a7f89bff47aaabeb96451f9" translate="yes" xml:space="preserve">
          <source>Now the &lt;code&gt;todos&lt;/code&gt; part of the state looks like this:</source>
          <target state="translated">Ahora la parte de &lt;code&gt;todos&lt;/code&gt; del estado se ve as&amp;iacute;:</target>
        </trans-unit>
        <trans-unit id="d942270816eb39d5e0deb26630ac877f7158718d" translate="yes" xml:space="preserve">
          <source>Now we can rewrite the main reducer as a function that calls the reducers managing parts of the state, and combines them into a single object. It also doesn't need to know the complete initial state anymore. It's enough that the child reducers return their initial state when given &lt;code&gt;undefined&lt;/code&gt; at first.</source>
          <target state="translated">Ahora podemos reescribir el reductor principal como una funci&amp;oacute;n que llama a los reductores que administran partes del estado y los combina en un solo objeto. Tampoco necesita saber m&amp;aacute;s el estado inicial completo. Es suficiente que los reductores infantiles devuelvan su estado inicial cuando se administran &lt;code&gt;undefined&lt;/code&gt; al principio.</target>
        </trans-unit>
        <trans-unit id="a667ae6de0b7dc9eab910e5e9d0c63d6e4240965" translate="yes" xml:space="preserve">
          <source>Now you can add &lt;code&gt;UndoRedo&lt;/code&gt; component to the &lt;code&gt;App&lt;/code&gt; component:</source>
          <target state="translated">Ahora puede agregar el componente &lt;code&gt;UndoRedo&lt;/code&gt; al componente de la &lt;code&gt;App&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="c2b05aac713becd3e746ad95aee7b78fc6182e91" translate="yes" xml:space="preserve">
          <source>Now you saw an example of what middleware can do in Redux, it's time to learn how it actually works, and how you can create your own. Go on to the next detailed section about &lt;a href=&quot;middleware&quot;&gt;Middleware&lt;/a&gt;.</source>
          <target state="translated">Ahora que vio un ejemplo de lo que el middleware puede hacer en Redux, es hora de aprender c&amp;oacute;mo funciona realmente y c&amp;oacute;mo puede crear el suyo propio. Vaya a la siguiente secci&amp;oacute;n detallada sobre &lt;a href=&quot;middleware&quot;&gt;Middleware&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="65dfb2a3456a6347a253e5df887084ce9d5bc969" translate="yes" xml:space="preserve">
          <source>Now you'll be able to call them directly:</source>
          <target state="translated">Ahora podrás llamarlos directamente:</target>
        </trans-unit>
        <trans-unit id="e7d7d4bdf1f24961ac2cd4648199d9fca2b39f7d" translate="yes" xml:space="preserve">
          <source>Now, if user presses &amp;ldquo;Undo&amp;rdquo;, we want it to change to move into the past:</source>
          <target state="translated">Ahora, si el usuario presiona &quot;Deshacer&quot;, queremos que cambie para pasar al pasado:</target>
        </trans-unit>
        <trans-unit id="9f0f0f51df5136b797764eade8b49d76aa9d3def" translate="yes" xml:space="preserve">
          <source>Now, the UI can be updated to reflect the new state. If you use bindings like &lt;a href=&quot;https://github.com/gaearon/react-redux&quot;&gt;React Redux&lt;/a&gt;, this is the point at which &lt;code&gt;component.setState(newState)&lt;/code&gt; is called.</source>
          <target state="translated">Ahora, la interfaz de usuario se puede actualizar para reflejar el nuevo estado. Si usa enlaces como &lt;a href=&quot;https://github.com/gaearon/react-redux&quot;&gt;React Redux&lt;/a&gt; , este es el punto en el que se llama a &lt;code&gt;component.setState(newState)&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="238539b34511566c52f015ab4f02c6eba84442e7" translate="yes" xml:space="preserve">
          <source>Now, the problem is what to put in the action creator and what in the reducer, the choice between fat and thin action objects. If you put all the logic in the action creator, you end up with fat action objects that basically declare the updates to the state. Reducers become pure, dumb, add-this, remove that, update these functions. They will be easy to compose. But not much of your business logic will be there. If you put more logic in the reducer, you end up with nice, thin action objects, most of your data logic in one place, but your reducers are harder to compose since you might need info from other branches. You end up with large reducers or reducers that take additional arguments from higher up in the state.</source>
          <target state="translated">Ahora,el problema es qué poner en el creador de acción y qué en el reductor,la elección entre objetos de acción gorda y delgada.Si pones toda la lógica en el creador de acciones,terminas con objetos de acción gordos que básicamente declaran las actualizaciones del estado.Los reductores se vuelven puros,tontos,agregan esto,lo eliminan,actualizan estas funciones.Serán fáciles de componer.Pero no habrá mucha de tu lógica de negocios.Si pones más lógica en el reductor,acabarás con bonitos objetos de acción delgada,la mayoría de tu lógica de datos en un solo lugar,pero tus reductores son más difíciles de componer ya que podrías necesitar información de otras ramas.Terminas con grandes reductores o reductores que toman argumentos adicionales de más arriba en el estado.</target>
        </trans-unit>
        <trans-unit id="dd811c18dfe3457c25b793431983374970c1dbff" translate="yes" xml:space="preserve">
          <source>Object spread lets us simplify the above &lt;code&gt;map&lt;/code&gt; call to:</source>
          <target state="translated">La extensi&amp;oacute;n de objetos nos permite simplificar la llamada del &lt;code&gt;map&lt;/code&gt; a anterior a:</target>
        </trans-unit>
        <trans-unit id="f2d82a77c6f21355d9167707cd08b4acf80faac7" translate="yes" xml:space="preserve">
          <source>Obviously, each layer of nesting makes this harder to read, and gives more chances to make mistakes. This is one of several reasons why you are encouraged to keep your state flattened, and compose reducers as much as possible.</source>
          <target state="translated">Obviamente,cada capa de anidación hace que esto sea más difícil de leer,y da más oportunidades de cometer errores.Esta es una de las varias razones por las que se le anima a mantener su estado aplanado,y a componer reductores tanto como sea posible.</target>
        </trans-unit>
        <trans-unit id="99059fe3a8c10ea3a773517b2809c9d604ee1753" translate="yes" xml:space="preserve">
          <source>Obviously, trying to handle every possible action in a single function does not scale well, simply in terms of function size and readability, so it makes sense to split the actual work into separate functions that can be called by the top-level reducer. In particular, the common suggested pattern is to have a separate sub-reducer function that is responsible for managing updates to a particular slice of state at a specific key. The &lt;code&gt;combineReducers()&lt;/code&gt; that comes with Redux is one of the many possible ways to achieve this. It's also highly suggested to keep your store state as flat and as normalized as possible. Ultimately, though, you are in charge of organizing your reducer logic any way you want.</source>
          <target state="translated">Obviamente, tratar de manejar todas las acciones posibles en una sola funci&amp;oacute;n no se escala bien, simplemente en t&amp;eacute;rminos de tama&amp;ntilde;o y legibilidad de la funci&amp;oacute;n, por lo que tiene sentido dividir el trabajo real en funciones separadas que puedan ser llamadas por el reductor de nivel superior. En particular, el patr&amp;oacute;n com&amp;uacute;n sugerido es tener una funci&amp;oacute;n de sub-reductor separada que sea responsable de administrar las actualizaciones a un segmento particular de estado en una clave espec&amp;iacute;fica. El &lt;code&gt;combineReducers()&lt;/code&gt; que viene con Redux es una de las muchas formas posibles de lograrlo. Tambi&amp;eacute;n es muy recomendable mantener el estado de su tienda lo m&amp;aacute;s plano y normalizado posible. Sin embargo, en &amp;uacute;ltima instancia, usted est&amp;aacute; a cargo de organizar su l&amp;oacute;gica reductora de la forma que desee.</target>
        </trans-unit>
        <trans-unit id="0cc135e616ba1be37c0cfabb241f9c97c73b5f08" translate="yes" xml:space="preserve">
          <source>On the client side, a new Redux store will be created and initialized with the state provided from the server.</source>
          <target state="translated">En el lado del cliente,se creará una nueva tienda Redux y se inicializará con el estado proporcionado por el servidor.</target>
        </trans-unit>
        <trans-unit id="c6f42b17ddf866ba0ef881ccab2d5ac7ea6bba3a" translate="yes" xml:space="preserve">
          <source>On the server side, we simply wrap our existing code in the &lt;code&gt;fetchCounter&lt;/code&gt; and receive the result in the callback:</source>
          <target state="translated">En el lado del servidor, simplemente &lt;code&gt;fetchCounter&lt;/code&gt; nuestro c&amp;oacute;digo existente en fetchCounter y recibimos el resultado en la devoluci&amp;oacute;n de llamada:</target>
        </trans-unit>
        <trans-unit id="abb297d24ed9dbaa92d7ae801845e13d9a8c7d96" translate="yes" xml:space="preserve">
          <source>On this page we will only feature a few of them that the Redux maintainers have vetted personally. Don't let this discourage you from trying the rest of them! The ecosystem is growing too fast, and we have a limited time to look at everything. Consider these the &amp;ldquo;staff picks&amp;rdquo;, and don't hesitate to submit a PR if you've built something wonderful with Redux.</source>
          <target state="translated">En esta p&amp;aacute;gina solo mostraremos algunos de ellos que los mantenedores de Redux han examinado personalmente. &amp;iexcl;No dejes que esto te desanime de probar el resto de ellos! El ecosistema est&amp;aacute; creciendo demasiado r&amp;aacute;pido y tenemos un tiempo limitado para analizarlo todo. Considere estas &amp;ldquo;selecciones de personal&amp;rdquo; y no dude en enviar un PR si ha construido algo maravilloso con Redux.</target>
        </trans-unit>
        <trans-unit id="00a57ab237ca0a42b345eb1574324e493eaac905" translate="yes" xml:space="preserve">
          <source>Once used, Immutable.JS will spread throughout your codebase</source>
          <target state="translated">Una vez usado,Immutable.JS se extenderá a través de su base de código</target>
        </trans-unit>
        <trans-unit id="e388b344448bc1c302e673361dcd29e30a20c835" translate="yes" xml:space="preserve">
          <source>Once you encapsulate your data with Immutable.JS, you have to use Immutable.JS&amp;rsquo;s &lt;code&gt;get()&lt;/code&gt; or &lt;code&gt;getIn()&lt;/code&gt; property accessors to access it.</source>
          <target state="translated">Una vez que encapsula sus datos con Immutable.JS, debe usar los &lt;code&gt;getIn()&lt;/code&gt; de acceso de propiedad &lt;code&gt;get()&lt;/code&gt; o getIn () de Immutable.JS para acceder a ellos.</target>
        </trans-unit>
        <trans-unit id="99e18cc195c97bd7e16b2c5c00f317c2ee608dad" translate="yes" xml:space="preserve">
          <source>One approach is to merge the contents of the action in to the existing state. In this case, we need to do a deep recursive merge, not just a shallow copy. The Lodash &lt;code&gt;merge&lt;/code&gt; function can handle this for us:</source>
          <target state="translated">Un enfoque consiste en fusionar el contenido de la acci&amp;oacute;n en el estado existente. En este caso, necesitamos hacer una fusi&amp;oacute;n recursiva profunda, no solo una copia superficial. La funci&amp;oacute;n de &lt;code&gt;merge&lt;/code&gt; Lodash puede manejar esto por nosotros:</target>
        </trans-unit>
        <trans-unit id="d0a9b8df0f4b63915decda672bef5db25fe34cfb" translate="yes" xml:space="preserve">
          <source>One frequently asked question is whether Redux &quot;calls all reducers&quot; when dispatching an action. Since there really is only one root reducer function, the default answer is &quot;no, it does not&quot;. However, &lt;code&gt;combineReducers&lt;/code&gt; has specific behavior that &lt;em&gt;does&lt;/em&gt; work that way. In order to assemble the new state tree, &lt;code&gt;combineReducers&lt;/code&gt; will call each slice reducer with its current slice of state and the current action, giving the slice reducer a chance to respond and update its slice of state if needed. So, in that sense, using &lt;code&gt;combineReducers&lt;/code&gt;&lt;em&gt;does&lt;/em&gt; &quot;call all reducers&quot;, or at least all of the slice reducers it is wrapping.</source>
          <target state="translated">Una pregunta frecuente es si Redux &quot;llama a todos los reductores&quot; cuando env&amp;iacute;a una acci&amp;oacute;n. Dado que en realidad solo hay una funci&amp;oacute;n de reducci&amp;oacute;n de ra&amp;iacute;z, la respuesta predeterminada es &quot;no, no es as&amp;iacute;&quot;. Sin embargo, &lt;code&gt;combineReducers&lt;/code&gt; tiene un comportamiento espec&amp;iacute;fico que &lt;em&gt;hace&lt;/em&gt; el trabajo de esa manera. Para ensamblar el nuevo &amp;aacute;rbol de estado, &lt;code&gt;combineReducers&lt;/code&gt; llamar&amp;aacute; a cada reductor de corte con su corte de estado actual y la acci&amp;oacute;n actual, dando al reductor de corte la oportunidad de responder y actualizar su corte de estado si es necesario. Por lo tanto, en ese sentido, el uso de &lt;code&gt;combineReducers&lt;/code&gt; &lt;em&gt;no&lt;/em&gt; &quot;llamar a todos los reductores&quot;, o al menos todos los reductores de rebanada es envolver.</target>
        </trans-unit>
        <trans-unit id="a4284542792cb9fd32437214931abfe8482da4b0" translate="yes" xml:space="preserve">
          <source>One neat trick is to use the &lt;a href=&quot;https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Functions/default_parameters&quot;&gt;ES6 default arguments syntax&lt;/a&gt; to write this in a more compact way:</source>
          <target state="translated">Un buen truco es usar la &lt;a href=&quot;https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Functions/default_parameters&quot;&gt;sintaxis de argumentos predeterminada de ES6&lt;/a&gt; para escribir esto de una manera m&amp;aacute;s compacta:</target>
        </trans-unit>
        <trans-unit id="da5b8fcb37f2ad97d55411d18f4f50a8acf81489" translate="yes" xml:space="preserve">
          <source>One of the benefits of Redux is that it makes state changes predictable and transparent. Every time an action is dispatched, the new state is computed and saved. The state cannot change by itself, it can only change as a consequence of a specific action.</source>
          <target state="translated">Uno de los beneficios de Redux es que hace que los cambios de estado sean predecibles y transparentes.Cada vez que se envía una acción,el nuevo estado se computa y se guarda.El estado no puede cambiar por sí mismo,sólo puede cambiar como consecuencia de una acción específica.</target>
        </trans-unit>
        <trans-unit id="b05c40a81c382d7e1e4c5eb83c383c8c7dded6ae" translate="yes" xml:space="preserve">
          <source>One of the key advantages of immutability is that it enables shallow equality checking, which dramatically improves performance.</source>
          <target state="translated">Una de las principales ventajas de la inmutabilidad es que permite una comprobación superficial de la igualdad,lo que mejora drásticamente el rendimiento.</target>
        </trans-unit>
        <trans-unit id="850c598dddd960ff8dafd82d078c789192dada81" translate="yes" xml:space="preserve">
          <source>Operating on JavaScript objects and arrays in an immutable way can be slow, particularly as your state tree grows larger.</source>
          <target state="translated">Operar con objetos y arreglos de JavaScript de forma inmutable puede ser lento,sobre todo cuando su árbol de estado crece.</target>
        </trans-unit>
        <trans-unit id="af6c37b39bb6ed10d58088845d5a93da150bef3c" translate="yes" xml:space="preserve">
          <source>Operations like &quot;Look up all books by this author&quot; can then accomplished with a single loop over the join table. Given the typical amounts of data in a client application and the speed of Javascript engines, this kind of operation is likely to have sufficiently fast performance for most use cases.</source>
          <target state="translated">Operaciones como &quot;Busca todos los libros de este autor&quot; se pueden realizar con un solo lazo sobre la mesa de unión.Dadas las cantidades típicas de datos en una aplicación cliente y la velocidad de los motores de Javascript,este tipo de operación es probable que tenga un rendimiento suficientemente rápido para la mayoría de los casos de uso.</target>
        </trans-unit>
        <trans-unit id="0d7d7275da2d9aaca178d7f0589e207de7175f18" translate="yes" xml:space="preserve">
          <source>Or check out the &lt;a href=&quot;https://codesandbox.io/s/github/reactjs/redux/tree/master/examples/async&quot;&gt;sandbox&lt;/a&gt;.</source>
          <target state="translated">O echa un vistazo a la &lt;a href=&quot;https://codesandbox.io/s/github/reactjs/redux/tree/master/examples/async&quot;&gt;caja de arena&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="9a59e4840cfb59b6c79325bf664a6e38968716f6" translate="yes" xml:space="preserve">
          <source>Or check out the &lt;a href=&quot;https://codesandbox.io/s/github/reactjs/redux/tree/master/examples/counter&quot;&gt;sandbox&lt;/a&gt;.</source>
          <target state="translated">O echa un vistazo a la &lt;a href=&quot;https://codesandbox.io/s/github/reactjs/redux/tree/master/examples/counter&quot;&gt;caja de arena&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="1b1b65f5915920208d15bbc3e393183be7f4d31d" translate="yes" xml:space="preserve">
          <source>Or check out the &lt;a href=&quot;https://codesandbox.io/s/github/reactjs/redux/tree/master/examples/real-world&quot;&gt;sandbox&lt;/a&gt;.</source>
          <target state="translated">O echa un vistazo a la &lt;a href=&quot;https://codesandbox.io/s/github/reactjs/redux/tree/master/examples/real-world&quot;&gt;caja de arena&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="e36463d35299a6a01ac3b467e7d9564b1281179e" translate="yes" xml:space="preserve">
          <source>Or check out the &lt;a href=&quot;https://codesandbox.io/s/github/reactjs/redux/tree/master/examples/shopping-cart&quot;&gt;sandbox&lt;/a&gt;.</source>
          <target state="translated">O echa un vistazo a la &lt;a href=&quot;https://codesandbox.io/s/github/reactjs/redux/tree/master/examples/shopping-cart&quot;&gt;caja de arena&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="7b45aa8dcd97522495289719a1a18c6bc3300442" translate="yes" xml:space="preserve">
          <source>Or check out the &lt;a href=&quot;https://codesandbox.io/s/github/reactjs/redux/tree/master/examples/todomvc&quot;&gt;sandbox&lt;/a&gt;.</source>
          <target state="translated">O echa un vistazo a la &lt;a href=&quot;https://codesandbox.io/s/github/reactjs/redux/tree/master/examples/todomvc&quot;&gt;caja de arena&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="d0e47b777f4c49cec0992d3e10c918d3a72df107" translate="yes" xml:space="preserve">
          <source>Or check out the &lt;a href=&quot;https://codesandbox.io/s/github/reactjs/redux/tree/master/examples/todos&quot;&gt;sandbox&lt;/a&gt;.</source>
          <target state="translated">O echa un vistazo a la &lt;a href=&quot;https://codesandbox.io/s/github/reactjs/redux/tree/master/examples/todos&quot;&gt;caja de arena&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="238eb2632136a6f032d42bfad2c07321a67db57b" translate="yes" xml:space="preserve">
          <source>Or check out the &lt;a href=&quot;https://codesandbox.io/s/github/reactjs/redux/tree/master/examples/todos-with-undo&quot;&gt;sandbox&lt;/a&gt;.</source>
          <target state="translated">O echa un vistazo a la &lt;a href=&quot;https://codesandbox.io/s/github/reactjs/redux/tree/master/examples/todos-with-undo&quot;&gt;caja de arena&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="6685195fe8e2bc04892759da1650e9052a5de4a3" translate="yes" xml:space="preserve">
          <source>Or check out the &lt;a href=&quot;https://codesandbox.io/s/github/reactjs/redux/tree/master/examples/tree-view&quot;&gt;sandbox&lt;/a&gt;.</source>
          <target state="translated">O echa un vistazo a la &lt;a href=&quot;https://codesandbox.io/s/github/reactjs/redux/tree/master/examples/tree-view&quot;&gt;caja de arena&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="8370968834196c749ed73b6cfe92801e8117ab54" translate="yes" xml:space="preserve">
          <source>Or many granular histories so user can undo and redo actions in them independently:</source>
          <target state="translated">O muchas historias granulares para que el usuario pueda deshacer y rehacer acciones en ellas de forma independiente:</target>
        </trans-unit>
        <trans-unit id="0b392c8838a1573058a955eb668416b3dbbd0f9f" translate="yes" xml:space="preserve">
          <source>Or you can define separate types for them:</source>
          <target state="translated">O puedes definir tipos separados para ellos:</target>
        </trans-unit>
        <trans-unit id="a0da4144d426fe2efff7bea61cbf27a014d43a17" translate="yes" xml:space="preserve">
          <source>Organizing Large React Applications</source>
          <target state="translated">Organizando las aplicaciones de Large React</target>
        </trans-unit>
        <trans-unit id="8ca854d46781915131c4b8db35d1de91075f652b" translate="yes" xml:space="preserve">
          <source>Organizing Normalized Data in State</source>
          <target state="translated">Organización de los datos normalizados en el Estado</target>
        </trans-unit>
        <trans-unit id="34d16c8765f577c8baee06d396d90415855ba54d" translate="yes" xml:space="preserve">
          <source>Organizing State</source>
          <target state="translated">Estado organizador</target>
        </trans-unit>
        <trans-unit id="077be78f1b3e88543b41122cb8c6c6f77f12b367" translate="yes" xml:space="preserve">
          <source>Other Approaches</source>
          <target state="translated">Otros enfoques</target>
        </trans-unit>
        <trans-unit id="eebb2f9cdc2951c739e98100dec8f3363c3a726b" translate="yes" xml:space="preserve">
          <source>Other Components</source>
          <target state="translated">Otros componentes</target>
        </trans-unit>
        <trans-unit id="0b72b54d734e499b1f158ae8c13378ee3157b18a" translate="yes" xml:space="preserve">
          <source>Other side effects like generating unique IDs or timestamps in a reducer also make the code unpredictable and harder to debug and test.</source>
          <target state="translated">Otros efectos secundarios como la generación de identificaciones o marcas de tiempo únicas en un reductor también hacen que el código sea impredecible y más difícil de depurar y probar.</target>
        </trans-unit>
        <trans-unit id="fb937a0b9fb7519cc10c3b20032625261018ed28" translate="yes" xml:space="preserve">
          <source>Other than &lt;code&gt;type&lt;/code&gt;, the structure of an action object is really up to you. If you're interested, check out &lt;a href=&quot;https://github.com/acdlite/flux-standard-action&quot;&gt;Flux Standard Action&lt;/a&gt; for recommendations on how actions could be constructed.</source>
          <target state="translated">Aparte del &lt;code&gt;type&lt;/code&gt; , la estructura de un objeto de acci&amp;oacute;n depende realmente de usted. Si est&amp;aacute; interesado, consulte &lt;a href=&quot;https://github.com/acdlite/flux-standard-action&quot;&gt;Flux Standard Action&lt;/a&gt; para obtener recomendaciones sobre c&amp;oacute;mo se pueden construir las acciones.</target>
        </trans-unit>
        <trans-unit id="6536268ad716d89a65f56ced3b4cc69350c48fb9" translate="yes" xml:space="preserve">
          <source>Other than &lt;code&gt;type&lt;/code&gt;, the structure of an action object is really up to you. If you're interested, check out &lt;a href=&quot;https://github.com/acdlite/flux-standard-action&quot;&gt;Flux Standard Action&lt;/a&gt; for recommendations on how actions should be constructed.</source>
          <target state="translated">Aparte del &lt;code&gt;type&lt;/code&gt; , la estructura de un objeto de acci&amp;oacute;n depende realmente de usted. Si est&amp;aacute; interesado, consulte &lt;a href=&quot;https://github.com/acdlite/flux-standard-action&quot;&gt;Flux Standard Action&lt;/a&gt; para obtener recomendaciones sobre c&amp;oacute;mo se deben construir las acciones.</target>
        </trans-unit>
        <trans-unit id="d77d9e8f5844c5c74da60395774b58f7d3f5387d" translate="yes" xml:space="preserve">
          <source>Others, like &lt;a href=&quot;https://github.com/kolodny/immutability-helper&quot;&gt;immutability-helper&lt;/a&gt; (a fork of the now-deprecated React Immutability Helpers addon), use nested values and helper functions:</source>
          <target state="translated">Otros, como &lt;a href=&quot;https://github.com/kolodny/immutability-helper&quot;&gt;inmutability-helper&lt;/a&gt; (una bifurcaci&amp;oacute;n del complemento React Immutability Helpers ahora obsoleto), usan valores anidados y funciones auxiliares:</target>
        </trans-unit>
        <trans-unit id="dda0bb30409a978c6095e977bd09a407e7ec0ccd" translate="yes" xml:space="preserve">
          <source>Our app reducer is still aware of all the different cases for our application. Let's try splitting things up so that the filter logic and the todo logic are separated:</source>
          <target state="translated">Nuestro reductor de aplicaciones sigue siendo consciente de todos los diferentes casos de nuestra aplicación.Intentemos dividir las cosas para que la lógica del filtro y la lógica del todo estén separadas:</target>
        </trans-unit>
        <trans-unit id="57d76ff70a2b8d5f74ef5118abd52ad01b3bb657" translate="yes" xml:space="preserve">
          <source>Our design brief is simple. We want to show a list of todo items. On click, a todo item is crossed out as completed. We want to show a field where the user may add a new todo. In the footer, we want to show a toggle to show all, only completed, or only active todos.</source>
          <target state="translated">Nuestro diseño es simple.Queremos mostrar una lista de todos los artículos.Al hacer clic,un elemento de todo se tachará como completado.Queremos mostrar un campo donde el usuario pueda añadir un nuevo todo.En el pie de página,queremos mostrar un botón para mostrar todos,sólo completo,o sólo todos activos.</target>
        </trans-unit>
        <trans-unit id="53d2ee76615e0933562a889f329ff05a0a727e4c" translate="yes" xml:space="preserve">
          <source>Overall, Redux-ORM provides a very useful set of abstractions for defining relations between data types, creating the &quot;tables&quot; in our state, retrieving and denormalizing relational data, and applying immutable updates to relational data.</source>
          <target state="translated">En general,Redux-ORM proporciona un conjunto muy útil de abstracciones para definir las relaciones entre los tipos de datos,crear las &quot;tablas&quot; en nuestro estado,recuperar y desnaturalizar los datos relacionales y aplicar actualizaciones inmutables a los datos relacionales.</target>
        </trans-unit>
        <trans-unit id="31d482d1d287457cca90cae82978407bee745dc3" translate="yes" xml:space="preserve">
          <source>PDF: JavaScript Immutability - Don&amp;rsquo;t go changing</source>
          <target state="translated">PDF: Inmutabilidad de JavaScript - No vayas a cambiar</target>
        </trans-unit>
        <trans-unit id="a975eea30db9fa05003e3b5097688bd49ec7e01b" translate="yes" xml:space="preserve">
          <source>Parameters</source>
          <target state="translated">Parameters</target>
        </trans-unit>
        <trans-unit id="430ea9730cf326c3cf262aa3e00acbc94a6af33d" translate="yes" xml:space="preserve">
          <source>Passing the Store</source>
          <target state="translated">Pasando la tienda</target>
        </trans-unit>
        <trans-unit id="acae9ab8b8cf95f09e38c1fb61c7e7375972f22f" translate="yes" xml:space="preserve">
          <source>Patrons</source>
          <target state="translated">Patrons</target>
        </trans-unit>
        <trans-unit id="d9b870a4eca18252d7bd7d9da857129a2bd3ed18" translate="yes" xml:space="preserve">
          <source>Perform side effects like API calls and routing transitions;</source>
          <target state="translated">Realizar efectos secundarios como llamadas a la API y transiciones de enrutamiento;</target>
        </trans-unit>
        <trans-unit id="63c904559993935c470f516c8b549ca7f3640dbb" translate="yes" xml:space="preserve">
          <source>Performance</source>
          <target state="translated">Performance</target>
        </trans-unit>
        <trans-unit id="09c0613fe519089a7fc506820537146b438f0dc9" translate="yes" xml:space="preserve">
          <source>Pete Hunt, one of the early contributors to React, says:</source>
          <target state="translated">Pete Hunt,uno de los primeros colaboradores de React,dice:</target>
        </trans-unit>
        <trans-unit id="518776dd7f483eb0d4df7b1bd43c6cdb73104192" translate="yes" xml:space="preserve">
          <source>Poor Performance</source>
          <target state="translated">Malos resultados.</target>
        </trans-unit>
        <trans-unit id="9993816052f22041086b70cb5e1a32b14dfbb33d" translate="yes" xml:space="preserve">
          <source>Practical Redux, Part 6: Connected Lists, Forms, and Performance</source>
          <target state="translated">Practical Redux,Parte 6:Listas conectadas,formas y rendimiento</target>
        </trans-unit>
        <trans-unit id="738c6f9450a7465416076aa7cb2f7dbc8ca7bcb4" translate="yes" xml:space="preserve">
          <source>Preparing the Initial State</source>
          <target state="translated">Preparación del estado inicial</target>
        </trans-unit>
        <trans-unit id="02510af1c9e56dc9bd70dc87dc84e81b435ad642" translate="yes" xml:space="preserve">
          <source>Prerequisite Concepts</source>
          <target state="translated">Conceptos de pre-requisito</target>
        </trans-unit>
        <trans-unit id="69ac187c979012e887601c19566c66ee6ab15258" translate="yes" xml:space="preserve">
          <source>Prerequisite Concepts for Writing Reducers</source>
          <target state="translated">Conceptos previos para los reductores de escritura</target>
        </trans-unit>
        <trans-unit id="1c55cdda21f1ad5ea1b98437db0236145dd69099" translate="yes" xml:space="preserve">
          <source>Prerequisite Reducer Concepts</source>
          <target state="translated">Conceptos de reducción de requisitos previos</target>
        </trans-unit>
        <trans-unit id="b3ed0c728475ae7dfeea9ed4c1bc0af7c27941d6" translate="yes" xml:space="preserve">
          <source>Presentational Components</source>
          <target state="translated">Componentes de la presentación</target>
        </trans-unit>
        <trans-unit id="69e7885b45c24e48f26b3abc065d13744594de0a" translate="yes" xml:space="preserve">
          <source>Presentational and Container Components</source>
          <target state="translated">Componentes de presentación y contenedor</target>
        </trans-unit>
        <trans-unit id="f184d44b598b788adde29d493e92a5c25b0ed0b5" translate="yes" xml:space="preserve">
          <source>Prior Art</source>
          <target state="translated">El arte previo</target>
        </trans-unit>
        <trans-unit id="9cb3636454de25708139a72d5a8daebcbab292a1" translate="yes" xml:space="preserve">
          <source>Problem: Crash Reporting</source>
          <target state="translated">Problema:Reporte de Choque</target>
        </trans-unit>
        <trans-unit id="4367434447e2cee1f6e98eeb1e8d7bc393e9ff67" translate="yes" xml:space="preserve">
          <source>Problem: Logging</source>
          <target state="translated">Problema:Registro</target>
        </trans-unit>
        <trans-unit id="55ebe517b50c8c6c3d52435b9681b506cd9eed36" translate="yes" xml:space="preserve">
          <source>Processing Request Parameters</source>
          <target state="translated">Parámetros de la solicitud de procesamiento</target>
        </trans-unit>
        <trans-unit id="71d526269be49e8a2200a08466e2a7f151fbcce6" translate="yes" xml:space="preserve">
          <source>Pros and Cons of Using Immutability With React</source>
          <target state="translated">Ventajas y desventajas de usar la inmutabilidad con la reacción</target>
        </trans-unit>
        <trans-unit id="4be452a463fb3cf62c5a4a03fdd906246f9e80cd" translate="yes" xml:space="preserve">
          <source>Pros and Cons of Using Immutability with React</source>
          <target state="translated">Ventajas y desventajas del uso de la inmutabilidad con la reacción</target>
        </trans-unit>
        <trans-unit id="dc98b8947b98b64aa54d5357f558ae0935c47d87" translate="yes" xml:space="preserve">
          <source>Pros and Cons of using immutability with React.js</source>
          <target state="translated">Ventajas y desventajas de utilizar la inmutabilidad con React.js</target>
        </trans-unit>
        <trans-unit id="d6e73fb000c8b75a17c1069b0079cbf4bdde15b6" translate="yes" xml:space="preserve">
          <source>Pros and Cons of using immutability with React.js - React Kung Fu</source>
          <target state="translated">Pros y contras de usar la inmutabilidad con React.js-React Kung Fu</target>
        </trans-unit>
        <trans-unit id="21cf88ab38b25368d2f9cb3c579e6a17bc644483" translate="yes" xml:space="preserve">
          <source>Pure Functions and Side Effects</source>
          <target state="translated">Funciones puras y efectos secundarios</target>
        </trans-unit>
        <trans-unit id="86a07cd587b106a4018fbf8dbee2dbdcf791f1eb" translate="yes" xml:space="preserve">
          <source>Pure functionality and side effects in Redux</source>
          <target state="translated">Pura funcionalidad y efectos secundarios en Redux</target>
        </trans-unit>
        <trans-unit id="82a325d136b15dd1db828b5e748b6d37453db386" translate="yes" xml:space="preserve">
          <source>Pure functions</source>
          <target state="translated">Funciones puras</target>
        </trans-unit>
        <trans-unit id="a0fb821bdaf93ed9a1f1e920acfb2840eff5b153" translate="yes" xml:space="preserve">
          <source>Purpose</source>
          <target state="translated">Purpose</target>
        </trans-unit>
        <trans-unit id="ea644ff66049122da6969531a96ca0fe72184b08" translate="yes" xml:space="preserve">
          <source>Querying a Redux Store</source>
          <target state="translated">Consultar una tienda Redux</target>
        </trans-unit>
        <trans-unit id="55075a14cfbfc51a035aba7e61a80df40309acdd" translate="yes" xml:space="preserve">
          <source>Rails-style: separate folders for &amp;ldquo;actions&amp;rdquo;, &amp;ldquo;constants&amp;rdquo;, &amp;ldquo;reducers&amp;rdquo;, &amp;ldquo;containers&amp;rdquo;, and &amp;ldquo;components&amp;rdquo;</source>
          <target state="translated">Estilo rieles: carpetas separadas para &quot;acciones&quot;, &quot;constantes&quot;, &quot;reductores&quot;, &quot;contenedores&quot; y &quot;componentes&quot;</target>
        </trans-unit>
        <trans-unit id="45a38418ad120f3d535295f729a198b3b7c6c8d7" translate="yes" xml:space="preserve">
          <source>React Boilerplate #27: Application Structure</source>
          <target state="translated">Reacciona Boilerplate #27:Estructura de la aplicación</target>
        </trans-unit>
        <trans-unit id="efc78471488cf3d2e323b930c4ab2275310bd60b" translate="yes" xml:space="preserve">
          <source>React Forums: Redux and global state vs local state</source>
          <target state="translated">Foros de Reacción:Redux y estado global vs.estado local</target>
        </trans-unit>
        <trans-unit id="214641af7b84dcf096934eb2a695cb6d024aae3a" translate="yes" xml:space="preserve">
          <source>React Higher Order Components in depth</source>
          <target state="translated">Reaccionar a fondo los componentes de orden superior</target>
        </trans-unit>
        <trans-unit id="01d8e1cb3dcc43b6aac331fa4ddc4ac02aff9465" translate="yes" xml:space="preserve">
          <source>React How-To</source>
          <target state="translated">Reaccionar como...</target>
        </trans-unit>
        <trans-unit id="c00f59a0285f84558e8d0d48133c22e6b6f706e6" translate="yes" xml:space="preserve">
          <source>React Redux</source>
          <target state="translated">Reaccionar Redux</target>
        </trans-unit>
        <trans-unit id="e9ec3cce75743443bbba2142d270fc34d79b7599" translate="yes" xml:space="preserve">
          <source>React Redux #145: consider always passing down dispatch regardless of what mapDispatchToProps does</source>
          <target state="translated">Reacciona Redux #145:considera siempre pasar el despacho sin importar lo que haga el mapaDispatchToProps</target>
        </trans-unit>
        <trans-unit id="732e7a5dfabaa54435e980f9e805a54c93e2dd29" translate="yes" xml:space="preserve">
          <source>React Redux #235: Predicate function for updating component</source>
          <target state="translated">Reacciona Redux #235:Función de predicción para la actualización del componente</target>
        </trans-unit>
        <trans-unit id="01a98dba508a8efb62a16078cc6efb83597ba734" translate="yes" xml:space="preserve">
          <source>React Redux #255: this.props.dispatch is undefined if using mapDispatchToProps</source>
          <target state="translated">React Redux #255:este.despacho.de props no está definido si se usa el mapaDispatchToProps</target>
        </trans-unit>
        <trans-unit id="287e83661d0b0ace70aa4b2e7cbc6e6a0b50d186" translate="yes" xml:space="preserve">
          <source>React Redux #263: Huge performance issue when dispatching hundreds of actions</source>
          <target state="translated">React Redux #263:Enorme problema de rendimiento al despachar cientos de acciones</target>
        </trans-unit>
        <trans-unit id="2aea4e5f490054875b5d85d349369a3658b249ef" translate="yes" xml:space="preserve">
          <source>React Redux #269: Connect could be used with a custom subscribe method</source>
          <target state="translated">Reacciona Redux #269:Connect podría ser usado con un método de suscripción personalizado</target>
        </trans-unit>
        <trans-unit id="bbdb52200c9c3640fa284dd7801b308c292acc73" translate="yes" xml:space="preserve">
          <source>React Redux #291: Should mapStateToProps be called every time an action is dispatched?</source>
          <target state="translated">React Redux #291:¿Debería llamarse a mapStateToProps cada vez que se despacha una acción?</target>
        </trans-unit>
        <trans-unit id="ca17da9174a409f3ef37d08c9748a93925d108fc" translate="yes" xml:space="preserve">
          <source>React Redux #407: Rewrite connect to offer an advanced API</source>
          <target state="translated">React Redux #407:Reescribir conectar para ofrecer una API avanzada</target>
        </trans-unit>
        <trans-unit id="4e611799527e4e43143ed34634f793cd5a162cf1" translate="yes" xml:space="preserve">
          <source>React Redux #416: Rewrite connect for better performance and extensibility</source>
          <target state="translated">React Redux #416:Reescribir la conexión para un mejor rendimiento y extensibilidad</target>
        </trans-unit>
        <trans-unit id="3f31b465a1a05e3ab0e22b96c59d09ee25c33ef2" translate="yes" xml:space="preserve">
          <source>React Redux #89: can i wrap multi actionCreators into one props with name?</source>
          <target state="translated">React Redux #89:¿puedo envolver varios ActionCreators en un solo atrezzo con nombre?</target>
        </trans-unit>
        <trans-unit id="fa04ceff7eca5e570aecaefd3ee71f236ce6eb9f" translate="yes" xml:space="preserve">
          <source>React Redux API: connect()</source>
          <target state="translated">API de React Redux:connect()</target>
        </trans-unit>
        <trans-unit id="5fffe16c96023bbe3dd9abec1447678a45a147c0" translate="yes" xml:space="preserve">
          <source>React Redux implements several optimizations to ensure your actual component only re-renders when actually necessary. One of those is a shallow equality check on the combined props object generated by the &lt;code&gt;mapStateToProps&lt;/code&gt; and &lt;code&gt;mapDispatchToProps&lt;/code&gt; arguments passed to &lt;code&gt;connect&lt;/code&gt;. Unfortunately, shallow equality does not help in cases where new array or object instances are created each time &lt;code&gt;mapStateToProps&lt;/code&gt; is called. A typical example might be mapping over an array of IDs and returning the matching object references, such as:</source>
          <target state="translated">React Redux implementa varias optimizaciones para garantizar que su componente real solo se vuelva a renderizar cuando sea realmente necesario. Uno de ellos es una verificaci&amp;oacute;n de igualdad superficial en el objeto de accesorios combinado generado por los argumentos &lt;code&gt;mapStateToProps&lt;/code&gt; y &lt;code&gt;mapDispatchToProps&lt;/code&gt; pasados ​​para &lt;code&gt;connect&lt;/code&gt; . Desafortunadamente, la igualdad superficial no ayuda en los casos en que se crean nuevas instancias de matriz u objeto cada vez que se llama a &lt;code&gt;mapStateToProps&lt;/code&gt; . Un ejemplo t&amp;iacute;pico podr&amp;iacute;a ser mapear una matriz de ID y devolver las referencias de objetos coincidentes, como:</target>
        </trans-unit>
        <trans-unit id="4b3923afd4f9b76fbadb161e5309fe47c5935c89" translate="yes" xml:space="preserve">
          <source>React Redux: Troubleshooting</source>
          <target state="translated">React Redux:Solución de problemas</target>
        </trans-unit>
        <trans-unit id="7cf84f305d9b4ae3d2e5899504cef59f17174eb6" translate="yes" xml:space="preserve">
          <source>React Router comes with a &lt;a href=&quot;https://github.com/ReactTraining/react-router/blob/v3/docs/API.md#link&quot;&gt;&lt;code&gt;&amp;lt;Link /&amp;gt;&lt;/code&gt;&lt;/a&gt; component that lets you navigate around your application. In our example, we can wrap &lt;code&gt;&amp;lt;Link /&amp;gt;&lt;/code&gt; with a new container component &lt;code&gt;&amp;lt;FilterLink /&amp;gt;&lt;/code&gt; so as to dynamically change the URL. The &lt;code&gt;activeStyle={}&lt;/code&gt; property lets us apply a style on the active state.</source>
          <target state="translated">React Router viene con un componente &lt;a href=&quot;https://github.com/ReactTraining/react-router/blob/v3/docs/API.md#link&quot;&gt; &lt;code&gt;&amp;lt;Link /&amp;gt;&lt;/code&gt; &lt;/a&gt; que le permite navegar por su aplicaci&amp;oacute;n. En nuestro ejemplo, podemos envolver &lt;code&gt;&amp;lt;Link /&amp;gt;&lt;/code&gt; con un nuevo componente contenedor &lt;code&gt;&amp;lt;FilterLink /&amp;gt;&lt;/code&gt; para cambiar din&amp;aacute;micamente la URL. La &lt;code&gt;activeStyle={}&lt;/code&gt; nos permite aplicar un estilo en el estado activo.</target>
        </trans-unit>
        <trans-unit id="679ef62ec4985a413831aad6d5f132c1e1b0074f" translate="yes" xml:space="preserve">
          <source>React bindings for Redux embrace the idea of &lt;strong&gt;separating presentational and container components&lt;/strong&gt;. If you're not familiar with these terms, &lt;a href=&quot;https://medium.com/@dan_abramov/smart-and-dumb-components-7ca2f9a7c7d0&quot;&gt;read about them first&lt;/a&gt;, and then come back. They are important, so we'll wait!</source>
          <target state="translated">Los enlaces de React para Redux adoptan la idea de &lt;strong&gt;separar los componentes de presentaci&amp;oacute;n y de contenedor&lt;/strong&gt; . Si no est&amp;aacute; familiarizado con estos t&amp;eacute;rminos, &lt;a href=&quot;https://medium.com/@dan_abramov/smart-and-dumb-components-7ca2f9a7c7d0&quot;&gt;primero lea sobre ellos&lt;/a&gt; y luego vuelva. Son importantes, &amp;iexcl;as&amp;iacute; que esperaremos!</target>
        </trans-unit>
        <trans-unit id="cd703ea889752160be52204476a7e5217587c640" translate="yes" xml:space="preserve">
          <source>React-Redux Bindings</source>
          <target state="translated">Encuadernaciones React-Redux</target>
        </trans-unit>
        <trans-unit id="720534ae4ea5a2a18f4bb7bfe9ed16ef3bef02de" translate="yes" xml:space="preserve">
          <source>React-Redux performs a shallow equality check on on each &lt;em&gt;value&lt;/em&gt; within the props object, not on the props object itself.</source>
          <target state="translated">React-Redux realiza una verificaci&amp;oacute;n de igualdad superficial en cada &lt;em&gt;valor&lt;/em&gt; dentro del objeto props, no en el objeto props en s&amp;iacute;.</target>
        </trans-unit>
        <trans-unit id="9a3b307a7afe13dcc2d2b56d385f6e7fcdd89e12" translate="yes" xml:space="preserve">
          <source>React-Redux therefore maintains separate references to each &lt;em&gt;value&lt;/em&gt; in the returned props object.</source>
          <target state="translated">Por lo tanto, React-Redux mantiene referencias separadas a cada &lt;em&gt;valor&lt;/em&gt; en el objeto de props devuelto.</target>
        </trans-unit>
        <trans-unit id="a84961e51f0e9045534f55ef19c9b890ec0454dc" translate="yes" xml:space="preserve">
          <source>React-Redux uses shallow equality checking to determine whether the component it&amp;rsquo;s wrapping needs to be re-rendered.</source>
          <target state="translated">React-Redux usa una verificaci&amp;oacute;n de igualdad superficial para determinar si el componente que est&amp;aacute; envolviendo necesita ser re-renderizado.</target>
        </trans-unit>
        <trans-unit id="25f69fafc4d53ef37a01d27855717f1b910c32ee" translate="yes" xml:space="preserve">
          <source>React-Redux's &lt;code&gt;connect&lt;/code&gt; method generates components that &lt;a href=&quot;#how-react-redux-uses-shallow-checking&quot;&gt;shallowly check reference changes to the root state&lt;/a&gt;, and the return values from the &lt;code&gt;mapStateToProps&lt;/code&gt; function to see if the wrapped components actually need to re-render. Such &lt;a href=&quot;#redux-shallow-checking-requires-immutability&quot;&gt;shallow checking requires immutability&lt;/a&gt; to function correctly.</source>
          <target state="translated">El m&amp;eacute;todo de &lt;code&gt;connect&lt;/code&gt; React-Redux genera componentes que &lt;a href=&quot;#how-react-redux-uses-shallow-checking&quot;&gt;verifican superficialmente los cambios de referencia en el estado ra&amp;iacute;z&lt;/a&gt; y los valores de retorno de la funci&amp;oacute;n &lt;code&gt;mapStateToProps&lt;/code&gt; para ver si los componentes envueltos realmente necesitan volver a renderizarse. Esta &lt;a href=&quot;#redux-shallow-checking-requires-immutability&quot;&gt;comprobaci&amp;oacute;n superficial requiere inmutabilidad&lt;/a&gt; para funcionar correctamente.</target>
        </trans-unit>
        <trans-unit id="7f4f4a56fd030dcfc889dad10f3ba7abdeb9bf09" translate="yes" xml:space="preserve">
          <source>React.js Pure Render Performance Anti-Pattern</source>
          <target state="translated">React.js Pure Render Performance Anti-Pattern</target>
        </trans-unit>
        <trans-unit id="efcf558b2b7ed1ce931d4bbaf10d10e4a81b9190" translate="yes" xml:space="preserve">
          <source>React.js pure render performance anti-pattern</source>
          <target state="translated">React.js puro rendimiento de render anti-patrón</target>
        </trans-unit>
        <trans-unit id="a6c84930df2d0caae45068e630cc45ccf1245b86" translate="yes" xml:space="preserve">
          <source>React/Redux Links: &quot;Redux Side Effects&quot; category</source>
          <target state="translated">Enlaces React/Redux:Categoría &quot;Efectos secundarios del Redux&quot;.</target>
        </trans-unit>
        <trans-unit id="e7b97ce28bebc20ce4023d4d1544d8ca708ac055" translate="yes" xml:space="preserve">
          <source>React/Redux Links: Architecture - Project File Structure</source>
          <target state="translated">Enlaces React/Redux:Arquitectura-Estructura del archivo del proyecto</target>
        </trans-unit>
        <trans-unit id="799adc6d5d994e504c2c138e4ff53248644d5147" translate="yes" xml:space="preserve">
          <source>React/Redux Links: Architecture - Redux Architecture</source>
          <target state="translated">Enlaces React/Redux:Arquitectura-Arquitectura Redux</target>
        </trans-unit>
        <trans-unit id="f700891537e9332e39007ef543a0c7005ac696ee" translate="yes" xml:space="preserve">
          <source>React/Redux Links: Immutable Data</source>
          <target state="translated">Enlaces React/Redux:Datos inmutables</target>
        </trans-unit>
        <trans-unit id="fce00908db372392230a5dc59966f0556c9a96b3" translate="yes" xml:space="preserve">
          <source>React/Redux Links: Performance - Redux</source>
          <target state="translated">Enlaces React/Redux:Performance-Redux</target>
        </trans-unit>
        <trans-unit id="ea6624400dd0619a4028a0782161b341f95b9bf3" translate="yes" xml:space="preserve">
          <source>React/Redux Links: Performance - Redux Performance</source>
          <target state="translated">Enlaces React/Redux:Rendimiento-Rendimiento Redux</target>
        </trans-unit>
        <trans-unit id="11abaa387b4e1d4c6df486f331bca1593b96648d" translate="yes" xml:space="preserve">
          <source>React/Redux Links: React/Redux Performance</source>
          <target state="translated">Enlaces React/Redux:Reaccionar/Reducir el rendimiento</target>
        </trans-unit>
        <trans-unit id="86308254ca58c32a4b48e2e7a927c0057319908d" translate="yes" xml:space="preserve">
          <source>React: Higher-Order Components</source>
          <target state="translated">Reaccionar:Componentes de orden superior</target>
        </trans-unit>
        <trans-unit id="2d90bde2bec2c8fa094a1d2200ae82033494cad5" translate="yes" xml:space="preserve">
          <source>React: Optimizing Performance</source>
          <target state="translated">Reacciona:Optimizar el rendimiento</target>
        </trans-unit>
        <trans-unit id="7d9c1b09aeb1d155202a538eba6d9a3492931ad1" translate="yes" xml:space="preserve">
          <source>Read &lt;a href=&quot;asyncflow&quot;&gt;Async Flow&lt;/a&gt; to recap how async actions fit into the Redux flow.</source>
          <target state="translated">Lea &lt;a href=&quot;asyncflow&quot;&gt;Async Flow&lt;/a&gt; para recapitular c&amp;oacute;mo las acciones async encajan en el flujo de Redux.</target>
        </trans-unit>
        <trans-unit id="b607ca1ed943113b8bd40acd28ee479c753558db" translate="yes" xml:space="preserve">
          <source>Read data from props</source>
          <target state="translated">Leer los datos de los accesorios</target>
        </trans-unit>
        <trans-unit id="99172ffcab6825648dfba7e3fc262a9a5fbe7648" translate="yes" xml:space="preserve">
          <source>Read the &lt;a href=&quot;exampletodolist&quot;&gt;complete source code for this tutorial&lt;/a&gt; to better internalize the knowledge you have gained. Then, head straight to the &lt;a href=&quot;../advanced/index&quot;&gt;advanced tutorial&lt;/a&gt; to learn how to handle network requests and routing!</source>
          <target state="translated">Lea el &lt;a href=&quot;exampletodolist&quot;&gt;c&amp;oacute;digo fuente completo de este tutorial&lt;/a&gt; para internalizar mejor el conocimiento que ha adquirido. Luego, dir&amp;iacute;jase directamente al &lt;a href=&quot;../advanced/index&quot;&gt;tutorial avanzado&lt;/a&gt; para aprender c&amp;oacute;mo manejar las solicitudes de red y el enrutamiento.</target>
        </trans-unit>
        <trans-unit id="b21e1ed4d5217309315f564ff74b9eea1936e93c" translate="yes" xml:space="preserve">
          <source>Reading From the URL</source>
          <target state="translated">Leyendo desde el URL</target>
        </trans-unit>
        <trans-unit id="095c451a2e9ce2021d38bf795774b05403fc75f1" translate="yes" xml:space="preserve">
          <source>Real World</source>
          <target state="translated">El mundo real</target>
        </trans-unit>
        <trans-unit id="a49698c20a1d19a475a3edf8be8f8f8b30ec65ca" translate="yes" xml:space="preserve">
          <source>Recap</source>
          <target state="translated">Recap</target>
        </trans-unit>
        <trans-unit id="9fb1092f32d4fcbf9e061ffd718d4ec689c6c95e" translate="yes" xml:space="preserve">
          <source>Recipes</source>
          <target state="translated">Recipes</target>
        </trans-unit>
        <trans-unit id="42624a20e6e4c1562537410bf82ff591ce07f160" translate="yes" xml:space="preserve">
          <source>Recipes: Computed Derived Data</source>
          <target state="translated">Recetas:Datos derivados computarizados</target>
        </trans-unit>
        <trans-unit id="b6d39d52a5e86324ade1d44e7e08ce0b5387e017" translate="yes" xml:space="preserve">
          <source>Recipes: Computing Derived Data</source>
          <target state="translated">Recetas:Datos derivados de la computación</target>
        </trans-unit>
        <trans-unit id="5effb0f63ab3eb21c89f18e6368e7c1d5f17c3ac" translate="yes" xml:space="preserve">
          <source>Recipes: Immutable Update Patterns</source>
          <target state="translated">Recetas:Patrones de actualización inmutables</target>
        </trans-unit>
        <trans-unit id="cbeb9b0f5422b15a6d088c47aaf6e528d0350c4c" translate="yes" xml:space="preserve">
          <source>Recipes: Prerequisite Reducer Concepts</source>
          <target state="translated">Recetas:Conceptos de reducción de requisitos previos</target>
        </trans-unit>
        <trans-unit id="49a1f34779a5afe85e05cff662577501366300bb" translate="yes" xml:space="preserve">
          <source>Recipes: Reducing Boilerplate</source>
          <target state="translated">Recetas:Reducción de la plantilla</target>
        </trans-unit>
        <trans-unit id="8c1f469e59e4322a9cb07ef58ade84919608d01c" translate="yes" xml:space="preserve">
          <source>Recipes: Structuring Reducers</source>
          <target state="translated">Recetas:Estructurantes Reductores</target>
        </trans-unit>
        <trans-unit id="29196f40d836acaf77c762f6f7580bf65b85cab3" translate="yes" xml:space="preserve">
          <source>Recipes: Structuring Reducers - Immutable Update Patterns</source>
          <target state="translated">Recetas:Reductores Estructurales-Patrones de actualización inmutables</target>
        </trans-unit>
        <trans-unit id="cb76eaeb79f5b86547d0360e4948f5f88d59b72d" translate="yes" xml:space="preserve">
          <source>Recipes: Structuring Reducers - Normalizing State Shape</source>
          <target state="translated">Recetas:Estructurando los reductores-Normalizando la forma del estado</target>
        </trans-unit>
        <trans-unit id="e9e51b9812b2e58af4823344e551de6481db8b1b" translate="yes" xml:space="preserve">
          <source>Recipes: Structuring Reducers - Prerequisite Concepts</source>
          <target state="translated">Recetas:Estructurando los reductores-Conceptos de prerrequisito</target>
        </trans-unit>
        <trans-unit id="d8db7ccea3429c3219a46b29a7fb105658ffffce" translate="yes" xml:space="preserve">
          <source>Recipes: Structuring Reducers - Splitting Reducer Logic</source>
          <target state="translated">Recetas:Estructurando los reductores-Lógica de los reductores de división</target>
        </trans-unit>
        <trans-unit id="e29b3bc65e2933e5a918d6357b2967374e89998f" translate="yes" xml:space="preserve">
          <source>Recipes: Using the Object Spread Operator</source>
          <target state="translated">Recetas:Usando el operador de difusión de objetos</target>
        </trans-unit>
        <trans-unit id="3b66d7a1f117e84d49ce190a144bfa4013537819" translate="yes" xml:space="preserve">
          <source>Recipes: immutability, side effects and mutation</source>
          <target state="translated">Recetas:inmutabilidad,efectos secundarios y mutación</target>
        </trans-unit>
        <trans-unit id="f0284a396b98e7ed88f256c52e6515c77bb1b45d" translate="yes" xml:space="preserve">
          <source>Reddit: &quot;When should I put something into my Redux store?&quot;</source>
          <target state="translated">Reddit:&quot;¿Cuándo debo poner algo en mi tienda Redux?&quot;</target>
        </trans-unit>
        <trans-unit id="daca44adc4ef60f42583641246276d004e688c4b" translate="yes" xml:space="preserve">
          <source>Reddit: Help designing Redux state for a single page app</source>
          <target state="translated">Reddit:Ayuda para diseñar el estado Redux para una aplicación de una sola página</target>
        </trans-unit>
        <trans-unit id="afe887e317c898f703e24f7d827235e7f21d4918" translate="yes" xml:space="preserve">
          <source>Reddit: Help performing Async API calls with Redux-Promise Middleware.</source>
          <target state="translated">Reddit:Ayuda para realizar llamadas a la API de Async con el middleware de Redux-Promise.</target>
        </trans-unit>
        <trans-unit id="15ccb05f9d496bf9727d87cee8b1f71f8bdbfba0" translate="yes" xml:space="preserve">
          <source>Reddit: Large open source react/redux projects?</source>
          <target state="translated">Reddit:¿Grandes proyectos de código abierto reaccionan/reducen?</target>
        </trans-unit>
        <trans-unit id="31b5fcaedfa00391f0da82305fa9d9c465e145ba" translate="yes" xml:space="preserve">
          <source>Reddit: React/Redux for Ultra Large Scale apps</source>
          <target state="translated">Reddit:React/Redux para aplicaciones de ultra gran escala</target>
        </trans-unit>
        <trans-unit id="dc41eb745ff0afdeef230ca621cfd49d330d77d6" translate="yes" xml:space="preserve">
          <source>Reddit: Redux performance issues with a large state object?</source>
          <target state="translated">Reddit:¿Reducir los problemas de rendimiento con un objeto estatal grande?</target>
        </trans-unit>
        <trans-unit id="ad1dcdbc206f62d81049e1fbbc24d1b99f39b065" translate="yes" xml:space="preserve">
          <source>Reddit: What's the best place to keep initial state?</source>
          <target state="translated">Reddit:¿Cuál es el mejor lugar para mantener el estado inicial?</target>
        </trans-unit>
        <trans-unit id="216d6244581ce722d2b213f82dbff87a6148139c" translate="yes" xml:space="preserve">
          <source>Reddit: What's the best place to keep the initial state?</source>
          <target state="translated">Reddit:¿Cuál es el mejor lugar para mantener el estado inicial?</target>
        </trans-unit>
        <trans-unit id="6473c3e5bd0f3e386d368c764bc6cec02354577e" translate="yes" xml:space="preserve">
          <source>Reddit: Why Redux Needs Reducers To Be Pure Functions</source>
          <target state="translated">Reddit:Por qué Redux necesita que los reductores sean funciones puras</target>
        </trans-unit>
        <trans-unit id="05ce1169a192ae766ca0f1d7c50a759c7c51974e" translate="yes" xml:space="preserve">
          <source>Reddit: You don't need Redux if your app just fetches something on a single page</source>
          <target state="translated">Reddit:No necesitas Redux si tu aplicación sólo busca algo en una sola página.</target>
        </trans-unit>
        <trans-unit id="cffbc53fcadf1ea0dddef2d232230038efb6dd3c" translate="yes" xml:space="preserve">
          <source>Reddit: acemarke and cpsubrian comments on Dan Abramov: Redux is not an architecture or design pattern, it is just a library.</source>
          <target state="translated">Reddit:acemarke y cpsubrian comentan sobre Dan Abramov:Redux no es un patrón de arquitectura o diseño,es sólo una biblioteca.</target>
        </trans-unit>
        <trans-unit id="59ce6f6beebd57025f07ecd7d9c06fc4781ffca1" translate="yes" xml:space="preserve">
          <source>Reducer</source>
          <target state="translated">Reducer</target>
        </trans-unit>
        <trans-unit id="1b526057cc1ef5812f4ada08c7de94063561f436" translate="yes" xml:space="preserve">
          <source>Reducer Concepts and Techniques</source>
          <target state="translated">Conceptos y técnicas de reducción</target>
        </trans-unit>
        <trans-unit id="dda31a027bfa36f4ca8585837d08aaa1912d41bf" translate="yes" xml:space="preserve">
          <source>Reducers</source>
          <target state="translated">Reducers</target>
        </trans-unit>
        <trans-unit id="840f7767cb01214ba0a12025998a85422ab6e283" translate="yes" xml:space="preserve">
          <source>Reducers are just pure functions that take the previous state and an action, and return the next state. Remember to return new state objects, instead of mutating the previous state. You can start with a single reducer, and as your app grows, split it off into smaller reducers that manage specific parts of the state tree. Because reducers are just functions, you can control the order in which they are called, pass additional data, or even make reusable reducers for common tasks such as pagination.</source>
          <target state="translated">Los reductores son sólo funciones puras que toman el estado anterior y una acción,y devuelven el siguiente estado.Recuerda devolver los objetos del nuevo estado,en lugar de mutar el estado anterior.Puedes empezar con un único reductor y,a medida que tu aplicación crezca,dividirlo en reductores más pequeños que gestionen partes específicas del árbol de estados.Como los reductores son sólo funciones,puedes controlar el orden en el que se llaman,pasar datos adicionales o incluso hacer reductores reutilizables para tareas comunes como la paginación.</target>
        </trans-unit>
        <trans-unit id="96a29cc7551675123cb7f5294dd805e57df90ca1" translate="yes" xml:space="preserve">
          <source>Reducers are not unique to Redux&amp;mdash;they are a fundamental concept in functional programming. Even most non-functional languages, like JavaScript, have a built-in API for reducing. In JavaScript, it's &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/Reduce&quot;&gt;&lt;code&gt;Array.prototype.reduce()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">Los reductores no son exclusivos de Redux, son un concepto fundamental en la programaci&amp;oacute;n funcional. Incluso la mayor&amp;iacute;a de los lenguajes no funcionales, como JavaScript, tienen una API incorporada para reducir. En JavaScript, es &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/Reduce&quot;&gt; &lt;code&gt;Array.prototype.reduce()&lt;/code&gt; &lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="693d4ec3dd35d12c94a5cb25d408b2e71be3d5b1" translate="yes" xml:space="preserve">
          <source>Reducers are the most important concept in Redux.</source>
          <target state="translated">Los reductores son el concepto más importante en el Redux.</target>
        </trans-unit>
        <trans-unit id="493c42af719ab1cd4cc31be798bcf7e6648293eb" translate="yes" xml:space="preserve">
          <source>Reducing Boilerplate</source>
          <target state="translated">Reducción de la plantilla</target>
        </trans-unit>
        <trans-unit id="1a5dd83d686967dbee491e598c66e203e42c8bea" translate="yes" xml:space="preserve">
          <source>Redux</source>
          <target state="translated">Redux</target>
        </trans-unit>
        <trans-unit id="ec290bd2917cc3416af368d34f3c085a675f09e6" translate="yes" xml:space="preserve">
          <source>Redux Addons Catalog: Component State</source>
          <target state="translated">Catálogo de complementos Redux:Estado de los componentes</target>
        </trans-unit>
        <trans-unit id="8290cc030aab4b8babf95fab40608d602458690f" translate="yes" xml:space="preserve">
          <source>Redux Addons Catalog: DevTools - Component Update Monitoring</source>
          <target state="translated">Catálogo de complementos Redux:DevTools-Monitoreo de actualización de componentes</target>
        </trans-unit>
        <trans-unit id="f07485fcebaac4a393292df3922516fc30d4bbca" translate="yes" xml:space="preserve">
          <source>Redux Addons Catalog: Store - Change Subscriptions</source>
          <target state="translated">Catálogo de complementos Redux:Tienda-Cambiar suscripciones</target>
        </trans-unit>
        <trans-unit id="a577b901e78ea650452597a6b1059b8084d2ebcb" translate="yes" xml:space="preserve">
          <source>Redux Addons Catalog: Store Change Subscriptions</source>
          <target state="translated">Catálogo de complementos Redux:Suscripciones de cambio de tienda</target>
        </trans-unit>
        <trans-unit id="a6d683688573717dedb09bb8c524dd092308d6bd" translate="yes" xml:space="preserve">
          <source>Redux Addons Catalog: Use Cases - Authentication</source>
          <target state="translated">Catálogo de complementos Redux:Casos de Uso-Autenticación</target>
        </trans-unit>
        <trans-unit id="9344d1305fa4b38f64ad8cebd9635fa2921b0e1a" translate="yes" xml:space="preserve">
          <source>Redux Best Practices</source>
          <target state="translated">Las mejores prácticas de Redux</target>
        </trans-unit>
        <trans-unit id="bfac34990e02b9e66cd0d6829d754be59da6a26f" translate="yes" xml:space="preserve">
          <source>Redux Docs: &lt;code&gt;combineReducers&lt;/code&gt;</source>
          <target state="translated">Redux Docs: &lt;code&gt;combineReducers&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="114c170f090803b3e9b2bcc5c3a6e50beaeed134" translate="yes" xml:space="preserve">
          <source>Redux Docs: Implementing Undo History</source>
          <target state="translated">Redux Docs:Implementación de la historia de deshacer</target>
        </trans-unit>
        <trans-unit id="9e6cb1adf2efb90cb6a27ea6a72f98f7ab473f85" translate="yes" xml:space="preserve">
          <source>Redux Docs: Reducers</source>
          <target state="translated">Redux Docs:Reductores</target>
        </trans-unit>
        <trans-unit id="9d40a9cd844cea91b94b47ac94fa5330e9011c46" translate="yes" xml:space="preserve">
          <source>Redux Docs: Reducing Boilerplate</source>
          <target state="translated">Redux Docs:Reducción de la plantilla</target>
        </trans-unit>
        <trans-unit id="726708480591ce54144dc3645deedfceb6e02a27" translate="yes" xml:space="preserve">
          <source>Redux Docs: Using the Object Spread Operator</source>
          <target state="translated">Redux Docs:Usando el operador de difusión de objetos</target>
        </trans-unit>
        <trans-unit id="43b86674da50a6ae9dfb143b4ed6cba4221221fc" translate="yes" xml:space="preserve">
          <source>Redux Egghead Course Notes</source>
          <target state="translated">Notas del curso Redux Egghead</target>
        </trans-unit>
        <trans-unit id="4428f96db39ca62c1587ebeaa693e35a74b127e5" translate="yes" xml:space="preserve">
          <source>Redux FAQ</source>
          <target state="translated">FAQ de Redux</target>
        </trans-unit>
        <trans-unit id="d41715c0d155a118b9497d660d8d8ce21d26b4a2" translate="yes" xml:space="preserve">
          <source>Redux FAQ - How do I share state between two reducers? do I have to use &lt;code&gt;combineReducers&lt;/code&gt;?</source>
          <target state="translated">Preguntas frecuentes de Redux - &amp;iquest;C&amp;oacute;mo comparto el estado entre dos reductores? &amp;iquest;Tengo que usar &lt;code&gt;combineReducers&lt;/code&gt; ?</target>
        </trans-unit>
        <trans-unit id="c491bee4fced1d7081108b5ad804a138bbbbd52e" translate="yes" xml:space="preserve">
          <source>Redux FAQ: Actions</source>
          <target state="translated">FAQ de Redux:Acciones</target>
        </trans-unit>
        <trans-unit id="d4e401fc452061ae23c6d3ded639c0139571e70a" translate="yes" xml:space="preserve">
          <source>Redux FAQ: Code Structure</source>
          <target state="translated">FAQ de Redux:Código de estructura</target>
        </trans-unit>
        <trans-unit id="b9dd7213b027596f3629ad531290ad9920e77526" translate="yes" xml:space="preserve">
          <source>Redux FAQ: General</source>
          <target state="translated">Preguntas frecuentes de Redux:General</target>
        </trans-unit>
        <trans-unit id="0d53c1155526d25e48dcd19338cae9548715d564" translate="yes" xml:space="preserve">
          <source>Redux FAQ: Immutable Data</source>
          <target state="translated">FAQ de Redux:Datos inmutables</target>
        </trans-unit>
        <trans-unit id="af79a6a6e3a5246c79d316570a87b7cf700c435e" translate="yes" xml:space="preserve">
          <source>Redux FAQ: Miscellaneous</source>
          <target state="translated">FAQ de Redux:Miscelánea</target>
        </trans-unit>
        <trans-unit id="ac2ba19db266451829b5648e7675c23413cb2290" translate="yes" xml:space="preserve">
          <source>Redux FAQ: Organizing State</source>
          <target state="translated">Preguntas frecuentes de Redux:Estado organizador</target>
        </trans-unit>
        <trans-unit id="b775beb138a1c3fb7195b5b0df10ccb6b82fa87d" translate="yes" xml:space="preserve">
          <source>Redux FAQ: Performance</source>
          <target state="translated">FAQ de Redux:Rendimiento</target>
        </trans-unit>
        <trans-unit id="a5b614caad88c44f368607bba25481b521bd85c6" translate="yes" xml:space="preserve">
          <source>Redux FAQ: React Redux</source>
          <target state="translated">Preguntas frecuentes de Redux:Reaccionar Redux</target>
        </trans-unit>
        <trans-unit id="ef49df474a3cc851a7439d8e67a8e396e5ccf5d5" translate="yes" xml:space="preserve">
          <source>Redux FAQ: Reducers</source>
          <target state="translated">Preguntas frecuentes de Redux:Reductores</target>
        </trans-unit>
        <trans-unit id="24a41d53bd26e4da6f09186f3361b234ecd45560" translate="yes" xml:space="preserve">
          <source>Redux FAQ: Store Setup</source>
          <target state="translated">FAQ de Redux:Configuración de la tienda</target>
        </trans-unit>
        <trans-unit id="0102181826c0cb7d859681534988eee33484e834" translate="yes" xml:space="preserve">
          <source>Redux Patterns and Anti-Patterns</source>
          <target state="translated">Patrones de Redux y anti-patrones</target>
        </trans-unit>
        <trans-unit id="e73b59699c981c999e9ca3504f30fe27527addd7" translate="yes" xml:space="preserve">
          <source>Redux Reducer Basics</source>
          <target state="translated">Conceptos básicos del Reductor Redux</target>
        </trans-unit>
        <trans-unit id="56891cb67a23a2b058baaee611e9e76e2ced8ffb" translate="yes" xml:space="preserve">
          <source>Redux Reducer/Selector Asymmetry</source>
          <target state="translated">Asimetría del Reductor/Selector Redux</target>
        </trans-unit>
        <trans-unit id="d7f6bdcedeb4f02ba8baec4a6f623462b01e41d1" translate="yes" xml:space="preserve">
          <source>Redux Side-Effects and You</source>
          <target state="translated">Los efectos secundarios de Redux y tú</target>
        </trans-unit>
        <trans-unit id="ec9ae2589e9681b8d5b9a2330255a41898aa3398" translate="yes" xml:space="preserve">
          <source>Redux Tutorial</source>
          <target state="translated">Tutorial de Redux</target>
        </trans-unit>
        <trans-unit id="d6c0eff7c8b338ccc1a25decaa770c2ce1222c1c" translate="yes" xml:space="preserve">
          <source>Redux Without Profanity: Normalizr</source>
          <target state="translated">Redux sin blasfemia:Normalizr</target>
        </trans-unit>
        <trans-unit id="37f4f3e1befc5ff99eacec66375e5105a07bde1d" translate="yes" xml:space="preserve">
          <source>Redux architecture revolves around a &lt;strong&gt;strict unidirectional data flow&lt;/strong&gt;.</source>
          <target state="translated">La arquitectura de Redux gira en torno a un &lt;strong&gt;estricto flujo de datos unidireccional&lt;/strong&gt; .</target>
        </trans-unit>
        <trans-unit id="ca8fd39e0f583c4771e3b7ab47147f9b7250d1ac" translate="yes" xml:space="preserve">
          <source>Redux assumes that you never mutate the objects it gives to you in the reducer. &lt;strong&gt;Every single time, you must return the new state object.&lt;/strong&gt; Even if you don't use a library like &lt;a href=&quot;https://facebook.github.io/immutable-js/&quot;&gt;Immutable&lt;/a&gt;, you need to completely avoid mutation.</source>
          <target state="translated">Redux asume que nunca mutas los objetos que te da en el reductor. &lt;strong&gt;Cada vez, debe devolver el nuevo objeto de estado. &lt;/strong&gt;Incluso si no usa una biblioteca como &lt;a href=&quot;https://facebook.github.io/immutable-js/&quot;&gt;Immutable&lt;/a&gt; , debe evitar completamente la mutaci&amp;oacute;n.</target>
        </trans-unit>
        <trans-unit id="d9b13f4fc65014317fe6e4b9892befedf11af3bc" translate="yes" xml:space="preserve">
          <source>Redux can be described in three fundamental principles:</source>
          <target state="translated">El Redux puede describirse en tres principios fundamentales:</target>
        </trans-unit>
        <trans-unit id="325d0a3329fe90a45278bb0a0417bd084002d235" translate="yes" xml:space="preserve">
          <source>Redux can be used as a data store for any UI layer. The most common usage is with React and React Native, but there are bindings available for Angular, Angular 2, Vue, Mithril, and more. Redux simply provides a subscription mechanism which can be used by any other code. That said, it is most useful when combined with a declarative view implementation that can infer the UI updates from the state changes, such as React or one of the similar libraries available.</source>
          <target state="translated">Redux puede ser usado como un almacén de datos para cualquier capa de UI.El uso más común es con React and React Native,pero hay enlaces disponibles para Angular,Angular 2,Vue,Mithril,y más.Redux simplemente proporciona un mecanismo de suscripción que puede ser usado por cualquier otro código.Dicho esto,es más útil cuando se combina con una implementación de vista declarativa que puede inferir las actualizaciones de la interfaz de usuario a partir de los cambios de estado,como React o una de las bibliotecas similares disponibles.</target>
        </trans-unit>
        <trans-unit id="b52d3f31e7f26a9796dbdf1e3a68c3e4fb5e3992" translate="yes" xml:space="preserve">
          <source>Redux does not store a history of actions itself. However, the Redux DevTools do store actions so they can be replayed, but those are generally only enabled during development, and not used in production.</source>
          <target state="translated">El Redux no almacena una historia de acciones en sí mismo.Sin embargo,las DevTools de Redux almacenan acciones para que puedan ser reproducidas,pero generalmente sólo se habilitan durante el desarrollo,y no se usan en la producción.</target>
        </trans-unit>
        <trans-unit id="5dbbf7352cc48a4f94b3a8d8faa33290b580cd67" translate="yes" xml:space="preserve">
          <source>Redux encourages you to think about your application in terms of the data you need to manage. The data at any given point in time is the &quot;&lt;em&gt;state&lt;/em&gt;&quot; of your application, and the structure and organization of that state is typically referred to as its &quot;&lt;em&gt;shape&lt;/em&gt;&quot;. The shape of your state plays a major role in how you structure your reducer logic.</source>
          <target state="translated">Redux lo alienta a pensar en su aplicaci&amp;oacute;n en t&amp;eacute;rminos de los datos que necesita administrar. Los datos en cualquier momento dado son el &quot; &lt;em&gt;estado&lt;/em&gt; &quot; de su aplicaci&amp;oacute;n, y la estructura y organizaci&amp;oacute;n de ese estado generalmente se conoce como su &quot; &lt;em&gt;forma&lt;/em&gt; &quot;. La forma de su estado juega un papel importante en c&amp;oacute;mo estructura su l&amp;oacute;gica reductora.</target>
        </trans-unit>
        <trans-unit id="0516f1b49c0332831cef6d046aead301f5a49142" translate="yes" xml:space="preserve">
          <source>Redux evolves the ideas of &lt;a href=&quot;http://facebook.github.io/flux/&quot;&gt;Flux&lt;/a&gt;, but avoids its complexity by taking cues from &lt;a href=&quot;https://github.com/evancz/elm-architecture-tutorial/&quot;&gt;Elm&lt;/a&gt;.</source>
          <target state="translated">Redux desarrolla las ideas de &lt;a href=&quot;http://facebook.github.io/flux/&quot;&gt;Flux&lt;/a&gt; , pero evita su complejidad siguiendo las indicaciones de &lt;a href=&quot;https://github.com/evancz/elm-architecture-tutorial/&quot;&gt;Elm&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="e3d9d039526eff2bcbbc1e2bb2c6ef489f1116bd" translate="yes" xml:space="preserve">
          <source>Redux has a mixed heritage. It is similar to some patterns and technologies, but is also different from them in important ways. We'll explore some of the similarities and the differences below.</source>
          <target state="translated">Redux tiene una herencia mixta.Es similar a algunos patrones y tecnologías,pero también se diferencia de ellos en aspectos importantes.Exploraremos algunas de las similitudes y diferencias a continuación.</target>
        </trans-unit>
        <trans-unit id="08c2c8d16a217b7f149595bcdd911d990cf837d5" translate="yes" xml:space="preserve">
          <source>Redux is a predictable state container for JavaScript apps.</source>
          <target state="translated">Redux es un contenedor de estado predecible para aplicaciones JavaScript.</target>
        </trans-unit>
        <trans-unit id="1658730b992fc25b0e570963398f980bbbac8597" translate="yes" xml:space="preserve">
          <source>Redux is a tiny library, but its contracts and APIs are carefully chosen to spawn an ecosystem of tools and extensions.</source>
          <target state="translated">Redux es una biblioteca minúscula,pero sus contratos y APIs son cuidadosamente elegidos para generar un ecosistema de herramientas y extensiones.</target>
        </trans-unit>
        <trans-unit id="d0def49afc1d69e709f05c3918091a08540604e3" translate="yes" xml:space="preserve">
          <source>Redux is distributed with a few examples in its &lt;a href=&quot;https://github.com/reactjs/redux/tree/master/examples&quot;&gt;source code&lt;/a&gt;. Most of these examples are also on &lt;a href=&quot;https://codesandbox.io&quot;&gt;CodeSandbox&lt;/a&gt;, this is an online editor that lets you play with the examples online.</source>
          <target state="translated">Redux se distribuye con algunos ejemplos en su &lt;a href=&quot;https://github.com/reactjs/redux/tree/master/examples&quot;&gt;c&amp;oacute;digo fuente&lt;/a&gt; . La mayor&amp;iacute;a de estos ejemplos tambi&amp;eacute;n est&amp;aacute;n en &lt;a href=&quot;https://codesandbox.io&quot;&gt;CodeSandbox&lt;/a&gt; , este es un editor en l&amp;iacute;nea que le permite jugar con los ejemplos en l&amp;iacute;nea.</target>
        </trans-unit>
        <trans-unit id="2bc1ca81429d291e4da182d33067adbc2146a5ff" translate="yes" xml:space="preserve">
          <source>Redux is in part &lt;a href=&quot;../introduction/priorart&quot;&gt;inspired by Flux&lt;/a&gt;, and the most common complaint about Flux is how it makes you write a lot of boilerplate. In this recipe, we will consider how Redux lets us choose how verbose we'd like our code to be, depending on personal style, team preferences, longer term maintainability, and so on.</source>
          <target state="translated">Redux est&amp;aacute; &lt;a href=&quot;../introduction/priorart&quot;&gt;inspirado&lt;/a&gt; en parte por Flux , y la queja m&amp;aacute;s com&amp;uacute;n sobre Flux es c&amp;oacute;mo te hace escribir mucho texto repetitivo. En esta receta, consideraremos c&amp;oacute;mo Redux nos permite elegir qu&amp;eacute; tan detallado nos gustar&amp;iacute;a que fuera nuestro c&amp;oacute;digo, seg&amp;uacute;n el estilo personal, las preferencias del equipo, la capacidad de mantenimiento a largo plazo, etc.</target>
        </trans-unit>
        <trans-unit id="8ca9a51778106939cd3dfebf9551abdc4b16988e" translate="yes" xml:space="preserve">
          <source>Redux is inspired by functional programming, and out of the box, has no place for side effects to be executed. In particular, reducer functions &lt;em&gt;must&lt;/em&gt; always be pure functions of &lt;code&gt;(state, action) =&amp;gt; newState&lt;/code&gt;. However, Redux's middleware makes it possible to intercept dispatched actions and add additional complex behavior around them, including side effects.</source>
          <target state="translated">Redux est&amp;aacute; inspirado en la programaci&amp;oacute;n funcional, y listo para usar, no tiene lugar para que se ejecuten efectos secundarios. En particular, las funciones reductoras siempre &lt;em&gt;deben&lt;/em&gt; ser funciones puras de &lt;code&gt;(state, action) =&amp;gt; newState&lt;/code&gt; . Sin embargo, el middleware de Redux permite interceptar acciones enviadas y agregar comportamientos complejos adicionales a su alrededor, incluidos los efectos secundarios.</target>
        </trans-unit>
        <trans-unit id="2e51cf296aaae20f776d432b753a50cb2d012fba" translate="yes" xml:space="preserve">
          <source>Redux is not a monolithic framework, but a set of contracts and a &lt;a href=&quot;../api/index&quot;&gt;few functions that make them work together&lt;/a&gt;. The majority of your &amp;ldquo;Redux code&amp;rdquo; will not even use Redux APIs, as most of the time you'll be writing functions.</source>
          <target state="translated">Redux no es un marco monol&amp;iacute;tico, sino un conjunto de contratos y &lt;a href=&quot;../api/index&quot;&gt;algunas funciones que los hacen trabajar juntos&lt;/a&gt; . La mayor&amp;iacute;a de su &quot;c&amp;oacute;digo Redux&quot; ni siquiera utilizar&amp;aacute; las API de Redux, ya que la mayor parte del tiempo estar&amp;aacute; escribiendo funciones.</target>
        </trans-unit>
        <trans-unit id="5fa50b0cdd3b8374bae86ce4f34e3e66331618ca" translate="yes" xml:space="preserve">
          <source>Redux is originally written in ES6 and transpiled for production into ES5 with Webpack and Babel. You should be able to use it regardless of your JavaScript build process. Redux also offers a UMD build that can be used directly without any build process at all. The &lt;a href=&quot;https://github.com/reactjs/redux/tree/master/examples/counter-vanilla&quot;&gt;counter-vanilla&lt;/a&gt; example demonstrates basic ES5 usage with Redux included as a &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; tag. As the relevant pull request says:</source>
          <target state="translated">Redux est&amp;aacute; escrito originalmente en ES6 y transpilado para producci&amp;oacute;n en ES5 con Webpack y Babel. Deber&amp;iacute;a poder usarlo independientemente de su proceso de compilaci&amp;oacute;n de JavaScript. Redux tambi&amp;eacute;n ofrece una compilaci&amp;oacute;n UMD que se puede usar directamente sin ning&amp;uacute;n proceso de compilaci&amp;oacute;n. El ejemplo de &lt;a href=&quot;https://github.com/reactjs/redux/tree/master/examples/counter-vanilla&quot;&gt;Counter-Vanilla&lt;/a&gt; demuestra el uso b&amp;aacute;sico de ES5 con Redux incluido como una etiqueta &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; . Como dice la solicitud de extracci&amp;oacute;n relevante:</target>
        </trans-unit>
        <trans-unit id="34fee0109b88a277c57526193a6d212f3a10d90d" translate="yes" xml:space="preserve">
          <source>Redux itself is very simple.</source>
          <target state="translated">El Redux en sí mismo es muy simple.</target>
        </trans-unit>
        <trans-unit id="42dce762d39e68e2336c77e1bc865792d15451f7" translate="yes" xml:space="preserve">
          <source>Redux may not be as efficient out of the box when compared to other libraries. For maximum rendering performance in a React application, state should be stored in a normalized shape, many individual components should be connected to the store instead of just a few, and connected list components should pass item IDs to their connected child list items (allowing the list items to look up their own data by ID). This minimizes the overall amount of rendering to be done. Use of memoized selector functions is also an important performance consideration.</source>
          <target state="translated">Redux puede no ser tan eficiente fuera de la caja cuando se compara con otras bibliotecas.Para obtener el máximo rendimiento de renderizado en una aplicación React,el estado debe almacenarse de forma normalizada,muchos componentes individuales deben estar conectados al almacén en lugar de sólo unos pocos,y los componentes de la lista conectados deben pasar los ID de los elementos a sus elementos de la lista infantil conectados (permitiendo que los elementos de la lista busquen sus propios datos por ID).Esto minimiza la cantidad total de renderización a realizar.El uso de las funciones de selección de memoria también es una consideración importante para el rendimiento.</target>
        </trans-unit>
        <trans-unit id="3d50c81abd53c840945ee2fdbaa44b7467c60100" translate="yes" xml:space="preserve">
          <source>Redux middleware act like a linked list. Each middleware function can either call &lt;code&gt;next(action)&lt;/code&gt; to pass an action along to the next middleware in line, call &lt;code&gt;dispatch(action)&lt;/code&gt; to restart the processing at the beginning of the list, or do nothing at all to stop the action from being processed further.</source>
          <target state="translated">El middleware de Redux act&amp;uacute;a como una lista enlazada. Cada funci&amp;oacute;n de middleware puede llamar a &lt;code&gt;next(action)&lt;/code&gt; para pasar una acci&amp;oacute;n al siguiente middleware en l&amp;iacute;nea, llamar a &lt;code&gt;dispatch(action)&lt;/code&gt; para reiniciar el procesamiento al comienzo de la lista, o no hacer nada para detener el procesamiento de la acci&amp;oacute;n. m&amp;aacute;s lejos.</target>
        </trans-unit>
        <trans-unit id="66a12ac42dd9b817c0a1c7e67e3311842a1c46e9" translate="yes" xml:space="preserve">
          <source>Redux middleware solves different problems than Express or Koa middleware, but in a conceptually similar way. &lt;strong&gt;It provides a third-party extension point between dispatching an action, and the moment it reaches the reducer.&lt;/strong&gt; People use Redux middleware for logging, crash reporting, talking to an asynchronous API, routing, and more.</source>
          <target state="translated">El middleware Redux resuelve problemas diferentes al middleware Express o Koa, pero de una manera conceptualmente similar. &lt;strong&gt;Proporciona un punto de extensi&amp;oacute;n de terceros entre el env&amp;iacute;o de una acci&amp;oacute;n y el momento en que llega al reductor. &lt;/strong&gt;La gente usa el middleware de Redux para el registro, informes de fallas, hablar con una API asincr&amp;oacute;nica, enrutamiento y m&amp;aacute;s.</target>
        </trans-unit>
        <trans-unit id="63d4a8adb65aae837c51967b76d09fff2ff98328" translate="yes" xml:space="preserve">
          <source>Redux notifies subscribers after each successfully dispatched action (i.e. an action reached the store and was handled by reducers). In some cases, it may be useful to cut down on the number of times subscribers are called, particularly if an action creator dispatches multiple distinct actions in a row.</source>
          <target state="translated">Redux notifica a los suscriptores después de cada acción despachada con éxito (es decir,una acción llegó a la tienda y fue manejada por los reductores).En algunos casos,puede ser útil reducir el número de veces que se llama a los suscriptores,en particular si un creador de acciones despacha múltiples acciones distintas en una fila.</target>
        </trans-unit>
        <trans-unit id="5e36bd6fb2ddfb9b618b443d363e9df585734103" translate="yes" xml:space="preserve">
          <source>Redux on the Server</source>
          <target state="translated">Redux en el servidor</target>
        </trans-unit>
        <trans-unit id="321a21760687e7864fd03dec217ad326b52df5ef" translate="yes" xml:space="preserve">
          <source>Redux provides a single &lt;code&gt;store.subscribe&lt;/code&gt; method for notifying listeners that the store has updated. Listener callbacks do not receive the current state as an argument&amp;mdash;it is simply an indication that &lt;em&gt;something&lt;/em&gt; has changed. The subscriber logic can then call &lt;code&gt;getState()&lt;/code&gt; to get the current state value.</source>
          <target state="translated">Redux proporciona un &amp;uacute;nico m&amp;eacute;todo &lt;code&gt;store.subscribe&lt;/code&gt; para notificar a los oyentes que la tienda se ha actualizado. Las devoluciones de llamada de los oyentes no reciben el estado actual como un argumento, es simplemente una indicaci&amp;oacute;n de que &lt;em&gt;algo&lt;/em&gt; ha cambiado. La l&amp;oacute;gica del suscriptor puede llamar a &lt;code&gt;getState()&lt;/code&gt; para obtener el valor del estado actual.</target>
        </trans-unit>
        <trans-unit id="4319c52fd7a20695a4bdd02b2e2cc58d73b86bdf" translate="yes" xml:space="preserve">
          <source>Redux puts some basic constraints on how that write logic function should work. As described in &lt;a href=&quot;../basics/reducers&quot;&gt;Reducers&lt;/a&gt;, it has to have a signature of &lt;code&gt;(previousState, action) =&amp;gt; newState&lt;/code&gt;, is known as a &lt;strong&gt;&lt;em&gt;reducer function&lt;/em&gt;&lt;/strong&gt;, and must be &lt;em&gt;pure&lt;/em&gt; and predictable.</source>
          <target state="translated">Redux impone algunas restricciones b&amp;aacute;sicas sobre c&amp;oacute;mo deber&amp;iacute;a funcionar esa funci&amp;oacute;n l&amp;oacute;gica de escritura. Como se describe en &lt;a href=&quot;../basics/reducers&quot;&gt;Reductores&lt;/a&gt; , debe tener una firma de &lt;code&gt;(previousState, action) =&amp;gt; newState&lt;/code&gt; , se conoce como &lt;strong&gt;&lt;em&gt;funci&amp;oacute;n reductora&lt;/em&gt;&lt;/strong&gt; y debe ser &lt;em&gt;pura&lt;/em&gt; y predecible.</target>
        </trans-unit>
        <trans-unit id="59977664d77ebcee933d545dac412554294aeaf2" translate="yes" xml:space="preserve">
          <source>Redux reduces the boilerplate of Flux stores considerably by describing the update logic as a function. A function is simpler than an object, and much simpler than a class.</source>
          <target state="translated">Redux reduce considerablemente la plantilla de los almacenes de Flux describiendo la lógica de actualización como una función.Una función es más simple que un objeto,y mucho más simple que una clase.</target>
        </trans-unit>
        <trans-unit id="402da21959ad1b00c3d1ab6f8adf5613dbe09688" translate="yes" xml:space="preserve">
          <source>Redux uses shallow equality checking in its &lt;code&gt;combineReducers&lt;/code&gt; function to return either a new mutated copy of the root state object, or, if no mutations have been made, the current root state object.</source>
          <target state="translated">Redux usa una verificaci&amp;oacute;n de igualdad superficial en su funci&amp;oacute;n &lt;code&gt;combineReducers&lt;/code&gt; para devolver una nueva copia mutada del objeto de estado ra&amp;iacute;z o, si no se han realizado mutaciones, el objeto de estado ra&amp;iacute;z actual.</target>
        </trans-unit>
        <trans-unit id="fc4318e83cc01aa898dd245b381a161bc5966ecd" translate="yes" xml:space="preserve">
          <source>Redux vs MobX TodoMVC Benchmark: #1</source>
          <target state="translated">Redux vs MobX TodoMVC Referencia:#1</target>
        </trans-unit>
        <trans-unit id="6ad6e121085cd64eb499597e7144d3ad136b11ac" translate="yes" xml:space="preserve">
          <source>Redux was inspired by several important qualities of Flux. Like Flux, Redux prescribes that you concentrate your model update logic in a certain layer of your application (&amp;ldquo;stores&amp;rdquo; in Flux, &amp;ldquo;reducers&amp;rdquo; in Redux). Instead of letting the application code directly mutate the data, both tell you to describe every mutation as a plain object called an &amp;ldquo;action&amp;rdquo;.</source>
          <target state="translated">Redux se inspir&amp;oacute; en varias cualidades importantes de Flux. Al igual que Flux, Redux prescribe que concentre la l&amp;oacute;gica de actualizaci&amp;oacute;n de su modelo en una determinada capa de su aplicaci&amp;oacute;n (&quot;almacena&quot; en Flux, &quot;reductores&quot; en Redux). En lugar de permitir que el c&amp;oacute;digo de la aplicaci&amp;oacute;n mute directamente los datos, ambos le dicen que describa cada mutaci&amp;oacute;n como un objeto simple llamado &quot;acci&amp;oacute;n&quot;.</target>
        </trans-unit>
        <trans-unit id="fdbb1f1c5606597f48f095414e66742812988218" translate="yes" xml:space="preserve">
          <source>Redux's &lt;code&gt;combineReducers&lt;/code&gt; utility &lt;a href=&quot;#how-redux-uses-shallow-checking&quot;&gt;shallowly checks for reference changes&lt;/a&gt; caused by the reducers that it calls.</source>
          <target state="translated">La utilidad &lt;code&gt;combineReducers&lt;/code&gt; de Redux &lt;a href=&quot;#how-redux-uses-shallow-checking&quot;&gt;comprueba superficialmente los cambios de referencia&lt;/a&gt; causados ​​por los reductores a los que llama.</target>
        </trans-unit>
        <trans-unit id="88595cd44ffbc83a4871c93314b71b115c573390" translate="yes" xml:space="preserve">
          <source>Redux's &lt;strong&gt;&lt;em&gt;only&lt;/em&gt;&lt;/strong&gt; job on the server side is to provide the &lt;strong&gt;initial state&lt;/strong&gt; of our app.</source>
          <target state="translated">El &lt;strong&gt;&lt;em&gt;&amp;uacute;nico&lt;/em&gt;&lt;/strong&gt; trabajo de Redux en el lado del servidor es proporcionar el &lt;strong&gt;estado inicial&lt;/strong&gt; de nuestra aplicaci&amp;oacute;n.</target>
        </trans-unit>
        <trans-unit id="d7eb32f60e5c70f3bc2c26ceb6005796e8b88abe" translate="yes" xml:space="preserve">
          <source>Redux's use of shallow equality checking requires immutability if any connected components are to be updated correctly. To see why, we need to understand the difference between shallow and deep equality checking in JavaScript.</source>
          <target state="translated">El uso de Redux de la comprobación de igualdad superficial requiere inmutabilidad si se quiere actualizar correctamente cualquier componente conectado.Para ver por qué,necesitamos entender la diferencia entre la comprobación de igualdad superficial y profunda en JavaScript.</target>
        </trans-unit>
        <trans-unit id="143302841cb0d7dca0440bc31869328f76d81e32" translate="yes" xml:space="preserve">
          <source>Redux-ORM</source>
          <target state="translated">Redux-ORM</target>
        </trans-unit>
        <trans-unit id="7367376eab7e449568c0adff1f6f05f157d89179" translate="yes" xml:space="preserve">
          <source>Reduxible #8: Reducers and action creators aren't a one-to-one mapping</source>
          <target state="translated">Reduxible #8:Los reductores y los creadores de acción no son un mapeo individualizado</target>
        </trans-unit>
        <trans-unit id="1ccd2c30250c1777fda07e84c391cdb978d5d1e8" translate="yes" xml:space="preserve">
          <source>Refactoring Reducer Logic Using Functional Decomposition and Reducer Composition</source>
          <target state="translated">Refactorización de la lógica reductora usando la descomposición funcional y la composición reductora</target>
        </trans-unit>
        <trans-unit id="7b4c884acfadf4ccd7e8f7f80505e0cb44517215" translate="yes" xml:space="preserve">
          <source>Refactoring Reducers Example</source>
          <target state="translated">Ejemplo de Reductores de Refactorización</target>
        </trans-unit>
        <trans-unit id="e0710cd8e6f7d93aaa10c5bd0b7c50d5a6a0ac74" translate="yes" xml:space="preserve">
          <source>Referring to items by IDs</source>
          <target state="translated">Referirse a los artículos por medio de identificaciones</target>
        </trans-unit>
        <trans-unit id="35a045863630981b0a8f647ab7457dcd879ee624" translate="yes" xml:space="preserve">
          <source>Regardless of the specific data type, the shape of the undo history state is the same:</source>
          <target state="translated">Independientemente del tipo de datos específicos,la forma del estado de la historia de deshacer es la misma:</target>
        </trans-unit>
        <trans-unit id="c899eec73f6b556d4b90d92d6ad1d39154a4b74c" translate="yes" xml:space="preserve">
          <source>Registers listeners via &lt;a href=&quot;../api/store#subscribe&quot;&gt;&lt;code&gt;subscribe(listener)&lt;/code&gt;&lt;/a&gt;;</source>
          <target state="translated">Registra a los oyentes mediante &lt;a href=&quot;../api/store#subscribe&quot;&gt; &lt;code&gt;subscribe(listener)&lt;/code&gt; &lt;/a&gt; ;</target>
        </trans-unit>
        <trans-unit id="07072abd45ba7236bb3989cbd897b07eeac1c93b" translate="yes" xml:space="preserve">
          <source>Relationships and Tables</source>
          <target state="translated">Relaciones y tablas</target>
        </trans-unit>
        <trans-unit id="f9da905dbbbb2d63041deb7197b587a590301a7b" translate="yes" xml:space="preserve">
          <source>Remember how we &lt;a href=&quot;reducers&quot;&gt;designed the shape of the root state object&lt;/a&gt;? It's time we design the UI hierarchy to match it. This is not a Redux-specific task. &lt;a href=&quot;https://facebook.github.io/react/docs/thinking-in-react.html&quot;&gt;Thinking in React&lt;/a&gt; is a great tutorial that explains the process.</source>
          <target state="translated">&amp;iquest;Recuerda c&amp;oacute;mo dise&amp;ntilde;amos &lt;a href=&quot;reducers&quot;&gt;la forma del objeto de estado ra&amp;iacute;z&lt;/a&gt; ? Es hora de que dise&amp;ntilde;emos la jerarqu&amp;iacute;a de la interfaz de usuario para que coincida. Esta no es una tarea espec&amp;iacute;fica de Redux. &lt;a href=&quot;https://facebook.github.io/react/docs/thinking-in-react.html&quot;&gt;Thinking in React&lt;/a&gt; es un gran tutorial que explica el proceso.</target>
        </trans-unit>
        <trans-unit id="956f2f6dcc69fefbba147a07801daf0bec3cb1a6" translate="yes" xml:space="preserve">
          <source>Remember that reducers are just functions, so you can use functional composition and higher-order functions as much as you feel comfortable.</source>
          <target state="translated">Recuerda que los reductores son sólo funciones,así que puedes usar la composición funcional y las funciones de orden superior tanto como te sientas cómodo.</target>
        </trans-unit>
        <trans-unit id="186767200c580a2653e26a568dd78d79172ed4ba" translate="yes" xml:space="preserve">
          <source>Remember, to change an immutable object, you must mutate a &lt;em&gt;copy&lt;/em&gt; of it, and copying large objects can be slow as every property must be copied.</source>
          <target state="translated">Recuerde, para cambiar un objeto inmutable, debe mutar una &lt;em&gt;copia&lt;/em&gt; del mismo, y copiar objetos grandes puede ser lento ya que todas las propiedades deben copiarse.</target>
        </trans-unit>
        <trans-unit id="d14133871ccbb6d27982d438fb7486a531414b6e" translate="yes" xml:space="preserve">
          <source>Remove the &lt;em&gt;first&lt;/em&gt; element from the &lt;code&gt;future&lt;/code&gt;.</source>
          <target state="translated">Elimina el &lt;em&gt;primer&lt;/em&gt; elemento del &lt;code&gt;future&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="8db23b2ef380238e2a9332bbe7bb7805acafcd6f" translate="yes" xml:space="preserve">
          <source>Remove the &lt;em&gt;last&lt;/em&gt; element from the &lt;code&gt;past&lt;/code&gt;.</source>
          <target state="translated">Elimina el &lt;em&gt;&amp;uacute;ltimo&lt;/em&gt; elemento del &lt;code&gt;past&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="d6bae9950e29a13f58e366e00739630628accfbd" translate="yes" xml:space="preserve">
          <source>Replaces the reducer currently used by the store to calculate the state.</source>
          <target state="translated">Sustituye al reductor que actualmente utiliza la tienda para calcular el estado.</target>
        </trans-unit>
        <trans-unit id="e267d53c29587c8cde50b829af85bdaecdc01bb5" translate="yes" xml:space="preserve">
          <source>Reselect #47: Memoizing Hierarchical Selectors</source>
          <target state="translated">Reselección #47:Memorización de los selectores jerárquicos</target>
        </trans-unit>
        <trans-unit id="d0e0bcc2864b7d77b721a68ce1600fd8bd2214df" translate="yes" xml:space="preserve">
          <source>Reselect Documentation: How do I use Reselect with Immutable.js?</source>
          <target state="translated">Reseleccione la documentación:¿Cómo utilizo Reselect con Immutable.js?</target>
        </trans-unit>
        <trans-unit id="c338cf732b237c24b1f0506400e28357d0f15bd3" translate="yes" xml:space="preserve">
          <source>Reselect provides a function &lt;code&gt;createSelector&lt;/code&gt; for creating memoized selectors. &lt;code&gt;createSelector&lt;/code&gt; takes an array of input-selectors and a transform function as its arguments. If the Redux state tree is mutated in a way that causes the value of an input-selector to change, the selector will call its transform function with the values of the input-selectors as arguments and return the result. If the values of the input-selectors are the same as the previous call to the selector, it will return the previously computed value instead of calling the transform function.</source>
          <target state="translated">Reselect proporciona una funci&amp;oacute;n &lt;code&gt;createSelector&lt;/code&gt; para crear selectores memorizados. &lt;code&gt;createSelector&lt;/code&gt; toma una matriz de selectores de entrada y una funci&amp;oacute;n de transformaci&amp;oacute;n como argumentos. Si el &amp;aacute;rbol de estado de Redux est&amp;aacute; mutado de una manera que hace que cambie el valor de un selector de entrada, el selector llamar&amp;aacute; a su funci&amp;oacute;n de transformaci&amp;oacute;n con los valores de los selectores de entrada como argumentos y devolver&amp;aacute; el resultado. Si los valores de los selectores de entrada son los mismos que los de la llamada anterior al selector, devolver&amp;aacute; el valor calculado previamente en lugar de llamar a la funci&amp;oacute;n de transformaci&amp;oacute;n.</target>
        </trans-unit>
        <trans-unit id="9c51b3f2e5f8258e6431cab2fcee20d079a2248f" translate="yes" xml:space="preserve">
          <source>Reselect: Selector library for Redux</source>
          <target state="translated">Reelegir:Biblioteca de selección para Redux</target>
        </trans-unit>
        <trans-unit id="9582a02f141fc4b345b2936eba691cd0654efebc" translate="yes" xml:space="preserve">
          <source>Returns</source>
          <target state="translated">Returns</target>
        </trans-unit>
        <trans-unit id="9845b29c661b5f09755c1a2c1a4a6d8ac8f795eb" translate="yes" xml:space="preserve">
          <source>Returns the current state tree of your application.</source>
          <target state="translated">Devuelve el árbol de estado actual de su aplicación.</target>
        </trans-unit>
        <trans-unit id="c935f384c6e4b3d5772f231b8837bf4689621ec3" translate="yes" xml:space="preserve">
          <source>Returns the current state tree of your application. It is equal to the last value returned by the store's reducer.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="be483740a1e90670b770a1abe4ce081d261c0d0a" translate="yes" xml:space="preserve">
          <source>Returns&lt;a href=&quot;#returns-2&quot;&gt;#&lt;/a&gt;</source>
          <target state="translated">Returns&lt;a href=&quot;#returns-2&quot;&gt;#&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="b78505f9e7ca9beb942dcc8131c9189c9eeb998a" translate="yes" xml:space="preserve">
          <source>Reusing Reducer Logic</source>
          <target state="translated">Reutilización de la lógica reductora</target>
        </trans-unit>
        <trans-unit id="0966cd2fd5d2cb35f03ce6b1bce5d1e7251e6744" translate="yes" xml:space="preserve">
          <source>Rich API</source>
          <target state="translated">API rico</target>
        </trans-unit>
        <trans-unit id="a245bc64c38d63184404dacd3bd9f275e513df5f" translate="yes" xml:space="preserve">
          <source>Right now we are not passing anything to &lt;code&gt;&amp;lt;App /&amp;gt;&lt;/code&gt; so &lt;code&gt;ownProps&lt;/code&gt; is an empty object. To filter our todos according to the URL, we want to pass the URL params to &lt;code&gt;&amp;lt;VisibleTodoList /&amp;gt;&lt;/code&gt;.</source>
          <target state="translated">En este momento no estamos pasando nada a &lt;code&gt;&amp;lt;App /&amp;gt;&lt;/code&gt; por lo que &lt;code&gt;ownProps&lt;/code&gt; es un objeto vac&amp;iacute;o. Para filtrar nuestros todos seg&amp;uacute;n la URL, queremos pasar los par&amp;aacute;metros de la URL a &lt;code&gt;&amp;lt;VisibleTodoList /&amp;gt;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="7d15dd1bec2e055c5b177c9f869305ae6c54c9bb" translate="yes" xml:space="preserve">
          <source>Routing</source>
          <target state="translated">Routing</target>
        </trans-unit>
        <trans-unit id="c9f8b56b323ff1d67c59f2e6a12b4f9fd24bb536" translate="yes" xml:space="preserve">
          <source>Rules For Structuring (Redux) Applications</source>
          <target state="translated">Normas para la estructuración de las solicitudes (Redux)</target>
        </trans-unit>
        <trans-unit id="432cd1e0e18bce42cdef21bc0e2bf47d9952aaae" translate="yes" xml:space="preserve">
          <source>Run the &lt;a href=&quot;https://github.com/reactjs/redux/tree/master/examples/async&quot;&gt;Async&lt;/a&gt; example:</source>
          <target state="translated">Ejecute el ejemplo de &lt;a href=&quot;https://github.com/reactjs/redux/tree/master/examples/async&quot;&gt;Async&lt;/a&gt; :</target>
        </trans-unit>
        <trans-unit id="c8f9990ca1ff84f660e4614ac28b5a1202d83be9" translate="yes" xml:space="preserve">
          <source>Run the &lt;a href=&quot;https://github.com/reactjs/redux/tree/master/examples/counter&quot;&gt;Counter&lt;/a&gt; example:</source>
          <target state="translated">Ejecute el ejemplo del &lt;a href=&quot;https://github.com/reactjs/redux/tree/master/examples/counter&quot;&gt;contador&lt;/a&gt; :</target>
        </trans-unit>
        <trans-unit id="02bc6e8d90233a64557847335ed8fd0a2138380c" translate="yes" xml:space="preserve">
          <source>Run the &lt;a href=&quot;https://github.com/reactjs/redux/tree/master/examples/counter-vanilla&quot;&gt;Counter Vanilla&lt;/a&gt; example:</source>
          <target state="translated">Ejecute el ejemplo de &lt;a href=&quot;https://github.com/reactjs/redux/tree/master/examples/counter-vanilla&quot;&gt;Counter Vanilla&lt;/a&gt; :</target>
        </trans-unit>
        <trans-unit id="ff2baf0af3858008f9b05583c2312fb090bd1e5d" translate="yes" xml:space="preserve">
          <source>Run the &lt;a href=&quot;https://github.com/reactjs/redux/tree/master/examples/real-world&quot;&gt;Real World&lt;/a&gt; example:</source>
          <target state="translated">Ejecute el ejemplo del &lt;a href=&quot;https://github.com/reactjs/redux/tree/master/examples/real-world&quot;&gt;mundo real&lt;/a&gt; :</target>
        </trans-unit>
        <trans-unit id="a0e8812bdf4fabf867445d42be0aa6d8b7c05486" translate="yes" xml:space="preserve">
          <source>Run the &lt;a href=&quot;https://github.com/reactjs/redux/tree/master/examples/shopping-cart&quot;&gt;Shopping Cart&lt;/a&gt; example:</source>
          <target state="translated">Ejecute el ejemplo del &lt;a href=&quot;https://github.com/reactjs/redux/tree/master/examples/shopping-cart&quot;&gt;carrito de&lt;/a&gt; la compra :</target>
        </trans-unit>
        <trans-unit id="d299f4e9292980bd1533a8b98ddf4a548b317e3d" translate="yes" xml:space="preserve">
          <source>Run the &lt;a href=&quot;https://github.com/reactjs/redux/tree/master/examples/todomvc&quot;&gt;TodoMVC&lt;/a&gt; example:</source>
          <target state="translated">Ejecute el ejemplo de &lt;a href=&quot;https://github.com/reactjs/redux/tree/master/examples/todomvc&quot;&gt;TodoMVC&lt;/a&gt; :</target>
        </trans-unit>
        <trans-unit id="0a20317121271e18a234a5efdad9fa25e4ae9ccb" translate="yes" xml:space="preserve">
          <source>Run the &lt;a href=&quot;https://github.com/reactjs/redux/tree/master/examples/todos&quot;&gt;Todos&lt;/a&gt; example:</source>
          <target state="translated">Ejecute el ejemplo de &lt;a href=&quot;https://github.com/reactjs/redux/tree/master/examples/todos&quot;&gt;Todos&lt;/a&gt; :</target>
        </trans-unit>
        <trans-unit id="abfea29e9c7baf9015d33caddf86571e5480eee7" translate="yes" xml:space="preserve">
          <source>Run the &lt;a href=&quot;https://github.com/reactjs/redux/tree/master/examples/todos-with-undo&quot;&gt;Todos with Undo&lt;/a&gt; example:</source>
          <target state="translated">Ejecute el ejemplo de &lt;a href=&quot;https://github.com/reactjs/redux/tree/master/examples/todos-with-undo&quot;&gt;Todos con Deshacer&lt;/a&gt; :</target>
        </trans-unit>
        <trans-unit id="3419ab9b88258855aae8167ab6392ff99bc35318" translate="yes" xml:space="preserve">
          <source>Run the &lt;a href=&quot;https://github.com/reactjs/redux/tree/master/examples/tree-view&quot;&gt;Tree View&lt;/a&gt; example:</source>
          <target state="translated">Ejecute el ejemplo de &lt;a href=&quot;https://github.com/reactjs/redux/tree/master/examples/tree-view&quot;&gt;vista de &amp;aacute;rbol&lt;/a&gt; :</target>
        </trans-unit>
        <trans-unit id="eaf774d91e164852adb76afadeea254ddd1b6e1d" translate="yes" xml:space="preserve">
          <source>Run the &lt;a href=&quot;https://github.com/reactjs/redux/tree/master/examples/universal&quot;&gt;Universal&lt;/a&gt; example:</source>
          <target state="translated">Ejecute el ejemplo &lt;a href=&quot;https://github.com/reactjs/redux/tree/master/examples/universal&quot;&gt;universal&lt;/a&gt; :</target>
        </trans-unit>
        <trans-unit id="297ff09ad1fee6372badff1acb02a01184e1b455" translate="yes" xml:space="preserve">
          <source>RxJS</source>
          <target state="translated">RxJS</target>
        </trans-unit>
        <trans-unit id="f5c8e7496f807cd64744816fba01dc672fea8b3c" translate="yes" xml:space="preserve">
          <source>Sandrino Di Mattia</source>
          <target state="translated">Sandrino Di Mattia</target>
        </trans-unit>
        <trans-unit id="06c1e2b042f09a95936f43d636e7a9cfe06fa2c4" translate="yes" xml:space="preserve">
          <source>Say, you call this when creating a todo:</source>
          <target state="translated">Digamos que a esto se le llama cuando se crea un todo:</target>
        </trans-unit>
        <trans-unit id="e86aae6b5aebceaa76af1cce53d3199d645e9dcb" translate="yes" xml:space="preserve">
          <source>Screencasts</source>
          <target state="translated">Screencasts</target>
        </trans-unit>
        <trans-unit id="abf418e07a2bb8523e609c6622f0ee30e20593e9" translate="yes" xml:space="preserve">
          <source>Second Attempt: Writing a Reducer Enhancer</source>
          <target state="translated">Segundo intento:Escribir un reductor potenciador</target>
        </trans-unit>
        <trans-unit id="325c723ca2b67b9b7f5ba09ec5687e02ae1b0279" translate="yes" xml:space="preserve">
          <source>Secure Your React and Redux App with JWT Authentication</source>
          <target state="translated">Asegure su aplicación React y Redux con autenticación JWT</target>
        </trans-unit>
        <trans-unit id="402cc3b6686cd294cb10dd3f5bccbebd0edd8a9b" translate="yes" xml:space="preserve">
          <source>Security Considerations</source>
          <target state="translated">Consideraciones de seguridad</target>
        </trans-unit>
        <trans-unit id="919870200d649a13066b3447ce0f0c25022cc8f6" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;api/applymiddleware&quot;&gt;&lt;code&gt;applyMiddleware(...middlewares)&lt;/code&gt;&lt;/a&gt; for a detailed look at middleware.</source>
          <target state="translated">Consulte &lt;a href=&quot;api/applymiddleware&quot;&gt; &lt;code&gt;applyMiddleware(...middlewares)&lt;/code&gt; &lt;/a&gt; para obtener una descripci&amp;oacute;n detallada del middleware.</target>
        </trans-unit>
        <trans-unit id="94f2d6b880adb72fb73adf9d3a1c8276271ee55a" translate="yes" xml:space="preserve">
          <source>See also &lt;a href=&quot;#async-action&quot;&gt;async action&lt;/a&gt; below.</source>
          <target state="translated">Consulte tambi&amp;eacute;n la &lt;a href=&quot;#async-action&quot;&gt;acci&amp;oacute;n asincr&amp;oacute;nica a&lt;/a&gt; continuaci&amp;oacute;n.</target>
        </trans-unit>
        <trans-unit id="22ce2ecd3395a41aaf7f8cf591c10dd2e971bbd0" translate="yes" xml:space="preserve">
          <source>See the complete &lt;a href=&quot;api/store#dispatch&quot;&gt;store API reference&lt;/a&gt; for more details.</source>
          <target state="translated">Consulte la &lt;a href=&quot;api/store#dispatch&quot;&gt;referencia&lt;/a&gt; completa de la API de la tienda para obtener m&amp;aacute;s detalles.</target>
        </trans-unit>
        <trans-unit id="1664d8a03fa57f4c8be0067b9d13327134f1e58a" translate="yes" xml:space="preserve">
          <source>Separating Data Handling by Domain</source>
          <target state="translated">Separación del manejo de datos por dominio</target>
        </trans-unit>
        <trans-unit id="4ff6540c25bde7085cf0d2d1e9575cb74d3e0915" translate="yes" xml:space="preserve">
          <source>Server Rendering</source>
          <target state="translated">Renderización del servidor</target>
        </trans-unit>
        <trans-unit id="25c47193088be9016d58e256803985285406a208" translate="yes" xml:space="preserve">
          <source>Set the &lt;code&gt;present&lt;/code&gt; to the element we removed in the previous step.</source>
          <target state="translated">Establezca el &lt;code&gt;present&lt;/code&gt; e en el elemento que eliminamos en el paso anterior.</target>
        </trans-unit>
        <trans-unit id="d0b36286cd9781f93bd06e4cc2ba9bd4a1ae46eb" translate="yes" xml:space="preserve">
          <source>Set the &lt;code&gt;present&lt;/code&gt; to the new state after handling the action.</source>
          <target state="translated">Establezca el &lt;code&gt;present&lt;/code&gt; e en el nuevo estado despu&amp;eacute;s de manejar la acci&amp;oacute;n.</target>
        </trans-unit>
        <trans-unit id="d60b0890a431be3750d67b0f7fe70b5f3af16d7e" translate="yes" xml:space="preserve">
          <source>Setting Up</source>
          <target state="translated">Estableciendo...</target>
        </trans-unit>
        <trans-unit id="6ef3f0bd0914407afe72f32d7220011189833964" translate="yes" xml:space="preserve">
          <source>Seven Examples</source>
          <target state="translated">Siete ejemplos</target>
        </trans-unit>
        <trans-unit id="bceef6abe99285193523d99d3503c8cbe59abd17" translate="yes" xml:space="preserve">
          <source>Shallow equality checking (or &lt;em&gt;reference equality&lt;/em&gt;) simply checks that two different &lt;em&gt;variables&lt;/em&gt; reference the same object; in contrast, deep equality checking (or &lt;em&gt;value equality&lt;/em&gt;) must check every &lt;em&gt;value&lt;/em&gt; of two objects' properties.</source>
          <target state="translated">La verificaci&amp;oacute;n de igualdad superficial (o &lt;em&gt;igualdad de referencia&lt;/em&gt; ) simplemente verifica que dos &lt;em&gt;variables&lt;/em&gt; diferentes &lt;em&gt;hagan&lt;/em&gt; referencia al mismo objeto; por el contrario, la verificaci&amp;oacute;n profunda de igualdad (o &lt;em&gt;igualdad de valor&lt;/em&gt; ) debe verificar cada &lt;em&gt;valor&lt;/em&gt; de las propiedades de dos objetos.</target>
        </trans-unit>
        <trans-unit id="c1af20867da7a30bee30fa39bc87d4d6bf5086c5" translate="yes" xml:space="preserve">
          <source>Shallow equality checking cannot be used to detect if a function mutates an object passed into it if that object is mutable.</source>
          <target state="translated">La comprobación de igualdad superficial no puede utilizarse para detectar si una función muta un objeto pasado a ella si ese objeto es mutable.</target>
        </trans-unit>
        <trans-unit id="9a3368201d828a558753e74bfb641b78ef4ebe17" translate="yes" xml:space="preserve">
          <source>Shallow equality checking with a mutable object will not cause problems with Redux, but &lt;a href=&quot;#shallow-checking-problems-with-react-redux&quot;&gt;it will cause problems with libraries that depend on the store, such as React-Redux&lt;/a&gt;.</source>
          <target state="translated">La verificaci&amp;oacute;n de igualdad superficial con un objeto mutable no causar&amp;aacute; problemas con Redux, pero &lt;a href=&quot;#shallow-checking-problems-with-react-redux&quot;&gt;s&amp;iacute; causar&amp;aacute; problemas con las bibliotecas que dependen de la tienda, como React-Redux&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="54774f0c2c7e8f191039f8359b7b19ab53fad9f2" translate="yes" xml:space="preserve">
          <source>Sharing Selectors Across Multiple Components</source>
          <target state="translated">Compartir selectores a través de múltiples componentes</target>
        </trans-unit>
        <trans-unit id="192f8cbb6f5871d94ba5fb03d97db29c7de825cd" translate="yes" xml:space="preserve">
          <source>Sharing State Between Redux Reducers</source>
          <target state="translated">Estado de reparto entre los reductores Redux</target>
        </trans-unit>
        <trans-unit id="b89a118c798fa4a35e3c16cccb58dae4801140ac" translate="yes" xml:space="preserve">
          <source>Sharing data between slice reducers</source>
          <target state="translated">Compartir datos entre los reductores de rodajas</target>
        </trans-unit>
        <trans-unit id="90d67309aeeeaf7718677d90e2400596d8e164bd" translate="yes" xml:space="preserve">
          <source>Shopping Cart</source>
          <target state="translated">Carro de la compra</target>
        </trans-unit>
        <trans-unit id="36fe368c9da0c4844911eb85a837f68dcae6c653" translate="yes" xml:space="preserve">
          <source>Should I dispatch multiple actions in a row from one action creator?</source>
          <target state="translated">¿Debo despachar varias acciones seguidas de un creador de acciones?</target>
        </trans-unit>
        <trans-unit id="e5b09d329a9d354e9f3fa021df3644b2917c4096" translate="yes" xml:space="preserve">
          <source>Should I only connect my top component, or can I connect multiple components in my tree?</source>
          <target state="translated">¿Debo conectar sólo mi componente superior,o puedo conectar varios componentes en mi árbol?</target>
        </trans-unit>
        <trans-unit id="1737c8bf68fcf64ccfaf2774ab797e55426baaa7" translate="yes" xml:space="preserve">
          <source>Should be &quot;pure&quot;, which means the reducer:</source>
          <target state="translated">Debería ser &quot;puro&quot;,lo que significa el reductor:</target>
        </trans-unit>
        <trans-unit id="e9fdc92b96e07741038b0992e2225ba1bf7f6560" translate="yes" xml:space="preserve">
          <source>Should have a signature of &lt;code&gt;(previousState, action) =&amp;gt; newState&lt;/code&gt;, similar to the type of function you would pass to &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/Reduce&quot;&gt;&lt;code&gt;Array.prototype.reduce(reducer, ?initialValue)&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">Debe tener una firma de &lt;code&gt;(previousState, action) =&amp;gt; newState&lt;/code&gt; , similar al tipo de funci&amp;oacute;n que pasar&amp;iacute;a a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/Reduce&quot;&gt; &lt;code&gt;Array.prototype.reduce(reducer, ?initialValue)&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="f9b9f5929894997ad56cc3c83383ff218a8e4e68" translate="yes" xml:space="preserve">
          <source>Side effects</source>
          <target state="translated">Los efectos secundarios</target>
        </trans-unit>
        <trans-unit id="2bdc602c5e4f77691c4cf05236ccbfb9a3a7d6cd" translate="yes" xml:space="preserve">
          <source>Similarly, Dan Abramov, one of the creators of Redux, says:</source>
          <target state="translated">Del mismo modo,Dan Abramov,uno de los creadores de Redux,dice:</target>
        </trans-unit>
        <trans-unit id="a8d94bc8e96596ebe8e2c196ec3465a016861842" translate="yes" xml:space="preserve">
          <source>Similarly, if &lt;code&gt;sliceReducerA&lt;/code&gt; happens to need some data from &lt;code&gt;sliceReducerB&lt;/code&gt;'s slice of state in order to handle a particular action, or &lt;code&gt;sliceReducerB&lt;/code&gt; happens to need the entire state as an argument, &lt;code&gt;combineReducers&lt;/code&gt; does not handle that itself. This could be resolved by writing a custom function that knows to pass the needed data as an additional argument in those specific cases, such as:</source>
          <target state="translated">De manera similar, si &lt;code&gt;sliceReducerA&lt;/code&gt; necesita algunos datos del segmento de estado de &lt;code&gt;sliceReducerB&lt;/code&gt; para manejar una acci&amp;oacute;n en particular, o si &lt;code&gt;sliceReducerB&lt;/code&gt; necesita el estado completo como argumento, &lt;code&gt;combineReducers&lt;/code&gt; no lo maneja por s&amp;iacute; mismo. Esto podr&amp;iacute;a resolverse escribiendo una funci&amp;oacute;n personalizada que sepa pasar los datos necesarios como un argumento adicional en esos casos espec&amp;iacute;ficos, como:</target>
        </trans-unit>
        <trans-unit id="442aad2b9dae61af274e1b5ffcce14c8db98f18c" translate="yes" xml:space="preserve">
          <source>Similarly, while you &lt;em&gt;can&lt;/em&gt; reference your store instance by importing it directly, this is not a recommended pattern in Redux. If you create a store instance and export it from a module, it will become a singleton. This means it will be harder to isolate a Redux app as a component of a larger app, if this is ever necessary, or to enable server rendering, because on the server you want to create separate store instances for every request.</source>
          <target state="translated">Del mismo modo, aunque &lt;em&gt;puede hacer&lt;/em&gt; referencia a la instancia de su tienda import&amp;aacute;ndola directamente, este no es un patr&amp;oacute;n recomendado en Redux. Si crea una instancia de tienda y la exporta desde un m&amp;oacute;dulo, se convertir&amp;aacute; en un singleton. Esto significa que ser&amp;aacute; m&amp;aacute;s dif&amp;iacute;cil aislar una aplicaci&amp;oacute;n Redux como un componente de una aplicaci&amp;oacute;n m&amp;aacute;s grande, si es necesario, o para habilitar la representaci&amp;oacute;n del servidor, porque en el servidor desea crear instancias de tienda separadas para cada solicitud.</target>
        </trans-unit>
        <trans-unit id="4f6c75f4d537fefd2d55e1099d473ae02742b468" translate="yes" xml:space="preserve">
          <source>Similarly, you can compose different asynchronous streams to turn them into actions before feeding them to &lt;code&gt;store.dispatch()&lt;/code&gt;.</source>
          <target state="translated">De manera similar, puede componer diferentes transmisiones asincr&amp;oacute;nicas para convertirlas en acciones antes de &lt;code&gt;store.dispatch()&lt;/code&gt; a store.dispatch () .</target>
        </trans-unit>
        <trans-unit id="0b1172b53a0feb7a9bb295b5a660a2ffbcb58fc3" translate="yes" xml:space="preserve">
          <source>Simple Merging</source>
          <target state="translated">Fusión simple</target>
        </trans-unit>
        <trans-unit id="2070eaef74ea9323409e358647e9ae6ca53c37cd" translate="yes" xml:space="preserve">
          <source>Since &lt;code&gt;combineReducers&lt;/code&gt; currently only works with plain Javascript objects, an application that uses an Immutable.js Map object for the top of its state tree could not use &lt;code&gt;combineReducers&lt;/code&gt; to manage that Map. Since many developers do use Immutable.js, there are a number of published utilities that provide equivalent functionality, such as &lt;a href=&quot;https://github.com/gajus/redux-immutable&quot;&gt;redux-immutable&lt;/a&gt;. This package provides its own implementation of &lt;code&gt;combineReducers&lt;/code&gt; that knows how to iterate over an Immutable Map instead of a plain Javascript object.</source>
          <target state="translated">Dado que &lt;code&gt;combineReducers&lt;/code&gt; actualmente solo funciona con objetos simples de Javascript, una aplicaci&amp;oacute;n que usa un objeto Map Immutable.js para la parte superior de su &amp;aacute;rbol de estado no podr&amp;iacute;a usar &lt;code&gt;combineReducers&lt;/code&gt; para administrar ese mapa. Dado que muchos desarrolladores usan Immutable.js, hay una serie de utilidades publicadas que brindan una funcionalidad equivalente, como &lt;a href=&quot;https://github.com/gajus/redux-immutable&quot;&gt;redux-immutable&lt;/a&gt; . Este paquete proporciona su propia implementaci&amp;oacute;n de &lt;code&gt;combineReducers&lt;/code&gt; que sabe c&amp;oacute;mo iterar sobre un mapa inmutable en lugar de un objeto simple de Javascript.</target>
        </trans-unit>
        <trans-unit id="81feae1ade917069a12cf9aa7539b91da9719215" translate="yes" xml:space="preserve">
          <source>Since Redux is just a data store library, it has no direct opinion on how your project should be structured. However, there are a few common patterns that most Redux developers tend to use:</source>
          <target state="translated">Como Redux es sólo una biblioteca de almacenamiento de datos,no tiene una opinión directa sobre cómo debe estructurarse su proyecto.Sin embargo,hay algunos patrones comunes que la mayoría de los desarrolladores de Redux tienden a usar:</target>
        </trans-unit>
        <trans-unit id="ec6d8987b40f3810e89420d79f0a03ad196ea3a0" translate="yes" xml:space="preserve">
          <source>Since a Redux reducer is &lt;em&gt;just&lt;/em&gt; a function, the same concept applies. You can split some of your reducer logic out into another function, and call that new function from the parent function.</source>
          <target state="translated">Dado que un reductor Redux es &lt;em&gt;solo&lt;/em&gt; una funci&amp;oacute;n, se aplica el mismo concepto. Puede dividir parte de su l&amp;oacute;gica reductora en otra funci&amp;oacute;n y llamar a esa nueva funci&amp;oacute;n desde la funci&amp;oacute;n principal.</target>
        </trans-unit>
        <trans-unit id="c7004cb2a5422c7e3364434a15f16aaad43e92c0" translate="yes" xml:space="preserve">
          <source>Since each data type is separated, an update like changing the text of a comment would only require new copies of the &quot;comments &amp;gt; byId &amp;gt; comment&quot; portion of the tree. This will generally mean fewer portions of the UI that need to update because their data has changed. In contrast, updating a comment in the original nested shape would have required updating the comment object, the parent post object, the array of all post objects, and likely have caused &lt;em&gt;all&lt;/em&gt; of the Post components and Comment components in the UI to re-render themselves.</source>
          <target state="translated">Dado que cada tipo de datos est&amp;aacute; separado, una actualizaci&amp;oacute;n como cambiar el texto de un comentario solo requerir&amp;iacute;a nuevas copias de la parte &quot;comments&amp;gt; byId&amp;gt; comment&quot; del &amp;aacute;rbol. Por lo general, esto significar&amp;aacute; menos partes de la interfaz de usuario que deben actualizarse porque sus datos han cambiado. Por el contrario, actualizar un comentario en la forma anidada original habr&amp;iacute;a requerido actualizar el objeto de comentario, el objeto de publicaci&amp;oacute;n principal, la matriz de todos los objetos de publicaci&amp;oacute;n, y probablemente habr&amp;iacute;a provocado que &lt;em&gt;todos&lt;/em&gt; los componentes de publicaci&amp;oacute;n y comentarios en la interfaz de usuario se volvieran a representar s&amp;iacute; mismos.</target>
        </trans-unit>
        <trans-unit id="3378207602b38cf49f27093860fe75762bdd12fe" translate="yes" xml:space="preserve">
          <source>Since immutable data updates require all ancestors in the state tree to be copied and updated as well, and new object references will cause connected UI components to re-render, an update to a deeply nested data object could force totally unrelated UI components to re-render even if the data they're displaying hasn't actually changed.</source>
          <target state="translated">Dado que las actualizaciones de datos inmutables requieren que todos los ancestros del árbol de estados se copien y actualicen también,y que las nuevas referencias de objetos harán que los componentes de la interfaz de usuario conectados se reproduzcan,una actualización de un objeto de datos profundamente anidados podría obligar a los componentes de la interfaz de usuario totalmente no relacionados a reproducirlos incluso si los datos que están mostrando no han cambiado realmente.</target>
        </trans-unit>
        <trans-unit id="bc174df1294758024d3aa9d37156a3b1ea508c4a" translate="yes" xml:space="preserve">
          <source>Since one of the core tenets of Redux is to never mutate state, you'll often find yourself using &lt;a href=&quot;https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Object/assign&quot;&gt;&lt;code&gt;Object.assign()&lt;/code&gt;&lt;/a&gt; to create copies of objects with new or updated values. For example, in the &lt;code&gt;todoApp&lt;/code&gt; below &lt;code&gt;Object.assign()&lt;/code&gt; is used to return a new &lt;code&gt;state&lt;/code&gt; object with an updated &lt;code&gt;visibilityFilter&lt;/code&gt; property:</source>
          <target state="translated">Dado que uno de los principios b&amp;aacute;sicos de Redux es nunca mutar el estado, a menudo se encontrar&amp;aacute; usando &lt;a href=&quot;https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Object/assign&quot;&gt; &lt;code&gt;Object.assign()&lt;/code&gt; &lt;/a&gt; para crear copias de objetos con valores nuevos o actualizados. Por ejemplo, en &lt;code&gt;todoApp&lt;/code&gt; a continuaci&amp;oacute;n, &lt;code&gt;Object.assign()&lt;/code&gt; se usa para devolver un nuevo objeto de &lt;code&gt;state&lt;/code&gt; con una propiedad &lt;code&gt;visibilityFilter&lt;/code&gt; actualizada :</target>
        </trans-unit>
        <trans-unit id="751750d4cb79c6a8466b2981d8a7c11a9b335b87" translate="yes" xml:space="preserve">
          <source>Since reducers are just functions, there's an infinite number of ways to split up this logic. While using slice reducers is obviously the most common, it's also possible to organize behavior in a more task-oriented structure. Because this will often involve more nested updates, you may want to use an immutable update utility library like &lt;a href=&quot;https://github.com/debitoor/dot-prop-immutable&quot;&gt;dot-prop-immutable&lt;/a&gt; or &lt;a href=&quot;https://github.com/mariocasciaro/object-path-immutable&quot;&gt;object-path-immutable&lt;/a&gt; to simplify the update statements. Here's an example of what that might look like:</source>
          <target state="translated">Dado que los reductores son solo funciones, hay un n&amp;uacute;mero infinito de formas de dividir esta l&amp;oacute;gica. Si bien el uso de reductores de corte es obviamente el m&amp;aacute;s com&amp;uacute;n, tambi&amp;eacute;n es posible organizar el comportamiento en una estructura m&amp;aacute;s orientada a tareas. Debido a que esto a menudo implicar&amp;aacute; m&amp;aacute;s actualizaciones anidadas, es posible que desee utilizar una biblioteca de utilidad de actualizaci&amp;oacute;n inmutable como &lt;a href=&quot;https://github.com/debitoor/dot-prop-immutable&quot;&gt;dot-prop-immutable&lt;/a&gt; o &lt;a href=&quot;https://github.com/mariocasciaro/object-path-immutable&quot;&gt;object-path-immutable&lt;/a&gt; para simplificar las declaraciones de actualizaci&amp;oacute;n. Aqu&amp;iacute; hay un ejemplo de c&amp;oacute;mo se ver&amp;iacute;a eso:</target>
        </trans-unit>
        <trans-unit id="9524f9ed1b2581f0acc17e64cde44a8908d2e14e" translate="yes" xml:space="preserve">
          <source>Since the default export is still the decorated component, the import statement pictured above will work as before so you won't have to change your application code. However, you can now import the undecorated &lt;code&gt;App&lt;/code&gt; components in your test file like this:</source>
          <target state="translated">Dado que la exportaci&amp;oacute;n predeterminada sigue siendo el componente decorado, la declaraci&amp;oacute;n de importaci&amp;oacute;n que se muestra arriba funcionar&amp;aacute; como antes, por lo que no tendr&amp;aacute; que cambiar el c&amp;oacute;digo de su aplicaci&amp;oacute;n. Sin embargo, ahora puede importar los componentes de la &lt;code&gt;App&lt;/code&gt; sin decorar en su archivo de prueba de esta manera:</target>
        </trans-unit>
        <trans-unit id="1fb6dcac04c2641afe5f5ceba2752f16941c0489" translate="yes" xml:space="preserve">
          <source>Since the object spread syntax is still a &lt;a href=&quot;https://github.com/sebmarkbage/ecmascript-rest-spread#status-of-this-proposal&quot;&gt;Stage 3&lt;/a&gt; proposal for ECMAScript you'll need to use a transpiler such as &lt;a href=&quot;http://babeljs.io/&quot;&gt;Babel&lt;/a&gt; to use it in production. You can use your existing &lt;code&gt;es2015&lt;/code&gt; preset, install &lt;a href=&quot;http://babeljs.io/docs/plugins/transform-object-rest-spread/&quot;&gt;&lt;code&gt;babel-plugin-transform-object-rest-spread&lt;/code&gt;&lt;/a&gt; and add it individually to the &lt;code&gt;plugins&lt;/code&gt; array in your &lt;code&gt;.babelrc&lt;/code&gt;.</source>
          <target state="translated">Dado que la sintaxis de propagaci&amp;oacute;n de objetos sigue siendo una propuesta de la &lt;a href=&quot;https://github.com/sebmarkbage/ecmascript-rest-spread#status-of-this-proposal&quot;&gt;Etapa 3&lt;/a&gt; para ECMAScript, deber&amp;aacute; usar un transpilador como &lt;a href=&quot;http://babeljs.io/&quot;&gt;Babel&lt;/a&gt; para usarlo en producci&amp;oacute;n. Puede usar su &lt;code&gt;es2015&lt;/code&gt; preestablecido de es2015 existente , instalar &lt;a href=&quot;http://babeljs.io/docs/plugins/transform-object-rest-spread/&quot;&gt; &lt;code&gt;babel-plugin-transform-object-rest-spread&lt;/code&gt; &lt;/a&gt; y agregarlo individualmente a la matriz de &lt;code&gt;plugins&lt;/code&gt; en su &lt;code&gt;.babelrc&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="8ca51516913ff8c686b4181a9850b407d585f33e" translate="yes" xml:space="preserve">
          <source>Single Simple Reducer</source>
          <target state="translated">Reductor simple y único</target>
        </trans-unit>
        <trans-unit id="c3607f5a3395346db279c8631885ad76c32cdec0" translate="yes" xml:space="preserve">
          <source>Single source of truth</source>
          <target state="translated">La única fuente de la verdad</target>
        </trans-unit>
        <trans-unit id="3d0ddd2467b9b23c1a85abd5a68ac4b84b509998" translate="yes" xml:space="preserve">
          <source>Slice Reducer Composition</source>
          <target state="translated">Composición del reductor de rodajas</target>
        </trans-unit>
        <trans-unit id="6f8966ee06a6a598a66e68a6f2128780e130ca9a" translate="yes" xml:space="preserve">
          <source>Small utility functions containing some reusable chunk of logic that is needed in multiple places (which may or may not be actually related to the specific business logic)</source>
          <target state="translated">Pequeñas funciones de utilidad que contienen algún trozo de lógica reutilizable que se necesita en múltiples lugares (que pueden o no estar realmente relacionadas con la lógica de negocio específica)</target>
        </trans-unit>
        <trans-unit id="712ac3fdb33cc95ff1f79708b05bdbf85fc873a3" translate="yes" xml:space="preserve">
          <source>Smart and Dumb Components in React</source>
          <target state="translated">Componentes inteligentes y tontos en reacción</target>
        </trans-unit>
        <trans-unit id="dd67eec5e031f2788f993ce1a20a1c919e9f1589" translate="yes" xml:space="preserve">
          <source>Smart components that access the store via React Redux&amp;rsquo;s &lt;code&gt;connect&lt;/code&gt; function must use the Immutable.JS values returned by your selectors. Make sure you avoid the potential issues this can cause with unnecessary component re-rendering. Memoize your selectors using a library such as reselect if necessary.</source>
          <target state="translated">Los componentes inteligentes que acceden a la tienda a trav&amp;eacute;s de la funci&amp;oacute;n de &lt;code&gt;connect&lt;/code&gt; React Redux deben usar los valores Immutable.JS devueltos por sus selectores. Aseg&amp;uacute;rese de evitar los problemas potenciales que esto puede causar con la renderizaci&amp;oacute;n innecesaria de componentes. Recuerde sus selectores utilizando una biblioteca como, por ejemplo, volver a seleccionar si es necesario.</target>
        </trans-unit>
        <trans-unit id="0fa28ccaea98dae4e7adc0d2f21a6688416f5c11" translate="yes" xml:space="preserve">
          <source>So far we have only seen selectors receive the Redux store state as an argument, but a selector can receive props too.</source>
          <target state="translated">Hasta ahora sólo hemos visto selectores recibir el estado de la tienda Redux como argumento,pero un selector también puede recibir accesorios.</target>
        </trans-unit>
        <trans-unit id="7c7e37241e1ba9e69dbbe9b4a4d92f9d4db7b97e" translate="yes" xml:space="preserve">
          <source>So now &lt;code&gt;getVisibleTodos&lt;/code&gt; has access to &lt;code&gt;props&lt;/code&gt;, and everything seems to be working fine.</source>
          <target state="translated">As&amp;iacute; que ahora &lt;code&gt;getVisibleTodos&lt;/code&gt; tiene acceso a &lt;code&gt;props&lt;/code&gt; y todo parece estar funcionando bien.</target>
        </trans-unit>
        <trans-unit id="d7a8e420420cf895d7c454a61b1d5cb20007fa2a" translate="yes" xml:space="preserve">
          <source>So you want to do routing with your Redux app. You can use it with &lt;a href=&quot;https://github.com/reactjs/react-router&quot;&gt;React Router&lt;/a&gt;. Redux will be the source of truth for your data and React Router will be the source of truth for your URL. In most of the cases, &lt;strong&gt;it is fine&lt;/strong&gt; to have them separate unless you need to time travel and rewind actions that triggers the change URL.</source>
          <target state="translated">Entonces quieres hacer el enrutamiento con tu aplicaci&amp;oacute;n Redux. Puedes usarlo con &lt;a href=&quot;https://github.com/reactjs/react-router&quot;&gt;React Router&lt;/a&gt; . Redux ser&amp;aacute; la fuente de la verdad para sus datos y React Router ser&amp;aacute; la fuente de la verdad para su URL. En la mayor&amp;iacute;a de los casos, &lt;strong&gt;est&amp;aacute; bien&lt;/strong&gt; tenerlos separados a menos que necesite viajar en el tiempo y rebobinar acciones que desencadenan el cambio de URL.</target>
        </trans-unit>
        <trans-unit id="2fc8fe9a73edd4d111843f389431f4101d5d9c17" translate="yes" xml:space="preserve">
          <source>So, for example, if your state shape is &lt;code&gt;{ todos, counter }&lt;/code&gt;, the call to &lt;code&gt;combineReducers&lt;/code&gt; would be:</source>
          <target state="translated">Entonces, por ejemplo, si la forma de su estado es &lt;code&gt;{ todos, counter }&lt;/code&gt; , la llamada a &lt;code&gt;combineReducers&lt;/code&gt; ser&amp;iacute;a:</target>
        </trans-unit>
        <trans-unit id="ccb9fbf6736643b0e42418e768268b9cd0d29f5f" translate="yes" xml:space="preserve">
          <source>So, what are you waiting for?</source>
          <target state="translated">Entonces,¿qué estás esperando?</target>
        </trans-unit>
        <trans-unit id="aaba548cf058bc58a2b9e6247d0f30696c87f137" translate="yes" xml:space="preserve">
          <source>Solving a performance issue caused by too frequent updates of some part of the state, when confirmed by profiling the app.</source>
          <target state="translated">Resolver un problema de rendimiento causado por actualizaciones demasiado frecuentes de alguna parte del estado,cuando se confirme mediante el perfil de la aplicación.</target>
        </trans-unit>
        <trans-unit id="d49f0c1ce0f85599fd62bed378620cb762c1e648" translate="yes" xml:space="preserve">
          <source>Some Reasons Why Redux is Useful in a React App</source>
          <target state="translated">Algunas razones por las que Redux es útil en una aplicación React</target>
        </trans-unit>
        <trans-unit id="67effe7198ec1da2c9351c8b657b35336537bffb" translate="yes" xml:space="preserve">
          <source>Some common rules of thumb for determining what kind of data should be put into Redux:</source>
          <target state="translated">Algunas reglas comunes para determinar qué tipo de datos deben ser puestos en el Redux:</target>
        </trans-unit>
        <trans-unit id="fce335731003088c209cd9b37e95f6128c05deb1" translate="yes" xml:space="preserve">
          <source>Some frameworks like &lt;a href=&quot;https://github.com/acdlite/flummox&quot;&gt;Flummox&lt;/a&gt; generate action type constants automatically from the action creator function definitions. The idea is that you don't need to both define &lt;code&gt;ADD_TODO&lt;/code&gt; constant and &lt;code&gt;addTodo()&lt;/code&gt; action creator. Under the hood, such solutions still generate action type constants, but they're created implicitly so it's a level of indirection and can cause confusion. We recommend creating your action type constants explicitly.</source>
          <target state="translated">Algunos marcos como &lt;a href=&quot;https://github.com/acdlite/flummox&quot;&gt;Flummox&lt;/a&gt; generan constantes de tipo de acci&amp;oacute;n autom&amp;aacute;ticamente a partir de las definiciones de funciones del creador de acciones. La idea es que no es necesario tanto para definir &lt;code&gt;ADD_TODO&lt;/code&gt; constante y &lt;code&gt;addTodo()&lt;/code&gt; creador de acci&amp;oacute;n. Bajo el cap&amp;oacute;, estas soluciones a&amp;uacute;n generan constantes de tipo de acci&amp;oacute;n, pero se crean impl&amp;iacute;citamente, por lo que es un nivel de indirecci&amp;oacute;n y puede causar confusi&amp;oacute;n. Recomendamos crear sus constantes de tipo de acci&amp;oacute;n expl&amp;iacute;citamente.</target>
        </trans-unit>
        <trans-unit id="11a2735a6d7891b97c7769374cd7a4c5a0bb87e0" translate="yes" xml:space="preserve">
          <source>Some of these concepts are already described elsewhere in the Redux documentation. Others are generic and applicable outside of Redux itself, and there are numerous existing articles that cover these concepts in detail. These concepts and techniques form the foundation of writing solid Redux reducer logic.</source>
          <target state="translated">Algunos de estos conceptos ya se describen en otra parte de la documentación del Redux.Otros son genéricos y aplicables fuera del propio Redux,y hay numerosos artículos existentes que cubren estos conceptos en detalle.Estos conceptos y técnicas forman la base para escribir una sólida lógica reductora del Redux.</target>
        </trans-unit>
        <trans-unit id="f81aa5aa34cf8b3e24fa1aaf08e9c45c13b0947d" translate="yes" xml:space="preserve">
          <source>Some valid reasons for using multiple stores in Redux might include:</source>
          <target state="translated">Algunas razones válidas para usar varias tiendas en el Redux podrían incluir:</target>
        </trans-unit>
        <trans-unit id="a0393764cde3422b70bb25ef444a0fd2f0c54e31" translate="yes" xml:space="preserve">
          <source>Something else doesn't work</source>
          <target state="translated">Algo más no funciona</target>
        </trans-unit>
        <trans-unit id="cb49415fd84ba99d743a94724fc704b532a5abb2" translate="yes" xml:space="preserve">
          <source>Something needs to map the Immutable.JS props in your Smart Component to the pure JavaScript props used in your Dumb Component. That something is a Higher Order Component (HOC) that simply takes the Immutable.JS props from your Smart Component, and converts them using &lt;code&gt;toJS()&lt;/code&gt; to plain JavaScript props, which are then passed to your Dumb Component.</source>
          <target state="translated">Algo debe mapear los accesorios Immutable.JS en su Componente inteligente con los accesorios de JavaScript puro utilizados en su Componente tonto. Ese algo es un Componente de orden superior (HOC) que simplemente toma los accesorios Immutable.JS de su Componente inteligente y los convierte usando &lt;code&gt;toJS()&lt;/code&gt; en accesorios simples de JavaScript, que luego se pasan a su Componente tonto.</target>
        </trans-unit>
        <trans-unit id="82c027e36202d6dbe2e05d86322f925c7f839e11" translate="yes" xml:space="preserve">
          <source>Sometimes it's hard to tell if some component should be a presentational component or a container. For example, sometimes form and function are really coupled together, such as in case of this tiny component:</source>
          <target state="translated">A veces es difícil saber si algún componente debe ser un componente de presentación o un contenedor.Por ejemplo,a veces la forma y la función están realmente acopladas,como en el caso de este pequeño componente:</target>
        </trans-unit>
        <trans-unit id="d627c00cc83e8506e9cca85f44caed1d800c8c74" translate="yes" xml:space="preserve">
          <source>Sometimes you want to see all existing actions before working on a new feature. It may be that the action you need was already added by somebody on the team, but you didn't know.</source>
          <target state="translated">A veces quieres ver todas las acciones existentes antes de trabajar en una nueva característica.Puede ser que la acción que necesitas ya haya sido añadida por alguien del equipo,pero no lo sabías.</target>
        </trans-unit>
        <trans-unit id="268852f5aa4bf3dafae464e32161ca334e3c609b" translate="yes" xml:space="preserve">
          <source>Sometimes, you are trying to dispatch an action, but your view does not update. Why does this happen? There may be several reasons for this.</source>
          <target state="translated">A veces,usted está tratando de enviar una acción,pero su punto de vista no se actualiza.¿Por qué sucede esto? Puede haber varias razones para esto.</target>
        </trans-unit>
        <trans-unit id="7b37110e5b01350732eac4676af2611966b9ccef" translate="yes" xml:space="preserve">
          <source>Source Code</source>
          <target state="translated">El código fuente</target>
        </trans-unit>
        <trans-unit id="f7919286c635d777ca9b544031e60fec3b718ae8" translate="yes" xml:space="preserve">
          <source>Special thanks to &lt;a href=&quot;http://jdpaton.github.io&quot;&gt;Jamie Paton&lt;/a&gt; for handing over the &lt;code&gt;redux&lt;/code&gt; NPM package name.</source>
          <target state="translated">Un agradecimiento especial a &lt;a href=&quot;http://jdpaton.github.io&quot;&gt;Jamie Paton&lt;/a&gt; por entregar el nombre del paquete &lt;code&gt;redux&lt;/code&gt; NPM.</target>
        </trans-unit>
        <trans-unit id="56c91bc14a02e8f889305106eb782729b8dd411c" translate="yes" xml:space="preserve">
          <source>Specifically, at each stage of the iteration, &lt;code&gt;combineReducers&lt;/code&gt; performs a shallow equality check on the current state slice and the state slice returned from the reducer. If the reducer returns a new object, the shallow equality check will fail, and &lt;code&gt;combineReducers&lt;/code&gt; will set a &lt;code&gt;hasChanged&lt;/code&gt; flag to true.</source>
          <target state="translated">Espec&amp;iacute;ficamente, en cada etapa de la iteraci&amp;oacute;n, &lt;code&gt;combineReducers&lt;/code&gt; realiza una verificaci&amp;oacute;n de igualdad superficial en el segmento de estado actual y el segmento de estado devuelto por el reductor. Si el reductor devuelve un nuevo objeto, la verificaci&amp;oacute;n de igualdad superficial fallar&amp;aacute; y &lt;code&gt;combineReducers&lt;/code&gt; establecer&amp;aacute; un indicador &lt;code&gt;hasChanged&lt;/code&gt; en verdadero.</target>
        </trans-unit>
        <trans-unit id="00a3d8825c5eff03d86ea087a0b53050c94c3f8c" translate="yes" xml:space="preserve">
          <source>Specifically, if the state slice passed to a reducer by &lt;code&gt;combineReducers&lt;/code&gt; is a mutable object, the reducer can modify it directly and return it.</source>
          <target state="translated">Espec&amp;iacute;ficamente, si el segmento de estado pasado a un reductor por &lt;code&gt;combineReducers&lt;/code&gt; es un objeto mutable, el reductor puede modificarlo directamente y devolverlo.</target>
        </trans-unit>
        <trans-unit id="479e7df6db27bd135fe0142b00903715ac33068a" translate="yes" xml:space="preserve">
          <source>Splitting Reducer Logic</source>
          <target state="translated">Lógica del reductor de división</target>
        </trans-unit>
        <trans-unit id="0b815e2bedf75de31f11e6b703026f6acada0f6e" translate="yes" xml:space="preserve">
          <source>Splitting Reducers</source>
          <target state="translated">Reductores de división</target>
        </trans-unit>
        <trans-unit id="63a2a0cb21e82fc3b8d2808aae5b0cbb52a99600" translate="yes" xml:space="preserve">
          <source>Splitting Up Reducer Logic</source>
          <target state="translated">Lógica reductora de división</target>
        </trans-unit>
        <trans-unit id="d329a5765000192b22c2d117af29d9bee7c6537b" translate="yes" xml:space="preserve">
          <source>Splitting relational/nested data up into separate tables</source>
          <target state="translated">Dividiendo los datos relacionales/anidados en tablas separadas</target>
        </trans-unit>
        <trans-unit id="1230663d5b652e72592a5cdc4822bd583ada50c6" translate="yes" xml:space="preserve">
          <source>Stack Overflow: Accessing Redux state in an action creator</source>
          <target state="translated">Desbordamiento de la pila:Accediendo al estado Redux en un creador de acción</target>
        </trans-unit>
        <trans-unit id="af2ce625671f1ad526f0f824992d40592fc65945" translate="yes" xml:space="preserve">
          <source>Stack Overflow: Accessing Redux state in an action creator?</source>
          <target state="translated">Desbordamiento de la pila:¿Accediendo al estado Redux en un creador de acción?</target>
        </trans-unit>
        <trans-unit id="cc4a21e47f70cd2f23b0f2c342d8b431463d5d43" translate="yes" xml:space="preserve">
          <source>Stack Overflow: Accessing other parts of the state when using combined reducers?</source>
          <target state="translated">Desbordamiento de la pila:¿Acceder a otras partes del estado cuando se utilizan reductores combinados?</target>
        </trans-unit>
        <trans-unit id="b04783e3f6d9939621df25d5e278f88f85d40f4e" translate="yes" xml:space="preserve">
          <source>Stack Overflow: Can I dispatch multiple actions without Redux Thunk middleware?</source>
          <target state="translated">Desbordamiento de la pila:¿Puedo enviar múltiples acciones sin el middleware de Redux Thunk?</target>
        </trans-unit>
        <trans-unit id="48da126c64af14eeff2ddf00eef38c1862600c5d" translate="yes" xml:space="preserve">
          <source>Stack Overflow: Can a React Redux app scale as well as Backbone?</source>
          <target state="translated">Desbordamiento de la pila:¿Puede una aplicación React Redux escalar tan bien como Backbone?</target>
        </trans-unit>
        <trans-unit id="4dfaf2359aff2ab31c33a3dbf21369953e0929ed" translate="yes" xml:space="preserve">
          <source>Stack Overflow: Can a Redux store lead to a memory leak?</source>
          <target state="translated">Desbordamiento de la pila:¿Puede un almacén Redux llevar a una fuga de memoria?</target>
        </trans-unit>
        <trans-unit id="988abe0fa36c2ebb4e0cbf914b4d5fe269cc989b" translate="yes" xml:space="preserve">
          <source>Stack Overflow: Cleaner/shorter way to update nested state in Redux?</source>
          <target state="translated">Desbordamiento de la pila:¿Una forma más limpia y corta de actualizar el estado anidado en el Redux?</target>
        </trans-unit>
        <trans-unit id="5b1e48bcacf1979014102c6547e344589cfc1043" translate="yes" xml:space="preserve">
          <source>Stack Overflow: Do events and actions have a 1:1 relationship in Redux?</source>
          <target state="translated">Desbordamiento de la pila:¿Los eventos y acciones tienen una relación 1:1 en el Redux?</target>
        </trans-unit>
        <trans-unit id="ebddfda346f9cc1931bdaef9cad513e27fe3e4da" translate="yes" xml:space="preserve">
          <source>Stack Overflow: How does Redux deal with deeply nested models?</source>
          <target state="translated">Desbordamiento de la pila:¿Cómo trata el Redux a los modelos profundamente anidados?</target>
        </trans-unit>
        <trans-unit id="94b70dfefdce48458a92962024bd2e39922329c0" translate="yes" xml:space="preserve">
          <source>Stack Overflow: How to dispatch a Redux action with a timeout?</source>
          <target state="translated">Desbordamiento de la pila:¿Cómo enviar una acción Redux con un tiempo de espera?</target>
        </trans-unit>
        <trans-unit id="b44a8af5f0a70fd30e935dc3f76e87f077627bbd" translate="yes" xml:space="preserve">
          <source>Stack Overflow: How to fire AJAX calls in response to the state changes with Redux?</source>
          <target state="translated">Desbordamiento de la pila:¿Cómo disparar llamadas AJAX en respuesta a los cambios de estado con Redux?</target>
        </trans-unit>
        <trans-unit id="3e47386ec6016dd7f3fc367e6cffa3cf96cda35c" translate="yes" xml:space="preserve">
          <source>Stack Overflow: How to get simple dispatch from this.props using connect w/ Redux?</source>
          <target state="translated">Desbordamiento de la pila:¿Cómo conseguir un envío simple de este.props usando connect w/Redux?</target>
        </trans-unit>
        <trans-unit id="2165fe78c71949f8e9b453c57e11f6841bdc5b4c" translate="yes" xml:space="preserve">
          <source>Stack Overflow: How to handle complex side-effects in Redux?</source>
          <target state="translated">Desbordamiento de la pila:¿Cómo manejar los complejos efectos secundarios en el Redux?</target>
        </trans-unit>
        <trans-unit id="28f22a2146692414a69f910d533939bac7f855eb" translate="yes" xml:space="preserve">
          <source>Stack Overflow: How to handle tree-shaped entities in Redux reducers?</source>
          <target state="translated">Desbordamiento de la pila:¿Cómo manejar entidades con forma de árbol en los reductores Redux?</target>
        </trans-unit>
        <trans-unit id="9d4b50a3426c2e7c8b83c7f6061b71189fc4ad4d" translate="yes" xml:space="preserve">
          <source>Stack Overflow: How to optimize small updates to props of nested components in React + Redux?</source>
          <target state="translated">Desbordamiento de la pila:¿Cómo optimizar las pequeñas actualizaciones de los componentes anidados en React+Redux?</target>
        </trans-unit>
        <trans-unit id="4d918cb89f55a87fe62b679dfe98194482be59ff" translate="yes" xml:space="preserve">
          <source>Stack Overflow: How to optimize small updates to props of nested components?</source>
          <target state="translated">Desbordamiento de la pila:¿Cómo optimizar las pequeñas actualizaciones de los puntales de los componentes anidados?</target>
        </trans-unit>
        <trans-unit id="acba72b3df5c830d1b5aba0a48d173bc22d8fc32" translate="yes" xml:space="preserve">
          <source>Stack Overflow: How to structure Redux components/containers</source>
          <target state="translated">Desbordamiento de la pila:Cómo estructurar los componentes/contenedores del Redux</target>
        </trans-unit>
        <trans-unit id="e3eccf206103856b93ecbd37ce4f41620479a06a" translate="yes" xml:space="preserve">
          <source>Stack Overflow: How to unit test async Redux actions to mock ajax response</source>
          <target state="translated">Desbordamiento de la pila:Cómo probar las acciones de Redux para simular la respuesta de Ajax.</target>
        </trans-unit>
        <trans-unit id="4927a93f0a45155d14400120ebde30fcac96c00b" translate="yes" xml:space="preserve">
          <source>Stack Overflow: Is there any way to &quot;commit&quot; the state in Redux to free memory?</source>
          <target state="translated">Desbordamiento de la pila:¿Hay alguna forma de &quot;comprometer&quot; el estado en el Redux para liberar la memoria?</target>
        </trans-unit>
        <trans-unit id="8a704c1a402b4c7a231139affcc8b80dae9a39bc" translate="yes" xml:space="preserve">
          <source>Stack Overflow: Memory Usage Concern with Controlled Components</source>
          <target state="translated">Desbordamiento de la pila:Preocupación por el uso de la memoria con componentes controlados</target>
        </trans-unit>
        <trans-unit id="dee2e567cd35803ebf7a0cd85960b6e1c5f84ae0" translate="yes" xml:space="preserve">
          <source>Stack Overflow: Reducing an entire subtree with redux combineReducers</source>
          <target state="translated">Desbordamiento de la pila:Reducción de un subárbol entero con reducx combineReductores</target>
        </trans-unit>
        <trans-unit id="f5c28dc373c45c187ad94b9e7c8d28a1a1e19e92" translate="yes" xml:space="preserve">
          <source>Stack Overflow: Redux and ALL the application state</source>
          <target state="translated">Desbordamiento de la pila:Redux y TODO el estado de la aplicación</target>
        </trans-unit>
        <trans-unit id="c804eaac1de7836c4167b4c7ce22081a3aecc375" translate="yes" xml:space="preserve">
          <source>Stack Overflow: Redux multiple stores, why not?</source>
          <target state="translated">Desbordamiento de la pila:Reducir varias tiendas,¿por qué no?</target>
        </trans-unit>
        <trans-unit id="b7e9dc84c7d9700ead6d04e9e5ccc4ca7533584c" translate="yes" xml:space="preserve">
          <source>Stack Overflow: Redux vs plain React?</source>
          <target state="translated">Desbordamiento de la pila:¿Redux vs.Reactancia simple?</target>
        </trans-unit>
        <trans-unit id="105923b79101b77a45fa4c3b2354a35798f4c76b" translate="yes" xml:space="preserve">
          <source>Stack Overflow: Should I use one or several action types to represent this async action?</source>
          <target state="translated">Desbordamiento de la pila:¿Debo usar uno o varios tipos de acción para representar esta acción de sincronización?</target>
        </trans-unit>
        <trans-unit id="31fdb0827c84ebe2269807c61132bfaba82d6831" translate="yes" xml:space="preserve">
          <source>Stack Overflow: Should actions be handled by reducers to related actions or generated by action creators themselves?</source>
          <target state="translated">Desbordamiento de la pila:¿Deberían las acciones ser manejadas por reductores de acciones relacionadas o generadas por los propios creadores de las acciones?</target>
        </trans-unit>
        <trans-unit id="65014c400549c8612072befc0adf72ed3b081d64" translate="yes" xml:space="preserve">
          <source>Stack Overflow: Should all component state be kept in Redux store?</source>
          <target state="translated">Desbordamiento de la pila:¿Debería mantenerse el estado de todos los componentes en la tienda Redux?</target>
        </trans-unit>
        <trans-unit id="b98acfbe9a6b5556936b1fc7e937ef42e8da0b73" translate="yes" xml:space="preserve">
          <source>Stack Overflow: State in Redux app has the name of the reducer</source>
          <target state="translated">Desbordamiento de la pila:El estado en la aplicación Redux tiene el nombre del reductor</target>
        </trans-unit>
        <trans-unit id="c9bb052748fb6d9f95b232931f6b7ce0b330d741" translate="yes" xml:space="preserve">
          <source>Stack Overflow: State key names and &lt;code&gt;combineReducers&lt;/code&gt;</source>
          <target state="translated">Desbordamiento de pila: nombre de clave de estado y &lt;code&gt;combineReducers&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="70cc3d889ceeb8e34d6f3922754c47f23bd9be8d" translate="yes" xml:space="preserve">
          <source>Stack Overflow: Store initial state and &lt;code&gt;combineReducers&lt;/code&gt;</source>
          <target state="translated">Desbordamiento de pila: almacene el estado inicial y &lt;code&gt;combineReducers&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="6c38c53a8386528fdbcdcab4494d509416d698fc" translate="yes" xml:space="preserve">
          <source>Stack Overflow: What could be the downsides of using Redux instead of Flux?</source>
          <target state="translated">Desbordamiento de la pila:¿Cuáles podrían ser las desventajas de usar Redux en lugar de Flux?</target>
        </trans-unit>
        <trans-unit id="895ded7294588881bb7fc95054edf3c3db5d4e96" translate="yes" xml:space="preserve">
          <source>Stack Overflow: What is the point of the constants in Redux?</source>
          <target state="translated">Desbordamiento de la pila:¿Cuál es el sentido de las constantes en el Redux?</target>
        </trans-unit>
        <trans-unit id="658846fec2f949984f29281c5ad5f8e0b3afe04d" translate="yes" xml:space="preserve">
          <source>Stack Overflow: When should I add Redux to a React app?</source>
          <target state="translated">Desbordamiento de la pila:¿Cuándo debería añadir Redux a una aplicación de React?</target>
        </trans-unit>
        <trans-unit id="49f9fa997616236334bab1f021f4d95a98961d28" translate="yes" xml:space="preserve">
          <source>Stack Overflow: Where should I put synchronous side effects linked to actions in redux?</source>
          <target state="translated">Desbordamiento de la pila:¿Dónde debo poner los efectos secundarios sincrónicos vinculados a las acciones en la reducción?</target>
        </trans-unit>
        <trans-unit id="936266740da7540850a532833e6a2df525b2a8b5" translate="yes" xml:space="preserve">
          <source>Stack Overflow: Why do we need middleware for async flow in Redux?</source>
          <target state="translated">Desbordamiento de la pila:¿Por qué necesitamos un middleware para el flujo asíncrono en Redux?</target>
        </trans-unit>
        <trans-unit id="9bba3ac3bd12027bb6ac452b12ce38c7e56b122a" translate="yes" xml:space="preserve">
          <source>Stack Overflow: Why do you need 'Actions' as data in Redux?</source>
          <target state="translated">Desbordamiento de la pila:¿Por qué necesitas &quot;Acciones&quot; como datos en el Redux?</target>
        </trans-unit>
        <trans-unit id="18756cef85dbd29ab28641afa6772d3fefa20cc2" translate="yes" xml:space="preserve">
          <source>Stack Overflow: Why is state all in one place, even state that isn't global?</source>
          <target state="translated">Desbordamiento de la pila:¿Por qué el estado está todo en un solo lugar,incluso el estado que no es global?</target>
        </trans-unit>
        <trans-unit id="7d2d7c0b7e20393e0c17c7eab1c82b6b5fc50426" translate="yes" xml:space="preserve">
          <source>Stack Overflow: Why should I use Redux in this example?</source>
          <target state="translated">Desbordamiento de la pila:¿Por qué debería usar Redux en este ejemplo?</target>
        </trans-unit>
        <trans-unit id="a0364f6c9c8a113f92fdf913bbb551039a9724ed" translate="yes" xml:space="preserve">
          <source>Stack Overflow: Why use Redux over Facebook Flux?</source>
          <target state="translated">Desbordamiento de la pila:¿Por qué usar Redux sobre el flujo de Facebook?</target>
        </trans-unit>
        <trans-unit id="10aa1b0c136f369eeefa163ced6c37c7c591e72e" translate="yes" xml:space="preserve">
          <source>Stack Overflow: can a dumb component use a Redux container?</source>
          <target state="translated">Desbordamiento de la pila:¿puede un componente tonto usar un contenedor Redux?</target>
        </trans-unit>
        <trans-unit id="4b161211956de081a873933a4c8a044abab7e0fb" translate="yes" xml:space="preserve">
          <source>Standard Approaches</source>
          <target state="translated">Enfoques estándar</target>
        </trans-unit>
        <trans-unit id="a72502067518684f9deeec70cf119fd26326cd33" translate="yes" xml:space="preserve">
          <source>State</source>
          <target state="translated">State</target>
        </trans-unit>
        <trans-unit id="d587c099b9773435ddc0261ea9851ea406674dcf" translate="yes" xml:space="preserve">
          <source>State is read-only</source>
          <target state="translated">El estado es de sólo lectura</target>
        </trans-unit>
        <trans-unit id="88bdda40b1f54211bc74c1e437fac5cd7bd92718" translate="yes" xml:space="preserve">
          <source>Still, this isn't nice.</source>
          <target state="translated">Aún así,esto no es agradable.</target>
        </trans-unit>
        <trans-unit id="0d8a7046c8d39d9cbd86abcdfb704b161a601f9e" translate="yes" xml:space="preserve">
          <source>Store</source>
          <target state="translated">Store</target>
        </trans-unit>
        <trans-unit id="6bd6be2595d77f48a33fbcd6f117fa074b3dc576" translate="yes" xml:space="preserve">
          <source>Store API</source>
          <target state="translated">Tienda API</target>
        </trans-unit>
        <trans-unit id="2ae5ce622a7b9cf0a55280ae39f15ebca3636999" translate="yes" xml:space="preserve">
          <source>Store Methods</source>
          <target state="translated">Métodos de almacenamiento</target>
        </trans-unit>
        <trans-unit id="755c0688d517f4d1f3befaef9cbffed1a12611b7" translate="yes" xml:space="preserve">
          <source>Store Setup</source>
          <target state="translated">Configuración de la tienda</target>
        </trans-unit>
        <trans-unit id="46284619675b8370e43c07e07ae7f90f0dc58a68" translate="yes" xml:space="preserve">
          <source>Store creator</source>
          <target state="translated">Creador de la tienda</target>
        </trans-unit>
        <trans-unit id="8ce0b798e0d4896a15608877012298d37342e347" translate="yes" xml:space="preserve">
          <source>Store enhancer</source>
          <target state="translated">Mejorador de la tienda</target>
        </trans-unit>
        <trans-unit id="e142a8c534381fae47d56a5e16a0f2235b158282" translate="yes" xml:space="preserve">
          <source>Store enhancers are much the same concept as higher-order components in React, which are also occasionally called &amp;ldquo;component enhancers&amp;rdquo;.</source>
          <target state="translated">Los mejoradores de la tienda tienen el mismo concepto que los componentes de orden superior en React, que en ocasiones tambi&amp;eacute;n se denominan &quot;mejoradores de componentes&quot;.</target>
        </trans-unit>
        <trans-unit id="9416c1d5086bab5c721ad43af63fa3ab63c0a122" translate="yes" xml:space="preserve">
          <source>Store#dispatch()</source>
          <target state="translated">Store#dispatch()</target>
        </trans-unit>
        <trans-unit id="114eacc705a7df0e8c46ba7b192ea5316ba2c4ac" translate="yes" xml:space="preserve">
          <source>Store#getState()</source>
          <target state="translated">Store#getState()</target>
        </trans-unit>
        <trans-unit id="df99ee9fbf8a2efc5c7ed00b4492bf6b553163b9" translate="yes" xml:space="preserve">
          <source>Store#replaceReducer()</source>
          <target state="translated">Store#replaceReducer()</target>
        </trans-unit>
        <trans-unit id="013d0660eaa2690e6a9f899d36b23e021b36d850" translate="yes" xml:space="preserve">
          <source>Store#subscribe()</source>
          <target state="translated">Store#subscribe()</target>
        </trans-unit>
        <trans-unit id="71b541e49eef296d8df0cc8c719be0338a66cc03" translate="yes" xml:space="preserve">
          <source>Storing a single definition for a given item</source>
          <target state="translated">Almacenamiento de una definición única para un elemento determinado</target>
        </trans-unit>
        <trans-unit id="92eb6223892f134972ff80efa523a2000d6d1189" translate="yes" xml:space="preserve">
          <source>Structuring Reducers</source>
          <target state="translated">Estructurando los reductores</target>
        </trans-unit>
        <trans-unit id="2ff01fd753f588ce2cd880cdb10c47db54dde5a5" translate="yes" xml:space="preserve">
          <source>Subscribe to Redux state</source>
          <target state="translated">Suscríbase al estado Redux</target>
        </trans-unit>
        <trans-unit id="a54bde2350739858cdd0b5bc888eeb8620d23e6e" translate="yes" xml:space="preserve">
          <source>Such a dependency renders the component impure, makes testing the component more difficult, and makes reusing and refactoring the component unnecessarily difficult.</source>
          <target state="translated">Esa dependencia hace que el componente sea impuro,dificulta el ensayo del componente y dificulta innecesariamente su reutilización y refactorización.</target>
        </trans-unit>
        <trans-unit id="12b71c3e0fe5f7c0b8d17cc03186e281412da4a8" translate="yes" xml:space="preserve">
          <source>Summary</source>
          <target state="translated">Summary</target>
        </trans-unit>
        <trans-unit id="0fe97fb0406402fb59fa412b3bbeb9b60ac9262c" translate="yes" xml:space="preserve">
          <source>Synchronous Action Creators</source>
          <target state="translated">Creadores de Acción Síncrona</target>
        </trans-unit>
        <trans-unit id="9730d4326a7b8a0d13c2be3b7fe29b80ad152bf6" translate="yes" xml:space="preserve">
          <source>Table of Contents</source>
          <target state="translated">Índice</target>
        </trans-unit>
        <trans-unit id="15c674d7738210d0c5965059a30efc2059314bf7" translate="yes" xml:space="preserve">
          <source>Talks</source>
          <target state="translated">Talks</target>
        </trans-unit>
        <trans-unit id="2b65f913df556f349b0a7873cfdb7a6a8dd462a1" translate="yes" xml:space="preserve">
          <source>Task-Based Updates</source>
          <target state="translated">Actualizaciones basadas en tareas</target>
        </trans-unit>
        <trans-unit id="d95c7170ec15da472e1fc16a1b3628b7692d766d" translate="yes" xml:space="preserve">
          <source>Technically we could split it into two components but it might be too early at this stage. It's fine to mix presentation and logic in a component that is very small. As it grows, it will be more obvious how to split it, so we'll leave it mixed.</source>
          <target state="translated">Técnicamente podríamos dividirlo en dos componentes pero podría ser demasiado pronto en esta etapa.Está bien mezclar la presentación y la lógica en un componente que es muy pequeño.A medida que crezca,será más obvio cómo dividirlo,así que lo dejaremos mezclado.</target>
        </trans-unit>
        <trans-unit id="97405b706d923beb562a978445f95da1784f550e" translate="yes" xml:space="preserve">
          <source>Technically you could write the container components by hand using &lt;a href=&quot;../api/store#subscribe&quot;&gt;&lt;code&gt;store.subscribe()&lt;/code&gt;&lt;/a&gt;. We don't advise you to do this because React Redux makes many performance optimizations that are hard to do by hand. For this reason, rather than write container components, we will generate them using the &lt;a href=&quot;https://github.com/reactjs/react-redux/blob/master/docs/api.md#connectmapstatetoprops-mapdispatchtoprops-mergeprops-options&quot;&gt;&lt;code&gt;connect()&lt;/code&gt;&lt;/a&gt; function provided by React Redux, as you will see below.</source>
          <target state="translated">T&amp;eacute;cnicamente, podr&amp;iacute;a escribir los componentes del contenedor a mano usando &lt;a href=&quot;../api/store#subscribe&quot;&gt; &lt;code&gt;store.subscribe()&lt;/code&gt; &lt;/a&gt; . No le recomendamos que haga esto porque React Redux realiza muchas optimizaciones de rendimiento que son dif&amp;iacute;ciles de hacer a mano. Por esta raz&amp;oacute;n, en lugar de escribir componentes de contenedor, los generaremos usando la funci&amp;oacute;n &lt;a href=&quot;https://github.com/reactjs/react-redux/blob/master/docs/api.md#connectmapstatetoprops-mapdispatchtoprops-mergeprops-options&quot;&gt; &lt;code&gt;connect()&lt;/code&gt; &lt;/a&gt; proporcionada por React Redux, como ver&amp;aacute; a continuaci&amp;oacute;n.</target>
        </trans-unit>
        <trans-unit id="2c2cd2ae8ff170115855201664f8bc10a106aa1d" translate="yes" xml:space="preserve">
          <source>Testimonials</source>
          <target state="translated">Testimonials</target>
        </trans-unit>
        <trans-unit id="97cba4858411c435e526dd651157aac20178222c" translate="yes" xml:space="preserve">
          <source>Thanks</source>
          <target state="translated">Thanks</target>
        </trans-unit>
        <trans-unit id="09191f5d1ae35f788275b3791134e5c6cc9695f6" translate="yes" xml:space="preserve">
          <source>That function is fairly short, but already becoming overly complex. We're dealing with two different areas of concern (filtering vs managing our list of todos), the nesting is making the update logic harder to read, and it's not exactly clear what's going on everywhere.</source>
          <target state="translated">Esa función es bastante corta,pero ya se está volviendo demasiado compleja.Estamos tratando con dos áreas de preocupación diferentes (filtrado vs.gestión de nuestra lista de todos),el anidamiento está haciendo que la lógica de la actualización sea más difícil de leer,y no está exactamente claro lo que está pasando en todas partes.</target>
        </trans-unit>
        <trans-unit id="532f0a532fc0a678855d599bf7ec4ac18d1963d4" translate="yes" xml:space="preserve">
          <source>That reduced the duplication and made things a bit easier to read.</source>
          <target state="translated">Eso redujo la duplicación e hizo las cosas un poco más fáciles de leer.</target>
        </trans-unit>
        <trans-unit id="3d029300dc585308627967e2bccdc91655721462" translate="yes" xml:space="preserve">
          <source>That said, Redux works especially well with libraries like &lt;a href=&quot;http://facebook.github.io/react/&quot;&gt;React&lt;/a&gt; and &lt;a href=&quot;https://github.com/dekujs/deku&quot;&gt;Deku&lt;/a&gt; because they let you describe UI as a function of state, and Redux emits state updates in response to actions.</source>
          <target state="translated">Dicho esto, Redux funciona especialmente bien con bibliotecas como &lt;a href=&quot;http://facebook.github.io/react/&quot;&gt;React&lt;/a&gt; y &lt;a href=&quot;https://github.com/dekujs/deku&quot;&gt;Deku&lt;/a&gt; porque te permiten describir la interfaz de usuario como una funci&amp;oacute;n del estado, y Redux emite actualizaciones de estado en respuesta a las acciones.</target>
        </trans-unit>
        <trans-unit id="ba443c628e5456614af4a08cbb732b49948515da" translate="yes" xml:space="preserve">
          <source>That&amp;rsquo;s perfectly OK when you mutate the copy, but in the context of a reducer, if you return a copy that &lt;em&gt;hasn&amp;rsquo;t&lt;/em&gt; been mutated, Redux&amp;rsquo;s &lt;code&gt;combineReducers&lt;/code&gt; function will still think that the state needs to be updated, as you're returning an entirely different object from the state slice object that was passed in.</source>
          <target state="translated">Eso est&amp;aacute; perfectamente bien cuando mutas la copia, pero en el contexto de un reductor, si devuelves una copia que &lt;em&gt;no ha&lt;/em&gt; sido mutada, la funci&amp;oacute;n &lt;code&gt;combineReducers&lt;/code&gt; de Redux seguir&amp;aacute; pensando que el estado debe actualizarse, ya que est&amp;aacute;s devolviendo un objeto diferente del objeto de segmento de estado que se pas&amp;oacute;.</target>
        </trans-unit>
        <trans-unit id="e93f4cf2c16977aa0828b84202ee64df60519c65" translate="yes" xml:space="preserve">
          <source>That's it!</source>
          <target state="translated">¡Eso es!</target>
        </trans-unit>
        <trans-unit id="695a585b3252ff564ab700e0286c7c4e8dfbd47b" translate="yes" xml:space="preserve">
          <source>That's it! Now any actions dispatched to the store instance will flow through &lt;code&gt;logger&lt;/code&gt; and &lt;code&gt;crashReporter&lt;/code&gt;:</source>
          <target state="translated">&amp;iexcl;Eso es! Ahora, cualquier acci&amp;oacute;n enviada a la instancia de la tienda fluir&amp;aacute; a trav&amp;eacute;s del &lt;code&gt;logger&lt;/code&gt; y &lt;code&gt;crashReporter&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="62c0daeb24847642ed1a353245f2da0b5ca7faa7" translate="yes" xml:space="preserve">
          <source>That's it! Now you know what Redux is all about.</source>
          <target state="translated">¡Eso es! Ahora sabes de qué se trata Redux.</target>
        </trans-unit>
        <trans-unit id="9c632b918c1b5cb3e6e028274046e1a0dbd5fac5" translate="yes" xml:space="preserve">
          <source>The 5 Types of React Application State</source>
          <target state="translated">Los 5 tipos de estado de aplicación de la reacción</target>
        </trans-unit>
        <trans-unit id="8082f45d35153e13c48e541bd18a7f65d42e1b2f" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://github.com/tommikaikkonen/redux-orm&quot;&gt;Redux-ORM&lt;/a&gt; library provides a very useful abstraction layer for managing normalized data in a Redux store. It allows you to declare Model classes and define relations between them. It can then generate the empty &quot;tables&quot; for your data types, act as a specialized selector tool for looking up the data, and perform immutable updates on that data.</source>
          <target state="translated">La biblioteca &lt;a href=&quot;https://github.com/tommikaikkonen/redux-orm&quot;&gt;Redux-ORM&lt;/a&gt; proporciona una capa de abstracci&amp;oacute;n muy &amp;uacute;til para administrar datos normalizados en una tienda Redux. Le permite declarar clases de modelo y definir relaciones entre ellas. Luego, puede generar las &quot;tablas&quot; vac&amp;iacute;as para sus tipos de datos, actuar como una herramienta de selecci&amp;oacute;n especializada para buscar los datos y realizar actualizaciones inmutables en esos datos.</target>
        </trans-unit>
        <trans-unit id="a1c005dfb17d1e5ad9227170c4331db15898fd97" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;reducers#reducers-share-state&quot;&gt;suggested structure&lt;/a&gt; for a Redux store is to split the state object into multiple &quot;slices&quot; or &quot;domains&quot; by key, and provide a separate reducer function to manage each individual data slice.</source>
          <target state="translated">La &lt;a href=&quot;reducers#reducers-share-state&quot;&gt;estructura sugerida&lt;/a&gt; para una tienda Redux es dividir el objeto de estado en m&amp;uacute;ltiples &quot;porciones&quot; o &quot;dominios&quot; por clave, y proporcionar una funci&amp;oacute;n de reducci&amp;oacute;n separada para administrar cada porci&amp;oacute;n de datos individual.</target>
        </trans-unit>
        <trans-unit id="b9a0e951a049ef97cd89a4e10f26e1e463b189ef" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;store&quot;&gt;store&lt;/a&gt; will pass two arguments to the &lt;a href=&quot;reducers&quot;&gt;reducer&lt;/a&gt;: the current state tree and the action. For example, in the todo app, the root reducer might receive something like this:</source>
          <target state="translated">La &lt;a href=&quot;store&quot;&gt;tienda&lt;/a&gt; pasar&amp;aacute; dos argumentos al &lt;a href=&quot;reducers&quot;&gt;reductor&lt;/a&gt; : el &amp;aacute;rbol de estado actual y la acci&amp;oacute;n. Por ejemplo, en la aplicaci&amp;oacute;n Todo, el reductor ra&amp;iacute;z podr&amp;iacute;a recibir algo como esto:</target>
        </trans-unit>
        <trans-unit id="738fb16f4a3da86b179b5fd2928c5cc0c8706445" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;combineReducers&lt;/code&gt; helper function turns an object whose values are different reducing functions into a single reducing function you can pass to &lt;a href=&quot;createstore&quot;&gt;&lt;code&gt;createStore&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">La funci&amp;oacute;n auxiliar &lt;code&gt;combineReducers&lt;/code&gt; convierte un objeto cuyos valores son diferentes funciones reductoras en una &amp;uacute;nica funci&amp;oacute;n reductora que puede pasar a &lt;a href=&quot;createstore&quot;&gt; &lt;code&gt;createStore&lt;/code&gt; &lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="a78fbb758be2a28c07a8ce0abb4a2f572f7c0bf8" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;combineReducers&lt;/code&gt; utility included with Redux is very useful, but is deliberately limited to handle a single common use case: updating a state tree that is a plain Javascript object, by delegating the work of updating each slice of state to a specific slice reducer. It does &lt;em&gt;not&lt;/em&gt; handle other use cases, such as a state tree made up of Immutable.js Maps, trying to pass other portions of the state tree as an additional argument to a slice reducer, or performing &quot;ordering&quot; of slice reducer calls. It also does not care how a given slice reducer does its work.</source>
          <target state="translated">La utilidad &lt;code&gt;combineReducers&lt;/code&gt; incluida con Redux es muy &amp;uacute;til, pero est&amp;aacute; deliberadamente limitada para manejar un solo caso de uso com&amp;uacute;n: actualizar un &amp;aacute;rbol de estado que es un objeto Javascript simple, delegando el trabajo de actualizar cada segmento de estado a un reductor de segmento espec&amp;iacute;fico. No &lt;em&gt;, no&lt;/em&gt; manejar otros casos de uso, tales como un &amp;aacute;rbol del estado formado por Immutable.js Mapas, tratando de pasar otras partes del &amp;aacute;rbol del estado como un argumento adicional a un reductor de corte, o la realizaci&amp;oacute;n de &quot;ordenamiento&quot; de las llamadas rebanada reductor. Tampoco le importa c&amp;oacute;mo hace su trabajo un reductor de corte dado.</target>
        </trans-unit>
        <trans-unit id="48d1690c6f2d0e9c8b98b4f655fb56dfcdddc0d3" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;connect()&lt;/code&gt; function takes two primary arguments, both optional. The first, &lt;code&gt;mapStateToProps&lt;/code&gt;, is a function you provide to pull data from the store when it changes, and pass those values as props to your component. The second, &lt;code&gt;mapDispatchToProps&lt;/code&gt;, is a function you provide to make use of the store's &lt;code&gt;dispatch&lt;/code&gt; function, usually by creating pre-bound versions of action creators that will automatically dispatch their actions as soon as they are called.</source>
          <target state="translated">La funci&amp;oacute;n &lt;code&gt;connect()&lt;/code&gt; toma dos argumentos principales, ambos opcionales. La primera, &lt;code&gt;mapStateToProps&lt;/code&gt; , es una funci&amp;oacute;n que proporciona para extraer datos de la tienda cuando cambia y pasar esos valores como accesorios a su componente. El segundo, &lt;code&gt;mapDispatchToProps&lt;/code&gt; , es una funci&amp;oacute;n que proporciona para hacer uso de la funci&amp;oacute;n de &lt;code&gt;dispatch&lt;/code&gt; de la tienda , generalmente creando versiones predefinidas de creadores de acciones que enviar&amp;aacute;n autom&amp;aacute;ticamente sus acciones tan pronto como sean llamadas.</target>
        </trans-unit>
        <trans-unit id="a1f724426f5bed59b6fcff9c426308b18d862500" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;dispatch()&lt;/code&gt; function can be accessed directly from the store as &lt;a href=&quot;../api/store#dispatch&quot;&gt;&lt;code&gt;store.dispatch()&lt;/code&gt;&lt;/a&gt;, but more likely you'll access it using a helper like &lt;a href=&quot;http://github.com/gaearon/react-redux&quot;&gt;react-redux&lt;/a&gt;'s &lt;code&gt;connect()&lt;/code&gt;. You can use &lt;a href=&quot;../api/bindactioncreators&quot;&gt;&lt;code&gt;bindActionCreators()&lt;/code&gt;&lt;/a&gt; to automatically bind many action creators to a &lt;code&gt;dispatch()&lt;/code&gt; function.</source>
          <target state="translated">El &lt;code&gt;dispatch()&lt;/code&gt; funci&amp;oacute;n se puede acceder directamente desde la tienda como &lt;a href=&quot;../api/store#dispatch&quot;&gt; &lt;code&gt;store.dispatch()&lt;/code&gt; &lt;/a&gt; , pero lo m&amp;aacute;s probable es que con &amp;eacute;l, utilice un ayudante como &lt;a href=&quot;http://github.com/gaearon/react-redux&quot;&gt;reaccionar-redux&lt;/a&gt; 's &lt;code&gt;connect()&lt;/code&gt; . Puede usar &lt;a href=&quot;../api/bindactioncreators&quot;&gt; &lt;code&gt;bindActionCreators()&lt;/code&gt; &lt;/a&gt; para vincular autom&amp;aacute;ticamente muchos creadores de acciones a una funci&amp;oacute;n &lt;code&gt;dispatch()&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="0cc5ef634bd494a2bcb0eba3ea9aacd39c49c13b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;distinctState()&lt;/code&gt; filter serves to ignore the actions that didn't result in a state change. There are &lt;a href=&quot;https://github.com/omnidan/redux-undo#configuration&quot;&gt;many other options&lt;/a&gt; to configure your undoable reducer, like setting the action type for Undo and Redo actions.</source>
          <target state="translated">El filtro differentState &lt;code&gt;distinctState()&lt;/code&gt; sirve para ignorar las acciones que no resultaron en un cambio de estado. Hay &lt;a href=&quot;https://github.com/omnidan/redux-undo#configuration&quot;&gt;muchas otras opciones&lt;/a&gt; para configurar su reductor que se puede deshacer, como configurar el tipo de acci&amp;oacute;n para las acciones Deshacer y Rehacer.</target>
        </trans-unit>
        <trans-unit id="c7e69fb3a56cc38e559d99f56a4e63839a609eb9" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;preloadedState&lt;/code&gt; will then be available on the client side by accessing &lt;code&gt;window.__PRELOADED_STATE__&lt;/code&gt;.</source>
          <target state="translated">El estado &lt;code&gt;preloadedState&lt;/code&gt; estar&amp;aacute; disponible en el lado del cliente accediendo a la &lt;code&gt;window.__PRELOADED_STATE__&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="454736cedd126ee22b50a1ed19c0f4bfc6ed98d8" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;switch&lt;/code&gt; statement is &lt;em&gt;not&lt;/em&gt; the real boilerplate. The real boilerplate of Flux is conceptual: the need to emit an update, the need to register the Store with a Dispatcher, the need for the Store to be an object (and the complications that arise when you want a universal app).</source>
          <target state="translated">La declaraci&amp;oacute;n de &lt;code&gt;switch&lt;/code&gt; &lt;em&gt;no&lt;/em&gt; es el modelo real. La verdadera plantilla de Flux es conceptual: la necesidad de emitir una actualizaci&amp;oacute;n, la necesidad de registrar la Tienda con un Dispatcher, la necesidad de que la Tienda sea un objeto (y las complicaciones que surgen cuando se quiere una aplicaci&amp;oacute;n universal).</target>
        </trans-unit>
        <trans-unit id="5dfd028dd21b9e32d0060e5d401ade9a104ea3fe" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;switch&lt;/code&gt; statement is &lt;em&gt;not&lt;/em&gt; the real boilerplate. The real boilerplate of Flux is conceptual: the need to emit an update, the need to register the Store with a Dispatcher, the need for the Store to be an object (and the complications that arise when you want a universal app). Redux solves these problems by using pure reducers instead of event emitters.</source>
          <target state="translated">La declaraci&amp;oacute;n de &lt;code&gt;switch&lt;/code&gt; &lt;em&gt;no&lt;/em&gt; es el modelo real. La verdadera plantilla de Flux es conceptual: la necesidad de emitir una actualizaci&amp;oacute;n, la necesidad de registrar la Tienda con un Dispatcher, la necesidad de que la Tienda sea un objeto (y las complicaciones que surgen cuando se quiere una aplicaci&amp;oacute;n universal). Redux resuelve estos problemas utilizando reductores puros en lugar de emisores de eventos.</target>
        </trans-unit>
        <trans-unit id="3e916ef3dceacc26ab023c93511c4a41b777908e" translate="yes" xml:space="preserve">
          <source>The &lt;strong&gt;Store&lt;/strong&gt; is the object that brings them together. The store has the following responsibilities:</source>
          <target state="translated">La &lt;strong&gt;Tienda&lt;/strong&gt; es el objeto que los une. La tienda tiene las siguientes responsabilidades:</target>
        </trans-unit>
        <trans-unit id="0dfb0a89f92611bca64f034a94a2f962e4ebd962" translate="yes" xml:space="preserve">
          <source>The Case for Flux</source>
          <target state="translated">El caso del flujo</target>
        </trans-unit>
        <trans-unit id="2be97967a036b4704b556ca385f3d427bc4090d4" translate="yes" xml:space="preserve">
          <source>The Client Side</source>
          <target state="translated">El lado del cliente</target>
        </trans-unit>
        <trans-unit id="8d8895e86bbb9fcbb32585f22afa4849467be15b" translate="yes" xml:space="preserve">
          <source>The Final Approach</source>
          <target state="translated">El enfoque final</target>
        </trans-unit>
        <trans-unit id="2ec2a8c85e269f721fc1b0c962b89cc607899b26" translate="yes" xml:space="preserve">
          <source>The Gist</source>
          <target state="translated">Lo esencial</target>
        </trans-unit>
        <trans-unit id="de9191847383c1842749d836c1147436f76724d9" translate="yes" xml:space="preserve">
          <source>The HyperTerm terminal application</source>
          <target state="translated">La aplicación de la terminal HyperTerm</target>
        </trans-unit>
        <trans-unit id="d571c123a7cfe23b3bbf561d3957e3c00ed11319" translate="yes" xml:space="preserve">
          <source>The Little Idea of Functional Programming</source>
          <target state="translated">La pequeña idea de la programación funcional</target>
        </trans-unit>
        <trans-unit id="dfb1aa70710a03922941317888e0b7cc0c028c48" translate="yes" xml:space="preserve">
          <source>The Power of Higher-Order Reducers</source>
          <target state="translated">El poder de los reductores de orden superior</target>
        </trans-unit>
        <trans-unit id="79913e28740ae0370c83c1b4c15cfb9703563d49" translate="yes" xml:space="preserve">
          <source>The Redux API surface is tiny. Redux defines a set of contracts for you to implement (such as &lt;a href=&quot;../glossary#reducer&quot;&gt;reducers&lt;/a&gt;) and provides a few helper functions to tie these contracts together.</source>
          <target state="translated">La superficie de la API de Redux es peque&amp;ntilde;a. Redux define un conjunto de contratos para que usted los implemente (como &lt;a href=&quot;../glossary#reducer&quot;&gt;reductores&lt;/a&gt; ) y proporciona algunas funciones auxiliares para unir estos contratos.</target>
        </trans-unit>
        <trans-unit id="fb0e273e2c9f9b6f01da6a08131796d0f995d9f2" translate="yes" xml:space="preserve">
          <source>The Redux API surface is tiny. Redux defines a set of contracts for you to implement (such as &lt;a href=&quot;https://redux.js.org/understanding/thinking-in-redux/glossary#reducer&quot;&gt;reducers&lt;/a&gt;) and provides a few helper functions to tie these contracts together.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a5c1e3f8c2dd5838d397dba36b04c9a62e93369f" translate="yes" xml:space="preserve">
          <source>The Redux reducer API is &lt;code&gt;(state, action) =&amp;gt; state&lt;/code&gt;, but how you create those reducers is up to you.</source>
          <target state="translated">La API del reductor de Redux es &lt;code&gt;(state, action) =&amp;gt; state&lt;/code&gt; , pero la forma de crear esos reductores depende de usted.</target>
        </trans-unit>
        <trans-unit id="4558623f708d5c23e2aa2461d3125df5fcd82d4a" translate="yes" xml:space="preserve">
          <source>The Redux source code is written in ES2015 but we precompile both CommonJS and UMD builds to ES5 so they work in &lt;a href=&quot;http://caniuse.com/#feat=es5&quot;&gt;any modern browser&lt;/a&gt;. You don't need to use Babel or a module bundler to &lt;a href=&quot;https://github.com/reactjs/redux/blob/master/examples/counter-vanilla/index.html&quot;&gt;get started with Redux&lt;/a&gt;.</source>
          <target state="translated">El c&amp;oacute;digo fuente de Redux est&amp;aacute; escrito en ES2015, pero precompilamos las compilaciones de CommonJS y UMD en ES5 para que funcionen en &lt;a href=&quot;http://caniuse.com/#feat=es5&quot;&gt;cualquier navegador moderno&lt;/a&gt; . No necesita usar Babel o un paquete de m&amp;oacute;dulos para &lt;a href=&quot;https://github.com/reactjs/redux/blob/master/examples/counter-vanilla/index.html&quot;&gt;comenzar con Redux&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="ecc1a1a17b3429a96287b0bd69b636f5a14dc84c" translate="yes" xml:space="preserve">
          <source>The Redux-ORM library maintains an internal queue of updates to be applied. Those updates are then applied immutably, simplifying the update process.</source>
          <target state="translated">La biblioteca Redux-ORM mantiene una cola interna de actualizaciones para ser aplicadas.Esas actualizaciones se aplican entonces de forma inmutable,simplificando el proceso de actualización.</target>
        </trans-unit>
        <trans-unit id="478f0f344043467133811ff0c84e58dc576376c2" translate="yes" xml:space="preserve">
          <source>The Server Side</source>
          <target state="translated">El lado del servidor</target>
        </trans-unit>
        <trans-unit id="6a5fcafa1bd7939d8a0603992e21bd96c7692240" translate="yes" xml:space="preserve">
          <source>The Tao of Redux, Part 2 - Practice and Philosophy. Thick and thin reducers.</source>
          <target state="translated">El Tao de Redux,Parte 2-Práctica y Filosofía.Reductores gruesos y finos.</target>
        </trans-unit>
        <trans-unit id="9b46572db1b8dfcd7649cde9229d79fb8affd4f2" translate="yes" xml:space="preserve">
          <source>The actual list of todos.</source>
          <target state="translated">La lista actual de todos.</target>
        </trans-unit>
        <trans-unit id="5aef95989e50df9f820f46a8576b4cdb580a5dd4" translate="yes" xml:space="preserve">
          <source>The advantage of using the object spread syntax becomes more apparent when you're composing complex objects. Below &lt;code&gt;getAddedIds&lt;/code&gt; maps an array of &lt;code&gt;id&lt;/code&gt; values to an array of objects with values returned from &lt;code&gt;getProduct&lt;/code&gt; and &lt;code&gt;getQuantity&lt;/code&gt;.</source>
          <target state="translated">La ventaja de utilizar la sintaxis de extensi&amp;oacute;n de objetos se hace m&amp;aacute;s evidente cuando se componen objetos complejos. A continuaci&amp;oacute;n, &lt;code&gt;getAddedIds&lt;/code&gt; asigna una matriz de valores de &lt;code&gt;id&lt;/code&gt; entificaci&amp;oacute;n a una matriz de objetos con valores devueltos por &lt;code&gt;getProduct&lt;/code&gt; y &lt;code&gt;getQuantity&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="1e2c53398d8416bc804266234b36f940f2c701d5" translate="yes" xml:space="preserve">
          <source>The array spread operator in ES6, and the similar object spread operator that is proposed for a future version of JavaScript</source>
          <target state="translated">El operador de dispersión de arreglos en ES6,y el operador de dispersión de objetos similares que se propone para una futura versión de JavaScript</target>
        </trans-unit>
        <trans-unit id="e3bc116f9668143f3ac5c44b58f1126b54a0f5a3" translate="yes" xml:space="preserve">
          <source>The articles listed in &lt;a href=&quot;prerequisiteconcepts#immutable-data-management&quot;&gt;Prerequisite Concepts#Immutable Data Management&lt;/a&gt; give a number of good examples for how to perform basic update operations immutably, such as updating a field in an object or adding an item to the end of an array. However, reducers will often need to use those basic operations in combination to perform more complicated tasks. Here are some examples for some of the more common tasks you might have to implement.</source>
          <target state="translated">Los art&amp;iacute;culos enumerados en &lt;a href=&quot;prerequisiteconcepts#immutable-data-management&quot;&gt;Conceptos de requisitos previos # Gesti&amp;oacute;n de datos inmutables&lt;/a&gt; dan una serie de buenos ejemplos de c&amp;oacute;mo realizar operaciones de actualizaci&amp;oacute;n b&amp;aacute;sicas de forma inmutable, como actualizar un campo en un objeto o agregar un elemento al final de una matriz. Sin embargo, los reductores a menudo necesitar&amp;aacute;n usar esas operaciones b&amp;aacute;sicas en combinaci&amp;oacute;n para realizar tareas m&amp;aacute;s complicadas. A continuaci&amp;oacute;n, se muestran algunos ejemplos de algunas de las tareas m&amp;aacute;s comunes que podr&amp;iacute;a tener que implementar.</target>
        </trans-unit>
        <trans-unit id="6c3850419731a888edfb498c6aaa6ebf75a3a7c1" translate="yes" xml:space="preserve">
          <source>The base dispatch function &lt;em&gt;always&lt;/em&gt; synchronously sends an action to the store's reducer, along with the previous state returned by the store, to calculate a new state. It expects actions to be plain objects ready to be consumed by the reducer.</source>
          <target state="translated">La funci&amp;oacute;n de despacho base &lt;em&gt;siempre&lt;/em&gt; env&amp;iacute;a una acci&amp;oacute;n sincr&amp;oacute;nicamente al reductor de la tienda, junto con el estado anterior devuelto por la tienda, para calcular un nuevo estado. Espera que las acciones sean objetos simples listos para ser consumidos por el reductor.</target>
        </trans-unit>
        <trans-unit id="b132326ede652b0ef3bcc14eb28b705253858136" translate="yes" xml:space="preserve">
          <source>The basic concepts of normalizing data are:</source>
          <target state="translated">Los conceptos básicos de la normalización de los datos son:</target>
        </trans-unit>
        <trans-unit id="4e52a5e9fc4db9bd1340d6ab9bc0823d57fe77ab" translate="yes" xml:space="preserve">
          <source>The client side is very straightforward. All we need to do is grab the initial state from &lt;code&gt;window.__PRELOADED_STATE__&lt;/code&gt;, and pass it to our &lt;a href=&quot;../api/createstore&quot;&gt;&lt;code&gt;createStore()&lt;/code&gt;&lt;/a&gt; function as the initial state.</source>
          <target state="translated">El lado del cliente es muy sencillo. Todo lo que tenemos que hacer es tomar el estado inicial de la &lt;code&gt;window.__PRELOADED_STATE__&lt;/code&gt; y pasarlo a nuestra funci&amp;oacute;n &lt;a href=&quot;../api/createstore&quot;&gt; &lt;code&gt;createStore()&lt;/code&gt; &lt;/a&gt; como estado inicial.</target>
        </trans-unit>
        <trans-unit id="cf2d52f1f096bfa92fc770873878e027f7266621" translate="yes" xml:space="preserve">
          <source>The code reads from the Express &lt;code&gt;Request&lt;/code&gt; object passed into our server middleware. The parameter is parsed into a number and then set in the initial state. If you visit &lt;a href=&quot;http://localhost:3000/?counter=100&quot;&gt;http://localhost:3000/?counter=100&lt;/a&gt; in your browser, you'll see the counter starts at 100. In the rendered HTML, you'll see the counter output as 100 and the &lt;code&gt;__PRELOADED_STATE__&lt;/code&gt; variable has the counter set in it.</source>
          <target state="translated">El c&amp;oacute;digo se lee desde el objeto Express &lt;code&gt;Request&lt;/code&gt; que se pasa al middleware de nuestro servidor. El par&amp;aacute;metro se analiza en un n&amp;uacute;mero y luego se establece en el estado inicial. Si visita &lt;a href=&quot;http://localhost:3000/?counter=100&quot;&gt;http: // localhost: 3000 /? Counter = 100&lt;/a&gt; en su navegador, ver&amp;aacute; que el contador comienza en 100. En el HTML renderizado, ver&amp;aacute; la salida del contador como 100 y la variable &lt;code&gt;__PRELOADED_STATE__&lt;/code&gt; tiene el contador en &amp;eacute;l.</target>
        </trans-unit>
        <trans-unit id="4826495f8f747fbdf0f71e9d47d5be2bf0b9040a" translate="yes" xml:space="preserve">
          <source>The common question, then, is &quot;How can I use &lt;code&gt;combineReducers&lt;/code&gt; to handle these other use cases?&quot;. The answer to that is simply: &quot;you don't - you probably need to use something else&quot;. &lt;strong&gt;Once you go past the core use case for &lt;code&gt;combineReducers&lt;/code&gt;, it's time to use more &quot;custom&quot; reducer logic&lt;/strong&gt;, whether it be specific logic for a one-off use case, or a reusable function that could be widely shared. Here's some suggestions for dealing with a couple of these typical use cases, but feel free to come up with your own approaches.</source>
          <target state="translated">La pregunta com&amp;uacute;n, entonces, es &quot;&amp;iquest;C&amp;oacute;mo puedo usar &lt;code&gt;combineReducers&lt;/code&gt; para manejar estos otros casos de uso?&quot;. La respuesta a eso es simplemente: &quot;no es as&amp;iacute;, probablemente necesite usar otra cosa&quot;. &lt;strong&gt;Una vez que pase el caso de uso principal de &lt;code&gt;combineReducers&lt;/code&gt; , es hora de usar m&amp;aacute;s l&amp;oacute;gica de reductor &quot;personalizada&quot;&lt;/strong&gt; , ya sea l&amp;oacute;gica espec&amp;iacute;fica para un caso de uso &amp;uacute;nico o una funci&amp;oacute;n reutilizable que podr&amp;iacute;a compartirse ampliamente. Aqu&amp;iacute; hay algunas sugerencias para lidiar con un par de estos casos de uso t&amp;iacute;picos, pero no dude en proponer sus propios enfoques.</target>
        </trans-unit>
        <trans-unit id="1c5f1c9e6c8f5bdeafe0125ff96ed215a380912f" translate="yes" xml:space="preserve">
          <source>The current suggested best practice is to categorize your components as &amp;ldquo;presentational&amp;rdquo; or &amp;ldquo;container&amp;rdquo; components, and extract a connected container component wherever it makes sense:</source>
          <target state="translated">La mejor pr&amp;aacute;ctica sugerida actualmente es categorizar sus componentes como componentes de &quot;presentaci&amp;oacute;n&quot; o &quot;contenedor&quot; y extraer un componente de contenedor conectado donde tenga sentido:</target>
        </trans-unit>
        <trans-unit id="89bd096d9d762c82ef72e28c42515ef633264780" translate="yes" xml:space="preserve">
          <source>The currently selected visibility filter;</source>
          <target state="translated">El filtro de visibilidad actualmente seleccionado;</target>
        </trans-unit>
        <trans-unit id="edf1af83e4170e21d0f26a22f25cf9daa7c8184e" translate="yes" xml:space="preserve">
          <source>The data lifecycle in any Redux app follows these 4 steps:</source>
          <target state="translated">El ciclo de vida de los datos en cualquier aplicación Redux sigue estos 4 pasos:</target>
        </trans-unit>
        <trans-unit id="62b467d39a23989592c09583e8808c4f173188dd" translate="yes" xml:space="preserve">
          <source>The easiest way to do this is to pass through some callback back to your synchronous code. In this case, that will be a function that will reference the response object and send back our rendered HTML to the client. Don't worry, it's not as hard as it may sound.</source>
          <target state="translated">La forma más fácil de hacerlo es pasar a través de alguna llamada de vuelta a su código síncrono.En este caso,esa será una función que hará referencia al objeto de respuesta y devolverá nuestro HTML renderizado al cliente.No te preocupes,no es tan difícil como puede sonar.</target>
        </trans-unit>
        <trans-unit id="e4ce871b16323b1c0bb886336edf356b3878eb0d" translate="yes" xml:space="preserve">
          <source>The example is a bit long, because it's showing how all the different slice reducers and case reducers fit together. Note the delegation involved here. The &lt;code&gt;postsById&lt;/code&gt; slice reducer delegates the work for this case to &lt;code&gt;addComment&lt;/code&gt;, which inserts the new Comment's ID into the correct Post item. Meanwhile, both the &lt;code&gt;commentsById&lt;/code&gt; and &lt;code&gt;allComments&lt;/code&gt; slice reducers have their own case reducers, which update the Comments lookup table and list of all Comment IDs appropriately.</source>
          <target state="translated">El ejemplo es un poco largo, porque muestra c&amp;oacute;mo encajan todos los diferentes reductores de rebanadas y reductores de caja. Tenga en cuenta la delegaci&amp;oacute;n involucrada aqu&amp;iacute;. El reductor de cortes &lt;code&gt;postsById&lt;/code&gt; delega el trabajo para este caso en &lt;code&gt;addComment&lt;/code&gt; , que inserta el nuevo ID del comentario en el elemento de publicaci&amp;oacute;n correcto. Mientras tanto, los reductores de rebanadas &lt;code&gt;commentsById&lt;/code&gt; y &lt;code&gt;allComments&lt;/code&gt; tienen sus propios reductores de casos, que actualizan la tabla de b&amp;uacute;squeda de comentarios y la lista de todos los ID de comentarios de forma adecuada.</target>
        </trans-unit>
        <trans-unit id="779dfe0ad26c982a1de5c2e0e8649831bf366e55" translate="yes" xml:space="preserve">
          <source>The examples in this section require React Redux v4.3.0 or greater</source>
          <target state="translated">Los ejemplos de esta sección requieren React Redux v4.3.0 o superior</target>
        </trans-unit>
        <trans-unit id="e75214fea4fb1a9ffce832f2c35732c7381684ab" translate="yes" xml:space="preserve">
          <source>The examples use React, but you should still find them useful if you use something else.</source>
          <target state="translated">Los ejemplos utilizan Reaccionar,pero aún así deberían ser útiles si se utiliza otra cosa.</target>
        </trans-unit>
        <trans-unit id="5ea635408bd084da5b7ab91bad09e779b2cf750c" translate="yes" xml:space="preserve">
          <source>The extra re-renders could be resolved by saving the array of objects into the state using a reducer, caching the mapped array using &lt;a href=&quot;https://github.com/reactjs/reselect&quot;&gt;Reselect&lt;/a&gt;, or implementing &lt;code&gt;shouldComponentUpdate&lt;/code&gt; in the component by hand and doing a more in-depth props comparison using a function such as &lt;code&gt;_.isEqual&lt;/code&gt;. Be careful to not make your custom &lt;code&gt;shouldComponentUpdate()&lt;/code&gt; more expensive than the rendering itself! Always use a profiler to check your assumptions about performance.</source>
          <target state="translated">Las re-renderizaciones adicionales podr&amp;iacute;an resolverse guardando la matriz de objetos en el estado usando un reductor, almacenando en cach&amp;eacute; la matriz mapeada usando &lt;a href=&quot;https://github.com/reactjs/reselect&quot;&gt;Reselect&lt;/a&gt; , o implementando &lt;code&gt;shouldComponentUpdate&lt;/code&gt; en el componente a mano y haciendo una comparaci&amp;oacute;n de accesorios m&amp;aacute;s detallada usando una funci&amp;oacute;n como &lt;code&gt;_.isEqual&lt;/code&gt; . &amp;iexcl;Tenga cuidado de no hacer que su &lt;code&gt;shouldComponentUpdate()&lt;/code&gt; personalizado sea m&amp;aacute;s caro que el propio renderizado! Utilice siempre un generador de perfiles para comprobar sus suposiciones sobre el rendimiento.</target>
        </trans-unit>
        <trans-unit id="0da3ed8f89bdb310cc912494206553bc1426d386" translate="yes" xml:space="preserve">
          <source>The fact that we hide it inside the library doesn't alter this fact.</source>
          <target state="translated">El hecho de que lo escondamos dentro de la biblioteca no altera este hecho.</target>
        </trans-unit>
        <trans-unit id="1de0392a7f8331d8c01e93cc6658a1acbeb1d36b" translate="yes" xml:space="preserve">
          <source>The final step on the server side is to inject our initial component HTML and initial state into a template to be rendered on the client side. To pass along the state, we add a &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; tag that will attach &lt;code&gt;preloadedState&lt;/code&gt; to &lt;code&gt;window.__PRELOADED_STATE__&lt;/code&gt;.</source>
          <target state="translated">El paso final en el lado del servidor es inyectar nuestro componente HTML inicial y el estado inicial en una plantilla para ser renderizada en el lado del cliente. Para transmitir el estado, agregamos una etiqueta &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; que adjuntar&amp;aacute; &lt;code&gt;preloadedState&lt;/code&gt; a la &lt;code&gt;window.__PRELOADED_STATE__&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="dba272babae41e9f815da394011efbc9abd976d3" translate="yes" xml:space="preserve">
          <source>The first thing that we need to do on every request is create a new Redux store instance. The only purpose of this store instance is to provide the initial state of our application.</source>
          <target state="translated">Lo primero que tenemos que hacer en cada solicitud es crear una nueva instancia de la tienda Redux.El único propósito de esta instancia de almacenamiento es proporcionar el estado inicial de nuestra aplicación.</target>
        </trans-unit>
        <trans-unit id="437ff180e90b483ac82f3a0b997133834d4da2f7" translate="yes" xml:space="preserve">
          <source>The first time the reducer is called, the &lt;code&gt;state&lt;/code&gt; value will be &lt;code&gt;undefined&lt;/code&gt;. The reducer needs to handle this case by supplying a default state value before handling the incoming action.</source>
          <target state="translated">La primera vez que se llama al reductor, el valor del &lt;code&gt;state&lt;/code&gt; no estar&amp;aacute; &lt;code&gt;undefined&lt;/code&gt; . El reductor necesita manejar este caso proporcionando un valor de estado predeterminado antes de manejar la acci&amp;oacute;n entrante.</target>
        </trans-unit>
        <trans-unit id="3a95e0198d37edafccaeec5cfcad513398e60156" translate="yes" xml:space="preserve">
          <source>The fix is to call &lt;a href=&quot;api/store#dispatch&quot;&gt;&lt;code&gt;dispatch()&lt;/code&gt;&lt;/a&gt; method on the &lt;a href=&quot;api/store&quot;&gt;store&lt;/a&gt; instance:</source>
          <target state="translated">La soluci&amp;oacute;n es llamar al m&amp;eacute;todo &lt;a href=&quot;api/store#dispatch&quot;&gt; &lt;code&gt;dispatch()&lt;/code&gt; &lt;/a&gt; en la instancia de la &lt;a href=&quot;api/store&quot;&gt;tienda&lt;/a&gt; :</target>
        </trans-unit>
        <trans-unit id="9cbc5ae45e711e0e52c905a6773d8d1b1935dc93" translate="yes" xml:space="preserve">
          <source>The fixed code looks like this:</source>
          <target state="translated">El código fijo se ve así:</target>
        </trans-unit>
        <trans-unit id="023789ed8635b6b65d05d6a4ac33fe464c661c24" translate="yes" xml:space="preserve">
          <source>The following is the outline for what our server side is going to look like. We are going to set up an &lt;a href=&quot;http://expressjs.com/guide/using-middleware.html&quot;&gt;Express middleware&lt;/a&gt; using &lt;a href=&quot;http://expressjs.com/api.html#app.use&quot;&gt;app.use&lt;/a&gt; to handle all requests that come in to our server. If you're unfamiliar with Express or middleware, just know that our handleRender function will be called every time the server receives a request.</source>
          <target state="translated">El siguiente es el esquema de c&amp;oacute;mo se ver&amp;aacute; nuestro lado del servidor. Vamos a configurar un &lt;a href=&quot;http://expressjs.com/guide/using-middleware.html&quot;&gt;middleware Express&lt;/a&gt; usando &lt;a href=&quot;http://expressjs.com/api.html#app.use&quot;&gt;app.use&lt;/a&gt; para manejar todas las solicitudes que ingresan a nuestro servidor. Si no est&amp;aacute; familiarizado con Express o middleware, solo sepa que se llamar&amp;aacute; a nuestra funci&amp;oacute;n handleRender cada vez que el servidor reciba una solicitud.</target>
        </trans-unit>
        <trans-unit id="4316b779bf18bece5b0ccea09756426fce5c6d7c" translate="yes" xml:space="preserve">
          <source>The implementation of &lt;a href=&quot;../api/applymiddleware&quot;&gt;&lt;code&gt;applyMiddleware()&lt;/code&gt;&lt;/a&gt; that ships with Redux is similar, but &lt;strong&gt;different in three important aspects&lt;/strong&gt;:</source>
          <target state="translated">La implementaci&amp;oacute;n de &lt;a href=&quot;../api/applymiddleware&quot;&gt; &lt;code&gt;applyMiddleware()&lt;/code&gt; &lt;/a&gt; que se incluye con Redux es similar, pero &lt;strong&gt;diferente en tres aspectos importantes&lt;/strong&gt; :</target>
        </trans-unit>
        <trans-unit id="a9eb650209f72859301cebd361ec76ff3db6f6bc" translate="yes" xml:space="preserve">
          <source>The initial state is zero. Why? Because the second argument to &lt;code&gt;createStore&lt;/code&gt; was &lt;code&gt;undefined&lt;/code&gt;. This is the &lt;code&gt;state&lt;/code&gt; passed to your reducer the first time. When Redux initializes it dispatches a &quot;dummy&quot; action to fill the state. So your &lt;code&gt;counter&lt;/code&gt; reducer was called with &lt;code&gt;state&lt;/code&gt; equal to &lt;code&gt;undefined&lt;/code&gt;. &lt;strong&gt;This is exactly the case that &quot;activates&quot; the default argument.&lt;/strong&gt; Therefore, &lt;code&gt;state&lt;/code&gt; is now &lt;code&gt;0&lt;/code&gt; as per the default &lt;code&gt;state&lt;/code&gt; value (&lt;code&gt;state = 0&lt;/code&gt;). This state (&lt;code&gt;0&lt;/code&gt;) will be returned.</source>
          <target state="translated">El estado inicial es cero. &amp;iquest;Por qu&amp;eacute;? Porque el segundo argumento para &lt;code&gt;createStore&lt;/code&gt; &lt;code&gt;undefined&lt;/code&gt; estaba definido . Este es el &lt;code&gt;state&lt;/code&gt; pas&amp;oacute; a su reductor la primera vez. Cuando Redux se inicializa, env&amp;iacute;a una acci&amp;oacute;n &quot;ficticia&quot; para completar el estado. Entonces, su &lt;code&gt;counter&lt;/code&gt; reductor se llam&amp;oacute; con un &lt;code&gt;state&lt;/code&gt; igual a &lt;code&gt;undefined&lt;/code&gt; . &lt;strong&gt;Este es exactamente el caso que &quot;activa&quot; el argumento predeterminado.&lt;/strong&gt; Por lo tanto, el &lt;code&gt;state&lt;/code&gt; ahora es &lt;code&gt;0&lt;/code&gt; seg&amp;uacute;n el valor de &lt;code&gt;state&lt;/code&gt; predeterminado ( &lt;code&gt;state = 0&lt;/code&gt; ). Se devolver&amp;aacute; este estado ( &lt;code&gt;0&lt;/code&gt; ).</target>
        </trans-unit>
        <trans-unit id="f1870e4c91c65906a132e8ab3a09c561bb5d7c0e" translate="yes" xml:space="preserve">
          <source>The interesting part here is that it does not matter whether we want to keep an undo stack of numbers, strings, arrays, or objects. The structure will always be the same:</source>
          <target state="translated">Lo interesante aquí es que no importa si queremos mantener una pila de números,cuerdas,matrices u objetos sin resolver.La estructura siempre será la misma:</target>
        </trans-unit>
        <trans-unit id="aced1e5fb79ae68b6eba1085040abdf61e8e93fd" translate="yes" xml:space="preserve">
          <source>The invoke function runs our middleware in the same way Redux does.</source>
          <target state="translated">La función de invocar ejecuta nuestro middleware de la misma manera que lo hace Redux.</target>
        </trans-unit>
        <trans-unit id="d2e2db63b16b97293e72fee9e740a81bd129896c" translate="yes" xml:space="preserve">
          <source>The key step in server side rendering is to render the initial HTML of our component &lt;em&gt;&lt;strong&gt;before&lt;/strong&gt;&lt;/em&gt; we send it to the client side. To do this, we use &lt;a href=&quot;https://facebook.github.io/react/docs/react-dom-server.html#rendertostring&quot;&gt;ReactDOMServer.renderToString()&lt;/a&gt;.</source>
          <target state="translated">El paso clave en la representaci&amp;oacute;n del lado del servidor es representar el HTML inicial de nuestro componente &lt;em&gt;&lt;strong&gt;antes de&lt;/strong&gt;&lt;/em&gt; enviarlo al lado del cliente. Para hacer esto, usamos &lt;a href=&quot;https://facebook.github.io/react/docs/react-dom-server.html#rendertostring&quot;&gt;ReactDOMServer.renderToString ()&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="ebf3991556cfed7c3eed26e9a4ebee92564c0c2e" translate="yes" xml:space="preserve">
          <source>The key to updating nested data is &lt;strong&gt;that &lt;em&gt;every&lt;/em&gt; level of nesting must be copied and updated appropriately&lt;/strong&gt;. This is often a difficult concept for those learning Redux, and there are some specific problems that frequently occur when trying to update nested objects. These lead to accidental direct mutation, and should be avoided.</source>
          <target state="translated">La clave para actualizar los datos anidados es &lt;strong&gt;que &lt;em&gt;cada&lt;/em&gt; nivel de anidamiento debe copiarse y actualizarse adecuadamente&lt;/strong&gt; . Este es a menudo un concepto dif&amp;iacute;cil para aquellos que est&amp;aacute;n aprendiendo Redux, y existen algunos problemas espec&amp;iacute;ficos que ocurren con frecuencia al intentar actualizar objetos anidados. &amp;Eacute;stos conducen a una mutaci&amp;oacute;n directa accidental y deben evitarse.</target>
        </trans-unit>
        <trans-unit id="a1f13b41716a56d3a6b663d8adeef0fbfebcd6da" translate="yes" xml:space="preserve">
          <source>The list of action types that were added, removed, and changed in a Pull Request helps everyone on the team keep track of scope and implementation of new features.</source>
          <target state="translated">La lista de tipos de acción que se agregaron,eliminaron y cambiaron en una Solicitud de extracción ayuda a todos los miembros del equipo a llevar un registro del alcance y la implementación de las nuevas características.</target>
        </trans-unit>
        <trans-unit id="7a909efdb80760679c43fc5e7380d281a27aa83b" translate="yes" xml:space="preserve">
          <source>The listener should not expect to see all state changes, as the state might have been updated multiple times during a nested &lt;a href=&quot;#dispatch&quot;&gt;&lt;code&gt;dispatch()&lt;/code&gt;&lt;/a&gt; before the listener is called. It is, however, guaranteed that all subscribers registered before the &lt;a href=&quot;#dispatch&quot;&gt;&lt;code&gt;dispatch()&lt;/code&gt;&lt;/a&gt; started will be called with the latest state by the time it exits.</source>
          <target state="translated">El oyente no debe esperar ver todos los cambios de estado, ya que el estado podr&amp;iacute;a haberse actualizado varias veces durante un &lt;a href=&quot;#dispatch&quot;&gt; &lt;code&gt;dispatch()&lt;/code&gt; &lt;/a&gt; anidado () antes de que se llame al oyente. Sin embargo, est&amp;aacute; garantizado que todos los suscriptores registrados antes de que se inicie &lt;a href=&quot;#dispatch&quot;&gt; &lt;code&gt;dispatch()&lt;/code&gt; &lt;/a&gt; ser&amp;aacute;n llamados con el &amp;uacute;ltimo estado para cuando salga.</target>
        </trans-unit>
        <trans-unit id="c8d57f0dc666d6c5ce99071844c64516efa85351" translate="yes" xml:space="preserve">
          <source>The listener should not expect to see all state changes, as the state might have been updated multiple times during a nested &lt;a href=&quot;#dispatchaction&quot;&gt;&lt;code&gt;dispatch()&lt;/code&gt;&lt;/a&gt; before the listener is called. It is, however, guaranteed that all subscribers registered before the &lt;a href=&quot;#dispatchaction&quot;&gt;&lt;code&gt;dispatch()&lt;/code&gt;&lt;/a&gt; started will be called with the latest state by the time it exits.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dfc2ce49bb9fba9f11cb4c299cb527330ef38e0b" translate="yes" xml:space="preserve">
          <source>The listener should only call &lt;a href=&quot;#dispatch&quot;&gt;&lt;code&gt;dispatch()&lt;/code&gt;&lt;/a&gt; either in response to user actions or under specific conditions (e. g. dispatching an action when the store has a specific field). Calling &lt;a href=&quot;#dispatch&quot;&gt;&lt;code&gt;dispatch()&lt;/code&gt;&lt;/a&gt; without any conditions is technically possible, however it leads to an infinite loop as every &lt;a href=&quot;#dispatch&quot;&gt;&lt;code&gt;dispatch()&lt;/code&gt;&lt;/a&gt; call usually triggers the listener again.</source>
          <target state="translated">El oyente solo debe llamar a &lt;a href=&quot;#dispatch&quot;&gt; &lt;code&gt;dispatch()&lt;/code&gt; &lt;/a&gt; ya sea en respuesta a las acciones del usuario o bajo condiciones espec&amp;iacute;ficas (por ejemplo, enviando una acci&amp;oacute;n cuando la tienda tiene un campo espec&amp;iacute;fico). Llamar a &lt;a href=&quot;#dispatch&quot;&gt; &lt;code&gt;dispatch()&lt;/code&gt; &lt;/a&gt; sin ninguna condici&amp;oacute;n es t&amp;eacute;cnicamente posible, sin embargo, conduce a un bucle infinito ya que cada llamada de &lt;a href=&quot;#dispatch&quot;&gt; &lt;code&gt;dispatch()&lt;/code&gt; &lt;/a&gt; generalmente activa al oyente nuevamente.</target>
        </trans-unit>
        <trans-unit id="488cee853ee8f2ee1b7b34adadde5165f8f7a005" translate="yes" xml:space="preserve">
          <source>The listener should only call &lt;a href=&quot;#dispatchaction&quot;&gt;&lt;code&gt;dispatch()&lt;/code&gt;&lt;/a&gt; either in response to user actions or under specific conditions (e. g. dispatching an action when the store has a specific field). Calling &lt;a href=&quot;#dispatchaction&quot;&gt;&lt;code&gt;dispatch()&lt;/code&gt;&lt;/a&gt; without any conditions is technically possible, however it leads to an infinite loop as every &lt;a href=&quot;#dispatchaction&quot;&gt;&lt;code&gt;dispatch()&lt;/code&gt;&lt;/a&gt; call usually triggers the listener again.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f1a0911c22c72f7c2742cacaf4dc763e35a23b3f" translate="yes" xml:space="preserve">
          <source>The logic for retrieving or updating a given item is now fairly simple and consistent. Given an item's type and its ID, we can directly look it up in a couple simple steps, without having to dig through other objects to find it.</source>
          <target state="translated">La lógica para recuperar o actualizar un elemento dado es ahora bastante simple y consistente.Dado el tipo de un artículo y su identificación,podemos buscarlo directamente en un par de pasos sencillos,sin tener que escarbar en otros objetos para encontrarlo.</target>
        </trans-unit>
        <trans-unit id="ea3c8144b116952a7e48b511c8b6726d8e7f3ef8" translate="yes" xml:space="preserve">
          <source>The middleware that interprets such actions could look like this:</source>
          <target state="translated">El middleware que interpreta tales acciones podría verse así:</target>
        </trans-unit>
        <trans-unit id="d682e36630596f87baf92e1be74cab220ee7bbc6" translate="yes" xml:space="preserve">
          <source>The most common issue with server side rendering is dealing with state that comes in asynchronously. Rendering on the server is synchronous by nature, so it's necessary to map any asynchronous fetches into a synchronous operation.</source>
          <target state="translated">El problema más común con la representación del lado del servidor es tratar con el estado que entra asincrónicamente.El renderizado en el servidor es síncrono por naturaleza,por lo que es necesario mapear cualquier recuperación asíncrona en una operación síncrona.</target>
        </trans-unit>
        <trans-unit id="8bd487c6f173028a7534d7c66f721bcbc1a7152f" translate="yes" xml:space="preserve">
          <source>The most common state shape for a Redux app is a plain Javascript object containing &quot;slices&quot; of domain-specific data at each top-level key. Similarly, the most common approach to writing reducer logic for that state shape is to have &quot;slice reducer&quot; functions, each with the same &lt;code&gt;(state, action)&lt;/code&gt; signature, and each responsible for managing all updates to that specific slice of state. Multiple slice reducers can respond to the same action, independently update their own slice as needed, and the updated slices are combined into the new state object.</source>
          <target state="translated">La forma de estado m&amp;aacute;s com&amp;uacute;n para una aplicaci&amp;oacute;n Redux es un objeto Javascript simple que contiene &quot;porciones&quot; de datos espec&amp;iacute;ficos del dominio en cada clave de nivel superior. De manera similar, el enfoque m&amp;aacute;s com&amp;uacute;n para escribir la l&amp;oacute;gica del reductor para esa forma de estado es tener funciones de &quot;reductor de corte&quot;, cada una con la misma firma &lt;code&gt;(state, action)&lt;/code&gt; , y cada una responsable de administrar todas las actualizaciones de ese sector espec&amp;iacute;fico de estado. Varios reductores de sectores pueden responder a la misma acci&amp;oacute;n, actualizar de forma independiente su propio sector seg&amp;uacute;n sea necesario, y los sectores actualizados se combinan en el nuevo objeto de estado.</target>
        </trans-unit>
        <trans-unit id="93bd18e049d16d78b6a4f2d8ab6b83aaccc924a2" translate="yes" xml:space="preserve">
          <source>The most common use case for middleware is to support asynchronous actions without much boilerplate code or a dependency on a library like &lt;a href=&quot;https://github.com/Reactive-Extensions/RxJS&quot;&gt;Rx&lt;/a&gt;. It does so by letting you dispatch &lt;a href=&quot;../glossary#async-action&quot;&gt;async actions&lt;/a&gt; in addition to normal actions.</source>
          <target state="translated">El caso de uso m&amp;aacute;s com&amp;uacute;n del middleware es admitir acciones asincr&amp;oacute;nicas sin mucho c&amp;oacute;digo repetitivo o una dependencia de una biblioteca como &lt;a href=&quot;https://github.com/Reactive-Extensions/RxJS&quot;&gt;Rx&lt;/a&gt; . Lo hace permiti&amp;eacute;ndole enviar &lt;a href=&quot;../glossary#async-action&quot;&gt;acciones as&amp;iacute;ncronas&lt;/a&gt; adem&amp;aacute;s de las acciones normales.</target>
        </trans-unit>
        <trans-unit id="eabd6d6748896987c05d969d3d0db08e988f3bce" translate="yes" xml:space="preserve">
          <source>The most common use case for middleware is to support asynchronous actions without much boilerplate code or a dependency on a library like &lt;a href=&quot;https://github.com/Reactive-Extensions/RxJS&quot;&gt;Rx&lt;/a&gt;. It does so by letting you dispatch &lt;a href=&quot;https://redux.js.org/understanding/thinking-in-redux/glossary#async-action&quot;&gt;async actions&lt;/a&gt; in addition to normal actions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5ca5c9f8c9076592f848e34b0f4212ad6547c204" translate="yes" xml:space="preserve">
          <source>The most common use case for server-side rendering is to handle the &lt;em&gt;initial render&lt;/em&gt; when a user (or search engine crawler) first requests our app. When the server receives the request, it renders the required component(s) into an HTML string, and then sends it as a response to the client. From that point on, the client takes over rendering duties.</source>
          <target state="translated">El caso de uso m&amp;aacute;s com&amp;uacute;n para la representaci&amp;oacute;n del lado del servidor es manejar la &lt;em&gt;representaci&amp;oacute;n inicial&lt;/em&gt; cuando un usuario (o un rastreador de motor de b&amp;uacute;squeda) solicita nuestra aplicaci&amp;oacute;n por primera vez. Cuando el servidor recibe la solicitud, procesa los componentes requeridos en una cadena HTML y luego la env&amp;iacute;a como respuesta al cliente. A partir de ese momento, el cliente asume las funciones de prestaci&amp;oacute;n.</target>
        </trans-unit>
        <trans-unit id="24ae76922e0a16060847d467d7cc8498c8e8fd41" translate="yes" xml:space="preserve">
          <source>The most na&amp;iuml;ve solution is just to log the action and the next state yourself every time you call &lt;a href=&quot;../api/store#dispatch&quot;&gt;&lt;code&gt;store.dispatch(action)&lt;/code&gt;&lt;/a&gt;. It's not really a solution, but just a first step towards understanding the problem.</source>
          <target state="translated">La soluci&amp;oacute;n m&amp;aacute;s ingenua es simplemente registrar la acci&amp;oacute;n y el siguiente estado usted mismo cada vez que llame a &lt;a href=&quot;../api/store#dispatch&quot;&gt; &lt;code&gt;store.dispatch(action)&lt;/code&gt; &lt;/a&gt; . No es realmente una soluci&amp;oacute;n, sino solo un primer paso hacia la comprensi&amp;oacute;n del problema.</target>
        </trans-unit>
        <trans-unit id="c28210a81ca17cd5297b553285382ceab58a3637" translate="yes" xml:space="preserve">
          <source>The new Counter Vanilla example is aimed to dispel the myth that Redux requires Webpack, React, hot reloading, sagas, action creators, constants, Babel, npm, CSS modules, decorators, fluent Latin, an Egghead subscription, a PhD, or an Exceeds Expectations O.W.L. level.</source>
          <target state="translated">El nuevo ejemplo de Counter Vanilla tiene como objetivo disipar el mito de que Redux requiere Webpack,Reactar,recarga en caliente,sagas,creadores de acción,constantes,Babel,npm,módulos CSS,decoradores,latín fluido,una suscripción a Egghead,un doctorado o un nivel de Exceeds Expectations O.W.L.</target>
        </trans-unit>
        <trans-unit id="93fb65536a0476327978e11533ea1a5d24a10c81" translate="yes" xml:space="preserve">
          <source>The new state is not passed to the listeners in order to simplify implementing store enhancers such as the Redux DevTools. In addition, subscribers are intended to react to the state value itself, not the action. Middleware can be used if the action is important and needs to be handled specifically.</source>
          <target state="translated">El nuevo estado no se pasa a los oyentes para simplificar la implementación de los potenciadores de la tienda,como los Redux DevTools.Además,los suscriptores tienen la intención de reaccionar al valor del estado en sí,no a la acción.El middleware puede ser usado si la acción es importante y necesita ser manejada específicamente.</target>
        </trans-unit>
        <trans-unit id="5e78ce3d1d64476af75b7e5f41d5be781a323a4c" translate="yes" xml:space="preserve">
          <source>The nice thing about thunks is that they can dispatch results of each other:</source>
          <target state="translated">Lo bueno de los thunks es que pueden enviar resultados de cada uno de ellos:</target>
        </trans-unit>
        <trans-unit id="6d99c20eac2d1658b7df0891305cdca243a9af62" translate="yes" xml:space="preserve">
          <source>The only input for server side code is the request made when loading up a page in your app in your browser. You may choose to configure the server during its boot (such as when you are running in a development vs. production environment), but that configuration is static.</source>
          <target state="translated">La única entrada para el código del lado del servidor es la solicitud hecha al cargar una página en su aplicación en su navegador.Puedes elegir configurar el servidor durante su arranque (como cuando estás corriendo en un entorno de desarrollo vs.producción),pero esa configuración es estática.</target>
        </trans-unit>
        <trans-unit id="0f86933dcbbe66c8f04e7c9fc359e8fa49b3f7f3" translate="yes" xml:space="preserve">
          <source>The only use case for &lt;code&gt;bindActionCreators&lt;/code&gt; is when you want to pass some action creators down to a component that isn't aware of Redux, and you don't want to pass &lt;a href=&quot;store#dispatch&quot;&gt;&lt;code&gt;dispatch&lt;/code&gt;&lt;/a&gt; or the Redux store to it.</source>
          <target state="translated">El &amp;uacute;nico caso de uso para &lt;code&gt;bindActionCreators&lt;/code&gt; es cuando desea pasar algunos creadores de acciones a un componente que no conoce Redux, y no desea pasar el &lt;a href=&quot;store#dispatch&quot;&gt; &lt;code&gt;dispatch&lt;/code&gt; &lt;/a&gt; o la tienda de Redux.</target>
        </trans-unit>
        <trans-unit id="11679d519383db9e97765680c1c087a4c5d58e4d" translate="yes" xml:space="preserve">
          <source>The only use case for &lt;code&gt;bindActionCreators&lt;/code&gt; is when you want to pass some action creators down to a component that isn't aware of Redux, and you don't want to pass &lt;a href=&quot;store#dispatchaction&quot;&gt;&lt;code&gt;dispatch&lt;/code&gt;&lt;/a&gt; or the Redux store to it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="66b4d49e553bb0efa470bbe85e68619297117596" translate="yes" xml:space="preserve">
          <source>The only way to change the state inside it is to dispatch an &lt;a href=&quot;../glossary#action&quot;&gt;action&lt;/a&gt; on it.</source>
          <target state="translated">La &amp;uacute;nica forma de cambiar el estado dentro de &amp;eacute;l es enviar una &lt;a href=&quot;../glossary#action&quot;&gt;acci&amp;oacute;n&lt;/a&gt; sobre &amp;eacute;l.</target>
        </trans-unit>
        <trans-unit id="3d51f5c9be0da0a1475d839514b718722284186c" translate="yes" xml:space="preserve">
          <source>The only way to change the state tree is to emit an &lt;em&gt;action&lt;/em&gt;, an object describing what happened.</source>
          <target state="translated">La &amp;uacute;nica forma de cambiar el &amp;aacute;rbol de estado es emitir una &lt;em&gt;acci&amp;oacute;n&lt;/em&gt; , un objeto que describe lo que sucedi&amp;oacute;.</target>
        </trans-unit>
        <trans-unit id="c24d16d7147d4d6eb8c10527b6a9d45b0beb9c87" translate="yes" xml:space="preserve">
          <source>The option we recommend is to use a special React Redux component called &lt;a href=&quot;https://github.com/reactjs/react-redux/blob/master/docs/api.md#provider-store&quot;&gt;&lt;code&gt;&amp;lt;Provider&amp;gt;&lt;/code&gt;&lt;/a&gt; to &lt;a href=&quot;https://facebook.github.io/react/docs/context.html&quot;&gt;magically&lt;/a&gt; make the store available to all container components in the application without passing it explicitly. You only need to use it once when you render the root component:</source>
          <target state="translated">La opci&amp;oacute;n que recomendamos es usar un componente especial de React Redux llamado &lt;a href=&quot;https://github.com/reactjs/react-redux/blob/master/docs/api.md#provider-store&quot;&gt; &lt;code&gt;&amp;lt;Provider&amp;gt;&lt;/code&gt; &lt;/a&gt; para hacer que la tienda est&amp;eacute; disponible &lt;a href=&quot;https://facebook.github.io/react/docs/context.html&quot;&gt;m&amp;aacute;gicamente&lt;/a&gt; para todos los componentes del contenedor en la aplicaci&amp;oacute;n sin pasarla expl&amp;iacute;citamente. Solo necesita usarlo una vez cuando renderiza el componente ra&amp;iacute;z:</target>
        </trans-unit>
        <trans-unit id="648fab04f4ba80945b0b8fe210f400cb5cd99721" translate="yes" xml:space="preserve">
          <source>The original Flux pattern describes having multiple &amp;ldquo;stores&amp;rdquo; in an app, each one holding a different area of domain data. This can introduce issues such as needing to have one store &amp;ldquo;&lt;code&gt;waitFor&lt;/code&gt;&amp;rdquo; another store to update. This is not necessary in Redux because the separation between data domains is already achieved by splitting a single reducer into smaller reducers.</source>
          <target state="translated">El patr&amp;oacute;n Flux original describe tener m&amp;uacute;ltiples &quot;tiendas&quot; en una aplicaci&amp;oacute;n, cada una con un &amp;aacute;rea diferente de datos de dominio. Esto puede presentar problemas como la necesidad de que una tienda &quot; &lt;code&gt;waitFor&lt;/code&gt; &quot; a otra tienda para actualizar. Esto no es necesario en Redux porque la separaci&amp;oacute;n entre dominios de datos ya se logra dividiendo un solo reductor en reductores m&amp;aacute;s peque&amp;ntilde;os.</target>
        </trans-unit>
        <trans-unit id="62ee23332a72fc3750f78243b123043b65f95888" translate="yes" xml:space="preserve">
          <source>The question is: do you really need Redux if you already use Rx? Maybe not. It's not hard to &lt;a href=&quot;https://github.com/jas-chen/rx-redux&quot;&gt;re-implement Redux in Rx&lt;/a&gt;. Some say it's a two-liner using Rx &lt;code&gt;.scan()&lt;/code&gt; method. It may very well be!</source>
          <target state="translated">La pregunta es: &amp;iquest;realmente necesita Redux si ya usa Rx? Tal vez no. No es dif&amp;iacute;cil &lt;a href=&quot;https://github.com/jas-chen/rx-redux&quot;&gt;volver a implementar Redux en Rx&lt;/a&gt; . Algunos dicen que es de dos l&amp;iacute;neas usando el &lt;code&gt;.scan()&lt;/code&gt; Rx .scan () . &amp;iexcl;Bien puede ser!</target>
        </trans-unit>
        <trans-unit id="b112f1eaa085df10f0fb3a949e7c7d0512123ef7" translate="yes" xml:space="preserve">
          <source>The reducer &lt;code&gt;(state, action) =&amp;gt; state&lt;/code&gt; signature makes it natural to implement generic &amp;ldquo;reducer enhancers&amp;rdquo; or &amp;ldquo;higher order reducers&amp;rdquo;. They are functions that take your reducer and enhance it with some additional functionality while preserving its signature. Undo history is exactly such a case.</source>
          <target state="translated">El reductor &lt;code&gt;(state, action) =&amp;gt; state&lt;/code&gt; firma del estado hace que sea natural implementar &quot;potenciadores reductores&quot; gen&amp;eacute;ricos o &quot;reductores de orden superior&quot;. Son funciones que toman su reductor y lo mejoran con alguna funcionalidad adicional mientras preservan su firma. Deshacer el historial es exactamente un caso as&amp;iacute;.</target>
        </trans-unit>
        <trans-unit id="831cdccd0fe29b2292b102e71a67a95df749f9a5" translate="yes" xml:space="preserve">
          <source>The reducer generated by &lt;code&gt;combineReducers({ a, b })&lt;/code&gt; looks like this:</source>
          <target state="translated">El reductor generado por &lt;code&gt;combineReducers({ a, b })&lt;/code&gt; ve as&amp;iacute;:</target>
        </trans-unit>
        <trans-unit id="579bccc1a8ba0deb299c67fd02b66c1a0bde82b3" translate="yes" xml:space="preserve">
          <source>The reducer logic doesn't have to deal with deep levels of nesting, so it will probably be much simpler.</source>
          <target state="translated">La lógica del reductor no tiene que lidiar con niveles profundos de anidación,así que probablemente será mucho más simple.</target>
        </trans-unit>
        <trans-unit id="8b251f78a3911e16c890bcff055432910c7e244e" translate="yes" xml:space="preserve">
          <source>The reducers may handle this action by merging the new data into the state they manage and resetting &lt;code&gt;isFetching&lt;/code&gt;. The UI would hide the spinner, and display the fetched data.</source>
          <target state="translated">Los reductores pueden manejar esta acci&amp;oacute;n fusionando los nuevos datos en el estado que administran y restableciendo &lt;code&gt;isFetching&lt;/code&gt; . La interfaz de usuario ocultar&amp;iacute;a la ruleta y mostrar&amp;iacute;a los datos obtenidos.</target>
        </trans-unit>
        <trans-unit id="ef702e159de1a7ac56e685ea8e6312a6d8a5ae0e" translate="yes" xml:space="preserve">
          <source>The reducers may handle this action by resetting &lt;code&gt;isFetching&lt;/code&gt;. Additionally, some reducers may want to store the error message so the UI can display it.</source>
          <target state="translated">Los reductores pueden manejar esta acci&amp;oacute;n reiniciando &lt;code&gt;isFetching&lt;/code&gt; . Adem&amp;aacute;s, es posible que algunos reductores deseen almacenar el mensaje de error para que la interfaz de usuario pueda mostrarlo.</target>
        </trans-unit>
        <trans-unit id="e3589533d63065a42192671f978f7884a00c50eb" translate="yes" xml:space="preserve">
          <source>The reducers may handle this action by toggling an &lt;code&gt;isFetching&lt;/code&gt; flag in the state. This way the UI knows it's time to show a spinner.</source>
          <target state="translated">Los reductores pueden manejar esta acci&amp;oacute;n alternando una bandera &lt;code&gt;isFetching&lt;/code&gt; en el estado. De esta manera, la interfaz de usuario sabe que es hora de mostrar una ruleta.</target>
        </trans-unit>
        <trans-unit id="fb415aec3abf5f69e7a7dbc95599da2a8b59bb09" translate="yes" xml:space="preserve">
          <source>The remove function could also be implemented as:</source>
          <target state="translated">La función de eliminación también podría implementarse como:</target>
        </trans-unit>
        <trans-unit id="34eee3e75bb47e88848e238f22d63bbf7668e6ee" translate="yes" xml:space="preserve">
          <source>The request contains information about the URL requested, including any query parameters, which will be useful when using something like &lt;a href=&quot;https://github.com/reactjs/react-router&quot;&gt;React Router&lt;/a&gt;. It can also contain headers with inputs like cookies or authorization, or POST body data. Let's see how we can set the initial counter state based on a query parameter.</source>
          <target state="translated">La solicitud contiene informaci&amp;oacute;n sobre la URL solicitada, incluidos los par&amp;aacute;metros de consulta, que ser&amp;aacute;n &amp;uacute;tiles al usar algo como &lt;a href=&quot;https://github.com/reactjs/react-router&quot;&gt;React Router&lt;/a&gt; . Tambi&amp;eacute;n puede contener encabezados con entradas como cookies o autorizaci&amp;oacute;n, o datos del cuerpo POST. Veamos c&amp;oacute;mo podemos establecer el estado del contador inicial en funci&amp;oacute;n de un par&amp;aacute;metro de consulta.</target>
        </trans-unit>
        <trans-unit id="cb8346bc09abdc2bdbbd4e730bada908b5a84b2e" translate="yes" xml:space="preserve">
          <source>The resulting reducer calls every child reducer, and gathers their results into a single state object. &lt;strong&gt;The shape of the state object matches the keys of the passed &lt;code&gt;reducers&lt;/code&gt;&lt;/strong&gt;.</source>
          <target state="translated">El reductor resultante llama a cada reductor secundario y re&amp;uacute;ne sus resultados en un solo objeto de estado. &lt;strong&gt;La forma del objeto de estado coincide con las claves de los &lt;code&gt;reducers&lt;/code&gt; &lt;/strong&gt;&lt;strong&gt; pasados&lt;/strong&gt; .</target>
        </trans-unit>
        <trans-unit id="bebc73dea03ed82f283ad8c04dfdcbf094d7911a" translate="yes" xml:space="preserve">
          <source>The resulting reducer calls every child reducer, and gathers their results into a single state object. &lt;strong&gt;The state produced by &lt;code&gt;combineReducers()&lt;/code&gt; namespaces the states of each reducer under their keys as passed to &lt;code&gt;combineReducers()&lt;/code&gt;&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="191b4037dec326d03a76e5e3d99a324826c75a29" translate="yes" xml:space="preserve">
          <source>The shallow check of &lt;code&gt;param&lt;/code&gt; and &lt;code&gt;returnValue&lt;/code&gt; simply checks whether both variables reference the same object, which they do.&lt;code&gt;mutateObj()&lt;/code&gt; may return a mutated version of &lt;code&gt;obj&lt;/code&gt;, but it's still the same object as that passed in. The fact that its values have been changed within &lt;code&gt;mutateObj&lt;/code&gt; matters not at all to a shallow check.</source>
          <target state="translated">La verificaci&amp;oacute;n superficial de &lt;code&gt;param&lt;/code&gt; y &lt;code&gt;returnValue&lt;/code&gt; simplemente verifica si ambas variables hacen referencia al mismo objeto, lo cual hacen. &lt;code&gt;mutateObj()&lt;/code&gt; puede devolver una versi&amp;oacute;n mutada de &lt;code&gt;obj&lt;/code&gt; , pero sigue siendo el mismo objeto que el pasado. El hecho de que sus valores hayan sido cambiados dentro de &lt;code&gt;mutateObj&lt;/code&gt; no importa en absoluto a una verificaci&amp;oacute;n superficial.</target>
        </trans-unit>
        <trans-unit id="bc6715934729123df24e127a2b31fa31c6f3d1d9" translate="yes" xml:space="preserve">
          <source>The simplest and most common way to do this is to add the &lt;a href=&quot;https://github.com/gaearon/redux-thunk&quot;&gt;Redux Thunk&lt;/a&gt; middleware that lets you write action creators with more complex and asynchronous logic. Another widely-used method is &lt;a href=&quot;https://github.com/yelouafi/redux-saga&quot;&gt;Redux Saga&lt;/a&gt; which lets you write more synchronous-looking code using generators, and can act like &amp;ldquo;background threads&amp;rdquo; or &amp;ldquo;daemons&amp;rdquo; in a Redux app. Yet another approach is &lt;a href=&quot;https://github.com/raisemarketplace/redux-loop&quot;&gt;Redux Loop&lt;/a&gt;, which inverts the process by allowing your reducers to declare side effects in response to state changes and have them executed separately. Beyond that, there are &lt;em&gt;many&lt;/em&gt; other community-developed libraries and ideas, each with their own take on how side effects should be managed.</source>
          <target state="translated">La forma m&amp;aacute;s simple y com&amp;uacute;n de hacer esto es agregar el middleware &lt;a href=&quot;https://github.com/gaearon/redux-thunk&quot;&gt;Redux Thunk&lt;/a&gt; que le permite escribir creadores de acciones con una l&amp;oacute;gica m&amp;aacute;s compleja y asincr&amp;oacute;nica. Otro m&amp;eacute;todo ampliamente utilizado es &lt;a href=&quot;https://github.com/yelouafi/redux-saga&quot;&gt;Redux Saga,&lt;/a&gt; que le permite escribir un c&amp;oacute;digo de aspecto m&amp;aacute;s s&amp;iacute;ncrono utilizando generadores y puede actuar como &quot;hilos de fondo&quot; o &quot;demonios&quot; en una aplicaci&amp;oacute;n Redux. Otro enfoque m&amp;aacute;s es &lt;a href=&quot;https://github.com/raisemarketplace/redux-loop&quot;&gt;Redux Loop&lt;/a&gt; , que invierte el proceso al permitir que sus reductores declaren efectos secundarios en respuesta a cambios de estado y los ejecuten por separado. M&amp;aacute;s all&amp;aacute; de eso, hay &lt;em&gt;muchas&lt;/em&gt; otras bibliotecas e ideas desarrolladas por la comunidad, cada una con su propia opini&amp;oacute;n sobre c&amp;oacute;mo se deben manejar los efectos secundarios.</target>
        </trans-unit>
        <trans-unit id="a1ef44d7beed8bc507d7e3d3fa102d8a5af7a998" translate="yes" xml:space="preserve">
          <source>The simplest example of middleware is &lt;a href=&quot;https://github.com/gaearon/redux-thunk&quot;&gt;redux-thunk&lt;/a&gt;. &lt;strong&gt;&amp;ldquo;Thunk&amp;rdquo; middleware lets you write action creators as &amp;ldquo;thunks&amp;rdquo;, that is, functions returning functions.&lt;/strong&gt; This inverts the control: you will get &lt;code&gt;dispatch&lt;/code&gt; as an argument, so you can write an action creator that dispatches many times.</source>
          <target state="translated">El ejemplo m&amp;aacute;s simple de middleware es &lt;a href=&quot;https://github.com/gaearon/redux-thunk&quot;&gt;redux-thunk&lt;/a&gt; . &lt;strong&gt;El middleware &quot;Thunk&quot; le permite escribir creadores de acciones como &quot;thunks&quot;, es decir, funciones que devuelven funciones. &lt;/strong&gt;Esto invierte el control: obtendr&amp;aacute; el &lt;code&gt;dispatch&lt;/code&gt; como argumento, por lo que puede escribir un creador de acciones que se env&amp;iacute;e muchas veces.</target>
        </trans-unit>
        <trans-unit id="a224c5bb5c7b0257b4abc9573a41ae755e11d225" translate="yes" xml:space="preserve">
          <source>The simplest possible approach to writing reducer logic is to put everything into a single function declaration, like this:</source>
          <target state="translated">El enfoque más simple posible para escribir la lógica reductora es poner todo en una sola declaración de función,como esta:</target>
        </trans-unit>
        <trans-unit id="df00019572e1d526628ee1357601871796c2e3aa" translate="yes" xml:space="preserve">
          <source>The state is already immutable, and mutations are already described as discrete actions, which is close to the undo stack mental model.</source>
          <target state="translated">El estado ya es inmutable,y las mutaciones ya se describen como acciones discretas,lo que se acerca al modelo mental de deshacer la pila.</target>
        </trans-unit>
        <trans-unit id="4e2a0df854ac3a6ba67f8bf8af131bbbadf64b8c" translate="yes" xml:space="preserve">
          <source>The store will still be updated with the new values for the root state, but because the root state object itself is still the same object, libraries that bind to Redux, such as React-Redux, will not be aware of the state&amp;rsquo;s mutation, and so will not trigger a wrapped component&amp;rsquo;s re-rendering.</source>
          <target state="translated">La tienda a&amp;uacute;n se actualizar&amp;aacute; con los nuevos valores para el estado ra&amp;iacute;z, pero debido a que el objeto de estado ra&amp;iacute;z en s&amp;iacute; mismo sigue siendo el mismo objeto, las bibliotecas que se unen a Redux, como React-Redux, no ser&amp;aacute;n conscientes de la mutaci&amp;oacute;n del estado y por lo que no activar&amp;aacute; la re-renderizaci&amp;oacute;n de un componente envuelto.</target>
        </trans-unit>
        <trans-unit id="4f3016ca7583094ba4738ed1d27a81993f9cabc7" translate="yes" xml:space="preserve">
          <source>The store's reducing function will be called with the current &lt;a href=&quot;#getState&quot;&gt;&lt;code&gt;getState()&lt;/code&gt;&lt;/a&gt; result and the given &lt;code&gt;action&lt;/code&gt; synchronously. Its return value will be considered the next state. It will be returned from &lt;a href=&quot;#getState&quot;&gt;&lt;code&gt;getState()&lt;/code&gt;&lt;/a&gt; from now on, and the change listeners will immediately be notified.</source>
          <target state="translated">La funci&amp;oacute;n de reducci&amp;oacute;n de la tienda se llamar&amp;aacute; con el resultado actual de &lt;a href=&quot;#getState&quot;&gt; &lt;code&gt;getState()&lt;/code&gt; &lt;/a&gt; y la &lt;code&gt;action&lt;/code&gt; dada sincr&amp;oacute;nicamente. Su valor de retorno se considerar&amp;aacute; el siguiente estado. Se devolver&amp;aacute; desde &lt;a href=&quot;#getState&quot;&gt; &lt;code&gt;getState()&lt;/code&gt; &lt;/a&gt; partir de ahora, y los oyentes de cambios ser&amp;aacute;n notificados inmediatamente.</target>
        </trans-unit>
        <trans-unit id="cea20ac25d592424eac6b0baa84b4cb2827c5999" translate="yes" xml:space="preserve">
          <source>The sub-app approach is also useful for large teams that are divided by product or feature verticals. These teams can ship sub-apps independently or in combination with an enclosing &amp;ldquo;app shell&amp;rdquo;.</source>
          <target state="translated">El enfoque de la aplicaci&amp;oacute;n secundaria tambi&amp;eacute;n es &amp;uacute;til para equipos grandes divididos por productos o caracter&amp;iacute;sticas verticales. Estos equipos pueden enviar sub-aplicaciones de forma independiente o en combinaci&amp;oacute;n con un &quot;shell de aplicaci&amp;oacute;n&quot; adjunto.</target>
        </trans-unit>
        <trans-unit id="375db8357be87b44ec99ec266964bcb0566ca944" translate="yes" xml:space="preserve">
          <source>The subscriptions are snapshotted just before every &lt;a href=&quot;#dispatch&quot;&gt;&lt;code&gt;dispatch()&lt;/code&gt;&lt;/a&gt; call. If you subscribe or unsubscribe while the listeners are being invoked, this will not have any effect on the &lt;a href=&quot;#dispatch&quot;&gt;&lt;code&gt;dispatch()&lt;/code&gt;&lt;/a&gt; that is currently in progress. However, the next &lt;a href=&quot;#dispatch&quot;&gt;&lt;code&gt;dispatch()&lt;/code&gt;&lt;/a&gt; call, whether nested or not, will use a more recent snapshot of the subscription list.</source>
          <target state="translated">Las suscripciones se capturan justo antes de cada llamada &lt;a href=&quot;#dispatch&quot;&gt; &lt;code&gt;dispatch()&lt;/code&gt; &lt;/a&gt; . Si se suscribe o cancela la suscripci&amp;oacute;n mientras se invoca a los oyentes, esto no tendr&amp;aacute; ning&amp;uacute;n efecto en el &lt;a href=&quot;#dispatch&quot;&gt; &lt;code&gt;dispatch()&lt;/code&gt; &lt;/a&gt; que est&amp;aacute; actualmente en curso. Sin embargo, la siguiente llamada &lt;a href=&quot;#dispatch&quot;&gt; &lt;code&gt;dispatch()&lt;/code&gt; &lt;/a&gt; , ya sea anidada o no, usar&amp;aacute; una instant&amp;aacute;nea m&amp;aacute;s reciente de la lista de suscripci&amp;oacute;n.</target>
        </trans-unit>
        <trans-unit id="80feb06d33ae82b791c73d4ad38cfd11b702fe4b" translate="yes" xml:space="preserve">
          <source>The subscriptions are snapshotted just before every &lt;a href=&quot;#dispatchaction&quot;&gt;&lt;code&gt;dispatch()&lt;/code&gt;&lt;/a&gt; call. If you subscribe or unsubscribe while the listeners are being invoked, this will not have any effect on the &lt;a href=&quot;#dispatchaction&quot;&gt;&lt;code&gt;dispatch()&lt;/code&gt;&lt;/a&gt; that is currently in progress. However, the next &lt;a href=&quot;#dispatchaction&quot;&gt;&lt;code&gt;dispatch()&lt;/code&gt;&lt;/a&gt; call, whether nested or not, will use a more recent snapshot of the subscription list.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e3fcb31aa94b0e76b32e4908a5de1c115f3b15a7" translate="yes" xml:space="preserve">
          <source>The suggested structure for a Redux store is to split the state object into multiple &amp;ldquo;slices&amp;rdquo; or &amp;ldquo;domains&amp;rdquo; by key, and provide a separate reducer function to manage each individual data slice. This is similar to how the standard Flux pattern has multiple independent stores, and Redux provides the &lt;a href=&quot;../api/combinereducers&quot;&gt;&lt;code&gt;combineReducers&lt;/code&gt;&lt;/a&gt; utility function to make this pattern easier. However, it's important to note that &lt;code&gt;combineReducers&lt;/code&gt; is &lt;em&gt;not&lt;/em&gt; required&amp;mdash;it is simply a utility function for the common use case of having a single reducer function per state slice, with plain JavaScript objects for the data.</source>
          <target state="translated">La estructura sugerida para una tienda Redux es dividir el objeto de estado en m&amp;uacute;ltiples &quot;porciones&quot; o &quot;dominios&quot; por clave, y proporcionar una funci&amp;oacute;n de reducci&amp;oacute;n separada para administrar cada porci&amp;oacute;n de datos individual. Esto es similar a c&amp;oacute;mo el patr&amp;oacute;n Flux est&amp;aacute;ndar tiene m&amp;uacute;ltiples tiendas independientes, y Redux proporciona la funci&amp;oacute;n de utilidad &lt;a href=&quot;../api/combinereducers&quot;&gt; &lt;code&gt;combineReducers&lt;/code&gt; &lt;/a&gt; para facilitar este patr&amp;oacute;n. Sin embargo, es importante se&amp;ntilde;alar que los &lt;code&gt;combineReducers&lt;/code&gt; se &lt;em&gt;no&lt;/em&gt; requiere-es simplemente una funci&amp;oacute;n de utilidad para el caso de uso com&amp;uacute;n de tener una sola funci&amp;oacute;n reductor por rebanada estado, con objetos llanura JavaScript para los datos.</target>
        </trans-unit>
        <trans-unit id="19890ee5401ad9b13da13113d9a0a8f02936561b" translate="yes" xml:space="preserve">
          <source>The term &quot;&lt;em&gt;sub-reducer&lt;/em&gt;&quot; has also been used in various discussions to mean any function that is not the root reducer, although the term is not very precise. Some people may also refer to some functions as &quot;&lt;em&gt;business logic&lt;/em&gt;&quot; (functions that relate to application-specific behavior) or &quot;&lt;em&gt;utility functions&lt;/em&gt;&quot; (generic functions that are not application-specific).</source>
          <target state="translated">El t&amp;eacute;rmino &quot; &lt;em&gt;sub-reductor&lt;/em&gt; &quot; tambi&amp;eacute;n se ha utilizado en varias discusiones para referirse a cualquier funci&amp;oacute;n que no sea el reductor de ra&amp;iacute;z, aunque el t&amp;eacute;rmino no es muy preciso. Algunas personas tambi&amp;eacute;n pueden referirse a algunas funciones como &quot; &lt;em&gt;l&amp;oacute;gica empresarial&lt;/em&gt; &quot; (funciones que se relacionan con el comportamiento espec&amp;iacute;fico de la aplicaci&amp;oacute;n) o &quot; &lt;em&gt;funciones de utilidad&lt;/em&gt; &quot; (funciones gen&amp;eacute;ricas que no son espec&amp;iacute;ficas de la aplicaci&amp;oacute;n).</target>
        </trans-unit>
        <trans-unit id="4efb799026840b45f617b41420282694075bcbb5" translate="yes" xml:space="preserve">
          <source>The two most common ways to specialize a reducer are to generate new action constants with a given prefix or suffix, or to attach additional info inside the action object. Here's what those might look like:</source>
          <target state="translated">Las dos formas más comunes de especializar un reductor son generar nuevas constantes de acción con un prefijo o sufijo dado,o adjuntar información adicional dentro del objeto de acción.Esto es lo que podría parecer:</target>
        </trans-unit>
        <trans-unit id="8244d8d3077f561bcd0f5377b25ede16bd17a723" translate="yes" xml:space="preserve">
          <source>The whole state of your app is stored in an object tree inside a single &lt;em&gt;store&lt;/em&gt;.</source>
          <target state="translated">Todo el estado de su aplicaci&amp;oacute;n se almacena en un &amp;aacute;rbol de objetos dentro de una sola &lt;em&gt;tienda&lt;/em&gt; .</target>
        </trans-unit>
        <trans-unit id="b55a43c532a7c8e9947bf52f67dd941ff93ac2e5" translate="yes" xml:space="preserve">
          <source>The work done by Redux generally falls into a few areas: processing actions in middleware and reducers (including object duplication for immutable updates), notifying subscribers after actions are dispatched, and updating UI components based on the state changes. While it's certainly &lt;em&gt;possible&lt;/em&gt; for each of these to become a performance concern in sufficiently complex situations, there's nothing inherently slow or inefficient about how Redux is implemented. In fact, React Redux in particular is heavily optimized to cut down on unnecessary re-renders, and React-Redux v5 shows noticeable improvements over earlier versions.</source>
          <target state="translated">El trabajo realizado por Redux generalmente se divide en algunas &amp;aacute;reas: procesar acciones en middleware y reductores (incluida la duplicaci&amp;oacute;n de objetos para actualizaciones inmutables), notificar a los suscriptores despu&amp;eacute;s de que se env&amp;iacute;en las acciones y actualizar los componentes de la interfaz de usuario seg&amp;uacute;n los cambios de estado. Si bien es &lt;em&gt;posible&lt;/em&gt; que cada uno de estos se convierta en un problema de rendimiento en situaciones suficientemente complejas, no hay nada inherentemente lento o ineficiente en c&amp;oacute;mo se implementa Redux. De hecho, React Redux en particular est&amp;aacute; muy optimizado para reducir las repeticiones de renderizado innecesarias, y React-Redux v5 muestra mejoras notables con respecto a versiones anteriores.</target>
        </trans-unit>
        <trans-unit id="e621bbd33e777ec7ef3871509510242d1781c64a" translate="yes" xml:space="preserve">
          <source>The work on Redux was &lt;a href=&quot;https://www.patreon.com/reactdx&quot;&gt;funded by the community&lt;/a&gt;.</source>
          <target state="translated">El trabajo en Redux fue &lt;a href=&quot;https://www.patreon.com/reactdx&quot;&gt;financiado por la comunidad&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="0e58a6fbd2c7776a43fa3f20f5482c786c5abf51" translate="yes" xml:space="preserve">
          <source>Then your reducer might look like this:</source>
          <target state="translated">Entonces tu reductor podría verse así:</target>
        </trans-unit>
        <trans-unit id="b0b64fceb751659a715e3ef58186964669c75267" translate="yes" xml:space="preserve">
          <source>Then, add this to &lt;code&gt;scripts&lt;/code&gt; in your &lt;code&gt;package.json&lt;/code&gt;:</source>
          <target state="translated">Luego, agregue esto a los &lt;code&gt;scripts&lt;/code&gt; en su &lt;code&gt;package.json&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="2304d640a16ae9bfebc931161006126d186e787e" translate="yes" xml:space="preserve">
          <source>Then:</source>
          <target state="translated">Then:</target>
        </trans-unit>
        <trans-unit id="e96f86541d1773854c7bcc0e179868209a9a8589" translate="yes" xml:space="preserve">
          <source>There are a few important bits here:</source>
          <target state="translated">Hay algunas partes importantes aquí:</target>
        </trans-unit>
        <trans-unit id="5d06a233fcb86cede2504f1d8109e3efa70aa46c" translate="yes" xml:space="preserve">
          <source>There are a number of community packages that implement various approaches for storing per-component state in a Redux store instead, such as &lt;a href=&quot;https://github.com/tonyhb/redux-ui&quot;&gt;redux-ui&lt;/a&gt;, &lt;a href=&quot;https://github.com/tomchentw/redux-component&quot;&gt;redux-component&lt;/a&gt;, &lt;a href=&quot;https://github.com/threepointone/redux-react-local&quot;&gt;redux-react-local&lt;/a&gt;, and more. It's also possible to apply Redux's principles and concept of reducers to the task of updating local component state as well, along the lines of &lt;code&gt;this.setState( (previousState) =&amp;gt; reducer(previousState, someAction))&lt;/code&gt;.</source>
          <target state="translated">Hay varios paquetes comunitarios que implementan varios enfoques para almacenar el estado por componente en una tienda Redux, como &lt;a href=&quot;https://github.com/tonyhb/redux-ui&quot;&gt;redux-ui&lt;/a&gt; , &lt;a href=&quot;https://github.com/tomchentw/redux-component&quot;&gt;redux-component&lt;/a&gt; , &lt;a href=&quot;https://github.com/threepointone/redux-react-local&quot;&gt;redux-react-local&lt;/a&gt; y m&amp;aacute;s. Tambi&amp;eacute;n es posible aplicar los principios y el concepto de reductores de Redux a la tarea de actualizar el estado del componente local, en la l&amp;iacute;nea de &lt;code&gt;this.setState( (previousState) =&amp;gt; reducer(previousState, someAction))&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="0014d11cb95b6c4884244108322b1ff44ccf44a1" translate="yes" xml:space="preserve">
          <source>There are also utility libraries to aid in generating action creators, such as &lt;a href=&quot;https://github.com/pauldijou/redux-act&quot;&gt;redux-act&lt;/a&gt; and &lt;a href=&quot;https://github.com/acdlite/redux-actions&quot;&gt;redux-actions&lt;/a&gt;. These can help reduce boilerplate code and enforce adherence to standards such as &lt;a href=&quot;https://github.com/acdlite/flux-standard-action&quot;&gt;Flux Standard Action (FSA)&lt;/a&gt;.</source>
          <target state="translated">Tambi&amp;eacute;n hay bibliotecas de utilidades para ayudar a generar creadores de acciones, como &lt;a href=&quot;https://github.com/pauldijou/redux-act&quot;&gt;redux-act&lt;/a&gt; y &lt;a href=&quot;https://github.com/acdlite/redux-actions&quot;&gt;redux-actions&lt;/a&gt; . Estos pueden ayudar a reducir el c&amp;oacute;digo repetitivo y hacer cumplir los est&amp;aacute;ndares como &lt;a href=&quot;https://github.com/acdlite/flux-standard-action&quot;&gt;Flux Standard Action (FSA)&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="6d7c3fb839d1de9f174190d1095682848236da15" translate="yes" xml:space="preserve">
          <source>There are frameworks claiming to be similar to Flux, but without a concept of action objects. In terms of being predictable, this is a step backwards from Flux or Redux. If there are no serializable plain object actions, it is impossible to record and replay user sessions, or to implement &lt;a href=&quot;https://www.youtube.com/watch?v=xsSnOQynTHs&quot;&gt;hot reloading with time travel&lt;/a&gt;. If you'd rather modify data directly, you don't need Redux.</source>
          <target state="translated">Hay marcos que afirman ser similares a Flux, pero sin un concepto de objetos de acci&amp;oacute;n. En t&amp;eacute;rminos de ser predecible, este es un paso atr&amp;aacute;s de Flux o Redux. Si no hay acciones de objetos simples serializables, es imposible grabar y reproducir sesiones de usuario, o implementar &lt;a href=&quot;https://www.youtube.com/watch?v=xsSnOQynTHs&quot;&gt;recargas en caliente con viajes en el tiempo&lt;/a&gt; . Si prefiere modificar los datos directamente, no necesita Redux.</target>
        </trans-unit>
        <trans-unit id="cfa801b0cb8664a9ae599fb04c53df6ce12bf658" translate="yes" xml:space="preserve">
          <source>There are no multiple models&amp;mdash;just a state subtree that you want to keep track of.</source>
          <target state="translated">No hay varios modelos, solo un sub&amp;aacute;rbol de estado del que desea realizar un seguimiento.</target>
        </trans-unit>
        <trans-unit id="420577e78b88dd5a407cd7bcfca83fee052024be" translate="yes" xml:space="preserve">
          <source>There are several important ideas to be aware of when using &lt;code&gt;combineReducers&lt;/code&gt;:</source>
          <target state="translated">Hay varias ideas importantes que debe tener en cuenta al utilizar &lt;code&gt;combineReducers&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="31dadb8b332eafb541ac48d1ad1b0591872b1ba8" translate="yes" xml:space="preserve">
          <source>There are some simple tweaks that can be made to this reducer. First, repeated &lt;code&gt;if&lt;/code&gt;/&lt;code&gt;else&lt;/code&gt; statements quickly grow tiresome, so it's very common to use &lt;code&gt;switch&lt;/code&gt; statements instead. Second, we can use ES6's default parameter values to handle the initial &quot;no existing data&quot; case. With those changes, the reducer would look like:</source>
          <target state="translated">Hay algunos ajustes simples que se pueden hacer en este reductor. En primer lugar, las declaraciones &lt;code&gt;if&lt;/code&gt; / &lt;code&gt;else&lt;/code&gt; repetidas se vuelven aburridas r&amp;aacute;pidamente, por lo que es muy com&amp;uacute;n usar declaraciones &lt;code&gt;switch&lt;/code&gt; en su lugar. En segundo lugar, podemos usar los valores de los par&amp;aacute;metros predeterminados de ES6 para manejar el caso inicial &quot;sin datos existentes&quot;. Con esos cambios, el reductor se ver&amp;iacute;a as&amp;iacute;:</target>
        </trans-unit>
        <trans-unit id="a0306be0f55c35417f1fb94a7a6a33b60158cc20" translate="yes" xml:space="preserve">
          <source>There are two main ways to initialize state for your application. The &lt;code&gt;createStore&lt;/code&gt; method can accept an optional &lt;code&gt;preloadedState&lt;/code&gt; value as its second argument. Reducers can also specify an initial value by looking for an incoming state argument that is &lt;code&gt;undefined&lt;/code&gt;, and returning the value they'd like to use as a default. This can either be done with an explicit check inside the reducer, or by using the ES6 default argument value syntax: &lt;code&gt;function myReducer(state = someDefaultValue, action)&lt;/code&gt;.</source>
          <target state="translated">Hay dos formas principales de inicializar el estado de su aplicaci&amp;oacute;n. El m&amp;eacute;todo &lt;code&gt;createStore&lt;/code&gt; puede aceptar un valor opcional &lt;code&gt;preloadedState&lt;/code&gt; como segundo argumento. Los reductores tambi&amp;eacute;n pueden especificar un valor inicial buscando un argumento de estado entrante que &lt;code&gt;undefined&lt;/code&gt; est&amp;eacute; definido y devolviendo el valor que les gustar&amp;iacute;a usar como predeterminado. Esto se puede hacer con una verificaci&amp;oacute;n expl&amp;iacute;cita dentro del reductor, o usando la sintaxis del valor del argumento predeterminado de ES6: &lt;code&gt;function myReducer(state = someDefaultValue, action)&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="597620fe64267cbabf96711d555ec9adca761b24" translate="yes" xml:space="preserve">
          <source>There are two ways to define the initial shape and contents of your store's state. First, the &lt;code&gt;createStore&lt;/code&gt; function can take &lt;code&gt;preloadedState&lt;/code&gt; as its second argument. This is primarily intended for initializing the store with state that was previously persisted elsewhere, such as the browser's localStorage. The other way is for the root reducer to return the initial state value when the state argument is &lt;code&gt;undefined&lt;/code&gt;. These two approaches are described in more detail in &lt;a href=&quot;initializingstate&quot;&gt;Initializing State&lt;/a&gt;, but there are some additional concerns to be aware of when using &lt;code&gt;combineReducers&lt;/code&gt;.</source>
          <target state="translated">Hay dos formas de definir la forma inicial y el contenido del estado de su tienda. Primero, la funci&amp;oacute;n &lt;code&gt;createStore&lt;/code&gt; puede tomar &lt;code&gt;preloadedState&lt;/code&gt; como segundo argumento. Esto est&amp;aacute; destinado principalmente a inicializar la tienda con un estado que se conservaba anteriormente en otro lugar, como el almacenamiento local del navegador. La otra forma es que el reductor ra&amp;iacute;z devuelva el valor del estado inicial cuando el argumento del estado &lt;code&gt;undefined&lt;/code&gt; est&amp;aacute; definido . Estos dos enfoques se describen con m&amp;aacute;s detalle en &lt;a href=&quot;initializingstate&quot;&gt;Estado de inicializaci&amp;oacute;n&lt;/a&gt; , pero hay algunas preocupaciones adicionales que debe tener en cuenta al utilizar &lt;code&gt;combineReducers&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="56409b9a5183b19808817fe73374f07883b83a73" translate="yes" xml:space="preserve">
          <source>There is an important gotcha: you need to remember to append &lt;code&gt;.present&lt;/code&gt; to the current state when you retrieve it. You may also check &lt;code&gt;.past.length&lt;/code&gt; and &lt;code&gt;.future.length&lt;/code&gt; to determine whether to enable or to disable the Undo and Redo buttons, respectively.</source>
          <target state="translated">Hay un problema importante: debe recordar agregar &lt;code&gt;.present&lt;/code&gt; al estado actual cuando lo recupere. Tambi&amp;eacute;n puede verificar &lt;code&gt;.past.length&lt;/code&gt; y &lt;code&gt;.future.length&lt;/code&gt; para determinar si habilitar o deshabilitar los botones Deshacer y Rehacer, respectivamente.</target>
        </trans-unit>
        <trans-unit id="f5f4b92d40c5193a89ef2d973b4dea0cf41db580" translate="yes" xml:space="preserve">
          <source>There is no &amp;ldquo;right&amp;rdquo; answer for this. Some users prefer to keep every single piece of data in Redux, to maintain a fully serializable and controlled version of their application at all times. Others prefer to keep non-critical or UI state, such as &amp;ldquo;is this dropdown currently open&amp;rdquo;, inside a component's internal state.</source>
          <target state="translated">No hay una respuesta &quot;correcta&quot; para esto. Algunos usuarios prefieren mantener todos los datos en Redux, para mantener una versi&amp;oacute;n totalmente serializable y controlada de su aplicaci&amp;oacute;n en todo momento. Otros prefieren mantener el estado de IU o no cr&amp;iacute;tico, como &quot;&amp;iquest;este men&amp;uacute; desplegable est&amp;aacute; abierto actualmente?&quot;, Dentro del estado interno de un componente.</target>
        </trans-unit>
        <trans-unit id="90170588b4fa6d7f622136b2c7f8e6e07e225db6" translate="yes" xml:space="preserve">
          <source>There should only be a single store in a Redux app, as the composition happens on the reducer level.</source>
          <target state="translated">Sólo debería haber una única tienda en una aplicación Redux,ya que la composición se produce en el nivel de reducción.</target>
        </trans-unit>
        <trans-unit id="992aa1eaaf62b5438b3953fb40feec345ca3edf1" translate="yes" xml:space="preserve">
          <source>There should only be a single store in your app.</source>
          <target state="translated">Sólo debería haber una única tienda en tu aplicación.</target>
        </trans-unit>
        <trans-unit id="168b0114042369684de79c5fdf6b3e093b40d171" translate="yes" xml:space="preserve">
          <source>There will &lt;em&gt;rarely&lt;/em&gt; be a 1-to-1 correspondence between your UI tree and your state shape. The exception to that might be if you are explicitly tracking various aspects of UI data in your Redux store as well, but even then the shape of the UI data and the shape of the domain data would likely be different.</source>
          <target state="translated">Habr&amp;aacute; &lt;em&gt;raramente&lt;/em&gt; haber una correspondencia 1 a 1 entre el &amp;aacute;rbol de interfaz de usuario y su forma de estado. La excepci&amp;oacute;n a eso podr&amp;iacute;a ser si tambi&amp;eacute;n est&amp;aacute; rastreando expl&amp;iacute;citamente varios aspectos de los datos de la IU en su tienda Redux, pero incluso entonces la forma de los datos de la IU y la forma de los datos del dominio probablemente ser&amp;iacute;an diferentes.</target>
        </trans-unit>
        <trans-unit id="f1d2ef296166ce0ecc73c05efc95f385ad2e7495" translate="yes" xml:space="preserve">
          <source>There's a couple ways Redux-ORM can be used to perform updates. First, the Redux-ORM docs suggest defining reducer functions on each Model subclass, then including the auto-generated combined reducer function into your store:</source>
          <target state="translated">Hay un par de formas en que Redux-ORM puede ser usado para realizar actualizaciones.Primero,los documentos de Redux-ORM sugieren definir funciones reductoras en cada subclase del Modelo,y luego incluir la función reductora combinada autogenerada en su tienda:</target>
        </trans-unit>
        <trans-unit id="51018a56e34b691dd014441eabce29bdbcbc8652" translate="yes" xml:space="preserve">
          <source>There's no single clear answer to exactly what pieces of logic should go in a reducer or an action creator. Some developers prefer to have &amp;ldquo;fat&amp;rdquo; action creators, with &amp;ldquo;thin&amp;rdquo; reducers that simply take the data in an action and blindly merge it into the corresponding state. Others try to emphasize keeping actions as small as possible, and minimize the usage of &lt;code&gt;getState()&lt;/code&gt; in an action creator. (For purposes of this question, other async approaches such as sagas and observables fall in the &quot;action creator&quot; category.)</source>
          <target state="translated">No hay una respuesta &amp;uacute;nica y clara a exactamente qu&amp;eacute; piezas de l&amp;oacute;gica deber&amp;iacute;an ir en un reductor o un creador de acci&amp;oacute;n. Algunos desarrolladores prefieren tener creadores de acciones &amp;ldquo;gordos&amp;rdquo;, con reductores &amp;ldquo;delgados&amp;rdquo; que simplemente toman los datos en una acci&amp;oacute;n y los fusionan ciegamente en el estado correspondiente. Otros intentan enfatizar que las acciones sean lo m&amp;aacute;s peque&amp;ntilde;as posible y minimizar el uso de &lt;code&gt;getState()&lt;/code&gt; en un creador de acciones. (Para los prop&amp;oacute;sitos de esta pregunta, otros enfoques asincr&amp;oacute;nicos como las sagas y los observables caen en la categor&amp;iacute;a de &quot;creador de acciones&quot;).</target>
        </trans-unit>
        <trans-unit id="28edc5708a2301951ec09979956f382164d459ec" translate="yes" xml:space="preserve">
          <source>There's no specific rule for how you should structure your actions. Using an async middleware like Redux Thunk certainly enables scenarios such as dispatching multiple distinct but related actions in a row, dispatching actions to represent progression of an AJAX request, dispatching actions conditionally based on state, or even dispatching an action and checking the updated state immediately afterwards.</source>
          <target state="translated">No hay una regla específica de cómo debes estructurar tus acciones.El uso de un middleware de sincronización como Redux Thunk ciertamente permite escenarios como el envío de múltiples acciones distintas pero relacionadas en una fila,el envío de acciones para representar la progresión de una solicitud AJAX,el envío de acciones condicionadas basadas en el estado,o incluso el envío de una acción y la comprobación del estado actualizado inmediatamente después.</target>
        </trans-unit>
        <trans-unit id="3919f394ea7f45a742af3ee7c733b38c93a6700c" translate="yes" xml:space="preserve">
          <source>These &lt;code&gt;&amp;lt;SubApp&amp;gt;&lt;/code&gt;s will be completely independent. They won't share data or actions, and won't see or communicate with each other.</source>
          <target state="translated">Estas &lt;code&gt;&amp;lt;SubApp&amp;gt;&lt;/code&gt; s ser&amp;aacute;n completamente independientes. No compartir&amp;aacute;n datos ni acciones, y no se ver&amp;aacute;n ni se comunicar&amp;aacute;n entre s&amp;iacute;.</target>
        </trans-unit>
        <trans-unit id="7403f67d70c46d230048ba2241787084beea6a95" translate="yes" xml:space="preserve">
          <source>These are all normal React components, so we won't examine them in detail. We write functional stateless components unless we need to use local state or the lifecycle methods. This doesn't mean that presentational components &lt;em&gt;have to&lt;/em&gt; be functions&amp;mdash;it's just easier to define them this way. If and when you need to add local state, lifecycle methods, or performance optimizations, you can convert them to classes.</source>
          <target state="translated">Todos estos son componentes normales de React, por lo que no los examinaremos en detalle. Escribimos componentes funcionales sin estado a menos que necesitemos usar el estado local o los m&amp;eacute;todos del ciclo de vida. Esto no significa que los componentes de presentaci&amp;oacute;n &lt;em&gt;tengan que&lt;/em&gt; ser funciones, simplemente es m&amp;aacute;s f&amp;aacute;cil definirlos de esta manera. Si necesita agregar estados locales, m&amp;eacute;todos de ciclo de vida u optimizaciones de rendimiento, puede convertirlos en clases.</target>
        </trans-unit>
        <trans-unit id="ad42b9f4f6a7ded866b5edd040dee5736736ad79" translate="yes" xml:space="preserve">
          <source>These are some use cases and code snippets to get you started with Redux in a real app. They assume you understand the topics in &lt;a href=&quot;../basics/index&quot;&gt;basic&lt;/a&gt; and &lt;a href=&quot;../advanced/index&quot;&gt;advanced&lt;/a&gt; tutorials.</source>
          <target state="translated">Estos son algunos casos de uso y fragmentos de c&amp;oacute;digo para comenzar con Redux en una aplicaci&amp;oacute;n real. Asumen que comprende los temas de &lt;a href=&quot;../basics/index&quot;&gt;los&lt;/a&gt; tutoriales b&amp;aacute;sicos y &lt;a href=&quot;../advanced/index&quot;&gt;avanzados&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="d704feeae1991cd907524cb1c0f7f6fcf0575629" translate="yes" xml:space="preserve">
          <source>These are the basics of the React Redux API, but there are a few shortcuts and power options so we encourage you to check out &lt;a href=&quot;https://github.com/reactjs/react-redux&quot;&gt;its documentation&lt;/a&gt; in detail. In case you are worried about &lt;code&gt;mapStateToProps&lt;/code&gt; creating new objects too often, you might want to learn about &lt;a href=&quot;../recipes/computingderiveddata&quot;&gt;computing derived data&lt;/a&gt; with &lt;a href=&quot;https://github.com/reactjs/reselect&quot;&gt;reselect&lt;/a&gt;.</source>
          <target state="translated">Estos son los conceptos b&amp;aacute;sicos de React Redux API, pero hay algunos atajos y opciones de energ&amp;iacute;a, por lo que le recomendamos que consulte &lt;a href=&quot;https://github.com/reactjs/react-redux&quot;&gt;su documentaci&amp;oacute;n&lt;/a&gt; en detalle. En caso de que le preocupe que &lt;code&gt;mapStateToProps&lt;/code&gt; cree nuevos objetos con demasiada frecuencia, es posible que desee aprender a &lt;a href=&quot;../recipes/computingderiveddata&quot;&gt;calcular datos derivados&lt;/a&gt; con &lt;a href=&quot;https://github.com/reactjs/reselect&quot;&gt;reselect&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="4c26d64685238ce4dbcec18d03116138fa0bb9a0" translate="yes" xml:space="preserve">
          <source>These basic patterns allow you to do things like having multiple instances of a smart connected component within the UI, or reuse common logic for generic capabilities such as pagination or sorting.</source>
          <target state="translated">Estos patrones básicos le permiten hacer cosas como tener múltiples instancias de un componente conectado inteligente dentro de la interfaz de usuario,o reutilizar la lógica común para capacidades genéricas como la paginación o la clasificación.</target>
        </trans-unit>
        <trans-unit id="c558d4ebff40066937cf4fb4becc7cf460cf85d8" translate="yes" xml:space="preserve">
          <source>These new functions would typically fall into one of three categories:</source>
          <target state="translated">Estas nuevas funciones típicamente caerían en una de las tres categorías:</target>
        </trans-unit>
        <trans-unit id="84e2759c050a4d6ddff70ba97270b913483ea299" translate="yes" xml:space="preserve">
          <source>These were the actions governed by the user interaction. We will also have another kind of action, governed by the network requests. We will see how to dispatch them later, but for now, we just want to define them.</source>
          <target state="translated">Estas eran las acciones que se regían por la interacción del usuario.También tendremos otro tipo de acción,gobernada por las peticiones de la red.Veremos cómo despacharlas más tarde,pero por ahora,sólo queremos definirlas.</target>
        </trans-unit>
        <trans-unit id="734284615f4837016bf49d7e82571425d6842e5d" translate="yes" xml:space="preserve">
          <source>They can also press a &amp;ldquo;refresh&amp;rdquo; button to update it:</source>
          <target state="translated">Tambi&amp;eacute;n pueden presionar un bot&amp;oacute;n &quot;actualizar&quot; para actualizarlo:</target>
        </trans-unit>
        <trans-unit id="0d52a5e55f55bac64300f695ab9f42bb206bbca5" translate="yes" xml:space="preserve">
          <source>They can provide a useful alternative to writing manual immutable update logic.</source>
          <target state="translated">Pueden ser una alternativa útil para escribir la lógica de actualización inmutable manual.</target>
        </trans-unit>
        <trans-unit id="19c5827cb1612ac05aed827f421dec6e57380bb2" translate="yes" xml:space="preserve">
          <source>They describe the &lt;em&gt;look&lt;/em&gt; but don't know &lt;em&gt;where&lt;/em&gt; the data comes from, or &lt;em&gt;how&lt;/em&gt; to change it. They only render what's given to them. If you migrate from Redux to something else, you'll be able to keep all these components exactly the same. They have no dependency on Redux.</source>
          <target state="translated">Describen el &lt;em&gt;aspecto,&lt;/em&gt; pero no saben de &lt;em&gt;d&amp;oacute;nde&lt;/em&gt; provienen los datos ni &lt;em&gt;c&amp;oacute;mo&lt;/em&gt; cambiarlos. Solo rinden lo que se les da. Si migra de Redux a otra cosa, podr&amp;aacute; mantener todos estos componentes exactamente iguales. No dependen de Redux.</target>
        </trans-unit>
        <trans-unit id="b1159323b5c6aa9389a4540485a8db710c7036ca" translate="yes" xml:space="preserve">
          <source>Think of an action as a very brief snippet of news. &amp;ldquo;Mary liked article 42.&amp;rdquo; or &amp;ldquo;&amp;lsquo;Read the Redux docs.' was added to the list of todos.&amp;rdquo;</source>
          <target state="translated">Piense en una acci&amp;oacute;n como un fragmento muy breve de noticias. &quot;A Mary le gust&amp;oacute; el art&amp;iacute;culo 42&quot;. o &amp;ldquo;'Leer los documentos de Redux'. fue agregado a la lista de todos &quot;.</target>
        </trans-unit>
        <trans-unit id="b4665b478e044391de06bdde9d3e79d16edd37cb" translate="yes" xml:space="preserve">
          <source>Thinking in terms of state and state shape</source>
          <target state="translated">Pensar en términos de estado y forma de estado</target>
        </trans-unit>
        <trans-unit id="91e52043da589de141b602e3e454bd09930f4ace" translate="yes" xml:space="preserve">
          <source>This API is intended as a low-level primitive with no dependencies or complications, and can be used to build higher-level subscription logic. UI bindings such as React Redux can create a subscription for each connected component. It is also possible to write functions that can intelligently compare the old state vs the new state, and execute additional logic if certain pieces have changed. Examples include &lt;a href=&quot;https://github.com/jprichardson/redux-watch&quot;&gt;redux-watch&lt;/a&gt;, &lt;a href=&quot;https://github.com/ashaffer/redux-subscribe&quot;&gt;redux-subscribe&lt;/a&gt; and &lt;a href=&quot;https://github.com/ivantsov/redux-subscriber&quot;&gt;redux-subscriber&lt;/a&gt; which offer different approaches to specifying subscriptions and handling changes.</source>
          <target state="translated">Esta API est&amp;aacute; pensada como una primitiva de bajo nivel sin dependencias ni complicaciones, y se puede utilizar para crear una l&amp;oacute;gica de suscripci&amp;oacute;n de nivel superior. Los enlaces de UI como React Redux pueden crear una suscripci&amp;oacute;n para cada componente conectado. Tambi&amp;eacute;n es posible escribir funciones que puedan comparar inteligentemente el estado anterior con el nuevo y ejecutar l&amp;oacute;gica adicional si ciertas piezas han cambiado. Los ejemplos incluyen &lt;a href=&quot;https://github.com/jprichardson/redux-watch&quot;&gt;redux-watch&lt;/a&gt; , &lt;a href=&quot;https://github.com/ashaffer/redux-subscribe&quot;&gt;redux-subscribe&lt;/a&gt; y &lt;a href=&quot;https://github.com/ivantsov/redux-subscriber&quot;&gt;redux-subscriber,&lt;/a&gt; que ofrecen diferentes enfoques para especificar suscripciones y manejar cambios.</target>
        </trans-unit>
        <trans-unit id="b5bc9835804c7bf5d69285a0788d4ec1618aaf13" translate="yes" xml:space="preserve">
          <source>This allows you to gradually rewrite every Flux Store in your app as a reducer, but still export &lt;code&gt;createFluxStore(reducer)&lt;/code&gt; so the rest of your app is not aware that this is happening and sees the Flux stores.</source>
          <target state="translated">Esto le permite reescribir gradualmente cada Flux Store en su aplicaci&amp;oacute;n como un reductor, pero a&amp;uacute;n exportar &lt;code&gt;createFluxStore(reducer)&lt;/code&gt; para que el resto de su aplicaci&amp;oacute;n no se d&amp;eacute; cuenta de que esto est&amp;aacute; sucediendo y vea las tiendas Flux.</target>
        </trans-unit>
        <trans-unit id="a519a41d84a5c9b747a85285b24fa851ba29b4a3" translate="yes" xml:space="preserve">
          <source>This approach makes it very clear what's happening for the &lt;code&gt;&quot;ADD_COMMENTS&quot;&lt;/code&gt; case, but it does require nested updating logic, and some specific knowledge of the state tree shape. Depending on how you want to compose your reducer logic, this may or may not be desired.</source>
          <target state="translated">Este enfoque deja muy claro lo que est&amp;aacute; sucediendo para el caso &lt;code&gt;&quot;ADD_COMMENTS&quot;&lt;/code&gt; , pero requiere una l&amp;oacute;gica de actualizaci&amp;oacute;n anidada y alg&amp;uacute;n conocimiento espec&amp;iacute;fico de la forma del &amp;aacute;rbol de estado. Dependiendo de c&amp;oacute;mo desee componer su l&amp;oacute;gica reductora, esto puede ser deseado o no.</target>
        </trans-unit>
        <trans-unit id="e5b98104ccad15391aa66227a6551d8fc9f45bc0" translate="yes" xml:space="preserve">
          <source>This architecture might seem like an overkill for a counter app, but the beauty of this pattern is how well it scales to large and complex apps. It also enables very powerful developer tools, because it is possible to trace every mutation to the action that caused it. You can record user sessions and reproduce them just by replaying every action.</source>
          <target state="translated">Esta arquitectura puede parecer una exageración para una aplicación de mostrador,pero la belleza de este patrón es lo bien que se escala a aplicaciones grandes y complejas.También permite herramientas de desarrollo muy poderosas,porque es posible rastrear cada mutación a la acción que la causó.Se pueden grabar sesiones de usuario y reproducirlas simplemente reproduciendo cada acción.</target>
        </trans-unit>
        <trans-unit id="af9a7125c23f1d9f99cfc569936c1de486169781" translate="yes" xml:space="preserve">
          <source>This article is divided into an in-depth intro to help you grok the concept, and &lt;a href=&quot;#seven-examples&quot;&gt;a few practical examples&lt;/a&gt; to show the power of middleware at the very end. You may find it helpful to switch back and forth between them, as you flip between feeling bored and inspired.</source>
          <target state="translated">Este art&amp;iacute;culo est&amp;aacute; dividido en una introducci&amp;oacute;n detallada para ayudarlo a asimilar el concepto y &lt;a href=&quot;#seven-examples&quot;&gt;algunos ejemplos pr&amp;aacute;cticos&lt;/a&gt; para mostrar el poder del middleware al final. Puede resultarle &amp;uacute;til alternar entre ellos, a medida que cambia entre sentirse aburrido e inspirado.</target>
        </trans-unit>
        <trans-unit id="8cbc20dacc9ba008323bf48c00c65d6371405cdd" translate="yes" xml:space="preserve">
          <source>This assumes you are using &lt;a href=&quot;https://www.npmjs.com/&quot;&gt;npm&lt;/a&gt; as your package manager.</source>
          <target state="translated">Esto supone que est&amp;aacute; utilizando &lt;a href=&quot;https://www.npmjs.com/&quot;&gt;npm&lt;/a&gt; como administrador de paquetes.</target>
        </trans-unit>
        <trans-unit id="36abb8e476a11a68638ccf33afca7adf0759ffbc" translate="yes" xml:space="preserve">
          <source>This can be prevented by using &lt;code&gt;toJS()&lt;/code&gt; in a Higher Order Component, as discussed in the &lt;a href=&quot;#immutable-js-best-practices&quot;&gt;Best Practices section&lt;/a&gt; below.</source>
          <target state="translated">Esto se puede evitar usando &lt;code&gt;toJS()&lt;/code&gt; en un Componente de orden superior, como se explica en la &lt;a href=&quot;#immutable-js-best-practices&quot;&gt;secci&amp;oacute;n de Mejores pr&amp;aacute;cticas a&lt;/a&gt; continuaci&amp;oacute;n.</target>
        </trans-unit>
        <trans-unit id="80afa0a6f3a3ec186233802f8708789e06fce0fb" translate="yes" xml:space="preserve">
          <source>This chain of middleware is defined by the arguments passed to the &lt;code&gt;applyMiddleware&lt;/code&gt; function used when creating a store. Defining multiple chains will not work correctly, as they would have distinctly different &lt;code&gt;dispatch&lt;/code&gt; references and the different chains would effectively be disconnected.</source>
          <target state="translated">Esta cadena de middleware se define mediante los argumentos que se pasan a la funci&amp;oacute;n &lt;code&gt;applyMiddleware&lt;/code&gt; que se utiliza al crear una tienda. La definici&amp;oacute;n de m&amp;uacute;ltiples cadenas no funcionar&amp;aacute; correctamente, ya que tendr&amp;iacute;an referencias de &lt;code&gt;dispatch&lt;/code&gt; claramente diferentes y las diferentes cadenas se desconectar&amp;iacute;an efectivamente.</target>
        </trans-unit>
        <trans-unit id="e1fe353295b682382d86ef4ed3fc4f643382d4c5" translate="yes" xml:space="preserve">
          <source>This comment sums up the dichotomy nicely:</source>
          <target state="translated">Este comentario resume muy bien la dicotomía:</target>
        </trans-unit>
        <trans-unit id="324ca41cb1e96cbdc6d22ac4f0dc0ea7baff76ab" translate="yes" xml:space="preserve">
          <source>This complexity is difficult to handle as &lt;strong&gt;we're mixing two concepts&lt;/strong&gt; that are very hard for the human mind to reason about: &lt;strong&gt;mutation and asynchronicity.&lt;/strong&gt; I call them &lt;a href=&quot;https://en.wikipedia.org/wiki/Diet_Coke_and_Mentos_eruption&quot;&gt;Mentos and Coke&lt;/a&gt;. Both can be great in separation, but together they create a mess. Libraries like &lt;a href=&quot;http://facebook.github.io/react&quot;&gt;React&lt;/a&gt; attempt to solve this problem in the view layer by removing both asynchrony and direct DOM manipulation. However, managing the state of your data is left up to you. This is where Redux enters.</source>
          <target state="translated">Esta complejidad es dif&amp;iacute;cil de manejar ya &lt;strong&gt;que estamos mezclando dos conceptos&lt;/strong&gt; que son muy dif&amp;iacute;ciles de razonar para la mente humana: &lt;strong&gt;mutaci&amp;oacute;n y asincronicidad. &lt;/strong&gt;Los llamo &lt;a href=&quot;https://en.wikipedia.org/wiki/Diet_Coke_and_Mentos_eruption&quot;&gt;Mentos y Coca-Cola&lt;/a&gt; . Ambos pueden ser geniales en la separaci&amp;oacute;n, pero juntos crean un desastre. Bibliotecas como &lt;a href=&quot;http://facebook.github.io/react&quot;&gt;React&lt;/a&gt; intentan resolver este problema en la capa de vista eliminando tanto la asincron&amp;iacute;a como la manipulaci&amp;oacute;n directa del DOM. Sin embargo, la gesti&amp;oacute;n del estado de sus datos queda en manos de usted. Aqu&amp;iacute; es donde entra Redux.</target>
        </trans-unit>
        <trans-unit id="bed55034327edcc9ff177976049dde9f1a8518bf" translate="yes" xml:space="preserve">
          <source>This could be expanded in a number of ways. For example, an application that does a lot of editing of entities might want to keep two sets of &quot;tables&quot; in the state, one for the &quot;current&quot; item values and one for the &quot;work-in-progress&quot; item values. When an item is edited, its values could be copied into the &quot;work-in-progress&quot; section, and any actions that update it would be applied to the &quot;work-in-progress&quot; copy, allowing the editing form to be controlled by that set of data while another part of the UI still refers to the original version. &quot;Resetting&quot; the edit form would simply require removing the item from the &quot;work-in-progress&quot; section and re-copying the original data from &quot;current&quot; to &quot;work-in-progress&quot;, while &quot;applying&quot; the edits would involve copying the values from the &quot;work-in-progress&quot; section to the &quot;current&quot; section.</source>
          <target state="translated">Esto podría expandirse de varias maneras.Por ejemplo,una aplicación que hace mucha edición de entidades podría querer mantener dos conjuntos de &quot;tablas&quot; en el estado,uno para los valores de elementos &quot;actuales&quot; y otro para los valores de elementos &quot;en curso&quot;.Cuando se edita un elemento,sus valores podrían copiarse en la sección &quot;trabajo en curso&quot;,y cualquier acción que lo actualice se aplicaría a la copia &quot;trabajo en curso&quot;,permitiendo que el formulario de edición sea controlado por ese conjunto de datos mientras otra parte de la interfaz de usuario sigue refiriéndose a la versión original.Para &quot;reiniciar&quot; el formulario de edición simplemente habría que eliminar el elemento de la sección &quot;trabajo en curso&quot; y volver a copiar los datos originales de &quot;actual&quot; a &quot;trabajo en curso&quot;,mientras que para &quot;aplicar&quot; las ediciones habría que copiar los valores de la sección &quot;trabajo en curso&quot; a la sección &quot;actual&quot;.</target>
        </trans-unit>
        <trans-unit id="707c74a21f1746d2a960832a6b8a8cb90405d2f5" translate="yes" xml:space="preserve">
          <source>This ensures that neither the views nor the network callbacks will ever write directly to the state. Instead, they express an intent to transform the state. Because all changes are centralized and happen one by one in a strict order, there are no subtle race conditions to watch out for. As actions are just plain objects, they can be logged, serialized, stored, and later replayed for debugging or testing purposes.</source>
          <target state="translated">Esto asegura que ni los puntos de vista ni las llamadas de la red escribirán directamente al estado.En cambio,expresan la intención de transformar el estado.Debido a que todos los cambios están centralizados y suceden uno por uno en un orden estricto,no hay condiciones de raza sutil a las que prestar atención.Como las acciones son sólo objetos simples,pueden ser registradas,serializadas,almacenadas y luego reproducidas para propósitos de depuración o prueba.</target>
        </trans-unit>
        <trans-unit id="9210dbb4de5b40a1c13ddea412dbce790a6977d8" translate="yes" xml:space="preserve">
          <source>This example demonstrates how to use &lt;code&gt;compose&lt;/code&gt; to enhance a &lt;a href=&quot;store&quot;&gt;store&lt;/a&gt; with &lt;a href=&quot;applymiddleware&quot;&gt;&lt;code&gt;applyMiddleware&lt;/code&gt;&lt;/a&gt; and a few developer tools from the &lt;a href=&quot;https://github.com/gaearon/redux-devtools&quot;&gt;redux-devtools&lt;/a&gt; package.</source>
          <target state="translated">Este ejemplo demuestra c&amp;oacute;mo usar &lt;code&gt;compose&lt;/code&gt; para mejorar una &lt;a href=&quot;store&quot;&gt;tienda&lt;/a&gt; con &lt;a href=&quot;applymiddleware&quot;&gt; &lt;code&gt;applyMiddleware&lt;/code&gt; &lt;/a&gt; y algunas herramientas de desarrollo del paquete &lt;a href=&quot;https://github.com/gaearon/redux-devtools&quot;&gt;redux-devtools&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="370e39616b24bac8573bee9b7a0a5bf7ef9116fb" translate="yes" xml:space="preserve">
          <source>This example demonstrates how to use &lt;code&gt;compose&lt;/code&gt; to enhance a &lt;a href=&quot;store&quot;&gt;store&lt;/a&gt; with &lt;a href=&quot;applymiddleware&quot;&gt;&lt;code&gt;applyMiddleware&lt;/code&gt;&lt;/a&gt; and a few developer tools from the &lt;a href=&quot;https://github.com/reduxjs/redux-devtools&quot;&gt;redux-devtools&lt;/a&gt; package.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e6a4f9f87221d4ef2187fb40a3e81e24b1380c59" translate="yes" xml:space="preserve">
          <source>This example demonstrates rendering a deeply nested tree view and representing its state in a normalized form so it is easy to update from reducers. Good rendering performance is achieved by the container components granularly subscribing only to the tree nodes that they render.</source>
          <target state="translated">Este ejemplo demuestra la representación de una vista de árbol profundamente anidada y la representación de su estado de forma normalizada para que sea fácil de actualizar a partir de los reductores.El buen rendimiento de la representación se logra cuando los componentes del contenedor se suscriben granularmente sólo a los nodos del árbol que representan.</target>
        </trans-unit>
        <trans-unit id="23160794e888b31513354f69f0e10e67f1dfbb27" translate="yes" xml:space="preserve">
          <source>This example includes reading from an asynchronous API, fetching data in response to user input, showing loading indicators, caching the response, and invalidating the cache. It uses &lt;a href=&quot;https://github.com/gaearon/redux-thunk&quot;&gt;Redux Thunk&lt;/a&gt; middleware to encapsulate asynchronous side effects.</source>
          <target state="translated">Este ejemplo incluye leer desde una API asincr&amp;oacute;nica, obtener datos en respuesta a la entrada del usuario, mostrar indicadores de carga, almacenar en cach&amp;eacute; la respuesta e invalidar la cach&amp;eacute;. Utiliza el middleware &lt;a href=&quot;https://github.com/gaearon/redux-thunk&quot;&gt;Redux Thunk&lt;/a&gt; para encapsular los efectos secundarios asincr&amp;oacute;nicos.</target>
        </trans-unit>
        <trans-unit id="6057ac5d12f923863450854603485d162d2c570a" translate="yes" xml:space="preserve">
          <source>This example includes tests.</source>
          <target state="translated">Este ejemplo incluye pruebas.</target>
        </trans-unit>
        <trans-unit id="41942bb35c722938329a0363bb8f7775d2d0a267" translate="yes" xml:space="preserve">
          <source>This example shows important idiomatic Redux patterns that become important as your app grows. In particular, it shows how to store entities in a normalized way by their IDs, how to compose reducers on several levels, and how to define selectors alongside the reducers so the knowledge about the state shape is encapsulated. It also demonstrates logging with &lt;a href=&quot;https://github.com/fcomb/redux-logger&quot;&gt;Redux Logger&lt;/a&gt; and conditional dispatching of actions with &lt;a href=&quot;https://github.com/gaearon/redux-thunk&quot;&gt;Redux Thunk&lt;/a&gt; middleware.</source>
          <target state="translated">Este ejemplo muestra importantes patrones idiom&amp;aacute;ticos de Redux que se vuelven importantes a medida que crece su aplicaci&amp;oacute;n. En particular, muestra c&amp;oacute;mo almacenar entidades de una manera normalizada por sus ID, c&amp;oacute;mo componer reductores en varios niveles y c&amp;oacute;mo definir selectores junto con los reductores para que se encapsule el conocimiento sobre la forma del estado. Tambi&amp;eacute;n demuestra el registro con &lt;a href=&quot;https://github.com/fcomb/redux-logger&quot;&gt;Redux Logger&lt;/a&gt; y el env&amp;iacute;o condicional de acciones con el middleware &lt;a href=&quot;https://github.com/gaearon/redux-thunk&quot;&gt;Redux Thunk&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="5a2efc02036a88d2c881bcfa8505561b220da980" translate="yes" xml:space="preserve">
          <source>This function does correctly return a shallow copy of the top-level state object, but because the &lt;code&gt;nestedState&lt;/code&gt; variable was still pointing at the existing object, the state was directly mutated.</source>
          <target state="translated">Esta funci&amp;oacute;n devuelve correctamente una copia superficial del objeto de estado de nivel superior, pero debido a que la variable &lt;code&gt;nestedState&lt;/code&gt; todav&amp;iacute;a apuntaba al objeto existente, el estado se mut&amp;oacute; directamente.</target>
        </trans-unit>
        <trans-unit id="25186369f150cbdf9cc822a9194a9d16061eb99f" translate="yes" xml:space="preserve">
          <source>This function helps you organize your reducers to manage their own slices of state, similar to how you would have different Flux Stores to manage different state. With Redux, there is just one store, but &lt;code&gt;combineReducers&lt;/code&gt; helps you keep the same logical division between reducers.</source>
          <target state="translated">Esta funci&amp;oacute;n le ayuda a organizar sus reductores para administrar sus propios segmentos de estado, de manera similar a como tendr&amp;iacute;a diferentes Flux Stores para administrar diferentes estados. Con Redux, solo hay una tienda, pero &lt;code&gt;combineReducers&lt;/code&gt; lo ayuda a mantener la misma divisi&amp;oacute;n l&amp;oacute;gica entre reductores.</target>
        </trans-unit>
        <trans-unit id="1b6fed5d5eb1e62767d1062998c1daeac688f17a" translate="yes" xml:space="preserve">
          <source>This function is mildly opinionated and is skewed towards helping beginners avoid common pitfalls. This is why it attempts to enforce some rules that you don't have to follow if you write the root reducer manually.</source>
          <target state="translated">Esta función es ligeramente dogmática y está orientada a ayudar a los principiantes a evitar los peligros más comunes.Es por eso que intenta hacer cumplir algunas reglas que no tienes que seguir si escribes el reductor de raíz manualmente.</target>
        </trans-unit>
        <trans-unit id="bd18efd9ce822617a56ac05dccc19791483c2b46" translate="yes" xml:space="preserve">
          <source>This has the effect of spreading Immutable.JS across your entire codebase, including potentially your components, where you may prefer not to have such external dependencies. Your entire codebase must know what is, and what is not, an Immutable.JS object. It also makes removing Immutable.JS from your app difficult in the future, should you ever need to.</source>
          <target state="translated">Esto tiene el efecto de extender Immutable.JS a través de toda su base de código,incluyendo potencialmente sus componentes,donde puede preferir no tener tales dependencias externas.Toda tu base de código debe saber qué es y qué no es un objeto Immutable.JS.También hace que quitar Immutable.JS de su aplicación sea difícil en el futuro,si alguna vez lo necesita.</target>
        </trans-unit>
        <trans-unit id="452cdbd1b5122ca3249e3d165f402ca90ca1b7d3" translate="yes" xml:space="preserve">
          <source>This helper is just a convenience! You can write your own &lt;code&gt;combineReducers&lt;/code&gt; that &lt;a href=&quot;https://github.com/acdlite/reduce-reducers&quot;&gt;works differently&lt;/a&gt;, or even assemble the state object from the child reducers manually and write a root reducing function explicitly, like you would write any other function.</source>
          <target state="translated">&amp;iexcl;Este ayudante es solo una comodidad! Puede escribir sus propios &lt;code&gt;combineReducers&lt;/code&gt; que &lt;a href=&quot;https://github.com/acdlite/reduce-reducers&quot;&gt;funcionen de manera diferente&lt;/a&gt; , o incluso ensamblar el objeto de estado de los reductores secundarios manualmente y escribir una funci&amp;oacute;n de reducci&amp;oacute;n de ra&amp;iacute;z expl&amp;iacute;citamente, como escribir&amp;iacute;a cualquier otra funci&amp;oacute;n.</target>
        </trans-unit>
        <trans-unit id="ebc9476c901cfaf7607621afa617534b0f6a0851" translate="yes" xml:space="preserve">
          <source>This implementation isn't usable because it leaves out three important questions:</source>
          <target state="translated">Esta implementación no es utilizable porque deja fuera tres preguntas importantes:</target>
        </trans-unit>
        <trans-unit id="5af3f9d227b391b86b28a8a3163dbc7f9de3e1f6" translate="yes" xml:space="preserve">
          <source>This installs the package that provides the &lt;code&gt;undoable&lt;/code&gt; reducer enhancer.</source>
          <target state="translated">Esto instala el paquete que proporciona el potenciador reductor que se puede &lt;code&gt;undoable&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="930f0e45185d6f76c2ee37901cdc264e626e46fc" translate="yes" xml:space="preserve">
          <source>This is a basic demonstration of &lt;a href=&quot;../recipes/serverrendering&quot;&gt;server rendering&lt;/a&gt; with Redux and React. It shows how to prepare the initial store state on the server, and pass it down to the client so the client store can boot up from an existing state.</source>
          <target state="translated">Esta es una demostraci&amp;oacute;n b&amp;aacute;sica de &lt;a href=&quot;../recipes/serverrendering&quot;&gt;la representaci&amp;oacute;n&lt;/a&gt; del servidor con Redux y React. Muestra c&amp;oacute;mo preparar el estado de la tienda inicial en el servidor y pasarlo al cliente para que la tienda del cliente pueda arrancar desde un estado existente.</target>
        </trans-unit>
        <trans-unit id="b54fe358811791887040e3628c693b0d5817b4bb" translate="yes" xml:space="preserve">
          <source>This is a functional programming utility, and is included in Redux as a convenience.</source>
          <target state="translated">Esta es una utilidad de programación funcional,y está incluida en Redux como una conveniencia.</target>
        </trans-unit>
        <trans-unit id="70ffc3c7d398f7588925b4181068f9ae044df7c9" translate="yes" xml:space="preserve">
          <source>This is a functional programming utility, and is included in Redux as a convenience. You might want to use it to apply several &lt;a href=&quot;https://redux.js.org/understanding/thinking-in-redux/glossary#store-enhancer&quot;&gt;store enhancers&lt;/a&gt; in a row.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="902e57be6eebfba5d7e76929983c6c6258e9c271" translate="yes" xml:space="preserve">
          <source>This is a glossary of the core terms in Redux, along with their type signatures. The types are documented using &lt;a href=&quot;http://flowtype.org/docs/quick-reference.html&quot;&gt;Flow notation&lt;/a&gt;.</source>
          <target state="translated">Este es un glosario de los t&amp;eacute;rminos b&amp;aacute;sicos en Redux, junto con sus firmas de tipo. Los tipos se documentan mediante &lt;a href=&quot;http://flowtype.org/docs/quick-reference.html&quot;&gt;notaci&amp;oacute;n de flujo&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="6257b5ee434e5a7cbdec29bbbff466cb0f6850ea" translate="yes" xml:space="preserve">
          <source>This is a long and complex topic, with a wide variety of opinions on how code should be organized and what approaches should be used.</source>
          <target state="translated">Se trata de un tema largo y complejo,con una amplia variedad de opiniones sobre la forma en que debe organizarse el código y los enfoques que deben utilizarse.</target>
        </trans-unit>
        <trans-unit id="e6d24f497bb054862fa8e8a2557607b7b064ec7c" translate="yes" xml:space="preserve">
          <source>This is a particular issue if you use &lt;code&gt;toJS()&lt;/code&gt; in a wrapped component&amp;rsquo;s &lt;code&gt;mapStateToProps&lt;/code&gt; function, as React-Redux shallowly compares each value in the returned props object. For example, the value referenced by the &lt;code&gt;todos&lt;/code&gt; prop returned from &lt;code&gt;mapStateToProps&lt;/code&gt; below will always be a different object, and so will fail a shallow equality check.</source>
          <target state="translated">Este es un problema particular si usa &lt;code&gt;toJS()&lt;/code&gt; en la funci&amp;oacute;n &lt;code&gt;mapStateToProps&lt;/code&gt; de un componente envuelto , ya que React-Redux compara superficialmente cada valor en el objeto de props devuelto. Por ejemplo, el valor al que hace referencia el prop de &lt;code&gt;todos&lt;/code&gt; devuelto por &lt;code&gt;mapStateToProps&lt;/code&gt; a continuaci&amp;oacute;n siempre ser&amp;aacute; un objeto diferente, por lo que fallar&amp;aacute; una verificaci&amp;oacute;n de igualdad superficial.</target>
        </trans-unit>
        <trans-unit id="cf9d83f291ff6e78c4b43b491bded250a9eb9edd" translate="yes" xml:space="preserve">
          <source>This is a place to share common problems and solutions to them.</source>
          <target state="translated">Este es un lugar para compartir problemas comunes y soluciones a los mismos.</target>
        </trans-unit>
        <trans-unit id="a195446956524ddebe615c6b4dea2d58bc44adbd" translate="yes" xml:space="preserve">
          <source>This is a variation on the previous example. It is almost identical, but additionally shows how wrapping your reducer with &lt;a href=&quot;https://github.com/omnidan/redux-undo&quot;&gt;Redux Undo&lt;/a&gt; lets you add a Undo/Redo functionality to your app with a few lines of code.</source>
          <target state="translated">Esta es una variaci&amp;oacute;n del ejemplo anterior. Es casi id&amp;eacute;ntico, pero adem&amp;aacute;s muestra c&amp;oacute;mo envolver su reductor con &lt;a href=&quot;https://github.com/omnidan/redux-undo&quot;&gt;Redux Undo le&lt;/a&gt; permite agregar una funcionalidad Deshacer / Rehacer a su aplicaci&amp;oacute;n con unas pocas l&amp;iacute;neas de c&amp;oacute;digo.</target>
        </trans-unit>
        <trans-unit id="0b62f6d500da56c6baedf79190677dba7f4254d1" translate="yes" xml:space="preserve">
          <source>This is all we need to know for now. The particular mechanism to dispatch these actions together with network requests will be discussed later.</source>
          <target state="translated">Esto es todo lo que necesitamos saber por ahora.El mecanismo particular para despachar estas acciones junto con las solicitudes de la red se discutirá más adelante.</target>
        </trans-unit>
        <trans-unit id="eb3caec81383b1f746ae38119a27f33a05999d77" translate="yes" xml:space="preserve">
          <source>This is already closer to what we want! No matter where we dispatch an action, it is guaranteed to be logged. Monkeypatching never feels right, but we can live with this for now.</source>
          <target state="translated">¡Esto ya está más cerca de lo que queremos! No importa dónde enviemos una acción,está garantizado que se registre.El parcheo de monos nunca se siente bien,pero podemos vivir con esto por ahora.</target>
        </trans-unit>
        <trans-unit id="f9084a2b0e6567c9efcaf4f6cafe694a18afbf28" translate="yes" xml:space="preserve">
          <source>This is already looking good! When the app is larger, we can split the reducers into separate files and keep them completely independent and managing different data domains.</source>
          <target state="translated">¡Esto ya se ve bien! Cuando la aplicación es más grande,podemos dividir los reductores en archivos separados y mantenerlos completamente independientes y manejando diferentes dominios de datos.</target>
        </trans-unit>
        <trans-unit id="6e84b6d20c865b455ea1e36d59bd6ef0bdf66609" translate="yes" xml:space="preserve">
          <source>This is basically the whole idea of Redux. Note that we haven&amp;rsquo;t used any Redux APIs. It comes with a few utilities to facilitate this pattern, but the main idea is that you describe how your state is updated over time in response to action objects, and 90% of the code you write is just plain JavaScript, with no use of Redux itself, its APIs, or any magic.</source>
          <target state="translated">Esta es b&amp;aacute;sicamente toda la idea de Redux. Tenga en cuenta que no hemos utilizado ninguna API de Redux. Viene con algunas utilidades para facilitar este patr&amp;oacute;n, pero la idea principal es que describa c&amp;oacute;mo se actualiza su estado con el tiempo en respuesta a los objetos de acci&amp;oacute;n, y el 90% del c&amp;oacute;digo que escribe es simplemente JavaScript, sin uso de Redux s&amp;iacute; mismo, sus API, o cualquier magia.</target>
        </trans-unit>
        <trans-unit id="1d949a0761f2189999f3ad52f3288abf9de3a495" translate="yes" xml:space="preserve">
          <source>This is because two variables that reference the same object will &lt;em&gt;always&lt;/em&gt; be equal, regardless of whether the object&amp;rsquo;s values changes or not, as they're both referencing the same object. Thus, the following will always return true:</source>
          <target state="translated">Esto se debe a que dos variables que hacen referencia al mismo objeto &lt;em&gt;siempre&lt;/em&gt; ser&amp;aacute;n iguales, independientemente de si los valores del objeto cambian o no, ya que ambas hacen referencia al mismo objeto. Por lo tanto, lo siguiente siempre ser&amp;aacute; verdadero:</target>
        </trans-unit>
        <trans-unit id="fc3fc2dfb4922ecd32a6e14514c4b08ea0d0030f" translate="yes" xml:space="preserve">
          <source>This is it! Run &lt;code&gt;npm install&lt;/code&gt; and &lt;code&gt;npm start&lt;/code&gt; in the &lt;a href=&quot;https://github.com/reactjs/redux/tree/master/examples/todos-with-undo&quot;&gt;example folder&lt;/a&gt; and try it out!</source>
          <target state="translated">&amp;iexcl;Eso es todo! Ejecute &lt;code&gt;npm install&lt;/code&gt; y &lt;code&gt;npm start&lt;/code&gt; en la &lt;a href=&quot;https://github.com/reactjs/redux/tree/master/examples/todos-with-undo&quot;&gt;carpeta de ejemplo&lt;/a&gt; y pru&amp;eacute;belo.</target>
        </trans-unit>
        <trans-unit id="7e796128df0ba3814b3885d8d0519693c9b9ad24" translate="yes" xml:space="preserve">
          <source>This is much less typing! If you'd like, you can still have &amp;ldquo;vanilla&amp;rdquo; action creators like &lt;code&gt;loadPostsSuccess&lt;/code&gt; which you'd use from a container &lt;code&gt;loadPosts&lt;/code&gt; action creator.</source>
          <target state="translated">&amp;iexcl;Esto es mucho menos mecanografiado! Si lo desea, a&amp;uacute;n puede tener creadores de acciones &amp;ldquo;vanilla&amp;rdquo; como &lt;code&gt;loadPostsSuccess&lt;/code&gt; que usar&amp;iacute;a desde un creador de acciones de contenedores &lt;code&gt;loadPosts&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="eb9aca90fe801173ceb6b822d63183ddbc28a375" translate="yes" xml:space="preserve">
          <source>This is the basic structure that a typical Redux reducer function uses.</source>
          <target state="translated">Esta es la estructura básica que utiliza una típica función de reducción del Redux.</target>
        </trans-unit>
        <trans-unit id="368280f7bdb144d919f7347598b1d6a5599ac6c1" translate="yes" xml:space="preserve">
          <source>This is the best example to get a deeper understanding of how the state updates work together with components in Redux. It shows how reducers can delegate handling actions to other reducers, and how you can use &lt;a href=&quot;https://github.com/reactjs/react-redux&quot;&gt;React Redux&lt;/a&gt; to generate container components from your presentational components.</source>
          <target state="translated">Este es el mejor ejemplo para obtener una comprensi&amp;oacute;n m&amp;aacute;s profunda de c&amp;oacute;mo funcionan las actualizaciones de estado junto con los componentes en Redux. Muestra c&amp;oacute;mo los reductores pueden delegar acciones de manejo a otros reductores y c&amp;oacute;mo puede usar &lt;a href=&quot;https://github.com/reactjs/react-redux&quot;&gt;React Redux&lt;/a&gt; para generar componentes de contenedor a partir de sus componentes de presentaci&amp;oacute;n.</target>
        </trans-unit>
        <trans-unit id="7c0930eaef048e02ff0d006be39c4d3167f83671" translate="yes" xml:space="preserve">
          <source>This is the classical &lt;a href=&quot;http://todomvc.com/&quot;&gt;TodoMVC&lt;/a&gt; example. It's here for the sake of comparison, but it covers the same points as the Todos example.</source>
          <target state="translated">Este es el ejemplo cl&amp;aacute;sico de &lt;a href=&quot;http://todomvc.com/&quot;&gt;TodoMVC&lt;/a&gt; . Est&amp;aacute; aqu&amp;iacute; por el bien de la comparaci&amp;oacute;n, pero cubre los mismos puntos que el ejemplo de Todos.</target>
        </trans-unit>
        <trans-unit id="881a664225fae7f2e081dcac2b6413fc1deac116" translate="yes" xml:space="preserve">
          <source>This is the complete source code of the Reddit headline fetching example we built during the &lt;a href=&quot;index&quot;&gt;advanced tutorial&lt;/a&gt;.</source>
          <target state="translated">Este es el c&amp;oacute;digo fuente completo del ejemplo de obtenci&amp;oacute;n de t&amp;iacute;tulos de Reddit que creamos durante el &lt;a href=&quot;index&quot;&gt;tutorial avanzado&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="b128d306a5e5a953daf8f443d8e01801093f1c92" translate="yes" xml:space="preserve">
          <source>This is the complete source code of the tiny todo app we built during the &lt;a href=&quot;index&quot;&gt;basics tutorial&lt;/a&gt;.</source>
          <target state="translated">Este es el c&amp;oacute;digo fuente completo de la peque&amp;ntilde;a aplicaci&amp;oacute;n de tareas que creamos durante el &lt;a href=&quot;index&quot;&gt;tutorial b&amp;aacute;sico&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="bc3837809c1d7850b463c21cec48fd076bd0bf1f" translate="yes" xml:space="preserve">
          <source>This is the most advanced example. It is dense by design. It covers keeping fetched entities in a normalized cache, implementing a custom middleware for API calls, rendering partially loaded data, pagination, caching responses, displaying error messages, and routing. Additionally, it includes Redux DevTools.</source>
          <target state="translated">Este es el ejemplo más avanzado.Es denso por diseño.Abarca el mantenimiento de entidades recuperadas en una caché normalizada,la implementación de un middleware personalizado para las llamadas a la API,el renderizado de datos parcialmente cargados,la paginación,las respuestas de la caché,la visualización de mensajes de error y el enrutamiento.Además,incluye Redux DevTools.</target>
        </trans-unit>
        <trans-unit id="2c30e411c7f43679e4c0b5f0869178bc002c0cf5" translate="yes" xml:space="preserve">
          <source>This is the most basic example of using Redux together with React. For simplicity, it re-renders the React component manually when the store changes. In real projects, you will likely want to use the highly performant &lt;a href=&quot;https://github.com/reactjs/react-redux&quot;&gt;React Redux&lt;/a&gt; bindings instead.</source>
          <target state="translated">Este es el ejemplo m&amp;aacute;s b&amp;aacute;sico de usar Redux junto con React. Para simplificar, vuelve a renderizar el componente React manualmente cuando cambia la tienda. En proyectos reales, es probable que desee utilizar los enlaces &lt;a href=&quot;https://github.com/reactjs/react-redux&quot;&gt;React Redux de&lt;/a&gt; alto rendimiento en su lugar.</target>
        </trans-unit>
        <trans-unit id="45b51f5c0e7ff3cf14ba10063daa88c68ff8ff42" translate="yes" xml:space="preserve">
          <source>This is worth emphasising: &lt;em&gt;If the reducers all return the same &lt;code&gt;state&lt;/code&gt; object passed to them, then &lt;code&gt;combineReducers&lt;/code&gt; will return the &lt;em&gt;current&lt;/em&gt; root state object, not the newly updated one.&lt;/em&gt;</source>
          <target state="translated">Vale la pena enfatizar esto: &lt;em&gt;si todos los reductores devuelven el mismo objeto de &lt;code&gt;state&lt;/code&gt; que se les pas&amp;oacute;, entonces &lt;code&gt;combineReducers&lt;/code&gt; devolver&amp;aacute; el objeto de estado ra&amp;iacute;z &lt;em&gt;actual&lt;/em&gt; , no el reci&amp;eacute;n actualizado.&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="903f50f13ad03393a3f2547dd8b1848ec4cbcd1e" translate="yes" xml:space="preserve">
          <source>This issue can be avoided by &lt;a href=&quot;https://medium.com/@dtinth/immutable-js-persistent-data-structures-and-structural-sharing-6d163fbd73d2#.z1g1ofrsi&quot;&gt;uncoupling your application logic from your data structures&lt;/a&gt;, as outlined in the &lt;a href=&quot;#immutable-js-best-practices&quot;&gt;best practices section&lt;/a&gt; below.</source>
          <target state="translated">Este problema puede evitarse &lt;a href=&quot;https://medium.com/@dtinth/immutable-js-persistent-data-structures-and-structural-sharing-6d163fbd73d2#.z1g1ofrsi&quot;&gt;desacoplando la l&amp;oacute;gica de su aplicaci&amp;oacute;n de sus estructuras de datos&lt;/a&gt; , como se describe en la &lt;a href=&quot;#immutable-js-best-practices&quot;&gt;secci&amp;oacute;n de mejores pr&amp;aacute;cticas a&lt;/a&gt; continuaci&amp;oacute;n.</target>
        </trans-unit>
        <trans-unit id="584dbd560993face7c721c8a75c7abf6bb57ad23" translate="yes" xml:space="preserve">
          <source>This lets us write more sophisticated async control flow gradually, while the consuming code can stay pretty much the same:</source>
          <target state="translated">Esto nos permite escribir un flujo de control asíncrono más sofisticado de forma gradual,mientras que el código de consumo puede permanecer prácticamente igual:</target>
        </trans-unit>
        <trans-unit id="f2f3d7f982ac8af695c62a8985d12ce4b3081ba8" translate="yes" xml:space="preserve">
          <source>This makes it awkward to interoperate not just with your own code, but also with other libraries, such as lodash or ramda, that expect plain JavaScript objects.</source>
          <target state="translated">Esto hace que sea incómodo interoperar no sólo con su propio código,sino también con otras bibliotecas,como lodash o ramda,que esperan objetos JavaScript simples.</target>
        </trans-unit>
        <trans-unit id="8150ebb2edf39875f24f4fc61c627e5d2769703b" translate="yes" xml:space="preserve">
          <source>This makes it easier for bundling tools to cut out unneeded modules and reduces the size of your builds.</source>
          <target state="translated">Esto facilita que las herramientas de empaquetamiento recorten los módulos innecesarios y reduce el tamaño de sus construcciones.</target>
        </trans-unit>
        <trans-unit id="cf383b9f03a180ee3b947f3cafa81eed01efef2e" translate="yes" xml:space="preserve">
          <source>This makes it easy to create universal apps, as the state from your server can be serialized and hydrated into the client with no extra coding effort. A single state tree also makes it easier to debug or inspect an application; it also enables you to persist your app's state in development, for a faster development cycle. Some functionality which has been traditionally difficult to implement - Undo/Redo, for example - can suddenly become trivial to implement, if all of your state is stored in a single tree.</source>
          <target state="translated">Esto facilita la creación de aplicaciones universales,ya que el estado de su servidor puede ser serializado e hidratado en el cliente sin esfuerzo de codificación adicional.Un árbol de estado único también facilita la depuración o inspección de una aplicación;también permite mantener el estado de la aplicación en desarrollo,para un ciclo de desarrollo más rápido.Algunas funcionalidades que tradicionalmente han sido difíciles de implementar-Deshacer/Rehacer,por ejemplo-pueden volverse repentinamente triviales de implementar,si todo su estado se almacena en un solo árbol.</target>
        </trans-unit>
        <trans-unit id="a7a113870425edd65d4dff2ca88a4e416744f63a" translate="yes" xml:space="preserve">
          <source>This makes it easy to migrate both to and from Redux.</source>
          <target state="translated">Esto facilita la migración hacia y desde el Redux.</target>
        </trans-unit>
        <trans-unit id="6870275e1cdc117fad62310af9bce1130ddad1e5" translate="yes" xml:space="preserve">
          <source>This makes them portable and easy to test.</source>
          <target state="translated">Esto los hace portátiles y fáciles de probar.</target>
        </trans-unit>
        <trans-unit id="0117d509de0b7ec1b99dd909691fb32267c2c284" translate="yes" xml:space="preserve">
          <source>This means that all data in an application follows the same lifecycle pattern, making the logic of your app more predictable and easier to understand. It also encourages data normalization, so that you don't end up with multiple, independent copies of the same data that are unaware of one another.</source>
          <target state="translated">Esto significa que todos los datos de una aplicación siguen el mismo patrón de ciclo de vida,lo que hace que la lógica de su aplicación sea más predecible y fácil de entender.También fomenta la normalización de los datos,de modo que no acabes con múltiples copias independientes de los mismos datos que no se conocen entre sí.</target>
        </trans-unit>
        <trans-unit id="f34593a4e623dbcb3f458552c5cd1622e7dfef63" translate="yes" xml:space="preserve">
          <source>This means that implementing Undo and Redo in an MVC application usually forces you to rewrite parts of your application to use a specific data mutation pattern like &lt;a href=&quot;https://en.wikipedia.org/wiki/Command_pattern&quot;&gt;Command&lt;/a&gt;.</source>
          <target state="translated">Esto significa que implementar Deshacer y Rehacer en una aplicaci&amp;oacute;n MVC generalmente lo obliga a reescribir partes de su aplicaci&amp;oacute;n para usar un patr&amp;oacute;n de mutaci&amp;oacute;n de datos espec&amp;iacute;fico como &lt;a href=&quot;https://en.wikipedia.org/wiki/Command_pattern&quot;&gt;Command&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="fc5b85dff1510174b626939c1704dc6629908600" translate="yes" xml:space="preserve">
          <source>This means that we could also write the insert and remove functions like this:</source>
          <target state="translated">Esto significa que también podríamos escribir la inserción y la eliminación de funciones como esta:</target>
        </trans-unit>
        <trans-unit id="cbde7ae30a809fab338b95f7689a7203a8a17b4d" translate="yes" xml:space="preserve">
          <source>This means you need to access your state with &lt;code&gt;state.todos.present&lt;/code&gt; instead of just &lt;code&gt;state.todos&lt;/code&gt;:</source>
          <target state="translated">Esto significa que debe acceder a su estado con &lt;code&gt;state.todos.present&lt;/code&gt; en lugar de solo &lt;code&gt;state.todos&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="386fbee61a70c4b922b5caaee2907587414b6c05" translate="yes" xml:space="preserve">
          <source>This mutated copy is a &lt;em&gt;separate&lt;/em&gt; object from that passed into the function, and so when it is returned, a shallow check will identify it as being a different object from that passed in, and so will fail.</source>
          <target state="translated">Esta copia mutada es un objeto &lt;em&gt;separado&lt;/em&gt; del pasado a la funci&amp;oacute;n, por lo que cuando se devuelve, una comprobaci&amp;oacute;n superficial lo identificar&amp;aacute; como un objeto diferente del pasado, por lo que fallar&amp;aacute;.</target>
        </trans-unit>
        <trans-unit id="ca74d22b1244f1a72be0424378b1b4d590fc1e51" translate="yes" xml:space="preserve">
          <source>This new tree is now the next state of your app! Every listener registered with &lt;a href=&quot;../api/store#subscribe&quot;&gt;&lt;code&gt;store.subscribe(listener)&lt;/code&gt;&lt;/a&gt; will now be invoked; listeners may call &lt;a href=&quot;../api/store#getState&quot;&gt;&lt;code&gt;store.getState()&lt;/code&gt;&lt;/a&gt; to get the current state.</source>
          <target state="translated">&amp;iexcl;Este nuevo &amp;aacute;rbol es ahora el siguiente estado de su aplicaci&amp;oacute;n! Cada oyente registrado con &lt;a href=&quot;../api/store#subscribe&quot;&gt; &lt;code&gt;store.subscribe(listener)&lt;/code&gt; &lt;/a&gt; ahora ser&amp;aacute; invocado; los oyentes pueden llamar a &lt;a href=&quot;../api/store#getState&quot;&gt; &lt;code&gt;store.getState()&lt;/code&gt; &lt;/a&gt; para obtener el estado actual.</target>
        </trans-unit>
        <trans-unit id="375420430845c3b31d4e0a7e67b9eb12e1e064ee" translate="yes" xml:space="preserve">
          <source>This object is like a &amp;ldquo;model&amp;rdquo; except that there are no setters. This is so that different parts of the code can&amp;rsquo;t change the state arbitrarily, causing hard-to-reproduce bugs.</source>
          <target state="translated">Este objeto es como un &quot;modelo&quot; excepto que no hay setters. Esto es para que diferentes partes del c&amp;oacute;digo no puedan cambiar el estado arbitrariamente, causando errores dif&amp;iacute;ciles de reproducir.</target>
        </trans-unit>
        <trans-unit id="10b96d7bed30bd18afc4040b966809bdd54e8f1c" translate="yes" xml:space="preserve">
          <source>This part is often confusing to beginners, because it is not immediately clear what information describes the state of an asynchronous application, and how to organize it in a single tree.</source>
          <target state="translated">Esta parte suele ser confusa para los principiantes,porque no está inmediatamente claro qué información describe el estado de una aplicación asincrónica y cómo organizarla en un solo árbol.</target>
        </trans-unit>
        <trans-unit id="726e2aa43c64e8c49eac59a956f48c4350c3da4d" translate="yes" xml:space="preserve">
          <source>This pattern is &lt;em&gt;not&lt;/em&gt; recommended for parts of the same app that share data. However, it can be useful when the bigger app has zero access to the smaller apps' internals, and we'd like to keep the fact that they are implemented with Redux as an implementation detail. Each component instance will have its own store, so they won't &amp;ldquo;know&amp;rdquo; about each other.</source>
          <target state="translated">Este patr&amp;oacute;n &lt;em&gt;no se&lt;/em&gt; recomienda para partes de la misma aplicaci&amp;oacute;n que comparten datos. Sin embargo, puede ser &amp;uacute;til cuando la aplicaci&amp;oacute;n m&amp;aacute;s grande no tiene acceso a los componentes internos de las aplicaciones m&amp;aacute;s peque&amp;ntilde;as, y nos gustar&amp;iacute;a mantener el hecho de que se implementan con Redux como detalle de implementaci&amp;oacute;n. Cada instancia de componente tendr&amp;aacute; su propia tienda, por lo que no se &quot;conocer&amp;aacute;n&quot; entre s&amp;iacute;.</target>
        </trans-unit>
        <trans-unit id="4797209ab61d0cba555b0ba999e5df76ff770f2a" translate="yes" xml:space="preserve">
          <source>This problem is caused predominantly by returning a mutated state object from a Redux reducer. With Immutable.JS, this problem simply does not exist, thereby removing a whole class of bugs from your app.</source>
          <target state="translated">Este problema es causado predominantemente por la devolución de un objeto en estado de mutación de un reductor Redux.Con Immutable.JS,este problema simplemente no existe,eliminando así toda una clase de errores de su aplicación.</target>
        </trans-unit>
        <trans-unit id="faee56a051b54fbdf7c577f45ce201c8fd514250" translate="yes" xml:space="preserve">
          <source>This produces the desired effect, but you wouldn't want to do it every time.</source>
          <target state="translated">Esto produce el efecto deseado,pero no querrías hacerlo siempre.</target>
        </trans-unit>
        <trans-unit id="112bf8b2448707863e70924e561703fd39856861" translate="yes" xml:space="preserve">
          <source>This project adheres to &lt;a href=&quot;http://semver.org/&quot;&gt;Semantic Versioning&lt;/a&gt;.</source>
          <target state="translated">Este proyecto se adhiere al &lt;a href=&quot;http://semver.org/&quot;&gt;control de versiones sem&amp;aacute;ntico&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="9ca436d5a0e732efb5749020024d046800e0f232" translate="yes" xml:space="preserve">
          <source>This requires the least amount of work on the reducer side, but does require that the action creator potentially do a fair amount of work to organize the data into the correct shape before the action is dispatched. It also doesn't handle trying to delete an item.</source>
          <target state="translated">Esto requiere la menor cantidad de trabajo en el lado del reductor,pero requiere que el creador de la acción haga potencialmente una cantidad justa de trabajo para organizar los datos en la forma correcta antes de que la acción sea despachada.Tampoco se ocupa de tratar de eliminar un elemento.</target>
        </trans-unit>
        <trans-unit id="2e32344333ff16130ad1fc8d8911f91949fab05e" translate="yes" xml:space="preserve">
          <source>This section documents the complete Redux API. Keep in mind that Redux is only concerned with managing the state. In a real app, you'll also want to use UI bindings like &lt;a href=&quot;https://github.com/gaearon/react-redux&quot;&gt;react-redux&lt;/a&gt;.</source>
          <target state="translated">Esta secci&amp;oacute;n documenta la API de Redux completa. Tenga en cuenta que Redux solo se preocupa por administrar el estado. En una aplicaci&amp;oacute;n real, tambi&amp;eacute;n querr&amp;aacute; usar enlaces de interfaz de usuario como &lt;a href=&quot;https://github.com/gaearon/react-redux&quot;&gt;react-redux&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="8e4e2606978c9371c54128bb24c749164cec9f04" translate="yes" xml:space="preserve">
          <source>This section introduces a hypothetical extension to our app that allows it to support multiple Todo Lists. Please note that a full implementation of this extension requires changes to the reducers, components, actions etc. that aren't directly relevant to the topics discussed and have been omitted for brevity.</source>
          <target state="translated">Esta sección presenta una hipotética extensión de nuestra aplicación que le permite soportar múltiples listas de todo.Tenga en cuenta que una implementación completa de esta extensión requiere cambios en los reductores,componentes,acciones,etc.que no son directamente relevantes para los temas tratados y que han sido omitidos por brevedad.</target>
        </trans-unit>
        <trans-unit id="d91b745838a2d3e64174d93a13b4a7f1adc65cd3" translate="yes" xml:space="preserve">
          <source>This state shape better reflects the data involved, because we took care to set up the keys we passed to &lt;code&gt;combineReducers&lt;/code&gt;.</source>
          <target state="translated">Esta forma de estado refleja mejor los datos involucrados, porque nos encargamos de configurar las claves que pasamos a &lt;code&gt;combineReducers&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="125428949dd664c2936fb5646d4a4a0944ef542f" translate="yes" xml:space="preserve">
          <source>This state structure is much flatter overall. Compared to the original nested format, this is an improvement in several ways:</source>
          <target state="translated">Esta estructura de estado es mucho más plana en general.Comparado con el formato anidado original,esto es una mejora en varios sentidos:</target>
        </trans-unit>
        <trans-unit id="94ba4d7a3e72dccff4a9100d843bda3c33581bff" translate="yes" xml:space="preserve">
          <source>This was all very informative, but can't we just drop a library and use it instead of implementing &lt;code&gt;undoable&lt;/code&gt; ourselves? Sure, we can! Meet &lt;a href=&quot;https://github.com/omnidan/redux-undo&quot;&gt;Redux Undo&lt;/a&gt;, a library that provides simple Undo and Redo functionality for any part of your Redux tree.</source>
          <target state="translated">Todo esto fue muy informativo, pero &amp;iquest;no podemos simplemente soltar una biblioteca y usarla en lugar de implementar &lt;code&gt;undoable&lt;/code&gt; nosotros mismos? &amp;iexcl;Seguro que podemos! Conozca &lt;a href=&quot;https://github.com/omnidan/redux-undo&quot;&gt;Redux Undo&lt;/a&gt; , una biblioteca que proporciona funciones simples de deshacer y rehacer para cualquier parte de su &amp;aacute;rbol de Redux.</target>
        </trans-unit>
        <trans-unit id="96ab6b14f2ef0811b01a8fd50008edc6febd0745" translate="yes" xml:space="preserve">
          <source>This wasn't difficult, was it? Redux doesn't provide such a helper function by default because there are many ways to write it. Maybe you want it to automatically convert plain JS objects to Immutable objects to hydrate the server state. Maybe you want to merge the returned state with the current state. There may be different approaches to a &amp;ldquo;catch all&amp;rdquo; handler. All of this depends on the conventions you choose for your team on a specific project.</source>
          <target state="translated">Esto no fue dif&amp;iacute;cil, &amp;iquest;verdad? Redux no proporciona dicha funci&amp;oacute;n auxiliar por defecto porque hay muchas formas de escribirla. Tal vez desee que convierta autom&amp;aacute;ticamente objetos JS simples en objetos inmutables para hidratar el estado del servidor. Tal vez desee fusionar el estado devuelto con el estado actual. Puede haber diferentes enfoques para un manejador &quot;catch all&quot;. Todo esto depende de las convenciones que elija para su equipo en un proyecto espec&amp;iacute;fico.</target>
        </trans-unit>
        <trans-unit id="445c1e6f198a1adb4c272f78fb177f8661af0686" translate="yes" xml:space="preserve">
          <source>This way every instance will be independent.</source>
          <target state="translated">De esta manera cada instancia será independiente.</target>
        </trans-unit>
        <trans-unit id="92e38ef43aaabbe31217e626c55343afb37a1c0f" translate="yes" xml:space="preserve">
          <source>This, together with its performance and rich API for data manipulation, is why Immutable.JS is worth the effort.</source>
          <target state="translated">Esto,junto con su rendimiento y su rica API para la manipulación de datos,es la razón por la que Immutable.JS merece el esfuerzo.</target>
        </trans-unit>
        <trans-unit id="a60662bb0cf6dca00077914648ad22d8b2ebadfe" translate="yes" xml:space="preserve">
          <source>Three Principles</source>
          <target state="translated">Tres principios</target>
        </trans-unit>
        <trans-unit id="45a585aa3738a0a8dc2ee89ca5d822a00a010018" translate="yes" xml:space="preserve">
          <source>Thunk middleware is just one example of middleware. Middleware is not about &amp;ldquo;letting you dispatch functions&amp;rdquo;. It's about letting you dispatch anything that the particular middleware you use knows how to handle. Thunk middleware adds a specific behavior when you dispatch functions, but it really depends on the middleware you use.</source>
          <target state="translated">El middleware Thunk es solo un ejemplo de middleware. El middleware no se trata de &quot;permitirle distribuir funciones&quot;. Se trata de permitirle enviar cualquier cosa que el middleware particular que utiliza sepa c&amp;oacute;mo manejar. El middleware Thunk agrega un comportamiento espec&amp;iacute;fico cuando distribuye funciones, pero realmente depende del middleware que use.</target>
        </trans-unit>
        <trans-unit id="031dd77e620cd8fc8065335ff0e03be8cb20884f" translate="yes" xml:space="preserve">
          <source>Time-travel debugging requires that reducers be pure functions with no side effects, so that you can correctly jump between different states.</source>
          <target state="translated">La depuración del viaje en el tiempo requiere que los reductores sean funciones puras sin efectos secundarios,para poder saltar correctamente entre los diferentes estados.</target>
        </trans-unit>
        <trans-unit id="4cf1b54b003a59c279d1ba0b615a8a5f3459ca8c" translate="yes" xml:space="preserve">
          <source>Tips</source>
          <target state="translated">Tips</target>
        </trans-unit>
        <trans-unit id="ee1f5ebc6cc52d4f51b113f5097b8455a407c4ed" translate="yes" xml:space="preserve">
          <source>Tips For a Better Redux Architecture: Lessons for Enterprise Scale</source>
          <target state="translated">Consejos para una mejor arquitectura Redux:Lecciones para la escala empresarial</target>
        </trans-unit>
        <trans-unit id="901c769f8e578666848aa3aae81fe0b1028b6236" translate="yes" xml:space="preserve">
          <source>Tips to Handle Authentication in Redux</source>
          <target state="translated">Consejos para manejar la autentificación en el Redux</target>
        </trans-unit>
        <trans-unit id="e74f240f49222ea150d6391c54e16b213cd2b1cd" translate="yes" xml:space="preserve">
          <source>To apply multiple store enhancers, you may use &lt;a href=&quot;compose&quot;&gt;&lt;code&gt;compose()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">Para aplicar m&amp;uacute;ltiples potenciadores de tienda, puede usar &lt;a href=&quot;compose&quot;&gt; &lt;code&gt;compose()&lt;/code&gt; &lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="6e0f538cbe1b062d76f03414cbe7f487e9b2e5a6" translate="yes" xml:space="preserve">
          <source>To avoid these issues, ensure you follow the recommended &lt;a href=&quot;../recipes/reducers/immutableupdatepatterns&quot;&gt;immutable update patterns for ES6&lt;/a&gt;.</source>
          <target state="translated">Para evitar estos problemas, aseg&amp;uacute;rese de seguir los &lt;a href=&quot;../recipes/reducers/immutableupdatepatterns&quot;&gt;patrones de actualizaci&amp;oacute;n inmutables&lt;/a&gt; recomendados para ES6 .</target>
        </trans-unit>
        <trans-unit id="2f92fd6720446a22647fac455b49ebc045cfee8c" translate="yes" xml:space="preserve">
          <source>To change data</source>
          <target state="translated">Para cambiar los datos</target>
        </trans-unit>
        <trans-unit id="6565dc46b441e1305f44f9389c074e1086ac2ba7" translate="yes" xml:space="preserve">
          <source>To change something in the state, you need to dispatch an action. An action is a plain JavaScript object (notice how we don&amp;rsquo;t introduce any magic?) that describes what happened. Here are a few example actions:</source>
          <target state="translated">Para cambiar algo en el estado, debe enviar una acci&amp;oacute;n. Una acci&amp;oacute;n es un objeto JavaScript simple (&amp;iquest;te das cuenta de que no introducimos magia?) Que describe lo que sucedi&amp;oacute;. Aqu&amp;iacute; hay algunas acciones de ejemplo:</target>
        </trans-unit>
        <trans-unit id="eda24989c78e46dab8c06cd8412d3b18d2d68eab" translate="yes" xml:space="preserve">
          <source>To create it, pass your root &lt;a href=&quot;../glossary#reducer&quot;&gt;reducing function&lt;/a&gt; to &lt;a href=&quot;createstore&quot;&gt;&lt;code&gt;createStore&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">Para crearlo, pase su &lt;a href=&quot;../glossary#reducer&quot;&gt;funci&amp;oacute;n de reducci&amp;oacute;n de&lt;/a&gt; ra&amp;iacute;z a &lt;a href=&quot;createstore&quot;&gt; &lt;code&gt;createStore&lt;/code&gt; &lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="ac7a33667ce69790c31c3c6959a00eb15d3762e3" translate="yes" xml:space="preserve">
          <source>To do this, it assumes that the wrapped component is pure; that is, that the component will produce the &lt;a href=&quot;https://github.com/reactjs/react-redux/blob/f4d55840a14601c3a5bdc0c3d741fc5753e87f66/docs/troubleshooting.md#my-views-arent-updating-when-something-changes-outside-of-redux&quot;&gt;same results given the same props and state&lt;/a&gt;.</source>
          <target state="translated">Para hacer esto, asume que el componente envuelto es puro; es decir, que el componente producir&amp;aacute; los &lt;a href=&quot;https://github.com/reactjs/react-redux/blob/f4d55840a14601c3a5bdc0c3d741fc5753e87f66/docs/troubleshooting.md#my-views-arent-updating-when-something-changes-outside-of-redux&quot;&gt;mismos resultados dados los mismos apoyos y estado&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="29e591a3897c0d0b177067748378b071109328ac" translate="yes" xml:space="preserve">
          <source>To ensure that you may only apply middleware once, it operates on &lt;code&gt;createStore()&lt;/code&gt; rather than on &lt;code&gt;store&lt;/code&gt; itself. Instead of &lt;code&gt;(store, middlewares) =&amp;gt; store&lt;/code&gt;, its signature is &lt;code&gt;(...middlewares) =&amp;gt; (createStore) =&amp;gt; createStore&lt;/code&gt;.</source>
          <target state="translated">Para asegurarse de que solo pueda aplicar middleware una vez, opera en &lt;code&gt;createStore()&lt;/code&gt; lugar de en la &lt;code&gt;store&lt;/code&gt; misma. En lugar de &lt;code&gt;(store, middlewares) =&amp;gt; store&lt;/code&gt; , su firma es &lt;code&gt;(...middlewares) =&amp;gt; (createStore) =&amp;gt; createStore&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="6b6f0480002ee862ea4e286d796db8dca014c865" translate="yes" xml:space="preserve">
          <source>To hide Redux behind a React API, we can wrap it in a special component that initializes the store in the constructor:</source>
          <target state="translated">Para ocultar el Redux detrás de un API de React,podemos envolverlo en un componente especial que inicializa la tienda en el constructor:</target>
        </trans-unit>
        <trans-unit id="3a523db44ce0192bb638d90e57a1f49df365f204" translate="yes" xml:space="preserve">
          <source>To install the stable version:</source>
          <target state="translated">Para instalar la versión estable:</target>
        </trans-unit>
        <trans-unit id="598097c2e73e4e488253e6050c3375112c094ef7" translate="yes" xml:space="preserve">
          <source>To learn how to describe asynchronous API calls, read the current state inside action creators, perform side effects, or chain them to execute in a sequence, see the examples for &lt;a href=&quot;applymiddleware&quot;&gt;&lt;code&gt;applyMiddleware&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">Para aprender a describir llamadas API asincr&amp;oacute;nicas, leer el estado actual dentro de los creadores de acciones, realizar efectos secundarios o encadenarlos para ejecutarlos en una secuencia, consulte los ejemplos de &lt;a href=&quot;applymiddleware&quot;&gt; &lt;code&gt;applyMiddleware&lt;/code&gt; &lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="6ed8cb192b488a31ce6935bdfe7a74665d721d67" translate="yes" xml:space="preserve">
          <source>To log the action and state, you can change it to something like this:</source>
          <target state="translated">Para registrar la acción y el estado,puedes cambiarlo a algo como esto:</target>
        </trans-unit>
        <trans-unit id="a5f1cce2ba9b1ff85191ae7e2687f49081a21c5b" translate="yes" xml:space="preserve">
          <source>To prevent this from happening, you must &lt;em&gt;always return the state slice object that&amp;rsquo;s passed into a reducer if the reducer does not mutate the state.&lt;/em&gt;</source>
          <target state="translated">Para evitar que esto suceda, &lt;em&gt;siempre&lt;/em&gt; debe &lt;em&gt;devolver el objeto de corte de estado que se ha pasado a un reductor si el reductor no muta el estado.&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="89ea208e2cc969561f1309636abe373b57da32a9" translate="yes" xml:space="preserve">
          <source>To read data</source>
          <target state="translated">Para leer los datos</target>
        </trans-unit>
        <trans-unit id="eed3ad29a679d760cf82b7215bd55f2febaeba23" translate="yes" xml:space="preserve">
          <source>To resolve this issue, use a browser extension such as the &lt;a href=&quot;https://chrome.google.com/webstore/detail/immutablejs-object-format/hgldghadipiblonfkkicmgcbbijnpeog&quot;&gt;Immutable.js Object Formatter&lt;/a&gt;, which surfaces your data in Chrome Dev Tools, and hides Immutable.JS&amp;rsquo;s properties when inspecting your data.</source>
          <target state="translated">Para resolver este problema, use una extensi&amp;oacute;n de navegador como &lt;a href=&quot;https://chrome.google.com/webstore/detail/immutablejs-object-format/hgldghadipiblonfkkicmgcbbijnpeog&quot;&gt;Immutable.js Object Formatter&lt;/a&gt; , que muestra sus datos en Chrome Dev Tools y oculta las propiedades de Immutable.JS al inspeccionar sus datos.</target>
        </trans-unit>
        <trans-unit id="2401479a503b53af9fbceea514e83457e1c292ef" translate="yes" xml:space="preserve">
          <source>To send the data down to the client, we need to:</source>
          <target state="translated">Para enviar los datos al cliente,tenemos que hacerlo:</target>
        </trans-unit>
        <trans-unit id="2ab24a1445cfb045dd93cf66376dc281c3f5f6bd" translate="yes" xml:space="preserve">
          <source>To specify how the actions transform the state tree, you write pure &lt;em&gt;reducers&lt;/em&gt;.</source>
          <target state="translated">Para especificar c&amp;oacute;mo las acciones transforman el &amp;aacute;rbol de estado, escribe &lt;em&gt;reductores&lt;/em&gt; puros .</target>
        </trans-unit>
        <trans-unit id="50ef1b259d84757adca29f3df1d2d641b6eec11c" translate="yes" xml:space="preserve">
          <source>To sum this up, if you stick to Redux conventions and return the initial state from reducers when they're called with &lt;code&gt;undefined&lt;/code&gt; as the &lt;code&gt;state&lt;/code&gt; argument (the easiest way to implement this is to specify the &lt;code&gt;state&lt;/code&gt; ES6 default argument value), you're going to have a nice useful behavior for combined reducers. &lt;strong&gt;They will prefer the corresponding value in the &lt;code&gt;preloadedState&lt;/code&gt; object you pass to the &lt;code&gt;createStore()&lt;/code&gt; function, but if you didn't pass any, or if the corresponding field is not set, the default &lt;code&gt;state&lt;/code&gt; argument specified by the reducer is chosen instead.&lt;/strong&gt; This approach works well because it provides both initialization and hydration of existing data, but lets individual reducers reset their state if their data was not preserved. Of course you can apply this pattern recursively, as you can use &lt;code&gt;combineReducers()&lt;/code&gt; on many levels, or even compose reducers manually by calling reducers and giving them the relevant part of the state tree.</source>
          <target state="translated">En resumen, si se adhiere a las convenciones de Redux y devuelve el estado inicial de los reductores cuando se llaman con &lt;code&gt;undefined&lt;/code&gt; como argumento de &lt;code&gt;state&lt;/code&gt; (la forma m&amp;aacute;s f&amp;aacute;cil de implementar esto es especificar el valor del argumento predeterminado de ES6 de &lt;code&gt;state&lt;/code&gt; ), est&amp;aacute; tendr&amp;aacute; un buen comportamiento &amp;uacute;til para reductores combinados. &lt;strong&gt;Preferir&amp;aacute;n el valor correspondiente en el objeto &lt;code&gt;preloadedState&lt;/code&gt; que pasa a la funci&amp;oacute;n &lt;code&gt;createStore()&lt;/code&gt; , pero si no pas&amp;oacute; ninguno, o si el campo correspondiente no est&amp;aacute; configurado, se elige el argumento de &lt;code&gt;state&lt;/code&gt; predeterminado especificado por el reductor.&lt;/strong&gt;Este enfoque funciona bien porque proporciona tanto la inicializaci&amp;oacute;n como la hidrataci&amp;oacute;n de los datos existentes, pero permite que los reductores individuales restablezcan su estado si sus datos no se conservaron. Por supuesto, puede aplicar este patr&amp;oacute;n de forma recursiva, ya que puede usar &lt;code&gt;combineReducers()&lt;/code&gt; en muchos niveles, o incluso componer reductores manualmente llamando a reductores y d&amp;aacute;ndoles la parte relevante del &amp;aacute;rbol de estado.</target>
        </trans-unit>
        <trans-unit id="d8cdb0c4afd8333274d4833966816662659fdba2" translate="yes" xml:space="preserve">
          <source>To test the components we make a &lt;code&gt;setup()&lt;/code&gt; helper that passes the stubbed callbacks as props and renders the component with &lt;a href=&quot;http://airbnb.io/enzyme/docs/api/shallow.html&quot;&gt;shallow rendering&lt;/a&gt;. This lets individual tests assert on whether the callbacks were called when expected.</source>
          <target state="translated">Para probar los componentes, creamos un asistente de &lt;code&gt;setup()&lt;/code&gt; que pasa las devoluciones de llamada stubped como accesorios y renderiza el componente con &lt;a href=&quot;http://airbnb.io/enzyme/docs/api/shallow.html&quot;&gt;renderizado superficial&lt;/a&gt; . Esto permite que las pruebas individuales confirmen si las devoluciones de llamada se llamaron cuando se esperaba.</target>
        </trans-unit>
        <trans-unit id="511c9087c67a4a067c397c7eec06e3c3e446f664" translate="yes" xml:space="preserve">
          <source>To unsubscribe the change listener, invoke the function returned by &lt;code&gt;subscribe&lt;/code&gt;.</source>
          <target state="translated">Para cancelar la suscripci&amp;oacute;n al detector de cambios, invoque la funci&amp;oacute;n devuelta por &lt;code&gt;subscribe&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="898034cb5cc5c4fc7410f57fc7be8100ebeae451" translate="yes" xml:space="preserve">
          <source>To use &lt;code&gt;connect()&lt;/code&gt;, you need to define a special function called &lt;code&gt;mapStateToProps&lt;/code&gt; that tells how to transform the current Redux store state into the props you want to pass to a presentational component you are wrapping. For example, &lt;code&gt;VisibleTodoList&lt;/code&gt; needs to calculate &lt;code&gt;todos&lt;/code&gt; to pass to the &lt;code&gt;TodoList&lt;/code&gt;, so we define a function that filters the &lt;code&gt;state.todos&lt;/code&gt; according to the &lt;code&gt;state.visibilityFilter&lt;/code&gt;, and use it in its &lt;code&gt;mapStateToProps&lt;/code&gt;:</source>
          <target state="translated">Para usar &lt;code&gt;connect()&lt;/code&gt; , necesita definir una funci&amp;oacute;n especial llamada &lt;code&gt;mapStateToProps&lt;/code&gt; que le diga c&amp;oacute;mo transformar el estado actual de la tienda Redux en los accesorios que desea pasar a un componente de presentaci&amp;oacute;n que est&amp;aacute; envolviendo. Por ejemplo, &lt;code&gt;VisibleTodoList&lt;/code&gt; necesita calcular &lt;code&gt;todos&lt;/code&gt; para pasar a &lt;code&gt;TodoList&lt;/code&gt; , por lo que definimos una funci&amp;oacute;n que filtra el &lt;code&gt;state.todos&lt;/code&gt; seg&amp;uacute;n el &lt;code&gt;state.visibilityFilter&lt;/code&gt; , y lo usamos en su &lt;code&gt;mapStateToProps&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="9b84ac1ca067a403df64cc26ea17e56c8180c71f" translate="yes" xml:space="preserve">
          <source>To use it together with &lt;a href=&quot;http://babeljs.io&quot;&gt;Babel&lt;/a&gt;, you will need to install &lt;code&gt;babel-jest&lt;/code&gt;:</source>
          <target state="translated">Para usarlo junto con &lt;a href=&quot;http://babeljs.io&quot;&gt;Babel&lt;/a&gt; , necesitar&amp;aacute; instalar &lt;code&gt;babel-jest&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="717cd30aec4dd5a323fdb13aff5182c806d12d1b" translate="yes" xml:space="preserve">
          <source>TodoMVC</source>
          <target state="translated">TodoMVC</target>
        </trans-unit>
        <trans-unit id="a4114a83f4c6b03e326fda4a57471ca7c2d9fa96" translate="yes" xml:space="preserve">
          <source>Todos</source>
          <target state="translated">Todos</target>
        </trans-unit>
        <trans-unit id="6426098ad9410ea40ed780712b90e9b1ee4b090c" translate="yes" xml:space="preserve">
          <source>Todos with Undo</source>
          <target state="translated">Todos con Deshacer</target>
        </trans-unit>
        <trans-unit id="11dbf4818429dd1d9ae43c9b6f0078f50d78eca5" translate="yes" xml:space="preserve">
          <source>Top-Level Exports</source>
          <target state="translated">Exportaciones de alto nivel</target>
        </trans-unit>
        <trans-unit id="8ad8302d110b05d7e02330dac58628134fdcff02" translate="yes" xml:space="preserve">
          <source>Translations</source>
          <target state="translated">Translations</target>
        </trans-unit>
        <trans-unit id="c579263052bf20f3a459fb334a149d298234c3f6" translate="yes" xml:space="preserve">
          <source>Tree View</source>
          <target state="translated">Vista del árbol</target>
        </trans-unit>
        <trans-unit id="285ec850c11d78bac10f6bfa31b69a37f1b257c9" translate="yes" xml:space="preserve">
          <source>Troubleshooting</source>
          <target state="translated">Troubleshooting</target>
        </trans-unit>
        <trans-unit id="63ae2d8b43c9bd5c5d9a4a0152b1f52dd71f01f5" translate="yes" xml:space="preserve">
          <source>Troubleshooting: My views aren&amp;rsquo;t updating when something changes outside of Redux</source>
          <target state="translated">Soluci&amp;oacute;n de problemas: mis vistas no se actualizan cuando algo cambia fuera de Redux</target>
        </trans-unit>
        <trans-unit id="c5984c35d0b5720f5ededf659b1e4bb94f25efcc" translate="yes" xml:space="preserve">
          <source>Troubleshooting: Never mutate reducer arguments</source>
          <target state="translated">Solución de problemas:Nunca mute los argumentos reductores</target>
        </trans-unit>
        <trans-unit id="f2569e4c2636e5cc4f4bc61ec91ab96c592717fa" translate="yes" xml:space="preserve">
          <source>Troubleshooting: Nothing happens when I dispatch an action</source>
          <target state="translated">Solución de problemas:No pasa nada cuando despacho una acción</target>
        </trans-unit>
        <trans-unit id="5c79bb1da81bc4cdf1612625ab31bb11eaf51494" translate="yes" xml:space="preserve">
          <source>Try to avoid dispatching several times synchronously in a row in the places where you're concerned about performance. There are a number of addons and approaches that can batch up dispatches as well.</source>
          <target state="translated">Intenta evitar despachar varias veces seguidas sincrónicamente en los lugares donde te preocupa el rendimiento.Hay un número de complementos y enfoques que pueden agrupar los envíos también.</target>
        </trans-unit>
        <trans-unit id="72970471e5d1f5bed9e5c8dccde351d73710853a" translate="yes" xml:space="preserve">
          <source>Turns an object whose values are &lt;a href=&quot;../glossary#action-creator&quot;&gt;action creators&lt;/a&gt;, into an object with the same keys, but with every action creator wrapped into a &lt;a href=&quot;store#dispatch&quot;&gt;&lt;code&gt;dispatch&lt;/code&gt;&lt;/a&gt; call so they may be invoked directly.</source>
          <target state="translated">Convierte un objeto cuyos valores son &lt;a href=&quot;../glossary#action-creator&quot;&gt;creadores de acciones&lt;/a&gt; en un objeto con las mismas claves, pero con cada creador de acciones envuelto en una llamada de &lt;a href=&quot;store#dispatch&quot;&gt; &lt;code&gt;dispatch&lt;/code&gt; &lt;/a&gt; para que puedan ser invocados directamente.</target>
        </trans-unit>
        <trans-unit id="8a7b143d4c5f841fa87b3ffa44b1a514a798acb9" translate="yes" xml:space="preserve">
          <source>Turns an object whose values are &lt;a href=&quot;https://redux.js.org/understanding/thinking-in-redux/glossary#action-creator&quot;&gt;action creators&lt;/a&gt;, into an object with the same keys, but with every action creator wrapped into a &lt;a href=&quot;store#dispatchaction&quot;&gt;&lt;code&gt;dispatch&lt;/code&gt;&lt;/a&gt; call so they may be invoked directly.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e1733ad2a0216b6de85e1fcd35dfdee394e2afa0" translate="yes" xml:space="preserve">
          <source>Tutorials and Articles</source>
          <target state="translated">Tutoriales y artículos</target>
        </trans-unit>
        <trans-unit id="606fbca55ef1c11f19a4f936a99beb986380cf17" translate="yes" xml:space="preserve">
          <source>Twitter's mobile site</source>
          <target state="translated">El sitio móvil de Twitter</target>
        </trans-unit>
        <trans-unit id="9404d68c02ebdd30a4a808a24f9060471b759192" translate="yes" xml:space="preserve">
          <source>Twitter: Don't use Redux unless you're unhappy with local component state</source>
          <target state="translated">Twitter:No uses Redux a menos que estés descontento con el componente local del estado</target>
        </trans-unit>
        <trans-unit id="d2affd0dcee2425ca66385d0faf980e7f7ecdf02" translate="yes" xml:space="preserve">
          <source>Twitter: Don't use Redux until...</source>
          <target state="translated">Twitter:No uses Redux hasta...</target>
        </trans-unit>
        <trans-unit id="d7fb782e77a8b9b4edadf5251f4fd4a2b65f0b1b" translate="yes" xml:space="preserve">
          <source>Twitter: If your reducer looks boring, don't use redux</source>
          <target state="translated">Twitter:Si tu reductor se ve aburrido,no uses el reducx</target>
        </trans-unit>
        <trans-unit id="ee9af1a3c185fc74743f29130b1e126141719508" translate="yes" xml:space="preserve">
          <source>Twitter: Redux is a platform for developers to build customized state management with reusable things</source>
          <target state="translated">Twitter:Redux es una plataforma para que los desarrolladores construyan una gestión de estado personalizada con cosas reutilizables</target>
        </trans-unit>
        <trans-unit id="c1674978f90c098b4d6e689712105d7a768088c7" translate="yes" xml:space="preserve">
          <source>Twitter: Redux is designed to be predictable, not concise</source>
          <target state="translated">Twitter:Redux está diseñado para ser predecible,no conciso</target>
        </trans-unit>
        <trans-unit id="6df45452576b437fd3a9fe2fc716cd66dddc4433" translate="yes" xml:space="preserve">
          <source>Twitter: Redux is useful to eliminate deep prop passing</source>
          <target state="translated">Twitter:Redux es útil para eliminar el paso de la hélice profunda</target>
        </trans-unit>
        <trans-unit id="66661fb38bd97dedfe9248a69ac48fe3658b604e" translate="yes" xml:space="preserve">
          <source>Twitter: Redux scaling</source>
          <target state="translated">Twitter:Escalada de Redux</target>
        </trans-unit>
        <trans-unit id="ecc8be1c9df1cfaf1fb1dfafd8fc3b52bba36bca" translate="yes" xml:space="preserve">
          <source>Twitter: Redux vs MobX benchmark graph - Redux state shape matters</source>
          <target state="translated">Twitter:Gráfico de referencia de Redux vs MobX-La forma del estado Redux importa</target>
        </trans-unit>
        <trans-unit id="129f727416c8f720bb392b36e9ceac07d9339857" translate="yes" xml:space="preserve">
          <source>Twitter: Should I keep something in React component state?</source>
          <target state="translated">Twitter:¿Debo mantener algo en estado de componente de Reacción?</target>
        </trans-unit>
        <trans-unit id="1951b46de5200e3cec6a0f10d24bc32b95efcec1" translate="yes" xml:space="preserve">
          <source>Twitter: There is no ultimate file structure for Redux</source>
          <target state="translated">Twitter:No hay una estructura de archivos definitiva para el Redux</target>
        </trans-unit>
        <trans-unit id="a5ab467d2f0669472526a676c4046e4696c17a6a" translate="yes" xml:space="preserve">
          <source>Twitter: Using a reducer to update a component</source>
          <target state="translated">Twitter:Usar un reductor para actualizar un componente</target>
        </trans-unit>
        <trans-unit id="cd42d6934051561b9a42541c428d37e9a49eefd7" translate="yes" xml:space="preserve">
          <source>Twitter: You don't need Redux if your data never changes</source>
          <target state="translated">Twitter:No necesitas Redux si tus datos nunca cambian</target>
        </trans-unit>
        <trans-unit id="65143436c2a655126e87e9283def5be8f1f1d3d7" translate="yes" xml:space="preserve">
          <source>Twitter: common misconception - deep cloning</source>
          <target state="translated">Twitter:error común-clonación profunda</target>
        </trans-unit>
        <trans-unit id="f7449ca3dc33732cd2745f1868991eecc95eeb34" translate="yes" xml:space="preserve">
          <source>Twitter: emphasizing &amp;ldquo;one container&amp;rdquo; was a mistake</source>
          <target state="translated">Twitter: enfatizar &quot;un contenedor&quot; fue un error</target>
        </trans-unit>
        <trans-unit id="94f434b5b79b7481ac06603cc2fe9a2a75efff91" translate="yes" xml:space="preserve">
          <source>Twitter: most common Redux misconception</source>
          <target state="translated">Twitter:el concepto erróneo más común de Redux</target>
        </trans-unit>
        <trans-unit id="dec8b9c8b688102b7c98c2e00ef8f8e810be3a8d" translate="yes" xml:space="preserve">
          <source>Twitter: possible comparison between sagas, loops, and other approaches</source>
          <target state="translated">Twitter:posible comparación entre sagas,bucles y otros enfoques</target>
        </trans-unit>
        <trans-unit id="eb2d03183352dc0e1406c06a363bec69ab899d18" translate="yes" xml:space="preserve">
          <source>Twitter: state shape should be normalized</source>
          <target state="translated">Twitter:la forma del estado debe ser normalizada</target>
        </trans-unit>
        <trans-unit id="0fc31910b305d54661578ccc6703279eccabacfc" translate="yes" xml:space="preserve">
          <source>Understanding Middleware</source>
          <target state="translated">Entendiendo el Middleware</target>
        </trans-unit>
        <trans-unit id="aa44a604eeec984741a16fa1f77345805911c705" translate="yes" xml:space="preserve">
          <source>Understanding Programmatic Side-Effects</source>
          <target state="translated">Comprensión de los efectos secundarios programáticos</target>
        </trans-unit>
        <trans-unit id="5f8aabc2d6ab53ecb7bf65fd5b21232c2d632dbb" translate="yes" xml:space="preserve">
          <source>Understanding Redux</source>
          <target state="translated">Entendiendo el Redux</target>
        </trans-unit>
        <trans-unit id="da9a514a65a385fa6f49e9ff3ac2134dd5049f72" translate="yes" xml:space="preserve">
          <source>Understanding Redux Middleware</source>
          <target state="translated">Entendiendo el Middleware Redux</target>
        </trans-unit>
        <trans-unit id="1126940f0f175f3010de4d728fe1b602fc4c7c2e" translate="yes" xml:space="preserve">
          <source>Understanding Undo History</source>
          <target state="translated">Entendiendo la historia de Deshacer</target>
        </trans-unit>
        <trans-unit id="29149689e59122b80c1e38105a1193a813f6026c" translate="yes" xml:space="preserve">
          <source>Undo history is also part of your app's state, and there is no reason why we should approach it differently. Regardless of the type of the state changing over time, when you implement Undo and Redo, you want to keep track of the &lt;em&gt;history&lt;/em&gt; of this state at different points in time.</source>
          <target state="translated">El historial de deshacer tambi&amp;eacute;n es parte del estado de su aplicaci&amp;oacute;n, y no hay ninguna raz&amp;oacute;n por la que debamos abordarlo de manera diferente. Independientemente del tipo de estado que cambie con el tiempo, cuando implementa Deshacer y Rehacer, desea realizar un seguimiento del &lt;em&gt;historial&lt;/em&gt; de este estado en diferentes momentos.</target>
        </trans-unit>
        <trans-unit id="64a01a0c422c934a7950b6881de9ff78984dfa04" translate="yes" xml:space="preserve">
          <source>Unfortunately, the process of correctly applying immutable updates to deeply nested state can easily become verbose and hard to read. Here's what an example of updating &lt;code&gt;state.first.second[someId].fourth&lt;/code&gt; might look like:</source>
          <target state="translated">Desafortunadamente, el proceso de aplicar correctamente las actualizaciones inmutables a un estado profundamente anidado puede volverse f&amp;aacute;cilmente detallado y dif&amp;iacute;cil de leer. As&amp;iacute; es como se &lt;code&gt;state.first.second[someId].fourth&lt;/code&gt; un ejemplo de actualizaci&amp;oacute;n de state.first.second [someId] .fourth :</target>
        </trans-unit>
        <trans-unit id="e9541a9acaaaf0a817940ec4f10e5183c2dd8e50" translate="yes" xml:space="preserve">
          <source>Unfortunately, this setup has a problem. Because &lt;code&gt;combineReducers&lt;/code&gt; will call each slice reducer with the same action, dispatching &lt;code&gt;{type : 'INCREMENT'}&lt;/code&gt; will actually cause &lt;em&gt;all three&lt;/em&gt; counter values to be incremented, not just one of them. We need some way to wrap the &lt;code&gt;counter&lt;/code&gt; logic so that we can ensure that only the counter we care about is updated.</source>
          <target state="translated">Desafortunadamente, esta configuraci&amp;oacute;n tiene un problema. Debido a que &lt;code&gt;combineReducers&lt;/code&gt; llamar&amp;aacute; a cada reductor de rebanadas con la misma acci&amp;oacute;n, el env&amp;iacute;o de &lt;code&gt;{type : 'INCREMENT'}&lt;/code&gt; realidad har&amp;aacute; que se incrementen &lt;em&gt;los tres&lt;/em&gt; valores de contador, no solo uno de ellos. Necesitamos alguna forma de ajustar la l&amp;oacute;gica del &lt;code&gt;counter&lt;/code&gt; para que podamos asegurarnos de que solo se actualice el contador que nos importa.</target>
        </trans-unit>
        <trans-unit id="d02603176f8822a40aaa5b4270e49934a7f83824" translate="yes" xml:space="preserve">
          <source>Universal</source>
          <target state="translated">Universal</target>
        </trans-unit>
        <trans-unit id="994fe41b283ff02621f9c7dc77840d41dc98c31d" translate="yes" xml:space="preserve">
          <source>Unless you are targeting old browsers like IE9, you can always use &lt;code&gt;browserHistory&lt;/code&gt;.</source>
          <target state="translated">A menos que est&amp;eacute; apuntando a navegadores antiguos como IE9, siempre puede usar &lt;code&gt;browserHistory&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="2b1ae928f14271308acdf16284c1c3318ffccaac" translate="yes" xml:space="preserve">
          <source>Unlike Flux, &lt;strong&gt;Redux does not have the concept of a Dispatcher&lt;/strong&gt;. This is because it relies on pure functions instead of event emitters, and pure functions are easy to compose and don't need an additional entity managing them. Depending on how you view Flux, you may see this as either a deviation or an implementation detail. Flux has often been &lt;a href=&quot;https://speakerdeck.com/jmorrell/jsconf-uy-flux-those-who-forget-the-past-dot-dot-dot-1&quot;&gt;described as &lt;code&gt;(state, action) =&amp;gt; state&lt;/code&gt;&lt;/a&gt;. In this sense, Redux is true to the Flux architecture, but makes it simpler thanks to pure functions.</source>
          <target state="translated">A diferencia de Flux, &lt;strong&gt;Redux no tiene el concepto de Dispatcher&lt;/strong&gt; . Esto se debe a que se basa en funciones puras en lugar de emisores de eventos, y las funciones puras son f&amp;aacute;ciles de componer y no necesitan una entidad adicional que las administre. Dependiendo de c&amp;oacute;mo vea Flux, puede ver esto como una desviaci&amp;oacute;n o un detalle de implementaci&amp;oacute;n. El flujo se ha &lt;a href=&quot;https://speakerdeck.com/jmorrell/jsconf-uy-flux-those-who-forget-the-past-dot-dot-dot-1&quot;&gt;descrito a &lt;code&gt;(state, action) =&amp;gt; state&lt;/code&gt; &lt;/a&gt; menudo como (estado, acci&amp;oacute;n) =&amp;gt; estado . En este sentido, Redux es fiel a la arquitectura Flux, pero la simplifica gracias a funciones puras.</target>
        </trans-unit>
        <trans-unit id="369afc8b01a8d03d314e492b4f13b9436b7f3540" translate="yes" xml:space="preserve">
          <source>Unlike Immutable, Baobab doesn't yet implement any special efficient data structures under the hood, so you don't really win anything from using it together with Redux. It's easier to just use plain objects in this case.</source>
          <target state="translated">A diferencia de Immutable,Baobab no implementa ninguna estructura de datos eficiente especial bajo el capó,así que no ganas nada con su uso junto con Redux.Es más fácil usar objetos simples en este caso.</target>
        </trans-unit>
        <trans-unit id="dafc7d2108e005fe79487a219c36098fea188c9e" translate="yes" xml:space="preserve">
          <source>Unlike Redux, Elm is a language, so it is able to benefit from many things like enforced purity, static typing, out of the box immutability, and pattern matching (using the &lt;code&gt;case&lt;/code&gt; expression). Even if you don't plan to use Elm, you should read about the Elm architecture, and play with it. There is an interesting &lt;a href=&quot;https://github.com/paldepind/noname-functional-frontend-framework&quot;&gt;JavaScript library playground implementing similar ideas&lt;/a&gt;. We should look there for inspiration on Redux! One way that we can get closer to the static typing of Elm is by &lt;a href=&quot;https://github.com/reactjs/redux/issues/290&quot;&gt;using a gradual typing solution like Flow&lt;/a&gt;.</source>
          <target state="translated">A diferencia de Redux, Elm es un lenguaje, por lo que puede beneficiarse de muchas cosas como la pureza forzada, la escritura est&amp;aacute;tica, la inmutabilidad lista para usar y la coincidencia de patrones (usando la expresi&amp;oacute;n de &lt;code&gt;case&lt;/code&gt; ). Incluso si no planea usar Elm, debe leer sobre la arquitectura Elm y jugar con ella. Hay una &lt;a href=&quot;https://github.com/paldepind/noname-functional-frontend-framework&quot;&gt;biblioteca de JavaScript&lt;/a&gt; interesante que implementa ideas similares . &amp;iexcl;Deber&amp;iacute;amos buscar inspiraci&amp;oacute;n en Redux! Una forma en la que podemos acercarnos a la escritura est&amp;aacute;tica de Elm es &lt;a href=&quot;https://github.com/reactjs/redux/issues/290&quot;&gt;utilizando una soluci&amp;oacute;n de escritura gradual como Flow&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="fb573dae642cd298a26b5ad3f7d8a6aa2a22ab64" translate="yes" xml:space="preserve">
          <source>Updating Nested Objects</source>
          <target state="translated">Actualización de los objetos anidados</target>
        </trans-unit>
        <trans-unit id="ba005750a992aac6711d42039081d7dea24565c8" translate="yes" xml:space="preserve">
          <source>Updating Normalized Data</source>
          <target state="translated">Actualización de los datos normalizados</target>
        </trans-unit>
        <trans-unit id="34a615077aef7febb310a581aba6ddb1f4573a22" translate="yes" xml:space="preserve">
          <source>Updating an Item in an Array</source>
          <target state="translated">Actualizar un elemento de un conjunto</target>
        </trans-unit>
        <trans-unit id="38f356713eaa6d37ea438e2f8aa17840c5f0c625" translate="yes" xml:space="preserve">
          <source>Updating complex nested state trees can lead to verbose code that is tedious to write and difficult to debug.</source>
          <target state="translated">La actualización de complejos árboles de estado anidados puede llevar a un código verboso que es tedioso de escribir y difícil de depurar.</target>
        </trans-unit>
        <trans-unit id="692659407b3b434cf95e2a7e004744aa8b983be9" translate="yes" xml:space="preserve">
          <source>Updating one item in an array can be accomplished by using &lt;code&gt;Array.map&lt;/code&gt;, returning a new value for the item we want to update, and returning the existing values for all other items:</source>
          <target state="translated">La actualizaci&amp;oacute;n de un elemento en una matriz se puede lograr utilizando &lt;code&gt;Array.map&lt;/code&gt; , devolviendo un nuevo valor para el elemento que queremos actualizar y devolviendo los valores existentes para todos los dem&amp;aacute;s elementos:</target>
        </trans-unit>
        <trans-unit id="46dd59ad0b98ced1d4302c19c79265603a50b5a9" translate="yes" xml:space="preserve">
          <source>Updating the Selectors</source>
          <target state="translated">Actualizando los selectores</target>
        </trans-unit>
        <trans-unit id="59dca19d5e82666b029e887367ee83ee76a6cde5" translate="yes" xml:space="preserve">
          <source>Usage with React</source>
          <target state="translated">Uso con Reactancia</target>
        </trans-unit>
        <trans-unit id="4bd635c7ecaee77c3a25d970afecbab5846b8de6" translate="yes" xml:space="preserve">
          <source>Usage with React Router</source>
          <target state="translated">Uso con el router React</target>
        </trans-unit>
        <trans-unit id="f27c1c781c4770c2582ae4093ae556d8904e293c" translate="yes" xml:space="preserve">
          <source>Use Immutable.JS everywhere except your dumb components</source>
          <target state="translated">Usa Immutable.JS en todas partes excepto en tus tontos componentes</target>
        </trans-unit>
        <trans-unit id="9cd0943012b7d196bcc304b78eaf4d76beb5b078" translate="yes" xml:space="preserve">
          <source>Use Immutable.JS objects in your Smart Components</source>
          <target state="translated">Utiliza los objetos de Immutable.JS en tus Componentes Inteligentes</target>
        </trans-unit>
        <trans-unit id="14a99c911eb8f6fe086d95ec62a6192b50d4564c" translate="yes" xml:space="preserve">
          <source>Use a Higher Order Component to convert your Smart Component&amp;rsquo;s Immutable.JS props to your Dumb Component&amp;rsquo;s JavaScript props</source>
          <target state="translated">Utilice un componente de orden superior para convertir los accesorios Immutable.JS de su componente inteligente en los accesorios JavaScript de su componente tonto.</target>
        </trans-unit>
        <trans-unit id="5f88c0684b6236b23ff1f689452822f930944d64" translate="yes" xml:space="preserve">
          <source>Use an Immutable.JS-aware version of the &lt;code&gt;combineReducers&lt;/code&gt; function, such as the one in &lt;a href=&quot;https://www.npmjs.com/package/redux-immutable&quot;&gt;redux-immutable&lt;/a&gt;, as Redux itself expects the state tree to be a plain JavaScript object.</source>
          <target state="translated">Utilice una versi&amp;oacute;n &lt;code&gt;combineReducers&lt;/code&gt; funci&amp;oacute;n combineReducers , como la de &lt;a href=&quot;https://www.npmjs.com/package/redux-immutable&quot;&gt;redux-immutable&lt;/a&gt; , ya que Redux espera que el &amp;aacute;rbol de estado sea un objeto JavaScript simple.</target>
        </trans-unit>
        <trans-unit id="3e7660e3d84caaf8d0d389dd1aa86ddb2e25f9d1" translate="yes" xml:space="preserve">
          <source>Use the Immutable Object Formatter Chrome Extension to Aid Debugging</source>
          <target state="translated">Usar la Extensión de cromo de Formato de Objeto Inmutable para ayudar a la depuración</target>
        </trans-unit>
        <trans-unit id="f02307698aa7f146036376ea5c566843affb0cce" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;combineReducers&lt;/code&gt;</source>
          <target state="translated">Usando &lt;code&gt;combineReducers&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="f08b702827057616968fd391c82f707b1a5a2d8f" translate="yes" xml:space="preserve">
          <source>Using Immutable.JS everywhere keeps your code performant. Use it in your smart components, your selectors, your sagas or thunks, action creators, and especially your reducers.</source>
          <target state="translated">Usando Immutable.JS en todas partes se mantiene tu código de rendimiento.Úsalo en tus componentes inteligentes,tus selectores,tus sagas o muslos,creadores de acción,y especialmente en tus reductores.</target>
        </trans-unit>
        <trans-unit id="f7293e4f3b5e035630a5bc60b64f59c693251afd" translate="yes" xml:space="preserve">
          <source>Using Immutable.JS with Redux</source>
          <target state="translated">Usando Immutable.JS con Redux</target>
        </trans-unit>
        <trans-unit id="67ca03c7a7625d155b3a537ee064c3e9d484c709" translate="yes" xml:space="preserve">
          <source>Using Object Spread Operator</source>
          <target state="translated">Usando el operador de difusión de objetos</target>
        </trans-unit>
        <trans-unit id="ac6f51d94e4af12a8acd288d8eb407840de3df95" translate="yes" xml:space="preserve">
          <source>Using Redux</source>
          <target state="translated">Usando Redux</target>
        </trans-unit>
        <trans-unit id="fe5bda3640263724e1162e68bdb4f3f60a23f165" translate="yes" xml:space="preserve">
          <source>Using Redux Undo</source>
          <target state="translated">Usando Redux Deshacer</target>
        </trans-unit>
        <trans-unit id="4350d0f8a60fb29773b2696fff9bb5c97e53d8b5" translate="yes" xml:space="preserve">
          <source>Using combineReducers</source>
          <target state="translated">Usando los reductores combinados</target>
        </trans-unit>
        <trans-unit id="7d518ee67915b609a1dd9ff6c8af1cfadb6c6da1" translate="yes" xml:space="preserve">
          <source>Using objects keyed by item IDs as lookup tables, and arrays of IDs to track ordering</source>
          <target state="translated">Usar objetos con claves de identificación de artículos como tablas de búsqueda,y matrices de identificaciones para rastrear el orden.</target>
        </trans-unit>
        <trans-unit id="8ed1d4412e834bf938d3923e0b8f3cc5b2463506" translate="yes" xml:space="preserve">
          <source>Using redux-saga To Simplify Your Growing React Native Codebase</source>
          <target state="translated">Usando redux-saga para simplificar su base de código nativo de reacción creciente</target>
        </trans-unit>
        <trans-unit id="021b423143ef7a73f92d60003574a87608876b96" translate="yes" xml:space="preserve">
          <source>Using slice reducers with Immutable.js objects</source>
          <target state="translated">Usando reductores de rodajas con objetos Immutable.js</target>
        </trans-unit>
        <trans-unit id="b97756d7719f737231f86a444a2d68e775b67e86" translate="yes" xml:space="preserve">
          <source>Using the &lt;code&gt;getVisibleTodos&lt;/code&gt; selector with multiple instances of the &lt;code&gt;visibleTodoList&lt;/code&gt; container will not correctly memoize:</source>
          <target state="translated">El uso del selector &lt;code&gt;getVisibleTodos&lt;/code&gt; con varias instancias del contenedor &lt;code&gt;visibleTodoList&lt;/code&gt; no memorizar&amp;aacute; correctamente:</target>
        </trans-unit>
        <trans-unit id="4df7fb586380ea5e7c187fb0014d6c3d49e85d05" translate="yes" xml:space="preserve">
          <source>Usually generated by React Redux</source>
          <target state="translated">Normalmente generado por React Redux</target>
        </trans-unit>
        <trans-unit id="18fdc5ee8b1f8fba8dabaa933373c0483ab7fad7" translate="yes" xml:space="preserve">
          <source>Utilities</source>
          <target state="translated">Utilities</target>
        </trans-unit>
        <trans-unit id="3b6bce0bc82ec87711aba57c2f985407b17ac4e1" translate="yes" xml:space="preserve">
          <source>Utility libraries that wrap immutable update logic into simpler functions</source>
          <target state="translated">Bibliotecas de utilidades que envuelven la lógica de actualización inmutable en funciones más simples</target>
        </trans-unit>
        <trans-unit id="a83ddc10110955dee4bc01b56024b22edcbf4ac4" translate="yes" xml:space="preserve">
          <source>Verbose Code</source>
          <target state="translated">Código Verboso</target>
        </trans-unit>
        <trans-unit id="306838c8867984c3b915bde4dd3f78004f4ca086" translate="yes" xml:space="preserve">
          <source>Watch the 30 Free Videos!</source>
          <target state="translated">Mira los 30 videos gratis!</target>
        </trans-unit>
        <trans-unit id="0483b60e25b0c25edcc348bff84793a3d91be49a" translate="yes" xml:space="preserve">
          <source>We also include our bundle file for the client-side application via a script tag. This is whatever output your bundling tool provides for your client entry point. It may be a static file or a URL to a hot reloading development server.</source>
          <target state="translated">También incluimos nuestro archivo de paquete para la aplicación del lado del cliente a través de una etiqueta de guión.Esta es la salida que su herramienta de empaquetado proporciona para el punto de entrada de su cliente.Puede ser un archivo estático o una URL de un servidor de desarrollo de recarga en caliente.</target>
        </trans-unit>
        <trans-unit id="10bbc3b0c569fe69fdd473c376b8f564d7a80d0e" translate="yes" xml:space="preserve">
          <source>We also need a way to give each instance of a container access to its own private selector. The &lt;code&gt;mapStateToProps&lt;/code&gt; argument of &lt;code&gt;connect&lt;/code&gt; can help with this.</source>
          <target state="translated">Tambi&amp;eacute;n necesitamos una forma de dar a cada instancia de un contenedor acceso a su propio selector privado. El argumento &lt;code&gt;mapStateToProps&lt;/code&gt; de &lt;code&gt;connect&lt;/code&gt; puede ayudar con esto.</target>
        </trans-unit>
        <trans-unit id="fdaefd698de230a2f7c12c50f1c7217019df8d31" translate="yes" xml:space="preserve">
          <source>We can now wrap any reducer into &lt;code&gt;undoable&lt;/code&gt; reducer enhancer to teach it to react to &lt;code&gt;UNDO&lt;/code&gt; and &lt;code&gt;REDO&lt;/code&gt; actions.</source>
          <target state="translated">Ahora podemos envolver cualquier reductor en &lt;code&gt;undoable&lt;/code&gt; promotor de reductor para ense&amp;ntilde;ar a reaccionar a &lt;code&gt;UNDO&lt;/code&gt; y &lt;code&gt;REDO&lt;/code&gt; acciones.</target>
        </trans-unit>
        <trans-unit id="9c827f05d5a3cbe83f760b9cd2939ca0c33269a0" translate="yes" xml:space="preserve">
          <source>We can still define these special thunk action creators inside our &lt;code&gt;actions.js&lt;/code&gt; file:</source>
          <target state="translated">Todav&amp;iacute;a podemos definir estos creadores de acciones de procesador especiales dentro de nuestro archivo &lt;code&gt;actions.js&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="938b765a6a181b2876b551536787a61427ae0513" translate="yes" xml:space="preserve">
          <source>We can write the following helper to accomplish this:</source>
          <target state="translated">Podemos escribir el siguiente ayudante para lograrlo:</target>
        </trans-unit>
        <trans-unit id="c8360b823356a1165aff2dcb5acddb15d0faf8a6" translate="yes" xml:space="preserve">
          <source>We can't reliably enforce serializable actions for performance reasons, so Redux only checks that every action is a plain object, and that the &lt;code&gt;type&lt;/code&gt; is defined. The rest is up to you, but you might find that keeping everything serializable helps debug and reproduce issues.</source>
          <target state="translated">No podemos hacer cumplir de manera confiable acciones serializables por razones de rendimiento, por lo que Redux solo verifica que cada acci&amp;oacute;n sea un objeto simple y que el &lt;code&gt;type&lt;/code&gt; est&amp;eacute; definido. El resto depende de usted, pero puede encontrar que mantener todo serializable ayuda a depurar y reproducir problemas.</target>
        </trans-unit>
        <trans-unit id="00855934fc4901f8d981dcebd3bffdd698a1fcbf" translate="yes" xml:space="preserve">
          <source>We could also vary the approach somewhat, and create a more generic higher-order reducer that accepts both a given reducer function and a name or identifier:</source>
          <target state="translated">También podríamos variar un poco el enfoque y crear un reductor de orden superior más genérico que acepte tanto una función de reductor determinada como un nombre o identificador:</target>
        </trans-unit>
        <trans-unit id="f190e4360534b4c5d20b45090414be9e9e50cea0" translate="yes" xml:space="preserve">
          <source>We could end this here, but it's not very convenient to import a special function every time.</source>
          <target state="translated">Podríamos terminar esto aquí,pero no es muy conveniente importar una función especial cada vez.</target>
        </trans-unit>
        <trans-unit id="05ab24ad4034d462a58f7bf871314f5e1296bcbc" translate="yes" xml:space="preserve">
          <source>We could provide a helper inside Redux that would apply the actual monkeypatching as an implementation detail:</source>
          <target state="translated">Podríamos proporcionar un ayudante dentro de Redux que aplicaría el parche de mono real como un detalle de implementación:</target>
        </trans-unit>
        <trans-unit id="9014512e14daf5d56a7fc1c2a33ed8ae10444137" translate="yes" xml:space="preserve">
          <source>We could use it to apply multiple middleware like this:</source>
          <target state="translated">Podríamos usarlo para aplicar varios middleware como este:</target>
        </trans-unit>
        <trans-unit id="62783244d2f4a7054a2bb285d688f4cb5a60d38f" translate="yes" xml:space="preserve">
          <source>We don't want to lock you in!</source>
          <target state="translated">¡No queremos encerrarte!</target>
        </trans-unit>
        <trans-unit id="8a9e7b213f0799be76b21fa0d3f91f45192784f7" translate="yes" xml:space="preserve">
          <source>We extracted &lt;code&gt;posts(state, action)&lt;/code&gt; that manages the state of a specific post list. This is just &lt;a href=&quot;../basics/reducers#splitting-reducers&quot;&gt;reducer composition&lt;/a&gt;! It is our choice how to split the reducer into smaller reducers, and in this case, we're delegating updating items inside an object to a &lt;code&gt;posts&lt;/code&gt; reducer. The &lt;a href=&quot;../introduction/examples#real-world&quot;&gt;real world example&lt;/a&gt; goes even further, showing how to create a reducer factory for parameterized pagination reducers.</source>
          <target state="translated">Extrajimos &lt;code&gt;posts(state, action)&lt;/code&gt; que gestionan el estado de una lista de publicaciones espec&amp;iacute;fica. &amp;iexcl;Esto es solo una &lt;a href=&quot;../basics/reducers#splitting-reducers&quot;&gt;composici&amp;oacute;n reductora&lt;/a&gt; ! Es nuestra elecci&amp;oacute;n c&amp;oacute;mo dividir el reductor en reductores m&amp;aacute;s peque&amp;ntilde;os y, en este caso, delegaremos los elementos de actualizaci&amp;oacute;n dentro de un objeto a un reductor de &lt;code&gt;posts&lt;/code&gt; . El &lt;a href=&quot;../introduction/examples#real-world&quot;&gt;ejemplo del mundo real&lt;/a&gt; va a&amp;uacute;n m&amp;aacute;s lejos, mostrando c&amp;oacute;mo crear una f&amp;aacute;brica de reductores para reductores de paginaci&amp;oacute;n parametrizados.</target>
        </trans-unit>
        <trans-unit id="f2ba230f751c2afe5d48e98a148b40dba74b740d" translate="yes" xml:space="preserve">
          <source>We have two more actions to handle! Just like we did with &lt;code&gt;SET_VISIBILITY_FILTER&lt;/code&gt;, we'll import the &lt;code&gt;ADD_TODO&lt;/code&gt; and &lt;code&gt;TOGGLE_TODO&lt;/code&gt; actions and then extend our reducer to handle &lt;code&gt;ADD_TODO&lt;/code&gt;.</source>
          <target state="translated">&amp;iexcl;Tenemos dos acciones m&amp;aacute;s que manejar! Al igual que hicimos con &lt;code&gt;SET_VISIBILITY_FILTER&lt;/code&gt; , importaremos las acciones &lt;code&gt;ADD_TODO&lt;/code&gt; y &lt;code&gt;TOGGLE_TODO&lt;/code&gt; y luego ampliaremos nuestro reductor para manejar &lt;code&gt;ADD_TODO&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="937d04010c34a1830de25cf054cedd314fd77775" translate="yes" xml:space="preserve">
          <source>We just modified how the &lt;code&gt;addTodo&lt;/code&gt; action creator behaves, completely invisible to the calling code. &lt;strong&gt;We don't have to worry about looking at each place where todos are being added, to make sure they have this check.&lt;/strong&gt; Action creators let you decouple additional logic around dispatching an action, from the actual components emitting those actions. It's very handy when the application is under heavy development, and the requirements change often.</source>
          <target state="translated">Acabamos de modificar c&amp;oacute;mo se comporta el creador de la acci&amp;oacute;n &lt;code&gt;addTodo&lt;/code&gt; , completamente invisible para el c&amp;oacute;digo de llamada. &lt;strong&gt;No tenemos que preocuparnos por mirar cada lugar donde se est&amp;aacute;n agregando todos, para asegurarnos de que tengan esta verificaci&amp;oacute;n. &lt;/strong&gt;Los creadores de acciones le permiten desacoplar la l&amp;oacute;gica adicional en torno al env&amp;iacute;o de una acci&amp;oacute;n, de los componentes reales que emiten esas acciones. Es muy &amp;uacute;til cuando la aplicaci&amp;oacute;n se encuentra en un desarrollo intenso y los requisitos cambian con frecuencia.</target>
        </trans-unit>
        <trans-unit id="727029cc06658123c8225de825d04ad8f8957f5b" translate="yes" xml:space="preserve">
          <source>We must distinguish between dispatching functions in general and the base &lt;a href=&quot;api/store#dispatch&quot;&gt;&lt;code&gt;dispatch&lt;/code&gt;&lt;/a&gt; function provided by the store instance without any middleware.</source>
          <target state="translated">Debemos distinguir entre las funciones de despacho en general y la funci&amp;oacute;n de &lt;a href=&quot;api/store#dispatch&quot;&gt; &lt;code&gt;dispatch&lt;/code&gt; &lt;/a&gt; base proporcionada por la instancia de la tienda sin ning&amp;uacute;n middleware.</target>
        </trans-unit>
        <trans-unit id="44bbe40c8a0e33b691c1b061d98660259d085213" translate="yes" xml:space="preserve">
          <source>We need to create a fake &lt;code&gt;getState&lt;/code&gt;, &lt;code&gt;dispatch&lt;/code&gt;, and &lt;code&gt;next&lt;/code&gt; functions. We use &lt;code&gt;jest.fn()&lt;/code&gt; to create stubs, but with other test frameworks you would likely use sinon.</source>
          <target state="translated">Necesitamos crear &lt;code&gt;getState&lt;/code&gt; falsas getState , &lt;code&gt;dispatch&lt;/code&gt; y &lt;code&gt;next&lt;/code&gt; . Usamos &lt;code&gt;jest.fn()&lt;/code&gt; para crear stubs, pero con otros marcos de prueba probablemente usar&amp;iacute;a sinon.</target>
        </trans-unit>
        <trans-unit id="299e4ddfafdfef1e85fc435e6d7114d6525ef4bd" translate="yes" xml:space="preserve">
          <source>We now have examples of several kinds of split-up reducer functions: helper utilities like &lt;code&gt;updateObject&lt;/code&gt; and &lt;code&gt;createReducer&lt;/code&gt;, handlers for specific cases like &lt;code&gt;setVisibilityFilter&lt;/code&gt; and &lt;code&gt;addTodo&lt;/code&gt;, and slice-of-state handlers like &lt;code&gt;visibilityReducer&lt;/code&gt; and &lt;code&gt;todosReducer&lt;/code&gt;. We also can see that &lt;code&gt;appReducer&lt;/code&gt; is an example of a &quot;root reducer&quot;.</source>
          <target state="translated">Ahora tenemos ejemplos de varios tipos de funciones de reductor dividido: utilidades auxiliares como &lt;code&gt;updateObject&lt;/code&gt; y &lt;code&gt;createReducer&lt;/code&gt; , controladores para casos espec&amp;iacute;ficos como &lt;code&gt;setVisibilityFilter&lt;/code&gt; y &lt;code&gt;addTodo&lt;/code&gt; , y controladores de segmento de estado como &lt;code&gt;visibilityReducer&lt;/code&gt; y &lt;code&gt;todosReducer&lt;/code&gt; . Tambi&amp;eacute;n podemos ver que &lt;code&gt;appReducer&lt;/code&gt; es un ejemplo de &quot;reductor de ra&amp;iacute;z&quot;.</target>
        </trans-unit>
        <trans-unit id="f931773a23d44ef9110cfd8557dfc7aa1e3202fa" translate="yes" xml:space="preserve">
          <source>We recommend &lt;a href=&quot;http://facebook.github.io/jest/&quot;&gt;Jest&lt;/a&gt; as the testing engine. Note that it runs in a Node environment, so you won't have access to the DOM.</source>
          <target state="translated">Recomendamos &lt;a href=&quot;http://facebook.github.io/jest/&quot;&gt;Jest&lt;/a&gt; como motor de prueba. Tenga en cuenta que se ejecuta en un entorno de nodo, por lo que no tendr&amp;aacute; acceso al DOM.</target>
        </trans-unit>
        <trans-unit id="c48c28638a818ee714914dc38026f386ac75db5b" translate="yes" xml:space="preserve">
          <source>We should now be able to use either of these to generate our specialized counter reducers, and then dispatch actions that will affect the portion of the state that we care about:</source>
          <target state="translated">Ahora deberíamos ser capaces de usar cualquiera de estos para generar nuestros contrarreductores especializados,y luego despachar acciones que afectarán la porción del estado que nos importa:</target>
        </trans-unit>
        <trans-unit id="c89ee6942601c0a301153e30e9c58b2f5d8ec40b" translate="yes" xml:space="preserve">
          <source>We specified the behavior of our app before we even started writing the UI. We won't do this in this tutorial, but at this point you can write tests for your reducers and action creators. You won't need to mock anything because they are just &lt;a href=&quot;../introduction/threeprinciples#changes-are-made-with-pure-functions&quot;&gt;pure&lt;/a&gt; functions. Call them, and make assertions on what they return.</source>
          <target state="translated">Especificamos el comportamiento de nuestra aplicaci&amp;oacute;n incluso antes de comenzar a escribir la interfaz de usuario. No haremos esto en este tutorial, pero en este punto puede escribir pruebas para sus reductores y creadores de acciones. No necesitar&amp;aacute;s burlarte de nada porque son solo funciones &lt;a href=&quot;../introduction/threeprinciples#changes-are-made-with-pure-functions&quot;&gt;puras&lt;/a&gt; . Ll&amp;aacute;malos y haz afirmaciones sobre lo que te devuelven.</target>
        </trans-unit>
        <trans-unit id="c4470bb993a07bc6bfa269c5fb94507004598031" translate="yes" xml:space="preserve">
          <source>We store each subreddit's information separately so we can cache every subreddit. When the user switches between them the second time, the update will be instant, and we won't need to refetch unless we want to. Don't worry about all these items being in memory: unless you're dealing with tens of thousands of items, and your user rarely closes the tab, you won't need any sort of cleanup.</source>
          <target state="translated">Almacenamos la información de cada subredador por separado para que podamos almacenar cada subredador.Cuando el usuario cambie de uno a otro por segunda vez,la actualización será instantánea,y no necesitaremos volver a buscar a menos que queramos.No te preocupes por que todos estos elementos estén en la memoria:a menos que estés tratando con decenas de miles de elementos,y tu usuario raramente cierre la pestaña,no necesitarás ningún tipo de limpieza.</target>
        </trans-unit>
        <trans-unit id="1e50f981325b4d6e7b5e1ac94e3d14479ea909a5" translate="yes" xml:space="preserve">
          <source>We test that our middleware is calling the &lt;code&gt;getState&lt;/code&gt;, &lt;code&gt;dispatch&lt;/code&gt;, and &lt;code&gt;next&lt;/code&gt; functions at the right time.</source>
          <target state="translated">Probamos que nuestro middleware llame a las &lt;code&gt;getState&lt;/code&gt; , &lt;code&gt;dispatch&lt;/code&gt; y &lt;code&gt;next&lt;/code&gt; en el momento adecuado.</target>
        </trans-unit>
        <trans-unit id="75cf0f6e6b134023b61b31d405a78b8ef43ce618" translate="yes" xml:space="preserve">
          <source>We then get the initial state from our Redux store using &lt;a href=&quot;../api/store#getState&quot;&gt;&lt;code&gt;store.getState()&lt;/code&gt;&lt;/a&gt;. We will see how this is passed along in our &lt;code&gt;renderFullPage&lt;/code&gt; function.</source>
          <target state="translated">Luego obtenemos el estado inicial de nuestra tienda Redux usando &lt;a href=&quot;../api/store#getState&quot;&gt; &lt;code&gt;store.getState()&lt;/code&gt; &lt;/a&gt; . Veremos c&amp;oacute;mo se transmite esto en nuestra funci&amp;oacute;n &lt;code&gt;renderFullPage&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="319de368fdc28c8b195a6d2c03281f6821c69298" translate="yes" xml:space="preserve">
          <source>We use &lt;a href=&quot;https://developer.mozilla.org/en/docs/Web/API/Fetch_API&quot;&gt;&lt;code&gt;fetch&lt;/code&gt; API&lt;/a&gt; in the examples. It is a new API for making network requests that replaces &lt;code&gt;XMLHttpRequest&lt;/code&gt; for most common needs. Because most browsers don't yet support it natively, we suggest that you use &lt;a href=&quot;https://github.com/matthew-andrews/isomorphic-fetch&quot;&gt;&lt;code&gt;isomorphic-fetch&lt;/code&gt;&lt;/a&gt; library:</source>
          <target state="translated">Usamos &lt;a href=&quot;https://developer.mozilla.org/en/docs/Web/API/Fetch_API&quot;&gt; &lt;code&gt;fetch&lt;/code&gt; API&lt;/a&gt; en los ejemplos. Es una nueva API para realizar solicitudes de red que reemplaza &lt;code&gt;XMLHttpRequest&lt;/code&gt; para las necesidades m&amp;aacute;s comunes. Debido a que la mayor&amp;iacute;a de los navegadores a&amp;uacute;n no lo admiten de forma nativa, le sugerimos que utilice la biblioteca de &lt;a href=&quot;https://github.com/matthew-andrews/isomorphic-fetch&quot;&gt; &lt;code&gt;isomorphic-fetch&lt;/code&gt; &lt;/a&gt; :</target>
        </trans-unit>
        <trans-unit id="a7b84a5beb3839d0cf7131fb4a2fbbb7aa5d2618" translate="yes" xml:space="preserve">
          <source>We use ES6 computed property syntax so we can update &lt;code&gt;state[action.subreddit]&lt;/code&gt; with &lt;code&gt;Object.assign()&lt;/code&gt; in a concise way. This:</source>
          <target state="translated">Usamos la sintaxis de propiedad calculada de ES6 para que podamos actualizar el &lt;code&gt;state[action.subreddit]&lt;/code&gt; &lt;code&gt;Object.assign()&lt;/code&gt; ] con Object.assign () de una manera concisa. Esta:</target>
        </trans-unit>
        <trans-unit id="38db718a04799e7dc7479e35fa4bd78f62cd7909" translate="yes" xml:space="preserve">
          <source>We will also need some container components to connect the presentational components to Redux. For example, the presentational &lt;code&gt;TodoList&lt;/code&gt; component needs a container like &lt;code&gt;VisibleTodoList&lt;/code&gt; that subscribes to the Redux store and knows how to apply the current visibility filter. To change the visibility filter, we will provide a &lt;code&gt;FilterLink&lt;/code&gt; container component that renders a &lt;code&gt;Link&lt;/code&gt; that dispatches an appropriate action on click:</source>
          <target state="translated">Tambi&amp;eacute;n necesitaremos algunos componentes de contenedor para conectar los componentes de presentaci&amp;oacute;n a Redux. Por ejemplo, el componente &lt;code&gt;TodoList&lt;/code&gt; de presentaci&amp;oacute;n necesita un contenedor como &lt;code&gt;VisibleTodoList&lt;/code&gt; que se suscribe a la tienda Redux y sabe c&amp;oacute;mo aplicar el filtro de visibilidad actual. Para cambiar el filtro de visibilidad, proporcionaremos un componente contenedor &lt;code&gt;FilterLink&lt;/code&gt; que genera un &lt;code&gt;Link&lt;/code&gt; que env&amp;iacute;a una acci&amp;oacute;n apropiada al hacer clic:</target>
        </trans-unit>
        <trans-unit id="cbe16722b5d079bcbcd195adcf84c0f8b9537578" translate="yes" xml:space="preserve">
          <source>We will also need to refactor &lt;code&gt;index.js&lt;/code&gt; to render the &lt;code&gt;&amp;lt;Root /&amp;gt;&lt;/code&gt; component to the DOM.</source>
          <target state="translated">Tambi&amp;eacute;n necesitaremos refactorizar &lt;code&gt;index.js&lt;/code&gt; para representar el componente &lt;code&gt;&amp;lt;Root /&amp;gt;&lt;/code&gt; en el DOM.</target>
        </trans-unit>
        <trans-unit id="eed46c74461e18da655f49826f9bb4cec981c01c" translate="yes" xml:space="preserve">
          <source>We will see later how the approach we take lets us choose how granular Undo and Redo need to be.</source>
          <target state="translated">Veremos más adelante cómo el enfoque que tomamos nos permite elegir cuán granulares deben ser el Deshacer y el Rehacer.</target>
        </trans-unit>
        <trans-unit id="e48b8e0b74723fbbce7a038049b47d5983a8ab63" translate="yes" xml:space="preserve">
          <source>We will then import the &lt;code&gt;&amp;lt;Provider /&amp;gt;&lt;/code&gt; from React Redux:</source>
          <target state="translated">Luego importaremos el &lt;code&gt;&amp;lt;Provider /&amp;gt;&lt;/code&gt; de React Redux:</target>
        </trans-unit>
        <trans-unit id="3dfe117d376bf6280908c658894a43c98efefd9b" translate="yes" xml:space="preserve">
          <source>We will use React in the examples below, but the same techniques can be used with other view frameworks that can render on the server.</source>
          <target state="translated">Utilizaremos React en los ejemplos siguientes,pero las mismas técnicas se pueden utilizar con otros marcos de visualización que se pueden renderizar en el servidor.</target>
        </trans-unit>
        <trans-unit id="1cfc720c34e5f99bae08591a1d21b8028d872f1f" translate="yes" xml:space="preserve">
          <source>We will use React to build our simple todo app.</source>
          <target state="translated">Usaremos React para construir nuestra sencilla aplicación &quot;Todo&quot;.</target>
        </trans-unit>
        <trans-unit id="77e9494b8c84b985dfa4f4d49ca2fb485e0d6cbd" translate="yes" xml:space="preserve">
          <source>We will wrap &lt;code&gt;&amp;lt;Router /&amp;gt;&lt;/code&gt; in &lt;code&gt;&amp;lt;Provider /&amp;gt;&lt;/code&gt; so that route handlers can get &lt;a href=&quot;../basics/usagewithreact#passing-the-store&quot;&gt;access to the &lt;code&gt;store&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">Envolveremos &lt;code&gt;&amp;lt;Router /&amp;gt;&lt;/code&gt; en &lt;code&gt;&amp;lt;Provider /&amp;gt;&lt;/code&gt; para que los manejadores de ruta puedan &lt;a href=&quot;../basics/usagewithreact#passing-the-store&quot;&gt;acceder a la &lt;code&gt;store&lt;/code&gt; &lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="1d2a4109058f0af68e149216b99cc33debbea027" translate="yes" xml:space="preserve">
          <source>We would like to replace &lt;code&gt;getVisibleTodos&lt;/code&gt; with a memoized selector that recalculates &lt;code&gt;todos&lt;/code&gt; when the value of &lt;code&gt;state.todos&lt;/code&gt; or &lt;code&gt;state.visibilityFilter&lt;/code&gt; changes, but not when changes occur in other (unrelated) parts of the state tree.</source>
          <target state="translated">Nos gustar&amp;iacute;a reemplazar &lt;code&gt;getVisibleTodos&lt;/code&gt; con un selector memorizado que recalcula &lt;code&gt;todos&lt;/code&gt; cuando cambia el valor de &lt;code&gt;state.todos&lt;/code&gt; o &lt;code&gt;state.visibilityFilter&lt;/code&gt; , pero no cuando ocurren cambios en otras partes (no relacionadas) del &amp;aacute;rbol de estado.</target>
        </trans-unit>
        <trans-unit id="6c0e7d729963aa201c31d1a06cb609fdf81434f4" translate="yes" xml:space="preserve">
          <source>We'll add one more action type to describe a user ticking off a todo as completed. We refer to a particular todo by &lt;code&gt;index&lt;/code&gt; because we store them in an array. In a real app, it is wiser to generate a unique ID every time something new is created.</source>
          <target state="translated">Agregaremos un tipo de acci&amp;oacute;n m&amp;aacute;s para describir a un usuario que marca una tarea como completada. Nos referimos a una tarea en particular por &lt;code&gt;index&lt;/code&gt; porque las almacenamos en una matriz. En una aplicaci&amp;oacute;n real, es m&amp;aacute;s prudente generar una identificaci&amp;oacute;n &amp;uacute;nica cada vez que se crea algo nuevo.</target>
        </trans-unit>
        <trans-unit id="070f3dc99d82df0afd700715eae9b841ac7a6b07" translate="yes" xml:space="preserve">
          <source>We'll explore how to perform side effects in the &lt;a href=&quot;../advanced/index&quot;&gt;advanced walkthrough&lt;/a&gt;. For now, just remember that the reducer must be pure. &lt;strong&gt;Given the same arguments, it should calculate the next state and return it. No surprises. No side effects. No API calls. No mutations. Just a calculation.&lt;/strong&gt;</source>
          <target state="translated">Exploraremos c&amp;oacute;mo realizar efectos secundarios en el &lt;a href=&quot;../advanced/index&quot;&gt;tutorial avanzado&lt;/a&gt; . Por ahora, solo recuerda que el reductor debe ser puro. &lt;strong&gt;Dados los mismos argumentos, deber&amp;iacute;a calcular el siguiente estado y devolverlo. No hay sorpresas. Sin efectos secundarios. Sin llamadas a la API. Sin mutaciones. Solo un calculo.&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="eaa545b7295152e58ab853f3d912b19f7b907eb9" translate="yes" xml:space="preserve">
          <source>We'll start by specifying the initial state. Redux will call our reducer with an &lt;code&gt;undefined&lt;/code&gt; state for the first time. This is our chance to return the initial state of our app:</source>
          <target state="translated">Comenzaremos especificando el estado inicial. Redux llamar&amp;aacute; a nuestro reductor con un estado &lt;code&gt;undefined&lt;/code&gt; por primera vez. Esta es nuestra oportunidad de devolver el estado inicial de nuestra aplicaci&amp;oacute;n:</target>
        </trans-unit>
        <trans-unit id="a566f04c7bb96e3dad921f4e977a52579a6948e3" translate="yes" xml:space="preserve">
          <source>We'll start with the most common use case: lists. Web applications often show lists of things. For example, a list of posts, or a list of friends. You'll need to figure out what sorts of lists your app can show. You want to store them separately in the state, because this way you can cache them and only fetch again if necessary.</source>
          <target state="translated">Empezaremos con el caso de uso más común:las listas.Las aplicaciones web a menudo muestran listas de cosas.Por ejemplo,una lista de publicaciones o una lista de amigos.Tendrás que averiguar qué tipo de listas puede mostrar tu aplicación.Quieres almacenarlas por separado en el estado,porque de esta manera puedes almacenarlas en la caché y sólo recuperarlas si es necesario.</target>
        </trans-unit>
        <trans-unit id="bf88ce0d8fb03a1213e9e5aff6c740f652fabdf4" translate="yes" xml:space="preserve">
          <source>We'll use separate types in this tutorial.</source>
          <target state="translated">Usaremos tipos separados en este tutorial.</target>
        </trans-unit>
        <trans-unit id="6deda5b238140890ee6ed5f2e792c4827705c840" translate="yes" xml:space="preserve">
          <source>We're almost done. Since many people don't like switch statements, it's very common to use a function that creates a lookup table of action types to case functions. We'll use the &lt;code&gt;createReducer&lt;/code&gt; function described in &lt;a href=&quot;../reducingboilerplate#generating-reducers&quot;&gt;Reducing Boilerplate&lt;/a&gt;:</source>
          <target state="translated">Ya casi hemos terminado. Dado que a muchas personas no les gustan las declaraciones de cambio, es muy com&amp;uacute;n usar una funci&amp;oacute;n que crea una tabla de b&amp;uacute;squeda de tipos de acci&amp;oacute;n para funciones de casos. Usaremos la funci&amp;oacute;n &lt;code&gt;createReducer&lt;/code&gt; descrita en &lt;a href=&quot;../reducingboilerplate#generating-reducers&quot;&gt;Reducci&amp;oacute;n del texto est&amp;aacute;ndar&lt;/a&gt; :</target>
        </trans-unit>
        <trans-unit id="cf8eb046053a065111d778fef4cfcdc223cb9816" translate="yes" xml:space="preserve">
          <source>Webflow</source>
          <target state="translated">Webflow</target>
        </trans-unit>
        <trans-unit id="cb59effde77f318efa4856b404dd72c191879fc1" translate="yes" xml:space="preserve">
          <source>What approaches are there for handling data immutably? Do I have to use Immutable.JS?</source>
          <target state="translated">¿Qué enfoques existen para manejar los datos de manera inmutable? ¿Tengo que usar Immutable.JS?</target>
        </trans-unit>
        <trans-unit id="2ec40d3e3697bdc90d47223d9a786375d4854093" translate="yes" xml:space="preserve">
          <source>What are some opinionated Best Practices for using Immutable.JS with Redux?</source>
          <target state="translated">¿Cuáles son algunas de las mejores prácticas de opinión para el uso de Immutable.JS con Redux?</target>
        </trans-unit>
        <trans-unit id="4617f0a4931acbdece3479c94cd5d9b8a29ffbc4" translate="yes" xml:space="preserve">
          <source>What are the benefits of Immutability?</source>
          <target state="translated">¿Cuáles son los beneficios de la Inmutabilidad?</target>
        </trans-unit>
        <trans-unit id="60982d038a3233ff8e99646cab1b3f3181f09be8" translate="yes" xml:space="preserve">
          <source>What are the benefits of immutability?</source>
          <target state="translated">¿Cuáles son los beneficios de la inmutabilidad?</target>
        </trans-unit>
        <trans-unit id="de1352defc592755d5729188ff9c5931f975beca" translate="yes" xml:space="preserve">
          <source>What are the issues with using ES6 for immutable operations?</source>
          <target state="translated">¿Cuáles son los problemas de usar el ES6 para operaciones inmutables?</target>
        </trans-unit>
        <trans-unit id="87f7ec6d6c32ff8a62aada75fa88678bc51d6ac0" translate="yes" xml:space="preserve">
          <source>What are the issues with using Immutable.JS?</source>
          <target state="translated">¿Cuáles son los problemas con el uso de Immutable.JS?</target>
        </trans-unit>
        <trans-unit id="7669cca5868cf84a7c911639d6206223bbfb9011" translate="yes" xml:space="preserve">
          <source>What are the issues with using JavaScript for immutable operations?</source>
          <target state="translated">¿Cuáles son los problemas con el uso de JavaScript para las operaciones inmutables?</target>
        </trans-unit>
        <trans-unit id="b6f105fcf428cb482f2dba1e64704d18ef939497" translate="yes" xml:space="preserve">
          <source>What are the issues with using plain JavaScript for immutable operations?</source>
          <target state="translated">¿Cuáles son los problemas con el uso de JavaScript simple para las operaciones inmutables?</target>
        </trans-unit>
        <trans-unit id="502931ac19eb7ad8e3a6b09a7f30f2039e70b8f9" translate="yes" xml:space="preserve">
          <source>What are the past (and future) states in the undo stack?</source>
          <target state="translated">¿Cuáles son los estados pasados (y futuros)en la pila de deshacer?</target>
        </trans-unit>
        <trans-unit id="7af9c4632a04865406facc7a09e8fff13bee6fa5" translate="yes" xml:space="preserve">
          <source>What if we just replace the &lt;code&gt;dispatch&lt;/code&gt; function on the store instance? The Redux store is just a plain object with &lt;a href=&quot;../api/store&quot;&gt;a few methods&lt;/a&gt;, and we're writing JavaScript, so we can just monkeypatch the &lt;code&gt;dispatch&lt;/code&gt; implementation:</source>
          <target state="translated">&amp;iquest;Qu&amp;eacute; pasa si simplemente reemplazamos la funci&amp;oacute;n de &lt;code&gt;dispatch&lt;/code&gt; en la instancia de la tienda? La tienda Redux es solo un objeto simple con &lt;a href=&quot;../api/store&quot;&gt;algunos m&amp;eacute;todos&lt;/a&gt; , y estamos escribiendo JavaScript, por lo que podemos simplemente parchear la implementaci&amp;oacute;n del &lt;code&gt;dispatch&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="da380f2420edcb4fe953f900cae3cd95adf19059" translate="yes" xml:space="preserve">
          <source>What if we want to apply &lt;strong&gt;more than one&lt;/strong&gt; such transformation to &lt;code&gt;dispatch&lt;/code&gt;?</source>
          <target state="translated">&amp;iquest;Qu&amp;eacute; pasa si queremos aplicar &lt;strong&gt;m&amp;aacute;s de una&lt;/strong&gt; transformaci&amp;oacute;n de este tipo al &lt;code&gt;dispatch&lt;/code&gt; ?</target>
        </trans-unit>
        <trans-unit id="8d5e21ca6d6c7949c97bbb82b6de23a8e86a90ba" translate="yes" xml:space="preserve">
          <source>What is the current state?</source>
          <target state="translated">¿Cuál es el estado actual?</target>
        </trans-unit>
        <trans-unit id="ccdd9f0a8546e0e957522917e3028ad2fdff0b9e" translate="yes" xml:space="preserve">
          <source>What should my file structure look like? How should I group my action creators and reducers in my project? Where should my selectors go?</source>
          <target state="translated">¿Cómo debería ser mi estructura de archivos? ¿Cómo debo agrupar a mis creadores y reductores de acción en mi proyecto? ¿A dónde deberían ir mis selectores?</target>
        </trans-unit>
        <trans-unit id="39b7e4ebfa46344ad4758dbb7c54ade6b182a09d" translate="yes" xml:space="preserve">
          <source>What the Flux?! Let's Redux.</source>
          <target state="translated">¡¿Que el Flujo?! Vamos a Redux.</target>
        </trans-unit>
        <trans-unit id="7685a22848ac997a066fa32d4715b4fcb5b90efa" translate="yes" xml:space="preserve">
          <source>Whatever convention you choose, stick with it throughout the application.</source>
          <target state="translated">Sea cual sea la convención que elijas,sigue con ella a lo largo de la solicitud.</target>
        </trans-unit>
        <trans-unit id="7e44dc3bb557d164a1c8cd909a8179ffc29fe58f" translate="yes" xml:space="preserve">
          <source>When a piece of data is duplicated in several places, it becomes harder to make sure that it is updated appropriately.</source>
          <target state="translated">Cuando un dato se duplica en varios lugares,se hace más difícil asegurarse de que se actualiza adecuadamente.</target>
        </trans-unit>
        <trans-unit id="c0b74de7e07b265987ff3765a92ea469eb3be3c6" translate="yes" xml:space="preserve">
          <source>When a store is created, Redux dispatches a dummy action to your reducer to populate the store with the initial state. You are not meant to handle the dummy action directly. Just remember that your reducer should return some kind of initial state if the state given to it as the first argument is &lt;code&gt;undefined&lt;/code&gt;, and you're all set.</source>
          <target state="translated">Cuando se crea una tienda, Redux env&amp;iacute;a una acci&amp;oacute;n ficticia a su reductor para poblar la tienda con el estado inicial. No est&amp;aacute; destinado a manejar la acci&amp;oacute;n ficticia directamente. Solo recuerde que su reductor deber&amp;iacute;a devolver alg&amp;uacute;n tipo de estado inicial si el estado que se le dio como primer argumento &lt;code&gt;undefined&lt;/code&gt; est&amp;aacute; definido , y ya est&amp;aacute; todo listo.</target>
        </trans-unit>
        <trans-unit id="55f47f3d19e55c7f647cc1402dfe664e913c42b7" translate="yes" xml:space="preserve">
          <source>When adding JavaScript objects to an Immutable.JS Map or List using Immutable.JS&amp;rsquo;s &lt;code&gt;update&lt;/code&gt;, &lt;code&gt;merge&lt;/code&gt; or &lt;code&gt;set&lt;/code&gt; methods, ensure that the object being added is first converted to an Immutable object using &lt;code&gt;fromJS()&lt;/code&gt;.</source>
          <target state="translated">Al agregar objetos JavaScript a un mapa o lista de Immutable.JS usando los m&amp;eacute;todos de &lt;code&gt;update&lt;/code&gt; , &lt;code&gt;merge&lt;/code&gt; o &lt;code&gt;set&lt;/code&gt; Immutable.JS, aseg&amp;uacute;rese de que el objeto que se agrega se convierta primero en un objeto inmutable usando &lt;code&gt;fromJS()&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="5532214553b2a415074b0f39f2cead024233404a" translate="yes" xml:space="preserve">
          <source>When an action creator returns a function, that function will get executed by the Redux Thunk middleware. This function doesn't need to be pure; it is thus allowed to have side effects, including executing asynchronous API calls. The function can also dispatch actions&amp;mdash;like those synchronous actions we defined earlier.</source>
          <target state="translated">Cuando un creador de acciones devuelve una funci&amp;oacute;n, esa funci&amp;oacute;n ser&amp;aacute; ejecutada por el middleware Redux Thunk. Esta funci&amp;oacute;n no necesita ser pura; por lo tanto, se permite tener efectos secundarios, incluida la ejecuci&amp;oacute;n de llamadas API asincr&amp;oacute;nicas. La funci&amp;oacute;n tambi&amp;eacute;n puede enviar acciones, como las acciones sincr&amp;oacute;nicas que definimos anteriormente.</target>
        </trans-unit>
        <trans-unit id="d2b511652b6790f3eca5e3448a96b4a14c313d91" translate="yes" xml:space="preserve">
          <source>When it's time to fetch the posts for some subreddit, we will dispatch a &lt;code&gt;REQUEST_POSTS&lt;/code&gt; action:</source>
          <target state="translated">Cuando sea el momento de buscar las publicaciones de alg&amp;uacute;n subreddit, enviaremos una acci&amp;oacute;n &lt;code&gt;REQUEST_POSTS&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="c552f80b72ecd37903e2d6ffce7bb1a0b3ba91ad" translate="yes" xml:space="preserve">
          <source>When previously we wrote: &lt;code&gt;&amp;lt;Route path=&quot;/(:filter)&quot; component={App} /&amp;gt;&lt;/code&gt;, it made available inside &lt;code&gt;App&lt;/code&gt; a &lt;code&gt;params&lt;/code&gt; property.</source>
          <target state="translated">Cuando escribimos anteriormente: &lt;code&gt;&amp;lt;Route path=&quot;/(:filter)&quot; component={App} /&amp;gt;&lt;/code&gt; , puso a disposici&amp;oacute;n dentro de la &lt;code&gt;App&lt;/code&gt; una propiedad &lt;code&gt;params&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="c55e37eb1a90ec0796f6a4f05992a64917889494" translate="yes" xml:space="preserve">
          <source>When rendering, we will wrap &lt;code&gt;&amp;lt;App /&amp;gt;&lt;/code&gt;, our root component, inside a &lt;code&gt;&amp;lt;Provider&amp;gt;&lt;/code&gt; to make the store available to all components in the component tree, as we saw in &lt;a href=&quot;../basics/usagewithreact&quot;&gt;Usage with React&lt;/a&gt;.</source>
          <target state="translated">Al renderizar, envolveremos &lt;code&gt;&amp;lt;App /&amp;gt;&lt;/code&gt; , nuestro componente ra&amp;iacute;z, dentro de un &lt;code&gt;&amp;lt;Provider&amp;gt;&lt;/code&gt; para que la tienda est&amp;eacute; disponible para todos los componentes en el &amp;aacute;rbol de componentes, como vimos en &lt;a href=&quot;../basics/usagewithreact&quot;&gt;Uso con React&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="b8f09b0e83401e68e4c33132aa1b3b73a6d4dcd4" translate="yes" xml:space="preserve">
          <source>When should I use Redux?</source>
          <target state="translated">¿Cuándo debo usar Redux?</target>
        </trans-unit>
        <trans-unit id="d794925cbdb0e31214ecfc88910755d33c4f0b10" translate="yes" xml:space="preserve">
          <source>When the last middleware in the chain dispatches an action, it has to be a plain object. This is when the &lt;a href=&quot;../basics/dataflow&quot;&gt;synchronous Redux data flow&lt;/a&gt; takes place.</source>
          <target state="translated">Cuando el &amp;uacute;ltimo middleware de la cadena distribuye una acci&amp;oacute;n, tiene que ser un objeto simple. Aqu&amp;iacute; es cuando tiene lugar el &lt;a href=&quot;../basics/dataflow&quot;&gt;flujo de datos s&amp;iacute;ncrono de Redux&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="d74a3e9748d787071d9c2fe4d73363cc68c2dcd3" translate="yes" xml:space="preserve">
          <source>When the page loads, the bundle file will be started up and &lt;a href=&quot;https://facebook.github.io/react/docs/top-level-api.html#reactdom.render&quot;&gt;&lt;code&gt;ReactDOM.render()&lt;/code&gt;&lt;/a&gt; will hook into the &lt;code&gt;data-react-id&lt;/code&gt; attributes from the server-rendered HTML. This will connect our newly-started React instance to the virtual DOM used on the server. Since we have the same initial state for our Redux store and used the same code for all our view components, the result will be the same real DOM.</source>
          <target state="translated">Cuando se cargue la p&amp;aacute;gina, se iniciar&amp;aacute; el archivo del paquete y &lt;a href=&quot;https://facebook.github.io/react/docs/top-level-api.html#reactdom.render&quot;&gt; &lt;code&gt;ReactDOM.render()&lt;/code&gt; &lt;/a&gt; se conectar&amp;aacute; a los atributos &lt;code&gt;data-react-id&lt;/code&gt; del HTML renderizado por el servidor. Esto conectar&amp;aacute; nuestra instancia de React reci&amp;eacute;n iniciada al DOM virtual utilizado en el servidor. Dado que tenemos el mismo estado inicial para nuestra tienda Redux y usamos el mismo c&amp;oacute;digo para todos nuestros componentes de vista, el resultado ser&amp;aacute; el mismo DOM real.</target>
        </trans-unit>
        <trans-unit id="fdc93b372187dd00b09c70c8f0349010aacbd69a" translate="yes" xml:space="preserve">
          <source>When the shallow check fails, React-Redux will cause the component to re-render. Using &lt;code&gt;toJS()&lt;/code&gt; in &lt;code&gt;mapStateToProps&lt;/code&gt; in this way, therefore, will always cause the component to re-render, even if the value never changes, impacting heavily on performance.</source>
          <target state="translated">Cuando la verificaci&amp;oacute;n superficial falla, React-Redux har&amp;aacute; que el componente se vuelva a procesar. El uso de &lt;code&gt;toJS()&lt;/code&gt; en &lt;code&gt;mapStateToProps&lt;/code&gt; de esta manera, por lo tanto, siempre har&amp;aacute; que el componente se vuelva a representar, incluso si el valor nunca cambia, lo que tendr&amp;aacute; un gran impacto en el rendimiento.</target>
        </trans-unit>
        <trans-unit id="4aa9765bfd105e5641e876f4bda241427a866bc5" translate="yes" xml:space="preserve">
          <source>When the user presses &amp;ldquo;Redo&amp;rdquo;, we want to move one step back into the future:</source>
          <target state="translated">Cuando el usuario presiona &quot;Rehacer&quot;, queremos retroceder un paso hacia el futuro:</target>
        </trans-unit>
        <trans-unit id="6f1dc68360b35a018ee091fccfa401d6fad91461" translate="yes" xml:space="preserve">
          <source>When using Redux with server rendering, we must also send the state of our app along in our response, so the client can use it as the initial state. This is important because, if we preload any data before generating the HTML, we want the client to also have access to this data. Otherwise, the markup generated on the client won't match the server markup, and the client would have to load the data again.</source>
          <target state="translated">Cuando se usa Redux con renderizado de servidor,también debemos enviar el estado de nuestra aplicación junto con nuestra respuesta,para que el cliente pueda usarla como estado inicial.Esto es importante porque,si precargamos cualquier dato antes de generar el HTML,queremos que el cliente también tenga acceso a estos datos.De lo contrario,el marcado generado en el cliente no coincidirá con el marcado del servidor,y el cliente tendría que volver a cargar los datos.</target>
        </trans-unit>
        <trans-unit id="08905f564cddc435b39d4746befbbfde05d56c89" translate="yes" xml:space="preserve">
          <source>When you call an asynchronous API, there are two crucial moments in time: the moment you start the call, and the moment when you receive an answer (or a timeout).</source>
          <target state="translated">Cuando llamas a una API asíncrona,hay dos momentos cruciales en el tiempo:el momento en que inicias la llamada y el momento en que recibes una respuesta (o un tiempo muerto).</target>
        </trans-unit>
        <trans-unit id="b17e363eb01279dd12d04917f1f023babea53839" translate="yes" xml:space="preserve">
          <source>When you emit an action, &lt;code&gt;todoApp&lt;/code&gt; returned by &lt;code&gt;combineReducers&lt;/code&gt; will call both reducers:</source>
          <target state="translated">Cuando emite una acci&amp;oacute;n, &lt;code&gt;todoApp&lt;/code&gt; devuelto por &lt;code&gt;combineReducers&lt;/code&gt; llamar&amp;aacute; a ambos reductores:</target>
        </trans-unit>
        <trans-unit id="9320a916b3e55e2e80a21708cceecfcf437cc640" translate="yes" xml:space="preserve">
          <source>When you have ported all of your Flux Stores to be implemented on top of reducers, you can replace the Flux library with a single Redux store, and combine those reducers you already have into one using &lt;a href=&quot;../api/combinereducers&quot;&gt;&lt;code&gt;combineReducers(reducers)&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">Cuando haya portado todas sus tiendas Flux para que se implementen sobre los reductores, puede reemplazar la biblioteca Flux con una sola tienda Redux y combinar esos reductores que ya tiene en uno usando &lt;a href=&quot;../api/combinereducers&quot;&gt; &lt;code&gt;combineReducers(reducers)&lt;/code&gt; &lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="c0a2799ac8efd1f6499c6fb41130094d5c12a451" translate="yes" xml:space="preserve">
          <source>Where do I put my business logic in a React/Redux application?</source>
          <target state="translated">¿Dónde pongo mi lógica de negocios en una aplicación React/Redux?</target>
        </trans-unit>
        <trans-unit id="8c07523b65b47a0ad36e94ad44e0e56dd3913c89" translate="yes" xml:space="preserve">
          <source>Where do we get the initial &lt;code&gt;present&lt;/code&gt; state from? We don't seem to know it beforehand.</source>
          <target state="translated">&amp;iquest;De d&amp;oacute;nde obtenemos el estado &lt;code&gt;present&lt;/code&gt; e inicial ? Parece que no lo sabemos de antemano.</target>
        </trans-unit>
        <trans-unit id="2c79f8ed0107a7fe0a477df33c48d8c228e7eee0" translate="yes" xml:space="preserve">
          <source>Where do we react to the external actions to save the &lt;code&gt;present&lt;/code&gt; to the &lt;code&gt;past&lt;/code&gt;?</source>
          <target state="translated">&amp;iquest;D&amp;oacute;nde reaccionamos a las acciones externas para salvar el &lt;code&gt;present&lt;/code&gt; e del &lt;code&gt;past&lt;/code&gt; ?</target>
        </trans-unit>
        <trans-unit id="6559f99fd936b0050a5d2a1fc16d0873490da574" translate="yes" xml:space="preserve">
          <source>Where to Hold React Component Data: state, store, static, and this</source>
          <target state="translated">Dónde guardar los datos de los componentes de la reacción:estado,almacenamiento,estática,y esto</target>
        </trans-unit>
        <trans-unit id="03693bfdc7508d98809d55b857217f95caac409e" translate="yes" xml:space="preserve">
          <source>Whether you choose to use such a library, or stick with plain JavaScript, depends on how comfortable you are with adding another dependency to your app, or how sure you are that you can avoid the pitfalls inherent within JavaScript&amp;rsquo;s approach to immutability.</source>
          <target state="translated">Si elige usar una biblioteca de este tipo o seguir con JavaScript simple, depende de qu&amp;eacute; tan c&amp;oacute;modo se sienta al agregar otra dependencia a su aplicaci&amp;oacute;n, o qu&amp;eacute; tan seguro est&amp;eacute; de que puede evitar las trampas inherentes al enfoque de inmutabilidad de JavaScript.</target>
        </trans-unit>
        <trans-unit id="067c7d896d6446815e8315d7a4fcfafc8f8da43b" translate="yes" xml:space="preserve">
          <source>Whether you have used them or not, Redux only takes a few minutes to get started with.</source>
          <target state="translated">Tanto si los has usado como si no,Redux sólo tarda unos minutos en empezar.</target>
        </trans-unit>
        <trans-unit id="cbfecd927f559c2b5baf796e97b2ca728811bf43" translate="yes" xml:space="preserve">
          <source>Whichever option you choose, make sure you&amp;rsquo;re familiar with the concepts of &lt;a href=&quot;reducers/prerequisiteconcepts#note-on-immutability-side-effects-and-mutation&quot;&gt;immutability, side effects and mutation&lt;/a&gt;. In particular, ensure you have a deep understanding of what JavaScript does when updating and copying values in order to guard against accidental mutations that will degrade your app&amp;rsquo;s performance, or break it altogether.</source>
          <target state="translated">Cualquiera sea la opci&amp;oacute;n que elija, aseg&amp;uacute;rese de estar familiarizado con los conceptos de &lt;a href=&quot;reducers/prerequisiteconcepts#note-on-immutability-side-effects-and-mutation&quot;&gt;inmutabilidad, efectos secundarios y mutaci&amp;oacute;n&lt;/a&gt; . En particular, aseg&amp;uacute;rese de tener un conocimiento profundo de lo que hace JavaScript al actualizar y copiar valores para protegerse contra mutaciones accidentales que degradar&amp;aacute;n el rendimiento de su aplicaci&amp;oacute;n o lo romper&amp;aacute;n por completo.</target>
        </trans-unit>
        <trans-unit id="03047acfd57571e8bdbc8135d9d15cea99035eb1" translate="yes" xml:space="preserve">
          <source>While &lt;a href=&quot;../api/combinereducers&quot;&gt;&lt;code&gt;combineReducers()&lt;/code&gt;&lt;/a&gt; is a handy helper utility, you don't have to use it; feel free to write your own root reducer!</source>
          <target state="translated">Si bien &lt;a href=&quot;../api/combinereducers&quot;&gt; &lt;code&gt;combineReducers()&lt;/code&gt; &lt;/a&gt; es una &amp;uacute;til utilidad auxiliar, no es necesario que la use; &amp;iexcl;No dude en escribir su propio reductor de ra&amp;iacute;ces!</target>
        </trans-unit>
        <trans-unit id="4089c3ad2441e642d6adb86e7f9d112ea7103b43" translate="yes" xml:space="preserve">
          <source>While &lt;code&gt;combineReducers&lt;/code&gt; attempts to check that your reducers conform to some of these rules, you should remember them, and do your best to follow them. &lt;code&gt;combineReducers&lt;/code&gt; will check your reducers by passing &lt;code&gt;undefined&lt;/code&gt; to them; this is done even if you specify initial state to &lt;code&gt;Redux.createStore(combineReducers(...), initialState)&lt;/code&gt;. Therefore, you &lt;strong&gt;must&lt;/strong&gt; ensure your reducers work properly when receiving &lt;code&gt;undefined&lt;/code&gt; as state, even if you never intend for them to actually receive &lt;code&gt;undefined&lt;/code&gt; in your own code.</source>
          <target state="translated">Si bien &lt;code&gt;combineReducers&lt;/code&gt; intenta verificar que sus reductores cumplan con algunas de estas reglas, debe recordarlas y hacer todo lo posible por seguirlas. &lt;code&gt;combineReducers&lt;/code&gt; comprobar&amp;aacute; sus reductores pas&amp;aacute;ndoles &lt;code&gt;undefined&lt;/code&gt; ; esto se hace incluso si especifica el estado inicial en &lt;code&gt;Redux.createStore(combineReducers(...), initialState)&lt;/code&gt; . Por lo tanto, &lt;strong&gt;debe&lt;/strong&gt; asegurarse de que sus reductores funcionen correctamente al recibir &lt;code&gt;undefined&lt;/code&gt; como estado, incluso si nunca tiene la intenci&amp;oacute;n de que reciban &lt;code&gt;undefined&lt;/code&gt; en su propio c&amp;oacute;digo.</target>
        </trans-unit>
        <trans-unit id="1a1e65f5bf9037c5912b84c5835b30699b791739" translate="yes" xml:space="preserve">
          <source>While React Redux does work to minimize the number of times that your &lt;code&gt;mapStateToProps&lt;/code&gt; function is called, it's still a good idea to ensure that your &lt;code&gt;mapStateToProps&lt;/code&gt; runs quickly and also minimizes the amount of work it does. The common recommended approach is to create memoized &amp;ldquo;selector&amp;rdquo; functions using &lt;a href=&quot;https://github.com/reactjs/reselect&quot;&gt;Reselect&lt;/a&gt;. These selectors can be combined and composed together, and selectors later in a pipeline will only run if their inputs have changed. This means you can create selectors that do things like filtering or sorting, and ensure that the real work only happens if needed.</source>
          <target state="translated">Si bien React Redux funciona para minimizar la cantidad de veces que se &lt;code&gt;mapStateToProps&lt;/code&gt; funci&amp;oacute;n mapStateToProps , sigue siendo una buena idea asegurarse de que &lt;code&gt;mapStateToProps&lt;/code&gt; se ejecute r&amp;aacute;pidamente y tambi&amp;eacute;n minimice la cantidad de trabajo que realiza. El enfoque com&amp;uacute;n recomendado es crear funciones de &quot;selector&quot; memorizadas utilizando &lt;a href=&quot;https://github.com/reactjs/reselect&quot;&gt;Reselect&lt;/a&gt; . Estos selectores se pueden combinar y componer juntos, y los selectores posteriores en una canalizaci&amp;oacute;n solo se ejecutar&amp;aacute;n si sus entradas han cambiado. Esto significa que puede crear selectores que hagan cosas como filtrar u ordenar, y asegurarse de que el trabajo real solo ocurra si es necesario.</target>
        </trans-unit>
        <trans-unit id="040c756905d96ee1b18a17c4c17f4f0537e48ce8" translate="yes" xml:space="preserve">
          <source>While Redux itself is not opinionated about how your state is organized, &lt;code&gt;combineReducers&lt;/code&gt; enforces several rules to help users avoid common errors. (See &lt;a href=&quot;../../api/combinereducers&quot;&gt;&lt;code&gt;combineReducers&lt;/code&gt;&lt;/a&gt; for details.)</source>
          <target state="translated">Si bien Redux en s&amp;iacute; no tiene opiniones sobre c&amp;oacute;mo est&amp;aacute; organizado su estado, &lt;code&gt;combineReducers&lt;/code&gt; impone varias reglas para ayudar a los usuarios a evitar errores comunes. (Consulte &lt;a href=&quot;../../api/combinereducers&quot;&gt; &lt;code&gt;combineReducers&lt;/code&gt; &lt;/a&gt; para m&amp;aacute;s detalles).</target>
        </trans-unit>
        <trans-unit id="8dfc58574b33f1efddcb65068c1c7a976c89a49a" translate="yes" xml:space="preserve">
          <source>While effective, using &lt;code&gt;Object.assign()&lt;/code&gt; can quickly make simple reducers difficult to read given its rather verbose syntax.</source>
          <target state="translated">Si bien es efectivo, el uso de &lt;code&gt;Object.assign()&lt;/code&gt; puede hacer que los reductores simples sean dif&amp;iacute;ciles de leer debido a su sintaxis bastante detallada.</target>
        </trans-unit>
        <trans-unit id="269ba06048a7e4e70129f1c6f218059f072f2367" translate="yes" xml:space="preserve">
          <source>While it is technically &lt;em&gt;possible&lt;/em&gt; to &lt;a href=&quot;https://github.com/reactjs/redux/issues/328#issuecomment-125035516&quot;&gt;write impure reducers&lt;/a&gt; that mutate the data for performance corner cases, we actively discourage you from doing this. Development features like time travel, record/replay, or hot reloading will break. Moreover it doesn't seem like immutability poses performance problems in most real apps, because, as &lt;a href=&quot;https://github.com/omcljs/om&quot;&gt;Om&lt;/a&gt; demonstrates, even if you lose out on object allocation, you still win by avoiding expensive re-renders and re-calculations, as you know exactly what changed thanks to reducer purity.</source>
          <target state="translated">Si bien es t&amp;eacute;cnicamente &lt;em&gt;posible&lt;/em&gt; para &lt;a href=&quot;https://github.com/reactjs/redux/issues/328#issuecomment-125035516&quot;&gt;reductores impuros escritura&lt;/a&gt; que mutan los datos para los casos de esquina rendimiento, que te desanime activamente de hacer esto. Las funciones de desarrollo como el viaje en el tiempo, la grabaci&amp;oacute;n / reproducci&amp;oacute;n o la recarga en caliente se romper&amp;aacute;n. Adem&amp;aacute;s, no parece que la inmutabilidad plantee problemas de rendimiento en la mayor&amp;iacute;a de las aplicaciones reales, porque, como demuestra &lt;a href=&quot;https://github.com/omcljs/om&quot;&gt;Om&lt;/a&gt; , incluso si pierde en la asignaci&amp;oacute;n de objetos, sigue ganando al evitar costosas re-renderizaciones y rec&amp;aacute;lculos, ya que sabe exactamente qu&amp;eacute; cambiado gracias a la pureza del reductor.</target>
        </trans-unit>
        <trans-unit id="abcdc11df5ffeb4a687df7b1d5bbf50fd78fa63f" translate="yes" xml:space="preserve">
          <source>While it ultimately doesn't matter how you lay out your code on disk, it's important to remember that actions and reducers shouldn't be considered in isolation. It's entirely possible (and encouraged) for a reducer defined in one folder to respond to an action defined in another folder.</source>
          <target state="translated">Mientras que en última instancia no importa cómo se presenta el código en el disco,es importante recordar que las acciones y los reductores no deben considerarse de forma aislada.Es totalmente posible (y recomendable)que un reductor definido en una carpeta responda a una acción definida en otra carpeta.</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
