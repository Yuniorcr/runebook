<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="es" datatype="htmlbody" original="redux">
    <body>
      <group id="redux">
        <trans-unit id="30d4829117610e90feb15aaa2afa4a03b8acf085" translate="yes" xml:space="preserve">
          <source>#1024: Proposal: Declarative reducers</source>
          <target state="translated"># 1024: Propuesta: Reductores declarativos</target>
        </trans-unit>
        <trans-unit id="4b615433f4ff0d26c5fa5b193e0e7d0cc3e80d05" translate="yes" xml:space="preserve">
          <source>#1051: Shortcomings of the current applyMiddleware and composing createStore</source>
          <target state="translated"># 1051: Deficiencias del applyMiddleware actual y la composici&amp;oacute;n de createStore</target>
        </trans-unit>
        <trans-unit id="03e1f9116a8ad70c48d717384dff4c3d9ed0b8d4" translate="yes" xml:space="preserve">
          <source>#1057: subscribe listener can get action param?</source>
          <target state="translated"># 1057: &amp;iquest;el oyente de suscripci&amp;oacute;n puede obtener un par&amp;aacute;metro de acci&amp;oacute;n?</target>
        </trans-unit>
        <trans-unit id="4bc2d46618e57ca5f5cd58ca24a444b2e3962cbd" translate="yes" xml:space="preserve">
          <source>#1098: Using Redux in reusable React component</source>
          <target state="translated"># 1098: Uso de Redux en el componente React reutilizable</target>
        </trans-unit>
        <trans-unit id="1172766c55389d23293c28bd580351638a8b05bb" translate="yes" xml:space="preserve">
          <source>#1139: An alternative side effect model based on generators and sagas</source>
          <target state="translated"># 1139: Un modelo alternativo de efectos secundarios basado en generadores y sagas</target>
        </trans-unit>
        <trans-unit id="277db1c86685b6e2ab3da794c5499c7fdcf8c74e" translate="yes" xml:space="preserve">
          <source>#1165: Where to put business logic / validation?</source>
          <target state="translated"># 1165: &amp;iquest;D&amp;oacute;nde colocar la l&amp;oacute;gica / validaci&amp;oacute;n empresarial?</target>
        </trans-unit>
        <trans-unit id="05a3cbd838b24d5f189d009b179a62c97ae2d04c" translate="yes" xml:space="preserve">
          <source>#1167: Reducer without switch</source>
          <target state="translated"># 1167: Reductor sin interruptor</target>
        </trans-unit>
        <trans-unit id="f13afaff66dc7b23e3b11883862fef5f53054aed" translate="yes" xml:space="preserve">
          <source>#1171: Recommendations for best practices regarding action-creators, reducers, and selectors</source>
          <target state="translated"># 1171: Recomendaciones para las mejores pr&amp;aacute;cticas con respecto a los creadores de acciones, reductores y selectores</target>
        </trans-unit>
        <trans-unit id="66dd37b1d3975be52ce9c12bd63d02993da859c1" translate="yes" xml:space="preserve">
          <source>#1176: Redux+React with only stateless components</source>
          <target state="translated"># 1176: Redux + React con solo componentes sin estado</target>
        </trans-unit>
        <trans-unit id="2ed8de88174cb4015a9a40feb1eb36d44bdfc115" translate="yes" xml:space="preserve">
          <source>#1185: Question: Should I use immutable data structures?</source>
          <target state="translated"># 1185: Pregunta: &amp;iquest;Deber&amp;iacute;a usar estructuras de datos inmutables?</target>
        </trans-unit>
        <trans-unit id="36502c2af1991f87b5ec953b1ce29619a393fcb7" translate="yes" xml:space="preserve">
          <source>#1248: Is it ok and possible to store a react component in a reducer?</source>
          <target state="translated"># 1248: &amp;iquest;Est&amp;aacute; bien y es posible almacenar un componente de reacci&amp;oacute;n en un reductor?</target>
        </trans-unit>
        <trans-unit id="882566f27d0e15811a3d2222e5b3e7be9f37c3e6" translate="yes" xml:space="preserve">
          <source>#1255: Normalizr usage with nested objects in React/Redux</source>
          <target state="translated"># 1255: uso de Normalizr con objetos anidados en React / Redux</target>
        </trans-unit>
        <trans-unit id="df2442136b9e5a150b1df77be37dfaf76f081455" translate="yes" xml:space="preserve">
          <source>#125: Strategy for avoiding cascading renders</source>
          <target state="translated"># 125: estrategia para evitar renderizaciones en cascada</target>
        </trans-unit>
        <trans-unit id="d37bec3c108aab23faa29d1d3ccc744b38e02030" translate="yes" xml:space="preserve">
          <source>#1262: Immutable data + bad performance</source>
          <target state="translated"># 1262: datos inmutables + mal desempe&amp;ntilde;o</target>
        </trans-unit>
        <trans-unit id="9be52b6008b5e36ca13d546156068f2e0681de57" translate="yes" xml:space="preserve">
          <source>#1269: Add tree view example</source>
          <target state="translated"># 1269: Agregar ejemplo de vista de &amp;aacute;rbol</target>
        </trans-unit>
        <trans-unit id="9fbe916b0a42eeb4f1b8b1ce74cfca5a8c904167" translate="yes" xml:space="preserve">
          <source>#1279: Have any suggestions for where to put a Map Component in Flux?</source>
          <target state="translated"># 1279: &amp;iquest;Tiene alguna sugerencia sobre d&amp;oacute;nde poner un componente de mapa en Flux?</target>
        </trans-unit>
        <trans-unit id="bbdbf83cd3a993497d417bb7aaf52383244a21b5" translate="yes" xml:space="preserve">
          <source>#1287: How to choose between Redux's store and React's state?</source>
          <target state="translated"># 1287: &amp;iquest;C&amp;oacute;mo elegir entre la tienda de Redux y el estado de React?</target>
        </trans-unit>
        <trans-unit id="e852f115018d5807316e922246599c080b0e9503" translate="yes" xml:space="preserve">
          <source>#1300: Redux is great but major feature is missing</source>
          <target state="translated"># 1300: Redux es genial pero falta una caracter&amp;iacute;stica importante</target>
        </trans-unit>
        <trans-unit id="679eeec344129ad16e78231797b18b81de9a1726" translate="yes" xml:space="preserve">
          <source>#1303: Redux Performance with Large Store and frequent updates</source>
          <target state="translated"># 1303: Rendimiento de Redux con gran tienda y actualizaciones frecuentes</target>
        </trans-unit>
        <trans-unit id="e40ad0efcf8cdfb74359b9dcaaf30ad0e5d65061" translate="yes" xml:space="preserve">
          <source>#1346: Is it bad practice to just have a 'stores' directory?</source>
          <target state="translated"># 1346: &amp;iquest;Es una mala pr&amp;aacute;ctica tener simplemente un directorio de 'tiendas'?</target>
        </trans-unit>
        <trans-unit id="076aa3253e92bf9223eb24af002f0bbe44e75f44" translate="yes" xml:space="preserve">
          <source>#1385: What are the disadvantages of storing all your state in a single immutable atom?</source>
          <target state="translated"># 1385: &amp;iquest;Cu&amp;aacute;les son las desventajas de almacenar todo su estado en un solo &amp;aacute;tomo inmutable?</target>
        </trans-unit>
        <trans-unit id="fd76865437e3ee0e6eaa04e445cee157feda0101" translate="yes" xml:space="preserve">
          <source>#1390: Component Loading</source>
          <target state="translated"># 1390: Carga de componentes</target>
        </trans-unit>
        <trans-unit id="926fcdba9fb2889fc5ab58719f3a2fe43b8cefa6" translate="yes" xml:space="preserve">
          <source>#1400: Is passing top-level state object to branch reducer an anti-pattern?</source>
          <target state="translated"># 1400: &amp;iquest;Pasar el objeto de estado de nivel superior al reductor de rama es un anti-patr&amp;oacute;n?</target>
        </trans-unit>
        <trans-unit id="aec86494988d387006d280e6de7e36c662cc84df" translate="yes" xml:space="preserve">
          <source>#1407: Just sharing a great base class</source>
          <target state="translated"># 1407: Solo comparto una gran clase base</target>
        </trans-unit>
        <trans-unit id="e34f2137559dfc202961ddb79fca5d33772da57e" translate="yes" xml:space="preserve">
          <source>#159: Investigate using Redux for pseudo-local component state</source>
          <target state="translated"># 159: Investigar el uso de Redux para el estado del componente pseudo-local</target>
        </trans-unit>
        <trans-unit id="533d7a7280b4ebb1710db8562d8d14ac793fb437" translate="yes" xml:space="preserve">
          <source>#1751: Performance issues with large collections</source>
          <target state="translated"># 1751: Problemas de rendimiento con colecciones grandes</target>
        </trans-unit>
        <trans-unit id="6f36989dd4b17b3997aaf72ac822de75218cc1ba" translate="yes" xml:space="preserve">
          <source>#1793: React Elements in Redux State</source>
          <target state="translated"># 1793: Reaccionar elementos en el estado de Redux</target>
        </trans-unit>
        <trans-unit id="e0ded754edd99b8eb3c5dbc5f56be7e245c5cfff" translate="yes" xml:space="preserve">
          <source>#1813: Use a loop to support dispatching arrays</source>
          <target state="translated"># 1813: use un bucle para admitir el env&amp;iacute;o de matrices</target>
        </trans-unit>
        <trans-unit id="6cbd9dbf9bd45f23169fcf1b9cac28e3ed46577e" translate="yes" xml:space="preserve">
          <source>#1816: Component connected to state with &lt;code&gt;mapStateToProps&lt;/code&gt;</source>
          <target state="translated"># 1816: Componente conectado al estado con &lt;code&gt;mapStateToProps&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="1f4db3c5c28aaed5936c26bc809377a941220207" translate="yes" xml:space="preserve">
          <source>#1824: Normalising state and garbage collection</source>
          <target state="translated"># 1824: estado normalizado y recolecci&amp;oacute;n de basura</target>
        </trans-unit>
        <trans-unit id="a295c20bf7be400de7f0b760d0ab71f013297048" translate="yes" xml:space="preserve">
          <source>#1948: Is getMappedItems an anti-pattern in mapStateToProps?</source>
          <target state="translated"># 1948: &amp;iquest;Es getMappedItems un anti-patr&amp;oacute;n en mapStateToProps?</target>
        </trans-unit>
        <trans-unit id="bd83ae1e93d8c72cc8d0d72bed074df91fdb5711" translate="yes" xml:space="preserve">
          <source>#291: Trying to put API calls in the right place</source>
          <target state="translated"># 291: Intentando poner las llamadas a la API en el lugar correcto</target>
        </trans-unit>
        <trans-unit id="13e0c71a2076886c367dfe6a54f48c62f34d629f" translate="yes" xml:space="preserve">
          <source>#300: Potential connect() optimization</source>
          <target state="translated"># 300: Optimizaci&amp;oacute;n de potencial connect ()</target>
        </trans-unit>
        <trans-unit id="5cca150f0353618d865ab736549a024eaf25e9b6" translate="yes" xml:space="preserve">
          <source>#303: subscribe API with state as an argument</source>
          <target state="translated"># 303: suscr&amp;iacute;base a la API con el estado como argumento</target>
        </trans-unit>
        <trans-unit id="347d6847f32071d342aaec6151006d6975576724" translate="yes" xml:space="preserve">
          <source>#310: Who uses Redux?</source>
          <target state="translated"># 310: &amp;iquest;Qui&amp;eacute;n usa Redux?</target>
        </trans-unit>
        <trans-unit id="7a857746379c5bd1fd15069f90a6730fd9d8c03f" translate="yes" xml:space="preserve">
          <source>#316: How to create nested reducers?</source>
          <target state="translated"># 316: &amp;iquest;C&amp;oacute;mo crear reductores anidados?</target>
        </trans-unit>
        <trans-unit id="241aa7e523baa3daf169c16235be0831a07cca24" translate="yes" xml:space="preserve">
          <source>#384: Recommend that Action constants be named in the past tense</source>
          <target state="translated"># 384: Recomiende que las constantes de acci&amp;oacute;n se nombren en tiempo pasado</target>
        </trans-unit>
        <trans-unit id="1b1eee56ce67b7a61408324df972292a71042952" translate="yes" xml:space="preserve">
          <source>#419: Recommended usage of connect</source>
          <target state="translated"># 419: uso recomendado de connect</target>
        </trans-unit>
        <trans-unit id="2935aef53d71adace83e50c33214eaca426a95e9" translate="yes" xml:space="preserve">
          <source>#454: Handling big states in reducer</source>
          <target state="translated"># 454: Manejo de estados grandes en reductor</target>
        </trans-unit>
        <trans-unit id="b0699a6d49cd70e922b35198761a2a07c83e5a3d" translate="yes" xml:space="preserve">
          <source>#455: Modeling side effects</source>
          <target state="translated"># 455: Modelado de efectos secundarios</target>
        </trans-unit>
        <trans-unit id="772964529153c4d154180791f6cbd68a862db7bc" translate="yes" xml:space="preserve">
          <source>#533: Simpler introduction to async action creators</source>
          <target state="translated"># 533: Introducci&amp;oacute;n m&amp;aacute;s sencilla a los creadores de acciones as&amp;iacute;ncronas</target>
        </trans-unit>
        <trans-unit id="ebec8f05fa20d12e79e8cd586923a111d387212c" translate="yes" xml:space="preserve">
          <source>#542: Idea: batching actions</source>
          <target state="translated"># 542: Idea: acciones de procesamiento por lotes</target>
        </trans-unit>
        <trans-unit id="83c9c3ac3d68aab87e326de2f2c865ef2276a101" translate="yes" xml:space="preserve">
          <source>#569: Proposal: API for explicit side effects</source>
          <target state="translated"># 569: Propuesta: API para efectos secundarios expl&amp;iacute;citos</target>
        </trans-unit>
        <trans-unit id="d9d6fe14a99ccdaf8dc393654376b48c92963a25" translate="yes" xml:space="preserve">
          <source>#580: Is it possible to get action and state in store.subscribe?</source>
          <target state="translated"># 580: &amp;iquest;Es posible obtener acci&amp;oacute;n y estado en store.subscribe?</target>
        </trans-unit>
        <trans-unit id="cd9c0a060e7d71bfba68ba623da0d23c2d2537f5" translate="yes" xml:space="preserve">
          <source>#597: Valid to dispatch multiple actions from an event handler?</source>
          <target state="translated"># 597: &amp;iquest;V&amp;aacute;lido para enviar m&amp;uacute;ltiples acciones desde un controlador de eventos?</target>
        </trans-unit>
        <trans-unit id="995165a4900367cea544bc6a5f22ed8ee0144461" translate="yes" xml:space="preserve">
          <source>#601: A concern on combineReducers, when an action is related to multiple reducers</source>
          <target state="translated"># 601: una preocupaci&amp;oacute;n sobre los reductores de combinaci&amp;oacute;n, cuando una acci&amp;oacute;n est&amp;aacute; relacionada con varios reductores</target>
        </trans-unit>
        <trans-unit id="c91700ab890c5f08a2647bb350f68184b32a47f9" translate="yes" xml:space="preserve">
          <source>#628: Solution for simple action creation with less boilerplate</source>
          <target state="translated"># 628: Soluci&amp;oacute;n para la creaci&amp;oacute;n de acciones simples con menos repetici&amp;oacute;n</target>
        </trans-unit>
        <trans-unit id="be6cef416c1c4ce452dcbd4fff0470556c4b9881" translate="yes" xml:space="preserve">
          <source>#756: container vs component?</source>
          <target state="translated"># 756: contenedor vs componente?</target>
        </trans-unit>
        <trans-unit id="21340ba20a259634064d57cf626624fa2d15391a" translate="yes" xml:space="preserve">
          <source>#758: Why can't state be mutated?</source>
          <target state="translated">758: &amp;iquest;Por qu&amp;eacute; no se puede mutar el estado?</target>
        </trans-unit>
        <trans-unit id="69c184b8b56c254a2d2a7ccf4adc774a774fe33d" translate="yes" xml:space="preserve">
          <source>#815: Working with Data Structures</source>
          <target state="translated"># 815: Trabajar con estructuras de datos</target>
        </trans-unit>
        <trans-unit id="44ded1489a6f088808483a04ff55a1208ffe9541" translate="yes" xml:space="preserve">
          <source>#839: Emphasize defining selectors alongside reducers</source>
          <target state="translated"># 839: enfatice la definici&amp;oacute;n de selectores junto con reductores</target>
        </trans-unit>
        <trans-unit id="20452e871be0ef029dee99c519ace41f4725804e" translate="yes" xml:space="preserve">
          <source>#883: take away the huge switch block</source>
          <target state="translated"># 883: quita el enorme bloque de interruptores</target>
        </trans-unit>
        <trans-unit id="2f094ae5359226b707fd44e5f2a280f7467e4726" translate="yes" xml:space="preserve">
          <source>#911: Batching actions</source>
          <target state="translated"># 911: acciones por lotes</target>
        </trans-unit>
        <trans-unit id="a26f477aae1edf0347eb6f7ffa53f8db84ef966f" translate="yes" xml:space="preserve">
          <source>#912: Proposal: action filter utility</source>
          <target state="translated"># 912: Propuesta: utilidad de filtro de acciones</target>
        </trans-unit>
        <trans-unit id="37e67540fe79d19b36724130f44d7607e8859b33" translate="yes" xml:space="preserve">
          <source>#922: Proposal: add subscribe to middleware API</source>
          <target state="translated"># 922: Propuesta: agregar suscripci&amp;oacute;n a la API de middleware</target>
        </trans-unit>
        <trans-unit id="5501fbbcf1d607aa36fc7ed852657153c5e12ddf" translate="yes" xml:space="preserve">
          <source>#943: Reducer querying</source>
          <target state="translated"># 943: consulta de reductor</target>
        </trans-unit>
        <trans-unit id="680e2a0ba15353fa00a6904ce08286dab08d5d1e" translate="yes" xml:space="preserve">
          <source>#946: Best way to update related state fields with split reducers?</source>
          <target state="translated"># 946: &amp;iquest;La mejor manera de actualizar los campos de estado relacionados con reductores divididos?</target>
        </trans-unit>
        <trans-unit id="578d4af46b83796b576f50939eeddbe2b86f09a5" translate="yes" xml:space="preserve">
          <source>#959: Multiple actions one dispatch?</source>
          <target state="translated"># 959: &amp;iquest;Varias acciones en un env&amp;iacute;o?</target>
        </trans-unit>
        <trans-unit id="7d53170003985aba57c3cbb54042a1048dbe5904" translate="yes" xml:space="preserve">
          <source>#994: How to cut the boilerplate when updating nested entities?</source>
          <target state="translated"># 994: &amp;iquest;C&amp;oacute;mo cortar el texto est&amp;aacute;ndar al actualizar entidades anidadas?</target>
        </trans-unit>
        <trans-unit id="bf535818991eda0fe486afd20e7daa2d14518b95" translate="yes" xml:space="preserve">
          <source>&amp;copy; 2015&amp;ndash;2017 Dan Abramov</source>
          <target state="translated">&amp;copy; 2015&amp;ndash;2017 Dan Abramov</target>
        </trans-unit>
        <trans-unit id="4c763897a754d3344324bc45e15335209c28ea29" translate="yes" xml:space="preserve">
          <source>&amp;copy; 2015&amp;ndash;2020 Dan Abramov</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ed6b7f639f884be7fcd9fb980e496b6c33d5d3e1" translate="yes" xml:space="preserve">
          <source>&amp;ldquo;Come for the name hype. Stay for the rock solid fundamentals. (Thanks, and great job @dan_abramov and @eggheadio!)&amp;rdquo;</source>
          <target state="translated">&amp;ldquo;Ven por el bombo de nombre. Qu&amp;eacute;dese por los fundamentos s&amp;oacute;lidos como una roca. (&amp;iexcl;Gracias y excelente trabajo @dan_abramov y @eggheadio!) &quot;</target>
        </trans-unit>
        <trans-unit id="df384f33284e21430b07f18596d262ec19ba170f" translate="yes" xml:space="preserve">
          <source>&amp;ldquo;Ducks&amp;rdquo;: similar to domain style, but explicitly tying together actions and reducers, often by defining them in the same file</source>
          <target state="translated">&quot;Ducks&quot;: similar al estilo de dominio, pero vinculando expl&amp;iacute;citamente acciones y reductores, a menudo defini&amp;eacute;ndolos en el mismo archivo</target>
        </trans-unit>
        <trans-unit id="5150dc5211c6d06fcaf7e065f841bb023696c70e" translate="yes" xml:space="preserve">
          <source>&amp;ldquo;Great course on egghead.io by @dan_abramov - instead of just showing you how to use #redux, it also shows how and why redux was built!&amp;rdquo;</source>
          <target state="translated">&quot;Excelente curso sobre egghead.io de @dan_abramov: en lugar de solo mostrarte c&amp;oacute;mo usar #redux, &amp;iexcl;tambi&amp;eacute;n muestra c&amp;oacute;mo y por qu&amp;eacute; se construy&amp;oacute; redux!&quot;</target>
        </trans-unit>
        <trans-unit id="0e3d7e088d7386301b6520d1c80203336070f21a" translate="yes" xml:space="preserve">
          <source>&amp;ldquo;I asked for comments on Redux in FB's internal JS discussion group, and it was universally praised. Really awesome work.&amp;rdquo;</source>
          <target state="translated">&amp;ldquo;Ped&amp;iacute; comentarios sobre Redux en el grupo de discusi&amp;oacute;n interno de JS de FB, y fue elogiado universalmente. Un trabajo realmente asombroso &quot;.</target>
        </trans-unit>
        <trans-unit id="805734d014075effe4c9f9a252eb9def2a6db8e5" translate="yes" xml:space="preserve">
          <source>&amp;ldquo;It's cool that you are inventing a better Flux by not doing Flux at all.&amp;rdquo;</source>
          <target state="translated">&quot;Es genial que est&amp;eacute;s inventando un Flux mejor al no hacer Flux en absoluto&quot;.</target>
        </trans-unit>
        <trans-unit id="d3596109d016ac6d1e24cf6ef8b5eb8a444a3f3a" translate="yes" xml:space="preserve">
          <source>&amp;ldquo;Love what you're doing with Redux&amp;rdquo;</source>
          <target state="translated">&quot;Me encanta lo que est&amp;aacute;s haciendo con Redux&quot;</target>
        </trans-unit>
        <trans-unit id="938ed1352f0e24ad85ff59d880eeac5332693aad" translate="yes" xml:space="preserve">
          <source>&amp;ldquo;Plowing through @dan_abramov 'Getting Started with Redux' - its amazing how much simpler concepts get with video.&amp;rdquo;</source>
          <target state="translated">&quot;Profundizando en @dan_abramov 'Empezando con Redux' - es asombroso ver c&amp;oacute;mo los conceptos son mucho m&amp;aacute;s simples con el video&quot;.</target>
        </trans-unit>
        <trans-unit id="aa28d7323e70567c92735260eea7a08b3567882e" translate="yes" xml:space="preserve">
          <source>&amp;ldquo;This series of videos on Redux by @dan_abramov is repeatedly blowing my mind - gunna do some serious refactoring&amp;rdquo;</source>
          <target state="translated">&quot;Esta serie de videos en Redux por @dan_abramov me est&amp;aacute; volviendo loco repetidamente - gunna hace una refactorizaci&amp;oacute;n seria&quot;</target>
        </trans-unit>
        <trans-unit id="9bbdab09b1bad7d1411229e6706b9074b9acbc26" translate="yes" xml:space="preserve">
          <source>&amp;ldquo;This video series on Redux by @dan_abramov on @eggheadio is spectacular!&amp;rdquo;</source>
          <target state="translated">&quot;&amp;iexcl;Esta serie de videos en Redux por @dan_abramov en @eggheadio es espectacular!&quot;</target>
        </trans-unit>
        <trans-unit id="28f716d4a6d6d1dd6c2816b0a3468596f9af7981" translate="yes" xml:space="preserve">
          <source>(&lt;a href=&quot;store&quot;&gt;&lt;em&gt;&lt;code&gt;Store&lt;/code&gt;&lt;/em&gt;&lt;/a&gt;): An object that holds the complete state of your app. The only way to change its state is by &lt;a href=&quot;store#dispatch&quot;&gt;dispatching actions&lt;/a&gt;. You may also &lt;a href=&quot;store#subscribe&quot;&gt;subscribe&lt;/a&gt; to the changes to its state to update the UI.</source>
          <target state="translated">( &lt;a href=&quot;store&quot;&gt;&lt;em&gt; &lt;code&gt;Store&lt;/code&gt; &lt;/em&gt;&lt;/a&gt; ): un objeto que contiene el estado completo de su aplicaci&amp;oacute;n. La &amp;uacute;nica forma de cambiar su estado es &lt;a href=&quot;store#dispatch&quot;&gt;enviando acciones&lt;/a&gt; . Tambi&amp;eacute;n puede &lt;a href=&quot;store#subscribe&quot;&gt;suscribirse&lt;/a&gt; a los cambios en su estado para actualizar la interfaz de usuario.</target>
        </trans-unit>
        <trans-unit id="1b606c44baeccc1762423099bd6e5ef36f3634c6" translate="yes" xml:space="preserve">
          <source>(&lt;a href=&quot;store&quot;&gt;&lt;em&gt;&lt;code&gt;Store&lt;/code&gt;&lt;/em&gt;&lt;/a&gt;): An object that holds the complete state of your app. The only way to change its state is by &lt;a href=&quot;store#dispatchaction&quot;&gt;dispatching actions&lt;/a&gt;. You may also &lt;a href=&quot;store#subscribelistener&quot;&gt;subscribe&lt;/a&gt; to the changes to its state to update the UI.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ecee604ad68b289f8d3c800340d2c2c4d94ec4db" translate="yes" xml:space="preserve">
          <source>(&lt;em&gt;Function&lt;/em&gt; or &lt;em&gt;Object&lt;/em&gt;): An object mimicking the original object, but with each function immediately dispatching the action returned by the corresponding action creator. If you passed a function as &lt;code&gt;actionCreators&lt;/code&gt;, the return value will also be a single function.</source>
          <target state="translated">( &lt;em&gt;Funci&amp;oacute;n&lt;/em&gt; u &lt;em&gt;objeto&lt;/em&gt; ): un objeto que imita el objeto original, pero con cada funci&amp;oacute;n despachando inmediatamente la acci&amp;oacute;n devuelta por el creador de la acci&amp;oacute;n correspondiente. Si pas&amp;oacute; una funci&amp;oacute;n como &lt;code&gt;actionCreators&lt;/code&gt; , el valor de retorno tambi&amp;eacute;n ser&amp;aacute; una funci&amp;oacute;n &amp;uacute;nica.</target>
        </trans-unit>
        <trans-unit id="0fb3da3936f993327ba39a8dd43015351fe83823" translate="yes" xml:space="preserve">
          <source>(&lt;em&gt;Function&lt;/em&gt;) A store enhancer that applies the given middleware. The store enhancer signature is &lt;code&gt;createStore =&amp;gt; createStore'&lt;/code&gt; but the easiest way to apply it is to pass it to &lt;a href=&quot;createstore&quot;&gt;&lt;code&gt;createStore()&lt;/code&gt;&lt;/a&gt; as the last &lt;code&gt;enhancer&lt;/code&gt; argument.</source>
          <target state="translated">( &lt;em&gt;Funci&amp;oacute;n&lt;/em&gt; ) Un potenciador de tienda que aplica el middleware dado. La firma del potenciador de la tienda es &lt;code&gt;createStore =&amp;gt; createStore'&lt;/code&gt; pero la forma m&amp;aacute;s sencilla de aplicarla es pasarla a &lt;a href=&quot;createstore&quot;&gt; &lt;code&gt;createStore()&lt;/code&gt; &lt;/a&gt; como &amp;uacute;ltimo argumento del &lt;code&gt;enhancer&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="22b9d63bb650ae7d977063fdf040606f7a2a3597" translate="yes" xml:space="preserve">
          <source>(&lt;em&gt;Function&lt;/em&gt;) A store enhancer that applies the given middleware. The store enhancer signature is &lt;code&gt;createStore =&amp;gt; createStore&lt;/code&gt; but the easiest way to apply it is to pass it to &lt;a href=&quot;createstore&quot;&gt;&lt;code&gt;createStore()&lt;/code&gt;&lt;/a&gt; as the last &lt;code&gt;enhancer&lt;/code&gt; argument.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7f6b6bfc4538002cddbd1fd5e4e370dff6c9c1be" translate="yes" xml:space="preserve">
          <source>(&lt;em&gt;Function&lt;/em&gt;): A function that unsubscribes the change listener.</source>
          <target state="translated">( &lt;em&gt;Funci&amp;oacute;n&lt;/em&gt; ): una funci&amp;oacute;n que cancela la suscripci&amp;oacute;n del oyente de cambios.</target>
        </trans-unit>
        <trans-unit id="e6c10b5a4481c57b2d2f9edfc1c63be79f798472" translate="yes" xml:space="preserve">
          <source>(&lt;em&gt;Function&lt;/em&gt;): A reducer that invokes every reducer inside the &lt;code&gt;reducers&lt;/code&gt; object, and constructs a state object with the same shape.</source>
          <target state="translated">( &lt;em&gt;Funci&amp;oacute;n&lt;/em&gt; ): un reductor que invoca cada reductor dentro del objeto &lt;code&gt;reducers&lt;/code&gt; y construye un objeto de estado con la misma forma.</target>
        </trans-unit>
        <trans-unit id="389d55a260500f16717ac0d3a94350b27cba66e0" translate="yes" xml:space="preserve">
          <source>(&lt;em&gt;Function&lt;/em&gt;): The final function obtained by composing the given functions from right to left.</source>
          <target state="translated">( &lt;em&gt;Funci&amp;oacute;n&lt;/em&gt; ): La funci&amp;oacute;n final obtenida al componer las funciones dadas de derecha a izquierda.</target>
        </trans-unit>
        <trans-unit id="b6cbf2c01213c134b40ec8c3596771ac0fe718c7" translate="yes" xml:space="preserve">
          <source>(&lt;em&gt;arguments&lt;/em&gt;): The functions to compose. Each function is expected to accept a single parameter. Its return value will be provided as an argument to the function standing to the left, and so on. The exception is the right-most argument which can accept multiple parameters, as it will provide the signature for the resulting composed function.</source>
          <target state="translated">( &lt;em&gt;argumentos&lt;/em&gt; ): Las funciones para componer. Se espera que cada funci&amp;oacute;n acepte un solo par&amp;aacute;metro. Su valor de retorno se proporcionar&amp;aacute; como un argumento para la funci&amp;oacute;n que se encuentra a la izquierda, y as&amp;iacute; sucesivamente. La excepci&amp;oacute;n es el argumento situado m&amp;aacute;s a la derecha que puede aceptar m&amp;uacute;ltiples par&amp;aacute;metros, ya que proporcionar&amp;aacute; la firma para la funci&amp;oacute;n compuesta resultante.</target>
        </trans-unit>
        <trans-unit id="5016311decd476dac1c440e0e52c02e0e3d85575" translate="yes" xml:space="preserve">
          <source>(Don't worry, &lt;a href=&quot;https://twitter.com/jingc/status/616608251463909376&quot;&gt;Flux creators&lt;/a&gt;&lt;a href=&quot;https://twitter.com/fisherwebdev/status/616286955693682688&quot;&gt;approve of it&lt;/a&gt;, if that's all you wanted to know.)</source>
          <target state="translated">(No se preocupe, los &lt;a href=&quot;https://twitter.com/jingc/status/616608251463909376&quot;&gt;creadores de Flux lo &lt;/a&gt;&lt;a href=&quot;https://twitter.com/fisherwebdev/status/616286955693682688&quot;&gt;aprueban&lt;/a&gt; , si eso es todo lo que quer&amp;iacute;a saber).</target>
        </trans-unit>
        <trans-unit id="d324236cbf7b2c5b411e6901ceaf0426c57a961e" translate="yes" xml:space="preserve">
          <source>(If you're looking for a WordPress framework, check out &lt;a href=&quot;https://reduxframework.com/&quot;&gt;Redux Framework&lt;/a&gt;.)</source>
          <target state="translated">(Si est&amp;aacute; buscando un marco de WordPress, consulte &lt;a href=&quot;https://reduxframework.com/&quot;&gt;Redux Framework&lt;/a&gt; ).</target>
        </trans-unit>
        <trans-unit id="edae0b5981e0002b30818364c8a1389176fcb0ee" translate="yes" xml:space="preserve">
          <source>(Object&lt;sup&gt;&amp;dagger;&lt;/sup&gt;): The dispatched action (see notes).</source>
          <target state="translated">(Objeto &lt;sup&gt;&amp;dagger;&lt;/sup&gt; ): La acci&amp;oacute;n despachada (ver notas).</target>
        </trans-unit>
        <trans-unit id="b0be13084aba8adc3d7b205aaf4e927e25fa0408" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;#middleware&quot;&gt;Middleware&lt;/a&gt; wraps the base dispatch function. It allows the dispatch function to handle &lt;a href=&quot;#async-action&quot;&gt;async actions&lt;/a&gt; in addition to actions. Middleware may transform, delay, ignore, or otherwise interpret actions or async actions before passing them to the next middleware. See below for more information.</source>
          <target state="translated">&lt;a href=&quot;#middleware&quot;&gt;Middleware&lt;/a&gt; envuelve la funci&amp;oacute;n de despacho base. Permite que la funci&amp;oacute;n de despacho maneje &lt;a href=&quot;#async-action&quot;&gt;acciones as&amp;iacute;ncronas&lt;/a&gt; adem&amp;aacute;s de acciones. El middleware puede transformar, retrasar, ignorar o interpretar acciones o acciones asincr&amp;oacute;nicas antes de pasarlas al siguiente middleware. Vea abajo para m&amp;aacute;s informaci&amp;oacute;n.</target>
        </trans-unit>
        <trans-unit id="107b3ce80a3c02523b93e5b4d695a60fd20c2f63" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;../glossary#middleware&quot;&gt;Middleware&lt;/a&gt; lets you inject custom logic that interprets every action object before it is dispatched. Async actions are the most common use case for middleware.</source>
          <target state="translated">&lt;a href=&quot;../glossary#middleware&quot;&gt;Middleware le&lt;/a&gt; permite inyectar l&amp;oacute;gica personalizada que interpreta cada objeto de acci&amp;oacute;n antes de que se env&amp;iacute;e. Las acciones as&amp;iacute;ncronas son el caso de uso m&amp;aacute;s com&amp;uacute;n de middleware.</target>
        </trans-unit>
        <trans-unit id="fd07de91063da45b75bbcacd8cd309f14a69d740" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;../glossary#reducer&quot;&gt;Reducers&lt;/a&gt; capture &amp;ldquo;the essence&amp;rdquo; of Flux Stores, so it's possible to gradually migrate an existing Flux project towards Redux, whether you are using &lt;a href=&quot;http://github.com/acdlite/flummox&quot;&gt;Flummox&lt;/a&gt;, &lt;a href=&quot;http://github.com/goatslacker/alt&quot;&gt;Alt&lt;/a&gt;, &lt;a href=&quot;https://github.com/facebook/flux&quot;&gt;traditional Flux&lt;/a&gt;, or any other Flux library.</source>
          <target state="translated">&lt;a href=&quot;../glossary#reducer&quot;&gt;Los reductores&lt;/a&gt; capturan &amp;ldquo;la esencia&amp;rdquo; de Flux Stores, por lo que es posible migrar gradualmente un proyecto Flux existente hacia Redux, ya sea que est&amp;eacute; utilizando &lt;a href=&quot;http://github.com/acdlite/flummox&quot;&gt;Flummox&lt;/a&gt; , &lt;a href=&quot;http://github.com/goatslacker/alt&quot;&gt;Alt&lt;/a&gt; , &lt;a href=&quot;https://github.com/facebook/flux&quot;&gt;Flux tradicional&lt;/a&gt; o cualquier otra biblioteca Flux.</target>
        </trans-unit>
        <trans-unit id="2bb64b4bed7a97c418523d4ffdb6288fb015adc1" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;actions&quot;&gt;Actions&lt;/a&gt; describe the fact that &lt;em&gt;something happened&lt;/em&gt;, but don't specify how the application's state changes in response. This is the job of reducers.</source>
          <target state="translated">&lt;a href=&quot;actions&quot;&gt;Las acciones&lt;/a&gt; describen el hecho de que &lt;em&gt;sucedi&amp;oacute; algo&lt;/em&gt; , pero no especifican c&amp;oacute;mo cambia el estado de la aplicaci&amp;oacute;n en respuesta. Este es el trabajo de los reductores.</target>
        </trans-unit>
        <trans-unit id="a8dfe31e2797d17be898c68c93f8a46cba6d9313" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;advanced/asyncactions.md&quot;&gt;Async action creators&lt;/a&gt; such as &lt;a href=&quot;https://github.com/gaearon/redux-thunk&quot;&gt;redux-thunk&lt;/a&gt; have access to the entire state through &lt;code&gt;getState()&lt;/code&gt;. An action creator can retrieve additional data from the state and put it in an action, so that each reducer has enough information to update its own state slice.</source>
          <target state="translated">&lt;a href=&quot;advanced/asyncactions.md&quot;&gt;Los creadores de acciones &lt;/a&gt;&lt;a href=&quot;https://github.com/gaearon/redux-thunk&quot;&gt;as&amp;iacute;ncronas&lt;/a&gt; como redux-thunk tienen acceso a todo el estado a trav&amp;eacute;s de &lt;code&gt;getState()&lt;/code&gt; . Un creador de acciones puede recuperar datos adicionales del estado y ponerlos en una acci&amp;oacute;n, de modo que cada reductor tenga suficiente informaci&amp;oacute;n para actualizar su propia porci&amp;oacute;n de estado.</target>
        </trans-unit>
        <trans-unit id="3b5742965a8a7e105526f64e826619bea7901c44" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;api/store#dispatch&quot;&gt;&lt;code&gt;dispatch(action)&lt;/code&gt;&lt;/a&gt; is the base dispatch function described above.</source>
          <target state="translated">&lt;a href=&quot;api/store#dispatch&quot;&gt; &lt;code&gt;dispatch(action)&lt;/code&gt; &lt;/a&gt; es la funci&amp;oacute;n de despacho base descrita anteriormente.</target>
        </trans-unit>
        <trans-unit id="a233ff3ae6a630832e9d6e12074eca1e882d9857" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;api/store#getState&quot;&gt;&lt;code&gt;getState()&lt;/code&gt;&lt;/a&gt; returns the current state of the store.</source>
          <target state="translated">&lt;a href=&quot;api/store#getState&quot;&gt; &lt;code&gt;getState()&lt;/code&gt; &lt;/a&gt; devuelve el estado actual de la tienda.</target>
        </trans-unit>
        <trans-unit id="dc71ff1690cdf43dbe0920fa906f24d0396f18eb" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;api/store#replaceReducer&quot;&gt;&lt;code&gt;replaceReducer(nextReducer)&lt;/code&gt;&lt;/a&gt; can be used to implement hot reloading and code splitting. Most likely you won't use it.</source>
          <target state="translated">&lt;a href=&quot;api/store#replaceReducer&quot;&gt; &lt;code&gt;replaceReducer(nextReducer)&lt;/code&gt; &lt;/a&gt; se puede utilizar para implementar la recarga en caliente y la divisi&amp;oacute;n de c&amp;oacute;digo. Lo m&amp;aacute;s probable es que no lo uses.</target>
        </trans-unit>
        <trans-unit id="3233aa220cb3c100f9d6ac87a89259afc4cae6e6" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;api/store#subscribe&quot;&gt;&lt;code&gt;subscribe(listener)&lt;/code&gt;&lt;/a&gt; registers a function to be called on state changes.</source>
          <target state="translated">&lt;a href=&quot;api/store#subscribe&quot;&gt; &lt;code&gt;subscribe(listener)&lt;/code&gt; &lt;/a&gt; registra una funci&amp;oacute;n que se llamar&amp;aacute; en los cambios de estado.</target>
        </trans-unit>
        <trans-unit id="67aa063cda369295b907b7e537689d94e06b2f62" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;examples&quot;&gt;Official Examples&lt;/a&gt; &amp;mdash; A few official examples covering different Redux techniques</source>
          <target state="translated">&lt;a href=&quot;examples&quot;&gt;Ejemplos oficiales&lt;/a&gt; : algunos ejemplos oficiales que cubren diferentes t&amp;eacute;cnicas de Redux</target>
        </trans-unit>
        <trans-unit id="2181ce81664ba928672afb23b8a32ab80e213e8a" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;http://airbnb.io/enzyme/&quot;&gt;Enzyme&lt;/a&gt;: Enzyme is a JavaScript Testing utility for React that makes it easier to assert, manipulate, and traverse your React Components' output.</source>
          <target state="translated">&lt;a href=&quot;http://airbnb.io/enzyme/&quot;&gt;Enzyme&lt;/a&gt; : Enzyme es una utilidad de prueba de JavaScript para React que hace que sea m&amp;aacute;s f&amp;aacute;cil afirmar, manipular y recorrer la salida de sus componentes de React.</target>
        </trans-unit>
        <trans-unit id="326058ae349999870d6aced66c0de2b764c93797" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;http://airbnb.io/enzyme/docs/api/shallow.html&quot;&gt;Shallow rendering&lt;/a&gt;: Shallow rendering lets you instantiate a component and effectively get the result of its &lt;code&gt;render&lt;/code&gt; method just a single level deep instead of rendering components recursively to a DOM. Shallow rendering is useful for unit tests, where you test a particular component only, and importantly not its children. This also means that changing a child component won't affect the tests for the parent component. Testing a component and all its children can be accomplished with &lt;a href=&quot;http://airbnb.io/enzyme/docs/api/mount.html&quot;&gt;Enzyme's &lt;code&gt;mount()&lt;/code&gt; method&lt;/a&gt;, aka full DOM rendering.</source>
          <target state="translated">&lt;a href=&quot;http://airbnb.io/enzyme/docs/api/shallow.html&quot;&gt;Renderizado superficial&lt;/a&gt; : el renderizado superficial le permite crear una instancia de un componente y obtener de manera efectiva el resultado de su m&amp;eacute;todo de &lt;code&gt;render&lt;/code&gt; izado con solo un nivel de profundidad en lugar de representar los componentes de forma recursiva en un DOM. La representaci&amp;oacute;n superficial es &amp;uacute;til para las pruebas unitarias, en las que se prueba un componente en particular &amp;uacute;nicamente y, lo que es m&amp;aacute;s importante, no sus hijos. Esto tambi&amp;eacute;n significa que cambiar un componente secundario no afectar&amp;aacute; las pruebas del componente principal. Se puede probar un componente y todos sus elementos secundarios con &lt;a href=&quot;http://airbnb.io/enzyme/docs/api/mount.html&quot;&gt;el m&amp;eacute;todo &lt;code&gt;mount()&lt;/code&gt; Enzyme&lt;/a&gt; , tambi&amp;eacute;n conocido como representaci&amp;oacute;n DOM completa.</target>
        </trans-unit>
        <trans-unit id="61241f2e9ceb67ae4dfccf7cc9ca1f400093495e" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;http://camsong.github.io/redux-in-chinese/&quot;&gt;中文文档&lt;/a&gt; &amp;mdash; Chinese</source>
          <target state="translated">&lt;a href=&quot;http://camsong.github.io/redux-in-chinese/&quot;&gt;中文 文档&lt;/a&gt; - chino</target>
        </trans-unit>
        <trans-unit id="77565bb24c563c6df104040d230310edcfb00145" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;http://elm-lang.org/&quot;&gt;Elm&lt;/a&gt; is a functional programming language inspired by Haskell and created by &lt;a href=&quot;https://twitter.com/czaplic&quot;&gt;Evan Czaplicki&lt;/a&gt;. It enforces &lt;a href=&quot;https://github.com/evancz/elm-architecture-tutorial/&quot;&gt;a &amp;ldquo;model view update&amp;rdquo; architecture&lt;/a&gt;, where the update has the following signature: &lt;code&gt;(action, state) =&amp;gt; state&lt;/code&gt;. Elm &amp;ldquo;updaters&amp;rdquo; serve the same purpose as reducers in Redux.</source>
          <target state="translated">&lt;a href=&quot;http://elm-lang.org/&quot;&gt;Elm&lt;/a&gt; es un lenguaje de programaci&amp;oacute;n funcional inspirado en Haskell y creado por &lt;a href=&quot;https://twitter.com/czaplic&quot;&gt;Evan Czaplicki&lt;/a&gt; . Hace cumplir &lt;a href=&quot;https://github.com/evancz/elm-architecture-tutorial/&quot;&gt;una arquitectura de &amp;ldquo;actualizaci&amp;oacute;n de vista de modelo&amp;rdquo;&lt;/a&gt; , donde la actualizaci&amp;oacute;n tiene la siguiente firma: &lt;code&gt;(action, state) =&amp;gt; state&lt;/code&gt; . Los &amp;ldquo;actualizadores&amp;rdquo; de Elm tienen el mismo prop&amp;oacute;sito que los reductores en Redux.</target>
        </trans-unit>
        <trans-unit id="23d2c2107aca181c46e778f07e56614a8133b8c1" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;http://es.redux.js.org/&quot;&gt;Redux en Espa&amp;ntilde;ol&lt;/a&gt; - Spanish</source>
          <target state="translated">&lt;a href=&quot;http://es.redux.js.org/&quot;&gt;Redux en Espa&amp;ntilde;ol&lt;/a&gt; - Espa&amp;ntilde;ol</target>
        </trans-unit>
        <trans-unit id="ff86a93740e76f0a9a588dfc7edd94627d0b6065" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;http://facebook.github.io/react/docs/test-utils.html&quot;&gt;React Test Utils&lt;/a&gt;: Test Utilities for React. Used by Enzyme.</source>
          <target state="translated">&lt;a href=&quot;http://facebook.github.io/react/docs/test-utils.html&quot;&gt;React Test Utils&lt;/a&gt; : Utilidades de prueba para React. Utilizado por Enzyme.</target>
        </trans-unit>
        <trans-unit id="fa318edcedf300020034617867e41d3d7d461c6b" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;http://github.com/gaearon/redux-devtools&quot;&gt;Redux DevTools&lt;/a&gt; &amp;mdash; An action logger with time travel UI, hot reloading and error handling for the reducers, &lt;a href=&quot;https://www.youtube.com/watch?v=xsSnOQynTHs&quot;&gt;first demoed at React Europe&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;http://github.com/gaearon/redux-devtools&quot;&gt;Redux DevTools&lt;/a&gt; : un registrador de acciones con interfaz de usuario de viaje en el tiempo, recarga en caliente y manejo de errores para los reductores, &lt;a href=&quot;https://www.youtube.com/watch?v=xsSnOQynTHs&quot;&gt;primera demostraci&amp;oacute;n en React Europe&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="8169d6309556697be51098425caaa8733bba177f" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;http://github.com/gaearon/redux-thunk&quot;&gt;redux-thunk&lt;/a&gt; &amp;mdash; The easiest way to write async action creators</source>
          <target state="translated">&lt;a href=&quot;http://github.com/gaearon/redux-thunk&quot;&gt;redux-thunk&lt;/a&gt; : la forma m&amp;aacute;s f&amp;aacute;cil de escribir creadores de acciones as&amp;iacute;ncronas</target>
        </trans-unit>
        <trans-unit id="f27a8933220f7b51407b0697067eeebc832de481" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;http://www.confluent.io/blog/turning-the-database-inside-out-with-apache-samza/&quot;&gt;Turning the database inside-out&lt;/a&gt; for blowing my mind;</source>
          <target state="translated">&lt;a href=&quot;http://www.confluent.io/blog/turning-the-database-inside-out-with-apache-samza/&quot;&gt;Darle la vuelta a la base de datos&lt;/a&gt; para dejarme alucinado;</target>
        </trans-unit>
        <trans-unit id="32b2722ca06d7e3809116a97bf38d37832bcb0ce" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;http://youtube.com/watch?v=xsSnOQynTHs&quot;&gt;Live React: Hot Reloading and Time Travel&lt;/a&gt; &amp;mdash; See how constraints enforced by Redux make hot reloading with time travel easy</source>
          <target state="translated">&lt;a href=&quot;http://youtube.com/watch?v=xsSnOQynTHs&quot;&gt;Live React: recarga en caliente y viaje en el tiempo&lt;/a&gt; : vea c&amp;oacute;mo las restricciones impuestas por Redux facilitan la recarga en caliente con viajes en el tiempo</target>
        </trans-unit>
        <trans-unit id="5bc316623c9deb9e9034f7d23637072db15a0f28" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Object/assign&quot;&gt;&lt;code&gt;Object.assign()&lt;/code&gt;&lt;/a&gt; is a part of ES6, but is not implemented by most browsers yet. You'll need to either use a polyfill, a &lt;a href=&quot;https://www.npmjs.com/package/babel-plugin-transform-object-assign&quot;&gt;Babel plugin&lt;/a&gt;, or a helper from another library like &lt;a href=&quot;https://lodash.com/docs#assign&quot;&gt;&lt;code&gt;_.assign()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Object/assign&quot;&gt; &lt;code&gt;Object.assign()&lt;/code&gt; &lt;/a&gt; es parte de ES6, pero la mayor&amp;iacute;a de los navegadores a&amp;uacute;n no lo implementan. Deber&amp;aacute; usar un polyfill, un&lt;a href=&quot;https://www.npmjs.com/package/babel-plugin-transform-object-assign&quot;&gt; complemento de Babel&lt;/a&gt; o un ayudante de otra biblioteca como&lt;a href=&quot;https://lodash.com/docs#assign&quot;&gt; &lt;code&gt;_.assign()&lt;/code&gt; &lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="32bee8f422e4c2ab236c312da17a9c38cac75683" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://egghead.io/series/getting-started-with-redux&quot;&gt;Getting Started with Redux&lt;/a&gt; is a video course consisting of 30 videos narrated by Dan Abramov, author of Redux. It is designed to complement the &amp;ldquo;Basics&amp;rdquo; part of the docs while bringing additional insights about immutability, testing, Redux best practices, and using Redux with React. &lt;strong&gt;This course is free and will always be.&lt;/strong&gt;</source>
          <target state="translated">&lt;a href=&quot;https://egghead.io/series/getting-started-with-redux&quot;&gt;Getting Started with Redux&lt;/a&gt; es un curso de video que consta de 30 videos narrados por Dan Abramov, autor de Redux. Est&amp;aacute; dise&amp;ntilde;ado para complementar la parte &amp;ldquo;B&amp;aacute;sica&amp;rdquo; de los documentos al tiempo que brinda informaci&amp;oacute;n adicional sobre la inmutabilidad, las pruebas, las mejores pr&amp;aacute;cticas de Redux y el uso de Redux con React. &lt;strong&gt;Este curso es gratuito y siempre lo ser&amp;aacute;.&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="a2950e131e272fe84d311faa920bbd6acbf06f7a" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://facebook.github.io/immutable-js&quot;&gt;Immutable&lt;/a&gt; is a JavaScript library implementing persistent data structures. It is performant and has an idiomatic JavaScript API.</source>
          <target state="translated">&lt;a href=&quot;https://facebook.github.io/immutable-js&quot;&gt;Immutable&lt;/a&gt; es una biblioteca de JavaScript que implementa estructuras de datos persistentes. Es eficaz y tiene una API JavaScript idiom&amp;aacute;tica.</target>
        </trans-unit>
        <trans-unit id="d5833afba76ada5ae020425be0bb3df43c4f7430" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://github.com/ForbesLindesay/redux-optimist&quot;&gt;redux-optimist&lt;/a&gt; &amp;mdash; Optimistically apply actions that can be later committed or reverted</source>
          <target state="translated">&lt;a href=&quot;https://github.com/ForbesLindesay/redux-optimist&quot;&gt;redux-optimist&lt;/a&gt; : aplica de manera optimista acciones que luego se pueden confirmar o revertir</target>
        </trans-unit>
        <trans-unit id="246e34aae7982e56bc50e3cae1f0ce328818b50c" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://github.com/ReactiveX/RxJS&quot;&gt;RxJS&lt;/a&gt; is a superb way to manage the complexity of asynchronous apps. In fact &lt;a href=&quot;http://cycle.js.org&quot;&gt;there is an effort to create a library that models human-computer interaction as interdependent observables&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;https://github.com/ReactiveX/RxJS&quot;&gt;RxJS&lt;/a&gt; es una forma excelente de gestionar la complejidad de las aplicaciones asincr&amp;oacute;nicas. De hecho, &lt;a href=&quot;http://cycle.js.org&quot;&gt;existe un esfuerzo por crear una biblioteca que modele la interacci&amp;oacute;n humano-computadora como observables interdependientes&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="fc1628bafccfa550b14477fdcb8a2880af27d670" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://github.com/Yomguithereal/baobab&quot;&gt;Baobab&lt;/a&gt; is another popular library implementing immutable API for updating plain JavaScript objects. While you can use it with Redux, there is little benefit in using them together.</source>
          <target state="translated">&lt;a href=&quot;https://github.com/Yomguithereal/baobab&quot;&gt;Baobab&lt;/a&gt; es otra biblioteca popular que implementa una API inmutable para actualizar objetos JavaScript simples. Si bien puede usarlo con Redux, hay pocos beneficios en usarlos juntos.</target>
        </trans-unit>
        <trans-unit id="ca68c66f6b4c6a980738b0b474b7797724c475ae" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://github.com/acdlite/flummox&quot;&gt;Flummox&lt;/a&gt; for teaching me to approach Flux without boilerplate or singletons;</source>
          <target state="translated">&lt;a href=&quot;https://github.com/acdlite/flummox&quot;&gt;Flummox&lt;/a&gt; por ense&amp;ntilde;arme a acercarme a Flux sin repetici&amp;oacute;n o singletons;</target>
        </trans-unit>
        <trans-unit id="462c24fee4dc0ea20edf2fb2bcab21199e928183" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://github.com/acdlite/flux-standard-action&quot;&gt;Flux Standard Action&lt;/a&gt; &amp;mdash; A human-friendly standard for Flux action objects</source>
          <target state="translated">&lt;a href=&quot;https://github.com/acdlite/flux-standard-action&quot;&gt;Acci&amp;oacute;n est&amp;aacute;ndar de flujo&lt;/a&gt; : un est&amp;aacute;ndar amigable para los humanos para objetos de acci&amp;oacute;n de flujo</target>
        </trans-unit>
        <trans-unit id="d6681847f5ac1aebff1682d6668c0423aa44ef28" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://github.com/acdlite/redux-actions&quot;&gt;redux-actions&lt;/a&gt; &amp;mdash; Reduces the boilerplate in writing reducers and action creators</source>
          <target state="translated">&lt;a href=&quot;https://github.com/acdlite/redux-actions&quot;&gt;redux-actions&lt;/a&gt; : reduce el est&amp;aacute;ndar en la escritura de reductores y creadores de acciones</target>
        </trans-unit>
        <trans-unit id="e21d89989e6407db8130754d1c8cc4ea48c320c2" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://github.com/acdlite/redux-promise&quot;&gt;redux-promise&lt;/a&gt; &amp;mdash; &lt;a href=&quot;https://github.com/acdlite/flux-standard-action&quot;&gt;FSA&lt;/a&gt;-compliant promise middleware</source>
          <target state="translated">&lt;a href=&quot;https://github.com/acdlite/redux-promise&quot;&gt;redux-promise&lt;/a&gt; - middleware de promesa compatible con &lt;a href=&quot;https://github.com/acdlite/flux-standard-action&quot;&gt;FSA&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="adc32c5ec0e57af144b709327c464173a6558f7a" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://github.com/acdlite/redux-transducers&quot;&gt;redux-transducers&lt;/a&gt; &amp;mdash; Transducer utilities for Redux</source>
          <target state="translated">&lt;a href=&quot;https://github.com/acdlite/redux-transducers&quot;&gt;redux-transducers&lt;/a&gt; - Utilidades de transductores para Redux</target>
        </trans-unit>
        <trans-unit id="635f1546df5dc27cea670f0285cbf50019b2608f" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://github.com/alexkuz/redux-devtools-inspector&quot;&gt;Inspector&lt;/a&gt; &amp;mdash; A custom monitor for Redux DevTools that lets you filter actions, inspect diffs, and pin deep paths in the state to observe their changes</source>
          <target state="translated">&lt;a href=&quot;https://github.com/alexkuz/redux-devtools-inspector&quot;&gt;Inspector&lt;/a&gt; : un monitor personalizado para Redux DevTools que le permite filtrar acciones, inspeccionar diferencias y fijar rutas profundas en el estado para observar sus cambios.</target>
        </trans-unit>
        <trans-unit id="5392440f66a0b62817730b32d7e87386d20ed41e" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://github.com/andrewngu/sound-redux&quot;&gt;SoundRedux&lt;/a&gt; &amp;mdash; A SoundCloud client built with Redux</source>
          <target state="translated">&lt;a href=&quot;https://github.com/andrewngu/sound-redux&quot;&gt;SoundRedux&lt;/a&gt; : un cliente de SoundCloud creado con Redux</target>
        </trans-unit>
        <trans-unit id="671366abacb074ef67f4cf3094e172cad3c7de19" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://github.com/apollostack/apollo-client&quot;&gt;apollo-client&lt;/a&gt; &amp;mdash; A simple caching client for any GraphQL server and UI framework built on top of Redux</source>
          <target state="translated">&lt;a href=&quot;https://github.com/apollostack/apollo-client&quot;&gt;apollo-client&lt;/a&gt; : un cliente de almacenamiento en cach&amp;eacute; simple para cualquier marco de interfaz de usuario y servidor GraphQL construido sobre Redux</target>
        </trans-unit>
        <trans-unit id="9e948c295aecd2de19653c56dd37e6164bc205c0" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://github.com/arnaudbenard/redux-mock-store&quot;&gt;redux-mock-store&lt;/a&gt; &amp;mdash; Mock redux store for testing your app</source>
          <target state="translated">&lt;a href=&quot;https://github.com/arnaudbenard/redux-mock-store&quot;&gt;redux-mock-store&lt;/a&gt; - Tienda simulada de redux para probar su aplicaci&amp;oacute;n</target>
        </trans-unit>
        <trans-unit id="7a572eea1e304e2b4d1765dc1dd8e7e6d040fb4a" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://github.com/bvaughn/redux-devtools-filterable-log-monitor/&quot;&gt;Filterable Log Monitor&lt;/a&gt; &amp;mdash; Filterable tree view monitor for Redux DevTools</source>
          <target state="translated">&lt;a href=&quot;https://github.com/bvaughn/redux-devtools-filterable-log-monitor/&quot;&gt;Monitor de registro&lt;/a&gt; filtrable: monitor de vista de &amp;aacute;rbol filtrable para Redux DevTools</target>
        </trans-unit>
        <trans-unit id="738b91de5b474d6632d5e4c6ca13f26cbbbfe538" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://github.com/calesce/redux-slider-monitor&quot;&gt;Slider Monitor&lt;/a&gt; &amp;mdash; A custom monitor for Redux DevTools to replay recorded Redux actions</source>
          <target state="translated">&lt;a href=&quot;https://github.com/calesce/redux-slider-monitor&quot;&gt;Slider Monitor&lt;/a&gt; : un monitor personalizado para Redux DevTools para reproducir acciones grabadas de Redux</target>
        </trans-unit>
        <trans-unit id="a6b82050d15ff636cab86ab964babce485a0a59e" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://github.com/cerebral/redux-action-tree&quot;&gt;redux-action-tree&lt;/a&gt; &amp;mdash; Composable Cerebral-style signals for Redux</source>
          <target state="translated">&lt;a href=&quot;https://github.com/cerebral/redux-action-tree&quot;&gt;redux-action-tree&lt;/a&gt; - Se&amp;ntilde;ales de estilo cerebral componibles para Redux</target>
        </trans-unit>
        <trans-unit id="c3cb45ad1ce1a52403984ab13791a016bacbef87" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://github.com/chentsulin/redux&quot;&gt;繁體中文文件&lt;/a&gt; &amp;mdash; Traditional Chinese</source>
          <target state="translated">&lt;a href=&quot;https://github.com/chentsulin/redux&quot;&gt;繁體 中文 文件&lt;/a&gt; - Chino tradicional</target>
        </trans-unit>
        <trans-unit id="7237f437351893c36e43e30f1a66cf47ac72460d" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://github.com/cyclejs-community/redux-cycles&quot;&gt;redux-cycles&lt;/a&gt; &amp;mdash; Handle Redux async actions using Cycle.js</source>
          <target state="translated">&lt;a href=&quot;https://github.com/cyclejs-community/redux-cycles&quot;&gt;redux-ciclos&lt;/a&gt; - Maneja acciones as&amp;iacute;ncronas de Redux usando Cycle.js</target>
        </trans-unit>
        <trans-unit id="4d850aef967058fa2b6d38c9b44bb6100d7ef473" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://github.com/cyclejs/cycle-core&quot;&gt;Cycle&lt;/a&gt; for showing how often a function is the best tool;</source>
          <target state="translated">&lt;a href=&quot;https://github.com/cyclejs/cycle-core&quot;&gt;Ciclo&lt;/a&gt; para mostrar la frecuencia con la que una funci&amp;oacute;n es la mejor herramienta;</target>
        </trans-unit>
        <trans-unit id="b646bb52b5ada7949ead74ceb015522a73c82f52" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://github.com/davidkpiano/react-redux-form&quot;&gt;react-redux-form&lt;/a&gt; &amp;mdash; Create forms easily in React with Redux</source>
          <target state="translated">&lt;a href=&quot;https://github.com/davidkpiano/react-redux-form&quot;&gt;react-redux-form&lt;/a&gt; - Cree formularios f&amp;aacute;cilmente en React with Redux</target>
        </trans-unit>
        <trans-unit id="9b485a9343cd81ce214624d7ee75dd8b5f957f28" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://github.com/dmitry-zaets/redux-actions-assertions&quot;&gt;redux-actions-assertions&lt;/a&gt; &amp;mdash; Assertions for Redux actions testing</source>
          <target state="translated">&lt;a href=&quot;https://github.com/dmitry-zaets/redux-actions-assertions&quot;&gt;redux-actions-assertions&lt;/a&gt; - Afirmaciones para la prueba de acciones de Redux</target>
        </trans-unit>
        <trans-unit id="33d0704f90d9fc9bec2f6289de5455def009259f" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://github.com/ekosz/redux-falcor&quot;&gt;redux-falcor&lt;/a&gt; &amp;mdash; Falcor</source>
          <target state="translated">&lt;a href=&quot;https://github.com/ekosz/redux-falcor&quot;&gt;redux-falcor&lt;/a&gt; - Falcor</target>
        </trans-unit>
        <trans-unit id="b7052bc5ca61cda06f2e818249aab92d0c11f8df" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://github.com/erikras/ducks-modular-redux&quot;&gt;Ducks: Redux Reducer Bundles&lt;/a&gt; &amp;mdash; A proposal for bundling reducers, action types and actions</source>
          <target state="translated">&lt;a href=&quot;https://github.com/erikras/ducks-modular-redux&quot;&gt;Ducks: Redux Reducer Bundles&lt;/a&gt; : una propuesta para agrupar reductores, tipos de acci&amp;oacute;n y acciones</target>
        </trans-unit>
        <trans-unit id="5ad64f1b1acf59b7989610892266e94fa9a6e64b" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://github.com/erikras/redux-form&quot;&gt;redux-form&lt;/a&gt; &amp;mdash; Keep React form state in Redux</source>
          <target state="translated">&lt;a href=&quot;https://github.com/erikras/redux-form&quot;&gt;redux-form&lt;/a&gt; - Mantener el estado del formulario React en Redux</target>
        </trans-unit>
        <trans-unit id="e0a49ddf7651bd6d746fee97f180340c5c22b41b" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://github.com/evancz/elm-architecture-tutorial&quot;&gt;The Elm Architecture&lt;/a&gt; for a great intro to modeling state updates with reducers;</source>
          <target state="translated">&lt;a href=&quot;https://github.com/evancz/elm-architecture-tutorial&quot;&gt;The Elm Architecture&lt;/a&gt; para una excelente introducci&amp;oacute;n al modelado de actualizaciones de estado con reductores;</target>
        </trans-unit>
        <trans-unit id="be4545fd7b6adf364efdbb91002ae394c5e58615" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://github.com/faassen/reselect&quot;&gt;reselect&lt;/a&gt; &amp;mdash; Efficient derived data selectors inspired by NuclearJS</source>
          <target state="translated">&lt;a href=&quot;https://github.com/faassen/reselect&quot;&gt;reselect&lt;/a&gt; : selectores de datos derivados eficientes inspirados en NuclearJS</target>
        </trans-unit>
        <trans-unit id="7708a46f9be2f564980d4e5bda78b4c5d35dc9de" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://github.com/facebook/react&quot;&gt;React&lt;/a&gt; for the pragmatic innovation.</source>
          <target state="translated">&lt;a href=&quot;https://github.com/facebook/react&quot;&gt;Reaccionar&lt;/a&gt; por la innovaci&amp;oacute;n pragm&amp;aacute;tica.</target>
        </trans-unit>
        <trans-unit id="5a476b863690c612db3b916dce5198f075291ef2" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://github.com/fcomb/redux-logger&quot;&gt;redux-logger&lt;/a&gt; &amp;mdash; Log every Redux action and the next state</source>
          <target state="translated">&lt;a href=&quot;https://github.com/fcomb/redux-logger&quot;&gt;redux-logger&lt;/a&gt; : registra cada acci&amp;oacute;n de Redux y el siguiente estado</target>
        </trans-unit>
        <trans-unit id="2168fa4ca440f276c71b288e63a7bd560f0d0edb" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://github.com/gaearon/react-redux&quot;&gt;react-redux&lt;/a&gt; &amp;mdash; React</source>
          <target state="translated">&lt;a href=&quot;https://github.com/gaearon/react-redux&quot;&gt;react-redux&lt;/a&gt; - Reaccionar</target>
        </trans-unit>
        <trans-unit id="49be928336c3ea70b586e1e0221f5209809256da" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://github.com/gaearon/redux-devtools-dock-monitor&quot;&gt;Dock Monitor&lt;/a&gt; &amp;mdash; A resizable and movable dock for Redux DevTools monitors</source>
          <target state="translated">&lt;a href=&quot;https://github.com/gaearon/redux-devtools-dock-monitor&quot;&gt;Dock Monitor&lt;/a&gt; : un muelle m&amp;oacute;vil y de tama&amp;ntilde;o variable para los monitores Redux DevTools</target>
        </trans-unit>
        <trans-unit id="77e5d33e4cdf47037c30e1ca512f37cfeb999700" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://github.com/gaearon/redux-devtools-log-monitor&quot;&gt;Log Monitor&lt;/a&gt; &amp;mdash; The default monitor for Redux DevTools with a tree view</source>
          <target state="translated">&lt;a href=&quot;https://github.com/gaearon/redux-devtools-log-monitor&quot;&gt;Monitor de registro&lt;/a&gt; : el monitor predeterminado para Redux DevTools con una vista de &amp;aacute;rbol</target>
        </trans-unit>
        <trans-unit id="c54d5349a1205ea2a9b173fd0057e9c134ab4d2d" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://github.com/gaearon/redux-thunk&quot;&gt;Thunk middleware&lt;/a&gt; isn't the only way to orchestrate asynchronous actions in Redux:</source>
          <target state="translated">&lt;a href=&quot;https://github.com/gaearon/redux-thunk&quot;&gt;El middleware Thunk&lt;/a&gt; no es la &amp;uacute;nica forma de orquestar acciones asincr&amp;oacute;nicas en Redux:</target>
        </trans-unit>
        <trans-unit id="7a086cebb6f586cfe6a594cda767089a867b08af" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://github.com/gajus/canonical-reducer-composition&quot;&gt;Canonical Reducer Composition&lt;/a&gt; &amp;mdash; An opinionated standard for nested reducer composition</source>
          <target state="translated">&lt;a href=&quot;https://github.com/gajus/canonical-reducer-composition&quot;&gt;Composici&amp;oacute;n de reductor can&amp;oacute;nico&lt;/a&gt; : un est&amp;aacute;ndar obstinado para la composici&amp;oacute;n de reductor anidado</target>
        </trans-unit>
        <trans-unit id="e745d89480c38f6937d9c622112c47d79aaa31e4" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://github.com/gajus/redux-immutable&quot;&gt;redux-immutable&lt;/a&gt; &amp;mdash; Used to create an equivalent function of Redux &lt;code&gt;combineReducers&lt;/code&gt; that works with &lt;a href=&quot;https://facebook.github.io/immutable-js/&quot;&gt;Immutable.js&lt;/a&gt; state.</source>
          <target state="translated">&lt;a href=&quot;https://github.com/gajus/redux-immutable&quot;&gt;redux-inmutable&lt;/a&gt; - Se utiliza para crear una funci&amp;oacute;n equivalente de Redux &lt;code&gt;combineReducers&lt;/code&gt; que funciona con &lt;a href=&quot;https://facebook.github.io/immutable-js/&quot;&gt;Immutable.js&lt;/a&gt; estado.</target>
        </trans-unit>
        <trans-unit id="2c52fcd9623ac00993923a629ce837ba45e51c0e" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://github.com/gcanti/redux-tcomb&quot;&gt;redux-tcomb&lt;/a&gt; &amp;mdash; Immutable and type-checked state and actions for Redux</source>
          <target state="translated">&lt;a href=&quot;https://github.com/gcanti/redux-tcomb&quot;&gt;redux-tcomb&lt;/a&gt; - Estado y acciones inmutables y de tipo verificado para Redux</target>
        </trans-unit>
        <trans-unit id="af81282584d63bf8638d0e9e5cc4817051b43838" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://github.com/johanneslumpe/redux-history-transitions&quot;&gt;redux-history-transitions&lt;/a&gt; &amp;mdash; History transitions based on arbitrary actions</source>
          <target state="translated">&lt;a href=&quot;https://github.com/johanneslumpe/redux-history-transitions&quot;&gt;redux-history-transitions&lt;/a&gt; - Transiciones hist&amp;oacute;ricas basadas en acciones arbitrarias</target>
        </trans-unit>
        <trans-unit id="4ec6e8ad705f1aceaf230c55020882fad996b178" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://github.com/leoasis/redux-immutable-state-invariant&quot;&gt;redux-immutable-state-invariant&lt;/a&gt; &amp;mdash; Warns about state mutations in development</source>
          <target state="translated">&lt;a href=&quot;https://github.com/leoasis/redux-immutable-state-invariant&quot;&gt;redux-inmutable-state-invariant&lt;/a&gt; : advierte sobre mutaciones de estado en el desarrollo</target>
        </trans-unit>
        <trans-unit id="7905dff698bee7543c15da2228433d7b1d6a338f" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://github.com/markdalgleish/redial&quot;&gt;redial&lt;/a&gt; &amp;mdash; Universal data fetching and route lifecycle management for React that works great with Redux</source>
          <target state="translated">&lt;a href=&quot;https://github.com/markdalgleish/redial&quot;&gt;remarcaci&amp;oacute;n&lt;/a&gt; : obtenci&amp;oacute;n de datos universales y gesti&amp;oacute;n del ciclo de vida de la ruta para React que funciona muy bien con Redux</target>
        </trans-unit>
        <trans-unit id="b9e9eaeab55b0c8cd498c9f208fca819c29ea328" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://github.com/markdalgleish/redux-analytics&quot;&gt;redux-analytics&lt;/a&gt; &amp;mdash; Analytics middleware for Redux</source>
          <target state="translated">&lt;a href=&quot;https://github.com/markdalgleish/redux-analytics&quot;&gt;redux-analytics&lt;/a&gt; - middleware de an&amp;aacute;lisis para Redux</target>
        </trans-unit>
        <trans-unit id="76bd67d8f88905517eed83dafa3047921d206f66" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://github.com/markerikson/react-redux-links&quot;&gt;React-Redux Links&lt;/a&gt; is a curated list of high-quality articles, tutorials, and related content for React, Redux, ES6, and more.</source>
          <target state="translated">&lt;a href=&quot;https://github.com/markerikson/react-redux-links&quot;&gt;React-Redux Links&lt;/a&gt; es una lista seleccionada de art&amp;iacute;culos, tutoriales y contenido relacionado de alta calidad para React, Redux, ES6 y m&amp;aacute;s.</target>
        </trans-unit>
        <trans-unit id="7458fee6ef27b6ea44de14b58a088b3d484787c5" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://github.com/markerikson/redux-ecosystem-links&quot;&gt;Redux Ecosystem Links&lt;/a&gt; is a categorized collection of Redux-related libraries, addons, and utilities.</source>
          <target state="translated">&lt;a href=&quot;https://github.com/markerikson/redux-ecosystem-links&quot;&gt;Redux Ecosystem Links&lt;/a&gt; es una colecci&amp;oacute;n categorizada de bibliotecas, complementos y utilidades relacionadas con Redux.</target>
        </trans-unit>
        <trans-unit id="5c521f74e329344dfada627572d0439c5ce27980" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://github.com/mattkrick/redux-optimistic-ui&quot;&gt;redux-optimistic-ui&lt;/a&gt; &amp;mdash; A reducer enhancer to enable type-agnostic optimistic updates</source>
          <target state="translated">&lt;a href=&quot;https://github.com/mattkrick/redux-optimistic-ui&quot;&gt;redux-optimistic-ui&lt;/a&gt; : un potenciador reductor para permitir actualizaciones optimistas independientes del tipo</target>
        </trans-unit>
        <trans-unit id="09a22d71db7bc4a31e59f65f17a1c4390b8be913" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://github.com/mohebifar/grafgiti&quot;&gt;grafgiti&lt;/a&gt; &amp;mdash; Create graffiti on your GitHub contributions wall</source>
          <target state="translated">&lt;a href=&quot;https://github.com/mohebifar/grafgiti&quot;&gt;grafgiti&lt;/a&gt; : crea graffiti en tu muro de contribuciones de GitHub</target>
        </trans-unit>
        <trans-unit id="fcdd90fbe1bce5cda821db0cbb40e37a05bb4838" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://github.com/omcljs/om&quot;&gt;Om&lt;/a&gt; for popularizing the idea of a single state atom;</source>
          <target state="translated">&lt;a href=&quot;https://github.com/omcljs/om&quot;&gt;Om&lt;/a&gt; por popularizar la idea de un &amp;aacute;tomo de estado &amp;uacute;nico;</target>
        </trans-unit>
        <trans-unit id="126f6dcd5981219780c79f04dab128927a0c526e" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://github.com/omnidan/redux-ignore&quot;&gt;redux-ignore&lt;/a&gt; &amp;mdash; Ignore redux actions by array or filter function</source>
          <target state="translated">&lt;a href=&quot;https://github.com/omnidan/redux-ignore&quot;&gt;redux-ignore&lt;/a&gt; : ignora las acciones redux por matriz o funci&amp;oacute;n de filtro</target>
        </trans-unit>
        <trans-unit id="522c27cd295aa2f0b11343353b70bfe170950f50" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://github.com/omnidan/redux-recycle&quot;&gt;redux-recycle&lt;/a&gt; &amp;mdash; Reset the redux state on certain actions</source>
          <target state="translated">&lt;a href=&quot;https://github.com/omnidan/redux-recycle&quot;&gt;redux-recycling&lt;/a&gt; : restablece el estado redux en ciertas acciones</target>
        </trans-unit>
        <trans-unit id="6e04e334289a63c7eb319c457b7a701b7a18d175" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://github.com/omnidan/redux-undo&quot;&gt;redux-undo&lt;/a&gt; &amp;mdash; Effortless undo/redo and action history for your reducers</source>
          <target state="translated">&lt;a href=&quot;https://github.com/omnidan/redux-undo&quot;&gt;redux-undo&lt;/a&gt; : deshacer / rehacer sin esfuerzo e historial de acciones para sus reductores</target>
        </trans-unit>
        <trans-unit id="1b6afe4d71b345b389ea720ccf3e22bb58ff5fe1" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://github.com/optimizely/nuclear-js&quot;&gt;NuclearJS&lt;/a&gt; for proving this architecture can be performant;</source>
          <target state="translated">&lt;a href=&quot;https://github.com/optimizely/nuclear-js&quot;&gt;NuclearJS&lt;/a&gt; por demostrar que esta arquitectura puede funcionar;</target>
        </trans-unit>
        <trans-unit id="55a0eceb1b164ebfa98d862358a8699dd0e2f1b9" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://github.com/paularmstrong/normalizr&quot;&gt;normalizr&lt;/a&gt; &amp;mdash; Normalize nested API responses for easier consumption by the reducers</source>
          <target state="translated">&lt;a href=&quot;https://github.com/paularmstrong/normalizr&quot;&gt;normalizr&lt;/a&gt; : normaliza las respuestas de API anidadas para facilitar el consumo por parte de los reductores</target>
        </trans-unit>
        <trans-unit id="65f9399982e1960cfde9ce2d4776f97eff213665" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://github.com/pauldijou/redux-act&quot;&gt;redux-act&lt;/a&gt; &amp;mdash; An opinionated library for making reducers and action creators</source>
          <target state="translated">&lt;a href=&quot;https://github.com/pauldijou/redux-act&quot;&gt;redux-act&lt;/a&gt; : una biblioteca obstinada para hacer reductores y creadores de acciones</target>
        </trans-unit>
        <trans-unit id="e142b1d7524dc9418bc9105b107102a2fd757747" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://github.com/peter-mouland/react-lego&quot;&gt;React-lego&lt;/a&gt; &amp;mdash; How to plug into React, one block at a time.</source>
          <target state="translated">&lt;a href=&quot;https://github.com/peter-mouland/react-lego&quot;&gt;React-lego&lt;/a&gt; : c&amp;oacute;mo conectarse a React, un bloque a la vez.</target>
        </trans-unit>
        <trans-unit id="1a7170877b7e65113318685e20beab1c145c3d9f" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://github.com/raisemarketplace/redux-loop&quot;&gt;redux-loop&lt;/a&gt; &amp;mdash; Sequence effects purely and naturally by returning them from your reducers</source>
          <target state="translated">&lt;a href=&quot;https://github.com/raisemarketplace/redux-loop&quot;&gt;redux-loop&lt;/a&gt; : efectos de secuencia pura y naturalmente devolvi&amp;eacute;ndolos de sus reductores</target>
        </trans-unit>
        <trans-unit id="61e82f58dea0ceacdd0d73fa2c46474f99faa32f" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://github.com/rajdee/redux-in-russian&quot;&gt;Redux in Russian&lt;/a&gt; &amp;mdash; Russian</source>
          <target state="translated">&lt;a href=&quot;https://github.com/rajdee/redux-in-russian&quot;&gt;Redux en ruso&lt;/a&gt; - ruso</target>
        </trans-unit>
        <trans-unit id="911ae2c57d05e9d855f2f55ff67275735c340d15" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://github.com/reactjs/react-redux&quot;&gt;React bindings&lt;/a&gt; are not included in Redux by default. You need to install them explicitly:</source>
          <target state="translated">&lt;a href=&quot;https://github.com/reactjs/react-redux&quot;&gt;Los enlaces de React&lt;/a&gt; no est&amp;aacute;n incluidos en Redux por defecto. Necesita instalarlos expl&amp;iacute;citamente:</target>
        </trans-unit>
        <trans-unit id="668aa71ef061f4bf5fb388597bd4ba6608d4c54b" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://github.com/reactjs/react-router-redux&quot;&gt;react-router-redux&lt;/a&gt; &amp;mdash; Ruthlessly simple bindings to keep React Router and Redux in sync</source>
          <target state="translated">&lt;a href=&quot;https://github.com/reactjs/react-router-redux&quot;&gt;react-router-redux&lt;/a&gt; : enlaces despiadadamente simples para mantener React Router y Redux sincronizados</target>
        </trans-unit>
        <trans-unit id="27c27d0e05c340bb3f9aef884df7dc33cd70121a" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://github.com/reactjs/reselect&quot;&gt;Reselect&lt;/a&gt; is a simple library for creating memoized, composable &lt;strong&gt;selector&lt;/strong&gt; functions. Reselect selectors can be used to efficiently compute derived data from the Redux store.</source>
          <target state="translated">&lt;a href=&quot;https://github.com/reactjs/reselect&quot;&gt;Reselect&lt;/a&gt; es una biblioteca simple para crear funciones de &lt;strong&gt;selector&lt;/strong&gt; componibles y memorizadas . Los selectores de reselecci&amp;oacute;n se pueden usar para calcular de manera eficiente los datos derivados de la tienda Redux.</target>
        </trans-unit>
        <trans-unit id="7ba8f921a9c78cafaacaa6ee8c5f98b20c97a3b5" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://github.com/redbooth/backbone-redux&quot;&gt;backbone-redux&lt;/a&gt; &amp;mdash; Backbone</source>
          <target state="translated">&lt;a href=&quot;https://github.com/redbooth/backbone-redux&quot;&gt;backbone-redux&lt;/a&gt; - Backbone</target>
        </trans-unit>
        <trans-unit id="b77488ca5a784aa384877c247d815112efb36766" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://github.com/redux-observable/redux-observable/&quot;&gt;redux-observable&lt;/a&gt; &amp;mdash; RxJS middleware for action side effects using &quot;Epics&quot;</source>
          <target state="translated">&lt;a href=&quot;https://github.com/redux-observable/redux-observable/&quot;&gt;redux-observable&lt;/a&gt; - middleware RxJS para efectos secundarios de acci&amp;oacute;n usando &quot;Epics&quot;</target>
        </trans-unit>
        <trans-unit id="828ba846080beeaf8593a911bc08a82eae111e4c" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://github.com/remojansen/redux-bootstrap&quot;&gt;redux-bootstrap&lt;/a&gt; &amp;mdash; Bootstrapping function for Redux applications</source>
          <target state="translated">&lt;a href=&quot;https://github.com/remojansen/redux-bootstrap&quot;&gt;redux-bootstrap&lt;/a&gt; - Funci&amp;oacute;n de arranque para aplicaciones Redux</target>
        </trans-unit>
        <trans-unit id="6b7feaf455447814c0b1409ee14b19a53959a4aa" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://github.com/romseguy/redux-devtools-chart-monitor&quot;&gt;Chart Monitor&lt;/a&gt; &amp;mdash; A chart monitor for Redux DevTools</source>
          <target state="translated">&lt;a href=&quot;https://github.com/romseguy/redux-devtools-chart-monitor&quot;&gt;Monitor de gr&amp;aacute;ficos&lt;/a&gt; : un monitor de gr&amp;aacute;ficos para Redux DevTools</target>
        </trans-unit>
        <trans-unit id="60a2a8fab7f2253f7754f7fddd44616ca6818b07" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://github.com/salsita/redux-side-effects&quot;&gt;redux-side-effects&lt;/a&gt; &amp;mdash; Utilize Generators for declarative yielding of side effects from your pure reducers</source>
          <target state="translated">&lt;a href=&quot;https://github.com/salsita/redux-side-effects&quot;&gt;redux-side-effects&lt;/a&gt; - Utilice generadores para producir efectos secundarios declarativos de sus reductores puros</target>
        </trans-unit>
        <trans-unit id="7ff5b0a547b627bfa68c17e7844cedfb2ed89258" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://github.com/samiskin/redux-electron-store&quot;&gt;redux-electron-store&lt;/a&gt; &amp;mdash; Store enhancers that synchronize Redux stores across Electron processes</source>
          <target state="translated">&lt;a href=&quot;https://github.com/samiskin/redux-electron-store&quot;&gt;redux-electron-store&lt;/a&gt; : mejoradores de la tienda que sincronizan las tiendas Redux en los procesos de Electron</target>
        </trans-unit>
        <trans-unit id="ead5dd38514e378fce4086ebe8dd69902a5b98c2" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://github.com/socialtables/redux-unhandled-action&quot;&gt;redux-unhandled-action&lt;/a&gt; &amp;mdash; Warns about actions that produced no state changes in development</source>
          <target state="translated">&lt;a href=&quot;https://github.com/socialtables/redux-unhandled-action&quot;&gt;redux-unhandled-action&lt;/a&gt; : advierte sobre acciones que no produjeron cambios de estado en el desarrollo</target>
        </trans-unit>
        <trans-unit id="bf95415084cc2980fc6fc410238771c666d7e934" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://github.com/svrcekmichal/redux-axios-middleware&quot;&gt;redux-axios-middleware&lt;/a&gt; &amp;mdash; Redux middleware for fetching data with axios HTTP client</source>
          <target state="translated">&lt;a href=&quot;https://github.com/svrcekmichal/redux-axios-middleware&quot;&gt;redux-axios-middleware&lt;/a&gt; : middleware de Redux para recuperar datos con el cliente HTTP de axios</target>
        </trans-unit>
        <trans-unit id="488dc9a66e0ee669bd6c2836ade49d817496c75f" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://github.com/tappleby/redux-batched-subscribe&quot;&gt;redux-batched-subscribe&lt;/a&gt; &amp;mdash; Customize batching and debouncing calls to the store subscribers</source>
          <target state="translated">&lt;a href=&quot;https://github.com/tappleby/redux-batched-subscribe&quot;&gt;redux-batched-subscribe&lt;/a&gt; : personalice el procesamiento por lotes y las llamadas de eliminaci&amp;oacute;n de rebotes a los suscriptores de la tienda</target>
        </trans-unit>
        <trans-unit id="d62d13ae7d772ba57c13adb46a8d192d8b354469" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://github.com/threepointone/disto&quot;&gt;disto&lt;/a&gt; for a proof of concept of hot reloadable Stores;</source>
          <target state="translated">&lt;a href=&quot;https://github.com/threepointone/disto&quot;&gt;disto&lt;/a&gt; para una prueba de concepto de tiendas recargables en caliente;</target>
        </trans-unit>
        <trans-unit id="912430794c537f9a04fb5544fe58c82ee48c26e3" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://github.com/toranb/ember-redux&quot;&gt;ember-redux&lt;/a&gt; - Ember.js</source>
          <target state="translated">&lt;a href=&quot;https://github.com/toranb/ember-redux&quot;&gt;ember-redux&lt;/a&gt; - Ember.js</target>
        </trans-unit>
        <trans-unit id="c2212eb90d319aca256b12839bd5d9dcd2540c5d" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://github.com/treasure-data/redux-search&quot;&gt;redux-search&lt;/a&gt; &amp;mdash; Automatically index resources in a web worker and search them without blocking</source>
          <target state="translated">&lt;a href=&quot;https://github.com/treasure-data/redux-search&quot;&gt;redux-search&lt;/a&gt; : indexa recursos autom&amp;aacute;ticamente en un trabajador web y b&amp;uacute;scalos sin bloquear</target>
        </trans-unit>
        <trans-unit id="3e82c33a3fc3f5c23b3991ac9deca81f6412a661" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://github.com/troch/deku-redux&quot;&gt;deku-redux&lt;/a&gt; &amp;mdash; Deku</source>
          <target state="translated">&lt;a href=&quot;https://github.com/troch/deku-redux&quot;&gt;deku-redux&lt;/a&gt; - Deku</target>
        </trans-unit>
        <trans-unit id="99aa71b3cf414c2d077d231fe32a1a8b772e1744" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://github.com/tshelburne/redux-batched-actions&quot;&gt;redux-batched-actions&lt;/a&gt; &amp;mdash; Dispatch several actions with a single subscriber notification</source>
          <target state="translated">&lt;a href=&quot;https://github.com/tshelburne/redux-batched-actions&quot;&gt;redux-batched-actions&lt;/a&gt; : env&amp;iacute;a varias acciones con una sola notificaci&amp;oacute;n de suscriptor</target>
        </trans-unit>
        <trans-unit id="8d1f69116287116136f16831edea2d4b75387cad" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://github.com/tur-nr/polymer-redux&quot;&gt;polymer-redux&lt;/a&gt; - Polymer</source>
          <target state="translated">&lt;a href=&quot;https://github.com/tur-nr/polymer-redux&quot;&gt;pol&amp;iacute;mero-redux&lt;/a&gt; - Pol&amp;iacute;mero</target>
        </trans-unit>
        <trans-unit id="f9e8533e56143915a47d6d3230814c97d167fc30" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://github.com/wbuchwalter/ng-redux&quot;&gt;ng-redux&lt;/a&gt; &amp;mdash; Angular</source>
          <target state="translated">&lt;a href=&quot;https://github.com/wbuchwalter/ng-redux&quot;&gt;ng-redux&lt;/a&gt; - Angular</target>
        </trans-unit>
        <trans-unit id="1adb84ec0d3fedd9d8140dcfd21cfdaba981e57e" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://github.com/wbuchwalter/ng2-redux&quot;&gt;ng2-redux&lt;/a&gt; &amp;mdash; Angular 2</source>
          <target state="translated">&lt;a href=&quot;https://github.com/wbuchwalter/ng2-redux&quot;&gt;ng2-redux&lt;/a&gt; - Angular 2</target>
        </trans-unit>
        <trans-unit id="dd42afd688fd3993d131ac58c470db0ca64d0ed6" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://github.com/weo-edu/redux-gen&quot;&gt;redux-gen&lt;/a&gt; &amp;mdash; Generator middleware for Redux</source>
          <target state="translated">&lt;a href=&quot;https://github.com/weo-edu/redux-gen&quot;&gt;redux-gen&lt;/a&gt; - middleware generador para Redux</target>
        </trans-unit>
        <trans-unit id="cebbfc649b40e0fa8771d195a93b9007758c40f2" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://github.com/whetstone/redux-devtools-diff-monitor&quot;&gt;Diff Monitor&lt;/a&gt; &amp;mdash; A monitor for Redux Devtools that diffs the Redux store mutations between actions</source>
          <target state="translated">&lt;a href=&quot;https://github.com/whetstone/redux-devtools-diff-monitor&quot;&gt;Diff Monitor&lt;/a&gt; : un monitor para Redux Devtools que diferencia las mutaciones de la tienda Redux entre acciones</target>
        </trans-unit>
        <trans-unit id="884a589c3e5de51191487d1c59f1e5b7ee3a0166" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://github.com/xgrommx/awesome-redux&quot;&gt;Awesome Redux&lt;/a&gt; is an extensive list of Redux-related repositories.</source>
          <target state="translated">&lt;a href=&quot;https://github.com/xgrommx/awesome-redux&quot;&gt;Awesome Redux&lt;/a&gt; es una lista extensa de repositorios relacionados con Redux.</target>
        </trans-unit>
        <trans-unit id="fce41d2fa6e7a2ae377463a862099fc7ee043817" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://github.com/yelouafi/redux-saga&quot;&gt;redux-saga&lt;/a&gt; &amp;mdash; An alternative side effect model for Redux apps</source>
          <target state="translated">&lt;a href=&quot;https://github.com/yelouafi/redux-saga&quot;&gt;redux-saga&lt;/a&gt; : un modelo alternativo de efectos secundarios para las aplicaciones Redux</target>
        </trans-unit>
        <trans-unit id="542f399508a2cf17f958319802f4280895a81ac0" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://github.com/zalmoxisus/redux-devtools-extension&quot;&gt;Redux DevTools Extension&lt;/a&gt; &amp;mdash; A Chrome extension wrapping Redux DevTools and providing additional functionality</source>
          <target state="translated">&lt;a href=&quot;https://github.com/zalmoxisus/redux-devtools-extension&quot;&gt;Extensi&amp;oacute;n Redux DevTools&lt;/a&gt; : una extensi&amp;oacute;n de Chrome que envuelve Redux DevTools y proporciona funcionalidad adicional</target>
        </trans-unit>
        <trans-unit id="bff1493331d9a72ee214aa8584a7e46f854bd6c8" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://github.com/zalmoxisus/redux-devtools-filter-actions&quot;&gt;Filter Actions&lt;/a&gt; &amp;mdash; Redux DevTools composable monitor with the ability to filter actions</source>
          <target state="translated">&lt;a href=&quot;https://github.com/zalmoxisus/redux-devtools-filter-actions&quot;&gt;Filtrar acciones&lt;/a&gt; : monitor componible de Redux DevTools con la capacidad de filtrar acciones</target>
        </trans-unit>
        <trans-unit id="610aadc45610fd3178ec1a4d0f1659f86c3a4382" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://twitter.com/fisherwebdev/status/616278911886884864&quot;&gt;Yes&lt;/a&gt;, and &lt;a href=&quot;https://twitter.com/andrestaltz/status/616270755605708800&quot;&gt;no&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;https://twitter.com/fisherwebdev/status/616278911886884864&quot;&gt;S&amp;iacute;&lt;/a&gt; , y &lt;a href=&quot;https://twitter.com/andrestaltz/status/616270755605708800&quot;&gt;no&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="281d252a27e2a0e50333c0c16988433e3ea99926" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://webpack.js.org/concepts/hot-module-replacement/&quot;&gt;Webpack&lt;/a&gt; for Hot Module Replacement;</source>
          <target state="translated">&lt;a href=&quot;https://webpack.js.org/concepts/hot-module-replacement/&quot;&gt;Webpack&lt;/a&gt; para reemplazo de m&amp;oacute;dulo en caliente;</target>
        </trans-unit>
        <trans-unit id="d362f1adc4636a71a99777bb9d42676751de79ab" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://www.smashingmagazine.com/2016/09/how-to-scale-react-applications/&quot;&gt;How to Scale React Applications&lt;/a&gt; (accompanying talk: &lt;a href=&quot;https://vimeo.com/168648012&quot;&gt;Scaling React Applications&lt;/a&gt;)</source>
          <target state="translated">&lt;a href=&quot;https://www.smashingmagazine.com/2016/09/how-to-scale-react-applications/&quot;&gt;C&amp;oacute;mo &lt;/a&gt;&lt;a href=&quot;https://vimeo.com/168648012&quot;&gt;escalar las aplicaciones de React&lt;/a&gt; (charla adjunta: Escalar las aplicaciones de React )</target>
        </trans-unit>
        <trans-unit id="8f14c153057f3e5ff2c682e211890c3c01452d71" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://www.youtube.com/watch?v=j-kj2qwJa_E&quot;&gt;Developing ClojureScript with Figwheel&lt;/a&gt; for convincing me that re-evaluation should &amp;ldquo;just work&amp;rdquo;;</source>
          <target state="translated">&lt;a href=&quot;https://www.youtube.com/watch?v=j-kj2qwJa_E&quot;&gt;Desarrollando ClojureScript con Figwheel&lt;/a&gt; para convencerme de que la reevaluaci&amp;oacute;n deber&amp;iacute;a &quot;simplemente funcionar&quot;;</target>
        </trans-unit>
        <trans-unit id="06d62e70b9137a15eb36c4bfaf278d14decfd6a4" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://www.youtube.com/watch?v=okdC5gcD-dM&quot;&gt;Redux: Simplifying Application State&lt;/a&gt; &amp;mdash; An intro to Redux architecture</source>
          <target state="translated">&lt;a href=&quot;https://www.youtube.com/watch?v=okdC5gcD-dM&quot;&gt;Redux: simplificaci&amp;oacute;n del estado de la aplicaci&amp;oacute;n&lt;/a&gt; : una introducci&amp;oacute;n a la arquitectura Redux</target>
        </trans-unit>
        <trans-unit id="ad10d1cb466100f8a4ae95925886bfea9a5588ad" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://www.youtube.com/watch?v=qUlRpybs7_c&quot;&gt;Cleaning the Tar: Using React within the Firefox Developer Tools&lt;/a&gt; &amp;mdash; Learn how to gradually migrate existing MVC applications to Redux</source>
          <target state="translated">&lt;a href=&quot;https://www.youtube.com/watch?v=qUlRpybs7_c&quot;&gt;Limpieza del alquitr&amp;aacute;n: uso de React dentro de las herramientas de desarrollo de Firefox&lt;/a&gt; : aprenda a migrar gradualmente las aplicaciones MVC existentes a Redux</target>
        </trans-unit>
        <trans-unit id="1b737ab7c1094f632e450d8432a9c9e16474bd23" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;introduction/examples#async&quot;&gt;Async&lt;/a&gt; (&lt;a href=&quot;https://github.com/reactjs/redux/tree/master/examples/async&quot;&gt;source&lt;/a&gt;, &lt;a href=&quot;https://codesandbox.io/s/github/reactjs/redux/tree/master/examples/async&quot;&gt;sandbox&lt;/a&gt;)</source>
          <target state="translated">&lt;a href=&quot;introduction/examples#async&quot;&gt;Async&lt;/a&gt; ( &lt;a href=&quot;https://github.com/reactjs/redux/tree/master/examples/async&quot;&gt;fuente&lt;/a&gt; , &lt;a href=&quot;https://codesandbox.io/s/github/reactjs/redux/tree/master/examples/async&quot;&gt;sandbox&lt;/a&gt; )</target>
        </trans-unit>
        <trans-unit id="34453405ef6fc18e6e87655693ec2a2bb89f30b0" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;introduction/examples#counter&quot;&gt;Counter&lt;/a&gt; (&lt;a href=&quot;https://github.com/reactjs/redux/tree/master/examples/counter&quot;&gt;source&lt;/a&gt;, &lt;a href=&quot;https://codesandbox.io/s/github/reactjs/redux/tree/master/examples/counter&quot;&gt;sandbox&lt;/a&gt;)</source>
          <target state="translated">&lt;a href=&quot;introduction/examples#counter&quot;&gt;Contador&lt;/a&gt; ( &lt;a href=&quot;https://github.com/reactjs/redux/tree/master/examples/counter&quot;&gt;fuente&lt;/a&gt; , &lt;a href=&quot;https://codesandbox.io/s/github/reactjs/redux/tree/master/examples/counter&quot;&gt;caja de arena&lt;/a&gt; )</target>
        </trans-unit>
        <trans-unit id="42b547e4f69fe31aac6b4dafd6e1ff2c05b103e3" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;introduction/examples#counter-vanilla&quot;&gt;Counter Vanilla&lt;/a&gt; (&lt;a href=&quot;https://github.com/reactjs/redux/tree/master/examples/counter-vanilla&quot;&gt;source&lt;/a&gt;)</source>
          <target state="translated">&lt;a href=&quot;introduction/examples#counter-vanilla&quot;&gt;Counter Vanilla&lt;/a&gt; ( &lt;a href=&quot;https://github.com/reactjs/redux/tree/master/examples/counter-vanilla&quot;&gt;fuente&lt;/a&gt; )</target>
        </trans-unit>
        <trans-unit id="59a364d666ad866f057b55528bf8003b6e7a3980" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;introduction/examples#real-world&quot;&gt;Real World&lt;/a&gt; (&lt;a href=&quot;https://github.com/reactjs/redux/tree/master/examples/real-world&quot;&gt;source&lt;/a&gt;, &lt;a href=&quot;https://codesandbox.io/s/github/reactjs/redux/tree/master/examples/real-world&quot;&gt;sandbox&lt;/a&gt;)</source>
          <target state="translated">&lt;a href=&quot;introduction/examples#real-world&quot;&gt;Mundo real&lt;/a&gt; ( &lt;a href=&quot;https://github.com/reactjs/redux/tree/master/examples/real-world&quot;&gt;fuente&lt;/a&gt; , &lt;a href=&quot;https://codesandbox.io/s/github/reactjs/redux/tree/master/examples/real-world&quot;&gt;caja de arena&lt;/a&gt; )</target>
        </trans-unit>
        <trans-unit id="96efe2982c4c1669ba1a120bc8297246cc6203f9" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;introduction/examples#shopping-cart&quot;&gt;Shopping Cart&lt;/a&gt; (&lt;a href=&quot;https://github.com/reactjs/redux/tree/master/examples/shopping-cart&quot;&gt;source&lt;/a&gt;, &lt;a href=&quot;https://codesandbox.io/s/github/reactjs/redux/tree/master/examples/shopping-cart&quot;&gt;sandbox&lt;/a&gt;)</source>
          <target state="translated">&lt;a href=&quot;introduction/examples#shopping-cart&quot;&gt;Carrito de compras&lt;/a&gt; ( &lt;a href=&quot;https://github.com/reactjs/redux/tree/master/examples/shopping-cart&quot;&gt;fuente&lt;/a&gt; , &lt;a href=&quot;https://codesandbox.io/s/github/reactjs/redux/tree/master/examples/shopping-cart&quot;&gt;caja de arena&lt;/a&gt; )</target>
        </trans-unit>
        <trans-unit id="8eca3dbaee744d35d31909fa899561a59637eca0" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;introduction/examples#todomvc&quot;&gt;TodoMVC&lt;/a&gt; (&lt;a href=&quot;https://github.com/reactjs/redux/tree/master/examples/todomvc&quot;&gt;source&lt;/a&gt;, &lt;a href=&quot;https://codesandbox.io/s/github/reactjs/redux/tree/master/examples/todomvc&quot;&gt;sandbox&lt;/a&gt;)</source>
          <target state="translated">&lt;a href=&quot;introduction/examples#todomvc&quot;&gt;TodoMVC&lt;/a&gt; ( &lt;a href=&quot;https://github.com/reactjs/redux/tree/master/examples/todomvc&quot;&gt;fuente&lt;/a&gt; , &lt;a href=&quot;https://codesandbox.io/s/github/reactjs/redux/tree/master/examples/todomvc&quot;&gt;caja de arena&lt;/a&gt; )</target>
        </trans-unit>
        <trans-unit id="57e7c6464db15c19011138bab173c2e287d2a6fe" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;introduction/examples#todos&quot;&gt;Todos&lt;/a&gt; (&lt;a href=&quot;https://github.com/reactjs/redux/tree/master/examples/todos&quot;&gt;source&lt;/a&gt;, &lt;a href=&quot;https://codesandbox.io/s/github/reactjs/redux/tree/master/examples/todos&quot;&gt;sandbox&lt;/a&gt;)</source>
          <target state="translated">&lt;a href=&quot;introduction/examples#todos&quot;&gt;Todos&lt;/a&gt; ( &lt;a href=&quot;https://github.com/reactjs/redux/tree/master/examples/todos&quot;&gt;fuente&lt;/a&gt; , &lt;a href=&quot;https://codesandbox.io/s/github/reactjs/redux/tree/master/examples/todos&quot;&gt;caja de arena&lt;/a&gt; )</target>
        </trans-unit>
        <trans-unit id="1ed13dde4ab11bda58a26439a12403c10a6ca595" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;introduction/examples#todos-with-undo&quot;&gt;Todos with Undo&lt;/a&gt; (&lt;a href=&quot;https://github.com/reactjs/redux/tree/master/examples/todos-with-undo&quot;&gt;source&lt;/a&gt;, &lt;a href=&quot;https://codesandbox.io/s/github/reactjs/redux/tree/master/examples/todos-with-undo&quot;&gt;sandbox&lt;/a&gt;)</source>
          <target state="translated">&lt;a href=&quot;introduction/examples#todos-with-undo&quot;&gt;Todos con Deshacer&lt;/a&gt; ( &lt;a href=&quot;https://github.com/reactjs/redux/tree/master/examples/todos-with-undo&quot;&gt;fuente&lt;/a&gt; , &lt;a href=&quot;https://codesandbox.io/s/github/reactjs/redux/tree/master/examples/todos-with-undo&quot;&gt;caja de arena&lt;/a&gt; )</target>
        </trans-unit>
        <trans-unit id="99bbfebce7fe9d012028712df4b3acc2554bdba1" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;introduction/examples#tree-view&quot;&gt;Tree View&lt;/a&gt; (&lt;a href=&quot;https://github.com/reactjs/redux/tree/master/examples/tree-view&quot;&gt;source&lt;/a&gt;, &lt;a href=&quot;https://codesandbox.io/s/github/reactjs/redux/tree/master/examples/tree-view&quot;&gt;sandbox&lt;/a&gt;)</source>
          <target state="translated">&lt;a href=&quot;introduction/examples#tree-view&quot;&gt;Vista de &amp;aacute;rbol&lt;/a&gt; ( &lt;a href=&quot;https://github.com/reactjs/redux/tree/master/examples/tree-view&quot;&gt;fuente&lt;/a&gt; , &lt;a href=&quot;https://codesandbox.io/s/github/reactjs/redux/tree/master/examples/tree-view&quot;&gt;caja de arena&lt;/a&gt; )</target>
        </trans-unit>
        <trans-unit id="87f056bfcb955f7740e3c0f64a948b832302b714" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;introduction/examples#universal&quot;&gt;Universal&lt;/a&gt; (&lt;a href=&quot;https://github.com/reactjs/redux/tree/master/examples/universal&quot;&gt;source&lt;/a&gt;)</source>
          <target state="translated">&lt;a href=&quot;introduction/examples#universal&quot;&gt;Universal&lt;/a&gt; ( &lt;a href=&quot;https://github.com/reactjs/redux/tree/master/examples/universal&quot;&gt;fuente&lt;/a&gt; )</target>
        </trans-unit>
        <trans-unit id="7c38888890f5f4205fd2f24afd87133d7819484f" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;patrons&quot;&gt;See the full list of Redux patrons.&lt;/a&gt;, as well as the always-growing list of &lt;a href=&quot;https://github.com/reactjs/redux/issues/310&quot;&gt;people and companies that use Redux&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;patrons&quot;&gt;Vea la lista completa de usuarios de Redux. &lt;/a&gt;, as&amp;iacute; como la lista siempre creciente de &lt;a href=&quot;https://github.com/reactjs/redux/issues/310&quot;&gt;personas y empresas que utilizan Redux&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="8e873131fc93496281859118adf805655ac8f12d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;...middleware&lt;/code&gt; (&lt;em&gt;arguments&lt;/em&gt;): Functions that conform to the Redux &lt;em&gt;middleware API&lt;/em&gt;. Each middleware receives &lt;a href=&quot;store&quot;&gt;&lt;code&gt;Store&lt;/code&gt;&lt;/a&gt;'s &lt;a href=&quot;store#dispatch&quot;&gt;&lt;code&gt;dispatch&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;store#getState&quot;&gt;&lt;code&gt;getState&lt;/code&gt;&lt;/a&gt; functions as named arguments, and returns a function. That function will be given the &lt;code&gt;next&lt;/code&gt; middleware's dispatch method, and is expected to return a function of &lt;code&gt;action&lt;/code&gt; calling &lt;code&gt;next(action)&lt;/code&gt; with a potentially different argument, or at a different time, or maybe not calling it at all. The last middleware in the chain will receive the real store's &lt;a href=&quot;store#dispatch&quot;&gt;&lt;code&gt;dispatch&lt;/code&gt;&lt;/a&gt; method as the &lt;code&gt;next&lt;/code&gt; parameter, thus ending the chain. So, the middleware signature is &lt;code&gt;({ getState, dispatch }) =&amp;gt; next =&amp;gt; action&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;...middleware&lt;/code&gt; ( &lt;em&gt;argumentos&lt;/em&gt; ): funciones que se ajustan a la &lt;em&gt;API de middleware de&lt;/em&gt; Redux . Cada middleware recibe &lt;a href=&quot;store&quot;&gt; &lt;code&gt;Store&lt;/code&gt; &lt;/a&gt; 's &lt;a href=&quot;store#dispatch&quot;&gt; &lt;code&gt;dispatch&lt;/code&gt; &lt;/a&gt; y &lt;a href=&quot;store#getState&quot;&gt; &lt;code&gt;getState&lt;/code&gt; &lt;/a&gt; funciones como argumentos con nombre, y devuelve una funci&amp;oacute;n. A esa funci&amp;oacute;n se le dar&amp;aacute; el m&amp;eacute;todo de despacho del &lt;code&gt;next&lt;/code&gt; middleware y se espera que devuelva una funci&amp;oacute;n de &lt;code&gt;action&lt;/code&gt; llamando a &lt;code&gt;next(action)&lt;/code&gt; con un argumento potencialmente diferente, o en un momento diferente, o tal vez sin llamarlo en absoluto. El &amp;uacute;ltimo middleware de la cadena recibir&amp;aacute; el m&amp;eacute;todo de &lt;a href=&quot;store#dispatch&quot;&gt; &lt;code&gt;dispatch&lt;/code&gt; &lt;/a&gt; la tienda real como el &lt;code&gt;next&lt;/code&gt; par&amp;aacute;metro, terminando as&amp;iacute; la cadena. Entonces, la firma del middleware es &lt;code&gt;({ getState, dispatch }) =&amp;gt; next =&amp;gt; action&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="4efc17fbcf2b797220d63db647c936e7d6b3c3da" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;...middleware&lt;/code&gt; (&lt;em&gt;arguments&lt;/em&gt;): Functions that conform to the Redux &lt;em&gt;middleware API&lt;/em&gt;. Each middleware receives &lt;a href=&quot;store&quot;&gt;&lt;code&gt;Store&lt;/code&gt;&lt;/a&gt;'s &lt;a href=&quot;store#dispatchaction&quot;&gt;&lt;code&gt;dispatch&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;store#getState&quot;&gt;&lt;code&gt;getState&lt;/code&gt;&lt;/a&gt; functions as named arguments, and returns a function. That function will be given the &lt;code&gt;next&lt;/code&gt; middleware's dispatch method, and is expected to return a function of &lt;code&gt;action&lt;/code&gt; calling &lt;code&gt;next(action)&lt;/code&gt; with a potentially different argument, or at a different time, or maybe not calling it at all. The last middleware in the chain will receive the real store's &lt;a href=&quot;store#dispatchaction&quot;&gt;&lt;code&gt;dispatch&lt;/code&gt;&lt;/a&gt; method as the &lt;code&gt;next&lt;/code&gt; parameter, thus ending the chain. So, the middleware signature is &lt;code&gt;({ getState, dispatch }) =&amp;gt; next =&amp;gt; action&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a14c94077eedb0b2bbe472c3d6a0d0b3e627f008" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;action&lt;/code&gt; (&lt;em&gt;Object&lt;/em&gt;&lt;sup&gt;&amp;dagger;&lt;/sup&gt;): A plain object describing the change that makes sense for your application. Actions are the only way to get data into the store, so any data, whether from the UI events, network callbacks, or other sources such as WebSockets needs to eventually be dispatched as actions. Actions must have a &lt;code&gt;type&lt;/code&gt; field that indicates the type of action being performed. Types can be defined as constants and imported from another module. It's better to use strings for &lt;code&gt;type&lt;/code&gt; than &lt;a href=&quot;https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Symbol&quot;&gt;Symbols&lt;/a&gt; because strings are serializable. Other than &lt;code&gt;type&lt;/code&gt;, the structure of an action object is really up to you. If you're interested, check out &lt;a href=&quot;https://github.com/acdlite/flux-standard-action&quot;&gt;Flux Standard Action&lt;/a&gt; for recommendations on how actions could be constructed.</source>
          <target state="translated">&lt;code&gt;action&lt;/code&gt; ( &lt;em&gt;Object &lt;/em&gt;&lt;sup&gt;&amp;dagger;&lt;/sup&gt; ): un objeto simple que describe el cambio que tiene sentido para su aplicaci&amp;oacute;n. Las acciones son la &amp;uacute;nica forma de obtener datos en la tienda, por lo que cualquier dato, ya sea de los eventos de la interfaz de usuario, devoluciones de llamada de red u otras fuentes, como WebSockets, debe enviarse eventualmente como acciones. Las acciones deben tener un campo de &lt;code&gt;type&lt;/code&gt; que indique el tipo de acci&amp;oacute;n que se est&amp;aacute; realizando. Los tipos se pueden definir como constantes e importar desde otro m&amp;oacute;dulo. Es mejor usar cadenas para el &lt;code&gt;type&lt;/code&gt; que &lt;a href=&quot;https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Symbol&quot;&gt;s&amp;iacute;mbolos&lt;/a&gt; porque las cadenas son serializables. Aparte del &lt;code&gt;type&lt;/code&gt; , la estructura de un objeto de acci&amp;oacute;n depende realmente de usted. Si est&amp;aacute; interesado, consulte &lt;a href=&quot;https://github.com/acdlite/flux-standard-action&quot;&gt;Flux Standard Action&lt;/a&gt; para obtener recomendaciones sobre c&amp;oacute;mo se podr&amp;iacute;an construir las acciones.</target>
        </trans-unit>
        <trans-unit id="1f9170163c0ef5281c7dbedc853c03ad10d33e30" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;actionCreators&lt;/code&gt; (&lt;em&gt;Function&lt;/em&gt; or &lt;em&gt;Object&lt;/em&gt;): An &lt;a href=&quot;../glossary#action-creator&quot;&gt;action creator&lt;/a&gt;, or an object whose values are action creators.</source>
          <target state="translated">&lt;code&gt;actionCreators&lt;/code&gt; ( &lt;em&gt;funci&amp;oacute;n&lt;/em&gt; u &lt;em&gt;objeto&lt;/em&gt; ): un &lt;a href=&quot;../glossary#action-creator&quot;&gt;creador de acciones&lt;/a&gt; o un objeto cuyos valores son creadores de acciones.</target>
        </trans-unit>
        <trans-unit id="2bd0f2c4de52e6fefce760d18b019994c41c0b3c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;actionCreators&lt;/code&gt; (&lt;em&gt;Function&lt;/em&gt; or &lt;em&gt;Object&lt;/em&gt;): An &lt;a href=&quot;https://redux.js.org/understanding/thinking-in-redux/glossary#action-creator&quot;&gt;action creator&lt;/a&gt;, or an object whose values are action creators.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3bd26650aa014fa2c77d3b47529964816520f847" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;combineReducers&lt;/code&gt; iterates through each of these key/value pairs. For each iteration, it:</source>
          <target state="translated">&lt;code&gt;combineReducers&lt;/code&gt; itera a trav&amp;eacute;s de cada uno de estos pares clave / valor. Para cada iteraci&amp;oacute;n:</target>
        </trans-unit>
        <trans-unit id="c4c91341660edf136591696dc683b24608c892dc" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;combineReducers&lt;/code&gt; makes working with this style of structure easier by taking a &lt;code&gt;reducers&lt;/code&gt; argument that&amp;rsquo;s defined as a hash table comprising a set of key/value pairs, where each key is the name of a state slice, and the corresponding value is the reducer function that will act on it.</source>
          <target state="translated">&lt;code&gt;combineReducers&lt;/code&gt; facilita el trabajo con este estilo de estructura al tomar un argumento de &lt;code&gt;reducers&lt;/code&gt; que se define como una tabla hash que comprende un conjunto de pares clave / valor, donde cada clave es el nombre de un segmento de estado, y el valor correspondiente es la funci&amp;oacute;n reductora que hacer algo al respecto.</target>
        </trans-unit>
        <trans-unit id="4cb7dfb9552a2aace784e7bb958b5e547adeb025" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;combineReducers&lt;/code&gt; takes an object full of slice reducer functions, and creates a function that outputs a corresponding state object with the same keys. This means that if no preloaded state is provided to &lt;code&gt;createStore&lt;/code&gt;, the naming of the keys in the input slice reducer object will define the naming of the keys in the output state object. The correlation between these names is not always apparent, especially when using ES6 features such as default module exports and object literal shorthands.</source>
          <target state="translated">&lt;code&gt;combineReducers&lt;/code&gt; toma un objeto lleno de funciones de reductor de rebanadas y crea una funci&amp;oacute;n que genera un objeto de estado correspondiente con las mismas teclas. Esto significa que si no se proporciona un estado precargado para &lt;code&gt;createStore&lt;/code&gt; , el nombre de las claves en el objeto reductor de segmento de entrada definir&amp;aacute; el nombre de las claves en el objeto de estado de salida. La correlaci&amp;oacute;n entre estos nombres no siempre es evidente, especialmente cuando se utilizan funciones de ES6 como exportaciones de m&amp;oacute;dulos predeterminados y abreviaturas literales de objetos.</target>
        </trans-unit>
        <trans-unit id="1afff2e083a32e71d2b99b63e31beee97a7bf5a2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;combineReducers&lt;/code&gt; will then return this new root state object to the store. The new object will have the same values as the current root state object, but because it's a different object, it will cause the store to be updated, which will ultimately cause all connected components to be re-rendered unnecessarily.</source>
          <target state="translated">&lt;code&gt;combineReducers&lt;/code&gt; luego devolver&amp;aacute; este nuevo objeto de estado ra&amp;iacute;z a la tienda. El nuevo objeto tendr&amp;aacute; los mismos valores que el objeto de estado ra&amp;iacute;z actual, pero debido a que es un objeto diferente, har&amp;aacute; que la tienda se actualice, lo que finalmente har&amp;aacute; que todos los componentes conectados se vuelvan a representar innecesariamente.</target>
        </trans-unit>
        <trans-unit id="3d31c37d476a705be9d16ab99876f6f29a2911bd" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;completed: boolean&lt;/code&gt; is whether todo should appear crossed out.</source>
          <target state="translated">&lt;code&gt;completed: boolean&lt;/code&gt; si todo debe aparecer tachado.</target>
        </trans-unit>
        <trans-unit id="f87ab9b4028e9a3e848f1e21390753d01e0de961" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;dispatch&lt;/code&gt; (&lt;em&gt;Function&lt;/em&gt;): A &lt;a href=&quot;store#dispatch&quot;&gt;&lt;code&gt;dispatch&lt;/code&gt;&lt;/a&gt; function available on the &lt;a href=&quot;store&quot;&gt;&lt;code&gt;Store&lt;/code&gt;&lt;/a&gt; instance.</source>
          <target state="translated">&lt;code&gt;dispatch&lt;/code&gt; ( &lt;em&gt;Funci&amp;oacute;n&lt;/em&gt; ): una funci&amp;oacute;n de &lt;a href=&quot;store#dispatch&quot;&gt; &lt;code&gt;dispatch&lt;/code&gt; &lt;/a&gt; disponible en la instancia de &lt;a href=&quot;store&quot;&gt; &lt;code&gt;Store&lt;/code&gt; &lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="f3eba2170df20e7e3c1d6aa89329f381bb51c59c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;dispatch&lt;/code&gt; (&lt;em&gt;Function&lt;/em&gt;): A &lt;a href=&quot;store#dispatchaction&quot;&gt;&lt;code&gt;dispatch&lt;/code&gt;&lt;/a&gt; function available on the &lt;a href=&quot;store&quot;&gt;&lt;code&gt;Store&lt;/code&gt;&lt;/a&gt; instance.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a6065950184dca89f8adacb36f987e88b944855d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;filter: string&lt;/code&gt; is the visibility filter it represents.</source>
          <target state="translated">&lt;code&gt;filter: string&lt;/code&gt; es el filtro de visibilidad que representa.</target>
        </trans-unit>
        <trans-unit id="9c642488e3cbd80e5e05acd841612af9ec636679" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;listener&lt;/code&gt; (&lt;em&gt;Function&lt;/em&gt;): The callback to be invoked any time an action has been dispatched, and the state tree might have changed. You may call &lt;a href=&quot;#getState&quot;&gt;&lt;code&gt;getState()&lt;/code&gt;&lt;/a&gt; inside this callback to read the current state tree. It is reasonable to expect that the store's reducer is a pure function, so you may compare references to some deep path in the state tree to learn whether its value has changed.</source>
          <target state="translated">&lt;code&gt;listener&lt;/code&gt; ( &lt;em&gt;funci&amp;oacute;n&lt;/em&gt; ): la devoluci&amp;oacute;n de llamada que se invocar&amp;aacute; cada vez que se haya enviado una acci&amp;oacute;n y el &amp;aacute;rbol de estado podr&amp;iacute;a haber cambiado. Puede llamar a &lt;a href=&quot;#getState&quot;&gt; &lt;code&gt;getState()&lt;/code&gt; &lt;/a&gt; dentro de esta devoluci&amp;oacute;n de llamada para leer el &amp;aacute;rbol de estado actual. Es razonable esperar que el reductor de la tienda sea una funci&amp;oacute;n pura, por lo que puede comparar referencias a alguna ruta profunda en el &amp;aacute;rbol de estado para saber si su valor ha cambiado.</target>
        </trans-unit>
        <trans-unit id="21e52fcaf9f8ff4a3e52292ead68340188c1622a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;nextReducer&lt;/code&gt; (&lt;em&gt;Function&lt;/em&gt;) The next reducer for the store to use.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="60274854b8fc4c1adc45a0ccb85c9a471e84a06a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;onClick()&lt;/code&gt; is a callback to invoke when a todo is clicked.</source>
          <target state="translated">&lt;code&gt;onClick()&lt;/code&gt; es una devoluci&amp;oacute;n de llamada para invocar cuando se hace clic en una tarea.</target>
        </trans-unit>
        <trans-unit id="3cabc66d0691eba5e97140d97c5af0c9e8160ca5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;onClick()&lt;/code&gt; is a callback to invoke when link is clicked.</source>
          <target state="translated">&lt;code&gt;onClick()&lt;/code&gt; es una devoluci&amp;oacute;n de llamada para invocar cuando se hace clic en el enlace.</target>
        </trans-unit>
        <trans-unit id="041c016fc6813b17f1192148484f830acd43af01" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;onTodoClick(id: number)&lt;/code&gt; is a callback to invoke when a todo is clicked.</source>
          <target state="translated">&lt;code&gt;onTodoClick(id: number)&lt;/code&gt; es una devoluci&amp;oacute;n de llamada para invocar cuando se hace clic en una tarea.</target>
        </trans-unit>
        <trans-unit id="fbcbab3611a4b8e613b2b4cd09f9c1e9fb3baffe" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;params&lt;/code&gt; property is an object with every param specified in the url. &lt;em&gt;e.g: &lt;code&gt;params&lt;/code&gt; will be equal to &lt;code&gt;{ filter: 'SHOW_COMPLETED' }&lt;/code&gt; if we are navigating to &lt;code&gt;localhost:3000/SHOW_COMPLETED&lt;/code&gt;. We can now read the URL from &lt;code&gt;&amp;lt;App /&amp;gt;&lt;/code&gt;.&lt;/em&gt;</source>
          <target state="translated">&lt;code&gt;params&lt;/code&gt; propiedad params es un objeto con cada par&amp;aacute;metro especificado en la URL. &lt;em&gt;por ejemplo: &lt;code&gt;params&lt;/code&gt; ser&amp;aacute; igual a &lt;code&gt;{ filter: 'SHOW_COMPLETED' }&lt;/code&gt; si estamos navegando a &lt;code&gt;localhost:3000/SHOW_COMPLETED&lt;/code&gt; . Ahora podemos leer la URL de &lt;code&gt;&amp;lt;App /&amp;gt;&lt;/code&gt; .&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="57c2d7b03d06140fe6460c00b3e6ecceb3671905" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;props&lt;/code&gt; can be passed to &lt;code&gt;getVisibleTodos&lt;/code&gt; from &lt;code&gt;mapStateToProps&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;props&lt;/code&gt; se pueden pasar a &lt;code&gt;getVisibleTodos&lt;/code&gt; desde &lt;code&gt;mapStateToProps&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="10c4b65f91bd45a4fc2fd57806ac6f36f1219c00" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;react-router&lt;/code&gt; is available on npm . This guides assumes you are using &lt;code&gt;react-router@^2.7.0&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;react-router&lt;/code&gt; est&amp;aacute; disponible en npm. Esta gu&amp;iacute;a asume que est&amp;aacute; usando &lt;code&gt;react-router@^2.7.0&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="a1634dcd7c4b99901d4395c7f2e41abeb6383d21" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;reducer&lt;/code&gt; (&lt;em&gt;Function&lt;/em&gt;) The next reducer for the store to use.</source>
          <target state="translated">&lt;code&gt;reducer&lt;/code&gt; ( &lt;em&gt;Funci&amp;oacute;n&lt;/em&gt; ) El siguiente reductor que utilizar&amp;aacute; la tienda.</target>
        </trans-unit>
        <trans-unit id="7c54c07a7b5f3ced1e0ad2afedb5ec66a8340b8c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;reducer&lt;/code&gt;&lt;em&gt;(Function)&lt;/em&gt;: A &lt;a href=&quot;../glossary#reducer&quot;&gt;reducing function&lt;/a&gt; that returns the next &lt;a href=&quot;../glossary#state&quot;&gt;state tree&lt;/a&gt;, given the current state tree and an &lt;a href=&quot;../glossary#action&quot;&gt;action&lt;/a&gt; to handle.</source>
          <target state="translated">&lt;code&gt;reducer&lt;/code&gt; &lt;em&gt;(Funci&amp;oacute;n)&lt;/em&gt; : Una &lt;a href=&quot;../glossary#reducer&quot;&gt;funci&amp;oacute;n de reducci&amp;oacute;n&lt;/a&gt; que devuelve el siguiente &lt;a href=&quot;../glossary#state&quot;&gt;&amp;aacute;rbol de estado&lt;/a&gt; , dado el &amp;aacute;rbol de estado actual y una &lt;a href=&quot;../glossary#action&quot;&gt;acci&amp;oacute;n&lt;/a&gt; a manejar.</target>
        </trans-unit>
        <trans-unit id="f2dcec56d4034af648dbbe6104e26b282c3152b5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;reducer&lt;/code&gt;&lt;em&gt;(Function)&lt;/em&gt;: A &lt;a href=&quot;https://redux.js.org/understanding/thinking-in-redux/glossary#reducer&quot;&gt;reducing function&lt;/a&gt; that returns the next &lt;a href=&quot;https://redux.js.org/understanding/thinking-in-redux/glossary#state&quot;&gt;state tree&lt;/a&gt;, given the current state tree and an &lt;a href=&quot;https://redux.js.org/understanding/thinking-in-redux/glossary#action&quot;&gt;action&lt;/a&gt; to handle.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d247728fbc49f91b9cff3325a75f4fc504af79e5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;reducers&lt;/code&gt; (&lt;em&gt;Object&lt;/em&gt;): An object whose values correspond to different reducing functions that need to be combined into one. See the notes below for some rules every passed reducer must follow.</source>
          <target state="translated">&lt;code&gt;reducers&lt;/code&gt; ( &lt;em&gt;Objeto&lt;/em&gt; ): Un objeto cuyos valores corresponden a diferentes funciones reductoras que deben combinarse en una. Consulte las notas a continuaci&amp;oacute;n para conocer algunas reglas que todo reductor aprobado debe seguir.</target>
        </trans-unit>
        <trans-unit id="071297430dead4ef02608be9950bc0295007dab6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;text: string&lt;/code&gt; is the text to show.</source>
          <target state="translated">&lt;code&gt;text: string&lt;/code&gt; es el texto a mostrar.</target>
        </trans-unit>
        <trans-unit id="6601fc4649e95805e9085e851baecfbd9ca422e8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;toJS()&lt;/code&gt; is an expensive function and negates the purpose of using Immutable.JS. Avoid its use.</source>
          <target state="translated">&lt;code&gt;toJS()&lt;/code&gt; es una funci&amp;oacute;n cara y niega el prop&amp;oacute;sito de usar Immutable.JS. Evite su uso.</target>
        </trans-unit>
        <trans-unit id="dd5ee50dffe4060b939c67419ae23402ff2acb67" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;todos: Array&lt;/code&gt; is an array of todo items with &lt;code&gt;{ id, text, completed }&lt;/code&gt; shape.</source>
          <target state="translated">&lt;code&gt;todos: Array&lt;/code&gt; es una matriz de elementos de tareas pendientes con forma &lt;code&gt;{ id, text, completed }&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="52137cb27c8b0fda0f705acc5c2ab7d8fc83ac69" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;(any)&lt;/em&gt;: The current state tree of your application.</source>
          <target state="translated">&lt;em&gt;(cualquiera)&lt;/em&gt; : el &amp;aacute;rbol de estado actual de su aplicaci&amp;oacute;n.</target>
        </trans-unit>
        <trans-unit id="546eefda4ace04ce1c70ef03ebe11baee59caa52" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;App state&lt;/em&gt;: data that is specific to the application's behavior (such as &quot;Todo #5 is currently selected&quot;, or &quot;there is a request in progress to fetch Todos&quot;)</source>
          <target state="translated">&lt;em&gt;Estado de la aplicaci&amp;oacute;n&lt;/em&gt; : datos que son espec&amp;iacute;ficos del comportamiento de la aplicaci&amp;oacute;n (como &quot;Todo # 5 est&amp;aacute; seleccionado actualmente&quot; o &quot;hay una solicitud en curso para recuperar Todos&quot;)</target>
        </trans-unit>
        <trans-unit id="c8b84d5c7e9792f8e68b0e853bd33475fc3cf76b" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Do not put API calls into reducers.&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;No coloque llamadas a API en reductores.&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="7b7c7ebbf9d9f5dafd8f0eb2d9dee6e376c7e325" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Domain data&lt;/em&gt;: data that the application needs to show, use, or modify (such as &quot;all of the Todos retrieved from the server&quot;)</source>
          <target state="translated">&lt;em&gt;Datos de dominio&lt;/em&gt; : datos que la aplicaci&amp;oacute;n necesita mostrar, usar o modificar (como &quot;todos los Todos recuperados del servidor&quot;)</target>
        </trans-unit>
        <trans-unit id="103bdb5aaf028813664904c0a9712c441ff4dc83" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;In addition, using &lt;code&gt;toJS&lt;/code&gt; in a Higher Order Component should not cause much, if any, performance degradation, as the component will only be called when the connected component&amp;rsquo;s props change. As with any performance issue, conduct performance checks first before deciding what to optimise.&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;Adem&amp;aacute;s, el uso de &lt;code&gt;toJS&lt;/code&gt; en un componente de orden superior no deber&amp;iacute;a causar mucha degradaci&amp;oacute;n del rendimiento, si es que hay alguna, ya que el componente solo se llamar&amp;aacute; cuando cambien los accesorios del componente conectado. Al igual que con cualquier problema de rendimiento, primero realice comprobaciones de rendimiento antes de decidir qu&amp;eacute; optimizar.&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="29f56da89fe63f5b0fdf50e9b3857e6d4e807205" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Note: Reducers whose initial state is populated using &lt;code&gt;preloadedState&lt;/code&gt; will &lt;strong&gt;still need to provide a default value&lt;/strong&gt; to handle when passed a &lt;code&gt;state&lt;/code&gt; of &lt;code&gt;undefined&lt;/code&gt;. All reducers are passed &lt;code&gt;undefined&lt;/code&gt; on initialization, so they should be written such that when given &lt;code&gt;undefined&lt;/code&gt;, some value should be returned. This can be any non-&lt;code&gt;undefined&lt;/code&gt; value; there's no need to duplicate the section of &lt;code&gt;preloadedState&lt;/code&gt; here as the default.&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;Nota: Reductores cuyo estado inicial se llena mediante &lt;code&gt;preloadedState&lt;/code&gt; ser&amp;aacute; &lt;strong&gt;todav&amp;iacute;a necesita para proporcionar un valor por defecto&lt;/strong&gt; de mango cuando se pasa de un &lt;code&gt;state&lt;/code&gt; de &lt;code&gt;undefined&lt;/code&gt; . Todos los reductores se pasan &lt;code&gt;undefined&lt;/code&gt; en la inicializaci&amp;oacute;n, por lo que deben escribirse de tal manera que, cuando se proporcionen &lt;code&gt;undefined&lt;/code&gt; , se devuelva alg&amp;uacute;n valor. Puede ser cualquier valor no &lt;code&gt;undefined&lt;/code&gt; ; no es necesario duplicar la secci&amp;oacute;n de &lt;code&gt;preloadedState&lt;/code&gt; aqu&amp;iacute; como predeterminado.&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="29ccd8f599d654d3c1988dcb7203039733cc9621" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Note: if your app requires high performance, you may need to avoid &lt;code&gt;toJS()&lt;/code&gt; altogether, and so will have to use Immutable.JS in your dumb components. However, for most apps this will not be the case, and the benefits of keeping Immutable.JS out of your dumb components (maintainability, portability and easier testing) will far outweigh any perceived performance improvements of keeping it in.&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;Nota: si su aplicaci&amp;oacute;n requiere un alto rendimiento, es posible que deba evitar &lt;code&gt;toJS()&lt;/code&gt; completo y, por lo tanto, tendr&amp;aacute; que usar Immutable.JS en sus componentes tontos. Sin embargo, para la mayor&amp;iacute;a de las aplicaciones este no ser&amp;aacute; el caso, y los beneficios de mantener Immutable.JS fuera de sus componentes tontos (mantenibilidad, portabilidad y pruebas m&amp;aacute;s f&amp;aacute;ciles) superar&amp;aacute;n con creces cualquier mejora de rendimiento percibida de mantenerlo.&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="5abce7fc4fc891211f9c2137610c7e67cd852170" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;React Router Redux&lt;/em&gt; creates a binding between your redux app and react-router and it keeps them in sync. Without this binding, you will not be able to rewind the actions with Time Travel. Unless you need this, React Router and Redux can operate completely apart.</source>
          <target state="translated">&lt;em&gt;React Router Redux&lt;/em&gt; crea un enlace entre su aplicaci&amp;oacute;n redux y react-router y los mantiene sincronizados. Sin este enlace, no podr&amp;aacute; rebobinar las acciones con Time Travel. A menos que lo necesite, React Router y Redux pueden funcionar completamente separados.</target>
        </trans-unit>
        <trans-unit id="db05ad144fe5ebf42ad286bef8f68f32d9f005f6" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Redux Router&lt;/em&gt; is an experimental library, it lets you keep entirely the state of your URL inside your redux store. It has the same API with React Router API but has a smaller community support than react-router.</source>
          <target state="translated">&lt;em&gt;Redux Router&lt;/em&gt; es una biblioteca experimental, le permite mantener completamente el estado de su URL dentro de su tienda redux. Tiene la misma API con React Router API pero tiene un soporte de comunidad m&amp;aacute;s peque&amp;ntilde;o que react-router.</target>
        </trans-unit>
        <trans-unit id="f76be52041957c10fa3ece1ff9a6500b8a7f3130" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;State&lt;/em&gt; (also called the &lt;em&gt;state tree&lt;/em&gt;) is a broad term, but in the Redux API it usually refers to the single state value that is managed by the store and returned by &lt;a href=&quot;api/store#getState&quot;&gt;&lt;code&gt;getState()&lt;/code&gt;&lt;/a&gt;. It represents the entire state of a Redux application, which is often a deeply nested object.</source>
          <target state="translated">&lt;em&gt;Estado&lt;/em&gt; (tambi&amp;eacute;n llamado &lt;em&gt;&amp;aacute;rbol de estado&lt;/em&gt; ) es un t&amp;eacute;rmino amplio, pero en la API de Redux generalmente se refiere al valor de estado &amp;uacute;nico que es administrado por la tienda y devuelto por &lt;a href=&quot;api/store#getState&quot;&gt; &lt;code&gt;getState()&lt;/code&gt; &lt;/a&gt; . Representa el estado completo de una aplicaci&amp;oacute;n Redux, que a menudo es un objeto profundamente anidado.</target>
        </trans-unit>
        <trans-unit id="85e8d43be73f1edbce45221c84c8c093b0749d2c" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;UI state&lt;/em&gt;: data that represents how the UI is currently displayed (such as &quot;The EditTodo modal dialog is currently open&quot;)</source>
          <target state="translated">&lt;em&gt;Estado de la interfaz de usuario&lt;/em&gt; : datos que representan c&amp;oacute;mo se muestra actualmente la interfaz de usuario (como &quot;El cuadro de di&amp;aacute;logo modal EditTodo est&amp;aacute; abierto actualmente&quot;)</target>
        </trans-unit>
        <trans-unit id="3bf81a4c713219d00d15e705d738b32facd1c3ce" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt; Discussions&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt; Discussions&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="9845432ee2811761e6bcff4526db436968becae2" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;a href=&quot;https://egghead.io/courses/building-react-applications-with-idiomatic-redux&quot;&gt;Part 2: Building React Applications with Idiomatic Redux&lt;/a&gt; (27 free videos)&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;a href=&quot;https://egghead.io/courses/building-react-applications-with-idiomatic-redux&quot;&gt;Parte 2: Creaci&amp;oacute;n de aplicaciones React con Idiomatic Redux&lt;/a&gt; (27 videos gratuitos)&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="dfdd52a88d7f6ae78b01e354f352bfb2f0dff656" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;a href=&quot;https://egghead.io/series/getting-started-with-redux&quot;&gt;Getting Started with Redux&lt;/a&gt;&lt;/strong&gt; &amp;mdash; Learn the basics of Redux directly from its creator (30 free videos)</source>
          <target state="translated">&lt;strong&gt;&lt;a href=&quot;https://egghead.io/series/getting-started-with-redux&quot;&gt;Introducci&amp;oacute;n a Redux&lt;/a&gt;&lt;/strong&gt; : aprenda los conceptos b&amp;aacute;sicos de Redux directamente de su creador (30 videos gratuitos)</target>
        </trans-unit>
        <trans-unit id="1235adb50ceb12211d0e304f950e2cb2539aca3c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;a href=&quot;https://egghead.io/series/getting-started-with-redux&quot;&gt;Part 1: Getting Started with Redux&lt;/a&gt; (30 free videos)&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;a href=&quot;https://egghead.io/series/getting-started-with-redux&quot;&gt;Parte 1: Empezando con Redux&lt;/a&gt; (30 videos gratuitos)&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="65008044925d251beee2e760bdbf7d352cad495e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;a href=&quot;https://learnredux.com&quot;&gt;Learn Redux&lt;/a&gt;&lt;/strong&gt; &amp;mdash; Build a simple photo app that will simplify the core ideas behind Redux, React Router and React.js</source>
          <target state="translated">&lt;strong&gt;&lt;a href=&quot;https://learnredux.com&quot;&gt;Aprenda Redux&lt;/a&gt;&lt;/strong&gt; : cree una aplicaci&amp;oacute;n de fotos simple que simplificar&amp;aacute; las ideas centrales detr&amp;aacute;s de Redux, React Router y React.js</target>
        </trans-unit>
        <trans-unit id="7f4ac2e2def8c3f5a536a05b0329a56f22f7adbd" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;a href=&quot;https://medium.com/@dan_abramov/you-might-not-need-redux-be46360cf367&quot;&gt;You Might Not Need Redux&lt;/a&gt;&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;a href=&quot;https://medium.com/@dan_abramov/you-might-not-need-redux-be46360cf367&quot;&gt;Puede que no necesite Redux&lt;/a&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="46d385341a00466471baf6bf0402c35cb513b738" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;code&gt;AddTodo&lt;/code&gt;&lt;/strong&gt; is an input field with an &amp;ldquo;Add&amp;rdquo; button</source>
          <target state="translated">&lt;strong&gt; &lt;code&gt;AddTodo&lt;/code&gt; &lt;/strong&gt; es un campo de entrada con un bot&amp;oacute;n &quot;Agregar&quot;</target>
        </trans-unit>
        <trans-unit id="628abe199572c722710292d70c1925abc91676dd" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;code&gt;App&lt;/code&gt;&lt;/strong&gt; is the root component that renders everything else.</source>
          <target state="translated">&lt;strong&gt; &lt;code&gt;App&lt;/code&gt; &lt;/strong&gt; es el componente ra&amp;iacute;z que procesa todo lo dem&amp;aacute;s.</target>
        </trans-unit>
        <trans-unit id="0d7b3701bac16523885d284f75957faf7ea4389c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;code&gt;FilterLink&lt;/code&gt;&lt;/strong&gt; gets the current visibility filter and renders a &lt;code&gt;Link&lt;/code&gt;.</source>
          <target state="translated">&lt;strong&gt; &lt;code&gt;FilterLink&lt;/code&gt; &lt;/strong&gt; obtiene el filtro de visibilidad actual y genera un &lt;code&gt;Link&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="a71acf6c031a4f24eed213eed02c5416da7ab1dc" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;code&gt;Footer&lt;/code&gt;&lt;/strong&gt; is where we let the user change currently visible todos.</source>
          <target state="translated">&lt;strong&gt; &lt;code&gt;Footer&lt;/code&gt; &lt;/strong&gt; es donde dejamos que el usuario cambie todos los visibles actualmente.</target>
        </trans-unit>
        <trans-unit id="5e4d8ed2a6c4ce299050d24a32e6f7c64862715e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;code&gt;Link&lt;/code&gt;&lt;/strong&gt; is a link with a callback.</source>
          <target state="translated">&lt;strong&gt; &lt;code&gt;Link&lt;/code&gt; &lt;/strong&gt; es un enlace con devoluci&amp;oacute;n de llamada.</target>
        </trans-unit>
        <trans-unit id="c81649898f991e4665328250d8eea26cc2edbc98" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;code&gt;Todo&lt;/code&gt;&lt;/strong&gt; is a single todo item.</source>
          <target state="translated">&lt;strong&gt; &lt;code&gt;Todo&lt;/code&gt; &lt;/strong&gt; es un elemento de tarea &amp;uacute;nica.</target>
        </trans-unit>
        <trans-unit id="e2f96f74e7301539bacf1f9c6bd718980a2d9daf" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;code&gt;TodoList&lt;/code&gt;&lt;/strong&gt; is a list showing visible todos.</source>
          <target state="translated">&lt;strong&gt; &lt;code&gt;TodoList&lt;/code&gt; &lt;/strong&gt; es una lista que muestra todos visibles.</target>
        </trans-unit>
        <trans-unit id="72ec9d638aa6d81f7ef6d2682f120d0fd13ab2a3" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;code&gt;VisibleTodoList&lt;/code&gt;&lt;/strong&gt; filters the todos according to the current visibility filter and renders a &lt;code&gt;TodoList&lt;/code&gt;.</source>
          <target state="translated">&lt;strong&gt; &lt;code&gt;VisibleTodoList&lt;/code&gt; &lt;/strong&gt; filtra los todos de acuerdo con el filtro de visibilidad actual y &lt;code&gt;TodoList&lt;/code&gt; un TodoList .</target>
        </trans-unit>
        <trans-unit id="b7d0712239a704041ee112eaeba6a14ab513b61e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;em&gt;Using local component state is fine&lt;/em&gt;&lt;/strong&gt;. As a developer, it is &lt;em&gt;your&lt;/em&gt; job to determine what kinds of state make up your application, and where each piece of state should live. Find a balance that works for you, and go with it.</source>
          <target state="translated">&lt;strong&gt;&lt;em&gt;Usar el estado del componente local est&amp;aacute; bien&lt;/em&gt;&lt;/strong&gt; . Como desarrollador, es&lt;em&gt; su&lt;/em&gt; trabajo determinar qu&amp;eacute; tipo de estado componen su solicitud y d&amp;oacute;nde debe vivir cada parte del estado. Encuentre un equilibrio que funcione para usted y h&amp;aacute;galo.</target>
        </trans-unit>
        <trans-unit id="5889d668f635907ed9dfa122cde5a199a20be785" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;em&gt;case function&lt;/em&gt;&lt;/strong&gt;: a function that is being used to handle the update logic for a specific action. This may actually be a reducer function, or it may require other parameters to do its work properly.</source>
          <target state="translated">&lt;strong&gt;&lt;em&gt;funci&amp;oacute;n de caso&lt;/em&gt;&lt;/strong&gt; : una funci&amp;oacute;n que se utiliza para manejar la l&amp;oacute;gica de actualizaci&amp;oacute;n para una acci&amp;oacute;n espec&amp;iacute;fica. En realidad, esto puede ser una funci&amp;oacute;n reductora o puede requerir otros par&amp;aacute;metros para hacer su trabajo correctamente.</target>
        </trans-unit>
        <trans-unit id="e6e0dfdc33c924359812aab966fcb011eaef8e7e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;em&gt;higher-order reducer&lt;/em&gt;&lt;/strong&gt;: a function that takes a reducer function as an argument, and/or returns a new reducer function as a result (such as &lt;code&gt;combineReducers&lt;/code&gt;, or &lt;code&gt;redux-undo&lt;/code&gt;)</source>
          <target state="translated">&lt;strong&gt;&lt;em&gt;reductor de orden superior&lt;/em&gt;&lt;/strong&gt; : una funci&amp;oacute;n que toma una funci&amp;oacute;n reductora como argumento y / o devuelve una nueva funci&amp;oacute;n reductora como resultado (como &lt;code&gt;combineReducers&lt;/code&gt; o &lt;code&gt;redux-undo&lt;/code&gt; )</target>
        </trans-unit>
        <trans-unit id="401ed42d073adeb6ecd950168ad981e271a2b5a3" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;em&gt;reducer&lt;/em&gt;&lt;/strong&gt;: any function with the signature &lt;code&gt;(state, action) -&amp;gt; newState&lt;/code&gt; (ie, any function that &lt;em&gt;could&lt;/em&gt; be used as an argument to &lt;code&gt;Array.prototype.reduce&lt;/code&gt;)</source>
          <target state="translated">&lt;strong&gt;&lt;em&gt;reductor&lt;/em&gt;&lt;/strong&gt; : cualquier funci&amp;oacute;n con la firma &lt;code&gt;(state, action) -&amp;gt; newState&lt;/code&gt; (es decir, cualquier funci&amp;oacute;n que&lt;em&gt; pueda&lt;/em&gt; usarse como argumento para &lt;code&gt;Array.prototype.reduce&lt;/code&gt; )</target>
        </trans-unit>
        <trans-unit id="f9b0e566a3672de250a1434def164d63af6cba98" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;em&gt;root reducer&lt;/em&gt;&lt;/strong&gt;: the reducer function that is actually passed as the first argument to &lt;code&gt;createStore&lt;/code&gt;. This is the only part of the reducer logic that &lt;em&gt;must&lt;/em&gt; have the &lt;code&gt;(state, action) -&amp;gt; newState&lt;/code&gt; signature.</source>
          <target state="translated">&lt;strong&gt;&lt;em&gt;reductor ra&amp;iacute;z&lt;/em&gt;&lt;/strong&gt; : la funci&amp;oacute;n reductora que en realidad se pasa como primer argumento para &lt;code&gt;createStore&lt;/code&gt; . Esta es la &amp;uacute;nica parte de la l&amp;oacute;gica del reductor que&lt;em&gt; debe&lt;/em&gt; tener lafirma &lt;code&gt;(state, action) -&amp;gt; newState&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="0a64e360c4d5878942159990e891828399749146" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;em&gt;slice reducer&lt;/em&gt;&lt;/strong&gt;: a reducer that is being used to handle updates to one specific slice of the state tree, usually done by passing it to &lt;code&gt;combineReducers&lt;/code&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;em&gt;reductor de rebanadas&lt;/em&gt;&lt;/strong&gt; : un reductor que se utiliza para manejar las actualizaciones de una rebanada espec&amp;iacute;fica del &amp;aacute;rbol de estado, generalmente se hace pas&amp;aacute;ndolo a &lt;code&gt;combineReducers&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="2551e86cf6417db6bf5798c49bdf5292397b5d4a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Action creators&lt;/strong&gt; are exactly that&amp;mdash;functions that create actions. It's easy to conflate the terms &amp;ldquo;action&amp;rdquo; and &amp;ldquo;action creator,&amp;rdquo; so do your best to use the proper term.</source>
          <target state="translated">&lt;strong&gt;Los creadores de acciones&lt;/strong&gt; son exactamente eso: funciones que crean acciones. Es f&amp;aacute;cil combinar los t&amp;eacute;rminos &quot;acci&amp;oacute;n&quot; y &quot;creador de acciones&quot;, as&amp;iacute; que haga todo lo posible por utilizar el t&amp;eacute;rmino adecuado.</target>
        </trans-unit>
        <trans-unit id="1da8e22fc9c738da2f9e48212ed18a6dba30b50c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Actions&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Actions&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="19d9668859b20c765c85260461deb4090e7c90c7" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Actions&lt;/strong&gt; are payloads of information that send data from your application to your store. They are the &lt;em&gt;only&lt;/em&gt; source of information for the store. You send them to the store using &lt;a href=&quot;../api/store#dispatch&quot;&gt;&lt;code&gt;store.dispatch()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;strong&gt;Las acciones&lt;/strong&gt; son cargas &amp;uacute;tiles de informaci&amp;oacute;n que env&amp;iacute;an datos desde su aplicaci&amp;oacute;n a su tienda. Son la &lt;em&gt;&amp;uacute;nica&lt;/em&gt; fuente de informaci&amp;oacute;n de la tienda. Los env&amp;iacute;a a la tienda usando &lt;a href=&quot;../api/store#dispatch&quot;&gt; &lt;code&gt;store.dispatch()&lt;/code&gt; &lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="ec2a8e7b602c9f54e206267bc8541a8f186454fc" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Also read:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Lea tambi&amp;eacute;n:&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="39113b04f672edb3817c5d406408774e2e082af0" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;An action informing the reducers that the request began.&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Una acci&amp;oacute;n que informa a los reductores que comenz&amp;oacute; la solicitud.&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="994001ceb8ce97cddf25a8c05987ea9c83e99a47" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;An action informing the reducers that the request failed.&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Una acci&amp;oacute;n que informa a los reductores que la solicitud fall&amp;oacute;.&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="7648023b0f97bbd162694c4bb9ebb7f2898c3bca" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;An action informing the reducers that the request finished successfully.&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Una acci&amp;oacute;n que informa a los reductores que la solicitud finaliz&amp;oacute; correctamente.&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="990d6bce9d1a24f59b9efaf18dc81a2290c580f5" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Articles&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Articles&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="5e169e5d7d50b4c65d5eb45d17d2193a3d3fe48c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;But there is a problem!&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&amp;iexcl;Pero hay un problema!&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="69b54c7910d861b8a3eca842a30a66fd0932de39" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Chrome Extension&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Extensi&amp;oacute;n de Chrome&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="80cf8bc624de85df678b42470029fc4d69f07a66" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Code Structure&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Estructura de c&amp;oacute;digo&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="3318cdef256aecde044aa8d93fc255bf75f49a52" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Discussion&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Discussion&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="41fc516c487bc5c3b496e3bd45dc251647980f5e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Discussions&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Discussions&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="f9a56caeef5914fb0e23b98d65cf00abd25d9b22" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Documentation&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Documentation&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="bce3f4a409dc0c67054a7e806ad3eecf69f742f8" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Example&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Example&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="5c3d140c8e464f134cec3b0eebd38bf683f55d62" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Examples&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Examples&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="c28df48234b0e1020c84b073dd49644f35f59ab0" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Finally, you can write your own middleware.&lt;/strong&gt; Let's say you want to generalize the pattern above and describe your async action creators like this instead:</source>
          <target state="translated">&lt;strong&gt;Finalmente, puede escribir su propio middleware. &lt;/strong&gt;Supongamos que desea generalizar el patr&amp;oacute;n anterior y describir sus creadores de acciones as&amp;iacute;ncronas de esta manera:</target>
        </trans-unit>
        <trans-unit id="e850b9ecbb25492de24c73963c25bba203a9b8f2" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;General&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;General&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="a426959f751e24e2f5918ae148f99e35ec8ec248" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Gists&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Gists&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="2b835ddfaad1c3b1909f0f1f8838c00992cdebd9" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;If the &lt;code&gt;mapStateToProps&lt;/code&gt; argument supplied to &lt;code&gt;connect&lt;/code&gt; returns a function instead of an object, it will be used to create an individual &lt;code&gt;mapStateToProps&lt;/code&gt; function for each instance of the container.&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Si el argumento &lt;code&gt;mapStateToProps&lt;/code&gt; proporcionado para &lt;code&gt;connect&lt;/code&gt; devuelve una funci&amp;oacute;n en lugar de un objeto, se utilizar&amp;aacute; para crear una funci&amp;oacute;n &lt;code&gt;mapStateToProps&lt;/code&gt; individual para cada instancia del contenedor.&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="3529f38f1732dd9f8dde4fa1c2954e730482cd3f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Immutable Data&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Datos inmutables&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="f813b4dc0b9eb9217d5b61ec52b5ac9f1ef177d8" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;In general, &lt;code&gt;preloadedState&lt;/code&gt; wins over the state specified by the reducer. This lets reducers specify initial data that makes sense &lt;em&gt;to them&lt;/em&gt; as default arguments, but also allows loading existing data (fully or partially) when you're hydrating the store from some persistent storage or the server.&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;En general, &lt;code&gt;preloadedState&lt;/code&gt; gana sobre el estado especificado por el reductor. Esto permite que los reductores especifiquen datos iniciales que &lt;em&gt;tengan&lt;/em&gt; sentido &lt;em&gt;para ellos&lt;/em&gt; como argumentos predeterminados, pero tambi&amp;eacute;n permite cargar datos existentes (total o parcialmente) cuando est&amp;aacute; hidratando la tienda desde alg&amp;uacute;n almacenamiento persistente o el servidor.&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="630d2928116ed006d43b0e103005e502467a2bd8" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Key Concepts&lt;/strong&gt;:</source>
          <target state="translated">&lt;strong&gt;Conceptos clave&lt;/strong&gt; :</target>
        </trans-unit>
        <trans-unit id="177d318924b7fa70e3cefd19afe9a19a2e28bd31" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Key concepts&lt;/strong&gt;:</source>
          <target state="translated">&lt;strong&gt;Conceptos clave&lt;/strong&gt; :</target>
        </trans-unit>
        <trans-unit id="af40680dea48a4f1aadecc6d0a580f293be76302" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Learn Redux from its creator:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Aprenda Redux de su creador:&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="24d8f44e0ff187836ea30a46af3fa4eae82a5814" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Libraries&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Libraries&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="40f69f52a2524079b625a242912cdd7403598e0d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Middleware lets us write more expressive, potentially async action creators.&lt;/strong&gt; It lets us dispatch something other than plain objects, and interprets the values. For example, middleware can &amp;ldquo;catch&amp;rdquo; dispatched Promises and turn them into a pair of request and success/failure actions.</source>
          <target state="translated">&lt;strong&gt;Middleware nos permite escribir creadores de acciones potencialmente asincr&amp;oacute;nicos m&amp;aacute;s expresivos. &lt;/strong&gt;Nos permite enviar algo m&amp;aacute;s que objetos simples e interpreta los valores. Por ejemplo, el middleware puede &quot;capturar&quot; Promesas enviadas y convertirlas en un par de solicitudes y acciones de &amp;eacute;xito / fracaso.</target>
        </trans-unit>
        <trans-unit id="8714d9061814fc6644471ebf65e80673c74fbf2f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Miscellaneous&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Miscellaneous&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="9aba37422ce93d442e229cdf88aefd1289e7a0ab" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note that each of these reducers is managing its own part of the global state. The &lt;code&gt;state&lt;/code&gt; parameter is different for every reducer, and corresponds to the part of the state it manages.&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Tenga en cuenta que cada uno de estos reductores gestiona su propia parte del estado global. El par&amp;aacute;metro de &lt;code&gt;state&lt;/code&gt; es diferente para cada reductor y corresponde a la parte del estado que administra.&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="428baf6d60cd9f08dad452710b2d0853a0611819" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: this example is deliberately written in a verbose style in order to illustrate the concepts and the process of refactoring, rather than perfectly concise code.</source>
          <target state="translated">&lt;strong&gt;Nota&lt;/strong&gt; : este ejemplo est&amp;aacute; escrito deliberadamente en un estilo detallado para ilustrar los conceptos y el proceso de refactorizaci&amp;oacute;n, en lugar de un c&amp;oacute;digo perfectamente conciso.</target>
        </trans-unit>
        <trans-unit id="5cbd86caa1de0f5ed851d50bc59d467e542c9b43" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Organizing State&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Estado organizador&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="48bf5499e3ac63560ca0e0106a29021adb072bfb" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Performance&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Performance&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="5467c8d8afabc0b3e1dae4c2485529c53412f57a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;React Redux&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Reaccionar Redux&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="6a646a6010d9b1f0d5fd5b00988f7164e7d8f806" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Reading List&lt;/strong&gt;:</source>
          <target state="translated">&lt;strong&gt;Lista de lectura&lt;/strong&gt; :</target>
        </trans-unit>
        <trans-unit id="f87ea91cacfbae403f6d54b8d0956ef3fc4100f5" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Reading list&lt;/strong&gt;:</source>
          <target state="translated">&lt;strong&gt;Lista de lectura&lt;/strong&gt; :</target>
        </trans-unit>
        <trans-unit id="026e47e10ea129bc5e718a865b1c71228f70d1f0" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Reducers&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Reducers&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="463c2d07ea9bf2ad77b66d873753301b6924a007" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Redux doesn't care &lt;em&gt;how&lt;/em&gt; you store the state&amp;mdash;it can be a plain object, an Immutable object, or anything else.&lt;/strong&gt; You'll probably want a (de)serialization mechanism for writing universal apps and hydrating their state from the server, but other than that, you can use any data storage library &lt;em&gt;as long as it supports immutability&lt;/em&gt;. For example, it doesn't make sense to use Backbone for Redux state, because Backbone models are mutable.</source>
          <target state="translated">&lt;strong&gt;A Redux no le importa &lt;em&gt;c&amp;oacute;mo&lt;/em&gt; se almacena el estado; puede ser un objeto simple, un objeto inmutable o cualquier otra cosa. &lt;/strong&gt;Probablemente desee un mecanismo de (des) serializaci&amp;oacute;n para escribir aplicaciones universales e hidratar su estado desde el servidor, pero aparte de eso, puede usar cualquier biblioteca de almacenamiento de datos &lt;em&gt;siempre que sea compatible con la inmutabilidad&lt;/em&gt; . Por ejemplo, no tiene sentido usar Backbone para el estado Redux, porque los modelos Backbone son mutables.</target>
        </trans-unit>
        <trans-unit id="f99c682875e5330991bcf2249db3e897d5de6b10" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Store Setup&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Configuraci&amp;oacute;n de la tienda&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="6adf27317bc0760c4fef5a11f3e4243d9c2dea6d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;The &lt;a href=&quot;../glossary#state&quot;&gt;state&lt;/a&gt; of your whole application is stored in an object tree within a single &lt;a href=&quot;../glossary#store&quot;&gt;store&lt;/a&gt;.&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;El &lt;a href=&quot;../glossary#state&quot;&gt;estado&lt;/a&gt; de toda su aplicaci&amp;oacute;n se almacena en un &amp;aacute;rbol de objetos dentro de una sola &lt;a href=&quot;../glossary#store&quot;&gt;tienda&lt;/a&gt; .&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="4155b94bfe17bf25fe0157204c773ff981821e3e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;The Redux store calls the reducer function you gave it.&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;La tienda Redux llama a la funci&amp;oacute;n reductora que le dio.&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="3830df7c81157ba8c707d873fd73f6f0cdb0f81e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;The Redux store saves the complete state tree returned by the root reducer.&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;La tienda Redux guarda el &amp;aacute;rbol de estado completo devuelto por el reductor ra&amp;iacute;z.&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="f7aa48ecb73dff1c83c59ee1b15f802da34287b9" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;The only way to change the state is to emit an &lt;a href=&quot;../glossary#action&quot;&gt;action&lt;/a&gt;, an object describing what happened.&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;La &amp;uacute;nica forma de cambiar el estado es emitir una &lt;a href=&quot;../glossary#action&quot;&gt;acci&amp;oacute;n&lt;/a&gt; , un objeto que describe lo que sucedi&amp;oacute;.&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="b9c9a991ab2ae928e8e00868d0eba489d79e40a9" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;The root reducer may combine the output of multiple reducers into a single state tree.&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;El reductor de ra&amp;iacute;z puede combinar la salida de varios reductores en un solo &amp;aacute;rbol de estado.&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="6e49059d9b4193d453aca3973e78f45f15c2c3d0" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;This is exactly what Redux middleware looks like.&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;As&amp;iacute; es exactamente como se ve el middleware de Redux.&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="76be9cf756727c3afc31669a1734af0a6b6997c2" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;To specify how the state tree is transformed by actions, you write pure &lt;a href=&quot;../glossary#reducer&quot;&gt;reducers&lt;/a&gt;.&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Para especificar c&amp;oacute;mo el &amp;aacute;rbol de estado se transforma mediante acciones, escribe &lt;a href=&quot;../glossary#reducer&quot;&gt;reductores&lt;/a&gt; puros .&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="5ef565370cf3245efa7f66d5b780fcb67eebf3a1" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Using Immutable.JS with Redux&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Usando Immutable.JS con Redux&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="581be5c9a50c413f04d51268170098e3b7d44abb" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Video&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Video&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="e7086101439d0140de8af057ae87cdfb81255c2d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;We don't mutate the &lt;code&gt;state&lt;/code&gt;.&lt;/strong&gt; We create a copy with &lt;a href=&quot;https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Object/assign&quot;&gt;&lt;code&gt;Object.assign()&lt;/code&gt;&lt;/a&gt;. &lt;code&gt;Object.assign(state, { visibilityFilter: action.filter })&lt;/code&gt; is also wrong: it will mutate the first argument. You &lt;strong&gt;must&lt;/strong&gt; supply an empty object as the first parameter. You can also enable the &lt;a href=&quot;../recipes/usingobjectspreadoperator&quot;&gt;object spread operator proposal&lt;/a&gt; to write &lt;code&gt;{ ...state, ...newState }&lt;/code&gt; instead.</source>
          <target state="translated">&lt;strong&gt;No mutamos el &lt;code&gt;state&lt;/code&gt; . &lt;/strong&gt;Creamos una copia con &lt;a href=&quot;https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Object/assign&quot;&gt; &lt;code&gt;Object.assign()&lt;/code&gt; &lt;/a&gt; . &lt;code&gt;Object.assign(state, { visibilityFilter: action.filter })&lt;/code&gt; tambi&amp;eacute;n es incorrecto: mutar&amp;aacute; el primer argumento. Usted &lt;strong&gt;debe&lt;/strong&gt; suministrar un objeto vac&amp;iacute;o como el primer par&amp;aacute;metro. Tambi&amp;eacute;n puede habilitar la &lt;a href=&quot;../recipes/usingobjectspreadoperator&quot;&gt;propuesta del operador de extensi&amp;oacute;n de objetos&lt;/a&gt; para que escriba &lt;code&gt;{ ...state, ...newState }&lt;/code&gt; lugar.</target>
        </trans-unit>
        <trans-unit id="3ee5f2fe633882a55b56c42023653a1999e34048" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;We return the previous &lt;code&gt;state&lt;/code&gt; in the &lt;code&gt;default&lt;/code&gt; case.&lt;/strong&gt; It's important to return the previous &lt;code&gt;state&lt;/code&gt; for any unknown action.</source>
          <target state="translated">&lt;strong&gt;Devolvemos el &lt;code&gt;state&lt;/code&gt; anterior en el caso &lt;code&gt;default&lt;/code&gt; . &lt;/strong&gt;Es importante devolver el &lt;code&gt;state&lt;/code&gt; anterior para cualquier acci&amp;oacute;n desconocida.</target>
        </trans-unit>
        <trans-unit id="e435f9e093dd6f82c9230b9232861cf3d23f3321" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;You call&lt;/strong&gt;&lt;a href=&quot;../api/store#dispatch&quot;&gt;&lt;code&gt;store.dispatch(action)&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;strong&gt;Se llama a &lt;/strong&gt;&lt;a href=&quot;../api/store#dispatch&quot;&gt; &lt;code&gt;store.dispatch(action)&lt;/code&gt; &lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="3f4e7a77e49b844e6d09e31eed53faed808efc94" translate="yes" xml:space="preserve">
          <source>&lt;sup&gt;&amp;dagger;&lt;/sup&gt; The &amp;ldquo;vanilla&amp;rdquo; store implementation you get by calling &lt;a href=&quot;createstore&quot;&gt;&lt;code&gt;createStore&lt;/code&gt;&lt;/a&gt; only supports plain object actions and hands them immediately to the reducer.</source>
          <target state="translated">&lt;sup&gt;&amp;dagger;&lt;/sup&gt; La implementaci&amp;oacute;n de la tienda &amp;ldquo; &lt;a href=&quot;createstore&quot;&gt; &lt;code&gt;createStore&lt;/code&gt; &lt;/a&gt; &amp;rdquo; que obtiene al llamar a createStore solo admite acciones de objetos simples y las entrega inmediatamente al reductor.</target>
        </trans-unit>
        <trans-unit id="e0958afbb4b54949a3b2993059815e1139c9e564" translate="yes" xml:space="preserve">
          <source>&lt;sup&gt;&amp;dagger;&lt;/sup&gt; The &amp;ldquo;vanilla&amp;rdquo; store implementation you get by calling [`createStore`](/api/createstore) only supports plain object actions and hands them immediately to the reducer.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="70c279ff6853909cda37bddfb350ceef56e21365" translate="yes" xml:space="preserve">
          <source>A &lt;em&gt;dispatching function&lt;/em&gt; (or simply &lt;em&gt;dispatch function&lt;/em&gt;) is a function that accepts an action or an &lt;a href=&quot;#async-action&quot;&gt;async action&lt;/a&gt;; it then may or may not dispatch one or more actions to the store.</source>
          <target state="translated">Una &lt;em&gt;funci&amp;oacute;n de env&amp;iacute;o&lt;/em&gt; (o simplemente &lt;em&gt;funci&amp;oacute;n de env&amp;iacute;o&lt;/em&gt; ) es una funci&amp;oacute;n que acepta una acci&amp;oacute;n o una &lt;a href=&quot;#async-action&quot;&gt;acci&amp;oacute;n asincr&amp;oacute;nica&lt;/a&gt; ; entonces puede o no enviar una o m&amp;aacute;s acciones a la tienda.</target>
        </trans-unit>
        <trans-unit id="0ec526b8fa830efd01fb591e76b77adf20e29497" translate="yes" xml:space="preserve">
          <source>A &lt;em&gt;reducer enhancer&lt;/em&gt; (or a &lt;em&gt;higher order reducer&lt;/em&gt;) is a function that takes a reducer, and returns a new reducer that is able to handle new actions, or to hold more state, delegating control to the inner reducer for the actions it doesn't understand. This isn't a new pattern&amp;mdash;technically, &lt;a href=&quot;../api/combinereducers&quot;&gt;&lt;code&gt;combineReducers()&lt;/code&gt;&lt;/a&gt; is also a reducer enhancer because it takes reducers and returns a new reducer.</source>
          <target state="translated">Un &lt;em&gt;potenciador reductor&lt;/em&gt; (o un &lt;em&gt;reductor de orden superior&lt;/em&gt; ) es una funci&amp;oacute;n que toma un reductor y devuelve un nuevo reductor que es capaz de manejar nuevas acciones o mantener m&amp;aacute;s estado, delegando el control al reductor interno para las acciones que no realiza. entender. Este no es un patr&amp;oacute;n nuevo; t&amp;eacute;cnicamente, &lt;a href=&quot;../api/combinereducers&quot;&gt; &lt;code&gt;combineReducers()&lt;/code&gt; &lt;/a&gt; tambi&amp;eacute;n es un potenciador de reductores porque toma reductores y devuelve un nuevo reductor.</target>
        </trans-unit>
        <trans-unit id="54f6e31c957bc32bf7205d27b105533b64b11e59" translate="yes" xml:space="preserve">
          <source>A &lt;em&gt;reducer&lt;/em&gt; (also called a &lt;em&gt;reducing function&lt;/em&gt;) is a function that accepts an accumulation and a value and returns a new accumulation. They are used to reduce a collection of values down to a single value.</source>
          <target state="translated">Un &lt;em&gt;reductor&lt;/em&gt; (tambi&amp;eacute;n llamado &lt;em&gt;funci&amp;oacute;n reductora&lt;/em&gt; ) es una funci&amp;oacute;n que acepta una acumulaci&amp;oacute;n y un valor y devuelve una nueva acumulaci&amp;oacute;n. Se utilizan para reducir una colecci&amp;oacute;n de valores a un solo valor.</target>
        </trans-unit>
        <trans-unit id="9eba9d63a46e1040299343c1cba8ee39cab099e4" translate="yes" xml:space="preserve">
          <source>A Better File Structure for React/Redux Applications</source>
          <target state="translated">Una mejor estructura de archivos para las aplicaciones React/Redux</target>
        </trans-unit>
        <trans-unit id="bd0db97b3caad08800e67bceba3655a16a4f42cb" translate="yes" xml:space="preserve">
          <source>A Case for setState</source>
          <target state="translated">Un caso para setState</target>
        </trans-unit>
        <trans-unit id="58c12a94fc1ee1fe47d7abe792ff5a9b7def031d" translate="yes" xml:space="preserve">
          <source>A Deep Dive into React Perf Debugging</source>
          <target state="translated">Una inmersión profunda en la depuración de React Perf.</target>
        </trans-unit>
        <trans-unit id="0c5b0d4140e816f05523e9bb1e2dcd4ec9a913dc" translate="yes" xml:space="preserve">
          <source>A Note for Flux Users</source>
          <target state="translated">Una nota para los usuarios de los flujos</target>
        </trans-unit>
        <trans-unit id="112ec3b82e3827f70752ce959d0c0355deef0319" translate="yes" xml:space="preserve">
          <source>A Note for Flux Users&lt;a href=&quot;#a-note-for-flux-users&quot;&gt;#&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7d428e93157d855050293db5563e5ead5bd5d9d0" translate="yes" xml:space="preserve">
          <source>A Note for Flux Users&lt;a href=&quot;#a-note-for-flux-users-1&quot;&gt;#&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="779923a9da175253b9122887cfa0972c4cb74e6e" translate="yes" xml:space="preserve">
          <source>A Note on Mixing ES6 Modules and CommonJS</source>
          <target state="translated">Una nota sobre la mezcla de módulos ES6 y CommonJS</target>
        </trans-unit>
        <trans-unit id="db41c4cd245302803e94359aaa69cba0b0f06284" translate="yes" xml:space="preserve">
          <source>A Redux state usually has a plain Javascript object as the top of the state tree. (It is certainly possible to have another type of data instead, such as a single number, an array, or a specialized data structure, but most libraries assume that the top-level value is a plain object.) The most common way to organize data within that top-level object is to further divide data into sub-trees, where each top-level key represents some &quot;domain&quot; or &quot;slice&quot; of related data. For example, a basic Todo app's state might look like:</source>
          <target state="translated">Un estado Redux suele tener un objeto Javascript plano como la cima del árbol de estados.(Ciertamente es posible tener otro tipo de datos en su lugar,como un número único,una matriz o una estructura de datos especializada,pero la mayoría de las bibliotecas asumen que el valor de nivel superior es un objeto plano).La forma más común de organizar los datos dentro de ese objeto de nivel superior es dividir los datos en subárboles,donde cada clave de nivel superior representa algún &quot;dominio&quot; o &quot;porción&quot; de datos relacionados.Por ejemplo,el estado de una aplicación básica de Todo podría parecerse a:</target>
        </trans-unit>
        <trans-unit id="c95746f061e18147c8c2a55d13555d7725bb143b" translate="yes" xml:space="preserve">
          <source>A better usage might look like:</source>
          <target state="translated">Un mejor uso podría parecer:</target>
        </trans-unit>
        <trans-unit id="b48f874d11bc5b272adec4dc58721d09af5d10c0" translate="yes" xml:space="preserve">
          <source>A cartoon intro to Redux</source>
          <target state="translated">Una introducción de dibujos animados a Redux</target>
        </trans-unit>
        <trans-unit id="e9bf7de4be37a17f5d19505f713bd1be6f33e3ac" translate="yes" xml:space="preserve">
          <source>A deep dive into Clojure&amp;rsquo;s data structures</source>
          <target state="translated">Una inmersi&amp;oacute;n profunda en las estructuras de datos de Clojure</target>
        </trans-unit>
        <trans-unit id="0451b576bd71ffbe13c32dc53912051fc439260e" translate="yes" xml:space="preserve">
          <source>A different useful transformation that comes to my mind is reporting JavaScript errors in production. The global &lt;code&gt;window.onerror&lt;/code&gt; event is not reliable because it doesn't provide stack information in some older browsers, which is crucial to understand why an error is happening.</source>
          <target state="translated">Una transformaci&amp;oacute;n &amp;uacute;til diferente que me viene a la mente es informar errores de JavaScript en producci&amp;oacute;n. El evento global &lt;code&gt;window.onerror&lt;/code&gt; no es confiable porque no proporciona informaci&amp;oacute;n de pila en algunos navegadores m&amp;aacute;s antiguos, lo cual es crucial para comprender por qu&amp;eacute; ocurre un error.</target>
        </trans-unit>
        <trans-unit id="1e4484c12f25bb46be91193117c01544958d6300" translate="yes" xml:space="preserve">
          <source>A good first step might be to break out a utility function to return a new object with updated fields. There's also a repeated pattern with trying to update a specific item in an array that we could extract to a function:</source>
          <target state="translated">Un buen primer paso podría ser la creación de una función de utilidad para devolver un nuevo objeto con campos actualizados.También hay un patrón repetido con el intento de actualizar un elemento específico en una matriz que podríamos extraer a una función:</target>
        </trans-unit>
        <trans-unit id="e9a086635bdf1493f65c3720a831f2e56113ebce" translate="yes" xml:space="preserve">
          <source>A list of many immutable update utilities can be found in the &lt;a href=&quot;https://github.com/markerikson/redux-ecosystem-links/blob/master/immutable-data.md#immutable-update-utilities&quot;&gt;Immutable Data#Immutable Update Utilities&lt;/a&gt; section of the &lt;a href=&quot;https://github.com/markerikson/redux-ecosystem-links&quot;&gt;Redux Addons Catalog&lt;/a&gt;.</source>
          <target state="translated">Se puede encontrar una lista de muchas utilidades de actualizaci&amp;oacute;n inmutables en la secci&amp;oacute;n &lt;a href=&quot;https://github.com/markerikson/redux-ecosystem-links/blob/master/immutable-data.md#immutable-update-utilities&quot;&gt;Utilidades de actualizaci&amp;oacute;n inmutables # de datos inmutables&lt;/a&gt; del &lt;a href=&quot;https://github.com/markerikson/redux-ecosystem-links&quot;&gt;Cat&amp;aacute;logo de complementos de Redux&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="3c5180d4d6c3b37f40d01a33af1b0f3baa180c07" translate="yes" xml:space="preserve">
          <source>A memoized selector can itself be an input-selector to another memoized selector. Here is &lt;code&gt;getVisibleTodos&lt;/code&gt; being used as an input-selector to a selector that further filters the todos by keyword:</source>
          <target state="translated">Un selector memorizado puede ser en s&amp;iacute; mismo un selector de entrada para otro selector memorizado. Aqu&amp;iacute; se &lt;code&gt;getVisibleTodos&lt;/code&gt; como un selector de entrada para un selector que filtra a&amp;uacute;n m&amp;aacute;s los todos por palabra clave:</target>
        </trans-unit>
        <trans-unit id="1715344fa5f33e240f9d1d585beffe859e05b0df" translate="yes" xml:space="preserve">
          <source>A middleware is a higher-order function that composes a &lt;a href=&quot;#dispatching-function&quot;&gt;dispatch function&lt;/a&gt; to return a new dispatch function. It often turns &lt;a href=&quot;#async-action&quot;&gt;async actions&lt;/a&gt; into actions.</source>
          <target state="translated">Un middleware es una funci&amp;oacute;n de orden superior que compone una &lt;a href=&quot;#dispatching-function&quot;&gt;funci&amp;oacute;n de env&amp;iacute;o&lt;/a&gt; para devolver una nueva funci&amp;oacute;n de env&amp;iacute;o. A menudo convierte las &lt;a href=&quot;#async-action&quot;&gt;acciones asincr&amp;oacute;nicas&lt;/a&gt; en acciones.</target>
        </trans-unit>
        <trans-unit id="81b81652bf02ff7bf772129a812fc4e04bf51ded" translate="yes" xml:space="preserve">
          <source>A nice thing about React components is that they are usually small and only rely on their props. That makes them easy to test.</source>
          <target state="translated">Lo bueno de los componentes de React es que suelen ser pequeños y sólo dependen de su utilería.Eso los hace fáciles de probar.</target>
        </trans-unit>
        <trans-unit id="66c5775c8d40ff721fc8d112637246b185d62e5b" translate="yes" xml:space="preserve">
          <source>A popular convention is to name reducers after the state slices they manage, so you can use ES6 property shorthand notation: &lt;code&gt;combineReducers({ counter, todos })&lt;/code&gt;. This is equivalent to writing &lt;code&gt;combineReducers({ counter: counter, todos: todos })&lt;/code&gt;.</source>
          <target state="translated">Una convenci&amp;oacute;n popular es nombrar los reductores despu&amp;eacute;s de los segmentos de estado que administran, por lo que puede usar la notaci&amp;oacute;n abreviada de propiedades de ES6: &lt;code&gt;combineReducers({ counter, todos })&lt;/code&gt; . Esto es equivalente a escribir &lt;code&gt;combineReducers({ counter: counter, todos: todos })&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="6142fea1802b9d891098496555324f048dfc4ab1" translate="yes" xml:space="preserve">
          <source>A reducer enhancer that combines other reducers might look like this:</source>
          <target state="translated">Un potenciador reductor que combina otros reductores podría verse así:</target>
        </trans-unit>
        <trans-unit id="85855b61915007bb41ecf73529b533adae4a769a" translate="yes" xml:space="preserve">
          <source>A reducer enhancer that doesn't do anything looks like this:</source>
          <target state="translated">Un potenciador reductor que no hace nada se parece a esto:</target>
        </trans-unit>
        <trans-unit id="4e2848c8d31433a5257b89be2c33d6bbc13ce44e" translate="yes" xml:space="preserve">
          <source>A reducer should return the new state after applying the action to the previous state, and that's the behavior tested below.</source>
          <target state="translated">Un reductor debe devolver el nuevo estado después de aplicar la acción al estado anterior,y ese es el comportamiento que se prueba a continuación.</target>
        </trans-unit>
        <trans-unit id="ce6bc5c6b208bc72c706a97b8ea7f4de3a455d2c" translate="yes" xml:space="preserve">
          <source>A selector created with &lt;code&gt;createSelector&lt;/code&gt; only returns the cached value when its set of arguments is the same as its previous set of arguments. If we alternate between rendering &lt;code&gt;&amp;lt;VisibleTodoList listId=&quot;1&quot; /&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;VisibleTodoList listId=&quot;2&quot; /&amp;gt;&lt;/code&gt;, the shared selector will alternate between receiving &lt;code&gt;{listId: 1}&lt;/code&gt; and &lt;code&gt;{listId: 2}&lt;/code&gt; as its &lt;code&gt;props&lt;/code&gt; argument. This will cause the arguments to be different on each call, so the selector will always recompute instead of returning the cached value. We'll see how to overcome this limitation in the next section.</source>
          <target state="translated">Un selector creado con &lt;code&gt;createSelector&lt;/code&gt; solo devuelve el valor almacenado en cach&amp;eacute; cuando su conjunto de argumentos es el mismo que su conjunto de argumentos anterior. Si nos alternan entre la representaci&amp;oacute;n &lt;code&gt;&amp;lt;VisibleTodoList listId=&quot;1&quot; /&amp;gt;&lt;/code&gt; y &lt;code&gt;&amp;lt;VisibleTodoList listId=&quot;2&quot; /&amp;gt;&lt;/code&gt; , el selector compartida alternar&amp;aacute; entre la recepci&amp;oacute;n &lt;code&gt;{listId: 1}&lt;/code&gt; y &lt;code&gt;{listId: 2}&lt;/code&gt; como &lt;code&gt;props&lt;/code&gt; argumento. Esto har&amp;aacute; que los argumentos sean diferentes en cada llamada, por lo que el selector siempre volver&amp;aacute; a calcular en lugar de devolver el valor en cach&amp;eacute;. Veremos c&amp;oacute;mo superar esta limitaci&amp;oacute;n en la siguiente secci&amp;oacute;n.</target>
        </trans-unit>
        <trans-unit id="d7fdd19e31d4aa5c08f59368d084b0cdd3afe5c5" translate="yes" xml:space="preserve">
          <source>A shallow equality check is therefore as simple (and as fast) as &lt;code&gt;a === b&lt;/code&gt;, whereas a deep equality check involves a recursive traversal through the properties of two objects, comparing the value of each property at each step.</source>
          <target state="translated">Por lo tanto, una verificaci&amp;oacute;n de igualdad superficial es tan simple (y tan r&amp;aacute;pida) como &lt;code&gt;a === b&lt;/code&gt; , mientras que una verificaci&amp;oacute;n de igualdad profunda implica un recorrido recursivo a trav&amp;eacute;s de las propiedades de dos objetos, comparando el valor de cada propiedad en cada paso.</target>
        </trans-unit>
        <trans-unit id="8bba7fd75614daa0e3f257e0f35cbfa400838a5b" translate="yes" xml:space="preserve">
          <source>A store creator is a function that creates a Redux store. Like with dispatching function, we must distinguish the base store creator, &lt;a href=&quot;api/createstore&quot;&gt;&lt;code&gt;createStore(reducer, preloadedState)&lt;/code&gt;&lt;/a&gt; exported from the Redux package, from store creators that are returned from the store enhancers.</source>
          <target state="translated">Un creador de tienda es una funci&amp;oacute;n que crea una tienda Redux. Al igual que con la funci&amp;oacute;n de env&amp;iacute;o, debemos distinguir el creador de la tienda base, &lt;a href=&quot;api/createstore&quot;&gt; &lt;code&gt;createStore(reducer, preloadedState)&lt;/code&gt; &lt;/a&gt; exportado desde el paquete Redux, de los creadores de la tienda que son devueltos por los mejoradores de la tienda.</target>
        </trans-unit>
        <trans-unit id="0498b8c765baf0d793d01093c2d3938c7acad2d2" translate="yes" xml:space="preserve">
          <source>A store enhancer is a higher-order function that composes a store creator to return a new, enhanced store creator. This is similar to middleware in that it allows you to alter the store interface in a composable way.</source>
          <target state="translated">Un potenciador de tienda es una función de orden superior que compone un creador de tienda para devolver un nuevo y mejorado creador de tienda.Esto es similar al middleware en el sentido de que permite alterar la interfaz de la tienda de una manera composible.</target>
        </trans-unit>
        <trans-unit id="80ff26cb12d9ecc5ea599ca905718232908db10a" translate="yes" xml:space="preserve">
          <source>A store holds the whole &lt;a href=&quot;../glossary#state&quot;&gt;state tree&lt;/a&gt; of your application.</source>
          <target state="translated">Una tienda contiene el &lt;a href=&quot;../glossary#state&quot;&gt;&amp;aacute;rbol&lt;/a&gt; de estado completo de su aplicaci&amp;oacute;n.</target>
        </trans-unit>
        <trans-unit id="591e79aa8eb0b52150c59ec912469c7ac2f9f67f" translate="yes" xml:space="preserve">
          <source>A store holds the whole &lt;a href=&quot;https://redux.js.org/understanding/thinking-in-redux/glossary#state&quot;&gt;state tree&lt;/a&gt; of your application. The only way to change the state inside it is to dispatch an &lt;a href=&quot;https://redux.js.org/understanding/thinking-in-redux/glossary#action&quot;&gt;action&lt;/a&gt; on it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="db90563ef06aad2359ba2b820d66958cfae253aa" translate="yes" xml:space="preserve">
          <source>A store is an object that holds the application's state tree.</source>
          <target state="translated">Una tienda es un objeto que contiene el árbol de estados de la aplicación.</target>
        </trans-unit>
        <trans-unit id="8139366b65a6efd49fd2de96e65c9cf4f80822d2" translate="yes" xml:space="preserve">
          <source>A store is not a class. It's just an object with a few methods on it.</source>
          <target state="translated">Una tienda no es una clase.Es sólo un objeto con algunos métodos.</target>
        </trans-unit>
        <trans-unit id="0291856f140fe0a2770a09f4e7f6437700d29459" translate="yes" xml:space="preserve">
          <source>A store is not a class. It's just an object with a few methods on it. To create it, pass your root &lt;a href=&quot;https://redux.js.org/understanding/thinking-in-redux/glossary#reducer&quot;&gt;reducing function&lt;/a&gt; to &lt;a href=&quot;createstore&quot;&gt;&lt;code&gt;createStore&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1dd2226f91b259d8b3ba9075e912f9f1b756eb73" translate="yes" xml:space="preserve">
          <source>A third approach would be to use the reducer generated by &lt;code&gt;combineReducers&lt;/code&gt; to handle the &quot;simple&quot; cases where each slice reducer can update itself independently, but also use another reducer to handle the &quot;special&quot; cases where data needs to be shared across slices. Then, a wrapping function could call both of those reducers in turn to generate the final result:</source>
          <target state="translated">Un tercer enfoque ser&amp;iacute;a usar el reductor generado por &lt;code&gt;combineReducers&lt;/code&gt; para manejar los casos &quot;simples&quot; donde cada reductor de rebanada puede actualizarse por s&amp;iacute; mismo, pero tambi&amp;eacute;n usar otro reductor para manejar los casos &quot;especiales&quot; donde los datos deben compartirse entre rebanadas. Luego, una funci&amp;oacute;n de envoltura podr&amp;iacute;a llamar a ambos reductores a su vez para generar el resultado final:</target>
        </trans-unit>
        <trans-unit id="3a29a2d5178bbb1dcd22edfd2b4d56832e62a760" translate="yes" xml:space="preserve">
          <source>A typical app's state shape might look roughly like:</source>
          <target state="translated">La forma del estado de una aplicación típica podría parecerse aproximadamente:</target>
        </trans-unit>
        <trans-unit id="dd7f5eb9f1f3f2372ac3b7d3fc72f9fa655d209b" translate="yes" xml:space="preserve">
          <source>A typical application will likely have a mixture of relational data and non-relational data. While there is no single rule for exactly how those different types of data should be organized, one common pattern is to put the relational &quot;tables&quot; under a common parent key, such as &quot;entities&quot;. A state structure using this approach might look like:</source>
          <target state="translated">Una aplicación típica probablemente tendrá una mezcla de datos relacionales y no relacionales.Si bien no existe una regla única que determine exactamente cómo deben organizarse esos diferentes tipos de datos,una pauta común consiste en colocar los &quot;cuadros&quot; relacionales bajo una clave parental común,como &quot;entidades&quot;.Una estructura de estado que utilice este enfoque podría parecerse a:</target>
        </trans-unit>
        <trans-unit id="d93d10ff0fbef1b4aa0ddc24e10e907746d3c85a" translate="yes" xml:space="preserve">
          <source>API</source>
          <target state="translated">API</target>
        </trans-unit>
        <trans-unit id="b276f94cd8d0e74a21de6e5939b8c10ca9a975d6" translate="yes" xml:space="preserve">
          <source>API Reference</source>
          <target state="translated">Referencia API</target>
        </trans-unit>
        <trans-unit id="f0682f7888392082612529e79e90a8568fdf278b" translate="yes" xml:space="preserve">
          <source>API: React-Redux&amp;rsquo;s connect function and &lt;code&gt;mapStateToProps&lt;/code&gt;</source>
          <target state="translated">API: funci&amp;oacute;n de conexi&amp;oacute;n de React-Redux y &lt;code&gt;mapStateToProps&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="01b79cd36dd33f71f26f84428e7993c489d7d7b4" translate="yes" xml:space="preserve">
          <source>API: Store</source>
          <target state="translated">API:Almacenar</target>
        </trans-unit>
        <trans-unit id="e0c9492b063857505209dc57c11cd7626823a1e5" translate="yes" xml:space="preserve">
          <source>API: applyMiddleware</source>
          <target state="translated">API:applyMiddleware</target>
        </trans-unit>
        <trans-unit id="933d49b5bdf3528c648138b4bc997b3bd1ee051d" translate="yes" xml:space="preserve">
          <source>API: combineReducers</source>
          <target state="translated">API:Combinación de reductores</target>
        </trans-unit>
        <trans-unit id="3e2257d3cbebe55ab5120cd90126477209348170" translate="yes" xml:space="preserve">
          <source>Accessing React Props in Selectors</source>
          <target state="translated">Acceder a los accesorios de React en los selectores</target>
        </trans-unit>
        <trans-unit id="7b3702d1af5b6f51067a97e15b727d6bb1e395e0" translate="yes" xml:space="preserve">
          <source>Accidental Object Mutation</source>
          <target state="translated">Mutación accidental de objetos</target>
        </trans-unit>
        <trans-unit id="a3bcac5b1b8316670488ac51d4cfe888b1904b8d" translate="yes" xml:space="preserve">
          <source>Accidentally mutating or modifying your state directly is by far the most common reason why components do not re-render after an action has been dispatched. Redux expects that your reducers will update their state &amp;ldquo;immutably&amp;rdquo;, which effectively means always making copies of your data, and applying your changes to the copies. If you return the same object from a reducer, Redux assumes that nothing has been changed, even if you made changes to its contents. Similarly, React Redux tries to improve performance by doing shallow equality reference checks on incoming props in &lt;code&gt;shouldComponentUpdate&lt;/code&gt;, and if all references are the same, returns &lt;code&gt;false&lt;/code&gt; to skip actually updating your original component.</source>
          <target state="translated">Mutar o modificar accidentalmente su estado directamente es, con mucho, la raz&amp;oacute;n m&amp;aacute;s com&amp;uacute;n por la que los componentes no se vuelven a procesar despu&amp;eacute;s de que se ha enviado una acci&amp;oacute;n. Redux espera que sus reductores actualicen su estado &quot;inmutablemente&quot;, lo que efectivamente significa hacer siempre copias de sus datos y aplicar sus cambios a las copias. Si devuelve el mismo objeto de un reductor, Redux asume que no se ha cambiado nada, incluso si realiz&amp;oacute; cambios en su contenido. De manera similar, React Redux intenta mejorar el rendimiento haciendo verificaciones de referencia de igualdad superficiales en los accesorios entrantes en &lt;code&gt;shouldComponentUpdate&lt;/code&gt; , y si todas las referencias son iguales, devuelve &lt;code&gt;false&lt;/code&gt; para omitir la actualizaci&amp;oacute;n real de su componente original.</target>
        </trans-unit>
        <trans-unit id="ededef69001678f2e3f055f1fda34f301acb3bdc" translate="yes" xml:space="preserve">
          <source>Accordingly, &lt;code&gt;combineReducers&lt;/code&gt; will not set its &lt;code&gt;hasChanged&lt;/code&gt; flag, even though the state has changed. If none of the other reducers return a new, updated state slice, the &lt;code&gt;hasChanged&lt;/code&gt; flag will remain set to false, causing &lt;code&gt;combineReducers&lt;/code&gt; to return the &lt;em&gt;existing&lt;/em&gt; root state object.</source>
          <target state="translated">En consecuencia, &lt;code&gt;combineReducers&lt;/code&gt; no establecer&amp;aacute; su bandera &lt;code&gt;hasChanged&lt;/code&gt; , aunque el estado haya cambiado. Si ninguno de los otros reductores devuelve un segmento de estado nuevo y actualizado, el indicador &lt;code&gt;hasChanged&lt;/code&gt; permanecer&amp;aacute; establecido en falso, lo que &lt;code&gt;combineReducers&lt;/code&gt; que combineReducers devuelva el objeto de estado ra&amp;iacute;z &lt;em&gt;existente&lt;/em&gt; .</target>
        </trans-unit>
        <trans-unit id="4a9938fccff603464933303296454dffcb6d16f1" translate="yes" xml:space="preserve">
          <source>Accordingly, calling &lt;code&gt;toJS()&lt;/code&gt; twice, for example, and assigning the result to two different variables will cause an equality check on those two variables to fail, even though the object values themselves haven&amp;rsquo;t changed.</source>
          <target state="translated">En consecuencia, llamar a &lt;code&gt;toJS()&lt;/code&gt; dos veces, por ejemplo, y asignar el resultado a dos variables diferentes har&amp;aacute; que falle una verificaci&amp;oacute;n de igualdad en esas dos variables, aunque los valores del objeto en s&amp;iacute; mismos no hayan cambiado.</target>
        </trans-unit>
        <trans-unit id="97c89a4d6630adeb18fa12ba9976a31413fe293e" translate="yes" xml:space="preserve">
          <source>Action</source>
          <target state="translated">Action</target>
        </trans-unit>
        <trans-unit id="240f485623391e5c1075e5725ad30c67ed287ffe" translate="yes" xml:space="preserve">
          <source>Action Creator</source>
          <target state="translated">Creador de Acción</target>
        </trans-unit>
        <trans-unit id="41b6c7e08efa20fb3393d8ac535f3d3c740a070d" translate="yes" xml:space="preserve">
          <source>Action Creators</source>
          <target state="translated">Creadores de Acción</target>
        </trans-unit>
        <trans-unit id="0ec85940f13d4f2b78e391b686bbb091564ba03e" translate="yes" xml:space="preserve">
          <source>Action Creators and Constants</source>
          <target state="translated">Creadores de Acción y Constantes</target>
        </trans-unit>
        <trans-unit id="a119c0a9e7c1a3dda7791541c11f9924b37c7992" translate="yes" xml:space="preserve">
          <source>Action creators can also be asynchronous and have side-effects. You can read about &lt;a href=&quot;../advanced/asyncactions&quot;&gt;async actions&lt;/a&gt; in the &lt;a href=&quot;../advanced/index&quot;&gt;advanced tutorial&lt;/a&gt; to learn how to handle AJAX responses and compose action creators into async control flow. Don't skip ahead to async actions until you've completed the basics tutorial, as it covers other important concepts that are prerequisite for the advanced tutorial and async actions.</source>
          <target state="translated">Los creadores de acciones tambi&amp;eacute;n pueden ser asincr&amp;oacute;nicos y tener efectos secundarios. Puede leer sobre las &lt;a href=&quot;../advanced/asyncactions&quot;&gt;acciones as&amp;iacute;ncronas&lt;/a&gt; en el &lt;a href=&quot;../advanced/index&quot;&gt;tutorial avanzado&lt;/a&gt; para aprender c&amp;oacute;mo manejar las respuestas AJAX y componer creadores de acciones en un flujo de control as&amp;iacute;ncrono. No omita las acciones as&amp;iacute;ncronas hasta que haya completado el tutorial b&amp;aacute;sico, ya que cubre otros conceptos importantes que son requisitos previos para el tutorial avanzado y las acciones as&amp;iacute;ncronas.</target>
        </trans-unit>
        <trans-unit id="38b2a78d2a362985ab2383462db85f699d11a8bc" translate="yes" xml:space="preserve">
          <source>Action creators have often been criticized as boilerplate. Well, you don't have to write them! &lt;strong&gt;You can use object literals if you feel this better suits your project.&lt;/strong&gt; There are, however, some benefits for writing action creators you should know about.</source>
          <target state="translated">Los creadores de acciones a menudo han sido criticados por ser un modelo est&amp;aacute;ndar. Bueno, &amp;iexcl;no tienes que escribirlos! &lt;strong&gt;Puede utilizar literales de objeto si cree que esto se adapta mejor a su proyecto. &lt;/strong&gt;Sin embargo, existen algunos beneficios para los creadores de acciones de escritura que debe conocer.</target>
        </trans-unit>
        <trans-unit id="c3cd636a585b20c40ac2df5ffb403e83cb2eef51" translate="yes" xml:space="preserve">
          <source>Actions</source>
          <target state="translated">Actions</target>
        </trans-unit>
        <trans-unit id="e8ae9384ae9248e5ddbc032e08b2557629723918" translate="yes" xml:space="preserve">
          <source>Actions are plain JavaScript objects. Actions must have a &lt;code&gt;type&lt;/code&gt; property that indicates the type of action being performed. Types should typically be defined as string constants. Once your app is large enough, you may want to move them into a separate module.</source>
          <target state="translated">Las acciones son objetos simples de JavaScript. Las acciones deben tener una propiedad de &lt;code&gt;type&lt;/code&gt; que indique el tipo de acci&amp;oacute;n que se est&amp;aacute; realizando. Normalmente, los tipos deben definirse como constantes de cadena. Una vez que su aplicaci&amp;oacute;n sea lo suficientemente grande, es posible que desee moverla a un m&amp;oacute;dulo separado.</target>
        </trans-unit>
        <trans-unit id="29c6835b1a6b3824f0c14c55211c697ec783ced1" translate="yes" xml:space="preserve">
          <source>Actions are plain objects describing what happened in the app, and serve as the sole way to describe an intention to mutate the data. It's important that &lt;strong&gt;actions being objects you have to dispatch is not boilerplate, but one of the &lt;a href=&quot;../introduction/threeprinciples&quot;&gt;fundamental design choices&lt;/a&gt; of Redux&lt;/strong&gt;.</source>
          <target state="translated">Las acciones son objetos simples que describen lo que sucedi&amp;oacute; en la aplicaci&amp;oacute;n y sirven como la &amp;uacute;nica forma de describir una intenci&amp;oacute;n de mutar los datos. Es importante que las &lt;strong&gt;acciones&lt;a href=&quot;../introduction/threeprinciples&quot;&gt;&lt;/a&gt;&lt;/strong&gt; que &lt;strong&gt;son objetos que debe distribuir no sean un est&amp;aacute;ndar, sino una de las &lt;/strong&gt;&lt;strong&gt;opciones&lt;/strong&gt;&lt;strong&gt; de &lt;/strong&gt;&lt;strong&gt;dise&amp;ntilde;o fundamentales&lt;/strong&gt;&lt;strong&gt; de Redux&lt;/strong&gt; .</target>
        </trans-unit>
        <trans-unit id="7d61d75382f4f34d26d503abba6068279c8ea603" translate="yes" xml:space="preserve">
          <source>Actions look like this:</source>
          <target state="translated">Las acciones se ven así:</target>
        </trans-unit>
        <trans-unit id="59ec7f0f4e16258c3a0d1d14cd731f00efda02b1" translate="yes" xml:space="preserve">
          <source>Actions must have a &lt;code&gt;type&lt;/code&gt; field that indicates the type of action being performed. Types can be defined as constants and imported from another module. It's better to use strings for &lt;code&gt;type&lt;/code&gt; than &lt;a href=&quot;https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Symbol&quot;&gt;Symbols&lt;/a&gt; because strings are serializable.</source>
          <target state="translated">Las acciones deben tener un campo de &lt;code&gt;type&lt;/code&gt; que indique el tipo de acci&amp;oacute;n que se est&amp;aacute; realizando. Los tipos se pueden definir como constantes e importar desde otro m&amp;oacute;dulo. Es mejor usar cadenas para el &lt;code&gt;type&lt;/code&gt; que &lt;a href=&quot;https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Symbol&quot;&gt;s&amp;iacute;mbolos&lt;/a&gt; porque las cadenas son serializables.</target>
        </trans-unit>
        <trans-unit id="88de3a2870fc9eb038ea75c3422acc4a151defa3" translate="yes" xml:space="preserve">
          <source>Adding the Buttons</source>
          <target state="translated">Añadiendo los botones</target>
        </trans-unit>
        <trans-unit id="c737672ab2cc3d4caaa793fa73dc88d6e8d45119" translate="yes" xml:space="preserve">
          <source>Additionally, as we are using ES6 and JSX syntax, we will need to compile with &lt;a href=&quot;https://babeljs.io/&quot;&gt;Babel&lt;/a&gt; (see &lt;a href=&quot;https://github.com/babel/example-node-server&quot;&gt;this example of a Node Server with Babel&lt;/a&gt;) and the &lt;a href=&quot;https://babeljs.io/docs/plugins/preset-react/&quot;&gt;React preset&lt;/a&gt;.</source>
          <target state="translated">Adem&amp;aacute;s, como estamos usando la sintaxis ES6 y JSX, necesitaremos compilar con &lt;a href=&quot;https://babeljs.io/&quot;&gt;Babel&lt;/a&gt; (vea &lt;a href=&quot;https://github.com/babel/example-node-server&quot;&gt;este ejemplo de un servidor de nodo con Babel&lt;/a&gt; ) y el &lt;a href=&quot;https://babeljs.io/docs/plugins/preset-react/&quot;&gt;ajuste preestablecido de React&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="18596de4375fc946c5b097f81e74982a60e9c894" translate="yes" xml:space="preserve">
          <source>Adds a change listener. It will be called any time an action is dispatched, and some part of the state tree may potentially have changed. You may then call &lt;a href=&quot;#getState&quot;&gt;&lt;code&gt;getState()&lt;/code&gt;&lt;/a&gt; to read the current state tree inside the callback.</source>
          <target state="translated">Agrega un oyente de cambios. Se llamar&amp;aacute; cada vez que se env&amp;iacute;e una acci&amp;oacute;n, y es posible que alguna parte del &amp;aacute;rbol de estado haya cambiado. Luego puede llamar a &lt;a href=&quot;#getState&quot;&gt; &lt;code&gt;getState()&lt;/code&gt; &lt;/a&gt; para leer el &amp;aacute;rbol de estado actual dentro de la devoluci&amp;oacute;n de llamada.</target>
        </trans-unit>
        <trans-unit id="4d064726954a17487f94e931f5b157b733ec22ed" translate="yes" xml:space="preserve">
          <source>Advanced</source>
          <target state="translated">Advanced</target>
        </trans-unit>
        <trans-unit id="16857f7bab141f13aed36aec58498499bddb6833" translate="yes" xml:space="preserve">
          <source>Advanced: Async Actions</source>
          <target state="translated">Avanzado:Acciones de sincronización</target>
        </trans-unit>
        <trans-unit id="025dce227eca0ed35e21358aac9e6536fedf70ed" translate="yes" xml:space="preserve">
          <source>Advanced: Async Flow</source>
          <target state="translated">Avanzado:Async Flow</target>
        </trans-unit>
        <trans-unit id="35f20532e3af1b93336b6e71dbaacd3a2435abd0" translate="yes" xml:space="preserve">
          <source>Advanced: Middleware</source>
          <target state="translated">Avanzado:Middleware</target>
        </trans-unit>
        <trans-unit id="25069391f8b74b286f02804c1347be029afe7715" translate="yes" xml:space="preserve">
          <source>After passing it once to &lt;a href=&quot;../api/applymiddleware&quot;&gt;&lt;code&gt;applyMiddleware(...middlewares)&lt;/code&gt;&lt;/a&gt;, you can write all your API-calling action creators the same way:</source>
          <target state="translated">Despu&amp;eacute;s de pasarlo una vez a &lt;a href=&quot;../api/applymiddleware&quot;&gt; &lt;code&gt;applyMiddleware(...middlewares)&lt;/code&gt; &lt;/a&gt; , puede escribir todos los creadores de acciones de llamada a la API de la misma manera:</target>
        </trans-unit>
        <trans-unit id="53e43e635db37f09dab8f6423d79953c28e59e8e" translate="yes" xml:space="preserve">
          <source>After the iterations have completed, &lt;code&gt;combineReducers&lt;/code&gt; will check the state of the &lt;code&gt;hasChanged&lt;/code&gt; flag. If it&amp;rsquo;s true, the newly-constructed state object will be returned. If it&amp;rsquo;s false, the &lt;em&gt;current&lt;/em&gt; state object is returned.</source>
          <target state="translated">Una vez completadas las iteraciones, &lt;code&gt;combineReducers&lt;/code&gt; comprobar&amp;aacute; el estado de la bandera &lt;code&gt;hasChanged&lt;/code&gt; . Si es cierto, se devolver&amp;aacute; el objeto de estado reci&amp;eacute;n construido. Si es falso, se devuelve el objeto de estado &lt;em&gt;actual&lt;/em&gt; .</target>
        </trans-unit>
        <trans-unit id="fc595812793ab6bb9b28c25bb6e33f011754ef4a" translate="yes" xml:space="preserve">
          <source>Again, it's important to understand that Redux reducers are &lt;em&gt;just&lt;/em&gt; functions. While &lt;code&gt;combineReducers&lt;/code&gt; is useful, it's just one tool in the toolbox. Functions can contain conditional logic other than switch statements, functions can be composed to wrap each other, and functions can call other functions. Maybe you need one of your slice reducers to be able to reset its state, and to only respond to specific actions overall. You could do:</source>
          <target state="translated">Nuevamente, es importante comprender que los reductores de Redux son &lt;em&gt;solo&lt;/em&gt; funciones. Si bien &lt;code&gt;combineReducers&lt;/code&gt; es &amp;uacute;til, es solo una herramienta en la caja de herramientas. Las funciones pueden contener l&amp;oacute;gica condicional distinta a las sentencias de conmutaci&amp;oacute;n, las funciones se pueden componer para encajar entre s&amp;iacute; y las funciones pueden llamar a otras funciones. Tal vez necesite uno de sus reductores de corte para poder restablecer su estado y solo responder a acciones espec&amp;iacute;ficas en general. Podr&amp;iacute;as hacerlo:</target>
        </trans-unit>
        <trans-unit id="b948d24fd1c5855cef6418255f90cedfe918ce37" translate="yes" xml:space="preserve">
          <source>Again, this is just a mock API, so we use &lt;code&gt;setTimeout&lt;/code&gt; to simulate a network request that takes 500 milliseconds to respond (this should be much faster with a real world API). We pass in a callback that returns a random number asynchronously. If you're using a Promise-based API client, then you would issue this callback in your &lt;code&gt;then&lt;/code&gt; handler.</source>
          <target state="translated">Nuevamente, esto es solo una API simulada, por lo que usamos &lt;code&gt;setTimeout&lt;/code&gt; para simular una solicitud de red que tarda 500 milisegundos en responder (esto deber&amp;iacute;a ser mucho m&amp;aacute;s r&amp;aacute;pido con una API del mundo real). Pasamos una devoluci&amp;oacute;n de llamada que devuelve un n&amp;uacute;mero aleatorio de forma asincr&amp;oacute;nica. Si est&amp;aacute; utilizando un cliente API basado en Promise, entonces emitir&amp;iacute;a esta devoluci&amp;oacute;n de llamada en su controlador de &lt;code&gt;then&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="79aa101c36a75c4f0aa52bd08ce3b2d8cdc7f9d8" translate="yes" xml:space="preserve">
          <source>All &lt;a href=&quot;../api/combinereducers&quot;&gt;&lt;code&gt;combineReducers()&lt;/code&gt;&lt;/a&gt; does is generate a function that calls your reducers &lt;strong&gt;with the slices of state selected according to their keys&lt;/strong&gt;, and combining their results into a single object again. &lt;a href=&quot;https://github.com/reactjs/redux/issues/428#issuecomment-129223274&quot;&gt;It's not magic.&lt;/a&gt; And like other reducers, &lt;code&gt;combineReducers()&lt;/code&gt; does not create a new object if all of the reducers provided to it do not change state.</source>
          <target state="translated">Todo lo que &lt;a href=&quot;../api/combinereducers&quot;&gt; &lt;code&gt;combineReducers()&lt;/code&gt; &lt;/a&gt; hace es generar una funci&amp;oacute;n que llama a sus reductores &lt;strong&gt;con los segmentos de estado seleccionados de acuerdo con sus claves&lt;/strong&gt; , y combinando sus resultados en un solo objeto nuevamente. &lt;a href=&quot;https://github.com/reactjs/redux/issues/428#issuecomment-129223274&quot;&gt;No es magia. &lt;/a&gt;Y al igual que otros reductores, &lt;code&gt;combineReducers()&lt;/code&gt; no crea un nuevo objeto si todos los reductores que se le proporcionan no cambian de estado.</target>
        </trans-unit>
        <trans-unit id="cbeeac1b96757e9c7e7b9ce98e03b49b2143629c" translate="yes" xml:space="preserve">
          <source>All &lt;code&gt;compose&lt;/code&gt; does is let you write deeply nested function transformations without the rightward drift of the code. Don't give it too much credit!</source>
          <target state="translated">Todo lo que hace &lt;code&gt;compose&lt;/code&gt; es permitirle escribir transformaciones de funciones profundamente anidadas sin la deriva hacia la derecha del c&amp;oacute;digo. &amp;iexcl;No le des demasiado cr&amp;eacute;dito!</target>
        </trans-unit>
        <trans-unit id="9352846dec2290d9ee10aeb06144a932791349b8" translate="yes" xml:space="preserve">
          <source>All container components need access to the Redux store so they can subscribe to it. One option would be to pass it as a prop to every container component. However it gets tedious, as you have to wire &lt;code&gt;store&lt;/code&gt; even through presentational components just because they happen to render a container deep in the component tree.</source>
          <target state="translated">Todos los componentes del contenedor necesitan acceso a la tienda de Redux para que puedan suscribirse. Una opci&amp;oacute;n ser&amp;iacute;a pasarlo como un accesorio a cada componente del contenedor. Sin embargo, se vuelve tedioso, ya que tiene que &lt;code&gt;store&lt;/code&gt; cables incluso a trav&amp;eacute;s de componentes de presentaci&amp;oacute;n solo porque representan un contenedor en lo profundo del &amp;aacute;rbol de componentes.</target>
        </trans-unit>
        <trans-unit id="4ff23711ae579d38170f51f062fe9549d4a371f8" translate="yes" xml:space="preserve">
          <source>Allows access to state via &lt;a href=&quot;../api/store#getState&quot;&gt;&lt;code&gt;getState()&lt;/code&gt;&lt;/a&gt;;</source>
          <target state="translated">Permite el acceso al estado a trav&amp;eacute;s de &lt;a href=&quot;../api/store#getState&quot;&gt; &lt;code&gt;getState()&lt;/code&gt; &lt;/a&gt; ;</target>
        </trans-unit>
        <trans-unit id="9a12034e563003a9eca9331500b3b60b340ce34f" translate="yes" xml:space="preserve">
          <source>Allows state to be updated via &lt;a href=&quot;../api/store#dispatch&quot;&gt;&lt;code&gt;dispatch(action)&lt;/code&gt;&lt;/a&gt;;</source>
          <target state="translated">Permite actualizar el estado mediante &lt;a href=&quot;../api/store#dispatch&quot;&gt; &lt;code&gt;dispatch(action)&lt;/code&gt; &lt;/a&gt; ;</target>
        </trans-unit>
        <trans-unit id="0fc5484ef3a628ddd51e1319c03088024b0016ab" translate="yes" xml:space="preserve">
          <source>Almost all examples have a corresponding CodeSandbox sandbox. This is an interactive version of the code that you can play with online.</source>
          <target state="translated">Casi todos los ejemplos tienen una caja de arena CodeSandbox correspondiente.Esta es una versión interactiva del código con la que puedes jugar en línea.</target>
        </trans-unit>
        <trans-unit id="65a555920679381ca5e42f41dbd1af93c1e69228" translate="yes" xml:space="preserve">
          <source>Along this chapter, we will be using the &lt;a href=&quot;https://github.com/reactjs/redux/tree/master/examples/todos&quot;&gt;Todos&lt;/a&gt; example. We recommend you to clone it while reading this chapter.</source>
          <target state="translated">A lo largo de este cap&amp;iacute;tulo, &lt;a href=&quot;https://github.com/reactjs/redux/tree/master/examples/todos&quot;&gt;usaremos el&lt;/a&gt; ejemplo de Todos . Le recomendamos que lo clone mientras lee este cap&amp;iacute;tulo.</target>
        </trans-unit>
        <trans-unit id="9166c2a546b7eba6781eda1ddb48ac422e9c9900" translate="yes" xml:space="preserve">
          <source>Also keep an eye out for nested state objects that need to be deeply copied. Both &lt;code&gt;_.extend&lt;/code&gt; and &lt;code&gt;Object.assign&lt;/code&gt; make a shallow copy of the state. See &lt;a href=&quot;recipes/reducers/immutableupdatepatterns#updating-nested-objects&quot;&gt;Updating Nested Objects&lt;/a&gt; for suggestions on how to deal with nested state objects.</source>
          <target state="translated">Tambi&amp;eacute;n est&amp;eacute; atento a los objetos de estado anidados que deben copiarse en profundidad. Tanto &lt;code&gt;_.extend&lt;/code&gt; como &lt;code&gt;Object.assign&lt;/code&gt; hacen una copia superficial del estado. Consulte &lt;a href=&quot;recipes/reducers/immutableupdatepatterns#updating-nested-objects&quot;&gt;Actualizaci&amp;oacute;n de objetos anidados&lt;/a&gt; para obtener sugerencias sobre c&amp;oacute;mo tratar con los objetos de estado anidados.</target>
        </trans-unit>
        <trans-unit id="d280006e11c722e08ab0ef3901f105ba1f89c495" translate="yes" xml:space="preserve">
          <source>Also, the resulting names are a bit odd. It's generally not a good practice to actually include words like &quot;reducer&quot; in your state key names - the keys should simply reflect the domain or type of data they hold. This means we should either explicitly specify the names of the keys in the slice reducer object to define the keys in the output state object, or carefully rename the variables for the imported slice reducers to set up the keys when using the shorthand object literal syntax.</source>
          <target state="translated">Además,los nombres resultantes son un poco raros.Generalmente no es una buena práctica incluir palabras como &quot;reductor&quot; en los nombres de las claves de su estado-las claves deben simplemente reflejar el dominio o el tipo de datos que contienen.Esto significa que deberíamos especificar explícitamente los nombres de las claves en el objeto reductor de la rebanada para definir las claves en el objeto de estado de salida,o renombrar cuidadosamente las variables para los reductores de rebanada importados para configurar las claves cuando se utiliza la sintaxis literal del objeto abreviado.</target>
        </trans-unit>
        <trans-unit id="a92743996305e4fee546be1bf5a260da6bb485c9" translate="yes" xml:space="preserve">
          <source>Also, while &lt;code&gt;combineReducers&lt;/code&gt; is the one reducer utility function that's built into Redux, there's a wide variety of third-party reducer utilities that have published for reuse. The &lt;a href=&quot;https://github.com/markerikson/redux-ecosystem-links&quot;&gt;Redux Addons Catalog&lt;/a&gt; lists many of the third-party utilities that are available. Or, if none of the published utilities solve your use case, you can always write a function yourself that does just exactly what you need.</source>
          <target state="translated">Adem&amp;aacute;s, aunque &lt;code&gt;combineReducers&lt;/code&gt; es la &amp;uacute;nica funci&amp;oacute;n de utilidad reductora que est&amp;aacute; integrada en Redux, existe una amplia variedad de utilidades reductoras de terceros que se han publicado para su reutilizaci&amp;oacute;n. El &lt;a href=&quot;https://github.com/markerikson/redux-ecosystem-links&quot;&gt;cat&amp;aacute;logo de complementos de Redux&lt;/a&gt; enumera muchas de las utilidades de terceros que est&amp;aacute;n disponibles. O, si ninguna de las utilidades publicadas resuelve su caso de uso, siempre puede escribir una funci&amp;oacute;n que haga exactamente lo que necesita.</target>
        </trans-unit>
        <trans-unit id="cf8b3627c269aa139cc46adb58b39f1f40a3959a" translate="yes" xml:space="preserve">
          <source>Alternatively, you can create a &lt;strong&gt;bound action creator&lt;/strong&gt; that automatically dispatches:</source>
          <target state="translated">Alternativamente, puede crear un &lt;strong&gt;creador de acciones vinculadas&lt;/strong&gt; que distribuya autom&amp;aacute;ticamente:</target>
        </trans-unit>
        <trans-unit id="6d168d8850f955b7e9e3d0a064ebea1d8ecaae72" translate="yes" xml:space="preserve">
          <source>Although powerful, Immutable.JS needs to be used carefully, as it comes with issues of its own. Note, however, that all of these issues can be overcome quite easily with careful coding.</source>
          <target state="translated">Aunque es poderoso,Immutable.JS necesita ser usado cuidadosamente,ya que viene con sus propios problemas.Tenga en cuenta,sin embargo,que todas estas cuestiones pueden ser superadas muy fácilmente con una cuidadosa codificación.</target>
        </trans-unit>
        <trans-unit id="4d209720249965a438eaa6d74c36ac6d53a3230a" translate="yes" xml:space="preserve">
          <source>Although the final result in this example is noticeably longer than the original version, this is primarily due to the extraction of the utility functions, the addition of comments, and some deliberate verbosity for the sake of clarity, such as separate return statements. Looking at each function individually, the amount of responsibility is now smaller, and the intent is hopefully clearer. Also, in a real application, these functions would probably then be split into separate files such as &lt;code&gt;reducerUtilities.js&lt;/code&gt;, &lt;code&gt;visibilityReducer.js&lt;/code&gt;, &lt;code&gt;todosReducer.js&lt;/code&gt;, and &lt;code&gt;rootReducer.js&lt;/code&gt;.</source>
          <target state="translated">Aunque el resultado final de este ejemplo es notablemente m&amp;aacute;s largo que la versi&amp;oacute;n original, esto se debe principalmente a la extracci&amp;oacute;n de las funciones de utilidad, la adici&amp;oacute;n de comentarios y cierta verbosidad deliberada en aras de la claridad, como declaraciones de retorno separadas. Mirando cada funci&amp;oacute;n individualmente, la cantidad de responsabilidad ahora es menor y la intenci&amp;oacute;n es, con suerte, m&amp;aacute;s clara. Adem&amp;aacute;s, en una aplicaci&amp;oacute;n real, estas funciones probablemente se dividir&amp;iacute;an en archivos separados como &lt;code&gt;reducerUtilities.js&lt;/code&gt; , &lt;code&gt;visibilityReducer.js&lt;/code&gt; , &lt;code&gt;todosReducer.js&lt;/code&gt; y &lt;code&gt;rootReducer.js&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="11420cf980650fbffa2655206c7e7f0d6f693730" translate="yes" xml:space="preserve">
          <source>Always.</source>
          <target state="translated">Always.</target>
        </trans-unit>
        <trans-unit id="ae42e396c07650791a08d3bbeb56dcf9d4f16480" translate="yes" xml:space="preserve">
          <source>An &lt;a href=&quot;actions&quot;&gt;action&lt;/a&gt; is a plain object describing &lt;em&gt;what happened&lt;/em&gt;. For example:</source>
          <target state="translated">Una &lt;a href=&quot;actions&quot;&gt;acci&amp;oacute;n&lt;/a&gt; es un objeto simple que describe &lt;em&gt;lo que sucedi&amp;oacute;&lt;/em&gt; . Por ejemplo:</target>
        </trans-unit>
        <trans-unit id="e3348883e6b709273b1588a140f0ad640ffa7901" translate="yes" xml:space="preserve">
          <source>An &lt;em&gt;action creator&lt;/em&gt; is, quite simply, a function that creates an action. Do not confuse the two terms&amp;mdash;again, an action is a payload of information, and an action creator is a factory that creates an action.</source>
          <target state="translated">Un &lt;em&gt;creador de acciones&lt;/em&gt; es, simplemente, una funci&amp;oacute;n que crea una acci&amp;oacute;n. No confunda los dos t&amp;eacute;rminos; de nuevo, una acci&amp;oacute;n es una carga &amp;uacute;til de informaci&amp;oacute;n, y un creador de acciones es una f&amp;aacute;brica que crea una acci&amp;oacute;n.</target>
        </trans-unit>
        <trans-unit id="7dbd2dc1e57dbf1a690c626bcf14369d4d0f24ee" translate="yes" xml:space="preserve">
          <source>An &lt;em&gt;action&lt;/em&gt; is a plain object that represents an intention to change the state. Actions are the only way to get data into the store. Any data, whether from UI events, network callbacks, or other sources such as WebSockets needs to eventually be dispatched as actions.</source>
          <target state="translated">Una &lt;em&gt;acci&amp;oacute;n&lt;/em&gt; es un objeto simple que representa la intenci&amp;oacute;n de cambiar el estado. Las acciones son la &amp;uacute;nica forma de introducir datos en la tienda. Cualquier dato, ya sea de eventos de IU, devoluciones de llamada de red u otras fuentes como WebSockets, debe enviarse eventualmente como acciones.</target>
        </trans-unit>
        <trans-unit id="5753c579ec0c6f7a4e01deb683ed860b056f3db7" translate="yes" xml:space="preserve">
          <source>An &lt;em&gt;async action&lt;/em&gt; is a value that is sent to a dispatching function, but is not yet ready for consumption by the reducer. It will be transformed by &lt;a href=&quot;#middleware&quot;&gt;middleware&lt;/a&gt; into an action (or a series of actions) before being sent to the base &lt;a href=&quot;api/store#dispatch&quot;&gt;&lt;code&gt;dispatch()&lt;/code&gt;&lt;/a&gt; function. Async actions may have different types, depending on the middleware you use. They are often asynchronous primitives, like a Promise or a thunk, which are not passed to the reducer immediately, but trigger action dispatches once an operation has completed.</source>
          <target state="translated">Una &lt;em&gt;acci&amp;oacute;n asincr&amp;oacute;nica&lt;/em&gt; es un valor que se env&amp;iacute;a a una funci&amp;oacute;n de despacho, pero que a&amp;uacute;n no est&amp;aacute; listo para ser consumido por el reductor. El &lt;a href=&quot;#middleware&quot;&gt;middleware lo&lt;/a&gt; transformar&amp;aacute; en una acci&amp;oacute;n (o una serie de acciones) antes de enviarse a la funci&amp;oacute;n &lt;a href=&quot;api/store#dispatch&quot;&gt; &lt;code&gt;dispatch()&lt;/code&gt; &lt;/a&gt; base . Las acciones asincr&amp;oacute;nicas pueden tener diferentes tipos, seg&amp;uacute;n el middleware que utilice. A menudo son primitivas asincr&amp;oacute;nicas, como una Promise o un procesador, que no se pasan al reductor de inmediato, pero activan despachos de acci&amp;oacute;n una vez que se ha completado una operaci&amp;oacute;n.</target>
        </trans-unit>
        <trans-unit id="7059ea52b9fe7cd64e9c1eb12fbae0e27f1fbf10" translate="yes" xml:space="preserve">
          <source>An Introduction to Reasonably Pure Functional Programming</source>
          <target state="translated">Una introducción a la programación funcional razonablemente pura</target>
        </trans-unit>
        <trans-unit id="027aa8fd687cde00ad56b360989176d53d8f5088" translate="yes" xml:space="preserve">
          <source>An alternative approach is to use the &lt;a href=&quot;https://github.com/sebmarkbage/ecmascript-rest-spread&quot;&gt;object spread syntax&lt;/a&gt; proposed for the next versions of JavaScript which lets you use the spread (&lt;code&gt;...&lt;/code&gt;) operator to copy enumerable properties from one object to another in a more succinct way. The object spread operator is conceptually similar to the ES6 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_operator&quot;&gt;array spread operator&lt;/a&gt;. We can simplify the &lt;code&gt;todoApp&lt;/code&gt; example above by using the object spread syntax:</source>
          <target state="translated">Un enfoque alternativo es utilizar la &lt;a href=&quot;https://github.com/sebmarkbage/ecmascript-rest-spread&quot;&gt;sintaxis de extensi&amp;oacute;n de objetos&lt;/a&gt; propuesta para las pr&amp;oacute;ximas versiones de JavaScript, que le permite usar el operador de extensi&amp;oacute;n ( &lt;code&gt;...&lt;/code&gt; ) para copiar propiedades enumerables de un objeto a otro de una manera m&amp;aacute;s sucinta. El operador de extensi&amp;oacute;n de objetos es conceptualmente similar al &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_operator&quot;&gt;operador de extensi&amp;oacute;n de matriz&lt;/a&gt; ES6 . Podemos simplificar el ejemplo de &lt;code&gt;todoApp&lt;/code&gt; anterior usando la sintaxis de propagaci&amp;oacute;n de objetos:</target>
        </trans-unit>
        <trans-unit id="9140efa7e4fd077860c74984e025f41073161a33" translate="yes" xml:space="preserve">
          <source>An example of a normalized state structure for the blog example above might look like:</source>
          <target state="translated">Un ejemplo de una estructura estatal normalizada para el ejemplo del blog de arriba podría parecer:</target>
        </trans-unit>
        <trans-unit id="2f5f4aca90e751fb4943bf0f75cdcb58b3045de7" translate="yes" xml:space="preserve">
          <source>And further yet:</source>
          <target state="translated">Y aún más lejos:</target>
        </trans-unit>
        <trans-unit id="042ece2a59b966fa0a3746efb8c09215e767bd18" translate="yes" xml:space="preserve">
          <source>And if you need both:</source>
          <target state="translated">Y si necesitas ambas cosas:</target>
        </trans-unit>
        <trans-unit id="b9796d47a0c430111a17f97990051bc1f0bd25b7" translate="yes" xml:space="preserve">
          <source>And many, many more! The Redux Addons Catalog has &lt;strong&gt;&lt;a href=&quot;https://github.com/markerikson/redux-ecosystem-links/blob/master/apps-and-examples.md&quot;&gt;a list of Redux-based applications and examples&lt;/a&gt;&lt;/strong&gt; that points to a variety of actual applications, large and small.</source>
          <target state="translated">&amp;iexcl;Y muchos muchos mas! El cat&amp;aacute;logo de complementos de Redux tiene &lt;strong&gt;&lt;a href=&quot;https://github.com/markerikson/redux-ecosystem-links/blob/master/apps-and-examples.md&quot;&gt;una lista de aplicaciones basadas en Redux y ejemplos&lt;/a&gt;&lt;/strong&gt; que apuntan a una variedad de aplicaciones reales, grandes y peque&amp;ntilde;as.</target>
        </trans-unit>
        <trans-unit id="38147ba676724ae6f61a0d7f338d7350e8929314" translate="yes" xml:space="preserve">
          <source>And that's it! That is all we need to do to implement server side rendering.</source>
          <target state="translated">¡Y eso es todo! Eso es todo lo que necesitamos hacer para implementar el renderizado del lado del servidor.</target>
        </trans-unit>
        <trans-unit id="0f36f5dbc061dc0b41ff32b3fcf5454dd4737242" translate="yes" xml:space="preserve">
          <source>And this is how you would use it in your Smart Component:</source>
          <target state="translated">Y así es como lo usarías en tu Componente Inteligente:</target>
        </trans-unit>
        <trans-unit id="7821f53eb6540ced1a441c7c8a5afc57915f7472" translate="yes" xml:space="preserve">
          <source>And we write another reducer that manages the complete state of our app by calling those two reducers for the corresponding state keys:</source>
          <target state="translated">Y escribimos otro reductor que gestiona el estado completo de nuestra aplicación llamando a esos dos reductores para las correspondientes claves de estado:</target>
        </trans-unit>
        <trans-unit id="035d8336ff091d8317b65369c8f7a5fba5c1e1a6" translate="yes" xml:space="preserve">
          <source>Andr&amp;eacute; Staltz, creator of Cycle</source>
          <target state="translated">Andr&amp;eacute; Staltz, creador de Cycle</target>
        </trans-unit>
        <trans-unit id="e87d12fc4df56487f9cea8c793885037c6bb50fc" translate="yes" xml:space="preserve">
          <source>Angular 2 &amp;mdash; Introduction to Redux</source>
          <target state="translated">Angular 2 - Introducci&amp;oacute;n a Redux</target>
        </trans-unit>
        <trans-unit id="bc3e9743695c2147abea82ed6210c9b8769e1aff" translate="yes" xml:space="preserve">
          <source>Another alternative to the &quot;shared-slice updates&quot; issue would be to simply put more data into the action. This is easily accomplished using thunk functions or a similar approach, per this example:</source>
          <target state="translated">Otra alternativa a la cuestión de las &quot;actualizaciones de los cortes compartidos&quot; sería simplemente poner más datos en acción.Esto se logra fácilmente utilizando las funciones thunk o un enfoque similar,según este ejemplo:</target>
        </trans-unit>
        <trans-unit id="54508f8783d239a03fbfc708d7eb0721cdb09e88" translate="yes" xml:space="preserve">
          <source>Another common version of this error looks like this:</source>
          <target state="translated">Otra versión común de este error se ve así:</target>
        </trans-unit>
        <trans-unit id="ab7d294fca6f772f407a0c0a76df3b9678dec13a" translate="yes" xml:space="preserve">
          <source>Another important difference from Flux is that &lt;strong&gt;Redux assumes you never mutate your data&lt;/strong&gt;. You can use plain objects and arrays for your state just fine, but mutating them inside the reducers is strongly discouraged. You should always return a new object, which is easy with the &lt;a href=&quot;../recipes/usingobjectspreadoperator&quot;&gt;object spread operator proposal&lt;/a&gt;, or with a library like &lt;a href=&quot;https://facebook.github.io/immutable-js&quot;&gt;Immutable&lt;/a&gt;.</source>
          <target state="translated">Otra diferencia importante con Flux es que &lt;strong&gt;Redux asume que nunca mutas tus datos&lt;/strong&gt; . Puede usar objetos simples y matrices para su estado sin problemas, pero no se recomienda mutarlos dentro de los reductores. Siempre debe devolver un nuevo objeto, lo cual es f&amp;aacute;cil con la &lt;a href=&quot;../recipes/usingobjectspreadoperator&quot;&gt;propuesta del operador de extensi&amp;oacute;n de objetos&lt;/a&gt; o con una biblioteca como &lt;a href=&quot;https://facebook.github.io/immutable-js&quot;&gt;Immutable&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="327dd80631e264f16ad2cae2c1d1c364a6353cd0" translate="yes" xml:space="preserve">
          <source>Another variation on this is to use Redux-ORM as an abstraction layer within a single case reducer:</source>
          <target state="translated">Otra variación de esto es utilizar el Redux-ORM como una capa de abstracción dentro de un reductor de caso único:</target>
        </trans-unit>
        <trans-unit id="6dca810c72389e39d7ae3adc87f949b161cb67aa" translate="yes" xml:space="preserve">
          <source>Any meaningful web app needs to execute complex logic, usually including asynchronous work such as making AJAX requests. That code is no longer purely a function of its inputs, and the interactions with the outside world are known as &lt;a href=&quot;https://en.wikipedia.org/wiki/Side_effect_%28computer_science%29&quot;&gt;&amp;ldquo;side effects&amp;rdquo;&lt;/a&gt;</source>
          <target state="translated">Cualquier aplicaci&amp;oacute;n web significativa necesita ejecutar una l&amp;oacute;gica compleja, que generalmente incluye trabajo asincr&amp;oacute;nico, como realizar solicitudes AJAX. Ese c&amp;oacute;digo ya no es simplemente una funci&amp;oacute;n de sus entradas, y las interacciones con el mundo exterior se conocen como &lt;a href=&quot;https://en.wikipedia.org/wiki/Side_effect_%28computer_science%29&quot;&gt;&quot;efectos secundarios&quot;.&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="17a95b9c7d131a13dd7681ee829c7309078b3577" translate="yes" xml:space="preserve">
          <source>Any reducer passed to &lt;code&gt;combineReducers&lt;/code&gt; must satisfy these rules:</source>
          <target state="translated">Cualquier reductor que se pase a &lt;code&gt;combineReducers&lt;/code&gt; debe cumplir estas reglas:</target>
        </trans-unit>
        <trans-unit id="6fdbb15360b3088d82f5dfe1a14a15d468cb58cd" translate="yes" xml:space="preserve">
          <source>Any references to individual items should be done by storing the item's ID.</source>
          <target state="translated">Cualquier referencia a artículos individuales debe hacerse almacenando la identificación del artículo.</target>
        </trans-unit>
        <trans-unit id="206a7715eef6f00c93aebc49d2e9182d87517249" translate="yes" xml:space="preserve">
          <source>Apollo Client: GraphQL with React and Redux</source>
          <target state="translated">Cliente de Apolo:GraphQL con React y Redux</target>
        </trans-unit>
        <trans-unit id="9005318bff4ea7c0d752cddae4ff458b6e1a0913" translate="yes" xml:space="preserve">
          <source>Are there any larger, &amp;ldquo;real&amp;rdquo; Redux projects?</source>
          <target state="translated">&amp;iquest;Hay proyectos Redux m&amp;aacute;s grandes y &quot;reales&quot;?</target>
        </trans-unit>
        <trans-unit id="cc44e7f8ef0dbd0f0399aed6b078549d32a1bc08" translate="yes" xml:space="preserve">
          <source>Are written</source>
          <target state="translated">Se escriben</target>
        </trans-unit>
        <trans-unit id="cbb9fa252e60809efa55a7ad83aea5438ef56753" translate="yes" xml:space="preserve">
          <source>Arguments</source>
          <target state="translated">Arguments</target>
        </trans-unit>
        <trans-unit id="49daae7bc3193b4ffbf057d1ce571f648d334335" translate="yes" xml:space="preserve">
          <source>Arrays of IDs should be used to indicate ordering.</source>
          <target state="translated">Se deben utilizar conjuntos de identificaciones para indicar el pedido.</target>
        </trans-unit>
        <trans-unit id="678560a52b48d8df9cc01483f2c09d287f1730ed" translate="yes" xml:space="preserve">
          <source>As an application grows, common patterns in reducer logic will start to emerge. You may find several parts of your reducer logic doing the same kinds of work for different types of data, and want to reduce duplication by reusing the same common logic for each data type. Or, you may want to have multiple &quot;instances&quot; of a certain type of data being handled in the store. However, the global structure of a Redux store comes with some trade-offs: it makes it easy to track the overall state of an application, but can also make it harder to &quot;target&quot; actions that need to update a specific piece of state, particularly if you are using &lt;code&gt;combineReducers&lt;/code&gt;.</source>
          <target state="translated">A medida que una aplicaci&amp;oacute;n crece, comenzar&amp;aacute;n a surgir patrones comunes en la l&amp;oacute;gica del reductor. Puede encontrar que varias partes de la l&amp;oacute;gica de su reductor realizan el mismo tipo de trabajo para diferentes tipos de datos y desea reducir la duplicaci&amp;oacute;n reutilizando la misma l&amp;oacute;gica com&amp;uacute;n para cada tipo de datos. O quiz&amp;aacute;s desee tener m&amp;uacute;ltiples &quot;instancias&quot; de cierto tipo de datos que se manejan en la tienda. Sin embargo, la estructura global de una tienda Redux viene con algunas compensaciones: facilita el seguimiento del estado general de una aplicaci&amp;oacute;n, pero tambi&amp;eacute;n puede hacer que sea m&amp;aacute;s dif&amp;iacute;cil &quot;apuntar&quot; a las acciones que necesitan actualizar una parte espec&amp;iacute;fica del estado, particularmente si est&amp;aacute; utilizando &lt;code&gt;combineReducers&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="7b8dfe1588c786f88cd39b5e2f752576b7bb0f10" translate="yes" xml:space="preserve">
          <source>As an example, let's say that we want to track multiple counters in our application, named A, B, and C. We define our initial &lt;code&gt;counter&lt;/code&gt; reducer, and we use &lt;code&gt;combineReducers&lt;/code&gt; to set up our state:</source>
          <target state="translated">Como ejemplo, digamos que queremos rastrear m&amp;uacute;ltiples contadores en nuestra aplicaci&amp;oacute;n, llamados A, B y C. Definimos nuestro &lt;code&gt;counter&lt;/code&gt; reductor inicial , y usamos &lt;code&gt;combineReducers&lt;/code&gt; para configurar nuestro estado:</target>
        </trans-unit>
        <trans-unit id="709fd50216cd72e5e5a781b80b45c62c308c61de" translate="yes" xml:space="preserve">
          <source>As defined in &lt;a href=&quot;splittingreducerlogic&quot;&gt;Splitting Reducer Logic&lt;/a&gt;, a &lt;em&gt;higher-order reducer&lt;/em&gt; is a function that takes a reducer function as an argument, and/or returns a new reducer function as a result. It can also be viewed as a &quot;reducer factory&quot;. &lt;code&gt;combineReducers&lt;/code&gt; is one example of a higher-order reducer. We can use this pattern to create specialized versions of our own reducer functions, with each version only responding to specific actions.</source>
          <target state="translated">Como se define en &lt;a href=&quot;splittingreducerlogic&quot;&gt;Splitting Reducer Logic&lt;/a&gt; , un &lt;em&gt;reductor de orden superior&lt;/em&gt; es una funci&amp;oacute;n que toma una funci&amp;oacute;n reductora como argumento y / o devuelve una nueva funci&amp;oacute;n reductora como resultado. Tambi&amp;eacute;n puede verse como una &quot;f&amp;aacute;brica de reductores&quot;. &lt;code&gt;combineReducers&lt;/code&gt; es un ejemplo de reductor de orden superior. Podemos usar este patr&amp;oacute;n para crear versiones especializadas de nuestras propias funciones reductoras, y cada versi&amp;oacute;n solo responde a acciones espec&amp;iacute;ficas.</target>
        </trans-unit>
        <trans-unit id="fef475fd072b3bead2a85a3d7e365ffb13bfaca5" translate="yes" xml:space="preserve">
          <source>As described in &lt;a href=&quot;../../basics/reducers&quot;&gt;Reducers&lt;/a&gt;, a Redux reducer function:</source>
          <target state="translated">Como se describe en &lt;a href=&quot;../../basics/reducers&quot;&gt;Reductores&lt;/a&gt; , una funci&amp;oacute;n de reductor de Redux:</target>
        </trans-unit>
        <trans-unit id="ef35726a994739e304113b383deb26575f5ff1ba" translate="yes" xml:space="preserve">
          <source>As for architecture, anecdotal evidence is that Redux works well for varying project and team sizes. Redux is currently used by hundreds of companies and thousands of developers, with several hundred thousand monthly installations from NPM. One developer reported:</source>
          <target state="translated">En cuanto a la arquitectura,la evidencia anecdótica es que Redux funciona bien para proyectos y equipos de diferentes tamaños.Redux es usado actualmente por cientos de compañías y miles de desarrolladores,con varios cientos de miles de instalaciones mensuales de NPM.Un desarrollador informó:</target>
        </trans-unit>
        <trans-unit id="e814716838438ec84d1615becea35368a2e66458" translate="yes" xml:space="preserve">
          <source>As if this wasn't bad enough, consider the &lt;strong&gt;new requirements becoming common in front-end product development&lt;/strong&gt;. As developers, we are expected to handle optimistic updates, server-side rendering, fetching data before performing route transitions, and so on. We find ourselves trying to manage a complexity that we have never had to deal with before, and we inevitably ask the question: &lt;a href=&quot;http://www.quirksmode.org/blog/archives/2015/07/stop_pushing_th.html&quot;&gt;is it time to give up?&lt;/a&gt; The answer is &lt;em&gt;no&lt;/em&gt;.</source>
          <target state="translated">Como si esto no fuera lo suficientemente malo, considere que los &lt;strong&gt;nuevos requisitos se vuelven comunes en el desarrollo de productos front-end&lt;/strong&gt; . Como desarrolladores, se espera que manejemos actualizaciones optimistas, renderizaci&amp;oacute;n del lado del servidor, obtenci&amp;oacute;n de datos antes de realizar transiciones de ruta, etc. Nos encontramos tratando de manejar una complejidad con la que nunca antes hab&amp;iacute;amos tenido que lidiar, e inevitablemente nos hacemos la pregunta: &amp;iquest; &lt;a href=&quot;http://www.quirksmode.org/blog/archives/2015/07/stop_pushing_th.html&quot;&gt;es hora de rendirse?&lt;/a&gt; La respuesta es &lt;em&gt;no&lt;/em&gt; .</target>
        </trans-unit>
        <trans-unit id="fbb977642e09fe68de908d000ae815bd23c6664f" translate="yes" xml:space="preserve">
          <source>As it continues through the iterations, &lt;code&gt;combineReducers&lt;/code&gt; will construct a new state object with the state slices returned from each reducer. This new state object may or may not be different from the current state object. It is here that &lt;code&gt;combineReducers&lt;/code&gt; uses shallow equality checking to determine whether the state has changed.</source>
          <target state="translated">A medida que contin&amp;uacute;a a trav&amp;eacute;s de las iteraciones, &lt;code&gt;combineReducers&lt;/code&gt; construir&amp;aacute; un nuevo objeto de estado con los cortes de estado devueltos por cada reductor. Este nuevo objeto de estado puede o no ser diferente del objeto de estado actual. Es aqu&amp;iacute; donde &lt;code&gt;combineReducers&lt;/code&gt; utiliza la verificaci&amp;oacute;n de igualdad superficial para determinar si el estado ha cambiado.</target>
        </trans-unit>
        <trans-unit id="c31c6475cbfd62456b208b3c6e1e67d8fcfdab31" translate="yes" xml:space="preserve">
          <source>As it turns out, there's a useful utility called &lt;a href=&quot;https://github.com/acdlite/reduce-reducers&quot;&gt;reduce-reducers&lt;/a&gt; that can make that process easier. It simply takes multiple reducers and runs &lt;code&gt;reduce()&lt;/code&gt; on them, passing the intermediate state values to the next reducer in line:</source>
          <target state="translated">Resulta que existe una utilidad &amp;uacute;til llamada &lt;a href=&quot;https://github.com/acdlite/reduce-reducers&quot;&gt;reductores-reductores&lt;/a&gt; que puede facilitar ese proceso. Simplemente toma varios reductores y ejecuta &lt;code&gt;reduce()&lt;/code&gt; en ellos, pasando los valores del estado intermedio al siguiente reductor en l&amp;iacute;nea:</target>
        </trans-unit>
        <trans-unit id="7abf8ce0941afdd199232022cabbf076e6057848" translate="yes" xml:space="preserve">
          <source>As mentioned in &lt;a href=&quot;normalizingstateshape&quot;&gt;Normalizing State Shape&lt;/a&gt;, the Normalizr library is frequently used to transform nested response data into a normalized shape suitable for integration into the store. However, that doesn't address the issue of executing further updates to that normalized data as it's being used elsewhere in the application. There are a variety of different approaches that you can use, based on your own preference. We'll use the example of adding a new Comment to a Post.</source>
          <target state="translated">Como se menciona en &lt;a href=&quot;normalizingstateshape&quot;&gt;Normalizing State Shape&lt;/a&gt; , la biblioteca Normalizr se usa con frecuencia para transformar datos de respuesta anidados en una forma normalizada adecuada para la integraci&amp;oacute;n en la tienda. Sin embargo, eso no aborda el problema de ejecutar m&amp;aacute;s actualizaciones de los datos normalizados, ya que se utilizan en otras partes de la aplicaci&amp;oacute;n. Hay una variedad de enfoques diferentes que puede utilizar, seg&amp;uacute;n sus preferencias. Usaremos el ejemplo de agregar un nuevo comentario a una publicaci&amp;oacute;n.</target>
        </trans-unit>
        <trans-unit id="e4b60f1e31e4c57161fb7758305113397c7a5c3a" translate="yes" xml:space="preserve">
          <source>As our last step, we can now use Redux's built-in &lt;code&gt;combineReducers&lt;/code&gt; utility to handle the &quot;slice-of-state&quot; logic for our top-level app reducer. Here's the final result:</source>
          <target state="translated">Como &amp;uacute;ltimo paso, ahora podemos usar la utilidad &lt;code&gt;combineReducers&lt;/code&gt; incorporada de Redux para manejar la l&amp;oacute;gica de &quot;corte de estado&quot; para nuestro reductor de aplicaciones de nivel superior. Aqu&amp;iacute; est&amp;aacute; el resultado final:</target>
        </trans-unit>
        <trans-unit id="dc4496173ef998c4da8d0db366e9bb7a00db7fcd" translate="yes" xml:space="preserve">
          <source>As such, a shallow equality check of the props object returned from repeated calls to &lt;code&gt;mapStateToProps&lt;/code&gt; would always fail, as a new object would be returned each time.</source>
          <target state="translated">Como tal, una verificaci&amp;oacute;n de igualdad superficial del objeto props devuelto por llamadas repetidas a &lt;code&gt;mapStateToProps&lt;/code&gt; siempre fallar&amp;iacute;a, ya que se devolver&amp;iacute;a un nuevo objeto cada vez.</target>
        </trans-unit>
        <trans-unit id="1cf23dc07f110dd0af0f0a020f2623e1f59b9566" translate="yes" xml:space="preserve">
          <source>As such, even though the values of that new object have not changed, the wrapped component will always be re-rendered,</source>
          <target state="translated">Por lo tanto,aunque los valores de ese nuevo objeto no hayan cambiado,el componente envuelto siempre se volverá a renderizar,</target>
        </trans-unit>
        <trans-unit id="a041a5b277767ea9c2a31b986eec75aca67d859c" translate="yes" xml:space="preserve">
          <source>As the requirements for JavaScript single-page applications have become increasingly complicated, &lt;strong&gt;our code must manage more state than ever before&lt;/strong&gt;. This state can include server responses and cached data, as well as locally created data that has not yet been persisted to the server. UI state is also increasing in complexity, as we need to manage active routes, selected tabs, spinners, pagination controls, and so on.</source>
          <target state="translated">Dado que los requisitos para las aplicaciones de una sola p&amp;aacute;gina de JavaScript se han vuelto cada vez m&amp;aacute;s complicados, &lt;strong&gt;nuestro c&amp;oacute;digo debe gestionar m&amp;aacute;s estados que nunca&lt;/strong&gt; . Este estado puede incluir respuestas del servidor y datos almacenados en cach&amp;eacute;, as&amp;iacute; como datos creados localmente que a&amp;uacute;n no se han conservado en el servidor. El estado de la interfaz de usuario tambi&amp;eacute;n est&amp;aacute; aumentando en complejidad, ya que necesitamos administrar rutas activas, pesta&amp;ntilde;as seleccionadas, controles giratorios, controles de paginaci&amp;oacute;n, etc.</target>
        </trans-unit>
        <trans-unit id="a14d76fefd06040ae416dab582f026209ce57474" translate="yes" xml:space="preserve">
          <source>As we&amp;rsquo;ve seen, the values in the mutable object returned by the selector function may have changed, but the object itself has not, and shallow equality checking only compares the objects themselves, not their values.</source>
          <target state="translated">Como hemos visto, los valores en el objeto mutable devuelto por la funci&amp;oacute;n de selector pueden haber cambiado, pero el objeto en s&amp;iacute; no lo ha hecho, y la verificaci&amp;oacute;n de igualdad superficial solo compara los objetos en s&amp;iacute;, no sus valores.</target>
        </trans-unit>
        <trans-unit id="81dc352109a60e2a91dd724ab47b76ebe7decc71" translate="yes" xml:space="preserve">
          <source>As with several other questions, it is &lt;em&gt;possible&lt;/em&gt; to create multiple distinct Redux stores in a page, but the intended pattern is to have only a single store. Having a single store enables using the Redux DevTools, makes persisting and rehydrating data simpler, and simplifies the subscription logic.</source>
          <target state="translated">Al igual que con otras preguntas, es &lt;em&gt;posible&lt;/em&gt; crear varias tiendas Redux distintas en una p&amp;aacute;gina, pero el patr&amp;oacute;n previsto es tener una sola tienda. Tener una sola tienda permite usar Redux DevTools, simplifica la persistencia y rehidrataci&amp;oacute;n de datos y simplifica la l&amp;oacute;gica de suscripci&amp;oacute;n.</target>
        </trans-unit>
        <trans-unit id="c02308c61548a99934707da188eb85ef748a5cb4" translate="yes" xml:space="preserve">
          <source>As with state, serializable actions enable several of Redux's defining features, such as time travel debugging, and recording and replaying actions. Using something like a &lt;code&gt;Symbol&lt;/code&gt; for the &lt;code&gt;type&lt;/code&gt; value or using &lt;code&gt;instanceof&lt;/code&gt; checks for actions themselves would break that. Strings are serializable and easily self-descriptive, and so are a better choice. Note that it &lt;em&gt;is&lt;/em&gt; okay to use Symbols, Promises, or other non-serializable values in an action if the action is intended for use by middleware. Actions only need to be serializable by the time they actually reach the store and are passed to the reducers.</source>
          <target state="translated">Al igual que con el estado, las acciones serializables habilitan varias de las caracter&amp;iacute;sticas definitorias de Redux, como la depuraci&amp;oacute;n de viajes en el tiempo y las acciones de grabaci&amp;oacute;n y reproducci&amp;oacute;n. El uso de algo como un &lt;code&gt;Symbol&lt;/code&gt; para el valor de &lt;code&gt;type&lt;/code&gt; o el uso de verificaciones de &lt;code&gt;instanceof&lt;/code&gt; de las acciones mismas romper&amp;iacute;a eso. Las cadenas son serializables y f&amp;aacute;cilmente autodescriptivas, por lo que son una mejor opci&amp;oacute;n. Tenga en cuenta que &lt;em&gt;est&amp;aacute;&lt;/em&gt; bien utilizar s&amp;iacute;mbolos, promesas u otros valores no serializables en una acci&amp;oacute;n si la acci&amp;oacute;n est&amp;aacute; destinada a ser utilizada por middleware. Las acciones solo necesitan ser serializables cuando llegan a la tienda y se pasan a los reductores.</target>
        </trans-unit>
        <trans-unit id="25d90438423a5d564145ee745315cbd04ef8f5d9" translate="yes" xml:space="preserve">
          <source>As you rewrite your Stores, you will find that you need to avoid certain Flux anti-patterns such as fetching API inside the Store, or triggering actions inside the Stores. Your Flux code will be easier to follow once you port it to be based on reducers!</source>
          <target state="translated">A medida que reescribas tus Tiendas,encontrarás que necesitas evitar ciertos anti-patrones de Flujo como buscar API dentro de la Tienda,o activar acciones dentro de las Tiendas.Tu código Flux será más fácil de seguir una vez que lo portes para que esté basado en reductores!</target>
        </trans-unit>
        <trans-unit id="42a2c484c73d6daa09647c6197ccf515d0e0786e" translate="yes" xml:space="preserve">
          <source>As your app grows more complex, you'll want to split your &lt;a href=&quot;../glossary#reducer&quot;&gt;reducing function&lt;/a&gt; into separate functions, each managing independent parts of the &lt;a href=&quot;../glossary#state&quot;&gt;state&lt;/a&gt;.</source>
          <target state="translated">A medida que su aplicaci&amp;oacute;n se vuelve m&amp;aacute;s compleja, querr&amp;aacute; dividir su &lt;a href=&quot;../glossary#reducer&quot;&gt;funci&amp;oacute;n de reducci&amp;oacute;n&lt;/a&gt; en funciones separadas, cada una de las cuales administra partes independientes del &lt;a href=&quot;../glossary#state&quot;&gt;estado&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="1fd106e930c11279161d9a1b900a24c1a6698ab8" translate="yes" xml:space="preserve">
          <source>As your app grows more complex, you'll want to split your &lt;a href=&quot;https://redux.js.org/understanding/thinking-in-redux/glossary#reducer&quot;&gt;reducing function&lt;/a&gt; into separate functions, each managing independent parts of the &lt;a href=&quot;https://redux.js.org/understanding/thinking-in-redux/glossary#state&quot;&gt;state&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1cff388be99f52b685be17cb7f6b80f2a1084bc0" translate="yes" xml:space="preserve">
          <source>Ask around on the &lt;strong&gt;#redux&lt;/strong&gt;&lt;a href=&quot;http://reactiflux.com/&quot;&gt;Reactiflux&lt;/a&gt; Discord channel, or &lt;a href=&quot;https://github.com/reactjs/redux/issues&quot;&gt;create an issue&lt;/a&gt;.</source>
          <target state="translated">Pregunte en el canal &lt;strong&gt;#redux &lt;/strong&gt;&lt;a href=&quot;http://reactiflux.com/&quot;&gt;Reactiflux&lt;/a&gt; Discord o &lt;a href=&quot;https://github.com/reactjs/redux/issues&quot;&gt;cree un problema&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="cd90ea9965306b973ad750889f0a4b9e3769518a" translate="yes" xml:space="preserve">
          <source>Associating items in relationships</source>
          <target state="translated">Asociar elementos en las relaciones</target>
        </trans-unit>
        <trans-unit id="f243e92a1117cab31114a44424d26658eeb2d079" translate="yes" xml:space="preserve">
          <source>Assuming actual changes need to occur, it needs to create new objects and arrays with the updated data and return those</source>
          <target state="translated">Asumiendo que los cambios reales deben ocurrir,necesita crear nuevos objetos y matrices con los datos actualizados y devolver aquellos</target>
        </trans-unit>
        <trans-unit id="db37f55867798c63094a75db06886660e91436bf" translate="yes" xml:space="preserve">
          <source>Async</source>
          <target state="translated">Async</target>
        </trans-unit>
        <trans-unit id="90722b7f9d2e813acdd905ce6a728ce981a33ec4" translate="yes" xml:space="preserve">
          <source>Async Action</source>
          <target state="translated">Acción de sincronización</target>
        </trans-unit>
        <trans-unit id="167b050aac66ff4723e2e1e409f28704074758c3" translate="yes" xml:space="preserve">
          <source>Async Action Creators</source>
          <target state="translated">Async Action Creators</target>
        </trans-unit>
        <trans-unit id="91eebc38df11fd82beeb837efd263578c88fd532" translate="yes" xml:space="preserve">
          <source>Async Actions</source>
          <target state="translated">Acciones de sincronización</target>
        </trans-unit>
        <trans-unit id="27f1c859609130246bfcce156061b4ffce4ac287" translate="yes" xml:space="preserve">
          <source>Async Flow</source>
          <target state="translated">Flujo de sincronización</target>
        </trans-unit>
        <trans-unit id="19c040239385214a8e17389f47ba7d20d7ef489c" translate="yes" xml:space="preserve">
          <source>Async State Fetching</source>
          <target state="translated">Async State Fetching</target>
        </trans-unit>
        <trans-unit id="886ac17e24bc12f98154c913a55fad29ab13e686" translate="yes" xml:space="preserve">
          <source>Async action creators are especially convenient for server rendering. You can create a store, dispatch a single async action creator that dispatches other async action creators to fetch data for a whole section of your app, and only render after the Promise it returns, completes. Then your store will already be hydrated with the state you need before rendering.</source>
          <target state="translated">Los creadores de acción de Async son especialmente convenientes para el renderizado de servidores.Puedes crear un almacén,enviar un único creador de acciones de sincronización que envíe a otros creadores de acciones de sincronización a buscar datos para toda una sección de tu aplicación,y sólo se renderizará cuando la Promesa de que vuelva,se complete.Entonces tu tienda ya estará hidratada con el estado que necesitas antes de renderizar.</target>
        </trans-unit>
        <trans-unit id="b1b1c578f34b8d9eb909781b58a2f94d6f371c68" translate="yes" xml:space="preserve">
          <source>Asynchronous middleware like &lt;a href=&quot;https://github.com/gaearon/redux-thunk&quot;&gt;redux-thunk&lt;/a&gt; or &lt;a href=&quot;https://github.com/acdlite/redux-promise&quot;&gt;redux-promise&lt;/a&gt; wraps the store's &lt;a href=&quot;../api/store#dispatch&quot;&gt;&lt;code&gt;dispatch()&lt;/code&gt;&lt;/a&gt; method and allows you to dispatch something other than actions, for example, functions or Promises. Any middleware you use can then interpret anything you dispatch, and in turn, can pass actions to the next middleware in the chain. For example, a Promise middleware can intercept Promises and dispatch a pair of begin/end actions asynchronously in response to each Promise.</source>
          <target state="translated">El middleware asincr&amp;oacute;nico como &lt;a href=&quot;https://github.com/gaearon/redux-thunk&quot;&gt;redux-thunk&lt;/a&gt; o &lt;a href=&quot;https://github.com/acdlite/redux-promise&quot;&gt;redux-promise&lt;/a&gt; envuelve el m&amp;eacute;todo &lt;a href=&quot;../api/store#dispatch&quot;&gt; &lt;code&gt;dispatch()&lt;/code&gt; &lt;/a&gt; la tienda y le permite enviar algo m&amp;aacute;s que acciones, por ejemplo, funciones o promesas. Cualquier middleware que use puede interpretar cualquier cosa que env&amp;iacute;e y, a su vez, puede pasar acciones al siguiente middleware de la cadena. Por ejemplo, un middleware de Promise puede interceptar Promesas y enviar un par de acciones de inicio / finalizaci&amp;oacute;n de forma as&amp;iacute;ncrona en respuesta a cada Promesa.</target>
        </trans-unit>
        <trans-unit id="2eb0dcef5fba599c316c78c309f567d83281170d" translate="yes" xml:space="preserve">
          <source>At its core, Redux is really a fairly simple design pattern: all your &quot;write&quot; logic goes into a single function, and the only way to run that logic is to give Redux a plain object that describes something that has happened. The Redux store calls that write logic function and passes in the current state tree and the descriptive object, the write logic function returns some new state tree, and the Redux store notifies any subscribers that the state tree has changed.</source>
          <target state="translated">En su núcleo,Redux es realmente un patrón de diseño bastante simple:toda tu lógica de &quot;escritura&quot; va en una sola función,y la única manera de ejecutar esa lógica es dar a Redux un objeto simple que describa algo que ha sucedido.El almacén del Redux llama a esa función lógica de &quot;escritura&quot; y pasa al árbol de estados actual y al objeto descriptivo,la función lógica de &quot;escritura&quot; devuelve algún nuevo árbol de estados,y el almacén del Redux notifica a cualquier suscriptor que el árbol de estados ha cambiado.</target>
        </trans-unit>
        <trans-unit id="30c55c70af3e1a8f861110d1c7eecd86c69c1d55" translate="yes" xml:space="preserve">
          <source>Attempt #1: Logging Manually</source>
          <target state="translated">Intento #1:Registro manual</target>
        </trans-unit>
        <trans-unit id="cf041cf27718908810ead0d2f91d0171d49b9b85" translate="yes" xml:space="preserve">
          <source>Attempt #2: Wrapping Dispatch</source>
          <target state="translated">Intento #2:Envolver el envío</target>
        </trans-unit>
        <trans-unit id="77db9a04efffdb3012b23e3322da962156c4a860" translate="yes" xml:space="preserve">
          <source>Attempt #3: Monkeypatching Dispatch</source>
          <target state="translated">Intento #3:Despacho de monos</target>
        </trans-unit>
        <trans-unit id="2f2148510a51d59cf3a8e564eed4a0c3c1d86f5f" translate="yes" xml:space="preserve">
          <source>Attempt #4: Hiding Monkeypatching</source>
          <target state="translated">Intento #4:Esconder el parche del mono</target>
        </trans-unit>
        <trans-unit id="ca2cc7378629716a29578d9874dd2b25fc5a8c9d" translate="yes" xml:space="preserve">
          <source>Attempt #5: Removing Monkeypatching</source>
          <target state="translated">Intento #5:Eliminar el parche de mono</target>
        </trans-unit>
        <trans-unit id="73546da71df70edaa82a5330e2ce70fd8845ff54" translate="yes" xml:space="preserve">
          <source>Attempt #6: Na&amp;iuml;vely Applying the Middleware</source>
          <target state="translated">Intento # 6: Aplicaci&amp;oacute;n ingenua del middleware</target>
        </trans-unit>
        <trans-unit id="5678d8ff8964be781758624218ca67e6eccfdd1b" translate="yes" xml:space="preserve">
          <source>Authentication is essential to any real application. When going about authentication you must keep in mind that nothing changes with how you should organize your application and you should implement authentication in the same way you would any other feature. It is relatively straightforward:</source>
          <target state="translated">La autenticación es esencial para cualquier aplicación real.Cuando se trata de la autenticación hay que tener en cuenta que nada cambia con la forma en que se debe organizar la aplicación y que se debe implementar la autenticación de la misma manera que cualquier otra característica.Es relativamente sencillo:</target>
        </trans-unit>
        <trans-unit id="9566fa2885d46ca757c9af88ac84f85bb1d56e51" translate="yes" xml:space="preserve">
          <source>Authentication with JWT by Auth0</source>
          <target state="translated">Autentificación con JWT por Auth0</target>
        </trans-unit>
        <trans-unit id="122e59e628a93b853a47af4cfa8433a11386c564" translate="yes" xml:space="preserve">
          <source>Avoiding Accidental Complexity When Structuring Your App State</source>
          <target state="translated">Evitar la complejidad accidental al estructurar su estado de aplicación</target>
        </trans-unit>
        <trans-unit id="3e81d3aaff1562199dada2cff7c06a38e4c2294f" translate="yes" xml:space="preserve">
          <source>Avoiding functions and statements that mutate state</source>
          <target state="translated">Evitar las funciones y declaraciones que mutan de estado</target>
        </trans-unit>
        <trans-unit id="9aae17642d53cdbcf10d6748c5122f8d3443a256" translate="yes" xml:space="preserve">
          <source>Aware of Redux</source>
          <target state="translated">Consciente de Redux</target>
        </trans-unit>
        <trans-unit id="9410a51d85ad489b23f91e3413ee16c00a3aada5" translate="yes" xml:space="preserve">
          <source>Backbone's model layer is quite different from Redux, so we don't suggest mixing them. If possible, it is best that you rewrite your app's model layer from scratch instead of connecting Backbone to Redux. However, if a rewrite is not feasible, you may use &lt;a href=&quot;https://github.com/redbooth/backbone-redux&quot;&gt;backbone-redux&lt;/a&gt; to migrate gradually, and keep the Redux store in sync with Backbone models and collections.</source>
          <target state="translated">La capa del modelo de Backbone es bastante diferente a la de Redux, por lo que no sugerimos mezclarlos. Si es posible, es mejor que reescriba la capa de modelo de su aplicaci&amp;oacute;n desde cero en lugar de conectar Backbone a Redux. Sin embargo, si una reescritura no es factible, puede usar &lt;a href=&quot;https://github.com/redbooth/backbone-redux&quot;&gt;backbone-redux&lt;/a&gt; para migrar gradualmente y mantener la tienda Redux sincronizada con los modelos y colecciones de Backbone.</target>
        </trans-unit>
        <trans-unit id="ed27f94322cfd2585f69fd4faaf883777c565fb1" translate="yes" xml:space="preserve">
          <source>Baobab</source>
          <target state="translated">Baobab</target>
        </trans-unit>
        <trans-unit id="22e42af3c93af18697862c91d897419ff315b287" translate="yes" xml:space="preserve">
          <source>Basic Reducer Structure</source>
          <target state="translated">Estructura básica del reductor</target>
        </trans-unit>
        <trans-unit id="9f6c9bee78e234130cb00e796115605ccb9c9356" translate="yes" xml:space="preserve">
          <source>Basic Reducer Structure and State Shape</source>
          <target state="translated">Estructura básica del reductor y forma del estado</target>
        </trans-unit>
        <trans-unit id="48ecb36ff00519ea4d9111bf2ac2c38ce3e8ee19" translate="yes" xml:space="preserve">
          <source>Basic State Shape</source>
          <target state="translated">Forma básica del estado</target>
        </trans-unit>
        <trans-unit id="5fcebeefad3cdbbf8733aa928160dec7dc90c1a1" translate="yes" xml:space="preserve">
          <source>Basics</source>
          <target state="translated">Basics</target>
        </trans-unit>
        <trans-unit id="67b560207b812ce235458b82ba3b3eea9cb85612" translate="yes" xml:space="preserve">
          <source>Basics: Reducers</source>
          <target state="translated">Lo básico:Reductores</target>
        </trans-unit>
        <trans-unit id="a2961743fb82ac508ead6cd89af32cac336e899e" translate="yes" xml:space="preserve">
          <source>Basics: Store</source>
          <target state="translated">Lo básico:Tienda</target>
        </trans-unit>
        <trans-unit id="ea6b5a053fcc90c8ddd2441e52e91ec4ca304fa6" translate="yes" xml:space="preserve">
          <source>Basics: Usage with React</source>
          <target state="translated">Lo básico:Uso con Reacción</target>
        </trans-unit>
        <trans-unit id="ef57ae03011c7a88309c71ac3de4cd66803fca0f" translate="yes" xml:space="preserve">
          <source>Be aware that any &lt;code&gt;fetch&lt;/code&gt; polyfill assumes a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise&quot;&gt;Promise&lt;/a&gt; polyfill is already present. The easiest way to ensure you have a Promise polyfill is to enable Babel's ES6 polyfill in your entry point before any other code runs:</source>
          <target state="translated">Tenga en cuenta que cualquier polyfill &lt;code&gt;fetch&lt;/code&gt; asume que un polyfill &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise&quot;&gt;Promise&lt;/a&gt; ya est&amp;aacute; presente. La forma m&amp;aacute;s f&amp;aacute;cil de asegurarse de tener un polyfill de Promise es habilitar el polyfill ES6 de Babel en su punto de entrada antes de que se ejecute cualquier otro c&amp;oacute;digo:</target>
        </trans-unit>
        <trans-unit id="8836be1ed6d14271d3616086c1165b69f0c93f5a" translate="yes" xml:space="preserve">
          <source>Because &lt;code&gt;combineReducers&lt;/code&gt; expects an object, we can put all top-level reducers into a separate file, &lt;code&gt;export&lt;/code&gt; each reducer function, and use &lt;code&gt;import * as reducers&lt;/code&gt; to get them as an object with their names as the keys:</source>
          <target state="translated">Debido a que &lt;code&gt;combineReducers&lt;/code&gt; espera un objeto, podemos poner todos los reductores de nivel superior en un archivo separado, &lt;code&gt;export&lt;/code&gt; ar cada funci&amp;oacute;n de reductor y usar &lt;code&gt;import * as reducers&lt;/code&gt; para obtenerlos como un objeto con sus nombres como claves:</target>
        </trans-unit>
        <trans-unit id="e147dcc69ce5b11254e20a3d4069c3882333d6b2" translate="yes" xml:space="preserve">
          <source>Because &lt;code&gt;import *&lt;/code&gt; is still new syntax, we don't use it anymore in the documentation to avoid &lt;a href=&quot;https://github.com/reactjs/redux/issues/428#issuecomment-129223274&quot;&gt;confusion&lt;/a&gt;, but you may encounter it in some community examples.</source>
          <target state="translated">Debido a que la sintaxis de &lt;code&gt;import *&lt;/code&gt; todav&amp;iacute;a es nueva, ya no la usamos en la documentaci&amp;oacute;n para evitar &lt;a href=&quot;https://github.com/reactjs/redux/issues/428#issuecomment-129223274&quot;&gt;confusiones&lt;/a&gt; , pero puede encontrarla en algunos ejemplos de la comunidad.</target>
        </trans-unit>
        <trans-unit id="aaded217a4fa5a0be4aafbaa6515cc015511e79a" translate="yes" xml:space="preserve">
          <source>Because APIs frequently send back data in a nested form, that data needs to be transformed into a normalized shape before it can be included in the state tree. The &lt;a href=&quot;https://github.com/paularmstrong/normalizr&quot;&gt;Normalizr&lt;/a&gt; library is usually used for this task. You can define schema types and relations, feed the schema and the response data to Normalizr, and it will output a normalized transformation of the response. That output can then be included in an action and used to update the store. See the Normalizr documentation for more details on its usage.</source>
          <target state="translated">Debido a que las API con frecuencia devuelven datos en forma anidada, esos datos deben transformarse en una forma normalizada antes de que puedan incluirse en el &amp;aacute;rbol de estado. La biblioteca &lt;a href=&quot;https://github.com/paularmstrong/normalizr&quot;&gt;Normalizr&lt;/a&gt; se usa generalmente para esta tarea. Puede definir tipos de esquema y relaciones, alimentar el esquema y los datos de respuesta a Normalizr, y generar&amp;aacute; una transformaci&amp;oacute;n normalizada de la respuesta. Luego, esa salida se puede incluir en una acci&amp;oacute;n y usar para actualizar la tienda. Consulte la documentaci&amp;oacute;n de Normalizr para obtener m&amp;aacute;s detalles sobre su uso.</target>
        </trans-unit>
        <trans-unit id="36a6dc2449dbb96d53ee9fa9e5275f29a7f8733e" translate="yes" xml:space="preserve">
          <source>Because React-Redux performs a shallow check on the root state object to determine if its wrapped components need re-rendering or not, it will not be able to detect the state mutation, and so will not trigger a re-rendering.</source>
          <target state="translated">Debido a que React-Redux realiza una comprobación superficial del objeto en estado de raíz para determinar si sus componentes envueltos necesitan ser reproducidos o no,no será capaz de detectar la mutación de estado,y por lo tanto no desencadenará una reprogramación.</target>
        </trans-unit>
        <trans-unit id="3b4a1ac2348c56cde050b358a3589a1c8f14e121" translate="yes" xml:space="preserve">
          <source>Because a store is not an instance, but rather a plain-object collection of functions, copies can be easily created and modified without mutating the original store. There is an example in &lt;a href=&quot;api/compose&quot;&gt;&lt;code&gt;compose&lt;/code&gt;&lt;/a&gt; documentation demonstrating that.</source>
          <target state="translated">Debido a que una tienda no es una instancia, sino m&amp;aacute;s bien una colecci&amp;oacute;n de funciones de objeto simple, las copias se pueden crear y modificar f&amp;aacute;cilmente sin alterar la tienda original. Hay un ejemplo en &lt;a href=&quot;api/compose&quot;&gt; &lt;code&gt;compose&lt;/code&gt; &lt;/a&gt; la documentaci&amp;oacute;n que demuestra que.</target>
        </trans-unit>
        <trans-unit id="efed700df65d7fe9ccdceab1e7043b1b623a8ecf" translate="yes" xml:space="preserve">
          <source>Because each item is only defined in one place, we don't have to try to make changes in multiple places if that item is updated.</source>
          <target state="translated">Debido a que cada elemento sólo está definido en un lugar,no tenemos que intentar hacer cambios en múltiples lugares si ese elemento se actualiza.</target>
        </trans-unit>
        <trans-unit id="a5b2b72f48655aebb62d18b4c1e639b210169092" translate="yes" xml:space="preserve">
          <source>Because it is cumbersome to apply functions to &lt;code&gt;createStore()&lt;/code&gt; before using it, &lt;code&gt;createStore()&lt;/code&gt; accepts an optional last argument to specify such functions.</source>
          <target state="translated">Debido a que es engorroso aplicar funciones a &lt;code&gt;createStore()&lt;/code&gt; antes de usarlo, &lt;code&gt;createStore()&lt;/code&gt; acepta un &amp;uacute;ltimo argumento opcional para especificar tales funciones.</target>
        </trans-unit>
        <trans-unit id="7374d49a3a0384818d249cff5d9279f55237ab50" translate="yes" xml:space="preserve">
          <source>Because most of the Redux code you write are functions, and many of them are pure, they are easy to test without mocking.</source>
          <target state="translated">Debido a que la mayoría del código Redux que escribes son funciones,y muchas de ellas son puras,son fáciles de probar sin burlas.</target>
        </trans-unit>
        <trans-unit id="f2db4769be19da76af1b03eaa76cbae8155e656b" translate="yes" xml:space="preserve">
          <source>Because of these rules, it's important that the following core concepts are fully understood before moving on to other specific techniques for organizing Redux reducers:</source>
          <target state="translated">Debido a estas reglas,es importante que se comprendan plenamente los siguientes conceptos básicos antes de pasar a otras técnicas específicas para organizar los reductores Redux:</target>
        </trans-unit>
        <trans-unit id="1a3e08abcf6f4447aa880f7591ce54acac1d67d8" translate="yes" xml:space="preserve">
          <source>Because of this, the recommended approach to managing relational or nested data in a Redux store is to treat a portion of your store as if it were a database, and keep that data in a &lt;em&gt;normalized&lt;/em&gt; form.</source>
          <target state="translated">Debido a esto, el enfoque recomendado para administrar datos relacionales o anidados en una tienda Redux es tratar una parte de su tienda como si fuera una base de datos y mantener esos datos en forma &lt;em&gt;normalizada&lt;/em&gt; .</target>
        </trans-unit>
        <trans-unit id="2f6e614f93198c638fa57d23714abc7c8a4c5fe3" translate="yes" xml:space="preserve">
          <source>Because the client side executes ongoing code, it can start with an empty initial state and obtain any necessary state on demand and over time. On the server side, rendering is synchronous and we only get one shot to render our view. We need to be able to compile our initial state during the request, which will have to react to input and obtain external state (such as that from an API or database).</source>
          <target state="translated">Debido a que el lado del cliente ejecuta el código en curso,puede comenzar con un estado inicial vacío y obtener cualquier estado necesario a petición y con el tiempo.En el lado del servidor,la renderización es sincrónica y sólo tenemos una oportunidad para renderizar nuestra vista.Necesitamos ser capaces de compilar nuestro estado inicial durante la solicitud,que tendrá que reaccionar a la entrada y obtener un estado externo (como el de una API o una base de datos).</target>
        </trans-unit>
        <trans-unit id="4dad2f7397c12d16dc5080663b0fb4ff158a875b" translate="yes" xml:space="preserve">
          <source>Because the data from B's slice is already in the action, the parent reducer doesn't have to do anything special to make that data available to &lt;code&gt;sliceReducerA&lt;/code&gt;.</source>
          <target state="translated">Debido a que los datos del segmento de B ya est&amp;aacute;n en la acci&amp;oacute;n, el reductor principal no tiene que hacer nada especial para que esos datos est&amp;eacute;n disponibles para &lt;code&gt;sliceReducerA&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="800eb8a2fa295362af6cbe9bc4b63ea94371aa6a" translate="yes" xml:space="preserve">
          <source>Because the store represents the core of your application, you should &lt;strong&gt;define your state shape in terms of your domain data and app state, not your UI component tree&lt;/strong&gt;. As an example, a shape of &lt;code&gt;state.leftPane.todoList.todos&lt;/code&gt; would be a bad idea, because the idea of &quot;todos&quot; is central to the whole application, not just a single part of the UI. The &lt;code&gt;todos&lt;/code&gt; slice should be at the top of the state tree instead.</source>
          <target state="translated">Debido a que la tienda representa el n&amp;uacute;cleo de su aplicaci&amp;oacute;n, debe &lt;strong&gt;definir la forma de su estado en t&amp;eacute;rminos de los datos de su dominio y el estado de la aplicaci&amp;oacute;n, no el &amp;aacute;rbol de componentes de la IU&lt;/strong&gt; . Por ejemplo, una forma de &lt;code&gt;state.leftPane.todoList.todos&lt;/code&gt; ser&amp;iacute;a una mala idea, porque la idea de &quot;todos&quot; es fundamental para toda la aplicaci&amp;oacute;n, no solo una parte de la interfaz de usuario. En su lugar, el segmento de &lt;code&gt;todos&lt;/code&gt; deber&amp;iacute;a estar en la parte superior del &amp;aacute;rbol de estado.</target>
        </trans-unit>
        <trans-unit id="67eccbeca2c6be1c80e66072cbdb7d5d3d171333" translate="yes" xml:space="preserve">
          <source>Because this pattern is so common, Redux provides the &lt;code&gt;combineReducers&lt;/code&gt; utility to implement that behavior. It is an example of a &lt;em&gt;higher-order reducer&lt;/em&gt;, which takes an object full of slice reducer functions, and returns a new reducer function.</source>
          <target state="translated">Debido a que este patr&amp;oacute;n es tan com&amp;uacute;n, Redux proporciona la utilidad &lt;code&gt;combineReducers&lt;/code&gt; para implementar ese comportamiento. Es un ejemplo de un &lt;em&gt;reductor de orden superior&lt;/em&gt; , que toma un objeto lleno de funciones de reductor de corte y devuelve una nueva funci&amp;oacute;n de reductor.</target>
        </trans-unit>
        <trans-unit id="18cc4aaf99d902742f5080c22e4e5772ca05908e" translate="yes" xml:space="preserve">
          <source>Because we call &lt;code&gt;res.send()&lt;/code&gt; inside of the callback, the server will hold open the connection and won't send any data until that callback executes. You'll notice a 500ms delay is now added to each server request as a result of our new API call. A more advanced usage would handle errors in the API gracefully, such as a bad response or timeout.</source>
          <target state="translated">Debido a que llamamos a &lt;code&gt;res.send()&lt;/code&gt; dentro de la devoluci&amp;oacute;n de llamada, el servidor mantendr&amp;aacute; abierta la conexi&amp;oacute;n y no enviar&amp;aacute; ning&amp;uacute;n dato hasta que se ejecute la devoluci&amp;oacute;n de llamada. Notar&amp;aacute; que ahora se agrega un retraso de 500 ms a cada solicitud del servidor como resultado de nuestra nueva llamada API. Un uso m&amp;aacute;s avanzado manejar&amp;iacute;a correctamente los errores en la API, como una mala respuesta o un tiempo de espera.</target>
        </trans-unit>
        <trans-unit id="caa8ca1f396e8cbad0408af4d219889981520bc2" translate="yes" xml:space="preserve">
          <source>Because we have introduced more code that relies on user generated content (UGC) and input, we have increased our attack surface area for our application. It is important for any application that you ensure your input is properly sanitized to prevent things like cross-site scripting (XSS) attacks or code injections.</source>
          <target state="translated">Debido a que hemos introducido más código que se basa en el contenido generado por el usuario (UGC)y la entrada,hemos aumentado nuestra superficie de ataque para nuestra aplicación.Es importante para cualquier aplicación que se asegure de que su entrada está debidamente saneada para evitar cosas como los ataques de cross-site scripting (XSS)o las inyecciones de código.</target>
        </trans-unit>
        <trans-unit id="89b5658d0d258fae8a0f70dae9f8f133bd91b874" translate="yes" xml:space="preserve">
          <source>Because we want to update a specific item in the array without resorting to mutations, we have to create a new array with the same items except the item at the index. If you find yourself often writing such operations, it's a good idea to use a helper like &lt;a href=&quot;https://github.com/kolodny/immutability-helper&quot;&gt;immutability-helper&lt;/a&gt;, &lt;a href=&quot;https://github.com/substantial/updeep&quot;&gt;updeep&lt;/a&gt;, or even a library like &lt;a href=&quot;http://facebook.github.io/immutable-js/&quot;&gt;Immutable&lt;/a&gt; that has native support for deep updates. Just remember to never assign to anything inside the &lt;code&gt;state&lt;/code&gt; unless you clone it first.</source>
          <target state="translated">Debido a que queremos actualizar un elemento espec&amp;iacute;fico en la matriz sin recurrir a mutaciones, tenemos que crear una nueva matriz con los mismos elementos excepto el elemento en el &amp;iacute;ndice. Si se encuentra escribiendo con frecuencia este tipo de operaciones, es una buena idea utilizar un ayudante como &lt;a href=&quot;https://github.com/kolodny/immutability-helper&quot;&gt;inmutability-helper&lt;/a&gt; , &lt;a href=&quot;https://github.com/substantial/updeep&quot;&gt;updeep&lt;/a&gt; o incluso una biblioteca como &lt;a href=&quot;http://facebook.github.io/immutable-js/&quot;&gt;Immutable&lt;/a&gt; que tiene soporte nativo para actualizaciones profundas. Solo recuerde nunca asignar a nada dentro del &lt;code&gt;state&lt;/code&gt; menos que lo clone primero.</target>
        </trans-unit>
        <trans-unit id="455e818de94ba32708285358e0d09ee9d740229c" translate="yes" xml:space="preserve">
          <source>Because we're treating a portion of our Redux store as a &quot;database&quot;, many of the principles of database design also apply here as well. For example, if we have a many-to-many relationship, we can model that using an intermediate table that stores the IDs of the corresponding items (often known as a &quot;join table&quot; or an &quot;associative table&quot;). For consistency, we would probably also want to use the same &lt;code&gt;byId&lt;/code&gt; and &lt;code&gt;allIds&lt;/code&gt; approach that we used for the actual item tables, like this:</source>
          <target state="translated">Debido a que estamos tratando una parte de nuestra tienda Redux como una &quot;base de datos&quot;, muchos de los principios del dise&amp;ntilde;o de bases de datos tambi&amp;eacute;n se aplican aqu&amp;iacute;. Por ejemplo, si tenemos una relaci&amp;oacute;n de muchos a muchos, podemos modelarla usando una tabla intermedia que almacena los ID de los elementos correspondientes (a menudo conocida como &quot;tabla de uni&amp;oacute;n&quot; o &quot;tabla asociativa&quot;). Para &lt;code&gt;byId&lt;/code&gt; coherencia, probablemente tambi&amp;eacute;n querr&amp;iacute;amos usar el mismo enfoque byId y &lt;code&gt;allIds&lt;/code&gt; que usamos para las tablas de elementos reales, como este:</target>
        </trans-unit>
        <trans-unit id="d1304b4245c2ff85f0675fea297cb7677812a916" translate="yes" xml:space="preserve">
          <source>Because writing immutable update code can become tedious, there are a number of utility libraries that try to abstract out the process. These libraries vary in APIs and usage, but all try to provide a shorter and more succinct way of writing these updates. Some, like &lt;a href=&quot;https://github.com/debitoor/dot-prop-immutable&quot;&gt;dot-prop-immutable&lt;/a&gt;, take string paths for commands:</source>
          <target state="translated">Debido a que escribir c&amp;oacute;digo de actualizaci&amp;oacute;n inmutable puede volverse tedioso, hay varias bibliotecas de utilidades que intentan abstraer el proceso. Estas bibliotecas var&amp;iacute;an en API y uso, pero todas intentan proporcionar una forma m&amp;aacute;s breve y concisa de escribir estas actualizaciones. Algunos, como &lt;a href=&quot;https://github.com/debitoor/dot-prop-immutable&quot;&gt;dot-prop-immutable&lt;/a&gt; , toman rutas de cadena para los comandos:</target>
        </trans-unit>
        <trans-unit id="9d3e7f54e625439ca3447fdc7a9117ae5fab1524" translate="yes" xml:space="preserve">
          <source>Because you must access your data via Immutable.JS&amp;rsquo;s own &lt;code&gt;get()&lt;/code&gt; and &lt;code&gt;getIn()&lt;/code&gt; methods, you can no longer use JavaScript&amp;rsquo;s destructuring operator (or the proposed Object spread operator), making your code more verbose.</source>
          <target state="translated">Debido a que debe acceder a sus datos a trav&amp;eacute;s de los m&amp;eacute;todos &lt;code&gt;get()&lt;/code&gt; y &lt;code&gt;getIn()&lt;/code&gt; , ya no puede usar el operador de desestructuraci&amp;oacute;n de JavaScript (o el operador de propagaci&amp;oacute;n de objetos propuesto), lo que hace que su c&amp;oacute;digo sea m&amp;aacute;s detallado.</target>
        </trans-unit>
        <trans-unit id="1437822723995215deb0d2e2fac29d0d0f12fcf2" translate="yes" xml:space="preserve">
          <source>Before Proceeding Further</source>
          <target state="translated">Antes de seguir adelante</target>
        </trans-unit>
        <trans-unit id="8d6d48764a855d1815031363486f3cea75e828c9" translate="yes" xml:space="preserve">
          <source>Before creating a UI for our todo app, we will take a detour to see &lt;a href=&quot;dataflow&quot;&gt;how the data flows in a Redux application&lt;/a&gt;.</source>
          <target state="translated">Antes de crear una interfaz de usuario para nuestra aplicaci&amp;oacute;n de tareas pendientes, tomaremos un desv&amp;iacute;o para ver &lt;a href=&quot;dataflow&quot;&gt;c&amp;oacute;mo fluyen los datos en una aplicaci&amp;oacute;n Redux&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="4e97a45859979361b3d87b280bcc08eee9084a8f" translate="yes" xml:space="preserve">
          <source>Before going into the details of dispatching actions together with network requests, we will write the reducers for the actions we defined above.</source>
          <target state="translated">Antes de entrar en los detalles del envío de acciones junto con las solicitudes de la red,escribiremos los reductores para las acciones que hemos definido anteriormente.</target>
        </trans-unit>
        <trans-unit id="89cb49f87c14fc3ef664ffd5fd8fb507d546a513" translate="yes" xml:space="preserve">
          <source>Before integrating React Router, we need to configure our development server. Indeed, our development server may be unaware of the declared routes in React Router configuration. For example, if you access &lt;code&gt;/todos&lt;/code&gt; and refresh, your development server needs to be instructed to serve &lt;code&gt;index.html&lt;/code&gt; because it is a single-page app. Here's how to enable this with popular development servers.</source>
          <target state="translated">Antes de integrar React Router, necesitamos configurar nuestro servidor de desarrollo. De hecho, nuestro servidor de desarrollo puede desconocer las rutas declaradas en la configuraci&amp;oacute;n de React Router. Por ejemplo, si accede a &lt;code&gt;/todos&lt;/code&gt; y actualiza, su servidor de desarrollo debe recibir instrucciones para publicar &lt;code&gt;index.html&lt;/code&gt; porque es una aplicaci&amp;oacute;n de una sola p&amp;aacute;gina. A continuaci&amp;oacute;n, le mostramos c&amp;oacute;mo habilitar esto con servidores de desarrollo populares.</target>
        </trans-unit>
        <trans-unit id="f29fca44a9a66689242d9b6ac45e9273f69c5781" translate="yes" xml:space="preserve">
          <source>Before proceeding, make sure you have worked through the &lt;a href=&quot;../basics/index&quot;&gt;basics tutorial&lt;/a&gt; and understand &lt;a href=&quot;../basics/reducers&quot;&gt;reducer composition&lt;/a&gt; well. This recipe will build on top of the example described in the &lt;a href=&quot;../basics/index&quot;&gt;basics tutorial&lt;/a&gt;.</source>
          <target state="translated">Antes de continuar, aseg&amp;uacute;rese de haber trabajado en el &lt;a href=&quot;../basics/index&quot;&gt;tutorial b&amp;aacute;sico&lt;/a&gt; y de comprender bien la &lt;a href=&quot;../basics/reducers&quot;&gt;composici&amp;oacute;n del reductor&lt;/a&gt; . Esta receta se basar&amp;aacute; en el ejemplo descrito en el &lt;a href=&quot;../basics/index&quot;&gt;tutorial b&amp;aacute;sico&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="f7d28bda5a65bfffaaaaaeb2efbace54d5ae5ed7" translate="yes" xml:space="preserve">
          <source>Below is a sub-app's root connected component. As usual, it can render more components, connected or not, as children. Usually we'd render it in &lt;code&gt;&amp;lt;Provider&amp;gt;&lt;/code&gt; and be done with it.</source>
          <target state="translated">A continuaci&amp;oacute;n se muestra el componente conectado a la ra&amp;iacute;z de una aplicaci&amp;oacute;n secundaria. Como de costumbre, puede renderizar m&amp;aacute;s componentes, conectados o no, como ni&amp;ntilde;os. Por lo general, lo renderizamos en &lt;code&gt;&amp;lt;Provider&amp;gt;&lt;/code&gt; y terminamos con &amp;eacute;l.</target>
        </trans-unit>
        <trans-unit id="2e9f60bf8e76871398ccbe5dae2fb65d17f44468" translate="yes" xml:space="preserve">
          <source>Below our imports, let's use &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment&quot;&gt;ES6 Object Destructuring&lt;/a&gt; to declare &lt;code&gt;SHOW_ALL&lt;/code&gt;:</source>
          <target state="translated">Debajo de nuestras importaciones, usemos la &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment&quot;&gt;Desestructuraci&amp;oacute;n de objetos ES6&lt;/a&gt; para declarar &lt;code&gt;SHOW_ALL&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="f1091ed2655d47790d04e490d5a912d61726fb58" translate="yes" xml:space="preserve">
          <source>Beyond &lt;code&gt;combineReducers&lt;/code&gt;</source>
          <target state="translated">M&amp;aacute;s all&amp;aacute; de &lt;code&gt;combineReducers&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="6b9a230925015b13c4b708f594107fd333941631" translate="yes" xml:space="preserve">
          <source>Beyond combineReducers</source>
          <target state="translated">Más allá de los reductores de la combinación</target>
        </trans-unit>
        <trans-unit id="edb5455f2581d21229bb831350698f3307569b49" translate="yes" xml:space="preserve">
          <source>Beyond that, Redux does not really care how you actually structure your logic inside that reducer function, as long as it obeys those basic rules. This is both a source of freedom and a source of confusion. However, there are a number of common patterns that are widely used when writing reducers, as well as a number of related topics and concepts to be aware of. As an application grows, these patterns play a crucial role in managing reducer code complexity, handling real-world data, and optimizing UI performance.</source>
          <target state="translated">Más allá de eso,a Redux no le importa realmente cómo estructurar su lógica dentro de esa función reductora,siempre y cuando obedezca esas reglas básicas.Esto es tanto una fuente de libertad como una fuente de confusión.Sin embargo,hay una serie de patrones comunes que se utilizan ampliamente al escribir los reductores,así como una serie de temas y conceptos relacionados que hay que tener en cuenta.A medida que una aplicación crece,estos patrones juegan un papel crucial en la gestión de la complejidad del código del reductor,el manejo de los datos del mundo real y la optimización del rendimiento de la interfaz de usuario.</target>
        </trans-unit>
        <trans-unit id="71ce0037a118cd7c3ccf4f303af279bf29aedd37" translate="yes" xml:space="preserve">
          <source>Bill Fisher, author of Flux documentation</source>
          <target state="translated">Bill Fisher,autor de la documentación de Flux</target>
        </trans-unit>
        <trans-unit id="967382f86044b6efc91dfee8f4e2b4ed941211cd" translate="yes" xml:space="preserve">
          <source>Bindings</source>
          <target state="translated">Bindings</target>
        </trans-unit>
        <trans-unit id="5d13d6793ab60c41828ba3fe82788c57381b56b3" translate="yes" xml:space="preserve">
          <source>Both Redux and React-Redux employ &lt;a href=&quot;#shallow-and-deep-equality-checking&quot;&gt;shallow equality checking&lt;/a&gt;. In particular:</source>
          <target state="translated">Tanto Redux como React-Redux emplean &lt;a href=&quot;#shallow-and-deep-equality-checking&quot;&gt;una verificaci&amp;oacute;n de igualdad superficial&lt;/a&gt; . En particular:</target>
        </trans-unit>
        <trans-unit id="58fcb9748d292f2d6edabc1dd2871e078a69f72c" translate="yes" xml:space="preserve">
          <source>Breaking down a complex process into smaller, more understandable parts is usually described with the term &lt;strong&gt;&lt;em&gt;&lt;a href=&quot;http://stackoverflow.com/questions/947874/what-is-functional-decomposition&quot;&gt;functional decomposition&lt;/a&gt;&lt;/em&gt;&lt;/strong&gt;. This term and concept can be applied generically to any code. However, in Redux it is &lt;em&gt;very&lt;/em&gt; common to structure reducer logic using approach #3, where update logic is delegated to other functions based on slice of state. Redux refers to this concept as &lt;strong&gt;&lt;em&gt;reducer composition&lt;/em&gt;&lt;/strong&gt;, and it is by far the most widely-used approach to structuring reducer logic. In fact, it's so common that Redux includes a utility function called &lt;a href=&quot;../../api/combinereducers&quot;&gt;&lt;code&gt;combineReducers()&lt;/code&gt;&lt;/a&gt;, which specifically abstracts the process of delegating work to other reducer functions based on slices of state. However, it's important to note that it is not the &lt;em&gt;only&lt;/em&gt; pattern that can be used. In fact, it's entirely possible to use all three approaches for splitting up logic into functions, and usually a good idea as well. The &lt;a href=&quot;refactoringreducersexample&quot;&gt;Refactoring Reducers&lt;/a&gt; section shows some examples of this in action.</source>
          <target state="translated">La divisi&amp;oacute;n de un proceso complejo en partes m&amp;aacute;s peque&amp;ntilde;as y comprensibles generalmente se describe con el t&amp;eacute;rmino &lt;strong&gt;&lt;em&gt;&lt;a href=&quot;http://stackoverflow.com/questions/947874/what-is-functional-decomposition&quot;&gt;descomposici&amp;oacute;n funcional&lt;/a&gt;&lt;/em&gt;&lt;/strong&gt; . Este t&amp;eacute;rmino y concepto se puede aplicar gen&amp;eacute;ricamente a cualquier c&amp;oacute;digo. Sin embargo, en Redux es &lt;em&gt;muy&lt;/em&gt; com&amp;uacute;n estructurar la l&amp;oacute;gica del reductor usando el enfoque n. &amp;deg; 3, donde la l&amp;oacute;gica de actualizaci&amp;oacute;n se delega a otras funciones seg&amp;uacute;n el segmento de estado. Redux se refiere a este concepto como &lt;strong&gt;&lt;em&gt;composici&amp;oacute;n reductora&lt;/em&gt;&lt;/strong&gt; y es, con mucho, el enfoque m&amp;aacute;s utilizado para estructurar la l&amp;oacute;gica reductora. De hecho, es tan com&amp;uacute;n que Redux incluye una funci&amp;oacute;n de utilidad llamada &lt;a href=&quot;../../api/combinereducers&quot;&gt; &lt;code&gt;combineReducers()&lt;/code&gt; &lt;/a&gt; , que abstrae espec&amp;iacute;ficamente el proceso de delegar trabajo a otras funciones reductoras basadas en porciones de estado. Sin embargo, es importante tener en cuenta que no es el&lt;em&gt;&amp;uacute;nico&lt;/em&gt; patr&amp;oacute;n que se puede utilizar. De hecho, es completamente posible utilizar los tres enfoques para dividir la l&amp;oacute;gica en funciones y, por lo general, tambi&amp;eacute;n es una buena idea. La secci&amp;oacute;n &lt;a href=&quot;refactoringreducersexample&quot;&gt;Reductores de refactorizaci&amp;oacute;n&lt;/a&gt; muestra algunos ejemplos de esto en acci&amp;oacute;n.</target>
        </trans-unit>
        <trans-unit id="d1a2bc21cb4d822c367054d8beedc9e473cb922f" translate="yes" xml:space="preserve">
          <source>Breaks object references, causing poor performance</source>
          <target state="translated">Rompe las referencias de los objetos,causando un mal rendimiento</target>
        </trans-unit>
        <trans-unit id="2ef955a1c06a7555c0b9124c858d0b7015c595f2" translate="yes" xml:space="preserve">
          <source>Build an Image Gallery Using Redux Saga</source>
          <target state="translated">Construya una galería de imágenes usando Redux Saga</target>
        </trans-unit>
        <trans-unit id="044820df0cc9603893652b00eab09f2633843854" translate="yes" xml:space="preserve">
          <source>Building Efficient UI with React and Redux</source>
          <target state="translated">Construyendo una UI eficiente con React and Redux</target>
        </trans-unit>
        <trans-unit id="52676a6b3cadf32f94e36a184ab697e39fb7e4cf" translate="yes" xml:space="preserve">
          <source>Building an Undo and Redo functionality into an app has traditionally required conscious effort from the developer. It is not an easy problem with classical MVC frameworks because you need to keep track of every past state by cloning all relevant models. In addition, you need to be mindful of the undo stack because the user-initiated changes should be undoable.</source>
          <target state="translated">Construir una funcionalidad de Deshacer y Rehacer en una aplicación ha requerido tradicionalmente un esfuerzo consciente por parte del desarrollador.No es un problema fácil con los marcos clásicos de MVC porque hay que hacer un seguimiento de cada estado pasado clonando todos los modelos relevantes.Además,hay que tener en cuenta la pila de deshacer porque los cambios iniciados por el usuario deben ser deshacerse.</target>
        </trans-unit>
        <trans-unit id="5216ed259778329413571d3d5d7a100b3609532a" translate="yes" xml:space="preserve">
          <source>But the result is pretty vanilla. It essentially renders a static view from dynamic code. What we need to do next is build an initial state dynamically to allow that rendered view to be dynamic.</source>
          <target state="translated">Pero el resultado es bastante vainilla.Esencialmente muestra una vista estática desde un código dinámico.Lo que necesitamos hacer a continuación es construir un estado inicial de forma dinámica para permitir que esa vista renderizada sea dinámica.</target>
        </trans-unit>
        <trans-unit id="c6630c4ba113b66e638acb13afa2a0da5838bc4c" translate="yes" xml:space="preserve">
          <source>But there's also a different way to enable chaining. The middleware could accept the &lt;code&gt;next()&lt;/code&gt; dispatch function as a parameter instead of reading it from the &lt;code&gt;store&lt;/code&gt; instance.</source>
          <target state="translated">Pero tambi&amp;eacute;n hay una forma diferente de habilitar el encadenamiento. El middleware podr&amp;iacute;a aceptar la funci&amp;oacute;n de env&amp;iacute;o &lt;code&gt;next()&lt;/code&gt; como par&amp;aacute;metro en lugar de leerlo desde la instancia de la &lt;code&gt;store&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="1dee896ae234e12cac8b3cbc6f4a57f568f7c5f7" translate="yes" xml:space="preserve">
          <source>By assuming the wrapped component is pure, it need only check whether the root state object or the values returned from &lt;code&gt;mapStateToProps&lt;/code&gt; have changed. If they haven&amp;rsquo;t, the wrapped component does not need re-rendering.</source>
          <target state="translated">Suponiendo que el componente envuelto es puro, solo necesita verificar si el objeto de estado ra&amp;iacute;z o los valores devueltos por &lt;code&gt;mapStateToProps&lt;/code&gt; han cambiado. Si no lo han hecho, no es necesario volver a renderizar el componente envuelto.</target>
        </trans-unit>
        <trans-unit id="c04d1941187625b0fce5ba887317fb2d3821a0a2" translate="yes" xml:space="preserve">
          <source>By convention, the top-level state is an object or some other key-value collection like a Map, but technically it can be any type. Still, you should do your best to keep the state serializable. Don't put anything inside it that you can't easily turn into JSON.</source>
          <target state="translated">Por convención,el estado de máximo nivel es un objeto o alguna otra colección de valor clave como un Mapa,pero técnicamente puede ser de cualquier tipo.Aún así,deberías hacer lo posible por mantener el estado serializable.No pongas nada dentro que no puedas convertir fácilmente en JSON.</target>
        </trans-unit>
        <trans-unit id="ee52434982b2c6a75c2a9dc316e303887dd2c213" translate="yes" xml:space="preserve">
          <source>By converting Immutable.JS objects to plain JavaScript values within a HOC, we achieve Dumb Component portability, but without the performance hits of using &lt;code&gt;toJS()&lt;/code&gt; in the Smart Component.</source>
          <target state="translated">Al convertir objetos Immutable.JS en valores JavaScript simples dentro de un HOC, logramos la portabilidad del componente tonto, pero sin los impactos de rendimiento de usar &lt;code&gt;toJS()&lt;/code&gt; en el componente inteligente.</target>
        </trans-unit>
        <trans-unit id="14c208d300198acc2bee9f79ece564c973b4032d" translate="yes" xml:space="preserve">
          <source>By hand</source>
          <target state="translated">A mano</target>
        </trans-unit>
        <trans-unit id="678ffdd0e7329a441eacb0cada63caaeb00de544" translate="yes" xml:space="preserve">
          <source>Call non-pure functions, e.g. &lt;code&gt;Date.now()&lt;/code&gt; or &lt;code&gt;Math.random()&lt;/code&gt;.</source>
          <target state="translated">Llame a funciones no puras, por ejemplo, &lt;code&gt;Date.now()&lt;/code&gt; o &lt;code&gt;Math.random()&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="514ecbbb081ae5bb804b5d148470b70893486e4e" translate="yes" xml:space="preserve">
          <source>Calling an action creator only produces an action, but does not dispatch it. You need to call the store's &lt;a href=&quot;api/store#dispatch&quot;&gt;&lt;code&gt;dispatch&lt;/code&gt;&lt;/a&gt; function to actually cause the mutation. Sometimes we say &lt;em&gt;bound action creators&lt;/em&gt; to mean functions that call an action creator and immediately dispatch its result to a specific store instance.</source>
          <target state="translated">Llamar a un creador de acciones solo produce una acci&amp;oacute;n, pero no la despacha. Debe llamar a la funci&amp;oacute;n de &lt;a href=&quot;api/store#dispatch&quot;&gt; &lt;code&gt;dispatch&lt;/code&gt; &lt;/a&gt; la tienda para causar la mutaci&amp;oacute;n. A veces decimos &lt;em&gt;que los creadores de acciones vinculadas son&lt;/em&gt; funciones que llaman a un creador de acciones y env&amp;iacute;an inmediatamente su resultado a una instancia de tienda espec&amp;iacute;fica.</target>
        </trans-unit>
        <trans-unit id="cc88550e4ec686048f4441cff525112f12fef17b" translate="yes" xml:space="preserve">
          <source>Can I put functions, promises, or other non-serializable items in my store state?</source>
          <target state="translated">¿Puedo poner funciones,promesas u otros artículos no seriables en el estado de mi tienda?</target>
        </trans-unit>
        <trans-unit id="bc9efb799599b448719604b39fc5d1dd267fac1f" translate="yes" xml:space="preserve">
          <source>Can Redux be considered a &lt;a href=&quot;https://facebook.github.io/flux/&quot;&gt;Flux&lt;/a&gt; implementation?</source>
          <target state="translated">&amp;iquest;Puede Redux considerarse una implementaci&amp;oacute;n de &lt;a href=&quot;https://facebook.github.io/flux/&quot;&gt;Flux&lt;/a&gt; ?</target>
        </trans-unit>
        <trans-unit id="3c8f18450288bb51e46e5292d22da2305a2ead78" translate="yes" xml:space="preserve">
          <source>Can Redux only be used with React?</source>
          <target state="translated">¿Redux sólo se puede usar con React?</target>
        </trans-unit>
        <trans-unit id="ac9b06faebbc4bb435ce5bb7eca38ff4df6ae262" translate="yes" xml:space="preserve">
          <source>Can or should I create multiple stores? Can I import my store directly, and use it in components myself?</source>
          <target state="translated">¿Puedo o debo crear varias tiendas? ¿Puedo importar mi tienda directamente,y usarla en componentes yo mismo?</target>
        </trans-unit>
        <trans-unit id="afc46e42066f8c38a155fdc1d793218fd0742077" translate="yes" xml:space="preserve">
          <source>Certain immutable operations, such as an Array filter, will always return a new object, even if the values themselves have not changed.</source>
          <target state="translated">Ciertas operaciones inmutables,como un filtro Array,siempre devolverán un nuevo objeto,aunque los valores en sí no hayan cambiado.</target>
        </trans-unit>
        <trans-unit id="9c74fb571984d7f3e781ea8b013e5f74bcd16389" translate="yes" xml:space="preserve">
          <source>Change Log</source>
          <target state="translated">Registro de cambios</target>
        </trans-unit>
        <trans-unit id="77d62200bb4808e2c757f43ffc9e34e38db2f83c" translate="yes" xml:space="preserve">
          <source>Changes are made with pure functions</source>
          <target state="translated">Los cambios se hacen con funciones puras</target>
        </trans-unit>
        <trans-unit id="a7e5e5888a0251d8e42a2303b77a969291cfff57" translate="yes" xml:space="preserve">
          <source>Chat log: React/Redux perf - single connection vs many connections</source>
          <target state="translated">Registro del chat:React/Redux perf-una sola conexión contra muchas conexiones</target>
        </trans-unit>
        <trans-unit id="02882aae8c97d845e545938dbe2741732079d319" translate="yes" xml:space="preserve">
          <source>Chat log: React/Redux perf - updating a 10K-item Todo list</source>
          <target state="translated">Registro del chat:React/Redux perf-actualizando una lista de 10K de Todo</target>
        </trans-unit>
        <trans-unit id="590f1d62228e7b6962e715956c59522b152fc9a5" translate="yes" xml:space="preserve">
          <source>Check out &lt;a href=&quot;exampleredditapi&quot;&gt;the full source code for the async example&lt;/a&gt;.</source>
          <target state="translated">Consulte &lt;a href=&quot;exampleredditapi&quot;&gt;el c&amp;oacute;digo fuente completo para el ejemplo asincr&amp;oacute;nico&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="1ca51c480d481c131ddccd6e3c2ee749821089b7" translate="yes" xml:space="preserve">
          <source>Check out the &lt;a href=&quot;https://github.com/reactjs/reselect&quot;&gt;official documentation&lt;/a&gt; of Reselect as well as its &lt;a href=&quot;https://github.com/reactjs/reselect#faq&quot;&gt;FAQ&lt;/a&gt;. Most Redux projects start using Reselect when they have performance problems because of too many derived computations and wasted re-renders, so make sure you are familiar with it before you build something big. It can also be useful to study &lt;a href=&quot;https://github.com/reactjs/reselect/blob/master/src/index.js&quot;&gt;its source code&lt;/a&gt; so you don't think it's magic.</source>
          <target state="translated">Consulte la &lt;a href=&quot;https://github.com/reactjs/reselect&quot;&gt;documentaci&amp;oacute;n oficial&lt;/a&gt; de Reselect y sus &lt;a href=&quot;https://github.com/reactjs/reselect#faq&quot;&gt;preguntas frecuentes&lt;/a&gt; . La mayor&amp;iacute;a de los proyectos de Redux comienzan a usar Reselect cuando tienen problemas de rendimiento debido a demasiados c&amp;aacute;lculos derivados y re-renderizaciones desperdiciadas, as&amp;iacute; que aseg&amp;uacute;rese de estar familiarizado con &amp;eacute;l antes de construir algo grande. Tambi&amp;eacute;n puede ser &amp;uacute;til estudiar &lt;a href=&quot;https://github.com/reactjs/reselect/blob/master/src/index.js&quot;&gt;su c&amp;oacute;digo fuente&lt;/a&gt; para que no crea que es m&amp;aacute;gico.</target>
        </trans-unit>
        <trans-unit id="7064940db7a1d0a8ad078f4933ca03bdf4384538" translate="yes" xml:space="preserve">
          <source>Choosing whether to use a single action type with flags, or multiple action types, is up to you. It's a convention you need to decide with your team. Multiple types leave less room for a mistake, but this is not an issue if you generate action creators and reducers with a helper library like &lt;a href=&quot;https://github.com/acdlite/redux-actions&quot;&gt;redux-actions&lt;/a&gt;.</source>
          <target state="translated">Usted decide si desea utilizar un solo tipo de acci&amp;oacute;n con indicadores o varios tipos de acci&amp;oacute;n. Es una convenci&amp;oacute;n que debes decidir con tu equipo. Varios tipos dejan menos espacio para un error, pero esto no es un problema si genera creadores y reductores de acciones con una biblioteca auxiliar como &lt;a href=&quot;https://github.com/acdlite/redux-actions&quot;&gt;redux-actions&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="a35b138959cf52724c7ecc764f2581e2505e1033" translate="yes" xml:space="preserve">
          <source>Chris Dhanaraj</source>
          <target state="translated">Chris Dhanaraj</target>
        </trans-unit>
        <trans-unit id="4da30b8b6589341c1c5097e2b6d732339256659a" translate="yes" xml:space="preserve">
          <source>Clear the &lt;code&gt;future&lt;/code&gt;.</source>
          <target state="translated">Limpia el &lt;code&gt;future&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="794ceaaa1771a4243afa4d673ab5434968292b2a" translate="yes" xml:space="preserve">
          <source>Cloning Objects in JavaScript</source>
          <target state="translated">Clonación de objetos en JavaScript</target>
        </trans-unit>
        <trans-unit id="9d6b5f970ace9ba53ad9e45c0384561f1183fe5b" translate="yes" xml:space="preserve">
          <source>Code Structure</source>
          <target state="translated">Estructura del código</target>
        </trans-unit>
        <trans-unit id="7a44af612fdee0de4619ce06d349d983c763c717" translate="yes" xml:space="preserve">
          <source>Combined Reducers</source>
          <target state="translated">Reductores combinados</target>
        </trans-unit>
        <trans-unit id="138eb4fb8cbab09f3102a4bdc497d150d119b26b" translate="yes" xml:space="preserve">
          <source>Combining Reducers by Slice</source>
          <target state="translated">Combinando los reductores por rebanadas</target>
        </trans-unit>
        <trans-unit id="58fca950b17f3d83e4dea581789d811359b5f26a" translate="yes" xml:space="preserve">
          <source>Common Mistake #1: New variables that point to the same objects</source>
          <target state="translated">Error común #1:Nuevas variables que apuntan a los mismos objetos</target>
        </trans-unit>
        <trans-unit id="9bac9c6f37df3c3c4497667d13578b5087f6d70e" translate="yes" xml:space="preserve">
          <source>Common Mistake #2: Only making a shallow copy of one level</source>
          <target state="translated">Error común #2:Sólo hacer una copia superficial de un nivel</target>
        </trans-unit>
        <trans-unit id="5f3d6c44bf5df710ea25006914bb1e40d2ecbb97" translate="yes" xml:space="preserve">
          <source>Common Redux misconception: you need to deeply clone the state. Reality: if something inside doesn't change, keep its reference the same!</source>
          <target state="translated">Un error común del Redux:necesitas clonar profundamente el estado.Realidad:si algo en el interior no cambia,¡mantén su referencia igual!</target>
        </trans-unit>
        <trans-unit id="1b43008657b57fe78508382a4b9fb02fb7841e4e" translate="yes" xml:space="preserve">
          <source>Community Conventions</source>
          <target state="translated">Convenciones de la Comunidad</target>
        </trans-unit>
        <trans-unit id="6ba5570bcfc57cb0bf4fe0a9702c06fc5228b4ab" translate="yes" xml:space="preserve">
          <source>Complementary Packages</source>
          <target state="translated">Paquetes complementarios</target>
        </trans-unit>
        <trans-unit id="9289473eeedaee09d76c8cf1b6994d8550debf46" translate="yes" xml:space="preserve">
          <source>Components</source>
          <target state="translated">Components</target>
        </trans-unit>
        <trans-unit id="32506a4d4827f751f805be2f6a54fe8754849b64" translate="yes" xml:space="preserve">
          <source>Components will both re-render when they shouldn&amp;rsquo;t, and refuse to render when they should, and tracking down the bug causing the rendering issue is hard, as the component rendering incorrectly is not necessarily the one whose properties are being accidentally mutated.</source>
          <target state="translated">Los componentes se volver&amp;aacute;n a renderizar cuando no deber&amp;iacute;an y se negar&amp;aacute;n a renderizar cuando deber&amp;iacute;an, y rastrear el error que causa el problema de renderizado es dif&amp;iacute;cil, ya que el componente que se renderiza incorrectamente no es necesariamente aquel cuyas propiedades est&amp;aacute;n siendo mutadas accidentalmente.</target>
        </trans-unit>
        <trans-unit id="837b57a8ec5e9af95ffd6545daebb1d24962188f" translate="yes" xml:space="preserve">
          <source>Composes functions from right to left.</source>
          <target state="translated">Compone funciones de derecha a izquierda.</target>
        </trans-unit>
        <trans-unit id="8e0c107b8e98df1c854ed1c7dcb3a98dc7c2ca76" translate="yes" xml:space="preserve">
          <source>Composing Selectors</source>
          <target state="translated">Composición de los selectores</target>
        </trans-unit>
        <trans-unit id="f0d42401ef57fab1331c6965711b20a87c5ddbf4" translate="yes" xml:space="preserve">
          <source>Computing Derived Data</source>
          <target state="translated">Datos derivados de la computación</target>
        </trans-unit>
        <trans-unit id="7daf13b1f60fb4af3d6921cd3bc4aced67ab5a7a" translate="yes" xml:space="preserve">
          <source>Configuring Express</source>
          <target state="translated">Configurando el Express</target>
        </trans-unit>
        <trans-unit id="67a9e1acb14192d9b8d0b21f21976859dd578df3" translate="yes" xml:space="preserve">
          <source>Configuring WebpackDevServer</source>
          <target state="translated">Configuración de WebpackDevServer</target>
        </trans-unit>
        <trans-unit id="fde5035ac1fcc8de232b7bed3503337cd6eb9f66" translate="yes" xml:space="preserve">
          <source>Configuring the Fallback URL</source>
          <target state="translated">Configurando el URL de retroceso</target>
        </trans-unit>
        <trans-unit id="87a9853dc1b73b96e2f86ff4c803e9204d6d4b12" translate="yes" xml:space="preserve">
          <source>Connected Components</source>
          <target state="translated">Componentes conectados</target>
        </trans-unit>
        <trans-unit id="8e80b5ae124a108d4cae25b4b8f529572912388e" translate="yes" xml:space="preserve">
          <source>Connecting React Router with Redux App</source>
          <target state="translated">Conectando el router React con la aplicación Redux</target>
        </trans-unit>
        <trans-unit id="a6a0e3b241efd3e93742236b45d8493d0e6fee30" translate="yes" xml:space="preserve">
          <source>Connecting a Selector to the Redux Store</source>
          <target state="translated">Conectando un selector a la tienda Redux</target>
        </trans-unit>
        <trans-unit id="87209e0d1e9b53b5fe4772baab86c7a792f26231" translate="yes" xml:space="preserve">
          <source>Connecting to UI</source>
          <target state="translated">Conectando a la UI</target>
        </trans-unit>
        <trans-unit id="9a52a37a64378cb1a98da0406ef6404fd0218774" translate="yes" xml:space="preserve">
          <source>Consequently, the state object will look like this:</source>
          <target state="translated">Por consiguiente,el objeto de estado se verá así:</target>
        </trans-unit>
        <trans-unit id="b825bc561f6b5b1f75c29d0f875286a593d7b365" translate="yes" xml:space="preserve">
          <source>Consider the case of a &amp;ldquo;big&amp;rdquo; app (contained in a &lt;code&gt;&amp;lt;BigApp&amp;gt;&lt;/code&gt; component) that embeds smaller &amp;ldquo;sub-apps&amp;rdquo; (contained in &lt;code&gt;&amp;lt;SubApp&amp;gt;&lt;/code&gt; components):</source>
          <target state="translated">Considere el caso de una aplicaci&amp;oacute;n &quot;grande&quot; (contenida en un componente &lt;code&gt;&amp;lt;BigApp&amp;gt;&lt;/code&gt; ) que incorpora &quot;sub-aplicaciones&quot; m&amp;aacute;s peque&amp;ntilde;as (contenidas en componentes &lt;code&gt;&amp;lt;SubApp&amp;gt;&lt;/code&gt; ):</target>
        </trans-unit>
        <trans-unit id="66b9b7c93fb54ebed199da9fee98590876d2817b" translate="yes" xml:space="preserve">
          <source>Consider the code above rewritten with &lt;a href=&quot;https://github.com/gaearon/redux-thunk&quot;&gt;redux-thunk&lt;/a&gt;:</source>
          <target state="translated">Considere el c&amp;oacute;digo anterior reescrito con &lt;a href=&quot;https://github.com/gaearon/redux-thunk&quot;&gt;redux-thunk&lt;/a&gt; :</target>
        </trans-unit>
        <trans-unit id="2ca273c094d939aa568e917155d75b414ea13292" translate="yes" xml:space="preserve">
          <source>Consider the following &lt;code&gt;App&lt;/code&gt; component:</source>
          <target state="translated">Considere el siguiente componente de la &lt;code&gt;App&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="70e99e62d50531f0a2f738cbf8aa0173b646e44a" translate="yes" xml:space="preserve">
          <source>Consider this Flux store:</source>
          <target state="translated">Considere esta tienda de Flux:</target>
        </trans-unit>
        <trans-unit id="4f9f7bad9d1734680439f0676a170b5a673dfd79" translate="yes" xml:space="preserve">
          <source>Container Components</source>
          <target state="translated">Componentes del contenedor</target>
        </trans-unit>
        <trans-unit id="d0dfb089b89fb29b825328110a2e11b4f94fb034" translate="yes" xml:space="preserve">
          <source>Conversely, in this next example (below), the component will &lt;em&gt;always&lt;/em&gt; re-render, as the value of &lt;code&gt;todos&lt;/code&gt; is always a new object, regardless of whether or not its values change:</source>
          <target state="translated">Por el contrario, en el siguiente ejemplo (a continuaci&amp;oacute;n), el componente &lt;em&gt;siempre se&lt;/em&gt; volver&amp;aacute; a renderizar, ya que el valor de &lt;code&gt;todos&lt;/code&gt; es siempre un objeto nuevo, independientemente de si sus valores cambian o no:</target>
        </trans-unit>
        <trans-unit id="29636c1eb55c51788d0bfe80405463c52281956d" translate="yes" xml:space="preserve">
          <source>Converting an Immutable.JS object to a JavaScript object using &lt;code&gt;toJS()&lt;/code&gt; will return a new object every time. If you do this in &lt;code&gt;mapStateToProps&lt;/code&gt;, you will cause the component to believe that the object has changed every time the state tree changes, and so trigger an unnecessary re-render.</source>
          <target state="translated">La conversi&amp;oacute;n de un objeto &lt;code&gt;toJS()&lt;/code&gt; en un objeto JavaScript usando toJS () devolver&amp;aacute; un nuevo objeto cada vez. Si hace esto en &lt;code&gt;mapStateToProps&lt;/code&gt; , har&amp;aacute; que el componente crea que el objeto ha cambiado cada vez que cambia el &amp;aacute;rbol de estado y, por lo tanto, desencadenar&amp;aacute; una nueva renderizaci&amp;oacute;n innecesaria.</target>
        </trans-unit>
        <trans-unit id="93a1d53292581775a7aefd7eb2070e8afcd74765" translate="yes" xml:space="preserve">
          <source>Copying objects using functions like &lt;code&gt;Object.assign()&lt;/code&gt; or &lt;code&gt;_.extend()&lt;/code&gt;, and array functions such as &lt;code&gt;slice()&lt;/code&gt; and &lt;code&gt;concat()&lt;/code&gt;</source>
          <target state="translated">Copiar objetos usando funciones como &lt;code&gt;Object.assign()&lt;/code&gt; o &lt;code&gt;_.extend()&lt;/code&gt; , y funciones de matriz como &lt;code&gt;slice()&lt;/code&gt; y &lt;code&gt;concat()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="c872753511d558c4ce512746cf585786dd025a3c" translate="yes" xml:space="preserve">
          <source>Core Concepts</source>
          <target state="translated">Conceptos básicos</target>
        </trans-unit>
        <trans-unit id="ef8e6e4e0586b33e3404668e2c83565be91e5463" translate="yes" xml:space="preserve">
          <source>Correct Approach: Copying All Levels of Nested Data</source>
          <target state="translated">Acercamiento correcto:Copiar todos los niveles de datos anidados</target>
        </trans-unit>
        <trans-unit id="f4018045cfb458b2734d2b09cf762c2567878c41" translate="yes" xml:space="preserve">
          <source>Counter</source>
          <target state="translated">Counter</target>
        </trans-unit>
        <trans-unit id="ee249667a9d59781bd41e030d27e2c1188c37ed0" translate="yes" xml:space="preserve">
          <source>Counter Vanilla</source>
          <target state="translated">vainilla.</target>
        </trans-unit>
        <trans-unit id="626a2643ba405040e97390410d4230e265e4259f" translate="yes" xml:space="preserve">
          <source>Create a function called &lt;code&gt;createFluxStore(reducer)&lt;/code&gt; that creates a Flux store compatible with your existing app from a reducer function. Internally it might look similar to &lt;a href=&quot;../api/createstore&quot;&gt;&lt;code&gt;createStore&lt;/code&gt;&lt;/a&gt; (&lt;a href=&quot;https://github.com/reactjs/redux/blob/master/src/createStore.js&quot;&gt;source&lt;/a&gt;) implementation from Redux. Its dispatch handler should just call the &lt;code&gt;reducer&lt;/code&gt; for any action, store the next state, and emit change.</source>
          <target state="translated">Cree una funci&amp;oacute;n llamada &lt;code&gt;createFluxStore(reducer)&lt;/code&gt; que crea una tienda Flux compatible con su aplicaci&amp;oacute;n existente desde una funci&amp;oacute;n reductora. Internamente, puede parecer similar a la &lt;a href=&quot;../api/createstore&quot;&gt; &lt;code&gt;createStore&lt;/code&gt; &lt;/a&gt; de createStore ( &lt;a href=&quot;https://github.com/reactjs/redux/blob/master/src/createStore.js&quot;&gt;fuente&lt;/a&gt; ) de Redux. Su gestor de despacho deber&amp;iacute;a simplemente llamar al &lt;code&gt;reducer&lt;/code&gt; para cualquier acci&amp;oacute;n, almacenar el siguiente estado y emitir el cambio.</target>
        </trans-unit>
        <trans-unit id="f00d5c6bc58d02ae5cd2c0877a6310c7f5c5ba39" translate="yes" xml:space="preserve">
          <source>Create a reducer that returns the next state for each possible authentication case (&lt;code&gt;LOGIN_SUCCESS&lt;/code&gt;, &lt;code&gt;LOGIN_FAILURE&lt;/code&gt;, etc).</source>
          <target state="translated">Cree un reductor que devuelva el siguiente estado para cada posible caso de autenticaci&amp;oacute;n ( &lt;code&gt;LOGIN_SUCCESS&lt;/code&gt; , &lt;code&gt;LOGIN_FAILURE&lt;/code&gt; , etc.).</target>
        </trans-unit>
        <trans-unit id="8eda9a696d062cf8392d53f7f2f71e67915d36d6" translate="yes" xml:space="preserve">
          <source>Create action constants for &lt;code&gt;LOGIN_SUCCESS&lt;/code&gt;, &lt;code&gt;LOGIN_FAILURE&lt;/code&gt;, etc.</source>
          <target state="translated">Cree constantes de acci&amp;oacute;n para &lt;code&gt;LOGIN_SUCCESS&lt;/code&gt; , &lt;code&gt;LOGIN_FAILURE&lt;/code&gt; , etc.</target>
        </trans-unit>
        <trans-unit id="324a3f11e3a6b0488c13a615c4cc2fb9250a827e" translate="yes" xml:space="preserve">
          <source>Create action creators that take in credentials, a flag that signifies whether authentication succeeded, a token, or an error message as the payload.</source>
          <target state="translated">Crear creadores de acciones que tomen credenciales,una bandera que signifique si la autenticación tuvo éxito,una ficha o un mensaje de error como carga útil.</target>
        </trans-unit>
        <trans-unit id="f4da47671463db87fe5e42276d8cdd320a2a393a" translate="yes" xml:space="preserve">
          <source>Create an async action creator with Redux Thunk middleware or any middleware you see fit to fire a network request to an API that returns a token if the credentials are valid. Then save the token in the local storage or show a response to the user if it failed. You can perform these side effects from the action creators you wrote in the previous step.</source>
          <target state="translated">Crea un creador de acciones de sincronización con el middleware de Redux Thunk o cualquier middleware que consideres oportuno para enviar una solicitud de red a una API que devuelva un token si las credenciales son válidas.A continuación,guarda el token en el almacenamiento local o muestra una respuesta al usuario si ha fallado.Puede realizar estos efectos secundarios a partir de los creadores de acciones que escribió en el paso anterior.</target>
        </trans-unit>
        <trans-unit id="5e918651270b4a8e2572409f93c5b24f05fb8646" translate="yes" xml:space="preserve">
          <source>Create the tree using Immutable.JS&amp;rsquo;s &lt;code&gt;fromJS()&lt;/code&gt; function.</source>
          <target state="translated">Cree el &amp;aacute;rbol usando la funci&amp;oacute;n &lt;code&gt;fromJS()&lt;/code&gt; de Immutable.JS .</target>
        </trans-unit>
        <trans-unit id="f9f8eb3701e2ecf3db6a0a48de0c67b288bcb04f" translate="yes" xml:space="preserve">
          <source>Creates a Redux &lt;a href=&quot;store&quot;&gt;store&lt;/a&gt; that holds the complete state tree of your app.</source>
          <target state="translated">Crea una &lt;a href=&quot;store&quot;&gt;tienda&lt;/a&gt; Redux que contiene el &amp;aacute;rbol de estado completo de su aplicaci&amp;oacute;n.</target>
        </trans-unit>
        <trans-unit id="ee75636471dae8e7aeaf8b96db269b8a27390926" translate="yes" xml:space="preserve">
          <source>Creates a Redux &lt;a href=&quot;store&quot;&gt;store&lt;/a&gt; that holds the complete state tree of your app. There should only be a single store in your app.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e2d02ebd7a04879d6977b29605f7193c5cf5707d" translate="yes" xml:space="preserve">
          <source>Creating a Memoized Selector</source>
          <target state="translated">Creación de un selector memorizado</target>
        </trans-unit>
        <trans-unit id="d2bc225ae0a45426787680231ada8a6f564133c3" translate="yes" xml:space="preserve">
          <source>Currently, the todo list is not filtered even after the URL changed. This is because we are filtering from &lt;code&gt;&amp;lt;VisibleTodoList /&amp;gt;&lt;/code&gt;'s &lt;code&gt;mapStateToProps()&lt;/code&gt; is still bound to the &lt;code&gt;state&lt;/code&gt; and not to the URL. &lt;code&gt;mapStateToProps&lt;/code&gt; has an optional second argument &lt;code&gt;ownProps&lt;/code&gt; that is an object with every props passed to &lt;code&gt;&amp;lt;VisibleTodoList /&amp;gt;&lt;/code&gt;</source>
          <target state="translated">Actualmente, la lista de tareas pendientes no se filtra incluso despu&amp;eacute;s de que se cambia la URL. Esto se debe a que estamos filtrando desde &lt;code&gt;&amp;lt;VisibleTodoList /&amp;gt;&lt;/code&gt; 's &lt;code&gt;mapStateToProps()&lt;/code&gt; todav&amp;iacute;a est&amp;aacute; unido al &lt;code&gt;state&lt;/code&gt; y no a la URL. &lt;code&gt;mapStateToProps&lt;/code&gt; tiene un segundo argumento opcional &lt;code&gt;ownProps&lt;/code&gt; que es un objeto con todos los accesorios pasados ​​a &lt;code&gt;&amp;lt;VisibleTodoList /&amp;gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="3c61307a6709c8c66ca641e98184dcc9259bd594" translate="yes" xml:space="preserve">
          <source>Customizing Behavior with Higher-Order Reducers</source>
          <target state="translated">Personalizar el comportamiento con reductores de orden superior</target>
        </trans-unit>
        <trans-unit id="60b543bfaaf4e1677077510d003f94bafdf0c999" translate="yes" xml:space="preserve">
          <source>Dan</source>
          <target state="translated">Dan</target>
        </trans-unit>
        <trans-unit id="d3ef9a304a148420eba3a55c129f2235b1f9e1ec" translate="yes" xml:space="preserve">
          <source>Data Flow</source>
          <target state="translated">Flujo de datos</target>
        </trans-unit>
        <trans-unit id="bb55896eb93bcb68cbc23ed6fae3b63100404b9f" translate="yes" xml:space="preserve">
          <source>Data encapsulated in an Immutable.JS object is never mutated. A new copy is always returned. This contrasts with JavaScript, in which some operations do not mutate your data (e.g. some Array methods, including map, filter, concat, forEach, etc.), but some do (Array&amp;rsquo;s pop, push, splice, etc.).</source>
          <target state="translated">Los datos encapsulados en un objeto Immutable.JS nunca se mutan. Siempre se devuelve una nueva copia. Esto contrasta con JavaScript, en el que algunas operaciones no mutan sus datos (por ejemplo, algunos m&amp;eacute;todos Array, incluidos map, filter, concat, forEach, etc.), pero otras s&amp;iacute; (pop, push, splice de Array, etc.).</target>
        </trans-unit>
        <trans-unit id="7593569c991b58f5d6a41f860519f79c89ac7d64" translate="yes" xml:space="preserve">
          <source>Data with IDs, nesting, or relationships should generally be stored in a &amp;ldquo;normalized&amp;rdquo; fashion: each object should be stored once, keyed by ID, and other objects that reference it should only store the ID rather than a copy of the entire object. It may help to think of parts of your store as a database, with individual &amp;ldquo;tables&amp;rdquo; per item type. Libraries such as &lt;a href=&quot;https://github.com/paularmstrong/normalizr&quot;&gt;normalizr&lt;/a&gt; and &lt;a href=&quot;https://github.com/tommikaikkonen/redux-orm&quot;&gt;redux-orm&lt;/a&gt; can provide help and abstractions in managing normalized data.</source>
          <target state="translated">Los datos con ID, anidamiento o relaciones generalmente deben almacenarse de una manera &quot;normalizada&quot;: cada objeto debe almacenarse una vez, codificado por ID, y otros objetos que hacen referencia a &amp;eacute;l solo deben almacenar el ID en lugar de una copia del objeto completo. Puede ser &amp;uacute;til pensar en partes de su tienda como una base de datos, con &quot;tablas&quot; individuales por tipo de art&amp;iacute;culo. Las bibliotecas como &lt;a href=&quot;https://github.com/paularmstrong/normalizr&quot;&gt;normalizr&lt;/a&gt; y &lt;a href=&quot;https://github.com/tommikaikkonen/redux-orm&quot;&gt;redux-orm&lt;/a&gt; pueden proporcionar ayuda y abstracciones en la gesti&amp;oacute;n de datos normalizados.</target>
        </trans-unit>
        <trans-unit id="65fce8bd8c421447a1dd474490698e1a12d0c27c" translate="yes" xml:space="preserve">
          <source>Database Design: Many-to-Many</source>
          <target state="translated">Diseño de la base de datos:Many-to-Many</target>
        </trans-unit>
        <trans-unit id="1fa63f66a3e39dbf462410620328fa6a5c9da175" translate="yes" xml:space="preserve">
          <source>Database Normalization in Simple English</source>
          <target state="translated">Normalización de la base de datos en inglés simple</target>
        </trans-unit>
        <trans-unit id="32877593ffc83fe4317187fc6ecc5223533036b1" translate="yes" xml:space="preserve">
          <source>Database structure and organization</source>
          <target state="translated">Estructura y organización de la base de datos</target>
        </trans-unit>
        <trans-unit id="6e6caf1f8d03433b6b3dbc198392d72cd0763d04" translate="yes" xml:space="preserve">
          <source>Defining State Shape</source>
          <target state="translated">Definición de la forma del estado</target>
        </trans-unit>
        <trans-unit id="49314fcc5d1e120d1d0902f4474a5db8b799f9b6" translate="yes" xml:space="preserve">
          <source>Defining a new variable does &lt;em&gt;not&lt;/em&gt; create a new actual object - it only creates another reference to the same object. An example of this error would be:</source>
          <target state="translated">La definici&amp;oacute;n de una nueva variable &lt;em&gt;no&lt;/em&gt; crea un nuevo objeto real, solo crea otra referencia al mismo objeto. Un ejemplo de este error ser&amp;iacute;a:</target>
        </trans-unit>
        <trans-unit id="bd4da65ee5f20805d0bb44ddd368a4514e6d0453" translate="yes" xml:space="preserve">
          <source>Defining reducer initial state</source>
          <target state="translated">Definición del estado inicial del reductor</target>
        </trans-unit>
        <trans-unit id="9f78359ef1da5a7d707b4be19086cd7ea706ec2f" translate="yes" xml:space="preserve">
          <source>Delegating update responsibility by slice of state (&lt;em&gt;reducer composition&lt;/em&gt;)</source>
          <target state="translated">Delegaci&amp;oacute;n de la responsabilidad de actualizaci&amp;oacute;n por sector de estado ( &lt;em&gt;composici&amp;oacute;n reductora&lt;/em&gt; )</target>
        </trans-unit>
        <trans-unit id="1296d584b1abd6003d9e6416a0989753f553b128" translate="yes" xml:space="preserve">
          <source>Designing Component Hierarchy</source>
          <target state="translated">Diseño de la jerarquía de componentes</target>
        </trans-unit>
        <trans-unit id="e6f93012b13a7122f93f6b433f36e83f1b2dfb67" translate="yes" xml:space="preserve">
          <source>Designing Container Components</source>
          <target state="translated">Diseño de los componentes del contenedor</target>
        </trans-unit>
        <trans-unit id="7810471483b121e68f2ab23125107a8e8d67064c" translate="yes" xml:space="preserve">
          <source>Designing Other Components</source>
          <target state="translated">Diseño de otros componentes</target>
        </trans-unit>
        <trans-unit id="095ba0b64724cee5424170abe9d2369a1356993a" translate="yes" xml:space="preserve">
          <source>Designing Presentational Components</source>
          <target state="translated">Diseño de componentes de presentación</target>
        </trans-unit>
        <trans-unit id="f307d5da7a84124c96764da2d65924d5f68585cd" translate="yes" xml:space="preserve">
          <source>Designing a Normalized State</source>
          <target state="translated">Diseño de un estado normalizado</target>
        </trans-unit>
        <trans-unit id="99b64b8cd5e20eb2ba80ed64b203752e415148ae" translate="yes" xml:space="preserve">
          <source>Designing the Algorithm</source>
          <target state="translated">Diseñando el Algoritmo</target>
        </trans-unit>
        <trans-unit id="b35f6f1ba63bafce6306862fed8e4ab702901f90" translate="yes" xml:space="preserve">
          <source>Designing the State Shape</source>
          <target state="translated">Diseñando la forma del estado</target>
        </trans-unit>
        <trans-unit id="c6c55bbe367ca8fb0838485f031ff1f37f152f0b" translate="yes" xml:space="preserve">
          <source>DevTools</source>
          <target state="translated">DevTools</target>
        </trans-unit>
        <trans-unit id="f2384c55c1021ace4ef6037926b470b0095b309e" translate="yes" xml:space="preserve">
          <source>DevTools Monitors</source>
          <target state="translated">Los monitores de DevTools</target>
        </trans-unit>
        <trans-unit id="4ed5637154269fe9a6be1732f927c29a0887441d" translate="yes" xml:space="preserve">
          <source>Developer Experience</source>
          <target state="translated">Experiencia del desarrollador</target>
        </trans-unit>
        <trans-unit id="1972dacb696b8fcf81bb0f74e9d8f176d7b71600" translate="yes" xml:space="preserve">
          <source>Difficult to Debug</source>
          <target state="translated">Difícil de depurar</target>
        </trans-unit>
        <trans-unit id="8d5353aaf7c5188baebbcacaf0df24469e5eb208" translate="yes" xml:space="preserve">
          <source>Difficult to interoperate with</source>
          <target state="translated">Difícil de interoperar con</target>
        </trans-unit>
        <trans-unit id="8fb937b602b4f2ef21c7fab00ac15de3b3ba49ea" translate="yes" xml:space="preserve">
          <source>Discussion</source>
          <target state="translated">Discussion</target>
        </trans-unit>
        <trans-unit id="ba63f5884c366cac612c111e65bfbc1bb0d9c688" translate="yes" xml:space="preserve">
          <source>Dispatch Redux actions</source>
          <target state="translated">Despachar acciones de Redux</target>
        </trans-unit>
        <trans-unit id="6a79a9e77ebead14cffe5188d0410f1e586d1501" translate="yes" xml:space="preserve">
          <source>Dispatches an action. This is the only way to trigger a state change.</source>
          <target state="translated">Envía una acción.Es la única manera de provocar un cambio de estado.</target>
        </trans-unit>
        <trans-unit id="c5de1b3bf84cda5dd071c256e4397b905445d1ed" translate="yes" xml:space="preserve">
          <source>Dispatching Actions</source>
          <target state="translated">Acciones de despacho</target>
        </trans-unit>
        <trans-unit id="ee258d3de8054840d9dbb2c1e3c54e55b09089fd" translate="yes" xml:space="preserve">
          <source>Dispatching Function</source>
          <target state="translated">Función de envío</target>
        </trans-unit>
        <trans-unit id="2940c23366cfc9866cf0dedabc5e7de427363110" translate="yes" xml:space="preserve">
          <source>Dispatching async actions is no different from dispatching synchronous actions, so we won't discuss this in detail. See &lt;a href=&quot;../basics/usagewithreact&quot;&gt;Usage with React&lt;/a&gt; for an introduction into using Redux from React components. See &lt;a href=&quot;exampleredditapi&quot;&gt;Example: Reddit API&lt;/a&gt; for the complete source code discussed in this example.</source>
          <target state="translated">Despachar acciones as&amp;iacute;ncronas no es diferente de despachar acciones s&amp;iacute;ncronas, por lo que no discutiremos esto en detalle. Consulte &lt;a href=&quot;../basics/usagewithreact&quot;&gt;Uso con React&lt;/a&gt; para obtener una introducci&amp;oacute;n al uso de Redux de los componentes de React. Consulte &lt;a href=&quot;exampleredditapi&quot;&gt;Ejemplo: API de Reddit&lt;/a&gt; para obtener el c&amp;oacute;digo fuente completo que se analiza en este ejemplo.</target>
        </trans-unit>
        <trans-unit id="d068c8a57b05988a99ec9db89530ed96daebd1f4" translate="yes" xml:space="preserve">
          <source>Do I have to deep-clone my state in a reducer? Isn't copying my state going to be slow?</source>
          <target state="translated">¿Tengo que clonar mi estado en un reductor? ¿Copiar mi estado no va a ser lento?</target>
        </trans-unit>
        <trans-unit id="caa79d0829b0d4f0c975b203f736245e67eda1ac" translate="yes" xml:space="preserve">
          <source>Do I have to put all my state into Redux? Should I ever use React's &lt;code&gt;setState()&lt;/code&gt;?</source>
          <target state="translated">&amp;iquest;Tengo que poner todo mi estado en Redux? &amp;iquest;Deber&amp;iacute;a usar el &lt;code&gt;setState()&lt;/code&gt; React ?</target>
        </trans-unit>
        <trans-unit id="3636bc59ec04bd17d42ee7274e5e3eb724ddb4f2" translate="yes" xml:space="preserve">
          <source>Do I have to put all my state into Redux? Should I ever use React's setState()?</source>
          <target state="translated">¿Tengo que poner todo mi estado en el Redux? ¿Debería usar el setState de React?</target>
        </trans-unit>
        <trans-unit id="7486a68c2117f403c3ca95e7a147f4be8fdc9437" translate="yes" xml:space="preserve">
          <source>Do I have to use Immutable.JS?</source>
          <target state="translated">¿Tengo que usar Immutable.JS?</target>
        </trans-unit>
        <trans-unit id="4e019a0f0b682311d1ef5e7b44aa30ef9a7eb403" translate="yes" xml:space="preserve">
          <source>Do I have to use the &lt;code&gt;switch&lt;/code&gt; statement to handle actions?</source>
          <target state="translated">&amp;iquest;Tengo que usar la instrucci&amp;oacute;n &lt;code&gt;switch&lt;/code&gt; para manejar acciones?</target>
        </trans-unit>
        <trans-unit id="5b739025b617dfa813fa405e23c0277f969c273f" translate="yes" xml:space="preserve">
          <source>Do I have to use the switch statement to handle actions?</source>
          <target state="translated">¿Tengo que usar la declaración del interruptor para manejar las acciones?</target>
        </trans-unit>
        <trans-unit id="04dfaeca86278099773342d666073f6978321758" translate="yes" xml:space="preserve">
          <source>Do I need to have a particular build tool to use Redux?</source>
          <target state="translated">¿Necesito tener una herramienta de construcción particular para usar Redux?</target>
        </trans-unit>
        <trans-unit id="9b60ee4844578949ccecf13536855592c60fe12e" translate="yes" xml:space="preserve">
          <source>Do not, however, use Immutable.JS in your dumb components.</source>
          <target state="translated">Sin embargo,no use Immutable.JS en sus componentes tontos.</target>
        </trans-unit>
        <trans-unit id="4a8b5e6217f9ee788c8250a9d130537eb4c43e5f" translate="yes" xml:space="preserve">
          <source>Do other parts of the application care about this data?</source>
          <target state="translated">¿Se preocupan otras partes de la aplicación por estos datos?</target>
        </trans-unit>
        <trans-unit id="88c60268b9a702d1f66d359ec783eeff4c903f73" translate="yes" xml:space="preserve">
          <source>Do you need to be able to create further derived data based on this original data?</source>
          <target state="translated">¿Necesita poder crear más datos derivados basados en estos datos originales?</target>
        </trans-unit>
        <trans-unit id="4a7b10f54d6c1236b3c9f64a98cb069e05bfcec5" translate="yes" xml:space="preserve">
          <source>Do you want to cache the data (ie, use what's in state if it's already there instead of re-requesting it)?</source>
          <target state="translated">¿Quieres guardar los datos en caché (es decir,usar lo que está en estado si ya está allí en lugar de volver a solicitarlo)?</target>
        </trans-unit>
        <trans-unit id="5cfcf7555c4a87f604bf343228e431e941928a19" translate="yes" xml:space="preserve">
          <source>Docs: Async Actions</source>
          <target state="translated">Doctores:Acciones de Asignación</target>
        </trans-unit>
        <trans-unit id="9e9cf3221a30246219863f1d2366e36cb580debc" translate="yes" xml:space="preserve">
          <source>Documentation</source>
          <target state="translated">Documentation</target>
        </trans-unit>
        <trans-unit id="8181fac4ec0bea3cecb41f787698bf543db5208d" translate="yes" xml:space="preserve">
          <source>Does it make sense to use Redux together with RxJS? Sure! They work great together. For example, it is easy to expose a Redux store as an observable:</source>
          <target state="translated">¿Tiene sentido usar Redux junto con RxJS? ¡Claro! Trabajan muy bien juntos.Por ejemplo,es fácil exponer una tienda Redux como un observatorio:</target>
        </trans-unit>
        <trans-unit id="e1305d9a919be6e6f9ecdeed5c7f2f2e478ed670" translate="yes" xml:space="preserve">
          <source>Does not &lt;em&gt;call non-pure functions&lt;/em&gt; (like &lt;code&gt;Date.now&lt;/code&gt; or &lt;code&gt;Math.random&lt;/code&gt;).</source>
          <target state="translated">No &lt;em&gt;llama a funciones no puras&lt;/em&gt; (como &lt;code&gt;Date.now&lt;/code&gt; o &lt;code&gt;Math.random&lt;/code&gt; ).</target>
        </trans-unit>
        <trans-unit id="308816fda77ecb92fa0de1e1d751c4e3693e8be6" translate="yes" xml:space="preserve">
          <source>Does not &lt;em&gt;mutate&lt;/em&gt; its arguments. If the reducer updates state, it should not &lt;em&gt;modify&lt;/em&gt; the &lt;strong&gt;existing&lt;/strong&gt; state object in-place. Instead, it should generate a &lt;strong&gt;new&lt;/strong&gt; object containing the necessary changes. The same approach should be used for any sub-objects within state that the reducer updates.</source>
          <target state="translated">No &lt;em&gt;muta&lt;/em&gt; sus argumentos. Si el reductor actualiza el estado, no debe &lt;em&gt;modificar&lt;/em&gt; el objeto de estado &lt;strong&gt;existente&lt;/strong&gt; en su lugar. En cambio, deber&amp;iacute;a generar un &lt;strong&gt;nuevo&lt;/strong&gt; objeto que contenga los cambios necesarios. Se debe utilizar el mismo enfoque para cualquier subobjeto dentro del estado que actualice el reductor.</target>
        </trans-unit>
        <trans-unit id="e22b1d9946b43200b9db286efe37087e730da043" translate="yes" xml:space="preserve">
          <source>Does not &lt;em&gt;perform side effects&lt;/em&gt; (such as calling API's or modifying non-local objects or variables).</source>
          <target state="translated">No &lt;em&gt;realiza efectos secundarios&lt;/em&gt; (como llamar a API o modificar objetos o variables no locales).</target>
        </trans-unit>
        <trans-unit id="901adbd801774ee77110f7fe930f88786af2ec3e" translate="yes" xml:space="preserve">
          <source>Does shallow equality checking with a mutable object cause problems with Redux?</source>
          <target state="translated">¿Comprobar la igualdad superficial con un objeto mutable causa problemas con el Redux?</target>
        </trans-unit>
        <trans-unit id="acbce74552f0dc7776acd620559f6ae39660da73" translate="yes" xml:space="preserve">
          <source>Doing a shallow copy of the top level is &lt;em&gt;not&lt;/em&gt; sufficient - the &lt;code&gt;nestedState&lt;/code&gt; object should be copied as well.</source>
          <target state="translated">Hacer una copia superficial del nivel superior &lt;em&gt;no&lt;/em&gt; es suficiente; el objeto &lt;code&gt;nestedState&lt;/code&gt; tambi&amp;eacute;n debe copiarse.</target>
        </trans-unit>
        <trans-unit id="dd72a551e03c242c187b72b86ec827595d6e90b6" translate="yes" xml:space="preserve">
          <source>Domain-style: separate folders per feature or domain, possibly with sub-folders per file type</source>
          <target state="translated">Estilo de dominio:carpetas separadas por característica o dominio,posiblemente con subcarpetas por tipo de archivo</target>
        </trans-unit>
        <trans-unit id="2b32a297d0fa3a03eb8b498f0629572a9c1acda3" translate="yes" xml:space="preserve">
          <source>Don't be fooled by all the fancy talk about reducers, middleware, store enhancers&amp;mdash;Redux is incredibly simple. If you've ever built a Flux application, you will feel right at home. If you're new to Flux, it's easy too!</source>
          <target state="translated">No se deje enga&amp;ntilde;ar por todas las charlas sofisticadas sobre reductores, middleware, potenciadores de tienda: Redux es incre&amp;iacute;blemente simple. Si alguna vez ha creado una aplicaci&amp;oacute;n Flux, se sentir&amp;aacute; como en casa. Si es nuevo en Flux, &amp;iexcl;tambi&amp;eacute;n es f&amp;aacute;cil!</target>
        </trans-unit>
        <trans-unit id="e60dca1e1c4e8a1060f3f909eb0e179e31b4080d" translate="yes" xml:space="preserve">
          <source>Don't create more than one store in an application! Instead, use &lt;a href=&quot;combinereducers&quot;&gt;&lt;code&gt;combineReducers&lt;/code&gt;&lt;/a&gt; to create a single root reducer out of many.</source>
          <target state="translated">&amp;iexcl;No cree m&amp;aacute;s de una tienda en una aplicaci&amp;oacute;n! En su lugar, use &lt;a href=&quot;combinereducers&quot;&gt; &lt;code&gt;combineReducers&lt;/code&gt; &lt;/a&gt; para crear un &amp;uacute;nico reductor de ra&amp;iacute;z entre muchos.</target>
        </trans-unit>
        <trans-unit id="dffae83d98e05f1f4c0b98f460a952b65b10e233" translate="yes" xml:space="preserve">
          <source>Don't forget to call &lt;a href=&quot;api/store#dispatch&quot;&gt;&lt;code&gt;dispatch(action)&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">No olvide llamar al &lt;a href=&quot;api/store#dispatch&quot;&gt; &lt;code&gt;dispatch(action)&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="495284d10f80785f137d2b0ebaf638b1a961c65d" translate="yes" xml:space="preserve">
          <source>ES5 (CommonJS)</source>
          <target state="translated">ES5 (CommonJS)</target>
        </trans-unit>
        <trans-unit id="745ddb845c45ed0aef6da5a7c40b9250b9a325e0" translate="yes" xml:space="preserve">
          <source>ES5 (UMD build)</source>
          <target state="translated">ES5 (UMD build)</target>
        </trans-unit>
        <trans-unit id="f340712260381d35a53813a65d261137ac25e7e6" translate="yes" xml:space="preserve">
          <source>ES6</source>
          <target state="translated">ES6</target>
        </trans-unit>
        <trans-unit id="ce35c00a38ecfe2f4b7ca71185bfb3dae5d5f370" translate="yes" xml:space="preserve">
          <source>Each &quot;data table&quot; should store the individual items in an object, with the IDs of the items as keys and the items themselves as the values.</source>
          <target state="translated">Cada &quot;tabla de datos&quot; debe almacenar los elementos individuales de un objeto,con las identificaciones de los elementos como claves y los propios elementos como valores.</target>
        </trans-unit>
        <trans-unit id="789740bc75be7ca6e2b1e0c1d3adb891edb730c5" translate="yes" xml:space="preserve">
          <source>Each &lt;code&gt;VisibleTodoList&lt;/code&gt; container should select a different slice of the state depending on the value of the &lt;code&gt;listId&lt;/code&gt; prop, so let's modify &lt;code&gt;getVisibilityFilter&lt;/code&gt; and &lt;code&gt;getTodos&lt;/code&gt; to accept a props argument:</source>
          <target state="translated">Cada contenedor &lt;code&gt;VisibleTodoList&lt;/code&gt; debe seleccionar una porci&amp;oacute;n diferente del estado dependiendo del valor de la propiedad &lt;code&gt;listId&lt;/code&gt; , as&amp;iacute; que modifiquemos &lt;code&gt;getVisibilityFilter&lt;/code&gt; y &lt;code&gt;getTodos&lt;/code&gt; para aceptar un argumento de propiedades :</target>
        </trans-unit>
        <trans-unit id="ca9118903269eef24fd5dbfa80396b4917cc79e2" translate="yes" xml:space="preserve">
          <source>Each function below is a valid Redux middleware. They are not equally useful, but at least they are equally fun.</source>
          <target state="translated">Cada función de abajo es un middleware Redux válido.No son igualmente útiles,pero al menos son igualmente divertidas.</target>
        </trans-unit>
        <trans-unit id="2aef125e7da3027756ffee796bf82b1ad655ceee" translate="yes" xml:space="preserve">
          <source>Each of these two moments usually require a change in the application state; to do that, you need to dispatch normal actions that will be processed by reducers synchronously. Usually, for any API request you'll want to dispatch at least three different kinds of actions:</source>
          <target state="translated">Cada uno de estos dos momentos suele requerir un cambio en el estado de la aplicación;para ello,es necesario despachar las acciones normales que serán procesadas por los reductores de forma sincronizada.Por lo general,para cualquier solicitud de la API querrá enviar al menos tres tipos de acciones diferentes:</target>
        </trans-unit>
        <trans-unit id="b94061bea8551ce9cef03e7d29d9b7bc74bb6280" translate="yes" xml:space="preserve">
          <source>Each time React-Redux&amp;rsquo;s &lt;code&gt;connect&lt;/code&gt; function is called, it will perform a shallow equality check on its stored reference to the root state object, and the current root state object passed to it from the store. If the check passes, the root state object has not been updated, and so there is no need to re-render the component, or even call &lt;code&gt;mapStateToProps&lt;/code&gt;.</source>
          <target state="translated">Cada vez que se llama a la funci&amp;oacute;n de &lt;code&gt;connect&lt;/code&gt; React-Redux , realizar&amp;aacute; una verificaci&amp;oacute;n de igualdad superficial en su referencia almacenada al objeto de estado ra&amp;iacute;z, y el objeto de estado ra&amp;iacute;z actual que se le pasa desde la tienda. Si la verificaci&amp;oacute;n pasa, el objeto de estado ra&amp;iacute;z no se ha actualizado, por lo que no es necesario volver a renderizar el componente, ni siquiera llamar a &lt;code&gt;mapStateToProps&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="8ac62ddd16da80245d0cc537482a69476b215083" translate="yes" xml:space="preserve">
          <source>Each type of data gets its own &quot;table&quot; in the state.</source>
          <target state="translated">Cada tipo de datos tiene su propia &quot;tabla&quot; en el estado.</target>
        </trans-unit>
        <trans-unit id="73f0d5e4c1ae9f4f2cda609ae918e95f2ac644be" translate="yes" xml:space="preserve">
          <source>Earlier documentation suggested the use of the ES6 &lt;code&gt;import * as reducers&lt;/code&gt; syntax to obtain the reducers object. This was the source of a lot of confusion, which is why we now recommend exporting a single reducer obtained using &lt;code&gt;combineReducers()&lt;/code&gt; from &lt;code&gt;reducers/index.js&lt;/code&gt; instead. An example is included below.</source>
          <target state="translated">La documentaci&amp;oacute;n anterior sugiri&amp;oacute; el uso de la &lt;code&gt;import * as reducers&lt;/code&gt; ES6 * como sintaxis de reductores para obtener el objeto reductores. Esta fue la fuente de mucha confusi&amp;oacute;n, por lo que ahora recomendamos exportar un solo reductor obtenido usando &lt;code&gt;combineReducers()&lt;/code&gt; de reducers &lt;code&gt;reducers/index.js&lt;/code&gt; lugar. A continuaci&amp;oacute;n se incluye un ejemplo.</target>
        </trans-unit>
        <trans-unit id="67ebf8c054640eac7707617ac6e4bacc793e0e77" translate="yes" xml:space="preserve">
          <source>Early Redux documentation advised that you should only have a few connected components near the top of your component tree. However, time and experience has shown that that generally requires a few components to know too much about the data requirements of all their descendants, and forces them to pass down a confusing number of props.</source>
          <target state="translated">La documentación de Early Redux aconsejaba que sólo debería tener unos pocos componentes conectados cerca de la parte superior de su árbol de componentes.Sin embargo,el tiempo y la experiencia han demostrado que eso generalmente requiere que unos pocos componentes sepan demasiado sobre los requisitos de datos de todos sus descendientes,y los obliga a transmitir un número confuso de accesorios.</target>
        </trans-unit>
        <trans-unit id="9f12cdfc5423f3f8f4b141824700661516b50d41" translate="yes" xml:space="preserve">
          <source>Ecosystem</source>
          <target state="translated">Ecosystem</target>
        </trans-unit>
        <trans-unit id="80499668424a593b571c96afb7bfa53680db9225" translate="yes" xml:space="preserve">
          <source>Eddie Zaneski</source>
          <target state="translated">Eddie Zaneski</target>
        </trans-unit>
        <trans-unit id="c78c0f2575bc2cbbd58e1c8e6bfbabc097fdacf8" translate="yes" xml:space="preserve">
          <source>Egghead.io: Redux: Implementing combineReducers() from Scratch</source>
          <target state="translated">Cabeza de huevo:Redux:Implementando combineReducers()de Scratch</target>
        </trans-unit>
        <trans-unit id="a5bfc7a7b3d59e7e7fc34f2665c9e5ecf3f615b6" translate="yes" xml:space="preserve">
          <source>Elm</source>
          <target state="translated">Elm</target>
        </trans-unit>
        <trans-unit id="b0e68be5c4150141a8b181ac2f45237a837582b3" translate="yes" xml:space="preserve">
          <source>Emphasizing &amp;ldquo;one container component at the top&amp;rdquo; in Redux examples was a mistake. Don't take this as a maxim. Try to keep your presentation components separate. Create container components by connecting them when it's convenient. Whenever you feel like you're duplicating code in parent components to provide data for same kinds of children, time to extract a container. Generally as soon as you feel a parent knows too much about &amp;ldquo;personal&amp;rdquo; data or actions of its children, time to extract a container.</source>
          <target state="translated">Enfatizar &amp;ldquo;un componente de contenedor en la parte superior&amp;rdquo; en los ejemplos de Redux fue un error. No tomes esto como una m&amp;aacute;xima. Intente mantener separados los componentes de su presentaci&amp;oacute;n. Cree componentes de contenedor conect&amp;aacute;ndolos cuando sea conveniente. Siempre que sienta que est&amp;aacute; duplicando c&amp;oacute;digo en componentes principales para proporcionar datos para los mismos tipos de hijos, es hora de extraer un contenedor. Generalmente, tan pronto como sienta que un padre sabe demasiado sobre los datos &quot;personales&quot; o las acciones de sus hijos, es hora de extraer un contenedor.</target>
        </trans-unit>
        <trans-unit id="7c1a0998563346ad2e48c38b39741bb352b08e65" translate="yes" xml:space="preserve">
          <source>Encapsulating and centralizing commonly used pieces of code is a key concept in programming. While it is certainly possible to manually create action objects everywhere, and write each &lt;code&gt;type&lt;/code&gt; value by hand, defining reusable constants makes maintaining code easier. If you put constants in a separate file, you can &lt;a href=&quot;https://www.npmjs.com/package/eslint-plugin-import&quot;&gt;check your &lt;code&gt;import&lt;/code&gt; statements against typos&lt;/a&gt; so you can't accidentally use the wrong string.</source>
          <target state="translated">Encapsular y centralizar piezas de c&amp;oacute;digo de uso com&amp;uacute;n es un concepto clave en la programaci&amp;oacute;n. Si bien es posible crear manualmente objetos de acci&amp;oacute;n en todas partes y escribir cada valor de &lt;code&gt;type&lt;/code&gt; mano, la definici&amp;oacute;n de constantes reutilizables facilita el mantenimiento del c&amp;oacute;digo. Si coloca constantes en un archivo separado, puede &lt;a href=&quot;https://www.npmjs.com/package/eslint-plugin-import&quot;&gt;verificar sus declaraciones de &lt;code&gt;import&lt;/code&gt; aci&amp;oacute;n contra errores tipogr&amp;aacute;ficos&lt;/a&gt; para que no pueda usar accidentalmente la cadena incorrecta.</target>
        </trans-unit>
        <trans-unit id="5b2f465254c1894a55c4eae9816aef0a576c3b88" translate="yes" xml:space="preserve">
          <source>Encapsulating the Redux State Tree</source>
          <target state="translated">Encapsulando el Árbol del Estado Redux</target>
        </trans-unit>
        <trans-unit id="fd530f3fb4530f659965d7db1794f6c9a3831280" translate="yes" xml:space="preserve">
          <source>Enforcing that every change is described as an action lets us have a clear understanding of what&amp;rsquo;s going on in the app. If something changed, we know why it changed. Actions are like breadcrumbs of what has happened. Finally, to tie state and actions together, we write a function called a reducer. Again, nothing magical about it&amp;mdash;it&amp;rsquo;s just a function that takes state and action as arguments, and returns the next state of the app. It would be hard to write such a function for a big app, so we write smaller functions managing parts of the state:</source>
          <target state="translated">Hacer cumplir que cada cambio se describe como una acci&amp;oacute;n nos permite tener una comprensi&amp;oacute;n clara de lo que est&amp;aacute; sucediendo en la aplicaci&amp;oacute;n. Si algo cambi&amp;oacute;, sabemos por qu&amp;eacute; cambi&amp;oacute;. Las acciones son como migas de pan de lo que ha sucedido. Finalmente, para unir el estado y las acciones, escribimos una funci&amp;oacute;n llamada reductor. De nuevo, no tiene nada de m&amp;aacute;gico: es solo una funci&amp;oacute;n que toma el estado y la acci&amp;oacute;n como argumentos y devuelve el siguiente estado de la aplicaci&amp;oacute;n. Ser&amp;iacute;a dif&amp;iacute;cil escribir una funci&amp;oacute;n de este tipo para una aplicaci&amp;oacute;n grande, por lo que escribimos funciones m&amp;aacute;s peque&amp;ntilde;as que administran partes del estado:</target>
        </trans-unit>
        <trans-unit id="465e88db20c49fa14df715ad3c0631b26ca590c4" translate="yes" xml:space="preserve">
          <source>Enhancers</source>
          <target state="translated">Enhancers</target>
        </trans-unit>
        <trans-unit id="a88e7a573b0a77f73eb1f2a5e5b8de48275a7af8" translate="yes" xml:space="preserve">
          <source>Entry Point</source>
          <target state="translated">Punto de entrada</target>
        </trans-unit>
        <trans-unit id="1552f36ee13c5c4910ec207795eb05b9e58ae679" translate="yes" xml:space="preserve">
          <source>Even though the array might contain the exact same object references each time, the array itself is a different reference, so the shallow equality check fails and React Redux would re-render the wrapped component.</source>
          <target state="translated">Aunque la matriz pueda contener exactamente las mismas referencias de objeto cada vez,la matriz en sí es una referencia diferente,por lo que la comprobación de igualdad superficial falla y React Redux volvería a renderizar el componente envuelto.</target>
        </trans-unit>
        <trans-unit id="b6a853804467e62df08fd20ca2def253cd121c2e" translate="yes" xml:space="preserve">
          <source>Ever wondered what &lt;code&gt;applyMiddleware&lt;/code&gt; itself is? It ought to be an extension mechanism more powerful than the middleware itself. Indeed, &lt;code&gt;applyMiddleware&lt;/code&gt; is an example of the most powerful Redux extension mechanism called &lt;a href=&quot;../glossary#store-enhancer&quot;&gt;store enhancers&lt;/a&gt;. It is highly unlikely you'll ever want to write a store enhancer yourself. Another example of a store enhancer is &lt;a href=&quot;https://github.com/gaearon/redux-devtools&quot;&gt;redux-devtools&lt;/a&gt;. Middleware is less powerful than a store enhancer, but it is easier to write.</source>
          <target state="translated">&amp;iquest;Alguna vez se pregunt&amp;oacute; qu&amp;eacute; es &lt;code&gt;applyMiddleware&lt;/code&gt; ? Deber&amp;iacute;a ser un mecanismo de extensi&amp;oacute;n m&amp;aacute;s poderoso que el propio middleware. De hecho, &lt;code&gt;applyMiddleware&lt;/code&gt; es un ejemplo del mecanismo de extensi&amp;oacute;n de Redux m&amp;aacute;s poderoso llamado optimizadores de &lt;a href=&quot;../glossary#store-enhancer&quot;&gt;tienda&lt;/a&gt; . Es muy poco probable que alguna vez quieras escribir un potenciador de tienda t&amp;uacute; mismo. Otro ejemplo de potenciador de tienda es &lt;a href=&quot;https://github.com/gaearon/redux-devtools&quot;&gt;redux-devtools&lt;/a&gt; . El middleware es menos poderoso que un potenciador de tienda, pero es m&amp;aacute;s f&amp;aacute;cil de escribir.</target>
        </trans-unit>
        <trans-unit id="613117dad82d7464518f38d5d2754bffda2b7b97" translate="yes" xml:space="preserve">
          <source>Ever wondered what &lt;code&gt;applyMiddleware&lt;/code&gt; itself is? It ought to be an extension mechanism more powerful than the middleware itself. Indeed, &lt;code&gt;applyMiddleware&lt;/code&gt; is an example of the most powerful Redux extension mechanism called &lt;a href=&quot;https://redux.js.org/understanding/thinking-in-redux/glossary#store-enhancer&quot;&gt;store enhancers&lt;/a&gt;. It is highly unlikely you'll ever want to write a store enhancer yourself. Another example of a store enhancer is &lt;a href=&quot;https://github.com/reduxjs/redux-devtools&quot;&gt;redux-devtools&lt;/a&gt;. Middleware is less powerful than a store enhancer, but it is easier to write.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fc61f5aead67e5d9613283a1a13842ab6b6cf6dd" translate="yes" xml:space="preserve">
          <source>Every function described above is a top-level export. You can import any of them like this:</source>
          <target state="translated">Cada una de las funciones descritas anteriormente es una exportación de nivel superior.Puedes importar cualquiera de ellas así:</target>
        </trans-unit>
        <trans-unit id="f5ee7559d25a08d85f86a3eafc206977946b6a08" translate="yes" xml:space="preserve">
          <source>Every release, along with the migration instructions, is documented on the Github &lt;a href=&quot;https://github.com/reactjs/redux/releases&quot;&gt;Releases&lt;/a&gt; page.</source>
          <target state="translated">Cada versi&amp;oacute;n, junto con las instrucciones de migraci&amp;oacute;n, se documenta en la p&amp;aacute;gina de &lt;a href=&quot;https://github.com/reactjs/redux/releases&quot;&gt;versiones de&lt;/a&gt; Github .</target>
        </trans-unit>
        <trans-unit id="0f01ed56a1e32a05e5ef96e4d779f34784af9a96" translate="yes" xml:space="preserve">
          <source>Example</source>
          <target state="translated">Example</target>
        </trans-unit>
        <trans-unit id="e3199316bf69a183958e485b0e3d61bc9694e2fb" translate="yes" xml:space="preserve">
          <source>Example Apps</source>
          <target state="translated">Aplicaciones de ejemplo</target>
        </trans-unit>
        <trans-unit id="c63737abd7347a7ae582cb9fbdf37d6c0e5b251e" translate="yes" xml:space="preserve">
          <source>Example:</source>
          <target state="translated">Example:</target>
        </trans-unit>
        <trans-unit id="29f523dd5956d4673cb690577c1f546426cc73cb" translate="yes" xml:space="preserve">
          <source>Example: Custom Logger Middleware</source>
          <target state="translated">Ejemplo:Custom Logger Middleware</target>
        </trans-unit>
        <trans-unit id="2624afd8c460d6518734431bfb5d77b64cd9d60b" translate="yes" xml:space="preserve">
          <source>Example: Reddit API</source>
          <target state="translated">Ejemplo:Reddit API</target>
        </trans-unit>
        <trans-unit id="cfa9b551b74932054b2efb6c627693e8d27f541a" translate="yes" xml:space="preserve">
          <source>Example: Todo List</source>
          <target state="translated">Ejemplo:Lista de todos</target>
        </trans-unit>
        <trans-unit id="76a4c17cabc25fb419d3b53e5dbaa4dd4a5664bd" translate="yes" xml:space="preserve">
          <source>Example: Using Thunk Middleware for Async Actions</source>
          <target state="translated">Ejemplo:Uso de Thunk Middleware para acciones de Async</target>
        </trans-unit>
        <trans-unit id="b2cb195953d05f6f64b411aef09c8d5fcbaad565" translate="yes" xml:space="preserve">
          <source>Example&lt;a href=&quot;#example-1&quot;&gt;#&lt;/a&gt;</source>
          <target state="translated">Example&lt;a href=&quot;#example-1&quot;&gt;#&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="eb01bf04c9a0e8a71c45816513df424f1c7ffedb" translate="yes" xml:space="preserve">
          <source>Examples</source>
          <target state="translated">Examples</target>
        </trans-unit>
        <trans-unit id="5f96798ae5ca58a4c6c508043f2d289c9f41fbff" translate="yes" xml:space="preserve">
          <source>Examples: Real World example</source>
          <target state="translated">Ejemplos:Ejemplo del mundo real</target>
        </trans-unit>
        <trans-unit id="4a0cf0d774ed2b3b87b2898557f897bfef233151" translate="yes" xml:space="preserve">
          <source>Examples: Tree View</source>
          <target state="translated">Ejemplos:Vista de árbol</target>
        </trans-unit>
        <trans-unit id="032263383a22a1454a019ce94b7dce90ebcad1e2" translate="yes" xml:space="preserve">
          <source>Exploring Redux Middleware</source>
          <target state="translated">Explorando el Middleware Redux</target>
        </trans-unit>
        <trans-unit id="b171f7143f21268e520b74f4f5ead4fcb82ce831" translate="yes" xml:space="preserve">
          <source>Extracting Case Reducers</source>
          <target state="translated">Extracción de reductores de casos</target>
        </trans-unit>
        <trans-unit id="1be76799495bdf5c930a8ddd44f5e9d6d64c47cb" translate="yes" xml:space="preserve">
          <source>Extracting Utility Functions</source>
          <target state="translated">Extracción de funciones de utilidad</target>
        </trans-unit>
        <trans-unit id="03688ba6aa340b87549088aa5739944cb6b1dc73" translate="yes" xml:space="preserve">
          <source>FAQ</source>
          <target state="translated">FAQ</target>
        </trans-unit>
        <trans-unit id="e38e4017ee383168752e8a33c5d6022a9a406df4" translate="yes" xml:space="preserve">
          <source>FAQ: Actions - &quot;1:1 mapping between reducers and actions?&quot;</source>
          <target state="translated">PREGUNTAS FRECUENTES:Acciones-&quot;¿Mapeo 1:1 entre los reductores y las acciones?&quot;</target>
        </trans-unit>
        <trans-unit id="df7e17066220bc43c820094351b4e2c42bbba769" translate="yes" xml:space="preserve">
          <source>FAQ: Immutable Data</source>
          <target state="translated">PREGUNTAS FRECUENTES:Datos inmutables</target>
        </trans-unit>
        <trans-unit id="7a41b860bf1ee467edbac48fd846ae33b759b787" translate="yes" xml:space="preserve">
          <source>FAQ: Performance - Reducing Update Events</source>
          <target state="translated">PREGUNTAS FRECUENTES:Rendimiento-Reducción de los eventos de actualización</target>
        </trans-unit>
        <trans-unit id="ee0854a17ba3e0b5e9e9e1c578ac31d5ab4c9027" translate="yes" xml:space="preserve">
          <source>FAQ: Performance - Scaling</source>
          <target state="translated">FAQ:Rendimiento-Escalado</target>
        </trans-unit>
        <trans-unit id="a3ab661908a8748685e7811083bdaf66ba18c68b" translate="yes" xml:space="preserve">
          <source>Finally, Redux provides a utility called &lt;a href=&quot;../api/combinereducers&quot;&gt;&lt;code&gt;combineReducers()&lt;/code&gt;&lt;/a&gt; that does the same boilerplate logic that the &lt;code&gt;todoApp&lt;/code&gt; above currently does. With its help, we can rewrite &lt;code&gt;todoApp&lt;/code&gt; like this:</source>
          <target state="translated">Finalmente, Redux proporciona una utilidad llamada &lt;a href=&quot;../api/combinereducers&quot;&gt; &lt;code&gt;combineReducers()&lt;/code&gt; &lt;/a&gt; que hace la misma l&amp;oacute;gica &lt;code&gt;todoApp&lt;/code&gt; que hace actualmente todoApp anterior. Con su ayuda, podemos reescribir &lt;code&gt;todoApp&lt;/code&gt; as&amp;iacute;:</target>
        </trans-unit>
        <trans-unit id="0d847a6b9dee3deeeb8620787402b3a6277cb077" translate="yes" xml:space="preserve">
          <source>Finally, how do we use the synchronous action creators we &lt;a href=&quot;#synchronous-action-creators&quot;&gt;defined earlier&lt;/a&gt; together with network requests? The standard way to do it with Redux is to use the &lt;a href=&quot;https://github.com/gaearon/redux-thunk&quot;&gt;Redux Thunk middleware&lt;/a&gt;. It comes in a separate package called &lt;code&gt;redux-thunk&lt;/code&gt;. We'll explain how middleware works in general &lt;a href=&quot;middleware&quot;&gt;later&lt;/a&gt;; for now, there is just one important thing you need to know: by using this specific middleware, an action creator can return a function instead of an action object. This way, the action creator becomes a &lt;a href=&quot;https://en.wikipedia.org/wiki/Thunk&quot;&gt;thunk&lt;/a&gt;.</source>
          <target state="translated">Por &amp;uacute;ltimo, &amp;iquest;c&amp;oacute;mo utilizamos los creadores de acciones s&amp;iacute;ncronas que &lt;a href=&quot;#synchronous-action-creators&quot;&gt;definimos anteriormente&lt;/a&gt; junto con las solicitudes de red? La forma est&amp;aacute;ndar de hacerlo con Redux es usar el &lt;a href=&quot;https://github.com/gaearon/redux-thunk&quot;&gt;middleware Redux Thunk&lt;/a&gt; . Viene en un paquete separado llamado &lt;code&gt;redux-thunk&lt;/code&gt; . Explicaremos c&amp;oacute;mo funciona el middleware en general &lt;a href=&quot;middleware&quot;&gt;m&amp;aacute;s adelante&lt;/a&gt; ; por ahora, solo hay una cosa importante que necesita saber: al usar este middleware espec&amp;iacute;fico, un creador de acciones puede devolver una funci&amp;oacute;n en lugar de un objeto de acci&amp;oacute;n. De esta manera, el creador de la acci&amp;oacute;n se convierte en un &lt;a href=&quot;https://en.wikipedia.org/wiki/Thunk&quot;&gt;procesador&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="efe6ba28d43370e1a707260f9b15d1702f3f2d3e" translate="yes" xml:space="preserve">
          <source>Finally, if the user performs an action (e.g. decrement the counter) while we're in the middle of the undo stack, we're going to discard the existing future:</source>
          <target state="translated">Por último,si el usuario realiza una acción (por ejemplo,disminuir el contador)mientras estamos en medio de la pila de deshacer,vamos a descartar el futuro existente:</target>
        </trans-unit>
        <trans-unit id="11194f10e6abbfaba6e4a214b87b681a0b877527" translate="yes" xml:space="preserve">
          <source>Finally, the implementation of the &lt;code&gt;TOGGLE_TODO&lt;/code&gt; handler shouldn't come as a complete surprise:</source>
          <target state="translated">Finalmente, la implementaci&amp;oacute;n del controlador &lt;code&gt;TOGGLE_TODO&lt;/code&gt; no deber&amp;iacute;a ser una sorpresa completa:</target>
        </trans-unit>
        <trans-unit id="d36e5836f13cd173c594e9d1ae569e82cd4fcdf5" translate="yes" xml:space="preserve">
          <source>Finally, to update objects, you'll need something like &lt;code&gt;_.extend&lt;/code&gt; from Underscore, or better, an &lt;a href=&quot;https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Object/assign&quot;&gt;&lt;code&gt;Object.assign&lt;/code&gt;&lt;/a&gt; polyfill.</source>
          <target state="translated">Finalmente, para actualizar objetos, necesitar&amp;aacute; algo como &lt;code&gt;_.extend&lt;/code&gt; de Underscore, o mejor, un polyfill de &lt;a href=&quot;https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Object/assign&quot;&gt; &lt;code&gt;Object.assign&lt;/code&gt; &lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="199eca41911960b98af69aa50c0333310e9f9b48" translate="yes" xml:space="preserve">
          <source>Finally, we create the &lt;code&gt;VisibleTodoList&lt;/code&gt; by calling &lt;code&gt;connect()&lt;/code&gt; and passing these two functions:</source>
          <target state="translated">Finalmente, creamos &lt;code&gt;VisibleTodoList&lt;/code&gt; llamando a &lt;code&gt;connect()&lt;/code&gt; y pasando estas dos funciones:</target>
        </trans-unit>
        <trans-unit id="ca381bfbf08ee78348d1eccdc53ec800366da008" translate="yes" xml:space="preserve">
          <source>Finally, we'll add one more action type for changing the currently visible todos.</source>
          <target state="translated">Por último,añadiremos un tipo de acción más para cambiar el todos actualmente visible.</target>
        </trans-unit>
        <trans-unit id="905199d1f6693b173b187362217e8ceaf7447b9d" translate="yes" xml:space="preserve">
          <source>Finally, when the network request comes through, we will dispatch &lt;code&gt;RECEIVE_POSTS&lt;/code&gt;:</source>
          <target state="translated">Finalmente, cuando llegue la solicitud de red, enviaremos &lt;code&gt;RECEIVE_POSTS&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="0d68b76ad804092f57e99c9239a27fd692ed5c9b" translate="yes" xml:space="preserve">
          <source>Finally, you might want to begin using some Redux idioms like middleware to further simplify your asynchronous code.</source>
          <target state="translated">Por último,tal vez quieras empezar a usar algunos modismos de Redux como el middleware para simplificar aún más tu código asíncrono.</target>
        </trans-unit>
        <trans-unit id="909dbfd3043edaf382cc7e5528d1f59884ba5ee8" translate="yes" xml:space="preserve">
          <source>Find the balance between these two extremes, and you will master Redux.</source>
          <target state="translated">Encuentra el equilibrio entre estos dos extremos,y dominarás el Redux.</target>
        </trans-unit>
        <trans-unit id="6f07a78d30b7ff474926fd0dc8957f55aa822b17" translate="yes" xml:space="preserve">
          <source>Find the rest of the container components defined below:</source>
          <target state="translated">Encuentra el resto de los componentes del contenedor definidos a continuación:</target>
        </trans-unit>
        <trans-unit id="4f6506477b8650e1de1bd943b9bd705e36a074e2" translate="yes" xml:space="preserve">
          <source>Finding &lt;code&gt;state&lt;/code&gt;'s place with React and Redux</source>
          <target state="translated">Encontrar el lugar del &lt;code&gt;state&lt;/code&gt; con React y Redux</target>
        </trans-unit>
        <trans-unit id="73d1849effa55d228df19c7e131b0d22e859600d" translate="yes" xml:space="preserve">
          <source>Finished reading the article? Let's recount their differences:</source>
          <target state="translated">¿Terminaste de leer el artículo? Contemos sus diferencias:</target>
        </trans-unit>
        <trans-unit id="083f5d4f5390de8b339a7e0d1bcbede9836be5c8" translate="yes" xml:space="preserve">
          <source>Firefox's new debugger</source>
          <target state="translated">El nuevo depurador de Firefox</target>
        </trans-unit>
        <trans-unit id="bac6033d8edd65bf451fde639fbb2062cd288167" translate="yes" xml:space="preserve">
          <source>First Attempt: Writing a Reducer</source>
          <target state="translated">Primer intento:Escribir un reductor</target>
        </trans-unit>
        <trans-unit id="a63efbd7ad3629ab9570dc20eea84696652d1fe6" translate="yes" xml:space="preserve">
          <source>First and foremost, &lt;code&gt;combineReducers&lt;/code&gt; is simply &lt;strong&gt;a utility function to simplify the most common use case when writing Redux reducers&lt;/strong&gt;. You are &lt;em&gt;not&lt;/em&gt; required to use it in your own application, and it does &lt;em&gt;not&lt;/em&gt; handle every possible scenario. It is entirely possible to write reducer logic without using it, and it is quite common to need to write custom reducer logic for cases that &lt;code&gt;combineReducer&lt;/code&gt; does not handle. (See &lt;a href=&quot;beyondcombinereducers&quot;&gt;Beyond &lt;code&gt;combineReducers&lt;/code&gt;&lt;/a&gt; for examples and suggestions.)</source>
          <target state="translated">En primer lugar, &lt;code&gt;combineReducers&lt;/code&gt; es simplemente &lt;strong&gt;una funci&amp;oacute;n de utilidad para simplificar el caso de uso m&amp;aacute;s com&amp;uacute;n al escribir reductores Redux&lt;/strong&gt; . Usted est&amp;aacute; &lt;em&gt;no&lt;/em&gt; obligado a utilizarlo en su propia aplicaci&amp;oacute;n, y lo hace &lt;em&gt;no&lt;/em&gt; maneja todos los escenarios posibles. Es completamente posible escribir l&amp;oacute;gica reductora sin usarla, y es bastante com&amp;uacute;n necesitar escribir l&amp;oacute;gica reductora personalizada para casos que &lt;code&gt;combineReducer&lt;/code&gt; no maneja. (Consulte &lt;a href=&quot;beyondcombinereducers&quot;&gt;M&amp;aacute;s all&amp;aacute; de &lt;code&gt;combineReducers&lt;/code&gt; &lt;/a&gt; para obtener ejemplos y sugerencias).</target>
        </trans-unit>
        <trans-unit id="928aade909ab97ef47ad692458ac7b1733155f4f" translate="yes" xml:space="preserve">
          <source>First and foremost, it's important to understand that your entire application really only has &lt;strong&gt;one single reducer function&lt;/strong&gt;: the function that you've passed into &lt;code&gt;createStore&lt;/code&gt; as the first argument. That one single reducer function ultimately needs to do several things:</source>
          <target state="translated">En primer lugar, es importante comprender que toda su aplicaci&amp;oacute;n realmente solo tiene &lt;strong&gt;una funci&amp;oacute;n reductora&lt;/strong&gt; : la funci&amp;oacute;n que ha pasado a &lt;code&gt;createStore&lt;/code&gt; como primer argumento. Esa &amp;uacute;nica funci&amp;oacute;n de reductor, en &amp;uacute;ltima instancia, necesita hacer varias cosas:</target>
        </trans-unit>
        <trans-unit id="2b3ce87bff6a9cf7a60a80fd1b3760fbe7caf2c7" translate="yes" xml:space="preserve">
          <source>First let's consider a case where you have a single reducer. Say you don't use &lt;code&gt;combineReducers()&lt;/code&gt;.</source>
          <target state="translated">Primero, consideremos un caso en el que tiene un solo reductor. Digamos que no usa &lt;code&gt;combineReducers()&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="7060a8772c7ed50446a754b52b327f7921592892" translate="yes" xml:space="preserve">
          <source>First of all, you need to run</source>
          <target state="translated">En primer lugar,tienes que correr</target>
        </trans-unit>
        <trans-unit id="fced756f7f0c570facc991f413283a69b01ef80e" translate="yes" xml:space="preserve">
          <source>First we will need to import &lt;code&gt;&amp;lt;Router /&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;Route /&amp;gt;&lt;/code&gt; from React Router. Here's how to do it:</source>
          <target state="translated">Primero necesitaremos importar &lt;code&gt;&amp;lt;Router /&amp;gt;&lt;/code&gt; y &lt;code&gt;&amp;lt;Route /&amp;gt;&lt;/code&gt; desde React Router. He aqu&amp;iacute; c&amp;oacute;mo hacerlo:</target>
        </trans-unit>
        <trans-unit id="928541190af20f02ef3132ea1dc14770650e0586" translate="yes" xml:space="preserve">
          <source>First, create a new container component called &lt;code&gt;UndoRedo&lt;/code&gt; for these buttons. We won't bother to split the presentational part into a separate file because it is very small:</source>
          <target state="translated">Primero, cree un nuevo componente contenedor llamado &lt;code&gt;UndoRedo&lt;/code&gt; para estos botones. No nos molestaremos en dividir la parte de presentaci&amp;oacute;n en un archivo separado porque es muy peque&amp;ntilde;o:</target>
        </trans-unit>
        <trans-unit id="066e50b38844dd1b5b820eb86ad656704f58e5eb" translate="yes" xml:space="preserve">
          <source>First, in terms of raw memory usage, Redux is no different than any other JavaScript library. The only difference is that all the various object references are nested together into one tree, instead of maybe saved in various independent model instances such as in Backbone. Second, a typical Redux app would probably have somewhat &lt;em&gt;less&lt;/em&gt; memory usage than an equivalent Backbone app because Redux encourages use of plain JavaScript objects and arrays rather than creating instances of Models and Collections. Finally, Redux only holds onto a single state tree reference at a time. Objects that are no longer referenced in that tree will be garbage collected, as usual.</source>
          <target state="translated">Primero, en t&amp;eacute;rminos de uso de memoria bruta, Redux no es diferente a cualquier otra biblioteca de JavaScript. La &amp;uacute;nica diferencia es que todas las referencias de objetos se anidan juntas en un &amp;aacute;rbol, en lugar de guardarlas en varias instancias de modelos independientes, como en Backbone. En segundo lugar, una aplicaci&amp;oacute;n t&amp;iacute;pica de Redux probablemente tendr&amp;iacute;a algo &lt;em&gt;menos de&lt;/em&gt; uso de memoria que una aplicaci&amp;oacute;n Backbone equivalente porque Redux fomenta el uso de matrices y objetos JavaScript simples en lugar de crear instancias de modelos y colecciones. Finalmente, Redux solo se aferra a una &amp;uacute;nica referencia de &amp;aacute;rbol de estado a la vez. Los objetos a los que ya no se hace referencia en ese &amp;aacute;rbol se recolectar&amp;aacute;n como basura, como de costumbre.</target>
        </trans-unit>
        <trans-unit id="147db38719fb360e8ff8a98d1999647a14de68aa" translate="yes" xml:space="preserve">
          <source>First, let's define some actions.</source>
          <target state="translated">Primero,definamos algunas acciones.</target>
        </trans-unit>
        <trans-unit id="d50b1a37307b503b16d51ae5983d1f25a15405ee" translate="yes" xml:space="preserve">
          <source>First, we will install &lt;a href=&quot;http://airbnb.io/enzyme/&quot;&gt;Enzyme&lt;/a&gt;. Enzyme uses the &lt;a href=&quot;https://facebook.github.io/react/docs/test-utils.html&quot;&gt;React Test Utilities&lt;/a&gt; underneath, but is more convenient, readable, and powerful.</source>
          <target state="translated">Primero, instalaremos &lt;a href=&quot;http://airbnb.io/enzyme/&quot;&gt;Enzyme&lt;/a&gt; . Enzyme utiliza las &lt;a href=&quot;https://facebook.github.io/react/docs/test-utils.html&quot;&gt;utilidades de prueba de React que se encuentran&lt;/a&gt; debajo, pero es m&amp;aacute;s conveniente, legible y potente.</target>
        </trans-unit>
        <trans-unit id="b752ccff5aae9d198427fafe188894e7b4c4185f" translate="yes" xml:space="preserve">
          <source>First, we'll need a middleware function. This is similar to the real &lt;a href=&quot;https://github.com/gaearon/redux-thunk/blob/master/src/index.js&quot;&gt;redux-thunk&lt;/a&gt;.</source>
          <target state="translated">Primero, necesitaremos una funci&amp;oacute;n de middleware. Esto es similar al &lt;a href=&quot;https://github.com/gaearon/redux-thunk/blob/master/src/index.js&quot;&gt;redux-thunk&lt;/a&gt; real .</target>
        </trans-unit>
        <trans-unit id="889e1c2f5289eea716835fde0adffaefad64d56f" translate="yes" xml:space="preserve">
          <source>Flux</source>
          <target state="translated">Flux</target>
        </trans-unit>
        <trans-unit id="2a436f0a330413dcad542ab5cfe9f14d15c70a1e" translate="yes" xml:space="preserve">
          <source>Following in the steps of &lt;a href=&quot;http://facebook.github.io/flux&quot;&gt;Flux&lt;/a&gt;, &lt;a href=&quot;http://martinfowler.com/bliki/CQRS.html&quot;&gt;CQRS&lt;/a&gt;, and &lt;a href=&quot;http://martinfowler.com/eaaDev/EventSourcing.html&quot;&gt;Event Sourcing&lt;/a&gt;, &lt;strong&gt;Redux attempts to make state mutations predictable&lt;/strong&gt; by imposing certain restrictions on how and when updates can happen. These restrictions are reflected in the &lt;a href=&quot;threeprinciples&quot;&gt;three principles&lt;/a&gt; of Redux.</source>
          <target state="translated">Siguiendo los pasos de &lt;a href=&quot;http://facebook.github.io/flux&quot;&gt;Flux&lt;/a&gt; , &lt;a href=&quot;http://martinfowler.com/bliki/CQRS.html&quot;&gt;CQRS&lt;/a&gt; y &lt;a href=&quot;http://martinfowler.com/eaaDev/EventSourcing.html&quot;&gt;Event Sourcing&lt;/a&gt; , &lt;strong&gt;Redux intenta hacer que las mutaciones de estado sean predecibles&lt;/strong&gt; imponiendo ciertas restricciones sobre c&amp;oacute;mo y cu&amp;aacute;ndo pueden ocurrir las actualizaciones. Estas restricciones se reflejan en los &lt;a href=&quot;threeprinciples&quot;&gt;tres principios&lt;/a&gt; de Redux.</target>
        </trans-unit>
        <trans-unit id="cac52571ae4d35859cbf2d2ebb033839ab2f50f8" translate="yes" xml:space="preserve">
          <source>For Offline docs, please see: &lt;a href=&quot;http://devdocs.io/redux/&quot;&gt;devdocs&lt;/a&gt;</source>
          <target state="translated">Para documentos sin conexi&amp;oacute;n, consulte: &lt;a href=&quot;http://devdocs.io/redux/&quot;&gt;devdocs&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="3da99abcd0c1ecdf884964d566bca5697a74e01e" translate="yes" xml:space="preserve">
          <source>For PDF, ePub, and MOBI exports for offline reading, and instructions on how to create them, please see: &lt;a href=&quot;https://github.com/paulkogel/redux-offline-docs&quot;&gt;paulkogel/redux-offline-docs&lt;/a&gt;.</source>
          <target state="translated">Para exportar PDF, ePub y MOBI para lectura sin conexi&amp;oacute;n, e instrucciones sobre c&amp;oacute;mo crearlas, consulte: &lt;a href=&quot;https://github.com/paulkogel/redux-offline-docs&quot;&gt;paulkogel / redux-offline-docs&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="1569bd4eacec55d8eceb1c2595d3b535c8d3d3cf" translate="yes" xml:space="preserve">
          <source>For React Redux, &lt;code&gt;connect&lt;/code&gt; checks to see if the props returned from a &lt;code&gt;mapStateToProps&lt;/code&gt; function have changed in order to determine if a component needs to update. To improve performance, &lt;code&gt;connect&lt;/code&gt; takes some shortcuts that rely on the state being immutable, and uses shallow reference equality checks to detect changes. This means that &lt;strong&gt;changes made to objects and arrays by direct mutation will not be detected, and components will not re-render&lt;/strong&gt;.</source>
          <target state="translated">Para React Redux, &lt;code&gt;connect&lt;/code&gt; comprueba si los accesorios devueltos por una funci&amp;oacute;n &lt;code&gt;mapStateToProps&lt;/code&gt; han cambiado para determinar si un componente necesita actualizarse. Para mejorar el rendimiento, &lt;code&gt;connect&lt;/code&gt; toma algunos atajos que dependen de que el estado sea inmutable y usa verificaciones de igualdad de referencia superficiales para detectar cambios. Esto significa que los &lt;strong&gt;cambios realizados en objetos y matrices por mutaci&amp;oacute;n directa no se detectar&amp;aacute;n y los componentes no volver&amp;aacute;n a renderizarse&lt;/strong&gt; .</target>
        </trans-unit>
        <trans-unit id="3c36a66a555508cc950b3f16c937117a95df81ef" translate="yes" xml:space="preserve">
          <source>For a Redux app, your entire state tree should be an Immutable.JS object, with no plain JavaScript objects used at all.</source>
          <target state="translated">Para una aplicación Redux,todo su árbol de estado debe ser un objeto Immutable.JS,sin ningún tipo de objeto JavaScript.</target>
        </trans-unit>
        <trans-unit id="373c63c01af4767c75ccf47739d4a3ed95ce0716" translate="yes" xml:space="preserve">
          <source>For an extensive list of everything related to Redux, we recommend &lt;a href=&quot;https://github.com/xgrommx/awesome-redux&quot;&gt;Awesome Redux&lt;/a&gt;. It contains examples, boilerplates, middleware, utility libraries, and more. &lt;a href=&quot;https://github.com/markerikson/react-redux-links&quot;&gt;React/Redux Links&lt;/a&gt; contains tutorials and other useful resources for anyone learning React or Redux, and &lt;a href=&quot;https://github.com/markerikson/redux-ecosystem-links&quot;&gt;Redux Ecosystem Links&lt;/a&gt; lists many Redux-related libraries and addons.</source>
          <target state="translated">Para obtener una lista extensa de todo lo relacionado con Redux, recomendamos &lt;a href=&quot;https://github.com/xgrommx/awesome-redux&quot;&gt;Awesome Redux&lt;/a&gt; . Contiene ejemplos, plantillas, middleware, bibliotecas de utilidades y m&amp;aacute;s. &lt;a href=&quot;https://github.com/markerikson/react-redux-links&quot;&gt;React / Redux Links&lt;/a&gt; contiene tutoriales y otros recursos &amp;uacute;tiles para cualquiera que est&amp;eacute; aprendiendo React o Redux, y &lt;a href=&quot;https://github.com/markerikson/redux-ecosystem-links&quot;&gt;Redux Ecosystem Links&lt;/a&gt; enumera muchas bibliotecas y complementos relacionados con Redux.</target>
        </trans-unit>
        <trans-unit id="8b99470d4a1567b0670d5920564c85b87e32721b" translate="yes" xml:space="preserve">
          <source>For any action that is not recognized, it must return the &lt;code&gt;state&lt;/code&gt; given to it as the first argument.</source>
          <target state="translated">Para cualquier acci&amp;oacute;n que no se reconozca, debe devolver el &lt;code&gt;state&lt;/code&gt; le dio como primer argumento.</target>
        </trans-unit>
        <trans-unit id="28c64b95d623e1af01c5fa554a02283a92526e40" translate="yes" xml:space="preserve">
          <source>For any meaningful application, putting &lt;em&gt;all&lt;/em&gt; your update logic into a single reducer function is quickly going to become unmaintainable. While there's no single rule for how long a function should be, it's generally agreed that functions should be relatively short and ideally only do one specific thing. Because of this, it's good programming practice to take pieces of code that are very long or do many different things, and break them into smaller pieces that are easier to understand.</source>
          <target state="translated">Para cualquier aplicaci&amp;oacute;n significativa, poner &lt;em&gt;toda&lt;/em&gt; su l&amp;oacute;gica de actualizaci&amp;oacute;n en una sola funci&amp;oacute;n de reducci&amp;oacute;n r&amp;aacute;pidamente se volver&amp;aacute; inmaterial. Si bien no existe una regla &amp;uacute;nica sobre la duraci&amp;oacute;n de una funci&amp;oacute;n, en general se acepta que las funciones deben ser relativamente cortas e idealmente solo hacen una cosa espec&amp;iacute;fica. Debido a esto, es una buena pr&amp;aacute;ctica de programaci&amp;oacute;n tomar fragmentos de c&amp;oacute;digo que son muy largos o hacer muchas cosas diferentes y dividirlos en partes m&amp;aacute;s peque&amp;ntilde;as que sean m&amp;aacute;s f&amp;aacute;ciles de entender.</target>
        </trans-unit>
        <trans-unit id="2ce91fabee949d5ba66d92e41ee08124438c9737" translate="yes" xml:space="preserve">
          <source>For async action creators using &lt;a href=&quot;https://github.com/gaearon/redux-thunk&quot;&gt;Redux Thunk&lt;/a&gt; or other middleware, it's best to completely mock the Redux store for tests. You can apply the middleware to a mock store using &lt;a href=&quot;https://github.com/arnaudbenard/redux-mock-store&quot;&gt;redux-mock-store&lt;/a&gt;. You can also use &lt;a href=&quot;https://github.com/pgte/nock&quot;&gt;nock&lt;/a&gt; to mock the HTTP requests.</source>
          <target state="translated">Para los creadores de acciones as&amp;iacute;ncronas que utilizan &lt;a href=&quot;https://github.com/gaearon/redux-thunk&quot;&gt;Redux Thunk&lt;/a&gt; u otro middleware, es mejor burlarse completamente de la tienda Redux para realizar pruebas. Puede aplicar el middleware a una tienda simulada utilizando &lt;a href=&quot;https://github.com/arnaudbenard/redux-mock-store&quot;&gt;redux-mock-store&lt;/a&gt; . Tambi&amp;eacute;n puede usar &lt;a href=&quot;https://github.com/pgte/nock&quot;&gt;nock&lt;/a&gt; para simular las solicitudes HTTP.</target>
        </trans-unit>
        <trans-unit id="3fd7c213802a3dd8c216e494ed4fd0e167b08890" translate="yes" xml:space="preserve">
          <source>For clarity, these terms will be used to distinguish between different types of functions and different use cases:</source>
          <target state="translated">En aras de la claridad,estos términos se utilizarán para distinguir entre los diferentes tipos de funciones y los diferentes casos de uso:</target>
        </trans-unit>
        <trans-unit id="264e5e569126bec0eceb43b84e1205a13c4b6e76" translate="yes" xml:space="preserve">
          <source>For convenience, you can also pass a single function as the first argument, and get a function in return.</source>
          <target state="translated">Por comodidad,también puede pasar una sola función como primer argumento,y obtener una función a cambio.</target>
        </trans-unit>
        <trans-unit id="04d030d12bcc6c470739d6e880cb3ce38900cf8e" translate="yes" xml:space="preserve">
          <source>For convenience, you can also pass an action creator as the first argument, and get a dispatch wrapped function in return.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a90bf7f5a9bb0b7bee51eca7178498d0496d1d7b" translate="yes" xml:space="preserve">
          <source>For copying very large objects, &lt;a href=&quot;https://medium.com/@dtinth/immutable-js-persistent-data-structures-and-structural-sharing-6d163fbd73d2#.z1g1ofrsi&quot;&gt;plain JavaScript can be over 100 times slower&lt;/a&gt; than an optimized immutable library.</source>
          <target state="translated">Para copiar objetos muy grandes, &lt;a href=&quot;https://medium.com/@dtinth/immutable-js-persistent-data-structures-and-structural-sharing-6d163fbd73d2#.z1g1ofrsi&quot;&gt;JavaScript simple puede ser 100 veces m&amp;aacute;s lento&lt;/a&gt; que una biblioteca inmutable optimizada.</target>
        </trans-unit>
        <trans-unit id="7525b69cd07a6f2ad0ac830aafa7a477337193ed" translate="yes" xml:space="preserve">
          <source>For every list of items, you'll want to store &lt;code&gt;isFetching&lt;/code&gt; to show a spinner, &lt;code&gt;didInvalidate&lt;/code&gt; so you can later toggle it when the data is stale, &lt;code&gt;lastUpdated&lt;/code&gt; so you know when it was fetched the last time, and the &lt;code&gt;items&lt;/code&gt; themselves. In a real app, you'll also want to store pagination state like &lt;code&gt;fetchedPageCount&lt;/code&gt; and &lt;code&gt;nextPageUrl&lt;/code&gt;.</source>
          <target state="translated">Para cada lista de elementos, querr&amp;aacute; almacenar &lt;code&gt;isFetching&lt;/code&gt; para mostrar una ruleta, &lt;code&gt;didInvalidate&lt;/code&gt; para que luego pueda alternarlo cuando los datos est&amp;eacute;n obsoletos, &lt;code&gt;lastUpdated&lt;/code&gt; para saber cu&amp;aacute;ndo se obtuvo la &amp;uacute;ltima vez y los &lt;code&gt;items&lt;/code&gt; s&amp;iacute;. En una aplicaci&amp;oacute;n real, tambi&amp;eacute;n querr&amp;aacute; almacenar el estado de paginaci&amp;oacute;n como &lt;code&gt;fetchedPageCount&lt;/code&gt; y &lt;code&gt;nextPageUrl&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="cd5da791bf1d292d4b08f432961ce1f7ce752416" translate="yes" xml:space="preserve">
          <source>For example, &lt;a href=&quot;https://github.com/gaearon/redux-thunk&quot;&gt;redux-thunk&lt;/a&gt; lets the action creators invert control by dispatching functions. They would receive &lt;a href=&quot;store#dispatch&quot;&gt;&lt;code&gt;dispatch&lt;/code&gt;&lt;/a&gt; as an argument and may call it asynchronously. Such functions are called &lt;em&gt;thunks&lt;/em&gt;. Another example of middleware is &lt;a href=&quot;https://github.com/acdlite/redux-promise&quot;&gt;redux-promise&lt;/a&gt;. It lets you dispatch a &lt;a href=&quot;https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Promise&quot;&gt;Promise&lt;/a&gt; async action, and dispatches a normal action when the Promise resolves.</source>
          <target state="translated">Por ejemplo, &lt;a href=&quot;https://github.com/gaearon/redux-thunk&quot;&gt;redux-thunk&lt;/a&gt; permite que los creadores de acciones inviertan el control distribuyendo funciones. Recibir&amp;aacute;n el &lt;a href=&quot;store#dispatch&quot;&gt; &lt;code&gt;dispatch&lt;/code&gt; &lt;/a&gt; como un argumento y pueden llamarlo de forma asincr&amp;oacute;nica. Estas funciones se denominan &lt;em&gt;procesadores&lt;/em&gt; . Otro ejemplo de middleware es &lt;a href=&quot;https://github.com/acdlite/redux-promise&quot;&gt;redux-promise&lt;/a&gt; . Le permite enviar una acci&amp;oacute;n asincr&amp;oacute;nica &lt;a href=&quot;https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Promise&quot;&gt;Promise&lt;/a&gt; y env&amp;iacute;a una acci&amp;oacute;n normal cuando la Promesa se resuelve.</target>
        </trans-unit>
        <trans-unit id="ea30d382e00946d864e7aab00ac27b5ca849fd1a" translate="yes" xml:space="preserve">
          <source>For example, &lt;a href=&quot;https://github.com/gaearon/redux-thunk&quot;&gt;redux-thunk&lt;/a&gt; lets the action creators invert control by dispatching functions. They would receive &lt;a href=&quot;store#dispatchaction&quot;&gt;&lt;code&gt;dispatch&lt;/code&gt;&lt;/a&gt; as an argument and may call it asynchronously. Such functions are called &lt;em&gt;thunks&lt;/em&gt;. Another example of middleware is &lt;a href=&quot;https://github.com/acdlite/redux-promise&quot;&gt;redux-promise&lt;/a&gt;. It lets you dispatch a &lt;a href=&quot;https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Promise&quot;&gt;Promise&lt;/a&gt; async action, and dispatches a normal action when the Promise resolves.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c10a32bf34bb234c4f4d4ea0c462233658b63285" translate="yes" xml:space="preserve">
          <source>For example, a reducer like this is wrong because it mutates the state:</source>
          <target state="translated">Por ejemplo,un reductor como este está mal porque muta el estado:</target>
        </trans-unit>
        <trans-unit id="bc9e2d4355c30145cce077b91c60d63448e5aed4" translate="yes" xml:space="preserve">
          <source>For example, instead of &lt;code&gt;myObj.prop1.prop2.prop3&lt;/code&gt;, you would use &lt;code&gt;myImmutableMap.getIn([&amp;lsquo;prop1&amp;rsquo;, &amp;lsquo;prop2&amp;rsquo;, &amp;lsquo;prop3&amp;rsquo;])&lt;/code&gt;.</source>
          <target state="translated">Por ejemplo, en lugar de &lt;code&gt;myObj.prop1.prop2.prop3&lt;/code&gt; , usar&amp;iacute;a &lt;code&gt;myImmutableMap.getIn([&amp;lsquo;prop1&amp;rsquo;, &amp;lsquo;prop2&amp;rsquo;, &amp;lsquo;prop3&amp;rsquo;])&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="8910597d94358b44fab63079f57037fc6eedac16" translate="yes" xml:space="preserve">
          <source>For example, instead of calling &lt;code&gt;dispatch&lt;/code&gt; with an object literal:</source>
          <target state="translated">Por ejemplo, en lugar de llamar a &lt;code&gt;dispatch&lt;/code&gt; con un objeto literal:</target>
        </trans-unit>
        <trans-unit id="36409b0b5da0fd93351cad56b27c2cc459ec9cbc" translate="yes" xml:space="preserve">
          <source>For example, the following &lt;code&gt;mapStateToProps&lt;/code&gt; function will never trigger a re-render:</source>
          <target state="translated">Por ejemplo, la siguiente funci&amp;oacute;n &lt;code&gt;mapStateToProps&lt;/code&gt; nunca activar&amp;aacute; una re-renderizaci&amp;oacute;n:</target>
        </trans-unit>
        <trans-unit id="405aef87040b2f5fe3183ef8ee7aaa8b9e2f3921" translate="yes" xml:space="preserve">
          <source>For example, the following will always trigger a re-render:</source>
          <target state="translated">Por ejemplo,lo siguiente siempre desencadenará una re-rendición:</target>
        </trans-unit>
        <trans-unit id="43b08550f3233d89fd265c7a809fdb23fce5207d" translate="yes" xml:space="preserve">
          <source>For example, the state shape of a counter app might look like this:</source>
          <target state="translated">Por ejemplo,la forma de estado de una aplicación de contador podría verse así:</target>
        </trans-unit>
        <trans-unit id="4676e5ae615d02cd767e41c0d9c575c5c5363047" translate="yes" xml:space="preserve">
          <source>For example, you will no longer be able to reference an object&amp;rsquo;s properties through standard JavaScript dot or bracket notation. Instead, you must reference them via Immutable.JS&amp;rsquo;s &lt;code&gt;get()&lt;/code&gt; or &lt;code&gt;getIn()&lt;/code&gt; methods, which use an awkward syntax that accesses properties via an array of strings, each of which represents a property key.</source>
          <target state="translated">Por ejemplo, ya no podr&amp;aacute; hacer referencia a las propiedades de un objeto mediante la notaci&amp;oacute;n est&amp;aacute;ndar de puntos o corchetes de JavaScript. En su lugar, debe hacer referencia a ellos a trav&amp;eacute;s de los m&amp;eacute;todos &lt;code&gt;get()&lt;/code&gt; o &lt;code&gt;getIn()&lt;/code&gt; , que usan una sintaxis inc&amp;oacute;moda que accede a las propiedades a trav&amp;eacute;s de una matriz de cadenas, cada una de las cuales representa una clave de propiedad.</target>
        </trans-unit>
        <trans-unit id="12b6ef57734c544f1e210f261517935088c63d17" translate="yes" xml:space="preserve">
          <source>For non-connected components, you may want to check what props are being passed in. A common issue is having a parent component re-bind a callback inside its render function, like &lt;code&gt;&amp;lt;Child onClick={this.handleClick.bind(this)} /&amp;gt;&lt;/code&gt;. That creates a new function reference every time the parent re-renders. It's generally good practice to only bind callbacks once in the parent component's constructor.</source>
          <target state="translated">Para los componentes no conectados, es posible que desee verificar qu&amp;eacute; accesorios se est&amp;aacute;n pasando. Un problema com&amp;uacute;n es que un componente principal vuelva a vincular una devoluci&amp;oacute;n de llamada dentro de su funci&amp;oacute;n de renderizado, como &lt;code&gt;&amp;lt;Child onClick={this.handleClick.bind(this)} /&amp;gt;&lt;/code&gt; . Eso crea una nueva referencia de funci&amp;oacute;n cada vez que el padre vuelve a renderizar. En general, es una buena pr&amp;aacute;ctica enlazar devoluciones de llamada solo una vez en el constructor del componente principal.</target>
        </trans-unit>
        <trans-unit id="f37294e7b86a5fec1ad730201ca1b51e170da12c" translate="yes" xml:space="preserve">
          <source>For our example, we'll imagine there is an external datastore that contains the counter's initial value (Counter As A Service, or CaaS). We'll make a mock call over to them and build our initial state from the result. We'll start by building out our API call:</source>
          <target state="translated">Para nuestro ejemplo,imaginaremos que hay un almacén de datos externo que contiene el valor inicial del contador (Counter As A Service,o CaaS).Haremos una llamada de prueba y construiremos nuestro estado inicial a partir del resultado.Empezaremos construyendo nuestra llamada API:</target>
        </trans-unit>
        <trans-unit id="995f52d4ef9a4c2e7bfadd425b73b546c07eadfc" translate="yes" xml:space="preserve">
          <source>For our simplistic example, coercing our input into a number is sufficiently secure. If you're handling more complex input, such as freeform text, then you should run that input through an appropriate sanitization function, such as &lt;a href=&quot;https://www.npmjs.com/package/validator&quot;&gt;validator.js&lt;/a&gt;.</source>
          <target state="translated">Para nuestro ejemplo simplista, coaccionar nuestra entrada en un n&amp;uacute;mero es suficientemente seguro. Si est&amp;aacute; manejando entradas m&amp;aacute;s complejas, como texto de forma libre, entonces debe ejecutar esa entrada a trav&amp;eacute;s de una funci&amp;oacute;n de desinfecci&amp;oacute;n apropiada, como &lt;a href=&quot;https://www.npmjs.com/package/validator&quot;&gt;validator.js&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="7396dc033a9d17308dac01b1e6d7aa01bc7866e7" translate="yes" xml:space="preserve">
          <source>For our todo app, we want to store two different things:</source>
          <target state="translated">Para nuestra aplicación &quot;Todo&quot;,queremos almacenar dos cosas diferentes:</target>
        </trans-unit>
        <trans-unit id="b88fefd81c01717012ff82bfc5ac24328d967a87" translate="yes" xml:space="preserve">
          <source>For this example, we'll be using &lt;a href=&quot;http://expressjs.com/&quot;&gt;Express&lt;/a&gt; as a simple web server. We also need to install the React bindings for Redux, since they are not included in Redux by default.</source>
          <target state="translated">Para este ejemplo, usaremos &lt;a href=&quot;http://expressjs.com/&quot;&gt;Express&lt;/a&gt; como un servidor web simple. Tambi&amp;eacute;n necesitamos instalar los enlaces de React para Redux, ya que no est&amp;aacute;n incluidos en Redux por defecto.</target>
        </trans-unit>
        <trans-unit id="f714199c4cde247b055dd1036923fa69c491b814" translate="yes" xml:space="preserve">
          <source>For time traveling, the Redux DevTools expect that replaying recorded actions would output a state value, but not change anything else. &lt;strong&gt;Side effects like mutation or asynchronous behavior will cause time travel to alter behavior between steps, breaking the application&lt;/strong&gt;.</source>
          <target state="translated">Para viajar en el tiempo, Redux DevTools espera que la reproducci&amp;oacute;n de acciones grabadas genere un valor de estado, pero no cambie nada m&amp;aacute;s. &lt;strong&gt;Los efectos secundarios como la mutaci&amp;oacute;n o el comportamiento asincr&amp;oacute;nico har&amp;aacute;n que el viaje en el tiempo altere el comportamiento entre los pasos, interrumpiendo la aplicaci&amp;oacute;n&lt;/strong&gt; .</target>
        </trans-unit>
        <trans-unit id="5d1154ea57349682fcc3f891e405a8a167837c09" translate="yes" xml:space="preserve">
          <source>For universal apps that run on the server, create a store instance with every request so that they are isolated. Dispatch a few data fetching actions to a store instance and wait for them to complete before rendering the app on the server.</source>
          <target state="translated">Para las aplicaciones universales que se ejecutan en el servidor,crea una instancia de tienda con cada petición para que se aíslen.Envía unas cuantas acciones de obtención de datos a una instancia de tienda y espera a que se completen antes de renderizar la aplicación en el servidor.</target>
        </trans-unit>
        <trans-unit id="92c80d0eb6a19f502dd39ce9e0007f6cec7683d4" translate="yes" xml:space="preserve">
          <source>Four Strategies for Organizing Code</source>
          <target state="translated">Cuatro estrategias para organizar el código</target>
        </trans-unit>
        <trans-unit id="76682a747378edf323eb6fca480334e44800121b" translate="yes" xml:space="preserve">
          <source>Frequently, yes. There are various tradeoffs and opinions to consider, but there are many good reasons to use Immutable.JS. Do not underestimate the difficulty of trying to track down a property of your state tree that has been inadvertently mutated.</source>
          <target state="translated">A menudo,sí.Hay varias compensaciones y opiniones a considerar,pero hay muchas buenas razones para usar Immutable.JS.No subestime la dificultad de tratar de rastrear una propiedad de su árbol de estado que ha sido inadvertidamente mutado.</target>
        </trans-unit>
        <trans-unit id="46dc46fc099af2967e7cb377eb917390bbe8d91f" translate="yes" xml:space="preserve">
          <source>From Backbone</source>
          <target state="translated">De la Espina Dorsal</target>
        </trans-unit>
        <trans-unit id="3f765f89e7e86977403237359a10b70b8245b636" translate="yes" xml:space="preserve">
          <source>From Flux</source>
          <target state="translated">De Flujo</target>
        </trans-unit>
        <trans-unit id="bfbacf3ec560ee96572c8e953a6aff0a1a3667b3" translate="yes" xml:space="preserve">
          <source>From Flux to Redux: Async Actions the easy way</source>
          <target state="translated">De Flujo a Redux:Acciones de asincronía de la manera más fácil</target>
        </trans-unit>
        <trans-unit id="75482a47184505a4b6fae82571885f1d4ef06ba7" translate="yes" xml:space="preserve">
          <source>From the very beginning, we need to stress that Redux has no relation to React. You can write Redux apps with React, Angular, Ember, jQuery, or vanilla JavaScript.</source>
          <target state="translated">Desde el principio,necesitamos enfatizar que Redux no tiene relación con Reactar.Puedes escribir aplicaciones Redux con JavaScript de React,Angular,Ember,jQuery o vainilla.</target>
        </trans-unit>
        <trans-unit id="224f84dc1c16ed87eb23acbffde43619f014060d" translate="yes" xml:space="preserve">
          <source>Full-Stack Redux Tutorial</source>
          <target state="translated">Tutorial de Redux de la pila completa</target>
        </trans-unit>
        <trans-unit id="3823c3e33f7c5c6aab3e4cafa98d3b53883fbcdd" translate="yes" xml:space="preserve">
          <source>Functions for handling a specific update case, which often need parameters other than the typical &lt;code&gt;(state, action)&lt;/code&gt; pair</source>
          <target state="translated">Funciones para manejar un caso de actualizaci&amp;oacute;n espec&amp;iacute;fico, que a menudo necesita par&amp;aacute;metros distintos al par t&amp;iacute;pico &lt;code&gt;(state, action)&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="881a7f4ab6d6cdbe058390dcfebb91eedae46fb5" translate="yes" xml:space="preserve">
          <source>Functions which handle &lt;em&gt;all&lt;/em&gt; updates for a given slice of state. These functions do generally have the typical &lt;code&gt;(state, action)&lt;/code&gt; parameter signature</source>
          <target state="translated">Funciones que manejan &lt;em&gt;todas las&lt;/em&gt; actualizaciones para un segmento de estado determinado. Estas funciones generalmente tienen la firma de par&amp;aacute;metro t&amp;iacute;pica &lt;code&gt;(state, action)&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="669174087b9bbb07e556f8eda6679016d67b42c9" translate="yes" xml:space="preserve">
          <source>Further Information</source>
          <target state="translated">Más información</target>
        </trans-unit>
        <trans-unit id="285d7a1408b289b80750e52c797a605ffba295ee" translate="yes" xml:space="preserve">
          <source>Further Suggestions</source>
          <target state="translated">Otras sugerencias</target>
        </trans-unit>
        <trans-unit id="ec2268c82bc8b73813924087eddf93b3d9fbf05d" translate="yes" xml:space="preserve">
          <source>Further information</source>
          <target state="translated">Más información</target>
        </trans-unit>
        <trans-unit id="7d69e595b386dcd4b71cc9ff73b11b2154e10dd8" translate="yes" xml:space="preserve">
          <source>Furthermore, you can add additional layers of security by sanitizing your state output. &lt;code&gt;JSON.stringify&lt;/code&gt; can be subject to script injections. To counter this, you can scrub the JSON string of HTML tags and other dangerous characters. This can be done with either a simple text replacement on the string, e.g. &lt;code&gt;JSON.stringify(state).replace(/&amp;lt;/g, '\\u003c')&lt;/code&gt;, or via more sophisticated libraries such as &lt;a href=&quot;https://github.com/yahoo/serialize-javascript&quot;&gt;serialize-javascript&lt;/a&gt;.</source>
          <target state="translated">Adem&amp;aacute;s, puede agregar capas adicionales de seguridad desinfectando la salida de su estado. &lt;code&gt;JSON.stringify&lt;/code&gt; puede estar sujeto a inyecciones de script. Para contrarrestar esto, puede borrar la cadena JSON de etiquetas HTML y otros caracteres peligrosos. Esto se puede hacer con un simple reemplazo de texto en la cadena, por ejemplo, &lt;code&gt;JSON.stringify(state).replace(/&amp;lt;/g, '\\u003c')&lt;/code&gt; , o mediante bibliotecas m&amp;aacute;s sofisticadas como &lt;a href=&quot;https://github.com/yahoo/serialize-javascript&quot;&gt;serialize-javascript&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="9239ee2cda84eca4c3440e2a7b50148af67da3d4" translate="yes" xml:space="preserve">
          <source>General</source>
          <target state="translated">General</target>
        </trans-unit>
        <trans-unit id="c4692b39bf633417d53521cb512f44dbc259440a" translate="yes" xml:space="preserve">
          <source>Generating Action Creators</source>
          <target state="translated">Generando Creadores de Acción</target>
        </trans-unit>
        <trans-unit id="179c9a970856be2ac8a72de045cb7b6d6b4b6c90" translate="yes" xml:space="preserve">
          <source>Generating Reducers</source>
          <target state="translated">Generando Reductores</target>
        </trans-unit>
        <trans-unit id="46c1ccf8c4dcce798c8264f04e642d8a0159063d" translate="yes" xml:space="preserve">
          <source>Getting Started with React, Redux, and Immutable</source>
          <target state="translated">Empezando con Reaccionar,Redux,e Inmutable</target>
        </trans-unit>
        <trans-unit id="3185ff60f7a746675039a0e069131de1e5f61876" translate="yes" xml:space="preserve">
          <source>Gist: Breaking out of Redux paradigm to isolate apps</source>
          <target state="translated">Gist:Romper el paradigma de Redux para aislar las aplicaciones</target>
        </trans-unit>
        <trans-unit id="10ae5196eb35af7600e4766e0ded323420cfe70a" translate="yes" xml:space="preserve">
          <source>Gist: Redux-Thunk examples</source>
          <target state="translated">Gist:Ejemplos de Redux-Thunk</target>
        </trans-unit>
        <trans-unit id="244ed27647275ec13c3db28bb136d4743fa6b213" translate="yes" xml:space="preserve">
          <source>Gist: state mutations</source>
          <target state="translated">Lo esencial:mutaciones de estado</target>
        </trans-unit>
        <trans-unit id="8f8269375bc0d8516c14e2645a941c5fefb4b9c0" translate="yes" xml:space="preserve">
          <source>Given this middleware we just wrote:</source>
          <target state="translated">Dado este middleware que acabamos de escribir:</target>
        </trans-unit>
        <trans-unit id="7427cf697be16a4ec1d916910128a59d920125e7" translate="yes" xml:space="preserve">
          <source>Glossary</source>
          <target state="translated">Glossary</target>
        </trans-unit>
        <trans-unit id="6236cf415b3887e7fa20a5499f765aa16f7720ff" translate="yes" xml:space="preserve">
          <source>Guaranteed immutability</source>
          <target state="translated">Garantía de inmutabilidad</target>
        </trans-unit>
        <trans-unit id="229bbdd56d74f7206cf36e6c06a296b111d18641" translate="yes" xml:space="preserve">
          <source>HN: Is there any huge web application built using Redux?</source>
          <target state="translated">HN:¿Hay alguna aplicación web enorme construida usando Redux?</target>
        </trans-unit>
        <trans-unit id="74133e32e5bca2a26d927cd61a1825ca6cda78f2" translate="yes" xml:space="preserve">
          <source>Handcrafting an Isomorphic Redux Application (With Love)</source>
          <target state="translated">Haciendo a mano una aplicación de Redux isomórfico (con amor)</target>
        </trans-unit>
        <trans-unit id="cc392181cc37736073babefa3f6b0cbb53acb816" translate="yes" xml:space="preserve">
          <source>Handles unregistering of listeners via the function returned by &lt;a href=&quot;../api/store#subscribe&quot;&gt;&lt;code&gt;subscribe(listener)&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">Maneja la cancelaci&amp;oacute;n del registro de oyentes a trav&amp;eacute;s de la funci&amp;oacute;n devuelta por &lt;a href=&quot;../api/store#subscribe&quot;&gt; &lt;code&gt;subscribe(listener)&lt;/code&gt; &lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="c7d811048186a91e33bc9331b69a6d594a01ea8e" translate="yes" xml:space="preserve">
          <source>Handling Actions</source>
          <target state="translated">Manejo de acciones</target>
        </trans-unit>
        <trans-unit id="3b7e8e8b24ce8d7679b9a35675bb0a5a7fc840b3" translate="yes" xml:space="preserve">
          <source>Handling More Actions</source>
          <target state="translated">Manejar más acciones</target>
        </trans-unit>
        <trans-unit id="953d7b032c3bd0ac312412488e804519480a1aca" translate="yes" xml:space="preserve">
          <source>Handling Other Actions</source>
          <target state="translated">Manejo de otras acciones</target>
        </trans-unit>
        <trans-unit id="b97703fb2d2356eb6114659a0c343d14449211c9" translate="yes" xml:space="preserve">
          <source>Handling Redo</source>
          <target state="translated">Manejar el Rehacer</target>
        </trans-unit>
        <trans-unit id="f326b5a21b8a49169e4839d3f63669543242d741" translate="yes" xml:space="preserve">
          <source>Handling Undo</source>
          <target state="translated">Manejo de Deshacer</target>
        </trans-unit>
        <trans-unit id="988ce2e99df35e16eb481b727e182b8b8087a2b5" translate="yes" xml:space="preserve">
          <source>Handling the Request</source>
          <target state="translated">Manejo de la solicitud</target>
        </trans-unit>
        <trans-unit id="2e05fe2ae332d92f70e77aaf42eb727d3dd91277" translate="yes" xml:space="preserve">
          <source>Here is an &lt;code&gt;App&lt;/code&gt; component that renders three &lt;code&gt;VisibleTodoList&lt;/code&gt; components, each of which has a &lt;code&gt;listId&lt;/code&gt; prop:</source>
          <target state="translated">Aqu&amp;iacute; hay un componente de la &lt;code&gt;App&lt;/code&gt; que presenta tres componentes &lt;code&gt;VisibleTodoList&lt;/code&gt; , cada uno de los cuales tiene una propiedad &lt;code&gt;listId&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="23ae030423c3a4339c6c0b04d05978042792f95c" translate="yes" xml:space="preserve">
          <source>Here is an example of such a HOC:</source>
          <target state="translated">Aquí hay un ejemplo de tal HOC:</target>
        </trans-unit>
        <trans-unit id="8446f01d6be3b14bffe6480fb53ea4f664e0a65d" translate="yes" xml:space="preserve">
          <source>Here is our code so far. It is rather verbose:</source>
          <target state="translated">Aquí está nuestro código hasta ahora.Es bastante verborreico:</target>
        </trans-unit>
        <trans-unit id="01a60734010e587fd0830a7e888c7853a46bf0c7" translate="yes" xml:space="preserve">
          <source>Here's an example action which represents adding a new todo item:</source>
          <target state="translated">Aquí hay un ejemplo de acción que representa la adición de un nuevo elemento de todo:</target>
        </trans-unit>
        <trans-unit id="58052dece84922788386c735487e1b86cccdad36" translate="yes" xml:space="preserve">
          <source>Here's an example of how use of ES6 object literal shorthand with &lt;code&gt;combineReducers&lt;/code&gt; can define the state shape:</source>
          <target state="translated">Aqu&amp;iacute; hay un ejemplo de c&amp;oacute;mo el uso de la abreviatura literal del objeto ES6 con &lt;code&gt;combineReducers&lt;/code&gt; puede definir la forma del estado:</target>
        </trans-unit>
        <trans-unit id="2070c6c8e07ed8692f85545a5ee98fc311bf9af4" translate="yes" xml:space="preserve">
          <source>Here's how &lt;a href=&quot;../api/combinereducers&quot;&gt;&lt;code&gt;combineReducers()&lt;/code&gt;&lt;/a&gt; works. Let's say you have two reducers, one for a list of todos, and another for the currently selected filter setting:</source>
          <target state="translated">As&amp;iacute; es como funciona &lt;a href=&quot;../api/combinereducers&quot;&gt; &lt;code&gt;combineReducers()&lt;/code&gt; &lt;/a&gt; . Digamos que tiene dos reductores, uno para una lista de todos y otro para la configuraci&amp;oacute;n de filtro actualmente seleccionada:</target>
        </trans-unit>
        <trans-unit id="184bf60ef71f5a65467a6a7e96127cd713b7a9bf" translate="yes" xml:space="preserve">
          <source>Here's how to apply it to a Redux store:</source>
          <target state="translated">Así es como se aplica en una tienda Redux:</target>
        </trans-unit>
        <trans-unit id="c90015c747ff3bb6a4ca0fc41c0c7d1de4924c13" translate="yes" xml:space="preserve">
          <source>Here's what the state shape for our &amp;ldquo;Reddit headlines&amp;rdquo; app might look like:</source>
          <target state="translated">As&amp;iacute; es como se ver&amp;iacute;a la forma del estado de nuestra aplicaci&amp;oacute;n &quot;Titulares de Reddit&quot;:</target>
        </trans-unit>
        <trans-unit id="f3e2ce3154db89332ee8e9029cbb43d7deffada1" translate="yes" xml:space="preserve">
          <source>Here, we assume that you understand reducer composition with &lt;a href=&quot;../api/combinereducers&quot;&gt;&lt;code&gt;combineReducers()&lt;/code&gt;&lt;/a&gt;, as described in the &lt;a href=&quot;../basics/reducers#splitting-reducers&quot;&gt;Splitting Reducers&lt;/a&gt; section on the &lt;a href=&quot;../basics/index&quot;&gt;basics guide&lt;/a&gt;. If you don't, please &lt;a href=&quot;../basics/reducers#splitting-reducers&quot;&gt;read it first&lt;/a&gt;.</source>
          <target state="translated">Aqu&amp;iacute;, asumimos que comprende la composici&amp;oacute;n del reductor con &lt;a href=&quot;../api/combinereducers&quot;&gt; &lt;code&gt;combineReducers()&lt;/code&gt; &lt;/a&gt; , como se describe en la secci&amp;oacute;n &lt;a href=&quot;../basics/reducers#splitting-reducers&quot;&gt;Reductores de divisi&amp;oacute;n&lt;/a&gt; en la &lt;a href=&quot;../basics/index&quot;&gt;gu&amp;iacute;a b&amp;aacute;sica&lt;/a&gt; . Si no es as&amp;iacute;, l&amp;eacute;alo &lt;a href=&quot;../basics/reducers#splitting-reducers&quot;&gt;primero&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="47fb358d9a27b7f7c208a41f405f09df333fd295" translate="yes" xml:space="preserve">
          <source>High Performance Redux Apps</source>
          <target state="translated">Aplicaciones Redux de alto rendimiento</target>
        </trans-unit>
        <trans-unit id="7a6176fc50b39dc51f67828e874d1a9c381927a9" translate="yes" xml:space="preserve">
          <source>High-Performance Redux</source>
          <target state="translated">Redux de alto rendimiento</target>
        </trans-unit>
        <trans-unit id="e0aade7f036690bfbe818641db114550adf02045" translate="yes" xml:space="preserve">
          <source>Higher order reducers</source>
          <target state="translated">Reductores de orden superior</target>
        </trans-unit>
        <trans-unit id="661e90fbdb35e42cd0f11c03ad2413796fd99f73" translate="yes" xml:space="preserve">
          <source>Holds application state;</source>
          <target state="translated">Tiene un estado de aplicación;</target>
        </trans-unit>
        <trans-unit id="70558178e9ca9037c4306a5560966893b2ba1623" translate="yes" xml:space="preserve">
          <source>How can I implement authentication in Redux?</source>
          <target state="translated">¿Cómo puedo implementar la autenticación en Redux?</target>
        </trans-unit>
        <trans-unit id="cbbe1f27c0ff1e15f55cf992eaea12f8ad35811b" translate="yes" xml:space="preserve">
          <source>How can I reduce the number of store update events?</source>
          <target state="translated">¿Cómo puedo reducir el número de eventos de actualización de la tienda?</target>
        </trans-unit>
        <trans-unit id="fb6d20f2240e1c560f741e78debd31b4eea339de" translate="yes" xml:space="preserve">
          <source>How can I represent &amp;ldquo;side effects&amp;rdquo; such as AJAX calls? Why do we need things like &amp;ldquo;action creators&amp;rdquo;, &amp;ldquo;thunks&amp;rdquo;, and &amp;ldquo;middleware&amp;rdquo; to do async behavior?</source>
          <target state="translated">&amp;iquest;C&amp;oacute;mo puedo representar &quot;efectos secundarios&quot; como las llamadas AJAX? &amp;iquest;Por qu&amp;eacute; necesitamos cosas como &quot;creadores de acciones&quot;, &quot;procesadores&quot; y &quot;middleware&quot; para realizar un comportamiento as&amp;iacute;ncrono?</target>
        </trans-unit>
        <trans-unit id="8281d5ee1ef4deaaed00468f7711255feaa03216" translate="yes" xml:space="preserve">
          <source>How can I speed up my &lt;code&gt;mapStateToProps&lt;/code&gt;?</source>
          <target state="translated">&amp;iquest;C&amp;oacute;mo puedo acelerar mi &lt;code&gt;mapStateToProps&lt;/code&gt; ?</target>
        </trans-unit>
        <trans-unit id="341af2b298ee968641c89dc8fc39d6a76071ec0f" translate="yes" xml:space="preserve">
          <source>How can I speed up my mapStateToProps?</source>
          <target state="translated">¿Cómo puedo acelerar mi mapStateToProps?</target>
        </trans-unit>
        <trans-unit id="074c1f363f6a663f824f52ea0c32767c57407e9c" translate="yes" xml:space="preserve">
          <source>How can immutability in &lt;code&gt;mapStateToProps&lt;/code&gt; cause components to render unnecessarily?</source>
          <target state="translated">&amp;iquest;C&amp;oacute;mo puede la inmutabilidad en &lt;code&gt;mapStateToProps&lt;/code&gt; hacer que los componentes se procesen innecesariamente?</target>
        </trans-unit>
        <trans-unit id="b224cf4298710c4b3d505de8354cfc9ba8c010d0" translate="yes" xml:space="preserve">
          <source>How can immutability in mapStateToProps cause components to render unnecessarily?</source>
          <target state="translated">¿Cómo puede la inmutabilidad en mapStateToProps hacer que los componentes se rendericen innecesariamente?</target>
        </trans-unit>
        <trans-unit id="2afd69541aac46a2c40250df385736019b6c57fc" translate="yes" xml:space="preserve">
          <source>How can immutability in your reducers cause components to render unnecessarily?</source>
          <target state="translated">¿Cómo puede la inmutabilidad en sus reductores hacer que los componentes se rendericen innecesariamente?</target>
        </trans-unit>
        <trans-unit id="03c2da4eb5dd93b3bf52e21145059bf09d5e25b4" translate="yes" xml:space="preserve">
          <source>How do I organize nested or duplicate data in my state?</source>
          <target state="translated">¿Cómo organizo los datos anidados o duplicados en mi estado?</target>
        </trans-unit>
        <trans-unit id="f37efe0864de2a013d86c02169f816af32cb5f56" translate="yes" xml:space="preserve">
          <source>How do I share state between two reducers? Do I have to use &lt;code&gt;combineReducers&lt;/code&gt;?</source>
          <target state="translated">&amp;iquest;C&amp;oacute;mo comparto el estado entre dos reductores? &amp;iquest;Tengo que usar &lt;code&gt;combineReducers&lt;/code&gt; ?</target>
        </trans-unit>
        <trans-unit id="2a2bb6943dc8bbb29ceaf8280fcfbee59990be7f" translate="yes" xml:space="preserve">
          <source>How do I share state between two reducers? Do I have to use combineReducers?</source>
          <target state="translated">¿Cómo comparto el estado entre dos reductores? ¿Tengo que usar los reductores combinados?</target>
        </trans-unit>
        <trans-unit id="39a19a487dfb8b0307ebc780f2d744e66346a60f" translate="yes" xml:space="preserve">
          <source>How do I subscribe to only a portion of the state? Can I get the dispatched action as part of the subscription?</source>
          <target state="translated">¿Cómo me suscribo sólo a una parte del estado? ¿Puedo obtener la acción enviada como parte de la suscripción?</target>
        </trans-unit>
        <trans-unit id="970d13e8ba247d72a23a1227b9eb76ab329d86fd" translate="yes" xml:space="preserve">
          <source>How do Shallow and Deep Equality Checking differ?</source>
          <target state="translated">¿En qué se diferencian la comprobación de igualdad superficial y la profunda?</target>
        </trans-unit>
        <trans-unit id="28c2d5d8451c047bc1a0f4cecf88ad6567282a2d" translate="yes" xml:space="preserve">
          <source>How do shallow and deep equality checking differ?</source>
          <target state="translated">¿En qué se diferencian los controles de igualdad superficiales y profundos?</target>
        </trans-unit>
        <trans-unit id="26ccec8f1ac279469a0f68091311d50666024b89" translate="yes" xml:space="preserve">
          <source>How do we actually delegate the control over the &lt;code&gt;present&lt;/code&gt; state to a custom reducer?</source>
          <target state="translated">&amp;iquest;C&amp;oacute;mo delegamos realmente el control sobre el estado &lt;code&gt;present&lt;/code&gt; a un reductor personalizado?</target>
        </trans-unit>
        <trans-unit id="fff3cc86a8e920d14e4b6d08ec84a36cf3ae1884" translate="yes" xml:space="preserve">
          <source>How do we approach this with Redux?</source>
          <target state="translated">¿Cómo abordamos esto con Redux?</target>
        </trans-unit>
        <trans-unit id="30c14f55ced4d84011da65e3315eb866d4d9ce19" translate="yes" xml:space="preserve">
          <source>How do we include the Redux Thunk middleware in the dispatch mechanism? We use the &lt;a href=&quot;../api/applymiddleware&quot;&gt;&lt;code&gt;applyMiddleware()&lt;/code&gt;&lt;/a&gt; store enhancer from Redux, as shown below:</source>
          <target state="translated">&amp;iquest;C&amp;oacute;mo incluimos el middleware Redux Thunk en el mecanismo de env&amp;iacute;o? Usamos el potenciador de tienda &lt;a href=&quot;../api/applymiddleware&quot;&gt; &lt;code&gt;applyMiddleware()&lt;/code&gt; &lt;/a&gt; de Redux, como se muestra a continuaci&amp;oacute;n:</target>
        </trans-unit>
        <trans-unit id="8959099626f271882311c3c243bbfdda634b6be4" translate="yes" xml:space="preserve">
          <source>How does &lt;code&gt;combineReducers&lt;/code&gt; use shallow equality checking?</source>
          <target state="translated">&amp;iquest;C&amp;oacute;mo &lt;code&gt;combineReducers&lt;/code&gt; verificaci&amp;oacute;n de igualdad superficial?</target>
        </trans-unit>
        <trans-unit id="e264f190d3a7100ff16f8e0b792baf3242dd0158" translate="yes" xml:space="preserve">
          <source>How does React-Redux use shallow equality checking to determine whether a component needs re-rendering?</source>
          <target state="translated">¿Cómo utiliza React-Redux la comprobación de igualdad superficial para determinar si un componente necesita ser reproducido?</target>
        </trans-unit>
        <trans-unit id="13f4f9bb8ec7adca1dffda3a094e04eb9bf81ce9" translate="yes" xml:space="preserve">
          <source>How does React-Redux use shallow equality checking?</source>
          <target state="translated">¿Cómo utiliza React-Redux la comprobación de igualdad superficial?</target>
        </trans-unit>
        <trans-unit id="b5cc6209f66bc3c55e7f41aa1d6494bbd46dc8e9" translate="yes" xml:space="preserve">
          <source>How does Redux use shallow equality checking?</source>
          <target state="translated">¿Cómo utiliza Redux el control de igualdad superficial?</target>
        </trans-unit>
        <trans-unit id="96952132f67badca2ba5bab5e41044f8fb225996" translate="yes" xml:space="preserve">
          <source>How does immutability enable a shallow check to detect object mutations?</source>
          <target state="translated">¿Cómo permite la inmutabilidad a un control poco profundo para detectar mutaciones de objetos?</target>
        </trans-unit>
        <trans-unit id="258f5cf42a9d12d463ef4f13ff6a4e2964d9748d" translate="yes" xml:space="preserve">
          <source>How putting too much logic in action creators could affect debugging</source>
          <target state="translated">Cómo el poner demasiada lógica en la acción de los creadores podría afectar a la depuración</target>
        </trans-unit>
        <trans-unit id="a4c23c5f78cdee9be5d0a8aa246f623d02051202" translate="yes" xml:space="preserve">
          <source>How should I split my logic between reducers and action creators? Where should my &amp;ldquo;business logic&amp;rdquo; go?</source>
          <target state="translated">&amp;iquest;C&amp;oacute;mo debo dividir mi l&amp;oacute;gica entre reductores y creadores de acciones? &amp;iquest;D&amp;oacute;nde deber&amp;iacute;a ir mi &quot;l&amp;oacute;gica empresarial&quot;?</target>
        </trans-unit>
        <trans-unit id="844c750f088f6ec26d17f13bffa791aa0381caa4" translate="yes" xml:space="preserve">
          <source>How things look (markup, styles)</source>
          <target state="translated">Cómo se ven las cosas (marcas,estilos)</target>
        </trans-unit>
        <trans-unit id="c4042ce0bd829dee86f5f8db37a02e8a871f8f88" translate="yes" xml:space="preserve">
          <source>How things work (data fetching, state updates)</source>
          <target state="translated">Cómo funcionan las cosas (búsqueda de datos,actualizaciones de estado)</target>
        </trans-unit>
        <trans-unit id="fa346393f4fb3e9654b9c58c84d9e7de2aec74bf" translate="yes" xml:space="preserve">
          <source>How to Scale React Applications</source>
          <target state="translated">Cómo escalar las aplicaciones de reacción</target>
        </trans-unit>
        <trans-unit id="47937596549577004fa72bfb56667e643c361800" translate="yes" xml:space="preserve">
          <source>How to handle state in React: the missing FAQ</source>
          <target state="translated">Cómo manejar el estado en Reaccionar:el FAQ que falta</target>
        </trans-unit>
        <trans-unit id="49dee5bfff40b97a93bb5e0172be4f4d25ffb4f5" translate="yes" xml:space="preserve">
          <source>How to think in terms of combining functions</source>
          <target state="translated">Cómo pensar en términos de combinación de funciones</target>
        </trans-unit>
        <trans-unit id="5a44fd27737b51871064dcba886fdf85182ed8ca" translate="yes" xml:space="preserve">
          <source>How well does Redux &amp;ldquo;scale&amp;rdquo; in terms of performance and architecture?</source>
          <target state="translated">&amp;iquest;Qu&amp;eacute; tan bien &quot;escala&quot; Redux en t&amp;eacute;rminos de rendimiento y arquitectura?</target>
        </trans-unit>
        <trans-unit id="d5049bfb2117becfff285cdc67dde0f10a6d2171" translate="yes" xml:space="preserve">
          <source>How you structure the root reducer is completely up to you. Redux ships with a &lt;a href=&quot;../api/combinereducers&quot;&gt;&lt;code&gt;combineReducers()&lt;/code&gt;&lt;/a&gt; helper function, useful for &amp;ldquo;splitting&amp;rdquo; the root reducer into separate functions that each manage one branch of the state tree.</source>
          <target state="translated">C&amp;oacute;mo estructurar el reductor de ra&amp;iacute;ces depende completamente de usted. Redux viene con una funci&amp;oacute;n auxiliar &lt;a href=&quot;../api/combinereducers&quot;&gt; &lt;code&gt;combineReducers()&lt;/code&gt; &lt;/a&gt; , &amp;uacute;til para &amp;ldquo;dividir&amp;rdquo; el reductor ra&amp;iacute;z en funciones separadas que cada una administra una rama del &amp;aacute;rbol de estado.</target>
        </trans-unit>
        <trans-unit id="1d072600a3b53bb4cfed12bc142b48432221674c" translate="yes" xml:space="preserve">
          <source>However, creating new stores shouldn't be your first instinct, especially if you come from a Flux background. Try reducer composition first, and only use multiple stores if it doesn't solve your problem.</source>
          <target state="translated">Sin embargo,crear nuevas tiendas no debería ser tu primer instinto,especialmente si vienes de un entorno de Flux.Intenta reducir la composición primero,y sólo usa varios almacenes si no resuelve tu problema.</target>
        </trans-unit>
        <trans-unit id="27352aa59f7116a388d254a03cb3ffe5f2f70e56" translate="yes" xml:space="preserve">
          <source>However, even if you happen to have many different reducer functions composed together, and even with deeply nested state, reducer speed is unlikely to be a problem. JavaScript engines are capable of running a very large number of function calls per second, and most of your reducers are probably just using a &lt;code&gt;switch&lt;/code&gt; statement and returning the existing state by default in response to most actions.</source>
          <target state="translated">Sin embargo, incluso si tiene muchas funciones reductoras diferentes compuestas juntas, e incluso con un estado profundamente anidado, es poco probable que la velocidad del reductor sea un problema. Los motores de JavaScript son capaces de ejecutar una gran cantidad de llamadas a funciones por segundo, y la mayor&amp;iacute;a de sus reductores probablemente solo est&amp;eacute;n usando una declaraci&amp;oacute;n de &lt;code&gt;switch&lt;/code&gt; y devuelvan el estado existente por defecto en respuesta a la mayor&amp;iacute;a de las acciones.</target>
        </trans-unit>
        <trans-unit id="209c7d1b896b9b48924c44438236581d9ba02ccc" translate="yes" xml:space="preserve">
          <source>However, guaranteeing immutability with JavaScript is difficult, and it can be easy to mutate an object accidentally, causing bugs in your app that are extremely difficult to locate. For this reason, using an immutable update utility library such as Immutable.JS can significantly improve the reliability of your app, and make your app&amp;rsquo;s development much easier.</source>
          <target state="translated">Sin embargo, garantizar la inmutabilidad con JavaScript es dif&amp;iacute;cil y puede ser f&amp;aacute;cil mutar un objeto accidentalmente, lo que provoca errores en su aplicaci&amp;oacute;n que son extremadamente dif&amp;iacute;ciles de localizar. Por esta raz&amp;oacute;n, el uso de una biblioteca de utilidades de actualizaci&amp;oacute;n inmutable como Immutable.JS puede mejorar significativamente la confiabilidad de su aplicaci&amp;oacute;n y hacer que su desarrollo sea mucho m&amp;aacute;s f&amp;aacute;cil.</target>
        </trans-unit>
        <trans-unit id="007edd469aeadd3134e72ff280534f419b360c63" translate="yes" xml:space="preserve">
          <source>However, if you wrap &lt;a href=&quot;createstore&quot;&gt;&lt;code&gt;createStore&lt;/code&gt;&lt;/a&gt; with &lt;a href=&quot;applymiddleware&quot;&gt;&lt;code&gt;applyMiddleware&lt;/code&gt;&lt;/a&gt;, the middleware can interpret actions differently, and provide support for dispatching &lt;a href=&quot;../glossary#async-action&quot;&gt;async actions&lt;/a&gt;. Async actions are usually asynchronous primitives like Promises, Observables, or thunks.</source>
          <target state="translated">Sin embargo, si envuelve &lt;a href=&quot;createstore&quot;&gt; &lt;code&gt;createStore&lt;/code&gt; &lt;/a&gt; con &lt;a href=&quot;applymiddleware&quot;&gt; &lt;code&gt;applyMiddleware&lt;/code&gt; &lt;/a&gt; , el middleware puede interpretar las acciones de manera diferente y brindar soporte para enviar &lt;a href=&quot;../glossary#async-action&quot;&gt;acciones asincr&amp;oacute;nicas&lt;/a&gt; . Las acciones asincr&amp;oacute;nicas suelen ser primitivas asincr&amp;oacute;nicas como Promesas, Observables o procesadores.</target>
        </trans-unit>
        <trans-unit id="c9b78993abb41c902e6df34aa6408e2767f67431" translate="yes" xml:space="preserve">
          <source>However, if you wrap &lt;a href=&quot;createstore&quot;&gt;&lt;code&gt;createStore&lt;/code&gt;&lt;/a&gt; with &lt;a href=&quot;applymiddleware&quot;&gt;&lt;code&gt;applyMiddleware&lt;/code&gt;&lt;/a&gt;, the middleware can interpret actions differently, and provide support for dispatching &lt;a href=&quot;https://redux.js.org/understanding/thinking-in-redux/glossary#async-action&quot;&gt;async actions&lt;/a&gt;. Async actions are usually asynchronous primitives like Promises, Observables, or thunks.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ef6ac0b7fe7b68443642555f387d0a08b371f125" translate="yes" xml:space="preserve">
          <source>However, in our Redux App we will still need &lt;code&gt;&amp;lt;Provider /&amp;gt;&lt;/code&gt;. &lt;code&gt;&amp;lt;Provider /&amp;gt;&lt;/code&gt; is the higher-order component provided by React Redux that lets you bind Redux to React (see &lt;a href=&quot;../basics/usagewithreact&quot;&gt;Usage with React&lt;/a&gt;).</source>
          <target state="translated">Sin embargo, en nuestra aplicaci&amp;oacute;n Redux todav&amp;iacute;a necesitaremos &lt;code&gt;&amp;lt;Provider /&amp;gt;&lt;/code&gt; . &lt;code&gt;&amp;lt;Provider /&amp;gt;&lt;/code&gt; es el componente de orden superior proporcionado por React Redux que le permite vincular Redux a React (consulte &lt;a href=&quot;../basics/usagewithreact&quot;&gt;Uso con React&lt;/a&gt; ).</target>
        </trans-unit>
        <trans-unit id="0bf708fc8c3314c936b8e0786f74c3d98798623d" translate="yes" xml:space="preserve">
          <source>However, it is important that we keep logging and crash reporting separate. Ideally we want them to be different modules, potentially in different packages. Otherwise we can't have an ecosystem of such utilities. (Hint: we're slowly getting to what middleware is!)</source>
          <target state="translated">Sin embargo,es importante que mantengamos el registro y el informe de accidentes por separado.Idealmente queremos que sean módulos diferentes,potencialmente en paquetes diferentes.De lo contrario no podemos tener un ecosistema de tales utilidades.(Pista:estamos llegando lentamente a lo que es el middleware!)</target>
        </trans-unit>
        <trans-unit id="9d31965c3ec47c4faba43c57bec50a234ddcbc5a" translate="yes" xml:space="preserve">
          <source>However, it is still monkeypatching.</source>
          <target state="translated">Sin embargo,sigue siendo un parche para los monos.</target>
        </trans-unit>
        <trans-unit id="b97da1c31078988cc6aa942ce9cf7c26c29a6edc" translate="yes" xml:space="preserve">
          <source>However, it's also important to understand that using Redux comes with tradeoffs. It's not designed to be the shortest or fastest way to write code. It's intended to help answer the question &quot;When did a certain slice of state change, and where did the data come from?&quot;, with predictable behavior. It does so by asking you to follow specific constraints in your application: store your application's state as plain data, describe changes as plain objects, and handle those changes with pure functions that apply updates immutably. This is often the source of complaints about &quot;boilerplate&quot;. These constraints require effort on the part of a developer, but also open up a number of additional possibilities (such as store persistence and synchronization).</source>
          <target state="translated">Sin embargo,también es importante entender que el uso de Redux viene con compensaciones.No está diseñado para ser la forma más corta o rápida de escribir código.Está pensado para ayudar a responder a la pregunta &quot;¿Cuándo cambió un cierto estado y de dónde vinieron los datos?&quot;,con un comportamiento predecible.Lo hace pidiéndote que sigas unas restricciones específicas en tu aplicación:almacena el estado de tu aplicación como datos simples,describe los cambios como objetos simples,y maneja esos cambios con funciones puras que aplican las actualizaciones de forma inmutable.Esto es a menudo la fuente de quejas sobre &quot;boilerplate&quot;.Estas restricciones requieren el esfuerzo de un desarrollador,pero también abren una serie de posibilidades adicionales (como la persistencia y la sincronización del almacenamiento).</target>
        </trans-unit>
        <trans-unit id="83c39c3a93928d93c157bb221e087802a4b99e7d" translate="yes" xml:space="preserve">
          <source>However, remember that the key is that the &lt;em&gt;original in-memory reference&lt;/em&gt; is not modified. &lt;strong&gt;As long as we make a copy first, we can safely mutate the copy&lt;/strong&gt;. Note that this is true for both arrays and objects, but nested values still must be updated using the same rules.</source>
          <target state="translated">Sin embargo, recuerde que la clave es que la &lt;em&gt;referencia en memoria original&lt;/em&gt; no se modifica. &lt;strong&gt;Siempre que hagamos una copia primero, podemos mutar la copia de forma segura&lt;/strong&gt; . Tenga en cuenta que esto es cierto tanto para matrices como para objetos, pero los valores anidados a&amp;uacute;n deben actualizarse utilizando las mismas reglas.</target>
        </trans-unit>
        <trans-unit id="b9b3dc33e56385563b9249f48fd1c5fc362f06f4" translate="yes" xml:space="preserve">
          <source>However, shallow checking will not work if your data encapsulated within an Immutable.JS object is itself an object. This is because Immutable.JS&amp;rsquo;s &lt;code&gt;toJS()&lt;/code&gt; method, which returns the data contained within an Immutable.JS object as a JavaScript value, will create a new object every time it&amp;rsquo;s called, and so break the reference with the encapsulated data.</source>
          <target state="translated">Sin embargo, la verificaci&amp;oacute;n superficial no funcionar&amp;aacute; si sus datos encapsulados dentro de un objeto Immutable.JS son en s&amp;iacute; mismos un objeto. Esto se debe a que el m&amp;eacute;todo &lt;code&gt;toJS()&lt;/code&gt; de Immutable.JS , que devuelve los datos contenidos en un objeto Immutable.JS como un valor de JavaScript, crear&amp;aacute; un nuevo objeto cada vez que se llame y, por lo tanto, romper&amp;aacute; la referencia con los datos encapsulados.</target>
        </trans-unit>
        <trans-unit id="b519a9362c1955561b3e4941334f49ea0df524a1" translate="yes" xml:space="preserve">
          <source>However, this quickly gets repetitive because different components request data from the same API endpoints. Moreover, we want to reuse some of this logic (e.g., early exit when there is cached data available) from many components.</source>
          <target state="translated">Sin embargo,esto se vuelve rápidamente repetitivo porque los diferentes componentes solicitan datos de los mismos puntos finales de la API.Además,queremos reutilizar parte de esta lógica (por ejemplo,la salida temprana cuando hay datos en caché disponibles)de muchos componentes.</target>
        </trans-unit>
        <trans-unit id="eb8c9304fae62928333a51a2b537a686e6b3a79a" translate="yes" xml:space="preserve">
          <source>However, we don't have to call &lt;code&gt;ReactDOM.render(&amp;lt;Provider&amp;gt;&amp;lt;App /&amp;gt;&amp;lt;/Provider&amp;gt;)&lt;/code&gt; if we're interested in hiding the fact that the sub-app component is a Redux app.</source>
          <target state="translated">Sin embargo, no tenemos que llamar a &lt;code&gt;ReactDOM.render(&amp;lt;Provider&amp;gt;&amp;lt;App /&amp;gt;&amp;lt;/Provider&amp;gt;)&lt;/code&gt; si estamos interesados ​​en ocultar el hecho de que el componente de la sub-aplicaci&amp;oacute;n es una aplicaci&amp;oacute;n Redux.</target>
        </trans-unit>
        <trans-unit id="30c62654e7682bc0051c67f69252368a8aa8daf0" translate="yes" xml:space="preserve">
          <source>However, when you import it, you're actually holding the wrapper component returned by &lt;code&gt;connect()&lt;/code&gt;, and not the &lt;code&gt;App&lt;/code&gt; component itself. If you want to test its interaction with Redux, this is good news: you can wrap it in a &lt;a href=&quot;https://github.com/reactjs/react-redux/blob/master/docs/api.md#provider-store&quot;&gt;&lt;code&gt;&amp;lt;Provider&amp;gt;&lt;/code&gt;&lt;/a&gt; with a store created specifically for this unit test. But sometimes you want to test just the rendering of the component, without a Redux store.</source>
          <target state="translated">Sin embargo, cuando lo importa, en realidad est&amp;aacute; sosteniendo el componente contenedor devuelto por &lt;code&gt;connect()&lt;/code&gt; , y no el componente de la &lt;code&gt;App&lt;/code&gt; s&amp;iacute;. Si desea probar su interacci&amp;oacute;n con Redux, esta es una buena noticia: puede envolverlo en un &lt;a href=&quot;https://github.com/reactjs/react-redux/blob/master/docs/api.md#provider-store&quot;&gt; &lt;code&gt;&amp;lt;Provider&amp;gt;&lt;/code&gt; &lt;/a&gt; con una tienda creada espec&amp;iacute;ficamente para esta prueba unitaria. Pero a veces desea probar solo la representaci&amp;oacute;n del componente, sin una tienda Redux.</target>
        </trans-unit>
        <trans-unit id="b34092e543dd93b03e651093a3d7a3b5a60f9550" translate="yes" xml:space="preserve">
          <source>However, you &lt;em&gt;do&lt;/em&gt; need to create a copied and updated object for each level of nesting that is affected. Although that shouldn't be particularly expensive, it's another good reason why you should keep your state normalized and shallow if possible.</source>
          <target state="translated">Sin embargo, usted &lt;em&gt;no&lt;/em&gt; necesita crear un objeto copiado y actualizada para cada nivel de anidamiento que se ve afectada. Aunque eso no deber&amp;iacute;a ser particularmente caro, es otra buena raz&amp;oacute;n por la que deber&amp;iacute;a mantener su estado normalizado y superficial si es posible.</target>
        </trans-unit>
        <trans-unit id="637b51ba07484e27e5e6b55d068f2f69a042cefb" translate="yes" xml:space="preserve">
          <source>I see the following presentational components and their props emerge from this brief:</source>
          <target state="translated">Veo que los siguientes componentes de presentación y su utilería surgen de este informe:</target>
        </trans-unit>
        <trans-unit id="cc27465fc6ceedd55291ea4f132c806be70591bb" translate="yes" xml:space="preserve">
          <source>I would like to amend this: don't use Redux until you have problems with vanilla React.</source>
          <target state="translated">Me gustaría enmendar esto:no use el Redux hasta que tenga problemas con el vainilla React.</target>
        </trans-unit>
        <trans-unit id="ad18fcf9dd2ee8a9f5ea170593bb2c6bee68d60d" translate="yes" xml:space="preserve">
          <source>I wrote Redux while working on my React Europe talk called &lt;a href=&quot;https://www.youtube.com/watch?v=xsSnOQynTHs&quot;&gt;&amp;ldquo;Hot Reloading with Time Travel&amp;rdquo;&lt;/a&gt;. My goal was to create a state management library with minimal API but completely predictable behavior, so it is possible to implement logging, hot reloading, time travel, universal apps, record and replay, without any buy-in from the developer.</source>
          <target state="translated">Escrib&amp;iacute; Redux mientras trabajaba en mi charla de React Europe llamada &lt;a href=&quot;https://www.youtube.com/watch?v=xsSnOQynTHs&quot;&gt;&quot;Recarga en caliente con viajes en el tiempo&quot;&lt;/a&gt; . Mi objetivo era crear una biblioteca de administraci&amp;oacute;n de estado con una API m&amp;iacute;nima pero un comportamiento completamente predecible, por lo que es posible implementar el registro, la recarga en caliente, el viaje en el tiempo, las aplicaciones universales, la grabaci&amp;oacute;n y la reproducci&amp;oacute;n, sin la participaci&amp;oacute;n del desarrollador.</target>
        </trans-unit>
        <trans-unit id="618b7ca25386b5f5436f346c2ed5051a72f4a73a" translate="yes" xml:space="preserve">
          <source>Idiomatic Redux: Normalizing the State Shape</source>
          <target state="translated">Idiomatic Redux:Normalizando la forma del estado</target>
        </trans-unit>
        <trans-unit id="fe91fe24d5f9dd8e770fad3a725bc0cec34aab62" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;applyMiddlewareByMonkeypatching&lt;/code&gt; doesn't assign &lt;code&gt;store.dispatch&lt;/code&gt; immediately after processing the first middleware, &lt;code&gt;store.dispatch&lt;/code&gt; will keep pointing to the original &lt;code&gt;dispatch&lt;/code&gt; function. Then the second middleware will also be bound to the original &lt;code&gt;dispatch&lt;/code&gt; function.</source>
          <target state="translated">Si &lt;code&gt;applyMiddlewareByMonkeypatching&lt;/code&gt; no asigna &lt;code&gt;store.dispatch&lt;/code&gt; inmediatamente despu&amp;eacute;s de procesar el primer middleware, &lt;code&gt;store.dispatch&lt;/code&gt; seguir&amp;aacute; apuntando a la funci&amp;oacute;n de &lt;code&gt;dispatch&lt;/code&gt; original . Entonces, el segundo middleware tambi&amp;eacute;n estar&amp;aacute; vinculado a la funci&amp;oacute;n de &lt;code&gt;dispatch&lt;/code&gt; original .</target>
        </trans-unit>
        <trans-unit id="35f456ed22b65b432754496a635957ff1170346a" translate="yes" xml:space="preserve">
          <source>If a Redux reducer directly mutates, and returns, the state object passed into it, the values of the root state object will change, but the object itself will not.</source>
          <target state="translated">Si un reductor Redux muta directamente,y devuelve,el objeto de estado pasado a él,los valores del objeto de estado raíz cambiarán,pero el objeto en sí mismo no lo hará.</target>
        </trans-unit>
        <trans-unit id="2a08f5491a0b259f6b66f794074ee1e3a74e48f7" translate="yes" xml:space="preserve">
          <source>If a reducer needs to know data from another slice of state, the state tree shape may need to be reorganized so that a single reducer is handling more of the data.</source>
          <target state="translated">Si un reductor necesita conocer datos de otra porción del estado,puede ser necesario reorganizar la forma de árbol del estado para que un solo reductor maneje más datos.</target>
        </trans-unit>
        <trans-unit id="9faa62e0446c64c2b5f25f17a54da0f020cabc00" translate="yes" xml:space="preserve">
          <source>If an action creator needs to read the current state, perform an API call, or cause a side effect, like a routing transition, it should return an &lt;a href=&quot;#async-action&quot;&gt;async action&lt;/a&gt; instead of an action.</source>
          <target state="translated">Si un creador de acciones necesita leer el estado actual, realizar una llamada a la API o provocar un efecto secundario, como una transici&amp;oacute;n de enrutamiento, deber&amp;iacute;a devolver una &lt;a href=&quot;#async-action&quot;&gt;acci&amp;oacute;n as&amp;iacute;ncrona en&lt;/a&gt; lugar de una acci&amp;oacute;n.</target>
        </trans-unit>
        <trans-unit id="e288fd9913bf6a8a74842392c22a2dd0b95c7906" translate="yes" xml:space="preserve">
          <source>If an object is immutable, any changes that need to be made to it within a function must be made to a &lt;em&gt;copy&lt;/em&gt; of the object.</source>
          <target state="translated">Si un objeto es inmutable, cualquier cambio que deba realizarse dentro de una funci&amp;oacute;n debe realizarse en una &lt;em&gt;copia&lt;/em&gt; del objeto.</target>
        </trans-unit>
        <trans-unit id="8e3b9f89d6838d129b565fe3186a16b253684268" translate="yes" xml:space="preserve">
          <source>If it does, the shallow equality check that &lt;code&gt;combineReducers&lt;/code&gt; performs will always pass, as the values of the state slice returned by the reducer may have been mutated, but the object itself has not - it&amp;rsquo;s still the same object that was passed to the reducer.</source>
          <target state="translated">Si lo hace, la verificaci&amp;oacute;n de igualdad superficial que realiza &lt;code&gt;combineReducers&lt;/code&gt; siempre pasar&amp;aacute;, ya que los valores del segmento de estado devuelto por el reductor pueden haber sido mutados, pero el objeto en s&amp;iacute; no lo ha hecho; sigue siendo el mismo objeto que se pas&amp;oacute; al reductor.</target>
        </trans-unit>
        <trans-unit id="ecb66a4049905816e9b1a9b102420a18f13b1512" translate="yes" xml:space="preserve">
          <source>If logging and crash reporting are separate utilities, they might look like this:</source>
          <target state="translated">Si el registro y el informe de accidentes son utilidades separadas,podrían verse así:</target>
        </trans-unit>
        <trans-unit id="6d10f3d1de6596be190d60a9a58973fddf0a134c" translate="yes" xml:space="preserve">
          <source>If no changes are needed, it should return the existing state as-is.</source>
          <target state="translated">Si no se necesitan cambios,debería devolver el estado existente tal como está.</target>
        </trans-unit>
        <trans-unit id="bf9ad27c90229a42dd677eb94e9afe7a27ff90c9" translate="yes" xml:space="preserve">
          <source>If one of the values of the props object returned from &lt;code&gt;mapStateToProps&lt;/code&gt; is an object that persists across calls to &lt;code&gt;connect&lt;/code&gt; (such as, potentially, the root state object), yet is directly mutated and returned by a selector function, React-Redux will not be able to detect the mutation, and so will not trigger a re-render of the wrapped component.</source>
          <target state="translated">Si uno de los valores del objeto props devuelto por &lt;code&gt;mapStateToProps&lt;/code&gt; es un objeto que persiste a trav&amp;eacute;s de llamadas para &lt;code&gt;connect&lt;/code&gt; (como, potencialmente, el objeto de estado ra&amp;iacute;z), pero es directamente mutado y devuelto por una funci&amp;oacute;n de selector, React-Redux no ser&amp;aacute; capaz de detectar la mutaci&amp;oacute;n y, por lo tanto, no activar&amp;aacute; una nueva representaci&amp;oacute;n del componente envuelto.</target>
        </trans-unit>
        <trans-unit id="d5d728b3f7c8756b0e1d6727b86ff4b7f986fb4b" translate="yes" xml:space="preserve">
          <source>If such an operation is used as a selector function in &lt;code&gt;mapStateToProps&lt;/code&gt;, the shallow equality check that React-Redux performs on each value in the props object that&amp;rsquo;s returned will always fail, as the selector is returning a new object each time.</source>
          <target state="translated">Si dicha operaci&amp;oacute;n se usa como una funci&amp;oacute;n de selector en &lt;code&gt;mapStateToProps&lt;/code&gt; , la verificaci&amp;oacute;n de igualdad superficial que React-Redux realiza en cada valor en el objeto props que se devuelve siempre fallar&amp;aacute;, ya que el selector devuelve un nuevo objeto cada vez.</target>
        </trans-unit>
        <trans-unit id="c5ceb90dff402277125291134484216343d65527" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;state&lt;/code&gt; given to it is &lt;code&gt;undefined&lt;/code&gt;, it must return the initial state for this specific reducer. According to the previous rule, the initial state must not be &lt;code&gt;undefined&lt;/code&gt; either. It is handy to specify it with ES6 optional arguments syntax, but you can also explicitly check the first argument for being &lt;code&gt;undefined&lt;/code&gt;.</source>
          <target state="translated">Si el &lt;code&gt;state&lt;/code&gt; otorga no est&amp;aacute; &lt;code&gt;undefined&lt;/code&gt; , debe devolver el estado inicial para este reductor espec&amp;iacute;fico. De acuerdo con la regla anterior, el estado inicial tampoco debe ser &lt;code&gt;undefined&lt;/code&gt; . Es &amp;uacute;til especificarlo con la sintaxis de argumentos opcionales de ES6, pero tambi&amp;eacute;n puede verificar expl&amp;iacute;citamente que el primer argumento &lt;code&gt;undefined&lt;/code&gt; est&amp;eacute; definido .</target>
        </trans-unit>
        <trans-unit id="54a886e11c2cb542f0ecf3d252296e52fe4603bb" translate="yes" xml:space="preserve">
          <source>If the check fails, however, the root state object &lt;em&gt;has&lt;/em&gt; been updated, and so &lt;code&gt;connect&lt;/code&gt; will call &lt;code&gt;mapStateToProps&lt;/code&gt;to see if the props for the wrapped component have been updated.</source>
          <target state="translated">Sin embargo, si la comprobaci&amp;oacute;n falla, el objeto de estado ra&amp;iacute;z &lt;em&gt;se&lt;/em&gt; ha actualizado y, por lo tanto, &lt;code&gt;connect&lt;/code&gt; llamar&amp;aacute; a &lt;code&gt;mapStateToProps&lt;/code&gt; para ver si se han actualizado los accesorios del componente envuelto.</target>
        </trans-unit>
        <trans-unit id="7ddbf9b8aa21e91694b18c1515d700c56e251753" translate="yes" xml:space="preserve">
          <source>If the shallow equality check fails between the new values returned from &lt;code&gt;mapStateToProps&lt;/code&gt; and the previous values that React-Redux kept a reference to, then a re-rendering of the component will be triggered.</source>
          <target state="translated">Si la verificaci&amp;oacute;n de igualdad superficial falla entre los nuevos valores devueltos por &lt;code&gt;mapStateToProps&lt;/code&gt; y los valores anteriores a los que React-Redux mantuvo una referencia, se activar&amp;aacute; una nueva representaci&amp;oacute;n del componente.</target>
        </trans-unit>
        <trans-unit id="dc5775e4e8ec131359e210f027aac76d6574f7fe" translate="yes" xml:space="preserve">
          <source>If these functions are published as separate modules, we can later use them to patch our store:</source>
          <target state="translated">Si estas funciones se publican como módulos separados,podemos usarlas más tarde para parchear nuestra tienda:</target>
        </trans-unit>
        <trans-unit id="88d3eb0d142a4003073ed1cec6a2f5fd9c278548" translate="yes" xml:space="preserve">
          <source>If two different variables reference the same immutable object, then a simple equality check of the two variables is enough to determine that they are equal, and that the object they both reference is unchanged. The equality check never has to check the values of any of the object&amp;rsquo;s properties, as it is, of course, immutable.</source>
          <target state="translated">Si dos variables diferentes hacen referencia al mismo objeto inmutable, entonces una simple verificaci&amp;oacute;n de igualdad de las dos variables es suficiente para determinar que son iguales y que el objeto al que ambas hacen referencia no ha cambiado. La verificaci&amp;oacute;n de igualdad nunca tiene que verificar los valores de ninguna de las propiedades del objeto, ya que, por supuesto, es inmutable.</target>
        </trans-unit>
        <trans-unit id="e8ff3107eee34b9cab68e06d253a65fa91028026" translate="yes" xml:space="preserve">
          <source>If we call &lt;code&gt;createStore&lt;/code&gt; without the &lt;code&gt;preloadedState&lt;/code&gt;, it's going to initialize the &lt;code&gt;state&lt;/code&gt; to &lt;code&gt;{}&lt;/code&gt;. Therefore, &lt;code&gt;state.a&lt;/code&gt; and &lt;code&gt;state.b&lt;/code&gt; will be &lt;code&gt;undefined&lt;/code&gt; by the time it calls &lt;code&gt;a&lt;/code&gt; and &lt;code&gt;b&lt;/code&gt; reducers. &lt;strong&gt;Both &lt;code&gt;a&lt;/code&gt; and &lt;code&gt;b&lt;/code&gt; reducers will receive &lt;code&gt;undefined&lt;/code&gt; as &lt;em&gt;their&lt;/em&gt; &lt;code&gt;state&lt;/code&gt; arguments, and if they specify default &lt;code&gt;state&lt;/code&gt; values, those will be returned.&lt;/strong&gt; This is how the combined reducer returns a &lt;code&gt;{ a: 'lol', b: 'wat' }&lt;/code&gt; state object on the first invocation.</source>
          <target state="translated">Si llamamos a &lt;code&gt;createStore&lt;/code&gt; sin &lt;code&gt;preloadedState&lt;/code&gt; , inicializar&amp;aacute; el &lt;code&gt;state&lt;/code&gt; en &lt;code&gt;{}&lt;/code&gt; . Por lo tanto, &lt;code&gt;state.a&lt;/code&gt; y &lt;code&gt;state.b&lt;/code&gt; ser&amp;aacute;n &lt;code&gt;undefined&lt;/code&gt; en el momento en que llama &lt;code&gt;a&lt;/code&gt; y &lt;code&gt;b&lt;/code&gt; reductores. &lt;strong&gt;Ambos &lt;code&gt;a&lt;/code&gt; y &lt;code&gt;b&lt;/code&gt; reductores recibir&amp;aacute;n &lt;code&gt;undefined&lt;/code&gt; como &lt;em&gt;su &lt;/em&gt; &lt;code&gt;state&lt;/code&gt; argumentos, y si especifican defecto &lt;code&gt;state&lt;/code&gt; valores, los que ser&amp;aacute;n devueltos. &lt;/strong&gt;As&amp;iacute; es como el reductor combinado devuelve a &lt;code&gt;{ a: 'lol', b: 'wat' }&lt;/code&gt; objeto de estado en la primera invocaci&amp;oacute;n.</target>
        </trans-unit>
        <trans-unit id="8df247b3c417208103f01c75fc35280be43fc622" translate="yes" xml:space="preserve">
          <source>If we have a nested tree of slice reducers, each slice reducer will need to know how to respond to this action appropriately. We will need to include all the relevant data in the action. We need to update the correct Post object with the comment's ID, create a new Comment object using that ID as a key, and include the Comment's ID in the list of all Comment IDs. Here's how the pieces for this might fit together:</source>
          <target state="translated">Si tenemos un árbol anidado de reductores de rodajas,cada reductor de rodajas deberá saber cómo responder a esta acción de manera adecuada.Necesitaremos incluir todos los datos relevantes en la acción.Necesitamos actualizar el objeto Post correcto con el ID del comentario,crear un nuevo objeto Comment usando ese ID como clave,e incluir el ID del Comment en la lista de todos los ID de Comment.Así es como las piezas para esto podrían encajar:</target>
        </trans-unit>
        <trans-unit id="fb9835b5068457c01cd0ee22c6f2d1f319535710" translate="yes" xml:space="preserve">
          <source>If we pass &lt;code&gt;makeMapStateToProps&lt;/code&gt; to &lt;code&gt;connect&lt;/code&gt;, each instance of the &lt;code&gt;VisibleTodosList&lt;/code&gt; container will get its own &lt;code&gt;mapStateToProps&lt;/code&gt; function with a private &lt;code&gt;getVisibleTodos&lt;/code&gt; selector. Memoization will now work correctly regardless of the render order of the &lt;code&gt;VisibleTodoList&lt;/code&gt; containers.</source>
          <target state="translated">Si pasamos &lt;code&gt;makeMapStateToProps&lt;/code&gt; para &lt;code&gt;connect&lt;/code&gt; , cada instancia del contenedor &lt;code&gt;VisibleTodosList&lt;/code&gt; obtendr&amp;aacute; su propia funci&amp;oacute;n &lt;code&gt;mapStateToProps&lt;/code&gt; con un selector privado &lt;code&gt;getVisibleTodos&lt;/code&gt; . La memorizaci&amp;oacute;n ahora funcionar&amp;aacute; correctamente independientemente del orden de representaci&amp;oacute;n de los contenedores &lt;code&gt;VisibleTodoList&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="e5f7ebaf8e95ed592e947bea2433fe217182ccf7" translate="yes" xml:space="preserve">
          <source>If we wanted to implement Undo and Redo in such an app, we'd need to store more state so we can answer the following questions:</source>
          <target state="translated">Si quisiéramos implementar Deshacer y Rehacer en tal aplicación,necesitaríamos almacenar más estado para poder responder a las siguientes preguntas:</target>
        </trans-unit>
        <trans-unit id="3e391178bee157d67e539832bad15008f2621985" translate="yes" xml:space="preserve">
          <source>If you actually are concerned about reducer performance, you can use a utility such as &lt;a href=&quot;https://github.com/omnidan/redux-ignore&quot;&gt;redux-ignore&lt;/a&gt; or &lt;a href=&quot;https://github.com/chrisdavies/reduxr-scoped-reducer&quot;&gt;reduxr-scoped-reducer&lt;/a&gt; to ensure that only certain reducers listen to specific actions. You can also use &lt;a href=&quot;https://github.com/michaelcontento/redux-log-slow-reducers&quot;&gt;redux-log-slow-reducers&lt;/a&gt; to do some performance benchmarking.</source>
          <target state="translated">Si realmente le preocupa el rendimiento del reductor, puede usar una utilidad como &lt;a href=&quot;https://github.com/omnidan/redux-ignore&quot;&gt;redux-ignore&lt;/a&gt; o &lt;a href=&quot;https://github.com/chrisdavies/reduxr-scoped-reducer&quot;&gt;reduxr-scoped-reducer&lt;/a&gt; para asegurarse de que solo ciertos reductores escuchen acciones espec&amp;iacute;ficas. Tambi&amp;eacute;n puede utilizar &lt;a href=&quot;https://github.com/michaelcontento/redux-log-slow-reducers&quot;&gt;redux-log-slow-redurs&lt;/a&gt; para realizar evaluaciones comparativas de rendimiento.</target>
        </trans-unit>
        <trans-unit id="199562b5deb45f1013629dc76cd0a79e09f79a5f" translate="yes" xml:space="preserve">
          <source>If you are okay with things like persistence and time-travel debugging potentially not working as intended, then you are totally welcome to put non-serializable items into your Redux store. Ultimately, it's &lt;em&gt;your&lt;/em&gt; application, and how you implement it is up to you. As with many other things about Redux, just be sure you understand what tradeoffs are involved.</source>
          <target state="translated">Si est&amp;aacute; de acuerdo con cosas como la persistencia y la depuraci&amp;oacute;n de viajes en el tiempo que posiblemente no funcionen como se esperaba, entonces puede colocar elementos no serializables en su tienda Redux. En &amp;uacute;ltima instancia, es &lt;em&gt;su&lt;/em&gt; aplicaci&amp;oacute;n y la forma en que la implementa depende de usted. Al igual que con muchas otras cosas sobre Redux, aseg&amp;uacute;rese de comprender las compensaciones involucradas.</target>
        </trans-unit>
        <trans-unit id="932e447c8721986d2617272ec0cb57f8fa838b1b" translate="yes" xml:space="preserve">
          <source>If you are serving your &lt;code&gt;index.html&lt;/code&gt; from Express:</source>
          <target state="translated">Si est&amp;aacute; sirviendo su &lt;code&gt;index.html&lt;/code&gt; desde Express:</target>
        </trans-unit>
        <trans-unit id="f7e044138df780189a8da20f4e5abaa151739142" translate="yes" xml:space="preserve">
          <source>If you are serving your &lt;code&gt;index.html&lt;/code&gt; from WebpackDevServer: You can add to your webpack.config.dev.js:</source>
          <target state="translated">Si est&amp;aacute; sirviendo su &lt;code&gt;index.html&lt;/code&gt; desde WebpackDevServer: puede agregar a su webpack.config.dev.js:</target>
        </trans-unit>
        <trans-unit id="4c971a979a1e736d56294d1498dc9977ed0a0326" translate="yes" xml:space="preserve">
          <source>If you are using &lt;a href=&quot;https://github.com/reactjs/react-redux&quot;&gt;React Redux&lt;/a&gt;, you can call selectors as regular functions inside &lt;code&gt;mapStateToProps()&lt;/code&gt;:</source>
          <target state="translated">Si est&amp;aacute; utilizando &lt;a href=&quot;https://github.com/reactjs/react-redux&quot;&gt;React Redux&lt;/a&gt; , puede llamar a los selectores como funciones regulares dentro de &lt;code&gt;mapStateToProps()&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="b429d41b92c2a713e5a488236e816823364d7151" translate="yes" xml:space="preserve">
          <source>If you are using Create React App, you won't need to configure a fallback URL, it is automatically done.</source>
          <target state="translated">Si estás usando la aplicación Create React,no necesitarás configurar una URL alternativa,se hace automáticamente.</target>
        </trans-unit>
        <trans-unit id="a2bbb0e9ddb72ba973272562f236d089b4f6c651" translate="yes" xml:space="preserve">
          <source>If you are using ES6 in your application source, but write your tests in ES5, you should know that Babel handles the interchangeable use of ES6 &lt;code&gt;import&lt;/code&gt; and CommonJS &lt;code&gt;require&lt;/code&gt; through its &lt;a href=&quot;http://babeljs.io/docs/usage/modules/#interop&quot;&gt;interop&lt;/a&gt; capability to run two module formats side-by-side, but the behavior is &lt;a href=&quot;https://github.com/babel/babel/issues/2047&quot;&gt;slightly different&lt;/a&gt;. If you add a second export beside your default export, you can no longer import the default using &lt;code&gt;require('./App')&lt;/code&gt;. Instead you have to use &lt;code&gt;require('./App').default&lt;/code&gt;.</source>
          <target state="translated">Si est&amp;aacute; utilizando ES6 en la fuente de su aplicaci&amp;oacute;n, pero escribe sus pruebas en ES5, debe saber que Babel maneja el uso intercambiable de la &lt;code&gt;import&lt;/code&gt; aci&amp;oacute;n de ES6 y CommonJS &lt;code&gt;require&lt;/code&gt; trav&amp;eacute;s de su capacidad de &lt;a href=&quot;http://babeljs.io/docs/usage/modules/#interop&quot;&gt;interoperabilidad&lt;/a&gt; para ejecutar dos formatos de m&amp;oacute;dulo uno al lado del otro, pero el comportamiento es &lt;a href=&quot;https://github.com/babel/babel/issues/2047&quot;&gt;ligeramente diferente&lt;/a&gt; . Si agrega una segunda exportaci&amp;oacute;n junto a su exportaci&amp;oacute;n predeterminada, ya no podr&amp;aacute; importar la predeterminada usando &lt;code&gt;require('./App')&lt;/code&gt; . En su lugar, debe utilizar &lt;code&gt;require('./App').default&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="036337c885ec3cef3b7191a050a9577f4c076991" translate="yes" xml:space="preserve">
          <source>If you attempt to call &lt;code&gt;dispatch&lt;/code&gt; from inside the &lt;a href=&quot;../glossary#reducer&quot;&gt;reducer&lt;/a&gt;, it will throw with an error saying &amp;ldquo;Reducers may not dispatch actions.&amp;rdquo; This is similar to &amp;ldquo;Cannot dispatch in a middle of dispatch&amp;rdquo; error in Flux, but doesn't cause the problems associated with it. In Flux, a dispatch is forbidden while Stores are handling the action and emitting updates. This is unfortunate because it makes it impossible to dispatch actions from component lifecycle hooks or other benign places.</source>
          <target state="translated">Si intenta llamar al &lt;code&gt;dispatch&lt;/code&gt; desde el interior del &lt;a href=&quot;../glossary#reducer&quot;&gt;reductor&lt;/a&gt; , se lanzar&amp;aacute; con un error que dice &quot;Es posible que los reductores no despachen acciones&quot;. Esto es similar al error &quot;No se puede enviar en medio de un env&amp;iacute;o&quot; en Flux, pero no causa los problemas asociados con &amp;eacute;l. En Flux, un env&amp;iacute;o est&amp;aacute; prohibido mientras las tiendas est&amp;aacute;n manejando la acci&amp;oacute;n y emitiendo actualizaciones. Esto es lamentable porque imposibilita el env&amp;iacute;o de acciones desde los ganchos del ciclo de vida de los componentes u otros lugares benignos.</target>
        </trans-unit>
        <trans-unit id="705ba971253544f6c3503e8626c666b6b1f1179f" translate="yes" xml:space="preserve">
          <source>If you attempt to call &lt;code&gt;dispatch&lt;/code&gt; from inside the &lt;a href=&quot;https://redux.js.org/understanding/thinking-in-redux/glossary#reducer&quot;&gt;reducer&lt;/a&gt;, it will throw with an error saying &amp;ldquo;Reducers may not dispatch actions.&amp;rdquo; This is similar to &amp;ldquo;Cannot dispatch in a middle of dispatch&amp;rdquo; error in Flux, but doesn't cause the problems associated with it. In Flux, a dispatch is forbidden while Stores are handling the action and emitting updates. This is unfortunate because it makes it impossible to dispatch actions from component lifecycle hooks or other benign places.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a8a26433b9beefd0c99622c27b6f8d2d577a33f8" translate="yes" xml:space="preserve">
          <source>If you define an action creator, calling it will &lt;em&gt;not&lt;/em&gt; automatically dispatch the action. For example, this code will do nothing:</source>
          <target state="translated">Si se define un creador de acci&amp;oacute;n, llam&amp;aacute;ndola ser&amp;aacute; &lt;em&gt;no&lt;/em&gt; enviar&amp;aacute; autom&amp;aacute;ticamente la acci&amp;oacute;n. Por ejemplo, este c&amp;oacute;digo no har&amp;aacute; nada:</target>
        </trans-unit>
        <trans-unit id="30875373163ba2a0b61d1b93ce3b8577d3f0b61f" translate="yes" xml:space="preserve">
          <source>If you do not provide your own &lt;code&gt;mapDispatchToProps&lt;/code&gt; function when calling &lt;code&gt;connect()&lt;/code&gt;, React Redux will provide a default version, which simply returns the &lt;code&gt;dispatch&lt;/code&gt; function as a prop. That means that if you &lt;em&gt;do&lt;/em&gt; provide your own function, &lt;code&gt;dispatch&lt;/code&gt; is &lt;em&gt;not&lt;/em&gt; automatically provided. If you still want it available as a prop, you need to explicitly return it yourself in your &lt;code&gt;mapDispatchToProps&lt;/code&gt; implementation.</source>
          <target state="translated">Si no proporciona su propia funci&amp;oacute;n &lt;code&gt;mapDispatchToProps&lt;/code&gt; al llamar a &lt;code&gt;connect()&lt;/code&gt; , React Redux proporcionar&amp;aacute; una versi&amp;oacute;n predeterminada, que simplemente devuelve la funci&amp;oacute;n de &lt;code&gt;dispatch&lt;/code&gt; como un accesorio. Eso significa que si &lt;em&gt;haces&lt;/em&gt; proporcionar su propia funci&amp;oacute;n, &lt;code&gt;dispatch&lt;/code&gt; se &lt;em&gt;no&lt;/em&gt; proporciona autom&amp;aacute;ticamente. Si a&amp;uacute;n desea que est&amp;eacute; disponible como accesorio, debe devolverlo expl&amp;iacute;citamente usted mismo en su implementaci&amp;oacute;n &lt;code&gt;mapDispatchToProps&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="9737b1fd992921039384e8e5be9f5b18af16860f" translate="yes" xml:space="preserve">
          <source>If you don't use a module bundler, it's also fine. The &lt;code&gt;redux&lt;/code&gt; npm package includes precompiled production and development &lt;a href=&quot;https://github.com/umdjs/umd&quot;&gt;UMD&lt;/a&gt; builds in the &lt;a href=&quot;https://unpkg.com/redux/dist/&quot;&gt;&lt;code&gt;dist&lt;/code&gt; folder&lt;/a&gt;. They can be used directly without a bundler and are thus compatible with many popular JavaScript module loaders and environments. For example, you can drop a UMD build as a &lt;a href=&quot;https://unpkg.com/redux/dist/redux.js&quot;&gt;&lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; tag&lt;/a&gt; on the page, or &lt;a href=&quot;https://github.com/reactjs/redux/pull/1181#issuecomment-167361975&quot;&gt;tell Bower to install it&lt;/a&gt;. The UMD builds make Redux available as a &lt;code&gt;window.Redux&lt;/code&gt; global variable.</source>
          <target state="translated">Si no usa un paquete de m&amp;oacute;dulos, tambi&amp;eacute;n est&amp;aacute; bien. El paquete &lt;code&gt;redux&lt;/code&gt; npm incluye compilaciones &lt;a href=&quot;https://github.com/umdjs/umd&quot;&gt;UMD de&lt;/a&gt; desarrollo y producci&amp;oacute;n precompiladas en la &lt;a href=&quot;https://unpkg.com/redux/dist/&quot;&gt;carpeta &lt;/a&gt; &lt;code&gt;dist&lt;/code&gt; . Se pueden usar directamente sin un paquete y, por lo tanto, son compatibles con muchos cargadores y entornos de m&amp;oacute;dulos JavaScript populares. Por ejemplo, puede colocar una compilaci&amp;oacute;n UMD como una &lt;a href=&quot;https://unpkg.com/redux/dist/redux.js&quot;&gt;etiqueta &lt;/a&gt; &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; en la p&amp;aacute;gina o &lt;a href=&quot;https://github.com/reactjs/redux/pull/1181#issuecomment-167361975&quot;&gt;decirle a Bower que la instale&lt;/a&gt; . Las compilaciones de UMD hacen que Redux est&amp;eacute; disponible como una variable global &lt;code&gt;window.Redux&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="4cd567ddaa1825598645d89fa68d6db13748ff49" translate="yes" xml:space="preserve">
          <source>If you don't use npm, you may grab the latest UMD build from unpkg (either a &lt;a href=&quot;https://unpkg.com/react-redux@latest/dist/react-redux.js&quot;&gt;development&lt;/a&gt; or a &lt;a href=&quot;https://unpkg.com/react-redux@latest/dist/react-redux.min.js&quot;&gt;production&lt;/a&gt; build). The UMD build exports a global called &lt;code&gt;window.ReactRedux&lt;/code&gt; if you add it to your page via a &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; tag.</source>
          <target state="translated">Si no usa npm, puede obtener la &amp;uacute;ltima compilaci&amp;oacute;n de UMD de unkg (ya sea una compilaci&amp;oacute;n de &lt;a href=&quot;https://unpkg.com/react-redux@latest/dist/react-redux.js&quot;&gt;desarrollo&lt;/a&gt; o de &lt;a href=&quot;https://unpkg.com/react-redux@latest/dist/react-redux.min.js&quot;&gt;producci&amp;oacute;n&lt;/a&gt; ). La compilaci&amp;oacute;n UMD exporta una &lt;code&gt;window.ReactRedux&lt;/code&gt; global llamada window.ReactRedux si la agrega a su p&amp;aacute;gina a trav&amp;eacute;s de una etiqueta &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="8cc59110c4fe5748abe56530a6ab2f4825ec53fe" translate="yes" xml:space="preserve">
          <source>If you enjoyed my course, consider supporting Egghead by &lt;a href=&quot;https://egghead.io/pricing&quot;&gt;buying a subscription&lt;/a&gt;. Subscribers have access to the source code for the example in every one of my videos, as well as to tons of advanced lessons on other topics, including JavaScript in depth, React, Angular, and more. Many &lt;a href=&quot;https://egghead.io/instructors&quot;&gt;Egghead instructors&lt;/a&gt; are also open source library authors, so buying a subscription is a nice way to thank them for the work that they've done.</source>
          <target state="translated">Si disfrut&amp;oacute; de mi curso, considere apoyar Egghead &lt;a href=&quot;https://egghead.io/pricing&quot;&gt;comprando una suscripci&amp;oacute;n&lt;/a&gt; . Los suscriptores tienen acceso al c&amp;oacute;digo fuente del ejemplo en cada uno de mis videos, as&amp;iacute; como a toneladas de lecciones avanzadas sobre otros temas, incluido JavaScript en profundidad, React, Angular y m&amp;aacute;s. Muchos &lt;a href=&quot;https://egghead.io/instructors&quot;&gt;instructores de Egghead&lt;/a&gt; tambi&amp;eacute;n son autores de bibliotecas de c&amp;oacute;digo abierto, por lo que comprar una suscripci&amp;oacute;n es una buena forma de agradecerles el trabajo que han realizado.</target>
        </trans-unit>
        <trans-unit id="75a385f2b719ab2caac4808cd62fba207c8acd6d" translate="yes" xml:space="preserve">
          <source>If you figure it out, &lt;a href=&quot;https://github.com/reactjs/redux/edit/master/docs/Troubleshooting.md&quot;&gt;edit this document&lt;/a&gt; as a courtesy to the next person having the same problem.</source>
          <target state="translated">Si lo averigua, &lt;a href=&quot;https://github.com/reactjs/redux/edit/master/docs/Troubleshooting.md&quot;&gt;edite este documento&lt;/a&gt; como cortes&amp;iacute;a para la siguiente persona que tenga el mismo problema.</target>
        </trans-unit>
        <trans-unit id="35c54f24f34f6294fae047991edc9eee543297c8" translate="yes" xml:space="preserve">
          <source>If you have nested entities, or if you let users edit received entities, you should keep them separately in the state as if it was a database. In pagination information, you would only refer to them by their IDs. This lets you always keep them up to date. The &lt;a href=&quot;../introduction/examples#real-world&quot;&gt;real world example&lt;/a&gt; shows this approach, together with &lt;a href=&quot;https://github.com/paularmstrong/normalizr&quot;&gt;normalizr&lt;/a&gt; to normalize the nested API responses. With this approach, your state might look like this:</source>
          <target state="translated">Si tiene entidades anidadas, o si permite que los usuarios editen las entidades recibidas, debe mantenerlas por separado en el estado como si fuera una base de datos. En la informaci&amp;oacute;n de paginaci&amp;oacute;n, solo se referir&amp;aacute; a ellos por sus ID. Esto le permite mantenerlos siempre actualizados. El &lt;a href=&quot;../introduction/examples#real-world&quot;&gt;ejemplo del mundo real&lt;/a&gt; muestra este enfoque, junto con &lt;a href=&quot;https://github.com/paularmstrong/normalizr&quot;&gt;normalizr&lt;/a&gt; para normalizar las respuestas API anidadas. Con este enfoque, su estado podr&amp;iacute;a verse as&amp;iacute;:</target>
        </trans-unit>
        <trans-unit id="4f8b6dfa0ebcbb78dc0a91f22c821a3a280371e2" translate="yes" xml:space="preserve">
          <source>If you make a typo when importing an action constant, you will get &lt;code&gt;undefined&lt;/code&gt;. Redux will immediately throw when dispatching such an action, and you'll find the mistake sooner.</source>
          <target state="translated">Si comete un error tipogr&amp;aacute;fico al importar una constante de acci&amp;oacute;n, obtendr&amp;aacute; &lt;code&gt;undefined&lt;/code&gt; . Redux lanzar&amp;aacute; inmediatamente al enviar tal acci&amp;oacute;n, y encontrar&amp;aacute; el error antes.</target>
        </trans-unit>
        <trans-unit id="73befc0dc9f970460cd3aed6b1aca8d76525c521" translate="yes" xml:space="preserve">
          <source>If you use ES5, instead of &lt;code&gt;import * as&lt;/code&gt; syntax you can just pass &lt;code&gt;require('./TodoActionCreators')&lt;/code&gt; to &lt;code&gt;bindActionCreators&lt;/code&gt; as the first argument. The only thing it cares about is that the values of the &lt;code&gt;actionCreators&lt;/code&gt; arguments are functions. The module system doesn't matter.</source>
          <target state="translated">Si usa ES5, en lugar de &lt;code&gt;import * as&lt;/code&gt; sintaxis, puede simplemente pasar &lt;code&gt;require('./TodoActionCreators')&lt;/code&gt; a &lt;code&gt;bindActionCreators&lt;/code&gt; como primer argumento. Lo &amp;uacute;nico que le importa es que los valores de los argumentos de &lt;code&gt;actionCreators&lt;/code&gt; sean funciones. El sistema de m&amp;oacute;dulos no importa.</target>
        </trans-unit>
        <trans-unit id="bb95e3b794af6e75092386ec6934331c4319c7e5" translate="yes" xml:space="preserve">
          <source>If you use ES5, instead of &lt;code&gt;import * as&lt;/code&gt; syntax you can just pass &lt;code&gt;require('./TodoActionCreators')&lt;/code&gt; to &lt;code&gt;bindActionCreators&lt;/code&gt; as the first argument. The only thing it cares about is that the values of the &lt;code&gt;actionCreators&lt;/code&gt; properties are functions. The module system doesn't matter.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4df0e81af972f49797fdb77dbfa3675c8af338b1" translate="yes" xml:space="preserve">
          <source>If you use React, note that you can improve performance of multiple synchronous dispatches by wrapping them in &lt;code&gt;ReactDOM.unstable_batchedUpdates()&lt;/code&gt;, but this API is experimental and may be removed in any React release so don't rely on it too heavily. Take a look at &lt;a href=&quot;https://github.com/tshelburne/redux-batched-actions&quot;&gt;redux-batched-actions&lt;/a&gt; (a higher-order reducer that lets you dispatch several actions as if it was one and &amp;ldquo;unpack&amp;rdquo; them in the reducer), &lt;a href=&quot;https://github.com/tappleby/redux-batched-subscribe&quot;&gt;redux-batched-subscribe&lt;/a&gt; (a store enhancer that lets you debounce subscriber calls for multiple dispatches), or &lt;a href=&quot;https://github.com/manaflair/redux-batch&quot;&gt;redux-batch&lt;/a&gt; (a store enhancer that handles dispatching an array of actions with a single subscriber notification).</source>
          <target state="translated">Si usa React, tenga en cuenta que puede mejorar el rendimiento de m&amp;uacute;ltiples despachos s&amp;iacute;ncronos envolvi&amp;eacute;ndolos en &lt;code&gt;ReactDOM.unstable_batchedUpdates()&lt;/code&gt; , pero esta API es experimental y puede eliminarse en cualquier versi&amp;oacute;n de React, as&amp;iacute; que no conf&amp;iacute;e demasiado en ella. Eche un vistazo a &lt;a href=&quot;https://github.com/tshelburne/redux-batched-actions&quot;&gt;redux-batched-actions&lt;/a&gt; (un reductor de orden superior que le permite enviar varias acciones como si fuera una y &quot;descomprimirlas&quot; en el reductor), &lt;a href=&quot;https://github.com/tappleby/redux-batched-subscribe&quot;&gt;redux-batched-subscribe&lt;/a&gt; (un potenciador de la tienda que le permite eliminar el suscriptor llamadas para m&amp;uacute;ltiples despachos), o &lt;a href=&quot;https://github.com/manaflair/redux-batch&quot;&gt;redux-batch&lt;/a&gt; (un potenciador de la tienda que maneja el despacho de una serie de acciones con una sola notificaci&amp;oacute;n de suscriptor).</target>
        </trans-unit>
        <trans-unit id="9271dc344ed7ad99882268b8d2eb8bf8888f3412" translate="yes" xml:space="preserve">
          <source>If you use a library like &lt;a href=&quot;https://github.com/reactjs/react-redux&quot;&gt;React Redux&lt;/a&gt;, you might be using &lt;a href=&quot;https://medium.com/@dan_abramov/mixins-are-dead-long-live-higher-order-components-94a0d2f9e750&quot;&gt;higher-order components&lt;/a&gt; like &lt;a href=&quot;https://github.com/reactjs/react-redux/blob/master/docs/api.md#connectmapstatetoprops-mapdispatchtoprops-mergeprops-options&quot;&gt;&lt;code&gt;connect()&lt;/code&gt;&lt;/a&gt;. This lets you inject Redux state into a regular React component.</source>
          <target state="translated">Si usa una biblioteca como &lt;a href=&quot;https://github.com/reactjs/react-redux&quot;&gt;React Redux&lt;/a&gt; , es posible que est&amp;eacute; usando &lt;a href=&quot;https://medium.com/@dan_abramov/mixins-are-dead-long-live-higher-order-components-94a0d2f9e750&quot;&gt;componentes de orden superior&lt;/a&gt; como &lt;a href=&quot;https://github.com/reactjs/react-redux/blob/master/docs/api.md#connectmapstatetoprops-mapdispatchtoprops-mergeprops-options&quot;&gt; &lt;code&gt;connect()&lt;/code&gt; &lt;/a&gt; . Esto le permite inyectar el estado de Redux en un componente React normal.</target>
        </trans-unit>
        <trans-unit id="6cd635904f7059bfcd20e75164dcce6a3c6db39b" translate="yes" xml:space="preserve">
          <source>If you use other store enhancers in addition to &lt;code&gt;applyMiddleware&lt;/code&gt;, make sure to put &lt;code&gt;applyMiddleware&lt;/code&gt; before them in the composition chain because the middleware is potentially asynchronous. For example, it should go before &lt;a href=&quot;https://github.com/gaearon/redux-devtools&quot;&gt;redux-devtools&lt;/a&gt; because otherwise the DevTools won't see the raw actions emitted by the Promise middleware and such.</source>
          <target state="translated">Si usa otros mejoradores de tienda adem&amp;aacute;s de &lt;code&gt;applyMiddleware&lt;/code&gt; , aseg&amp;uacute;rese de poner &lt;code&gt;applyMiddleware&lt;/code&gt; antes que ellos en la cadena de composici&amp;oacute;n porque el middleware es potencialmente asincr&amp;oacute;nico. Por ejemplo, deber&amp;iacute;a ir antes que &lt;a href=&quot;https://github.com/gaearon/redux-devtools&quot;&gt;redux-devtools&lt;/a&gt; porque, de lo contrario, DevTools no ver&amp;aacute; las acciones sin procesar emitidas por el middleware Promise y dem&amp;aacute;s.</target>
        </trans-unit>
        <trans-unit id="ba5b3f8eefb314889590fd6a34d6b996046d800c" translate="yes" xml:space="preserve">
          <source>If you use other store enhancers in addition to &lt;code&gt;applyMiddleware&lt;/code&gt;, make sure to put &lt;code&gt;applyMiddleware&lt;/code&gt; before them in the composition chain because the middleware is potentially asynchronous. For example, it should go before &lt;a href=&quot;https://github.com/reduxjs/redux-devtools&quot;&gt;redux-devtools&lt;/a&gt; because otherwise the DevTools won't see the raw actions emitted by the Promise middleware and such.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5b994687ed5da06c8ff7d250360e547dbe6399b8" translate="yes" xml:space="preserve">
          <source>If you use something like &lt;a href=&quot;https://github.com/reactjs/react-router&quot;&gt;React Router&lt;/a&gt;, you might also want to express your data fetching dependencies as static &lt;code&gt;fetchData()&lt;/code&gt; methods on your route handler components. They may return &lt;a href=&quot;../advanced/asyncactions&quot;&gt;async actions&lt;/a&gt;, so that your &lt;code&gt;handleRender&lt;/code&gt; function can match the route to the route handler component classes, dispatch &lt;code&gt;fetchData()&lt;/code&gt; result for each of them, and render only after the Promises have resolved. This way the specific API calls required for different routes are colocated with the route handler component definitions. You can also use the same technique on the client side to prevent the router from switching the page until its data has been loaded.</source>
          <target state="translated">Si usa algo como &lt;a href=&quot;https://github.com/reactjs/react-router&quot;&gt;React Router&lt;/a&gt; , es posible que tambi&amp;eacute;n desee expresar sus dependencias de &lt;code&gt;fetchData()&lt;/code&gt; datos como m&amp;eacute;todos est&amp;aacute;ticos fetchData () en los componentes de su controlador de ruta. Pueden devolver &lt;a href=&quot;../advanced/asyncactions&quot;&gt;acciones asincr&amp;oacute;nicas&lt;/a&gt; , de modo que su funci&amp;oacute;n &lt;code&gt;handleRender&lt;/code&gt; pueda hacer coincidir la ruta con las clases de componentes del controlador de ruta, enviar el resultado de &lt;code&gt;fetchData()&lt;/code&gt; para cada uno de ellos y representar solo despu&amp;eacute;s de que las Promesas se hayan resuelto. De esta manera, las llamadas API espec&amp;iacute;ficas requeridas para diferentes rutas se colocan con las definiciones de componentes del controlador de ruta. Tambi&amp;eacute;n puede utilizar la misma t&amp;eacute;cnica en el lado del cliente para evitar que el enrutador cambie la p&amp;aacute;gina hasta que se hayan cargado sus datos.</target>
        </trans-unit>
        <trans-unit id="f28ac508cdd88eefae0fc560e0d0772276239bef" translate="yes" xml:space="preserve">
          <source>If you want to conditionally apply a middleware, make sure to only import it when it's needed:</source>
          <target state="translated">Si quieres aplicar condicionalmente un middleware,asegúrate de importarlo sólo cuando sea necesario:</target>
        </trans-unit>
        <trans-unit id="3e7d35f34c8cafb2605b96694ac400ffa75f61c6" translate="yes" xml:space="preserve">
          <source>If you're already familiar with the basic concepts and have previously completed this tutorial, don't forget to check out &lt;a href=&quot;../advanced/asyncflow&quot;&gt;async flow&lt;/a&gt; in the &lt;a href=&quot;../advanced/index&quot;&gt;advanced tutorial&lt;/a&gt; to learn how middleware transforms &lt;a href=&quot;../advanced/asyncactions&quot;&gt;async actions&lt;/a&gt; before they reach the reducer.</source>
          <target state="translated">Si ya est&amp;aacute; familiarizado con los conceptos b&amp;aacute;sicos y ha completado previamente este tutorial, no olvide consultar el &lt;a href=&quot;../advanced/asyncflow&quot;&gt;flujo as&amp;iacute;ncrono&lt;/a&gt; en el &lt;a href=&quot;../advanced/index&quot;&gt;tutorial avanzado&lt;/a&gt; para aprender c&amp;oacute;mo el middleware transforma las &lt;a href=&quot;../advanced/asyncactions&quot;&gt;acciones as&amp;iacute;ncronas&lt;/a&gt; antes de que lleguen al reductor.</target>
        </trans-unit>
        <trans-unit id="816a6eef450003d62c904a3bd887b32f4e650f73" translate="yes" xml:space="preserve">
          <source>If you're coming from Flux, there is a single important difference you need to understand. Redux doesn't have a Dispatcher or support many stores. &lt;strong&gt;Instead, there is just a single store with a single root &lt;a href=&quot;../glossary#reducer&quot;&gt;reducing function&lt;/a&gt;.&lt;/strong&gt; As your app grows, instead of adding stores, you split the root reducer into smaller reducers independently operating on the different parts of the state tree. You can use a helper like &lt;a href=&quot;combinereducers&quot;&gt;&lt;code&gt;combineReducers&lt;/code&gt;&lt;/a&gt; to combine them. This is similar to how there is just one root component in a React app, but it is composed out of many small components.</source>
          <target state="translated">Si viene de Flux, hay una &amp;uacute;nica diferencia importante que debe comprender. Redux no tiene un Dispatcher ni admite muchas tiendas. &lt;strong&gt;En cambio, solo hay una tienda con una &lt;a href=&quot;../glossary#reducer&quot;&gt;funci&amp;oacute;n de reducci&amp;oacute;n de&lt;/a&gt; ra&amp;iacute;z &amp;uacute;nica .&lt;/strong&gt; A medida que su aplicaci&amp;oacute;n crece, en lugar de agregar tiendas, divide el reductor ra&amp;iacute;z en reductores m&amp;aacute;s peque&amp;ntilde;os que operan de forma independiente en las diferentes partes del &amp;aacute;rbol de estado. Puede utilizar un ayudante como &lt;a href=&quot;combinereducers&quot;&gt; &lt;code&gt;combineReducers&lt;/code&gt; &lt;/a&gt; para combinarlos. Esto es similar a c&amp;oacute;mo hay un solo componente ra&amp;iacute;z en una aplicaci&amp;oacute;n React, pero est&amp;aacute; compuesto por muchos componentes peque&amp;ntilde;os.</target>
        </trans-unit>
        <trans-unit id="510cd648b3209436d6e6df8a7bf0096a63af3ca0" translate="yes" xml:space="preserve">
          <source>If you're coming from Flux, there is a single important difference you need to understand. Redux doesn't have a Dispatcher or support many stores. &lt;strong&gt;Instead, there is just a single store with a single root &lt;a href=&quot;https://redux.js.org/understanding/thinking-in-redux/glossary#reducer&quot;&gt;reducing function&lt;/a&gt;.&lt;/strong&gt; As your app grows, instead of adding stores, you split the root reducer into smaller reducers independently operating on the different parts of the state tree. You can use a helper like &lt;a href=&quot;combinereducers&quot;&gt;&lt;code&gt;combineReducers&lt;/code&gt;&lt;/a&gt; to combine them. This is similar to how there is just one root component in a React app, but it is composed out of many small components.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="428736da48a00e318f6b5e97ec36e76a4fb9754a" translate="yes" xml:space="preserve">
          <source>If you're coming from Flux, there is a single important difference you need to understand. Redux doesn't have a Dispatcher or support many stores. Instead, there is just a single store with a single root reducing function. As your app grows, instead of adding stores, you split the root reducer into smaller reducers independently operating on the different parts of the state tree. This is exactly like how there is just one root component in a React app, but it is composed out of many small components.</source>
          <target state="translated">Si vienes de Flux,hay una única diferencia importante que debes entender.Redux no tiene un despachador o apoya a muchas tiendas.En su lugar,sólo hay una tienda con una única función de reducción de raíz.A medida que tu aplicación crece,en lugar de añadir tiendas,divides el reductor de raíz en reductores más pequeños que operan independientemente en las diferentes partes del árbol de estados.Esto es exactamente como si hubiera un solo componente raíz en una aplicación de React,pero está compuesto por muchos componentes pequeños.</target>
        </trans-unit>
        <trans-unit id="f0cc9c7c3b559caffbbd11ca7ac8b9023f058297" translate="yes" xml:space="preserve">
          <source>If you're in doubt, check out the Redux source code (there isn't much going on there), as well as its ecosystem (for example, &lt;a href=&quot;https://github.com/gaearon/redux-devtools&quot;&gt;the developer tools&lt;/a&gt;). If you don't care too much about it and want to go with the reactive data flow all the way, you might want to explore something like &lt;a href=&quot;http://cycle.js.org&quot;&gt;Cycle&lt;/a&gt; instead, or even combine it with Redux. Let us know how it goes!</source>
          <target state="translated">Si tiene dudas, consulte el c&amp;oacute;digo fuente de Redux (no hay mucho que hacer all&amp;iacute;), as&amp;iacute; como su ecosistema (por ejemplo, &lt;a href=&quot;https://github.com/gaearon/redux-devtools&quot;&gt;las herramientas de desarrollo&lt;/a&gt; ). Si no le importa demasiado y desea seguir el flujo de datos reactivos hasta el final, es posible que desee explorar algo como &lt;a href=&quot;http://cycle.js.org&quot;&gt;Cycle&lt;/a&gt; , o incluso combinarlo con Redux. &amp;iexcl;Cu&amp;eacute;ntanos c&amp;oacute;mo te va!</target>
        </trans-unit>
        <trans-unit id="7a3ca8f9048bbc67b3c079811024df3868485a73" translate="yes" xml:space="preserve">
          <source>If you're just learning React, you should probably focus on thinking in React first, then look at Redux once you better understand React and how Redux might fit into your application.</source>
          <target state="translated">Si acabas de aprender React,probablemente deberías centrarte en pensar en React primero,y luego mirar Redux una vez que entiendas mejor React y cómo Redux podría encajar en tu aplicación.</target>
        </trans-unit>
        <trans-unit id="56294c132212d734163e82c754555af03986a8f4" translate="yes" xml:space="preserve">
          <source>If you're new to the NPM ecosystem and have troubles getting a project up and running, or aren't sure where to paste the gist above, check out &lt;a href=&quot;https://github.com/jackielii/simplest-redux-example&quot;&gt;simplest-redux-example&lt;/a&gt; that uses Redux together with React and Browserify.</source>
          <target state="translated">Si es nuevo en el ecosistema de NPM y tiene problemas para poner en marcha un proyecto, o no est&amp;aacute; seguro de d&amp;oacute;nde pegar la esencia anterior, consulte el &lt;a href=&quot;https://github.com/jackielii/simplest-redux-example&quot;&gt;ejemplo m&amp;aacute;s simple de redux&lt;/a&gt; que usa Redux junto con React y Browserify.</target>
        </trans-unit>
        <trans-unit id="2d0d749eb693db3084a30e822fa61e81b13144b8" translate="yes" xml:space="preserve">
          <source>If you're not, you can &lt;a href=&quot;https://unpkg.com/redux/&quot;&gt;access these files on unpkg&lt;/a&gt;, download them, or point your package manager to them.</source>
          <target state="translated">Si no es as&amp;iacute;, puede &lt;a href=&quot;https://unpkg.com/redux/&quot;&gt;acceder a estos archivos en un paquete&lt;/a&gt; , descargarlos o se&amp;ntilde;alarlos con su administrador de paquetes.</target>
        </trans-unit>
        <trans-unit id="89793009075a44d386caea025880b6492221229c" translate="yes" xml:space="preserve">
          <source>If you're somewhere deep in the component hierarchy, it is cumbersome to pass the store down manually. This is why &lt;a href=&quot;https://github.com/gaearon/react-redux&quot;&gt;react-redux&lt;/a&gt; lets you use a &lt;code&gt;connect&lt;/code&gt;&lt;a href=&quot;https://medium.com/@dan_abramov/mixins-are-dead-long-live-higher-order-components-94a0d2f9e750&quot;&gt;higher-order component&lt;/a&gt; that will, apart from subscribing you to a Redux store, inject &lt;code&gt;dispatch&lt;/code&gt; into your component's props.</source>
          <target state="translated">Si se encuentra en alg&amp;uacute;n lugar profundo de la jerarqu&amp;iacute;a de componentes, es engorroso pasar la tienda manualmente. Esta es la raz&amp;oacute;n por la que &lt;a href=&quot;https://github.com/gaearon/react-redux&quot;&gt;react-redux le&lt;/a&gt; permite usar un &lt;a href=&quot;https://medium.com/@dan_abramov/mixins-are-dead-long-live-higher-order-components-94a0d2f9e750&quot;&gt;componente de orden superior de &lt;/a&gt; &lt;code&gt;connect&lt;/code&gt; que, adem&amp;aacute;s de suscribirlo a una tienda Redux, inyectar&amp;aacute; &lt;code&gt;dispatch&lt;/code&gt; en los accesorios de su componente.</target>
        </trans-unit>
        <trans-unit id="9847b990c2956da3cc4e51d7455ae0fd5c2d3799" translate="yes" xml:space="preserve">
          <source>If you're still not convinced, read &lt;a href=&quot;../introduction/motivation&quot;&gt;Motivation&lt;/a&gt; and &lt;a href=&quot;https://medium.com/@dan_abramov/the-case-for-flux-379b7d1982c6&quot;&gt;The Case for Flux&lt;/a&gt; for a compelling argument in favor of unidirectional data flow. Although &lt;a href=&quot;../introduction/priorart&quot;&gt;Redux is not exactly Flux&lt;/a&gt;, it shares the same key benefits.</source>
          <target state="translated">Si todav&amp;iacute;a no est&amp;aacute; convencido, lea &lt;a href=&quot;../introduction/motivation&quot;&gt;Motivation&lt;/a&gt; y &lt;a href=&quot;https://medium.com/@dan_abramov/the-case-for-flux-379b7d1982c6&quot;&gt;The Case for Flux&lt;/a&gt; para obtener un argumento convincente a favor del flujo de datos unidireccional. Aunque &lt;a href=&quot;../introduction/priorart&quot;&gt;Redux no es exactamente Flux&lt;/a&gt; , comparte los mismos beneficios clave.</target>
        </trans-unit>
        <trans-unit id="5c63a9398fd378c51f8bf9e677e8aa928203398f" translate="yes" xml:space="preserve">
          <source>If you're using &lt;a href=&quot;https://github.com/gaearon/react-redux&quot;&gt;react-redux&lt;/a&gt; or similar bindings, you likely won't have direct access to the store instance in your components. For the next few paragraphs, just assume you pass the store down explicitly.</source>
          <target state="translated">Si est&amp;aacute; utilizando &lt;a href=&quot;https://github.com/gaearon/react-redux&quot;&gt;react-redux&lt;/a&gt; o enlaces similares, es probable que no tenga acceso directo a la instancia de la tienda en sus componentes. Para los siguientes p&amp;aacute;rrafos, simplemente asuma que transmite la tienda expl&amp;iacute;citamente.</target>
        </trans-unit>
        <trans-unit id="01cdd0731454ffd1d20cd96f11a3d32664207b62" translate="yes" xml:space="preserve">
          <source>If your Backbone codebase is too big for a quick rewrite or you don't want to manage interactions between store and models, use &lt;a href=&quot;https://github.com/naugtur/backbone-redux-migrator&quot;&gt;backbone-redux-migrator&lt;/a&gt; to help your two codebases coexist while keeping healthy separation. Once your rewrite finishes, Backbone code can be discarded and your Redux application can work on its own once you configure router.</source>
          <target state="translated">Si su base de c&amp;oacute;digo Backbone es demasiado grande para una reescritura r&amp;aacute;pida o si no desea administrar las interacciones entre la tienda y los modelos, use &lt;a href=&quot;https://github.com/naugtur/backbone-redux-migrator&quot;&gt;backbone-redux-migrator&lt;/a&gt; para ayudar a que sus dos bases de c&amp;oacute;digo coexistan mientras mantiene una separaci&amp;oacute;n saludable. Una vez que finalice la reescritura, el c&amp;oacute;digo Backbone se puede descartar y su aplicaci&amp;oacute;n Redux puede funcionar por s&amp;iacute; sola una vez que configure el enrutador.</target>
        </trans-unit>
        <trans-unit id="fe98ef98166939af239eed6b2d81cd88bea35531" translate="yes" xml:space="preserve">
          <source>If your head boiled from reading the above section, imagine what it was like to write it. This section is meant to be a relaxation for you and me, and will help get your gears turning.</source>
          <target state="translated">Si su cabeza hirvió al leer la sección anterior,imagínese cómo fue escribirla.Esta sección está pensada para ser una relajación para ti y para mí,y ayudará a que tus engranajes giren.</target>
        </trans-unit>
        <trans-unit id="5a439ce92e30ef4f0c974a7c73870d7c4912681d" translate="yes" xml:space="preserve">
          <source>If your state is a plain object, make sure you never mutate it! For example, instead of returning something like &lt;code&gt;Object.assign(state, newData)&lt;/code&gt; from your reducers, return &lt;code&gt;Object.assign({}, state, newData)&lt;/code&gt;. This way you don't override the previous &lt;code&gt;state&lt;/code&gt;. You can also write &lt;code&gt;return { ...state, ...newData }&lt;/code&gt; if you enable the &lt;a href=&quot;../recipes/usingobjectspreadoperator&quot;&gt;object spread operator proposal&lt;/a&gt;.</source>
          <target state="translated">Si su estado es un objeto simple, &amp;iexcl;aseg&amp;uacute;rese de nunca mutarlo! Por ejemplo, en lugar de devolver algo como &lt;code&gt;Object.assign(state, newData)&lt;/code&gt; de sus reductores, devuelva &lt;code&gt;Object.assign({}, state, newData)&lt;/code&gt; . De esta forma, no anula el &lt;code&gt;state&lt;/code&gt; anterior . Tambi&amp;eacute;n puede escribir &lt;code&gt;return { ...state, ...newData }&lt;/code&gt; si habilita la &lt;a href=&quot;../recipes/usingobjectspreadoperator&quot;&gt;propuesta de operador de propagaci&amp;oacute;n de objetos&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="688fbc13bef9bc31a421e6098beca653f2753b3d" translate="yes" xml:space="preserve">
          <source>If your state is a plain object, make sure you never mutate it! For example, instead of returning something like &lt;code&gt;Object.assign(state, newData)&lt;/code&gt; from your reducers, return &lt;code&gt;Object.assign({}, state, newData)&lt;/code&gt;. This way you don't override the previous &lt;code&gt;state&lt;/code&gt;. You can also write &lt;code&gt;return { ...state, ...newData }&lt;/code&gt; if you enable the &lt;a href=&quot;https://redux.js.org/recipes/using-object-spread-operator&quot;&gt;object spread operator proposal&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6373833358e0059931cc766a20497e267d0055c4" translate="yes" xml:space="preserve">
          <source>Imagine your app&amp;rsquo;s state is described as a plain object. For example, the state of a todo app might look like this:</source>
          <target state="translated">Imagine que el estado de su aplicaci&amp;oacute;n se describe como un objeto simple. Por ejemplo, el estado de una aplicaci&amp;oacute;n de tareas pendientes podr&amp;iacute;a verse as&amp;iacute;:</target>
        </trans-unit>
        <trans-unit id="0d512cb13653145d5f418624490cb11a59c20835" translate="yes" xml:space="preserve">
          <source>Immutability can bring increased performance to your app, and leads to simpler programming and debugging, as data that never changes is easier to reason about than data that is free to be changed arbitrarily throughout your app.</source>
          <target state="translated">La inmutabilidad puede aportar un mayor rendimiento a su aplicación,y conduce a una programación y depuración más sencillas,ya que los datos que nunca cambian son más fáciles de razonar que los datos que son libres de ser cambiados arbitrariamente en toda su aplicación.</target>
        </trans-unit>
        <trans-unit id="7748d3ba70c7e8503005d5183b42db995cf3479a" translate="yes" xml:space="preserve">
          <source>Immutability is what lets &lt;a href=&quot;https://github.com/gaearon/react-redux&quot;&gt;react-redux&lt;/a&gt; efficiently subscribe to fine-grained updates of your state. It also enables great developer experience features such as time travel with &lt;a href=&quot;http://github.com/gaearon/redux-devtools&quot;&gt;redux-devtools&lt;/a&gt;.</source>
          <target state="translated">La inmutabilidad es lo que permite a &lt;a href=&quot;https://github.com/gaearon/react-redux&quot;&gt;react-redux&lt;/a&gt; suscribirse de manera eficiente a actualizaciones detalladas de su estado. Tambi&amp;eacute;n permite funciones de gran experiencia para desarrolladores, como viajes en el tiempo con &lt;a href=&quot;http://github.com/gaearon/redux-devtools&quot;&gt;redux-devtools&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="6e5a32a1bd41d5b21404f176ae361427aff05142" translate="yes" xml:space="preserve">
          <source>Immutable</source>
          <target state="translated">Immutable</target>
        </trans-unit>
        <trans-unit id="674da9972545b8a3d30b18b2b631a253089574ce" translate="yes" xml:space="preserve">
          <source>Immutable Data Management</source>
          <target state="translated">Gestión de datos inmutables</target>
        </trans-unit>
        <trans-unit id="f194c27186d4d976f210a867f1b7493fc5734e87" translate="yes" xml:space="preserve">
          <source>Immutable Data Structures and JavaScript</source>
          <target state="translated">Estructuras de datos inmutables y JavaScript</target>
        </trans-unit>
        <trans-unit id="3f337e1757211d31f0134ce96582c18a500ad82d" translate="yes" xml:space="preserve">
          <source>Immutable Data from Scratch</source>
          <target state="translated">Datos inamovibles de Scratch</target>
        </trans-unit>
        <trans-unit id="e69f6aa84f66db9f8ef96ac695cc3f24fae1dc21" translate="yes" xml:space="preserve">
          <source>Immutable Data using ES6 and Beyond</source>
          <target state="translated">Datos inmutables usando ES6 y más allá</target>
        </trans-unit>
        <trans-unit id="cda456672d3ee4fa81f3ddcd2803e3ee0a8d4c04" translate="yes" xml:space="preserve">
          <source>Immutable Javascript using ES6 and beyond</source>
          <target state="translated">Javascript inmutable usando ES6 y más allá</target>
        </trans-unit>
        <trans-unit id="973175b7f3b4ff6e4efbc6ead54d53aad1a95619" translate="yes" xml:space="preserve">
          <source>Immutable Object Formatter</source>
          <target state="translated">Formato de Objeto Inmutable</target>
        </trans-unit>
        <trans-unit id="d8acc5408d603ab59b3c9faed6a7e6bc40e90b10" translate="yes" xml:space="preserve">
          <source>Immutable Update Patterns</source>
          <target state="translated">Patrones de actualización inmutables</target>
        </trans-unit>
        <trans-unit id="7453da6cbc7da4258fe3287ac0a6c8690fe9793c" translate="yes" xml:space="preserve">
          <source>Immutable Update Patterns for ES6</source>
          <target state="translated">Patrones de actualización inmutables para el ES6</target>
        </trans-unit>
        <trans-unit id="33ff07243fabffc0f9f1077cf8800e362ccb5eaa" translate="yes" xml:space="preserve">
          <source>Immutable Update Utility Libraries</source>
          <target state="translated">Bibliotecas de Utilidad de Actualización Inmutable</target>
        </trans-unit>
        <trans-unit id="5bd90f13857bde1d7e445ee9ceeba04700668e97" translate="yes" xml:space="preserve">
          <source>Immutable and most similar libraries are orthogonal to Redux. Feel free to use them together!</source>
          <target state="translated">Las bibliotecas Inmutables y la mayoría de las similares son ortogonales al Redux.¡Siéntete libre de usarlas juntas!</target>
        </trans-unit>
        <trans-unit id="ea78c55982bab7f948fd4ba6bc2bd11c80ae37ff" translate="yes" xml:space="preserve">
          <source>Immutable data management ultimately makes data handling safer.</source>
          <target state="translated">La gestión de datos inmutables hace que,en última instancia,el manejo de los datos sea más seguro.</target>
        </trans-unit>
        <trans-unit id="12e9a327a00ad002de1d25ee12aec93959806cd7" translate="yes" xml:space="preserve">
          <source>Immutable-focused libraries such as Immutable.JS have been designed to overcome the issues with immutability inherent within JavaScript, providing all the benefits of immutability with the performance your app requires.</source>
          <target state="translated">Las bibliotecas centradas en Immutable,como Immutable.JS,han sido diseñadas para superar los problemas de inmutabilidad inherentes a JavaScript,proporcionando todos los beneficios de la inmutabilidad con el rendimiento que requiere su aplicación.</target>
        </trans-unit>
        <trans-unit id="4e6fbec38c5ba31d45e4cbd8958dc74112ebd4b2" translate="yes" xml:space="preserve">
          <source>Immutable.JS avoids this by &lt;a href=&quot;https://medium.com/@dtinth/immutable-js-persistent-data-structures-and-structural-sharing-6d163fbd73d2#.z1g1ofrsi&quot;&gt;cleverly sharing data structures&lt;/a&gt; under the surface, minimizing the need to copy data. It also enables complex chains of operations to be carried out without creating unnecessary (and costly) cloned intermediate data that will quickly be thrown away.</source>
          <target state="translated">Immutable.JS evita esto &lt;a href=&quot;https://medium.com/@dtinth/immutable-js-persistent-data-structures-and-structural-sharing-6d163fbd73d2#.z1g1ofrsi&quot;&gt;compartiendo inteligentemente las estructuras de datos&lt;/a&gt; debajo de la superficie, minimizando la necesidad de copiar datos. Tambi&amp;eacute;n permite que se lleven a cabo complejas cadenas de operaciones sin crear datos intermedios clonados innecesarios (y costosos) que se desechar&amp;aacute;n r&amp;aacute;pidamente.</target>
        </trans-unit>
        <trans-unit id="c4bca118ae44915dde169b1e2c52c2a3216d820a" translate="yes" xml:space="preserve">
          <source>Immutable.JS can provide significant reliability and performance improvements to your app, but it must be used correctly. If you choose to use Immutable.JS (and remember, you are not required to, and there are other immutable libraries you can use), follow these opinionated best practices, and you&amp;rsquo;ll be able to get the most out of it, without tripping up on any of the issues it can potentially cause.</source>
          <target state="translated">Immutable.JS puede proporcionar mejoras significativas de confiabilidad y rendimiento a su aplicaci&amp;oacute;n, pero debe usarse correctamente. Si elige usar Immutable.JS (y recuerde, no est&amp;aacute; obligado a hacerlo, y hay otras bibliotecas inmutables que puede usar), siga estas pr&amp;aacute;cticas recomendadas obstinadas y podr&amp;aacute; aprovecharlo al m&amp;aacute;ximo, sin tropezar con cualquiera de los problemas que potencialmente puede causar.</target>
        </trans-unit>
        <trans-unit id="20c874460a6804e3b2c27f9b25a6746d6bfb6f9b" translate="yes" xml:space="preserve">
          <source>Immutable.JS does a lot work behind the scenes to optimize performance. This is the key to its power, as using immutable data structures can involve a lot of expensive copying. In particular, immutably manipulating large, complex data sets, such as a nested Redux state tree, can generate many intermediate copies of objects, which consume memory and slow down performance as the browser&amp;rsquo;s garbage collector fights to clean things up.</source>
          <target state="translated">Immutable.JS hace mucho trabajo detr&amp;aacute;s de escena para optimizar el rendimiento. Esta es la clave de su poder, ya que el uso de estructuras de datos inmutables puede implicar un copiado caro. En particular, la manipulaci&amp;oacute;n inmutable de conjuntos de datos grandes y complejos, como un &amp;aacute;rbol de estado de Redux anidado, puede generar muchas copias intermedias de objetos, que consumen memoria y ralentizan el rendimiento mientras el recolector de basura del navegador lucha por limpiar las cosas.</target>
        </trans-unit>
        <trans-unit id="6cc90700452643c9a9c0e8f4b109806ca1907669" translate="yes" xml:space="preserve">
          <source>Immutable.JS objects, such as &lt;code&gt;Map&lt;/code&gt;, &lt;code&gt;List&lt;/code&gt;, etc., can be difficult to debug, as inspecting such an object will reveal an entire nested hierarchy of Immutable.JS-specific properties that you don&amp;rsquo;t care about, while your actual data that you do care about is encapsulated several layers deep.</source>
          <target state="translated">Los objetos Immutable.JS, como &lt;code&gt;Map&lt;/code&gt; , &lt;code&gt;List&lt;/code&gt; , etc., pueden ser dif&amp;iacute;ciles de depurar, ya que la inspecci&amp;oacute;n de un objeto de este tipo revelar&amp;aacute; una jerarqu&amp;iacute;a anidada completa de propiedades espec&amp;iacute;ficas de Immutable.JS que no le interesan, mientras que sus datos reales lo que te importa est&amp;aacute; encapsulado a varias capas de profundidad.</target>
        </trans-unit>
        <trans-unit id="b728994e17e8c21ef4849874d50ee39e9635a6f5" translate="yes" xml:space="preserve">
          <source>Immutable.JS provides a rich set of immutable objects to encapsulate your data (e.g. Maps, Lists, Sets, Records, etc.), and an extensive set of methods to manipulate it, including methods to sort, filter, and group the data, reverse it, flatten it, and create subsets.</source>
          <target state="translated">Immutable.JS proporciona un rico conjunto de objetos inmutables para encapsular sus datos (por ejemplo,Mapas,Listas,Conjuntos,Registros,etc.),y un extenso conjunto de métodos para manipularlos,incluyendo métodos para clasificar,filtrar y agrupar los datos,invertirlos,aplanarlos y crear subconjuntos.</target>
        </trans-unit>
        <trans-unit id="8d99c53713fdd9ecf08a9eeb1a70e8a2964a5cf1" translate="yes" xml:space="preserve">
          <source>Immutable.JS was designed to provide immutability in a performant manner in an effort to overcome the limitations of immutability with JavaScript. Its principle advantages include:</source>
          <target state="translated">Immutable.JS fue diseñado para proporcionar inmutabilidad de manera performante en un esfuerzo por superar las limitaciones de la inmutabilidad con JavaScript.Sus principales ventajas incluyen:</target>
        </trans-unit>
        <trans-unit id="9b492caa1430f9e67bef5127ef78bb8219dbd86c" translate="yes" xml:space="preserve">
          <source>Immutable.JS works best for collections of data, and the larger the better. It can be slow when your data comprises lots of small, simple JavaScript objects, with each comprising a few keys of primitive values.</source>
          <target state="translated">Immutable.JS funciona mejor para las colecciones de datos,y cuanto más grande mejor.Puede ser lento cuando sus datos comprenden muchos objetos JavaScript pequeños y sencillos,con cada uno de ellos compuesto por unas pocas claves de valores primitivos.</target>
        </trans-unit>
        <trans-unit id="1fed6b895cf747a93a21ea8add3ba23effdc034a" translate="yes" xml:space="preserve">
          <source>Immutable.js - Immutable Collections for JavaScript</source>
          <target state="translated">Immutable.js-Immutable Collections for JavaScript</target>
        </trans-unit>
        <trans-unit id="50598f7dc9386f9779647be8fdfdf65fd92fe212" translate="yes" xml:space="preserve">
          <source>Immutable.js, persistent data structures and structural sharing</source>
          <target state="translated">Immutable.js,estructuras de datos persistentes e intercambio estructural</target>
        </trans-unit>
        <trans-unit id="fd7e1350aad385c556192ea311d3f9f4440b4840" translate="yes" xml:space="preserve">
          <source>ImmutableJS: worth the price?</source>
          <target state="translated">ImmutableJS:¿Vale la pena el precio?</target>
        </trans-unit>
        <trans-unit id="879b24a430b9ab1f4e8c76b4dfa0887fc3c04d07" translate="yes" xml:space="preserve">
          <source>Immutably updating objects and arrays safely</source>
          <target state="translated">Actualizando inmediatamente los objetos y las matrices de forma segura</target>
        </trans-unit>
        <trans-unit id="f37f816825de6623c275fae3ddf78ea2ec8ca471" translate="yes" xml:space="preserve">
          <source>Immutably updating state generally means making shallow copies, not deep copies. Shallow copies are much faster than deep copies, because fewer objects and fields have to be copied, and it effectively comes down to moving some pointers around.</source>
          <target state="translated">El estado de actualización inmediata generalmente significa hacer copias superficiales,no profundas.Las copias superficiales son mucho más rápidas que las profundas,porque hay que copiar menos objetos y campos,y efectivamente se trata de mover algunos punteros.</target>
        </trans-unit>
        <trans-unit id="0a6446305b39453eb5282988df8de2320a57875d" translate="yes" xml:space="preserve">
          <source>Implementing Components</source>
          <target state="translated">Componentes de implementación</target>
        </trans-unit>
        <trans-unit id="56aeb896976173293390de95c9507133f3d2e7e4" translate="yes" xml:space="preserve">
          <source>Implementing Container Components</source>
          <target state="translated">Implementación de los componentes de los contenedores</target>
        </trans-unit>
        <trans-unit id="43492db8e2cb0ccb4f69d638a38af639d790168e" translate="yes" xml:space="preserve">
          <source>Implementing Other Components</source>
          <target state="translated">Aplicación de otros componentes</target>
        </trans-unit>
        <trans-unit id="a1c1c997da2a03119d1777770189d8c530547e28" translate="yes" xml:space="preserve">
          <source>Implementing Presentational Components</source>
          <target state="translated">Implementación de los componentes de la presentación</target>
        </trans-unit>
        <trans-unit id="3c7e5554c6cc65b0860b475288581cda33e0f76b" translate="yes" xml:space="preserve">
          <source>Implementing Undo History</source>
          <target state="translated">Implementación de la historia del Deshacer</target>
        </trans-unit>
        <trans-unit id="90ab5ed3bb3e27748d586ad9b9b11e2ab9efaaf8" translate="yes" xml:space="preserve">
          <source>Importing</source>
          <target state="translated">Importing</target>
        </trans-unit>
        <trans-unit id="461dfd2a69948b84d92969ac1b9fc39ee72ff9b8" translate="yes" xml:space="preserve">
          <source>Improving React and Redux Perf with Reselect</source>
          <target state="translated">Mejorando React y Redux Perf con Reselect</target>
        </trans-unit>
        <trans-unit id="1e6ff2f3e12ce6aab10b9bec9cab6d60b64497ea" translate="yes" xml:space="preserve">
          <source>Improving React and Redux Performance with Reselect</source>
          <target state="translated">Mejorando el rendimiento de React y Redux con Reselect</target>
        </trans-unit>
        <trans-unit id="831e8524a43e2feb49c2742ea27fbb2612cd63b9" translate="yes" xml:space="preserve">
          <source>In &lt;a href=&quot;http://facebook.github.io/flux&quot;&gt;traditional Flux&lt;/a&gt;, action creators often trigger a dispatch when invoked, like so:</source>
          <target state="translated">En &lt;a href=&quot;http://facebook.github.io/flux&quot;&gt;Flux tradicional&lt;/a&gt; , los creadores de acciones a menudo activan un env&amp;iacute;o cuando se invocan, as&amp;iacute;:</target>
        </trans-unit>
        <trans-unit id="40dceb766db3717cd4f328d563428fe98260c2e5" translate="yes" xml:space="preserve">
          <source>In Depth</source>
          <target state="translated">En profundidad</target>
        </trans-unit>
        <trans-unit id="75d1fa6c5616fe360b5c666020ecae8fe2e73764" translate="yes" xml:space="preserve">
          <source>In Flux, it is traditionally thought that you would define every action type as a string constant:</source>
          <target state="translated">En Flux,tradicionalmente se piensa que se definiría cada tipo de acción como una constante de cadena:</target>
        </trans-unit>
        <trans-unit id="c614b1de37c0649d85e4de6785709030fe57b0ee" translate="yes" xml:space="preserve">
          <source>In Redux action creators simply return an action:</source>
          <target state="translated">En el Redux los creadores de acción simplemente devuelven una acción:</target>
        </trans-unit>
        <trans-unit id="13d908827ee0f85cbdbc48b6e6b0f4b0ba7e1ede" translate="yes" xml:space="preserve">
          <source>In Redux this is &lt;em&gt;not&lt;/em&gt; the case.</source>
          <target state="translated">En Redux este &lt;em&gt;no&lt;/em&gt; es el caso.</target>
        </trans-unit>
        <trans-unit id="fb7413db62de4f3ba71879e02b2f0337a6068408" translate="yes" xml:space="preserve">
          <source>In Redux, action creators are functions which return plain objects. When testing action creators we want to test whether the correct action creator was called and also whether the right action was returned.</source>
          <target state="translated">En Redux,los creadores de acción son funciones que devuelven objetos simples.Al probar los creadores de acción queremos comprobar si se ha llamado al creador de acción correcto y también si se ha devuelto la acción correcta.</target>
        </trans-unit>
        <trans-unit id="f0927ace523de150037e069de9e99b9a0427c743" translate="yes" xml:space="preserve">
          <source>In Redux, all the application state is stored as a single object. It's a good idea to think of its shape before writing any code. What's the minimal representation of your app's state as an object?</source>
          <target state="translated">En Redux,todo el estado de la aplicación se almacena como un solo objeto.Es una buena idea pensar en su forma antes de escribir cualquier código.¿Cuál es la representación mínima del estado de tu aplicación como objeto?</target>
        </trans-unit>
        <trans-unit id="b8579ec417a0f350980bbd379e3d451d4be5f432" translate="yes" xml:space="preserve">
          <source>In Redux, subscriptions are called after the root reducer has returned the new state, so you &lt;em&gt;may&lt;/em&gt; dispatch in the subscription listeners. You are only disallowed to dispatch inside the reducers because they must have no side effects. If you want to cause a side effect in response to an action, the right place to do this is in the potentially async &lt;a href=&quot;../glossary#action-creator&quot;&gt;action creator&lt;/a&gt;.</source>
          <target state="translated">En Redux, las suscripciones se llaman despu&amp;eacute;s de que el reductor ra&amp;iacute;z haya devuelto el nuevo estado, por lo que &lt;em&gt;puede&lt;/em&gt; enviar los oyentes de suscripci&amp;oacute;n. Solo est&amp;aacute; prohibido enviar dentro de los reductores porque no deben tener efectos secundarios. Si desea provocar un efecto secundario en respuesta a una acci&amp;oacute;n, el lugar correcto para hacerlo es en el &lt;a href=&quot;../glossary#action-creator&quot;&gt;creador de acciones&lt;/a&gt; potencialmente asincr&amp;oacute;nicas .</target>
        </trans-unit>
        <trans-unit id="a0cc844e08bd793ebc438e9a0ef0cbb9b969881a" translate="yes" xml:space="preserve">
          <source>In Redux, subscriptions are called after the root reducer has returned the new state, so you &lt;em&gt;may&lt;/em&gt; dispatch in the subscription listeners. You are only disallowed to dispatch inside the reducers because they must have no side effects. If you want to cause a side effect in response to an action, the right place to do this is in the potentially async &lt;a href=&quot;https://redux.js.org/understanding/thinking-in-redux/glossary#action-creator&quot;&gt;action creator&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="025a5c8609578dcf3fbad95a8468e74d10860635" translate="yes" xml:space="preserve">
          <source>In Redux, the accumulated value is the state object, and the values being accumulated are actions. Reducers calculate a new state given the previous state and an action. They must be &lt;em&gt;pure functions&lt;/em&gt;&amp;mdash;functions that return the exact same output for given inputs. They should also be free of side-effects. This is what enables exciting features like hot reloading and time travel.</source>
          <target state="translated">En Redux, el valor acumulado es el objeto de estado y los valores que se acumulan son acciones. Los reductores calculan un nuevo estado dado el estado anterior y una acci&amp;oacute;n. Deben ser &lt;em&gt;funciones puras, funciones&lt;/em&gt; que devuelvan exactamente la misma salida para entradas dadas. Tambi&amp;eacute;n deber&amp;iacute;an estar libres de efectos secundarios. Esto es lo que permite funciones interesantes como la recarga en caliente y el viaje en el tiempo.</target>
        </trans-unit>
        <trans-unit id="d9e26ebe19ef325c1ead334671d67cb972dd9b0b" translate="yes" xml:space="preserve">
          <source>In a React app, usually you would wrap &lt;code&gt;&amp;lt;Route /&amp;gt;&lt;/code&gt; in &lt;code&gt;&amp;lt;Router /&amp;gt;&lt;/code&gt; so that when the URL changes, &lt;code&gt;&amp;lt;Router /&amp;gt;&lt;/code&gt; will match a branch of its routes, and render their configured components. &lt;code&gt;&amp;lt;Route /&amp;gt;&lt;/code&gt; is used to declaratively map routes to your application's component hierarchy. You would declare in &lt;code&gt;path&lt;/code&gt; the path used in the URL and in &lt;code&gt;component&lt;/code&gt; the single component to be rendered when the route matches the URL.</source>
          <target state="translated">En una aplicaci&amp;oacute;n React, normalmente envolver&amp;iacute;as &lt;code&gt;&amp;lt;Route /&amp;gt;&lt;/code&gt; en &lt;code&gt;&amp;lt;Router /&amp;gt;&lt;/code&gt; para que cuando la URL cambie, &lt;code&gt;&amp;lt;Router /&amp;gt;&lt;/code&gt; coincidir&amp;aacute; con una rama de sus rutas y renderizar&amp;aacute; sus componentes configurados. &lt;code&gt;&amp;lt;Route /&amp;gt;&lt;/code&gt; se utiliza para mapear de forma declarativa rutas a la jerarqu&amp;iacute;a de componentes de su aplicaci&amp;oacute;n. Deber&amp;iacute;a declarar en la &lt;code&gt;path&lt;/code&gt; la ruta utilizada en la URL y en el &lt;code&gt;component&lt;/code&gt; e el componente &amp;uacute;nico que se representar&amp;aacute; cuando la ruta coincida con la URL.</target>
        </trans-unit>
        <trans-unit id="552d20c35b7a19e38fbb041cf812c68e0d31ccf1" translate="yes" xml:space="preserve">
          <source>In a more complex app, you're going to want different entities to reference each other. We suggest that you keep your state as normalized as possible, without any nesting. Keep every entity in an object stored with an ID as a key, and use IDs to reference it from other entities, or lists. Think of the app's state as a database. This approach is described in &lt;a href=&quot;https://github.com/paularmstrong/normalizr&quot;&gt;normalizr's&lt;/a&gt; documentation in detail. For example, keeping &lt;code&gt;todosById: { id -&amp;gt; todo }&lt;/code&gt; and &lt;code&gt;todos: array&amp;lt;id&amp;gt;&lt;/code&gt; inside the state would be a better idea in a real app, but we're keeping the example simple.</source>
          <target state="translated">En una aplicaci&amp;oacute;n m&amp;aacute;s compleja, querr&amp;aacute; que diferentes entidades se hagan referencia entre s&amp;iacute;. Le sugerimos que mantenga su estado lo m&amp;aacute;s normalizado posible, sin ning&amp;uacute;n anidamiento. Mantenga todas las entidades de un objeto almacenadas con un ID como clave y utilice ID para hacer referencia a ellas desde otras entidades o listas. Piense en el estado de la aplicaci&amp;oacute;n como una base de datos. Este enfoque se describe en detalle en &lt;a href=&quot;https://github.com/paularmstrong/normalizr&quot;&gt;la&lt;/a&gt; documentaci&amp;oacute;n de normalizr . Por ejemplo, mantener &lt;code&gt;todosById: { id -&amp;gt; todo }&lt;/code&gt; y &lt;code&gt;todos: array&amp;lt;id&amp;gt;&lt;/code&gt; dentro del estado ser&amp;iacute;a una mejor idea en una aplicaci&amp;oacute;n real, pero mantenemos el ejemplo simple.</target>
        </trans-unit>
        <trans-unit id="0f7529398006305ace4f3aedcbda960fbff2edf9" translate="yes" xml:space="preserve">
          <source>In a real app, you'd also want to dispatch an action on request failure. We won't implement error handling in this tutorial, but the &lt;a href=&quot;../introduction/examples#real-world&quot;&gt;real world example&lt;/a&gt; shows one of the possible approaches.</source>
          <target state="translated">En una aplicaci&amp;oacute;n real, tambi&amp;eacute;n querr&amp;aacute; enviar una acci&amp;oacute;n si falla la solicitud. No implementaremos el manejo de errores en este tutorial, pero el &lt;a href=&quot;../introduction/examples#real-world&quot;&gt;ejemplo del mundo real&lt;/a&gt; muestra uno de los posibles enfoques.</target>
        </trans-unit>
        <trans-unit id="dc5515a15d4d57aff8873c1659dd4ea00cfc4cf6" translate="yes" xml:space="preserve">
          <source>In a unit test, you would normally import the &lt;code&gt;App&lt;/code&gt; component like this:</source>
          <target state="translated">En una prueba unitaria, normalmente importar&amp;iacute;a el componente de la &lt;code&gt;App&lt;/code&gt; como este:</target>
        </trans-unit>
        <trans-unit id="73d7d394023da3e8367ec8a78e584be34cff3bc0" translate="yes" xml:space="preserve">
          <source>In addition to reading the state, container components can dispatch actions. In a similar fashion, you can define a function called &lt;code&gt;mapDispatchToProps()&lt;/code&gt; that receives the &lt;a href=&quot;../api/store#dispatch&quot;&gt;&lt;code&gt;dispatch()&lt;/code&gt;&lt;/a&gt; method and returns callback props that you want to inject into the presentational component. For example, we want the &lt;code&gt;VisibleTodoList&lt;/code&gt; to inject a prop called &lt;code&gt;onTodoClick&lt;/code&gt; into the &lt;code&gt;TodoList&lt;/code&gt; component, and we want &lt;code&gt;onTodoClick&lt;/code&gt; to dispatch a &lt;code&gt;TOGGLE_TODO&lt;/code&gt; action:</source>
          <target state="translated">Adem&amp;aacute;s de leer el estado, los componentes del contenedor pueden enviar acciones. De manera similar, puede definir una funci&amp;oacute;n llamada &lt;code&gt;mapDispatchToProps()&lt;/code&gt; que recibe el m&amp;eacute;todo &lt;a href=&quot;../api/store#dispatch&quot;&gt; &lt;code&gt;dispatch()&lt;/code&gt; &lt;/a&gt; y devuelve los accesorios de devoluci&amp;oacute;n de llamada que desea inyectar en el componente de presentaci&amp;oacute;n. Por ejemplo, queremos que &lt;code&gt;VisibleTodoList&lt;/code&gt; inyecte un accesorio llamado &lt;code&gt;onTodoClick&lt;/code&gt; en el componente &lt;code&gt;TodoList&lt;/code&gt; , y queremos que &lt;code&gt;onTodoClick&lt;/code&gt; &lt;code&gt;TOGGLE_TODO&lt;/code&gt; una acci&amp;oacute;n TOGGLE_TODO :</target>
        </trans-unit>
        <trans-unit id="43300067fd4f93325fe0edeb1855206b18b46712" translate="yes" xml:space="preserve">
          <source>In contrast, immutable libraries such as Immutable.JS can employ sophisticated optimization techniques such as &lt;a href=&quot;http://www.slideshare.net/mohitthatte/a-deep-dive-into-clojures-data-structures-euroclojure-2015&quot;&gt;structural sharing&lt;/a&gt; , which effectively returns a new object that reuses much of the existing object being copied from.</source>
          <target state="translated">Por el contrario, las bibliotecas inmutables como Immutable.JS pueden emplear t&amp;eacute;cnicas de optimizaci&amp;oacute;n sofisticadas como el &lt;a href=&quot;http://www.slideshare.net/mohitthatte/a-deep-dive-into-clojures-data-structures-euroclojure-2015&quot;&gt;uso compartido estructural&lt;/a&gt; , que devuelve efectivamente un nuevo objeto que reutiliza gran parte del objeto existente del que se est&amp;aacute; copiando.</target>
        </trans-unit>
        <trans-unit id="29ff2a8b0f9d11d36b350ca4a91fa734773c9d7a" translate="yes" xml:space="preserve">
          <source>In fact, benchmarks have shown that more connected components generally leads to better performance than fewer connected components.</source>
          <target state="translated">De hecho,los puntos de referencia han demostrado que un mayor número de componentes conectados suele dar lugar a un mejor rendimiento que un menor número de componentes conectados.</target>
        </trans-unit>
        <trans-unit id="99060159575d5e17d9887f3b127903e3ce8600c6" translate="yes" xml:space="preserve">
          <source>In general, Redux suggests that code with side effects should be part of the action creation process. While that logic &lt;em&gt;can&lt;/em&gt; be performed inside of a UI component, it generally makes sense to extract that logic into a reusable function so that the same logic can be called from multiple places&amp;mdash;in other words, an action creator function.</source>
          <target state="translated">En general, Redux sugiere que el c&amp;oacute;digo con efectos secundarios deber&amp;iacute;a ser parte del proceso de creaci&amp;oacute;n de la acci&amp;oacute;n. Si bien esa l&amp;oacute;gica &lt;em&gt;se&lt;/em&gt; puede realizar dentro de un componente de la interfaz de usuario, generalmente tiene sentido extraer esa l&amp;oacute;gica en una funci&amp;oacute;n reutilizable para que la misma l&amp;oacute;gica se pueda llamar desde m&amp;uacute;ltiples lugares; en otras palabras, una funci&amp;oacute;n creadora de acciones.</target>
        </trans-unit>
        <trans-unit id="3e2c413ba873419804cdd854ba00b2ace6bb914c" translate="yes" xml:space="preserve">
          <source>In general, ask if these actions are related but independent, or should actually be represented as one action. Do what makes sense for your own situation but try to balance the readability of reducers with readability of the action log. For example, an action that includes the whole new state tree would make your reducer a one-liner, but the downside is now you have no history of &lt;em&gt;why&lt;/em&gt; the changes are happening, so debugging gets really difficult. On the other hand, if you emit actions in a loop to keep them granular, it's a sign that you might want to introduce a new action type that is handled in a different way.</source>
          <target state="translated">En general, pregunte si estas acciones est&amp;aacute;n relacionadas pero son independientes o si en realidad deber&amp;iacute;an representarse como una sola acci&amp;oacute;n. Haga lo que tenga sentido para su propia situaci&amp;oacute;n, pero intente equilibrar la legibilidad de los reductores con la legibilidad del registro de acciones. Por ejemplo, una acci&amp;oacute;n que incluye todo el nuevo &amp;aacute;rbol de estado convertir&amp;iacute;a su reductor en una sola l&amp;iacute;nea, pero la desventaja es que ahora no tiene un historial de &lt;em&gt;por qu&amp;eacute;&lt;/em&gt; est&amp;aacute;n ocurriendo los cambios, por lo que la depuraci&amp;oacute;n se vuelve realmente dif&amp;iacute;cil. Por otro lado, si emite acciones en un bucle para mantenerlas granulares, es una se&amp;ntilde;al de que es posible que desee introducir un nuevo tipo de acci&amp;oacute;n que se maneje de una manera diferente.</target>
        </trans-unit>
        <trans-unit id="9d9ba084eaa1fa2c8e34fad4286a77182f2d2144" translate="yes" xml:space="preserve">
          <source>In general, it looks like this:</source>
          <target state="translated">En general,se parece a esto:</target>
        </trans-unit>
        <trans-unit id="8f22c2593249db901262ae0d0b5a9dc7e8b78af5" translate="yes" xml:space="preserve">
          <source>In general, remember that reducers are just functions&amp;mdash;you can organize them and subdivide them any way you want, and you are encouraged to break them down into smaller, reusable functions (&amp;ldquo;reducer composition&amp;rdquo;). While you do so, you may pass a custom third argument from a parent reducer if a child reducer needs additional data to calculate its next state. You just need to make sure that together they follow the basic rules of reducers: &lt;code&gt;(state, action) =&amp;gt; newState&lt;/code&gt;, and update state immutably rather than mutating it directly.</source>
          <target state="translated">En general, recuerde que los reductores son solo funciones; puede organizarlos y subdividirlos de la forma que desee, y se le anima a dividirlos en funciones m&amp;aacute;s peque&amp;ntilde;as y reutilizables (&quot;composici&amp;oacute;n del reductor&quot;). Mientras lo hace, puede pasar un tercer argumento personalizado de un reductor principal si un reductor secundario necesita datos adicionales para calcular su siguiente estado. Solo necesita asegurarse de que juntos sigan las reglas b&amp;aacute;sicas de los reductores: &lt;code&gt;(state, action) =&amp;gt; newState&lt;/code&gt; , y actualizar el estado de forma inmutable en lugar de mutarlo directamente.</target>
        </trans-unit>
        <trans-unit id="d63121f6c921270caadcee04ea945bd0333108c2" translate="yes" xml:space="preserve">
          <source>In general, try to find a balance between understandable data flow and areas of responsibility with your components.</source>
          <target state="translated">En general,trate de encontrar un equilibrio entre el flujo de datos comprensible y las áreas de responsabilidad con sus componentes.</target>
        </trans-unit>
        <trans-unit id="51c2fa7138486d88b5fa18d2475648afe59d02ed" translate="yes" xml:space="preserve">
          <source>In general, use Redux when you have reasonable amounts of data changing over time, you need a single source of truth, and you find that approaches like keeping everything in a top-level React component's state are no longer sufficient.</source>
          <target state="translated">En general,usa Redux cuando tengas cantidades razonables de datos que cambien con el tiempo,necesites una única fuente de verdad,y descubras que enfoques como mantener todo en el estado de un componente de Reactancia de alto nivel ya no son suficientes.</target>
        </trans-unit>
        <trans-unit id="55c79e3652fe883445e9b3cd96eb5f575b10fb17" translate="yes" xml:space="preserve">
          <source>In order to be able to test the App component itself without having to deal with the decorator, we recommend you to also export the undecorated component:</source>
          <target state="translated">Para poder probar el componente de la aplicación en sí sin tener que tratar con el decorador,le recomendamos que también exporte el componente sin decorar:</target>
        </trans-unit>
        <trans-unit id="6c1a7092fe1aea25b944efebbf5658054ed3643a" translate="yes" xml:space="preserve">
          <source>In order to share a selector across multiple &lt;code&gt;VisibleTodoList&lt;/code&gt; components &lt;strong&gt;and&lt;/strong&gt; retain memoization, each instance of the component needs its own private copy of the selector.</source>
          <target state="translated">Para compartir un selector en varios componentes &lt;code&gt;VisibleTodoList&lt;/code&gt; &lt;strong&gt;y&lt;/strong&gt; conservar la memorizaci&amp;oacute;n, cada instancia del componente necesita su propia copia privada del selector.</target>
        </trans-unit>
        <trans-unit id="ff57866679ccf8351cc1283dd5651be401dbe088" translate="yes" xml:space="preserve">
          <source>In our example, we take a rudimentary approach to security. When we obtain the parameters from the request, we use &lt;code&gt;parseInt&lt;/code&gt; on the &lt;code&gt;counter&lt;/code&gt; parameter to ensure this value is a number. If we did not do this, you could easily get dangerous data into the rendered HTML by providing a script tag in the request. That might look like this: &lt;code&gt;?counter=&amp;lt;/script&amp;gt;&amp;lt;script&amp;gt;doSomethingBad();&amp;lt;/script&amp;gt;&lt;/code&gt;</source>
          <target state="translated">En nuestro ejemplo, adoptamos un enfoque rudimentario de la seguridad. Cuando obtenemos los par&amp;aacute;metros de la solicitud, usamos &lt;code&gt;parseInt&lt;/code&gt; en el par&amp;aacute;metro del &lt;code&gt;counter&lt;/code&gt; para asegurarnos de que este valor sea un n&amp;uacute;mero. Si no hicimos esto, podr&amp;iacute;a obtener f&amp;aacute;cilmente datos peligrosos en el HTML renderizado proporcionando una etiqueta de secuencia de comandos en la solicitud. Eso podr&amp;iacute;a verse as&amp;iacute; &lt;code&gt;?counter=&amp;lt;/script&amp;gt;&amp;lt;script&amp;gt;doSomethingBad();&amp;lt;/script&amp;gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="a45d519ec7092557332a21b4f95c7890f59d8c28" translate="yes" xml:space="preserve">
          <source>In particular, immutability in the context of a Web app enables sophisticated change detection techniques to be implemented simply and cheaply, ensuring the computationally expensive process of updating the DOM occurs only when it absolutely has to (a cornerstone of React&amp;rsquo;s performance improvements over other libraries).</source>
          <target state="translated">En particular, la inmutabilidad en el contexto de una aplicaci&amp;oacute;n web permite implementar t&amp;eacute;cnicas sofisticadas de detecci&amp;oacute;n de cambios de manera simple y econ&amp;oacute;mica, lo que garantiza que el proceso computacionalmente costoso de actualizar el DOM se produzca solo cuando sea absolutamente necesario (una piedra angular de las mejoras de rendimiento de React sobre otras bibliotecas) .</target>
        </trans-unit>
        <trans-unit id="3ea8b1a13105717d19bf6d13ca29baf9d351fc73" translate="yes" xml:space="preserve">
          <source>In some cases, you will need to modify the &lt;code&gt;create&lt;/code&gt; function to use different mock implementations of &lt;code&gt;getState&lt;/code&gt; and &lt;code&gt;next&lt;/code&gt;.</source>
          <target state="translated">En algunos casos, deber&amp;aacute; modificar la funci&amp;oacute;n de &lt;code&gt;create&lt;/code&gt; para utilizar diferentes implementaciones simuladas de &lt;code&gt;getState&lt;/code&gt; y &lt;code&gt;next&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="9a560778ff92a1d751e213c0779836fe6174dc6b" translate="yes" xml:space="preserve">
          <source>In the &lt;a href=&quot;../basics/index&quot;&gt;basics guide&lt;/a&gt;, we built a simple todo application. It was fully synchronous. Every time an action was dispatched, the state was updated immediately.</source>
          <target state="translated">En la &lt;a href=&quot;../basics/index&quot;&gt;gu&amp;iacute;a b&amp;aacute;sica&lt;/a&gt; , creamos una aplicaci&amp;oacute;n de tareas sencilla. Fue completamente sincr&amp;oacute;nico. Cada vez que se enviaba una acci&amp;oacute;n, el estado se actualizaba de inmediato.</target>
        </trans-unit>
        <trans-unit id="9d35265d513681e328e0eff05e802f8cb476ce9d" translate="yes" xml:space="preserve">
          <source>In the &lt;a href=&quot;../basics/index&quot;&gt;basics walkthrough&lt;/a&gt;, we explored how to structure a simple Redux application. In this walkthrough, we will explore how AJAX and routing fit into the picture.</source>
          <target state="translated">En el &lt;a href=&quot;../basics/index&quot;&gt;tutorial b&amp;aacute;sico&lt;/a&gt; , exploramos c&amp;oacute;mo estructurar una aplicaci&amp;oacute;n Redux simple. En este tutorial, exploraremos c&amp;oacute;mo AJAX y el enrutamiento encajan en la imagen.</target>
        </trans-unit>
        <trans-unit id="c7465b6d942c4e067cd6e80afe069da00300c514" translate="yes" xml:space="preserve">
          <source>In the above example, &lt;code&gt;mapStateToProps&lt;/code&gt; calls &lt;code&gt;getVisibleTodos&lt;/code&gt; to calculate &lt;code&gt;todos&lt;/code&gt;. This works great, but there is a drawback: &lt;code&gt;todos&lt;/code&gt; is calculated every time the component is updated. If the state tree is large, or the calculation expensive, repeating the calculation on every update may cause performance problems. Reselect can help to avoid these unnecessary recalculations.</source>
          <target state="translated">En el ejemplo anterior, &lt;code&gt;mapStateToProps&lt;/code&gt; llama a &lt;code&gt;getVisibleTodos&lt;/code&gt; para calcular &lt;code&gt;todos&lt;/code&gt; . Esto funciona muy bien, pero hay un inconveniente: &lt;code&gt;todos&lt;/code&gt; se calcula cada vez que se actualiza el componente. Si el &amp;aacute;rbol de estado es grande o el c&amp;aacute;lculo es caro, repetir el c&amp;aacute;lculo en cada actualizaci&amp;oacute;n puede causar problemas de rendimiento. Reselect puede ayudar a evitar estos c&amp;aacute;lculos innecesarios.</target>
        </trans-unit>
        <trans-unit id="74b79c0e319782fa1b2ce1286be0efeb546c9fb7" translate="yes" xml:space="preserve">
          <source>In the app itself, you would still import it normally:</source>
          <target state="translated">En la propia aplicación,todavía se importaría normalmente:</target>
        </trans-unit>
        <trans-unit id="37f755748aa6d0df9f0a90fd85dea6dc752d6246" translate="yes" xml:space="preserve">
          <source>In the end, Redux is just a tool. It's a great tool, and there's some great reasons to use it, but there's also reasons you might not want to use it. Make informed decisions about your tools, and understand the tradeoffs involved in each decision.</source>
          <target state="translated">Al final,Redux es sólo una herramienta.Es una gran herramienta,y hay algunas razones para usarla,pero también hay razones para que no quieras usarla.Toma decisiones informadas sobre tus herramientas,y entiende las ventajas y desventajas de cada decisión.</target>
        </trans-unit>
        <trans-unit id="26a5d759ba12e2ce01d8df1300b5865e8a1aceec" translate="yes" xml:space="preserve">
          <source>In the example above, &lt;code&gt;getVisibilityFilter&lt;/code&gt; and &lt;code&gt;getTodos&lt;/code&gt; are input-selectors. They are created as ordinary non-memoized selector functions because they do not transform the data they select. &lt;code&gt;getVisibleTodos&lt;/code&gt; on the other hand is a memoized selector. It takes &lt;code&gt;getVisibilityFilter&lt;/code&gt; and &lt;code&gt;getTodos&lt;/code&gt; as input-selectors, and a transform function that calculates the filtered todos list.</source>
          <target state="translated">En el ejemplo anterior, &lt;code&gt;getVisibilityFilter&lt;/code&gt; y &lt;code&gt;getTodos&lt;/code&gt; son selectores de entrada. Se crean como funciones de selector no memorizadas ordinarias porque no transforman los datos que seleccionan. &lt;code&gt;getVisibleTodos&lt;/code&gt; , por otro lado, es un selector memorizado. Toma &lt;code&gt;getVisibilityFilter&lt;/code&gt; y &lt;code&gt;getTodos&lt;/code&gt; como selectores de entrada, y una funci&amp;oacute;n de transformaci&amp;oacute;n que calcula la lista filtrada de todos.</target>
        </trans-unit>
        <trans-unit id="afd7412498e7c4b8984657c38f0316bc34913128" translate="yes" xml:space="preserve">
          <source>In the example below &lt;code&gt;makeMapStateToProps&lt;/code&gt; creates a new &lt;code&gt;getVisibleTodos&lt;/code&gt; selector, and returns a &lt;code&gt;mapStateToProps&lt;/code&gt; function that has exclusive access to the new selector:</source>
          <target state="translated">En el siguiente ejemplo, &lt;code&gt;makeMapStateToProps&lt;/code&gt; crea un nuevo selector &lt;code&gt;getVisibleTodos&lt;/code&gt; y devuelve una funci&amp;oacute;n &lt;code&gt;mapStateToProps&lt;/code&gt; que tiene acceso exclusivo al nuevo selector:</target>
        </trans-unit>
        <trans-unit id="02549e5da1d96280abf9f8af834de7e02b0480e3" translate="yes" xml:space="preserve">
          <source>In the example below, if &lt;code&gt;state.todos&lt;/code&gt; and the value returned from &lt;code&gt;getVisibleTodos()&lt;/code&gt; do not change on successive calls to &lt;code&gt;connect&lt;/code&gt;, then the component will not re-render .</source>
          <target state="translated">En el siguiente ejemplo, si &lt;code&gt;state.todos&lt;/code&gt; y el valor devuelto por &lt;code&gt;getVisibleTodos()&lt;/code&gt; no cambian en sucesivas llamadas para &lt;code&gt;connect&lt;/code&gt; , entonces el componente no se volver&amp;aacute; a renderizar.</target>
        </trans-unit>
        <trans-unit id="74ee9c48a9c85ce991273312632d3dd6b926ea53" translate="yes" xml:space="preserve">
          <source>In the first part of this recipe, we will explain the underlying concepts that make Undo and Redo possible to implement in a generic way.</source>
          <target state="translated">En la primera parte de esta receta,explicaremos los conceptos subyacentes que hacen que Deshacer y Rehacer sea posible de implementar de manera genérica.</target>
        </trans-unit>
        <trans-unit id="b2243bc74f11442cdf674f937bd6d1c08c6272ae" translate="yes" xml:space="preserve">
          <source>In the following recipe, we are going to look at how to set up server-side rendering. We'll use the simplistic &lt;a href=&quot;https://github.com/reactjs/redux/tree/master/examples/counter&quot;&gt;Counter app&lt;/a&gt; as a guide and show how the server can render state ahead of time based on the request.</source>
          <target state="translated">En la siguiente receta, veremos c&amp;oacute;mo configurar el renderizado del lado del servidor. Usaremos la &lt;a href=&quot;https://github.com/reactjs/redux/tree/master/examples/counter&quot;&gt;aplicaci&amp;oacute;n Counter&lt;/a&gt; simplista como gu&amp;iacute;a y mostraremos c&amp;oacute;mo el servidor puede representar el estado antes de tiempo seg&amp;uacute;n la solicitud.</target>
        </trans-unit>
        <trans-unit id="c5cd11df4343550d7d4e43af17f049e566352685" translate="yes" xml:space="preserve">
          <source>In the previous sections, we defined the &lt;a href=&quot;actions&quot;&gt;actions&lt;/a&gt; that represent the facts about &amp;ldquo;what happened&amp;rdquo; and the &lt;a href=&quot;reducers&quot;&gt;reducers&lt;/a&gt; that update the state according to those actions.</source>
          <target state="translated">En las secciones anteriores, definimos las &lt;a href=&quot;actions&quot;&gt;acciones&lt;/a&gt; que representan los hechos sobre &amp;ldquo;lo que sucedi&amp;oacute;&amp;rdquo; y los &lt;a href=&quot;reducers&quot;&gt;reductores&lt;/a&gt; que actualizan el estado de acuerdo con esas acciones.</target>
        </trans-unit>
        <trans-unit id="e93726cac65849e4d12ae302dc65296290899ed8" translate="yes" xml:space="preserve">
          <source>In the second part of this recipe, we will show how to use &lt;a href=&quot;https://github.com/omnidan/redux-undo&quot;&gt;Redux Undo&lt;/a&gt; package that provides this functionality out of the box.</source>
          <target state="translated">En la segunda parte de esta receta, mostraremos c&amp;oacute;mo usar el paquete &lt;a href=&quot;https://github.com/omnidan/redux-undo&quot;&gt;Redux Undo&lt;/a&gt; que proporciona esta funcionalidad lista para usar .</target>
        </trans-unit>
        <trans-unit id="faa485784e2157411990893a973a8bd333ffb697" translate="yes" xml:space="preserve">
          <source>In this case, &lt;code&gt;state&lt;/code&gt; was specified so it didn't fall back to &lt;code&gt;{}&lt;/code&gt;. It was an object with &lt;code&gt;a&lt;/code&gt; field equal to &lt;code&gt;'horse'&lt;/code&gt;, but without the &lt;code&gt;b&lt;/code&gt; field. This is why the &lt;code&gt;a&lt;/code&gt; reducer received &lt;code&gt;'horse'&lt;/code&gt; as its &lt;code&gt;state&lt;/code&gt; and gladly returned it, but the &lt;code&gt;b&lt;/code&gt; reducer received &lt;code&gt;undefined&lt;/code&gt; as its &lt;code&gt;state&lt;/code&gt; and thus returned &lt;em&gt;its idea&lt;/em&gt; of the default &lt;code&gt;state&lt;/code&gt; (in our example, &lt;code&gt;'wat'&lt;/code&gt;). This is how we get &lt;code&gt;{ a: 'horse', b: 'wat' }&lt;/code&gt; in return.</source>
          <target state="translated">En este caso, se especific&amp;oacute; el &lt;code&gt;state&lt;/code&gt; para que no volviera a &lt;code&gt;{}&lt;/code&gt; . Era un objeto con &lt;code&gt;a&lt;/code&gt; campo igual a &lt;code&gt;'horse'&lt;/code&gt; , pero sin el campo &lt;code&gt;b&lt;/code&gt; . Esta es la raz&amp;oacute;n por la &lt;code&gt;a&lt;/code&gt; reductor recibido &lt;code&gt;'horse'&lt;/code&gt; como su &lt;code&gt;state&lt;/code&gt; y con mucho gusto se lo devolvi&amp;oacute;, pero el &lt;code&gt;b&lt;/code&gt; reductor recibidas &lt;code&gt;undefined&lt;/code&gt; como su &lt;code&gt;state&lt;/code&gt; y por lo tanto volvi&amp;oacute; &lt;em&gt;a su idea&lt;/em&gt; del valor por defecto &lt;code&gt;state&lt;/code&gt; (en nuestro ejemplo, &lt;code&gt;'wat'&lt;/code&gt; ). As&amp;iacute; es como obtenemos &lt;code&gt;{ a: 'horse', b: 'wat' }&lt;/code&gt; a cambio.</target>
        </trans-unit>
        <trans-unit id="f092b4bf36ca89a0195ff54516fa10e82e7e403d" translate="yes" xml:space="preserve">
          <source>In this code, there are two interesting parts:</source>
          <target state="translated">En este código,hay dos partes interesantes:</target>
        </trans-unit>
        <trans-unit id="71ff63357cd40c92d16604f3aa798bf1944dff1e" translate="yes" xml:space="preserve">
          <source>In this example, &lt;code&gt;todos&lt;/code&gt; and &lt;code&gt;visibilityFilter&lt;/code&gt; are both top-level keys in the state, and each represents a &quot;slice&quot; of data for some particular concept.</source>
          <target state="translated">En este ejemplo, &lt;code&gt;todos&lt;/code&gt; y &lt;code&gt;visibilityFilter&lt;/code&gt; son claves de nivel superior en el estado y cada una representa una &quot;porci&amp;oacute;n&quot; de datos para alg&amp;uacute;n concepto en particular.</target>
        </trans-unit>
        <trans-unit id="76b5dc7b5ea1bc39335dc8d9e264ade04c2338c5" translate="yes" xml:space="preserve">
          <source>In this example, we store the received items together with the pagination information. However, this approach won't work well if you have nested entities referencing each other, or if you let the user edit items. Imagine the user wants to edit a fetched post, but this post is duplicated in several places in the state tree. This would be really painful to implement.</source>
          <target state="translated">En este ejemplo,almacenamos los artículos recibidos junto con la información de la paginación.Sin embargo,este enfoque no funcionará bien si tiene entidades anidadas que se referencian entre sí,o si deja que el usuario edite los elementos.Imagine que el usuario quiere editar un mensaje recuperado,pero este mensaje está duplicado en varios lugares del árbol de estados.Esto sería realmente doloroso de implementar.</target>
        </trans-unit>
        <trans-unit id="d38453f2982934a0e4a9ceb3c56a5bc2171aeeca" translate="yes" xml:space="preserve">
          <source>In this guide, we will build a different, asynchronous application. It will use the Reddit API to show the current headlines for a selected subreddit. How does asynchronicity fit into Redux flow?</source>
          <target state="translated">En esta guía,construiremos una aplicación asíncrona diferente.Usará la API de Reddit para mostrar los titulares actuales de un subremito seleccionado.¿Cómo encaja la asincronía en el flujo de Redux?</target>
        </trans-unit>
        <trans-unit id="6560c487884e558589c10deb770162dd33a72a4b" translate="yes" xml:space="preserve">
          <source>In this guide, we won't normalize entities, but it's something you should consider for a more dynamic application.</source>
          <target state="translated">En esta guía no vamos a normalizar entidades,pero es algo que debe considerarse para una aplicación más dinámica.</target>
        </trans-unit>
        <trans-unit id="5a84d91992fe1ee4ade8af66d135912f74026aac" translate="yes" xml:space="preserve">
          <source>In this guide, we'll walk through the process of creating a simple Todo app.</source>
          <target state="translated">En esta guía,recorreremos el proceso de creación de una sencilla aplicación Todo.</target>
        </trans-unit>
        <trans-unit id="7a3264d98279777fdf4abb2ddc1f6f9425eb13ec" translate="yes" xml:space="preserve">
          <source>In this part of the recipe, you will learn how to make the &lt;a href=&quot;../basics/exampletodolist&quot;&gt;Todo List example&lt;/a&gt; undoable. You can find the full source of this recipe in the &lt;a href=&quot;https://github.com/reactjs/redux/tree/master/examples/todos-with-undo&quot;&gt;&lt;code&gt;todos-with-undo&lt;/code&gt; example that comes with Redux&lt;/a&gt;.</source>
          <target state="translated">En esta parte de la receta, aprender&amp;aacute; c&amp;oacute;mo deshacer el &lt;a href=&quot;../basics/exampletodolist&quot;&gt;ejemplo de Lista de&lt;/a&gt; tareas pendientes. Puede encontrar el c&amp;oacute;digo fuente completo de esta receta en el &lt;a href=&quot;https://github.com/reactjs/redux/tree/master/examples/todos-with-undo&quot;&gt;ejemplo de &lt;/a&gt; &lt;code&gt;todos-with-undo&lt;/code&gt; que viene con Redux .</target>
        </trans-unit>
        <trans-unit id="584304393b0ea6955cb4308163835ca022286a68" translate="yes" xml:space="preserve">
          <source>Influences</source>
          <target state="translated">Influences</target>
        </trans-unit>
        <trans-unit id="de155c1609b33aab2a421d885b10f58302427667" translate="yes" xml:space="preserve">
          <source>Initial Reducer</source>
          <target state="translated">Reductor inicial</target>
        </trans-unit>
        <trans-unit id="13ff8f213c0a10779a370cddf8f0fc33be27fbc0" translate="yes" xml:space="preserve">
          <source>Initializing State</source>
          <target state="translated">Estado Inicializador</target>
        </trans-unit>
        <trans-unit id="a5ff420ada3c0a5605a30920772184b34ab3a629" translate="yes" xml:space="preserve">
          <source>Inject Initial Component HTML and State</source>
          <target state="translated">Inyectar el componente inicial HTML y el estado</target>
        </trans-unit>
        <trans-unit id="3d86177949674f0d3d6f94fa38a597fbce828a69" translate="yes" xml:space="preserve">
          <source>Insert the &lt;code&gt;present&lt;/code&gt; at the end of the &lt;code&gt;past&lt;/code&gt;.</source>
          <target state="translated">Inserta el &lt;code&gt;present&lt;/code&gt; e al final del &lt;code&gt;past&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="bcab0294df72cd75ef5a6d54589ea4dce06c352f" translate="yes" xml:space="preserve">
          <source>Insert the old &lt;code&gt;present&lt;/code&gt; state at the &lt;em&gt;beginning&lt;/em&gt; of the &lt;code&gt;future&lt;/code&gt;.</source>
          <target state="translated">Inserte el antiguo estado &lt;code&gt;present&lt;/code&gt; e al &lt;em&gt;comienzo&lt;/em&gt; del &lt;code&gt;future&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="f1ec847a17c9bdb6126cb0938660b383ecf56d95" translate="yes" xml:space="preserve">
          <source>Insert the old &lt;code&gt;present&lt;/code&gt; state at the &lt;em&gt;end&lt;/em&gt; of the &lt;code&gt;past&lt;/code&gt;.</source>
          <target state="translated">Inserte el antiguo estado &lt;code&gt;present&lt;/code&gt; e al &lt;em&gt;final&lt;/em&gt; del &lt;code&gt;past&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="d83e33670ddd1909319192f3e6c17aaca9a84645" translate="yes" xml:space="preserve">
          <source>Inserting and Removing Items in Arrays</source>
          <target state="translated">Insertar y quitar elementos en los conjuntos</target>
        </trans-unit>
        <trans-unit id="b0907ce47d7d9097da0f4a803702823b572700f6" translate="yes" xml:space="preserve">
          <source>Install Packages</source>
          <target state="translated">Instalar paquetes</target>
        </trans-unit>
        <trans-unit id="6a3270b4b51ff970f769df9e395c358dbef395d0" translate="yes" xml:space="preserve">
          <source>Install the &lt;a href=&quot;https://chrome.google.com/webstore/detail/immutablejs-object-format/hgldghadipiblonfkkicmgcbbijnpeog&quot;&gt;Immutable Object Formatter&lt;/a&gt; , and inspect your Immutable.JS data without seeing the noise of Immutable.JS's own object properties.</source>
          <target state="translated">Instale &lt;a href=&quot;https://chrome.google.com/webstore/detail/immutablejs-object-format/hgldghadipiblonfkkicmgcbbijnpeog&quot;&gt;Immutable Object Formatter&lt;/a&gt; e inspeccione sus datos de Immutable.JS sin ver el ruido de las propiedades de objeto de Immutable.JS.</target>
        </trans-unit>
        <trans-unit id="c81b79df3c6448eae7c4f80428b54cd5692a17d7" translate="yes" xml:space="preserve">
          <source>Installation</source>
          <target state="translated">Installation</target>
        </trans-unit>
        <trans-unit id="a2b7d6ff7d322426c52bf0336937cb1f5f83cc7e" translate="yes" xml:space="preserve">
          <source>Installing React Redux</source>
          <target state="translated">Instalando React Redux</target>
        </trans-unit>
        <trans-unit id="919e9c6771a9e147109378578b2ca429689f31e8" translate="yes" xml:space="preserve">
          <source>Installing React Router</source>
          <target state="translated">Instalación del router React</target>
        </trans-unit>
        <trans-unit id="d01c0e156f524f6033babf6a65fdfe5fbe227c04" translate="yes" xml:space="preserve">
          <source>Instead of &lt;code&gt;applyMiddlewareByMonkeypatching()&lt;/code&gt;, we could write &lt;code&gt;applyMiddleware()&lt;/code&gt; that first obtains the final, fully wrapped &lt;code&gt;dispatch()&lt;/code&gt; function, and returns a copy of the store using it:</source>
          <target state="translated">En lugar de &lt;code&gt;applyMiddlewareByMonkeypatching()&lt;/code&gt; , podr&amp;iacute;amos escribir &lt;code&gt;applyMiddleware()&lt;/code&gt; que primero obtiene la funci&amp;oacute;n &lt;code&gt;dispatch()&lt;/code&gt; final y completamente envuelta , y devuelve una copia de la tienda us&amp;aacute;ndola:</target>
        </trans-unit>
        <trans-unit id="19d59912d07b0c1523625f9aa8c4564aa281316e" translate="yes" xml:space="preserve">
          <source>Instead of mutating the state directly, you specify the mutations you want to happen with plain objects called &lt;em&gt;actions&lt;/em&gt;. Then you write a special function called a &lt;em&gt;reducer&lt;/em&gt; to decide how every action transforms the entire application's state.</source>
          <target state="translated">En lugar de mutar el estado directamente, especifica las mutaciones que desea que ocurran con objetos simples llamados &lt;em&gt;acciones&lt;/em&gt; . Luego, escribe una funci&amp;oacute;n especial llamada &lt;em&gt;reductor&lt;/em&gt; para decidir c&amp;oacute;mo cada acci&amp;oacute;n transforma el estado de toda la aplicaci&amp;oacute;n.</target>
        </trans-unit>
        <trans-unit id="7cc634e20909b40b70243f5387f4971fcef12462" translate="yes" xml:space="preserve">
          <source>Instead, to actually initiate a dispatch, pass the result to the &lt;code&gt;dispatch()&lt;/code&gt; function:</source>
          <target state="translated">En su lugar, para iniciar realmente un env&amp;iacute;o, pase el resultado a la funci&amp;oacute;n &lt;code&gt;dispatch()&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="d8b4700d865a6bc3050b6238ea39ea11326ddf5b" translate="yes" xml:space="preserve">
          <source>Integrating Data with React Native</source>
          <target state="translated">Integrar los datos con React Native</target>
        </trans-unit>
        <trans-unit id="e94ff5f5157ce93e1e54097b202ed106931426a0" translate="yes" xml:space="preserve">
          <source>Internally, it uses &lt;a href=&quot;https://github.com/github/fetch&quot;&gt;&lt;code&gt;whatwg-fetch&lt;/code&gt; polyfill&lt;/a&gt; on the client, and &lt;a href=&quot;https://github.com/bitinn/node-fetch&quot;&gt;&lt;code&gt;node-fetch&lt;/code&gt;&lt;/a&gt; on the server, so you won't need to change API calls if you change your app to be &lt;a href=&quot;https://medium.com/@mjackson/universal-javascript-4761051b7ae9&quot;&gt;universal&lt;/a&gt;.</source>
          <target state="translated">Internamente, utiliza &lt;a href=&quot;https://github.com/github/fetch&quot;&gt; &lt;code&gt;whatwg-fetch&lt;/code&gt; polyfill&lt;/a&gt; en el cliente y &lt;a href=&quot;https://github.com/bitinn/node-fetch&quot;&gt; &lt;code&gt;node-fetch&lt;/code&gt; &lt;/a&gt; en el servidor, por lo que no necesitar&amp;aacute; cambiar las llamadas a la API si cambia su aplicaci&amp;oacute;n para que sea &lt;a href=&quot;https://medium.com/@mjackson/universal-javascript-4761051b7ae9&quot;&gt;universal&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="2473e96bc614a911821242119918a241a41836d6" translate="yes" xml:space="preserve">
          <source>Introduction</source>
          <target state="translated">Introduction</target>
        </trans-unit>
        <trans-unit id="8a6f1a995da229b02edaf632a5ace565c8ee09ce" translate="yes" xml:space="preserve">
          <source>Introduction to Immutable.js and Functional Programming Concepts</source>
          <target state="translated">Introducción a Immutable.js y a los conceptos de programación funcional</target>
        </trans-unit>
        <trans-unit id="07b5b8bcb22926ae89618f485d25977d251671eb" translate="yes" xml:space="preserve">
          <source>Introduction: Examples</source>
          <target state="translated">Introducción:Ejemplos</target>
        </trans-unit>
        <trans-unit id="4209082024c9cd9683fea7a0702e849132c096c7" translate="yes" xml:space="preserve">
          <source>Introduction: Motivation</source>
          <target state="translated">Introducción:Motivación</target>
        </trans-unit>
        <trans-unit id="7833c7c1e348dea95d2da014ccfe35f763549815" translate="yes" xml:space="preserve">
          <source>Invoke callbacks from props</source>
          <target state="translated">Invocar las llamadas de los accesorios</target>
        </trans-unit>
        <trans-unit id="7b224be093f507de08ead59d030ff9b7f95ab8d1" translate="yes" xml:space="preserve">
          <source>Is Immutable.JS worth the effort?</source>
          <target state="translated">¿Vale la pena el esfuerzo de Immutable.JS?</target>
        </trans-unit>
        <trans-unit id="da302071395dfdf468568428a985f282b79b0804" translate="yes" xml:space="preserve">
          <source>Is Using Immutable.JS worth the effort?</source>
          <target state="translated">¿Vale la pena usar Immutable.JS?</target>
        </trans-unit>
        <trans-unit id="03b995ff411e93b919b4cdc03f6d0002c9968e7f" translate="yes" xml:space="preserve">
          <source>Is it OK to have more than one middleware chain in my store enhancer? What is the difference between &lt;code&gt;next&lt;/code&gt; and &lt;code&gt;dispatch&lt;/code&gt; in a middleware function?</source>
          <target state="translated">&amp;iquest;Est&amp;aacute; bien tener m&amp;aacute;s de una cadena de middleware en el potenciador de mi tienda? &amp;iquest;Cu&amp;aacute;l es la diferencia entre &lt;code&gt;next&lt;/code&gt; y &lt;code&gt;dispatch&lt;/code&gt; en una funci&amp;oacute;n de middleware?</target>
        </trans-unit>
        <trans-unit id="f5a28ea665464bd96297075646b171f933e455eb" translate="yes" xml:space="preserve">
          <source>Is it OK to have more than one middleware chain in my store enhancer? What is the difference between next and dispatch in a middleware function?</source>
          <target state="translated">¿Está bien tener más de una cadena de middleware en mi tienda mejoradora? ¿Cuál es la diferencia entre la función de siguiente y despacho en un middleware?</target>
        </trans-unit>
        <trans-unit id="c9383cd73080d3bf5501f85e4702d23a4e04ad13" translate="yes" xml:space="preserve">
          <source>Is the same data being used to drive multiple components?</source>
          <target state="translated">¿Se están usando los mismos datos para manejar múltiples componentes?</target>
        </trans-unit>
        <trans-unit id="da4741570a3bb3f7779f15075dab9fd931487a3a" translate="yes" xml:space="preserve">
          <source>Is there a way to make it easier to comprehend? It seems like &lt;code&gt;todos&lt;/code&gt; and &lt;code&gt;visibilityFilter&lt;/code&gt; are updated completely independently. Sometimes state fields depend on one another and more consideration is required, but in our case we can easily split updating &lt;code&gt;todos&lt;/code&gt; into a separate function:</source>
          <target state="translated">&amp;iquest;Hay alguna forma de hacer que sea m&amp;aacute;s f&amp;aacute;cil de comprender? Parece que &lt;code&gt;todos&lt;/code&gt; y &lt;code&gt;visibilityFilter&lt;/code&gt; se actualizan de forma completamente independiente. A veces, los campos de estado dependen unos de otros y se requiere m&amp;aacute;s consideraci&amp;oacute;n, pero en nuestro caso podemos dividir f&amp;aacute;cilmente la actualizaci&amp;oacute;n de &lt;code&gt;todos&lt;/code&gt; en una funci&amp;oacute;n separada:</target>
        </trans-unit>
        <trans-unit id="c7e83fd15d92fbc9418b683c0d9790a7c6248751" translate="yes" xml:space="preserve">
          <source>Is there always a one-to-one mapping between reducers and actions?</source>
          <target state="translated">¿Siempre hay un mapeo individual entre los reductores y las acciones?</target>
        </trans-unit>
        <trans-unit id="84984bdef5380f48f6df27ee47064798ca74e062" translate="yes" xml:space="preserve">
          <source>Is there anything left to undo or redo?</source>
          <target state="translated">¿Queda algo por deshacer o rehacer?</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
