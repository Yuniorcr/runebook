<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="es" datatype="htmlbody" original="haskell">
    <body>
      <group id="haskell">
        <trans-unit id="4105c31526c1b2c23cfef226019e9d121a5f0732" translate="yes" xml:space="preserve">
          <source>O(1). Write a single native machine word. The word is written in host order, host endian form, for the machine you're on. On a 64 bit machine the Int is an 8 byte value, on a 32 bit machine, 4 bytes. Values written this way are not portable to different endian or word sized machines, without conversion.</source>
          <target state="translated">O(1).Escriba una sola palabra de la máquina nativa.La palabra se escribe en el orden de los anfitriones,en la forma de anfitriones indios,para la máquina en la que estás.En una máquina de 64 bits la Int es un valor de 8 bytes,en una máquina de 32 bits,4 bytes.Los valores escritos de esta manera no son portátiles a diferentes máquinas de tamaño endian o palabra,sin conversión.</target>
        </trans-unit>
        <trans-unit id="4fd565c6502d3274c18a3dffa4a1de1d9f4986b2" translate="yes" xml:space="preserve">
          <source>O(1). Write a single native machine word. The word is written in host order, host endian form, for the machine you're on. On a 64 bit machine the Word is an 8 byte value, on a 32 bit machine, 4 bytes. Values written this way are not portable to different endian or word sized machines, without conversion.</source>
          <target state="translated">O(1).Escriba una sola palabra de la máquina nativa.La palabra se escribe en el orden de los anfitriones,en la forma de anfitriones indios,para la máquina en la que estás.En una máquina de 64 bits la palabra tiene un valor de 8 bytes,en una máquina de 32 bits,4 bytes.Los valores escritos de esta manera no son portátiles a diferentes máquinas de tamaño endian o word,sin conversión.</target>
        </trans-unit>
        <trans-unit id="0a1211440c41b008025fd5d08a5a02efbd05afc8" translate="yes" xml:space="preserve">
          <source>O(1). Write an Int16 in native host order and host endianness. For portability issues see &lt;code&gt;putInthost&lt;/code&gt;.</source>
          <target state="translated">O (1). Escriba un Int16 en orden de host nativo y endianness de host. Para problemas de portabilidad, consulte &lt;code&gt;putInthost&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="64b8185d430f3135e2d45e7e611125c2fa41da62" translate="yes" xml:space="preserve">
          <source>O(1). Write an Int32 in native host order and host endianness. For portability issues see &lt;code&gt;putInthost&lt;/code&gt;.</source>
          <target state="translated">O (1). Escriba un Int32 en orden de host nativo y endianness de host. Para problemas de portabilidad, consulte &lt;code&gt;putInthost&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="bd67d17a24224cf4fad81638e61d3e67d8db6e92" translate="yes" xml:space="preserve">
          <source>O(1). Write an Int64 in native host order On a 32 bit machine we write two host order Int32s, in big endian form. For portability issues see &lt;code&gt;putInthost&lt;/code&gt;.</source>
          <target state="translated">O (1). Escribir un Int64 en orden de host nativo En una m&amp;aacute;quina de 32 bits escribimos dos Int32 de orden de host, en formato big endian. Para problemas de portabilidad, consulte &lt;code&gt;putInthost&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="48f2771d14d48dfa60c630493ad0c9b1f384a240" translate="yes" xml:space="preserve">
          <source>O(1)&lt;code&gt;&lt;a href=&quot;data-bytestring#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt; index (subscript) operator, starting from 0.</source>
          <target state="translated">O (1) &lt;code&gt;&lt;a href=&quot;data-bytestring#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt; &amp;iacute;ndice ByteString (sub&amp;iacute;ndice), comenzando desde 0.</target>
        </trans-unit>
        <trans-unit id="f76df71a59358c7dbc7d2bd6d49d6a20235b9cce" translate="yes" xml:space="preserve">
          <source>O(1)&lt;code&gt;&lt;a href=&quot;data-bytestring#v:drop&quot;&gt;drop&lt;/a&gt;&lt;/code&gt;&lt;code&gt;n xs&lt;/code&gt; returns the suffix of &lt;code&gt;xs&lt;/code&gt; after the first &lt;code&gt;n&lt;/code&gt; elements, or &lt;code&gt;[]&lt;/code&gt; if &lt;code&gt;n &amp;gt; &lt;a href=&quot;data-bytestring#v:length&quot;&gt;length&lt;/a&gt; xs&lt;/code&gt;.</source>
          <target state="translated">O (1) &lt;code&gt;&lt;a href=&quot;data-bytestring#v:drop&quot;&gt;drop&lt;/a&gt;&lt;/code&gt; &lt;code&gt;n xs&lt;/code&gt; devuelve el sufijo de &lt;code&gt;xs&lt;/code&gt; despu&amp;eacute;s de los primeros &lt;code&gt;n&lt;/code&gt; elementos, o &lt;code&gt;[]&lt;/code&gt; si &lt;code&gt;n &amp;gt; &lt;a href=&quot;data-bytestring#v:length&quot;&gt;length&lt;/a&gt; xs&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="af17f515239bcc935e4702a4f4a6700695d9f19b" translate="yes" xml:space="preserve">
          <source>O(1)&lt;code&gt;&lt;a href=&quot;data-bytestring#v:length&quot;&gt;length&lt;/a&gt;&lt;/code&gt; returns the length of a ByteString as an &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-int#t:Int&quot;&gt;Int&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">O (1) &lt;code&gt;&lt;a href=&quot;data-bytestring#v:length&quot;&gt;length&lt;/a&gt;&lt;/code&gt; devuelve la longitud de ByteString como &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-int#t:Int&quot;&gt;Int&lt;/a&gt;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="332762aa91c7e13ad717bba9c0d52c92bfe7c53a" translate="yes" xml:space="preserve">
          <source>O(1)&lt;code&gt;&lt;a href=&quot;data-bytestring#v:length&quot;&gt;length&lt;/a&gt;&lt;/code&gt; returns the length of a ByteString as an &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-int#t:Int&quot;&gt;Int&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="127e23acd8e00b0d3fe958d794982720f2a93de5" translate="yes" xml:space="preserve">
          <source>O(1)&lt;code&gt;&lt;a href=&quot;data-bytestring#v:splitAt&quot;&gt;splitAt&lt;/a&gt;&lt;/code&gt;&lt;code&gt;n xs&lt;/code&gt; is equivalent to &lt;code&gt;(&lt;a href=&quot;data-bytestring#v:take&quot;&gt;take&lt;/a&gt; n xs, &lt;a href=&quot;data-bytestring#v:drop&quot;&gt;drop&lt;/a&gt; n xs)&lt;/code&gt;.</source>
          <target state="translated">O (1) &lt;code&gt;&lt;a href=&quot;data-bytestring#v:splitAt&quot;&gt;splitAt&lt;/a&gt;&lt;/code&gt; &lt;code&gt;n xs&lt;/code&gt; es equivalente a &lt;code&gt;(&lt;a href=&quot;data-bytestring#v:take&quot;&gt;take&lt;/a&gt; n xs, &lt;a href=&quot;data-bytestring#v:drop&quot;&gt;drop&lt;/a&gt; n xs)&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="9953abbf9da9e931feebd7c70d539cdc8573c547" translate="yes" xml:space="preserve">
          <source>O(1)&lt;code&gt;&lt;a href=&quot;data-bytestring#v:take&quot;&gt;take&lt;/a&gt;&lt;/code&gt;&lt;code&gt;n&lt;/code&gt;, applied to a ByteString &lt;code&gt;xs&lt;/code&gt;, returns the prefix of &lt;code&gt;xs&lt;/code&gt; of length &lt;code&gt;n&lt;/code&gt;, or &lt;code&gt;xs&lt;/code&gt; itself if &lt;code&gt;n &amp;gt; &lt;a href=&quot;data-bytestring#v:length&quot;&gt;length&lt;/a&gt; xs&lt;/code&gt;.</source>
          <target state="translated">O (1) &lt;code&gt;&lt;a href=&quot;data-bytestring#v:take&quot;&gt;take&lt;/a&gt;&lt;/code&gt; &lt;code&gt;n&lt;/code&gt; , aplicado a ByteString &lt;code&gt;xs&lt;/code&gt; , devuelve el prefijo de &lt;code&gt;xs&lt;/code&gt; de longitud &lt;code&gt;n&lt;/code&gt; , o &lt;code&gt;xs&lt;/code&gt; mismo si &lt;code&gt;n &amp;gt; &lt;a href=&quot;data-bytestring#v:length&quot;&gt;length&lt;/a&gt; xs&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="6b0e2e932afd954ae8b599c8cf08e02d933eac29" translate="yes" xml:space="preserve">
          <source>O(1)&lt;code&gt;&lt;a href=&quot;data-bytestring-char8#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt; index (subscript) operator, starting from 0.</source>
          <target state="translated">O (1) &lt;code&gt;&lt;a href=&quot;data-bytestring-char8#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt; &amp;iacute;ndice ByteString (sub&amp;iacute;ndice), comenzando desde 0.</target>
        </trans-unit>
        <trans-unit id="fe33cf04f77021fe94136a83192b2df80c5138a0" translate="yes" xml:space="preserve">
          <source>O(1)&lt;code&gt;&lt;a href=&quot;data-bytestring-char8#v:drop&quot;&gt;drop&lt;/a&gt;&lt;/code&gt;&lt;code&gt;n xs&lt;/code&gt; returns the suffix of &lt;code&gt;xs&lt;/code&gt; after the first &lt;code&gt;n&lt;/code&gt; elements, or &lt;code&gt;[]&lt;/code&gt; if &lt;code&gt;n &amp;gt; &lt;a href=&quot;data-bytestring-char8#v:length&quot;&gt;length&lt;/a&gt; xs&lt;/code&gt;.</source>
          <target state="translated">O (1) &lt;code&gt;&lt;a href=&quot;data-bytestring-char8#v:drop&quot;&gt;drop&lt;/a&gt;&lt;/code&gt; &lt;code&gt;n xs&lt;/code&gt; devuelve el sufijo de &lt;code&gt;xs&lt;/code&gt; despu&amp;eacute;s de los primeros &lt;code&gt;n&lt;/code&gt; elementos, o &lt;code&gt;[]&lt;/code&gt; si &lt;code&gt;n &amp;gt; &lt;a href=&quot;data-bytestring-char8#v:length&quot;&gt;length&lt;/a&gt; xs&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="316b5b4107a2056569fa09330995dcd5f6f5d78b" translate="yes" xml:space="preserve">
          <source>O(1)&lt;code&gt;&lt;a href=&quot;data-bytestring-char8#v:length&quot;&gt;length&lt;/a&gt;&lt;/code&gt; returns the length of a ByteString as an &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-int#t:Int&quot;&gt;Int&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">O (1) &lt;code&gt;&lt;a href=&quot;data-bytestring-char8#v:length&quot;&gt;length&lt;/a&gt;&lt;/code&gt; devuelve la longitud de ByteString como &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-int#t:Int&quot;&gt;Int&lt;/a&gt;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="e4a2a2bb077964af0c5ef645da1fc6b1425469da" translate="yes" xml:space="preserve">
          <source>O(1)&lt;code&gt;&lt;a href=&quot;data-bytestring-char8#v:length&quot;&gt;length&lt;/a&gt;&lt;/code&gt; returns the length of a ByteString as an &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-int#t:Int&quot;&gt;Int&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="15e715ab4e039d06e20c1f848353be761d880a66" translate="yes" xml:space="preserve">
          <source>O(1)&lt;code&gt;&lt;a href=&quot;data-bytestring-char8#v:splitAt&quot;&gt;splitAt&lt;/a&gt;&lt;/code&gt;&lt;code&gt;n xs&lt;/code&gt; is equivalent to &lt;code&gt;(&lt;a href=&quot;data-bytestring-char8#v:take&quot;&gt;take&lt;/a&gt; n xs, &lt;a href=&quot;data-bytestring-char8#v:drop&quot;&gt;drop&lt;/a&gt; n xs)&lt;/code&gt;.</source>
          <target state="translated">O (1) &lt;code&gt;&lt;a href=&quot;data-bytestring-char8#v:splitAt&quot;&gt;splitAt&lt;/a&gt;&lt;/code&gt; &lt;code&gt;n xs&lt;/code&gt; es equivalente a &lt;code&gt;(&lt;a href=&quot;data-bytestring-char8#v:take&quot;&gt;take&lt;/a&gt; n xs, &lt;a href=&quot;data-bytestring-char8#v:drop&quot;&gt;drop&lt;/a&gt; n xs)&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="b790901cebc08771fb98982b9a797ae8635a79a1" translate="yes" xml:space="preserve">
          <source>O(1)&lt;code&gt;&lt;a href=&quot;data-bytestring-char8#v:take&quot;&gt;take&lt;/a&gt;&lt;/code&gt;&lt;code&gt;n&lt;/code&gt;, applied to a ByteString &lt;code&gt;xs&lt;/code&gt;, returns the prefix of &lt;code&gt;xs&lt;/code&gt; of length &lt;code&gt;n&lt;/code&gt;, or &lt;code&gt;xs&lt;/code&gt; itself if &lt;code&gt;n &amp;gt; &lt;a href=&quot;data-bytestring-char8#v:length&quot;&gt;length&lt;/a&gt; xs&lt;/code&gt;.</source>
          <target state="translated">O (1) &lt;code&gt;&lt;a href=&quot;data-bytestring-char8#v:take&quot;&gt;take&lt;/a&gt;&lt;/code&gt; &lt;code&gt;n&lt;/code&gt; , aplicado a ByteString &lt;code&gt;xs&lt;/code&gt; , devuelve el prefijo de &lt;code&gt;xs&lt;/code&gt; de longitud &lt;code&gt;n&lt;/code&gt; , o &lt;code&gt;xs&lt;/code&gt; mismo si &lt;code&gt;n &amp;gt; &lt;a href=&quot;data-bytestring-char8#v:length&quot;&gt;length&lt;/a&gt; xs&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="b81d348ec756eac2297ebce38909b39338ac8932" translate="yes" xml:space="preserve">
          <source>O(1)&lt;code&gt;&lt;a href=&quot;data-bytestring-lazy#v:cons&quot;&gt;cons&lt;/a&gt;&lt;/code&gt; is analogous to &lt;code&gt;(:)&lt;/code&gt; for lists.</source>
          <target state="translated">O (1) &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy#v:cons&quot;&gt;cons&lt;/a&gt;&lt;/code&gt; es an&amp;aacute;logo a &lt;code&gt;(:)&lt;/code&gt; para listas.</target>
        </trans-unit>
        <trans-unit id="84d8aa5fa7be5792634aebd1239ff67f5cc75e21" translate="yes" xml:space="preserve">
          <source>O(1)&lt;code&gt;&lt;a href=&quot;data-bytestring-lazy-char8#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt; index (subscript) operator, starting from 0.</source>
          <target state="translated">O (1) &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy-char8#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt; &amp;iacute;ndice ByteString (sub&amp;iacute;ndice), comenzando desde 0.</target>
        </trans-unit>
        <trans-unit id="25d79b07a376fbd4bc45a3e9d670716e9e970bd5" translate="yes" xml:space="preserve">
          <source>O(1)&lt;code&gt;&lt;a href=&quot;data-bytestring-lazy-char8#v:cons&quot;&gt;cons&lt;/a&gt;&lt;/code&gt; is analogous to &lt;code&gt;(:)&lt;/code&gt; for lists.</source>
          <target state="translated">O (1) &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy-char8#v:cons&quot;&gt;cons&lt;/a&gt;&lt;/code&gt; es an&amp;aacute;logo a &lt;code&gt;(:)&lt;/code&gt; para listas.</target>
        </trans-unit>
        <trans-unit id="513661b77f911e3e7139b1e52439a40483f3ae90" translate="yes" xml:space="preserve">
          <source>O(1)&lt;code&gt;&lt;a href=&quot;data-bytestring-short#t:ShortByteString&quot;&gt;ShortByteString&lt;/a&gt;&lt;/code&gt; index (subscript) operator, starting from 0.</source>
          <target state="translated">O (1) &lt;code&gt;&lt;a href=&quot;data-bytestring-short#t:ShortByteString&quot;&gt;ShortByteString&lt;/a&gt;&lt;/code&gt; &amp;iacute;ndice ShortByteString (sub&amp;iacute;ndice), comenzando desde 0.</target>
        </trans-unit>
        <trans-unit id="48db5a2c7e16edc1ca261414beb9f506892b1c7a" translate="yes" xml:space="preserve">
          <source>O(1)&lt;code&gt;&lt;a href=&quot;data-bytestring-short-internal#t:ShortByteString&quot;&gt;ShortByteString&lt;/a&gt;&lt;/code&gt; index (subscript) operator, starting from 0.</source>
          <target state="translated">O (1) &lt;code&gt;&lt;a href=&quot;data-bytestring-short-internal#t:ShortByteString&quot;&gt;ShortByteString&lt;/a&gt;&lt;/code&gt; &amp;iacute;ndice ShortByteString (sub&amp;iacute;ndice), comenzando desde 0.</target>
        </trans-unit>
        <trans-unit id="359d8d0b775e683b308dab26731b241bdb0ed693" translate="yes" xml:space="preserve">
          <source>O(1)&lt;code&gt;&lt;a href=&quot;data-bytestring-unsafe#v:unsafePackAddressLen&quot;&gt;unsafePackAddressLen&lt;/a&gt;&lt;/code&gt; provides constant-time construction of &lt;code&gt;&lt;a href=&quot;data-bytestring#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt;s, which is ideal for string literals. It packs a sequence of bytes into a &lt;code&gt;&lt;a href=&quot;data-bytestring#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt;, given a raw &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/ghc-exts#t:Addr-35-&quot;&gt;Addr#&lt;/a&gt;&lt;/code&gt; to the string, and the length of the string.</source>
          <target state="translated">O (1) &lt;code&gt;&lt;a href=&quot;data-bytestring-unsafe#v:unsafePackAddressLen&quot;&gt;unsafePackAddressLen&lt;/a&gt;&lt;/code&gt; proporciona una construcci&amp;oacute;n en tiempo constante de &lt;code&gt;&lt;a href=&quot;data-bytestring#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt; s, que es ideal para cadenas literales. Es paquetes de una secuencia de bytes en un &lt;code&gt;&lt;a href=&quot;data-bytestring#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt; , dada una prima &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/ghc-exts#t:Addr-35-&quot;&gt;Addr#&lt;/a&gt;&lt;/code&gt; a la cadena, y la longitud de la cadena.</target>
        </trans-unit>
        <trans-unit id="1514afafdfb2e6e09462412156913addf713e722" translate="yes" xml:space="preserve">
          <source>O(1)&lt;code&gt;&lt;a href=&quot;data-bytestring-unsafe#v:unsafePackAddressLen&quot;&gt;unsafePackAddressLen&lt;/a&gt;&lt;/code&gt; provides constant-time construction of &lt;code&gt;&lt;a href=&quot;data-bytestring#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt;s, which is ideal for string literals. It packs a sequence of bytes into a &lt;code&gt;&lt;a href=&quot;data-bytestring#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt;, given a raw &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/ghc-exts#t:Addr-35-&quot;&gt;Addr#&lt;/a&gt;&lt;/code&gt; to the string, and the length of the string.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b1be145ed2001005bb14d35b20d891eec17a0139" translate="yes" xml:space="preserve">
          <source>O(c) Convert a lazy &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt; into a list of strict &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">O (c) Convertir un &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt; diferido en una lista de &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt; estricto</target>
        </trans-unit>
        <trans-unit id="74667d75b2ec51e29669918eee72fba3ebeae738" translate="yes" xml:space="preserve">
          <source>O(c) Convert a lazy &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy-char8#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt; into a list of strict &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy-char8#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">O (c) Convertir un &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy-char8#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt; diferido en una lista de &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy-char8#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt; estricto</target>
        </trans-unit>
        <trans-unit id="5f2389ba75fd26ec5193923e1d0a09f25f526004" translate="yes" xml:space="preserve">
          <source>O(c) Convert a list of strict &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt; into a lazy &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">O (c) Convertir una lista de &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt; estricto en un &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt; perezoso</target>
        </trans-unit>
        <trans-unit id="a497c3b62834a5a6f2ae83148c3f48809bcca685" translate="yes" xml:space="preserve">
          <source>O(c) Convert a list of strict &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy-char8#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt; into a lazy &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy-char8#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">O (c) Convertir una lista de &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy-char8#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt; estricto en un &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy-char8#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt; perezoso</target>
        </trans-unit>
        <trans-unit id="5d264b3988854013da762b4869f81230d3399ded" translate="yes" xml:space="preserve">
          <source>O(c) Convert a list of strict &lt;code&gt;&lt;a href=&quot;data-text#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt;s into a lazy &lt;code&gt;&lt;a href=&quot;data-text-lazy#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">O (c) Convierta una lista de &lt;code&gt;&lt;a href=&quot;data-text#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt; estrictos en un &lt;code&gt;&lt;a href=&quot;data-text-lazy#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt; perezoso .</target>
        </trans-unit>
        <trans-unit id="67e5e8f5471ea69b112c21a6ca2b82ec4773d339" translate="yes" xml:space="preserve">
          <source>O(c) Convert a strict &lt;code&gt;&lt;a href=&quot;data-text#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt; into a lazy &lt;code&gt;&lt;a href=&quot;data-text-lazy#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">O (c) Convertir un &lt;code&gt;&lt;a href=&quot;data-text#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt; estricto en un &lt;code&gt;&lt;a href=&quot;data-text-lazy#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt; perezoso .</target>
        </trans-unit>
        <trans-unit id="05205d2840348358328515bb5d059d0c2e7d3a07" translate="yes" xml:space="preserve">
          <source>O(c)&lt;code&gt;&lt;a href=&quot;data-bytestring-lazy#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt; index (subscript) operator, starting from 0.</source>
          <target state="translated">O (c) &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt; &amp;iacute;ndice ByteString (sub&amp;iacute;ndice), comenzando desde 0.</target>
        </trans-unit>
        <trans-unit id="af6e3a7c23911f9a6fa7f50fa70acaf74e0cece1" translate="yes" xml:space="preserve">
          <source>O(log n). Adjust a value at a specific key. When the key is not a member of the map, the original map is returned.</source>
          <target state="translated">O(log n).Ajustar un valor en una tecla específica.Cuando la clave no es un miembro del mapa,se devuelve el mapa original.</target>
        </trans-unit>
        <trans-unit id="5c32e846e083d90915ccaf6ac3869ade0caab613" translate="yes" xml:space="preserve">
          <source>O(log n). Combines insert operation with old value retrieval. The expression (&lt;code&gt;&lt;a href=&quot;data-map-lazy#v:insertLookupWithKey&quot;&gt;insertLookupWithKey&lt;/a&gt; f k x map&lt;/code&gt;) is a pair where the first element is equal to (&lt;code&gt;&lt;a href=&quot;data-map-lazy#v:lookup&quot;&gt;lookup&lt;/a&gt; k map&lt;/code&gt;) and the second element equal to (&lt;code&gt;&lt;a href=&quot;data-map-lazy#v:insertWithKey&quot;&gt;insertWithKey&lt;/a&gt; f k x map&lt;/code&gt;).</source>
          <target state="translated">O (log n). Combina la operaci&amp;oacute;n de inserci&amp;oacute;n con la recuperaci&amp;oacute;n de valores antiguos. La expresi&amp;oacute;n ( &lt;code&gt;&lt;a href=&quot;data-map-lazy#v:insertLookupWithKey&quot;&gt;insertLookupWithKey&lt;/a&gt; f k x map&lt;/code&gt; ) es un par donde el primer elemento es igual a ( &lt;code&gt;&lt;a href=&quot;data-map-lazy#v:lookup&quot;&gt;lookup&lt;/a&gt; k map&lt;/code&gt; ) y el segundo elemento es igual a ( &lt;code&gt;&lt;a href=&quot;data-map-lazy#v:insertWithKey&quot;&gt;insertWithKey&lt;/a&gt; f k x map&lt;/code&gt; ).</target>
        </trans-unit>
        <trans-unit id="d0b2f3822bf7c1ae26bd35d1e0b67be3f7c37d01" translate="yes" xml:space="preserve">
          <source>O(log n). Combines insert operation with old value retrieval. The expression (&lt;code&gt;&lt;a href=&quot;data-map-strict#v:insertLookupWithKey&quot;&gt;insertLookupWithKey&lt;/a&gt; f k x map&lt;/code&gt;) is a pair where the first element is equal to (&lt;code&gt;&lt;a href=&quot;data-map-strict#v:lookup&quot;&gt;lookup&lt;/a&gt; k map&lt;/code&gt;) and the second element equal to (&lt;code&gt;&lt;a href=&quot;data-map-strict#v:insertWithKey&quot;&gt;insertWithKey&lt;/a&gt; f k x map&lt;/code&gt;).</source>
          <target state="translated">O (log n). Combina la operaci&amp;oacute;n de inserci&amp;oacute;n con la recuperaci&amp;oacute;n de valores antiguos. La expresi&amp;oacute;n ( &lt;code&gt;&lt;a href=&quot;data-map-strict#v:insertLookupWithKey&quot;&gt;insertLookupWithKey&lt;/a&gt; f k x map&lt;/code&gt; ) es un par donde el primer elemento es igual a ( &lt;code&gt;&lt;a href=&quot;data-map-strict#v:lookup&quot;&gt;lookup&lt;/a&gt; k map&lt;/code&gt; ) y el segundo elemento es igual a ( &lt;code&gt;&lt;a href=&quot;data-map-strict#v:insertWithKey&quot;&gt;insertWithKey&lt;/a&gt; f k x map&lt;/code&gt; ).</target>
        </trans-unit>
        <trans-unit id="073aefa25116659d43e9fd0e2e991227f7e80c9d" translate="yes" xml:space="preserve">
          <source>O(log n). Delete a key and its value from the map. When the key is not a member of the map, the original map is returned.</source>
          <target state="translated">O(log n).Borrar una clave y su valor del mapa.Cuando la llave no es un miembro del mapa,se devuelve el mapa original.</target>
        </trans-unit>
        <trans-unit id="32a88437841d168a4b03991ed8d0d03dfe51f05b" translate="yes" xml:space="preserve">
          <source>O(log n). Delete an element from a set.</source>
          <target state="translated">O(log n).Borrar un elemento de un conjunto.</target>
        </trans-unit>
        <trans-unit id="98588a699ab0e3cc2a4f0d4bbcd31fb1d80ddf49" translate="yes" xml:space="preserve">
          <source>O(log n). Delete and find the maximal element.</source>
          <target state="translated">O(log n).Borrar y encontrar el elemento máximo.</target>
        </trans-unit>
        <trans-unit id="eac58fe63b635fd9efb58cab5645157886d37625" translate="yes" xml:space="preserve">
          <source>O(log n). Delete and find the minimal element.</source>
          <target state="translated">O(log n).Borrar y encontrar el elemento mínimo.</target>
        </trans-unit>
        <trans-unit id="ad05ba71f70f9da853eda0a89025664664c4b775" translate="yes" xml:space="preserve">
          <source>O(log n). Delete the element at &lt;em&gt;index&lt;/em&gt;, i.e. by its zero-based index in the sequence sorted by keys. If the &lt;em&gt;index&lt;/em&gt; is out of range (less than zero, greater or equal to &lt;code&gt;&lt;a href=&quot;data-map-lazy#v:size&quot;&gt;size&lt;/a&gt;&lt;/code&gt; of the map), &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/prelude#v:error&quot;&gt;error&lt;/a&gt;&lt;/code&gt; is called.</source>
          <target state="translated">O (log n). Elimina el elemento en el &lt;em&gt;&amp;iacute;ndice&lt;/em&gt; , es decir, por su &amp;iacute;ndice de base cero en la secuencia ordenada por claves. Si el &lt;em&gt;&amp;iacute;ndice&lt;/em&gt; est&amp;aacute; fuera de rango (menor que cero, mayor o igual al &lt;code&gt;&lt;a href=&quot;data-map-lazy#v:size&quot;&gt;size&lt;/a&gt;&lt;/code&gt; del mapa), se llama a &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/prelude#v:error&quot;&gt;error&lt;/a&gt;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="e7f7fed812ef039db05e196ba266ae87718acd16" translate="yes" xml:space="preserve">
          <source>O(log n). Delete the element at &lt;em&gt;index&lt;/em&gt;, i.e. by its zero-based index in the sequence sorted by keys. If the &lt;em&gt;index&lt;/em&gt; is out of range (less than zero, greater or equal to &lt;code&gt;&lt;a href=&quot;data-map-lazy#v:size&quot;&gt;size&lt;/a&gt;&lt;/code&gt; of the map), &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/prelude#v:error&quot;&gt;error&lt;/a&gt;&lt;/code&gt; is called.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5ccf48cd92d13cac8e374bba9a57309c8e08857e" translate="yes" xml:space="preserve">
          <source>O(log n). Delete the element at &lt;em&gt;index&lt;/em&gt;, i.e. by its zero-based index in the sequence sorted by keys. If the &lt;em&gt;index&lt;/em&gt; is out of range (less than zero, greater or equal to &lt;code&gt;&lt;a href=&quot;data-map-strict#v:size&quot;&gt;size&lt;/a&gt;&lt;/code&gt; of the map), &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/prelude#v:error&quot;&gt;error&lt;/a&gt;&lt;/code&gt; is called.</source>
          <target state="translated">O (log n). Elimina el elemento en el &lt;em&gt;&amp;iacute;ndice&lt;/em&gt; , es decir, por su &amp;iacute;ndice de base cero en la secuencia ordenada por claves. Si el &lt;em&gt;&amp;iacute;ndice&lt;/em&gt; est&amp;aacute; fuera de rango (menor que cero, mayor o igual al &lt;code&gt;&lt;a href=&quot;data-map-strict#v:size&quot;&gt;size&lt;/a&gt;&lt;/code&gt; del mapa), se llama a &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/prelude#v:error&quot;&gt;error&lt;/a&gt;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="00d853000d2e6488565da714b0b5292fda5a441b" translate="yes" xml:space="preserve">
          <source>O(log n). Delete the element at &lt;em&gt;index&lt;/em&gt;, i.e. by its zero-based index in the sequence sorted by keys. If the &lt;em&gt;index&lt;/em&gt; is out of range (less than zero, greater or equal to &lt;code&gt;&lt;a href=&quot;data-map-strict#v:size&quot;&gt;size&lt;/a&gt;&lt;/code&gt; of the map), &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/prelude#v:error&quot;&gt;error&lt;/a&gt;&lt;/code&gt; is called.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a138b763f5bcf0b11954e6535ff11ce808241082" translate="yes" xml:space="preserve">
          <source>O(log n). Delete the element at &lt;em&gt;index&lt;/em&gt;, i.e. by its zero-based index in the sorted sequence of elements. If the &lt;em&gt;index&lt;/em&gt; is out of range (less than zero, greater or equal to &lt;code&gt;&lt;a href=&quot;data-set#v:size&quot;&gt;size&lt;/a&gt;&lt;/code&gt; of the set), &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/prelude#v:error&quot;&gt;error&lt;/a&gt;&lt;/code&gt; is called.</source>
          <target state="translated">O (log n). Elimine el elemento en el &lt;em&gt;&amp;iacute;ndice&lt;/em&gt; , es decir, por su &amp;iacute;ndice de base cero en la secuencia ordenada de elementos. Si el &lt;em&gt;&amp;iacute;ndice&lt;/em&gt; est&amp;aacute; fuera de rango (menor que cero, mayor o igual al &lt;code&gt;&lt;a href=&quot;data-set#v:size&quot;&gt;size&lt;/a&gt;&lt;/code&gt; del conjunto), se llama &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/prelude#v:error&quot;&gt;error&lt;/a&gt;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="8f9a841e263ec111559da27eabf9406d1a540729" translate="yes" xml:space="preserve">
          <source>O(log n). Delete the element at &lt;em&gt;index&lt;/em&gt;, i.e. by its zero-based index in the sorted sequence of elements. If the &lt;em&gt;index&lt;/em&gt; is out of range (less than zero, greater or equal to &lt;code&gt;&lt;a href=&quot;data-set#v:size&quot;&gt;size&lt;/a&gt;&lt;/code&gt; of the set), &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/prelude#v:error&quot;&gt;error&lt;/a&gt;&lt;/code&gt; is called.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="181c5af60bcb54ac4f811d680b11d508307933a1" translate="yes" xml:space="preserve">
          <source>O(log n). Delete the maximal element. Returns an empty set if the set is empty.</source>
          <target state="translated">O(log n).Borre el elemento máximo.Devuelve un conjunto vacío si el conjunto está vacío.</target>
        </trans-unit>
        <trans-unit id="6790550db3234f37cf6493f7b1535c713a09ba76" translate="yes" xml:space="preserve">
          <source>O(log n). Delete the maximal key. Returns an empty map if the map is empty.</source>
          <target state="translated">O(log n).Borre la tecla de máximo.Devuelve un mapa vacío si el mapa está vacío.</target>
        </trans-unit>
        <trans-unit id="fbc32aa53e2a4a6369d4d9562f6deeabf28ae8e7" translate="yes" xml:space="preserve">
          <source>O(log n). Delete the minimal element. Returns an empty set if the set is empty.</source>
          <target state="translated">O(log n).Eliminar el elemento mínimo.Devuelve un conjunto vacío si el conjunto está vacío.</target>
        </trans-unit>
        <trans-unit id="7cf4d523f99138c238ea157a7e88da884c96423d" translate="yes" xml:space="preserve">
          <source>O(log n). Delete the minimal key. Returns an empty map if the map is empty.</source>
          <target state="translated">O(log n).Borre la tecla mínima.Devuelve un mapa vacío si el mapa está vacío.</target>
        </trans-unit>
        <trans-unit id="94dc59b450b55ade9833343f711d54182224fe30" translate="yes" xml:space="preserve">
          <source>O(log n). Divide a map at the point where a predicate on the keys stops holding. The user is responsible for ensuring that for all keys &lt;code&gt;j&lt;/code&gt; and &lt;code&gt;k&lt;/code&gt; in the map, &lt;code&gt;j &amp;lt; k ==&amp;gt; p j &amp;gt;= p k&lt;/code&gt;.</source>
          <target state="translated">O (log n). Divida un mapa en el punto donde un predicado de las claves deja de ser v&amp;aacute;lido. El usuario es responsable de asegurarse de que para todas las claves &lt;code&gt;j&lt;/code&gt; y &lt;code&gt;k&lt;/code&gt; en el mapa, &lt;code&gt;j &amp;lt; k ==&amp;gt; p j &amp;gt;= p k&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="19c7a4f5123369243555c207001e5355651809c6" translate="yes" xml:space="preserve">
          <source>O(log n). Divide a set at the point where a predicate on the elements stops holding. The user is responsible for ensuring that for all elements &lt;code&gt;j&lt;/code&gt; and &lt;code&gt;k&lt;/code&gt; in the set, &lt;code&gt;j &amp;lt; k ==&amp;gt; p j &amp;gt;= p k&lt;/code&gt;.</source>
          <target state="translated">O (log n). Divida un conjunto en el punto donde un predicado sobre los elementos deja de ser v&amp;aacute;lido. El usuario es responsable de asegurarse de que para todos los elementos &lt;code&gt;j&lt;/code&gt; y &lt;code&gt;k&lt;/code&gt; del conjunto, &lt;code&gt;j &amp;lt; k ==&amp;gt; p j &amp;gt;= p k&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="dbbe96dbb3f910804916b2bf6b9f9c4a00de96df" translate="yes" xml:space="preserve">
          <source>O(log n). Drop while a predicate on the elements holds. The user is responsible for ensuring that for all elements &lt;code&gt;j&lt;/code&gt; and &lt;code&gt;k&lt;/code&gt; in the set, &lt;code&gt;j &amp;lt; k ==&amp;gt; p j &amp;gt;= p k&lt;/code&gt;. See note at &lt;code&gt;&lt;a href=&quot;data-set#v:spanAntitone&quot;&gt;spanAntitone&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">O (log n). Suelta mientras se mantiene un predicado sobre los elementos. El usuario es responsable de asegurarse de que para todos los elementos &lt;code&gt;j&lt;/code&gt; y &lt;code&gt;k&lt;/code&gt; del conjunto, &lt;code&gt;j &amp;lt; k ==&amp;gt; p j &amp;gt;= p k&lt;/code&gt; . Consulte la nota en &lt;code&gt;&lt;a href=&quot;data-set#v:spanAntitone&quot;&gt;spanAntitone&lt;/a&gt;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="6bd8dcfa2cd7fed4471d0799d179b6297b9a6ff9" translate="yes" xml:space="preserve">
          <source>O(log n). Drop while a predicate on the keys holds. The user is responsible for ensuring that for all keys &lt;code&gt;j&lt;/code&gt; and &lt;code&gt;k&lt;/code&gt; in the map, &lt;code&gt;j &amp;lt; k ==&amp;gt; p j &amp;gt;= p k&lt;/code&gt;. See note at &lt;code&gt;&lt;a href=&quot;data-map-lazy#v:spanAntitone&quot;&gt;spanAntitone&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">O (log n). Suelta mientras se mantiene un predicado en las claves. El usuario es responsable de asegurarse de que para todas las claves &lt;code&gt;j&lt;/code&gt; y &lt;code&gt;k&lt;/code&gt; en el mapa, &lt;code&gt;j &amp;lt; k ==&amp;gt; p j &amp;gt;= p k&lt;/code&gt; . Consulte la nota en &lt;code&gt;&lt;a href=&quot;data-map-lazy#v:spanAntitone&quot;&gt;spanAntitone&lt;/a&gt;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="4d73a626bb138826eaf0b30feaf1a52a50743ef7" translate="yes" xml:space="preserve">
          <source>O(log n). Drop while a predicate on the keys holds. The user is responsible for ensuring that for all keys &lt;code&gt;j&lt;/code&gt; and &lt;code&gt;k&lt;/code&gt; in the map, &lt;code&gt;j &amp;lt; k ==&amp;gt; p j &amp;gt;= p k&lt;/code&gt;. See note at &lt;code&gt;&lt;a href=&quot;data-map-strict#v:spanAntitone&quot;&gt;spanAntitone&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">O (log n). Suelta mientras se mantiene un predicado en las claves. El usuario es responsable de asegurarse de que para todas las claves &lt;code&gt;j&lt;/code&gt; y &lt;code&gt;k&lt;/code&gt; en el mapa, &lt;code&gt;j &amp;lt; k ==&amp;gt; p j &amp;gt;= p k&lt;/code&gt; . Consulte la nota en &lt;code&gt;&lt;a href=&quot;data-map-strict#v:spanAntitone&quot;&gt;spanAntitone&lt;/a&gt;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="c054a90bcde9445ceb0ad65d2d81dbd0a79070e9" translate="yes" xml:space="preserve">
          <source>O(log n). Find largest element smaller or equal to the given one.</source>
          <target state="translated">O(log n).Encuentra el elemento más grande más pequeño o igual al dado.</target>
        </trans-unit>
        <trans-unit id="22f8c5d39b35a0c1903faaf4fd9bdc6b957bdd68" translate="yes" xml:space="preserve">
          <source>O(log n). Find largest element smaller than the given one.</source>
          <target state="translated">O(log n).Encuentra el elemento más grande más pequeño que el dado.</target>
        </trans-unit>
        <trans-unit id="c54f0ae11eb14d8371f7752243637479199282c4" translate="yes" xml:space="preserve">
          <source>O(log n). Find largest key smaller or equal to the given one and return the corresponding (key, value) pair.</source>
          <target state="translated">O(log n).Encuentra la clave más grande menor o igual a la dada y devuelve el par correspondiente (clave,valor).</target>
        </trans-unit>
        <trans-unit id="0cbd5435f7e27980c116ae0cbf1bec62916dab0d" translate="yes" xml:space="preserve">
          <source>O(log n). Find largest key smaller than the given one and return the corresponding (key, value) pair.</source>
          <target state="translated">O(log n).Encuentra la clave más grande más pequeña que la dada y devuelve el par correspondiente (clave,valor).</target>
        </trans-unit>
        <trans-unit id="c166cc88a9061a0faff568068500fac730cd1814" translate="yes" xml:space="preserve">
          <source>O(log n). Find smallest element greater or equal to the given one.</source>
          <target state="translated">O(log n).Encuentra el elemento más pequeño mayor o igual al dado.</target>
        </trans-unit>
        <trans-unit id="bcbb0a2e40a67b635be36d431f43d2ffa11e95eb" translate="yes" xml:space="preserve">
          <source>O(log n). Find smallest element greater than the given one.</source>
          <target state="translated">O(log n).Encuentra el elemento más pequeño más grande que el dado.</target>
        </trans-unit>
        <trans-unit id="386ffcb6cfe6b3ab23a2c54a241fdf164b8c87d1" translate="yes" xml:space="preserve">
          <source>O(log n). Find smallest key greater or equal to the given one and return the corresponding (key, value) pair.</source>
          <target state="translated">O(log n).Encuentra la clave más pequeña mayor o igual a la dada y devuelve el par correspondiente (clave,valor).</target>
        </trans-unit>
        <trans-unit id="03c25e8e40b24a17f03f0806610d599831aae84f" translate="yes" xml:space="preserve">
          <source>O(log n). Find smallest key greater than the given one and return the corresponding (key, value) pair.</source>
          <target state="translated">O(log n).Encuentra la clave más pequeña mayor que la dada y devuelve el par correspondiente (clave,valor).</target>
        </trans-unit>
        <trans-unit id="e819bde42f73b70f2dee6f1c39d4f04065803ccc" translate="yes" xml:space="preserve">
          <source>O(log n). Find the value at a key. Calls &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/prelude#v:error&quot;&gt;error&lt;/a&gt;&lt;/code&gt; when the element can not be found.</source>
          <target state="translated">O (log n). Encuentre el valor en una clave. Llama a &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/prelude#v:error&quot;&gt;error&lt;/a&gt;&lt;/code&gt; cuando no se puede encontrar el elemento.</target>
        </trans-unit>
        <trans-unit id="7a29ed5f140634a473e81aab082456f838115e19" translate="yes" xml:space="preserve">
          <source>O(log n). Find the value at a key. Calls &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/prelude#v:error&quot;&gt;error&lt;/a&gt;&lt;/code&gt; when the element can not be found.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="07ab75822ed89103eda7f1e92a96f10c32286f07" translate="yes" xml:space="preserve">
          <source>O(log n). Find the value at a key. Returns &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-maybe#v:Nothing&quot;&gt;Nothing&lt;/a&gt;&lt;/code&gt; when the element can not be found.</source>
          <target state="translated">O (log n). Encuentre el valor en una clave. Devuelve &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-maybe#v:Nothing&quot;&gt;Nothing&lt;/a&gt;&lt;/code&gt; cuando no se puede encontrar el elemento.</target>
        </trans-unit>
        <trans-unit id="6542c4c5766a217c317b3b982892f57870e29732" translate="yes" xml:space="preserve">
          <source>O(log n). Find the value at a key. Returns &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-maybe#v:Nothing&quot;&gt;Nothing&lt;/a&gt;&lt;/code&gt; when the element can not be found.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="019ca7975312c117efa851704f554fc877e21e48" translate="yes" xml:space="preserve">
          <source>O(log n). Insert a new key and value in the map. If the key is already present in the map, the associated value is replaced with the supplied value. &lt;code&gt;&lt;a href=&quot;data-map-lazy#v:insert&quot;&gt;insert&lt;/a&gt;&lt;/code&gt; is equivalent to &lt;code&gt;&lt;a href=&quot;data-map-lazy#v:insertWith&quot;&gt;insertWith&lt;/a&gt; &lt;a href=&quot;../base-4.13.0.0/data-function#v:const&quot;&gt;const&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">O (log n). Inserte una nueva clave y valor en el mapa. Si la clave ya est&amp;aacute; presente en el mapa, el valor asociado se reemplaza con el valor proporcionado. &lt;code&gt;&lt;a href=&quot;data-map-lazy#v:insert&quot;&gt;insert&lt;/a&gt;&lt;/code&gt; es equivalente a &lt;code&gt;&lt;a href=&quot;data-map-lazy#v:insertWith&quot;&gt;insertWith&lt;/a&gt; &lt;a href=&quot;../base-4.13.0.0/data-function#v:const&quot;&gt;const&lt;/a&gt;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="890e69b546d584fa2e7719c610c759ce20bf11db" translate="yes" xml:space="preserve">
          <source>O(log n). Insert a new key and value in the map. If the key is already present in the map, the associated value is replaced with the supplied value. &lt;code&gt;&lt;a href=&quot;data-map-lazy#v:insert&quot;&gt;insert&lt;/a&gt;&lt;/code&gt; is equivalent to &lt;code&gt;&lt;a href=&quot;data-map-lazy#v:insertWith&quot;&gt;insertWith&lt;/a&gt; &lt;a href=&quot;../base-4.14.1.0/data-function#v:const&quot;&gt;const&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d93122902b3ce42539585f883cb3a58a5a2492dd" translate="yes" xml:space="preserve">
          <source>O(log n). Insert a new key and value in the map. If the key is already present in the map, the associated value is replaced with the supplied value. &lt;code&gt;&lt;a href=&quot;data-map-strict#v:insert&quot;&gt;insert&lt;/a&gt;&lt;/code&gt; is equivalent to &lt;code&gt;&lt;a href=&quot;data-map-strict#v:insertWith&quot;&gt;insertWith&lt;/a&gt; &lt;a href=&quot;../base-4.13.0.0/data-function#v:const&quot;&gt;const&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">O (log n). Inserte una nueva clave y valor en el mapa. Si la clave ya est&amp;aacute; presente en el mapa, el valor asociado se reemplaza con el valor proporcionado. &lt;code&gt;&lt;a href=&quot;data-map-strict#v:insert&quot;&gt;insert&lt;/a&gt;&lt;/code&gt; es equivalente a &lt;code&gt;&lt;a href=&quot;data-map-strict#v:insertWith&quot;&gt;insertWith&lt;/a&gt; &lt;a href=&quot;../base-4.13.0.0/data-function#v:const&quot;&gt;const&lt;/a&gt;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="e45ca3a86dc47e0a048198626bad89f3a07c1167" translate="yes" xml:space="preserve">
          <source>O(log n). Insert a new key and value in the map. If the key is already present in the map, the associated value is replaced with the supplied value. &lt;code&gt;&lt;a href=&quot;data-map-strict#v:insert&quot;&gt;insert&lt;/a&gt;&lt;/code&gt; is equivalent to &lt;code&gt;&lt;a href=&quot;data-map-strict#v:insertWith&quot;&gt;insertWith&lt;/a&gt; &lt;a href=&quot;../base-4.14.1.0/data-function#v:const&quot;&gt;const&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a9aa915e14eda50a9fe587ae53fcea61f10b9eff" translate="yes" xml:space="preserve">
          <source>O(log n). Insert an element in a set. If the set already contains an element equal to the given value, it is replaced with the new value.</source>
          <target state="translated">O(log n).Insertar un elemento en un conjunto.Si el conjunto ya contiene un elemento igual al valor dado,se sustituye por el nuevo valor.</target>
        </trans-unit>
        <trans-unit id="ab30bbb0e160d85a91fb53cc20d393b681529f2c" translate="yes" xml:space="preserve">
          <source>O(log n). Insert with a function, combining key, new value and old value. &lt;code&gt;&lt;a href=&quot;data-map-lazy#v:insertWithKey&quot;&gt;insertWithKey&lt;/a&gt; f key value mp&lt;/code&gt; will insert the pair (key, value) into &lt;code&gt;mp&lt;/code&gt; if key does not exist in the map. If the key does exist, the function will insert the pair &lt;code&gt;(key,f key new_value old_value)&lt;/code&gt;. Note that the key passed to f is the same key passed to &lt;code&gt;&lt;a href=&quot;data-map-lazy#v:insertWithKey&quot;&gt;insertWithKey&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">O (log n). Insertar con una funci&amp;oacute;n, combinando clave, valor nuevo y valor antiguo. &lt;code&gt;&lt;a href=&quot;data-map-lazy#v:insertWithKey&quot;&gt;insertWithKey&lt;/a&gt; f key value mp&lt;/code&gt; insertar&amp;aacute; el par (clave, valor) en &lt;code&gt;mp&lt;/code&gt; si la clave no existe en el mapa. Si la clave existe, la funci&amp;oacute;n insertar&amp;aacute; el par &lt;code&gt;(key,f key new_value old_value)&lt;/code&gt; . Tenga en cuenta que la clave que se pasa af es la misma que se pasa a &lt;code&gt;&lt;a href=&quot;data-map-lazy#v:insertWithKey&quot;&gt;insertWithKey&lt;/a&gt;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="d3eb71411ee6d48888bcea43d4a1ea6a30107c13" translate="yes" xml:space="preserve">
          <source>O(log n). Insert with a function, combining key, new value and old value. &lt;code&gt;&lt;a href=&quot;data-map-strict#v:insertWithKey&quot;&gt;insertWithKey&lt;/a&gt; f key value mp&lt;/code&gt; will insert the pair (key, value) into &lt;code&gt;mp&lt;/code&gt; if key does not exist in the map. If the key does exist, the function will insert the pair &lt;code&gt;(key,f key new_value old_value)&lt;/code&gt;. Note that the key passed to f is the same key passed to &lt;code&gt;&lt;a href=&quot;data-map-strict#v:insertWithKey&quot;&gt;insertWithKey&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">O (log n). Insertar con una funci&amp;oacute;n, combinando clave, valor nuevo y valor antiguo. &lt;code&gt;&lt;a href=&quot;data-map-strict#v:insertWithKey&quot;&gt;insertWithKey&lt;/a&gt; f key value mp&lt;/code&gt; insertar&amp;aacute; el par (clave, valor) en &lt;code&gt;mp&lt;/code&gt; si la clave no existe en el mapa. Si la clave existe, la funci&amp;oacute;n insertar&amp;aacute; el par &lt;code&gt;(key,f key new_value old_value)&lt;/code&gt; . Tenga en cuenta que la clave que se pasa af es la misma que se pasa a &lt;code&gt;&lt;a href=&quot;data-map-strict#v:insertWithKey&quot;&gt;insertWithKey&lt;/a&gt;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="c303e9e33583ca10d0311eaa78b1ec3836d2ba66" translate="yes" xml:space="preserve">
          <source>O(log n). Insert with a function, combining new value and old value. &lt;code&gt;&lt;a href=&quot;data-map-lazy#v:insertWith&quot;&gt;insertWith&lt;/a&gt; f key value mp&lt;/code&gt; will insert the pair (key, value) into &lt;code&gt;mp&lt;/code&gt; if key does not exist in the map. If the key does exist, the function will insert the pair &lt;code&gt;(key, f new_value old_value)&lt;/code&gt;.</source>
          <target state="translated">O (log n). Insertar con una funci&amp;oacute;n, combinando valor nuevo y valor antiguo. &lt;code&gt;&lt;a href=&quot;data-map-lazy#v:insertWith&quot;&gt;insertWith&lt;/a&gt; f key value mp&lt;/code&gt; insertar&amp;aacute; el par (clave, valor) en &lt;code&gt;mp&lt;/code&gt; si la clave no existe en el mapa. Si la clave existe, la funci&amp;oacute;n insertar&amp;aacute; el par &lt;code&gt;(key, f new_value old_value)&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="ab99c304a7c1bc44b47fcc76ff24ddeaf74a156a" translate="yes" xml:space="preserve">
          <source>O(log n). Insert with a function, combining new value and old value. &lt;code&gt;&lt;a href=&quot;data-map-strict#v:insertWith&quot;&gt;insertWith&lt;/a&gt; f key value mp&lt;/code&gt; will insert the pair (key, value) into &lt;code&gt;mp&lt;/code&gt; if key does not exist in the map. If the key does exist, the function will insert the pair &lt;code&gt;(key, f new_value old_value)&lt;/code&gt;.</source>
          <target state="translated">O (log n). Insertar con una funci&amp;oacute;n, combinando valor nuevo y valor antiguo. &lt;code&gt;&lt;a href=&quot;data-map-strict#v:insertWith&quot;&gt;insertWith&lt;/a&gt; f key value mp&lt;/code&gt; insertar&amp;aacute; el par (clave, valor) en &lt;code&gt;mp&lt;/code&gt; si la clave no existe en el mapa. Si la clave existe, la funci&amp;oacute;n insertar&amp;aacute; el par &lt;code&gt;(key, f new_value old_value)&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="7909b1a215db48e576d94f06d2ca092625d11dc3" translate="yes" xml:space="preserve">
          <source>O(log n). Is the element in the set?</source>
          <target state="translated">O(log n).¿Está el elemento en el conjunto?</target>
        </trans-unit>
        <trans-unit id="1d6a5e97e24e7c1a5f6a2e7f2bf174b2b039a516" translate="yes" xml:space="preserve">
          <source>O(log n). Is the element not in the set?</source>
          <target state="translated">O(log n).¿No está el elemento en el conjunto?</target>
        </trans-unit>
        <trans-unit id="93420e251bb522f3edff5b61e4bb4755f20fb04a" translate="yes" xml:space="preserve">
          <source>O(log n). Is the key a member of the map? See also &lt;code&gt;&lt;a href=&quot;data-map-lazy#v:notMember&quot;&gt;notMember&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">O (log n). &amp;iquest;La clave es un miembro del mapa? V&amp;eacute;ase tambi&amp;eacute;n &lt;code&gt;&lt;a href=&quot;data-map-lazy#v:notMember&quot;&gt;notMember&lt;/a&gt;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="d02b6dd90232b232e1c2539a783ea56f43e6f101" translate="yes" xml:space="preserve">
          <source>O(log n). Is the key a member of the map? See also &lt;code&gt;&lt;a href=&quot;data-map-strict#v:notMember&quot;&gt;notMember&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">O (log n). &amp;iquest;La clave es un miembro del mapa? V&amp;eacute;ase tambi&amp;eacute;n &lt;code&gt;&lt;a href=&quot;data-map-strict#v:notMember&quot;&gt;notMember&lt;/a&gt;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="d1fe4f566babb2256607c6aaa79cb42b8b841988" translate="yes" xml:space="preserve">
          <source>O(log n). Is the key not a member of the map? See also &lt;code&gt;&lt;a href=&quot;data-map-lazy#v:member&quot;&gt;member&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">O (log n). &amp;iquest;La llave no es miembro del mapa? V&amp;eacute;ase tambi&amp;eacute;n &lt;code&gt;&lt;a href=&quot;data-map-lazy#v:member&quot;&gt;member&lt;/a&gt;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="8c288a50f28e510d77952c813c670527c9a0633c" translate="yes" xml:space="preserve">
          <source>O(log n). Is the key not a member of the map? See also &lt;code&gt;&lt;a href=&quot;data-map-strict#v:member&quot;&gt;member&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">O (log n). &amp;iquest;La llave no es miembro del mapa? V&amp;eacute;ase tambi&amp;eacute;n &lt;code&gt;&lt;a href=&quot;data-map-strict#v:member&quot;&gt;member&lt;/a&gt;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="02d7390e74de7c336333d4a8a806077372bb35a3" translate="yes" xml:space="preserve">
          <source>O(log n). Lookup and update. See also &lt;code&gt;&lt;a href=&quot;data-map-lazy#v:updateWithKey&quot;&gt;updateWithKey&lt;/a&gt;&lt;/code&gt;. The function returns changed value, if it is updated. Returns the original key value if the map entry is deleted.</source>
          <target state="translated">O (log n). B&amp;uacute;squeda y actualizaci&amp;oacute;n. Consulte tambi&amp;eacute;n &lt;code&gt;&lt;a href=&quot;data-map-lazy#v:updateWithKey&quot;&gt;updateWithKey&lt;/a&gt;&lt;/code&gt; . La funci&amp;oacute;n devuelve el valor cambiado, si se actualiza. Devuelve el valor de clave original si se elimina la entrada del mapa.</target>
        </trans-unit>
        <trans-unit id="f481f2fd72b729ff1ff3b6f8cc827e854467c4de" translate="yes" xml:space="preserve">
          <source>O(log n). Lookup and update. See also &lt;code&gt;&lt;a href=&quot;data-map-strict#v:updateWithKey&quot;&gt;updateWithKey&lt;/a&gt;&lt;/code&gt;. The function returns changed value, if it is updated. Returns the original key value if the map entry is deleted.</source>
          <target state="translated">O (log n). B&amp;uacute;squeda y actualizaci&amp;oacute;n. Consulte tambi&amp;eacute;n &lt;code&gt;&lt;a href=&quot;data-map-strict#v:updateWithKey&quot;&gt;updateWithKey&lt;/a&gt;&lt;/code&gt; . La funci&amp;oacute;n devuelve el valor cambiado, si se actualiza. Devuelve el valor de clave original si se elimina la entrada del mapa.</target>
        </trans-unit>
        <trans-unit id="baf2102b1f382e0a669f93c4b9db2a7e8dd36c72" translate="yes" xml:space="preserve">
          <source>O(log n). Lookup the &lt;em&gt;index&lt;/em&gt; of a key, which is its zero-based index in the sequence sorted by keys. The index is a number from &lt;em&gt;0&lt;/em&gt; up to, but not including, the &lt;code&gt;&lt;a href=&quot;data-map-lazy#v:size&quot;&gt;size&lt;/a&gt;&lt;/code&gt; of the map.</source>
          <target state="translated">O (log n). Busque el &lt;em&gt;&amp;iacute;ndice&lt;/em&gt; de una clave, que es su &amp;iacute;ndice de base cero en la secuencia ordenada por claves. El &amp;iacute;ndice es un n&amp;uacute;mero desde &lt;em&gt;0&lt;/em&gt; hasta, pero sin incluir, el &lt;code&gt;&lt;a href=&quot;data-map-lazy#v:size&quot;&gt;size&lt;/a&gt;&lt;/code&gt; del mapa.</target>
        </trans-unit>
        <trans-unit id="56d8a61798fd9cbe0182cb2ae5cc0279469f8c7a" translate="yes" xml:space="preserve">
          <source>O(log n). Lookup the &lt;em&gt;index&lt;/em&gt; of a key, which is its zero-based index in the sequence sorted by keys. The index is a number from &lt;em&gt;0&lt;/em&gt; up to, but not including, the &lt;code&gt;&lt;a href=&quot;data-map-strict#v:size&quot;&gt;size&lt;/a&gt;&lt;/code&gt; of the map.</source>
          <target state="translated">O (log n). Busque el &lt;em&gt;&amp;iacute;ndice&lt;/em&gt; de una clave, que es su &amp;iacute;ndice de base cero en la secuencia ordenada por claves. El &amp;iacute;ndice es un n&amp;uacute;mero desde &lt;em&gt;0&lt;/em&gt; hasta, pero sin incluir, el &lt;code&gt;&lt;a href=&quot;data-map-strict#v:size&quot;&gt;size&lt;/a&gt;&lt;/code&gt; del mapa.</target>
        </trans-unit>
        <trans-unit id="17038d38b7c384c30f26ac44610a872b0c457a98" translate="yes" xml:space="preserve">
          <source>O(log n). Lookup the &lt;em&gt;index&lt;/em&gt; of an element, which is its zero-based index in the sorted sequence of elements. The index is a number from &lt;em&gt;0&lt;/em&gt; up to, but not including, the &lt;code&gt;&lt;a href=&quot;data-set#v:size&quot;&gt;size&lt;/a&gt;&lt;/code&gt; of the set.</source>
          <target state="translated">O (log n). Busque el &lt;em&gt;&amp;iacute;ndice&lt;/em&gt; de un elemento, que es su &amp;iacute;ndice de base cero en la secuencia ordenada de elementos. El &amp;iacute;ndice es un n&amp;uacute;mero desde &lt;em&gt;0&lt;/em&gt; hasta, pero sin incluir, el &lt;code&gt;&lt;a href=&quot;data-set#v:size&quot;&gt;size&lt;/a&gt;&lt;/code&gt; del conjunto.</target>
        </trans-unit>
        <trans-unit id="3c0961dee65d18050a044e97e8e4b95713c11b54" translate="yes" xml:space="preserve">
          <source>O(log n). Lookup the value at a key in the map.</source>
          <target state="translated">O(log n).Busca el valor en una clave del mapa.</target>
        </trans-unit>
        <trans-unit id="ca99e4520ea2482791017e12374e93c86c40626a" translate="yes" xml:space="preserve">
          <source>O(log n). Performs a &lt;code&gt;&lt;a href=&quot;data-set#v:split&quot;&gt;split&lt;/a&gt;&lt;/code&gt; but also returns whether the pivot element was found in the original set.</source>
          <target state="translated">O (log n). Realiza una &lt;code&gt;&lt;a href=&quot;data-set#v:split&quot;&gt;split&lt;/a&gt;&lt;/code&gt; pero tambi&amp;eacute;n devuelve si el elemento pivote se encontr&amp;oacute; en el conjunto original.</target>
        </trans-unit>
        <trans-unit id="5ca1b7273b4b039c8f02f3f6db3eb71e4cee1c3a" translate="yes" xml:space="preserve">
          <source>O(log n). Retrieve an element by its &lt;em&gt;index&lt;/em&gt;, i.e. by its zero-based index in the sequence sorted by keys. If the &lt;em&gt;index&lt;/em&gt; is out of range (less than zero, greater or equal to &lt;code&gt;&lt;a href=&quot;data-map-lazy#v:size&quot;&gt;size&lt;/a&gt;&lt;/code&gt; of the map), &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/prelude#v:error&quot;&gt;error&lt;/a&gt;&lt;/code&gt; is called.</source>
          <target state="translated">O (log n). Recupere un elemento por su &lt;em&gt;&amp;iacute;ndice&lt;/em&gt; , es decir, por su &amp;iacute;ndice de base cero en la secuencia ordenada por claves. Si el &lt;em&gt;&amp;iacute;ndice&lt;/em&gt; est&amp;aacute; fuera de rango (menor que cero, mayor o igual al &lt;code&gt;&lt;a href=&quot;data-map-lazy#v:size&quot;&gt;size&lt;/a&gt;&lt;/code&gt; del mapa), se llama a &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/prelude#v:error&quot;&gt;error&lt;/a&gt;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="0fbd20ba1e097e2fe919cb7c9f861d0705b5de7f" translate="yes" xml:space="preserve">
          <source>O(log n). Retrieve an element by its &lt;em&gt;index&lt;/em&gt;, i.e. by its zero-based index in the sequence sorted by keys. If the &lt;em&gt;index&lt;/em&gt; is out of range (less than zero, greater or equal to &lt;code&gt;&lt;a href=&quot;data-map-lazy#v:size&quot;&gt;size&lt;/a&gt;&lt;/code&gt; of the map), &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/prelude#v:error&quot;&gt;error&lt;/a&gt;&lt;/code&gt; is called.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a573df304c5cfe9d3a5e45be45f263e5d31a5416" translate="yes" xml:space="preserve">
          <source>O(log n). Retrieve an element by its &lt;em&gt;index&lt;/em&gt;, i.e. by its zero-based index in the sequence sorted by keys. If the &lt;em&gt;index&lt;/em&gt; is out of range (less than zero, greater or equal to &lt;code&gt;&lt;a href=&quot;data-map-strict#v:size&quot;&gt;size&lt;/a&gt;&lt;/code&gt; of the map), &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/prelude#v:error&quot;&gt;error&lt;/a&gt;&lt;/code&gt; is called.</source>
          <target state="translated">O (log n). Recupere un elemento por su &lt;em&gt;&amp;iacute;ndice&lt;/em&gt; , es decir, por su &amp;iacute;ndice de base cero en la secuencia ordenada por claves. Si el &lt;em&gt;&amp;iacute;ndice&lt;/em&gt; est&amp;aacute; fuera de rango (menor que cero, mayor o igual al &lt;code&gt;&lt;a href=&quot;data-map-strict#v:size&quot;&gt;size&lt;/a&gt;&lt;/code&gt; del mapa), se llama a &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/prelude#v:error&quot;&gt;error&lt;/a&gt;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="12be2fbeafb6f21b6f94c4c759c42ed698616a74" translate="yes" xml:space="preserve">
          <source>O(log n). Retrieve an element by its &lt;em&gt;index&lt;/em&gt;, i.e. by its zero-based index in the sequence sorted by keys. If the &lt;em&gt;index&lt;/em&gt; is out of range (less than zero, greater or equal to &lt;code&gt;&lt;a href=&quot;data-map-strict#v:size&quot;&gt;size&lt;/a&gt;&lt;/code&gt; of the map), &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/prelude#v:error&quot;&gt;error&lt;/a&gt;&lt;/code&gt; is called.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d2ad71696e650ca1a2af78787af00f58520298a1" translate="yes" xml:space="preserve">
          <source>O(log n). Retrieve an element by its &lt;em&gt;index&lt;/em&gt;, i.e. by its zero-based index in the sorted sequence of elements. If the &lt;em&gt;index&lt;/em&gt; is out of range (less than zero, greater or equal to &lt;code&gt;&lt;a href=&quot;data-set#v:size&quot;&gt;size&lt;/a&gt;&lt;/code&gt; of the set), &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/prelude#v:error&quot;&gt;error&lt;/a&gt;&lt;/code&gt; is called.</source>
          <target state="translated">O (log n). Recupere un elemento por su &lt;em&gt;&amp;iacute;ndice&lt;/em&gt; , es decir, por su &amp;iacute;ndice de base cero en la secuencia ordenada de elementos. Si el &lt;em&gt;&amp;iacute;ndice&lt;/em&gt; est&amp;aacute; fuera de rango (menor que cero, mayor o igual al &lt;code&gt;&lt;a href=&quot;data-set#v:size&quot;&gt;size&lt;/a&gt;&lt;/code&gt; del conjunto), se llama &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/prelude#v:error&quot;&gt;error&lt;/a&gt;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="2326a117339c8a4092a536379277568c82b40712" translate="yes" xml:space="preserve">
          <source>O(log n). Retrieve an element by its &lt;em&gt;index&lt;/em&gt;, i.e. by its zero-based index in the sorted sequence of elements. If the &lt;em&gt;index&lt;/em&gt; is out of range (less than zero, greater or equal to &lt;code&gt;&lt;a href=&quot;data-set#v:size&quot;&gt;size&lt;/a&gt;&lt;/code&gt; of the set), &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/prelude#v:error&quot;&gt;error&lt;/a&gt;&lt;/code&gt; is called.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2bf816a91eeb2d4bf3180cd5d89ea5959395f954" translate="yes" xml:space="preserve">
          <source>O(log n). Retrieves the maximal (key,value) pair of the map, and the map stripped of that element, or &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-maybe#v:Nothing&quot;&gt;Nothing&lt;/a&gt;&lt;/code&gt; if passed an empty map.</source>
          <target state="translated">O (log n). Recupera el par m&amp;aacute;ximo (clave, valor) del mapa y el mapa sin ese elemento, o &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-maybe#v:Nothing&quot;&gt;Nothing&lt;/a&gt;&lt;/code&gt; si se pasa un mapa vac&amp;iacute;o.</target>
        </trans-unit>
        <trans-unit id="ab20c62c5301461314db45506023711d692e2d4f" translate="yes" xml:space="preserve">
          <source>O(log n). Retrieves the maximal (key,value) pair of the map, and the map stripped of that element, or &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-maybe#v:Nothing&quot;&gt;Nothing&lt;/a&gt;&lt;/code&gt; if passed an empty map.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="670b9cb16dc7d6ba3c68eeb4f865f7ae1622fdcd" translate="yes" xml:space="preserve">
          <source>O(log n). Retrieves the maximal key of the set, and the set stripped of that element, or &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-maybe#v:Nothing&quot;&gt;Nothing&lt;/a&gt;&lt;/code&gt; if passed an empty set.</source>
          <target state="translated">O (log n). Recupera la clave m&amp;aacute;xima del conjunto y el conjunto despojado de ese elemento, o &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-maybe#v:Nothing&quot;&gt;Nothing&lt;/a&gt;&lt;/code&gt; si se pasa un conjunto vac&amp;iacute;o.</target>
        </trans-unit>
        <trans-unit id="f37f6d3f8c5075a1b60cbd4fe664882f1dce38ca" translate="yes" xml:space="preserve">
          <source>O(log n). Retrieves the maximal key of the set, and the set stripped of that element, or &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-maybe#v:Nothing&quot;&gt;Nothing&lt;/a&gt;&lt;/code&gt; if passed an empty set.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="39248bbdd1d8d5f568b1794c433b4789cd821c3e" translate="yes" xml:space="preserve">
          <source>O(log n). Retrieves the minimal (key,value) pair of the map, and the map stripped of that element, or &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-maybe#v:Nothing&quot;&gt;Nothing&lt;/a&gt;&lt;/code&gt; if passed an empty map.</source>
          <target state="translated">O (log n). Recupera el par m&amp;iacute;nimo (clave, valor) del mapa y el mapa sin ese elemento, o &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-maybe#v:Nothing&quot;&gt;Nothing&lt;/a&gt;&lt;/code&gt; si se pasa un mapa vac&amp;iacute;o.</target>
        </trans-unit>
        <trans-unit id="57d0e25053022ca6496d2fa589490a3a7ac91a1b" translate="yes" xml:space="preserve">
          <source>O(log n). Retrieves the minimal (key,value) pair of the map, and the map stripped of that element, or &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-maybe#v:Nothing&quot;&gt;Nothing&lt;/a&gt;&lt;/code&gt; if passed an empty map.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="057b373e366a112bdfa3ea3363432c0b6a7d59aa" translate="yes" xml:space="preserve">
          <source>O(log n). Retrieves the minimal key of the set, and the set stripped of that element, or &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-maybe#v:Nothing&quot;&gt;Nothing&lt;/a&gt;&lt;/code&gt; if passed an empty set.</source>
          <target state="translated">O (log n). Recupera la clave m&amp;iacute;nima del conjunto y el conjunto despojado de ese elemento, o &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-maybe#v:Nothing&quot;&gt;Nothing&lt;/a&gt;&lt;/code&gt; si se pasa un conjunto vac&amp;iacute;o.</target>
        </trans-unit>
        <trans-unit id="28f5487cd0685f69f928d45b77785d8acc263078" translate="yes" xml:space="preserve">
          <source>O(log n). Retrieves the minimal key of the set, and the set stripped of that element, or &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-maybe#v:Nothing&quot;&gt;Nothing&lt;/a&gt;&lt;/code&gt; if passed an empty set.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="53c8e44c2a29468317d9b7515cd93dda87f9a202" translate="yes" xml:space="preserve">
          <source>O(log n). Retrieves the value associated with maximal key of the map, and the map stripped of that element, or &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-maybe#v:Nothing&quot;&gt;Nothing&lt;/a&gt;&lt;/code&gt; if passed an empty map.</source>
          <target state="translated">O (log n). Recupera el valor asociado con la clave m&amp;aacute;xima del mapa y el mapa despojado de ese elemento, o &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-maybe#v:Nothing&quot;&gt;Nothing&lt;/a&gt;&lt;/code&gt; si se pasa un mapa vac&amp;iacute;o.</target>
        </trans-unit>
        <trans-unit id="dc498300eb0b48ca6979b9e323f3aa4cb8b6f5f7" translate="yes" xml:space="preserve">
          <source>O(log n). Retrieves the value associated with maximal key of the map, and the map stripped of that element, or &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-maybe#v:Nothing&quot;&gt;Nothing&lt;/a&gt;&lt;/code&gt; if passed an empty map.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4a615b27bb68ae386cdb67bea660c6e66528c017" translate="yes" xml:space="preserve">
          <source>O(log n). Retrieves the value associated with minimal key of the map, and the map stripped of that element, or &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-maybe#v:Nothing&quot;&gt;Nothing&lt;/a&gt;&lt;/code&gt; if passed an empty map.</source>
          <target state="translated">O (log n). Recupera el valor asociado con la clave m&amp;iacute;nima del mapa y el mapa despojado de ese elemento, o &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-maybe#v:Nothing&quot;&gt;Nothing&lt;/a&gt;&lt;/code&gt; si se pasa un mapa vac&amp;iacute;o.</target>
        </trans-unit>
        <trans-unit id="7d402f22b4b910b51607d0d0074bc0b6165af9e7" translate="yes" xml:space="preserve">
          <source>O(log n). Retrieves the value associated with minimal key of the map, and the map stripped of that element, or &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-maybe#v:Nothing&quot;&gt;Nothing&lt;/a&gt;&lt;/code&gt; if passed an empty map.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4c514295f87d1ca84ba6db8541425c2d9831917c" translate="yes" xml:space="preserve">
          <source>O(log n). Return the &lt;em&gt;index&lt;/em&gt; of a key, which is its zero-based index in the sequence sorted by keys. The index is a number from &lt;em&gt;0&lt;/em&gt; up to, but not including, the &lt;code&gt;&lt;a href=&quot;data-map-lazy#v:size&quot;&gt;size&lt;/a&gt;&lt;/code&gt; of the map. Calls &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/prelude#v:error&quot;&gt;error&lt;/a&gt;&lt;/code&gt; when the key is not a &lt;code&gt;&lt;a href=&quot;data-map-lazy#v:member&quot;&gt;member&lt;/a&gt;&lt;/code&gt; of the map.</source>
          <target state="translated">O (log n). Devuelve el &lt;em&gt;&amp;iacute;ndice&lt;/em&gt; de una clave, que es su &amp;iacute;ndice de base cero en la secuencia ordenada por claves. El &amp;iacute;ndice es un n&amp;uacute;mero desde &lt;em&gt;0&lt;/em&gt; hasta, pero sin incluir, el &lt;code&gt;&lt;a href=&quot;data-map-lazy#v:size&quot;&gt;size&lt;/a&gt;&lt;/code&gt; del mapa. Llama a &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/prelude#v:error&quot;&gt;error&lt;/a&gt;&lt;/code&gt; cuando la clave no es &lt;code&gt;&lt;a href=&quot;data-map-lazy#v:member&quot;&gt;member&lt;/a&gt;&lt;/code&gt; del mapa.</target>
        </trans-unit>
        <trans-unit id="00b84f7949c8550e7f1f977ad54b660c3cf511a5" translate="yes" xml:space="preserve">
          <source>O(log n). Return the &lt;em&gt;index&lt;/em&gt; of a key, which is its zero-based index in the sequence sorted by keys. The index is a number from &lt;em&gt;0&lt;/em&gt; up to, but not including, the &lt;code&gt;&lt;a href=&quot;data-map-lazy#v:size&quot;&gt;size&lt;/a&gt;&lt;/code&gt; of the map. Calls &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/prelude#v:error&quot;&gt;error&lt;/a&gt;&lt;/code&gt; when the key is not a &lt;code&gt;&lt;a href=&quot;data-map-lazy#v:member&quot;&gt;member&lt;/a&gt;&lt;/code&gt; of the map.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="82c21566259dfcedc27a229f682291b87f887697" translate="yes" xml:space="preserve">
          <source>O(log n). Return the &lt;em&gt;index&lt;/em&gt; of a key, which is its zero-based index in the sequence sorted by keys. The index is a number from &lt;em&gt;0&lt;/em&gt; up to, but not including, the &lt;code&gt;&lt;a href=&quot;data-map-strict#v:size&quot;&gt;size&lt;/a&gt;&lt;/code&gt; of the map. Calls &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/prelude#v:error&quot;&gt;error&lt;/a&gt;&lt;/code&gt; when the key is not a &lt;code&gt;&lt;a href=&quot;data-map-strict#v:member&quot;&gt;member&lt;/a&gt;&lt;/code&gt; of the map.</source>
          <target state="translated">O (log n). Devuelve el &lt;em&gt;&amp;iacute;ndice&lt;/em&gt; de una clave, que es su &amp;iacute;ndice de base cero en la secuencia ordenada por claves. El &amp;iacute;ndice es un n&amp;uacute;mero desde &lt;em&gt;0&lt;/em&gt; hasta, pero sin incluir, el &lt;code&gt;&lt;a href=&quot;data-map-strict#v:size&quot;&gt;size&lt;/a&gt;&lt;/code&gt; del mapa. Llama a &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/prelude#v:error&quot;&gt;error&lt;/a&gt;&lt;/code&gt; cuando la clave no es &lt;code&gt;&lt;a href=&quot;data-map-strict#v:member&quot;&gt;member&lt;/a&gt;&lt;/code&gt; del mapa.</target>
        </trans-unit>
        <trans-unit id="920b06814f65fd62b5599b99138b38ad4ba8276d" translate="yes" xml:space="preserve">
          <source>O(log n). Return the &lt;em&gt;index&lt;/em&gt; of a key, which is its zero-based index in the sequence sorted by keys. The index is a number from &lt;em&gt;0&lt;/em&gt; up to, but not including, the &lt;code&gt;&lt;a href=&quot;data-map-strict#v:size&quot;&gt;size&lt;/a&gt;&lt;/code&gt; of the map. Calls &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/prelude#v:error&quot;&gt;error&lt;/a&gt;&lt;/code&gt; when the key is not a &lt;code&gt;&lt;a href=&quot;data-map-strict#v:member&quot;&gt;member&lt;/a&gt;&lt;/code&gt; of the map.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cb6392e60e3cd19809cd08495d76c065cada91cb" translate="yes" xml:space="preserve">
          <source>O(log n). Return the &lt;em&gt;index&lt;/em&gt; of an element, which is its zero-based index in the sorted sequence of elements. The index is a number from &lt;em&gt;0&lt;/em&gt; up to, but not including, the &lt;code&gt;&lt;a href=&quot;data-set#v:size&quot;&gt;size&lt;/a&gt;&lt;/code&gt; of the set. Calls &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/prelude#v:error&quot;&gt;error&lt;/a&gt;&lt;/code&gt; when the element is not a &lt;code&gt;&lt;a href=&quot;data-set#v:member&quot;&gt;member&lt;/a&gt;&lt;/code&gt; of the set.</source>
          <target state="translated">O (log n). Devuelve el &lt;em&gt;&amp;iacute;ndice&lt;/em&gt; de un elemento, que es su &amp;iacute;ndice de base cero en la secuencia ordenada de elementos. El &amp;iacute;ndice es un n&amp;uacute;mero desde &lt;em&gt;0&lt;/em&gt; hasta, pero sin incluir, el &lt;code&gt;&lt;a href=&quot;data-set#v:size&quot;&gt;size&lt;/a&gt;&lt;/code&gt; del conjunto. Llama a &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/prelude#v:error&quot;&gt;error&lt;/a&gt;&lt;/code&gt; cuando el elemento no es &lt;code&gt;&lt;a href=&quot;data-set#v:member&quot;&gt;member&lt;/a&gt;&lt;/code&gt; del conjunto.</target>
        </trans-unit>
        <trans-unit id="2f20a6a2ebe4c1bc4356e24d4cac02373a2eab16" translate="yes" xml:space="preserve">
          <source>O(log n). Return the &lt;em&gt;index&lt;/em&gt; of an element, which is its zero-based index in the sorted sequence of elements. The index is a number from &lt;em&gt;0&lt;/em&gt; up to, but not including, the &lt;code&gt;&lt;a href=&quot;data-set#v:size&quot;&gt;size&lt;/a&gt;&lt;/code&gt; of the set. Calls &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/prelude#v:error&quot;&gt;error&lt;/a&gt;&lt;/code&gt; when the element is not a &lt;code&gt;&lt;a href=&quot;data-set#v:member&quot;&gt;member&lt;/a&gt;&lt;/code&gt; of the set.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0b39c10f5395aedc4a9107b96f66a5d8b36b5ebd" translate="yes" xml:space="preserve">
          <source>O(log n). Split a map at a particular index.</source>
          <target state="translated">O(log n).Dividir un mapa en un índice particular.</target>
        </trans-unit>
        <trans-unit id="8ef9aa443e04929c386c965b34861c97ae9e8c21" translate="yes" xml:space="preserve">
          <source>O(log n). Split a set at a particular index.</source>
          <target state="translated">O(log n).Dividir un conjunto en un índice determinado.</target>
        </trans-unit>
        <trans-unit id="4b9666d6af9c50f9ae999346b3dff678398e7d40" translate="yes" xml:space="preserve">
          <source>O(log n). Take while a predicate on the elements holds. The user is responsible for ensuring that for all elements &lt;code&gt;j&lt;/code&gt; and &lt;code&gt;k&lt;/code&gt; in the set, &lt;code&gt;j &amp;lt; k ==&amp;gt; p j &amp;gt;= p k&lt;/code&gt;. See note at &lt;code&gt;&lt;a href=&quot;data-set#v:spanAntitone&quot;&gt;spanAntitone&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">O (log n). Tome mientras se mantiene un predicado sobre los elementos. El usuario es responsable de asegurarse de que para todos los elementos &lt;code&gt;j&lt;/code&gt; y &lt;code&gt;k&lt;/code&gt; del conjunto, &lt;code&gt;j &amp;lt; k ==&amp;gt; p j &amp;gt;= p k&lt;/code&gt; . Consulte la nota en &lt;code&gt;&lt;a href=&quot;data-set#v:spanAntitone&quot;&gt;spanAntitone&lt;/a&gt;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="021166fabe5a2434a8793e0abec1bfd86c66be03" translate="yes" xml:space="preserve">
          <source>O(log n). Take while a predicate on the keys holds. The user is responsible for ensuring that for all keys &lt;code&gt;j&lt;/code&gt; and &lt;code&gt;k&lt;/code&gt; in the map, &lt;code&gt;j &amp;lt; k ==&amp;gt; p j &amp;gt;= p k&lt;/code&gt;. See note at &lt;code&gt;&lt;a href=&quot;data-map-lazy#v:spanAntitone&quot;&gt;spanAntitone&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">O (log n). Tome mientras se mantiene un predicado sobre las claves. El usuario es responsable de asegurarse de que para todas las claves &lt;code&gt;j&lt;/code&gt; y &lt;code&gt;k&lt;/code&gt; en el mapa, &lt;code&gt;j &amp;lt; k ==&amp;gt; p j &amp;gt;= p k&lt;/code&gt; . Consulte la nota en &lt;code&gt;&lt;a href=&quot;data-map-lazy#v:spanAntitone&quot;&gt;spanAntitone&lt;/a&gt;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="66a508937864d4ec6df07112c22f6f25123880b3" translate="yes" xml:space="preserve">
          <source>O(log n). Take while a predicate on the keys holds. The user is responsible for ensuring that for all keys &lt;code&gt;j&lt;/code&gt; and &lt;code&gt;k&lt;/code&gt; in the map, &lt;code&gt;j &amp;lt; k ==&amp;gt; p j &amp;gt;= p k&lt;/code&gt;. See note at &lt;code&gt;&lt;a href=&quot;data-map-strict#v:spanAntitone&quot;&gt;spanAntitone&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">O (log n). Tome mientras se mantiene un predicado sobre las claves. El usuario es responsable de asegurarse de que para todas las claves &lt;code&gt;j&lt;/code&gt; y &lt;code&gt;k&lt;/code&gt; en el mapa, &lt;code&gt;j &amp;lt; k ==&amp;gt; p j &amp;gt;= p k&lt;/code&gt; . Consulte la nota en &lt;code&gt;&lt;a href=&quot;data-map-strict#v:spanAntitone&quot;&gt;spanAntitone&lt;/a&gt;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="07985d8bb10f9ea56955aad534ec1fb0ee1ecde0" translate="yes" xml:space="preserve">
          <source>O(log n). The expression (&lt;code&gt;&lt;a href=&quot;data-intmap-lazy#v:alterF&quot;&gt;alterF&lt;/a&gt; f k map&lt;/code&gt;) alters the value &lt;code&gt;x&lt;/code&gt; at &lt;code&gt;k&lt;/code&gt;, or absence thereof. &lt;code&gt;&lt;a href=&quot;data-intmap-lazy#v:alterF&quot;&gt;alterF&lt;/a&gt;&lt;/code&gt; can be used to inspect, insert, delete, or update a value in an &lt;code&gt;&lt;a href=&quot;data-intmap-lazy#t:IntMap&quot;&gt;IntMap&lt;/a&gt;&lt;/code&gt;. In short : &lt;code&gt;&lt;a href=&quot;data-intmap-lazy#v:lookup&quot;&gt;lookup&lt;/a&gt; k &lt;a href=&quot;%24&quot;&gt;$&lt;/a&gt; &lt;a href=&quot;data-intmap-lazy#v:alterF&quot;&gt;alterF&lt;/a&gt; f k m = f
 (&lt;a href=&quot;data-intmap-lazy#v:lookup&quot;&gt;lookup&lt;/a&gt; k m)&lt;/code&gt;.</source>
          <target state="translated">O (log n). La expresi&amp;oacute;n ( &lt;code&gt;&lt;a href=&quot;data-intmap-lazy#v:alterF&quot;&gt;alterF&lt;/a&gt; f k map&lt;/code&gt; ) altera el valor &lt;code&gt;x&lt;/code&gt; en &lt;code&gt;k&lt;/code&gt; , o su ausencia. &lt;code&gt;&lt;a href=&quot;data-intmap-lazy#v:alterF&quot;&gt;alterF&lt;/a&gt;&lt;/code&gt; se puede utilizar para inspeccionar, insertar, eliminar o actualizar un valor en un &lt;code&gt;&lt;a href=&quot;data-intmap-lazy#t:IntMap&quot;&gt;IntMap&lt;/a&gt;&lt;/code&gt; . En resumen: &lt;code&gt;&lt;a href=&quot;data-intmap-lazy#v:lookup&quot;&gt;lookup&lt;/a&gt; k &lt;a href=&quot;%24&quot;&gt;$&lt;/a&gt; &lt;a href=&quot;data-intmap-lazy#v:alterF&quot;&gt;alterF&lt;/a&gt; f k m = f (&lt;a href=&quot;data-intmap-lazy#v:lookup&quot;&gt;lookup&lt;/a&gt; k m)&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="fbdb624ad922439626975a2694af40dd74323694" translate="yes" xml:space="preserve">
          <source>O(log n). The expression (&lt;code&gt;&lt;a href=&quot;data-intmap-strict#v:alterF&quot;&gt;alterF&lt;/a&gt; f k map&lt;/code&gt;) alters the value &lt;code&gt;x&lt;/code&gt; at &lt;code&gt;k&lt;/code&gt;, or absence thereof. &lt;code&gt;&lt;a href=&quot;data-intmap-strict#v:alterF&quot;&gt;alterF&lt;/a&gt;&lt;/code&gt; can be used to inspect, insert, delete, or update a value in an &lt;code&gt;&lt;a href=&quot;data-intmap-strict#t:IntMap&quot;&gt;IntMap&lt;/a&gt;&lt;/code&gt;. In short : &lt;code&gt;&lt;a href=&quot;data-intmap-strict#v:lookup&quot;&gt;lookup&lt;/a&gt; k &lt;a href=&quot;%24&quot;&gt;$&lt;/a&gt; &lt;a href=&quot;data-intmap-strict#v:alterF&quot;&gt;alterF&lt;/a&gt; f k m = f
 (&lt;a href=&quot;data-intmap-strict#v:lookup&quot;&gt;lookup&lt;/a&gt; k m)&lt;/code&gt;.</source>
          <target state="translated">O (log n). La expresi&amp;oacute;n ( &lt;code&gt;&lt;a href=&quot;data-intmap-strict#v:alterF&quot;&gt;alterF&lt;/a&gt; f k map&lt;/code&gt; ) altera el valor &lt;code&gt;x&lt;/code&gt; en &lt;code&gt;k&lt;/code&gt; , o su ausencia. &lt;code&gt;&lt;a href=&quot;data-intmap-strict#v:alterF&quot;&gt;alterF&lt;/a&gt;&lt;/code&gt; se puede utilizar para inspeccionar, insertar, eliminar o actualizar un valor en un &lt;code&gt;&lt;a href=&quot;data-intmap-strict#t:IntMap&quot;&gt;IntMap&lt;/a&gt;&lt;/code&gt; . En resumen: &lt;code&gt;&lt;a href=&quot;data-intmap-strict#v:lookup&quot;&gt;lookup&lt;/a&gt; k &lt;a href=&quot;%24&quot;&gt;$&lt;/a&gt; &lt;a href=&quot;data-intmap-strict#v:alterF&quot;&gt;alterF&lt;/a&gt; f k m = f (&lt;a href=&quot;data-intmap-strict#v:lookup&quot;&gt;lookup&lt;/a&gt; k m)&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="80800c88ab3ea5c7eeb370232e0fce4820989aaf" translate="yes" xml:space="preserve">
          <source>O(log n). The expression (&lt;code&gt;&lt;a href=&quot;data-intmap-strict-internal#v:alterF&quot;&gt;alterF&lt;/a&gt; f k map&lt;/code&gt;) alters the value &lt;code&gt;x&lt;/code&gt; at &lt;code&gt;k&lt;/code&gt;, or absence thereof. &lt;code&gt;&lt;a href=&quot;data-intmap-strict-internal#v:alterF&quot;&gt;alterF&lt;/a&gt;&lt;/code&gt; can be used to inspect, insert, delete, or update a value in an &lt;code&gt;&lt;a href=&quot;data-intmap-strict-internal#t:IntMap&quot;&gt;IntMap&lt;/a&gt;&lt;/code&gt;. In short : &lt;code&gt;&lt;a href=&quot;data-intmap-strict-internal#v:lookup&quot;&gt;lookup&lt;/a&gt; k &lt;a href=&quot;%24&quot;&gt;$&lt;/a&gt; &lt;a href=&quot;data-intmap-strict-internal#v:alterF&quot;&gt;alterF&lt;/a&gt; f k m = f
 (&lt;a href=&quot;data-intmap-strict-internal#v:lookup&quot;&gt;lookup&lt;/a&gt; k m)&lt;/code&gt;.</source>
          <target state="translated">O (log n). La expresi&amp;oacute;n ( &lt;code&gt;&lt;a href=&quot;data-intmap-strict-internal#v:alterF&quot;&gt;alterF&lt;/a&gt; f k map&lt;/code&gt; ) altera el valor &lt;code&gt;x&lt;/code&gt; en &lt;code&gt;k&lt;/code&gt; , o su ausencia. &lt;code&gt;&lt;a href=&quot;data-intmap-strict-internal#v:alterF&quot;&gt;alterF&lt;/a&gt;&lt;/code&gt; se puede utilizar para inspeccionar, insertar, eliminar o actualizar un valor en un &lt;code&gt;&lt;a href=&quot;data-intmap-strict-internal#t:IntMap&quot;&gt;IntMap&lt;/a&gt;&lt;/code&gt; . En resumen: &lt;code&gt;&lt;a href=&quot;data-intmap-strict-internal#v:lookup&quot;&gt;lookup&lt;/a&gt; k &lt;a href=&quot;%24&quot;&gt;$&lt;/a&gt; &lt;a href=&quot;data-intmap-strict-internal#v:alterF&quot;&gt;alterF&lt;/a&gt; f k m = f (&lt;a href=&quot;data-intmap-strict-internal#v:lookup&quot;&gt;lookup&lt;/a&gt; k m)&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="b17c31779999be462616440caced04e05ce795d0" translate="yes" xml:space="preserve">
          <source>O(log n). The expression (&lt;code&gt;&lt;a href=&quot;data-map-lazy#v:alter&quot;&gt;alter&lt;/a&gt; f k map&lt;/code&gt;) alters the value &lt;code&gt;x&lt;/code&gt; at &lt;code&gt;k&lt;/code&gt;, or absence thereof. &lt;code&gt;&lt;a href=&quot;data-map-lazy#v:alter&quot;&gt;alter&lt;/a&gt;&lt;/code&gt; can be used to insert, delete, or update a value in a &lt;code&gt;&lt;a href=&quot;data-map-lazy#t:Map&quot;&gt;Map&lt;/a&gt;&lt;/code&gt;. In short : &lt;code&gt;&lt;a href=&quot;data-map-lazy#v:lookup&quot;&gt;lookup&lt;/a&gt; k (&lt;a href=&quot;data-map-lazy#v:alter&quot;&gt;alter&lt;/a&gt; f k m) = f (&lt;a href=&quot;data-map-lazy#v:lookup&quot;&gt;lookup&lt;/a&gt; k m)&lt;/code&gt;.</source>
          <target state="translated">O (log n). La expresi&amp;oacute;n ( &lt;code&gt;&lt;a href=&quot;data-map-lazy#v:alter&quot;&gt;alter&lt;/a&gt; f k map&lt;/code&gt; ) altera el valor &lt;code&gt;x&lt;/code&gt; en &lt;code&gt;k&lt;/code&gt; , o su ausencia. &lt;code&gt;&lt;a href=&quot;data-map-lazy#v:alter&quot;&gt;alter&lt;/a&gt;&lt;/code&gt; se puede utilizar para insertar, eliminar o actualizar un valor en un &lt;code&gt;&lt;a href=&quot;data-map-lazy#t:Map&quot;&gt;Map&lt;/a&gt;&lt;/code&gt; . En resumen: &lt;code&gt;&lt;a href=&quot;data-map-lazy#v:lookup&quot;&gt;lookup&lt;/a&gt; k (&lt;a href=&quot;data-map-lazy#v:alter&quot;&gt;alter&lt;/a&gt; f k m) = f (&lt;a href=&quot;data-map-lazy#v:lookup&quot;&gt;lookup&lt;/a&gt; k m)&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="16a84137ad6b83c400797fa72447394c88dbd79f" translate="yes" xml:space="preserve">
          <source>O(log n). The expression (&lt;code&gt;&lt;a href=&quot;data-map-lazy#v:alterF&quot;&gt;alterF&lt;/a&gt; f k map&lt;/code&gt;) alters the value &lt;code&gt;x&lt;/code&gt; at &lt;code&gt;k&lt;/code&gt;, or absence thereof. &lt;code&gt;&lt;a href=&quot;data-map-lazy#v:alterF&quot;&gt;alterF&lt;/a&gt;&lt;/code&gt; can be used to inspect, insert, delete, or update a value in a &lt;code&gt;&lt;a href=&quot;data-map-lazy#t:Map&quot;&gt;Map&lt;/a&gt;&lt;/code&gt;. In short: &lt;code&gt;&lt;a href=&quot;data-map-lazy#v:lookup&quot;&gt;lookup&lt;/a&gt; k &amp;lt;$&amp;gt; &lt;a href=&quot;data-map-lazy#v:alterF&quot;&gt;alterF&lt;/a&gt; f k m = f
 (&lt;a href=&quot;data-map-lazy#v:lookup&quot;&gt;lookup&lt;/a&gt; k m)&lt;/code&gt;.</source>
          <target state="translated">O (log n). La expresi&amp;oacute;n ( &lt;code&gt;&lt;a href=&quot;data-map-lazy#v:alterF&quot;&gt;alterF&lt;/a&gt; f k map&lt;/code&gt; ) altera el valor &lt;code&gt;x&lt;/code&gt; en &lt;code&gt;k&lt;/code&gt; , o su ausencia. &lt;code&gt;&lt;a href=&quot;data-map-lazy#v:alterF&quot;&gt;alterF&lt;/a&gt;&lt;/code&gt; se puede utilizar para inspeccionar, insertar, eliminar o actualizar un valor en un &lt;code&gt;&lt;a href=&quot;data-map-lazy#t:Map&quot;&gt;Map&lt;/a&gt;&lt;/code&gt; . En resumen: &lt;code&gt;&lt;a href=&quot;data-map-lazy#v:lookup&quot;&gt;lookup&lt;/a&gt; k &amp;lt;$&amp;gt; &lt;a href=&quot;data-map-lazy#v:alterF&quot;&gt;alterF&lt;/a&gt; f k m = f (&lt;a href=&quot;data-map-lazy#v:lookup&quot;&gt;lookup&lt;/a&gt; k m)&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="846cee8bfff2febb81f9991ef0df69c4e96a54dd" translate="yes" xml:space="preserve">
          <source>O(log n). The expression (&lt;code&gt;&lt;a href=&quot;data-map-lazy#v:split&quot;&gt;split&lt;/a&gt; k map&lt;/code&gt;) is a pair &lt;code&gt;(map1,map2)&lt;/code&gt; where the keys in &lt;code&gt;map1&lt;/code&gt; are smaller than &lt;code&gt;k&lt;/code&gt; and the keys in &lt;code&gt;map2&lt;/code&gt; larger than &lt;code&gt;k&lt;/code&gt;. Any key equal to &lt;code&gt;k&lt;/code&gt; is found in neither &lt;code&gt;map1&lt;/code&gt; nor &lt;code&gt;map2&lt;/code&gt;.</source>
          <target state="translated">O (log n). La expresi&amp;oacute;n ( &lt;code&gt;&lt;a href=&quot;data-map-lazy#v:split&quot;&gt;split&lt;/a&gt; k map&lt;/code&gt; ) es un par &lt;code&gt;(map1,map2)&lt;/code&gt; donde las claves en &lt;code&gt;map1&lt;/code&gt; son m&amp;aacute;s peque&amp;ntilde;as que &lt;code&gt;k&lt;/code&gt; y las claves en &lt;code&gt;map2&lt;/code&gt; m&amp;aacute;s grandes que &lt;code&gt;k&lt;/code&gt; . Cualquier clave igual &lt;code&gt;k&lt;/code&gt; se encuentra ni en &lt;code&gt;map1&lt;/code&gt; ni en &lt;code&gt;map2&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="4cf60d3defa4a074751ebaa4b78e7d45e27cd485" translate="yes" xml:space="preserve">
          <source>O(log n). The expression (&lt;code&gt;&lt;a href=&quot;data-map-lazy#v:splitLookup&quot;&gt;splitLookup&lt;/a&gt; k map&lt;/code&gt;) splits a map just like &lt;code&gt;&lt;a href=&quot;data-map-lazy#v:split&quot;&gt;split&lt;/a&gt;&lt;/code&gt; but also returns &lt;code&gt;&lt;a href=&quot;data-map-lazy#v:lookup&quot;&gt;lookup&lt;/a&gt; k map&lt;/code&gt;.</source>
          <target state="translated">O (log n). La expresi&amp;oacute;n ( &lt;code&gt;&lt;a href=&quot;data-map-lazy#v:splitLookup&quot;&gt;splitLookup&lt;/a&gt; k map&lt;/code&gt; ) divide un mapa como &lt;code&gt;&lt;a href=&quot;data-map-lazy#v:split&quot;&gt;split&lt;/a&gt;&lt;/code&gt; pero tambi&amp;eacute;n devuelve &lt;code&gt;&lt;a href=&quot;data-map-lazy#v:lookup&quot;&gt;lookup&lt;/a&gt; k map&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="77dc05af812457fc6d20ad1d8d76485e45c9e5c9" translate="yes" xml:space="preserve">
          <source>O(log n). The expression (&lt;code&gt;&lt;a href=&quot;data-map-lazy#v:update&quot;&gt;update&lt;/a&gt; f k map&lt;/code&gt;) updates the value &lt;code&gt;x&lt;/code&gt; at &lt;code&gt;k&lt;/code&gt; (if it is in the map). If (&lt;code&gt;f x&lt;/code&gt;) is &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-maybe#v:Nothing&quot;&gt;Nothing&lt;/a&gt;&lt;/code&gt;, the element is deleted. If it is (&lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-maybe#v:Just&quot;&gt;Just&lt;/a&gt; y&lt;/code&gt;), the key &lt;code&gt;k&lt;/code&gt; is bound to the new value &lt;code&gt;y&lt;/code&gt;.</source>
          <target state="translated">O (log n). La expresi&amp;oacute;n ( &lt;code&gt;&lt;a href=&quot;data-map-lazy#v:update&quot;&gt;update&lt;/a&gt; f k map&lt;/code&gt; ) actualiza el valor &lt;code&gt;x&lt;/code&gt; en &lt;code&gt;k&lt;/code&gt; (si est&amp;aacute; en el mapa). Si ( &lt;code&gt;f x&lt;/code&gt; ) es &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-maybe#v:Nothing&quot;&gt;Nothing&lt;/a&gt;&lt;/code&gt; , el elemento se elimina. Si es ( &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-maybe#v:Just&quot;&gt;Just&lt;/a&gt; y&lt;/code&gt; ), la clave &lt;code&gt;k&lt;/code&gt; est&amp;aacute; vinculada al nuevo valor &lt;code&gt;y&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="e071fcb00978659fb7e585f91e7fe4d40c01e8b7" translate="yes" xml:space="preserve">
          <source>O(log n). The expression (&lt;code&gt;&lt;a href=&quot;data-map-lazy#v:update&quot;&gt;update&lt;/a&gt; f k map&lt;/code&gt;) updates the value &lt;code&gt;x&lt;/code&gt; at &lt;code&gt;k&lt;/code&gt; (if it is in the map). If (&lt;code&gt;f x&lt;/code&gt;) is &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-maybe#v:Nothing&quot;&gt;Nothing&lt;/a&gt;&lt;/code&gt;, the element is deleted. If it is (&lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-maybe#v:Just&quot;&gt;Just&lt;/a&gt; y&lt;/code&gt;), the key &lt;code&gt;k&lt;/code&gt; is bound to the new value &lt;code&gt;y&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0f5bcaeee0bb1b7163dcc0a43971989cf3a9392c" translate="yes" xml:space="preserve">
          <source>O(log n). The expression (&lt;code&gt;&lt;a href=&quot;data-map-lazy#v:updateWithKey&quot;&gt;updateWithKey&lt;/a&gt; f k map&lt;/code&gt;) updates the value &lt;code&gt;x&lt;/code&gt; at &lt;code&gt;k&lt;/code&gt; (if it is in the map). If (&lt;code&gt;f k x&lt;/code&gt;) is &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-maybe#v:Nothing&quot;&gt;Nothing&lt;/a&gt;&lt;/code&gt;, the element is deleted. If it is (&lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-maybe#v:Just&quot;&gt;Just&lt;/a&gt; y&lt;/code&gt;), the key &lt;code&gt;k&lt;/code&gt; is bound to the new value &lt;code&gt;y&lt;/code&gt;.</source>
          <target state="translated">O (log n). La expresi&amp;oacute;n ( &lt;code&gt;&lt;a href=&quot;data-map-lazy#v:updateWithKey&quot;&gt;updateWithKey&lt;/a&gt; f k map&lt;/code&gt; ) actualiza el valor &lt;code&gt;x&lt;/code&gt; en &lt;code&gt;k&lt;/code&gt; (si est&amp;aacute; en el mapa). Si ( &lt;code&gt;f k x&lt;/code&gt; ) es &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-maybe#v:Nothing&quot;&gt;Nothing&lt;/a&gt;&lt;/code&gt; , el elemento se elimina. Si es ( &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-maybe#v:Just&quot;&gt;Just&lt;/a&gt; y&lt;/code&gt; ), la clave &lt;code&gt;k&lt;/code&gt; est&amp;aacute; vinculada al nuevo valor &lt;code&gt;y&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="1bfe4775eb26ffd0f1c6afadf6bad0f091fa542f" translate="yes" xml:space="preserve">
          <source>O(log n). The expression (&lt;code&gt;&lt;a href=&quot;data-map-lazy#v:updateWithKey&quot;&gt;updateWithKey&lt;/a&gt; f k map&lt;/code&gt;) updates the value &lt;code&gt;x&lt;/code&gt; at &lt;code&gt;k&lt;/code&gt; (if it is in the map). If (&lt;code&gt;f k x&lt;/code&gt;) is &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-maybe#v:Nothing&quot;&gt;Nothing&lt;/a&gt;&lt;/code&gt;, the element is deleted. If it is (&lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-maybe#v:Just&quot;&gt;Just&lt;/a&gt; y&lt;/code&gt;), the key &lt;code&gt;k&lt;/code&gt; is bound to the new value &lt;code&gt;y&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="420200fe54e3b7064bf01736dbaed8c7fc822039" translate="yes" xml:space="preserve">
          <source>O(log n). The expression (&lt;code&gt;&lt;a href=&quot;data-map-strict#v:alter&quot;&gt;alter&lt;/a&gt; f k map&lt;/code&gt;) alters the value &lt;code&gt;x&lt;/code&gt; at &lt;code&gt;k&lt;/code&gt;, or absence thereof. &lt;code&gt;&lt;a href=&quot;data-map-strict#v:alter&quot;&gt;alter&lt;/a&gt;&lt;/code&gt; can be used to insert, delete, or update a value in a &lt;code&gt;&lt;a href=&quot;data-map-strict#t:Map&quot;&gt;Map&lt;/a&gt;&lt;/code&gt;. In short : &lt;code&gt;&lt;a href=&quot;data-map-strict#v:lookup&quot;&gt;lookup&lt;/a&gt; k (&lt;a href=&quot;data-map-strict#v:alter&quot;&gt;alter&lt;/a&gt; f k m) = f (&lt;a href=&quot;data-map-strict#v:lookup&quot;&gt;lookup&lt;/a&gt; k m)&lt;/code&gt;.</source>
          <target state="translated">O (log n). La expresi&amp;oacute;n ( &lt;code&gt;&lt;a href=&quot;data-map-strict#v:alter&quot;&gt;alter&lt;/a&gt; f k map&lt;/code&gt; ) altera el valor &lt;code&gt;x&lt;/code&gt; en &lt;code&gt;k&lt;/code&gt; , o su ausencia. &lt;code&gt;&lt;a href=&quot;data-map-strict#v:alter&quot;&gt;alter&lt;/a&gt;&lt;/code&gt; se puede utilizar para insertar, eliminar o actualizar un valor en un &lt;code&gt;&lt;a href=&quot;data-map-strict#t:Map&quot;&gt;Map&lt;/a&gt;&lt;/code&gt; . En resumen: &lt;code&gt;&lt;a href=&quot;data-map-strict#v:lookup&quot;&gt;lookup&lt;/a&gt; k (&lt;a href=&quot;data-map-strict#v:alter&quot;&gt;alter&lt;/a&gt; f k m) = f (&lt;a href=&quot;data-map-strict#v:lookup&quot;&gt;lookup&lt;/a&gt; k m)&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="38d6b1873475d1bbf53194fdef1c62c16a8fa59f" translate="yes" xml:space="preserve">
          <source>O(log n). The expression (&lt;code&gt;&lt;a href=&quot;data-map-strict#v:alterF&quot;&gt;alterF&lt;/a&gt; f k map&lt;/code&gt;) alters the value &lt;code&gt;x&lt;/code&gt; at &lt;code&gt;k&lt;/code&gt;, or absence thereof. &lt;code&gt;&lt;a href=&quot;data-map-strict#v:alterF&quot;&gt;alterF&lt;/a&gt;&lt;/code&gt; can be used to inspect, insert, delete, or update a value in a &lt;code&gt;&lt;a href=&quot;data-map-strict#t:Map&quot;&gt;Map&lt;/a&gt;&lt;/code&gt;. In short: &lt;code&gt;&lt;a href=&quot;data-map-strict#v:lookup&quot;&gt;lookup&lt;/a&gt; k &amp;lt;$&amp;gt; &lt;a href=&quot;data-map-strict#v:alterF&quot;&gt;alterF&lt;/a&gt; f k m = f (&lt;a href=&quot;data-map-strict#v:lookup&quot;&gt;lookup&lt;/a&gt; k m)&lt;/code&gt;.</source>
          <target state="translated">O (log n). La expresi&amp;oacute;n ( &lt;code&gt;&lt;a href=&quot;data-map-strict#v:alterF&quot;&gt;alterF&lt;/a&gt; f k map&lt;/code&gt; ) altera el valor &lt;code&gt;x&lt;/code&gt; en &lt;code&gt;k&lt;/code&gt; , o su ausencia. &lt;code&gt;&lt;a href=&quot;data-map-strict#v:alterF&quot;&gt;alterF&lt;/a&gt;&lt;/code&gt; se puede utilizar para inspeccionar, insertar, eliminar o actualizar un valor en un &lt;code&gt;&lt;a href=&quot;data-map-strict#t:Map&quot;&gt;Map&lt;/a&gt;&lt;/code&gt; . En resumen: &lt;code&gt;&lt;a href=&quot;data-map-strict#v:lookup&quot;&gt;lookup&lt;/a&gt; k &amp;lt;$&amp;gt; &lt;a href=&quot;data-map-strict#v:alterF&quot;&gt;alterF&lt;/a&gt; f k m = f (&lt;a href=&quot;data-map-strict#v:lookup&quot;&gt;lookup&lt;/a&gt; k m)&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="8844772ffce9d1bdf37c3fbbe1c5d36447bbca81" translate="yes" xml:space="preserve">
          <source>O(log n). The expression (&lt;code&gt;&lt;a href=&quot;data-map-strict#v:split&quot;&gt;split&lt;/a&gt; k map&lt;/code&gt;) is a pair &lt;code&gt;(map1,map2)&lt;/code&gt; where the keys in &lt;code&gt;map1&lt;/code&gt; are smaller than &lt;code&gt;k&lt;/code&gt; and the keys in &lt;code&gt;map2&lt;/code&gt; larger than &lt;code&gt;k&lt;/code&gt;. Any key equal to &lt;code&gt;k&lt;/code&gt; is found in neither &lt;code&gt;map1&lt;/code&gt; nor &lt;code&gt;map2&lt;/code&gt;.</source>
          <target state="translated">O (log n). La expresi&amp;oacute;n ( &lt;code&gt;&lt;a href=&quot;data-map-strict#v:split&quot;&gt;split&lt;/a&gt; k map&lt;/code&gt; ) es un par &lt;code&gt;(map1,map2)&lt;/code&gt; donde las claves en &lt;code&gt;map1&lt;/code&gt; son m&amp;aacute;s peque&amp;ntilde;as que &lt;code&gt;k&lt;/code&gt; y las claves en &lt;code&gt;map2&lt;/code&gt; m&amp;aacute;s grandes que &lt;code&gt;k&lt;/code&gt; . Cualquier clave igual &lt;code&gt;k&lt;/code&gt; se encuentra ni en &lt;code&gt;map1&lt;/code&gt; ni en &lt;code&gt;map2&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="4bce83bccf119db7643fd19957e649f5abd26420" translate="yes" xml:space="preserve">
          <source>O(log n). The expression (&lt;code&gt;&lt;a href=&quot;data-map-strict#v:splitLookup&quot;&gt;splitLookup&lt;/a&gt; k map&lt;/code&gt;) splits a map just like &lt;code&gt;&lt;a href=&quot;data-map-strict#v:split&quot;&gt;split&lt;/a&gt;&lt;/code&gt; but also returns &lt;code&gt;&lt;a href=&quot;data-map-strict#v:lookup&quot;&gt;lookup&lt;/a&gt; k map&lt;/code&gt;.</source>
          <target state="translated">O (log n). La expresi&amp;oacute;n ( &lt;code&gt;&lt;a href=&quot;data-map-strict#v:splitLookup&quot;&gt;splitLookup&lt;/a&gt; k map&lt;/code&gt; ) divide un mapa como &lt;code&gt;&lt;a href=&quot;data-map-strict#v:split&quot;&gt;split&lt;/a&gt;&lt;/code&gt; pero tambi&amp;eacute;n devuelve &lt;code&gt;&lt;a href=&quot;data-map-strict#v:lookup&quot;&gt;lookup&lt;/a&gt; k map&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="141cb5e7031d13ae3e5d38b593828d3e953ace06" translate="yes" xml:space="preserve">
          <source>O(log n). The expression (&lt;code&gt;&lt;a href=&quot;data-map-strict#v:update&quot;&gt;update&lt;/a&gt; f k map&lt;/code&gt;) updates the value &lt;code&gt;x&lt;/code&gt; at &lt;code&gt;k&lt;/code&gt; (if it is in the map). If (&lt;code&gt;f x&lt;/code&gt;) is &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-maybe#v:Nothing&quot;&gt;Nothing&lt;/a&gt;&lt;/code&gt;, the element is deleted. If it is (&lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-maybe#v:Just&quot;&gt;Just&lt;/a&gt; y&lt;/code&gt;), the key &lt;code&gt;k&lt;/code&gt; is bound to the new value &lt;code&gt;y&lt;/code&gt;.</source>
          <target state="translated">O (log n). La expresi&amp;oacute;n ( &lt;code&gt;&lt;a href=&quot;data-map-strict#v:update&quot;&gt;update&lt;/a&gt; f k map&lt;/code&gt; ) actualiza el valor &lt;code&gt;x&lt;/code&gt; en &lt;code&gt;k&lt;/code&gt; (si est&amp;aacute; en el mapa). Si ( &lt;code&gt;f x&lt;/code&gt; ) es &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-maybe#v:Nothing&quot;&gt;Nothing&lt;/a&gt;&lt;/code&gt; , el elemento se elimina. Si es ( &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-maybe#v:Just&quot;&gt;Just&lt;/a&gt; y&lt;/code&gt; ), la clave &lt;code&gt;k&lt;/code&gt; est&amp;aacute; vinculada al nuevo valor &lt;code&gt;y&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="a2692f0fd9895bf6c576908bd72eefd3cd73bfa6" translate="yes" xml:space="preserve">
          <source>O(log n). The expression (&lt;code&gt;&lt;a href=&quot;data-map-strict#v:update&quot;&gt;update&lt;/a&gt; f k map&lt;/code&gt;) updates the value &lt;code&gt;x&lt;/code&gt; at &lt;code&gt;k&lt;/code&gt; (if it is in the map). If (&lt;code&gt;f x&lt;/code&gt;) is &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-maybe#v:Nothing&quot;&gt;Nothing&lt;/a&gt;&lt;/code&gt;, the element is deleted. If it is (&lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-maybe#v:Just&quot;&gt;Just&lt;/a&gt; y&lt;/code&gt;), the key &lt;code&gt;k&lt;/code&gt; is bound to the new value &lt;code&gt;y&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="942fcde6574fd0bf1dadaa061f06747e7027860b" translate="yes" xml:space="preserve">
          <source>O(log n). The expression (&lt;code&gt;&lt;a href=&quot;data-map-strict#v:updateWithKey&quot;&gt;updateWithKey&lt;/a&gt; f k map&lt;/code&gt;) updates the value &lt;code&gt;x&lt;/code&gt; at &lt;code&gt;k&lt;/code&gt; (if it is in the map). If (&lt;code&gt;f k x&lt;/code&gt;) is &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-maybe#v:Nothing&quot;&gt;Nothing&lt;/a&gt;&lt;/code&gt;, the element is deleted. If it is (&lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-maybe#v:Just&quot;&gt;Just&lt;/a&gt; y&lt;/code&gt;), the key &lt;code&gt;k&lt;/code&gt; is bound to the new value &lt;code&gt;y&lt;/code&gt;.</source>
          <target state="translated">O (log n). La expresi&amp;oacute;n ( &lt;code&gt;&lt;a href=&quot;data-map-strict#v:updateWithKey&quot;&gt;updateWithKey&lt;/a&gt; f k map&lt;/code&gt; ) actualiza el valor &lt;code&gt;x&lt;/code&gt; en &lt;code&gt;k&lt;/code&gt; (si est&amp;aacute; en el mapa). Si ( &lt;code&gt;f k x&lt;/code&gt; ) es &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-maybe#v:Nothing&quot;&gt;Nothing&lt;/a&gt;&lt;/code&gt; , el elemento se elimina. Si es ( &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-maybe#v:Just&quot;&gt;Just&lt;/a&gt; y&lt;/code&gt; ), la clave &lt;code&gt;k&lt;/code&gt; est&amp;aacute; vinculada al nuevo valor &lt;code&gt;y&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="d439c820104fa4df32198f00d041eb334f2ee252" translate="yes" xml:space="preserve">
          <source>O(log n). The expression (&lt;code&gt;&lt;a href=&quot;data-map-strict#v:updateWithKey&quot;&gt;updateWithKey&lt;/a&gt; f k map&lt;/code&gt;) updates the value &lt;code&gt;x&lt;/code&gt; at &lt;code&gt;k&lt;/code&gt; (if it is in the map). If (&lt;code&gt;f k x&lt;/code&gt;) is &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-maybe#v:Nothing&quot;&gt;Nothing&lt;/a&gt;&lt;/code&gt;, the element is deleted. If it is (&lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-maybe#v:Just&quot;&gt;Just&lt;/a&gt; y&lt;/code&gt;), the key &lt;code&gt;k&lt;/code&gt; is bound to the new value &lt;code&gt;y&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0083ce39eafea25bc1eb434d4710802b4b9b9434" translate="yes" xml:space="preserve">
          <source>O(log n). The expression (&lt;code&gt;&lt;a href=&quot;data-set#v:split&quot;&gt;split&lt;/a&gt; x set&lt;/code&gt;) is a pair &lt;code&gt;(set1,set2)&lt;/code&gt; where &lt;code&gt;set1&lt;/code&gt; comprises the elements of &lt;code&gt;set&lt;/code&gt; less than &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;set2&lt;/code&gt; comprises the elements of &lt;code&gt;set&lt;/code&gt; greater than &lt;code&gt;x&lt;/code&gt;.</source>
          <target state="translated">O (log n). La expresi&amp;oacute;n ( &lt;code&gt;&lt;a href=&quot;data-set#v:split&quot;&gt;split&lt;/a&gt; x set&lt;/code&gt; ) es un par &lt;code&gt;(set1,set2)&lt;/code&gt; donde &lt;code&gt;set1&lt;/code&gt; comprende los elementos del &lt;code&gt;set&lt;/code&gt; menor que &lt;code&gt;x&lt;/code&gt; y &lt;code&gt;set2&lt;/code&gt; comprende los elementos del &lt;code&gt;set&lt;/code&gt; mayor que &lt;code&gt;x&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="f59e471908c0cb769e323ded7451edf88824d17a" translate="yes" xml:space="preserve">
          <source>O(log n). The expression &lt;code&gt;(&lt;a href=&quot;data-map-lazy#v:findWithDefault&quot;&gt;findWithDefault&lt;/a&gt; def k map)&lt;/code&gt; returns the value at key &lt;code&gt;k&lt;/code&gt; or returns default value &lt;code&gt;def&lt;/code&gt; when the key is not in the map.</source>
          <target state="translated">O (log n). La expresi&amp;oacute;n &lt;code&gt;(&lt;a href=&quot;data-map-lazy#v:findWithDefault&quot;&gt;findWithDefault&lt;/a&gt; def k map)&lt;/code&gt; devuelve el valor en la tecla &lt;code&gt;k&lt;/code&gt; o devuelve el valor predeterminado &lt;code&gt;def&lt;/code&gt; cuando la clave no est&amp;aacute; en el mapa.</target>
        </trans-unit>
        <trans-unit id="1b8eabb149549a5a4f5aa89de7316f9295fe5642" translate="yes" xml:space="preserve">
          <source>O(log n). The expression &lt;code&gt;(&lt;a href=&quot;data-map-strict#v:findWithDefault&quot;&gt;findWithDefault&lt;/a&gt; def k map)&lt;/code&gt; returns the value at key &lt;code&gt;k&lt;/code&gt; or returns default value &lt;code&gt;def&lt;/code&gt; when the key is not in the map.</source>
          <target state="translated">O (log n). La expresi&amp;oacute;n &lt;code&gt;(&lt;a href=&quot;data-map-strict#v:findWithDefault&quot;&gt;findWithDefault&lt;/a&gt; def k map)&lt;/code&gt; devuelve el valor en la tecla &lt;code&gt;k&lt;/code&gt; o devuelve el valor predeterminado &lt;code&gt;def&lt;/code&gt; cuando la clave no est&amp;aacute; en el mapa.</target>
        </trans-unit>
        <trans-unit id="8b7902cec921dd561cb2e74c422b1f566ccb6fc1" translate="yes" xml:space="preserve">
          <source>O(log n). The maximal element of a set.</source>
          <target state="translated">O(log n).El elemento máximo de un conjunto.</target>
        </trans-unit>
        <trans-unit id="d0dba945940bf77a9f8546f5e8d6bc56c10244fa" translate="yes" xml:space="preserve">
          <source>O(log n). The maximal key of the map. Returns &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-maybe#v:Nothing&quot;&gt;Nothing&lt;/a&gt;&lt;/code&gt; if the map is empty.</source>
          <target state="translated">O (log n). La clave m&amp;aacute;xima del mapa. Devuelve &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-maybe#v:Nothing&quot;&gt;Nothing&lt;/a&gt;&lt;/code&gt; si el mapa est&amp;aacute; vac&amp;iacute;o.</target>
        </trans-unit>
        <trans-unit id="17a9cd4dbc2d223856f51279a9d165a4d08158e6" translate="yes" xml:space="preserve">
          <source>O(log n). The maximal key of the map. Returns &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-maybe#v:Nothing&quot;&gt;Nothing&lt;/a&gt;&lt;/code&gt; if the map is empty.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="31e29493e9815e34f81908db72301e0f9af6f2e1" translate="yes" xml:space="preserve">
          <source>O(log n). The minimal element of a set.</source>
          <target state="translated">O(log n).El elemento mínimo de un conjunto.</target>
        </trans-unit>
        <trans-unit id="75bf53779ddd197f25d637059702a3c3edcf89b6" translate="yes" xml:space="preserve">
          <source>O(log n). The minimal key of the map. Calls &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/prelude#v:error&quot;&gt;error&lt;/a&gt;&lt;/code&gt; if the map is empty.</source>
          <target state="translated">O (log n). La clave m&amp;iacute;nima del mapa. Llama a &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/prelude#v:error&quot;&gt;error&lt;/a&gt;&lt;/code&gt; si el mapa est&amp;aacute; vac&amp;iacute;o.</target>
        </trans-unit>
        <trans-unit id="5defe887cab709582327a38a9ed266771fcad21c" translate="yes" xml:space="preserve">
          <source>O(log n). The minimal key of the map. Calls &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/prelude#v:error&quot;&gt;error&lt;/a&gt;&lt;/code&gt; if the map is empty.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bc504508d7c033dfb2ffc72482be53a17cccd4ab" translate="yes" xml:space="preserve">
          <source>O(log n). The minimal key of the map. Returns &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-maybe#v:Nothing&quot;&gt;Nothing&lt;/a&gt;&lt;/code&gt; if the map is empty.</source>
          <target state="translated">O (log n). La clave m&amp;iacute;nima del mapa. Devuelve &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-maybe#v:Nothing&quot;&gt;Nothing&lt;/a&gt;&lt;/code&gt; si el mapa est&amp;aacute; vac&amp;iacute;o.</target>
        </trans-unit>
        <trans-unit id="5ffc6991b17f97549dbf273ef190d2cc99c6b07f" translate="yes" xml:space="preserve">
          <source>O(log n). The minimal key of the map. Returns &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-maybe#v:Nothing&quot;&gt;Nothing&lt;/a&gt;&lt;/code&gt; if the map is empty.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="de6297181a94307d00070168de4a757799d8df5e" translate="yes" xml:space="preserve">
          <source>O(log n). Update a value at a specific key with the result of the provided function. When the key is not a member of the map, the original map is returned.</source>
          <target state="translated">O(log n).Actualizar un valor en una tecla específica con el resultado de la función proporcionada.Cuando la tecla no es miembro del mapa,se devuelve el mapa original.</target>
        </trans-unit>
        <trans-unit id="f79b5a6aa413d4037719e05758f32c5f8ba90d30" translate="yes" xml:space="preserve">
          <source>O(log n). Update the element at &lt;em&gt;index&lt;/em&gt;, i.e. by its zero-based index in the sequence sorted by keys. If the &lt;em&gt;index&lt;/em&gt; is out of range (less than zero, greater or equal to &lt;code&gt;&lt;a href=&quot;data-map-lazy#v:size&quot;&gt;size&lt;/a&gt;&lt;/code&gt; of the map), &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/prelude#v:error&quot;&gt;error&lt;/a&gt;&lt;/code&gt; is called.</source>
          <target state="translated">O (log n). Actualice el elemento en el &lt;em&gt;&amp;iacute;ndice&lt;/em&gt; , es decir, por su &amp;iacute;ndice de base cero en la secuencia ordenada por claves. Si el &lt;em&gt;&amp;iacute;ndice&lt;/em&gt; est&amp;aacute; fuera de rango (menor que cero, mayor o igual al &lt;code&gt;&lt;a href=&quot;data-map-lazy#v:size&quot;&gt;size&lt;/a&gt;&lt;/code&gt; del mapa), se llama a &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/prelude#v:error&quot;&gt;error&lt;/a&gt;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="6930702e5d5905392f0652368b1a623f5461ec98" translate="yes" xml:space="preserve">
          <source>O(log n). Update the element at &lt;em&gt;index&lt;/em&gt;, i.e. by its zero-based index in the sequence sorted by keys. If the &lt;em&gt;index&lt;/em&gt; is out of range (less than zero, greater or equal to &lt;code&gt;&lt;a href=&quot;data-map-lazy#v:size&quot;&gt;size&lt;/a&gt;&lt;/code&gt; of the map), &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/prelude#v:error&quot;&gt;error&lt;/a&gt;&lt;/code&gt; is called.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a883eed1f0e84ad0d1adac39532f5c417c5952fd" translate="yes" xml:space="preserve">
          <source>O(log n). Update the element at &lt;em&gt;index&lt;/em&gt;. Calls &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/prelude#v:error&quot;&gt;error&lt;/a&gt;&lt;/code&gt; when an invalid index is used.</source>
          <target state="translated">O (log n). Actualice el elemento en &lt;em&gt;index&lt;/em&gt; . Llama a &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/prelude#v:error&quot;&gt;error&lt;/a&gt;&lt;/code&gt; cuando se utiliza un &amp;iacute;ndice no v&amp;aacute;lido.</target>
        </trans-unit>
        <trans-unit id="a64596e117217d108f251b2bf2ee525eed4f77d5" translate="yes" xml:space="preserve">
          <source>O(log n). Update the element at &lt;em&gt;index&lt;/em&gt;. Calls &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/prelude#v:error&quot;&gt;error&lt;/a&gt;&lt;/code&gt; when an invalid index is used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f86e8b51009be278f98c522ea044dc7efe4b0b2c" translate="yes" xml:space="preserve">
          <source>O(log n). Update the value at the maximal key.</source>
          <target state="translated">O(log n).Actualiza el valor en la clave máxima.</target>
        </trans-unit>
        <trans-unit id="925dd16a87a450286fe6e3a226b6245309317e84" translate="yes" xml:space="preserve">
          <source>O(log n). Update the value at the minimal key.</source>
          <target state="translated">O(log n).Actualice el valor en la clave mínima.</target>
        </trans-unit>
        <trans-unit id="200baab44017e862c998bed9f5a88ffe409337e0" translate="yes" xml:space="preserve">
          <source>O(log&lt;em&gt; k)&lt;/em&gt;. &lt;code&gt;&lt;a href=&quot;data-sequence#v:cycleTaking&quot;&gt;cycleTaking&lt;/a&gt; k xs&lt;/code&gt; forms a sequence of length &lt;code&gt;k&lt;/code&gt; by repeatedly concatenating &lt;code&gt;xs&lt;/code&gt; with itself. &lt;code&gt;xs&lt;/code&gt; may only be empty if &lt;code&gt;k&lt;/code&gt; is 0.</source>
          <target state="translated">O (log &lt;em&gt;k)&lt;/em&gt; . &lt;code&gt;&lt;a href=&quot;data-sequence#v:cycleTaking&quot;&gt;cycleTaking&lt;/a&gt; k xs&lt;/code&gt; forma una secuencia de longitud &lt;code&gt;k&lt;/code&gt; concatenando repetidamente &lt;code&gt;xs&lt;/code&gt; consigo mismo. &lt;code&gt;xs&lt;/code&gt; solo puede estar vac&amp;iacute;o si &lt;code&gt;k&lt;/code&gt; es 0.</target>
        </trans-unit>
        <trans-unit id="ea599e3b9adb4a817ef3358c0e6ce26510f610c8" translate="yes" xml:space="preserve">
          <source>O(m*log(n/m + 1)), m &amp;lt;= n. &lt;code&gt;(s1 `isProperSubsetOf` s2)&lt;/code&gt; indicates whether &lt;code&gt;s1&lt;/code&gt; is a proper subset of &lt;code&gt;s2&lt;/code&gt;.</source>
          <target state="translated">O (m * log (n / m + 1)), m &amp;lt;= n. &lt;code&gt;(s1 `isProperSubsetOf` s2)&lt;/code&gt; indica si &lt;code&gt;s1&lt;/code&gt; es un subconjunto adecuado de &lt;code&gt;s2&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="7f120dfe430dcf91f1806848ae0ebb84996478fd" translate="yes" xml:space="preserve">
          <source>O(m*log(n/m + 1)), m &amp;lt;= n. &lt;code&gt;(s1 `isSubsetOf` s2)&lt;/code&gt; indicates whether &lt;code&gt;s1&lt;/code&gt; is a subset of &lt;code&gt;s2&lt;/code&gt;.</source>
          <target state="translated">O (m * log (n / m + 1)), m &amp;lt;= n. &lt;code&gt;(s1 `isSubsetOf` s2)&lt;/code&gt; indica si &lt;code&gt;s1&lt;/code&gt; es un subconjunto de &lt;code&gt;s2&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="890536917eae87ea2ce9b9265523e515197ccc98" translate="yes" xml:space="preserve">
          <source>O(m*log(n/m + 1)), m &amp;lt;= n. Check whether the key sets of two maps are disjoint (i.e., their &lt;code&gt;&lt;a href=&quot;data-map-lazy#v:intersection&quot;&gt;intersection&lt;/a&gt;&lt;/code&gt; is empty).</source>
          <target state="translated">O (m * log (n / m + 1)), m &amp;lt;= n. Compruebe si los conjuntos de claves de dos mapas est&amp;aacute;n separados (es decir, su &lt;code&gt;&lt;a href=&quot;data-map-lazy#v:intersection&quot;&gt;intersection&lt;/a&gt;&lt;/code&gt; est&amp;aacute; vac&amp;iacute;a).</target>
        </trans-unit>
        <trans-unit id="56887fb99e2fa5f7d002374b35d1d1c4a254b87f" translate="yes" xml:space="preserve">
          <source>O(m*log(n/m + 1)), m &amp;lt;= n. Check whether the key sets of two maps are disjoint (i.e., their &lt;code&gt;&lt;a href=&quot;data-map-strict#v:intersection&quot;&gt;intersection&lt;/a&gt;&lt;/code&gt; is empty).</source>
          <target state="translated">O (m * log (n / m + 1)), m &amp;lt;= n. Compruebe si los conjuntos de claves de dos mapas est&amp;aacute;n separados (es decir, su &lt;code&gt;&lt;a href=&quot;data-map-strict#v:intersection&quot;&gt;intersection&lt;/a&gt;&lt;/code&gt; est&amp;aacute; vac&amp;iacute;a).</target>
        </trans-unit>
        <trans-unit id="efe7a894c2259a7792dd8fe72ad96807fe0b3199" translate="yes" xml:space="preserve">
          <source>O(m*log(n/m + 1)), m &amp;lt;= n. Check whether two sets are disjoint (i.e., their intersection is empty).</source>
          <target state="translated">O (m * log (n / m + 1)), m &amp;lt;= n. Compruebe si dos conjuntos est&amp;aacute;n separados (es decir, su intersecci&amp;oacute;n est&amp;aacute; vac&amp;iacute;a).</target>
        </trans-unit>
        <trans-unit id="d3ff11ef4eb80e41910d6fa66aca5cc33fdc13df" translate="yes" xml:space="preserve">
          <source>O(m*log(n/m + 1)), m &amp;lt;= n. Difference of two maps. Return elements of the first map not existing in the second map.</source>
          <target state="translated">O (m * log (n / m + 1)), m &amp;lt;= n. Diferencia de dos mapas. Devuelve elementos del primer mapa que no existen en el segundo mapa.</target>
        </trans-unit>
        <trans-unit id="53a7b84438e4db5ebbeef4186b723c70f40bd6d9" translate="yes" xml:space="preserve">
          <source>O(m*log(n/m + 1)), m &amp;lt;= n. Difference of two sets.</source>
          <target state="translated">O (m * log (n / m + 1)), m &amp;lt;= n. Diferencia de dos conjuntos.</target>
        </trans-unit>
        <trans-unit id="cbd2c49887d009a2c47e8b2ebb341bd0fcee38b7" translate="yes" xml:space="preserve">
          <source>O(m*log(n/m + 1)), m &amp;lt;= n. Intersection of two maps. Return data in the first map for the keys existing in both maps. (&lt;code&gt;&lt;a href=&quot;data-map-lazy#v:intersection&quot;&gt;intersection&lt;/a&gt; m1 m2 == &lt;a href=&quot;data-map-lazy#v:intersectionWith&quot;&gt;intersectionWith&lt;/a&gt; &lt;a href=&quot;../base-4.13.0.0/data-function#v:const&quot;&gt;const&lt;/a&gt; m1 m2&lt;/code&gt;).</source>
          <target state="translated">O (m * log (n / m + 1)), m &amp;lt;= n. Intersecci&amp;oacute;n de dos mapas. Devuelve datos en el primer mapa para las claves existentes en ambos mapas. ( &lt;code&gt;&lt;a href=&quot;data-map-lazy#v:intersection&quot;&gt;intersection&lt;/a&gt; m1 m2 == &lt;a href=&quot;data-map-lazy#v:intersectionWith&quot;&gt;intersectionWith&lt;/a&gt; &lt;a href=&quot;../base-4.13.0.0/data-function#v:const&quot;&gt;const&lt;/a&gt; m1 m2&lt;/code&gt; ).</target>
        </trans-unit>
        <trans-unit id="056d15b52d2db14790454c78624da8a5f3dbef97" translate="yes" xml:space="preserve">
          <source>O(m*log(n/m + 1)), m &amp;lt;= n. Intersection of two maps. Return data in the first map for the keys existing in both maps. (&lt;code&gt;&lt;a href=&quot;data-map-lazy#v:intersection&quot;&gt;intersection&lt;/a&gt; m1 m2 == &lt;a href=&quot;data-map-lazy#v:intersectionWith&quot;&gt;intersectionWith&lt;/a&gt; &lt;a href=&quot;../base-4.14.1.0/data-function#v:const&quot;&gt;const&lt;/a&gt; m1 m2&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="24384862da1da4772be95c928fa0e56cd1c26bcc" translate="yes" xml:space="preserve">
          <source>O(m*log(n/m + 1)), m &amp;lt;= n. Intersection of two maps. Return data in the first map for the keys existing in both maps. (&lt;code&gt;&lt;a href=&quot;data-map-strict#v:intersection&quot;&gt;intersection&lt;/a&gt; m1 m2 == &lt;a href=&quot;data-map-lazy#v:intersectionWith&quot;&gt;intersectionWith&lt;/a&gt; &lt;a href=&quot;../base-4.13.0.0/data-function#v:const&quot;&gt;const&lt;/a&gt; m1 m2&lt;/code&gt;).</source>
          <target state="translated">O (m * log (n / m + 1)), m &amp;lt;= n. Intersecci&amp;oacute;n de dos mapas. Devuelve datos en el primer mapa para las claves existentes en ambos mapas. ( &lt;code&gt;&lt;a href=&quot;data-map-strict#v:intersection&quot;&gt;intersection&lt;/a&gt; m1 m2 == &lt;a href=&quot;data-map-lazy#v:intersectionWith&quot;&gt;intersectionWith&lt;/a&gt; &lt;a href=&quot;../base-4.13.0.0/data-function#v:const&quot;&gt;const&lt;/a&gt; m1 m2&lt;/code&gt; ).</target>
        </trans-unit>
        <trans-unit id="f4a4d5aa0fe07824e62be14dc8acc96ac0551b0d" translate="yes" xml:space="preserve">
          <source>O(m*log(n/m + 1)), m &amp;lt;= n. Intersection of two maps. Return data in the first map for the keys existing in both maps. (&lt;code&gt;&lt;a href=&quot;data-map-strict#v:intersection&quot;&gt;intersection&lt;/a&gt; m1 m2 == &lt;a href=&quot;data-map-lazy#v:intersectionWith&quot;&gt;intersectionWith&lt;/a&gt; &lt;a href=&quot;../base-4.14.1.0/data-function#v:const&quot;&gt;const&lt;/a&gt; m1 m2&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="34ea8f6c03512981409f12bafc0cdf1ce0bce15d" translate="yes" xml:space="preserve">
          <source>O(m*log(n/m + 1)), m &amp;lt;= n. Intersection with a combining function.</source>
          <target state="translated">O (m * log (n / m + 1)), m &amp;lt;= n. Intersecci&amp;oacute;n con funci&amp;oacute;n de combinaci&amp;oacute;n.</target>
        </trans-unit>
        <trans-unit id="69726103bf86bbabc6383796a766f72732440e39" translate="yes" xml:space="preserve">
          <source>O(m*log(n/m + 1)), m &amp;lt;= n. Is this a proper submap? (ie. a submap but not equal). Defined as (&lt;code&gt;&lt;a href=&quot;data-map-lazy#v:isProperSubmapOf&quot;&gt;isProperSubmapOf&lt;/a&gt; = &lt;a href=&quot;data-map-lazy#v:isProperSubmapOfBy&quot;&gt;isProperSubmapOfBy&lt;/a&gt; (==)&lt;/code&gt;).</source>
          <target state="translated">O (m * log (n / m + 1)), m &amp;lt;= n. &amp;iquest;Es este un submapa adecuado? (es decir, un submapa pero no igual). Definido como ( &lt;code&gt;&lt;a href=&quot;data-map-lazy#v:isProperSubmapOf&quot;&gt;isProperSubmapOf&lt;/a&gt; = &lt;a href=&quot;data-map-lazy#v:isProperSubmapOfBy&quot;&gt;isProperSubmapOfBy&lt;/a&gt; (==)&lt;/code&gt; ).</target>
        </trans-unit>
        <trans-unit id="36000bd072b354123c4db326516ad04c95634c92" translate="yes" xml:space="preserve">
          <source>O(m*log(n/m + 1)), m &amp;lt;= n. Is this a proper submap? (ie. a submap but not equal). Defined as (&lt;code&gt;&lt;a href=&quot;data-map-strict#v:isProperSubmapOf&quot;&gt;isProperSubmapOf&lt;/a&gt; = &lt;a href=&quot;data-map-strict#v:isProperSubmapOfBy&quot;&gt;isProperSubmapOfBy&lt;/a&gt; (==)&lt;/code&gt;).</source>
          <target state="translated">O (m * log (n / m + 1)), m &amp;lt;= n. &amp;iquest;Es este un submapa adecuado? (es decir, un submapa pero no igual). Definido como ( &lt;code&gt;&lt;a href=&quot;data-map-strict#v:isProperSubmapOf&quot;&gt;isProperSubmapOf&lt;/a&gt; = &lt;a href=&quot;data-map-strict#v:isProperSubmapOfBy&quot;&gt;isProperSubmapOfBy&lt;/a&gt; (==)&lt;/code&gt; ).</target>
        </trans-unit>
        <trans-unit id="b8a0eb51eb1b43177a7fea9d0b7ee3d98e21e1dc" translate="yes" xml:space="preserve">
          <source>O(m*log(n/m + 1)), m &amp;lt;= n. Is this a proper submap? (ie. a submap but not equal). The expression (&lt;code&gt;&lt;a href=&quot;data-map-lazy#v:isProperSubmapOfBy&quot;&gt;isProperSubmapOfBy&lt;/a&gt; f m1 m2&lt;/code&gt;) returns &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-bool#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt; when &lt;code&gt;m1&lt;/code&gt; and &lt;code&gt;m2&lt;/code&gt; are not equal, all keys in &lt;code&gt;m1&lt;/code&gt; are in &lt;code&gt;m2&lt;/code&gt;, and when &lt;code&gt;f&lt;/code&gt; returns &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-bool#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt; when applied to their respective values. For example, the following expressions are all &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-bool#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt;:</source>
          <target state="translated">O (m * log (n / m + 1)), m &amp;lt;= n. &amp;iquest;Es este un submapa adecuado? (es decir, un submapa pero no igual). La expresi&amp;oacute;n ( &lt;code&gt;&lt;a href=&quot;data-map-lazy#v:isProperSubmapOfBy&quot;&gt;isProperSubmapOfBy&lt;/a&gt; f m1 m2&lt;/code&gt; ) devuelve &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-bool#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt; cuando &lt;code&gt;m1&lt;/code&gt; y &lt;code&gt;m2&lt;/code&gt; no son iguales, todas las claves en &lt;code&gt;m1&lt;/code&gt; est&amp;aacute;n en &lt;code&gt;m2&lt;/code&gt; y cuando &lt;code&gt;f&lt;/code&gt; devuelve &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-bool#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt; cuando se aplica a sus valores respectivos. Por ejemplo, las siguientes expresiones son todas &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-bool#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="c2597fe5698598ff44f24dc80ca926ad32a1e8e8" translate="yes" xml:space="preserve">
          <source>O(m*log(n/m + 1)), m &amp;lt;= n. Is this a proper submap? (ie. a submap but not equal). The expression (&lt;code&gt;&lt;a href=&quot;data-map-lazy#v:isProperSubmapOfBy&quot;&gt;isProperSubmapOfBy&lt;/a&gt; f m1 m2&lt;/code&gt;) returns &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-bool#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt; when &lt;code&gt;m1&lt;/code&gt; and &lt;code&gt;m2&lt;/code&gt; are not equal, all keys in &lt;code&gt;m1&lt;/code&gt; are in &lt;code&gt;m2&lt;/code&gt;, and when &lt;code&gt;f&lt;/code&gt; returns &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-bool#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt; when applied to their respective values. For example, the following expressions are all &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-bool#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="41ff11d8c423e267647b0c62c479fbb61548c9cc" translate="yes" xml:space="preserve">
          <source>O(m*log(n/m + 1)), m &amp;lt;= n. Is this a proper submap? (ie. a submap but not equal). The expression (&lt;code&gt;&lt;a href=&quot;data-map-strict#v:isProperSubmapOfBy&quot;&gt;isProperSubmapOfBy&lt;/a&gt; f m1 m2&lt;/code&gt;) returns &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-bool#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt; when &lt;code&gt;m1&lt;/code&gt; and &lt;code&gt;m2&lt;/code&gt; are not equal, all keys in &lt;code&gt;m1&lt;/code&gt; are in &lt;code&gt;m2&lt;/code&gt;, and when &lt;code&gt;f&lt;/code&gt; returns &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-bool#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt; when applied to their respective values. For example, the following expressions are all &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-bool#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt;:</source>
          <target state="translated">O (m * log (n / m + 1)), m &amp;lt;= n. &amp;iquest;Es este un submapa adecuado? (es decir, un submapa pero no igual). La expresi&amp;oacute;n ( &lt;code&gt;&lt;a href=&quot;data-map-strict#v:isProperSubmapOfBy&quot;&gt;isProperSubmapOfBy&lt;/a&gt; f m1 m2&lt;/code&gt; ) devuelve &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-bool#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt; cuando &lt;code&gt;m1&lt;/code&gt; y &lt;code&gt;m2&lt;/code&gt; no son iguales, todas las claves en &lt;code&gt;m1&lt;/code&gt; est&amp;aacute;n en &lt;code&gt;m2&lt;/code&gt; y cuando &lt;code&gt;f&lt;/code&gt; devuelve &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-bool#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt; cuando se aplica a sus valores respectivos. Por ejemplo, las siguientes expresiones son todas &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-bool#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="79472f9f58c1bfab8565789aab21ccfeff8a246a" translate="yes" xml:space="preserve">
          <source>O(m*log(n/m + 1)), m &amp;lt;= n. Is this a proper submap? (ie. a submap but not equal). The expression (&lt;code&gt;&lt;a href=&quot;data-map-strict#v:isProperSubmapOfBy&quot;&gt;isProperSubmapOfBy&lt;/a&gt; f m1 m2&lt;/code&gt;) returns &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-bool#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt; when &lt;code&gt;m1&lt;/code&gt; and &lt;code&gt;m2&lt;/code&gt; are not equal, all keys in &lt;code&gt;m1&lt;/code&gt; are in &lt;code&gt;m2&lt;/code&gt;, and when &lt;code&gt;f&lt;/code&gt; returns &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-bool#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt; when applied to their respective values. For example, the following expressions are all &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-bool#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0a9f9f93684e40fedff7b8f3d7b1d43b17fcf50e" translate="yes" xml:space="preserve">
          <source>O(m*log(n/m + 1)), m &amp;lt;= n. Remove all keys in a &lt;code&gt;&lt;a href=&quot;data-set#t:Set&quot;&gt;Set&lt;/a&gt;&lt;/code&gt; from a &lt;code&gt;&lt;a href=&quot;data-map-lazy#t:Map&quot;&gt;Map&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">O (m * log (n / m + 1)), m &amp;lt;= n. Elimina todas las claves de un &lt;code&gt;&lt;a href=&quot;data-set#t:Set&quot;&gt;Set&lt;/a&gt;&lt;/code&gt; de un &lt;code&gt;&lt;a href=&quot;data-map-lazy#t:Map&quot;&gt;Map&lt;/a&gt;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="25d1829822c2cb6940b138a4881a5d2cbd233395" translate="yes" xml:space="preserve">
          <source>O(m*log(n/m + 1)), m &amp;lt;= n. Remove all keys in a &lt;code&gt;&lt;a href=&quot;data-set#t:Set&quot;&gt;Set&lt;/a&gt;&lt;/code&gt; from a &lt;code&gt;&lt;a href=&quot;data-map-strict#t:Map&quot;&gt;Map&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">O (m * log (n / m + 1)), m &amp;lt;= n. Elimina todas las claves de un &lt;code&gt;&lt;a href=&quot;data-set#t:Set&quot;&gt;Set&lt;/a&gt;&lt;/code&gt; de un &lt;code&gt;&lt;a href=&quot;data-map-strict#t:Map&quot;&gt;Map&lt;/a&gt;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="fd19834586d78b2279282ad35c5312f23907cbb4" translate="yes" xml:space="preserve">
          <source>O(m*log(n/m + 1)), m &amp;lt;= n. Restrict a &lt;code&gt;&lt;a href=&quot;data-map-lazy#t:Map&quot;&gt;Map&lt;/a&gt;&lt;/code&gt; to only those keys found in a &lt;code&gt;&lt;a href=&quot;data-set#t:Set&quot;&gt;Set&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">O (m * log (n / m + 1)), m &amp;lt;= n. Restrinja un &lt;code&gt;&lt;a href=&quot;data-map-lazy#t:Map&quot;&gt;Map&lt;/a&gt;&lt;/code&gt; a solo las claves que se encuentran en un &lt;code&gt;&lt;a href=&quot;data-set#t:Set&quot;&gt;Set&lt;/a&gt;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="e256a2e1874ee4e88bea6e8b5d2c1038be1580bc" translate="yes" xml:space="preserve">
          <source>O(m*log(n/m + 1)), m &amp;lt;= n. Restrict a &lt;code&gt;&lt;a href=&quot;data-map-strict#t:Map&quot;&gt;Map&lt;/a&gt;&lt;/code&gt; to only those keys found in a &lt;code&gt;&lt;a href=&quot;data-set#t:Set&quot;&gt;Set&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">O (m * log (n / m + 1)), m &amp;lt;= n. Restrinja un &lt;code&gt;&lt;a href=&quot;data-map-strict#t:Map&quot;&gt;Map&lt;/a&gt;&lt;/code&gt; a solo las claves que se encuentran en un &lt;code&gt;&lt;a href=&quot;data-set#t:Set&quot;&gt;Set&lt;/a&gt;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="fc9a76b1e849784b891ff401f283438e0197cff8" translate="yes" xml:space="preserve">
          <source>O(m*log(n/m + 1)), m &amp;lt;= n. The expression (&lt;code&gt;&lt;a href=&quot;data-map-lazy#v:isSubmapOfBy&quot;&gt;isSubmapOfBy&lt;/a&gt; f t1 t2&lt;/code&gt;) returns &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-bool#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt; if all keys in &lt;code&gt;t1&lt;/code&gt; are in tree &lt;code&gt;t2&lt;/code&gt;, and when &lt;code&gt;f&lt;/code&gt; returns &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-bool#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt; when applied to their respective values. For example, the following expressions are all &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-bool#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt;:</source>
          <target state="translated">O (m * log (n / m + 1)), m &amp;lt;= n. La expresi&amp;oacute;n ( &lt;code&gt;&lt;a href=&quot;data-map-lazy#v:isSubmapOfBy&quot;&gt;isSubmapOfBy&lt;/a&gt; f t1 t2&lt;/code&gt; ) devuelve &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-bool#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt; si todas las claves en &lt;code&gt;t1&lt;/code&gt; est&amp;aacute;n en el &amp;aacute;rbol &lt;code&gt;t2&lt;/code&gt; , y cuando &lt;code&gt;f&lt;/code&gt; devuelve &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-bool#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt; cuando se aplica a sus valores respectivos. Por ejemplo, las siguientes expresiones son todas &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-bool#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="e73af8eb26516ab7a5c74efe69cd1f0d71b0b970" translate="yes" xml:space="preserve">
          <source>O(m*log(n/m + 1)), m &amp;lt;= n. The expression (&lt;code&gt;&lt;a href=&quot;data-map-lazy#v:isSubmapOfBy&quot;&gt;isSubmapOfBy&lt;/a&gt; f t1 t2&lt;/code&gt;) returns &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-bool#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt; if all keys in &lt;code&gt;t1&lt;/code&gt; are in tree &lt;code&gt;t2&lt;/code&gt;, and when &lt;code&gt;f&lt;/code&gt; returns &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-bool#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt; when applied to their respective values. For example, the following expressions are all &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-bool#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="534ba675f9e7515b5c796d43157c0f4311986cd2" translate="yes" xml:space="preserve">
          <source>O(m*log(n/m + 1)), m &amp;lt;= n. The expression (&lt;code&gt;&lt;a href=&quot;data-map-lazy#v:union&quot;&gt;union&lt;/a&gt; t1 t2&lt;/code&gt;) takes the left-biased union of &lt;code&gt;t1&lt;/code&gt; and &lt;code&gt;t2&lt;/code&gt;. It prefers &lt;code&gt;t1&lt;/code&gt; when duplicate keys are encountered, i.e. (&lt;code&gt;&lt;a href=&quot;data-map-lazy#v:union&quot;&gt;union&lt;/a&gt; == &lt;a href=&quot;data-map-lazy#v:unionWith&quot;&gt;unionWith&lt;/a&gt; &lt;a href=&quot;../base-4.13.0.0/data-function#v:const&quot;&gt;const&lt;/a&gt;&lt;/code&gt;).</source>
          <target state="translated">O (m * log (n / m + 1)), m &amp;lt;= n. La expresi&amp;oacute;n ( &lt;code&gt;&lt;a href=&quot;data-map-lazy#v:union&quot;&gt;union&lt;/a&gt; t1 t2&lt;/code&gt; ) toma la uni&amp;oacute;n sesgada a la izquierda de &lt;code&gt;t1&lt;/code&gt; y &lt;code&gt;t2&lt;/code&gt; . Prefiere &lt;code&gt;t1&lt;/code&gt; cuando se encuentran claves duplicadas, es decir ( &lt;code&gt;&lt;a href=&quot;data-map-lazy#v:union&quot;&gt;union&lt;/a&gt; == &lt;a href=&quot;data-map-lazy#v:unionWith&quot;&gt;unionWith&lt;/a&gt; &lt;a href=&quot;../base-4.13.0.0/data-function#v:const&quot;&gt;const&lt;/a&gt;&lt;/code&gt; ).</target>
        </trans-unit>
        <trans-unit id="2d934294b9dc63b5f98cc35e1da76aadd0c40908" translate="yes" xml:space="preserve">
          <source>O(m*log(n/m + 1)), m &amp;lt;= n. The expression (&lt;code&gt;&lt;a href=&quot;data-map-lazy#v:union&quot;&gt;union&lt;/a&gt; t1 t2&lt;/code&gt;) takes the left-biased union of &lt;code&gt;t1&lt;/code&gt; and &lt;code&gt;t2&lt;/code&gt;. It prefers &lt;code&gt;t1&lt;/code&gt; when duplicate keys are encountered, i.e. (&lt;code&gt;&lt;a href=&quot;data-map-lazy#v:union&quot;&gt;union&lt;/a&gt; == &lt;a href=&quot;data-map-lazy#v:unionWith&quot;&gt;unionWith&lt;/a&gt; &lt;a href=&quot;../base-4.14.1.0/data-function#v:const&quot;&gt;const&lt;/a&gt;&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7a9aac91c9f6df7e573a4f748866dd23ad70f5a7" translate="yes" xml:space="preserve">
          <source>O(m*log(n/m + 1)), m &amp;lt;= n. The expression (&lt;code&gt;&lt;a href=&quot;data-map-strict#v:isSubmapOfBy&quot;&gt;isSubmapOfBy&lt;/a&gt; f t1 t2&lt;/code&gt;) returns &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-bool#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt; if all keys in &lt;code&gt;t1&lt;/code&gt; are in tree &lt;code&gt;t2&lt;/code&gt;, and when &lt;code&gt;f&lt;/code&gt; returns &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-bool#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt; when applied to their respective values. For example, the following expressions are all &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-bool#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt;:</source>
          <target state="translated">O (m * log (n / m + 1)), m &amp;lt;= n. La expresi&amp;oacute;n ( &lt;code&gt;&lt;a href=&quot;data-map-strict#v:isSubmapOfBy&quot;&gt;isSubmapOfBy&lt;/a&gt; f t1 t2&lt;/code&gt; ) devuelve &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-bool#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt; si todas las claves en &lt;code&gt;t1&lt;/code&gt; est&amp;aacute;n en el &amp;aacute;rbol &lt;code&gt;t2&lt;/code&gt; , y cuando &lt;code&gt;f&lt;/code&gt; devuelve &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-bool#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt; cuando se aplica a sus valores respectivos. Por ejemplo, las siguientes expresiones son todas &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-bool#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="00043fa789f8c62e139acd917dd73e0ff7dc7003" translate="yes" xml:space="preserve">
          <source>O(m*log(n/m + 1)), m &amp;lt;= n. The expression (&lt;code&gt;&lt;a href=&quot;data-map-strict#v:isSubmapOfBy&quot;&gt;isSubmapOfBy&lt;/a&gt; f t1 t2&lt;/code&gt;) returns &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-bool#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt; if all keys in &lt;code&gt;t1&lt;/code&gt; are in tree &lt;code&gt;t2&lt;/code&gt;, and when &lt;code&gt;f&lt;/code&gt; returns &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-bool#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt; when applied to their respective values. For example, the following expressions are all &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-bool#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7bcae9aca1a5a3440740117a7c6753d5a42ac70d" translate="yes" xml:space="preserve">
          <source>O(m*log(n/m + 1)), m &amp;lt;= n. The expression (&lt;code&gt;&lt;a href=&quot;data-map-strict#v:union&quot;&gt;union&lt;/a&gt; t1 t2&lt;/code&gt;) takes the left-biased union of &lt;code&gt;t1&lt;/code&gt; and &lt;code&gt;t2&lt;/code&gt;. It prefers &lt;code&gt;t1&lt;/code&gt; when duplicate keys are encountered, i.e. (&lt;code&gt;&lt;a href=&quot;data-map-strict#v:union&quot;&gt;union&lt;/a&gt; == &lt;a href=&quot;data-map-lazy#v:unionWith&quot;&gt;unionWith&lt;/a&gt; &lt;a href=&quot;../base-4.13.0.0/data-function#v:const&quot;&gt;const&lt;/a&gt;&lt;/code&gt;).</source>
          <target state="translated">O (m * log (n / m + 1)), m &amp;lt;= n. La expresi&amp;oacute;n ( &lt;code&gt;&lt;a href=&quot;data-map-strict#v:union&quot;&gt;union&lt;/a&gt; t1 t2&lt;/code&gt; ) toma la uni&amp;oacute;n sesgada a la izquierda de &lt;code&gt;t1&lt;/code&gt; y &lt;code&gt;t2&lt;/code&gt; . Prefiere &lt;code&gt;t1&lt;/code&gt; cuando se encuentran claves duplicadas, es decir ( &lt;code&gt;&lt;a href=&quot;data-map-strict#v:union&quot;&gt;union&lt;/a&gt; == &lt;a href=&quot;data-map-lazy#v:unionWith&quot;&gt;unionWith&lt;/a&gt; &lt;a href=&quot;../base-4.13.0.0/data-function#v:const&quot;&gt;const&lt;/a&gt;&lt;/code&gt; ).</target>
        </trans-unit>
        <trans-unit id="59f960cbf55a76ade215c01edf87bb35054130b8" translate="yes" xml:space="preserve">
          <source>O(m*log(n/m + 1)), m &amp;lt;= n. The expression (&lt;code&gt;&lt;a href=&quot;data-map-strict#v:union&quot;&gt;union&lt;/a&gt; t1 t2&lt;/code&gt;) takes the left-biased union of &lt;code&gt;t1&lt;/code&gt; and &lt;code&gt;t2&lt;/code&gt;. It prefers &lt;code&gt;t1&lt;/code&gt; when duplicate keys are encountered, i.e. (&lt;code&gt;&lt;a href=&quot;data-map-strict#v:union&quot;&gt;union&lt;/a&gt; == &lt;a href=&quot;data-map-lazy#v:unionWith&quot;&gt;unionWith&lt;/a&gt; &lt;a href=&quot;../base-4.14.1.0/data-function#v:const&quot;&gt;const&lt;/a&gt;&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="77655267f45ca20d832ae7b9f3321daa25ed3037" translate="yes" xml:space="preserve">
          <source>O(m*log(n/m + 1)), m &amp;lt;= n. The intersection of two sets. Elements of the result come from the first set, so for example</source>
          <target state="translated">O (m * log (n / m + 1)), m &amp;lt;= n. La intersecci&amp;oacute;n de dos conjuntos. Los elementos del resultado provienen del primer conjunto, por ejemplo</target>
        </trans-unit>
        <trans-unit id="08a00bb42c6c90c9e5c8843a1c2aa2a175bffbab" translate="yes" xml:space="preserve">
          <source>O(m*log(n/m + 1)), m &amp;lt;= n. The union of two sets, preferring the first set when equal elements are encountered.</source>
          <target state="translated">O (m * log (n / m + 1)), m &amp;lt;= n. La uni&amp;oacute;n de dos conjuntos, prefiriendo el primer conjunto cuando se encuentran elementos iguales.</target>
        </trans-unit>
        <trans-unit id="7da82b28e4d04a495f59c2a184b60b979330488d" translate="yes" xml:space="preserve">
          <source>O(m*log(n/m + 1)), m &amp;lt;= n. This function is defined as (&lt;code&gt;&lt;a href=&quot;data-map-lazy#v:isSubmapOf&quot;&gt;isSubmapOf&lt;/a&gt; = &lt;a href=&quot;data-map-lazy#v:isSubmapOfBy&quot;&gt;isSubmapOfBy&lt;/a&gt; (==)&lt;/code&gt;).</source>
          <target state="translated">O (m * log (n / m + 1)), m &amp;lt;= n. Esta funci&amp;oacute;n se define como ( &lt;code&gt;&lt;a href=&quot;data-map-lazy#v:isSubmapOf&quot;&gt;isSubmapOf&lt;/a&gt; = &lt;a href=&quot;data-map-lazy#v:isSubmapOfBy&quot;&gt;isSubmapOfBy&lt;/a&gt; (==)&lt;/code&gt; ).</target>
        </trans-unit>
        <trans-unit id="b9c96074d5cb3551e1982c63637fc9bbce69706e" translate="yes" xml:space="preserve">
          <source>O(m*log(n/m + 1)), m &amp;lt;= n. This function is defined as (&lt;code&gt;&lt;a href=&quot;data-map-strict#v:isSubmapOf&quot;&gt;isSubmapOf&lt;/a&gt; = &lt;a href=&quot;data-map-strict#v:isSubmapOfBy&quot;&gt;isSubmapOfBy&lt;/a&gt; (==)&lt;/code&gt;).</source>
          <target state="translated">O (m * log (n / m + 1)), m &amp;lt;= n. Esta funci&amp;oacute;n se define como ( &lt;code&gt;&lt;a href=&quot;data-map-strict#v:isSubmapOf&quot;&gt;isSubmapOf&lt;/a&gt; = &lt;a href=&quot;data-map-strict#v:isSubmapOfBy&quot;&gt;isSubmapOfBy&lt;/a&gt; (==)&lt;/code&gt; ).</target>
        </trans-unit>
        <trans-unit id="bfe7aa725ee4ccc91810462d954d586b33b9cc38" translate="yes" xml:space="preserve">
          <source>O(m*log(n/m + 1)), m &amp;lt;= n. Union with a combining function.</source>
          <target state="translated">O (m * log (n / m + 1)), m &amp;lt;= n. Uni&amp;oacute;n con funci&amp;oacute;n combinatoria.</target>
        </trans-unit>
        <trans-unit id="6020fd5e8839684e25f87786a802a9f30819132d" translate="yes" xml:space="preserve">
          <source>O(m*log(n/m+1)), m &amp;lt;= n. See &lt;code&gt;&lt;a href=&quot;data-set#v:difference&quot;&gt;difference&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">O (m * log (n / m + 1)), m &amp;lt;= n. Vea la &lt;code&gt;&lt;a href=&quot;data-set#v:difference&quot;&gt;difference&lt;/a&gt;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="3a2e164692b82247370b4e8a0e931f51aa45499a" translate="yes" xml:space="preserve">
          <source>O(m*n) (conjectured). Calculate the Cartesian product of two sets.</source>
          <target state="translated">O(m*n)(conjetura).Calcula el producto cartesiano de dos conjuntos.</target>
        </trans-unit>
        <trans-unit id="8b99572d32d0eb232cb14bbbcad9b5a63c3e5980" translate="yes" xml:space="preserve">
          <source>O(m+n) Break a &lt;code&gt;&lt;a href=&quot;data-text#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt; into pieces separated by the first &lt;code&gt;&lt;a href=&quot;data-text#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt; argument (which cannot be empty), consuming the delimiter. An empty delimiter is invalid, and will cause an error to be raised.</source>
          <target state="translated">O (m + n) Divide un &lt;code&gt;&lt;a href=&quot;data-text#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt; en partes separadas por el primer argumento de &lt;code&gt;&lt;a href=&quot;data-text#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt; (que no puede estar vac&amp;iacute;o), consumiendo el delimitador. Un delimitador vac&amp;iacute;o no es v&amp;aacute;lido y provocar&amp;aacute; un error.</target>
        </trans-unit>
        <trans-unit id="80d9b0977be1a47fea5a2986013868ce85329037" translate="yes" xml:space="preserve">
          <source>O(m+n) Break a &lt;code&gt;&lt;a href=&quot;data-text-lazy#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt; into pieces separated by the first &lt;code&gt;&lt;a href=&quot;data-text-lazy#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt; argument (which cannot be an empty string), consuming the delimiter. An empty delimiter is invalid, and will cause an error to be raised.</source>
          <target state="translated">O (m + n) Divide un &lt;code&gt;&lt;a href=&quot;data-text-lazy#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt; en partes separadas por el primer argumento de &lt;code&gt;&lt;a href=&quot;data-text-lazy#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt; (que no puede ser una cadena vac&amp;iacute;a), consumiendo el delimitador. Un delimitador vac&amp;iacute;o no es v&amp;aacute;lido y provocar&amp;aacute; un error.</target>
        </trans-unit>
        <trans-unit id="03a6457cc617cf6a7d267b06d802753713b204fc" translate="yes" xml:space="preserve">
          <source>O(m+n) Replace every non-overlapping occurrence of &lt;code&gt;needle&lt;/code&gt; in &lt;code&gt;haystack&lt;/code&gt; with &lt;code&gt;replacement&lt;/code&gt;.</source>
          <target state="translated">O (m + n) Reemplazar cada ocurrencia no superpuesta de &lt;code&gt;needle&lt;/code&gt; en el &lt;code&gt;haystack&lt;/code&gt; con &lt;code&gt;replacement&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="96f5b347406354d571a5843dc30d08e1ec76b516" translate="yes" xml:space="preserve">
          <source>O(min(m,n)). &lt;code&gt;&lt;a href=&quot;data-list#v:zip&quot;&gt;zip&lt;/a&gt;&lt;/code&gt; takes two lists and returns a list of corresponding pairs.</source>
          <target state="translated">O (m&amp;iacute;nimo (m, n)). &lt;code&gt;&lt;a href=&quot;data-list#v:zip&quot;&gt;zip&lt;/a&gt;&lt;/code&gt; toma dos listas y devuelve una lista de pares correspondientes.</target>
        </trans-unit>
        <trans-unit id="9d3db3829ae8efa9d0433ebed5096bd49cc702e0" translate="yes" xml:space="preserve">
          <source>O(min(m,n)). &lt;code&gt;&lt;a href=&quot;data-list#v:zipWith&quot;&gt;zipWith&lt;/a&gt;&lt;/code&gt; generalises &lt;code&gt;&lt;a href=&quot;data-list#v:zip&quot;&gt;zip&lt;/a&gt;&lt;/code&gt; by zipping with the function given as the first argument, instead of a tupling function. For example, &lt;code&gt;&lt;a href=&quot;data-list#v:zipWith&quot;&gt;zipWith&lt;/a&gt; (+)&lt;/code&gt; is applied to two lists to produce the list of corresponding sums:</source>
          <target state="translated">O (m&amp;iacute;nimo (m, n)). &lt;code&gt;&lt;a href=&quot;data-list#v:zipWith&quot;&gt;zipWith&lt;/a&gt;&lt;/code&gt; generaliza &lt;code&gt;&lt;a href=&quot;data-list#v:zip&quot;&gt;zip&lt;/a&gt;&lt;/code&gt; comprimiendo con la funci&amp;oacute;n dada como primer argumento, en lugar de una funci&amp;oacute;n tupling. Por ejemplo, &lt;code&gt;&lt;a href=&quot;data-list#v:zipWith&quot;&gt;zipWith&lt;/a&gt; (+)&lt;/code&gt; se aplica a dos listas para producir la lista de sumas correspondientes:</target>
        </trans-unit>
        <trans-unit id="e3438cb73e516de5bbac10931d621d0aaa3e994e" translate="yes" xml:space="preserve">
          <source>O(min(m,n)). &lt;code&gt;&lt;a href=&quot;ghc-list#v:zip&quot;&gt;zip&lt;/a&gt;&lt;/code&gt; takes two lists and returns a list of corresponding pairs.</source>
          <target state="translated">O (m&amp;iacute;nimo (m, n)). &lt;code&gt;&lt;a href=&quot;ghc-list#v:zip&quot;&gt;zip&lt;/a&gt;&lt;/code&gt; toma dos listas y devuelve una lista de pares correspondientes.</target>
        </trans-unit>
        <trans-unit id="0089ac18b528ae9ead16dab3a8c9c8897d4bc1f1" translate="yes" xml:space="preserve">
          <source>O(min(m,n)). &lt;code&gt;&lt;a href=&quot;ghc-list#v:zipWith&quot;&gt;zipWith&lt;/a&gt;&lt;/code&gt; generalises &lt;code&gt;&lt;a href=&quot;ghc-list#v:zip&quot;&gt;zip&lt;/a&gt;&lt;/code&gt; by zipping with the function given as the first argument, instead of a tupling function. For example, &lt;code&gt;&lt;a href=&quot;ghc-list#v:zipWith&quot;&gt;zipWith&lt;/a&gt; (+)&lt;/code&gt; is applied to two lists to produce the list of corresponding sums:</source>
          <target state="translated">O (m&amp;iacute;nimo (m, n)). &lt;code&gt;&lt;a href=&quot;ghc-list#v:zipWith&quot;&gt;zipWith&lt;/a&gt;&lt;/code&gt; generaliza &lt;code&gt;&lt;a href=&quot;ghc-list#v:zip&quot;&gt;zip&lt;/a&gt;&lt;/code&gt; comprimiendo con la funci&amp;oacute;n dada como primer argumento, en lugar de una funci&amp;oacute;n tupling. Por ejemplo, &lt;code&gt;&lt;a href=&quot;ghc-list#v:zipWith&quot;&gt;zipWith&lt;/a&gt; (+)&lt;/code&gt; se aplica a dos listas para producir la lista de sumas correspondientes:</target>
        </trans-unit>
        <trans-unit id="362f8271e448b6fa92211162ea396be5b6ff39e1" translate="yes" xml:space="preserve">
          <source>O(min(m,n)). &lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:zip&quot;&gt;zip&lt;/a&gt;&lt;/code&gt; takes two lists and returns a list of corresponding pairs.</source>
          <target state="translated">O (m&amp;iacute;nimo (m, n)). &lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:zip&quot;&gt;zip&lt;/a&gt;&lt;/code&gt; toma dos listas y devuelve una lista de pares correspondientes.</target>
        </trans-unit>
        <trans-unit id="f37d8b34926fecd6ab8e6a71b5f4b380e2224a03" translate="yes" xml:space="preserve">
          <source>O(min(m,n)). &lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:zipWith&quot;&gt;zipWith&lt;/a&gt;&lt;/code&gt; generalises &lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:zip&quot;&gt;zip&lt;/a&gt;&lt;/code&gt; by zipping with the function given as the first argument, instead of a tupling function. For example, &lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:zipWith&quot;&gt;zipWith&lt;/a&gt; (+)&lt;/code&gt; is applied to two lists to produce the list of corresponding sums:</source>
          <target state="translated">O (m&amp;iacute;nimo (m, n)). &lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:zipWith&quot;&gt;zipWith&lt;/a&gt;&lt;/code&gt; generaliza &lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:zip&quot;&gt;zip&lt;/a&gt;&lt;/code&gt; comprimiendo con la funci&amp;oacute;n dada como primer argumento, en lugar de una funci&amp;oacute;n tupling. Por ejemplo, &lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:zipWith&quot;&gt;zipWith&lt;/a&gt; (+)&lt;/code&gt; se aplica a dos listas para producir la lista de sumas correspondientes:</target>
        </trans-unit>
        <trans-unit id="43ae27edf2a6e23ff118106deced552e62ba40c5" translate="yes" xml:space="preserve">
          <source>O(min(m,n)). &lt;code&gt;&lt;a href=&quot;prelude#v:zip&quot;&gt;zip&lt;/a&gt;&lt;/code&gt; takes two lists and returns a list of corresponding pairs.</source>
          <target state="translated">O (m&amp;iacute;nimo (m, n)). &lt;code&gt;&lt;a href=&quot;prelude#v:zip&quot;&gt;zip&lt;/a&gt;&lt;/code&gt; toma dos listas y devuelve una lista de pares correspondientes.</target>
        </trans-unit>
        <trans-unit id="4cae374e2b3b4bf55945376b3e8485eb1f689914" translate="yes" xml:space="preserve">
          <source>O(min(m,n)). &lt;code&gt;&lt;a href=&quot;prelude#v:zipWith&quot;&gt;zipWith&lt;/a&gt;&lt;/code&gt; generalises &lt;code&gt;&lt;a href=&quot;prelude#v:zip&quot;&gt;zip&lt;/a&gt;&lt;/code&gt; by zipping with the function given as the first argument, instead of a tupling function. For example, &lt;code&gt;&lt;a href=&quot;prelude#v:zipWith&quot;&gt;zipWith&lt;/a&gt; (+)&lt;/code&gt; is applied to two lists to produce the list of corresponding sums:</source>
          <target state="translated">O (m&amp;iacute;nimo (m, n)). &lt;code&gt;&lt;a href=&quot;prelude#v:zipWith&quot;&gt;zipWith&lt;/a&gt;&lt;/code&gt; generaliza &lt;code&gt;&lt;a href=&quot;prelude#v:zip&quot;&gt;zip&lt;/a&gt;&lt;/code&gt; comprimiendo con la funci&amp;oacute;n dada como primer argumento, en lugar de una funci&amp;oacute;n tupling. Por ejemplo, &lt;code&gt;&lt;a href=&quot;prelude#v:zipWith&quot;&gt;zipWith&lt;/a&gt; (+)&lt;/code&gt; se aplica a dos listas para producir la lista de sumas correspondientes:</target>
        </trans-unit>
        <trans-unit id="d03ac74df2775f3de40840cff9df60d987e779e3" translate="yes" xml:space="preserve">
          <source>O(min(m,n)). The &lt;code&gt;&lt;a href=&quot;data-list#v:isPrefixOf&quot;&gt;isPrefixOf&lt;/a&gt;&lt;/code&gt; function takes two lists and returns &lt;code&gt;&lt;a href=&quot;data-bool#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt; iff the first list is a prefix of the second.</source>
          <target state="translated">O (m&amp;iacute;nimo (m, n)). La funci&amp;oacute;n &lt;code&gt;&lt;a href=&quot;data-list#v:isPrefixOf&quot;&gt;isPrefixOf&lt;/a&gt;&lt;/code&gt; toma dos listas y devuelve &lt;code&gt;&lt;a href=&quot;data-bool#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt; si la primera lista es un prefijo de la segunda.</target>
        </trans-unit>
        <trans-unit id="ea1699f32df51d2cef7cf951b9788434480a66a8" translate="yes" xml:space="preserve">
          <source>O(min(m,n)). The &lt;code&gt;&lt;a href=&quot;data-list#v:stripPrefix&quot;&gt;stripPrefix&lt;/a&gt;&lt;/code&gt; function drops the given prefix from a list. It returns &lt;code&gt;&lt;a href=&quot;data-maybe#v:Nothing&quot;&gt;Nothing&lt;/a&gt;&lt;/code&gt; if the list did not start with the prefix given, or &lt;code&gt;&lt;a href=&quot;data-maybe#v:Just&quot;&gt;Just&lt;/a&gt;&lt;/code&gt; the list after the prefix, if it does.</source>
          <target state="translated">O (m&amp;iacute;nimo (m, n)). La funci&amp;oacute;n &lt;code&gt;&lt;a href=&quot;data-list#v:stripPrefix&quot;&gt;stripPrefix&lt;/a&gt;&lt;/code&gt; elimina el prefijo dado de una lista. Devuelve &lt;code&gt;&lt;a href=&quot;data-maybe#v:Nothing&quot;&gt;Nothing&lt;/a&gt;&lt;/code&gt; si la lista no comenz&amp;oacute; con el prefijo dado, o &lt;code&gt;&lt;a href=&quot;data-maybe#v:Just&quot;&gt;Just&lt;/a&gt;&lt;/code&gt; la lista despu&amp;eacute;s del prefijo, si lo hace.</target>
        </trans-unit>
        <trans-unit id="62b551a049fc5746c922a24ff35bb2d54771567b" translate="yes" xml:space="preserve">
          <source>O(min(m,n)). The &lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:isPrefixOf&quot;&gt;isPrefixOf&lt;/a&gt;&lt;/code&gt; function takes two lists and returns &lt;code&gt;&lt;a href=&quot;data-bool#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt; iff the first list is a prefix of the second.</source>
          <target state="translated">O (m&amp;iacute;nimo (m, n)). La funci&amp;oacute;n &lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:isPrefixOf&quot;&gt;isPrefixOf&lt;/a&gt;&lt;/code&gt; toma dos listas y devuelve &lt;code&gt;&lt;a href=&quot;data-bool#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt; si la primera lista es un prefijo de la segunda.</target>
        </trans-unit>
        <trans-unit id="8e1c861f0aeba2955d4abdb1e20c87c002cdf147" translate="yes" xml:space="preserve">
          <source>O(min(m,n)). The &lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:stripPrefix&quot;&gt;stripPrefix&lt;/a&gt;&lt;/code&gt; function drops the given prefix from a list. It returns &lt;code&gt;&lt;a href=&quot;data-maybe#v:Nothing&quot;&gt;Nothing&lt;/a&gt;&lt;/code&gt; if the list did not start with the prefix given, or &lt;code&gt;&lt;a href=&quot;data-maybe#v:Just&quot;&gt;Just&lt;/a&gt;&lt;/code&gt; the list after the prefix, if it does.</source>
          <target state="translated">O (m&amp;iacute;nimo (m, n)). La funci&amp;oacute;n &lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:stripPrefix&quot;&gt;stripPrefix&lt;/a&gt;&lt;/code&gt; elimina el prefijo dado de una lista. Devuelve &lt;code&gt;&lt;a href=&quot;data-maybe#v:Nothing&quot;&gt;Nothing&lt;/a&gt;&lt;/code&gt; si la lista no comenz&amp;oacute; con el prefijo dado, o &lt;code&gt;&lt;a href=&quot;data-maybe#v:Just&quot;&gt;Just&lt;/a&gt;&lt;/code&gt; la lista despu&amp;eacute;s del prefijo, si lo hace.</target>
        </trans-unit>
        <trans-unit id="666947615a3fb4b01fe9cb9f28098ce35062dbc9" translate="yes" xml:space="preserve">
          <source>O(min(n,W)). Add a value to the set. There is no left- or right bias for IntSets.</source>
          <target state="translated">O(min(n,W)).Añade un valor al conjunto.No hay sesgo izquierdo o derecho para los IntSets.</target>
        </trans-unit>
        <trans-unit id="117ec9887d00deff34b39434bdeddb8572b9481a" translate="yes" xml:space="preserve">
          <source>O(min(n,W)). Adjust a value at a specific key. When the key is not a member of the map, the original map is returned.</source>
          <target state="translated">O(min(n,W)).Ajustar un valor en una tecla específica.Cuando la clave no es un miembro del mapa,se devuelve el mapa original.</target>
        </trans-unit>
        <trans-unit id="bb2412bbf0388d193b7f8f6e942d3baf2b765891" translate="yes" xml:space="preserve">
          <source>O(min(n,W)). Delete a key and its value from the map. When the key is not a member of the map, the original map is returned.</source>
          <target state="translated">O(min(n,W)).Borrar una clave y su valor del mapa.Cuando la llave no es un miembro del mapa,se devuelve el mapa original.</target>
        </trans-unit>
        <trans-unit id="80f021247c32dfb7532faab79b48c35031598555" translate="yes" xml:space="preserve">
          <source>O(min(n,W)). Delete a value in the set. Returns the original set when the value was not present.</source>
          <target state="translated">O(min(n,W)).Borre un valor del conjunto.Devuelve el conjunto original cuando el valor no estaba presente.</target>
        </trans-unit>
        <trans-unit id="27b7e40e3d5ee1a884d9658bdfcee9370d509cbe" translate="yes" xml:space="preserve">
          <source>O(min(n,W)). Delete and find the maximal element.</source>
          <target state="translated">O(min(n,W)).Borrar y encontrar el elemento máximo.</target>
        </trans-unit>
        <trans-unit id="39eabda31f3ee71f3a877ec6e419027b3ef0e507" translate="yes" xml:space="preserve">
          <source>O(min(n,W)). Delete and find the maximal element. This function throws an error if the map is empty. Use &lt;code&gt;&lt;a href=&quot;data-intmap-lazy#v:maxViewWithKey&quot;&gt;maxViewWithKey&lt;/a&gt;&lt;/code&gt; if the map may be empty.</source>
          <target state="translated">O (m&amp;iacute;nimo (n, W)). Elimina y encuentra el elemento m&amp;aacute;ximo. Esta funci&amp;oacute;n arroja un error si el mapa est&amp;aacute; vac&amp;iacute;o. Utilice &lt;code&gt;&lt;a href=&quot;data-intmap-lazy#v:maxViewWithKey&quot;&gt;maxViewWithKey&lt;/a&gt;&lt;/code&gt; si el mapa puede estar vac&amp;iacute;o.</target>
        </trans-unit>
        <trans-unit id="9f6aaac349145ba247ec568fd2d572699f900442" translate="yes" xml:space="preserve">
          <source>O(min(n,W)). Delete and find the maximal element. This function throws an error if the map is empty. Use &lt;code&gt;&lt;a href=&quot;data-intmap-strict#v:maxViewWithKey&quot;&gt;maxViewWithKey&lt;/a&gt;&lt;/code&gt; if the map may be empty.</source>
          <target state="translated">O (m&amp;iacute;nimo (n, W)). Elimina y encuentra el elemento m&amp;aacute;ximo. Esta funci&amp;oacute;n arroja un error si el mapa est&amp;aacute; vac&amp;iacute;o. Utilice &lt;code&gt;&lt;a href=&quot;data-intmap-strict#v:maxViewWithKey&quot;&gt;maxViewWithKey&lt;/a&gt;&lt;/code&gt; si el mapa puede estar vac&amp;iacute;o.</target>
        </trans-unit>
        <trans-unit id="05a005cae0707be25fec92a305a7a5b879d7c3f0" translate="yes" xml:space="preserve">
          <source>O(min(n,W)). Delete and find the maximal element. This function throws an error if the map is empty. Use &lt;code&gt;&lt;a href=&quot;data-intmap-strict-internal#v:maxViewWithKey&quot;&gt;maxViewWithKey&lt;/a&gt;&lt;/code&gt; if the map may be empty.</source>
          <target state="translated">O (m&amp;iacute;nimo (n, W)). Elimina y encuentra el elemento m&amp;aacute;ximo. Esta funci&amp;oacute;n arroja un error si el mapa est&amp;aacute; vac&amp;iacute;o. Utilice &lt;code&gt;&lt;a href=&quot;data-intmap-strict-internal#v:maxViewWithKey&quot;&gt;maxViewWithKey&lt;/a&gt;&lt;/code&gt; si el mapa puede estar vac&amp;iacute;o.</target>
        </trans-unit>
        <trans-unit id="65bad5b61cfb5b1331f071640501863a2dc86dca" translate="yes" xml:space="preserve">
          <source>O(min(n,W)). Delete and find the minimal element.</source>
          <target state="translated">O(min(n,W)).Eliminar y encontrar el elemento mínimo.</target>
        </trans-unit>
        <trans-unit id="9c6bdd35d5e7b928fe7d9b107ba0097360b938d5" translate="yes" xml:space="preserve">
          <source>O(min(n,W)). Delete and find the minimal element. This function throws an error if the map is empty. Use &lt;code&gt;&lt;a href=&quot;data-intmap-lazy#v:minViewWithKey&quot;&gt;minViewWithKey&lt;/a&gt;&lt;/code&gt; if the map may be empty.</source>
          <target state="translated">O (m&amp;iacute;nimo (n, W)). Elimina y encuentra el elemento m&amp;iacute;nimo. Esta funci&amp;oacute;n arroja un error si el mapa est&amp;aacute; vac&amp;iacute;o. Utilice &lt;code&gt;&lt;a href=&quot;data-intmap-lazy#v:minViewWithKey&quot;&gt;minViewWithKey&lt;/a&gt;&lt;/code&gt; si el mapa puede estar vac&amp;iacute;o.</target>
        </trans-unit>
        <trans-unit id="530db2d22f095c6099c8462f012679802de1f9fa" translate="yes" xml:space="preserve">
          <source>O(min(n,W)). Delete and find the minimal element. This function throws an error if the map is empty. Use &lt;code&gt;&lt;a href=&quot;data-intmap-strict#v:minViewWithKey&quot;&gt;minViewWithKey&lt;/a&gt;&lt;/code&gt; if the map may be empty.</source>
          <target state="translated">O (m&amp;iacute;nimo (n, W)). Elimina y encuentra el elemento m&amp;iacute;nimo. Esta funci&amp;oacute;n arroja un error si el mapa est&amp;aacute; vac&amp;iacute;o. Utilice &lt;code&gt;&lt;a href=&quot;data-intmap-strict#v:minViewWithKey&quot;&gt;minViewWithKey&lt;/a&gt;&lt;/code&gt; si el mapa puede estar vac&amp;iacute;o.</target>
        </trans-unit>
        <trans-unit id="1d0cd90b03d528ba8f41c55613d00a43a816a7d7" translate="yes" xml:space="preserve">
          <source>O(min(n,W)). Delete and find the minimal element. This function throws an error if the map is empty. Use &lt;code&gt;&lt;a href=&quot;data-intmap-strict-internal#v:minViewWithKey&quot;&gt;minViewWithKey&lt;/a&gt;&lt;/code&gt; if the map may be empty.</source>
          <target state="translated">O (m&amp;iacute;nimo (n, W)). Elimina y encuentra el elemento m&amp;iacute;nimo. Esta funci&amp;oacute;n arroja un error si el mapa est&amp;aacute; vac&amp;iacute;o. Utilice &lt;code&gt;&lt;a href=&quot;data-intmap-strict-internal#v:minViewWithKey&quot;&gt;minViewWithKey&lt;/a&gt;&lt;/code&gt; si el mapa puede estar vac&amp;iacute;o.</target>
        </trans-unit>
        <trans-unit id="5e92ba6c80512f36cce9b2d45b1d94d08736c542" translate="yes" xml:space="preserve">
          <source>O(min(n,W)). Delete the maximal element. Returns an empty set if the set is empty.</source>
          <target state="translated">O(min(n,W)).Eliminar el elemento máximo.Devuelve un conjunto vacío si el conjunto está vacío.</target>
        </trans-unit>
        <trans-unit id="1b5aacaba0d8c73c6b4d63b77d8edcda3a3de286" translate="yes" xml:space="preserve">
          <source>O(min(n,W)). Delete the maximal key. Returns an empty map if the map is empty.</source>
          <target state="translated">O(min(n,W)).Borre la tecla de máximo.Devuelve un mapa vacío si el mapa está vacío.</target>
        </trans-unit>
        <trans-unit id="5cadf90838fff0ddfad92bb47122bfdb3f728f17" translate="yes" xml:space="preserve">
          <source>O(min(n,W)). Delete the minimal element. Returns an empty set if the set is empty.</source>
          <target state="translated">O(min(n,W)).Eliminar el elemento mínimo.Devuelve un conjunto vacío si el conjunto está vacío.</target>
        </trans-unit>
        <trans-unit id="88b0c4955f2491752a07506a0a100406b872172e" translate="yes" xml:space="preserve">
          <source>O(min(n,W)). Delete the minimal key. Returns an empty map if the map is empty.</source>
          <target state="translated">O(min(n,W)).Borre la clave mínima.Devuelve un mapa vacío si el mapa está vacío.</target>
        </trans-unit>
        <trans-unit id="f5433c3ea2cdf692917f1d0f6238f285722c77c8" translate="yes" xml:space="preserve">
          <source>O(min(n,W)). Find the value at a key. Calls &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/prelude#v:error&quot;&gt;error&lt;/a&gt;&lt;/code&gt; when the element can not be found.</source>
          <target state="translated">O (m&amp;iacute;nimo (n, W)). Encuentre el valor en una clave. Llama a &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/prelude#v:error&quot;&gt;error&lt;/a&gt;&lt;/code&gt; cuando no se puede encontrar el elemento.</target>
        </trans-unit>
        <trans-unit id="dd8ee0ddd834d74f0fb9d691ce331218a75be3ac" translate="yes" xml:space="preserve">
          <source>O(min(n,W)). Find the value at a key. Calls &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/prelude#v:error&quot;&gt;error&lt;/a&gt;&lt;/code&gt; when the element can not be found.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e7f62720517526f8b1a7e7846e6261e5f54ce3de" translate="yes" xml:space="preserve">
          <source>O(min(n,W)). Find the value at a key. Returns &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-maybe#v:Nothing&quot;&gt;Nothing&lt;/a&gt;&lt;/code&gt; when the element can not be found.</source>
          <target state="translated">O (m&amp;iacute;nimo (n, W)). Encuentre el valor en una clave. Devuelve &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-maybe#v:Nothing&quot;&gt;Nothing&lt;/a&gt;&lt;/code&gt; cuando no se puede encontrar el elemento.</target>
        </trans-unit>
        <trans-unit id="f8e7da55955612b916a0d5343c2c2af09fe44537" translate="yes" xml:space="preserve">
          <source>O(min(n,W)). Find the value at a key. Returns &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-maybe#v:Nothing&quot;&gt;Nothing&lt;/a&gt;&lt;/code&gt; when the element can not be found.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0899918feebf227c8d98ea614d6cac7629a2c11d" translate="yes" xml:space="preserve">
          <source>O(min(n,W)). Insert a new key/value pair in the map. If the key is already present in the map, the associated value is replaced with the supplied value, i.e. &lt;code&gt;&lt;a href=&quot;data-intmap-lazy#v:insert&quot;&gt;insert&lt;/a&gt;&lt;/code&gt; is equivalent to &lt;code&gt;&lt;a href=&quot;data-intmap-lazy#v:insertWith&quot;&gt;insertWith&lt;/a&gt; &lt;a href=&quot;../base-4.13.0.0/data-function#v:const&quot;&gt;const&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">O (m&amp;iacute;nimo (n, W)). Inserte un nuevo par clave / valor en el mapa. Si la clave ya est&amp;aacute; presente en el mapa, el valor asociado se reemplaza con el valor proporcionado, es decir, &lt;code&gt;&lt;a href=&quot;data-intmap-lazy#v:insert&quot;&gt;insert&lt;/a&gt;&lt;/code&gt; ar es equivalente a &lt;code&gt;&lt;a href=&quot;data-intmap-lazy#v:insertWith&quot;&gt;insertWith&lt;/a&gt; &lt;a href=&quot;../base-4.13.0.0/data-function#v:const&quot;&gt;const&lt;/a&gt;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="4d4fadab1c5f17136f5d4b96404d594f422641eb" translate="yes" xml:space="preserve">
          <source>O(min(n,W)). Insert a new key/value pair in the map. If the key is already present in the map, the associated value is replaced with the supplied value, i.e. &lt;code&gt;&lt;a href=&quot;data-intmap-lazy#v:insert&quot;&gt;insert&lt;/a&gt;&lt;/code&gt; is equivalent to &lt;code&gt;&lt;a href=&quot;data-intmap-lazy#v:insertWith&quot;&gt;insertWith&lt;/a&gt; &lt;a href=&quot;../base-4.14.1.0/data-function#v:const&quot;&gt;const&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="720601ecfaca71ed23a517497429611a9cb1a0bc" translate="yes" xml:space="preserve">
          <source>O(min(n,W)). Insert a new key/value pair in the map. If the key is already present in the map, the associated value is replaced with the supplied value, i.e. &lt;code&gt;&lt;a href=&quot;data-intmap-strict#v:insert&quot;&gt;insert&lt;/a&gt;&lt;/code&gt; is equivalent to &lt;code&gt;&lt;a href=&quot;data-intmap-strict#v:insertWith&quot;&gt;insertWith&lt;/a&gt; &lt;a href=&quot;../base-4.13.0.0/data-function#v:const&quot;&gt;const&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">O (m&amp;iacute;nimo (n, W)). Inserte un nuevo par clave / valor en el mapa. Si la clave ya est&amp;aacute; presente en el mapa, el valor asociado se reemplaza con el valor proporcionado, es decir, &lt;code&gt;&lt;a href=&quot;data-intmap-strict#v:insert&quot;&gt;insert&lt;/a&gt;&lt;/code&gt; ar es equivalente a &lt;code&gt;&lt;a href=&quot;data-intmap-strict#v:insertWith&quot;&gt;insertWith&lt;/a&gt; &lt;a href=&quot;../base-4.13.0.0/data-function#v:const&quot;&gt;const&lt;/a&gt;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="3fed807e9594bff342fecde57ec9bf6885e66376" translate="yes" xml:space="preserve">
          <source>O(min(n,W)). Insert a new key/value pair in the map. If the key is already present in the map, the associated value is replaced with the supplied value, i.e. &lt;code&gt;&lt;a href=&quot;data-intmap-strict#v:insert&quot;&gt;insert&lt;/a&gt;&lt;/code&gt; is equivalent to &lt;code&gt;&lt;a href=&quot;data-intmap-strict#v:insertWith&quot;&gt;insertWith&lt;/a&gt; &lt;a href=&quot;../base-4.14.1.0/data-function#v:const&quot;&gt;const&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e08c56f00090dcb9ead9336de097f9ef76e6d394" translate="yes" xml:space="preserve">
          <source>O(min(n,W)). Insert a new key/value pair in the map. If the key is already present in the map, the associated value is replaced with the supplied value, i.e. &lt;code&gt;&lt;a href=&quot;data-intmap-strict-internal#v:insert&quot;&gt;insert&lt;/a&gt;&lt;/code&gt; is equivalent to &lt;code&gt;&lt;a href=&quot;data-intmap-strict-internal#v:insertWith&quot;&gt;insertWith&lt;/a&gt; &lt;a href=&quot;../base-4.13.0.0/data-function#v:const&quot;&gt;const&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">O (m&amp;iacute;nimo (n, W)). Inserte un nuevo par clave / valor en el mapa. Si la clave ya est&amp;aacute; presente en el mapa, el valor asociado se reemplaza con el valor proporcionado, es decir, &lt;code&gt;&lt;a href=&quot;data-intmap-strict-internal#v:insert&quot;&gt;insert&lt;/a&gt;&lt;/code&gt; ar es equivalente a &lt;code&gt;&lt;a href=&quot;data-intmap-strict-internal#v:insertWith&quot;&gt;insertWith&lt;/a&gt; &lt;a href=&quot;../base-4.13.0.0/data-function#v:const&quot;&gt;const&lt;/a&gt;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="c7c77b28b3bb473b83b9ebf21927cf02291df13e" translate="yes" xml:space="preserve">
          <source>O(min(n,W)). Insert a new key/value pair in the map. If the key is already present in the map, the associated value is replaced with the supplied value, i.e. &lt;code&gt;&lt;a href=&quot;data-intmap-strict-internal#v:insert&quot;&gt;insert&lt;/a&gt;&lt;/code&gt; is equivalent to &lt;code&gt;&lt;a href=&quot;data-intmap-strict-internal#v:insertWith&quot;&gt;insertWith&lt;/a&gt; &lt;a href=&quot;../base-4.14.1.0/data-function#v:const&quot;&gt;const&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="87dcde6ee0d5ba450e086f4b322e1e67e6edf99d" translate="yes" xml:space="preserve">
          <source>O(min(n,W)). Insert with a combining function. &lt;code&gt;&lt;a href=&quot;data-intmap-lazy#v:insertWith&quot;&gt;insertWith&lt;/a&gt; f key value mp&lt;/code&gt; will insert the pair (key, value) into &lt;code&gt;mp&lt;/code&gt; if key does not exist in the map. If the key does exist, the function will insert &lt;code&gt;f new_value old_value&lt;/code&gt;.</source>
          <target state="translated">O (m&amp;iacute;nimo (n, W)). Insertar con funci&amp;oacute;n de combinaci&amp;oacute;n. &lt;code&gt;&lt;a href=&quot;data-intmap-lazy#v:insertWith&quot;&gt;insertWith&lt;/a&gt; f key value mp&lt;/code&gt; insertar&amp;aacute; el par (clave, valor) en &lt;code&gt;mp&lt;/code&gt; si la clave no existe en el mapa. Si la clave existe, la funci&amp;oacute;n insertar&amp;aacute; &lt;code&gt;f new_value old_value&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="4a7291711423ea42b73075f6c11339e3a1678ab6" translate="yes" xml:space="preserve">
          <source>O(min(n,W)). Insert with a combining function. &lt;code&gt;&lt;a href=&quot;data-intmap-lazy#v:insertWithKey&quot;&gt;insertWithKey&lt;/a&gt; f key value mp&lt;/code&gt; will insert the pair (key, value) into &lt;code&gt;mp&lt;/code&gt; if key does not exist in the map. If the key does exist, the function will insert &lt;code&gt;f key new_value old_value&lt;/code&gt;.</source>
          <target state="translated">O (m&amp;iacute;nimo (n, W)). Insertar con funci&amp;oacute;n de combinaci&amp;oacute;n. &lt;code&gt;&lt;a href=&quot;data-intmap-lazy#v:insertWithKey&quot;&gt;insertWithKey&lt;/a&gt; f key value mp&lt;/code&gt; insertar&amp;aacute; el par (clave, valor) en &lt;code&gt;mp&lt;/code&gt; si la clave no existe en el mapa. Si la clave existe, la funci&amp;oacute;n insertar&amp;aacute; la &lt;code&gt;f key new_value old_value&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="ef3efc58cbe3c17bf8df120c987be760469d0ae0" translate="yes" xml:space="preserve">
          <source>O(min(n,W)). Insert with a combining function. &lt;code&gt;&lt;a href=&quot;data-intmap-strict#v:insertWith&quot;&gt;insertWith&lt;/a&gt; f key value mp&lt;/code&gt; will insert the pair (key, value) into &lt;code&gt;mp&lt;/code&gt; if key does not exist in the map. If the key does exist, the function will insert &lt;code&gt;f new_value old_value&lt;/code&gt;.</source>
          <target state="translated">O (m&amp;iacute;nimo (n, W)). Insertar con funci&amp;oacute;n de combinaci&amp;oacute;n. &lt;code&gt;&lt;a href=&quot;data-intmap-strict#v:insertWith&quot;&gt;insertWith&lt;/a&gt; f key value mp&lt;/code&gt; insertar&amp;aacute; el par (clave, valor) en &lt;code&gt;mp&lt;/code&gt; si la clave no existe en el mapa. Si la clave existe, la funci&amp;oacute;n insertar&amp;aacute; &lt;code&gt;f new_value old_value&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="b4ee4153cb0857eb89b62d8c874cdfebe773c1d2" translate="yes" xml:space="preserve">
          <source>O(min(n,W)). Insert with a combining function. &lt;code&gt;&lt;a href=&quot;data-intmap-strict#v:insertWithKey&quot;&gt;insertWithKey&lt;/a&gt; f key value mp&lt;/code&gt; will insert the pair (key, value) into &lt;code&gt;mp&lt;/code&gt; if key does not exist in the map. If the key does exist, the function will insert &lt;code&gt;f key new_value old_value&lt;/code&gt;.</source>
          <target state="translated">O (m&amp;iacute;nimo (n, W)). Insertar con funci&amp;oacute;n de combinaci&amp;oacute;n. &lt;code&gt;&lt;a href=&quot;data-intmap-strict#v:insertWithKey&quot;&gt;insertWithKey&lt;/a&gt; f key value mp&lt;/code&gt; insertar&amp;aacute; el par (clave, valor) en &lt;code&gt;mp&lt;/code&gt; si la clave no existe en el mapa. Si la clave existe, la funci&amp;oacute;n insertar&amp;aacute; la &lt;code&gt;f key new_value old_value&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="3881f3a2cdeb918b5d976bc3db4b60549e3e8761" translate="yes" xml:space="preserve">
          <source>O(min(n,W)). Insert with a combining function. &lt;code&gt;&lt;a href=&quot;data-intmap-strict-internal#v:insertWith&quot;&gt;insertWith&lt;/a&gt; f key value mp&lt;/code&gt; will insert the pair (key, value) into &lt;code&gt;mp&lt;/code&gt; if key does not exist in the map. If the key does exist, the function will insert &lt;code&gt;f new_value old_value&lt;/code&gt;.</source>
          <target state="translated">O (m&amp;iacute;nimo (n, W)). Insertar con funci&amp;oacute;n de combinaci&amp;oacute;n. &lt;code&gt;&lt;a href=&quot;data-intmap-strict-internal#v:insertWith&quot;&gt;insertWith&lt;/a&gt; f key value mp&lt;/code&gt; insertar&amp;aacute; el par (clave, valor) en &lt;code&gt;mp&lt;/code&gt; si la clave no existe en el mapa. Si la clave existe, la funci&amp;oacute;n insertar&amp;aacute; &lt;code&gt;f new_value old_value&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="387b72c28953b965af535519012b754270894d15" translate="yes" xml:space="preserve">
          <source>O(min(n,W)). Insert with a combining function. &lt;code&gt;&lt;a href=&quot;data-intmap-strict-internal#v:insertWithKey&quot;&gt;insertWithKey&lt;/a&gt; f key value mp&lt;/code&gt; will insert the pair (key, value) into &lt;code&gt;mp&lt;/code&gt; if key does not exist in the map. If the key does exist, the function will insert &lt;code&gt;f key new_value old_value&lt;/code&gt;.</source>
          <target state="translated">O (m&amp;iacute;nimo (n, W)). Insertar con funci&amp;oacute;n de combinaci&amp;oacute;n. &lt;code&gt;&lt;a href=&quot;data-intmap-strict-internal#v:insertWithKey&quot;&gt;insertWithKey&lt;/a&gt; f key value mp&lt;/code&gt; insertar&amp;aacute; el par (clave, valor) en &lt;code&gt;mp&lt;/code&gt; si la clave no existe en el mapa. Si la clave existe, la funci&amp;oacute;n insertar&amp;aacute; la &lt;code&gt;f key new_value old_value&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="299f2cdf7547accd0fda27e3387efdc180bf37b8" translate="yes" xml:space="preserve">
          <source>O(min(n,W)). Is the element not in the set?</source>
          <target state="translated">O(min(n,W)).¿El elemento no está en el set?</target>
        </trans-unit>
        <trans-unit id="f3b38da89b30bce3c0b997495994179d33e981c2" translate="yes" xml:space="preserve">
          <source>O(min(n,W)). Is the key a member of the map?</source>
          <target state="translated">O(min(n,W)).¿La llave es un miembro del mapa?</target>
        </trans-unit>
        <trans-unit id="ebc38617c47ab2f2b3089d3243f1a9edf77335f8" translate="yes" xml:space="preserve">
          <source>O(min(n,W)). Is the key not a member of the map?</source>
          <target state="translated">O(min(n,W)).¿La llave no es un miembro del mapa?</target>
        </trans-unit>
        <trans-unit id="f07ca4edd352a879234ba71a939671a44d043d25" translate="yes" xml:space="preserve">
          <source>O(min(n,W)). Is the value a member of the set?</source>
          <target state="translated">O(min(n,W)).¿Es el valor un miembro del conjunto?</target>
        </trans-unit>
        <trans-unit id="cda441da7f048a8899e36335b8ca68a0957fc6d1" translate="yes" xml:space="preserve">
          <source>O(min(n,W)). Lookup and update. The function returns original value, if it is updated. This is different behavior than &lt;code&gt;&lt;a href=&quot;data-map#v:updateLookupWithKey&quot;&gt;updateLookupWithKey&lt;/a&gt;&lt;/code&gt;. Returns the original key value if the map entry is deleted.</source>
          <target state="translated">O (m&amp;iacute;nimo (n, W)). B&amp;uacute;squeda y actualizaci&amp;oacute;n. La funci&amp;oacute;n devuelve el valor original, si se actualiza. Este es un comportamiento diferente al de &lt;code&gt;&lt;a href=&quot;data-map#v:updateLookupWithKey&quot;&gt;updateLookupWithKey&lt;/a&gt;&lt;/code&gt; . Devuelve el valor de clave original si se elimina la entrada del mapa.</target>
        </trans-unit>
        <trans-unit id="4fe409c1e12e147087ee2fdd3aa5983d150901be" translate="yes" xml:space="preserve">
          <source>O(min(n,W)). Lookup the value at a key in the map. See also &lt;code&gt;&lt;a href=&quot;data-map#v:lookup&quot;&gt;lookup&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">O (m&amp;iacute;nimo (n, W)). Busque el valor en una clave en el mapa. Consulte tambi&amp;eacute;n &lt;code&gt;&lt;a href=&quot;data-map#v:lookup&quot;&gt;lookup&lt;/a&gt;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="a45efca9f41b3ec01cab49331d88177d669d0ee3" translate="yes" xml:space="preserve">
          <source>O(min(n,W)). Performs a &lt;code&gt;&lt;a href=&quot;data-intmap-lazy#v:split&quot;&gt;split&lt;/a&gt;&lt;/code&gt; but also returns whether the pivot key was found in the original map.</source>
          <target state="translated">O (m&amp;iacute;nimo (n, W)). Realiza una &lt;code&gt;&lt;a href=&quot;data-intmap-lazy#v:split&quot;&gt;split&lt;/a&gt;&lt;/code&gt; pero tambi&amp;eacute;n devuelve si la clave din&amp;aacute;mica se encontr&amp;oacute; en el mapa original.</target>
        </trans-unit>
        <trans-unit id="a04040ca0480cf03f44cf16069113b525c61a1d3" translate="yes" xml:space="preserve">
          <source>O(min(n,W)). Performs a &lt;code&gt;&lt;a href=&quot;data-intmap-strict#v:split&quot;&gt;split&lt;/a&gt;&lt;/code&gt; but also returns whether the pivot key was found in the original map.</source>
          <target state="translated">O (m&amp;iacute;nimo (n, W)). Realiza una &lt;code&gt;&lt;a href=&quot;data-intmap-strict#v:split&quot;&gt;split&lt;/a&gt;&lt;/code&gt; pero tambi&amp;eacute;n devuelve si la clave din&amp;aacute;mica se encontr&amp;oacute; en el mapa original.</target>
        </trans-unit>
        <trans-unit id="eb3e2c52a8ec234bbb7bd538392652ab524f8ba9" translate="yes" xml:space="preserve">
          <source>O(min(n,W)). Performs a &lt;code&gt;&lt;a href=&quot;data-intmap-strict-internal#v:split&quot;&gt;split&lt;/a&gt;&lt;/code&gt; but also returns whether the pivot key was found in the original map.</source>
          <target state="translated">O (m&amp;iacute;nimo (n, W)). Realiza una &lt;code&gt;&lt;a href=&quot;data-intmap-strict-internal#v:split&quot;&gt;split&lt;/a&gt;&lt;/code&gt; pero tambi&amp;eacute;n devuelve si la clave din&amp;aacute;mica se encontr&amp;oacute; en el mapa original.</target>
        </trans-unit>
        <trans-unit id="269c98bb57576420c9ab4705c6cef436e62de4c3" translate="yes" xml:space="preserve">
          <source>O(min(n,W)). Performs a &lt;code&gt;&lt;a href=&quot;data-intset#v:split&quot;&gt;split&lt;/a&gt;&lt;/code&gt; but also returns whether the pivot element was found in the original set.</source>
          <target state="translated">O (m&amp;iacute;nimo (n, W)). Realiza una &lt;code&gt;&lt;a href=&quot;data-intset#v:split&quot;&gt;split&lt;/a&gt;&lt;/code&gt; pero tambi&amp;eacute;n devuelve si el elemento pivote se encontr&amp;oacute; en el conjunto original.</target>
        </trans-unit>
        <trans-unit id="202753d27cef04c7739f8d43679bd99d77ef596f" translate="yes" xml:space="preserve">
          <source>O(min(n,W)). Performs a &lt;code&gt;&lt;a href=&quot;data-intset-internal#v:split&quot;&gt;split&lt;/a&gt;&lt;/code&gt; but also returns whether the pivot element was found in the original set.</source>
          <target state="translated">O (m&amp;iacute;nimo (n, W)). Realiza una &lt;code&gt;&lt;a href=&quot;data-intset-internal#v:split&quot;&gt;split&lt;/a&gt;&lt;/code&gt; pero tambi&amp;eacute;n devuelve si el elemento pivote se encontr&amp;oacute; en el conjunto original.</target>
        </trans-unit>
        <trans-unit id="03a47e9146b6302cdbcad78b738525e9b6adc91e" translate="yes" xml:space="preserve">
          <source>O(min(n,W)). Retrieves the maximal (key,value) pair of the map, and the map stripped of that element, or &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-maybe#v:Nothing&quot;&gt;Nothing&lt;/a&gt;&lt;/code&gt; if passed an empty map.</source>
          <target state="translated">O (m&amp;iacute;nimo (n, W)). Recupera el par m&amp;aacute;ximo (clave, valor) del mapa y el mapa sin ese elemento, o &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-maybe#v:Nothing&quot;&gt;Nothing&lt;/a&gt;&lt;/code&gt; si se pasa un mapa vac&amp;iacute;o.</target>
        </trans-unit>
        <trans-unit id="eef8c8b028bc4bd66b08966b1da124258cd1e329" translate="yes" xml:space="preserve">
          <source>O(min(n,W)). Retrieves the maximal (key,value) pair of the map, and the map stripped of that element, or &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-maybe#v:Nothing&quot;&gt;Nothing&lt;/a&gt;&lt;/code&gt; if passed an empty map.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8b3ba19cf295058368407b8c79daa93462ac9396" translate="yes" xml:space="preserve">
          <source>O(min(n,W)). Retrieves the maximal key of the map, and the map stripped of that element, or &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-maybe#v:Nothing&quot;&gt;Nothing&lt;/a&gt;&lt;/code&gt; if passed an empty map.</source>
          <target state="translated">O (m&amp;iacute;nimo (n, W)). Recupera la clave m&amp;aacute;xima del mapa y el mapa despojado de ese elemento, o &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-maybe#v:Nothing&quot;&gt;Nothing&lt;/a&gt;&lt;/code&gt; si se pasa un mapa vac&amp;iacute;o.</target>
        </trans-unit>
        <trans-unit id="fa61e4709382597b18923c1316bc05d291539267" translate="yes" xml:space="preserve">
          <source>O(min(n,W)). Retrieves the maximal key of the map, and the map stripped of that element, or &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-maybe#v:Nothing&quot;&gt;Nothing&lt;/a&gt;&lt;/code&gt; if passed an empty map.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ce36e576ddae0bdd376d60f5d02b8ec754afca81" translate="yes" xml:space="preserve">
          <source>O(min(n,W)). Retrieves the maximal key of the set, and the set stripped of that element, or &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-maybe#v:Nothing&quot;&gt;Nothing&lt;/a&gt;&lt;/code&gt; if passed an empty set.</source>
          <target state="translated">O (m&amp;iacute;nimo (n, W)). Recupera la clave m&amp;aacute;xima del conjunto y el conjunto despojado de ese elemento, o &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-maybe#v:Nothing&quot;&gt;Nothing&lt;/a&gt;&lt;/code&gt; si se pasa un conjunto vac&amp;iacute;o.</target>
        </trans-unit>
        <trans-unit id="19855047e6595e8f6b94a853c82d2d83fc8a9830" translate="yes" xml:space="preserve">
          <source>O(min(n,W)). Retrieves the maximal key of the set, and the set stripped of that element, or &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-maybe#v:Nothing&quot;&gt;Nothing&lt;/a&gt;&lt;/code&gt; if passed an empty set.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7c82a2d927b0073446296f901ba4d2a7658a41e2" translate="yes" xml:space="preserve">
          <source>O(min(n,W)). Retrieves the minimal (key,value) pair of the map, and the map stripped of that element, or &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-maybe#v:Nothing&quot;&gt;Nothing&lt;/a&gt;&lt;/code&gt; if passed an empty map.</source>
          <target state="translated">O (m&amp;iacute;nimo (n, W)). Recupera el par m&amp;iacute;nimo (clave, valor) del mapa y el mapa sin ese elemento, o &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-maybe#v:Nothing&quot;&gt;Nothing&lt;/a&gt;&lt;/code&gt; si se pasa un mapa vac&amp;iacute;o.</target>
        </trans-unit>
        <trans-unit id="994fd0c4b500030512e95a5eed56a661413a725a" translate="yes" xml:space="preserve">
          <source>O(min(n,W)). Retrieves the minimal (key,value) pair of the map, and the map stripped of that element, or &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-maybe#v:Nothing&quot;&gt;Nothing&lt;/a&gt;&lt;/code&gt; if passed an empty map.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1be892bb62cbd2be0aa55e43cd28f42c3c3c71d2" translate="yes" xml:space="preserve">
          <source>O(min(n,W)). Retrieves the minimal key of the map, and the map stripped of that element, or &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-maybe#v:Nothing&quot;&gt;Nothing&lt;/a&gt;&lt;/code&gt; if passed an empty map.</source>
          <target state="translated">O (m&amp;iacute;nimo (n, W)). Recupera la clave m&amp;iacute;nima del mapa y el mapa despojado de ese elemento, o &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-maybe#v:Nothing&quot;&gt;Nothing&lt;/a&gt;&lt;/code&gt; si se pasa un mapa vac&amp;iacute;o.</target>
        </trans-unit>
        <trans-unit id="373683a1e952881322a8e343c14f9871479dd30c" translate="yes" xml:space="preserve">
          <source>O(min(n,W)). Retrieves the minimal key of the map, and the map stripped of that element, or &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-maybe#v:Nothing&quot;&gt;Nothing&lt;/a&gt;&lt;/code&gt; if passed an empty map.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="469b6c23a404d85496accba6c549a66d730a5b0d" translate="yes" xml:space="preserve">
          <source>O(min(n,W)). Retrieves the minimal key of the set, and the set stripped of that element, or &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-maybe#v:Nothing&quot;&gt;Nothing&lt;/a&gt;&lt;/code&gt; if passed an empty set.</source>
          <target state="translated">O (m&amp;iacute;nimo (n, W)). Recupera la clave m&amp;iacute;nima del conjunto y el conjunto despojado de ese elemento, o &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-maybe#v:Nothing&quot;&gt;Nothing&lt;/a&gt;&lt;/code&gt; si se pasa un conjunto vac&amp;iacute;o.</target>
        </trans-unit>
        <trans-unit id="98d9736c39d0e69f1a3b05e41eca0f02dbf67239" translate="yes" xml:space="preserve">
          <source>O(min(n,W)). Retrieves the minimal key of the set, and the set stripped of that element, or &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-maybe#v:Nothing&quot;&gt;Nothing&lt;/a&gt;&lt;/code&gt; if passed an empty set.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cd27e90b1ea01227ea96de2471d31567a1e9fede" translate="yes" xml:space="preserve">
          <source>O(min(n,W)). The expression (&lt;code&gt;&lt;a href=&quot;data-intmap-lazy#v:alter&quot;&gt;alter&lt;/a&gt; f k map&lt;/code&gt;) alters the value &lt;code&gt;x&lt;/code&gt; at &lt;code&gt;k&lt;/code&gt;, or absence thereof. &lt;code&gt;&lt;a href=&quot;data-intmap-lazy#v:alter&quot;&gt;alter&lt;/a&gt;&lt;/code&gt; can be used to insert, delete, or update a value in an &lt;code&gt;&lt;a href=&quot;data-intmap-lazy#t:IntMap&quot;&gt;IntMap&lt;/a&gt;&lt;/code&gt;. In short : &lt;code&gt;&lt;a href=&quot;data-intmap-lazy#v:lookup&quot;&gt;lookup&lt;/a&gt; k (&lt;a href=&quot;data-intmap-lazy#v:alter&quot;&gt;alter&lt;/a&gt; f k m) = f (&lt;a href=&quot;data-intmap-lazy#v:lookup&quot;&gt;lookup&lt;/a&gt; k m)&lt;/code&gt;.</source>
          <target state="translated">O (m&amp;iacute;nimo (n, W)). La expresi&amp;oacute;n ( &lt;code&gt;&lt;a href=&quot;data-intmap-lazy#v:alter&quot;&gt;alter&lt;/a&gt; f k map&lt;/code&gt; ) altera el valor &lt;code&gt;x&lt;/code&gt; en &lt;code&gt;k&lt;/code&gt; , o su ausencia. &lt;code&gt;&lt;a href=&quot;data-intmap-lazy#v:alter&quot;&gt;alter&lt;/a&gt;&lt;/code&gt; se puede utilizar para insertar, eliminar o actualizar un valor en un &lt;code&gt;&lt;a href=&quot;data-intmap-lazy#t:IntMap&quot;&gt;IntMap&lt;/a&gt;&lt;/code&gt; . En resumen: &lt;code&gt;&lt;a href=&quot;data-intmap-lazy#v:lookup&quot;&gt;lookup&lt;/a&gt; k (&lt;a href=&quot;data-intmap-lazy#v:alter&quot;&gt;alter&lt;/a&gt; f k m) = f (&lt;a href=&quot;data-intmap-lazy#v:lookup&quot;&gt;lookup&lt;/a&gt; k m)&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="8fd4e867156139312dde0368d0f9f11065e8b6a3" translate="yes" xml:space="preserve">
          <source>O(min(n,W)). The expression (&lt;code&gt;&lt;a href=&quot;data-intmap-lazy#v:insertLookupWithKey&quot;&gt;insertLookupWithKey&lt;/a&gt; f k x map&lt;/code&gt;) is a pair where the first element is equal to (&lt;code&gt;&lt;a href=&quot;data-intmap-lazy#v:lookup&quot;&gt;lookup&lt;/a&gt; k map&lt;/code&gt;) and the second element equal to (&lt;code&gt;&lt;a href=&quot;data-intmap-lazy#v:insertWithKey&quot;&gt;insertWithKey&lt;/a&gt; f k x map&lt;/code&gt;).</source>
          <target state="translated">O (m&amp;iacute;nimo (n, W)). La expresi&amp;oacute;n ( &lt;code&gt;&lt;a href=&quot;data-intmap-lazy#v:insertLookupWithKey&quot;&gt;insertLookupWithKey&lt;/a&gt; f k x map&lt;/code&gt; ) es un par donde el primer elemento es igual a ( &lt;code&gt;&lt;a href=&quot;data-intmap-lazy#v:lookup&quot;&gt;lookup&lt;/a&gt; k map&lt;/code&gt; ) y el segundo elemento es igual a ( &lt;code&gt;&lt;a href=&quot;data-intmap-lazy#v:insertWithKey&quot;&gt;insertWithKey&lt;/a&gt; f k x map&lt;/code&gt; ).</target>
        </trans-unit>
        <trans-unit id="266b0390d6b00f983edeef60f0f3a0e707cdf1c6" translate="yes" xml:space="preserve">
          <source>O(min(n,W)). The expression (&lt;code&gt;&lt;a href=&quot;data-intmap-lazy#v:split&quot;&gt;split&lt;/a&gt; k map&lt;/code&gt;) is a pair &lt;code&gt;(map1,map2)&lt;/code&gt; where all keys in &lt;code&gt;map1&lt;/code&gt; are lower than &lt;code&gt;k&lt;/code&gt; and all keys in &lt;code&gt;map2&lt;/code&gt; larger than &lt;code&gt;k&lt;/code&gt;. Any key equal to &lt;code&gt;k&lt;/code&gt; is found in neither &lt;code&gt;map1&lt;/code&gt; nor &lt;code&gt;map2&lt;/code&gt;.</source>
          <target state="translated">O (m&amp;iacute;nimo (n, W)). La expresi&amp;oacute;n ( &lt;code&gt;&lt;a href=&quot;data-intmap-lazy#v:split&quot;&gt;split&lt;/a&gt; k map&lt;/code&gt; ) es un par &lt;code&gt;(map1,map2)&lt;/code&gt; donde todas las claves en &lt;code&gt;map1&lt;/code&gt; son menores que &lt;code&gt;k&lt;/code&gt; y todas las claves en &lt;code&gt;map2&lt;/code&gt; mayores que &lt;code&gt;k&lt;/code&gt; . Cualquier clave igual &lt;code&gt;k&lt;/code&gt; se encuentra ni en &lt;code&gt;map1&lt;/code&gt; ni en &lt;code&gt;map2&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="ed6e8a591b89dda08ed7403a5dbad83f845252b0" translate="yes" xml:space="preserve">
          <source>O(min(n,W)). The expression (&lt;code&gt;&lt;a href=&quot;data-intmap-lazy#v:update&quot;&gt;update&lt;/a&gt; f k map&lt;/code&gt;) updates the value &lt;code&gt;x&lt;/code&gt; at &lt;code&gt;k&lt;/code&gt; (if it is in the map). If (&lt;code&gt;f k x&lt;/code&gt;) is &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-maybe#v:Nothing&quot;&gt;Nothing&lt;/a&gt;&lt;/code&gt;, the element is deleted. If it is (&lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-maybe#v:Just&quot;&gt;Just&lt;/a&gt; y&lt;/code&gt;), the key &lt;code&gt;k&lt;/code&gt; is bound to the new value &lt;code&gt;y&lt;/code&gt;.</source>
          <target state="translated">O (m&amp;iacute;nimo (n, W)). La expresi&amp;oacute;n ( &lt;code&gt;&lt;a href=&quot;data-intmap-lazy#v:update&quot;&gt;update&lt;/a&gt; f k map&lt;/code&gt; ) actualiza el valor &lt;code&gt;x&lt;/code&gt; en &lt;code&gt;k&lt;/code&gt; (si est&amp;aacute; en el mapa). Si ( &lt;code&gt;f k x&lt;/code&gt; ) es &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-maybe#v:Nothing&quot;&gt;Nothing&lt;/a&gt;&lt;/code&gt; , el elemento se elimina. Si es ( &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-maybe#v:Just&quot;&gt;Just&lt;/a&gt; y&lt;/code&gt; ), la clave &lt;code&gt;k&lt;/code&gt; est&amp;aacute; vinculada al nuevo valor &lt;code&gt;y&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="e06930505b370a059079f65cfe2edeed6b2c9b1b" translate="yes" xml:space="preserve">
          <source>O(min(n,W)). The expression (&lt;code&gt;&lt;a href=&quot;data-intmap-lazy#v:update&quot;&gt;update&lt;/a&gt; f k map&lt;/code&gt;) updates the value &lt;code&gt;x&lt;/code&gt; at &lt;code&gt;k&lt;/code&gt; (if it is in the map). If (&lt;code&gt;f k x&lt;/code&gt;) is &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-maybe#v:Nothing&quot;&gt;Nothing&lt;/a&gt;&lt;/code&gt;, the element is deleted. If it is (&lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-maybe#v:Just&quot;&gt;Just&lt;/a&gt; y&lt;/code&gt;), the key &lt;code&gt;k&lt;/code&gt; is bound to the new value &lt;code&gt;y&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="51fce4f2bef6107331beaee085c5f5d86169d4d3" translate="yes" xml:space="preserve">
          <source>O(min(n,W)). The expression (&lt;code&gt;&lt;a href=&quot;data-intmap-lazy#v:update&quot;&gt;update&lt;/a&gt; f k map&lt;/code&gt;) updates the value &lt;code&gt;x&lt;/code&gt; at &lt;code&gt;k&lt;/code&gt; (if it is in the map). If (&lt;code&gt;f x&lt;/code&gt;) is &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-maybe#v:Nothing&quot;&gt;Nothing&lt;/a&gt;&lt;/code&gt;, the element is deleted. If it is (&lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-maybe#v:Just&quot;&gt;Just&lt;/a&gt; y&lt;/code&gt;), the key &lt;code&gt;k&lt;/code&gt; is bound to the new value &lt;code&gt;y&lt;/code&gt;.</source>
          <target state="translated">O (m&amp;iacute;nimo (n, W)). La expresi&amp;oacute;n ( &lt;code&gt;&lt;a href=&quot;data-intmap-lazy#v:update&quot;&gt;update&lt;/a&gt; f k map&lt;/code&gt; ) actualiza el valor &lt;code&gt;x&lt;/code&gt; en &lt;code&gt;k&lt;/code&gt; (si est&amp;aacute; en el mapa). Si ( &lt;code&gt;f x&lt;/code&gt; ) es &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-maybe#v:Nothing&quot;&gt;Nothing&lt;/a&gt;&lt;/code&gt; , el elemento se elimina. Si es ( &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-maybe#v:Just&quot;&gt;Just&lt;/a&gt; y&lt;/code&gt; ), la clave &lt;code&gt;k&lt;/code&gt; est&amp;aacute; vinculada al nuevo valor &lt;code&gt;y&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="190bf4d7c5fbcec8353f776ef9a1b5a6c6061c3b" translate="yes" xml:space="preserve">
          <source>O(min(n,W)). The expression (&lt;code&gt;&lt;a href=&quot;data-intmap-lazy#v:update&quot;&gt;update&lt;/a&gt; f k map&lt;/code&gt;) updates the value &lt;code&gt;x&lt;/code&gt; at &lt;code&gt;k&lt;/code&gt; (if it is in the map). If (&lt;code&gt;f x&lt;/code&gt;) is &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-maybe#v:Nothing&quot;&gt;Nothing&lt;/a&gt;&lt;/code&gt;, the element is deleted. If it is (&lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-maybe#v:Just&quot;&gt;Just&lt;/a&gt; y&lt;/code&gt;), the key &lt;code&gt;k&lt;/code&gt; is bound to the new value &lt;code&gt;y&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b9cad83c9728da4882ca8ec78fbe92e10e97fe9e" translate="yes" xml:space="preserve">
          <source>O(min(n,W)). The expression (&lt;code&gt;&lt;a href=&quot;data-intmap-strict#v:alter&quot;&gt;alter&lt;/a&gt; f k map&lt;/code&gt;) alters the value &lt;code&gt;x&lt;/code&gt; at &lt;code&gt;k&lt;/code&gt;, or absence thereof. &lt;code&gt;&lt;a href=&quot;data-intmap-strict#v:alter&quot;&gt;alter&lt;/a&gt;&lt;/code&gt; can be used to insert, delete, or update a value in an &lt;code&gt;&lt;a href=&quot;data-intmap-strict#t:IntMap&quot;&gt;IntMap&lt;/a&gt;&lt;/code&gt;. In short : &lt;code&gt;&lt;a href=&quot;data-intmap-strict#v:lookup&quot;&gt;lookup&lt;/a&gt; k (&lt;a href=&quot;data-intmap-strict#v:alter&quot;&gt;alter&lt;/a&gt; f k m) = f (&lt;a href=&quot;data-intmap-strict#v:lookup&quot;&gt;lookup&lt;/a&gt; k m)&lt;/code&gt;.</source>
          <target state="translated">O (m&amp;iacute;nimo (n, W)). La expresi&amp;oacute;n ( &lt;code&gt;&lt;a href=&quot;data-intmap-strict#v:alter&quot;&gt;alter&lt;/a&gt; f k map&lt;/code&gt; ) altera el valor &lt;code&gt;x&lt;/code&gt; en &lt;code&gt;k&lt;/code&gt; , o su ausencia. &lt;code&gt;&lt;a href=&quot;data-intmap-strict#v:alter&quot;&gt;alter&lt;/a&gt;&lt;/code&gt; se puede utilizar para insertar, eliminar o actualizar un valor en un &lt;code&gt;&lt;a href=&quot;data-intmap-strict#t:IntMap&quot;&gt;IntMap&lt;/a&gt;&lt;/code&gt; . En resumen: &lt;code&gt;&lt;a href=&quot;data-intmap-strict#v:lookup&quot;&gt;lookup&lt;/a&gt; k (&lt;a href=&quot;data-intmap-strict#v:alter&quot;&gt;alter&lt;/a&gt; f k m) = f (&lt;a href=&quot;data-intmap-strict#v:lookup&quot;&gt;lookup&lt;/a&gt; k m)&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="0652f4655256bab91040a230460e82cf5f363675" translate="yes" xml:space="preserve">
          <source>O(min(n,W)). The expression (&lt;code&gt;&lt;a href=&quot;data-intmap-strict#v:insertLookupWithKey&quot;&gt;insertLookupWithKey&lt;/a&gt; f k x map&lt;/code&gt;) is a pair where the first element is equal to (&lt;code&gt;&lt;a href=&quot;data-intmap-strict#v:lookup&quot;&gt;lookup&lt;/a&gt; k map&lt;/code&gt;) and the second element equal to (&lt;code&gt;&lt;a href=&quot;data-intmap-strict#v:insertWithKey&quot;&gt;insertWithKey&lt;/a&gt; f k x map&lt;/code&gt;).</source>
          <target state="translated">O (m&amp;iacute;nimo (n, W)). La expresi&amp;oacute;n ( &lt;code&gt;&lt;a href=&quot;data-intmap-strict#v:insertLookupWithKey&quot;&gt;insertLookupWithKey&lt;/a&gt; f k x map&lt;/code&gt; ) es un par donde el primer elemento es igual a ( &lt;code&gt;&lt;a href=&quot;data-intmap-strict#v:lookup&quot;&gt;lookup&lt;/a&gt; k map&lt;/code&gt; ) y el segundo elemento es igual a ( &lt;code&gt;&lt;a href=&quot;data-intmap-strict#v:insertWithKey&quot;&gt;insertWithKey&lt;/a&gt; f k x map&lt;/code&gt; ).</target>
        </trans-unit>
        <trans-unit id="3f646c831ba90d65ef185c306ad9dea4a6e73920" translate="yes" xml:space="preserve">
          <source>O(min(n,W)). The expression (&lt;code&gt;&lt;a href=&quot;data-intmap-strict#v:split&quot;&gt;split&lt;/a&gt; k map&lt;/code&gt;) is a pair &lt;code&gt;(map1,map2)&lt;/code&gt; where all keys in &lt;code&gt;map1&lt;/code&gt; are lower than &lt;code&gt;k&lt;/code&gt; and all keys in &lt;code&gt;map2&lt;/code&gt; larger than &lt;code&gt;k&lt;/code&gt;. Any key equal to &lt;code&gt;k&lt;/code&gt; is found in neither &lt;code&gt;map1&lt;/code&gt; nor &lt;code&gt;map2&lt;/code&gt;.</source>
          <target state="translated">O (m&amp;iacute;nimo (n, W)). La expresi&amp;oacute;n ( &lt;code&gt;&lt;a href=&quot;data-intmap-strict#v:split&quot;&gt;split&lt;/a&gt; k map&lt;/code&gt; ) es un par &lt;code&gt;(map1,map2)&lt;/code&gt; donde todas las claves en &lt;code&gt;map1&lt;/code&gt; son menores que &lt;code&gt;k&lt;/code&gt; y todas las claves en &lt;code&gt;map2&lt;/code&gt; mayores que &lt;code&gt;k&lt;/code&gt; . Cualquier clave igual &lt;code&gt;k&lt;/code&gt; se encuentra ni en &lt;code&gt;map1&lt;/code&gt; ni en &lt;code&gt;map2&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="a51d89473766e051358bac859785370dd5b5c713" translate="yes" xml:space="preserve">
          <source>O(min(n,W)). The expression (&lt;code&gt;&lt;a href=&quot;data-intmap-strict#v:update&quot;&gt;update&lt;/a&gt; f k map&lt;/code&gt;) updates the value &lt;code&gt;x&lt;/code&gt; at &lt;code&gt;k&lt;/code&gt; (if it is in the map). If (&lt;code&gt;f k x&lt;/code&gt;) is &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-maybe#v:Nothing&quot;&gt;Nothing&lt;/a&gt;&lt;/code&gt;, the element is deleted. If it is (&lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-maybe#v:Just&quot;&gt;Just&lt;/a&gt; y&lt;/code&gt;), the key &lt;code&gt;k&lt;/code&gt; is bound to the new value &lt;code&gt;y&lt;/code&gt;.</source>
          <target state="translated">O (m&amp;iacute;nimo (n, W)). La expresi&amp;oacute;n ( &lt;code&gt;&lt;a href=&quot;data-intmap-strict#v:update&quot;&gt;update&lt;/a&gt; f k map&lt;/code&gt; ) actualiza el valor &lt;code&gt;x&lt;/code&gt; en &lt;code&gt;k&lt;/code&gt; (si est&amp;aacute; en el mapa). Si ( &lt;code&gt;f k x&lt;/code&gt; ) es &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-maybe#v:Nothing&quot;&gt;Nothing&lt;/a&gt;&lt;/code&gt; , el elemento se elimina. Si es ( &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-maybe#v:Just&quot;&gt;Just&lt;/a&gt; y&lt;/code&gt; ), la clave &lt;code&gt;k&lt;/code&gt; est&amp;aacute; vinculada al nuevo valor &lt;code&gt;y&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="6a7a68b549d492f88bf91b659438a37a3cec7759" translate="yes" xml:space="preserve">
          <source>O(min(n,W)). The expression (&lt;code&gt;&lt;a href=&quot;data-intmap-strict#v:update&quot;&gt;update&lt;/a&gt; f k map&lt;/code&gt;) updates the value &lt;code&gt;x&lt;/code&gt; at &lt;code&gt;k&lt;/code&gt; (if it is in the map). If (&lt;code&gt;f k x&lt;/code&gt;) is &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-maybe#v:Nothing&quot;&gt;Nothing&lt;/a&gt;&lt;/code&gt;, the element is deleted. If it is (&lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-maybe#v:Just&quot;&gt;Just&lt;/a&gt; y&lt;/code&gt;), the key &lt;code&gt;k&lt;/code&gt; is bound to the new value &lt;code&gt;y&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e01cae26910e95c1a23515f1272d5399633f88cd" translate="yes" xml:space="preserve">
          <source>O(min(n,W)). The expression (&lt;code&gt;&lt;a href=&quot;data-intmap-strict#v:update&quot;&gt;update&lt;/a&gt; f k map&lt;/code&gt;) updates the value &lt;code&gt;x&lt;/code&gt; at &lt;code&gt;k&lt;/code&gt; (if it is in the map). If (&lt;code&gt;f x&lt;/code&gt;) is &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-maybe#v:Nothing&quot;&gt;Nothing&lt;/a&gt;&lt;/code&gt;, the element is deleted. If it is (&lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-maybe#v:Just&quot;&gt;Just&lt;/a&gt; y&lt;/code&gt;), the key &lt;code&gt;k&lt;/code&gt; is bound to the new value &lt;code&gt;y&lt;/code&gt;.</source>
          <target state="translated">O (m&amp;iacute;nimo (n, W)). La expresi&amp;oacute;n ( &lt;code&gt;&lt;a href=&quot;data-intmap-strict#v:update&quot;&gt;update&lt;/a&gt; f k map&lt;/code&gt; ) actualiza el valor &lt;code&gt;x&lt;/code&gt; en &lt;code&gt;k&lt;/code&gt; (si est&amp;aacute; en el mapa). Si ( &lt;code&gt;f x&lt;/code&gt; ) es &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-maybe#v:Nothing&quot;&gt;Nothing&lt;/a&gt;&lt;/code&gt; , el elemento se elimina. Si es ( &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-maybe#v:Just&quot;&gt;Just&lt;/a&gt; y&lt;/code&gt; ), la clave &lt;code&gt;k&lt;/code&gt; est&amp;aacute; vinculada al nuevo valor &lt;code&gt;y&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="c5f4134065090b867f03f07b95400b700c125576" translate="yes" xml:space="preserve">
          <source>O(min(n,W)). The expression (&lt;code&gt;&lt;a href=&quot;data-intmap-strict#v:update&quot;&gt;update&lt;/a&gt; f k map&lt;/code&gt;) updates the value &lt;code&gt;x&lt;/code&gt; at &lt;code&gt;k&lt;/code&gt; (if it is in the map). If (&lt;code&gt;f x&lt;/code&gt;) is &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-maybe#v:Nothing&quot;&gt;Nothing&lt;/a&gt;&lt;/code&gt;, the element is deleted. If it is (&lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-maybe#v:Just&quot;&gt;Just&lt;/a&gt; y&lt;/code&gt;), the key &lt;code&gt;k&lt;/code&gt; is bound to the new value &lt;code&gt;y&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f6d12519aee971d473191d3870175501fa5a2e33" translate="yes" xml:space="preserve">
          <source>O(min(n,W)). The expression (&lt;code&gt;&lt;a href=&quot;data-intmap-strict-internal#v:alter&quot;&gt;alter&lt;/a&gt; f k map&lt;/code&gt;) alters the value &lt;code&gt;x&lt;/code&gt; at &lt;code&gt;k&lt;/code&gt;, or absence thereof. &lt;code&gt;&lt;a href=&quot;data-intmap-strict-internal#v:alter&quot;&gt;alter&lt;/a&gt;&lt;/code&gt; can be used to insert, delete, or update a value in an &lt;code&gt;&lt;a href=&quot;data-intmap-strict-internal#t:IntMap&quot;&gt;IntMap&lt;/a&gt;&lt;/code&gt;. In short : &lt;code&gt;&lt;a href=&quot;data-intmap-strict-internal#v:lookup&quot;&gt;lookup&lt;/a&gt; k (&lt;a href=&quot;data-intmap-strict-internal#v:alter&quot;&gt;alter&lt;/a&gt; f k m) = f (&lt;a href=&quot;data-intmap-strict-internal#v:lookup&quot;&gt;lookup&lt;/a&gt; k m)&lt;/code&gt;.</source>
          <target state="translated">O (m&amp;iacute;nimo (n, W)). La expresi&amp;oacute;n ( &lt;code&gt;&lt;a href=&quot;data-intmap-strict-internal#v:alter&quot;&gt;alter&lt;/a&gt; f k map&lt;/code&gt; ) altera el valor &lt;code&gt;x&lt;/code&gt; en &lt;code&gt;k&lt;/code&gt; , o su ausencia. &lt;code&gt;&lt;a href=&quot;data-intmap-strict-internal#v:alter&quot;&gt;alter&lt;/a&gt;&lt;/code&gt; se puede utilizar para insertar, eliminar o actualizar un valor en un &lt;code&gt;&lt;a href=&quot;data-intmap-strict-internal#t:IntMap&quot;&gt;IntMap&lt;/a&gt;&lt;/code&gt; . En resumen: &lt;code&gt;&lt;a href=&quot;data-intmap-strict-internal#v:lookup&quot;&gt;lookup&lt;/a&gt; k (&lt;a href=&quot;data-intmap-strict-internal#v:alter&quot;&gt;alter&lt;/a&gt; f k m) = f (&lt;a href=&quot;data-intmap-strict-internal#v:lookup&quot;&gt;lookup&lt;/a&gt; k m)&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="9575c87c5d3abe67695c17223a036913a00176b3" translate="yes" xml:space="preserve">
          <source>O(min(n,W)). The expression (&lt;code&gt;&lt;a href=&quot;data-intmap-strict-internal#v:insertLookupWithKey&quot;&gt;insertLookupWithKey&lt;/a&gt; f k x map&lt;/code&gt;) is a pair where the first element is equal to (&lt;code&gt;&lt;a href=&quot;data-intmap-strict-internal#v:lookup&quot;&gt;lookup&lt;/a&gt; k map&lt;/code&gt;) and the second element equal to (&lt;code&gt;&lt;a href=&quot;data-intmap-strict-internal#v:insertWithKey&quot;&gt;insertWithKey&lt;/a&gt; f k x map&lt;/code&gt;).</source>
          <target state="translated">O (m&amp;iacute;nimo (n, W)). La expresi&amp;oacute;n ( &lt;code&gt;&lt;a href=&quot;data-intmap-strict-internal#v:insertLookupWithKey&quot;&gt;insertLookupWithKey&lt;/a&gt; f k x map&lt;/code&gt; ) es un par donde el primer elemento es igual a ( &lt;code&gt;&lt;a href=&quot;data-intmap-strict-internal#v:lookup&quot;&gt;lookup&lt;/a&gt; k map&lt;/code&gt; ) y el segundo elemento es igual a ( &lt;code&gt;&lt;a href=&quot;data-intmap-strict-internal#v:insertWithKey&quot;&gt;insertWithKey&lt;/a&gt; f k x map&lt;/code&gt; ).</target>
        </trans-unit>
        <trans-unit id="dbdb163a374f9647fb79abaff3f3fc565835835c" translate="yes" xml:space="preserve">
          <source>O(min(n,W)). The expression (&lt;code&gt;&lt;a href=&quot;data-intmap-strict-internal#v:split&quot;&gt;split&lt;/a&gt; k map&lt;/code&gt;) is a pair &lt;code&gt;(map1,map2)&lt;/code&gt; where all keys in &lt;code&gt;map1&lt;/code&gt; are lower than &lt;code&gt;k&lt;/code&gt; and all keys in &lt;code&gt;map2&lt;/code&gt; larger than &lt;code&gt;k&lt;/code&gt;. Any key equal to &lt;code&gt;k&lt;/code&gt; is found in neither &lt;code&gt;map1&lt;/code&gt; nor &lt;code&gt;map2&lt;/code&gt;.</source>
          <target state="translated">O (m&amp;iacute;nimo (n, W)). La expresi&amp;oacute;n ( &lt;code&gt;&lt;a href=&quot;data-intmap-strict-internal#v:split&quot;&gt;split&lt;/a&gt; k map&lt;/code&gt; ) es un par &lt;code&gt;(map1,map2)&lt;/code&gt; donde todas las claves en &lt;code&gt;map1&lt;/code&gt; son menores que &lt;code&gt;k&lt;/code&gt; y todas las claves en &lt;code&gt;map2&lt;/code&gt; mayores que &lt;code&gt;k&lt;/code&gt; . Cualquier clave igual &lt;code&gt;k&lt;/code&gt; se encuentra ni en &lt;code&gt;map1&lt;/code&gt; ni en &lt;code&gt;map2&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="236490cb13c15424f56d1fb207431191cf8c51cd" translate="yes" xml:space="preserve">
          <source>O(min(n,W)). The expression (&lt;code&gt;&lt;a href=&quot;data-intmap-strict-internal#v:update&quot;&gt;update&lt;/a&gt; f k map&lt;/code&gt;) updates the value &lt;code&gt;x&lt;/code&gt; at &lt;code&gt;k&lt;/code&gt; (if it is in the map). If (&lt;code&gt;f k x&lt;/code&gt;) is &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-maybe#v:Nothing&quot;&gt;Nothing&lt;/a&gt;&lt;/code&gt;, the element is deleted. If it is (&lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-maybe#v:Just&quot;&gt;Just&lt;/a&gt; y&lt;/code&gt;), the key &lt;code&gt;k&lt;/code&gt; is bound to the new value &lt;code&gt;y&lt;/code&gt;.</source>
          <target state="translated">O (m&amp;iacute;nimo (n, W)). La expresi&amp;oacute;n ( &lt;code&gt;&lt;a href=&quot;data-intmap-strict-internal#v:update&quot;&gt;update&lt;/a&gt; f k map&lt;/code&gt; ) actualiza el valor &lt;code&gt;x&lt;/code&gt; en &lt;code&gt;k&lt;/code&gt; (si est&amp;aacute; en el mapa). Si ( &lt;code&gt;f k x&lt;/code&gt; ) es &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-maybe#v:Nothing&quot;&gt;Nothing&lt;/a&gt;&lt;/code&gt; , el elemento se elimina. Si es ( &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-maybe#v:Just&quot;&gt;Just&lt;/a&gt; y&lt;/code&gt; ), la clave &lt;code&gt;k&lt;/code&gt; est&amp;aacute; vinculada al nuevo valor &lt;code&gt;y&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="a50b6cc5e04376dd1894ceae33eb37696d0cd49b" translate="yes" xml:space="preserve">
          <source>O(min(n,W)). The expression (&lt;code&gt;&lt;a href=&quot;data-intmap-strict-internal#v:update&quot;&gt;update&lt;/a&gt; f k map&lt;/code&gt;) updates the value &lt;code&gt;x&lt;/code&gt; at &lt;code&gt;k&lt;/code&gt; (if it is in the map). If (&lt;code&gt;f k x&lt;/code&gt;) is &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-maybe#v:Nothing&quot;&gt;Nothing&lt;/a&gt;&lt;/code&gt;, the element is deleted. If it is (&lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-maybe#v:Just&quot;&gt;Just&lt;/a&gt; y&lt;/code&gt;), the key &lt;code&gt;k&lt;/code&gt; is bound to the new value &lt;code&gt;y&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3d3f0692e3303c59a1fb1333530540edfd33a8e4" translate="yes" xml:space="preserve">
          <source>O(min(n,W)). The expression (&lt;code&gt;&lt;a href=&quot;data-intmap-strict-internal#v:update&quot;&gt;update&lt;/a&gt; f k map&lt;/code&gt;) updates the value &lt;code&gt;x&lt;/code&gt; at &lt;code&gt;k&lt;/code&gt; (if it is in the map). If (&lt;code&gt;f x&lt;/code&gt;) is &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-maybe#v:Nothing&quot;&gt;Nothing&lt;/a&gt;&lt;/code&gt;, the element is deleted. If it is (&lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-maybe#v:Just&quot;&gt;Just&lt;/a&gt; y&lt;/code&gt;), the key &lt;code&gt;k&lt;/code&gt; is bound to the new value &lt;code&gt;y&lt;/code&gt;.</source>
          <target state="translated">O (m&amp;iacute;nimo (n, W)). La expresi&amp;oacute;n ( &lt;code&gt;&lt;a href=&quot;data-intmap-strict-internal#v:update&quot;&gt;update&lt;/a&gt; f k map&lt;/code&gt; ) actualiza el valor &lt;code&gt;x&lt;/code&gt; en &lt;code&gt;k&lt;/code&gt; (si est&amp;aacute; en el mapa). Si ( &lt;code&gt;f x&lt;/code&gt; ) es &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-maybe#v:Nothing&quot;&gt;Nothing&lt;/a&gt;&lt;/code&gt; , el elemento se elimina. Si es ( &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-maybe#v:Just&quot;&gt;Just&lt;/a&gt; y&lt;/code&gt; ), la clave &lt;code&gt;k&lt;/code&gt; est&amp;aacute; vinculada al nuevo valor &lt;code&gt;y&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="9b4a3486e754983c68e04d197a841e993873f991" translate="yes" xml:space="preserve">
          <source>O(min(n,W)). The expression (&lt;code&gt;&lt;a href=&quot;data-intmap-strict-internal#v:update&quot;&gt;update&lt;/a&gt; f k map&lt;/code&gt;) updates the value &lt;code&gt;x&lt;/code&gt; at &lt;code&gt;k&lt;/code&gt; (if it is in the map). If (&lt;code&gt;f x&lt;/code&gt;) is &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-maybe#v:Nothing&quot;&gt;Nothing&lt;/a&gt;&lt;/code&gt;, the element is deleted. If it is (&lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-maybe#v:Just&quot;&gt;Just&lt;/a&gt; y&lt;/code&gt;), the key &lt;code&gt;k&lt;/code&gt; is bound to the new value &lt;code&gt;y&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9a99f7249f68857509851cc7453a1aeb180e694f" translate="yes" xml:space="preserve">
          <source>O(min(n,W)). The expression (&lt;code&gt;&lt;a href=&quot;data-intset#v:split&quot;&gt;split&lt;/a&gt; x set&lt;/code&gt;) is a pair &lt;code&gt;(set1,set2)&lt;/code&gt; where &lt;code&gt;set1&lt;/code&gt; comprises the elements of &lt;code&gt;set&lt;/code&gt; less than &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;set2&lt;/code&gt; comprises the elements of &lt;code&gt;set&lt;/code&gt; greater than &lt;code&gt;x&lt;/code&gt;.</source>
          <target state="translated">O (m&amp;iacute;nimo (n, W)). La expresi&amp;oacute;n ( &lt;code&gt;&lt;a href=&quot;data-intset#v:split&quot;&gt;split&lt;/a&gt; x set&lt;/code&gt; ) es un par &lt;code&gt;(set1,set2)&lt;/code&gt; donde &lt;code&gt;set1&lt;/code&gt; comprende los elementos del &lt;code&gt;set&lt;/code&gt; menor que &lt;code&gt;x&lt;/code&gt; y &lt;code&gt;set2&lt;/code&gt; comprende los elementos del &lt;code&gt;set&lt;/code&gt; mayor que &lt;code&gt;x&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="7e1b97b65f6d08668e9082cd73b6206c29041153" translate="yes" xml:space="preserve">
          <source>O(min(n,W)). The expression (&lt;code&gt;&lt;a href=&quot;data-intset-internal#v:split&quot;&gt;split&lt;/a&gt; x set&lt;/code&gt;) is a pair &lt;code&gt;(set1,set2)&lt;/code&gt; where &lt;code&gt;set1&lt;/code&gt; comprises the elements of &lt;code&gt;set&lt;/code&gt; less than &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;set2&lt;/code&gt; comprises the elements of &lt;code&gt;set&lt;/code&gt; greater than &lt;code&gt;x&lt;/code&gt;.</source>
          <target state="translated">O (m&amp;iacute;nimo (n, W)). La expresi&amp;oacute;n ( &lt;code&gt;&lt;a href=&quot;data-intset-internal#v:split&quot;&gt;split&lt;/a&gt; x set&lt;/code&gt; ) es un par &lt;code&gt;(set1,set2)&lt;/code&gt; donde &lt;code&gt;set1&lt;/code&gt; comprende los elementos del &lt;code&gt;set&lt;/code&gt; menor que &lt;code&gt;x&lt;/code&gt; y &lt;code&gt;set2&lt;/code&gt; comprende los elementos del &lt;code&gt;set&lt;/code&gt; mayor que &lt;code&gt;x&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="99d7a107634b57c1fd8a22f088cbcca75cf1269a" translate="yes" xml:space="preserve">
          <source>O(min(n,W)). The expression &lt;code&gt;(&lt;a href=&quot;data-intmap-lazy#v:findWithDefault&quot;&gt;findWithDefault&lt;/a&gt; def k map)&lt;/code&gt; returns the value at key &lt;code&gt;k&lt;/code&gt; or returns &lt;code&gt;def&lt;/code&gt; when the key is not an element of the map.</source>
          <target state="translated">O (m&amp;iacute;nimo (n, W)). La expresi&amp;oacute;n &lt;code&gt;(&lt;a href=&quot;data-intmap-lazy#v:findWithDefault&quot;&gt;findWithDefault&lt;/a&gt; def k map)&lt;/code&gt; devuelve el valor en la clave &lt;code&gt;k&lt;/code&gt; o devuelve &lt;code&gt;def&lt;/code&gt; cuando la clave no es un elemento del mapa.</target>
        </trans-unit>
        <trans-unit id="95a141af56f4ed1671f18c9eafee704e53edbe14" translate="yes" xml:space="preserve">
          <source>O(min(n,W)). The expression &lt;code&gt;(&lt;a href=&quot;data-intmap-strict#v:findWithDefault&quot;&gt;findWithDefault&lt;/a&gt; def k map)&lt;/code&gt; returns the value at key &lt;code&gt;k&lt;/code&gt; or returns &lt;code&gt;def&lt;/code&gt; when the key is not an element of the map.</source>
          <target state="translated">O (m&amp;iacute;nimo (n, W)). La expresi&amp;oacute;n &lt;code&gt;(&lt;a href=&quot;data-intmap-strict#v:findWithDefault&quot;&gt;findWithDefault&lt;/a&gt; def k map)&lt;/code&gt; devuelve el valor en la clave &lt;code&gt;k&lt;/code&gt; o devuelve &lt;code&gt;def&lt;/code&gt; cuando la clave no es un elemento del mapa.</target>
        </trans-unit>
        <trans-unit id="6e1e01d67b84403261eb50f2450959f4e5fe235c" translate="yes" xml:space="preserve">
          <source>O(min(n,W)). The expression &lt;code&gt;(&lt;a href=&quot;data-intmap-strict-internal#v:findWithDefault&quot;&gt;findWithDefault&lt;/a&gt; def k map)&lt;/code&gt; returns the value at key &lt;code&gt;k&lt;/code&gt; or returns &lt;code&gt;def&lt;/code&gt; when the key is not an element of the map.</source>
          <target state="translated">O (m&amp;iacute;nimo (n, W)). La expresi&amp;oacute;n &lt;code&gt;(&lt;a href=&quot;data-intmap-strict-internal#v:findWithDefault&quot;&gt;findWithDefault&lt;/a&gt; def k map)&lt;/code&gt; devuelve el valor en la clave &lt;code&gt;k&lt;/code&gt; o devuelve &lt;code&gt;def&lt;/code&gt; cuando la clave no es un elemento del mapa.</target>
        </trans-unit>
        <trans-unit id="b6dc5fc3cdf1b4d125926300ee26c65bed49f551" translate="yes" xml:space="preserve">
          <source>O(min(n,W)). The maximal element of a set.</source>
          <target state="translated">O(min(n,W)).El elemento máximo de un conjunto.</target>
        </trans-unit>
        <trans-unit id="d2462cacf54cf720366db6deb2c7efbf159d474f" translate="yes" xml:space="preserve">
          <source>O(min(n,W)). The maximal key of the map. Calls &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/prelude#v:error&quot;&gt;error&lt;/a&gt;&lt;/code&gt; if the map is empty. Use &lt;code&gt;&lt;a href=&quot;data-intmap-lazy#v:maxViewWithKey&quot;&gt;maxViewWithKey&lt;/a&gt;&lt;/code&gt; if the map may be empty.</source>
          <target state="translated">O (m&amp;iacute;nimo (n, W)). La clave m&amp;aacute;xima del mapa. Llama a &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/prelude#v:error&quot;&gt;error&lt;/a&gt;&lt;/code&gt; si el mapa est&amp;aacute; vac&amp;iacute;o. Utilice &lt;code&gt;&lt;a href=&quot;data-intmap-lazy#v:maxViewWithKey&quot;&gt;maxViewWithKey&lt;/a&gt;&lt;/code&gt; si el mapa puede estar vac&amp;iacute;o.</target>
        </trans-unit>
        <trans-unit id="57f11967cfd21e6f14248db000b5cc1d3388caee" translate="yes" xml:space="preserve">
          <source>O(min(n,W)). The maximal key of the map. Calls &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/prelude#v:error&quot;&gt;error&lt;/a&gt;&lt;/code&gt; if the map is empty. Use &lt;code&gt;&lt;a href=&quot;data-intmap-strict#v:maxViewWithKey&quot;&gt;maxViewWithKey&lt;/a&gt;&lt;/code&gt; if the map may be empty.</source>
          <target state="translated">O (m&amp;iacute;nimo (n, W)). La clave m&amp;aacute;xima del mapa. Llama a &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/prelude#v:error&quot;&gt;error&lt;/a&gt;&lt;/code&gt; si el mapa est&amp;aacute; vac&amp;iacute;o. Utilice &lt;code&gt;&lt;a href=&quot;data-intmap-strict#v:maxViewWithKey&quot;&gt;maxViewWithKey&lt;/a&gt;&lt;/code&gt; si el mapa puede estar vac&amp;iacute;o.</target>
        </trans-unit>
        <trans-unit id="1b268c696265ac398cffef739604d9c4512fbfa9" translate="yes" xml:space="preserve">
          <source>O(min(n,W)). The maximal key of the map. Calls &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/prelude#v:error&quot;&gt;error&lt;/a&gt;&lt;/code&gt; if the map is empty. Use &lt;code&gt;&lt;a href=&quot;data-intmap-strict-internal#v:maxViewWithKey&quot;&gt;maxViewWithKey&lt;/a&gt;&lt;/code&gt; if the map may be empty.</source>
          <target state="translated">O (m&amp;iacute;nimo (n, W)). La clave m&amp;aacute;xima del mapa. Llama a &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/prelude#v:error&quot;&gt;error&lt;/a&gt;&lt;/code&gt; si el mapa est&amp;aacute; vac&amp;iacute;o. Utilice &lt;code&gt;&lt;a href=&quot;data-intmap-strict-internal#v:maxViewWithKey&quot;&gt;maxViewWithKey&lt;/a&gt;&lt;/code&gt; si el mapa puede estar vac&amp;iacute;o.</target>
        </trans-unit>
        <trans-unit id="970f0b32d5c1a9ff03f6b35fc7dff2e2006f4723" translate="yes" xml:space="preserve">
          <source>O(min(n,W)). The maximal key of the map. Calls &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/prelude#v:error&quot;&gt;error&lt;/a&gt;&lt;/code&gt; if the map is empty. Use &lt;code&gt;&lt;a href=&quot;data-intmap-lazy#v:maxViewWithKey&quot;&gt;maxViewWithKey&lt;/a&gt;&lt;/code&gt; if the map may be empty.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7a39d43587a76550904d81dca41aad887315aa04" translate="yes" xml:space="preserve">
          <source>O(min(n,W)). The maximal key of the map. Calls &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/prelude#v:error&quot;&gt;error&lt;/a&gt;&lt;/code&gt; if the map is empty. Use &lt;code&gt;&lt;a href=&quot;data-intmap-strict#v:maxViewWithKey&quot;&gt;maxViewWithKey&lt;/a&gt;&lt;/code&gt; if the map may be empty.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="25b05b5a4ea1f820bf1b225ab155a270619c581b" translate="yes" xml:space="preserve">
          <source>O(min(n,W)). The maximal key of the map. Calls &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/prelude#v:error&quot;&gt;error&lt;/a&gt;&lt;/code&gt; if the map is empty. Use &lt;code&gt;&lt;a href=&quot;data-intmap-strict-internal#v:maxViewWithKey&quot;&gt;maxViewWithKey&lt;/a&gt;&lt;/code&gt; if the map may be empty.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="37d62a30eab747bbb6f31327bf0078374495d1b3" translate="yes" xml:space="preserve">
          <source>O(min(n,W)). The maximal key of the map. Returns &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-maybe#v:Nothing&quot;&gt;Nothing&lt;/a&gt;&lt;/code&gt; if the map is empty.</source>
          <target state="translated">O (m&amp;iacute;nimo (n, W)). La clave m&amp;aacute;xima del mapa. Devuelve &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-maybe#v:Nothing&quot;&gt;Nothing&lt;/a&gt;&lt;/code&gt; si el mapa est&amp;aacute; vac&amp;iacute;o.</target>
        </trans-unit>
        <trans-unit id="dd67bf6c006e4618d487ea59ecfdf470bfd21e5f" translate="yes" xml:space="preserve">
          <source>O(min(n,W)). The maximal key of the map. Returns &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-maybe#v:Nothing&quot;&gt;Nothing&lt;/a&gt;&lt;/code&gt; if the map is empty.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7c3666b7eb2b8c6f957e79ee0dec5b883ddd516d" translate="yes" xml:space="preserve">
          <source>O(min(n,W)). The minimal element of the set.</source>
          <target state="translated">O(min(n,W)).El elemento mínimo del conjunto.</target>
        </trans-unit>
        <trans-unit id="ff6fbb91e22a64aed6579b3e2cbfa4ccefbf8ab1" translate="yes" xml:space="preserve">
          <source>O(min(n,W)). The minimal key of the map. Calls &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/prelude#v:error&quot;&gt;error&lt;/a&gt;&lt;/code&gt; if the map is empty. Use &lt;code&gt;&lt;a href=&quot;data-intmap-lazy#v:minViewWithKey&quot;&gt;minViewWithKey&lt;/a&gt;&lt;/code&gt; if the map may be empty.</source>
          <target state="translated">O (m&amp;iacute;nimo (n, W)). La clave m&amp;iacute;nima del mapa. Llama a &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/prelude#v:error&quot;&gt;error&lt;/a&gt;&lt;/code&gt; si el mapa est&amp;aacute; vac&amp;iacute;o. Utilice &lt;code&gt;&lt;a href=&quot;data-intmap-lazy#v:minViewWithKey&quot;&gt;minViewWithKey&lt;/a&gt;&lt;/code&gt; si el mapa puede estar vac&amp;iacute;o.</target>
        </trans-unit>
        <trans-unit id="4fe4b833f1d465cd1359db33e5075e57beb5249e" translate="yes" xml:space="preserve">
          <source>O(min(n,W)). The minimal key of the map. Calls &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/prelude#v:error&quot;&gt;error&lt;/a&gt;&lt;/code&gt; if the map is empty. Use &lt;code&gt;&lt;a href=&quot;data-intmap-strict#v:minViewWithKey&quot;&gt;minViewWithKey&lt;/a&gt;&lt;/code&gt; if the map may be empty.</source>
          <target state="translated">O (m&amp;iacute;nimo (n, W)). La clave m&amp;iacute;nima del mapa. Llama a &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/prelude#v:error&quot;&gt;error&lt;/a&gt;&lt;/code&gt; si el mapa est&amp;aacute; vac&amp;iacute;o. Utilice &lt;code&gt;&lt;a href=&quot;data-intmap-strict#v:minViewWithKey&quot;&gt;minViewWithKey&lt;/a&gt;&lt;/code&gt; si el mapa puede estar vac&amp;iacute;o.</target>
        </trans-unit>
        <trans-unit id="98b675d209fae92bedecdf6c9acf093358e627b5" translate="yes" xml:space="preserve">
          <source>O(min(n,W)). The minimal key of the map. Calls &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/prelude#v:error&quot;&gt;error&lt;/a&gt;&lt;/code&gt; if the map is empty. Use &lt;code&gt;&lt;a href=&quot;data-intmap-strict-internal#v:minViewWithKey&quot;&gt;minViewWithKey&lt;/a&gt;&lt;/code&gt; if the map may be empty.</source>
          <target state="translated">O (m&amp;iacute;nimo (n, W)). La clave m&amp;iacute;nima del mapa. Llama a &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/prelude#v:error&quot;&gt;error&lt;/a&gt;&lt;/code&gt; si el mapa est&amp;aacute; vac&amp;iacute;o. Utilice &lt;code&gt;&lt;a href=&quot;data-intmap-strict-internal#v:minViewWithKey&quot;&gt;minViewWithKey&lt;/a&gt;&lt;/code&gt; si el mapa puede estar vac&amp;iacute;o.</target>
        </trans-unit>
        <trans-unit id="81cd051910d850c6553db9d34e0a76d126fc33c7" translate="yes" xml:space="preserve">
          <source>O(min(n,W)). The minimal key of the map. Calls &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/prelude#v:error&quot;&gt;error&lt;/a&gt;&lt;/code&gt; if the map is empty. Use &lt;code&gt;&lt;a href=&quot;data-intmap-lazy#v:minViewWithKey&quot;&gt;minViewWithKey&lt;/a&gt;&lt;/code&gt; if the map may be empty.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="87ded224ee0ecbc9d49904472f28e00d5cab6993" translate="yes" xml:space="preserve">
          <source>O(min(n,W)). The minimal key of the map. Calls &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/prelude#v:error&quot;&gt;error&lt;/a&gt;&lt;/code&gt; if the map is empty. Use &lt;code&gt;&lt;a href=&quot;data-intmap-strict#v:minViewWithKey&quot;&gt;minViewWithKey&lt;/a&gt;&lt;/code&gt; if the map may be empty.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cfe79aa1b2e7a9d8f671e53117f8bf76e5833bb7" translate="yes" xml:space="preserve">
          <source>O(min(n,W)). The minimal key of the map. Calls &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/prelude#v:error&quot;&gt;error&lt;/a&gt;&lt;/code&gt; if the map is empty. Use &lt;code&gt;&lt;a href=&quot;data-intmap-strict-internal#v:minViewWithKey&quot;&gt;minViewWithKey&lt;/a&gt;&lt;/code&gt; if the map may be empty.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3c3fc2f09c1fb6396ee7140ecf01f62a8158f9f3" translate="yes" xml:space="preserve">
          <source>O(min(n,W)). The minimal key of the map. Returns &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-maybe#v:Nothing&quot;&gt;Nothing&lt;/a&gt;&lt;/code&gt; if the map is empty.</source>
          <target state="translated">O (m&amp;iacute;nimo (n, W)). La clave m&amp;iacute;nima del mapa. Devuelve &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-maybe#v:Nothing&quot;&gt;Nothing&lt;/a&gt;&lt;/code&gt; si el mapa est&amp;aacute; vac&amp;iacute;o.</target>
        </trans-unit>
        <trans-unit id="6c646bf841c9a523f6cae3ce8de4ee8935ebb6d3" translate="yes" xml:space="preserve">
          <source>O(min(n,W)). The minimal key of the map. Returns &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-maybe#v:Nothing&quot;&gt;Nothing&lt;/a&gt;&lt;/code&gt; if the map is empty.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8ddef42511439715463c262dd647510bb923a656" translate="yes" xml:space="preserve">
          <source>O(min(n,W)). Update the value at the maximal key.</source>
          <target state="translated">O(min(n,W)).Actualiza el valor en la clave máxima.</target>
        </trans-unit>
        <trans-unit id="6a7e4dac78f253520454d472d33abf2be556456f" translate="yes" xml:space="preserve">
          <source>O(min(n,W)). Update the value at the minimal key.</source>
          <target state="translated">O(min(n,W)).Actualiza el valor en la clave mínima.</target>
        </trans-unit>
        <trans-unit id="82fc215a1cbeb6b03841f93c9302c2b33f044a65" translate="yes" xml:space="preserve">
          <source>O(n) A strict version of &lt;code&gt;&lt;a href=&quot;data-text#v:foldl&quot;&gt;foldl&lt;/a&gt;&lt;/code&gt;. Subject to fusion.</source>
          <target state="translated">O (n) Una versi&amp;oacute;n estricta de &lt;code&gt;&lt;a href=&quot;data-text#v:foldl&quot;&gt;foldl&lt;/a&gt;&lt;/code&gt; . Sujeto a fusi&amp;oacute;n.</target>
        </trans-unit>
        <trans-unit id="faa70c807d4994d4edd6ea19beb2384f76844519" translate="yes" xml:space="preserve">
          <source>O(n) A strict version of &lt;code&gt;&lt;a href=&quot;data-text#v:foldl1&quot;&gt;foldl1&lt;/a&gt;&lt;/code&gt;. Subject to fusion.</source>
          <target state="translated">O (n) Una versi&amp;oacute;n estricta de &lt;code&gt;&lt;a href=&quot;data-text#v:foldl1&quot;&gt;foldl1&lt;/a&gt;&lt;/code&gt; . Sujeto a fusi&amp;oacute;n.</target>
        </trans-unit>
        <trans-unit id="abfea64affcfadaef83556d96991e9cf807016a7" translate="yes" xml:space="preserve">
          <source>O(n) A strict version of &lt;code&gt;&lt;a href=&quot;data-text-lazy#v:foldl&quot;&gt;foldl&lt;/a&gt;&lt;/code&gt;. Subject to fusion.</source>
          <target state="translated">O (n) Una versi&amp;oacute;n estricta de &lt;code&gt;&lt;a href=&quot;data-text-lazy#v:foldl&quot;&gt;foldl&lt;/a&gt;&lt;/code&gt; . Sujeto a fusi&amp;oacute;n.</target>
        </trans-unit>
        <trans-unit id="1b139d0ad5fe2dfa9969c322ee47ab070db09bf5" translate="yes" xml:space="preserve">
          <source>O(n) A strict version of &lt;code&gt;&lt;a href=&quot;data-text-lazy#v:foldl1&quot;&gt;foldl1&lt;/a&gt;&lt;/code&gt;. Subject to fusion.</source>
          <target state="translated">O (n) Una versi&amp;oacute;n estricta de &lt;code&gt;&lt;a href=&quot;data-text-lazy#v:foldl1&quot;&gt;foldl1&lt;/a&gt;&lt;/code&gt; . Sujeto a fusi&amp;oacute;n.</target>
        </trans-unit>
        <trans-unit id="524fe3dde7e60946b25f62bff134b68dafeba1ae" translate="yes" xml:space="preserve">
          <source>O(n) A variant of &lt;code&gt;&lt;a href=&quot;data-text#v:foldl&quot;&gt;foldl&lt;/a&gt;&lt;/code&gt; that has no starting value argument, and thus must be applied to a non-empty &lt;code&gt;&lt;a href=&quot;data-text#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt;. Subject to fusion.</source>
          <target state="translated">O (n) Una variante de &lt;code&gt;&lt;a href=&quot;data-text#v:foldl&quot;&gt;foldl&lt;/a&gt;&lt;/code&gt; que no tiene un argumento de valor inicial y, por lo tanto, debe aplicarse a un &lt;code&gt;&lt;a href=&quot;data-text#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt; no vac&amp;iacute;o . Sujeto a fusi&amp;oacute;n.</target>
        </trans-unit>
        <trans-unit id="cd976344c35646f098392678c122c8afc64e3a43" translate="yes" xml:space="preserve">
          <source>O(n) A variant of &lt;code&gt;&lt;a href=&quot;data-text#v:foldr&quot;&gt;foldr&lt;/a&gt;&lt;/code&gt; that has no starting value argument, and thus must be applied to a non-empty &lt;code&gt;&lt;a href=&quot;data-text#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt;. Subject to fusion.</source>
          <target state="translated">O (n) Una variante de &lt;code&gt;&lt;a href=&quot;data-text#v:foldr&quot;&gt;foldr&lt;/a&gt;&lt;/code&gt; que no tiene un argumento de valor inicial y, por lo tanto, debe aplicarse a un &lt;code&gt;&lt;a href=&quot;data-text#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt; no vac&amp;iacute;o . Sujeto a fusi&amp;oacute;n.</target>
        </trans-unit>
        <trans-unit id="362fc313f1d880386c5f926648e11505bacedb6a" translate="yes" xml:space="preserve">
          <source>O(n) A variant of &lt;code&gt;&lt;a href=&quot;data-text-lazy#v:foldl&quot;&gt;foldl&lt;/a&gt;&lt;/code&gt; that has no starting value argument, and thus must be applied to a non-empty &lt;code&gt;&lt;a href=&quot;data-text-lazy#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt;. Subject to fusion.</source>
          <target state="translated">O (n) Una variante de &lt;code&gt;&lt;a href=&quot;data-text-lazy#v:foldl&quot;&gt;foldl&lt;/a&gt;&lt;/code&gt; que no tiene un argumento de valor inicial y, por lo tanto, debe aplicarse a un &lt;code&gt;&lt;a href=&quot;data-text-lazy#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt; no vac&amp;iacute;o . Sujeto a fusi&amp;oacute;n.</target>
        </trans-unit>
        <trans-unit id="1851bd3ccc2e835bed20d566d13198f16fade08b" translate="yes" xml:space="preserve">
          <source>O(n) A variant of &lt;code&gt;&lt;a href=&quot;data-text-lazy#v:foldr&quot;&gt;foldr&lt;/a&gt;&lt;/code&gt; that has no starting value argument, and thus must be applied to a non-empty &lt;code&gt;&lt;a href=&quot;data-text-lazy#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt;. Subject to fusion.</source>
          <target state="translated">O (n) Una variante de &lt;code&gt;&lt;a href=&quot;data-text-lazy#v:foldr&quot;&gt;foldr&lt;/a&gt;&lt;/code&gt; que no tiene un argumento de valor inicial y, por lo tanto, debe aplicarse a un &lt;code&gt;&lt;a href=&quot;data-text-lazy#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt; no vac&amp;iacute;o . Sujeto a fusi&amp;oacute;n.</target>
        </trans-unit>
        <trans-unit id="079000bf2caf640ad5e9a1b67f64227aac23660f" translate="yes" xml:space="preserve">
          <source>O(n) Adds a character to the end of a &lt;code&gt;&lt;a href=&quot;data-text#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt;. This copies the entire array in the process, unless fused. Subject to fusion. Performs replacement on invalid scalar values.</source>
          <target state="translated">O (n) Agrega un car&amp;aacute;cter al final de un &lt;code&gt;&lt;a href=&quot;data-text#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt; . Esto copia toda la matriz en el proceso, a menos que se fusione. Sujeto a fusi&amp;oacute;n. Realiza el reemplazo de valores escalares no v&amp;aacute;lidos.</target>
        </trans-unit>
        <trans-unit id="73370e89c2c667aac93c384c108b533da8d0ebf7" translate="yes" xml:space="preserve">
          <source>O(n) Adds a character to the end of a &lt;code&gt;&lt;a href=&quot;data-text-lazy#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt;. This copies the entire array in the process, unless fused. Subject to fusion.</source>
          <target state="translated">O (n) Agrega un car&amp;aacute;cter al final de un &lt;code&gt;&lt;a href=&quot;data-text-lazy#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt; . Esto copia toda la matriz en el proceso, a menos que se fusione. Sujeto a fusi&amp;oacute;n.</target>
        </trans-unit>
        <trans-unit id="f84771c07cad0b5e330926bd0561fbd5c887a399" translate="yes" xml:space="preserve">
          <source>O(n) Adds a character to the end of a stream.</source>
          <target state="translated">O(n)Añade un personaje al final de un arroyo.</target>
        </trans-unit>
        <trans-unit id="c30e95f79a433eca7f5ab822328bc6b7e8a0e603" translate="yes" xml:space="preserve">
          <source>O(n) Adds a character to the front of a &lt;code&gt;&lt;a href=&quot;data-text#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt;. This function is more costly than its &lt;code&gt;List&lt;/code&gt; counterpart because it requires copying a new array. Subject to fusion. Performs replacement on invalid scalar values.</source>
          <target state="translated">O (n) Agrega un car&amp;aacute;cter al principio de un &lt;code&gt;&lt;a href=&quot;data-text#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt; . Esta funci&amp;oacute;n es m&amp;aacute;s costosa que su contraparte de &lt;code&gt;List&lt;/code&gt; a porque requiere copiar una nueva matriz. Sujeto a fusi&amp;oacute;n. Realiza el reemplazo de valores escalares no v&amp;aacute;lidos.</target>
        </trans-unit>
        <trans-unit id="faca040d960572f5511cea0f149a1cacd567a6db" translate="yes" xml:space="preserve">
          <source>O(n) Adds a character to the front of a Stream Char.</source>
          <target state="translated">O(n)Añade un personaje al frente de un Stream Char.</target>
        </trans-unit>
        <trans-unit id="69363fe4aa486bf436e18ae61b03abbb4db1c0b4" translate="yes" xml:space="preserve">
          <source>O(n) Append a Char to the end of a &lt;code&gt;&lt;a href=&quot;data-bytestring-char8#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt;. Similar to &lt;code&gt;&lt;a href=&quot;data-bytestring-char8#v:cons&quot;&gt;cons&lt;/a&gt;&lt;/code&gt;, this function performs a memcpy.</source>
          <target state="translated">O (n) Agrega un Char al final de una &lt;code&gt;&lt;a href=&quot;data-bytestring-char8#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt; . Similar a los &lt;code&gt;&lt;a href=&quot;data-bytestring-char8#v:cons&quot;&gt;cons&lt;/a&gt;&lt;/code&gt; , esta funci&amp;oacute;n realiza un memcpy.</target>
        </trans-unit>
        <trans-unit id="932ddd222e0ed6d57b6b5dd205731dc20fa49790" translate="yes" xml:space="preserve">
          <source>O(n) Append a Char to the end of a &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy-char8#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt;. Similar to &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy-char8#v:cons&quot;&gt;cons&lt;/a&gt;&lt;/code&gt;, this function performs a memcpy.</source>
          <target state="translated">O (n) Agrega un Char al final de una &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy-char8#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt; . Similar a los &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy-char8#v:cons&quot;&gt;cons&lt;/a&gt;&lt;/code&gt; , esta funci&amp;oacute;n realiza un memcpy.</target>
        </trans-unit>
        <trans-unit id="c57a700fb53855035acd0b43838b114c29ab6f43" translate="yes" xml:space="preserve">
          <source>O(n) Append a byte to the end of a &lt;code&gt;&lt;a href=&quot;data-bytestring#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">O (n) Agregar un byte al final de una &lt;code&gt;&lt;a href=&quot;data-bytestring#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="899661b7fba388bc64e709a2595e5aa51ef43958" translate="yes" xml:space="preserve">
          <source>O(n) Append two ByteStrings</source>
          <target state="translated">O(n)Añadir dos cadenas de bytes</target>
        </trans-unit>
        <trans-unit id="752cdc56ee778965bdf8a8092ebd0df6e9ab1930" translate="yes" xml:space="preserve">
          <source>O(n) Appends one &lt;code&gt;&lt;a href=&quot;data-text#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt; to the other by copying both of them into a new &lt;code&gt;&lt;a href=&quot;data-text#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt;. Subject to fusion.</source>
          <target state="translated">O (n) Agrega un &lt;code&gt;&lt;a href=&quot;data-text#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt; al otro copiando ambos en un nuevo &lt;code&gt;&lt;a href=&quot;data-text#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt; . Sujeto a fusi&amp;oacute;n.</target>
        </trans-unit>
        <trans-unit id="2708519f65d9965908b0d2084035e19aaf57ac32" translate="yes" xml:space="preserve">
          <source>O(n) Appends one Stream to the other.</source>
          <target state="translated">O(n)Agrega una corriente a la otra.</target>
        </trans-unit>
        <trans-unit id="0544a0b38abcf9046607e640f3f6b1fd91e2749e" translate="yes" xml:space="preserve">
          <source>O(n) Applied to a predicate and a &lt;code&gt;&lt;a href=&quot;data-bytestring#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;data-bytestring#v:all&quot;&gt;all&lt;/a&gt;&lt;/code&gt; determines if all elements of the &lt;code&gt;&lt;a href=&quot;data-bytestring#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt; satisfy the predicate.</source>
          <target state="translated">O (n) Aplicado a un predicado y una &lt;code&gt;&lt;a href=&quot;data-bytestring#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt; , &lt;code&gt;&lt;a href=&quot;data-bytestring#v:all&quot;&gt;all&lt;/a&gt;&lt;/code&gt; determina si todos los elementos de &lt;code&gt;&lt;a href=&quot;data-bytestring#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt; satisfacen el predicado.</target>
        </trans-unit>
        <trans-unit id="e566db6cd81a019f5bcfe3af8a71033a9e7c618e" translate="yes" xml:space="preserve">
          <source>O(n) Applied to a predicate and a &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy#v:all&quot;&gt;all&lt;/a&gt;&lt;/code&gt; determines if all elements of the &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt; satisfy the predicate.</source>
          <target state="translated">O (n) Aplicado a un predicado y una &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt; , &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy#v:all&quot;&gt;all&lt;/a&gt;&lt;/code&gt; determina si todos los elementos de &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt; satisfacen el predicado.</target>
        </trans-unit>
        <trans-unit id="11c91b6ace2ab454f8b01b12b57b91b5303310dc" translate="yes" xml:space="preserve">
          <source>O(n) Applied to a predicate and a ByteString, &lt;code&gt;&lt;a href=&quot;data-bytestring#v:any&quot;&gt;any&lt;/a&gt;&lt;/code&gt; determines if any element of the &lt;code&gt;&lt;a href=&quot;data-bytestring#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt; satisfies the predicate.</source>
          <target state="translated">O (n) Aplicado a un predicado y una ByteString, &lt;code&gt;&lt;a href=&quot;data-bytestring#v:any&quot;&gt;any&lt;/a&gt;&lt;/code&gt; determina si alg&amp;uacute;n elemento de &lt;code&gt;&lt;a href=&quot;data-bytestring#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt; satisface el predicado.</target>
        </trans-unit>
        <trans-unit id="94377428d645ea1f0c763816d8c0d2b8b5b1a96c" translate="yes" xml:space="preserve">
          <source>O(n) Applied to a predicate and a ByteString, &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy#v:any&quot;&gt;any&lt;/a&gt;&lt;/code&gt; determines if any element of the &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt; satisfies the predicate.</source>
          <target state="translated">O (n) Aplicado a un predicado y una ByteString, &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy#v:any&quot;&gt;any&lt;/a&gt;&lt;/code&gt; determina si alg&amp;uacute;n elemento de &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt; satisface el predicado.</target>
        </trans-unit>
        <trans-unit id="3792e943133d3c512cc9ee5cf4f8dee11ff59329" translate="yes" xml:space="preserve">
          <source>O(n) Break a &lt;code&gt;&lt;a href=&quot;data-bytestring#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt; into pieces separated by the byte argument, consuming the delimiter. I.e.</source>
          <target state="translated">O (n) Divida una &lt;code&gt;&lt;a href=&quot;data-bytestring#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt; en partes separadas por el argumento de byte, consumiendo el delimitador. Es decir</target>
        </trans-unit>
        <trans-unit id="4f50034edd7931475872001a2a7a0aaa0bc4003e" translate="yes" xml:space="preserve">
          <source>O(n) Break a &lt;code&gt;&lt;a href=&quot;data-bytestring-char8#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt; into pieces separated by the byte argument, consuming the delimiter. I.e.</source>
          <target state="translated">O (n) Divida una &lt;code&gt;&lt;a href=&quot;data-bytestring-char8#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt; en partes separadas por el argumento de byte, consumiendo el delimitador. Es decir</target>
        </trans-unit>
        <trans-unit id="1ee13f2afb1dd48c8d79c4c72f120a0554cd381a" translate="yes" xml:space="preserve">
          <source>O(n) Break a &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt; into pieces separated by the byte argument, consuming the delimiter. I.e.</source>
          <target state="translated">O (n) Divida una &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt; en partes separadas por el argumento de byte, consumiendo el delimitador. Es decir</target>
        </trans-unit>
        <trans-unit id="6dacd07271c66cc97e87ca0fdd8ffba8c1f57615" translate="yes" xml:space="preserve">
          <source>O(n) Break a &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy-char8#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt; into pieces separated by the byte argument, consuming the delimiter. I.e.</source>
          <target state="translated">O (n) Divida una &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy-char8#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt; en partes separadas por el argumento de byte, consumiendo el delimitador. Es decir</target>
        </trans-unit>
        <trans-unit id="8c80e25631c76e9bb2980147330a7b1fa3de97a2" translate="yes" xml:space="preserve">
          <source>O(n) Breaks a &lt;code&gt;&lt;a href=&quot;data-text#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt; up into a list of &lt;code&gt;&lt;a href=&quot;data-text#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt;s at newline &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-char#t:Char&quot;&gt;Char&lt;/a&gt;&lt;/code&gt;s. The resulting strings do not contain newlines.</source>
          <target state="translated">O (n) se rompe un &lt;code&gt;&lt;a href=&quot;data-text#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt; arriba en una lista de &lt;code&gt;&lt;a href=&quot;data-text#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt; s en l&amp;iacute;nea nueva &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-char#t:Char&quot;&gt;Char&lt;/a&gt;&lt;/code&gt; s. Las cadenas resultantes no contienen nuevas l&amp;iacute;neas.</target>
        </trans-unit>
        <trans-unit id="f6f7530ca81fad48ca6ced2a5c0df8b5d49e5a50" translate="yes" xml:space="preserve">
          <source>O(n) Breaks a &lt;code&gt;&lt;a href=&quot;data-text#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt; up into a list of &lt;code&gt;&lt;a href=&quot;data-text#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt;s at newline &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-char#t:Char&quot;&gt;Char&lt;/a&gt;&lt;/code&gt;s. The resulting strings do not contain newlines.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d2b44bdda63fc16d17e62b097fc8149c1274fa2d" translate="yes" xml:space="preserve">
          <source>O(n) Breaks a &lt;code&gt;&lt;a href=&quot;data-text#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt; up into a list of words, delimited by &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-char#t:Char&quot;&gt;Char&lt;/a&gt;&lt;/code&gt;s representing white space.</source>
          <target state="translated">O (n) se rompe un &lt;code&gt;&lt;a href=&quot;data-text#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt; arriba en una lista de palabras, delimitado por &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-char#t:Char&quot;&gt;Char&lt;/a&gt;&lt;/code&gt; representar el espacio blanco s.</target>
        </trans-unit>
        <trans-unit id="b29ccc5c79e3761be33ad8e0c2535911f9f1f77b" translate="yes" xml:space="preserve">
          <source>O(n) Breaks a &lt;code&gt;&lt;a href=&quot;data-text#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt; up into a list of words, delimited by &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-char#t:Char&quot;&gt;Char&lt;/a&gt;&lt;/code&gt;s representing white space.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bd353119138214d627302c0ab83407022b4f2c58" translate="yes" xml:space="preserve">
          <source>O(n) Breaks a &lt;code&gt;&lt;a href=&quot;data-text-lazy#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt; up into a list of &lt;code&gt;&lt;a href=&quot;data-text-lazy#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt;s at newline &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-char#t:Char&quot;&gt;Char&lt;/a&gt;&lt;/code&gt;s. The resulting strings do not contain newlines.</source>
          <target state="translated">O (n) se rompe un &lt;code&gt;&lt;a href=&quot;data-text-lazy#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt; arriba en una lista de &lt;code&gt;&lt;a href=&quot;data-text-lazy#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt; s en l&amp;iacute;nea nueva &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-char#t:Char&quot;&gt;Char&lt;/a&gt;&lt;/code&gt; s. Las cadenas resultantes no contienen nuevas l&amp;iacute;neas.</target>
        </trans-unit>
        <trans-unit id="e21a4b9fbf4c1b7e9d96aa6100b852064e3b08c5" translate="yes" xml:space="preserve">
          <source>O(n) Breaks a &lt;code&gt;&lt;a href=&quot;data-text-lazy#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt; up into a list of &lt;code&gt;&lt;a href=&quot;data-text-lazy#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt;s at newline &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-char#t:Char&quot;&gt;Char&lt;/a&gt;&lt;/code&gt;s. The resulting strings do not contain newlines.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f6add654aa21fa7ad7f2f38568d2d469a1f4770b" translate="yes" xml:space="preserve">
          <source>O(n) Breaks a &lt;code&gt;&lt;a href=&quot;data-text-lazy#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt; up into a list of words, delimited by &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-char#t:Char&quot;&gt;Char&lt;/a&gt;&lt;/code&gt;s representing white space.</source>
          <target state="translated">O (n) se rompe un &lt;code&gt;&lt;a href=&quot;data-text-lazy#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt; arriba en una lista de palabras, delimitado por &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-char#t:Char&quot;&gt;Char&lt;/a&gt;&lt;/code&gt; representar el espacio blanco s.</target>
        </trans-unit>
        <trans-unit id="ee56a419224dcfa02bfb02953874d7d7b37a5f83" translate="yes" xml:space="preserve">
          <source>O(n) Breaks a &lt;code&gt;&lt;a href=&quot;data-text-lazy#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt; up into a list of words, delimited by &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-char#t:Char&quot;&gt;Char&lt;/a&gt;&lt;/code&gt;s representing white space.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4e44d46feb39d03346b6a529a323e54a603aa364" translate="yes" xml:space="preserve">
          <source>O(n) Build a &lt;code&gt;&lt;a href=&quot;data-bytestring#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt; from a &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/foreign-c-string#t:CString&quot;&gt;CString&lt;/a&gt;&lt;/code&gt;. This value will have &lt;em&gt;no&lt;/em&gt; finalizer associated to it, and will not be garbage collected by Haskell. The ByteString length is calculated using &lt;em&gt;strlen(3)&lt;/em&gt;, and thus the complexity is a O(n).</source>
          <target state="translated">O (n) Construya un &lt;code&gt;&lt;a href=&quot;data-bytestring#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt; a partir de un &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/foreign-c-string#t:CString&quot;&gt;CString&lt;/a&gt;&lt;/code&gt; . Este valor no tendr&amp;aacute; &lt;em&gt;ning&amp;uacute;n&lt;/em&gt; finalizador asociado y Haskell no recoger&amp;aacute; la basura. La longitud de ByteString se calcula usando &lt;em&gt;strlen (3)&lt;/em&gt; y, por lo tanto, la complejidad es O (n).</target>
        </trans-unit>
        <trans-unit id="ff3a1e124ddbcd30fbd068dbffe2dec033297c98" translate="yes" xml:space="preserve">
          <source>O(n) Build a &lt;code&gt;&lt;a href=&quot;data-bytestring#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt; from a &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/foreign-c-string#t:CString&quot;&gt;CString&lt;/a&gt;&lt;/code&gt;. This value will have &lt;em&gt;no&lt;/em&gt; finalizer associated to it, and will not be garbage collected by Haskell. The ByteString length is calculated using &lt;em&gt;strlen(3)&lt;/em&gt;, and thus the complexity is a O(n).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2f038e72056f4d455a440a2f6060588238f050d1" translate="yes" xml:space="preserve">
          <source>O(n) Build a &lt;code&gt;&lt;a href=&quot;data-bytestring#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt; from a malloced &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/foreign-c-string#t:CString&quot;&gt;CString&lt;/a&gt;&lt;/code&gt;. This value will have a &lt;code&gt;free(3)&lt;/code&gt; finalizer associated to it.</source>
          <target state="translated">O (n) Construya un &lt;code&gt;&lt;a href=&quot;data-bytestring#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt; a partir de un &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/foreign-c-string#t:CString&quot;&gt;CString&lt;/a&gt;&lt;/code&gt; mal ubicado . Este valor tendr&amp;aacute; un finalizador &lt;code&gt;free(3)&lt;/code&gt; asociado.</target>
        </trans-unit>
        <trans-unit id="5a80c8b2a7ee0c60bf3b65958a61659d5c5f1e87" translate="yes" xml:space="preserve">
          <source>O(n) Build a &lt;code&gt;&lt;a href=&quot;data-bytestring#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt; from a malloced &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/foreign-c-string#t:CString&quot;&gt;CString&lt;/a&gt;&lt;/code&gt;. This value will have a &lt;code&gt;free(3)&lt;/code&gt; finalizer associated to it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="588b9b5fa7d5118bce671aafc5ddaf9be0603587" translate="yes" xml:space="preserve">
          <source>O(n) Center a string to the given length, using the specified fill character on either side. Performs replacement on invalid scalar values.</source>
          <target state="translated">O(n)Centrar una cadena a la longitud dada,usando el carácter de relleno especificado a cada lado.Realiza la sustitución en valores escalares no válidos.</target>
        </trans-unit>
        <trans-unit id="df9f7ff3b55e350682e221ae634b0d48d6e2d749" translate="yes" xml:space="preserve">
          <source>O(n) Compare the count of characters in a &lt;code&gt;&lt;a href=&quot;data-text#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt; to a number. Subject to fusion.</source>
          <target state="translated">O (n) Compara la cantidad de caracteres de un &lt;code&gt;&lt;a href=&quot;data-text#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt; con un n&amp;uacute;mero. Sujeto a fusi&amp;oacute;n.</target>
        </trans-unit>
        <trans-unit id="3cda0f6932b592593deafffcda940e7a9d7a1b50" translate="yes" xml:space="preserve">
          <source>O(n) Compare the count of characters in a &lt;code&gt;&lt;a href=&quot;data-text-lazy#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt; to a number. Subject to fusion.</source>
          <target state="translated">O (n) Compara la cantidad de caracteres de un &lt;code&gt;&lt;a href=&quot;data-text-lazy#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt; con un n&amp;uacute;mero. Sujeto a fusi&amp;oacute;n.</target>
        </trans-unit>
        <trans-unit id="8e77c4b48250a0c64a9b2ca7b4d17d4922317e57" translate="yes" xml:space="preserve">
          <source>O(n) Compares the count of characters in a string to a number. Subject to fusion.</source>
          <target state="translated">O(n)Compara el número de caracteres de una cadena con un número.Sujeto a la fusión.</target>
        </trans-unit>
        <trans-unit id="b51b7baba688293ce16eda93568bffa96030a1d1" translate="yes" xml:space="preserve">
          <source>O(n) Concatenate a list of &lt;code&gt;&lt;a href=&quot;data-text#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt;s.</source>
          <target state="translated">O (n) Concatenar una lista de &lt;code&gt;&lt;a href=&quot;data-text#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="d865fabf07004c8189e963123ea699f725640e18" translate="yes" xml:space="preserve">
          <source>O(n) Concatenate a list of &lt;code&gt;&lt;a href=&quot;data-text-lazy#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt;s.</source>
          <target state="translated">O (n) Concatenar una lista de &lt;code&gt;&lt;a href=&quot;data-text-lazy#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="d8fea86b4a8a78b9c5f18f7ac7b440e68cabfc2c" translate="yes" xml:space="preserve">
          <source>O(n) Concatenate a list of ByteStrings.</source>
          <target state="translated">O(n)Concatenar una lista de ByteStrings.</target>
        </trans-unit>
        <trans-unit id="41361e1c1af932fdb367f52ef9e402238fb34753" translate="yes" xml:space="preserve">
          <source>O(n) Concatenate a list of streams. Subject to array fusion.</source>
          <target state="translated">O(n)Concatenar una lista de corrientes.Sujeto a la fusión de la matriz.</target>
        </trans-unit>
        <trans-unit id="4d10beba949c3d1fcf75628a1fe52eb8361f6b4f" translate="yes" xml:space="preserve">
          <source>O(n) Convert a 'Stream Char' into a &lt;code&gt;&lt;a href=&quot;data-text#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">O (n) Convierta un 'Stream Char' en un &lt;code&gt;&lt;a href=&quot;data-text#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="dddea4515b35cd72a32688d338f11f92f5a27e96" translate="yes" xml:space="preserve">
          <source>O(n) Convert a 'Stream Char' into a &lt;code&gt;&lt;a href=&quot;data-text-lazy#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt;, using &lt;code&gt;&lt;a href=&quot;data-text-internal-lazy#v:defaultChunkSize&quot;&gt;defaultChunkSize&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">O (n) Convierta un 'Stream Char' en un &lt;code&gt;&lt;a href=&quot;data-text-lazy#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt; , utilizando &lt;code&gt;&lt;a href=&quot;data-text-internal-lazy#v:defaultChunkSize&quot;&gt;defaultChunkSize&lt;/a&gt;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="5c4feffce695da7ecb4270820fe9fa4a8ddf4219" translate="yes" xml:space="preserve">
          <source>O(n) Convert a 'Stream Char' into a &lt;code&gt;&lt;a href=&quot;data-text-lazy#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt;, using the given chunk size.</source>
          <target state="translated">O (n) Convierta un 'Stream Char' en un &lt;code&gt;&lt;a href=&quot;data-text-lazy#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt; , utilizando el tama&amp;ntilde;o de fragmento dado.</target>
        </trans-unit>
        <trans-unit id="d3f861cd302cfe47883a8a36c5d7a4f17f239300" translate="yes" xml:space="preserve">
          <source>O(n) Convert a '[Word8]' into a &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">O (n) Convierta un '[Word8]' en un &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="28ec6bfbea3bf96bb4e05de94f9bfce7e6a57967" translate="yes" xml:space="preserve">
          <source>O(n) Convert a &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-string#t:String&quot;&gt;String&lt;/a&gt;&lt;/code&gt; into a &lt;code&gt;&lt;a href=&quot;data-bytestring-char8#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">O (n) Convertir una &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-string#t:String&quot;&gt;String&lt;/a&gt;&lt;/code&gt; en una &lt;code&gt;&lt;a href=&quot;data-bytestring-char8#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="1250ebc782478987fbbb63eab4f85fb17a384acb" translate="yes" xml:space="preserve">
          <source>O(n) Convert a &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-string#t:String&quot;&gt;String&lt;/a&gt;&lt;/code&gt; into a &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy-char8#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">O (n) Convertir una &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-string#t:String&quot;&gt;String&lt;/a&gt;&lt;/code&gt; en una &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy-char8#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="78b503284ec951b09bde8eb8e96b65afc4718d1b" translate="yes" xml:space="preserve">
          <source>O(n) Convert a &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-string#t:String&quot;&gt;String&lt;/a&gt;&lt;/code&gt; into a &lt;code&gt;&lt;a href=&quot;data-text#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt;. Subject to fusion. Performs replacement on invalid scalar values.</source>
          <target state="translated">O (n) Convierta una &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-string#t:String&quot;&gt;String&lt;/a&gt;&lt;/code&gt; en un &lt;code&gt;&lt;a href=&quot;data-text#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt; . Sujeto a fusi&amp;oacute;n. Realiza el reemplazo de valores escalares no v&amp;aacute;lidos.</target>
        </trans-unit>
        <trans-unit id="6a4329f0180993e73313d695786d19741fe653a8" translate="yes" xml:space="preserve">
          <source>O(n) Convert a &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-string#t:String&quot;&gt;String&lt;/a&gt;&lt;/code&gt; into a &lt;code&gt;&lt;a href=&quot;data-text-lazy#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">O (n) Convierta una &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-string#t:String&quot;&gt;String&lt;/a&gt;&lt;/code&gt; en un &lt;code&gt;&lt;a href=&quot;data-text-lazy#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="ffa4630618998933ec58505b2f53f280d1bb4905" translate="yes" xml:space="preserve">
          <source>O(n) Convert a &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-string#t:String&quot;&gt;String&lt;/a&gt;&lt;/code&gt; into a &lt;code&gt;&lt;a href=&quot;data-bytestring-char8#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ac0695d1673788e36156e4806e5b4f20a1aa7791" translate="yes" xml:space="preserve">
          <source>O(n) Convert a &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-string#t:String&quot;&gt;String&lt;/a&gt;&lt;/code&gt; into a &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy-char8#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aeb4d1395582d0cd37247139a857840e823306d0" translate="yes" xml:space="preserve">
          <source>O(n) Convert a &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-string#t:String&quot;&gt;String&lt;/a&gt;&lt;/code&gt; into a &lt;code&gt;&lt;a href=&quot;data-text#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt;. Subject to fusion. Performs replacement on invalid scalar values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="82eb4eff3b0d425487c76f426f59a811ac711631" translate="yes" xml:space="preserve">
          <source>O(n) Convert a &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-string#t:String&quot;&gt;String&lt;/a&gt;&lt;/code&gt; into a &lt;code&gt;&lt;a href=&quot;data-text-lazy#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a50a42b1db807b31c89dc47ff255446a98f39244" translate="yes" xml:space="preserve">
          <source>O(n) Convert a &lt;code&gt;&lt;a href=&quot;../bytestring-0.10.10.0/data-bytestring#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt; into a 'Stream Char', using UTF-8 encoding.</source>
          <target state="translated">O (n) Convierta un &lt;code&gt;&lt;a href=&quot;../bytestring-0.10.10.0/data-bytestring#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt; en un 'Stream Char', usando codificaci&amp;oacute;n UTF-8.</target>
        </trans-unit>
        <trans-unit id="9c994148dd5a812cff0396e8d838246731f48ffc" translate="yes" xml:space="preserve">
          <source>O(n) Convert a &lt;code&gt;&lt;a href=&quot;../bytestring-0.10.10.0/data-bytestring#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt; into a 'Stream Char', using big endian UTF-16 encoding.</source>
          <target state="translated">O (n) Convierta un &lt;code&gt;&lt;a href=&quot;../bytestring-0.10.10.0/data-bytestring#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt; en un 'Stream Char', usando codificaci&amp;oacute;n Big Endian UTF-16.</target>
        </trans-unit>
        <trans-unit id="18b85dc67d7ebe26705964dbc6de39d8405010b7" translate="yes" xml:space="preserve">
          <source>O(n) Convert a &lt;code&gt;&lt;a href=&quot;../bytestring-0.10.10.0/data-bytestring#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt; into a 'Stream Char', using big endian UTF-32 encoding.</source>
          <target state="translated">O (n) Convierta un &lt;code&gt;&lt;a href=&quot;../bytestring-0.10.10.0/data-bytestring#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt; en un 'Stream Char', utilizando codificaci&amp;oacute;n Big Endian UTF-32.</target>
        </trans-unit>
        <trans-unit id="ecffef13fd9148e59c459f851a79e87ad1209114" translate="yes" xml:space="preserve">
          <source>O(n) Convert a &lt;code&gt;&lt;a href=&quot;../bytestring-0.10.10.0/data-bytestring#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt; into a 'Stream Char', using little endian UTF-16 encoding.</source>
          <target state="translated">O (n) Convierta un &lt;code&gt;&lt;a href=&quot;../bytestring-0.10.10.0/data-bytestring#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt; en un 'Stream Char', usando codificaci&amp;oacute;n UTF-16 little endian.</target>
        </trans-unit>
        <trans-unit id="5e760e8fab287ba8946fcca233427a22640edc3a" translate="yes" xml:space="preserve">
          <source>O(n) Convert a &lt;code&gt;&lt;a href=&quot;../bytestring-0.10.10.0/data-bytestring#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt; into a 'Stream Char', using little endian UTF-32 encoding.</source>
          <target state="translated">O (n) Convierta un &lt;code&gt;&lt;a href=&quot;../bytestring-0.10.10.0/data-bytestring#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt; en un 'Stream Char', usando codificaci&amp;oacute;n UTF-32 little endian.</target>
        </trans-unit>
        <trans-unit id="e6044fbf74251cc2c457a52a84e1bd03efb7be35" translate="yes" xml:space="preserve">
          <source>O(n) Convert a &lt;code&gt;&lt;a href=&quot;../bytestring-0.10.10.0/data-bytestring-lazy#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt; into a 'Stream Char', using big endian UTF-16 encoding.</source>
          <target state="translated">O (n) Convierta un &lt;code&gt;&lt;a href=&quot;../bytestring-0.10.10.0/data-bytestring-lazy#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt; en un 'Stream Char', usando codificaci&amp;oacute;n Big Endian UTF-16.</target>
        </trans-unit>
        <trans-unit id="9f4c23d2fe8ef4b6f0aca653c4ab7639543571db" translate="yes" xml:space="preserve">
          <source>O(n) Convert a &lt;code&gt;&lt;a href=&quot;../bytestring-0.10.10.0/data-bytestring-lazy#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt; into a 'Stream Char', using big endian UTF-32 encoding.</source>
          <target state="translated">O (n) Convierta un &lt;code&gt;&lt;a href=&quot;../bytestring-0.10.10.0/data-bytestring-lazy#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt; en un 'Stream Char', utilizando codificaci&amp;oacute;n Big Endian UTF-32.</target>
        </trans-unit>
        <trans-unit id="9cbacf603b5e5d2fdcce3a634ef93ce274f8d8d2" translate="yes" xml:space="preserve">
          <source>O(n) Convert a &lt;code&gt;&lt;a href=&quot;../bytestring-0.10.10.0/data-bytestring-lazy#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt; into a 'Stream Char', using little endian UTF-16 encoding.</source>
          <target state="translated">O (n) Convierta un &lt;code&gt;&lt;a href=&quot;../bytestring-0.10.10.0/data-bytestring-lazy#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt; en un 'Stream Char', usando codificaci&amp;oacute;n UTF-16 little endian.</target>
        </trans-unit>
        <trans-unit id="29a62b4ccf40bd24ed896366c36d7361e16022ae" translate="yes" xml:space="preserve">
          <source>O(n) Convert a &lt;code&gt;&lt;a href=&quot;../bytestring-0.10.10.0/data-bytestring-lazy#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt; into a 'Stream Char', using little endian UTF-32 encoding.</source>
          <target state="translated">O (n) Convierta un &lt;code&gt;&lt;a href=&quot;../bytestring-0.10.10.0/data-bytestring-lazy#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt; en un 'Stream Char', usando codificaci&amp;oacute;n UTF-32 little endian.</target>
        </trans-unit>
        <trans-unit id="b2f16f8299ef06dabb82519f282ce1372289de8a" translate="yes" xml:space="preserve">
          <source>O(n) Convert a &lt;code&gt;&lt;a href=&quot;data-text#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt; into a 'Stream Char', but iterate backwards.</source>
          <target state="translated">O (n) Convierte un &lt;code&gt;&lt;a href=&quot;data-text#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt; en un 'Stream Char', pero itera hacia atr&amp;aacute;s.</target>
        </trans-unit>
        <trans-unit id="b143d3cf3d816d8c8c93db4f5bf7ea41ef14055b" translate="yes" xml:space="preserve">
          <source>O(n) Convert a &lt;code&gt;&lt;a href=&quot;data-text#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt; into a 'Stream Char'.</source>
          <target state="translated">O (n) Convertir un &lt;code&gt;&lt;a href=&quot;data-text#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt; en un 'Stream Char'.</target>
        </trans-unit>
        <trans-unit id="7aca44283867709f9018dbe9610e0e7fd999f85e" translate="yes" xml:space="preserve">
          <source>O(n) Convert a &lt;code&gt;&lt;a href=&quot;data-text#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt; into a &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-string#t:String&quot;&gt;String&lt;/a&gt;&lt;/code&gt;. Subject to fusion.</source>
          <target state="translated">O (n) Convierte un &lt;code&gt;&lt;a href=&quot;data-text#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt; en una &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-string#t:String&quot;&gt;String&lt;/a&gt;&lt;/code&gt; . Sujeto a fusi&amp;oacute;n.</target>
        </trans-unit>
        <trans-unit id="4979690ba12a62dd67deb7d9d10ee44355f16e6d" translate="yes" xml:space="preserve">
          <source>O(n) Convert a &lt;code&gt;&lt;a href=&quot;data-text#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt; into a &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-string#t:String&quot;&gt;String&lt;/a&gt;&lt;/code&gt;. Subject to fusion.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0c29be0ed43ad939fb3e296a47f49c43cedb73b1" translate="yes" xml:space="preserve">
          <source>O(n) Convert a &lt;code&gt;&lt;a href=&quot;data-text-internal-fusion-types#t:Stream&quot;&gt;Stream&lt;/a&gt;&lt;/code&gt;&lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-word#t:Word8&quot;&gt;Word8&lt;/a&gt;&lt;/code&gt; to a &lt;code&gt;&lt;a href=&quot;../bytestring-0.10.10.0/data-bytestring#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">O (n) Convierta una &lt;code&gt;&lt;a href=&quot;data-text-internal-fusion-types#t:Stream&quot;&gt;Stream&lt;/a&gt;&lt;/code&gt; &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-word#t:Word8&quot;&gt;Word8&lt;/a&gt;&lt;/code&gt; en una &lt;code&gt;&lt;a href=&quot;../bytestring-0.10.10.0/data-bytestring#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="8cf8793d960b9253dabd7a8b22897bd670c76761" translate="yes" xml:space="preserve">
          <source>O(n) Convert a &lt;code&gt;&lt;a href=&quot;data-text-internal-fusion-types#t:Stream&quot;&gt;Stream&lt;/a&gt;&lt;/code&gt;&lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-word#t:Word8&quot;&gt;Word8&lt;/a&gt;&lt;/code&gt; to a lazy &lt;code&gt;&lt;a href=&quot;../bytestring-0.10.10.0/data-bytestring-lazy#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">O (n) Convierta una &lt;code&gt;&lt;a href=&quot;data-text-internal-fusion-types#t:Stream&quot;&gt;Stream&lt;/a&gt;&lt;/code&gt; &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-word#t:Word8&quot;&gt;Word8&lt;/a&gt;&lt;/code&gt; en una &lt;code&gt;&lt;a href=&quot;../bytestring-0.10.10.0/data-bytestring-lazy#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt; perezosa .</target>
        </trans-unit>
        <trans-unit id="a3ac3eeda723a7bf3bbe22f92652dbfe5945f149" translate="yes" xml:space="preserve">
          <source>O(n) Convert a &lt;code&gt;&lt;a href=&quot;data-text-internal-fusion-types#t:Stream&quot;&gt;Stream&lt;/a&gt;&lt;/code&gt;&lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-word#t:Word8&quot;&gt;Word8&lt;/a&gt;&lt;/code&gt; to a &lt;code&gt;&lt;a href=&quot;../bytestring-0.10.10.0/data-bytestring#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b12efae099d8b8c1a69107c5c4b6091413de14e9" translate="yes" xml:space="preserve">
          <source>O(n) Convert a &lt;code&gt;&lt;a href=&quot;data-text-internal-fusion-types#t:Stream&quot;&gt;Stream&lt;/a&gt;&lt;/code&gt;&lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-word#t:Word8&quot;&gt;Word8&lt;/a&gt;&lt;/code&gt; to a lazy &lt;code&gt;&lt;a href=&quot;../bytestring-0.10.10.0/data-bytestring-lazy#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d657f82e9c6f26ef041158915524963e725aedb3" translate="yes" xml:space="preserve">
          <source>O(n) Convert a &lt;code&gt;&lt;a href=&quot;data-text-lazy#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt; into a 'Stream Char'.</source>
          <target state="translated">O (n) Convertir un &lt;code&gt;&lt;a href=&quot;data-text-lazy#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt; en un 'Stream Char'.</target>
        </trans-unit>
        <trans-unit id="53b065bc2d242042f99532fc70338d9e6882bfe8" translate="yes" xml:space="preserve">
          <source>O(n) Convert a &lt;code&gt;&lt;a href=&quot;data-text-lazy#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt; into a &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-string#t:String&quot;&gt;String&lt;/a&gt;&lt;/code&gt;. Subject to fusion.</source>
          <target state="translated">O (n) Convierte un &lt;code&gt;&lt;a href=&quot;data-text-lazy#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt; en una &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-string#t:String&quot;&gt;String&lt;/a&gt;&lt;/code&gt; . Sujeto a fusi&amp;oacute;n.</target>
        </trans-unit>
        <trans-unit id="e2b1f8d04d7487aa951b37880068e8dab7dc2bc1" translate="yes" xml:space="preserve">
          <source>O(n) Convert a &lt;code&gt;&lt;a href=&quot;data-text-lazy#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt; into a &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-string#t:String&quot;&gt;String&lt;/a&gt;&lt;/code&gt;. Subject to fusion.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="021a5aecc0c509332493c72852e697f40ca40561" translate="yes" xml:space="preserve">
          <source>O(n) Convert a &lt;code&gt;[&lt;a href=&quot;../base-4.13.0.0/data-word#t:Word8&quot;&gt;Word8&lt;/a&gt;]&lt;/code&gt; into a &lt;code&gt;&lt;a href=&quot;data-bytestring#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">O (n) Convierta un &lt;code&gt;[&lt;a href=&quot;../base-4.13.0.0/data-word#t:Word8&quot;&gt;Word8&lt;/a&gt;]&lt;/code&gt; en un &lt;code&gt;&lt;a href=&quot;data-bytestring#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="1df3c0652b153dfe4a5195f2ccc3b2af3c7a4976" translate="yes" xml:space="preserve">
          <source>O(n) Convert a &lt;code&gt;[&lt;a href=&quot;../base-4.14.1.0/data-word#t:Word8&quot;&gt;Word8&lt;/a&gt;]&lt;/code&gt; into a &lt;code&gt;&lt;a href=&quot;data-bytestring#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fc8d55951dccb9a5743259ddce4e236662cc0630" translate="yes" xml:space="preserve">
          <source>O(n) Convert a lazy &lt;code&gt;&lt;a href=&quot;../bytestring-0.10.10.0/data-bytestring-lazy#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt; into a 'Stream Char', using UTF-8 encoding.</source>
          <target state="translated">O (n) Convierta un &lt;code&gt;&lt;a href=&quot;../bytestring-0.10.10.0/data-bytestring-lazy#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt; diferido en un 'Stream Char', utilizando codificaci&amp;oacute;n UTF-8.</target>
        </trans-unit>
        <trans-unit id="0e5f147634e8b77f90355ee835978a5b3bb8dbef" translate="yes" xml:space="preserve">
          <source>O(n) Convert a lazy &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt; into a strict &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">O (n) Convierta una &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt; diferida en una &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt; estricta .</target>
        </trans-unit>
        <trans-unit id="7073f0f6df8ee44f0d469193aace6f72e11b317b" translate="yes" xml:space="preserve">
          <source>O(n) Convert a lazy &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy-char8#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt; into a strict &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy-char8#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">O (n) Convierta una &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy-char8#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt; diferida en una &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy-char8#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt; estricta .</target>
        </trans-unit>
        <trans-unit id="64531d7ba209ea0098fac9a375397be2984683d1" translate="yes" xml:space="preserve">
          <source>O(n) Convert a lazy &lt;code&gt;&lt;a href=&quot;data-text-lazy#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt; into a list of strict &lt;code&gt;&lt;a href=&quot;data-text#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt;s.</source>
          <target state="translated">O (n) Convierta un &lt;code&gt;&lt;a href=&quot;data-text-lazy#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt; perezoso en una lista de &lt;code&gt;&lt;a href=&quot;data-text#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt; estrictos .</target>
        </trans-unit>
        <trans-unit id="116244e0bc6158ce564e16f533da50e98d0a7f44" translate="yes" xml:space="preserve">
          <source>O(n) Convert a lazy &lt;code&gt;&lt;a href=&quot;data-text-lazy#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt; into a strict &lt;code&gt;&lt;a href=&quot;data-text#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">O (n) Convierte un &lt;code&gt;&lt;a href=&quot;data-text-lazy#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt; perezoso en un &lt;code&gt;&lt;a href=&quot;data-text#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt; estricto .</target>
        </trans-unit>
        <trans-unit id="9bbbc4147ca838c00032188a6ccf06e57207b41a" translate="yes" xml:space="preserve">
          <source>O(n) Convert a literal string into a &lt;code&gt;&lt;a href=&quot;data-text#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">O (n) Convierte una cadena literal en un &lt;code&gt;&lt;a href=&quot;data-text#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="b184ad59702eab37cdb2d1627ffb64df3b470d81" translate="yes" xml:space="preserve">
          <source>O(n) Convert a literal string into a &lt;code&gt;&lt;a href=&quot;data-text#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt;. Subject to fusion.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0ccbaa11b341fb852679dff2ce88252754ea5f59" translate="yes" xml:space="preserve">
          <source>O(n) Convert a string to folded case. Subject to fusion.</source>
          <target state="translated">O(n)Convierte una cuerda en un estuche plegado.Sujeto a la fusión.</target>
        </trans-unit>
        <trans-unit id="b772991b7c4e6cfb13ff25128958c479ac74e993" translate="yes" xml:space="preserve">
          <source>O(n) Convert a string to folded case. This function is mainly useful for performing caseless (or case insensitive) string comparisons.</source>
          <target state="translated">O(n)Convierte una cuerda en un estuche plegado.Esta función es principalmente útil para realizar comparaciones de cadenas sin mayúsculas y minúsculas (o sin distinción de mayúsculas y minúsculas).</target>
        </trans-unit>
        <trans-unit id="46312e84de82a4f156ac3c44ef66dad6a4f1427f" translate="yes" xml:space="preserve">
          <source>O(n) Convert a string to lower case, using simple case conversion. Subject to fusion.</source>
          <target state="translated">O(n)Convierte una cuerda en minúsculas,usando una simple conversión de mayúsculas.Sujeto a la fusión.</target>
        </trans-unit>
        <trans-unit id="7c3a348ec061135b0691aa691587c6d2b1821b7f" translate="yes" xml:space="preserve">
          <source>O(n) Convert a string to lower case, using simple case conversion. The result string may be longer than the input string. For instance, the Latin capital letter I with dot above (U+0130) maps to the sequence Latin small letter i (U+0069) followed by combining dot above (U+0307).</source>
          <target state="translated">O(n)Convierte una cuerda en minúsculas,usando una simple conversión de mayúsculas.La cadena resultante puede ser más larga que la cadena de entrada.Por ejemplo,la letra mayúscula latina I con punto arriba (U+0130)se corresponde con la secuencia letra minúscula latina i (U+0069)seguida de la combinación del punto arriba (U+0307).</target>
        </trans-unit>
        <trans-unit id="f81cbf482def73ca1f69ddb22bc272d835e0e613" translate="yes" xml:space="preserve">
          <source>O(n) Convert a string to title case, using simple case conversion.</source>
          <target state="translated">O(n)Convierte una cadena en caso de título,usando una simple conversión de mayúsculas y minúsculas.</target>
        </trans-unit>
        <trans-unit id="9af6e9c5a7a15004f91b18ab51c4077bca67d27a" translate="yes" xml:space="preserve">
          <source>O(n) Convert a string to title case, using simple case conversion. Subject to fusion.</source>
          <target state="translated">O(n)Convierte una cadena en caso de título,usando una simple conversión de caso.Sujeto a la fusión.</target>
        </trans-unit>
        <trans-unit id="3c56a2d831d67cefbee96be022aa22612eccf23b" translate="yes" xml:space="preserve">
          <source>O(n) Convert a string to upper case, using simple case conversion. Subject to fusion.</source>
          <target state="translated">O(n)Convierte una cuerda en mayúsculas,usando una simple conversión de mayúsculas.Sujeto a la fusión.</target>
        </trans-unit>
        <trans-unit id="4320b35e8740ca1413709e97064c6248875b1172" translate="yes" xml:space="preserve">
          <source>O(n) Convert a string to upper case, using simple case conversion. The result string may be longer than the input string. For instance, the German eszett (U+00DF) maps to the two-letter sequence SS.</source>
          <target state="translated">O(n)Convierte una cuerda en mayúsculas,usando una simple conversión de mayúsculas.La cadena resultante puede ser más larga que la cadena de entrada.Por ejemplo,el eszett alemán (U+00DF)se asigna a la secuencia de dos letras SS.</target>
        </trans-unit>
        <trans-unit id="4d4f75e9a8520767bf6d31a84eb12816ed4ed2df" translate="yes" xml:space="preserve">
          <source>O(n) Converts a &lt;code&gt;&lt;a href=&quot;data-bytestring#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt; to a &lt;code&gt;[&lt;a href=&quot;../base-4.13.0.0/data-word#t:Word8&quot;&gt;Word8&lt;/a&gt;]&lt;/code&gt;.</source>
          <target state="translated">O (n) Convierte un &lt;code&gt;&lt;a href=&quot;data-bytestring#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt; en un &lt;code&gt;[&lt;a href=&quot;../base-4.13.0.0/data-word#t:Word8&quot;&gt;Word8&lt;/a&gt;]&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="98c02abbc8f1614b56f307ed77817fd0c73f0818" translate="yes" xml:space="preserve">
          <source>O(n) Converts a &lt;code&gt;&lt;a href=&quot;data-bytestring#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt; to a &lt;code&gt;[&lt;a href=&quot;../base-4.14.1.0/data-word#t:Word8&quot;&gt;Word8&lt;/a&gt;]&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f1852a6d8a9b7eb6d3e890a797734bc8e20d37a8" translate="yes" xml:space="preserve">
          <source>O(n) Converts a &lt;code&gt;&lt;a href=&quot;data-bytestring-char8#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt; to a &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-string#t:String&quot;&gt;String&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">O (n) Convierte un &lt;code&gt;&lt;a href=&quot;data-bytestring-char8#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt; en un &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-string#t:String&quot;&gt;String&lt;/a&gt;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="50c6fc2c1f1e789aa7922017a54197d55537f07f" translate="yes" xml:space="preserve">
          <source>O(n) Converts a &lt;code&gt;&lt;a href=&quot;data-bytestring-char8#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt; to a &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-string#t:String&quot;&gt;String&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9229cdb5f2ab8990edbd8242d5eadf8a9fefe864" translate="yes" xml:space="preserve">
          <source>O(n) Converts a &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt; to a '[Word8]'.</source>
          <target state="translated">O (n) Convierte un &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt; en un '[Word8]'.</target>
        </trans-unit>
        <trans-unit id="73a0722955ce6234fe6238bca6bb72526ed940c3" translate="yes" xml:space="preserve">
          <source>O(n) Converts a &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy-char8#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt; to a &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-string#t:String&quot;&gt;String&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">O (n) Convierte un &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy-char8#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt; en un &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-string#t:String&quot;&gt;String&lt;/a&gt;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="bb3db6b98a358363668c759fcc16d0a5dd4f17a3" translate="yes" xml:space="preserve">
          <source>O(n) Converts a &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy-char8#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt; to a &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-string#t:String&quot;&gt;String&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="db4431645dd65ad362332ead4fd078850964fee1" translate="yes" xml:space="preserve">
          <source>O(n) Copy a &lt;code&gt;&lt;a href=&quot;data-text#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt; to an array. The array is assumed to be big enough to hold the contents of the entire &lt;code&gt;&lt;a href=&quot;data-text#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">O (n) Copie un &lt;code&gt;&lt;a href=&quot;data-text#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt; en una matriz. Se supone que la matriz es lo suficientemente grande como para contener el contenido de todo el &lt;code&gt;&lt;a href=&quot;data-text#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="49c08abd35188cd479552e06274ab3b606783a11" translate="yes" xml:space="preserve">
          <source>O(n) Create a new &lt;code&gt;&lt;a href=&quot;data-text#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt; from a &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/foreign-ptr#t:Ptr&quot;&gt;Ptr&lt;/a&gt;&lt;/code&gt;&lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-word#t:Word16&quot;&gt;Word16&lt;/a&gt;&lt;/code&gt; by copying the contents of the array.</source>
          <target state="translated">O (n) Cree un nuevo &lt;code&gt;&lt;a href=&quot;data-text#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt; partir de un &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/foreign-ptr#t:Ptr&quot;&gt;Ptr&lt;/a&gt;&lt;/code&gt; &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-word#t:Word16&quot;&gt;Word16&lt;/a&gt;&lt;/code&gt; copiando el contenido de la matriz.</target>
        </trans-unit>
        <trans-unit id="21a43f9bb5371aa51625332a7c784db5d4bd1f9d" translate="yes" xml:space="preserve">
          <source>O(n) Create a new &lt;code&gt;&lt;a href=&quot;data-text#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt; from a &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/foreign-ptr#t:Ptr&quot;&gt;Ptr&lt;/a&gt;&lt;/code&gt;&lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-word#t:Word16&quot;&gt;Word16&lt;/a&gt;&lt;/code&gt; by copying the contents of the array.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c217afeaf00ee9c60d285e731e3da02867342ba2" translate="yes" xml:space="preserve">
          <source>O(n) Decode a C string with explicit length, which is assumed to have been encoded as UTF-8. If decoding fails, a &lt;code&gt;UnicodeException&lt;/code&gt; is thrown.</source>
          <target state="translated">O (n) Decodifica una cadena C con longitud expl&amp;iacute;cita, que se supone que ha sido codificada como UTF-8. Si la decodificaci&amp;oacute;n falla, se lanza una &lt;code&gt;UnicodeException&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="04e3328697b5ee0f14c1d440014223940704b364" translate="yes" xml:space="preserve">
          <source>O(n) Find the longest non-empty common prefix of two strings and return it, along with the suffixes of each string at which they no longer match.</source>
          <target state="translated">O(n)Encuentra el prefijo común no vacío más largo de dos cuerdas y devuélvelo,junto con los sufijos de cada cuerda en los que ya no coincidan.</target>
        </trans-unit>
        <trans-unit id="a659add40cbc2036f206e93f510451803009f875" translate="yes" xml:space="preserve">
          <source>O(n) Group characters in a string according to a predicate.</source>
          <target state="translated">O(n)Agrupar los caracteres en una cadena según un predicado.</target>
        </trans-unit>
        <trans-unit id="2c3a4c26ce02dc31929573a63ee80cbf9fdf8d6d" translate="yes" xml:space="preserve">
          <source>O(n) Group characters in a string by equality.</source>
          <target state="translated">O(n)Agrupar los caracteres en una cadena por la igualdad.</target>
        </trans-unit>
        <trans-unit id="a35e2d04eaba5d2c39f00dca373142e68d8e4937" translate="yes" xml:space="preserve">
          <source>O(n) Indicate whether a string contains exactly one element.</source>
          <target state="translated">O(n)Indicar si una cadena contiene exactamente un elemento.</target>
        </trans-unit>
        <trans-unit id="e69779d685dab6931eb0355e3d89b3eaab286a99" translate="yes" xml:space="preserve">
          <source>O(n) Joins lines, after appending a terminating newline to each.</source>
          <target state="translated">O(n)une las líneas,después de añadir una nueva línea de terminación a cada una.</target>
        </trans-unit>
        <trans-unit id="e44b825be255274a45eb30360f32f9695b729290" translate="yes" xml:space="preserve">
          <source>O(n) Joins words using single space characters.</source>
          <target state="translated">O(n)Une las palabras usando caracteres de un solo espacio.</target>
        </trans-unit>
        <trans-unit id="4caa0ddd9c2ce974aebf5f413d5bbcbbb2c46a20" translate="yes" xml:space="preserve">
          <source>O(n) Left-justify a string to the given length, using the specified fill character on the right. Subject to fusion. Performs replacement on invalid scalar values.</source>
          <target state="translated">O(n)Izquierda-justifica una cadena a la longitud dada,usando el carácter de relleno especificado a la derecha.Sujeto a la fusión.Realiza la sustitución en valores escalares no válidos.</target>
        </trans-unit>
        <trans-unit id="002b8ca37853b9d5f45b87e48a5f4148e3852209" translate="yes" xml:space="preserve">
          <source>O(n) Like &lt;code&gt;&lt;a href=&quot;data-bytestring#v:unfoldr&quot;&gt;unfoldr&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;data-bytestring#v:unfoldrN&quot;&gt;unfoldrN&lt;/a&gt;&lt;/code&gt; builds a ByteString from a seed value. However, the length of the result is limited by the first argument to &lt;code&gt;&lt;a href=&quot;data-bytestring#v:unfoldrN&quot;&gt;unfoldrN&lt;/a&gt;&lt;/code&gt;. This function is more efficient than &lt;code&gt;&lt;a href=&quot;data-bytestring#v:unfoldr&quot;&gt;unfoldr&lt;/a&gt;&lt;/code&gt; when the maximum length of the result is known.</source>
          <target state="translated">O (n) Como &lt;code&gt;&lt;a href=&quot;data-bytestring#v:unfoldr&quot;&gt;unfoldr&lt;/a&gt;&lt;/code&gt; , &lt;code&gt;&lt;a href=&quot;data-bytestring#v:unfoldrN&quot;&gt;unfoldrN&lt;/a&gt;&lt;/code&gt; construye una ByteString a partir de un valor inicial. Sin embargo, la longitud del resultado est&amp;aacute; limitada por el primer argumento a &lt;code&gt;&lt;a href=&quot;data-bytestring#v:unfoldrN&quot;&gt;unfoldrN&lt;/a&gt;&lt;/code&gt; . Esta funci&amp;oacute;n es m&amp;aacute;s eficiente que &lt;code&gt;&lt;a href=&quot;data-bytestring#v:unfoldr&quot;&gt;unfoldr&lt;/a&gt;&lt;/code&gt; cuando se conoce la longitud m&amp;aacute;xima del resultado.</target>
        </trans-unit>
        <trans-unit id="30faaaf56a0ae79ae9892bda7fec05bf8d8792fa" translate="yes" xml:space="preserve">
          <source>O(n) Like &lt;code&gt;&lt;a href=&quot;data-bytestring-char8#v:unfoldr&quot;&gt;unfoldr&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;data-bytestring-char8#v:unfoldrN&quot;&gt;unfoldrN&lt;/a&gt;&lt;/code&gt; builds a ByteString from a seed value. However, the length of the result is limited by the first argument to &lt;code&gt;&lt;a href=&quot;data-bytestring-char8#v:unfoldrN&quot;&gt;unfoldrN&lt;/a&gt;&lt;/code&gt;. This function is more efficient than &lt;code&gt;&lt;a href=&quot;data-bytestring-char8#v:unfoldr&quot;&gt;unfoldr&lt;/a&gt;&lt;/code&gt; when the maximum length of the result is known.</source>
          <target state="translated">O (n) Como &lt;code&gt;&lt;a href=&quot;data-bytestring-char8#v:unfoldr&quot;&gt;unfoldr&lt;/a&gt;&lt;/code&gt; , &lt;code&gt;&lt;a href=&quot;data-bytestring-char8#v:unfoldrN&quot;&gt;unfoldrN&lt;/a&gt;&lt;/code&gt; construye una ByteString a partir de un valor inicial. Sin embargo, la longitud del resultado est&amp;aacute; limitada por el primer argumento a &lt;code&gt;&lt;a href=&quot;data-bytestring-char8#v:unfoldrN&quot;&gt;unfoldrN&lt;/a&gt;&lt;/code&gt; . Esta funci&amp;oacute;n es m&amp;aacute;s eficiente que &lt;code&gt;&lt;a href=&quot;data-bytestring-char8#v:unfoldr&quot;&gt;unfoldr&lt;/a&gt;&lt;/code&gt; cuando se conoce la longitud m&amp;aacute;xima del resultado.</target>
        </trans-unit>
        <trans-unit id="23d3bf4235940f470f4847d4c8acf9dd2db958f8" translate="yes" xml:space="preserve">
          <source>O(n) Like &lt;code&gt;&lt;a href=&quot;data-text#v:unfoldr&quot;&gt;unfoldr&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;data-text#v:unfoldrN&quot;&gt;unfoldrN&lt;/a&gt;&lt;/code&gt; builds a &lt;code&gt;&lt;a href=&quot;data-text#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt; from a seed value. However, the length of the result should be limited by the first argument to &lt;code&gt;&lt;a href=&quot;data-text#v:unfoldrN&quot;&gt;unfoldrN&lt;/a&gt;&lt;/code&gt;. This function is more efficient than &lt;code&gt;&lt;a href=&quot;data-text#v:unfoldr&quot;&gt;unfoldr&lt;/a&gt;&lt;/code&gt; when the maximum length of the result is known and correct, otherwise its performance is similar to &lt;code&gt;&lt;a href=&quot;data-text#v:unfoldr&quot;&gt;unfoldr&lt;/a&gt;&lt;/code&gt;. Subject to fusion. Performs replacement on invalid scalar values.</source>
          <target state="translated">O (n) Como &lt;code&gt;&lt;a href=&quot;data-text#v:unfoldr&quot;&gt;unfoldr&lt;/a&gt;&lt;/code&gt; , &lt;code&gt;&lt;a href=&quot;data-text#v:unfoldrN&quot;&gt;unfoldrN&lt;/a&gt;&lt;/code&gt; construye un &lt;code&gt;&lt;a href=&quot;data-text#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt; o a partir de un valor inicial. Sin embargo, la longitud del resultado debe estar limitada por el primer argumento a &lt;code&gt;&lt;a href=&quot;data-text#v:unfoldrN&quot;&gt;unfoldrN&lt;/a&gt;&lt;/code&gt; . Esta funci&amp;oacute;n es m&amp;aacute;s eficiente que el &lt;code&gt;&lt;a href=&quot;data-text#v:unfoldr&quot;&gt;unfoldr&lt;/a&gt;&lt;/code&gt; cuando se conoce y es correcta la longitud m&amp;aacute;xima del resultado, de lo contrario su desempe&amp;ntilde;o es similar al &lt;code&gt;&lt;a href=&quot;data-text#v:unfoldr&quot;&gt;unfoldr&lt;/a&gt;&lt;/code&gt; . Sujeto a fusi&amp;oacute;n. Realiza el reemplazo de valores escalares no v&amp;aacute;lidos.</target>
        </trans-unit>
        <trans-unit id="707cceb1604a4178ddd41cfe2b4ef536a770043b" translate="yes" xml:space="preserve">
          <source>O(n) Like &lt;code&gt;&lt;a href=&quot;data-text-internal-fusion-common#v:unfoldr&quot;&gt;unfoldr&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;data-text-internal-fusion-common#v:unfoldrNI&quot;&gt;unfoldrNI&lt;/a&gt;&lt;/code&gt; builds a stream from a seed value. However, the length of the result is limited by the first argument to &lt;code&gt;&lt;a href=&quot;data-text-internal-fusion-common#v:unfoldrNI&quot;&gt;unfoldrNI&lt;/a&gt;&lt;/code&gt;. This function is more efficient than &lt;code&gt;&lt;a href=&quot;data-text-internal-fusion-common#v:unfoldr&quot;&gt;unfoldr&lt;/a&gt;&lt;/code&gt; when the length of the result is known.</source>
          <target state="translated">O (n) Como &lt;code&gt;&lt;a href=&quot;data-text-internal-fusion-common#v:unfoldr&quot;&gt;unfoldr&lt;/a&gt;&lt;/code&gt; , &lt;code&gt;&lt;a href=&quot;data-text-internal-fusion-common#v:unfoldrNI&quot;&gt;unfoldrNI&lt;/a&gt;&lt;/code&gt; construye una corriente a partir de un valor semilla. Sin embargo, la longitud del resultado est&amp;aacute; limitada por el primer argumento de &lt;code&gt;&lt;a href=&quot;data-text-internal-fusion-common#v:unfoldrNI&quot;&gt;unfoldrNI&lt;/a&gt;&lt;/code&gt; . Esta funci&amp;oacute;n es m&amp;aacute;s eficiente que &lt;code&gt;&lt;a href=&quot;data-text-internal-fusion-common#v:unfoldr&quot;&gt;unfoldr&lt;/a&gt;&lt;/code&gt; cuando se conoce la longitud del resultado.</target>
        </trans-unit>
        <trans-unit id="02fa6dc2eb8cc09c902623231a0c9592d9297e3f" translate="yes" xml:space="preserve">
          <source>O(n) Like &lt;code&gt;&lt;a href=&quot;data-text-lazy#v:unfoldr&quot;&gt;unfoldr&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;data-text-lazy#v:unfoldrN&quot;&gt;unfoldrN&lt;/a&gt;&lt;/code&gt; builds a &lt;code&gt;&lt;a href=&quot;data-text-lazy#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt; from a seed value. However, the length of the result should be limited by the first argument to &lt;code&gt;&lt;a href=&quot;data-text-lazy#v:unfoldrN&quot;&gt;unfoldrN&lt;/a&gt;&lt;/code&gt;. This function is more efficient than &lt;code&gt;&lt;a href=&quot;data-text-lazy#v:unfoldr&quot;&gt;unfoldr&lt;/a&gt;&lt;/code&gt; when the maximum length of the result is known and correct, otherwise its performance is similar to &lt;code&gt;&lt;a href=&quot;data-text-lazy#v:unfoldr&quot;&gt;unfoldr&lt;/a&gt;&lt;/code&gt;. Performs replacement on invalid scalar values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a9d0c0d5f88448bad03631296676996f087a10bd" translate="yes" xml:space="preserve">
          <source>O(n) Like &lt;code&gt;&lt;a href=&quot;data-text-lazy#v:unfoldr&quot;&gt;unfoldr&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;data-text-lazy#v:unfoldrN&quot;&gt;unfoldrN&lt;/a&gt;&lt;/code&gt; builds a &lt;code&gt;&lt;a href=&quot;data-text-lazy#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt; from a seed value. However, the length of the result should be limited by the first argument to &lt;code&gt;&lt;a href=&quot;data-text-lazy#v:unfoldrN&quot;&gt;unfoldrN&lt;/a&gt;&lt;/code&gt;. This function is more efficient than &lt;code&gt;&lt;a href=&quot;data-text-lazy#v:unfoldr&quot;&gt;unfoldr&lt;/a&gt;&lt;/code&gt; when the maximum length of the result is known and correct, otherwise its performance is similar to &lt;code&gt;&lt;a href=&quot;data-text-lazy#v:unfoldr&quot;&gt;unfoldr&lt;/a&gt;&lt;/code&gt;. Subject to fusion. Performs replacement on invalid scalar values.</source>
          <target state="translated">O (n) Como &lt;code&gt;&lt;a href=&quot;data-text-lazy#v:unfoldr&quot;&gt;unfoldr&lt;/a&gt;&lt;/code&gt; , &lt;code&gt;&lt;a href=&quot;data-text-lazy#v:unfoldrN&quot;&gt;unfoldrN&lt;/a&gt;&lt;/code&gt; construye un &lt;code&gt;&lt;a href=&quot;data-text-lazy#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt; o a partir de un valor inicial. Sin embargo, la longitud del resultado debe estar limitada por el primer argumento a &lt;code&gt;&lt;a href=&quot;data-text-lazy#v:unfoldrN&quot;&gt;unfoldrN&lt;/a&gt;&lt;/code&gt; . Esta funci&amp;oacute;n es m&amp;aacute;s eficiente que el &lt;code&gt;&lt;a href=&quot;data-text-lazy#v:unfoldr&quot;&gt;unfoldr&lt;/a&gt;&lt;/code&gt; cuando se conoce y es correcta la longitud m&amp;aacute;xima del resultado, de lo contrario su desempe&amp;ntilde;o es similar al &lt;code&gt;&lt;a href=&quot;data-text-lazy#v:unfoldr&quot;&gt;unfoldr&lt;/a&gt;&lt;/code&gt; . Sujeto a fusi&amp;oacute;n. Realiza el reemplazo de valores escalares no v&amp;aacute;lidos.</target>
        </trans-unit>
        <trans-unit id="9f37f4c96c452341a250f5601186d1637dd0883f" translate="yes" xml:space="preserve">
          <source>O(n) Like &lt;code&gt;unfoldr&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;data-text-internal-fusion#v:unfoldrN&quot;&gt;unfoldrN&lt;/a&gt;&lt;/code&gt; builds a stream from a seed value. However, the length of the result is limited by the first argument to &lt;code&gt;&lt;a href=&quot;data-text-internal-fusion#v:unfoldrN&quot;&gt;unfoldrN&lt;/a&gt;&lt;/code&gt;. This function is more efficient than &lt;code&gt;unfoldr&lt;/code&gt; when the length of the result is known.</source>
          <target state="translated">O (n) Como &lt;code&gt;unfoldr&lt;/code&gt; , &lt;code&gt;&lt;a href=&quot;data-text-internal-fusion#v:unfoldrN&quot;&gt;unfoldrN&lt;/a&gt;&lt;/code&gt; construye una corriente a partir de un valor semilla. Sin embargo, la longitud del resultado est&amp;aacute; limitada por el primer argumento a &lt;code&gt;&lt;a href=&quot;data-text-internal-fusion#v:unfoldrN&quot;&gt;unfoldrN&lt;/a&gt;&lt;/code&gt; . Esta funci&amp;oacute;n es m&amp;aacute;s eficiente que &lt;code&gt;unfoldr&lt;/code&gt; cuando se conoce la longitud del resultado.</target>
        </trans-unit>
        <trans-unit id="b396cc0699fd0b96323d0ef46d3f497892fbd600" translate="yes" xml:space="preserve">
          <source>O(n) Like &lt;code&gt;unfoldr&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;data-text-internal-lazy-fusion#v:unfoldrN&quot;&gt;unfoldrN&lt;/a&gt;&lt;/code&gt; builds a stream from a seed value. However, the length of the result is limited by the first argument to &lt;code&gt;&lt;a href=&quot;data-text-internal-lazy-fusion#v:unfoldrN&quot;&gt;unfoldrN&lt;/a&gt;&lt;/code&gt;. This function is more efficient than &lt;code&gt;unfoldr&lt;/code&gt; when the length of the result is known.</source>
          <target state="translated">O (n) Como &lt;code&gt;unfoldr&lt;/code&gt; , &lt;code&gt;&lt;a href=&quot;data-text-internal-lazy-fusion#v:unfoldrN&quot;&gt;unfoldrN&lt;/a&gt;&lt;/code&gt; construye una corriente a partir de un valor semilla. Sin embargo, la longitud del resultado est&amp;aacute; limitada por el primer argumento a &lt;code&gt;&lt;a href=&quot;data-text-internal-lazy-fusion#v:unfoldrN&quot;&gt;unfoldrN&lt;/a&gt;&lt;/code&gt; . Esta funci&amp;oacute;n es m&amp;aacute;s eficiente que &lt;code&gt;unfoldr&lt;/code&gt; cuando se conoce la longitud del resultado.</target>
        </trans-unit>
        <trans-unit id="fd69d474274557b0d6669c6da4cb8762e9af27fd" translate="yes" xml:space="preserve">
          <source>O(n) Like a combination of &lt;code&gt;&lt;a href=&quot;data-text#v:map&quot;&gt;map&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;data-text#v:foldl-39-&quot;&gt;foldl'&lt;/a&gt;&lt;/code&gt;. Applies a function to each element of a &lt;code&gt;&lt;a href=&quot;data-text#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt;, passing an accumulating parameter from left to right, and returns a final &lt;code&gt;&lt;a href=&quot;data-text#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt;. Performs replacement on invalid scalar values.</source>
          <target state="translated">O (n) Como una combinaci&amp;oacute;n de &lt;code&gt;&lt;a href=&quot;data-text#v:map&quot;&gt;map&lt;/a&gt;&lt;/code&gt; a y &lt;code&gt;&lt;a href=&quot;data-text#v:foldl-39-&quot;&gt;foldl'&lt;/a&gt;&lt;/code&gt; . Aplica una funci&amp;oacute;n a cada elemento de un &lt;code&gt;&lt;a href=&quot;data-text#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt; , pasando un par&amp;aacute;metro acumulativo de izquierda a derecha y devuelve un &lt;code&gt;&lt;a href=&quot;data-text#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt; final . Realiza el reemplazo de valores escalares no v&amp;aacute;lidos.</target>
        </trans-unit>
        <trans-unit id="71c1e6eceb02e9ab65c18fbc166cfd1f8aa5a8a1" translate="yes" xml:space="preserve">
          <source>O(n) Like a combination of &lt;code&gt;&lt;a href=&quot;data-text-lazy#v:map&quot;&gt;map&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;data-text-lazy#v:foldl-39-&quot;&gt;foldl'&lt;/a&gt;&lt;/code&gt;. Applies a function to each element of a &lt;code&gt;&lt;a href=&quot;data-text-lazy#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt;, passing an accumulating parameter from left to right, and returns a final &lt;code&gt;&lt;a href=&quot;data-text-lazy#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt;. Performs replacement on invalid scalar values.</source>
          <target state="translated">O (n) Como una combinaci&amp;oacute;n de &lt;code&gt;&lt;a href=&quot;data-text-lazy#v:map&quot;&gt;map&lt;/a&gt;&lt;/code&gt; a y &lt;code&gt;&lt;a href=&quot;data-text-lazy#v:foldl-39-&quot;&gt;foldl'&lt;/a&gt;&lt;/code&gt; . Aplica una funci&amp;oacute;n a cada elemento de un &lt;code&gt;&lt;a href=&quot;data-text-lazy#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt; , pasando un par&amp;aacute;metro acumulativo de izquierda a derecha y devuelve un &lt;code&gt;&lt;a href=&quot;data-text-lazy#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt; final . Realiza el reemplazo de valores escalares no v&amp;aacute;lidos.</target>
        </trans-unit>
        <trans-unit id="0e5eae43715f0958b594d36ece6c395a5f524ef7" translate="yes" xml:space="preserve">
          <source>O(n) Like a combination of &lt;code&gt;map&lt;/code&gt; and &lt;code&gt;foldl'&lt;/code&gt;. Applies a function to each element of a &lt;code&gt;&lt;a href=&quot;data-text#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt;, passing an accumulating parameter from left to right, and returns a final &lt;code&gt;&lt;a href=&quot;data-text#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">O (n) Como una combinaci&amp;oacute;n de &lt;code&gt;map&lt;/code&gt; a y &lt;code&gt;foldl'&lt;/code&gt; . Aplica una funci&amp;oacute;n a cada elemento de un &lt;code&gt;&lt;a href=&quot;data-text#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt; , pasando un par&amp;aacute;metro acumulativo de izquierda a derecha y devuelve un &lt;code&gt;&lt;a href=&quot;data-text#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt; final .</target>
        </trans-unit>
        <trans-unit id="bd385cf8434587510e850712a26f3c9cf6ba8434" translate="yes" xml:space="preserve">
          <source>O(n) Make a copy of the &lt;code&gt;&lt;a href=&quot;data-bytestring#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt; with its own storage. This is mainly useful to allow the rest of the data pointed to by the &lt;code&gt;&lt;a href=&quot;data-bytestring#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt; to be garbage collected, for example if a large string has been read in, and only a small part of it is needed in the rest of the program.</source>
          <target state="translated">O (n) Haga una copia de &lt;code&gt;&lt;a href=&quot;data-bytestring#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt; con su propio almacenamiento. Esto es principalmente &amp;uacute;til para permitir que el resto de los datos apuntados por &lt;code&gt;&lt;a href=&quot;data-bytestring#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt; sean recolectados como basura, por ejemplo, si se ha le&amp;iacute;do una cadena grande y solo se necesita una peque&amp;ntilde;a parte en el resto del programa.</target>
        </trans-unit>
        <trans-unit id="d12e2721f328b4d06ddae962d2ce45fb2c052956" translate="yes" xml:space="preserve">
          <source>O(n) Make a copy of the &lt;code&gt;&lt;a href=&quot;data-bytestring-char8#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt; with its own storage. This is mainly useful to allow the rest of the data pointed to by the &lt;code&gt;&lt;a href=&quot;data-bytestring-char8#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt; to be garbage collected, for example if a large string has been read in, and only a small part of it is needed in the rest of the program.</source>
          <target state="translated">O (n) Haga una copia de &lt;code&gt;&lt;a href=&quot;data-bytestring-char8#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt; con su propio almacenamiento. Esto es principalmente &amp;uacute;til para permitir que el resto de los datos apuntados por &lt;code&gt;&lt;a href=&quot;data-bytestring-char8#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt; sean recolectados como basura, por ejemplo, si se ha le&amp;iacute;do una cadena grande y solo se necesita una peque&amp;ntilde;a parte en el resto del programa.</target>
        </trans-unit>
        <trans-unit id="8b30b22f5754643370d85fce8b530d6fa583b842" translate="yes" xml:space="preserve">
          <source>O(n) Make a copy of the &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt; with its own storage. This is mainly useful to allow the rest of the data pointed to by the &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt; to be garbage collected, for example if a large string has been read in, and only a small part of it is needed in the rest of the program.</source>
          <target state="translated">O (n) Haga una copia de &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt; con su propio almacenamiento. Esto es principalmente &amp;uacute;til para permitir que el resto de los datos apuntados por &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt; sean recolectados como basura, por ejemplo, si se ha le&amp;iacute;do una cadena grande y solo se necesita una peque&amp;ntilde;a parte en el resto del programa.</target>
        </trans-unit>
        <trans-unit id="a35b65a085a476052cf10f8c2994c502445fa2d3" translate="yes" xml:space="preserve">
          <source>O(n) Make a copy of the &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy-char8#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt; with its own storage. This is mainly useful to allow the rest of the data pointed to by the &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy-char8#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt; to be garbage collected, for example if a large string has been read in, and only a small part of it is needed in the rest of the program.</source>
          <target state="translated">O (n) Haga una copia de &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy-char8#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt; con su propio almacenamiento. Esto es principalmente &amp;uacute;til para permitir que el resto de los datos apuntados por &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy-char8#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt; sean recolectados como basura, por ejemplo, si se ha le&amp;iacute;do una cadena grande y solo se necesita una peque&amp;ntilde;a parte en el resto del programa.</target>
        </trans-unit>
        <trans-unit id="36d157ae699f73d51c7635484fa80b09e436d0de" translate="yes" xml:space="preserve">
          <source>O(n) Make a distinct copy of the given string, sharing no storage with the original string.</source>
          <target state="translated">O(n)Hacer una copia distintiva de la cadena dada,no compartiendo ningún almacenamiento con la cadena original.</target>
        </trans-unit>
        <trans-unit id="7b962b34d0705417935a21646daa08ad0bd91512" translate="yes" xml:space="preserve">
          <source>O(n) Make a mutable copy of a &lt;code&gt;&lt;a href=&quot;data-text#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">O (n) Hacer una copia mutable de un &lt;code&gt;&lt;a href=&quot;data-text#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="5fd8a16c06dc7fe70e5658dcca9f741b51f4cfb0" translate="yes" xml:space="preserve">
          <source>O(n) Map a function over a &lt;code&gt;&lt;a href=&quot;data-text#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt; that results in a &lt;code&gt;&lt;a href=&quot;data-text#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt;, and concatenate the results.</source>
          <target state="translated">O (n) Asigne una funci&amp;oacute;n sobre un &lt;code&gt;&lt;a href=&quot;data-text#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt; que d&amp;eacute; como resultado un &lt;code&gt;&lt;a href=&quot;data-text#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt; y concatenar los resultados.</target>
        </trans-unit>
        <trans-unit id="db885632c7e5503f149667ebae46860b1840604d" translate="yes" xml:space="preserve">
          <source>O(n) Map a function over a &lt;code&gt;&lt;a href=&quot;data-text-lazy#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt; that results in a &lt;code&gt;&lt;a href=&quot;data-text-lazy#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt;, and concatenate the results.</source>
          <target state="translated">O (n) Asigne una funci&amp;oacute;n sobre un &lt;code&gt;&lt;a href=&quot;data-text-lazy#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt; que d&amp;eacute; como resultado un &lt;code&gt;&lt;a href=&quot;data-text-lazy#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt; y concatenar los resultados.</target>
        </trans-unit>
        <trans-unit id="0bbd083a8a22901ff533a63a5373f1541604a5fc" translate="yes" xml:space="preserve">
          <source>O(n) Pack a null-terminated sequence of bytes, pointed to by an Addr# (an arbitrary machine address assumed to point outside the garbage-collected heap) into a &lt;code&gt;ByteString&lt;/code&gt;. A much faster way to create an &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/ghc-exts#t:Addr-35-&quot;&gt;Addr#&lt;/a&gt;&lt;/code&gt; is with an unboxed string literal, than to pack a boxed string. A unboxed string literal is compiled to a static &lt;code&gt;char
 []&lt;/code&gt; by GHC. Establishing the length of the string requires a call to &lt;code&gt;strlen(3)&lt;/code&gt;, so the &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/ghc-exts#t:Addr-35-&quot;&gt;Addr#&lt;/a&gt;&lt;/code&gt; must point to a null-terminated buffer (as is the case with &lt;code&gt;&quot;string&quot;#&lt;/code&gt; literals in GHC). Use &lt;code&gt;unsafePackAddressLen&lt;/code&gt; if you know the length of the string statically.</source>
          <target state="translated">O (n) Empaquete una secuencia de bytes terminada en nulo, se&amp;ntilde;alada por un Addr # (una direcci&amp;oacute;n de m&amp;aacute;quina arbitraria que se supone que apunta fuera del mont&amp;oacute;n de basura recolectada) en una &lt;code&gt;ByteString&lt;/code&gt; . Una forma mucho m&amp;aacute;s r&amp;aacute;pida de crear un &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/ghc-exts#t:Addr-35-&quot;&gt;Addr#&lt;/a&gt;&lt;/code&gt; es con un literal de cadena sin caja, que empaquetar una cadena en caja. GHC compila un literal de cadena sin caja en un &lt;code&gt;char []&lt;/code&gt; est&amp;aacute;tico [] . Establecer la longitud de la cadena requiere una llamada a &lt;code&gt;strlen(3)&lt;/code&gt; , por lo que &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/ghc-exts#t:Addr-35-&quot;&gt;Addr#&lt;/a&gt;&lt;/code&gt; debe apuntar a un b&amp;uacute;fer terminado en nulo (como es el caso de los literales &lt;code&gt;&quot;string&quot;#&lt;/code&gt; en GHC). Utilice &lt;code&gt;unsafePackAddressLen&lt;/code&gt; si conoce la longitud de la cadena de forma est&amp;aacute;tica.</target>
        </trans-unit>
        <trans-unit id="1c7141221e6d916fda83d734899a25ffabe1f8cd" translate="yes" xml:space="preserve">
          <source>O(n) Pack a null-terminated sequence of bytes, pointed to by an Addr# (an arbitrary machine address assumed to point outside the garbage-collected heap) into a &lt;code&gt;ByteString&lt;/code&gt;. A much faster way to create an &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/ghc-exts#t:Addr-35-&quot;&gt;Addr#&lt;/a&gt;&lt;/code&gt; is with an unboxed string literal, than to pack a boxed string. A unboxed string literal is compiled to a static &lt;code&gt;char
 []&lt;/code&gt; by GHC. Establishing the length of the string requires a call to &lt;code&gt;strlen(3)&lt;/code&gt;, so the &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/ghc-exts#t:Addr-35-&quot;&gt;Addr#&lt;/a&gt;&lt;/code&gt; must point to a null-terminated buffer (as is the case with &lt;code&gt;&quot;string&quot;#&lt;/code&gt; literals in GHC). Use &lt;code&gt;unsafePackAddressLen&lt;/code&gt; if you know the length of the string statically.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cfa2dc9c124826e722b7302103c6162bfec0a518" translate="yes" xml:space="preserve">
          <source>O(n) Perform an action on a temporary, mutable copy of a &lt;code&gt;&lt;a href=&quot;data-text#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt;. The copy is freed as soon as the action returns.</source>
          <target state="translated">O (n) Realizar una acci&amp;oacute;n en una copia temporal y mutable de un &lt;code&gt;&lt;a href=&quot;data-text#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt; . La copia se libera tan pronto como vuelve la acci&amp;oacute;n.</target>
        </trans-unit>
        <trans-unit id="5a3520a1f3466d62ccf2e02b909da8fbb502a47e" translate="yes" xml:space="preserve">
          <source>O(n) Perform the equivalent of &lt;code&gt;scanr&lt;/code&gt; over a list, only with the input and result reversed.</source>
          <target state="translated">O (n) Realiza el equivalente de &lt;code&gt;scanr&lt;/code&gt; sobre una lista, solo con la entrada y el resultado invertidos.</target>
        </trans-unit>
        <trans-unit id="4408f818c20c6217b9247c13b45f97f3e4c7c59b" translate="yes" xml:space="preserve">
          <source>O(n) Remove leading and trailing white space from a string. Equivalent to:</source>
          <target state="translated">O(n)Eliminar los espacios en blanco de una cuerda.Equivalente a:</target>
        </trans-unit>
        <trans-unit id="2dfa53b91b5ae5d3dc0a8459960a0235033e611a" translate="yes" xml:space="preserve">
          <source>O(n) Remove leading white space from a string. Equivalent to:</source>
          <target state="translated">O(n)Eliminar el espacio blanco principal de una cuerda.Equivalente a:</target>
        </trans-unit>
        <trans-unit id="91993e1f8f45e9899425bf17157340b8550c3f01" translate="yes" xml:space="preserve">
          <source>O(n) Remove trailing white space from a string. Equivalent to:</source>
          <target state="translated">O(n)Eliminar los espacios en blanco de una cuerda.Equivalente a:</target>
        </trans-unit>
        <trans-unit id="d1b460d5465e414388d690a52f8b275a28b8962e" translate="yes" xml:space="preserve">
          <source>O(n) Return all final segments of the given &lt;code&gt;&lt;a href=&quot;data-bytestring#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt;, longest first.</source>
          <target state="translated">O (n) Devuelve todos los segmentos finales de la &lt;code&gt;&lt;a href=&quot;data-bytestring#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt; dada , el m&amp;aacute;s largo primero.</target>
        </trans-unit>
        <trans-unit id="0cd8e99b593914a928a8994486df357064e0aa7e" translate="yes" xml:space="preserve">
          <source>O(n) Return all final segments of the given &lt;code&gt;&lt;a href=&quot;data-bytestring-char8#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt;, longest first.</source>
          <target state="translated">O (n) Devuelve todos los segmentos finales de la &lt;code&gt;&lt;a href=&quot;data-bytestring-char8#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt; dada , el m&amp;aacute;s largo primero.</target>
        </trans-unit>
        <trans-unit id="0447eab4b1342c8def4f1a6d3d62851c5aa4e9a7" translate="yes" xml:space="preserve">
          <source>O(n) Return all final segments of the given &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt;, longest first.</source>
          <target state="translated">O (n) Devuelve todos los segmentos finales de la &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt; dada , el m&amp;aacute;s largo primero.</target>
        </trans-unit>
        <trans-unit id="1b47513634de64ed48d49dec6cd06ce2a62a70ba" translate="yes" xml:space="preserve">
          <source>O(n) Return all final segments of the given &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy-char8#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt;, longest first.</source>
          <target state="translated">O (n) Devuelve todos los segmentos finales de la &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy-char8#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt; dada , el m&amp;aacute;s largo primero.</target>
        </trans-unit>
        <trans-unit id="0918a76c9101f9ca3e08437edfcfe1ec3db95836" translate="yes" xml:space="preserve">
          <source>O(n) Return all final segments of the given &lt;code&gt;&lt;a href=&quot;data-text#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt;, longest first.</source>
          <target state="translated">O (n) Devuelve todos los segmentos finales del &lt;code&gt;&lt;a href=&quot;data-text#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt; o dado , los m&amp;aacute;s largos primero.</target>
        </trans-unit>
        <trans-unit id="8512f24bd27c38103de615185f10ac9cab56d0dc" translate="yes" xml:space="preserve">
          <source>O(n) Return all final segments of the given &lt;code&gt;&lt;a href=&quot;data-text-lazy#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt;, longest first.</source>
          <target state="translated">O (n) Devuelve todos los segmentos finales del &lt;code&gt;&lt;a href=&quot;data-text-lazy#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt; o dado , los m&amp;aacute;s largos primero.</target>
        </trans-unit>
        <trans-unit id="86ce9dd7ee5a050d58f437b270db688fdc14627c" translate="yes" xml:space="preserve">
          <source>O(n) Return all initial segments of the given &lt;code&gt;&lt;a href=&quot;data-bytestring#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt;, shortest first.</source>
          <target state="translated">O (n) Devuelve todos los segmentos iniciales del &lt;code&gt;&lt;a href=&quot;data-bytestring#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt; dado , el m&amp;aacute;s corto primero.</target>
        </trans-unit>
        <trans-unit id="827aa4ed2bfda02704f45f7ee63f65cce844ee2b" translate="yes" xml:space="preserve">
          <source>O(n) Return all initial segments of the given &lt;code&gt;&lt;a href=&quot;data-bytestring-char8#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt;, shortest first.</source>
          <target state="translated">O (n) Devuelve todos los segmentos iniciales del &lt;code&gt;&lt;a href=&quot;data-bytestring-char8#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt; dado , el m&amp;aacute;s corto primero.</target>
        </trans-unit>
        <trans-unit id="7245de3299eb44868a28ac4c4866342b6ebfba00" translate="yes" xml:space="preserve">
          <source>O(n) Return all initial segments of the given &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt;, shortest first.</source>
          <target state="translated">O (n) Devuelve todos los segmentos iniciales del &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt; dado , el m&amp;aacute;s corto primero.</target>
        </trans-unit>
        <trans-unit id="1b6f1115f89118bdf3d91f6fe488e6b82de8f516" translate="yes" xml:space="preserve">
          <source>O(n) Return all initial segments of the given &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy-char8#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt;, shortest first.</source>
          <target state="translated">O (n) Devuelve todos los segmentos iniciales del &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy-char8#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt; dado , el m&amp;aacute;s corto primero.</target>
        </trans-unit>
        <trans-unit id="01a401462425ebfdfa08580f8adc498a7c81cbd4" translate="yes" xml:space="preserve">
          <source>O(n) Return all initial segments of the given &lt;code&gt;&lt;a href=&quot;data-text#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt;, shortest first.</source>
          <target state="translated">O (n) Devuelve todos los segmentos iniciales del &lt;code&gt;&lt;a href=&quot;data-text#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt; o dado , el m&amp;aacute;s corto primero.</target>
        </trans-unit>
        <trans-unit id="6493d7f08bee7ce31df304f4187491ac5b073d36" translate="yes" xml:space="preserve">
          <source>O(n) Return all initial segments of the given &lt;code&gt;&lt;a href=&quot;data-text-lazy#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt;, shortest first.</source>
          <target state="translated">O (n) Devuelve todos los segmentos iniciales del &lt;code&gt;&lt;a href=&quot;data-text-lazy#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt; o dado , el m&amp;aacute;s corto primero.</target>
        </trans-unit>
        <trans-unit id="e7559e1e46588798ae20bee6f98692079368f689" translate="yes" xml:space="preserve">
          <source>O(n) Return the prefix of the second string if its suffix matches the entire first string.</source>
          <target state="translated">O(n)Devuelve el prefijo de la segunda cadena si su sufijo coincide con toda la primera cadena.</target>
        </trans-unit>
        <trans-unit id="d9484a9c84958f4b1c549035d04de982894d0855" translate="yes" xml:space="preserve">
          <source>O(n) Return the suffix of the second string if its prefix matches the entire first string.</source>
          <target state="translated">O(n)Devuelve el sufijo de la segunda cadena si su prefijo coincide con toda la primera cadena.</target>
        </trans-unit>
        <trans-unit id="74822af1f80936cd2b8ea0230424c8c5098730fa" translate="yes" xml:space="preserve">
          <source>O(n) Returns the last character of a 'Stream Char', which must be non-empty.</source>
          <target state="translated">O(n)Devuelve el último personaje de un 'Stream Char',que no debe estar vacío.</target>
        </trans-unit>
        <trans-unit id="4de1693f32328b8dad075caaa510fd78ef2522ce" translate="yes" xml:space="preserve">
          <source>O(n) Returns the number of characters in a &lt;code&gt;&lt;a href=&quot;data-text#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt;. Subject to fusion.</source>
          <target state="translated">O (n) Devuelve el n&amp;uacute;mero de caracteres de un &lt;code&gt;&lt;a href=&quot;data-text#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt; . Sujeto a fusi&amp;oacute;n.</target>
        </trans-unit>
        <trans-unit id="8c9725c0fd61149f636713101d2cf2ca76ec6a55" translate="yes" xml:space="preserve">
          <source>O(n) Returns the number of characters in a &lt;code&gt;&lt;a href=&quot;data-text-lazy#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt;. Subject to fusion.</source>
          <target state="translated">O (n) Devuelve el n&amp;uacute;mero de caracteres de un &lt;code&gt;&lt;a href=&quot;data-text-lazy#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt; . Sujeto a fusi&amp;oacute;n.</target>
        </trans-unit>
        <trans-unit id="65968c83b715cc5cf01fe6e4b6c6001e10b5e3fc" translate="yes" xml:space="preserve">
          <source>O(n) Returns the number of characters in a string.</source>
          <target state="translated">O(n)Devuelve el número de caracteres de una cadena.</target>
        </trans-unit>
        <trans-unit id="8ad690f6a723316d96ed98d5e549a0244804f6b5" translate="yes" xml:space="preserve">
          <source>O(n) Returns the number of characters in a text.</source>
          <target state="translated">O(n)Devuelve el número de caracteres de un texto.</target>
        </trans-unit>
        <trans-unit id="9c2cec9aaac41f861e71c244bdd00b0c68afb3e3" translate="yes" xml:space="preserve">
          <source>O(n) Reverse the characters of a string.</source>
          <target state="translated">O(n)Invertir los caracteres de una cadena.</target>
        </trans-unit>
        <trans-unit id="695207b9ba76a7a265006a065899106dbc0649bc" translate="yes" xml:space="preserve">
          <source>O(n) Right-justify a string to the given length, using the specified fill character on the left. Performs replacement on invalid scalar values.</source>
          <target state="translated">O(n)Derecha-justificar una cadena a la longitud dada,usando el carácter de relleno especificado a la izquierda.Realiza la sustitución en valores escalares no válidos.</target>
        </trans-unit>
        <trans-unit id="54d23f1b51b28443437bdea1984b504051aa0e98" translate="yes" xml:space="preserve">
          <source>O(n) Sort a ByteString efficiently, using counting sort.</source>
          <target state="translated">O(n)Clasificar una ByteString eficientemente,usando la clasificación de conteo.</target>
        </trans-unit>
        <trans-unit id="5276f6a20abfcdad68162965818c306dfe1fc5e9" translate="yes" xml:space="preserve">
          <source>O(n) Splits a &lt;code&gt;&lt;a href=&quot;data-bytestring#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt; into components delimited by separators, where the predicate returns True for a separator element. The resulting components do not contain the separators. Two adjacent separators result in an empty component in the output. eg.</source>
          <target state="translated">O (n) Divide un &lt;code&gt;&lt;a href=&quot;data-bytestring#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt; en componentes delimitados por separadores, donde el predicado devuelve True para un elemento separador. Los componentes resultantes no contienen los separadores. Dos separadores adyacentes dan como resultado un componente vac&amp;iacute;o en la salida. p.ej.</target>
        </trans-unit>
        <trans-unit id="d5b615abd7315879ff2b502fc191c080d2b5e7cb" translate="yes" xml:space="preserve">
          <source>O(n) Splits a &lt;code&gt;&lt;a href=&quot;data-bytestring-char8#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt; into components delimited by separators, where the predicate returns True for a separator element. The resulting components do not contain the separators. Two adjacent separators result in an empty component in the output. eg.</source>
          <target state="translated">O (n) Divide un &lt;code&gt;&lt;a href=&quot;data-bytestring-char8#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt; en componentes delimitados por separadores, donde el predicado devuelve True para un elemento separador. Los componentes resultantes no contienen los separadores. Dos separadores adyacentes dan como resultado un componente vac&amp;iacute;o en la salida. p.ej.</target>
        </trans-unit>
        <trans-unit id="dd28605ebd157f3a8e65b56f892bdc64f32d4010" translate="yes" xml:space="preserve">
          <source>O(n) Splits a &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt; into components delimited by separators, where the predicate returns True for a separator element. The resulting components do not contain the separators. Two adjacent separators result in an empty component in the output. eg.</source>
          <target state="translated">O (n) Divide un &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt; en componentes delimitados por separadores, donde el predicado devuelve True para un elemento separador. Los componentes resultantes no contienen los separadores. Dos separadores adyacentes dan como resultado un componente vac&amp;iacute;o en la salida. p.ej.</target>
        </trans-unit>
        <trans-unit id="f051211d534df030e6c0fe44bae67cb1a33f3fc3" translate="yes" xml:space="preserve">
          <source>O(n) Splits a &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy-char8#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt; into components delimited by separators, where the predicate returns True for a separator element. The resulting components do not contain the separators. Two adjacent separators result in an empty component in the output. eg.</source>
          <target state="translated">O (n) Divide un &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy-char8#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt; en componentes delimitados por separadores, donde el predicado devuelve True para un elemento separador. Los componentes resultantes no contienen los separadores. Dos separadores adyacentes dan como resultado un componente vac&amp;iacute;o en la salida. p.ej.</target>
        </trans-unit>
        <trans-unit id="e72b6bbcf0928556060cada219764d08ed0ef684" translate="yes" xml:space="preserve">
          <source>O(n) Splits a &lt;code&gt;&lt;a href=&quot;data-text#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt; into components delimited by separators, where the predicate returns True for a separator element. The resulting components do not contain the separators. Two adjacent separators result in an empty component in the output. eg.</source>
          <target state="translated">O (n) Divide un &lt;code&gt;&lt;a href=&quot;data-text#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt; en componentes delimitados por separadores, donde el predicado devuelve True para un elemento separador. Los componentes resultantes no contienen los separadores. Dos separadores adyacentes dan como resultado un componente vac&amp;iacute;o en la salida. p.ej.</target>
        </trans-unit>
        <trans-unit id="c9c9c52d5507bf0a1362d9d6eb1459f8dbceee8f" translate="yes" xml:space="preserve">
          <source>O(n) Splits a &lt;code&gt;&lt;a href=&quot;data-text#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt; into components of length &lt;code&gt;k&lt;/code&gt;. The last element may be shorter than the other chunks, depending on the length of the input. Examples:</source>
          <target state="translated">O (n) Divide un &lt;code&gt;&lt;a href=&quot;data-text#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt; en componentes de longitud &lt;code&gt;k&lt;/code&gt; . El &amp;uacute;ltimo elemento puede ser m&amp;aacute;s corto que los otros fragmentos, dependiendo de la longitud de la entrada. Ejemplos:</target>
        </trans-unit>
        <trans-unit id="3db8b59b215c64e4858820ace39deb63f5ef93dc" translate="yes" xml:space="preserve">
          <source>O(n) Splits a &lt;code&gt;&lt;a href=&quot;data-text-lazy#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt; into components delimited by separators, where the predicate returns True for a separator element. The resulting components do not contain the separators. Two adjacent separators result in an empty component in the output. eg.</source>
          <target state="translated">O (n) Divide un &lt;code&gt;&lt;a href=&quot;data-text-lazy#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt; en componentes delimitados por separadores, donde el predicado devuelve True para un elemento separador. Los componentes resultantes no contienen los separadores. Dos separadores adyacentes dan como resultado un componente vac&amp;iacute;o en la salida. p.ej.</target>
        </trans-unit>
        <trans-unit id="c403c54eaa24702629db685df74d2202ae65ae7c" translate="yes" xml:space="preserve">
          <source>O(n) Splits a &lt;code&gt;&lt;a href=&quot;data-text-lazy#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt; into components of length &lt;code&gt;k&lt;/code&gt;. The last element may be shorter than the other chunks, depending on the length of the input. Examples:</source>
          <target state="translated">O (n) Divide un &lt;code&gt;&lt;a href=&quot;data-text-lazy#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt; en componentes de longitud &lt;code&gt;k&lt;/code&gt; . El &amp;uacute;ltimo elemento puede ser m&amp;aacute;s corto que los otros fragmentos, dependiendo de la longitud de la entrada. Ejemplos:</target>
        </trans-unit>
        <trans-unit id="bc0ed6a2e5abab3c2af1fffe84e006e507b78481" translate="yes" xml:space="preserve">
          <source>O(n) Stream index (subscript) operator, starting from 0.</source>
          <target state="translated">O(n)Operador de índice de flujo (subíndice),a partir de 0.</target>
        </trans-unit>
        <trans-unit id="abf500040205ebaec3458e20f45362c69575946d" translate="yes" xml:space="preserve">
          <source>O(n) Take a character and place it between each of the characters of a 'Stream Char'.</source>
          <target state="translated">O(n)Tome un personaje y colóquelo entre cada uno de los personajes de un 'Stream Char'.</target>
        </trans-unit>
        <trans-unit id="ba00e0bb750076ee754340652d5421d865e398e6" translate="yes" xml:space="preserve">
          <source>O(n) The &lt;code&gt;&lt;a href=&quot;data-bytestring#v:elemIndex&quot;&gt;elemIndex&lt;/a&gt;&lt;/code&gt; function returns the index of the first element in the given &lt;code&gt;&lt;a href=&quot;data-bytestring#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt; which is equal to the query element, or &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-maybe#v:Nothing&quot;&gt;Nothing&lt;/a&gt;&lt;/code&gt; if there is no such element. This implementation uses memchr(3).</source>
          <target state="translated">O (n) La funci&amp;oacute;n &lt;code&gt;&lt;a href=&quot;data-bytestring#v:elemIndex&quot;&gt;elemIndex&lt;/a&gt;&lt;/code&gt; devuelve el &amp;iacute;ndice del primer elemento en el &lt;code&gt;&lt;a href=&quot;data-bytestring#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt; dado que es igual al elemento de consulta, o &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-maybe#v:Nothing&quot;&gt;Nothing&lt;/a&gt;&lt;/code&gt; si no existe tal elemento. Esta implementaci&amp;oacute;n usa memchr (3).</target>
        </trans-unit>
        <trans-unit id="121675d1840fbaa29d3baded683d9de7ada4553e" translate="yes" xml:space="preserve">
          <source>O(n) The &lt;code&gt;&lt;a href=&quot;data-bytestring#v:elemIndex&quot;&gt;elemIndex&lt;/a&gt;&lt;/code&gt; function returns the index of the first element in the given &lt;code&gt;&lt;a href=&quot;data-bytestring#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt; which is equal to the query element, or &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-maybe#v:Nothing&quot;&gt;Nothing&lt;/a&gt;&lt;/code&gt; if there is no such element. This implementation uses memchr(3).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7294ce34f08b2f69290e63e44d0a2f7f0df9cf2c" translate="yes" xml:space="preserve">
          <source>O(n) The &lt;code&gt;&lt;a href=&quot;data-bytestring#v:elemIndexEnd&quot;&gt;elemIndexEnd&lt;/a&gt;&lt;/code&gt; function returns the last index of the element in the given &lt;code&gt;&lt;a href=&quot;data-bytestring#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt; which is equal to the query element, or &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-maybe#v:Nothing&quot;&gt;Nothing&lt;/a&gt;&lt;/code&gt; if there is no such element. The following holds:</source>
          <target state="translated">O (n) La funci&amp;oacute;n &lt;code&gt;&lt;a href=&quot;data-bytestring#v:elemIndexEnd&quot;&gt;elemIndexEnd&lt;/a&gt;&lt;/code&gt; devuelve el &amp;uacute;ltimo &amp;iacute;ndice del elemento en el &lt;code&gt;&lt;a href=&quot;data-bytestring#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt; dado que es igual al elemento de consulta, o &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-maybe#v:Nothing&quot;&gt;Nothing&lt;/a&gt;&lt;/code&gt; si no existe tal elemento. Lo siguiente es v&amp;aacute;lido:</target>
        </trans-unit>
        <trans-unit id="01ad593ea875673c760705f00dd2e9f31036077b" translate="yes" xml:space="preserve">
          <source>O(n) The &lt;code&gt;&lt;a href=&quot;data-bytestring#v:elemIndexEnd&quot;&gt;elemIndexEnd&lt;/a&gt;&lt;/code&gt; function returns the last index of the element in the given &lt;code&gt;&lt;a href=&quot;data-bytestring#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt; which is equal to the query element, or &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-maybe#v:Nothing&quot;&gt;Nothing&lt;/a&gt;&lt;/code&gt; if there is no such element. The following holds:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ccc1353ce0f5124b0c0af322be329b6da6b0666a" translate="yes" xml:space="preserve">
          <source>O(n) The &lt;code&gt;&lt;a href=&quot;data-bytestring#v:elemIndices&quot;&gt;elemIndices&lt;/a&gt;&lt;/code&gt; function extends &lt;code&gt;&lt;a href=&quot;data-bytestring#v:elemIndex&quot;&gt;elemIndex&lt;/a&gt;&lt;/code&gt;, by returning the indices of all elements equal to the query element, in ascending order. This implementation uses memchr(3).</source>
          <target state="translated">O (n) La funci&amp;oacute;n &lt;code&gt;&lt;a href=&quot;data-bytestring#v:elemIndices&quot;&gt;elemIndices&lt;/a&gt;&lt;/code&gt; extiende &lt;code&gt;&lt;a href=&quot;data-bytestring#v:elemIndex&quot;&gt;elemIndex&lt;/a&gt;&lt;/code&gt; , devolviendo los &amp;iacute;ndices de todos los elementos iguales al elemento de consulta, en orden ascendente. Esta implementaci&amp;oacute;n usa memchr (3).</target>
        </trans-unit>
        <trans-unit id="93df213cf84b0bfc446b88725217c1f423fa166d" translate="yes" xml:space="preserve">
          <source>O(n) The &lt;code&gt;&lt;a href=&quot;data-bytestring#v:find&quot;&gt;find&lt;/a&gt;&lt;/code&gt; function takes a predicate and a ByteString, and returns the first element in matching the predicate, or &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-maybe#v:Nothing&quot;&gt;Nothing&lt;/a&gt;&lt;/code&gt; if there is no such element.</source>
          <target state="translated">O (n) La funci&amp;oacute;n de &lt;code&gt;&lt;a href=&quot;data-bytestring#v:find&quot;&gt;find&lt;/a&gt;&lt;/code&gt; toma un predicado y una ByteString, y devuelve el primer elemento que coincide con el predicado, o &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-maybe#v:Nothing&quot;&gt;Nothing&lt;/a&gt;&lt;/code&gt; si no existe tal elemento.</target>
        </trans-unit>
        <trans-unit id="162cd10856e8da3dc23ae59d2fd1e75531510006" translate="yes" xml:space="preserve">
          <source>O(n) The &lt;code&gt;&lt;a href=&quot;data-bytestring#v:find&quot;&gt;find&lt;/a&gt;&lt;/code&gt; function takes a predicate and a ByteString, and returns the first element in matching the predicate, or &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-maybe#v:Nothing&quot;&gt;Nothing&lt;/a&gt;&lt;/code&gt; if there is no such element.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e9d07b2ff242a053b7eb44f2fc5489762d714e4e" translate="yes" xml:space="preserve">
          <source>O(n) The &lt;code&gt;&lt;a href=&quot;data-bytestring#v:intercalate&quot;&gt;intercalate&lt;/a&gt;&lt;/code&gt; function takes a &lt;code&gt;&lt;a href=&quot;data-bytestring#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt; and a list of &lt;code&gt;&lt;a href=&quot;data-bytestring#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt;s and concatenates the list after interspersing the first argument between each element of the list.</source>
          <target state="translated">O (n) La funci&amp;oacute;n &lt;code&gt;&lt;a href=&quot;data-bytestring#v:intercalate&quot;&gt;intercalate&lt;/a&gt;&lt;/code&gt; toma un &lt;code&gt;&lt;a href=&quot;data-bytestring#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt; y una lista de &lt;code&gt;&lt;a href=&quot;data-bytestring#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt; sy concatena la lista despu&amp;eacute;s de intercalar el primer argumento entre cada elemento de la lista.</target>
        </trans-unit>
        <trans-unit id="d743aba28ddf40289b0f49186ab0f81a611de9f7" translate="yes" xml:space="preserve">
          <source>O(n) The &lt;code&gt;&lt;a href=&quot;data-bytestring#v:intersperse&quot;&gt;intersperse&lt;/a&gt;&lt;/code&gt; function takes a &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-word#t:Word8&quot;&gt;Word8&lt;/a&gt;&lt;/code&gt; and a &lt;code&gt;&lt;a href=&quot;data-bytestring#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt; and `intersperses' that byte between the elements of the &lt;code&gt;&lt;a href=&quot;data-bytestring#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt;. It is analogous to the intersperse function on Lists.</source>
          <target state="translated">O (n) La funci&amp;oacute;n &lt;code&gt;&lt;a href=&quot;data-bytestring#v:intersperse&quot;&gt;intersperse&lt;/a&gt;&lt;/code&gt; toma un &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-word#t:Word8&quot;&gt;Word8&lt;/a&gt;&lt;/code&gt; y un &lt;code&gt;&lt;a href=&quot;data-bytestring#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt; y 'intercala' ese byte entre los elementos del &lt;code&gt;&lt;a href=&quot;data-bytestring#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt; . Es an&amp;aacute;loga a la funci&amp;oacute;n intercalar en Listas.</target>
        </trans-unit>
        <trans-unit id="176f827e8821221b5e5ce3e505b74e7017297578" translate="yes" xml:space="preserve">
          <source>O(n) The &lt;code&gt;&lt;a href=&quot;data-bytestring#v:intersperse&quot;&gt;intersperse&lt;/a&gt;&lt;/code&gt; function takes a &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-word#t:Word8&quot;&gt;Word8&lt;/a&gt;&lt;/code&gt; and a &lt;code&gt;&lt;a href=&quot;data-bytestring#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt; and `intersperses' that byte between the elements of the &lt;code&gt;&lt;a href=&quot;data-bytestring#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt;. It is analogous to the intersperse function on Lists.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="204c8f3b5bf971a266fd5d2c26559d5349e784c3" translate="yes" xml:space="preserve">
          <source>O(n) The &lt;code&gt;&lt;a href=&quot;data-bytestring#v:isPrefixOf&quot;&gt;isPrefixOf&lt;/a&gt;&lt;/code&gt; function takes two ByteStrings and returns &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-bool#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt; if the first is a prefix of the second.</source>
          <target state="translated">O (n) La funci&amp;oacute;n &lt;code&gt;&lt;a href=&quot;data-bytestring#v:isPrefixOf&quot;&gt;isPrefixOf&lt;/a&gt;&lt;/code&gt; toma dos ByteStrings y devuelve &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-bool#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt; si el primero es un prefijo del segundo.</target>
        </trans-unit>
        <trans-unit id="bb28a0f8bc4d0410bd07454eb55bb93a3c192636" translate="yes" xml:space="preserve">
          <source>O(n) The &lt;code&gt;&lt;a href=&quot;data-bytestring#v:isPrefixOf&quot;&gt;isPrefixOf&lt;/a&gt;&lt;/code&gt; function takes two ByteStrings and returns &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-bool#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt; if the first is a prefix of the second.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="871f9c5f00615752cd36e68b1218a247b69131eb" translate="yes" xml:space="preserve">
          <source>O(n) The &lt;code&gt;&lt;a href=&quot;data-bytestring#v:isSuffixOf&quot;&gt;isSuffixOf&lt;/a&gt;&lt;/code&gt; function takes two ByteStrings and returns &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-bool#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt; iff the first is a suffix of the second.</source>
          <target state="translated">O (n) La funci&amp;oacute;n &lt;code&gt;&lt;a href=&quot;data-bytestring#v:isSuffixOf&quot;&gt;isSuffixOf&lt;/a&gt;&lt;/code&gt; toma dos ByteStrings y devuelve &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-bool#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt; si el primero es un sufijo del segundo.</target>
        </trans-unit>
        <trans-unit id="87cde1ed18f64595d44ca444a2616e7327ffe51b" translate="yes" xml:space="preserve">
          <source>O(n) The &lt;code&gt;&lt;a href=&quot;data-bytestring#v:isSuffixOf&quot;&gt;isSuffixOf&lt;/a&gt;&lt;/code&gt; function takes two ByteStrings and returns &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-bool#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt; iff the first is a suffix of the second.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="388dae8f9d8b26fb69cfbb7d78d16681f122959b" translate="yes" xml:space="preserve">
          <source>O(n) The &lt;code&gt;&lt;a href=&quot;data-bytestring#v:partition&quot;&gt;partition&lt;/a&gt;&lt;/code&gt; function takes a predicate a ByteString and returns the pair of ByteStrings with elements which do and do not satisfy the predicate, respectively; i.e.,</source>
          <target state="translated">O (n) La funci&amp;oacute;n de &lt;code&gt;&lt;a href=&quot;data-bytestring#v:partition&quot;&gt;partition&lt;/a&gt;&lt;/code&gt; toma un predicado ByteString y devuelve el par de ByteStrings con elementos que satisfacen y no satisfacen el predicado, respectivamente; es decir,</target>
        </trans-unit>
        <trans-unit id="2b57b2469071deaf282a837bfc802963cc1597c5" translate="yes" xml:space="preserve">
          <source>O(n) The &lt;code&gt;&lt;a href=&quot;data-bytestring#v:stripPrefix&quot;&gt;stripPrefix&lt;/a&gt;&lt;/code&gt; function takes two ByteStrings and returns &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-maybe#v:Just&quot;&gt;Just&lt;/a&gt;&lt;/code&gt; the remainder of the second iff the first is its prefix, and otherwise &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-maybe#v:Nothing&quot;&gt;Nothing&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">O (n) La funci&amp;oacute;n &lt;code&gt;&lt;a href=&quot;data-bytestring#v:stripPrefix&quot;&gt;stripPrefix&lt;/a&gt;&lt;/code&gt; toma dos ByteStrings y devuelve &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-maybe#v:Just&quot;&gt;Just&lt;/a&gt;&lt;/code&gt; el resto del segundo si el primero es su prefijo y, de lo contrario, &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-maybe#v:Nothing&quot;&gt;Nothing&lt;/a&gt;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="f588b9fa31fb978c11d85f825d24a4d059923b15" translate="yes" xml:space="preserve">
          <source>O(n) The &lt;code&gt;&lt;a href=&quot;data-bytestring#v:stripPrefix&quot;&gt;stripPrefix&lt;/a&gt;&lt;/code&gt; function takes two ByteStrings and returns &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-maybe#v:Just&quot;&gt;Just&lt;/a&gt;&lt;/code&gt; the remainder of the second iff the first is its prefix, and otherwise &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-maybe#v:Nothing&quot;&gt;Nothing&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7fd9dc1000a007fa9c22b27409807a7d9882fd24" translate="yes" xml:space="preserve">
          <source>O(n) The &lt;code&gt;&lt;a href=&quot;data-bytestring#v:stripSuffix&quot;&gt;stripSuffix&lt;/a&gt;&lt;/code&gt; function takes two ByteStrings and returns &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-maybe#v:Just&quot;&gt;Just&lt;/a&gt;&lt;/code&gt; the remainder of the second iff the first is its suffix, and otherwise &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-maybe#v:Nothing&quot;&gt;Nothing&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">O (n) La funci&amp;oacute;n &lt;code&gt;&lt;a href=&quot;data-bytestring#v:stripSuffix&quot;&gt;stripSuffix&lt;/a&gt;&lt;/code&gt; toma dos ByteStrings y devuelve &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-maybe#v:Just&quot;&gt;Just&lt;/a&gt;&lt;/code&gt; el resto del segundo si el primero es su sufijo y, de lo contrario, &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-maybe#v:Nothing&quot;&gt;Nothing&lt;/a&gt;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="8869ebcaeadfce416bbc4a772dc85ee316b0aff5" translate="yes" xml:space="preserve">
          <source>O(n) The &lt;code&gt;&lt;a href=&quot;data-bytestring#v:stripSuffix&quot;&gt;stripSuffix&lt;/a&gt;&lt;/code&gt; function takes two ByteStrings and returns &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-maybe#v:Just&quot;&gt;Just&lt;/a&gt;&lt;/code&gt; the remainder of the second iff the first is its suffix, and otherwise &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-maybe#v:Nothing&quot;&gt;Nothing&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dca40319b2d407b60450f114877926f6aef08263" translate="yes" xml:space="preserve">
          <source>O(n) The &lt;code&gt;&lt;a href=&quot;data-bytestring-char8#v:elemIndex&quot;&gt;elemIndex&lt;/a&gt;&lt;/code&gt; function returns the index of the first element in the given &lt;code&gt;&lt;a href=&quot;data-bytestring-char8#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt; which is equal (by memchr) to the query element, or &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-maybe#v:Nothing&quot;&gt;Nothing&lt;/a&gt;&lt;/code&gt; if there is no such element.</source>
          <target state="translated">O (n) La funci&amp;oacute;n &lt;code&gt;&lt;a href=&quot;data-bytestring-char8#v:elemIndex&quot;&gt;elemIndex&lt;/a&gt;&lt;/code&gt; devuelve el &amp;iacute;ndice del primer elemento en el &lt;code&gt;&lt;a href=&quot;data-bytestring-char8#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt; dado que es igual (por memchr) al elemento de consulta, o &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-maybe#v:Nothing&quot;&gt;Nothing&lt;/a&gt;&lt;/code&gt; si no existe tal elemento.</target>
        </trans-unit>
        <trans-unit id="a623a2e7ab16687e15b7389f51430d9694a49a76" translate="yes" xml:space="preserve">
          <source>O(n) The &lt;code&gt;&lt;a href=&quot;data-bytestring-char8#v:elemIndex&quot;&gt;elemIndex&lt;/a&gt;&lt;/code&gt; function returns the index of the first element in the given &lt;code&gt;&lt;a href=&quot;data-bytestring-char8#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt; which is equal (by memchr) to the query element, or &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-maybe#v:Nothing&quot;&gt;Nothing&lt;/a&gt;&lt;/code&gt; if there is no such element.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b069c53a86831c1f35b201fd23f97804ba271e70" translate="yes" xml:space="preserve">
          <source>O(n) The &lt;code&gt;&lt;a href=&quot;data-bytestring-char8#v:elemIndexEnd&quot;&gt;elemIndexEnd&lt;/a&gt;&lt;/code&gt; function returns the last index of the element in the given &lt;code&gt;&lt;a href=&quot;data-bytestring-char8#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt; which is equal to the query element, or &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-maybe#v:Nothing&quot;&gt;Nothing&lt;/a&gt;&lt;/code&gt; if there is no such element. The following holds:</source>
          <target state="translated">O (n) La funci&amp;oacute;n &lt;code&gt;&lt;a href=&quot;data-bytestring-char8#v:elemIndexEnd&quot;&gt;elemIndexEnd&lt;/a&gt;&lt;/code&gt; devuelve el &amp;uacute;ltimo &amp;iacute;ndice del elemento en el &lt;code&gt;&lt;a href=&quot;data-bytestring-char8#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt; dado que es igual al elemento de consulta, o &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-maybe#v:Nothing&quot;&gt;Nothing&lt;/a&gt;&lt;/code&gt; si no existe tal elemento. Lo siguiente es v&amp;aacute;lido:</target>
        </trans-unit>
        <trans-unit id="bcd0c8abeed2e6fe6cecb561a965ed6de29084ce" translate="yes" xml:space="preserve">
          <source>O(n) The &lt;code&gt;&lt;a href=&quot;data-bytestring-char8#v:elemIndexEnd&quot;&gt;elemIndexEnd&lt;/a&gt;&lt;/code&gt; function returns the last index of the element in the given &lt;code&gt;&lt;a href=&quot;data-bytestring-char8#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt; which is equal to the query element, or &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-maybe#v:Nothing&quot;&gt;Nothing&lt;/a&gt;&lt;/code&gt; if there is no such element. The following holds:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="109dc784a46f924102c9371c0163263be5259b44" translate="yes" xml:space="preserve">
          <source>O(n) The &lt;code&gt;&lt;a href=&quot;data-bytestring-char8#v:elemIndices&quot;&gt;elemIndices&lt;/a&gt;&lt;/code&gt; function extends &lt;code&gt;&lt;a href=&quot;data-bytestring-char8#v:elemIndex&quot;&gt;elemIndex&lt;/a&gt;&lt;/code&gt;, by returning the indices of all elements equal to the query element, in ascending order.</source>
          <target state="translated">O (n) La funci&amp;oacute;n &lt;code&gt;&lt;a href=&quot;data-bytestring-char8#v:elemIndices&quot;&gt;elemIndices&lt;/a&gt;&lt;/code&gt; extiende &lt;code&gt;&lt;a href=&quot;data-bytestring-char8#v:elemIndex&quot;&gt;elemIndex&lt;/a&gt;&lt;/code&gt; , devolviendo los &amp;iacute;ndices de todos los elementos iguales al elemento de consulta, en orden ascendente.</target>
        </trans-unit>
        <trans-unit id="f15dbd18568ca22aed7b141ad4cb9a7ceeda48fd" translate="yes" xml:space="preserve">
          <source>O(n) The &lt;code&gt;&lt;a href=&quot;data-bytestring-char8#v:find&quot;&gt;find&lt;/a&gt;&lt;/code&gt; function takes a predicate and a ByteString, and returns the first element in matching the predicate, or &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-maybe#v:Nothing&quot;&gt;Nothing&lt;/a&gt;&lt;/code&gt; if there is no such element.</source>
          <target state="translated">O (n) La funci&amp;oacute;n de &lt;code&gt;&lt;a href=&quot;data-bytestring-char8#v:find&quot;&gt;find&lt;/a&gt;&lt;/code&gt; toma un predicado y una ByteString, y devuelve el primer elemento que coincide con el predicado, o &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-maybe#v:Nothing&quot;&gt;Nothing&lt;/a&gt;&lt;/code&gt; si no existe tal elemento.</target>
        </trans-unit>
        <trans-unit id="78caed37e8b75710f6071164afd28f48c6893c53" translate="yes" xml:space="preserve">
          <source>O(n) The &lt;code&gt;&lt;a href=&quot;data-bytestring-char8#v:find&quot;&gt;find&lt;/a&gt;&lt;/code&gt; function takes a predicate and a ByteString, and returns the first element in matching the predicate, or &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-maybe#v:Nothing&quot;&gt;Nothing&lt;/a&gt;&lt;/code&gt; if there is no such element.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2ab21dee7ace87b1b9d574f98491108d09b49623" translate="yes" xml:space="preserve">
          <source>O(n) The &lt;code&gt;&lt;a href=&quot;data-bytestring-char8#v:intercalate&quot;&gt;intercalate&lt;/a&gt;&lt;/code&gt; function takes a &lt;code&gt;&lt;a href=&quot;data-bytestring-char8#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt; and a list of &lt;code&gt;&lt;a href=&quot;data-bytestring-char8#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt;s and concatenates the list after interspersing the first argument between each element of the list.</source>
          <target state="translated">O (n) La funci&amp;oacute;n &lt;code&gt;&lt;a href=&quot;data-bytestring-char8#v:intercalate&quot;&gt;intercalate&lt;/a&gt;&lt;/code&gt; toma un &lt;code&gt;&lt;a href=&quot;data-bytestring-char8#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt; y una lista de &lt;code&gt;&lt;a href=&quot;data-bytestring-char8#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt; sy concatena la lista despu&amp;eacute;s de intercalar el primer argumento entre cada elemento de la lista.</target>
        </trans-unit>
        <trans-unit id="1997be7191b1cdb47b92b9592eb394b0e2e9f3d8" translate="yes" xml:space="preserve">
          <source>O(n) The &lt;code&gt;&lt;a href=&quot;data-bytestring-char8#v:intersperse&quot;&gt;intersperse&lt;/a&gt;&lt;/code&gt; function takes a Char and a &lt;code&gt;&lt;a href=&quot;data-bytestring-char8#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt; and `intersperses' that Char between the elements of the &lt;code&gt;&lt;a href=&quot;data-bytestring-char8#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt;. It is analogous to the intersperse function on Lists.</source>
          <target state="translated">O (n) La funci&amp;oacute;n &lt;code&gt;&lt;a href=&quot;data-bytestring-char8#v:intersperse&quot;&gt;intersperse&lt;/a&gt;&lt;/code&gt; toma un Char y un &lt;code&gt;&lt;a href=&quot;data-bytestring-char8#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt; y 'intercala' ese Char entre los elementos de &lt;code&gt;&lt;a href=&quot;data-bytestring-char8#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt; . Es an&amp;aacute;loga a la funci&amp;oacute;n intercalar en Listas.</target>
        </trans-unit>
        <trans-unit id="bf43d4fe89323cd0ec220757b72e55ae7e0dcfeb" translate="yes" xml:space="preserve">
          <source>O(n) The &lt;code&gt;&lt;a href=&quot;data-bytestring-char8#v:isPrefixOf&quot;&gt;isPrefixOf&lt;/a&gt;&lt;/code&gt; function takes two ByteStrings and returns &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-bool#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt; if the first is a prefix of the second.</source>
          <target state="translated">O (n) La funci&amp;oacute;n &lt;code&gt;&lt;a href=&quot;data-bytestring-char8#v:isPrefixOf&quot;&gt;isPrefixOf&lt;/a&gt;&lt;/code&gt; toma dos ByteStrings y devuelve &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-bool#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt; si el primero es un prefijo del segundo.</target>
        </trans-unit>
        <trans-unit id="a0ceced28c4c7f9088f6dcc1fb8c4fbe93bf6a47" translate="yes" xml:space="preserve">
          <source>O(n) The &lt;code&gt;&lt;a href=&quot;data-bytestring-char8#v:isPrefixOf&quot;&gt;isPrefixOf&lt;/a&gt;&lt;/code&gt; function takes two ByteStrings and returns &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-bool#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt; if the first is a prefix of the second.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bb36530bbce5b5bf07e0e94bc65e635935afe3b9" translate="yes" xml:space="preserve">
          <source>O(n) The &lt;code&gt;&lt;a href=&quot;data-bytestring-char8#v:isSuffixOf&quot;&gt;isSuffixOf&lt;/a&gt;&lt;/code&gt; function takes two ByteStrings and returns &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-bool#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt; iff the first is a suffix of the second.</source>
          <target state="translated">O (n) La funci&amp;oacute;n &lt;code&gt;&lt;a href=&quot;data-bytestring-char8#v:isSuffixOf&quot;&gt;isSuffixOf&lt;/a&gt;&lt;/code&gt; toma dos ByteStrings y devuelve &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-bool#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt; si el primero es un sufijo del segundo.</target>
        </trans-unit>
        <trans-unit id="bf935607ebfe208676cfcb72dfaeb5d753a7131d" translate="yes" xml:space="preserve">
          <source>O(n) The &lt;code&gt;&lt;a href=&quot;data-bytestring-char8#v:isSuffixOf&quot;&gt;isSuffixOf&lt;/a&gt;&lt;/code&gt; function takes two ByteStrings and returns &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-bool#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt; iff the first is a suffix of the second.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2689304446b95c07ffc19087bb94b671d87056a3" translate="yes" xml:space="preserve">
          <source>O(n) The &lt;code&gt;&lt;a href=&quot;data-bytestring-char8#v:stripPrefix&quot;&gt;stripPrefix&lt;/a&gt;&lt;/code&gt; function takes two ByteStrings and returns &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-maybe#v:Just&quot;&gt;Just&lt;/a&gt;&lt;/code&gt; the remainder of the second iff the first is its prefix, and otherwise &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-maybe#v:Nothing&quot;&gt;Nothing&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">O (n) La funci&amp;oacute;n &lt;code&gt;&lt;a href=&quot;data-bytestring-char8#v:stripPrefix&quot;&gt;stripPrefix&lt;/a&gt;&lt;/code&gt; toma dos ByteStrings y devuelve &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-maybe#v:Just&quot;&gt;Just&lt;/a&gt;&lt;/code&gt; el resto del segundo si el primero es su prefijo y, de lo contrario, &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-maybe#v:Nothing&quot;&gt;Nothing&lt;/a&gt;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="6a1f455049738b96828b1fab74acaaff9f560988" translate="yes" xml:space="preserve">
          <source>O(n) The &lt;code&gt;&lt;a href=&quot;data-bytestring-char8#v:stripPrefix&quot;&gt;stripPrefix&lt;/a&gt;&lt;/code&gt; function takes two ByteStrings and returns &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-maybe#v:Just&quot;&gt;Just&lt;/a&gt;&lt;/code&gt; the remainder of the second iff the first is its prefix, and otherwise &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-maybe#v:Nothing&quot;&gt;Nothing&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="91158d8244af0c5ddcf54bbc424a1f3ce8465455" translate="yes" xml:space="preserve">
          <source>O(n) The &lt;code&gt;&lt;a href=&quot;data-bytestring-char8#v:stripSuffix&quot;&gt;stripSuffix&lt;/a&gt;&lt;/code&gt; function takes two ByteStrings and returns &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-maybe#v:Just&quot;&gt;Just&lt;/a&gt;&lt;/code&gt; the remainder of the second iff the first is its suffix, and otherwise &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-maybe#v:Nothing&quot;&gt;Nothing&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">O (n) La funci&amp;oacute;n &lt;code&gt;&lt;a href=&quot;data-bytestring-char8#v:stripSuffix&quot;&gt;stripSuffix&lt;/a&gt;&lt;/code&gt; toma dos ByteStrings y devuelve &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-maybe#v:Just&quot;&gt;Just&lt;/a&gt;&lt;/code&gt; el resto del segundo si el primero es su sufijo y, de lo contrario, &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-maybe#v:Nothing&quot;&gt;Nothing&lt;/a&gt;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="a7a00cf455b4aaa94ffcbf1b27f30d2d4b983381" translate="yes" xml:space="preserve">
          <source>O(n) The &lt;code&gt;&lt;a href=&quot;data-bytestring-char8#v:stripSuffix&quot;&gt;stripSuffix&lt;/a&gt;&lt;/code&gt; function takes two ByteStrings and returns &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-maybe#v:Just&quot;&gt;Just&lt;/a&gt;&lt;/code&gt; the remainder of the second iff the first is its suffix, and otherwise &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-maybe#v:Nothing&quot;&gt;Nothing&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0f8ff6cc69b22bf1456425678371604ae8bf9764" translate="yes" xml:space="preserve">
          <source>O(n) The &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy#v:elemIndex&quot;&gt;elemIndex&lt;/a&gt;&lt;/code&gt; function returns the index of the first element in the given &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt; which is equal to the query element, or &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-maybe#v:Nothing&quot;&gt;Nothing&lt;/a&gt;&lt;/code&gt; if there is no such element. This implementation uses memchr(3).</source>
          <target state="translated">O (n) La funci&amp;oacute;n &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy#v:elemIndex&quot;&gt;elemIndex&lt;/a&gt;&lt;/code&gt; devuelve el &amp;iacute;ndice del primer elemento en el &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt; dado que es igual al elemento de consulta, o &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-maybe#v:Nothing&quot;&gt;Nothing&lt;/a&gt;&lt;/code&gt; si no existe tal elemento. Esta implementaci&amp;oacute;n usa memchr (3).</target>
        </trans-unit>
        <trans-unit id="a398352b17c6d52739d44d57e844810d9fdaa8f4" translate="yes" xml:space="preserve">
          <source>O(n) The &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy#v:elemIndex&quot;&gt;elemIndex&lt;/a&gt;&lt;/code&gt; function returns the index of the first element in the given &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt; which is equal to the query element, or &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-maybe#v:Nothing&quot;&gt;Nothing&lt;/a&gt;&lt;/code&gt; if there is no such element. This implementation uses memchr(3).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0af10507b5ea81f6fcabbaeba877b14d1834c332" translate="yes" xml:space="preserve">
          <source>O(n) The &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy#v:elemIndexEnd&quot;&gt;elemIndexEnd&lt;/a&gt;&lt;/code&gt; function returns the last index of the element in the given &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt; which is equal to the query element, or &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-maybe#v:Nothing&quot;&gt;Nothing&lt;/a&gt;&lt;/code&gt; if there is no such element. The following holds:</source>
          <target state="translated">O (n) La funci&amp;oacute;n &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy#v:elemIndexEnd&quot;&gt;elemIndexEnd&lt;/a&gt;&lt;/code&gt; devuelve el &amp;uacute;ltimo &amp;iacute;ndice del elemento en el &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt; dado que es igual al elemento de consulta, o &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-maybe#v:Nothing&quot;&gt;Nothing&lt;/a&gt;&lt;/code&gt; si no existe tal elemento. Lo siguiente es v&amp;aacute;lido:</target>
        </trans-unit>
        <trans-unit id="14c7bf68b17f49e8b32db0d15573be43d627b498" translate="yes" xml:space="preserve">
          <source>O(n) The &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy#v:elemIndexEnd&quot;&gt;elemIndexEnd&lt;/a&gt;&lt;/code&gt; function returns the last index of the element in the given &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt; which is equal to the query element, or &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-maybe#v:Nothing&quot;&gt;Nothing&lt;/a&gt;&lt;/code&gt; if there is no such element. The following holds:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fbcfdfda801794a07662249df86f86aa5cd0b663" translate="yes" xml:space="preserve">
          <source>O(n) The &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy#v:elemIndices&quot;&gt;elemIndices&lt;/a&gt;&lt;/code&gt; function extends &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy#v:elemIndex&quot;&gt;elemIndex&lt;/a&gt;&lt;/code&gt;, by returning the indices of all elements equal to the query element, in ascending order. This implementation uses memchr(3).</source>
          <target state="translated">O (n) La funci&amp;oacute;n &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy#v:elemIndices&quot;&gt;elemIndices&lt;/a&gt;&lt;/code&gt; extiende &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy#v:elemIndex&quot;&gt;elemIndex&lt;/a&gt;&lt;/code&gt; , devolviendo los &amp;iacute;ndices de todos los elementos iguales al elemento de consulta, en orden ascendente. Esta implementaci&amp;oacute;n usa memchr (3).</target>
        </trans-unit>
        <trans-unit id="621e458fd04dd53651e92111855033d450b93228" translate="yes" xml:space="preserve">
          <source>O(n) The &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy#v:find&quot;&gt;find&lt;/a&gt;&lt;/code&gt; function takes a predicate and a ByteString, and returns the first element in matching the predicate, or &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-maybe#v:Nothing&quot;&gt;Nothing&lt;/a&gt;&lt;/code&gt; if there is no such element.</source>
          <target state="translated">O (n) La funci&amp;oacute;n de &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy#v:find&quot;&gt;find&lt;/a&gt;&lt;/code&gt; toma un predicado y una ByteString, y devuelve el primer elemento que coincide con el predicado, o &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-maybe#v:Nothing&quot;&gt;Nothing&lt;/a&gt;&lt;/code&gt; si no existe tal elemento.</target>
        </trans-unit>
        <trans-unit id="37315a1539ac148f8b197ee303a4f06afb4f713e" translate="yes" xml:space="preserve">
          <source>O(n) The &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy#v:find&quot;&gt;find&lt;/a&gt;&lt;/code&gt; function takes a predicate and a ByteString, and returns the first element in matching the predicate, or &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-maybe#v:Nothing&quot;&gt;Nothing&lt;/a&gt;&lt;/code&gt; if there is no such element.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="31976f5cbdfc98ce2993d12f12e761df2fe1de07" translate="yes" xml:space="preserve">
          <source>O(n) The &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy#v:intercalate&quot;&gt;intercalate&lt;/a&gt;&lt;/code&gt; function takes a &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt; and a list of &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt;s and concatenates the list after interspersing the first argument between each element of the list.</source>
          <target state="translated">O (n) La funci&amp;oacute;n &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy#v:intercalate&quot;&gt;intercalate&lt;/a&gt;&lt;/code&gt; toma un &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt; y una lista de &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt; sy concatena la lista despu&amp;eacute;s de intercalar el primer argumento entre cada elemento de la lista.</target>
        </trans-unit>
        <trans-unit id="aebda77cb9bcb702165b5d974f705234751405b9" translate="yes" xml:space="preserve">
          <source>O(n) The &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy#v:isPrefixOf&quot;&gt;isPrefixOf&lt;/a&gt;&lt;/code&gt; function takes two ByteStrings and returns &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-bool#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt; iff the first is a prefix of the second.</source>
          <target state="translated">O (n) La funci&amp;oacute;n &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy#v:isPrefixOf&quot;&gt;isPrefixOf&lt;/a&gt;&lt;/code&gt; toma dos ByteStrings y devuelve &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-bool#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt; si el primero es un prefijo del segundo.</target>
        </trans-unit>
        <trans-unit id="8377f8842146cb9bdcb129fae39524350bd295ef" translate="yes" xml:space="preserve">
          <source>O(n) The &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy#v:isPrefixOf&quot;&gt;isPrefixOf&lt;/a&gt;&lt;/code&gt; function takes two ByteStrings and returns &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-bool#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt; iff the first is a prefix of the second.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5266ce310e43a8dcba567f8d3dcfa9331f32a63e" translate="yes" xml:space="preserve">
          <source>O(n) The &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy#v:isSuffixOf&quot;&gt;isSuffixOf&lt;/a&gt;&lt;/code&gt; function takes two ByteStrings and returns &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-bool#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt; iff the first is a suffix of the second.</source>
          <target state="translated">O (n) La funci&amp;oacute;n &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy#v:isSuffixOf&quot;&gt;isSuffixOf&lt;/a&gt;&lt;/code&gt; toma dos ByteStrings y devuelve &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-bool#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt; si el primero es un sufijo del segundo.</target>
        </trans-unit>
        <trans-unit id="ededa77d9c7a6776d6ecc0d36aade061de841310" translate="yes" xml:space="preserve">
          <source>O(n) The &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy#v:isSuffixOf&quot;&gt;isSuffixOf&lt;/a&gt;&lt;/code&gt; function takes two ByteStrings and returns &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-bool#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt; iff the first is a suffix of the second.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1df8e27dd6e4c9975b3d6d1b678e792607bef5ca" translate="yes" xml:space="preserve">
          <source>O(n) The &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy#v:partition&quot;&gt;partition&lt;/a&gt;&lt;/code&gt; function takes a predicate a ByteString and returns the pair of ByteStrings with elements which do and do not satisfy the predicate, respectively; i.e.,</source>
          <target state="translated">O (n) La funci&amp;oacute;n de &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy#v:partition&quot;&gt;partition&lt;/a&gt;&lt;/code&gt; toma un predicado ByteString y devuelve el par de ByteStrings con elementos que satisfacen y no satisfacen el predicado, respectivamente; es decir,</target>
        </trans-unit>
        <trans-unit id="b44a44b7bb991d29a4a3fcd4bbb247c4297ebd80" translate="yes" xml:space="preserve">
          <source>O(n) The &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy#v:stripPrefix&quot;&gt;stripPrefix&lt;/a&gt;&lt;/code&gt; function takes two ByteStrings and returns &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-maybe#v:Just&quot;&gt;Just&lt;/a&gt;&lt;/code&gt; the remainder of the second iff the first is its prefix, and otherwise &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-maybe#v:Nothing&quot;&gt;Nothing&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">O (n) La funci&amp;oacute;n &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy#v:stripPrefix&quot;&gt;stripPrefix&lt;/a&gt;&lt;/code&gt; toma dos ByteStrings y devuelve &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-maybe#v:Just&quot;&gt;Just&lt;/a&gt;&lt;/code&gt; el resto del segundo si el primero es su prefijo y, de lo contrario, &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-maybe#v:Nothing&quot;&gt;Nothing&lt;/a&gt;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="1df3964205eddb193d5cfd1b8c5f213312e6d32f" translate="yes" xml:space="preserve">
          <source>O(n) The &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy#v:stripPrefix&quot;&gt;stripPrefix&lt;/a&gt;&lt;/code&gt; function takes two ByteStrings and returns &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-maybe#v:Just&quot;&gt;Just&lt;/a&gt;&lt;/code&gt; the remainder of the second iff the first is its prefix, and otherwise &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-maybe#v:Nothing&quot;&gt;Nothing&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="18e1c4f9b5362a4eb0efebdb1d98d53cd92d25d4" translate="yes" xml:space="preserve">
          <source>O(n) The &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy#v:stripSuffix&quot;&gt;stripSuffix&lt;/a&gt;&lt;/code&gt; function takes two ByteStrings and returns &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-maybe#v:Just&quot;&gt;Just&lt;/a&gt;&lt;/code&gt; the remainder of the second iff the first is its suffix, and otherwise &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-maybe#v:Nothing&quot;&gt;Nothing&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">O (n) La funci&amp;oacute;n &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy#v:stripSuffix&quot;&gt;stripSuffix&lt;/a&gt;&lt;/code&gt; toma dos ByteStrings y devuelve &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-maybe#v:Just&quot;&gt;Just&lt;/a&gt;&lt;/code&gt; el resto del segundo si el primero es su sufijo y, de lo contrario, &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-maybe#v:Nothing&quot;&gt;Nothing&lt;/a&gt;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="e0478fa49c399cf7deb0653820dcb2078ffa8c79" translate="yes" xml:space="preserve">
          <source>O(n) The &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy#v:stripSuffix&quot;&gt;stripSuffix&lt;/a&gt;&lt;/code&gt; function takes two ByteStrings and returns &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-maybe#v:Just&quot;&gt;Just&lt;/a&gt;&lt;/code&gt; the remainder of the second iff the first is its suffix, and otherwise &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-maybe#v:Nothing&quot;&gt;Nothing&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="db96fc5014a3b5e25cf1a26e16811daadd87dee0" translate="yes" xml:space="preserve">
          <source>O(n) The &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy#v:unfoldr&quot;&gt;unfoldr&lt;/a&gt;&lt;/code&gt; function is analogous to the List 'unfoldr'. &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy#v:unfoldr&quot;&gt;unfoldr&lt;/a&gt;&lt;/code&gt; builds a ByteString from a seed value. The function takes the element and returns &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-maybe#v:Nothing&quot;&gt;Nothing&lt;/a&gt;&lt;/code&gt; if it is done producing the ByteString or returns &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-maybe#v:Just&quot;&gt;Just&lt;/a&gt;&lt;/code&gt;&lt;code&gt;(a,b)&lt;/code&gt;, in which case, &lt;code&gt;a&lt;/code&gt; is a prepending to the ByteString and &lt;code&gt;b&lt;/code&gt; is used as the next element in a recursive call.</source>
          <target state="translated">O (n) La funci&amp;oacute;n de &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy#v:unfoldr&quot;&gt;unfoldr&lt;/a&gt;&lt;/code&gt; es an&amp;aacute;loga a la lista 'desplegar'. &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy#v:unfoldr&quot;&gt;unfoldr&lt;/a&gt;&lt;/code&gt; construye un ByteString a partir de un valor inicial. La funci&amp;oacute;n toma el elemento y devuelve &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-maybe#v:Nothing&quot;&gt;Nothing&lt;/a&gt;&lt;/code&gt; si ha terminado de producir ByteString o devuelve &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-maybe#v:Just&quot;&gt;Just&lt;/a&gt;&lt;/code&gt; &lt;code&gt;(a,b)&lt;/code&gt; , en cuyo caso, &lt;code&gt;a&lt;/code&gt; es un antecedente de ByteString y &lt;code&gt;b&lt;/code&gt; se usa como el siguiente elemento en una llamada recursiva.</target>
        </trans-unit>
        <trans-unit id="ef57000706634199824077e8a68f4bb5c18e225c" translate="yes" xml:space="preserve">
          <source>O(n) The &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy#v:unfoldr&quot;&gt;unfoldr&lt;/a&gt;&lt;/code&gt; function is analogous to the List 'unfoldr'. &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy#v:unfoldr&quot;&gt;unfoldr&lt;/a&gt;&lt;/code&gt; builds a ByteString from a seed value. The function takes the element and returns &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-maybe#v:Nothing&quot;&gt;Nothing&lt;/a&gt;&lt;/code&gt; if it is done producing the ByteString or returns &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-maybe#v:Just&quot;&gt;Just&lt;/a&gt;&lt;/code&gt;&lt;code&gt;(a,b)&lt;/code&gt;, in which case, &lt;code&gt;a&lt;/code&gt; is a prepending to the ByteString and &lt;code&gt;b&lt;/code&gt; is used as the next element in a recursive call.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9f2e8576d1e158cac9c7cbea7febf733692b2170" translate="yes" xml:space="preserve">
          <source>O(n) The &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy-char8#v:elemIndex&quot;&gt;elemIndex&lt;/a&gt;&lt;/code&gt; function returns the index of the first element in the given &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy-char8#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt; which is equal (by memchr) to the query element, or &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-maybe#v:Nothing&quot;&gt;Nothing&lt;/a&gt;&lt;/code&gt; if there is no such element.</source>
          <target state="translated">O (n) La funci&amp;oacute;n &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy-char8#v:elemIndex&quot;&gt;elemIndex&lt;/a&gt;&lt;/code&gt; devuelve el &amp;iacute;ndice del primer elemento en el &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy-char8#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt; dado que es igual (por memchr) al elemento de consulta, o &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-maybe#v:Nothing&quot;&gt;Nothing&lt;/a&gt;&lt;/code&gt; si no existe tal elemento.</target>
        </trans-unit>
        <trans-unit id="fa1c69306c01d9d2337e3925ac50275e90ff6cc0" translate="yes" xml:space="preserve">
          <source>O(n) The &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy-char8#v:elemIndex&quot;&gt;elemIndex&lt;/a&gt;&lt;/code&gt; function returns the index of the first element in the given &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy-char8#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt; which is equal (by memchr) to the query element, or &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-maybe#v:Nothing&quot;&gt;Nothing&lt;/a&gt;&lt;/code&gt; if there is no such element.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2ec8e9f3c268a55e1a8cc1231f1eae1abb77d29a" translate="yes" xml:space="preserve">
          <source>O(n) The &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy-char8#v:elemIndices&quot;&gt;elemIndices&lt;/a&gt;&lt;/code&gt; function extends &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy-char8#v:elemIndex&quot;&gt;elemIndex&lt;/a&gt;&lt;/code&gt;, by returning the indices of all elements equal to the query element, in ascending order.</source>
          <target state="translated">O (n) La funci&amp;oacute;n &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy-char8#v:elemIndices&quot;&gt;elemIndices&lt;/a&gt;&lt;/code&gt; extiende &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy-char8#v:elemIndex&quot;&gt;elemIndex&lt;/a&gt;&lt;/code&gt; , devolviendo los &amp;iacute;ndices de todos los elementos iguales al elemento de consulta, en orden ascendente.</target>
        </trans-unit>
        <trans-unit id="90b21d94f3c4b1320ba1626339daeec7770ba1e2" translate="yes" xml:space="preserve">
          <source>O(n) The &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy-char8#v:find&quot;&gt;find&lt;/a&gt;&lt;/code&gt; function takes a predicate and a ByteString, and returns the first element in matching the predicate, or &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-maybe#v:Nothing&quot;&gt;Nothing&lt;/a&gt;&lt;/code&gt; if there is no such element.</source>
          <target state="translated">O (n) La funci&amp;oacute;n de &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy-char8#v:find&quot;&gt;find&lt;/a&gt;&lt;/code&gt; toma un predicado y una ByteString, y devuelve el primer elemento que coincide con el predicado, o &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-maybe#v:Nothing&quot;&gt;Nothing&lt;/a&gt;&lt;/code&gt; si no existe tal elemento.</target>
        </trans-unit>
        <trans-unit id="5279735e72e89d06c3a1fde73bc9f386b870f61e" translate="yes" xml:space="preserve">
          <source>O(n) The &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy-char8#v:find&quot;&gt;find&lt;/a&gt;&lt;/code&gt; function takes a predicate and a ByteString, and returns the first element in matching the predicate, or &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-maybe#v:Nothing&quot;&gt;Nothing&lt;/a&gt;&lt;/code&gt; if there is no such element.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="783d0496db965e51d6cb762b18cde0603137b5c1" translate="yes" xml:space="preserve">
          <source>O(n) The &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy-char8#v:intercalate&quot;&gt;intercalate&lt;/a&gt;&lt;/code&gt; function takes a &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy-char8#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt; and a list of &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy-char8#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt;s and concatenates the list after interspersing the first argument between each element of the list.</source>
          <target state="translated">O (n) La funci&amp;oacute;n &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy-char8#v:intercalate&quot;&gt;intercalate&lt;/a&gt;&lt;/code&gt; toma un &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy-char8#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt; y una lista de &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy-char8#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt; sy concatena la lista despu&amp;eacute;s de intercalar el primer argumento entre cada elemento de la lista.</target>
        </trans-unit>
        <trans-unit id="3dd83c62c3c268df717539e323562675cc5430f8" translate="yes" xml:space="preserve">
          <source>O(n) The &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy-char8#v:intersperse&quot;&gt;intersperse&lt;/a&gt;&lt;/code&gt; function takes a Char and a &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy-char8#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt; and `intersperses' that Char between the elements of the &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy-char8#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt;. It is analogous to the intersperse function on Lists.</source>
          <target state="translated">O (n) La funci&amp;oacute;n &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy-char8#v:intersperse&quot;&gt;intersperse&lt;/a&gt;&lt;/code&gt; toma un Char y un &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy-char8#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt; y 'intercala' ese Char entre los elementos de &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy-char8#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt; . Es an&amp;aacute;loga a la funci&amp;oacute;n intercalar en Listas.</target>
        </trans-unit>
        <trans-unit id="372a2b3dc42980d37508731eb80bf6db7d2199d5" translate="yes" xml:space="preserve">
          <source>O(n) The &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy-char8#v:isPrefixOf&quot;&gt;isPrefixOf&lt;/a&gt;&lt;/code&gt; function takes two ByteStrings and returns &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-bool#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt; iff the first is a prefix of the second.</source>
          <target state="translated">O (n) La funci&amp;oacute;n &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy-char8#v:isPrefixOf&quot;&gt;isPrefixOf&lt;/a&gt;&lt;/code&gt; toma dos ByteStrings y devuelve &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-bool#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt; si el primero es un prefijo del segundo.</target>
        </trans-unit>
        <trans-unit id="91332377f7f70899a0ae41286769ec2db1c8413a" translate="yes" xml:space="preserve">
          <source>O(n) The &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy-char8#v:isPrefixOf&quot;&gt;isPrefixOf&lt;/a&gt;&lt;/code&gt; function takes two ByteStrings and returns &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-bool#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt; iff the first is a prefix of the second.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c394b71edebe9c2ef371ba928c756427e7aad665" translate="yes" xml:space="preserve">
          <source>O(n) The &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy-char8#v:isSuffixOf&quot;&gt;isSuffixOf&lt;/a&gt;&lt;/code&gt; function takes two ByteStrings and returns &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-bool#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt; iff the first is a suffix of the second.</source>
          <target state="translated">O (n) La funci&amp;oacute;n &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy-char8#v:isSuffixOf&quot;&gt;isSuffixOf&lt;/a&gt;&lt;/code&gt; toma dos ByteStrings y devuelve &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-bool#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt; si el primero es un sufijo del segundo.</target>
        </trans-unit>
        <trans-unit id="e580d884d8ad04ca31c3dd1da0be9cd9d9371459" translate="yes" xml:space="preserve">
          <source>O(n) The &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy-char8#v:isSuffixOf&quot;&gt;isSuffixOf&lt;/a&gt;&lt;/code&gt; function takes two ByteStrings and returns &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-bool#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt; iff the first is a suffix of the second.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="da2d448e19017177a615154734c18743b68888cd" translate="yes" xml:space="preserve">
          <source>O(n) The &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy-char8#v:stripPrefix&quot;&gt;stripPrefix&lt;/a&gt;&lt;/code&gt; function takes two ByteStrings and returns &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-maybe#v:Just&quot;&gt;Just&lt;/a&gt;&lt;/code&gt; the remainder of the second iff the first is its prefix, and otherwise &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-maybe#v:Nothing&quot;&gt;Nothing&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">O (n) La funci&amp;oacute;n &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy-char8#v:stripPrefix&quot;&gt;stripPrefix&lt;/a&gt;&lt;/code&gt; toma dos ByteStrings y devuelve &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-maybe#v:Just&quot;&gt;Just&lt;/a&gt;&lt;/code&gt; el resto del segundo si el primero es su prefijo y, de lo contrario, &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-maybe#v:Nothing&quot;&gt;Nothing&lt;/a&gt;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="51d95e44f921fca12780d855c9f3e162160c7c7f" translate="yes" xml:space="preserve">
          <source>O(n) The &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy-char8#v:stripPrefix&quot;&gt;stripPrefix&lt;/a&gt;&lt;/code&gt; function takes two ByteStrings and returns &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-maybe#v:Just&quot;&gt;Just&lt;/a&gt;&lt;/code&gt; the remainder of the second iff the first is its prefix, and otherwise &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-maybe#v:Nothing&quot;&gt;Nothing&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1f201f1907b48b3a7cc6cc99b33ecee717dde57d" translate="yes" xml:space="preserve">
          <source>O(n) The &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy-char8#v:stripSuffix&quot;&gt;stripSuffix&lt;/a&gt;&lt;/code&gt; function takes two ByteStrings and returns &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-maybe#v:Just&quot;&gt;Just&lt;/a&gt;&lt;/code&gt; the remainder of the second iff the first is its suffix, and otherwise &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-maybe#v:Nothing&quot;&gt;Nothing&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">O (n) La funci&amp;oacute;n &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy-char8#v:stripSuffix&quot;&gt;stripSuffix&lt;/a&gt;&lt;/code&gt; toma dos ByteStrings y devuelve &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-maybe#v:Just&quot;&gt;Just&lt;/a&gt;&lt;/code&gt; el resto del segundo si el primero es su sufijo y, de lo contrario, &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-maybe#v:Nothing&quot;&gt;Nothing&lt;/a&gt;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="e59cfc58400ce23ac75fa42c3f44b6c1e97e7f86" translate="yes" xml:space="preserve">
          <source>O(n) The &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy-char8#v:stripSuffix&quot;&gt;stripSuffix&lt;/a&gt;&lt;/code&gt; function takes two ByteStrings and returns &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-maybe#v:Just&quot;&gt;Just&lt;/a&gt;&lt;/code&gt; the remainder of the second iff the first is its suffix, and otherwise &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-maybe#v:Nothing&quot;&gt;Nothing&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8b0c4cfcabfa18f0f9d991cbd407b72c68d8fb33" translate="yes" xml:space="preserve">
          <source>O(n) The &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy-char8#v:unfoldr&quot;&gt;unfoldr&lt;/a&gt;&lt;/code&gt; function is analogous to the List 'unfoldr'. &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy-char8#v:unfoldr&quot;&gt;unfoldr&lt;/a&gt;&lt;/code&gt; builds a ByteString from a seed value. The function takes the element and returns &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-maybe#v:Nothing&quot;&gt;Nothing&lt;/a&gt;&lt;/code&gt; if it is done producing the ByteString or returns &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-maybe#v:Just&quot;&gt;Just&lt;/a&gt;&lt;/code&gt;&lt;code&gt;(a,b)&lt;/code&gt;, in which case, &lt;code&gt;a&lt;/code&gt; is a prepending to the ByteString and &lt;code&gt;b&lt;/code&gt; is used as the next element in a recursive call.</source>
          <target state="translated">O (n) La funci&amp;oacute;n de &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy-char8#v:unfoldr&quot;&gt;unfoldr&lt;/a&gt;&lt;/code&gt; es an&amp;aacute;loga a la lista 'desplegar'. &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy-char8#v:unfoldr&quot;&gt;unfoldr&lt;/a&gt;&lt;/code&gt; construye un ByteString a partir de un valor inicial. La funci&amp;oacute;n toma el elemento y devuelve &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-maybe#v:Nothing&quot;&gt;Nothing&lt;/a&gt;&lt;/code&gt; si ha terminado de producir ByteString o devuelve &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-maybe#v:Just&quot;&gt;Just&lt;/a&gt;&lt;/code&gt; &lt;code&gt;(a,b)&lt;/code&gt; , en cuyo caso, &lt;code&gt;a&lt;/code&gt; es un antecedente de ByteString y &lt;code&gt;b&lt;/code&gt; se usa como el siguiente elemento en una llamada recursiva.</target>
        </trans-unit>
        <trans-unit id="21c6075e8b47b7fa1e041e7edecb7535466dea75" translate="yes" xml:space="preserve">
          <source>O(n) The &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy-char8#v:unfoldr&quot;&gt;unfoldr&lt;/a&gt;&lt;/code&gt; function is analogous to the List 'unfoldr'. &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy-char8#v:unfoldr&quot;&gt;unfoldr&lt;/a&gt;&lt;/code&gt; builds a ByteString from a seed value. The function takes the element and returns &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-maybe#v:Nothing&quot;&gt;Nothing&lt;/a&gt;&lt;/code&gt; if it is done producing the ByteString or returns &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-maybe#v:Just&quot;&gt;Just&lt;/a&gt;&lt;/code&gt;&lt;code&gt;(a,b)&lt;/code&gt;, in which case, &lt;code&gt;a&lt;/code&gt; is a prepending to the ByteString and &lt;code&gt;b&lt;/code&gt; is used as the next element in a recursive call.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9a79fe1dc6f18eb8f680df25925a90f02b4b12c6" translate="yes" xml:space="preserve">
          <source>O(n) The &lt;code&gt;&lt;a href=&quot;data-text#v:find&quot;&gt;find&lt;/a&gt;&lt;/code&gt; function takes a predicate and a &lt;code&gt;&lt;a href=&quot;data-text#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt;, and returns the first element matching the predicate, or &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-maybe#v:Nothing&quot;&gt;Nothing&lt;/a&gt;&lt;/code&gt; if there is no such element. Subject to fusion.</source>
          <target state="translated">O (n) La funci&amp;oacute;n de &lt;code&gt;&lt;a href=&quot;data-text#v:find&quot;&gt;find&lt;/a&gt;&lt;/code&gt; toma un predicado y un &lt;code&gt;&lt;a href=&quot;data-text#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt; o , y devuelve el primer elemento que coincide con el predicado, o &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-maybe#v:Nothing&quot;&gt;Nothing&lt;/a&gt;&lt;/code&gt; si no existe tal elemento. Sujeto a fusi&amp;oacute;n.</target>
        </trans-unit>
        <trans-unit id="69054e5f8b47316b792e23e75909b624a9dd7d65" translate="yes" xml:space="preserve">
          <source>O(n) The &lt;code&gt;&lt;a href=&quot;data-text#v:find&quot;&gt;find&lt;/a&gt;&lt;/code&gt; function takes a predicate and a &lt;code&gt;&lt;a href=&quot;data-text#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt;, and returns the first element matching the predicate, or &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-maybe#v:Nothing&quot;&gt;Nothing&lt;/a&gt;&lt;/code&gt; if there is no such element.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1e0b837386ac594b44e5cf6d096e613510179aab" translate="yes" xml:space="preserve">
          <source>O(n) The &lt;code&gt;&lt;a href=&quot;data-text#v:findIndex&quot;&gt;findIndex&lt;/a&gt;&lt;/code&gt; function takes a predicate and a &lt;code&gt;&lt;a href=&quot;data-text#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt; and returns the index of the first element in the &lt;code&gt;&lt;a href=&quot;data-text#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt; satisfying the predicate. Subject to fusion.</source>
          <target state="translated">O (n) La funci&amp;oacute;n &lt;code&gt;&lt;a href=&quot;data-text#v:findIndex&quot;&gt;findIndex&lt;/a&gt;&lt;/code&gt; toma un predicado y un &lt;code&gt;&lt;a href=&quot;data-text#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt; y devuelve el &amp;iacute;ndice del primer elemento del &lt;code&gt;&lt;a href=&quot;data-text#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt; que satisface el predicado. Sujeto a fusi&amp;oacute;n.</target>
        </trans-unit>
        <trans-unit id="63d3f4379f27a35ffcc42ed8fdb56412243f58b2" translate="yes" xml:space="preserve">
          <source>O(n) The &lt;code&gt;&lt;a href=&quot;data-text#v:intercalate&quot;&gt;intercalate&lt;/a&gt;&lt;/code&gt; function takes a &lt;code&gt;&lt;a href=&quot;data-text#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt; and a list of &lt;code&gt;&lt;a href=&quot;data-text#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt;s and concatenates the list after interspersing the first argument between each element of the list.</source>
          <target state="translated">O (n) La funci&amp;oacute;n &lt;code&gt;&lt;a href=&quot;data-text#v:intercalate&quot;&gt;intercalate&lt;/a&gt;&lt;/code&gt; toma un &lt;code&gt;&lt;a href=&quot;data-text#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt; y una lista de &lt;code&gt;&lt;a href=&quot;data-text#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt; y concatena la lista despu&amp;eacute;s de intercalar el primer argumento entre cada elemento de la lista.</target>
        </trans-unit>
        <trans-unit id="e836e26f77556c0c8b0cc26ff73d34938e7b0047" translate="yes" xml:space="preserve">
          <source>O(n) The &lt;code&gt;&lt;a href=&quot;data-text#v:intersperse&quot;&gt;intersperse&lt;/a&gt;&lt;/code&gt; function takes a character and places it between the characters of a &lt;code&gt;&lt;a href=&quot;data-text#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">O (n) La funci&amp;oacute;n &lt;code&gt;&lt;a href=&quot;data-text#v:intersperse&quot;&gt;intersperse&lt;/a&gt;&lt;/code&gt; toma un car&amp;aacute;cter y lo coloca entre los caracteres de un &lt;code&gt;&lt;a href=&quot;data-text#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="984aa17d031ef64073f3da8a43c7bf9548dd919f" translate="yes" xml:space="preserve">
          <source>O(n) The &lt;code&gt;&lt;a href=&quot;data-text#v:isPrefixOf&quot;&gt;isPrefixOf&lt;/a&gt;&lt;/code&gt; function takes two &lt;code&gt;&lt;a href=&quot;data-text#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt;s and returns &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-bool#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt; iff the first is a prefix of the second. Subject to fusion.</source>
          <target state="translated">O (n) La funci&amp;oacute;n &lt;code&gt;&lt;a href=&quot;data-text#v:isPrefixOf&quot;&gt;isPrefixOf&lt;/a&gt;&lt;/code&gt; toma dos &lt;code&gt;&lt;a href=&quot;data-text#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt; sy devuelve &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-bool#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt; si el primero es un prefijo del segundo. Sujeto a fusi&amp;oacute;n.</target>
        </trans-unit>
        <trans-unit id="c4701c23717bbb22295ad14f2b10eb58dc7df987" translate="yes" xml:space="preserve">
          <source>O(n) The &lt;code&gt;&lt;a href=&quot;data-text#v:isPrefixOf&quot;&gt;isPrefixOf&lt;/a&gt;&lt;/code&gt; function takes two &lt;code&gt;&lt;a href=&quot;data-text#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt;s and returns &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-bool#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt; iff the first is a prefix of the second. Subject to fusion.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b21fdc0a25cfb046efd48b241930d19eb078c970" translate="yes" xml:space="preserve">
          <source>O(n) The &lt;code&gt;&lt;a href=&quot;data-text#v:isSuffixOf&quot;&gt;isSuffixOf&lt;/a&gt;&lt;/code&gt; function takes two &lt;code&gt;&lt;a href=&quot;data-text#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt;s and returns &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-bool#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt; iff the first is a suffix of the second.</source>
          <target state="translated">O (n) La funci&amp;oacute;n &lt;code&gt;&lt;a href=&quot;data-text#v:isSuffixOf&quot;&gt;isSuffixOf&lt;/a&gt;&lt;/code&gt; toma dos &lt;code&gt;&lt;a href=&quot;data-text#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt; sy devuelve &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-bool#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt; si el primero es un sufijo del segundo.</target>
        </trans-unit>
        <trans-unit id="b69e4f31c4313f1d4c3b67bed4cc48640a8ddfa1" translate="yes" xml:space="preserve">
          <source>O(n) The &lt;code&gt;&lt;a href=&quot;data-text#v:isSuffixOf&quot;&gt;isSuffixOf&lt;/a&gt;&lt;/code&gt; function takes two &lt;code&gt;&lt;a href=&quot;data-text#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt;s and returns &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-bool#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt; iff the first is a suffix of the second.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3ab19dcdc36cc1c990891fc53ddbd925d7e04441" translate="yes" xml:space="preserve">
          <source>O(n) The &lt;code&gt;&lt;a href=&quot;data-text#v:partition&quot;&gt;partition&lt;/a&gt;&lt;/code&gt; function takes a predicate and a &lt;code&gt;&lt;a href=&quot;data-text#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt;, and returns the pair of &lt;code&gt;&lt;a href=&quot;data-text#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt;s with elements which do and do not satisfy the predicate, respectively; i.e.</source>
          <target state="translated">O (n) La funci&amp;oacute;n de &lt;code&gt;&lt;a href=&quot;data-text#v:partition&quot;&gt;partition&lt;/a&gt;&lt;/code&gt; toma un predicado y un &lt;code&gt;&lt;a href=&quot;data-text#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt; , y devuelve el par de &lt;code&gt;&lt;a href=&quot;data-text#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt; s con elementos que satisfacen y no satisfacen el predicado, respectivamente; es decir</target>
        </trans-unit>
        <trans-unit id="0268ba154bc2df65369ee7c9f2860a69e5f12720" translate="yes" xml:space="preserve">
          <source>O(n) The &lt;code&gt;&lt;a href=&quot;data-text#v:transpose&quot;&gt;transpose&lt;/a&gt;&lt;/code&gt; function transposes the rows and columns of its &lt;code&gt;&lt;a href=&quot;data-text#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt; argument. Note that this function uses &lt;code&gt;&lt;a href=&quot;data-text#v:pack&quot;&gt;pack&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;data-text#v:unpack&quot;&gt;unpack&lt;/a&gt;&lt;/code&gt;, and the list version of transpose, and is thus not very efficient.</source>
          <target state="translated">O (n) La &lt;code&gt;&lt;a href=&quot;data-text#v:transpose&quot;&gt;transpose&lt;/a&gt;&lt;/code&gt; funci&amp;oacute;n transpone las filas y las columnas de su &lt;code&gt;&lt;a href=&quot;data-text#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt; argumento. Tenga en cuenta que esta funci&amp;oacute;n utiliza &lt;code&gt;&lt;a href=&quot;data-text#v:pack&quot;&gt;pack&lt;/a&gt;&lt;/code&gt; , &lt;code&gt;&lt;a href=&quot;data-text#v:unpack&quot;&gt;unpack&lt;/a&gt;&lt;/code&gt; y la versi&amp;oacute;n de lista de transposici&amp;oacute;n, por lo que no es muy eficiente.</target>
        </trans-unit>
        <trans-unit id="6f251ba2e248e15eaccaea66658fe246c0b91a6a" translate="yes" xml:space="preserve">
          <source>O(n) The &lt;code&gt;&lt;a href=&quot;data-text-internal-fusion-common#v:countCharI&quot;&gt;countCharI&lt;/a&gt;&lt;/code&gt; function returns the number of times the query element appears in the given stream.</source>
          <target state="translated">O (n) La funci&amp;oacute;n &lt;code&gt;&lt;a href=&quot;data-text-internal-fusion-common#v:countCharI&quot;&gt;countCharI&lt;/a&gt;&lt;/code&gt; devuelve el n&amp;uacute;mero de veces que el elemento de consulta aparece en la secuencia dada.</target>
        </trans-unit>
        <trans-unit id="6eaaa8e81e7668e011fec45f05f761f3572874b5" translate="yes" xml:space="preserve">
          <source>O(n) The &lt;code&gt;&lt;a href=&quot;data-text-internal-fusion-common#v:findBy&quot;&gt;findBy&lt;/a&gt;&lt;/code&gt; function takes a predicate and a stream, and returns the first element in matching the predicate, or &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-maybe#v:Nothing&quot;&gt;Nothing&lt;/a&gt;&lt;/code&gt; if there is no such element.</source>
          <target state="translated">O (n) La funci&amp;oacute;n &lt;code&gt;&lt;a href=&quot;data-text-internal-fusion-common#v:findBy&quot;&gt;findBy&lt;/a&gt;&lt;/code&gt; toma un predicado y una secuencia, y devuelve el primer elemento que coincide con el predicado, o &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-maybe#v:Nothing&quot;&gt;Nothing&lt;/a&gt;&lt;/code&gt; si no existe tal elemento.</target>
        </trans-unit>
        <trans-unit id="295b6756a4814711709f93f1dec5c2c15fd68471" translate="yes" xml:space="preserve">
          <source>O(n) The &lt;code&gt;&lt;a href=&quot;data-text-internal-fusion-common#v:findBy&quot;&gt;findBy&lt;/a&gt;&lt;/code&gt; function takes a predicate and a stream, and returns the first element in matching the predicate, or &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-maybe#v:Nothing&quot;&gt;Nothing&lt;/a&gt;&lt;/code&gt; if there is no such element.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b284a7b295ef70c67ab5d6c8855dc29d511a07b7" translate="yes" xml:space="preserve">
          <source>O(n) The &lt;code&gt;&lt;a href=&quot;data-text-internal-fusion-common#v:isPrefixOf&quot;&gt;isPrefixOf&lt;/a&gt;&lt;/code&gt; function takes two &lt;code&gt;&lt;a href=&quot;data-text-internal-fusion-types#t:Stream&quot;&gt;Stream&lt;/a&gt;&lt;/code&gt;s and returns &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-bool#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt; iff the first is a prefix of the second.</source>
          <target state="translated">O (n) La funci&amp;oacute;n &lt;code&gt;&lt;a href=&quot;data-text-internal-fusion-common#v:isPrefixOf&quot;&gt;isPrefixOf&lt;/a&gt;&lt;/code&gt; toma dos &lt;code&gt;&lt;a href=&quot;data-text-internal-fusion-types#t:Stream&quot;&gt;Stream&lt;/a&gt;&lt;/code&gt; sy devuelve &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-bool#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt; si el primero es un prefijo del segundo.</target>
        </trans-unit>
        <trans-unit id="931ddb07490e7cec9210576ddaec219147360847" translate="yes" xml:space="preserve">
          <source>O(n) The &lt;code&gt;&lt;a href=&quot;data-text-internal-fusion-common#v:isPrefixOf&quot;&gt;isPrefixOf&lt;/a&gt;&lt;/code&gt; function takes two &lt;code&gt;&lt;a href=&quot;data-text-internal-fusion-types#t:Stream&quot;&gt;Stream&lt;/a&gt;&lt;/code&gt;s and returns &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-bool#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt; iff the first is a prefix of the second.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="25a5607aba7f8c2bbb7401fa4d562110e6df9f7e" translate="yes" xml:space="preserve">
          <source>O(n) The &lt;code&gt;&lt;a href=&quot;data-text-lazy#v:find&quot;&gt;find&lt;/a&gt;&lt;/code&gt; function takes a predicate and a &lt;code&gt;&lt;a href=&quot;data-text-lazy#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt;, and returns the first element in matching the predicate, or &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-maybe#v:Nothing&quot;&gt;Nothing&lt;/a&gt;&lt;/code&gt; if there is no such element. Subject to fusion.</source>
          <target state="translated">O (n) La funci&amp;oacute;n de &lt;code&gt;&lt;a href=&quot;data-text-lazy#v:find&quot;&gt;find&lt;/a&gt;&lt;/code&gt; toma un predicado y un &lt;code&gt;&lt;a href=&quot;data-text-lazy#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt; , y devuelve el primer elemento que coincide con el predicado, o &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-maybe#v:Nothing&quot;&gt;Nothing&lt;/a&gt;&lt;/code&gt; si no existe tal elemento. Sujeto a fusi&amp;oacute;n.</target>
        </trans-unit>
        <trans-unit id="01e94843b9d1ffb74fbb5ec0f71b85258ae98acb" translate="yes" xml:space="preserve">
          <source>O(n) The &lt;code&gt;&lt;a href=&quot;data-text-lazy#v:find&quot;&gt;find&lt;/a&gt;&lt;/code&gt; function takes a predicate and a &lt;code&gt;&lt;a href=&quot;data-text-lazy#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt;, and returns the first element in matching the predicate, or &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-maybe#v:Nothing&quot;&gt;Nothing&lt;/a&gt;&lt;/code&gt; if there is no such element.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="95828d7cd49664c5ab7bed1d6891046b6c1333a5" translate="yes" xml:space="preserve">
          <source>O(n) The &lt;code&gt;&lt;a href=&quot;data-text-lazy#v:intercalate&quot;&gt;intercalate&lt;/a&gt;&lt;/code&gt; function takes a &lt;code&gt;&lt;a href=&quot;data-text-lazy#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt; and a list of &lt;code&gt;&lt;a href=&quot;data-text-lazy#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt;s and concatenates the list after interspersing the first argument between each element of the list.</source>
          <target state="translated">O (n) La funci&amp;oacute;n &lt;code&gt;&lt;a href=&quot;data-text-lazy#v:intercalate&quot;&gt;intercalate&lt;/a&gt;&lt;/code&gt; toma un &lt;code&gt;&lt;a href=&quot;data-text-lazy#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt; y una lista de &lt;code&gt;&lt;a href=&quot;data-text-lazy#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt; y concatena la lista despu&amp;eacute;s de intercalar el primer argumento entre cada elemento de la lista.</target>
        </trans-unit>
        <trans-unit id="3cae76bc8927661b489edb3e78bf012fb490d938" translate="yes" xml:space="preserve">
          <source>O(n) The &lt;code&gt;&lt;a href=&quot;data-text-lazy#v:intersperse&quot;&gt;intersperse&lt;/a&gt;&lt;/code&gt; function takes a character and places it between the characters of a &lt;code&gt;&lt;a href=&quot;data-text-lazy#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt;. Subject to fusion. Performs replacement on invalid scalar values.</source>
          <target state="translated">O (n) La funci&amp;oacute;n &lt;code&gt;&lt;a href=&quot;data-text-lazy#v:intersperse&quot;&gt;intersperse&lt;/a&gt;&lt;/code&gt; toma un car&amp;aacute;cter y lo coloca entre los caracteres de un &lt;code&gt;&lt;a href=&quot;data-text-lazy#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt; . Sujeto a fusi&amp;oacute;n. Realiza el reemplazo de valores escalares no v&amp;aacute;lidos.</target>
        </trans-unit>
        <trans-unit id="97bb42a55cb8c57d4f1fbc3342c90cdb42316d3c" translate="yes" xml:space="preserve">
          <source>O(n) The &lt;code&gt;&lt;a href=&quot;data-text-lazy#v:isPrefixOf&quot;&gt;isPrefixOf&lt;/a&gt;&lt;/code&gt; function takes two &lt;code&gt;&lt;a href=&quot;data-text-lazy#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt;s and returns &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-bool#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt; iff the first is a prefix of the second. Subject to fusion.</source>
          <target state="translated">O (n) La funci&amp;oacute;n &lt;code&gt;&lt;a href=&quot;data-text-lazy#v:isPrefixOf&quot;&gt;isPrefixOf&lt;/a&gt;&lt;/code&gt; toma dos &lt;code&gt;&lt;a href=&quot;data-text-lazy#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt; sy devuelve &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-bool#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt; si el primero es un prefijo del segundo. Sujeto a fusi&amp;oacute;n.</target>
        </trans-unit>
        <trans-unit id="a4fcd527985de3e72cee7a20888625e4230e30bd" translate="yes" xml:space="preserve">
          <source>O(n) The &lt;code&gt;&lt;a href=&quot;data-text-lazy#v:isPrefixOf&quot;&gt;isPrefixOf&lt;/a&gt;&lt;/code&gt; function takes two &lt;code&gt;&lt;a href=&quot;data-text-lazy#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt;s and returns &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-bool#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt; iff the first is a prefix of the second. Subject to fusion.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="074610c8ab674e115547afb68793bda621fadeef" translate="yes" xml:space="preserve">
          <source>O(n) The &lt;code&gt;&lt;a href=&quot;data-text-lazy#v:isSuffixOf&quot;&gt;isSuffixOf&lt;/a&gt;&lt;/code&gt; function takes two &lt;code&gt;&lt;a href=&quot;data-text-lazy#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt;s and returns &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-bool#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt; iff the first is a suffix of the second.</source>
          <target state="translated">O (n) La funci&amp;oacute;n &lt;code&gt;&lt;a href=&quot;data-text-lazy#v:isSuffixOf&quot;&gt;isSuffixOf&lt;/a&gt;&lt;/code&gt; toma dos &lt;code&gt;&lt;a href=&quot;data-text-lazy#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt; sy devuelve &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-bool#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt; si el primero es un sufijo del segundo.</target>
        </trans-unit>
        <trans-unit id="644de61930aa7c438ab49813b5fd60f714b9a479" translate="yes" xml:space="preserve">
          <source>O(n) The &lt;code&gt;&lt;a href=&quot;data-text-lazy#v:isSuffixOf&quot;&gt;isSuffixOf&lt;/a&gt;&lt;/code&gt; function takes two &lt;code&gt;&lt;a href=&quot;data-text-lazy#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt;s and returns &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-bool#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt; iff the first is a suffix of the second.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="57a78956fd1a59e10ea99a16e76360b37ac4ecaa" translate="yes" xml:space="preserve">
          <source>O(n) The &lt;code&gt;&lt;a href=&quot;data-text-lazy#v:partition&quot;&gt;partition&lt;/a&gt;&lt;/code&gt; function takes a predicate and a &lt;code&gt;&lt;a href=&quot;data-text-lazy#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt;, and returns the pair of &lt;code&gt;&lt;a href=&quot;data-text-lazy#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt;s with elements which do and do not satisfy the predicate, respectively; i.e.</source>
          <target state="translated">O (n) La funci&amp;oacute;n de &lt;code&gt;&lt;a href=&quot;data-text-lazy#v:partition&quot;&gt;partition&lt;/a&gt;&lt;/code&gt; toma un predicado y un &lt;code&gt;&lt;a href=&quot;data-text-lazy#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt; , y devuelve el par de &lt;code&gt;&lt;a href=&quot;data-text-lazy#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt; s con elementos que satisfacen y no satisfacen el predicado, respectivamente; es decir</target>
        </trans-unit>
        <trans-unit id="6eeaa345a563e0fa2e5c1f6c8f36ad488f35a4ed" translate="yes" xml:space="preserve">
          <source>O(n) The &lt;code&gt;&lt;a href=&quot;data-text-lazy#v:transpose&quot;&gt;transpose&lt;/a&gt;&lt;/code&gt; function transposes the rows and columns of its &lt;code&gt;&lt;a href=&quot;data-text-lazy#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt; argument. Note that this function uses &lt;code&gt;&lt;a href=&quot;data-text-lazy#v:pack&quot;&gt;pack&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;data-text-lazy#v:unpack&quot;&gt;unpack&lt;/a&gt;&lt;/code&gt;, and the list version of transpose, and is thus not very efficient.</source>
          <target state="translated">O (n) La &lt;code&gt;&lt;a href=&quot;data-text-lazy#v:transpose&quot;&gt;transpose&lt;/a&gt;&lt;/code&gt; funci&amp;oacute;n transpone las filas y las columnas de su &lt;code&gt;&lt;a href=&quot;data-text-lazy#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt; argumento. Tenga en cuenta que esta funci&amp;oacute;n utiliza &lt;code&gt;&lt;a href=&quot;data-text-lazy#v:pack&quot;&gt;pack&lt;/a&gt;&lt;/code&gt; , &lt;code&gt;&lt;a href=&quot;data-text-lazy#v:unpack&quot;&gt;unpack&lt;/a&gt;&lt;/code&gt; y la versi&amp;oacute;n de lista de transposici&amp;oacute;n, por lo que no es muy eficiente.</target>
        </trans-unit>
        <trans-unit id="51ae577567561237689dc6b0d14f758718ddd181" translate="yes" xml:space="preserve">
          <source>O(n) The &lt;code&gt;count&lt;/code&gt; function returns the number of times the query element appears in the given stream.</source>
          <target state="translated">O (n) La funci&amp;oacute;n de &lt;code&gt;count&lt;/code&gt; devuelve el n&amp;uacute;mero de veces que el elemento de consulta aparece en la secuencia dada.</target>
        </trans-unit>
        <trans-unit id="dc7ee14d7eade919f222af426593eaafcbfc0185" translate="yes" xml:space="preserve">
          <source>O(n) all &lt;code&gt;p &lt;/code&gt;xs determines if all characters in the &lt;code&gt;Text&lt;/code&gt;&lt;code&gt;xs&lt;/code&gt; satisfy the predicate &lt;code&gt;p&lt;/code&gt;.</source>
          <target state="translated">O (n) all &lt;code&gt;p &lt;/code&gt; xs determina si todos los caracteres del &lt;code&gt;Text&lt;/code&gt; o &lt;code&gt;xs&lt;/code&gt; satisfacen el predicado &lt;code&gt;p&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="79cec94da8772ae50c6e028ddd630af1260aec70" translate="yes" xml:space="preserve">
          <source>O(n) any &lt;code&gt;p &lt;/code&gt;xs determines if any character in the stream &lt;code&gt;xs&lt;/code&gt; satisfies the predicate &lt;code&gt;p&lt;/code&gt;.</source>
          <target state="translated">O (n) cualquier &lt;code&gt;p &lt;/code&gt; xs determina si alg&amp;uacute;n car&amp;aacute;cter en la secuencia &lt;code&gt;xs&lt;/code&gt; satisface el predicado &lt;code&gt;p&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="9bc987e83d1621e87ef81a9eb7f6a9f52d5bf7ab" translate="yes" xml:space="preserve">
          <source>O(n) construction Use a &lt;code&gt;ByteString&lt;/code&gt; with a function requiring a &lt;code&gt;CStringLen&lt;/code&gt;. As for &lt;code&gt;useAsCString&lt;/code&gt; this function makes a copy of the original &lt;code&gt;ByteString&lt;/code&gt;. It must not be stored or used after the subcomputation finishes.</source>
          <target state="translated">Construcci&amp;oacute;n O (n) Use un &lt;code&gt;ByteString&lt;/code&gt; con una funci&amp;oacute;n que requiera un &lt;code&gt;CStringLen&lt;/code&gt; . En cuanto a &lt;code&gt;useAsCString&lt;/code&gt; , esta funci&amp;oacute;n hace una copia del &lt;code&gt;ByteString&lt;/code&gt; original . No se debe almacenar ni utilizar una vez finalizada la subcomputaci&amp;oacute;n.</target>
        </trans-unit>
        <trans-unit id="3f42f538b318943c153831ed08e2685c23285c0d" translate="yes" xml:space="preserve">
          <source>O(n) construction Use a &lt;code&gt;ByteString&lt;/code&gt; with a function requiring a null-terminated &lt;code&gt;CString&lt;/code&gt;. The &lt;code&gt;CString&lt;/code&gt; is a copy and will be freed automatically; it must not be stored or used after the subcomputation finishes.</source>
          <target state="translated">Construcci&amp;oacute;n O (n) Use un &lt;code&gt;ByteString&lt;/code&gt; con una funci&amp;oacute;n que requiera un &lt;code&gt;CString&lt;/code&gt; terminado en nulo . El &lt;code&gt;CString&lt;/code&gt; es una copia y se liberar&amp;aacute; autom&amp;aacute;ticamente; no debe almacenarse ni utilizarse una vez finalizada la subcomputaci&amp;oacute;n.</target>
        </trans-unit>
        <trans-unit id="c846ca8d154a7b0a9fb00359353de049647ae99b" translate="yes" xml:space="preserve">
          <source>O(n) construction. Use a &lt;code&gt;ShortByteString&lt;/code&gt; with a function requiring a &lt;code&gt;CStringLen&lt;/code&gt;. As for &lt;code&gt;useAsCString&lt;/code&gt; this function makes a copy of the original &lt;code&gt;ShortByteString&lt;/code&gt;. It must not be stored or used after the subcomputation finishes.</source>
          <target state="translated">O (n) construcci&amp;oacute;n. Utilice un &lt;code&gt;ShortByteString&lt;/code&gt; con una funci&amp;oacute;n que requiera un &lt;code&gt;CStringLen&lt;/code&gt; . En cuanto a &lt;code&gt;useAsCString&lt;/code&gt; , esta funci&amp;oacute;n hace una copia del &lt;code&gt;ShortByteString&lt;/code&gt; original . No se debe almacenar ni utilizar una vez finalizada la subcomputaci&amp;oacute;n.</target>
        </trans-unit>
        <trans-unit id="2e24f4a921886ebc8dee74e604e63c1bc88cd4f7" translate="yes" xml:space="preserve">
          <source>O(n) construction. Use a &lt;code&gt;ShortByteString&lt;/code&gt; with a function requiring a null-terminated &lt;code&gt;CString&lt;/code&gt;. The &lt;code&gt;CString&lt;/code&gt; is a copy and will be freed automatically; it must not be stored or used after the subcomputation finishes.</source>
          <target state="translated">O (n) construcci&amp;oacute;n. Utilice un &lt;code&gt;ShortByteString&lt;/code&gt; con una funci&amp;oacute;n que requiera un &lt;code&gt;CString&lt;/code&gt; terminado en nulo . El &lt;code&gt;CString&lt;/code&gt; es una copia y se liberar&amp;aacute; autom&amp;aacute;ticamente; no debe almacenarse ni utilizarse una vez finalizada la subcomputaci&amp;oacute;n.</target>
        </trans-unit>
        <trans-unit id="7cf753ad2eeb7c815eac4d51d25857fb8075e367" translate="yes" xml:space="preserve">
          <source>O(n) maximum returns the maximum value from a stream, which must be non-empty.</source>
          <target state="translated">O(n)maximum devuelve el valor máximo de una corriente,que no debe estar vacía.</target>
        </trans-unit>
        <trans-unit id="7c447d6fd523c0d0c62fdb16120768a0538cec15" translate="yes" xml:space="preserve">
          <source>O(n) minimum returns the minimum value from a &lt;code&gt;Text&lt;/code&gt;, which must be non-empty.</source>
          <target state="translated">O (n) m&amp;iacute;nimo devuelve el valor m&amp;iacute;nimo de un &lt;code&gt;Text&lt;/code&gt; , que no debe estar vac&amp;iacute;o.</target>
        </trans-unit>
        <trans-unit id="8b47776ea350b828e4782c8b7d2e87c90ff26b41" translate="yes" xml:space="preserve">
          <source>O(n) stream index (subscript) operator, starting from 0.</source>
          <target state="translated">Operador de índice de flujo O(n)(subíndice),a partir de 0.</target>
        </trans-unit>
        <trans-unit id="2a179679d6c92f2ff0a3ed59f1ae3c6c726098c1" translate="yes" xml:space="preserve">
          <source>O(n), where &lt;code&gt;n&lt;/code&gt; is the length of the result. The &lt;code&gt;&lt;a href=&quot;data-text#v:unfoldr&quot;&gt;unfoldr&lt;/a&gt;&lt;/code&gt; function is analogous to the List &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/ghc-oldlist#v:unfoldr&quot;&gt;unfoldr&lt;/a&gt;&lt;/code&gt;. &lt;code&gt;&lt;a href=&quot;data-text#v:unfoldr&quot;&gt;unfoldr&lt;/a&gt;&lt;/code&gt; builds a &lt;code&gt;&lt;a href=&quot;data-text#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt; from a seed value. The function takes the element and returns &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-maybe#v:Nothing&quot;&gt;Nothing&lt;/a&gt;&lt;/code&gt; if it is done producing the &lt;code&gt;&lt;a href=&quot;data-text#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt;, otherwise &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-maybe#v:Just&quot;&gt;Just&lt;/a&gt;&lt;/code&gt;&lt;code&gt;(a,b)&lt;/code&gt;. In this case, &lt;code&gt;a&lt;/code&gt; is the next &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-char#t:Char&quot;&gt;Char&lt;/a&gt;&lt;/code&gt; in the string, and &lt;code&gt;b&lt;/code&gt; is the seed value for further production. Subject to fusion. Performs replacement on invalid scalar values.</source>
          <target state="translated">O (n), donde &lt;code&gt;n&lt;/code&gt; es la longitud del resultado. La funci&amp;oacute;n de &lt;code&gt;&lt;a href=&quot;data-text#v:unfoldr&quot;&gt;unfoldr&lt;/a&gt;&lt;/code&gt; es an&amp;aacute;loga a la funci&amp;oacute;n de &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/ghc-oldlist#v:unfoldr&quot;&gt;unfoldr&lt;/a&gt;&lt;/code&gt; lista . &lt;code&gt;&lt;a href=&quot;data-text#v:unfoldr&quot;&gt;unfoldr&lt;/a&gt;&lt;/code&gt; construye un &lt;code&gt;&lt;a href=&quot;data-text#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt; partir de un valor inicial. La funci&amp;oacute;n toma el elemento y devuelve &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-maybe#v:Nothing&quot;&gt;Nothing&lt;/a&gt;&lt;/code&gt; si se termina de producir el &lt;code&gt;&lt;a href=&quot;data-text#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt; , de lo contrario, &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-maybe#v:Just&quot;&gt;Just&lt;/a&gt;&lt;/code&gt; &lt;code&gt;(a,b)&lt;/code&gt; . En este caso, &lt;code&gt;a&lt;/code&gt; es el siguiente &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-char#t:Char&quot;&gt;Char&lt;/a&gt;&lt;/code&gt; de la cadena y &lt;code&gt;b&lt;/code&gt; es el valor inicial para una mayor producci&amp;oacute;n. Sujeto a fusi&amp;oacute;n. Realiza el reemplazo de valores escalares no v&amp;aacute;lidos.</target>
        </trans-unit>
        <trans-unit id="3205e99c86e333e04777ffbdfeca6914a6cf5483" translate="yes" xml:space="preserve">
          <source>O(n), where &lt;code&gt;n&lt;/code&gt; is the length of the result. The &lt;code&gt;&lt;a href=&quot;data-text#v:unfoldr&quot;&gt;unfoldr&lt;/a&gt;&lt;/code&gt; function is analogous to the List &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/ghc-oldlist#v:unfoldr&quot;&gt;unfoldr&lt;/a&gt;&lt;/code&gt;. &lt;code&gt;&lt;a href=&quot;data-text#v:unfoldr&quot;&gt;unfoldr&lt;/a&gt;&lt;/code&gt; builds a &lt;code&gt;&lt;a href=&quot;data-text#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt; from a seed value. The function takes the element and returns &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-maybe#v:Nothing&quot;&gt;Nothing&lt;/a&gt;&lt;/code&gt; if it is done producing the &lt;code&gt;&lt;a href=&quot;data-text#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt;, otherwise &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-maybe#v:Just&quot;&gt;Just&lt;/a&gt;&lt;/code&gt;&lt;code&gt;(a,b)&lt;/code&gt;. In this case, &lt;code&gt;a&lt;/code&gt; is the next &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-char#t:Char&quot;&gt;Char&lt;/a&gt;&lt;/code&gt; in the string, and &lt;code&gt;b&lt;/code&gt; is the seed value for further production. Subject to fusion. Performs replacement on invalid scalar values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ff818ad54f1470dfc5f3acaa8418748ae7b95cf4" translate="yes" xml:space="preserve">
          <source>O(n), where &lt;code&gt;n&lt;/code&gt; is the length of the result. The &lt;code&gt;&lt;a href=&quot;data-text-lazy#v:unfoldr&quot;&gt;unfoldr&lt;/a&gt;&lt;/code&gt; function is analogous to the List &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/ghc-oldlist#v:unfoldr&quot;&gt;unfoldr&lt;/a&gt;&lt;/code&gt;. &lt;code&gt;&lt;a href=&quot;data-text-lazy#v:unfoldr&quot;&gt;unfoldr&lt;/a&gt;&lt;/code&gt; builds a &lt;code&gt;&lt;a href=&quot;data-text-lazy#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt; from a seed value. The function takes the element and returns &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-maybe#v:Nothing&quot;&gt;Nothing&lt;/a&gt;&lt;/code&gt; if it is done producing the &lt;code&gt;&lt;a href=&quot;data-text-lazy#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt;, otherwise &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-maybe#v:Just&quot;&gt;Just&lt;/a&gt;&lt;/code&gt;&lt;code&gt;(a,b)&lt;/code&gt;. In this case, &lt;code&gt;a&lt;/code&gt; is the next &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-char#t:Char&quot;&gt;Char&lt;/a&gt;&lt;/code&gt; in the string, and &lt;code&gt;b&lt;/code&gt; is the seed value for further production. Subject to fusion. Performs replacement on invalid scalar values.</source>
          <target state="translated">O (n), donde &lt;code&gt;n&lt;/code&gt; es la longitud del resultado. La funci&amp;oacute;n de &lt;code&gt;&lt;a href=&quot;data-text-lazy#v:unfoldr&quot;&gt;unfoldr&lt;/a&gt;&lt;/code&gt; es an&amp;aacute;loga a la funci&amp;oacute;n de &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/ghc-oldlist#v:unfoldr&quot;&gt;unfoldr&lt;/a&gt;&lt;/code&gt; lista . &lt;code&gt;&lt;a href=&quot;data-text-lazy#v:unfoldr&quot;&gt;unfoldr&lt;/a&gt;&lt;/code&gt; construye un &lt;code&gt;&lt;a href=&quot;data-text-lazy#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt; partir de un valor inicial. La funci&amp;oacute;n toma el elemento y devuelve &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-maybe#v:Nothing&quot;&gt;Nothing&lt;/a&gt;&lt;/code&gt; si se termina de producir el &lt;code&gt;&lt;a href=&quot;data-text-lazy#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt; , de lo contrario, &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-maybe#v:Just&quot;&gt;Just&lt;/a&gt;&lt;/code&gt; &lt;code&gt;(a,b)&lt;/code&gt; . En este caso, &lt;code&gt;a&lt;/code&gt; es el siguiente &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-char#t:Char&quot;&gt;Char&lt;/a&gt;&lt;/code&gt; de la cadena y &lt;code&gt;b&lt;/code&gt; es el valor inicial para una mayor producci&amp;oacute;n. Sujeto a fusi&amp;oacute;n. Realiza el reemplazo de valores escalares no v&amp;aacute;lidos.</target>
        </trans-unit>
        <trans-unit id="0eb07bedb5ec374aecdbd4bb8d80730362790f63" translate="yes" xml:space="preserve">
          <source>O(n), where &lt;code&gt;n&lt;/code&gt; is the length of the result. The &lt;code&gt;&lt;a href=&quot;data-text-lazy#v:unfoldr&quot;&gt;unfoldr&lt;/a&gt;&lt;/code&gt; function is analogous to the List &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/ghc-oldlist#v:unfoldr&quot;&gt;unfoldr&lt;/a&gt;&lt;/code&gt;. &lt;code&gt;&lt;a href=&quot;data-text-lazy#v:unfoldr&quot;&gt;unfoldr&lt;/a&gt;&lt;/code&gt; builds a &lt;code&gt;&lt;a href=&quot;data-text-lazy#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt; from a seed value. The function takes the element and returns &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-maybe#v:Nothing&quot;&gt;Nothing&lt;/a&gt;&lt;/code&gt; if it is done producing the &lt;code&gt;&lt;a href=&quot;data-text-lazy#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt;, otherwise &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-maybe#v:Just&quot;&gt;Just&lt;/a&gt;&lt;/code&gt;&lt;code&gt;(a,b)&lt;/code&gt;. In this case, &lt;code&gt;a&lt;/code&gt; is the next &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-char#t:Char&quot;&gt;Char&lt;/a&gt;&lt;/code&gt; in the string, and &lt;code&gt;b&lt;/code&gt; is the seed value for further production. Performs replacement on invalid scalar values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0b6a73856d1308ea4b064a3d9fc6d62b223a3429" translate="yes" xml:space="preserve">
          <source>O(n), where &lt;code&gt;n&lt;/code&gt; is the length of the result. The unfoldr function is analogous to the List &lt;code&gt;&lt;a href=&quot;data-text-internal-fusion-common#v:unfoldr&quot;&gt;unfoldr&lt;/a&gt;&lt;/code&gt;. unfoldr builds a stream from a seed value. The function takes the element and returns Nothing if it is done producing the stream or returns Just (a,b), in which case, a is the next Char in the string, and b is the seed value for further production.</source>
          <target state="translated">O (n), donde &lt;code&gt;n&lt;/code&gt; es la longitud del resultado. La funci&amp;oacute;n de despliegue es an&amp;aacute;loga a la funci&amp;oacute;n de &lt;code&gt;&lt;a href=&quot;data-text-internal-fusion-common#v:unfoldr&quot;&gt;unfoldr&lt;/a&gt;&lt;/code&gt; lista . desdoblador construye una corriente a partir de un valor inicial. La funci&amp;oacute;n toma el elemento y devuelve Nothing si ha terminado de producir el flujo o devuelve Just (a, b), en cuyo caso, a es el siguiente Char en la cadena yb es el valor inicial para la producci&amp;oacute;n adicional.</target>
        </trans-unit>
        <trans-unit id="c03ab14925a542ebc519ea48d4a849680bd10f4a" translate="yes" xml:space="preserve">
          <source>O(n), where &lt;em&gt;n&lt;/em&gt; is the length of the result. The &lt;code&gt;&lt;a href=&quot;data-bytestring#v:unfoldr&quot;&gt;unfoldr&lt;/a&gt;&lt;/code&gt; function is analogous to the List 'unfoldr'. &lt;code&gt;&lt;a href=&quot;data-bytestring#v:unfoldr&quot;&gt;unfoldr&lt;/a&gt;&lt;/code&gt; builds a ByteString from a seed value. The function takes the element and returns &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-maybe#v:Nothing&quot;&gt;Nothing&lt;/a&gt;&lt;/code&gt; if it is done producing the ByteString or returns &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-maybe#v:Just&quot;&gt;Just&lt;/a&gt;&lt;/code&gt;&lt;code&gt;(a,b)&lt;/code&gt;, in which case, &lt;code&gt;a&lt;/code&gt; is the next byte in the string, and &lt;code&gt;b&lt;/code&gt; is the seed value for further production.</source>
          <target state="translated">O (n), donde &lt;em&gt;n&lt;/em&gt; es la longitud del resultado. La funci&amp;oacute;n de &lt;code&gt;&lt;a href=&quot;data-bytestring#v:unfoldr&quot;&gt;unfoldr&lt;/a&gt;&lt;/code&gt; es an&amp;aacute;loga a la lista 'desdoblador'. &lt;code&gt;&lt;a href=&quot;data-bytestring#v:unfoldr&quot;&gt;unfoldr&lt;/a&gt;&lt;/code&gt; construye un ByteString a partir de un valor inicial. La funci&amp;oacute;n toma el elemento y devuelve &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-maybe#v:Nothing&quot;&gt;Nothing&lt;/a&gt;&lt;/code&gt; si ha terminado de producir ByteString o devuelve &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-maybe#v:Just&quot;&gt;Just&lt;/a&gt;&lt;/code&gt; &lt;code&gt;(a,b)&lt;/code&gt; , en cuyo caso, &lt;code&gt;a&lt;/code&gt; es el siguiente byte de la cadena &lt;code&gt;b&lt;/code&gt; es el valor inicial para una producci&amp;oacute;n posterior.</target>
        </trans-unit>
        <trans-unit id="816ab5613d5257e41cd12eab24bceef2e1566aa0" translate="yes" xml:space="preserve">
          <source>O(n), where &lt;em&gt;n&lt;/em&gt; is the length of the result. The &lt;code&gt;&lt;a href=&quot;data-bytestring#v:unfoldr&quot;&gt;unfoldr&lt;/a&gt;&lt;/code&gt; function is analogous to the List 'unfoldr'. &lt;code&gt;&lt;a href=&quot;data-bytestring#v:unfoldr&quot;&gt;unfoldr&lt;/a&gt;&lt;/code&gt; builds a ByteString from a seed value. The function takes the element and returns &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-maybe#v:Nothing&quot;&gt;Nothing&lt;/a&gt;&lt;/code&gt; if it is done producing the ByteString or returns &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-maybe#v:Just&quot;&gt;Just&lt;/a&gt;&lt;/code&gt;&lt;code&gt;(a,b)&lt;/code&gt;, in which case, &lt;code&gt;a&lt;/code&gt; is the next byte in the string, and &lt;code&gt;b&lt;/code&gt; is the seed value for further production.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d0fde6970ba722285dbfb2bb86ba9ddab5e58ec9" translate="yes" xml:space="preserve">
          <source>O(n), where &lt;em&gt;n&lt;/em&gt; is the length of the result. The &lt;code&gt;&lt;a href=&quot;data-bytestring-char8#v:unfoldr&quot;&gt;unfoldr&lt;/a&gt;&lt;/code&gt; function is analogous to the List 'unfoldr'. &lt;code&gt;&lt;a href=&quot;data-bytestring-char8#v:unfoldr&quot;&gt;unfoldr&lt;/a&gt;&lt;/code&gt; builds a ByteString from a seed value. The function takes the element and returns &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-maybe#v:Nothing&quot;&gt;Nothing&lt;/a&gt;&lt;/code&gt; if it is done producing the ByteString or returns &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-maybe#v:Just&quot;&gt;Just&lt;/a&gt;&lt;/code&gt;&lt;code&gt;(a,b)&lt;/code&gt;, in which case, &lt;code&gt;a&lt;/code&gt; is the next character in the string, and &lt;code&gt;b&lt;/code&gt; is the seed value for further production.</source>
          <target state="translated">O (n), donde &lt;em&gt;n&lt;/em&gt; es la longitud del resultado. La funci&amp;oacute;n de &lt;code&gt;&lt;a href=&quot;data-bytestring-char8#v:unfoldr&quot;&gt;unfoldr&lt;/a&gt;&lt;/code&gt; es an&amp;aacute;loga a la lista 'desdoblador'. &lt;code&gt;&lt;a href=&quot;data-bytestring-char8#v:unfoldr&quot;&gt;unfoldr&lt;/a&gt;&lt;/code&gt; construye un ByteString a partir de un valor inicial. La funci&amp;oacute;n toma el elemento y devuelve &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-maybe#v:Nothing&quot;&gt;Nothing&lt;/a&gt;&lt;/code&gt; si ha terminado de producir ByteString o devuelve &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-maybe#v:Just&quot;&gt;Just&lt;/a&gt;&lt;/code&gt; &lt;code&gt;(a,b)&lt;/code&gt; , en cuyo caso, &lt;code&gt;a&lt;/code&gt; es el siguiente car&amp;aacute;cter de la cadena y &lt;code&gt;b&lt;/code&gt; es el valor inicial para una producci&amp;oacute;n posterior.</target>
        </trans-unit>
        <trans-unit id="cdfbbdc5dc33e6b9add119167d0df5fbd5a5e58d" translate="yes" xml:space="preserve">
          <source>O(n), where &lt;em&gt;n&lt;/em&gt; is the length of the result. The &lt;code&gt;&lt;a href=&quot;data-bytestring-char8#v:unfoldr&quot;&gt;unfoldr&lt;/a&gt;&lt;/code&gt; function is analogous to the List 'unfoldr'. &lt;code&gt;&lt;a href=&quot;data-bytestring-char8#v:unfoldr&quot;&gt;unfoldr&lt;/a&gt;&lt;/code&gt; builds a ByteString from a seed value. The function takes the element and returns &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-maybe#v:Nothing&quot;&gt;Nothing&lt;/a&gt;&lt;/code&gt; if it is done producing the ByteString or returns &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-maybe#v:Just&quot;&gt;Just&lt;/a&gt;&lt;/code&gt;&lt;code&gt;(a,b)&lt;/code&gt;, in which case, &lt;code&gt;a&lt;/code&gt; is the next character in the string, and &lt;code&gt;b&lt;/code&gt; is the seed value for further production.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ceaee61cf4c86a4cfedd55743379f704a86375c4" translate="yes" xml:space="preserve">
          <source>O(n). &lt;code&gt;&lt;a href=&quot;data-intmap-lazy#v:traverseWithKey&quot;&gt;traverseWithKey&lt;/a&gt; f s == &lt;a href=&quot;data-intmap-lazy#v:fromList&quot;&gt;fromList&lt;/a&gt; &lt;a href=&quot;%24&quot;&gt;$&lt;/a&gt; &lt;a href=&quot;../base-4.13.0.0/data-traversable#v:traverse&quot;&gt;traverse&lt;/a&gt; ((k, v) -&amp;gt; (,) k &lt;a href=&quot;%24&quot;&gt;$&lt;/a&gt; f k v) (&lt;a href=&quot;data-intmap-lazy#v:toList&quot;&gt;toList&lt;/a&gt; m)&lt;/code&gt; That is, behaves exactly like a regular &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-traversable#v:traverse&quot;&gt;traverse&lt;/a&gt;&lt;/code&gt; except that the traversing function also has access to the key associated with a value.</source>
          <target state="translated">En). &lt;code&gt;&lt;a href=&quot;data-intmap-lazy#v:traverseWithKey&quot;&gt;traverseWithKey&lt;/a&gt; f s == &lt;a href=&quot;data-intmap-lazy#v:fromList&quot;&gt;fromList&lt;/a&gt; &lt;a href=&quot;%24&quot;&gt;$&lt;/a&gt; &lt;a href=&quot;../base-4.13.0.0/data-traversable#v:traverse&quot;&gt;traverse&lt;/a&gt; ((k, v) -&amp;gt; (,) k &lt;a href=&quot;%24&quot;&gt;$&lt;/a&gt; f k v) (&lt;a href=&quot;data-intmap-lazy#v:toList&quot;&gt;toList&lt;/a&gt; m)&lt;/code&gt; Es decir, se comporta exactamente como una &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-traversable#v:traverse&quot;&gt;traverse&lt;/a&gt;&lt;/code&gt; regular excepto que la funci&amp;oacute;n de traves&amp;iacute;a tambi&amp;eacute;n tiene acceso a la tecla asociada con un valor .</target>
        </trans-unit>
        <trans-unit id="a9a6e5489e15971815fbadc25cbc83a64b5a4e4e" translate="yes" xml:space="preserve">
          <source>O(n). &lt;code&gt;&lt;a href=&quot;data-intmap-lazy#v:traverseWithKey&quot;&gt;traverseWithKey&lt;/a&gt; f s == &lt;a href=&quot;data-intmap-lazy#v:fromList&quot;&gt;fromList&lt;/a&gt; &lt;a href=&quot;%24&quot;&gt;$&lt;/a&gt; &lt;a href=&quot;../base-4.14.1.0/data-traversable#v:traverse&quot;&gt;traverse&lt;/a&gt; ((k, v) -&amp;gt; (,) k &lt;a href=&quot;%24&quot;&gt;$&lt;/a&gt; f k v) (&lt;a href=&quot;data-intmap-lazy#v:toList&quot;&gt;toList&lt;/a&gt; m)&lt;/code&gt; That is, behaves exactly like a regular &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-traversable#v:traverse&quot;&gt;traverse&lt;/a&gt;&lt;/code&gt; except that the traversing function also has access to the key associated with a value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9ec18bf9617ddbc5f926dd7e90848c7b25f4cba2" translate="yes" xml:space="preserve">
          <source>O(n). &lt;code&gt;&lt;a href=&quot;data-intmap-strict#v:traverseWithKey&quot;&gt;traverseWithKey&lt;/a&gt; f s == &lt;a href=&quot;data-intmap-strict#v:fromList&quot;&gt;fromList&lt;/a&gt; &lt;a href=&quot;%24&quot;&gt;$&lt;/a&gt; &lt;a href=&quot;../base-4.13.0.0/data-traversable#v:traverse&quot;&gt;traverse&lt;/a&gt; ((k, v) -&amp;gt; (,) k &lt;a href=&quot;%24&quot;&gt;$&lt;/a&gt; f k v) (&lt;a href=&quot;data-intmap-strict#v:toList&quot;&gt;toList&lt;/a&gt; m)&lt;/code&gt; That is, behaves exactly like a regular &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-traversable#v:traverse&quot;&gt;traverse&lt;/a&gt;&lt;/code&gt; except that the traversing function also has access to the key associated with a value.</source>
          <target state="translated">En). &lt;code&gt;&lt;a href=&quot;data-intmap-strict#v:traverseWithKey&quot;&gt;traverseWithKey&lt;/a&gt; f s == &lt;a href=&quot;data-intmap-strict#v:fromList&quot;&gt;fromList&lt;/a&gt; &lt;a href=&quot;%24&quot;&gt;$&lt;/a&gt; &lt;a href=&quot;../base-4.13.0.0/data-traversable#v:traverse&quot;&gt;traverse&lt;/a&gt; ((k, v) -&amp;gt; (,) k &lt;a href=&quot;%24&quot;&gt;$&lt;/a&gt; f k v) (&lt;a href=&quot;data-intmap-strict#v:toList&quot;&gt;toList&lt;/a&gt; m)&lt;/code&gt; Es decir, se comporta exactamente como una &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-traversable#v:traverse&quot;&gt;traverse&lt;/a&gt;&lt;/code&gt; regular excepto que la funci&amp;oacute;n de traves&amp;iacute;a tambi&amp;eacute;n tiene acceso a la tecla asociada con un valor .</target>
        </trans-unit>
        <trans-unit id="3854551c76b0975df5c831a06eac450d79a73884" translate="yes" xml:space="preserve">
          <source>O(n). &lt;code&gt;&lt;a href=&quot;data-intmap-strict#v:traverseWithKey&quot;&gt;traverseWithKey&lt;/a&gt; f s == &lt;a href=&quot;data-intmap-strict#v:fromList&quot;&gt;fromList&lt;/a&gt; &lt;a href=&quot;%24&quot;&gt;$&lt;/a&gt; &lt;a href=&quot;../base-4.14.1.0/data-traversable#v:traverse&quot;&gt;traverse&lt;/a&gt; ((k, v) -&amp;gt; (,) k &lt;a href=&quot;%24&quot;&gt;$&lt;/a&gt; f k v) (&lt;a href=&quot;data-intmap-strict#v:toList&quot;&gt;toList&lt;/a&gt; m)&lt;/code&gt; That is, behaves exactly like a regular &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-traversable#v:traverse&quot;&gt;traverse&lt;/a&gt;&lt;/code&gt; except that the traversing function also has access to the key associated with a value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="06a6b96e556967d134bb56ea9708d4004f451168" translate="yes" xml:space="preserve">
          <source>O(n). &lt;code&gt;&lt;a href=&quot;data-intmap-strict-internal#v:traverseWithKey&quot;&gt;traverseWithKey&lt;/a&gt; f s == &lt;a href=&quot;data-intmap-strict-internal#v:fromList&quot;&gt;fromList&lt;/a&gt; &lt;a href=&quot;%24&quot;&gt;$&lt;/a&gt; &lt;a href=&quot;../base-4.13.0.0/data-traversable#v:traverse&quot;&gt;traverse&lt;/a&gt; ((k, v) -&amp;gt; (,) k &lt;a href=&quot;%24&quot;&gt;$&lt;/a&gt; f k v) (&lt;a href=&quot;data-intmap-strict-internal#v:toList&quot;&gt;toList&lt;/a&gt; m)&lt;/code&gt; That is, behaves exactly like a regular &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-traversable#v:traverse&quot;&gt;traverse&lt;/a&gt;&lt;/code&gt; except that the traversing function also has access to the key associated with a value.</source>
          <target state="translated">En). &lt;code&gt;&lt;a href=&quot;data-intmap-strict-internal#v:traverseWithKey&quot;&gt;traverseWithKey&lt;/a&gt; f s == &lt;a href=&quot;data-intmap-strict-internal#v:fromList&quot;&gt;fromList&lt;/a&gt; &lt;a href=&quot;%24&quot;&gt;$&lt;/a&gt; &lt;a href=&quot;../base-4.13.0.0/data-traversable#v:traverse&quot;&gt;traverse&lt;/a&gt; ((k, v) -&amp;gt; (,) k &lt;a href=&quot;%24&quot;&gt;$&lt;/a&gt; f k v) (&lt;a href=&quot;data-intmap-strict-internal#v:toList&quot;&gt;toList&lt;/a&gt; m)&lt;/code&gt; Es decir, se comporta exactamente como una &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-traversable#v:traverse&quot;&gt;traverse&lt;/a&gt;&lt;/code&gt; regular excepto que la funci&amp;oacute;n de traves&amp;iacute;a tambi&amp;eacute;n tiene acceso a la tecla asociada con un valor .</target>
        </trans-unit>
        <trans-unit id="bbe068fbb503e4b0b81cf66c9d125156d8ea7b1a" translate="yes" xml:space="preserve">
          <source>O(n). &lt;code&gt;&lt;a href=&quot;data-intmap-strict-internal#v:traverseWithKey&quot;&gt;traverseWithKey&lt;/a&gt; f s == &lt;a href=&quot;data-intmap-strict-internal#v:fromList&quot;&gt;fromList&lt;/a&gt; &lt;a href=&quot;%24&quot;&gt;$&lt;/a&gt; &lt;a href=&quot;../base-4.14.1.0/data-traversable#v:traverse&quot;&gt;traverse&lt;/a&gt; ((k, v) -&amp;gt; (,) k &lt;a href=&quot;%24&quot;&gt;$&lt;/a&gt; f k v) (&lt;a href=&quot;data-intmap-strict-internal#v:toList&quot;&gt;toList&lt;/a&gt; m)&lt;/code&gt; That is, behaves exactly like a regular &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-traversable#v:traverse&quot;&gt;traverse&lt;/a&gt;&lt;/code&gt; except that the traversing function also has access to the key associated with a value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2a28ae698d478e9723ab92a699f5a1fab2e893a9" translate="yes" xml:space="preserve">
          <source>O(n). &lt;code&gt;&lt;a href=&quot;data-list#v:delete&quot;&gt;delete&lt;/a&gt;&lt;/code&gt;&lt;code&gt;x&lt;/code&gt; removes the first occurrence of &lt;code&gt;x&lt;/code&gt; from its list argument. For example,</source>
          <target state="translated">En). &lt;code&gt;&lt;a href=&quot;data-list#v:delete&quot;&gt;delete&lt;/a&gt;&lt;/code&gt; &lt;code&gt;x&lt;/code&gt; elimina la primera aparici&amp;oacute;n de &lt;code&gt;x&lt;/code&gt; de su argumento de lista. Por ejemplo,</target>
        </trans-unit>
        <trans-unit id="ccf20cdd3504967299316be3c4b583dca63bcaf2" translate="yes" xml:space="preserve">
          <source>O(n). &lt;code&gt;&lt;a href=&quot;data-list#v:filter&quot;&gt;filter&lt;/a&gt;&lt;/code&gt;, applied to a predicate and a list, returns the list of those elements that satisfy the predicate; i.e.,</source>
          <target state="translated">En). &lt;code&gt;&lt;a href=&quot;data-list#v:filter&quot;&gt;filter&lt;/a&gt;&lt;/code&gt; , aplicado a un predicado y una lista, devuelve la lista de aquellos elementos que satisfacen el predicado; es decir,</target>
        </trans-unit>
        <trans-unit id="d6fe1b11423245d1cb4e0bdb9854f834eff82c62" translate="yes" xml:space="preserve">
          <source>O(n). &lt;code&gt;&lt;a href=&quot;data-list#v:lookup&quot;&gt;lookup&lt;/a&gt;&lt;/code&gt;&lt;code&gt;key assocs&lt;/code&gt; looks up a key in an association list.</source>
          <target state="translated">En). &lt;code&gt;&lt;a href=&quot;data-list#v:lookup&quot;&gt;lookup&lt;/a&gt;&lt;/code&gt; &lt;code&gt;key assocs&lt;/code&gt; busca una clave en una lista de asociaciones.</target>
        </trans-unit>
        <trans-unit id="11f965321b8cf48b28368645a30a485a8fbe2bf3" translate="yes" xml:space="preserve">
          <source>O(n). &lt;code&gt;&lt;a href=&quot;data-list#v:map&quot;&gt;map&lt;/a&gt;&lt;/code&gt;&lt;code&gt;f xs&lt;/code&gt; is the list obtained by applying &lt;code&gt;f&lt;/code&gt; to each element of &lt;code&gt;xs&lt;/code&gt;, i.e.,</source>
          <target state="translated">En). &lt;code&gt;&lt;a href=&quot;data-list#v:map&quot;&gt;map&lt;/a&gt;&lt;/code&gt; &lt;code&gt;f xs&lt;/code&gt; es la lista obtenida aplicando &lt;code&gt;f&lt;/code&gt; a cada elemento de &lt;code&gt;xs&lt;/code&gt; , es decir,</target>
        </trans-unit>
        <trans-unit id="8c55e4147006d30488e980655db22c957c6d3858" translate="yes" xml:space="preserve">
          <source>O(n). &lt;code&gt;&lt;a href=&quot;data-list#v:scanl&quot;&gt;scanl&lt;/a&gt;&lt;/code&gt; is similar to &lt;code&gt;&lt;a href=&quot;ghc-list#v:foldl&quot;&gt;foldl&lt;/a&gt;&lt;/code&gt;, but returns a list of successive reduced values from the left:</source>
          <target state="translated">En). &lt;code&gt;&lt;a href=&quot;data-list#v:scanl&quot;&gt;scanl&lt;/a&gt;&lt;/code&gt; es similar a &lt;code&gt;&lt;a href=&quot;ghc-list#v:foldl&quot;&gt;foldl&lt;/a&gt;&lt;/code&gt; , pero devuelve una lista de valores reducidos sucesivos desde la izquierda:</target>
        </trans-unit>
        <trans-unit id="8cc7978dbf7398841fab5ef77987edff23cc46d3" translate="yes" xml:space="preserve">
          <source>O(n). &lt;code&gt;&lt;a href=&quot;data-list#v:scanl1&quot;&gt;scanl1&lt;/a&gt;&lt;/code&gt; is a variant of &lt;code&gt;&lt;a href=&quot;data-list#v:scanl&quot;&gt;scanl&lt;/a&gt;&lt;/code&gt; that has no starting value argument:</source>
          <target state="translated">En). &lt;code&gt;&lt;a href=&quot;data-list#v:scanl1&quot;&gt;scanl1&lt;/a&gt;&lt;/code&gt; es una variante de &lt;code&gt;&lt;a href=&quot;data-list#v:scanl&quot;&gt;scanl&lt;/a&gt;&lt;/code&gt; que no tiene un argumento de valor inicial:</target>
        </trans-unit>
        <trans-unit id="3276e1977108db17ca404044fc0e4cf770d7f949" translate="yes" xml:space="preserve">
          <source>O(n). &lt;code&gt;&lt;a href=&quot;data-list#v:scanr&quot;&gt;scanr&lt;/a&gt;&lt;/code&gt; is the right-to-left dual of &lt;code&gt;&lt;a href=&quot;data-list#v:scanl&quot;&gt;scanl&lt;/a&gt;&lt;/code&gt;. Note that</source>
          <target state="translated">En). &lt;code&gt;&lt;a href=&quot;data-list#v:scanr&quot;&gt;scanr&lt;/a&gt;&lt;/code&gt; es el dual de derecha a izquierda de &lt;code&gt;&lt;a href=&quot;data-list#v:scanl&quot;&gt;scanl&lt;/a&gt;&lt;/code&gt; . Tenga en cuenta que</target>
        </trans-unit>
        <trans-unit id="d4146ad1a8026cc64491869dab9073233e206c19" translate="yes" xml:space="preserve">
          <source>O(n). &lt;code&gt;&lt;a href=&quot;data-list#v:scanr1&quot;&gt;scanr1&lt;/a&gt;&lt;/code&gt; is a variant of &lt;code&gt;&lt;a href=&quot;data-list#v:scanr&quot;&gt;scanr&lt;/a&gt;&lt;/code&gt; that has no starting value argument.</source>
          <target state="translated">En). &lt;code&gt;&lt;a href=&quot;data-list#v:scanr1&quot;&gt;scanr1&lt;/a&gt;&lt;/code&gt; es una variante de &lt;code&gt;&lt;a href=&quot;data-list#v:scanr&quot;&gt;scanr&lt;/a&gt;&lt;/code&gt; que no tiene un argumento de valor inicial.</target>
        </trans-unit>
        <trans-unit id="1acbc5396610d091e2bd3f021730a65076944055" translate="yes" xml:space="preserve">
          <source>O(n). &lt;code&gt;&lt;a href=&quot;data-map-lazy#v:mapKeysMonotonic&quot;&gt;mapKeysMonotonic&lt;/a&gt; f s == &lt;a href=&quot;data-map-lazy#v:mapKeys&quot;&gt;mapKeys&lt;/a&gt; f s&lt;/code&gt;, but works only when &lt;code&gt;f&lt;/code&gt; is strictly monotonic. That is, for any values &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt;, if &lt;code&gt;x&lt;/code&gt; &amp;lt; &lt;code&gt;y&lt;/code&gt; then &lt;code&gt;f x&lt;/code&gt; &amp;lt; &lt;code&gt;f y&lt;/code&gt;. &lt;em&gt;The precondition is not checked.&lt;/em&gt; Semi-formally, we have:</source>
          <target state="translated">En). &lt;code&gt;&lt;a href=&quot;data-map-lazy#v:mapKeysMonotonic&quot;&gt;mapKeysMonotonic&lt;/a&gt; f s == &lt;a href=&quot;data-map-lazy#v:mapKeys&quot;&gt;mapKeys&lt;/a&gt; f s&lt;/code&gt; , pero funciona solo cuando &lt;code&gt;f&lt;/code&gt; es estrictamente monot&amp;oacute;nico. Es decir, para cualquier valor de &lt;code&gt;x&lt;/code&gt; y &lt;code&gt;y&lt;/code&gt; , si &lt;code&gt;x&lt;/code&gt; &amp;lt; &lt;code&gt;y&lt;/code&gt; entonces &lt;code&gt;f x&lt;/code&gt; &amp;lt; &lt;code&gt;f y&lt;/code&gt; . &lt;em&gt;No se comprueba la condici&amp;oacute;n previa. &lt;/em&gt;De manera semiformal, tenemos:</target>
        </trans-unit>
        <trans-unit id="d5757263023c5cec22db23f29c037746af6d0da6" translate="yes" xml:space="preserve">
          <source>O(n). &lt;code&gt;&lt;a href=&quot;data-map-lazy#v:traverseWithKey&quot;&gt;traverseWithKey&lt;/a&gt; f m == &lt;a href=&quot;data-map-lazy#v:fromList&quot;&gt;fromList&lt;/a&gt; &lt;a href=&quot;%24&quot;&gt;$&lt;/a&gt; &lt;a href=&quot;../base-4.13.0.0/data-traversable#v:traverse&quot;&gt;traverse&lt;/a&gt; ((k, v) -&amp;gt; (,) k &lt;a href=&quot;%24&quot;&gt;$&lt;/a&gt; f k v) (&lt;a href=&quot;data-map-lazy#v:toList&quot;&gt;toList&lt;/a&gt; m)&lt;/code&gt; That is, behaves exactly like a regular &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-traversable#v:traverse&quot;&gt;traverse&lt;/a&gt;&lt;/code&gt; except that the traversing function also has access to the key associated with a value.</source>
          <target state="translated">En). &lt;code&gt;&lt;a href=&quot;data-map-lazy#v:traverseWithKey&quot;&gt;traverseWithKey&lt;/a&gt; f m == &lt;a href=&quot;data-map-lazy#v:fromList&quot;&gt;fromList&lt;/a&gt; &lt;a href=&quot;%24&quot;&gt;$&lt;/a&gt; &lt;a href=&quot;../base-4.13.0.0/data-traversable#v:traverse&quot;&gt;traverse&lt;/a&gt; ((k, v) -&amp;gt; (,) k &lt;a href=&quot;%24&quot;&gt;$&lt;/a&gt; f k v) (&lt;a href=&quot;data-map-lazy#v:toList&quot;&gt;toList&lt;/a&gt; m)&lt;/code&gt; Es decir, se comporta exactamente como una &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-traversable#v:traverse&quot;&gt;traverse&lt;/a&gt;&lt;/code&gt; regular excepto que la funci&amp;oacute;n de desplazamiento tambi&amp;eacute;n tiene acceso a la clave asociada con un valor .</target>
        </trans-unit>
        <trans-unit id="e63a890a138b208c55c6769d80c83815c8ff5640" translate="yes" xml:space="preserve">
          <source>O(n). &lt;code&gt;&lt;a href=&quot;data-map-lazy#v:traverseWithKey&quot;&gt;traverseWithKey&lt;/a&gt; f m == &lt;a href=&quot;data-map-lazy#v:fromList&quot;&gt;fromList&lt;/a&gt; &lt;a href=&quot;%24&quot;&gt;$&lt;/a&gt; &lt;a href=&quot;../base-4.14.1.0/data-traversable#v:traverse&quot;&gt;traverse&lt;/a&gt; ((k, v) -&amp;gt; (,) k &lt;a href=&quot;%24&quot;&gt;$&lt;/a&gt; f k v) (&lt;a href=&quot;data-map-lazy#v:toList&quot;&gt;toList&lt;/a&gt; m)&lt;/code&gt; That is, behaves exactly like a regular &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-traversable#v:traverse&quot;&gt;traverse&lt;/a&gt;&lt;/code&gt; except that the traversing function also has access to the key associated with a value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1cc472489dbc2ff3cc43835b13e34e467315dd41" translate="yes" xml:space="preserve">
          <source>O(n). &lt;code&gt;&lt;a href=&quot;data-map-strict#v:mapKeysMonotonic&quot;&gt;mapKeysMonotonic&lt;/a&gt; f s == &lt;a href=&quot;data-map-strict#v:mapKeys&quot;&gt;mapKeys&lt;/a&gt; f s&lt;/code&gt;, but works only when &lt;code&gt;f&lt;/code&gt; is strictly monotonic. That is, for any values &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt;, if &lt;code&gt;x&lt;/code&gt; &amp;lt; &lt;code&gt;y&lt;/code&gt; then &lt;code&gt;f x&lt;/code&gt; &amp;lt; &lt;code&gt;f y&lt;/code&gt;. &lt;em&gt;The precondition is not checked.&lt;/em&gt; Semi-formally, we have:</source>
          <target state="translated">En). &lt;code&gt;&lt;a href=&quot;data-map-strict#v:mapKeysMonotonic&quot;&gt;mapKeysMonotonic&lt;/a&gt; f s == &lt;a href=&quot;data-map-strict#v:mapKeys&quot;&gt;mapKeys&lt;/a&gt; f s&lt;/code&gt; , pero funciona solo cuando &lt;code&gt;f&lt;/code&gt; es estrictamente monot&amp;oacute;nico. Es decir, para cualquier valor de &lt;code&gt;x&lt;/code&gt; y &lt;code&gt;y&lt;/code&gt; , si &lt;code&gt;x&lt;/code&gt; &amp;lt; &lt;code&gt;y&lt;/code&gt; entonces &lt;code&gt;f x&lt;/code&gt; &amp;lt; &lt;code&gt;f y&lt;/code&gt; . &lt;em&gt;No se comprueba la condici&amp;oacute;n previa. &lt;/em&gt;De manera semiformal, tenemos:</target>
        </trans-unit>
        <trans-unit id="cea185f035e06b795818b7d4fabdc1b0fef0bf2b" translate="yes" xml:space="preserve">
          <source>O(n). &lt;code&gt;&lt;a href=&quot;data-map-strict#v:traverseWithKey&quot;&gt;traverseWithKey&lt;/a&gt; f m == &lt;a href=&quot;data-map-strict#v:fromList&quot;&gt;fromList&lt;/a&gt; &lt;a href=&quot;%24&quot;&gt;$&lt;/a&gt; &lt;a href=&quot;../base-4.13.0.0/data-traversable#v:traverse&quot;&gt;traverse&lt;/a&gt; ((k, v) -&amp;gt; (v' -&amp;gt; v' `seq` (k,v')) &lt;a href=&quot;%24&quot;&gt;$&lt;/a&gt; f k v) (&lt;a href=&quot;data-map-strict#v:toList&quot;&gt;toList&lt;/a&gt; m)&lt;/code&gt; That is, it behaves much like a regular &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-traversable#v:traverse&quot;&gt;traverse&lt;/a&gt;&lt;/code&gt; except that the traversing function also has access to the key associated with a value and the values are forced before they are installed in the result map.</source>
          <target state="translated">En). &lt;code&gt;&lt;a href=&quot;data-map-strict#v:traverseWithKey&quot;&gt;traverseWithKey&lt;/a&gt; f m == &lt;a href=&quot;data-map-strict#v:fromList&quot;&gt;fromList&lt;/a&gt; &lt;a href=&quot;%24&quot;&gt;$&lt;/a&gt; &lt;a href=&quot;../base-4.13.0.0/data-traversable#v:traverse&quot;&gt;traverse&lt;/a&gt; ((k, v) -&amp;gt; (v' -&amp;gt; v' `seq` (k,v')) &lt;a href=&quot;%24&quot;&gt;$&lt;/a&gt; f k v) (&lt;a href=&quot;data-map-strict#v:toList&quot;&gt;toList&lt;/a&gt; m)&lt;/code&gt; Es decir, se comporta como una &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-traversable#v:traverse&quot;&gt;traverse&lt;/a&gt;&lt;/code&gt; regular excepto que la funci&amp;oacute;n de desplazamiento tambi&amp;eacute;n tiene acceso a la clave asociada con un valor y los valores se fuerzan antes de que se instalen en el mapa de resultados.</target>
        </trans-unit>
        <trans-unit id="7192133739e1c92cbd532c66d42709ac4c9a5de1" translate="yes" xml:space="preserve">
          <source>O(n). &lt;code&gt;&lt;a href=&quot;data-map-strict#v:traverseWithKey&quot;&gt;traverseWithKey&lt;/a&gt; f m == &lt;a href=&quot;data-map-strict#v:fromList&quot;&gt;fromList&lt;/a&gt; &lt;a href=&quot;%24&quot;&gt;$&lt;/a&gt; &lt;a href=&quot;../base-4.14.1.0/data-traversable#v:traverse&quot;&gt;traverse&lt;/a&gt; ((k, v) -&amp;gt; (v' -&amp;gt; v' `seq` (k,v')) &lt;a href=&quot;%24&quot;&gt;$&lt;/a&gt; f k v) (&lt;a href=&quot;data-map-strict#v:toList&quot;&gt;toList&lt;/a&gt; m)&lt;/code&gt; That is, it behaves much like a regular &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-traversable#v:traverse&quot;&gt;traverse&lt;/a&gt;&lt;/code&gt; except that the traversing function also has access to the key associated with a value and the values are forced before they are installed in the result map.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8007dbe721f56ebc5e776bd43354f56a1b8e404f" translate="yes" xml:space="preserve">
          <source>O(n). &lt;code&gt;&lt;a href=&quot;ghc-base#v:map&quot;&gt;map&lt;/a&gt;&lt;/code&gt;&lt;code&gt;f xs&lt;/code&gt; is the list obtained by applying &lt;code&gt;f&lt;/code&gt; to each element of &lt;code&gt;xs&lt;/code&gt;, i.e.,</source>
          <target state="translated">En). &lt;code&gt;&lt;a href=&quot;ghc-base#v:map&quot;&gt;map&lt;/a&gt;&lt;/code&gt; &lt;code&gt;f xs&lt;/code&gt; es la lista obtenida aplicando &lt;code&gt;f&lt;/code&gt; a cada elemento de &lt;code&gt;xs&lt;/code&gt; , es decir,</target>
        </trans-unit>
        <trans-unit id="46d3eacf6c15ed88627cd6de7787fa50dacce5f6" translate="yes" xml:space="preserve">
          <source>O(n). &lt;code&gt;&lt;a href=&quot;ghc-list#v:filter&quot;&gt;filter&lt;/a&gt;&lt;/code&gt;, applied to a predicate and a list, returns the list of those elements that satisfy the predicate; i.e.,</source>
          <target state="translated">En). &lt;code&gt;&lt;a href=&quot;ghc-list#v:filter&quot;&gt;filter&lt;/a&gt;&lt;/code&gt; , aplicado a un predicado y una lista, devuelve la lista de aquellos elementos que satisfacen el predicado; es decir,</target>
        </trans-unit>
        <trans-unit id="0bf19886a76e7131793141b2d9864a2a0dbbfff4" translate="yes" xml:space="preserve">
          <source>O(n). &lt;code&gt;&lt;a href=&quot;ghc-list#v:length&quot;&gt;length&lt;/a&gt;&lt;/code&gt; returns the length of a finite list as an &lt;code&gt;&lt;a href=&quot;data-int#t:Int&quot;&gt;Int&lt;/a&gt;&lt;/code&gt;. It is an instance of the more general &lt;code&gt;&lt;a href=&quot;data-list#v:genericLength&quot;&gt;genericLength&lt;/a&gt;&lt;/code&gt;, the result type of which may be any kind of number.</source>
          <target state="translated">En). &lt;code&gt;&lt;a href=&quot;ghc-list#v:length&quot;&gt;length&lt;/a&gt;&lt;/code&gt; devuelve la longitud de una lista finita como &lt;code&gt;&lt;a href=&quot;data-int#t:Int&quot;&gt;Int&lt;/a&gt;&lt;/code&gt; . Es una instancia del &lt;code&gt;&lt;a href=&quot;data-list#v:genericLength&quot;&gt;genericLength&lt;/a&gt;&lt;/code&gt; m&amp;aacute;s general , cuyo tipo de resultado puede ser cualquier tipo de n&amp;uacute;mero.</target>
        </trans-unit>
        <trans-unit id="db7f64169595886472ec744cb1bbafae98b3cf54" translate="yes" xml:space="preserve">
          <source>O(n). &lt;code&gt;&lt;a href=&quot;ghc-list#v:lookup&quot;&gt;lookup&lt;/a&gt;&lt;/code&gt;&lt;code&gt;key assocs&lt;/code&gt; looks up a key in an association list.</source>
          <target state="translated">En). &lt;code&gt;&lt;a href=&quot;ghc-list#v:lookup&quot;&gt;lookup&lt;/a&gt;&lt;/code&gt; &lt;code&gt;key assocs&lt;/code&gt; busca una clave en una lista de asociaciones.</target>
        </trans-unit>
        <trans-unit id="f3ff23116ae72545d77549c1ec0fa0f5fd3e1c89" translate="yes" xml:space="preserve">
          <source>O(n). &lt;code&gt;&lt;a href=&quot;ghc-list#v:map&quot;&gt;map&lt;/a&gt;&lt;/code&gt;&lt;code&gt;f xs&lt;/code&gt; is the list obtained by applying &lt;code&gt;f&lt;/code&gt; to each element of &lt;code&gt;xs&lt;/code&gt;, i.e.,</source>
          <target state="translated">En). &lt;code&gt;&lt;a href=&quot;ghc-list#v:map&quot;&gt;map&lt;/a&gt;&lt;/code&gt; &lt;code&gt;f xs&lt;/code&gt; es la lista obtenida aplicando &lt;code&gt;f&lt;/code&gt; a cada elemento de &lt;code&gt;xs&lt;/code&gt; , es decir,</target>
        </trans-unit>
        <trans-unit id="824f695c7c4f739b93537e96dcb9ff4e4c0a90bf" translate="yes" xml:space="preserve">
          <source>O(n). &lt;code&gt;&lt;a href=&quot;ghc-list#v:scanl&quot;&gt;scanl&lt;/a&gt;&lt;/code&gt; is similar to &lt;code&gt;&lt;a href=&quot;ghc-list#v:foldl&quot;&gt;foldl&lt;/a&gt;&lt;/code&gt;, but returns a list of successive reduced values from the left:</source>
          <target state="translated">En). &lt;code&gt;&lt;a href=&quot;ghc-list#v:scanl&quot;&gt;scanl&lt;/a&gt;&lt;/code&gt; es similar a &lt;code&gt;&lt;a href=&quot;ghc-list#v:foldl&quot;&gt;foldl&lt;/a&gt;&lt;/code&gt; , pero devuelve una lista de valores reducidos sucesivos desde la izquierda:</target>
        </trans-unit>
        <trans-unit id="045e5a9f70a34641cb06644e1fa86228ab102908" translate="yes" xml:space="preserve">
          <source>O(n). &lt;code&gt;&lt;a href=&quot;ghc-list#v:scanl1&quot;&gt;scanl1&lt;/a&gt;&lt;/code&gt; is a variant of &lt;code&gt;&lt;a href=&quot;ghc-list#v:scanl&quot;&gt;scanl&lt;/a&gt;&lt;/code&gt; that has no starting value argument:</source>
          <target state="translated">En). &lt;code&gt;&lt;a href=&quot;ghc-list#v:scanl1&quot;&gt;scanl1&lt;/a&gt;&lt;/code&gt; es una variante de &lt;code&gt;&lt;a href=&quot;ghc-list#v:scanl&quot;&gt;scanl&lt;/a&gt;&lt;/code&gt; que no tiene un argumento de valor inicial:</target>
        </trans-unit>
        <trans-unit id="310795a4329755dec2ed79c11b8311da1103913c" translate="yes" xml:space="preserve">
          <source>O(n). &lt;code&gt;&lt;a href=&quot;ghc-list#v:scanr&quot;&gt;scanr&lt;/a&gt;&lt;/code&gt; is the right-to-left dual of &lt;code&gt;&lt;a href=&quot;ghc-list#v:scanl&quot;&gt;scanl&lt;/a&gt;&lt;/code&gt;. Note that</source>
          <target state="translated">En). &lt;code&gt;&lt;a href=&quot;ghc-list#v:scanr&quot;&gt;scanr&lt;/a&gt;&lt;/code&gt; es el dual de derecha a izquierda de &lt;code&gt;&lt;a href=&quot;ghc-list#v:scanl&quot;&gt;scanl&lt;/a&gt;&lt;/code&gt; . Tenga en cuenta que</target>
        </trans-unit>
        <trans-unit id="c6e1e31fd1fc11a0f2735b2a8cf7393a75f33e8f" translate="yes" xml:space="preserve">
          <source>O(n). &lt;code&gt;&lt;a href=&quot;ghc-list#v:scanr1&quot;&gt;scanr1&lt;/a&gt;&lt;/code&gt; is a variant of &lt;code&gt;&lt;a href=&quot;ghc-list#v:scanr&quot;&gt;scanr&lt;/a&gt;&lt;/code&gt; that has no starting value argument.</source>
          <target state="translated">En). &lt;code&gt;&lt;a href=&quot;ghc-list#v:scanr1&quot;&gt;scanr1&lt;/a&gt;&lt;/code&gt; es una variante de &lt;code&gt;&lt;a href=&quot;ghc-list#v:scanr&quot;&gt;scanr&lt;/a&gt;&lt;/code&gt; que no tiene un argumento de valor inicial.</target>
        </trans-unit>
        <trans-unit id="b936791b29247c7f9b4e15048744b9cc7608afab" translate="yes" xml:space="preserve">
          <source>O(n). &lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:delete&quot;&gt;delete&lt;/a&gt;&lt;/code&gt;&lt;code&gt;x&lt;/code&gt; removes the first occurrence of &lt;code&gt;x&lt;/code&gt; from its list argument. For example,</source>
          <target state="translated">En). &lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:delete&quot;&gt;delete&lt;/a&gt;&lt;/code&gt; &lt;code&gt;x&lt;/code&gt; elimina la primera aparici&amp;oacute;n de &lt;code&gt;x&lt;/code&gt; de su argumento de lista. Por ejemplo,</target>
        </trans-unit>
        <trans-unit id="9a6fcf6789e028094a541cbfbbfdfec2309d5a96" translate="yes" xml:space="preserve">
          <source>O(n). &lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:filter&quot;&gt;filter&lt;/a&gt;&lt;/code&gt;, applied to a predicate and a list, returns the list of those elements that satisfy the predicate; i.e.,</source>
          <target state="translated">En). &lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:filter&quot;&gt;filter&lt;/a&gt;&lt;/code&gt; , aplicado a un predicado y una lista, devuelve la lista de aquellos elementos que satisfacen el predicado; es decir,</target>
        </trans-unit>
        <trans-unit id="05fbe4552475b693aab8bdf13ac7026cdbfe7ced" translate="yes" xml:space="preserve">
          <source>O(n). &lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:length&quot;&gt;length&lt;/a&gt;&lt;/code&gt; returns the length of a finite list as an &lt;code&gt;&lt;a href=&quot;data-int#t:Int&quot;&gt;Int&lt;/a&gt;&lt;/code&gt;. It is an instance of the more general &lt;code&gt;&lt;a href=&quot;data-list#v:genericLength&quot;&gt;genericLength&lt;/a&gt;&lt;/code&gt;, the result type of which may be any kind of number.</source>
          <target state="translated">En). &lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:length&quot;&gt;length&lt;/a&gt;&lt;/code&gt; devuelve la longitud de una lista finita como &lt;code&gt;&lt;a href=&quot;data-int#t:Int&quot;&gt;Int&lt;/a&gt;&lt;/code&gt; . Es una instancia del &lt;code&gt;&lt;a href=&quot;data-list#v:genericLength&quot;&gt;genericLength&lt;/a&gt;&lt;/code&gt; m&amp;aacute;s general , cuyo tipo de resultado puede ser cualquier tipo de n&amp;uacute;mero.</target>
        </trans-unit>
        <trans-unit id="254fff5a4de46ce9d178b5eff8cd85ac75de3880" translate="yes" xml:space="preserve">
          <source>O(n). &lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:lookup&quot;&gt;lookup&lt;/a&gt;&lt;/code&gt;&lt;code&gt;key assocs&lt;/code&gt; looks up a key in an association list.</source>
          <target state="translated">En). &lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:lookup&quot;&gt;lookup&lt;/a&gt;&lt;/code&gt; &lt;code&gt;key assocs&lt;/code&gt; busca una clave en una lista de asociaciones.</target>
        </trans-unit>
        <trans-unit id="48f176e190a0c5f600c3d2874157da1284586155" translate="yes" xml:space="preserve">
          <source>O(n). &lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:map&quot;&gt;map&lt;/a&gt;&lt;/code&gt;&lt;code&gt;f xs&lt;/code&gt; is the list obtained by applying &lt;code&gt;f&lt;/code&gt; to each element of &lt;code&gt;xs&lt;/code&gt;, i.e.,</source>
          <target state="translated">En). &lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:map&quot;&gt;map&lt;/a&gt;&lt;/code&gt; &lt;code&gt;f xs&lt;/code&gt; es la lista obtenida aplicando &lt;code&gt;f&lt;/code&gt; a cada elemento de &lt;code&gt;xs&lt;/code&gt; , es decir,</target>
        </trans-unit>
        <trans-unit id="dde493ad53fbdb0bfd6f761be075cdd2f1f0c36a" translate="yes" xml:space="preserve">
          <source>O(n). &lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:scanl&quot;&gt;scanl&lt;/a&gt;&lt;/code&gt; is similar to &lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:foldl&quot;&gt;foldl&lt;/a&gt;&lt;/code&gt;, but returns a list of successive reduced values from the left:</source>
          <target state="translated">En). &lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:scanl&quot;&gt;scanl&lt;/a&gt;&lt;/code&gt; es similar a &lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:foldl&quot;&gt;foldl&lt;/a&gt;&lt;/code&gt; , pero devuelve una lista de valores reducidos sucesivos desde la izquierda:</target>
        </trans-unit>
        <trans-unit id="8b28d83ba41d81f7b42565c540fb3b9c08212581" translate="yes" xml:space="preserve">
          <source>O(n). &lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:scanl1&quot;&gt;scanl1&lt;/a&gt;&lt;/code&gt; is a variant of &lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:scanl&quot;&gt;scanl&lt;/a&gt;&lt;/code&gt; that has no starting value argument:</source>
          <target state="translated">En). &lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:scanl1&quot;&gt;scanl1&lt;/a&gt;&lt;/code&gt; es una variante de &lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:scanl&quot;&gt;scanl&lt;/a&gt;&lt;/code&gt; que no tiene un argumento de valor inicial:</target>
        </trans-unit>
        <trans-unit id="bc83e83adec5b4e7cc90c163f46c901f6b1fa2f7" translate="yes" xml:space="preserve">
          <source>O(n). &lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:scanr&quot;&gt;scanr&lt;/a&gt;&lt;/code&gt; is the right-to-left dual of &lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:scanl&quot;&gt;scanl&lt;/a&gt;&lt;/code&gt;. Note that</source>
          <target state="translated">En). &lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:scanr&quot;&gt;scanr&lt;/a&gt;&lt;/code&gt; es el dual de derecha a izquierda de &lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:scanl&quot;&gt;scanl&lt;/a&gt;&lt;/code&gt; . Tenga en cuenta que</target>
        </trans-unit>
        <trans-unit id="573dea7ef43efaa5eecb101453bf66ef2aaa811e" translate="yes" xml:space="preserve">
          <source>O(n). &lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:scanr1&quot;&gt;scanr1&lt;/a&gt;&lt;/code&gt; is a variant of &lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:scanr&quot;&gt;scanr&lt;/a&gt;&lt;/code&gt; that has no starting value argument.</source>
          <target state="translated">En). &lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:scanr1&quot;&gt;scanr1&lt;/a&gt;&lt;/code&gt; es una variante de &lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:scanr&quot;&gt;scanr&lt;/a&gt;&lt;/code&gt; que no tiene un argumento de valor inicial.</target>
        </trans-unit>
        <trans-unit id="d301cbe6e2600371f03d481dbffc35b50bec2f92" translate="yes" xml:space="preserve">
          <source>O(n). &lt;code&gt;&lt;a href=&quot;prelude#v:filter&quot;&gt;filter&lt;/a&gt;&lt;/code&gt;, applied to a predicate and a list, returns the list of those elements that satisfy the predicate; i.e.,</source>
          <target state="translated">En). &lt;code&gt;&lt;a href=&quot;prelude#v:filter&quot;&gt;filter&lt;/a&gt;&lt;/code&gt; , aplicado a un predicado y una lista, devuelve la lista de aquellos elementos que satisfacen el predicado; es decir,</target>
        </trans-unit>
        <trans-unit id="dc73d88e92572b41dfdee704ea155b51c75e61b7" translate="yes" xml:space="preserve">
          <source>O(n). &lt;code&gt;&lt;a href=&quot;prelude#v:lookup&quot;&gt;lookup&lt;/a&gt;&lt;/code&gt;&lt;code&gt;key assocs&lt;/code&gt; looks up a key in an association list.</source>
          <target state="translated">En). &lt;code&gt;&lt;a href=&quot;prelude#v:lookup&quot;&gt;lookup&lt;/a&gt;&lt;/code&gt; &lt;code&gt;key assocs&lt;/code&gt; busca una clave en una lista de asociaciones.</target>
        </trans-unit>
        <trans-unit id="b743e350bfc904dbe5448ea57249e9ab73540707" translate="yes" xml:space="preserve">
          <source>O(n). &lt;code&gt;&lt;a href=&quot;prelude#v:map&quot;&gt;map&lt;/a&gt;&lt;/code&gt;&lt;code&gt;f xs&lt;/code&gt; is the list obtained by applying &lt;code&gt;f&lt;/code&gt; to each element of &lt;code&gt;xs&lt;/code&gt;, i.e.,</source>
          <target state="translated">En). &lt;code&gt;&lt;a href=&quot;prelude#v:map&quot;&gt;map&lt;/a&gt;&lt;/code&gt; &lt;code&gt;f xs&lt;/code&gt; es la lista obtenida aplicando &lt;code&gt;f&lt;/code&gt; a cada elemento de &lt;code&gt;xs&lt;/code&gt; , es decir,</target>
        </trans-unit>
        <trans-unit id="d6a4c69de0dbafe4c5a63b928de7fd345bf43179" translate="yes" xml:space="preserve">
          <source>O(n). &lt;code&gt;&lt;a href=&quot;prelude#v:scanl&quot;&gt;scanl&lt;/a&gt;&lt;/code&gt; is similar to &lt;code&gt;&lt;a href=&quot;ghc-list#v:foldl&quot;&gt;foldl&lt;/a&gt;&lt;/code&gt;, but returns a list of successive reduced values from the left:</source>
          <target state="translated">En). &lt;code&gt;&lt;a href=&quot;prelude#v:scanl&quot;&gt;scanl&lt;/a&gt;&lt;/code&gt; es similar a &lt;code&gt;&lt;a href=&quot;ghc-list#v:foldl&quot;&gt;foldl&lt;/a&gt;&lt;/code&gt; , pero devuelve una lista de valores reducidos sucesivos desde la izquierda:</target>
        </trans-unit>
        <trans-unit id="2bfac262165c91307a48da21d04f83e5bdb837ac" translate="yes" xml:space="preserve">
          <source>O(n). &lt;code&gt;&lt;a href=&quot;prelude#v:scanl1&quot;&gt;scanl1&lt;/a&gt;&lt;/code&gt; is a variant of &lt;code&gt;&lt;a href=&quot;prelude#v:scanl&quot;&gt;scanl&lt;/a&gt;&lt;/code&gt; that has no starting value argument:</source>
          <target state="translated">En). &lt;code&gt;&lt;a href=&quot;prelude#v:scanl1&quot;&gt;scanl1&lt;/a&gt;&lt;/code&gt; es una variante de &lt;code&gt;&lt;a href=&quot;prelude#v:scanl&quot;&gt;scanl&lt;/a&gt;&lt;/code&gt; que no tiene un argumento de valor inicial:</target>
        </trans-unit>
        <trans-unit id="f46f289161b09cf495b972e219ff941b09fc1cc1" translate="yes" xml:space="preserve">
          <source>O(n). &lt;code&gt;&lt;a href=&quot;prelude#v:scanr&quot;&gt;scanr&lt;/a&gt;&lt;/code&gt; is the right-to-left dual of &lt;code&gt;&lt;a href=&quot;prelude#v:scanl&quot;&gt;scanl&lt;/a&gt;&lt;/code&gt;. Note that</source>
          <target state="translated">En). &lt;code&gt;&lt;a href=&quot;prelude#v:scanr&quot;&gt;scanr&lt;/a&gt;&lt;/code&gt; es el dual de derecha a izquierda de &lt;code&gt;&lt;a href=&quot;prelude#v:scanl&quot;&gt;scanl&lt;/a&gt;&lt;/code&gt; . Tenga en cuenta que</target>
        </trans-unit>
        <trans-unit id="b5107a476769f8d488425004099579d97919ff1c" translate="yes" xml:space="preserve">
          <source>O(n). &lt;code&gt;&lt;a href=&quot;prelude#v:scanr1&quot;&gt;scanr1&lt;/a&gt;&lt;/code&gt; is a variant of &lt;code&gt;&lt;a href=&quot;prelude#v:scanr&quot;&gt;scanr&lt;/a&gt;&lt;/code&gt; that has no starting value argument.</source>
          <target state="translated">En). &lt;code&gt;&lt;a href=&quot;prelude#v:scanr1&quot;&gt;scanr1&lt;/a&gt;&lt;/code&gt; es una variante de &lt;code&gt;&lt;a href=&quot;prelude#v:scanr&quot;&gt;scanr&lt;/a&gt;&lt;/code&gt; que no tiene un argumento de valor inicial.</target>
        </trans-unit>
        <trans-unit id="80685670a565df2994ff82358d8d9ff346ae50d8" translate="yes" xml:space="preserve">
          <source>O(n). A builder taking &lt;code&gt;&lt;a href=&quot;../bytestring-0.10.10.0/data-bytestring-short#t:ShortByteString&quot;&gt;ShortByteString&lt;/a&gt;&lt;/code&gt; and copy it to a Builder, satisfying</source>
          <target state="translated">En). Un constructor que toma &lt;code&gt;&lt;a href=&quot;../bytestring-0.10.10.0/data-bytestring-short#t:ShortByteString&quot;&gt;ShortByteString&lt;/a&gt;&lt;/code&gt; y lo copia en un Builder, satisfaciendo</target>
        </trans-unit>
        <trans-unit id="70530ff33b2f16d9be90d2560f114d8dac8bfc71" translate="yes" xml:space="preserve">
          <source>O(n). A strict version of &lt;code&gt;&lt;a href=&quot;data-intmap-lazy#v:foldl&quot;&gt;foldl&lt;/a&gt;&lt;/code&gt;. Each application of the operator is evaluated before using the result in the next application. This function is strict in the starting value.</source>
          <target state="translated">En). Una versi&amp;oacute;n estricta de &lt;code&gt;&lt;a href=&quot;data-intmap-lazy#v:foldl&quot;&gt;foldl&lt;/a&gt;&lt;/code&gt; . Cada aplicaci&amp;oacute;n del operador se eval&amp;uacute;a antes de usar el resultado en la siguiente aplicaci&amp;oacute;n. Esta funci&amp;oacute;n es estricta en el valor inicial.</target>
        </trans-unit>
        <trans-unit id="c7380470e12e67adf60da39d725c225d497cd662" translate="yes" xml:space="preserve">
          <source>O(n). A strict version of &lt;code&gt;&lt;a href=&quot;data-intmap-lazy#v:foldlWithKey&quot;&gt;foldlWithKey&lt;/a&gt;&lt;/code&gt;. Each application of the operator is evaluated before using the result in the next application. This function is strict in the starting value.</source>
          <target state="translated">En). Una versi&amp;oacute;n estricta de &lt;code&gt;&lt;a href=&quot;data-intmap-lazy#v:foldlWithKey&quot;&gt;foldlWithKey&lt;/a&gt;&lt;/code&gt; . Cada aplicaci&amp;oacute;n del operador se eval&amp;uacute;a antes de usar el resultado en la siguiente aplicaci&amp;oacute;n. Esta funci&amp;oacute;n es estricta en el valor inicial.</target>
        </trans-unit>
        <trans-unit id="0bf0c60b5a6d8a2a055aaebd92dc0d1c6b5c103a" translate="yes" xml:space="preserve">
          <source>O(n). A strict version of &lt;code&gt;&lt;a href=&quot;data-intmap-lazy#v:foldr&quot;&gt;foldr&lt;/a&gt;&lt;/code&gt;. Each application of the operator is evaluated before using the result in the next application. This function is strict in the starting value.</source>
          <target state="translated">En). Una versi&amp;oacute;n estricta de &lt;code&gt;&lt;a href=&quot;data-intmap-lazy#v:foldr&quot;&gt;foldr&lt;/a&gt;&lt;/code&gt; . Cada aplicaci&amp;oacute;n del operador se eval&amp;uacute;a antes de usar el resultado en la siguiente aplicaci&amp;oacute;n. Esta funci&amp;oacute;n es estricta en el valor inicial.</target>
        </trans-unit>
        <trans-unit id="82457c61bd0e963eec702359fcd34f0ff32501f0" translate="yes" xml:space="preserve">
          <source>O(n). A strict version of &lt;code&gt;&lt;a href=&quot;data-intmap-lazy#v:foldrWithKey&quot;&gt;foldrWithKey&lt;/a&gt;&lt;/code&gt;. Each application of the operator is evaluated before using the result in the next application. This function is strict in the starting value.</source>
          <target state="translated">En). Una versi&amp;oacute;n estricta de &lt;code&gt;&lt;a href=&quot;data-intmap-lazy#v:foldrWithKey&quot;&gt;foldrWithKey&lt;/a&gt;&lt;/code&gt; . Cada aplicaci&amp;oacute;n del operador se eval&amp;uacute;a antes de usar el resultado en la siguiente aplicaci&amp;oacute;n. Esta funci&amp;oacute;n es estricta en el valor inicial.</target>
        </trans-unit>
        <trans-unit id="5a29f8d2a31048d9445b8886cc17d35b68969681" translate="yes" xml:space="preserve">
          <source>O(n). A strict version of &lt;code&gt;&lt;a href=&quot;data-intmap-strict#v:foldl&quot;&gt;foldl&lt;/a&gt;&lt;/code&gt;. Each application of the operator is evaluated before using the result in the next application. This function is strict in the starting value.</source>
          <target state="translated">En). Una versi&amp;oacute;n estricta de &lt;code&gt;&lt;a href=&quot;data-intmap-strict#v:foldl&quot;&gt;foldl&lt;/a&gt;&lt;/code&gt; . Cada aplicaci&amp;oacute;n del operador se eval&amp;uacute;a antes de usar el resultado en la siguiente aplicaci&amp;oacute;n. Esta funci&amp;oacute;n es estricta en el valor inicial.</target>
        </trans-unit>
        <trans-unit id="cc75e48d3a49b33e6f4a5c064a7700327c483fb6" translate="yes" xml:space="preserve">
          <source>O(n). A strict version of &lt;code&gt;&lt;a href=&quot;data-intmap-strict#v:foldlWithKey&quot;&gt;foldlWithKey&lt;/a&gt;&lt;/code&gt;. Each application of the operator is evaluated before using the result in the next application. This function is strict in the starting value.</source>
          <target state="translated">En). Una versi&amp;oacute;n estricta de &lt;code&gt;&lt;a href=&quot;data-intmap-strict#v:foldlWithKey&quot;&gt;foldlWithKey&lt;/a&gt;&lt;/code&gt; . Cada aplicaci&amp;oacute;n del operador se eval&amp;uacute;a antes de usar el resultado en la siguiente aplicaci&amp;oacute;n. Esta funci&amp;oacute;n es estricta en el valor inicial.</target>
        </trans-unit>
        <trans-unit id="a454f37660a51ebf61d9a9170dbc42b08c97ea8b" translate="yes" xml:space="preserve">
          <source>O(n). A strict version of &lt;code&gt;&lt;a href=&quot;data-intmap-strict#v:foldr&quot;&gt;foldr&lt;/a&gt;&lt;/code&gt;. Each application of the operator is evaluated before using the result in the next application. This function is strict in the starting value.</source>
          <target state="translated">En). Una versi&amp;oacute;n estricta de &lt;code&gt;&lt;a href=&quot;data-intmap-strict#v:foldr&quot;&gt;foldr&lt;/a&gt;&lt;/code&gt; . Cada aplicaci&amp;oacute;n del operador se eval&amp;uacute;a antes de usar el resultado en la siguiente aplicaci&amp;oacute;n. Esta funci&amp;oacute;n es estricta en el valor inicial.</target>
        </trans-unit>
        <trans-unit id="f37cf8f77f78f92b1d2b189d97d8a766dfb4b013" translate="yes" xml:space="preserve">
          <source>O(n). A strict version of &lt;code&gt;&lt;a href=&quot;data-intmap-strict#v:foldrWithKey&quot;&gt;foldrWithKey&lt;/a&gt;&lt;/code&gt;. Each application of the operator is evaluated before using the result in the next application. This function is strict in the starting value.</source>
          <target state="translated">En). Una versi&amp;oacute;n estricta de &lt;code&gt;&lt;a href=&quot;data-intmap-strict#v:foldrWithKey&quot;&gt;foldrWithKey&lt;/a&gt;&lt;/code&gt; . Cada aplicaci&amp;oacute;n del operador se eval&amp;uacute;a antes de usar el resultado en la siguiente aplicaci&amp;oacute;n. Esta funci&amp;oacute;n es estricta en el valor inicial.</target>
        </trans-unit>
        <trans-unit id="07b3e469f7af7089b4d7e6be8526028e5208ba72" translate="yes" xml:space="preserve">
          <source>O(n). A strict version of &lt;code&gt;&lt;a href=&quot;data-intmap-strict-internal#v:foldl&quot;&gt;foldl&lt;/a&gt;&lt;/code&gt;. Each application of the operator is evaluated before using the result in the next application. This function is strict in the starting value.</source>
          <target state="translated">En). Una versi&amp;oacute;n estricta de &lt;code&gt;&lt;a href=&quot;data-intmap-strict-internal#v:foldl&quot;&gt;foldl&lt;/a&gt;&lt;/code&gt; . Cada aplicaci&amp;oacute;n del operador se eval&amp;uacute;a antes de usar el resultado en la siguiente aplicaci&amp;oacute;n. Esta funci&amp;oacute;n es estricta en el valor inicial.</target>
        </trans-unit>
        <trans-unit id="6652cb2e4158f4edcbb03a44c914d8bbdcea8def" translate="yes" xml:space="preserve">
          <source>O(n). A strict version of &lt;code&gt;&lt;a href=&quot;data-intmap-strict-internal#v:foldlWithKey&quot;&gt;foldlWithKey&lt;/a&gt;&lt;/code&gt;. Each application of the operator is evaluated before using the result in the next application. This function is strict in the starting value.</source>
          <target state="translated">En). Una versi&amp;oacute;n estricta de &lt;code&gt;&lt;a href=&quot;data-intmap-strict-internal#v:foldlWithKey&quot;&gt;foldlWithKey&lt;/a&gt;&lt;/code&gt; . Cada aplicaci&amp;oacute;n del operador se eval&amp;uacute;a antes de usar el resultado en la siguiente aplicaci&amp;oacute;n. Esta funci&amp;oacute;n es estricta en el valor inicial.</target>
        </trans-unit>
        <trans-unit id="2f2d3eee8befdc90da40cb506768f425108997cf" translate="yes" xml:space="preserve">
          <source>O(n). A strict version of &lt;code&gt;&lt;a href=&quot;data-intmap-strict-internal#v:foldr&quot;&gt;foldr&lt;/a&gt;&lt;/code&gt;. Each application of the operator is evaluated before using the result in the next application. This function is strict in the starting value.</source>
          <target state="translated">En). Una versi&amp;oacute;n estricta de &lt;code&gt;&lt;a href=&quot;data-intmap-strict-internal#v:foldr&quot;&gt;foldr&lt;/a&gt;&lt;/code&gt; . Cada aplicaci&amp;oacute;n del operador se eval&amp;uacute;a antes de usar el resultado en la siguiente aplicaci&amp;oacute;n. Esta funci&amp;oacute;n es estricta en el valor inicial.</target>
        </trans-unit>
        <trans-unit id="fbfc0b3d401de0da22c833fd914cdf87cf3ad2ad" translate="yes" xml:space="preserve">
          <source>O(n). A strict version of &lt;code&gt;&lt;a href=&quot;data-intmap-strict-internal#v:foldrWithKey&quot;&gt;foldrWithKey&lt;/a&gt;&lt;/code&gt;. Each application of the operator is evaluated before using the result in the next application. This function is strict in the starting value.</source>
          <target state="translated">En). Una versi&amp;oacute;n estricta de &lt;code&gt;&lt;a href=&quot;data-intmap-strict-internal#v:foldrWithKey&quot;&gt;foldrWithKey&lt;/a&gt;&lt;/code&gt; . Cada aplicaci&amp;oacute;n del operador se eval&amp;uacute;a antes de usar el resultado en la siguiente aplicaci&amp;oacute;n. Esta funci&amp;oacute;n es estricta en el valor inicial.</target>
        </trans-unit>
        <trans-unit id="9c9b47ca6ec14a56ef0784dd784ebaba55d0ff1f" translate="yes" xml:space="preserve">
          <source>O(n). A strict version of &lt;code&gt;&lt;a href=&quot;data-intset#v:foldl&quot;&gt;foldl&lt;/a&gt;&lt;/code&gt;. Each application of the operator is evaluated before using the result in the next application. This function is strict in the starting value.</source>
          <target state="translated">En). Una versi&amp;oacute;n estricta de &lt;code&gt;&lt;a href=&quot;data-intset#v:foldl&quot;&gt;foldl&lt;/a&gt;&lt;/code&gt; . Cada aplicaci&amp;oacute;n del operador se eval&amp;uacute;a antes de usar el resultado en la siguiente aplicaci&amp;oacute;n. Esta funci&amp;oacute;n es estricta en el valor inicial.</target>
        </trans-unit>
        <trans-unit id="ea14a4b5caf215591432bbecd9c62674000ce961" translate="yes" xml:space="preserve">
          <source>O(n). A strict version of &lt;code&gt;&lt;a href=&quot;data-intset#v:foldr&quot;&gt;foldr&lt;/a&gt;&lt;/code&gt;. Each application of the operator is evaluated before using the result in the next application. This function is strict in the starting value.</source>
          <target state="translated">En). Una versi&amp;oacute;n estricta de &lt;code&gt;&lt;a href=&quot;data-intset#v:foldr&quot;&gt;foldr&lt;/a&gt;&lt;/code&gt; . Cada aplicaci&amp;oacute;n del operador se eval&amp;uacute;a antes de usar el resultado en la siguiente aplicaci&amp;oacute;n. Esta funci&amp;oacute;n es estricta en el valor inicial.</target>
        </trans-unit>
        <trans-unit id="ad005000b108f9f31078985fef50b64dda243665" translate="yes" xml:space="preserve">
          <source>O(n). A strict version of &lt;code&gt;&lt;a href=&quot;data-intset-internal#v:foldl&quot;&gt;foldl&lt;/a&gt;&lt;/code&gt;. Each application of the operator is evaluated before using the result in the next application. This function is strict in the starting value.</source>
          <target state="translated">En). Una versi&amp;oacute;n estricta de &lt;code&gt;&lt;a href=&quot;data-intset-internal#v:foldl&quot;&gt;foldl&lt;/a&gt;&lt;/code&gt; . Cada aplicaci&amp;oacute;n del operador se eval&amp;uacute;a antes de usar el resultado en la siguiente aplicaci&amp;oacute;n. Esta funci&amp;oacute;n es estricta en el valor inicial.</target>
        </trans-unit>
        <trans-unit id="e2e08f85d242295bd6a7359e0f4e3a1dd883998e" translate="yes" xml:space="preserve">
          <source>O(n). A strict version of &lt;code&gt;&lt;a href=&quot;data-intset-internal#v:foldr&quot;&gt;foldr&lt;/a&gt;&lt;/code&gt;. Each application of the operator is evaluated before using the result in the next application. This function is strict in the starting value.</source>
          <target state="translated">En). Una versi&amp;oacute;n estricta de &lt;code&gt;&lt;a href=&quot;data-intset-internal#v:foldr&quot;&gt;foldr&lt;/a&gt;&lt;/code&gt; . Cada aplicaci&amp;oacute;n del operador se eval&amp;uacute;a antes de usar el resultado en la siguiente aplicaci&amp;oacute;n. Esta funci&amp;oacute;n es estricta en el valor inicial.</target>
        </trans-unit>
        <trans-unit id="3ede2b5f5836896aa861499f8e3bf682ba69f6ec" translate="yes" xml:space="preserve">
          <source>O(n). A strict version of &lt;code&gt;&lt;a href=&quot;data-map-lazy#v:foldl&quot;&gt;foldl&lt;/a&gt;&lt;/code&gt;. Each application of the operator is evaluated before using the result in the next application. This function is strict in the starting value.</source>
          <target state="translated">En). Una versi&amp;oacute;n estricta de &lt;code&gt;&lt;a href=&quot;data-map-lazy#v:foldl&quot;&gt;foldl&lt;/a&gt;&lt;/code&gt; . Cada aplicaci&amp;oacute;n del operador se eval&amp;uacute;a antes de usar el resultado en la siguiente aplicaci&amp;oacute;n. Esta funci&amp;oacute;n es estricta en el valor inicial.</target>
        </trans-unit>
        <trans-unit id="83a96d043e8c0058beb4beed6a6fc723903d87e6" translate="yes" xml:space="preserve">
          <source>O(n). A strict version of &lt;code&gt;&lt;a href=&quot;data-map-lazy#v:foldlWithKey&quot;&gt;foldlWithKey&lt;/a&gt;&lt;/code&gt;. Each application of the operator is evaluated before using the result in the next application. This function is strict in the starting value.</source>
          <target state="translated">En). Una versi&amp;oacute;n estricta de &lt;code&gt;&lt;a href=&quot;data-map-lazy#v:foldlWithKey&quot;&gt;foldlWithKey&lt;/a&gt;&lt;/code&gt; . Cada aplicaci&amp;oacute;n del operador se eval&amp;uacute;a antes de usar el resultado en la siguiente aplicaci&amp;oacute;n. Esta funci&amp;oacute;n es estricta en el valor inicial.</target>
        </trans-unit>
        <trans-unit id="9dac0f730b434a42ae9957e2d7025be0a3627a87" translate="yes" xml:space="preserve">
          <source>O(n). A strict version of &lt;code&gt;&lt;a href=&quot;data-map-lazy#v:foldr&quot;&gt;foldr&lt;/a&gt;&lt;/code&gt;. Each application of the operator is evaluated before using the result in the next application. This function is strict in the starting value.</source>
          <target state="translated">En). Una versi&amp;oacute;n estricta de &lt;code&gt;&lt;a href=&quot;data-map-lazy#v:foldr&quot;&gt;foldr&lt;/a&gt;&lt;/code&gt; . Cada aplicaci&amp;oacute;n del operador se eval&amp;uacute;a antes de usar el resultado en la siguiente aplicaci&amp;oacute;n. Esta funci&amp;oacute;n es estricta en el valor inicial.</target>
        </trans-unit>
        <trans-unit id="ae0949840a8f862d0e211f4d923fc48b92807906" translate="yes" xml:space="preserve">
          <source>O(n). A strict version of &lt;code&gt;&lt;a href=&quot;data-map-lazy#v:foldrWithKey&quot;&gt;foldrWithKey&lt;/a&gt;&lt;/code&gt;. Each application of the operator is evaluated before using the result in the next application. This function is strict in the starting value.</source>
          <target state="translated">En). Una versi&amp;oacute;n estricta de &lt;code&gt;&lt;a href=&quot;data-map-lazy#v:foldrWithKey&quot;&gt;foldrWithKey&lt;/a&gt;&lt;/code&gt; . Cada aplicaci&amp;oacute;n del operador se eval&amp;uacute;a antes de usar el resultado en la siguiente aplicaci&amp;oacute;n. Esta funci&amp;oacute;n es estricta en el valor inicial.</target>
        </trans-unit>
        <trans-unit id="f28ab3bbfb1340b66378ee808be9d2a2987e7a8f" translate="yes" xml:space="preserve">
          <source>O(n). A strict version of &lt;code&gt;&lt;a href=&quot;data-map-strict#v:foldl&quot;&gt;foldl&lt;/a&gt;&lt;/code&gt;. Each application of the operator is evaluated before using the result in the next application. This function is strict in the starting value.</source>
          <target state="translated">En). Una versi&amp;oacute;n estricta de &lt;code&gt;&lt;a href=&quot;data-map-strict#v:foldl&quot;&gt;foldl&lt;/a&gt;&lt;/code&gt; . Cada aplicaci&amp;oacute;n del operador se eval&amp;uacute;a antes de usar el resultado en la siguiente aplicaci&amp;oacute;n. Esta funci&amp;oacute;n es estricta en el valor inicial.</target>
        </trans-unit>
        <trans-unit id="8b0acf8d5f562e1eaa30615815852e4b38d994a5" translate="yes" xml:space="preserve">
          <source>O(n). A strict version of &lt;code&gt;&lt;a href=&quot;data-map-strict#v:foldlWithKey&quot;&gt;foldlWithKey&lt;/a&gt;&lt;/code&gt;. Each application of the operator is evaluated before using the result in the next application. This function is strict in the starting value.</source>
          <target state="translated">En). Una versi&amp;oacute;n estricta de &lt;code&gt;&lt;a href=&quot;data-map-strict#v:foldlWithKey&quot;&gt;foldlWithKey&lt;/a&gt;&lt;/code&gt; . Cada aplicaci&amp;oacute;n del operador se eval&amp;uacute;a antes de usar el resultado en la siguiente aplicaci&amp;oacute;n. Esta funci&amp;oacute;n es estricta en el valor inicial.</target>
        </trans-unit>
        <trans-unit id="72f18a0b545c4ad6247523768dde2a7ce47f0810" translate="yes" xml:space="preserve">
          <source>O(n). A strict version of &lt;code&gt;&lt;a href=&quot;data-map-strict#v:foldr&quot;&gt;foldr&lt;/a&gt;&lt;/code&gt;. Each application of the operator is evaluated before using the result in the next application. This function is strict in the starting value.</source>
          <target state="translated">En). Una versi&amp;oacute;n estricta de &lt;code&gt;&lt;a href=&quot;data-map-strict#v:foldr&quot;&gt;foldr&lt;/a&gt;&lt;/code&gt; . Cada aplicaci&amp;oacute;n del operador se eval&amp;uacute;a antes de usar el resultado en la siguiente aplicaci&amp;oacute;n. Esta funci&amp;oacute;n es estricta en el valor inicial.</target>
        </trans-unit>
        <trans-unit id="b3f861bd5e903de24fdec1c75612861903c49750" translate="yes" xml:space="preserve">
          <source>O(n). A strict version of &lt;code&gt;&lt;a href=&quot;data-map-strict#v:foldrWithKey&quot;&gt;foldrWithKey&lt;/a&gt;&lt;/code&gt;. Each application of the operator is evaluated before using the result in the next application. This function is strict in the starting value.</source>
          <target state="translated">En). Una versi&amp;oacute;n estricta de &lt;code&gt;&lt;a href=&quot;data-map-strict#v:foldrWithKey&quot;&gt;foldrWithKey&lt;/a&gt;&lt;/code&gt; . Cada aplicaci&amp;oacute;n del operador se eval&amp;uacute;a antes de usar el resultado en la siguiente aplicaci&amp;oacute;n. Esta funci&amp;oacute;n es estricta en el valor inicial.</target>
        </trans-unit>
        <trans-unit id="cc72c076578869cc3de5b3d0c434dfa36f224709" translate="yes" xml:space="preserve">
          <source>O(n). A strict version of &lt;code&gt;&lt;a href=&quot;data-set#v:foldl&quot;&gt;foldl&lt;/a&gt;&lt;/code&gt;. Each application of the operator is evaluated before using the result in the next application. This function is strict in the starting value.</source>
          <target state="translated">En). Una versi&amp;oacute;n estricta de &lt;code&gt;&lt;a href=&quot;data-set#v:foldl&quot;&gt;foldl&lt;/a&gt;&lt;/code&gt; . Cada aplicaci&amp;oacute;n del operador se eval&amp;uacute;a antes de usar el resultado en la siguiente aplicaci&amp;oacute;n. Esta funci&amp;oacute;n es estricta en el valor inicial.</target>
        </trans-unit>
        <trans-unit id="835c9e3e5e07db560062a8c80415943a883c2334" translate="yes" xml:space="preserve">
          <source>O(n). A strict version of &lt;code&gt;&lt;a href=&quot;data-set#v:foldr&quot;&gt;foldr&lt;/a&gt;&lt;/code&gt;. Each application of the operator is evaluated before using the result in the next application. This function is strict in the starting value.</source>
          <target state="translated">En). Una versi&amp;oacute;n estricta de &lt;code&gt;&lt;a href=&quot;data-set#v:foldr&quot;&gt;foldr&lt;/a&gt;&lt;/code&gt; . Cada aplicaci&amp;oacute;n del operador se eval&amp;uacute;a antes de usar el resultado en la siguiente aplicaci&amp;oacute;n. Esta funci&amp;oacute;n es estricta en el valor inicial.</target>
        </trans-unit>
        <trans-unit id="063cc731f27cbebf293ec9eacfc6553e106ac3a1" translate="yes" xml:space="preserve">
          <source>O(n). A strictly accumulating version of &lt;code&gt;&lt;a href=&quot;data-list#v:scanl&quot;&gt;scanl&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">En). Una versi&amp;oacute;n estrictamente acumulativa de &lt;code&gt;&lt;a href=&quot;data-list#v:scanl&quot;&gt;scanl&lt;/a&gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="dc1cd9ce113d0d3907dd9da1930ec270f5945076" translate="yes" xml:space="preserve">
          <source>O(n). A strictly accumulating version of &lt;code&gt;&lt;a href=&quot;ghc-list#v:scanl&quot;&gt;scanl&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">En). Una versi&amp;oacute;n estrictamente acumulativa de &lt;code&gt;&lt;a href=&quot;ghc-list#v:scanl&quot;&gt;scanl&lt;/a&gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="85639e1d597282db08f70e9b2cb500f671d35a66" translate="yes" xml:space="preserve">
          <source>O(n). A strictly accumulating version of &lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:scanl&quot;&gt;scanl&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">En). Una versi&amp;oacute;n estrictamente acumulativa de &lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:scanl&quot;&gt;scanl&lt;/a&gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="33971ce6acba8402c3758c76737e1c0b89d6c430" translate="yes" xml:space="preserve">
          <source>O(n). An alias for &lt;code&gt;&lt;a href=&quot;data-intmap-lazy#v:toAscList&quot;&gt;toAscList&lt;/a&gt;&lt;/code&gt;. Returns all key/value pairs in the map in ascending key order. Subject to list fusion.</source>
          <target state="translated">En). Un alias para &lt;code&gt;&lt;a href=&quot;data-intmap-lazy#v:toAscList&quot;&gt;toAscList&lt;/a&gt;&lt;/code&gt; . Devuelve todos los pares clave / valor en el mapa en orden de clave ascendente. Sujeto a fusi&amp;oacute;n de listas.</target>
        </trans-unit>
        <trans-unit id="dfcf33bd47f25122dc59dfe1518c78eec0627929" translate="yes" xml:space="preserve">
          <source>O(n). An alias for &lt;code&gt;&lt;a href=&quot;data-intmap-strict#v:toAscList&quot;&gt;toAscList&lt;/a&gt;&lt;/code&gt;. Returns all key/value pairs in the map in ascending key order. Subject to list fusion.</source>
          <target state="translated">En). Un alias para &lt;code&gt;&lt;a href=&quot;data-intmap-strict#v:toAscList&quot;&gt;toAscList&lt;/a&gt;&lt;/code&gt; . Devuelve todos los pares clave / valor en el mapa en orden de clave ascendente. Sujeto a fusi&amp;oacute;n de listas.</target>
        </trans-unit>
        <trans-unit id="938ef8b59e329c83f3be432fd7651512e7c3d413" translate="yes" xml:space="preserve">
          <source>O(n). An alias for &lt;code&gt;&lt;a href=&quot;data-intmap-strict-internal#v:toAscList&quot;&gt;toAscList&lt;/a&gt;&lt;/code&gt;. Returns all key/value pairs in the map in ascending key order. Subject to list fusion.</source>
          <target state="translated">En). Un alias para &lt;code&gt;&lt;a href=&quot;data-intmap-strict-internal#v:toAscList&quot;&gt;toAscList&lt;/a&gt;&lt;/code&gt; . Devuelve todos los pares clave / valor en el mapa en orden de clave ascendente. Sujeto a fusi&amp;oacute;n de listas.</target>
        </trans-unit>
        <trans-unit id="1dfa0cbbb13da3d38e8ee7d534675b7cc31c619a" translate="yes" xml:space="preserve">
          <source>O(n). An alias for &lt;code&gt;&lt;a href=&quot;data-map-lazy#v:toAscList&quot;&gt;toAscList&lt;/a&gt;&lt;/code&gt;. Return all key/value pairs in the map in ascending key order. Subject to list fusion.</source>
          <target state="translated">En). Un alias para &lt;code&gt;&lt;a href=&quot;data-map-lazy#v:toAscList&quot;&gt;toAscList&lt;/a&gt;&lt;/code&gt; . Devuelve todos los pares clave / valor del mapa en orden de clave ascendente. Sujeto a fusi&amp;oacute;n de listas.</target>
        </trans-unit>
        <trans-unit id="c1f6c65197a208e02e5f6e1c3db3c69651d3f940" translate="yes" xml:space="preserve">
          <source>O(n). An alias for &lt;code&gt;&lt;a href=&quot;data-map-strict#v:toAscList&quot;&gt;toAscList&lt;/a&gt;&lt;/code&gt;. Return all key/value pairs in the map in ascending key order. Subject to list fusion.</source>
          <target state="translated">En). Un alias para &lt;code&gt;&lt;a href=&quot;data-map-strict#v:toAscList&quot;&gt;toAscList&lt;/a&gt;&lt;/code&gt; . Devuelve todos los pares clave / valor del mapa en orden de clave ascendente. Sujeto a fusi&amp;oacute;n de listas.</target>
        </trans-unit>
        <trans-unit id="1916b10ea722263e2dfc142ca33d3e33943e58f3" translate="yes" xml:space="preserve">
          <source>O(n). An alias of &lt;code&gt;&lt;a href=&quot;data-intset#v:toAscList&quot;&gt;toAscList&lt;/a&gt;&lt;/code&gt;. The elements of a set in ascending order. Subject to list fusion.</source>
          <target state="translated">En). Un alias de &lt;code&gt;&lt;a href=&quot;data-intset#v:toAscList&quot;&gt;toAscList&lt;/a&gt;&lt;/code&gt; . Los elementos de un conjunto en orden ascendente. Sujeto a fusi&amp;oacute;n de listas.</target>
        </trans-unit>
        <trans-unit id="c62ebbbdd6d3cb62f75691f5c5c1fd1fdc7d21f1" translate="yes" xml:space="preserve">
          <source>O(n). An alias of &lt;code&gt;&lt;a href=&quot;data-intset-internal#v:toAscList&quot;&gt;toAscList&lt;/a&gt;&lt;/code&gt;. The elements of a set in ascending order. Subject to list fusion.</source>
          <target state="translated">En). Un alias de &lt;code&gt;&lt;a href=&quot;data-intset-internal#v:toAscList&quot;&gt;toAscList&lt;/a&gt;&lt;/code&gt; . Los elementos de un conjunto en orden ascendente. Sujeto a fusi&amp;oacute;n de listas.</target>
        </trans-unit>
        <trans-unit id="1986568dddd744d5fe0785ebc3f7919cddca61f4" translate="yes" xml:space="preserve">
          <source>O(n). An alias of &lt;code&gt;&lt;a href=&quot;data-set#v:toAscList&quot;&gt;toAscList&lt;/a&gt;&lt;/code&gt;. The elements of a set in ascending order. Subject to list fusion.</source>
          <target state="translated">En). Un alias de &lt;code&gt;&lt;a href=&quot;data-set#v:toAscList&quot;&gt;toAscList&lt;/a&gt;&lt;/code&gt; . Los elementos de un conjunto en orden ascendente. Sujeto a fusi&amp;oacute;n de listas.</target>
        </trans-unit>
        <trans-unit id="3daacd528be89274a916e931b2d01da14ee9cdf7" translate="yes" xml:space="preserve">
          <source>O(n). Build a map from a descending list in linear time with a combining function for equal keys. &lt;em&gt;The precondition (input list is descending) is not checked.&lt;/em&gt;</source>
          <target state="translated">En). Cree un mapa a partir de una lista descendente en tiempo lineal con una funci&amp;oacute;n de combinaci&amp;oacute;n para claves iguales. &lt;em&gt;La condici&amp;oacute;n previa (la lista de entrada es descendente) no est&amp;aacute; marcada.&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="6daf271b34fd0ee22a7b221ce97aae9f534f7a50" translate="yes" xml:space="preserve">
          <source>O(n). Build a map from a descending list in linear time. &lt;em&gt;The precondition (input list is descending) is not checked.&lt;/em&gt;</source>
          <target state="translated">En). Cree un mapa a partir de una lista descendente en tiempo lineal. &lt;em&gt;La condici&amp;oacute;n previa (la lista de entrada es descendente) no est&amp;aacute; marcada.&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="729cb7b9c6526cbf116498bbd1a02e7f2fd9de41" translate="yes" xml:space="preserve">
          <source>O(n). Build a map from a descending list of distinct elements in linear time. &lt;em&gt;The precondition is not checked.&lt;/em&gt;</source>
          <target state="translated">En). Cree un mapa a partir de una lista descendente de elementos distintos en tiempo lineal. &lt;em&gt;No se comprueba la condici&amp;oacute;n previa.&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="04829e28a59536fa17ba4dd57fe84f7b01bbc53b" translate="yes" xml:space="preserve">
          <source>O(n). Build a map from a list of key/value pairs where the keys are in ascending order and all distinct. &lt;em&gt;The precondition (input list is strictly ascending) is not checked.&lt;/em&gt;</source>
          <target state="translated">En). Cree un mapa a partir de una lista de pares clave / valor donde las claves est&amp;aacute;n en orden ascendente y todas son distintas. &lt;em&gt;La condici&amp;oacute;n previa (la lista de entrada es estrictamente ascendente) no est&amp;aacute; marcada.&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="cc398f65e3d84504143cfc77896ba699dbca8682" translate="yes" xml:space="preserve">
          <source>O(n). Build a map from a list of key/value pairs where the keys are in ascending order, with a combining function on equal keys. &lt;em&gt;The precondition (input list is ascending) is not checked.&lt;/em&gt;</source>
          <target state="translated">En). Cree un mapa a partir de una lista de pares clave / valor donde las claves est&amp;aacute;n en orden ascendente, con una funci&amp;oacute;n de combinaci&amp;oacute;n en claves iguales. &lt;em&gt;No se comprueba la condici&amp;oacute;n previa (la lista de entrada es ascendente).&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="a000fae0b6e524a14b40c7d6b60b7b128b6dc6ca" translate="yes" xml:space="preserve">
          <source>O(n). Build a map from a list of key/value pairs where the keys are in ascending order.</source>
          <target state="translated">O(n).Construye un mapa a partir de una lista de pares clave/valor donde las claves estén en orden ascendente.</target>
        </trans-unit>
        <trans-unit id="9400af3afb5f52d7933a8fd94fe48f15d665625c" translate="yes" xml:space="preserve">
          <source>O(n). Build a map from a set of keys and a function which for each key computes its value.</source>
          <target state="translated">O(n).Construye un mapa a partir de un conjunto de teclas y una función que para cada tecla calcula su valor.</target>
        </trans-unit>
        <trans-unit id="0d846e7d484766b6455d3d20fbac1d15237cbd78" translate="yes" xml:space="preserve">
          <source>O(n). Build a map from an ascending list in linear time with a combining function for equal keys. &lt;em&gt;The precondition (input list is ascending) is not checked.&lt;/em&gt;</source>
          <target state="translated">En). Cree un mapa a partir de una lista ascendente en tiempo lineal con una funci&amp;oacute;n de combinaci&amp;oacute;n para claves iguales. &lt;em&gt;No se comprueba la condici&amp;oacute;n previa (la lista de entrada es ascendente).&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="382dbb9f6886862ebe682148e2a1304e6e911ce0" translate="yes" xml:space="preserve">
          <source>O(n). Build a map from an ascending list in linear time. &lt;em&gt;The precondition (input list is ascending) is not checked.&lt;/em&gt;</source>
          <target state="translated">En). Construya un mapa a partir de una lista ascendente en tiempo lineal. &lt;em&gt;No se comprueba la condici&amp;oacute;n previa (la lista de entrada es ascendente).&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="a9a9573ff4e725a34e321f32ef83a67f8acf6206" translate="yes" xml:space="preserve">
          <source>O(n). Build a map from an ascending list of distinct elements in linear time. &lt;em&gt;The precondition is not checked.&lt;/em&gt;</source>
          <target state="translated">En). Construya un mapa a partir de una lista ascendente de elementos distintos en tiempo lineal. &lt;em&gt;No se comprueba la condici&amp;oacute;n previa.&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="dadd9ac678a4613069a434f429dc49502d3082e3" translate="yes" xml:space="preserve">
          <source>O(n). Build a set from a descending list in linear time. &lt;em&gt;The precondition (input list is descending) is not checked.&lt;/em&gt;</source>
          <target state="translated">En). Construye un conjunto a partir de una lista descendente en tiempo lineal. &lt;em&gt;La condici&amp;oacute;n previa (la lista de entrada es descendente) no est&amp;aacute; marcada.&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="66e1fa93cd42026eaa1da1a002e30a7bf60afcc2" translate="yes" xml:space="preserve">
          <source>O(n). Build a set from a descending list of distinct elements in linear time. &lt;em&gt;The precondition (input list is strictly descending) is not checked.&lt;/em&gt;</source>
          <target state="translated">En). Cree un conjunto a partir de una lista descendente de elementos distintos en tiempo lineal. &lt;em&gt;La condici&amp;oacute;n previa (la lista de entrada es estrictamente descendente) no est&amp;aacute; marcada.&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="7eee38f55e80530b1e9b1c715fe02e0a1e408a76" translate="yes" xml:space="preserve">
          <source>O(n). Build a set from an ascending list in linear time. &lt;em&gt;The precondition (input list is ascending) is not checked.&lt;/em&gt;</source>
          <target state="translated">En). Construye un conjunto a partir de una lista ascendente en tiempo lineal. &lt;em&gt;No se comprueba la condici&amp;oacute;n previa (la lista de entrada es ascendente).&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="6809d6e2d235a847eb2c098caad8a6faa4a558da" translate="yes" xml:space="preserve">
          <source>O(n). Build a set from an ascending list of distinct elements in linear time. &lt;em&gt;The precondition (input list is strictly ascending) is not checked.&lt;/em&gt;</source>
          <target state="translated">En). Cree un conjunto a partir de una lista ascendente de elementos distintos en tiempo lineal. &lt;em&gt;La condici&amp;oacute;n previa (la lista de entrada es estrictamente ascendente) no est&amp;aacute; marcada.&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="e9662193240858bcb94da0313cc5b5f335754ab0" translate="yes" xml:space="preserve">
          <source>O(n). Build a set from an ascending list of distinct elements. &lt;em&gt;The precondition (input list is strictly ascending) is not checked.&lt;/em&gt;</source>
          <target state="translated">En). Construye un conjunto a partir de una lista ascendente de elementos distintos. &lt;em&gt;La condici&amp;oacute;n previa (la lista de entrada es estrictamente ascendente) no est&amp;aacute; marcada.&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="af6905fb7dd9332dae81595f53ed13e17f3a7b3e" translate="yes" xml:space="preserve">
          <source>O(n). Build a set from an ascending list of elements. &lt;em&gt;The precondition (input list is ascending) is not checked.&lt;/em&gt;</source>
          <target state="translated">En). Construye un conjunto a partir de una lista ascendente de elementos. &lt;em&gt;No se comprueba la condici&amp;oacute;n previa (la lista de entrada es ascendente).&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="e0b8aa48e50c217480a7bac3595337f5cd713365" translate="yes" xml:space="preserve">
          <source>O(n). Cardinality of the set.</source>
          <target state="translated">O(n).Cardinalidad del conjunto.</target>
        </trans-unit>
        <trans-unit id="87fc609c058362b77fb22012d92969714c9de300" translate="yes" xml:space="preserve">
          <source>O(n). Construct a new &lt;code&gt;ByteString&lt;/code&gt; from a &lt;code&gt;CString&lt;/code&gt;. The resulting &lt;code&gt;ByteString&lt;/code&gt; is an immutable copy of the original &lt;code&gt;CString&lt;/code&gt;, and is managed on the Haskell heap. The original &lt;code&gt;CString&lt;/code&gt; must be null terminated.</source>
          <target state="translated">En). Construya un nuevo &lt;code&gt;ByteString&lt;/code&gt; a partir de un &lt;code&gt;CString&lt;/code&gt; . El &lt;code&gt;ByteString&lt;/code&gt; resultante es una copia inmutable del &lt;code&gt;CString&lt;/code&gt; original y se administra en el mont&amp;oacute;n de Haskell. El &lt;code&gt;CString&lt;/code&gt; original debe tener una terminaci&amp;oacute;n nula.</target>
        </trans-unit>
        <trans-unit id="3f96c04218005ba3f372a9e0681a6f7482a0605c" translate="yes" xml:space="preserve">
          <source>O(n). Construct a new &lt;code&gt;ByteString&lt;/code&gt; from a &lt;code&gt;CStringLen&lt;/code&gt;. The resulting &lt;code&gt;ByteString&lt;/code&gt; is an immutable copy of the original &lt;code&gt;CStringLen&lt;/code&gt;. The &lt;code&gt;ByteString&lt;/code&gt; is a normal Haskell value and will be managed on the Haskell heap.</source>
          <target state="translated">En). Construya un nuevo &lt;code&gt;ByteString&lt;/code&gt; a partir de un &lt;code&gt;CStringLen&lt;/code&gt; . El &lt;code&gt;ByteString&lt;/code&gt; resultante es una copia inmutable del &lt;code&gt;CStringLen&lt;/code&gt; original . El &lt;code&gt;ByteString&lt;/code&gt; es un valor normal Haskell y se administrar&amp;aacute; en el mont&amp;oacute;n de Haskell.</target>
        </trans-unit>
        <trans-unit id="3af0d34eddae2fa890c99e6e7750e36f7d028e14" translate="yes" xml:space="preserve">
          <source>O(n). Construct a new &lt;code&gt;ShortByteString&lt;/code&gt; from a &lt;code&gt;CString&lt;/code&gt;. The resulting &lt;code&gt;ShortByteString&lt;/code&gt; is an immutable copy of the original &lt;code&gt;CString&lt;/code&gt;, and is managed on the Haskell heap. The original &lt;code&gt;CString&lt;/code&gt; must be null terminated.</source>
          <target state="translated">En). Construya un nuevo &lt;code&gt;ShortByteString&lt;/code&gt; a partir de un &lt;code&gt;CString&lt;/code&gt; . El &lt;code&gt;ShortByteString&lt;/code&gt; resultante es una copia inmutable del &lt;code&gt;CString&lt;/code&gt; original y se administra en el mont&amp;oacute;n de Haskell. El &lt;code&gt;CString&lt;/code&gt; original debe tener una terminaci&amp;oacute;n nula.</target>
        </trans-unit>
        <trans-unit id="b455d50c1fe35d365821ac00e8e7e524a5007e9b" translate="yes" xml:space="preserve">
          <source>O(n). Construct a new &lt;code&gt;ShortByteString&lt;/code&gt; from a &lt;code&gt;CStringLen&lt;/code&gt;. The resulting &lt;code&gt;ShortByteString&lt;/code&gt; is an immutable copy of the original &lt;code&gt;CStringLen&lt;/code&gt;. The &lt;code&gt;ShortByteString&lt;/code&gt; is a normal Haskell value and will be managed on the Haskell heap.</source>
          <target state="translated">En). Construya un nuevo &lt;code&gt;ShortByteString&lt;/code&gt; a partir de un &lt;code&gt;CStringLen&lt;/code&gt; . El &lt;code&gt;ShortByteString&lt;/code&gt; resultante es una copia inmutable del &lt;code&gt;CStringLen&lt;/code&gt; original . El &lt;code&gt;ShortByteString&lt;/code&gt; es un valor normal Haskell y se administrar&amp;aacute; en el mont&amp;oacute;n de Haskell.</target>
        </trans-unit>
        <trans-unit id="d605df03958840eb26896869cbad19609feb0e48" translate="yes" xml:space="preserve">
          <source>O(n). Convert a &lt;code&gt;&lt;a href=&quot;data-bytestring#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt; into a &lt;code&gt;&lt;a href=&quot;data-bytestring-short#t:ShortByteString&quot;&gt;ShortByteString&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">En). Convierta un &lt;code&gt;&lt;a href=&quot;data-bytestring#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt; en un &lt;code&gt;&lt;a href=&quot;data-bytestring-short#t:ShortByteString&quot;&gt;ShortByteString&lt;/a&gt;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="2c77d0c3f6baffb8d25d9ff396d4687d8b4bc2f9" translate="yes" xml:space="preserve">
          <source>O(n). Convert a &lt;code&gt;&lt;a href=&quot;data-bytestring#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt; into a &lt;code&gt;&lt;a href=&quot;data-bytestring-short-internal#t:ShortByteString&quot;&gt;ShortByteString&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">En). Convierta un &lt;code&gt;&lt;a href=&quot;data-bytestring#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt; en un &lt;code&gt;&lt;a href=&quot;data-bytestring-short-internal#t:ShortByteString&quot;&gt;ShortByteString&lt;/a&gt;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="ad5dad9654275617c6c664c1a00e8b2eaaf27898" translate="yes" xml:space="preserve">
          <source>O(n). Convert a &lt;code&gt;&lt;a href=&quot;data-bytestring-short#t:ShortByteString&quot;&gt;ShortByteString&lt;/a&gt;&lt;/code&gt; into a &lt;code&gt;&lt;a href=&quot;data-bytestring#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">En). Convierta un &lt;code&gt;&lt;a href=&quot;data-bytestring-short#t:ShortByteString&quot;&gt;ShortByteString&lt;/a&gt;&lt;/code&gt; en un &lt;code&gt;&lt;a href=&quot;data-bytestring#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="104b0cdf481fb213c0fbe1b1362ab69b9f4405ea" translate="yes" xml:space="preserve">
          <source>O(n). Convert a &lt;code&gt;&lt;a href=&quot;data-bytestring-short#t:ShortByteString&quot;&gt;ShortByteString&lt;/a&gt;&lt;/code&gt; into a list.</source>
          <target state="translated">En). Convierta un &lt;code&gt;&lt;a href=&quot;data-bytestring-short#t:ShortByteString&quot;&gt;ShortByteString&lt;/a&gt;&lt;/code&gt; en una lista.</target>
        </trans-unit>
        <trans-unit id="40d1304b8827895cdf1bb4f59d8bc130273aaf23" translate="yes" xml:space="preserve">
          <source>O(n). Convert a &lt;code&gt;&lt;a href=&quot;data-bytestring-short-internal#t:ShortByteString&quot;&gt;ShortByteString&lt;/a&gt;&lt;/code&gt; into a &lt;code&gt;&lt;a href=&quot;data-bytestring#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">En). Convierta un &lt;code&gt;&lt;a href=&quot;data-bytestring-short-internal#t:ShortByteString&quot;&gt;ShortByteString&lt;/a&gt;&lt;/code&gt; en un &lt;code&gt;&lt;a href=&quot;data-bytestring#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="297088dbf1e8c09077781d38164fb76d68843a39" translate="yes" xml:space="preserve">
          <source>O(n). Convert a &lt;code&gt;&lt;a href=&quot;data-bytestring-short-internal#t:ShortByteString&quot;&gt;ShortByteString&lt;/a&gt;&lt;/code&gt; into a list.</source>
          <target state="translated">En). Convierta un &lt;code&gt;&lt;a href=&quot;data-bytestring-short-internal#t:ShortByteString&quot;&gt;ShortByteString&lt;/a&gt;&lt;/code&gt; en una lista.</target>
        </trans-unit>
        <trans-unit id="eab1e87a8573b28450f0853eebb702a97f8d52af" translate="yes" xml:space="preserve">
          <source>O(n). Convert a list into a &lt;code&gt;&lt;a href=&quot;data-bytestring-short#t:ShortByteString&quot;&gt;ShortByteString&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">En). Convertir una lista en &lt;code&gt;&lt;a href=&quot;data-bytestring-short#t:ShortByteString&quot;&gt;ShortByteString&lt;/a&gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="fd464cb518575f88abc9f28748496003ac2f39b9" translate="yes" xml:space="preserve">
          <source>O(n). Convert a list into a &lt;code&gt;&lt;a href=&quot;data-bytestring-short-internal#t:ShortByteString&quot;&gt;ShortByteString&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">En). Convertir una lista en un &lt;code&gt;&lt;a href=&quot;data-bytestring-short-internal#t:ShortByteString&quot;&gt;ShortByteString&lt;/a&gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="54bf324121cf04e8bf75f5d03af99d55eba2edb1" translate="yes" xml:space="preserve">
          <source>O(n). Convert the map to a list of key/value pairs where the keys are in ascending order. Subject to list fusion.</source>
          <target state="translated">O(n).Convierte el mapa en una lista de pares clave/valor donde las claves están en orden ascendente.Sujeto a la fusión de la lista.</target>
        </trans-unit>
        <trans-unit id="b37e9319ddf52e30abb6270d730dd637ccb1a1c1" translate="yes" xml:space="preserve">
          <source>O(n). Convert the map to a list of key/value pairs where the keys are in descending order. Subject to list fusion.</source>
          <target state="translated">O(n).Convierte el mapa en una lista de pares clave/valor donde las claves están en orden descendente.Sujeto a la fusión de la lista.</target>
        </trans-unit>
        <trans-unit id="1b9592ab7e554056e70625d0f6a1d9a4dbb98aad" translate="yes" xml:space="preserve">
          <source>O(n). Convert the map to a list of key/value pairs. Subject to list fusion.</source>
          <target state="translated">O(n).Convierte el mapa en una lista de pares clave/valor.Sujeto a la fusión de la lista.</target>
        </trans-unit>
        <trans-unit id="1f55e622796c2112ef81903eed79711372b62b24" translate="yes" xml:space="preserve">
          <source>O(n). Convert the set to a descending list of elements. Subject to list fusion.</source>
          <target state="translated">O(n).Convierte el conjunto en una lista descendente de elementos.Sujeto a la fusión de la lista.</target>
        </trans-unit>
        <trans-unit id="d8408ba5d185cec2589d3b3222cb3b94b09b3b72" translate="yes" xml:space="preserve">
          <source>O(n). Convert the set to a list of elements. Subject to list fusion.</source>
          <target state="translated">O(n).Convierte el conjunto en una lista de elementos.Sujeto a la fusión de la lista.</target>
        </trans-unit>
        <trans-unit id="55634c24f206f4681ac932e849c1bd513d33a8be" translate="yes" xml:space="preserve">
          <source>O(n). Convert the set to an ascending list of elements. Subject to list fusion.</source>
          <target state="translated">O(n).Convierte el conjunto en una lista ascendente de elementos.Sujeto a la fusión de la lista.</target>
        </trans-unit>
        <trans-unit id="2a0fbedac005cda8da057c4c7632c26766051d62" translate="yes" xml:space="preserve">
          <source>O(n). Extract a lazy &lt;code&gt;Text&lt;/code&gt; from a &lt;code&gt;Builder&lt;/code&gt; with a default buffer size. The construction work takes place if and when the relevant part of the lazy &lt;code&gt;Text&lt;/code&gt; is demanded.</source>
          <target state="translated">En). Extraiga un &lt;code&gt;Text&lt;/code&gt; diferido de un &lt;code&gt;Builder&lt;/code&gt; con un tama&amp;ntilde;o de b&amp;uacute;fer predeterminado. El trabajo de construcci&amp;oacute;n se lleva a cabo siempre y cuando se requiera la parte relevante del &lt;code&gt;Text&lt;/code&gt; o perezoso .</target>
        </trans-unit>
        <trans-unit id="f8f08df5754e3c864e5e5d2f3623efd7721b6fc9" translate="yes" xml:space="preserve">
          <source>O(n). Extract a lazy &lt;code&gt;Text&lt;/code&gt; from a &lt;code&gt;Builder&lt;/code&gt;, using the given size for the initial buffer. The construction work takes place if and when the relevant part of the lazy &lt;code&gt;Text&lt;/code&gt; is demanded.</source>
          <target state="translated">En). Extraiga un &lt;code&gt;Text&lt;/code&gt; diferido de un &lt;code&gt;Builder&lt;/code&gt; , utilizando el tama&amp;ntilde;o dado para el b&amp;uacute;fer inicial. El trabajo de construcci&amp;oacute;n se lleva a cabo siempre y cuando se requiera la parte relevante del &lt;code&gt;Text&lt;/code&gt; o perezoso .</target>
        </trans-unit>
        <trans-unit id="6fe7d65969a116c9d2fcb0181118e2c835f1e1f3" translate="yes" xml:space="preserve">
          <source>O(n). Extract the last element of a list, which must be finite and non-empty.</source>
          <target state="translated">O(n).Extraer el último elemento de una lista,que debe ser finita y no vacía.</target>
        </trans-unit>
        <trans-unit id="7241dc2b686aac0cb246206f5761f1dfbe048ba8" translate="yes" xml:space="preserve">
          <source>O(n). Filter all elements that satisfy some predicate.</source>
          <target state="translated">O(n).Filtra todos los elementos que satisfacen algún predicado.</target>
        </trans-unit>
        <trans-unit id="3bc73542b8cc3c264a30bd7ffccf5378a38c6038" translate="yes" xml:space="preserve">
          <source>O(n). Filter all elements that satisfy the predicate.</source>
          <target state="translated">O(n).Filtra todos los elementos que satisfacen el predicado.</target>
        </trans-unit>
        <trans-unit id="0712ff9b4298830ef4a9f7a2fab8b0341da27545" translate="yes" xml:space="preserve">
          <source>O(n). Filter all keys/values that satisfy some predicate.</source>
          <target state="translated">O(n).Filtra todas las claves/valores que satisfacen algún predicado.</target>
        </trans-unit>
        <trans-unit id="9c5dcab4c81d1a0bda0edfeecc5f7bc0e4646864" translate="yes" xml:space="preserve">
          <source>O(n). Filter all keys/values that satisfy the predicate.</source>
          <target state="translated">O(n).Filtra todas las claves/valores que satisfacen el predicado.</target>
        </trans-unit>
        <trans-unit id="faf50780dfd316b2b37e87515f049261caf3492b" translate="yes" xml:space="preserve">
          <source>O(n). Filter all values that satisfy some predicate.</source>
          <target state="translated">O(n).Filtra todos los valores que satisfacen algún predicado.</target>
        </trans-unit>
        <trans-unit id="5be317c4605cb1f4dd8d41a02e5f76bff0ac97fb" translate="yes" xml:space="preserve">
          <source>O(n). Filter all values that satisfy the predicate.</source>
          <target state="translated">O(n).Filtra todos los valores que satisfagan el predicado.</target>
        </trans-unit>
        <trans-unit id="fd187d380259e772f7777ff3d8188b6dfe8de3a3" translate="yes" xml:space="preserve">
          <source>O(n). Fold the elements in the set using the given left-associative binary operator, such that &lt;code&gt;&lt;a href=&quot;data-intset#v:foldl&quot;&gt;foldl&lt;/a&gt; f z == &lt;a href=&quot;../base-4.13.0.0/prelude#v:foldl&quot;&gt;foldl&lt;/a&gt; f z . &lt;a href=&quot;data-intset#v:toAscList&quot;&gt;toAscList&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">En). Dobla los elementos del conjunto usando el operador binario asociativo a la izquierda dado, tal que &lt;code&gt;&lt;a href=&quot;data-intset#v:foldl&quot;&gt;foldl&lt;/a&gt; f z == &lt;a href=&quot;../base-4.13.0.0/prelude#v:foldl&quot;&gt;foldl&lt;/a&gt; f z . &lt;a href=&quot;data-intset#v:toAscList&quot;&gt;toAscList&lt;/a&gt;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="9ea0999e67715a8fc28d2f325684bc33d0713301" translate="yes" xml:space="preserve">
          <source>O(n). Fold the elements in the set using the given left-associative binary operator, such that &lt;code&gt;&lt;a href=&quot;data-intset#v:foldl&quot;&gt;foldl&lt;/a&gt; f z == &lt;a href=&quot;../base-4.14.1.0/prelude#v:foldl&quot;&gt;foldl&lt;/a&gt; f z . &lt;a href=&quot;data-intset#v:toAscList&quot;&gt;toAscList&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f489c4b27b1c2cc165ef315dd05b68a6fa36505a" translate="yes" xml:space="preserve">
          <source>O(n). Fold the elements in the set using the given left-associative binary operator, such that &lt;code&gt;&lt;a href=&quot;data-intset-internal#v:foldl&quot;&gt;foldl&lt;/a&gt; f z == &lt;a href=&quot;../base-4.13.0.0/prelude#v:foldl&quot;&gt;foldl&lt;/a&gt; f z . &lt;a href=&quot;data-intset-internal#v:toAscList&quot;&gt;toAscList&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">En). Dobla los elementos del conjunto usando el operador binario asociativo a la izquierda dado, tal que &lt;code&gt;&lt;a href=&quot;data-intset-internal#v:foldl&quot;&gt;foldl&lt;/a&gt; f z == &lt;a href=&quot;../base-4.13.0.0/prelude#v:foldl&quot;&gt;foldl&lt;/a&gt; f z . &lt;a href=&quot;data-intset-internal#v:toAscList&quot;&gt;toAscList&lt;/a&gt;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="331c0868ec4611fd9bf6273b75dd9ad7c2587e75" translate="yes" xml:space="preserve">
          <source>O(n). Fold the elements in the set using the given left-associative binary operator, such that &lt;code&gt;&lt;a href=&quot;data-intset-internal#v:foldl&quot;&gt;foldl&lt;/a&gt; f z == &lt;a href=&quot;../base-4.14.1.0/prelude#v:foldl&quot;&gt;foldl&lt;/a&gt; f z . &lt;a href=&quot;data-intset-internal#v:toAscList&quot;&gt;toAscList&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1f324b2b0f59da83f5871f1dd588fd32acd68deb" translate="yes" xml:space="preserve">
          <source>O(n). Fold the elements in the set using the given left-associative binary operator, such that &lt;code&gt;&lt;a href=&quot;data-set#v:foldl&quot;&gt;foldl&lt;/a&gt; f z == &lt;a href=&quot;../base-4.13.0.0/prelude#v:foldl&quot;&gt;foldl&lt;/a&gt; f z . &lt;a href=&quot;data-set#v:toAscList&quot;&gt;toAscList&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">En). Dobla los elementos del conjunto usando el operador binario asociativo a la izquierda dado, tal que &lt;code&gt;&lt;a href=&quot;data-set#v:foldl&quot;&gt;foldl&lt;/a&gt; f z == &lt;a href=&quot;../base-4.13.0.0/prelude#v:foldl&quot;&gt;foldl&lt;/a&gt; f z . &lt;a href=&quot;data-set#v:toAscList&quot;&gt;toAscList&lt;/a&gt;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="545a2de033705986e238c1b8f2f2fdb9df74e9be" translate="yes" xml:space="preserve">
          <source>O(n). Fold the elements in the set using the given left-associative binary operator, such that &lt;code&gt;&lt;a href=&quot;data-set#v:foldl&quot;&gt;foldl&lt;/a&gt; f z == &lt;a href=&quot;../base-4.14.1.0/prelude#v:foldl&quot;&gt;foldl&lt;/a&gt; f z . &lt;a href=&quot;data-set#v:toAscList&quot;&gt;toAscList&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0d2891b27e5ad3bd47a68596fcfc66af3677d178" translate="yes" xml:space="preserve">
          <source>O(n). Fold the elements in the set using the given right-associative binary operator, such that &lt;code&gt;&lt;a href=&quot;data-intset#v:foldr&quot;&gt;foldr&lt;/a&gt; f z == &lt;a href=&quot;../base-4.13.0.0/prelude#v:foldr&quot;&gt;foldr&lt;/a&gt; f z . &lt;a href=&quot;data-intset#v:toAscList&quot;&gt;toAscList&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">En). Dobla los elementos en el conjunto usando el operador binario asociativo a la derecha dado, de modo que &lt;code&gt;&lt;a href=&quot;data-intset#v:foldr&quot;&gt;foldr&lt;/a&gt; f z == &lt;a href=&quot;../base-4.13.0.0/prelude#v:foldr&quot;&gt;foldr&lt;/a&gt; f z . &lt;a href=&quot;data-intset#v:toAscList&quot;&gt;toAscList&lt;/a&gt;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="7382bb16e7085515a4ccc38c499fd2dfde669cbe" translate="yes" xml:space="preserve">
          <source>O(n). Fold the elements in the set using the given right-associative binary operator, such that &lt;code&gt;&lt;a href=&quot;data-intset#v:foldr&quot;&gt;foldr&lt;/a&gt; f z == &lt;a href=&quot;../base-4.14.1.0/prelude#v:foldr&quot;&gt;foldr&lt;/a&gt; f z . &lt;a href=&quot;data-intset#v:toAscList&quot;&gt;toAscList&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ed1f0fabd3931ac452c0505605247322919ef5b7" translate="yes" xml:space="preserve">
          <source>O(n). Fold the elements in the set using the given right-associative binary operator, such that &lt;code&gt;&lt;a href=&quot;data-intset-internal#v:foldr&quot;&gt;foldr&lt;/a&gt; f z == &lt;a href=&quot;../base-4.13.0.0/prelude#v:foldr&quot;&gt;foldr&lt;/a&gt; f z . &lt;a href=&quot;data-intset-internal#v:toAscList&quot;&gt;toAscList&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">En). Dobla los elementos en el conjunto usando el operador binario asociativo a la derecha dado, de modo que &lt;code&gt;&lt;a href=&quot;data-intset-internal#v:foldr&quot;&gt;foldr&lt;/a&gt; f z == &lt;a href=&quot;../base-4.13.0.0/prelude#v:foldr&quot;&gt;foldr&lt;/a&gt; f z . &lt;a href=&quot;data-intset-internal#v:toAscList&quot;&gt;toAscList&lt;/a&gt;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="007129228d848f4965f48fcab5d362b5d9ae0645" translate="yes" xml:space="preserve">
          <source>O(n). Fold the elements in the set using the given right-associative binary operator, such that &lt;code&gt;&lt;a href=&quot;data-intset-internal#v:foldr&quot;&gt;foldr&lt;/a&gt; f z == &lt;a href=&quot;../base-4.14.1.0/prelude#v:foldr&quot;&gt;foldr&lt;/a&gt; f z . &lt;a href=&quot;data-intset-internal#v:toAscList&quot;&gt;toAscList&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1d96b1ff503ab715f860cc010d3aa443ff17d126" translate="yes" xml:space="preserve">
          <source>O(n). Fold the elements in the set using the given right-associative binary operator, such that &lt;code&gt;&lt;a href=&quot;data-set#v:foldr&quot;&gt;foldr&lt;/a&gt; f z == &lt;a href=&quot;../base-4.13.0.0/prelude#v:foldr&quot;&gt;foldr&lt;/a&gt; f z . &lt;a href=&quot;data-set#v:toAscList&quot;&gt;toAscList&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">En). Dobla los elementos en el conjunto usando el operador binario asociativo a la derecha dado, de modo que &lt;code&gt;&lt;a href=&quot;data-set#v:foldr&quot;&gt;foldr&lt;/a&gt; f z == &lt;a href=&quot;../base-4.13.0.0/prelude#v:foldr&quot;&gt;foldr&lt;/a&gt; f z . &lt;a href=&quot;data-set#v:toAscList&quot;&gt;toAscList&lt;/a&gt;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="75f8e285802ef69b72ebbe3b22cfefc40807fb85" translate="yes" xml:space="preserve">
          <source>O(n). Fold the elements in the set using the given right-associative binary operator, such that &lt;code&gt;&lt;a href=&quot;data-set#v:foldr&quot;&gt;foldr&lt;/a&gt; f z == &lt;a href=&quot;../base-4.14.1.0/prelude#v:foldr&quot;&gt;foldr&lt;/a&gt; f z . &lt;a href=&quot;data-set#v:toAscList&quot;&gt;toAscList&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0f0c54a302b43d4378064cbb4ee3fcc46426ad6c" translate="yes" xml:space="preserve">
          <source>O(n). Fold the elements in the set using the given right-associative binary operator. This function is an equivalent of &lt;code&gt;&lt;a href=&quot;data-intset#v:foldr&quot;&gt;foldr&lt;/a&gt;&lt;/code&gt; and is present for compatibility only.</source>
          <target state="translated">En). Dobla los elementos del conjunto utilizando el operador binario asociativo a la derecha dado. Esta funci&amp;oacute;n es equivalente a &lt;code&gt;&lt;a href=&quot;data-intset#v:foldr&quot;&gt;foldr&lt;/a&gt;&lt;/code&gt; y est&amp;aacute; presente solo por compatibilidad.</target>
        </trans-unit>
        <trans-unit id="c4a6aaccbde70c13ad3121d99c6be59257d8d3dc" translate="yes" xml:space="preserve">
          <source>O(n). Fold the elements in the set using the given right-associative binary operator. This function is an equivalent of &lt;code&gt;&lt;a href=&quot;data-intset-internal#v:foldr&quot;&gt;foldr&lt;/a&gt;&lt;/code&gt; and is present for compatibility only.</source>
          <target state="translated">En). Dobla los elementos del conjunto utilizando el operador binario asociativo a la derecha dado. Esta funci&amp;oacute;n es equivalente a &lt;code&gt;&lt;a href=&quot;data-intset-internal#v:foldr&quot;&gt;foldr&lt;/a&gt;&lt;/code&gt; y est&amp;aacute; presente solo por compatibilidad.</target>
        </trans-unit>
        <trans-unit id="bbd7db46181441c03e9162a32dc212c95e00689f" translate="yes" xml:space="preserve">
          <source>O(n). Fold the elements in the set using the given right-associative binary operator. This function is an equivalent of &lt;code&gt;&lt;a href=&quot;data-set#v:foldr&quot;&gt;foldr&lt;/a&gt;&lt;/code&gt; and is present for compatibility only.</source>
          <target state="translated">En). Dobla los elementos del conjunto utilizando el operador binario asociativo a la derecha dado. Esta funci&amp;oacute;n es equivalente a &lt;code&gt;&lt;a href=&quot;data-set#v:foldr&quot;&gt;foldr&lt;/a&gt;&lt;/code&gt; y est&amp;aacute; presente solo por compatibilidad.</target>
        </trans-unit>
        <trans-unit id="420a91bccd693fd91224409726cfa81357c23e11" translate="yes" xml:space="preserve">
          <source>O(n). Fold the keys and values in the map using the given left-associative binary operator, such that &lt;code&gt;&lt;a href=&quot;data-intmap-lazy#v:foldlWithKey&quot;&gt;foldlWithKey&lt;/a&gt; f z == &lt;a href=&quot;../base-4.13.0.0/prelude#v:foldl&quot;&gt;foldl&lt;/a&gt; (\z' (kx, x) -&amp;gt; f z' kx x) z . &lt;a href=&quot;data-intmap-lazy#v:toAscList&quot;&gt;toAscList&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">En). Doble las claves y los valores en el mapa utilizando el operador binario asociativo izquierdo dado, de modo que &lt;code&gt;&lt;a href=&quot;data-intmap-lazy#v:foldlWithKey&quot;&gt;foldlWithKey&lt;/a&gt; f z == &lt;a href=&quot;../base-4.13.0.0/prelude#v:foldl&quot;&gt;foldl&lt;/a&gt; (\z' (kx, x) -&amp;gt; f z' kx x) z . &lt;a href=&quot;data-intmap-lazy#v:toAscList&quot;&gt;toAscList&lt;/a&gt;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="30b65823f6675873cb1a9414c34776e278fa9db9" translate="yes" xml:space="preserve">
          <source>O(n). Fold the keys and values in the map using the given left-associative binary operator, such that &lt;code&gt;&lt;a href=&quot;data-intmap-lazy#v:foldlWithKey&quot;&gt;foldlWithKey&lt;/a&gt; f z == &lt;a href=&quot;../base-4.14.1.0/prelude#v:foldl&quot;&gt;foldl&lt;/a&gt; (\z' (kx, x) -&amp;gt; f z' kx x) z . &lt;a href=&quot;data-intmap-lazy#v:toAscList&quot;&gt;toAscList&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6d15df2c03af36975fa4c874e66623b5cc569eac" translate="yes" xml:space="preserve">
          <source>O(n). Fold the keys and values in the map using the given left-associative binary operator, such that &lt;code&gt;&lt;a href=&quot;data-intmap-strict#v:foldlWithKey&quot;&gt;foldlWithKey&lt;/a&gt; f z == &lt;a href=&quot;../base-4.13.0.0/prelude#v:foldl&quot;&gt;foldl&lt;/a&gt; (\z' (kx, x) -&amp;gt; f z' kx x) z . &lt;a href=&quot;data-intmap-strict#v:toAscList&quot;&gt;toAscList&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">En). Doble las claves y los valores en el mapa utilizando el operador binario asociativo izquierdo dado, de modo que &lt;code&gt;&lt;a href=&quot;data-intmap-strict#v:foldlWithKey&quot;&gt;foldlWithKey&lt;/a&gt; f z == &lt;a href=&quot;../base-4.13.0.0/prelude#v:foldl&quot;&gt;foldl&lt;/a&gt; (\z' (kx, x) -&amp;gt; f z' kx x) z . &lt;a href=&quot;data-intmap-strict#v:toAscList&quot;&gt;toAscList&lt;/a&gt;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="61659404d8560ff350ca75a44ee3055a27e1d4a5" translate="yes" xml:space="preserve">
          <source>O(n). Fold the keys and values in the map using the given left-associative binary operator, such that &lt;code&gt;&lt;a href=&quot;data-intmap-strict#v:foldlWithKey&quot;&gt;foldlWithKey&lt;/a&gt; f z == &lt;a href=&quot;../base-4.14.1.0/prelude#v:foldl&quot;&gt;foldl&lt;/a&gt; (\z' (kx, x) -&amp;gt; f z' kx x) z . &lt;a href=&quot;data-intmap-strict#v:toAscList&quot;&gt;toAscList&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e4c50d45667ec51cf9d881549e19a7d8d93db6f7" translate="yes" xml:space="preserve">
          <source>O(n). Fold the keys and values in the map using the given left-associative binary operator, such that &lt;code&gt;&lt;a href=&quot;data-intmap-strict-internal#v:foldlWithKey&quot;&gt;foldlWithKey&lt;/a&gt; f z == &lt;a href=&quot;../base-4.13.0.0/prelude#v:foldl&quot;&gt;foldl&lt;/a&gt; (\z' (kx, x) -&amp;gt; f z' kx x) z . &lt;a href=&quot;data-intmap-strict-internal#v:toAscList&quot;&gt;toAscList&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">En). Doble las claves y los valores en el mapa utilizando el operador binario asociativo izquierdo dado, de modo que &lt;code&gt;&lt;a href=&quot;data-intmap-strict-internal#v:foldlWithKey&quot;&gt;foldlWithKey&lt;/a&gt; f z == &lt;a href=&quot;../base-4.13.0.0/prelude#v:foldl&quot;&gt;foldl&lt;/a&gt; (\z' (kx, x) -&amp;gt; f z' kx x) z . &lt;a href=&quot;data-intmap-strict-internal#v:toAscList&quot;&gt;toAscList&lt;/a&gt;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="46762683efed2b9d7e96625249c405fc1749f923" translate="yes" xml:space="preserve">
          <source>O(n). Fold the keys and values in the map using the given left-associative binary operator, such that &lt;code&gt;&lt;a href=&quot;data-intmap-strict-internal#v:foldlWithKey&quot;&gt;foldlWithKey&lt;/a&gt; f z == &lt;a href=&quot;../base-4.14.1.0/prelude#v:foldl&quot;&gt;foldl&lt;/a&gt; (\z' (kx, x) -&amp;gt; f z' kx x) z . &lt;a href=&quot;data-intmap-strict-internal#v:toAscList&quot;&gt;toAscList&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5314494d648fc03643b467e48fb407b70680a15d" translate="yes" xml:space="preserve">
          <source>O(n). Fold the keys and values in the map using the given left-associative binary operator, such that &lt;code&gt;&lt;a href=&quot;data-map-lazy#v:foldlWithKey&quot;&gt;foldlWithKey&lt;/a&gt; f z == &lt;a href=&quot;../base-4.13.0.0/prelude#v:foldl&quot;&gt;foldl&lt;/a&gt; (\z' (kx, x) -&amp;gt; f z' kx x) z . &lt;a href=&quot;data-map-lazy#v:toAscList&quot;&gt;toAscList&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">En). Doble las claves y los valores en el mapa utilizando el operador binario asociativo izquierdo dado, de modo que &lt;code&gt;&lt;a href=&quot;data-map-lazy#v:foldlWithKey&quot;&gt;foldlWithKey&lt;/a&gt; f z == &lt;a href=&quot;../base-4.13.0.0/prelude#v:foldl&quot;&gt;foldl&lt;/a&gt; (\z' (kx, x) -&amp;gt; f z' kx x) z . &lt;a href=&quot;data-map-lazy#v:toAscList&quot;&gt;toAscList&lt;/a&gt;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="680fbb405bb284e329d72efbe02d691b3d9aee3c" translate="yes" xml:space="preserve">
          <source>O(n). Fold the keys and values in the map using the given left-associative binary operator, such that &lt;code&gt;&lt;a href=&quot;data-map-lazy#v:foldlWithKey&quot;&gt;foldlWithKey&lt;/a&gt; f z == &lt;a href=&quot;../base-4.14.1.0/prelude#v:foldl&quot;&gt;foldl&lt;/a&gt; (\z' (kx, x) -&amp;gt; f z' kx x) z . &lt;a href=&quot;data-map-lazy#v:toAscList&quot;&gt;toAscList&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="82cf75e0b5187e855d9687eb54d63a19fdac671b" translate="yes" xml:space="preserve">
          <source>O(n). Fold the keys and values in the map using the given left-associative binary operator, such that &lt;code&gt;&lt;a href=&quot;data-map-strict#v:foldlWithKey&quot;&gt;foldlWithKey&lt;/a&gt; f z == &lt;a href=&quot;../base-4.13.0.0/prelude#v:foldl&quot;&gt;foldl&lt;/a&gt; (\z' (kx, x) -&amp;gt; f z' kx x) z . &lt;a href=&quot;data-map-strict#v:toAscList&quot;&gt;toAscList&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">En). Doble las claves y los valores en el mapa utilizando el operador binario asociativo izquierdo dado, de modo que &lt;code&gt;&lt;a href=&quot;data-map-strict#v:foldlWithKey&quot;&gt;foldlWithKey&lt;/a&gt; f z == &lt;a href=&quot;../base-4.13.0.0/prelude#v:foldl&quot;&gt;foldl&lt;/a&gt; (\z' (kx, x) -&amp;gt; f z' kx x) z . &lt;a href=&quot;data-map-strict#v:toAscList&quot;&gt;toAscList&lt;/a&gt;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="1d747bcbd597f36c0149d3f3fff48554dd77a7fe" translate="yes" xml:space="preserve">
          <source>O(n). Fold the keys and values in the map using the given left-associative binary operator, such that &lt;code&gt;&lt;a href=&quot;data-map-strict#v:foldlWithKey&quot;&gt;foldlWithKey&lt;/a&gt; f z == &lt;a href=&quot;../base-4.14.1.0/prelude#v:foldl&quot;&gt;foldl&lt;/a&gt; (\z' (kx, x) -&amp;gt; f z' kx x) z . &lt;a href=&quot;data-map-strict#v:toAscList&quot;&gt;toAscList&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="41dc7087452432576b4253c2fe034bed92265b22" translate="yes" xml:space="preserve">
          <source>O(n). Fold the keys and values in the map using the given monoid, such that</source>
          <target state="translated">O(n).Doblar las claves y valores en el mapa usando el monoide dado,de tal manera que</target>
        </trans-unit>
        <trans-unit id="7b147a5bbd0ab6db0d8b192fdc2c0aaade469db9" translate="yes" xml:space="preserve">
          <source>O(n). Fold the keys and values in the map using the given right-associative binary operator, such that &lt;code&gt;&lt;a href=&quot;data-intmap-lazy#v:foldrWithKey&quot;&gt;foldrWithKey&lt;/a&gt; f z == &lt;a href=&quot;../base-4.13.0.0/prelude#v:foldr&quot;&gt;foldr&lt;/a&gt; (&lt;a href=&quot;../base-4.13.0.0/data-tuple#v:uncurry&quot;&gt;uncurry&lt;/a&gt; f) z . &lt;a href=&quot;data-intmap-lazy#v:toAscList&quot;&gt;toAscList&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">En). Doble las claves y los valores en el mapa utilizando el operador binario asociativo a la derecha dado, de modo que &lt;code&gt;&lt;a href=&quot;data-intmap-lazy#v:foldrWithKey&quot;&gt;foldrWithKey&lt;/a&gt; f z == &lt;a href=&quot;../base-4.13.0.0/prelude#v:foldr&quot;&gt;foldr&lt;/a&gt; (&lt;a href=&quot;../base-4.13.0.0/data-tuple#v:uncurry&quot;&gt;uncurry&lt;/a&gt; f) z . &lt;a href=&quot;data-intmap-lazy#v:toAscList&quot;&gt;toAscList&lt;/a&gt;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="d7cc847945454b47d631496ec9de07c306cdd7eb" translate="yes" xml:space="preserve">
          <source>O(n). Fold the keys and values in the map using the given right-associative binary operator, such that &lt;code&gt;&lt;a href=&quot;data-intmap-lazy#v:foldrWithKey&quot;&gt;foldrWithKey&lt;/a&gt; f z == &lt;a href=&quot;../base-4.14.1.0/prelude#v:foldr&quot;&gt;foldr&lt;/a&gt; (&lt;a href=&quot;../base-4.14.1.0/data-tuple#v:uncurry&quot;&gt;uncurry&lt;/a&gt; f) z . &lt;a href=&quot;data-intmap-lazy#v:toAscList&quot;&gt;toAscList&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bf97c889d33c15be915f227337df5ead3b5e01c2" translate="yes" xml:space="preserve">
          <source>O(n). Fold the keys and values in the map using the given right-associative binary operator, such that &lt;code&gt;&lt;a href=&quot;data-intmap-strict#v:foldrWithKey&quot;&gt;foldrWithKey&lt;/a&gt; f z == &lt;a href=&quot;../base-4.13.0.0/prelude#v:foldr&quot;&gt;foldr&lt;/a&gt; (&lt;a href=&quot;../base-4.13.0.0/data-tuple#v:uncurry&quot;&gt;uncurry&lt;/a&gt; f) z . &lt;a href=&quot;data-intmap-strict#v:toAscList&quot;&gt;toAscList&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">En). Doble las claves y los valores en el mapa utilizando el operador binario asociativo a la derecha dado, de modo que &lt;code&gt;&lt;a href=&quot;data-intmap-strict#v:foldrWithKey&quot;&gt;foldrWithKey&lt;/a&gt; f z == &lt;a href=&quot;../base-4.13.0.0/prelude#v:foldr&quot;&gt;foldr&lt;/a&gt; (&lt;a href=&quot;../base-4.13.0.0/data-tuple#v:uncurry&quot;&gt;uncurry&lt;/a&gt; f) z . &lt;a href=&quot;data-intmap-strict#v:toAscList&quot;&gt;toAscList&lt;/a&gt;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="ef9be34f7e154a1d2785480f651ae379c09128a9" translate="yes" xml:space="preserve">
          <source>O(n). Fold the keys and values in the map using the given right-associative binary operator, such that &lt;code&gt;&lt;a href=&quot;data-intmap-strict#v:foldrWithKey&quot;&gt;foldrWithKey&lt;/a&gt; f z == &lt;a href=&quot;../base-4.14.1.0/prelude#v:foldr&quot;&gt;foldr&lt;/a&gt; (&lt;a href=&quot;../base-4.14.1.0/data-tuple#v:uncurry&quot;&gt;uncurry&lt;/a&gt; f) z . &lt;a href=&quot;data-intmap-strict#v:toAscList&quot;&gt;toAscList&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="737ae284156ddd7ec85750aa648563e2353c863f" translate="yes" xml:space="preserve">
          <source>O(n). Fold the keys and values in the map using the given right-associative binary operator, such that &lt;code&gt;&lt;a href=&quot;data-intmap-strict-internal#v:foldrWithKey&quot;&gt;foldrWithKey&lt;/a&gt; f z == &lt;a href=&quot;../base-4.13.0.0/prelude#v:foldr&quot;&gt;foldr&lt;/a&gt; (&lt;a href=&quot;../base-4.13.0.0/data-tuple#v:uncurry&quot;&gt;uncurry&lt;/a&gt; f) z . &lt;a href=&quot;data-intmap-strict-internal#v:toAscList&quot;&gt;toAscList&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">En). Doble las claves y los valores en el mapa utilizando el operador binario asociativo a la derecha dado, de modo que &lt;code&gt;&lt;a href=&quot;data-intmap-strict-internal#v:foldrWithKey&quot;&gt;foldrWithKey&lt;/a&gt; f z == &lt;a href=&quot;../base-4.13.0.0/prelude#v:foldr&quot;&gt;foldr&lt;/a&gt; (&lt;a href=&quot;../base-4.13.0.0/data-tuple#v:uncurry&quot;&gt;uncurry&lt;/a&gt; f) z . &lt;a href=&quot;data-intmap-strict-internal#v:toAscList&quot;&gt;toAscList&lt;/a&gt;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="f61be01603ef02011f2b93061578257c8871d1b0" translate="yes" xml:space="preserve">
          <source>O(n). Fold the keys and values in the map using the given right-associative binary operator, such that &lt;code&gt;&lt;a href=&quot;data-intmap-strict-internal#v:foldrWithKey&quot;&gt;foldrWithKey&lt;/a&gt; f z == &lt;a href=&quot;../base-4.14.1.0/prelude#v:foldr&quot;&gt;foldr&lt;/a&gt; (&lt;a href=&quot;../base-4.14.1.0/data-tuple#v:uncurry&quot;&gt;uncurry&lt;/a&gt; f) z . &lt;a href=&quot;data-intmap-strict-internal#v:toAscList&quot;&gt;toAscList&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5900ffccace2bb41fa387fcfb2d2e2beffee0fd6" translate="yes" xml:space="preserve">
          <source>O(n). Fold the keys and values in the map using the given right-associative binary operator, such that &lt;code&gt;&lt;a href=&quot;data-map-lazy#v:foldrWithKey&quot;&gt;foldrWithKey&lt;/a&gt; f z == &lt;a href=&quot;../base-4.13.0.0/prelude#v:foldr&quot;&gt;foldr&lt;/a&gt; (&lt;a href=&quot;../base-4.13.0.0/data-tuple#v:uncurry&quot;&gt;uncurry&lt;/a&gt; f) z . &lt;a href=&quot;data-map-lazy#v:toAscList&quot;&gt;toAscList&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">En). Doble las claves y los valores en el mapa utilizando el operador binario asociativo a la derecha dado, de modo que &lt;code&gt;&lt;a href=&quot;data-map-lazy#v:foldrWithKey&quot;&gt;foldrWithKey&lt;/a&gt; f z == &lt;a href=&quot;../base-4.13.0.0/prelude#v:foldr&quot;&gt;foldr&lt;/a&gt; (&lt;a href=&quot;../base-4.13.0.0/data-tuple#v:uncurry&quot;&gt;uncurry&lt;/a&gt; f) z . &lt;a href=&quot;data-map-lazy#v:toAscList&quot;&gt;toAscList&lt;/a&gt;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="bb6036e9ef5590d91f60e25057e704252fcebc48" translate="yes" xml:space="preserve">
          <source>O(n). Fold the keys and values in the map using the given right-associative binary operator, such that &lt;code&gt;&lt;a href=&quot;data-map-lazy#v:foldrWithKey&quot;&gt;foldrWithKey&lt;/a&gt; f z == &lt;a href=&quot;../base-4.14.1.0/prelude#v:foldr&quot;&gt;foldr&lt;/a&gt; (&lt;a href=&quot;../base-4.14.1.0/data-tuple#v:uncurry&quot;&gt;uncurry&lt;/a&gt; f) z . &lt;a href=&quot;data-map-lazy#v:toAscList&quot;&gt;toAscList&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f355e15b89571d5f94a93ce1229fe94de15d615c" translate="yes" xml:space="preserve">
          <source>O(n). Fold the keys and values in the map using the given right-associative binary operator, such that &lt;code&gt;&lt;a href=&quot;data-map-strict#v:foldrWithKey&quot;&gt;foldrWithKey&lt;/a&gt; f z == &lt;a href=&quot;../base-4.13.0.0/prelude#v:foldr&quot;&gt;foldr&lt;/a&gt; (&lt;a href=&quot;../base-4.13.0.0/data-tuple#v:uncurry&quot;&gt;uncurry&lt;/a&gt; f) z . &lt;a href=&quot;data-map-strict#v:toAscList&quot;&gt;toAscList&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">En). Doble las claves y los valores en el mapa utilizando el operador binario asociativo a la derecha dado, de modo que &lt;code&gt;&lt;a href=&quot;data-map-strict#v:foldrWithKey&quot;&gt;foldrWithKey&lt;/a&gt; f z == &lt;a href=&quot;../base-4.13.0.0/prelude#v:foldr&quot;&gt;foldr&lt;/a&gt; (&lt;a href=&quot;../base-4.13.0.0/data-tuple#v:uncurry&quot;&gt;uncurry&lt;/a&gt; f) z . &lt;a href=&quot;data-map-strict#v:toAscList&quot;&gt;toAscList&lt;/a&gt;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="f06fcc3364cc6e5ca334d3a8329885dc3c163775" translate="yes" xml:space="preserve">
          <source>O(n). Fold the keys and values in the map using the given right-associative binary operator, such that &lt;code&gt;&lt;a href=&quot;data-map-strict#v:foldrWithKey&quot;&gt;foldrWithKey&lt;/a&gt; f z == &lt;a href=&quot;../base-4.14.1.0/prelude#v:foldr&quot;&gt;foldr&lt;/a&gt; (&lt;a href=&quot;../base-4.14.1.0/data-tuple#v:uncurry&quot;&gt;uncurry&lt;/a&gt; f) z . &lt;a href=&quot;data-map-strict#v:toAscList&quot;&gt;toAscList&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f679715363009cd3a06c72b3f2be25343eba4533" translate="yes" xml:space="preserve">
          <source>O(n). Fold the values in the map using the given left-associative binary operator, such that &lt;code&gt;&lt;a href=&quot;data-intmap-lazy#v:foldl&quot;&gt;foldl&lt;/a&gt; f z == &lt;a href=&quot;../base-4.13.0.0/prelude#v:foldl&quot;&gt;foldl&lt;/a&gt; f z . &lt;a href=&quot;data-intmap-lazy#v:elems&quot;&gt;elems&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">En). Doble los valores en el mapa utilizando el operador binario asociativo a la izquierda dado, de modo que &lt;code&gt;&lt;a href=&quot;data-intmap-lazy#v:foldl&quot;&gt;foldl&lt;/a&gt; f z == &lt;a href=&quot;../base-4.13.0.0/prelude#v:foldl&quot;&gt;foldl&lt;/a&gt; f z . &lt;a href=&quot;data-intmap-lazy#v:elems&quot;&gt;elems&lt;/a&gt;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="d25bf5c08a40ae957ae20fad0de75081021f7d66" translate="yes" xml:space="preserve">
          <source>O(n). Fold the values in the map using the given left-associative binary operator, such that &lt;code&gt;&lt;a href=&quot;data-intmap-lazy#v:foldl&quot;&gt;foldl&lt;/a&gt; f z == &lt;a href=&quot;../base-4.14.1.0/prelude#v:foldl&quot;&gt;foldl&lt;/a&gt; f z . &lt;a href=&quot;data-intmap-lazy#v:elems&quot;&gt;elems&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="28c0cce1607c943199c39c6a1ebb1573288d1f6f" translate="yes" xml:space="preserve">
          <source>O(n). Fold the values in the map using the given left-associative binary operator, such that &lt;code&gt;&lt;a href=&quot;data-intmap-strict#v:foldl&quot;&gt;foldl&lt;/a&gt; f z == &lt;a href=&quot;../base-4.13.0.0/prelude#v:foldl&quot;&gt;foldl&lt;/a&gt; f z . &lt;a href=&quot;data-intmap-strict#v:elems&quot;&gt;elems&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">En). Doble los valores en el mapa utilizando el operador binario asociativo a la izquierda dado, de modo que &lt;code&gt;&lt;a href=&quot;data-intmap-strict#v:foldl&quot;&gt;foldl&lt;/a&gt; f z == &lt;a href=&quot;../base-4.13.0.0/prelude#v:foldl&quot;&gt;foldl&lt;/a&gt; f z . &lt;a href=&quot;data-intmap-strict#v:elems&quot;&gt;elems&lt;/a&gt;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="ad22df3262ceed93bc2c690b1dfd2b716e772de9" translate="yes" xml:space="preserve">
          <source>O(n). Fold the values in the map using the given left-associative binary operator, such that &lt;code&gt;&lt;a href=&quot;data-intmap-strict#v:foldl&quot;&gt;foldl&lt;/a&gt; f z == &lt;a href=&quot;../base-4.14.1.0/prelude#v:foldl&quot;&gt;foldl&lt;/a&gt; f z . &lt;a href=&quot;data-intmap-strict#v:elems&quot;&gt;elems&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="be2cf80125dcb52b214a5d99f4084cf0cac98388" translate="yes" xml:space="preserve">
          <source>O(n). Fold the values in the map using the given left-associative binary operator, such that &lt;code&gt;&lt;a href=&quot;data-intmap-strict-internal#v:foldl&quot;&gt;foldl&lt;/a&gt; f z == &lt;a href=&quot;../base-4.13.0.0/prelude#v:foldl&quot;&gt;foldl&lt;/a&gt; f z . &lt;a href=&quot;data-intmap-strict-internal#v:elems&quot;&gt;elems&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">En). Doble los valores en el mapa utilizando el operador binario asociativo a la izquierda dado, de modo que &lt;code&gt;&lt;a href=&quot;data-intmap-strict-internal#v:foldl&quot;&gt;foldl&lt;/a&gt; f z == &lt;a href=&quot;../base-4.13.0.0/prelude#v:foldl&quot;&gt;foldl&lt;/a&gt; f z . &lt;a href=&quot;data-intmap-strict-internal#v:elems&quot;&gt;elems&lt;/a&gt;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="262fc31483be0a3045510d0bae0dcf1aa222026d" translate="yes" xml:space="preserve">
          <source>O(n). Fold the values in the map using the given left-associative binary operator, such that &lt;code&gt;&lt;a href=&quot;data-intmap-strict-internal#v:foldl&quot;&gt;foldl&lt;/a&gt; f z == &lt;a href=&quot;../base-4.14.1.0/prelude#v:foldl&quot;&gt;foldl&lt;/a&gt; f z . &lt;a href=&quot;data-intmap-strict-internal#v:elems&quot;&gt;elems&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="718c7224ec44e223b2be3a549c64fe306e201873" translate="yes" xml:space="preserve">
          <source>O(n). Fold the values in the map using the given left-associative binary operator, such that &lt;code&gt;&lt;a href=&quot;data-map-lazy#v:foldl&quot;&gt;foldl&lt;/a&gt; f z == &lt;a href=&quot;../base-4.13.0.0/prelude#v:foldl&quot;&gt;foldl&lt;/a&gt; f z . &lt;a href=&quot;data-map-lazy#v:elems&quot;&gt;elems&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">En). Doble los valores en el mapa utilizando el operador binario asociativo a la izquierda dado, de modo que &lt;code&gt;&lt;a href=&quot;data-map-lazy#v:foldl&quot;&gt;foldl&lt;/a&gt; f z == &lt;a href=&quot;../base-4.13.0.0/prelude#v:foldl&quot;&gt;foldl&lt;/a&gt; f z . &lt;a href=&quot;data-map-lazy#v:elems&quot;&gt;elems&lt;/a&gt;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="bc549d3da74315038bea670011313ed312e6fffb" translate="yes" xml:space="preserve">
          <source>O(n). Fold the values in the map using the given left-associative binary operator, such that &lt;code&gt;&lt;a href=&quot;data-map-lazy#v:foldl&quot;&gt;foldl&lt;/a&gt; f z == &lt;a href=&quot;../base-4.14.1.0/prelude#v:foldl&quot;&gt;foldl&lt;/a&gt; f z . &lt;a href=&quot;data-map-lazy#v:elems&quot;&gt;elems&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="769390eedd60c8ae1d97c4c438bac6456a727375" translate="yes" xml:space="preserve">
          <source>O(n). Fold the values in the map using the given left-associative binary operator, such that &lt;code&gt;&lt;a href=&quot;data-map-strict#v:foldl&quot;&gt;foldl&lt;/a&gt; f z == &lt;a href=&quot;../base-4.13.0.0/prelude#v:foldl&quot;&gt;foldl&lt;/a&gt; f z . &lt;a href=&quot;data-map-strict#v:elems&quot;&gt;elems&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">En). Doble los valores en el mapa utilizando el operador binario asociativo a la izquierda dado, de modo que &lt;code&gt;&lt;a href=&quot;data-map-strict#v:foldl&quot;&gt;foldl&lt;/a&gt; f z == &lt;a href=&quot;../base-4.13.0.0/prelude#v:foldl&quot;&gt;foldl&lt;/a&gt; f z . &lt;a href=&quot;data-map-strict#v:elems&quot;&gt;elems&lt;/a&gt;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="b956d7520714df903ad4f075cb74eb3c00b670b4" translate="yes" xml:space="preserve">
          <source>O(n). Fold the values in the map using the given left-associative binary operator, such that &lt;code&gt;&lt;a href=&quot;data-map-strict#v:foldl&quot;&gt;foldl&lt;/a&gt; f z == &lt;a href=&quot;../base-4.14.1.0/prelude#v:foldl&quot;&gt;foldl&lt;/a&gt; f z . &lt;a href=&quot;data-map-strict#v:elems&quot;&gt;elems&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8e960d57eefa58793286f14fd5f64ddf1c8bafd6" translate="yes" xml:space="preserve">
          <source>O(n). Fold the values in the map using the given right-associative binary operator, such that &lt;code&gt;&lt;a href=&quot;data-intmap-lazy#v:foldr&quot;&gt;foldr&lt;/a&gt; f z == &lt;a href=&quot;../base-4.13.0.0/prelude#v:foldr&quot;&gt;foldr&lt;/a&gt; f z . &lt;a href=&quot;data-intmap-lazy#v:elems&quot;&gt;elems&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">En). Doble los valores en el mapa utilizando el operador binario asociativo a la derecha dado, de modo que &lt;code&gt;&lt;a href=&quot;data-intmap-lazy#v:foldr&quot;&gt;foldr&lt;/a&gt; f z == &lt;a href=&quot;../base-4.13.0.0/prelude#v:foldr&quot;&gt;foldr&lt;/a&gt; f z . &lt;a href=&quot;data-intmap-lazy#v:elems&quot;&gt;elems&lt;/a&gt;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="bb177a593c811f121f23f142a62cc5ef7add881d" translate="yes" xml:space="preserve">
          <source>O(n). Fold the values in the map using the given right-associative binary operator, such that &lt;code&gt;&lt;a href=&quot;data-intmap-lazy#v:foldr&quot;&gt;foldr&lt;/a&gt; f z == &lt;a href=&quot;../base-4.14.1.0/prelude#v:foldr&quot;&gt;foldr&lt;/a&gt; f z . &lt;a href=&quot;data-intmap-lazy#v:elems&quot;&gt;elems&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a5d64d43d6cafe1a938edcbc4877507c4416255b" translate="yes" xml:space="preserve">
          <source>O(n). Fold the values in the map using the given right-associative binary operator, such that &lt;code&gt;&lt;a href=&quot;data-intmap-strict#v:foldr&quot;&gt;foldr&lt;/a&gt; f z == &lt;a href=&quot;../base-4.13.0.0/prelude#v:foldr&quot;&gt;foldr&lt;/a&gt; f z . &lt;a href=&quot;data-intmap-strict#v:elems&quot;&gt;elems&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">En). Doble los valores en el mapa utilizando el operador binario asociativo a la derecha dado, de modo que &lt;code&gt;&lt;a href=&quot;data-intmap-strict#v:foldr&quot;&gt;foldr&lt;/a&gt; f z == &lt;a href=&quot;../base-4.13.0.0/prelude#v:foldr&quot;&gt;foldr&lt;/a&gt; f z . &lt;a href=&quot;data-intmap-strict#v:elems&quot;&gt;elems&lt;/a&gt;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="73e28ceeb602cdcbd778c0763c4f6401c08e60c4" translate="yes" xml:space="preserve">
          <source>O(n). Fold the values in the map using the given right-associative binary operator, such that &lt;code&gt;&lt;a href=&quot;data-intmap-strict#v:foldr&quot;&gt;foldr&lt;/a&gt; f z == &lt;a href=&quot;../base-4.14.1.0/prelude#v:foldr&quot;&gt;foldr&lt;/a&gt; f z . &lt;a href=&quot;data-intmap-strict#v:elems&quot;&gt;elems&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b46935e9716aef69b9bad01480c973e1ac756472" translate="yes" xml:space="preserve">
          <source>O(n). Fold the values in the map using the given right-associative binary operator, such that &lt;code&gt;&lt;a href=&quot;data-intmap-strict-internal#v:foldr&quot;&gt;foldr&lt;/a&gt; f z == &lt;a href=&quot;../base-4.13.0.0/prelude#v:foldr&quot;&gt;foldr&lt;/a&gt; f z . &lt;a href=&quot;data-intmap-strict-internal#v:elems&quot;&gt;elems&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">En). Doble los valores en el mapa utilizando el operador binario asociativo a la derecha dado, de modo que &lt;code&gt;&lt;a href=&quot;data-intmap-strict-internal#v:foldr&quot;&gt;foldr&lt;/a&gt; f z == &lt;a href=&quot;../base-4.13.0.0/prelude#v:foldr&quot;&gt;foldr&lt;/a&gt; f z . &lt;a href=&quot;data-intmap-strict-internal#v:elems&quot;&gt;elems&lt;/a&gt;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="f5e898f6a23ed70ecf501e051dade8af6b3269d3" translate="yes" xml:space="preserve">
          <source>O(n). Fold the values in the map using the given right-associative binary operator, such that &lt;code&gt;&lt;a href=&quot;data-intmap-strict-internal#v:foldr&quot;&gt;foldr&lt;/a&gt; f z == &lt;a href=&quot;../base-4.14.1.0/prelude#v:foldr&quot;&gt;foldr&lt;/a&gt; f z . &lt;a href=&quot;data-intmap-strict-internal#v:elems&quot;&gt;elems&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5a071bb93e5cb9cb0cc0479bfa2dbc2f564d7b16" translate="yes" xml:space="preserve">
          <source>O(n). Fold the values in the map using the given right-associative binary operator, such that &lt;code&gt;&lt;a href=&quot;data-map-lazy#v:foldr&quot;&gt;foldr&lt;/a&gt; f z == &lt;a href=&quot;../base-4.13.0.0/prelude#v:foldr&quot;&gt;foldr&lt;/a&gt; f z . &lt;a href=&quot;data-map-lazy#v:elems&quot;&gt;elems&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">En). Doble los valores en el mapa utilizando el operador binario asociativo a la derecha dado, de modo que &lt;code&gt;&lt;a href=&quot;data-map-lazy#v:foldr&quot;&gt;foldr&lt;/a&gt; f z == &lt;a href=&quot;../base-4.13.0.0/prelude#v:foldr&quot;&gt;foldr&lt;/a&gt; f z . &lt;a href=&quot;data-map-lazy#v:elems&quot;&gt;elems&lt;/a&gt;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="d55962360d0ec40caf1f3606fc87b1f742ecdc83" translate="yes" xml:space="preserve">
          <source>O(n). Fold the values in the map using the given right-associative binary operator, such that &lt;code&gt;&lt;a href=&quot;data-map-lazy#v:foldr&quot;&gt;foldr&lt;/a&gt; f z == &lt;a href=&quot;../base-4.14.1.0/prelude#v:foldr&quot;&gt;foldr&lt;/a&gt; f z . &lt;a href=&quot;data-map-lazy#v:elems&quot;&gt;elems&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="17e16d6b81f14248006211f97996620166151842" translate="yes" xml:space="preserve">
          <source>O(n). Fold the values in the map using the given right-associative binary operator, such that &lt;code&gt;&lt;a href=&quot;data-map-strict#v:foldr&quot;&gt;foldr&lt;/a&gt; f z == &lt;a href=&quot;../base-4.13.0.0/prelude#v:foldr&quot;&gt;foldr&lt;/a&gt; f z . &lt;a href=&quot;data-map-strict#v:elems&quot;&gt;elems&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">En). Doble los valores en el mapa utilizando el operador binario asociativo a la derecha dado, de modo que &lt;code&gt;&lt;a href=&quot;data-map-strict#v:foldr&quot;&gt;foldr&lt;/a&gt; f z == &lt;a href=&quot;../base-4.13.0.0/prelude#v:foldr&quot;&gt;foldr&lt;/a&gt; f z . &lt;a href=&quot;data-map-strict#v:elems&quot;&gt;elems&lt;/a&gt;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="d655488a73bc6f23c3c2abcdc2ffdd97fd3e836f" translate="yes" xml:space="preserve">
          <source>O(n). Fold the values in the map using the given right-associative binary operator, such that &lt;code&gt;&lt;a href=&quot;data-map-strict#v:foldr&quot;&gt;foldr&lt;/a&gt; f z == &lt;a href=&quot;../base-4.14.1.0/prelude#v:foldr&quot;&gt;foldr&lt;/a&gt; f z . &lt;a href=&quot;data-map-strict#v:elems&quot;&gt;elems&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cf01b4698c066b0b378341073e2125bf52db1134" translate="yes" xml:space="preserve">
          <source>O(n). Map a function over all values in the map.</source>
          <target state="translated">O(n).Mapea una función sobre todos los valores del mapa.</target>
        </trans-unit>
        <trans-unit id="bbccdf89731955a9400998a6114d2837d096a981" translate="yes" xml:space="preserve">
          <source>O(n). Map keys/values and collect the &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-maybe#v:Just&quot;&gt;Just&lt;/a&gt;&lt;/code&gt; results.</source>
          <target state="translated">En). Asigne claves / valores y recopile los resultados &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-maybe#v:Just&quot;&gt;Just&lt;/a&gt;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="c8230522617ab0a4acb490d8be3451e1b772afcf" translate="yes" xml:space="preserve">
          <source>O(n). Map keys/values and collect the &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-maybe#v:Just&quot;&gt;Just&lt;/a&gt;&lt;/code&gt; results.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a76552525b158c8f82471de156e40e2bcc3b1ce2" translate="yes" xml:space="preserve">
          <source>O(n). Map keys/values and separate the &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-either#v:Left&quot;&gt;Left&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-either#v:Right&quot;&gt;Right&lt;/a&gt;&lt;/code&gt; results.</source>
          <target state="translated">En). Asigne claves / valores y separe los resultados &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-either#v:Left&quot;&gt;Left&lt;/a&gt;&lt;/code&gt; y &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-either#v:Right&quot;&gt;Right&lt;/a&gt;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="ce87fa336090794b430dffb93a1aa680a08ec249" translate="yes" xml:space="preserve">
          <source>O(n). Map keys/values and separate the &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-either#v:Left&quot;&gt;Left&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-either#v:Right&quot;&gt;Right&lt;/a&gt;&lt;/code&gt; results.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="21ef8296af9f2afa8f9a15c44e3ba51476cd14c0" translate="yes" xml:space="preserve">
          <source>O(n). Map values and collect the &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-maybe#v:Just&quot;&gt;Just&lt;/a&gt;&lt;/code&gt; results.</source>
          <target state="translated">En). Asigne valores y recopile los resultados &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-maybe#v:Just&quot;&gt;Just&lt;/a&gt;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="55c1e98a2221ffac22c5939a66b681d19acfa130" translate="yes" xml:space="preserve">
          <source>O(n). Map values and collect the &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-maybe#v:Just&quot;&gt;Just&lt;/a&gt;&lt;/code&gt; results.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="14a7913e311b4b3e728eced4de41876519fbb7e7" translate="yes" xml:space="preserve">
          <source>O(n). Map values and separate the &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-either#v:Left&quot;&gt;Left&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-either#v:Right&quot;&gt;Right&lt;/a&gt;&lt;/code&gt; results.</source>
          <target state="translated">En). Asigne valores y separe los resultados &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-either#v:Left&quot;&gt;Left&lt;/a&gt;&lt;/code&gt; y &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-either#v:Right&quot;&gt;Right&lt;/a&gt;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="b9b96cb297dd47e10a91d6aeb4a32a68cf77577d" translate="yes" xml:space="preserve">
          <source>O(n). Map values and separate the &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-either#v:Left&quot;&gt;Left&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-either#v:Right&quot;&gt;Right&lt;/a&gt;&lt;/code&gt; results.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7da1bbef23d470faa79587e532c71aeb2dfb06f2" translate="yes" xml:space="preserve">
          <source>O(n). Number of elements in the map.</source>
          <target state="translated">O(n).Número de elementos en el mapa.</target>
        </trans-unit>
        <trans-unit id="ca7813a01116d9f994a862c3f8f3c0e0a4161a02" translate="yes" xml:space="preserve">
          <source>O(n). Partition the map according to a predicate. The first map contains all elements that satisfy the predicate, the second all elements that fail the predicate. See also &lt;code&gt;&lt;a href=&quot;data-map-lazy#v:split&quot;&gt;split&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">En). Divida el mapa de acuerdo con un predicado. El primer mapa contiene todos los elementos que satisfacen el predicado, el segundo todos los elementos que fallan en el predicado. Consulte tambi&amp;eacute;n &lt;code&gt;&lt;a href=&quot;data-map-lazy#v:split&quot;&gt;split&lt;/a&gt;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="28a12b7c2ddf73425db47b25ff0e21286cfd08de" translate="yes" xml:space="preserve">
          <source>O(n). Partition the map according to a predicate. The first map contains all elements that satisfy the predicate, the second all elements that fail the predicate. See also &lt;code&gt;&lt;a href=&quot;data-map-strict#v:split&quot;&gt;split&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">En). Divida el mapa de acuerdo con un predicado. El primer mapa contiene todos los elementos que satisfacen el predicado, el segundo todos los elementos que fallan en el predicado. Consulte tambi&amp;eacute;n &lt;code&gt;&lt;a href=&quot;data-map-strict#v:split&quot;&gt;split&lt;/a&gt;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="f5c46ac5acbc5460bd950b307564d31030391a54" translate="yes" xml:space="preserve">
          <source>O(n). Partition the map according to some predicate. The first map contains all elements that satisfy the predicate, the second all elements that fail the predicate. See also &lt;code&gt;&lt;a href=&quot;data-intmap-lazy#v:split&quot;&gt;split&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">En). Divida el mapa de acuerdo con alg&amp;uacute;n predicado. El primer mapa contiene todos los elementos que satisfacen el predicado, el segundo todos los elementos que fallan en el predicado. Consulte tambi&amp;eacute;n &lt;code&gt;&lt;a href=&quot;data-intmap-lazy#v:split&quot;&gt;split&lt;/a&gt;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="bb64cc06d0fc5872d58a6d9d2df165ac0912e391" translate="yes" xml:space="preserve">
          <source>O(n). Partition the map according to some predicate. The first map contains all elements that satisfy the predicate, the second all elements that fail the predicate. See also &lt;code&gt;&lt;a href=&quot;data-intmap-strict#v:split&quot;&gt;split&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">En). Divida el mapa de acuerdo con alg&amp;uacute;n predicado. El primer mapa contiene todos los elementos que satisfacen el predicado, el segundo todos los elementos que fallan en el predicado. Consulte tambi&amp;eacute;n &lt;code&gt;&lt;a href=&quot;data-intmap-strict#v:split&quot;&gt;split&lt;/a&gt;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="c5902e7b9cb1e33328a5723641e3facd75d1f04e" translate="yes" xml:space="preserve">
          <source>O(n). Partition the map according to some predicate. The first map contains all elements that satisfy the predicate, the second all elements that fail the predicate. See also &lt;code&gt;&lt;a href=&quot;data-intmap-strict-internal#v:split&quot;&gt;split&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">En). Divida el mapa de acuerdo con alg&amp;uacute;n predicado. El primer mapa contiene todos los elementos que satisfacen el predicado, el segundo todos los elementos que fallan en el predicado. Consulte tambi&amp;eacute;n &lt;code&gt;&lt;a href=&quot;data-intmap-strict-internal#v:split&quot;&gt;split&lt;/a&gt;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="6e4689f50053d60e8b12bc8079d817dada74746c" translate="yes" xml:space="preserve">
          <source>O(n). Partition the set into two sets, one with all elements that satisfy the predicate and one with all elements that don't satisfy the predicate. See also &lt;code&gt;&lt;a href=&quot;data-set#v:split&quot;&gt;split&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">En). Divida el conjunto en dos conjuntos, uno con todos los elementos que satisfacen el predicado y otro con todos los elementos que no satisfacen el predicado. Consulte tambi&amp;eacute;n &lt;code&gt;&lt;a href=&quot;data-set#v:split&quot;&gt;split&lt;/a&gt;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="a20953ab24f48d2ba8110890acc9412f0f62d973" translate="yes" xml:space="preserve">
          <source>O(n). Return all elements of the map in the ascending order of their keys. Subject to list fusion.</source>
          <target state="translated">O(n).Devuelve todos los elementos del mapa en el orden ascendente de sus claves.Sujeto a la fusión de la lista.</target>
        </trans-unit>
        <trans-unit id="8630a78da8f5c0cfe78e345d3f2e551e0b67329d" translate="yes" xml:space="preserve">
          <source>O(n). Return all keys of the map in ascending order. Subject to list fusion.</source>
          <target state="translated">O(n).Devuelve todas las claves del mapa en orden ascendente.Sujeto a la fusión de la lista.</target>
        </trans-unit>
        <trans-unit id="43824a6f5c7483ca2f085a077e4596429bfc3cd1" translate="yes" xml:space="preserve">
          <source>O(n). Return all the elements of a list except the last one. The list must be non-empty.</source>
          <target state="translated">O(n).Devuelve todos los elementos de una lista excepto el último.La lista no debe estar vacía.</target>
        </trans-unit>
        <trans-unit id="36a68651939ea7bf78af13ecbe22bf7688a51736" translate="yes" xml:space="preserve">
          <source>O(n). Show the tree that implements the map. The tree is shown in a compressed, hanging format.</source>
          <target state="translated">O(n).Muestra el árbol que implementa el mapa.El árbol se muestra en un formato comprimido y colgante.</target>
        </trans-unit>
        <trans-unit id="4e4db00c39363393d519fb5c4366332a6fb0de88" translate="yes" xml:space="preserve">
          <source>O(n). Show the tree that implements the map. The tree is shown in a compressed, hanging format. See &lt;code&gt;&lt;a href=&quot;data-map-internal-debug#v:showTreeWith&quot;&gt;showTreeWith&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">En). Muestre el &amp;aacute;rbol que implementa el mapa. El &amp;aacute;rbol se muestra en un formato colgante comprimido. Ver &lt;code&gt;&lt;a href=&quot;data-map-internal-debug#v:showTreeWith&quot;&gt;showTreeWith&lt;/a&gt;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="88ce9adb9e14ba216ad42950a875bc9c14a8209f" translate="yes" xml:space="preserve">
          <source>O(n). Show the tree that implements the set. The tree is shown in a compressed, hanging format.</source>
          <target state="translated">O(n).Muestra el árbol que implementa el conjunto.El árbol se muestra en un formato comprimido y colgante.</target>
        </trans-unit>
        <trans-unit id="9c10017bd592438d3e62d5bc2e00b9865930af4a" translate="yes" xml:space="preserve">
          <source>O(n). Test if the internal map structure is valid.</source>
          <target state="translated">O(n).Pruebe si la estructura interna del mapa es válida.</target>
        </trans-unit>
        <trans-unit id="c0d7d3d821d1ee1593fb61d9e36825865c839d05" translate="yes" xml:space="preserve">
          <source>O(n). Test if the internal set structure is valid.</source>
          <target state="translated">O(n).Pruebe si la estructura del conjunto interno es válida.</target>
        </trans-unit>
        <trans-unit id="2bd8d3ca7f264c1dfc39c248ff7bff4929785346" translate="yes" xml:space="preserve">
          <source>O(n). The</source>
          <target state="translated">O(n).El</target>
        </trans-unit>
        <trans-unit id="5493b27f1c4b773117d6ff6c8ac89adcfcc21bb4" translate="yes" xml:space="preserve">
          <source>O(n). The &lt;code&gt;&lt;a href=&quot;data-list#v:deleteBy&quot;&gt;deleteBy&lt;/a&gt;&lt;/code&gt; function behaves like &lt;code&gt;&lt;a href=&quot;data-list#v:delete&quot;&gt;delete&lt;/a&gt;&lt;/code&gt;, but takes a user-supplied equality predicate.</source>
          <target state="translated">En). La funci&amp;oacute;n &lt;code&gt;&lt;a href=&quot;data-list#v:deleteBy&quot;&gt;deleteBy&lt;/a&gt;&lt;/code&gt; se comporta como &lt;code&gt;&lt;a href=&quot;data-list#v:delete&quot;&gt;delete&lt;/a&gt;&lt;/code&gt; , pero toma un predicado de igualdad proporcionado por el usuario.</target>
        </trans-unit>
        <trans-unit id="98032ca70b502ed7c8b616f957d53d84d7de967b" translate="yes" xml:space="preserve">
          <source>O(n). The &lt;code&gt;&lt;a href=&quot;data-list#v:genericLength&quot;&gt;genericLength&lt;/a&gt;&lt;/code&gt; function is an overloaded version of &lt;code&gt;&lt;a href=&quot;ghc-list#v:length&quot;&gt;length&lt;/a&gt;&lt;/code&gt;. In particular, instead of returning an &lt;code&gt;&lt;a href=&quot;data-int#t:Int&quot;&gt;Int&lt;/a&gt;&lt;/code&gt;, it returns any type which is an instance of &lt;code&gt;&lt;a href=&quot;prelude#t:Num&quot;&gt;Num&lt;/a&gt;&lt;/code&gt;. It is, however, less efficient than &lt;code&gt;&lt;a href=&quot;ghc-list#v:length&quot;&gt;length&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">En). La funci&amp;oacute;n &lt;code&gt;&lt;a href=&quot;data-list#v:genericLength&quot;&gt;genericLength&lt;/a&gt;&lt;/code&gt; es una versi&amp;oacute;n sobrecargada de &lt;code&gt;&lt;a href=&quot;ghc-list#v:length&quot;&gt;length&lt;/a&gt;&lt;/code&gt; . En particular, en lugar de devolver un &lt;code&gt;&lt;a href=&quot;data-int#t:Int&quot;&gt;Int&lt;/a&gt;&lt;/code&gt; , devuelve cualquier tipo que sea una instancia de &lt;code&gt;&lt;a href=&quot;prelude#t:Num&quot;&gt;Num&lt;/a&gt;&lt;/code&gt; . Sin embargo, es menos eficaz que la &lt;code&gt;&lt;a href=&quot;ghc-list#v:length&quot;&gt;length&lt;/a&gt;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="4587623b8218c7dd5734795fb0233350ad1937cf" translate="yes" xml:space="preserve">
          <source>O(n). The &lt;code&gt;&lt;a href=&quot;data-list#v:insert&quot;&gt;insert&lt;/a&gt;&lt;/code&gt; function takes an element and a list and inserts the element into the list at the first position where it is less than or equal to the next element. In particular, if the list is sorted before the call, the result will also be sorted. It is a special case of &lt;code&gt;&lt;a href=&quot;data-list#v:insertBy&quot;&gt;insertBy&lt;/a&gt;&lt;/code&gt;, which allows the programmer to supply their own comparison function.</source>
          <target state="translated">En). La funci&amp;oacute;n de &lt;code&gt;&lt;a href=&quot;data-list#v:insert&quot;&gt;insert&lt;/a&gt;&lt;/code&gt; toma un elemento y una lista e inserta el elemento en la lista en la primera posici&amp;oacute;n donde es menor o igual que el siguiente elemento. En particular, si la lista est&amp;aacute; ordenada antes de la llamada, el resultado tambi&amp;eacute;n se ordenar&amp;aacute;. Es un caso especial de &lt;code&gt;&lt;a href=&quot;data-list#v:insertBy&quot;&gt;insertBy&lt;/a&gt;&lt;/code&gt; , que permite al programador proporcionar su propia funci&amp;oacute;n de comparaci&amp;oacute;n.</target>
        </trans-unit>
        <trans-unit id="9ebaa6a5d93309f39c904f20878a239aa03b7857" translate="yes" xml:space="preserve">
          <source>O(n). The &lt;code&gt;&lt;a href=&quot;data-list#v:intersperse&quot;&gt;intersperse&lt;/a&gt;&lt;/code&gt; function takes an element and a list and `intersperses' that element between the elements of the list. For example,</source>
          <target state="translated">En). La funci&amp;oacute;n &lt;code&gt;&lt;a href=&quot;data-list#v:intersperse&quot;&gt;intersperse&lt;/a&gt;&lt;/code&gt; toma un elemento y una lista y 'intercala' ese elemento entre los elementos de la lista. Por ejemplo,</target>
        </trans-unit>
        <trans-unit id="fa50d5aae03c95132217bf805fdc774a3e03caa7" translate="yes" xml:space="preserve">
          <source>O(n). The &lt;code&gt;&lt;a href=&quot;data-list#v:tails&quot;&gt;tails&lt;/a&gt;&lt;/code&gt; function returns all final segments of the argument, longest first. For example,</source>
          <target state="translated">En). La funci&amp;oacute;n &lt;code&gt;&lt;a href=&quot;data-list#v:tails&quot;&gt;tails&lt;/a&gt;&lt;/code&gt; devuelve todos los segmentos finales del argumento, el m&amp;aacute;s largo primero. Por ejemplo,</target>
        </trans-unit>
        <trans-unit id="ef3cd44c571d67791124813dab1fa2f48dd03156" translate="yes" xml:space="preserve">
          <source>O(n). The &lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:deleteBy&quot;&gt;deleteBy&lt;/a&gt;&lt;/code&gt; function behaves like &lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:delete&quot;&gt;delete&lt;/a&gt;&lt;/code&gt;, but takes a user-supplied equality predicate.</source>
          <target state="translated">En). La funci&amp;oacute;n &lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:deleteBy&quot;&gt;deleteBy&lt;/a&gt;&lt;/code&gt; se comporta como &lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:delete&quot;&gt;delete&lt;/a&gt;&lt;/code&gt; , pero toma un predicado de igualdad proporcionado por el usuario.</target>
        </trans-unit>
        <trans-unit id="210217c8f0159a82488ae5aab8cb5e35cf178bf9" translate="yes" xml:space="preserve">
          <source>O(n). The &lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:genericLength&quot;&gt;genericLength&lt;/a&gt;&lt;/code&gt; function is an overloaded version of &lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:length&quot;&gt;length&lt;/a&gt;&lt;/code&gt;. In particular, instead of returning an &lt;code&gt;&lt;a href=&quot;data-int#t:Int&quot;&gt;Int&lt;/a&gt;&lt;/code&gt;, it returns any type which is an instance of &lt;code&gt;&lt;a href=&quot;prelude#t:Num&quot;&gt;Num&lt;/a&gt;&lt;/code&gt;. It is, however, less efficient than &lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:length&quot;&gt;length&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">En). La funci&amp;oacute;n &lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:genericLength&quot;&gt;genericLength&lt;/a&gt;&lt;/code&gt; es una versi&amp;oacute;n sobrecargada de &lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:length&quot;&gt;length&lt;/a&gt;&lt;/code&gt; . En particular, en lugar de devolver un &lt;code&gt;&lt;a href=&quot;data-int#t:Int&quot;&gt;Int&lt;/a&gt;&lt;/code&gt; , devuelve cualquier tipo que sea una instancia de &lt;code&gt;&lt;a href=&quot;prelude#t:Num&quot;&gt;Num&lt;/a&gt;&lt;/code&gt; . Sin embargo, es menos eficaz que la &lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:length&quot;&gt;length&lt;/a&gt;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="5f0dc6a5ad6bfd25e9bea807673a76890fa48497" translate="yes" xml:space="preserve">
          <source>O(n). The &lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:insert&quot;&gt;insert&lt;/a&gt;&lt;/code&gt; function takes an element and a list and inserts the element into the list at the first position where it is less than or equal to the next element. In particular, if the list is sorted before the call, the result will also be sorted. It is a special case of &lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:insertBy&quot;&gt;insertBy&lt;/a&gt;&lt;/code&gt;, which allows the programmer to supply their own comparison function.</source>
          <target state="translated">En). La funci&amp;oacute;n de &lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:insert&quot;&gt;insert&lt;/a&gt;&lt;/code&gt; toma un elemento y una lista e inserta el elemento en la lista en la primera posici&amp;oacute;n donde es menor o igual que el siguiente elemento. En particular, si la lista est&amp;aacute; ordenada antes de la llamada, el resultado tambi&amp;eacute;n se ordenar&amp;aacute;. Es un caso especial de &lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:insertBy&quot;&gt;insertBy&lt;/a&gt;&lt;/code&gt; , que permite al programador proporcionar su propia funci&amp;oacute;n de comparaci&amp;oacute;n.</target>
        </trans-unit>
        <trans-unit id="c3afabf0106af3fe4e53fef7849c2befc5d24bc8" translate="yes" xml:space="preserve">
          <source>O(n). The &lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:intersperse&quot;&gt;intersperse&lt;/a&gt;&lt;/code&gt; function takes an element and a list and `intersperses' that element between the elements of the list. For example,</source>
          <target state="translated">En). La funci&amp;oacute;n &lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:intersperse&quot;&gt;intersperse&lt;/a&gt;&lt;/code&gt; toma un elemento y una lista y 'intercala' ese elemento entre los elementos de la lista. Por ejemplo,</target>
        </trans-unit>
        <trans-unit id="c8f7a2b4ac8edf7f65996f45e45238e7654a6a8b" translate="yes" xml:space="preserve">
          <source>O(n). The &lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:tails&quot;&gt;tails&lt;/a&gt;&lt;/code&gt; function returns all final segments of the argument, longest first. For example,</source>
          <target state="translated">En). La funci&amp;oacute;n &lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:tails&quot;&gt;tails&lt;/a&gt;&lt;/code&gt; devuelve todos los segmentos finales del argumento, el m&amp;aacute;s largo primero. Por ejemplo,</target>
        </trans-unit>
        <trans-unit id="d2429730dc6a42eb0c6a71c287aab27365db1896" translate="yes" xml:space="preserve">
          <source>O(n). The expression (&lt;code&gt;&lt;a href=&quot;data-intmap-internal-debug#v:showTreeWith&quot;&gt;showTreeWith&lt;/a&gt; hang wide map&lt;/code&gt;) shows the tree that implements the map. If &lt;code&gt;hang&lt;/code&gt; is &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-bool#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt;, a &lt;em&gt;hanging&lt;/em&gt; tree is shown otherwise a rotated tree is shown. If &lt;code&gt;wide&lt;/code&gt; is &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-bool#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt;, an extra wide version is shown.</source>
          <target state="translated">En). La expresi&amp;oacute;n ( &lt;code&gt;&lt;a href=&quot;data-intmap-internal-debug#v:showTreeWith&quot;&gt;showTreeWith&lt;/a&gt; hang wide map&lt;/code&gt; ) muestra el &amp;aacute;rbol que implementa el mapa. Si &lt;code&gt;hang&lt;/code&gt; es &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-bool#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt; , se muestra un &amp;aacute;rbol &lt;em&gt;colgante; de&lt;/em&gt; lo contrario, se muestra un &amp;aacute;rbol girado. Si &lt;code&gt;wide&lt;/code&gt; es &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-bool#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt; , se muestra una versi&amp;oacute;n extra ancha.</target>
        </trans-unit>
        <trans-unit id="bfa2e61261498c9b3a9c1d95d6d6c8c7f045984d" translate="yes" xml:space="preserve">
          <source>O(n). The expression (&lt;code&gt;&lt;a href=&quot;data-intmap-internal-debug#v:showTreeWith&quot;&gt;showTreeWith&lt;/a&gt; hang wide map&lt;/code&gt;) shows the tree that implements the map. If &lt;code&gt;hang&lt;/code&gt; is &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-bool#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt;, a &lt;em&gt;hanging&lt;/em&gt; tree is shown otherwise a rotated tree is shown. If &lt;code&gt;wide&lt;/code&gt; is &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-bool#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt;, an extra wide version is shown.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3307bd4f4ef6829ef4be8f3a64ed42b0e6348c5a" translate="yes" xml:space="preserve">
          <source>O(n). The expression (&lt;code&gt;&lt;a href=&quot;data-intset#v:showTreeWith&quot;&gt;showTreeWith&lt;/a&gt; hang wide map&lt;/code&gt;) shows the tree that implements the set. If &lt;code&gt;hang&lt;/code&gt; is &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-bool#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt;, a &lt;em&gt;hanging&lt;/em&gt; tree is shown otherwise a rotated tree is shown. If &lt;code&gt;wide&lt;/code&gt; is &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-bool#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt;, an extra wide version is shown.</source>
          <target state="translated">En). La expresi&amp;oacute;n ( &lt;code&gt;&lt;a href=&quot;data-intset#v:showTreeWith&quot;&gt;showTreeWith&lt;/a&gt; hang wide map&lt;/code&gt; ) muestra el &amp;aacute;rbol que implementa el conjunto. Si &lt;code&gt;hang&lt;/code&gt; es &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-bool#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt; , se muestra un &amp;aacute;rbol &lt;em&gt;colgante; de&lt;/em&gt; lo contrario, se muestra un &amp;aacute;rbol girado. Si &lt;code&gt;wide&lt;/code&gt; es &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-bool#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt; , se muestra una versi&amp;oacute;n extra ancha.</target>
        </trans-unit>
        <trans-unit id="1e19c399e5ec72b22fa5e9e212b3f04b3d856870" translate="yes" xml:space="preserve">
          <source>O(n). The expression (&lt;code&gt;&lt;a href=&quot;data-intset#v:showTreeWith&quot;&gt;showTreeWith&lt;/a&gt; hang wide map&lt;/code&gt;) shows the tree that implements the set. If &lt;code&gt;hang&lt;/code&gt; is &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-bool#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt;, a &lt;em&gt;hanging&lt;/em&gt; tree is shown otherwise a rotated tree is shown. If &lt;code&gt;wide&lt;/code&gt; is &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-bool#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt;, an extra wide version is shown.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="831d42878394a9a0d4ea363502b8a5dd7e6cba2e" translate="yes" xml:space="preserve">
          <source>O(n). The expression (&lt;code&gt;&lt;a href=&quot;data-intset-internal#v:showTreeWith&quot;&gt;showTreeWith&lt;/a&gt; hang wide map&lt;/code&gt;) shows the tree that implements the set. If &lt;code&gt;hang&lt;/code&gt; is &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-bool#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt;, a &lt;em&gt;hanging&lt;/em&gt; tree is shown otherwise a rotated tree is shown. If &lt;code&gt;wide&lt;/code&gt; is &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-bool#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt;, an extra wide version is shown.</source>
          <target state="translated">En). La expresi&amp;oacute;n ( &lt;code&gt;&lt;a href=&quot;data-intset-internal#v:showTreeWith&quot;&gt;showTreeWith&lt;/a&gt; hang wide map&lt;/code&gt; ) muestra el &amp;aacute;rbol que implementa el conjunto. Si &lt;code&gt;hang&lt;/code&gt; es &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-bool#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt; , se muestra un &amp;aacute;rbol &lt;em&gt;colgante; de&lt;/em&gt; lo contrario, se muestra un &amp;aacute;rbol girado. Si &lt;code&gt;wide&lt;/code&gt; es &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-bool#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt; , se muestra una versi&amp;oacute;n extra ancha.</target>
        </trans-unit>
        <trans-unit id="648df4fcaa104208481e88bc7693b141962f74e9" translate="yes" xml:space="preserve">
          <source>O(n). The expression (&lt;code&gt;&lt;a href=&quot;data-intset-internal#v:showTreeWith&quot;&gt;showTreeWith&lt;/a&gt; hang wide map&lt;/code&gt;) shows the tree that implements the set. If &lt;code&gt;hang&lt;/code&gt; is &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-bool#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt;, a &lt;em&gt;hanging&lt;/em&gt; tree is shown otherwise a rotated tree is shown. If &lt;code&gt;wide&lt;/code&gt; is &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-bool#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt;, an extra wide version is shown.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1bf0dd685c64224551ec47eef3c51bd8a8276bcd" translate="yes" xml:space="preserve">
          <source>O(n). The expression (&lt;code&gt;&lt;a href=&quot;data-map-internal-debug#v:showTreeWith&quot;&gt;showTreeWith&lt;/a&gt; showelem hang wide map&lt;/code&gt;) shows the tree that implements the map. Elements are shown using the &lt;code&gt;showElem&lt;/code&gt; function. If &lt;code&gt;hang&lt;/code&gt; is &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-bool#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt;, a &lt;em&gt;hanging&lt;/em&gt; tree is shown otherwise a rotated tree is shown. If &lt;code&gt;wide&lt;/code&gt; is &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-bool#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt;, an extra wide version is shown.</source>
          <target state="translated">En). La expresi&amp;oacute;n ( &lt;code&gt;&lt;a href=&quot;data-map-internal-debug#v:showTreeWith&quot;&gt;showTreeWith&lt;/a&gt; showelem hang wide map&lt;/code&gt; ) muestra el &amp;aacute;rbol que implementa el mapa. Los elementos se muestran usando la funci&amp;oacute;n &lt;code&gt;showElem&lt;/code&gt; . Si &lt;code&gt;hang&lt;/code&gt; es &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-bool#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt; , se muestra un &amp;aacute;rbol &lt;em&gt;colgante; de&lt;/em&gt; lo contrario, se muestra un &amp;aacute;rbol girado. Si &lt;code&gt;wide&lt;/code&gt; es &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-bool#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt; , se muestra una versi&amp;oacute;n extra ancha.</target>
        </trans-unit>
        <trans-unit id="56f0cde755d4f17130983af6ad45b003dff4a553" translate="yes" xml:space="preserve">
          <source>O(n). The expression (&lt;code&gt;&lt;a href=&quot;data-map-internal-debug#v:showTreeWith&quot;&gt;showTreeWith&lt;/a&gt; showelem hang wide map&lt;/code&gt;) shows the tree that implements the map. Elements are shown using the &lt;code&gt;showElem&lt;/code&gt; function. If &lt;code&gt;hang&lt;/code&gt; is &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-bool#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt;, a &lt;em&gt;hanging&lt;/em&gt; tree is shown otherwise a rotated tree is shown. If &lt;code&gt;wide&lt;/code&gt; is &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-bool#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt;, an extra wide version is shown.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7888e014ff70e7da6951568cde6d193cdf7e76d0" translate="yes" xml:space="preserve">
          <source>O(n). The expression (&lt;code&gt;showTreeWith hang wide map&lt;/code&gt;) shows the tree that implements the set. If &lt;code&gt;hang&lt;/code&gt; is &lt;code&gt;True&lt;/code&gt;, a &lt;em&gt;hanging&lt;/em&gt; tree is shown otherwise a rotated tree is shown. If &lt;code&gt;wide&lt;/code&gt; is &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-bool#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt;, an extra wide version is shown.</source>
          <target state="translated">En). La expresi&amp;oacute;n ( &lt;code&gt;showTreeWith hang wide map&lt;/code&gt; ) muestra el &amp;aacute;rbol que implementa el conjunto. Si &lt;code&gt;hang&lt;/code&gt; es &lt;code&gt;True&lt;/code&gt; , se muestra un &amp;aacute;rbol &lt;em&gt;colgante; de&lt;/em&gt; lo contrario, se muestra un &amp;aacute;rbol girado. Si &lt;code&gt;wide&lt;/code&gt; es &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-bool#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt; , se muestra una versi&amp;oacute;n extra ancha.</target>
        </trans-unit>
        <trans-unit id="1a39d4aadf2415d3ca8e7782698cd0da4aaeef91" translate="yes" xml:space="preserve">
          <source>O(n). The expression (&lt;code&gt;showTreeWith hang wide map&lt;/code&gt;) shows the tree that implements the set. If &lt;code&gt;hang&lt;/code&gt; is &lt;code&gt;True&lt;/code&gt;, a &lt;em&gt;hanging&lt;/em&gt; tree is shown otherwise a rotated tree is shown. If &lt;code&gt;wide&lt;/code&gt; is &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-bool#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt;, an extra wide version is shown.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4a3b936d7a2a3abf4106e26a74b1016792d526db" translate="yes" xml:space="preserve">
          <source>O(n). The function &lt;code&gt;&lt;a href=&quot;data-intmap-lazy#v:mapAccum&quot;&gt;mapAccum&lt;/a&gt;&lt;/code&gt; threads an accumulating argument through the map in ascending order of keys.</source>
          <target state="translated">En). La funci&amp;oacute;n &lt;code&gt;&lt;a href=&quot;data-intmap-lazy#v:mapAccum&quot;&gt;mapAccum&lt;/a&gt;&lt;/code&gt; enhebra un argumento acumulativo a trav&amp;eacute;s del mapa en orden ascendente de claves.</target>
        </trans-unit>
        <trans-unit id="e30c90b941aefaaec19001464154f4f386904d0c" translate="yes" xml:space="preserve">
          <source>O(n). The function &lt;code&gt;&lt;a href=&quot;data-intmap-lazy#v:mapAccumWithKey&quot;&gt;mapAccumWithKey&lt;/a&gt;&lt;/code&gt; threads an accumulating argument through the map in ascending order of keys.</source>
          <target state="translated">En). La funci&amp;oacute;n &lt;code&gt;&lt;a href=&quot;data-intmap-lazy#v:mapAccumWithKey&quot;&gt;mapAccumWithKey&lt;/a&gt;&lt;/code&gt; enhebra un argumento acumulativo a trav&amp;eacute;s del mapa en orden ascendente de claves.</target>
        </trans-unit>
        <trans-unit id="be5d31fd21e879811ff4b354fe058f2becedf771" translate="yes" xml:space="preserve">
          <source>O(n). The function &lt;code&gt;&lt;a href=&quot;data-intmap-strict#v:mapAccum&quot;&gt;mapAccum&lt;/a&gt;&lt;/code&gt; threads an accumulating argument through the map in ascending order of keys.</source>
          <target state="translated">En). La funci&amp;oacute;n &lt;code&gt;&lt;a href=&quot;data-intmap-strict#v:mapAccum&quot;&gt;mapAccum&lt;/a&gt;&lt;/code&gt; enhebra un argumento acumulativo a trav&amp;eacute;s del mapa en orden ascendente de claves.</target>
        </trans-unit>
        <trans-unit id="45c5776f771ab7b4fe7f9402624ccc49e8f16dbf" translate="yes" xml:space="preserve">
          <source>O(n). The function &lt;code&gt;&lt;a href=&quot;data-intmap-strict#v:mapAccumWithKey&quot;&gt;mapAccumWithKey&lt;/a&gt;&lt;/code&gt; threads an accumulating argument through the map in ascending order of keys.</source>
          <target state="translated">En). La funci&amp;oacute;n &lt;code&gt;&lt;a href=&quot;data-intmap-strict#v:mapAccumWithKey&quot;&gt;mapAccumWithKey&lt;/a&gt;&lt;/code&gt; enhebra un argumento acumulativo a trav&amp;eacute;s del mapa en orden ascendente de claves.</target>
        </trans-unit>
        <trans-unit id="7445f426a041c9fcafb5b12bd274a6d8e517ce70" translate="yes" xml:space="preserve">
          <source>O(n). The function &lt;code&gt;&lt;a href=&quot;data-intmap-strict-internal#v:mapAccum&quot;&gt;mapAccum&lt;/a&gt;&lt;/code&gt; threads an accumulating argument through the map in ascending order of keys.</source>
          <target state="translated">En). La funci&amp;oacute;n &lt;code&gt;&lt;a href=&quot;data-intmap-strict-internal#v:mapAccum&quot;&gt;mapAccum&lt;/a&gt;&lt;/code&gt; enhebra un argumento acumulativo a trav&amp;eacute;s del mapa en orden ascendente de claves.</target>
        </trans-unit>
        <trans-unit id="644ee7ec96c4f77595cefdcc9ad11d6644044af7" translate="yes" xml:space="preserve">
          <source>O(n). The function &lt;code&gt;&lt;a href=&quot;data-intmap-strict-internal#v:mapAccumWithKey&quot;&gt;mapAccumWithKey&lt;/a&gt;&lt;/code&gt; threads an accumulating argument through the map in ascending order of keys.</source>
          <target state="translated">En). La funci&amp;oacute;n &lt;code&gt;&lt;a href=&quot;data-intmap-strict-internal#v:mapAccumWithKey&quot;&gt;mapAccumWithKey&lt;/a&gt;&lt;/code&gt; enhebra un argumento acumulativo a trav&amp;eacute;s del mapa en orden ascendente de claves.</target>
        </trans-unit>
        <trans-unit id="29c4c7f8af356ae75f35ab782687363d88d91f89" translate="yes" xml:space="preserve">
          <source>O(n). The function &lt;code&gt;&lt;a href=&quot;data-map-lazy#v:mapAccum&quot;&gt;mapAccum&lt;/a&gt;&lt;/code&gt; threads an accumulating argument through the map in ascending order of keys.</source>
          <target state="translated">En). La funci&amp;oacute;n &lt;code&gt;&lt;a href=&quot;data-map-lazy#v:mapAccum&quot;&gt;mapAccum&lt;/a&gt;&lt;/code&gt; enhebra un argumento acumulativo a trav&amp;eacute;s del mapa en orden ascendente de claves.</target>
        </trans-unit>
        <trans-unit id="efb4101740d24939f936f917a29d61d30dfd76ca" translate="yes" xml:space="preserve">
          <source>O(n). The function &lt;code&gt;&lt;a href=&quot;data-map-lazy#v:mapAccumWithKey&quot;&gt;mapAccumWithKey&lt;/a&gt;&lt;/code&gt; threads an accumulating argument through the map in ascending order of keys.</source>
          <target state="translated">En). La funci&amp;oacute;n &lt;code&gt;&lt;a href=&quot;data-map-lazy#v:mapAccumWithKey&quot;&gt;mapAccumWithKey&lt;/a&gt;&lt;/code&gt; enhebra un argumento acumulativo a trav&amp;eacute;s del mapa en orden ascendente de claves.</target>
        </trans-unit>
        <trans-unit id="e568b210fbc6e98ba452c9fff80dd6215c292bad" translate="yes" xml:space="preserve">
          <source>O(n). The function &lt;code&gt;&lt;a href=&quot;data-map-strict#v:mapAccum&quot;&gt;mapAccum&lt;/a&gt;&lt;/code&gt; threads an accumulating argument through the map in ascending order of keys.</source>
          <target state="translated">En). La funci&amp;oacute;n &lt;code&gt;&lt;a href=&quot;data-map-strict#v:mapAccum&quot;&gt;mapAccum&lt;/a&gt;&lt;/code&gt; enhebra un argumento acumulativo a trav&amp;eacute;s del mapa en orden ascendente de claves.</target>
        </trans-unit>
        <trans-unit id="b522ba3d40a23738c085941f155930d8976c8fba" translate="yes" xml:space="preserve">
          <source>O(n). The function &lt;code&gt;&lt;a href=&quot;data-map-strict#v:mapAccumWithKey&quot;&gt;mapAccumWithKey&lt;/a&gt;&lt;/code&gt; threads an accumulating argument through the map in ascending order of keys.</source>
          <target state="translated">En). La funci&amp;oacute;n &lt;code&gt;&lt;a href=&quot;data-map-strict#v:mapAccumWithKey&quot;&gt;mapAccumWithKey&lt;/a&gt;&lt;/code&gt; enhebra un argumento acumulativo a trav&amp;eacute;s del mapa en orden ascendente de claves.</target>
        </trans-unit>
        <trans-unit id="f477880ebda2d0dec0ff396ee9f082a19a4dc9a9" translate="yes" xml:space="preserve">
          <source>O(n). The function &lt;code&gt;mapAccumR&lt;/code&gt; threads an accumulating argument through the map in descending order of keys.</source>
          <target state="translated">En). La funci&amp;oacute;n &lt;code&gt;mapAccumR&lt;/code&gt; enhebra un argumento acumulativo a trav&amp;eacute;s del mapa en orden descendente de claves.</target>
        </trans-unit>
        <trans-unit id="a53abd52488386fcd346720aa042ddcb12d8ba07" translate="yes" xml:space="preserve">
          <source>O(n). The non-overloaded version of &lt;code&gt;&lt;a href=&quot;data-list#v:insert&quot;&gt;insert&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">En). La versi&amp;oacute;n no sobrecargada de &lt;code&gt;&lt;a href=&quot;data-list#v:insert&quot;&gt;insert&lt;/a&gt;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="defad20c6cc6143a71da5efc53c4695a5d70721a" translate="yes" xml:space="preserve">
          <source>O(n). The non-overloaded version of &lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:insert&quot;&gt;insert&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">En). La versi&amp;oacute;n no sobrecargada de &lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:insert&quot;&gt;insert&lt;/a&gt;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="c9619cc589ba678ece69e17342f4e0ee894c4288" translate="yes" xml:space="preserve">
          <source>O(n). The set of all keys of the map.</source>
          <target state="translated">O(n).El conjunto de todas las claves del mapa.</target>
        </trans-unit>
        <trans-unit id="bd0e59538306ce4d2d23d102dc288ea1dea4874c" translate="yes" xml:space="preserve">
          <source>O(n). Traverse keys/values and collect the &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-maybe#v:Just&quot;&gt;Just&lt;/a&gt;&lt;/code&gt; results.</source>
          <target state="translated">En). Recorra claves / valores y recopile los resultados &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-maybe#v:Just&quot;&gt;Just&lt;/a&gt;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="940f7036d1cd131308f7f749b45a120398ccb158" translate="yes" xml:space="preserve">
          <source>O(n). Traverse keys/values and collect the &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-maybe#v:Just&quot;&gt;Just&lt;/a&gt;&lt;/code&gt; results.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dd87eb599d9b5e6d71506fd91c6fd4256d0a7111" translate="yes" xml:space="preserve">
          <source>O(n). partition the set according to some predicate.</source>
          <target state="translated">O(n).Partir el conjunto según algún predicado.</target>
        </trans-unit>
        <trans-unit id="a6d18da55bd04db6f9b044076b9fc0b37e85d962" translate="yes" xml:space="preserve">
          <source>O(n)&lt;code&gt;&lt;a href=&quot;data-bytestring#v:cons&quot;&gt;cons&lt;/a&gt;&lt;/code&gt; is analogous to (:) for lists, but of different complexity, as it requires making a copy.</source>
          <target state="translated">O (n) &lt;code&gt;&lt;a href=&quot;data-bytestring#v:cons&quot;&gt;cons&lt;/a&gt;&lt;/code&gt; es an&amp;aacute;logo a (:) para listas, pero de diferente complejidad, ya que requiere hacer una copia.</target>
        </trans-unit>
        <trans-unit id="e87133507bf78c9e7a16270bfef3263e3368d0ef" translate="yes" xml:space="preserve">
          <source>O(n)&lt;code&gt;&lt;a href=&quot;data-bytestring#v:elem&quot;&gt;elem&lt;/a&gt;&lt;/code&gt; is the &lt;code&gt;&lt;a href=&quot;data-bytestring#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt; membership predicate.</source>
          <target state="translated">O (n) &lt;code&gt;&lt;a href=&quot;data-bytestring#v:elem&quot;&gt;elem&lt;/a&gt;&lt;/code&gt; es el predicado de pertenencia &lt;code&gt;&lt;a href=&quot;data-bytestring#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="fd3b0b58e2a7e1a52b5bc4c356abfb5643405318" translate="yes" xml:space="preserve">
          <source>O(n)&lt;code&gt;&lt;a href=&quot;data-bytestring#v:filter&quot;&gt;filter&lt;/a&gt;&lt;/code&gt;, applied to a predicate and a ByteString, returns a ByteString containing those characters that satisfy the predicate.</source>
          <target state="translated">El &lt;code&gt;&lt;a href=&quot;data-bytestring#v:filter&quot;&gt;filter&lt;/a&gt;&lt;/code&gt; O (n) , aplicado a un predicado y a ByteString, devuelve un ByteString que contiene los caracteres que satisfacen el predicado.</target>
        </trans-unit>
        <trans-unit id="6780da47a89a67bb9f3cf2a8d2655bfad738a16e" translate="yes" xml:space="preserve">
          <source>O(n)&lt;code&gt;&lt;a href=&quot;data-bytestring#v:map&quot;&gt;map&lt;/a&gt;&lt;/code&gt;&lt;code&gt;f xs&lt;/code&gt; is the ByteString obtained by applying &lt;code&gt;f&lt;/code&gt; to each element of &lt;code&gt;xs&lt;/code&gt;.</source>
          <target state="translated">O (n) &lt;code&gt;&lt;a href=&quot;data-bytestring#v:map&quot;&gt;map&lt;/a&gt;&lt;/code&gt; &lt;code&gt;f xs&lt;/code&gt; es el ByteString obtenido aplicando &lt;code&gt;f&lt;/code&gt; a cada elemento de &lt;code&gt;xs&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="607c54f2d193454c7f49eac5713df114d2e0a454" translate="yes" xml:space="preserve">
          <source>O(n)&lt;code&gt;&lt;a href=&quot;data-bytestring#v:maximum&quot;&gt;maximum&lt;/a&gt;&lt;/code&gt; returns the maximum value from a &lt;code&gt;&lt;a href=&quot;data-bytestring#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt; This function will fuse. An exception will be thrown in the case of an empty ByteString.</source>
          <target state="translated">O (n) &lt;code&gt;&lt;a href=&quot;data-bytestring#v:maximum&quot;&gt;maximum&lt;/a&gt;&lt;/code&gt; devuelve el valor m&amp;aacute;ximo de una &lt;code&gt;&lt;a href=&quot;data-bytestring#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt; Esta funci&amp;oacute;n se fusionar&amp;aacute;. Se lanzar&amp;aacute; una excepci&amp;oacute;n en el caso de un ByteString vac&amp;iacute;o.</target>
        </trans-unit>
        <trans-unit id="420f486298b5ea93389bc61a46e136d81c208a50" translate="yes" xml:space="preserve">
          <source>O(n)&lt;code&gt;&lt;a href=&quot;data-bytestring#v:minimum&quot;&gt;minimum&lt;/a&gt;&lt;/code&gt; returns the minimum value from a &lt;code&gt;&lt;a href=&quot;data-bytestring#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt; This function will fuse. An exception will be thrown in the case of an empty ByteString.</source>
          <target state="translated">O (n) &lt;code&gt;&lt;a href=&quot;data-bytestring#v:minimum&quot;&gt;minimum&lt;/a&gt;&lt;/code&gt; devuelve el valor m&amp;iacute;nimo de un &lt;code&gt;&lt;a href=&quot;data-bytestring#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt; Esta funci&amp;oacute;n se fusionar&amp;aacute;. Se lanzar&amp;aacute; una excepci&amp;oacute;n en el caso de un ByteString vac&amp;iacute;o.</target>
        </trans-unit>
        <trans-unit id="904125c9bd5092c22065ec505bcda6e71336cebf" translate="yes" xml:space="preserve">
          <source>O(n)&lt;code&gt;&lt;a href=&quot;data-bytestring#v:notElem&quot;&gt;notElem&lt;/a&gt;&lt;/code&gt; is the inverse of &lt;code&gt;&lt;a href=&quot;data-bytestring#v:elem&quot;&gt;elem&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">O (n) &lt;code&gt;&lt;a href=&quot;data-bytestring#v:notElem&quot;&gt;notElem&lt;/a&gt;&lt;/code&gt; es el inverso de &lt;code&gt;&lt;a href=&quot;data-bytestring#v:elem&quot;&gt;elem&lt;/a&gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="aadb1f7c5dc7e9de99f1a8013f57ab676303dfcc" translate="yes" xml:space="preserve">
          <source>O(n)&lt;code&gt;&lt;a href=&quot;data-bytestring#v:replicate&quot;&gt;replicate&lt;/a&gt;&lt;/code&gt;&lt;code&gt;n x&lt;/code&gt; is a ByteString of length &lt;code&gt;n&lt;/code&gt; with &lt;code&gt;x&lt;/code&gt; the value of every element. The following holds:</source>
          <target state="translated">O (n) &lt;code&gt;&lt;a href=&quot;data-bytestring#v:replicate&quot;&gt;replicate&lt;/a&gt;&lt;/code&gt; &lt;code&gt;n x&lt;/code&gt; es un ByteString de longitud &lt;code&gt;n&lt;/code&gt; con &lt;code&gt;x&lt;/code&gt; el valor de cada elemento. Lo siguiente es v&amp;aacute;lido:</target>
        </trans-unit>
        <trans-unit id="994f3cbfc5291a1e3c33531cf7ff5c9675e44117" translate="yes" xml:space="preserve">
          <source>O(n)&lt;code&gt;&lt;a href=&quot;data-bytestring#v:reverse&quot;&gt;reverse&lt;/a&gt;&lt;/code&gt;&lt;code&gt;xs&lt;/code&gt; efficiently returns the elements of &lt;code&gt;xs&lt;/code&gt; in reverse order.</source>
          <target state="translated">O (n) &lt;code&gt;&lt;a href=&quot;data-bytestring#v:reverse&quot;&gt;reverse&lt;/a&gt;&lt;/code&gt; &lt;code&gt;xs&lt;/code&gt; devuelve eficientemente los elementos de &lt;code&gt;xs&lt;/code&gt; en orden inverso.</target>
        </trans-unit>
        <trans-unit id="6b03bb07227481e418e2cb9f9128b364e6ce78ac" translate="yes" xml:space="preserve">
          <source>O(n)&lt;code&gt;&lt;a href=&quot;data-bytestring#v:unzip&quot;&gt;unzip&lt;/a&gt;&lt;/code&gt; transforms a list of pairs of bytes into a pair of ByteStrings. Note that this performs two &lt;code&gt;&lt;a href=&quot;data-bytestring#v:pack&quot;&gt;pack&lt;/a&gt;&lt;/code&gt; operations.</source>
          <target state="translated">O (n) &lt;code&gt;&lt;a href=&quot;data-bytestring#v:unzip&quot;&gt;unzip&lt;/a&gt;&lt;/code&gt; transforma una lista de pares de bytes en un par de ByteStrings. Tenga en cuenta que esto realiza dos operaciones de &lt;code&gt;&lt;a href=&quot;data-bytestring#v:pack&quot;&gt;pack&lt;/a&gt;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="e084291cb5bb6d7c40375664b0d9ba69b4daa281" translate="yes" xml:space="preserve">
          <source>O(n)&lt;code&gt;&lt;a href=&quot;data-bytestring#v:zip&quot;&gt;zip&lt;/a&gt;&lt;/code&gt; takes two ByteStrings and returns a list of corresponding pairs of bytes. If one input ByteString is short, excess elements of the longer ByteString are discarded. This is equivalent to a pair of &lt;code&gt;&lt;a href=&quot;data-bytestring#v:unpack&quot;&gt;unpack&lt;/a&gt;&lt;/code&gt; operations.</source>
          <target state="translated">O (n) &lt;code&gt;&lt;a href=&quot;data-bytestring#v:zip&quot;&gt;zip&lt;/a&gt;&lt;/code&gt; toma dos ByteStrings y devuelve una lista de los pares de bytes correspondientes. Si un ByteString de entrada es corto, los elementos sobrantes del ByteString m&amp;aacute;s largo se descartan. Esto equivale a un par de operaciones de &lt;code&gt;&lt;a href=&quot;data-bytestring#v:unpack&quot;&gt;unpack&lt;/a&gt;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="897f57bc1efb2a7b246b139b7d17f9f8b7289669" translate="yes" xml:space="preserve">
          <source>O(n)&lt;code&gt;&lt;a href=&quot;data-bytestring-char8#v:cons&quot;&gt;cons&lt;/a&gt;&lt;/code&gt; is analogous to (:) for lists, but of different complexity, as it requires a memcpy.</source>
          <target state="translated">O (n) &lt;code&gt;&lt;a href=&quot;data-bytestring-char8#v:cons&quot;&gt;cons&lt;/a&gt;&lt;/code&gt; es an&amp;aacute;logo a (:) para listas, pero de diferente complejidad, ya que requiere una memoria.</target>
        </trans-unit>
        <trans-unit id="8e061223a14e5f7b418f9492129f20987fd40f17" translate="yes" xml:space="preserve">
          <source>O(n)&lt;code&gt;&lt;a href=&quot;data-bytestring-char8#v:elem&quot;&gt;elem&lt;/a&gt;&lt;/code&gt; is the &lt;code&gt;&lt;a href=&quot;data-bytestring-char8#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt; membership predicate. This implementation uses &lt;code&gt;memchr(3)&lt;/code&gt;.</source>
          <target state="translated">O (n) &lt;code&gt;&lt;a href=&quot;data-bytestring-char8#v:elem&quot;&gt;elem&lt;/a&gt;&lt;/code&gt; es el predicado de pertenencia &lt;code&gt;&lt;a href=&quot;data-bytestring-char8#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt; . Esta implementaci&amp;oacute;n usa &lt;code&gt;memchr(3)&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="8a9c3cdee5acc43da1a053ba8975941b35050215" translate="yes" xml:space="preserve">
          <source>O(n)&lt;code&gt;&lt;a href=&quot;data-bytestring-char8#v:filter&quot;&gt;filter&lt;/a&gt;&lt;/code&gt;, applied to a predicate and a ByteString, returns a ByteString containing those characters that satisfy the predicate.</source>
          <target state="translated">El &lt;code&gt;&lt;a href=&quot;data-bytestring-char8#v:filter&quot;&gt;filter&lt;/a&gt;&lt;/code&gt; O (n) , aplicado a un predicado y a ByteString, devuelve un ByteString que contiene los caracteres que satisfacen el predicado.</target>
        </trans-unit>
        <trans-unit id="3366778fe3aa7fdde841f790f970185cb85baec8" translate="yes" xml:space="preserve">
          <source>O(n)&lt;code&gt;&lt;a href=&quot;data-bytestring-char8#v:map&quot;&gt;map&lt;/a&gt;&lt;/code&gt;&lt;code&gt;f xs&lt;/code&gt; is the ByteString obtained by applying &lt;code&gt;f&lt;/code&gt; to each element of &lt;code&gt;xs&lt;/code&gt;</source>
          <target state="translated">O (n) &lt;code&gt;&lt;a href=&quot;data-bytestring-char8#v:map&quot;&gt;map&lt;/a&gt;&lt;/code&gt; &lt;code&gt;f xs&lt;/code&gt; es el ByteString obtenido aplicando &lt;code&gt;f&lt;/code&gt; a cada elemento de &lt;code&gt;xs&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="a87438b3c1567d01fa16af6be1c70eb11f879c41" translate="yes" xml:space="preserve">
          <source>O(n)&lt;code&gt;&lt;a href=&quot;data-bytestring-char8#v:notElem&quot;&gt;notElem&lt;/a&gt;&lt;/code&gt; is the inverse of &lt;code&gt;&lt;a href=&quot;data-bytestring-char8#v:elem&quot;&gt;elem&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">O (n) &lt;code&gt;&lt;a href=&quot;data-bytestring-char8#v:notElem&quot;&gt;notElem&lt;/a&gt;&lt;/code&gt; es el inverso de &lt;code&gt;&lt;a href=&quot;data-bytestring-char8#v:elem&quot;&gt;elem&lt;/a&gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="e50638915a675c05dec99d62a49a89f284909123" translate="yes" xml:space="preserve">
          <source>O(n)&lt;code&gt;&lt;a href=&quot;data-bytestring-char8#v:replicate&quot;&gt;replicate&lt;/a&gt;&lt;/code&gt;&lt;code&gt;n x&lt;/code&gt; is a ByteString of length &lt;code&gt;n&lt;/code&gt; with &lt;code&gt;x&lt;/code&gt; the value of every element. The following holds:</source>
          <target state="translated">O (n) &lt;code&gt;&lt;a href=&quot;data-bytestring-char8#v:replicate&quot;&gt;replicate&lt;/a&gt;&lt;/code&gt; &lt;code&gt;n x&lt;/code&gt; es un ByteString de longitud &lt;code&gt;n&lt;/code&gt; con &lt;code&gt;x&lt;/code&gt; el valor de cada elemento. Lo siguiente es v&amp;aacute;lido:</target>
        </trans-unit>
        <trans-unit id="7dc7b4001e51ca96d33790d4fa04c8097941e947" translate="yes" xml:space="preserve">
          <source>O(n)&lt;code&gt;&lt;a href=&quot;data-bytestring-char8#v:reverse&quot;&gt;reverse&lt;/a&gt;&lt;/code&gt;&lt;code&gt;xs&lt;/code&gt; efficiently returns the elements of &lt;code&gt;xs&lt;/code&gt; in reverse order.</source>
          <target state="translated">O (n) &lt;code&gt;&lt;a href=&quot;data-bytestring-char8#v:reverse&quot;&gt;reverse&lt;/a&gt;&lt;/code&gt; &lt;code&gt;xs&lt;/code&gt; devuelve eficientemente los elementos de &lt;code&gt;xs&lt;/code&gt; en orden inverso.</target>
        </trans-unit>
        <trans-unit id="c49843235184b635597fc6bc634328f58d39343f" translate="yes" xml:space="preserve">
          <source>O(n)&lt;code&gt;&lt;a href=&quot;data-bytestring-char8#v:zip&quot;&gt;zip&lt;/a&gt;&lt;/code&gt; takes two ByteStrings and returns a list of corresponding pairs of Chars. If one input ByteString is short, excess elements of the longer ByteString are discarded. This is equivalent to a pair of &lt;code&gt;&lt;a href=&quot;data-bytestring-char8#v:unpack&quot;&gt;unpack&lt;/a&gt;&lt;/code&gt; operations, and so space usage may be large for multi-megabyte ByteStrings</source>
          <target state="translated">O (n) &lt;code&gt;&lt;a href=&quot;data-bytestring-char8#v:zip&quot;&gt;zip&lt;/a&gt;&lt;/code&gt; toma dos ByteStrings y devuelve una lista de los pares de caracteres correspondientes. Si un ByteString de entrada es corto, los elementos sobrantes del ByteString m&amp;aacute;s largo se descartan. Esto es equivalente a un par de operaciones de &lt;code&gt;&lt;a href=&quot;data-bytestring-char8#v:unpack&quot;&gt;unpack&lt;/a&gt;&lt;/code&gt; , por lo que el uso de espacio puede ser grande para ByteStrings de varios megabytes.</target>
        </trans-unit>
        <trans-unit id="be1ae7748e6f0f64f8d41767e7d09afa52892d1d" translate="yes" xml:space="preserve">
          <source>O(n)&lt;code&gt;&lt;a href=&quot;data-bytestring-lazy#v:elem&quot;&gt;elem&lt;/a&gt;&lt;/code&gt; is the &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt; membership predicate.</source>
          <target state="translated">O (n) &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy#v:elem&quot;&gt;elem&lt;/a&gt;&lt;/code&gt; es el predicado de pertenencia &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="e83bf67f47bcd12cb10b1c88852ce603cef046e6" translate="yes" xml:space="preserve">
          <source>O(n)&lt;code&gt;&lt;a href=&quot;data-bytestring-lazy#v:filter&quot;&gt;filter&lt;/a&gt;&lt;/code&gt;, applied to a predicate and a ByteString, returns a ByteString containing those characters that satisfy the predicate.</source>
          <target state="translated">El &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy#v:filter&quot;&gt;filter&lt;/a&gt;&lt;/code&gt; O (n) , aplicado a un predicado y a ByteString, devuelve un ByteString que contiene los caracteres que satisfacen el predicado.</target>
        </trans-unit>
        <trans-unit id="594f41e365f4c84a617876e5d010b0f3bf6c029f" translate="yes" xml:space="preserve">
          <source>O(n)&lt;code&gt;&lt;a href=&quot;data-bytestring-lazy#v:map&quot;&gt;map&lt;/a&gt;&lt;/code&gt;&lt;code&gt;f xs&lt;/code&gt; is the ByteString obtained by applying &lt;code&gt;f&lt;/code&gt; to each element of &lt;code&gt;xs&lt;/code&gt;.</source>
          <target state="translated">O (n) &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy#v:map&quot;&gt;map&lt;/a&gt;&lt;/code&gt; &lt;code&gt;f xs&lt;/code&gt; es el ByteString obtenido aplicando &lt;code&gt;f&lt;/code&gt; a cada elemento de &lt;code&gt;xs&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="637cb1e10be19103636ce06997ee5ab857d94fe8" translate="yes" xml:space="preserve">
          <source>O(n)&lt;code&gt;&lt;a href=&quot;data-bytestring-lazy#v:maximum&quot;&gt;maximum&lt;/a&gt;&lt;/code&gt; returns the maximum value from a &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">O (n) &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy#v:maximum&quot;&gt;maximum&lt;/a&gt;&lt;/code&gt; devuelve el valor m&amp;aacute;ximo de un &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="8c7604309eb5230fdf9522bd24f18245bf75a51f" translate="yes" xml:space="preserve">
          <source>O(n)&lt;code&gt;&lt;a href=&quot;data-bytestring-lazy#v:minimum&quot;&gt;minimum&lt;/a&gt;&lt;/code&gt; returns the minimum value from a &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">O (n) &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy#v:minimum&quot;&gt;minimum&lt;/a&gt;&lt;/code&gt; devuelve el valor m&amp;iacute;nimo de un &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="8f6ee8aeb4568fc4aa387603741be339ec3cac76" translate="yes" xml:space="preserve">
          <source>O(n)&lt;code&gt;&lt;a href=&quot;data-bytestring-lazy#v:notElem&quot;&gt;notElem&lt;/a&gt;&lt;/code&gt; is the inverse of &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy#v:elem&quot;&gt;elem&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">O (n) &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy#v:notElem&quot;&gt;notElem&lt;/a&gt;&lt;/code&gt; es el inverso de &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy#v:elem&quot;&gt;elem&lt;/a&gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="813ee49a0e4d52fdb3ae8304d21d3ac2df4dcbc8" translate="yes" xml:space="preserve">
          <source>O(n)&lt;code&gt;&lt;a href=&quot;data-bytestring-lazy#v:replicate&quot;&gt;replicate&lt;/a&gt; n x&lt;/code&gt; is a ByteString of length &lt;code&gt;n&lt;/code&gt; with &lt;code&gt;x&lt;/code&gt; the value of every element.</source>
          <target state="translated">O (n) &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy#v:replicate&quot;&gt;replicate&lt;/a&gt; n x&lt;/code&gt; es un ByteString de longitud &lt;code&gt;n&lt;/code&gt; con &lt;code&gt;x&lt;/code&gt; el valor de cada elemento.</target>
        </trans-unit>
        <trans-unit id="0e0dc3ba246d837d3a9b010550f249679050f953" translate="yes" xml:space="preserve">
          <source>O(n)&lt;code&gt;&lt;a href=&quot;data-bytestring-lazy#v:reverse&quot;&gt;reverse&lt;/a&gt;&lt;/code&gt;&lt;code&gt;xs&lt;/code&gt; returns the elements of &lt;code&gt;xs&lt;/code&gt; in reverse order.</source>
          <target state="translated">O (n) &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy#v:reverse&quot;&gt;reverse&lt;/a&gt;&lt;/code&gt; &lt;code&gt;xs&lt;/code&gt; devuelve los elementos de &lt;code&gt;xs&lt;/code&gt; en orden inverso.</target>
        </trans-unit>
        <trans-unit id="9202ad8e3b4632caa08f6f34bfd27121728ab275" translate="yes" xml:space="preserve">
          <source>O(n)&lt;code&gt;&lt;a href=&quot;data-bytestring-lazy#v:unzip&quot;&gt;unzip&lt;/a&gt;&lt;/code&gt; transforms a list of pairs of bytes into a pair of ByteStrings. Note that this performs two &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy#v:pack&quot;&gt;pack&lt;/a&gt;&lt;/code&gt; operations.</source>
          <target state="translated">O (n) &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy#v:unzip&quot;&gt;unzip&lt;/a&gt;&lt;/code&gt; transforma una lista de pares de bytes en un par de ByteStrings. Tenga en cuenta que esto realiza dos operaciones de &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy#v:pack&quot;&gt;pack&lt;/a&gt;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="5a9da1672e7f1b5b674d8afdd2354b04ab7243f5" translate="yes" xml:space="preserve">
          <source>O(n)&lt;code&gt;&lt;a href=&quot;data-bytestring-lazy#v:zip&quot;&gt;zip&lt;/a&gt;&lt;/code&gt; takes two ByteStrings and returns a list of corresponding pairs of bytes. If one input ByteString is short, excess elements of the longer ByteString are discarded. This is equivalent to a pair of &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy#v:unpack&quot;&gt;unpack&lt;/a&gt;&lt;/code&gt; operations.</source>
          <target state="translated">O (n) &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy#v:zip&quot;&gt;zip&lt;/a&gt;&lt;/code&gt; toma dos ByteStrings y devuelve una lista de los pares de bytes correspondientes. Si un ByteString de entrada es corto, los elementos sobrantes del ByteString m&amp;aacute;s largo se descartan. Esto equivale a un par de operaciones de &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy#v:unpack&quot;&gt;unpack&lt;/a&gt;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="c42bf137e10bf436f58e738df9dc0464ac9bd42a" translate="yes" xml:space="preserve">
          <source>O(n)&lt;code&gt;&lt;a href=&quot;data-bytestring-lazy-char8#v:elem&quot;&gt;elem&lt;/a&gt;&lt;/code&gt; is the &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy-char8#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt; membership predicate. This implementation uses &lt;code&gt;memchr(3)&lt;/code&gt;.</source>
          <target state="translated">O (n) &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy-char8#v:elem&quot;&gt;elem&lt;/a&gt;&lt;/code&gt; es el predicado de pertenencia &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy-char8#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt; . Esta implementaci&amp;oacute;n usa &lt;code&gt;memchr(3)&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="91c53f865408d000f101db6acde868e970f9c430" translate="yes" xml:space="preserve">
          <source>O(n)&lt;code&gt;&lt;a href=&quot;data-bytestring-lazy-char8#v:filter&quot;&gt;filter&lt;/a&gt;&lt;/code&gt;, applied to a predicate and a ByteString, returns a ByteString containing those characters that satisfy the predicate.</source>
          <target state="translated">El &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy-char8#v:filter&quot;&gt;filter&lt;/a&gt;&lt;/code&gt; O (n) , aplicado a un predicado y a ByteString, devuelve un ByteString que contiene los caracteres que satisfacen el predicado.</target>
        </trans-unit>
        <trans-unit id="b8ba031b9efd1026d26f073281d08fc3e760438e" translate="yes" xml:space="preserve">
          <source>O(n)&lt;code&gt;&lt;a href=&quot;data-bytestring-lazy-char8#v:map&quot;&gt;map&lt;/a&gt;&lt;/code&gt;&lt;code&gt;f xs&lt;/code&gt; is the ByteString obtained by applying &lt;code&gt;f&lt;/code&gt; to each element of &lt;code&gt;xs&lt;/code&gt;</source>
          <target state="translated">O (n) &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy-char8#v:map&quot;&gt;map&lt;/a&gt;&lt;/code&gt; &lt;code&gt;f xs&lt;/code&gt; es el ByteString obtenido aplicando &lt;code&gt;f&lt;/code&gt; a cada elemento de &lt;code&gt;xs&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="b7aa51e2a6c207eddcadb3119c3b5db7b3f75278" translate="yes" xml:space="preserve">
          <source>O(n)&lt;code&gt;&lt;a href=&quot;data-bytestring-lazy-char8#v:notElem&quot;&gt;notElem&lt;/a&gt;&lt;/code&gt; is the inverse of &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy-char8#v:elem&quot;&gt;elem&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">O (n) &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy-char8#v:notElem&quot;&gt;notElem&lt;/a&gt;&lt;/code&gt; es el inverso de &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy-char8#v:elem&quot;&gt;elem&lt;/a&gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="e8ebd28624996cb8f5222d45ff82209729d29cac" translate="yes" xml:space="preserve">
          <source>O(n)&lt;code&gt;&lt;a href=&quot;data-bytestring-lazy-char8#v:replicate&quot;&gt;replicate&lt;/a&gt; n x&lt;/code&gt; is a ByteString of length &lt;code&gt;n&lt;/code&gt; with &lt;code&gt;x&lt;/code&gt; the value of every element.</source>
          <target state="translated">O (n) &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy-char8#v:replicate&quot;&gt;replicate&lt;/a&gt; n x&lt;/code&gt; es un ByteString de longitud &lt;code&gt;n&lt;/code&gt; con &lt;code&gt;x&lt;/code&gt; el valor de cada elemento.</target>
        </trans-unit>
        <trans-unit id="0c9ad4f094aa254f69c6092bea03e198e42c0f2e" translate="yes" xml:space="preserve">
          <source>O(n)&lt;code&gt;&lt;a href=&quot;data-bytestring-lazy-char8#v:reverse&quot;&gt;reverse&lt;/a&gt;&lt;/code&gt;&lt;code&gt;xs&lt;/code&gt; returns the elements of &lt;code&gt;xs&lt;/code&gt; in reverse order.</source>
          <target state="translated">O (n) &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy-char8#v:reverse&quot;&gt;reverse&lt;/a&gt;&lt;/code&gt; &lt;code&gt;xs&lt;/code&gt; devuelve los elementos de &lt;code&gt;xs&lt;/code&gt; en orden inverso.</target>
        </trans-unit>
        <trans-unit id="1025a51d54a7b411e304766783043b2c8c9ebe8c" translate="yes" xml:space="preserve">
          <source>O(n)&lt;code&gt;&lt;a href=&quot;data-bytestring-lazy-char8#v:zip&quot;&gt;zip&lt;/a&gt;&lt;/code&gt; takes two ByteStrings and returns a list of corresponding pairs of Chars. If one input ByteString is short, excess elements of the longer ByteString are discarded. This is equivalent to a pair of &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy-char8#v:unpack&quot;&gt;unpack&lt;/a&gt;&lt;/code&gt; operations, and so space usage may be large for multi-megabyte ByteStrings</source>
          <target state="translated">O (n) &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy-char8#v:zip&quot;&gt;zip&lt;/a&gt;&lt;/code&gt; toma dos ByteStrings y devuelve una lista de los pares de caracteres correspondientes. Si un ByteString de entrada es corto, los elementos sobrantes del ByteString m&amp;aacute;s largo se descartan. Esto es equivalente a un par de operaciones de &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy-char8#v:unpack&quot;&gt;unpack&lt;/a&gt;&lt;/code&gt; , por lo que el uso de espacio puede ser grande para ByteStrings de varios megabytes.</target>
        </trans-unit>
        <trans-unit id="47f1f808b1116798948bf6e17810a76c4c27a281" translate="yes" xml:space="preserve">
          <source>O(n)&lt;code&gt;&lt;a href=&quot;data-text#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt; index (subscript) operator, starting from 0.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="507dcd4c5ffbdf85b7afecdfbd6ffb348b3f2a12" translate="yes" xml:space="preserve">
          <source>O(n)&lt;code&gt;&lt;a href=&quot;data-text#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt; index (subscript) operator, starting from 0. Subject to fusion.</source>
          <target state="translated">O (n) Operador de &amp;iacute;ndice de &lt;code&gt;&lt;a href=&quot;data-text#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt; (sub&amp;iacute;ndice), comenzando desde 0. Sujeto a fusi&amp;oacute;n.</target>
        </trans-unit>
        <trans-unit id="79c7f6fabdbf2741f226cec77b19c2ed76fa0d43" translate="yes" xml:space="preserve">
          <source>O(n)&lt;code&gt;&lt;a href=&quot;data-text#v:all&quot;&gt;all&lt;/a&gt;&lt;/code&gt;&lt;code&gt;p&lt;/code&gt;&lt;code&gt;t&lt;/code&gt; determines whether all characters in the &lt;code&gt;&lt;a href=&quot;data-text#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt;&lt;code&gt;t&lt;/code&gt; satisfy the predicate &lt;code&gt;p&lt;/code&gt;. Subject to fusion.</source>
          <target state="translated">O (n) &lt;code&gt;&lt;a href=&quot;data-text#v:all&quot;&gt;all&lt;/a&gt;&lt;/code&gt; &lt;code&gt;p&lt;/code&gt; &lt;code&gt;t&lt;/code&gt; determina si todos los caracteres del &lt;code&gt;&lt;a href=&quot;data-text#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt; o &lt;code&gt;t&lt;/code&gt; satisfacen el predicado &lt;code&gt;p&lt;/code&gt; . Sujeto a fusi&amp;oacute;n.</target>
        </trans-unit>
        <trans-unit id="7eba5fc089d3982c308520a95c1f77dd2130c7b0" translate="yes" xml:space="preserve">
          <source>O(n)&lt;code&gt;&lt;a href=&quot;data-text#v:any&quot;&gt;any&lt;/a&gt;&lt;/code&gt;&lt;code&gt;p&lt;/code&gt;&lt;code&gt;t&lt;/code&gt; determines whether any character in the &lt;code&gt;&lt;a href=&quot;data-text#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt;&lt;code&gt;t&lt;/code&gt; satisfies the predicate &lt;code&gt;p&lt;/code&gt;. Subject to fusion.</source>
          <target state="translated">O (n) &lt;code&gt;&lt;a href=&quot;data-text#v:any&quot;&gt;any&lt;/a&gt;&lt;/code&gt; &lt;code&gt;p&lt;/code&gt; &lt;code&gt;t&lt;/code&gt; determina si alg&amp;uacute;n car&amp;aacute;cter del &lt;code&gt;&lt;a href=&quot;data-text#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt; o &lt;code&gt;t&lt;/code&gt; satisface el predicado &lt;code&gt;p&lt;/code&gt; . Sujeto a fusi&amp;oacute;n.</target>
        </trans-unit>
        <trans-unit id="f81c7ff9cb185390d27d39f40c6e350881c76f10" translate="yes" xml:space="preserve">
          <source>O(n)&lt;code&gt;&lt;a href=&quot;data-text#v:break&quot;&gt;break&lt;/a&gt;&lt;/code&gt; is like &lt;code&gt;&lt;a href=&quot;data-text#v:span&quot;&gt;span&lt;/a&gt;&lt;/code&gt;, but the prefix returned is over elements that fail the predicate &lt;code&gt;p&lt;/code&gt;.</source>
          <target state="translated">O (n) &lt;code&gt;&lt;a href=&quot;data-text#v:break&quot;&gt;break&lt;/a&gt;&lt;/code&gt; es como &lt;code&gt;&lt;a href=&quot;data-text#v:span&quot;&gt;span&lt;/a&gt;&lt;/code&gt; , pero el prefijo devuelto es sobre elementos que fallan en el predicado &lt;code&gt;p&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="2a401e4a49118c11b4758cd5236552b720cf3223" translate="yes" xml:space="preserve">
          <source>O(n)&lt;code&gt;&lt;a href=&quot;data-text#v:drop&quot;&gt;drop&lt;/a&gt;&lt;/code&gt;&lt;code&gt;n&lt;/code&gt;, applied to a &lt;code&gt;&lt;a href=&quot;data-text#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt;, returns the suffix of the &lt;code&gt;&lt;a href=&quot;data-text#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt; after the first &lt;code&gt;n&lt;/code&gt; characters, or the empty &lt;code&gt;&lt;a href=&quot;data-text#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt; if &lt;code&gt;n&lt;/code&gt; is greater than the length of the &lt;code&gt;&lt;a href=&quot;data-text#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt;. Subject to fusion.</source>
          <target state="translated">O (n) &lt;code&gt;&lt;a href=&quot;data-text#v:drop&quot;&gt;drop&lt;/a&gt;&lt;/code&gt; &lt;code&gt;n&lt;/code&gt; , aplicado a un &lt;code&gt;&lt;a href=&quot;data-text#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt; , devuelve el sufijo del &lt;code&gt;&lt;a href=&quot;data-text#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt; despu&amp;eacute;s de los primeros &lt;code&gt;n&lt;/code&gt; caracteres, o el &lt;code&gt;&lt;a href=&quot;data-text#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt; vac&amp;iacute;o si &lt;code&gt;n&lt;/code&gt; es mayor que la longitud del &lt;code&gt;&lt;a href=&quot;data-text#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt; . Sujeto a fusi&amp;oacute;n.</target>
        </trans-unit>
        <trans-unit id="62638e9e2515ce80c16e9bbd4d722902b80a7bde" translate="yes" xml:space="preserve">
          <source>O(n)&lt;code&gt;&lt;a href=&quot;data-text#v:dropAround&quot;&gt;dropAround&lt;/a&gt;&lt;/code&gt;&lt;code&gt;p&lt;/code&gt;&lt;code&gt;t&lt;/code&gt; returns the substring remaining after dropping characters that satisfy the predicate &lt;code&gt;p&lt;/code&gt; from both the beginning and end of &lt;code&gt;t&lt;/code&gt;. Subject to fusion.</source>
          <target state="translated">O (n) &lt;code&gt;&lt;a href=&quot;data-text#v:dropAround&quot;&gt;dropAround&lt;/a&gt;&lt;/code&gt; &lt;code&gt;p&lt;/code&gt; &lt;code&gt;t&lt;/code&gt; devuelve la subcadena restante despu&amp;eacute;s de eliminar los caracteres que satisfacen el predicado &lt;code&gt;p&lt;/code&gt; tanto del principio como del final de &lt;code&gt;t&lt;/code&gt; . Sujeto a fusi&amp;oacute;n.</target>
        </trans-unit>
        <trans-unit id="50b676b0a4a9eff6b367ed39fc8ad50da4c80c8d" translate="yes" xml:space="preserve">
          <source>O(n)&lt;code&gt;&lt;a href=&quot;data-text#v:dropEnd&quot;&gt;dropEnd&lt;/a&gt;&lt;/code&gt;&lt;code&gt;n&lt;/code&gt;&lt;code&gt;t&lt;/code&gt; returns the prefix remaining after dropping &lt;code&gt;n&lt;/code&gt; characters from the end of &lt;code&gt;t&lt;/code&gt;.</source>
          <target state="translated">O (n) &lt;code&gt;&lt;a href=&quot;data-text#v:dropEnd&quot;&gt;dropEnd&lt;/a&gt;&lt;/code&gt; &lt;code&gt;n&lt;/code&gt; &lt;code&gt;t&lt;/code&gt; devuelve el prefijo restante despu&amp;eacute;s de eliminar &lt;code&gt;n&lt;/code&gt; caracteres del final de &lt;code&gt;t&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="80990f9067babc8c1a96660ef6ad72b05b11abd6" translate="yes" xml:space="preserve">
          <source>O(n)&lt;code&gt;&lt;a href=&quot;data-text#v:dropWhile&quot;&gt;dropWhile&lt;/a&gt;&lt;/code&gt;&lt;code&gt;p&lt;/code&gt;&lt;code&gt;t&lt;/code&gt; returns the suffix remaining after &lt;code&gt;&lt;a href=&quot;data-text#v:takeWhile&quot;&gt;takeWhile&lt;/a&gt;&lt;/code&gt;&lt;code&gt;p&lt;/code&gt;&lt;code&gt;t&lt;/code&gt;. Subject to fusion.</source>
          <target state="translated">O (n) &lt;code&gt;&lt;a href=&quot;data-text#v:dropWhile&quot;&gt;dropWhile&lt;/a&gt;&lt;/code&gt; &lt;code&gt;p&lt;/code&gt; &lt;code&gt;t&lt;/code&gt; devuelve el sufijo restante despu&amp;eacute;s de &lt;code&gt;&lt;a href=&quot;data-text#v:takeWhile&quot;&gt;takeWhile&lt;/a&gt;&lt;/code&gt; &lt;code&gt;p&lt;/code&gt; &lt;code&gt;t&lt;/code&gt; . Sujeto a fusi&amp;oacute;n.</target>
        </trans-unit>
        <trans-unit id="1e6c16939d4c355b6e4010f481ae78113c01265d" translate="yes" xml:space="preserve">
          <source>O(n)&lt;code&gt;&lt;a href=&quot;data-text#v:dropWhileEnd&quot;&gt;dropWhileEnd&lt;/a&gt;&lt;/code&gt;&lt;code&gt;p&lt;/code&gt;&lt;code&gt;t&lt;/code&gt; returns the prefix remaining after dropping characters that satisfy the predicate &lt;code&gt;p&lt;/code&gt; from the end of &lt;code&gt;t&lt;/code&gt;.</source>
          <target state="translated">O (n) &lt;code&gt;&lt;a href=&quot;data-text#v:dropWhileEnd&quot;&gt;dropWhileEnd&lt;/a&gt;&lt;/code&gt; &lt;code&gt;p&lt;/code&gt; &lt;code&gt;t&lt;/code&gt; devuelve el prefijo restante despu&amp;eacute;s de eliminar los caracteres que satisfacen el predicado &lt;code&gt;p&lt;/code&gt; desde el final de &lt;code&gt;t&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="ae97f194eb0bb99602ab124ca73db33a4929d2a1" translate="yes" xml:space="preserve">
          <source>O(n)&lt;code&gt;&lt;a href=&quot;data-text#v:dropWhileEnd&quot;&gt;dropWhileEnd&lt;/a&gt;&lt;/code&gt;&lt;code&gt;p&lt;/code&gt;&lt;code&gt;t&lt;/code&gt; returns the prefix remaining after dropping characters that satisfy the predicate &lt;code&gt;p&lt;/code&gt; from the end of &lt;code&gt;t&lt;/code&gt;. Subject to fusion.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fba89c9273cb01a6feeeb52ba105e8c263324589" translate="yes" xml:space="preserve">
          <source>O(n)&lt;code&gt;&lt;a href=&quot;data-text#v:filter&quot;&gt;filter&lt;/a&gt;&lt;/code&gt;, applied to a predicate and a &lt;code&gt;&lt;a href=&quot;data-text#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt;, returns a &lt;code&gt;&lt;a href=&quot;data-text#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt; containing those characters that satisfy the predicate.</source>
          <target state="translated">El &lt;code&gt;&lt;a href=&quot;data-text#v:filter&quot;&gt;filter&lt;/a&gt;&lt;/code&gt; O (n) , aplicado a un predicado y un &lt;code&gt;&lt;a href=&quot;data-text#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt; , devuelve un &lt;code&gt;&lt;a href=&quot;data-text#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt; contiene los caracteres que satisfacen el predicado.</target>
        </trans-unit>
        <trans-unit id="36718733e2bd35c6068adc8721e8015ecae35c23" translate="yes" xml:space="preserve">
          <source>O(n)&lt;code&gt;&lt;a href=&quot;data-text#v:foldl&quot;&gt;foldl&lt;/a&gt;&lt;/code&gt;, applied to a binary operator, a starting value (typically the left-identity of the operator), and a &lt;code&gt;&lt;a href=&quot;data-text#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt;, reduces the &lt;code&gt;&lt;a href=&quot;data-text#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt; using the binary operator, from left to right. Subject to fusion.</source>
          <target state="translated">O (n) &lt;code&gt;&lt;a href=&quot;data-text#v:foldl&quot;&gt;foldl&lt;/a&gt;&lt;/code&gt; , aplicado a un operador binario, un valor inicial (t&amp;iacute;picamente la identidad izquierda del operador) y un &lt;code&gt;&lt;a href=&quot;data-text#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt; o , reduce el &lt;code&gt;&lt;a href=&quot;data-text#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt; o usando el operador binario, de izquierda a derecha. Sujeto a fusi&amp;oacute;n.</target>
        </trans-unit>
        <trans-unit id="9e93d3274aad02da381d77d8727f4a8d9bec1df6" translate="yes" xml:space="preserve">
          <source>O(n)&lt;code&gt;&lt;a href=&quot;data-text#v:foldr&quot;&gt;foldr&lt;/a&gt;&lt;/code&gt;, applied to a binary operator, a starting value (typically the right-identity of the operator), and a &lt;code&gt;&lt;a href=&quot;data-text#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt;, reduces the &lt;code&gt;&lt;a href=&quot;data-text#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt; using the binary operator, from right to left. Subject to fusion.</source>
          <target state="translated">O (n) &lt;code&gt;&lt;a href=&quot;data-text#v:foldr&quot;&gt;foldr&lt;/a&gt;&lt;/code&gt; , aplicado a un operador binario, un valor inicial (normalmente la identidad derecha del operador) y un &lt;code&gt;&lt;a href=&quot;data-text#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt; o , reduce el &lt;code&gt;&lt;a href=&quot;data-text#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt; o usando el operador binario, de derecha a izquierda. Sujeto a fusi&amp;oacute;n.</target>
        </trans-unit>
        <trans-unit id="53340410ef80985b02395b3f73c6037ec5158b5a" translate="yes" xml:space="preserve">
          <source>O(n)&lt;code&gt;&lt;a href=&quot;data-text#v:map&quot;&gt;map&lt;/a&gt;&lt;/code&gt;&lt;code&gt;f&lt;/code&gt;&lt;code&gt;t&lt;/code&gt; is the &lt;code&gt;&lt;a href=&quot;data-text#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt; obtained by applying &lt;code&gt;f&lt;/code&gt; to each element of &lt;code&gt;t&lt;/code&gt;.</source>
          <target state="translated">O (n) &lt;code&gt;&lt;a href=&quot;data-text#v:map&quot;&gt;map&lt;/a&gt;&lt;/code&gt; &lt;code&gt;f&lt;/code&gt; &lt;code&gt;t&lt;/code&gt; es el &lt;code&gt;&lt;a href=&quot;data-text#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt; obtenido al aplicar &lt;code&gt;f&lt;/code&gt; a cada elemento de &lt;code&gt;t&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="3392997e6a37b5ea492369dbab6c9d285c75f9bb" translate="yes" xml:space="preserve">
          <source>O(n)&lt;code&gt;&lt;a href=&quot;data-text#v:maximum&quot;&gt;maximum&lt;/a&gt;&lt;/code&gt; returns the maximum value from a &lt;code&gt;&lt;a href=&quot;data-text#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt;, which must be non-empty. Subject to fusion.</source>
          <target state="translated">O (n) &lt;code&gt;&lt;a href=&quot;data-text#v:maximum&quot;&gt;maximum&lt;/a&gt;&lt;/code&gt; devuelve el valor m&amp;aacute;ximo de un &lt;code&gt;&lt;a href=&quot;data-text#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt; , que no debe estar vac&amp;iacute;o. Sujeto a fusi&amp;oacute;n.</target>
        </trans-unit>
        <trans-unit id="e0d5d05610018479cf03a721cc8f0d3b278d43cc" translate="yes" xml:space="preserve">
          <source>O(n)&lt;code&gt;&lt;a href=&quot;data-text#v:minimum&quot;&gt;minimum&lt;/a&gt;&lt;/code&gt; returns the minimum value from a &lt;code&gt;&lt;a href=&quot;data-text#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt;, which must be non-empty. Subject to fusion.</source>
          <target state="translated">O (n) &lt;code&gt;&lt;a href=&quot;data-text#v:minimum&quot;&gt;minimum&lt;/a&gt;&lt;/code&gt; devuelve el valor m&amp;iacute;nimo de un &lt;code&gt;&lt;a href=&quot;data-text#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt; , que no debe estar vac&amp;iacute;o. Sujeto a fusi&amp;oacute;n.</target>
        </trans-unit>
        <trans-unit id="ce440d86acb7656e3a075deae33e810590daf9ef" translate="yes" xml:space="preserve">
          <source>O(n)&lt;code&gt;&lt;a href=&quot;data-text#v:scanl&quot;&gt;scanl&lt;/a&gt;&lt;/code&gt; is similar to &lt;code&gt;&lt;a href=&quot;data-text#v:foldl&quot;&gt;foldl&lt;/a&gt;&lt;/code&gt;, but returns a list of successive reduced values from the left. Subject to fusion. Performs replacement on invalid scalar values.</source>
          <target state="translated">O (n) &lt;code&gt;&lt;a href=&quot;data-text#v:scanl&quot;&gt;scanl&lt;/a&gt;&lt;/code&gt; es similar a &lt;code&gt;&lt;a href=&quot;data-text#v:foldl&quot;&gt;foldl&lt;/a&gt;&lt;/code&gt; , pero devuelve una lista de valores reducidos sucesivos desde la izquierda. Sujeto a fusi&amp;oacute;n. Realiza el reemplazo de valores escalares no v&amp;aacute;lidos.</target>
        </trans-unit>
        <trans-unit id="1602e01d9551438052ee00621c4ff0186d8aa39b" translate="yes" xml:space="preserve">
          <source>O(n)&lt;code&gt;&lt;a href=&quot;data-text#v:scanl1&quot;&gt;scanl1&lt;/a&gt;&lt;/code&gt; is a variant of &lt;code&gt;&lt;a href=&quot;data-text#v:scanl&quot;&gt;scanl&lt;/a&gt;&lt;/code&gt; that has no starting value argument. Performs replacement on invalid scalar values.</source>
          <target state="translated">O (n) &lt;code&gt;&lt;a href=&quot;data-text#v:scanl1&quot;&gt;scanl1&lt;/a&gt;&lt;/code&gt; es una variante de &lt;code&gt;&lt;a href=&quot;data-text#v:scanl&quot;&gt;scanl&lt;/a&gt;&lt;/code&gt; que no tiene un argumento de valor inicial. Realiza el reemplazo de valores escalares no v&amp;aacute;lidos.</target>
        </trans-unit>
        <trans-unit id="a802a82d4cb6533dfbd873bc1518cfdd2fa96a42" translate="yes" xml:space="preserve">
          <source>O(n)&lt;code&gt;&lt;a href=&quot;data-text#v:scanl1&quot;&gt;scanl1&lt;/a&gt;&lt;/code&gt; is a variant of &lt;code&gt;&lt;a href=&quot;data-text#v:scanl&quot;&gt;scanl&lt;/a&gt;&lt;/code&gt; that has no starting value argument. Subject to fusion. Performs replacement on invalid scalar values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0b02a62da4052d8e51d2387f68f561b76b8e2e71" translate="yes" xml:space="preserve">
          <source>O(n)&lt;code&gt;&lt;a href=&quot;data-text#v:scanr&quot;&gt;scanr&lt;/a&gt;&lt;/code&gt; is the right-to-left dual of &lt;code&gt;&lt;a href=&quot;data-text#v:scanl&quot;&gt;scanl&lt;/a&gt;&lt;/code&gt;. Performs replacement on invalid scalar values.</source>
          <target state="translated">O (n) &lt;code&gt;&lt;a href=&quot;data-text#v:scanr&quot;&gt;scanr&lt;/a&gt;&lt;/code&gt; es el dual de derecha a izquierda de &lt;code&gt;&lt;a href=&quot;data-text#v:scanl&quot;&gt;scanl&lt;/a&gt;&lt;/code&gt; . Realiza el reemplazo de valores escalares no v&amp;aacute;lidos.</target>
        </trans-unit>
        <trans-unit id="dd59edc8b679e21a5fc719bf31908c07caed4a38" translate="yes" xml:space="preserve">
          <source>O(n)&lt;code&gt;&lt;a href=&quot;data-text#v:scanr1&quot;&gt;scanr1&lt;/a&gt;&lt;/code&gt; is a variant of &lt;code&gt;&lt;a href=&quot;data-text#v:scanr&quot;&gt;scanr&lt;/a&gt;&lt;/code&gt; that has no starting value argument. Performs replacement on invalid scalar values.</source>
          <target state="translated">O (n) &lt;code&gt;&lt;a href=&quot;data-text#v:scanr1&quot;&gt;scanr1&lt;/a&gt;&lt;/code&gt; es una variante de &lt;code&gt;&lt;a href=&quot;data-text#v:scanr&quot;&gt;scanr&lt;/a&gt;&lt;/code&gt; que no tiene un argumento de valor inicial. Realiza el reemplazo de valores escalares no v&amp;aacute;lidos.</target>
        </trans-unit>
        <trans-unit id="c206687b879c81144a6cc7e054706c4fe453fb0f" translate="yes" xml:space="preserve">
          <source>O(n)&lt;code&gt;&lt;a href=&quot;data-text#v:scanr1&quot;&gt;scanr1&lt;/a&gt;&lt;/code&gt; is a variant of &lt;code&gt;&lt;a href=&quot;data-text#v:scanr&quot;&gt;scanr&lt;/a&gt;&lt;/code&gt; that has no starting value argument. Subject to fusion. Performs replacement on invalid scalar values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="793a30afbe1bb62bb4bbc71da7c935274e7fdd02" translate="yes" xml:space="preserve">
          <source>O(n)&lt;code&gt;&lt;a href=&quot;data-text#v:span&quot;&gt;span&lt;/a&gt;&lt;/code&gt;, applied to a predicate &lt;code&gt;p&lt;/code&gt; and text &lt;code&gt;t&lt;/code&gt;, returns a pair whose first element is the longest prefix (possibly empty) of &lt;code&gt;t&lt;/code&gt; of elements that satisfy &lt;code&gt;p&lt;/code&gt;, and whose second is the remainder of the list.</source>
          <target state="translated">O (n) &lt;code&gt;&lt;a href=&quot;data-text#v:span&quot;&gt;span&lt;/a&gt;&lt;/code&gt; , aplicado a un predicado &lt;code&gt;p&lt;/code&gt; y un texto &lt;code&gt;t&lt;/code&gt; , devuelve un par cuyo primer elemento es el prefijo m&amp;aacute;s largo (posiblemente vac&amp;iacute;o) de &lt;code&gt;t&lt;/code&gt; de elementos que satisfacen &lt;code&gt;p&lt;/code&gt; , y cuyo segundo es el resto de la lista.</target>
        </trans-unit>
        <trans-unit id="e876383d6fe4d4cf57cb2e995578fddd8df3eb2e" translate="yes" xml:space="preserve">
          <source>O(n)&lt;code&gt;&lt;a href=&quot;data-text#v:splitAt&quot;&gt;splitAt&lt;/a&gt;&lt;/code&gt;&lt;code&gt;n t&lt;/code&gt; returns a pair whose first element is a prefix of &lt;code&gt;t&lt;/code&gt; of length &lt;code&gt;n&lt;/code&gt;, and whose second is the remainder of the string. It is equivalent to &lt;code&gt;(&lt;a href=&quot;data-text#v:take&quot;&gt;take&lt;/a&gt; n t, &lt;a href=&quot;data-text#v:drop&quot;&gt;drop&lt;/a&gt; n t)&lt;/code&gt;.</source>
          <target state="translated">O (n) &lt;code&gt;&lt;a href=&quot;data-text#v:splitAt&quot;&gt;splitAt&lt;/a&gt;&lt;/code&gt; &lt;code&gt;n t&lt;/code&gt; devuelve un par cuyo primer elemento es un prefijo de &lt;code&gt;t&lt;/code&gt; de longitud &lt;code&gt;n&lt;/code&gt; , y cuyo segundo es el resto de la cadena. Es equivalente a &lt;code&gt;(&lt;a href=&quot;data-text#v:take&quot;&gt;take&lt;/a&gt; n t, &lt;a href=&quot;data-text#v:drop&quot;&gt;drop&lt;/a&gt; n t)&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="724c5a910dc02d1935ca3c0e9f3d61da582138ff" translate="yes" xml:space="preserve">
          <source>O(n)&lt;code&gt;&lt;a href=&quot;data-text#v:take&quot;&gt;take&lt;/a&gt;&lt;/code&gt;&lt;code&gt;n&lt;/code&gt;, applied to a &lt;code&gt;&lt;a href=&quot;data-text#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt;, returns the prefix of the &lt;code&gt;&lt;a href=&quot;data-text#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt; of length &lt;code&gt;n&lt;/code&gt;, or the &lt;code&gt;&lt;a href=&quot;data-text#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt; itself if &lt;code&gt;n&lt;/code&gt; is greater than the length of the Text. Subject to fusion.</source>
          <target state="translated">O (n) &lt;code&gt;&lt;a href=&quot;data-text#v:take&quot;&gt;take&lt;/a&gt;&lt;/code&gt; &lt;code&gt;n&lt;/code&gt; , aplicado a un &lt;code&gt;&lt;a href=&quot;data-text#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt; , devuelve el prefijo del &lt;code&gt;&lt;a href=&quot;data-text#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt; de longitud &lt;code&gt;n&lt;/code&gt; , o el &lt;code&gt;&lt;a href=&quot;data-text#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt; mismo si &lt;code&gt;n&lt;/code&gt; es mayor que la longitud del texto. Sujeto a fusi&amp;oacute;n.</target>
        </trans-unit>
        <trans-unit id="e63ef89c44ffb426bb835c53ad49105c6cc4f6c3" translate="yes" xml:space="preserve">
          <source>O(n)&lt;code&gt;&lt;a href=&quot;data-text#v:takeEnd&quot;&gt;takeEnd&lt;/a&gt;&lt;/code&gt;&lt;code&gt;n&lt;/code&gt;&lt;code&gt;t&lt;/code&gt; returns the suffix remaining after taking &lt;code&gt;n&lt;/code&gt; characters from the end of &lt;code&gt;t&lt;/code&gt;.</source>
          <target state="translated">O (n) &lt;code&gt;&lt;a href=&quot;data-text#v:takeEnd&quot;&gt;takeEnd&lt;/a&gt;&lt;/code&gt; &lt;code&gt;n&lt;/code&gt; &lt;code&gt;t&lt;/code&gt; devuelve el sufijo restante despu&amp;eacute;s de tomar &lt;code&gt;n&lt;/code&gt; caracteres del final de &lt;code&gt;t&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="e92dcc54a916468d23b42ca137f26aeb26550c73" translate="yes" xml:space="preserve">
          <source>O(n)&lt;code&gt;&lt;a href=&quot;data-text#v:takeWhile&quot;&gt;takeWhile&lt;/a&gt;&lt;/code&gt;, applied to a predicate &lt;code&gt;p&lt;/code&gt; and a &lt;code&gt;&lt;a href=&quot;data-text#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt;, returns the longest prefix (possibly empty) of elements that satisfy &lt;code&gt;p&lt;/code&gt;. Subject to fusion.</source>
          <target state="translated">O (n) &lt;code&gt;&lt;a href=&quot;data-text#v:takeWhile&quot;&gt;takeWhile&lt;/a&gt;&lt;/code&gt; , aplicado a un predicado &lt;code&gt;p&lt;/code&gt; y a &lt;code&gt;&lt;a href=&quot;data-text#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt; , devuelve el prefijo m&amp;aacute;s largo (posiblemente vac&amp;iacute;o) de los elementos que satisfacen &lt;code&gt;p&lt;/code&gt; . Sujeto a fusi&amp;oacute;n.</target>
        </trans-unit>
        <trans-unit id="aaa1f8a3e08b881dfc79f5d52ff65332b0fa61cd" translate="yes" xml:space="preserve">
          <source>O(n)&lt;code&gt;&lt;a href=&quot;data-text#v:takeWhileEnd&quot;&gt;takeWhileEnd&lt;/a&gt;&lt;/code&gt;, applied to a predicate &lt;code&gt;p&lt;/code&gt; and a &lt;code&gt;&lt;a href=&quot;data-text#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt;, returns the longest suffix (possibly empty) of elements that satisfy &lt;code&gt;p&lt;/code&gt;. Examples:</source>
          <target state="translated">O (n) &lt;code&gt;&lt;a href=&quot;data-text#v:takeWhileEnd&quot;&gt;takeWhileEnd&lt;/a&gt;&lt;/code&gt; , aplicado a un predicado &lt;code&gt;p&lt;/code&gt; y un &lt;code&gt;&lt;a href=&quot;data-text#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt; , devuelve el sufijo m&amp;aacute;s largo (posiblemente vac&amp;iacute;o) de los elementos que satisfacen &lt;code&gt;p&lt;/code&gt; . Ejemplos:</target>
        </trans-unit>
        <trans-unit id="a2e3606f4f01d7e5a10ca68ed180b1abf7fa753a" translate="yes" xml:space="preserve">
          <source>O(n)&lt;code&gt;&lt;a href=&quot;data-text#v:takeWhileEnd&quot;&gt;takeWhileEnd&lt;/a&gt;&lt;/code&gt;, applied to a predicate &lt;code&gt;p&lt;/code&gt; and a &lt;code&gt;&lt;a href=&quot;data-text#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt;, returns the longest suffix (possibly empty) of elements that satisfy &lt;code&gt;p&lt;/code&gt;. Subject to fusion. Examples:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ad3be8f0faa9bd5d4aa2e5d20f35304c380828e9" translate="yes" xml:space="preserve">
          <source>O(n)&lt;code&gt;&lt;a href=&quot;data-text#v:zip&quot;&gt;zip&lt;/a&gt;&lt;/code&gt; takes two &lt;code&gt;&lt;a href=&quot;data-text#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt;s and returns a list of corresponding pairs of bytes. If one input &lt;code&gt;&lt;a href=&quot;data-text#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt; is short, excess elements of the longer &lt;code&gt;&lt;a href=&quot;data-text#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt; are discarded. This is equivalent to a pair of &lt;code&gt;&lt;a href=&quot;data-text#v:unpack&quot;&gt;unpack&lt;/a&gt;&lt;/code&gt; operations.</source>
          <target state="translated">O (n) &lt;code&gt;&lt;a href=&quot;data-text#v:zip&quot;&gt;zip&lt;/a&gt;&lt;/code&gt; toma dos &lt;code&gt;&lt;a href=&quot;data-text#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt; sy devuelve una lista de los pares de bytes correspondientes. Si un &lt;code&gt;&lt;a href=&quot;data-text#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt; entrada es corto, los elementos sobrantes del &lt;code&gt;&lt;a href=&quot;data-text#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt; m&amp;aacute;s largo se descartan. Esto equivale a un par de operaciones de &lt;code&gt;&lt;a href=&quot;data-text#v:unpack&quot;&gt;unpack&lt;/a&gt;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="af939213fd5b0f6bd31b51acd6695dbeb5ffdb19" translate="yes" xml:space="preserve">
          <source>O(n)&lt;code&gt;&lt;a href=&quot;data-text#v:zipWith&quot;&gt;zipWith&lt;/a&gt;&lt;/code&gt; generalises &lt;code&gt;&lt;a href=&quot;data-text#v:zip&quot;&gt;zip&lt;/a&gt;&lt;/code&gt; by zipping with the function given as the first argument, instead of a tupling function. Performs replacement on invalid scalar values.</source>
          <target state="translated">O (n) &lt;code&gt;&lt;a href=&quot;data-text#v:zipWith&quot;&gt;zipWith&lt;/a&gt;&lt;/code&gt; generaliza &lt;code&gt;&lt;a href=&quot;data-text#v:zip&quot;&gt;zip&lt;/a&gt;&lt;/code&gt; comprimiendo con la funci&amp;oacute;n dada como primer argumento, en lugar de una funci&amp;oacute;n tupling. Realiza el reemplazo de valores escalares no v&amp;aacute;lidos.</target>
        </trans-unit>
        <trans-unit id="da4aeeaabfc5ed693c1e151384a746ca87c72217" translate="yes" xml:space="preserve">
          <source>O(n)&lt;code&gt;&lt;a href=&quot;data-text-internal-fusion-common#v:drop&quot;&gt;drop&lt;/a&gt; n&lt;/code&gt;, applied to a stream, returns the suffix of the stream after the first &lt;code&gt;n&lt;/code&gt; characters, or the empty stream if &lt;code&gt;n&lt;/code&gt; is greater than the length of the stream.</source>
          <target state="translated">O (n) &lt;code&gt;&lt;a href=&quot;data-text-internal-fusion-common#v:drop&quot;&gt;drop&lt;/a&gt; n&lt;/code&gt; , aplicado a una secuencia, devuelve el sufijo de la secuencia despu&amp;eacute;s de los primeros &lt;code&gt;n&lt;/code&gt; caracteres, o la secuencia vac&amp;iacute;a si &lt;code&gt;n&lt;/code&gt; es mayor que la longitud de la secuencia.</target>
        </trans-unit>
        <trans-unit id="9fa687005bdc593df76bb72517e1b521d29d2d20" translate="yes" xml:space="preserve">
          <source>O(n)&lt;code&gt;&lt;a href=&quot;data-text-internal-fusion-common#v:elem&quot;&gt;elem&lt;/a&gt;&lt;/code&gt; is the stream membership predicate.</source>
          <target state="translated">O (n) &lt;code&gt;&lt;a href=&quot;data-text-internal-fusion-common#v:elem&quot;&gt;elem&lt;/a&gt;&lt;/code&gt; es el predicado de pertenencia al flujo.</target>
        </trans-unit>
        <trans-unit id="2b77afc64a7bb85e8690139a4da22ea45eedc543" translate="yes" xml:space="preserve">
          <source>O(n)&lt;code&gt;&lt;a href=&quot;data-text-internal-fusion-common#v:filter&quot;&gt;filter&lt;/a&gt;&lt;/code&gt;, applied to a predicate and a stream, returns a stream containing those characters that satisfy the predicate.</source>
          <target state="translated">El &lt;code&gt;&lt;a href=&quot;data-text-internal-fusion-common#v:filter&quot;&gt;filter&lt;/a&gt;&lt;/code&gt; O (n) , aplicado a un predicado y una secuencia, devuelve una secuencia que contiene los caracteres que satisfacen el predicado.</target>
        </trans-unit>
        <trans-unit id="0f5ad5c44e1631f865afdc5530f0bd7da572556c" translate="yes" xml:space="preserve">
          <source>O(n)&lt;code&gt;&lt;a href=&quot;data-text-internal-fusion-common#v:map&quot;&gt;map&lt;/a&gt;&lt;/code&gt;&lt;code&gt;f &lt;/code&gt;xs is the Stream Char obtained by applying &lt;code&gt;f&lt;/code&gt; to each element of &lt;code&gt;xs&lt;/code&gt;.</source>
          <target state="translated">O (n) &lt;code&gt;&lt;a href=&quot;data-text-internal-fusion-common#v:map&quot;&gt;map&lt;/a&gt;&lt;/code&gt; &lt;code&gt;f &lt;/code&gt; xs es el Stream Char obtenido al aplicar &lt;code&gt;f&lt;/code&gt; a cada elemento de &lt;code&gt;xs&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="21beeb85fff56f2a29dc2595d7cacf25e1f49ff2" translate="yes" xml:space="preserve">
          <source>O(n)&lt;code&gt;&lt;a href=&quot;data-text-internal-fusion-common#v:take&quot;&gt;take&lt;/a&gt; n&lt;/code&gt;, applied to a stream, returns the prefix of the stream of length &lt;code&gt;n&lt;/code&gt;, or the stream itself if &lt;code&gt;n&lt;/code&gt; is greater than the length of the stream.</source>
          <target state="translated">O (n) &lt;code&gt;&lt;a href=&quot;data-text-internal-fusion-common#v:take&quot;&gt;take&lt;/a&gt; n&lt;/code&gt; , aplicado a una secuencia, devuelve el prefijo de la secuencia de longitud &lt;code&gt;n&lt;/code&gt; , o la propia secuencia si &lt;code&gt;n&lt;/code&gt; es mayor que la longitud de la secuencia.</target>
        </trans-unit>
        <trans-unit id="ec5345d4b738007ae4d0718330b8753d2fd5d334" translate="yes" xml:space="preserve">
          <source>O(n)&lt;code&gt;&lt;a href=&quot;data-text-lazy#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt; index (subscript) operator, starting from 0.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8963168f0bc112575b88fa986522b23655ce5f29" translate="yes" xml:space="preserve">
          <source>O(n)&lt;code&gt;&lt;a href=&quot;data-text-lazy#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt; index (subscript) operator, starting from 0. Subject to fusion.</source>
          <target state="translated">O (n) Operador de &amp;iacute;ndice de &lt;code&gt;&lt;a href=&quot;data-text-lazy#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt; (sub&amp;iacute;ndice), comenzando desde 0. Sujeto a fusi&amp;oacute;n.</target>
        </trans-unit>
        <trans-unit id="52001832e9a111e63388c13d8c78741fd22c16dc" translate="yes" xml:space="preserve">
          <source>O(n)&lt;code&gt;&lt;a href=&quot;data-text-lazy#v:all&quot;&gt;all&lt;/a&gt;&lt;/code&gt;&lt;code&gt;p&lt;/code&gt;&lt;code&gt;t&lt;/code&gt; determines whether all characters in the &lt;code&gt;&lt;a href=&quot;data-text-lazy#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt;&lt;code&gt;t&lt;/code&gt; satisfy the predicate &lt;code&gt;p&lt;/code&gt;. Subject to fusion.</source>
          <target state="translated">O (n) &lt;code&gt;&lt;a href=&quot;data-text-lazy#v:all&quot;&gt;all&lt;/a&gt;&lt;/code&gt; &lt;code&gt;p&lt;/code&gt; &lt;code&gt;t&lt;/code&gt; determina si todos los caracteres del &lt;code&gt;&lt;a href=&quot;data-text-lazy#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt; o &lt;code&gt;t&lt;/code&gt; satisfacen el predicado &lt;code&gt;p&lt;/code&gt; . Sujeto a fusi&amp;oacute;n.</target>
        </trans-unit>
        <trans-unit id="a80deb53f3ff5102554537a88ab56ecdbe9919f6" translate="yes" xml:space="preserve">
          <source>O(n)&lt;code&gt;&lt;a href=&quot;data-text-lazy#v:any&quot;&gt;any&lt;/a&gt;&lt;/code&gt;&lt;code&gt;p&lt;/code&gt;&lt;code&gt;t&lt;/code&gt; determines whether any character in the &lt;code&gt;&lt;a href=&quot;data-text-lazy#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt;&lt;code&gt;t&lt;/code&gt; satisfies the predicate &lt;code&gt;p&lt;/code&gt;. Subject to fusion.</source>
          <target state="translated">O (n) &lt;code&gt;&lt;a href=&quot;data-text-lazy#v:any&quot;&gt;any&lt;/a&gt;&lt;/code&gt; &lt;code&gt;p&lt;/code&gt; &lt;code&gt;t&lt;/code&gt; determina si alg&amp;uacute;n car&amp;aacute;cter del &lt;code&gt;&lt;a href=&quot;data-text-lazy#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt; o &lt;code&gt;t&lt;/code&gt; satisface el predicado &lt;code&gt;p&lt;/code&gt; . Sujeto a fusi&amp;oacute;n.</target>
        </trans-unit>
        <trans-unit id="843af696b2b94016c6c577af94d3025d3394bc28" translate="yes" xml:space="preserve">
          <source>O(n)&lt;code&gt;&lt;a href=&quot;data-text-lazy#v:break&quot;&gt;break&lt;/a&gt;&lt;/code&gt; is like &lt;code&gt;&lt;a href=&quot;data-text-lazy#v:span&quot;&gt;span&lt;/a&gt;&lt;/code&gt;, but the prefix returned is over elements that fail the predicate &lt;code&gt;p&lt;/code&gt;.</source>
          <target state="translated">O (n) &lt;code&gt;&lt;a href=&quot;data-text-lazy#v:break&quot;&gt;break&lt;/a&gt;&lt;/code&gt; es como &lt;code&gt;&lt;a href=&quot;data-text-lazy#v:span&quot;&gt;span&lt;/a&gt;&lt;/code&gt; , pero el prefijo devuelto es sobre elementos que fallan en el predicado &lt;code&gt;p&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="8015cbe0acbd22d830807b751205bb9541efeb95" translate="yes" xml:space="preserve">
          <source>O(n)&lt;code&gt;&lt;a href=&quot;data-text-lazy#v:drop&quot;&gt;drop&lt;/a&gt;&lt;/code&gt;&lt;code&gt;n&lt;/code&gt;, applied to a &lt;code&gt;&lt;a href=&quot;data-text-lazy#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt;, returns the suffix of the &lt;code&gt;&lt;a href=&quot;data-text-lazy#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt; after the first &lt;code&gt;n&lt;/code&gt; characters, or the empty &lt;code&gt;&lt;a href=&quot;data-text-lazy#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt; if &lt;code&gt;n&lt;/code&gt; is greater than the length of the &lt;code&gt;&lt;a href=&quot;data-text-lazy#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt;. Subject to fusion.</source>
          <target state="translated">O (n) &lt;code&gt;&lt;a href=&quot;data-text-lazy#v:drop&quot;&gt;drop&lt;/a&gt;&lt;/code&gt; &lt;code&gt;n&lt;/code&gt; , aplicado a un &lt;code&gt;&lt;a href=&quot;data-text-lazy#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt; , devuelve el sufijo del &lt;code&gt;&lt;a href=&quot;data-text-lazy#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt; despu&amp;eacute;s de los primeros &lt;code&gt;n&lt;/code&gt; caracteres, o el &lt;code&gt;&lt;a href=&quot;data-text-lazy#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt; vac&amp;iacute;o si &lt;code&gt;n&lt;/code&gt; es mayor que la longitud del &lt;code&gt;&lt;a href=&quot;data-text-lazy#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt; . Sujeto a fusi&amp;oacute;n.</target>
        </trans-unit>
        <trans-unit id="803c2a3577d64fc8b7b535621c173f7322d98ae4" translate="yes" xml:space="preserve">
          <source>O(n)&lt;code&gt;&lt;a href=&quot;data-text-lazy#v:dropAround&quot;&gt;dropAround&lt;/a&gt;&lt;/code&gt;&lt;code&gt;p&lt;/code&gt;&lt;code&gt;t&lt;/code&gt; returns the substring remaining after dropping characters that satisfy the predicate &lt;code&gt;p&lt;/code&gt; from both the beginning and end of &lt;code&gt;t&lt;/code&gt;.</source>
          <target state="translated">O (n) &lt;code&gt;&lt;a href=&quot;data-text-lazy#v:dropAround&quot;&gt;dropAround&lt;/a&gt;&lt;/code&gt; &lt;code&gt;p&lt;/code&gt; &lt;code&gt;t&lt;/code&gt; devuelve la subcadena restante despu&amp;eacute;s de eliminar los caracteres que satisfacen el predicado &lt;code&gt;p&lt;/code&gt; tanto del principio como del final de &lt;code&gt;t&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="4da52596bae25a03fe4d5fcfd6d854401bfc5821" translate="yes" xml:space="preserve">
          <source>O(n)&lt;code&gt;&lt;a href=&quot;data-text-lazy#v:dropAround&quot;&gt;dropAround&lt;/a&gt;&lt;/code&gt;&lt;code&gt;p&lt;/code&gt;&lt;code&gt;t&lt;/code&gt; returns the substring remaining after dropping characters that satisfy the predicate &lt;code&gt;p&lt;/code&gt; from both the beginning and end of &lt;code&gt;t&lt;/code&gt;. Subject to fusion.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8b8335a4c8467eeeadac078c96149b316651e93c" translate="yes" xml:space="preserve">
          <source>O(n)&lt;code&gt;&lt;a href=&quot;data-text-lazy#v:dropEnd&quot;&gt;dropEnd&lt;/a&gt;&lt;/code&gt;&lt;code&gt;n&lt;/code&gt;&lt;code&gt;t&lt;/code&gt; returns the prefix remaining after dropping &lt;code&gt;n&lt;/code&gt; characters from the end of &lt;code&gt;t&lt;/code&gt;.</source>
          <target state="translated">O (n) &lt;code&gt;&lt;a href=&quot;data-text-lazy#v:dropEnd&quot;&gt;dropEnd&lt;/a&gt;&lt;/code&gt; &lt;code&gt;n&lt;/code&gt; &lt;code&gt;t&lt;/code&gt; devuelve el prefijo restante despu&amp;eacute;s de eliminar &lt;code&gt;n&lt;/code&gt; caracteres del final de &lt;code&gt;t&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="d9a32767a767b136763342cc8fed3626bdf438b4" translate="yes" xml:space="preserve">
          <source>O(n)&lt;code&gt;&lt;a href=&quot;data-text-lazy#v:dropWhile&quot;&gt;dropWhile&lt;/a&gt;&lt;/code&gt;&lt;code&gt;p&lt;/code&gt;&lt;code&gt;t&lt;/code&gt; returns the suffix remaining after &lt;code&gt;&lt;a href=&quot;data-text-lazy#v:takeWhile&quot;&gt;takeWhile&lt;/a&gt;&lt;/code&gt;&lt;code&gt;p&lt;/code&gt;&lt;code&gt;t&lt;/code&gt;. Subject to fusion.</source>
          <target state="translated">O (n) &lt;code&gt;&lt;a href=&quot;data-text-lazy#v:dropWhile&quot;&gt;dropWhile&lt;/a&gt;&lt;/code&gt; &lt;code&gt;p&lt;/code&gt; &lt;code&gt;t&lt;/code&gt; devuelve el sufijo restante despu&amp;eacute;s de &lt;code&gt;&lt;a href=&quot;data-text-lazy#v:takeWhile&quot;&gt;takeWhile&lt;/a&gt;&lt;/code&gt; &lt;code&gt;p&lt;/code&gt; &lt;code&gt;t&lt;/code&gt; . Sujeto a fusi&amp;oacute;n.</target>
        </trans-unit>
        <trans-unit id="89b4db52cdaace3419e13833e1e5f48543f35232" translate="yes" xml:space="preserve">
          <source>O(n)&lt;code&gt;&lt;a href=&quot;data-text-lazy#v:dropWhileEnd&quot;&gt;dropWhileEnd&lt;/a&gt;&lt;/code&gt;&lt;code&gt;p&lt;/code&gt;&lt;code&gt;t&lt;/code&gt; returns the prefix remaining after dropping characters that satisfy the predicate &lt;code&gt;p&lt;/code&gt; from the end of &lt;code&gt;t&lt;/code&gt;.</source>
          <target state="translated">O (n) &lt;code&gt;&lt;a href=&quot;data-text-lazy#v:dropWhileEnd&quot;&gt;dropWhileEnd&lt;/a&gt;&lt;/code&gt; &lt;code&gt;p&lt;/code&gt; &lt;code&gt;t&lt;/code&gt; devuelve el prefijo restante despu&amp;eacute;s de eliminar los caracteres que satisfacen el predicado &lt;code&gt;p&lt;/code&gt; desde el final de &lt;code&gt;t&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="71d3f9fc45ab8bc303bb4565aef5df7a8ab861d7" translate="yes" xml:space="preserve">
          <source>O(n)&lt;code&gt;&lt;a href=&quot;data-text-lazy#v:filter&quot;&gt;filter&lt;/a&gt;&lt;/code&gt;, applied to a predicate and a &lt;code&gt;&lt;a href=&quot;data-text-lazy#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt;, returns a &lt;code&gt;&lt;a href=&quot;data-text-lazy#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt; containing those characters that satisfy the predicate.</source>
          <target state="translated">El &lt;code&gt;&lt;a href=&quot;data-text-lazy#v:filter&quot;&gt;filter&lt;/a&gt;&lt;/code&gt; O (n) , aplicado a un predicado y un &lt;code&gt;&lt;a href=&quot;data-text-lazy#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt; , devuelve un &lt;code&gt;&lt;a href=&quot;data-text-lazy#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt; contiene los caracteres que satisfacen el predicado.</target>
        </trans-unit>
        <trans-unit id="84c8b4d29979d85554d7904ebbaab64e20a7bd42" translate="yes" xml:space="preserve">
          <source>O(n)&lt;code&gt;&lt;a href=&quot;data-text-lazy#v:foldl&quot;&gt;foldl&lt;/a&gt;&lt;/code&gt;, applied to a binary operator, a starting value (typically the left-identity of the operator), and a &lt;code&gt;&lt;a href=&quot;data-text-lazy#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt;, reduces the &lt;code&gt;&lt;a href=&quot;data-text-lazy#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt; using the binary operator, from left to right. Subject to fusion.</source>
          <target state="translated">O (n) &lt;code&gt;&lt;a href=&quot;data-text-lazy#v:foldl&quot;&gt;foldl&lt;/a&gt;&lt;/code&gt; , aplicado a un operador binario, un valor inicial (t&amp;iacute;picamente la identidad izquierda del operador) y un &lt;code&gt;&lt;a href=&quot;data-text-lazy#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt; o , reduce el &lt;code&gt;&lt;a href=&quot;data-text-lazy#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt; o usando el operador binario, de izquierda a derecha. Sujeto a fusi&amp;oacute;n.</target>
        </trans-unit>
        <trans-unit id="32828db51b3f1d98312c38de9aa152cd0b245c37" translate="yes" xml:space="preserve">
          <source>O(n)&lt;code&gt;&lt;a href=&quot;data-text-lazy#v:foldr&quot;&gt;foldr&lt;/a&gt;&lt;/code&gt;, applied to a binary operator, a starting value (typically the right-identity of the operator), and a &lt;code&gt;&lt;a href=&quot;data-text-lazy#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt;, reduces the &lt;code&gt;&lt;a href=&quot;data-text-lazy#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt; using the binary operator, from right to left. Subject to fusion.</source>
          <target state="translated">O (n) &lt;code&gt;&lt;a href=&quot;data-text-lazy#v:foldr&quot;&gt;foldr&lt;/a&gt;&lt;/code&gt; , aplicado a un operador binario, un valor inicial (normalmente la identidad derecha del operador) y un &lt;code&gt;&lt;a href=&quot;data-text-lazy#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt; o , reduce el &lt;code&gt;&lt;a href=&quot;data-text-lazy#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt; o usando el operador binario, de derecha a izquierda. Sujeto a fusi&amp;oacute;n.</target>
        </trans-unit>
        <trans-unit id="b9547085ec7aae34af4b82fa0951d92170eb8a3d" translate="yes" xml:space="preserve">
          <source>O(n)&lt;code&gt;&lt;a href=&quot;data-text-lazy#v:map&quot;&gt;map&lt;/a&gt;&lt;/code&gt;&lt;code&gt;f&lt;/code&gt;&lt;code&gt;t&lt;/code&gt; is the &lt;code&gt;&lt;a href=&quot;data-text-lazy#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt; obtained by applying &lt;code&gt;f&lt;/code&gt; to each element of &lt;code&gt;t&lt;/code&gt;. Subject to fusion. Performs replacement on invalid scalar values.</source>
          <target state="translated">O (n) &lt;code&gt;&lt;a href=&quot;data-text-lazy#v:map&quot;&gt;map&lt;/a&gt;&lt;/code&gt; &lt;code&gt;f&lt;/code&gt; &lt;code&gt;t&lt;/code&gt; es el &lt;code&gt;&lt;a href=&quot;data-text-lazy#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt; obtenido al aplicar &lt;code&gt;f&lt;/code&gt; a cada elemento de &lt;code&gt;t&lt;/code&gt; . Sujeto a fusi&amp;oacute;n. Realiza el reemplazo de valores escalares no v&amp;aacute;lidos.</target>
        </trans-unit>
        <trans-unit id="275d34f83778a74e1a4c86f88fdbe41d09ac601c" translate="yes" xml:space="preserve">
          <source>O(n)&lt;code&gt;&lt;a href=&quot;data-text-lazy#v:maximum&quot;&gt;maximum&lt;/a&gt;&lt;/code&gt; returns the maximum value from a &lt;code&gt;&lt;a href=&quot;data-text-lazy#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt;, which must be non-empty. Subject to fusion.</source>
          <target state="translated">O (n) &lt;code&gt;&lt;a href=&quot;data-text-lazy#v:maximum&quot;&gt;maximum&lt;/a&gt;&lt;/code&gt; devuelve el valor m&amp;aacute;ximo de un &lt;code&gt;&lt;a href=&quot;data-text-lazy#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt; , que no debe estar vac&amp;iacute;o. Sujeto a fusi&amp;oacute;n.</target>
        </trans-unit>
        <trans-unit id="aab0542c71645f606c2c21ed062d6c45d54fd679" translate="yes" xml:space="preserve">
          <source>O(n)&lt;code&gt;&lt;a href=&quot;data-text-lazy#v:minimum&quot;&gt;minimum&lt;/a&gt;&lt;/code&gt; returns the minimum value from a &lt;code&gt;&lt;a href=&quot;data-text-lazy#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt;, which must be non-empty. Subject to fusion.</source>
          <target state="translated">O (n) &lt;code&gt;&lt;a href=&quot;data-text-lazy#v:minimum&quot;&gt;minimum&lt;/a&gt;&lt;/code&gt; devuelve el valor m&amp;iacute;nimo de un &lt;code&gt;&lt;a href=&quot;data-text-lazy#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt; , que no debe estar vac&amp;iacute;o. Sujeto a fusi&amp;oacute;n.</target>
        </trans-unit>
        <trans-unit id="8c2f9f716605703cc16d79787eb6433b44544b74" translate="yes" xml:space="preserve">
          <source>O(n)&lt;code&gt;&lt;a href=&quot;data-text-lazy#v:reverse&quot;&gt;reverse&lt;/a&gt;&lt;/code&gt;&lt;code&gt;t&lt;/code&gt; returns the elements of &lt;code&gt;t&lt;/code&gt; in reverse order.</source>
          <target state="translated">O (n) &lt;code&gt;&lt;a href=&quot;data-text-lazy#v:reverse&quot;&gt;reverse&lt;/a&gt;&lt;/code&gt; &lt;code&gt;t&lt;/code&gt; devuelve los elementos de &lt;code&gt;t&lt;/code&gt; en orden inverso.</target>
        </trans-unit>
        <trans-unit id="290e19543b06aa470e6e00fa1777da74ca666bcb" translate="yes" xml:space="preserve">
          <source>O(n)&lt;code&gt;&lt;a href=&quot;data-text-lazy#v:scanl&quot;&gt;scanl&lt;/a&gt;&lt;/code&gt; is similar to &lt;code&gt;&lt;a href=&quot;data-text-lazy#v:foldl&quot;&gt;foldl&lt;/a&gt;&lt;/code&gt;, but returns a list of successive reduced values from the left. Subject to fusion. Performs replacement on invalid scalar values.</source>
          <target state="translated">O (n) &lt;code&gt;&lt;a href=&quot;data-text-lazy#v:scanl&quot;&gt;scanl&lt;/a&gt;&lt;/code&gt; es similar a &lt;code&gt;&lt;a href=&quot;data-text-lazy#v:foldl&quot;&gt;foldl&lt;/a&gt;&lt;/code&gt; , pero devuelve una lista de valores reducidos sucesivos desde la izquierda. Sujeto a fusi&amp;oacute;n. Realiza el reemplazo de valores escalares no v&amp;aacute;lidos.</target>
        </trans-unit>
        <trans-unit id="bfbae6d3a43ef1d2a9cfee5b582edbbb5f448c1d" translate="yes" xml:space="preserve">
          <source>O(n)&lt;code&gt;&lt;a href=&quot;data-text-lazy#v:scanl1&quot;&gt;scanl1&lt;/a&gt;&lt;/code&gt; is a variant of &lt;code&gt;&lt;a href=&quot;data-text-lazy#v:scanl&quot;&gt;scanl&lt;/a&gt;&lt;/code&gt; that has no starting value argument. Performs replacement on invalid scalar values.</source>
          <target state="translated">O (n) &lt;code&gt;&lt;a href=&quot;data-text-lazy#v:scanl1&quot;&gt;scanl1&lt;/a&gt;&lt;/code&gt; es una variante de &lt;code&gt;&lt;a href=&quot;data-text-lazy#v:scanl&quot;&gt;scanl&lt;/a&gt;&lt;/code&gt; que no tiene un argumento de valor inicial. Realiza el reemplazo de valores escalares no v&amp;aacute;lidos.</target>
        </trans-unit>
        <trans-unit id="96ad6aeb8b2e98cf441e1d6939ad433053c60b72" translate="yes" xml:space="preserve">
          <source>O(n)&lt;code&gt;&lt;a href=&quot;data-text-lazy#v:scanl1&quot;&gt;scanl1&lt;/a&gt;&lt;/code&gt; is a variant of &lt;code&gt;&lt;a href=&quot;data-text-lazy#v:scanl&quot;&gt;scanl&lt;/a&gt;&lt;/code&gt; that has no starting value argument. Subject to fusion. Performs replacement on invalid scalar values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="752730ad120352a67964470bec9296c38933d9a6" translate="yes" xml:space="preserve">
          <source>O(n)&lt;code&gt;&lt;a href=&quot;data-text-lazy#v:scanr&quot;&gt;scanr&lt;/a&gt;&lt;/code&gt; is the right-to-left dual of &lt;code&gt;&lt;a href=&quot;data-text-lazy#v:scanl&quot;&gt;scanl&lt;/a&gt;&lt;/code&gt;. Performs replacement on invalid scalar values.</source>
          <target state="translated">O (n) &lt;code&gt;&lt;a href=&quot;data-text-lazy#v:scanr&quot;&gt;scanr&lt;/a&gt;&lt;/code&gt; es el dual de derecha a izquierda de &lt;code&gt;&lt;a href=&quot;data-text-lazy#v:scanl&quot;&gt;scanl&lt;/a&gt;&lt;/code&gt; . Realiza el reemplazo de valores escalares no v&amp;aacute;lidos.</target>
        </trans-unit>
        <trans-unit id="defff53dbc7d598b9a15f139c156778912a78cf7" translate="yes" xml:space="preserve">
          <source>O(n)&lt;code&gt;&lt;a href=&quot;data-text-lazy#v:scanr1&quot;&gt;scanr1&lt;/a&gt;&lt;/code&gt; is a variant of &lt;code&gt;&lt;a href=&quot;data-text-lazy#v:scanr&quot;&gt;scanr&lt;/a&gt;&lt;/code&gt; that has no starting value argument. Performs replacement on invalid scalar values.</source>
          <target state="translated">O (n) &lt;code&gt;&lt;a href=&quot;data-text-lazy#v:scanr1&quot;&gt;scanr1&lt;/a&gt;&lt;/code&gt; es una variante de &lt;code&gt;&lt;a href=&quot;data-text-lazy#v:scanr&quot;&gt;scanr&lt;/a&gt;&lt;/code&gt; que no tiene un argumento de valor inicial. Realiza el reemplazo de valores escalares no v&amp;aacute;lidos.</target>
        </trans-unit>
        <trans-unit id="ec22df8af2b3913cd31c2ff7b32450ee597a62ce" translate="yes" xml:space="preserve">
          <source>O(n)&lt;code&gt;&lt;a href=&quot;data-text-lazy#v:span&quot;&gt;span&lt;/a&gt;&lt;/code&gt;, applied to a predicate &lt;code&gt;p&lt;/code&gt; and text &lt;code&gt;t&lt;/code&gt;, returns a pair whose first element is the longest prefix (possibly empty) of &lt;code&gt;t&lt;/code&gt; of elements that satisfy &lt;code&gt;p&lt;/code&gt;, and whose second is the remainder of the list.</source>
          <target state="translated">O (n) &lt;code&gt;&lt;a href=&quot;data-text-lazy#v:span&quot;&gt;span&lt;/a&gt;&lt;/code&gt; , aplicado a un predicado &lt;code&gt;p&lt;/code&gt; y un texto &lt;code&gt;t&lt;/code&gt; , devuelve un par cuyo primer elemento es el prefijo m&amp;aacute;s largo (posiblemente vac&amp;iacute;o) de &lt;code&gt;t&lt;/code&gt; de elementos que satisfacen &lt;code&gt;p&lt;/code&gt; , y cuyo segundo es el resto de la lista.</target>
        </trans-unit>
        <trans-unit id="ed213541644726c53144685282a501ecf21fc2ba" translate="yes" xml:space="preserve">
          <source>O(n)&lt;code&gt;&lt;a href=&quot;data-text-lazy#v:splitAt&quot;&gt;splitAt&lt;/a&gt;&lt;/code&gt;&lt;code&gt;n t&lt;/code&gt; returns a pair whose first element is a prefix of &lt;code&gt;t&lt;/code&gt; of length &lt;code&gt;n&lt;/code&gt;, and whose second is the remainder of the string. It is equivalent to &lt;code&gt;(&lt;a href=&quot;data-text-lazy#v:take&quot;&gt;take&lt;/a&gt; n t, &lt;a href=&quot;data-text-lazy#v:drop&quot;&gt;drop&lt;/a&gt; n t)&lt;/code&gt;.</source>
          <target state="translated">O (n) &lt;code&gt;&lt;a href=&quot;data-text-lazy#v:splitAt&quot;&gt;splitAt&lt;/a&gt;&lt;/code&gt; &lt;code&gt;n t&lt;/code&gt; devuelve un par cuyo primer elemento es un prefijo de &lt;code&gt;t&lt;/code&gt; de longitud &lt;code&gt;n&lt;/code&gt; , y cuyo segundo es el resto de la cadena. Es equivalente a &lt;code&gt;(&lt;a href=&quot;data-text-lazy#v:take&quot;&gt;take&lt;/a&gt; n t, &lt;a href=&quot;data-text-lazy#v:drop&quot;&gt;drop&lt;/a&gt; n t)&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="2a4e6688874ddaf9782c32f74b5af00856d6162c" translate="yes" xml:space="preserve">
          <source>O(n)&lt;code&gt;&lt;a href=&quot;data-text-lazy#v:take&quot;&gt;take&lt;/a&gt;&lt;/code&gt;&lt;code&gt;n&lt;/code&gt;, applied to a &lt;code&gt;&lt;a href=&quot;data-text-lazy#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt;, returns the prefix of the &lt;code&gt;&lt;a href=&quot;data-text-lazy#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt; of length &lt;code&gt;n&lt;/code&gt;, or the &lt;code&gt;&lt;a href=&quot;data-text-lazy#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt; itself if &lt;code&gt;n&lt;/code&gt; is greater than the length of the Text. Subject to fusion.</source>
          <target state="translated">O (n) &lt;code&gt;&lt;a href=&quot;data-text-lazy#v:take&quot;&gt;take&lt;/a&gt;&lt;/code&gt; &lt;code&gt;n&lt;/code&gt; , aplicado a un &lt;code&gt;&lt;a href=&quot;data-text-lazy#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt; , devuelve el prefijo del &lt;code&gt;&lt;a href=&quot;data-text-lazy#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt; de longitud &lt;code&gt;n&lt;/code&gt; , o el &lt;code&gt;&lt;a href=&quot;data-text-lazy#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt; mismo si &lt;code&gt;n&lt;/code&gt; es mayor que la longitud del texto. Sujeto a fusi&amp;oacute;n.</target>
        </trans-unit>
        <trans-unit id="fafb109ed736e9539678dc223045f998ecc60586" translate="yes" xml:space="preserve">
          <source>O(n)&lt;code&gt;&lt;a href=&quot;data-text-lazy#v:takeEnd&quot;&gt;takeEnd&lt;/a&gt;&lt;/code&gt;&lt;code&gt;n&lt;/code&gt;&lt;code&gt;t&lt;/code&gt; returns the suffix remaining after taking &lt;code&gt;n&lt;/code&gt; characters from the end of &lt;code&gt;t&lt;/code&gt;.</source>
          <target state="translated">O (n) &lt;code&gt;&lt;a href=&quot;data-text-lazy#v:takeEnd&quot;&gt;takeEnd&lt;/a&gt;&lt;/code&gt; &lt;code&gt;n&lt;/code&gt; &lt;code&gt;t&lt;/code&gt; devuelve el sufijo restante despu&amp;eacute;s de tomar &lt;code&gt;n&lt;/code&gt; caracteres del final de &lt;code&gt;t&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="48231e4265962339b40bf2779c38705e16bb89c6" translate="yes" xml:space="preserve">
          <source>O(n)&lt;code&gt;&lt;a href=&quot;data-text-lazy#v:takeWhile&quot;&gt;takeWhile&lt;/a&gt;&lt;/code&gt;, applied to a predicate &lt;code&gt;p&lt;/code&gt; and a &lt;code&gt;&lt;a href=&quot;data-text-lazy#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt;, returns the longest prefix (possibly empty) of elements that satisfy &lt;code&gt;p&lt;/code&gt;. Subject to fusion.</source>
          <target state="translated">O (n) &lt;code&gt;&lt;a href=&quot;data-text-lazy#v:takeWhile&quot;&gt;takeWhile&lt;/a&gt;&lt;/code&gt; , aplicado a un predicado &lt;code&gt;p&lt;/code&gt; y a &lt;code&gt;&lt;a href=&quot;data-text-lazy#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt; , devuelve el prefijo m&amp;aacute;s largo (posiblemente vac&amp;iacute;o) de los elementos que satisfacen &lt;code&gt;p&lt;/code&gt; . Sujeto a fusi&amp;oacute;n.</target>
        </trans-unit>
        <trans-unit id="0fbcec5531082dc0f76c85517fe246d924a8b4d5" translate="yes" xml:space="preserve">
          <source>O(n)&lt;code&gt;&lt;a href=&quot;data-text-lazy#v:takeWhileEnd&quot;&gt;takeWhileEnd&lt;/a&gt;&lt;/code&gt;, applied to a predicate &lt;code&gt;p&lt;/code&gt; and a &lt;code&gt;&lt;a href=&quot;data-text-lazy#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt;, returns the longest suffix (possibly empty) of elements that satisfy &lt;code&gt;p&lt;/code&gt;. Examples:</source>
          <target state="translated">O (n) &lt;code&gt;&lt;a href=&quot;data-text-lazy#v:takeWhileEnd&quot;&gt;takeWhileEnd&lt;/a&gt;&lt;/code&gt; , aplicado a un predicado &lt;code&gt;p&lt;/code&gt; y un &lt;code&gt;&lt;a href=&quot;data-text-lazy#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt; , devuelve el sufijo m&amp;aacute;s largo (posiblemente vac&amp;iacute;o) de los elementos que satisfacen &lt;code&gt;p&lt;/code&gt; . Ejemplos:</target>
        </trans-unit>
        <trans-unit id="b425ee4e8c05b3cda0ff6d30f9b09d52f8c568cc" translate="yes" xml:space="preserve">
          <source>O(n)&lt;code&gt;&lt;a href=&quot;data-text-lazy#v:zip&quot;&gt;zip&lt;/a&gt;&lt;/code&gt; takes two &lt;code&gt;&lt;a href=&quot;data-text-lazy#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt;s and returns a list of corresponding pairs of bytes. If one input &lt;code&gt;&lt;a href=&quot;data-text-lazy#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt; is short, excess elements of the longer &lt;code&gt;&lt;a href=&quot;data-text-lazy#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt; are discarded. This is equivalent to a pair of &lt;code&gt;&lt;a href=&quot;data-text-lazy#v:unpack&quot;&gt;unpack&lt;/a&gt;&lt;/code&gt; operations.</source>
          <target state="translated">O (n) &lt;code&gt;&lt;a href=&quot;data-text-lazy#v:zip&quot;&gt;zip&lt;/a&gt;&lt;/code&gt; toma dos &lt;code&gt;&lt;a href=&quot;data-text-lazy#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt; sy devuelve una lista de los pares de bytes correspondientes. Si un &lt;code&gt;&lt;a href=&quot;data-text-lazy#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt; entrada es corto, los elementos sobrantes del &lt;code&gt;&lt;a href=&quot;data-text-lazy#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt; m&amp;aacute;s largo se descartan. Esto equivale a un par de operaciones de &lt;code&gt;&lt;a href=&quot;data-text-lazy#v:unpack&quot;&gt;unpack&lt;/a&gt;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="1581c28e8613b72990177d99cabcdaa4473b802f" translate="yes" xml:space="preserve">
          <source>O(n)&lt;code&gt;&lt;a href=&quot;data-text-lazy#v:zipWith&quot;&gt;zipWith&lt;/a&gt;&lt;/code&gt; generalises &lt;code&gt;&lt;a href=&quot;data-text-lazy#v:zip&quot;&gt;zip&lt;/a&gt;&lt;/code&gt; by zipping with the function given as the first argument, instead of a tupling function. Performs replacement on invalid scalar values.</source>
          <target state="translated">O (n) &lt;code&gt;&lt;a href=&quot;data-text-lazy#v:zipWith&quot;&gt;zipWith&lt;/a&gt;&lt;/code&gt; generaliza &lt;code&gt;&lt;a href=&quot;data-text-lazy#v:zip&quot;&gt;zip&lt;/a&gt;&lt;/code&gt; comprimiendo con la funci&amp;oacute;n dada como primer argumento, en lugar de una funci&amp;oacute;n tupling. Realiza el reemplazo de valores escalares no v&amp;aacute;lidos.</target>
        </trans-unit>
        <trans-unit id="064939379eae2c6be3abdbb7b12833cf140eacf3" translate="yes" xml:space="preserve">
          <source>O(n*log n). &lt;code&gt;&lt;a href=&quot;data-intmap-strict#v:mapKeysWith&quot;&gt;mapKeysWith&lt;/a&gt; c f s&lt;/code&gt; is the map obtained by applying &lt;code&gt;f&lt;/code&gt; to each key of &lt;code&gt;s&lt;/code&gt;.</source>
          <target state="translated">O (n * log n). &lt;code&gt;&lt;a href=&quot;data-intmap-strict#v:mapKeysWith&quot;&gt;mapKeysWith&lt;/a&gt; c f s&lt;/code&gt; es el mapa que se obtiene aplicando &lt;code&gt;f&lt;/code&gt; a cada clave de &lt;code&gt;s&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="e8edcb9f3b9ce9874d0f50df16eaf453e97b5522" translate="yes" xml:space="preserve">
          <source>O(n*log n). &lt;code&gt;&lt;a href=&quot;data-intmap-strict-internal#v:mapKeysWith&quot;&gt;mapKeysWith&lt;/a&gt; c f s&lt;/code&gt; is the map obtained by applying &lt;code&gt;f&lt;/code&gt; to each key of &lt;code&gt;s&lt;/code&gt;.</source>
          <target state="translated">O (n * log n). &lt;code&gt;&lt;a href=&quot;data-intmap-strict-internal#v:mapKeysWith&quot;&gt;mapKeysWith&lt;/a&gt; c f s&lt;/code&gt; es el mapa que se obtiene aplicando &lt;code&gt;f&lt;/code&gt; a cada clave de &lt;code&gt;s&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="1d21400b6e833afb6bf8143413e415596fc7e8c2" translate="yes" xml:space="preserve">
          <source>O(n*log n). &lt;code&gt;&lt;a href=&quot;data-map-lazy#v:mapKeys&quot;&gt;mapKeys&lt;/a&gt; f s&lt;/code&gt; is the map obtained by applying &lt;code&gt;f&lt;/code&gt; to each key of &lt;code&gt;s&lt;/code&gt;.</source>
          <target state="translated">O (n * log n). &lt;code&gt;&lt;a href=&quot;data-map-lazy#v:mapKeys&quot;&gt;mapKeys&lt;/a&gt; f s&lt;/code&gt; es el mapa obtenido al aplicar &lt;code&gt;f&lt;/code&gt; a cada clave de &lt;code&gt;s&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="10c506dbf93fa334d9a419951daf58b88553c5ad" translate="yes" xml:space="preserve">
          <source>O(n*log n). &lt;code&gt;&lt;a href=&quot;data-map-lazy#v:mapKeysWith&quot;&gt;mapKeysWith&lt;/a&gt; c f s&lt;/code&gt; is the map obtained by applying &lt;code&gt;f&lt;/code&gt; to each key of &lt;code&gt;s&lt;/code&gt;.</source>
          <target state="translated">O (n * log n). &lt;code&gt;&lt;a href=&quot;data-map-lazy#v:mapKeysWith&quot;&gt;mapKeysWith&lt;/a&gt; c f s&lt;/code&gt; es el mapa que se obtiene aplicando &lt;code&gt;f&lt;/code&gt; a cada clave de &lt;code&gt;s&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="f834fc8764b608e3a2c7e67729ea839011b86b0d" translate="yes" xml:space="preserve">
          <source>O(n*log n). &lt;code&gt;&lt;a href=&quot;data-map-strict#v:mapKeys&quot;&gt;mapKeys&lt;/a&gt; f s&lt;/code&gt; is the map obtained by applying &lt;code&gt;f&lt;/code&gt; to each key of &lt;code&gt;s&lt;/code&gt;.</source>
          <target state="translated">O (n * log n). &lt;code&gt;&lt;a href=&quot;data-map-strict#v:mapKeys&quot;&gt;mapKeys&lt;/a&gt; f s&lt;/code&gt; es el mapa obtenido al aplicar &lt;code&gt;f&lt;/code&gt; a cada clave de &lt;code&gt;s&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="55b64ce77eb583b2a8d7e0008229894a3efce603" translate="yes" xml:space="preserve">
          <source>O(n*log n). &lt;code&gt;&lt;a href=&quot;data-map-strict#v:mapKeysWith&quot;&gt;mapKeysWith&lt;/a&gt; c f s&lt;/code&gt; is the map obtained by applying &lt;code&gt;f&lt;/code&gt; to each key of &lt;code&gt;s&lt;/code&gt;.</source>
          <target state="translated">O (n * log n). &lt;code&gt;&lt;a href=&quot;data-map-strict#v:mapKeysWith&quot;&gt;mapKeysWith&lt;/a&gt; c f s&lt;/code&gt; es el mapa que se obtiene aplicando &lt;code&gt;f&lt;/code&gt; a cada clave de &lt;code&gt;s&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="ef55ea6e8a459abefacb74a290038f5ce0831ec8" translate="yes" xml:space="preserve">
          <source>O(n*log n). &lt;code&gt;&lt;a href=&quot;data-set#v:map&quot;&gt;map&lt;/a&gt; f s&lt;/code&gt; is the set obtained by applying &lt;code&gt;f&lt;/code&gt; to each element of &lt;code&gt;s&lt;/code&gt;.</source>
          <target state="translated">O (n * log n). &lt;code&gt;&lt;a href=&quot;data-set#v:map&quot;&gt;map&lt;/a&gt; f s&lt;/code&gt; es el conjunto obtenido aplicando &lt;code&gt;f&lt;/code&gt; a cada elemento de &lt;code&gt;s&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="e21338981ac62324a8ffb888033d85823da92462" translate="yes" xml:space="preserve">
          <source>O(n*log n). Build a map from a list of key/value pairs with a combining function. See also &lt;code&gt;&lt;a href=&quot;data-map-lazy#v:fromAscListWith&quot;&gt;fromAscListWith&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">O (n * log n). Cree un mapa a partir de una lista de pares clave / valor con una funci&amp;oacute;n de combinaci&amp;oacute;n. Consulte tambi&amp;eacute;n &lt;code&gt;&lt;a href=&quot;data-map-lazy#v:fromAscListWith&quot;&gt;fromAscListWith&lt;/a&gt;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="8b4ee600b68a1b413680c347347b72d52a62b248" translate="yes" xml:space="preserve">
          <source>O(n*log n). Build a map from a list of key/value pairs with a combining function. See also &lt;code&gt;&lt;a href=&quot;data-map-lazy#v:fromAscListWithKey&quot;&gt;fromAscListWithKey&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">O (n * log n). Cree un mapa a partir de una lista de pares clave / valor con una funci&amp;oacute;n de combinaci&amp;oacute;n. Consulte tambi&amp;eacute;n &lt;code&gt;&lt;a href=&quot;data-map-lazy#v:fromAscListWithKey&quot;&gt;fromAscListWithKey&lt;/a&gt;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="c2b6445f60417018f5403793c1dd9664c415e81b" translate="yes" xml:space="preserve">
          <source>O(n*log n). Build a map from a list of key/value pairs with a combining function. See also &lt;code&gt;&lt;a href=&quot;data-map-strict#v:fromAscListWith&quot;&gt;fromAscListWith&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">O (n * log n). Cree un mapa a partir de una lista de pares clave / valor con una funci&amp;oacute;n de combinaci&amp;oacute;n. Consulte tambi&amp;eacute;n &lt;code&gt;&lt;a href=&quot;data-map-strict#v:fromAscListWith&quot;&gt;fromAscListWith&lt;/a&gt;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="54ee44c25d5df18f80f0b752d11418a6db2d26b9" translate="yes" xml:space="preserve">
          <source>O(n*log n). Build a map from a list of key/value pairs with a combining function. See also &lt;code&gt;&lt;a href=&quot;data-map-strict#v:fromAscListWithKey&quot;&gt;fromAscListWithKey&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">O (n * log n). Cree un mapa a partir de una lista de pares clave / valor con una funci&amp;oacute;n de combinaci&amp;oacute;n. Consulte tambi&amp;eacute;n &lt;code&gt;&lt;a href=&quot;data-map-strict#v:fromAscListWithKey&quot;&gt;fromAscListWithKey&lt;/a&gt;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="1342a9ab083de169557710a30b3fad7ae6c99e26" translate="yes" xml:space="preserve">
          <source>O(n*log n). Build a map from a list of key/value pairs. See also &lt;code&gt;&lt;a href=&quot;data-map-lazy#v:fromAscList&quot;&gt;fromAscList&lt;/a&gt;&lt;/code&gt;. If the list contains more than one value for the same key, the last value for the key is retained.</source>
          <target state="translated">O (n * log n). Cree un mapa a partir de una lista de pares clave / valor. Consulte tambi&amp;eacute;n &lt;code&gt;&lt;a href=&quot;data-map-lazy#v:fromAscList&quot;&gt;fromAscList&lt;/a&gt;&lt;/code&gt; . Si la lista contiene m&amp;aacute;s de un valor para la misma clave, se conserva el &amp;uacute;ltimo valor de la clave.</target>
        </trans-unit>
        <trans-unit id="02e2cd705835954197360bd74e3af96c7c963564" translate="yes" xml:space="preserve">
          <source>O(n*log n). Build a map from a list of key/value pairs. See also &lt;code&gt;&lt;a href=&quot;data-map-strict#v:fromAscList&quot;&gt;fromAscList&lt;/a&gt;&lt;/code&gt;. If the list contains more than one value for the same key, the last value for the key is retained.</source>
          <target state="translated">O (n * log n). Cree un mapa a partir de una lista de pares clave / valor. Consulte tambi&amp;eacute;n &lt;code&gt;&lt;a href=&quot;data-map-strict#v:fromAscList&quot;&gt;fromAscList&lt;/a&gt;&lt;/code&gt; . Si la lista contiene m&amp;aacute;s de un valor para la misma clave, se conserva el &amp;uacute;ltimo valor de la clave.</target>
        </trans-unit>
        <trans-unit id="b1bd3b225b2e28c124d8bb6bccbf13d7c9843e1d" translate="yes" xml:space="preserve">
          <source>O(n*log n). Create a set from a list of elements.</source>
          <target state="translated">O(n*log n).Crear un conjunto a partir de una lista de elementos.</target>
        </trans-unit>
        <trans-unit id="cf816e1e72765d7793512d1bd9c75675ccb813e8" translate="yes" xml:space="preserve">
          <source>O(n*m)&lt;code&gt;&lt;a href=&quot;data-text#v:replicate&quot;&gt;replicate&lt;/a&gt;&lt;/code&gt;&lt;code&gt;n&lt;/code&gt;&lt;code&gt;t&lt;/code&gt; is a &lt;code&gt;&lt;a href=&quot;data-text#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt; consisting of the input &lt;code&gt;t&lt;/code&gt; repeated &lt;code&gt;n&lt;/code&gt; times.</source>
          <target state="translated">O (n * m) &lt;code&gt;&lt;a href=&quot;data-text#v:replicate&quot;&gt;replicate&lt;/a&gt;&lt;/code&gt; &lt;code&gt;n&lt;/code&gt; &lt;code&gt;t&lt;/code&gt; es un &lt;code&gt;&lt;a href=&quot;data-text#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt; consta de la entrada &lt;code&gt;t&lt;/code&gt; repetida &lt;code&gt;n&lt;/code&gt; veces.</target>
        </trans-unit>
        <trans-unit id="496aa72cda3836a07a9a2fe26ce5be56819c8747" translate="yes" xml:space="preserve">
          <source>O(n*m)&lt;code&gt;&lt;a href=&quot;data-text-lazy#v:replicate&quot;&gt;replicate&lt;/a&gt;&lt;/code&gt;&lt;code&gt;n&lt;/code&gt;&lt;code&gt;t&lt;/code&gt; is a &lt;code&gt;&lt;a href=&quot;data-text-lazy#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt; consisting of the input &lt;code&gt;t&lt;/code&gt; repeated &lt;code&gt;n&lt;/code&gt; times.</source>
          <target state="translated">O (n * m) &lt;code&gt;&lt;a href=&quot;data-text-lazy#v:replicate&quot;&gt;replicate&lt;/a&gt;&lt;/code&gt; &lt;code&gt;n&lt;/code&gt; &lt;code&gt;t&lt;/code&gt; es un &lt;code&gt;&lt;a href=&quot;data-text-lazy#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt; consta de la entrada &lt;code&gt;t&lt;/code&gt; repetida &lt;code&gt;n&lt;/code&gt; veces.</target>
        </trans-unit>
        <trans-unit id="5b88b501d9cd1a51f539e06a9f8b52a7518aed37" translate="yes" xml:space="preserve">
          <source>O(n*min(n,W)). &lt;code&gt;&lt;a href=&quot;data-intmap-lazy#v:mapKeys&quot;&gt;mapKeys&lt;/a&gt; f s&lt;/code&gt; is the map obtained by applying &lt;code&gt;f&lt;/code&gt; to each key of &lt;code&gt;s&lt;/code&gt;.</source>
          <target state="translated">O (n * min (n, W)). &lt;code&gt;&lt;a href=&quot;data-intmap-lazy#v:mapKeys&quot;&gt;mapKeys&lt;/a&gt; f s&lt;/code&gt; es el mapa que se obtiene aplicando &lt;code&gt;f&lt;/code&gt; a cada clave de &lt;code&gt;s&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="c825c89428e8aaee3dd58c3c0ed678ebb02559f4" translate="yes" xml:space="preserve">
          <source>O(n*min(n,W)). &lt;code&gt;&lt;a href=&quot;data-intmap-lazy#v:mapKeysMonotonic&quot;&gt;mapKeysMonotonic&lt;/a&gt; f s == &lt;a href=&quot;data-intmap-lazy#v:mapKeys&quot;&gt;mapKeys&lt;/a&gt; f s&lt;/code&gt;, but works only when &lt;code&gt;f&lt;/code&gt; is strictly monotonic. That is, for any values &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt;, if &lt;code&gt;x&lt;/code&gt; &amp;lt; &lt;code&gt;y&lt;/code&gt; then &lt;code&gt;f x&lt;/code&gt; &amp;lt; &lt;code&gt;f y&lt;/code&gt;. &lt;em&gt;The precondition is not checked.&lt;/em&gt; Semi-formally, we have:</source>
          <target state="translated">O (n * min (n, W)). &lt;code&gt;&lt;a href=&quot;data-intmap-lazy#v:mapKeysMonotonic&quot;&gt;mapKeysMonotonic&lt;/a&gt; f s == &lt;a href=&quot;data-intmap-lazy#v:mapKeys&quot;&gt;mapKeys&lt;/a&gt; f s&lt;/code&gt; , pero solo funciona cuando &lt;code&gt;f&lt;/code&gt; es estrictamente monot&amp;oacute;nico. Es decir, para cualquier valor de &lt;code&gt;x&lt;/code&gt; y &lt;code&gt;y&lt;/code&gt; , si &lt;code&gt;x&lt;/code&gt; &amp;lt; &lt;code&gt;y&lt;/code&gt; entonces &lt;code&gt;f x&lt;/code&gt; &amp;lt; &lt;code&gt;f y&lt;/code&gt; . &lt;em&gt;No se comprueba la condici&amp;oacute;n previa. &lt;/em&gt;De manera semiformal, tenemos:</target>
        </trans-unit>
        <trans-unit id="99b60a72b8c0e9adf3019aa8dfa7569bd4a92c32" translate="yes" xml:space="preserve">
          <source>O(n*min(n,W)). &lt;code&gt;&lt;a href=&quot;data-intmap-lazy#v:mapKeysWith&quot;&gt;mapKeysWith&lt;/a&gt; c f s&lt;/code&gt; is the map obtained by applying &lt;code&gt;f&lt;/code&gt; to each key of &lt;code&gt;s&lt;/code&gt;.</source>
          <target state="translated">O (n * min (n, W)). &lt;code&gt;&lt;a href=&quot;data-intmap-lazy#v:mapKeysWith&quot;&gt;mapKeysWith&lt;/a&gt; c f s&lt;/code&gt; es el mapa que se obtiene aplicando &lt;code&gt;f&lt;/code&gt; a cada clave de &lt;code&gt;s&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="c969970b95ecd5a60d39d789b9e1e9987b1bb4dd" translate="yes" xml:space="preserve">
          <source>O(n*min(n,W)). &lt;code&gt;&lt;a href=&quot;data-intmap-strict#v:mapKeys&quot;&gt;mapKeys&lt;/a&gt; f s&lt;/code&gt; is the map obtained by applying &lt;code&gt;f&lt;/code&gt; to each key of &lt;code&gt;s&lt;/code&gt;.</source>
          <target state="translated">O (n * min (n, W)). &lt;code&gt;&lt;a href=&quot;data-intmap-strict#v:mapKeys&quot;&gt;mapKeys&lt;/a&gt; f s&lt;/code&gt; es el mapa que se obtiene aplicando &lt;code&gt;f&lt;/code&gt; a cada clave de &lt;code&gt;s&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="41ebfbb8f2b447294a3e1e314695a58f6931431c" translate="yes" xml:space="preserve">
          <source>O(n*min(n,W)). &lt;code&gt;&lt;a href=&quot;data-intmap-strict#v:mapKeysMonotonic&quot;&gt;mapKeysMonotonic&lt;/a&gt; f s == &lt;a href=&quot;data-intmap-strict#v:mapKeys&quot;&gt;mapKeys&lt;/a&gt; f s&lt;/code&gt;, but works only when &lt;code&gt;f&lt;/code&gt; is strictly monotonic. That is, for any values &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt;, if &lt;code&gt;x&lt;/code&gt; &amp;lt; &lt;code&gt;y&lt;/code&gt; then &lt;code&gt;f x&lt;/code&gt; &amp;lt; &lt;code&gt;f y&lt;/code&gt;. &lt;em&gt;The precondition is not checked.&lt;/em&gt; Semi-formally, we have:</source>
          <target state="translated">O (n * min (n, W)). &lt;code&gt;&lt;a href=&quot;data-intmap-strict#v:mapKeysMonotonic&quot;&gt;mapKeysMonotonic&lt;/a&gt; f s == &lt;a href=&quot;data-intmap-strict#v:mapKeys&quot;&gt;mapKeys&lt;/a&gt; f s&lt;/code&gt; , pero solo funciona cuando &lt;code&gt;f&lt;/code&gt; es estrictamente monot&amp;oacute;nico. Es decir, para cualquier valor de &lt;code&gt;x&lt;/code&gt; y &lt;code&gt;y&lt;/code&gt; , si &lt;code&gt;x&lt;/code&gt; &amp;lt; &lt;code&gt;y&lt;/code&gt; entonces &lt;code&gt;f x&lt;/code&gt; &amp;lt; &lt;code&gt;f y&lt;/code&gt; . &lt;em&gt;No se comprueba la condici&amp;oacute;n previa. &lt;/em&gt;De manera semiformal, tenemos:</target>
        </trans-unit>
        <trans-unit id="1f74203ecf6c5e6aa71439f7d49b6b4738761859" translate="yes" xml:space="preserve">
          <source>O(n*min(n,W)). &lt;code&gt;&lt;a href=&quot;data-intmap-strict-internal#v:mapKeys&quot;&gt;mapKeys&lt;/a&gt; f s&lt;/code&gt; is the map obtained by applying &lt;code&gt;f&lt;/code&gt; to each key of &lt;code&gt;s&lt;/code&gt;.</source>
          <target state="translated">O (n * min (n, W)). &lt;code&gt;&lt;a href=&quot;data-intmap-strict-internal#v:mapKeys&quot;&gt;mapKeys&lt;/a&gt; f s&lt;/code&gt; es el mapa que se obtiene aplicando &lt;code&gt;f&lt;/code&gt; a cada clave de &lt;code&gt;s&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="e8c92eb26aefeaf7f5adf2cafbf52ebcc77c3862" translate="yes" xml:space="preserve">
          <source>O(n*min(n,W)). &lt;code&gt;&lt;a href=&quot;data-intmap-strict-internal#v:mapKeysMonotonic&quot;&gt;mapKeysMonotonic&lt;/a&gt; f s == &lt;a href=&quot;data-intmap-strict-internal#v:mapKeys&quot;&gt;mapKeys&lt;/a&gt; f s&lt;/code&gt;, but works only when &lt;code&gt;f&lt;/code&gt; is strictly monotonic. That is, for any values &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt;, if &lt;code&gt;x&lt;/code&gt; &amp;lt; &lt;code&gt;y&lt;/code&gt; then &lt;code&gt;f x&lt;/code&gt; &amp;lt; &lt;code&gt;f y&lt;/code&gt;. &lt;em&gt;The precondition is not checked.&lt;/em&gt; Semi-formally, we have:</source>
          <target state="translated">O (n * min (n, W)). &lt;code&gt;&lt;a href=&quot;data-intmap-strict-internal#v:mapKeysMonotonic&quot;&gt;mapKeysMonotonic&lt;/a&gt; f s == &lt;a href=&quot;data-intmap-strict-internal#v:mapKeys&quot;&gt;mapKeys&lt;/a&gt; f s&lt;/code&gt; , pero solo funciona cuando &lt;code&gt;f&lt;/code&gt; es estrictamente monot&amp;oacute;nico. Es decir, para cualquier valor de &lt;code&gt;x&lt;/code&gt; y &lt;code&gt;y&lt;/code&gt; , si &lt;code&gt;x&lt;/code&gt; &amp;lt; &lt;code&gt;y&lt;/code&gt; entonces &lt;code&gt;f x&lt;/code&gt; &amp;lt; &lt;code&gt;f y&lt;/code&gt; . &lt;em&gt;No se comprueba la condici&amp;oacute;n previa. &lt;/em&gt;De manera semiformal, tenemos:</target>
        </trans-unit>
        <trans-unit id="9100fd3a27e166f348e6cd61f6a291f6e0417995" translate="yes" xml:space="preserve">
          <source>O(n*min(n,W)). &lt;code&gt;&lt;a href=&quot;data-intset#v:map&quot;&gt;map&lt;/a&gt; f s&lt;/code&gt; is the set obtained by applying &lt;code&gt;f&lt;/code&gt; to each element of &lt;code&gt;s&lt;/code&gt;.</source>
          <target state="translated">O (n * min (n, W)). &lt;code&gt;&lt;a href=&quot;data-intset#v:map&quot;&gt;map&lt;/a&gt; f s&lt;/code&gt; es el conjunto obtenido aplicando &lt;code&gt;f&lt;/code&gt; a cada elemento de &lt;code&gt;s&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="d205ac9d99bcd11ba10bdf3d053d0d44937ca6ca" translate="yes" xml:space="preserve">
          <source>O(n*min(n,W)). &lt;code&gt;&lt;a href=&quot;data-intset-internal#v:map&quot;&gt;map&lt;/a&gt; f s&lt;/code&gt; is the set obtained by applying &lt;code&gt;f&lt;/code&gt; to each element of &lt;code&gt;s&lt;/code&gt;.</source>
          <target state="translated">O (n * min (n, W)). &lt;code&gt;&lt;a href=&quot;data-intset-internal#v:map&quot;&gt;map&lt;/a&gt; f s&lt;/code&gt; es el conjunto obtenido aplicando &lt;code&gt;f&lt;/code&gt; a cada elemento de &lt;code&gt;s&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="d619d90fc5b48cf5af644e6dcbb4f68f4674b874" translate="yes" xml:space="preserve">
          <source>O(n*min(n,W)). Build a map from a list of key/value pairs with a combining function. See also fromAscListWithKey'.</source>
          <target state="translated">O(n*min(n,W)).Construye un mapa a partir de una lista de pares clave/valor con una función de combinación.Ver también desde &quot;Lista de claves con clave&quot;.</target>
        </trans-unit>
        <trans-unit id="6a2422ae977d3f41d77926cd0791db18ae04e3ec" translate="yes" xml:space="preserve">
          <source>O(n*min(n,W)). Create a map from a list of key/value pairs with a combining function. See also &lt;code&gt;&lt;a href=&quot;data-intmap-lazy#v:fromAscListWith&quot;&gt;fromAscListWith&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">O (n * min (n, W)). Cree un mapa a partir de una lista de pares clave / valor con una funci&amp;oacute;n de combinaci&amp;oacute;n. Consulte tambi&amp;eacute;n &lt;code&gt;&lt;a href=&quot;data-intmap-lazy#v:fromAscListWith&quot;&gt;fromAscListWith&lt;/a&gt;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="5049b4311dd1d4031e503c8eb3922c754e897945" translate="yes" xml:space="preserve">
          <source>O(n*min(n,W)). Create a map from a list of key/value pairs with a combining function. See also &lt;code&gt;&lt;a href=&quot;data-intmap-strict#v:fromAscListWith&quot;&gt;fromAscListWith&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">O (n * min (n, W)). Cree un mapa a partir de una lista de pares clave / valor con una funci&amp;oacute;n de combinaci&amp;oacute;n. Consulte tambi&amp;eacute;n &lt;code&gt;&lt;a href=&quot;data-intmap-strict#v:fromAscListWith&quot;&gt;fromAscListWith&lt;/a&gt;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="2bea1f51f900a25425eba0fd0046a89d1236cf0a" translate="yes" xml:space="preserve">
          <source>O(n*min(n,W)). Create a map from a list of key/value pairs with a combining function. See also &lt;code&gt;&lt;a href=&quot;data-intmap-strict-internal#v:fromAscListWith&quot;&gt;fromAscListWith&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">O (n * min (n, W)). Cree un mapa a partir de una lista de pares clave / valor con una funci&amp;oacute;n de combinaci&amp;oacute;n. Consulte tambi&amp;eacute;n &lt;code&gt;&lt;a href=&quot;data-intmap-strict-internal#v:fromAscListWith&quot;&gt;fromAscListWith&lt;/a&gt;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="f5e34b3e78c63542e8bb8d0adde3243e4615d23d" translate="yes" xml:space="preserve">
          <source>O(n*min(n,W)). Create a map from a list of key/value pairs.</source>
          <target state="translated">O(n*min(n,W)).Crear un mapa a partir de una lista de pares clave/valor.</target>
        </trans-unit>
        <trans-unit id="b7a6efb65f9b82dfbe8c913159082518b7d595ff" translate="yes" xml:space="preserve">
          <source>O(n*min(n,W)). Create a set from a list of integers.</source>
          <target state="translated">O(n*min(n,W)).Crea un conjunto a partir de una lista de números enteros.</target>
        </trans-unit>
        <trans-unit id="b9feaf7c13d0928ac7999068f93fb53410e85f11" translate="yes" xml:space="preserve">
          <source>O(n*min(n,W)). The set of all keys of the map.</source>
          <target state="translated">O(n*min(n,W)).El conjunto de todas las claves del mapa.</target>
        </trans-unit>
        <trans-unit id="36e608696cdf9e28e6a2b62b32b357e3d0dad570" translate="yes" xml:space="preserve">
          <source>O(n+m) Find all non-overlapping instances of &lt;code&gt;needle&lt;/code&gt; in &lt;code&gt;haystack&lt;/code&gt;. Each element of the returned list consists of a pair:</source>
          <target state="translated">O (n + m) Encuentra todas las instancias no superpuestas de &lt;code&gt;needle&lt;/code&gt; en el &lt;code&gt;haystack&lt;/code&gt; . Cada elemento de la lista devuelta consta de un par:</target>
        </trans-unit>
        <trans-unit id="b44547ebca41c66fe9bd023df1af24399976630d" translate="yes" xml:space="preserve">
          <source>O(n+m) Find the first instance of &lt;code&gt;needle&lt;/code&gt; (which must be non-&lt;code&gt;&lt;a href=&quot;data-text#v:null&quot;&gt;null&lt;/a&gt;&lt;/code&gt;) in &lt;code&gt;haystack&lt;/code&gt;. The first element of the returned tuple is the prefix of &lt;code&gt;haystack&lt;/code&gt; before &lt;code&gt;needle&lt;/code&gt; is matched. The second is the remainder of &lt;code&gt;haystack&lt;/code&gt;, starting with the match.</source>
          <target state="translated">O (n + m) Encuentra la primera instancia de la &lt;code&gt;needle&lt;/code&gt; (que debe ser no &lt;code&gt;&lt;a href=&quot;data-text#v:null&quot;&gt;null&lt;/a&gt;&lt;/code&gt; ) en el &lt;code&gt;haystack&lt;/code&gt; . El primer elemento de la tupla devuelta es el prefijo de &lt;code&gt;haystack&lt;/code&gt; antes de que se &lt;code&gt;needle&lt;/code&gt; coincidir la aguja . El segundo es el resto del &lt;code&gt;haystack&lt;/code&gt; , comenzando con el partido.</target>
        </trans-unit>
        <trans-unit id="65c9466c31e6549336e0668edfa4ccca44c0acb5" translate="yes" xml:space="preserve">
          <source>O(n+m) Find the first instance of &lt;code&gt;needle&lt;/code&gt; (which must be non-&lt;code&gt;&lt;a href=&quot;data-text-lazy#v:null&quot;&gt;null&lt;/a&gt;&lt;/code&gt;) in &lt;code&gt;haystack&lt;/code&gt;. The first element of the returned tuple is the prefix of &lt;code&gt;haystack&lt;/code&gt; before &lt;code&gt;needle&lt;/code&gt; is matched. The second is the remainder of &lt;code&gt;haystack&lt;/code&gt;, starting with the match.</source>
          <target state="translated">O (n + m) Encuentra la primera instancia de la &lt;code&gt;needle&lt;/code&gt; (que debe ser no &lt;code&gt;&lt;a href=&quot;data-text-lazy#v:null&quot;&gt;null&lt;/a&gt;&lt;/code&gt; ) en el &lt;code&gt;haystack&lt;/code&gt; . El primer elemento de la tupla devuelta es el prefijo de &lt;code&gt;haystack&lt;/code&gt; antes de que se &lt;code&gt;needle&lt;/code&gt; coincidir la aguja . El segundo es el resto del &lt;code&gt;haystack&lt;/code&gt; , comenzando con el partido.</target>
        </trans-unit>
        <trans-unit id="5a5717f7a8e94cdda15365780f80755eeaf720de" translate="yes" xml:space="preserve">
          <source>O(n+m) Find the offsets of all non-overlapping indices of &lt;code&gt;needle&lt;/code&gt; within &lt;code&gt;haystack&lt;/code&gt;.</source>
          <target state="translated">O (n + m) Encuentra las compensaciones de todos los &amp;iacute;ndices de &lt;code&gt;needle&lt;/code&gt; no superpuestos dentro del &lt;code&gt;haystack&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="cf145a14b4d45ba3bdedb33baa39b464e5635f5b" translate="yes" xml:space="preserve">
          <source>O(n+m) Find the offsets of all non-overlapping indices of &lt;code&gt;needle&lt;/code&gt; within &lt;code&gt;haystack&lt;/code&gt;. The offsets returned represent uncorrected indices in the low-level &quot;needle&quot; array, to which its offset must be added.</source>
          <target state="translated">O (n + m) Encuentra las compensaciones de todos los &amp;iacute;ndices de &lt;code&gt;needle&lt;/code&gt; no superpuestos dentro del &lt;code&gt;haystack&lt;/code&gt; . Las compensaciones devueltas representan &amp;iacute;ndices sin corregir en la matriz &quot;aguja&quot; de bajo nivel, a la que se debe agregar su compensaci&amp;oacute;n.</target>
        </trans-unit>
        <trans-unit id="e3c9d725275f03324a3b2fdda6f1f233ef3169f0" translate="yes" xml:space="preserve">
          <source>O(n+m) Similar to &lt;code&gt;&lt;a href=&quot;data-text#v:breakOn&quot;&gt;breakOn&lt;/a&gt;&lt;/code&gt;, but searches from the end of the string.</source>
          <target state="translated">O (n + m) Similar a &lt;code&gt;&lt;a href=&quot;data-text#v:breakOn&quot;&gt;breakOn&lt;/a&gt;&lt;/code&gt; , pero busca desde el final de la cadena.</target>
        </trans-unit>
        <trans-unit id="1175fd5285a043c9a711ebebaffc18e9667d9a54" translate="yes" xml:space="preserve">
          <source>O(n+m) Similar to &lt;code&gt;&lt;a href=&quot;data-text-lazy#v:breakOn&quot;&gt;breakOn&lt;/a&gt;&lt;/code&gt;, but searches from the end of the string.</source>
          <target state="translated">O (n + m) Similar a &lt;code&gt;&lt;a href=&quot;data-text-lazy#v:breakOn&quot;&gt;breakOn&lt;/a&gt;&lt;/code&gt; , pero busca desde el final de la cadena.</target>
        </trans-unit>
        <trans-unit id="c9a3b9a9ca60934ef751e0d1700fb0db56e70fe4" translate="yes" xml:space="preserve">
          <source>O(n+m) The &lt;code&gt;&lt;a href=&quot;data-text#v:count&quot;&gt;count&lt;/a&gt;&lt;/code&gt; function returns the number of times the query string appears in the given &lt;code&gt;&lt;a href=&quot;data-text#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt;. An empty query string is invalid, and will cause an error to be raised.</source>
          <target state="translated">O (n + m) La funci&amp;oacute;n de &lt;code&gt;&lt;a href=&quot;data-text#v:count&quot;&gt;count&lt;/a&gt;&lt;/code&gt; devuelve el n&amp;uacute;mero de veces que aparece la cadena de consulta en el &lt;code&gt;&lt;a href=&quot;data-text#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt; dado . Una cadena de consulta vac&amp;iacute;a no es v&amp;aacute;lida y provocar&amp;aacute; que se genere un error.</target>
        </trans-unit>
        <trans-unit id="dc07bd53a44d4b9fca8e25e271227f0696b1c205" translate="yes" xml:space="preserve">
          <source>O(n+m) The &lt;code&gt;&lt;a href=&quot;data-text#v:isInfixOf&quot;&gt;isInfixOf&lt;/a&gt;&lt;/code&gt; function takes two &lt;code&gt;&lt;a href=&quot;data-text#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt;s and returns &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-bool#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt; iff the first is contained, wholly and intact, anywhere within the second.</source>
          <target state="translated">O (n + m) La funci&amp;oacute;n &lt;code&gt;&lt;a href=&quot;data-text#v:isInfixOf&quot;&gt;isInfixOf&lt;/a&gt;&lt;/code&gt; toma dos &lt;code&gt;&lt;a href=&quot;data-text#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt; sy devuelve &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-bool#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt; si el primero est&amp;aacute; contenido, completo e intacto, en cualquier lugar dentro del segundo.</target>
        </trans-unit>
        <trans-unit id="fa949ee707031b36e3c5dbbfd870bf320c1d752d" translate="yes" xml:space="preserve">
          <source>O(n+m) The &lt;code&gt;&lt;a href=&quot;data-text#v:isInfixOf&quot;&gt;isInfixOf&lt;/a&gt;&lt;/code&gt; function takes two &lt;code&gt;&lt;a href=&quot;data-text#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt;s and returns &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-bool#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt; iff the first is contained, wholly and intact, anywhere within the second.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="31e6cd194953d70c5fa065b8183d9f30516b0948" translate="yes" xml:space="preserve">
          <source>O(n+m) The &lt;code&gt;&lt;a href=&quot;data-text-lazy#v:count&quot;&gt;count&lt;/a&gt;&lt;/code&gt; function returns the number of times the query string appears in the given &lt;code&gt;&lt;a href=&quot;data-text-lazy#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt;. An empty query string is invalid, and will cause an error to be raised.</source>
          <target state="translated">O (n + m) La funci&amp;oacute;n de &lt;code&gt;&lt;a href=&quot;data-text-lazy#v:count&quot;&gt;count&lt;/a&gt;&lt;/code&gt; devuelve el n&amp;uacute;mero de veces que aparece la cadena de consulta en el &lt;code&gt;&lt;a href=&quot;data-text-lazy#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt; dado . Una cadena de consulta vac&amp;iacute;a no es v&amp;aacute;lida y provocar&amp;aacute; que se genere un error.</target>
        </trans-unit>
        <trans-unit id="13382ca7340a8eaf3a939b2a1ed948b0dcfdc7f0" translate="yes" xml:space="preserve">
          <source>O(n+m) The &lt;code&gt;&lt;a href=&quot;data-text-lazy#v:isInfixOf&quot;&gt;isInfixOf&lt;/a&gt;&lt;/code&gt; function takes two &lt;code&gt;&lt;a href=&quot;data-text-lazy#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt;s and returns &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-bool#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt; iff the first is contained, wholly and intact, anywhere within the second.</source>
          <target state="translated">O (n + m) La funci&amp;oacute;n &lt;code&gt;&lt;a href=&quot;data-text-lazy#v:isInfixOf&quot;&gt;isInfixOf&lt;/a&gt;&lt;/code&gt; toma dos &lt;code&gt;&lt;a href=&quot;data-text-lazy#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt; sy devuelve &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-bool#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt; si el primero est&amp;aacute; contenido, completo e intacto, en cualquier lugar dentro del segundo.</target>
        </trans-unit>
        <trans-unit id="64f48cfabbe836a27454fffc8eb460276d03cfe7" translate="yes" xml:space="preserve">
          <source>O(n+m) The &lt;code&gt;&lt;a href=&quot;data-text-lazy#v:isInfixOf&quot;&gt;isInfixOf&lt;/a&gt;&lt;/code&gt; function takes two &lt;code&gt;&lt;a href=&quot;data-text-lazy#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt;s and returns &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-bool#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt; iff the first is contained, wholly and intact, anywhere within the second.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2167067fadd513712bc42846c5d961980cc14b15" translate="yes" xml:space="preserve">
          <source>O(n+m). A high-performance universal combining function. Using &lt;code&gt;&lt;a href=&quot;data-intmap-lazy#v:mergeWithKey&quot;&gt;mergeWithKey&lt;/a&gt;&lt;/code&gt;, all combining functions can be defined without any loss of efficiency (with exception of &lt;code&gt;&lt;a href=&quot;data-intmap-lazy#v:union&quot;&gt;union&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;data-intmap-lazy#v:difference&quot;&gt;difference&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;data-intmap-lazy#v:intersection&quot;&gt;intersection&lt;/a&gt;&lt;/code&gt;, where sharing of some nodes is lost with &lt;code&gt;&lt;a href=&quot;data-intmap-lazy#v:mergeWithKey&quot;&gt;mergeWithKey&lt;/a&gt;&lt;/code&gt;).</source>
          <target state="translated">O (n + m). Una funci&amp;oacute;n de combinaci&amp;oacute;n universal de alto rendimiento. Usando &lt;code&gt;&lt;a href=&quot;data-intmap-lazy#v:mergeWithKey&quot;&gt;mergeWithKey&lt;/a&gt;&lt;/code&gt; , todas las funciones de combinaci&amp;oacute;n se pueden definir sin ninguna p&amp;eacute;rdida de eficiencia (con excepci&amp;oacute;n de &lt;code&gt;&lt;a href=&quot;data-intmap-lazy#v:union&quot;&gt;union&lt;/a&gt;&lt;/code&gt; , &lt;code&gt;&lt;a href=&quot;data-intmap-lazy#v:difference&quot;&gt;difference&lt;/a&gt;&lt;/code&gt; e &lt;code&gt;&lt;a href=&quot;data-intmap-lazy#v:intersection&quot;&gt;intersection&lt;/a&gt;&lt;/code&gt; , donde el compartir de algunos nodos se pierde con &lt;code&gt;&lt;a href=&quot;data-intmap-lazy#v:mergeWithKey&quot;&gt;mergeWithKey&lt;/a&gt;&lt;/code&gt; ).</target>
        </trans-unit>
        <trans-unit id="0a7b74bed8767dfd4c8cbfc6c23cdee7572f0523" translate="yes" xml:space="preserve">
          <source>O(n+m). A high-performance universal combining function. Using &lt;code&gt;&lt;a href=&quot;data-intmap-strict#v:mergeWithKey&quot;&gt;mergeWithKey&lt;/a&gt;&lt;/code&gt;, all combining functions can be defined without any loss of efficiency (with exception of &lt;code&gt;&lt;a href=&quot;data-intmap-strict#v:union&quot;&gt;union&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;data-intmap-strict#v:difference&quot;&gt;difference&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;data-intmap-strict#v:intersection&quot;&gt;intersection&lt;/a&gt;&lt;/code&gt;, where sharing of some nodes is lost with &lt;code&gt;&lt;a href=&quot;data-intmap-strict#v:mergeWithKey&quot;&gt;mergeWithKey&lt;/a&gt;&lt;/code&gt;).</source>
          <target state="translated">O (n + m). Una funci&amp;oacute;n de combinaci&amp;oacute;n universal de alto rendimiento. Usando &lt;code&gt;&lt;a href=&quot;data-intmap-strict#v:mergeWithKey&quot;&gt;mergeWithKey&lt;/a&gt;&lt;/code&gt; , todas las funciones de combinaci&amp;oacute;n se pueden definir sin ninguna p&amp;eacute;rdida de eficiencia (con excepci&amp;oacute;n de &lt;code&gt;&lt;a href=&quot;data-intmap-strict#v:union&quot;&gt;union&lt;/a&gt;&lt;/code&gt; , &lt;code&gt;&lt;a href=&quot;data-intmap-strict#v:difference&quot;&gt;difference&lt;/a&gt;&lt;/code&gt; e &lt;code&gt;&lt;a href=&quot;data-intmap-strict#v:intersection&quot;&gt;intersection&lt;/a&gt;&lt;/code&gt; , donde el compartir de algunos nodos se pierde con &lt;code&gt;&lt;a href=&quot;data-intmap-strict#v:mergeWithKey&quot;&gt;mergeWithKey&lt;/a&gt;&lt;/code&gt; ).</target>
        </trans-unit>
        <trans-unit id="b5a51f66550cd6721cfbc2055ced63ae8b5b721b" translate="yes" xml:space="preserve">
          <source>O(n+m). A high-performance universal combining function. Using &lt;code&gt;&lt;a href=&quot;data-intmap-strict-internal#v:mergeWithKey&quot;&gt;mergeWithKey&lt;/a&gt;&lt;/code&gt;, all combining functions can be defined without any loss of efficiency (with exception of &lt;code&gt;&lt;a href=&quot;data-intmap-strict-internal#v:union&quot;&gt;union&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;data-intmap-strict-internal#v:difference&quot;&gt;difference&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;data-intmap-strict-internal#v:intersection&quot;&gt;intersection&lt;/a&gt;&lt;/code&gt;, where sharing of some nodes is lost with &lt;code&gt;&lt;a href=&quot;data-intmap-strict-internal#v:mergeWithKey&quot;&gt;mergeWithKey&lt;/a&gt;&lt;/code&gt;).</source>
          <target state="translated">O (n + m). Una funci&amp;oacute;n de combinaci&amp;oacute;n universal de alto rendimiento. Usando &lt;code&gt;&lt;a href=&quot;data-intmap-strict-internal#v:mergeWithKey&quot;&gt;mergeWithKey&lt;/a&gt;&lt;/code&gt; , todas las funciones de combinaci&amp;oacute;n se pueden definir sin ninguna p&amp;eacute;rdida de eficiencia (con excepci&amp;oacute;n de &lt;code&gt;&lt;a href=&quot;data-intmap-strict-internal#v:union&quot;&gt;union&lt;/a&gt;&lt;/code&gt; , &lt;code&gt;&lt;a href=&quot;data-intmap-strict-internal#v:difference&quot;&gt;difference&lt;/a&gt;&lt;/code&gt; e &lt;code&gt;&lt;a href=&quot;data-intmap-strict-internal#v:intersection&quot;&gt;intersection&lt;/a&gt;&lt;/code&gt; , donde el compartir de algunos nodos se pierde con &lt;code&gt;&lt;a href=&quot;data-intmap-strict-internal#v:mergeWithKey&quot;&gt;mergeWithKey&lt;/a&gt;&lt;/code&gt; ).</target>
        </trans-unit>
        <trans-unit id="c2c9d53c1a61505c507a77f11e744f10ac5321fd" translate="yes" xml:space="preserve">
          <source>O(n+m). An unsafe general combining function.</source>
          <target state="translated">O(n+m).Una función de combinación general insegura.</target>
        </trans-unit>
        <trans-unit id="04c17b4d406e8e7f791bcdc5e7bbabd3bda36558" translate="yes" xml:space="preserve">
          <source>O(n+m). An unsafe universal combining function.</source>
          <target state="translated">O(n+m).Una función de combinación universal insegura.</target>
        </trans-unit>
        <trans-unit id="6904fa4f9eeb478245da7ef5b29f442d3a069927" translate="yes" xml:space="preserve">
          <source>O(n+m). Check whether the key sets of two maps are disjoint (i.e. their &lt;code&gt;&lt;a href=&quot;data-intmap-lazy#v:intersection&quot;&gt;intersection&lt;/a&gt;&lt;/code&gt; is empty).</source>
          <target state="translated">O (n + m). Compruebe si los conjuntos de claves de dos mapas est&amp;aacute;n separados (es decir, su &lt;code&gt;&lt;a href=&quot;data-intmap-lazy#v:intersection&quot;&gt;intersection&lt;/a&gt;&lt;/code&gt; est&amp;aacute; vac&amp;iacute;a).</target>
        </trans-unit>
        <trans-unit id="fe24974c1f1cf88414158604450576321622c099" translate="yes" xml:space="preserve">
          <source>O(n+m). Check whether the key sets of two maps are disjoint (i.e. their &lt;code&gt;&lt;a href=&quot;data-intmap-strict#v:intersection&quot;&gt;intersection&lt;/a&gt;&lt;/code&gt; is empty).</source>
          <target state="translated">O (n + m). Compruebe si los conjuntos de claves de dos mapas est&amp;aacute;n separados (es decir, su &lt;code&gt;&lt;a href=&quot;data-intmap-strict#v:intersection&quot;&gt;intersection&lt;/a&gt;&lt;/code&gt; est&amp;aacute; vac&amp;iacute;a).</target>
        </trans-unit>
        <trans-unit id="a401abee7ced03111b359144c8a12d3572504805" translate="yes" xml:space="preserve">
          <source>O(n+m). Check whether the key sets of two maps are disjoint (i.e. their &lt;code&gt;&lt;a href=&quot;data-intmap-strict-internal#v:intersection&quot;&gt;intersection&lt;/a&gt;&lt;/code&gt; is empty).</source>
          <target state="translated">O (n + m). Compruebe si los conjuntos de claves de dos mapas est&amp;aacute;n separados (es decir, su &lt;code&gt;&lt;a href=&quot;data-intmap-strict-internal#v:intersection&quot;&gt;intersection&lt;/a&gt;&lt;/code&gt; est&amp;aacute; vac&amp;iacute;a).</target>
        </trans-unit>
        <trans-unit id="6d12ca25c9eb6961c2321d4afa8587c92934e2fb" translate="yes" xml:space="preserve">
          <source>O(n+m). Check whether two sets are disjoint (i.e. their intersection is empty).</source>
          <target state="translated">O(n+m).Comprueba si dos conjuntos están desarticulados (es decir,su intersección está vacía).</target>
        </trans-unit>
        <trans-unit id="c04ab65196d99d47289a58d92620f68e15fbe411" translate="yes" xml:space="preserve">
          <source>O(n+m). Difference between two maps (based on keys).</source>
          <target state="translated">O(n+m).Diferencia entre dos mapas (basado en claves).</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
