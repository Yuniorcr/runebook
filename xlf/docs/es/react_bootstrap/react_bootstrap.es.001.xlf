<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="es" datatype="htmlbody" original="react_bootstrap">
    <body>
      <group id="react_bootstrap">
        <trans-unit id="694224a5885e118770230aa30dac9a9b3299e194" translate="yes" xml:space="preserve">
          <source>&quot;left&quot;|&quot;right&quot;|{ sm: &quot;left&quot;|&quot;right&quot; }|{ md: &quot;left&quot;|&quot;right&quot; }|{ lg: &quot;left&quot;|&quot;right&quot; }|{ xl: &quot;left&quot;|&quot;right&quot;}</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="199b5bdd109c1eee98dc879f05b6526e0c50eabf" translate="yes" xml:space="preserve">
          <source>&amp;copy; 2014&amp;ndash;present Stephen J. Collings, Matthew Honnibal, Pieter Vanderwerff</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d46a9c22e09867d3c6f107df850d748de90a2d6b" translate="yes" xml:space="preserve">
          <source>'div' | elementType</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a882844bff5e3536f4a22c2b68612b61bb0303c9" translate="yes" xml:space="preserve">
          <source>'hover' | 'click' |'focus' | Array&amp;lt;'hover' | 'click' |'focus'&amp;gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9081f9b8facfebc9388d4c70cb36bc25e64f3cd5" translate="yes" xml:space="preserve">
          <source>'input' | 'textarea' | 'select' | elementType</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f83f675c3f5d3e4d5967524ca986cc5da48a73f5" translate="yes" xml:space="preserve">
          <source>'input' | elementType</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3db29a9c6077c947d5d1439ff8d0c532f7c6eab0" translate="yes" xml:space="preserve">
          <source>'primary' | 'secondary' | 'success' | 'danger' | 'warning' | 'info' | 'dark' | 'light'</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="edc9d1d2e96266056bd5282fef687449f1c0a3cb" translate="yes" xml:space="preserve">
          <source>(Generally it's better to use &lt;code&gt;ToggleButtonGroup&lt;/code&gt; directly)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="945448fc02ab77194d69e1322efdb1fdd0b6bae3" translate="yes" xml:space="preserve">
          <source>... And import it on the main Sass file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="201f8a73a8be0db82d645483150dc11c6b8a05cf" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;getting-started/introduction/index&quot;&gt;Get started&lt;/a&gt;&lt;a href=&quot;components/alerts/index&quot;&gt;Components&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0cda9af09ba5f2597a1f29f267e998529be67437" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://stackoverflow.com/questions/ask&quot;&gt;Ask questions&lt;/a&gt; about specific problems you have faced, including details about what exactly you are trying to do. Make sure you tag your question with &lt;code&gt;react-bootstrap&lt;/code&gt;. You can also read through &lt;a href=&quot;https://stackoverflow.com/questions/tagged/react-bootstrap&quot;&gt;existing React-Bootstrap questions&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="02f06bffa2a3056df5b8b389f73de6f81fd02716" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&amp;lt;Card.Text&amp;gt;&lt;/code&gt; outputs &lt;code&gt;&amp;lt;p&amp;gt;&lt;/code&gt; tags around the content, so you can use multiple &lt;code&gt;&amp;lt;Card.Text&amp;gt;&lt;/code&gt;s to create separate paragraphs.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="78100208e9fb158f3f101be3e21ec7550cd6e08f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&amp;lt;Nav&amp;gt;&lt;/code&gt; markup is very flexible and styling is controlled via classes so you can use whatever elements you like to build your navs. By default &lt;code&gt;&amp;lt;Nav&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;Nav.Item&amp;gt;&lt;/code&gt; both render &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt;s instead of &lt;code&gt;&amp;lt;ul&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt; elements respectively. This because it's possible (and common) to leave off the &lt;code&gt;&amp;lt;Nav.Item&amp;gt;&lt;/code&gt;'s and render a &lt;code&gt;&amp;lt;Nav.Link&amp;gt;&lt;/code&gt; directly, which would create invalid markup by default (&lt;code&gt;ul &amp;gt; a&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fb942c593f52601276f2b0381e9cee9460f3c4d9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;'21by9'&lt;/code&gt; | &lt;code&gt;'16by9'&lt;/code&gt; | &lt;code&gt;'4by3'&lt;/code&gt; | &lt;code&gt;'1by1'&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="24000e3538b76e958b9e5c86e15044d30aa45e49" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;'auto'&lt;/code&gt; | &lt;code&gt;'top'&lt;/code&gt; | &lt;code&gt;'bottom'&lt;/code&gt; | &lt;code&gt;'left'&lt;/code&gt; | &lt;code&gt;'right'&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aa17ca3591468d546f846c9ae7c0a4096653587b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;'auto-start'&lt;/code&gt; | &lt;code&gt;'auto'&lt;/code&gt; | &lt;code&gt;'auto-end'&lt;/code&gt; | &lt;code&gt;'top-start'&lt;/code&gt; | &lt;code&gt;'top'&lt;/code&gt; | &lt;code&gt;'top-end'&lt;/code&gt; | &lt;code&gt;'right-start'&lt;/code&gt; | &lt;code&gt;'right'&lt;/code&gt; | &lt;code&gt;'right-end'&lt;/code&gt; | &lt;code&gt;'bottom-end'&lt;/code&gt; | &lt;code&gt;'bottom'&lt;/code&gt; | &lt;code&gt;'bottom-start'&lt;/code&gt; | &lt;code&gt;'left-end'&lt;/code&gt; | &lt;code&gt;'left'&lt;/code&gt; | &lt;code&gt;'left-start'&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1ff15bfa66407fc9238a68189cf4598f5e514d66" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;'border'&lt;/code&gt; | &lt;code&gt;'grow'&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3534460436562c41cac055aa1c6821b12a5a3e34" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;'button'&lt;/code&gt; | &lt;code&gt;'reset'&lt;/code&gt; | &lt;code&gt;'submit'&lt;/code&gt; | &lt;code&gt;null&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1ea308685c16d04b3ecc455260b61cd80c246896" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;'checkbox'&lt;/code&gt; | &lt;code&gt;'radio'&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d50e565da02731d87244a61356f5944d59e02932" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;'click'&lt;/code&gt; | &lt;code&gt;'mousedown'&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="17d265d303b1840906902fd0ef1b5001c45337b3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;'height'&lt;/code&gt; | &lt;code&gt;'width'&lt;/code&gt; | function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3d5d9ecc30072310406303c090ee99ff8f4ddff5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;'hover'&lt;/code&gt; | &lt;code&gt;false&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="15635690485cabaca828d067397f0555beb205d1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;'light'&lt;/code&gt; | &lt;code&gt;'dark'&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cc482fe8a1a41648a6127dcceebbf435db60bb55" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;'primary'&lt;/code&gt; | &lt;code&gt;'secondary'&lt;/code&gt; | &lt;code&gt;'success'&lt;/code&gt; | &lt;code&gt;'danger'&lt;/code&gt; | &lt;code&gt;'warning'&lt;/code&gt; | &lt;code&gt;'info'&lt;/code&gt; | &lt;code&gt;'dark'&lt;/code&gt; | &lt;code&gt;'light'&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="26738770bf11d534393aabdfa0f415e72c3ce996" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;'primary'&lt;/code&gt; | &lt;code&gt;'secondary'&lt;/code&gt; | &lt;code&gt;'success'&lt;/code&gt; | &lt;code&gt;'danger'&lt;/code&gt; | &lt;code&gt;'warning'&lt;/code&gt; | &lt;code&gt;'info'&lt;/code&gt; | &lt;code&gt;'dark'&lt;/code&gt; | &lt;code&gt;'light'&lt;/code&gt; | &lt;code&gt;'white'&lt;/code&gt; | &lt;code&gt;'muted'&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="714a39a09d51bf2bfd83743fc8f9613645ff45d8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;'primary'&lt;/code&gt; | &lt;code&gt;'secondary'&lt;/code&gt; | &lt;code&gt;'success'&lt;/code&gt; | &lt;code&gt;'danger'&lt;/code&gt; | &lt;code&gt;'warning'&lt;/code&gt; | &lt;code&gt;'info'&lt;/code&gt; | &lt;code&gt;'light'&lt;/code&gt; | &lt;code&gt;'dark'&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3b9fca5b788724b96eae816c50b2480ecf508a82" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;'radio'&lt;/code&gt; | &lt;code&gt;'checkbox'&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="50613b52cbd723201bfc5bd928100f4a358f474e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;'radio'&lt;/code&gt; | &lt;code&gt;'checkbox'&lt;/code&gt; | &lt;code&gt;'switch'&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7d47b733cc001bf580f7891c4a75f5fc380797ca" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;'sm'&lt;/code&gt; | &lt;code&gt;'lg','xl'&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eac9c49e3452f09a682d73499add60519e1be276" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;'sm'&lt;/code&gt; | &lt;code&gt;'lg'&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2da7df59bf39987ce97cb08f06fb588c7acc17e9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;'static'&lt;/code&gt; | &lt;code&gt;true&lt;/code&gt; | &lt;code&gt;false&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="52570fa20d31dac19fb14dd82d525d2c066b29a3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;'success'&lt;/code&gt; | &lt;code&gt;'danger'&lt;/code&gt; | &lt;code&gt;'warning'&lt;/code&gt; | &lt;code&gt;'info'&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f995061499b1eb89fa5b58c745aafae364d183f1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;'tabs'&lt;/code&gt; | &lt;code&gt;'pills'&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ea7101a97de20173632eedc01816e161b3bb68fd" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;'top'&lt;/code&gt; | &lt;code&gt;'bottom'&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b63e646931d29fab13f4456298a29fde1b7d4df3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;'up'&lt;/code&gt; | &lt;code&gt;'left'&lt;/code&gt; | &lt;code&gt;'right'&lt;/code&gt; | &lt;code&gt;'down'&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bfc66d1fe216ba62130a951c966c0ef16b6b2922" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;'valid'&lt;/code&gt; | &lt;code&gt;'invalid'&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="61bfac3ad2c70df8a2545bb9153139873eaae7b9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Overlay&lt;/code&gt; is the fundamental component for positioning and controlling tooltip visibility. It's a wrapper around Popper.js, that adds support for transitions, and visibility toggling.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="27ae77f1d8edccde2c392f1c6686503509c19359" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Tabs&lt;/code&gt; can be controlled directly when you want to handle the selection logic personally.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4cc16546e5dfab39e85b501978f4fdd75c80a982" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;active&lt;/code&gt; prop removed and moved to &lt;code&gt;NavLink&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6b1d8dbb1cf424ed39e81e9a92271017727995ba" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;activeHref&lt;/code&gt; is removed (only activeKey now)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="507435015884b15833c19212db6484dca9d952b3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;bsClass&lt;/code&gt; -&amp;gt; &lt;code&gt;bsPrefix&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="821d17cd9a58cc7a071dff1a0f3246c64b117a24" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;bsRole&lt;/code&gt; has been removed from all components. Components now communicate via context to allow intermediate nesting of child components</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7d3650da917fff717b522a4af0a2bfe07b176959" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;bsStyle&lt;/code&gt; -&amp;gt; &lt;code&gt;variant&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a369b56b4ae16c0d7cd639c4ddd17b4d8dffe66d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;bsStyle&lt;/code&gt; renamed to &lt;code&gt;variant&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c754ae0b1d58446c62b3357d908226ce1e2fffa5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;componentClass&lt;/code&gt; -&amp;gt; &lt;code&gt;as&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d9a70291b7c42b08b74a4566506740171a65f063" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;divider&lt;/code&gt; has been split out into &lt;code&gt;Dropdown.Divider&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cce5e96ae9cad5cd812d1dc2fc5dae947753c70f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;false&lt;/code&gt; | &lt;code&gt;true&lt;/code&gt; | &lt;code&gt;'keyboard'&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="82e849bfda1305878bd7175d39c2b5280f1fe93f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;header&lt;/code&gt; has been split out into &lt;code&gt;Dropdown.Header&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="95eb03ce697e8d240fd77da7b9f586dfb2dd142c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;href&lt;/code&gt; attribute for the inner &lt;code&gt;a&lt;/code&gt; element</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="78adcb46a55ec9106746f5540b1068ed81b2e8df" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;import Accordion from 'react-bootstrap/Accordion'&lt;/code&gt;Copy import code for the Accordion component</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bd9a6b2ebb333acb2a2dd5885716d06381a4e187" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;import Alert from 'react-bootstrap/Alert'&lt;/code&gt;Copy import code for the Alert component</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fc6e26b48ea8d53662103c64fdfc31221370f471" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;import Badge from 'react-bootstrap/Badge'&lt;/code&gt;Copy import code for the Badge component</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="35addd4cf4abc4979eb704b13f57733a22f3f85c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;import Breadcrumb from 'react-bootstrap/Breadcrumb'&lt;/code&gt;Copy import code for the Breadcrumb component</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="52a75ced2251a146e2a96ce1f540569a05e93eb8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;import Button from 'react-bootstrap/Button'&lt;/code&gt;Copy import code for the Button component</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a9640776d3838b3d85baf03fa799ccc01f249569" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;import ButtonGroup from 'react-bootstrap/ButtonGroup'&lt;/code&gt;Copy import code for the ButtonGroup component</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7031c8f32535fb9831fdec5bf22d0a5492dcc1e4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;import ButtonToolbar from 'react-bootstrap/ButtonToolbar'&lt;/code&gt;Copy import code for the ButtonToolbar component</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="81fb0db93faa4a9d4d2e54394e9c33832b8d802b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;import Card from 'react-bootstrap/Card'&lt;/code&gt;Copy import code for the Card component</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9824d7c40ac186507c5b3162e84a2267f6127efe" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;import CardColumns from 'react-bootstrap/CardColumns'&lt;/code&gt;Copy import code for the CardColumns component</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="49721a4ed734e2b4e68d710c3b1ec79c88370f7a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;import CardDeck from 'react-bootstrap/CardDeck'&lt;/code&gt;Copy import code for the CardDeck component</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3ffe1a98933c7048224970886b735249344f4cb2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;import CardGroup from 'react-bootstrap/CardGroup'&lt;/code&gt;Copy import code for the CardGroup component</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="22d23df65532bd226eff2c9301769fb3b566234e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;import Carousel from 'react-bootstrap/Carousel'&lt;/code&gt;Copy import code for the Carousel component</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fa2fd729d6d9fe04fed7bfc7f84a849282020fff" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;import Col from 'react-bootstrap/Col'&lt;/code&gt;Copy import code for the Col component</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2f12f912f45c6785c59f31c3328b89dc526480af" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;import Collapse from 'react-bootstrap/Collapse'&lt;/code&gt;Copy import code for the Collapse component</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fa4d156cb82ee4fb7e1e2c16aec7fa783368bd0c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;import Container from 'react-bootstrap/Container'&lt;/code&gt;Copy import code for the Container component</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="460560ea927327ef2006fe26fca972ffd4d4a57d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;import Dropdown from 'react-bootstrap/Dropdown'&lt;/code&gt;Copy import code for the Dropdown component</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f6a57c9f800055e2a28a26982c52d5b6ff9e81d1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;import DropdownButton from 'react-bootstrap/DropdownButton'&lt;/code&gt;Copy import code for the DropdownButton component</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="53cfb0aaf0ae1f1b2eec4e2db0024011dd5ff733" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;import Fade from 'react-bootstrap/Fade'&lt;/code&gt;Copy import code for the Fade component</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c5cd105877d294435c496759d7a093e85a1bcaac" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;import Figure from 'react-bootstrap/Figure'&lt;/code&gt;Copy import code for the Figure component</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2880b747f49aac672ed015d885b9a3f692e460e0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;import FigureCaption from 'react-bootstrap/FigureCaption'&lt;/code&gt;Copy import code for the FigureCaption component</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5f962bc7236a69fbdd3317082445be230b33fd23" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;import FigureImage from 'react-bootstrap/FigureImage'&lt;/code&gt;Copy import code for the FigureImage component</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="39c136edfde27df7d7644e092141e348826d6d8b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;import Form from 'react-bootstrap/Form'&lt;/code&gt;Copy import code for the Form component</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a55e4f28fb067ff79dc6ac57c77d2e8a29bfb333" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;import FormCheck from 'react-bootstrap/FormCheck'&lt;/code&gt;Copy import code for the FormCheck component</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0089b5ac8f3b79e47116dc88d9f5545592b1b056" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;import FormControl from 'react-bootstrap/FormControl'&lt;/code&gt;Copy import code for the FormControl component</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="edc905377552da07bffa34065ac7ea67c451cd8c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;import FormFile from 'react-bootstrap/FormFile'&lt;/code&gt;Copy import code for the FormFile component</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="669968b581fe9992aca2b3b31f26a13bc58bbeab" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;import Image from 'react-bootstrap/Image'&lt;/code&gt;Copy import code for the Image component</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5e41bf5a0c25d3018b0e9116e0f15cbc6599c434" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;import InputGroup from 'react-bootstrap/InputGroup'&lt;/code&gt;Copy import code for the InputGroup component</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ee3facf5c113e63d43ff6cc9672a92554f58cdde" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;import Jumbotron from 'react-bootstrap/Jumbotron'&lt;/code&gt;Copy import code for the Jumbotron component</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="794440aabef5d4b1a6524c5d63e9242d4f71e762" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;import ListGroup from 'react-bootstrap/ListGroup'&lt;/code&gt;Copy import code for the ListGroup component</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e28a73d23bab8a6af801713e6f0b1ba316c76501" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;import Media from 'react-bootstrap/Media'&lt;/code&gt;Copy import code for the Media component</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d615e24d8fd6b446d93ac2b23c37d1917eccf27b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;import Modal from 'react-bootstrap/Modal'&lt;/code&gt;Copy import code for the Modal component</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cf53b48db9cd8ed51f1507a83adf87557255602f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;import ModalBody from 'react-bootstrap/ModalBody'&lt;/code&gt;Copy import code for the ModalBody component</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2296c917a57e25b653961e7ac929a88f8dadbe86" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;import ModalDialog from 'react-bootstrap/ModalDialog'&lt;/code&gt;Copy import code for the ModalDialog component</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="948f7d27f021dc51a5a912969b9baaf98ab18537" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;import ModalFooter from 'react-bootstrap/ModalFooter'&lt;/code&gt;Copy import code for the ModalFooter component</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8d1e8505fa6ddaf0288eaa39563e5f0611f8ded9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;import ModalHeader from 'react-bootstrap/ModalHeader'&lt;/code&gt;Copy import code for the ModalHeader component</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="edd6a7a84112ca135f64e869f717d8e9deeede16" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;import ModalTitle from 'react-bootstrap/ModalTitle'&lt;/code&gt;Copy import code for the ModalTitle component</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="49e232799ef5db3a989069a5692bae0601e61369" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;import Nav from 'react-bootstrap/Nav'&lt;/code&gt;Copy import code for the Nav component</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b947128632452a4d15f8e155e521bec49023878e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;import NavDropdown from 'react-bootstrap/NavDropdown'&lt;/code&gt;Copy import code for the NavDropdown component</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="166b40b0fdb48b682780a097982961fd25924361" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;import Navbar from 'react-bootstrap/Navbar'&lt;/code&gt;Copy import code for the Navbar component</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d7deb9d2d0488f9ba3b71c316a59612640a76992" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;import Overlay from 'react-bootstrap/Overlay'&lt;/code&gt;Copy import code for the Overlay component</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a8dc164e312e925f56a9d3e87ac30159e928ceb9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;import OverlayTrigger from 'react-bootstrap/OverlayTrigger'&lt;/code&gt;Copy import code for the OverlayTrigger component</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="05b823faf3bde25a30dd07db4a184c4889e35e8a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;import PageItem from 'react-bootstrap/PageItem'&lt;/code&gt;Copy import code for the PageItem component</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c45fbcc92779f31bde78e8960a1872ec70799bc0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;import Pagination from 'react-bootstrap/Pagination'&lt;/code&gt;Copy import code for the Pagination component</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f8946dae14b6fd87d910a2b453d22de94e0bc44b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;import Popover from 'react-bootstrap/Popover'&lt;/code&gt;Copy import code for the Popover component</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="07b27e429c8c98a91718b1bf60ecc02cfb0482c1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;import PopoverContent from 'react-bootstrap/PopoverContent'&lt;/code&gt;Copy import code for the PopoverContent component</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f2a5b137bd6380e0d1610aa7b25a4bf5f6b05e8c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;import PopoverTitle from 'react-bootstrap/PopoverTitle'&lt;/code&gt;Copy import code for the PopoverTitle component</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a6c98bbc411f0e1061569de6afea7f926fe3fb68" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;import ProgressBar from 'react-bootstrap/ProgressBar'&lt;/code&gt;Copy import code for the ProgressBar component</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8310fc7c47e1d0b1344d1c2a01dccd335ef9c1d1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;import ResponsiveEmbed from 'react-bootstrap/ResponsiveEmbed'&lt;/code&gt;Copy import code for the ResponsiveEmbed component</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0adc4e2d1a08c5ed48177aae616f506537d16f1e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;import Row from 'react-bootstrap/Row'&lt;/code&gt;Copy import code for the Row component</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ef0a6ec98aa9fa5605eed0e0e18a100770139528" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;import Spinner from 'react-bootstrap/Spinner'&lt;/code&gt;Copy import code for the Spinner component</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="96b89b3400c42e7e9d60438304e49198d6e696d7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;import SplitButton from 'react-bootstrap/SplitButton'&lt;/code&gt;Copy import code for the SplitButton component</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2db3321152cfb71a01e02c9a61466aa7627be9bf" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;import Tab from 'react-bootstrap/Tab'&lt;/code&gt;Copy import code for the Tab component</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3c1b65339a00f338199b77a1d3f288958abfaeb2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;import TabContainer from 'react-bootstrap/TabContainer'&lt;/code&gt;Copy import code for the TabContainer component</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2598ba1777c24e9d90a7a18aa6760964092bc2b8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;import TabContent from 'react-bootstrap/TabContent'&lt;/code&gt;Copy import code for the TabContent component</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2b97586633b99374a737236fad628cc8292c98f8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;import TabPane from 'react-bootstrap/TabPane'&lt;/code&gt;Copy import code for the TabPane component</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bcd407030d5334d8b2f17b906b6d8b4bfe79ea9a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;import Table from 'react-bootstrap/Table'&lt;/code&gt;Copy import code for the Table component</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ecf4e12fa29d26f15d6f752fa325952c16120024" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;import Tabs from 'react-bootstrap/Tabs'&lt;/code&gt;Copy import code for the Tabs component</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ef0c2f113781b5677e99e613405bef18d79e901a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;import Toast from 'react-bootstrap/Toast'&lt;/code&gt;Copy import code for the Toast component</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d6fe686be24b5f18cb7e1e49765cf5fad7eac195" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;import ToastBody from 'react-bootstrap/ToastBody'&lt;/code&gt;Copy import code for the ToastBody component</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="13f317338fc992000ca94a453ba7748ee5deb0fd" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;import ToastHeader from 'react-bootstrap/ToastHeader'&lt;/code&gt;Copy import code for the ToastHeader component</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d0f6af456262129ab89dd8d0a4d9de5b838463fe" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;import ToggleButton from 'react-bootstrap/ToggleButton'&lt;/code&gt;Copy import code for the ToggleButton component</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b83617fe1aeecb4ea16267937c08e8fcddfa5842" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;import ToggleButtonGroup from 'react-bootstrap/ToggleButtonGroup'&lt;/code&gt;Copy import code for the ToggleButtonGroup component</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eaacb06ba0efbd26f0858afa7cf6114631766987" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;import Tooltip from 'react-bootstrap/Tooltip'&lt;/code&gt;Copy import code for the Tooltip component</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6c9155d0e29a76d4d02ab47b99f54b67005fe19c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;inverse&lt;/code&gt; removed and replaced with &lt;code&gt;variant=&quot;dark&quot;&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b8a5ba13698a5e413a9d4be342fc925d89b503d2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;noCaret&lt;/code&gt; is removed because it's not optional with the styles anymore</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4241d15e2b7e2d49cba45992f914ea978a04230f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;onDismiss&lt;/code&gt; renamed to &lt;code&gt;onClose&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b409ec7184349929eede5c4eb3c8344bcabe9fac" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;onToggle&lt;/code&gt; is called with the desired next &lt;code&gt;show&lt;/code&gt;, and generally should be passed back to the &lt;code&gt;show&lt;/code&gt; prop. &lt;code&gt;onToggle&lt;/code&gt; fires &lt;em&gt;after&lt;/em&gt; the configured &lt;code&gt;delay&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b4c8a56134955c34244c63c17bb46d077d9e83a6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;target&lt;/code&gt; attribute for the inner &lt;code&gt;a&lt;/code&gt; element</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1c2a34ef1e916f8f29a37bef0b2978c0c111e221" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;title&lt;/code&gt; attribute for the inner &lt;code&gt;a&lt;/code&gt; element</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5d0dfc29d033c8b430cae3069e5cb7d02531267e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;title&lt;/code&gt; attribute for the underlying &lt;code&gt;FormCheckLabel&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b8ea9a927cb57012e86f373e635c03b6eee0909b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; | &lt;code&gt;&quot;sm&quot;&lt;/code&gt; | &lt;code&gt;&quot;md&quot;&lt;/code&gt; | &lt;code&gt;&quot;lg&quot;&lt;/code&gt; | &lt;code&gt;&quot;xl&quot;&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a48b2b8c670b8545d10d76e9727c91ac2feaf01f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; | &lt;code&gt;'sm'&lt;/code&gt; | &lt;code&gt;'md'&lt;/code&gt; | &lt;code&gt;'lg'&lt;/code&gt; | &lt;code&gt;'xl'&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ce52df3e9bc29324a345bff52944c41014e3f6f1" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;All unknown props are passed through to the &lt;code&gt;Dropdown&lt;/code&gt; component.&lt;/em&gt; Only the Button &lt;code&gt;variant&lt;/code&gt;, &lt;code&gt;size&lt;/code&gt; and &lt;code&gt;bsPrefix&lt;/code&gt; props are passed to the toggle, along with menu-related props are passed to the &lt;code&gt;Dropdown.Menu&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f95d946479395ad488202dde2673fba1b241e9ea" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;All unknown props are passed through to the &lt;code&gt;Dropdown&lt;/code&gt; component.&lt;/em&gt; The Button &lt;code&gt;variant&lt;/code&gt;, &lt;code&gt;size&lt;/code&gt; and &lt;code&gt;bsPrefix&lt;/code&gt; props are passed to the button and toggle, and menu-related props are passed to the &lt;code&gt;Dropdown.Menu&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="34c1afe91f31694e23bf12a71f8b8ecbb148747c" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Note: Bootstrap only partially supports 'width'! You will need to supply your own CSS animation for the &lt;code&gt;.width&lt;/code&gt; CSS class.&lt;/em&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f7e071942c85dfe409ae72f8e7545c2600dd2064" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Note: For custom dropdown components, you will have to pass the &lt;code&gt;rootCloseEvent&lt;/code&gt; to &lt;code&gt;&amp;lt;RootCloseWrapper&amp;gt;&lt;/code&gt; in your custom dropdown menu component (&lt;a href=&quot;https://github.com/react-bootstrap/react-bootstrap/blob/v0.31.5/src/DropdownMenu.js#L115-L119&quot;&gt;similarly to how it is implemented in &lt;code&gt;&amp;lt;Dropdown.Menu&amp;gt;&lt;/code&gt;&lt;/a&gt;).&lt;/em&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="650757007ed0b2fc9ee3d022ef30dfb8ab81e646" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Note: Using responsive alignment will disable Popper usage for positioning.&lt;/em&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6de78ed25a18ef0e0cd820ccc3fb82f94b292a0b" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;see &lt;a href=&quot;#dropdown-menu-props&quot;&gt;DropdownMenu&lt;/a&gt; for more details&lt;/em&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d162e44f05b88b093628b7920c09649b1909adfc" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;see &lt;a href=&quot;#menu-props&quot;&gt;DropdownMenu&lt;/a&gt; for more details&lt;/em&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="de3a70de3b18e2ea78499357bc73c0446f3c6f00" translate="yes" xml:space="preserve">
          <source>&lt;small&gt;&lt;em&gt;controlled by: &lt;code&gt;onChange&lt;/code&gt;, initial prop: &lt;code&gt;defaultValue&lt;/code&gt;&lt;/em&gt;&lt;/small&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b1f36b0a432aee2767a795ca7c5ad239064c7f1d" translate="yes" xml:space="preserve">
          <source>&lt;small&gt;&lt;em&gt;controlled by: &lt;code&gt;onClose&lt;/code&gt;, initial prop: &lt;code&gt;defaultShow&lt;/code&gt;&lt;/em&gt;&lt;/small&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="afb6cdd1b03fd507805825ca439d3a24f627b07b" translate="yes" xml:space="preserve">
          <source>&lt;small&gt;&lt;em&gt;controlled by: &lt;code&gt;onSelect&lt;/code&gt;, initial prop: &lt;code&gt;defaultActiveindex&lt;/code&gt;&lt;/em&gt;&lt;/small&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3e3195da939cae83a1941f92aafdeb622257810b" translate="yes" xml:space="preserve">
          <source>&lt;small&gt;&lt;em&gt;controlled by: &lt;code&gt;onSelect&lt;/code&gt;, initial prop: &lt;code&gt;defaultActivekey&lt;/code&gt;&lt;/em&gt;&lt;/small&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ef063ea25ea9c6a4a17e4254a960f9b11019401e" translate="yes" xml:space="preserve">
          <source>&lt;small&gt;&lt;em&gt;controlled by: &lt;code&gt;onToggle&lt;/code&gt;, initial prop: &lt;code&gt;defaultExpanded&lt;/code&gt;&lt;/em&gt;&lt;/small&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d3688ae3c568cbc774aeb933fd767f984e187320" translate="yes" xml:space="preserve">
          <source>&lt;small&gt;&lt;em&gt;controlled by: &lt;code&gt;onToggle&lt;/code&gt;, initial prop: &lt;code&gt;defaultShow&lt;/code&gt;&lt;/em&gt;&lt;/small&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8e1602685560720fe544fe0c80e25a2f5facabae" translate="yes" xml:space="preserve">
          <source>&lt;small&gt;&lt;em&gt;controls &lt;code&gt;`show`&lt;/code&gt;&lt;/em&gt;&lt;/small&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="95f1711c5ce3f2e62b2ddfa129925b0ac2feceab" translate="yes" xml:space="preserve">
          <source>&lt;small&gt;&lt;em&gt;controls &lt;code&gt;activeIndex&lt;/code&gt;&lt;/em&gt;&lt;/small&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="086266017780d3929de9a385679b0a468748337f" translate="yes" xml:space="preserve">
          <source>&lt;small&gt;&lt;em&gt;controls &lt;code&gt;activeKey&lt;/code&gt;&lt;/em&gt;&lt;/small&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ef1e891014d0c28cffb2e0fad8d74ead5b86f04d" translate="yes" xml:space="preserve">
          <source>&lt;small&gt;&lt;em&gt;controls &lt;code&gt;expanded&lt;/code&gt;&lt;/em&gt;&lt;/small&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d7f83ace7ac27cdf138ea1c173988c0cd3aa2db7" translate="yes" xml:space="preserve">
          <source>&lt;small&gt;&lt;em&gt;controls &lt;code&gt;show&lt;/code&gt;&lt;/em&gt;&lt;/small&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="574b9bffb3d8f7924268bde9a024c752b362abaa" translate="yes" xml:space="preserve">
          <source>&lt;small&gt;&lt;em&gt;controls &lt;code&gt;value&lt;/code&gt;&lt;/em&gt;&lt;/small&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2777466607621f9f45fdb6e7d1deca1e166ec112" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt; Border Spinner - &lt;code&gt;border&lt;/code&gt;&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="472c920636ab40fb85223f6f4a1fd981bc14235b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt; Grow Spinner - &lt;code&gt;grow&lt;/code&gt; &lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="02b8b1b502041081115c3c231afdaa9bbdae5867" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deprecated: Use align=&quot;right&quot; &lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bbb9cf08811f10149b5932b9ebb716b4e61d1140" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;New to or unfamiliar with flexbox?&lt;/strong&gt;&lt;a href=&quot;https://css-tricks.com/snippets/css/a-guide-to-flexbox/#flexbox-background&quot;&gt;Read this CSS Tricks flexbox guide&lt;/a&gt; for background, terminology, guidelines, and code snippets.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0d61c30933210a22300f45d4cb946bcee03aff88" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Not supported in &amp;lt;= IE11 and other older browsers without a polyfill&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="752623b38a6ee8f9371a07f7fe9a323811841d31" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;PLEASE FIRST READ THE UPSTREAM BOOSTRAP MIGRATION GUIDE&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="70b6d73abd07ce65d3879880454d4085519590b6" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Pro Tip:&lt;/strong&gt; Using the function form of OverlayTrigger avoids a &lt;code&gt;React.findDOMNode&lt;/code&gt; call, for those trying to be strict mode compliant.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2fa746610b78a129ad486cc47a2c66f06f68ecd5" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Rebuilt&lt;/strong&gt; for React.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8250f5c00609f05b34f3edbafe1cb5dbbf088228" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Required if &lt;code&gt;type&lt;/code&gt; is set to &lt;code&gt;'radio'&lt;/code&gt;&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bf81798d5e59ce971099464de1a13375d06b70a8" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;&amp;lt;CardHeader&amp;gt;&lt;/code&gt; can be styled by passing a heading element through the &lt;code&gt;&amp;lt;as&amp;gt;&lt;/code&gt; prop</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ab1fb8b2dd91543890da21f18af8371666c52d62" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;react-transition-group&lt;/code&gt; Transition component used to animate the Toast on dismissal.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="650adf566fe53b41d0ed8dcbc4703cad85e623fa" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;type&lt;/code&gt; passed to the non-toggle Button</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d65eacd1825e7a729e2a8d7e7cbbb3bfc019d9b8" translate="yes" xml:space="preserve">
          <source>A Callback fired when the close button is clicked.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9db56cbdec1afc282f95242042c177cac9faefe7" translate="yes" xml:space="preserve">
          <source>A Callback fired when the close button is clicked. If used directly inside a Modal component, the onHide will automatically be propagated up to the parent Modal &lt;code&gt;onHide&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5d444af11e965c59d63101220e2e7132f34b6645" translate="yes" xml:space="preserve">
          <source>A Component type that provides the modal content Markup. This is a useful prop when you want to use your own styles and markup to create a custom modal component.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e852bfec7fd6a6b87a5cb0bf55e1c7137c673c00" translate="yes" xml:space="preserve">
          <source>A HTML id attribute, necessary for proper form accessibility.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="68037c9d8c659d4d4129ae41811d5726941b57e2" translate="yes" xml:space="preserve">
          <source>A HTML id attribute, necessary for proper form accessibility. An id is recommended for allowing label clicks to toggle the check control.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a8a176cd962edfe08196ff7ea6f3c9fd238e1e2a" translate="yes" xml:space="preserve">
          <source>A Modal can also be without an animation. For that set the &quot;animation&quot; prop to &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="249c532b1cfffca1a4969a7d6a596db6e39c13b8" translate="yes" xml:space="preserve">
          <source>A ModalManager instance used to track and manage the state of open Modals. Useful when customizing how modals interact within a container</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="89af977cd05ff23fed491b8e2dbf9f77225c60de" translate="yes" xml:space="preserve">
          <source>A Popper.js config object passed to the the underlying popper instance.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="24997a913490a5788f092891e5603babccde9f0f" translate="yes" xml:space="preserve">
          <source>A Simple React Component</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="67cae3824dfcff9fd69e63f51f945754d3f95cb7" translate="yes" xml:space="preserve">
          <source>A Toast can also automatically hide after X milliseconds. For that, use the &lt;code&gt;autohide&lt;/code&gt; prop in combination with &lt;code&gt;delay&lt;/code&gt; the prop to sepecify the delay. But be aware, that it will only trigger the &lt;code&gt;onClose&lt;/code&gt; function, you have to set manually the show property.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="685c03d47455f3f6700e4226fd044df291cb60b3" translate="yes" xml:space="preserve">
          <source>A callback fired when a NavItem is selected.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a4f8151caa0abde613a2d99730854129bda3490d" translate="yes" xml:space="preserve">
          <source>A callback fired when a descendant of a child &lt;code&gt;&amp;lt;Nav&amp;gt;&lt;/code&gt; is selected. Should be used to execute complex closing or other miscellaneous actions desired after selecting a descendant of &lt;code&gt;&amp;lt;Nav&amp;gt;&lt;/code&gt;. Does nothing if no &lt;code&gt;&amp;lt;Nav&amp;gt;&lt;/code&gt; or &lt;code&gt;&amp;lt;Nav&amp;gt;&lt;/code&gt; descendants exist. The callback is called with an eventKey, which is a prop from the selected &lt;code&gt;&amp;lt;Nav&amp;gt;&lt;/code&gt; descendant, and an event.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="deb8d33e3c686e59359fbae6d049d777ad4d45e7" translate="yes" xml:space="preserve">
          <source>A callback fired when a menu item is selected.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6f848983db0cb7694afc3ba229a3094c17750ff6" translate="yes" xml:space="preserve">
          <source>A callback fired when a tab is selected.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2fc9afaaad5def716ae2ad636cea0acc324b7429" translate="yes" xml:space="preserve">
          <source>A callback fired when the &lt;code&gt;&amp;lt;Navbar&amp;gt;&lt;/code&gt; body collapses or expands. Fired when a &lt;code&gt;&amp;lt;Navbar.Toggle&amp;gt;&lt;/code&gt; is clicked and called with the new &lt;code&gt;expanded&lt;/code&gt; boolean value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0e0726f5b431699e2d0cdbacc572dafa91e5dad5" translate="yes" xml:space="preserve">
          <source>A callback fired when the &lt;code&gt;NavLink&lt;/code&gt; is selected.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a05bf77e22725f5442a19a77118ed095c58aafd1" translate="yes" xml:space="preserve">
          <source>A callback fired when the &lt;code&gt;value&lt;/code&gt; prop changes</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="17080f8801e083e099e45d2a522400ef3c3534c2" translate="yes" xml:space="preserve">
          <source>A callback fired when the Dropdown wishes to change visibility. Called with the requested &lt;code&gt;show&lt;/code&gt; value, the DOM event, and the source that fired it: &lt;code&gt;'click'&lt;/code&gt;,&lt;code&gt;'keydown'&lt;/code&gt;,&lt;code&gt;'rootClose'&lt;/code&gt;, or &lt;code&gt;'select'&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="10f69daaa83b3de41959923362f4c264051f68c2" translate="yes" xml:space="preserve">
          <source>A callback fired when the Modal is opening.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="63ad39901fdf2677d4fd2c30e81b02fb3852e15b" translate="yes" xml:space="preserve">
          <source>A callback fired when the escape key, if specified in &lt;code&gt;keyboard&lt;/code&gt;, is pressed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2681993f45b24e20763e81ddcc86cda7643f984d" translate="yes" xml:space="preserve">
          <source>A callback fired when the header closeButton or non-static backdrop is clicked. Required if either are specified.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eb6d55d518bf1cc057d2a02d974568f1125fc55c" translate="yes" xml:space="preserve">
          <source>A callback fired when the underlying input element changes. This is passed directly to the &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; so shares the same signature as a native &lt;code&gt;onChange&lt;/code&gt; event.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="72e971e5417169c3ab120b34a052028d2eb52502" translate="yes" xml:space="preserve">
          <source>A callback function for when this component is clicked</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c46adacaa2b8e28f39b0c9e6eed40e2b1797fd81" translate="yes" xml:space="preserve">
          <source>A callback invoked by the overlay when it wishes to be hidden. Required if &lt;code&gt;rootClose&lt;/code&gt; is specified.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eb13fcb75060c5e1f27941fcb9298ef3c13c38d9" translate="yes" xml:space="preserve">
          <source>A callback that fires when the user triggers a change in tooltip visibility.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="07dcdb34a164bc5c591b153dbd638affdb03ec70" translate="yes" xml:space="preserve">
          <source>A component instance, DOM node, or function that returns either. The &lt;code&gt;container&lt;/code&gt; element will have the Overlay appended to it via a React portal.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c59eab25a999c4e830e96bfba3b89516b37d5567" translate="yes" xml:space="preserve">
          <source>A component instance, DOM node, or function that returns either. The overlay will be positioned in relation to the &lt;code&gt;target&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3cec7bf14e56c3b909852a3754b9b724b8c348e5" translate="yes" xml:space="preserve">
          <source>A convenience component for simple or general use dropdowns. Renders a &lt;code&gt;Button&lt;/code&gt; toggle and all &lt;code&gt;children&lt;/code&gt; are passed directly to the default &lt;code&gt;Dropdown.Menu&lt;/code&gt;. This component accepts all of &lt;a href=&quot;#dropdown-props&quot;&gt;&lt;code&gt;Dropdown&lt;/code&gt;'s props&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="261bd4d2820d20a3d87773f63b09535607a6c0dc" translate="yes" xml:space="preserve">
          <source>A convenience component for simple or general use split button dropdowns. Renders a &lt;code&gt;ButtonGroup&lt;/code&gt; containing a &lt;code&gt;Button&lt;/code&gt; and a &lt;code&gt;Button&lt;/code&gt; toggle for the &lt;code&gt;Dropdown&lt;/code&gt;. All &lt;code&gt;children&lt;/code&gt; are passed directly to the default &lt;code&gt;Dropdown.Menu&lt;/code&gt;. This component accepts all of &lt;a href=&quot;#dropdown-props&quot;&gt;&lt;code&gt;Dropdown&lt;/code&gt;'s props&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e267a29e68e8b56841baa2915a3e066a36e2caf5" translate="yes" xml:space="preserve">
          <source>A convenience prop for add the &lt;code&gt;text-muted&lt;/code&gt; class, since it's so commonly used here.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="24db148589833510c3cdd1cac612ad3146a5a048" translate="yes" xml:space="preserve">
          <source>A convenience prop for adding &lt;code&gt;bg-*&lt;/code&gt; utility classes since they are so commonly used here. &lt;code&gt;light&lt;/code&gt; and &lt;code&gt;dark&lt;/code&gt; are common choices but any &lt;code&gt;bg-*&lt;/code&gt; class is supported, including any custom ones you might define.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d9be3c448f38d2cf0c961a6eee7c8e694cd18ef7" translate="yes" xml:space="preserve">
          <source>A convenience prop shortcut for adding &lt;code&gt;position-static&lt;/code&gt; to the input, for correct styling when used without an FormCheckLabel</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d666995f2427a4f065086770c09aa94680b0a54d" translate="yes" xml:space="preserve">
          <source>A css class to apply to the Modal dialog DOM node.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d16f26e1834e5cbe879b4eda99354360f7bc9ee7" translate="yes" xml:space="preserve">
          <source>A custom styled File uploader.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f249d2fc7d32835b126193181c5e4405a52ec57b" translate="yes" xml:space="preserve">
          <source>A function that takes an &lt;code&gt;eventKey&lt;/code&gt; and &lt;code&gt;type&lt;/code&gt; and returns a unique id for child tab &lt;code&gt;&amp;lt;NavItem&amp;gt;&lt;/code&gt;s and &lt;code&gt;&amp;lt;TabPane&amp;gt;&lt;/code&gt;s. The function &lt;em&gt;must&lt;/em&gt; be a pure function, meaning it should always return the &lt;em&gt;same&lt;/em&gt; id for the same set of inputs. The default value requires that an &lt;code&gt;id&lt;/code&gt; to be set for the &lt;code&gt;&amp;lt;TabContainer&amp;gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="38c0a7761c2e8ec7e7cd180739daac4123df19cd" translate="yes" xml:space="preserve">
          <source>A key that associates the &lt;code&gt;TabPane&lt;/code&gt; with it's controlling &lt;code&gt;NavLink&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b8201e3af800089c9062dab973305efbc228f96a" translate="yes" xml:space="preserve">
          <source>A key that corresponds to the collapse component that gets triggered when this has been clicked.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e91d21ed5f67b2a18352240b37b9815d06c3365c" translate="yes" xml:space="preserve">
          <source>A key that corresponds to the toggler that triggers this collapse's expand or collapse.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="28a12f2cd84134510c8d829d52b4bdc20335fe80" translate="yes" xml:space="preserve">
          <source>A lightweight, flexible component that can optionally extend the entire viewport to showcase key content on your site.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8b9c215b220545cb18e75a0e0e1cac28b01c6f45" translate="yes" xml:space="preserve">
          <source>A message to display when the input is in a validation state</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0a7ab231e83c029f0e1528f7f4ff26ee1c3a5202" translate="yes" xml:space="preserve">
          <source>A millisecond delay amount to show and hide the Overlay once triggered</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="de2d565ef4687e3f985eaca8dc9d79068822f1c4" translate="yes" xml:space="preserve">
          <source>A modal with header, body, and set of actions in the footer. Use &lt;code&gt;&amp;lt;Modal/&amp;gt;&lt;/code&gt; in combination with other components to show or hide your Modal. The &lt;code&gt;&amp;lt;Modal/&amp;gt;&lt;/code&gt; Component comes with a few convenient &quot;sub components&quot;: &lt;code&gt;&amp;lt;Modal.Header/&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;Modal.Title/&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;Modal.Body/&amp;gt;&lt;/code&gt;, and &lt;code&gt;&amp;lt;Modal.Footer/&amp;gt;&lt;/code&gt;, which you can use to build the Modal content.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="042c57e2112fc2e5b59d42db96c690902b5d697c" translate="yes" xml:space="preserve">
          <source>A popover component, like those found in iOS.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a719298fb4e28d663d6356f18d961a1276dc0bd6" translate="yes" xml:space="preserve">
          <source>A powerful, responsive navigation header, the navbar. Includes support for branding, navigation, and more</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c6b0c5d46abe86565685a9ad6e50108e28efad46" translate="yes" xml:space="preserve">
          <source>A ref attached to the &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; element</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ec263774ed4aa3e45fdbb845e508fd74f67cead0" translate="yes" xml:space="preserve">
          <source>A responsive navigation header, including support for branding, navigation, and more. Here&amp;rsquo;s an example of all the sub-components included in a responsive light-themed navbar that automatically collapses at the lg (large) breakpoint.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4b52d16296241d549d44f9b943d32743a875e43e" translate="yes" xml:space="preserve">
          <source>A seperate bsPrefix used for custom controls</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c148973bfabe91ec472a5f82a796c5c0dd3f7273" translate="yes" xml:space="preserve">
          <source>A set of &lt;em&gt;presentational&lt;/em&gt; components for building pagination UI.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="760308e3035317e48448e98c007a4827f4551430" translate="yes" xml:space="preserve">
          <source>A set of components for positioning beautiful overlays, tooltips, popovers, and anything else you need.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4f70bae1cd3d6d6f4a994ab335b8db4c9b3e9ab9" translate="yes" xml:space="preserve">
          <source>A set of popper options and props passed directly to Popper.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="769c35d38a37af15a915cc565c7a482f224b6bd0" translate="yes" xml:space="preserve">
          <source>A simple flexible branding component. Images are supported but will likely require custom styling to work well.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bea1fe985fe770c15c001a3dd4626649939b9c1f" translate="yes" xml:space="preserve">
          <source>A slideshow component for cycling through elements&amp;mdash;images or slides of text&amp;mdash;like a carousel.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bfd16a84b77bc05bef95ac1bfea5e82037657c88" translate="yes" xml:space="preserve">
          <source>A switch has the markup of a custom checkbox but uses &lt;code&gt;type=&quot;switch&quot;&lt;/code&gt; to render a toggle switch. Switches also support the same customizable children as &lt;code&gt;&amp;lt;FormCheck&amp;gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="83536685cc13aaba0b8b3a29d6c3ce8c4d28e54e" translate="yes" xml:space="preserve">
          <source>A tooltip component for a more stylish alternative to that anchor tag &lt;code&gt;title&lt;/code&gt; attribute.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dfc45499a6a19d83bc0861ef9d573cc9faec5275" translate="yes" xml:space="preserve">
          <source>A unique identifier for the Component, the &lt;code&gt;eventKey&lt;/code&gt; makes it distinguishable from others in a set. Similar to React's &lt;code&gt;key&lt;/code&gt; prop, in that it only needs to be unique amongst the Components siblings, not globally.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d93d10ff0fbef1b4aa0ddc24e10e907746d3c85a" translate="yes" xml:space="preserve">
          <source>API</source>
          <target state="translated">API</target>
        </trans-unit>
        <trans-unit id="13f2fc1af305be2f49290ba2b85dd109f961052a" translate="yes" xml:space="preserve">
          <source>ARIA</source>
          <target state="translated">ARIA</target>
        </trans-unit>
        <trans-unit id="f24f1930a6b6f87cdf9838c8fbe666968da062ac" translate="yes" xml:space="preserve">
          <source>ARIA label for the nav element &lt;a href=&quot;https://www.w3.org/TR/wai-aria-practices/#breadcrumb&quot;&gt;https://www.w3.org/TR/wai-aria-practices/#breadcrumb&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c9cca657f2d3ad5793bb1ef0c84a37c4eb03775e" translate="yes" xml:space="preserve">
          <source>ARIA role for the Nav, in the context of a TabContainer, the default will be set to &quot;tablist&quot;, but can be overridden by the Nav when set explicitly.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ca88ffecc09414e2570f07c56031033806617544" translate="yes" xml:space="preserve">
          <source>ARIA role of collapsible element</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6b21fb791ac05170893860c248401cd24a59b732" translate="yes" xml:space="preserve">
          <source>About</source>
          <target state="translated">About</target>
        </trans-unit>
        <trans-unit id="d660049bc1f2f54fc0e3f4ace6fa5eb205f2f1e0" translate="yes" xml:space="preserve">
          <source>Accessibility</source>
          <target state="translated">Accessibility</target>
        </trans-unit>
        <trans-unit id="208a37645b0a5a30990da45902f524c20a1e935a" translate="yes" xml:space="preserve">
          <source>Accessible by default</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ecfe3fe97ca2d63a3bf20b68dee98cc026735e2e" translate="yes" xml:space="preserve">
          <source>Accessible label for the toggle; the value of &lt;code&gt;title&lt;/code&gt; if not specified.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="21191a043a6120d9be09860a4004ff1ba6657d82" translate="yes" xml:space="preserve">
          <source>Accordion</source>
          <target state="translated">Accordion</target>
        </trans-unit>
        <trans-unit id="dd9eb1290e692164b2690a518460ce359573e310" translate="yes" xml:space="preserve">
          <source>Accordion.Collapse</source>
          <target state="translated">Accordion.Collapse</target>
        </trans-unit>
        <trans-unit id="94c034891317dde6fddeae42341a6f93a0bbd58d" translate="yes" xml:space="preserve">
          <source>Accordion.Toggle</source>
          <target state="translated">Accordion.Toggle</target>
        </trans-unit>
        <trans-unit id="a483ef71e81a0ac69739d2708c9d40779337b726" translate="yes" xml:space="preserve">
          <source>Accordions provide a way to restrict Card components to only open one at a time.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f0b0a856ec62b727c405f617e00e010a2b993539" translate="yes" xml:space="preserve">
          <source>Accordions use Card components to provide styling of the Accordion components. Use AccordionToggle to provide a button that switches between each AccordionCollapse component.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ad3471ae96d5191d2f5e3fd24fd3a4bed211c42e" translate="yes" xml:space="preserve">
          <source>Across every breakpoint, use &lt;code&gt;responsive&lt;/code&gt; for horizontally scrolling tables. Responsive tables are wrapped automatically in a &lt;code&gt;div&lt;/code&gt;. The following example has 12 columns that are scrollable horizontally.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4b5496ed83209f2f55f75a6ea36dc3fb90c12573" translate="yes" xml:space="preserve">
          <source>Actionable items</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1a8ef5d3e8affe17fc1d9ff3228db31d1fa24a5e" translate="yes" xml:space="preserve">
          <source>Active items</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dafbf0cc0477432a074b7d990e0024641e16e1d9" translate="yes" xml:space="preserve">
          <source>Active state</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="06c7f604e3824cd33abe6593e55c6ab1a5cb8a98" translate="yes" xml:space="preserve">
          <source>Add &quot;invalid&quot; validation styles to the control and accompanying label</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="31d1a2f3ffb962574b4c90e323cbfdd7d0b38aed" translate="yes" xml:space="preserve">
          <source>Add &quot;valid&quot; validation styles to the control</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="df0a74bf4cef7b3abb68b39844f5a0c7c911c752" translate="yes" xml:space="preserve">
          <source>Add &lt;code&gt;animated&lt;/code&gt; prop to animate the stripes right to left. Not available in IE9 and below.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4e02c0911878d69034614bf0d4eb6372da232a3b" translate="yes" xml:space="preserve">
          <source>Add a &lt;code&gt;label&lt;/code&gt; prop to show a visible percentage. For low percentages, consider adding a min-width to ensure the label's text is fully visible.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="010f0e89b14fb92401120bd76902fad191412eee" translate="yes" xml:space="preserve">
          <source>Add a &lt;code&gt;srOnly&lt;/code&gt; prop to hide the label visually.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="202f415f09d1122cb52e0bfa8f5daa855ac06474" translate="yes" xml:space="preserve">
          <source>Add a collapse toggle animation to an element or component.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6bae28a959e332161d99b6e47275a438013b6d20" translate="yes" xml:space="preserve">
          <source>Add a fade animation to a child element or component.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="597dccd47b07e7b1cfbedb8417d7951eba1a6439" translate="yes" xml:space="preserve">
          <source>Add a header to label sections of actions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c76d856935dc0c96cf1f84db57a4edc240667a6b" translate="yes" xml:space="preserve">
          <source>Add an optional extra class name to .modal-backdrop It could end up looking like class=&quot;modal-backdrop foo-modal-backdrop in&quot;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eca328e2d92f99346a186f901ffba2c6e28b27a0" translate="yes" xml:space="preserve">
          <source>Add an optional extra class name to .modal-content</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d51f539e09015eae6256b120e7512619f9cea05e" translate="yes" xml:space="preserve">
          <source>Add any of the below mentioned modifier classes to change the appearance of a badge.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="781d93e18ee2349b710feb6aaee3f904df4e9486" translate="yes" xml:space="preserve">
          <source>Add dialogs to your site for lightboxes, user notifications, or completely custom content.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7e85938569423d1522565581f24f05efafbd3819" translate="yes" xml:space="preserve">
          <source>Add some navigation to a card&amp;rsquo;s header (or block) with React Bootstrap&amp;rsquo;s &lt;a href=&quot;../navs/index&quot;&gt;Nav&lt;/a&gt; components.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="117db0a8f9f855beedaeed46613c918486e48d57" translate="yes" xml:space="preserve">
          <source>Add the &lt;code&gt;disabled&lt;/code&gt; attribute to a &lt;code&gt;&amp;lt;fieldset&amp;gt;&lt;/code&gt; to disable all the controls within.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="00bf2170eaf032dc8ea63ea7f92433c00d277180" translate="yes" xml:space="preserve">
          <source>Add the &lt;code&gt;disabled&lt;/code&gt; boolean attribute on an input to prevent user interactions and make it appear lighter.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="225aff7fcd42fcf0870b079bac919806962c06f5" translate="yes" xml:space="preserve">
          <source>Add the &lt;code&gt;dismissible&lt;/code&gt; prop to add a functioning dismiss button to the Alert.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1501d1aad952afcfb8944714f06c17b599ebb846" translate="yes" xml:space="preserve">
          <source>Add the &lt;code&gt;flush&lt;/code&gt; variant to remove outer borders and rounded corners to render list group items edge-to-edge in a parent container &lt;a href=&quot;../cards/index#list-groups&quot;&gt;such as a &lt;code&gt;Card&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e379c0113a821ac864f0c595e66acd54b3349d84" translate="yes" xml:space="preserve">
          <source>Add the &lt;code&gt;pill&lt;/code&gt; modifier to make badges more rounded with some additional horizontal padding</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="502e42b9328e49a884042838b429588410eccb91" translate="yes" xml:space="preserve">
          <source>Add the &lt;code&gt;readOnly&lt;/code&gt; prop on an input to prevent modification of the input's value. Read-only inputs appear lighter (just like disabled inputs), but retain the standard cursor.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b41d2916712524d0876a8d05b0636dbcb889bdac" translate="yes" xml:space="preserve">
          <source>Add the relative form sizing classes to the &lt;code&gt;InputGroup&lt;/code&gt; and contents within will automatically resize&amp;mdash;no need for repeating the form control size classes on each element.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b2850bc1398bce6a251308c1d2f3827a62eccd7f" translate="yes" xml:space="preserve">
          <source>Additional Import Options</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="179ef057a4a91663c27ec808707389b992786114" translate="yes" xml:space="preserve">
          <source>Additional content</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5b6b3ed08e2a440240f2140eefbe98af8cfee9cf" translate="yes" xml:space="preserve">
          <source>Additional props passed as-is to the underlying &lt;code&gt;&amp;lt;ol&amp;gt;&lt;/code&gt; element</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3965da9466d03d4506a1f14648be04a38b9c356c" translate="yes" xml:space="preserve">
          <source>Additional props passed as-is to the underlying link for non-active items.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5b272b246d1ebbb53e80b16b3bede432e6ac9ed7" translate="yes" xml:space="preserve">
          <source>Adds a variant to the list-group</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1a0361e4594c134fbf912c81bb159a001b9a0481" translate="yes" xml:space="preserve">
          <source>Adds a visual &quot;active&quot; state to a Breadcrumb Item and disables the link.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="298fb204aaa6c5099038db78c6ccae436115dd3e" translate="yes" xml:space="preserve">
          <source>Adds borders on all sides of the table and cells.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0d78435af25a0c8ab7c4cfbbd73e49a4e636252b" translate="yes" xml:space="preserve">
          <source>Adds zebra-striping to any table row within the &lt;code&gt;&amp;lt;tbody&amp;gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5126940d744a6dff391a643edf858b06f00785ed" translate="yes" xml:space="preserve">
          <source>Advanced usage</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b969680a4943d3e0dd28ec47387f131504ca1678" translate="yes" xml:space="preserve">
          <source>Alert</source>
          <target state="translated">Alert</target>
        </trans-unit>
        <trans-unit id="4e2281b2b0b39dfbc936e366c26508fcbdc626e3" translate="yes" xml:space="preserve">
          <source>Alert.Heading</source>
          <target state="translated">Alert.Heading</target>
        </trans-unit>
        <trans-unit id="5d0e9abb415d783955e75e2451e20d2280173291" translate="yes" xml:space="preserve">
          <source>Alert.Link</source>
          <target state="translated">Alert.Link</target>
        </trans-unit>
        <trans-unit id="d0efe0b2c75c1c670b3146f5f276e23a667f15ec" translate="yes" xml:space="preserve">
          <source>Alerts</source>
          <target state="translated">Alerts</target>
        </trans-unit>
        <trans-unit id="00fad116ed6163acd8a1a62eafad90762d7f43fa" translate="yes" xml:space="preserve">
          <source>Alerts are available for any length of text, as well as an optional dismiss button. For proper styling, use one of the eight &lt;code&gt;variant&lt;/code&gt;s.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="af565ac1623219de581d19046c1b50c1109c504e" translate="yes" xml:space="preserve">
          <source>Alerts can contain whatever content you like. Headers, paragraphs, dividers, go crazy.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="200eea50b842c3f61a483277f49373d8135decea" translate="yes" xml:space="preserve">
          <source>Align the menu to the right side of the Dropdown toggle</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9e32f76f0cd51b6f0895ed732200ec04e96b3d4b" translate="yes" xml:space="preserve">
          <source>Alignment and orientation</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9df339acb13a32243d5e516608f939c69478168d" translate="yes" xml:space="preserve">
          <source>Aligns the Dropdown menu to the right of it's container.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2b53c8cc33a4cde3f871c40a0d00e5b65898e878" translate="yes" xml:space="preserve">
          <source>Aligns the dropdown menu responsively.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="daef8d0d2b9ff17b679365c87ba8c3c74811bc2a" translate="yes" xml:space="preserve">
          <source>Aligns the dropdown menu to the specified side of the container. You can also align the menu responsively for breakpoints starting at &lt;code&gt;sm&lt;/code&gt; and up. The alignment direction will affect the specified breakpoint or larger.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1a9ffd072db7c919a19f0c21a4ffb2c54773cf6e" translate="yes" xml:space="preserve">
          <source>All standard visual variants are available for both animation styles by setting the &lt;code&gt;variant&lt;/code&gt; property. Alternatively spinners can be custom sized with the &lt;code&gt;style&lt;/code&gt; property, or custom CSS classes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3256ba18e0e427110deebc0d99e766ba868a3338" translate="yes" xml:space="preserve">
          <source>All utils have been removed from main exports, most were internal already and the rest have been moved to external libraries</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="450f48c54fa96ad6f77d398b2ddb104d10be05f8" translate="yes" xml:space="preserve">
          <source>Allow Dropdown to flip in case of an overlapping on the reference element. For more information refer to Popper.js's flip &lt;a href=&quot;https://popper.js.org/docs/v2/modifiers/flip/&quot;&gt;docs&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8db0b88e1d27c96fd2778573165e3838a0aed37c" translate="yes" xml:space="preserve">
          <source>Allow browsers to determine video or slideshow dimensions based on the width of their containing block by creating an intrinsic ratio that will properly scale on any device.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e3fc2a28ed7500f6b56fa9e0ffd8c8b9652baf26" translate="yes" xml:space="preserve">
          <source>Allow the Container to fill all of its available horizontal space.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="849deb999746fa620dd5c25c94e0c95a3db28647" translate="yes" xml:space="preserve">
          <source>Allows for providing some custom logic for how much the Collapse component should animate in its specified dimension. Called with the current dimension prop value and the DOM node.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f817dcee7cc8adc8280142cc8880c0de3f57832d" translate="yes" xml:space="preserve">
          <source>Allows scrolling the &lt;code&gt;&amp;lt;Modal.Body&amp;gt;&lt;/code&gt; instead of the entire Modal when overflowing.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8d59318846dd63ebde58e34d1747969efbf51213" translate="yes" xml:space="preserve">
          <source>Alternatively, you can use this shorthand version for Cards with body only, and no other children</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="72674b903316c5d888e9bb1f4ca48554ccaa5e3e" translate="yes" xml:space="preserve">
          <source>Alternatives to hidden labels</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a8e6c203013232b08509b3013ebdd20f03f37d26" translate="yes" xml:space="preserve">
          <source>Always Responsive</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f2d037263783e0df15c47306614c67f531ca61b6" translate="yes" xml:space="preserve">
          <source>An &lt;code&gt;href&lt;/code&gt; passed to the Toggle component</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4fabd84748c00307716e7093cdf94113786be497" translate="yes" xml:space="preserve">
          <source>An &lt;code&gt;href&lt;/code&gt; passed to the non-toggle Button</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="05e6d1cd5779d24eae595f72360c06c3b2dd70e4" translate="yes" xml:space="preserve">
          <source>An &lt;code&gt;onClick&lt;/code&gt; handler passed to the Toggle component</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="45e9db07c3fe28d4531bb803cbb5f73cad86847b" translate="yes" xml:space="preserve">
          <source>An &lt;code&gt;onClick&lt;/code&gt; handler passed to the non-toggle Button</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="17bc2fdcce2e78b2cfcbeb03649c34948a895bb4" translate="yes" xml:space="preserve">
          <source>An ARIA accessible role applied to the Menu component. This should generally be set to 'status'</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bbaeff10a055e146ac0908b2750bde947a22369f" translate="yes" xml:space="preserve">
          <source>An ARIA accessible role applied to the Menu component. When set to 'menu', The dropdown</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ef02d2b373a29aef27321af21f2385bae04357b5" translate="yes" xml:space="preserve">
          <source>An ARIA role describing the button group. Usually the default &quot;group&quot; role is fine. An &lt;code&gt;aria-label&lt;/code&gt; or &lt;code&gt;aria-labelledby&lt;/code&gt; prop is also recommended.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="86fab4f328ee5aaf82cfec52ffb26b849a41f814" translate="yes" xml:space="preserve">
          <source>An HTML &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; name for each child button.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5ec6f47aadfa3999a3fd7d76178a194cf60589d2" translate="yes" xml:space="preserve">
          <source>An Overlay injected set of props for positioning the popover arrow.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="95f664ab0cd7720fe40ca5f0a3ac59cc0f94268b" translate="yes" xml:space="preserve">
          <source>An Overlay injected set of props for positioning the tooltip arrow.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="df24cf1ea9d02468bc95491597a60d878df4e047" translate="yes" xml:space="preserve">
          <source>An accessible ARIA label for the toggler button.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6bfc1050155bf3245fe55cbb71c48f6e7ade299c" translate="yes" xml:space="preserve">
          <source>An accessible label indicating the active state..</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1291525b10bc045c64d4dd180a394abd71dba1af" translate="yes" xml:space="preserve">
          <source>An alternative visual variant.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b4741a0a1e4d6af3ef6ac3e7b2a02fa204a510af" translate="yes" xml:space="preserve">
          <source>An anchor &lt;code&gt;target&lt;/code&gt; passed to the non-toggle Button</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6ef3ebcb9f0da24c23076861c0b48671a73e1ce0" translate="yes" xml:space="preserve">
          <source>An element or text to overlay next to the target.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="11ed8b477547d52d61fb99364ab68add83348469" translate="yes" xml:space="preserve">
          <source>An href, when provided the Brand will render as an &lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt; element (unless &lt;code&gt;as&lt;/code&gt; is provided).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="841662e10125bc274515d15c42cff4924346eb16" translate="yes" xml:space="preserve">
          <source>An html id attribute for the Toggle button, necessary for assistive technologies, such as screen readers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b3016407199468aee9c58aa74130579dfaa7f0a8" translate="yes" xml:space="preserve">
          <source>An html id attribute, necessary for accessibility</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c3dea1e71a231b48a7926106578519d4232ee9ff" translate="yes" xml:space="preserve">
          <source>An html id attribute, necessary for assistive technologies, such as screen readers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1b4f7fe882211639536012d6b31f3ba44e658f72" translate="yes" xml:space="preserve">
          <source>And of course &lt;a href=&quot;#forms-custom&quot;&gt;custom form controls&lt;/a&gt; are supported.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c8b7104d1e31a8570635768da418a0662dce68b8" translate="yes" xml:space="preserve">
          <source>Animate the alert dismissal. Defaults to using &lt;code&gt;&amp;lt;Fade&amp;gt;&lt;/code&gt; animation or use &lt;code&gt;false&lt;/code&gt; to disable. A custom &lt;code&gt;react-transition-group&lt;/code&gt; Transition can also be provided.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8b9cfab85fa67c97020b05cacedbffd7c31b2a1e" translate="yes" xml:space="preserve">
          <source>Animate the entering and exiting of the Overlay. &lt;code&gt;true&lt;/code&gt; will use the &lt;code&gt;&amp;lt;Fade&amp;gt;&lt;/code&gt; transition, or a custom react-transition-group &lt;code&gt;&amp;lt;Transition&amp;gt;&lt;/code&gt; component can be provided.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e0d5c5a2688980fcf75f2d96f742cf81b23302df" translate="yes" xml:space="preserve">
          <source>Animate's the stripes from right to left</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="45dbdd70502ea39b116a520ceaf2fbd1f05c61d7" translate="yes" xml:space="preserve">
          <source>Animated</source>
          <target state="translated">Animated</target>
        </trans-unit>
        <trans-unit id="c77dcdedc0f40e8dac08a08c8bef7255abb90e75" translate="yes" xml:space="preserve">
          <source>Animations</source>
          <target state="translated">Animations</target>
        </trans-unit>
        <trans-unit id="5eda7007c836ba701f2ebe39224b9d38a78c4fb9" translate="yes" xml:space="preserve">
          <source>Anytime you need to display a piece of content, like an image with an optional caption, consider using a &lt;code&gt;Figure&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="204132521fcb3c72d8525043b5077e5e63df84b8" translate="yes" xml:space="preserve">
          <source>Apply Bootstrap's custom elements by adding the &lt;code&gt;custom&lt;/code&gt; prop.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="81c470ea5c095c1aec34babdd92a2f9ba40614fe" translate="yes" xml:space="preserve">
          <source>Apply a CSS fade transition to the toast</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d8157b3809769d74b364a6882f2a124facde6b1f" translate="yes" xml:space="preserve">
          <source>Apply styling an alignment for use in a Navbar. This prop will be set automatically when the Nav is used inside a Navbar.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="88e373c1cc53b6a0d21a50b4490027415f179e43" translate="yes" xml:space="preserve">
          <source>As one of the oldest React libraries, React-Bootstrap has evolved and grown alongside React, making it an excellent choice as your UI foundation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3d552328fa1ac30219f2ad961e904709d592f1f0" translate="yes" xml:space="preserve">
          <source>As shown in the previous examples, our grid system allows you to place any number of &lt;code&gt;&amp;lt;Col&amp;gt;&lt;/code&gt;s within a &lt;code&gt;&amp;lt;Row&amp;gt;&lt;/code&gt; or &lt;code&gt;&amp;lt;Form.Row&amp;gt;&lt;/code&gt;. They'll split the available width equally between them. You may also pick a subset of your columns to take up more or less space, while the remaining &lt;code&gt;&amp;lt;Col&amp;gt;&lt;/code&gt;s equally split the rest, with specific column classes like &lt;code&gt;&amp;lt;Col xs={7}&amp;gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7a5453d153f97551e8423b3e45dc476e8215fd73" translate="yes" xml:space="preserve">
          <source>As with &lt;code&gt;&amp;lt;Tooltip&amp;gt;&lt;/code&gt;s, you can control the placement of the Popover.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="29dc67938abc552f3761ae7f5939b85ce82e82d1" translate="yes" xml:space="preserve">
          <source>As with DropdownButton, &lt;code&gt;SplitButton&lt;/code&gt; is provided as convenience component.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="96ee075717292ff080466c2ca2211d49d22e6a30" translate="yes" xml:space="preserve">
          <source>Assistive technologies such as screen readers will have trouble with your forms if you don&amp;rsquo;t include a label for every input. For these inline forms, you can hide the labels using the &lt;code&gt;srOnly&lt;/code&gt; prop. There are further alternative methods of providing a label for assistive technologies, such as the &lt;code&gt;aria-label&lt;/code&gt;, &lt;code&gt;aria-labelledby&lt;/code&gt; or &lt;code&gt;title&lt;/code&gt; attribute. If none of these are present, assistive technologies may resort to using the &lt;code&gt;placeholder&lt;/code&gt; attribute, if present, but note that use of &lt;code&gt;placeholder&lt;/code&gt; as a replacement for other labelling methods is not advised.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="25209d807f44883cbeab0c8935ae9fcc37cb83ea" translate="yes" xml:space="preserve">
          <source>Associating help text with form controls</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b3ff0f28485101499463c989ee0eb8c4d2a1583b" translate="yes" xml:space="preserve">
          <source>Auto hide the toast</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e0f44dd0f2801c867d05bdc93deb91e75a5b923d" translate="yes" xml:space="preserve">
          <source>Auto-layout columns</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="08822f3f1444011f2475f123298ebc13498bd0a8" translate="yes" xml:space="preserve">
          <source>Auto-layout for flexbox grid columns also means you can set the width of one column and have the sibling columns automatically resize around it. You may use predefined grid classes (as shown below), grid mixins, or inline widths. Note that the other columns will resize no matter the width of the center column.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c2d4a1cb3d5b1469aae3391536b45f6a4385db82" translate="yes" xml:space="preserve">
          <source>Auto-sizing</source>
          <target state="translated">Auto-sizing</target>
        </trans-unit>
        <trans-unit id="32c99fcbcb4bcf8ff5595d33ee8ecce11ac2fdf9" translate="yes" xml:space="preserve">
          <source>Autohide</source>
          <target state="translated">Autohide</target>
        </trans-unit>
        <trans-unit id="b9f561e1d565ceee050bbac3469c1e0ba96bf4da" translate="yes" xml:space="preserve">
          <source>Awesome React Bootstrap Components</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="874df4e774343ace22071f648b6b67d11e21b307" translate="yes" xml:space="preserve">
          <source>Background Color</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6d12c8adbefeaeacac0d48274df3a195ca9a1d17" translate="yes" xml:space="preserve">
          <source>Badge</source>
          <target state="translated">Badge</target>
        </trans-unit>
        <trans-unit id="6fb78b306b6d2e0a0bd5ea56b6ea6787beb70e84" translate="yes" xml:space="preserve">
          <source>Badge &amp;amp; Label</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2c578dc888bc9805915a1839502adddce2592af7" translate="yes" xml:space="preserve">
          <source>Badges</source>
          <target state="translated">Badges</target>
        </trans-unit>
        <trans-unit id="97a6a248e48f849fa4f22df644786963aed6804a" translate="yes" xml:space="preserve">
          <source>Badges can be used as part of links or buttons to provide a counter.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b44ff43627ee60183851373f2bdcd2b74fa31ecb" translate="yes" xml:space="preserve">
          <source>Badges scale to match the size of the immediate parent element by using relative font sizing and em units.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2b75f45c16f8bb115a63a7d1bccd08f7c8843201" translate="yes" xml:space="preserve">
          <source>Base Nav</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aa2c96dacf00c451ef465f6115a45a20bccf1256" translate="yes" xml:space="preserve">
          <source>Basic</source>
          <target state="translated">Basic</target>
        </trans-unit>
        <trans-unit id="dac6b24f78471a132bc9a7ec7774530351b54fb0" translate="yes" xml:space="preserve">
          <source>Basic Example</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="20b19d89ef0aed3f2d4f1afed1d3f801c6b85aa5" translate="yes" xml:space="preserve">
          <source>Basic example</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e2e0d969482954a99f12080bd0754c6ef6cc3b4d" translate="yes" xml:space="preserve">
          <source>Because React-Bootstrap completely reimplements Bootstrap's JavaScript, it's not automatically compatible with themes that extend the default JavaScript behaviors.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="49cab6ae0421afd6da8bc69fb0f322f1497ece64" translate="yes" xml:space="preserve">
          <source>Because React-Bootstrap doesn't depend on a very precise version of Bootstrap, we don't ship with any included CSS. However, some stylesheet &lt;strong&gt;is required&lt;/strong&gt; to use these components.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e3a579498514c7236e3b0902972239435090113d" translate="yes" xml:space="preserve">
          <source>Because the media object has so few structural requirements, you can also use these classes on list HTML elements. On your &lt;code&gt;ul&lt;/code&gt; or &lt;code&gt;ol&lt;/code&gt; , add the .list-unstyled to remove any browser default list styles, use &lt;code&gt;&amp;lt;Media as=&quot;li&quot;&amp;gt;&lt;/code&gt; to render as a list item. As always, use spacing utilities wherever needed to fine tune.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4b59ec6da5a8f147a94f0c173b5f1ef31bd9b7c1" translate="yes" xml:space="preserve">
          <source>Below is a &lt;em&gt;rough&lt;/em&gt; account of the breaking API changes as well as the minimal change to migrate</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3f9328071514d710bca48c70dfb87c1796b18713" translate="yes" xml:space="preserve">
          <source>Below is a &lt;em&gt;static&lt;/em&gt; modal dialog (without the positioning) to demonstrate the look and feel of the Modal.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b1dd66e619b90df549cfac42ee578623b23607e8" translate="yes" xml:space="preserve">
          <source>Block-level help text in forms can be created using &lt;code&gt;&amp;lt;Form.Text&amp;gt;&lt;/code&gt;. Inline help text can be flexibly implemented using any inline HTML element and utility classes like&lt;code&gt;.text-muted&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="718a7e8a582e982e452dd5700addba4ffc1cf40d" translate="yes" xml:space="preserve">
          <source>Body</source>
          <target state="translated">Body</target>
        </trans-unit>
        <trans-unit id="89ec4ec2bf400e823f3ca49d0cb938b0fedd7bab" translate="yes" xml:space="preserve">
          <source>Bootstrap</source>
          <target state="translated">Bootstrap</target>
        </trans-unit>
        <trans-unit id="9d4c7b5e1f4a0931a3a7a1541fcc219d0ee4d092" translate="yes" xml:space="preserve">
          <source>Bootstrap 3 support will continue in react-bootstrap versions &amp;lt; &lt;code&gt;v1.0.0&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5444cacf2a222f2505ee6ca094e2d3024ed998ea" translate="yes" xml:space="preserve">
          <source>Bootstrap 4 support will be in react-bootstrap versions &amp;gt;= &lt;code&gt;v1.0.0&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1ff6c53d9b740756bd83b05afa3d0fd64f32d19c" translate="yes" xml:space="preserve">
          <source>Bootstrap also provides a way to translate the &amp;ldquo;Browse&amp;rdquo; text in HTML with the &lt;code&gt;data-browse&lt;/code&gt; attribute which can be added to the custom input label (example in Dutch):</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d82c399deff78a48f5ccef1189fbe1f95ac1483f" translate="yes" xml:space="preserve">
          <source>Bootstrap at its core</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="01e9c885d923e600209ecaedb6ac415a1b145a78" translate="yes" xml:space="preserve">
          <source>Bootstrap includes a few general use CSS transitions that can be applied to a number of components. React Bootstrap, bundles them up into a few composable &lt;code&gt;&amp;lt;Transition&amp;gt;&lt;/code&gt; components from &lt;a href=&quot;https://github.com/reactjs/react-transition-group&quot;&gt;react-transition-group&lt;/a&gt;, a commonly used animation wrapper for React.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ed743dd2b1e9231af751e03c11345de60d372383" translate="yes" xml:space="preserve">
          <source>Bootstrap offers two animation styles for spinners. The animation style can be configured with the &lt;code&gt;animation&lt;/code&gt; property. An animation style must always be provided when creating a spinner.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2bd2b4550e65e3656ecb6da538269d11ff79d728" translate="yes" xml:space="preserve">
          <source>Bootstrap only supports &lt;strong&gt;one&lt;/strong&gt; modal window at a time. Nested modals aren&amp;rsquo;t supported, but if you really need them the underlying &lt;code&gt;react-overlays&lt;/code&gt; can support them if you're willing.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ae3f9a1bcf954e327f895f04c14fb65e56ee27ec" translate="yes" xml:space="preserve">
          <source>Bootstrap scopes the &lt;code&gt;:valid&lt;/code&gt; and &lt;code&gt;:invalid&lt;/code&gt; styles to parent &lt;code&gt;.was-validated&lt;/code&gt; class, usually applied to the &lt;code&gt;&amp;lt;Form&amp;gt;&lt;/code&gt; (you can use the &lt;code&gt;validated&lt;/code&gt; prop as a shortcut). Otherwise, any required field without a value shows up as invalid on page load. This way, you may choose when to activate them (typically after form submission is attempted).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="efde4688e8d97b0c5fd1fc2694663db67650f550" translate="yes" xml:space="preserve">
          <source>Bootstrap with state</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ac13f9b283b2d109f31e016e2b6407c0a3fef0f2" translate="yes" xml:space="preserve">
          <source>Bootstrap&amp;rsquo;s cards provide a flexible and extensible content container with multiple variants and options.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4dbf467cbbed8d13fbb34921ed2beb129fd67cdd" translate="yes" xml:space="preserve">
          <source>Bootstrap&amp;rsquo;s grid system uses a series of containers, rows, and columns to layout and align content. It&amp;rsquo;s built with &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Flexible_Box_Layout/Using_CSS_flexible_boxes&quot;&gt;flexbox&lt;/a&gt; and is fully responsive. Below is an example and an in-depth look at how the grid comes together.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d2e11d38b1003efa73a6af8aa5093dbe39c6761e" translate="yes" xml:space="preserve">
          <source>Border Color</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="62b4aa574f708ad26153df481b7f720473b4f1c5" translate="yes" xml:space="preserve">
          <source>Brand</source>
          <target state="translated">Brand</target>
        </trans-unit>
        <trans-unit id="c766e665183df1bd0aa1d956b163b9e6375ea465" translate="yes" xml:space="preserve">
          <source>Breadcrumb</source>
          <target state="translated">Breadcrumb</target>
        </trans-unit>
        <trans-unit id="a84960bfcadf1687eb437afe3667755c352e2495" translate="yes" xml:space="preserve">
          <source>Breadcrumb.Item</source>
          <target state="translated">Breadcrumb.Item</target>
        </trans-unit>
        <trans-unit id="0ecef6f95577e3e82d8917d2d3e89d1aa83afd09" translate="yes" xml:space="preserve">
          <source>Breadcrumbs</source>
          <target state="translated">Breadcrumbs</target>
        </trans-unit>
        <trans-unit id="d120bdab95ba1a4b722bb5d29008a1f93fca6a29" translate="yes" xml:space="preserve">
          <source>Breakpoint specific</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c19df7b14898e0f81ed80b54e4b5f8450a723790" translate="yes" xml:space="preserve">
          <source>Browser globals</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="caa7ae8131b0e358dca91885f3b90f7468dff074" translate="yes" xml:space="preserve">
          <source>Browser support</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c443b3bab402d43e591d1fb87abc0dfecb2b151e" translate="yes" xml:space="preserve">
          <source>Built with compatibility in mind, we embrace our bootstrap core and strive to be compatible with the world's largest UI ecosystem.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="794145f030ff721599a0353a9b2e59e9a92b9bf1" translate="yes" xml:space="preserve">
          <source>Button</source>
          <target state="translated">Button</target>
        </trans-unit>
        <trans-unit id="bee6e68837dfd48364096af1277b760dc1e74f70" translate="yes" xml:space="preserve">
          <source>Button addons</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="85c4ca2992312e4af7b03899fb2c15a5f894fc58" translate="yes" xml:space="preserve">
          <source>Button groups</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dc52f55da5bad4b80f93319b47170a68ef20a1c9" translate="yes" xml:space="preserve">
          <source>Button loading state</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="166d3caf92a7a99df5f5003b68c81c2aedad1bac" translate="yes" xml:space="preserve">
          <source>Button tags</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="114b7758e0ae27bd3b8b329e1bd4244464b3f039" translate="yes" xml:space="preserve">
          <source>Button toolbar</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="db27c070291763157930659db7978fefbbf6184d" translate="yes" xml:space="preserve">
          <source>ButtonGroup</source>
          <target state="translated">ButtonGroup</target>
        </trans-unit>
        <trans-unit id="5be4e38ad48d8ead06ef526d4594a3bda8ef51bf" translate="yes" xml:space="preserve">
          <source>ButtonToolbar</source>
          <target state="translated">ButtonToolbar</target>
        </trans-unit>
        <trans-unit id="503d46db37b0db45db898aabed77244252918ca2" translate="yes" xml:space="preserve">
          <source>Buttons</source>
          <target state="translated">Buttons</target>
        </trans-unit>
        <trans-unit id="710a336c7f76ed1c6ae133064f49dec4fa9b2d96" translate="yes" xml:space="preserve">
          <source>Buttons can also be used to style &lt;code&gt;checkbox&lt;/code&gt; and &lt;code&gt;radio&lt;/code&gt; form elements. This is helpful when you want a toggle button that works neatly inside an HTML form.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7fb7f9f31a080e4b9c6a33985d732d62d2020b9c" translate="yes" xml:space="preserve">
          <source>Buttons with Dropdowns</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="05fe174ea8a189265086b75eb90a8e4e2812b4d8" translate="yes" xml:space="preserve">
          <source>By default, a dropdown menu is aligned to the left, but you can switch it by passing &lt;code&gt;right&lt;/code&gt; to the &lt;code&gt;align&lt;/code&gt; prop on a &lt;code&gt;&amp;lt;DropdownMenu&amp;gt;&lt;/code&gt; or passing &lt;code&gt;right&lt;/code&gt; to the &lt;code&gt;menuAlign&lt;/code&gt; prop on the &lt;code&gt;&amp;lt;DropdownButton&amp;gt;&lt;/code&gt; or &lt;code&gt;&amp;lt;SplitButton&amp;gt;&lt;/code&gt; as seen below.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5f97cb6e4e4c42e2826555e17b9e27e65b9c8047" translate="yes" xml:space="preserve">
          <source>By default, any number of checkboxes and radios that are immediate sibling will be vertically stacked and appropriately spaced with FormCheck.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="66febfce79aff9411a07c17290a0fa0fc95f1cc3" translate="yes" xml:space="preserve">
          <source>By default, browsers will treat all native form controls (&lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;select&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;button&amp;gt;&lt;/code&gt; elements) inside a &lt;code&gt;&amp;lt;fieldset disabled&amp;gt;&lt;/code&gt; as disabled, preventing both keyboard and mouse interactions on them. However, if your form also includes &lt;code&gt;&amp;lt;a ... class=&quot;btn btn-*&quot;&amp;gt;&lt;/code&gt; elements, these will only be given a style of &lt;code&gt;pointer-events: none&lt;/code&gt;. As noted in the section about &lt;a href=&quot;../buttons/index#disabled-state&quot;&gt;disabled state for buttons&lt;/a&gt; (and specifically in the sub-section for anchor elements), this CSS property is not yet standardized and isn&amp;rsquo;t fully supported in Internet Explorer 10, and won&amp;rsquo;t prevent keyboard users from being able to focus or activate these links. So to be safe, use custom JavaScript to disable such links.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f5e2486f254f630f714154642e6e1261f6e033b5" translate="yes" xml:space="preserve">
          <source>By provided &lt;code&gt;children&lt;/code&gt; to the &lt;code&gt;FormCheck&lt;/code&gt; you can forgo the default rendering and handle it yourself. (You can still provide an &lt;code&gt;id&lt;/code&gt; to the &lt;code&gt;FormCheck&lt;/code&gt; or &lt;code&gt;FormGroup&lt;/code&gt; and have it propagate to the label and input).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f21731b2dfdfe44eb164f5feb6cdcd9c48f733bb" translate="yes" xml:space="preserve">
          <source>By providing &lt;code&gt;children&lt;/code&gt; to the &lt;code&gt;FormFile&lt;/code&gt; you can forgo the default rendering and handle it yourself. (You can still provide an &lt;code&gt;id&lt;/code&gt; to the &lt;code&gt;FormFile&lt;/code&gt; and have it propagate to the label and input).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cf520b63275812a1fc128759e498e18554879f72" translate="yes" xml:space="preserve">
          <source>By relying entirely on the Bootstrap stylesheet, React-Bootstrap just works with the thousands of Bootstrap themes you already love.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="194e13da720a1f025685e5d677eba8a1aff3860a" translate="yes" xml:space="preserve">
          <source>CSS</source>
          <target state="translated">CSS</target>
        </trans-unit>
        <trans-unit id="5fb9d0779f9b784d8dc7120e3d0ba3e212464b2a" translate="yes" xml:space="preserve">
          <source>Callback fired after the Modal finishes transitioning in</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2908a3a723e67981164e77a0e538071bb78b14fc" translate="yes" xml:space="preserve">
          <source>Callback fired after the Modal finishes transitioning out</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="05b7963daaa4c81cbb75559aa79ceeeee7bc94db" translate="yes" xml:space="preserve">
          <source>Callback fired after the Overlay finishes transitioning in</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ca6fb824627f5c02baa87bb08d042961c3817839" translate="yes" xml:space="preserve">
          <source>Callback fired after the Overlay finishes transitioning out</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5a0b85d7b5d8ea2e0e3e0224a17a95e4474e550c" translate="yes" xml:space="preserve">
          <source>Callback fired after the component has collapsed</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8bb20cafc39198bd0458fd1201d5d779ba5d1adb" translate="yes" xml:space="preserve">
          <source>Callback fired after the component has expanded</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0473c86a19ff1b151c082b0c915533ea7c38fd77" translate="yes" xml:space="preserve">
          <source>Callback fired after the component has faded out</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3f7a0db1a4731378ed3ce6ef5c15917770e6292e" translate="yes" xml:space="preserve">
          <source>Callback fired after the component starts to collapse</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ddcbe884ed4ae847c8dd04153767703e70252976" translate="yes" xml:space="preserve">
          <source>Callback fired after the component starts to expand</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="371b271c1f26afefab2b691aa82c8209d0f81db9" translate="yes" xml:space="preserve">
          <source>Callback fired after the component starts to fade in</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c8313ad33d2c269201490519613060f3cc63a9a2" translate="yes" xml:space="preserve">
          <source>Callback fired after the component starts to fade out</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aeaebaf7fc123ac4a89b56707df27de0fab184a7" translate="yes" xml:space="preserve">
          <source>Callback fired after the has component faded in</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9d6f6b7bf9ace536a02f9ac86bdbcd67fa780414" translate="yes" xml:space="preserve">
          <source>Callback fired as the Modal begins to transition in</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cd86ba65f6952781c1fce68c2c703cbc7835c7f9" translate="yes" xml:space="preserve">
          <source>Callback fired as the Modal begins to transition out</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="00b1ca234464a99f22247efa250d128c913f7217" translate="yes" xml:space="preserve">
          <source>Callback fired as the Overlay begins to transition in</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="169b64951a1e7b5c7c9df698bdfbd57fccd4e1dd" translate="yes" xml:space="preserve">
          <source>Callback fired as the Overlay begins to transition out</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b9ccab1f01d3e32f40dfce2ffdb9142c925059e0" translate="yes" xml:space="preserve">
          <source>Callback fired before the Modal transitions in</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="336d636ecba15c6091db42a295c299f8fb1f17c7" translate="yes" xml:space="preserve">
          <source>Callback fired before the Overlay transitions in</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="df6259d0a4967e5b9cf8514ae235ade227d73287" translate="yes" xml:space="preserve">
          <source>Callback fired before the component collapses</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fc815b9c1078ea21ddc9cf4089109c3b32f8f0a5" translate="yes" xml:space="preserve">
          <source>Callback fired before the component expands</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8cc2ce4cf6dd81a986c3eb83b7ed4c96edbb9156" translate="yes" xml:space="preserve">
          <source>Callback fired before the component fades in</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d32cd9ea8ce502f841824e4d84b55360789cb90b" translate="yes" xml:space="preserve">
          <source>Callback fired before the component fades out</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="11cba20fb6fcdf94bfb3f83dc66816c42978fd43" translate="yes" xml:space="preserve">
          <source>Callback fired right before the Modal transitions out</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b32f9e8f1f834a481d798657f442943e41bed49f" translate="yes" xml:space="preserve">
          <source>Callback fired right before the Overlay transitions out</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a359e7de4e79b358b6c1f76f7c01951dd9076a41" translate="yes" xml:space="preserve">
          <source>Callback fired when a Tab is selected.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="76f0e2e1045d83cc3541c97d16bbefe52afc97ab" translate="yes" xml:space="preserve">
          <source>Callback fired when a button is pressed, depending on whether the &lt;code&gt;type&lt;/code&gt; is &lt;code&gt;'radio'&lt;/code&gt; or &lt;code&gt;'checkbox'&lt;/code&gt;, &lt;code&gt;onChange&lt;/code&gt; will be called with the value or array of active values</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6f7e5dbd354789e9c7f43f71712f1e001aef0047" translate="yes" xml:space="preserve">
          <source>Callback fired when a slide transition ends.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c7f7741283959f993b41a125928a8ad9baacef68" translate="yes" xml:space="preserve">
          <source>Callback fired when a slide transition starts.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="45a841748fa1e418cfa915be6e1b288a92e9c543" translate="yes" xml:space="preserve">
          <source>Callback fired when alert is closed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d33b86277dc85981463eb50d96a374162770fe42" translate="yes" xml:space="preserve">
          <source>Callback fired when the active item changes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3649e73f9c9acb51f01debac4cc4865508a55f96" translate="yes" xml:space="preserve">
          <source>Callback fired when the menu item is clicked.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d6b05a980abaeaac219792f5c13dd5da11355033" translate="yes" xml:space="preserve">
          <source>Callback fired when the menu item is selected.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4d4ce73b15660f20977ad7efab2283c51bdae008" translate="yes" xml:space="preserve">
          <source>Card</source>
          <target state="translated">Card</target>
        </trans-unit>
        <trans-unit id="9b55fd3ac89d0cc0dcd86de51462c56faf008cd6" translate="yes" xml:space="preserve">
          <source>Card Columns</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fe8f8cae4cf3853d6844889169b59bf5df3d516f" translate="yes" xml:space="preserve">
          <source>Card Deck</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ab73e853eeb3e52fbf51637f49ccf46ae0b3247b" translate="yes" xml:space="preserve">
          <source>Card Groups</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1daa70ca3e270be81f0f2c5c86bc897fcd8f7971" translate="yes" xml:space="preserve">
          <source>Card Styles</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f83b655b3ba916fe19a31416e6ef987408907da1" translate="yes" xml:space="preserve">
          <source>Card layout</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="07cc5f5e1dd68c1d72edf2f4cc1143a5dcdcc026" translate="yes" xml:space="preserve">
          <source>Card.Body</source>
          <target state="translated">Card.Body</target>
        </trans-unit>
        <trans-unit id="30739d8c6e772a8e1776dc286bbd149a406fdc94" translate="yes" xml:space="preserve">
          <source>Card.Img</source>
          <target state="translated">Card.Img</target>
        </trans-unit>
        <trans-unit id="892039c92480b41745ec9662d9088639d880c3f2" translate="yes" xml:space="preserve">
          <source>Card.ImgOverlay</source>
          <target state="translated">Card.ImgOverlay</target>
        </trans-unit>
        <trans-unit id="1372a40d32048fa7864d50f7b365ac1ad3a776e3" translate="yes" xml:space="preserve">
          <source>CardColumns</source>
          <target state="translated">CardColumns</target>
        </trans-unit>
        <trans-unit id="5699d3e71d787f12a15eafd10d9ece3af7467b2d" translate="yes" xml:space="preserve">
          <source>CardDeck</source>
          <target state="translated">CardDeck</target>
        </trans-unit>
        <trans-unit id="e273fd4c27436a1177b401ec14dcbf73844b0311" translate="yes" xml:space="preserve">
          <source>CardGroup</source>
          <target state="translated">CardGroup</target>
        </trans-unit>
        <trans-unit id="0f830bc25e52f96121b00a67378be1abeaa3f274" translate="yes" xml:space="preserve">
          <source>Cards</source>
          <target state="translated">Cards</target>
        </trans-unit>
        <trans-unit id="9ae567206c892dad59367b38c3595b1fb0a7c171" translate="yes" xml:space="preserve">
          <source>Cards include a few options for working with images. Choose from appending &amp;ldquo;image caps&amp;rdquo; at either end of a card, overlaying images with card content, or simply embedding the image in a card.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f1f842e1950136f97e6b449b2ee8ee2a88c9d214" translate="yes" xml:space="preserve">
          <source>Carousel</source>
          <target state="translated">Carousel</target>
        </trans-unit>
        <trans-unit id="e0e62ce4778833522e8cd53e05286dd64e398b37" translate="yes" xml:space="preserve">
          <source>Carousel.Caption</source>
          <target state="translated">Carousel.Caption</target>
        </trans-unit>
        <trans-unit id="67e147a2bc0ccb762a233fd0bc964c04a8adfbf7" translate="yes" xml:space="preserve">
          <source>Carousel.Item</source>
          <target state="translated">Carousel.Item</target>
        </trans-unit>
        <trans-unit id="a1f84807f6a7bc63dcbf73f84a403b8277082245" translate="yes" xml:space="preserve">
          <source>Carousels</source>
          <target state="translated">Carousels</target>
        </trans-unit>
        <trans-unit id="b33fdd38b6e3e5992f674fb776ad690a38aa4d96" translate="yes" xml:space="preserve">
          <source>Carousels don&amp;rsquo;t automatically normalize slide dimensions. As such, you may need to use additional utilities or custom styles to appropriately size content. While carousels support previous/next controls and indicators, they&amp;rsquo;re not explicitly required. Add and customize as you see fit.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3f042044440a554bea3a31e8a9a7b1f0834d9be9" translate="yes" xml:space="preserve">
          <source>Caveat with anchors</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bc5d80915f1425e5e3bdf0f29532642a9b901589" translate="yes" xml:space="preserve">
          <source>Change the order of content in media objects by modifying the HTML itself, or by adding some custom flexbox CSS to set the &lt;code&gt;order&lt;/code&gt; property (to an integer of your choosing).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a996861c76f104cefe2745666745967f5f06f142" translate="yes" xml:space="preserve">
          <source>Change the underlying component CSS base class name and modifier class names prefix. &lt;strong&gt;This is an escape hatch&lt;/strong&gt; for working with heavily customized bootstrap css.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ee0ddeece347122961a34096fa535455e7c52403" translate="yes" xml:space="preserve">
          <source>Changes the animation style of the spinner.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e52dc46f51cc232cd229d5eb0cc279d036249d88" translate="yes" xml:space="preserve">
          <source>Changes the flow of the list group items from vertical to horizontal. A value of &lt;code&gt;null&lt;/code&gt; (the default) sets it to vertical for all breakpoints; Just including the prop sets it for all breakpoints, while &lt;code&gt;{sm|md|lg|xl}&lt;/code&gt; makes the list group horizontal starting at that breakpoint&amp;rsquo;s &lt;code&gt;min-width&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4970b3faa1ad0c8f94378ab6faca672af6dd051e" translate="yes" xml:space="preserve">
          <source>Changing containers</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="23ace2d0ebff0028d737ef1bd3fa7a48c5bc6aca" translate="yes" xml:space="preserve">
          <source>Changing prefixes is an escape hatch and generally shouldn't be used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="60ef195e89c1e6dcd55a3cf2d60d3485becfe886" translate="yes" xml:space="preserve">
          <source>Chat rooms</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0452cb0eaec0c911f50375a1956f8ec6136e1b27" translate="yes" xml:space="preserve">
          <source>Checkbox / Radio</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="37953e6bf70cdf42e9c346602872f3e98802e08e" translate="yes" xml:space="preserve">
          <source>Checkbox and Radio</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7cb38c3adffe70a105337ee87a172f6de16123f4" translate="yes" xml:space="preserve">
          <source>Checkboxes and Radios</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="99cfab1677c09acb6724cfeb5e5952fb194ef237" translate="yes" xml:space="preserve">
          <source>Checkboxes and radios</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7d409c4cb3632896593ad6939bcce63d6ca23bba" translate="yes" xml:space="preserve">
          <source>Child elements (only allows elements of type )</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="55215015089d887fd6a7e67d74e94274a9c90a03" translate="yes" xml:space="preserve">
          <source>Children prop should only contain a single child, and is enforced as such</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4263b68b284df1c08db292e1ce33646672a58953" translate="yes" xml:space="preserve">
          <source>Close the modal when escape key is pressed</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3e44ce8c4c7707f647efeae28819c47004c4c13d" translate="yes" xml:space="preserve">
          <source>Col</source>
          <target state="translated">Col</target>
        </trans-unit>
        <trans-unit id="9cf188d3a6779d63b36b10275b0228ae22ec97d6" translate="yes" xml:space="preserve">
          <source>Collapse</source>
          <target state="translated">Collapse</target>
        </trans-unit>
        <trans-unit id="d330b9f3360c20ab3fd22f417f68161108f476e5" translate="yes" xml:space="preserve">
          <source>Color schemes</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7b4c01ece88090cf379e40677cb200a846c228a9" translate="yes" xml:space="preserve">
          <source>Column sizing</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="39e7514272b759d4bd08da32f98b93269c08ff32" translate="yes" xml:space="preserve">
          <source>Combine sets of &lt;code&gt;&amp;lt;ButtonGroup&amp;gt;&lt;/code&gt;s into a &lt;code&gt;&amp;lt;ButtonToolbar&amp;gt;&lt;/code&gt; for more complex components.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="70f2e48c8fd9c75f0244761b4d04b8ef3e75648b" translate="yes" xml:space="preserve">
          <source>Component size variations.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f597f4a49eb7489b52350d29cbcebef3ab034fe3" translate="yes" xml:space="preserve">
          <source>Component visual or contextual style variants.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="feaa414115643d958582709ff488a141259a237c" translate="yes" xml:space="preserve">
          <source>Consolidated into a single component. Component's name is &lt;code&gt;FormCheck&lt;/code&gt; (also exported on &lt;code&gt;Form&lt;/code&gt; as &lt;code&gt;Form.Check&lt;/code&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e6443af99d2f470f50affd5057bf48db2d09dae4" translate="yes" xml:space="preserve">
          <source>Container</source>
          <target state="translated">Container</target>
        </trans-unit>
        <trans-unit id="e040a458f46532a90ec69fa0b4bfc33ba151c98b" translate="yes" xml:space="preserve">
          <source>Containers</source>
          <target state="translated">Containers</target>
        </trans-unit>
        <trans-unit id="ff3d1732e27ec6e11f8eedafb9030b92e6349881" translate="yes" xml:space="preserve">
          <source>Containers provide a means to center and horizontally pad your site&amp;rsquo;s contents. Use &lt;code&gt;Container&lt;/code&gt; for a responsive pixel width.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="20018f674f071f0d5155f902c149dd46a2550788" translate="yes" xml:space="preserve">
          <source>Content types</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c86d5e9c54261669f96fecc16a3f47e52624a29e" translate="yes" xml:space="preserve">
          <source>Contextual alternatives</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="efc21d80aa54be100ea1897ad506641353ee533b" translate="yes" xml:space="preserve">
          <source>Contextual classes</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0f154936ebd731672f3f2a0ef062f86f21d318f4" translate="yes" xml:space="preserve">
          <source>Contextual variations</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a60a223c98b2c36522f0b7f89f57ae14e144678a" translate="yes" xml:space="preserve">
          <source>Contributors</source>
          <target state="translated">Contributors</target>
        </trans-unit>
        <trans-unit id="affe9b7bc76a9bc51faeed3685538c63e8d9ad62" translate="yes" xml:space="preserve">
          <source>Control the rendering of the DropdownMenu. All non-menu props (listed here) are passed through to the &lt;code&gt;as&lt;/code&gt; Component.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="97685510acde7c9a29789293a89c38a9aee5520b" translate="yes" xml:space="preserve">
          <source>Control the size of buttons and form elements from the top-level.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c531fa90fe48974c47daf92597e244093285b5bf" translate="yes" xml:space="preserve">
          <source>ControlLabel</source>
          <target state="translated">ControlLabel</target>
        </trans-unit>
        <trans-unit id="3040122209570156baf48fd7cbda4da342dceb0c" translate="yes" xml:space="preserve">
          <source>Controlled</source>
          <target state="translated">Controlled</target>
        </trans-unit>
        <trans-unit id="7f870854a1f0a28f0307a88f1b589de1bb54246b" translate="yes" xml:space="preserve">
          <source>Controls &lt;b&gt;only appear inline in viewports that are at least 576px wide&lt;/b&gt; to account for narrow viewports on mobile devices.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="02c503a55bfb35fc913877ab516bfebbd4c5979e" translate="yes" xml:space="preserve">
          <source>Controls and input groups receive &lt;code&gt;width: auto&lt;/code&gt; to override the Bootstrap default &lt;code&gt;width: 100%&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="200df4d9f23c691b578226cd1ee91a9dc21d38a2" translate="yes" xml:space="preserve">
          <source>Controls are &lt;code&gt;display: flex&lt;/code&gt;, collapsing any HTML white space and allowing you to provide alignment control with spacing and utilities.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9317bef9af525bcfb90232f508b98e519f1d0893" translate="yes" xml:space="preserve">
          <source>Controls the current visible slide</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="88d2b532698a6d0199748e485d23e2a47f735ed6" translate="yes" xml:space="preserve">
          <source>Controls the focus behavior for when the Dropdown is opened. Set to &lt;code&gt;true&lt;/code&gt; to always focus the first menu item, &lt;code&gt;keyboard&lt;/code&gt; to focus only when navigating via the keyboard, or &lt;code&gt;false&lt;/code&gt; to disable completely</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="67f3fe05616e9f96f49ce84d93ee55d74ea9b4e4" translate="yes" xml:space="preserve">
          <source>Controls the visibility of the Dropdown menu</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="20d6a2fa84971fe0d8d09a3ffc82f902238b63ba" translate="yes" xml:space="preserve">
          <source>Controls the visiblity of the navbar body</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="282eda334e22898f679a1a0c8ecffe834fba20cd" translate="yes" xml:space="preserve">
          <source>Controls the visual state of the Alert.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="26909410a99574e1b89cf92381d2188fb6810d8a" translate="yes" xml:space="preserve">
          <source>Create a fixed navbar along the top or bottom of the screen, that scrolls with the page. A convenience prop for the &lt;code&gt;fixed-*&lt;/code&gt; positioning classes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a73cd5b84cf1aa5fc0378de61fb90754d0b8d523" translate="yes" xml:space="preserve">
          <source>Create a set of NavItems each with an &lt;code&gt;eventKey&lt;/code&gt; corresponding to the eventKey of a &lt;code&gt;TabPane&lt;/code&gt;. Wrap the whole thing in a &lt;code&gt;TabContainer&lt;/code&gt; and you have fully functioning custom tabs component. Check out the below example making use of the grid system and pills.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0f868422f459139ed3a68f58bd15bacfd9b20000" translate="yes" xml:space="preserve">
          <source>Create block level buttons&amp;mdash;those that span the full width of a parent&amp;mdash;by adding &lt;code&gt;block&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5d37da6bcbc69cc5b33355cdccdcc1b98992b964" translate="yes" xml:space="preserve">
          <source>Create dynamic tabbed interfaces, as described in the &lt;a href=&quot;https://www.w3.org/TR/wai-aria-practices/#tabpanel&quot;&gt;&lt;abbr&gt;WAI&lt;/abbr&gt; &lt;abbr&gt;ARIA&lt;/abbr&gt; Authoring Practices&lt;/a&gt;. &lt;code&gt;Tabs&lt;/code&gt; is a higher-level component for quickly creating a &lt;code&gt;Nav&lt;/code&gt; matched with a set of &lt;code&gt;TabPane&lt;/code&gt;s.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="51b375adacc1bb9dc95dd9983a7b6e62c93ddccf" translate="yes" xml:space="preserve">
          <source>Create lists of content in a card with a flush list group.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f69eea99dcabf76ad2c30c78f8a78e8781c71891" translate="yes" xml:space="preserve">
          <source>Create stacked navs by changing the flex item direction with the &lt;code&gt;.flex-column&lt;/code&gt; class, or your own css. You can even use the responsive versions to stack in some viewports but not others (e.g. &lt;code&gt;.flex-sm-column&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b2d65fbbd11e81b901f08688d606777d9b4fed32" translate="yes" xml:space="preserve">
          <source>Creating an Overlay</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c6b74000c4863d7dc00ca3333f0274a2ee5b837f" translate="yes" xml:space="preserve">
          <source>Cross fade slides instead of the default slide animation</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f5e9c47e144b4bc17523b7ea704257c9dd3450ae" translate="yes" xml:space="preserve">
          <source>Cross-browser compatibility</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1c06efed5e0e8d7af8ed0a6fe87926b679e08ae7" translate="yes" xml:space="preserve">
          <source>Current value of progress</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4d54fe8fd46c56a30159b1fd79caa79965bea66b" translate="yes" xml:space="preserve">
          <source>Current version: 1.5.0</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="83953b25f5c3049196c5e03b92d3c2d097e0d1b2" translate="yes" xml:space="preserve">
          <source>Custom Dropdown Components</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9fe1ee4768776c9a6069f1dcd63030d3f79df5c4" translate="yes" xml:space="preserve">
          <source>Custom Tab Layout</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5bf11e19c51d2a0a7c58612f23943d5032a92d21" translate="yes" xml:space="preserve">
          <source>Custom Toggle</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="de827e66cfed2d723474608dc19de5f9a356fad6" translate="yes" xml:space="preserve">
          <source>Custom Toggle with Expansion Awareness</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="264b1e11f21d3bc4a8ffc3c05bf4f5931ecb6ab3" translate="yes" xml:space="preserve">
          <source>Custom button styles for actions in forms, dialogs, and more with support for multiple sizes, states, and more.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="493bc408f4f1165cfcce700f0f229020692b7a01" translate="yes" xml:space="preserve">
          <source>Custom checkbox and radio styles are achieved with a resourceful use of the &lt;code&gt;:checked&lt;/code&gt; selector and &lt;code&gt;:after&lt;/code&gt; pseudo elements, but are Structurally similar to the default &lt;code&gt;FormCheck&lt;/code&gt;. By default the checked and indeterminate icons use embedded svg icons from &lt;a href=&quot;https://useiconic.com/open&quot;&gt;Open Iconic&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="66a3bef192d801a366077433bb5b29d7bdb7ae5a" translate="yes" xml:space="preserve">
          <source>Custom form controls and selects are also supported.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0a616fac015ef86d7956fdeec6efd828dd3c107c" translate="yes" xml:space="preserve">
          <source>Custom forms</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ebe7831581447b030cf17ce91c0e13df8d00b718" translate="yes" xml:space="preserve">
          <source>Custom variants and sizes should follow the pattern of the default bootstrap variants, and define css classes matching: &lt;code&gt;component-*&lt;/code&gt;. React bootstrap builds the component &lt;code&gt;classNames&lt;/code&gt; in a consistent way that you can rely on. For instance this custom Button.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d7f0ac9e007291a6ccc21d036f4711505ad9d0b1" translate="yes" xml:space="preserve">
          <source>Customization</source>
          <target state="translated">Customization</target>
        </trans-unit>
        <trans-unit id="aca428117ee8be83b63828350a256c689e7d720d" translate="yes" xml:space="preserve">
          <source>Customize Bootstrap</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d4909a35308b9708e4373b6a61150ae4db48f64a" translate="yes" xml:space="preserve">
          <source>Customizing FormCheck rendering</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0a9d44aae946a1d0ed01b48ae7b2ed114446e05c" translate="yes" xml:space="preserve">
          <source>Customizing FormFile rendering</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="585f102a8500aa72f04b3c67fe35741e3696bbac" translate="yes" xml:space="preserve">
          <source>Customizing trigger behavior</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2b3c0325a7e37da56a7ca45754ae0665d60a2d27" translate="yes" xml:space="preserve">
          <source>Dark Table</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="808d7dca8a74d84af27a2d6602c3d786de45fe1e" translate="yes" xml:space="preserve">
          <source>Default</source>
          <target state="translated">Default</target>
        </trans-unit>
        <trans-unit id="33640c1cc954f543deab34a1adf146403e417d45" translate="yes" xml:space="preserve">
          <source>Default (stacked)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b89291a606bb1706df8bfd482fedacbb7e024ae6" translate="yes" xml:space="preserve">
          <source>Default progress bar.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e0e58056d10bf26567010f118e5555f109e8830c" translate="yes" xml:space="preserve">
          <source>Defines HTML button type attribute.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2414df0ed5fae95cb3319300a241d17116a56a6f" translate="yes" xml:space="preserve">
          <source>Defines image position inside the card.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2b4035987766c8f9234b74745d610e5b45afb739" translate="yes" xml:space="preserve">
          <source>Delay hiding the toast (ms)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="55f8ebc805e65b5b71ddafdae390e3be2bcd69af" translate="yes" xml:space="preserve">
          <source>Description</source>
          <target state="translated">Description</target>
        </trans-unit>
        <trans-unit id="1546c0bd6a5aa846da05055aa33e6c0ec4789e1c" translate="yes" xml:space="preserve">
          <source>Determines the direction and location of the Menu in relation to it's Toggle.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ea5c377cc6bf85a2837806b08fbc48aa4d2d2dd9" translate="yes" xml:space="preserve">
          <source>Disable the menu item, making it unselectable.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="402a04eb30d5fc2d47ef255a4923622881fa69c1" translate="yes" xml:space="preserve">
          <source>Disabled elements</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="78c6018d1bf19906b96f16d35e6821365ee1f73f" translate="yes" xml:space="preserve">
          <source>Disabled forms</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c5c6cc6a9b45c61bd67edd0b1039f122f2c298ac" translate="yes" xml:space="preserve">
          <source>Disabled items</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5f3e361039102b664cd571c88c200e55a513d04e" translate="yes" xml:space="preserve">
          <source>Disabled state</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bc7e87c06af33ed66dba26b38d8648845b170dcc" translate="yes" xml:space="preserve">
          <source>Disables both Buttons</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9dd625a15ab5dd1afe90527d5d2bb5eaadf9ca69" translate="yes" xml:space="preserve">
          <source>Disables the Button, preventing mouse events, even if the underlying component is an &lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt; element</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f2879cbb1ce239d53658746527daceb2d4136b06" translate="yes" xml:space="preserve">
          <source>Disables the PageItem</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d9d766f0e78836926113fdfe7c1d823a2532093f" translate="yes" xml:space="preserve">
          <source>Disables the control.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="637596322f19a5843712e5455003dfefb249cd14" translate="yes" xml:space="preserve">
          <source>Disables the toggle NavLink</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9643f749610880698b2422fb71b8c92f991bc171" translate="yes" xml:space="preserve">
          <source>Discuss questions in the &lt;code&gt;#react-bootstrap&lt;/code&gt; channel on the &lt;a href=&quot;https://discord.gg/AKfs9vpvRW&quot;&gt;Reactiflux Discord&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f16dedd40cc2790ba99703a18df165e4f043f496" translate="yes" xml:space="preserve">
          <source>Dismissible</source>
          <target state="translated">Dismissible</target>
        </trans-unit>
        <trans-unit id="63920500adae831499ae5700cd35e5e1507f8c41" translate="yes" xml:space="preserve">
          <source>Dismissing</source>
          <target state="translated">Dismissing</target>
        </trans-unit>
        <trans-unit id="fd5308608a74adf620af3c0deaf9a6f44f7ba5c9" translate="yes" xml:space="preserve">
          <source>Display as a button toggle group.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a7698a78959c651ff354cea833d622a5f153ff47" translate="yes" xml:space="preserve">
          <source>Display feedback as a tooltip.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="13c96d0b3444e1f6f6a6f2589ba5a7950a7301c1" translate="yes" xml:space="preserve">
          <source>Display the series of labels, form controls, and buttons on a single horizontal row</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a94e70495e58b047e9bce80abd4a3e7bb7319f79" translate="yes" xml:space="preserve">
          <source>Displaying related images and text with the Figure component.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="57a6e485cec0dae34aa59ea74ee90a9f7f78fbdb" translate="yes" xml:space="preserve">
          <source>Drop directions</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fc2d12b944acebe30dd287a5a171feeca740c24d" translate="yes" xml:space="preserve">
          <source>Dropdown</source>
          <target state="translated">Dropdown</target>
        </trans-unit>
        <trans-unit id="442586ca0ca2c09fb97a8620a3c724d165456830" translate="yes" xml:space="preserve">
          <source>Dropdown items</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="51f63ff0d305c52d1fd83fd6ce29c118357cad88" translate="yes" xml:space="preserve">
          <source>Dropdown.Divider</source>
          <target state="translated">Dropdown.Divider</target>
        </trans-unit>
        <trans-unit id="ceb80cace39c746f2b8111964388151f0dba2821" translate="yes" xml:space="preserve">
          <source>Dropdown.Header</source>
          <target state="translated">Dropdown.Header</target>
        </trans-unit>
        <trans-unit id="650cc3b62a12453b9c841b1ddf41d5566647851e" translate="yes" xml:space="preserve">
          <source>Dropdown.Item</source>
          <target state="translated">Dropdown.Item</target>
        </trans-unit>
        <trans-unit id="61e2e94f8b421c34c09678ce0a228a579cd62fd0" translate="yes" xml:space="preserve">
          <source>Dropdown.Menu</source>
          <target state="translated">Dropdown.Menu</target>
        </trans-unit>
        <trans-unit id="06b44b390549b33fe865e911ee9b45490a0f8612" translate="yes" xml:space="preserve">
          <source>Dropdown.Toggle</source>
          <target state="translated">Dropdown.Toggle</target>
        </trans-unit>
        <trans-unit id="64de6813355cf36eced9be22ff3946aab3cc50df" translate="yes" xml:space="preserve">
          <source>DropdownButton</source>
          <target state="translated">DropdownButton</target>
        </trans-unit>
        <trans-unit id="8f21793af840a0e59ef3d2b46e23a1d1871ab3e5" translate="yes" xml:space="preserve">
          <source>DropdownButton will forward Button props to the underlying Toggle component</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e692024a3651878b09eaca6f238cad6043a32a61" translate="yes" xml:space="preserve">
          <source>DropdownMenu is not rendered until opened</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8cc8b023c02824db6fbbeab06a61b65db57b5e75" translate="yes" xml:space="preserve">
          <source>Dropdowns</source>
          <target state="translated">Dropdowns</target>
        </trans-unit>
        <trans-unit id="81d4a32e654504cd4bcdc4123685421a2171e61c" translate="yes" xml:space="preserve">
          <source>Dropdowns are toggleable, contextual overlays for displaying lists of links and more. Like overlays, Dropdowns are built using a third-party library &lt;a href=&quot;https://popper.js.org/&quot;&gt;Popper.js&lt;/a&gt;, which provides dynamic positioning and viewport detection.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="43717d9ec594553c30b5af0fb0506e13c18ebe2b" translate="yes" xml:space="preserve">
          <source>Dropdowns work with buttons of all sizes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5e92eb1d5390c2aa1faeff809f5ac7843cf4a2b8" translate="yes" xml:space="preserve">
          <source>Dropdowns?</source>
          <target state="translated">Dropdowns?</target>
        </trans-unit>
        <trans-unit id="133ecfd75427eb1fc2eeb779b1c5e15fee523ede" translate="yes" xml:space="preserve">
          <source>Duration of the collapse animation in milliseconds, to ensure that finishing callbacks are fired even if the original browser transition end events are canceled</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b1e148e8e5f94fb630603882291ddf7c6b84cb47" translate="yes" xml:space="preserve">
          <source>Duration of the fade animation in milliseconds, to ensure that finishing callbacks are fired even if the original browser transition end events are canceled</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="463a71bc01079f8b7a7abff04424c50a93e6d109" translate="yes" xml:space="preserve">
          <source>Dynamic tabbed interfaces</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="04129dcf6272dadf73c5437231ab2a262d6ba22d" translate="yes" xml:space="preserve">
          <source>Dynamic tabbed interfaces should not contain dropdown menus, as this causes both usability and accessibility issues. From a usability perspective, the fact that the currently displayed tab&amp;rsquo;s trigger element is not immediately visible (as it&amp;rsquo;s inside the closed dropdown menu) can cause confusion. From an accessibility point of view, there is currently no sensible way to map this sort of construct to a standard WAI ARIA pattern, meaning that it cannot be easily made understandable to users of assistive technologies.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="adacf842777f85831215038a490b20a0df0098e1" translate="yes" xml:space="preserve">
          <source>Each component is implemented with accessibility in mind. The result is a set of accessible-by-default components, over what is possible from plain Bootstrap.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dbf95c6d5cc3a341a3349755d9951ec21799f6a9" translate="yes" xml:space="preserve">
          <source>Each of the Card components in the Accordion can have their entire header clickable, by setting the AccordionToggle's underlying component to be a CardHeader component.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bcd93eef301b9576862008b7fe2d555d8ef5455b" translate="yes" xml:space="preserve">
          <source>Elements with the &lt;code&gt;disabled&lt;/code&gt; attribute aren&amp;rsquo;t interactive, meaning users cannot hover or click them to trigger a popover (or tooltip). As a workaround, you&amp;rsquo;ll want to trigger the overlay from a wrapper &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; or &lt;code&gt;&amp;lt;span&amp;gt;&lt;/code&gt; and override the &lt;code&gt;pointer-events&lt;/code&gt; on the disabled element.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="39d0513e49719b5500f4e89ad42a733d18c8edf5" translate="yes" xml:space="preserve">
          <source>Enable a hover state on table rows within a &lt;code&gt;&amp;lt;tbody&amp;gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1d4294a0061f89b36a090a4c7c4dc38338d1974b" translate="yes" xml:space="preserve">
          <source>Enables animation on the Carousel as it transitions between slides.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="37bc19822f9f6260eeb201b4380facfc0c3ac2ae" translate="yes" xml:space="preserve">
          <source>Encapsulating animations into components has the added benefit of making them more broadly useful, as well as portable for using in other libraries. All React-bootstrap components that can be animated, support pluggable &lt;code&gt;&amp;lt;Transition&amp;gt;&lt;/code&gt; components.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1bd56266a200170f62a0b9b2353966892822fe0d" translate="yes" xml:space="preserve">
          <source>Entire Header Clickable</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0f01ed56a1e32a05e5ef96e4d779f34784af9a96" translate="yes" xml:space="preserve">
          <source>Example</source>
          <target state="translated">Example</target>
        </trans-unit>
        <trans-unit id="eb01bf04c9a0e8a71c45816513df424f1c7ffedb" translate="yes" xml:space="preserve">
          <source>Examples</source>
          <target state="translated">Examples</target>
        </trans-unit>
        <trans-unit id="4d57eab2982917a09762907ac77e408c3ca66fc9" translate="yes" xml:space="preserve">
          <source>External Links</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="90f0501c38ce299f74533d128520a5dc74515f02" translate="yes" xml:space="preserve">
          <source>Extra props are passed to the underlying Dropdown component, not the Toggle.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5298d08bb7ae7d01f4efcdbb94ff03fc487fd11c" translate="yes" xml:space="preserve">
          <source>Fade</source>
          <target state="translated">Fade</target>
        </trans-unit>
        <trans-unit id="6c6ecde537dd873ae10880d2795ed797549cd95e" translate="yes" xml:space="preserve">
          <source>Fancy larger or smaller buttons? Add &lt;code&gt;size=&quot;lg&quot;&lt;/code&gt;, &lt;code&gt;size=&quot;sm&quot;&lt;/code&gt; for additional sizes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="49adfb5485aa3072f4ed62963d0b4febf440af94" translate="yes" xml:space="preserve">
          <source>Feel free to mix input groups with button groups in your toolbars. Similar to the example above, you&amp;rsquo;ll likely need some utilities though to space things properly.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1f20e66b17a6eb7c2baf1ab68337d91eaf6f4f80" translate="yes" xml:space="preserve">
          <source>Figure</source>
          <target state="translated">Figure</target>
        </trans-unit>
        <trans-unit id="0dcd079a524386ba90ed2a251a195592ea5bd756" translate="yes" xml:space="preserve">
          <source>FigureCaption</source>
          <target state="translated">FigureCaption</target>
        </trans-unit>
        <trans-unit id="df6d83b8d67928d21ca2fc4b221b268df5229140" translate="yes" xml:space="preserve">
          <source>FigureImage</source>
          <target state="translated">FigureImage</target>
        </trans-unit>
        <trans-unit id="55c78353fbcd604dd46a8989b3a9dc11fc982d4b" translate="yes" xml:space="preserve">
          <source>Figures</source>
          <target state="translated">Figures</target>
        </trans-unit>
        <trans-unit id="2c3cafa4db3f3e1e51b3dff4303502dbe42b7a89" translate="yes" xml:space="preserve">
          <source>File</source>
          <target state="translated">File</target>
        </trans-unit>
        <trans-unit id="61f5dd446cc17debdb674cfdda8a804be36d7b9a" translate="yes" xml:space="preserve">
          <source>Fill and justify</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="45ad3b8fd41619cb069e6c08f486c1d7b0b3f126" translate="yes" xml:space="preserve">
          <source>Fixed bottom</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d21e45b3aeef90a7849020fdfeee04f847d7ffc0" translate="yes" xml:space="preserve">
          <source>Fixed top</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8bc9b7abbb676300656203a17863a0f0b8a2c2bf" translate="yes" xml:space="preserve">
          <source>Fluid</source>
          <target state="translated">Fluid</target>
        </trans-unit>
        <trans-unit id="ab3182305d605d3a5fe49819948b606865acc2af" translate="yes" xml:space="preserve">
          <source>Fluid Container</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7c936d7c5a91dca9198671c84f6c29001e1635e0" translate="yes" xml:space="preserve">
          <source>Flush</source>
          <target state="translated">Flush</target>
        </trans-unit>
        <trans-unit id="61f45cd9388f2f02490c474e1b2e52ac8e1a17b7" translate="yes" xml:space="preserve">
          <source>For a lighter touch, Buttons also come in &lt;code&gt;outline-*&lt;/code&gt; variants with no background color.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="95cc78bfe8571bb47a311233d587d39b77259059" translate="yes" xml:space="preserve">
          <source>For a nicer experience with checked state management use the &lt;code&gt;&amp;lt;ToggleButtonGroup&amp;gt;&lt;/code&gt; instead of a &lt;code&gt;&amp;lt;ButtonGroup toggle&amp;gt;&lt;/code&gt; component. The group behaves as a form component, where the &lt;code&gt;value&lt;/code&gt; is an array of the selected &lt;code&gt;value&lt;/code&gt;s for a named checkbox group or the single toggled &lt;code&gt;value&lt;/code&gt; in a similarly named radio group.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c594765fe5924e5faa21b14f5f505c7b28f33941" translate="yes" xml:space="preserve">
          <source>For basic closing behavior after all &lt;code&gt;&amp;lt;Nav&amp;gt;&lt;/code&gt; descendant onSelect events in mobile viewports, try using collapseOnSelect.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2da78cb163ce914f84fa3f26cc95ca5159f4a465" translate="yes" xml:space="preserve">
          <source>For building more complex pagination UI, there are few convenient sub-components for adding &quot;First&quot;, &quot;Previous&quot;, &quot;Next&quot;, and &quot;Last&quot; buttons, as well as an &lt;code&gt;Ellipsis&lt;/code&gt; item for indicating previous or continuing results.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="597a4762a96ca076df9f9cfb6e998f7d8a13f89b" translate="yes" xml:space="preserve">
          <source>For even more customization and cross browser consistency, use our completely custom form elements to replace the browser defaults. They&amp;rsquo;re built on top of semantic and accessible markup, so they&amp;rsquo;re solid replacements for any default form control.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1b07fc9fcca1a3c8a13312c6870b0de7ec98b043" translate="yes" xml:space="preserve">
          <source>For file inputs, use &lt;code&gt;Form.File&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7c11b7be84b2acc5dedc5899e096cd57fc1ec598" translate="yes" xml:space="preserve">
          <source>For links, use the &lt;code&gt;&amp;lt;Alert.Link&amp;gt;&lt;/code&gt; component to provide matching colored links within any alert.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ad78d8ea2e562454fe57cc05e894dfe47028556b" translate="yes" xml:space="preserve">
          <source>For more advanced behaviors &lt;code&gt;&amp;lt;OverlayTrigger&amp;gt;&lt;/code&gt; accepts a function child that passes in the injected &lt;code&gt;ref&lt;/code&gt; and event handlers that correspond to the configured &lt;code&gt;trigger&lt;/code&gt; prop.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6714b07e03cb1973966fbb70a307ec3271026b96" translate="yes" xml:space="preserve">
          <source>For more complex layouts the flexible &lt;code&gt;TabContainer&lt;/code&gt;, &lt;code&gt;TabContent&lt;/code&gt;, and &lt;code&gt;TabPane&lt;/code&gt; components along with any style of &lt;code&gt;Nav&lt;/code&gt; allow you to quickly piece together your own Tabs component with additional markup needed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e85fee2576de520f9d8c5b6459afcabb9b882828" translate="yes" xml:space="preserve">
          <source>For native HTML form validation&amp;ndash;&lt;a href=&quot;https://caniuse.com/#feat=form-validation&quot;&gt;available in all our supported browsers&lt;/a&gt;, the &lt;code&gt;:valid&lt;/code&gt; and &lt;code&gt;:invalid&lt;/code&gt; pseudo selectors are used to apply validation styles as well as display feedback messages.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="698b294002e1a0d4d0424904650afdbed8131c95" translate="yes" xml:space="preserve">
          <source>For offsetting grid columns you can set an &lt;code&gt;offset&lt;/code&gt; value or for a more general layout, use the margin class utilities.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2b75e2983d2abbeedc901071faec46bdc28bf2e1" translate="yes" xml:space="preserve">
          <source>For systems that generate more notifications, consider using a wrapping element so they can easily stack.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d65f0fd83d20a0fb3f999920fc68410cddc14896" translate="yes" xml:space="preserve">
          <source>For textual form controls&amp;mdash;like &lt;code&gt;input&lt;/code&gt;s, &lt;code&gt;select&lt;/code&gt;s, and &lt;code&gt;textarea&lt;/code&gt;s&amp;mdash;use the &lt;code&gt;FormControl&lt;/code&gt; component. FormControl adds some additional styles for general appearance, focus state, sizing, and more.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4bdbfbe9b2f581c9e3800ec371b3579965d0d24e" translate="yes" xml:space="preserve">
          <source>For the &lt;code&gt;range&lt;/code&gt; form control you can pass the &lt;code&gt;custom&lt;/code&gt; prop to get custom styling of the select element. The track (the background) and thumb (the value) are both styled to appear the same across browsers. As only IE and Firefox support &amp;ldquo;filling&amp;rdquo; their track from the left or right of the thumb as a means to visually indicate progress, we do not currently support it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c0f5f253462a6010ff7f371c755b4a7a6e863661" translate="yes" xml:space="preserve">
          <source>For the &lt;code&gt;select&lt;/code&gt; form control you can pass the &lt;code&gt;custom&lt;/code&gt; prop to get custom styling of the select element. Custom styles are limited to the &lt;code&gt;select&lt;/code&gt; initial appearance and cannot modify the &lt;code&gt;option&lt;/code&gt; styling due to browser limitations.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fa2eebb8b9133b1cf23e194e63375d3b7700dc06" translate="yes" xml:space="preserve">
          <source>For the non-textual checkbox and radio controls, &lt;code&gt;FormCheck&lt;/code&gt; provides a single component for both types that adds some additional styling and improved layout.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2c725dbe480a9d335296a94826e259505ad9cb21" translate="yes" xml:space="preserve">
          <source>For this, the Overlay component also injects a a &lt;code&gt;popper&lt;/code&gt; prop with a &lt;code&gt;scheduleUpdate()&lt;/code&gt; method that an overlay component can use to reposition itself.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d6d336e303c717adffa7112ee31f6a14b76f8cf5" translate="yes" xml:space="preserve">
          <source>For those that want to customize everything, you can forgo the included Toggle and Menu components, and create your own. By providing custom components to the &lt;code&gt;as&lt;/code&gt; prop, you can control how each component behaves. Custom toggle and menu components &lt;strong&gt;must&lt;/strong&gt; be able to accept refs.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="601c78fffe3862e569a34efa0084c2fff2c09369" translate="yes" xml:space="preserve">
          <source>Force the contents of your nav to extend the full available width. To proportionately fill the space use &lt;code&gt;fill&lt;/code&gt;. Notice that the nav is the entire width but each nav item is a different size.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="80446347ede53cf9ce56b3d59fda4b5c96dc25c4" translate="yes" xml:space="preserve">
          <source>Form</source>
          <target state="translated">Form</target>
        </trans-unit>
        <trans-unit id="2479e5380d9da4ab9ba17026b83b2589c09f1836" translate="yes" xml:space="preserve">
          <source>Form controls</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="70d75a3591b8757c51cc5bd8e831c6b1a770c0aa" translate="yes" xml:space="preserve">
          <source>Form grid</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7d5f58c6889735ce3fc87fe27f36cc9f49b56e20" translate="yes" xml:space="preserve">
          <source>Form groups</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e857bfe89dc29335c565000faee6b97c06ed039e" translate="yes" xml:space="preserve">
          <source>Form libraries and server-rendered styles</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5d2094819b532b1011803d0ca7f3e57f9f55ff72" translate="yes" xml:space="preserve">
          <source>Form row</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="801c4e7f8407d119a4aa3ced1112193b0e57f2e5" translate="yes" xml:space="preserve">
          <source>Form.Check</source>
          <target state="translated">Form.Check</target>
        </trans-unit>
        <trans-unit id="b7f505d62f14cde1c2c01b57d3c68a530ed5adc5" translate="yes" xml:space="preserve">
          <source>Form.Control</source>
          <target state="translated">Form.Control</target>
        </trans-unit>
        <trans-unit id="1970e322521027a8a8a4ab431ecfa5d3ebad72ee" translate="yes" xml:space="preserve">
          <source>Form.File</source>
          <target state="translated">Form.File</target>
        </trans-unit>
        <trans-unit id="1fbf962ab123d140929e8f1369076f1010195af1" translate="yes" xml:space="preserve">
          <source>Form.Group</source>
          <target state="translated">Form.Group</target>
        </trans-unit>
        <trans-unit id="3aa914db52f2ec2ab711e68e3c0a7233a3f20612" translate="yes" xml:space="preserve">
          <source>Form.Label</source>
          <target state="translated">Form.Label</target>
        </trans-unit>
        <trans-unit id="cf4924a390ab559a3975785a12e8da3fd67e0f86" translate="yes" xml:space="preserve">
          <source>Form.Row</source>
          <target state="translated">Form.Row</target>
        </trans-unit>
        <trans-unit id="40b547f3d964b015c219ba88fdac48bdefe8a4bd" translate="yes" xml:space="preserve">
          <source>Form.Text</source>
          <target state="translated">Form.Text</target>
        </trans-unit>
        <trans-unit id="46a56cd8b9d4756a97094eb9d1fb362fccb23348" translate="yes" xml:space="preserve">
          <source>FormCheck.Input</source>
          <target state="translated">FormCheck.Input</target>
        </trans-unit>
        <trans-unit id="ffcba3857c02276153b6672f2473c1157a34dbb4" translate="yes" xml:space="preserve">
          <source>FormCheck.Label</source>
          <target state="translated">FormCheck.Label</target>
        </trans-unit>
        <trans-unit id="e9ec4230b31c5e05a7d438ca3e588c4f04de9eeb" translate="yes" xml:space="preserve">
          <source>FormControl and FormCheck both apply &lt;code&gt;display: block&lt;/code&gt; with &lt;code&gt;width: 100%&lt;/code&gt; to controls, which means they stack vertically by default. Additional components and props can be used to vary this layout on a per-form basis.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="995168ab6e605ab9e3649e2367e0b2339b28b60f" translate="yes" xml:space="preserve">
          <source>FormControl.Feedback</source>
          <target state="translated">FormControl.Feedback</target>
        </trans-unit>
        <trans-unit id="80a943c52556ee3b1d6e75fea6f8a982a8ad15e9" translate="yes" xml:space="preserve">
          <source>FormFile.Input</source>
          <target state="translated">FormFile.Input</target>
        </trans-unit>
        <trans-unit id="1bc46748e120fe53c15b92f04a5c1a881a6892b1" translate="yes" xml:space="preserve">
          <source>FormFile.Label</source>
          <target state="translated">FormFile.Label</target>
        </trans-unit>
        <trans-unit id="4bec9575721b2739ed1e7c56eb6c8471084fcbcf" translate="yes" xml:space="preserve">
          <source>Forms</source>
          <target state="translated">Forms</target>
        </trans-unit>
        <trans-unit id="1a87ab2a75edb575217c043ce3cbe0c58ff1efe4" translate="yes" xml:space="preserve">
          <source>Fully Collapsed State</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aea1441c4464ae1f2add79c95168ee41d1da4175" translate="yes" xml:space="preserve">
          <source>Function that returns the height or width of the animating DOM node</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3cc887fb95568ee1844ff9002224f01252c42c4d" translate="yes" xml:space="preserve">
          <source>Generally, if you stick to the Bootstrap defined classes and variants, there isn't anything you need to do to use a custom theme with React-Bootstrap. It just works. But we also make coloring outside the lines easy to do.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cf5aefda50ce2bf251c464143961081ed829ad78" translate="yes" xml:space="preserve">
          <source>Get Involved</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="026cccc86780cd75eb4feb70c6b64d77d2afd6ea" translate="yes" xml:space="preserve">
          <source>Get involved with React Bootstrap &lt;a href=&quot;https://github.com/react-bootstrap/react-bootstrap/issues/new&quot;&gt;by opening an issue&lt;/a&gt; or submitting a pull request. See our &lt;a href=&quot;https://github.com/react-bootstrap/react-bootstrap/blob/master/CONTRIBUTING.md&quot;&gt;contributing guidelines&lt;/a&gt; here.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e9a3df261e67430f454166ac9118749dcf53a48c" translate="yes" xml:space="preserve">
          <source>Get to know more about the team maintaining React Bootstrap. Learn a little history of how, why and when the project started and how you can be a part of it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="060f712c74598ce01e86d56802d9344d8ed68bb7" translate="yes" xml:space="preserve">
          <source>Getting help</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bdef09306d75d8eaeca3cd08ab6caaadcec30843" translate="yes" xml:space="preserve">
          <source>GitHub issues</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a9261bd59ece0d911f42e4fc96c182a51ce5fe2f" translate="yes" xml:space="preserve">
          <source>Glyphicon</source>
          <target state="translated">Glyphicon</target>
        </trans-unit>
        <trans-unit id="701c483f813cf119ec80b185a049bcfdc29f9161" translate="yes" xml:space="preserve">
          <source>Grid</source>
          <target state="translated">Grid</target>
        </trans-unit>
        <trans-unit id="845dff0732427e5dbeee219493f6313124863bc6" translate="yes" xml:space="preserve">
          <source>Grid system</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eac014292960e8ee9cf380259a882b875d6528e0" translate="yes" xml:space="preserve">
          <source>Group a series of buttons together on a single line with the button group.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2ca3911a37777992499ef292d0aca078fb8e96f6" translate="yes" xml:space="preserve">
          <source>Group checkboxes or radios on the same horizontal row by adding the &lt;code&gt;inline&lt;/code&gt; prop.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ee246b2467f641147a98d0d5ec72e982bf37539e" translate="yes" xml:space="preserve">
          <source>Groups controls horizontally with other &lt;code&gt;FormCheck&lt;/code&gt;s.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fbf478e93810e9a6740e16fc6a38e56f9b4562b4" translate="yes" xml:space="preserve">
          <source>HTML &lt;code&gt;href&lt;/code&gt; attribute corresponding to &lt;code&gt;a.href&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d287b12248ec73429c5423f061fc47c1462e07a4" translate="yes" xml:space="preserve">
          <source>HTML id attribute, required if no &lt;code&gt;generateChildId&lt;/code&gt; prop is specified.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fd2db7834bf0656872923d914757e9889c51607f" translate="yes" xml:space="preserve">
          <source>HTML size</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a81d9dbf9365dff62bc01105634f58961b5f5df9" translate="yes" xml:space="preserve">
          <source>Handles the input's rounded corners when using form validation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c7aa5de661ef7b09b874149c729ce21e4ae8e40c" translate="yes" xml:space="preserve">
          <source>Have all &lt;code&gt;NavItem&lt;/code&gt;s evenly fill all available width.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b619478f898b99749417d01255111d7e7b25583f" translate="yes" xml:space="preserve">
          <source>Have all &lt;code&gt;NavItem&lt;/code&gt;s proportionately fill all available width.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f10c92319124f007da3cb125f5986c4c388a132f" translate="yes" xml:space="preserve">
          <source>Have the dropdown switch to it's opposite placement when necessary to stay on screen.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1cce63c515481dd7c84da36bec9a0624ec1fef4c" translate="yes" xml:space="preserve">
          <source>Header and Footer</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a98a69f53d4e557a2d2d7805f1932a989d097564" translate="yes" xml:space="preserve">
          <source>Help text</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b77d58ef2796206871bf3185ccfd033cd4ebd97c" translate="yes" xml:space="preserve">
          <source>Help text below inputs can be styled with &lt;code&gt;&amp;lt;Form.Text&amp;gt;&lt;/code&gt;. This component includes &lt;code&gt;display: block&lt;/code&gt; and adds some top margin for easy spacing from the inputs above.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="537363cbb7e989b831f7b613378fc8e1755f41b5" translate="yes" xml:space="preserve">
          <source>Help text should be explicitly associated with the form control it relates to using the &lt;code&gt;aria-describedby&lt;/code&gt; attribute. This will ensure that assistive technologies&amp;mdash;such as screen readers&amp;mdash;will announce this help text when the user focuses or enters the control.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="406c1590205b396c2d109f0ffb7cf6e14013da04" translate="yes" xml:space="preserve">
          <source>Here&amp;rsquo;s what you need to know before getting started with the Navbar:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fdacc5af0464183633c9d75ade3feb86b9bd0cd4" translate="yes" xml:space="preserve">
          <source>Hide's the label visually.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d0d163324a5631150dc086ee83c1bb59be717463" translate="yes" xml:space="preserve">
          <source>Hides the label visually while still allowing it to be read by assistive technologies.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9bf9c5310b0e558eab49a98069b159da576f5840" translate="yes" xml:space="preserve">
          <source>Highlight the menu item as active.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4641c830815bde5dbc8a15e503cab15ea9bf2024" translate="yes" xml:space="preserve">
          <source>Historically dropdown menu contents had to be links, but that&amp;rsquo;s no longer the case with v4. Now you can optionally use &lt;code&gt;&amp;lt;button&amp;gt;&lt;/code&gt; elements in your dropdowns instead of just &lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt;s.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4f57a1ce99e68a7b05c42d0a7ea0070eafabd31c" translate="yes" xml:space="preserve">
          <source>Horizontal</source>
          <target state="translated">Horizontal</target>
        </trans-unit>
        <trans-unit id="2fe558d597b0a7e28c8ec62a0e404f474a9f8477" translate="yes" xml:space="preserve">
          <source>Horizontal form</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="82369fed9023cfec9f1edfa0a04f25bbd8a46e93" translate="yes" xml:space="preserve">
          <source>Horizontal form label sizing</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c5f8787e5eb15399babc56d534a055789d535d80" translate="yes" xml:space="preserve">
          <source>Hover over the links below to see tooltips.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9d6193efd7715994bdbc672e506c8f5b574b03ee" translate="yes" xml:space="preserve">
          <source>How and which Bootstrap styles you include is up to you, but the simplest way is to include the latest styles from the CDN. A little more information about the benefits of using a CDN can be found &lt;a href=&quot;https://www.w3schools.com/bootstrap/bootstrap_get_started.asp&quot;&gt;here&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="19b25e415aa38a75c112eecba9ac3a4448346780" translate="yes" xml:space="preserve">
          <source>If not using the custom prop &lt;code&gt;FormFile.Label&amp;gt;&lt;/code&gt; should be before &lt;code&gt;&amp;lt;FormFile.Input isInvalid /&amp;gt;&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6c6e182bbdad6fd01bdf42f40d4e97f02f63e46e" translate="yes" xml:space="preserve">
          <source>If providing a custom, non DOM, component. the &lt;code&gt;show&lt;/code&gt;, &lt;code&gt;close&lt;/code&gt; and &lt;code&gt;alignRight&lt;/code&gt; props are also injected and should be handled appropriately.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e19546f0dce8333979c607f9fcf528bf0facc1ab" translate="yes" xml:space="preserve">
          <source>If set to &lt;code&gt;&quot;hover&quot;&lt;/code&gt;, pauses the cycling of the carousel on &lt;code&gt;mouseenter&lt;/code&gt; and resumes the cycling of the carousel on &lt;code&gt;mouseleave&lt;/code&gt;. If set to &lt;code&gt;false&lt;/code&gt;, hovering over the carousel won't pause it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c0b62e017c9001695f6e141eb06470bdc04333a3" translate="yes" xml:space="preserve">
          <source>If the default handling of the dropdown menu and toggle components aren't to your liking, you can customize them, by using the more basic &lt;code&gt;&amp;lt;Dropdown&amp;gt;&lt;/code&gt; Component to explicitly specify the Toggle and Menu components</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d68ce9f2b4280ccec1a8114ab07344c1b4e84a4b" translate="yes" xml:space="preserve">
          <source>If using the custom prop &lt;code&gt;&amp;lt;FormFile.Input isInvalid /&amp;gt;&lt;/code&gt; should be before &lt;code&gt;FormFile.Label&amp;gt;&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7a13b6a63e9ad44a6d7b4f666ab4d3b6dc3c5c50" translate="yes" xml:space="preserve">
          <source>If you are not setting the &lt;code&gt;custom&lt;/code&gt; prop the&lt;code&gt;label&lt;/code&gt; should be before the &lt;code&gt;input&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="19a605427d586a308fbf1dfe6c244083edb348b4" translate="yes" xml:space="preserve">
          <source>If you are setting the custom prop the &lt;code&gt;input&lt;/code&gt; element has to be placed before the &lt;code&gt;label&lt;/code&gt; or the &lt;code&gt;buttonText&lt;/code&gt; prop will not work.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="11f6e6542c240cf21c5f477f0621c248763d64ac" translate="yes" xml:space="preserve">
          <source>If you plan on customizing the Bootstrap Sass files, or don't want to use a CDN for the stylesheet, it may be helpful to install &lt;a href=&quot;https://getbootstrap.com/docs/4.6/getting-started/download/#npm&quot;&gt;vanilla Bootstrap&lt;/a&gt; as well.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7a8eedf68dc0ba15a9444f26e933ae95049dc126" translate="yes" xml:space="preserve">
          <source>If you want each NavItem to be the same size use &lt;code&gt;justify&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ab04f01b6e7bd7109733f2ac0faa6bce2f6666eb" translate="yes" xml:space="preserve">
          <source>If you want to have readonly elements in your form styled as plain text, use the &lt;code&gt;plaintext&lt;/code&gt; prop on FormControls to remove the default form field styling and preserve the correct margin and padding.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="817e8878c746b53caa815e19078d818e44cb5ce9" translate="yes" xml:space="preserve">
          <source>If you want to use responsive menu alignment, pass an object to the &lt;code&gt;align&lt;/code&gt; prop on the &lt;code&gt;&amp;lt;DropdownMenu&amp;gt;&lt;/code&gt; or the &lt;code&gt;menuAlign&lt;/code&gt; prop on the &lt;code&gt;&amp;lt;DropdownButton&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;SplitButton&amp;gt;&lt;/code&gt;. You can specify the directions &lt;code&gt;left&lt;/code&gt; or &lt;code&gt;right&lt;/code&gt; for the various breakpoints.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9fc2f1a35d34bf4569de90dda90c14853c5bb655" translate="yes" xml:space="preserve">
          <source>If you want your Accordion to start in a fully-collapsed state, then simply don't pass in a &lt;code&gt;defaultActiveKey&lt;/code&gt; prop to &lt;code&gt;Accordion&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c516bff2be30422e72e9c26930a58e4ea50e5ccd" translate="yes" xml:space="preserve">
          <source>If you wish to customize the Bootstrap theme or any Bootstrap variables you can create a custom Sass file:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c76aa340d3ce0ca471b91669b5b843b368cfdb28" translate="yes" xml:space="preserve">
          <source>If you would like to add a custom theme on your app using Create React App, they have additional documentation for Create React App and Bootstrap &lt;a href=&quot;https://facebook.github.io/create-react-app/docs/adding-bootstrap#using-a-custom-theme&quot;&gt;here&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d63a326d4aff10674096297e3f885a0ae93ad553" translate="yes" xml:space="preserve">
          <source>If you're noticing choppy animations, and the component that's being collapsed has non-zero margin or padding, try wrapping the contents of your &lt;code&gt;&amp;lt;Collapse&amp;gt;&lt;/code&gt; inside a node with no margin or padding, like the &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; in the example below. This will allow the height to be computed properly, so the animation can proceed smoothly.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d57988e0af06f3c301a8a914ef0c6bfa7a93464c" translate="yes" xml:space="preserve">
          <source>If your application contains a large number of form groups, we recommend building a higher-level component encapsulating a complete field group that renders the label, the control, and any other necessary components. We don't provide this out-of-the-box, because the composition of those field groups is too specific to an individual application to admit a good one-size-fits-all solution.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a5ec0a94e4430c866a95be8e83199c514e0e6818" translate="yes" xml:space="preserve">
          <source>If your form layout allows it, you can use the &lt;code&gt;tooltip&lt;/code&gt; prop to display validation feedback in a styled tooltip. Be sure to have a parent with &lt;code&gt;position: relative&lt;/code&gt; on it for tooltip positioning. In the example below, our column classes have this already, but your project may require an alternative setup.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="50e19fda0d5b4b74a4a1a1d584e56578693a4ea4" translate="yes" xml:space="preserve">
          <source>Image</source>
          <target state="translated">Image</target>
        </trans-unit>
        <trans-unit id="bca2be81ad852047e813ce41711a6d011698634c" translate="yes" xml:space="preserve">
          <source>Image Overlays</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0cf76a44426739568792ee779aba046822832947" translate="yes" xml:space="preserve">
          <source>Image caps</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="09e871c98fef3b901a775def173e4126aaf73b42" translate="yes" xml:space="preserve">
          <source>Images</source>
          <target state="translated">Images</target>
        </trans-unit>
        <trans-unit id="3a4dbec04d3ec8972638687ce3087f8eae6bcf0a" translate="yes" xml:space="preserve">
          <source>Importing Components</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e84a93b3fd9bd7082a57ddae85b82812c08ad5d5" translate="yes" xml:space="preserve">
          <source>In addition to the standard size, a smaller additional preconfigured size is available by configuring the &lt;code&gt;size&lt;/code&gt; property to &lt;code&gt;sm&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fed6559f1b07968c573d23796418bd05493c1629" translate="yes" xml:space="preserve">
          <source>In case you are using &lt;strong&gt;Sass&lt;/strong&gt; the simplest way is to include the Bootstrap&amp;rsquo;s source Sass files in your main Sass file and then require it on your &lt;code&gt;src/index.js&lt;/code&gt; or &lt;code&gt;App.js&lt;/code&gt; file. This applies to a typical &lt;code&gt;create-react-app&lt;/code&gt; application in other use cases you might have to setup the bundler of your choice to compile Sass/SCSS stylesheets to CSS.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c925fb72b415f61dfc99a1f31f06f0a6a4ec2f8a" translate="yes" xml:space="preserve">
          <source>In some cases you may need to change the base class &quot;prefix&quot; of one or more Components. You can control how a Component prefixes its classes locally by changing the &lt;code&gt;bsPrefix&lt;/code&gt; prop. Or globally via the &lt;code&gt;ThemeProvider&lt;/code&gt; Component.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="81c0f4c1d1ecc2a80069bd3ba8f2316d94dcb98a" translate="yes" xml:space="preserve">
          <source>Include a backdrop component. Specify 'static' for a backdrop that doesn't trigger an &quot;onHide&quot; when clicked.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6ceb00addd0c8a429810f76b4b6ab4e2338ee956" translate="yes" xml:space="preserve">
          <source>Indicate the current page&amp;rsquo;s location within a navigational hierarchy that automatically adds separators via CSS. Add &lt;code&gt;active &lt;/code&gt; prop to active &lt;code&gt;Breadcrumb.Item &lt;/code&gt;. Do not set both &lt;code&gt;active &lt;/code&gt; and &lt;code&gt;href &lt;/code&gt; attributes. &lt;code&gt;active &lt;/code&gt; overrides &lt;code&gt;href &lt;/code&gt; and &lt;code&gt;span &lt;/code&gt; element is rendered instead of &lt;code&gt;a &lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9f42c5dd5d5698c91eddf7fe6c52d65cd73227f3" translate="yes" xml:space="preserve">
          <source>Individual Item Intervals</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2e347f4ceb23a6d8637cc8028fda9ad8c7b7c47f" translate="yes" xml:space="preserve">
          <source>Inline</source>
          <target state="translated">Inline</target>
        </trans-unit>
        <trans-unit id="39580f5ee4429d7e522adbdacb89b203951a6e1f" translate="yes" xml:space="preserve">
          <source>Inline forms</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b3bbd647576e0b8b56fd6f5b58c93ed5f1fa5c90" translate="yes" xml:space="preserve">
          <source>Inline text can use any typical inline HTML element (be it a &lt;code&gt;&amp;lt;small&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;span&amp;gt;&lt;/code&gt;, or something else) with nothing more than a utility class.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a6b3d7a0c12435a09249079e7832a68d3c85e84a" translate="yes" xml:space="preserve">
          <source>Input group validation</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cceaba917d1f4d7995c4750fc6db24cae7fb1392" translate="yes" xml:space="preserve">
          <source>Input size variants</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="61d21592ed06cc5065ffc9a377a2a407d2ad0ea2" translate="yes" xml:space="preserve">
          <source>InputGroup</source>
          <target state="translated">InputGroup</target>
        </trans-unit>
        <trans-unit id="c81b79df3c6448eae7c4f80428b54cd5692a17d7" translate="yes" xml:space="preserve">
          <source>Installation</source>
          <target state="translated">Installation</target>
        </trans-unit>
        <trans-unit id="5b6a54452e074f642b6ec9e32949103e47e44d31" translate="yes" xml:space="preserve">
          <source>Instead of applying button sizing props to every button in a group, just add &lt;code&gt;size &lt;/code&gt; prop to the &lt;code&gt;&amp;lt;ButtonGroup&amp;gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2473e96bc614a911821242119918a241a41836d6" translate="yes" xml:space="preserve">
          <source>Introduction</source>
          <target state="translated">Introduction</target>
        </trans-unit>
        <trans-unit id="b702296a0c2a4bf6820f6b770b1bd83f559d51d9" translate="yes" xml:space="preserve">
          <source>Invert the colors of the table &amp;mdash; with light text on dark backgrounds by setting variant as &lt;code&gt;dark&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1f3d337f54062ab5b42298fa25a2d7ee753db6ac" translate="yes" xml:space="preserve">
          <source>It's often beneficial (especially in React) to handle form validation via a library like Formik, or react-formal. In those cases, &lt;code&gt;isValid&lt;/code&gt; and &lt;code&gt;isInvalid&lt;/code&gt; props can be added to form controls to manually apply validation styles. Below is a quick example integrating with &lt;a href=&quot;https://github.com/jaredpalmer/formik&quot;&gt;Formik&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="54621857be8482061195a0838a0d85f76438f774" translate="yes" xml:space="preserve">
          <source>Jumbotron</source>
          <target state="translated">Jumbotron</target>
        </trans-unit>
        <trans-unit id="2ed18abe74d94987d06bf037afc2f5a05027e1a4" translate="yes" xml:space="preserve">
          <source>Kitchen Sink</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="04ec48c851503cefc8c80614d72f02cf670dd19c" translate="yes" xml:space="preserve">
          <source>Label for the control.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0b819fb3f4ffac9de50f66c7901d3dddd10119ef" translate="yes" xml:space="preserve">
          <source>Label shown to screen readers only, can be used to show the next element in the carousel. Set to null to deactivate.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cacf6c0a301dce1fd49e77fd4399a33206095f06" translate="yes" xml:space="preserve">
          <source>Label shown to screen readers only, can be used to show the previous element in the carousel. Set to null to deactivate.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="972ad8d8a50397ba8c02433ed8f048eeb4074b85" translate="yes" xml:space="preserve">
          <source>Layout</source>
          <target state="translated">Layout</target>
        </trans-unit>
        <trans-unit id="c1dcba5436572dab6f3f4351f9203657d9e3aa48" translate="yes" xml:space="preserve">
          <source>Learn how to include React Bootstrap in your project</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ca7cd5fa5cd84fb684a37b6018f869126af4c8e1" translate="yes" xml:space="preserve">
          <source>Licensed under the MIT License (MIT).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6ba8c22a5031020d7def07f0775485403152f113" translate="yes" xml:space="preserve">
          <source>Like the original Bootstrap spinners, these can also be used with buttons. To use this component out-of-the-box it is recommended you change the element type to &lt;code&gt;span&lt;/code&gt; by configuring the &lt;code&gt;as&lt;/code&gt; property when using spinners inside buttons.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="014bcd654c60d5250fad2123b073b9c0ac3340f6" translate="yes" xml:space="preserve">
          <source>Links</source>
          <target state="translated">Links</target>
        </trans-unit>
        <trans-unit id="61bf48a42bb4fdb6df6f79f313e3d48d6cc1329c" translate="yes" xml:space="preserve">
          <source>List Groups</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="54315669a7d242375b8c0d239012a0f8154088c3" translate="yes" xml:space="preserve">
          <source>List groups</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9a5b74de42f518d608f3aad2c6bedee3d0d427e9" translate="yes" xml:space="preserve">
          <source>List groups are a flexible and powerful component for displaying a series of content. Modify and extend them to support just about any content within.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d4a5f305c83e5ec3d7b0a571b59f6ddd98059a8c" translate="yes" xml:space="preserve">
          <source>List items &lt;code&gt;actions&lt;/code&gt; are distinct from plain items to ensure that click or tap affordances aren't applied to non-interactive items.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="604b0046ef13109c63b715ac436f8de51519d492" translate="yes" xml:space="preserve">
          <source>ListGroup</source>
          <target state="translated">ListGroup</target>
        </trans-unit>
        <trans-unit id="b307cd20bfebc6d644246cc59fc04152e14201ae" translate="yes" xml:space="preserve">
          <source>ListGroup.Item</source>
          <target state="translated">ListGroup.Item</target>
        </trans-unit>
        <trans-unit id="502b7c738134fd4a95cc56ec8e84035cd758deac" translate="yes" xml:space="preserve">
          <source>Live demo</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="03d5e2339e36c09933b20dec5376aff54583d344" translate="yes" xml:space="preserve">
          <source>Local &lt;code&gt;onSelect&lt;/code&gt; handlers are ignored when in the context of a TabContainer or Navbar (MAYBE ADD BACK?)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c22b89bc75e8fff7a346adb49a9546c9eddf35ee" translate="yes" xml:space="preserve">
          <source>Loose text and links can be wrapped &lt;code&gt;Navbar.Text&lt;/code&gt; in order to correctly align it vertically.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c8315129b295e1f0a6aaf7820bab3ba79eaaa43c" translate="yes" xml:space="preserve">
          <source>Low-level components and utilities for building beautiful accessible overlay components</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="37ce1f062a8c70878c496a184f9dce95f9672252" translate="yes" xml:space="preserve">
          <source>Make a set of buttons appear vertically stacked rather than horizontally, by adding &lt;code&gt;vertical&lt;/code&gt; to the &lt;code&gt;&amp;lt;ButtonGroup&amp;gt;&lt;/code&gt;. &lt;strong&gt;Split button dropdowns are not supported here.&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f22c37f336415de21447d046e2857e76f25b4cbc" translate="yes" xml:space="preserve">
          <source>Make buttons look inactive by adding the &lt;code&gt;disabled&lt;/code&gt; prop to.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="27d1dfd77fa39f540843a28b9861139e81abddbf" translate="yes" xml:space="preserve">
          <source>Make tables more compact by cutting cell padding in half by setting size as &lt;code&gt;sm&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="66dd0ed8c49b5bde1a8bb03e1950300c4b48c94e" translate="yes" xml:space="preserve">
          <source>Make the control disabled</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f7e82e077f59172131c80018433e5f5dc112f3c9" translate="yes" xml:space="preserve">
          <source>Make the control readonly</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="25a76831de45c9235744457e2cff15cdc4a4fdc3" translate="yes" xml:space="preserve">
          <source>Make the jumbotron full width, and without rounded corners</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3039792dbeabf9099f2a404478db1095dd092758" translate="yes" xml:space="preserve">
          <source>Make the set of Buttons appear vertically stacked.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="22242b53050632638bade59e6aebcefe2cde4fa5" translate="yes" xml:space="preserve">
          <source>Manually controlling &lt;code&gt;expanded&lt;/code&gt; via the onSelect callback is recommended instead, for more complex operations that need to be executed after the &lt;code&gt;select&lt;/code&gt; event of &lt;code&gt;&amp;lt;Nav&amp;gt;&lt;/code&gt; descendants.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1c666d68d8ca70a45c430603b4bc2f2138a009c5" translate="yes" xml:space="preserve">
          <source>Manually set the visual state of the button to &lt;code&gt;:active&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b15eb81d34e80441f57741108a4ec480b0a77507" translate="yes" xml:space="preserve">
          <source>Manually style the input as invalid</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="82b9f9654ac62d64ce3b8f02b78d679711a3dc47" translate="yes" xml:space="preserve">
          <source>Manually style the input as valid</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3120af3df3cf7aca73ddeb8aaf41782d4558f0b3" translate="yes" xml:space="preserve">
          <source>Manually toggling &lt;code&gt;show&lt;/code&gt; does &lt;strong&gt;not&lt;/strong&gt; wait for &lt;code&gt;delay&lt;/code&gt; to change the visibility.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5519a3a014617db597226f80cb4eb3033ceca2c3" translate="yes" xml:space="preserve">
          <source>Mark a form as having been validated. Setting it to &lt;code&gt;true&lt;/code&gt; will toggle any validation styles on the forms elements.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aa44070c7038f08d2084458c8d8754edb7bab27f" translate="yes" xml:space="preserve">
          <source>Mark the Tab with a matching &lt;code&gt;eventKey&lt;/code&gt; as active.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1f5eb6d8270eabc613835653972bbd2d63a12c12" translate="yes" xml:space="preserve">
          <source>Marks a ListGroupItem as actionable, applying additional hover, active and disabled styles for links and buttons.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9a408828698e247b3e89446b6c20ffcce5c7e474" translate="yes" xml:space="preserve">
          <source>Marks the NavItem with a matching &lt;code&gt;eventKey&lt;/code&gt; (or &lt;code&gt;href&lt;/code&gt; if present) as active.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c269302d018fd16708afb15630b966844d800dc7" translate="yes" xml:space="preserve">
          <source>Maximum value progress can reach</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0c77aeece8c258113148c6fb487946bf97b34672" translate="yes" xml:space="preserve">
          <source>Media</source>
          <target state="translated">Media</target>
        </trans-unit>
        <trans-unit id="510ebfb65b5b46b8d229a77eace84b755dceadad" translate="yes" xml:space="preserve">
          <source>Media Alignment</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="62864c22018dce35474379477580b7f2886063c7" translate="yes" xml:space="preserve">
          <source>Media Nesting</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4eee845e07cdb585f2321650f008ab09d555d4a6" translate="yes" xml:space="preserve">
          <source>Media Order</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e06066ca8de5feb879f119e5e6938d7a248a5620" translate="yes" xml:space="preserve">
          <source>Media in a media object can be aligned with flexbox utilities to the top (default), middle, or end of your &lt;code&gt;Media.Body&lt;/code&gt; content.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6b2f54ba0ffd4781acf5c0f92e2e7a77cd6d4b07" translate="yes" xml:space="preserve">
          <source>Media list</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ad70fb3f025bba916a3068e3d484704cdd359639" translate="yes" xml:space="preserve">
          <source>Media objects</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ea6ed8ede994fab6e5699944cfd81c2aaaf8c532" translate="yes" xml:space="preserve">
          <source>Media objects can be infinitely nested, though we suggest you stop at some point. Place nested &lt;code&gt;Media&lt;/code&gt; within the &lt;code&gt;Media.Body&lt;/code&gt; of a parent media object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3d792b1c1b2fc5356d29269156f1ae0bc860bb1a" translate="yes" xml:space="preserve">
          <source>Menu alignment</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8c38848b3b7bd144933cc9c76dd5efd7e9c52a25" translate="yes" xml:space="preserve">
          <source>Menu dividers</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="65e1b6e78132343abb1d4343b093c3f278c9f0e0" translate="yes" xml:space="preserve">
          <source>Menu headers</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fd0b0b8f9535c21f5c697415e34da8e008d26d26" translate="yes" xml:space="preserve">
          <source>MenuItem</source>
          <target state="translated">MenuItem</target>
        </trans-unit>
        <trans-unit id="55d7a853a1f69b253bec912af555512b829d0abf" translate="yes" xml:space="preserve">
          <source>Methods and events using jQuery is done imperatively by directly manipulating the DOM. In contrast, React uses updates to the state to update the virtual DOM. In this way, React-Bootstrap provides a more reliable solution by incorporating Bootstrap functionality into React's virtual DOM. Below are a few examples of how React-Bootstrap components differ from Bootstrap.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6505ea1c1acf25336426a3088c32de758f2160ee" translate="yes" xml:space="preserve">
          <source>Migrating to v1</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7972cd12b39c87581f70df985d5b4eb077488696" translate="yes" xml:space="preserve">
          <source>Minimum value progress can begin from</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d44c2c5216ec66ccb451d99a0f522a63e33ee785" translate="yes" xml:space="preserve">
          <source>Modal</source>
          <target state="translated">Modal</target>
        </trans-unit>
        <trans-unit id="e8d7fbef1315dc7fbe2d3540b2a5f3aa7db688c6" translate="yes" xml:space="preserve">
          <source>Modal's &quot;trap&quot; focus in them, ensuring the keyboard navigation cycles through the modal, and not the rest of the page.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0e4d56b0a8b750cd818b88ce945e4bdf5a2298e5" translate="yes" xml:space="preserve">
          <source>ModalBody</source>
          <target state="translated">ModalBody</target>
        </trans-unit>
        <trans-unit id="c4466eaf633ecd9fe13aa17086edae5d2cebfd0b" translate="yes" xml:space="preserve">
          <source>ModalDialog</source>
          <target state="translated">ModalDialog</target>
        </trans-unit>
        <trans-unit id="5d59f6bcfee6487b0997df7c2eff05992156830d" translate="yes" xml:space="preserve">
          <source>ModalFooter</source>
          <target state="translated">ModalFooter</target>
        </trans-unit>
        <trans-unit id="b73544f7db6b0a0239a7a8560d9375a322556f0e" translate="yes" xml:space="preserve">
          <source>ModalHeader</source>
          <target state="translated">ModalHeader</target>
        </trans-unit>
        <trans-unit id="aabc561bf5c97a35de1a4bbc97c7d426755db761" translate="yes" xml:space="preserve">
          <source>ModalTitle</source>
          <target state="translated">ModalTitle</target>
        </trans-unit>
        <trans-unit id="c640c55e66b359e9228c54d00149a1c59ba1b265" translate="yes" xml:space="preserve">
          <source>Modals</source>
          <target state="translated">Modals</target>
        </trans-unit>
        <trans-unit id="611cfb973de92988e99f12c36c5f26a813121ce3" translate="yes" xml:space="preserve">
          <source>Modals are &lt;em&gt;unmounted&lt;/em&gt; when closed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ec7123536e275e1b5aa80fecaab5f7ac0668d6b0" translate="yes" xml:space="preserve">
          <source>Modals are positioned over everything else in the document and remove scroll from the &lt;code&gt;&amp;lt;body&amp;gt;&lt;/code&gt; so that modal content scrolls instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f14ea13cab8ed2d424205e901110ec43032c392f" translate="yes" xml:space="preserve">
          <source>More complex forms can be built using the grid components. Use these for form layouts that require multiple columns, varied widths, and additional alignment options.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7818a059154d49654f34aa222171c4c61d0dce1d" translate="yes" xml:space="preserve">
          <source>More complex layouts can also be created with the grid system.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="86c0a35ec8834c720d47b19935543c81b4d7c9c0" translate="yes" xml:space="preserve">
          <source>More options</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fe8da3f20673a373182e867a59d30b1cd67beb5d" translate="yes" xml:space="preserve">
          <source>Multiple add-ons are supported and can be mixed</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0c4c79140b3c4ed7d9d63b27115aa0e323183d0d" translate="yes" xml:space="preserve">
          <source>Multiple addons</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f12f163719b58f113d649c0ba4b862d18fac3366" translate="yes" xml:space="preserve">
          <source>Multiple inputs</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="709a23220f2c3d64d1e1d6d18c4d5280f8d82fca" translate="yes" xml:space="preserve">
          <source>Name</source>
          <target state="translated">Name</target>
        </trans-unit>
        <trans-unit id="d28493469edf01a08134d51ab3fd374215dc48cd" translate="yes" xml:space="preserve">
          <source>Native HTML5 form validation</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="57566258ab032497322177bca0104c50ff2f939f" translate="yes" xml:space="preserve">
          <source>Nav</source>
          <target state="translated">Nav</target>
        </trans-unit>
        <trans-unit id="3923c3adddd634e6e828e47fbb333dba48117cad" translate="yes" xml:space="preserve">
          <source>Nav.Item</source>
          <target state="translated">Nav.Item</target>
        </trans-unit>
        <trans-unit id="569a511671be6448daab44f127f01d751979e61a" translate="yes" xml:space="preserve">
          <source>Nav.Link</source>
          <target state="translated">Nav.Link</target>
        </trans-unit>
        <trans-unit id="4c88e17084eb9012cf713adc0c503e26fae69fc0" translate="yes" xml:space="preserve">
          <source>NavButton</source>
          <target state="translated">NavButton</target>
        </trans-unit>
        <trans-unit id="6ed17d2493f32034c4adefae6026873f68a63126" translate="yes" xml:space="preserve">
          <source>NavDropdown</source>
          <target state="translated">NavDropdown</target>
        </trans-unit>
        <trans-unit id="60fa56f0c3e4bead2d9cf0d893c6df1ac5ace7f0" translate="yes" xml:space="preserve">
          <source>NavLink hrefs will be used as &lt;code&gt;eventKey&lt;/code&gt;s when &lt;code&gt;eventKey&lt;/code&gt; is absent</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="690afa83acf2d824b47ef6e809fe02b9ca57d63f" translate="yes" xml:space="preserve">
          <source>Navbar</source>
          <target state="translated">Navbar</target>
        </trans-unit>
        <trans-unit id="58d84a902b3dc72cd98aeb4015dd88d1096ce6ae" translate="yes" xml:space="preserve">
          <source>Navbar.Brand</source>
          <target state="translated">Navbar.Brand</target>
        </trans-unit>
        <trans-unit id="e0513c88cba4787477c580d6e90e3ad88c85d53d" translate="yes" xml:space="preserve">
          <source>Navbar.Collapse</source>
          <target state="translated">Navbar.Collapse</target>
        </trans-unit>
        <trans-unit id="fc431d099b277e043df5768e6a901f9283332db6" translate="yes" xml:space="preserve">
          <source>Navbar.Toggle</source>
          <target state="translated">Navbar.Toggle</target>
        </trans-unit>
        <trans-unit id="d5a4796187229cea2deb634838c6c8e855d39c3c" translate="yes" xml:space="preserve">
          <source>NavbarBrand</source>
          <target state="translated">NavbarBrand</target>
        </trans-unit>
        <trans-unit id="6eb938fcd42153e387d6c081bf71102860506139" translate="yes" xml:space="preserve">
          <source>NavbarHeader</source>
          <target state="translated">NavbarHeader</target>
        </trans-unit>
        <trans-unit id="1eef15caec8acf89a2ea802bc2421b4e237193f5" translate="yes" xml:space="preserve">
          <source>NavbarToggle</source>
          <target state="translated">NavbarToggle</target>
        </trans-unit>
        <trans-unit id="e4b9d6bb6046e1d195875babe41a47448c7d57d3" translate="yes" xml:space="preserve">
          <source>Navbars</source>
          <target state="translated">Navbars</target>
        </trans-unit>
        <trans-unit id="225d27a43ae1701d73237a6592f5dbe9271208ce" translate="yes" xml:space="preserve">
          <source>Navbars and their contents are fluid by default. Use optional &lt;a href=&quot;#navbars-containers&quot;&gt;containers &lt;/a&gt; to limit their horizontal width.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cf03cf2e9cdf95a20af09137dfb9071db0c31bf2" translate="yes" xml:space="preserve">
          <source>Navigation</source>
          <target state="translated">Navigation</target>
        </trans-unit>
        <trans-unit id="4f80ffe1e32003aaec99ca732623a16317294faa" translate="yes" xml:space="preserve">
          <source>Navigation bits in Bootstrap all share a general &lt;code&gt;Nav&lt;/code&gt; component and styles. Swap &lt;code&gt;variant&lt;/code&gt;s to switch between each style. The base &lt;code&gt;Nav&lt;/code&gt; component is built with flexbox and provide a strong foundation for building all types of navigation components.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c7794aafda48b3c67092c419e196a3f214b7cf23" translate="yes" xml:space="preserve">
          <source>Navigation style</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="64225a6db61546753939c22ba88d692a86643765" translate="yes" xml:space="preserve">
          <source>Nest &lt;code&gt;&amp;lt;ProgressBar /&amp;gt;&lt;/code&gt;s to stack them.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f06563daf6842a8e082fd4615e320fc869bb69d9" translate="yes" xml:space="preserve">
          <source>Nesting</source>
          <target state="translated">Nesting</target>
        </trans-unit>
        <trans-unit id="651e565b1d05e128a190854ed09f8473f98e20d4" translate="yes" xml:space="preserve">
          <source>New variants and sizes</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c53cbcd751e10d8f254dcb8d855e0ba41589a1e3" translate="yes" xml:space="preserve">
          <source>No animation</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fd2cf4fb4fcca8476d7dd4b2837d0334036af5fb" translate="yes" xml:space="preserve">
          <source>Normally &lt;code&gt;&amp;lt;Button&amp;gt;&lt;/code&gt; components will render a HTML &lt;code&gt;&amp;lt;button&amp;gt;&lt;/code&gt; element. However you can render whatever you'd like, adding a &lt;code&gt;href&lt;/code&gt; prop will automatically render an &lt;code&gt;&amp;lt;a /&amp;gt;&lt;/code&gt; element. You can use the &lt;code&gt;as&lt;/code&gt; prop to render whatever your heart desires. React Bootstrap will take care of the proper ARIA roles for you.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="806ca1304939a63b47b581b5d8ece135d9655caf" translate="yes" xml:space="preserve">
          <source>Note that &lt;code&gt;Row&lt;/code&gt; column widths will override &lt;code&gt;Col&lt;/code&gt; widths set on lower breakpoints when viewed on larger screens. The &lt;code&gt;&amp;lt;Col xs={6} /&amp;gt;&lt;/code&gt; size will be overriden by &lt;code&gt;&amp;lt;Row md={4} /&amp;gt;&lt;/code&gt; on medium and larger screens.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="154bbfa490735595d85c28d749a8ee7cb3abcd4f" translate="yes" xml:space="preserve">
          <source>Note that depending on how they are used, badges may be confusing for users of screen readers and similar assistive technologies. While the styling of badges provides a visual cue as to their purpose, these users will simply be presented with the content of the badge. Depending on the specific situation, these badges may seem like random additional words or numbers at the end of a sentence, link, or button. Unless the context is clear, consider including additional context with a visually hidden piece of additional text.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="20c1ef7193a4ed2c3dbf5db9752332e646362350" translate="yes" xml:space="preserve">
          <source>Note that the &lt;code&gt;data-browse&lt;/code&gt; attribute does not to anything unless the &lt;code&gt;custom&lt;/code&gt; prop is set.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b0008275fd1b15366b2566594c3b95a78874ec5d" translate="yes" xml:space="preserve">
          <source>Note that triggering components &lt;strong&gt;must be able to accept &lt;a href=&quot;https://reactjs.org/docs/refs-and-the-dom.html&quot;&gt;a ref&lt;/a&gt;&lt;/strong&gt; since &lt;code&gt;&amp;lt;OverlayTrigger&amp;gt;&lt;/code&gt; will attempt to add one. You can use &lt;a href=&quot;https://reactjs.org/docs/react-api.html#reactforwardref&quot;&gt;forwardRef()&lt;/a&gt; for function components.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b78bfce73926a370b0287718b9689d53d1d574eb" translate="yes" xml:space="preserve">
          <source>Note: If you are manually closing the navbar using this &lt;code&gt;OnSelect&lt;/code&gt; prop, ensure that you are setting &lt;code&gt;expanded&lt;/code&gt; to false and not &lt;em&gt;toggling&lt;/em&gt; between true and false.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1ed58435966d03322309a631a1378b80190e1b9a" translate="yes" xml:space="preserve">
          <source>Note: creating a vertical nav (&lt;code&gt;.flex-column&lt;/code&gt;) with tabs styling is unsupported by Bootstrap's default stylesheet.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1320eaf5f71a580ff7bfbd3044eee05609df246b" translate="yes" xml:space="preserve">
          <source>Often times you may need a more generic or low-level version of a Bootstrap component. Many of the &lt;code&gt;react-bootstrap&lt;/code&gt; components are built on top of components from &lt;a href=&quot;https://react-bootstrap.github.io/react-overlays/&quot;&gt;react-overlays&lt;/a&gt;, if you find yourself at the limit of a Bootstrap component, consider using the &lt;code&gt;react-overlays&lt;/code&gt; base component directly.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a7374040fda8fa020cfe8d0209c7bb3c4268c26f" translate="yes" xml:space="preserve">
          <source>On the other hand, Bootstrap's dropdowns are designed to more generic and application in a variety of situations. For this reason we don't automatically add the menu roles to the markup. We do implement some basic keyboard navigation, and if you do provide the &quot;menu&quot; role, react-bootstrap will do its best to ensure the focus management is compliant with the</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3d0a6c6c4a4cff6a35f0702cacf8887d08490784" translate="yes" xml:space="preserve">
          <source>On touch-enabled devices, when set to &lt;code&gt;&quot;hover&quot;&lt;/code&gt;, cycling will pause on &lt;code&gt;touchend&lt;/code&gt; (once the user finished interacting with the carousel) for two intervals, before automatically resuming. Note that this is in addition to the above mouse behavior.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="94796746955c22fc60179865a96d0eea2519872e" translate="yes" xml:space="preserve">
          <source>One or more button variant combinations</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8e8d4da3edb7a2fbd5437e0d4fbf3548ecffd2c0" translate="yes" xml:space="preserve">
          <source>Open and close the Modal with a slide and fade animation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4bbc654f9793d0245df0fa8509154a27b7df03d3" translate="yes" xml:space="preserve">
          <source>Optional Sizes</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e0a545fa59ecb542b3f53ce5525efe38c512ce75" translate="yes" xml:space="preserve">
          <source>Options passed to focus function when &lt;code&gt;restoreFocus&lt;/code&gt; is set to &lt;code&gt;true&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="88ef777746977fc57640e8f5218cff81865ee9af" translate="yes" xml:space="preserve">
          <source>Or pass a Tooltip element to &lt;code&gt;OverlayTrigger&lt;/code&gt; instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5cdf875aa035b3e0605beed51626fb5fa4d25563" translate="yes" xml:space="preserve">
          <source>Outline buttons</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="249450cb72252df146b3769ed2d41a843af2058c" translate="yes" xml:space="preserve">
          <source>Overlay</source>
          <target state="translated">Overlay</target>
        </trans-unit>
        <trans-unit id="850a616c6faeebb82802ed34e52f30c16b3da21b" translate="yes" xml:space="preserve">
          <source>OverlayTrigger</source>
          <target state="translated">OverlayTrigger</target>
        </trans-unit>
        <trans-unit id="30f888d222b77006610001ff65a62036e76c8b9f" translate="yes" xml:space="preserve">
          <source>Overlays</source>
          <target state="translated">Overlays</target>
        </trans-unit>
        <trans-unit id="650157fda7ce7e1099c1b692b9f4bfb8b813ee30" translate="yes" xml:space="preserve">
          <source>Overlays consist of at least two elements, the &quot;overlay&quot;, the element to be positioned, as well as a &quot;target&quot;, the element the overlay is positioned in relation to. You can also also have an &quot;arrow&quot; element, like the tooltips and popovers, but that is optional. Be sure to &lt;strong&gt;check out the &lt;a href=&quot;https://popper.js.org/docs/v2/&quot;&gt;Popper&lt;/a&gt; documentation for more details about the injected props.&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8bdb583cf333eab64918f6d4098239edec5f76db" translate="yes" xml:space="preserve">
          <source>Overlays rely on the third-party library &lt;a href=&quot;https://popper.js.org/&quot;&gt;Popper.js&lt;/a&gt;. It's included automatically with React-Bootstrap, but you should reference the API for more advanced use cases.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="55a421d99568914477ac1ade26f0666a0a097136" translate="yes" xml:space="preserve">
          <source>Override the default button icon for the &quot;next&quot; control</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f9f2a1b5fcc71f5643856b90508e0c8cb6c4fa1d" translate="yes" xml:space="preserve">
          <source>Override the default button icon for the &quot;previous&quot; control</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0efc2e6be4c23b9a513d7ce0dcff8ed80e8912e7" translate="yes" xml:space="preserve">
          <source>Overview</source>
          <target state="translated">Overview</target>
        </trans-unit>
        <trans-unit id="e428d609ca633b66bf6521c50a326d631163b234" translate="yes" xml:space="preserve">
          <source>PageItem</source>
          <target state="translated">PageItem</target>
        </trans-unit>
        <trans-unit id="536012190d3d4515a29641daf7aab6f7a81b0895" translate="yes" xml:space="preserve">
          <source>Pager</source>
          <target state="translated">Pager</target>
        </trans-unit>
        <trans-unit id="100325b8d6de92dc6ff09cd2c078133755bf274f" translate="yes" xml:space="preserve">
          <source>Pagination</source>
          <target state="translated">Pagination</target>
        </trans-unit>
        <trans-unit id="e26b3e9b20e77fad39ba75130392468e44bca1e3" translate="yes" xml:space="preserve">
          <source>Pairs nicely with the &lt;code&gt;variant&lt;/code&gt; prop.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2f4bd749ecf708ff53a15e9e7904176bd92ad347" translate="yes" xml:space="preserve">
          <source>Panel</source>
          <target state="translated">Panel</target>
        </trans-unit>
        <trans-unit id="38ea5ba8c928827a392ae9d524bfa5d99b282a90" translate="yes" xml:space="preserve">
          <source>Pill</source>
          <target state="translated">Pill</target>
        </trans-unit>
        <trans-unit id="e36c127d76bfdf2d40f0a2ef7347628ac514dc3d" translate="yes" xml:space="preserve">
          <source>Pills</source>
          <target state="translated">Pills</target>
        </trans-unit>
        <trans-unit id="9cfee2652176b99107d3e82659732b0e0d24ccfa" translate="yes" xml:space="preserve">
          <source>Place one add-on or button on either side of an input. You may also place one on both sides of an input. Remember to place &lt;code&gt;&amp;lt;label&amp;gt;&lt;/code&gt;s outside the input group.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="84b422425f27099ad6b2052ca146c55597bd961e" translate="yes" xml:space="preserve">
          <source>Place toasts with custom CSS as you need them. The top right is often used for notifications, as is the top middle.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ab89d05c4b9c34dd1a8df7e4adbcef21efc1456b" translate="yes" xml:space="preserve">
          <source>Placement</source>
          <target state="translated">Placement</target>
        </trans-unit>
        <trans-unit id="da7bdcf75af233cae47390b5b49cf37833389d4d" translate="yes" xml:space="preserve">
          <source>Please refer to the official &lt;a href=&quot;https://getbootstrap.com/docs/4.4/components/forms/#translating-or-customizing-the-strings-with-scss&quot;&gt;Bootstrap documentation for translating via SCSS&lt;/a&gt;. The &lt;code&gt;lang&lt;/code&gt; prop can be used to pass the language.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6c858e4aec30470ed62f60c3425b45fe4ccddbf0" translate="yes" xml:space="preserve">
          <source>Popover</source>
          <target state="translated">Popover</target>
        </trans-unit>
        <trans-unit id="592ec8428f26de9cbdf1a77597693ae0a7ffccfc" translate="yes" xml:space="preserve">
          <source>PopoverContent</source>
          <target state="translated">PopoverContent</target>
        </trans-unit>
        <trans-unit id="9c80dcb6d04505620d8bf39596a1ce3bff4e8a53" translate="yes" xml:space="preserve">
          <source>PopoverTitle</source>
          <target state="translated">PopoverTitle</target>
        </trans-unit>
        <trans-unit id="1c5a1f9937684702035e823b855365a8a6d68bc2" translate="yes" xml:space="preserve">
          <source>Popovers</source>
          <target state="translated">Popovers</target>
        </trans-unit>
        <trans-unit id="c2bae6dd0aff1fdb97cf8ea0452513c5d67a91e8" translate="yes" xml:space="preserve">
          <source>Position the navbar at the top of the viewport, but only after scrolling past it. A convenience prop for the &lt;code&gt;sticky-top&lt;/code&gt; positioning class.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9292a6bb947e43eb7ac877886bcbcd53728b1eda" translate="yes" xml:space="preserve">
          <source>Prefixing components</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="50ce64c86a7372328c68cb021e80fd97991a214a" translate="yes" xml:space="preserve">
          <source>Progress bars</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6dfa9eda184377c236e729ec07d1660c0f1a6647" translate="yes" xml:space="preserve">
          <source>Progress bars use some of the same button and alert classes for consistent styles.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="24acde67f8939531de480b6a895c6a21f11860ff" translate="yes" xml:space="preserve">
          <source>ProgressBar</source>
          <target state="translated">ProgressBar</target>
        </trans-unit>
        <trans-unit id="e5561bc237fb41709bb2e8b651d704c1664ae03e" translate="yes" xml:space="preserve">
          <source>Props</source>
          <target state="translated">Props</target>
        </trans-unit>
        <trans-unit id="07eb70990b62e872ac3955e4cfce1a0be1568e44" translate="yes" xml:space="preserve">
          <source>Provide a function child to manually handle the layout of the FormCheck's inner components.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cf4b951e9cc9f1e4c1b35cc930b787a3e821dcdb" translate="yes" xml:space="preserve">
          <source>Provide a function child to manually handle the layout of the FormFile's inner components.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e6d446b4e92dd3e13fdf4456803a903a9a617235" translate="yes" xml:space="preserve">
          <source>Provide contextual feedback messages for typical user actions with the handful of available and flexible alert messages.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4163e1b9285d221eb72be374ece1f25566989722" translate="yes" xml:space="preserve">
          <source>Provide up-to-date feedback on the progress of a workflow or action with simple yet flexible progress bars.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="77e0c87b9f4184820bbbced6c0b6549229c4bc4f" translate="yes" xml:space="preserve">
          <source>Provide valuable, actionable feedback to your users with form validation feedback.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="934734ec61815de68d6811968938c224082d3e00" translate="yes" xml:space="preserve">
          <source>Provides an accessible label for the close button. It is used for Assistive Technology when the label text is not readable.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a74d59b9b9aa64705b934f6269fac31e68bb93bb" translate="yes" xml:space="preserve">
          <source>Providing a &lt;code&gt;href&lt;/code&gt; will render an &lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt; element, &lt;em&gt;styled&lt;/em&gt; as a button.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3efbe7bfd2d54ca3e4088ab176902ad457e6360e" translate="yes" xml:space="preserve">
          <source>Push notifications to your visitors with a toast, a lightweight and easily customizable alert message.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a16c5bbe4bf996740f257aa1e81bd57e4c52c8dd" translate="yes" xml:space="preserve">
          <source>Range</source>
          <target state="translated">Range</target>
        </trans-unit>
        <trans-unit id="ffc8ea7264385591fe6a0045325436d38ee867ce" translate="yes" xml:space="preserve">
          <source>Range Inputs</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4d1f996aa17807ebebdb5143b01f86f170d5bea6" translate="yes" xml:space="preserve">
          <source>React</source>
          <target state="translated">React</target>
        </trans-unit>
        <trans-unit id="aef12fd73b3b9b0ad8d2c56af5ba6c9d2fc4fc3c" translate="yes" xml:space="preserve">
          <source>React Bootstrap</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0d7ec51af83bef567222ca12442bbbb179f9d30b" translate="yes" xml:space="preserve">
          <source>React Bootstrap CodeSandbox examples</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eba2e009846c957f432948b766706b3c50f81626" translate="yes" xml:space="preserve">
          <source>React Bootstrap is maintained by a &lt;a href=&quot;https://github.com/orgs/react-bootstrap/people&quot;&gt;team of developers&lt;/a&gt; on Github. We have a growing team and if you are interested in re-building the most popular front-end framework with React we would love to hear from you.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="76a5f9659ebfaf390415548e035adf1415b290bf" translate="yes" xml:space="preserve">
          <source>React Bootstrap v1 adds full compatibility with Bootstrap 4. Because bootstrap 4 is a major rewrite of the project there are significant breaking changes from the pre &lt;code&gt;v1&lt;/code&gt; react-bootstrap.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="de7b58a959558c13734a3b2a5cde5656ca74a78f" translate="yes" xml:space="preserve">
          <source>React Bootstrap will prevent any &lt;code&gt;onClick&lt;/code&gt; handlers from firing regardless of the rendered element.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9622209db093550fa69ea6704a798be81d9f6eff" translate="yes" xml:space="preserve">
          <source>React Overlays</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dd1cf4a9f259c9becfdd3ea9bd8ab0ca8828368f" translate="yes" xml:space="preserve">
          <source>React Router Bootstrap</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ebcad7b0276753174e694e258934f6e95cfbf3e6" translate="yes" xml:space="preserve">
          <source>React-Bootstrap</source>
          <target state="translated">React-Bootstrap</target>
        </trans-unit>
        <trans-unit id="703ac00d9629f6752353e98504716ebc1286eb3a" translate="yes" xml:space="preserve">
          <source>React-Bootstrap &lt;em&gt;only&lt;/em&gt; contains components that are present in vanilla Bootstrap. If functionality was removed from Bootstrap, then it was also removed from React-Bootstrap. This guide does not repeat information found in the upstream migration guide. Its goal is to document React-Bootstrap-specific API changes and additions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0455c78a5f589202e49d5f739a2e4d0b1e4f2994" translate="yes" xml:space="preserve">
          <source>React-Bootstrap has started a repo with a few basic CodeSandbox examples. &lt;a href=&quot;https://github.com/react-bootstrap/code-sandbox-examples/blob/master/README.md&quot;&gt;Click here&lt;/a&gt; to check them out.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d1ca518bffea8ca267418f053e9bd700e7e76baf" translate="yes" xml:space="preserve">
          <source>React-Bootstrap is a complete re-implementation of the Bootstrap components using React. It has &lt;strong&gt;no dependency on either &lt;code&gt;bootstrap.js&lt;/code&gt; or jQuery.&lt;/strong&gt; If you have React setup and React-Bootstrap installed, you have everything you need.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="05513e22368ac80f4ee3edeb00ac45315b79bca5" translate="yes" xml:space="preserve">
          <source>React-Bootstrap is compatible with existing Bootstrap themes. Just follow the installation instructions for your theme of choice.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3f4a587e168a743ff678b17f140ec428a194b525" translate="yes" xml:space="preserve">
          <source>React-Bootstrap replaces the Bootstrap JavaScript. Each component has been built from scratch as a true React component, without unneeded dependencies like jQuery.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="70aaf408678240fe8147379cac7afd7e2ebab4d6" translate="yes" xml:space="preserve">
          <source>React-bootstrap</source>
          <target state="translated">React-bootstrap</target>
        </trans-unit>
        <trans-unit id="d5c50a852787911049737224ad446065d2da947a" translate="yes" xml:space="preserve">
          <source>React.ReactElement</source>
          <target state="translated">React.ReactElement</target>
        </trans-unit>
        <trans-unit id="0fc2fa6704e749bb488d4af2460fa1889e6b9917" translate="yes" xml:space="preserve">
          <source>React.ReactElement&amp;lt;OverlayInjectedProps&amp;gt; | ((injected: OverlayInjectedProps) =&amp;gt; React.ReactNode)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fce48b504bf97001120d2a2a61908e46a63de996" translate="yes" xml:space="preserve">
          <source>React.Ref&amp;lt;CarouselRef&amp;gt;</source>
          <target state="translated">React.Ref&amp;lt;CarouselRef&amp;gt;</target>
        </trans-unit>
        <trans-unit id="091c2df1c2dcc9a781c0ce1b38816e76ec9321ba" translate="yes" xml:space="preserve">
          <source>ReactRef</source>
          <target state="translated">ReactRef</target>
        </trans-unit>
        <trans-unit id="1d920fff58ef0d0f937aa8908a1de256cc4799ab" translate="yes" xml:space="preserve">
          <source>Readonly</source>
          <target state="translated">Readonly</target>
        </trans-unit>
        <trans-unit id="c79fdce154df4549ddad9bfc3fa732192468ef4f" translate="yes" xml:space="preserve">
          <source>Readonly plain text</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="006e2fe4f92972fd5293e98d703638ca811957b6" translate="yes" xml:space="preserve">
          <source>Rebuilt with React</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8191921a546a8c6d9a70f872ed4e00b76e1823d7" translate="yes" xml:space="preserve">
          <source>Removed -- icons are not included in Bootstrap 4. Icon support can be provided via react-icons, fontawesome, or a similar external library.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aff6787fcf17742887660f21a91205f370a33f3b" translate="yes" xml:space="preserve">
          <source>Removed SplitButton.toggle (replaced with a &lt;code&gt;split&lt;/code&gt; prop on the basic Toggle)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3c3f014551603f33c35fd4c3058e3ef6c0784acc" translate="yes" xml:space="preserve">
          <source>Removed bsRole, use function children to render custom Toggles or Menus</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b5c55d415a9e62bc60b71ec70b3dd13f5fa7a3a2" translate="yes" xml:space="preserve">
          <source>Removed the &lt;code&gt;disabled&lt;/code&gt; prop on Dropdown, pass it directly to Dropdown.Toggle</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e91d5b8bb414f4e08ab12abc8ec8fb92d1b1fb65" translate="yes" xml:space="preserve">
          <source>Removes all borders on the table and cells, including table header.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="27d3322ef4af51fa18bf68d53b15812865373d5e" translate="yes" xml:space="preserve">
          <source>Removes the gutter spacing between &lt;code&gt;Col&lt;/code&gt;s as well as any added negative margins.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0a8a5169015d5eea0a645f1fd95149b25eebcb3a" translate="yes" xml:space="preserve">
          <source>Render a large, extra large or small modal.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8e8e775034cf07b3843b3372ef6addf87074fac8" translate="yes" xml:space="preserve">
          <source>Render a large, extra large or small modal. When not provided, the modal is rendered with medium (default) size.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9f37ff73309df9e480728b8ed264bc4ac04bc38a" translate="yes" xml:space="preserve">
          <source>Render the input as plain text. Generally used along side &lt;code&gt;readOnly&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e18eb2a0425d5a769cc1ef0065230b025d0e4f40" translate="yes" xml:space="preserve">
          <source>Renders &lt;em&gt;only&lt;/em&gt; the outer &quot;item&quot; element, use inconjunction with the new &lt;code&gt;NavLink&lt;/code&gt; component</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a60ed6b32b46c07a7865f5c90e1d8410b0b5915e" translate="yes" xml:space="preserve">
          <source>Renders a &lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt; when an &lt;code&gt;href&lt;/code&gt; is provided</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7f42379990c708a90c5ae834fc3cf3f2ec251328" translate="yes" xml:space="preserve">
          <source>Renders a properly aligned dismiss button, as well as adding extra horizontal padding to the Alert.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b8a991b241038386aff422ff0c8d4aef957b5aac" translate="yes" xml:space="preserve">
          <source>Renders the FormLabel as a &lt;code&gt;&amp;lt;Col&amp;gt;&lt;/code&gt; component (accepting all the same props), as well as adding additional styling for horizontal forms.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3e23c24f6c013676965ec556160ac4c8cd0463d6" translate="yes" xml:space="preserve">
          <source>Responsive</source>
          <target state="translated">Responsive</target>
        </trans-unit>
        <trans-unit id="3a78174a251e7eef8d4d9c279bfbcf1b2c3b870f" translate="yes" xml:space="preserve">
          <source>Responsive alignment</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e81fd7c98297a837c77b80a61e29ee0d197e0d0b" translate="yes" xml:space="preserve">
          <source>Responsive behaviors</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e3a2fffe6236dd2af3e7ef1431de60fd804f805a" translate="yes" xml:space="preserve">
          <source>Responsive embed</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e48b2183a3d27c2065d4ac19a7cfcfdbc31e522e" translate="yes" xml:space="preserve">
          <source>Responsive grids</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2749261a0e99c04011e654c65c0f4965f0e4c387" translate="yes" xml:space="preserve">
          <source>Responsive tables allow tables to be scrolled horizontally with ease.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cbf712e61a922b27041c39e1562d14c423320b85" translate="yes" xml:space="preserve">
          <source>Responsive tables allow tables to be scrolled horizontally with ease. Across every breakpoint, use &lt;code&gt;responsive&lt;/code&gt; for horizontally scrolling tables. Responsive tables are wrapped automatically in a &lt;code&gt;div&lt;/code&gt;. Use &lt;code&gt;responsive=&quot;sm&quot;&lt;/code&gt;, &lt;code&gt;responsive=&quot;md&quot;&lt;/code&gt;, &lt;code&gt;responsive=&quot;lg&quot;&lt;/code&gt;, or &lt;code&gt;responsive=&quot;xl&quot;&lt;/code&gt; as needed to create responsive tables up to a particular breakpoint. From that breakpoint and up, the table will behave normally and not scroll horizontally.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2e6d8adf5badbf6b58b98f1eb095ad8fa079d420" translate="yes" xml:space="preserve">
          <source>ResponsiveEmbed</source>
          <target state="translated">ResponsiveEmbed</target>
        </trans-unit>
        <trans-unit id="9bf7a8e8909bfd491b38561a42bb2559669d5c63" translate="yes" xml:space="preserve">
          <source>Row</source>
          <target state="translated">Row</target>
        </trans-unit>
        <trans-unit id="0c546278802966470d46359496c66d55f5385642" translate="yes" xml:space="preserve">
          <source>Run the expand animation when the component mounts, if it is initially shown</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d270fbbc401f40a92962044ec090daf7e3be5e20" translate="yes" xml:space="preserve">
          <source>Run the fade in animation when the component mounts, if it is initially shown</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b6eeeb3abd2a7bc179a6b6d5c56488b5f8c903a7" translate="yes" xml:space="preserve">
          <source>Sass</source>
          <target state="translated">Sass</target>
        </trans-unit>
        <trans-unit id="df47d07f51f6ee01df010d60693075246cccb8a4" translate="yes" xml:space="preserve">
          <source>Screenreader only label</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9bbf13751ed0b3562881084a4bec20804909aa33" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;https://getbootstrap.com/docs/4.4/getting-started/theming/&quot;&gt;the Bootstrap docs&lt;/a&gt; for more advanced use cases and details about customizing stylesheets.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8598222918d3c6e513d63060cf55e2971ded729a" translate="yes" xml:space="preserve">
          <source>Select</source>
          <target state="translated">Select</target>
        </trans-unit>
        <trans-unit id="abbd21d242082ad638ca66d2f056f84929d4c13a" translate="yes" xml:space="preserve">
          <source>SelectCallback</source>
          <target state="translated">SelectCallback</target>
        </trans-unit>
        <trans-unit id="7204f041a83e0bcf1427ef85f6eb389a9e1aecd4" translate="yes" xml:space="preserve">
          <source>Separate groups of related menu items with a divider.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b46c097eabd094623979bf08e15e695a4d9a846d" translate="yes" xml:space="preserve">
          <source>Set a custom element for this component</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6e188289d69428df8fd1ef04822b4822a72bbc95" translate="yes" xml:space="preserve">
          <source>Set a custom element for this component.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="60be6286c03531fd2ab51c7ac8afe5f7c3309d56" translate="yes" xml:space="preserve">
          <source>Set the &lt;code&gt;active&lt;/code&gt; prop to indicate the list groups current active selection.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="36cfb8bc246bca71a7c82612f813e0780e0d370a" translate="yes" xml:space="preserve">
          <source>Set the &lt;code&gt;defaultExpanded&lt;/code&gt; prop to make the Navbar start expanded. Set &lt;code&gt;collapseOnSelect&lt;/code&gt; to make the Navbar collapse automatically when the user selects an item. You can also finely control the collapsing behavior by using the &lt;code&gt;expanded&lt;/code&gt; and &lt;code&gt;onToggle&lt;/code&gt; props.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a5baa5efedb45edd71f118679604380c3c42ead5" translate="yes" xml:space="preserve">
          <source>Set the &lt;code&gt;disabled&lt;/code&gt; prop to prevent actions on a &lt;code&gt;&amp;lt;ListGroup.Item&amp;gt;&lt;/code&gt;. For elements that aren't naturally disable-able (like anchors) &lt;code&gt;onClick&lt;/code&gt; handlers are added that call &lt;code&gt;preventDefault&lt;/code&gt; to mimick disabled behavior.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5f069e93f343e32e002dd3193c476237dbe8751f" translate="yes" xml:space="preserve">
          <source>Set the &lt;code&gt;transition&lt;/code&gt; prop to &lt;code&gt;false&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2a1c46c4dbad3cd8e5bafdb0d645ba3f195bb0ef" translate="yes" xml:space="preserve">
          <source>Set the aspect ration of the embed</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="781d49e179bbe36d5a0c132e77341ee431188966" translate="yes" xml:space="preserve">
          <source>Set the column value (for any breakpoint size) to &lt;code&gt;&quot;auto&quot;&lt;/code&gt; to size columns based on the natural width of their content.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2785e1a7065cf585fbb64da1edcf5abf002b63f6" translate="yes" xml:space="preserve">
          <source>Set the visibility of the Overlay</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4d64a2e9e2fed6ad28f761d0585a37467223003d" translate="yes" xml:space="preserve">
          <source>Set's the size of all PageItems.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0a25abd33f57dabbf8f20b2f7889f522146395a0" translate="yes" xml:space="preserve">
          <source>Sets &lt;code&gt;id&lt;/code&gt; on &lt;code&gt;&amp;lt;FormControl&amp;gt;&lt;/code&gt; and &lt;code&gt;htmlFor&lt;/code&gt; on &lt;code&gt;&amp;lt;FormGroup.Label&amp;gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d971df0949a9437acff908ff71788092789fa6e2" translate="yes" xml:space="preserve">
          <source>Sets a default animation strategy for all children &lt;code&gt;&amp;lt;TabPane&amp;gt;&lt;/code&gt;s. Defaults to &lt;code&gt;&amp;lt;Fade&amp;gt;&lt;/code&gt; animation, else use &lt;code&gt;false&lt;/code&gt; to disable or a react-transition-group &lt;code&gt;&amp;lt;Transition/&amp;gt;&lt;/code&gt; component.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ef48648456d867cbe7319944e3cf889dd2d6d33f" translate="yes" xml:space="preserve">
          <source>Sets a default animation strategy for all children &lt;code&gt;&amp;lt;TabPane&amp;gt;&lt;/code&gt;s. Defaults to &lt;code&gt;&amp;lt;Fade&amp;gt;&lt;/code&gt; animation; else, use &lt;code&gt;false&lt;/code&gt; to disable, or a custom react-transition-group &lt;code&gt;&amp;lt;Transition/&amp;gt;&lt;/code&gt; component.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a4c8398da4b1f086fb1771ef04b5277962897973" translate="yes" xml:space="preserve">
          <source>Sets card background</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fcc2439af298b2c38450112809fd696e3bf5eb04" translate="yes" xml:space="preserve">
          <source>Sets card border color</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f13a267ef3d342cd0ef4c4f17fe7318c799712a2" translate="yes" xml:space="preserve">
          <source>Sets card text color</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a3e077c71135cb2f0d6d3d142c8e160cab7856fc" translate="yes" xml:space="preserve">
          <source>Sets contextual classes for list item</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="259ea4f364b79ada1b8347b5b1fa2fc12d0eea8a" translate="yes" xml:space="preserve">
          <source>Sets image as fluid image.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ae33c75993ebd1a9b074920f2f1fe86958f00c77" translate="yes" xml:space="preserve">
          <source>Sets image shape as circle.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d39f21194e15f28db4cbe7098baf81e7042bc28e" translate="yes" xml:space="preserve">
          <source>Sets image shape as rounded.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="459fb6678df86ade946608d322196ac46a888508" translate="yes" xml:space="preserve">
          <source>Sets image shape as thumbnail.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="95fb31dc9b1b7510fdddc4467fdbfa1938cbda1a" translate="yes" xml:space="preserve">
          <source>Sets list item as active</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d2ae91205e05a22a991f07d724fbef82a5125449" translate="yes" xml:space="preserve">
          <source>Sets list item state as disabled</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ac9e06b2e5557fb70577b0396990ae9940b112ae" translate="yes" xml:space="preserve">
          <source>Sets the background class of the progress bar.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f9e5b20f8ec3111ab9186999176f5d4360d8e2d3" translate="yes" xml:space="preserve">
          <source>Sets the direction the Popover is positioned towards.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8093b5edd141b0cdfe44f1af983bfd0a3d03c101" translate="yes" xml:space="preserve">
          <source>Sets the direction the Tooltip is positioned towards.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f551db0f8ccff3ed91eeb87f03e1bf2be13ca89c" translate="yes" xml:space="preserve">
          <source>Sets the size for all Buttons in the group.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5a2ebf834ee800c22bd0961249f7d6e7d9985af4" translate="yes" xml:space="preserve">
          <source>Sets the text for alert close button.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ec02bfe720092b550fe85c16c891e297d4aad9a4" translate="yes" xml:space="preserve">
          <source>Setting column widths in Row</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="392bb3993c4b107448bd8d925247a934ffb91ff4" translate="yes" xml:space="preserve">
          <source>Setting one column width</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ea5c1a20b7cfcfec8a35fb4c6a419a1314233755" translate="yes" xml:space="preserve">
          <source>Shape</source>
          <target state="translated">Shape</target>
        </trans-unit>
        <trans-unit id="99507cd7c92c30e4d28f79e62afac23a1df71a36" translate="yes" xml:space="preserve">
          <source>Show a set of slide position indicators</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a36fdb1443750dcf4c38f6f54467373a01166951" translate="yes" xml:space="preserve">
          <source>Show label that represents visual percentage. EG. 60%</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3ae7204f2da3cf2b21bc31cd479a69e48a52dcc6" translate="yes" xml:space="preserve">
          <source>Show the Carousel previous and next arrows for changing the current slide</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="93ddb2918229e9cf5d7d4d1b0f24403510584e93" translate="yes" xml:space="preserve">
          <source>Show the component; triggers the expand or collapse animation</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="16f64ab3a22a57d99eb10ed4d34ba3de3b48e516" translate="yes" xml:space="preserve">
          <source>Show the component; triggers the fade in or fade out animation</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8765f21e2cebce40791fa3714a3a1fdf62319c62" translate="yes" xml:space="preserve">
          <source>Similar to headers and footers, cards can include top and bottom &amp;ldquo;image caps&amp;rdquo;&amp;mdash;images at the top or bottom of a card.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5258809099ff2b196bc13b581c5e9cc617a0afab" translate="yes" xml:space="preserve">
          <source>Similarly, You create a split dropdown by combining the Dropdown components with another Button and a ButtonGroup.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="038ef600a2a19a257815c31bae6b2f6f0f7d1dfd" translate="yes" xml:space="preserve">
          <source>Since React-Bootstrap is built with React Javascript, state can be passed within React-Bootstrap components as a prop. It also makes it easier to manage the state as updates are made using React&amp;rsquo;s state instead of directly manipulating the state of the DOM. This also gives a lot of flexibility when creating more complex components.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="81eec781ea9e315fd7ab4eb1f36b07ef599abc1f" translate="yes" xml:space="preserve">
          <source>Since the above is such a common configuration react-bootstrap provides the &lt;code&gt;&amp;lt;DropdownButton&amp;gt;&lt;/code&gt; component to help reduce typing. Provide a &lt;code&gt;title&lt;/code&gt; prop and some &lt;code&gt;&amp;lt;DropdownItem&amp;gt;&lt;/code&gt;s and you're ready to go.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="641107d1d8496e27a5c8eb8ca13b94e0c1452180" translate="yes" xml:space="preserve">
          <source>Since the above pattern is pretty common, but verbose, we've included &lt;code&gt;&amp;lt;OverlayTrigger&amp;gt;&lt;/code&gt; component to help with common use-cases. It even has functionality to delayed show or hides, and a few different &quot;trigger&quot; events you can mix and match.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="93ab90de509cb3310cb366ad78645dbaa20f2122" translate="yes" xml:space="preserve">
          <source>Since these positioning needs are so common for Navbars, we've added convenience props for them</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="975e4abc5b3a5d1627d3e42f46f69f64d5e67558" translate="yes" xml:space="preserve">
          <source>Since we can't know every time your overlay changes size, to reposition it, you need to take manual action if you want to update the position of an Overlay in response to a change.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="770010eac81b6c40f58af580671d7c855871c5fd" translate="yes" xml:space="preserve">
          <source>Single button dropdowns</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="96de489fe3c2b4dd68982096808dc9222145c984" translate="yes" xml:space="preserve">
          <source>Sizes</source>
          <target state="translated">Sizes</target>
        </trans-unit>
        <trans-unit id="de7805a2f8658223efcb68debf683046f01bc471" translate="yes" xml:space="preserve">
          <source>Sizing</source>
          <target state="translated">Sizing</target>
        </trans-unit>
        <trans-unit id="06123034d3ef99eb7cabd5253c240d99f23dda94" translate="yes" xml:space="preserve">
          <source>Sizing modals using custom CSS</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="41086c417e80b77a31e471540f49da95e1825903" translate="yes" xml:space="preserve">
          <source>Small Table</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e8dc5c72ffb0f61f162cb5232ddbd2473ebae6b2" translate="yes" xml:space="preserve">
          <source>Spans the full width of the Button parent</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6ba637f89e86b4d0b81bb09a55653d67b770391b" translate="yes" xml:space="preserve">
          <source>Specifies a large or small button.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="88f872e15d83f2ef846b139adcb3e6fc3ff7112b" translate="yes" xml:space="preserve">
          <source>Specify event for triggering a &quot;root close&quot; toggle.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="017d89bec74125b86786b763dbc087b05b14126a" translate="yes" xml:space="preserve">
          <source>Specify whether the Component should be vertically centered</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ee8bdfd999fbaef753e4ef33ac625b4eda2c49f3" translate="yes" xml:space="preserve">
          <source>Specify whether the Component should contain a close button</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="76271c2213c298cb6aa009e2273438417a1d6a92" translate="yes" xml:space="preserve">
          <source>Specify whether the feedback is for valid or invalid fields</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d7af6d7b3df2a25a931a9fbdc133539dae7241d2" translate="yes" xml:space="preserve">
          <source>Specify whether the overlay should trigger onHide when the user clicks outside the overlay</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f30d41e0aeedc72791a7dd8a631f3b7606e9e4d1" translate="yes" xml:space="preserve">
          <source>Specify which action or actions trigger Overlay visibility</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="04b125de01eb0a9ee1aba2c694c7e2c185b09439" translate="yes" xml:space="preserve">
          <source>Spinner</source>
          <target state="translated">Spinner</target>
        </trans-unit>
        <trans-unit id="d5dcf1737c68931a6870f6a89b3d072ee33011c3" translate="yes" xml:space="preserve">
          <source>Spinners</source>
          <target state="translated">Spinners</target>
        </trans-unit>
        <trans-unit id="0709610c94e0d2807f5beb2c99b0c9ee31862845" translate="yes" xml:space="preserve">
          <source>Spinners can be used to show the loading state in your projects.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="241a98a2bcf3aa73dea410e5ed4d23039673475a" translate="yes" xml:space="preserve">
          <source>Split button dropdowns</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e616fdafd34a7f892b75df04697586543670d63d" translate="yes" xml:space="preserve">
          <source>SplitButton</source>
          <target state="translated">SplitButton</target>
        </trans-unit>
        <trans-unit id="47dd9a3d44ce99e3bbd366c9c91a60fc96281e66" translate="yes" xml:space="preserve">
          <source>Stack Overflow</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9eafca4643813baaae2f7a9fede6aaccb01f75bd" translate="yes" xml:space="preserve">
          <source>Stacked</source>
          <target state="translated">Stacked</target>
        </trans-unit>
        <trans-unit id="99cb5994ccb867fa468c0d402efe96dc39410655" translate="yes" xml:space="preserve">
          <source>Stacking</source>
          <target state="translated">Stacking</target>
        </trans-unit>
        <trans-unit id="483bb3b6bec0a6ea7ef9d6caeae40fede2c85d7d" translate="yes" xml:space="preserve">
          <source>Static Markup</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6885bf78a2248e389a821a47eae748179ab14e5f" translate="yes" xml:space="preserve">
          <source>Static backdrop</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="50bad8d21535487b06da5ecfa96ea445ec3de59e" translate="yes" xml:space="preserve">
          <source>Stay up to date on the development of React-Bootstrap and reach out to the community with these helpful resources.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e24173e895827500be9505d0b782046938141f76" translate="yes" xml:space="preserve">
          <source>Sticky top</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5bf1f66993717f93834aeb1ff2fdb4c9a5eb376f" translate="yes" xml:space="preserve">
          <source>Striped</source>
          <target state="translated">Striped</target>
        </trans-unit>
        <trans-unit id="98af488b56ed7ec9328574ffb669f4be19f63f77" translate="yes" xml:space="preserve">
          <source>Style the toggle NavLink as active</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4fa5b69fa8ee6eeab4bec26224e522e156020e03" translate="yes" xml:space="preserve">
          <source>Styles PageItem as active, and renders a &lt;code&gt;&amp;lt;span&amp;gt;&lt;/code&gt; instead of an &lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="688931069f0df1b7dcf0babe5808ec7762322394" translate="yes" xml:space="preserve">
          <source>Stylesheets</source>
          <target state="translated">Stylesheets</target>
        </trans-unit>
        <trans-unit id="56bf16009725bc08613b3df4b97c68d8b3ed2ea5" translate="yes" xml:space="preserve">
          <source>Summary of breaking changes from v0.32.0</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="521fb7097b70476a3e1f5e4b812e25f28991cb8f" translate="yes" xml:space="preserve">
          <source>Switches</source>
          <target state="translated">Switches</target>
        </trans-unit>
        <trans-unit id="fe06eb6459c87f0e497ce1805f076f104bfecf78" translate="yes" xml:space="preserve">
          <source>Tab</source>
          <target state="translated">Tab</target>
        </trans-unit>
        <trans-unit id="c81bd3953f67de060bd109fdb555ea507b72558f" translate="yes" xml:space="preserve">
          <source>TabContainer</source>
          <target state="translated">TabContainer</target>
        </trans-unit>
        <trans-unit id="2cc3075e50fcab86967cd228dfbbfb557ba154c9" translate="yes" xml:space="preserve">
          <source>TabContent</source>
          <target state="translated">TabContent</target>
        </trans-unit>
        <trans-unit id="02730315f870e1d4f1a7d3d4e3f74b34610fe122" translate="yes" xml:space="preserve">
          <source>TabPane</source>
          <target state="translated">TabPane</target>
        </trans-unit>
        <trans-unit id="7eef9e24c055f338fc00eca7bcebac231aa0fb42" translate="yes" xml:space="preserve">
          <source>Tabbed Interfaces</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6e1cfeedae6103612911b981faf72928f6b82886" translate="yes" xml:space="preserve">
          <source>Tabbed components</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0424f6e7026fa4bc2c4a7043083417315113c79b" translate="yes" xml:space="preserve">
          <source>Table</source>
          <target state="translated">Table</target>
        </trans-unit>
        <trans-unit id="193daf137ed8b89de36d47c3df5fd8f66c0e1d14" translate="yes" xml:space="preserve">
          <source>Tables</source>
          <target state="translated">Tables</target>
        </trans-unit>
        <trans-unit id="2a4d562b1d9a9c90bdede6fac8ce4f7402462b86" translate="yes" xml:space="preserve">
          <source>Tabs</source>
          <target state="translated">Tabs</target>
        </trans-unit>
        <trans-unit id="218887269ad5946d9dc53238651c90472884fb0f" translate="yes" xml:space="preserve">
          <source>Team</source>
          <target state="translated">Team</target>
        </trans-unit>
        <trans-unit id="305693072e366f8cfd9dec08de9f521bb29f3e1c" translate="yes" xml:space="preserve">
          <source>Text and Non-nav links</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9a647b38147cc15630782e90c3591dca4230ae5e" translate="yes" xml:space="preserve">
          <source>That said, it Dropdowns do work technically (sans focus management), but we don't make any claims about support.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4a80dd26d765cb9ba65bfc2c6d1edb673af5e986" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://www.w3.org/TR/wai-aria/&quot;&gt;&lt;abbr&gt;WAI&lt;/abbr&gt; &lt;abbr&gt;ARIA&lt;/abbr&gt;&lt;/a&gt; standard defines a &lt;a href=&quot;https://www.w3.org/TR/wai-aria-1.1/#menu&quot;&gt;&lt;code&gt;role=&quot;menu&quot;&lt;/code&gt; widget&lt;/a&gt;, but it's very specific to a certain kind of menu.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3107fc85e5b95c867fcaabfb823a182bf6b083b0" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&amp;lt;FormControl&amp;gt;&lt;/code&gt; component directly renders the &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; or other specified component. If you need to access the value of an uncontrolled &lt;code&gt;&amp;lt;FormControl&amp;gt;&lt;/code&gt;, attach a &lt;code&gt;ref&lt;/code&gt; to it as you would with an uncontrolled input, then call &lt;code&gt;ReactDOM.findDOMNode(ref)&lt;/code&gt; to get the DOM node. You can then interact with that node as you would with any other uncontrolled input.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e22438c16235a22090d34f7744d3dbe2f07f103a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&amp;lt;FormControl&amp;gt;&lt;/code&gt; component renders a form control with Bootstrap styling. The &lt;code&gt;&amp;lt;FormGroup&amp;gt;&lt;/code&gt; component wraps a form control with proper spacing, along with support for a label, help text, and validation state. To ensure accessibility, set &lt;code&gt;controlId&lt;/code&gt; on &lt;code&gt;&amp;lt;FormGroup&amp;gt;&lt;/code&gt;, and use &lt;code&gt;&amp;lt;FormLabel&amp;gt;&lt;/code&gt; for the label.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8e22c0f99626a054cf706e9b186b91d66e90d5d9" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&amp;lt;Tooltip&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;Popover&amp;gt;&lt;/code&gt; components do not position themselves. Instead the &lt;code&gt;&amp;lt;Overlay&amp;gt;&lt;/code&gt; (or &lt;code&gt;&amp;lt;OverlayTrigger&amp;gt;&lt;/code&gt;) components, inject &lt;code&gt;ref&lt;/code&gt; and &lt;code&gt;style&lt;/code&gt; props.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8207226dc57fb87ea2e125a6b6667feaf3af656d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; element &lt;code&gt;type&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f4da939cf4b0aa5299177f43a30b2fedfb417453" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Col&lt;/code&gt; breakpoint props also have a more complicated &lt;code&gt;object&lt;/code&gt; prop form: &lt;code&gt;{span: number, order: number, offset: number}&lt;/code&gt; for specifying offsets and ordering effects.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dee0b11d2734de7a801fa3c38904c710b27368a6" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Col&lt;/code&gt; lets you specify column widths across 5 breakpoint sizes (xs, sm, md, lg, and xl). For every breakpoint, you can specify the amount of columns to span, or set the prop to &lt;code&gt;&amp;lt;Col lg={true} /&amp;gt;&lt;/code&gt; for auto layout widths.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dddf532b56ba4c951b94f4f7e8e26845bf6d1617" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;FormGroup&lt;/code&gt; component is the easiest way to add some structure to forms. It provides a flexible container for grouping of labels, controls, optional help text, and form validation messaging. By default it only applies margin-bottom, but it picks up additional styles in &lt;code&gt;&amp;lt;Form inline &amp;gt;&lt;/code&gt; as needed. Use it with &lt;code&gt;fieldset&lt;/code&gt;s, &lt;code&gt;div&lt;/code&gt;s, or nearly any other element.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0cb92780f3e55c2aca87f88fec88b34e16c63356" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Row&lt;/code&gt; lets you specify column widths across 5 breakpoint sizes (xs, sm, md, lg, and xl). For every breakpoint, you can specify the amount of columns that will fit next to each other.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="49cfb42776228348112ec4342879dac882f35e70" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;eventKey&lt;/code&gt; of the currently active tab.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3688503db199dfb8a46cd041f7f1c206edfa2f03" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;order&lt;/code&gt; property also supports &lt;code&gt;first&lt;/code&gt; (&lt;code&gt;order: -1&lt;/code&gt;) and &lt;code&gt;last&lt;/code&gt; (&lt;code&gt;order: $columns+1&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eb862a65ed00a69a5e327ba67a2a7490b228a909" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;type&lt;/code&gt; argument will either be &lt;code&gt;&quot;tab&quot;&lt;/code&gt; or &lt;code&gt;&quot;pane&quot;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2f0ba50b983957eaf316f598ca783e7b0fc01b67" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;value&lt;/code&gt; attribute of underlying input</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e8890708bb91f550742ffbafb90c7215f9d091b7" translate="yes" xml:space="preserve">
          <source>The ARIA role describing the button toolbar. Generally the default &quot;toolbar&quot; role is correct. An &lt;code&gt;aria-label&lt;/code&gt; or &lt;code&gt;aria-labelledby&lt;/code&gt; prop is also recommended.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="856fc51591ee841cff2f6f4fc2c6aafc7c4603e6" translate="yes" xml:space="preserve">
          <source>The ARIA role for the &lt;code&gt;NavLink&lt;/code&gt;, In the context of a 'tablist' parent Nav, the role defaults to 'tab'</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b998c1c9ec1959175d08cc70ad385dcaaf2e44a6" translate="yes" xml:space="preserve">
          <source>The ARIA role for the navbar, will default to 'navigation' for Navbars whose &lt;code&gt;as&lt;/code&gt; is something other than &lt;code&gt;&amp;lt;nav&amp;gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1521e693d34efdbc9fdd00bc8c885939d71b63e1" translate="yes" xml:space="preserve">
          <source>The ARIA role of the component</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ed044160b222404a73ec311faab9a12bdc424ca3" translate="yes" xml:space="preserve">
          <source>The Alert visual variant</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5de49d1502b1a711b1f45c50d78cd0d42ef473ff" translate="yes" xml:space="preserve">
          <source>The CSS and details of Bootstrap components are rather opinionated and lengthy. React-Bootstrap simplifies this by condensing the original Bootstrap into React-styled components.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="810ec2ddbfc7936e4cf1d2a73637468daa8e8213" translate="yes" xml:space="preserve">
          <source>The Default behavior is &lt;code&gt;false&lt;/code&gt;&lt;strong&gt;unless&lt;/strong&gt; the Menu has a &lt;code&gt;role=&quot;menu&quot;&lt;/code&gt; where it will default to &lt;code&gt;keyboard&lt;/code&gt; to match the recommended &lt;a href=&quot;https://www.w3.org/TR/wai-aria-practices-1.1/#menubutton&quot;&gt;ARIA Authoring practices&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d3d2e1d3f1699e355bd34248099054b2f74a392f" translate="yes" xml:space="preserve">
          <source>The Form &lt;code&gt;ref&lt;/code&gt; will be forwarded to the underlying element, which means, unless it's rendered &lt;code&gt;as&lt;/code&gt; a composite component, it will be a DOM node, when resolved.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bad3fedf6866150a636327a3e452067792d10426" translate="yes" xml:space="preserve">
          <source>The FormCheck &lt;code&gt;ref&lt;/code&gt; will be forwarded to the underlying input element, which means it will be a DOM node, when resolved.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fdd171c2caf5adb982a2b8233452548ec9bd5eb6" translate="yes" xml:space="preserve">
          <source>The FormControl &lt;code&gt;ref&lt;/code&gt; will be forwarded to the underlying input element, which means unless &lt;code&gt;as&lt;/code&gt; is a composite component, it will be a DOM node, when resolved.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c2b794f87db30a8729698c6801fdf6331f3d4322" translate="yes" xml:space="preserve">
          <source>The FormGroup &lt;code&gt;ref&lt;/code&gt; will be forwarded to the underlying element. Unless the FormGroup is rendered &lt;code&gt;as&lt;/code&gt; a composite component, it will be a DOM node, when resolved.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e0ff4b03f6af7722acea0d6b0471fbba47939834" translate="yes" xml:space="preserve">
          <source>The FormLabel &lt;code&gt;ref&lt;/code&gt; will be forwarded to the underlying element. Unless the FormLabel is rendered &lt;code&gt;as&lt;/code&gt; a composite component, it will be a DOM node, when resolved.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="139b6402ea150b383814cf63252aa14faf90e25f" translate="yes" xml:space="preserve">
          <source>The FormText &lt;code&gt;ref&lt;/code&gt; will be forwarded to the underlying element. Unless the FormText is rendered &lt;code&gt;as&lt;/code&gt; a composite component, it will be a DOM node, when resolved.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9f75c95fd60796a24428e1f37610db913f0a9136" translate="yes" xml:space="preserve">
          <source>The HTML for attribute for associating the label with an input</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5cc4738290a7297e10b49353c925b74714da9acf" translate="yes" xml:space="preserve">
          <source>The HTML href attribute for the &lt;code&gt;NavLink&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="45cd00f440bf5939f7ac05c200779a5eb382ad58" translate="yes" xml:space="preserve">
          <source>The HTML input &lt;code&gt;type&lt;/code&gt;, which is only relevant if &lt;code&gt;as&lt;/code&gt; is &lt;code&gt;'input'&lt;/code&gt; (the default).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1583a3c1bfca6137d9018d54ee8f8c59752ab45d" translate="yes" xml:space="preserve">
          <source>The HTML input name, used to group like checkboxes or radio buttons together semantically</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eaba51b66e3334f9666c71c6687ad70d02fbd3d8" translate="yes" xml:space="preserve">
          <source>The Modal Header, Title, Body, and Footer components are available as static properties the &lt;code&gt;&amp;lt;Modal/&amp;gt;&lt;/code&gt; component, but you can also, import them directly like: &lt;code&gt;require(&quot;react-bootstrap/ModalHeader&quot;)&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e6024ca5be2285821bb9c23238fcfb504b8a5f73" translate="yes" xml:space="preserve">
          <source>The React component model gives us more control over form and function of each component.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="57f85f4c65cd8c2896b9de683bf6253620b054d9" translate="yes" xml:space="preserve">
          <source>The above demonstrates how flexible the component model can be. But if you didn't want to roll your own versions we've included a straight-forward &lt;code&gt;&amp;lt;NavDropdown&amp;gt;&lt;/code&gt; that works for most cases.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="544cbc69f0e579ee12739dee1b64f9956344b16e" translate="yes" xml:space="preserve">
          <source>The above handles styling, But requires manually controlling the &lt;code&gt;checked&lt;/code&gt; state for each radio or checkbox in the group.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6562ea9afac0da496a53ec857f7db1431811cb2f" translate="yes" xml:space="preserve">
          <source>The active state of the NavItem item.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="78f3b115e66268779d65f8e1ca4c380ae6e83c0f" translate="yes" xml:space="preserve">
          <source>The amount of time to delay between automatically cycling an item. If &lt;code&gt;null&lt;/code&gt;, carousel will not automatically cycle.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b4be12b0237932c495c2d57881211ad664753a5b" translate="yes" xml:space="preserve">
          <source>The amount of time to delay between automatically cycling this specific item. Will default to the Carousel's &lt;code&gt;interval&lt;/code&gt; prop value if none is specified.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ff2f1ff4363b6f3b9280cfa9eb083f31acac8209" translate="yes" xml:space="preserve">
          <source>The aspect ratio is controlled via the &lt;code&gt;aspectRatio&lt;/code&gt; prop.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="be2ba5f7c9ff3e7fbdf8d0edd118e51c3533435e" translate="yes" xml:space="preserve">
          <source>The basic Dropdown is composed of a wrapping &lt;code&gt;Dropdown&lt;/code&gt; and inner &lt;code&gt;&amp;lt;DropdownMenu&amp;gt;&lt;/code&gt;, and &lt;code&gt;&amp;lt;DropdownToggle&amp;gt;&lt;/code&gt;. By default the &lt;code&gt;&amp;lt;DropdownToggle&amp;gt;&lt;/code&gt; will render a &lt;code&gt;Button&lt;/code&gt; component and accepts all the same props.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="82fabb51c075616233d0d0c13a8cdae8b87cd72c" translate="yes" xml:space="preserve">
          <source>The basic, variant-less, &lt;code&gt;Nav&lt;/code&gt; component does not include any &lt;code&gt;active&lt;/code&gt; prop styling!</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2581bf05030414eb4d116e21eb97865959dbf403" translate="yes" xml:space="preserve">
          <source>The best way to consume React-Bootstrap is via the npm package which you can install with &lt;code&gt;npm&lt;/code&gt; (or &lt;code&gt;yarn&lt;/code&gt; if you prefer).</source>
          <target state="new"/>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
