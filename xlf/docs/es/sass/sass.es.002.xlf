<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="es" datatype="htmlbody" original="sass">
    <body>
      <group id="sass">
        <trans-unit id="851a2a27867c5ea0d06fb7ad6ca3007c1728423a" translate="yes" xml:space="preserve">
          <source>Makes a color darker. Takes a color and a number between 0% and 100%, and returns a color with the lightness decreased by that amount.</source>
          <target state="translated">Hace un color más oscuro.Toma un color y un número entre el 0% y el 100%,y devuelve un color con la luminosidad disminuida en esa cantidad.</target>
        </trans-unit>
        <trans-unit id="77ee8f07a8c8bad26149c6d0da1b59832f988738" translate="yes" xml:space="preserve">
          <source>Makes a color less saturated. Takes a color and a number between 0% and 100%, and returns a color with the saturation decreased by that value.</source>
          <target state="translated">Hace que un color sea menos saturado.Toma un color y un número entre el 0% y el 100%,y devuelve un color con la saturación disminuida por ese valor.</target>
        </trans-unit>
        <trans-unit id="647de436b4025a40c3c05b643dfe7af49febeb1d" translate="yes" xml:space="preserve">
          <source>Makes a color lighter. Takes a color and a number between &lt;code&gt;0%&lt;/code&gt; and &lt;code&gt;100%&lt;/code&gt;, and returns a color with the lightness increased by that amount.</source>
          <target state="translated">Hace un color m&amp;aacute;s claro. Toma un color y un n&amp;uacute;mero entre &lt;code&gt;0%&lt;/code&gt; y &lt;code&gt;100%&lt;/code&gt; , y devuelve un color con la claridad aumentada en esa cantidad.</target>
        </trans-unit>
        <trans-unit id="1202144871a6d134734e77e6f3d6ff43dcdf0d0b" translate="yes" xml:space="preserve">
          <source>Makes a color more opaque. Takes a color and a number between 0 and 1, and returns a color with the opacity increased by that amount.</source>
          <target state="translated">Hace que el color sea más opaco.Toma un color y un número entre 0 y 1,y devuelve un color con la opacidad aumentada en esa cantidad.</target>
        </trans-unit>
        <trans-unit id="908e36df6b3e3510d087b869b3ee05a7946f3ab4" translate="yes" xml:space="preserve">
          <source>Makes a color more saturated. Takes a color and a number between 0% and 100%, and returns a color with the saturation increased by that amount.</source>
          <target state="translated">Hace que el color sea más saturado.Toma un color y un número entre el 0% y el 100%,y devuelve un color con la saturación incrementada en esa cantidad.</target>
        </trans-unit>
        <trans-unit id="10e046f0668046295e6f040e6154687feaedeac3" translate="yes" xml:space="preserve">
          <source>Makes a color more transparent. Takes a color and a number between 0 and 1, and returns a color with the opacity decreased by that amount.</source>
          <target state="translated">Hace un color más transparente.Toma un color y un número entre 0 y 1,y devuelve un color con la opacidad disminuida en esa cantidad.</target>
        </trans-unit>
        <trans-unit id="04a4606724a73e5ff1ba9485b82d41dc451cb728" translate="yes" xml:space="preserve">
          <source>Mandatory and Optional Extends</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6c492e19352987aad4627ca16fec2584efdd4af1" translate="yes" xml:space="preserve">
          <source>Many &lt;a href=&quot;sass/script/functions&quot;&gt;useful functions&lt;/a&gt; for manipulating colors and other values</source>
          <target state="translated">Muchas &lt;a href=&quot;sass/script/functions&quot;&gt;funciones &amp;uacute;tiles&lt;/a&gt; para manipular colores y otros valores.</target>
        </trans-unit>
        <trans-unit id="99d42d39d47641e2c830f19e5708bbe88e43bf4a" translate="yes" xml:space="preserve">
          <source>Many CSS properties start with the same prefix that acts as a kind of namespace. For example, &lt;code&gt;font-family&lt;/code&gt;, &lt;code&gt;font-size&lt;/code&gt;, and &lt;code&gt;font-weight&lt;/code&gt; all start with &lt;code&gt;font-&lt;/code&gt;. Sass makes this easier and less redundant by allowing property declarations to be nested. The outer property names are added to the inner, separated by a hyphen.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0e45c14832666db8154c98279d7b4ef0f7fdfc0e" translate="yes" xml:space="preserve">
          <source>Many of these functions take or return numbers, called &lt;em&gt;indexes&lt;/em&gt;, that refer to the elements in a list. The index 1 indicates the first element of the list. Note that this is different than many programming languages where indexes start at 0! Sass also makes it easy to refer to the end of a list. The index -1 refers to the last element in a list, -2 refers to the second-to-last, and so on.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="087ea5ef70a667c3f4a3b6d1d5862a41c81236d1" translate="yes" xml:space="preserve">
          <source>Many-to-Many Mode</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="366296dc9a88f7a8f38a18287666cfd9d309343d" translate="yes" xml:space="preserve">
          <source>Many-to-many Mode</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f7bb1487586dc664a1a3a3e010343aeb82600e81" translate="yes" xml:space="preserve">
          <source>Many-to-many mode compiles one or more input files to one or more output files. The inputs are separated from the outputs with colons. It can also compile all Sass files in a directory to CSS files with the same names in another directory.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c003d0031df8db1646d141722584209580bad863" translate="yes" xml:space="preserve">
          <source>Many-to-many mode compiles one or more input files to one or more output files. The inputs are separated from the outputs with colons. It can also compile all Sass files in a directory to CSS files with the same names in another directory. Many-to-many mode is enabled when any argument contains a colon, &lt;em&gt;or&lt;/em&gt; when the &lt;a href=&quot;#update&quot;&gt;&lt;code&gt;--update&lt;/code&gt; flag&lt;/a&gt; or the &lt;a href=&quot;#watch&quot;&gt;&lt;code&gt;--watch&lt;/code&gt; flag&lt;/a&gt; is passed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="80b0a029997a082113570a2bb733b56c05b12359" translate="yes" xml:space="preserve">
          <source>Many-to-many mode will only compile stylesheets whose dependencies have been modified more recently than the corresponding CSS file was generated. It will also print status messages when updating stylesheets.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="80071cd75107cd5c4afdb2571725ea6733631038" translate="yes" xml:space="preserve">
          <source>Maps</source>
          <target state="translated">Maps</target>
        </trans-unit>
        <trans-unit id="b262d9ae1e64d70be3bbb65675f5b105183f3e1e" translate="yes" xml:space="preserve">
          <source>Maps allow any Sass values to be used as their keys. The &lt;a href=&quot;../operators/equality&quot;&gt;&lt;code&gt;==&lt;/code&gt; operator&lt;/a&gt; is used to determine whether two keys are the same.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cce96232fc4038e65cda3f21c77a761f06c9cc13" translate="yes" xml:space="preserve">
          <source>Maps are all about associating keys and values, so naturally there&amp;rsquo;s a way to get the value associated with a key: the &lt;a href=&quot;../modules/map#get&quot;&gt;&lt;code&gt;map.get($map, $key)&lt;/code&gt; function&lt;/a&gt;! This function returns the value in the map associated with the given key. It returns &lt;a href=&quot;null&quot;&gt;&lt;code&gt;null&lt;/code&gt;&lt;/a&gt; if the map doesn&amp;rsquo;t contain the key.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7908a2bbd7a8ad31b242280b31b2c7d491579a76" translate="yes" xml:space="preserve">
          <source>Maps can also be used anywhere lists can. When used by a list function, a map is treated as a list of pairs. For example, &lt;code&gt;(key1: value1, key2: value2)&lt;/code&gt; would be treated as the nested list &lt;code&gt;key1 value1, key2 value2&lt;/code&gt; by list functions. Lists cannot be treated as maps, though, with the exception of the empty list. &lt;code&gt;()&lt;/code&gt; represents both a map with no key/value pairs and a list with no elements.</source>
          <target state="translated">Los mapas tambi&amp;eacute;n se pueden usar en cualquier lugar donde las listas. Cuando lo utiliza una funci&amp;oacute;n de lista, un mapa se trata como una lista de pares. Por ejemplo, &lt;code&gt;(key1: value1, key2: value2)&lt;/code&gt; tratar&amp;iacute;a como la lista anidada &lt;code&gt;key1 value1, key2 value2&lt;/code&gt; por las funciones de lista. Sin embargo, las listas no pueden tratarse como mapas, con la excepci&amp;oacute;n de la lista vac&amp;iacute;a. &lt;code&gt;()&lt;/code&gt; representa tanto un mapa sin pares clave / valor como una lista sin elementos.</target>
        </trans-unit>
        <trans-unit id="89e949ab7dcea4e2be5a81f1c90709f5ee38dbbd" translate="yes" xml:space="preserve">
          <source>Maps cannot be converted to plain CSS. Using one as the value of a variable or an argument to a CSS function will cause an error. Use the &lt;code&gt;inspect($value)&lt;/code&gt; function to produce an output string useful for debugging maps.</source>
          <target state="translated">Los mapas no se pueden convertir a CSS simple. El uso de uno como valor de una variable o argumento de una funci&amp;oacute;n CSS provocar&amp;aacute; un error. Utilice la funci&amp;oacute;n &lt;code&gt;inspect($value)&lt;/code&gt; para producir una cadena de salida &amp;uacute;til para depurar mapas.</target>
        </trans-unit>
        <trans-unit id="ed2d94a1db9fc5b83f3a946bfb51b010f8a1984d" translate="yes" xml:space="preserve">
          <source>Maps created through this API are still forbidden from having duplicate keys.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="73855d8f1e07ea5cf14e0b18c6224668001cc571" translate="yes" xml:space="preserve">
          <source>Maps in Sass are &lt;em&gt;immutable&lt;/em&gt;, which means that the contents of a map value never changes. Sass&amp;rsquo;s map functions all return new maps rather than modifying the originals. Immutability helps avoid lots of sneaky bugs that can creep in when the same map is shared across different parts of the stylesheet.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dd7d356183b77929938ce65e1b5ffc1230ed4bc0" translate="yes" xml:space="preserve">
          <source>Maps in Sass hold pairs of keys and values, and make it easy to look up a value by its corresponding key. They&amp;rsquo;re written &lt;code&gt;(&amp;lt;expression&amp;gt;: &amp;lt;expression&amp;gt;, &amp;lt;expression&amp;gt;: &amp;lt;expression&amp;gt;)&lt;/code&gt;. The &lt;a href=&quot;../syntax/structure#expressions&quot;&gt;expression&lt;/a&gt; before the &lt;code&gt;:&lt;/code&gt; is the key, and the expression after is the value associated with that key. The keys must be unique, but the values may be duplicated. Unlike &lt;a href=&quot;lists&quot;&gt;lists&lt;/a&gt;, maps &lt;em&gt;must&lt;/em&gt; be written with parentheses around them. A map with no pairs is written &lt;code&gt;()&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="18460ede0e77cbca4b62b2e50b96144bebae56ee" translate="yes" xml:space="preserve">
          <source>Maps represent an association between keys and values, where keys are used to look up values. They make it easy to collect values into named groups and access those groups dynamically. They have no direct parallel in CSS, although they're syntactically similar to media query expressions:</source>
          <target state="translated">Los mapas representan una asociación entre claves y valores,donde las claves se usan para buscar valores.Facilitan la recolección de valores en grupos nombrados y el acceso a esos grupos dinámicamente.No tienen paralelo directo en CSS,aunque son sintácticamente similares a las expresiones de consulta de los medios:</target>
        </trans-unit>
        <trans-unit id="6651c921f3e6878f503603068099966453a6ba18" translate="yes" xml:space="preserve">
          <source>Members (variables, functions, and mixins) loaded with &lt;code&gt;@use&lt;/code&gt; are only visible in the stylesheet that loads them. Other stylesheets will need to write their own &lt;code&gt;@use&lt;/code&gt; rules if they also want to access them. This helps make it easy to figure out exactly where each member is coming from. If you want to load members from many files at once, you can use the &lt;a href=&quot;forward&quot;&gt;&lt;code&gt;@forward&lt;/code&gt; rule&lt;/a&gt; to forward them all from one shared file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="266e0db2e6092e7da33438bebb8386fdab1f84e9" translate="yes" xml:space="preserve">
          <source>Merges two maps together into a new map. Keys in &lt;code&gt;$map2&lt;/code&gt; will take precedence over keys in &lt;code&gt;$map1&lt;/code&gt;.</source>
          <target state="translated">Fusiona dos mapas en un mapa nuevo. Las claves en &lt;code&gt;$map2&lt;/code&gt; tendr&amp;aacute;n prioridad sobre las claves en &lt;code&gt;$map1&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="51a9c2b299ed6b9e7a2c1942c4f2f202f049e8e3" translate="yes" xml:space="preserve">
          <source>Merging Selector Sequences</source>
          <target state="translated">Fusión de secuencias de selección</target>
        </trans-unit>
        <trans-unit id="dca984afd74a0089c1d5a5816e4de2e8d46a60b5" translate="yes" xml:space="preserve">
          <source>Migrations</source>
          <target state="translated">Migrations</target>
        </trans-unit>
        <trans-unit id="e0c1c8591cf6a520cc156585232fdfa4562258f3" translate="yes" xml:space="preserve">
          <source>Migrator</source>
          <target state="translated">Migrator</target>
        </trans-unit>
        <trans-unit id="1a5d17590464c69e30696f59e46e452b8da18b54" translate="yes" xml:space="preserve">
          <source>Mixes two colors together. Specifically, takes the average of each of the RGB components, optionally weighted by the given percentage. The opacity of the colors is also considered when weighting the components.</source>
          <target state="translated">Mezcla dos colores juntos.Específicamente,toma el promedio de cada uno de los componentes RGB,opcionalmente ponderado por el porcentaje dado.La opacidad de los colores también se considera al ponderar los componentes.</target>
        </trans-unit>
        <trans-unit id="3e03964482bfe1b1c6309d26cc15ab431a314d03" translate="yes" xml:space="preserve">
          <source>Mixin Directives #mixins</source>
          <target state="translated">Directivas de la mezcla #mixinas</target>
        </trans-unit>
        <trans-unit id="12f1da765fb7717db8da107e51c52eb9c8a76e44" translate="yes" xml:space="preserve">
          <source>Mixin definitions can also include other mixins. For example:</source>
          <target state="translated">Las definiciones de las mezclas también pueden incluir otras mezclas.Por ejemplo:</target>
        </trans-unit>
        <trans-unit id="6cec7617bbb6d9892fc290c647e0a6b541abeb1d" translate="yes" xml:space="preserve">
          <source>Mixin names, like all Sass identifiers, treat hyphens and underscores as identical. This means that &lt;code&gt;reset-list&lt;/code&gt; and &lt;code&gt;reset_list&lt;/code&gt; both refer to the same mixin. This is a historical holdover from the very early days of Sass, when it &lt;em&gt;only&lt;/em&gt; allowed underscores in identifier names. Once Sass added support for hyphens to match CSS&amp;rsquo;s syntax, the two were made equivalent to make migration easier.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d634308003ff858f289d2833f637dfc9bee3fc78" translate="yes" xml:space="preserve">
          <source>Mixins</source>
          <target state="translated">Mixins</target>
        </trans-unit>
        <trans-unit id="e55eee6e21d1bac315ca1a356e8d30a8a5b61967" translate="yes" xml:space="preserve">
          <source>Mixins allow you to define styles that can be re-used throughout the stylesheet without needing to resort to non-semantic classes like &lt;code&gt;.float-left&lt;/code&gt;. Mixins can also contain full CSS rules, and anything else allowed elsewhere in a Sass document. They can even take &lt;a href=&quot;#mixin-arguments&quot;&gt;arguments&lt;/a&gt; which allows you to produce a wide variety of styles with very few mixins.</source>
          <target state="translated">Los mixins le permiten definir estilos que se pueden reutilizar en toda la hoja de estilo sin necesidad de recurrir a clases no sem&amp;aacute;nticas como &lt;code&gt;.float-left&lt;/code&gt; . Los mixins tambi&amp;eacute;n pueden contener reglas CSS completas y cualquier otra cosa permitida en otro lugar en un documento de Sass. Incluso pueden aceptar &lt;a href=&quot;#mixin-arguments&quot;&gt;argumentos&lt;/a&gt; que le permiten producir una amplia variedad de estilos con muy pocos mixins.</target>
        </trans-unit>
        <trans-unit id="a14ae4a02552d5310b5b307c5a6669df8e7abf30" translate="yes" xml:space="preserve">
          <source>Mixins allow you to define styles that can be re-used throughout your stylesheet. They make it easy to avoid using non-semantic classes like &lt;code&gt;.float-left&lt;/code&gt;, and to distribute collections of styles in libraries.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3a0ecb07e9c0f451b790fb7125d9f99ec780ec5d" translate="yes" xml:space="preserve">
          <source>Mixins are defined using the &lt;code&gt;@mixin&lt;/code&gt; at-rule, which is written &lt;code&gt;@mixin &amp;lt;name&amp;gt; { ... }&lt;/code&gt; or &lt;code&gt;@mixin name(&amp;lt;arguments...&amp;gt;) { ... }&lt;/code&gt;. A mixin&amp;rsquo;s name can be any Sass identifier, and it can contain any &lt;a href=&quot;../syntax/structure#statements&quot;&gt;statement&lt;/a&gt; other than &lt;a href=&quot;../syntax/structure#top-level-statements&quot;&gt;top-level statements&lt;/a&gt;. They can be used to encapsulate styles that can be dropped into a single &lt;a href=&quot;../style-rules&quot;&gt;style rule&lt;/a&gt;; they can contain style rules of their own that can be nested in other rules or included at the top level of the stylesheet; or they can just serve to modify variables.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="644fdc872f40164f56f1c53cce947da35dec5fbf" translate="yes" xml:space="preserve">
          <source>Mixins are defined with the &lt;code&gt;@mixin&lt;/code&gt; directive. It's followed by the name of the mixin and optionally the &lt;a href=&quot;#mixin-arguments&quot;&gt;arguments&lt;/a&gt;, and a block containing the contents of the mixin. For example, the &lt;code&gt;large-text&lt;/code&gt; mixin is defined as follows:</source>
          <target state="translated">Los mixins se definen con la directiva &lt;code&gt;@mixin&lt;/code&gt; . Le sigue el nombre del mixin y opcionalmente los &lt;a href=&quot;#mixin-arguments&quot;&gt;argumentos&lt;/a&gt; , y un bloque que contiene el contenido del mixin. Por ejemplo, el mixin de &lt;code&gt;large-text&lt;/code&gt; se define de la siguiente manera:</target>
        </trans-unit>
        <trans-unit id="8abeb939278636d23f3812346051fac3995b1507" translate="yes" xml:space="preserve">
          <source>Mixins are included in the document with the &lt;code&gt;@include&lt;/code&gt; directive. This takes the name of a mixin and optionally &lt;a href=&quot;#mixin-arguments&quot;&gt;arguments to pass to it&lt;/a&gt;, and includes the styles defined by that mixin into the current rule. For example:</source>
          <target state="translated">Los mixins est&amp;aacute;n incluidos en el documento con la directiva &lt;code&gt;@include&lt;/code&gt; . Esto toma el nombre de un mixin y, opcionalmente, &lt;a href=&quot;#mixin-arguments&quot;&gt;argumentos para pasarle&lt;/a&gt; , e incluye los estilos definidos por ese mixin en la regla actual. Por ejemplo:</target>
        </trans-unit>
        <trans-unit id="0abd91185955b760fd8e194eea9c215e7514a33c" translate="yes" xml:space="preserve">
          <source>Mixins are included into the current context using the &lt;code&gt;@include&lt;/code&gt; at-rule, which is written &lt;code&gt;@include &amp;lt;name&amp;gt;&lt;/code&gt; or &lt;code&gt;@include &amp;lt;name&amp;gt;(&amp;lt;arguments...&amp;gt;)&lt;/code&gt;, with the name of the mixin being included.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aa625b8e1fe09d8119662f87727f1fd539968fe6" translate="yes" xml:space="preserve">
          <source>Mixins can also be included using explicit keyword arguments. For instance, the above example could be written as:</source>
          <target state="translated">Las mezclas también pueden ser incluidas usando argumentos explícitos de palabras clave.Por ejemplo,el ejemplo anterior podría escribirse como:</target>
        </trans-unit>
        <trans-unit id="a5c96c9da9afb1e3ab9aeab4756923db18e85058" translate="yes" xml:space="preserve">
          <source>Mixins can also specify default values for their arguments using the normal variable-setting syntax. Then when the mixin is included, if it doesn't pass in that argument, the default value will be used instead. For example:</source>
          <target state="translated">Los mixins también pueden especificar valores por defecto para sus argumentos utilizando la sintaxis normal de establecimiento de variables.Entonces,cuando se incluye el mixin,si no pasa en ese argumento,se usará el valor por defecto en su lugar.Por ejemplo:</target>
        </trans-unit>
        <trans-unit id="cee9487bef7a98638f1813c34014ac1e4a7ef631" translate="yes" xml:space="preserve">
          <source>Mixins can also take arguments, which allows their behavior to be customized each time they&amp;rsquo;re called. The arguments are specified in the &lt;code&gt;@mixin&lt;/code&gt; rule after the mixin&amp;rsquo;s name, as a list of variable names surrounded by parentheses. The mixin must then be included with the same number of arguments in the form of &lt;a href=&quot;../syntax/structure#expressions&quot;&gt;SassScript expressions&lt;/a&gt;. The values of these expression are available within the mixin&amp;rsquo;s body as the corresponding variables.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a89f1e192461e5943e97df4ea266b05de3cfe71b" translate="yes" xml:space="preserve">
          <source>Mixins can take SassScript values as arguments, which are given when the mixin is included and made available within the mixin as variables.</source>
          <target state="translated">Los mixins pueden tomar como argumentos los valores de SassScript,que se dan cuando el mixin se incluye y se hace disponible dentro del mixin como variables.</target>
        </trans-unit>
        <trans-unit id="2071f293bfe403300472d64fe85c7676303d0010" translate="yes" xml:space="preserve">
          <source>Mixins may also be included outside of any rule (that is, at the root of the document) as long as they don't directly define any properties or use any parent references. For example:</source>
          <target state="translated">Las mezclas también pueden incluirse fuera de cualquier regla (es decir,en la raíz del documento)siempre que no definan directamente ninguna propiedad ni utilicen ninguna referencia parental.Por ejemplo:</target>
        </trans-unit>
        <trans-unit id="1b75de159e94ab7dfa1b34d271e0ee2373620128" translate="yes" xml:space="preserve">
          <source>Mixins may also contain selectors, possibly mixed with properties. The selectors can even contain &lt;a href=&quot;#referencing_parent_selectors_&quot;&gt;parent references&lt;/a&gt;. For example:</source>
          <target state="translated">Los mixins tambi&amp;eacute;n pueden contener selectores, posiblemente mezclados con propiedades. Los selectores pueden incluso contener &lt;a href=&quot;#referencing_parent_selectors_&quot;&gt;referencias de padres&lt;/a&gt; . Por ejemplo:</target>
        </trans-unit>
        <trans-unit id="2e0ba38fcb196c03060e6db7ef49eab994c721b6" translate="yes" xml:space="preserve">
          <source>Mixins may include themselves. This is different than the behavior of Sass versions prior to 3.3, where mixin recursion was forbidden.</source>
          <target state="translated">Las mezclas pueden incluirse a sí mismas.Esto es diferente al comportamiento de las versiones de Sass anteriores a la 3.3,donde la recursión de las mezclas estaba prohibida.</target>
        </trans-unit>
        <trans-unit id="11ace01bca95506e406ba754b7248182fab3d1d8" translate="yes" xml:space="preserve">
          <source>Mixins that only define descendent selectors can be safely mixed into the top most level of a document.</source>
          <target state="translated">Las mezclas que sólo definen selectores descendentes pueden ser mezcladas con seguridad en el nivel más alto de un documento.</target>
        </trans-unit>
        <trans-unit id="b8ff02892916ff59f7fbd4e617fccd01f6bca576" translate="yes" xml:space="preserve">
          <source>Module</source>
          <target state="translated">Module</target>
        </trans-unit>
        <trans-unit id="03ee36e7d4d406da6169a9a269a027aeecb4cec4" translate="yes" xml:space="preserve">
          <source>Modules are only loaded once, so if you change the configuration after you &lt;code&gt;@import&lt;/code&gt; a module for the first time (even indirectly), the change will be ignored if you &lt;code&gt;@import&lt;/code&gt; the module again.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b7eac0786d726187f2fd764b601f5ededf17daa6" translate="yes" xml:space="preserve">
          <source>Modules will always be loaded relative to the current file first, though. Load paths will only be used if no relative file exists that matches the module&amp;rsquo;s URL. This ensures that you can&amp;rsquo;t accidentally mess up your relative imports when you add a new library.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e212feca960df74d558bb69cf520167281ac39e5" translate="yes" xml:space="preserve">
          <source>Most of the time, it&amp;rsquo;s a good idea to use &lt;a href=&quot;strings#quoted&quot;&gt;quoted strings&lt;/a&gt; rather than &lt;a href=&quot;strings#unquoted&quot;&gt;unquoted strings&lt;/a&gt; for map keys. This is because some values, such as color names, may &lt;em&gt;look&lt;/em&gt; like unquoted strings but actually be other types. To avoid confusing problems down the line, just use quotes!</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6caa57f1b284ddb2fbcb690abae7336beef21a73" translate="yes" xml:space="preserve">
          <source>Most popular Node.js build systems have integrations available for the JSAPI:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4ecffc55002b5b51a6ea33821a9ca1648bf908e4" translate="yes" xml:space="preserve">
          <source>Most web servers compress the CSS they serve using an algorithm that&amp;rsquo;s very good at handling repeated chunks of identical text. This means that, although mixins may produce more CSS than extends, they probably won&amp;rsquo;t substantially increase the amount your users need to download. So choose the feature that makes the most sense for your use-case, not the one that generates the least CSS!</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4d5c195b3ec1480b097649cc98e70b7c7295f4d9" translate="yes" xml:space="preserve">
          <source>Much of Sass&amp;rsquo;s extra functionality comes in the form of new &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/At-rule&quot;&gt;at-rules&lt;/a&gt; it adds on top of CSS:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d16a27d69c336f36f8b8c3be089eb20a3976fee1" translate="yes" xml:space="preserve">
          <source>Multiple Assignment #each-multi-assign</source>
          <target state="translated">Asignación múltiple #Cada una de las múltiples asignaciones</target>
        </trans-unit>
        <trans-unit id="e6f913e5657c2f46bca6d86b0b282bdb4e92d9bf" translate="yes" xml:space="preserve">
          <source>Multiple Extends</source>
          <target state="translated">Múltiples extensiones</target>
        </trans-unit>
        <trans-unit id="6b9c3fd36c58a4b311728f37c3faf47f2b86cda9" translate="yes" xml:space="preserve">
          <source>Multiple extends can also be written using a comma-separated list of selectors. For example, &lt;code&gt;@extend .error, .attention&lt;/code&gt; is the same as &lt;code&gt;@extend .error; @extend .attention&lt;/code&gt;.</source>
          <target state="translated">Tambi&amp;eacute;n se pueden escribir m&amp;uacute;ltiples extensiones usando una lista de selectores separados por comas. Por ejemplo, &lt;code&gt;@extend .error, .attention&lt;/code&gt; es lo mismo que &lt;code&gt;@extend .error; @extend .attention&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="ba6f5c598a8196a3ad3093fcbf81e9ebc9a9bbaa" translate="yes" xml:space="preserve">
          <source>Named arguments can be passed in any order, and arguments with default values can be omitted. Since the named arguments are variable names, underscores and dashes can be used interchangeably.</source>
          <target state="translated">Los argumentos con nombre pueden ser pasados en cualquier orden,y los argumentos con valores por defecto pueden ser omitidos.Dado que los argumentos nombrados son nombres de variables,se pueden utilizar guiones bajos y guiones rojos indistintamente.</target>
        </trans-unit>
        <trans-unit id="d1f60bbdf9d3e6d11e707a834a9fa47911129fbc" translate="yes" xml:space="preserve">
          <source>Negative index values address elements in reverse order, starting with the last element in the list.</source>
          <target state="translated">Los valores de índice negativos se dirigen a los elementos en orden inverso,empezando por el último elemento de la lista.</target>
        </trans-unit>
        <trans-unit id="2e21957ba8ac2ad32ca0fe1899ea29dd3dc4d523" translate="yes" xml:space="preserve">
          <source>Nested &lt;code&gt;@import&lt;/code&gt; #nested-import</source>
          <target state="translated">Anidado &lt;code&gt;@import&lt;/code&gt; # nested-import</target>
        </trans-unit>
        <trans-unit id="ea53187d0b8860192e4cc973b4edf4179ca436b1" translate="yes" xml:space="preserve">
          <source>Nested Properties</source>
          <target state="translated">Propiedades anidadas</target>
        </trans-unit>
        <trans-unit id="ecf40457f10c33b29daa2a84e20b485cd1d251d0" translate="yes" xml:space="preserve">
          <source>Nested Rules</source>
          <target state="translated">Reglas anidadas</target>
        </trans-unit>
        <trans-unit id="ded4993ce5217af403db83036f4428e8476a2e11" translate="yes" xml:space="preserve">
          <source>Nested imports are very useful for scoping third-party stylesheets, but if you&amp;rsquo;re the author of the stylesheet you&amp;rsquo;re importing, it&amp;rsquo;s usually a better idea to write your styles in a &lt;a href=&quot;mixin&quot;&gt;mixin&lt;/a&gt; and include that mixin in the nested context. A mixin can be used in more flexible ways, and it&amp;rsquo;s clearer when looking at the imported stylesheet how it&amp;rsquo;s intended to be used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="029abc8fcd094e12c6bd6cb1af59a9ff787923a7" translate="yes" xml:space="preserve">
          <source>Nested properties</source>
          <target state="translated">Propiedades anidadas</target>
        </trans-unit>
        <trans-unit id="f0b610f173b363c6d397168ae6e235e8c6ca1741" translate="yes" xml:space="preserve">
          <source>Nested rules</source>
          <target state="translated">Reglas anidadas</target>
        </trans-unit>
        <trans-unit id="898fb9c1d3df88b05af2c35f92fa9855403317fd" translate="yes" xml:space="preserve">
          <source>Nested rules are clever about handling selector lists (that is, comma-separated selectors). Each complex selector (the ones between the commas) is nested separately, and then they&amp;rsquo;re combined back into a selector list.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8ba546c34feebcc571b499703908b859182411c0" translate="yes" xml:space="preserve">
          <source>Nested rules are super helpful, but they can also make it hard to visualize how much CSS you&amp;rsquo;re actually generating. The deeper you nest, the more bandwidth it takes to serve your CSS and the more work it takes the browser to render it. Keep those selectors shallow!</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="829996697cf657d3999063e276100b291e8b02d6" translate="yes" xml:space="preserve">
          <source>Nested style is the default Sass style, because it reflects the structure of the CSS styles and the HTML document they're styling. Each property has its own line, but the indentation isn't constant. Each rule is indented based on how deeply it's nested. For example:</source>
          <target state="translated">El estilo anidado es el estilo Sass por defecto,porque refleja la estructura de los estilos CSS y el documento HTML que están estilizando.Cada propiedad tiene su propia línea,pero la indentación no es constante.Cada regla está indentada en base a la profundidad de su nido.Por ejemplo:</target>
        </trans-unit>
        <trans-unit id="500e991d7263822a1c7bc95c88315929abd16088" translate="yes" xml:space="preserve">
          <source>Nested style is very useful when looking at large CSS files: it allows you to easily grasp the structure of the file without actually reading anything.</source>
          <target state="translated">El estilo anidado es muy útil cuando se miran grandes archivos CSS:permite captar fácilmente la estructura del archivo sin tener que leer nada.</target>
        </trans-unit>
        <trans-unit id="f06563daf6842a8e082fd4615e320fc869bb69d9" translate="yes" xml:space="preserve">
          <source>Nesting</source>
          <target state="translated">Nesting</target>
        </trans-unit>
        <trans-unit id="bf84d228c3d06053863c78671c4f2260ed4d3b10" translate="yes" xml:space="preserve">
          <source>New possible values may be added in the future. It may return either &lt;code&gt;list&lt;/code&gt; or &lt;code&gt;map&lt;/code&gt; for &lt;code&gt;()&lt;/code&gt;, depending on whether or not it was returned by a &lt;a href=&quot;map&quot;&gt;map function&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="42c9a5ee2dab1779e68f9b7a64ca2d27ba2ceeb6" translate="yes" xml:space="preserve">
          <source>No matter how a Sass color is originally written, it can be used with both HSL-based and RGB-based functions!</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ea89deb3b3ac3462ef826d2e89bb608cba87394f" translate="yes" xml:space="preserve">
          <source>Node Sass</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="033bb91d5d01ceb3484df5688dfd173443293f8f" translate="yes" xml:space="preserve">
          <source>Node Sass and older versions of Dart Sass support loading files with the extension &lt;code&gt;.css&lt;/code&gt;, but contrary to the specification they&amp;rsquo;re treated as SCSS files rather than being parsed as CSS. This behavior has been deprecated in Node Sass, and an update is in the works to load them as plain CSS instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="72afbf7761abcd7a500b7e8851fd9c6a7a3b749e" translate="yes" xml:space="preserve">
          <source>Normally when you assign a value to a variable, if that variable already had a value, its old value is overwritten. But if you&amp;rsquo;re writing a Sass library, you might want to allow your users to configure your library&amp;rsquo;s variables before you use them to generate CSS.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f8b80d909c92f046f3dca9e5eef78526694d5082" translate="yes" xml:space="preserve">
          <source>Normally when you extend a selector, it's an error if that &lt;code&gt;@extend&lt;/code&gt; doesn't work. For example, if you write &lt;code&gt;a.important {@extend .notice}&lt;/code&gt;, it's an error if there are no selectors that contain &lt;code&gt;.notice&lt;/code&gt;. It's also an error if the only selector containing &lt;code&gt;.notice&lt;/code&gt; is &lt;code&gt;h1.notice&lt;/code&gt;, since &lt;code&gt;h1&lt;/code&gt; conflicts with &lt;code&gt;a&lt;/code&gt; and so no new selector would be generated.</source>
          <target state="translated">Normalmente, cuando extiende un selector, es un error si &lt;code&gt;@extend&lt;/code&gt; no funciona. Por ejemplo, si escribe &lt;code&gt;a.important {@extend .notice}&lt;/code&gt; , es un error si no hay selectores que contengan &lt;code&gt;.notice&lt;/code&gt; . Tambi&amp;eacute;n es un error si el &amp;uacute;nico selector que contiene &lt;code&gt;.notice&lt;/code&gt; es &lt;code&gt;h1.notice&lt;/code&gt; , ya que &lt;code&gt;h1&lt;/code&gt; entra en conflicto con &lt;code&gt;a&lt;/code&gt; , por lo que no se generar&amp;iacute;a un nuevo selector.</target>
        </trans-unit>
        <trans-unit id="123af529f72c6cde57409cdfddfd0d2f87ec972b" translate="yes" xml:space="preserve">
          <source>Normally, every argument a function declares must be passed when that function is included. However, you can make an argument optional by defining a &lt;em&gt;default value&lt;/em&gt; which will be used if that arguments isn&amp;rsquo;t passed. Default values use the same syntax as &lt;a href=&quot;../variables&quot;&gt;variable declarations&lt;/a&gt;: the variable name, followed by a colon and a &lt;a href=&quot;../syntax/structure#expressions&quot;&gt;SassScript expression&lt;/a&gt;. This makes it easy to define flexible function APIs that can be used in simple or complex ways.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0cdb53eefbdfee3b12bbcd04afce357361a5861c" translate="yes" xml:space="preserve">
          <source>Normally, every argument a mixin declares must be passed when that mixin is included. However, you can make an argument optional by defining a &lt;em&gt;default value&lt;/em&gt; which will be used if that arguments isn&amp;rsquo;t passed. Default values use the same syntax as &lt;a href=&quot;../variables&quot;&gt;variable declarations&lt;/a&gt;: the variable name, followed by a colon and a &lt;a href=&quot;../syntax/structure#expressions&quot;&gt;SassScript expression&lt;/a&gt;. This makes it easy to define flexible mixin APIs that can be used in simple or complex ways.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="36600b2266d9bc4bf738096ec98ade6b06055762" translate="yes" xml:space="preserve">
          <source>Normally, if an &lt;code&gt;@extend&lt;/code&gt; doesn&amp;rsquo;t match any selectors in the stylesheet, Sass will produce an error. This helps protect from typos or from renaming a selector without renaming the selectors that inherit from it. Extends that require that the extended selector exists are &lt;em&gt;mandatory&lt;/em&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8d5e7d2febd1afc13a90b92a80b1aeafd1143806" translate="yes" xml:space="preserve">
          <source>Not all identifiers are parsed as unquoted strings:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8a8ffe4eac13c64877326301c06fafbcccc8ae5e" translate="yes" xml:space="preserve">
          <source>Note that &lt;code&gt;$selector&lt;/code&gt;&lt;strong&gt;must be&lt;/strong&gt; a &lt;a href=&quot;http://dev.w3.org/csswg/selectors4/#compound&quot;&gt;compound selector&lt;/a&gt;. That means it cannot contain commas or spaces. It also means that unlike other selector functions, this takes only strings, not lists.</source>
          <target state="translated">Tenga en cuenta que &lt;code&gt;$selector&lt;/code&gt; &lt;strong&gt;debe ser&lt;/strong&gt; un &lt;a href=&quot;http://dev.w3.org/csswg/selectors4/#compound&quot;&gt;selector compuesto&lt;/a&gt; . Eso significa que no puede contener comas ni espacios. Tambi&amp;eacute;n significa que, a diferencia de otras funciones de selector, esto solo toma cadenas, no listas.</target>
        </trans-unit>
        <trans-unit id="080f6eb3b348145b6c90e2a7243299a34e1dd466" translate="yes" xml:space="preserve">
          <source>Note that because Sass maps are &lt;a href=&quot;#immutability&quot;&gt;immutable&lt;/a&gt;, &lt;code&gt;map.set()&lt;/code&gt; and &lt;code&gt;map.merge()&lt;/code&gt; do not modify the original list.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="693df4e52e4ff8d7b0244ad166c78c841dadae76" translate="yes" xml:space="preserve">
          <source>Note that colors with an alpha channel (those created with the &lt;a href=&quot;sass/script/functions#rgba-instance_method&quot;&gt;rgba&lt;/a&gt; or &lt;a href=&quot;sass/script/functions#hsla-instance_method&quot;&gt;hsla&lt;/a&gt; functions) must have the same alpha value in order for color arithmetic to be done with them. The arithmetic doesn't affect the alpha value. For example:</source>
          <target state="translated">Tenga en cuenta que los colores con un canal alfa (los creados con las funciones &lt;a href=&quot;sass/script/functions#rgba-instance_method&quot;&gt;rgba&lt;/a&gt; o &lt;a href=&quot;sass/script/functions#hsla-instance_method&quot;&gt;hsla&lt;/a&gt; ) deben tener el mismo valor alfa para que la aritm&amp;eacute;tica de colores se realice con ellos. La aritm&amp;eacute;tica no afecta el valor alfa. Por ejemplo:</target>
        </trans-unit>
        <trans-unit id="ac74dad262169f45fae2cdcb5fd6e40b4714ec50" translate="yes" xml:space="preserve">
          <source>Note that for these implementations, the &lt;code&gt;$alpha&lt;/code&gt; argument is &lt;em&gt;required&lt;/em&gt; if the function name &lt;code&gt;hsla()&lt;/code&gt; is used, and &lt;em&gt;forbidden&lt;/em&gt; if the function name &lt;code&gt;hsl()&lt;/code&gt; is used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0a444c8d85a7c0b8c797f36d3a2b3e89f3c45b43" translate="yes" xml:space="preserve">
          <source>Note that for these implementations, the &lt;code&gt;$alpha&lt;/code&gt; argument is &lt;em&gt;required&lt;/em&gt; if the function name &lt;code&gt;rgba()&lt;/code&gt; is used, and &lt;em&gt;forbidden&lt;/em&gt; if the function name &lt;code&gt;rgb()&lt;/code&gt; is used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0de89687514028e280bf5b669d5f5d71ff81cee1" translate="yes" xml:space="preserve">
          <source>Note that if a quoted string is added to an unquoted string (that is, the quoted string is to the left of the &lt;code&gt;+&lt;/code&gt;), the result is a quoted string. Likewise, if an unquoted string is added to a quoted string (the unquoted string is to the left of the &lt;code&gt;+&lt;/code&gt;), the result is an unquoted string. For example:</source>
          <target state="translated">Tenga en cuenta que si se agrega una cadena entre comillas a una cadena sin comillas (es decir, la cadena entre comillas est&amp;aacute; a la izquierda del &lt;code&gt;+&lt;/code&gt; ), el resultado es una cadena entre comillas. Del mismo modo, si se agrega una cadena sin comillas a una cadena entre comillas (la cadena sin comillas est&amp;aacute; a la izquierda del &lt;code&gt;+&lt;/code&gt; ), el resultado es una cadena sin comillas. Por ejemplo:</target>
        </trans-unit>
        <trans-unit id="4a7263acabd39aa1aeb77388ab202b8bd00638a1" translate="yes" xml:space="preserve">
          <source>Note that map keys can be any Sass data type (even another map) and the syntax for declaring a map allows arbitrary SassScript expressions that will be evaluated to determine the key.</source>
          <target state="translated">Tenga en cuenta que las claves de los mapas pueden ser de cualquier tipo de datos Sass (incluso de otro mapa)y la sintaxis para declarar un mapa permite expresiones SassScript arbitrarias que serán evaluadas para determinar la clave.</target>
        </trans-unit>
        <trans-unit id="cbe4b8b6895d926247872a4e26c38d5715d96998" translate="yes" xml:space="preserve">
          <source>Note that this command does &lt;em&gt;not&lt;/em&gt; generate CSS files. For that, use the &lt;code&gt;sass&lt;/code&gt; command described elsewhere.</source>
          <target state="translated">Tenga en cuenta que este comando &lt;em&gt;no&lt;/em&gt; genera archivos CSS. Para eso, use el comando &lt;code&gt;sass&lt;/code&gt; descrito en otra parte.</target>
        </trans-unit>
        <trans-unit id="6f4a910276bcd8ea1488e67ca3bd4f98c83aad73" translate="yes" xml:space="preserve">
          <source>Note that this is different than CSS, which specifies how to recover from most errors rather than failing immediately. This is one of the few cases where SCSS isn&amp;rsquo;t &lt;em&gt;strictly&lt;/em&gt; a superset of CSS. However, it&amp;rsquo;s much more useful to Sass users to see errors immediately, rather than having them passed through to the CSS output.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="798ca29359409d2bb8b40c00921c5354ce6bb1c2" translate="yes" xml:space="preserve">
          <source>Note that unlike &lt;a href=&quot;#join&quot;&gt;&lt;code&gt;list.join()&lt;/code&gt;&lt;/a&gt;, if &lt;code&gt;$val&lt;/code&gt; is a list it&amp;rsquo;s nested within the returned list rather than having all its elements added to the returned list.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="183963367a5b456c3047b44221867d6cef4d1e24" translate="yes" xml:space="preserve">
          <source>Note that unlike some languages, the first character in a Sass string is number 1, the second number 2, and so forth.</source>
          <target state="translated">Note que a diferencia de algunos idiomas,el primer carácter de una cadena de Sass es el número 1,el segundo el número 2,y así sucesivamente.</target>
        </trans-unit>
        <trans-unit id="68ca367d5eae7afa2e54d9286cb52633f444a09d" translate="yes" xml:space="preserve">
          <source>Note that unlike some languages, the first item in a Sass list is number 1, the second number 2, and so forth.</source>
          <target state="translated">Note que a diferencia de algunos idiomas,el primer ítem en una lista Sass es el número 1,el segundo el número 2,y así sucesivamente.</target>
        </trans-unit>
        <trans-unit id="e7d5e88030367084f32b1e63e394a792c554cdc8" translate="yes" xml:space="preserve">
          <source>Note that you may not include a partial and a non-partial with the same name in the same directory. For example, &lt;code&gt;_colors.scss&lt;/code&gt; may not exist alongside &lt;code&gt;colors.scss&lt;/code&gt;.</source>
          <target state="translated">Tenga en cuenta que no puede incluir un parcial y un no parcial con el mismo nombre en el mismo directorio. Por ejemplo, &lt;code&gt;_colors.scss&lt;/code&gt; puede no existir junto con &lt;code&gt;colors.scss&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="f8e5b80cd153ea290fe80ec507174a87bc55c594" translate="yes" xml:space="preserve">
          <source>Now everything with class &lt;code&gt;.seriousError&lt;/code&gt; also has class &lt;code&gt;.error&lt;/code&gt;, and everything with class &lt;code&gt;.criticalError&lt;/code&gt; has class &lt;code&gt;.seriousError&lt;/code&gt;&lt;em&gt;and&lt;/em&gt; class &lt;code&gt;.error&lt;/code&gt;. It's compiled to:</source>
          <target state="translated">Ahora todo con la clase &lt;code&gt;.seriousError&lt;/code&gt; tambi&amp;eacute;n tiene la clase &lt;code&gt;.error&lt;/code&gt; , y todo con la clase &lt;code&gt;.criticalError&lt;/code&gt; tiene la clase &lt;code&gt;.seriousError&lt;/code&gt; &lt;em&gt;y la&lt;/em&gt; clase &lt;code&gt;.error&lt;/code&gt; . Est&amp;aacute; compilado para:</target>
        </trans-unit>
        <trans-unit id="ab0e1a3421b3343f3824ef813b9855587c7d9d08" translate="yes" xml:space="preserve">
          <source>Null values are treated as empty strings for string interpolation:</source>
          <target state="translated">Los valores nulos se tratan como cadenas vacías para la interpolación de cadenas:</target>
        </trans-unit>
        <trans-unit id="e399d7ce3aaf6001026fc3298df535b4d6c80f77" translate="yes" xml:space="preserve">
          <source>Number Operations</source>
          <target state="translated">Operaciones de número</target>
        </trans-unit>
        <trans-unit id="c0c3b5ef095430d85fb2cd85d4948d220c3f5146" translate="yes" xml:space="preserve">
          <source>Number operations</source>
          <target state="translated">Número de operaciones</target>
        </trans-unit>
        <trans-unit id="7e53821f70ae16079c4a6a64c52a91fae645bc5f" translate="yes" xml:space="preserve">
          <source>Numbers</source>
          <target state="translated">Numbers</target>
        </trans-unit>
        <trans-unit id="c663fdca24c7159c6bd1b244fb7e89d6041729f0" translate="yes" xml:space="preserve">
          <source>Numbers are rounded to 10 digits of precision &lt;em&gt;lazily&lt;/em&gt; when they&amp;rsquo;re used in a place where precision is relevant. This means that math functions will work with the full number value internally to avoid accumulating extra rounding errors.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7add39ef0137375d64b6e0da1f8af3370308cddd" translate="yes" xml:space="preserve">
          <source>Numbers can&amp;rsquo;t be used as the left-hand value, because they have &lt;a href=&quot;numeric&quot;&gt;their own operators&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4458336f995ee954ae912a60445e848b6d7e2ba1" translate="yes" xml:space="preserve">
          <source>Numbers in Sass have two components: the number itself, and its units. For example, in &lt;code&gt;16px&lt;/code&gt; the number is &lt;code&gt;16&lt;/code&gt; and the unit is &lt;code&gt;px&lt;/code&gt;. Numbers can have no units, and they can have complex units. See &lt;a href=&quot;#units&quot;&gt;Units&lt;/a&gt; below for more details.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0d864be7003009ab9323673cc5aa11aa6064e96d" translate="yes" xml:space="preserve">
          <source>Numbers with incompatible units can&amp;rsquo;t be compared.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c56a326279c48d05e1b61788ac9e9d3dedacabac" translate="yes" xml:space="preserve">
          <source>Numbers with incompatible units can&amp;rsquo;t be used with addition, subtraction, or modulo.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2d95b983f6c9e56b561073c45b8366ac693fc7cf" translate="yes" xml:space="preserve">
          <source>Numeric Operators</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b54293c92bcdf1550000796fb4b3f602c64581d8" translate="yes" xml:space="preserve">
          <source>Of course, selectors aren&amp;rsquo;t just used on their own in style rules. Sass knows to extend &lt;em&gt;everywhere&lt;/em&gt; the selector is used. This ensures that your elements are styled exactly as if they matched the extended selector.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9d8672fb5aad66a7b49f343531639b5bd3fc9fb1" translate="yes" xml:space="preserve">
          <source>Often it's more useful to use &lt;a href=&quot;sass/script/functions&quot;&gt;color functions&lt;/a&gt; than to try to use color arithmetic to achieve the same effect.</source>
          <target state="translated">A menudo es m&amp;aacute;s &amp;uacute;til usar &lt;a href=&quot;sass/script/functions&quot;&gt;funciones de color&lt;/a&gt; que intentar usar aritm&amp;eacute;tica de colores para lograr el mismo efecto.</target>
        </trans-unit>
        <trans-unit id="40deaf425eb79f678e7bbcc711dbc6c75a76f1bc" translate="yes" xml:space="preserve">
          <source>Older Sass versions allowed &lt;code&gt;!global&lt;/code&gt; to be used for a variable that doesn&amp;rsquo;t exist yet. This behavior was deprecated to make sure each stylesheet declares the same variables no matter how it&amp;rsquo;s executed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2d649544f98508586062c569381e1cc2845d8025" translate="yes" xml:space="preserve">
          <source>Older implementations of LibSass and Ruby Sass didn&amp;rsquo;t support lists with square brackets.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7e37838a29deb996fb1aefeb35e62fe2dfe97a80" translate="yes" xml:space="preserve">
          <source>Older versions of LibSass and Ruby Sass parsed custom property declarations just like any other property declaration, allowing the full range of SassScript expressions as values. Even when using these versions, it&amp;rsquo;s recommended that you use interpolation to inject SassScript values for forwards-compatibility.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b50d95bcb356944982379a6144f75e2538ea60b4" translate="yes" xml:space="preserve">
          <source>On its own, &lt;code&gt;@at-root&lt;/code&gt; only gets rid of &lt;a href=&quot;../style-rules&quot;&gt;style rules&lt;/a&gt;. Any at-rules like &lt;a href=&quot;css#media&quot;&gt;&lt;code&gt;@media&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;css#supports&quot;&gt;&lt;code&gt;@supports&lt;/code&gt;&lt;/a&gt; will be left in. If this isn&amp;rsquo;t what you want, though, you can control exactly what it includes or includes using syntax like &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/Media_Queries/Using_media_queries#Targeting_media_features&quot;&gt;media query features&lt;/a&gt;, written &lt;code&gt;@at-root (with: &amp;lt;rules...&amp;gt;) { ... }&lt;/code&gt; or &lt;code&gt;@at-root (without: &amp;lt;rules...&amp;gt;) { ... }&lt;/code&gt;. The &lt;code&gt;(without: ...)&lt;/code&gt; query tells Sass which rules should be excluded; the &lt;code&gt;(with: ...)&lt;/code&gt; query excludes all rules &lt;em&gt;except&lt;/em&gt; those that are listed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c1bb7de4e712a1102afa787f557e76b7b4a19cb6" translate="yes" xml:space="preserve">
          <source>On their own, lists don't do much, but the &lt;a href=&quot;sass/script/functions#list-functions&quot;&gt;SassScript list functions&lt;/a&gt; make them useful. The &lt;a href=&quot;sass/script/functions#nth-instance_method&quot;&gt;&lt;code&gt;nth&lt;/code&gt; function&lt;/a&gt; can access items in a list, the &lt;a href=&quot;sass/script/functions#join-instance_method&quot;&gt;&lt;code&gt;join&lt;/code&gt; function&lt;/a&gt; can join multiple lists together, and the &lt;a href=&quot;sass/script/functions#append-instance_method&quot;&gt;&lt;code&gt;append&lt;/code&gt; function&lt;/a&gt; can add items to lists. The &lt;a href=&quot;#each-directive&quot;&gt;&lt;code&gt;@each&lt;/code&gt; directive&lt;/a&gt; can also add styles for each item in a list.</source>
          <target state="translated">Por s&amp;iacute; solas, las listas no hacen mucho, pero las &lt;a href=&quot;sass/script/functions#list-functions&quot;&gt;funciones de lista de SassScript las&lt;/a&gt; hacen &amp;uacute;tiles. La &lt;a href=&quot;sass/script/functions#nth-instance_method&quot;&gt; &lt;code&gt;nth&lt;/code&gt; funci&amp;oacute;n&lt;/a&gt; puede acceder a los elementos de una lista, la &lt;a href=&quot;sass/script/functions#join-instance_method&quot;&gt;funci&amp;oacute;n de &lt;/a&gt; &lt;code&gt;join&lt;/code&gt; puede unir varias listas y la &lt;a href=&quot;sass/script/functions#append-instance_method&quot;&gt;funci&amp;oacute;n de &lt;/a&gt; &lt;code&gt;append&lt;/code&gt; puede agregar elementos a las listas. La &lt;a href=&quot;#each-directive&quot;&gt;directiva &lt;/a&gt; &lt;code&gt;@each&lt;/code&gt; tambi&amp;eacute;n puede agregar estilos para cada elemento en una lista.</target>
        </trans-unit>
        <trans-unit id="70b57e7b3d16bab3bdd24991cb5e543ffb1d4d18" translate="yes" xml:space="preserve">
          <source>On their own, without any use of &lt;code&gt;@extend&lt;/code&gt;, rulesets that use placeholder selectors will not be rendered to CSS.</source>
          <target state="translated">Por s&amp;iacute; mismos, sin el uso de &lt;code&gt;@extend&lt;/code&gt; , los conjuntos de reglas que usan selectores de marcador de posici&amp;oacute;n no se procesar&amp;aacute;n en CSS.</target>
        </trans-unit>
        <trans-unit id="7f5c31ad520a711b13920ae472c88c9a76daa966" translate="yes" xml:space="preserve">
          <source>One-to-One Mode</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="24571e3b4baecae7440bbeb4a2255d252ac930d0" translate="yes" xml:space="preserve">
          <source>One-to-one mode compiles a single input file (&lt;code&gt;input.scss&lt;/code&gt;) to a single output location (&lt;code&gt;output.css&lt;/code&gt;). If no output location is passed, the compiled CSS is printed to the terminal.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="edb159cbb61b421bbd771c449269f563dafce1a0" translate="yes" xml:space="preserve">
          <source>One-to-one mode compiles a single input file (&lt;code&gt;input.scss&lt;/code&gt;) to a single output location (&lt;code&gt;output.css&lt;/code&gt;). If no output location is passed, the compiled CSS is printed to the terminal. If no input &lt;em&gt;or&lt;/em&gt; output is passed, the CSS is read from &lt;a href=&quot;https://en.wikipedia.org/wiki/Standard_streams#Standard_input_(stdin)&quot;&gt;standard input&lt;/a&gt; and printed to the terminal.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cf10f4fc5f8c1b96d8d45a350d364f2fb15e1585" translate="yes" xml:space="preserve">
          <source>Only &lt;em&gt;simple selectors&lt;/em&gt;&amp;mdash;individual selectors like &lt;code&gt;.info&lt;/code&gt; or &lt;code&gt;a&lt;/code&gt;&amp;mdash;can be extended. If &lt;code&gt;.message.info&lt;/code&gt; could be extended, the definition of &lt;code&gt;@extend&lt;/code&gt; says that elements matching the extender would be styled as though they matched &lt;code&gt;.message.info&lt;/code&gt;. That&amp;rsquo;s just the same as matching both &lt;code&gt;.message&lt;/code&gt; and &lt;code&gt;.info&lt;/code&gt;, so there wouldn&amp;rsquo;t be any benefit in writing that instead of &lt;code&gt;@extend .message, .info&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2a082a950bb023fe1441646f549c479c4653830f" translate="yes" xml:space="preserve">
          <source>Only Dart Sass currently supports &lt;code&gt;@use&lt;/code&gt;. Users of other implementations must use the &lt;a href=&quot;at-rules/import&quot;&gt;&lt;code&gt;@import&lt;/code&gt; rule&lt;/a&gt; instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2a6ca7c41d0c8d1f014f27078da3ddbc2740ad16" translate="yes" xml:space="preserve">
          <source>Only Dart Sass currently supports &lt;code&gt;@use&lt;/code&gt;. Users of other implementations must use the &lt;a href=&quot;import&quot;&gt;&lt;code&gt;@import&lt;/code&gt; rule&lt;/a&gt; instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="910233028133b5559bedec3464f28101d7700c64" translate="yes" xml:space="preserve">
          <source>Only Dart Sass currently supports loading built-in modules with &lt;code&gt;@use&lt;/code&gt;. Users of other implementations must call functions using their global names instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ea513e19214391d7fd937c9ac0305b2259c66810" translate="yes" xml:space="preserve">
          <source>Only Dart Sass currently supports this function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="90eec0f0afd2a96532c59e2797cf4fc9dbbaecaa" translate="yes" xml:space="preserve">
          <source>Only Dart Sass currently supports this mixin.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a970adf23a6034dda28b3b855d26e02bf91c5d5a" translate="yes" xml:space="preserve">
          <source>Only Dart Sass supports calling &lt;code&gt;map.get()&lt;/code&gt; with more than two arguments.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="71d07d036bdc525bdaaeee2d72cecd917c927d73" translate="yes" xml:space="preserve">
          <source>Only Dart Sass supports calling &lt;code&gt;map.has-key()&lt;/code&gt; with more than two arguments.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2e8fe6ecdb955bb280deb608924c91a08f3dbc21" translate="yes" xml:space="preserve">
          <source>Only Dart Sass supports calling &lt;code&gt;map.merge()&lt;/code&gt; with more than two arguments.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="702b3281eb7a66baba422cd8e40b47d38304ec7a" translate="yes" xml:space="preserve">
          <source>Only Dart Sass supports calling &lt;code&gt;map.set()&lt;/code&gt; with more than three arguments.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="27eecb4694b35a30f383992bf0ccc2c715666339" translate="yes" xml:space="preserve">
          <source>Only the first ten digits of a number after the decimal point will be included in the generated CSS.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a1fdaa6b2a846c8fcf18d414bf8c61db610eda6a" translate="yes" xml:space="preserve">
          <source>Operations</source>
          <target state="translated">Operations</target>
        </trans-unit>
        <trans-unit id="ee8ffe5145f760b95344b6c4011186301159b8f2" translate="yes" xml:space="preserve">
          <source>Operations like &lt;a href=&quot;../operators/equality&quot;&gt;&lt;code&gt;==&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../operators/relational&quot;&gt;&lt;code&gt;&amp;gt;=&lt;/code&gt;&lt;/a&gt; will consider two numbers equivalent if they&amp;rsquo;re the same up to the tenth digit after the decimal point.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e90414358dbfff0a68e4eb5d68a16978cf197d5a" translate="yes" xml:space="preserve">
          <source>Operators</source>
          <target state="translated">Operators</target>
        </trans-unit>
        <trans-unit id="d691ad463ac25297b3313f781ce7492928f99d06" translate="yes" xml:space="preserve">
          <source>Optional Arguments</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6bf5da9c080bee3a8142586c412aa39971137eee" translate="yes" xml:space="preserve">
          <source>Options</source>
          <target state="translated">Options</target>
        </trans-unit>
        <trans-unit id="9d722ae6ba6a2a258f254b324106a2e548339c2b" translate="yes" xml:space="preserve">
          <source>Options can be set by setting the &lt;a href=&quot;http://sass-lang.com/documentation/Sass/Plugin/Configuration.html#options-instance_method&quot;&gt;Sass::Plugin#options&lt;/a&gt; hash in &lt;code&gt;environment.rb&lt;/code&gt; in Rails or &lt;code&gt;config.ru&lt;/code&gt; in Rack...</source>
          <target state="translated">Las opciones se pueden configurar configurando el hash de &lt;a href=&quot;http://sass-lang.com/documentation/Sass/Plugin/Configuration.html#options-instance_method&quot;&gt;Sass :: Plugin # options&lt;/a&gt; en &lt;code&gt;environment.rb&lt;/code&gt; en Rails o &lt;code&gt;config.ru&lt;/code&gt; en Rack ...</target>
        </trans-unit>
        <trans-unit id="6f526dde77cafc7928204d8dac6318bed6f35f64" translate="yes" xml:space="preserve">
          <source>Or it can be used with a block containing multiple selectors:</source>
          <target state="translated">O puede usarse con un bloque que contenga múltiples selectores:</target>
        </trans-unit>
        <trans-unit id="991e00c3f59f6acfcfc8e5941ba49ff4fa5a9c11" translate="yes" xml:space="preserve">
          <source>Or the &lt;a href=&quot;https://pub.dartlang.org/documentation/sass/latest/sass/sass-library.html&quot;&gt;Dart API documentation&lt;/a&gt; if you&amp;rsquo;re calling it from Dart.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9f1762b33b20d79d93b528934ab2323b45f0b56c" translate="yes" xml:space="preserve">
          <source>Order of Operations</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aac9354f153ca67ac7552c458c3f44c1c1e84690" translate="yes" xml:space="preserve">
          <source>Other Expressions</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="551852c7028ddd04d28686d5a46f202fe2ad7cb7" translate="yes" xml:space="preserve">
          <source>Other Functions</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9cb6f2fb01dfa81e12bc1e11f0e7b676e54669fd" translate="yes" xml:space="preserve">
          <source>Other Options</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="202290c40aa058f54ae62f34c03332e3c0bc905d" translate="yes" xml:space="preserve">
          <source>Other Statements</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d4f2619ee691b00d4f190fa8da9ca100f4cc10ea" translate="yes" xml:space="preserve">
          <source>Other rules that use &lt;code&gt;.error&lt;/code&gt; will work for &lt;code&gt;.seriousError&lt;/code&gt; as well. For example, if we have special styles for errors caused by hackers:</source>
          <target state="translated">Otras reglas que usan &lt;code&gt;.error&lt;/code&gt; tambi&amp;eacute;n funcionar&amp;aacute;n para &lt;code&gt;.seriousError&lt;/code&gt; . Por ejemplo, si tenemos estilos especiales para errores causados ​​por piratas inform&amp;aacute;ticos:</target>
        </trans-unit>
        <trans-unit id="40613b5d36cb20b7a8b3a1d9a6d819b039917ec9" translate="yes" xml:space="preserve">
          <source>Otherwise, UTF-8 is used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8452d751fd66064e8d7e9ffc8192f29e849a7c39" translate="yes" xml:space="preserve">
          <source>Otherwise, the lowercase Unicode escape is included with a trailing space. For example, &lt;code&gt;\7Fx&lt;/code&gt; returns the unquoted string &lt;code&gt;\7f x&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d66c03870df0ff9473afa65ef1992159ba004acc" translate="yes" xml:space="preserve">
          <source>Otherwise, use the table of contents for the language reference!</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4bed336194a9a5c86b6a734f03b3570d2aae1a68" translate="yes" xml:space="preserve">
          <source>Output</source>
          <target state="translated">Output</target>
        </trans-unit>
        <trans-unit id="3aef76f8ba6fd4806d49ff4edaf1a4218d4bfc97" translate="yes" xml:space="preserve">
          <source>Output Style</source>
          <target state="translated">Estilo de salida</target>
        </trans-unit>
        <trans-unit id="a2aaba6b325189ed96937a41610eb44a978a20f8" translate="yes" xml:space="preserve">
          <source>Output Styles</source>
          <target state="translated">Estilos de salida</target>
        </trans-unit>
        <trans-unit id="2df118b905265e6c5d11e3b228c057a3b6eccb04" translate="yes" xml:space="preserve">
          <source>Overloads:</source>
          <target state="translated">Overloads:</target>
        </trans-unit>
        <trans-unit id="0efc2e6be4c23b9a513d7ce0dcff8ed80e8912e7" translate="yes" xml:space="preserve">
          <source>Overview</source>
          <target state="translated">Overview</target>
        </trans-unit>
        <trans-unit id="2802c22f4a72970e1d5045219159766660c1f721" translate="yes" xml:space="preserve">
          <source>Page Sections</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="381c775599d6e4185d4410725809e360928357cd" translate="yes" xml:space="preserve">
          <source>Parameters:</source>
          <target state="translated">Parameters:</target>
        </trans-unit>
        <trans-unit id="e5755d5078efbd7029e3f77b63cab946bb4a078c" translate="yes" xml:space="preserve">
          <source>Parent Selector</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f9627107a88876f4aaf6d7e0b0c19984c3a631ae" translate="yes" xml:space="preserve">
          <source>Parentheses</source>
          <target state="translated">Parentheses</target>
        </trans-unit>
        <trans-unit id="5a5d3ecaebab08de9a057833d6989aba76a6656a" translate="yes" xml:space="preserve">
          <source>Parentheses can be used to affect the order of operations:</source>
          <target state="translated">Los paréntesis pueden utilizarse para afectar el orden de las operaciones:</target>
        </trans-unit>
        <trans-unit id="f107d199b440ddc83cfe6fc9c01e968a85b4fc6e" translate="yes" xml:space="preserve">
          <source>Parse Errors</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="475223ba441a6a2cbde2eba855bcbcf7b222ffeb" translate="yes" xml:space="preserve">
          <source>Parses a user-provided selector into a list of lists of strings as returned by &lt;code&gt;&amp;amp;&lt;/code&gt;.</source>
          <target state="translated">Analiza un selector proporcionado por el usuario en una lista de listas de cadenas devueltas por &lt;code&gt;&amp;amp;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="937e56ec95ac76ea5d4634fb284a0618006151c7" translate="yes" xml:space="preserve">
          <source>Parsing a Stylesheet</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e1aae818953eb8ca4053c4ff30bde9bc13d7517f" translate="yes" xml:space="preserve">
          <source>Partials</source>
          <target state="translated">Partials</target>
        </trans-unit>
        <trans-unit id="382fe0b44eb7a4d065589fd8df9dba7c7e579df1" translate="yes" xml:space="preserve">
          <source>Partials #partials</source>
          <target state="translated">Parciales #parciales</target>
        </trans-unit>
        <trans-unit id="1cf4a0797da5ae4515cb354c7e3d2506d5c0da4d" translate="yes" xml:space="preserve">
          <source>Passing Arbitrary Arguments</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="10b517a0c326f7cdb5514a5c17c1c8f9ba90f4ac" translate="yes" xml:space="preserve">
          <source>Passing Arguments to Content Blocks</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="174507f368602cb47eca3dcf6a7c4744ce9c47f3" translate="yes" xml:space="preserve">
          <source>Passing Content Blocks to a Mixin #mixin-content</source>
          <target state="translated">Pasar los bloques de contenido a una mezcla de contenido #mixin</target>
        </trans-unit>
        <trans-unit id="5e004b68598c82268398e8120c7b803ce3195f47" translate="yes" xml:space="preserve">
          <source>Passing a string to &lt;code&gt;call()&lt;/code&gt; still works in all implementations, but it&amp;rsquo;s deprecated and will be disallowed in future versions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4f12f6ea0eb6ec50433a4ceb50c8f15be1cde0e3" translate="yes" xml:space="preserve">
          <source>Percentages in Sass work just like every other unit. They are &lt;em&gt;not&lt;/em&gt; interchangeable with decimals, because in CSS decimals and percentages mean different things. For example, &lt;code&gt;50%&lt;/code&gt; is a number with &lt;code&gt;%&lt;/code&gt; as its unit, and Sass considers it different than the number &lt;code&gt;0.5&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="12caa4cc15915e649a7170042a5b32c438105b72" translate="yes" xml:space="preserve">
          <source>Placeholder Selectors</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b8dbc970b1740db190bc80080356a5c06b33e85a" translate="yes" xml:space="preserve">
          <source>Placeholder Selectors: &lt;code&gt;%foo&lt;/code&gt;</source>
          <target state="translated">Selectores de marcador de posici&amp;oacute;n: &lt;code&gt;%foo&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="3a1807298fe43d85bf2f7dc3cf4646e2cb1464c0" translate="yes" xml:space="preserve">
          <source>Placeholder selectors are useful when writing a Sass library where each style rule may or may not be used. As a rule of thumb, if you&amp;rsquo;re writing a stylesheet just for your own app, it&amp;rsquo;s often better to just extend a class selector if one is available.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b0f1e4410b7c54d63bca94a5b0237017928759bd" translate="yes" xml:space="preserve">
          <source>Placeholder selectors look like class and id selectors, except the &lt;code&gt;#&lt;/code&gt; or &lt;code&gt;.&lt;/code&gt; is replaced by &lt;code&gt;%&lt;/code&gt;. They can be used anywhere a class or id could, and on their own they prevent rulesets from being rendered to CSS. For example:</source>
          <target state="translated">Los selectores de marcador de posici&amp;oacute;n se ven como selectores de clase e id, excepto el &lt;code&gt;#&lt;/code&gt; o &lt;code&gt;.&lt;/code&gt; se reemplaza por &lt;code&gt;%&lt;/code&gt; . Se pueden usar en cualquier lugar que pueda utilizar una clase o identificaci&amp;oacute;n, y por s&amp;iacute; solos evitan que los conjuntos de reglas se representen en CSS. Por ejemplo:</target>
        </trans-unit>
        <trans-unit id="7a175e693b374d4493d7b0e3d217567c76d1d2ae" translate="yes" xml:space="preserve">
          <source>Plain CSS &lt;code&gt;@import&lt;/code&gt;s</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e95f4c628e1950df7e58d812c64c34abd443548d" translate="yes" xml:space="preserve">
          <source>Plain CSS Functions</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c69c7edce2e30c07d4d24840b8b06debd3d19b52" translate="yes" xml:space="preserve">
          <source>Plain CSS function names</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a327806ce6bc8e41e7a15559687d221d323ede6f" translate="yes" xml:space="preserve">
          <source>Plain CSS&lt;code&gt;@import&lt;/code&gt;s</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ab2e26dd8b8868a3969cb3321e0c983c0d9d67d4" translate="yes" xml:space="preserve">
          <source>Plugins</source>
          <target state="translated">Plugins</target>
        </trans-unit>
        <trans-unit id="3dd4db5ce7ea626f59e720f0c27096a22aa1ecd0" translate="yes" xml:space="preserve">
          <source>Precision</source>
          <target state="translated">Precision</target>
        </trans-unit>
        <trans-unit id="17cf3dabf6bc7dc21b9d1a5d6c5ffd7fbfeb0605" translate="yes" xml:space="preserve">
          <source>Private Members</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b531a743226fd315cba3a568c4d2adb5df8bdde7" translate="yes" xml:space="preserve">
          <source>Private Placeholders</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8026192ae46c8d75559c9211d8ad7ffaa4f4585a" translate="yes" xml:space="preserve">
          <source>Property Declarations</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bd13ea8b9b871dd6b38cca8e0f1184b0535d90e7" translate="yes" xml:space="preserve">
          <source>Property names in declarations</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8e06ee91ee276aa5597f240bfdf862c7bbaaf1af" translate="yes" xml:space="preserve">
          <source>Quoted</source>
          <target state="translated">Quoted</target>
        </trans-unit>
        <trans-unit id="e555ca00e12644d44994f87d0f5b40e67a4fe054" translate="yes" xml:space="preserve">
          <source>Quoted Strings</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="433e8cd6ceba6fbb5365d4cbc4c77708250468d1" translate="yes" xml:space="preserve">
          <source>Quoted or unquoted strings</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2a9325146b5d935a8e4b2b7fa3f8c22c67f62d01" translate="yes" xml:space="preserve">
          <source>Quoted strings are guaranteed to be compiled to CSS strings that have the same contents as the original Sass strings. The exact format may vary based on the implementation or configuration&amp;mdash;a string containing a double quote may be compiled to &lt;code&gt;&quot;\&quot;&quot;&lt;/code&gt; or &lt;code&gt;'&quot;'&lt;/code&gt;, and a non-&lt;a href=&quot;https://en.wikipedia.org/wiki/ASCII&quot;&gt;ASCII&lt;/a&gt; character may or may not be escaped. But that should be parsed the same in any standards-compliant CSS implementation, including all browsers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e82ae9017bba7215709a258269319fec1393b498" translate="yes" xml:space="preserve">
          <source>Quoted strings are written between either single or double quotes, as in &lt;code&gt;&quot;Helvetica Neue&quot;&lt;/code&gt;. They can contain &lt;a href=&quot;../interpolation&quot;&gt;interpolation&lt;/a&gt;, as well as any unescaped character except for:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="919c02f72c8dc766a3ec88ccb258a30d50b18ab4" translate="yes" xml:space="preserve">
          <source>Rack/Rails/Merb Plugin</source>
          <target state="translated">Rack/Rails/Merb Plugin</target>
        </trans-unit>
        <trans-unit id="cbab26157fbc3b0526dc0021d74676f7ac742b77" translate="yes" xml:space="preserve">
          <source>Railroad diagram copyright &amp;copy; 2018 W3C&lt;sup&gt;&amp;reg;&lt;/sup&gt; (MIT, ERCIM, Keio, Beihang). W3C&lt;a href=&quot;http://www.w3.org/Consortium/Legal/ipr-notice#Legal_Disclaimer&quot;&gt;liability&lt;/a&gt;, &lt;a href=&quot;http://www.w3.org/Consortium/Legal/ipr-notice#W3C_Trademarks&quot;&gt;trademark&lt;/a&gt; and &lt;a href=&quot;http://www.w3.org/Consortium/Legal/2015/copyright-software-and-document&quot;&gt;permissive document license&lt;/a&gt; rules apply.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="79395baf2e1c527bae4141a75235a0eefb3f634b" translate="yes" xml:space="preserve">
          <source>Raises &lt;code&gt;$base&lt;/code&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Exponentiation&quot;&gt;to the power of&lt;/a&gt;&lt;code&gt;$exponent&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e0eb5268f437200e3ca42ec2d178bdfb80e8e252" translate="yes" xml:space="preserve">
          <source>Raises:</source>
          <target state="translated">Raises:</target>
        </trans-unit>
        <trans-unit id="c07be06a9d0942a578db072018d18f8a662503c6" translate="yes" xml:space="preserve">
          <source>Referencing Parent Selectors: &lt;code&gt;&amp;amp;&lt;/code&gt; #parent-selector</source>
          <target state="translated">Hacer referencia a los selectores de padres: &lt;code&gt;&amp;amp;&lt;/code&gt; # parent-selector</target>
        </trans-unit>
        <trans-unit id="354032ada697719ccb58ca87cd221831508c42b3" translate="yes" xml:space="preserve">
          <source>Relational Operators</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="300d986e9c634e87b8a5acab34b704dc9f08b5e3" translate="yes" xml:space="preserve">
          <source>Relational operators (&lt;code&gt;&amp;lt;&lt;/code&gt;, &lt;code&gt;&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;=&lt;/code&gt;, &lt;code&gt;&amp;gt;=&lt;/code&gt;) are also supported for numbers, and equality operators (&lt;code&gt;==&lt;/code&gt;, &lt;code&gt;!=&lt;/code&gt;) are supported for all types.</source>
          <target state="translated">Los operadores relacionales ( &lt;code&gt;&amp;lt;&lt;/code&gt; , &lt;code&gt;&amp;gt;&lt;/code&gt; , &lt;code&gt;&amp;lt;=&lt;/code&gt; , &lt;code&gt;&amp;gt;=&lt;/code&gt; ) son tambi&amp;eacute;n compatibles con los n&amp;uacute;meros y operadores de igualdad ( &lt;code&gt;==&lt;/code&gt; , &lt;code&gt;!=&lt;/code&gt; ) Son compatibles con todos los tipos.</target>
        </trans-unit>
        <trans-unit id="94ea463c80df7da62ba5fb4fca637b727cbb79df" translate="yes" xml:space="preserve">
          <source>Relational operators determine whether &lt;a href=&quot;../values/numbers&quot;&gt;numbers&lt;/a&gt; are larger or smaller than one another. They automatically convert between compatible units.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="670a1246f19c95ceec3dc72fea9216deb3b1e8e8" translate="yes" xml:space="preserve">
          <source>Removes quotes from a string. If the string is already unquoted, this will return it unmodified.</source>
          <target state="translated">Elimina las citas de una cadena.Si la cadena ya no está citada,esto la devolverá sin modificar.</target>
        </trans-unit>
        <trans-unit id="1607356e597f16ff04732753955c924b6ac2187c" translate="yes" xml:space="preserve">
          <source>Replaces all instances of &lt;code&gt;$original&lt;/code&gt; with &lt;code&gt;$replacement&lt;/code&gt; in &lt;code&gt;$selector&lt;/code&gt;</source>
          <target state="translated">Reemplaza todas las instancias de &lt;code&gt;$original&lt;/code&gt; con &lt;code&gt;$replacement&lt;/code&gt; en &lt;code&gt;$selector&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="cfa5e2d887f8850689969682acba8e894f56eb38" translate="yes" xml:space="preserve">
          <source>Restricts &lt;code&gt;$number&lt;/code&gt; to the range between &lt;code&gt;$min&lt;/code&gt; and &lt;code&gt;$max&lt;/code&gt;. If &lt;code&gt;$number&lt;/code&gt; is less than &lt;code&gt;$min&lt;/code&gt; this returns &lt;code&gt;$min&lt;/code&gt;, and if it&amp;rsquo;s greater than &lt;code&gt;$max&lt;/code&gt; this returns &lt;code&gt;$max&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="92b958d353c51af8e3a7d9c86b9846f96f7b31d5" translate="yes" xml:space="preserve">
          <source>Result Object</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0a098796ce9c4464f246388db35938a4fb8e9e25" translate="yes" xml:space="preserve">
          <source>Return a decimal between 0 and 1, inclusive of 0 but not 1.</source>
          <target state="translated">Devuelve un decimal entre 0 y 1,incluyendo 0 pero no 1.</target>
        </trans-unit>
        <trans-unit id="ca697c9676025d695d9bb3bdfe66da3ae3200550" translate="yes" xml:space="preserve">
          <source>Return a new list, based on the list provided, but with the nth element changed to the value given.</source>
          <target state="translated">Devolver una nueva lista,basada en la lista proporcionada,pero con el enésimo elemento cambiado al valor dado.</target>
        </trans-unit>
        <trans-unit id="f6a62674270588e7988262fa17987874416e5829" translate="yes" xml:space="preserve">
          <source>Return a new selector with all selectors in &lt;code&gt;$selectors&lt;/code&gt; appended one another as though they had been nested in the stylesheet as &lt;code&gt;$selector1 { &amp;amp;$selector2 { ... } }&lt;/code&gt;.</source>
          <target state="translated">Devuelve un nuevo selector con todos los selectores en &lt;code&gt;$selectors&lt;/code&gt; adjuntos entre s&amp;iacute; como si hubieran sido anidados en la hoja de estilo como &lt;code&gt;$selector1 { &amp;amp;$selector2 { ... } }&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="d786c6c7ee742054a909f7c1b81b3ba1b0385868" translate="yes" xml:space="preserve">
          <source>Return a new selector with all selectors in &lt;code&gt;$selectors&lt;/code&gt; nested beneath one another as though they had been nested in the stylesheet as &lt;code&gt;$selector1 { $selector2 { ... } }&lt;/code&gt;.</source>
          <target state="translated">Devuelve un nuevo selector con todos los selectores en &lt;code&gt;$selectors&lt;/code&gt; anidados uno debajo del otro como si hubieran sido anidados en la hoja de estilo como &lt;code&gt;$selector1 { $selector2 { ... } }&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="fecae0aae65cbb793f8b56a5e7bd50520734109b" translate="yes" xml:space="preserve">
          <source>Return a string containing the value as its Sass representation.</source>
          <target state="translated">Devuelve una cadena que contiene el valor como su representación de Sass.</target>
        </trans-unit>
        <trans-unit id="90e91a4bbe1cfd7eb6a7673ffd79bad43d456339" translate="yes" xml:space="preserve">
          <source>Return an integer between 1 and &lt;code&gt;$limit&lt;/code&gt;, inclusive of both 1 and &lt;code&gt;$limit&lt;/code&gt;.</source>
          <target state="translated">Devuelve un n&amp;uacute;mero entero entre 1 y &lt;code&gt;$limit&lt;/code&gt; , incluidos 1 y &lt;code&gt;$limit&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="c07470b33157e00d0801cb59275e075b771c1ccb" translate="yes" xml:space="preserve">
          <source>Return the length of a list.</source>
          <target state="translated">Devuelve la longitud de una lista.</target>
        </trans-unit>
        <trans-unit id="fb057ce72403b54191be4a09c94e8f9300c7aced" translate="yes" xml:space="preserve">
          <source>Returns &lt;a href=&quot;../values/null&quot;&gt;&lt;code&gt;null&lt;/code&gt;&lt;/a&gt; if the map does not have a value associated with the key, or if any key in &lt;code&gt;$keys&lt;/code&gt; is missing from a map or references a value that is not a map.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e4cdf5d42c0671647d2b7bb0968806799a4eb199" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;$if-true&lt;/code&gt; if &lt;code&gt;$condition&lt;/code&gt; is &lt;a href=&quot;at-rules/control/if#truthiness-and-falsiness&quot;&gt;truthy&lt;/a&gt;, and &lt;code&gt;$if-false&lt;/code&gt; otherwise.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9c3297b36141174e06a6196507a7b94b480afdf1" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;$selector&lt;/code&gt; in the &lt;a href=&quot;#selector-values&quot;&gt;selector value&lt;/a&gt; format.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="249ffe23331434e32c564f1a4689c2eaac25ee4a" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;$string&lt;/code&gt; as a quoted string.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="32ff0d023ae7d1a21de339c4dbe7f0ad73b60841" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;$string&lt;/code&gt; as an unquoted string. This can produce strings that aren&amp;rsquo;t valid CSS, so use with caution.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c0906bcfe3179993cff5b2ec089cc5ae3a58639f" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;false&lt;/code&gt; for any unrecognized &lt;code&gt;$feature&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eb5215354c106af2212e9f9c422fc9ba94c22cc4" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;null&lt;/code&gt; if &lt;code&gt;$selector1&lt;/code&gt; and &lt;code&gt;$selector2&lt;/code&gt; don&amp;rsquo;t match any of the same elements, or if there&amp;rsquo;s no selector that can express their overlap.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="898a6b17935b803e11e9f1af1939dd597811f399" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;true&lt;/code&gt; if the boolean is the Sass value &lt;code&gt;true&lt;/code&gt;, and false if it&amp;rsquo;s the Sass value &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9e9088f434b0b978079a78739bbc1126fd623b13" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;true&lt;/code&gt; if the list is comma-separated, and &lt;code&gt;false&lt;/code&gt; otherwise.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8f6a052d8f52ede9829ca353baf2ad1fe25aef91" translate="yes" xml:space="preserve">
          <source>Returns A list of lists of strings representing &lt;code&gt;$selector&lt;/code&gt;. This is in the same format as a selector returned by &lt;code&gt;&amp;amp;&lt;/code&gt;.</source>
          <target state="translated">Devuelve Una lista de listas de cadenas que representan &lt;code&gt;$selector&lt;/code&gt; . Tiene el mismo formato que un selector devuelto por &lt;code&gt;&amp;amp;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="c8b878ae579da9409cf7d7baa8ef1f74d25be570" translate="yes" xml:space="preserve">
          <source>Returns A list of lists of strings representing the result of appending &lt;code&gt;$selectors&lt;/code&gt;. This is in the same format as a selector returned by &lt;code&gt;&amp;amp;&lt;/code&gt;.</source>
          <target state="translated">Devuelve Una lista de listas de cadenas que representan el resultado de agregar &lt;code&gt;$selectors&lt;/code&gt; . Tiene el mismo formato que un selector devuelto por &lt;code&gt;&amp;amp;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="681bf66491ff841a9a3ecda1364da535f5efc671" translate="yes" xml:space="preserve">
          <source>Returns A list of lists of strings representing the result of nesting &lt;code&gt;$selectors&lt;/code&gt;. This is in the same format as a selector returned by &lt;code&gt;&amp;amp;&lt;/code&gt;.</source>
          <target state="translated">Devuelve Una lista de listas de cadenas que representan el resultado de anidar &lt;code&gt;$selectors&lt;/code&gt; . Tiene el mismo formato que un selector devuelto por &lt;code&gt;&amp;amp;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="cafdbbccfa855d711958927868096ff911afe9f8" translate="yes" xml:space="preserve">
          <source>Returns A list of lists of strings representing the result of the extension. This is in the same format as a selector returned by &lt;code&gt;&amp;amp;&lt;/code&gt;.</source>
          <target state="translated">Devuelve Una lista de listas de cadenas que representan el resultado de la extensi&amp;oacute;n. Tiene el mismo formato que un selector devuelto por &lt;code&gt;&amp;amp;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="cb3112dd58bcce2f656ec836bc0870940f3b7cb6" translate="yes" xml:space="preserve">
          <source>Returns A list of lists of strings representing the result of the unification, or null if no unification exists. This is in the same format as a selector returned by &lt;code&gt;&amp;amp;&lt;/code&gt;.</source>
          <target state="translated">Devuelve Una lista de listas de cadenas que representan el resultado de la unificaci&amp;oacute;n, o nulo si no existe unificaci&amp;oacute;n. Tiene el mismo formato que un selector devuelto por &lt;code&gt;&amp;amp;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="7fff605b99df76ab731c698f7cedf9a3671871f0" translate="yes" xml:space="preserve">
          <source>Returns A list of simple selectors in the compound selector.</source>
          <target state="translated">Devuelve una lista de selectores simples en el selector compuesto.</target>
        </trans-unit>
        <trans-unit id="7810bbd9c0fa87887e06262e239afdf0537d4582" translate="yes" xml:space="preserve">
          <source>Returns The substring. This will be quoted if and only if &lt;code&gt;$string&lt;/code&gt; was quoted</source>
          <target state="translated">Devuelve la subcadena. Esto se cotizar&amp;aacute; si y solo si se cit&amp;oacute; &lt;code&gt;$string&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="45122d96ce3cff3b4f36a0787a2f17262c4946d7" translate="yes" xml:space="preserve">
          <source>Returns Whether &lt;code&gt;$selector1&lt;/code&gt; is a superselector of &lt;code&gt;$selector2&lt;/code&gt;.</source>
          <target state="translated">Devuelve si &lt;code&gt;$selector1&lt;/code&gt; es un superselector de &lt;code&gt;$selector2&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="cb4dbde3c3c8c57700438662f9506d8ae071fbad" translate="yes" xml:space="preserve">
          <source>Returns a color with the given &lt;a href=&quot;https://en.wikipedia.org/wiki/HSL_and_HSV&quot;&gt;hue, saturation, and lightness&lt;/a&gt; and the given alpha channel.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0a771f31e003265d47ff5059f6063e4fc6c60309" translate="yes" xml:space="preserve">
          <source>Returns a color with the given &lt;a href=&quot;https://en.wikipedia.org/wiki/HWB_color_model&quot;&gt;hue, whiteness, and blackness&lt;/a&gt; and the given alpha channel.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6bf7dc97931e2c724e27a45cddb7b9661e795fc9" translate="yes" xml:space="preserve">
          <source>Returns a comma-separated list of all the keys in &lt;code&gt;$map&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d91484bd86a0364328a9c0b93244c9110296ab27" translate="yes" xml:space="preserve">
          <source>Returns a comma-separated list of all the values in &lt;code&gt;$map&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="34c050842516f7ed7ff369ad29af1a56ecd1f223" translate="yes" xml:space="preserve">
          <source>Returns a copy of &lt;code&gt;$list&lt;/code&gt; with &lt;code&gt;$val&lt;/code&gt; added to the end.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="574d67fd095aa48e4721721aa10937adce3804cc" translate="yes" xml:space="preserve">
          <source>Returns a copy of &lt;code&gt;$list&lt;/code&gt; with the element at &lt;a href=&quot;../values/lists#indexes&quot;&gt;index&lt;/a&gt;&lt;code&gt;$n&lt;/code&gt; replaced with &lt;code&gt;$value&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f241867340b7c15856db35eed80a96f8aea1d893" translate="yes" xml:space="preserve">
          <source>Returns a copy of &lt;code&gt;$map1&lt;/code&gt; where the targeted map is replaced by a new map that contains all the keys and values from both the targeted map and &lt;code&gt;$map2&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="be8bee096f60104df2d8fd1d8c1c4eb80b03713c" translate="yes" xml:space="preserve">
          <source>Returns a copy of &lt;code&gt;$map&lt;/code&gt; where the targeted map does not have a value associated with the last key in &lt;code&gt;$keys&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6c894af178358e70ca8e2d2d9e86041f354a12f9" translate="yes" xml:space="preserve">
          <source>Returns a copy of &lt;code&gt;$map&lt;/code&gt; with the targeted map&amp;rsquo;s value at &lt;code&gt;$key&lt;/code&gt; set to &lt;code&gt;$value&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c60794a6f9628dd3dda1513f7c6114c4478a2bfe" translate="yes" xml:space="preserve">
          <source>Returns a copy of &lt;code&gt;$map&lt;/code&gt; without any values associated with &lt;code&gt;$keys&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8a61ba0a1e026ee99909219dc83cdb6658860c89" translate="yes" xml:space="preserve">
          <source>Returns a copy of &lt;code&gt;$selector&lt;/code&gt; modified with the following &lt;code&gt;@extend&lt;/code&gt; rule:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="561de92c8c64c2ef01cb3a98b778ed6c436ea936" translate="yes" xml:space="preserve">
          <source>Returns a copy of &lt;code&gt;$selector&lt;/code&gt; with all instances of &lt;code&gt;$original&lt;/code&gt; replaced by &lt;code&gt;$replacement&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="54c79e29002621547c98326d51f8a1b588a64144" translate="yes" xml:space="preserve">
          <source>Returns a copy of &lt;code&gt;$string&lt;/code&gt; with &lt;code&gt;$insert&lt;/code&gt; inserted at &lt;a href=&quot;../values/strings#string-indexes&quot;&gt;&lt;code&gt;$index&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3dee6dc39f9d5b855dd2a4b9732b7dc5b322965e" translate="yes" xml:space="preserve">
          <source>Returns a copy of &lt;code&gt;$string&lt;/code&gt; with the &lt;a href=&quot;https://en.wikipedia.org/wiki/ASCII&quot;&gt;ASCII&lt;/a&gt; letters converted to lower case.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c841eb151c8f746dc1d40708bfcfe8a0711ab217" translate="yes" xml:space="preserve">
          <source>Returns a copy of &lt;code&gt;$string&lt;/code&gt; with the &lt;a href=&quot;https://en.wikipedia.org/wiki/ASCII&quot;&gt;ASCII&lt;/a&gt; letters converted to upper case.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="998630824c12877f4b98b871bfb29c286be6f247" translate="yes" xml:space="preserve">
          <source>Returns a gray color with the same lightness as &lt;code&gt;$color&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f45056679ba8933cc8f58a15e532480b82589e48" translate="yes" xml:space="preserve">
          <source>Returns a list of all keys in a map.</source>
          <target state="translated">Devuelve una lista de todas las llaves en un mapa.</target>
        </trans-unit>
        <trans-unit id="468e70b240f8d38fce4be5ca4f56db2f415dfc22" translate="yes" xml:space="preserve">
          <source>Returns a list of all values in a map. This list may include duplicate values, if multiple keys have the same value.</source>
          <target state="translated">Devuelve una lista de todos los valores en un mapa.Esta lista puede incluir valores duplicados,si varias claves tienen el mismo valor.</target>
        </trans-unit>
        <trans-unit id="731483297ad07944a7979ff17ba55a9526f7a6a4" translate="yes" xml:space="preserve">
          <source>Returns a list of simple selectors in &lt;code&gt;$selector&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d46d68e2902846fb9c9a2fbc4818a68607ba48cc" translate="yes" xml:space="preserve">
          <source>Returns a new list containing the elements of &lt;code&gt;$list1&lt;/code&gt; followed by the elements of &lt;code&gt;$list2&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f6d643e2176a2ae6ca49ca4e54fd08bc70807b73" translate="yes" xml:space="preserve">
          <source>Returns a new map with keys removed.</source>
          <target state="translated">Devuelve un nuevo mapa con las llaves removidas.</target>
        </trans-unit>
        <trans-unit id="aa71fec219d9e6da99bbca84041bb4d3e6acaaca" translate="yes" xml:space="preserve">
          <source>Returns a new version of &lt;code&gt;$selector&lt;/code&gt; with &lt;code&gt;$extendee&lt;/code&gt; extended with &lt;code&gt;$extender&lt;/code&gt;. This works just like the result of</source>
          <target state="translated">Devuelve una nueva versi&amp;oacute;n de &lt;code&gt;$selector&lt;/code&gt; con &lt;code&gt;$extendee&lt;/code&gt; extendido con &lt;code&gt;$extender&lt;/code&gt; . Esto funciona como el resultado de</target>
        </trans-unit>
        <trans-unit id="f7debff9e64a5e5c07bf9f9de9a936a9ddb28823" translate="yes" xml:space="preserve">
          <source>Returns a number that&amp;rsquo;s a mixture of &lt;code&gt;$color1&lt;/code&gt; and &lt;code&gt;$color2&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a269eb48227cbf36d12e9a515e49e1d887b7b9e2" translate="yes" xml:space="preserve">
          <source>Returns a randomly-generated unquoted string that&amp;rsquo;s guaranteed to be a valid CSS identifier and to be unique within the current Sass compilation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="79db0f86648abae15ff2e887d2f8b783c7aca591" translate="yes" xml:space="preserve">
          <source>Returns a reference to a function for later invocation with the &lt;code&gt;call()&lt;/code&gt; function.</source>
          <target state="translated">Devuelve una referencia a una funci&amp;oacute;n para su posterior invocaci&amp;oacute;n con la funci&amp;oacute;n &lt;code&gt;call()&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="fb890b6d723e63def5ce0abf7a2a0288c8371f79" translate="yes" xml:space="preserve">
          <source>Returns a representation of &lt;em&gt;any&lt;/em&gt; Sass value, not just those that can be represented in CSS. As such, its return value is not guaranteed to be valid CSS.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="55957dece7996a4bb4c9e933d3ef17428ea6ccc2" translate="yes" xml:space="preserve">
          <source>Returns a selector that matches only elements matched by &lt;em&gt;both&lt;/em&gt;&lt;code&gt;$selector1&lt;/code&gt; and &lt;code&gt;$selector2&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bf02f500fc1bb9a15c95b64ce230fe9e60ebab27" translate="yes" xml:space="preserve">
          <source>Returns a string representation of &lt;code&gt;$number&lt;/code&gt;&amp;rsquo;s units.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7b483cc27e0b71d6a9790908fd380625bd214385" translate="yes" xml:space="preserve">
          <source>Returns a string representation of &lt;code&gt;$value&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dd453ac892432e3a43f7f4574d7f4c8c32a37a86" translate="yes" xml:space="preserve">
          <source>Returns a unique CSS identifier. The identifier is returned as an unquoted string. The identifier returned is only guaranteed to be unique within the scope of a single Sass run.</source>
          <target state="translated">Devuelve un identificador CSS único.El identificador se devuelve como una cadena no citada.El identificador devuelto sólo se garantiza que es único dentro del ámbito de una sola ejecución de Sass.</target>
        </trans-unit>
        <trans-unit id="d4e88c3f2a49533d48f659fa7d55bbeea7e08df4" translate="yes" xml:space="preserve">
          <source>Returns all the functions defined in a module, as a map from function names to &lt;a href=&quot;../values/functions&quot;&gt;function values&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e1a867f177933e46962d4756bbe2151595608646" translate="yes" xml:space="preserve">
          <source>Returns all the variables defined in a module, as a map from variable names (without &lt;code&gt;$&lt;/code&gt;) to the values of those variables.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cf954a08b11faca5408ee01bc1ffa94e703030e4" translate="yes" xml:space="preserve">
          <source>Returns an unquoted string that represents &lt;code&gt;$color&lt;/code&gt; in the &lt;code&gt;#AARRGGBB&lt;/code&gt; format expected by Internet Explorer&amp;rsquo;s &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/-ms-filter&quot;&gt;&lt;code&gt;-ms-filter&lt;/code&gt;&lt;/a&gt; property.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9785c9f859f3c8c15e02ae07fa4b5f4713dda054" translate="yes" xml:space="preserve">
          <source>Returns false if it does not, or if any key in &lt;code&gt;$keys&lt;/code&gt; is missing from a map or references a value that is not a map.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ebd04b66d30293595136a62cc8fac8b316642c0c" translate="yes" xml:space="preserve">
          <source>Returns one of two values, depending on whether or not &lt;code&gt;$condition&lt;/code&gt; is true. Just like in &lt;code&gt;@if&lt;/code&gt;, all values other than &lt;code&gt;false&lt;/code&gt; and &lt;code&gt;null&lt;/code&gt; are considered to be true.</source>
          <target state="translated">Devuelve uno de dos valores, dependiendo de si &lt;code&gt;$condition&lt;/code&gt; es verdadera o no . Al igual que en &lt;code&gt;@if&lt;/code&gt; , todos los valores distintos de &lt;code&gt;false&lt;/code&gt; y &lt;code&gt;null&lt;/code&gt; se consideran verdaderos.</target>
        </trans-unit>
        <trans-unit id="fd33c97a0ae0e81976060eb166d228e16c63a6ab" translate="yes" xml:space="preserve">
          <source>Returns the &lt;a href=&quot;../values/functions&quot;&gt;function&lt;/a&gt; named &lt;code&gt;$name&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9c491a40c3cd07f70c78be29b35baeb2a15115dd" translate="yes" xml:space="preserve">
          <source>Returns the &lt;a href=&quot;../values/lists#indexes&quot;&gt;index&lt;/a&gt; of &lt;code&gt;$value&lt;/code&gt; in &lt;code&gt;$list&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="64badb95bd6e180f7ab47ec8541c943a1790de67" translate="yes" xml:space="preserve">
          <source>Returns the &lt;a href=&quot;http://dev.w3.org/csswg/selectors4/#simple&quot;&gt;simple selectors&lt;/a&gt; that comprise the compound selector &lt;code&gt;$selector&lt;/code&gt;.</source>
          <target state="translated">Devuelve los &lt;a href=&quot;http://dev.w3.org/csswg/selectors4/#simple&quot;&gt;selectores simples&lt;/a&gt; que componen el selector compuesto &lt;code&gt;$selector&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="b5ab43ce15abec778e6e5e697d298143d6e24c17" translate="yes" xml:space="preserve">
          <source>Returns the &lt;a href=&quot;https://en.wikipedia.org/wiki/Absolute_value&quot;&gt;absolute value&lt;/a&gt; of &lt;code&gt;$number&lt;/code&gt;. If &lt;code&gt;$number&lt;/code&gt; is negative, this returns &lt;code&gt;-$number&lt;/code&gt;, and if &lt;code&gt;$number&lt;/code&gt; is positive, it returns &lt;code&gt;$number&lt;/code&gt; as-is.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="558ce99a8774f76eafa5c1514b499da914a2dfb5" translate="yes" xml:space="preserve">
          <source>Returns the &lt;a href=&quot;https://en.wikipedia.org/wiki/Atan2&quot;&gt;2-argument arctangent&lt;/a&gt; of &lt;code&gt;$y&lt;/code&gt; and &lt;code&gt;$x&lt;/code&gt; in &lt;code&gt;deg&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c70101d5df99f9e098c9e7c88a88dd4badd69367" translate="yes" xml:space="preserve">
          <source>Returns the &lt;a href=&quot;https://en.wikipedia.org/wiki/HWB_color_model&quot;&gt;HWB&lt;/a&gt; blackness of &lt;code&gt;$color&lt;/code&gt; as a number between &lt;code&gt;0%&lt;/code&gt; and &lt;code&gt;100%&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8bacb56dcfcd02485fbd390f20c91cf95cdda760" translate="yes" xml:space="preserve">
          <source>Returns the &lt;a href=&quot;https://en.wikipedia.org/wiki/HWB_color_model&quot;&gt;HWB&lt;/a&gt; whiteness of &lt;code&gt;$color&lt;/code&gt; as a number between &lt;code&gt;0%&lt;/code&gt; and &lt;code&gt;100%&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3f01cdcee0c0e2dd3375ed15b23a43fa6ef8910e" translate="yes" xml:space="preserve">
          <source>Returns the &lt;a href=&quot;https://en.wikipedia.org/wiki/Inverse_trigonometric_functions#Basic_properties&quot;&gt;arccosine&lt;/a&gt; of &lt;code&gt;$number&lt;/code&gt; in &lt;code&gt;deg&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="93cf297beeb3f84b4cae229e1ca66f125974efeb" translate="yes" xml:space="preserve">
          <source>Returns the &lt;a href=&quot;https://en.wikipedia.org/wiki/Inverse_trigonometric_functions#Basic_properties&quot;&gt;arcsine&lt;/a&gt; of &lt;code&gt;$number&lt;/code&gt; in &lt;code&gt;deg&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a91ea40690f109e18f38fc8f66e6d95c3627242d" translate="yes" xml:space="preserve">
          <source>Returns the &lt;a href=&quot;https://en.wikipedia.org/wiki/Inverse_trigonometric_functions#Basic_properties&quot;&gt;arctangent&lt;/a&gt; of &lt;code&gt;$number&lt;/code&gt; in &lt;code&gt;deg&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ed6c6850ab46fba9e8b74a80ec7c6335232e0bd1" translate="yes" xml:space="preserve">
          <source>Returns the &lt;a href=&quot;https://en.wikipedia.org/wiki/Logarithm&quot;&gt;logarithm&lt;/a&gt; of &lt;code&gt;$number&lt;/code&gt; with respect to &lt;code&gt;$base&lt;/code&gt;. If &lt;code&gt;$base&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt;, the &lt;a href=&quot;https://en.wikipedia.org/wiki/Natural_logarithm&quot;&gt;natural log&lt;/a&gt; is calculated.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6262ac1c1d312314eb42212de183e8ae6b51a80c" translate="yes" xml:space="preserve">
          <source>Returns the &lt;a href=&quot;https://en.wikipedia.org/wiki/Square_root&quot;&gt;square root&lt;/a&gt; of &lt;code&gt;$number&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c2a7865ad59bcc46083a11d427a7148df32a1ff2" translate="yes" xml:space="preserve">
          <source>Returns the &lt;a href=&quot;https://en.wikipedia.org/wiki/Trigonometric_functions#Right-angled_triangle_definitions&quot;&gt;cosine&lt;/a&gt; of &lt;code&gt;$number&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f5f2398f9908d92e8a4027a8ceb29865872bf251" translate="yes" xml:space="preserve">
          <source>Returns the &lt;a href=&quot;https://en.wikipedia.org/wiki/Trigonometric_functions#Right-angled_triangle_definitions&quot;&gt;sine&lt;/a&gt; of &lt;code&gt;$number&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f5b40a38c3b8c0c8a07cedae85b79d928e58c774" translate="yes" xml:space="preserve">
          <source>Returns the &lt;a href=&quot;https://en.wikipedia.org/wiki/Trigonometric_functions#Right-angled_triangle_definitions&quot;&gt;tangent&lt;/a&gt; of &lt;code&gt;$number&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e54230321a0a2c8b8d60eef72dfa778df95011c8" translate="yes" xml:space="preserve">
          <source>Returns the HSL lightness of &lt;code&gt;$color&lt;/code&gt; as a number between &lt;code&gt;0%&lt;/code&gt; and &lt;code&gt;100%&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="440282d3eb2159266a78c63eba26932b43e9fe9b" translate="yes" xml:space="preserve">
          <source>Returns the HSL saturation of &lt;code&gt;$color&lt;/code&gt; as a number between &lt;code&gt;0%&lt;/code&gt; and &lt;code&gt;100%&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="351daf3fdcec5b30d7b691b8d6ce6d28025f7a0d" translate="yes" xml:space="preserve">
          <source>Returns the RGB&lt;a href=&quot;https://en.wikipedia.org/wiki/Complementary_colors&quot;&gt;complement&lt;/a&gt; of &lt;code&gt;$color&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="92873924a9d3752bf60b47c8caa32746f6f19e6a" translate="yes" xml:space="preserve">
          <source>Returns the absolute value of a number.</source>
          <target state="translated">Devuelve el valor absoluto de un número.</target>
        </trans-unit>
        <trans-unit id="956a5fd04c6f7591ec3594c61af0bdc05c2a2649" translate="yes" xml:space="preserve">
          <source>Returns the alpha channel of &lt;code&gt;$color&lt;/code&gt; as a number between 0 and 1.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4ce4198b9b1a07a40932a8b70d57cf084905cd80" translate="yes" xml:space="preserve">
          <source>Returns the alpha channel of the color as a number from 0 to 1.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f46b179b300313527135804bce4ea7f6a9606098" translate="yes" xml:space="preserve">
          <source>Returns the alpha component (opacity) of a color. This is 1 unless otherwise specified.</source>
          <target state="translated">Devuelve el componente alfa (opacidad)de un color.Es 1,a menos que se especifique lo contrario.</target>
        </trans-unit>
        <trans-unit id="c6b9b75b9e0756005c7ef91bf83d5c4cef80546d" translate="yes" xml:space="preserve">
          <source>Returns the blue channel of &lt;code&gt;$color&lt;/code&gt; as a number between 0 and 255.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="01c52e317dd7839c6bbed0b61dbb192bc0073172" translate="yes" xml:space="preserve">
          <source>Returns the blue channel of the color as an integer from 0 to 255.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="12c86362af22b819d23c565553dc7874f1a4f890" translate="yes" xml:space="preserve">
          <source>Returns the complement of a color. This is identical to &lt;code&gt;adjust-hue(color, 180deg)&lt;/code&gt;.</source>
          <target state="translated">Devuelve el complemento de un color. Esto es id&amp;eacute;ntico al &lt;code&gt;adjust-hue(color, 180deg)&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="abba6e7eda85ec1fe3c99331052256f271640d4b" translate="yes" xml:space="preserve">
          <source>Returns the contents of the string. If the string contains escapes, those escapes are included literally if it&amp;rsquo;s &lt;a href=&quot;values/strings#unquoted&quot;&gt;unquoted&lt;/a&gt;, while the values of the escapes are included if it&amp;rsquo;s &lt;a href=&quot;values/strings#quoted&quot;&gt;quoted&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="43ab8abdd40ea0b2633b9ceaea3dfd1b3a66a221" translate="yes" xml:space="preserve">
          <source>Returns the element at the given (0-based) index in the list.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a12aa5b6c1355eecf90b931c05fa6d696da596ce" translate="yes" xml:space="preserve">
          <source>Returns the element of &lt;code&gt;$list&lt;/code&gt; at &lt;a href=&quot;../values/lists#indexes&quot;&gt;index&lt;/a&gt;&lt;code&gt;$n&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c6084dcf14c02906372d609bce7a8bdb6cad0766" translate="yes" xml:space="preserve">
          <source>Returns the first &lt;a href=&quot;../values/strings#string-indexes&quot;&gt;index&lt;/a&gt; of &lt;code&gt;$substring&lt;/code&gt; in &lt;code&gt;$string&lt;/code&gt;, or &lt;code&gt;null&lt;/code&gt; if &lt;code&gt;$string&lt;/code&gt; doesn&amp;rsquo;t contain &lt;code&gt;$substring&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b934a9f264610fff88b26d4c9b93d2188230bcee" translate="yes" xml:space="preserve">
          <source>Returns the green channel of &lt;code&gt;$color&lt;/code&gt; as a number between 0 and 255.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b53925e9fbb42def142fe0330b3f102d4ea3eadc" translate="yes" xml:space="preserve">
          <source>Returns the green channel of the color as an integer from 0 to 255.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="637627cc357ce99db5f9d4f43522fea396a41893" translate="yes" xml:space="preserve">
          <source>Returns the highest of one or more numbers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b714880704f4221e7c84d524db3b93d8c1914511" translate="yes" xml:space="preserve">
          <source>Returns the hue component of a color. See &lt;a href=&quot;http://en.wikipedia.org/wiki/HSL_and_HSV#Conversion_from_RGB_to_HSL_or_HSV&quot;&gt;the CSS3 HSL specification&lt;/a&gt;. Calculated from RGB where necessary via &lt;a href=&quot;http://en.wikipedia.org/wiki/HSL_and_HSV#Conversion_from_RGB_to_HSL_or_HSV&quot;&gt;this algorithm&lt;/a&gt;.</source>
          <target state="translated">Devuelve el componente de tono de un color. Consulte &lt;a href=&quot;http://en.wikipedia.org/wiki/HSL_and_HSV#Conversion_from_RGB_to_HSL_or_HSV&quot;&gt;la especificaci&amp;oacute;n CSS3 HSL&lt;/a&gt; . Calculado a partir de RGB cuando sea necesario mediante &lt;a href=&quot;http://en.wikipedia.org/wiki/HSL_and_HSV#Conversion_from_RGB_to_HSL_or_HSV&quot;&gt;este algoritmo&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="0c6f24c55d46fbda2dbcac4c7fb4c63b6f2a96d4" translate="yes" xml:space="preserve">
          <source>Returns the hue of &lt;code&gt;$color&lt;/code&gt; as a number between &lt;code&gt;0deg&lt;/code&gt; and &lt;code&gt;360deg&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6a86d40dc31663716b8dd230ca848ea8debb7627" translate="yes" xml:space="preserve">
          <source>Returns the index of the first occurrence of &lt;code&gt;$substring&lt;/code&gt; in &lt;code&gt;$string&lt;/code&gt;. If there is no such occurrence, returns &lt;code&gt;null&lt;/code&gt;.</source>
          <target state="translated">Devuelve el &amp;iacute;ndice de la primera aparici&amp;oacute;n de &lt;code&gt;$substring&lt;/code&gt; en &lt;code&gt;$string&lt;/code&gt; . Si no existe tal ocurrencia, devuelve &lt;code&gt;null&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="b0f1c6f93d5d7d41e6d57ca82b7380bcf1c5f875" translate="yes" xml:space="preserve">
          <source>Returns the inverse (negative) of a color. The red, green, and blue values are inverted, while the opacity is left alone.</source>
          <target state="translated">Devuelve el inverso (negativo)de un color.Los valores de rojo,verde y azul se invierten,mientras que la opacidad se deja en paz.</target>
        </trans-unit>
        <trans-unit id="bd690716c4a4140be5acd243c710dcc4bb56637a" translate="yes" xml:space="preserve">
          <source>Returns the inverse or &lt;a href=&quot;https://en.wikipedia.org/wiki/Negative_(photography)&quot;&gt;negative&lt;/a&gt; of &lt;code&gt;$color&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ff6a7dd87898c815b9e29f8214afef311ee2101b" translate="yes" xml:space="preserve">
          <source>Returns the key in the key/value pair at the given (0-based) index in the map.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d9169bbcb044591bf447c18062ef83cbf3620a1f" translate="yes" xml:space="preserve">
          <source>Returns the keywords passed to a mixin or function that takes &lt;a href=&quot;../at-rules/mixin#taking-arbitrary-arguments&quot;&gt;arbitrary arguments&lt;/a&gt;. The &lt;code&gt;$args&lt;/code&gt; argument must be an &lt;a href=&quot;../values/lists#argument-lists&quot;&gt;argument list&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="733925db6e2ff87b4f177c099159873161eb9c27" translate="yes" xml:space="preserve">
          <source>Returns the length of &lt;code&gt;$list&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="866a84054beb8465535cfab0aaa1fcfc423fd75f" translate="yes" xml:space="preserve">
          <source>Returns the length of the &lt;em&gt;n&lt;/em&gt;-dimensional &lt;a href=&quot;https://en.wikipedia.org/wiki/Euclidean_vector&quot;&gt;vector&lt;/a&gt; that has components equal to each &lt;code&gt;$number&lt;/code&gt;. For example, for three numbers &lt;em&gt;a&lt;/em&gt;, &lt;em&gt;b&lt;/em&gt;, and &lt;em&gt;c&lt;/em&gt;, this returns the square root of &lt;em&gt;a&amp;sup2; + b&amp;sup2; + c&amp;sup2;&lt;/em&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dda555fb62111de0a6fb209830d06dd85ab5571c" translate="yes" xml:space="preserve">
          <source>Returns the lightness component of a color. See &lt;a href=&quot;http://en.wikipedia.org/wiki/HSL_and_HSV#Conversion_from_RGB_to_HSL_or_HSV&quot;&gt;the CSS3 HSL specification&lt;/a&gt;. Calculated from RGB where necessary via &lt;a href=&quot;http://en.wikipedia.org/wiki/HSL_and_HSV#Conversion_from_RGB_to_HSL_or_HSV&quot;&gt;this algorithm&lt;/a&gt;.</source>
          <target state="translated">Devuelve el componente de luminosidad de un color. Consulte &lt;a href=&quot;http://en.wikipedia.org/wiki/HSL_and_HSV#Conversion_from_RGB_to_HSL_or_HSV&quot;&gt;la especificaci&amp;oacute;n CSS3 HSL&lt;/a&gt; . Calculado a partir de RGB cuando sea necesario mediante &lt;a href=&quot;http://en.wikipedia.org/wiki/HSL_and_HSV#Conversion_from_RGB_to_HSL_or_HSV&quot;&gt;este algoritmo&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="6ce506f9fdd9de2be99bce839024cd6d51ed9912" translate="yes" xml:space="preserve">
          <source>Returns the lowest of one or more numbers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a4c72c1f0ec9a89d8e1d0dd82e563fd74978d2df" translate="yes" xml:space="preserve">
          <source>Returns the map of named arguments passed to a function or mixin that takes a variable argument list. The argument names are strings, and they do not contain the leading &lt;code&gt;$&lt;/code&gt;.</source>
          <target state="translated">Devuelve el mapa de argumentos con nombre pasados ​​a una funci&amp;oacute;n o mixin que toma una lista de argumentos de variable. Los nombres de los argumentos son cadenas y no contienen el &lt;code&gt;$&lt;/code&gt; inicial .</target>
        </trans-unit>
        <trans-unit id="f9042791358dd3eff5509186d46759b1f27e9a95" translate="yes" xml:space="preserve">
          <source>Returns the name of the separator used by &lt;code&gt;$list&lt;/code&gt;, either &lt;code&gt;space&lt;/code&gt; or &lt;code&gt;comma&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d3ba9d6f63d0849882d5f1a33c39e21b9152e562" translate="yes" xml:space="preserve">
          <source>Returns the number of characters in &lt;code&gt;$string&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e9d66a090772cb1ac29a4a909fc75131e66ec53a" translate="yes" xml:space="preserve">
          <source>Returns the number of characters in a string.</source>
          <target state="translated">Devuelve el número de caracteres de una cadena.</target>
        </trans-unit>
        <trans-unit id="dc72d5b2c1136fe75f094ce06d69250ac6ba9b2b" translate="yes" xml:space="preserve">
          <source>Returns the number of elements in the list.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="79d40f0dec271e7c8bdd2623e057c540e17422af" translate="yes" xml:space="preserve">
          <source>Returns the number of key/value pairs in the map.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="51adfc85d1372e7351711e3637b7302b4685ad67" translate="yes" xml:space="preserve">
          <source>Returns the position of a value within a list. If the value isn't found, returns &lt;code&gt;null&lt;/code&gt; instead.</source>
          <target state="translated">Devuelve la posici&amp;oacute;n de un valor dentro de una lista. Si no se encuentra el valor, devuelve &lt;code&gt;null&lt;/code&gt; lugar.</target>
        </trans-unit>
        <trans-unit id="c3a7650066d93652567ae1b3ba371000626bd904" translate="yes" xml:space="preserve">
          <source>Returns the red channel of &lt;code&gt;$color&lt;/code&gt; as a number between 0 and 255.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="05824c8214f50acefd75c7369451c94d4559c1e4" translate="yes" xml:space="preserve">
          <source>Returns the red channel of the color as an integer from 0 to 255.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a6cdad8aaddc6f132e2bab59fdb694bb44740b3e" translate="yes" xml:space="preserve">
          <source>Returns the saturation component of a color. See &lt;a href=&quot;http://en.wikipedia.org/wiki/HSL_and_HSV#Conversion_from_RGB_to_HSL_or_HSV&quot;&gt;the CSS3 HSL specification&lt;/a&gt;. Calculated from RGB where necessary via &lt;a href=&quot;http://en.wikipedia.org/wiki/HSL_and_HSV#Conversion_from_RGB_to_HSL_or_HSV&quot;&gt;this algorithm&lt;/a&gt;.</source>
          <target state="translated">Devuelve el componente de saturaci&amp;oacute;n de un color. Consulte &lt;a href=&quot;http://en.wikipedia.org/wiki/HSL_and_HSV#Conversion_from_RGB_to_HSL_or_HSV&quot;&gt;la especificaci&amp;oacute;n CSS3 HSL&lt;/a&gt; . Calculado a partir de RGB cuando sea necesario mediante &lt;a href=&quot;http://en.wikipedia.org/wiki/HSL_and_HSV#Conversion_from_RGB_to_HSL_or_HSV&quot;&gt;este algoritmo&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="4f998c8bd6e3f467c292b5f896cdc1bfbad1e118" translate="yes" xml:space="preserve">
          <source>Returns the separator of a list. If the list doesn't have a separator due to having fewer than two elements, returns &lt;code&gt;space&lt;/code&gt;.</source>
          <target state="translated">Devuelve el separador de una lista. Si la lista no tiene un separador debido a que tiene menos de dos elementos, devuelve &lt;code&gt;space&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="8a65e32f8c02df40961f91c148db4db09835cb3d" translate="yes" xml:space="preserve">
          <source>Returns the slice of &lt;code&gt;$string&lt;/code&gt; starting at &lt;a href=&quot;../values/strings#string-indexes&quot;&gt;index&lt;/a&gt;&lt;code&gt;$start-at&lt;/code&gt; and ending at index &lt;code&gt;$end-at&lt;/code&gt; (both inclusive).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6d8ce8ca6fbc77475cd2ce1a8bc0f94445877b40" translate="yes" xml:space="preserve">
          <source>Returns the type of &lt;code&gt;$value&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e4dd2b713f992a8bd714d2b748a64683b9489dc1" translate="yes" xml:space="preserve">
          <source>Returns the type of a value.</source>
          <target state="translated">Devuelve el tipo de un valor.</target>
        </trans-unit>
        <trans-unit id="52c8bae0dde8ae72c66d9780a9be60588342bc2f" translate="yes" xml:space="preserve">
          <source>Returns the unit(s) associated with a number. Complex units are sorted in alphabetical order by numerator and denominator.</source>
          <target state="translated">Devuelve la(s)unidad(es)asociada(s)a un número.Las unidades complejas se ordenan en orden alfabético por numerador y denominador.</target>
        </trans-unit>
        <trans-unit id="7342bc67328744667620916e07e0fe0d8094ce2a" translate="yes" xml:space="preserve">
          <source>Returns the units of the number as a string. Complex units are returned in the same format that &lt;a href=&quot;#new-types-number-value-unit-39-39&quot;&gt;the constructor&lt;/a&gt; accepts them.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="01c83de52a2dca912d609d97b917f8b85561d97e" translate="yes" xml:space="preserve">
          <source>Returns the value in a map associated with the given key. If the map doesn't have such a key, returns &lt;code&gt;null&lt;/code&gt;.</source>
          <target state="translated">Devuelve el valor en un mapa asociado con la clave dada. Si el mapa no tiene esa clave, devuelve &lt;code&gt;null&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="b7dcd0fde1ea1271c2e4e394fc0e76520a8b73a1" translate="yes" xml:space="preserve">
          <source>Returns the value in the key/value pair at the given (0-based) index in the map.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6ba96e8a2cacf3edcfdf78e551c810331039247f" translate="yes" xml:space="preserve">
          <source>Returns the value in the targeted map associated with the last key in &lt;code&gt;$keys&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b99b1d620bd47818bd025c5f2aec49ec31e3d15e" translate="yes" xml:space="preserve">
          <source>Returns the value of the number, ignoring units.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="839fe7fa12d4083ad1ec2e51a91dcfad578997d6" translate="yes" xml:space="preserve">
          <source>Returns true if the targeted map contains a value associated with the last key in &lt;code&gt;$keys&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fe7cddced15d06b3d5c223fb2136c8fade2dd322" translate="yes" xml:space="preserve">
          <source>Returns whether &lt;code&gt;$list&lt;/code&gt; has square brackets.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7d29acfc6bc8d53a72d17f8bcfcd995c9a16cd9b" translate="yes" xml:space="preserve">
          <source>Returns whether &lt;code&gt;$number1&lt;/code&gt; and &lt;code&gt;$number2&lt;/code&gt; have compatible units.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="16105bd9d6359d5c603aca235a69b56edbc68880" translate="yes" xml:space="preserve">
          <source>Returns whether &lt;code&gt;$number&lt;/code&gt; has no units.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6a53ebaa01a91a951006e99359c0e5fcf7bd6b1c" translate="yes" xml:space="preserve">
          <source>Returns whether &lt;code&gt;$super&lt;/code&gt; is a superselector of &lt;code&gt;$sub&lt;/code&gt;. This means that &lt;code&gt;$super&lt;/code&gt; matches all the elements that &lt;code&gt;$sub&lt;/code&gt; matches, as well as possibly additional elements. In general, simpler selectors tend to be superselectors of more complex oned.</source>
          <target state="translated">Devuelve si &lt;code&gt;$super&lt;/code&gt; es un superselector de &lt;code&gt;$sub&lt;/code&gt; . Esto significa que &lt;code&gt;$super&lt;/code&gt; coincide con todos los elementos con los que coincide &lt;code&gt;$sub&lt;/code&gt; , as&amp;iacute; como posiblemente con elementos adicionales. En general, los selectores m&amp;aacute;s simples tienden a ser superselectores de uno m&amp;aacute;s complejo.</target>
        </trans-unit>
        <trans-unit id="c5a461f81dc964c8ffe655fbe4cf442722eaefef" translate="yes" xml:space="preserve">
          <source>Returns whether a &lt;a href=&quot;../at-rules/mixin&quot;&gt;mixin&lt;/a&gt; named &lt;code&gt;$name&lt;/code&gt; exists.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b08538c9fc216ee1a181b365f5fae070a1be06c8" translate="yes" xml:space="preserve">
          <source>Returns whether a &lt;a href=&quot;../variables#scope&quot;&gt;global variable&lt;/a&gt; named &lt;code&gt;$name&lt;/code&gt; (without the &lt;code&gt;$&lt;/code&gt;) exists.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="002cc08698af3245841b56580f4802889b222e9b" translate="yes" xml:space="preserve">
          <source>Returns whether a feature exists in the current Sass runtime.</source>
          <target state="translated">Devuelve si existe una característica en el tiempo de ejecución actual de Sass.</target>
        </trans-unit>
        <trans-unit id="f392e55228a2fdd8a56fd4308ff7cf31d1eb488e" translate="yes" xml:space="preserve">
          <source>Returns whether a function named &lt;code&gt;$name&lt;/code&gt; is defined, either as a built-in function or a user-defined function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9e1c1081c33d4ac1921a8fcefbe4187e66d4fcc4" translate="yes" xml:space="preserve">
          <source>Returns whether a list uses square brackets.</source>
          <target state="translated">Devuelve si una lista utiliza corchetes.</target>
        </trans-unit>
        <trans-unit id="b00d68d5169484005d39afdd83116fbb95e55a30" translate="yes" xml:space="preserve">
          <source>Returns whether a map has a value associated with a given key.</source>
          <target state="translated">Devuelve si un mapa tiene un valor asociado a una clave determinada.</target>
        </trans-unit>
        <trans-unit id="ede60bc210641adae890fb0f1eb3bd4419854021" translate="yes" xml:space="preserve">
          <source>Returns whether a number has units.</source>
          <target state="translated">Devuelve si un número tiene unidades.</target>
        </trans-unit>
        <trans-unit id="4a00004e2b1935c2c2bb553d7222c71479652921" translate="yes" xml:space="preserve">
          <source>Returns whether a variable named &lt;code&gt;$name&lt;/code&gt; (without the &lt;code&gt;$&lt;/code&gt;) exists in the current &lt;a href=&quot;../variables#scope&quot;&gt;scope&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e7d91f0199ba497c7b277def80c45a510f116eb5" translate="yes" xml:space="preserve">
          <source>Returns whether the current Sass implementation supports &lt;code&gt;$feature&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6f11efcfe4fdc93eb0599f90fd09d155adadc82d" translate="yes" xml:space="preserve">
          <source>Returns whether the current mixin was passed a &lt;a href=&quot;../at-rules/mixin#content-blocks&quot;&gt;&lt;code&gt;@content&lt;/code&gt; block&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ab4234ef8368f2204ca85546406db77877de7567" translate="yes" xml:space="preserve">
          <source>Returns whether the selector &lt;code&gt;$super&lt;/code&gt; matches all the elements that the selector &lt;code&gt;$sub&lt;/code&gt; matches.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="513e5d1980899cec88f10b5fa101612d18128fb5" translate="yes" xml:space="preserve">
          <source>Returns whether two numbers can added, subtracted, or compared.</source>
          <target state="translated">Devuelve si dos números pueden sumarse,restarse o compararse.</target>
        </trans-unit>
        <trans-unit id="7749fcf802c472b6c2f5bd0556805e456ffd5674" translate="yes" xml:space="preserve">
          <source>Returns:</source>
          <target state="translated">Returns:</target>
        </trans-unit>
        <trans-unit id="468c97f783f63508d1c9aa234bf9b14d8b85daa7" translate="yes" xml:space="preserve">
          <source>Rounds &lt;code&gt;$number&lt;/code&gt; down to the next lowest whole number.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b3b88df508b4bd76b987a32f554d7fe62a550de7" translate="yes" xml:space="preserve">
          <source>Rounds &lt;code&gt;$number&lt;/code&gt; to the nearest whole number.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="27f2ccfb483d701c47177c4c8dc3ce3be55a77f8" translate="yes" xml:space="preserve">
          <source>Rounds &lt;code&gt;$number&lt;/code&gt; up to the next highest whole number.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ceac41cf1a3ce44c31141786b8378b18726d6760" translate="yes" xml:space="preserve">
          <source>Rounds a number down to the previous whole number.</source>
          <target state="translated">Redondea un número hasta el número entero anterior.</target>
        </trans-unit>
        <trans-unit id="76c0fc06f4f913113e6238495ff0b6e9310e1e71" translate="yes" xml:space="preserve">
          <source>Rounds a number to the nearest whole number.</source>
          <target state="translated">Rodeando un número con el número entero más cercano.</target>
        </trans-unit>
        <trans-unit id="ec103be4593a89ce5a25e929fcd41f443602c66e" translate="yes" xml:space="preserve">
          <source>Rounds a number up to the next whole number.</source>
          <target state="translated">Rodeando un número hasta el siguiente número entero.</target>
        </trans-unit>
        <trans-unit id="d109063cf01f9c37fecefd29123037ad01772828" translate="yes" xml:space="preserve">
          <source>Ruby Sass</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f277e1a9f789f12942dd174d6519f1cab0e2c4de" translate="yes" xml:space="preserve">
          <source>Ruby Sass Command-Line Interface</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0e5024456419e499b005f0de7645e6e670bd9ae6" translate="yes" xml:space="preserve">
          <source>SCSS</source>
          <target state="translated">SCSS</target>
        </trans-unit>
        <trans-unit id="abfed73ccc2166edcf9c63923b94efcd1a7b8d04" translate="yes" xml:space="preserve">
          <source>SCSS looks like this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b6eeeb3abd2a7bc179a6b6d5c56488b5f8c903a7" translate="yes" xml:space="preserve">
          <source>Sass</source>
          <target state="translated">Sass</target>
        </trans-unit>
        <trans-unit id="10f303be29e42d399e1affaea1a02b6e87b23864" translate="yes" xml:space="preserve">
          <source>Sass (Syntactically Awesome StyleSheets)</source>
          <target state="translated">Sass (Syntactically Awesome StyleSheets)</target>
        </trans-unit>
        <trans-unit id="341d3556acd434f0488bd651ce9f2aa58ae8059e" translate="yes" xml:space="preserve">
          <source>Sass Functions</source>
          <target state="translated">Funciones de Sass</target>
        </trans-unit>
        <trans-unit id="3b3252d26bb63e6d23bdbd217a16bb9101e80665" translate="yes" xml:space="preserve">
          <source>Sass allows &lt;em&gt;any text&lt;/em&gt; in these function calls, including nested parentheses. Nothing is interpreted as a SassScript expression, with the exception that &lt;a href=&quot;../interpolation&quot;&gt;interpolation&lt;/a&gt; can be used to inject dynamic values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="12104abfe0a714244e52948eb45c8539279c98f2" translate="yes" xml:space="preserve">
          <source>Sass allows CSS rules to be nested within one another. The inner rule then only applies within the outer rule's selector. For example:</source>
          <target state="translated">Sass permite que las reglas del CSS se aniden entre sí.La regla interna entonces sólo se aplica dentro del selector de la regla externa.Por ejemplo:</target>
        </trans-unit>
        <trans-unit id="4c4356380b68b4f78ea663bc4f71a4efe353604b" translate="yes" xml:space="preserve">
          <source>Sass allows you to choose between four different output styles by setting the &lt;a href=&quot;#style-option&quot;&gt;&lt;code&gt;:style&lt;/code&gt; option&lt;/a&gt; or using the &lt;code&gt;--style&lt;/code&gt; command-line flag.</source>
          <target state="translated">Sass le permite elegir entre cuatro estilos de salida diferentes configurando la &lt;a href=&quot;#style-option&quot;&gt;opci&amp;oacute;n &lt;/a&gt; &lt;code&gt;:style&lt;/code&gt; o usando la &lt;code&gt;--style&lt;/code&gt; de l&amp;iacute;nea de comandos --style .</target>
        </trans-unit>
        <trans-unit id="bea2380d4aa23d0747a343c92acdacbbb84e0d8d" translate="yes" xml:space="preserve">
          <source>Sass also has some special behavior for &lt;a href=&quot;at-rules/css&quot;&gt;plain CSS at-rules&lt;/a&gt;: they can contain &lt;a href=&quot;interpolation&quot;&gt;interpolation&lt;/a&gt;, and they can be nested in style rules. Some of them, like &lt;a href=&quot;at-rules/css#media&quot;&gt;&lt;code&gt;@media&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;at-rules/css#supports&quot;&gt;&lt;code&gt;@supports&lt;/code&gt;&lt;/a&gt;, also allow SassScript to be used directly in the rule itself without interpolation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1fcecb417df186591f20e0217f21fc1287957cb4" translate="yes" xml:space="preserve">
          <source>Sass caches parsed documents so that they can be reused without parsing them again unless they have changed. By default, Sass will write these cache files to a location on the filesystem indicated by &lt;a href=&quot;#cache_location-option&quot;&gt;&lt;code&gt;:cache_location&lt;/code&gt;&lt;/a&gt;. If you cannot write to the filesystem or need to share cache across ruby processes or machines, then you can define your own cache store and set the&lt;a href=&quot;#cache_store-option&quot;&gt;&lt;code&gt;:cache_store&lt;/code&gt; option&lt;/a&gt;. For details on creating your own cache store, please see the &lt;a href=&quot;http://sass-lang.com/documentation/Sass/CacheStores/Base.html&quot;&gt;source documentation&lt;/a&gt;.</source>
          <target state="translated">Sass almacena en cach&amp;eacute; los documentos analizados para poder reutilizarlos sin volver a analizarlos, a menos que hayan cambiado. De forma predeterminada, Sass escribir&amp;aacute; estos archivos de cach&amp;eacute; en una ubicaci&amp;oacute;n del sistema de archivos indicada por &lt;a href=&quot;#cache_location-option&quot;&gt; &lt;code&gt;:cache_location&lt;/code&gt; &lt;/a&gt; . Si no puede escribir en el sistema de archivos o necesita compartir cach&amp;eacute; entre procesos o m&amp;aacute;quinas ruby, puede definir su propio almac&amp;eacute;n de cach&amp;eacute; y configurar la &lt;a href=&quot;#cache_store-option&quot;&gt;opci&amp;oacute;n &lt;/a&gt; &lt;code&gt;:cache_store&lt;/code&gt; . Para obtener detalles sobre c&amp;oacute;mo crear su propio almac&amp;eacute;n de cach&amp;eacute;, consulte la &lt;a href=&quot;http://sass-lang.com/documentation/Sass/CacheStores/Base.html&quot;&gt;documentaci&amp;oacute;n de origen&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="bfd8d49434b5dc18b7647e61d36eb01f1ddf972c" translate="yes" xml:space="preserve">
          <source>Sass can be used in three ways: as a command-line tool, as a standalone Ruby module, and as a plugin for any Rack-enabled framework, including Ruby on Rails and Merb. The first step for all of these is to install the Sass gem:</source>
          <target state="translated">Sass puede ser usado de tres maneras:como una herramienta de línea de comandos,como un módulo independiente de Ruby,y como un plugin para cualquier marco de trabajo habilitado para Rack,incluyendo Ruby on Rails y Merb.El primer paso para todo esto es instalar la gema Sass:</target>
        </trans-unit>
        <trans-unit id="d2d315da5236e9452c305d3574bf77c578942e42" translate="yes" xml:space="preserve">
          <source>Sass defines syntax for a number of operations:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="92dff0f242d6fcdad22301185abdc13bbad14028" translate="yes" xml:space="preserve">
          <source>Sass doesn&amp;rsquo;t distinguish between whole numbers and decimals, so for example &lt;code&gt;5
/ 2&lt;/code&gt; returns &lt;code&gt;2.5&lt;/code&gt; rather than &lt;code&gt;2&lt;/code&gt;. This is the same behavior as JavaScript, but different than many other programming languages.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="337bc0dd2cba2d8a74fcc3d911ca1ad24d782a82" translate="yes" xml:space="preserve">
          <source>Sass extends CSS's &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/@import&quot;&gt;&lt;code&gt;@import&lt;/code&gt; rule&lt;/a&gt; with the ability to import Sass and CSS stylesheets, providing access to &lt;a href=&quot;mixin&quot;&gt;mixins&lt;/a&gt;, &lt;a href=&quot;function&quot;&gt;functions&lt;/a&gt;, and &lt;a href=&quot;../variables&quot;&gt;variables&lt;/a&gt; and combining multiple stylesheets' CSS together. Unlike plain CSS imports, which require the browser to make multiple HTTP requests as it renders your page, Sass imports are handled entirely during compilation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9785c4245593a2393e5e7772e6bebb5a19179df5" translate="yes" xml:space="preserve">
          <source>Sass extends the CSS &lt;code&gt;@import&lt;/code&gt; rule to allow it to import SCSS and Sass files. All imported SCSS and Sass files will be merged together into a single CSS output file. In addition, any variables or &lt;a href=&quot;#mixins&quot;&gt;mixins&lt;/a&gt; defined in imported files can be used in the main file.</source>
          <target state="translated">Sass extiende la regla &lt;code&gt;@import&lt;/code&gt; de CSS para permitirle importar archivos SCSS y Sass. Todos los archivos SCSS y Sass importados se fusionar&amp;aacute;n en un solo archivo de salida CSS. Adem&amp;aacute;s, cualquier variable o &lt;a href=&quot;#mixins&quot;&gt;mixins&lt;/a&gt; definidos en archivos importados se pueden utilizar en el archivo principal.</target>
        </trans-unit>
        <trans-unit id="5f61b7c2b219adb088c062ff92b89a8fd236d7b6" translate="yes" xml:space="preserve">
          <source>Sass functions can also be called using explicit keyword arguments. The above example can also be written as:</source>
          <target state="translated">Las funciones Sass también pueden ser llamadas usando argumentos explícitos de palabras clave.El ejemplo anterior también puede escribirse como:</target>
        </trans-unit>
        <trans-unit id="ff550501230dff58e1d23dbb2ecaaabad4f2a87d" translate="yes" xml:space="preserve">
          <source>Sass has a number of &lt;a href=&quot;../modules/string&quot;&gt;string functions&lt;/a&gt; that take or return numbers, called &lt;em&gt;indexes&lt;/em&gt;, that refer to the characters in a string. The index 1 indicates the first character of the string. Note that this is different than many programming languages where indexes start at 0! Sass also makes it easy to refer to the end of a string. The index -1 refers to the last character in a string, -2 refers to the second-to-last, and so on.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8f30d9a097206202b2e27bc2923ae98f1086693c" translate="yes" xml:space="preserve">
          <source>Sass has a pretty standard &lt;a href=&quot;https://en.wikipedia.org/wiki/Order_of_operations#Programming_languages&quot;&gt;order of operations&lt;/a&gt;, from tightest to loosest:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="11f0a2ddd6b73783822a7ce23cfd75f0585a6384" translate="yes" xml:space="preserve">
          <source>Sass has a special kind of selector known as a &amp;ldquo;placeholder&amp;rdquo;. It looks and acts a lot like a class selector, but it starts with a &lt;code&gt;%&lt;/code&gt; and it's not included in the CSS output. In fact, any complex selector (the ones between the commas) that even &lt;em&gt;contains&lt;/em&gt; a placeholder selector isn't included in the CSS, nor is any style rule whose selectors all contain placeholders,</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ce2b28d788b61de8fde6c17d043022ab46d4d693" translate="yes" xml:space="preserve">
          <source>Sass has built-in support for color values. Just like CSS colors, they represent points in the &lt;a href=&quot;https://en.wikipedia.org/wiki/SRGB&quot;&gt;sRGB color space&lt;/a&gt;, although many Sass &lt;a href=&quot;../modules/color&quot;&gt;color functions&lt;/a&gt; operate using &lt;a href=&quot;https://en.wikipedia.org/wiki/HSL_and_HSV&quot;&gt;HSL coordinates&lt;/a&gt; (which are just another way of expressing sRGB colors). Sass colors can be written as hex codes (&lt;code&gt;#f2ece4&lt;/code&gt; or &lt;code&gt;#b37399aa&lt;/code&gt;), &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/color_value#Color_keywords&quot;&gt;CSS color names&lt;/a&gt; (&lt;code&gt;midnightblue&lt;/code&gt;, &lt;code&gt;transparent&lt;/code&gt;), or the functions &lt;a href=&quot;../modules#rgb&quot;&gt;&lt;code&gt;rgb()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../modules#rgba&quot;&gt;&lt;code&gt;rgba()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../modules#hsl&quot;&gt;&lt;code&gt;hsl()&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;../modules#hsla&quot;&gt;&lt;code&gt;hsla()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0cc09a0fb175527dc21d3ed9c5a3f39cbe698f37" translate="yes" xml:space="preserve">
          <source>Sass has powerful &lt;a href=&quot;values/numbers#units&quot;&gt;unit arithmetic&lt;/a&gt; that you can use instead. For example, instead of writing &lt;code&gt;#{$width}px&lt;/code&gt;, write &lt;code&gt;$width * 1px&lt;/code&gt;&amp;mdash;or better yet, declare the &lt;code&gt;$width&lt;/code&gt; variable in terms of &lt;code&gt;px&lt;/code&gt; to begin with. That way if &lt;code&gt;$width&lt;/code&gt; already has units, you&amp;rsquo;ll get a nice error message instead of compiling bogus CSS.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3b0401d0f31b23c64c98d17c0dd08346bbdbb842" translate="yes" xml:space="preserve">
          <source>Sass has powerful support for manipulating units based on how &lt;a href=&quot;https://en.wikipedia.org/wiki/Unit_of_measurement#Calculations_with_units_of_measurement&quot;&gt;real-world unit calculations&lt;/a&gt; work. When two numbers are multiplied, their units are multiplied as well. When one number is divided by another, the result takes its numerator units from the first number and its denominator units from the second. A number can have any number of units in the numerator and/or denominator.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cfa9fc50eb1a1d181640003689cbe25d33fc0977" translate="yes" xml:space="preserve">
          <source>Sass importers are in charge of taking paths passed to &lt;code&gt;@import&lt;/code&gt; and finding the appropriate Sass code for those paths. By default, this code is loaded from the &lt;a href=&quot;http://sass-lang.com/documentation/Sass/Importers/Filesystem.html&quot;&gt;filesystem&lt;/a&gt;, but importers could be added to load from a database, over HTTP, or use a different file naming scheme than what Sass expects.</source>
          <target state="translated">Los importadores de Sass est&amp;aacute;n a cargo de tomar las rutas pasadas a &lt;code&gt;@import&lt;/code&gt; y encontrar el c&amp;oacute;digo Sass apropiado para esas rutas. De forma predeterminada, este c&amp;oacute;digo se carga desde el &lt;a href=&quot;http://sass-lang.com/documentation/Sass/Importers/Filesystem.html&quot;&gt;sistema de archivos&lt;/a&gt; , pero se pueden agregar importadores para cargar desde una base de datos, a trav&amp;eacute;s de HTTP, o usar un esquema de nomenclatura de archivos diferente al que espera Sass.</target>
        </trans-unit>
        <trans-unit id="c23b0c647f0aa1cdb3a101c61a06d56093b805e0" translate="yes" xml:space="preserve">
          <source>Sass imports have the same syntax as CSS imports, except that they allow multiple imports to be separated by commas rather than requiring each one to have its own &lt;code&gt;@import&lt;/code&gt;. Also, in the &lt;a href=&quot;../syntax#the-indented-syntax&quot;&gt;indented syntax&lt;/a&gt;, imported URLs aren&amp;rsquo;t required to have quotes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="71828edc965d80bf34fc48b3e8c5143a963e50da" translate="yes" xml:space="preserve">
          <source>Sass is a stylesheet language that&amp;rsquo;s compiled to CSS. It allows you to use &lt;a href=&quot;variables&quot;&gt;variables&lt;/a&gt;, &lt;a href=&quot;style-rules#nesting&quot;&gt;nested rules&lt;/a&gt;, &lt;a href=&quot;at-rules/mixin&quot;&gt;mixins&lt;/a&gt;, &lt;a href=&quot;modules&quot;&gt;functions&lt;/a&gt;, and more, all with a fully CSS-compatible syntax. Sass helps keep large stylesheets well-organized and makes it easy to share design within and across projects.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="55fbe07c7def3c112a3dd15dcf43d50ee3a3c5a8" translate="yes" xml:space="preserve">
          <source>Sass is an extension of CSS that adds power and elegance to the basic language. It allows you to use &lt;a href=&quot;#variables_&quot;&gt;variables&lt;/a&gt;, &lt;a href=&quot;#nested_rules&quot;&gt;nested rules&lt;/a&gt;, &lt;a href=&quot;#mixins&quot;&gt;mixins&lt;/a&gt;, &lt;a href=&quot;#import&quot;&gt;inline imports&lt;/a&gt;, and more, all with a fully CSS-compatible syntax. Sass helps keep large stylesheets well-organized, and get small stylesheets up and running quickly, particularly with the help of &lt;a href=&quot;http://compass-style.org&quot;&gt;the Compass style library&lt;/a&gt;.</source>
          <target state="translated">Sass es una extensi&amp;oacute;n de CSS que agrega poder y elegancia al lenguaje b&amp;aacute;sico. Le permite usar &lt;a href=&quot;#variables_&quot;&gt;variables&lt;/a&gt; , &lt;a href=&quot;#nested_rules&quot;&gt;reglas anidadas&lt;/a&gt; , &lt;a href=&quot;#mixins&quot;&gt;mixins&lt;/a&gt; , &lt;a href=&quot;#import&quot;&gt;importaciones en l&amp;iacute;nea&lt;/a&gt; y m&amp;aacute;s, todo con una sintaxis totalmente compatible con CSS. Sass ayuda a mantener las hojas de estilo grandes bien organizadas y a poner en marcha peque&amp;ntilde;as hojas de estilo r&amp;aacute;pidamente, especialmente con la ayuda de &lt;a href=&quot;http://compass-style.org&quot;&gt;la biblioteca de estilos de Compass&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="ddcdbf1cd9ff7a1977259d98743c6fafd982298a" translate="yes" xml:space="preserve">
          <source>Sass libraries and design systems tend to share and override configurations that are represented as nested maps (maps that contain maps that contain maps).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f326907522a69fe4d59a051e191ed4e4cf75ebdf" translate="yes" xml:space="preserve">
          <source>Sass lists can contain one or even zero elements. A single-element list can be written either &lt;code&gt;(&amp;lt;expression&amp;gt;,)&lt;/code&gt; or &lt;code&gt;[&amp;lt;expression&amp;gt;]&lt;/code&gt;, and a zero-element list can be written either &lt;code&gt;()&lt;/code&gt; or &lt;code&gt;[]&lt;/code&gt;. Also, all &lt;a href=&quot;../modules/list&quot;&gt;list functions&lt;/a&gt; will treat individual values that aren&amp;rsquo;t in lists as though they&amp;rsquo;re lists containing that value, which means you rarely need to explicitly create single-element lists.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6a69154c2b4acc4e55d312e10bb9b932ccfca243" translate="yes" xml:space="preserve">
          <source>Sass looks for other Sass files in the current directory, and the Sass file directory under Rack, Rails, or Merb. Additional search directories may be specified using the &lt;a href=&quot;#load_paths-option&quot;&gt;&lt;code&gt;:load_paths&lt;/code&gt;&lt;/a&gt; option, or the &lt;code&gt;--load-path&lt;/code&gt; option on the command line.</source>
          <target state="translated">Sass busca otros archivos Sass en el directorio actual y el directorio de archivos Sass en Rack, Rails o Merb. Se pueden especificar directorios de b&amp;uacute;squeda adicionales usando la opci&amp;oacute;n &lt;a href=&quot;#load_paths-option&quot;&gt; &lt;code&gt;:load_paths&lt;/code&gt; &lt;/a&gt; o la opci&amp;oacute;n &lt;code&gt;--load-path&lt;/code&gt; en la l&amp;iacute;nea de comando.</target>
        </trans-unit>
        <trans-unit id="cb312b8bd38832476537b6a48f7e3156e89b7ab3" translate="yes" xml:space="preserve">
          <source>Sass makes this easy with the &lt;code&gt;@error&lt;/code&gt; rule, which is written &lt;code&gt;@error &amp;lt;expression&amp;gt;&lt;/code&gt;. It prints the value of the &lt;a href=&quot;../syntax/structure#expressions&quot;&gt;expression&lt;/a&gt; (usually a string) along with a stack trace indicating how the current mixin or function was called. Once the error is printed, Sass stops compiling the stylesheet and tells whatever system is running it that an error occurred.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f3c25609caf02ddbba8fecd7b0288531ed8f4254" translate="yes" xml:space="preserve">
          <source>Sass numbers support the same formats as CSS numbers, including &lt;a href=&quot;https://en.wikipedia.org/wiki/Scientific_notation&quot;&gt;scientific notation&lt;/a&gt;, which is written with an &lt;code&gt;e&lt;/code&gt; between the number and its power of 10. Because support for scientific notation in browsers has historically been spotty, Sass always compiles it to fully expanded numbers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0642b9446f0b3a3e84ed89b56af8007af3e74738" translate="yes" xml:space="preserve">
          <source>Sass numbers support up to 10 digits of precision after the decimal point. This means a few different things:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f686501493359aaeb6e8334dfbf749c38492e851" translate="yes" xml:space="preserve">
          <source>Sass only parses selectors &lt;em&gt;after&lt;/em&gt; interpolation is resolved. This means you can safely use interpolation to generate any part of the selector without worrying that it won&amp;rsquo;t parse.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3de1e726ce1dc0c72b1e4f870bd0f36653583003" translate="yes" xml:space="preserve">
          <source>Sass provides a handful of &lt;a href=&quot;../modules/list&quot;&gt;functions&lt;/a&gt; that make it possible to use lists to write powerful style libraries, or to make your app&amp;rsquo;s stylesheet cleaner and more maintainable.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b0009ffe7a96796da80e21fa04676bad52a846b6" translate="yes" xml:space="preserve">
          <source>Sass provides a number of advanced customizations for users with unique requirements. Using these features requires a strong understanding of Ruby.</source>
          <target state="translated">Sass ofrece una serie de personalizaciones avanzadas para usuarios con necesidades únicas.El uso de estas características requiere una fuerte comprensión de Ruby.</target>
        </trans-unit>
        <trans-unit id="33c553d9dc71a86be474f4c5f11876d63d15791a" translate="yes" xml:space="preserve">
          <source>Sass provides a number of at-rules that make it possible to control whether styles get emitted, or to emit them multiple times with small variations. They can also be used in &lt;a href=&quot;mixin&quot;&gt;mixins&lt;/a&gt; and &lt;a href=&quot;function&quot;&gt;functions&lt;/a&gt; to write small algorithms to make writing your Sass easier. Sass supports four flow control rules:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="49527978dd2cf7878bba69f22d0f51b489af35ee" translate="yes" xml:space="preserve">
          <source>Sass provides many built-in modules which contain useful functions (and the occasional mixin). These modules can be loaded with the &lt;a href=&quot;at-rules/use&quot;&gt;&lt;code&gt;@use&lt;/code&gt; rule&lt;/a&gt; like any user-defined stylesheet, and their functions can be called &lt;a href=&quot;at-rules/use#loading-members&quot;&gt;like any other module member&lt;/a&gt;. All built-in module URLs begin with &lt;code&gt;sass:&lt;/code&gt; to indicate that they're part of Sass itself.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4ab8d4eb5816ea54277da228d107eca369d01633" translate="yes" xml:space="preserve">
          <source>Sass provides the following built-in modules:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4025d3f80e1fb8425ab404ceb4a3d8a1c0ee9b9f" translate="yes" xml:space="preserve">
          <source>Sass stylesheets don't work the same as views. They don't contain dynamic content, so the CSS only needs to be generated when the Sass file has been updated. By default, &lt;code&gt;.sass&lt;/code&gt; and &lt;code&gt;.scss&lt;/code&gt; files are placed in public/stylesheets/sass (this can be customized with the &lt;a href=&quot;#template_location-option&quot;&gt;&lt;code&gt;:template_location&lt;/code&gt;&lt;/a&gt; option). Then, whenever necessary, they're compiled into corresponding CSS files in public/stylesheets. For instance, public/stylesheets/sass/main.scss would be compiled to public/stylesheets/main.css.</source>
          <target state="translated">Las hojas de estilo de Sass no funcionan igual que las vistas. No contienen contenido din&amp;aacute;mico, por lo que el CSS solo debe generarse cuando se haya actualizado el archivo Sass. De forma predeterminada, los archivos &lt;code&gt;.sass&lt;/code&gt; y &lt;code&gt;.scss&lt;/code&gt; se colocan en public / stylesheets / sass (esto se puede personalizar con la opci&amp;oacute;n &lt;a href=&quot;#template_location-option&quot;&gt; &lt;code&gt;:template_location&lt;/code&gt; &lt;/a&gt; ). Luego, cuando sea necesario, se compilan en los archivos CSS correspondientes en public / stylesheets. Por ejemplo, public / stylesheets / sass / main.scss se compilar&amp;iacute;a en public / stylesheets / main.css.</target>
        </trans-unit>
        <trans-unit id="c61e231625156d893ed8fe4d22fab81c39ec0d02" translate="yes" xml:space="preserve">
          <source>Sass supports a few operators that generate &lt;a href=&quot;../values/strings&quot;&gt;strings&lt;/a&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="960801c5484134bb382dec9eafb1a76226deb27a" translate="yes" xml:space="preserve">
          <source>Sass supports a handful of useful &lt;code&gt;operators&lt;/code&gt; for working with different values. These include the standard mathematical operators like &lt;code&gt;+&lt;/code&gt; and &lt;code&gt;*&lt;/code&gt;, as well as operators for various other types:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="434a0ae241ff4bb8417d3c68ada1d1863e788791" translate="yes" xml:space="preserve">
          <source>Sass supports a number of value types, most of which come straight from CSS. Every &lt;a href=&quot;syntax/structure#expressions&quot;&gt;expression&lt;/a&gt; produces a value, &lt;a href=&quot;variables&quot;&gt;variables&lt;/a&gt; hold values. Most value types come straight from CSS:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dcbfa369bee1ee5f03dba6ad8ae4403b6fb0b310" translate="yes" xml:space="preserve">
          <source>Sass supports a special &lt;code&gt;=&lt;/code&gt; operator that&amp;rsquo;s only allowed in function arguments, which just creates an &lt;a href=&quot;values/strings#unquoted&quot;&gt;unquoted string&lt;/a&gt; with its two operands separated by &lt;code&gt;=&lt;/code&gt;. This exists for backwards-compatibility with very old IE-only syntax.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a1d70054db4e1dfd0e0b67c3e7e01b1d3bfc6c9a" translate="yes" xml:space="preserve">
          <source>Sass supports a special type of selector called a &quot;placeholder selector&quot;. These look like class and id selectors, except the &lt;code&gt;#&lt;/code&gt; or &lt;code&gt;.&lt;/code&gt; is replaced by &lt;code&gt;%&lt;/code&gt;. They're meant to be used with the &lt;a href=&quot;#extend&quot;&gt;&lt;code&gt;@extend&lt;/code&gt; directive&lt;/a&gt;; for more information see &lt;a href=&quot;#placeholders&quot;&gt;&lt;code&gt;@extend&lt;/code&gt;-Only Selectors&lt;/a&gt;.</source>
          <target state="translated">Sass admite un tipo especial de selector llamado &quot;selector de marcador de posici&amp;oacute;n&quot;. Parecen selectores de clase e id, excepto el &lt;code&gt;#&lt;/code&gt; o &lt;code&gt;.&lt;/code&gt; se reemplaza por &lt;code&gt;%&lt;/code&gt; . Est&amp;aacute;n pensados ​​para usarse con la &lt;a href=&quot;#extend&quot;&gt;directiva &lt;/a&gt; &lt;code&gt;@extend&lt;/code&gt; ; para obtener m&amp;aacute;s informaci&amp;oacute;n, consulte &lt;a href=&quot;#placeholders&quot;&gt; &lt;code&gt;@extend&lt;/code&gt; -Only Selectors&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="2109347200ea29f2dbcac97a7a1a0cbae14f6ebb" translate="yes" xml:space="preserve">
          <source>Sass supports all CSS3 &lt;code&gt;@&lt;/code&gt;-rules, as well as some additional Sass-specific ones known as &quot;directives.&quot; These have various effects in Sass, detailed below. See also &lt;a href=&quot;#control_directives&quot;&gt;control directives&lt;/a&gt; and &lt;a href=&quot;#mixins&quot;&gt;mixin directives&lt;/a&gt;.</source>
          <target state="translated">Sass admite todas las reglas &lt;code&gt;@&lt;/code&gt; -CSS3, as&amp;iacute; como algunas adicionales espec&amp;iacute;ficas de Sass conocidas como &quot;directivas&quot;. Estos tienen varios efectos en Sass, que se detallan a continuaci&amp;oacute;n. Vea tambi&amp;eacute;n &lt;a href=&quot;#control_directives&quot;&gt;directivas de control&lt;/a&gt; y &lt;a href=&quot;#mixins&quot;&gt;directivas mixin&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="efff7bc7d11d2d156e403b4d0c736e7d9c2a72aa" translate="yes" xml:space="preserve">
          <source>Sass supports all the at-rules that are part of CSS proper. To stay flexible and forwards-compatible with future versions of CSS, Sass has general support that covers almost all at-rules by default. A CSS at-rule is written &lt;code&gt;@&amp;lt;name&amp;gt; &amp;lt;value&amp;gt;&lt;/code&gt;, &lt;code&gt;@&amp;lt;name&amp;gt; { ... }&lt;/code&gt;, or &lt;code&gt;@&amp;lt;name&amp;gt; &amp;lt;value&amp;gt; { ... }&lt;/code&gt;. The name must be an identifier, and the value (if one exists) can be pretty much anything. Both the name and the value can contain &lt;a href=&quot;../interpolation&quot;&gt;interpolation&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0edbace979a3c6494ad08643df2a24269d903d3e" translate="yes" xml:space="preserve">
          <source>Sass supports many useful &lt;a href=&quot;../modules/color&quot;&gt;color functions&lt;/a&gt; that can be used to create new colors based on existing ones by &lt;a href=&quot;../modules/color#mix&quot;&gt;mixing colors together&lt;/a&gt; or &lt;a href=&quot;../modules/color#scale&quot;&gt;scaling their hue, saturation, or lightness&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9215ecc9de12de338c73b85746fafdaaf6b06e16" translate="yes" xml:space="preserve">
          <source>Sass supports standard multiline CSS comments with &lt;code&gt;/* */&lt;/code&gt;, as well as single-line comments with &lt;code&gt;//&lt;/code&gt;. The multiline comments are preserved in the CSS output where possible, while the single-line comments are removed. For example:</source>
          <target state="translated">Sass admite comentarios CSS est&amp;aacute;ndar de varias l&amp;iacute;neas con &lt;code&gt;/* */&lt;/code&gt; , as&amp;iacute; como comentarios de una sola l&amp;iacute;nea con &lt;code&gt;//&lt;/code&gt; . Los comentarios de varias l&amp;iacute;neas se conservan en la salida CSS siempre que sea posible, mientras que los comentarios de una sola l&amp;iacute;nea se eliminan. Por ejemplo:</target>
        </trans-unit>
        <trans-unit id="ad387609919992a7464bd532cbb72109ece70665" translate="yes" xml:space="preserve">
          <source>Sass supports the standard set of mathematical operators for &lt;a href=&quot;../values/numbers&quot;&gt;numbers&lt;/a&gt;. They automatically convert between compatible units.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e55bf6412b58a50f76ff43db8dc64446bdfa78d4" translate="yes" xml:space="preserve">
          <source>Sass supports two different syntaxes. Each one can load the other, so it's up to you and your team which one to choose.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8d8f3ecedc8edcdcd2ba7a7cf536fa8406d7ccdf" translate="yes" xml:space="preserve">
          <source>Sass variables are &lt;em&gt;imperative&lt;/em&gt;, which means if you use a variable and then change its value, the earlier use will stay the same. CSS variables are &lt;em&gt;declarative&lt;/em&gt;, which means if you change the value, it&amp;rsquo;ll affect both earlier uses and later uses.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b52ce5915995653ac969d0c85917aef9719a1096" translate="yes" xml:space="preserve">
          <source>Sass variables are all compiled away by Sass. CSS variables are included in the CSS output.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9af20c986ec9da33a8716c1d52ee89798428472d" translate="yes" xml:space="preserve">
          <source>Sass variables are simple: you assign a value to a name that begins with &lt;code&gt;$&lt;/code&gt;, and then you can refer to that name instead of the value itself. But despite their simplicity, they're one of the most useful tools Sass brings to the table. Variables make it possible to reduce repetition, do complex math, configure libraries, and much more.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="005fc56aea0ad08689769aa5d4e9066a2c9fa4e5" translate="yes" xml:space="preserve">
          <source>Sass variables, like all Sass identifiers, treat hyphens and underscores as identical. This means that &lt;code&gt;$font-size&lt;/code&gt; and &lt;code&gt;$font_size&lt;/code&gt; both refer to the same variable. This is a historical holdover from the very early days of Sass, when it &lt;em&gt;only&lt;/em&gt; allowed underscores in identifier names. Once Sass added support for hyphens to match CSS&amp;rsquo;s syntax, the two were made equivalent to make migration easier.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="86fc2e831482914e7d296b365a94c163b569e70a" translate="yes" xml:space="preserve">
          <source>Sass will always encode its output as UTF-8. It will include a &lt;code&gt;@charset&lt;/code&gt; declaration if and only if the output file contains non-ASCII characters. In compressed mode, a UTF-8 byte order mark is used in place of a &lt;code&gt;@charset&lt;/code&gt; declaration.</source>
          <target state="translated">Sass siempre codificar&amp;aacute; su salida como UTF-8. &lt;code&gt;@charset&lt;/code&gt; una declaraci&amp;oacute;n @charset si y solo si el archivo de salida contiene caracteres no ASCII. En el modo comprimido, se utiliza una marca de orden de bytes UTF-8 en lugar de una declaraci&amp;oacute;n &lt;code&gt;@charset&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="1ad32e6ce5a92b0d94044a1ca6fda1872af3807e" translate="yes" xml:space="preserve">
          <source>Sass will automatically convert between compatible units, although which unit it will choose for the result depends on which implementation of Sass you&amp;rsquo;re using.If you try to combine incompatible units, like &lt;code&gt;1in + 1em&lt;/code&gt;, Sass will throw an error.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8cd620b61343aa6fe6e3e1e3a184d2f9a181519d" translate="yes" xml:space="preserve">
          <source>Sass&amp;rsquo;s &lt;a href=&quot;../operators/numeric#slash-separated-values&quot;&gt;special parsing rules&lt;/a&gt; for slash-separated values make it difficult to pass variables for &lt;code&gt;$blackness&lt;/code&gt; or &lt;code&gt;$alpha&lt;/code&gt; when using the &lt;code&gt;color.hwb($hue $whiteness $blackness / $alpha)&lt;/code&gt; signature. Consider using &lt;code&gt;color.hwb($hue, $whiteness, $blackness, $alpha)&lt;/code&gt; instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1fe37750469e345e571d1fb1921fe49b388c53c7" translate="yes" xml:space="preserve">
          <source>Sass&amp;rsquo;s &lt;a href=&quot;operators/numeric#slash-separated-values&quot;&gt;special parsing rules&lt;/a&gt; for slash-separated values make it difficult to pass variables for &lt;code&gt;$blue&lt;/code&gt; or &lt;code&gt;$alpha&lt;/code&gt; when using the &lt;code&gt;rgb($red $green $blue / $alpha)&lt;/code&gt; signature. Consider using &lt;code&gt;rgb($red, $green, $blue, $alpha)&lt;/code&gt; instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4a04fb2da5e9764122c9c7d75ec45d105af5287b" translate="yes" xml:space="preserve">
          <source>Sass&amp;rsquo;s &lt;a href=&quot;operators/numeric#slash-separated-values&quot;&gt;special parsing rules&lt;/a&gt; for slash-separated values make it difficult to pass variables for &lt;code&gt;$lightness&lt;/code&gt; or &lt;code&gt;$alpha&lt;/code&gt; when using the &lt;code&gt;hsl($hue $saturation $lightness / $alpha)&lt;/code&gt; signature. Consider using &lt;code&gt;hsl($hue, $saturation, $lightness, $alpha)&lt;/code&gt; instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ce844da4e80d92bf1eb0bc6278bf298072b631c5" translate="yes" xml:space="preserve">
          <source>Sass&amp;rsquo;s &lt;a href=&quot;use&quot;&gt;module system&lt;/a&gt; integrates seamlessly with &lt;code&gt;@import&lt;/code&gt;, whether you&amp;rsquo;re importing a file that contains &lt;code&gt;@use&lt;/code&gt; rules or loading a file that contains imports as a module. We want to make the transition from &lt;code&gt;@import&lt;/code&gt; to &lt;code&gt;@use&lt;/code&gt; as smooth as possible.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6babd285fe65d953ef5ca31abc267f057579bc8e" translate="yes" xml:space="preserve">
          <source>Sass&amp;rsquo;s &lt;code&gt;@extend&lt;/code&gt; rule solves this. It&amp;rsquo;s written &lt;code&gt;@extend &amp;lt;selector&amp;gt;&lt;/code&gt;, and it tells Sass that one selector should inherit the styles of another.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9a029dc1ee662d27c405277aa39c5baecc4c4ef5" translate="yes" xml:space="preserve">
          <source>SassScript</source>
          <target state="translated">SassScript</target>
        </trans-unit>
        <trans-unit id="1e9e5f520b46482b7d78207fd2f87587cbd9101f" translate="yes" xml:space="preserve">
          <source>SassScript #sassscript</source>
          <target state="translated">SassScript #sassscript</target>
        </trans-unit>
        <trans-unit id="eddf0c34ceef208253270813e40998133922216a" translate="yes" xml:space="preserve">
          <source>SassScript also supports all other types of CSS property value, such as Unicode ranges and &lt;code&gt;!important&lt;/code&gt; declarations. However, it has no special handling for these types. They're treated just like unquoted strings.</source>
          <target state="translated">SassScript tambi&amp;eacute;n admite todos los dem&amp;aacute;s tipos de valores de propiedad CSS, como rangos Unicode y declaraciones &lt;code&gt;!important&lt;/code&gt; . Sin embargo, no tiene un manejo especial para estos tipos. Se tratan como cadenas sin comillas.</target>
        </trans-unit>
        <trans-unit id="30070efcd26bcdfe4438c8cf2d17f83b0465a179" translate="yes" xml:space="preserve">
          <source>SassScript can also be used to generate selectors and property names, which is useful when writing &lt;a href=&quot;#mixins&quot;&gt;mixins&lt;/a&gt;. This is done via &lt;a href=&quot;#interpolation_&quot;&gt;interpolation&lt;/a&gt;.</source>
          <target state="translated">SassScript tambi&amp;eacute;n se puede usar para generar selectores y nombres de propiedades, lo cual es &amp;uacute;til al escribir &lt;a href=&quot;#mixins&quot;&gt;mixins&lt;/a&gt; . Esto se realiza mediante &lt;a href=&quot;#interpolation_&quot;&gt;interpolaci&amp;oacute;n&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="596d9a884cf209787a0dc4c00e05192356951ab7" translate="yes" xml:space="preserve">
          <source>SassScript defines some useful functions that are called using the normal CSS function syntax:</source>
          <target state="translated">SassScript define algunas funciones útiles que se llaman usando la sintaxis normal de la función CSS:</target>
        </trans-unit>
        <trans-unit id="6a72866c8b59f464530dbfd219c2c0c494590ba2" translate="yes" xml:space="preserve">
          <source>SassScript supports &lt;code&gt;and&lt;/code&gt;, &lt;code&gt;or&lt;/code&gt;, and &lt;code&gt;not&lt;/code&gt; operators for boolean values.</source>
          <target state="translated">SassScript admite operadores &lt;code&gt;and&lt;/code&gt; , &lt;code&gt;or&lt;/code&gt; , y &lt;code&gt;not&lt;/code&gt; para valores booleanos.</target>
        </trans-unit>
        <trans-unit id="c989ac7fb0836232ff868fa3ef818e56620ba887" translate="yes" xml:space="preserve">
          <source>SassScript supports basic control directives and expressions for including styles only under some conditions or including the same style several times with variations.</source>
          <target state="translated">SassScript soporta directivas y expresiones de control básicas para incluir estilos sólo en algunas condiciones o incluir el mismo estilo varias veces con variaciones.</target>
        </trans-unit>
        <trans-unit id="8bc453bdb705d2d310a2a0bf56ccd55390ab99d1" translate="yes" xml:space="preserve">
          <source>SassScript supports eight data types:</source>
          <target state="translated">SassScript soporta ocho tipos de datos:</target>
        </trans-unit>
        <trans-unit id="5719e48057100bfd7e91627b5815247b4ef02f26" translate="yes" xml:space="preserve">
          <source>SassScript supports the standard arithmetic operations on numbers (addition &lt;code&gt;+&lt;/code&gt;, subtraction &lt;code&gt;-&lt;/code&gt;, multiplication &lt;code&gt;*&lt;/code&gt;, division &lt;code&gt;/&lt;/code&gt;, and modulo &lt;code&gt;%&lt;/code&gt;). Sass math functions preserve units during arithmetic operations. This means that, just like in real life, you cannot work on numbers with incompatible units (such as adding a number with &lt;code&gt;px&lt;/code&gt; and &lt;code&gt;em&lt;/code&gt;) and two numbers with the same unit that are multiplied together will produce square units (&lt;code&gt;10px * 10px == 100px * px&lt;/code&gt;). &lt;strong&gt;Be Aware&lt;/strong&gt; that &lt;code&gt;px * px&lt;/code&gt; is an invalid CSS unit and you will get an error from Sass for attempting to use invalid units in CSS.</source>
          <target state="translated">SassScript admite las operaciones aritm&amp;eacute;ticas est&amp;aacute;ndar con n&amp;uacute;meros (suma &lt;code&gt;+&lt;/code&gt; , resta &lt;code&gt;-&lt;/code&gt; , multiplicaci&amp;oacute;n &lt;code&gt;*&lt;/code&gt; , divisi&amp;oacute;n &lt;code&gt;/&lt;/code&gt; y m&amp;oacute;dulo &lt;code&gt;%&lt;/code&gt; ). Las funciones matem&amp;aacute;ticas de Sass conservan unidades durante las operaciones aritm&amp;eacute;ticas. Esto significa que, al igual que en la vida real, no puede trabajar con n&amp;uacute;meros con unidades incompatibles (como sumar un n&amp;uacute;mero con &lt;code&gt;px&lt;/code&gt; y &lt;code&gt;em&lt;/code&gt; ) y dos n&amp;uacute;meros con la misma unidad que se multiplican juntos producir&amp;aacute;n unidades cuadradas ( &lt;code&gt;10px * 10px == 100px * px&lt;/code&gt; ). &lt;strong&gt;Tenga en cuenta&lt;/strong&gt; que &lt;code&gt;px * px&lt;/code&gt; es una unidad CSS no v&amp;aacute;lida y obtendr&amp;aacute; un error de Sass por intentar utilizar unidades inv&amp;aacute;lidas en CSS.</target>
        </trans-unit>
        <trans-unit id="4651a34e4df9619783ad372f905d6d3b84e9d76d" translate="yes" xml:space="preserve">
          <source>Scope</source>
          <target state="translated">Scope</target>
        </trans-unit>
        <trans-unit id="fdce4e45667836eb9d8dd8e9ca3ec97d8b2e1359" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;https://sass-lang.com/documentation/breaking-changes/css-vars&quot;&gt;the breaking change page&lt;/a&gt; for more details.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1d2a2a03777527a2a4ffd15581a1e95ce8b0c1bd" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;https://sass-lang.com/documentation/breaking-changes/extend-compound&quot;&gt;the breaking change page&lt;/a&gt; for more details.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bd4881bdb25c2fafab7ffd312ea4c42d08299488" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;sass/script/functions&quot;&gt;Sass::Script::Functions&lt;/a&gt; for a full listing of Sass functions and their argument names, as well as instructions on defining your own in Ruby.</source>
          <target state="translated">Consulte &lt;a href=&quot;sass/script/functions&quot;&gt;Sass :: Script :: Functions&lt;/a&gt; para obtener una lista completa de las funciones de Sass y los nombres de sus argumentos, as&amp;iacute; como instrucciones sobre c&amp;oacute;mo definir las suyas propias en Ruby.</target>
        </trans-unit>
        <trans-unit id="b3f9123bc3816ae829779a66a9e07ec9052ed653" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;sass/script/functions&quot;&gt;this page&lt;/a&gt; for a full list of available functions.</source>
          <target state="translated">Consulte &lt;a href=&quot;sass/script/functions&quot;&gt;esta p&amp;aacute;gina&lt;/a&gt; para obtener una lista completa de las funciones disponibles.</target>
        </trans-unit>
        <trans-unit id="0da0a68ff9c18e145ed1ed1a7381ab7f293f8a59" translate="yes" xml:space="preserve">
          <source>See also &lt;a href=&quot;#adjust&quot;&gt;&lt;code&gt;color.adjust()&lt;/code&gt;&lt;/a&gt;, which can adjust any property of a color.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="679cd26786cb638c2927566e24f8fc70fa1dc8fb" translate="yes" xml:space="preserve">
          <source>See also &lt;a href=&quot;#append&quot;&gt;&lt;code&gt;selector.append()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3df27adbbcfb9c31baf1c2529d72651e352386fd" translate="yes" xml:space="preserve">
          <source>See also &lt;a href=&quot;#extend&quot;&gt;&lt;code&gt;selector.extend()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3cb4f1c630458ad1e373eb58ccdd19f455e76f9c" translate="yes" xml:space="preserve">
          <source>See also &lt;a href=&quot;#global-variable-exists&quot;&gt;&lt;code&gt;meta.global-variable-exists()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e089753345cfe250442e9879e62c37578a29bb28" translate="yes" xml:space="preserve">
          <source>See also &lt;a href=&quot;#nest&quot;&gt;&lt;code&gt;selector.nest()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="43f93bf24749e90a4432789b5a135b28bdffc679" translate="yes" xml:space="preserve">
          <source>See also &lt;a href=&quot;#replace&quot;&gt;&lt;code&gt;selector.replace()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6004a2fc2bea20b2200359dfa598d09d55491c91" translate="yes" xml:space="preserve">
          <source>See also &lt;a href=&quot;#variable-exists&quot;&gt;&lt;code&gt;meta.variable-exists()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="371a87eafb4de078ff674d69a5a89c186532eb49" translate="yes" xml:space="preserve">
          <source>See also:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ef7c4e67c26ce55409670b54814f736a8e82f373" translate="yes" xml:space="preserve">
          <source>Selector Combinators</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9b1a3a5f7fb5e0d301d5ae1e7fbf8ed1b7dd7b4d" translate="yes" xml:space="preserve">
          <source>Selector Lists</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="011a99b67cb875077910ef37dc00f4c9e77d86ba" translate="yes" xml:space="preserve">
          <source>Selector Sequences</source>
          <target state="translated">Secuencias de selección</target>
        </trans-unit>
        <trans-unit id="6c23fedd19e084993aa1db6f749810cb7556b88b" translate="yes" xml:space="preserve">
          <source>Selector Values</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="39877f1ff80fe84908056627a6a3288f55e0cb06" translate="yes" xml:space="preserve">
          <source>Selector arguments to these functions may be in the same format, but they can also just be normal strings (quoted or unquoted), or a combination. For example, &lt;code&gt;&quot;.main aside:hover, .sidebar p&quot;&lt;/code&gt; is a valid selector argument.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f0c6b6a8a3a0d2a9f1359a91eb7e3caf91f383a3" translate="yes" xml:space="preserve">
          <source>Selector sequences, such as &lt;code&gt;.foo .bar&lt;/code&gt; or &lt;code&gt;.foo + .bar&lt;/code&gt;, currently can't be extended. However, it is possible for nested selectors themselves to use &lt;code&gt;@extend&lt;/code&gt;. For example:</source>
          <target state="translated">Las secuencias de selecci&amp;oacute;n, como &lt;code&gt;.foo .bar&lt;/code&gt; o &lt;code&gt;.foo + .bar&lt;/code&gt; , no se pueden extender actualmente. Sin embargo, es posible que los propios selectores anidados usen &lt;code&gt;@extend&lt;/code&gt; . Por ejemplo:</target>
        </trans-unit>
        <trans-unit id="7faab062482c099de7813c7ea8e22561e5d6c502" translate="yes" xml:space="preserve">
          <source>Selectors in style rules</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a69ae3b958e7fe99a574b24124ac812c6522e4bb" translate="yes" xml:space="preserve">
          <source>Sets one or more properties of a color to new values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d83074a15945b9150660fab7a66aca419880e86c" translate="yes" xml:space="preserve">
          <source>Sets the alpha channel of the color. The value must be a number between 0 and 1 (inclusive).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7437e748303fdad54500657645d4f95bf3ac84fa" translate="yes" xml:space="preserve">
          <source>Sets the blue channel of the color. The value must be an integer between 0 and 255 (inclusive).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cc5a7bf9585c7fd476dab4da07edc8dace4f58b8" translate="yes" xml:space="preserve">
          <source>Sets the contents of the string.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b55d5b21d0404d4e0507ed2a5caa69669328c36f" translate="yes" xml:space="preserve">
          <source>Sets the element at the given (0-based) index in the list to the given value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c31b9d3c5fafd3f68a502e5e4c266afc4f4028bb" translate="yes" xml:space="preserve">
          <source>Sets the green channel of the color. The value must be an integer between 0 and 255 (inclusive).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="21d0b7c11fbb51189adb544dcb538f4e1d782c1e" translate="yes" xml:space="preserve">
          <source>Sets the key of the key/value pair at the given (0-based) index in the map to the given value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="161391ae0530d71d60db033d508408f8310295b7" translate="yes" xml:space="preserve">
          <source>Sets the opacity of an existing color.</source>
          <target state="translated">Establece la opacidad de un color existente.</target>
        </trans-unit>
        <trans-unit id="e1e8d33426f0769fa417a2b16357eebf5a72c77a" translate="yes" xml:space="preserve">
          <source>Sets the red channel of the color. The value must be an integer between 0 and 255 (inclusive).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="26b90f3e3030a5386b9db65e2a5772ec9bc0acf0" translate="yes" xml:space="preserve">
          <source>Sets the units of the number, independent of its numeric value. Complex units are specified in the same format as for &lt;a href=&quot;#new-types-number-value-unit-39-39&quot;&gt;the constructor&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f5c27baf89870000789311c5c322d343e54cf2cd" translate="yes" xml:space="preserve">
          <source>Sets the value of the key/value pair at the given (0-based) index in the map to the given value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3aff50d684bdec6d813485557cf666de2f96600a" translate="yes" xml:space="preserve">
          <source>Sets the value of the number, independent of its units.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ba13de59430e2d1224a010aedf6f89003b2bc3eb" translate="yes" xml:space="preserve">
          <source>Sets whether the list is comma-separated.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7331278fb5718617e233df649e90ba9b72bfb49e" translate="yes" xml:space="preserve">
          <source>Shadowing</source>
          <target state="translated">Shadowing</target>
        </trans-unit>
        <trans-unit id="263c53971890113309f9896944379e4ddf6823bc" translate="yes" xml:space="preserve">
          <source>Similarly, if &lt;code&gt;.main .info&lt;/code&gt; could be extended, it would do (almost) the same thing as extending &lt;code&gt;.info&lt;/code&gt; on its own. The subtle differences aren&amp;rsquo;t worth the confusion of looking like it&amp;rsquo;s doing something substantially different, so this isn&amp;rsquo;t allowed either.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="594ff1d40a265dff076fc1b134721daddcc676ed" translate="yes" xml:space="preserve">
          <source>Since &lt;a href=&quot;#maps&quot;&gt;maps&lt;/a&gt; are treated as lists of pairs, multiple assignment works with them as well. For example:</source>
          <target state="translated">Dado que los &lt;a href=&quot;#maps&quot;&gt;mapas&lt;/a&gt; se tratan como listas de pares, la asignaci&amp;oacute;n m&amp;uacute;ltiple tambi&amp;eacute;n funciona con ellos. Por ejemplo:</target>
        </trans-unit>
        <trans-unit id="7200d8e0523e5177b5aeb63ebb9805abf7e11f71" translate="yes" xml:space="preserve">
          <source>Since maps aren&amp;rsquo;t valid CSS values, they don&amp;rsquo;t do much of anything on their own. That&amp;rsquo;s why Sass provides a bunch of &lt;a href=&quot;../modules/map&quot;&gt;functions&lt;/a&gt; to create maps and access the values they contain.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ae3ed84c656302ff446453d77e6e47fa6b24d100" translate="yes" xml:space="preserve">
          <source>Since multiline comments become part of the resulting CSS, interpolation within them is resolved. For example:</source>
          <target state="translated">Dado que los comentarios multilínea pasan a formar parte del CSS resultante,se resuelve la interpolación dentro de ellos.Por ejemplo:</target>
        </trans-unit>
        <trans-unit id="243ff2986e1cbe1a398f0a477a1de767e1fc9147" translate="yes" xml:space="preserve">
          <source>Single Equals</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="be1899ccc3c28b0b29b93f473affed2193d2d07d" translate="yes" xml:space="preserve">
          <source>Slash-Separated Values</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b0265b93f57e530525fb4bd6540dfd8865202988" translate="yes" xml:space="preserve">
          <source>Some CSS functions, like &lt;code&gt;calc()&lt;/code&gt; and &lt;code&gt;element()&lt;/code&gt; have unusual syntax. Sass &lt;a href=&quot;../syntax/special-functions&quot;&gt;parses these functions specially&lt;/a&gt; as &lt;a href=&quot;../values/strings#unquoted&quot;&gt;unquoted strings&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c8e12ba4011b926975609b7327dbec9b181996fb" translate="yes" xml:space="preserve">
          <source>Some languages consider more values falsey than just &lt;code&gt;false&lt;/code&gt; and &lt;code&gt;null&lt;/code&gt;. Sass isn&amp;rsquo;t one of those languages! Empty strings, empty lists, and the number &lt;code&gt;0&lt;/code&gt; are all truthy in Sass.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="08e4ee6af9721071a87baaed7a28bb29fafa67c5" translate="yes" xml:space="preserve">
          <source>Some mixins may require a passed content block or may have different behavior depending on whether a content block was passed. The &lt;a href=&quot;sass/script/functions#content_exists-instance_method&quot;&gt;&lt;code&gt;content-exists()&lt;/code&gt; function&lt;/a&gt; will return true when a content block is passed to the current mixin and can be used to implement such behaviors.</source>
          <target state="translated">Algunos mixins pueden requerir un bloque de contenido pasado o pueden tener un comportamiento diferente dependiendo de si se pas&amp;oacute; un bloque de contenido. El &lt;a href=&quot;sass/script/functions#content_exists-instance_method&quot;&gt; &lt;code&gt;content-exists()&lt;/code&gt; la funci&amp;oacute;n&lt;/a&gt; devolver&amp;aacute; verdadero cuando un bloque de contenidos se pasa a la mixin actual y se puede utilizar para poner en pr&amp;aacute;ctica este tipo de comportamientos.</target>
        </trans-unit>
        <trans-unit id="2fbaedc36a96d170cb5fde555c76e912ae92d5f1" translate="yes" xml:space="preserve">
          <source>Some of these CSS properties have shorthand versions that use the namespace as the property name. For these, you can write both the shorthand value &lt;em&gt;and&lt;/em&gt; the more explicit nested versions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a6a2a3f264e74ed32785ea446916a7a5ec1a6004" translate="yes" xml:space="preserve">
          <source>Someday we hope to have &lt;code&gt;@extend&lt;/code&gt; supported natively in the browser, which will allow it to be used within &lt;code&gt;@media&lt;/code&gt; and other directives.</source>
          <target state="translated">Alg&amp;uacute;n d&amp;iacute;a esperamos que &lt;code&gt;@extend&lt;/code&gt; sea compatible de forma nativa en el navegador, lo que permitir&amp;aacute; su uso dentro de &lt;code&gt;@media&lt;/code&gt; y otras directivas.</target>
        </trans-unit>
        <trans-unit id="2360319b1a3c1bfdc51f2c01b1bb2ac6b9bb4efd" translate="yes" xml:space="preserve">
          <source>Sometimes a selector sequence extends another selector that appears in another sequence. In this case, the two sequences need to be merged. For example:</source>
          <target state="translated">A veces una secuencia de selección amplía otra que aparece en otra secuencia.En este caso,las dos secuencias deben fusionarse.Por ejemplo:</target>
        </trans-unit>
        <trans-unit id="5f95e9286fc3d862bc7f1f917870ab369becd35a" translate="yes" xml:space="preserve">
          <source>Sometimes it makes sense for a mixin or function to take an unknown number of arguments. For example, a mixin for creating box shadows might take any number of shadows as arguments. For these situations, Sass supports &quot;variable arguments,&quot; which are arguments at the end of a mixin or function declaration that take all leftover arguments and package them up as a &lt;a href=&quot;#lists&quot;&gt;list&lt;/a&gt;. These arguments look just like normal arguments, but are followed by &lt;code&gt;...&lt;/code&gt;. For example:</source>
          <target state="translated">A veces tiene sentido que un mixin o una funci&amp;oacute;n tome un n&amp;uacute;mero desconocido de argumentos. Por ejemplo, un mixin para crear sombras de caja puede tomar cualquier n&amp;uacute;mero de sombras como argumentos. Para estas situaciones, Sass admite &quot;argumentos variables&quot;, que son argumentos al final de una declaraci&amp;oacute;n de funci&amp;oacute;n o mixin que toman todos los argumentos sobrantes y los empaquetan como una &lt;a href=&quot;#lists&quot;&gt;lista&lt;/a&gt; . Estos argumentos se parecen a los argumentos normales, pero son seguidos por &lt;code&gt;...&lt;/code&gt; . Por ejemplo:</target>
        </trans-unit>
        <trans-unit id="5a9047975f81c7beb3b1d0835b88132f5ea1d02d" translate="yes" xml:space="preserve">
          <source>Sometimes it&amp;rsquo;s useful for a function to be able to take any number of arguments. If the last argument in a &lt;code&gt;@function&lt;/code&gt; declaration ends in &lt;code&gt;...&lt;/code&gt;, then all extra arguments to that function are passed to that argument as a &lt;a href=&quot;../values/lists&quot;&gt;list&lt;/a&gt;. This argument is known as an &lt;a href=&quot;../values/lists#argument-lists&quot;&gt;argument list&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1235e537acae969a32efd55393d8d9d439d84bcf" translate="yes" xml:space="preserve">
          <source>Sometimes it&amp;rsquo;s useful for a mixin to be able to take any number of arguments. If the last argument in a &lt;code&gt;@mixin&lt;/code&gt; declaration ends in &lt;code&gt;...&lt;/code&gt;, then all extra arguments to that mixin are passed to that argument as a &lt;a href=&quot;../values/lists&quot;&gt;list&lt;/a&gt;. This argument is known as an &lt;a href=&quot;../values/lists#argument-lists&quot;&gt;argument list&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="638691b864cb05325bd7992b94b7474184591d49" translate="yes" xml:space="preserve">
          <source>Sometimes it&amp;rsquo;s useful to see the value of a &lt;a href=&quot;../variables&quot;&gt;variable&lt;/a&gt; or &lt;a href=&quot;../syntax/structure#expressions&quot;&gt;expression&lt;/a&gt; while you&amp;rsquo;re developing your stylesheet. That&amp;rsquo;s what the &lt;code&gt;@debug&lt;/code&gt; rule is for: it&amp;rsquo;s written &lt;code&gt;@debug &amp;lt;expression&amp;gt;&lt;/code&gt;, and it prints the value of that expression, along with the filename and line number.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="de837228c307548c576c781e6e2aace1352e73cd" translate="yes" xml:space="preserve">
          <source>Sometimes it's useful to use a nested rule's parent selector in other ways than the default. For instance, you might want to have special styles for when that selector is hovered over or for when the body element has a certain class. In these cases, you can explicitly specify where the parent selector should be inserted using the &lt;code&gt;&amp;amp;&lt;/code&gt; character. For example:</source>
          <target state="translated">A veces es &amp;uacute;til utilizar el selector principal de una regla anidada de otra forma que no sea la predeterminada. Por ejemplo, es posible que desee tener estilos especiales para cuando se coloca el cursor sobre ese selector o para cuando el elemento del cuerpo tiene una determinada clase. En estos casos, puede especificar expl&amp;iacute;citamente d&amp;oacute;nde se debe insertar el selector principal mediante el car&amp;aacute;cter &lt;code&gt;&amp;amp;&lt;/code&gt; . Por ejemplo:</target>
        </trans-unit>
        <trans-unit id="15075cef17f614335551b6872537859d19cd0f37" translate="yes" xml:space="preserve">
          <source>Sometimes you only want a property declaration to show up some of the time. If a declaration&amp;rsquo;s value is &lt;a href=&quot;../values/null&quot;&gt;&lt;code&gt;null&lt;/code&gt;&lt;/a&gt; or an empty &lt;a href=&quot;../values/strings#unquoted&quot;&gt;unquoted string&lt;/a&gt;, Sass won&amp;rsquo;t compile that declaration to CSS at all.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7253019e67572cdd9cb7df95fe8f2fec09a73e0d" translate="yes" xml:space="preserve">
          <source>Sometimes you want to write a style rule that&amp;rsquo;s &lt;em&gt;only&lt;/em&gt; intended to be extended. In that case, you can use &lt;a href=&quot;../style-rules/placeholder-selectors&quot;&gt;placeholder selectors&lt;/a&gt;, which look like class selectors that start with &lt;code&gt;%&lt;/code&gt; instead of &lt;code&gt;.&lt;/code&gt;. Any selectors that include placeholders aren&amp;rsquo;t included in the CSS output, but selectors that extend them are.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ea0845a8f1f700d1c042600138ed83f134ce0b65" translate="yes" xml:space="preserve">
          <source>Sometimes you'll write styles for a class that you only ever want to &lt;code&gt;@extend&lt;/code&gt;, and never want to use directly in your HTML. This is especially true when writing a Sass library, where you may provide styles for users to &lt;code&gt;@extend&lt;/code&gt; if they need and ignore if they don't.</source>
          <target state="translated">A veces, escribir&amp;aacute; estilos para una clase que solo desea &lt;code&gt;@extend&lt;/code&gt; er y nunca desea usar directamente en su HTML. Esto es especialmente cierto cuando se escribe una biblioteca Sass, donde puede proporcionar estilos para que los usuarios &lt;code&gt;@extend&lt;/code&gt; er si lo necesitan e ignorar si no lo hacen.</target>
        </trans-unit>
        <trans-unit id="043702c4e4501889e7730a9fb7aa95851a7a377c" translate="yes" xml:space="preserve">
          <source>Sometimes, though, you want to allow an &lt;code&gt;@extend&lt;/code&gt; not to produce any new selectors. To do so, just add the &lt;code&gt;!optional&lt;/code&gt; flag after the selector. For example:</source>
          <target state="translated">A veces, sin embargo, desea permitir que &lt;code&gt;@extend&lt;/code&gt; no produzca nuevos selectores. Para hacerlo, simplemente agregue el indicador &lt;code&gt;!optional&lt;/code&gt; Despu&amp;eacute;s del selector. Por ejemplo:</target>
        </trans-unit>
        <trans-unit id="c8fb5d37f19dc5afc9bd658c4a0cfdc8b9c40414" translate="yes" xml:space="preserve">
          <source>Sometimes, you don&amp;rsquo;t want to forward &lt;em&gt;every&lt;/em&gt; member from a module. You may want to keep some members private so that only your package can use them, or you may want to require your users to load some members a different way. You can control exactly which members get forwarded by writing &lt;code&gt;@forward &quot;&amp;lt;url&amp;gt;&quot; hide &amp;lt;members...&amp;gt;&lt;/code&gt; or &lt;code&gt;@forward &quot;&amp;lt;url&amp;gt;&quot; show &amp;lt;members...&amp;gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5774da7b802f7af9150c4273aaf57f7387c8eb1d" translate="yes" xml:space="preserve">
          <source>Source Maps</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="65399d0ea1cef2d124f5e222cb41a41015dc0477" translate="yes" xml:space="preserve">
          <source>Source maps are files that tell browsers or other tools that consume CSS how that CSS corresponds to the Sass files from which it was generated. They make it possible to see and even edit your Sass files in browsers. See instructions for using source maps in &lt;a href=&quot;https://developers.google.com/web/tools/chrome-devtools/javascript/source-maps&quot;&gt;Chrome&lt;/a&gt; and &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Tools/Style_Editor#Source_map_support&quot;&gt;Firefox&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2ca36f19363605580ce8ff8c0b8ba94b1548e941" translate="yes" xml:space="preserve">
          <source>Special Functions</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cb5cdb4d83d13dcb9044f5371c6dcdabd5610f8d" translate="yes" xml:space="preserve">
          <source>Special functions</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1d10323c27ec5f9982ad73377fd582ff949840f8" translate="yes" xml:space="preserve">
          <source>Standalone</source>
          <target state="translated">Standalone</target>
        </trans-unit>
        <trans-unit id="5653cebc057d4791ce07031ad9286e729de6d691" translate="yes" xml:space="preserve">
          <source>Statements</source>
          <target state="translated">Statements</target>
        </trans-unit>
        <trans-unit id="781a867e9de4908f79fe38c77c92d50f5d889295" translate="yes" xml:space="preserve">
          <source>Still returns true even if &lt;code&gt;$super&lt;/code&gt; matches &lt;em&gt;more&lt;/em&gt; elements than &lt;code&gt;$sub&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9af895dea7d1df874079777fbd39a8b66ee1f435" translate="yes" xml:space="preserve">
          <source>String Indexes</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="905138067416afbda69a807c2dbf96fa6f2ae8dd" translate="yes" xml:space="preserve">
          <source>String Operations</source>
          <target state="translated">Operaciones de cuerda</target>
        </trans-unit>
        <trans-unit id="27b5731f3ec14f393ba8332d57e541a658e0f241" translate="yes" xml:space="preserve">
          <source>String Operators</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="766f45c1227c8c7d13e31b3c8218c7c441dc99b1" translate="yes" xml:space="preserve">
          <source>String operations</source>
          <target state="translated">Operaciones de cuerdas</target>
        </trans-unit>
        <trans-unit id="3816c4beac471c733eed1d91c213f8c2b6a29262" translate="yes" xml:space="preserve">
          <source>Strings</source>
          <target state="translated">Strings</target>
        </trans-unit>
        <trans-unit id="b36b4bf7e1749dda82b6b7f07a772067f3f1d4c8" translate="yes" xml:space="preserve">
          <source>Strings #sass-script-strings</source>
          <target state="translated">Cuerdas #sass-script-strings</target>
        </trans-unit>
        <trans-unit id="f7cc4cbb7491950861a99a5d073ec4ccae816299" translate="yes" xml:space="preserve">
          <source>Strings are sequences of characters (specifically &lt;a href=&quot;https://en.wikipedia.org/wiki/Code_point&quot;&gt;Unicode code points&lt;/a&gt;). Sass supports two kinds of strings whose internal structure is the same but which are rendered differently: &lt;a href=&quot;#quoted&quot;&gt;quoted strings&lt;/a&gt;, like &lt;code&gt;&quot;Helvetica Neue&quot;&lt;/code&gt;, and &lt;a href=&quot;#unquoted&quot;&gt;unquoted strings&lt;/a&gt; (also known as &lt;em&gt;identifiers&lt;/em&gt;), like &lt;code&gt;bold&lt;/code&gt;. Together, these cover the different kinds of text that appear in CSS.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c8b7bcfcaa8b48cf4e7f414a5fda711253e9e86e" translate="yes" xml:space="preserve">
          <source>Structure of a Stylesheet</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="54d18fc7c92dafab4d4826d2656548e1f06e5d63" translate="yes" xml:space="preserve">
          <source>Style Rules</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6c50a97969161ac3123602bb3cb47e1e89a746ba" translate="yes" xml:space="preserve">
          <source>Style rules are the foundation of Sass, just like they are for CSS. And they work the same way: you choose which elements to style with a selector, and &lt;a href=&quot;style-rules/declarations&quot;&gt;declare properties&lt;/a&gt; that affect how those elements look.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="391aa759e0f627e3cb08a330a5127ac56b6fa86a" translate="yes" xml:space="preserve">
          <source>Subtraction, Negative Numbers, and &lt;code&gt;-&lt;/code&gt;</source>
          <target state="translated">Resta, n&amp;uacute;meros negativos y &lt;code&gt;-&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="17c7ba7676ad1ad6dd1c4e6b997adcae910262c9" translate="yes" xml:space="preserve">
          <source>Syntax</source>
          <target state="translated">Syntax</target>
        </trans-unit>
        <trans-unit id="f58a1a1b995bb6193210ff877811ca67724e98f1" translate="yes" xml:space="preserve">
          <source>Syntax Selection</source>
          <target state="translated">Selección de la sintaxis</target>
        </trans-unit>
        <trans-unit id="06bda05a8b16ee488a4324d815b666ba4c8fb984" translate="yes" xml:space="preserve">
          <source>Taking Arbitrary Arguments</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="935c2523e729956822e96e5ae256d27cdd1bee57" translate="yes" xml:space="preserve">
          <source>Taking Arbitrary Keyword Arguments</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1df350cc36b8067fbef394752946ccef525865c6" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#module&quot;&gt;module migrator&lt;/a&gt; assumes that any stylesheet that is depended on using a &lt;a href=&quot;../at-rules/use&quot;&gt;&lt;code&gt;@use&lt;/code&gt; rule&lt;/a&gt; or a &lt;a href=&quot;../at-rules/forward&quot;&gt;&lt;code&gt;@forward&lt;/code&gt; rule&lt;/a&gt; has already been migrated to the module system, so it won&amp;rsquo;t attempt to migrate them, even when the &lt;code&gt;--migrate-deps&lt;/code&gt; option is passed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a35dc086e1aba5e6f5680ea344f3541b4641a187" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#single-equals&quot;&gt;&lt;code&gt;=&lt;/code&gt; operator&lt;/a&gt;, when it&amp;rsquo;s available.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a6fb1156c24130389f0a5c30c31228891820b439" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../at-rules/at-root&quot;&gt;&lt;code&gt;@at-root&lt;/code&gt; rule&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7af532e60d3ebbaf37412d839134df1e45749782" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../at-rules/error&quot;&gt;&lt;code&gt;@error&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../at-rules/warn&quot;&gt;&lt;code&gt;@warn&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;../at-rules/debug&quot;&gt;&lt;code&gt;@debug&lt;/code&gt;&lt;/a&gt; rules.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e279da5dc12be931a6b03f93cccc63f265420ed7" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../at-rules/extend&quot;&gt;&lt;code&gt;@extend&lt;/code&gt; rule&lt;/a&gt; may only be used within style rules.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e764626fb8b6b9c1761d43c7e39c8dbac88e0256" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../at-rules/import&quot;&gt;&lt;code&gt;@import&lt;/code&gt; rule&lt;/a&gt; put all top-level members in one global scope, so when it was the standard way of loading stylesheets, everyone was incentivized to add prefixes to all their member names to avoid accidentally redefining some other stylesheet&amp;rsquo;s. The module system solves this problem, so it&amp;rsquo;s useful to automatically strip those old prefixes now that they&amp;rsquo;re unnecessary.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="07acd81e46c0a7ab120f6274a1e06d58df71e026" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../modules#if&quot;&gt;&lt;code&gt;if()&lt;/code&gt; function&lt;/a&gt; returns one value if its argument is &lt;code&gt;true&lt;/code&gt; and another if its argument is &lt;code&gt;false&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9816be82754bef9a251b615fcd56acfd706e26c9" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../syntax#the-indented-syntax&quot;&gt;indented syntax&lt;/a&gt; has a special syntax for defining and using mixins, in addition to the standard &lt;code&gt;@mixin&lt;/code&gt; and &lt;code&gt;@include&lt;/code&gt;. Mixins are defined using the character &lt;code&gt;=&lt;/code&gt;, and they&amp;rsquo;re included using &lt;code&gt;+&lt;/code&gt;. Although this syntax is terser, it&amp;rsquo;s also harder to understand at a glance and users are encouraged to avoid it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="546e68a86c3bae99e2cda1604fb5f3b73ff303c9" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../values/booleans&quot;&gt;boolean&lt;/a&gt; literals &lt;code&gt;true&lt;/code&gt; or &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="43966c7793685352c760e920ff46480362a4ce1d" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/@keyframes&quot;&gt;&lt;code&gt;@keyframes&lt;/code&gt; rule&lt;/a&gt; works just like a general at-rule, except that its child rules must be valid keyframe rules (&lt;code&gt;&amp;lt;number&amp;gt;%&lt;/code&gt;, &lt;code&gt;from&lt;/code&gt;, or &lt;code&gt;to&lt;/code&gt;) rather than normal selectors.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c3c7db39bce25a15f11f3de9502b2243b480cd04" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/@supports&quot;&gt;&lt;code&gt;@supports&lt;/code&gt; rule&lt;/a&gt; also allows &lt;a href=&quot;../syntax/structure#expressions&quot;&gt;SassScript expressions&lt;/a&gt; to be used in the declaration queries.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4d9a8ca1113531c6caee68650fcde23a31203429" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/Media_Queries/Using_media_queries&quot;&gt;&lt;code&gt;@media&lt;/code&gt; rule&lt;/a&gt; does all of the above and more. In addition to allowing interpolation, it allows &lt;a href=&quot;../syntax/structure#expressions&quot;&gt;SassScript expressions&lt;/a&gt; to be used directly in the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/Media_Queries/Using_media_queries#Targeting_media_features&quot;&gt;feature queries&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="32b754ca442416d6b24fdf2b658f5e4777f3dafb" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/calc&quot;&gt;&lt;code&gt;calc()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/element&quot;&gt;&lt;code&gt;element()&lt;/code&gt;&lt;/a&gt; functions are defined in the CSS spec. Because &lt;code&gt;calc()&lt;/code&gt;&amp;rsquo;s mathematical expressions conflict with Sass&amp;rsquo;s arithmetic, and &lt;code&gt;element()&lt;/code&gt;&amp;rsquo;s IDs could be parsed as colors, they need special parsing.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b3644104902986cb6220a6dbc81e265a8112f51c" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/url&quot;&gt;&lt;code&gt;url()&lt;/code&gt; function&lt;/a&gt; is commonly used in CSS, but its syntax is different than other functions: it can take either a quoted &lt;em&gt;or&lt;/em&gt; unquoted URL. Because an unquoted URL isn&amp;rsquo;t a valid SassScript expression, Sass needs special logic to parse it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="504c598702deb5ae9c07c5b795fd6eea9ac69750" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://en.wikipedia.org/wiki/Exit_status&quot;&gt;exit status&lt;/a&gt; that should be used if this error causes the enclosing program to exit.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="90a7c84d55aa25b6f5ccfeaf9b8e39ab88891aa5" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;modules/color&quot;&gt;&lt;code&gt;sass:color&lt;/code&gt; module&lt;/a&gt; generates new &lt;a href=&quot;values/colors&quot;&gt;colors&lt;/a&gt; based on existing ones, making it easy to build color themes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="86c32d20d922c8144b235390be507cfe7a7bcfdc" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;modules/list&quot;&gt;&lt;code&gt;sass:list&lt;/code&gt; module&lt;/a&gt; lets you access and modify values in &lt;a href=&quot;values/lists&quot;&gt;lists&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0a3348385f1cc4573040876c2576083f07e6df79" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;modules/map&quot;&gt;&lt;code&gt;sass:map&lt;/code&gt; module&lt;/a&gt; makes it possible to look up the value associated with a key in a &lt;a href=&quot;values/maps&quot;&gt;map&lt;/a&gt;, and much more.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cb8865eb3b8e8ce060456ad6e1ba1c735fc530d3" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;modules/math&quot;&gt;&lt;code&gt;sass:math&lt;/code&gt; module&lt;/a&gt; provides functions that operate on &lt;a href=&quot;values/numbers&quot;&gt;numbers&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="90c727a3c07ed26c23654ef3b56ebfba2c2d06c1" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;modules/meta&quot;&gt;&lt;code&gt;sass:meta&lt;/code&gt; module&lt;/a&gt; exposes the details of Sass&amp;rsquo;s inner workings.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="110e0cd56b20ddb998588a804d44d1ea832def3f" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;modules/selector&quot;&gt;&lt;code&gt;sass:selector&lt;/code&gt; module&lt;/a&gt; provides access to Sass&amp;rsquo;s powerful selector engine.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="54dfcea8115cb33be27886c112e9c90f72682507" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;modules/string&quot;&gt;&lt;code&gt;sass:string&lt;/code&gt; module&lt;/a&gt; makes it easy to combine, search, or split apart &lt;a href=&quot;values/strings&quot;&gt;strings&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="89e281de7fe71f9d7e978e0dcc7f0c975ef7cc4f" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;operators/boolean&quot;&gt;&lt;code&gt;and&lt;/code&gt; operator&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ea7bd2e4f24204137c741038b95fe2e8c73c0b40" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;operators/boolean&quot;&gt;&lt;code&gt;or&lt;/code&gt; operator&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2c5b6172d556d839b7898b61eaa922d25bd4d4cf" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;operators/equality&quot;&gt;&lt;code&gt;==&lt;/code&gt; and &lt;code&gt;!=&lt;/code&gt; operators&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6ae555915d9d54310df43b693be8ea1864d4d676" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;operators/numeric&quot;&gt;&lt;code&gt;*&lt;/code&gt;, &lt;code&gt;/&lt;/code&gt;, and &lt;code&gt;%&lt;/code&gt; operators&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="59563c809c27268f326e609b737862755c99a72f" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;operators/numeric&quot;&gt;&lt;code&gt;+&lt;/code&gt; and &lt;code&gt;-&lt;/code&gt; operators&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="618c79b16e0882a5777cca82b8bf498f8d9fe33e" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;operators/relational&quot;&gt;&lt;code&gt;&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;gt;=&lt;/code&gt;, &lt;code&gt;&amp;lt;&lt;/code&gt; and &lt;code&gt;&amp;lt;=&lt;/code&gt; operators&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9fa9ba7d7d8e02a7b1a43b44f6f7cc825694f46c" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;values/booleans&quot;&gt;boolean&lt;/a&gt; values &lt;code&gt;true&lt;/code&gt; and &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d27406385a4e5687c92af81ead0967b4f6262d2c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;!global&lt;/code&gt; flag may only be used to set a variable that has already been declared at the top level of a file. It &lt;em&gt;may not&lt;/em&gt; be used to declare a new variable.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3f97e42d9d5b69a774e97737b80e7f4c2688e12c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;!optional&lt;/code&gt; Flag</source>
          <target state="translated">La &lt;code&gt;!optional&lt;/code&gt; Bandera opcional</target>
        </trans-unit>
        <trans-unit id="c03f67f369a61677f5c02cee6e2182a58640cf23" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;$amount&lt;/code&gt; must be a number between &lt;code&gt;0%&lt;/code&gt; and &lt;code&gt;100%&lt;/code&gt; (inclusive). Decreases the HSL lightness of &lt;code&gt;$color&lt;/code&gt; by that amount.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b120dd6580b4c5c0e4798be85af712083941d6b7" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;$amount&lt;/code&gt; must be a number between &lt;code&gt;0%&lt;/code&gt; and &lt;code&gt;100%&lt;/code&gt; (inclusive). Decreases the HSL saturation of &lt;code&gt;$color&lt;/code&gt; by that amount.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4783522ab9ae33f630fd170459e21adcb50e4681" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;$amount&lt;/code&gt; must be a number between &lt;code&gt;0%&lt;/code&gt; and &lt;code&gt;100%&lt;/code&gt; (inclusive). Increases the HSL lightness of &lt;code&gt;$color&lt;/code&gt; by that amount.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bd3b5d2ada6b2cb60ba3837b90e51002801935ba" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;$amount&lt;/code&gt; must be a number between &lt;code&gt;0%&lt;/code&gt; and &lt;code&gt;100%&lt;/code&gt; (inclusive). Increases the HSL saturation of &lt;code&gt;$color&lt;/code&gt; by that amount.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="96994319d0eea47efaf2c2a413bfc6b197f92c8d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;$amount&lt;/code&gt; must be a number between &lt;code&gt;0&lt;/code&gt; and &lt;code&gt;1&lt;/code&gt; (inclusive). Decreases the alpha channel of &lt;code&gt;$color&lt;/code&gt; by that amount.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7a720d48c684b3afc6f3e93caf13808a416c260f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;$amount&lt;/code&gt; must be a number between &lt;code&gt;0&lt;/code&gt; and &lt;code&gt;1&lt;/code&gt; (inclusive). Increases the alpha channel of &lt;code&gt;$color&lt;/code&gt; by that amount.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ba4101ab4f45dcc288c144bb1dfb9e8553917722" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;$feature&lt;/code&gt; must be a string. The currently recognized features are:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ac782584e5608fef03b3c8ec321127fef4a8c4f9" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;$function&lt;/code&gt; should be a &lt;a href=&quot;../values/functions&quot;&gt;function&lt;/a&gt; returned by &lt;a href=&quot;#get-function&quot;&gt;&lt;code&gt;meta.get-function()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7211fa6409e40acd2c882d6480c1c5b61f6af84b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;$hue&lt;/code&gt; must be a number between &lt;code&gt;-360deg&lt;/code&gt; and &lt;code&gt;360deg&lt;/code&gt; (inclusive) to add to &lt;code&gt;$color&lt;/code&gt;&amp;rsquo;s hue. It may be &lt;a href=&quot;../values/numbers#units&quot;&gt;unitless&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4b40d85f830bf5953f725bc895e473ddd4a7dc3e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;$module&lt;/code&gt; parameter must be a string matching the namespace of a &lt;a href=&quot;../at-rules/use&quot;&gt;&lt;code&gt;@use&lt;/code&gt; rule&lt;/a&gt; in the current file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9dc3b8b704898c3d531f3c842fb6eedd2bfc28bb" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;$selector&lt;/code&gt; must be a single string that contains a compound selector. This means it may not contains combinators (including spaces) or commas.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7658cf7eadbd403e669ddf2edbac3c571d5fef04" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;$selector&lt;/code&gt;, &lt;code&gt;$extendee&lt;/code&gt;, and &lt;code&gt;$extender&lt;/code&gt; selectors may contain &lt;a href=&quot;../style-rules/placeholder-selectors&quot;&gt;placeholder selectors&lt;/a&gt;, but not &lt;a href=&quot;../style-rules/parent-selector&quot;&gt;parent selectors&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8718d6667f1564575e7b546a27af7454cbde19ce" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;$selector&lt;/code&gt;, &lt;code&gt;$original&lt;/code&gt;, and &lt;code&gt;$replacement&lt;/code&gt; selectors may contain &lt;a href=&quot;../style-rules/placeholder-selectors&quot;&gt;placeholder selectors&lt;/a&gt;, but not &lt;a href=&quot;../style-rules/parent-selector&quot;&gt;parent selectors&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="75c3eb689436931e9df15f8b6398ac7260b7905b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;$selectors&lt;/code&gt; may contain &lt;a href=&quot;../style-rules/placeholder-selectors&quot;&gt;placeholder selectors&lt;/a&gt;, but not &lt;a href=&quot;../style-rules/parent-selector&quot;&gt;parent selectors&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="99c3b1aeb37bcaae820907bf62915cfbd3f2307f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;$selectors&lt;/code&gt; may contain &lt;a href=&quot;../style-rules/placeholder-selectors&quot;&gt;placeholder selectors&lt;/a&gt;. Unlike other selector functions, all of them except the first may also contain &lt;a href=&quot;../style-rules/parent-selector&quot;&gt;parent selectors&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f27e43e203c7e00de5997156048f34462d3a1542" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;$super&lt;/code&gt; and &lt;code&gt;$sub&lt;/code&gt; selectors may contain &lt;a href=&quot;../style-rules/placeholder-selectors&quot;&gt;placeholder selectors&lt;/a&gt;, but not &lt;a href=&quot;../style-rules/parent-selector&quot;&gt;parent selectors&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cd3aff068e048b533a1aaff4551bf95e22adb6e5" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;$url&lt;/code&gt; parameter should be a string containing a URL like you&amp;rsquo;d pass to the &lt;code&gt;@use&lt;/code&gt; rule. It shouldn&amp;rsquo;t be a CSS&lt;code&gt;url()&lt;/code&gt;!</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b770a67f5aa20b7b21c52621dfdd1dd135413c4d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;$weight&lt;/code&gt; must be a number between &lt;code&gt;0%&lt;/code&gt; and &lt;code&gt;100%&lt;/code&gt; (inclusive). A higher weight means the result will be closer to the negative, and a lower weight means it will be closer to &lt;code&gt;$color&lt;/code&gt;. Weight &lt;code&gt;50%&lt;/code&gt; will always produce &lt;code&gt;#808080&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8d311629ed69e85e7c92883aa048934bd395d0f9" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;+&lt;/code&gt; operation can be used to concatenate strings:</source>
          <target state="translated">La operaci&amp;oacute;n &lt;code&gt;+&lt;/code&gt; se puede usar para concatenar cadenas:</target>
        </trans-unit>
        <trans-unit id="021246515a78b57d10e8e4773809aa7f4e269719" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;--force&lt;/code&gt; flag may not be passed alongside the &lt;a href=&quot;#watch&quot;&gt;&lt;code&gt;--watch&lt;/code&gt; flag&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="381872e396a2d6ecaafd47dffb57cd1bfbac87be" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;--indented&lt;/code&gt; flag is mostly useful when the input file is coming from &lt;a href=&quot;https://en.wikipedia.org/wiki/Standard_streams#Standard_input_(stdin)&quot;&gt;standard input&lt;/a&gt;, so its syntax can&amp;rsquo;t be automatically determined.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6c6dc667716faa84c747765a410c6ba35f078cbd" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;--stdin&lt;/code&gt; flag may not be used with &lt;a href=&quot;#many-to-many-mode&quot;&gt;many-to-many mode&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1c26608f553246175e669b6188f4f161a429a8ae" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;@at-root&lt;/code&gt; directive causes one or more rules to be emitted at the root of the document, rather than being nested beneath their parent selectors. It can either be used with a single inline selector:</source>
          <target state="translated">La directiva &lt;code&gt;@at-root&lt;/code&gt; hace que una o m&amp;aacute;s reglas se emitan en la ra&amp;iacute;z del documento, en lugar de anidarse debajo de sus selectores principales. Puede usarse con un solo selector en l&amp;iacute;nea:</target>
        </trans-unit>
        <trans-unit id="f04f5bafe73a7ff06650944de798f295db701f68" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;@at-root&lt;/code&gt; rule can also be written &lt;code&gt;@at-root { ... }&lt;/code&gt; to put multiple style rules at the root of the document. In fact, &lt;code&gt;@at-root &amp;lt;selector&amp;gt; { ... }&lt;/code&gt; is just a shorthand for &lt;code&gt;@at-root { &amp;lt;selector&amp;gt; { ... } }&lt;/code&gt;!</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d10060bbe79ec42d8b08aac9649783f8377b2880" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;@at-root&lt;/code&gt; rule is necessary here because Sass doesn&amp;rsquo;t know what interpolation was used to generate a selector when it&amp;rsquo;s performing selector nesting. This means it will automatically add the outer selector to the inner selector &lt;em&gt;even if&lt;/em&gt; you used &lt;code&gt;&amp;amp;&lt;/code&gt; as a SassScript expression. The &lt;code&gt;@at-root&lt;/code&gt; explicitly tells Sass not to include the outer selector.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ce63364621e44c979ffebfe98601536e79b7cbb4" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;@at-root&lt;/code&gt; rule is usually written &lt;code&gt;@at-root &amp;lt;selector&amp;gt; { ... }&lt;/code&gt; and causes everything within it to be emitted at the root of the document instead of using the normal nesting. It's most often used when doing &lt;a href=&quot;../style-rules/parent-selector#advanced-nesting&quot;&gt;advanced nesting&lt;/a&gt; with the &lt;a href=&quot;../style-rules/parent-selector#in-sassscript&quot;&gt;SassScript parent selector&lt;/a&gt; and &lt;a href=&quot;../modules/selector&quot;&gt;selector functions&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ac97b233f713059167f62c0586b91e0e4ff02b52" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;@debug&lt;/code&gt; directive prints the value of a SassScript expression to the standard error output stream. It's useful for debugging Sass files that have complicated SassScript going on. For example:</source>
          <target state="translated">La directiva &lt;code&gt;@debug&lt;/code&gt; imprime el valor de una expresi&amp;oacute;n de SassScript en el flujo de salida de error est&amp;aacute;ndar. Es &amp;uacute;til para depurar archivos Sass que han complicado el proceso de SassScript. Por ejemplo:</target>
        </trans-unit>
        <trans-unit id="6a8de215b1d2afff58e3e0991266e337bff2243e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;@each&lt;/code&gt; directive can also use multiple variables, as in &lt;code&gt;@each $var1, $var2, ... in &amp;lt;list&amp;gt;&lt;/code&gt;. If &lt;code&gt;&amp;lt;list&amp;gt;&lt;/code&gt; is a list of lists, each element of the sub-lists is assigned to the respective variable. For example:</source>
          <target state="translated">La directiva &lt;code&gt;@each&lt;/code&gt; tambi&amp;eacute;n puede usar m&amp;uacute;ltiples variables, como en &lt;code&gt;@each $var1, $var2, ... in &amp;lt;list&amp;gt;&lt;/code&gt; . Si &lt;code&gt;&amp;lt;list&amp;gt;&lt;/code&gt; es una lista de listas, cada elemento de las sublistas se asigna a la variable respectiva. Por ejemplo:</target>
        </trans-unit>
        <trans-unit id="77189bcd5e4b0bc4e721a8a2a8712e0b92a9d123" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;@each&lt;/code&gt; directive usually has the form &lt;code&gt;@each $var in &amp;lt;list or map&amp;gt;&lt;/code&gt;. &lt;code&gt;$var&lt;/code&gt; can be any variable name, like &lt;code&gt;$length&lt;/code&gt; or &lt;code&gt;$name&lt;/code&gt;, and &lt;code&gt;&amp;lt;list or map&amp;gt;&lt;/code&gt; is a SassScript expression that returns a list or a map.</source>
          <target state="translated">La directiva &lt;code&gt;@each&lt;/code&gt; generalmente tiene la forma &lt;code&gt;@each $var in &amp;lt;list or map&amp;gt;&lt;/code&gt; . &lt;code&gt;$var&lt;/code&gt; puede ser cualquier nombre de variable, como &lt;code&gt;$length&lt;/code&gt; o &lt;code&gt;$name&lt;/code&gt; , y &lt;code&gt;&amp;lt;list or map&amp;gt;&lt;/code&gt; es una expresi&amp;oacute;n de SassScript que devuelve una lista o un mapa.</target>
        </trans-unit>
        <trans-unit id="0225182baa7696b2fea683be8aa23850c2e7b5b2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;@each&lt;/code&gt; rule makes it easy to emit styles or evaluate code for each element of a &lt;a href=&quot;../../values/lists&quot;&gt;list&lt;/a&gt; or each pair in a &lt;a href=&quot;../../values/maps&quot;&gt;map&lt;/a&gt;. It&amp;rsquo;s great for repetitive styles that only have a few variations between them. It&amp;rsquo;s usually written &lt;code&gt;@each &amp;lt;variable&amp;gt; in &amp;lt;expression&amp;gt; { ... }&lt;/code&gt;, where the &lt;a href=&quot;../../syntax/structure#expressions&quot;&gt;expression&lt;/a&gt; returns a list. The block is evaluated for each element of the list in turn, which is assigned to the given variable name.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a5d3e0da53895d6c2ca9b6d7ddf835e8c137ddc4" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;@each&lt;/code&gt; rule sets &lt;code&gt;$var&lt;/code&gt; to each item in the list or map, then outputs the styles it contains using that value of &lt;code&gt;$var&lt;/code&gt;. For example:</source>
          <target state="translated">La regla &lt;code&gt;@each&lt;/code&gt; establece &lt;code&gt;$var&lt;/code&gt; para cada elemento en la lista o mapa, luego genera los estilos que contiene usando ese valor de &lt;code&gt;$var&lt;/code&gt; . Por ejemplo:</target>
        </trans-unit>
        <trans-unit id="b8e8db811f079dead4aec85b222dc1cd538b7717" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;@error&lt;/code&gt; directive throws the value of a SassScript expression as a fatal error, including a nice stack trace. It's useful for validating arguments to mixins and functions. For example:</source>
          <target state="translated">La directiva &lt;code&gt;@error&lt;/code&gt; arroja el valor de una expresi&amp;oacute;n de SassScript como un error fatal, incluido un buen seguimiento de pila. Es &amp;uacute;til para validar argumentos para mixins y funciones. Por ejemplo:</target>
        </trans-unit>
        <trans-unit id="53f2c089e6de93b3ee7b8e635ec337c2a031aa8f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;@extend&lt;/code&gt; directive avoids these problems by telling Sass that one selector should inherit the styles of another selector. For example:</source>
          <target state="translated">La directiva &lt;code&gt;@extend&lt;/code&gt; evita estos problemas dici&amp;eacute;ndole a Sass que un selector debe heredar los estilos de otro selector. Por ejemplo:</target>
        </trans-unit>
        <trans-unit id="dd24d6037176ab3406afa46dabd5e8fd0a66b44a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;@for&lt;/code&gt; directive repeatedly outputs a set of styles. For each repetition, a counter variable is used to adjust the output. The directive has two forms: &lt;code&gt;@for $var from &amp;lt;start&amp;gt; through &amp;lt;end&amp;gt;&lt;/code&gt; and &lt;code&gt;@for $var from &amp;lt;start&amp;gt; to &amp;lt;end&amp;gt;&lt;/code&gt;. Note the difference in the keywords &lt;code&gt;through&lt;/code&gt; and &lt;code&gt;to&lt;/code&gt;. &lt;code&gt;$var&lt;/code&gt; can be any variable name, like &lt;code&gt;$i&lt;/code&gt;; &lt;code&gt;&amp;lt;start&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;end&amp;gt;&lt;/code&gt; are SassScript expressions that should return integers. When &lt;code&gt;&amp;lt;start&amp;gt;&lt;/code&gt; is greater than &lt;code&gt;&amp;lt;end&amp;gt;&lt;/code&gt; the counter will decrement instead of increment.</source>
          <target state="translated">La directiva &lt;code&gt;@for&lt;/code&gt; genera repetidamente un conjunto de estilos. Para cada repetici&amp;oacute;n, se utiliza una variable de contador para ajustar la salida. La directiva tiene dos formas: &lt;code&gt;@for $var from &amp;lt;start&amp;gt; through &amp;lt;end&amp;gt;&lt;/code&gt; y &lt;code&gt;@for $var from &amp;lt;start&amp;gt; to &amp;lt;end&amp;gt;&lt;/code&gt; . Tenga en cuenta la diferencia en las palabras clave &lt;code&gt;through&lt;/code&gt; y &lt;code&gt;to&lt;/code&gt; . &lt;code&gt;$var&lt;/code&gt; puede ser cualquier nombre de variable, como &lt;code&gt;$i&lt;/code&gt; ; &lt;code&gt;&amp;lt;start&amp;gt;&lt;/code&gt; y &lt;code&gt;&amp;lt;end&amp;gt;&lt;/code&gt; son expresiones de SassScript que deben devolver enteros. Cuando &lt;code&gt;&amp;lt;start&amp;gt;&lt;/code&gt; es mayor que &lt;code&gt;&amp;lt;end&amp;gt;&lt;/code&gt; , el contador disminuir&amp;aacute; en lugar de incrementarse.</target>
        </trans-unit>
        <trans-unit id="d5d494b6f3937f7b3c60dc32eb0f3aaa113c3dc4" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;@for&lt;/code&gt; rule, written &lt;code&gt;@for &amp;lt;variable&amp;gt; from &amp;lt;expression&amp;gt; to &amp;lt;expression&amp;gt; { ... }&lt;/code&gt; or &lt;code&gt;@for &amp;lt;variable&amp;gt; from &amp;lt;expression&amp;gt; through &amp;lt;expression&amp;gt; { ... }&lt;/code&gt;, counts up or down from one number (the result of the first &lt;a href=&quot;../../syntax/structure#expressions&quot;&gt;expression&lt;/a&gt;) to another (the result of the second) and evaluates a block for each number in between. Each number along the way is assigned to the given variable name. If &lt;code&gt;to&lt;/code&gt; is used, the final number is excluded; if &lt;code&gt;through&lt;/code&gt; is used, it's included.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6a6cc80ba19e8e34770568d4790b64ef08713b73" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;@for&lt;/code&gt; statement sets &lt;code&gt;$var&lt;/code&gt; to each successive number in the specified range and each time outputs the nested styles using that value of &lt;code&gt;$var&lt;/code&gt;. For the form &lt;code&gt;from ... through&lt;/code&gt;, the range &lt;em&gt;includes&lt;/em&gt; the values of &lt;code&gt;&amp;lt;start&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;end&amp;gt;&lt;/code&gt;, but the form &lt;code&gt;from ... to&lt;/code&gt; runs up to &lt;em&gt;but not including&lt;/em&gt; the value of &lt;code&gt;&amp;lt;end&amp;gt;&lt;/code&gt;. Using the &lt;code&gt;through&lt;/code&gt; syntax,</source>
          <target state="translated">La instrucci&amp;oacute;n &lt;code&gt;@for&lt;/code&gt; establece &lt;code&gt;$var&lt;/code&gt; en cada n&amp;uacute;mero sucesivo en el rango especificado y cada vez genera los estilos anidados usando ese valor de &lt;code&gt;$var&lt;/code&gt; . Para el formulario &lt;code&gt;from ... through&lt;/code&gt; , el rango &lt;em&gt;incluye&lt;/em&gt; los valores de &lt;code&gt;&amp;lt;start&amp;gt;&lt;/code&gt; y &lt;code&gt;&amp;lt;end&amp;gt;&lt;/code&gt; , pero el formulario &lt;code&gt;from ... to&lt;/code&gt; ejecuta hasta &lt;em&gt;pero sin incluir&lt;/em&gt; el valor de &lt;code&gt;&amp;lt;end&amp;gt;&lt;/code&gt; . Usando la sintaxis &lt;code&gt;through&lt;/code&gt; ,</target>
        </trans-unit>
        <trans-unit id="d73c45d52c35f506c461be84582c5b2c7b61e21e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;@forward&lt;/code&gt; rule acts just like &lt;code&gt;@use&lt;/code&gt; when it comes to a module&amp;rsquo;s CSS. Styles from a forwarded module will be included in the compiled CSS output, and the module with the &lt;code&gt;@forward&lt;/code&gt; can &lt;a href=&quot;extend&quot;&gt;extend&lt;/a&gt; it, even if it isn&amp;rsquo;t also &lt;code&gt;@use&lt;/code&gt;d.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9eba786d5218457f5f5148db81062de63448cdf7" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;@forward&lt;/code&gt; rule can also load a module with &lt;a href=&quot;use#configuration&quot;&gt;configuration&lt;/a&gt;. This mostly works the same as it does for &lt;code&gt;@use&lt;/code&gt;, with one addition: a &lt;code&gt;@forward&lt;/code&gt; rule&amp;rsquo;s configuration can use the &lt;code&gt;!default&lt;/code&gt; flag in its configuration. This allows a module to change the defaults of an upstream stylesheet while still allowing downstream stylesheets to override them.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8a48f18648f8f823009940af90f7a3398299a276" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;@forward&lt;/code&gt; rule loads a Sass stylesheet and makes its &lt;a href=&quot;mixin&quot;&gt;mixins&lt;/a&gt;, &lt;a href=&quot;function&quot;&gt;functions&lt;/a&gt;, and &lt;a href=&quot;../variables&quot;&gt;variables&lt;/a&gt; available when your stylesheet is loaded with the &lt;a href=&quot;use&quot;&gt;&lt;code&gt;@use&lt;/code&gt; rule&lt;/a&gt;. It makes it possible to organize Sass libraries across many files, while allowing their users to load a single entrypoint file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="edae6f073c38434d3e207e7a5dafb837955a0007" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;@if&lt;/code&gt; directive takes a SassScript expression and uses the styles nested beneath it if the expression returns anything other than &lt;code&gt;false&lt;/code&gt; or &lt;code&gt;null&lt;/code&gt;:</source>
          <target state="translated">La directiva &lt;code&gt;@if&lt;/code&gt; toma una expresi&amp;oacute;n de SassScript y usa los estilos anidados debajo de ella si la expresi&amp;oacute;n devuelve algo que no sea &lt;code&gt;false&lt;/code&gt; o &lt;code&gt;null&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="97751d4897d5c8ad3677b64fd0bdc183e62db874" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;@if&lt;/code&gt; rule is written &lt;code&gt;@if &amp;lt;expression&amp;gt; { ... }&lt;/code&gt;, and it controls whether or not its block gets evaluated (including emitting any styles as CSS). The &lt;a href=&quot;../../syntax/structure#expressions&quot;&gt;expression&lt;/a&gt; usually returns either &lt;a href=&quot;../../values/booleans&quot;&gt;&lt;code&gt;true&lt;/code&gt; or &lt;code&gt;false&lt;/code&gt;&lt;/a&gt;&amp;mdash;if the expression returns &lt;code&gt;true&lt;/code&gt;, the block is evaluated, and if the expression returns &lt;code&gt;false&lt;/code&gt; it&amp;rsquo;s not.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7b1bac589cac69a197e403f499df3a9993010d02" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;@if&lt;/code&gt; statement can be followed by several &lt;code&gt;@else if&lt;/code&gt; statements and one &lt;code&gt;@else&lt;/code&gt; statement. If the &lt;code&gt;@if&lt;/code&gt; statement fails, the &lt;code&gt;@else if&lt;/code&gt; statements are tried in order until one succeeds or the &lt;code&gt;@else&lt;/code&gt; is reached. For example:</source>
          <target state="translated">La instrucci&amp;oacute;n &lt;code&gt;@if&lt;/code&gt; puede ir seguida de varias declaraciones &lt;code&gt;@else if&lt;/code&gt; y una instrucci&amp;oacute;n &lt;code&gt;@else&lt;/code&gt; . Si la instrucci&amp;oacute;n &lt;code&gt;@if&lt;/code&gt; falla, las declaraciones &lt;code&gt;@else if&lt;/code&gt; se prueban en orden hasta que una tiene &amp;eacute;xito o se alcanza la &lt;code&gt;@else&lt;/code&gt; . Por ejemplo:</target>
        </trans-unit>
        <trans-unit id="87ed2b45b30496b3ac781e14bbec2d833422c474" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;@import&lt;/code&gt; rule has a number of serious issues:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6f889f3526a88c98f27cf8326bcc19306272b7ac" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;@return&lt;/code&gt; at-rule indicates the value to use as the result of calling a function. It&amp;rsquo;s only allowed within a &lt;code&gt;@function&lt;/code&gt; body, and each &lt;code&gt;@function&lt;/code&gt; must end with a &lt;code&gt;@return&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8103b04685af8b03bffdc2e4a7d93a3cd56d4a2a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;@use&lt;/code&gt; or &lt;code&gt;@import&lt;/code&gt; rule&amp;rsquo;s URL as a string, exactly as it appears in the stylesheet.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="53379d29c03ea52485bc34dcc7e79b10efe878cd" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;@use&lt;/code&gt; rule loads &lt;a href=&quot;mixin&quot;&gt;mixins&lt;/a&gt;, &lt;a href=&quot;function&quot;&gt;functions&lt;/a&gt;, and &lt;a href=&quot;../variables&quot;&gt;variables&lt;/a&gt; from other Sass stylesheets, and combines CSS from multiple stylesheets together. Stylesheets loaded by &lt;code&gt;@use&lt;/code&gt; are called &quot;modules&quot;. Sass also provides &lt;a href=&quot;../modules&quot;&gt;built-in modules&lt;/a&gt; full of useful functions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cb66e645f955007af31d85000b8a746fec7c41a1" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;@warn&lt;/code&gt; directive prints the value of a SassScript expression to the standard error output stream. It's useful for libraries that need to warn users of deprecations or recovering from minor mixin usage mistakes. There are two major distinctions between &lt;code&gt;@warn&lt;/code&gt; and &lt;code&gt;@debug&lt;/code&gt;:</source>
          <target state="translated">La directiva &lt;code&gt;@warn&lt;/code&gt; imprime el valor de una expresi&amp;oacute;n de SassScript en el flujo de salida de error est&amp;aacute;ndar. Es &amp;uacute;til para bibliotecas que necesitan advertir a los usuarios sobre obsolescencias o recuperarse de errores menores de uso de mixin. Hay dos distinciones principales entre &lt;code&gt;@warn&lt;/code&gt; y &lt;code&gt;@debug&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="842f0db216c7751e5b0d64bb0ced32af40468fb0" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;@warn&lt;/code&gt; rule is designed just for that. It&amp;rsquo;s written &lt;code&gt;@warn &amp;lt;expression&amp;gt;&lt;/code&gt; and it prints the value of the &lt;a href=&quot;../syntax/structure#expressions&quot;&gt;expression&lt;/a&gt; (usually a string) for the user, along with a stack trace indicating how the current mixin or function was called. Unlike the &lt;a href=&quot;error&quot;&gt;&lt;code&gt;@error&lt;/code&gt; rule&lt;/a&gt;, though, it doesn&amp;rsquo;t stop Sass entirely.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="036d9853511ea7f8a9eed6ee63043a942bfb4426" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;@while&lt;/code&gt; directive takes a SassScript expression and repeatedly outputs the nested styles until the statement evaluates to &lt;code&gt;false&lt;/code&gt;. This can be used to achieve more complex looping than the &lt;code&gt;@for&lt;/code&gt; statement is capable of, although this is rarely necessary. For example:</source>
          <target state="translated">La directiva &lt;code&gt;@while&lt;/code&gt; toma una expresi&amp;oacute;n de SassScript y genera repetidamente los estilos anidados hasta que la declaraci&amp;oacute;n se eval&amp;uacute;a como &lt;code&gt;false&lt;/code&gt; . Esto se puede usar para lograr un bucle m&amp;aacute;s complejo de lo que es capaz de &lt;code&gt;@for&lt;/code&gt; instrucci&amp;oacute;n @for , aunque esto rara vez es necesario. Por ejemplo:</target>
        </trans-unit>
        <trans-unit id="b1eed5d1b65fbddfb1ff1766c10939e5ff18aba3" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;@while&lt;/code&gt; rule, written &lt;code&gt;@while &amp;lt;expression&amp;gt; { ... }&lt;/code&gt;, evaluates its block if its &lt;a href=&quot;../../syntax/structure#expressions&quot;&gt;expression&lt;/a&gt; returns &lt;code&gt;true&lt;/code&gt;. Then, if its expression still returns &lt;code&gt;true&lt;/code&gt;, it evaluates its block again. This continues until the expression finally returns &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6df43083b5d905e4f6e4599386fbd9b21782a3aa" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;darken()&lt;/code&gt; function decreases lightness by a fixed amount, which is often not the desired effect. To make a color a certain percentage darker than it was before, use &lt;a href=&quot;#scale&quot;&gt;&lt;code&gt;color.scale()&lt;/code&gt;&lt;/a&gt; instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f15eab2ee580d26be0dc39d5d78797282d2640b9" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;desaturate()&lt;/code&gt; function decreases saturation by a fixed amount, which is often not the desired effect. To make a color a certain percentage less saturated than it was before, use &lt;a href=&quot;#scale&quot;&gt;&lt;code&gt;color.scale()&lt;/code&gt;&lt;/a&gt; instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3865c4ef8bb9e296ed155f02c937738292eba0d4" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;hide&lt;/code&gt; form means that the listed members shouldn&amp;rsquo;t be forwarded, but everything else should. The &lt;code&gt;show&lt;/code&gt; form means that &lt;em&gt;only&lt;/em&gt; the named members should be forwarded. In both forms, you list the names of mixins, functions, or variables (including the &lt;code&gt;$&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2653cd871e8a970f8c3859e972619b3b4b753f85" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;info&lt;/code&gt; property contains a string that includes tab-separated information about the Sass implementation. For Dart Sass, this is the version of Dart Sass and the version of the &lt;a href=&quot;https://webdev.dartlang.org/tools/dart2js&quot;&gt;dart2js&lt;/a&gt; compiler used to compile it to JavaScript; for LibSass, it&amp;rsquo;s the version of LibSass and the version of &lt;a href=&quot;https://www.npmjs.com/package/node-sass&quot;&gt;Node Sass&lt;/a&gt; that wraps it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3be55fd27d6d1ab938ce65274a35e09cfe42e00e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;lighten()&lt;/code&gt; function increases lightness by a fixed amount, which is often not the desired effect. To make a color a certain percentage lighter than it was before, use &lt;a href=&quot;#scale&quot;&gt;&lt;code&gt;scale()&lt;/code&gt;&lt;/a&gt; instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a0a82c740138100094d9ee76c788128f778853e9" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;opacify()&lt;/code&gt; function increases the alpha channel by a fixed amount, which is often not the desired effect. To make a color a certain percentage more opaque than it was before, use &lt;a href=&quot;#scale&quot;&gt;&lt;code&gt;scale()&lt;/code&gt;&lt;/a&gt; instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f40efbde0e63d7b92586646b70aa859773ed959b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;saturate()&lt;/code&gt; function increases saturation by a fixed amount, which is often not the desired effect. To make a color a certain percentage more saturated than it was before, use &lt;a href=&quot;#scale&quot;&gt;&lt;code&gt;scale()&lt;/code&gt;&lt;/a&gt; instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="28bcccc07982bc5e35fca76e43cb56f152b6b2fe" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;transparentize()&lt;/code&gt; function decreases the alpha channel by a fixed amount, which is often not the desired effect. To make a color a certain percentage more transparent than it was before, use &lt;a href=&quot;#scale&quot;&gt;&lt;code&gt;color.scale()&lt;/code&gt;&lt;/a&gt; instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f599890a4f44b440fdb51059955b49736633394d" translate="yes" xml:space="preserve">
          <source>The CSS in nested imports is evaluated like a mixin, which means that any &lt;a href=&quot;../style-rules/parent-selector&quot;&gt;parent selectors&lt;/a&gt; will refer to the selector in which the stylesheet is nested.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2bccc239d00eaf8f1c0f5a285a794c300a62c09a" translate="yes" xml:space="preserve">
          <source>The Dart Sass executable can be invoked in one of two modes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9823180853274c3ed3c798208454cbc6cdd7343f" translate="yes" xml:space="preserve">
          <source>The Indented Syntax</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a79922841f2b9904dc1ccf8c993b6a2a89f4cee3" translate="yes" xml:space="preserve">
          <source>The Ruby Sass executable can be invoked in one of two modes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b2855bfaa1d17b7d3ed0e26fa30a8df99f684a0a" translate="yes" xml:space="preserve">
          <source>The SCSS syntax uses the file extension &lt;code&gt;.scss&lt;/code&gt;. With a few small exceptions, it&amp;rsquo;s a superset of CSS, which means essentially &lt;strong&gt;all valid CSS is valid SCSS as well&lt;/strong&gt;. Because of its similarity to CSS, it&amp;rsquo;s the easiest syntax to get used to and the most popular.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="40cd0e11b0583d27d0d7156f2bf116a792340ddc" translate="yes" xml:space="preserve">
          <source>The Sass JSAPI makes source maps available using the &lt;a href=&quot;#result-map&quot;&gt;&lt;code&gt;result.map&lt;/code&gt; field&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7dbd956ef12d159ddf033d9c2ae5230695500357" translate="yes" xml:space="preserve">
          <source>The Sass command-line tool will use the file extension to determine which syntax you are using, but there's not always a filename. The &lt;code&gt;sass&lt;/code&gt; command-line program defaults to the indented syntax but you can pass the &lt;code&gt;--scss&lt;/code&gt; option to it if the input should be interpreted as SCSS syntax. Alternatively, you can use the &lt;code&gt;scss&lt;/code&gt; command-line program which is exactly like the &lt;code&gt;sass&lt;/code&gt; program but it defaults to assuming the syntax is SCSS.</source>
          <target state="translated">La herramienta de l&amp;iacute;nea de comandos de Sass usar&amp;aacute; la extensi&amp;oacute;n del archivo para determinar qu&amp;eacute; sintaxis est&amp;aacute; usando, pero no siempre hay un nombre de archivo. El programa de l&amp;iacute;nea de comandos de &lt;code&gt;sass&lt;/code&gt; utiliza por defecto la sintaxis con sangr&amp;iacute;a, pero puede pasarle la opci&amp;oacute;n &lt;code&gt;--scss&lt;/code&gt; si la entrada debe interpretarse como sintaxis SCSS. Alternativamente, puede utilizar el programa de l&amp;iacute;nea de comandos &lt;code&gt;scss&lt;/code&gt; , que es exactamente como el programa &lt;code&gt;sass&lt;/code&gt; , pero por defecto asume que la sintaxis es SCSS.</target>
        </trans-unit>
        <trans-unit id="49cc07728709e0752a5bd9c9ca000ab89c40539a" translate="yes" xml:space="preserve">
          <source>The Sass core library provides a couple advanced functions for working with variables. The &lt;a href=&quot;modules/meta#variable-exists&quot;&gt;&lt;code&gt;meta.variable-exists()&lt;/code&gt; function&lt;/a&gt; returns whether a variable with the given name exists in the current scope, and the &lt;a href=&quot;modules/meta#global-variable-exists&quot;&gt;&lt;code&gt;meta.global-variable-exists()&lt;/code&gt; function&lt;/a&gt; does the same but only for the global scope.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e97c8a0fe445977b0b6a657b28d30949285d2895" translate="yes" xml:space="preserve">
          <source>The Sass migrator automatically updates your Sass files to help you move on to the latest and greatest version of the language. Each of its commands migrates a single feature, to give you as much control as possible over what you update and when.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d20e8542d5b0783516e2e0e242a1e43d12c5a8ad" translate="yes" xml:space="preserve">
          <source>The Sass module provides two functions with similar APIs.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5e7a80e2ce0603f294bc4436485a59be5b53a3b8" translate="yes" xml:space="preserve">
          <source>The Sass team discourages the continued use of the &lt;code&gt;@import&lt;/code&gt; rule. Sass will &lt;a href=&quot;https://github.com/sass/sass/blob/master/accepted/module-system.md#timeline&quot;&gt;gradually phase it out&lt;/a&gt; over the next few years, and eventually remove it from the language entirely. Prefer the &lt;a href=&quot;use&quot;&gt;&lt;code&gt;@use&lt;/code&gt; rule&lt;/a&gt; instead. (Note that only Dart Sass currently supports &lt;code&gt;@use&lt;/code&gt;. Users of other implementations must use the &lt;code&gt;@import&lt;/code&gt; rule instead.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5ad5ee8442b7be18229c8032bdbe771af8814c90" translate="yes" xml:space="preserve">
          <source>The Sass value &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="249cb1c95e1a126a7b34c1bcc56fae2dea8359d9" translate="yes" xml:space="preserve">
          <source>The Sass value &lt;code&gt;null&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9b4397f4896d98b65aec6ed8c3c675b6f5aa9a50" translate="yes" xml:space="preserve">
          <source>The Sass value &lt;code&gt;true&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="36ec8433431c6f31089da9aad58c0b8ed355cd19" translate="yes" xml:space="preserve">
          <source>The absolute path of the input file passed as the &lt;a href=&quot;#file&quot;&gt;&lt;code&gt;file&lt;/code&gt; option&lt;/a&gt;, or &lt;code&gt;&quot;data&quot;&lt;/code&gt; if the &lt;a href=&quot;#data&quot;&gt;&lt;code&gt;data&lt;/code&gt; option&lt;/a&gt; was passed instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="629ffa2442fc4371dc88961319dce02104a6b90d" translate="yes" xml:space="preserve">
          <source>The alpha channel of a color can be adjusted using the &lt;a href=&quot;sass/script/functions#opacify-instance_method&quot;&gt;opacify&lt;/a&gt; and &lt;a href=&quot;sass/script/functions#transparentize-instance_method&quot;&gt;transparentize&lt;/a&gt; functions. For example:</source>
          <target state="translated">El canal alfa de un color se puede ajustar utilizando las funciones de &lt;a href=&quot;sass/script/functions#opacify-instance_method&quot;&gt;opacificar&lt;/a&gt; y &lt;a href=&quot;sass/script/functions#transparentize-instance_method&quot;&gt;transparentar&lt;/a&gt; . Por ejemplo:</target>
        </trans-unit>
        <trans-unit id="9f0c9af133a56cf709eabce5c6b2068a2f64a4ff" translate="yes" xml:space="preserve">
          <source>The block of content passed to a mixin are evaluated in the scope where the block is defined, not in the scope of the mixin. This means that variables local to the mixin &lt;strong&gt;cannot&lt;/strong&gt; be used within the passed style block and variables will resolve to the global value:</source>
          <target state="translated">El bloque de contenido que se pasa a un mixin se eval&amp;uacute;a en el alcance donde se define el bloque, no en el alcance del mixin. Esto significa que las variables locales del mixin &lt;strong&gt;no se&lt;/strong&gt; pueden usar dentro del bloque de estilo pasado y las variables se resolver&amp;aacute;n en el valor global:</target>
        </trans-unit>
        <trans-unit id="1bcb97b641d09ebb9846d4a65721d499bc5f2c78" translate="yes" xml:space="preserve">
          <source>The built-in &lt;code&gt;if()&lt;/code&gt; function allows you to branch on a condition and returns only one of two possible outcomes. It can be used in any script context. The &lt;code&gt;if&lt;/code&gt; function only evaluates the argument corresponding to the one that it will return -- this allows you to refer to variables that may not be defined or to have calculations that would otherwise cause an error (E.g. divide by zero).</source>
          <target state="translated">La funci&amp;oacute;n &lt;code&gt;if()&lt;/code&gt; incorporada le permite bifurcarse en una condici&amp;oacute;n y devuelve solo uno de los dos resultados posibles. Se puede utilizar en cualquier contexto de script. La funci&amp;oacute;n &lt;code&gt;if&lt;/code&gt; solo eval&amp;uacute;a el argumento correspondiente al que devolver&amp;aacute;; esto le permite hacer referencia a variables que pueden no estar definidas o tener c&amp;aacute;lculos que de otro modo causar&amp;iacute;an un error (por ejemplo, dividir por cero).</target>
        </trans-unit>
        <trans-unit id="ab48b414878c480f8c51b965b64c4b9a5d4944bb" translate="yes" xml:space="preserve">
          <source>The column of &lt;a href=&quot;#error-line&quot;&gt;&lt;code&gt;error.line&lt;/code&gt;&lt;/a&gt; in &lt;a href=&quot;#error-file&quot;&gt;&lt;code&gt;error.file&lt;/code&gt;&lt;/a&gt; on which the error occurred.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a7fd5041403501eaa3a3142efda256c050688b7b" translate="yes" xml:space="preserve">
          <source>The compiled CSS, as a &lt;a href=&quot;https://nodejs.org/api/buffer.html&quot;&gt;Buffer&lt;/a&gt;. This can be converted to a string by calling &lt;a href=&quot;https://nodejs.org/api/buffer.html#buffer_buf_tostring_encoding_start_end&quot;&gt;&lt;code&gt;Buffer.toString()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5911b098efb0f894cf7becb1324dc18dcf7724c3" translate="yes" xml:space="preserve">
          <source>The different meanings of &lt;code&gt;-&lt;/code&gt; in Sass take precedence in the following order:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bd67186bd98e8190eb31017e67db7ed517d63d54" translate="yes" xml:space="preserve">
          <source>The different meanings of &lt;code&gt;-&lt;/code&gt; take precedence in the following order:</source>
          <target state="translated">Los diferentes significados de &lt;code&gt;-&lt;/code&gt; tienen prioridad en el siguiente orden:</target>
        </trans-unit>
        <trans-unit id="411aca0656eb98a728ef767976eddacbf1ed4c24" translate="yes" xml:space="preserve">
          <source>The equality operators return whether or not two values are the same. They&amp;rsquo;re written &lt;code&gt;&amp;lt;expression&amp;gt; == &amp;lt;expression&amp;gt;&lt;/code&gt;, which returns whether two &lt;a href=&quot;../syntax/structure#expressions&quot;&gt;expressions&lt;/a&gt; are equal, and &lt;code&gt;&amp;lt;expression&amp;gt; != &amp;lt;expression&amp;gt;&lt;/code&gt;, which returns whether two expressions are &lt;em&gt;not&lt;/em&gt; equal. Two values are considered equal if they&amp;rsquo;re the same type &lt;em&gt;and&lt;/em&gt; the same value, which means different things for different types:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="91bc219ab8ac1aec885b10df0e7b5efb82c47f13" translate="yes" xml:space="preserve">
          <source>The exact format of the debug message varies from implementation to implementation. This is what it looks like in Dart Sass:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2f6d331e3a47aaaeb0efa6e128428c63dad27747" translate="yes" xml:space="preserve">
          <source>The exact format of the error and stack trace varies from implementation to implementation, and can also depend on your build system. This is what it looks like in Dart Sass when run from the command line:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3f11145521151b80c5c3bc7f7d5d9191835bdf80" translate="yes" xml:space="preserve">
          <source>The exact format of the warning and stack trace varies from implementation to implementation. This is what it looks like in Dart Sass:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9b92a4c7223dc172f932e908e2fd37b99a3b5469" translate="yes" xml:space="preserve">
          <source>The following features are supported:</source>
          <target state="translated">Se admiten las siguientes características:</target>
        </trans-unit>
        <trans-unit id="19fea2b888e49ae8a6f6f13465e6dc849402cf66" translate="yes" xml:space="preserve">
          <source>The functions in this module inspect and manipulate selectors. Whenever they return a selector, it&amp;rsquo;s always a comma-separated &lt;a href=&quot;../values/lists&quot;&gt;list&lt;/a&gt; (the selector list) that contains space-separated lists (the complex selectors) that contain &lt;a href=&quot;../values/strings#unquoted&quot;&gt;unquoted strings&lt;/a&gt; (the compound selectors). For example, the selector &lt;code&gt;.main aside:hover, .sidebar p&lt;/code&gt; would be returned as:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f917e97c3a12a6186a7ac26d1e2c5bea57b4a97d" translate="yes" xml:space="preserve">
          <source>The global name of this function is &lt;code&gt;compa&lt;strong&gt;ra&lt;/strong&gt;ble&lt;/code&gt;, but when it was added to the &lt;code&gt;sass:math&lt;/code&gt; module the name was changed to &lt;code&gt;compa&lt;strong&gt;ti&lt;/strong&gt;ble&lt;/code&gt; to more clearly convey what the function does.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c07ae330d5f2e56007474c07d2b2acf32e6179cc" translate="yes" xml:space="preserve">
          <source>The hue is a number between &lt;code&gt;0deg&lt;/code&gt; and &lt;code&gt;360deg&lt;/code&gt; (inclusive). The saturation and lightness are numbers between &lt;code&gt;0%&lt;/code&gt; and &lt;code&gt;100%&lt;/code&gt; (inclusive). All these numbers may be &lt;a href=&quot;values/numbers#units&quot;&gt;unitless&lt;/a&gt;. The alpha channel can be specified as either a unitless number between 0 and 1 (inclusive), or a percentage between &lt;code&gt;0%&lt;/code&gt; and &lt;code&gt;100%&lt;/code&gt; (inclusive).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="35bfd02780d11ebf66e10972c6d36c9b4995652b" translate="yes" xml:space="preserve">
          <source>The hue is a number between &lt;code&gt;0deg&lt;/code&gt; and &lt;code&gt;360deg&lt;/code&gt; (inclusive). The whiteness and blackness are numbers between &lt;code&gt;0%&lt;/code&gt; and &lt;code&gt;100%&lt;/code&gt; (inclusive). The hue may be &lt;a href=&quot;../values/numbers#units&quot;&gt;unitless&lt;/a&gt;, but the whiteness and blackness must have unit &lt;code&gt;%&lt;/code&gt;. The alpha channel can be specified as either a unitless number between 0 and 1 (inclusive), or a percentage between &lt;code&gt;0%&lt;/code&gt; and &lt;code&gt;100%&lt;/code&gt; (inclusive).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="46c43ea532f48970a41f84360de25891f628d9cb" translate="yes" xml:space="preserve">
          <source>The indented syntax looks like this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="21ec2f9027347a7f5f44a91224336d28cb8d15a0" translate="yes" xml:space="preserve">
          <source>The indented syntax was Sass&amp;rsquo;s original syntax, and so it uses the file extension &lt;code&gt;.sass&lt;/code&gt;. Because of this extension, it&amp;rsquo;s sometimes just called &amp;ldquo;Sass&amp;rdquo;. The indented syntax supports all the same features as SCSS, but it uses indentation instead of curly braces and semicolons to describe the format of the document.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c4902488b96afeba8e351c58307203dd93e55c48" translate="yes" xml:space="preserve">
          <source>The initial keys and values of the map are undefined. They must be set using the &lt;a href=&quot;#map-setkey-index-key&quot;&gt;&lt;code&gt;setKey()&lt;/code&gt; method&lt;/a&gt; and the &lt;a href=&quot;#map-setvalue-index-value&quot;&gt;&lt;code&gt;setValue()&lt;/code&gt; method&lt;/a&gt; before accessing them or passing the map back to Sass.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cc75b255410e0f231915e9a6ce5657dd664328ac" translate="yes" xml:space="preserve">
          <source>The initial values of the list elements are undefined. These elements must be set using the &lt;a href=&quot;#list-setvalue-index-value&quot;&gt;&lt;code&gt;setValue()&lt;/code&gt; method&lt;/a&gt; before accessing them or passing the list back to Sass.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2163b399ef4c7e2507a390b0834022d2945f43c7" translate="yes" xml:space="preserve">
          <source>The input file is parsed as &lt;a href=&quot;../syntax#scss&quot;&gt;SCSS&lt;/a&gt; if its extension is &lt;code&gt;.scss&lt;/code&gt; or as the &lt;a href=&quot;../syntax#the-indented-syntax&quot;&gt;indented syntax&lt;/a&gt; if its extension is &lt;code&gt;.sass&lt;/code&gt;. If it doesn&amp;rsquo;t have one of these two extensions, or if it comes from standard input, it&amp;rsquo;s parsed as the indented syntax by default. This can be controlled with the &lt;a href=&quot;#scss&quot;&gt;&lt;code&gt;--scss&lt;/code&gt; flag&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="65f157d77ebfafa2731f0aa177168b912acaa0cb" translate="yes" xml:space="preserve">
          <source>The input file is parsed as &lt;a href=&quot;../syntax#scss&quot;&gt;SCSS&lt;/a&gt; if its extension is &lt;code&gt;.scss&lt;/code&gt;, as the &lt;a href=&quot;../syntax#the-indented-syntax&quot;&gt;indented syntax&lt;/a&gt; if its extension is &lt;code&gt;.sass&lt;/code&gt;, or as &lt;a href=&quot;../at-rules/import#importing-css&quot;&gt;plain CSS&lt;/a&gt; if its extension is &lt;code&gt;.css&lt;/code&gt;. If it doesn&amp;rsquo;t have one of these three extensions, or if it comes from standard input, it&amp;rsquo;s parsed as SCSS by default. This can be controlled with the &lt;a href=&quot;#indented&quot;&gt;&lt;code&gt;--indented&lt;/code&gt; flag&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="abc67cfb01cacb557f8249bd4fd0217570606bf9" translate="yes" xml:space="preserve">
          <source>The keywords are returned as a map from argument names as unquoted strings (not including &lt;code&gt;$&lt;/code&gt;) to the values of those arguments.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="258da41117a38a10268ce6458531112c24def106" translate="yes" xml:space="preserve">
          <source>The length of the resulting list is the length of the shortest list.</source>
          <target state="translated">La longitud de la lista resultante es la longitud de la lista más corta.</target>
        </trans-unit>
        <trans-unit id="b4b40069f33bd6ccd0979468cea7082518ea2c50" translate="yes" xml:space="preserve">
          <source>The line in &lt;a href=&quot;#error-file&quot;&gt;&lt;code&gt;error.file&lt;/code&gt;&lt;/a&gt; on which the error occurred.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f99bafff4bc0c23462183c18f83b139c5bb10044" translate="yes" xml:space="preserve">
          <source>The location of parse errors can be accessed through implementation-specific APIs. For example, in Dart Sass you can access &lt;a href=&quot;https://pub.dartlang.org/documentation/sass/latest/sass/SassException/span.html&quot;&gt;&lt;code&gt;SassException.span&lt;/code&gt;&lt;/a&gt;, and in Node Sass&amp;rsquo;s and Dart Sass&amp;rsquo;s JSAPI you can access the &lt;a href=&quot;https://github.com/sass/node-sass#error-object&quot;&gt;&lt;code&gt;file&lt;/code&gt;, &lt;code&gt;line&lt;/code&gt;, and &lt;code&gt;column&lt;/code&gt;&lt;/a&gt; properties.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b5ecca3ec18dfc00e101be629990aabccaac98c6" translate="yes" xml:space="preserve">
          <source>The migrator currently supports only one migration, but expect more to come as the Sass language continues to evolve!</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4df49a4caa7694bdcf35284bcfc20924016482ef" translate="yes" xml:space="preserve">
          <source>The module URL being loaded can come from a variable and include &lt;a href=&quot;../interpolation&quot;&gt;interpolation&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4178ed4ddf29fe6ada191630e63ef84f219db6c1" translate="yes" xml:space="preserve">
          <source>The module migrator needs to be able to read all of the stylesheets depended on by the ones it&amp;rsquo;s migrating, even if the &lt;a href=&quot;#migrate-deps&quot;&gt;&lt;code&gt;--migrate-deps&lt;/code&gt; option&lt;/a&gt; is not passed. If the migrator fails to find a dependency, you&amp;rsquo;ll get an error.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="06f9c260a7ec62319c981e555fd7eba4596789bb" translate="yes" xml:space="preserve">
          <source>The most straightforward way to use SassScript is to use variables. Variables begin with dollar signs, and are set like CSS properties:</source>
          <target state="translated">La forma más directa de usar SassScript es usar variables.Las variables comienzan con el signo de dólar,y se establecen como propiedades CSS:</target>
        </trans-unit>
        <trans-unit id="6152fec5717bae0e93b4246533a89841d2d271fe" translate="yes" xml:space="preserve">
          <source>The new module system and the &lt;code&gt;@use&lt;/code&gt; rule address all these problems.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="59fae2fe3c85c45f8ff213c1fc19e8efe071e614" translate="yes" xml:space="preserve">
          <source>The number of milliseconds between 1 January 1970 at 00:00:00 UTC and the time at which Sass compilation began.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="550de4953924f4bca43ab5446ec8ed787baf3146" translate="yes" xml:space="preserve">
          <source>The number of milliseconds between 1 January 1970 at 00:00:00 UTC and the time at which Sass compilation ended.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9fa1487d1587c995f0bcb697c890b6c891f95903" translate="yes" xml:space="preserve">
          <source>The number of milliseconds it took to compile the Sass file. This is always equal to &lt;a href=&quot;#result-stats-start&quot;&gt;&lt;code&gt;result.stats.start&lt;/code&gt;&lt;/a&gt; minus &lt;a href=&quot;#result-stats-end&quot;&gt;&lt;code&gt;result.stats.end&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ef7abbbaf1e251eee094649d42d65fbbe127a68f" translate="yes" xml:space="preserve">
          <source>The numbers must either all have compatible units, or all be unitless. And since the numbers&amp;rsquo; units may differ, the output takes the unit of the first number.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5f8e696f26ae38f53863611394de68aa0bb01f4f" translate="yes" xml:space="preserve">
          <source>The operation is surrounded by parentheses, unless those parentheses are outside a list that contains the operation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e01dbf707a09e349e25aa75b85c419e95881e1bf" translate="yes" xml:space="preserve">
          <source>The parent selector can also be used within SassScript. It&amp;rsquo;s a special expression that returns the current parent selector in the same format used by &lt;a href=&quot;../modules/selector#selector-values&quot;&gt;selector functions&lt;/a&gt;: a comma-separated list (the selector list) that contains space-separated lists (the complex selectors) that contain unquoted strings (the compound selectors).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="33cf53c06757f4836b577423ea6b3e12913ce928" translate="yes" xml:space="preserve">
          <source>The parent selector, &lt;code&gt;&amp;amp;&lt;/code&gt;, is a special selector invented by Sass that&amp;rsquo;s used in &lt;a href=&quot;../style-rules#nesting&quot;&gt;nested selectors&lt;/a&gt; to refer to the outer selector. It makes it possible to re-use the outer selector in more complex ways, like adding a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-classes&quot;&gt;pseudo-class&lt;/a&gt; or adding a selector &lt;em&gt;before&lt;/em&gt; the parent.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6045ebfa783a9c7f7a09d4adea3c9f23c023f23d" translate="yes" xml:space="preserve">
          <source>The property namespace itself can also have a value. For example:</source>
          <target state="translated">El propio espacio de nombres de la propiedad también puede tener un valor.Por ejemplo:</target>
        </trans-unit>
        <trans-unit id="9faf02a5d158700112a121804e3476e1e235849f" translate="yes" xml:space="preserve">
          <source>The result is stored in a variable or returned by a function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b68e2b075df984e14d6bb9bdb6c77aed78be95b7" translate="yes" xml:space="preserve">
          <source>The result is used as part of another operation (other than &lt;code&gt;/&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f3cf804d759af28028f8dc65268ebce4d85fc673" translate="yes" xml:space="preserve">
          <source>The returned function can be called using &lt;a href=&quot;#call&quot;&gt;&lt;code&gt;meta.call()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9ad79e11fc27ef9189366d5666deab3f58929d61" translate="yes" xml:space="preserve">
          <source>The returned list is always comma-separated and the sub-lists are always space-separated.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1fb24797caa0933903bba73e0a6f76e56dd41773" translate="yes" xml:space="preserve">
          <source>The returned list is comma-separated, and the simple selectors are unquoted strings.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="757025ff75dab36d072fa990d532475fa92d86c9" translate="yes" xml:space="preserve">
          <source>The rule is written &lt;code&gt;@forward &quot;&amp;lt;url&amp;gt;&quot;&lt;/code&gt;. It loads the module at the given URL just like &lt;code&gt;@use&lt;/code&gt;, but it makes the &lt;a href=&quot;use#private-members&quot;&gt;public&lt;/a&gt; members of the loaded module available to users of your module as though they were defined directly in your module. Those members aren&amp;rsquo;t available in your module, though&amp;mdash;if you want that, you&amp;rsquo;ll need to write a &lt;code&gt;@use&lt;/code&gt; rule as well. Don&amp;rsquo;t worry, it&amp;rsquo;ll only load the module once!</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d4b2d6f15b257b97df1f0f2487bd98118e3ddbbe" translate="yes" xml:space="preserve">
          <source>The same mixins can be done in the &lt;code&gt;.sass&lt;/code&gt; shorthand syntax:</source>
          <target state="translated">Los mismos mixins se pueden hacer en la sintaxis abreviada &lt;code&gt;.sass&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="1e43b849eba22e5bd20a341f09cad9fb44cd8782" translate="yes" xml:space="preserve">
          <source>The second and older syntax, known as the indented syntax (or sometimes just &quot;Sass&quot;), provides a more concise way of writing CSS. It uses indentation rather than brackets to indicate nesting of selectors, and newlines rather than semicolons to separate properties. Some people find this to be easier to read and quicker to write than SCSS. The indented syntax has all the same features, although some of them have slightly different syntax; this is described in &lt;a href=&quot;http://sass-lang.com/documentation/file.INDENTED_SYNTAX.html&quot;&gt;the indented syntax reference&lt;/a&gt;. Files using this syntax have the &lt;code&gt;.sass&lt;/code&gt; extension.</source>
          <target state="translated">La segunda y m&amp;aacute;s antigua sintaxis, conocida como sintaxis con sangr&amp;iacute;a (oa veces simplemente &quot;Sass&quot;), proporciona una forma m&amp;aacute;s concisa de escribir CSS. Utiliza sangr&amp;iacute;a en lugar de corchetes para indicar el anidamiento de selectores y nuevas l&amp;iacute;neas en lugar de punto y coma para separar propiedades. Algunas personas encuentran que esto es m&amp;aacute;s f&amp;aacute;cil de leer y m&amp;aacute;s r&amp;aacute;pido de escribir que SCSS. La sintaxis con sangr&amp;iacute;a tiene todas las mismas caracter&amp;iacute;sticas, aunque algunas tienen una sintaxis ligeramente diferente; esto se describe en &lt;a href=&quot;http://sass-lang.com/documentation/file.INDENTED_SYNTAX.html&quot;&gt;la referencia de sintaxis con sangr&amp;iacute;a&lt;/a&gt; . Los archivos que utilizan esta sintaxis tienen la extensi&amp;oacute;n &lt;code&gt;.sass&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="36a43cc0355a475c3a5d17b8d4af8d46efc2ad81" translate="yes" xml:space="preserve">
          <source>The simplest &lt;code&gt;@use&lt;/code&gt; rule is written &lt;code&gt;@use &quot;&amp;lt;url&amp;gt;&quot;&lt;/code&gt;, which loads the module at the given URL. Any styles loaded this way will be included exactly once in the compiled CSS output, no matter how many times those styles are loaded.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f1b582fe54adc0be359d0bf8ca9baee65d6ece85" translate="yes" xml:space="preserve">
          <source>The simplest expressions just represent static values:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9cb763b215fc2725feaff8287b961843109bd5dc" translate="yes" xml:space="preserve">
          <source>The singleton &lt;a href=&quot;../values/null&quot;&gt;&lt;code&gt;null&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="de66954bc00010aadd593163369a10f26534482a" translate="yes" xml:space="preserve">
          <source>The singleton &lt;a href=&quot;values/null&quot;&gt;&lt;code&gt;null&lt;/code&gt;&lt;/a&gt; value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5d900ce8f41e3928d18e3297e89e7fb17b931b22" translate="yes" xml:space="preserve">
          <source>The source map that maps the compiled CSS to the source files from which it was generated, as a &lt;a href=&quot;https://nodejs.org/api/buffer.html&quot;&gt;Buffer&lt;/a&gt;. This can be converted to a string by calling &lt;a href=&quot;https://nodejs.org/api/buffer.html#buffer_buf_tostring_encoding_start_end&quot;&gt;&lt;code&gt;Buffer.toString()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="436159b068f42295d043bea8e8ff93d4d6028a14" translate="yes" xml:space="preserve">
          <source>The source map uses absolute &lt;a href=&quot;https://en.wikipedia.org/wiki/File_URI_scheme&quot;&gt;&lt;code&gt;file:&lt;/code&gt; URLs&lt;/a&gt; to link to the Sass source files, except if the source file comes from the &lt;a href=&quot;#data&quot;&gt;&lt;code&gt;data&lt;/code&gt; option&lt;/a&gt; in which case it lists its URL as &lt;code&gt;stdin&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e3954505b46420b22fa34aefdf8731c17376b09c" translate="yes" xml:space="preserve">
          <source>The special string &lt;code&gt;-&lt;/code&gt; can be passed in place of the input file to tell Sass to read the input file from &lt;a href=&quot;https://en.wikipedia.org/wiki/Standard_streams#Standard_input_(stdin)&quot;&gt;standard input&lt;/a&gt;. Sass will default to parsing it as SCSS unless the &lt;a href=&quot;#indented&quot;&gt;&lt;code&gt;--indented&lt;/code&gt; flag&lt;/a&gt; is passed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b03fb84cc6c300d7b847ab2fd90d935f166ef691" translate="yes" xml:space="preserve">
          <source>The stylesheet where the error occurred. If the error occurred in a stylesheet loaded from disk, this is the absolute path of that stylesheet. If the error occurred in a stylesheet that was loaded from an &lt;a href=&quot;#importer&quot;&gt;importer&lt;/a&gt; which returned the stylesheet&amp;rsquo;s contents, this is the raw string of the &lt;code&gt;@use&lt;/code&gt; or &lt;code&gt;@import&lt;/code&gt; that loaded that stylesheet. If it occurred in the contents of the &lt;a href=&quot;#data&quot;&gt;&lt;code&gt;data&lt;/code&gt; option&lt;/a&gt;, this is the string &lt;code&gt;&quot;stdin&quot;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8cee4b3810dd190702d457b5ef9a574057431cd1" translate="yes" xml:space="preserve">
          <source>The unary operators &lt;a href=&quot;operators/boolean&quot;&gt;&lt;code&gt;not&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;operators/numeric#unary-operators&quot;&gt;&lt;code&gt;+&lt;/code&gt;, &lt;code&gt;-&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;operators/string#unary-operators&quot;&gt;&lt;code&gt;/&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4f820cb74662ee617b7748c4280229a892155029" translate="yes" xml:space="preserve">
          <source>The value &lt;code&gt;!important&lt;/code&gt;, which is parsed as an unquoted string.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="796e8e6715b0c6ac314131eb3bc93601c66c2752" translate="yes" xml:space="preserve">
          <source>The value &lt;code&gt;null&lt;/code&gt; is the only value of its type. It represents the absence of a value, and is often returned by &lt;a href=&quot;../at-rules/function&quot;&gt;functions&lt;/a&gt; to indicate the lack of a result.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d4369cb10498fe9fea655a2a3987028bc59e3d23" translate="yes" xml:space="preserve">
          <source>The value of &lt;code&gt;$selector&lt;/code&gt; is now &lt;code&gt;((&quot;.foo.bar&quot; &quot;.baz.bang&quot;), &quot;.bip.qux&quot;)&lt;/code&gt;. The compound selectors are quoted here to indicate that they're strings, but in reality they would be unquoted. Even if the parent selector doesn't contain a comma or a space, &lt;code&gt;&amp;amp;&lt;/code&gt; will always have two levels of nesting, so it can be accessed consistently.</source>
          <target state="translated">El valor de &lt;code&gt;$selector&lt;/code&gt; es ahora &lt;code&gt;((&quot;.foo.bar&quot; &quot;.baz.bang&quot;), &quot;.bip.qux&quot;)&lt;/code&gt; . Los selectores compuestos se citan aqu&amp;iacute; para indicar que son cadenas, pero en realidad no se citar&amp;iacute;an. Incluso si el selector principal no contiene una coma o un espacio, &lt;code&gt;&amp;amp;&lt;/code&gt; siempre tendr&amp;aacute; dos niveles de anidaci&amp;oacute;n, por lo que se puede acceder a &amp;eacute;l de manera consistente.</target>
        </trans-unit>
        <trans-unit id="6a4948c64a83be42d30b89a53e4d8614912e979e" translate="yes" xml:space="preserve">
          <source>The way Sass comments work differs substantially between SCSS and the indented syntax. Both syntaxes support two types of comments: comments defined using &lt;code&gt;/* */&lt;/code&gt; that are (usually) compiled to CSS, and comments defined using &lt;code&gt;//&lt;/code&gt; that are not.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7b8a877b8636d49ac3f65f0bacf33bcb5a47ce42" translate="yes" xml:space="preserve">
          <source>The weight specifies the amount of the first color that should be included in the returned color. The default, &lt;code&gt;50%&lt;/code&gt;, means that half the first color and half the second color should be used. &lt;code&gt;25%&lt;/code&gt; means that a quarter of the first color and three quarters of the second color should be used.</source>
          <target state="translated">El peso especifica la cantidad del primer color que debe incluirse en el color devuelto. El valor predeterminado, &lt;code&gt;50%&lt;/code&gt; , significa que se debe usar la mitad del primer color y la mitad del segundo color. &lt;code&gt;25%&lt;/code&gt; significa que se debe utilizar un cuarto del primer color y tres cuartos del segundo color.</target>
        </trans-unit>
        <trans-unit id="177252848a5ac086129dcafe1bbac98faf2b4389" translate="yes" xml:space="preserve">
          <source>Then &lt;code&gt;&amp;lt;div class=&quot;seriousError intrusion&quot;&amp;gt;&lt;/code&gt; will have the &lt;code&gt;hacked.png&lt;/code&gt; background image as well.</source>
          <target state="translated">Entonces &lt;code&gt;&amp;lt;div class=&quot;seriousError intrusion&quot;&amp;gt;&lt;/code&gt; tambi&amp;eacute;n tendr&amp;aacute; la imagen de fondo &lt;code&gt;hacked.png&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="b6ab2aea6319171b326eb82c34f0565c2dbb0f73" translate="yes" xml:space="preserve">
          <source>There are a number of different things &lt;code&gt;-&lt;/code&gt; can mean in CSS and in Sass. It can be a subtraction operator (as in &lt;code&gt;5px - 3px&lt;/code&gt;), the beginning of a negative number (as in &lt;code&gt;-3px&lt;/code&gt;), a unary negation operator (as in &lt;code&gt;-$var&lt;/code&gt;), or part of an identifier (as in &lt;code&gt;font-weight&lt;/code&gt;). Most of the time, it's clear which is which, but there are some tricky cases. As a general rule, you're safest if:</source>
          <target state="translated">Hay varias cosas diferentes &lt;code&gt;-&lt;/code&gt; puede significar en CSS y en Sass. Puede ser un operador de resta (como en &lt;code&gt;5px - 3px&lt;/code&gt; ), el comienzo de un n&amp;uacute;mero negativo (como en &lt;code&gt;-3px&lt;/code&gt; ), un operador de negaci&amp;oacute;n unario (como en &lt;code&gt;-$var&lt;/code&gt; ) o parte de un identificador (como en &lt;code&gt;font-weight&lt;/code&gt; ). La mayor&amp;iacute;a de las veces, est&amp;aacute; claro cu&amp;aacute;l es cu&amp;aacute;l, pero hay algunos casos complicados. Como regla general, estar&amp;aacute; m&amp;aacute;s seguro si:</target>
        </trans-unit>
        <trans-unit id="8f0ec852d33f9ad4e0e7df6cbcabfcee4d9009eb" translate="yes" xml:space="preserve">
          <source>There are often cases when designing a page when one class should have all the styles of another class, as well as its own specific styles. For example, the &lt;a href=&quot;http://getbem.com/naming/&quot;&gt;BEM methodology&lt;/a&gt; encourages modifier classes that go on the same elements as block or element classes. But this can create cluttered HTML, it's prone to errors from forgetting to include both classes, and it can bring non-semantic style concerns into your markup.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f7ab8877161595d185108311821356f071bb55a2" translate="yes" xml:space="preserve">
          <source>There are often cases when designing a page when one class should have all the styles of another class, as well as its own specific styles. The most common way of handling this is to use both the more general class and the more specific class in the HTML. For example, suppose we have a design for a normal error and also for a serious error. We might write our markup like so:</source>
          <target state="translated">A menudo hay casos en el diseño de una página en los que una clase debe tener todos los estilos de otra clase,así como sus propios estilos específicos.La forma más común de manejar esto es usar tanto la clase más general como la más específica en el HTML.Por ejemplo,supongamos que tenemos un diseño para un error normal y también para un error grave.Podríamos escribir nuestro marcado así:</target>
        </trans-unit>
        <trans-unit id="5462dc7a171bbf438178cd731b27497ccb08cbce" translate="yes" xml:space="preserve">
          <source>There are some restrictions on the use of &lt;code&gt;@extend&lt;/code&gt; within directives such as &lt;code&gt;@media&lt;/code&gt;. Sass is unable to make CSS rules outside of the &lt;code&gt;@media&lt;/code&gt; block apply to selectors inside it without creating a huge amount of stylesheet bloat by copying styles all over the place. This means that if you use &lt;code&gt;@extend&lt;/code&gt; within &lt;code&gt;@media&lt;/code&gt; (or other CSS directives), you may only extend selectors that appear within the same directive block.</source>
          <target state="translated">Existen algunas restricciones sobre el uso de &lt;code&gt;@extend&lt;/code&gt; dentro de directivas como &lt;code&gt;@media&lt;/code&gt; . Sass no puede hacer que las reglas CSS fuera del bloque &lt;code&gt;@media&lt;/code&gt; se apliquen a los selectores dentro de &amp;eacute;l sin crear una gran cantidad de exceso de hojas de estilo al copiar estilos por todas partes. Esto significa que si usa &lt;code&gt;@extend&lt;/code&gt; dentro de &lt;code&gt;@media&lt;/code&gt; (u otras directivas CSS), solo puede extender los selectores que aparecen dentro del mismo bloque de directiva.</target>
        </trans-unit>
        <trans-unit id="937ed733728f67555d53882c99fae9ce9823cc28" translate="yes" xml:space="preserve">
          <source>There are two special values you can pass to &lt;code&gt;@at-root&lt;/code&gt;. &quot;rule&quot; refers to normal CSS rules; &lt;code&gt;@at-root (without: rule)&lt;/code&gt; is the same as &lt;code&gt;@at-root&lt;/code&gt; with no query. &lt;code&gt;@at-root (without: all)&lt;/code&gt; means that the styles should be moved outside of &lt;em&gt;all&lt;/em&gt; directives and CSS rules.</source>
          <target state="translated">Hay dos valores especiales que puede pasar a &lt;code&gt;@at-root&lt;/code&gt; . &quot;regla&quot; se refiere a las reglas CSS normales; &lt;code&gt;@at-root (without: rule)&lt;/code&gt; es lo mismo que &lt;code&gt;@at-root&lt;/code&gt; sin consulta. &lt;code&gt;@at-root (without: all)&lt;/code&gt; significa que los estilos deben moverse fuera de &lt;em&gt;todas las&lt;/em&gt; directivas y reglas CSS.</target>
        </trans-unit>
        <trans-unit id="b519ebe4607dfda6aeda062897ebaecfe93b3483" translate="yes" xml:space="preserve">
          <source>There are two syntaxes available for Sass. The first, known as SCSS (Sassy CSS) and used throughout this reference, is an extension of the syntax of CSS. This means that every valid CSS stylesheet is a valid SCSS file with the same meaning. In addition, SCSS understands most CSS hacks and vendor-specific syntax, such as &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/ms530752.aspx&quot;&gt;IE's old &lt;code&gt;filter&lt;/code&gt; syntax&lt;/a&gt;. This syntax is enhanced with the Sass features described below. Files using this syntax have the &lt;code&gt;.scss&lt;/code&gt; extension.</source>
          <target state="translated">Hay dos sintaxis disponibles para Sass. El primero, conocido como SCSS (Sassy CSS) y utilizado a lo largo de esta referencia, es una extensi&amp;oacute;n de la sintaxis de CSS. Esto significa que cada hoja de estilo CSS v&amp;aacute;lida es un archivo SCSS v&amp;aacute;lido con el mismo significado. Adem&amp;aacute;s, SCSS comprende la mayor&amp;iacute;a de los trucos de CSS y la sintaxis espec&amp;iacute;fica del proveedor, como &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/ms530752.aspx&quot;&gt;la antigua sintaxis de &lt;code&gt;filter&lt;/code&gt; IE&lt;/a&gt; . Esta sintaxis se ha mejorado con las funciones de Sass que se describen a continuaci&amp;oacute;n. Los archivos que utilizan esta sintaxis tienen la extensi&amp;oacute;n &lt;code&gt;.scss&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="8a26deaf0a9439c6e86ec39bb3fa8607ec5746ff" translate="yes" xml:space="preserve">
          <source>There is currently no way to catch errors.</source>
          <target state="translated">Actualmente no hay forma de detectar errores.</target>
        </trans-unit>
        <trans-unit id="35e08781e208d3af3549928c34bda4ca6736f556" translate="yes" xml:space="preserve">
          <source>There is one exception to this, though: when using &lt;a href=&quot;#interpolation_&quot;&gt;&lt;code&gt;#{}&lt;/code&gt; interpolation&lt;/a&gt;, quoted strings are unquoted. This makes it easier to use e.g. selector names in &lt;a href=&quot;#mixins&quot;&gt;mixins&lt;/a&gt;. For example:</source>
          <target state="translated">Sin embargo, hay una excepci&amp;oacute;n a esto: cuando se usa la &lt;a href=&quot;#interpolation_&quot;&gt;interpolaci&amp;oacute;n &lt;/a&gt; &lt;code&gt;#{}&lt;/code&gt; , las cadenas entre comillas no est&amp;aacute;n entrecomilladas. Esto facilita el uso, por ejemplo, de nombres de selectores en &lt;a href=&quot;#mixins&quot;&gt;mixins&lt;/a&gt; . Por ejemplo:</target>
        </trans-unit>
        <trans-unit id="20dbaee7ae0e6049cad0173a88c1ba4a30c40de1" translate="yes" xml:space="preserve">
          <source>There was no way to define private members or placeholder selectors that were inaccessible to downstream stylesheets.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="82eb3717df0020ad61d2402a572d1d55730be5fa" translate="yes" xml:space="preserve">
          <source>These operators don&amp;rsquo;t just work for strings! They can be used with any values that can be written to CSS, with a few exceptions:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3b097c3dab72faa37e38ebf74cdf858cfe6fb45c" translate="yes" xml:space="preserve">
          <source>These options affect &lt;a href=&quot;#many-to-many-mode&quot;&gt;many-to-many mode&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c05227572a6357ec4b3012292934e49cb3804f64" translate="yes" xml:space="preserve">
          <source>These options are available for all migrators.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0dd355594db8f1eb5026bc040673b5d51f4bbe6d" translate="yes" xml:space="preserve">
          <source>These options control how Sass loads it input files.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ef7ae2a9372ce8271bb3541f0d94e91316325eb9" translate="yes" xml:space="preserve">
          <source>These options control how Sass loads its input files and how it produces output files.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="10dd9f6d527c692240ebf4989eeba62d38c61af6" translate="yes" xml:space="preserve">
          <source>These options control how Sass produces output files.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b66c047e9e9ad78bc0a2546bbc62740889bf561f" translate="yes" xml:space="preserve">
          <source>These options use JavaScript callbacks to expand the functionality of Sass compilation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7ea9aa39dc5c3bedef3d7efd5836c2b8e43f3d9b" translate="yes" xml:space="preserve">
          <source>These statements can only be used at the top level of a stylesheet, or nested within a CSS statement at the top level:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fea27c3dc02e951c57770c285fb9fd953594e4c9" translate="yes" xml:space="preserve">
          <source>These statements produce CSS. They can be used anywhere except within a &lt;code&gt;@function&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8d950e2ea927a1928b9ee8e793a562a1b5b5b427" translate="yes" xml:space="preserve">
          <source>These types of statements can be used anywhere in a Sass stylesheet:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1a58582d7e3c0936698ed9917e60005f1e3ac96e" translate="yes" xml:space="preserve">
          <source>This API currently provides no way of creating a &lt;a href=&quot;values/strings#quoted&quot;&gt;quoted&lt;/a&gt; string.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="62f2e41a71d691060ac046f08fee96ede20d16ff" translate="yes" xml:space="preserve">
          <source>This API currently provides no way of distinguishing between a &lt;a href=&quot;values/strings#quoted&quot;&gt;quoted&lt;/a&gt; and &lt;a href=&quot;values/strings#unquoted&quot;&gt;unquoted&lt;/a&gt; string.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1a041603c99f20b135e1d025e99e27e8081832ea" translate="yes" xml:space="preserve">
          <source>This array of strings option provides &lt;a href=&quot;at-rules/import#load-paths&quot;&gt;load paths&lt;/a&gt; for Sass to look for imports. Earlier load paths will take precedence over later ones.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f824a5f4c71aaf76fa508508688408b5e1e19520" translate="yes" xml:space="preserve">
          <source>This behavior wasn&amp;rsquo;t very useful, since it channel-by-channel RGB arithmetic didn&amp;rsquo;t correspond well to how humans perceive color. &lt;a href=&quot;modules/color&quot;&gt;Color functions&lt;/a&gt; were added which are much more useful, and color operations were deprecated. They&amp;rsquo;re still supported in LibSass and Ruby Sass, but they&amp;rsquo;ll produce warnings and users are strongly encouraged to avoid them.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="393062f3a86260cfd89e3908eb5da02d6428b041" translate="yes" xml:space="preserve">
          <source>This can also return the number of pairs in a map.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a7c69a73969e7d7990817c39402f17797d2d227a" translate="yes" xml:space="preserve">
          <source>This can be used anywhere in a stylesheet. It can even be nested within style rules to create nested styles!</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cdb80bd6c90ed216da3aefd940259e454d1d891f" translate="yes" xml:space="preserve">
          <source>This can change the red, green, blue, saturation, value, and alpha properties. The properties are specified as keyword arguments. All arguments should be percentages between &lt;code&gt;0%&lt;/code&gt; and &lt;code&gt;100%&lt;/code&gt;.</source>
          <target state="translated">Esto puede cambiar las propiedades de rojo, verde, azul, saturaci&amp;oacute;n, valor y alfa. Las propiedades se especifican como argumentos de palabras clave. Todos los argumentos deben ser porcentajes entre &lt;code&gt;0%&lt;/code&gt; y &lt;code&gt;100%&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="6eaf8514edecd38eceb75d33a0b8c207db8941fb" translate="yes" xml:space="preserve">
          <source>This can return the following values:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9e2c17d4304cc87c1fc694bbfd2c75778c87cdc6" translate="yes" xml:space="preserve">
          <source>This can return the nth pair in a map as well.</source>
          <target state="translated">Esto también puede devolver el enésimo par en un mapa.</target>
        </trans-unit>
        <trans-unit id="7d5d8211da10fe571fd182677e98f081c6280cc4" translate="yes" xml:space="preserve">
          <source>This can return the number of pairs in a map as well.</source>
          <target state="translated">Esto puede devolver el número de pares en un mapa también.</target>
        </trans-unit>
        <trans-unit id="a8071308e261c0171947c455efd036ab5b392e9a" translate="yes" xml:space="preserve">
          <source>This can return the position of a pair in a map as well.</source>
          <target state="translated">Esto puede devolver la posición de un par en un mapa también.</target>
        </trans-unit>
        <trans-unit id="448ab533cf42f63c3d93b37aaf75e3db827f3221" translate="yes" xml:space="preserve">
          <source>This cannot provide configuration to a module that&amp;rsquo;s already been loaded, whether or not it was already loaded with configuration.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2470ec1e576bd8bfdffd93d37a0c8c8ffb1bcadf" translate="yes" xml:space="preserve">
          <source>This class represents a &lt;a href=&quot;values/booleans&quot;&gt;Sass boolean&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ec35d9eaaecbd91ad5d3c671be2f701bc9ef78f6" translate="yes" xml:space="preserve">
          <source>This class represents a &lt;a href=&quot;values/colors&quot;&gt;Sass color&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d09011ebcd78969c2878a36e8ce4bc298d76f554" translate="yes" xml:space="preserve">
          <source>This class represents a &lt;a href=&quot;values/lists&quot;&gt;Sass list&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6c4afb0aabba5307b0ecddc274c63299172dc9e5" translate="yes" xml:space="preserve">
          <source>This class represents a &lt;a href=&quot;values/maps&quot;&gt;Sass map&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1967f3e1349722685a8352787230c4240b7e0e19" translate="yes" xml:space="preserve">
          <source>This class represents a &lt;a href=&quot;values/numbers&quot;&gt;Sass number&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ca7d84bac27fa6d9dff8ed90618e050e58854643" translate="yes" xml:space="preserve">
          <source>This class represents a &lt;a href=&quot;values/strings&quot;&gt;Sass string&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e789b7f43d1e4e8d8e1d9b1ec84f49058bbdf636" translate="yes" xml:space="preserve">
          <source>This class represents the &lt;a href=&quot;values/null&quot;&gt;Sass &lt;code&gt;null&lt;/code&gt; value&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9ecaa4da7a11bff49a6a10777103a7831874c43a" translate="yes" xml:space="preserve">
          <source>This doesn&amp;rsquo;t actually use a function, but it&amp;rsquo;s still one of the most common ways to use lists. The &lt;a href=&quot;../at-rules/control/each&quot;&gt;&lt;code&gt;@each&lt;/code&gt; rule&lt;/a&gt; evaluates a block of styles for each element in a list, and assigns that element to a variable.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8644e33918a2fb396c4458617394ab090c44dffe" translate="yes" xml:space="preserve">
          <source>This doesn&amp;rsquo;t actually use a function, but it&amp;rsquo;s still one of the most common ways to use maps. The &lt;a href=&quot;../at-rules/control/each&quot;&gt;&lt;code&gt;@each&lt;/code&gt; rule&lt;/a&gt; evaluates a block of styles for each key/value pair in a map. The key and the value are assigned to variables so they can easily be accessed in the block.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="76d2e1e886dbf0b292e84944953c3b291a0fa41e" translate="yes" xml:space="preserve">
          <source>This doesn&amp;rsquo;t make any members from the loaded module available in the current module.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3145a9fe89c45897693d218f34c1456c6f180d14" translate="yes" xml:space="preserve">
          <source>This flag (abbreviated &lt;code&gt;-C&lt;/code&gt;) tells Sass not to cache parsed files at all.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cba58e5da7cf96a522bb540b339ad57565167faf" translate="yes" xml:space="preserve">
          <source>This flag (abbreviated &lt;code&gt;-c&lt;/code&gt;) tells Sass to emit &lt;a href=&quot;https://en.wikipedia.org/wiki/ANSI_escape_code#Colors&quot;&gt;terminal colors&lt;/a&gt;, and the inverse &lt;code&gt;--no-color&lt;/code&gt; tells it not to emit colors. By default, it will emit colors if it looks like it&amp;rsquo;s being run on a terminal that supports them.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="59b8db0c6f851879c91baf0a6e97c2614e836de5" translate="yes" xml:space="preserve">
          <source>This flag (abbreviated &lt;code&gt;-c&lt;/code&gt;) tells Sass to verify that the syntax of its input file is valid without executing that file. If the syntax is valid, it exits with &lt;a href=&quot;https://en.wikipedia.org/wiki/Exit_status&quot;&gt;status&lt;/a&gt; 0. It can&amp;rsquo;t be used in &lt;a href=&quot;#many-to-many-mode&quot;&gt;many-to-many mode&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ba94eb2765b012d717e240bf9fc4ef42327807a7" translate="yes" xml:space="preserve">
          <source>This flag (abbreviated &lt;code&gt;-f&lt;/code&gt;) may only be passed in &lt;a href=&quot;#many-to-many-mode&quot;&gt;many-to-many mode&lt;/a&gt;. It causes Sass files to &lt;em&gt;always&lt;/em&gt; be compiled to CSS files, instead of only being compiled when the source files are more up-to-date than the output.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0bb018de0f2666a606d2352ee84304116a8530b2" translate="yes" xml:space="preserve">
          <source>This flag (abbreviated &lt;code&gt;-g&lt;/code&gt;) causes Sass to emit dummy &lt;code&gt;@media&lt;/code&gt; queries that indicate where each style rule was defined in the source stylehseet.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ca1572ca86d7ca4546485ffae2c95c2feb7d3cd9" translate="yes" xml:space="preserve">
          <source>This flag (abbreviated &lt;code&gt;-h&lt;/code&gt; and &lt;code&gt;-?&lt;/code&gt;) prints a summary of this documentation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="026a755beccf80cc347b2cc858639f7f26bde58f" translate="yes" xml:space="preserve">
          <source>This flag (abbreviated &lt;code&gt;-h&lt;/code&gt;) prints a summary of this documentation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b985fb7aea9074824137eee30bd5515e66afcfea" translate="yes" xml:space="preserve">
          <source>This flag (abbreviated &lt;code&gt;-i&lt;/code&gt;) tells Sass to run in interactive mode, where you can write &lt;a href=&quot;../syntax/structure#expressions&quot;&gt;SassScript expressions&lt;/a&gt; and see their results. Interactive mode also supports &lt;a href=&quot;../variables&quot;&gt;variables&lt;/a&gt; and &lt;a href=&quot;../at-rules/use&quot;&gt;&lt;code&gt;@use&lt;/code&gt; rules&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d7c211daef8f069d5b4f6c3ebf373af28aae5593" translate="yes" xml:space="preserve">
          <source>This flag (abbreviated &lt;code&gt;-i&lt;/code&gt;) tells Sass to run in interactive mode, where you can write &lt;a href=&quot;../syntax/structure#expressions&quot;&gt;SassScript expressions&lt;/a&gt; and see their results. Interactive mode also supports &lt;a href=&quot;../variables&quot;&gt;variables&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="20b50e46535fbc3d6b2e5cd25f77b9d77592dc82" translate="yes" xml:space="preserve">
          <source>This flag (abbreviated &lt;code&gt;-n&lt;/code&gt;) tells the migrator not to save any changes to disk. It instead prints the list of files that it would have changed. This is commonly paired with the &lt;a href=&quot;#verbose&quot;&gt;&lt;code&gt;--verbose&lt;/code&gt; option&lt;/a&gt; to print the contents of the changes that would have been made as well.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4083b415c480872d9a15ce7ea5d8ccf78b7ada07" translate="yes" xml:space="preserve">
          <source>This flag (abbreviated &lt;code&gt;-q&lt;/code&gt;) tells Sass not to emit any warnings when compiling. By default, Sass emits warnings when deprecated features are used or when the &lt;a href=&quot;../at-rules/warn&quot;&gt;&lt;code&gt;@warn&lt;/code&gt; rule&lt;/a&gt; is encountered. It also silences the &lt;a href=&quot;../at-rules/debug&quot;&gt;&lt;code&gt;@debug&lt;/code&gt; rule&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="481e3113fa63399f20eae70eaf8d42a21d099ac4" translate="yes" xml:space="preserve">
          <source>This flag (abbreviated &lt;code&gt;-s&lt;/code&gt;) is tells Sass to read its input file from &lt;a href=&quot;https://en.wikipedia.org/wiki/Standard_streams#Standard_input_(stdin)&quot;&gt;standard input&lt;/a&gt;. When it&amp;rsquo;s passed, no input file may be passed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="938d6dfc32bd09fc6ce49b539a9b090948a44c7a" translate="yes" xml:space="preserve">
          <source>This flag (abbreviated &lt;code&gt;-v&lt;/code&gt;) tells the migrator to print extra information to the console. By default, it just prints the name of files that are changed, but when combined with the &lt;a href=&quot;#dry-run&quot;&gt;&lt;code&gt;--dry-run&lt;/code&gt; option&lt;/a&gt; it also prints those files&amp;rsquo; new contents.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1b283a36217d300f6fcb0ec4098971332e3ad019" translate="yes" xml:space="preserve">
          <source>This flag (also available as &lt;code&gt;--line-numbers&lt;/code&gt;, abbreviated as &lt;code&gt;-l&lt;/code&gt;) causes Sass to emit comments for every style rule that indicate where each style rule was defined in the source stylesheet.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cce3e0d7d2eab228413af73d4c1139ff0a33906f" translate="yes" xml:space="preserve">
          <source>This flag acts like the &lt;a href=&quot;#update&quot;&gt;&lt;code&gt;--update&lt;/code&gt; flag&lt;/a&gt;, but after the first round compilation is done Sass stays open and continues compiling stylesheets whenever they or their dependencies change.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="008f036652ed82163e6fdef4c42e5d167a8929e6" translate="yes" xml:space="preserve">
          <source>This flag causes Sass not to link from the generated CSS to the source map.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="520dda4365b641fb8f3fd0b1ef7af7bad4b10820" translate="yes" xml:space="preserve">
          <source>This flag causes Sass to emit comments for every style rule that indicate where each style rule was defined in the source stylesheet. It defaults to &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="770f83dc55da77ed6bbfbab6c47b0b88f83fb5ea" translate="yes" xml:space="preserve">
          <source>This flag controls whether source maps are generated.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a66efbc5e880a51bb21527cb2546a1532014bf38" translate="yes" xml:space="preserve">
          <source>This flag controls whether the &lt;a href=&quot;#data&quot;&gt;&lt;code&gt;data&lt;/code&gt; option&lt;/a&gt; is parsed as the &lt;a href=&quot;syntax#the-indented-syntax&quot;&gt;indented syntax&lt;/a&gt; or not. It defaults to &lt;code&gt;false&lt;/code&gt;. It has no effect on stylesheets loaded using the &lt;a href=&quot;#file&quot;&gt;&lt;code&gt;file&lt;/code&gt; option&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cdb9919ff824d6b4c8732edc39c48653df2eb814" translate="yes" xml:space="preserve">
          <source>This flag enables &lt;a href=&quot;#many-to-many-mode&quot;&gt;many-to-many mode&lt;/a&gt;, even if none of the arguments are colon-separated pairs.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4bbc13d561d74375e00461d0d2fcb0403a4c7259" translate="yes" xml:space="preserve">
          <source>This flag is an alternative way of telling Sass that it should read its input file from &lt;a href=&quot;https://en.wikipedia.org/wiki/Standard_streams#Standard_input_(stdin)&quot;&gt;standard input&lt;/a&gt;. When it&amp;rsquo;s passed, no input file may be passed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0cb1434afea68c3907e4b83e9245b440f2f0a6d1" translate="yes" xml:space="preserve">
          <source>This flag loads the &lt;a href=&quot;http://compass-style.org/&quot;&gt;Compass framework&lt;/a&gt; and makes its mixins and functions available for use in Sass.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="65b7022d96f92316215554a90b1c4a5f92a5aa93" translate="yes" xml:space="preserve">
          <source>This flag may only be passed in &lt;a href=&quot;#many-to-many-mode&quot;&gt;many-to-many mode&lt;/a&gt;. It tells Sass to stop compiling immediately when an error is detected, rather than trying to compile other Sass files that may not contain errors.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9f4221e93b16540bae9c482931cf0a247062f047" translate="yes" xml:space="preserve">
          <source>This flag only exists for backwards-compatibility. Source maps are now the recommended way of mapping CSS back to the Sass that generated it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c81c4dd7d61d0e75b5a0eacbf2ef77cde55ae4ab" translate="yes" xml:space="preserve">
          <source>This flag prints the current version of Sass.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="489139386d874cbededf45319050a1bc0b332829" translate="yes" xml:space="preserve">
          <source>This flag tells Sass never to emit a &lt;code&gt;@charset&lt;/code&gt; declaration or a UTF-8 &lt;a href=&quot;https://en.wikipedia.org/wiki/Byte_order_mark#UTF-8&quot;&gt;byte-order mark&lt;/a&gt;. By default, or if &lt;code&gt;--charset&lt;/code&gt; is passed, Sass will insert either a &lt;code&gt;@charset&lt;/code&gt; declaration (in expanded output mode) or a byte-order mark (in compressed output mode) if the stylesheet contains any non-ASCII characters.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ed118a706d7f6858b3e8cd19e01f4bbe7a9b58c1" translate="yes" xml:space="preserve">
          <source>This flag tells Sass only to emit ASCII characters to the terminal as part of error messages. By default, or if &lt;code&gt;--unicode&lt;/code&gt; is passed, Sass will emit non-ASCII characters for these messages. This flag does not affect the CSS output.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fff230b7eba99f6e2555a7fdafd47c24716ee72b" translate="yes" xml:space="preserve">
          <source>This flag tells Sass to embed the contents of the source map file in the generated CSS, rather than creating a separate file and linking to it from the CSS.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1e970be72cae8099bef28e91ebc3def905419fce" translate="yes" xml:space="preserve">
          <source>This flag tells Sass to embed the entire contents of the Sass files that contributed to the generated CSS in the source map. This may produce very large source maps, but it guarantees that the source will be available on any computer no matter how the CSS is served.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="16b114f75a5d2bf10deeb92482b12e858d673044" translate="yes" xml:space="preserve">
          <source>This flag tells Sass to generate output files with whose lines are separated with the U+000ALINEFEED character, as opposed to the operating system default (on Windows, this is U+000DCARRIAGERETURN followed by U+000ALINEFEED). It&amp;rsquo;s always true on systems that default to Unix-style newlines.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="41d18c271e854a0f47cde32ba292a5b1181ce9ce" translate="yes" xml:space="preserve">
          <source>This flag tells Sass to parse &lt;a href=&quot;https://en.wikipedia.org/wiki/Standard_streams#Standard_input_(stdin)&quot;&gt;standard input&lt;/a&gt; as &lt;a href=&quot;../syntax#scss&quot;&gt;SCSS&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="69ea66bcb32f2bbb25fb4e03965a2ea55967763d" translate="yes" xml:space="preserve">
          <source>This flag tells Sass to parse the input file as the &lt;a href=&quot;../syntax#the-indented-syntax&quot;&gt;indented syntax&lt;/a&gt;. If it&amp;rsquo;s used in &lt;a href=&quot;#many-to-many-mode&quot;&gt;many-to-many mode&lt;/a&gt;, all input files are parsed as the indented syntax, although files they &lt;a href=&quot;../at-rules/use&quot;&gt;use&lt;/a&gt; will have their syntax determined as usual. The inverse, &lt;code&gt;--no-indented&lt;/code&gt;, can be used to force all input files to be parsed as &lt;a href=&quot;../syntax#scss&quot;&gt;SCSS&lt;/a&gt; instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="261932def279e4e25bcafb9ee69ba68de17fc2cd" translate="yes" xml:space="preserve">
          <source>This flag tells Sass to print the full Dart or JavaScript stack trace when an error is encountered. It&amp;rsquo;s used by the Sass team for debugging errors.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6aee8e8f9b6873df9a0c3b6f1037565470cd184c" translate="yes" xml:space="preserve">
          <source>This flag tells Sass to print the full Ruby stack trace when an error is encountered. It&amp;rsquo;s used by the Sass team for debugging errors.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f30b97d7c89a086eb4184dcce6ad5907604121a6" translate="yes" xml:space="preserve">
          <source>This flag tells Sass to stop compiling immediately when an error is detected, rather than trying to compile other Sass files that may not contain errors. It&amp;rsquo;s mostly useful in &lt;a href=&quot;#many-to-many-mode&quot;&gt;many-to-many mode&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0e551d22518856816c9007c1610e52677c03122e" translate="yes" xml:space="preserve">
          <source>This flag tells Sass whether to emit a CSS file when an error occurs during compilation. This CSS file describes the error in a comment &lt;em&gt;and&lt;/em&gt; in the &lt;code&gt;content&lt;/code&gt; property of &lt;code&gt;body::before&lt;/code&gt;, so that you can see the error message in the browser without needing to switch back to the terminal.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="74bd5c3c493f219a5698982ea1762d9530b723f1" translate="yes" xml:space="preserve">
          <source>This flag tells the Sass migrator only to emit ASCII characters to the terminal as part of error messages. By default, or if &lt;code&gt;--unicode&lt;/code&gt; is passed, the migrator will emit non-ASCII characters for these messages. This flag does not affect the CSS output.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="092a47804096f16727719ec2d51cd484592182a2" translate="yes" xml:space="preserve">
          <source>This flag, which may only be passed along with &lt;code&gt;--watch&lt;/code&gt;, tells Sass to manually check for changes to the source files every so often instead of relying on the operating system to notify it when something changes. This may be necessary if you&amp;rsquo;re editing Sass on a remote drive where the operating system&amp;rsquo;s notification system doesn&amp;rsquo;t work.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dcba487e25a70112a116129dc10ffe7263d66e13" translate="yes" xml:space="preserve">
          <source>This function also supports the proprietary Microsoft &lt;code&gt;alpha(opacity=20)&lt;/code&gt; syntax as a special case.</source>
          <target state="translated">Esta funci&amp;oacute;n tambi&amp;eacute;n admite la sintaxis patentada &lt;code&gt;alpha(opacity=20)&lt;/code&gt; Microsoft como caso especial.</target>
        </trans-unit>
        <trans-unit id="8ab88bf70f783e7fcd01b6b5416b77e42a5ce5f6" translate="yes" xml:space="preserve">
          <source>This function asynchronously compiles a Sass file to CSS, and calls a standard Node callback with the &lt;a href=&quot;#result-object&quot;&gt;result&lt;/a&gt; or an &lt;a href=&quot;#error-object&quot;&gt;error&lt;/a&gt; when the rendering is complete. It takes an &lt;a href=&quot;#options&quot;&gt;options object&lt;/a&gt;, which must have either the &lt;a href=&quot;#file&quot;&gt;&lt;code&gt;file&lt;/code&gt; option&lt;/a&gt; or the &lt;a href=&quot;#data&quot;&gt;&lt;code&gt;data&lt;/code&gt; option&lt;/a&gt; set.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a3ec67208ac7bb6eabc68a4fc13211dcca66ecda" translate="yes" xml:space="preserve">
          <source>This function is identical to &lt;code&gt;$number * 100%&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c91f2265d2fb6814a1f9c51ca956dd838028dd10" translate="yes" xml:space="preserve">
          <source>This function is intended for debugging; its output format is not guaranteed to be consistent across Sass versions or implementations.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="edd6c3ec260853e8165e9d5f02880f2100e03896" translate="yes" xml:space="preserve">
          <source>This function is special in that it doesn&amp;rsquo;t even evaluate the argument that isn&amp;rsquo;t returned, so it&amp;rsquo;s safe to call even if the unused argument would throw an error.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6a3573a179a37f564a66c0924cf072b52d52b1fb" translate="yes" xml:space="preserve">
          <source>This function only exists as a workaround for IE7's &lt;a href=&quot;http://jes.st/2013/ie7s-css-breaking-content-counter-bug/&quot;&gt;&lt;code&gt;content: counter&lt;/code&gt; bug&lt;/a&gt;. It works identically to any other plain-CSS function, except it avoids adding spaces between the argument commas.</source>
          <target state="translated">Esta funci&amp;oacute;n solo existe como una soluci&amp;oacute;n para el &lt;a href=&quot;http://jes.st/2013/ie7s-css-breaking-content-counter-bug/&quot;&gt; &lt;code&gt;content: counter&lt;/code&gt; &lt;/a&gt; de IE7 : error de contador . Funciona de manera id&amp;eacute;ntica a cualquier otra funci&amp;oacute;n CSS simple, excepto que evita agregar espacios entre las comas de los argumentos.</target>
        </trans-unit>
        <trans-unit id="daf2b443b96645b11ed97e65e9593d416da219dd" translate="yes" xml:space="preserve">
          <source>This function synchronously compiles a Sass file to CSS. If it succeeds, it returns the &lt;a href=&quot;#result-object&quot;&gt;result&lt;/a&gt;, and if it fails it throws an &lt;a href=&quot;#error-object&quot;&gt;error&lt;/a&gt;. It takes an &lt;a href=&quot;#options&quot;&gt;options object&lt;/a&gt;, which must have either the &lt;a href=&quot;#file&quot;&gt;&lt;code&gt;file&lt;/code&gt; option&lt;/a&gt; or the &lt;a href=&quot;#data&quot;&gt;&lt;code&gt;data&lt;/code&gt; option&lt;/a&gt; set.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="becb36fdda822271a471a4076796d5427550c1dd" translate="yes" xml:space="preserve">
          <source>This helps avoid repetition of parent selectors, and makes complex CSS layouts with lots of nested selectors much simpler. For example:</source>
          <target state="translated">Esto ayuda a evitar la repetición de los selectores padres,y hace que los complejos diseños de CSS con muchos selectores anidados sean mucho más simples.Por ejemplo:</target>
        </trans-unit>
        <trans-unit id="f7c27d5f2519a24dc7dea8213d4df671fe7bff26" translate="yes" xml:space="preserve">
          <source>This integer option controls how many spaces or tabs (depending on the &lt;a href=&quot;#indenttype&quot;&gt;&lt;code&gt;indentType&lt;/code&gt; option&lt;/a&gt;) should be used per indentation level in the generated CSS. It defaults to 2, and must be between 0 and 10 (inclusive).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="34f22156c5f9aff9552abf02f175ab3d68f6556b" translate="yes" xml:space="preserve">
          <source>This integer option determines the &lt;a href=&quot;values/numbers#precision&quot;&gt;precision&lt;/a&gt; that will be used when generating CSS that includes numbers. It defaults to 5 for Node Sass.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="82958030813dcf4173ba17af6911b53aafc8dc87" translate="yes" xml:space="preserve">
          <source>This is &lt;code&gt;null&lt;/code&gt; or &lt;code&gt;undefined&lt;/code&gt; unless either</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="354efb4bef49ea8ecc4d2b7e5de75478212615f4" translate="yes" xml:space="preserve">
          <source>This is compiled to:</source>
          <target state="translated">Esto está compilado para:</target>
        </trans-unit>
        <trans-unit id="bd2971968cb63bb3ba3336da8300f448d320db3b" translate="yes" xml:space="preserve">
          <source>This is identical to &lt;a href=&quot;#adjust&quot;&gt;&lt;code&gt;color.adjust($color, $hue: 180deg)&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8d6c74d7d93db471f4634ad59a89ec9a51e20945" translate="yes" xml:space="preserve">
          <source>This is identical to &lt;a href=&quot;#change&quot;&gt;&lt;code&gt;color.change($color, $saturation: 0%)&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b35482a13bdb28379dcfca04aa43ea21461d0dd9" translate="yes" xml:space="preserve">
          <source>This is the best way to add new values to a map.</source>
          <target state="translated">Esta es la mejor manera de añadir nuevos valores a un mapa.</target>
        </trans-unit>
        <trans-unit id="98104c1defbcfa22163c726d1c7b5a22484fe2f7" translate="yes" xml:space="preserve">
          <source>This is written &lt;code&gt;@forward &quot;&amp;lt;url&amp;gt;&quot; as &amp;lt;prefix&amp;gt;-*&lt;/code&gt;, and it adds the given prefix to the beginning of every mixin, function, and variable name forwarded by the module. For example, if the module defines a member named &lt;code&gt;reset&lt;/code&gt; and it&amp;rsquo;s forwarded &lt;code&gt;as list-*&lt;/code&gt;, downstream stylesheets will refer to it as &lt;code&gt;list-reset&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="66cc39014e692b9c2ec58982e284851ffb243362" translate="yes" xml:space="preserve">
          <source>This list type&amp;rsquo;s methods use 0-based indexing, even though within Sass lists use 1-based indexing. These methods also don&amp;rsquo;t support using negative numbers to index backwards from the end of the list.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3fdbea09d23c3600fc8d38d90c5625833f167bb0" translate="yes" xml:space="preserve">
          <source>This makes it easy to convert start using &lt;code&gt;@use&lt;/code&gt; in a stylesheet even before all the libraries you depend on have converted to the new module system. Be aware, though, that if they do convert their APIs may well change!</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3e221cb98e8206a7921fde60e73a3967e13fd2b1" translate="yes" xml:space="preserve">
          <source>This map type is represented as a list of key-value pairs rather than a mapping from keys to values. The only way to find the value associated with a given key is to iterate through the map checking for that key.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d4b5297fc6c26f52ee02451883faebe1c0d4eed2" translate="yes" xml:space="preserve">
          <source>This may not always be what you want, though. If you want the &lt;code&gt;@extend&lt;/code&gt; to do nothing if the extended selector doesn&amp;rsquo;t exist, just add &lt;code&gt;!optional&lt;/code&gt; to the end.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bbb320de60e960922ca4332b4c5c60f6e3d77221" translate="yes" xml:space="preserve">
          <source>This means that &lt;code&gt;96px&lt;/code&gt; and &lt;code&gt;1in&lt;/code&gt; will return different values, even though they represent the same length.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c81188216579c60386c9bf463658b27afd3b16a4" translate="yes" xml:space="preserve">
          <source>This means that all styles defined for &lt;code&gt;.error&lt;/code&gt; are also applied to &lt;code&gt;.seriousError&lt;/code&gt;, in addition to the styles specific to &lt;code&gt;.seriousError&lt;/code&gt;. In effect, every element with class &lt;code&gt;.seriousError&lt;/code&gt; also has class &lt;code&gt;.error&lt;/code&gt;.</source>
          <target state="translated">Esto significa que todos los estilos definidos para &lt;code&gt;.error&lt;/code&gt; tambi&amp;eacute;n se aplican a &lt;code&gt;.seriousError&lt;/code&gt; , adem&amp;aacute;s de los estilos espec&amp;iacute;ficos de &lt;code&gt;.seriousError&lt;/code&gt; . En efecto, cada elemento con clase &lt;code&gt;.seriousError&lt;/code&gt; tambi&amp;eacute;n tiene clase &lt;code&gt;.error&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="7f06057a82e5b41504f1fcfaaaa0944e7b90136e" translate="yes" xml:space="preserve">
          <source>This migration converts stylesheets that use the old &lt;a href=&quot;../at-rules/import&quot;&gt;&lt;code&gt;@import&lt;/code&gt; rule&lt;/a&gt; to load dependencies so that they use the Sass module system via the &lt;a href=&quot;../at-rules/use&quot;&gt;&lt;code&gt;@use&lt;/code&gt; rule&lt;/a&gt; instead. It doesn&amp;rsquo;t just na&amp;iuml;vely change &lt;code&gt;@import&lt;/code&gt;s to &lt;code&gt;@use&lt;/code&gt;s&amp;mdash;it updates stylesheets intelligently so that they keep working the same way they did before, including:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d2cc90c66d823a4240b48018c1fbef57a01492db" translate="yes" xml:space="preserve">
          <source>This option (abbreviated &lt;code&gt;-E&lt;/code&gt;) controls the default &lt;a href=&quot;https://en.wikipedia.org/wiki/Character_encoding&quot;&gt;character encoding&lt;/a&gt; that Sass will use to load source files that don&amp;rsquo;t &lt;a href=&quot;../syntax/parsing#input-encoding&quot;&gt;explicitly specify&lt;/a&gt; a character encoding. It defaults to the operating system&amp;rsquo;s default encoding.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="68c01aa4a878cbdaf03b04a511a81fd78f16f841" translate="yes" xml:space="preserve">
          <source>This option (abbreviated &lt;code&gt;-I&lt;/code&gt;) adds an additional &lt;a href=&quot;../at-rules/use#load-paths&quot;&gt;load path&lt;/a&gt; for Sass to look for stylesheets. It can be passed multiple times to provide multiple load paths. Earlier load paths will take precedence over later ones.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="40df9e52efc93c154e3c66293c74a56a82b46a41" translate="yes" xml:space="preserve">
          <source>This option (abbreviated &lt;code&gt;-I&lt;/code&gt;) tells the migrator a &lt;a href=&quot;../at-rules/use#load-paths&quot;&gt;load path&lt;/a&gt; where it should look for stylesheets. It can be passed multiple times to provide multiple load paths. Earlier load paths will take precedence over later ones.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1eb6566934c4d48b5b2e54badec7e20e5a08cdfc" translate="yes" xml:space="preserve">
          <source>This option (abbreviated &lt;code&gt;-d&lt;/code&gt;) tells the migrator to change not just the stylesheets that are explicitly passed on the command line, but also any stylesheets that they depend on using the &lt;a href=&quot;../at-rules/use&quot;&gt;&lt;code&gt;@use&lt;/code&gt; rule&lt;/a&gt;, &lt;a href=&quot;../at-rules/forward&quot;&gt;&lt;code&gt;@forward&lt;/code&gt; rule&lt;/a&gt;, or &lt;a href=&quot;../at-rules/import&quot;&gt;&lt;code&gt;@import&lt;/code&gt; rule&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a30ca8a9fed1c579edd78e22f1aa5fa313051f20" translate="yes" xml:space="preserve">
          <source>This option (abbreviated &lt;code&gt;-p&lt;/code&gt;) takes an identifier prefix to remove from the beginning of all variable, mixin, and function names when they&amp;rsquo;re migrated. Members that don&amp;rsquo;t start with this prefix will remain unchanged.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="351b9ff8d5b293705fd9f9b352bcec3be172918d" translate="yes" xml:space="preserve">
          <source>This option (abbreviated &lt;code&gt;-r&lt;/code&gt;) loads a &lt;a href=&quot;https://rubygems.org/&quot;&gt;Ruby gem&lt;/a&gt; before running Sass. It can be used to load functions defined in Ruby into your Sass environment.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c31966521c62023c72dfe6e82e1289f60ffd7794" translate="yes" xml:space="preserve">
          <source>This option (abbreviated &lt;code&gt;-s&lt;/code&gt;) controls the output style of the resulting CSS. Dart Sass supports two output styles:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e933d89a8c2346341280fafa03084c4579c2c4bd" translate="yes" xml:space="preserve">
          <source>This option (abbreviated &lt;code&gt;-t&lt;/code&gt;) controls the output style of the resulting CSS. Ruby Sass supports four output styles:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aa47431b1a0a7c2b08d798b7e2cd93cf6145e46f" translate="yes" xml:space="preserve">
          <source>This option controls how Sass generates source maps, which are files that tell browsers or other tools that consume CSS how that CSS corresponds to the Sass files from which it was generated. They make it possible to see and even edit your Sass files in browsers. See instructions for using source maps in &lt;a href=&quot;https://developers.google.com/web/tools/chrome-devtools/javascript/source-maps&quot;&gt;Chrome&lt;/a&gt; and &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Tools/Style_Editor#Source_map_support&quot;&gt;Firefox&lt;/a&gt;. It has four possible values:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f705d47660fd87b5e100093f85edbb0055e3715b" translate="yes" xml:space="preserve">
          <source>This option controls how the source maps that Sass generates link back to the Sass files that contributed to the generated CSS. Dart Sass supports two types of URLs:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="98a6d64e316376be8102c627ffed4c42e5800314" translate="yes" xml:space="preserve">
          <source>This option defines additional built-in Sass functions that are available in all stylesheets. It&amp;rsquo;s an object whose keys are Sass function signatures and whose values are JavaScript functions. Each function should take the same arguments as its signature. If the signature takes &lt;a href=&quot;at-rules/function#taking-arbitrary-arguments&quot;&gt;arbitrary arguments&lt;/a&gt;, the JavaScript function should take a single argument.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c44c0b48314a6840f72e6d98c7a87086a22e1110" translate="yes" xml:space="preserve">
          <source>This option defines one or more additional handlers for loading files when a &lt;a href=&quot;at-rules/use&quot;&gt;&lt;code&gt;@use&lt;/code&gt; rule&lt;/a&gt; or an &lt;a href=&quot;at-rules/import&quot;&gt;&lt;code&gt;@import&lt;/code&gt; rule&lt;/a&gt; is encountered. It can either be a single JavaScript function, or an array of functions. These functions are always passed two arguments:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9ef78e8ebc3e7bdba4cad7cfb89eb248d4c3ddb9" translate="yes" xml:space="preserve">
          <source>This option is allowed, but will have no effect, when using Node Sass or when using the &lt;code&gt;renderSync()&lt;/code&gt; function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8acd15d7d66acae93362e5789441c0092a2d064b" translate="yes" xml:space="preserve">
          <source>This option isn&amp;rsquo;t supported by Dart Sass, because source maps are recommended as the best way of determining where a style rule is defined.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="53ef4f19a4cd9dd3d9ed890bf9aa51ee7a491b09" translate="yes" xml:space="preserve">
          <source>This option may be passed multiple times, or with multiple values separated by commas. Each prefix will be removed from any members that have it. If a member matches multiple prefixes, the longest matching prefix will be removed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1a73d0b6760b165e6ce4434e66962afbfab91869" translate="yes" xml:space="preserve">
          <source>This option tells Sass how many digits of &lt;a href=&quot;../values/numbers#precision&quot;&gt;precision&lt;/a&gt; to use when emitting decimal numbers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fa81c495129da0136ccaa79b312184373578f890" translate="yes" xml:space="preserve">
          <source>This option tells Sass where to store its cache of parsed files, so it can run faster in future invocations. It defaults to &lt;code&gt;.sass-cache&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4c6bd2913b8cf5c4b140be8024cfc59d5c863d38" translate="yes" xml:space="preserve">
          <source>This option tells the migrator which members to forward using the &lt;a href=&quot;../at-rules/forward&quot;&gt;&lt;code&gt;@forward&lt;/code&gt; rule&lt;/a&gt;. It supports the following settings:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8509229a012c8bd7dc34ab68217fc98fbefbea4c" translate="yes" xml:space="preserve">
          <source>This string option controls the output style of the resulting CSS. There are four possible output styles:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f58fc9cbc010789c328210a7c6cdc61a5c02463c" translate="yes" xml:space="preserve">
          <source>This string option controls what character sequence is used at the end of each line in the generated CSS. It can have the following values:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1b459312d3b18bd16169ce05d7c25272833f4e31" translate="yes" xml:space="preserve">
          <source>This string option determines whether the generated CSS should use spaces (with the value &lt;code&gt;&quot;space&quot;&lt;/code&gt;) or tabs (with the value &lt;code&gt;&quot;tab&quot;&lt;/code&gt;) for indentation. It defaults to &lt;code&gt;&quot;space&quot;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="81d6d6fc32e183a1183288282bf71d1854c3d3b6" translate="yes" xml:space="preserve">
          <source>This string option is prepended to all the links from the source map to the Sass source files.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2c96e029983830e06b1455d34eecdbc80371b397" translate="yes" xml:space="preserve">
          <source>This string option is the location that Sass expects the generated CSS to be saved to. It&amp;rsquo;s used to determine the URL used to link from the generated CSS to the source map, and &lt;em&gt;from&lt;/em&gt; the source map to the Sass source files.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="45028baa6be17d2a72664c3a38a4df0af9b7562d" translate="yes" xml:space="preserve">
          <source>This string option is the path to the file for Sass to load and compile. If the file&amp;rsquo;s extension is &lt;code&gt;.scss&lt;/code&gt;, it will be parsed as &lt;a href=&quot;syntax#scss&quot;&gt;SCSS&lt;/a&gt;; if it&amp;rsquo;s &lt;code&gt;.sass&lt;/code&gt;, it will be parsed as the &lt;a href=&quot;syntax#the-indented-syntax&quot;&gt;indented syntax&lt;/a&gt;; and if it&amp;rsquo;s &lt;code&gt;.css&lt;/code&gt;, it will be parsed as &lt;a href=&quot;at-rules/import#importing-css&quot;&gt;plain CSS&lt;/a&gt;. If it has no extension, it will be parsed as SCSS.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d219e3904d30ed2ba0b59639aaa6c8472d320ff6" translate="yes" xml:space="preserve">
          <source>This string option provides the contents of the stylesheet to compile. Unless the &lt;a href=&quot;#file&quot;&gt;&lt;code&gt;file&lt;/code&gt; option&lt;/a&gt; is passed as well, the stylesheet&amp;rsquo;s URL is set to &lt;code&gt;&quot;stdin&quot;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2d08f0562a4fe34e5c5501a0c25d0bb8dbdba77d" translate="yes" xml:space="preserve">
          <source>This uses the &lt;a href=&quot;../at-rules/extend&quot;&gt;&lt;code&gt;@extend&lt;/code&gt; rule&lt;/a&gt;&amp;rsquo;s &lt;a href=&quot;../at-rules/extend#how-it-works&quot;&gt;intelligent unification&lt;/a&gt; to make sure &lt;code&gt;$replacement&lt;/code&gt; is seamlessly integrated into &lt;code&gt;$selector&lt;/code&gt;. If &lt;code&gt;$selector&lt;/code&gt; doesn&amp;rsquo;t contain &lt;code&gt;$original&lt;/code&gt;, returns it as-is.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="545791d74954d8abe66caac2fc59ede691f8aa64" translate="yes" xml:space="preserve">
          <source>This will only evaluate the given module once, even if it&amp;rsquo;s loaded multiple times in different ways.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b1a72864e0bd50d769e6dea5e5ce673bba1458c1" translate="yes" xml:space="preserve">
          <source>This works by using &lt;code&gt;@extend&lt;/code&gt; and throwing away the original selector. This means that it can be used to do very advanced replacements; see the examples below.</source>
          <target state="translated">Esto funciona usando &lt;code&gt;@extend&lt;/code&gt; y desechando el selector original. Esto significa que se puede utilizar para realizar reemplazos muy avanzados; vea los ejemplos a continuaci&amp;oacute;n.</target>
        </trans-unit>
        <trans-unit id="fde2343337cbb8bf9b90da7e0ff1431427016760" translate="yes" xml:space="preserve">
          <source>Throws an error if called outside of a mixin.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e5cbb065759288edecad2c65efb1b31b56a60f88" translate="yes" xml:space="preserve">
          <source>To enable Sass in Merb, add the following line to &lt;code&gt;config/dependencies.rb&lt;/code&gt;:</source>
          <target state="translated">Para habilitar Sass en Merb, agregue la siguiente l&amp;iacute;nea a &lt;code&gt;config/dependencies.rb&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="5d0729184767803da147daf282f65d916eb3027e" translate="yes" xml:space="preserve">
          <source>To enable Sass in Rails versions before Rails 3, add the following line to &lt;code&gt;environment.rb&lt;/code&gt;:</source>
          <target state="translated">Para habilitar las versiones de Sass in Rails anteriores a Rails 3, agregue la siguiente l&amp;iacute;nea a &lt;code&gt;environment.rb&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="16af8bdd69375a45a6eaabb6d2429473b658ecb7" translate="yes" xml:space="preserve">
          <source>To enable Sass in a Rack application, add the following lines to &lt;code&gt;config.ru&lt;/code&gt;.</source>
          <target state="translated">Para habilitar Sass en una aplicaci&amp;oacute;n Rack, agregue las siguientes l&amp;iacute;neas a &lt;code&gt;config.ru&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="2d48f9832eda1e4b352dca419f4d8b94e22a5ed7" translate="yes" xml:space="preserve">
          <source>To ensure that stylesheets work on every operating system, Sass imports files by &lt;em&gt;URL&lt;/em&gt;, not by &lt;em&gt;file path&lt;/em&gt;. This means you need to use forward slashes, not backslashes, even when you&amp;rsquo;re on Windows.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f8d5853cb0db6b839240fc7067de4871071f153d" translate="yes" xml:space="preserve">
          <source>To ensure that stylesheets work on every operating system, Sass loads files by &lt;em&gt;URL&lt;/em&gt;, not by &lt;em&gt;file path&lt;/em&gt;. This means you need to use forward slashes, not backslashes, even on Windows.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="24104d743ce156119c7b4c8d0844608f2e0d9ad9" translate="yes" xml:space="preserve">
          <source>To explicitly specify the encoding of your stylesheet, use a &lt;code&gt;@charset&lt;/code&gt; declaration just like in CSS. Add &lt;code&gt;@charset &quot;encoding-name&quot;;&lt;/code&gt; at the beginning of the stylesheet (before any whitespace or comments) and Sass will interpret it as the given encoding. Note that whatever encoding you use, it must be convertible to Unicode.</source>
          <target state="translated">Para especificar expl&amp;iacute;citamente la codificaci&amp;oacute;n de su hoja de estilo, use una declaraci&amp;oacute;n &lt;code&gt;@charset&lt;/code&gt; como en CSS. Agregue &lt;code&gt;@charset &quot;encoding-name&quot;;&lt;/code&gt; al comienzo de la hoja de estilo (antes de cualquier espacio en blanco o comentarios) y Sass lo interpretar&amp;aacute; como la codificaci&amp;oacute;n dada. Tenga en cuenta que cualquier codificaci&amp;oacute;n que utilice, debe ser convertible a Unicode.</target>
        </trans-unit>
        <trans-unit id="708a54b9a1991506dc324585e8d8c1e2bf6ad675" translate="yes" xml:space="preserve">
          <source>To help you work with nested maps, some map functions support deep operations. For example, if you pass multiple keys to &lt;code&gt;map.get()&lt;/code&gt;, it will follow those keys to find the desired nested map:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="56703fbca11248f0b2bdf6c377b490bcccf84fef" translate="yes" xml:space="preserve">
          <source>To load a module with configuration, write &lt;code&gt;@use &amp;lt;url&amp;gt; with (&amp;lt;variable&amp;gt;: &amp;lt;value&amp;gt;, &amp;lt;variable&amp;gt;: &amp;lt;value&amp;gt;)&lt;/code&gt;. The configured values will override the variables&amp;rsquo; default values. Only variables written at the top level of the stylesheet with a &lt;code&gt;!default&lt;/code&gt; flag can be configured.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4700448ab20b7b5bddd738a4a176c18a266ac776" translate="yes" xml:space="preserve">
          <source>To make this easier, Sass also supports &lt;em&gt;import-only files&lt;/em&gt;. If you name a file &lt;code&gt;&amp;lt;name&amp;gt;.import.scss&lt;/code&gt;, it will only be loaded for imports, not for &lt;code&gt;@use&lt;/code&gt;s. This way, you can retain compatibility for &lt;code&gt;@import&lt;/code&gt; users while still providing a nice API for users of the new module system.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2a73d12abde4b58b4eaa56bb3215149ea76d6023" translate="yes" xml:space="preserve">
          <source>To make this possible, Sass provides the &lt;code&gt;!default&lt;/code&gt; flag. This assigns a value to a variable &lt;em&gt;only if&lt;/em&gt; that variable isn&amp;rsquo;t defined or its value is &lt;a href=&quot;values/null&quot;&gt;&lt;code&gt;null&lt;/code&gt;&lt;/a&gt;. Otherwise, the existing value will be used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="de06f9c502e4b3a7ffd0a3aad024b2ec4db54a94" translate="yes" xml:space="preserve">
          <source>To run Sass from the command line, just use</source>
          <target state="translated">Para ejecutar Sass desde la línea de comando,sólo usa</target>
        </trans-unit>
        <trans-unit id="72fe2963a498fec5325682da190f5643827f2e5c" translate="yes" xml:space="preserve">
          <source>To use the Sass migrator, tell it &lt;a href=&quot;#migrations&quot;&gt;which migration&lt;/a&gt; you want to run and what Sass files you want to migrate:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d123a8228b0a744cf53e7a8a514533230368d6dd" translate="yes" xml:space="preserve">
          <source>Top-Level Statements</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7012e685210c7d03883f55753c7a5d74cf85f50a" translate="yes" xml:space="preserve">
          <source>Trailing Commas</source>
          <target state="translated">Comas de arrastre</target>
        </trans-unit>
        <trans-unit id="4dc570712796d1d30cb56fc1e8aa44450bbca7cc" translate="yes" xml:space="preserve">
          <source>Trigonometric Functions</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="caed6e0171f434a95e774f963eaf8636e990320e" translate="yes" xml:space="preserve">
          <source>Truthiness and Falsiness</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="be4c6f650182af9a4487d0aef4c894ed7255e95f" translate="yes" xml:space="preserve">
          <source>Unary Operators</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7b7d44c14475d66e338dbc16f27abd28b9cd8e9c" translate="yes" xml:space="preserve">
          <source>Unfortunately, &lt;a href=&quot;../interpolation&quot;&gt;interpolation&lt;/a&gt; removes quotes from strings, which makes it difficult to use quoted strings as values for custom properties when they come from Sass variables. As a workaround, you can use the &lt;a href=&quot;../modules/meta#inspect&quot;&gt;&lt;code&gt;meta.inspect()&lt;/code&gt; function&lt;/a&gt; to preserve the quotes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1ad44dbaa4831c5a7c1830010ae4c038f6307e75" translate="yes" xml:space="preserve">
          <source>Unfortunately, the migrator does not support custom importers, but it does have built-in support for resolving URLs starting with &lt;code&gt;~&lt;/code&gt; by searching in &lt;code&gt;node_modules&lt;/code&gt;, similar to &lt;a href=&quot;https://github.com/webpack-contrib/sass-loader#resolving-import-at-rules&quot;&gt;what Webpack supports&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="800433e4e83820c982f054958922fa1bc7ca5d6b" translate="yes" xml:space="preserve">
          <source>Unfortunately, this means that we have to always remember to use &lt;code&gt;.error&lt;/code&gt; with &lt;code&gt;.seriousError&lt;/code&gt;. This is a maintenance burden, leads to tricky bugs, and can bring non-semantic style concerns into the markup.</source>
          <target state="translated">Desafortunadamente, esto significa que siempre debemos recordar usar &lt;code&gt;.error&lt;/code&gt; con &lt;code&gt;.seriousError&lt;/code&gt; . Esta es una carga de mantenimiento, conduce a errores complicados y puede traer preocupaciones de estilo no sem&amp;aacute;ntico en el marcado.</target>
        </trans-unit>
        <trans-unit id="f9bcf9e83d2a79206f3f81d3f7ee3a998e877475" translate="yes" xml:space="preserve">
          <source>Unifies two selectors into a single selector that matches only elements matched by both input selectors. Returns &lt;code&gt;null&lt;/code&gt; if there is no such selector.</source>
          <target state="translated">Unifica dos selectores en un solo selector que coincide solo con los elementos que coinciden con ambos selectores de entrada. Devuelve &lt;code&gt;null&lt;/code&gt; si no existe tal selector.</target>
        </trans-unit>
        <trans-unit id="145ca07decf4a005fc7b4223bf113eafd0c159a5" translate="yes" xml:space="preserve">
          <source>Unit Functions</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a20f2c0123b9a570feed93bcf0287608c8fcd4ab" translate="yes" xml:space="preserve">
          <source>Unitless numbers can be compared with any number. They&amp;rsquo;re automatically converted to that number&amp;rsquo;s unit.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ff92b0795ba3b810a6fc98a6cbdc208467bfe06b" translate="yes" xml:space="preserve">
          <source>Unitless numbers can be used with numbers of any unit.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="12748281e0f02357f2a2f65c1c6a7d01ee122506" translate="yes" xml:space="preserve">
          <source>Units</source>
          <target state="translated">Units</target>
        </trans-unit>
        <trans-unit id="674a459914b321a7319cdedafb8ad0a73245d853" translate="yes" xml:space="preserve">
          <source>Universal Statements</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="872ca4c8eab59b0dd849420e210e766c26422591" translate="yes" xml:space="preserve">
          <source>Unless &lt;code&gt;$bracketed&lt;/code&gt; is passed, the resulting list is bracketed if the first parameter is.</source>
          <target state="translated">A menos que se pase &lt;code&gt;$bracketed&lt;/code&gt; , la lista resultante se pone entre corchetes si el primer par&amp;aacute;metro es.</target>
        </trans-unit>
        <trans-unit id="56dd328feb200abd01d0a7e6a97e6981481b2fe3" translate="yes" xml:space="preserve">
          <source>Unless &lt;code&gt;$separator&lt;/code&gt; is passed, if one list is comma-separated and one is space-separated, the first parameter's separator is used for the resulting list. If both lists have fewer than two items, spaces are used for the resulting list.</source>
          <target state="translated">A menos que se pase &lt;code&gt;$separator&lt;/code&gt; , si una lista est&amp;aacute; separada por comas y otra separada por espacios, el separador del primer par&amp;aacute;metro se usa para la lista resultante. Si ambas listas tienen menos de dos elementos, se utilizan espacios para la lista resultante.</target>
        </trans-unit>
        <trans-unit id="1363117536b31421047d80acd67a6865cb2a2442" translate="yes" xml:space="preserve">
          <source>Unless &lt;code&gt;content-exists()&lt;/code&gt; is called directly from a mixin, an error will be raised.</source>
          <target state="translated">A menos que se llame a &lt;code&gt;content-exists()&lt;/code&gt; directamente desde un mixin, se generar&amp;aacute; un error.</target>
        </trans-unit>
        <trans-unit id="76ff0ed4ac7d80876eaa702113778227c4cc8f99" translate="yes" xml:space="preserve">
          <source>Unless the &lt;code&gt;$separator&lt;/code&gt; argument is passed, if the list had only one item, the resulting list will be space-separated.</source>
          <target state="translated">A menos que se pase el argumento &lt;code&gt;$separator&lt;/code&gt; , si la lista tiene solo un elemento, la lista resultante estar&amp;aacute; separada por espacios.</target>
        </trans-unit>
        <trans-unit id="03700045476b208aa94420bb227309caff53b89c" translate="yes" xml:space="preserve">
          <source>Unlike &lt;a href=&quot;mixin&quot;&gt;mixins&lt;/a&gt;, which copy styles into the current style rule, &lt;code&gt;@extend&lt;/code&gt; updates style rules that contain the extended selector so that they contain the extending selector as well. When extending selectors, Sass does &lt;em&gt;intelligent unification&lt;/em&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dd99d83979ddae906c6089d467e3a623d0862a94" translate="yes" xml:space="preserve">
          <source>Unlike languages like JavaScript, Sass uses words rather than symbols for its &lt;a href=&quot;../values/booleans&quot;&gt;boolean&lt;/a&gt; operators.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0a6bc63d843eef7902dbce3c20323a9013b9c162" translate="yes" xml:space="preserve">
          <source>Unlike lists, maps must always be surrounded by parentheses and must always be comma-separated. Both the keys and values in maps can be any SassScript object. A map may only have one value associated with a given key (although that value may be a list). A given value may be associated with many keys, though.</source>
          <target state="translated">A diferencia de las listas,los mapas siempre deben estar rodeados de paréntesis y siempre deben estar separados por comas.Tanto las claves como los valores de los mapas pueden ser cualquier objeto SassScript.Un mapa sólo puede tener un valor asociado a una clave determinada (aunque ese valor puede ser una lista).Sin embargo,un valor dado puede estar asociado a muchas claves.</target>
        </trans-unit>
        <trans-unit id="28201693f03d1e9150ecab32994e775dd9a12c3d" translate="yes" xml:space="preserve">
          <source>Unlike most selector functions, &lt;code&gt;selector-nest&lt;/code&gt; allows the parent selector &lt;code&gt;&amp;amp;&lt;/code&gt; to be used in any selector but the first.</source>
          <target state="translated">A diferencia de la mayor&amp;iacute;a de las funciones de selector, &lt;code&gt;selector-nest&lt;/code&gt; permite que el selector padre &lt;code&gt;&amp;amp;&lt;/code&gt; se use en cualquier selector excepto en el primero.</target>
        </trans-unit>
        <trans-unit id="551837b66646048d4b86ccfc46a3d42e1edc7d86" translate="yes" xml:space="preserve">
          <source>Unlike some other languages, Sass doesn&amp;rsquo;t require that you use &lt;code&gt;./&lt;/code&gt; for relative imports. Relative imports are always available.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f744b797c0dc9fec0ca998b0a785f44273c6e256" translate="yes" xml:space="preserve">
          <source>Unquoted</source>
          <target state="translated">Unquoted</target>
        </trans-unit>
        <trans-unit id="47e6566a6faff9be13195d1e7518a595fbf5e3dd" translate="yes" xml:space="preserve">
          <source>Unquoted strings are written as CSS&lt;a href=&quot;https://drafts.csswg.org/css-syntax-3/#ident-token-diagram&quot;&gt;identifiers&lt;/a&gt;, following the syntax diagram below. They may include &lt;a href=&quot;../interpolation&quot;&gt;interpolation&lt;/a&gt; anywhere.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0bb18642b70b9f8a9c12ccf39487328f306b8e19" translate="yes" xml:space="preserve">
          <source>Usage</source>
          <target state="translated">Usage</target>
        </trans-unit>
        <trans-unit id="9629fc5be7eebf84f66a1a4fe14d7eee29fbc498" translate="yes" xml:space="preserve">
          <source>Usage Example:</source>
          <target state="translated">Ejemplo de uso:</target>
        </trans-unit>
        <trans-unit id="5253f44b019d85657e950f8f9ef36c011d7df44a" translate="yes" xml:space="preserve">
          <source>Use &lt;a href=&quot;#append&quot;&gt;&lt;code&gt;list.append()&lt;/code&gt;&lt;/a&gt; instead to add a single value to a list. Only use &lt;code&gt;list.join()&lt;/code&gt; to combine two lists together into one.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="936edae5d2de4429a13dfc88fb76048edb5d8873" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;sass --help&lt;/code&gt; for full documentation.</source>
          <target state="translated">Utilice &lt;code&gt;sass --help&lt;/code&gt; para obtener la documentaci&amp;oacute;n completa.</target>
        </trans-unit>
        <trans-unit id="72a3ab63eb244754d6a277a8c18c9d671df5562a" translate="yes" xml:space="preserve">
          <source>User-created importers must inherit from &lt;a href=&quot;http://sass-lang.com/documentation/Sass/Importers/Base.html&quot;&gt;Sass::Importers::Base&lt;/a&gt;.</source>
          <target state="translated">Los importadores creados por el usuario deben heredar de &lt;a href=&quot;http://sass-lang.com/documentation/Sass/Importers/Base.html&quot;&gt;Sass :: Importers :: Base&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="f68d8b77e8f10448a25ffec622ba4c62ca6e4441" translate="yes" xml:space="preserve">
          <source>User-defined functions also support &lt;a href=&quot;#variable_arguments&quot;&gt;variable arguments&lt;/a&gt; in the same way as mixins.</source>
          <target state="translated">Las funciones definidas por el usuario tambi&amp;eacute;n admiten &lt;a href=&quot;#variable_arguments&quot;&gt;argumentos variables&lt;/a&gt; de la misma forma que los mixins.</target>
        </trans-unit>
        <trans-unit id="f829b8497ac4cecc133647d21b9e7ab12512cc02" translate="yes" xml:space="preserve">
          <source>Users can define their own Sass functions using the Ruby API. For more information, see the &lt;a href=&quot;sass/script/functions#adding_custom_functions&quot;&gt;source documentation&lt;/a&gt;.</source>
          <target state="translated">Los usuarios pueden definir sus propias funciones de Sass utilizando la API de Ruby. Para obtener m&amp;aacute;s informaci&amp;oacute;n, consulte la &lt;a href=&quot;sass/script/functions#adding_custom_functions&quot;&gt;documentaci&amp;oacute;n de origen&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="8d723d10f9bd0508705580ce55ade8956c38bbce" translate="yes" xml:space="preserve">
          <source>Users occasionally want to use interpolation to define a variable name based on another variable. Sass doesn&amp;rsquo;t allow this, because it makes it much harder to tell at a glance which variables are defined where. What you &lt;em&gt;can&lt;/em&gt; do, though, is define a &lt;a href=&quot;values/maps&quot;&gt;map&lt;/a&gt; from names to values that you can then access using variables.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0657ce5b13a9064f9e46d1f3e7526bfff9804ecf" translate="yes" xml:space="preserve">
          <source>Uses the value passed for each keyword argument in place of the corresponding property of the color, and returns the changed color. It&amp;rsquo;s an error to specify an RGB property (&lt;code&gt;$red&lt;/code&gt;, &lt;code&gt;$green&lt;/code&gt;, and/or &lt;code&gt;$blue&lt;/code&gt;) at the same time as an HSL property (&lt;code&gt;$hue&lt;/code&gt;, &lt;code&gt;$saturation&lt;/code&gt;, and/or &lt;code&gt;$lightness&lt;/code&gt;), or either of those at the same time as an &lt;a href=&quot;https://en.wikipedia.org/wiki/HWB_color_model&quot;&gt;HWB&lt;/a&gt; property (&lt;code&gt;$hue&lt;/code&gt;, &lt;code&gt;$whiteness&lt;/code&gt;, and/or &lt;code&gt;$blackness&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bb771266dd60384fa6e5f8ca9918cefcb5350d48" translate="yes" xml:space="preserve">
          <source>Using Booleans</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5bd2ddfea3ed5ca85c4c809297e5606f9b9fb7fe" translate="yes" xml:space="preserve">
          <source>Using Lists</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0b5599b18b26956af6df0d8513851d1358a34b31" translate="yes" xml:space="preserve">
          <source>Using Maps</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a0ed3c8ffbb485bdcff1600b6b717d9db053867b" translate="yes" xml:space="preserve">
          <source>Using Sass</source>
          <target state="translated">Usando a Sass</target>
        </trans-unit>
        <trans-unit id="6c9f5242fbc04bc1bf0061d659bc4abf5c91fc15" translate="yes" xml:space="preserve">
          <source>Using Sass in Ruby code is very simple. After installing the Sass gem, you can use it by running &lt;code&gt;require &quot;sass&quot;&lt;/code&gt; and using &lt;a href=&quot;http://sass-lang.com/documentation/Sass/Engine.html&quot;&gt;Sass::Engine&lt;/a&gt; like so:</source>
          <target state="translated">Usar Sass en c&amp;oacute;digo Ruby es muy simple. Despu&amp;eacute;s de instalar la gema Sass, puede usarla ejecutando &lt;code&gt;require &quot;sass&quot;&lt;/code&gt; y usando &lt;a href=&quot;http://sass-lang.com/documentation/Sass/Engine.html&quot;&gt;Sass :: Engine&lt;/a&gt; as&amp;iacute;:</target>
        </trans-unit>
        <trans-unit id="0701d51e2238471096af133360d47b98e784ca3c" translate="yes" xml:space="preserve">
          <source>Value Types</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b1564f6b1512cbfa3cfcebc9a5badb6b239954f1" translate="yes" xml:space="preserve">
          <source>Values</source>
          <target state="translated">Values</target>
        </trans-unit>
        <trans-unit id="52941da9a3b3b2fc5e211993b41384faa81f65d4" translate="yes" xml:space="preserve">
          <source>Variable Arguments</source>
          <target state="translated">Argumentos variables</target>
        </trans-unit>
        <trans-unit id="ca4cab7a39afeea82a57b9d1ddd82f67a9f0f9d8" translate="yes" xml:space="preserve">
          <source>Variable Defaults: &lt;code&gt;!default&lt;/code&gt;</source>
          <target state="translated">Valores predeterminados de variables:! &lt;code&gt;!default&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="2a993f0ecb978e6d4f6c3f1eca6b0e43b6692410" translate="yes" xml:space="preserve">
          <source>Variable Scope and Content Blocks</source>
          <target state="translated">Bloques de alcance y contenido variables</target>
        </trans-unit>
        <trans-unit id="34762da26e1639d54b003cb20434ff57de97fb21" translate="yes" xml:space="preserve">
          <source>Variable arguments also contain any keyword arguments passed to the mixin or function. These can be accessed using the &lt;a href=&quot;sass/script/functions#keywords-instance_method&quot;&gt;&lt;code&gt;keywords($args)&lt;/code&gt; function&lt;/a&gt;, which returns them as a map from strings (without &lt;code&gt;$&lt;/code&gt;) to values.</source>
          <target state="translated">Los argumentos variables tambi&amp;eacute;n contienen cualquier argumento de palabra clave pasado al mixin o funci&amp;oacute;n. Se puede acceder usando las &lt;a href=&quot;sass/script/functions#keywords-instance_method&quot;&gt; &lt;code&gt;keywords($args)&lt;/code&gt; de funci&amp;oacute;n&lt;/a&gt; , que devuelve como un mapa de cuerdas (sin &lt;code&gt;$&lt;/code&gt; ) a los valores.</target>
        </trans-unit>
        <trans-unit id="12bec1e6f5c7b6f13ec79c6d010470c778844034" translate="yes" xml:space="preserve">
          <source>Variable arguments can also be used when calling a mixin. Using the same syntax, you can expand a list of values so that each value is passed as a separate argument, or expand a map of values so that each pair is treated as a keyword argument. For example:</source>
          <target state="translated">También se pueden usar argumentos variables cuando se llama a un mixin.Utilizando la misma sintaxis,se puede expandir una lista de valores para que cada valor se pase como un argumento separado,o expandir un mapa de valores para que cada par se trate como un argumento de palabra clave.Por ejemplo:</target>
        </trans-unit>
        <trans-unit id="ac018db1f7b00972061adff843d37497d8ee153c" translate="yes" xml:space="preserve">
          <source>Variables</source>
          <target state="translated">Variables</target>
        </trans-unit>
        <trans-unit id="d8f6a1442eaa82ed2ef7bd36ce68687125894980" translate="yes" xml:space="preserve">
          <source>Variables are only available within the level of nested selectors where they're defined. If they're defined outside of any nested selectors, they're available everywhere. They can also be defined with the &lt;code&gt;!global&lt;/code&gt; flag, in which case they're also available everywhere. For example:</source>
          <target state="translated">Las variables solo est&amp;aacute;n disponibles dentro del nivel de selectores anidados donde est&amp;aacute;n definidas. Si se definen fuera de los selectores anidados, est&amp;aacute;n disponibles en todas partes. Tambi&amp;eacute;n se pueden definir con la bandera &lt;code&gt;!global&lt;/code&gt; , en cuyo caso tambi&amp;eacute;n est&amp;aacute;n disponibles en todas partes. Por ejemplo:</target>
        </trans-unit>
        <trans-unit id="e62bc3146d23cb11c46abb4734d92fcb2f16ae85" translate="yes" xml:space="preserve">
          <source>Variables declared at the top level of a stylesheet are &lt;em&gt;global&lt;/em&gt;. This means that they can be accessed anywhere in their module after they&amp;rsquo;ve been declared. But that&amp;rsquo;s not true for all variables. Those declared in blocks (curly braces in SCSS or indented code in Sass) are usually &lt;em&gt;local&lt;/em&gt;, and can only be accessed within the block they were declared.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ba8994031832487676846ac77fa7f0b8dec3b112" translate="yes" xml:space="preserve">
          <source>Variables declared in &lt;a href=&quot;at-rules/control&quot;&gt;flow control rules&lt;/a&gt; have special scoping rules: they don&amp;rsquo;t shadow variables at the same level as the flow control rule. Instead, they just assign to those variables. This makes it much easier to conditionally assign a value to a variable, or build up a value as part of a loop.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="904235a134bb733bf81ca62491f8d250cf2ee574" translate="yes" xml:space="preserve">
          <source>Variables defined with &lt;code&gt;!default&lt;/code&gt; can be configured when loading a module with the &lt;a href=&quot;at-rules/use&quot;&gt;&lt;code&gt;@use&lt;/code&gt; rule&lt;/a&gt;. Sass libraries often use &lt;code&gt;!default&lt;/code&gt; variables to allow their users to configure the library&amp;rsquo;s CSS.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="65d06d898537d012a091ac8922afb3d1b05a0f0f" translate="yes" xml:space="preserve">
          <source>Variables in flow control scope can assign to existing variables in the outer scope, but they can&amp;rsquo;t declare new variables there. Make sure the variable is already declared before you assign to it, even if you need to declare it as &lt;code&gt;null&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b030b4bb1d6b81c859be99cb4803003e9fe720b8" translate="yes" xml:space="preserve">
          <source>Variables that are defined by a &lt;a href=&quot;modules&quot;&gt;built-in module&lt;/a&gt; cannot be modified.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1cb19cba9d55dde6587abe0c14c4d12a21eb6bd0" translate="yes" xml:space="preserve">
          <source>Variables with &lt;code&gt;null&lt;/code&gt; values are treated as unassigned by !default:</source>
          <target state="translated">Las variables con valores &lt;code&gt;null&lt;/code&gt; se tratan como no asignadas por defecto:</target>
        </trans-unit>
        <trans-unit id="a26c9a48ab460ac1ce8cae1c7f4d0ff504a10df3" translate="yes" xml:space="preserve">
          <source>Variables: &lt;code&gt;$&lt;/code&gt; #variables_</source>
          <target state="translated">Variables: &lt;code&gt;$&lt;/code&gt; #variables_</target>
        </trans-unit>
        <trans-unit id="cb1d3dd192599c5c0c675baaf111eab2ce9bde05" translate="yes" xml:space="preserve">
          <source>Versions of Dart Sass before 1.20.2 preferred resolving imports using load paths (&lt;a href=&quot;#includepaths&quot;&gt;includePaths&lt;/a&gt;) before resolving them using custom importers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b64307469adf2f5aedbcf95bfc09230b12d1624f" translate="yes" xml:space="preserve">
          <source>Versions of Node Sass before 2.0.0 don&amp;rsquo;t support the &lt;code&gt;importer&lt;/code&gt; option at all.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f07d3145f49f291089821be2da8032e39ecd35c0" translate="yes" xml:space="preserve">
          <source>Versions of Node Sass before 3.0.0 don&amp;rsquo;t support arrays of importers, nor do they support importers that return &lt;code&gt;Error&lt;/code&gt; objects.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1d1f601ec35589e15e62cc3f14a2ecf6ef02dcd9" translate="yes" xml:space="preserve">
          <source>Watching and Updating</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5296e040e5951a011bab7d361744570cafde9edc" translate="yes" xml:space="preserve">
          <source>We&amp;rsquo;re looking into loosening this restriction, though. If you&amp;rsquo;d like to help make that happen, check out &lt;a href=&quot;https://github.com/sass/sass/issues/1425&quot;&gt;this GitHub issue&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="81c072eafeee9ba2f1af1475d9e85b857253f7a2" translate="yes" xml:space="preserve">
          <source>We&amp;rsquo;ve written a &lt;a href=&quot;../cli/migrator&quot;&gt;migration tool&lt;/a&gt; that automatically converts most &lt;code&gt;@import&lt;/code&gt;-based code to &lt;code&gt;@use&lt;/code&gt;-based code in a flash. Just point it at your entrypoints and let it run!</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="00fe09362c5a1e8e9fe77fdafdd64aed2b63ed92" translate="yes" xml:space="preserve">
          <source>Webpack uses the &lt;a href=&quot;https://www.npmjs.com/package/sass-loader&quot;&gt;&lt;code&gt;sass-loader&lt;/code&gt; package&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fc476ae6c1bd15ef6c5cb340c03e844433c803d7" translate="yes" xml:space="preserve">
          <source>Well-formatted, customizable output</source>
          <target state="translated">Bien formateado,salida personalizable</target>
        </trans-unit>
        <trans-unit id="ae320f9f01d8ff3bba28de4f9a328eab4f9428a3" translate="yes" xml:space="preserve">
          <source>What&amp;rsquo;s Wrong With &lt;code&gt;@import&lt;/code&gt;?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dcb5c2e8b90de931f4b2425c9053cf7885cb9b69" translate="yes" xml:space="preserve">
          <source>What&amp;rsquo;s the use of a selector that isn&amp;rsquo;t emitted? It can still be &lt;a href=&quot;../at-rules/extend&quot;&gt;extended&lt;/a&gt;! Unlike class selectors, placeholders don&amp;rsquo;t clutter up the CSS if they aren&amp;rsquo;t extended and they don&amp;rsquo;t mandate that users of a library use specific class names for their HTML.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3b28b040c3f84f76a7a3baeacd11bc2968574350" translate="yes" xml:space="preserve">
          <source>When &lt;a href=&quot;#rendersync&quot;&gt;&lt;code&gt;renderSync()&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;#render&quot;&gt;&lt;code&gt;render()&lt;/code&gt;&lt;/a&gt; fail, they provide an &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error&quot;&gt;&lt;code&gt;Error&lt;/code&gt; object&lt;/a&gt; that contains information about the compilation. This object has the following properties, in addition to the standard &lt;code&gt;Error&lt;/code&gt; properties:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2646c7df6f3b6ff686cf14096cfe715089548d29" translate="yes" xml:space="preserve">
          <source>When &lt;a href=&quot;#rendersync&quot;&gt;&lt;code&gt;renderSync()&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;#render&quot;&gt;&lt;code&gt;render()&lt;/code&gt;&lt;/a&gt; succeed, they provide a result object that contains information about the compilation. This object has the following properties:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="67751b65818c9029a2c762b1022f6376b14b4cce" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;@extend&lt;/code&gt;&lt;a href=&quot;#how-it-works&quot;&gt;interleaves complex selectors&lt;/a&gt;, it doesn&amp;rsquo;t generate all possible combinations of ancestor selectors. Many of the selectors it could generate are unlikely to actually match real HTML, and generating them all would make stylesheets way too big for very little real value. Instead, it uses a &lt;a href=&quot;https://en.wikipedia.org/wiki/Heuristic&quot;&gt;heuristic&lt;/a&gt;: it assumes that each selector&amp;rsquo;s ancestors will be self-contained, without being interleaved with any other selector&amp;rsquo;s ancestors.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="109b6826f0b0eb1e61d89ae5125c5e7c1f41166b" translate="yes" xml:space="preserve">
          <source>When Sass encounters invalid syntax in a stylesheet, parsing will fail and an error will be presented to the user with information about the location of the invalid syntax and the reason it was invalid.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7384966515f04b8c7cc1bf90292a115d6c470017" translate="yes" xml:space="preserve">
          <source>When Sass imports a file, that file is evaluated as though its contents appeared directly in place of the &lt;code&gt;@import&lt;/code&gt;. Any &lt;a href=&quot;mixin&quot;&gt;mixins&lt;/a&gt;, &lt;a href=&quot;function&quot;&gt;functions&lt;/a&gt;, and &lt;a href=&quot;../variables&quot;&gt;variables&lt;/a&gt; from the imported file are made available, and all its CSS is included at the exact point where the &lt;code&gt;@import&lt;/code&gt; was written. What&amp;rsquo;s more, any mixins, functions, or variables that were defined before the &lt;code&gt;@import&lt;/code&gt; (including from other &lt;code&gt;@import&lt;/code&gt;s) are available in the imported stylesheet.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ae1804a6635a94c5a2eab113966e0084f8548ecb" translate="yes" xml:space="preserve">
          <source>When Sass is nesting selectors, it doesn&amp;rsquo;t know what interpolation was used to generate them. This means it will automatically add the outer selector to the inner selector &lt;em&gt;even if&lt;/em&gt; you used &lt;code&gt;&amp;amp;&lt;/code&gt; as a SassScript expression. That&amp;rsquo;s why you need to explicitly use the &lt;a href=&quot;../at-rules/at-root&quot;&gt;&lt;code&gt;@at-root&lt;/code&gt; rule&lt;/a&gt; to tell Sass not to include the outer selector.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5edf8a38ebf65fb3df157cbcf947cdaeedd25f7d" translate="yes" xml:space="preserve">
          <source>When a &lt;code&gt;@return&lt;/code&gt; is encountered, it immediately ends the function and returns its result. Returning early can be useful for handling edge-cases or cases where a more efficient algorithm is available without wrapping the entire function in an &lt;a href=&quot;control/if#else&quot;&gt;&lt;code&gt;@else&lt;/code&gt; block&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a0a609947d51b2b71ada8e9fe7b263350a5becc1" translate="yes" xml:space="preserve">
          <source>When a file with &lt;code&gt;@use&lt;/code&gt; rules is imported, all the CSS transitively loaded by those is included in the resulting stylesheet, even if it&amp;rsquo;s already been included by another import. If you&amp;rsquo;re not careful, this can result in bloated CSS output!</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7c4504b06fe4f2d0632fed935fffecb31c8dbe15" translate="yes" xml:space="preserve">
          <source>When a function is called, arguments can be passed by name in addition to passing them by their position in the argument list. This is especially useful for functions with multiple optional arguments, or with &lt;a href=&quot;../values/booleans&quot;&gt;boolean&lt;/a&gt; arguments whose meanings aren&amp;rsquo;t obvious without a name to go with them. Keyword arguments use the same syntax as &lt;a href=&quot;../variables&quot;&gt;variable declarations&lt;/a&gt; and &lt;a href=&quot;#optional-arguments&quot;&gt;optional arguments&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bb06b4bcfec9f4720b7452a192e8cd3abfaf6ad8" translate="yes" xml:space="preserve">
          <source>When a mixin is included, arguments can be passed by name in addition to passing them by their position in the argument list. This is especially useful for mixins with multiple optional arguments, or with &lt;a href=&quot;../values/booleans&quot;&gt;boolean&lt;/a&gt; arguments whose meanings aren&amp;rsquo;t obvious without a name to go with them. Keyword arguments use the same syntax as &lt;a href=&quot;../variables&quot;&gt;variable declarations&lt;/a&gt; and &lt;a href=&quot;#optional-arguments&quot;&gt;optional arguments&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b7f513c450831f05e82ae2122380c6269d3cf6a8" translate="yes" xml:space="preserve">
          <source>When a parent selector is used in an inner selector, it&amp;rsquo;s replaced with the corresponding outer selector. This happens instead of the normal nesting behavior.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="81668018632d182ee958edee74e2e2162a380c23" translate="yes" xml:space="preserve">
          <source>When a quoted string is injected into another value via interpolation, &lt;a href=&quot;../interpolation#quoted-strings&quot;&gt;its quotes are removed&lt;/a&gt;! This makes it easy to write strings containing selectors, for example, that can be injected into style rules without adding quotes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8ad9a9930b743e6ec09722d7d13ac805fe155c4d" translate="yes" xml:space="preserve">
          <source>When an unquoted string is parsed, the literal text of escapes are parsed as part of the string. For example, &lt;code&gt;\a&lt;/code&gt; is parsed as the characters &lt;code&gt;\&lt;/code&gt;, &lt;code&gt;a&lt;/code&gt;, and space. In order to ensure that unquoted strings that have the same meanings in CSS are parsed the same way, though, these escapes are &lt;em&gt;normalized&lt;/em&gt;. For each code point, whether it&amp;rsquo;s escaped or unescaped:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="218ab28d5f752f9a20108380952ae476cd785f73" translate="yes" xml:space="preserve">
          <source>When compiling whole directories, Sass will ignore &lt;a href=&quot;../at-rules/import#partials&quot;&gt;partial files&lt;/a&gt; whose names begin with &lt;code&gt;_&lt;/code&gt;. You can use partials to separate out your stylesheets without creating a bunch of unnecessary output files.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="31bb94d366bd70bae726f8d286d66a9019433b73" translate="yes" xml:space="preserve">
          <source>When compiling whole directories, Sass will ignore &lt;a href=&quot;../at-rules/use#partials&quot;&gt;partial files&lt;/a&gt; whose names begin with &lt;code&gt;_&lt;/code&gt;. You can use partials to separate out your stylesheets without creating a bunch of unnecessary output files.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="45cf9995f3f3b0a0c2fc12ee09c79fc32d152015" translate="yes" xml:space="preserve">
          <source>When defining a mixin, the arguments are written as variable names separated by commas, all in parentheses after the name. Then when including the mixin, values can be passed in in the same manner. For example:</source>
          <target state="translated">Cuando se define un mixin,los argumentos se escriben como nombres de variables separados por comas,todo entre paréntesis después del nombre.Luego,cuando se incluye la mixina,los valores se pueden pasar de la misma manera.Por ejemplo:</target>
        </trans-unit>
        <trans-unit id="8eaf0650b12f4b6e13c45da64d3aefa7b846ec82" translate="yes" xml:space="preserve">
          <source>When lists are turned into plain CSS, Sass doesn't add any parentheses, since CSS doesn't understand them. That means that &lt;code&gt;(1px 2px) (5px 6px)&lt;/code&gt; and &lt;code&gt;1px 2px 5px 6px&lt;/code&gt; will look the same when they become CSS. However, they aren't the same when they're Sass: the first is a list containing two lists, while the second is a list containing four numbers.</source>
          <target state="translated">Cuando las listas se convierten en CSS sin formato, Sass no agrega ning&amp;uacute;n par&amp;eacute;ntesis, ya que CSS no las comprende. Eso significa que &lt;code&gt;(1px 2px) (5px 6px)&lt;/code&gt; y &lt;code&gt;1px 2px 5px 6px&lt;/code&gt; se ver&amp;aacute;n iguales cuando se conviertan en CSS. Sin embargo, no son iguales cuando son Sass: la primera es una lista que contiene dos listas, mientras que la segunda es una lista que contiene cuatro n&amp;uacute;meros.</target>
        </trans-unit>
        <trans-unit id="5aad5437d7dfdab5e62318eefd2c6cfb001cf4fa" translate="yes" xml:space="preserve">
          <source>When merging selectors, &lt;code&gt;@extend&lt;/code&gt; is smart enough to avoid unnecessary duplication, so something like &lt;code&gt;.seriousError.seriousError&lt;/code&gt; gets translated to &lt;code&gt;.seriousError&lt;/code&gt;. In addition, it won't produce selectors that can't match anything, like &lt;code&gt;#main#footer&lt;/code&gt;.</source>
          <target state="translated">Al fusionar selectores, &lt;code&gt;@extend&lt;/code&gt; es lo suficientemente inteligente como para evitar la duplicaci&amp;oacute;n innecesaria, por lo que algo como &lt;code&gt;.seriousError.seriousError&lt;/code&gt; se traduce a &lt;code&gt;.seriousError&lt;/code&gt; . Adem&amp;aacute;s, no producir&amp;aacute; selectores que no puedan coincidir con nada, como &lt;code&gt;#main#footer&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="8f354f1d9b0a162ef05bffc01d340d5b14007482" translate="yes" xml:space="preserve">
          <source>When one class extends another, Sass styles all elements that match the extender as though they also match the class being extended. When one class selector extends another, it works exactly as though you added the extended class to every element in your HTML that already had the extending class. You can just write &lt;code&gt;class=&quot;error--serious&quot;&lt;/code&gt;, and Sass will make sure it&amp;rsquo;s styled as though it had &lt;code&gt;class=&quot;error&quot;&lt;/code&gt; as well.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0fbff872cee0dbfc7c89c0c1981c0ec2426c6d70" translate="yes" xml:space="preserve">
          <source>When one stylesheet extends a selector, that extension will only affect style rules written in &lt;em&gt;upstream&lt;/em&gt; modules&amp;mdash;that is, modules that are loaded by that stylesheet using the &lt;a href=&quot;use&quot;&gt;&lt;code&gt;@use&lt;/code&gt; rule&lt;/a&gt; or the &lt;a href=&quot;forward&quot;&gt;&lt;code&gt;@forward&lt;/code&gt; rule&lt;/a&gt;, modules loaded by &lt;em&gt;those&lt;/em&gt; modules, and so on. This helps make your &lt;code&gt;@extend&lt;/code&gt; rules more predictable, ensuring that they affect only the styles you were aware of when you wrote them.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4d1e8800cde7c69cb821d81f06588373485353f5" translate="yes" xml:space="preserve">
          <source>When possible, Sass will also merge media queries that are nested within one another to make it easier to support browsers that don&amp;rsquo;t yet natively support nested &lt;code&gt;@media&lt;/code&gt; rules.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7ff3c92336d6818ffe06769d17b564b4cd912585" translate="yes" xml:space="preserve">
          <source>When resolving an &lt;code&gt;@import&lt;/code&gt;, Sass will go through the load paths looking for an importer that successfully imports the path. Once one is found, the imported file is used.</source>
          <target state="translated">Al resolver un &lt;code&gt;@import&lt;/code&gt; , Sass recorrer&amp;aacute; las rutas de carga en busca de un importador que importe correctamente la ruta. Una vez que se encuentra uno, se utiliza el archivo importado.</target>
        </trans-unit>
        <trans-unit id="7c5f3ede65042880a9261966a2c4d5c41201709d" translate="yes" xml:space="preserve">
          <source>When running on Ruby 1.9 and later, Sass is aware of the character encoding of documents. Sass follows the &lt;a href=&quot;http://www.w3.org/TR/2013/WD-css-syntax-3-20130919/#determine-the-fallback-encoding&quot;&gt;CSS spec&lt;/a&gt; to determine the encoding of a stylesheet, and falls back to the Ruby string encoding. This means that it first checks the Unicode byte order mark, then the &lt;code&gt;@charset&lt;/code&gt; declaration, then the Ruby string encoding. If none of these are set, it will assume the document is in UTF-8.</source>
          <target state="translated">Cuando se ejecuta en Ruby 1.9 y posterior, Sass es consciente de la codificaci&amp;oacute;n de caracteres de los documentos. Sass sigue la &lt;a href=&quot;http://www.w3.org/TR/2013/WD-css-syntax-3-20130919/#determine-the-fallback-encoding&quot;&gt;especificaci&amp;oacute;n CSS&lt;/a&gt; para determinar la codificaci&amp;oacute;n de una hoja de estilo y recurre a la codificaci&amp;oacute;n de cadena Ruby. Esto significa que primero verifica la marca de orden de bytes Unicode, luego la declaraci&amp;oacute;n &lt;code&gt;@charset&lt;/code&gt; , luego la codificaci&amp;oacute;n de la cadena Ruby. Si no se establece ninguno de estos, se asumir&amp;aacute; que el documento est&amp;aacute; en UTF-8.</target>
        </trans-unit>
        <trans-unit id="197dd69b8b83c74b1b436711b01fa575cee90c61" translate="yes" xml:space="preserve">
          <source>When the first letter of a multiline comment is &lt;code&gt;!&lt;/code&gt;, the comment will always rendered into css output even in compressed output modes. This is useful for adding Copyright notices to your generated CSS.</source>
          <target state="translated">Cuando la primera letra de un comentario de varias l&amp;iacute;neas es &lt;code&gt;!&lt;/code&gt; , el comentario siempre se convertir&amp;aacute; en salida css incluso en modos de salida comprimidos. Esto es &amp;uacute;til para agregar avisos de derechos de autor a su CSS generado.</target>
        </trans-unit>
        <trans-unit id="5e4fd8404dc61ca660bd2f2f308dbfe931e2758a" translate="yes" xml:space="preserve">
          <source>When the last argument to a mixin or function is a positional or keyword-style argument, that argument can be followed by a trailing comma. Some prefer this coding style as it can lead to more concise diffs and fewer syntax errors when refactoring.</source>
          <target state="translated">Cuando el último argumento de una mezcla o función es un argumento posicional o de tipo palabra clave,ese argumento puede ir seguido de una coma.Algunos prefieren este estilo de codificación ya que puede conducir a diferencias más concisas y menos errores de sintaxis al refactorizar.</target>
        </trans-unit>
        <trans-unit id="cb17805af33bc17e9ee429b94eb2209b9ed1cc08" translate="yes" xml:space="preserve">
          <source>When the two sequences being merged have no selectors in common, then two new selectors are generated: one with the first sequence before the second, and one with the second sequence before the first. For example:</source>
          <target state="translated">Cuando las dos secuencias que se fusionan no tienen selectores en común,entonces se generan dos nuevos selectores:uno con la primera secuencia antes de la segunda,y otro con la segunda secuencia antes de la primera.Por ejemplo:</target>
        </trans-unit>
        <trans-unit id="af89e96670072f7489d5ea4d5b9921c482b4a965" translate="yes" xml:space="preserve">
          <source>When using Dart Sass, &lt;strong&gt;&lt;a href=&quot;#rendersync&quot;&gt;&lt;code&gt;renderSync()&lt;/code&gt;&lt;/a&gt; is almost twice as fast as &lt;code&gt;render()&lt;/code&gt;&lt;/strong&gt; by default, due to the overhead of making the entire evaluation process asynchronous. To avoid this performance hit, you can pass the &lt;a href=&quot;#fiber&quot;&gt;&lt;code&gt;fiber&lt;/code&gt; option&lt;/a&gt; to &lt;code&gt;render()&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8b7a13914940166518300fa33331c64f13803b7e" translate="yes" xml:space="preserve">
          <source>When using Dart Sass, &lt;strong&gt;&lt;code&gt;renderSync()&lt;/code&gt; is more than twice as fast as &lt;code&gt;render()&lt;/code&gt;&lt;/strong&gt;, due to the overhead of asynchronous callbacks. To avoid this performance hit, &lt;code&gt;render()&lt;/code&gt; can use the &lt;a href=&quot;https://www.npmjs.com/package/fibers&quot;&gt;&lt;code&gt;fibers&lt;/code&gt;&lt;/a&gt; package to call asynchronous importers from the synchronous code path. To enable this, pass the &lt;code&gt;Fiber&lt;/code&gt; class to the &lt;code&gt;fiber&lt;/code&gt; option:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b5bb132e14d6ab3a9f1a50fa2dc201c2d576155a" translate="yes" xml:space="preserve">
          <source>When writing &lt;a href=&quot;mixin&quot;&gt;mixins&lt;/a&gt; and &lt;a href=&quot;function&quot;&gt;functions&lt;/a&gt; that take arguments, you usually want to ensure that those arguments have the types and formats your API expects. If they aren't, the user needs to be notified and your mixin/function needs to stop running.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="622c01719e46c66c1777b18d05a1f9e6d2a3930c" translate="yes" xml:space="preserve">
          <source>When writing &lt;a href=&quot;mixin&quot;&gt;mixins&lt;/a&gt; and &lt;a href=&quot;function&quot;&gt;functions&lt;/a&gt;, you may want to discourage users from passing certain arguments or certain values. They may be passing legacy arguments that are now deprecated, or they may be calling your API in a way that&amp;rsquo;s not quite optimal.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="263a2faa1ca3886c162feed06c743e2a35949aab" translate="yes" xml:space="preserve">
          <source>When writing custom functions, it&amp;rsquo;s important to ensure that all the arguments are the types you expect. Otherwise, users&amp;rsquo; stylesheets could crash in hard-to-debug ways or, worse, compile to meaningless CSS.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="027bfd284e7508b4792085aecf46844ff4f38f1b" translate="yes" xml:space="preserve">
          <source>When writing style libraries using Sass, you can use comments to document the &lt;a href=&quot;../at-rules/mixin&quot;&gt;mixins&lt;/a&gt;, &lt;a href=&quot;../at-rules/function&quot;&gt;functions&lt;/a&gt;, &lt;a href=&quot;../variables&quot;&gt;variables&lt;/a&gt;, and &lt;a href=&quot;../style-rules/placeholder-selectors&quot;&gt;placeholder selectors&lt;/a&gt; that your library provides, as well as the library itself. These are comments are read by the &lt;a href=&quot;http://sassdoc.com&quot;&gt;SassDoc&lt;/a&gt; tool, which uses them to generate beautiful documentation. Check out &lt;a href=&quot;http://oddbird.net/susy/docs/index.html&quot;&gt;the Susy grid engine&lt;/a&gt;&amp;rsquo;s documentation to see it in action!</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="482a4bbcee8e0f624a30032248fb70b16d73f815" translate="yes" xml:space="preserve">
          <source>When you declare a mixin or function that takes &lt;a href=&quot;../at-rules/mixin#taking-arbitrary-arguments&quot;&gt;arbitrary arguments&lt;/a&gt;, the value you get is a special list known as an &lt;em&gt;argument list&lt;/em&gt;. It acts just like a list that contains all the arguments passed to the mixin or function, with one extra feature: if the user passed keyword arguments, they can be accessed as a map by passing the argument list to the &lt;a href=&quot;../modules/meta#keywords&quot;&gt;&lt;code&gt;meta.keywords()&lt;/code&gt; function&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="35b3433b081aebda0f31291c47558d163be8f0e7" translate="yes" xml:space="preserve">
          <source>When you import a file that contains &lt;code&gt;@use&lt;/code&gt; rules, the importing file has access to all members (even private members) defined directly in that file, but &lt;em&gt;not&lt;/em&gt; any members from modules that file has loaded. However, if that file contains &lt;a href=&quot;forward&quot;&gt;&lt;code&gt;@forward&lt;/code&gt; rules&lt;/a&gt;, the importing file will have access to forwarded members. This means that you can import a library that was written to be used with the module system.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f7a75b711040d4798987157314d10ebb07704327" translate="yes" xml:space="preserve">
          <source>When you pass this option, the migrator will also generate an &lt;a href=&quot;../at-rules/import#import-only-files&quot;&gt;import-only stylesheet&lt;/a&gt; that &lt;a href=&quot;../at-rules/forward&quot;&gt;forwards&lt;/a&gt; all the members with the prefix added back, to preserve backwards-compatibility for users who were importing the library.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7a75a804b614be27309836388101bf18c03f7792" translate="yes" xml:space="preserve">
          <source>When you use &lt;code&gt;@use&lt;/code&gt; (or &lt;code&gt;@forward&lt;/code&gt;) load a module that uses &lt;code&gt;@import&lt;/code&gt;, that module will contain all the public members defined by the stylesheet you load &lt;em&gt;and&lt;/em&gt; everything that stylesheet transitively imports. In other words, everything that&amp;rsquo;s imported is treated as though it were written in one big stylesheet.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6a96355c77e9fc9e8cf8a12bb300b15d130381c5" translate="yes" xml:space="preserve">
          <source>Which would output the following:</source>
          <target state="translated">Lo que daría como resultado lo siguiente:</target>
        </trans-unit>
        <trans-unit id="4456171cd4cc8074d8af762f53b44a9a7090c527" translate="yes" xml:space="preserve">
          <source>Which would produce:</source>
          <target state="translated">Lo que produciría:</target>
        </trans-unit>
        <trans-unit id="423708f9fef7104955a2e6081d74527cb46a6604" translate="yes" xml:space="preserve">
          <source>While &lt;code&gt;@extend&lt;/code&gt; is allowed within &lt;a href=&quot;css&quot;&gt;&lt;code&gt;@media&lt;/code&gt; and other CSS at-rules&lt;/a&gt;, it&amp;rsquo;s not allowed to extend selectors that appear outside its at-rule. This is because the extending selector only applies within the given media context, and there&amp;rsquo;s no way to make sure that restriction is preserved in the generated selector without duplicating the entire style rule.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2275e024f14cc0973d14e354edc2110a6fa18663" translate="yes" xml:space="preserve">
          <source>While it would technically be possible to generate all selectors that could possibly match either sequence, this would make the stylesheet far too large. The simple example above, for instance, would require ten selectors. Instead, Sass generates only selectors that are likely to be useful.</source>
          <target state="translated">Aunque técnicamente sería posible generar todos los selectores que pudieran coincidir con cualquiera de las secuencias,esto haría que la hoja de estilo fuera demasiado grande.El simple ejemplo anterior,por ejemplo,requeriría diez selectores.En cambio,Sass genera sólo selectores que probablemente sean útiles.</target>
        </trans-unit>
        <trans-unit id="3f3dbc007f7d47bfa51fca54bae8df73cbad2b6f" translate="yes" xml:space="preserve">
          <source>While it&amp;rsquo;s technically possible for functions to have side-effects like setting &lt;a href=&quot;../variables#scope&quot;&gt;global variables&lt;/a&gt;, this is strongly discouraged. Use &lt;a href=&quot;mixin&quot;&gt;mixins&lt;/a&gt; for side-effects, and use functions just to compute values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bb585dbae3a6f883c795f956780d12f4deb3d861" translate="yes" xml:space="preserve">
          <source>While it&amp;rsquo;s tempting to use this feature to convert quoted strings to unquoted strings, it&amp;rsquo;s a lot clearer to use the &lt;a href=&quot;modules/string#unquote&quot;&gt;&lt;code&gt;string.unquote()&lt;/code&gt; function&lt;/a&gt;. Instead of &lt;code&gt;#{$string}&lt;/code&gt;, write &lt;code&gt;string.unquote($string)&lt;/code&gt;!</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b04bfd229cc5abb3ff13094b511bec694aad932a" translate="yes" xml:space="preserve">
          <source>While this is less concise, it can make the stylesheet easier to read. It also allows functions to present more flexible interfaces, providing many arguments without becoming difficult to call.</source>
          <target state="translated">Aunque esto es menos conciso,puede hacer que la hoja de estilo sea más fácil de leer.También permite que las funciones presenten interfaces más flexibles,proporcionando muchos argumentos sin que sea difícil de llamar.</target>
        </trans-unit>
        <trans-unit id="4524b79210c6ea867e61f067f30b30c4e1fa6433" translate="yes" xml:space="preserve">
          <source>With Maps</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2cc5600d98ace8d12a6fc5821568226d0593507c" translate="yes" xml:space="preserve">
          <source>With Mixins</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f5e3d812af01ef111586dd7e7cd455fe9cd8f748" translate="yes" xml:space="preserve">
          <source>Within a string of text, #{} style interpolation can be used to place dynamic values within the string:</source>
          <target state="translated">Dentro de una cadena de texto,se puede usar la interpolación de estilo #{}para colocar valores dinámicos dentro de la cadena:</target>
        </trans-unit>
        <trans-unit id="5d86af3b87d3bc635839ced821182161d6b68ee4" translate="yes" xml:space="preserve">
          <source>Without a framework, Sass puts the cached templates in the &lt;code&gt;.sass-cache&lt;/code&gt; directory. In Rails and Merb, they go in &lt;code&gt;tmp/sass-cache&lt;/code&gt;. The directory can be customized with the &lt;a href=&quot;#cache_location-option&quot;&gt;&lt;code&gt;:cache_location&lt;/code&gt;&lt;/a&gt; option. If you don't want Sass to use caching at all, set the &lt;a href=&quot;#cache-option&quot;&gt;&lt;code&gt;:cache&lt;/code&gt;&lt;/a&gt; option to &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">Sin un marco, Sass coloca las plantillas en cach&amp;eacute; en el directorio &lt;code&gt;.sass-cache&lt;/code&gt; . En Rails y Merb, van en &lt;code&gt;tmp/sass-cache&lt;/code&gt; . El directorio se puede personalizar con la opci&amp;oacute;n &lt;a href=&quot;#cache_location-option&quot;&gt; &lt;code&gt;:cache_location&lt;/code&gt; &lt;/a&gt; . Si no desea que Sass utilice el almacenamiento en cach&amp;eacute;, establezca la opci&amp;oacute;n &lt;a href=&quot;#cache-option&quot;&gt; &lt;code&gt;:cache&lt;/code&gt; &lt;/a&gt; en &lt;code&gt;false&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="b35c9196af84591c97165ecba0b974655c1c2024" translate="yes" xml:space="preserve">
          <source>Wrap unary negation in parentheses if it&amp;rsquo;s in a space-separated list.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ced6547ebc9d97b74ce12d1a6de550438ee2144e" translate="yes" xml:space="preserve">
          <source>Write a space before &lt;code&gt;-&lt;/code&gt; but not after for a negative number or a unary negation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f56b7d1c084ebe4783cdd34797281e416c05826e" translate="yes" xml:space="preserve">
          <source>You always include spaces on both sides of &lt;code&gt;-&lt;/code&gt; when subtracting.</source>
          <target state="translated">Siempre incluye espacios a ambos lados de &lt;code&gt;-&lt;/code&gt; al restar.</target>
        </trans-unit>
        <trans-unit id="ec01032607173783a4fc4360a977b515e63fb44d" translate="yes" xml:space="preserve">
          <source>You can &lt;a href=&quot;use#configuration&quot;&gt;configure modules&lt;/a&gt; that are loaded through an &lt;code&gt;@import&lt;/code&gt; by defining global variables prior the &lt;code&gt;@import&lt;/code&gt; that first loads that module.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="47075dea023ce95f6054d9c81b74824443951572" translate="yes" xml:space="preserve">
          <source>You can access variables, functions, and mixins from another module by writing &lt;code&gt;&amp;lt;namespace&amp;gt;.&amp;lt;variable&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;namespace&amp;gt;.&amp;lt;function&amp;gt;()&lt;/code&gt;, or &lt;code&gt;@include &amp;lt;namespace&amp;gt;.&amp;lt;mixin&amp;gt;()&lt;/code&gt;. By default, the namespace is just the last component of the module&amp;rsquo;s URL.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="83572d7d18ba6a271f88ec6054ccb9dbc7eecc65" translate="yes" xml:space="preserve">
          <source>You can also choose whether to evaluate an &lt;code&gt;@else&lt;/code&gt; rule&amp;rsquo;s block by writing it &lt;code&gt;@else if &amp;lt;expression&amp;gt; { ... }&lt;/code&gt;. If you do, the block is evaluated only if the preceding &lt;code&gt;@if&lt;/code&gt;&amp;rsquo;s expression returns &lt;code&gt;false&lt;/code&gt;&lt;em&gt;and&lt;/em&gt; the &lt;code&gt;@else if&lt;/code&gt;&amp;rsquo;s expression returns &lt;code&gt;true&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="81147456a5c44d6acef05640c6850187a2831f7b" translate="yes" xml:space="preserve">
          <source>You can also tell Sass to watch the file and update the CSS every time the Sass file changes:</source>
          <target state="translated">También puedes decirle a Sass que mire el archivo y actualice el CSS cada vez que el archivo de Sass cambie:</target>
        </trans-unit>
        <trans-unit id="d11ff44ce37f6004626be58674ebbb98268453b1" translate="yes" xml:space="preserve">
          <source>You can also use &lt;code&gt;@each&lt;/code&gt; to iterate over every key/value pair in a map by writing it &lt;code&gt;@each &amp;lt;variable&amp;gt;, &amp;lt;variable&amp;gt; in &amp;lt;expression&amp;gt; { ... }&lt;/code&gt;. The key is assigned to the first variable name, and the element is assigned to the second.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c122ca56a2a3ed525462e2c06d796aee0409cb52" translate="yes" xml:space="preserve">
          <source>You can also use SassScript variables in selectors and property names using &lt;code&gt;#{}&lt;/code&gt; interpolation syntax:</source>
          <target state="translated">Tambi&amp;eacute;n puede usar variables SassScript en selectores y nombres de propiedades usando la sintaxis de interpolaci&amp;oacute;n &lt;code&gt;#{}&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="cbd0a04e3e99fb4e6c7c0365e57a28f8db7f75e2" translate="yes" xml:space="preserve">
          <source>You can also use the parent selector to add extra suffixes to the outer selector. This is particularly useful when using a methodology like &lt;a href=&quot;http://getbem.com/&quot;&gt;BEM&lt;/a&gt; that uses highly structured class names. As long as the outer selector ends with an alphanumeric name (like class, ID, and element selectors), you can use the parent selector to append additional text.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4ca9e78f4c3203621d63dc19b76b34f23aeb598e" translate="yes" xml:space="preserve">
          <source>You can also write &lt;code&gt;+&lt;/code&gt; and &lt;code&gt;-&lt;/code&gt; as unary operators, which take only one value:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="13d13633a9f0660c0009224931f186514fc691b4" translate="yes" xml:space="preserve">
          <source>You can assign to variables if they aren't already assigned by adding the &lt;code&gt;!default&lt;/code&gt; flag to the end of the value. This means that if the variable has already been assigned to, it won't be re-assigned, but if it doesn't have a value yet, it will be given one.</source>
          <target state="translated">Puede asignar a variables si a&amp;uacute;n no est&amp;aacute;n asignadas agregando la &lt;code&gt;!default&lt;/code&gt; al final del valor. Esto significa que si la variable ya ha sido asignada, no se reasignar&amp;aacute;, pero si a&amp;uacute;n no tiene un valor, se le asignar&amp;aacute; uno.</target>
        </trans-unit>
        <trans-unit id="6367902cbbdd55926eaa7d9f403389bfe9ec844a" translate="yes" xml:space="preserve">
          <source>You can combine interpolation with the parent selector &lt;code&gt;&amp;amp;&lt;/code&gt;, the &lt;a href=&quot;at-rules/at-root&quot;&gt;&lt;code&gt;@at-root&lt;/code&gt; rule&lt;/a&gt;, and &lt;a href=&quot;modules/selector&quot;&gt;selector functions&lt;/a&gt; to wield some serious power when dynamically generating selectors. For more information, see the &lt;a href=&quot;style-rules/parent-selector&quot;&gt;parent selector documentation&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="889ad2c16e3f33d771b36be949dc75fcd418df43" translate="yes" xml:space="preserve">
          <source>You can convert a quoted string to an unquoted string using the &lt;a href=&quot;../modules/string#unquote&quot;&gt;&lt;code&gt;string.unquote()&lt;/code&gt; function&lt;/a&gt;, and you can convert an unquoted string to a quoted string using the &lt;a href=&quot;../modules/string#quote&quot;&gt;&lt;code&gt;string.quote()&lt;/code&gt; function&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="64155bf8c629e795596b89f0d86392caee9adb84" translate="yes" xml:space="preserve">
          <source>You can convert between decimals and percentages using unit arithmetic. &lt;code&gt;$percentage / 100%&lt;/code&gt; will return the corresponding decimal, and &lt;code&gt;$decimal *
100%&lt;/code&gt; will return the corresponding percentage. You can also use the &lt;a href=&quot;../modules/math#percentage&quot;&gt;&lt;code&gt;math.percentage()&lt;/code&gt; function&lt;/a&gt; as a more explicit way of writing &lt;code&gt;$decimal *
100%&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e7257ebd10c09e050b2a0304e02e88ca5f9fe4ed" translate="yes" xml:space="preserve">
          <source>You can directly access Sass&amp;rsquo;s intelligent unification using &lt;a href=&quot;../modules/selector&quot;&gt;selector functions&lt;/a&gt;! The &lt;a href=&quot;../modules/selector#unify&quot;&gt;&lt;code&gt;selector.unify()&lt;/code&gt; function&lt;/a&gt; returns a selector that matches the intersection of two selectors, while the &lt;a href=&quot;../modules/selector#extend&quot;&gt;&lt;code&gt;selector.extend()&lt;/code&gt; function&lt;/a&gt; works just like &lt;code&gt;@extend&lt;/code&gt;, but on a single selector.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9a523a74baa4d7c69d2164b235f4424055c471bb" translate="yes" xml:space="preserve">
          <source>You can easily experiment with SassScript using the interactive shell. To launch the shell run the sass command-line with the &lt;code&gt;-i&lt;/code&gt; option. At the prompt, enter any legal SassScript expression to have it evaluated and the result printed out for you:</source>
          <target state="translated">Puede experimentar f&amp;aacute;cilmente con SassScript utilizando el shell interactivo. Para iniciar el shell, ejecute la l&amp;iacute;nea de comandos sass con la opci&amp;oacute;n &lt;code&gt;-i&lt;/code&gt; . Cuando se le solicite, ingrese cualquier expresi&amp;oacute;n legal de SassScript para que se eval&amp;uacute;e y se imprima el resultado:</target>
        </trans-unit>
        <trans-unit id="e8204e426cb1d70f7c8c54a53034f402d2bb85e6" translate="yes" xml:space="preserve">
          <source>You can even load a module &lt;em&gt;without&lt;/em&gt; a namespace by writing &lt;code&gt;@use &quot;&amp;lt;url&amp;gt;&quot; as *&lt;/code&gt;. We recommend you only do this for stylesheets written by you, though; otherwise, they may introduce new members that cause name conflicts!</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="372eddcbe9b5747f09ae847a3212b0fce70894c6" translate="yes" xml:space="preserve">
          <source>You can explicitly control the order of operations using parentheses. An operation inside parentheses is always evaluated before any operations outside of them. Parentheses can even be nested, in which case the innermost parentheses will be evaluated first.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a6efbecc96c755932cef7a5a3a542ce06278b05c" translate="yes" xml:space="preserve">
          <source>You can explicitly test for &lt;code&gt;$var == false&lt;/code&gt; or &lt;code&gt;$var == null&lt;/code&gt; if you want to distinguish between these.</source>
          <target state="translated">Puede probar expl&amp;iacute;citamente &lt;code&gt;$var == false&lt;/code&gt; o &lt;code&gt;$var == null&lt;/code&gt; si desea distinguir entre estos.</target>
        </trans-unit>
        <trans-unit id="e6b7313195eca45da747eaf1431f9bea7a2775b5" translate="yes" xml:space="preserve">
          <source>You can install the Sass migrator from most of the same places that you can install &lt;a href=&quot;https://sass-lang.com/dart-sass&quot;&gt;Dart Sass&lt;/a&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b7d48bb0fe58549aa7d40409a08f52a1f1b549d8" translate="yes" xml:space="preserve">
          <source>You can install the Sass migrator on Windows, Mac, or Linux by downloading the package for your operating system &lt;a href=&quot;https://github.com/sass/migrator/releases&quot;&gt;from GitHub&lt;/a&gt; and &lt;a href=&quot;https://katiek2.github.io/path-doc/&quot;&gt;adding it to your &lt;code&gt;PATH&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aab828f202d59063ddc8d72971b50f5ef9487eb2" translate="yes" xml:space="preserve">
          <source>You can nest selectors that use combinators as well. You can put the combinator at the end of the outer selector, at the beginning of the inner selector, or even all on its own in between the two.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7623674f7f8c329d2e8140dfe81ffdabe697bfb0" translate="yes" xml:space="preserve">
          <source>You can pass &lt;a href=&quot;syntax/special-functions&quot;&gt;special functions&lt;/a&gt; like &lt;code&gt;calc()&lt;/code&gt; or &lt;code&gt;var()&lt;/code&gt; in place of any argument to &lt;code&gt;hsl()&lt;/code&gt;. You can even use &lt;code&gt;var()&lt;/code&gt; in place of multiple arguments, since it might be replaced by multiple values! When a color function is called this way, it returns an unquoted string using the same signature it was called with.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f5c00667667e5e6c3b209c2643ea04586de832bf" translate="yes" xml:space="preserve">
          <source>You can pass &lt;a href=&quot;syntax/special-functions&quot;&gt;special functions&lt;/a&gt; like &lt;code&gt;calc()&lt;/code&gt; or &lt;code&gt;var()&lt;/code&gt; in place of any argument to &lt;code&gt;rgb()&lt;/code&gt;. You can even use &lt;code&gt;var()&lt;/code&gt; in place of multiple arguments, since it might be replaced by multiple values! When a color function is called this way, it returns an unquoted string using the same signature it was called with.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="84f8f84f93c9060c537bf98a935e0372c6634707" translate="yes" xml:space="preserve">
          <source>You can pass any value to &lt;code&gt;@debug&lt;/code&gt;, not just a string! It prints the same representation of that value as the &lt;a href=&quot;../modules/meta#inspect&quot;&gt;&lt;code&gt;meta.inspect()&lt;/code&gt; function&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ba20eeb17ed1540c5890209e0bc6ad635fd905c9" translate="yes" xml:space="preserve">
          <source>You can pass both an argument list and a map as long as the list comes before the map, as in &lt;code&gt;@include colors($values..., $map...)&lt;/code&gt;.</source>
          <target state="translated">Puede pasar tanto una lista de argumentos como un mapa siempre que la lista venga antes del mapa, como en &lt;code&gt;@include colors($values..., $map...)&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="50bfb5f7fd5447b502e26a027c8983b8010ce664" translate="yes" xml:space="preserve">
          <source>You can still update your state over time by assigning new lists to the same variable, though. This is often used in functions and mixins to collect a bunch of values into one list.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4429feea85ca7d3118cb1e706111975f06894199" translate="yes" xml:space="preserve">
          <source>You can still update your state over time by assigning new maps to the same variable, though. This is often used in functions and mixins to track configuration in a map.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="76d731fd27bb0a6fc509aa34683c1c6e1d903eaa" translate="yes" xml:space="preserve">
          <source>You can then refer to them in properties:</source>
          <target state="translated">Entonces puedes referirte a ellos en las propiedades:</target>
        </trans-unit>
        <trans-unit id="cf503cec47c517b787ea526c054cc2eb87d4090d" translate="yes" xml:space="preserve">
          <source>You can turn warnings off with the &lt;code&gt;--quiet&lt;/code&gt; command-line option or the &lt;code&gt;:quiet&lt;/code&gt; Sass option.</source>
          <target state="translated">Puede desactivar las advertencias con la opci&amp;oacute;n de l&amp;iacute;nea de comandos &lt;code&gt;--quiet&lt;/code&gt; o la opci&amp;oacute;n &lt;code&gt;:quiet&lt;/code&gt; Sass.</target>
        </trans-unit>
        <trans-unit id="414495accfc2ae8635088a2c927fc5861609acd6" translate="yes" xml:space="preserve">
          <source>You can use &lt;a href=&quot;interpolation&quot;&gt;interpolation&lt;/a&gt; to inject values from &lt;a href=&quot;syntax/structure#expressions&quot;&gt;expressions&lt;/a&gt; like variables and function calls into your selectors. This is particularly useful when you&amp;rsquo;re writing &lt;a href=&quot;at-rules/mixin&quot;&gt;mixins&lt;/a&gt;, since it allows you to create selectors from parameters your users pass in.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="84d5a8e1c75c160f58428bf6ef0ad93b66725dbc" translate="yes" xml:space="preserve">
          <source>You can use &lt;code&gt;&amp;amp;&lt;/code&gt; as a normal SassScript expression, which means you can pass it to functions or include it in interpolation&amp;mdash;even in other selectors! Using it in combination with &lt;a href=&quot;../modules/selector#selector-values&quot;&gt;selector functions&lt;/a&gt; and the &lt;a href=&quot;../at-rules/at-root&quot;&gt;&lt;code&gt;@at-root&lt;/code&gt; rule&lt;/a&gt; allows you to nest selectors in very powerful ways.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="49feb5899497bef208a42fb48189e577100fd7aa" translate="yes" xml:space="preserve">
          <source>You can use &lt;code&gt;@at-root (without: ...)&lt;/code&gt; to move outside of any directive. You can also do it with multiple directives separated by a space: &lt;code&gt;@at-root (without: media supports)&lt;/code&gt; moves outside of both &lt;code&gt;@media&lt;/code&gt; and &lt;code&gt;@supports&lt;/code&gt; queries.</source>
          <target state="translated">Puede usar &lt;code&gt;@at-root (without: ...)&lt;/code&gt; para moverse fuera de cualquier directiva. Tambi&amp;eacute;n puede hacerlo con varias directivas separadas por un espacio: &lt;code&gt;@at-root (without: media supports)&lt;/code&gt; mueve fuera de las consultas &lt;code&gt;@media&lt;/code&gt; y &lt;code&gt;@supports&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="b7dd01fe2a1bce2b0b3372e74bedff54a62e8e9a" translate="yes" xml:space="preserve">
          <source>You can use booleans to choose whether or not to do various things in Sass. The &lt;a href=&quot;../at-rules/control/if&quot;&gt;&lt;code&gt;@if&lt;/code&gt; rule&lt;/a&gt; evaluates a block of styles if its argument is &lt;code&gt;true&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="da2b2af53c24dbda3080a6658d2d65594b29bdb2" translate="yes" xml:space="preserve">
          <source>You can use variable arguments to wrap a mixin and add additional styles without changing the argument signature of the mixin. If you do, keyword arguments will get directly passed through to the wrapped mixin. For example:</source>
          <target state="translated">Puedes usar argumentos variables para envolver un mixin y añadir estilos adicionales sin cambiar la firma del argumento del mixin.Si lo haces,los argumentos de las palabras clave pasarán directamente al mixin envuelto.Por ejemplo:</target>
        </trans-unit>
        <trans-unit id="d5cb4f8236e896fc97272ee5b42d8d1d6ffcc3b0" translate="yes" xml:space="preserve">
          <source>You can work with booleans using &lt;a href=&quot;../operators/boolean&quot;&gt;boolean operators&lt;/a&gt;. The &lt;code&gt;and&lt;/code&gt; operator returns &lt;code&gt;true&lt;/code&gt; if &lt;em&gt;both&lt;/em&gt; sides are &lt;code&gt;true&lt;/code&gt;, and the &lt;code&gt;or&lt;/code&gt; operator returns &lt;code&gt;true&lt;/code&gt; if &lt;em&gt;either&lt;/em&gt; side is &lt;code&gt;true&lt;/code&gt;. The &lt;code&gt;not&lt;/code&gt; operator returns the opposite of a single boolean value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="214186f8652a0a9f83377311430be290c09851ce" translate="yes" xml:space="preserve">
          <source>You include a space before &lt;code&gt;-&lt;/code&gt; but not after for a negative number or a unary negation.</source>
          <target state="translated">Incluye un espacio antes &lt;code&gt;-&lt;/code&gt; pero no despu&amp;eacute;s para un n&amp;uacute;mero negativo o una negaci&amp;oacute;n unaria.</target>
        </trans-unit>
        <trans-unit id="5577cb020efc3f3b98bd17cf8b1830fc6309b83a" translate="yes" xml:space="preserve">
          <source>You should especially avoid using interpolation like &lt;code&gt;#{$number}px&lt;/code&gt;. This doesn&amp;rsquo;t actually create a number! It creates an &lt;a href=&quot;../values/strings#unquoted&quot;&gt;unquoted string&lt;/a&gt; that &lt;em&gt;looks&lt;/em&gt; like a number, but won&amp;rsquo;t work with any &lt;a href=&quot;numeric&quot;&gt;number operations&lt;/a&gt; or &lt;a href=&quot;../modules/math&quot;&gt;functions&lt;/a&gt;. Try to make your math unit-clean so that &lt;code&gt;$number&lt;/code&gt; already has the unit &lt;code&gt;px&lt;/code&gt;, or write &lt;code&gt;$number * 1px&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e2d14c022cbcc35de98b95b1362930e308663a4d" translate="yes" xml:space="preserve">
          <source>You should especially avoid using interpolation like &lt;code&gt;#{$number}px&lt;/code&gt;. This doesn&amp;rsquo;t actually create a number! It creates an &lt;a href=&quot;strings#unquoted&quot;&gt;unquoted string&lt;/a&gt; that &lt;em&gt;looks&lt;/em&gt; like a number, but won&amp;rsquo;t work with any &lt;a href=&quot;../operators/numeric&quot;&gt;number operations&lt;/a&gt; or &lt;a href=&quot;../modules/math&quot;&gt;functions&lt;/a&gt;. Try to make your math unit-clean so that &lt;code&gt;$number&lt;/code&gt; already has the unit &lt;code&gt;px&lt;/code&gt;, or write &lt;code&gt;$number * 1px&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8816308f546f36ba1f2eb84b1922ab74be659ff1" translate="yes" xml:space="preserve">
          <source>You wrap a unary negation in parentheses if it's in a space-separated list, as in &lt;code&gt;10px (-$var)&lt;/code&gt;.</source>
          <target state="translated">Envuelve una negaci&amp;oacute;n unaria entre par&amp;eacute;ntesis si est&amp;aacute; en una lista separada por espacios, como en &lt;code&gt;10px (-$var)&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="82451b41fd7878180b6aa2b54e369cbec4e8032c" translate="yes" xml:space="preserve">
          <source>abs</source>
          <target state="translated">abs</target>
        </trans-unit>
        <trans-unit id="41314a88f904c4689277b5eb551576181f8b03de" translate="yes" xml:space="preserve">
          <source>abs($number)</source>
          <target state="translated">abs($number)</target>
        </trans-unit>
        <trans-unit id="13fb83ffcf44c21e90625b65560d2cb3b38b1c37" translate="yes" xml:space="preserve">
          <source>adjust_color</source>
          <target state="translated">adjust_color</target>
        </trans-unit>
        <trans-unit id="fcde6841d6d75d592f338b4773bb5cc3d554e840" translate="yes" xml:space="preserve">
          <source>adjust_color($color, [$red], [$green], [$blue], [$hue], [$saturation], [$lightness], [$alpha])</source>
          <target state="translated">adjust_color($color,[$red],[$green],[$blue],[$hue],[$saturation],[$lightness],[$alpha])</target>
        </trans-unit>
        <trans-unit id="9a48bad57d6bbbfcf761441534d9305586456562" translate="yes" xml:space="preserve">
          <source>adjust_hue</source>
          <target state="translated">adjust_hue</target>
        </trans-unit>
        <trans-unit id="a70422b686b9a2e20129773f335a21da1541c763" translate="yes" xml:space="preserve">
          <source>adjust_hue($color, $degrees)</source>
          <target state="translated">adjust_hue($color,$grados)</target>
        </trans-unit>
        <trans-unit id="be76331b95dfc399cd776d2fc68021e0db03cc4f" translate="yes" xml:space="preserve">
          <source>alpha</source>
          <target state="translated">alpha</target>
        </trans-unit>
        <trans-unit id="97fe9c0e1b5011367b9777a98fe408db58713477" translate="yes" xml:space="preserve">
          <source>alpha($color)</source>
          <target state="translated">alpha($color)</target>
        </trans-unit>
        <trans-unit id="515f232e78ae2bf61209d0acf67620a08cf72b8f" translate="yes" xml:space="preserve">
          <source>and &lt;code&gt;_colors.scss&lt;/code&gt; would be imported.</source>
          <target state="translated">y se importar&amp;iacute;an &lt;code&gt;_colors.scss&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="db43bff34c78044870bc6b1ae2aa16902bb1bb8a" translate="yes" xml:space="preserve">
          <source>append</source>
          <target state="translated">append</target>
        </trans-unit>
        <trans-unit id="1f95e54ad17da9f7ddab05727617ccee32ba9d8b" translate="yes" xml:space="preserve">
          <source>append($list, $val, $separator:auto)</source>
          <target state="translated">append($lista,$val,$separador:auto)</target>
        </trans-unit>
        <trans-unit id="4c9a82ce72ca2519f38d0af0abbb4cecb9fceca9" translate="yes" xml:space="preserve">
          <source>blue</source>
          <target state="translated">blue</target>
        </trans-unit>
        <trans-unit id="ab64ebf7ba79b4e2d077bfab54e1b739d4950074" translate="yes" xml:space="preserve">
          <source>blue($color)</source>
          <target state="translated">blue($color)</target>
        </trans-unit>
        <trans-unit id="e8f8fe62a522cc962a3179c2ef2f3161ee811ac5" translate="yes" xml:space="preserve">
          <source>booleans (e.g. &lt;code&gt;true&lt;/code&gt;, &lt;code&gt;false&lt;/code&gt;)</source>
          <target state="translated">booleanos (por ejemplo , &lt;code&gt;true&lt;/code&gt; , &lt;code&gt;false&lt;/code&gt; )</target>
        </trans-unit>
        <trans-unit id="bc8d8647b02deea0ab3e715c220d041ee78cc19d" translate="yes" xml:space="preserve">
          <source>call</source>
          <target state="translated">call</target>
        </trans-unit>
        <trans-unit id="20dd91e57ed7bf204330eea88147ed9b194a7d8b" translate="yes" xml:space="preserve">
          <source>call($function, $args...)</source>
          <target state="translated">llamada($función,$args...)</target>
        </trans-unit>
        <trans-unit id="613af80c25dfbc9ef75ce605280571b9a518d632" translate="yes" xml:space="preserve">
          <source>ceil</source>
          <target state="translated">ceil</target>
        </trans-unit>
        <trans-unit id="780c60bd62c3b814b33370607671c80f0537384f" translate="yes" xml:space="preserve">
          <source>ceil($number)</source>
          <target state="translated">ceil($number)</target>
        </trans-unit>
        <trans-unit id="dc1b619e02e6d7ccbf209c87d6a683b6d399163a" translate="yes" xml:space="preserve">
          <source>change_color</source>
          <target state="translated">change_color</target>
        </trans-unit>
        <trans-unit id="38518de32ec42f346b3d323f9e208875a46949c1" translate="yes" xml:space="preserve">
          <source>change_color($color, [$red], [$green], [$blue], [$hue], [$saturation], [$lightness], [$alpha])</source>
          <target state="translated">change_color($color,[$red],[$green],[$blue],[$hue],[$saturation],[$lightness],[$alpha])</target>
        </trans-unit>
        <trans-unit id="1c04e58b4f0ee405df5a6e58ecfc03f4bb77f299" translate="yes" xml:space="preserve">
          <source>colors (e.g. &lt;code&gt;blue&lt;/code&gt;, &lt;code&gt;#04a3f9&lt;/code&gt;, &lt;code&gt;rgba(255, 0, 0, 0.5)&lt;/code&gt;)</source>
          <target state="translated">colores (por ejemplo , &lt;code&gt;blue&lt;/code&gt; , &lt;code&gt;#04a3f9&lt;/code&gt; , &lt;code&gt;rgba(255, 0, 0, 0.5)&lt;/code&gt; )</target>
        </trans-unit>
        <trans-unit id="41dfc188a657086391d84f0d7d61638c451f41b5" translate="yes" xml:space="preserve">
          <source>comparable</source>
          <target state="translated">comparable</target>
        </trans-unit>
        <trans-unit id="a17ecb8b3662485fab6e4862ac7b6bb4a854fe32" translate="yes" xml:space="preserve">
          <source>comparable($number1, $number2)</source>
          <target state="translated">comparable($número1,$número2)</target>
        </trans-unit>
        <trans-unit id="6d5c9dab960e525ed112945029e61215d50dbc52" translate="yes" xml:space="preserve">
          <source>complement</source>
          <target state="translated">complement</target>
        </trans-unit>
        <trans-unit id="b589ca7a7c989e0d901f5953e557459e953b843c" translate="yes" xml:space="preserve">
          <source>complement($color)</source>
          <target state="translated">complement($color)</target>
        </trans-unit>
        <trans-unit id="48f7116d514a7e1a200742892a25afba9684b2c2" translate="yes" xml:space="preserve">
          <source>computes &lt;code&gt;01 * 2 = 02&lt;/code&gt;, &lt;code&gt;02 * 2 = 04&lt;/code&gt;, and &lt;code&gt;03 * 2 = 06&lt;/code&gt;, and is compiled to:</source>
          <target state="translated">calcula &lt;code&gt;01 * 2 = 02&lt;/code&gt; , &lt;code&gt;02 * 2 = 04&lt;/code&gt; y &lt;code&gt;03 * 2 = 06&lt;/code&gt; , y se compila para:</target>
        </trans-unit>
        <trans-unit id="5d144fff406c46e1c643e6341d2218f55a50f5ab" translate="yes" xml:space="preserve">
          <source>computes &lt;code&gt;01 + 04 = 05&lt;/code&gt;, &lt;code&gt;02 + 05 = 07&lt;/code&gt;, and &lt;code&gt;03 + 06 = 09&lt;/code&gt;, and is compiled to:</source>
          <target state="translated">calcula &lt;code&gt;01 + 04 = 05&lt;/code&gt; , &lt;code&gt;02 + 05 = 07&lt;/code&gt; y &lt;code&gt;03 + 06 = 09&lt;/code&gt; , y se compila para:</target>
        </trans-unit>
        <trans-unit id="f18c929905ac2ff3971ff803fb0536e1135f7bd0" translate="yes" xml:space="preserve">
          <source>content_exists</source>
          <target state="translated">content_exists</target>
        </trans-unit>
        <trans-unit id="458796e4e963a163322319ba62d683315a930a09" translate="yes" xml:space="preserve">
          <source>counter</source>
          <target state="translated">counter</target>
        </trans-unit>
        <trans-unit id="823683510d4f10536d4a492b82ca2b1bc24f5fcb" translate="yes" xml:space="preserve">
          <source>counter($args...)</source>
          <target state="translated">counter($args...)</target>
        </trans-unit>
        <trans-unit id="9ef65378b90a121f4afd568ccf6ba8211b70ec73" translate="yes" xml:space="preserve">
          <source>counters</source>
          <target state="translated">counters</target>
        </trans-unit>
        <trans-unit id="9eaea663fc86510b9de7edd46ad9ca14dad1f321" translate="yes" xml:space="preserve">
          <source>counters($args...)</source>
          <target state="translated">counters($args...)</target>
        </trans-unit>
        <trans-unit id="e52f1f026347e253ce2eed323018bd1b14329d74" translate="yes" xml:space="preserve">
          <source>css(Bool) &amp;mdash; Whether to get a plain CSS function.</source>
          <target state="translated">css (Bool): si se debe obtener una funci&amp;oacute;n CSS simple.</target>
        </trans-unit>
        <trans-unit id="9d434f61af343dbcd39c63e84bbeee6944187977" translate="yes" xml:space="preserve">
          <source>darken</source>
          <target state="translated">darken</target>
        </trans-unit>
        <trans-unit id="8286568ef2f919cb3a12a1b2bfe6e62463c6f81b" translate="yes" xml:space="preserve">
          <source>darken($color, $amount)</source>
          <target state="translated">oscurecer($color,$amount)</target>
        </trans-unit>
        <trans-unit id="6d5b4b9af4cabbe1e4882083c53be8a7f7344c86" translate="yes" xml:space="preserve">
          <source>desaturate</source>
          <target state="translated">desaturate</target>
        </trans-unit>
        <trans-unit id="c0827bd704098219bedc6b15f2fd5c64a9846b8d" translate="yes" xml:space="preserve">
          <source>desaturate($color, $amount)</source>
          <target state="translated">desaturado($color,$amount)</target>
        </trans-unit>
        <trans-unit id="4addec3932ac055130662ca9b3b2926fcde4d2b1" translate="yes" xml:space="preserve">
          <source>feature_exists</source>
          <target state="translated">feature_exists</target>
        </trans-unit>
        <trans-unit id="84729169c70a4fa6f86b34577ef113554c52b4e8" translate="yes" xml:space="preserve">
          <source>feature_exists($feature)</source>
          <target state="translated">feature_exists($feature)</target>
        </trans-unit>
        <trans-unit id="3684c9d3c05e7bee19e2728c6a5b2bbccf0cd9c7" translate="yes" xml:space="preserve">
          <source>floor</source>
          <target state="translated">floor</target>
        </trans-unit>
        <trans-unit id="00dff11ab1e2ad6add8f49c93694d595233d86a8" translate="yes" xml:space="preserve">
          <source>floor($number)</source>
          <target state="translated">floor($number)</target>
        </trans-unit>
        <trans-unit id="cd5cb66563a5f1dd282896b4bd49e68528a39782" translate="yes" xml:space="preserve">
          <source>function references</source>
          <target state="translated">referencias de funciones</target>
        </trans-unit>
        <trans-unit id="8b93d084be74d48f58fef2ec03bee143b1bd2e7e" translate="yes" xml:space="preserve">
          <source>function_exists</source>
          <target state="translated">function_exists</target>
        </trans-unit>
        <trans-unit id="73efae2687075416b181ef3fbdb71a8be3fb8c1d" translate="yes" xml:space="preserve">
          <source>function_exists($name)</source>
          <target state="translated">function_exists($name)</target>
        </trans-unit>
        <trans-unit id="9a810897a9090fd61a907f05d62146e8d95779e0" translate="yes" xml:space="preserve">
          <source>get_function</source>
          <target state="translated">get_function</target>
        </trans-unit>
        <trans-unit id="73a94d5898a6c4c7ff69ab7a3f58d514f0f4ea66" translate="yes" xml:space="preserve">
          <source>get_function($name, $css:false)</source>
          <target state="translated">get_function($nombre,$css:false)</target>
        </trans-unit>
        <trans-unit id="53db0bb67179b9cf1b228159b12f80aa5b9543fc" translate="yes" xml:space="preserve">
          <source>global_variable_exists</source>
          <target state="translated">global_variable_exists</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
