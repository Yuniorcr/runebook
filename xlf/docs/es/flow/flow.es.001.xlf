<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="es" datatype="htmlbody" original="flow">
    <body>
      <group id="flow">
        <trans-unit id="f9287b3fad8f092d74f4ec6aadb5a29cf9ba2e63" translate="yes" xml:space="preserve">
          <source>&amp;copy; 2013&amp;ndash;present Facebook Inc.</source>
          <target state="translated">&amp;copy; 2013 &amp;ndash; presente Facebook Inc.</target>
        </trans-unit>
        <trans-unit id="503a7ef34e5694be261272081a6d34cc44e0d368" translate="yes" xml:space="preserve">
          <source>(&lt;a href=&quot;https://flow.org/try/#0PQKgBAAgZgNg9gdzCYAoVAXAngBwKZgCCAxhgJZwB2YAvGKmGAD5gDe2+AXGAOSE8AaMDgCGWeCIAm3AM4YATmUoBzAL6MGzNhzzceAIUHCxE6WEoBXALYAjPPNUBudMGBgA8gGlUxKnLBQAIy0YAAUIqQUlNwk5FQAlLQAfGyaMghkGMQAFmERcZQAdDqJrJqMxCIyBHw83PJ4GBby1PlRhaLicFKFMHgqGNnOjBVVNYb1jc2tkVQdJt2SYADUYIEADMNgqqg7Lm4AcnAYHp5gFpS+Vlb9J1Bw8mD28g8yAISorr6U-lAATCFQuxcHghJ1TKoYrNKIkaCkyq5GOlMjkwiVUoiRpVqrx+JMmi1jF0en0BkNPm4sWNeBMwA0CdRwYsVmtNhTGDtEaogA&quot;&gt;https://flow.org/try&lt;/a&gt;)</source>
          <target state="translated">(&lt;a href=&quot;https://flow.org/try/#0PQKgBAAgZgNg9gdzCYAoVAXAngBwKZgCCAxhgJZwB2YAvGKmGAD5gDe2+AXGAOSE8AaMDgCGWeCIAm3AM4YATmUoBzAL6MGzNhzzceAIUHCxE6WEoBXALYAjPPNUBudMGBgA8gGlUxKnLBQAIy0YAAUIqQUlNwk5FQAlLQAfGyaMghkGMQAFmERcZQAdDqJrJqMxCIyBHw83PJ4GBby1PlRhaLicFKFMHgqGNnOjBVVNYb1jc2tkVQdJt2SYADUYIEADMNgqqg7Lm4AcnAYHp5gFpS+Vlb9J1Bw8mD28g8yAISorr6U-lAATCFQuxcHghJ1TKoYrNKIkaCkyq5GOlMjkwiVUoiRpVqrx+JMmi1jF0en0BkNPm4sWNeBMwA0CdRwYsVmtNhTGDtEaogA&quot;&gt;https://flow.org/try&lt;/a&gt;)</target>
        </trans-unit>
        <trans-unit id="eabf0a1897fda94c2e7ebc351cec25f06658c93f" translate="yes" xml:space="preserve">
          <source>(Example adapted from the &lt;a href=&quot;https://reacttraining.com/react-router/core/api/Route/children-func&quot;&gt;&lt;code&gt;react-router&lt;/code&gt; documentation&lt;/a&gt;.)</source>
          <target state="translated">(Ejemplo adaptado de la &lt;a href=&quot;https://reacttraining.com/react-router/core/api/Route/children-func&quot;&gt;documentaci&amp;oacute;n de &lt;/a&gt; &lt;code&gt;react-router&lt;/code&gt; ).</target>
        </trans-unit>
        <trans-unit id="42553dcf511140edb9c7fe5b095d179ad3d34209" translate="yes" xml:space="preserve">
          <source>.flowconfig</source>
          <target state="translated">.flowconfig</target>
        </trans-unit>
        <trans-unit id="2a0c7002997e311437a0c70c2313661b929d09ce" translate="yes" xml:space="preserve">
          <source>.flowconfig [declarations]</source>
          <target state="translated">.flowconfig [declaraciones]</target>
        </trans-unit>
        <trans-unit id="d3dd6ba8743bbd7b4542e5b7d98c01e397699462" translate="yes" xml:space="preserve">
          <source>.flowconfig [ignore]</source>
          <target state="translated">.flowconfig [ignorar]</target>
        </trans-unit>
        <trans-unit id="4cd3ed66f9dc2ea1ae8c5970c30160743de16d59" translate="yes" xml:space="preserve">
          <source>.flowconfig [include]</source>
          <target state="translated">.flowconfig [incluir]</target>
        </trans-unit>
        <trans-unit id="3ea7d542265be35c8d390fac59fd3922fa10029f" translate="yes" xml:space="preserve">
          <source>.flowconfig [libs]</source>
          <target state="translated">.flowconfig [libs]</target>
        </trans-unit>
        <trans-unit id="c19cd00744af8fb6b750b055353a165de408ef34" translate="yes" xml:space="preserve">
          <source>.flowconfig [lints]</source>
          <target state="translated">.flowconfig [pelusas]</target>
        </trans-unit>
        <trans-unit id="2be99164d570a360166709ab948593a53e747ee5" translate="yes" xml:space="preserve">
          <source>.flowconfig [options]</source>
          <target state="translated">.flowconfig [opciones]</target>
        </trans-unit>
        <trans-unit id="84e57eb03e551cd373c767c8c1b1d4e0b233bd32" translate="yes" xml:space="preserve">
          <source>.flowconfig [untyped]</source>
          <target state="translated">.flowconfig [sin tipo]</target>
        </trans-unit>
        <trans-unit id="6e95572239f9d638c63d382400d10b3a21062e5b" translate="yes" xml:space="preserve">
          <source>.flowconfig [version]</source>
          <target state="translated">.flowconfig [versi&amp;oacute;n]</target>
        </trans-unit>
        <trans-unit id="f75dc1d3fd7cae440d82a0aa033937f60c951c83" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;#toc-check-your-code&quot;&gt;Check your code&lt;/a&gt; for type errors.</source>
          <target state="translated">&lt;a href=&quot;#toc-check-your-code&quot;&gt;Verifique su c&amp;oacute;digo&lt;/a&gt; para ver si hay errores de tipo.</target>
        </trans-unit>
        <trans-unit id="8bab6e4eae9423dd12abe68c046f07b864298440" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;#toc-initialize-your-project&quot;&gt;Initialize your project&lt;/a&gt; with &lt;code&gt;flow init&lt;/code&gt;.</source>
          <target state="translated">&lt;a href=&quot;#toc-initialize-your-project&quot;&gt;Inicialice su proyecto&lt;/a&gt; con &lt;code&gt;flow init&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="3d9e05645c42f52a6d394efa517892368a0d28c4" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;#toc-prepare-your-code-for-flow&quot;&gt;Determine&lt;/a&gt; which files Flow will monitor with &lt;code&gt;// @flow&lt;/code&gt;.</source>
          <target state="translated">&lt;a href=&quot;#toc-prepare-your-code-for-flow&quot;&gt;Determine&lt;/a&gt; qu&amp;eacute; archivos supervisar&amp;aacute; Flow con &lt;code&gt;// @flow&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="336448ab183f9e44d80f92a10e044c594b5d94a9" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;#toc-write-flow-code&quot;&gt;Write Flow code&lt;/a&gt; for your project.</source>
          <target state="translated">&lt;a href=&quot;#toc-write-flow-code&quot;&gt;Escriba el c&amp;oacute;digo de flujo&lt;/a&gt; para su proyecto.</target>
        </trans-unit>
        <trans-unit id="34cd8914987eabdf3008fb9dec6130b2e2a3a08a" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;../types#toc-react-childrenarray&quot;&gt;&lt;code&gt;React.ChildrenArray&amp;lt;T&amp;gt;&lt;/code&gt;&lt;/a&gt; is a type that models React nested array data structure for children. &lt;code&gt;ReactNodeWithoutStrings&lt;/code&gt; uses &lt;a href=&quot;../types#toc-react-childrenarray&quot;&gt;&lt;code&gt;React.ChildrenArray&amp;lt;T&amp;gt;&lt;/code&gt;&lt;/a&gt; to be an arbitrarily nested array of null, boolean, or React elements.</source>
          <target state="translated">&lt;a href=&quot;../types#toc-react-childrenarray&quot;&gt; &lt;code&gt;React.ChildrenArray&amp;lt;T&amp;gt;&lt;/code&gt; &lt;/a&gt; es un tipo que modela la estructura de datos de matriz anidada de React para ni&amp;ntilde;os. &lt;code&gt;ReactNodeWithoutStrings&lt;/code&gt; usa&lt;a href=&quot;../types#toc-react-childrenarray&quot;&gt; &lt;code&gt;React.ChildrenArray&amp;lt;T&amp;gt;&lt;/code&gt; &lt;/a&gt; para ser una matriz anidada arbitrariamente de elementos nulos, booleanos o React.</target>
        </trans-unit>
        <trans-unit id="e273fef233f652d4764944c36bc8e7d44f3499a9" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;../types#toc-react-element&quot;&gt;&lt;code&gt;React.Element&amp;lt;typeof Component&amp;gt;&lt;/code&gt;&lt;/a&gt; is the type of a React element like &lt;code&gt;&amp;lt;div/&amp;gt;&lt;/code&gt; or &lt;code&gt;&amp;lt;MyComponent/&amp;gt;&lt;/code&gt;. Notably elements are not the same as components!</source>
          <target state="translated">&lt;a href=&quot;../types#toc-react-element&quot;&gt; &lt;code&gt;React.Element&amp;lt;typeof Component&amp;gt;&lt;/code&gt; &lt;/a&gt; es el tipo de un elemento React como &lt;code&gt;&amp;lt;div/&amp;gt;&lt;/code&gt; o &lt;code&gt;&amp;lt;MyComponent/&amp;gt;&lt;/code&gt; . &amp;iexcl;En particular, los elementos no son lo mismo que los componentes!</target>
        </trans-unit>
        <trans-unit id="0f4966d59ad6be431d4d59785410831a89f983b0" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;../types#toc-react-node&quot;&gt;&lt;code&gt;React.Node&lt;/code&gt;&lt;/a&gt; is the general type for children, but sometimes you might want to use &lt;a href=&quot;../types#toc-react-node&quot;&gt;&lt;code&gt;React.Node&lt;/code&gt;&lt;/a&gt; while excluding some primitives like strings and numbers. &lt;a href=&quot;http://facebook.github.io/react-native/docs/view.html&quot;&gt;The React Native &lt;code&gt;&amp;lt;View&amp;gt;&lt;/code&gt; component&lt;/a&gt; does this, for example.</source>
          <target state="translated">&lt;a href=&quot;../types#toc-react-node&quot;&gt; &lt;code&gt;React.Node&lt;/code&gt; &lt;/a&gt; es el tipo general para ni&amp;ntilde;os, pero a veces es posible que desee usar&lt;a href=&quot;../types#toc-react-node&quot;&gt; &lt;code&gt;React.Node&lt;/code&gt; &lt;/a&gt; mientras excluye algunas primitivas como cadenas y n&amp;uacute;meros. &lt;a href=&quot;http://facebook.github.io/react-native/docs/view.html&quot;&gt;El componente React Native &lt;code&gt;&amp;lt;View&amp;gt;&lt;/code&gt; &lt;/a&gt; hace esto, por ejemplo.</target>
        </trans-unit>
        <trans-unit id="963edf04e5c1211a70a41cca0fb72a3daa83dbac" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;../types#toc-react-node&quot;&gt;&lt;code&gt;React.Node&lt;/code&gt;&lt;/a&gt; is the general type for children, but sometimes you might want to use &lt;a href=&quot;../types#toc-react-node&quot;&gt;&lt;code&gt;React.Node&lt;/code&gt;&lt;/a&gt; while excluding some primitives like strings and numbers. &lt;a href=&quot;https://facebook.github.io/react-native/docs/view.html&quot;&gt;The React Native &lt;code&gt;&amp;lt;View&amp;gt;&lt;/code&gt; component&lt;/a&gt; does this, for example.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7cf7f34d3e52f3dec53af2db9a70edf0af8a23b0" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;http://exploringjs.com/es6/ch_modules.html&quot;&gt;ES modules&lt;/a&gt; have two kinds of exports: A &lt;strong&gt;named&lt;/strong&gt; export and a &lt;strong&gt;default&lt;/strong&gt; export. Flow supports the ability to declare either or both of these kinds of exports within a &lt;code&gt;declare module&lt;/code&gt; body as follows:</source>
          <target state="translated">&lt;a href=&quot;http://exploringjs.com/es6/ch_modules.html&quot;&gt;Los m&amp;oacute;dulos ES&lt;/a&gt; tienen dos tipos de exportaciones: una exportaci&amp;oacute;n con &lt;strong&gt;nombre&lt;/strong&gt; y una exportaci&amp;oacute;n &lt;strong&gt;predeterminada&lt;/strong&gt; . Flow admite la capacidad de declarar uno o ambos tipos de exportaciones dentro de un cuerpo de &lt;code&gt;declare module&lt;/code&gt; siguiente manera:</target>
        </trans-unit>
        <trans-unit id="17c120254fa9c516a881da71a463bb260e63bcd7" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;http://facebook.github.io/react-native/docs/tabbarios.html&quot;&gt;React Native&amp;rsquo;s &lt;code&gt;&amp;lt;TabBarIOS&amp;gt;&lt;/code&gt; component&lt;/a&gt; only allows React element children and those elements &lt;em&gt;must&lt;/em&gt; have a component type of &lt;code&gt;&amp;lt;TabBarIOS.Item&amp;gt;&lt;/code&gt;. You are expected to use &lt;code&gt;&amp;lt;TabBarIOS&amp;gt;&lt;/code&gt; like:</source>
          <target state="translated">&lt;a href=&quot;http://facebook.github.io/react-native/docs/tabbarios.html&quot;&gt;El componente &lt;code&gt;&amp;lt;TabBarIOS&amp;gt;&lt;/code&gt; de React Native&lt;/a&gt; solo permite elementos secundarios de React y esos elementos &lt;em&gt;deben&lt;/em&gt; tener un tipo de componente de &lt;code&gt;&amp;lt;TabBarIOS.Item&amp;gt;&lt;/code&gt; . Se espera que use &lt;code&gt;&amp;lt;TabBarIOS&amp;gt;&lt;/code&gt; como:</target>
        </trans-unit>
        <trans-unit id="cf8957393a72df26897385761d8aa21a45d75df4" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;http://facebook.github.io/react-native/docs/view.html&quot;&gt;The React Native &lt;code&gt;&amp;lt;View&amp;gt;&lt;/code&gt; component&lt;/a&gt; will allow any primitive value or any React element as its children. However, &lt;code&gt;&amp;lt;View&amp;gt;&lt;/code&gt; does not allow strings or numbers as children! You could use &lt;a href=&quot;../types#toc-react-node&quot;&gt;&lt;code&gt;React.Node&lt;/code&gt;&lt;/a&gt; as the children type for &lt;code&gt;&amp;lt;View&amp;gt;&lt;/code&gt;, however &lt;a href=&quot;../types#toc-react-node&quot;&gt;&lt;code&gt;React.Node&lt;/code&gt;&lt;/a&gt; includes strings which we don&amp;rsquo;t want for &lt;code&gt;&amp;lt;View&amp;gt;&lt;/code&gt;. So we need to create our own type.</source>
          <target state="translated">&lt;a href=&quot;http://facebook.github.io/react-native/docs/view.html&quot;&gt;El componente React Native &lt;code&gt;&amp;lt;View&amp;gt;&lt;/code&gt; &lt;/a&gt; permitir&amp;aacute; cualquier valor primitivo o cualquier elemento React como sus hijos. Sin embargo, &lt;code&gt;&amp;lt;View&amp;gt;&lt;/code&gt; no permite cadenas o n&amp;uacute;meros como hijos. Puede usar &lt;a href=&quot;../types#toc-react-node&quot;&gt; &lt;code&gt;React.Node&lt;/code&gt; &lt;/a&gt; como el tipo secundario para &lt;code&gt;&amp;lt;View&amp;gt;&lt;/code&gt; , sin embargo, &lt;a href=&quot;../types#toc-react-node&quot;&gt; &lt;code&gt;React.Node&lt;/code&gt; &lt;/a&gt; incluye cadenas que no queremos para &lt;code&gt;&amp;lt;View&amp;gt;&lt;/code&gt; . Entonces necesitamos crear nuestro propio tipo.</target>
        </trans-unit>
        <trans-unit id="ad2498aaf0a179d73775581b93f384fe069a1601" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;http://frantic.im/using-redux-with-flow&quot;&gt;Using Redux with Flow&lt;/a&gt; - Alex Kotliarskyi</source>
          <target state="translated">&lt;a href=&quot;http://frantic.im/using-redux-with-flow&quot;&gt;Usando Redux con Flow&lt;/a&gt; - Alex Kotliarskyi</target>
        </trans-unit>
        <trans-unit id="8449c031ca7fc8f782a895f5de5db0cd2312f7ea" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;http://redux.js.org&quot;&gt;Redux&lt;/a&gt; has three major parts that should be typed:</source>
          <target state="translated">&lt;a href=&quot;http://redux.js.org&quot;&gt;Redux&lt;/a&gt; tiene tres partes principales que deben escribirse:</target>
        </trans-unit>
        <trans-unit id="d778c6db4ed26b14b4bcc87859b7232d009a05a6" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;http://redux.js.org/docs/basics/Reducers.html&quot;&gt;Reducers&lt;/a&gt; take the state and actions that we&amp;rsquo;ve typed and pulls them together for one method.</source>
          <target state="translated">&lt;a href=&quot;http://redux.js.org/docs/basics/Reducers.html&quot;&gt;Los reductores&lt;/a&gt; toman el estado y las acciones que hemos escrito y los re&amp;uacute;nen para un m&amp;eacute;todo.</target>
        </trans-unit>
        <trans-unit id="1e1a716310cc261310c0720a3defabf948f65c71" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://atom.io/packages/autocomplete-flow&quot;&gt;autocomplete-flow&lt;/a&gt; is another purpose-built tool that only does one thing. This package, as the name suggests, will give your flow enabled code autocomplete suggestions and nothing else.</source>
          <target state="translated">&lt;a href=&quot;https://atom.io/packages/autocomplete-flow&quot;&gt;autocomplete-flow&lt;/a&gt; es otra herramienta especialmente dise&amp;ntilde;ada que solo hace una cosa. Este paquete, como su nombre indica, le dar&amp;aacute; a su c&amp;oacute;digo habilitado para flujo sugerencias de autocompletado y nada m&amp;aacute;s.</target>
        </trans-unit>
        <trans-unit id="70aa1aa8e107ff621d1e0476ca9e4b0d1b64169e" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://atom.io/packages/flow-ide&quot;&gt;Flow-IDE&lt;/a&gt; is a smaller package that only provides you with a linter and autocomplete functionality. It, too, currently lacks support for on-the-fly linting.</source>
          <target state="translated">&lt;a href=&quot;https://atom.io/packages/flow-ide&quot;&gt;Flow-IDE&lt;/a&gt; es un paquete m&amp;aacute;s peque&amp;ntilde;o que solo le proporciona una funcionalidad de linter y autocompletar. Tambi&amp;eacute;n carece actualmente de soporte para el pelado sobre la marcha.</target>
        </trans-unit>
        <trans-unit id="f28025c94df4bd4e067f5342e62bb2bdd9bb61de" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://atom.io/packages/ide-flowtype&quot;&gt;Flow for Atom IDE&lt;/a&gt; is extracted from &lt;a href=&quot;https://nuclide.io&quot;&gt;Nuclide&lt;/a&gt;, and works with the &lt;a href=&quot;https://ide.atom.io/&quot;&gt;Atom IDE&lt;/a&gt; UI. It brings the core features you expect in a full-featured IDE into Atom, such as language-aware autocomplete, diagnostics, go-to-definition, type hints, and symbol outlines.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0ef7fc7d336d051de3c6fc08efe1aa750a6c3fd1" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://atom.io/packages/ide-flowtype&quot;&gt;Flow for Atom IDE&lt;/a&gt; is extracted from Nuclide, and works with the &lt;a href=&quot;https://ide.atom.io/&quot;&gt;Atom IDE&lt;/a&gt; UI. It brings the core features you expect in a full-featured IDE into Atom, such as language-aware autocomplete, diagnostics, go-to-definition, type hints, and symbol outlines.</source>
          <target state="translated">&lt;a href=&quot;https://atom.io/packages/ide-flowtype&quot;&gt;Flow para Atom IDE&lt;/a&gt; se extrae de Nuclide y funciona con la &lt;a href=&quot;https://ide.atom.io/&quot;&gt;interfaz de&lt;/a&gt; usuario de Atom IDE . Incorpora las funciones principales que espera en un IDE con todas las funciones a Atom, como el autocompletado con reconocimiento del idioma, los diagn&amp;oacute;sticos, la definici&amp;oacute;n de acceso, las sugerencias de tipo y los contornos de s&amp;iacute;mbolos.</target>
        </trans-unit>
        <trans-unit id="f392cb41c6c533748c908f516d743440fc3fc957" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://code.visualstudio.com/&quot;&gt;Visual Studio Code&lt;/a&gt; has several editor integrations for using Flow.</source>
          <target state="translated">&lt;a href=&quot;https://code.visualstudio.com/&quot;&gt;Visual Studio Code&lt;/a&gt; tiene varias integraciones de editor para usar Flow.</target>
        </trans-unit>
        <trans-unit id="c9063547b6f2cf049c23bf3397502f883a7d1ded" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://facebook.github.io/react-native/docs/tabbarios.html&quot;&gt;React Native&amp;rsquo;s &lt;code&gt;&amp;lt;TabBarIOS&amp;gt;&lt;/code&gt; component&lt;/a&gt; only allows React element children and those elements &lt;em&gt;must&lt;/em&gt; have a component type of &lt;code&gt;&amp;lt;TabBarIOS.Item&amp;gt;&lt;/code&gt;. You are expected to use &lt;code&gt;&amp;lt;TabBarIOS&amp;gt;&lt;/code&gt; like:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c876f2dbd3436f1ec898e8e960c651894e63612e" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://facebook.github.io/react-native/docs/view.html&quot;&gt;The React Native &lt;code&gt;&amp;lt;View&amp;gt;&lt;/code&gt; component&lt;/a&gt; will allow any primitive value or any React element as its children. However, &lt;code&gt;&amp;lt;View&amp;gt;&lt;/code&gt; does not allow strings or numbers as children! You could use &lt;a href=&quot;../types#toc-react-node&quot;&gt;&lt;code&gt;React.Node&lt;/code&gt;&lt;/a&gt; as the children type for &lt;code&gt;&amp;lt;View&amp;gt;&lt;/code&gt;, however &lt;a href=&quot;../types#toc-react-node&quot;&gt;&lt;code&gt;React.Node&lt;/code&gt;&lt;/a&gt; includes strings which we don&amp;rsquo;t want for &lt;code&gt;&amp;lt;View&amp;gt;&lt;/code&gt;. So we need to create our own type.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3f30e103a4115c80055634733b0aa13e5b344c45" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://facebook.github.io/watchman/&quot;&gt;Watchman&lt;/a&gt; must be installed and the &lt;code&gt;watchman&lt;/code&gt; binary must be in the PATH.</source>
          <target state="translated">&lt;a href=&quot;https://facebook.github.io/watchman/&quot;&gt;Watchman&lt;/a&gt; debe estar instalado y el binario de &lt;code&gt;watchman&lt;/code&gt; debe estar en el PATH.</target>
        </trans-unit>
        <trans-unit id="f963c3075e23bb3cf6001267bae91bbb9c401ba6" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://flow.org/en/linting/rule-reference/#toc-nonstrict-import&quot;&gt;&lt;code&gt;nonstrict-import&lt;/code&gt;&lt;/a&gt;: Triggers an error when importing from a module which is not also &lt;code&gt;@flow strict&lt;/code&gt;. This is very important, because it means that when a file is marked as strict, all of its dependencies are strict as well.</source>
          <target state="translated">&lt;a href=&quot;https://flow.org/en/linting/rule-reference/#toc-nonstrict-import&quot;&gt; &lt;code&gt;nonstrict-import&lt;/code&gt; &lt;/a&gt; : desencadena un error al importar desde un m&amp;oacute;dulo que no es tambi&amp;eacute;n &lt;code&gt;@flow strict&lt;/code&gt; . Esto es muy importante, porque significa que cuando un archivo se marca como estricto, todas sus dependencias tambi&amp;eacute;n lo son.</target>
        </trans-unit>
        <trans-unit id="23dc038c2ecb0a3dd5d8efa5dc006412b7663f59" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://flow.org/en/linting/rule-reference/#toc-sketchy-null&quot;&gt;&lt;code&gt;sketchy-null&lt;/code&gt;&lt;/a&gt;: Triggers an error when doing an existence check on a value that could be null/undefined or falsey.</source>
          <target state="translated">&lt;a href=&quot;https://flow.org/en/linting/rule-reference/#toc-sketchy-null&quot;&gt; &lt;code&gt;sketchy-null&lt;/code&gt; &lt;/a&gt; : desencadena un error al realizar una verificaci&amp;oacute;n de existencia en un valor que podr&amp;iacute;a ser nulo / indefinido o falso.</target>
        </trans-unit>
        <trans-unit id="56b2dc1b2d6f50b7b575c022bf5062e97e364ce7" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://flow.org/en/linting/rule-reference/#toc-unclear-type&quot;&gt;&lt;code&gt;unclear-type&lt;/code&gt;&lt;/a&gt;: Triggers an error when using &lt;code&gt;Object&lt;/code&gt;, &lt;code&gt;Function&lt;/code&gt;, or &lt;code&gt;any&lt;/code&gt; in a type annotation.</source>
          <target state="translated">&lt;a href=&quot;https://flow.org/en/linting/rule-reference/#toc-unclear-type&quot;&gt; &lt;code&gt;unclear-type&lt;/code&gt; &lt;/a&gt; : desencadena un error al usar &lt;code&gt;Object&lt;/code&gt; , &lt;code&gt;Function&lt;/code&gt; o &lt;code&gt;any&lt;/code&gt; en una anotaci&amp;oacute;n de tipo.</target>
        </trans-unit>
        <trans-unit id="acccc45b43c76d68c5b6f5a5cb4efb4873e9f331" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://flow.org/en/linting/rule-reference/#toc-unsafe-getters-setters&quot;&gt;&lt;code&gt;unsafe-getters-setters&lt;/code&gt;&lt;/a&gt;: Triggers an error when using getters and setters, which can be unsafe.</source>
          <target state="translated">&lt;a href=&quot;https://flow.org/en/linting/rule-reference/#toc-unsafe-getters-setters&quot;&gt; &lt;code&gt;unsafe-getters-setters&lt;/code&gt; &lt;/a&gt; : activa un error al usar getters y setters, que pueden ser inseguros.</target>
        </trans-unit>
        <trans-unit id="50e62738926445ab80ca91b62a51deef77f07c6d" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://flow.org/en/linting/rule-reference/#toc-untyped-import&quot;&gt;&lt;code&gt;untyped-import&lt;/code&gt;&lt;/a&gt;: Triggers an error when importing from an untyped module.</source>
          <target state="translated">&lt;a href=&quot;https://flow.org/en/linting/rule-reference/#toc-untyped-import&quot;&gt; &lt;code&gt;untyped-import&lt;/code&gt; &lt;/a&gt; : activa un error al importar desde un m&amp;oacute;dulo sin tipo.</target>
        </trans-unit>
        <trans-unit id="d428c85916fe38ed4c6c020088009c38838b5b26" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://flow.org/en/linting/rule-reference/#toc-untyped-type-import&quot;&gt;&lt;code&gt;untyped-type-import&lt;/code&gt;&lt;/a&gt;: Triggers an error when importing a type from an untyped module.</source>
          <target state="translated">&lt;a href=&quot;https://flow.org/en/linting/rule-reference/#toc-untyped-type-import&quot;&gt; &lt;code&gt;untyped-type-import&lt;/code&gt; &lt;/a&gt; : activa un error al importar un tipo desde un m&amp;oacute;dulo sin tipo.</target>
        </trans-unit>
        <trans-unit id="8f07b8879f1946951cbf77557ef11a9915432823" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://flow.org/en/types/objects/#toc-exact-object-types&quot;&gt;Exact object types&lt;/a&gt; disable width subtyping, and do not allow additional properties to exist.</source>
          <target state="translated">&lt;a href=&quot;https://flow.org/en/types/objects/#toc-exact-object-types&quot;&gt;Los tipos de objetos exactos&lt;/a&gt; inhabilitan el subtipo de ancho y no permiten que existan propiedades adicionales.</target>
        </trans-unit>
        <trans-unit id="8a4bdbb0a8e0346c9734fd8517bb3446a477d3c4" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://github.com/facebook/flow/tree/master/packages/flow-remove-types&quot;&gt;&lt;code&gt;flow-remove-types&lt;/code&gt;&lt;/a&gt; is a small CLI tool for stripping Flow type annotations from files. It&amp;rsquo;s a lighter-weight alternative to Babel for projects that don&amp;rsquo;t need everything Babel provides.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7bb6540eba761465bf65a5ccdd99346953e691d3" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://github.com/facebookincubator/create-react-app&quot;&gt;Create React App&lt;/a&gt; already supports Flow by default. All you need to do is &lt;a href=&quot;https://flow.org/en/install/&quot;&gt;install Flow&lt;/a&gt; and create a &lt;code&gt;.flowconfig&lt;/code&gt; file by running &lt;code&gt;flow init&lt;/code&gt;.</source>
          <target state="translated">&lt;a href=&quot;https://github.com/facebookincubator/create-react-app&quot;&gt;Create React App&lt;/a&gt; ya es compatible con Flow de forma predeterminada. Todo lo que necesita hacer es &lt;a href=&quot;https://flow.org/en/install/&quot;&gt;instalar Flow&lt;/a&gt; y crear un archivo &lt;code&gt;.flowconfig&lt;/code&gt; ejecutando &lt;code&gt;flow init&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="5375300eb5712965cf5fc5cb3cf56433133be9cb" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://github.com/flowtype/flow-remove-types&quot;&gt;&lt;code&gt;flow-remove-types&lt;/code&gt;&lt;/a&gt; is a small CLI tool for stripping Flow type annotations from files. It&amp;rsquo;s a lighter-weight alternative to Babel for projects that don&amp;rsquo;t need everything Babel provides.</source>
          <target state="translated">&lt;a href=&quot;https://github.com/flowtype/flow-remove-types&quot;&gt; &lt;code&gt;flow-remove-types&lt;/code&gt; &lt;/a&gt; es una peque&amp;ntilde;a herramienta CLI para eliminar las anotaciones de tipo Flow de los archivos. Es una alternativa m&amp;aacute;s ligera a Babel para proyectos que no necesitan todo lo que Babel ofrece.</target>
        </trans-unit>
        <trans-unit id="518c67db26b37e0a41e20d16b7df11d4b116b8cb" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://github.com/neoclide/coc.nvim&quot;&gt;Coc&lt;/a&gt; is an intellisense engine for vim8 &amp;amp; neovim.</source>
          <target state="translated">&lt;a href=&quot;https://github.com/neoclide/coc.nvim&quot;&gt;Coc&lt;/a&gt; es un motor intellisense para vim8 y neovim.</target>
        </trans-unit>
        <trans-unit id="79e9310832926dd892f262feeb40312198e89414" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=flowtype.flow-for-vscode&quot;&gt;Flow Language Support&lt;/a&gt; provides all the functionality you would expect &amp;mdash; linting, intellisense, type tooltips and click-to-definition. It&amp;rsquo;s stable and under active development.</source>
          <target state="translated">&lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=flowtype.flow-for-vscode&quot;&gt;Flow Language Support&lt;/a&gt; proporciona toda la funcionalidad que usted esperar&amp;iacute;a: linting, intellisense, informaci&amp;oacute;n sobre herramientas de texto y clic para definir. Es estable y en desarrollo activo.</target>
        </trans-unit>
        <trans-unit id="7c85b0e7dccf1df1c9799d9517b8f07ae7d48726" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://medium.com/@cdebotton/redux-and-flowtype-69ff1dd09036#.fsrm1amlk&quot;&gt;Redux and Flowtype&lt;/a&gt; - Christian de Botton</source>
          <target state="translated">&lt;a href=&quot;https://medium.com/@cdebotton/redux-and-flowtype-69ff1dd09036#.fsrm1amlk&quot;&gt;Redux y Flowtype&lt;/a&gt; - Christian de Botton</target>
        </trans-unit>
        <trans-unit id="cb7e5873e62fe999f5738f9368ddb0246bf2dec0" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://medium.com/flow-type/on-the-roadmap-exact-objects-by-default-16b72933c5cf&quot;&gt;Flow is planning to make object types exact by default&lt;/a&gt;. This is available via an &lt;a href=&quot;https://flow.org/en/config/options/#toc-exact-by-default-boolean&quot;&gt;option in your flowconfig&lt;/a&gt;. You can also read our &lt;a href=&quot;https://medium.com/flow-type/how-to-upgrade-to-exact-by-default-object-type-syntax-7aa44b4d08ab&quot;&gt;upgrade guide&lt;/a&gt; for steps to enable this option in your own project.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b2bbb899b8c317c50fa7f4bf67ae90e51c42f496" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://nuclide.io&quot;&gt;Nuclide&lt;/a&gt; is a full IDE created by people at Facebook that has support for Flow built-in. It provides a linter, autocomplete and type coverage support, click-to-definition and type description on hover.</source>
          <target state="translated">&lt;a href=&quot;https://nuclide.io&quot;&gt;Nuclide&lt;/a&gt; es un IDE completo creado por personas en Facebook que tiene soporte para Flow integrado. Proporciona soporte de cobertura de tipo linter, autocompletado y tipo, definici&amp;oacute;n de clic y descripci&amp;oacute;n de tipo al pasar el mouse.</target>
        </trans-unit>
        <trans-unit id="559edf4d2ccba0435211897af3251919c1e55d29" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://redux.js.org&quot;&gt;Redux&lt;/a&gt; has three major parts that should be typed:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9706104248435c91942f7078e78f2cbaa21d2931" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://www.sublimetext.com/&quot;&gt;Sublime Text&lt;/a&gt; can be integrated with Flow by using &lt;a href=&quot;https://packagecontrol.io&quot;&gt;Package Control&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;https://www.sublimetext.com/&quot;&gt;Sublime Text&lt;/a&gt; se puede integrar con Flow usando &lt;a href=&quot;https://packagecontrol.io&quot;&gt;Package Control&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="832311cb20bd2c6c6484e62e8e290372fda23e34" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;tools/babel&quot;&gt; &lt;h3&gt; Babel &lt;/h3&gt; &lt;p&gt; Learn how to use Flow with Babel &lt;/p&gt; &lt;/a&gt;&lt;a href=&quot;tools/flow-remove-types&quot;&gt; &lt;h3&gt; flow-remove-types &lt;/h3&gt; &lt;p&gt; Learn how to use Flow with flow-remove-types &lt;/p&gt; &lt;/a&gt;&lt;a href=&quot;tools/create-react-app&quot;&gt; &lt;h3&gt; Create React App &lt;/h3&gt; &lt;p&gt; Learn how to use Flow with Create React App &lt;/p&gt; &lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;tools/babel&quot;&gt; &lt;h3&gt; Babel &lt;/h3&gt; &lt;p&gt; Aprenda a usar Flow con Babel &lt;/p&gt; &lt;/a&gt;&lt;a href=&quot;tools/flow-remove-types&quot;&gt; &lt;h3&gt; tipos de eliminaci&amp;oacute;n de flujo &lt;/h3&gt; &lt;p&gt; Aprenda a usar Flow con tipos de eliminaci&amp;oacute;n de flujo &lt;/p&gt; &lt;/a&gt;&lt;a href=&quot;tools/create-react-app&quot;&gt; &lt;h3&gt; Crear aplicaci&amp;oacute;n React &lt;/h3&gt; &lt;p&gt; Aprenda a usar Flow con la aplicaci&amp;oacute;n Create React &lt;/p&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="0d3edbcd8340616b98a8bb730d5f2bfb4883db8a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;$Call&amp;lt;F, T...&amp;gt;&lt;/code&gt; is a type that represents the result of calling the given &lt;a href=&quot;../functions&quot;&gt;function type&lt;/a&gt;&lt;code&gt;F&lt;/code&gt; with 0 or more arguments &lt;code&gt;T...&lt;/code&gt;. This is analogous to calling a function at runtime (or more specifically, it&amp;rsquo;s analogous to calling &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/call&quot;&gt;&lt;code&gt;Function.prototype.call&lt;/code&gt;&lt;/a&gt;), but at the type level; this means that function type calls happens statically, i.e. not at runtime.</source>
          <target state="translated">&lt;code&gt;$Call&amp;lt;F, T...&amp;gt;&lt;/code&gt; es un tipo que representa el resultado de llamar al determinado &lt;a href=&quot;../functions&quot;&gt;tipo de funci&amp;oacute;n &lt;/a&gt; &lt;code&gt;F&lt;/code&gt; con 0 o m&amp;aacute;s argumentos &lt;code&gt;T...&lt;/code&gt; . Esto es an&amp;aacute;logo a llamar a una funci&amp;oacute;n en tiempo de ejecuci&amp;oacute;n (o m&amp;aacute;s espec&amp;iacute;ficamente, es an&amp;aacute;logo a llamar a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/call&quot;&gt; &lt;code&gt;Function.prototype.call&lt;/code&gt; &lt;/a&gt; ), pero a nivel de tipo; esto significa que las llamadas al tipo de funci&amp;oacute;n se realizan de forma est&amp;aacute;tica, es decir, no en tiempo de ejecuci&amp;oacute;n.</target>
        </trans-unit>
        <trans-unit id="f2241c9b7c945bd4d93f1e03d981bbd35f587e2c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;$Call&lt;/code&gt; can be very powerful because it allows you to make calls in type-land that you would otherwise have to do at runtime. The type-land calls happen statically and will be erased at runtime.</source>
          <target state="translated">&lt;code&gt;$Call&lt;/code&gt; puede ser muy poderoso porque le permite hacer llamadas en type-land que de otra manera tendr&amp;iacute;a que hacer en tiempo de ejecuci&amp;oacute;n. Las llamadas a type-land ocurren de forma est&amp;aacute;tica y se borrar&amp;aacute;n en tiempo de ejecuci&amp;oacute;n.</target>
        </trans-unit>
        <trans-unit id="9c25dd66acf1845fd7317530f17f429c5d475619" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;$ElementType&amp;lt;T, K&amp;gt;&lt;/code&gt; is the type that represents the type of every element inside an &lt;a href=&quot;../arrays&quot;&gt;array&lt;/a&gt;, &lt;a href=&quot;../tuples&quot;&gt;tuple&lt;/a&gt; or &lt;a href=&quot;../objects&quot;&gt;object&lt;/a&gt; type &lt;code&gt;T&lt;/code&gt;, that matches the given &lt;em&gt;key&lt;/em&gt; type &lt;code&gt;K&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;$ElementType&amp;lt;T, K&amp;gt;&lt;/code&gt; es el tipo que representa el tipo de cada elemento dentro de una &lt;a href=&quot;../arrays&quot;&gt;matriz&lt;/a&gt; , &lt;a href=&quot;../tuples&quot;&gt;tupla&lt;/a&gt; o tipo de &lt;a href=&quot;../objects&quot;&gt;objeto &lt;/a&gt; &lt;code&gt;T&lt;/code&gt; , que coincide con el tipo de &lt;em&gt;clave &lt;/em&gt; &lt;code&gt;K&lt;/code&gt; dado .</target>
        </trans-unit>
        <trans-unit id="508e7e8d64ef136cbb4051692a66a33f7f03d8bf" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;$Exact&amp;lt;{name: string}&amp;gt;&lt;/code&gt; is a synonym for &lt;code&gt;{|name:string|}&lt;/code&gt; as in the &lt;a href=&quot;../objects#toc-exact-object-types&quot;&gt;Object documentation&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;$Exact&amp;lt;{name: string}&amp;gt;&lt;/code&gt; es un sin&amp;oacute;nimo de &lt;code&gt;{|name:string|}&lt;/code&gt; como en la &lt;a href=&quot;../objects#toc-exact-object-types&quot;&gt;documentaci&amp;oacute;n del objeto&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="48a4aadf5bfb1df5803fe81d048f7c5b732b8fbc" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;$FlowExpectedError&lt;/code&gt;: for a location where you expect Flow to produce a type error (for instance, when performing an invalid type cast).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="82707aa2c356a2f03927920badcb3b4e5cb10568" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;$FlowFixMe&lt;/code&gt;: for type errors that you intend to fix later</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7e38571c3a659c3e6dda303f015dbc9def78e280" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;$FlowIgnore&lt;/code&gt;: for locations where you want Flow to ignore your code</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="32d0e59d37af5cb3320a4e0a805a52b244366c2c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;$FlowIssue&lt;/code&gt;: for a type error that you suspect is an issue with Flow</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1f560c59c278bbced6c01735997cd392ca4dcce5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;$NonMaybeType&amp;lt;T&amp;gt;&lt;/code&gt; converts a type &lt;code&gt;T&lt;/code&gt; to a non-maybe type. In other words, the values of &lt;code&gt;$NonMaybeType&amp;lt;T&amp;gt;&lt;/code&gt; are the values of &lt;code&gt;T&lt;/code&gt; except for &lt;code&gt;null&lt;/code&gt; and &lt;code&gt;undefined&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;$NonMaybeType&amp;lt;T&amp;gt;&lt;/code&gt; convierte un tipo &lt;code&gt;T&lt;/code&gt; en un tipo que no es tal vez. En otras palabras, los valores de &lt;code&gt;$NonMaybeType&amp;lt;T&amp;gt;&lt;/code&gt; son los valores de &lt;code&gt;T&lt;/code&gt; excepto &lt;code&gt;null&lt;/code&gt; e &lt;code&gt;undefined&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="af15b84204f891abb40fd24979cfba73a49edad8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;$ReadOnly&amp;lt;T&amp;gt;&lt;/code&gt; is a type that represents the read-only version of a given &lt;a href=&quot;../objects&quot;&gt;object type&lt;/a&gt;&lt;code&gt;T&lt;/code&gt;. A read-only object type is an object type whose keys are all &lt;a href=&quot;../interfaces#toc-interface-property-variance-read-only-and-write-only&quot;&gt;read-only&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;$ReadOnly&amp;lt;T&amp;gt;&lt;/code&gt; es un tipo que representa la versi&amp;oacute;n de solo lectura de un &lt;a href=&quot;../objects&quot;&gt;tipo de objeto &lt;/a&gt; &lt;code&gt;T&lt;/code&gt; dado . Un tipo de objeto de solo lectura es un tipo de objeto cuyas claves son todas &lt;a href=&quot;../interfaces#toc-interface-property-variance-read-only-and-write-only&quot;&gt;de solo lectura&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="98b234ef2ba7237b91129403279d8a12d8b8a498" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;$Rest&amp;lt;A, B&amp;gt;&lt;/code&gt; is the type that represents the runtime object rest operation, e.g.: &lt;code&gt;const {foo, ...rest} = obj&lt;/code&gt;, where &lt;code&gt;A&lt;/code&gt; and &lt;code&gt;B&lt;/code&gt; are both &lt;a href=&quot;../objects&quot;&gt;object types&lt;/a&gt;. The resulting type from this operation will be an object type containing &lt;code&gt;A&lt;/code&gt;&amp;rsquo;s &lt;em&gt;own&lt;/em&gt; properties that are not &lt;em&gt;own&lt;/em&gt; properties in &lt;code&gt;B&lt;/code&gt;. In flow, we treat all properties on &lt;a href=&quot;(../objects#toc-exact-object-types)&quot;&gt;exact object types&lt;/a&gt; as &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/hasOwnProperty&quot;&gt;own&lt;/a&gt;. In in-exact objects, a property may or may not be own.</source>
          <target state="translated">&lt;code&gt;$Rest&amp;lt;A, B&amp;gt;&lt;/code&gt; es el tipo que representa la operaci&amp;oacute;n de descanso del objeto en tiempo de ejecuci&amp;oacute;n, por ejemplo: &lt;code&gt;const {foo, ...rest} = obj&lt;/code&gt; , donde &lt;code&gt;A&lt;/code&gt; y &lt;code&gt;B&lt;/code&gt; son ambos &lt;a href=&quot;../objects&quot;&gt;tipos de objeto&lt;/a&gt; . El tipo resultante de esta operaci&amp;oacute;n ser&amp;aacute; un tipo de objeto que contiene &lt;code&gt;A&lt;/code&gt; &amp;lsquo;s &lt;em&gt;propias&lt;/em&gt; propiedades que no son &lt;em&gt;propias&lt;/em&gt; propiedades en &lt;code&gt;B&lt;/code&gt; . En el flujo, tratamos todas las propiedades de los &lt;a href=&quot;(../objects#toc-exact-object-types)&quot;&gt;tipos de objetos exactos&lt;/a&gt; como &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/hasOwnProperty&quot;&gt;propias&lt;/a&gt; . En objetos inexactos, una propiedad puede ser propia o no.</target>
        </trans-unit>
        <trans-unit id="11d38cd28a6d48301fea97b23cce1c785bf2fa96" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;$Rest&amp;lt;A, B&amp;gt;&lt;/code&gt; is the type that represents the runtime object rest operation, e.g.: &lt;code&gt;const {foo, ...rest} = obj&lt;/code&gt;, where &lt;code&gt;A&lt;/code&gt; and &lt;code&gt;B&lt;/code&gt; are both &lt;a href=&quot;../objects&quot;&gt;object types&lt;/a&gt;. The resulting type from this operation will be an object type containing &lt;code&gt;A&lt;/code&gt;&amp;rsquo;s &lt;em&gt;own&lt;/em&gt; properties that are not &lt;em&gt;own&lt;/em&gt; properties in &lt;code&gt;B&lt;/code&gt;. In flow, we treat all properties on &lt;a href=&quot;../objects#toc-exact-object-types&quot;&gt;exact object types&lt;/a&gt; as &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/hasOwnProperty&quot;&gt;own&lt;/a&gt;. In in-exact objects, a property may or may not be own.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d802f2267a06e1a2022c679c8bde31819cb03ed1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;$TupleMap&amp;lt;T, F&amp;gt;&lt;/code&gt; takes an iterable type &lt;code&gt;T&lt;/code&gt; (e.g.: &lt;a href=&quot;../tuples&quot;&gt;&lt;code&gt;Tuple&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;../arrays&quot;&gt;&lt;code&gt;Array&lt;/code&gt;&lt;/a&gt;), and a &lt;a href=&quot;../functions&quot;&gt;function type&lt;/a&gt;&lt;code&gt;F&lt;/code&gt;, and returns the iterable type obtained by mapping the type of each value in the iterable with the provided function type &lt;code&gt;F&lt;/code&gt;. This is analogous to the Javascript function &lt;code&gt;map&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;$TupleMap&amp;lt;T, F&amp;gt;&lt;/code&gt; toma un tipo de iterable &lt;code&gt;T&lt;/code&gt; (por ejemplo: &lt;a href=&quot;../tuples&quot;&gt; &lt;code&gt;Tuple&lt;/code&gt; &lt;/a&gt; o &lt;a href=&quot;../arrays&quot;&gt; &lt;code&gt;Array&lt;/code&gt; &lt;/a&gt; ), y un &lt;a href=&quot;../functions&quot;&gt;tipo de funci&amp;oacute;n &lt;/a&gt; &lt;code&gt;F&lt;/code&gt; , y devuelve el tipo iterable obtenido mediante la asignaci&amp;oacute;n del tipo de cada valor de la iterable con el tipo de funci&amp;oacute;n proporcionado &lt;code&gt;F&lt;/code&gt; . Esto es an&amp;aacute;logo al &lt;code&gt;map&lt;/code&gt; a de funciones de Javascript .</target>
        </trans-unit>
        <trans-unit id="1f76db9419791028b16c53d50170a640dded7f72" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;$Values&amp;lt;T&amp;gt;&lt;/code&gt; represents the union type of all the value types (not the values, but their &lt;em&gt;types&lt;/em&gt;!) of the enumerable properties in an &lt;a href=&quot;../objects&quot;&gt;Object Type&lt;/a&gt;&lt;code&gt;T&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;$Values&amp;lt;T&amp;gt;&lt;/code&gt; representa el tipo de uni&amp;oacute;n de todos los tipos de valores (no los valores, pero sus &lt;em&gt;tipos&lt;/em&gt; !) De las propiedades enumerables de un &lt;a href=&quot;../objects&quot;&gt;objeto Tipo &lt;/a&gt; &lt;code&gt;T&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="c8d5ff3a6f77e7f7ea8b2aecfe23491a37bbc14f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;--color&lt;/code&gt;: This will print foo.js on the terminal with the uncovered locations in red color.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2c6f88438e381fcc5f5768d05eac6ef4b5480b05" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;--json&lt;/code&gt;: This will list out all location spans that are uncovered under the tag &lt;code&gt;&quot;uncovered_locs&quot;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b3fc8a096fd5736380ebfafbef2fd1fb7428cee4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;--log-level info&lt;/code&gt; outputs useful debugging information in the standard error stream. This option might lead to verbose output, so we&amp;rsquo;re redirecting the error output to a log file &lt;code&gt;out.log&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fdfec2138f3d450f7d4227feee07c6de5b356186" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;--repeat&lt;/code&gt; ensures that the transformation will be applied until no more files change. This mode is necessary here, because each new type the codemod adds may require new locations to be annotated.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ceb87592a847700419df9dc4c5f0a0691f602e94" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;--write&lt;/code&gt; will update files that require annotations under &lt;code&gt;/path/to/folder&lt;/code&gt; in-place. Without this flag the resulting files will be printed on the command line.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2594799d46ec0811bd7e6e9354b8cae3d1f1d6a5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;.flowconfig&lt;/code&gt; format</source>
          <target state="translated">&lt;code&gt;.flowconfig&lt;/code&gt; formato .flowconfig</target>
        </trans-unit>
        <trans-unit id="2f61adc534681a552a76146f3a893058257fd34c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;/path/to/root/&lt;/code&gt; (automatically included)</source>
          <target state="translated">&lt;code&gt;/path/to/root/&lt;/code&gt; (incluido autom&amp;aacute;ticamente)</target>
        </trans-unit>
        <trans-unit id="4eb684af2fc8a1193252507702d321d75c5eef22" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;@flow strict-local&lt;/code&gt; is the same as &lt;code&gt;@flow strict&lt;/code&gt;, except it does not require its dependencies to also be strict (i.e. it is &amp;ldquo;locally&amp;rdquo; strict). It does not have a separate configuration: it uses the same configuration as Flow Strict, just without the &lt;code&gt;nonstrict-import&lt;/code&gt; rule.</source>
          <target state="translated">&lt;code&gt;@flow strict-local&lt;/code&gt; es lo mismo que &lt;code&gt;@flow strict&lt;/code&gt; , excepto que no requiere que sus dependencias tambi&amp;eacute;n sean estrictas (es decir, es estricto &amp;ldquo;localmente&amp;rdquo;). No tiene una configuraci&amp;oacute;n separada: usa la misma configuraci&amp;oacute;n que Flow Strict, solo que sin la &lt;code&gt;nonstrict-import&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="8f9cde7197917421c3115f9339175348c4255a20" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Array&lt;/code&gt; Type</source>
          <target state="translated">&lt;code&gt;Array&lt;/code&gt; Tipo de matriz</target>
        </trans-unit>
        <trans-unit id="a803aafb511370111befd33436b887e6bb708e91" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Array&lt;/code&gt; Type Shorthand Syntax</source>
          <target state="translated">&lt;code&gt;Array&lt;/code&gt; Sintaxis abreviada del tipo de matriz</target>
        </trans-unit>
        <trans-unit id="3331a137b8616e6d3a4d9711f6d95d677a4a97c3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Function&lt;/code&gt; Type</source>
          <target state="translated">&lt;code&gt;Function&lt;/code&gt; Tipo de funci&amp;oacute;n</target>
        </trans-unit>
        <trans-unit id="2cbf7e5430db7626ac9af791d16644934975cb21" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ObjMap&amp;lt;T, F&amp;gt;&lt;/code&gt; takes an &lt;a href=&quot;../objects&quot;&gt;object type&lt;/a&gt;&lt;code&gt;T&lt;/code&gt;, and a &lt;a href=&quot;../functions&quot;&gt;function type&lt;/a&gt;&lt;code&gt;F&lt;/code&gt;, and returns the object type obtained by mapping the type of each value in the object with the provided function type &lt;code&gt;F&lt;/code&gt;. In other words, &lt;code&gt;$ObjMap&lt;/code&gt; will &lt;a href=&quot;#toc-call&quot;&gt;call&lt;/a&gt; (at the type level) the given function type &lt;code&gt;F&lt;/code&gt; for every property value type in &lt;code&gt;T&lt;/code&gt;, and return the resulting object type from those calls.</source>
          <target state="translated">&lt;code&gt;ObjMap&amp;lt;T, F&amp;gt;&lt;/code&gt; toma un &lt;a href=&quot;../objects&quot;&gt;tipo de objeto &lt;/a&gt; &lt;code&gt;T&lt;/code&gt; , y un &lt;a href=&quot;../functions&quot;&gt;tipo de funci&amp;oacute;n &lt;/a&gt; &lt;code&gt;F&lt;/code&gt; , y devuelve el tipo de objeto obtenido mediante la asignaci&amp;oacute;n del tipo de cada valor en el objeto con el tipo de funci&amp;oacute;n proporcionado &lt;code&gt;F&lt;/code&gt; . En otras palabras, &lt;code&gt;$ObjMap&lt;/code&gt; se &lt;a href=&quot;#toc-call&quot;&gt;llame&lt;/a&gt; (a nivel de tipo) el tipo de funci&amp;oacute;n dada &lt;code&gt;F&lt;/code&gt; para cada tipo de valor de la propiedad en &lt;code&gt;T&lt;/code&gt; , y devolver el tipo de objeto que resulta de esas llamadas.</target>
        </trans-unit>
        <trans-unit id="681cf2b1552373c6dcf1f86ee33a93ff337de143" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ObjMapi&amp;lt;T, F&amp;gt;&lt;/code&gt; is similar to &lt;a href=&quot;#toc-objmap&quot;&gt;&lt;code&gt;ObjMap&amp;lt;T, F&amp;gt;&lt;/code&gt;&lt;/a&gt;. The difference is that function type &lt;code&gt;F&lt;/code&gt; will be &lt;a href=&quot;#toc-call&quot;&gt;called&lt;/a&gt; with both the key and value types of the elements of the object type &lt;code&gt;T&lt;/code&gt;, instead of just the value types. For example:</source>
          <target state="translated">&lt;code&gt;ObjMapi&amp;lt;T, F&amp;gt;&lt;/code&gt; es similar a &lt;a href=&quot;#toc-objmap&quot;&gt; &lt;code&gt;ObjMap&amp;lt;T, F&amp;gt;&lt;/code&gt; &lt;/a&gt; . La diferencia es que el tipo de funci&amp;oacute;n &lt;code&gt;F&lt;/code&gt; se &lt;a href=&quot;#toc-call&quot;&gt;llamar&amp;aacute;&lt;/a&gt; con los tipos de clave y valor de los elementos del tipo de objeto &lt;code&gt;T&lt;/code&gt; , en lugar de solo los tipos de valor. Por ejemplo:</target>
        </trans-unit>
        <trans-unit id="767b77f7a41bfeed131973627af17f7e6faa58cd" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Object&lt;/code&gt; Type</source>
          <target state="translated">&lt;code&gt;Object&lt;/code&gt; Tipo de objeto</target>
        </trans-unit>
        <trans-unit id="1544818dc3132ba28560d73844cabcd76ae68cc1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;React.AbstractComponent&amp;lt;Config, Instance&amp;gt;&lt;/code&gt; (v0.89.0+) represents a component with a config of type Config and instance of type Instance.</source>
          <target state="translated">&lt;code&gt;React.AbstractComponent&amp;lt;Config, Instance&amp;gt;&lt;/code&gt; (v0.89.0 +) representa un componente con una configuraci&amp;oacute;n de tipo Config y una instancia de tipo Instance.</target>
        </trans-unit>
        <trans-unit id="7a05b510244008460c777eeffe9a1d99b0b3f433" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;React.Component&amp;lt;Props, State&amp;gt;&lt;/code&gt; is a &lt;a href=&quot;https://flow.org/en/types/generics/&quot;&gt;generic type&lt;/a&gt; that takes two type arguments. Props and state. The second type argument, &lt;code&gt;State&lt;/code&gt;, is optional. By default it is undefined so you can see in the example above we did not include &lt;code&gt;State&lt;/code&gt;. We will learn more about state in the next section&amp;hellip;</source>
          <target state="translated">&lt;code&gt;React.Component&amp;lt;Props, State&amp;gt;&lt;/code&gt; es un &lt;a href=&quot;https://flow.org/en/types/generics/&quot;&gt;tipo gen&amp;eacute;rico&lt;/a&gt; que toma dos argumentos de tipo. Atrezzo y estado. El segundo argumento de tipo, &lt;code&gt;State&lt;/code&gt; , es opcional. De forma predeterminada, no est&amp;aacute; definido, por lo que puede ver en el ejemplo anterior que no incluimos &lt;code&gt;State&lt;/code&gt; . Aprenderemos m&amp;aacute;s sobre el estado en la siguiente secci&amp;oacute;n ...</target>
        </trans-unit>
        <trans-unit id="9230540e79b96189b0ea859004424e54a1e6f63f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;React.ComponentType&amp;lt;Props&amp;gt;&lt;/code&gt; does not include intrinsic JSX element types like &lt;code&gt;div&lt;/code&gt; or &lt;code&gt;span&lt;/code&gt;. See &lt;a href=&quot;#toc-react-elementtype&quot;&gt;&lt;code&gt;React.ElementType&lt;/code&gt;&lt;/a&gt; if you also want to include JSX intrinsics.</source>
          <target state="translated">&lt;code&gt;React.ComponentType&amp;lt;Props&amp;gt;&lt;/code&gt; no incluye tipos de elementos JSX intr&amp;iacute;nsecos como &lt;code&gt;div&lt;/code&gt; o &lt;code&gt;span&lt;/code&gt; . Consulte &lt;a href=&quot;#toc-react-elementtype&quot;&gt; &lt;code&gt;React.ElementType&lt;/code&gt; &lt;/a&gt; si tambi&amp;eacute;n desea incluir intr&amp;iacute;nsecos JSX.</target>
        </trans-unit>
        <trans-unit id="58f1f75b8bcd9618953c69318f7620eb7b4295c2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;React.Element&amp;lt;typeof Component&amp;gt;&lt;/code&gt; is also the return type of &lt;code&gt;React.createElement()&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;React.Element&amp;lt;typeof Component&amp;gt;&lt;/code&gt; tambi&amp;eacute;n es el tipo de retorno de &lt;code&gt;React.createElement()&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="adc63cd1289ababfe9d45f2979b42f2a3e435bb8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;SyntheticAnimationEvent&amp;lt;T&amp;gt;&lt;/code&gt; for &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/AnimationEvent&quot;&gt;AnimationEvent&lt;/a&gt;</source>
          <target state="translated">&lt;code&gt;SyntheticAnimationEvent&amp;lt;T&amp;gt;&lt;/code&gt; para &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/AnimationEvent&quot;&gt;AnimationEvent&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="7c5e5304c53ff7a14b0db24ef11da3dbb99b2b14" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;SyntheticCompositionEvent&amp;lt;T&amp;gt;&lt;/code&gt; for &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/CompositionEvent&quot;&gt;CompositionEvent&lt;/a&gt;</source>
          <target state="translated">&lt;code&gt;SyntheticCompositionEvent&amp;lt;T&amp;gt;&lt;/code&gt; para &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/CompositionEvent&quot;&gt;CompositionEvent&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="c96f9ac107f248ffac9f8626b279676bd8718958" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;SyntheticDragEvent&amp;lt;T&amp;gt;&lt;/code&gt; for &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/DragEvent&quot;&gt;DragEvent&lt;/a&gt;</source>
          <target state="translated">&lt;code&gt;SyntheticDragEvent&amp;lt;T&amp;gt;&lt;/code&gt; para &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/DragEvent&quot;&gt;DragEvent&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="fa52bea770e564d49631a007def85a111217c029" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;SyntheticEvent&amp;lt;T&amp;gt;&lt;/code&gt; for &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Event&quot;&gt;Event&lt;/a&gt;</source>
          <target state="translated">&lt;code&gt;SyntheticEvent&amp;lt;T&amp;gt;&lt;/code&gt; para &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Event&quot;&gt;evento&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="96c79f952aac07c545dc47e57d9d9cd7d49c791f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;SyntheticFocusEvent&amp;lt;T&amp;gt;&lt;/code&gt; for &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/FocusEvent&quot;&gt;FocusEvent&lt;/a&gt;</source>
          <target state="translated">&lt;code&gt;SyntheticFocusEvent&amp;lt;T&amp;gt;&lt;/code&gt; para &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/FocusEvent&quot;&gt;FocusEvent&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="5996e654c7c893a828a52a8b60b3799f8e789a81" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;SyntheticInputEvent&amp;lt;T&amp;gt;&lt;/code&gt; for &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/InputEvent&quot;&gt;InputEvent&lt;/a&gt;</source>
          <target state="translated">&lt;code&gt;SyntheticInputEvent&amp;lt;T&amp;gt;&lt;/code&gt; para &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/InputEvent&quot;&gt;InputEvent&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="2026e5307092d1d6c43fff4a1ac451cb1d8596f2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;SyntheticKeyboardEvent&amp;lt;T&amp;gt;&lt;/code&gt; for &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent&quot;&gt;KeyboardEvent&lt;/a&gt;</source>
          <target state="translated">&lt;code&gt;SyntheticKeyboardEvent&amp;lt;T&amp;gt;&lt;/code&gt; para &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent&quot;&gt;KeyboardEvent&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="e4fc35b5921c09e6284b8b4d64655b2075c7403d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;SyntheticMouseEvent&amp;lt;T&amp;gt;&lt;/code&gt; for &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent&quot;&gt;MouseEvent&lt;/a&gt;</source>
          <target state="translated">&lt;code&gt;SyntheticMouseEvent&amp;lt;T&amp;gt;&lt;/code&gt; para &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent&quot;&gt;MouseEvent&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="d8f969c201611aa63546668fd0d4a5fb4be56f6b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;SyntheticTouchEvent&amp;lt;T&amp;gt;&lt;/code&gt; for &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/TouchEvent&quot;&gt;TouchEvent&lt;/a&gt;</source>
          <target state="translated">&lt;code&gt;SyntheticTouchEvent&amp;lt;T&amp;gt;&lt;/code&gt; para &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/TouchEvent&quot;&gt;TouchEvent&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="5392d56e034e56ed7cf9f986f6a8e54736cf46cc" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;SyntheticTransitionEvent&amp;lt;T&amp;gt;&lt;/code&gt; for &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/TransitionEvent&quot;&gt;TransitionEvent&lt;/a&gt;</source>
          <target state="translated">&lt;code&gt;SyntheticTransitionEvent&amp;lt;T&amp;gt;&lt;/code&gt; para &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/TransitionEvent&quot;&gt;TransitionEvent&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="693da3b475fb277ea5f089a6fe5960e4093a8bf9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;SyntheticUIEvent&amp;lt;T&amp;gt;&lt;/code&gt; for &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/UIEvent&quot;&gt;UIEvent&lt;/a&gt;</source>
          <target state="translated">&lt;code&gt;SyntheticUIEvent&amp;lt;T&amp;gt;&lt;/code&gt; para &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/UIEvent&quot;&gt;UIEvent&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="75c836ef8f10b19801a470eac5c6ed743d951e99" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;SyntheticWheelEvent&amp;lt;T&amp;gt;&lt;/code&gt; for &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/WheelEvent&quot;&gt;WheelEvent&lt;/a&gt;</source>
          <target state="translated">&lt;code&gt;SyntheticWheelEvent&amp;lt;T&amp;gt;&lt;/code&gt; para &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/WheelEvent&quot;&gt;WheelEvent&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="bd8d3fb84c2e2653143777ce2230d40aeb161b2f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;[untyped]&lt;/code&gt; instead causes a file to be ignored by the typechecker as if it had &lt;code&gt;noflow&lt;/code&gt; in it, resolve modules as &lt;code&gt;any&lt;/code&gt; typ, but allow them to NOT be ignored by the module resolver. Any matching file is skipped by Flow (not even parsed, like other &lt;code&gt;noflow&lt;/code&gt; files!), but can still be &lt;code&gt;require()&lt;/code&gt;&amp;lsquo;d.</source>
          <target state="translated">&lt;code&gt;[untyped]&lt;/code&gt; cambio, hace que el verificador de tipos ignore un archivo como si no tuviera &lt;code&gt;noflow&lt;/code&gt; , resuelve los m&amp;oacute;dulos como &lt;code&gt;any&lt;/code&gt; tipo, pero permite que el solucionador de m&amp;oacute;dulos NO los ignore. Flow omite cualquier archivo coincidente (&amp;iexcl;ni siquiera se analiza, como otros archivos &lt;code&gt;noflow&lt;/code&gt; !), Pero a&amp;uacute;n se puede &lt;code&gt;require()&lt;/code&gt; 'd.</target>
        </trans-unit>
        <trans-unit id="dd57cedd3baab0b1d89a09756ce2f7feb6611846" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;[untyped]&lt;/code&gt; instead causes a file to be ignored by the typechecker as if it had &lt;code&gt;noflow&lt;/code&gt; in it, resolve modules as &lt;code&gt;any&lt;/code&gt; type, but allow them to NOT be ignored by the module resolver. Any matching file is skipped by Flow (not even parsed, like other &lt;code&gt;noflow&lt;/code&gt; files!), but can still be &lt;code&gt;require()&lt;/code&gt;&amp;lsquo;d.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a4734a96ab71cb9256e40d7ef655d0b7aec2769d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;all&lt;/code&gt;&lt;em&gt;&lt;code&gt;(boolean)&lt;/code&gt;&lt;/em&gt;</source>
          <target state="translated">&lt;code&gt;all&lt;/code&gt;&lt;em&gt;&lt;code&gt;(boolean)&lt;/code&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="9980c61e3e10b0171dab78805e509842f78d6bfd" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;babel_loose_array_spread&lt;/code&gt;&lt;em&gt;&lt;code&gt;(boolean)&lt;/code&gt;&lt;/em&gt;</source>
          <target state="translated">&lt;code&gt;babel_loose_array_spread&lt;/code&gt;&lt;em&gt;&lt;code&gt;(boolean)&lt;/code&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="9328c95d646b4ac7120c78217d7dabde5057c2d6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;const&lt;/code&gt; - declares a block-scoped variable, assigning a value that cannot be re-assigned. (&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/const&quot;&gt;MDN&lt;/a&gt;)</source>
          <target state="translated">&lt;code&gt;const&lt;/code&gt; : declara una variable de &amp;aacute;mbito de bloque, asignando un valor que no se puede reasignar. ( &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/const&quot;&gt;MDN&lt;/a&gt; )</target>
        </trans-unit>
        <trans-unit id="c35bdf03258530159bd15512b8348c3d41d5a19d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;const&lt;/code&gt; - variables that &lt;strong&gt;cannot&lt;/strong&gt; be reassigned.</source>
          <target state="translated">&lt;code&gt;const&lt;/code&gt; : variables que &lt;strong&gt;no se&lt;/strong&gt; pueden reasignar.</target>
        </trans-unit>
        <trans-unit id="ec86decd5f7af51264833626096e4ddd7664c147" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;emoji&lt;/code&gt;&lt;em&gt;&lt;code&gt;(boolean)&lt;/code&gt;&lt;/em&gt;</source>
          <target state="translated">&lt;code&gt;emoji&lt;/code&gt;&lt;em&gt;&lt;code&gt;(boolean)&lt;/code&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="96920174b4323d8c30fdb2a3ec074673a3d14b1e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;esproposal.class_instance_fields&lt;/code&gt;&lt;em&gt;&lt;code&gt;(enable|ignore|warn)&lt;/code&gt;&lt;/em&gt;</source>
          <target state="translated">&lt;code&gt;esproposal.class_instance_fields&lt;/code&gt;&lt;em&gt;&lt;code&gt;(enable|ignore|warn)&lt;/code&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="171137be6be377f3d07f41d4691b38066b388d01" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;esproposal.class_static_fields&lt;/code&gt;&lt;em&gt;&lt;code&gt;(enable|ignore|warn)&lt;/code&gt;&lt;/em&gt;</source>
          <target state="translated">&lt;code&gt;esproposal.class_static_fields&lt;/code&gt;&lt;em&gt;&lt;code&gt;(enable|ignore|warn)&lt;/code&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="a9f45cd53162169474b7a6388eccd7f001dfae9f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;esproposal.decorators&lt;/code&gt;&lt;em&gt;&lt;code&gt;(ignore|warn)&lt;/code&gt;&lt;/em&gt;</source>
          <target state="translated">&lt;code&gt;esproposal.decorators&lt;/code&gt;&lt;em&gt;&lt;code&gt;(ignore|warn)&lt;/code&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="972a4a3dbe0f7550710ef309f72472fb16297ecb" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;esproposal.export_star_as&lt;/code&gt;&lt;em&gt;&lt;code&gt;(enable|ignore|warn)&lt;/code&gt;&lt;/em&gt;</source>
          <target state="translated">&lt;code&gt;esproposal.export_star_as&lt;/code&gt;&lt;em&gt;&lt;code&gt;(enable|ignore|warn)&lt;/code&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="638056fd7e6c68417a3a146dfca7047b22c08d8e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;esproposal.nullish_coalescing&lt;/code&gt;&lt;em&gt;&lt;code&gt;(enable|ignore|warn)&lt;/code&gt;&lt;/em&gt;</source>
          <target state="translated">&lt;code&gt;esproposal.nullish_coalescing&lt;/code&gt;&lt;em&gt;&lt;code&gt;(enable|ignore|warn)&lt;/code&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="e869212f0b8e102de1941c727fdebe6d2a890181" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;esproposal.optional_chaining&lt;/code&gt;&lt;em&gt;&lt;code&gt;(enable|ignore|warn)&lt;/code&gt;&lt;/em&gt;</source>
          <target state="translated">&lt;code&gt;esproposal.optional_chaining&lt;/code&gt;&lt;em&gt;&lt;code&gt;(enable|ignore|warn)&lt;/code&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="93d7450678ff784f4a91b7939b3f1d2d0f196f78" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;exact_by_default&lt;/code&gt;&lt;em&gt;&lt;code&gt;(boolean)&lt;/code&gt;&lt;/em&gt;</source>
          <target state="translated">&lt;code&gt;exact_by_default&lt;/code&gt;&lt;em&gt;&lt;code&gt;(boolean)&lt;/code&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="7f0b3658b2908fca30f69af8b284b05c29e2e0d7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;experimental.const_params&lt;/code&gt;&lt;em&gt;&lt;code&gt;(boolean)&lt;/code&gt;&lt;/em&gt;</source>
          <target state="translated">&lt;code&gt;experimental.const_params&lt;/code&gt;&lt;em&gt;&lt;code&gt;(boolean)&lt;/code&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="42e3942bab511fa03988ce07bb75a9d0d7c74847" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;f1&lt;/code&gt; can return a value that &lt;code&gt;FuncType&lt;/code&gt; never does, so code that relies on &lt;code&gt;FuncType&lt;/code&gt; might not be safe if &lt;code&gt;f1&lt;/code&gt; is used. Its type is not a subtype of &lt;code&gt;FuncType&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;f1&lt;/code&gt; puede devolver un valor que &lt;code&gt;FuncType&lt;/code&gt; nunca hace, por lo que el c&amp;oacute;digo que se basa en &lt;code&gt;FuncType&lt;/code&gt; podr&amp;iacute;a no ser seguro si se usa &lt;code&gt;f1&lt;/code&gt; . Su tipo no es un subtipo de &lt;code&gt;FuncType&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="726638e0c45c973078425c1f460e13663c6df9ed" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;f2&lt;/code&gt; can&amp;rsquo;t handle all the argument values that &lt;code&gt;FuncType&lt;/code&gt; does, so code that relies on &lt;code&gt;FuncType&lt;/code&gt; can&amp;rsquo;t safely use &lt;code&gt;f2&lt;/code&gt;. Its type is also not a subtype of &lt;code&gt;FuncType&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;f2&lt;/code&gt; no puede manejar todos los valores de argumento que &lt;code&gt;FuncType&lt;/code&gt; hace, por lo que el c&amp;oacute;digo que se basa en &lt;code&gt;FuncType&lt;/code&gt; no puede usar &lt;code&gt;f2&lt;/code&gt; de manera segura . Su tipo tampoco es un subtipo de &lt;code&gt;FuncType&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="5400ddcebeeba38d292672ea4e21ae521f4c3c92" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;f3&lt;/code&gt; can accept all the argument values that &lt;code&gt;FuncType&lt;/code&gt; does, and only returns values that &lt;code&gt;FuncType&lt;/code&gt; does, so its type is a subtype of &lt;code&gt;FuncType&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;f3&lt;/code&gt; puede aceptar todos los valores de argumento que &lt;code&gt;FuncType&lt;/code&gt; hace, y solo devuelve valores que &lt;code&gt;FuncType&lt;/code&gt; hace, por lo que su tipo es un subtipo de &lt;code&gt;FuncType&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="0aae29a82fc10cee61f896dcf30eeebb3766c146" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;flowlint-next-line&lt;/code&gt; works the same as &lt;code&gt;flowlint-line&lt;/code&gt;, except it applies its settings to the next line instead of the current line:</source>
          <target state="translated">&lt;code&gt;flowlint-next-line&lt;/code&gt; funciona igual que &lt;code&gt;flowlint-line&lt;/code&gt; , excepto que aplica su configuraci&amp;oacute;n a la siguiente l&amp;iacute;nea en lugar de a la l&amp;iacute;nea actual:</target>
        </trans-unit>
        <trans-unit id="a48e34cc7b299416a8e2b7ea16e6d555b35b2019" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;include_warnings&lt;/code&gt;&lt;em&gt;&lt;code&gt;(boolean)&lt;/code&gt;&lt;/em&gt;</source>
          <target state="translated">&lt;code&gt;include_warnings&lt;/code&gt;&lt;em&gt;&lt;code&gt;(boolean)&lt;/code&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="6d8ddac7ae75b7a8f7db9fd921f2cf55bd4b2c66" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;lazy_mode&lt;/code&gt;&lt;em&gt;&lt;code&gt;(fs|ide|watchman|none)&lt;/code&gt;&lt;/em&gt;</source>
          <target state="translated">&lt;code&gt;lazy_mode&lt;/code&gt;&lt;em&gt;&lt;code&gt;(fs|ide|watchman|none)&lt;/code&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="336c7ba3afe701528a0e2b671be4925b95c96b3a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;let&lt;/code&gt; - declares a block-scoped variable, optionally assigning a value. (&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/let&quot;&gt;MDN&lt;/a&gt;)</source>
          <target state="translated">&lt;code&gt;let&lt;/code&gt; : declara una variable de &amp;aacute;mbito de bloque, asignando opcionalmente un valor. ( &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/let&quot;&gt;MDN&lt;/a&gt; )</target>
        </trans-unit>
        <trans-unit id="447b3a2dddaad4f848e312d7d33f3c96c59892d6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;let&lt;/code&gt; and &lt;code&gt;var&lt;/code&gt; - variables that &lt;strong&gt;can&lt;/strong&gt; be reassigned.</source>
          <target state="translated">&lt;code&gt;let&lt;/code&gt; y &lt;code&gt;var&lt;/code&gt; : variables que &lt;strong&gt;se&lt;/strong&gt; pueden reasignar.</target>
        </trans-unit>
        <trans-unit id="da67888b6c142ef501bff7964e43c869c753300c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;log.file&lt;/code&gt;&lt;em&gt;&lt;code&gt;(string)&lt;/code&gt;&lt;/em&gt;</source>
          <target state="translated">&lt;code&gt;log.file&lt;/code&gt;&lt;em&gt;&lt;code&gt;(string)&lt;/code&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="10b72cfa901df08cc8fe7be85a5ce76b92d3830e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;max_header_tokens&lt;/code&gt;&lt;em&gt;&lt;code&gt;(integer)&lt;/code&gt;&lt;/em&gt;</source>
          <target state="translated">&lt;code&gt;max_header_tokens&lt;/code&gt;&lt;em&gt;&lt;code&gt;(integer)&lt;/code&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="c7127e551c98174c6634c2da74d89fefc7432f7b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;mixed&lt;/code&gt; will accept any type of value. Strings, numbers, objects, functions&amp;ndash; anything will work.</source>
          <target state="translated">&lt;code&gt;mixed&lt;/code&gt; aceptar&amp;aacute; cualquier tipo de valor. Cadenas, n&amp;uacute;meros, objetos, funciones: cualquier cosa funcionar&amp;aacute;.</target>
        </trans-unit>
        <trans-unit id="51164f8b8016f0d8abcae69123c2523293287daa" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;module.file_ext&lt;/code&gt;&lt;em&gt;&lt;code&gt;(string)&lt;/code&gt;&lt;/em&gt;</source>
          <target state="translated">&lt;code&gt;module.file_ext&lt;/code&gt;&lt;em&gt;&lt;code&gt;(string)&lt;/code&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="8bd5bc2f73b98906fb7419179328c69ef4d9e356" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;module.ignore_non_literal_requires&lt;/code&gt;&lt;em&gt;&lt;code&gt;(boolean)&lt;/code&gt;&lt;/em&gt;</source>
          <target state="translated">&lt;code&gt;module.ignore_non_literal_requires&lt;/code&gt;&lt;em&gt;&lt;code&gt;(boolean)&lt;/code&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="0fa5897539c2a2f8f6f118e08172c4bc433245c8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;module.name_mapper.extension&lt;/code&gt;&lt;em&gt;&lt;code&gt;(string -&amp;gt; string)&lt;/code&gt;&lt;/em&gt;</source>
          <target state="translated">&lt;code&gt;module.name_mapper.extension&lt;/code&gt; &lt;em&gt; &lt;code&gt;(string -&amp;gt; string)&lt;/code&gt; &lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="695be517c6a87b361f0a94a84ee335146ea99233" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;module.name_mapper&lt;/code&gt;&lt;em&gt;&lt;code&gt;(regex -&amp;gt; string)&lt;/code&gt;&lt;/em&gt;</source>
          <target state="translated">&lt;code&gt;module.name_mapper&lt;/code&gt; &lt;em&gt; &lt;code&gt;(regex -&amp;gt; string)&lt;/code&gt; &lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="f6d453a4f39af3bbcc8e866a62bb026e067f3ccf" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;module.system.node.main_field&lt;/code&gt;&lt;em&gt;&lt;code&gt;(string)&lt;/code&gt;&lt;/em&gt;</source>
          <target state="translated">&lt;code&gt;module.system.node.main_field&lt;/code&gt;&lt;em&gt;&lt;code&gt;(string)&lt;/code&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="a2b55b3985b54cfcb20f350998122314d8f82eca" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;module.system.node.resolve_dirname&lt;/code&gt;&lt;em&gt;&lt;code&gt;(string)&lt;/code&gt;&lt;/em&gt;</source>
          <target state="translated">&lt;code&gt;module.system.node.resolve_dirname&lt;/code&gt;&lt;em&gt;&lt;code&gt;(string)&lt;/code&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="b3917f0b66e443088994451f0883b66faaf5a2a9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;module.system&lt;/code&gt;&lt;em&gt;&lt;code&gt;(node|haste)&lt;/code&gt;&lt;/em&gt;</source>
          <target state="translated">&lt;code&gt;module.system&lt;/code&gt;&lt;em&gt;&lt;code&gt;(node|haste)&lt;/code&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="ac108e4226f0003b79c994c5e9872aae99cf04e3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;module.use_strict&lt;/code&gt;&lt;em&gt;&lt;code&gt;(boolean)&lt;/code&gt;&lt;/em&gt;</source>
          <target state="translated">&lt;code&gt;module.use_strict&lt;/code&gt;&lt;em&gt;&lt;code&gt;(boolean)&lt;/code&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="e3c7cf33182d09b184a1acd84332f6a07f1a0cdc" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;munge_underscores&lt;/code&gt;&lt;em&gt;&lt;code&gt;(boolean)&lt;/code&gt;&lt;/em&gt;</source>
          <target state="translated">&lt;code&gt;munge_underscores&lt;/code&gt;&lt;em&gt;&lt;code&gt;(boolean)&lt;/code&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="ee2c2db77365d69cc88bb148e9b038199c9e52b8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;no_flowlib&lt;/code&gt;&lt;em&gt;&lt;code&gt;(boolean)&lt;/code&gt;&lt;/em&gt;</source>
          <target state="translated">&lt;code&gt;no_flowlib&lt;/code&gt;&lt;em&gt;&lt;code&gt;(boolean)&lt;/code&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="aec71172404443d710062cd2dbcdb5a433b974cc" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;null&lt;/code&gt; and &lt;code&gt;void&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;null&lt;/code&gt; y &lt;code&gt;void&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="a59ea58ab1aea5c130c466795049be1f9aaf0803" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;null&lt;/code&gt; and &lt;code&gt;void&lt;/code&gt; also appear in other types.</source>
          <target state="translated">&lt;code&gt;null&lt;/code&gt; y &lt;code&gt;void&lt;/code&gt; tambi&amp;eacute;n aparecen en otros tipos.</target>
        </trans-unit>
        <trans-unit id="e8c9111ee40b4a3593b8970efac417f8ac70f84d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;react-router&lt;/code&gt; version 4 asks for a &lt;a href=&quot;https://reacttraining.com/react-router/core/api/Route/children-func&quot;&gt;function as the children to its &lt;code&gt;&amp;lt;Route&amp;gt;&lt;/code&gt; component&lt;/a&gt;. You would provide a function as the children to &lt;code&gt;react-router&lt;/code&gt; like this:</source>
          <target state="translated">&lt;code&gt;react-router&lt;/code&gt; versi&amp;oacute;n 4 solicita una &lt;a href=&quot;https://reacttraining.com/react-router/core/api/Route/children-func&quot;&gt;funci&amp;oacute;n como hijos de su componente &lt;code&gt;&amp;lt;Route&amp;gt;&lt;/code&gt; &lt;/a&gt; . Proporcionar&amp;iacute;a una funci&amp;oacute;n como los ni&amp;ntilde;os para &lt;code&gt;react-router&lt;/code&gt; como esta:</target>
        </trans-unit>
        <trans-unit id="10b2ec4f9ce546a42982c7000e3310b849ac0bf6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;react.runtime&lt;/code&gt;&lt;em&gt;&lt;code&gt;(automatic|classic)&lt;/code&gt;&lt;/em&gt;&amp;ge;0.123.0</source>
          <target state="translated">&lt;code&gt;react.runtime&lt;/code&gt;&lt;em&gt;&lt;code&gt;(automatic|classic)&lt;/code&gt;&lt;/em&gt;&amp;ge;0.123.0</target>
        </trans-unit>
        <trans-unit id="0094d54f0f90d0220f6da062cdc9c6ae6eae5fe8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;server.max_workers&lt;/code&gt;&lt;em&gt;&lt;code&gt;(integer)&lt;/code&gt;&lt;/em&gt;</source>
          <target state="translated">&lt;code&gt;server.max_workers&lt;/code&gt;&lt;em&gt;&lt;code&gt;(integer)&lt;/code&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="f189fba493378458484495c789f0c1fe55185671" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;sharedmemory.dirs&lt;/code&gt;&lt;em&gt;&lt;code&gt;(string)&lt;/code&gt;&lt;/em&gt;</source>
          <target state="translated">&lt;code&gt;sharedmemory.dirs&lt;/code&gt;&lt;em&gt;&lt;code&gt;(string)&lt;/code&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="57b914d6e4aade39e538cecd6f22441853012d68" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;sharedmemory.hash_table_pow&lt;/code&gt;&lt;em&gt;&lt;code&gt;(unsigned integer)&lt;/code&gt;&lt;/em&gt;</source>
          <target state="translated">&lt;code&gt;sharedmemory.hash_table_pow&lt;/code&gt; &lt;em&gt; &lt;code&gt;(unsigned integer)&lt;/code&gt; &lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="e5bb5de55179a3c1994c86e08d6ba8959cf26035" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;sharedmemory.heap_size&lt;/code&gt;&lt;em&gt;&lt;code&gt;(unsigned integer)&lt;/code&gt;&lt;/em&gt;</source>
          <target state="translated">&lt;code&gt;sharedmemory.heap_size&lt;/code&gt; &lt;em&gt; &lt;code&gt;(unsigned integer)&lt;/code&gt; &lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="feb32a4afd21311d7f593b3de1374f83ef370676" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;sharedmemory.log_level&lt;/code&gt;&lt;em&gt;&lt;code&gt;(unsigned integer)&lt;/code&gt;&lt;/em&gt;</source>
          <target state="translated">&lt;code&gt;sharedmemory.log_level&lt;/code&gt; &lt;em&gt; &lt;code&gt;(unsigned integer)&lt;/code&gt; &lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="5afdf22d252e5f159714f331f56a1183c8db4629" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;sharedmemory.minimum_available&lt;/code&gt;&lt;em&gt;&lt;code&gt;(unsigned integer)&lt;/code&gt;&lt;/em&gt;</source>
          <target state="translated">&lt;code&gt;sharedmemory.minimum_available&lt;/code&gt; &lt;em&gt; &lt;code&gt;(unsigned integer)&lt;/code&gt; &lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="6af14e5c0d4307ffde1e14ef7590be5942e679aa" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;strip_root&lt;/code&gt;&lt;em&gt;&lt;code&gt;(boolean)&lt;/code&gt;&lt;/em&gt;&amp;le;0.48</source>
          <target state="translated">&lt;code&gt;strip_root&lt;/code&gt;&lt;em&gt;&lt;code&gt;(boolean)&lt;/code&gt;&lt;/em&gt;&amp;le;0.48</target>
        </trans-unit>
        <trans-unit id="b7056b5cc505c600e004961cb933f9821121eb2c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;suppress_comment&lt;/code&gt;&lt;em&gt;&lt;code&gt;(regex)&lt;/code&gt;&lt;/em&gt;</source>
          <target state="translated">&lt;code&gt;suppress_comment&lt;/code&gt;&lt;em&gt;&lt;code&gt;(regex)&lt;/code&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="74a35624022ce338b663a64d371c4d915190a754" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;suppress_comment&lt;/code&gt;&lt;em&gt;&lt;code&gt;(regex)&lt;/code&gt;&lt;/em&gt;&amp;le;0.126</source>
          <target state="translated">&lt;code&gt;suppress_comment&lt;/code&gt;&lt;em&gt;&lt;code&gt;(regex)&lt;/code&gt;&lt;/em&gt;&amp;le;0.126</target>
        </trans-unit>
        <trans-unit id="72b91edcfd78ab9e6e183d55d0e45a396ff7018c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;suppress_type&lt;/code&gt;&lt;em&gt;&lt;code&gt;(string)&lt;/code&gt;&lt;/em&gt;</source>
          <target state="translated">&lt;code&gt;suppress_type&lt;/code&gt;&lt;em&gt;&lt;code&gt;(string)&lt;/code&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="e8ad04f97245289d4e39fc158bdfbcdf56d0bf99" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;temp_dir&lt;/code&gt;&lt;em&gt;&lt;code&gt;(string)&lt;/code&gt;&lt;/em&gt;</source>
          <target state="translated">&lt;code&gt;temp_dir&lt;/code&gt;&lt;em&gt;&lt;code&gt;(string)&lt;/code&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="c0eca817f39a368fc9aa5bd8f12866ffd32eaa21" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;traces&lt;/code&gt;&lt;em&gt;&lt;code&gt;(integer)&lt;/code&gt;&lt;/em&gt;</source>
          <target state="translated">&lt;code&gt;traces&lt;/code&gt;&lt;em&gt;&lt;code&gt;(integer)&lt;/code&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="c75e6afcf9d83a43fbddc117b5707c6525bca25f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;typeof Component&lt;/code&gt; can also be your React class component or stateless functional component.</source>
          <target state="translated">&lt;code&gt;typeof Component&lt;/code&gt; tambi&amp;eacute;n puede ser su componente de clase React o componente funcional sin estado.</target>
        </trans-unit>
        <trans-unit id="e11876a8dc567e2d922f662f5f89f99f143a6ebc" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;typeof&lt;/code&gt; inherits behaviors of inference</source>
          <target state="translated">&lt;code&gt;typeof&lt;/code&gt; hereda comportamientos de inferencia</target>
        </trans-unit>
        <trans-unit id="eb1cf1f4297c1b2ae089f4080f05438696aa41b8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;typeof&lt;/code&gt; inherits behaviors of other types</source>
          <target state="translated">&lt;code&gt;typeof&lt;/code&gt; hereda comportamientos de otros tipos</target>
        </trans-unit>
        <trans-unit id="8bc3bf8b12c02f9c49ba612a2afbc618a8714ac2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;typeof&lt;/code&gt; type syntax</source>
          <target state="translated">&lt;code&gt;typeof&lt;/code&gt; sintaxis tipo</target>
        </trans-unit>
        <trans-unit id="b1b97f80cd34472a653238df084f1ef89d7716b6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;types_first&lt;/code&gt;&lt;em&gt;&lt;code&gt;(boolean)&lt;/code&gt;&lt;/em&gt;&amp;ge;0.125.0</source>
          <target state="translated">&lt;code&gt;types_first&lt;/code&gt;&lt;em&gt;&lt;code&gt;(boolean)&lt;/code&gt;&lt;/em&gt;&amp;ge;0.125.0</target>
        </trans-unit>
        <trans-unit id="e9340dc40167bf2df1900dd5ff09de7ee451b582" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;undefined&lt;/code&gt; (&lt;code&gt;void&lt;/code&gt; in Flow types)</source>
          <target state="translated">&lt;code&gt;undefined&lt;/code&gt; ( &lt;code&gt;void&lt;/code&gt; en tipos de flujo)</target>
        </trans-unit>
        <trans-unit id="e10bde5813a41a4b1af5888a4a46a6bbc121f9a5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;var&lt;/code&gt; - declares a variable, optionally assigning a value. (&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/var&quot;&gt;MDN&lt;/a&gt;)</source>
          <target state="translated">&lt;code&gt;var&lt;/code&gt; : declara una variable, asignando opcionalmente un valor. ( &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/var&quot;&gt;MDN&lt;/a&gt; )</target>
        </trans-unit>
        <trans-unit id="3849f1997a58ce69bfb01dd3b43d461870cc5bea" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;var&lt;/code&gt; and &lt;code&gt;let&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;var&lt;/code&gt; y &lt;code&gt;let&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="f4795a23dab3efdea98276a8557f04a9c2df93e4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;well_formed_exports.includes&lt;/code&gt;&lt;em&gt;&lt;code&gt;(string)&lt;/code&gt;&lt;/em&gt;&amp;ge;0.128.0</source>
          <target state="translated">&lt;code&gt;well_formed_exports.includes&lt;/code&gt;&lt;em&gt;&lt;code&gt;(string)&lt;/code&gt;&lt;/em&gt;&amp;ge;0.128.0</target>
        </trans-unit>
        <trans-unit id="9fa5ec242b5843745a7337208914fbc4494f1be2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;well_formed_exports&lt;/code&gt;&lt;em&gt;&lt;code&gt;(boolean)&lt;/code&gt;&lt;/em&gt;&amp;ge;0.125.0</source>
          <target state="translated">&lt;code&gt;well_formed_exports&lt;/code&gt;&lt;em&gt;&lt;code&gt;(boolean)&lt;/code&gt;&lt;/em&gt;&amp;ge;0.125.0</target>
        </trans-unit>
        <trans-unit id="618a581b65ff5f5e5889511d3cd080ab05886f03" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;code&gt;exports.js&lt;/code&gt;&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;code&gt;exports.js&lt;/code&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="5b33f07a5ba2608771292c96cae619e974a5fb21" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;code&gt;imports.js&lt;/code&gt;&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;code&gt;imports.js&lt;/code&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="2656931fc434aca0157a011d0d37c9e6f677adfb" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;em&gt;Classes&lt;/em&gt;&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;em&gt;Classes&lt;/em&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="6f4be936250abf866d7156093839a04de7c1cd2b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;em&gt;Don&amp;rsquo;t forget to mention &lt;code&gt;@flow&lt;/code&gt; on top of file, otherwise flow won&amp;rsquo;t report errors&lt;/em&gt;&lt;/strong&gt;.</source>
          <target state="translated">&lt;strong&gt;&lt;em&gt;No olvide mencionar &lt;code&gt;@flow&lt;/code&gt; en la parte superior del archivo, de lo contrario, el flujo no informar&amp;aacute; errores&lt;/em&gt;&lt;/strong&gt; .</target>
        </trans-unit>
        <trans-unit id="4284c426f28b28ecfd869ea4f96a80f7f8690134" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;em&gt;Interfaces&lt;/em&gt;&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;em&gt;Interfaces&lt;/em&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="f17253c245d87ac973fc5293b5a15ab24ab8bdc2" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;em&gt;Type Aliases&lt;/em&gt;&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;em&gt;Alias ​​de tipo&lt;/em&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="cbe8982c76a4cc7f7e9adfc12449f681674cbb61" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;em&gt;You should follow &lt;a href=&quot;../any&quot;&gt;all the same rules&lt;/a&gt; as &lt;code&gt;any&lt;/code&gt; when using &lt;code&gt;Function&lt;/code&gt;.&lt;/em&gt;&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;em&gt;Debe seguir &lt;a href=&quot;../any&quot;&gt;las mismas reglas&lt;/a&gt; que &lt;code&gt;any&lt;/code&gt; al usar &lt;code&gt;Function&lt;/code&gt; .&lt;/em&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="a2811438566c8ce65b8a6941e70fbece78eceaa1" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;A group of different possible types:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Un grupo de diferentes tipos posibles:&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="ae678a78ebebf05c595f0cdf9e9e80e85d991358" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;A single type:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Un solo tipo:&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="e53a0237f152f0b316bc97b2fc063f3efa825e84" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;A type based on another type:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Un tipo basado en otro tipo:&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="d99a25c652d8cfb74b77ae022021f7dccc449527" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;An arbitrary type that could be anything:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Un tipo arbitrario que podr&amp;iacute;a ser cualquier cosa:&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="17486ec505dad1463a8b0dc8465986bb70f1e04b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Dependency files&lt;/strong&gt;. These are the files which are needed in order to typecheck the focused or dependent files.</source>
          <target state="translated">&lt;strong&gt;Archivos de dependencia&lt;/strong&gt; . Estos son los archivos que se necesitan para verificar a m&amp;aacute;quina los archivos enfocados o dependientes.</target>
        </trans-unit>
        <trans-unit id="348b0bbf82732cfba30377f2a246a2d29c935065" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Dependent files&lt;/strong&gt;. These are the files which depend on the focused files. Changes to the focused files might cause type errors in the dependent files.</source>
          <target state="translated">&lt;strong&gt;Archivos dependientes&lt;/strong&gt; . Estos son los archivos que dependen de los archivos enfocados. Los cambios en los archivos seleccionados pueden provocar errores de tipo en los archivos dependientes.</target>
        </trans-unit>
        <trans-unit id="4168878b06eaa6917a0f012585506612f5054ea6" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Example:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Example:&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="2881ee068ac6090c9feffed65593bbb03cba2056" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Filesystem lazy mode&lt;/strong&gt;. Flow treats any file which has changed on the filesystem as focused. This mode is easier to use from the commandline, but a rebase can make every file appear focused.</source>
          <target state="translated">&lt;strong&gt;Modo perezoso del sistema de archivos&lt;/strong&gt; . Flow trata cualquier archivo que haya cambiado en el sistema de archivos como enfocado. Este modo es m&amp;aacute;s f&amp;aacute;cil de usar desde la l&amp;iacute;nea de comandos, pero un rebase puede hacer que cada archivo parezca enfocado.</target>
        </trans-unit>
        <trans-unit id="57df0fdf462f46d5158279bb928edc2c85becfed" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Fix:&lt;/strong&gt; If a tuple type is expected, then the annotation &lt;code&gt;[t1, t2]&lt;/code&gt; needs to be explicitly added on the export side.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ef3fbf79f9f056bf89518d43b35b17eee5c6d31c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Fix:&lt;/strong&gt; Introduce a new variable on the update and export that one. For example</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ad4759967bb3b7eb656510f997eac83b62f86ee5" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Fix:&lt;/strong&gt; To include the update on &lt;code&gt;y&lt;/code&gt; in the exported type, the export will need to be annotated with the type</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4d1871c2ba972fbc1e0adeb69045b60c7b76dcb5" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Focused files&lt;/strong&gt;. These are the files which the user cares about.</source>
          <target state="translated">&lt;strong&gt;Archivos enfocados&lt;/strong&gt; . Estos son los archivos que le interesan al usuario.</target>
        </trans-unit>
        <trans-unit id="4c72412e2b545e519f06a9eb3fbf56d6fbd15299" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;IDE lazy mode&lt;/strong&gt;. The IDE tells Flow which files have been opened and closed via &lt;code&gt;flow lsp&lt;/code&gt;. Flow treats any file which has ever been opened since the Flow server started as focused.</source>
          <target state="translated">&lt;strong&gt;Modo perezoso IDE&lt;/strong&gt; . El IDE le dice a Flow qu&amp;eacute; archivos se han abierto y cerrado a trav&amp;eacute;s de &lt;code&gt;flow lsp&lt;/code&gt; . Flow trata cualquier archivo que se haya abierto desde que se inici&amp;oacute; el servidor Flow como enfocado.</target>
        </trans-unit>
        <trans-unit id="4a2bb6782e12dafbea5a42ed08ba22dd8335a4a6" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; Arrays are also sometimes used as tuples in JavaScript, these are annotated differently in Flow. See the Tuple docs for more information.</source>
          <target state="translated">&lt;strong&gt;Nota: Las&lt;/strong&gt; matrices tambi&amp;eacute;n se usan a veces como tuplas en JavaScript, estas se anotan de manera diferente en Flow. Consulte los documentos de Tuple para obtener m&amp;aacute;s informaci&amp;oacute;n.</target>
        </trans-unit>
        <trans-unit id="d0c839a0690df63ac56fe1bed5a7b464ba8c43db" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; Because &lt;a href=&quot;#toc-react-elementprops&quot;&gt;&lt;code&gt;React.ElementProps&lt;/code&gt;&lt;/a&gt; does not preserve the optionality of &lt;code&gt;defaultProps&lt;/code&gt;, &lt;a href=&quot;#toc-react-elementconfig&quot;&gt;&lt;code&gt;React.ElementConfig&lt;/code&gt;&lt;/a&gt; (which does) is more often the right choice, especially for simple props pass-through as with &lt;a href=&quot;../hoc#toc-supporting-defaultprops-with-react-elementconfig&quot;&gt;higher-order components&lt;/a&gt;.</source>
          <target state="translated">&lt;strong&gt;Nota:&lt;/strong&gt; Debido a que &lt;a href=&quot;#toc-react-elementprops&quot;&gt; &lt;code&gt;React.ElementProps&lt;/code&gt; &lt;/a&gt; no conserva la opcionalidad de &lt;code&gt;defaultProps&lt;/code&gt; , &lt;a href=&quot;#toc-react-elementconfig&quot;&gt; &lt;code&gt;React.ElementConfig&lt;/code&gt; &lt;/a&gt; (que s&amp;iacute; lo hace) suele ser la opci&amp;oacute;n correcta, especialmente para el paso de accesorios simples como con &lt;a href=&quot;../hoc#toc-supporting-defaultprops-with-react-elementconfig&quot;&gt;componentes de orden superior&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="7fab5833ac1b21ea7a10d50df5d9bc2a182d5de9" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; If you don&amp;rsquo;t need to use the &lt;code&gt;Props&lt;/code&gt; type again you could also define it inline: &lt;code&gt;extends React.Component&amp;lt;{ foo: number, bar?: string }&amp;gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;strong&gt;Nota:&lt;/strong&gt; Si no necesita usar el tipo &lt;code&gt;Props&lt;/code&gt; nuevamente, tambi&amp;eacute;n puede definirlo en l&amp;iacute;nea: &lt;code&gt;extends React.Component&amp;lt;{ foo: number, bar?: string }&amp;gt;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="d95a1829d723b06d07fce08d5fc4c83da0c5b2f0" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; If you don&amp;rsquo;t need to use the &lt;code&gt;State&lt;/code&gt; type again you could also define it inline: &lt;code&gt;extends React.Component&amp;lt;{}, { count: number }&amp;gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;strong&gt;Nota:&lt;/strong&gt; Si no necesita usar el tipo de &lt;code&gt;State&lt;/code&gt; nuevamente, tambi&amp;eacute;n puede definirlo en l&amp;iacute;nea: &lt;code&gt;extends React.Component&amp;lt;{}, { count: number }&amp;gt;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="45fe059278697f2928479023e38c3ab10a142464" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; If you want methods like &lt;code&gt;map()&lt;/code&gt; and &lt;code&gt;forEach()&lt;/code&gt; or to handle a &lt;a href=&quot;../types#toc-react-childrenarray&quot;&gt;&lt;code&gt;React.ChildrenArray&amp;lt;T&amp;gt;&lt;/code&gt;&lt;/a&gt; as a normal JavaScript array then React provides the &lt;a href=&quot;https://facebook.github.io/react/docs/react-api.html#react.children&quot;&gt;&lt;code&gt;React.Children&lt;/code&gt; API&lt;/a&gt; to do just this. It has functions like &lt;code&gt;React.Children.toArray(props.children)&lt;/code&gt; that you can use to treat your &lt;a href=&quot;../types#toc-react-childrenarray&quot;&gt;&lt;code&gt;React.ChildrenArray&amp;lt;T&amp;gt;&lt;/code&gt;&lt;/a&gt; as a flat array.</source>
          <target state="translated">&lt;strong&gt;Nota:&lt;/strong&gt; Si desea m&amp;eacute;todos como &lt;code&gt;map()&lt;/code&gt; y &lt;code&gt;forEach()&lt;/code&gt; o para manejar un &lt;a href=&quot;../types#toc-react-childrenarray&quot;&gt; &lt;code&gt;React.ChildrenArray&amp;lt;T&amp;gt;&lt;/code&gt; &lt;/a&gt; como una matriz de JavaScript normal, React proporciona la &lt;a href=&quot;https://facebook.github.io/react/docs/react-api.html#react.children&quot;&gt;API &lt;/a&gt; &lt;code&gt;React.Children&lt;/code&gt; para hacer precisamente esto. Tiene funciones como &lt;code&gt;React.Children.toArray(props.children)&lt;/code&gt; que puede usar para tratar su &lt;a href=&quot;../types#toc-react-childrenarray&quot;&gt; &lt;code&gt;React.ChildrenArray&amp;lt;T&amp;gt;&lt;/code&gt; &lt;/a&gt; como una matriz plana.</target>
        </trans-unit>
        <trans-unit id="981e303e077480a1b13e37cfcb658e9d478c6764" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; If you want to use optional function parameters you&amp;rsquo;ll need to use the include comment form.</source>
          <target state="translated">&lt;strong&gt;Nota:&lt;/strong&gt; Si desea utilizar par&amp;aacute;metros de funci&amp;oacute;n opcionales, deber&amp;aacute; utilizar el formulario de inclusi&amp;oacute;n de comentarios.</target>
        </trans-unit>
        <trans-unit id="7d43ad66341153296b7a88ebc68288f393965e36" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; In 0.89.0+, React.ComponentType</source>
          <target state="translated">&lt;strong&gt;Nota:&lt;/strong&gt; En 0.89.0+, React.ComponentType</target>
        </trans-unit>
        <trans-unit id="981f48c806b7228b573613afe0482ea462d5a88a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; In version v0.127.0, the option to specify the suppression comment syntax was removed. &lt;code&gt;$FlowFixMe&lt;/code&gt;, &lt;code&gt;$FlowIssue&lt;/code&gt;, &lt;code&gt;$FlowExpectedError&lt;/code&gt;, and &lt;code&gt;$FlowIgnore&lt;/code&gt; became the only standard suppressions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7417850e8b9171bcdaf44485d8c88475bdf0d461" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; Previously object types used semicolons &lt;code&gt;;&lt;/code&gt; for splitting name-value pairs. While the syntax is still valid, you should use commas &lt;code&gt;,&lt;/code&gt;.</source>
          <target state="translated">&lt;strong&gt;Nota:&lt;/strong&gt; Anteriormente, los tipos de objetos usaban punto &lt;code&gt;;&lt;/code&gt; coma ; para dividir pares nombre-valor. Mientras que la sintaxis es a&amp;uacute;n v&amp;aacute;lida, se debe utilizar comas &lt;code&gt;,&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="87767fc2be8bc1d1db6ace0faafec6c1caffc4b4" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; React uses its own event system so it is important to use the &lt;code&gt;SyntheticEvent&lt;/code&gt; types instead of the DOM types such as &lt;code&gt;Event&lt;/code&gt;, &lt;code&gt;KeyboardEvent&lt;/code&gt;, and &lt;code&gt;MouseEvent&lt;/code&gt;.</source>
          <target state="translated">&lt;strong&gt;Nota:&lt;/strong&gt; React usa su propio sistema de eventos, por lo que es importante usar los tipos &lt;code&gt;SyntheticEvent&lt;/code&gt; en lugar de los tipos DOM como &lt;code&gt;Event&lt;/code&gt; , &lt;code&gt;KeyboardEvent&lt;/code&gt; y &lt;code&gt;MouseEvent&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="8f2bf27d4821a0d74e94cf2b6f04fa28b458b80e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; The &lt;code&gt;*variantOf&lt;/code&gt; types below are not a part of Flow, they are being used to explain variance.</source>
          <target state="translated">&lt;strong&gt;Nota:&lt;/strong&gt; Los tipos &lt;code&gt;*variantOf&lt;/code&gt; a continuaci&amp;oacute;n no forman parte de Flow, se utilizan para explicar la variaci&amp;oacute;n.</target>
        </trans-unit>
        <trans-unit id="102f82e83d1493ee86dfa63526c074eb08db5191" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; The parentheses are necessary to avoid ambiguity with other syntax.</source>
          <target state="translated">&lt;strong&gt;Nota:&lt;/strong&gt; Los par&amp;eacute;ntesis son necesarios para evitar la ambig&amp;uuml;edad con otra sintaxis.</target>
        </trans-unit>
        <trans-unit id="7f324099a923e249d53f34a12f3516e9e72c0142" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; This is because of &lt;a href=&quot;https://flow.org/en/lang/width-subtyping/&quot;&gt;&amp;ldquo;width subtyping&amp;rdquo;&lt;/a&gt;.</source>
          <target state="translated">&lt;strong&gt;Nota:&lt;/strong&gt; Esto se debe al &lt;a href=&quot;https://flow.org/en/lang/width-subtyping/&quot;&gt;&quot;subtipo de ancho&quot;&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="50be581c452b3e6bead6ab798ba2bb803100f906" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; This is just shorthand for &lt;code&gt;module.name_mapper='^\(.*\)\.EXTENSION$' -&amp;gt; 'TEMPLATE'&lt;/code&gt;)</source>
          <target state="translated">&lt;strong&gt;Nota:&lt;/strong&gt; Esto es solo una abreviatura de &lt;code&gt;module.name_mapper='^\(.*\)\.EXTENSION$' -&amp;gt; 'TEMPLATE'&lt;/code&gt; )</target>
        </trans-unit>
        <trans-unit id="beb96f00dcbfc7e17127978d7b2257796cddaa5e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; This is not the proper solution to the above problem, it was being used for demonstration only. The correct solution is annotating the function like this:</source>
          <target state="translated">&lt;strong&gt;Nota:&lt;/strong&gt; Esta no es la soluci&amp;oacute;n adecuada al problema anterior, se estaba utilizando solo para demostraci&amp;oacute;n. La soluci&amp;oacute;n correcta es anotar la funci&amp;oacute;n de esta manera:</target>
        </trans-unit>
        <trans-unit id="eaf59b7f203d1ba63f5e98b4e246170ccb103da4" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; To get the element instance, like &lt;code&gt;HTMLButtonElement&lt;/code&gt; in the example above, it is a common mistake to use &lt;code&gt;event.target&lt;/code&gt; instead of &lt;code&gt;event.currentTarget&lt;/code&gt;. The reason why you want to use &lt;code&gt;event.currentTarget&lt;/code&gt; is that &lt;code&gt;event.target&lt;/code&gt; may be the wrong element due to &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Document_Object_Model/Examples#Example_5:_Event_Propagation&quot;&gt;event propagation&lt;/a&gt;.</source>
          <target state="translated">&lt;strong&gt;Nota:&lt;/strong&gt; Para obtener la instancia del elemento, como &lt;code&gt;HTMLButtonElement&lt;/code&gt; en el ejemplo anterior, es un error com&amp;uacute;n usar &lt;code&gt;event.target&lt;/code&gt; en lugar de &lt;code&gt;event.currentTarget&lt;/code&gt; . La raz&amp;oacute;n por la que desea utilizar &lt;code&gt;event.currentTarget&lt;/code&gt; es que &lt;code&gt;event.target&lt;/code&gt; puede ser el elemento incorrecto debido a la &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Document_Object_Model/Examples#Example_5:_Event_Propagation&quot;&gt;propagaci&amp;oacute;n del evento&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="51bb4c125cd4418ed706f35e265efaf1c78dea88" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; Typing context values requires Flow 0.70 or later.</source>
          <target state="translated">&lt;strong&gt;Nota:&lt;/strong&gt; Escribir valores de contexto requiere Flow 0.70 o posterior.</target>
        </trans-unit>
        <trans-unit id="0963a4d340e3fcd46ba3fd94010ce7b45a5555b6" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; Watch out for comments! Take the following:</source>
          <target state="translated">&lt;strong&gt;Nota: &amp;iexcl;&lt;/strong&gt; Cuidado con los comentarios! Toma lo siguiente:</target>
        </trans-unit>
        <trans-unit id="c19727e7a33fbaf5adc662298c963e80689873d3" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; Watch out for whitespace! Take the following:</source>
          <target state="translated">&lt;strong&gt;Nota: &amp;iexcl;&lt;/strong&gt; Cuidado con los espacios en blanco! Toma lo siguiente:</target>
        </trans-unit>
        <trans-unit id="cdf1510cc13fa0938c540a829729b695b1f7fe47" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; We import &lt;code&gt;React&lt;/code&gt; as a namespace here with &lt;code&gt;import * as React from 'react'&lt;/code&gt; instead of as a default with &lt;code&gt;import React from 'react'&lt;/code&gt;. When importing React as an ES module you may use either style, but importing as a namespace gives you access to React&amp;rsquo;s &lt;a href=&quot;../types&quot;&gt;utility types&lt;/a&gt;.</source>
          <target state="translated">&lt;strong&gt;Nota:&lt;/strong&gt; Importamos &lt;code&gt;React&lt;/code&gt; como un espacio de nombres aqu&amp;iacute; con &lt;code&gt;import * as React from 'react'&lt;/code&gt; lugar de como predeterminado con &lt;code&gt;import React from 'react'&lt;/code&gt; . Al importar React como un m&amp;oacute;dulo ES, puede usar cualquier estilo, pero la importaci&amp;oacute;n como un espacio de nombres le da acceso a los &lt;a href=&quot;../types&quot;&gt;tipos de utilidad&lt;/a&gt; de React .</target>
        </trans-unit>
        <trans-unit id="5ec9e52dafaf04b0fca35e642b34088ae3ccf8ca" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; We&amp;rsquo;re going to go through a stripped down example for demonstrating how to make use of type cast expressions. This example is not solved well in practice.</source>
          <target state="translated">&lt;strong&gt;Nota:&lt;/strong&gt; Vamos a ver un ejemplo simplificado para demostrar c&amp;oacute;mo hacer uso de expresiones de conversi&amp;oacute;n de tipos. Este ejemplo no se resuelve bien en la pr&amp;aacute;ctica.</target>
        </trans-unit>
        <trans-unit id="efca69a7365214cc560454bf531e712df56be690" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; When it comes to objects, the order-specific way in which intersection types are implemented in Flow, may often seem counterintuitive from a set theoretic point of view. In sets, the operands of intersection can change order arbitrarily (commutative property). For this reason, it is a better practice to define this kind of operation over object types using the &lt;em&gt;spread&lt;/em&gt; operator, e.g. &lt;code&gt;{...One,...Two}&lt;/code&gt;, where the ordering semantics are better specified.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="13714a09cafc3db44b0f21e686d8c767ffcc7bcb" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; While importing React with a default import works:</source>
          <target state="translated">&lt;strong&gt;Nota:&lt;/strong&gt; Mientras que la importaci&amp;oacute;n de React con una importaci&amp;oacute;n predeterminada funciona:</target>
        </trans-unit>
        <trans-unit id="66a1c90af7e35b36d5177b1f056c71e3827448ea" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; You can specify &lt;code&gt;module.name_mapper.extension&lt;/code&gt; multiple times for different extensions.</source>
          <target state="translated">&lt;strong&gt;Nota:&lt;/strong&gt; Puede especificar &lt;code&gt;module.name_mapper.extension&lt;/code&gt; varias veces para diferentes extensiones.</target>
        </trans-unit>
        <trans-unit id="e953a25a8164a088aa27a99871bd1034fa4f7aa5" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; You can specify &lt;code&gt;sharedmemory.dirs&lt;/code&gt; multiple times.</source>
          <target state="translated">&lt;strong&gt;Nota:&lt;/strong&gt; Puede especificar &lt;code&gt;sharedmemory.dirs&lt;/code&gt; varias veces.</target>
        </trans-unit>
        <trans-unit id="cad40a5701acf5649fe5798b08c924b1a91443a6" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; You can specify &lt;code&gt;suppress_comment&lt;/code&gt; multiple times. If you do define any &lt;code&gt;suppress_comment&lt;/code&gt;s, the built-in &lt;code&gt;$FlowFixMe&lt;/code&gt; suppression will be erased in favor of the regexps you specify. If you wish to use &lt;code&gt;$FlowFixMe&lt;/code&gt; with some additional custom suppression comments, you must manually specify &lt;code&gt;\\(.\\|\n\\)*\\$FlowFixMe&lt;/code&gt; in your custom list of suppressions.</source>
          <target state="translated">&lt;strong&gt;Nota:&lt;/strong&gt; Puede especificar &lt;code&gt;suppress_comment&lt;/code&gt; varias veces. Si define alg&amp;uacute;n &lt;code&gt;suppress_comment&lt;/code&gt; s, la supresi&amp;oacute;n de &lt;code&gt;$FlowFixMe&lt;/code&gt; se borrar&amp;aacute; a favor de las expresiones regulares que especifique. Si desea utilizar &lt;code&gt;$FlowFixMe&lt;/code&gt; con algunos comentarios de supresi&amp;oacute;n personalizados adicionales, debe especificar manualmente &lt;code&gt;\\(.\\|\n\\)*\\$FlowFixMe&lt;/code&gt; en su lista personalizada de supresiones.</target>
        </trans-unit>
        <trans-unit id="b3ef30213691916dbfdadddd670829ca29768fca" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; You can specify &lt;code&gt;suppress_type&lt;/code&gt; multiple times.</source>
          <target state="translated">&lt;strong&gt;Nota:&lt;/strong&gt; Puede especificar &lt;code&gt;suppress_type&lt;/code&gt; varias veces.</target>
        </trans-unit>
        <trans-unit id="229ab2d563e326e0866c16c2ecaf54037d4f3e62" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; You don&amp;rsquo;t need to make &lt;code&gt;foo&lt;/code&gt; nullable in your &lt;code&gt;Props&lt;/code&gt; type. Flow will make sure that &lt;code&gt;foo&lt;/code&gt; is optional if you have a default prop for &lt;code&gt;foo&lt;/code&gt;.</source>
          <target state="translated">&lt;strong&gt;Nota:&lt;/strong&gt; No es necesario hacer que &lt;code&gt;foo&lt;/code&gt; sea anulable en su tipo de &lt;code&gt;Props&lt;/code&gt; . Flow se asegurar&amp;aacute; de que &lt;code&gt;foo&lt;/code&gt; sea ​​opcional si tienes un accesorio predeterminado para &lt;code&gt;foo&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="a8dbdf0ca4a737e620de55f8736bb8082cbf733a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; You need to use &lt;code&gt;import * as React from 'react'&lt;/code&gt; here instead of &lt;code&gt;import React from 'react'&lt;/code&gt; to get access to the &lt;a href=&quot;../types#toc-react-node&quot;&gt;&lt;code&gt;React.Node&lt;/code&gt;&lt;/a&gt; type. We explain why that is in the &lt;a href=&quot;../types&quot;&gt;React Type Reference&lt;/a&gt;.</source>
          <target state="translated">&lt;strong&gt;Nota: &lt;/strong&gt;&lt;a href=&quot;../types#toc-react-node&quot;&gt; &lt;code&gt;React.Node&lt;/code&gt; &lt;/a&gt; usar &lt;code&gt;import * as React from 'react'&lt;/code&gt; aqu&amp;iacute; en lugar de &lt;code&gt;import React from 'react'&lt;/code&gt; para obtener acceso al tipo React.Node . Explicamos por qu&amp;eacute; eso est&amp;aacute; en &lt;a href=&quot;../types&quot;&gt;React Type Reference&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="e4e73965c0849c76958d2605758705535cf6dda6" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; You&amp;rsquo;ll probably want to add a &lt;code&gt;prepublish&lt;/code&gt; script that runs this transform as well, so that it runs before you publish your code to the npm registry.</source>
          <target state="translated">&lt;strong&gt;Nota:&lt;/strong&gt; Probablemente desee agregar un script &lt;code&gt;prepublish&lt;/code&gt; que tambi&amp;eacute;n ejecute esta transformaci&amp;oacute;n, para que se ejecute antes de publicar su c&amp;oacute;digo en el registro npm.</target>
        </trans-unit>
        <trans-unit id="d0d8dc4eae5a24d3928bd38400456f9cbe5313d9" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; you can specify &lt;code&gt;module.file_ext&lt;/code&gt; multiple times</source>
          <target state="translated">&lt;strong&gt;Nota:&lt;/strong&gt; puede especificar &lt;code&gt;module.file_ext&lt;/code&gt; varias veces</target>
        </trans-unit>
        <trans-unit id="277f1b76997cbec25e723aaaf5fe3c78b6b009ac" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; you can specify &lt;code&gt;module.name_mapper&lt;/code&gt; multiple times</source>
          <target state="translated">&lt;strong&gt;Nota:&lt;/strong&gt; puede especificar &lt;code&gt;module.name_mapper&lt;/code&gt; varias veces</target>
        </trans-unit>
        <trans-unit id="0cf4d9235824eed02c46e2f1d98a8ce97a15b5b1" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; you can specify &lt;code&gt;module.system.node.resolve_dirname&lt;/code&gt; multiple times</source>
          <target state="translated">&lt;strong&gt;Nota:&lt;/strong&gt; puede especificar &lt;code&gt;module.system.node.resolve_dirname&lt;/code&gt; varias veces</target>
        </trans-unit>
        <trans-unit id="fd3867675ccb5b52461008d6e03fb348c8a53b40" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Special thanks to&lt;/strong&gt;: &lt;a href=&quot;https://github.com/jareware&quot;&gt;Jarno Rantanen&lt;/a&gt; for building &lt;a href=&quot;https://github.com/jareware/flotate&quot;&gt;flotate&lt;/a&gt; and supporting us merging his syntax upstream into Flow.</source>
          <target state="translated">&lt;strong&gt;Un agradecimiento especial a&lt;/strong&gt; : &lt;a href=&quot;https://github.com/jareware&quot;&gt;Jarno Rantanen&lt;/a&gt; por crear &lt;a href=&quot;https://github.com/jareware/flotate&quot;&gt;flotate&lt;/a&gt; y apoyarnos en la fusi&amp;oacute;n de su sintaxis en Flow.</target>
        </trans-unit>
        <trans-unit id="0ab16457a3bfde673a39e8eef8eacc4fb2b13a43" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;The empty type&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="01a48fcac72977e1bf1c5fb03ed59c9380790e6f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Try to provide a libdef for each third-party library your project uses&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Intente proporcionar una libdef para cada biblioteca de terceros que utilice su proyecto&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="f43a1aec0402c2b241ef1d914c61cefd59f011c8" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Unchecked files&lt;/strong&gt;. All other files.</source>
          <target state="translated">&lt;strong&gt;Archivos sin marcar&lt;/strong&gt; . Todos los dem&amp;aacute;s archivos.</target>
        </trans-unit>
        <trans-unit id="85f04db23ee1fe4a85db7928652d3c5838e19e97" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Union types&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="20650203bdc4f07381a0c76dcf67624b542f60c7" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Use on multiple files&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a874bf28f6bc203a4ab83ee91607e029bb99dfcd" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Warning:&lt;/strong&gt; Do not mistake &lt;code&gt;any&lt;/code&gt; with &lt;code&gt;mixed&lt;/code&gt;. &lt;a href=&quot;../mixed&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">&lt;strong&gt;Advertencia:&lt;/strong&gt; No confunda &lt;code&gt;any&lt;/code&gt; con &lt;code&gt;mixed&lt;/code&gt; . &lt;a href=&quot;../mixed&quot;&gt;Lee mas&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="8cc4bce83d85500a6f45865d989cce18fc4a43ac" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Warning:&lt;/strong&gt; Flow does not infer generic types. If you want something to have a generic type, &lt;strong&gt;annotate it&lt;/strong&gt;. Otherwise, Flow may infer a type that is less polymorphic than you expect.</source>
          <target state="translated">&lt;strong&gt;Advertencia:&lt;/strong&gt; Flow no infiere tipos gen&amp;eacute;ricos. Si desea que algo tenga un tipo gen&amp;eacute;rico, &lt;strong&gt;an&amp;oacute;telo&lt;/strong&gt; . De lo contrario, Flow puede inferir un tipo que sea menos polim&amp;oacute;rfico de lo esperado.</target>
        </trans-unit>
        <trans-unit id="a280dc6a74b332873e229283e81f56eb6ccce4ae" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Warning:&lt;/strong&gt; For performance purposes, we always recommend you annotate with concrete arguments when you can. &lt;code&gt;_&lt;/code&gt; is not unsafe, but it is slower than explicitly specifying the type arguments.</source>
          <target state="translated">&lt;strong&gt;Advertencia:&lt;/strong&gt; por motivos de rendimiento, siempre recomendamos que haga anotaciones con argumentos concretos cuando pueda. &lt;code&gt;_&lt;/code&gt; no es inseguro, pero es m&amp;aacute;s lento que especificar expl&amp;iacute;citamente los argumentos de tipo.</target>
        </trans-unit>
        <trans-unit id="31f870561ad37a87582f2c7ee2fa8398d4fae0b2" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Watchman lazy mode&lt;/strong&gt;. When starting up, Flow treats any file as focused if it has changed since the mergebase with master (the common ancestor of the current commit and the master branch). Any subsequent file that changes is also focused. After a rebase which changes the mergebase, Flow may restart the server if it estimates that a restart is faster than a recheck.</source>
          <target state="translated">&lt;strong&gt;Modo perezoso del vigilante&lt;/strong&gt; . Al iniciarse, Flow trata cualquier archivo como enfocado si ha cambiado desde la base de fusi&amp;oacute;n con master (el ancestro com&amp;uacute;n de la confirmaci&amp;oacute;n actual y la rama master). Tambi&amp;eacute;n se enfoca cualquier archivo posterior que cambie. Despu&amp;eacute;s de una reorganizaci&amp;oacute;n que cambia la base de combinaci&amp;oacute;n, Flow puede reiniciar el servidor si estima que un reinicio es m&amp;aacute;s r&amp;aacute;pido que una nueva comprobaci&amp;oacute;n.</target>
        </trans-unit>
        <trans-unit id="a98cee02f3dbbb4c3211dc06a52512a7cf0f4484" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Which types should be &amp;ldquo;covered&amp;rdquo;?&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="95b4924a0b182cfffbd184b94a6565475c510c1b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;error:&lt;/strong&gt; Lints with severity &lt;code&gt;error&lt;/code&gt; are treated exactly the same as any other Flow error.</source>
          <target state="translated">&lt;strong&gt;error: Las&lt;/strong&gt; pelusas con &lt;code&gt;error&lt;/code&gt; de gravedad se tratan exactamente igual que cualquier otro error de flujo.</target>
        </trans-unit>
        <trans-unit id="1a03a729136b36f5838887b635904e593801ed41" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;flow-typed/myLibDef.js&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;flow-typed/myLibDef.js&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="e33c8943ab39266d98f3fccd3a3499ba35474f73" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;flow-typed/some-commonjs-module.js&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;flow-typed/some-commonjs-module.js&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="6bddb02bd60e0167f1a6757b72ddc9ab8cccab64" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;flow-typed/some-es-module.js&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;flow-typed/some-es-module.js&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="3f98671d24b241f481d2118b0f7963a30771b5ea" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;off:&lt;/strong&gt; The lint is ignored. Setting a lint to &lt;code&gt;off&lt;/code&gt; is similar to suppressing a type error with a suppression comment, except with much more granularity.</source>
          <target state="translated">&lt;strong&gt;apagado:&lt;/strong&gt; la pelusa se ignora. &lt;code&gt;off&lt;/code&gt; una pelusa es similar a suprimir un error de tipo con un comentario de supresi&amp;oacute;n, excepto con mucha m&amp;aacute;s granularidad.</target>
        </trans-unit>
        <trans-unit id="d023c19a616c35ca9826c7a2ffac16870361f13d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;settings over a block of code:&lt;/strong&gt; A pair of &lt;code&gt;flowlint&lt;/code&gt; comments can be used to apply a certain setting over a block of code. For example, to disabling the untyped-type-import lint over a block of type imports would look like this:</source>
          <target state="translated">&lt;strong&gt;configuraciones sobre un bloque de c&amp;oacute;digo:&lt;/strong&gt; se pueden usar un par de comentarios de &lt;code&gt;flowlint&lt;/code&gt; para aplicar una determinada configuraci&amp;oacute;n sobre un bloque de c&amp;oacute;digo. Por ejemplo, para deshabilitar el lint de importaci&amp;oacute;n de tipo sin tipo sobre un bloque de importaciones de tipo se ver&amp;iacute;a as&amp;iacute;:</target>
        </trans-unit>
        <trans-unit id="31146238339ea53d1542596a43e6ef00dc10cce7" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;settings over a file:&lt;/strong&gt; A &lt;code&gt;flowlint&lt;/code&gt; comment doesn&amp;rsquo;t have to have a matching comment to form a block. An unmatched comment simply applies its settings to the rest of the file. You could use this, for example, to suppress all sketchy-null-check lints in a particular file:</source>
          <target state="translated">&lt;strong&gt;configuraci&amp;oacute;n sobre un archivo:&lt;/strong&gt; un comentario de &lt;code&gt;flowlint&lt;/code&gt; no tiene que tener un comentario coincidente para formar un bloque. Un comentario incomparable simplemente aplica su configuraci&amp;oacute;n al resto del archivo. Puede usar esto, por ejemplo, para suprimir todos los lints incompletos-null-check en un archivo en particular:</target>
        </trans-unit>
        <trans-unit id="fa2579b9e2d9cbad84fbd5f31d89ceb484a456f5" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;settings over part of a line:&lt;/strong&gt; The settings applied by &lt;code&gt;flowlint&lt;/code&gt; start and end right at the comment itself. This means that you can do things like</source>
          <target state="translated">&lt;strong&gt;configuraciones sobre parte de una l&amp;iacute;nea: las&lt;/strong&gt; configuraciones aplicadas por &lt;code&gt;flowlint&lt;/code&gt; comienzan y terminan justo en el comentario mismo. Esto significa que puedes hacer cosas como</target>
        </trans-unit>
        <trans-unit id="feb7c9b56545cc3391e09e0d2b8bd5709fa97489" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;warn:&lt;/strong&gt; Warnings are a new severity level introduced by the linting framework. They are treated differently than errors in a couple of ways:</source>
          <target state="translated">&lt;strong&gt;advertir:&lt;/strong&gt; Las advertencias son un nuevo nivel de gravedad introducido por el marco de linting. Se tratan de manera diferente a los errores en un par de formas:</target>
        </trans-unit>
        <trans-unit id="8f637424e74ed1ebcadcdbadc0c7f23a162bdc46" translate="yes" xml:space="preserve">
          <source>@flow - Parse this file with Flow syntax allowed and typecheck it.</source>
          <target state="translated">@flow: analiza este archivo con la sintaxis de flujo permitida y compru&amp;eacute;balo.</target>
        </trans-unit>
        <trans-unit id="dab817ff7a654e90ff5dd7173e93ea494624263b" translate="yes" xml:space="preserve">
          <source>@noflow - Parse this file with Flow syntax allowed and do not typecheck it. This is meant as an escape hatch to suppress Flow in a file without having to delete all the Flow-specific syntax.</source>
          <target state="translated">@noflow: analiza este archivo con la sintaxis de flujo permitida y no lo verifique. Esto pretende ser una trampilla de escape para suprimir Flow en un archivo sin tener que eliminar toda la sintaxis espec&amp;iacute;fica de Flow.</target>
        </trans-unit>
        <trans-unit id="d5517ef60c8c970054ed9b5ae5d4d8803202583f" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;$PropertyType&amp;lt;T, k&amp;gt;&lt;/code&gt; is the type at a given key &lt;code&gt;k&lt;/code&gt;. As of Flow v0.36.0, &lt;code&gt;k&lt;/code&gt; must be a literal string.</source>
          <target state="translated">Un &lt;code&gt;$PropertyType&amp;lt;T, k&amp;gt;&lt;/code&gt; es el tipo en una clave &lt;code&gt;k&lt;/code&gt; dada . A partir de Flow v0.36.0, &lt;code&gt;k&lt;/code&gt; debe ser una cadena literal.</target>
        </trans-unit>
        <trans-unit id="3e7f5ef7659179e8cb5f3ac39ecffed44e573698" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Boolean&lt;/code&gt; is a wrapper object created by the global &lt;code&gt;new Boolean(x)&lt;/code&gt; constructor.</source>
          <target state="translated">Un &lt;code&gt;Boolean&lt;/code&gt; es un objeto contenedor creado por el &lt;code&gt;new Boolean(x)&lt;/code&gt; constructor global booleano (x) .</target>
        </trans-unit>
        <trans-unit id="f4b4c1e23604a85feb14553cd867329fa18edcb9" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Number&lt;/code&gt; is a wrapper object created by the global &lt;code&gt;new Number(x)&lt;/code&gt; constructor.</source>
          <target state="translated">Un &lt;code&gt;Number&lt;/code&gt; es un objeto contenedor creado por el &lt;code&gt;new Number(x)&lt;/code&gt; constructor global de Number (x) .</target>
        </trans-unit>
        <trans-unit id="7ff4f95a14f0f15fb91feaff17eb578d01d42954" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;React.Element&amp;lt;typeof Component&amp;gt;&lt;/code&gt; takes a single type argument, &lt;code&gt;typeof Component&lt;/code&gt;. &lt;code&gt;typeof Component&lt;/code&gt; is the component type of the React element. For an intrinsic element, &lt;code&gt;typeof Component&lt;/code&gt; will be the string literal for the intrinsic you used. Here are a few examples with DOM intrinsics:</source>
          <target state="translated">Un &lt;code&gt;React.Element&amp;lt;typeof Component&amp;gt;&lt;/code&gt; toma un argumento de tipo &amp;uacute;nico, &lt;code&gt;typeof Component&lt;/code&gt; . &lt;code&gt;typeof Component&lt;/code&gt; es el tipo de componente del elemento React. Para un elemento intr&amp;iacute;nseco, &lt;code&gt;typeof Component&lt;/code&gt; ser&amp;aacute; el literal de cadena para el intr&amp;iacute;nseco que us&amp;oacute;. Aqu&amp;iacute; hay algunos ejemplos con intr&amp;iacute;nsecos DOM:</target>
        </trans-unit>
        <trans-unit id="3cc9f3a301444a49c02a8ccdf90391c3099669bb" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;String&lt;/code&gt; is a wrapper object created by the global &lt;code&gt;new String(x)&lt;/code&gt; constructor.</source>
          <target state="translated">Un &lt;code&gt;String&lt;/code&gt; es un objeto contenedor creado por el &lt;code&gt;new String(x)&lt;/code&gt; constructor String (x) global .</target>
        </trans-unit>
        <trans-unit id="1aa87ca478a9e8203d1f48b664ee80f4bde77cca" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;boolean&lt;/code&gt; is a literal value like &lt;code&gt;true&lt;/code&gt; or &lt;code&gt;false&lt;/code&gt; or the result of an expression like &lt;code&gt;a === b&lt;/code&gt;.</source>
          <target state="translated">Un &lt;code&gt;boolean&lt;/code&gt; o es un valor literal como &lt;code&gt;true&lt;/code&gt; o &lt;code&gt;false&lt;/code&gt; o el resultado de una expresi&amp;oacute;n como &lt;code&gt;a === b&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="eae9db4713f41ce51d4836cd52cd83cf66fe6bba" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;flowlint-line&lt;/code&gt; comment works similarly to a &lt;code&gt;flowlint&lt;/code&gt; comment, except it only applies its settings to the current line instead of applying them for the rest of the file. The primary use for &lt;code&gt;flowlint-line&lt;/code&gt; comments is to suppress a lint on a particular line:</source>
          <target state="translated">Un &lt;code&gt;flowlint-line&lt;/code&gt; funciona de manera similar a un comentario de &lt;code&gt;flowlint&lt;/code&gt; , excepto que solo aplica su configuraci&amp;oacute;n a la l&amp;iacute;nea actual en lugar de aplicarla al resto del archivo. El uso principal &lt;code&gt;flowlint-line&lt;/code&gt; comentarios flowlint-line es suprimir una pelusa en una l&amp;iacute;nea en particular:</target>
        </trans-unit>
        <trans-unit id="3dbdddd5ad4de5b2edfb46887933757af099bccf" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;number&lt;/code&gt; is a literal value like &lt;code&gt;42&lt;/code&gt; or &lt;code&gt;3.14&lt;/code&gt; or the result of an expression like &lt;code&gt;parseFloat(x)&lt;/code&gt;.</source>
          <target state="translated">Un &lt;code&gt;number&lt;/code&gt; es un valor literal como &lt;code&gt;42&lt;/code&gt; o &lt;code&gt;3.14&lt;/code&gt; o el resultado de una expresi&amp;oacute;n como &lt;code&gt;parseFloat(x)&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="810376c88abf15447cb20ec803309eab84ccf149" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;string&lt;/code&gt; is a literal value like &lt;code&gt;&quot;foo&quot;&lt;/code&gt; or the result of an expression like &lt;code&gt;&quot;&quot; + 42&lt;/code&gt;.</source>
          <target state="translated">Una &lt;code&gt;string&lt;/code&gt; es un valor literal como &lt;code&gt;&quot;foo&quot;&lt;/code&gt; o el resultado de una expresi&amp;oacute;n como &lt;code&gt;&quot;&quot; + 42&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="86a442d2c56258fa63e09bdf1e3922431ce6755c" translate="yes" xml:space="preserve">
          <source>A React children array can be a single value or an array nested to any level. It is designed to be used with the &lt;a href=&quot;https://reactjs.org/docs/react-api.html#reactchildren&quot;&gt;&lt;code&gt;React.Children&lt;/code&gt; API&lt;/a&gt;.</source>
          <target state="translated">Una matriz de ni&amp;ntilde;os de React puede ser un valor &amp;uacute;nico o una matriz anidada en cualquier nivel. Est&amp;aacute; dise&amp;ntilde;ado para usarse con la &lt;a href=&quot;https://reactjs.org/docs/react-api.html#reactchildren&quot;&gt;API &lt;/a&gt; &lt;code&gt;React.Children&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="1ac20284b90912b5ee342718a932002c471e7063" translate="yes" xml:space="preserve">
          <source>A React element is the type for the value of a JSX element:</source>
          <target state="translated">Un elemento React es el tipo para el valor de un elemento JSX:</target>
        </trans-unit>
        <trans-unit id="5d4c2e7721c9d46456be0ebe1e112134378df4c1" translate="yes" xml:space="preserve">
          <source>A class or function component with config &lt;code&gt;Config&lt;/code&gt; may be used in places that expect &lt;code&gt;React.AbstractComponent&amp;lt;Config&amp;gt;&lt;/code&gt;.</source>
          <target state="translated">Un componente de clase o funci&amp;oacute;n con config &lt;code&gt;Config&lt;/code&gt; se puede usar en lugares que esperan &lt;code&gt;React.AbstractComponent&amp;lt;Config&amp;gt;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="18f783bada407df0bf7a1c68c40b7440b9e84011" translate="yes" xml:space="preserve">
          <source>A codemod for large codebases</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="412ea89d772fe7032992a61ea976015e66c9c94d" translate="yes" xml:space="preserve">
          <source>A common error case is when a type &lt;code&gt;A&lt;/code&gt;, defined in a file &lt;code&gt;a.js&lt;/code&gt;, but not exported, is inferred in file &lt;code&gt;b.js&lt;/code&gt;. The codemod will skip adding this annotation and report an error in the logs. The fix this case, you can export &lt;code&gt;A&lt;/code&gt; in &lt;code&gt;a.js&lt;/code&gt;. Note that it is not necessary to manually import &lt;code&gt;A&lt;/code&gt; in &lt;code&gt;b.js&lt;/code&gt;. The codemod will do this automatically.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5c97c303f1555df5edf4bfe277f9d6c3317ef0a7" translate="yes" xml:space="preserve">
          <source>A common use case for higher-order components is to inject a prop. The HOC automatically sets a prop and returns a component which no longer requires that prop. For example, consider a navigation prop, or in the case of &lt;a href=&quot;https://github.com/reactjs/react-redux/blob/master/docs/api.md#connectmapstatetoprops-mapdispatchtoprops-mergeprops-options&quot;&gt;&lt;code&gt;react-redux&lt;/code&gt; a &lt;code&gt;store&lt;/code&gt; prop&lt;/a&gt;. How would one type this?</source>
          <target state="translated">Un caso de uso com&amp;uacute;n para componentes de orden superior es inyectar un accesorio. El HOC establece autom&amp;aacute;ticamente un accesorio y devuelve un componente que ya no requiere ese accesorio. Por ejemplo, considere un accesorio de navegaci&amp;oacute;n o, en el caso de &lt;a href=&quot;https://github.com/reactjs/react-redux/blob/master/docs/api.md#connectmapstatetoprops-mapdispatchtoprops-mergeprops-options&quot;&gt; &lt;code&gt;react-redux&lt;/code&gt; , un accesorio de &lt;code&gt;store&lt;/code&gt; &lt;/a&gt; . &amp;iquest;C&amp;oacute;mo escribir&amp;iacute;a uno esto?</target>
        </trans-unit>
        <trans-unit id="d32a9d4dda628352dcb7b81d1073c6634e57dfb3" translate="yes" xml:space="preserve">
          <source>A common use case of this type is when we want to annotate an element with a type that hides the element details. For example</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="93d366e66197a09ccf2c1277e6ddbdf41eb6a727" translate="yes" xml:space="preserve">
          <source>A common use of intersection types is to express functions that return different results based on the input we pass in. Suppose for example that we want to write the type of a function that</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="30dbf123853c4a0e8c3631a140f89f123c49780e" translate="yes" xml:space="preserve">
          <source>A libdef is a special file that informs Flow about the type signature of some specific third-party module or package of modules that your application uses. If you&amp;rsquo;re familiar with languages that have header files (like &lt;code&gt;C++&lt;/code&gt;), you can think of libdefs as a similar concept.</source>
          <target state="translated">Un libdef es un archivo especial que informa a Flow sobre el tipo de firma de alg&amp;uacute;n m&amp;oacute;dulo o paquete de m&amp;oacute;dulos de terceros espec&amp;iacute;fico que utiliza su aplicaci&amp;oacute;n. Si est&amp;aacute; familiarizado con lenguajes que tienen archivos de encabezado (como &lt;code&gt;C++&lt;/code&gt; ), puede pensar en libdefs como un concepto similar.</target>
        </trans-unit>
        <trans-unit id="c2a62759846de776a0003ecb09307da295487e4a" translate="yes" xml:space="preserve">
          <source>A limitation in Flow is that it can&amp;rsquo;t &lt;em&gt;check&lt;/em&gt; the body of a function against an intersection type. In other words, if we provided the following implementation for &lt;code&gt;fn&lt;/code&gt; right after the above declarations</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ca822c818a1e02043f7fd8c1f3e2121e587ff173" translate="yes" xml:space="preserve">
          <source>A popular pattern in React is the &lt;a href=&quot;https://facebook.github.io/react/docs/higher-order-components.html&quot;&gt;higher-order component pattern&lt;/a&gt;, so it&amp;rsquo;s important that we can provide effective types for higher-order components in Flow. If you don&amp;rsquo;t already know what a higher-order component is then make sure to read the &lt;a href=&quot;https://facebook.github.io/react/docs/higher-order-components.html&quot;&gt;React documentation on higher-order components&lt;/a&gt; before continuing.</source>
          <target state="translated">Un patr&amp;oacute;n popular en React es el &lt;a href=&quot;https://facebook.github.io/react/docs/higher-order-components.html&quot;&gt;patr&amp;oacute;n de componentes de orden superior&lt;/a&gt; , por lo que es importante que podamos proporcionar tipos efectivos para componentes de orden superior en Flow. Si a&amp;uacute;n no sabe qu&amp;eacute; es un componente de orden superior, aseg&amp;uacute;rese de leer la &lt;a href=&quot;https://facebook.github.io/react/docs/higher-order-components.html&quot;&gt;documentaci&amp;oacute;n de React sobre componentes de orden superior&lt;/a&gt; antes de continuar.</target>
        </trans-unit>
        <trans-unit id="2f8e9dfe25e3835aaff6cc6ecae3f02d157188cb" translate="yes" xml:space="preserve">
          <source>A static type checker uses either the names or the structure of the types in order to compare them against other types. Checking against the name is nominal typing and checking against the structure is structural typing.</source>
          <target state="translated">Un verificador de tipos estáticos utiliza los nombres o la estructura de los tipos para compararlos con otros tipos.La comprobación con el nombre es un tipo nominal y la comprobación con la estructura es un tipo estructural.</target>
        </trans-unit>
        <trans-unit id="28c9235604e338d6cfdf2f6d1c8068bc2c09c5db" translate="yes" xml:space="preserve">
          <source>A suppression is a special kind of comment that you can place on the line before a type error. It tells Flow not to report that error when checking your code. Suppression comments look like the following:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7595885a14485fa265557fbbbef6759a3992e699" translate="yes" xml:space="preserve">
          <source>A suppressor can be one of the following:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="671a4ff4e804eebb070be2fc14388832f1511e9d" translate="yes" xml:space="preserve">
          <source>A type is something like a string, a boolean, an object, or a class. They have names and they have structures. Primitives like strings or booleans have a very simple structure and only go by one name.</source>
          <target state="translated">Un tipo es algo como una cuerda,una booleana,un objeto o una clase.Tienen nombres y tienen estructuras.Los primitivos como las cuerdas o las booleanas tienen una estructura muy simple y sólo tienen un nombre.</target>
        </trans-unit>
        <trans-unit id="41848119547f63e0f0117b445db59a03ebf4ba0e" translate="yes" xml:space="preserve">
          <source>A type like &lt;code&gt;number&lt;/code&gt;, &lt;code&gt;boolean&lt;/code&gt;, or &lt;code&gt;string&lt;/code&gt; describes a set of possible values. A &lt;code&gt;number&lt;/code&gt; describes every possible number, so a single number (such as &lt;code&gt;42&lt;/code&gt;) would be a &lt;em&gt;subtype&lt;/em&gt; of the &lt;code&gt;number&lt;/code&gt; type.</source>
          <target state="translated">Un tipo como &lt;code&gt;number&lt;/code&gt; , &lt;code&gt;boolean&lt;/code&gt; o o &lt;code&gt;string&lt;/code&gt; describe un conjunto de valores posibles. Un &lt;code&gt;number&lt;/code&gt; describe todos los n&amp;uacute;meros posibles, por lo que un solo n&amp;uacute;mero (como &lt;code&gt;42&lt;/code&gt; ) ser&amp;iacute;a un &lt;em&gt;subtipo&lt;/em&gt; del tipo de &lt;code&gt;number&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="7f722c2091e4144ff89a952a58d6f7ff73124bde" translate="yes" xml:space="preserve">
          <source>A typical way to invoke this command is</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="084f378a5689bc62abec28cce79f808d15cc2701" translate="yes" xml:space="preserve">
          <source>A variable of type &lt;code&gt;$Shape&amp;lt;T&amp;gt;&lt;/code&gt;, where &lt;code&gt;T&lt;/code&gt; is some object type, can be assigned objects &lt;code&gt;o&lt;/code&gt; that contain a subset of the properties included in &lt;code&gt;T&lt;/code&gt;. For each property &lt;code&gt;p: S&lt;/code&gt; of &lt;code&gt;T&lt;/code&gt;, the type of a potential binding of &lt;code&gt;p&lt;/code&gt; in &lt;code&gt;o&lt;/code&gt; must be compatible with &lt;code&gt;S&lt;/code&gt;.</source>
          <target state="translated">Una variable de tipo &lt;code&gt;$Shape&amp;lt;T&amp;gt;&lt;/code&gt; , donde &lt;code&gt;T&lt;/code&gt; objetos es alg&amp;uacute;n tipo de objeto, se pueden asignar &lt;code&gt;o&lt;/code&gt; que contienen un subconjunto de las propiedades incluidas en &lt;code&gt;T&lt;/code&gt; . Para cada propiedad &lt;code&gt;p: S&lt;/code&gt; de &lt;code&gt;T&lt;/code&gt; , el tipo de un potencial de uni&amp;oacute;n de &lt;code&gt;p&lt;/code&gt; en &lt;code&gt;o&lt;/code&gt; debe ser compatible con &lt;code&gt;S&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="2271b14edc45904cc47bb0f92baf4a74500757a6" translate="yes" xml:space="preserve">
          <source>ALE</source>
          <target state="translated">ALE</target>
        </trans-unit>
        <trans-unit id="c3cd636a585b20c40ac2df5ffb403e83cb2eef51" translate="yes" xml:space="preserve">
          <source>Actions</source>
          <target state="translated">Actions</target>
        </trans-unit>
        <trans-unit id="c2c9357e2d1358b4ed63794b3bdbb571d911a366" translate="yes" xml:space="preserve">
          <source>Add &lt;code&gt;@flow strict&lt;/code&gt; to a file and fix all errors that appear. Because Flow Strict requires dependencies to also be strict (if the &lt;code&gt;nonstrict-import&lt;/code&gt; rule is enabled), start at the leaves of the dependency tree and work up from there. Do not add &lt;code&gt;$FlowFixMe&lt;/code&gt; to suppress the new errors as they appear; just add &lt;code&gt;@flow strict&lt;/code&gt; once all issues have been resolved. Since the most common reasons for using &lt;code&gt;$FlowFixMe&lt;/code&gt; stem from reliance on untyped dependencies or behavior, future issues should be greatly reduced once Flow Strict is enabled.</source>
          <target state="translated">Agregue &lt;code&gt;@flow strict&lt;/code&gt; a un archivo y corrija todos los errores que aparezcan. Debido a que Flow Strict requiere que las dependencias tambi&amp;eacute;n sean estrictas (si la &lt;code&gt;nonstrict-import&lt;/code&gt; estricta est&amp;aacute; habilitada), comience en las hojas del &amp;aacute;rbol de dependencias y contin&amp;uacute;e desde all&amp;iacute;. No agregue &lt;code&gt;$FlowFixMe&lt;/code&gt; para suprimir los nuevos errores a medida que aparecen; simplemente agregue &lt;code&gt;@flow strict&lt;/code&gt; una vez que se hayan resuelto todos los problemas. Dado que las razones m&amp;aacute;s comunes para usar &lt;code&gt;$FlowFixMe&lt;/code&gt; provienen de la dependencia de dependencias o comportamientos no tipificados, los problemas futuros deber&amp;iacute;an reducirse en gran medida una vez que Flow Strict est&amp;eacute; habilitado.</target>
        </trans-unit>
        <trans-unit id="348f08f4c30937769280d29589632be81dce564d" translate="yes" xml:space="preserve">
          <source>Add a &lt;code&gt;[strict]&lt;/code&gt; section to the &lt;code&gt;.flowconfig&lt;/code&gt;.</source>
          <target state="translated">Agregue una secci&amp;oacute;n &lt;code&gt;[strict]&lt;/code&gt; a &lt;code&gt;.flowconfig&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="debff0c0e31df0c3b54bd63967abba908318fd7b" translate="yes" xml:space="preserve">
          <source>Add this to your ~/.vimrc</source>
          <target state="translated">Añade esto a tu ~/.vimrc</target>
        </trans-unit>
        <trans-unit id="ef87c5c8a2b16d4c56ca61522bd746bf5ccd2856" translate="yes" xml:space="preserve">
          <source>Adding Flow types to your React components is incredibly powerful. After typing your component, Flow will statically ensure that you are using the component in the way it was designed to be used.</source>
          <target state="translated">Añadir tipos de flujo a tus componentes de React es increíblemente poderoso.Después de escribir tu componente,Flow se asegurará estáticamente de que estás usando el componente de la forma en que fue diseñado para ser usado.</target>
        </trans-unit>
        <trans-unit id="ce3f0d181c2f06a4552c99e371dfc2c79d5925f9" translate="yes" xml:space="preserve">
          <source>Adding State</source>
          <target state="translated">Añadiendo el estado</target>
        </trans-unit>
        <trans-unit id="3bfb8073e6bb1f0689467760321027edeffeb0e7" translate="yes" xml:space="preserve">
          <source>Adding defaults to parameterized generics</source>
          <target state="translated">Añadiendo valores por defecto a los genéricos parametrizados</target>
        </trans-unit>
        <trans-unit id="27e1d91f84c8b85f56d118646bce9c69a82df30e" translate="yes" xml:space="preserve">
          <source>Adding the necessary annotations to large codebases can be quite tedious. To ease this burden, we are providing a codemod based on Flow&amp;rsquo;s inference, that can be used to annotate multiple files in bulk. See &lt;a href=&quot;https://flow.org/en/cli/annotate-exports/&quot;&gt;this tutorial&lt;/a&gt; for more.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="24102cd54654562a4cca3094ba42e1695bfc0400" translate="yes" xml:space="preserve">
          <source>Adding type annotations is an important part of your interaction with Flow.</source>
          <target state="translated">Agregar anotaciones de tipo es una parte importante de su interacción con Flow.</target>
        </trans-unit>
        <trans-unit id="dd4b16fc77256848662e64369cda76926181fdf0" translate="yes" xml:space="preserve">
          <source>Adding types to generics</source>
          <target state="translated">Añadiendo tipos a los genéricos</target>
        </trans-unit>
        <trans-unit id="c46c2e1f44bf89eeaca616b1006a75c2f1f9f078" translate="yes" xml:space="preserve">
          <source>Additionally, note that function parameters are considered const (i.e., treated as if they were declared with &lt;code&gt;const&lt;/code&gt; rather than &lt;code&gt;let&lt;/code&gt;). This feature is not yet configurable in Flow Strict; it is always on.</source>
          <target state="translated">Adem&amp;aacute;s, tenga en cuenta que los par&amp;aacute;metros de funci&amp;oacute;n se consideran const (es decir, se tratan como si fueran declarados con &lt;code&gt;const&lt;/code&gt; en lugar de &lt;code&gt;let&lt;/code&gt; ). Esta funci&amp;oacute;n a&amp;uacute;n no se puede configurar en Flow Strict; siempre est&amp;aacute; encendido.</target>
        </trans-unit>
        <trans-unit id="084523950d9700bad04af812baabda38d1775c92" translate="yes" xml:space="preserve">
          <source>Additionally, one of the things that also makes &lt;code&gt;$ElementType&amp;lt;T, K&amp;gt;&lt;/code&gt; more powerful than &lt;a href=&quot;#toc-propertytype&quot;&gt;&lt;code&gt;$PropertyType&amp;lt;T, k&amp;gt;&lt;/code&gt;&lt;/a&gt; is that you can use it with generics. For example:</source>
          <target state="translated">Adem&amp;aacute;s, una de las cosas que tambi&amp;eacute;n hace que &lt;code&gt;$ElementType&amp;lt;T, K&amp;gt;&lt;/code&gt; m&amp;aacute;s poderoso que &lt;a href=&quot;#toc-propertytype&quot;&gt; &lt;code&gt;$PropertyType&amp;lt;T, k&amp;gt;&lt;/code&gt; &lt;/a&gt; es que puede usarlo con gen&amp;eacute;ricos. Por ejemplo:</target>
        </trans-unit>
        <trans-unit id="e9a588006a751b6eac3899c1c33719e0d1f574b8" translate="yes" xml:space="preserve">
          <source>Additionally, other utility types, such as &lt;a href=&quot;#toc-objmap&quot;&gt;&lt;code&gt;$ObjMap&amp;lt;T&amp;gt;&lt;/code&gt;&lt;/a&gt;, may strip any read/write annotations, so &lt;code&gt;$ReadOnly&amp;lt;T&amp;gt;&lt;/code&gt; is a handy way to quickly make the object read-only again after operating on it:</source>
          <target state="translated">Adem&amp;aacute;s, otros tipos de utilidades, como &lt;a href=&quot;#toc-objmap&quot;&gt; &lt;code&gt;$ObjMap&amp;lt;T&amp;gt;&lt;/code&gt; &lt;/a&gt; , pueden eliminar cualquier anotaci&amp;oacute;n de lectura / escritura, por lo que &lt;code&gt;$ReadOnly&amp;lt;T&amp;gt;&lt;/code&gt; es una forma pr&amp;aacute;ctica de hacer que el objeto vuelva a ser de solo lectura despu&amp;eacute;s de operar en &amp;eacute;l:</target>
        </trans-unit>
        <trans-unit id="9165abaadf3796191a41d4c4e2ff7bee612bceba" translate="yes" xml:space="preserve">
          <source>Adds completions to omnifunc</source>
          <target state="translated">Agrega terminaciones al omnifuncional</target>
        </trans-unit>
        <trans-unit id="9d9855d155abfb00319d620ad3008e951f075bcb" translate="yes" xml:space="preserve">
          <source>Adoption</source>
          <target state="translated">Adoption</target>
        </trans-unit>
        <trans-unit id="b9cc08903fae7822562fa44b70ac845a1dd1b041" translate="yes" xml:space="preserve">
          <source>After each iteration of the codemod, a summary will be printed on the CLI. This summary includes statistical information about the number of annotations that were added, and how many locations were skipped. It also prints counts for various kinds of errors that were encountered. These can be matched to the errors printed in the logs.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7823f6ab865766bbd1127e26841e44993df0966b" translate="yes" xml:space="preserve">
          <source>Again, if you import React with: &lt;code&gt;import React from 'react'&lt;/code&gt; you will be able to access &lt;code&gt;React.Component&lt;/code&gt;, &lt;code&gt;React.createElement()&lt;/code&gt;, &lt;code&gt;React.Children&lt;/code&gt;, and other JavaScript &lt;em&gt;values&lt;/em&gt;. However, you will not be able to access &lt;a href=&quot;#toc-react-node&quot;&gt;&lt;code&gt;React.Node&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#toc-react-childrenarray&quot;&gt;&lt;code&gt;React.ChildrenArray&lt;/code&gt;&lt;/a&gt; or other Flow &lt;em&gt;types&lt;/em&gt;. You will need to use a named type import like: &lt;code&gt;import type {Node} from 'react'&lt;/code&gt; in addition to your default import.</source>
          <target state="translated">Nuevamente, si importa React con: &lt;code&gt;import React from 'react'&lt;/code&gt; , podr&amp;aacute; acceder a &lt;code&gt;React.Component&lt;/code&gt; , &lt;code&gt;React.createElement()&lt;/code&gt; , &lt;code&gt;React.Children&lt;/code&gt; y otros &lt;em&gt;valores de&lt;/em&gt; JavaScript . Sin embargo, no podr&amp;aacute; acceder a &lt;a href=&quot;#toc-react-node&quot;&gt; &lt;code&gt;React.Node&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;#toc-react-childrenarray&quot;&gt; &lt;code&gt;React.ChildrenArray&lt;/code&gt; &lt;/a&gt; u otros &lt;em&gt;tipos de&lt;/em&gt; Flow . Deber&amp;aacute; utilizar una importaci&amp;oacute;n de tipo con nombre como: &lt;code&gt;import type {Node} from 'react'&lt;/code&gt; adem&amp;aacute;s de su importaci&amp;oacute;n predeterminada.</target>
        </trans-unit>
        <trans-unit id="6960f0d48dae2ed291e229a0c18667430af5ad7c" translate="yes" xml:space="preserve">
          <source>All &lt;code&gt;react-dom&lt;/code&gt; JSX intrinsics have &lt;code&gt;React.Node&lt;/code&gt; as their children type. &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;span&amp;gt;&lt;/code&gt;, and all the rest.</source>
          <target state="translated">Todos los elementos intr&amp;iacute;nsecos de JSX &lt;code&gt;react-dom&lt;/code&gt; tienen &lt;code&gt;React.Node&lt;/code&gt; como tipo secundario . &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; , &lt;code&gt;&amp;lt;span&amp;gt;&lt;/code&gt; y todos los dem&amp;aacute;s.</target>
        </trans-unit>
        <trans-unit id="ca3d3759b20a58e23b6e490416571783c4b57d09" translate="yes" xml:space="preserve">
          <source>All of these different expressions create a new type which is a result of the types of values and the operations run on them.</source>
          <target state="translated">Todas estas diferentes expresiones crean un nuevo tipo que es el resultado de los tipos de valores y las operaciones que se ejecutan sobre ellos.</target>
        </trans-unit>
        <trans-unit id="0f113e33ce14591dd70d6193beb553131d41f5f0" translate="yes" xml:space="preserve">
          <source>All of this is why Flow has contravariant inputs (accepts less specific types to be passed in), and covariant outputs (allows more specific types to be returned).</source>
          <target state="translated">Por todo ello,Flow tiene entradas contrarias (acepta que se pasen tipos menos específicos),y salidas covariantes (permite que se devuelvan tipos más específicos).</target>
        </trans-unit>
        <trans-unit id="f47b935eb4737e5a19c994e524b19f17133d6b8b" translate="yes" xml:space="preserve">
          <source>Also a tuple type cannot be passed into to an &lt;code&gt;Array&amp;lt;T&amp;gt;&lt;/code&gt; type, since then you could mutate the tuple in an unsafe way.</source>
          <target state="translated">Adem&amp;aacute;s, un tipo de tupla no se puede pasar a un tipo &lt;code&gt;Array&amp;lt;T&amp;gt;&lt;/code&gt; , ya que entonces podr&amp;iacute;a mutar la tupla de una manera insegura.</target>
        </trans-unit>
        <trans-unit id="1e224fe065210d7ea5bc4ecdfb975d62ba96cb27" translate="yes" xml:space="preserve">
          <source>Also recommended, but optional as it may be too noisy in some codebases: &lt;code&gt;sketchy-null&lt;/code&gt;</source>
          <target state="translated">Tambi&amp;eacute;n recomendado, pero opcional ya que puede ser demasiado ruidoso en algunas bases de c&amp;oacute;digo: &lt;code&gt;sketchy-null&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="6650e3d7dff1ebe1979e6edf742206dcb5d30b21" translate="yes" xml:space="preserve">
          <source>Also, a longer tuple can&amp;rsquo;t be used in place of a shorter one.</source>
          <target state="translated">Adem&amp;aacute;s, no se puede utilizar una tupla m&amp;aacute;s larga en lugar de una m&amp;aacute;s corta.</target>
        </trans-unit>
        <trans-unit id="ed76d08a5750c0ac19262fa4c88e1912b27bd2c6" translate="yes" xml:space="preserve">
          <source>Alternatively, &lt;a href=&quot;../config/options#toc-lazy-mode-fs-ide-watchman-none&quot;&gt;you can set the lazy mode from the &lt;code&gt;.flowconfig&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">Alternativamente, &lt;a href=&quot;../config/options#toc-lazy-mode-fs-ide-watchman-none&quot;&gt;puede establecer el modo &lt;code&gt;.flowconfig&lt;/code&gt; &lt;/a&gt; desde .flowconfig .</target>
        </trans-unit>
        <trans-unit id="82c66bd79d3d4ffdc185a7185952761a2c8c3f10" translate="yes" xml:space="preserve">
          <source>Alternatively, the legacy &lt;a href=&quot;#toc-vim-flow&quot;&gt;vim-flow&lt;/a&gt; extension is Flow-specific, and provides fewer features.</source>
          <target state="translated">Alternativamente, la extensi&amp;oacute;n de &lt;a href=&quot;#toc-vim-flow&quot;&gt;vim-flow&lt;/a&gt; heredada es espec&amp;iacute;fica de Flow y proporciona menos funciones.</target>
        </trans-unit>
        <trans-unit id="5d58f352f3f2d2c03f34156038b5074e5ea813c0" translate="yes" xml:space="preserve">
          <source>An equivalent way to declare the same function &lt;code&gt;fn&lt;/code&gt; would be by using consecutive &amp;ldquo;declare function&amp;rdquo; statements</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="05c96e450e44289cd41c687e74cce15c9214f0aa" translate="yes" xml:space="preserve">
          <source>An example &lt;code&gt;[declarations]&lt;/code&gt; section might look like:</source>
          <target state="translated">Un ejemplo de secci&amp;oacute;n de &lt;code&gt;[declarations]&lt;/code&gt; podr&amp;iacute;a verse as&amp;iacute;:</target>
        </trans-unit>
        <trans-unit id="90be5ce7c515603e4e6a07b492b34ad2c170d26e" translate="yes" xml:space="preserve">
          <source>An example &lt;code&gt;[ignore]&lt;/code&gt; section might look like:</source>
          <target state="translated">Un ejemplo de secci&amp;oacute;n &lt;code&gt;[ignore]&lt;/code&gt; podr&amp;iacute;a verse as&amp;iacute;:</target>
        </trans-unit>
        <trans-unit id="63ef3849ebab36d15f3096be1da4ba961dfdabbb" translate="yes" xml:space="preserve">
          <source>An example &lt;code&gt;[untyped]&lt;/code&gt; section might look like:</source>
          <target state="translated">Un ejemplo de secci&amp;oacute;n &lt;code&gt;[untyped]&lt;/code&gt; podr&amp;iacute;a verse as&amp;iacute;:</target>
        </trans-unit>
        <trans-unit id="332c1cf71c721e365eb0a7ac77491f3f835ad4a7" translate="yes" xml:space="preserve">
          <source>An exception to this principle are union types: the type &lt;code&gt;number | any&lt;/code&gt; is considered &lt;em&gt;uncovered&lt;/em&gt;, even though technically &lt;code&gt;any&lt;/code&gt; is not the top-level constructor. Unions merely encode an option among &lt;em&gt;a set of&lt;/em&gt; other types. In that sense we are conservatively viewing an expression as uncovered, when at least one possible type of that expression causes limited checking. For example, in the code</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c58b06aa29f634eb5b80b5c46b1dd5e2a95f3710" translate="yes" xml:space="preserve">
          <source>An important attribute of every type system is whether they are structural or nominal, they can even be mixed within a single type system. So it&amp;rsquo;s important to know the difference.</source>
          <target state="translated">Un atributo importante de todo sistema de tipos es si son estructurales o nominales, incluso se pueden mezclar dentro de un solo sistema de tipos. Por eso es importante conocer la diferencia.</target>
        </trans-unit>
        <trans-unit id="7534a2c6b02aff918f4734ba9f0cb833213dab75" translate="yes" xml:space="preserve">
          <source>An indexer can be optionally named, for documentation purposes:</source>
          <target state="translated">Opcionalmente se puede nombrar un indexador,con fines de documentación:</target>
        </trans-unit>
        <trans-unit id="3e11e866eaa17c481a36a6615e0398926210f650" translate="yes" xml:space="preserve">
          <source>An interesting type from a coverage perspective is the &lt;code&gt;empty&lt;/code&gt; type. This type roughly corresponds to &lt;em&gt;dead code&lt;/em&gt;. As such checking around expressions with type &lt;code&gt;empty&lt;/code&gt; is more relaxed, but for a good reason: this code will not be executed at runtime. Since it is a common practice to clean up such code, Flow coverage will also report code whose type is inferred to be &lt;code&gt;empty&lt;/code&gt;, but distinguishes it from the case of &lt;code&gt;any&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="02f5dca0f3fb11ce7b28ee592bf4f726a45875a4" translate="yes" xml:space="preserve">
          <source>And that is it. Your project is now Flow-enabled.</source>
          <target state="translated">Y eso es todo.Su proyecto ahora está habilitado para el flujo.</target>
        </trans-unit>
        <trans-unit id="bc97cb67c24efbdbd68974b88a3db4e9f3a4fc10" translate="yes" xml:space="preserve">
          <source>And use:</source>
          <target state="translated">Y usar:</target>
        </trans-unit>
        <trans-unit id="edb030006e3871df1f5b0cd0b7e7c422a3607e67" translate="yes" xml:space="preserve">
          <source>Another convenient way to provide the input is by passing the flag</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dfab6bb7677d289b7ae700277c915d1b6add5236" translate="yes" xml:space="preserve">
          <source>Another limitaion is on the range of predicates that can be encoded. The refinements that are supported in a predicate function must refer directly to the value that is passed in as an argument to the respective call.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6b8636953c4281d3f126217f986ef3b2f16d2eba" translate="yes" xml:space="preserve">
          <source>Another limitation is on the range of predicates that can be encoded. The refinements that are supported in a predicate function must refer directly to the value that is passed in as an argument to the respective call.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8b778ae534c485f0d6739866e99f8bc63e2331d8" translate="yes" xml:space="preserve">
          <source>Another way to add support for Flow in Vim is to use &lt;a href=&quot;https://github.com/autozimu/LanguageClient-neovim&quot;&gt;LanguageClient-neovim&lt;/a&gt;.</source>
          <target state="translated">Otra forma de agregar soporte para Flow en Vim es usar &lt;a href=&quot;https://github.com/autozimu/LanguageClient-neovim&quot;&gt;LanguageClient-neovim&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="c37c50bfab9118a52fdf0a7f80769cc4ab540351" translate="yes" xml:space="preserve">
          <source>Another way to add support for Flow in Vim is to use &lt;a href=&quot;https://github.com/flowtype/vim-flow&quot;&gt;vim-flow&lt;/a&gt;.</source>
          <target state="translated">Otra forma de agregar soporte para Flow en Vim es usar &lt;a href=&quot;https://github.com/flowtype/vim-flow&quot;&gt;vim-flow&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="92210bddb4211d0e6c83515a4f9b3f1b1a7a39c8" translate="yes" xml:space="preserve">
          <source>Any Types</source>
          <target state="translated">Cualquier tipo</target>
        </trans-unit>
        <trans-unit id="d75e5f7ff95f6863097f6d1ec2a9d80aba28a579" translate="yes" xml:space="preserve">
          <source>Any directory under &lt;code&gt;/path/to/otherProject&lt;/code&gt; named &lt;code&gt;coolStuff/&lt;/code&gt;</source>
          <target state="translated">Cualquier directorio bajo &lt;code&gt;/path/to/otherProject&lt;/code&gt; llamado &lt;code&gt;coolStuff/&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="9e3d4ca42d4885ee40721656532f3228027ab154" translate="yes" xml:space="preserve">
          <source>Any file in &lt;code&gt;/path/to/otherProject/&lt;/code&gt; that ends in &lt;code&gt;.js&lt;/code&gt;</source>
          <target state="translated">Cualquier archivo en &lt;code&gt;/path/to/otherProject/&lt;/code&gt; que termine en &lt;code&gt;.js&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="ff45287734d6e5c2d42e27a8403e84e9cdd43925" translate="yes" xml:space="preserve">
          <source>Any file or directory under &lt;code&gt;.*/src/foo&lt;/code&gt; or under &lt;code&gt;.*/src/bar&lt;/code&gt;</source>
          <target state="translated">Cualquier archivo o directorio bajo &lt;code&gt;.*/src/foo&lt;/code&gt; o bajo &lt;code&gt;.*/src/bar&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="619cdeb72fa14a27c15ad77831a5eef22d615f19" translate="yes" xml:space="preserve">
          <source>Any file or directory under a directory named &lt;code&gt;__tests__&lt;/code&gt;</source>
          <target state="translated">Cualquier archivo o directorio en un directorio llamado &lt;code&gt;__tests__&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="0c3253b58f788b30811429ab97032f8e98a1859d" translate="yes" xml:space="preserve">
          <source>Any file or directory under a directory named &lt;code&gt;third_party&lt;/code&gt;</source>
          <target state="translated">Cualquier archivo o directorio en un directorio llamado &lt;code&gt;third_party&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="7cc44198b1e6e1b795a7e8aa32c3da295d676830" translate="yes" xml:space="preserve">
          <source>Any file that ends with the extension &lt;code&gt;.decl.js&lt;/code&gt;</source>
          <target state="translated">Cualquier archivo que termine con la extensi&amp;oacute;n &lt;code&gt;.decl.js&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="1bffc382d25466b833b5b2837da78952a00737fd" translate="yes" xml:space="preserve">
          <source>Any file that ends with the extension &lt;code&gt;.ignore.js&lt;/code&gt;</source>
          <target state="translated">Cualquier archivo que termine con la extensi&amp;oacute;n &lt;code&gt;.ignore.js&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="f72b4d45c679b8fd5b66d19514cb30c2b70941fd" translate="yes" xml:space="preserve">
          <source>Any file that ends with the extension &lt;code&gt;.untype.js&lt;/code&gt;</source>
          <target state="translated">Cualquier archivo que termine con la extensi&amp;oacute;n &lt;code&gt;.untype.js&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="d8058d8ae00a7724bf520d87b91a727d4fba9de4" translate="yes" xml:space="preserve">
          <source>Any options that are omitted will use their default values. Some options can be overridden with command line flags.</source>
          <target state="translated">Las opciones que se omitan utilizarán sus valores predeterminados.Algunas opciones pueden ser anuladas con banderas de línea de comandos.</target>
        </trans-unit>
        <trans-unit id="158d7a05937714067b015b61e36e2e34b536b32d" translate="yes" xml:space="preserve">
          <source>Any type can appear as the super type or type of an opaque type alias.</source>
          <target state="translated">Cualquier tipo puede aparecer como el supertipo o el tipo de un alias de tipo opaco.</target>
        </trans-unit>
        <trans-unit id="f8b9550f4f85978cbf264304833e5597e61caa6b" translate="yes" xml:space="preserve">
          <source>Any type can appear inside a type alias.</source>
          <target state="translated">Cualquier tipo puede aparecer dentro de un alias de tipo.</target>
        </trans-unit>
        <trans-unit id="b8269fc02f1c810c6ff4db59298ada4596018447" translate="yes" xml:space="preserve">
          <source>Anything goes in, Nothing comes out</source>
          <target state="translated">Todo entra,nada sale</target>
        </trans-unit>
        <trans-unit id="1847f280fe6a7cfd6c208240da7d0ab7f1c91ffb" translate="yes" xml:space="preserve">
          <source>Array Types</source>
          <target state="translated">Tipos de arreglos...</target>
        </trans-unit>
        <trans-unit id="83c584ea41caf5a381449f3d3b97037f78283560" translate="yes" xml:space="preserve">
          <source>Array access is unsafe</source>
          <target state="translated">El acceso a la matriz es inseguro</target>
        </trans-unit>
        <trans-unit id="a32c183c7549729e3af3c7691e6f44cc9a464b99" translate="yes" xml:space="preserve">
          <source>Array tuples treated as regular arrays in exports</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3170d1b3f6bc73372a7270faffd2e78add925812" translate="yes" xml:space="preserve">
          <source>Arrays are a special list-like type of object in JavaScript. You can create arrays a couple different ways.</source>
          <target state="translated">Los arreglos son un tipo especial de objeto en forma de lista en JavaScript.Puedes crear arreglos de un par de maneras diferentes.</target>
        </trans-unit>
        <trans-unit id="2eff12655bfd37e8aba34fc4ce9e8a7b43bbf939" translate="yes" xml:space="preserve">
          <source>Arrow Functions</source>
          <target state="translated">Funciones de las flechas</target>
        </trans-unit>
        <trans-unit id="9deec36383ee4f0d0aa3b179bc68ebbe9f7b8c48" translate="yes" xml:space="preserve">
          <source>As Flow gets smarter and smarter, it will figure out the types of properties in more scenarios.</source>
          <target state="translated">A medida que Flow se vuelve más y más inteligente,averiguará los tipos de propiedades en más escenarios.</target>
        </trans-unit>
        <trans-unit id="5ce04ebbe35f0d095625abc02e93781430c8c957" translate="yes" xml:space="preserve">
          <source>As Flow gets smarter and smarter, there should be fewer instances of these scenarios.</source>
          <target state="translated">A medida que Flow se vuelve más y más inteligente,debería haber menos casos de estos escenarios.</target>
        </trans-unit>
        <trans-unit id="bc029ffe889a5bffa6b1132bfb40c2eb845b9647" translate="yes" xml:space="preserve">
          <source>As Flow is made to be smarter it may be possible in the future to fix this problem, but for now you should be aware of it.</source>
          <target state="translated">Como Flow está hecho para ser más inteligente puede ser posible en el futuro arreglar este problema,pero por ahora debes ser consciente de ello.</target>
        </trans-unit>
        <trans-unit id="afba3e48afe0dd342bba029cc69e818d6ff61285" translate="yes" xml:space="preserve">
          <source>As a motivating example, consider this common idiom in React:</source>
          <target state="translated">Como ejemplo motivador,considere este modismo común en Reaccionar:</target>
        </trans-unit>
        <trans-unit id="d994c8247e9b514f90a5e611ee46421248799ee9" translate="yes" xml:space="preserve">
          <source>As a result of having weak dynamic typing, JavaScript doesn&amp;rsquo;t have any of these, you can use any type at any time.</source>
          <target state="translated">Como resultado de tener una escritura din&amp;aacute;mica d&amp;eacute;bil, JavaScript no tiene ninguno de estos, puede usar cualquier tipo en cualquier momento.</target>
        </trans-unit>
        <trans-unit id="ede9cdf7589df1689a4530c061cb9167ab6ff6e9" translate="yes" xml:space="preserve">
          <source>As a workaround, you can specify the property not present in &lt;code&gt;A&lt;/code&gt; as optional. For example:</source>
          <target state="translated">Como soluci&amp;oacute;n alternativa, puede especificar la propiedad que no est&amp;aacute; presente en &lt;code&gt;A&lt;/code&gt; como opcional. Por ejemplo:</target>
        </trans-unit>
        <trans-unit id="668bad0a3b1e2602a10cbca6af8ca3251f27e688" translate="yes" xml:space="preserve">
          <source>As an example, this would not work:</source>
          <target state="translated">Como ejemplo,esto no funcionaría:</target>
        </trans-unit>
        <trans-unit id="b11d09cc159c523df3005c0738393c9419eb41da" translate="yes" xml:space="preserve">
          <source>As explained in the &lt;a href=&quot;options&quot;&gt;&lt;code&gt;sharedmemory.dirs&lt;/code&gt;&lt;/a&gt; option&amp;rsquo;s description, Flow needs to create a file on a filesystem for older kernels. &lt;code&gt;sharedmemory.dirs&lt;/code&gt; specifies a list of locations where the shared memory file can be created. For each location, Flow will check to make sure the filesystem has enough space for the shared memory file. If Flow will likely run out of space, it skips that location and tries the next. This option lets you configure the minimum amount of space needed on a filesystem for shared memory.</source>
          <target state="translated">Como se explica en la &lt;a href=&quot;options&quot;&gt; &lt;code&gt;sharedmemory.dirs&lt;/code&gt; &lt;/a&gt; opci&amp;oacute;n sharedmemory.dirs , Flow necesita crear un archivo en un sistema de archivos para los n&amp;uacute;cleos m&amp;aacute;s antiguos. &lt;code&gt;sharedmemory.dirs&lt;/code&gt; especifica una lista de ubicaciones donde se puede crear el archivo de memoria compartida. Para cada ubicaci&amp;oacute;n, Flow verificar&amp;aacute; que el sistema de archivos tenga suficiente espacio para el archivo de memoria compartida. Si es probable que Flow se quede sin espacio, omite esa ubicaci&amp;oacute;n e intenta la siguiente. Esta opci&amp;oacute;n le permite configurar la cantidad m&amp;iacute;nima de espacio necesaria en un sistema de archivos para la memoria compartida.</target>
        </trans-unit>
        <trans-unit id="3127829ebeb2cc0aea7bfe6b699c90c896eda2fb" translate="yes" xml:space="preserve">
          <source>As is typical with such mechanized approaches, it comes with a few caveats:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2073dcd9de74f00e347d42b3bc3960e160aea0a5" translate="yes" xml:space="preserve">
          <source>As the name hints, &lt;code&gt;$Diff&amp;lt;A, B&amp;gt;&lt;/code&gt; is the type representing the set difference of &lt;code&gt;A&lt;/code&gt; and &lt;code&gt;B&lt;/code&gt;, i.e. &lt;code&gt;A \ B&lt;/code&gt;, where &lt;code&gt;A&lt;/code&gt; and &lt;code&gt;B&lt;/code&gt; are both &lt;a href=&quot;../objects&quot;&gt;object types&lt;/a&gt;. Here&amp;rsquo;s an example:</source>
          <target state="translated">Como sugiere el nombre, &lt;code&gt;$Diff&amp;lt;A, B&amp;gt;&lt;/code&gt; es el tipo que representa la diferencia de conjunto de &lt;code&gt;A&lt;/code&gt; y &lt;code&gt;B&lt;/code&gt; , es decir, &lt;code&gt;A \ B&lt;/code&gt; , donde &lt;code&gt;A&lt;/code&gt; y &lt;code&gt;B&lt;/code&gt; son ambos &lt;a href=&quot;../objects&quot;&gt;tipos de objeto&lt;/a&gt; . He aqu&amp;iacute; un ejemplo:</target>
        </trans-unit>
        <trans-unit id="4d3ad0d71f6c8ca89c8bf0a20c87797e4687d205" translate="yes" xml:space="preserve">
          <source>As this example shows, declaration files must be written with care: it is up to the programmer to ensure they are correct, otherwise they may hide type errors.</source>
          <target state="translated">Como muestra este ejemplo,los archivos de declaración deben ser escritos con cuidado:depende del programador asegurarse de que son correctos,de lo contrario pueden ocultar errores de tipo.</target>
        </trans-unit>
        <trans-unit id="0d8b40c62e91e9706717ffbd57eeacffd8b93184" translate="yes" xml:space="preserve">
          <source>As you make progress adding types to your codebase, you can include directories so that they don&amp;rsquo;t regress as new code gets committed, and until the entire project has well-formed exports. You can do this by adding lines like the following to your .flowconfig:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="462ea53149f64cdf8d1c87506946781343ce500f" translate="yes" xml:space="preserve">
          <source>As you may have noticed, the example is not a random one. &lt;code&gt;$Diff&lt;/code&gt; is exactly what the React definition file uses to define the type of the props accepted by a React Component.</source>
          <target state="translated">Como habr&amp;aacute;s notado, el ejemplo no es aleatorio. &lt;code&gt;$Diff&lt;/code&gt; es exactamente lo que usa el archivo de definici&amp;oacute;n de React para definir el tipo de accesorios aceptados por un componente de React.</target>
        </trans-unit>
        <trans-unit id="75050d15c413d5f7a029e56def34919e7565c848" translate="yes" xml:space="preserve">
          <source>Asserting types in this way works the same as types do anywhere else.</source>
          <target state="translated">Afirmar los tipos de esta manera funciona de la misma manera que los tipos en cualquier otro lugar.</target>
        </trans-unit>
        <trans-unit id="b7d56c19c3e1b18d86bf5280c85cef8d6ab8b6c5" translate="yes" xml:space="preserve">
          <source>Assume we have two classes, which have a subtype relationship:</source>
          <target state="translated">Supongamos que tenemos dos clases,que tienen una relación de subtipo:</target>
        </trans-unit>
        <trans-unit id="65b9fcb33e463a779d0c4da859a5125301fe7b6c" translate="yes" xml:space="preserve">
          <source>Async functions implicitly return a promise, so the return type must always be a &lt;code&gt;Promise&lt;/code&gt;.</source>
          <target state="translated">Las funciones asincr&amp;oacute;nicas devuelven impl&amp;iacute;citamente una promesa, por lo que el tipo de devoluci&amp;oacute;n siempre debe ser una &lt;code&gt;Promise&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="41dded417052424bdcf3c39f6c8664147fae6806" translate="yes" xml:space="preserve">
          <source>Atom</source>
          <target state="translated">Atom</target>
        </trans-unit>
        <trans-unit id="9f01eb47108bfcd61bcd85d17fd5db43d8fe4fc5" translate="yes" xml:space="preserve">
          <source>Autocomplete-Flow</source>
          <target state="translated">Autocomplete-Flow</target>
        </trans-unit>
        <trans-unit id="7e6cbee16a2c2ad4b26fab2aa6ec8127618ef362" translate="yes" xml:space="preserve">
          <source>Available Lint Rules</source>
          <target state="translated">Reglas de pelusa disponibles</target>
        </trans-unit>
        <trans-unit id="48315d4da6f457296128d582ea2ac7a8107a6caa" translate="yes" xml:space="preserve">
          <source>Available options</source>
          <target state="translated">Opciones disponibles</target>
        </trans-unit>
        <trans-unit id="5701e01de65130c0af0004b67af666b5f9d12faa" translate="yes" xml:space="preserve">
          <source>Avoid leaking &lt;code&gt;any&lt;/code&gt;</source>
          <target state="translated">Evitar la fuga de &lt;code&gt;any&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="f3bf8dee016caf43ae3970fbea5f976d54898ed9" translate="yes" xml:space="preserve">
          <source>Babel</source>
          <target state="translated">Babel</target>
        </trans-unit>
        <trans-unit id="cc9d9ae632880006314a40c1e1b1e575e801e3d5" translate="yes" xml:space="preserve">
          <source>Babel also &lt;a href=&quot;https://flow.org/en/tools/create-react-app/&quot;&gt;works out of the box with Create React App&lt;/a&gt;, just install Flow and create a &lt;code&gt;.flowconfig&lt;/code&gt;.</source>
          <target state="translated">Babel tambi&amp;eacute;n &lt;a href=&quot;https://flow.org/en/tools/create-react-app/&quot;&gt;funciona desde el primer momento con la aplicaci&amp;oacute;n Create React&lt;/a&gt; , solo instala Flow y crea un &lt;code&gt;.flowconfig&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="1d82284dd6071c5a7679a0d983aaaae31a00b7b5" translate="yes" xml:space="preserve">
          <source>Be liberal with enabling Flow Strict. Unlike adding or removing &lt;code&gt;@flow&lt;/code&gt;, adding or removing &lt;code&gt;@flow strict&lt;/code&gt; (by itself) does not change Flow coverage. It only prevents or allows certain new unsafe behavior from being added in the future. Even if in the future Flow Strict has to be disabled for the file, at least unsafe behavior was prevented from being added in the meantime.</source>
          <target state="translated">Sea liberal al habilitar Flow Strict. A diferencia de agregar o eliminar &lt;code&gt;@flow&lt;/code&gt; , agregar o eliminar &lt;code&gt;@flow strict&lt;/code&gt; (por s&amp;iacute; mismo) no cambia la cobertura de Flow. Solo evita o permite que se agreguen ciertos comportamientos inseguros nuevos en el futuro. Incluso si en el futuro Flow Strict debe deshabilitarse para el archivo, mientras tanto se evit&amp;oacute; que se agreguen comportamientos inseguros.</target>
        </trans-unit>
        <trans-unit id="1680d3465c06ca53c16148fde39b55e52752431c" translate="yes" xml:space="preserve">
          <source>Because Flow understands JavaScript so well, it doesn&amp;rsquo;t need many of these types. You should only ever have to do a minimal amount of work to describe your code to Flow and it will &lt;em&gt;infer&lt;/em&gt; the rest. A lot of the time, Flow can understand your code without any types at all.</source>
          <target state="translated">Debido a que Flow comprende tan bien JavaScript, no necesita muchos de estos tipos. Solo deber&amp;iacute;a tener que hacer una cantidad m&amp;iacute;nima de trabajo para describir su c&amp;oacute;digo a Flow y &amp;eacute;ste &lt;em&gt;inferir&amp;aacute;&lt;/em&gt; el resto. La mayor parte del tiempo, Flow puede comprender su c&amp;oacute;digo sin ning&amp;uacute;n tipo.</target>
        </trans-unit>
        <trans-unit id="404fd91c9a9d241d6c9be8858eb9756bb6b4582e" translate="yes" xml:space="preserve">
          <source>Because of how contravariance works, contravariant properties also become write-only when used. Which can be useful over normal properties.</source>
          <target state="translated">Debido a la forma en que funciona la contravarianza,las propiedades de contravarianza también se convierten en sólo escritura cuando se usan.Lo que puede ser útil sobre las propiedades normales.</target>
        </trans-unit>
        <trans-unit id="c880f74f55ee33062612978400cf2ed6b594d1f2" translate="yes" xml:space="preserve">
          <source>Because of how covariance works, covariant properties also become read-only when used. Which can be useful over normal properties.</source>
          <target state="translated">Debido a la forma en que funciona la covarianza,las propiedades de la covariante también se convierten en sólo lectura cuando se usan.Lo que puede ser útil sobre las propiedades normales.</target>
        </trans-unit>
        <trans-unit id="3d81cf8083f23d6f8c59a3bff90779ac704e0cb6" translate="yes" xml:space="preserve">
          <source>Because of the &lt;code&gt;typeof value === 'string'&lt;/code&gt; check, Flow knows the &lt;code&gt;value&lt;/code&gt; can only be a &lt;code&gt;string&lt;/code&gt; inside of the &lt;code&gt;if&lt;/code&gt; statement. This is known as a &lt;a href=&quot;https://flow.org/en/lang/refinements/&quot;&gt;refinement&lt;/a&gt;.</source>
          <target state="translated">Debido a la verificaci&amp;oacute;n &lt;code&gt;typeof value === 'string'&lt;/code&gt; , Flow sabe que el &lt;code&gt;value&lt;/code&gt; solo puede ser una &lt;code&gt;string&lt;/code&gt; dentro de la declaraci&amp;oacute;n &lt;code&gt;if&lt;/code&gt; . Esto se conoce como &lt;a href=&quot;https://flow.org/en/lang/refinements/&quot;&gt;refinamiento&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="6f57fb076b23f64a15463c71736ac7493ef61f03" translate="yes" xml:space="preserve">
          <source>Because of this behavior, it is a best practice to find or write libdefs for as many of the third-party libraries that you use as you can. We recommend checking out the &lt;code&gt;flow-typed&lt;/code&gt;&lt;a href=&quot;https://github.com/flowtype/flow-typed/blob/master/README.md&quot;&gt;tool and repository&lt;/a&gt; , which helps you quickly find and install pre-existing libdefs for your third-party dependencies.</source>
          <target state="translated">Debido a este comportamiento, se recomienda buscar o escribir libdefs para tantas bibliotecas de terceros que utilice como sea posible. Recomendamos consultar la &lt;a href=&quot;https://github.com/flowtype/flow-typed/blob/master/README.md&quot;&gt;herramienta de &lt;/a&gt; &lt;code&gt;flow-typed&lt;/code&gt; y el repositorio , que lo ayudan a encontrar e instalar r&amp;aacute;pidamente libdefs preexistentes para sus dependencias de terceros.</target>
        </trans-unit>
        <trans-unit id="839f87b3fae494fd4e8b9480d1e5f45008a0dc7e" translate="yes" xml:space="preserve">
          <source>Because type casts work the same as all other type annotations, you can only cast values to less specific types. You cannot change the type or make it something more specific.</source>
          <target state="translated">Debido a que los moldes de tipos funcionan igual que todas las demás anotaciones de tipos,sólo se pueden moldear valores para tipos menos específicos.No puedes cambiar el tipo o hacerlo más específico.</target>
        </trans-unit>
        <trans-unit id="c07a19a41d787635a8e85b3b78306e9c1d7ff5d9" translate="yes" xml:space="preserve">
          <source>Before spending the time to write your own libdef, we recommend that you look to see if there is already a libdef for the third-party code that you&amp;rsquo;re addressing. &lt;code&gt;flow-typed&lt;/code&gt; is a &lt;a href=&quot;https://github.com/flowtype/flow-typed/&quot;&gt;tool and repository&lt;/a&gt; for sharing common libdefs within the Flow community &amp;ndash; so it&amp;rsquo;s a good way to knock out a good chunk of any public libdefs you might need for your project.</source>
          <target state="translated">Antes de dedicar tiempo a escribir su propia libdef, le recomendamos que mire para ver si ya existe una libdef para el c&amp;oacute;digo de terceros al que se dirige. &lt;code&gt;flow-typed&lt;/code&gt; es una &lt;a href=&quot;https://github.com/flowtype/flow-typed/&quot;&gt;herramienta y un repositorio&lt;/a&gt; para compartir libdefs comunes dentro de la comunidad Flow, por lo que es una buena manera de eliminar una buena parte de las libdefs p&amp;uacute;blicas que pueda necesitar para su proyecto.</target>
        </trans-unit>
        <trans-unit id="ffd8520b4ea61ae236ddd4d1f4143845bd5bc375" translate="yes" xml:space="preserve">
          <source>Before we show how to type a React class component with Flow, let us first show how you would write a React class component &lt;em&gt;without&lt;/em&gt; Flow but with React&amp;rsquo;s prop types. You would extend &lt;code&gt;React.Component&lt;/code&gt; and add a static &lt;code&gt;propTypes&lt;/code&gt; property.</source>
          <target state="translated">Antes de mostrar c&amp;oacute;mo escribir un componente de la clase React con Flow, primero veamos c&amp;oacute;mo escribir&amp;iacute;as un componente de la clase React &lt;em&gt;sin&lt;/em&gt; Flow pero con los tipos de prop de React. Extender&amp;iacute;a &lt;code&gt;React.Component&lt;/code&gt; y agregar&amp;iacute;a una propiedad &lt;code&gt;propTypes&lt;/code&gt; est&amp;aacute;tica .</target>
        </trans-unit>
        <trans-unit id="2b1e005429a327929c485a9cce3808a1145b8aa0" translate="yes" xml:space="preserve">
          <source>Behavior of generics</source>
          <target state="translated">Comportamiento de los genéricos</target>
        </trans-unit>
        <trans-unit id="14c1725802639472c93222b37b542de37c5a1c5d" translate="yes" xml:space="preserve">
          <source>Below are some common error patterns and how to overcome them.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="14f05c52525df031dba9063b10d7682abd307a65" translate="yes" xml:space="preserve">
          <source>Between versions v0.125.0 and v0.127.0, this option was named &lt;code&gt;well_formed_exports.whitelist&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e82cf40f53265657d5832c1308bdb8b249dbe424" translate="yes" xml:space="preserve">
          <source>Bivariance</source>
          <target state="translated">Bivariance</target>
        </trans-unit>
        <trans-unit id="408adf1c6e528212e5ff5ec2ce7d7e888977db8a" translate="yes" xml:space="preserve">
          <source>Bivariance &lt;em&gt;does&lt;/em&gt; accept &lt;strong&gt;subtypes&lt;/strong&gt;.</source>
          <target state="translated">Bivariance &lt;em&gt;hace&lt;/em&gt; aceptar &lt;strong&gt;subtipos&lt;/strong&gt; .</target>
        </trans-unit>
        <trans-unit id="bf56a8499cffbc9b99a5c626b8e4f47f74fb6f88" translate="yes" xml:space="preserve">
          <source>Bivariance &lt;em&gt;does&lt;/em&gt; accept &lt;strong&gt;supertypes&lt;/strong&gt;.</source>
          <target state="translated">Bivariance &lt;em&gt;hace&lt;/em&gt; aceptar &lt;strong&gt;supertipos&lt;/strong&gt; .</target>
        </trans-unit>
        <trans-unit id="bcd9e69ceceba4abeefdd82a9dfed379a6547be2" translate="yes" xml:space="preserve">
          <source>Boolean types need you to be explicit by converting non-booleans. You can do that with &lt;code&gt;Boolean(x)&lt;/code&gt; or &lt;code&gt;!!x&lt;/code&gt;.</source>
          <target state="translated">Los tipos booleanos necesitan que sea expl&amp;iacute;cito convirtiendo no booleanos. Puede hacer eso con &lt;code&gt;Boolean(x)&lt;/code&gt; o &lt;code&gt;!!x&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="0786cdff946e6084c50bb7df6cacd8ed965599fa" translate="yes" xml:space="preserve">
          <source>Booleans</source>
          <target state="translated">Booleans</target>
        </trans-unit>
        <trans-unit id="aeaf4741c43124d50887c3856fa57da08ef729d3" translate="yes" xml:space="preserve">
          <source>Booleans are &lt;code&gt;true&lt;/code&gt; and &lt;code&gt;false&lt;/code&gt; values in JavaScript. The &lt;code&gt;boolean&lt;/code&gt; type in Flow accepts these values.</source>
          <target state="translated">Los booleanos son valores &lt;code&gt;true&lt;/code&gt; y &lt;code&gt;false&lt;/code&gt; en JavaScript. El tipo &lt;code&gt;boolean&lt;/code&gt; o en Flow acepta estos valores.</target>
        </trans-unit>
        <trans-unit id="1845c94e71026f36d7237c0f0214aa3d8c3ce37d" translate="yes" xml:space="preserve">
          <source>Booleans: like &lt;code&gt;true&lt;/code&gt; or &lt;code&gt;false&lt;/code&gt;</source>
          <target state="translated">Booleanos: como &lt;code&gt;true&lt;/code&gt; o &lt;code&gt;false&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="7494e6ec8cd7b2eb5a14c1e063217659a8a1ed3a" translate="yes" xml:space="preserve">
          <source>Broken example:</source>
          <target state="translated">Un ejemplo roto:</target>
        </trans-unit>
        <trans-unit id="f031d4d730e754281da3ddefefd685153cc7e2c0" translate="yes" xml:space="preserve">
          <source>But Flow should understand that this function cannot invalidate this refinement, right?</source>
          <target state="translated">Pero Flow debe entender que esta función no puede invalidar este refinamiento,¿verdad?</target>
        </trans-unit>
        <trans-unit id="421430d7200437b9bff784aea6c385eb54e83ace" translate="yes" xml:space="preserve">
          <source>But JavaScript ignores these comments, so all it has is the valid syntax.</source>
          <target state="translated">Pero JavaScript ignora estos comentarios,así que todo lo que tiene es la sintaxis válida.</target>
        </trans-unit>
        <trans-unit id="9bcf9a6dad7d351fd124803ac3fa5511232e6ff7" translate="yes" xml:space="preserve">
          <source>But as soon as you change the shape it will start to cause errors.</source>
          <target state="translated">Pero tan pronto como cambies la forma,comenzará a causar errores.</target>
        </trans-unit>
        <trans-unit id="961b391c2d9d40cf6976473efc025458ffadca5a" translate="yes" xml:space="preserve">
          <source>But now we have a problem. Our &lt;code&gt;typeof obj&lt;/code&gt; annotation also gets this new annotation which defeats the entire purpose.</source>
          <target state="translated">Pero ahora tenemos un problema. Nuestra anotaci&amp;oacute;n &lt;code&gt;typeof obj&lt;/code&gt; tambi&amp;eacute;n obtiene esta nueva anotaci&amp;oacute;n que anula todo el prop&amp;oacute;sito.</target>
        </trans-unit>
        <trans-unit id="0a7b7f1f4fc53f9d61a2d8e4846e79d6d5218c5c" translate="yes" xml:space="preserve">
          <source>But suppose you only want to allow strings in your function. For that you can add types.</source>
          <target state="translated">Pero supongamos que sólo quiere permitir cuerdas en su función.Para eso puedes añadir tipos.</target>
        </trans-unit>
        <trans-unit id="eeada9e2d3835e3320e9297e7d171eb9198c4546" translate="yes" xml:space="preserve">
          <source>But we also need to compare the types of the values. If both objects had a key &lt;code&gt;foo&lt;/code&gt; but one was a &lt;code&gt;number&lt;/code&gt; and the other was a &lt;code&gt;string&lt;/code&gt;, then one would not be the subtype of the other.</source>
          <target state="translated">Pero tambi&amp;eacute;n necesitamos comparar los tipos de valores. Si ambos objetos tuvieran un &lt;code&gt;foo&lt;/code&gt; clave pero uno fuera un &lt;code&gt;number&lt;/code&gt; y el otro fuera una &lt;code&gt;string&lt;/code&gt; , entonces uno no ser&amp;iacute;a el subtipo del otro.</target>
        </trans-unit>
        <trans-unit id="0b1dae6be8224d27747e5314d54153e505cce8cb" translate="yes" xml:space="preserve">
          <source>But when objects are sealed, Flow will not allow you to add new properties to them.</source>
          <target state="translated">Pero cuando los objetos están sellados,el flujo no le permitirá añadir nuevas propiedades a los mismos.</target>
        </trans-unit>
        <trans-unit id="66ff1b2d0fd5745355740b15ee2b612dc315d816" translate="yes" xml:space="preserve">
          <source>But when you have properties that overlap by having the same name, it creates an intersection of the property type as well.</source>
          <target state="translated">Pero cuando tienes propiedades que se superponen por tener el mismo nombre,se crea una intersección del tipo de propiedad también.</target>
        </trans-unit>
        <trans-unit id="30753facf6dcd87d6a5e7d8483dce119cb47531c" translate="yes" xml:space="preserve">
          <source>But when you use &lt;code&gt;typeof&lt;/code&gt;, you&amp;rsquo;re taking the results of Flow&amp;rsquo;s inference and asserting it as a type. While this can be very useful, it can also lead to some unexpected results.</source>
          <target state="translated">Pero cuando usa &lt;code&gt;typeof&lt;/code&gt; , toma los resultados de la inferencia de Flow y los afirma como un tipo. Si bien esto puede resultar muy &amp;uacute;til, tambi&amp;eacute;n puede generar algunos resultados inesperados.</target>
        </trans-unit>
        <trans-unit id="402c1e1505aa711e14641f9e0cbdd3c126cb8608" translate="yes" xml:space="preserve">
          <source>But you can use any to cast to whatever type you want.</source>
          <target state="translated">Pero puedes usar cualquiera para hacer el casting al tipo que quieras.</target>
        </trans-unit>
        <trans-unit id="380728668d9cfaeeebed3b2bcfa77a400e52a7a2" translate="yes" xml:space="preserve">
          <source>But you can&amp;rsquo;t possibly create a value which is both a &lt;em&gt;number and a string&lt;/em&gt;, but you can create a type for it. There&amp;rsquo;s no practical use for creating types like this, but it&amp;rsquo;s a side effect of how intersection types work.</source>
          <target state="translated">Pero no es posible crear un valor que sea a la vez un &lt;em&gt;n&amp;uacute;mero y una cadena&lt;/em&gt; , pero puede crear un tipo para &amp;eacute;l. No hay ning&amp;uacute;n uso pr&amp;aacute;ctico para crear tipos como este, pero es un efecto secundario de c&amp;oacute;mo funcionan los tipos de intersecci&amp;oacute;n.</target>
        </trans-unit>
        <trans-unit id="a559e18c54711bce2c3c1b5537b218d29bf4a48b" translate="yes" xml:space="preserve">
          <source>But you&amp;rsquo;ll want to use more specific types for your actions using disjoint unions and each individual type of action.</source>
          <target state="translated">Pero querr&amp;aacute; utilizar tipos m&amp;aacute;s espec&amp;iacute;ficos para sus acciones utilizando uniones disjuntas y cada tipo de acci&amp;oacute;n individual.</target>
        </trans-unit>
        <trans-unit id="75d7327a8eec333652ce1fe3a29a224e1b4e6477" translate="yes" xml:space="preserve">
          <source>By casting the value to any, you can then cast to whatever you want.</source>
          <target state="translated">Al asignar el valor a cualquiera,puedes asignar el valor a lo que quieras.</target>
        </trans-unit>
        <trans-unit id="ea11ddf576cb4458685c2b63ba3622020aced4f3" translate="yes" xml:space="preserve">
          <source>By checking every possible value, Flow might catch errors that will not actually occur when the code is run. Flow does this in order to be &lt;em&gt;&amp;ldquo;sound&amp;rdquo;&lt;/em&gt;.</source>
          <target state="translated">Al verificar todos los valores posibles, Flow puede detectar errores que en realidad no ocurrir&amp;aacute;n cuando se ejecute el c&amp;oacute;digo. Flow hace esto para ser &lt;em&gt;&quot;s&amp;oacute;lido&quot;&lt;/em&gt; .</target>
        </trans-unit>
        <trans-unit id="888a90a8461cf1dcf2dfa9475b824abf2a140082" translate="yes" xml:space="preserve">
          <source>By checking the typeof our value and testing to see if it is a number, Flow knows that inside of that block it is only a number. We can then write code which treats our value as a number inside of that block.</source>
          <target state="translated">Comprobando el tipo de nuestro valor y probando si es un número,Flow sabe que dentro de ese bloque sólo es un número.Podemos entonces escribir un código que trate nuestro valor como un número dentro de ese bloque.</target>
        </trans-unit>
        <trans-unit id="41e166bbfa292c608c082d1714c483c0896b791e" translate="yes" xml:space="preserve">
          <source>By default it is 536870912 (2^29 bytes, which is half a gigabyte).</source>
          <target state="translated">Por defecto es 536870912 (2^29 bytes,que es medio gigabyte).</target>
        </trans-unit>
        <trans-unit id="50633f3514931f4fa2e84559a298e46e3f897949" translate="yes" xml:space="preserve">
          <source>By default this is 0.</source>
          <target state="translated">Por defecto es 0.</target>
        </trans-unit>
        <trans-unit id="15c3b3f03676e9fef47c839d9f3979c86d9e53d7" translate="yes" xml:space="preserve">
          <source>By default this is &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">Por defecto, esto es &lt;code&gt;false&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="53bf9ecbf110fc31e84ab1d4ed08e51aaa3096ed" translate="yes" xml:space="preserve">
          <source>By default this option is set to &lt;code&gt;/dev/shm&lt;/code&gt; and &lt;code&gt;/tmp&lt;/code&gt;</source>
          <target state="translated">De forma predeterminada, esta opci&amp;oacute;n est&amp;aacute; configurada en &lt;code&gt;/dev/shm&lt;/code&gt; y &lt;code&gt;/tmp&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="0c9574b97e4aad17c08cdb93e1e1659dc17a8a5d" translate="yes" xml:space="preserve">
          <source>By default when you re-assign a variable, Flow will give it the type of all possible assignments.</source>
          <target state="translated">Por defecto,cuando reasigne una variable,Flow le dará el tipo de todas las asignaciones posibles.</target>
        </trans-unit>
        <trans-unit id="134864792720213ebc4bc0075f47cc4f80136ea2" translate="yes" xml:space="preserve">
          <source>By default, Flow will look for files with the extensions &lt;code&gt;.js&lt;/code&gt;, &lt;code&gt;.jsx&lt;/code&gt;, &lt;code&gt;.mjs&lt;/code&gt; and &lt;code&gt;.json&lt;/code&gt;. You can override this behavior with this option.</source>
          <target state="translated">De forma predeterminada, Flow buscar&amp;aacute; archivos con las extensiones &lt;code&gt;.js&lt;/code&gt; , &lt;code&gt;.jsx&lt;/code&gt; , &lt;code&gt;.mjs&lt;/code&gt; y &lt;code&gt;.json&lt;/code&gt; . Puede anular este comportamiento con esta opci&amp;oacute;n.</target>
        </trans-unit>
        <trans-unit id="797f4d9748a7b5ec9d7eb76937c9172242bd34b1" translate="yes" xml:space="preserve">
          <source>By default, Flow will look for files with the extensions &lt;code&gt;.js&lt;/code&gt;, &lt;code&gt;.jsx&lt;/code&gt;, &lt;code&gt;.mjs&lt;/code&gt;, &lt;code&gt;.cjs&lt;/code&gt; and &lt;code&gt;.json&lt;/code&gt;. You can override this behavior with this option.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c01f8c4e09478deb33d4af8e9963cfec032edd46" translate="yes" xml:space="preserve">
          <source>By default, Flow will look in directories named &lt;code&gt;node_modules&lt;/code&gt; for node modules. You can configure this behavior with this option.</source>
          <target state="translated">De forma predeterminada, Flow buscar&amp;aacute; m&amp;oacute;dulos de nodo en directorios denominados &lt;code&gt;node_modules&lt;/code&gt; . Puede configurar este comportamiento con esta opci&amp;oacute;n.</target>
        </trans-unit>
        <trans-unit id="09b5075116fd3869d9cadd377bad839d72504028" translate="yes" xml:space="preserve">
          <source>By default, the Flow server will typecheck all your code. This way it can answer questions like &amp;ldquo;are there any Flow errors anywhere in my code&amp;rdquo;. This is very useful for tooling, like a continuous integration hook which prevents code changes which introduce Flow errors.</source>
          <target state="translated">Por defecto, el servidor de Flow revisar&amp;aacute; todo su c&amp;oacute;digo. De esta manera, puede responder preguntas como &quot;&amp;iquest;hay errores de flujo en alg&amp;uacute;n lugar de mi c&amp;oacute;digo?&quot;. Esto es muy &amp;uacute;til para las herramientas, como un gancho de integraci&amp;oacute;n continuo que evita cambios de c&amp;oacute;digo que introducen errores de flujo.</target>
        </trans-unit>
        <trans-unit id="fd76a70149a54159a0fc3b1090cb3ea08262b1cc" translate="yes" xml:space="preserve">
          <source>By default, this is set to 19 (Table size is 2^19, which is 8 megabytes)</source>
          <target state="translated">Por defecto,está configurado a 19 (El tamaño de la tabla es 2^19,que es 8 megabytes)</target>
        </trans-unit>
        <trans-unit id="7ff7ddf4cc91afce590edc441693a3db98fd3736" translate="yes" xml:space="preserve">
          <source>By default, this is set to 26843545600 (25 * 2^30 bytes, which is 25GiB)</source>
          <target state="translated">Por defecto,esto está configurado a 26843545600 (25*2^30 bytes,que es 25GiB)</target>
        </trans-unit>
        <trans-unit id="acbb4b73f95bada54b37ed5bbd4fe52f109cb99a" translate="yes" xml:space="preserve">
          <source>CLI Commands</source>
          <target state="translated">Comandos CLI</target>
        </trans-unit>
        <trans-unit id="6d43703db2da8bdf8468b95d1594c5dba316eb10" translate="yes" xml:space="preserve">
          <source>Calculates a config object from props and default props. This is most useful for annotating HOCs that are abstracted over configs. See our &lt;a href=&quot;../hoc&quot;&gt;docs on writing HOCs&lt;/a&gt; for more information.</source>
          <target state="translated">Calcula un objeto de configuraci&amp;oacute;n a partir de accesorios y accesorios predeterminados. Esto es m&amp;aacute;s &amp;uacute;til para anotar HOC que se abstraen sobre configuraciones. Consulte nuestros &lt;a href=&quot;../hoc&quot;&gt;documentos sobre c&amp;oacute;mo redactar HOC&lt;/a&gt; para obtener m&amp;aacute;s informaci&amp;oacute;n.</target>
        </trans-unit>
        <trans-unit id="97da5c1835399f071d43358b9774ddca050daf60" translate="yes" xml:space="preserve">
          <source>Callable Objects</source>
          <target state="translated">Objetos llamables</target>
        </trans-unit>
        <trans-unit id="3a313789e66d78fc3c3729e779158ab414b6007d" translate="yes" xml:space="preserve">
          <source>Callable objects can be typed, for example:</source>
          <target state="translated">Los objetos que se pueden llamar pueden ser mecanografiados,por ejemplo:</target>
        </trans-unit>
        <trans-unit id="1e3dda98f28093e22a6a934530588e573abb8f00" translate="yes" xml:space="preserve">
          <source>Calling an overloaded function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c139cc9f6d79ac3a638f7ccf61f2b9637d567c2a" translate="yes" xml:space="preserve">
          <source>Cannot use mutating array methods on tuples</source>
          <target state="translated">No se pueden utilizar los métodos de matriz de mutación en tuplas</target>
        </trans-unit>
        <trans-unit id="ee70a9dd51b9b3a375656ccfb82a0044b5db1ef2" translate="yes" xml:space="preserve">
          <source>Caret ranges, which allow changes that do not modify the left-most non-zero digit (e.g. &lt;code&gt;^0.13.0&lt;/code&gt; expands into &lt;code&gt;&amp;gt;=0.13.0 &amp;lt;0.14.0&lt;/code&gt;, and &lt;code&gt;^0.13.1&lt;/code&gt; expands into &lt;code&gt;&amp;gt;=0.13.1 &amp;lt;0.14.0&lt;/code&gt;, whereas &lt;code&gt;^1.2.3&lt;/code&gt; expands into &lt;code&gt;&amp;gt;=1.2.3 &amp;lt;2.0.0&lt;/code&gt;).</source>
          <target state="translated">Intervalos de inter&amp;eacute;s, que permiten cambios que no modifican el d&amp;iacute;gito distinto de cero &lt;code&gt;^0.13.0&lt;/code&gt; m&amp;aacute;s a la izquierda (por ejemplo, ^ 0.13.0 se expande a &lt;code&gt;&amp;gt;=0.13.0 &amp;lt;0.14.0&lt;/code&gt; , y &lt;code&gt;^0.13.1&lt;/code&gt; expande a &lt;code&gt;&amp;gt;=0.13.1 &amp;lt;0.14.0&lt;/code&gt; , mientras que &lt;code&gt;^1.2.3&lt;/code&gt; expande en &lt;code&gt;&amp;gt;=1.2.3 &amp;lt;2.0.0&lt;/code&gt; ).</target>
        </trans-unit>
        <trans-unit id="6fe0f312fa3428aa6c4fdee3743c37967749d48e" translate="yes" xml:space="preserve">
          <source>Check Your Code</source>
          <target state="translated">Revise su código</target>
        </trans-unit>
        <trans-unit id="b73433b77514508ea8a1cefa58845c9ce4425fe1" translate="yes" xml:space="preserve">
          <source>Check out the &lt;a href=&quot;https://flow.org/en/linting&quot;&gt;linting docs&lt;/a&gt; for more information.</source>
          <target state="translated">Consulte los &lt;a href=&quot;https://flow.org/en/linting&quot;&gt;documentos de linting&lt;/a&gt; para obtener m&amp;aacute;s informaci&amp;oacute;n.</target>
        </trans-unit>
        <trans-unit id="18c18b8a20dbe7477ce5e5b3ea1624b99b154cdc" translate="yes" xml:space="preserve">
          <source>Checks JavaScript files for type errors on save</source>
          <target state="translated">Comprueba que los archivos JavaScript no contengan errores de escritura al guardarlos.</target>
        </trans-unit>
        <trans-unit id="dcf75191c585bfb6059ad203f7ce5630a589a405" translate="yes" xml:space="preserve">
          <source>Children</source>
          <target state="translated">Children</target>
        </trans-unit>
        <trans-unit id="ea7d82eca3471176f477c2cedc92c146814951f8" translate="yes" xml:space="preserve">
          <source>Choosing Focused Files</source>
          <target state="translated">Elección de los archivos enfocados</target>
        </trans-unit>
        <trans-unit id="dd9e83c06b2948588c35a377c68a9e504e82cd53" translate="yes" xml:space="preserve">
          <source>Class Components</source>
          <target state="translated">Componentes de la clase</target>
        </trans-unit>
        <trans-unit id="a292b9b612431489a82ca75b9a01310364d94fec" translate="yes" xml:space="preserve">
          <source>Class Fields (Properties)</source>
          <target state="translated">Campos de clase (Propiedades)</target>
        </trans-unit>
        <trans-unit id="c29b94bc81534772a515451e3a6176277b7a484c" translate="yes" xml:space="preserve">
          <source>Class Generics</source>
          <target state="translated">Genéricos de clase</target>
        </trans-unit>
        <trans-unit id="3d9f77136533c6ff7b7e86c9e68a8e0e99ad867e" translate="yes" xml:space="preserve">
          <source>Class Methods</source>
          <target state="translated">Métodos de clase</target>
        </trans-unit>
        <trans-unit id="00da90a4700b284083533dbd6e4a5418d77ae7c4" translate="yes" xml:space="preserve">
          <source>Class Syntax</source>
          <target state="translated">Sintaxis de clase</target>
        </trans-unit>
        <trans-unit id="970423396db9a5db3ab146030f36eab03c9bccf9" translate="yes" xml:space="preserve">
          <source>Class Types</source>
          <target state="translated">Tipos de clase</target>
        </trans-unit>
        <trans-unit id="7ef245513b7358326754969c6ff56632c31d10bb" translate="yes" xml:space="preserve">
          <source>Class generics are &lt;a href=&quot;../generics#toc-parameterized-generics&quot;&gt;parameterized&lt;/a&gt;. When you use a class as a type you need to pass parameters for each of its generics.</source>
          <target state="translated">Los gen&amp;eacute;ricos de clase est&amp;aacute;n &lt;a href=&quot;../generics#toc-parameterized-generics&quot;&gt;parametrizados&lt;/a&gt; . Cuando usa una clase como tipo, necesita pasar par&amp;aacute;metros para cada uno de sus gen&amp;eacute;ricos.</target>
        </trans-unit>
        <trans-unit id="1ac68839be9322d234cbe8b1175e8660eac2c1db" translate="yes" xml:space="preserve">
          <source>Classes (when being used as a type), type aliases, and interfaces all require that you pass type arguments. Functions and function types do not have parameterized generics.</source>
          <target state="translated">Las clases (cuando se usan como tipo),los alias de tipo y las interfaces requieren que se pasen argumentos de tipo.Las funciones y los tipos de función no tienen genéricos parametrizados.</target>
        </trans-unit>
        <trans-unit id="3164faf12698fd9d5a1ee175d4e32c8f3b28733b" translate="yes" xml:space="preserve">
          <source>Classes are nominally typed</source>
          <target state="translated">Las clases están nominalmente mecanografiadas</target>
        </trans-unit>
        <trans-unit id="09580fd8cc5532206f6976398f34d1aa760f93c6" translate="yes" xml:space="preserve">
          <source>Classes can also have their own &lt;a href=&quot;../generics&quot;&gt;generics&lt;/a&gt;.</source>
          <target state="translated">Las clases tambi&amp;eacute;n pueden tener sus propios &lt;a href=&quot;../generics&quot;&gt;gen&amp;eacute;ricos&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="5fda3adeadc4a4501aa999874c1179a4ba1c688c" translate="yes" xml:space="preserve">
          <source>Classes can create generics by placing the type parameter list before the body of the class.</source>
          <target state="translated">Las clases pueden crear genéricos colocando la lista de parámetros del tipo antes del cuerpo de la clase.</target>
        </trans-unit>
        <trans-unit id="1b808e1e4ae68ed6db8b6f4a3b08980e0757a73a" translate="yes" xml:space="preserve">
          <source>Classes in Flow are identical to normal JavaScript classes, but with added types.</source>
          <target state="translated">Las clases en Flujo son idénticas a las clases normales de JavaScript,pero con tipos añadidos.</target>
        </trans-unit>
        <trans-unit id="452b035012ae20e8fba0cecbb4575853da83a21c" translate="yes" xml:space="preserve">
          <source>Classes in Flow are nominally typed. This means that when you have two separate classes you cannot use one in place of the other even when they have the same exact properties and methods.</source>
          <target state="translated">Las clases en Flow están nominalmente tipificadas.Esto significa que cuando se tienen dos clases separadas no se puede utilizar una en lugar de la otra,incluso cuando tienen las mismas propiedades y métodos exactos.</target>
        </trans-unit>
        <trans-unit id="cd71068bccd40b5b60ee9b0cf1c42470216943f4" translate="yes" xml:space="preserve">
          <source>Classes in annotations</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c07a614cc79da75bb9b47692238ba51e242a3c47" translate="yes" xml:space="preserve">
          <source>Classes with generics</source>
          <target state="translated">Las clases con genéricos</target>
        </trans-unit>
        <trans-unit id="a3966ac02425c85de4503912eef3010180d093f6" translate="yes" xml:space="preserve">
          <source>Classifying Files</source>
          <target state="translated">Clasificación de archivos</target>
        </trans-unit>
        <trans-unit id="9a6493fff0e02b5b67df6f42172fb567924f9028" translate="yes" xml:space="preserve">
          <source>Codemod output</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2fcb06fe99601c54632fde082ff65f604df751c1" translate="yes" xml:space="preserve">
          <source>Command Line Use</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4060649bc0fbf1a753996c990ce6ff425ec633c7" translate="yes" xml:space="preserve">
          <source>Comment Types</source>
          <target state="translated">Cómo los tipos</target>
        </trans-unit>
        <trans-unit id="e20aa320a16fc33b19be9bd963333288cc2fbcd3" translate="yes" xml:space="preserve">
          <source>Comment support was added in v0.23.0. Lines beginning with zero or more spaces followed by an &lt;code&gt;#&lt;/code&gt; or &lt;code&gt;;&lt;/code&gt; or &lt;code&gt;💩&lt;/code&gt; are ignored. For example:</source>
          <target state="translated">Se agreg&amp;oacute; soporte para comentarios en la v0.23.0. L&amp;iacute;neas que comienzan con cero o m&amp;aacute;s espacios seguidos de un &lt;code&gt;#&lt;/code&gt; o &lt;code&gt;;&lt;/code&gt; o &lt;code&gt;💩&lt;/code&gt; se ignoran. Por ejemplo:</target>
        </trans-unit>
        <trans-unit id="7a3c18b9e3a38eaea2ce3317736de762da172d50" translate="yes" xml:space="preserve">
          <source>Comment type annotation</source>
          <target state="translated">Anotación de tipo de comentario</target>
        </trans-unit>
        <trans-unit id="3fdb12dbd0fc63c594f614d2015983c4d8a7cc47" translate="yes" xml:space="preserve">
          <source>Comment type include</source>
          <target state="translated">El tipo de comentario incluye</target>
        </trans-unit>
        <trans-unit id="2a30d59a808479157403fbf163a7b1b950362562" translate="yes" xml:space="preserve">
          <source>Comment types syntax</source>
          <target state="translated">Como la sintaxis se tipifica</target>
        </trans-unit>
        <trans-unit id="fce06e20e5f7f74aacccab40b59b75a56c8f7305" translate="yes" xml:space="preserve">
          <source>Comments</source>
          <target state="translated">Comments</target>
        </trans-unit>
        <trans-unit id="77cd370c5563644ed24d98dbd212c70fede32f4e" translate="yes" xml:space="preserve">
          <source>CommonJS modules have a single value that is exported (the &lt;code&gt;module.exports&lt;/code&gt; value). To describe the type of this single value within a &lt;code&gt;declare module&lt;/code&gt; body, you&amp;rsquo;ll use the &lt;code&gt;declare module.exports&lt;/code&gt; syntax:</source>
          <target state="translated">Los m&amp;oacute;dulos CommonJS tienen un &amp;uacute;nico valor que se exporta (el valor &lt;code&gt;module.exports&lt;/code&gt; ). Para describir el tipo de este valor &amp;uacute;nico dentro de un cuerpo de &lt;code&gt;declare module&lt;/code&gt; , usar&amp;aacute; la sintaxis de &lt;code&gt;declare module.exports&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="9289473eeedaee09d76c8cf1b6994d8550debf46" translate="yes" xml:space="preserve">
          <source>Components</source>
          <target state="translated">Components</target>
        </trans-unit>
        <trans-unit id="defd3903dafc585dcec1a9aae0635fe10d9c6241" translate="yes" xml:space="preserve">
          <source>Conceptually one can think of declaration mode as if Flow still typechecks the files but acts as if there is a comment that matches &lt;a href=&quot;../options#toc-suppress-comment-regex&quot;&gt;&lt;code&gt;suppress_comment&lt;/code&gt;&lt;/a&gt; on every line.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="357ded9bfca85d8cbd26f40a3524ddda69561b80" translate="yes" xml:space="preserve">
          <source>Conceptually one can think of declaration mode as if Flow still typechecks the files but acts as if there is a comment that matches &lt;code&gt;suppress_comment&lt;/code&gt; on every line.</source>
          <target state="translated">Conceptualmente, se puede pensar en el modo de declaraci&amp;oacute;n como si Flow todav&amp;iacute;a revisara los archivos, pero actuara como si hubiera un comentario que coincide con &lt;code&gt;suppress_comment&lt;/code&gt; en cada l&amp;iacute;nea.</target>
        </trans-unit>
        <trans-unit id="754164850f38c1ecdaf6b8ed894cb192bc36c5f4" translate="yes" xml:space="preserve">
          <source>Configuration</source>
          <target state="translated">Configuration</target>
        </trans-unit>
        <trans-unit id="17e8e4decf7d96f7f04f6c0aaf456c37aae4e8a7" translate="yes" xml:space="preserve">
          <source>Configure ALE to use the &lt;code&gt;flow-language-server&lt;/code&gt; linter for JavaScript files:</source>
          <target state="translated">Configure ALE para usar el linter de &lt;code&gt;flow-language-server&lt;/code&gt; para archivos JavaScript:</target>
        </trans-unit>
        <trans-unit id="b41a81e0d51029fe68417fdfc1818a6ce70ba9c2" translate="yes" xml:space="preserve">
          <source>Configuring Lints from the CLI</source>
          <target state="translated">Configurando Lints desde el CLI</target>
        </trans-unit>
        <trans-unit id="8e2382fbc54df1efc6f7e32e65cd9c5d7c95a4c6" translate="yes" xml:space="preserve">
          <source>Configuring Lints in the &lt;code&gt;.flowconfig&lt;/code&gt;</source>
          <target state="translated">Configuraci&amp;oacute;n de Lints en &lt;code&gt;.flowconfig&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="100fcd8a929b3ce3c89e968bb90a967ea5146ece" translate="yes" xml:space="preserve">
          <source>Configuring Lints with Comments</source>
          <target state="translated">Configurando Lints con comentarios</target>
        </trans-unit>
        <trans-unit id="ea1be7edf59f5de51b594f9fbae2368f8449e70c" translate="yes" xml:space="preserve">
          <source>Configuring lint settings with &lt;code&gt;flowlint&lt;/code&gt; comments allows you to specify different settings within a file and different settings to different regions of different files. These comments come in three forms:</source>
          <target state="translated">La configuraci&amp;oacute;n de la configuraci&amp;oacute;n de pelusa con comentarios de &lt;code&gt;flowlint&lt;/code&gt; permite especificar diferentes configuraciones dentro de un archivo y diferentes configuraciones para diferentes regiones de diferentes archivos. Estos comentarios vienen en tres formas:</target>
        </trans-unit>
        <trans-unit id="5459dd4dd0d0aff9d4c5e0bb04ffd680814c6d9f" translate="yes" xml:space="preserve">
          <source>Consider a &lt;code&gt;TypeLetters&lt;/code&gt; which described the strings: &amp;ldquo;A&amp;rdquo;, &amp;ldquo;B&amp;rdquo;, &amp;ldquo;C&amp;rdquo;, and a &lt;code&gt;TypeNumbers&lt;/code&gt; which described the numbers: 1, 2, 3. Neither of them would be a subtype of the other, as they each contain a completely different set of values.</source>
          <target state="translated">Considere un &lt;code&gt;TypeLetters&lt;/code&gt; que describe las cadenas: &quot;A&quot;, &quot;B&quot;, &quot;C&quot;, y un &lt;code&gt;TypeNumbers&lt;/code&gt; que describe los n&amp;uacute;meros: 1, 2, 3. Ninguno de ellos ser&amp;iacute;a un subtipo del otro, ya que cada uno contiene un conjunto de valores completamente diferente.</target>
        </trans-unit>
        <trans-unit id="0a58c2d59bcfe5a466b65ae6d964fb3e0e60bdeb" translate="yes" xml:space="preserve">
          <source>Consider for example a file &lt;code&gt;foo.js&lt;/code&gt; that exports a function call to &lt;code&gt;foo&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cc11b3a28fa30ae6d3d3ad1438824cbd5224ba5c" translate="yes" xml:space="preserve">
          <source>Context</source>
          <target state="translated">Context</target>
        </trans-unit>
        <trans-unit id="bd6cc06a58d88fe388d82365f6c350095732e612" translate="yes" xml:space="preserve">
          <source>Contravariance</source>
          <target state="translated">Contravariance</target>
        </trans-unit>
        <trans-unit id="cb180a0b2985d8db3f02bd050b0c5682ab094c05" translate="yes" xml:space="preserve">
          <source>Contravariance &lt;em&gt;does not&lt;/em&gt; accept &lt;strong&gt;subtypes&lt;/strong&gt;.</source>
          <target state="translated">La contravarianza &lt;em&gt;no&lt;/em&gt; acepta &lt;strong&gt;subtipos&lt;/strong&gt; .</target>
        </trans-unit>
        <trans-unit id="c1af28bd0de937b51db3bbee9579b53603a2e45c" translate="yes" xml:space="preserve">
          <source>Contravariance &lt;em&gt;does&lt;/em&gt; accept &lt;strong&gt;supertypes&lt;/strong&gt;.</source>
          <target state="translated">Contravarianza &lt;em&gt;hace&lt;/em&gt; aceptar &lt;strong&gt;supertipos&lt;/strong&gt; .</target>
        </trans-unit>
        <trans-unit id="f1840a661bb88bcb72aa63857962824a747fab2e" translate="yes" xml:space="preserve">
          <source>Contravariant (write-only) properties on interfaces</source>
          <target state="translated">Propiedades contrarias (sólo de escritura)en las interfaces</target>
        </trans-unit>
        <trans-unit id="d37d133ea5c1b52753b3893f902c233ee8442bb5" translate="yes" xml:space="preserve">
          <source>Covariance</source>
          <target state="translated">Covariance</target>
        </trans-unit>
        <trans-unit id="2f10ee60c3d51dffb8e99aab19b27d99124ad7c4" translate="yes" xml:space="preserve">
          <source>Covariance &lt;em&gt;does not&lt;/em&gt; accept &lt;strong&gt;supertypes&lt;/strong&gt;.</source>
          <target state="translated">La covarianza &lt;em&gt;no&lt;/em&gt; acepta &lt;strong&gt;supertipos&lt;/strong&gt; .</target>
        </trans-unit>
        <trans-unit id="a1fa2bb1d0052e924cece0736a3a2248a64883bc" translate="yes" xml:space="preserve">
          <source>Covariance &lt;em&gt;does&lt;/em&gt; accept &lt;strong&gt;subtypes&lt;/strong&gt;.</source>
          <target state="translated">Covarianza &lt;em&gt;hace&lt;/em&gt; aceptar &lt;strong&gt;subtipos&lt;/strong&gt; .</target>
        </trans-unit>
        <trans-unit id="6a3e204ca6009adaaa624087ce1b64b315a8aef0" translate="yes" xml:space="preserve">
          <source>Covariant (read-only) properties on interfaces</source>
          <target state="translated">Propiedades de covariante (sólo lectura)en las interfaces</target>
        </trans-unit>
        <trans-unit id="a1d8b1686c9450f38df6ec567189c88fa8e65f62" translate="yes" xml:space="preserve">
          <source>Create React App</source>
          <target state="translated">Crear la aplicación Reaccionar</target>
        </trans-unit>
        <trans-unit id="0bf0dd44b7766be1f57889796955a258d3203142" translate="yes" xml:space="preserve">
          <source>Create as many generics as you need</source>
          <target state="translated">Crea tantos genéricos como necesites</target>
        </trans-unit>
        <trans-unit id="03ce361cea65e5018df3a6c27de3a6593ce0f4ed" translate="yes" xml:space="preserve">
          <source>Creating Library Definitions</source>
          <target state="translated">Creación de definiciones de la biblioteca</target>
        </trans-unit>
        <trans-unit id="13636bea610e7bab760419f82e897d3a2fd1996d" translate="yes" xml:space="preserve">
          <source>Deal with newly introduced errors</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2f52e43b6882a3466f1d969c1cb1001473303ede" translate="yes" xml:space="preserve">
          <source>Declaration Files</source>
          <target state="translated">Archivos de declaración</target>
        </trans-unit>
        <trans-unit id="6c41a0185a4a9cfa2f6df6a748ac7876baa85cb0" translate="yes" xml:space="preserve">
          <source>Declaration mode should only be used for existing third-party code. You should never use this for code under your control.</source>
          <target state="translated">El modo de declaración sólo debe utilizarse para el código de terceros existente.Nunca debe utilizarlo para el código que está bajo su control.</target>
        </trans-unit>
        <trans-unit id="7377158aaae022f9ae166beb589c5befa8f2034b" translate="yes" xml:space="preserve">
          <source>Declaring A CommonJS Module</source>
          <target state="translated">Declarando un módulo común de JS</target>
        </trans-unit>
        <trans-unit id="e7912896131236a8a65370bdd893e2009c32c266" translate="yes" xml:space="preserve">
          <source>Declaring A Global Class</source>
          <target state="translated">Declarando una clase global</target>
        </trans-unit>
        <trans-unit id="cf300a0c751ae6bb5689acc80a14bec33cc3173d" translate="yes" xml:space="preserve">
          <source>Declaring A Global Function</source>
          <target state="translated">Declarando una función global</target>
        </trans-unit>
        <trans-unit id="fa2144a7e4ab0959082b21d1945383339a3043f8" translate="yes" xml:space="preserve">
          <source>Declaring A Global Type</source>
          <target state="translated">Declarando un tipo global</target>
        </trans-unit>
        <trans-unit id="f140a982a9c52716db37b4e9e5e30630eacfa6f6" translate="yes" xml:space="preserve">
          <source>Declaring A Global Variable</source>
          <target state="translated">Declarando una variable global</target>
        </trans-unit>
        <trans-unit id="cf71778c169e234024b86addcbe9ddb1f9d5a9b2" translate="yes" xml:space="preserve">
          <source>Declaring A Module</source>
          <target state="translated">Declarando un módulo</target>
        </trans-unit>
        <trans-unit id="e4ce9329aeac94bfdbc95574fafe7358b946c293" translate="yes" xml:space="preserve">
          <source>Declaring An ES Module</source>
          <target state="translated">Declarando un módulo ES</target>
        </trans-unit>
        <trans-unit id="e5cd6d8f44e29ee7fdbc14dbc19c634c427bceed" translate="yes" xml:space="preserve">
          <source>Declaring overloaded functions</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="af087002f31d0ea4e967c16e89ad0e158cdeb097" translate="yes" xml:space="preserve">
          <source>Default Exports</source>
          <target state="translated">Exportaciones por defecto</target>
        </trans-unit>
        <trans-unit id="7f3b8d79c1988be2a2ba2d6f29be574f525f239e" translate="yes" xml:space="preserve">
          <source>Defines a magical comment that suppresses any Flow errors on the following line. For example:</source>
          <target state="translated">Define un comentario mágico que suprime cualquier error de flujo en la siguiente línea.Por ejemplo:</target>
        </trans-unit>
        <trans-unit id="b4e96ce5110d5704ac6b16c56748c7a82fa4b290" translate="yes" xml:space="preserve">
          <source>Depth Subtyping</source>
          <target state="translated">Subtipado de profundidad</target>
        </trans-unit>
        <trans-unit id="1b3bb36c93fc36e659fb68757561761acab8380e" translate="yes" xml:space="preserve">
          <source>Design Space</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bb3a537f6961c44f6476a0cf4c7c5e6d20651cc7" translate="yes" xml:space="preserve">
          <source>Detailed guides, tips, and resources on how to integrate Flow with different JavaScript tools.</source>
          <target state="translated">Guías detalladas,consejos y recursos sobre cómo integrar Flow con diferentes herramientas de JavaScript.</target>
        </trans-unit>
        <trans-unit id="5397d84bf20e2c90a75c1c0e9296db893360d2d5" translate="yes" xml:space="preserve">
          <source>Detailed guides, tips, and resources on how to integrate Flow with different code editors.</source>
          <target state="translated">Guías detalladas,consejos y recursos sobre cómo integrar Flow con diferentes editores de código.</target>
        </trans-unit>
        <trans-unit id="07b29e4715401afbf688a87a35ce231b8ef245ab" translate="yes" xml:space="preserve">
          <source>Developers like coding in JavaScript because it helps them move fast. The language facilitates fast prototyping of ideas via dynamic typing. The runtime provides the means for fast iteration on those ideas via dynamic compilation. This fuels a fast edit-refresh cycle, which promises an immersive coding experience that is quite appealing to creative developers.</source>
          <target state="translated">A los desarrolladores les gusta codificar en JavaScript porque les ayuda a moverse rápido.El lenguaje facilita la rápida creación de prototipos de ideas a través de la mecanografía dinámica.El tiempo de ejecución proporciona los medios para la rápida iteración de esas ideas a través de la compilación dinámica.Esto alimenta un rápido ciclo de edición y actualización,que promete una experiencia de codificación inmersiva que es bastante atractiva para los desarrolladores creativos.</target>
        </trans-unit>
        <trans-unit id="d112a1cd5683bcc108f9cd368dc51e0007d4b649" translate="yes" xml:space="preserve">
          <source>Developers will often use Flow and React together, so it is important that Flow can effectively type both common and advanced React patterns. This guide will teach you how to use Flow to create safer React applications.</source>
          <target state="translated">Los desarrolladores a menudo utilizan Flow y React juntos,por lo que es importante que Flow pueda escribir eficazmente tanto los patrones comunes como los avanzados de React.Esta guía te enseñará cómo utilizar Flow para crear aplicaciones de React más seguras.</target>
        </trans-unit>
        <trans-unit id="1e6b556971ea4a33002387413d405d2f43ba4f6b" translate="yes" xml:space="preserve">
          <source>Different sections are available to specify different behaviours, and by combining them most use cases are expected to be met.</source>
          <target state="translated">Se dispone de diferentes secciones para especificar los diferentes comportamientos,y al combinarlos se espera que se cumpla la mayoría de los casos de uso.</target>
        </trans-unit>
        <trans-unit id="13f50eb9f26820d014db96a7378f60b1d9165a9e" translate="yes" xml:space="preserve">
          <source>Disjoint Unions</source>
          <target state="translated">Sindicatos Desconectados</target>
        </trans-unit>
        <trans-unit id="1a7f91bafa50063f1996b902994e106982ff9d56" translate="yes" xml:space="preserve">
          <source>Disjoint unions require you to use a single property to distinguish each object type. You cannot distinguish two different objects by different properties.</source>
          <target state="translated">Las uniones desarticuladas requieren que se use una sola propiedad para distinguir cada tipo de objeto.No se pueden distinguir dos objetos diferentes por propiedades diferentes.</target>
        </trans-unit>
        <trans-unit id="e9068ebe4e81ef4f2881aa16d8729d7d6e800dff" translate="yes" xml:space="preserve">
          <source>Disjoint unions with exact types</source>
          <target state="translated">Uniones desarticuladas con tipos exactos</target>
        </trans-unit>
        <trans-unit id="aa4adede3310c0d7e145943b47a01ec740a946a3" translate="yes" xml:space="preserve">
          <source>Each line in the &lt;code&gt;[libs]&lt;/code&gt; section is a path to the library file or directory which you would like to include. These paths can be relative to the project root directory or absolute. Including a directory recursively includes all the files under that directory as library files.</source>
          <target state="translated">Cada l&amp;iacute;nea de la secci&amp;oacute;n &lt;code&gt;[libs]&lt;/code&gt; es una ruta al archivo o directorio de la biblioteca que le gustar&amp;iacute;a incluir. Estas rutas pueden ser relativas al directorio ra&amp;iacute;z del proyecto o absolutas. La inclusi&amp;oacute;n de un directorio incluye de forma recursiva todos los archivos de ese directorio como archivos de biblioteca.</target>
        </trans-unit>
        <trans-unit id="9d6d093159b7ee3300d4a97efe8f2b52700a85bb" translate="yes" xml:space="preserve">
          <source>Each line in the above definition is called an &lt;em&gt;overload&lt;/em&gt;, and we say that functions of type &lt;code&gt;Fn&lt;/code&gt; are &lt;em&gt;overloaded&lt;/em&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="099f5c6226bea98d0b45888f6a9ff773168bded9" translate="yes" xml:space="preserve">
          <source>Each of the members of a intersection type can be any type, even another intersection type.</source>
          <target state="translated">Cada uno de los miembros de un tipo de intersección puede ser de cualquier tipo,incluso de otro tipo de intersección.</target>
        </trans-unit>
        <trans-unit id="9e5ead45d63220a36e13146ef22daf86e2c2fcea" translate="yes" xml:space="preserve">
          <source>Each of the members of a union type can be any type, even another union type.</source>
          <target state="translated">Cada uno de los miembros de un tipo de unión puede ser de cualquier tipo,incluso de otro tipo de unión.</target>
        </trans-unit>
        <trans-unit id="04062df0a5ebcde8394ccd8dfdb3632bb2dce1a6" translate="yes" xml:space="preserve">
          <source>Early in React&amp;rsquo;s history the library provided &lt;a href=&quot;https://facebook.github.io/react/docs/typechecking-with-proptypes.html&quot;&gt;&lt;code&gt;PropTypes&lt;/code&gt;&lt;/a&gt; which performed basic runtime checks. Flow is much more powerful as it can tell you when you are misusing a component without running your code.</source>
          <target state="translated">Al principio de la historia de React, la biblioteca proporcion&amp;oacute; &lt;a href=&quot;https://facebook.github.io/react/docs/typechecking-with-proptypes.html&quot;&gt; &lt;code&gt;PropTypes&lt;/code&gt; &lt;/a&gt; que realizaban comprobaciones b&amp;aacute;sicas de tiempo de ejecuci&amp;oacute;n. El flujo es mucho m&amp;aacute;s poderoso, ya que puede indicarle cu&amp;aacute;ndo est&amp;aacute; haciendo un mal uso de un componente sin ejecutar su c&amp;oacute;digo.</target>
        </trans-unit>
        <trans-unit id="d8fbeb27c5847478b31ce446787b9e3281657271" translate="yes" xml:space="preserve">
          <source>Editor plugins are provided and maintained by the community. If you have trouble configuring or using a specific plugin for your IDE, please visit the project&amp;rsquo;s repo or search for a community provided answer.</source>
          <target state="translated">Los complementos del editor son proporcionados y mantenidos por la comunidad. Si tiene problemas para configurar o usar un complemento espec&amp;iacute;fico para su IDE, visite el repositorio del proyecto o busque una respuesta proporcionada por la comunidad.</target>
        </trans-unit>
        <trans-unit id="ed63036d8730b34c2af3aa53fe984d9883388a1c" translate="yes" xml:space="preserve">
          <source>Editors</source>
          <target state="translated">Editors</target>
        </trans-unit>
        <trans-unit id="d89a5ec1140ce5dd978c2baf15972fdf48b8b61f" translate="yes" xml:space="preserve">
          <source>Emacs</source>
          <target state="translated">Emacs</target>
        </trans-unit>
        <trans-unit id="18413434c9e8311a9ff7f5b2aa5a03443b235c50" translate="yes" xml:space="preserve">
          <source>Enable the types-first flag</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cf46938375da84aa280715be40f3710755292d16" translate="yes" xml:space="preserve">
          <source>Enables traces on all error output (showing additional details about the flow of types through the system), to the depth specified. This can be very expensive, so is disabled by default.</source>
          <target state="translated">Permite trazar en toda la salida de errores (mostrando detalles adicionales sobre el flujo de tipos a través del sistema),hasta la profundidad especificada.Esto puede ser muy caro,por lo que está desactivado por defecto.</target>
        </trans-unit>
        <trans-unit id="f2dcc58367a1736e48cc9750d5d4e0f214c570ef" translate="yes" xml:space="preserve">
          <source>Enabling Flow Strict for a file means that several previously-allowed patterns will now trigger a Flow error. Each disallowed pattern has a corresponding &lt;a href=&quot;https://flow.org/en/linting/&quot;&gt;Flow Lint&lt;/a&gt; rule which triggers the error. The list of rules enabled for &lt;code&gt;@flow strict&lt;/code&gt; is configured in each &lt;code&gt;.flowconfig&lt;/code&gt;. Here are the recommended rules:</source>
          <target state="translated">Habilitar Flow Strict para un archivo significa que varios patrones previamente permitidos ahora activar&amp;aacute;n un error de Flow. Cada patr&amp;oacute;n no permitido tiene una regla correspondiente de &lt;a href=&quot;https://flow.org/en/linting/&quot;&gt;Flow Lint&lt;/a&gt; que desencadena el error. La lista de reglas habilitadas para &lt;code&gt;@flow strict&lt;/code&gt; se configura en cada &lt;code&gt;.flowconfig&lt;/code&gt; . Estas son las reglas recomendadas:</target>
        </trans-unit>
        <trans-unit id="9362e9d124ec7b068004f2f5d44579aee1193e70" translate="yes" xml:space="preserve">
          <source>Enabling Flow Strict in a .flowconfig</source>
          <target state="translated">Habilitar el Flujo Estricto en un .flowconfig</target>
        </trans-unit>
        <trans-unit id="9ed9c052e4c7d570739934a2603ad815a0f3ce54" translate="yes" xml:space="preserve">
          <source>Enforce the following restrictions on file exports:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0fe43e985b9f3cede92eed08e9cb385d404eea59" translate="yes" xml:space="preserve">
          <source>Enforcing that a component only gets a single child.</source>
          <target state="translated">Hacer que un componente sólo consiga un único niño.</target>
        </trans-unit>
        <trans-unit id="af6da05f12e48d3f287a21a34dc14f0f0b6d9b9d" translate="yes" xml:space="preserve">
          <source>Equally specific inputs and outputs &amp;mdash; Good</source>
          <target state="translated">Entradas y salidas igualmente espec&amp;iacute;ficas - Bueno</target>
        </trans-unit>
        <trans-unit id="af15d48df82499a8c217556a8e8763e1f598d53a" translate="yes" xml:space="preserve">
          <source>Error Suppressions</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1c01289049ee253c54bfc3dcb7ad87f71ff8dc18" translate="yes" xml:space="preserve">
          <source>Even as we treat our value as just one of the types, we do not get an error because it satisfies all of them.</source>
          <target state="translated">Aunque tratamos nuestro valor como uno de los tipos,no obtenemos un error porque satisface a todos ellos.</target>
        </trans-unit>
        <trans-unit id="fe29fc3f9fec6b884383a4b8a8698b488827777d" translate="yes" xml:space="preserve">
          <source>Even code that will cause runtime errors will not be caught by Flow:</source>
          <target state="translated">Incluso el código que causará errores en tiempo de ejecución no será capturado por Flow:</target>
        </trans-unit>
        <trans-unit id="47439ca5ded64f9ae2fef50d130387798195a012" translate="yes" xml:space="preserve">
          <source>Event Handling</source>
          <target state="translated">Manejo de eventos</target>
        </trans-unit>
        <trans-unit id="9c18bb5b6450b86bbb2ec82c62983e3decf5661e" translate="yes" xml:space="preserve">
          <source>Eventually, some features of Flow Strict could become the default behavior of Flow, if those features prove successful and achieve widespread adoption.</source>
          <target state="translated">Eventualmente,algunas características de Flow Strict podrían convertirse en el comportamiento por defecto de Flow,si esas características resultan exitosas y logran una amplia adopción.</target>
        </trans-unit>
        <trans-unit id="79794fb5666aa8f0653b4ce2e5a3fce9b026918b" translate="yes" xml:space="preserve">
          <source>Every Flow project contains a &lt;code&gt;.flowconfig&lt;/code&gt; file. You can configure Flow by modifying &lt;code&gt;.flowconfig&lt;/code&gt;. New projects or projects that are starting to use Flow can generate a default &lt;code&gt;.flowconfig&lt;/code&gt; by running &lt;code&gt;flow init&lt;/code&gt;.</source>
          <target state="translated">Cada proyecto de Flow contiene un archivo &lt;code&gt;.flowconfig&lt;/code&gt; . Puede configurar Flow modificando &lt;code&gt;.flowconfig&lt;/code&gt; . Los nuevos proyectos o proyectos que est&amp;aacute;n comenzando a usar Flow pueden generar un &lt;code&gt;.flowconfig&lt;/code&gt; predeterminado ejecutando &lt;code&gt;flow init&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="5fcb8d8758ed57d0a770a341b51dba1c53659f15" translate="yes" xml:space="preserve">
          <source>Every function in JavaScript can be called with a special context named &lt;code&gt;this&lt;/code&gt;. You can call a function with any context that you want.</source>
          <target state="translated">Cada funci&amp;oacute;n en JavaScript se puede llamar con un contexto especial llamado &lt;code&gt;this&lt;/code&gt; . Puede llamar a una funci&amp;oacute;n con cualquier contexto que desee.</target>
        </trans-unit>
        <trans-unit id="68197336316b778965bfb2950ace8adb822267f0" translate="yes" xml:space="preserve">
          <source>Exact object types</source>
          <target state="translated">Tipos de objetos exactos</target>
        </trans-unit>
        <trans-unit id="0f01ed56a1e32a05e5ef96e4d779f34784af9a96" translate="yes" xml:space="preserve">
          <source>Example</source>
          <target state="translated">Example</target>
        </trans-unit>
        <trans-unit id="dc536fab9433d34f6445a813d5f0c31792e7fa5f" translate="yes" xml:space="preserve">
          <source>Example (&lt;a href=&quot;https://flow.org/try/#0C4TwDgpgBACghgJzgWygXigbwFBSgI0QC4oB+AZ2AQEsA7AcwBpsBfbAMwFdaBjYagPa0oyEADFuPABTsBAkvCTIAlCUo0GWXFGrsoMuQDpCCZVrx4eQ8gIA2EQ7YH0pAIh4ALCDwDWEACYAhK7KANzaAJAIEMCcCMKyAsaIoVAA9GlQ7E4A7lAQCAgCCOSGUACSeiACnFBWyMgQtMBQwF511nYOTkw6LTnFPuTabHja0bHxUK7+EOxwnLYt6nT0ruEsQA&quot;&gt;https://flow.org/try&lt;/a&gt;):</source>
          <target state="translated">Ejemplo ( &lt;a href=&quot;https://flow.org/try/#0C4TwDgpgBACghgJzgWygXigbwFBSgI0QC4oB+AZ2AQEsA7AcwBpsBfbAMwFdaBjYagPa0oyEADFuPABTsBAkvCTIAlCUo0GWXFGrsoMuQDpCCZVrx4eQ8gIA2EQ7YH0pAIh4ALCDwDWEACYAhK7KANzaAJAIEMCcCMKyAsaIoVAA9GlQ7E4A7lAQCAgCCOSGUACSeiACnFBWyMgQtMBQwF511nYOTkw6LTnFPuTabHja0bHxUK7+EOxwnLYt6nT0ruEsQA&quot;&gt;https://flow.org/try&lt;/a&gt; ):</target>
        </trans-unit>
        <trans-unit id="e72839950b0f419947ce4f283294a67029092005" translate="yes" xml:space="preserve">
          <source>Example (&lt;a href=&quot;https://flow.org/try/#0MYewdgzgLgBAhgEwTAvDAFAMwJYCdoBcMYArgLYBGAprgDQwRWhgJGmU0CUqAfDDvlgBqBk3AIA3AChm0GADc4AGyLRc2MAHMYAH2LlquVDACM02bGwQAcgZrH0ipSSoAVEACUqOMFTZ2jPTUNTU4iAFJgAAsmAGsIXhgoAE8AByoQTAVlF3cvHypUFDQAcnZDEulsLPQrWw5cR2VObkQEJqV6ACZOCSA&quot;&gt;https://flow.org/try&lt;/a&gt;)</source>
          <target state="translated">Ejemplo ( &lt;a href=&quot;https://flow.org/try/#0MYewdgzgLgBAhgEwTAvDAFAMwJYCdoBcMYArgLYBGAprgDQwRWhgJGmU0CUqAfDDvlgBqBk3AIA3AChm0GADc4AGyLRc2MAHMYAH2LlquVDACM02bGwQAcgZrH0ipSSoAVEACUqOMFTZ2jPTUNTU4iAFJgAAsmAGsIXhgoAE8AByoQTAVlF3cvHypUFDQAcnZDEulsLPQrWw5cR2VObkQEJqV6ACZOCSA&quot;&gt;https://flow.org/try&lt;/a&gt; )</target>
        </trans-unit>
        <trans-unit id="894360e5088d7910eaab73bfa4ad7d6cf97c6f8c" translate="yes" xml:space="preserve">
          <source>Example (&lt;a href=&quot;https://flow.org/try/#0MYewdgzgLgBAhgEwTAvDAFAMwJYCdoBcMYArgLYBGAprgDQwRWhgJGmU0CUqAfDDvlgBqBk3AIA3AChm0GADc4AGyLRc2MAHMYAH2LlquVDACM02bGwQAcgZrH0ipSSoAVEACUqOMFTZ2jPTUNTW4UPigATwAHKhBMBWUXdy8fKlQUNABydkMs6WwE9CtbDlxHZU5uRAQKpXoAJk4JIA&quot;&gt;https://flow.org/try&lt;/a&gt;)</source>
          <target state="translated">Ejemplo ( &lt;a href=&quot;https://flow.org/try/#0MYewdgzgLgBAhgEwTAvDAFAMwJYCdoBcMYArgLYBGAprgDQwRWhgJGmU0CUqAfDDvlgBqBk3AIA3AChm0GADc4AGyLRc2MAHMYAH2LlquVDACM02bGwQAcgZrH0ipSSoAVEACUqOMFTZ2jPTUNTW4UPigATwAHKhBMBWUXdy8fKlQUNABydkMs6WwE9CtbDlxHZU5uRAQKpXoAJk4JIA&quot;&gt;https://flow.org/try&lt;/a&gt; )</target>
        </trans-unit>
        <trans-unit id="d65710bb9e0679950b0a2fa1e6f5d7c468d7acd2" translate="yes" xml:space="preserve">
          <source>Example (&lt;a href=&quot;https://flow.org/try/#0PTAEAEDMBsHsHcBQAXAngBwKagAqYE4DOsAdqALygDeAhgOaYBcoA-CQK4C2ARgQL6IAxqULJQWWOmjZKAbVoNmARgBMfADTV6TUEoAcGrYtAqALHwC6AbiEixsaABM8RUsxfEylBToDsABj4bAEtIUAAKB2cCTwA6bQBKakRQUGESUVBtClAoj1J4hhtUiSlMWMhYfABRGkEAC3CsVy8APmTU1PTiaVi4OnCAAwAVeuxmz1BgwlAAEioJgu0+LJJHUGQx3KdckmxpuZ8+QYTi0D4ExD4gA&quot;&gt;https://flow.org/try&lt;/a&gt;):</source>
          <target state="translated">Ejemplo ( &lt;a href=&quot;https://flow.org/try/#0PTAEAEDMBsHsHcBQAXAngBwKagAqYE4DOsAdqALygDeAhgOaYBcoA-CQK4C2ARgQL6IAxqULJQWWOmjZKAbVoNmARgBMfADTV6TUEoAcGrYtAqALHwC6AbiEixsaABM8RUsxfEylBToDsABj4bAEtIUAAKB2cCTwA6bQBKakRQUGESUVBtClAoj1J4hhtUiSlMWMhYfABRGkEAC3CsVy8APmTU1PTiaVi4OnCAAwAVeuxmz1BgwlAAEioJgu0+LJJHUGQx3KdckmxpuZ8+QYTi0D4ExD4gA&quot;&gt;https://flow.org/try&lt;/a&gt; ):</target>
        </trans-unit>
        <trans-unit id="80f15d97ffae3b57327c19c2c3876da3f190b457" translate="yes" xml:space="preserve">
          <source>Example (&lt;a href=&quot;https://flow.org/try/#0PTAEAEDMBsHsHcBQAXAngBwKagAqYE4DOsAdqALygDeAhgOaYBcoA-CQK4C2ARgQL6IAxqULJQWWOmjZKAbVoNmARgBMfADTV6TUEoAcGrYtAqALHwC6AbiEixsaABM8RUsxfEylBToDsABj4bAEtIUAAKB2cCTwA6bQBKakRQcUxJaVjIWHwAURpBAAtwrFcvAD5k1NThEmJMuDpwgAMAFULsUs9QYMJQABIqLtJ4hj5QGhJHUGQO0Cj5kmxegaoojxHtPmaEm1S+BMQ+IA&quot;&gt;https://flow.org/try&lt;/a&gt;):</source>
          <target state="translated">Ejemplo ( &lt;a href=&quot;https://flow.org/try/#0PTAEAEDMBsHsHcBQAXAngBwKagAqYE4DOsAdqALygDeAhgOaYBcoA-CQK4C2ARgQL6IAxqULJQWWOmjZKAbVoNmARgBMfADTV6TUEoAcGrYtAqALHwC6AbiEixsaABM8RUsxfEylBToDsABj4bAEtIUAAKB2cCTwA6bQBKakRQcUxJaVjIWHwAURpBAAtwrFcvAD5k1NThEmJMuDpwgAMAFULsUs9QYMJQABIqLtJ4hj5QGhJHUGQO0Cj5kmxegaoojxHtPmaEm1S+BMQ+IA&quot;&gt;https://flow.org/try&lt;/a&gt; ):</target>
        </trans-unit>
        <trans-unit id="322dc85522b6f01f651a645f66ddad7a2d200735" translate="yes" xml:space="preserve">
          <source>Example (&lt;a href=&quot;https://flow.org/try/#0PTAEAEDMBsHsHcBQAXAngBwKagEqYM7qwB2+2AvKIqKAD6gDeoaWAXKAOT4CuAxrwXwcANKABuAQ2jdM7fMgBOAS2IBzUAF9qdRswyzOmBQtgKRoIyYXsAosdOaA3IkS8S80AAsJxACbRMPEJ3ClAACgUCIlIDIOiyAEpQcgA+Rm0lSHDI4JiAOhYKckouPgF8ISSGbRo3UmRxKRlk0Bz4zDzJaUwa0DJkABUlAFtMWG5kMLCk1PSaedA6-FgAvLhVMIADABIGLpkNUABGTYTejVEjgAYbhOcaLQ1HIA&quot;&gt;https://flow.org/try&lt;/a&gt;):</source>
          <target state="translated">Ejemplo ( &lt;a href=&quot;https://flow.org/try/#0PTAEAEDMBsHsHcBQAXAngBwKagEqYM7qwB2+2AvKIqKAD6gDeoaWAXKAOT4CuAxrwXwcANKABuAQ2jdM7fMgBOAS2IBzUAF9qdRswyzOmBQtgKRoIyYXsAosdOaA3IkS8S80AAsJxACbRMPEJ3ClAACgUCIlIDIOiyAEpQcgA+Rm0lSHDI4JiAOhYKckouPgF8ISSGbRo3UmRxKRlk0Bz4zDzJaUwa0DJkABUlAFtMWG5kMLCk1PSaedA6-FgAvLhVMIADABIGLpkNUABGTYTejVEjgAYbhOcaLQ1HIA&quot;&gt;https://flow.org/try&lt;/a&gt; ):</target>
        </trans-unit>
        <trans-unit id="d33740834b3eef6ebff52fd563f9384fd43212e0" translate="yes" xml:space="preserve">
          <source>Example (&lt;a href=&quot;https://flow.org/try/#0PTAEAEDMBsHsHcBQAXAngBwKagEqYM7qwB2+2AvKIqKAD6gDeoaWAXKAOT4CuAxrwXwcANKABuAQ2jdM7fMgBOAS2IBzUAF9qdRswyzOmBQtgKRoIyYXsAosdOaA3IkS8S80AAsJxACbRMPEJ3ClAACgUCIlIDIOiyAEpQcgA+Rm0lSHDI4JiAOhYKckouPgF8ISSGbRoyZAAVJQBbTFhuZDCwpNT0mj7QN1JYALy4VTCAAwASBhz4zDzJaUwNUABGCYSazVE1gAYDhOcaLQ1HIA&quot;&gt;https://flow.org/try&lt;/a&gt;):</source>
          <target state="translated">Ejemplo ( &lt;a href=&quot;https://flow.org/try/#0PTAEAEDMBsHsHcBQAXAngBwKagEqYM7qwB2+2AvKIqKAD6gDeoaWAXKAOT4CuAxrwXwcANKABuAQ2jdM7fMgBOAS2IBzUAF9qdRswyzOmBQtgKRoIyYXsAosdOaA3IkS8S80AAsJxACbRMPEJ3ClAACgUCIlIDIOiyAEpQcgA+Rm0lSHDI4JiAOhYKckouPgF8ISSGbRoyZAAVJQBbTFhuZDCwpNT0mj7QN1JYALy4VTCAAwASBhz4zDzJaUwNUABGCYSazVE1gAYDhOcaLQ1HIA&quot;&gt;https://flow.org/try&lt;/a&gt; ):</target>
        </trans-unit>
        <trans-unit id="17498ea196f44dae076810df274fc7a54473ddb1" translate="yes" xml:space="preserve">
          <source>Example (&lt;a href=&quot;https://flow.org/try/#0PTAEAEDMBsHsHcBQBTAHgB1gJwC6gMawB2AzngIYAmloAvKABTkBcoRArgLYBGyWAlHQB8ocqADUoAIwBuIA&quot;&gt;https://flow.org/try&lt;/a&gt;):</source>
          <target state="translated">Ejemplo ( &lt;a href=&quot;https://flow.org/try/#0PTAEAEDMBsHsHcBQBTAHgB1gJwC6gMawB2AzngIYAmloAvKABTkBcoRArgLYBGyWAlHQB8ocqADUoAIwBuIA&quot;&gt;https://flow.org/try&lt;/a&gt; ):</target>
        </trans-unit>
        <trans-unit id="190c678983df25c000784ac0118a1c78a00727f4" translate="yes" xml:space="preserve">
          <source>Example (&lt;a href=&quot;https://flow.org/try/#0PTAEAEDMBsHsHcBQiSgOoEsAuALWBXLUAJwFMBDAE1gDtoBPALmQGNaBnIyGgRlAF5QAClgAjAFaNQAbwA+oclM7EMNAOahZAApr4AtqNLEtsgL4BKAQD4ZiAJCox4gHTkBoHgCYAzKBAA5AHkAFQBRAEIZbUVQZVUNM1AAB3J2dlJKUFUFGkzySCwjUFwMdiyieAJoTMNQXQMijEgFaDh4DPsyLHxiGlAnAG5EU1YOIidSFiweKTktGLj1TVN3aRiAcmV10FMhlDBuHhEJSenzAb8wAB4AWjvQfBo2PT1SGiJsyFhiUCNib-Y4XCyFQdzB4IhkKh0JhILAACUKNQ6PQbgA3IzsDC0ZiINg0TigbiedzHSRRUAAagWWBUS209UMPzMln4NmkiFAoAcYCcrncXl8ARCEVAAGVVCxSKB6AQFGQHlilmw0eQVOR3lEtNSlLT4podPomcsADQyuUsDXrIh6QjkQrlTqkbq9foSIYjPFjN3iU6eWbyGl0hIrQTSBRSTa07a7ZDEsl+85AA&quot;&gt;https://flow.org/try&lt;/a&gt;)</source>
          <target state="translated">Ejemplo ( &lt;a href=&quot;https://flow.org/try/#0PTAEAEDMBsHsHcBQiSgOoEsAuALWBXLUAJwFMBDAE1gDtoBPALmQGNaBnIyGgRlAF5QAClgAjAFaNQAbwA+oclM7EMNAOahZAApr4AtqNLEtsgL4BKAQD4ZiAJCox4gHTkBoHgCYAzKBAA5AHkAFQBRAEIZbUVQZVUNM1AAB3J2dlJKUFUFGkzySCwjUFwMdiyieAJoTMNQXQMijEgFaDh4DPsyLHxiGlAnAG5EU1YOIidSFiweKTktGLj1TVN3aRiAcmV10FMhlDBuHhEJSenzAb8wAB4AWjvQfBo2PT1SGiJsyFhiUCNib-Y4XCyFQdzB4IhkKh0JhILAACUKNQ6PQbgA3IzsDC0ZiINg0TigbiedzHSRRUAAagWWBUS209UMPzMln4NmkiFAoAcYCcrncXl8ARCEVAAGVVCxSKB6AQFGQHlilmw0eQVOR3lEtNSlLT4podPomcsADQyuUsDXrIh6QjkQrlTqkbq9foSIYjPFjN3iU6eWbyGl0hIrQTSBRSTa07a7ZDEsl+85AA&quot;&gt;https://flow.org/try&lt;/a&gt; )</target>
        </trans-unit>
        <trans-unit id="f3309c09c3ccaba2a2970b1e441c41e351e404c8" translate="yes" xml:space="preserve">
          <source>Example (&lt;a href=&quot;https://flow.org/try/#0PTAEAEDMBsHsHcBQiSgOoEsAuALWBXLUAJwFMBDAE1gDtoBPALmQGNaBnIyGgRlAF5QACnLFijUAEEx5egB5OxDDQDmoAD4ACmvgC2AI1LEAfAEoBx0AG9EASFSjiAOgAO+djiE8ATAGZzqAByAPIAKgCiAIRSMvKKyiqWLuTs7KSUoMqg5DQZ5JBYRqC4GOyZRPAE0HnQ7LCZNCzQ+JSkoDoGRmUYkNnQcPDpdmRY+MQ02WIA3IgAvqwcRI48EtLEsgpYSqqWggDaAOTk+iwHALozKGDcPCJiplOgqHIAtG+g+I2wurqkNFywYigIzEQHsSKRZCoN4w2Fw+EIxFIqFgABKFGodHoLwAbl0MLRmIg2DROKBuN4BMJHBIACToqjBLFrDbxVQabR6Qwmcz8Sw2UCCp5gRyudyeXzeHgBMAhCLRADKyhYbXoBEmbXcCVA9IxTIYLPkTmNljV+FALByNFgRDcHmyNHoJXZWHq2GGpFG40mxDmC1JSzE3lWsU220SVMOx1OF2QFLuxG8DyAA&quot;&gt;https://flow.org/try&lt;/a&gt;)</source>
          <target state="translated">Ejemplo ( &lt;a href=&quot;https://flow.org/try/#0PTAEAEDMBsHsHcBQiSgOoEsAuALWBXLUAJwFMBDAE1gDtoBPALmQGNaBnIyGgRlAF5QACnLFijUAEEx5egB5OxDDQDmoAD4ACmvgC2AI1LEAfAEoBx0AG9EASFSjiAOgAO+djiE8ATAGZzqAByAPIAKgCiAIRSMvKKyiqWLuTs7KSUoMqg5DQZ5JBYRqC4GOyZRPAE0HnQ7LCZNCzQ+JSkoDoGRmUYkNnQcPDpdmRY+MQ02WIA3IgAvqwcRI48EtLEsgpYSqqWggDaAOTk+iwHALozKGDcPCJiplOgqHIAtG+g+I2wurqkNFywYigIzEQHsSKRZCoN4w2Fw+EIxFIqFgABKFGodHoLwAbl0MLRmIg2DROKBuN4BMJHBIACToqjBLFrDbxVQabR6Qwmcz8Sw2UCCp5gRyudyeXzeHgBMAhCLRADKyhYbXoBEmbXcCVA9IxTIYLPkTmNljV+FALByNFgRDcHmyNHoJXZWHq2GGpFG40mxDmC1JSzE3lWsU220SVMOx1OF2QFLuxG8DyAA&quot;&gt;https://flow.org/try&lt;/a&gt; )</target>
        </trans-unit>
        <trans-unit id="5a53b2289397b07076fab02c5763eb1c53631c66" translate="yes" xml:space="preserve">
          <source>Example with custom project root:</source>
          <target state="translated">Ejemplo con la raíz del proyecto personalizado:</target>
        </trans-unit>
        <trans-unit id="54a8d51fcba191895dda4ed409e712e9d6ebfc4d" translate="yes" xml:space="preserve">
          <source>Exclusions</source>
          <target state="translated">Exclusions</target>
        </trans-unit>
        <trans-unit id="8be9eff630c8880ea37c3c71e5c9f1754569ead1" translate="yes" xml:space="preserve">
          <source>Existential Type (&lt;code&gt;*&lt;/code&gt;)</source>
          <target state="translated">Tipo existencial ( &lt;code&gt;*&lt;/code&gt; )</target>
        </trans-unit>
        <trans-unit id="27232a9afb263ba7bb3f411dab25557c71bf54f0" translate="yes" xml:space="preserve">
          <source>Explicit inexact object types</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7b6e2ec966477f28252b7545083426821a4c2c4e" translate="yes" xml:space="preserve">
          <source>Explicit versions, (e.g. &lt;code&gt;0.22.0&lt;/code&gt;, which only matches &lt;code&gt;0.22.0&lt;/code&gt;).</source>
          <target state="translated">Versiones expl&amp;iacute;citas (por ejemplo , &lt;code&gt;0.22.0&lt;/code&gt; , que solo coincide con &lt;code&gt;0.22.0&lt;/code&gt; ).</target>
        </trans-unit>
        <trans-unit id="0d1b1cfc3426a1aeead7f0481461e0798797d77f" translate="yes" xml:space="preserve">
          <source>Exported variables with updates</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2e0e14ad5753e9c7b526a0cc660e1f093709bbc2" translate="yes" xml:space="preserve">
          <source>Exporting Wrapped Components</source>
          <target state="translated">Exportación de componentes envueltos</target>
        </trans-unit>
        <trans-unit id="03688ba6aa340b87549088aa5739944cb6b1dc73" translate="yes" xml:space="preserve">
          <source>FAQ</source>
          <target state="translated">FAQ</target>
        </trans-unit>
        <trans-unit id="fc338f87a058158eb824b53705961801516a9460" translate="yes" xml:space="preserve">
          <source>Features</source>
          <target state="translated">Features</target>
        </trans-unit>
        <trans-unit id="2113c9e9296853fb527db9a13ccff3f1ceb1a1d8" translate="yes" xml:space="preserve">
          <source>Fields added outside of the class definition need to be annotated within the body of the class.</source>
          <target state="translated">Los campos añadidos fuera de la definición de la clase deben ser anotados dentro del cuerpo de la clase.</target>
        </trans-unit>
        <trans-unit id="4a066fa7f532f77d0e18961512951af8ba154e40" translate="yes" xml:space="preserve">
          <source>Fields are annotated within the body of the class with the field name followed by a colon &lt;code&gt;:&lt;/code&gt; and the type.</source>
          <target state="translated">Los campos se anotan dentro del cuerpo de la clase con el nombre del campo seguido de dos puntos &lt;code&gt;:&lt;/code&gt; y el tipo.</target>
        </trans-unit>
        <trans-unit id="64f266c0fe1d54849f0f9ed285666ffc97ff5171" translate="yes" xml:space="preserve">
          <source>Figuring out types statically</source>
          <target state="translated">La determinación de los tipos de forma estática</target>
        </trans-unit>
        <trans-unit id="b75c4143f664110887e504459b7318a3896d8b7b" translate="yes" xml:space="preserve">
          <source>File formatting may be affected. If a code formatter (e.g. prettier) is used, it is recommended that you run it after the codemod has finished running.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0557e668f5971d3d38db5cb9a5d6d44ed976bbc3" translate="yes" xml:space="preserve">
          <source>Finally, as an example of dead code, consider the code</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4530df8ca3479183e9a0b8b7820de3c8dd0aa307" translate="yes" xml:space="preserve">
          <source>Finally, if we had a &lt;code&gt;TypeA&lt;/code&gt; which described the numbers 1 through 3, and a &lt;code&gt;TypeB&lt;/code&gt; which described the numbers 3 through 5. Neither of them would be a subtype of the other. Even though they both have 3 and describe numbers, they each have some unique items.</source>
          <target state="translated">Finalmente, si tuvi&amp;eacute;ramos un &lt;code&gt;TypeA&lt;/code&gt; que describiera los n&amp;uacute;meros del 1 al 3, y un &lt;code&gt;TypeB&lt;/code&gt; que describiera los n&amp;uacute;meros del 3 al 5. Ninguno de ellos ser&amp;iacute;a un subtipo del otro. Aunque ambos tienen 3 y describen n&amp;uacute;meros, cada uno tiene algunos elementos &amp;uacute;nicos.</target>
        </trans-unit>
        <trans-unit id="0087380702d2e1d3b16fa67500a178f79cae05f8" translate="yes" xml:space="preserve">
          <source>Finally, precision enables useful developer tools to be built. In particular, the quality of results reported by Flow when the developer asks for the type of an expression, the definition reaching a reference, or the set of possible completions at a point through an IDE is correlated with the precision of Flow&amp;rsquo;s analysis.</source>
          <target state="translated">Por &amp;uacute;ltimo, la precisi&amp;oacute;n permite crear herramientas de desarrollo &amp;uacute;tiles. En particular, la calidad de los resultados reportados por Flow cuando el desarrollador pregunta por el tipo de expresi&amp;oacute;n, la definici&amp;oacute;n que llega a una referencia o el conjunto de posibles terminaciones en un punto a trav&amp;eacute;s de un IDE se correlaciona con la precisi&amp;oacute;n del an&amp;aacute;lisis de Flow.</target>
        </trans-unit>
        <trans-unit id="07c5cf005d2302c6d3946a6acb658df51d720297" translate="yes" xml:space="preserve">
          <source>Finally, we&amp;rsquo;ll have yet another &lt;code&gt;SubClass&lt;/code&gt; that accepts a value of a more specific type.</source>
          <target state="translated">Finalmente, tendremos otra &lt;code&gt;SubClass&lt;/code&gt; que acepta un valor de un tipo m&amp;aacute;s espec&amp;iacute;fico.</target>
        </trans-unit>
        <trans-unit id="dac3b0962e00de97e4f2ee26698e83fa3a80f1ef" translate="yes" xml:space="preserve">
          <source>First install &lt;code&gt;flow-remove-types&lt;/code&gt; with either &lt;a href=&quot;https://yarnpkg.com/&quot;&gt;Yarn&lt;/a&gt; or &lt;a href=&quot;https://www.npmjs.com/&quot;&gt;npm&lt;/a&gt;.</source>
          <target state="translated">Primero instale &lt;code&gt;flow-remove-types&lt;/code&gt; con &lt;a href=&quot;https://yarnpkg.com/&quot;&gt;Yarn&lt;/a&gt; o &lt;a href=&quot;https://www.npmjs.com/&quot;&gt;npm&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="cd2eea5de09d8e90691b2d177dd08996669f26aa" translate="yes" xml:space="preserve">
          <source>First we&amp;rsquo;ll setup a couple of classes that extend one another.</source>
          <target state="translated">Primero configuraremos un par de clases que se extienden entre s&amp;iacute;.</target>
        </trans-unit>
        <trans-unit id="456cf8a255eb59ebf894cb52911a86af4e0bff54" translate="yes" xml:space="preserve">
          <source>Fixed example:</source>
          <target state="translated">Ejemplo fijo:</target>
        </trans-unit>
        <trans-unit id="86eff8eb789b097ddca83f2c9c4617ed23605105" translate="yes" xml:space="preserve">
          <source>Flow</source>
          <target state="translated">Flow</target>
        </trans-unit>
        <trans-unit id="5f486e379bef52ad99c92a90171eb0881d4b0d3f" translate="yes" xml:space="preserve">
          <source>Flow + Redux resources</source>
          <target state="translated">Flujo+Reduxo de recursos</target>
        </trans-unit>
        <trans-unit id="74197676c9d2f901101c99ae4a832858c78a8a79" translate="yes" xml:space="preserve">
          <source>Flow Annotate-Exports</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="55ec9aab6133cd88e4cf42e5ab878820aef8afea" translate="yes" xml:space="preserve">
          <source>Flow CLI</source>
          <target state="translated">Flujo CLI</target>
        </trans-unit>
        <trans-unit id="70cafe67a0b81a72bfb02522a7ce20d25e31a1e8" translate="yes" xml:space="preserve">
          <source>Flow Coverage</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8b609ab9406ce02a4ce30abc841ff2dba941e173" translate="yes" xml:space="preserve">
          <source>Flow For Sublime Text 2 and 3</source>
          <target state="translated">Flujo para el texto sublime 2 y 3</target>
        </trans-unit>
        <trans-unit id="aa235a6660a8f1b9aa16724f3a8222516b8f655e" translate="yes" xml:space="preserve">
          <source>Flow Strict</source>
          <target state="translated">Estricto flujo</target>
        </trans-unit>
        <trans-unit id="f2ec6e6dfc95e327edb4e1795150f27d42969c4f" translate="yes" xml:space="preserve">
          <source>Flow Strict is configured in each &lt;code&gt;.flowconfig&lt;/code&gt;. To enable:</source>
          <target state="translated">Flow Strict se configura en cada &lt;code&gt;.flowconfig&lt;/code&gt; . Para permitir:</target>
        </trans-unit>
        <trans-unit id="6e27552186835c23a7b0bda80c42f6ffde67c69a" translate="yes" xml:space="preserve">
          <source>Flow achieves this behavior by matching the type of the argument to the &lt;em&gt;first&lt;/em&gt; overload with a compatible parameter type. Notice for example that the argument &lt;code&gt;&quot;string&quot;&lt;/code&gt; matches both the first and the last overload. Flow will just pick the first one. If no overload matches, Flow will raise an error at the call site.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="24a780c943329a85dac0d76d4a2a52117d272d40" translate="yes" xml:space="preserve">
          <source>Flow allows the code</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8095395f626e2f4759824d2de551bb30bbe955c2" translate="yes" xml:space="preserve">
          <source>Flow also supports importing the type of values exported by other modules using &lt;a href=&quot;../typeof&quot;&gt;&lt;code&gt;typeof&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">Flow tambi&amp;eacute;n admite la importaci&amp;oacute;n del tipo de valores exportados por otros m&amp;oacute;dulos utilizando &lt;a href=&quot;../typeof&quot;&gt; &lt;code&gt;typeof&lt;/code&gt; &lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="b5565b1d0068dc56bcf908f48c68d08d32bae353" translate="yes" xml:space="preserve">
          <source>Flow also supports using the &lt;a href=&quot;https://tc39.github.io/proposal-class-public-fields/&quot;&gt;class properties syntax&lt;/a&gt;.</source>
          <target state="translated">Flow tambi&amp;eacute;n admite el uso de la &lt;a href=&quot;https://tc39.github.io/proposal-class-public-fields/&quot;&gt;sintaxis de propiedades de&lt;/a&gt; la clase .</target>
        </trans-unit>
        <trans-unit id="e84982c22a83ff1714857618c803fc295ca0cb49" translate="yes" xml:space="preserve">
          <source>Flow and &lt;a href=&quot;http://babeljs.io/&quot;&gt;Babel&lt;/a&gt; are designed to work great together. It takes just a few steps to set them up together.</source>
          <target state="translated">Flow y &lt;a href=&quot;http://babeljs.io/&quot;&gt;Babel&lt;/a&gt; est&amp;aacute;n dise&amp;ntilde;ados para funcionar muy bien juntos. Solo se necesitan unos pocos pasos para configurarlos juntos.</target>
        </trans-unit>
        <trans-unit id="6b65b025f0f722e53bb99b3444cfbb9d5afbce3c" translate="yes" xml:space="preserve">
          <source>Flow and &lt;a href=&quot;https://babeljs.io/&quot;&gt;Babel&lt;/a&gt; are designed to work great together. It takes just a few steps to set them up together.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5ccb8cfec36d4d1243e598e54059dcef046eb1fd" translate="yes" xml:space="preserve">
          <source>Flow and Babel work well together, so it doesn&amp;rsquo;t take much to adopt Flow as a React user who already uses Babel. If you need to setup Babel with Flow, you can follow &lt;a href=&quot;https://flow.org/en/tools/babel/&quot;&gt;this guide&lt;/a&gt;.</source>
          <target state="translated">Flow y Babel funcionan bien juntos, por lo que no se necesita mucho para adoptar Flow como un usuario de React que ya usa Babel. Si necesita configurar Babel con Flow, puede seguir &lt;a href=&quot;https://flow.org/en/tools/babel/&quot;&gt;esta gu&amp;iacute;a&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="e7ddc3f598f9d4eaea63e1a3d210b131b6a5bf65" translate="yes" xml:space="preserve">
          <source>Flow builds intermediate artifacts to represent signatures of modules as they are checked. If this option is set to &lt;code&gt;false&lt;/code&gt;, then these artifacts are built using inferred type information. If this option is set to &lt;code&gt;true&lt;/code&gt;, then they are built using type annotations at module boundaries.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="12bd6e3068284e323e6e5441c7cbe62cfa2eaa15" translate="yes" xml:space="preserve">
          <source>Flow can either infer the type from the value you are assigning to it or you can provide it with a type.</source>
          <target state="translated">El flujo puede inferir el tipo a partir del valor que le asigna o puede proporcionarle un tipo.</target>
        </trans-unit>
        <trans-unit id="72ce261a07a9b54acdbe6ade8c25b4096bc1b01e" translate="yes" xml:space="preserve">
          <source>Flow can handle both CommonJS and ES modules, but there are some relevant differences between the two that need to be considered when using &lt;code&gt;declare module&lt;/code&gt;.</source>
          <target state="translated">Flow puede manejar m&amp;oacute;dulos CommonJS y ES, pero existen algunas diferencias relevantes entre los dos que deben tenerse en cuenta al usar el &lt;code&gt;declare module&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="c4fd2a75a67392ac133c52fa3dfe6c46849561bc" translate="yes" xml:space="preserve">
          <source>Flow can infer the type of object literals in two different ways depending on how they are used.</source>
          <target state="translated">El flujo puede inferir el tipo de literales de los objetos de dos maneras diferentes dependiendo de cómo se utilicen.</target>
        </trans-unit>
        <trans-unit id="98d85338f7ba2bc3651bb2436f50fc5aeb15f4f6" translate="yes" xml:space="preserve">
          <source>Flow can typecheck your React components that use the &lt;a href=&quot;https://reactjs.org/docs/context.html&quot;&gt;context API&lt;/a&gt; introduced in React 16.3.</source>
          <target state="translated">Flow puede verificar los componentes de React que usan la &lt;a href=&quot;https://reactjs.org/docs/context.html&quot;&gt;API de contexto&lt;/a&gt; introducida en React 16.3.</target>
        </trans-unit>
        <trans-unit id="6944ed8c8b4918d2dec469bbf6c3dc20723ec0d8" translate="yes" xml:space="preserve">
          <source>Flow cannot understand the types of my higher order React component, how can I help it?</source>
          <target state="translated">El flujo no puede entender los tipos de mi componente de Reacción de orden superior,¿cómo puedo evitarlo?</target>
        </trans-unit>
        <trans-unit id="ae13ec4a82b2b35e6040c52f0a97a5c7e2a10cb5" translate="yes" xml:space="preserve">
          <source>Flow checks codebases by processing each file separately in dependency order. After a file has been checked, a signature is extracted and stored in main memory, to be used for files that depend on it. Currently, the default mode (we&amp;rsquo;ll also refer to it as &lt;em&gt;classic&lt;/em&gt; mode) builds these signatures by using the types inferred for the file&amp;rsquo;s exports. In the new &lt;em&gt;types-first&lt;/em&gt; architecture, Flow relies on annotations available at the boundaries of files to build these signatures.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="183d1f29f5ed63eb14ac2b0f3910cf9d83903afb" translate="yes" xml:space="preserve">
          <source>Flow checks your code for errors through &lt;strong&gt;static type annotations&lt;/strong&gt;. These &lt;em&gt;types&lt;/em&gt; allow you to tell Flow how you want your code to work, and Flow will make sure it does work that way.</source>
          <target state="translated">Flow comprueba su c&amp;oacute;digo en busca de errores mediante &lt;strong&gt;anotaciones de tipo est&amp;aacute;tico&lt;/strong&gt; . Estos &lt;em&gt;tipos le&lt;/em&gt; permiten decirle a Flow c&amp;oacute;mo desea que funcione su c&amp;oacute;digo, y Flow se asegurar&amp;aacute; de que funcione de esa manera.</target>
        </trans-unit>
        <trans-unit id="04032a68a1402eaf71bab9646202a4ad15b6268c" translate="yes" xml:space="preserve">
          <source>Flow chooses what is natural for JavaScript, and should behave the way you expect it to.</source>
          <target state="translated">Flow elige lo que es natural para el JavaScript,y debe comportarse de la manera que usted espera.</target>
        </trans-unit>
        <trans-unit id="032ca5c444d8fb1a1677e49ec7f5f65de9cb839b" translate="yes" xml:space="preserve">
          <source>Flow contains a linting framework that can tell you about more than just type errors. This framework is highly configurable in order to show you the information you want and hide the information you don&amp;rsquo;t.</source>
          <target state="translated">Flow contiene un marco de trabajo que puede informarle sobre m&amp;aacute;s que solo errores de tipo. Este marco es altamente configurable para mostrarle la informaci&amp;oacute;n que desea y ocultar la informaci&amp;oacute;n que no desea.</target>
        </trans-unit>
        <trans-unit id="8a9a662da9d9494227dfb8c32f7a3a00aa8eb74d" translate="yes" xml:space="preserve">
          <source>Flow does all sorts of type inference on your code so that you don&amp;rsquo;t have to type annotate anything. Generally, inference avoids getting in your way while still preventing you from introducing bugs.</source>
          <target state="translated">Flow hace todo tipo de inferencias de tipo en su c&amp;oacute;digo para que no tenga que escribir anotar nada. Generalmente, la inferencia evita interponerse en su camino y al mismo tiempo evita que introduzca errores.</target>
        </trans-unit>
        <trans-unit id="c4a7493c100b0d7186e5d7a811ec01b5c49ff79d" translate="yes" xml:space="preserve">
          <source>Flow does not do this because it would be extremely inconvenient to use. You would be forced to refine the type of every value you get when accessing an array.</source>
          <target state="translated">El flujo no hace esto porque sería extremadamente inconveniente de usar.Se vería obligado a refinar el tipo de cada valor que obtiene al acceder a una matriz.</target>
        </trans-unit>
        <trans-unit id="25bf8feebd194c6ea5f28b8c0c675bd8e2749e24" translate="yes" xml:space="preserve">
          <source>Flow does not keep track of side effects, so any function call may potentially nullify your check. This is called &lt;a href=&quot;lang/refinements#toc-refinement-invalidations&quot;&gt;refinement invalidation&lt;/a&gt;.</source>
          <target state="translated">Flow no realiza un seguimiento de los efectos secundarios, por lo que cualquier llamada a funci&amp;oacute;n puede anular potencialmente su cheque. Esto se denomina &lt;a href=&quot;lang/refinements#toc-refinement-invalidations&quot;&gt;invalidaci&amp;oacute;n de refinamiento&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="f3f46e4e936a3e8537064c3745c26d7fd98211da" translate="yes" xml:space="preserve">
          <source>Flow doesn&amp;rsquo;t track refinements made in separated function calls.</source>
          <target state="translated">Flow no rastrea los refinamientos realizados en llamadas de funci&amp;oacute;n separadas.</target>
        </trans-unit>
        <trans-unit id="59a4ef57b455273cbb11be7412569d3ac42e4710" translate="yes" xml:space="preserve">
          <source>Flow for Atom IDE</source>
          <target state="translated">Flujo para el IDE del átomo</target>
        </trans-unit>
        <trans-unit id="44fdaae0716bb1f8df6934754643b2d31169e8f0" translate="yes" xml:space="preserve">
          <source>Flow has &lt;a href=&quot;../primitives&quot;&gt;primitive types&lt;/a&gt; for literal values, but can also use literal values as types.</source>
          <target state="translated">Flow tiene &lt;a href=&quot;../primitives&quot;&gt;tipos primitivos&lt;/a&gt; para valores literales, pero tambi&amp;eacute;n puede usar valores literales como tipos.</target>
        </trans-unit>
        <trans-unit id="46a176a435a62da90c46dd0328bea203b7bb04be" translate="yes" xml:space="preserve">
          <source>Flow has a powerful ability to infer the types of your programs. The majority of your code can rely on it. Still, there are places where you&amp;rsquo;ll want to add types.</source>
          <target state="translated">Flow tiene una poderosa capacidad para inferir los tipos de sus programas. La mayor parte de su c&amp;oacute;digo puede confiar en &amp;eacute;l. A&amp;uacute;n as&amp;iacute;, hay lugares en los que querr&amp;aacute; agregar tipos.</target>
        </trans-unit>
        <trans-unit id="91780aa64a146a3b1363ded13b2a26ff2a5703d2" translate="yes" xml:space="preserve">
          <source>Flow has builtin library definitions. Setting this to &lt;code&gt;true&lt;/code&gt; will tell Flow to ignore the builtin library definitions.</source>
          <target state="translated">Flow tiene definiciones de biblioteca integradas. Establecer esto en &lt;code&gt;true&lt;/code&gt; le dir&amp;aacute; a Flow que ignore las definiciones de la biblioteca incorporada.</target>
        </trans-unit>
        <trans-unit id="825a2af8b1f4018e85d11b13cda08105f2561dfc" translate="yes" xml:space="preserve">
          <source>Flow has worked with Nuclide directly on adding support for the new warning severity level. Certain features are likely to be in other editors, but others might not yet be implemented.</source>
          <target state="translated">Flow ha trabajado con Nuclide directamente en la adición de apoyo para el nuevo nivel de gravedad de la advertencia.Es probable que algunas características estén en otros editores,pero otras podrían no estar aún implementadas.</target>
        </trans-unit>
        <trans-unit id="1f749e30856c0772a3eb06d3b18fcad17982d0c5" translate="yes" xml:space="preserve">
          <source>Flow is a static type checker for JavaScript that we built at Facebook. The overall mission of Flow is to deliver an immersive coding experience for JavaScript developers&amp;mdash;a fast edit-refresh cycle&amp;mdash;even as the codebase evolves and grows. In engineering terms, we identify two concrete goals that are important to this mission: &lt;em&gt;precision&lt;/em&gt; and &lt;em&gt;speed&lt;/em&gt;. These goals pervasively drive the design and implementation.</source>
          <target state="translated">Flow es un verificador de tipo est&amp;aacute;tico para JavaScript que creamos en Facebook. La misi&amp;oacute;n general de Flow es brindar una experiencia de codificaci&amp;oacute;n inmersiva para los desarrolladores de JavaScript (un ciclo r&amp;aacute;pido de edici&amp;oacute;n y actualizaci&amp;oacute;n) incluso a medida que la base de c&amp;oacute;digo evoluciona y crece. En t&amp;eacute;rminos de ingenier&amp;iacute;a, identificamos dos objetivos concretos que son importantes para esta misi&amp;oacute;n: &lt;em&gt;precisi&amp;oacute;n&lt;/em&gt; y &lt;em&gt;velocidad&lt;/em&gt; . Estos objetivos impulsan de manera generalizada el dise&amp;ntilde;o y la implementaci&amp;oacute;n.</target>
        </trans-unit>
        <trans-unit id="e37ba63533b865ecc3dbf31c3bc219eae3775a54" translate="yes" xml:space="preserve">
          <source>Flow is a static type checker for your JavaScript code. It does a lot of work to make you more productive. Making you code faster, smarter, more confidently, and to a bigger scale.</source>
          <target state="translated">El flujo es un comprobador de tipo estático para tu código JavaScript.Hace mucho trabajo para hacerte más productivo.Haciendo que codifiques más rápido,más inteligente,con más confianza y a mayor escala.</target>
        </trans-unit>
        <trans-unit id="eccc6e8d7aae412ab111e4ae2e8f9d87e9acb8a6" translate="yes" xml:space="preserve">
          <source>Flow is not &lt;a href=&quot;https://flow.org/en/lang/types-and-expressions/#soundness-and-completeness&quot;&gt;complete&lt;/a&gt;, so it cannot check all code perfectly. Instead, Flow will make conservative assumptions to try to be sound.</source>
          <target state="translated">El flujo no est&amp;aacute; &lt;a href=&quot;https://flow.org/en/lang/types-and-expressions/#soundness-and-completeness&quot;&gt;completo&lt;/a&gt; , por lo que no puede verificar todo el c&amp;oacute;digo perfectamente. En cambio, Flow har&amp;aacute; suposiciones conservadoras para tratar de ser s&amp;oacute;lido.</target>
        </trans-unit>
        <trans-unit id="f5a3fb20b94174faf688a6da7dfab78f503bda2d" translate="yes" xml:space="preserve">
          <source>Flow needs a way to be able to figure out the type of every expression. But it can&amp;rsquo;t just run your code to figure it out, if it did it would be affected by any issues that your code has. For example, if you created an infinite loop Flow would wait for it to finish forever.</source>
          <target state="translated">Flow necesita una forma de poder averiguar el tipo de cada expresi&amp;oacute;n. Pero no puede simplemente ejecutar su c&amp;oacute;digo para resolverlo, si lo hiciera, se ver&amp;iacute;a afectado por cualquier problema que tenga su c&amp;oacute;digo. Por ejemplo, si crea un bucle infinito, Flow esperar&amp;aacute; a que termine para siempre.</target>
        </trans-unit>
        <trans-unit id="c320f7d736c792bfa9520f9145672090f7b71c98" translate="yes" xml:space="preserve">
          <source>Flow needs to compare more than just sets of primitive values, it also needs to be able to compare objects, functions, and every other type that appears in the language.</source>
          <target state="translated">El flujo necesita comparar más que simples conjuntos de valores primitivos,también necesita ser capaz de comparar objetos,funciones y cualquier otro tipo que aparezca en el lenguaje.</target>
        </trans-unit>
        <trans-unit id="197f7b0842bf7c4d39085530e1c9d6e1647ccda5" translate="yes" xml:space="preserve">
          <source>Flow needs to know which files to parse and of those how to handle any Flow types within them. For third party libraries you may wish to not parse, parse but not preserve types, or parse but not raise errors, depending on the quality and compatibility of their Flow implementation.</source>
          <target state="translated">Flow necesita saber qué archivos analizar y cómo manejar cualquier tipo de flujo dentro de ellos.En el caso de bibliotecas de terceros,es posible que desees no parsear,parsear pero no preservar los tipos,o parsear pero no generar errores,dependiendo de la calidad y la compatibilidad de su implementación de Flow.</target>
        </trans-unit>
        <trans-unit id="fa11ea1401156a6f5d8e119dec34779c7787d52c" translate="yes" xml:space="preserve">
          <source>Flow needs to know which files to read and watch for changes. This set of files is determined by taking all included files and excluding all the ignored files.</source>
          <target state="translated">Flow necesita saber qué archivos leer y observar los cambios.Este conjunto de archivos se determina tomando todos los archivos incluidos y excluyendo todos los archivos ignorados.</target>
        </trans-unit>
        <trans-unit id="e74d4f194fac00619d8f08bc6cfdf7a46e8a3401" translate="yes" xml:space="preserve">
          <source>Flow provides a set of utility types to operate on other types, and can be useful for different scenarios.</source>
          <target state="translated">El flujo proporciona un conjunto de tipos de utilidad para operar en otros tipos,y puede ser útil para diferentes escenarios.</target>
        </trans-unit>
        <trans-unit id="1431a76ac3b525222744b6e84e9e4ddfb3690671" translate="yes" xml:space="preserve">
          <source>Flow reads &lt;code&gt;package.json&lt;/code&gt; files for the &lt;code&gt;&quot;name&quot;&lt;/code&gt; and &lt;code&gt;&quot;main&quot;&lt;/code&gt; fields to figure out the name of the module and which file should be used to provide that module.</source>
          <target state="translated">Flow lee los archivos &lt;code&gt;package.json&lt;/code&gt; para los campos &lt;code&gt;&quot;name&quot;&lt;/code&gt; y &lt;code&gt;&quot;main&quot;&lt;/code&gt; para averiguar el nombre del m&amp;oacute;dulo y qu&amp;eacute; archivo debe usarse para proporcionar ese m&amp;oacute;dulo.</target>
        </trans-unit>
        <trans-unit id="dfe27c8ba5ae777889585a165eda9e01fd1c411a" translate="yes" xml:space="preserve">
          <source>Flow reports many different kinds of errors for many common programming mistakes, but not every JavaScript pattern can be understood by Flow. If you are confident your code is correct, and that Flow is erroring too conservatively, you can suppress the error so that Flow does not report it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e11220e33346b1bf7474cc77bed10da16b3fdb63" translate="yes" xml:space="preserve">
          <source>Flow requires type annotations at module boundaries to make sure it can scale. To read more about that, check out our &lt;a href=&quot;https://medium.com/flow-type/asking-for-required-annotations-64d4f9c1edf8&quot;&gt;blog post&lt;/a&gt; about that.</source>
          <target state="translated">El flujo requiere anotaciones de tipo en los l&amp;iacute;mites del m&amp;oacute;dulo para asegurarse de que pueda escalar. Para leer m&amp;aacute;s sobre eso, consulte nuestra &lt;a href=&quot;https://medium.com/flow-type/asking-for-required-annotations-64d4f9c1edf8&quot;&gt;publicaci&amp;oacute;n de blog&lt;/a&gt; sobre eso.</target>
        </trans-unit>
        <trans-unit id="b4c09a80109af9a29936b09b862868ca078b9ce3" translate="yes" xml:space="preserve">
          <source>Flow silently accepts it (and uses &lt;code&gt;Fn&lt;/code&gt; as the inferred type), but does not check the implementation against this signature. This makes this kind of declaration a better suited candidate for library definitions, where implementations are omitted.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="84d0f858caf5dd7487404da9c0e086ed565c074e" translate="yes" xml:space="preserve">
          <source>Flow supports a comment-based syntax, which makes it possible to use Flow without having to compile your files.</source>
          <target state="translated">Flow soporta una sintaxis basada en el principio,lo que permite utilizar Flow sin tener que compilar sus archivos.</target>
        </trans-unit>
        <trans-unit id="30ad932dfc5bec279c555d2817fce7c58c613eaa" translate="yes" xml:space="preserve">
          <source>Flow supports the &lt;code&gt;@babel/plugin-transform-react-jsx&lt;/code&gt; runtime options required to use JSX without explicitly importing the React namespace.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="25dce24924ffe50d06ea3c27504223de08877a30" translate="yes" xml:space="preserve">
          <source>Flow tracks the specific type of the value you pass through a generic, letting you use it later.</source>
          <target state="translated">El flujo sigue el tipo específico del valor que pasa a través de un genérico,permitiéndote usarlo más tarde.</target>
        </trans-unit>
        <trans-unit id="4543e6960bdd40f7fd529d611087695f4d5149d5" translate="yes" xml:space="preserve">
          <source>Flow tries to avoid parsing non-flow files. This means Flow needs to start lexing a file to see if it has &lt;code&gt;@flow&lt;/code&gt; or &lt;code&gt;@noflow&lt;/code&gt; in it. This option lets you configure how much of the file Flow lexes before it decides there is no relevant docblock.</source>
          <target state="translated">Flow intenta evitar analizar archivos que no son de flujo. Esto significa que Flow necesita comenzar a lexar un archivo para ver si tiene &lt;code&gt;@flow&lt;/code&gt; o &lt;code&gt;@noflow&lt;/code&gt; en &amp;eacute;l. Esta opci&amp;oacute;n le permite configurar cu&amp;aacute;nto del archivo Flow lexes antes de que decida que no hay un docblock relevante.</target>
        </trans-unit>
        <trans-unit id="52553dd61330137688c84a4912b70f866c01b523" translate="yes" xml:space="preserve">
          <source>Flow tries to be as sound and complete as possible. But because JavaScript was not designed around a type system, Flow sometimes has to make a tradeoff. When this happens Flow tends to favor soundness over completeness, ensuring that code doesn&amp;rsquo;t have any bugs.</source>
          <target state="translated">Flow intenta ser lo m&amp;aacute;s s&amp;oacute;lido y completo posible. Pero debido a que JavaScript no fue dise&amp;ntilde;ado alrededor de un sistema de tipos, Flow a veces tiene que hacer una compensaci&amp;oacute;n. Cuando esto sucede, Flow tiende a favorecer la solidez sobre la integridad, asegurando que el c&amp;oacute;digo no tenga errores.</target>
        </trans-unit>
        <trans-unit id="7d011e99cc7dbd500d87676f164a01cb49e80345" translate="yes" xml:space="preserve">
          <source>Flow tries to work out of the box as much as possible, but can be configured to work with any codebase.</source>
          <target state="translated">Flow intenta trabajar fuera de la caja tanto como sea posible,pero puede ser configurado para trabajar con cualquier base de código.</target>
        </trans-unit>
        <trans-unit id="eb7d367d74212ddc0e35250289a131174450c8b9" translate="yes" xml:space="preserve">
          <source>Flow understands these conversions and will allow any of them as part of an &lt;code&gt;if&lt;/code&gt; statement and other types of expressions.</source>
          <target state="translated">Flow comprende estas conversiones y permitir&amp;aacute; cualquiera de ellas como parte de una declaraci&amp;oacute;n &lt;code&gt;if&lt;/code&gt; y otros tipos de expresiones.</target>
        </trans-unit>
        <trans-unit id="5bea5ed86f8a457903d5905c971362464ec56214" translate="yes" xml:space="preserve">
          <source>Flow was designed for easy adoption, so it allows you opt-out of type checking in certain situations, permitting unsafe behaviors. But since many codebases now have a high adoption of Flow types, this trade-off can be flipped. You can use &lt;em&gt;Flow Strict&lt;/em&gt; to disallow previously-allowed unsafe patterns. This gives you improved safety guarantees that catch more bugs and make refactoring easier. And you can implement these stronger guarantees incrementally, on a file-by-file basis.</source>
          <target state="translated">Flow fue dise&amp;ntilde;ado para una f&amp;aacute;cil adopci&amp;oacute;n, por lo que le permite optar por no participar en la verificaci&amp;oacute;n de tipos en ciertas situaciones, lo que permite comportamientos inseguros. Pero dado que muchas bases de c&amp;oacute;digo ahora tienen una alta adopci&amp;oacute;n de tipos de flujo, esta compensaci&amp;oacute;n se puede invertir. Puede usar &lt;em&gt;Flow Strict&lt;/em&gt; para rechazar patrones inseguros permitidos anteriormente. Esto le brinda garant&amp;iacute;as de seguridad mejoradas que detectan m&amp;aacute;s errores y facilitan la refactorizaci&amp;oacute;n. Y puede implementar estas garant&amp;iacute;as m&amp;aacute;s s&amp;oacute;lidas de forma incremental, archivo por archivo.</target>
        </trans-unit>
        <trans-unit id="1595a2bf188fc4b7ef46616052b38b6e681bb494" translate="yes" xml:space="preserve">
          <source>Flow will be run as part of create-react-app&amp;rsquo;s scripts.</source>
          <target state="translated">El flujo se ejecutar&amp;aacute; como parte de los scripts de create-react-app.</target>
        </trans-unit>
        <trans-unit id="338d618c9a13ce96682c1d7e15f73ae7f8964da4" translate="yes" xml:space="preserve">
          <source>Flow will infer the type of your default props from &lt;code&gt;static defaultProps&lt;/code&gt; so you don&amp;rsquo;t have to add any type annotations to use default props.</source>
          <target state="translated">Flow inferir&amp;aacute; el tipo de sus accesorios predeterminados a partir de los &lt;code&gt;static defaultProps&lt;/code&gt; para que no tenga que agregar ning&amp;uacute;n tipo de anotaciones para usar los accesorios predeterminados.</target>
        </trans-unit>
        <trans-unit id="9184e4b7870b602025b0689241850daf93e22df5" translate="yes" xml:space="preserve">
          <source>Flow will infer types from the way you use a context&amp;rsquo;s &lt;code&gt;{Provider,Consumer}&lt;/code&gt; pair:</source>
          <target state="translated">El flujo inferir&amp;aacute; los tipos de la forma en que usas el par &lt;code&gt;{Provider,Consumer}&lt;/code&gt; un contexto :</target>
        </trans-unit>
        <trans-unit id="da894b9361cae0d64ee6137b04c9e0ae3140d94c" translate="yes" xml:space="preserve">
          <source>Flow will let you assign anything to &lt;code&gt;x&lt;/code&gt;, which reduces confidence in the use of &lt;code&gt;x&lt;/code&gt; as a number. Thus &lt;code&gt;x&lt;/code&gt; is considered uncovered.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3e54a4925e33a70ee19276a34ddf5663b9fa39c5" translate="yes" xml:space="preserve">
          <source>Flow will only accept strings and number when concatenating them to strings.</source>
          <target state="translated">El flujo sólo aceptará cuerdas y números cuando los concatene con las cuerdas.</target>
        </trans-unit>
        <trans-unit id="5eab08add042bdc755cadabf5fe2a07bc373a954" translate="yes" xml:space="preserve">
          <source>Flow will unsoundly allow this last cast to succeed. If this behavior is not wanted, then this utility type should be avoided.</source>
          <target state="translated">El flujo permitirá que este último reparto tenga éxito.Si este comportamiento no es deseado,entonces este tipo de utilidad debe ser evitado.</target>
        </trans-unit>
        <trans-unit id="9fb359e7b8aa5962ece67701ffa1a8439b019086" translate="yes" xml:space="preserve">
          <source>Flow will use &lt;code&gt;bar.js&lt;/code&gt; to provide the &lt;code&gt;&quot;kittens&quot;&lt;/code&gt; module.</source>
          <target state="translated">Flow utilizar&amp;aacute; &lt;code&gt;bar.js&lt;/code&gt; para proporcionar el m&amp;oacute;dulo &lt;code&gt;&quot;kittens&quot;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="db39464b47c1acee0eb7fa411eeb1a89946c2d9f" translate="yes" xml:space="preserve">
          <source>Flow&amp;rsquo;s editor integration is primarily via the &lt;a href=&quot;https://microsoft.github.io/language-server-protocol/&quot;&gt;Language Server Protocol&lt;/a&gt;. There are &lt;a href=&quot;https://microsoft.github.io/language-server-protocol/implementors/tools/&quot;&gt;many vim LSP clients&lt;/a&gt; to choose from, such as &lt;a href=&quot;#toc-ale&quot;&gt;ALE&lt;/a&gt;.</source>
          <target state="translated">La integraci&amp;oacute;n del editor de Flow se realiza principalmente a trav&amp;eacute;s del &lt;a href=&quot;https://microsoft.github.io/language-server-protocol/&quot;&gt;protocolo de servidor de idiomas&lt;/a&gt; . Hay &lt;a href=&quot;https://microsoft.github.io/language-server-protocol/implementors/tools/&quot;&gt;muchos clientes vim LSP&lt;/a&gt; para elegir, como &lt;a href=&quot;#toc-ale&quot;&gt;ALE&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="35e134c2f20bf81b3b896daf47c04ac35fee3088" translate="yes" xml:space="preserve">
          <source>Flow&amp;rsquo;s shared memory lives in a memory mapped file. On more modern versions of Linux (3.17+), there is a system call &lt;code&gt;memfd_create&lt;/code&gt; which allows Flow to create the file anonymously and only in memory. However, in older kernels, Flow needs to create a file on the file system. Ideally this file lives on a memory-backed tmpfs. This option lets you decide where that file is created.</source>
          <target state="translated">La memoria compartida de Flow vive en un archivo mapeado en memoria. En versiones m&amp;aacute;s modernas de Linux (3.17+), hay una llamada al sistema &lt;code&gt;memfd_create&lt;/code&gt; que permite a Flow crear el archivo de forma an&amp;oacute;nima y solo en la memoria. Sin embargo, en los n&amp;uacute;cleos m&amp;aacute;s antiguos, Flow necesita crear un archivo en el sistema de archivos. Idealmente, este archivo vive en un tmpfs con respaldo de memoria. Esta opci&amp;oacute;n le permite decidir d&amp;oacute;nde se crea ese archivo.</target>
        </trans-unit>
        <trans-unit id="a151dc47e59f85e9ca3816a57d33d5371e099290" translate="yes" xml:space="preserve">
          <source>Flow-IDE</source>
          <target state="translated">Flow-IDE</target>
        </trans-unit>
        <trans-unit id="4dbea89f685901895c4ece7a62f739b66b6c8c38" translate="yes" xml:space="preserve">
          <source>Flow-Language-Support</source>
          <target state="translated">Flow-Language-Support</target>
        </trans-unit>
        <trans-unit id="52981c30a079c03c2816af01a0b63be9bf496116" translate="yes" xml:space="preserve">
          <source>Flow: Goals</source>
          <target state="translated">Flujo:Objetivos</target>
        </trans-unit>
        <trans-unit id="193cbf05588eacbb65a1c0ac7089a698e31d43b1" translate="yes" xml:space="preserve">
          <source>Flowlint Comments</source>
          <target state="translated">Comentarios de Flowlint</target>
        </trans-unit>
        <trans-unit id="189ce1cc1d3d009f899bc0f0bdf7826fa8c95970" translate="yes" xml:space="preserve">
          <source>Follow the &lt;a href=&quot;https://github.com/w0rp/ale#3-installation&quot;&gt;instructions&lt;/a&gt; in the ALE README.</source>
          <target state="translated">Siga las &lt;a href=&quot;https://github.com/w0rp/ale#3-installation&quot;&gt;instrucciones&lt;/a&gt; del ALE README.</target>
        </trans-unit>
        <trans-unit id="6a6549a69a2a1d5be1e060e92d176ddae49cb2f2" translate="yes" xml:space="preserve">
          <source>Following our example from &lt;a href=&quot;#toc-objmap&quot;&gt;&lt;code&gt;$ObjMap&amp;lt;T&amp;gt;&lt;/code&gt;&lt;/a&gt;, let&amp;rsquo;s assume that &lt;code&gt;run&lt;/code&gt; takes an array of functions, instead of an object, and maps over them returning an array of the function call results. We could annotate its return type like this:</source>
          <target state="translated">Siguiendo nuestro ejemplo de &lt;a href=&quot;#toc-objmap&quot;&gt; &lt;code&gt;$ObjMap&amp;lt;T&amp;gt;&lt;/code&gt; &lt;/a&gt; , supongamos que &lt;code&gt;run&lt;/code&gt; toma una matriz de funciones, en lugar de un objeto, y se mapea sobre ellas devolviendo una matriz de los resultados de la llamada a la funci&amp;oacute;n. Podr&amp;iacute;amos anotar su tipo de retorno as&amp;iacute;:</target>
        </trans-unit>
        <trans-unit id="8a4d289d3b1dd5ba9aa2a66d282cd434d4d6eef2" translate="yes" xml:space="preserve">
          <source>For a full list of available lint rules, see the &lt;a href=&quot;https://flow.org/en/linting/rule-reference/&quot;&gt;Lint Rule Reference&lt;/a&gt;.</source>
          <target state="translated">Para obtener una lista completa de las reglas de pelusa disponibles, consulte la &lt;a href=&quot;https://flow.org/en/linting/rule-reference/&quot;&gt;Referencia de reglas de pelusa&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="c8b22a41ca2285196cb7b3e9c1ec2990d2a5b7b1" translate="yes" xml:space="preserve">
          <source>For cases like this where it&amp;rsquo;s useful to assert the absence of a property, Flow provides a special syntax for &lt;a href=&quot;https://flow.org/en/types/objects/#toc-exact-object-types&quot;&gt;&amp;ldquo;exact&amp;rdquo; object types&lt;/a&gt;.</source>
          <target state="translated">Para casos como este en los que es &amp;uacute;til afirmar la ausencia de una propiedad, Flow proporciona una sintaxis especial para &lt;a href=&quot;https://flow.org/en/types/objects/#toc-exact-object-types&quot;&gt;tipos de objetos &quot;exactos&quot;&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="2ea9b94790107e111f7ed5653f532123efce19c9" translate="yes" xml:space="preserve">
          <source>For classes that take type parameters, you must also provide the parameter. For example:</source>
          <target state="translated">Para las clases que toman parámetros de tipo,también debe proporcionar el parámetro.Por ejemplo:</target>
        </trans-unit>
        <trans-unit id="dc3c09a115b4ee611eb7505826a4fa0c2a8495d8" translate="yes" xml:space="preserve">
          <source>For example</source>
          <target state="translated">Por ejemplo</target>
        </trans-unit>
        <trans-unit id="c6f67e406326ac835e3cac37e1771059c44a2f4c" translate="yes" xml:space="preserve">
          <source>For example if you want to get a normal JavaScript array from a &lt;code&gt;React.ChildrenArray&amp;lt;T&amp;gt;&lt;/code&gt; see the following example:</source>
          <target state="translated">Por ejemplo, si desea obtener una matriz JavaScript normal de un &lt;code&gt;React.ChildrenArray&amp;lt;T&amp;gt;&lt;/code&gt; consulte el siguiente ejemplo:</target>
        </trans-unit>
        <trans-unit id="6db6725e9e7d5c088630e348048d1e73fc7657d3" translate="yes" xml:space="preserve">
          <source>For example,</source>
          <target state="translated">Por ejemplo,</target>
        </trans-unit>
        <trans-unit id="eb4d70e0d036fa1748a5b85d77f3bc5e2328c134" translate="yes" xml:space="preserve">
          <source>For example, Flow uses structural typing for objects and functions, but nominal typing for classes.</source>
          <target state="translated">Por ejemplo,Flow utiliza la tipificación estructural para los objetos y funciones,pero la tipificación nominal para las clases.</target>
        </trans-unit>
        <trans-unit id="7349dc404f299437995005ad91a4e45b836943bc" translate="yes" xml:space="preserve">
          <source>For example, a type alias with a generic is parameterized. When you go to use it you will have to provide a type argument.</source>
          <target state="translated">Por ejemplo,se parametriza un alias de tipo con un genérico.Cuando vayas a usarlo tendrás que proporcionar un argumento de tipo.</target>
        </trans-unit>
        <trans-unit id="727291482b99e51c4689f293eedfbbda65687a51" translate="yes" xml:space="preserve">
          <source>For example, consider the &lt;em&gt;inlined&lt;/em&gt; refinement</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="019f85d55639d616f40bcfd5b84f65f5245b2f0d" translate="yes" xml:space="preserve">
          <source>For example, if &lt;code&gt;/path/to/root/.flowconfig&lt;/code&gt; contains the following &lt;code&gt;[include]&lt;/code&gt; section:</source>
          <target state="translated">Por ejemplo, si &lt;code&gt;/path/to/root/.flowconfig&lt;/code&gt; contiene la siguiente secci&amp;oacute;n &lt;code&gt;[include]&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="8308d7d3a3b1e0a7a0c7ff7fe6095b8469e2ca83" translate="yes" xml:space="preserve">
          <source>For example, if we had a &lt;code&gt;TypeA&lt;/code&gt; which described the numbers 1 through 3, and a &lt;code&gt;TypeB&lt;/code&gt; which described the numbers 1 through 5: &lt;code&gt;TypeA&lt;/code&gt; would be considered a &lt;em&gt;subtype&lt;/em&gt; of &lt;code&gt;TypeB&lt;/code&gt;, because &lt;code&gt;TypeA&lt;/code&gt; is a subset of &lt;code&gt;TypeB&lt;/code&gt;.</source>
          <target state="translated">Por ejemplo, si tuvi&amp;eacute;ramos un &lt;code&gt;TypeA&lt;/code&gt; que describiera los n&amp;uacute;meros del 1 al 3 y un &lt;code&gt;TypeB&lt;/code&gt; que describiera los n&amp;uacute;meros del 1 al 5: &lt;code&gt;TypeA&lt;/code&gt; se considerar&amp;iacute;a un &lt;em&gt;subtipo&lt;/em&gt; de &lt;code&gt;TypeB&lt;/code&gt; , porque &lt;code&gt;TypeA&lt;/code&gt; es un subconjunto de &lt;code&gt;TypeB&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="1b1f46c1686b7fc66c7fe476a788c1c2f746e357" translate="yes" xml:space="preserve">
          <source>For example, if we had an &lt;code&gt;ObjectA&lt;/code&gt; which contained the key &lt;code&gt;foo&lt;/code&gt;, and an &lt;code&gt;ObjectB&lt;/code&gt; which contained the keys &lt;code&gt;foo&lt;/code&gt; and &lt;code&gt;bar&lt;/code&gt;. Then it&amp;rsquo;s possible that &lt;code&gt;ObjectB&lt;/code&gt; is a subtype of &lt;code&gt;ObjectA&lt;/code&gt;.</source>
          <target state="translated">Por ejemplo, si tuvi&amp;eacute;ramos un &lt;code&gt;ObjectA&lt;/code&gt; que contuviera la clave &lt;code&gt;foo&lt;/code&gt; y un &lt;code&gt;ObjectB&lt;/code&gt; que contuviera las claves &lt;code&gt;foo&lt;/code&gt; y &lt;code&gt;bar&lt;/code&gt; . Entonces es posible que &lt;code&gt;ObjectB&lt;/code&gt; sea ​​un subtipo de &lt;code&gt;ObjectA&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="23d2a83693c74cdf1216f4c41606ab3b6344cfb1" translate="yes" xml:space="preserve">
          <source>For example, if we have a value with a union type that is a &lt;code&gt;number&lt;/code&gt;, a &lt;code&gt;boolean&lt;/code&gt;, or a &lt;code&gt;string&lt;/code&gt;, we can treat the number case separately by using JavaScript&amp;rsquo;s &lt;code&gt;typeof&lt;/code&gt; operator.</source>
          <target state="translated">Por ejemplo, si tenemos un valor con un tipo de uni&amp;oacute;n que es un &lt;code&gt;number&lt;/code&gt; , un &lt;code&gt;boolean&lt;/code&gt; o o una &lt;code&gt;string&lt;/code&gt; , podemos tratar el caso del n&amp;uacute;mero por separado usando el operador &lt;code&gt;typeof&lt;/code&gt; de JavaScript .</target>
        </trans-unit>
        <trans-unit id="6f0bba8ae13a9f5893bc26e1914082a5b9531069" translate="yes" xml:space="preserve">
          <source>For example, if you do:</source>
          <target state="translated">Por ejemplo,si lo haces:</target>
        </trans-unit>
        <trans-unit id="65cad2079cddef1c7f55821c6579030cdb56abc4" translate="yes" xml:space="preserve">
          <source>For example, if you get a property on an object typed &lt;code&gt;any&lt;/code&gt;, the resulting value will also have the type &lt;code&gt;any&lt;/code&gt;.</source>
          <target state="translated">Por ejemplo, si obtiene una propiedad en un objeto con el tipo &lt;code&gt;any&lt;/code&gt; , el valor resultante tambi&amp;eacute;n tendr&amp;aacute; el tipo &lt;code&gt;any&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="b93fa61c86ebe13144616aecf546634749ff3161" translate="yes" xml:space="preserve">
          <source>For example, if you merge two objects with a property named &lt;code&gt;prop&lt;/code&gt;, first with a type of number and second with a type of boolean, accessing &lt;code&gt;prop&lt;/code&gt; will return &lt;code&gt;number&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0d2c0eb517854e42dedcf683011bb1eed6441385" translate="yes" xml:space="preserve">
          <source>For example, if you merge two objects with a property named prop, one with a type of number and another with a type of boolean, the resulting object will have an intersection of number and boolean.</source>
          <target state="translated">Por ejemplo,si se fusionan dos objetos con una propiedad llamada puntal,uno con un tipo de número y otro con un tipo de booleano,el objeto resultante tendrá una intersección de número y booleano.</target>
        </trans-unit>
        <trans-unit id="0ff184d53e398a510529293cf769afe6beb5de53" translate="yes" xml:space="preserve">
          <source>For example, if you use &lt;code&gt;typeof&lt;/code&gt; with a class you need to remember that classes are &lt;em&gt;nominally&lt;/em&gt; typed instead of &lt;em&gt;structurally&lt;/em&gt; typed. So that two classes with the same exact shape are not considered equivalent.</source>
          <target state="translated">Por ejemplo, si usa &lt;code&gt;typeof&lt;/code&gt; con una clase, debe recordar que las clases se escriben &lt;em&gt;nominalmente en&lt;/em&gt; lugar de &lt;em&gt;estructuralmente&lt;/em&gt; . De modo que dos clases con la misma forma exacta no se consideran equivalentes.</target>
        </trans-unit>
        <trans-unit id="725f953bd64b3a92b317e1b1004670c00e1cbdb9" translate="yes" xml:space="preserve">
          <source>For example, imagine we have a function for handling a response from a server after we&amp;rsquo;ve sent it a request. When the request is successful, we&amp;rsquo;ll get back an object with a &lt;code&gt;success&lt;/code&gt; property which is &lt;code&gt;true&lt;/code&gt; and a &lt;code&gt;value&lt;/code&gt; that we&amp;rsquo;ve updated.</source>
          <target state="translated">Por ejemplo, imagina que tenemos una funci&amp;oacute;n para manejar una respuesta de un servidor despu&amp;eacute;s de haberle enviado una solicitud. Cuando la solicitud sea exitosa, obtendremos un objeto con una propiedad de &lt;code&gt;success&lt;/code&gt; que sea &lt;code&gt;true&lt;/code&gt; y un &lt;code&gt;value&lt;/code&gt; que hemos actualizado.</target>
        </trans-unit>
        <trans-unit id="3102783616c1fb2ad801701f0f1fe894f5a7f3c4" translate="yes" xml:space="preserve">
          <source>For example, in order to know if you are calling a function correctly, Flow needs to compare the arguments you are passing with the parameters the function expects.</source>
          <target state="translated">Por ejemplo,para saber si está llamando correctamente a una función,Flow necesita comparar los argumentos que está pasando con los parámetros que la función espera.</target>
        </trans-unit>
        <trans-unit id="b4c3b99484dfdd0c8d74a80cfc7020381cb7fd5b" translate="yes" xml:space="preserve">
          <source>For example, instead of accepting &lt;code&gt;number&lt;/code&gt; type, we could accept only the literal value &lt;code&gt;2&lt;/code&gt;.</source>
          <target state="translated">Por ejemplo, en lugar de aceptar el tipo de &lt;code&gt;number&lt;/code&gt; , podr&amp;iacute;amos aceptar solo el valor literal &lt;code&gt;2&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="0d7e7c460bdc5abc1277e2c78f9349f50b395124" translate="yes" xml:space="preserve">
          <source>For example, the following code will not report any errors:</source>
          <target state="translated">Por ejemplo,el siguiente código no informará de ningún error:</target>
        </trans-unit>
        <trans-unit id="be2868a9fb7a2e636970247ed66a6e565dcb7b90" translate="yes" xml:space="preserve">
          <source>For example, the following function for cloning an object.</source>
          <target state="translated">Por ejemplo,la siguiente función para clonar un objeto.</target>
        </trans-unit>
        <trans-unit id="c57d353ecaa5b9ae469153e8bd0494c2759cfd0e" translate="yes" xml:space="preserve">
          <source>For example, to figure out the result of the following expression, Flow needs to figure out what its values are first.</source>
          <target state="translated">Por ejemplo,para averiguar el resultado de la siguiente expresión,Flow necesita averiguar primero cuáles son sus valores.</target>
        </trans-unit>
        <trans-unit id="c6c8a9ac1f5c16025ef387a60063c1bc2ea40cd1" translate="yes" xml:space="preserve">
          <source>For example, when you create an intersection of two objects with different sets of properties, it will result in an object with all of the properties.</source>
          <target state="translated">Por ejemplo,cuando se crea una intersección de dos objetos con diferentes conjuntos de propiedades,se obtendrá un objeto con todas las propiedades.</target>
        </trans-unit>
        <trans-unit id="be0defaf069697775abe92858214aa6eab2ca76b" translate="yes" xml:space="preserve">
          <source>For example, when you use literal values in Flow, their inferred type is the primitive that it belongs to. Thus, the number 42 has the inferred type of &lt;code&gt;number&lt;/code&gt;. You can see this when you use &lt;code&gt;typeof&lt;/code&gt;.</source>
          <target state="translated">Por ejemplo, cuando usa valores literales en Flow, su tipo inferido es la primitiva a la que pertenece. Por lo tanto, el n&amp;uacute;mero 42 tiene el tipo de &lt;code&gt;number&lt;/code&gt; inferido . Puede ver esto cuando usa &lt;code&gt;typeof&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="7a78f29fa972df73a82d620ebcbf55256b542d21" translate="yes" xml:space="preserve">
          <source>For example, you can create an intersection of a number and a string.</source>
          <target state="translated">Por ejemplo,puedes crear una intersección de un número y una cadena.</target>
        </trans-unit>
        <trans-unit id="c6bf9aa556ae7aa47497704d8a136318cf4656ef" translate="yes" xml:space="preserve">
          <source>For example, you can write:</source>
          <target state="translated">Por ejemplo,puedes escribir:</target>
        </trans-unit>
        <trans-unit id="41cd59ae29edba6c60d70a4800b3539e40d937dc" translate="yes" xml:space="preserve">
          <source>For example, you could be accessing an element that is out of the bounds of the array.</source>
          <target state="translated">Por ejemplo,podría estar accediendo a un elemento que está fuera de los límites de la matriz.</target>
        </trans-unit>
        <trans-unit id="059c3e8cce263b2945a18ac90b2637e10a8026b1" translate="yes" xml:space="preserve">
          <source>For example:</source>
          <target state="translated">Por ejemplo:</target>
        </trans-unit>
        <trans-unit id="8e7b3364aed4ab54bcb5fbf0be1c986544a80686" translate="yes" xml:space="preserve">
          <source>For files in your project without this flag, the Flow background process skips and ignores the code (unless you call &lt;code&gt;flow check --all&lt;/code&gt;, which is beyond the scope of basic usage).</source>
          <target state="translated">Para los archivos de su proyecto sin esta marca, el proceso en segundo plano de Flow omite e ignora el c&amp;oacute;digo (a menos que llame a &lt;code&gt;flow check --all&lt;/code&gt; , que est&amp;aacute; m&amp;aacute;s all&amp;aacute; del alcance del uso b&amp;aacute;sico).</target>
        </trans-unit>
        <trans-unit id="6adf72d1444fb7909aee272ad9e96f51f02d4b69" translate="yes" xml:space="preserve">
          <source>For instance, in this &lt;a href=&quot;https://flow.org/try/#0PTAEAEDMBsHsHcBQBLAtgB1gJwC6gFSgCGAzqAEoCmRAxnpFrKqAORbV0sDciiNsAOxJ4SlHABUAnukqgAvKABCpSgGEmmAZQF45APlDpG6MvtAAeZaPUZB2vAG8AdC6OwTAX1A5plOQCIAIwBXHBxBf1BgPR5+ITwAcW1KLGQaRVDwgXlQAAoHHxkAGlAaAAtkaAATdgEPAEp5A3MQsMFvXzkC3y9BVWg0gGsu3MazOJJYaEonOABzXJYaAZpByiqWeo89B3LKmu0Pc2BWrJjeCbwMtoEALgoOHCcbTXspGXNdiura+6paJ4AOVgVUo2xyogkvlySS0qXSmUE9S4QA&quot;&gt;example&lt;/a&gt;, we don&amp;rsquo;t type the HOC (setType), but the component created with it, &lt;code&gt;Button&lt;/code&gt;. To do so, we use the type &lt;code&gt;React.ComponentType&lt;/code&gt;.</source>
          <target state="translated">Por ejemplo, en este &lt;a href=&quot;https://flow.org/try/#0PTAEAEDMBsHsHcBQBLAtgB1gJwC6gFSgCGAzqAEoCmRAxnpFrKqAORbV0sDciiNsAOxJ4SlHABUAnukqgAvKABCpSgGEmmAZQF45APlDpG6MvtAAeZaPUZB2vAG8AdC6OwTAX1A5plOQCIAIwBXHBxBf1BgPR5+ITwAcW1KLGQaRVDwgXlQAAoHHxkAGlAaAAtkaAATdgEPAEp5A3MQsMFvXzkC3y9BVWg0gGsu3MazOJJYaEonOABzXJYaAZpByiqWeo89B3LKmu0Pc2BWrJjeCbwMtoEALgoOHCcbTXspGXNdiura+6paJ4AOVgVUo2xyogkvlySS0qXSmUE9S4QA&quot;&gt;ejemplo&lt;/a&gt; , no escribimos el HOC (setType), sino el componente creado con &amp;eacute;l, &lt;code&gt;Button&lt;/code&gt; . Para hacerlo, usamos el tipo &lt;code&gt;React.ComponentType&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="fdce77763d38af3a8b71abca1c0293dafa227070" translate="yes" xml:space="preserve">
          <source>For more on lazy modes, see the &lt;a href=&quot;../lang/lazy-modes&quot;&gt;lazy modes docs&lt;/a&gt;.</source>
          <target state="translated">Para obtener m&amp;aacute;s informaci&amp;oacute;n sobre los modos diferidos, consulte los &lt;a href=&quot;../lang/lazy-modes&quot;&gt;documentos de los modos diferidos&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="5a9ff0d1ea1569c81eb6dd1194e556900bb25139" translate="yes" xml:space="preserve">
          <source>For more on types-first mode, see the &lt;a href=&quot;../lang/types-first&quot;&gt;types-first docs&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c03eb76d06156d9151d583bf5017b60d060c9e8f" translate="yes" xml:space="preserve">
          <source>For objects like these, Flow provides a special kind of property, called an &amp;ldquo;indexer property.&amp;rdquo; An indexer property allows reads and writes using any key that matches the indexer key type.</source>
          <target state="translated">Para objetos como estos, Flow proporciona un tipo especial de propiedad, denominada &quot;propiedad de indexaci&amp;oacute;n&quot;. Una propiedad de indexador permite lecturas y escrituras utilizando cualquier clave que coincida con el tipo de clave del indexador.</target>
        </trans-unit>
        <trans-unit id="4ab0510537ce0eb4731a9b80070bc58fde2f4090" translate="yes" xml:space="preserve">
          <source>For that reason (and others), it&amp;rsquo;s useful to write types for important functions.</source>
          <target state="translated">Por esa raz&amp;oacute;n (y otras), es &amp;uacute;til escribir tipos para funciones importantes.</target>
        </trans-unit>
        <trans-unit id="bdccfdba2af4464ab5f05d14e93c225840b2b001" translate="yes" xml:space="preserve">
          <source>For the &lt;a href=&quot;#toc-write-flow-code&quot;&gt;code above&lt;/a&gt;, running &lt;code&gt;flow&lt;/code&gt; will yield:</source>
          <target state="translated">Para el &lt;a href=&quot;#toc-write-flow-code&quot;&gt;c&amp;oacute;digo anterior&lt;/a&gt; , el &lt;code&gt;flow&lt;/code&gt; ejecuci&amp;oacute;n producir&amp;aacute;:</target>
        </trans-unit>
        <trans-unit id="0fff3409e13cd93e88e21ac5285c632cc985eaba" translate="yes" xml:space="preserve">
          <source>Forcing Flow to Treat a File as Focused</source>
          <target state="translated">Forzar el flujo para tratar un archivo como enfocado</target>
        </trans-unit>
        <trans-unit id="cc51c13e52ce8d73c0bb48b450274afb9f82073c" translate="yes" xml:space="preserve">
          <source>Fortunately, JavaScript is already written using files as modules, so we modularize our analysis simply by asking that modules have explicitly typed signatures. (We still infer types for the vast majority of code &amp;ldquo;local&amp;rdquo; to modules.) Coincidentally, developers consider this good software engineering practice anyway.</source>
          <target state="translated">Afortunadamente, JavaScript ya est&amp;aacute; escrito usando archivos como m&amp;oacute;dulos, por lo que modularizamos nuestro an&amp;aacute;lisis simplemente pidiendo que los m&amp;oacute;dulos tengan firmas escritas a m&amp;aacute;quina. (Todav&amp;iacute;a inferimos tipos para la gran mayor&amp;iacute;a del c&amp;oacute;digo &quot;local&quot; a los m&amp;oacute;dulos). Casualmente, los desarrolladores consideran esta buena pr&amp;aacute;ctica de ingenier&amp;iacute;a de software de todos modos.</target>
        </trans-unit>
        <trans-unit id="1c86bf0b4a5d6b8fe12a31c428cd9618f1707a5a" translate="yes" xml:space="preserve">
          <source>Function &lt;code&gt;this&lt;/code&gt;</source>
          <target state="translated">Funciona &lt;code&gt;this&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="751924331feba79685bd7ca453e7d70d1ee39798" translate="yes" xml:space="preserve">
          <source>Function Declarations</source>
          <target state="translated">Declaraciones de función</target>
        </trans-unit>
        <trans-unit id="cec90ffa8d067cfb33c2b7e5ea59f57a4ab51f07" translate="yes" xml:space="preserve">
          <source>Function Parameters</source>
          <target state="translated">Parámetros de la función</target>
        </trans-unit>
        <trans-unit id="8b80c6d0c0eb90a4193c11e2b8f639ce9765572d" translate="yes" xml:space="preserve">
          <source>Function Returns</source>
          <target state="translated">La función regresa</target>
        </trans-unit>
        <trans-unit id="5b51ae5c386fcffd7ce1ff55e49610a2a8af3637" translate="yes" xml:space="preserve">
          <source>Function Types</source>
          <target state="translated">Tipos de función</target>
        </trans-unit>
        <trans-unit id="7cc900b0e76620e1c35c363651461063a5b2d0d3" translate="yes" xml:space="preserve">
          <source>Function parameters can also have defaults. This is a feature of ECMAScript 2015.</source>
          <target state="translated">Los parámetros de la función también pueden tener valores por defecto.Esta es una característica de ECMAScript 2015.</target>
        </trans-unit>
        <trans-unit id="e686426824459378af5e98ab82feb0bfc1faa0e2" translate="yes" xml:space="preserve">
          <source>Function parameters can have types by adding a colon &lt;code&gt;:&lt;/code&gt; followed by the type after the name of the parameter.</source>
          <target state="translated">Los par&amp;aacute;metros de funci&amp;oacute;n pueden tener tipos agregando dos puntos &lt;code&gt;:&lt;/code&gt; seguidos del tipo despu&amp;eacute;s del nombre del par&amp;aacute;metro.</target>
        </trans-unit>
        <trans-unit id="e20f19430f4406d7d479bb1219578533f21581f6" translate="yes" xml:space="preserve">
          <source>Function parameters with defaults</source>
          <target state="translated">Los parámetros de la función con los valores por defecto</target>
        </trans-unit>
        <trans-unit id="e628cf6d4cf7f3f60c7c92cf5e2c6d4764b18a50" translate="yes" xml:space="preserve">
          <source>Function returns can also add a type using a colon &lt;code&gt;:&lt;/code&gt; followed by the type after the list of parameters.</source>
          <target state="translated">Los retornos de funci&amp;oacute;n tambi&amp;eacute;n pueden agregar un tipo usando dos puntos &lt;code&gt;:&lt;/code&gt; seguido del tipo despu&amp;eacute;s de la lista de par&amp;aacute;metros.</target>
        </trans-unit>
        <trans-unit id="31bf38f4775fc5c5a798a785e09ec45b75300cf9" translate="yes" xml:space="preserve">
          <source>Function types can create generics in the same way as normal functions, by adding the type parameter list &lt;code&gt;&amp;lt;T&amp;gt;&lt;/code&gt; before the function type parameter list.</source>
          <target state="translated">Los tipos de funci&amp;oacute;n pueden crear gen&amp;eacute;ricos de la misma manera que las funciones normales, agregando la lista de par&amp;aacute;metros de tipo &lt;code&gt;&amp;lt;T&amp;gt;&lt;/code&gt; antes de la lista de par&amp;aacute;metros de tipo de funci&amp;oacute;n.</target>
        </trans-unit>
        <trans-unit id="1696fa363249b910e5a51ac92f7e2be6cd65b5b4" translate="yes" xml:space="preserve">
          <source>Function types with generics</source>
          <target state="translated">Tipos de función con genéricos</target>
        </trans-unit>
        <trans-unit id="3f7381fb33fff215013d059733e6eb1073506aa9" translate="yes" xml:space="preserve">
          <source>Functions are structurally typed</source>
          <target state="translated">Las funciones están tipificadas estructuralmente</target>
        </trans-unit>
        <trans-unit id="7a2f0bb1d54ff79eaaada0c3765d727c899bb522" translate="yes" xml:space="preserve">
          <source>Functions can create generics by adding the type parameter list &lt;code&gt;&amp;lt;T&amp;gt;&lt;/code&gt; before the function parameter list.</source>
          <target state="translated">Las funciones pueden crear gen&amp;eacute;ricos agregando la lista de par&amp;aacute;metros de tipo &lt;code&gt;&amp;lt;T&amp;gt;&lt;/code&gt; antes de la lista de par&amp;aacute;metros de la funci&amp;oacute;n.</target>
        </trans-unit>
        <trans-unit id="d02cbcdf0a2a69aa715691fa238dfa6ccdc16a05" translate="yes" xml:space="preserve">
          <source>Functions can have optional parameters where a question mark &lt;code&gt;?&lt;/code&gt; comes after the parameter name.</source>
          <target state="translated">Las funciones pueden tener par&amp;aacute;metros opcionales donde un signo de interrogaci&amp;oacute;n &lt;code&gt;?&lt;/code&gt; viene despu&amp;eacute;s del nombre del par&amp;aacute;metro.</target>
        </trans-unit>
        <trans-unit id="cf63b2e1b9aafbb240f7e1deca5b67f9988ef437" translate="yes" xml:space="preserve">
          <source>Functions have two places where types are applied: Parameters (input) and the return value (output).</source>
          <target state="translated">Las funciones tienen dos lugares donde se aplican los tipos:Parámetros (entrada)y el valor de retorno (salida).</target>
        </trans-unit>
        <trans-unit id="3c12be471a4e96534a926aacb0df7453eb2cbcca" translate="yes" xml:space="preserve">
          <source>Functions with generics</source>
          <target state="translated">Funciona con los genéricos</target>
        </trans-unit>
        <trans-unit id="0c9ce2261f9d73896e79a1421f34d061659a9e49" translate="yes" xml:space="preserve">
          <source>General Best Practices</source>
          <target state="translated">Mejores prácticas generales</target>
        </trans-unit>
        <trans-unit id="67ac7fcb0777deb807997c9f4b924988984d0fbd" translate="yes" xml:space="preserve">
          <source>Generally, the type you should first try when adding a type for the children of your React component is &lt;a href=&quot;../types#toc-react-node&quot;&gt;&lt;code&gt;React.Node&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">Generalmente, el tipo que debe probar primero al agregar un tipo para los hijos de su componente React es &lt;a href=&quot;../types#toc-react-node&quot;&gt; &lt;code&gt;React.Node&lt;/code&gt; &lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="6e69a2fc2c745899f35839a75d651978ee056569" translate="yes" xml:space="preserve">
          <source>Generic Types</source>
          <target state="translated">Tipos genéricos</target>
        </trans-unit>
        <trans-unit id="f9d7e3ac4698ff4fedd01cf6807aee7a9efac823" translate="yes" xml:space="preserve">
          <source>Generic types act as bounds</source>
          <target state="translated">Los tipos genéricos actúan como límites</target>
        </trans-unit>
        <trans-unit id="f8c73c016669e4acd2b923bc11fc67ea9ad59c62" translate="yes" xml:space="preserve">
          <source>Generic types work a lot like variables or function parameters except that they are used for types. You can use them whenever they are in scope.</source>
          <target state="translated">Los tipos genéricos funcionan de manera muy parecida a las variables o parámetros de función,excepto que se utilizan para los tipos.Puedes usarlos siempre que estén en el ámbito de aplicación.</target>
        </trans-unit>
        <trans-unit id="80dadd86173d0ff3979257793d4e45beb238b6a2" translate="yes" xml:space="preserve">
          <source>Generics</source>
          <target state="translated">Generics</target>
        </trans-unit>
        <trans-unit id="1b3bd820ca45310f82d504b4fd55b7117cc37547" translate="yes" xml:space="preserve">
          <source>Generics (sometimes referred to as polymorphic types) are a way of abstracting a type away.</source>
          <target state="translated">Los genéricos (a veces denominados tipos polimórficos)son una forma de abstraer un tipo.</target>
        </trans-unit>
        <trans-unit id="a6fd94560566e4986674c54d1df1a19a7110e683" translate="yes" xml:space="preserve">
          <source>Generics act like variables</source>
          <target state="translated">Los genéricos actúan como variables</target>
        </trans-unit>
        <trans-unit id="ef394c1226958fc727e62243c4cb43ac0e4cd5cf" translate="yes" xml:space="preserve">
          <source>Generics allow you to hold onto the more specific type while adding a constraint. In this way types on generics act as &amp;ldquo;bounds&amp;rdquo;.</source>
          <target state="translated">Los gen&amp;eacute;ricos le permiten mantener el tipo m&amp;aacute;s espec&amp;iacute;fico mientras agrega una restricci&amp;oacute;n. De esta manera, los tipos de gen&amp;eacute;ricos act&amp;uacute;an como &quot;l&amp;iacute;mites&quot;.</target>
        </trans-unit>
        <trans-unit id="4aadf67c9db3328742fd5a86fc24b21a1a76c43e" translate="yes" xml:space="preserve">
          <source>Generics can be used within functions, function types, classes, type aliases, and interfaces.</source>
          <target state="translated">Los genéricos pueden ser usados dentro de las funciones,tipos de funciones,clases,tipos de alias e interfaces.</target>
        </trans-unit>
        <trans-unit id="7faae52c2d4462ab2eaff369392d43e6c1364b8c" translate="yes" xml:space="preserve">
          <source>Generics sometimes allow you to pass types in like arguments to a function. These are known as parameterized generics (or parametric polymorphism).</source>
          <target state="translated">Los genéricos a veces permiten pasar tipos como argumentos a una función.Estos se conocen como genéricos parametrizados (o polimorfismo paramétrico).</target>
        </trans-unit>
        <trans-unit id="0d8ccea6ce861b3356a8a1401bc73a5e10e8c648" translate="yes" xml:space="preserve">
          <source>Generics track values around</source>
          <target state="translated">Los genéricos rastrean los valores alrededor de</target>
        </trans-unit>
        <trans-unit id="cfcb0c850227d5c43ba836a3ca78b5b97f74a944" translate="yes" xml:space="preserve">
          <source>Gets the instance type for a React element. The instance will be different for various component types:</source>
          <target state="translated">Obtiene el tipo de instancia para un elemento de React.La instancia será diferente para varios tipos de componentes:</target>
        </trans-unit>
        <trans-unit id="236e116424d14004e90c27673c86a646ef19fa8e" translate="yes" xml:space="preserve">
          <source>Gets the props for a React element type, &lt;em&gt;without&lt;/em&gt; preserving the optionality of &lt;code&gt;defaultProps&lt;/code&gt;. &lt;code&gt;typeof Component&lt;/code&gt; could be the type of a React class component, a stateless functional component, or a JSX intrinsic string. This type is used for the &lt;code&gt;props&lt;/code&gt; property on &lt;a href=&quot;#toc-react-element&quot;&gt;&lt;code&gt;React.Element&amp;lt;typeof Component&amp;gt;&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">Obtiene los accesorios para un tipo de elemento React, &lt;em&gt;sin&lt;/em&gt; preservar la opcionalidad de &lt;code&gt;defaultProps&lt;/code&gt; . &lt;code&gt;typeof Component&lt;/code&gt; podr&amp;iacute;a ser el tipo de un componente de la clase React, un componente funcional sin estado o una cadena intr&amp;iacute;nseca JSX. Este tipo se usa para la propiedad &lt;code&gt;props&lt;/code&gt; en &lt;a href=&quot;#toc-react-element&quot;&gt; &lt;code&gt;React.Element&amp;lt;typeof Component&amp;gt;&lt;/code&gt; &lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="010b85ad56b34c34c7c2a3b2436c740e30428ed5" translate="yes" xml:space="preserve">
          <source>Getting Started</source>
          <target state="translated">Empezando</target>
        </trans-unit>
        <trans-unit id="0ea124ff781dabd2f0647eac33da1b5dda4dac00" translate="yes" xml:space="preserve">
          <source>Given a type &lt;code&gt;T&lt;/code&gt; representing instances of a class &lt;code&gt;C&lt;/code&gt;, the type &lt;code&gt;Class&amp;lt;T&amp;gt;&lt;/code&gt; is the type of the class &lt;code&gt;C&lt;/code&gt;. For example:</source>
          <target state="translated">Dado un tipo &lt;code&gt;T&lt;/code&gt; que representa instancias de una clase &lt;code&gt;C&lt;/code&gt; , el tipo &lt;code&gt;Class&amp;lt;T&amp;gt;&lt;/code&gt; es el tipo de la clase &lt;code&gt;C&lt;/code&gt; . Por ejemplo:</target>
        </trans-unit>
        <trans-unit id="851df84ffecc429e99c3dd230d56812d1b5b6739" translate="yes" xml:space="preserve">
          <source>Have a question about using Flow? Check here first!</source>
          <target state="translated">¿Tiene alguna pregunta sobre el uso de Flow? ¡Comprueba aquí primero!</target>
        </trans-unit>
        <trans-unit id="2ddc501d850ae3a0f6c0d81b4cee3f2a7263c9d2" translate="yes" xml:space="preserve">
          <source>Here &lt;code&gt;props.children&lt;/code&gt; will be an array of arrays. Specifically &lt;code&gt;props.children&lt;/code&gt; will be &lt;code&gt;[[1, 2], [3, 4]]&lt;/code&gt;.</source>
          <target state="translated">Aqu&amp;iacute; &lt;code&gt;props.children&lt;/code&gt; ser&amp;aacute; una matriz de matrices. Espec&amp;iacute;ficamente, los &lt;code&gt;props.children&lt;/code&gt; ser&amp;aacute;n &lt;code&gt;[[1, 2], [3, 4]]&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="3827f0f684068e8b08cda57d14ca02f9de4d36d2" translate="yes" xml:space="preserve">
          <source>Here is an example of &lt;code&gt;React.Node&lt;/code&gt; as the prop type for children:</source>
          <target state="translated">Aqu&amp;iacute; hay un ejemplo de &lt;code&gt;React.Node&lt;/code&gt; como el tipo de accesorio para ni&amp;ntilde;os:</target>
        </trans-unit>
        <trans-unit id="c801032aa18d6a477cf713f1624762e4f08d3af9" translate="yes" xml:space="preserve">
          <source>Here is an example of &lt;code&gt;React.Node&lt;/code&gt; being used as the return type to &lt;code&gt;render()&lt;/code&gt;:</source>
          <target state="translated">Aqu&amp;iacute; hay un ejemplo de &lt;code&gt;React.Node&lt;/code&gt; que se usa como tipo de retorno para &lt;code&gt;render()&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="bdd7a2f9607a075cf7fd0924bbed317c0eec84d4" translate="yes" xml:space="preserve">
          <source>Here is an example of how you could use the &lt;code&gt;.flowconfig&lt;/code&gt; directives.</source>
          <target state="translated">Aqu&amp;iacute; hay un ejemplo de c&amp;oacute;mo podr&amp;iacute;a usar las directivas &lt;code&gt;.flowconfig&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="aa528d54a7d8103f41c0bfd3b9b8fae4b3e30c90" translate="yes" xml:space="preserve">
          <source>Here is how you may use &lt;code&gt;React.ComponentType&amp;lt;Props&amp;gt;&lt;/code&gt; with &lt;a href=&quot;#toc-react-element&quot;&gt;&lt;code&gt;React.Element&amp;lt;typeof Component&amp;gt;&lt;/code&gt;&lt;/a&gt; to construct a component with a specific set of props:</source>
          <target state="translated">As&amp;iacute; es como puede usar &lt;code&gt;React.ComponentType&amp;lt;Props&amp;gt;&lt;/code&gt; con &lt;a href=&quot;#toc-react-element&quot;&gt; &lt;code&gt;React.Element&amp;lt;typeof Component&amp;gt;&lt;/code&gt; &lt;/a&gt; para construir un componente con un conjunto espec&amp;iacute;fico de accesorios:</target>
        </trans-unit>
        <trans-unit id="535fabe7a4cb455852726d03b7da421c7856e385" translate="yes" xml:space="preserve">
          <source>Here is how you would type the &lt;code&gt;&amp;lt;Route&amp;gt;&lt;/code&gt; component in Flow:</source>
          <target state="translated">As&amp;iacute; es como escribir&amp;iacute;as el componente &lt;code&gt;&amp;lt;Route&amp;gt;&lt;/code&gt; en Flow:</target>
        </trans-unit>
        <trans-unit id="af8389a6ecc318bb6ebf315d56db66ecc756233e" translate="yes" xml:space="preserve">
          <source>Here the input value can only be a &lt;code&gt;number&lt;/code&gt;.</source>
          <target state="translated">Aqu&amp;iacute; el valor de entrada solo puede ser un &lt;code&gt;number&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="25234e5462d0d0721c9abf9cb778d69feaeba093" translate="yes" xml:space="preserve">
          <source>Here the input value could be either a &lt;code&gt;string&lt;/code&gt; or a &lt;code&gt;number&lt;/code&gt;.</source>
          <target state="translated">Aqu&amp;iacute;, el valor de entrada podr&amp;iacute;a ser una &lt;code&gt;string&lt;/code&gt; o un &lt;code&gt;number&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="87b8649ae5d0883f7fd9dfda5cfcf802e8591bd6" translate="yes" xml:space="preserve">
          <source>Here the passed in value is an unknown type, it could be any type and the function would still work.</source>
          <target state="translated">Aquí el valor pasado es un tipo desconocido,podría ser cualquier tipo y la función seguiría funcionando.</target>
        </trans-unit>
        <trans-unit id="17a73674e1d8aaed9bcfe2a7bd9df88099e17a9f" translate="yes" xml:space="preserve">
          <source>Here the return type will be the same as the type of whatever value is passed into the function.</source>
          <target state="translated">Aquí el tipo de retorno será el mismo que el tipo de cualquier valor que se pase a la función.</target>
        </trans-unit>
        <trans-unit id="13bad31d551f7ce53902bee6f5b588e74599b66e" translate="yes" xml:space="preserve">
          <source>Here you can see a pseudo-example of a nominal type system erroring out when you&amp;rsquo;re trying to put a &lt;code&gt;Bar&lt;/code&gt; where a &lt;code&gt;Foo&lt;/code&gt; is required because they have different names.</source>
          <target state="translated">Aqu&amp;iacute; puede ver un pseudoejemplo de un sistema de tipo nominal que falla cuando intenta colocar una &lt;code&gt;Bar&lt;/code&gt; donde se requiere un &lt;code&gt;Foo&lt;/code&gt; porque tienen nombres diferentes.</target>
        </trans-unit>
        <trans-unit id="098e77f7a550b2cf510ca26c4aeb1fba8e8580b9" translate="yes" xml:space="preserve">
          <source>Here you can see a pseudo-example of a structural type system passing when you&amp;rsquo;re trying to put a Bar where a &lt;code&gt;Foo&lt;/code&gt; is required because their structure is exactly the same.</source>
          <target state="translated">Aqu&amp;iacute; puede ver un pseudoejemplo de un sistema de tipo estructural que pasa cuando intenta colocar una barra donde se requiere un &lt;code&gt;Foo&lt;/code&gt; porque su estructura es exactamente la misma.</target>
        </trans-unit>
        <trans-unit id="9d42546ad988361114be19ba4faa6ffd09713b98" translate="yes" xml:space="preserve">
          <source>Here you can see the syntax for arrow functions with and without types added.</source>
          <target state="translated">Aquí puede ver la sintaxis de las funciones de las flechas con y sin tipos añadidos.</target>
        </trans-unit>
        <trans-unit id="d3699f0333712613b9e8dd3485f37fca22346ed0" translate="yes" xml:space="preserve">
          <source>Here you can see the syntax for function declarations with and without types added.</source>
          <target state="translated">Aquí puede ver la sintaxis de las declaraciones de función con y sin tipos añadidos.</target>
        </trans-unit>
        <trans-unit id="56b22036dfc0a76c4f96b2794020b9590adaecf9" translate="yes" xml:space="preserve">
          <source>Here you can see the syntax for writing types that are functions.</source>
          <target state="translated">Aquí puede ver la sintaxis de los tipos de escritura que son funciones.</target>
        </trans-unit>
        <trans-unit id="7fac12a07532dfa0ddfc895f9ad228b8e092de33" translate="yes" xml:space="preserve">
          <source>Here&amp;rsquo;s a possible declaration of this function, which is very similar to our first example:</source>
          <target state="translated">Aqu&amp;iacute; hay una posible declaraci&amp;oacute;n de esta funci&amp;oacute;n, que es muy similar a nuestro primer ejemplo:</target>
        </trans-unit>
        <trans-unit id="fbf28fb6962ce31b4060a59b6e700daf856a84f6" translate="yes" xml:space="preserve">
          <source>Here, &lt;code&gt;showFoo&lt;/code&gt; is a boolean which controls whether or not to display the &lt;code&gt;&amp;lt;Foo /&amp;gt;&lt;/code&gt; element. If &lt;code&gt;showFoo&lt;/code&gt; is true, then this evaluates to &lt;code&gt;{&amp;lt;Foo/&amp;gt;}&lt;/code&gt;. If &lt;code&gt;showFoo&lt;/code&gt; is false, then this evaluates to &lt;code&gt;{false}&lt;/code&gt;, which doesn&amp;rsquo;t display anything.</source>
          <target state="translated">Aqu&amp;iacute;, &lt;code&gt;showFoo&lt;/code&gt; es un booleano que controla si se muestra o no el elemento &lt;code&gt;&amp;lt;Foo /&amp;gt;&lt;/code&gt; . Si &lt;code&gt;showFoo&lt;/code&gt; es verdadero, esto se eval&amp;uacute;a como &lt;code&gt;{&amp;lt;Foo/&amp;gt;}&lt;/code&gt; . Si &lt;code&gt;showFoo&lt;/code&gt; es falso, esto se eval&amp;uacute;a como &lt;code&gt;{false}&lt;/code&gt; , que no muestra nada.</target>
        </trans-unit>
        <trans-unit id="a9f4df1640a61e73a368f05d84051cfbe689fd43" translate="yes" xml:space="preserve">
          <source>Here, Flow will complain on the &lt;code&gt;export&lt;/code&gt;, asking for a type annotation. Flow wants you to annotate exports returned by a generic function. The type of &lt;code&gt;Array.prototype.map&lt;/code&gt; is &lt;code&gt;map&amp;lt;U&amp;gt;(callbackfn: (value: T, index: number, array: Array&amp;lt;T&amp;gt;) =&amp;gt; U, thisArg?: any): Array&amp;lt;U&amp;gt;&lt;/code&gt;. The &lt;code&gt;&amp;lt;U&amp;gt;&lt;/code&gt; corresponds to what is called a &lt;a href=&quot;types/generics&quot;&gt;generic&lt;/a&gt;, to express the fact that the type of the function passed to map is linked to the type of the array.</source>
          <target state="translated">Aqu&amp;iacute;, Flow se quejar&amp;aacute; de la &lt;code&gt;export&lt;/code&gt; aci&amp;oacute;n y solicitar&amp;aacute; una anotaci&amp;oacute;n de tipo. Flow quiere que anotes las exportaciones devueltas por una funci&amp;oacute;n gen&amp;eacute;rica. El tipo de &lt;code&gt;Array.prototype.map&lt;/code&gt; es &lt;code&gt;map&amp;lt;U&amp;gt;(callbackfn: (value: T, index: number, array: Array&amp;lt;T&amp;gt;) =&amp;gt; U, thisArg?: any): Array&amp;lt;U&amp;gt;&lt;/code&gt; . La &lt;code&gt;&amp;lt;U&amp;gt;&lt;/code&gt; corresponde a lo que se llama &lt;a href=&quot;types/generics&quot;&gt;gen&amp;eacute;rico&lt;/a&gt; , para expresar el hecho de que el tipo de funci&amp;oacute;n pasada al mapa est&amp;aacute; vinculado al tipo de la matriz.</target>
        </trans-unit>
        <trans-unit id="e5b064c32fdb14bab47fb625332f9226491deb2f" translate="yes" xml:space="preserve">
          <source>Here, Flow will let you refine &lt;code&gt;obj.n&lt;/code&gt; from &lt;code&gt;?number&lt;/code&gt; to &lt;code&gt;number&lt;/code&gt;. Note that the refinement here is on the property &lt;code&gt;n&lt;/code&gt; of &lt;code&gt;obj&lt;/code&gt;, rather than &lt;code&gt;obj&lt;/code&gt; itself.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ee8ceb048fbb5cd5fd5303e935623ce260603c2b" translate="yes" xml:space="preserve">
          <source>Here, a work around would be to extract the part of the value you&amp;rsquo;re interested in, or to move the if check inside the &lt;code&gt;setTimeout&lt;/code&gt; call:</source>
          <target state="translated">Aqu&amp;iacute;, una &lt;code&gt;setTimeout&lt;/code&gt; ser&amp;iacute;a extraer la parte del valor que le interesa o mover el cheque if dentro de la llamada setTimeout :</target>
        </trans-unit>
        <trans-unit id="cc00b92fae87138445b8db76c9ab4f421cd563cb" translate="yes" xml:space="preserve">
          <source>Higher-order Components</source>
          <target state="translated">Componentes de orden superior</target>
        </trans-unit>
        <trans-unit id="56aaba1cf5690539df9af96788a9ada0cfeb56e1" translate="yes" xml:space="preserve">
          <source>How to apply the codemod</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eabf86d5d7c170643e0bbaa29d04096724e7425f" translate="yes" xml:space="preserve">
          <source>How to upgrade your codebase to Types-First</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9afcd5258af293b3e8dd22ec752eba0c2f251483" translate="yes" xml:space="preserve">
          <source>How to use Flow from the command line. Including how to manage the Flow background process.</source>
          <target state="translated">Cómo usar &quot;Flujo desde la línea de comandos&quot;.Incluyendo cómo manejar el proceso de fondo de Flow.</target>
        </trans-unit>
        <trans-unit id="c6b59c452c954d9defbf04ad89b295d7369263a0" translate="yes" xml:space="preserve">
          <source>However it is limited in that this string only describes so much about the type.</source>
          <target state="translated">Sin embargo,está limitada en el sentido de que esta cadena sólo describe un poco sobre el tipo.</target>
        </trans-unit>
        <trans-unit id="a35ae847b7dbe7d8fd62853289ce430ad193bce8" translate="yes" xml:space="preserve">
          <source>However sometimes there isn&amp;rsquo;t a pre-existing libdef or you have third-party code that isn&amp;rsquo;t public and/or you really just need to write a libdef yourself. To do this you&amp;rsquo;ll start by creating a &lt;code&gt;.js&lt;/code&gt; file for each libdef you&amp;rsquo;re going to write and put them in the &lt;code&gt;/flow-typed&lt;/code&gt; directory at the root of your project. In these libdef file(s) you&amp;rsquo;ll use a special set of Flow syntax (explained below) to describe the interfaces of the relevant third-party code.</source>
          <target state="translated">Sin embargo, a veces no hay una libdef preexistente o tiene un c&amp;oacute;digo de terceros que no es p&amp;uacute;blico y / o realmente solo necesita escribir una libdef usted mismo. Para hacer esto, comenzar&amp;aacute; creando un archivo &lt;code&gt;.js&lt;/code&gt; para cada libdef que va a escribir y los pondr&amp;aacute; en el directorio &lt;code&gt;/flow-typed&lt;/code&gt; en la ra&amp;iacute;z de su proyecto. En estos archivos libdef, utilizar&amp;aacute; un conjunto especial de sintaxis de flujo (que se explica a continuaci&amp;oacute;n) para describir las interfaces del c&amp;oacute;digo de terceros relevante.</target>
        </trans-unit>
        <trans-unit id="1dabc8a9daa16baa576a945117465517c0ab5c57" translate="yes" xml:space="preserve">
          <source>However, Flow has &lt;a href=&quot;types/functions#toc-predicate-functions&quot;&gt;predicates functions&lt;/a&gt; that can do these checks via &lt;code&gt;%checks&lt;/code&gt;.</source>
          <target state="translated">Sin embargo, Flow tiene &lt;a href=&quot;types/functions#toc-predicate-functions&quot;&gt;funciones de predicados&lt;/a&gt; que pueden realizar estas comprobaciones a trav&amp;eacute;s de &lt;code&gt;%checks&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="27bb39d29e968deb761d41de85ea44344a3e8143" translate="yes" xml:space="preserve">
          <source>However, Flow will flag an error in the code below:</source>
          <target state="translated">Sin embargo,Flow marcará un error en el código de abajo:</target>
        </trans-unit>
        <trans-unit id="067267fea785830c12b74c19441557fb234dc53a" translate="yes" xml:space="preserve">
          <source>However, evolving and growing a JavaScript codebase is notoriously challenging. Developers cannot move fast when they break stuff. They hit frequent interruptions, spending a lot of time debugging silly mistakes, unraveling assumptions and guarantees made by libraries written by others, etc.</source>
          <target state="translated">Sin embargo,la evolución y el crecimiento de una base de código JavaScript es notoriamente difícil.Los desarrolladores no pueden moverse rápido cuando rompen cosas.Se topan con interrupciones frecuentes,pasan mucho tiempo depurando errores tontos,desenredando suposiciones y garantías hechas por bibliotecas escritas por otros,etc.</target>
        </trans-unit>
        <trans-unit id="0a3b394df7ec3cd961692cc5e230a54570e64cb9" translate="yes" xml:space="preserve">
          <source>However, if you need to opt-out of the type checker, and don&amp;rsquo;t want to go all the way to &lt;code&gt;any&lt;/code&gt;, you can instead use &lt;code&gt;(...args: Array&amp;lt;any&amp;gt;) =&amp;gt; any&lt;/code&gt;. (Note that &lt;a href=&quot;../any&quot;&gt;&lt;code&gt;any&lt;/code&gt;&lt;/a&gt; is unsafe and should be avoided). For historical reasons, the &lt;code&gt;Function&lt;/code&gt; keyword is still available.</source>
          <target state="translated">Sin embargo, si necesita darse de baja del comprobador de tipos y no quiere ir hasta el final a &lt;code&gt;any&lt;/code&gt; , puede usar &lt;code&gt;(...args: Array&amp;lt;any&amp;gt;) =&amp;gt; any&lt;/code&gt; . (Tenga en cuenta que &lt;a href=&quot;../any&quot;&gt; &lt;code&gt;any&lt;/code&gt; &lt;/a&gt; es inseguro y debe evitarse). Por razones hist&amp;oacute;ricas, la palabra clave &lt;code&gt;Function&lt;/code&gt; todav&amp;iacute;a est&amp;aacute; disponible.</target>
        </trans-unit>
        <trans-unit id="6d77a143534e87e9a163d3e3ce0aca8c4103e016" translate="yes" xml:space="preserve">
          <source>However, if you need to opt-out of the type checker, and don&amp;rsquo;t want to go all the way to &lt;code&gt;any&lt;/code&gt;, you could use &lt;code&gt;{[key:string]:any}&lt;/code&gt;. (Note that &lt;a href=&quot;../any&quot;&gt;&lt;code&gt;any&lt;/code&gt;&lt;/a&gt; is unsafe and should be avoided). For historical reasons, the &lt;code&gt;Object&lt;/code&gt; keyword is still available. In previous versions of Flow, &lt;code&gt;Object&lt;/code&gt; was the same as &lt;code&gt;{[key:string]:any}&lt;/code&gt;.</source>
          <target state="translated">Sin embargo, si necesita de exclusi&amp;oacute;n del comprobador de tipos, y no quiero ir todo el camino a &lt;code&gt;any&lt;/code&gt; , se puede utilizar &lt;code&gt;{[key:string]:any}&lt;/code&gt; . (Tenga en cuenta que &lt;a href=&quot;../any&quot;&gt; &lt;code&gt;any&lt;/code&gt; &lt;/a&gt; es inseguro y debe evitarse). Por razones hist&amp;oacute;ricas, la palabra clave &lt;code&gt;Object&lt;/code&gt; todav&amp;iacute;a est&amp;aacute; disponible. En versiones anteriores de Flow, &lt;code&gt;Object&lt;/code&gt; era lo mismo que &lt;code&gt;{[key:string]:any}&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="f1e2c14006b12ab5491178ce01f3a9550f02756c" translate="yes" xml:space="preserve">
          <source>However, if you want to do anything more powerful with the React children API then you will need a strong intuition of how React handles children. Let us look at a couple of cases before continuing to help build that intuition.</source>
          <target state="translated">Sin embargo,si quieres hacer algo más potente con la API de React para niños,entonces necesitarás una fuerte intuición de cómo React maneja a los niños.Veamos un par de casos antes de seguir ayudando a construir esa intuición.</target>
        </trans-unit>
        <trans-unit id="f5931dcbe633762171ccee54a6f7889d2181ea61" translate="yes" xml:space="preserve">
          <source>However, it currently lacks support for on-the-fly type-checking (showing your type errors before you save your file).</source>
          <target state="translated">Sin embargo,actualmente carece de soporte para la verificación de tipos sobre la marcha (mostrando los errores de tipo antes de guardar el archivo).</target>
        </trans-unit>
        <trans-unit id="84c821442db435688729316ed5285a4b00200528" translate="yes" xml:space="preserve">
          <source>However, it is not valid to use an object containing an &lt;code&gt;Employee&lt;/code&gt; instance where an object containing a &lt;code&gt;Person&lt;/code&gt; instance is expected.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aec4e47a3799d3abd4efe1fc37df16b029a38bb9" translate="yes" xml:space="preserve">
          <source>However, it is not valid to use an object containing an &lt;code&gt;Person&lt;/code&gt; instance where an object containing a &lt;code&gt;Employee&lt;/code&gt; instance is expected.</source>
          <target state="translated">Sin embargo, no es v&amp;aacute;lido utilizar un objeto que contenga una instancia de &lt;code&gt;Person&lt;/code&gt; donde se espera un objeto que contenga una instancia de &lt;code&gt;Employee&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="d215123d1e8037cb7806bba06a88351e172e211e" translate="yes" xml:space="preserve">
          <source>However, it&amp;rsquo;s often useful to know that a property is definitely absent.</source>
          <target state="translated">Sin embargo, a menudo es &amp;uacute;til saber que definitivamente una propiedad est&amp;aacute; ausente.</target>
        </trans-unit>
        <trans-unit id="9313de9dcdc57923e98881e802d0f7c94f24fa15" translate="yes" xml:space="preserve">
          <source>However, sometimes a Flow user might not care about all the code. If they are editing a file &lt;code&gt;foo.js&lt;/code&gt;, they might only want Flow to typecheck the subset of the repository needed to answer questions about &lt;code&gt;foo.js&lt;/code&gt;. Since Flow would only check a smaller number of files, this would be faster. This is the motivation behind Flow&amp;rsquo;s lazy modes.</source>
          <target state="translated">Sin embargo, a veces a un usuario de Flow puede no importarle todo el c&amp;oacute;digo. Si est&amp;aacute;n editando un archivo &lt;code&gt;foo.js&lt;/code&gt; , que s&amp;oacute;lo puede ser que desee flujo a typecheck el subconjunto del dep&amp;oacute;sito necesario para responder preguntas sobre &lt;code&gt;foo.js&lt;/code&gt; . Dado que Flow solo verificar&amp;iacute;a un n&amp;uacute;mero menor de archivos, esto ser&amp;iacute;a m&amp;aacute;s r&amp;aacute;pido. Esta es la motivaci&amp;oacute;n detr&amp;aacute;s de los modos perezosos de Flow.</target>
        </trans-unit>
        <trans-unit id="0388504fdb624bb29d41874d436a861dd6df6661" translate="yes" xml:space="preserve">
          <source>However, there is also a fourth category.</source>
          <target state="translated">Sin embargo,también hay una cuarta categoría.</target>
        </trans-unit>
        <trans-unit id="bfac9f3c31434613c3dc25580cc54920b60f8937" translate="yes" xml:space="preserve">
          <source>However, this only happens with the inferred type. If you specify the literal type, it will be used in &lt;code&gt;typeof&lt;/code&gt;.</source>
          <target state="translated">Sin embargo, esto solo ocurre con el tipo inferido. Si especifica el tipo literal, se usar&amp;aacute; en &lt;code&gt;typeof&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="60d9e12a6689ca1896d012bac4c1760061cf255c" translate="yes" xml:space="preserve">
          <source>However, to get around this you could use &lt;strong&gt;exact object types&lt;/strong&gt;.</source>
          <target state="translated">Sin embargo, para evitar esto, puede usar &lt;strong&gt;tipos de objetos exactos&lt;/strong&gt; .</target>
        </trans-unit>
        <trans-unit id="bf88ecdb532f0e02d70968558133c0d7b18ba5f0" translate="yes" xml:space="preserve">
          <source>However, type refinements can be lost. For instance, calling a function after refining the type of an object&amp;rsquo;s property will invalidate this refinement. Consult the &lt;a href=&quot;https://flow.org/en/lang/refinements/#toc-refinement-invalidations&quot;&gt;Refinement Invalidations&lt;/a&gt; docs for more details, to understand why Flow works this way, and how you can avoid this common pitfall.</source>
          <target state="translated">Sin embargo, se pueden perder los refinamientos de tipo. Por ejemplo, llamar a una funci&amp;oacute;n despu&amp;eacute;s de refinar el tipo de propiedad de un objeto invalidar&amp;aacute; este refinamiento. Consulte los documentos de &lt;a href=&quot;https://flow.org/en/lang/refinements/#toc-refinement-invalidations&quot;&gt;invalidaciones de refinamiento&lt;/a&gt; para obtener m&amp;aacute;s detalles, para comprender por qu&amp;eacute; Flow funciona de esta manera y c&amp;oacute;mo puede evitar este error com&amp;uacute;n.</target>
        </trans-unit>
        <trans-unit id="5fd3ba2f001a6fd526870acba3decc8fde5c658e" translate="yes" xml:space="preserve">
          <source>However, you can use the &lt;code&gt;+&lt;/code&gt; operator on strings or numbers, so this would also be valid.</source>
          <target state="translated">Sin embargo, puede usar el operador &lt;code&gt;+&lt;/code&gt; en cadenas o n&amp;uacute;meros, por lo que esto tambi&amp;eacute;n ser&amp;iacute;a v&amp;aacute;lido.</target>
        </trans-unit>
        <trans-unit id="e35f724efeda49c47595a6cc2bbf2976ebcaafa9" translate="yes" xml:space="preserve">
          <source>I checked that &lt;code&gt;foo.bar&lt;/code&gt; is not &lt;code&gt;null&lt;/code&gt;, but Flow still thinks it is. Why does this happen and how can I fix it?</source>
          <target state="translated">Verifiqu&amp;eacute; que &lt;code&gt;foo.bar&lt;/code&gt; no es &lt;code&gt;null&lt;/code&gt; , pero Flow todav&amp;iacute;a cree que lo es. &amp;iquest;Por qu&amp;eacute; sucede esto y c&amp;oacute;mo puedo solucionarlo?</target>
        </trans-unit>
        <trans-unit id="6081ec65c275b7812a118a8d9487bec229a111d3" translate="yes" xml:space="preserve">
          <source>I checked that my object is of type A, so why does Flow still believe it&amp;rsquo;s A | B?</source>
          <target state="translated">Verifiqu&amp;eacute; que mi objeto es de tipo A, entonces &amp;iquest;por qu&amp;eacute; Flow todav&amp;iacute;a cree que es A | &amp;iquest;SI?</target>
        </trans-unit>
        <trans-unit id="ab8ec6fa322ac3cb67fd8d12de1df1c19353b3b3" translate="yes" xml:space="preserve">
          <source>I got a &amp;ldquo;Missing type annotation&amp;rdquo; error. Where does it come from?</source>
          <target state="translated">Recib&amp;iacute; un error de &quot;Anotaci&amp;oacute;n de tipo faltante&quot;. &amp;iquest;De d&amp;oacute;nde viene?</target>
        </trans-unit>
        <trans-unit id="547872d29b34bba7a1f46637da9812595a6bd96e" translate="yes" xml:space="preserve">
          <source>I&amp;rsquo;m in a closure and Flow ignores the if check that asserts that &lt;code&gt;foo.bar&lt;/code&gt; is defined. Why?</source>
          <target state="translated">Estoy en un cierre y Flow ignora el cheque if que afirma que &lt;code&gt;foo.bar&lt;/code&gt; est&amp;aacute; definido. &amp;iquest;Por qu&amp;eacute;?</target>
        </trans-unit>
        <trans-unit id="1edc681e64e9bedc4b73a1b622b1bcd9c0221235" translate="yes" xml:space="preserve">
          <source>IDE Integration</source>
          <target state="translated">Integración del IDE</target>
        </trans-unit>
        <trans-unit id="fa469552ea8a6956e0d85bd15a5b32e813e35a32" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;count&lt;/code&gt; is, say, &lt;code&gt;5&lt;/code&gt;, then this displays &amp;ldquo;[5 comments]&amp;rdquo;. However, if &lt;code&gt;count&lt;/code&gt; is &lt;code&gt;0&lt;/code&gt;, then this displays &amp;ldquo;0&amp;rdquo; instead of displaying nothing. (This problem is unique to &lt;code&gt;number&lt;/code&gt; because &lt;code&gt;0&lt;/code&gt; and &lt;code&gt;NaN&lt;/code&gt; are the only falsy values which React renders with a visible result.) This could be subtly dangerous: if this immediately follows another numerical value, it might appear to the user that we have multiplied that value by 10! Instead, we should do a proper conditional check:</source>
          <target state="translated">Si el &lt;code&gt;count&lt;/code&gt; es, digamos, &lt;code&gt;5&lt;/code&gt; , entonces esto muestra &amp;ldquo;[5 comentarios]&amp;rdquo;. Sin embargo, si el &lt;code&gt;count&lt;/code&gt; es &lt;code&gt;0&lt;/code&gt; , esto muestra &quot;0&quot; en lugar de no mostrar nada. (Este problema es exclusivo del &lt;code&gt;number&lt;/code&gt; porque &lt;code&gt;0&lt;/code&gt; y &lt;code&gt;NaN&lt;/code&gt; son los &amp;uacute;nicos valores falsos que React presenta con un resultado visible). Esto podr&amp;iacute;a ser sutilmente peligroso: si esto sigue inmediatamente a otro valor num&amp;eacute;rico, el usuario podr&amp;iacute;a pensar que lo hemos multiplicado. valor por 10! En cambio, deber&amp;iacute;amos hacer una verificaci&amp;oacute;n condicional adecuada:</target>
        </trans-unit>
        <trans-unit id="39ad3382b221945428b6a2b474dff72bfb56707e" translate="yes" xml:space="preserve">
          <source>If Flow doesn&amp;rsquo;t know which index you are trying to access it will return all possible types.</source>
          <target state="translated">Si Flow no sabe a qu&amp;eacute; &amp;iacute;ndice est&amp;aacute; intentando acceder, devolver&amp;aacute; todos los tipos posibles.</target>
        </trans-unit>
        <trans-unit id="2c9c0dec7bafe53d2bbdf7d9959ddffbd2d70581" translate="yes" xml:space="preserve">
          <source>If Flow is unable to figure out what the exact type is for each value, Flow must figure out what every possible value is and check to make sure that the code around it will still work with all of the possible types.</source>
          <target state="translated">Si Flow no puede averiguar cuál es el tipo exacto de cada valor,debe averiguar cuál es cada valor posible y asegurarse de que el código que lo rodea siga funcionando con todos los tipos posibles.</target>
        </trans-unit>
        <trans-unit id="5acb8edfcd1e9dfddc6d2572d420f5b201ed318e" translate="yes" xml:space="preserve">
          <source>If a third-party library that has no type information is used by your project, Flow will treat it like any other untyped dependency and mark all of its exports as &lt;code&gt;any&lt;/code&gt;. Interestingly, this is the only place that Flow will implicitly inject &lt;code&gt;any&lt;/code&gt; into your program.</source>
          <target state="translated">Si su proyecto utiliza una biblioteca de terceros que no tiene informaci&amp;oacute;n de tipo, Flow la tratar&amp;aacute; como cualquier otra dependencia sin tipo y marcar&amp;aacute; todas sus exportaciones como &lt;code&gt;any&lt;/code&gt; . Curiosamente, este es el &amp;uacute;nico lugar donde Flow inyectar&amp;aacute; impl&amp;iacute;citamente &lt;code&gt;any&lt;/code&gt; en su programa.</target>
        </trans-unit>
        <trans-unit id="3eab7b55f7ee09f03bc495ed43d0061345e8a4e3" translate="yes" xml:space="preserve">
          <source>If no suppression comments are specified in your config, Flow will apply one default: &lt;code&gt;// $FlowFixMe&lt;/code&gt;.</source>
          <target state="translated">Si no se especifican comentarios de supresi&amp;oacute;n en su configuraci&amp;oacute;n, Flow aplicar&amp;aacute; uno predeterminado: &lt;code&gt;// $FlowFixMe&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="4ab896379f8da8ccf06ebdb7660f6a676591eb88" translate="yes" xml:space="preserve">
          <source>If statements, functions, and other conditionally run code can all prevent Flow from being able to figure out precisely what a type will be.</source>
          <target state="translated">Si las declaraciones,funciones y otros códigos de ejecución condicional pueden impedir que Flow sea capaz de averiguar con precisión qué tipo será.</target>
        </trans-unit>
        <trans-unit id="b0c36449a1266a96a5edfbb603756422dc5a110c" translate="yes" xml:space="preserve">
          <source>If the values are numbers, then the expression results in a number. If the values are strings, then the expression results in a string. There are a number of different possibilities here, so Flow must look up what the values are.</source>
          <target state="translated">Si los valores son números,entonces la expresión resulta en un número.Si los valores son cadenas,entonces la expresión resulta en una cadena.Hay un número de posibilidades diferentes aquí,así que Flow debe buscar cuáles son los valores.</target>
        </trans-unit>
        <trans-unit id="5f9ff1c70b75813f87b337ccc40269423119c893" translate="yes" xml:space="preserve">
          <source>If these values on the object happen to be other objects, we would have to compare those against one another. We need to compare every value recursively until we can decide if we have a subtype or not.</source>
          <target state="translated">Si estos valores en el objeto resultan ser otros objetos,tendríamos que compararlos entre sí.Necesitamos comparar cada valor recursivamente hasta que podamos decidir si tenemos un subtipo o no.</target>
        </trans-unit>
        <trans-unit id="dd58caf9f3de4a63117623155b1513d6eb2999e3" translate="yes" xml:space="preserve">
          <source>If this option is unspecified, Flow will always use the &lt;code&gt;&quot;main&quot;&lt;/code&gt; field.</source>
          <target state="translated">Si no se especifica esta opci&amp;oacute;n, Flow siempre utilizar&amp;aacute; el campo &lt;code&gt;&quot;main&quot;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="76fac6bacf9983c96845e23339cd8c3466f2c7a7" translate="yes" xml:space="preserve">
          <source>If we cast through any, we can return a type which is more useful.</source>
          <target state="translated">Si logramos atravesar alguno,podemos devolver un tipo que sea más útil.</target>
        </trans-unit>
        <trans-unit id="a6d8ac03b1e20b9356423c837abe3ce7a0f6c016" translate="yes" xml:space="preserve">
          <source>If we now create a declaration file &lt;code&gt;src/Misc.js.flow&lt;/code&gt;, the declarations in it will be used instead of the code in &lt;code&gt;src/Misc.js&lt;/code&gt;. Let&amp;rsquo;s say we have the following declarations in &lt;code&gt;src/Misc.js.flow&lt;/code&gt;.</source>
          <target state="translated">Si ahora creamos un expediente de declaraci&amp;oacute;n &lt;code&gt;src/Misc.js.flow&lt;/code&gt; , las declaraciones en que se utilizar&amp;aacute; en lugar del c&amp;oacute;digo en &lt;code&gt;src/Misc.js&lt;/code&gt; . Digamos que tenemos las siguientes declaraciones en &lt;code&gt;src/Misc.js.flow&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="fff93b7378aeb2b38b2090807b263b7014c5548e" translate="yes" xml:space="preserve">
          <source>If we prevented any code from ever writing a new value to the object through the &lt;code&gt;person&lt;/code&gt; variable, it would be safe to use the &lt;code&gt;employee&lt;/code&gt; variable. Flow provides a syntax for this:</source>
          <target state="translated">Si evit&amp;aacute;ramos que cualquier c&amp;oacute;digo escribiera un nuevo valor en el objeto a trav&amp;eacute;s de la variable &lt;code&gt;person&lt;/code&gt; , ser&amp;iacute;a seguro usar la variable &lt;code&gt;employee&lt;/code&gt; . Flow proporciona una sintaxis para esto:</target>
        </trans-unit>
        <trans-unit id="89439f8728f3f378c6012b648cca5749466a7c15" translate="yes" xml:space="preserve">
          <source>If we want to know whether one type is the subtype of another, we need to look at all the possible values for both types and figure out if the other has a &lt;em&gt;subset&lt;/em&gt; of the values.</source>
          <target state="translated">Si queremos saber si un tipo es el subtipo de otro, necesitamos mirar todos los valores posibles para ambos tipos y averiguar si el otro tiene un &lt;em&gt;subconjunto&lt;/em&gt; de valores.</target>
        </trans-unit>
        <trans-unit id="ffa5a5ea5efd7aef02382e7722a00a675b7afec3" translate="yes" xml:space="preserve">
          <source>If we want to validate what kinds of types are coming into our &lt;code&gt;cloneObject&lt;/code&gt; method from before, we could write the following annotation:</source>
          <target state="translated">Si queremos validar qu&amp;eacute; tipos de tipos est&amp;aacute;n &lt;code&gt;cloneObject&lt;/code&gt; nuestro m&amp;eacute;todo cloneObject desde antes, podr&amp;iacute;amos escribir la siguiente anotaci&amp;oacute;n:</target>
        </trans-unit>
        <trans-unit id="d9caf10c12ea9af18781cd6eef9ed4499bd31209" translate="yes" xml:space="preserve">
          <source>If we write into the &lt;code&gt;who&lt;/code&gt; property of the &lt;code&gt;person&lt;/code&gt; object, we&amp;rsquo;ve also changed the value of &lt;code&gt;employee.who&lt;/code&gt;, which is explicitly annotated to be an &lt;code&gt;Employee&lt;/code&gt; instance.</source>
          <target state="translated">Si escribimos en la propiedad &lt;code&gt;who&lt;/code&gt; del objeto &lt;code&gt;person&lt;/code&gt; , tambi&amp;eacute;n cambiamos el valor de &lt;code&gt;employee.who&lt;/code&gt; , que se anota expl&amp;iacute;citamente como una instancia de &lt;code&gt;Employee&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="c0385bbba6e8a638e5b435911862d68f61aa402d" translate="yes" xml:space="preserve">
          <source>If you add the following to your configuration:</source>
          <target state="translated">Si agregas lo siguiente a tu configuración:</target>
        </trans-unit>
        <trans-unit id="2f6349a666bc7969b6c4063795a6da2f8498120d" translate="yes" xml:space="preserve">
          <source>If you already have a strong intuition about how React children work then feel free to &lt;a href=&quot;#examples&quot;&gt;skip to our examples demonstrating how to type various children patterns that commonly show up in React components&lt;/a&gt;.</source>
          <target state="translated">Si ya tiene una fuerte intuici&amp;oacute;n sobre c&amp;oacute;mo funcionan los ni&amp;ntilde;os de React, no dude en &lt;a href=&quot;#examples&quot;&gt;pasar a nuestros ejemplos que demuestran c&amp;oacute;mo escribir varios patrones de ni&amp;ntilde;os que aparecen com&amp;uacute;nmente en los componentes de React&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="de34b40fb825239268317ed36dbb1e00f0c6608b" translate="yes" xml:space="preserve">
          <source>If you are using CommonJS you can also require React:</source>
          <target state="translated">Si usted está usando CommonJS también puede requerir React:</target>
        </trans-unit>
        <trans-unit id="4d70f00037273b6c8e72fde753e104d54c4cd4b8" translate="yes" xml:space="preserve">
          <source>If you are using the new automatic runtime, use this configuration in your &lt;code&gt;.flowconfig&lt;/code&gt; so that Flow knows to auto-import &lt;code&gt;jsx&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="25ad5bd918b70efe676da28a844513e673fd63f9" translate="yes" xml:space="preserve">
          <source>If you don&amp;rsquo;t have Babel setup already, you can do that by following &lt;a href=&quot;http://babeljs.io/docs/setup/&quot;&gt;this guide&lt;/a&gt;.</source>
          <target state="translated">Si a&amp;uacute;n no tiene la configuraci&amp;oacute;n de Babel, puede hacerlo siguiendo &lt;a href=&quot;http://babeljs.io/docs/setup/&quot;&gt;esta gu&amp;iacute;a&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="8dc080fa173b9111c1d53ac9b64361228ba82d24" translate="yes" xml:space="preserve">
          <source>If you don&amp;rsquo;t have Babel setup already, you can do that by following &lt;a href=&quot;https://babeljs.io/docs/setup/&quot;&gt;this guide&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6a69f0a892b7706fd7d381a10e9090d3be16821d" translate="yes" xml:space="preserve">
          <source>If you don&amp;rsquo;t want to add the type of your element instance you can also use &lt;code&gt;SyntheticEvent&lt;/code&gt; with &lt;em&gt;no&lt;/em&gt; type arguments like so: &lt;code&gt;SyntheticEvent&amp;lt;&amp;gt;&lt;/code&gt;.</source>
          <target state="translated">Si no desea a&amp;ntilde;adir el tipo de elemento de la instancia tambi&amp;eacute;n se puede utilizar &lt;code&gt;SyntheticEvent&lt;/code&gt; con &lt;em&gt;no hay&lt;/em&gt; argumentos de tipo as&amp;iacute;: &lt;code&gt;SyntheticEvent&amp;lt;&amp;gt;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="20d32713b2839dd2173444b2f9b4d7dcc4fe36ce" translate="yes" xml:space="preserve">
          <source>If you enable the &lt;code&gt;nonstrict-import&lt;/code&gt; rule in your Flow Strict configuration (recommended), then all dependencies of a strict file must also be strict. While this the optimal goal, for large pre-existing codebases it may be beneficial to allow some of the benefits of Flow Strict to be put in use before all dependencies are strict.</source>
          <target state="translated">Si habilita la &lt;code&gt;nonstrict-import&lt;/code&gt; estricta en su configuraci&amp;oacute;n Flow Strict (recomendado), todas las dependencias de un archivo estricto tambi&amp;eacute;n deben ser estrictas. Si bien este es el objetivo &amp;oacute;ptimo, para grandes bases de c&amp;oacute;digo preexistentes puede ser beneficioso permitir que algunos de los beneficios de Flow Strict se pongan en uso antes de que todas las dependencias sean estrictas.</target>
        </trans-unit>
        <trans-unit id="7868511a9d06a4f8edf5d7a840c67f28e5c7774f" translate="yes" xml:space="preserve">
          <source>If you have an object that sometimes does not have a property you can make it an &lt;em&gt;optional property&lt;/em&gt; by adding a question mark &lt;code&gt;?&lt;/code&gt; after the property name in the object type.</source>
          <target state="translated">Si tiene un objeto que a veces no tiene una propiedad, &amp;iquest;puede convertirlo en una &lt;em&gt;propiedad opcional&lt;/em&gt; agregando un signo de interrogaci&amp;oacute;n &lt;code&gt;?&lt;/code&gt; despu&amp;eacute;s del nombre de la propiedad en el tipo de objeto.</target>
        </trans-unit>
        <trans-unit id="4f24b7927c9085b7c250ed90664e78d83cbf1e68" translate="yes" xml:space="preserve">
          <source>If you need a return type for your component &lt;code&gt;render()&lt;/code&gt; methods then you should use &lt;code&gt;React.Node&lt;/code&gt;. However, if you need a generic type for a children prop, use &lt;code&gt;?React.Node&lt;/code&gt;; children can be undefined, when &lt;code&gt;render()&lt;/code&gt; can&amp;rsquo;t return &lt;code&gt;undefined&lt;/code&gt;.</source>
          <target state="translated">Si necesita un tipo de retorno para los m&amp;eacute;todos &lt;code&gt;render()&lt;/code&gt; su componente , entonces debe usar &lt;code&gt;React.Node&lt;/code&gt; . Sin embargo, si necesita un tipo gen&amp;eacute;rico para un accesorio infantil, use &lt;code&gt;?React.Node&lt;/code&gt; ; los ni&amp;ntilde;os pueden ser indefinidos, cuando &lt;code&gt;render()&lt;/code&gt; no puede devolver &lt;code&gt;undefined&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="abe11ee943e5dc689dcff158386be0fb8f22ac39" translate="yes" xml:space="preserve">
          <source>If you only want to specify some of the type arguments, you can use &lt;code&gt;_&lt;/code&gt; to let flow infer a type for you:</source>
          <target state="translated">Si solo desea especificar algunos de los argumentos de tipo, puede usar &lt;code&gt;_&lt;/code&gt; para permitir que el flujo infiera un tipo por usted:</target>
        </trans-unit>
        <trans-unit id="a9a33f8497f3a49e54f6d651972b743d6f34b7b8" translate="yes" xml:space="preserve">
          <source>If you pass in a single value then &lt;code&gt;props.children&lt;/code&gt; will be &lt;em&gt;exactly&lt;/em&gt; that single value. Here &lt;code&gt;props.children&lt;/code&gt; will be the number 42. Importantly, &lt;code&gt;props.children&lt;/code&gt; will not be an array! It will be &lt;em&gt;exactly&lt;/em&gt; the number 42.</source>
          <target state="translated">Si pasa un solo valor, &lt;code&gt;props.children&lt;/code&gt; ser&amp;aacute; &lt;em&gt;exactamente&lt;/em&gt; ese &amp;uacute;nico valor. Aqu&amp;iacute; &lt;code&gt;props.children&lt;/code&gt; ser&amp;aacute; el n&amp;uacute;mero 42. Es importante &lt;code&gt;props.children&lt;/code&gt; que props.children no ser&amp;aacute; una matriz. Ser&amp;aacute; &lt;em&gt;exactamente&lt;/em&gt; el n&amp;uacute;mero 42.</target>
        </trans-unit>
        <trans-unit id="0ccc08faa8b174c05c639636e1b782f03a991965" translate="yes" xml:space="preserve">
          <source>If you pass in no children when creating an element of &lt;code&gt;MyComponent&lt;/code&gt; then &lt;code&gt;props.children&lt;/code&gt; will not be set. If you try to access &lt;code&gt;props.children&lt;/code&gt;, it will be undefined.</source>
          <target state="translated">Si pasa en ning&amp;uacute;n ni&amp;ntilde;o cuando crea un elemento de &lt;code&gt;MyComponent&lt;/code&gt; continuaci&amp;oacute;n &lt;code&gt;props.children&lt;/code&gt; no se fijan. Si intenta acceder a &lt;code&gt;props.children&lt;/code&gt; , no estar&amp;aacute; definido.</target>
        </trans-unit>
        <trans-unit id="34ece29e3b89f75f011bf7528980bbd49fd066fa" translate="yes" xml:space="preserve">
          <source>If you then put all your source files in a &lt;code&gt;src&lt;/code&gt; directory you can compile them to another directory by running:</source>
          <target state="translated">Si luego coloca todos sus archivos fuente en un directorio &lt;code&gt;src&lt;/code&gt; , puede compilarlos en otro directorio ejecutando:</target>
        </trans-unit>
        <trans-unit id="18323e1545dbdc368b9c2e5890d8d4ddc724b379" translate="yes" xml:space="preserve">
          <source>If you tried to create a &lt;em&gt;predicate&lt;/em&gt; function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="062faa0de803caab920638881f00d7513c947ac6" translate="yes" xml:space="preserve">
          <source>If you try to export a wrapped component, chances are that you&amp;rsquo;ll run into a missing annotation error:</source>
          <target state="translated">Si intenta exportar un componente empaquetado, es probable que se encuentre con un error de anotaci&amp;oacute;n faltante:</target>
        </trans-unit>
        <trans-unit id="309fcc8f3cc112f1e5bcf47ecdb839392b2659c4" translate="yes" xml:space="preserve">
          <source>If you want a way to opt-out of using the type checker, &lt;code&gt;any&lt;/code&gt; is the way to do it. &lt;strong&gt;Using &lt;code&gt;any&lt;/code&gt; is completely unsafe, and should be avoided whenever possible.&lt;/strong&gt;</source>
          <target state="translated">Si desea una forma de optar por no usar el verificador de tipo, &lt;code&gt;any&lt;/code&gt; es la forma de hacerlo. &lt;strong&gt;Usar &lt;code&gt;any&lt;/code&gt; es completamente inseguro y debe evitarse siempre que sea posible.&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="9b005b1abd0cefd6c2751db329291eac30a6cd45" translate="yes" xml:space="preserve">
          <source>If you want to allow missing properties, use &lt;a href=&quot;../objects#toc-optional-object-type-properties&quot;&gt;optional property&lt;/a&gt; syntax, where the &lt;code&gt;?&lt;/code&gt; is placed &lt;em&gt;before&lt;/em&gt; the colon. It is also possible to combine both syntaxes for an optional maybe type, for example &lt;code&gt;{value?:?number}&lt;/code&gt;.</source>
          <target state="translated">Si desea permitir propiedades que faltan, use la sintaxis de &lt;a href=&quot;../objects#toc-optional-object-type-properties&quot;&gt;propiedad opcional&lt;/a&gt; , &amp;iquest;d&amp;oacute;nde est&amp;aacute; &lt;code&gt;?&lt;/code&gt; se coloca &lt;em&gt;antes&lt;/em&gt; del colon. Tambi&amp;eacute;n es posible combinar ambas sintaxis para un tipo tal vez opcional, por ejemplo, &lt;code&gt;{value?:?number}&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="878ddaff8469be5106c2164f6594ab04997de8e8" translate="yes" xml:space="preserve">
          <source>If you want to check coverage of multiple files at once, Flow offers the &lt;code&gt;batch-coverage&lt;/code&gt; command:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f07f6bae6a75d430c4180eacf06f3bed1b73ebfb" translate="yes" xml:space="preserve">
          <source>If you want to have Flow treat a comment as if it were normal syntax, you can do so by adding a double colon &lt;code&gt;::&lt;/code&gt; to the start of the comment.</source>
          <target state="translated">Si desea que Flow trate un comentario como si fuera una sintaxis normal, puede hacerlo agregando dos puntos dobles &lt;code&gt;::&lt;/code&gt; al comienzo del comentario.</target>
        </trans-unit>
        <trans-unit id="1b5ea02b142df74d92e6a6f721434f19c8193978" translate="yes" xml:space="preserve">
          <source>If you want to make it &lt;code&gt;Array&amp;lt;?T&amp;gt;&lt;/code&gt; you can use parenthesis like: &lt;code&gt;(?Type)[]&lt;/code&gt;</source>
          <target state="translated">Si desea convertirlo en &lt;code&gt;Array&amp;lt;?T&amp;gt;&lt;/code&gt; , puede usar par&amp;eacute;ntesis como: &lt;code&gt;(?Type)[]&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="483317a13682411d8f1235de07f55cf867ba1719" translate="yes" xml:space="preserve">
          <source>If you wanted to use a class structurally you could do that by mixing them with objects as interfaces:</source>
          <target state="translated">Si quisieras usar una clase estructuralmente podrías hacerlo mezclándola con objetos como interfaces:</target>
        </trans-unit>
        <trans-unit id="d14412dd9ea135c9d1850cdc133b518a3da76d23" translate="yes" xml:space="preserve">
          <source>If you would like to add a type annotation to &lt;code&gt;defaultProps&lt;/code&gt; you can define the type as</source>
          <target state="translated">Si desea agregar una anotaci&amp;oacute;n de tipo a &lt;code&gt;defaultProps&lt;/code&gt; , puede definir el tipo como</target>
        </trans-unit>
        <trans-unit id="0bd6e77a91375cf371a7745722382dbe962d5dda" translate="yes" xml:space="preserve">
          <source>If you&amp;rsquo;re using &lt;a href=&quot;https://atom.io&quot;&gt;Atom&lt;/a&gt; you have a bunch of options to integrate Flow into your code base.</source>
          <target state="translated">Si est&amp;aacute; utilizando &lt;a href=&quot;https://atom.io&quot;&gt;Atom&lt;/a&gt; , tiene un mont&amp;oacute;n de opciones para integrar Flow en su base de c&amp;oacute;digo.</target>
        </trans-unit>
        <trans-unit id="67b20f92754a07891c76908aee9f1c454fc3a6ad" translate="yes" xml:space="preserve">
          <source>If your component does have &lt;code&gt;defaultProps&lt;/code&gt;, you don&amp;rsquo;t want to just add &lt;code&gt;Props&lt;/code&gt; as a type argument to &lt;code&gt;trivialHOC&lt;/code&gt; because that will get rid of the &lt;code&gt;defaultProps&lt;/code&gt; information that flow has about your component.</source>
          <target state="translated">Si su componente tiene &lt;code&gt;defaultProps&lt;/code&gt; , no desea simplemente agregar &lt;code&gt;Props&lt;/code&gt; como un argumento de tipo a &lt;code&gt;trivialHOC&lt;/code&gt; porque eso eliminar&amp;aacute; la informaci&amp;oacute;n de &lt;code&gt;defaultProps&lt;/code&gt; que el flujo tiene sobre su componente.</target>
        </trans-unit>
        <trans-unit id="780a6023120264ade0b9dac9868692f3f30232eb" translate="yes" xml:space="preserve">
          <source>If your component has no &lt;code&gt;defaultProps&lt;/code&gt;, you can use &lt;code&gt;Props&lt;/code&gt; as a type argument for &lt;code&gt;Config&lt;/code&gt;.</source>
          <target state="translated">Si su componente no tiene &lt;code&gt;defaultProps&lt;/code&gt; , puede usar &lt;code&gt;Props&lt;/code&gt; como argumento de tipo para &lt;code&gt;Config&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="df8b42d3edaced78a9cf76e1330bae86b8d96c3b" translate="yes" xml:space="preserve">
          <source>If your context has a default value, Flow will type your consumer component accordingly:</source>
          <target state="translated">Si su contexto tiene un valor predeterminado,Flow escribirá su componente de consumo en consecuencia:</target>
        </trans-unit>
        <trans-unit id="ae552724b48e29ed087f56eabc416631aed983c9" translate="yes" xml:space="preserve">
          <source>Ignores are processed AFTER includes. If you both include and ignore a file it will be ignored.</source>
          <target state="translated">Los ignorados se procesan DESPUÉS de incluirlos.Si ambos incluyen e ignoran un archivo será ignorado.</target>
        </trans-unit>
        <trans-unit id="90a346f6dee87e3209abc8b71fd3cfad11fc7766" translate="yes" xml:space="preserve">
          <source>Imagine the following &lt;code&gt;concat&lt;/code&gt; function for concatenating two strings together.</source>
          <target state="translated">Imagine la siguiente funci&amp;oacute;n &lt;code&gt;concat&lt;/code&gt; para concatenar dos cadenas juntas.</target>
        </trans-unit>
        <trans-unit id="07e019c33eb53f751e20f583889e44cde2c245d3" translate="yes" xml:space="preserve">
          <source>Imagine we have the type &lt;code&gt;?number&lt;/code&gt;, if we want to use that value as a &lt;code&gt;number&lt;/code&gt; we&amp;rsquo;ll need to first check that it is not &lt;code&gt;null&lt;/code&gt; or &lt;code&gt;undefined&lt;/code&gt;.</source>
          <target state="translated">Imagina que tenemos el tipo &lt;code&gt;?number&lt;/code&gt; , si queremos usar ese valor como un &lt;code&gt;number&lt;/code&gt; , primero debemos verificar que no sea &lt;code&gt;null&lt;/code&gt; o &lt;code&gt;undefined&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="6798e3c1aa807d4333e350015401a7abc70e80e3" translate="yes" xml:space="preserve">
          <source>Imagine writing the following &lt;code&gt;identity&lt;/code&gt; function which returns whatever value was passed.</source>
          <target state="translated">Imagine escribir la siguiente funci&amp;oacute;n de &lt;code&gt;identity&lt;/code&gt; que devuelve cualquier valor que se haya pasado.</target>
        </trans-unit>
        <trans-unit id="ff623f8a9cd9b8f5349b3bb1da56c38d35cc87a1" translate="yes" xml:space="preserve">
          <source>Importing and exporting types</source>
          <target state="translated">Tipos de importación y exportación</target>
        </trans-unit>
        <trans-unit id="8b69719d369c12ce9cd0e7524c2b8530f01cb19f" translate="yes" xml:space="preserve">
          <source>Importing and exporting values</source>
          <target state="translated">Importación y exportación de valores</target>
        </trans-unit>
        <trans-unit id="13534d9f1d5e200c3a0748880d5480a40ed54ff0" translate="yes" xml:space="preserve">
          <source>Impossible intersection types</source>
          <target state="translated">Tipos de intersección imposibles</target>
        </trans-unit>
        <trans-unit id="36f5825f27a921e30d7ea8251d8987b448c8e07c" translate="yes" xml:space="preserve">
          <source>In 0.89.0, we introduced &lt;a href=&quot;../types#toc-react-abstractcomponent&quot;&gt;&lt;code&gt;React.AbstractComponent&lt;/code&gt;&lt;/a&gt;, which gives you more expressive power when writing HOCs and library definitions.</source>
          <target state="translated">En 0.89.0, presentamos &lt;a href=&quot;../types#toc-react-abstractcomponent&quot;&gt; &lt;code&gt;React.AbstractComponent&lt;/code&gt; &lt;/a&gt; , que le brinda m&amp;aacute;s poder expresivo al escribir HOC y definiciones de biblioteca.</target>
        </trans-unit>
        <trans-unit id="d23cd461e61670be17a5cbf84c124cd9f286a1b6" translate="yes" xml:space="preserve">
          <source>In Flow every value and expression has a type.</source>
          <target state="translated">En Flow cada valor y expresión tiene un tipo.</target>
        </trans-unit>
        <trans-unit id="0b86cc8dc870697405ea856ce5507108777717a2" translate="yes" xml:space="preserve">
          <source>In Flow these fall into two groups:</source>
          <target state="translated">En Flow estos caen en dos grupos:</target>
        </trans-unit>
        <trans-unit id="18a40bb39b26a81dd8b90a84e6fcc2a7aa9f4ec7" translate="yes" xml:space="preserve">
          <source>In Flow this will cause an error because if you are expecting to get a return value of a &lt;code&gt;City&lt;/code&gt;, you may be using something that doesn&amp;rsquo;t exist on &lt;code&gt;Noun&lt;/code&gt;, which could easily cause an error at runtime.</source>
          <target state="translated">En Flow, esto provocar&amp;aacute; un error porque si espera obtener un valor de retorno de una &lt;code&gt;City&lt;/code&gt; , es posible que est&amp;eacute; usando algo que no existe en &lt;code&gt;Noun&lt;/code&gt; , lo que f&amp;aacute;cilmente podr&amp;iacute;a causar un error en tiempo de ejecuci&amp;oacute;n.</target>
        </trans-unit>
        <trans-unit id="878790a54a5224ef661b3530ee00eb752ab21af0" translate="yes" xml:space="preserve">
          <source>In Flow you can &lt;a href=&quot;../literals&quot;&gt;use union types similar to enums&lt;/a&gt;:</source>
          <target state="translated">En Flow puedes &lt;a href=&quot;../literals&quot;&gt;usar tipos de uni&amp;oacute;n similares a enumeraciones&lt;/a&gt; :</target>
        </trans-unit>
        <trans-unit id="e7fb60b92b4e843cc692009677f907537c735a2b" translate="yes" xml:space="preserve">
          <source>In Flow you can create tuples using the &lt;code&gt;[type, type, type]&lt;/code&gt; syntax.</source>
          <target state="translated">En Flow puedes crear tuplas usando la sintaxis &lt;code&gt;[type, type, type]&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="1aed1690eff4b4d2b58bb1fcd12c1d5c6f001410" translate="yes" xml:space="preserve">
          <source>In Flow you don&amp;rsquo;t type annotate &lt;code&gt;this&lt;/code&gt; and Flow will check whatever context you call the function with.</source>
          <target state="translated">En Flow, no escribe anotar &lt;code&gt;this&lt;/code&gt; y Flow comprobar&amp;aacute; cualquier contexto con el que llame a la funci&amp;oacute;n.</target>
        </trans-unit>
        <trans-unit id="1866b0c88cce2b9c6a8fee29c5128f64a2f80305" translate="yes" xml:space="preserve">
          <source>In Flow, it is considered safe to pass an object with extra properties where a normal object type is expected.</source>
          <target state="translated">En Flujo,se considera seguro pasar un objeto con propiedades adicionales cuando se espera un tipo de objeto normal.</target>
        </trans-unit>
        <trans-unit id="ce986f956cc22b12a2a6bfffc8a5a0edb258999c" translate="yes" xml:space="preserve">
          <source>In Flow, most of the time when you pass one type into another you lose the original type. So that when you pass a specific type into a less specific one Flow &amp;ldquo;forgets&amp;rdquo; it was once something more specific.</source>
          <target state="translated">En Flow, la mayor&amp;iacute;a de las veces, cuando pasa un tipo a otro, pierde el tipo original. De modo que cuando pasas un tipo espec&amp;iacute;fico a uno menos espec&amp;iacute;fico, Flow &quot;olvida&quot; que alguna vez fue algo m&amp;aacute;s espec&amp;iacute;fico.</target>
        </trans-unit>
        <trans-unit id="bcf0c994155157746fc1c739386893c10523fd11" translate="yes" xml:space="preserve">
          <source>In Flow, there are two different kinds of object types: exact object types and inexact object types.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9a9bbf724831d747e94152055fbfe4af4a218e78" translate="yes" xml:space="preserve">
          <source>In Flow, there is a similar &lt;code&gt;typeof&lt;/code&gt; operator, but it&amp;rsquo;s much more powerful.</source>
          <target state="translated">En el flujo, hay un parecido &lt;code&gt;typeof&lt;/code&gt; operador, pero es mucho m&amp;aacute;s potente.</target>
        </trans-unit>
        <trans-unit id="41f1a84e9859f569ee928b713503208cbf3bc5fb" translate="yes" xml:space="preserve">
          <source>In JavaScript there are many types of values: numbers, strings, booleans, functions, objects, and more.</source>
          <target state="translated">En JavaScript hay muchos tipos de valores:números,cadenas,booleanos,funciones,objetos y más.</target>
        </trans-unit>
        <trans-unit id="e94f6f8db81e235b729c1d11091229874c69e47d" translate="yes" xml:space="preserve">
          <source>In JavaScript, accessing a property that doesn&amp;rsquo;t exist evaluates to &lt;code&gt;undefined&lt;/code&gt;. This is a common source of errors in JavaScript programs, so Flow turns these into type errors.</source>
          <target state="translated">En JavaScript, acceder a una propiedad que no existe se eval&amp;uacute;a como &lt;code&gt;undefined&lt;/code&gt; . Esta es una fuente com&amp;uacute;n de errores en los programas JavaScript, por lo que Flow los convierte en errores de tipo.</target>
        </trans-unit>
        <trans-unit id="607c3a17b963c6542847246278eb0d806eb5228c" translate="yes" xml:space="preserve">
          <source>In Nuclide, Flow warnings are distinct from Flow errors and rendered in a different color.</source>
          <target state="translated">En Nuclide,las advertencias de Flujo son distintas de los errores de Flujo y se presentan en un color diferente.</target>
        </trans-unit>
        <trans-unit id="bc25bf1704838ddbfe93f721afeb7079da5d8274" translate="yes" xml:space="preserve">
          <source>In a project using exact-by-default syntax, the explicit inexact object type syntax is the only way to express an inexact object type.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8602c23e7637c0b355d504e31ab6ce9a57961195" translate="yes" xml:space="preserve">
          <source>In addition to classes, React also supports stateless functional components. You type these components like you would type a function:</source>
          <target state="translated">Además de las clases,React también apoya los componentes funcionales apátridas.Escribes estos componentes como si escribieras una función:</target>
        </trans-unit>
        <trans-unit id="5c3523d972cffa078864d6aecc1b5016808eb504" translate="yes" xml:space="preserve">
          <source>In addition to the &lt;code&gt;type&lt;/code&gt; in &lt;code&gt;?type&lt;/code&gt;, maybe types can also be &lt;code&gt;null&lt;/code&gt; or &lt;code&gt;void&lt;/code&gt;.</source>
          <target state="translated">Adem&amp;aacute;s del &lt;code&gt;type&lt;/code&gt; en &lt;code&gt;?type&lt;/code&gt; , quiz&amp;aacute;s los tipos tambi&amp;eacute;n puedan ser &lt;code&gt;null&lt;/code&gt; o no &lt;code&gt;void&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="5878ffe14737888126d4158cf0ebbdd747f1742a" translate="yes" xml:space="preserve">
          <source>In addition to the default &lt;code&gt;{}&lt;/code&gt; syntax, you can explicitly indicate an inexact object by using an ellipsis at the end of your property list:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a2ee11de69f40000610dfec7ac07ec5df1cfe68c" translate="yes" xml:space="preserve">
          <source>In addition to their set type, default parameters can also be &lt;code&gt;void&lt;/code&gt; or omitted altogether. However, they cannot be &lt;code&gt;null&lt;/code&gt;.</source>
          <target state="translated">Adem&amp;aacute;s de su tipo de conjunto, los par&amp;aacute;metros predeterminados tambi&amp;eacute;n pueden &lt;code&gt;void&lt;/code&gt; u omitirse por completo. Sin embargo, no pueden ser &lt;code&gt;null&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="76f3ea7a16fcff8d257f8c2b1bf73e609afb8ca9" translate="yes" xml:space="preserve">
          <source>In addition to their set type, these optional parameters can either be &lt;code&gt;void&lt;/code&gt; or omitted altogether. However, they cannot be &lt;code&gt;null&lt;/code&gt;.</source>
          <target state="translated">Adem&amp;aacute;s de su tipo de conjunto, estos par&amp;aacute;metros opcionales pueden &lt;code&gt;void&lt;/code&gt; u omitirse por completo. Sin embargo, no pueden ser &lt;code&gt;null&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="05442271873e7bd4801123e6c257336f2ff42022" translate="yes" xml:space="preserve">
          <source>In addition to their set value type, these optional properties can either be &lt;code&gt;void&lt;/code&gt; or omitted altogether. However, they cannot be &lt;code&gt;null&lt;/code&gt;.</source>
          <target state="translated">Adem&amp;aacute;s de su tipo de valor establecido, estas propiedades opcionales pueden &lt;code&gt;void&lt;/code&gt; u omitirse por completo. Sin embargo, no pueden ser &lt;code&gt;null&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="eee0e3df17d7390f34a9ec9aa8fb61edb49a05a1" translate="yes" xml:space="preserve">
          <source>In all forms, whitespace and asterisks between words are ignored, allowing for flexible formatting.</source>
          <target state="translated">En todas las formas,los espacios en blanco y los asteriscos entre las palabras son ignorados,permitiendo un formato flexible.</target>
        </trans-unit>
        <trans-unit id="fc7fa03e8c32cc9ea9869eea330877a166bc87da" translate="yes" xml:space="preserve">
          <source>In an ideal world, every type checker would be both sound &lt;em&gt;and&lt;/em&gt; complete so that it catches &lt;em&gt;every&lt;/em&gt; error that &lt;em&gt;will&lt;/em&gt; happen at runtime.</source>
          <target state="translated">En un mundo ideal, cada verificador de tipos ser&amp;iacute;a a la vez s&amp;oacute;lido &lt;em&gt;y&lt;/em&gt; completo para detectar &lt;em&gt;todos los&lt;/em&gt; errores que &lt;em&gt;se&lt;/em&gt; producir&amp;aacute;n en tiempo de ejecuci&amp;oacute;n.</target>
        </trans-unit>
        <trans-unit id="0e980406b01916b102c664aa8bc420ac8164cdd8" translate="yes" xml:space="preserve">
          <source>In case you&amp;rsquo;re looking for something even more minimal, &lt;a href=&quot;https://atom.io/packages/linter-flow&quot;&gt;linter-flow&lt;/a&gt; may be worth your attention. It only lints your code and provides no other features, but it does support on-the-fly linting.</source>
          <target state="translated">En caso de que est&amp;eacute; buscando algo a&amp;uacute;n m&amp;aacute;s m&amp;iacute;nimo, &lt;a href=&quot;https://atom.io/packages/linter-flow&quot;&gt;el flujo de linter&lt;/a&gt; puede valer su atenci&amp;oacute;n. Solo borra su c&amp;oacute;digo y no proporciona otras funciones, pero admite el borrado sobre la marcha.</target>
        </trans-unit>
        <trans-unit id="d58d61d5e2ae1c070f297e2490a7c2925302178e" translate="yes" xml:space="preserve">
          <source>In classic mode the exported type would be &lt;code&gt;string&lt;/code&gt;. In types-first it will be &lt;code&gt;number | string&lt;/code&gt;, so if downstream typing depends on the more precise type, then you might get some errors.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="93a6d6729aa12ef134d9875fb3247de74d643295" translate="yes" xml:space="preserve">
          <source>In classic mode, the inferred type encompassed both types at the same time. This might cause errors in importing files that expect for example to find type &lt;code&gt;t1&lt;/code&gt; in the first position of the import.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9bffcd7b9f6bc8c106a178e285d7f231f68f3d4e" translate="yes" xml:space="preserve">
          <source>In general, programs have several different categories of types:</source>
          <target state="translated">En general,los programas tienen varias categorías diferentes de tipos:</target>
        </trans-unit>
        <trans-unit id="fd7f4f3ed72057427360f7865505bb3424508d31" translate="yes" xml:space="preserve">
          <source>In general, the function subtyping rule is this: A function type &lt;code&gt;B&lt;/code&gt; is a subtype of a function type &lt;code&gt;A&lt;/code&gt; if and only if &lt;code&gt;B&lt;/code&gt;&amp;rsquo;s inputs are a superset of &lt;code&gt;A&lt;/code&gt;&amp;rsquo;s, and &lt;code&gt;B&lt;/code&gt;&amp;rsquo;s outputs are a subset of &lt;code&gt;A&lt;/code&gt;&amp;rsquo;s. The subtype must accept &lt;em&gt;at least&lt;/em&gt; the same inputs as its parent, and must return &lt;em&gt;at most&lt;/em&gt; the same outputs.</source>
          <target state="translated">En general, la funci&amp;oacute;n de subtipificaci&amp;oacute;n regla es la siguiente: Un tipo de funci&amp;oacute;n &lt;code&gt;B&lt;/code&gt; es un subtipo de un tipo de funci&amp;oacute;n &lt;code&gt;A&lt;/code&gt; si y s&amp;oacute;lo si &lt;code&gt;B&lt;/code&gt; &amp;lsquo;insumos s son un superconjunto de &lt;code&gt;A&lt;/code&gt; &amp;lsquo;s, y &lt;code&gt;B&lt;/code&gt; &amp;lsquo;salidas s son un subconjunto de &lt;code&gt;A&lt;/code&gt; 's . El subtipo debe aceptar &lt;em&gt;al menos&lt;/em&gt; las mismas entradas que su padre y debe devolver &lt;em&gt;como m&amp;aacute;ximo&lt;/em&gt; las mismas salidas.</target>
        </trans-unit>
        <trans-unit id="95f08b9072eee0c507decee24cd79aa14c9843dc" translate="yes" xml:space="preserve">
          <source>In general, we recommend using &lt;a href=&quot;#toc-exact-object-types&quot;&gt;exact object types&lt;/a&gt; whenever possible. Exact object types are more precise and interact better with other type system features, like spreads.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a36883ee8e26a0df06cf9d297126b7d9d0279d23" translate="yes" xml:space="preserve">
          <source>In most editors, Flow warnings are likely to be rendered the same way as other warnings are rendered by that editor.</source>
          <target state="translated">En la mayoría de los editores,es probable que las advertencias de Flow se presenten de la misma manera que las demás advertencias de ese editor.</target>
        </trans-unit>
        <trans-unit id="778cccced52885f7f527ce4599b0aa5872785a27" translate="yes" xml:space="preserve">
          <source>In order to be a valid suppression comment, there are also some conditions that must be true:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3519b95ac1b03c724bc36beb2d830f52032a8ec0" translate="yes" xml:space="preserve">
          <source>In order to create a type cast expression around a &lt;code&gt;value&lt;/code&gt;, add a colon &lt;code&gt;:&lt;/code&gt; with the &lt;code&gt;Type&lt;/code&gt; and wrap the expression with parentheses &lt;code&gt;(&lt;/code&gt;&lt;code&gt;)&lt;/code&gt;.</source>
          <target state="translated">Para crear una expresi&amp;oacute;n de conversi&amp;oacute;n de tipo alrededor de un &lt;code&gt;value&lt;/code&gt; , agregue dos puntos &lt;code&gt;:&lt;/code&gt; con el &lt;code&gt;Type&lt;/code&gt; y envuelva la expresi&amp;oacute;n entre par&amp;eacute;ntesis &lt;code&gt;(&lt;/code&gt; &lt;code&gt;)&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="1a95a2762627991309d591271ba0f2cb553d8347" translate="yes" xml:space="preserve">
          <source>In order to make this safe, Flow would have to mark every single array access as &amp;ldquo;&lt;em&gt;possibly undefined&amp;rdquo;&lt;/em&gt;.</source>
          <target state="translated">Para que esto sea seguro, Flow tendr&amp;iacute;a que marcar cada acceso a la matriz como &quot; &lt;em&gt;posiblemente indefinido&quot;&lt;/em&gt; .</target>
        </trans-unit>
        <trans-unit id="9647a3a23b862cc8f9dc43f5bf313667719ad856" translate="yes" xml:space="preserve">
          <source>In order to prevent suppressions from suppressing different kinds of type errors on the same line (by default suppressions without codes suppress every error on the following line), you can add an error code to your suppression. For example: &lt;code&gt;// $FlowFixMe[incompatible-type]&lt;/code&gt; would only suppress errors with the &lt;code&gt;incompatible-type&lt;/code&gt; code. So:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bf1c4a34bb0b2870f57375eef532ff3033ee975a" translate="yes" xml:space="preserve">
          <source>In order to type your Redux &lt;a href=&quot;http://redux.js.org/docs/advanced/AsyncActions.html#async-action-creators&quot;&gt;thunk actions&lt;/a&gt;, you&amp;rsquo;ll add types for &lt;code&gt;ThunkAction&lt;/code&gt; as a function &lt;code&gt;Dispatch&lt;/code&gt;, and &lt;code&gt;GetState&lt;/code&gt;. &lt;code&gt;GetState&lt;/code&gt; is a function that returns an &lt;code&gt;Object&lt;/code&gt;. &lt;code&gt;Dispatch&lt;/code&gt; accepts a disjoint union of &lt;code&gt;Action&lt;/code&gt;, &lt;code&gt;ThunkAction&lt;/code&gt;, &lt;code&gt;PromiseAction&lt;/code&gt; and &lt;code&gt;Array&amp;lt;Action&amp;gt;&lt;/code&gt; and can return &lt;code&gt;any&lt;/code&gt;.</source>
          <target state="translated">Para escribir sus &lt;a href=&quot;http://redux.js.org/docs/advanced/AsyncActions.html#async-action-creators&quot;&gt;acciones de procesador de&lt;/a&gt; Redux , agregar&amp;aacute; tipos para &lt;code&gt;ThunkAction&lt;/code&gt; como una funci&amp;oacute;n &lt;code&gt;Dispatch&lt;/code&gt; y &lt;code&gt;GetState&lt;/code&gt; . &lt;code&gt;GetState&lt;/code&gt; es una funci&amp;oacute;n que devuelve un &lt;code&gt;Object&lt;/code&gt; . &lt;code&gt;Dispatch&lt;/code&gt; acepta una uni&amp;oacute;n disjunta de &lt;code&gt;Action&lt;/code&gt; , &lt;code&gt;ThunkAction&lt;/code&gt; , &lt;code&gt;PromiseAction&lt;/code&gt; y &lt;code&gt;Array&amp;lt;Action&amp;gt;&lt;/code&gt; y puede devolver &lt;code&gt;any&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="463948e140100316fb05c0438cb2fb9b2c50f529" translate="yes" xml:space="preserve">
          <source>In order to type your Redux &lt;a href=&quot;http://redux.js.org/docs/basics/Actions.html#action-creators&quot;&gt;action creators&lt;/a&gt;, you&amp;rsquo;ll want to split up your &lt;code&gt;Action&lt;/code&gt; disjoint union into separate action types.</source>
          <target state="translated">Para escribir sus &lt;a href=&quot;http://redux.js.org/docs/basics/Actions.html#action-creators&quot;&gt;creadores de acciones de&lt;/a&gt; Redux , querr&amp;aacute; dividir su uni&amp;oacute;n disjunta de &lt;code&gt;Action&lt;/code&gt; en tipos de acci&amp;oacute;n separados.</target>
        </trans-unit>
        <trans-unit id="e07cb53d30d280443a0f0560d11411f44a85aeb5" translate="yes" xml:space="preserve">
          <source>In other words it won&amp;rsquo;t take into account the update on &lt;code&gt;y&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a6ed0c1cedb4575cb7b5ef3b66fc0929b6243133" translate="yes" xml:space="preserve">
          <source>In other words, we must engineer Flow&amp;rsquo;s analysis to be extremely fast&amp;mdash;it must respond to code changes without noticeable delay, while still being precise enough in practice.</source>
          <target state="translated">En otras palabras, debemos dise&amp;ntilde;ar el an&amp;aacute;lisis de Flow para que sea extremadamente r&amp;aacute;pido: debe responder a los cambios de c&amp;oacute;digo sin demoras apreciables, sin dejar de ser lo suficientemente preciso en la pr&amp;aacute;ctica.</target>
        </trans-unit>
        <trans-unit id="9ed3794afb3687160903becf6fab09177a6b9c44" translate="yes" xml:space="preserve">
          <source>In other words, we want Flow&amp;rsquo;s analysis to be precise in practice&amp;mdash;it must model essential characteristics of the language accurately enough to understand the difference between idiomatic code and unintentional mistakes.</source>
          <target state="translated">En otras palabras, queremos que el an&amp;aacute;lisis de Flow sea preciso en la pr&amp;aacute;ctica: debe modelar las caracter&amp;iacute;sticas esenciales del lenguaje con la suficiente precisi&amp;oacute;n para comprender la diferencia entre el c&amp;oacute;digo idiom&amp;aacute;tico y los errores no intencionales.</target>
        </trans-unit>
        <trans-unit id="9fb052ce5832a38b07cfb4b3b186920962dddf8c" translate="yes" xml:space="preserve">
          <source>In principle, this overhead can be mitigated by adding a layer of types to the codebase, and building tools that use type information to solve the above problems. For example, types can be used to identify bugs, to document interfaces of libraries, and so on.</source>
          <target state="translated">En principio,esta sobrecarga puede mitigarse añadiendo una capa de tipos a la base de código,y construyendo herramientas que utilicen la información de tipos para resolver los problemas mencionados.Por ejemplo,los tipos pueden utilizarse para identificar errores,para documentar las interfaces de las bibliotecas,etc.</target>
        </trans-unit>
        <trans-unit id="46c0c160ff60aaa1954f2f13af37869b4cd1f894" translate="yes" xml:space="preserve">
          <source>In situations like this one, you can leverage the &lt;code&gt;$Keys&amp;lt;T&amp;gt;&lt;/code&gt; operator. Let&amp;rsquo;s see another example, this time using &lt;code&gt;$Keys&lt;/code&gt;:</source>
          <target state="translated">En situaciones como esta, puede aprovechar el operador &lt;code&gt;$Keys&amp;lt;T&amp;gt;&lt;/code&gt; . Veamos otro ejemplo, esta vez usando &lt;code&gt;$Keys&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="07ca63a4c55eeea9fee508bfce14ba359d037e35" translate="yes" xml:space="preserve">
          <source>In the &lt;a href=&quot;https://facebook.github.io/react/docs/handling-events.html&quot;&gt;React docs &amp;ldquo;Handling Events&amp;rdquo; section&lt;/a&gt; a few different recommendations are provided on how to define event handlers. If you are using Flow we recommend that you use &lt;a href=&quot;https://babeljs.io/docs/plugins/transform-class-properties/&quot;&gt;property initializer syntax&lt;/a&gt; as it is the easiest to statically type. Property initializer syntax looks like this:</source>
          <target state="translated">En la &lt;a href=&quot;https://facebook.github.io/react/docs/handling-events.html&quot;&gt;secci&amp;oacute;n &quot;Manejo de eventos&quot; de los documentos de React&lt;/a&gt; se proporcionan algunas recomendaciones diferentes sobre c&amp;oacute;mo definir controladores de eventos. Si est&amp;aacute; utilizando Flow, le recomendamos que utilice la &lt;a href=&quot;https://babeljs.io/docs/plugins/transform-class-properties/&quot;&gt;sintaxis del inicializador de propiedades,&lt;/a&gt; ya que es la m&amp;aacute;s f&amp;aacute;cil de escribir est&amp;aacute;ticamente. La sintaxis del inicializador de propiedades se ve as&amp;iacute;:</target>
        </trans-unit>
        <trans-unit id="045b4893ca1ae9c77490fd71764ad7b6d77ffa63" translate="yes" xml:space="preserve">
          <source>In the above case, we&amp;rsquo;re using literal values as &lt;code&gt;K&lt;/code&gt;, similarly to &lt;a href=&quot;#toc-propertytype&quot;&gt;&lt;code&gt;$PropertyType&amp;lt;T, k&amp;gt;&lt;/code&gt;&lt;/a&gt;. However, when using &lt;code&gt;$ElementType&amp;lt;T, K&amp;gt;&lt;/code&gt;, &lt;code&gt;K&lt;/code&gt; is allowed to be any type, as long as that type exists on the keys of &lt;code&gt;T&lt;/code&gt;. For example:</source>
          <target state="translated">En el caso anterior, estamos usando valores literales como &lt;code&gt;K&lt;/code&gt; , de manera similar a &lt;a href=&quot;#toc-propertytype&quot;&gt; &lt;code&gt;$PropertyType&amp;lt;T, k&amp;gt;&lt;/code&gt; &lt;/a&gt; . Sin embargo, cuando se usa &lt;code&gt;$ElementType&amp;lt;T, K&amp;gt;&lt;/code&gt; , &lt;code&gt;K&lt;/code&gt; se le permite ser de cualquier tipo, siempre que exista ese tipo en las teclas de &lt;code&gt;T&lt;/code&gt; . Por ejemplo:</target>
        </trans-unit>
        <trans-unit id="3f5298183f55322a9608c40096489e4fbda648b8" translate="yes" xml:space="preserve">
          <source>In the case of objects, a &lt;strong&gt;missing&lt;/strong&gt; property is not the same thing as an explicitly &lt;code&gt;undefined&lt;/code&gt; property.</source>
          <target state="translated">En el caso de los objetos, una propiedad &lt;strong&gt;faltante&lt;/strong&gt; no es lo mismo que una propiedad expl&amp;iacute;citamente &lt;code&gt;undefined&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="4dd1fcffc78ce1a79e176af9465300a76e634c4a" translate="yes" xml:space="preserve">
          <source>In the code below, value can either be &lt;code&gt;&quot;A&quot;&lt;/code&gt; or &lt;code&gt;&quot;B&quot;&lt;/code&gt;.</source>
          <target state="translated">En el c&amp;oacute;digo siguiente, el valor puede ser &lt;code&gt;&quot;A&quot;&lt;/code&gt; o &lt;code&gt;&quot;B&quot;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="de4288f8d4aaa876255c7f68bbbad7dd659c5cbb" translate="yes" xml:space="preserve">
          <source>In the example above we are using a &lt;a href=&quot;https://facebook.github.io/react/docs/state-and-lifecycle.html#state-updates-may-be-asynchronous&quot;&gt;React &lt;code&gt;setState()&lt;/code&gt; updater function&lt;/a&gt; but you could also pass a partial state object to &lt;code&gt;setState()&lt;/code&gt;.</source>
          <target state="translated">En el ejemplo anterior, estamos usando una &lt;a href=&quot;https://facebook.github.io/react/docs/state-and-lifecycle.html#state-updates-may-be-asynchronous&quot;&gt;funci&amp;oacute;n de actualizaci&amp;oacute;n de &lt;/a&gt;React &lt;code&gt;setState()&lt;/code&gt; pero tambi&amp;eacute;n podr&amp;iacute;a pasar un objeto de estado parcial a &lt;code&gt;setState()&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="78c833515da3868b1bb8e2586fa68f8aa20ca1b3" translate="yes" xml:space="preserve">
          <source>In the example above, the type of &lt;code&gt;Country&lt;/code&gt; is equivalent to &lt;code&gt;type Country = 'US' | 'IT' | 'FR'&lt;/code&gt;, but Flow was able to extract it from the keys of &lt;code&gt;countries&lt;/code&gt;.</source>
          <target state="translated">En el ejemplo anterior, el tipo de &lt;code&gt;Country&lt;/code&gt; es equivalente al &lt;code&gt;type Country = 'US' | 'IT' | 'FR'&lt;/code&gt; , pero Flow supo extraerlo de las claves de &lt;code&gt;countries&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="937e9cdc3d741999bdf658703ba5d2d9ee3fef52" translate="yes" xml:space="preserve">
          <source>In the first case, the exported types of a module are declared in a &lt;em&gt;declaration file&lt;/em&gt;&lt;code&gt;&amp;lt;FILENAME&amp;gt;.flow&lt;/code&gt;, that is located in the same directory as the corresponding &lt;em&gt;implementation file&lt;/em&gt;&lt;code&gt;&amp;lt;FILENAME&amp;gt;&lt;/code&gt;. The declaration file completely shadows the colocated implementation. In other words, Flow will completely ignore &lt;code&gt;&amp;lt;FILENAME&amp;gt;&lt;/code&gt; and just read &lt;code&gt;&amp;lt;FILENAME&amp;gt;.flow&lt;/code&gt; instead.</source>
          <target state="translated">En el primer caso, los tipos exportados de un m&amp;oacute;dulo se declaran en un &lt;em&gt;archivo de declaraci&amp;oacute;n &lt;/em&gt; &lt;code&gt;&amp;lt;FILENAME&amp;gt;.flow&lt;/code&gt; , que se encuentra en el mismo directorio que el &lt;em&gt;archivo de implementaci&amp;oacute;n&lt;/em&gt; correspondiente &lt;code&gt;&amp;lt;FILENAME&amp;gt;&lt;/code&gt; . El archivo de declaraci&amp;oacute;n oculta completamente la implementaci&amp;oacute;n colocada. En otras palabras, Flow ignorar&amp;aacute; por completo &lt;code&gt;&amp;lt;FILENAME&amp;gt;&lt;/code&gt; y simplemente leer&amp;aacute; &lt;code&gt;&amp;lt;FILENAME&amp;gt;.flow&lt;/code&gt; en su lugar.</target>
        </trans-unit>
        <trans-unit id="0f92740913668ddf1132fafd30e60ebce2409efa" translate="yes" xml:space="preserve">
          <source>In the following example, say you want to finish writing the function &lt;code&gt;fooList&lt;/code&gt; without bothering to mock up its dependencies first: a function &lt;code&gt;foo&lt;/code&gt; that takes a &lt;code&gt;number&lt;/code&gt; and returns a &lt;code&gt;string&lt;/code&gt;, and a class &lt;code&gt;List&lt;/code&gt; that has a &lt;code&gt;map&lt;/code&gt; method. You can do this by including declarations for &lt;code&gt;List&lt;/code&gt; and &lt;code&gt;foo&lt;/code&gt;:</source>
          <target state="translated">En el siguiente ejemplo, digamos que desea terminar de escribir la funci&amp;oacute;n &lt;code&gt;fooList&lt;/code&gt; sin molestarse en simular sus dependencias primero: una funci&amp;oacute;n &lt;code&gt;foo&lt;/code&gt; que toma un &lt;code&gt;number&lt;/code&gt; y devuelve una &lt;code&gt;string&lt;/code&gt; , y una clase &lt;code&gt;List&lt;/code&gt; que tiene un m&amp;eacute;todo de &lt;code&gt;map&lt;/code&gt; a . Puede hacer esto incluyendo declaraciones para &lt;code&gt;List&lt;/code&gt; y &lt;code&gt;foo&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="a2326d39f5c6c0c33efe4e847e245df6cca55d45" translate="yes" xml:space="preserve">
          <source>In the following example, we forget to properly annotate &lt;code&gt;identity&lt;/code&gt; with a generic type, so we run into trouble when we try to assign it to &lt;code&gt;func&lt;/code&gt;. On the other hand, &lt;code&gt;genericIdentity&lt;/code&gt; is properly typed, and we are able to use it as expected.</source>
          <target state="translated">En el siguiente ejemplo, nos olvidamos de anotar correctamente la &lt;code&gt;identity&lt;/code&gt; con un tipo gen&amp;eacute;rico, por lo que tenemos problemas cuando intentamos asignarlo a &lt;code&gt;func&lt;/code&gt; . Por otro lado, &lt;code&gt;genericIdentity&lt;/code&gt; se escribe correctamente y podemos usarlo como se esperaba.</target>
        </trans-unit>
        <trans-unit id="1f9d0bf254d010bdd633b1f172693e7ad6fbe077" translate="yes" xml:space="preserve">
          <source>In the previous section we showed how refinement is lost after a function call. The exact same thing happens within closures, since Flow does not track how your value might change before the closure is called.</source>
          <target state="translated">En la sección anterior mostramos cómo se pierde el refinamiento después de una llamada de función.Exactamente lo mismo ocurre dentro de los cierres,ya que Flow no registra cómo podría cambiar su valor antes de que se llame al cierre.</target>
        </trans-unit>
        <trans-unit id="26926ea42a5a5143965f679a788052c45d4b2dee" translate="yes" xml:space="preserve">
          <source>In the second case, the implementation file is missing entirely. &lt;code&gt;&amp;lt;FILENAME&amp;gt;.flow&lt;/code&gt; is treated as if it is named &lt;code&gt;&amp;lt;FILENAME&amp;gt;&lt;/code&gt;.</source>
          <target state="translated">En el segundo caso, falta el archivo de implementaci&amp;oacute;n por completo. &lt;code&gt;&amp;lt;FILENAME&amp;gt;.flow&lt;/code&gt; se trata como si se llamara &lt;code&gt;&amp;lt;FILENAME&amp;gt;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="b39b2010529d0c2ccb12cf90571d17f75bb0be7e" translate="yes" xml:space="preserve">
          <source>In the second example, the first use of &lt;code&gt;?.&lt;/code&gt; is valid, since &lt;code&gt;foo&lt;/code&gt; is potentially nullish, but the second use of &lt;code&gt;?.&lt;/code&gt; is unnecessary. The left-hand-side of the second &lt;code&gt;?.&lt;/code&gt; (&lt;code&gt;foo?.bar&lt;/code&gt;) can only be nullish as a result of &lt;code&gt;foo&lt;/code&gt; being nullish, and when &lt;code&gt;foo&lt;/code&gt; is nullish, short-circuiting lets us avoid the second &lt;code&gt;?.&lt;/code&gt; altogether!</source>
          <target state="translated">En el segundo ejemplo, el primer uso de &lt;code&gt;?.&lt;/code&gt; es v&amp;aacute;lido, ya que &lt;code&gt;foo&lt;/code&gt; es potencialmente nulo, pero el segundo uso de &lt;code&gt;?.&lt;/code&gt; es innecesario. &amp;iquest;El lado izquierdo del segundo &lt;code&gt;?.&lt;/code&gt; ( &lt;code&gt;foo?.bar&lt;/code&gt; ) solo se puede anular como resultado de que &lt;code&gt;foo&lt;/code&gt; sea ​​nulo, y cuando &lt;code&gt;foo&lt;/code&gt; es nulo, el cortocircuito nos permite evitar el segundo &lt;code&gt;?.&lt;/code&gt; &amp;iexcl;en total!</target>
        </trans-unit>
        <trans-unit id="fe1405a89cd32b054392c7923e187f575819c2aa" translate="yes" xml:space="preserve">
          <source>In this guide we will assume you know &lt;a href=&quot;https://facebook.github.io/react/docs/hello-world.html&quot;&gt;the React basics&lt;/a&gt; and focus on adding types for patterns you are already familiar with. We will be using examples based on &lt;code&gt;react-dom&lt;/code&gt;, but all of these patterns work in other environments like &lt;code&gt;react-native&lt;/code&gt; as well.</source>
          <target state="translated">En esta gu&amp;iacute;a asumiremos que conoce &lt;a href=&quot;https://facebook.github.io/react/docs/hello-world.html&quot;&gt;los conceptos b&amp;aacute;sicos de React&lt;/a&gt; y se concentrar&amp;aacute; en agregar tipos de patrones con los que ya est&amp;aacute; familiarizado. Usaremos ejemplos basados ​​en &lt;code&gt;react-dom&lt;/code&gt; , pero todos estos patrones tambi&amp;eacute;n funcionan en otros entornos como &lt;code&gt;react-native&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="1725f004837e7311155dfaefd968a330b6660337" translate="yes" xml:space="preserve">
          <source>In type systems, &lt;strong&gt;&lt;em&gt;soundness&lt;/em&gt;&lt;/strong&gt; is the ability for a type checker to catch every single error that &lt;em&gt;might&lt;/em&gt; happen at runtime. This comes at the cost of sometimes catching errors that will not actually happen at runtime.</source>
          <target state="translated">En los sistemas de tipos, la &lt;strong&gt;&lt;em&gt;solidez&lt;/em&gt;&lt;/strong&gt; es la capacidad de un verificador de tipos para detectar cada error que &lt;em&gt;pueda&lt;/em&gt; ocurrir en tiempo de ejecuci&amp;oacute;n. Esto tiene el costo de detectar a veces errores que en realidad no suceder&amp;aacute;n en tiempo de ejecuci&amp;oacute;n.</target>
        </trans-unit>
        <trans-unit id="8dde3e66a352a49cf672fed1ba894f26ee717508" translate="yes" xml:space="preserve">
          <source>In types-first, an array literal in an &lt;em&gt;export position&lt;/em&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0c22f8d1c20f6a2e728f54e6d0eb1c49eaf70b92" translate="yes" xml:space="preserve">
          <source>In which &lt;code&gt;props.children&lt;/code&gt; would be the array &lt;code&gt;['hello', ' ', &amp;lt;strong&amp;gt;world&amp;lt;/strong&amp;gt;]&lt;/code&gt;.</source>
          <target state="translated">En el que &lt;code&gt;props.children&lt;/code&gt; estar&amp;iacute;a la matriz &lt;code&gt;['hello', ' ', &amp;lt;strong&amp;gt;world&amp;lt;/strong&amp;gt;]&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="ace6df33f153a56a5ba7bd262d1c9b70a75f2081" translate="yes" xml:space="preserve">
          <source>In which &lt;code&gt;props.children&lt;/code&gt; would be the array &lt;code&gt;['hello', ' world']&lt;/code&gt;.</source>
          <target state="translated">En el que &lt;code&gt;props.children&lt;/code&gt; estar&amp;iacute;a la matriz &lt;code&gt;['hello', ' world']&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="379e9d202df0a82bef07b8db10eab0a058f9a77e" translate="yes" xml:space="preserve">
          <source>Indexer properties can be mixed with named properties:</source>
          <target state="translated">Las propiedades del indexador pueden mezclarse con las propiedades con nombre:</target>
        </trans-unit>
        <trans-unit id="05a0d6f605f2b30187cd7e3cfb97f6cb60c6d5f8" translate="yes" xml:space="preserve">
          <source>Indirect object assignments in exports</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2bdd61bb5045aa0f67014c84f13de75c521599ec" translate="yes" xml:space="preserve">
          <source>Initialize Your Project</source>
          <target state="translated">Inicie su proyecto</target>
        </trans-unit>
        <trans-unit id="8f1c0c5725c5ba0a7b766ec69cb3fb2725c240c3" translate="yes" xml:space="preserve">
          <source>Injecting Props</source>
          <target state="translated">Inyectando accesorios</target>
        </trans-unit>
        <trans-unit id="830945c41eb45cbd674fe46b49ac731ee56e9c2d" translate="yes" xml:space="preserve">
          <source>Inlining declarations in regular code</source>
          <target state="translated">Declaraciones en línea en código regular</target>
        </trans-unit>
        <trans-unit id="33ef7b2c7e612b6223b6cc691261f71223920db8" translate="yes" xml:space="preserve">
          <source>Inserted annotations may cause new flow errors, since it&amp;rsquo;s not always possible to match inferred type with types that can be written as annotations.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9f834cdcbee4998ebcf13d92d61227888d432240" translate="yes" xml:space="preserve">
          <source>Inside of &lt;code&gt;otherMethod()&lt;/code&gt; we sometimes remove &lt;code&gt;prop&lt;/code&gt;. Flow doesn&amp;rsquo;t know if the &lt;code&gt;if (value.prop)&lt;/code&gt; check is still true, so it invalidates the refinement.</source>
          <target state="translated">Dentro de &lt;code&gt;otherMethod()&lt;/code&gt; veces eliminamos &lt;code&gt;prop&lt;/code&gt; . Flow no sabe si la verificaci&amp;oacute;n &lt;code&gt;if (value.prop)&lt;/code&gt; sigue siendo verdadera, por lo que invalida el refinamiento.</target>
        </trans-unit>
        <trans-unit id="59233b6f1516ac12e9141c55c7ddd0c26f41e51e" translate="yes" xml:space="preserve">
          <source>Inside of the else block we know that value must be &lt;code&gt;&quot;B&quot;&lt;/code&gt; because it can only be &lt;code&gt;&quot;A&quot;&lt;/code&gt; or &lt;code&gt;&quot;B&quot;&lt;/code&gt; and we&amp;rsquo;ve removed &lt;code&gt;&quot;A&quot;&lt;/code&gt; from the possibilities.</source>
          <target state="translated">Dentro del bloque else sabemos que el valor debe ser &lt;code&gt;&quot;B&quot;&lt;/code&gt; porque solo puede ser &lt;code&gt;&quot;A&quot;&lt;/code&gt; o &lt;code&gt;&quot;B&quot;&lt;/code&gt; y hemos eliminado &lt;code&gt;&quot;A&quot;&lt;/code&gt; de las posibilidades.</target>
        </trans-unit>
        <trans-unit id="e1d0007e9fb3d8a6684762ca326d9d60b18283cd" translate="yes" xml:space="preserve">
          <source>Inside of the if block we know that value must be &lt;code&gt;&quot;A&quot;&lt;/code&gt; because that&amp;rsquo;s the only time the if-statement will be truthy.</source>
          <target state="translated">Dentro del bloque if sabemos que el valor debe ser &lt;code&gt;&quot;A&quot;&lt;/code&gt; porque esa es la &amp;uacute;nica vez que la declaraci&amp;oacute;n if ser&amp;aacute; veraz.</target>
        </trans-unit>
        <trans-unit id="4d19f21faddc0369982f34fb998d7a87e3e3ab91" translate="yes" xml:space="preserve">
          <source>Install the Package Control plugin if you don&amp;rsquo;t have it</source>
          <target state="translated">Instale el complemento Package Control si no lo tiene</target>
        </trans-unit>
        <trans-unit id="c81b79df3c6448eae7c4f80428b54cd5692a17d7" translate="yes" xml:space="preserve">
          <source>Installation</source>
          <target state="translated">Installation</target>
        </trans-unit>
        <trans-unit id="287044f73b2dcfe1503bb32ec13af489f09a4131" translate="yes" xml:space="preserve">
          <source>Instance is optional and is mixed by default.</source>
          <target state="translated">La instancia es opcional y está mezclada por defecto.</target>
        </trans-unit>
        <trans-unit id="42265abaed207a8433bf897fbee94fabb9b7efc6" translate="yes" xml:space="preserve">
          <source>Instead of typing out a full include every time, you can also use the type annotation shorthand with a single colon &lt;code&gt;:&lt;/code&gt; at the start of the comment.</source>
          <target state="translated">En lugar de escribir una inclusi&amp;oacute;n completa cada vez, tambi&amp;eacute;n puede usar la abreviatura de anotaci&amp;oacute;n de tipo con dos puntos &lt;code&gt;:&lt;/code&gt; al comienzo del comentario.</target>
        </trans-unit>
        <trans-unit id="4f9d52dffb6f20d8a91f95ec202f836667e53109" translate="yes" xml:space="preserve">
          <source>Instead we can assert the type within the function using a type assertion and now we&amp;rsquo;re validating our inputs.</source>
          <target state="translated">En su lugar, podemos afirmar el tipo dentro de la funci&amp;oacute;n usando una afirmaci&amp;oacute;n de tipo y ahora estamos validando nuestras entradas.</target>
        </trans-unit>
        <trans-unit id="8a0cda6edccbb3f27daf363a3f9e17bc75002fbb" translate="yes" xml:space="preserve">
          <source>Instead we can create a generic (or polymorphic type) in our function and use it in place of other types.</source>
          <target state="translated">En cambio,podemos crear un genérico (o tipo polimórfico)en nuestra función y utilizarlo en lugar de otros tipos.</target>
        </trans-unit>
        <trans-unit id="18d4d0b561fd6c9ad913387087267f2acae3ec97" translate="yes" xml:space="preserve">
          <source>Instead you must ensure the value is a certain type by refining it.</source>
          <target state="translated">En cambio,debes asegurarte de que el valor es de cierto tipo refinándolo.</target>
        </trans-unit>
        <trans-unit id="bc437265bdc77498fe50689b8604c4782c5d0c38" translate="yes" xml:space="preserve">
          <source>Instead, Flow needs to be able to figure out the type of a value by analyzing it without running it (static analysis). It works its way through every known type and starts to figure out what all the expressions around them result in.</source>
          <target state="translated">En cambio,Flow necesita ser capaz de averiguar el tipo de un valor analizándolo sin ejecutarlo (análisis estático).Se abre camino a través de todos los tipos conocidos y comienza a averiguar en qué resultan todas las expresiones que los rodean.</target>
        </trans-unit>
        <trans-unit id="cc0d73bb17ba9a6bc2ab84e4aeee29d97f21d5f9" translate="yes" xml:space="preserve">
          <source>Instead, if we create a union type of both object types, Flow will be able to know which object we&amp;rsquo;re using based on the success property.</source>
          <target state="translated">En cambio, si creamos un tipo de uni&amp;oacute;n de ambos tipos de objetos, Flow podr&amp;aacute; saber qu&amp;eacute; objeto estamos usando en funci&amp;oacute;n de la propiedad de &amp;eacute;xito.</target>
        </trans-unit>
        <trans-unit id="09971a8657fbf9e085d4cbb5f761ac73cf61af5d" translate="yes" xml:space="preserve">
          <source>Instead, you can use &lt;code&gt;interface&lt;/code&gt; in order to declare the structure of the class that you are expecting.</source>
          <target state="translated">En su lugar, puede usar la &lt;code&gt;interface&lt;/code&gt; para declarar la estructura de la clase que espera.</target>
        </trans-unit>
        <trans-unit id="7c9832840de0bf07db6e7e769199b00197d92be2" translate="yes" xml:space="preserve">
          <source>Instead, you could add a type to your generic like you would with a function parameter.</source>
          <target state="translated">En su lugar,podrías añadir un tipo a tu genérico como lo harías con un parámetro de la función.</target>
        </trans-unit>
        <trans-unit id="4a7f5be1f3824ca58b2047493f6f9764ebebd43f" translate="yes" xml:space="preserve">
          <source>Interface Generics</source>
          <target state="translated">Interfaz genérica</target>
        </trans-unit>
        <trans-unit id="5c9516afee7b643e69c589c7e2bd6bb8f850ec3e" translate="yes" xml:space="preserve">
          <source>Interface Methods</source>
          <target state="translated">Métodos de interfaz</target>
        </trans-unit>
        <trans-unit id="8e3d0bc70c93775ccb76349f5bd2dd104013f378" translate="yes" xml:space="preserve">
          <source>Interface Properties</source>
          <target state="translated">Propiedades de la interfaz</target>
        </trans-unit>
        <trans-unit id="21a1595cfcababf257ea39c1df3d595d9106d56e" translate="yes" xml:space="preserve">
          <source>Interface Syntax</source>
          <target state="translated">Sintaxis de la interfaz</target>
        </trans-unit>
        <trans-unit id="70f73f412d22faa3833d1fbb1c9b469c337baa08" translate="yes" xml:space="preserve">
          <source>Interface Types</source>
          <target state="translated">Tipos de interfaz</target>
        </trans-unit>
        <trans-unit id="74724adee3fa147f0cfea79a04b9867eafea6d0a" translate="yes" xml:space="preserve">
          <source>Interface generics are &lt;a href=&quot;../generics#toc-parameterized-generics&quot;&gt;parameterized&lt;/a&gt;. When you use an interface you need to pass parameters for each of its generics.</source>
          <target state="translated">Los gen&amp;eacute;ricos de la interfaz est&amp;aacute;n &lt;a href=&quot;../generics#toc-parameterized-generics&quot;&gt;parametrizados&lt;/a&gt; . Cuando usa una interfaz, necesita pasar par&amp;aacute;metros para cada uno de sus gen&amp;eacute;ricos.</target>
        </trans-unit>
        <trans-unit id="ff0e2f95a23bc1a0a798148519f6dbf839797446" translate="yes" xml:space="preserve">
          <source>Interface properties are &lt;a href=&quot;https://flow.org/en/lang/variance/&quot;&gt;invariant&lt;/a&gt; by default. But you can add modifiers to make them covariant (read-only) or contravariant (write-only).</source>
          <target state="translated">Las propiedades de la interfaz son &lt;a href=&quot;https://flow.org/en/lang/variance/&quot;&gt;invariantes&lt;/a&gt; de forma predeterminada. Pero puede agregar modificadores para hacerlos covariantes (solo lectura) o contravariantes (solo escritura).</target>
        </trans-unit>
        <trans-unit id="d3b1f8821225ec65ee0716fe750fde20ad499768" translate="yes" xml:space="preserve">
          <source>Interface properties can be optional as well.</source>
          <target state="translated">Las propiedades de la interfaz también pueden ser opcionales.</target>
        </trans-unit>
        <trans-unit id="5eda7a98fcca8f4914f0766acaea5b5c31ce76c1" translate="yes" xml:space="preserve">
          <source>Interface property variance (read-only and write-only)</source>
          <target state="translated">Variación de la propiedad de la interfaz (sólo lectura y sólo escritura)</target>
        </trans-unit>
        <trans-unit id="8d1aa740c66ddff084a50256d6d5d30cf43e7c72" translate="yes" xml:space="preserve">
          <source>Interfaces are created using the keyword &lt;code&gt;interface&lt;/code&gt; followed by its name and a block which contains the body of the type definition.</source>
          <target state="translated">Las interfaces se crean utilizando la &lt;code&gt;interface&lt;/code&gt; palabras clave seguida de su nombre y un bloque que contiene el cuerpo de la definici&amp;oacute;n de tipo.</target>
        </trans-unit>
        <trans-unit id="402c6f12d8378d77232d585fd7b337e32915eab4" translate="yes" xml:space="preserve">
          <source>Interfaces as maps</source>
          <target state="translated">Interfaces como mapas</target>
        </trans-unit>
        <trans-unit id="1a13b883b189e50bf8951cacdf198f7feb8f80b6" translate="yes" xml:space="preserve">
          <source>Interfaces can also have their own &lt;a href=&quot;../generics&quot;&gt;generics&lt;/a&gt;.</source>
          <target state="translated">Las interfaces tambi&amp;eacute;n pueden tener sus propios &lt;a href=&quot;../generics&quot;&gt;gen&amp;eacute;ricos&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="5b5667cb6fa2d471880ebd263d10231bc9b5599a" translate="yes" xml:space="preserve">
          <source>Interfaces with generics</source>
          <target state="translated">Interfaces con los genéricos</target>
        </trans-unit>
        <trans-unit id="ef35fc41614978724e53f8c707770be7d1309ab3" translate="yes" xml:space="preserve">
          <source>Intersection Types</source>
          <target state="translated">Tipos de intersección</target>
        </trans-unit>
        <trans-unit id="e1ecad2c1fbdd686a36d4b38b266bcecfd3b76fc" translate="yes" xml:space="preserve">
          <source>Intersection of function types</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9a31764a6d7e0f5c4582676c60aee1f2a34282cc" translate="yes" xml:space="preserve">
          <source>Intersection ranges, which are ANDed together, (e.g. &lt;code&gt;&amp;gt;=0.13.0 &amp;lt;0.14.0&lt;/code&gt;, which matches &lt;code&gt;0.13.0&lt;/code&gt; and &lt;code&gt;0.13.5&lt;/code&gt; but not &lt;code&gt;0.14.0&lt;/code&gt;).</source>
          <target state="translated">Rangos de intersecci&amp;oacute;n, que se unen con AND (por ejemplo, &lt;code&gt;&amp;gt;=0.13.0 &amp;lt;0.14.0&lt;/code&gt; , que coincide con &lt;code&gt;0.13.0&lt;/code&gt; y &lt;code&gt;0.13.5&lt;/code&gt; pero no con &lt;code&gt;0.14.0&lt;/code&gt; ).</target>
        </trans-unit>
        <trans-unit id="5f08815e0988cf77077de263c1ad9e7aa5845e9e" translate="yes" xml:space="preserve">
          <source>Intersection type syntax</source>
          <target state="translated">Sintaxis de tipo intersección</target>
        </trans-unit>
        <trans-unit id="626a19ac04f2c67f93200f15583f19cead27a82f" translate="yes" xml:space="preserve">
          <source>Intersection types are any number of types which are joined by an ampersand &lt;code&gt;&amp;amp;&lt;/code&gt;.</source>
          <target state="translated">Los tipos de intersecci&amp;oacute;n son cualquier n&amp;uacute;mero de tipos que est&amp;aacute;n unidos por un &lt;code&gt;&amp;amp;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="8f7c84eb5f66c165a2d5dcc86fb36cae890387ee" translate="yes" xml:space="preserve">
          <source>Intersection types are the opposite of union types. When calling a function that accepts an intersection type, we must pass in &lt;strong&gt;&lt;em&gt;all of those types&lt;/em&gt;&lt;/strong&gt;. But inside of our function we only have to treat it as &lt;strong&gt;&lt;em&gt;any one of those types&lt;/em&gt;&lt;/strong&gt;.</source>
          <target state="translated">Los tipos de intersecci&amp;oacute;n son lo opuesto a los tipos de uni&amp;oacute;n. Al llamar a una funci&amp;oacute;n que acepta un tipo de intersecci&amp;oacute;n, debemos pasar &lt;strong&gt;&lt;em&gt;todos esos tipos&lt;/em&gt;&lt;/strong&gt; . Pero dentro de nuestra funci&amp;oacute;n solo tenemos que tratarlo como &lt;strong&gt;&lt;em&gt;cualquiera de esos tipos&lt;/em&gt;&lt;/strong&gt; .</target>
        </trans-unit>
        <trans-unit id="05fd5c57befbf7fcd9f20936b84629f69018650a" translate="yes" xml:space="preserve">
          <source>Intersection types require all in, but one out</source>
          <target state="translated">Los tipos de intersección requieren todos dentro,pero uno fuera</target>
        </trans-unit>
        <trans-unit id="b7a19c5413699eccc99e2d547ef6d10a7c3d1bef" translate="yes" xml:space="preserve">
          <source>Intersections of exact object types may not work as you expect. If you need to combine exact object types, use object type spread:</source>
          <target state="translated">Las intersecciones de los tipos de objetos exactos pueden no funcionar como se espera.Si necesita combinar tipos de objetos exactos,utilice la dispersión de tipos de objetos:</target>
        </trans-unit>
        <trans-unit id="ef1118f07f2f0b37c8e805eac5ac7941bb61730b" translate="yes" xml:space="preserve">
          <source>Intersections of object types</source>
          <target state="translated">Intersecciones de tipos de objetos</target>
        </trans-unit>
        <trans-unit id="2abe56a8a00ed911e647b0d623cffa17d4460d9d" translate="yes" xml:space="preserve">
          <source>Invariance</source>
          <target state="translated">Invariance</target>
        </trans-unit>
        <trans-unit id="da76716b09b6ac18a389bcf77588eef885895f86" translate="yes" xml:space="preserve">
          <source>Invariance &lt;em&gt;does not&lt;/em&gt; accept &lt;strong&gt;subtypes&lt;/strong&gt;.</source>
          <target state="translated">La invariancia &lt;em&gt;no&lt;/em&gt; acepta &lt;strong&gt;subtipos&lt;/strong&gt; .</target>
        </trans-unit>
        <trans-unit id="6653bcb7fefb5beca9669e196871c6f423594c47" translate="yes" xml:space="preserve">
          <source>Invariance &lt;em&gt;does not&lt;/em&gt; accept &lt;strong&gt;supertypes&lt;/strong&gt;.</source>
          <target state="translated">La invarianza &lt;em&gt;no&lt;/em&gt; acepta &lt;strong&gt;supertipos&lt;/strong&gt; .</target>
        </trans-unit>
        <trans-unit id="c6b07258a9d2edf9a12dc279bf478a7591587b4c" translate="yes" xml:space="preserve">
          <source>It can get a little bit more complicated than this.</source>
          <target state="translated">Puede ser un poco más complicado que esto.</target>
        </trans-unit>
        <trans-unit id="8ac3222c9e870b3beeb9fa60d3ea024f58633b21" translate="yes" xml:space="preserve">
          <source>It dramatically improves &lt;em&gt;performance&lt;/em&gt;, in particular when it comes to rechecks. Suppose we want Flow to check a file &lt;code&gt;foo.js&lt;/code&gt;, for which it hasn&amp;rsquo;t checked its dependencies yet. Classic mode would need to check all dependencies and generate signatures from them first, before it could check &lt;code&gt;foo.js&lt;/code&gt;. In types-first, Flow extracts the dependency signatures just by looking at the annotations around the exports. This process is mostly syntactic, and therefore much faster than full type inference.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4cd620e47ef20ba4e8177e77b065018991926aa3" translate="yes" xml:space="preserve">
          <source>It improves error &lt;em&gt;reliability&lt;/em&gt;. Inferred types often become complicated, and may lead to errors being reported in downstream files, far away from their actual source. Type annotations at file boundaries of files can help localize such errors, and address them in the file that introduced them.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1057c3d1333719898e827a2ee41fb627a60e7f29" translate="yes" xml:space="preserve">
          <source>It is also different from the &lt;code&gt;[declarations]&lt;/code&gt; section. This also does not typecheck the file contents, but &lt;code&gt;[declarations]&lt;/code&gt; does extract and use the signatures of functions, classes, etc, when checking other code.</source>
          <target state="translated">Tambi&amp;eacute;n es diferente de la secci&amp;oacute;n &lt;code&gt;[declarations]&lt;/code&gt; . Esto tampoco verifica el contenido del archivo, pero &lt;code&gt;[declarations]&lt;/code&gt; extrae y usa las firmas de funciones, clases, etc., cuando verifica otro c&amp;oacute;digo.</target>
        </trans-unit>
        <trans-unit id="d3fbd12c64d612ad1b02084fd80cefee8a6288b8" translate="yes" xml:space="preserve">
          <source>It is also possible to declare both &lt;strong&gt;named&lt;/strong&gt; and &lt;strong&gt;default&lt;/strong&gt; exports in the same &lt;code&gt;declare module&lt;/code&gt; body.</source>
          <target state="translated">Tambi&amp;eacute;n es posible declarar exportaciones con &lt;strong&gt;nombre&lt;/strong&gt; y &lt;strong&gt;predeterminadas&lt;/strong&gt; en el mismo cuerpo de &lt;code&gt;declare module&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="f0d57b0ea07b126bc6a1382dc48f77a187c015b2" translate="yes" xml:space="preserve">
          <source>It is also possible to invalidate refinements, for example:</source>
          <target state="translated">También es posible invalidar los refinamientos,por ejemplo:</target>
        </trans-unit>
        <trans-unit id="c9db640a0ff9ca2d2098c8cf12f7a5222f3c36e9" translate="yes" xml:space="preserve">
          <source>It is common to have an empty &lt;code&gt;.flowconfig&lt;/code&gt; file for your project. However, you can &lt;a href=&quot;https://flow.org/en/config/&quot;&gt;configure and customize Flow&lt;/a&gt; in many ways through options available to be added to &lt;code&gt;.flowconfig&lt;/code&gt;.</source>
          <target state="translated">Es com&amp;uacute;n tener un archivo &lt;code&gt;.flowconfig&lt;/code&gt; vac&amp;iacute;o para su proyecto. Sin embargo, puede &lt;a href=&quot;https://flow.org/en/config/&quot;&gt;configurar y personalizar Flow&lt;/a&gt; de muchas formas a trav&amp;eacute;s de las opciones disponibles para agregar a &lt;code&gt;.flowconfig&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="f18f6eaa3cc9bc0e269b3a3c0472f8b8023852b6" translate="yes" xml:space="preserve">
          <source>It is designed for use on multiple files at once, rather than one file at a time. For this reason it doesn&amp;rsquo;t connect to an existing Flow server, but rather starts a checking process of its own.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d64a8b56c9d350143c6c4049c479ee66c6fad872" translate="yes" xml:space="preserve">
          <source>It is often useful to share types in between modules (files). In Flow, you can export type aliases, interfaces, and classes from one file and import them in another.</source>
          <target state="translated">Suele ser útil compartir tipos entre los módulos (archivos).En Flow,puede exportar alias de tipos,interfaces y clases de un archivo e importarlos en otro.</target>
        </trans-unit>
        <trans-unit id="793822e10b49e7269fcbd5028ab19a2d3c9de56e" translate="yes" xml:space="preserve">
          <source>It may also be used as the return type of a stateless functional component:</source>
          <target state="translated">También puede utilizarse como el tipo de devolución de un componente funcional apátrida:</target>
        </trans-unit>
        <trans-unit id="53dd287ab3331a5f9788439cae3b8c7fffa8dcbc" translate="yes" xml:space="preserve">
          <source>It uses the following flags:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="75369e827759c9f54ba9a23edbe8b02d79a3c6c7" translate="yes" xml:space="preserve">
          <source>It will compile to what you would expect: &lt;code&gt;React.createElement(MyComponent, {}, 42)&lt;/code&gt;.</source>
          <target state="translated">Se compilar&amp;aacute; seg&amp;uacute;n lo que esperar&amp;iacute;a: &lt;code&gt;React.createElement(MyComponent, {}, 42)&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="437b6a01d01d9d25c01a9176c4a110b2afa0ca75" translate="yes" xml:space="preserve">
          <source>It won&amp;rsquo;t be able to fill in every required type annotation. Some cases will require manual effort.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="083c10e6c6edff28e6273ebb5cfbc6a9d5dd4768" translate="yes" xml:space="preserve">
          <source>It would be hard to create a type for this because we&amp;rsquo;re creating a new object based on another object.</source>
          <target state="translated">Ser&amp;iacute;a dif&amp;iacute;cil crear un tipo para esto porque estamos creando un nuevo objeto basado en otro objeto.</target>
        </trans-unit>
        <trans-unit id="87f8da49eb8c969a18ca82d9274232c071921f87" translate="yes" xml:space="preserve">
          <source>It&amp;rsquo;s common for JavaScript code to introduce &amp;ldquo;optional&amp;rdquo; values so that you have the option of leaving out the value or passing &lt;code&gt;null&lt;/code&gt; instead.</source>
          <target state="translated">Es com&amp;uacute;n que el c&amp;oacute;digo JavaScript introduzca valores &quot;opcionales&quot; para que tenga la opci&amp;oacute;n de omitir el valor o pasar &lt;code&gt;null&lt;/code&gt; lugar.</target>
        </trans-unit>
        <trans-unit id="09d032ed6e922fe662f519234b7d555a3d8f5ecb" translate="yes" xml:space="preserve">
          <source>It&amp;rsquo;s safe to use an object with &amp;ldquo;extra&amp;rdquo; properties in a position that is annotated with a specific set of properties.</source>
          <target state="translated">Es seguro utilizar un objeto con propiedades &quot;extra&quot; en una posici&amp;oacute;n que est&amp;eacute; anotada con un conjunto espec&amp;iacute;fico de propiedades.</target>
        </trans-unit>
        <trans-unit id="64245667942d0f59a4c76fbe92eaa77e04d0970f" translate="yes" xml:space="preserve">
          <source>It&amp;rsquo;s valid to use an &lt;code&gt;Employee&lt;/code&gt; instance where a &lt;code&gt;Person&lt;/code&gt; instance is expected.</source>
          <target state="translated">Es v&amp;aacute;lido usar una instancia de &lt;code&gt;Employee&lt;/code&gt; donde se espera una instancia de &lt;code&gt;Person&lt;/code&gt; a .</target>
        </trans-unit>
        <trans-unit id="62185bdbfa583ea0a944a6564348a7230248cc32" translate="yes" xml:space="preserve">
          <source>JSX intrinsics like &lt;code&gt;div&lt;/code&gt; will give you their DOM instance. For &lt;code&gt;React.ElementRef&amp;lt;'div'&amp;gt;&lt;/code&gt; that would be &lt;code&gt;HTMLDivElement&lt;/code&gt;. For &lt;code&gt;React.ElementRef&amp;lt;'input'&amp;gt;&lt;/code&gt; that would be &lt;code&gt;HTMLInputElement&lt;/code&gt;.</source>
          <target state="translated">Los intr&amp;iacute;nsecos JSX como &lt;code&gt;div&lt;/code&gt; le dar&amp;aacute;n su instancia DOM. Para &lt;code&gt;React.ElementRef&amp;lt;'div'&amp;gt;&lt;/code&gt; ser&amp;iacute;a &lt;code&gt;HTMLDivElement&lt;/code&gt; . Para &lt;code&gt;React.ElementRef&amp;lt;'input'&amp;gt;&lt;/code&gt; ser&amp;iacute;a &lt;code&gt;HTMLInputElement&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="314a8a9290ad5ef0b2052cf134783f7c4c08b7c9" translate="yes" xml:space="preserve">
          <source>JavaScript &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes&quot;&gt;classes&lt;/a&gt; in Flow operate both as a value and a type.</source>
          <target state="translated">Las &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes&quot;&gt;clases de&lt;/a&gt; JavaScript en Flow operan tanto como un valor como como un tipo.</target>
        </trans-unit>
        <trans-unit id="ff96432cd6c0749abc586d23ed4761948a7d9261" translate="yes" xml:space="preserve">
          <source>JavaScript also supports having rest parameters or parameters that collect an array of arguments at the end of a list of parameters. These have an ellipsis &lt;code&gt;...&lt;/code&gt; before them.</source>
          <target state="translated">JavaScript tambi&amp;eacute;n admite tener par&amp;aacute;metros de descanso o par&amp;aacute;metros que recopilan una matriz de argumentos al final de una lista de par&amp;aacute;metros. Estos tienen puntos suspensivos &lt;code&gt;...&lt;/code&gt; antes de ellos.</target>
        </trans-unit>
        <trans-unit id="33492c4de9d1778195557bc2a689c8efa4fb169f" translate="yes" xml:space="preserve">
          <source>JavaScript bugs can have significant impact at Facebook. Developers want to find and fix as many bugs as they can by the time their code rolls out into production. So we must care about soundness. At the same time, we must also care about not reporting too many spurious errors, because a low signal/noise ratio implies a low fix rate.</source>
          <target state="translated">Los errores de JavaScript pueden tener un impacto significativo en Facebook.Los desarrolladores quieren encontrar y arreglar tantos bugs como puedan para cuando su código entre en producción.Así que debemos preocuparnos por la solidez.Al mismo tiempo,también debemos preocuparnos por no reportar demasiados errores espurios,porque una baja relación señal/ruido implica una baja tasa de corrección.</target>
        </trans-unit>
        <trans-unit id="d19af2dce65e63655c2e776d25a142cbd6199eba" translate="yes" xml:space="preserve">
          <source>JavaScript can also implicitly convert other types of values into booleans.</source>
          <target state="translated">JavaScript también puede implícitamente convertir otros tipos de valores en booleanos.</target>
        </trans-unit>
        <trans-unit id="485f1f2852599072f08415fb5cfd6b061d9a0dd4" translate="yes" xml:space="preserve">
          <source>JavaScript has a &lt;code&gt;typeof&lt;/code&gt; operator which returns a string describing a value.</source>
          <target state="translated">JavaScript tiene un operador &lt;code&gt;typeof&lt;/code&gt; que devuelve una cadena que describe un valor.</target>
        </trans-unit>
        <trans-unit id="eecc786af80843327406bcc95d93039f0b604da8" translate="yes" xml:space="preserve">
          <source>JavaScript has a number of different primitive types (&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures&quot;&gt;MDN&lt;/a&gt;):</source>
          <target state="translated">JavaScript tiene varios tipos primitivos diferentes ( &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures&quot;&gt;MDN&lt;/a&gt; ):</target>
        </trans-unit>
        <trans-unit id="ce0fe7a86fd9b14d2fbe082506c653d7a9eeb404" translate="yes" xml:space="preserve">
          <source>JavaScript has both &lt;code&gt;null&lt;/code&gt; and &lt;code&gt;undefined&lt;/code&gt;. Flow treats these as separate types: &lt;code&gt;null&lt;/code&gt; and &lt;code&gt;void&lt;/code&gt; (for &lt;code&gt;undefined&lt;/code&gt;).</source>
          <target state="translated">JavaScript tiene tanto &lt;code&gt;null&lt;/code&gt; como &lt;code&gt;undefined&lt;/code&gt; . Flow los trata como tipos separados: &lt;code&gt;null&lt;/code&gt; y &lt;code&gt;void&lt;/code&gt; (para &lt;code&gt;undefined&lt;/code&gt; ).</target>
        </trans-unit>
        <trans-unit id="40359189cd32fdb5d25cf14079d2c89de3d26e61" translate="yes" xml:space="preserve">
          <source>JavaScript has three ways of declaring local variables:</source>
          <target state="translated">JavaScript tiene tres formas de declarar las variables locales:</target>
        </trans-unit>
        <trans-unit id="377373e4c9e318e17a21d159b16d98d2f2d7a8f4" translate="yes" xml:space="preserve">
          <source>JavaScript implicitly converts other types of values into strings by concatenating them.</source>
          <target state="translated">JavaScript implícitamente convierte otros tipos de valores en cadenas al concatenarlos.</target>
        </trans-unit>
        <trans-unit id="db1d2f70ca60dcb812c319504dfac9c408dad07e" translate="yes" xml:space="preserve">
          <source>JavaScript: The Good and the Bad</source>
          <target state="translated">Javascript:Lo bueno y lo malo</target>
        </trans-unit>
        <trans-unit id="1baa7d034b3c654fd892b56488a2e2906ca22f77" translate="yes" xml:space="preserve">
          <source>Just don&amp;rsquo;t forget to replace the declarations with proper implementations.</source>
          <target state="translated">No olvide reemplazar las declaraciones con implementaciones adecuadas.</target>
        </trans-unit>
        <trans-unit id="03cc07a06695efabc9bb1deed8b72855cef54594" translate="yes" xml:space="preserve">
          <source>Just like in functions, class methods can have annotations for both parameters (input) and returns (output).</source>
          <target state="translated">Al igual que en las funciones,los métodos de clase pueden tener anotaciones tanto para los parámetros (entrada)como para los retornos (salida).</target>
        </trans-unit>
        <trans-unit id="f0796f6608e21ddf9f9cee05b46aec16a2404747" translate="yes" xml:space="preserve">
          <source>Just like other type imports, this code will be stripped away by a compiler and will not add a dependency on the other module.</source>
          <target state="translated">Al igual que las importaciones de otro tipo,este código será eliminado por un compilador y no añadirá una dependencia del otro módulo.</target>
        </trans-unit>
        <trans-unit id="6cfd51b40ca6ae71ea4ad94dee1f137fd72e5baa" translate="yes" xml:space="preserve">
          <source>Just note that &lt;code&gt;?Type[]&lt;/code&gt; is the equivalent of &lt;code&gt;?Array&amp;lt;T&amp;gt;&lt;/code&gt; and not &lt;code&gt;Array&amp;lt;?T&amp;gt;&lt;/code&gt;.</source>
          <target state="translated">Solo tenga en cuenta que &lt;code&gt;?Type[]&lt;/code&gt; es el equivalente de &lt;code&gt;?Array&amp;lt;T&amp;gt;&lt;/code&gt; y no &lt;code&gt;Array&amp;lt;?T&amp;gt;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="4434db270fc0025e6dbf7944b0a7129f670d0468" translate="yes" xml:space="preserve">
          <source>LanguageClient-neovim</source>
          <target state="translated">LanguageClient-neovim</target>
        </trans-unit>
        <trans-unit id="95281a82e78ce2087d1012bf40625523f8488a7d" translate="yes" xml:space="preserve">
          <source>Languages like C++, Java, and Swift have primarily nominal type systems.</source>
          <target state="translated">Lenguajes como C++,Java y Swift tienen principalmente sistemas de tipo nominal.</target>
        </trans-unit>
        <trans-unit id="c792712a7965712fd189272a6613d98437d6180b" translate="yes" xml:space="preserve">
          <source>Languages like OCaml, Haskell, and Elm have primarily structural type systems.</source>
          <target state="translated">Lenguas como OCaml,Haskell y Elm tienen principalmente sistemas de tipo estructural.</target>
        </trans-unit>
        <trans-unit id="a8a1053bb6874133e95b37afbe211c7a892a815e" translate="yes" xml:space="preserve">
          <source>Lazy Modes</source>
          <target state="translated">Modos perezosos</target>
        </trans-unit>
        <trans-unit id="dfdfa63658de426609e22c38f88280bb9b75116d" translate="yes" xml:space="preserve">
          <source>Lazy mode tries to classify your code into four categories.</source>
          <target state="translated">El modo perezoso trata de clasificar su código en cuatro categorías.</target>
        </trans-unit>
        <trans-unit id="3dbc910e4fff9344f64869a8a5fc5c3d4355ac06" translate="yes" xml:space="preserve">
          <source>Lazy mode will still find all the JavaScript files and parse them. But it won&amp;rsquo;t typecheck the unchecked files.</source>
          <target state="translated">El modo Lazy seguir&amp;aacute; encontrando todos los archivos JavaScript y los analizar&amp;aacute;. Pero no revisar&amp;aacute; los archivos sin marcar.</target>
        </trans-unit>
        <trans-unit id="ad97b5eba3e92f8085f952420bce8e282a6f3f53" translate="yes" xml:space="preserve">
          <source>Learn how the type system in Flow works: Subtyping, Variance, Refinements, and more.</source>
          <target state="translated">Aprende cómo funciona el sistema de tipos en Flow:Subtipificación,variación,refinamientos y más.</target>
        </trans-unit>
        <trans-unit id="17c6582762d51b971201160cc102c9a657f98c40" translate="yes" xml:space="preserve">
          <source>Learn how to add Flow type annotations to your code: Primitives, Objects, Functions, Classes, and more.</source>
          <target state="translated">Aprende a agregar anotaciones de tipo de flujo a tu código:Primitivos,objetos,funciones,clases y más.</target>
        </trans-unit>
        <trans-unit id="9061150cf645a8a07d4e182bd88b83043c6adeca" translate="yes" xml:space="preserve">
          <source>Learn how to configure Flow's linter to find potentially harmful code.</source>
          <target state="translated">Aprende a configurar el linterna de Flow para encontrar código potencialmente dañino.</target>
        </trans-unit>
        <trans-unit id="ec546a6d98494e29fb29baba819e9036753ffc1c" translate="yes" xml:space="preserve">
          <source>Learn how to create and use library definitions for the third-party code your code depends on.</source>
          <target state="translated">Aprende a crear y utilizar definiciones de biblioteca para el código de terceros del que depende tu código.</target>
        </trans-unit>
        <trans-unit id="81f0dff59c9c62d6cf866bb76b77e359a044ee03" translate="yes" xml:space="preserve">
          <source>Learn how to enable stricter type checking on a file-by-file basis.</source>
          <target state="translated">Aprenda a habilitar una comprobación de tipo más estricta en cada archivo.</target>
        </trans-unit>
        <trans-unit id="c70b764f18ae2f3c19d5793e638472220f06722b" translate="yes" xml:space="preserve">
          <source>Learn how to suppress Flow's type errors.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6b22d7b7814e7097977052e60714138c723c00f5" translate="yes" xml:space="preserve">
          <source>Learn how to use Flow to effectively type common and advanced React patterns.</source>
          <target state="translated">Aprende a usar el Flujo para escribir eficazmente patrones de Reacción comunes y avanzados.</target>
        </trans-unit>
        <trans-unit id="2b9e35721f161da639af3e629c43a749a10c8d13" translate="yes" xml:space="preserve">
          <source>Learn how to write types in .flow files.</source>
          <target state="translated">Aprende a escribir tipos en archivos .flow.</target>
        </trans-unit>
        <trans-unit id="89668dad1cc2803bc9a05873362cf34088114329" translate="yes" xml:space="preserve">
          <source>Less specific inputs &amp;mdash; Good</source>
          <target state="translated">Entradas menos espec&amp;iacute;ficas - Bueno</target>
        </trans-unit>
        <trans-unit id="923403997632248e58e2bb70246889bdff43c52c" translate="yes" xml:space="preserve">
          <source>Less specific outputs &amp;mdash; Bad</source>
          <target state="translated">Salidas menos espec&amp;iacute;ficas - Malo</target>
        </trans-unit>
        <trans-unit id="56b22fadb66ce39178decbc7081dadaa222b6580" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s look at a couple of more advanced examples:</source>
          <target state="translated">Veamos un par de ejemplos m&amp;aacute;s avanzados:</target>
        </trans-unit>
        <trans-unit id="4d2a79c6b93594188cbf9b55c1481295a10f9571" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s look at a more general, and sometimes more convenient way to declare types for modules: &lt;code&gt;.flow&lt;/code&gt; files.</source>
          <target state="translated">Veamos una forma m&amp;aacute;s general y, a veces, m&amp;aacute;s conveniente de declarar tipos de m&amp;oacute;dulos: archivos &lt;code&gt;.flow&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="e86757a83ce64508253852d9564cd9fe0caffc8b" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s rewrite our function to handle each type individually.</source>
          <target state="translated">Reescribamos nuestra funci&amp;oacute;n para manejar cada tipo individualmente.</target>
        </trans-unit>
        <trans-unit id="9f80216838aa529f22c630c26f5b236d726d206d" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s say we have a function type and a few functions. Which of the functions can be used safely in code that expects the given function type?</source>
          <target state="translated">Digamos que tenemos un tipo de funci&amp;oacute;n y algunas funciones. &amp;iquest;Cu&amp;aacute;les de las funciones se pueden usar de forma segura en el c&amp;oacute;digo que espera el tipo de funci&amp;oacute;n dado?</target>
        </trans-unit>
        <trans-unit id="19a72503865e9c4d4dbb4e6b8d83e9c6bb555f83" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s see a couple of examples:</source>
          <target state="translated">Veamos un par de ejemplos:</target>
        </trans-unit>
        <trans-unit id="3f378a2d680120a037a23d1a877c71075aaafcf4" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s see an example. Suppose you have a function called &lt;code&gt;run&lt;/code&gt; that takes an object of thunks (functions in the form &lt;code&gt;() =&amp;gt; A&lt;/code&gt;) as input:</source>
          <target state="translated">Veamos un ejemplo. Suponga que tiene una funci&amp;oacute;n llamada &lt;code&gt;run&lt;/code&gt; que toma un objeto de thunks (funciones en la forma &lt;code&gt;() =&amp;gt; A&lt;/code&gt; ) como entrada:</target>
        </trans-unit>
        <trans-unit id="32b252980a12fe72e87f2a649ca85e8a29abefd4" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s start with the simplest HOC:</source>
          <target state="translated">Comencemos con el HOC m&amp;aacute;s simple:</target>
        </trans-unit>
        <trans-unit id="ffff4663a687b3c96978f5c3f0d326215fa1908f" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s take a look at how you can type some example HOCs.</source>
          <target state="translated">Echemos un vistazo a c&amp;oacute;mo puede escribir algunos ejemplos de HOC.</target>
        </trans-unit>
        <trans-unit id="f9b942f0b29382ee9e16a650bf2bb4ee6a83a2ac" translate="yes" xml:space="preserve">
          <source>Library Definitions</source>
          <target state="translated">Definiciones de la biblioteca</target>
        </trans-unit>
        <trans-unit id="de6d8b01f166fb75ee7809437032a5304f395753" translate="yes" xml:space="preserve">
          <source>Library definitions are considered strict (as they can be included in many different projects with contradicting strict configurations).</source>
          <target state="translated">Las definiciones de la biblioteca se consideran estrictas (ya que pueden incluirse en muchos proyectos diferentes con configuraciones estrictas contradictorias).</target>
        </trans-unit>
        <trans-unit id="58fd3b1b83cc7fc933d72fe934bdb6e534441281" translate="yes" xml:space="preserve">
          <source>Licensed under the MIT License.</source>
          <target state="translated">Con licencia del MIT.</target>
        </trans-unit>
        <trans-unit id="1f94a87973cd7d8f6f84a5de26376923c65809ef" translate="yes" xml:space="preserve">
          <source>Like &lt;a href=&quot;#toc-implicit-inexact-object&quot;&gt;&lt;code&gt;implicit-inexact-object&lt;/code&gt;&lt;/a&gt;, except triggers even when the &lt;code&gt;exact_by_default&lt;/code&gt; option is set to &lt;code&gt;true&lt;/code&gt;.</source>
          <target state="translated">Como &lt;a href=&quot;#toc-implicit-inexact-object&quot;&gt; &lt;code&gt;implicit-inexact-object&lt;/code&gt; &lt;/a&gt; , excepto que se dispara incluso cuando la opci&amp;oacute;n &lt;code&gt;exact_by_default&lt;/code&gt; se establece en &lt;code&gt;true&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="99631d72797c2b4f916d1968332cece8d677359f" translate="yes" xml:space="preserve">
          <source>Like &lt;a href=&quot;#toc-react-element&quot;&gt;&lt;code&gt;React.Element&amp;lt;typeof Component&amp;gt;&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;typeof Component&lt;/code&gt; must be the type &lt;em&gt;of&lt;/em&gt; a React component so you need to use &lt;code&gt;typeof&lt;/code&gt; as in &lt;code&gt;React.ElementProps&amp;lt;typeof MyComponent&amp;gt;&lt;/code&gt;.</source>
          <target state="translated">Al igual que &lt;a href=&quot;#toc-react-element&quot;&gt; &lt;code&gt;React.Element&amp;lt;typeof Component&amp;gt;&lt;/code&gt; &lt;/a&gt; , &lt;code&gt;typeof Component&lt;/code&gt; debe ser del tipo &lt;em&gt;de&lt;/em&gt; un componente React, por lo que debe usar &lt;code&gt;typeof&lt;/code&gt; como en &lt;code&gt;React.ElementProps&amp;lt;typeof MyComponent&amp;gt;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="afdeb072663138fc0c7eb121d5d1c44b8ac851c2" translate="yes" xml:space="preserve">
          <source>Like &lt;a href=&quot;#toc-react-element&quot;&gt;&lt;code&gt;React.Element&amp;lt;typeof Component&amp;gt;&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;typeof Component&lt;/code&gt; must be the type &lt;em&gt;of&lt;/em&gt; a React component so you need to use &lt;code&gt;typeof&lt;/code&gt; as in &lt;code&gt;React.ElementRef&amp;lt;typeof MyComponent&amp;gt;&lt;/code&gt;.</source>
          <target state="translated">Al igual que &lt;a href=&quot;#toc-react-element&quot;&gt; &lt;code&gt;React.Element&amp;lt;typeof Component&amp;gt;&lt;/code&gt; &lt;/a&gt; , &lt;code&gt;typeof Component&lt;/code&gt; debe ser del tipo &lt;em&gt;de&lt;/em&gt; un componente React, por lo que debe usar &lt;code&gt;typeof&lt;/code&gt; como en &lt;code&gt;React.ElementRef&amp;lt;typeof MyComponent&amp;gt;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="3bfdd355019fb00dad0f94f122a17cd4e371ba06" translate="yes" xml:space="preserve">
          <source>Like &lt;a href=&quot;#toc-react-element&quot;&gt;&lt;code&gt;React.Element&amp;lt;typeof Component&amp;gt;&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;typeof Component&lt;/code&gt; must be the type &lt;em&gt;of&lt;/em&gt; a React component so you need to use &lt;code&gt;typeof&lt;/code&gt; as in &lt;code&gt;React.Ref&amp;lt;typeof MyComponent&amp;gt;&lt;/code&gt;.</source>
          <target state="translated">Al igual que &lt;a href=&quot;#toc-react-element&quot;&gt; &lt;code&gt;React.Element&amp;lt;typeof Component&amp;gt;&lt;/code&gt; &lt;/a&gt; , &lt;code&gt;typeof Component&lt;/code&gt; debe ser del tipo &lt;em&gt;de&lt;/em&gt; un componente React, por lo que debe usar &lt;code&gt;typeof&lt;/code&gt; como en &lt;code&gt;React.Ref&amp;lt;typeof MyComponent&amp;gt;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="fbecb30c8c5786dd14c47738d4071ca6c0260abd" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;React.ElementProps&amp;lt;typeof Component&amp;gt;&lt;/code&gt; this utility gets the type of a component&amp;rsquo;s props but &lt;em&gt;preserves&lt;/em&gt; the optionality of &lt;code&gt;defaultProps&lt;/code&gt;!</source>
          <target state="translated">Al igual que &lt;code&gt;React.ElementProps&amp;lt;typeof Component&amp;gt;&lt;/code&gt; esta utilidad obtiene el tipo de los accesorios de un componente, &amp;iexcl;pero &lt;em&gt;conserva&lt;/em&gt; la opcionalidad de &lt;code&gt;defaultProps&lt;/code&gt; !</target>
        </trans-unit>
        <trans-unit id="d041aadefbd6307d2b548663eef27b76cecb7788" translate="yes" xml:space="preserve">
          <source>Like precision, speed also has other significant effects. When bugs are reported as the developer makes changes to code, they become part of the editing process&amp;mdash;the developer doesn&amp;rsquo;t need to run the code to detect bugs, and tracing bugs back to the code becomes simpler. Similarly, when the IDE can show the type of an expression, the definition reaching a reference, etc. as the developer is coding, we have observed that productivity can improve dramatically.</source>
          <target state="translated">Al igual que la precisi&amp;oacute;n, la velocidad tambi&amp;eacute;n tiene otros efectos importantes. Cuando se informa de errores cuando el desarrollador realiza cambios en el c&amp;oacute;digo, se convierten en parte del proceso de edici&amp;oacute;n; el desarrollador no necesita ejecutar el c&amp;oacute;digo para detectar errores y el seguimiento de los errores hasta el c&amp;oacute;digo se vuelve m&amp;aacute;s sencillo. De manera similar, cuando el IDE puede mostrar el tipo de expresi&amp;oacute;n, la definici&amp;oacute;n que llega a una referencia, etc. mientras el desarrollador est&amp;aacute; codificando, hemos observado que la productividad puede mejorar dram&amp;aacute;ticamente.</target>
        </trans-unit>
        <trans-unit id="59b86486aed4edafd59a372a9da15c32460385f0" translate="yes" xml:space="preserve">
          <source>Like this:</source>
          <target state="translated">Así:</target>
        </trans-unit>
        <trans-unit id="66fb1f635bf9b7934a337051ec9a565c68387c38" translate="yes" xml:space="preserve">
          <source>Limit the scope of the &lt;code&gt;well_formed_exports&lt;/code&gt; requirement to a specific directory of this project. For example</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ca9bb39641bb5197e4b9956408887b764b22c908" translate="yes" xml:space="preserve">
          <source>Limitations of predicate functions</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8f316525461e2a4c6c2b89d883cfb34c624544ab" translate="yes" xml:space="preserve">
          <source>Lint Rule Reference</source>
          <target state="translated">Referencia de la regla de la pelusa</target>
        </trans-unit>
        <trans-unit id="d1bf3e3c86e73b07580c5c816b1b04837ea95e8f" translate="yes" xml:space="preserve">
          <source>Lint Settings Precedence</source>
          <target state="translated">Precedencia de los ajustes de pelusa</target>
        </trans-unit>
        <trans-unit id="4dbc74e7618b9b038882a1a26b628723a0e3e49a" translate="yes" xml:space="preserve">
          <source>Lint settings can be specified in the &lt;code&gt;.flowconfig&lt;/code&gt; [lints] section as a list of &lt;code&gt;rule=severity&lt;/code&gt; pairs. These settings apply globally to the entire project.</source>
          <target state="translated">La configuraci&amp;oacute;n de pelusa se puede especificar en la &lt;code&gt;.flowconfig&lt;/code&gt; [ lints ] como una lista de pares &lt;code&gt;rule=severity&lt;/code&gt; . Esta configuraci&amp;oacute;n se aplica globalmente a todo el proyecto.</target>
        </trans-unit>
        <trans-unit id="e24c1254981afd7ee28d2270b93ccfb59eae399a" translate="yes" xml:space="preserve">
          <source>Lint settings can be specified inside a file using &lt;code&gt;flowlint&lt;/code&gt; comments. These settings apply to a region of a file, or a single line, or part of a line. For more details see &lt;a href=&quot;flowlint-comments&quot;&gt;Flowlint Comments&lt;/a&gt;.</source>
          <target state="translated">La configuraci&amp;oacute;n de pelusa se puede especificar dentro de un archivo usando comentarios de &lt;code&gt;flowlint&lt;/code&gt; . Esta configuraci&amp;oacute;n se aplica a una regi&amp;oacute;n de un archivo, una sola l&amp;iacute;nea o parte de una l&amp;iacute;nea. Para obtener m&amp;aacute;s detalles, consulte &lt;a href=&quot;flowlint-comments&quot;&gt;Comentarios de Flowlint&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="e5d62735922d047192446d6cc3f42ad67aea4c2d" translate="yes" xml:space="preserve">
          <source>Lint settings can be specified using the &lt;code&gt;--lints&lt;/code&gt; flag of a Flow server command as a comma-delimited list of &lt;code&gt;rule=severity&lt;/code&gt; pairs. These settings apply globally to the entire project.</source>
          <target state="translated">La configuraci&amp;oacute;n de Lint se puede especificar usando la &lt;code&gt;--lints&lt;/code&gt; de un comando del servidor de Flow como una lista delimitada por comas de pares &lt;code&gt;rule=severity&lt;/code&gt; . Esta configuraci&amp;oacute;n se aplica globalmente a todo el proyecto.</target>
        </trans-unit>
        <trans-unit id="24b2695bce6ad369789c8095fc314893c4855226" translate="yes" xml:space="preserve">
          <source>Lint settings in &lt;code&gt;flowlint&lt;/code&gt; comments have the highest priority, followed by lint rules in the &lt;code&gt;--lints&lt;/code&gt; flag, followed by the &lt;code&gt;.flowconfig&lt;/code&gt;. This order allows you to use &lt;code&gt;flowlint&lt;/code&gt; comments for fine-grained linting control, the &lt;code&gt;--lints&lt;/code&gt; flag for trying out new lint settings, and the &lt;code&gt;.flowconfig&lt;/code&gt; for stable project-wide settings.</source>
          <target state="translated">La configuraci&amp;oacute;n de pelusa en los comentarios de &lt;code&gt;flowlint&lt;/code&gt; tiene la m&amp;aacute;xima prioridad, seguida de las reglas de pelusa en el indicador &lt;code&gt;--lints&lt;/code&gt; , seguidas de &lt;code&gt;.flowconfig&lt;/code&gt; . Este orden le permite usar comentarios de &lt;code&gt;flowlint&lt;/code&gt; para un control de pelusa detallado, la &lt;code&gt;--lints&lt;/code&gt; para probar nuevas configuraciones de pelusa y &lt;code&gt;.flowconfig&lt;/code&gt; para configuraciones estables de todo el proyecto.</target>
        </trans-unit>
        <trans-unit id="b5dc277b08ab0a076088a55936d6bb1b36b56986" translate="yes" xml:space="preserve">
          <source>Linter-Flow</source>
          <target state="translated">Linter-Flow</target>
        </trans-unit>
        <trans-unit id="8740f6b1646315b108f5a7b7630739c109bdee42" translate="yes" xml:space="preserve">
          <source>Linting</source>
          <target state="translated">Linting</target>
        </trans-unit>
        <trans-unit id="0dad7bd175f8f98714812632da5a78ae6486cb98" translate="yes" xml:space="preserve">
          <source>Linting Overview</source>
          <target state="translated">Visión general de las pelusas</target>
        </trans-unit>
        <trans-unit id="013e2bb1e1c48cce810f0e9392c090ca8d741740" translate="yes" xml:space="preserve">
          <source>List the lint rules to enable . These are strongly recommended:</source>
          <target state="translated">Enumere las reglas de pelusa para habilitar...Se recomiendan encarecidamente:</target>
        </trans-unit>
        <trans-unit id="c5f9843abf3eea470a268920f6429a30a79e8c27" translate="yes" xml:space="preserve">
          <source>Literal Types</source>
          <target state="translated">Tipos literales</target>
        </trans-unit>
        <trans-unit id="fd4663b897abbd9f63aa1fb029df28511b239e0f" translate="yes" xml:space="preserve">
          <source>Look up types under cursor</source>
          <target state="translated">Busca los tipos bajo el cursor</target>
        </trans-unit>
        <trans-unit id="e8ed77b7f356c09433025e5f0c172332bccb8b7b" translate="yes" xml:space="preserve">
          <source>Makes Flow treat &lt;code&gt;require('foo.css')&lt;/code&gt; as if it were &lt;code&gt;require(PROJECT_ROOT + '/CSSFlowStub')&lt;/code&gt;.</source>
          <target state="translated">Hace que Flow trate &lt;code&gt;require('foo.css')&lt;/code&gt; como si fuera &lt;code&gt;require(PROJECT_ROOT + '/CSSFlowStub')&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="7bcccbe604db295f998f0c64b8b721fd6f5c7ea3" translate="yes" xml:space="preserve">
          <source>Making Suppressions More Granular with Error Codes</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="883a53b7e28c18b0803206061049c59ce3306d06" translate="yes" xml:space="preserve">
          <source>Maybe Types</source>
          <target state="translated">Tal vez los tipos</target>
        </trans-unit>
        <trans-unit id="78d444312215f80221ea8f50dcd6255ebd40e280" translate="yes" xml:space="preserve">
          <source>Maybe types</source>
          <target state="translated">Tal vez los tipos</target>
        </trans-unit>
        <trans-unit id="eeab6b1b5730d5897be20e8832d631c14302d02b" translate="yes" xml:space="preserve">
          <source>Maybe types accept the provided type as well as &lt;code&gt;null&lt;/code&gt; or &lt;code&gt;undefined&lt;/code&gt;. So &lt;code&gt;?number&lt;/code&gt; would mean &lt;code&gt;number&lt;/code&gt;, &lt;code&gt;null&lt;/code&gt;, or &lt;code&gt;undefined&lt;/code&gt;.</source>
          <target state="translated">Quiz&amp;aacute;s los tipos acepten el tipo proporcionado, as&amp;iacute; como &lt;code&gt;null&lt;/code&gt; o &lt;code&gt;undefined&lt;/code&gt; . Entonces &lt;code&gt;?number&lt;/code&gt; significar&amp;iacute;a &lt;code&gt;number&lt;/code&gt; , &lt;code&gt;null&lt;/code&gt; o &lt;code&gt;undefined&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="a099b97988d9786a09585297079102b85e29a055" translate="yes" xml:space="preserve">
          <source>Maybe types are for places where a value is optional and you can create them by adding a question mark in front of the type such as &lt;code&gt;?string&lt;/code&gt; or &lt;code&gt;?number&lt;/code&gt;.</source>
          <target state="translated">Quiz&amp;aacute;s los tipos son para lugares donde un valor es opcional y puede crearlos agregando un signo de interrogaci&amp;oacute;n delante del tipo, como &lt;code&gt;?string&lt;/code&gt; o &lt;code&gt;?number&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="0dc501bb2c0dd681d66351ee6c10f4bea3fa6bb6" translate="yes" xml:space="preserve">
          <source>Mixed Types</source>
          <target state="translated">Tipos mixtos</target>
        </trans-unit>
        <trans-unit id="38694f679fee1c9873abb6f0b39d8682bb35437c" translate="yes" xml:space="preserve">
          <source>Mixing nominal and structural typing</source>
          <target state="translated">Mezcla de tipificación nominal y estructural</target>
        </trans-unit>
        <trans-unit id="a152ec7cc4a239412b5ec07e59dc705597177c82" translate="yes" xml:space="preserve">
          <source>Module Types</source>
          <target state="translated">Tipos de módulos</target>
        </trans-unit>
        <trans-unit id="b2b4f329c4371fad34d57ca2c5ac16707d12ff70" translate="yes" xml:space="preserve">
          <source>More complex types like object or classes have more complex structures. They each get their own name even if they sometimes have the same structure overall.</source>
          <target state="translated">Los tipos más complejos como los objetos o las clases tienen estructuras más complejas.Cada uno recibe su propio nombre aunque a veces tienen la misma estructura en general.</target>
        </trans-unit>
        <trans-unit id="778013c00f70ed72cb3d9f3f32da1db73e971c69" translate="yes" xml:space="preserve">
          <source>More specific inputs &amp;mdash; Bad</source>
          <target state="translated">Entradas m&amp;aacute;s espec&amp;iacute;ficas - Malo</target>
        </trans-unit>
        <trans-unit id="5ce86c0f6222882e371b81384532e8ef38f27254" translate="yes" xml:space="preserve">
          <source>More specific outputs &amp;mdash; Good</source>
          <target state="translated">Resultados m&amp;aacute;s espec&amp;iacute;ficos - Bueno</target>
        </trans-unit>
        <trans-unit id="d01518022ba66aff4ed5b2b63c6552251faa6c8d" translate="yes" xml:space="preserve">
          <source>Most editors will likely display all Flow warnings, which is fine for small- to medium-scale projects, or projects with fewer unsuppressed warnings.</source>
          <target state="translated">Es probable que la mayoría de los editores muestren todas las advertencias de Flow,lo que está bien para proyectos de pequeña o mediana escala,o proyectos con menos advertencias no suprimidas.</target>
        </trans-unit>
        <trans-unit id="7b059f68400dbd84675bceaefa0fc9dee97bfc09" translate="yes" xml:space="preserve">
          <source>Most of the work that Flow does is comparing types against one another.</source>
          <target state="translated">La mayor parte del trabajo que hace Flow es comparar los tipos entre sí.</target>
        </trans-unit>
        <trans-unit id="865bd2fa28dfb2500c9d6ee7c2537c59e6ebb20a" translate="yes" xml:space="preserve">
          <source>Most people put the &lt;code&gt;.flowconfig&lt;/code&gt; in the root of their project (i.e. next to the &lt;code&gt;package.json&lt;/code&gt;). Some people put all their code in a &lt;code&gt;src/&lt;/code&gt; directory and therefore put the &lt;code&gt;.flowconfig&lt;/code&gt; at &lt;code&gt;src/.flowconfig&lt;/code&gt;.</source>
          <target state="translated">La mayor&amp;iacute;a de la gente pone &lt;code&gt;.flowconfig&lt;/code&gt; en la ra&amp;iacute;z de su proyecto (es decir, junto al &lt;code&gt;package.json&lt;/code&gt; ). Algunas personas ponen todo su c&amp;oacute;digo en un directorio &lt;code&gt;src/&lt;/code&gt; y, por lo tanto, ponen el &lt;code&gt;.flowconfig&lt;/code&gt; en &lt;code&gt;src/.flowconfig&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="24fb36600e4f5f9c4147c6aae34b2eb550d7c78f" translate="yes" xml:space="preserve">
          <source>Most real JavaScript programs depend on third-party code and not just code immediately under the control of the project. That means a project using Flow may need to reference outside code that either doesn&amp;rsquo;t have type information or doesn&amp;rsquo;t have accurate and/or precise type information. In order to handle this, Flow supports the concept of a &amp;ldquo;library definition&amp;rdquo; (AKA &amp;ldquo;libdef&amp;rdquo;).</source>
          <target state="translated">La mayor&amp;iacute;a de los programas JavaScript reales dependen del c&amp;oacute;digo de terceros y no solo del c&amp;oacute;digo que est&amp;aacute; inmediatamente bajo el control del proyecto. Eso significa que un proyecto que usa Flow puede necesitar hacer referencia a c&amp;oacute;digo externo que no tiene informaci&amp;oacute;n de tipo o no tiene informaci&amp;oacute;n de tipo precisa y / o precisa. Para manejar esto, Flow apoya el concepto de una &quot;definici&amp;oacute;n de biblioteca&quot; (tambi&amp;eacute;n conocido como &quot;libdef&quot;).</target>
        </trans-unit>
        <trans-unit id="3e58f860a0fe4e5d6b003e3170a2f45595516a83" translate="yes" xml:space="preserve">
          <source>Moving on to the next case. What happens if we have a single child, but that child is an array?</source>
          <target state="translated">Pasando al siguiente caso.¿Qué pasa si tenemos un solo hijo,pero ese hijo es un conjunto?</target>
        </trans-unit>
        <trans-unit id="0eaa6c704d21cdabb114c1eed0d1b20d3c99200e" translate="yes" xml:space="preserve">
          <source>Multiple children may also look like:</source>
          <target state="translated">Los niños múltiples también pueden parecerse:</target>
        </trans-unit>
        <trans-unit id="df45cc95bf1aa33f0579b3915c74bbc29792fe71" translate="yes" xml:space="preserve">
          <source>NOTE: Because a given module cannot be both an ES module and a CommonJS module, it is an error to mix &lt;code&gt;declare export [...]&lt;/code&gt; with &lt;code&gt;declare module.exports: ...&lt;/code&gt; in the same &lt;code&gt;declare module&lt;/code&gt; body.</source>
          <target state="translated">NOTA: Debido a que un m&amp;oacute;dulo dado no puede ser tanto un m&amp;oacute;dulo ES como un m&amp;oacute;dulo CommonJS, es un error mezclar &lt;code&gt;declare export [...]&lt;/code&gt; con &lt;code&gt;declare module.exports: ...&lt;/code&gt; en el mismo cuerpo de &lt;code&gt;declare module&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="8fc9d5db4bce8ff6003105d5b34b50810aab147d" translate="yes" xml:space="preserve">
          <source>NOTE: For new code prefer &lt;code&gt;any&lt;/code&gt; or &lt;code&gt;(...args: Array&amp;lt;any&amp;gt;) =&amp;gt; any&lt;/code&gt;. &lt;code&gt;Function&lt;/code&gt; has become an alias to &lt;code&gt;any&lt;/code&gt; and will be deprecated and removed in a future version of Flow.</source>
          <target state="translated">NOTA: Para c&amp;oacute;digo nuevo, prefiera &lt;code&gt;any&lt;/code&gt; o &lt;code&gt;(...args: Array&amp;lt;any&amp;gt;) =&amp;gt; any&lt;/code&gt; . &lt;code&gt;Function&lt;/code&gt; ha convertido en un alias de &lt;code&gt;any&lt;/code&gt; y quedar&amp;aacute; obsoleta y se eliminar&amp;aacute; en una versi&amp;oacute;n futura de Flow.</target>
        </trans-unit>
        <trans-unit id="a4fc17a7e6e5fe579f60ff1988706b047d7ddb6f" translate="yes" xml:space="preserve">
          <source>NOTE: For new code, prefer &lt;code&gt;any&lt;/code&gt; or &lt;code&gt;{[key:string]:any}&lt;/code&gt;. &lt;code&gt;Object&lt;/code&gt; is an alias to &lt;a href=&quot;../any&quot;&gt;&lt;code&gt;any&lt;/code&gt;&lt;/a&gt; and will be deprecated and removed in a future version of Flow.</source>
          <target state="translated">NOTA: Para un c&amp;oacute;digo nuevo, prefiera &lt;code&gt;any&lt;/code&gt; o &lt;code&gt;{[key:string]:any}&lt;/code&gt; . &lt;code&gt;Object&lt;/code&gt; es un alias de &lt;a href=&quot;../any&quot;&gt; &lt;code&gt;any&lt;/code&gt; &lt;/a&gt; y quedar&amp;aacute; obsoleto y se eliminar&amp;aacute; en una versi&amp;oacute;n futura de Flow.</target>
        </trans-unit>
        <trans-unit id="9bcc1eb8d16a0354aa6793057eb9ea662ddca8a2" translate="yes" xml:space="preserve">
          <source>NOTE: The syntax for declarations in a declaration file is the same as we&amp;rsquo;ve seen in &lt;a href=&quot;https://flow.org/en/libdefs/creation&quot;&gt;Creating Library Definitions section&lt;/a&gt;.</source>
          <target state="translated">NOTA: La sintaxis de las declaraciones en un archivo de declaraci&amp;oacute;n es la misma que hemos visto en la &lt;a href=&quot;https://flow.org/en/libdefs/creation&quot;&gt;secci&amp;oacute;n Creaci&amp;oacute;n de definiciones de biblioteca&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="eee4834f57293f261d87c33868be5aa7425351c9" translate="yes" xml:space="preserve">
          <source>NOTE: Using the &lt;code&gt;/flow-typed&lt;/code&gt; directory for libdefs is a convention that enables Flow to JustWork&amp;trade; out of the box and encourages consistency across projects that use Flow, but it is also possible to explicitly configure Flow to look elsewhere for libdefs using the &lt;a href=&quot;https://flow.org/en/config/libs&quot;&gt;&lt;code&gt;[libs]&lt;/code&gt; section of your &lt;code&gt;.flowconfig&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">NOTA: El uso del directorio &lt;code&gt;/flow-typed&lt;/code&gt; para libdefs es una convenci&amp;oacute;n que habilita Flow to JustWork &amp;trade; de forma inmediata y fomenta la coherencia entre los proyectos que utilizan Flow, pero tambi&amp;eacute;n es posible configurar Flow expl&amp;iacute;citamente para buscar libdefs en otro lugar utilizando &lt;a href=&quot;https://flow.org/en/config/libs&quot;&gt; &lt;code&gt;[libs]&lt;/code&gt; de su &lt;code&gt;.flowconfig&lt;/code&gt; &lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="88f2f30ba49708ae97f8d92b8a8a72e7ddff53df" translate="yes" xml:space="preserve">
          <source>Named Exports</source>
          <target state="translated">Exportaciones nombradas</target>
        </trans-unit>
        <trans-unit id="e2dffcc7cffb0debfc5f8d1550386d2bb5e3bffe" translate="yes" xml:space="preserve">
          <source>Neither &lt;code&gt;@flow&lt;/code&gt; nor &lt;code&gt;@noflow&lt;/code&gt; - Parse this file with Flow syntax disallowed and do not typecheck it.</source>
          <target state="translated">Ni &lt;code&gt;@flow&lt;/code&gt; ni &lt;code&gt;@noflow&lt;/code&gt; : analiza este archivo con la sintaxis de Flow no permitida y no lo revises.</target>
        </trans-unit>
        <trans-unit id="9ed4452c065a3327032cb7f9b68de94c78e6bf1c" translate="yes" xml:space="preserve">
          <source>Neither will this:</source>
          <target state="translated">Esto tampoco:</target>
        </trans-unit>
        <trans-unit id="17e8fc5ffc9a8aadcb69cdfea49a7be7e3e01369" translate="yes" xml:space="preserve">
          <source>NeoBundle</source>
          <target state="translated">NeoBundle</target>
        </trans-unit>
        <trans-unit id="cb0c7f1b829e145b81d56e667505ff6ca3313917" translate="yes" xml:space="preserve">
          <source>Never used a type system before or just new to Flow? Let's get you up and running in a few minutes.</source>
          <target state="translated">¿Nunca has usado un sistema de tipos antes o sólo eres nuevo en Flow? Vamos a ponerte en marcha en unos minutos.</target>
        </trans-unit>
        <trans-unit id="4fa6d9c66b7b5cb1445a7a7985bc5a4c02e4f274" translate="yes" xml:space="preserve">
          <source>Newer versions of the JavaScript standard include a &lt;code&gt;Map&lt;/code&gt; class, but it is still very common to use objects as maps as well. In this use case, an object will likely have properties added to it and retrieved throughout its lifecycle. Furthermore, the property keys may not even be known statically, so writing out a type annotation would not be possible.</source>
          <target state="translated">Las versiones m&amp;aacute;s recientes del est&amp;aacute;ndar JavaScript incluyen una clase &lt;code&gt;Map&lt;/code&gt; , pero tambi&amp;eacute;n es muy com&amp;uacute;n usar objetos como mapas. En este caso de uso, un objeto probablemente tendr&amp;aacute; propiedades agregadas y recuperadas a lo largo de su ciclo de vida. Adem&amp;aacute;s, es posible que las claves de propiedad ni siquiera se conozcan est&amp;aacute;ticamente, por lo que no ser&amp;iacute;a posible escribir una anotaci&amp;oacute;n de tipo.</target>
        </trans-unit>
        <trans-unit id="994a4af6c767d6bce3da94575735bc38736de599" translate="yes" xml:space="preserve">
          <source>Newlines and indentation after newlines are stripped, but watch out for whitespace when using a component with strict types around what children may be.</source>
          <target state="translated">Los nuevos trazos y la sangría después de los trazos se eliminan,pero cuidado con los espacios en blanco cuando se utiliza un componente con tipos estrictos en torno a lo que pueden ser los niños.</target>
        </trans-unit>
        <trans-unit id="c8b440e127a10dc6c8416450eb227c5047c30c36" translate="yes" xml:space="preserve">
          <source>Next we&amp;rsquo;ll add an else block to our if statement.</source>
          <target state="translated">A continuaci&amp;oacute;n, agregaremos un bloque else a nuestra declaraci&amp;oacute;n if.</target>
        </trans-unit>
        <trans-unit id="b08049f81dbbff0f0b72d5c90f11c3c94dbe857a" translate="yes" xml:space="preserve">
          <source>Next, we&amp;rsquo;ll have a different &lt;code&gt;SubClass&lt;/code&gt; that returns a less specific type:</source>
          <target state="translated">A continuaci&amp;oacute;n, tendremos una &lt;code&gt;SubClass&lt;/code&gt; diferente que devuelve un tipo menos espec&amp;iacute;fico:</target>
        </trans-unit>
        <trans-unit id="e898df75dae72ea5a3d9d46d76532d7a85a2015f" translate="yes" xml:space="preserve">
          <source>Next, we&amp;rsquo;ll have a different &lt;code&gt;SubClass&lt;/code&gt; that returns a more specific type:</source>
          <target state="translated">A continuaci&amp;oacute;n, tendremos una &lt;code&gt;SubClass&lt;/code&gt; diferente que devuelve un tipo m&amp;aacute;s espec&amp;iacute;fico:</target>
        </trans-unit>
        <trans-unit id="ad7fad484146f11e6827ddde38d9848a5842febd" translate="yes" xml:space="preserve">
          <source>Next, we&amp;rsquo;ll have another SubClass that accepts a value of a less specific type.</source>
          <target state="translated">A continuaci&amp;oacute;n, tendremos otra subclase que acepta un valor de un tipo menos espec&amp;iacute;fico.</target>
        </trans-unit>
        <trans-unit id="bac83c3c146650458f82ad19341285acb3fdd08f" translate="yes" xml:space="preserve">
          <source>No text can precede the suppressor, or come between the suppressor and the code. For example: &lt;code&gt;// some text then $FlowFixMe&lt;/code&gt; is not a valid suppression, nor is &lt;code&gt;// $FlowIssue some text [incompatible-type]&lt;/code&gt; or ` //$FlowFixMe [prop-missing]` (note the space here!).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="03fcc5e78375c539a4046df66cd614afc3b96f5d" translate="yes" xml:space="preserve">
          <source>Nominal &amp;amp; Structural Typing</source>
          <target state="translated">Tipificaci&amp;oacute;n nominal y estructural</target>
        </trans-unit>
        <trans-unit id="e8d7ae8d2ca23e63934856a596b9968693856079" translate="yes" xml:space="preserve">
          <source>Nominal typing</source>
          <target state="translated">Tipificación nominal</target>
        </trans-unit>
        <trans-unit id="7b7e96032e3f1e6663bd1bdc30dc00a06098260e" translate="yes" xml:space="preserve">
          <source>Note that &lt;code&gt;$Diff&amp;lt;A, B&amp;gt;&lt;/code&gt; will error if the object you are removing properties from does not have the property being removed, i.e. if &lt;code&gt;B&lt;/code&gt; has a key that doesn&amp;rsquo;t exist in &lt;code&gt;A&lt;/code&gt;:</source>
          <target state="translated">Tenga en cuenta que &lt;code&gt;$Diff&amp;lt;A, B&amp;gt;&lt;/code&gt; generar&amp;aacute; un error si el objeto del que est&amp;aacute; eliminando propiedades no tiene la propiedad que se est&amp;aacute; eliminando, es decir, si &lt;code&gt;B&lt;/code&gt; tiene una clave que no existe en &lt;code&gt;A&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="7396639c6dfb03099e7daab240e293a01612f69c" translate="yes" xml:space="preserve">
          <source>Note that &lt;code&gt;batch-coverage&lt;/code&gt; requires a non-lazy Flow server.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0f4db05f32c9798879c2d8b513168656c11c575b" translate="yes" xml:space="preserve">
          <source>Note that all of the suppressors behave identically; we simply recommend using them as described here for your own ease of reference.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3333e700ed17ae336d1331038ab7c3ede13160e7" translate="yes" xml:space="preserve">
          <source>Note that an array of type &lt;code&gt;$ReadOnlyArray&amp;lt;T&amp;gt;&lt;/code&gt; can still have mutable &lt;em&gt;elements&lt;/em&gt;:</source>
          <target state="translated">Tenga en cuenta que una matriz de tipo &lt;code&gt;$ReadOnlyArray&amp;lt;T&amp;gt;&lt;/code&gt; a&amp;uacute;n puede tener &lt;em&gt;elementos&lt;/em&gt; mutables :</target>
        </trans-unit>
        <trans-unit id="d30fbd9fb94a610a3ee32104236f013d4a096f36" translate="yes" xml:space="preserve">
          <source>Note that function &lt;code&gt;untypedAdd&lt;/code&gt; is never called, so &lt;code&gt;one&lt;/code&gt; and &lt;code&gt;two&lt;/code&gt; will be inferred to have type &lt;code&gt;empty&lt;/code&gt;. In the colored version of this command these parts appear in blue color, and in the JSON version they are under the tag &lt;code&gt;&quot;empty_locs&quot;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8d8fdec593b4fbb6674593ce345b2fc98b244bc1" translate="yes" xml:space="preserve">
          <source>Note that if you annotate your generic with variance sigils then Flow will check to make sure those types only appear in positions that make sense for that variance sigil. For example, you cannot declare a generic type parameter to behave covariantly and use it in a contravariant position:</source>
          <target state="translated">Tenga en cuenta que si anota su genérico con sigilos de variación,Flow comprobará que esos tipos sólo aparecen en las posiciones que tienen sentido para ese sigilo de variación.Por ejemplo,no puedes declarar un parámetro de tipo genérico para que se comporte de forma covariante y utilizarlo en una posición contraria:</target>
        </trans-unit>
        <trans-unit id="995086357ce22130cb0e851bbdb2a423262538c5" translate="yes" xml:space="preserve">
          <source>Note that in the last example, Flow types-first will pick up the static update if it was after the definition:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d1ee3faa3af2380d9898eaa494128a6edeb62a34" translate="yes" xml:space="preserve">
          <source>Note that the &lt;code&gt;.flow&lt;/code&gt; extension applies both to &lt;code&gt;.js&lt;/code&gt; files as well as &lt;code&gt;.json&lt;/code&gt; ones. The corresponding declaration files have extensions &lt;code&gt;.js.flow&lt;/code&gt; and &lt;code&gt;.json.flow&lt;/code&gt;, respectively.</source>
          <target state="translated">Tenga en cuenta que la extensi&amp;oacute;n &lt;code&gt;.flow&lt;/code&gt; se aplica tanto a los archivos &lt;code&gt;.js&lt;/code&gt; como a los &lt;code&gt;.json&lt;/code&gt; . Los archivos de declaraci&amp;oacute;n correspondientes tienen extensiones &lt;code&gt;.js.flow&lt;/code&gt; y &lt;code&gt;.json.flow&lt;/code&gt; , respectivamente.</target>
        </trans-unit>
        <trans-unit id="815e2ec516671c1e95e246519c4812a2e63caff8" translate="yes" xml:space="preserve">
          <source>Note that this lint does not trigger when we know a condition is always &lt;code&gt;false&lt;/code&gt;. It is a common idiom to use &lt;code&gt;invariant()&lt;/code&gt; or &lt;code&gt;invariant(false, ...)&lt;/code&gt; to throw in code that should be unreachable.</source>
          <target state="translated">Tenga en cuenta que esta pelusa no se activa cuando sabemos que una condici&amp;oacute;n es siempre &lt;code&gt;false&lt;/code&gt; . Es un modismo com&amp;uacute;n utilizar &lt;code&gt;invariant()&lt;/code&gt; o &lt;code&gt;invariant(false, ...)&lt;/code&gt; para introducir c&amp;oacute;digo que deber&amp;iacute;a ser inalcanzable.</target>
        </trans-unit>
        <trans-unit id="97abdd3aca893857a9659b8d5dc58e61b924f0e2" translate="yes" xml:space="preserve">
          <source>Note that when you have a value with a bound generic type, you can&amp;rsquo;t use it as if it were a more specific type.</source>
          <target state="translated">Tenga en cuenta que cuando tiene un valor con un tipo gen&amp;eacute;rico vinculado, no puede usarlo como si fuera un tipo m&amp;aacute;s espec&amp;iacute;fico.</target>
        </trans-unit>
        <trans-unit id="3fa26fe5509b9dafc96225032b57c997a328ed0e" translate="yes" xml:space="preserve">
          <source>Note that you can also declare other things inside the body of the &lt;code&gt;declare module&lt;/code&gt;, and those things will be scoped to the body of the &lt;code&gt;declare module&lt;/code&gt; &amp;ndash; &lt;strong&gt;but they will not be exported from the module&lt;/strong&gt;:</source>
          <target state="translated">Tenga en cuenta que tambi&amp;eacute;n puede declarar otras cosas dentro del cuerpo del &lt;code&gt;declare module&lt;/code&gt; , y esas cosas se incluir&amp;aacute;n en el cuerpo del &lt;code&gt;declare module&lt;/code&gt; , &lt;strong&gt;pero no se exportar&amp;aacute;n desde el m&amp;oacute;dulo&lt;/strong&gt; :</target>
        </trans-unit>
        <trans-unit id="54bffd8f0bade33130c198fcfbb3d3928227fba5" translate="yes" xml:space="preserve">
          <source>Note that you can also declare other things inside the body of the &lt;code&gt;declare module&lt;/code&gt;, and those things will be scoped to the body of the &lt;code&gt;declare module&lt;/code&gt;, &lt;strong&gt;but they will not be exported from the module&lt;/strong&gt;:</source>
          <target state="translated">Tenga en cuenta que tambi&amp;eacute;n puede declarar otras cosas dentro del cuerpo del &lt;code&gt;declare module&lt;/code&gt; , y esas cosas estar&amp;aacute;n dentro del alcance del cuerpo del &lt;code&gt;declare module&lt;/code&gt; , &lt;strong&gt;pero no se exportar&amp;aacute;n desde el m&amp;oacute;dulo&lt;/strong&gt; :</target>
        </trans-unit>
        <trans-unit id="e2b8e8bae5815faacd0ccd12e9961c3379f24ded" translate="yes" xml:space="preserve">
          <source>Note the use of parentheses around the arrow types. These are necessary to override the precedence of the &amp;ldquo;arrow&amp;rdquo; constructor over the intersection.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c3611dae21abf03408abc2acf059be7215eea834" translate="yes" xml:space="preserve">
          <source>Note: &lt;code&gt;$ReadOnly&lt;/code&gt; is only for making read-only &lt;em&gt;object&lt;/em&gt; types. See the Array docs for how to &lt;a href=&quot;../arrays#toc-readonlyarray&quot;&gt;type read-only arrays with &lt;code&gt;$ReadOnlyArray&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">Nota: &lt;code&gt;$ReadOnly&lt;/code&gt; es solo para crear tipos de &lt;em&gt;objetos de&lt;/em&gt; solo lectura . Consulte los documentos de Array para &lt;a href=&quot;../arrays#toc-readonlyarray&quot;&gt;saber &lt;code&gt;$ReadOnlyArray&lt;/code&gt; &lt;/a&gt; c&amp;oacute;mo escribir matrices de solo lectura con $ ReadOnlyArray .</target>
        </trans-unit>
        <trans-unit id="d6be40aaa6de71f620ef0689323825354900d1e8" translate="yes" xml:space="preserve">
          <source>Note: &lt;code&gt;$Shape&amp;lt;T&amp;gt;&lt;/code&gt; is &lt;strong&gt;not&lt;/strong&gt; equivalent to &lt;code&gt;T&lt;/code&gt; with all its fields marked as optional. In particular, Flow unsoundly allows &lt;code&gt;$Shape&amp;lt;T&amp;gt;&lt;/code&gt; to be used as a &lt;code&gt;T&lt;/code&gt; in several contexts. For example in</source>
          <target state="translated">Nota: &lt;code&gt;$Shape&amp;lt;T&amp;gt;&lt;/code&gt; &lt;strong&gt;no&lt;/strong&gt; es equivalente a &lt;code&gt;T&lt;/code&gt; con todos sus campos marcados como opcionales. En particular, Flow permite incorrectamente que &lt;code&gt;$Shape&amp;lt;T&amp;gt;&lt;/code&gt; se use como una &lt;code&gt;T&lt;/code&gt; en varios contextos. Por ejemplo en</target>
        </trans-unit>
        <trans-unit id="9d75e52cf71730e8f5cbb701c224104fc82fcc18" translate="yes" xml:space="preserve">
          <source>Note: As of version 0.134, types-first is the default mode. If you are using a version &lt;code&gt;&amp;gt;=0.134&lt;/code&gt;, make sure you set &lt;code&gt;types_first=false&lt;/code&gt; in your .flowconfig while running this codemod.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="26249c8bc38c78b5cd7a458959a1d350a6a1476b" translate="yes" xml:space="preserve">
          <source>Note: As of version 0.134, types-first is the default mode. This mode automatically enables &lt;code&gt;well_formed_exports&lt;/code&gt;, so you would see these errors without explicitly setting this flag. It is advisable to set &lt;code&gt;types_first=false&lt;/code&gt; during this part of the upgrade.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="910cb2c37e2ad8674f98e665bc56e5aeb4d5a554" translate="yes" xml:space="preserve">
          <source>Note: If you add a type annotation to a rest parameter, it must always explicitly be an &lt;code&gt;Array&lt;/code&gt; type.</source>
          <target state="translated">Nota: Si agrega una anotaci&amp;oacute;n de tipo a un par&amp;aacute;metro rest, siempre debe ser expl&amp;iacute;citamente un tipo &lt;code&gt;Array&lt;/code&gt; .</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
