<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="es" datatype="htmlbody" original="elisp">
    <body>
      <group id="elisp">
        <trans-unit id="6ac036b8d1c1ea2354a0438f84ad30f9852d9133" translate="yes" xml:space="preserve">
          <source>If this variable&amp;rsquo;s value is non-&lt;code&gt;nil&lt;/code&gt;, it is a symbol which is used as a text property name. A non-&lt;code&gt;nil&lt;/code&gt; value for that text property means the other text properties for this character have already been computed.</source>
          <target state="translated">If this variable&amp;rsquo;s value is non- &lt;code&gt;nil&lt;/code&gt; , it is a symbol which is used as a text property name. A non- &lt;code&gt;nil&lt;/code&gt; value for that text property means the other text properties for this character have already been computed.</target>
        </trans-unit>
        <trans-unit id="8e2bb8ec07b4bc794a3673b2e73ca58eb14b1ba1" translate="yes" xml:space="preserve">
          <source>If two objects &lt;var&gt;obj1&lt;/var&gt; and &lt;var&gt;obj2&lt;/var&gt; are &lt;code&gt;eq&lt;/code&gt;, then &lt;code&gt;(sxhash-eq &lt;var&gt;obj1&lt;/var&gt;)&lt;/code&gt; and &lt;code&gt;(sxhash-eq &lt;var&gt;obj2&lt;/var&gt;)&lt;/code&gt; are the same integer.</source>
          <target state="translated">If two objects &lt;var&gt;obj1&lt;/var&gt; and &lt;var&gt;obj2&lt;/var&gt; are &lt;code&gt;eq&lt;/code&gt; , then &lt;code&gt;(sxhash-eq &lt;var&gt;obj1&lt;/var&gt;)&lt;/code&gt; and &lt;code&gt;(sxhash-eq &lt;var&gt;obj2&lt;/var&gt;)&lt;/code&gt; are the same integer.</target>
        </trans-unit>
        <trans-unit id="44ade2ddab356cb60d73286f7dd807880759d4c2" translate="yes" xml:space="preserve">
          <source>If two objects &lt;var&gt;obj1&lt;/var&gt; and &lt;var&gt;obj2&lt;/var&gt; are &lt;code&gt;eql&lt;/code&gt;, then &lt;code&gt;(sxhash-eql &lt;var&gt;obj1&lt;/var&gt;)&lt;/code&gt; and &lt;code&gt;(sxhash-eql &lt;var&gt;obj2&lt;/var&gt;)&lt;/code&gt; are the same integer.</source>
          <target state="translated">If two objects &lt;var&gt;obj1&lt;/var&gt; and &lt;var&gt;obj2&lt;/var&gt; are &lt;code&gt;eql&lt;/code&gt; , then &lt;code&gt;(sxhash-eql &lt;var&gt;obj1&lt;/var&gt;)&lt;/code&gt; and &lt;code&gt;(sxhash-eql &lt;var&gt;obj2&lt;/var&gt;)&lt;/code&gt; are the same integer.</target>
        </trans-unit>
        <trans-unit id="faa2ecf2925aadfa7df8d5d6017d1a43d6a4fbf6" translate="yes" xml:space="preserve">
          <source>If two objects &lt;var&gt;obj1&lt;/var&gt; and &lt;var&gt;obj2&lt;/var&gt; are &lt;code&gt;equal&lt;/code&gt;, then &lt;code&gt;(sxhash-equal &lt;var&gt;obj1&lt;/var&gt;)&lt;/code&gt; and &lt;code&gt;(sxhash-equal &lt;var&gt;obj2&lt;/var&gt;)&lt;/code&gt; are the same integer.</source>
          <target state="translated">If two objects &lt;var&gt;obj1&lt;/var&gt; and &lt;var&gt;obj2&lt;/var&gt; are &lt;code&gt;equal&lt;/code&gt; , then &lt;code&gt;(sxhash-equal &lt;var&gt;obj1&lt;/var&gt;)&lt;/code&gt; and &lt;code&gt;(sxhash-equal &lt;var&gt;obj2&lt;/var&gt;)&lt;/code&gt; are the same integer.</target>
        </trans-unit>
        <trans-unit id="c4a957c6ab4394732423e757c73b91fce71b8325" translate="yes" xml:space="preserve">
          <source>If user input represents an octal number, this function returns that number. If it is a complete symbolic specification of mode bits, as in &lt;code&gt;&quot;u=rwx&quot;&lt;/code&gt;, the function converts it to the equivalent numeric value using &lt;code&gt;file-modes-symbolic-to-number&lt;/code&gt; and returns the result. If the specification is relative, as in &lt;code&gt;&quot;o+g&quot;&lt;/code&gt;, then the permissions on which the specification is based are taken from the mode bits of &lt;var&gt;base-file&lt;/var&gt;. If &lt;var&gt;base-file&lt;/var&gt; is omitted or &lt;code&gt;nil&lt;/code&gt;, the function uses &lt;code&gt;0&lt;/code&gt; as the base mode bits. The complete and relative specifications can be combined, as in &lt;code&gt;&quot;u+r,g+rx,o+r,g-w&quot;&lt;/code&gt;. See &lt;a href=&quot;http://www.gnu.org/software/coreutils/manual/html_node/File-permissions.html#File-permissions&quot;&gt;File permissions&lt;/a&gt; in</source>
          <target state="translated">If user input represents an octal number, this function returns that number. If it is a complete symbolic specification of mode bits, as in &lt;code&gt;&quot;u=rwx&quot;&lt;/code&gt; , the function converts it to the equivalent numeric value using &lt;code&gt;file-modes-symbolic-to-number&lt;/code&gt; and returns the result. If the specification is relative, as in &lt;code&gt;&quot;o+g&quot;&lt;/code&gt; , then the permissions on which the specification is based are taken from the mode bits of &lt;var&gt;base-file&lt;/var&gt; . If &lt;var&gt;base-file&lt;/var&gt; is omitted or &lt;code&gt;nil&lt;/code&gt; , the function uses &lt;code&gt;0&lt;/code&gt; as the base mode bits. The complete and relative specifications can be combined, as in &lt;code&gt;&quot;u+r,g+rx,o+r,g-w&quot;&lt;/code&gt; . See &lt;a href=&quot;http://www.gnu.org/software/coreutils/manual/html_node/File-permissions.html#File-permissions&quot;&gt;File permissions&lt;/a&gt; in</target>
        </trans-unit>
        <trans-unit id="ab20dbc7190aa4c17064de5aae79eae25a6f3ca2" translate="yes" xml:space="preserve">
          <source>If we know that the &lt;code&gt;&quot;else&quot;&lt;/code&gt; is always aligned with its &lt;code&gt;&quot;if&quot;&lt;/code&gt; and is always at the beginning of a line, we can use a more efficient rule:</source>
          <target state="translated">If we know that the &lt;code&gt;&quot;else&quot;&lt;/code&gt; is always aligned with its &lt;code&gt;&quot;if&quot;&lt;/code&gt; and is always at the beginning of a line, we can use a more efficient rule:</target>
        </trans-unit>
        <trans-unit id="b94e278e89af3d9639830ebb8509d74bc9218c33" translate="yes" xml:space="preserve">
          <source>If you add a new primitive to a file that already has Lisp primitives defined in it, find the function (near the end of the file) named &lt;code&gt;syms_of_&lt;var&gt;something&lt;/var&gt;&lt;/code&gt;, and add the call to &lt;code&gt;defsubr&lt;/code&gt; there. If the file doesn&amp;rsquo;t have this function, or if you create a new file, add to it a &lt;code&gt;syms_of_&lt;var&gt;filename&lt;/var&gt;&lt;/code&gt; (e.g., &lt;code&gt;syms_of_myfile&lt;/code&gt;). Then find the spot in</source>
          <target state="translated">If you add a new primitive to a file that already has Lisp primitives defined in it, find the function (near the end of the file) named &lt;code&gt;syms_of_&lt;var&gt;something&lt;/var&gt;&lt;/code&gt; , and add the call to &lt;code&gt;defsubr&lt;/code&gt; there. If the file doesn&amp;rsquo;t have this function, or if you create a new file, add to it a &lt;code&gt;syms_of_&lt;var&gt;filename&lt;/var&gt;&lt;/code&gt; (e.g., &lt;code&gt;syms_of_myfile&lt;/code&gt; ). Then find the spot in</target>
        </trans-unit>
        <trans-unit id="8e51eed80e79b2bcea4605ee7ff46c46550e45f1" translate="yes" xml:space="preserve">
          <source>If you alter the compiled file (such as by compiling a new version), then trying to load any function not already loaded will usually yield nonsense results.</source>
          <target state="translated">Si se altera el archivo compilado (por ejemplo,compilando una nueva versión),entonces tratar de cargar cualquier función que no esté ya cargada normalmente producirá resultados sin sentido.</target>
        </trans-unit>
        <trans-unit id="0eb0fd19eca276d41267eb825a3b2aa624892e92" translate="yes" xml:space="preserve">
          <source>If you are careful not to exceed the ring size, you can use the ring as a first-in-first-out queue. For example:</source>
          <target state="translated">Si tiene cuidado de no exceder el tamaño del anillo,puede usar el anillo como una cola de primeros en entrar y primeros en salir.Por ejemplo:</target>
        </trans-unit>
        <trans-unit id="fc8d2ca20908496286a727bd09248d8bc43a541e" translate="yes" xml:space="preserve">
          <source>If you are running across a network, and different parts of the network work at different baud rates, the value returned by Emacs may be different from the value used by your local terminal. Some network protocols communicate the local terminal speed to the remote machine, so that Emacs and other programs can get the proper value, but others do not. If Emacs has the wrong value, it makes decisions that are less than optimal. To fix the problem, set &lt;code&gt;baud-rate&lt;/code&gt;.</source>
          <target state="translated">If you are running across a network, and different parts of the network work at different baud rates, the value returned by Emacs may be different from the value used by your local terminal. Some network protocols communicate the local terminal speed to the remote machine, so that Emacs and other programs can get the proper value, but others do not. If Emacs has the wrong value, it makes decisions that are less than optimal. To fix the problem, set &lt;code&gt;baud-rate&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="0072664fa49d446301646082567e540da686bac7" translate="yes" xml:space="preserve">
          <source>If you are sure that a warning message about a missing function or variable is unjustified, there are several ways to suppress it:</source>
          <target state="translated">Si está seguro de que un mensaje de advertencia sobre una función o variable que falta es injustificado,hay varias maneras de suprimirlo:</target>
        </trans-unit>
        <trans-unit id="f22a0f306b8db09319cdd2bfdcd0eed8dd5fd3d7" translate="yes" xml:space="preserve">
          <source>If you are using a macro to do something an ordinary function could do, just for the sake of speed, consider using an inline function instead. See &lt;a href=&quot;inline-functions#Inline-Functions&quot;&gt;Inline Functions&lt;/a&gt;.</source>
          <target state="translated">If you are using a macro to do something an ordinary function could do, just for the sake of speed, consider using an inline function instead. See &lt;a href=&quot;inline-functions#Inline-Functions&quot;&gt;Inline Functions&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="d39bc44a789b7cd31c5d8a478076105fab4e1cea" translate="yes" xml:space="preserve">
          <source>If you are using a mode whose indentation is provided by SMIE, you can customize the indentation to suit your preferences. You can do this on a per-mode basis (using the option &lt;code&gt;smie-config&lt;/code&gt;), or a per-file basis (using the function &lt;code&gt;smie-config-local&lt;/code&gt; in a file-local variable specification).</source>
          <target state="translated">If you are using a mode whose indentation is provided by SMIE, you can customize the indentation to suit your preferences. You can do this on a per-mode basis (using the option &lt;code&gt;smie-config&lt;/code&gt; ), or a per-file basis (using the function &lt;code&gt;smie-config-local&lt;/code&gt; in a file-local variable specification).</target>
        </trans-unit>
        <trans-unit id="af4a68bcde30998a536e42773304bc15d422df91" translate="yes" xml:space="preserve">
          <source>If you are writing code for release, for others to use, try to avoid including advice in it. If the function you want to advise has no hook to do the job, please talk with the Emacs developers about adding a suitable hook. Especially, Emacs&amp;rsquo;s own source files should not put advice on functions in Emacs. (There are currently a few exceptions to this convention, but we aim to correct them.) It is generally cleaner to create a new hook in &lt;code&gt;foo&lt;/code&gt;, and make &lt;code&gt;bar&lt;/code&gt; use the hook, than to have &lt;code&gt;bar&lt;/code&gt; put advice in &lt;code&gt;foo&lt;/code&gt;.</source>
          <target state="translated">If you are writing code for release, for others to use, try to avoid including advice in it. If the function you want to advise has no hook to do the job, please talk with the Emacs developers about adding a suitable hook. Especially, Emacs&amp;rsquo;s own source files should not put advice on functions in Emacs. (There are currently a few exceptions to this convention, but we aim to correct them.) It is generally cleaner to create a new hook in &lt;code&gt;foo&lt;/code&gt; , and make &lt;code&gt;bar&lt;/code&gt; use the hook, than to have &lt;code&gt;bar&lt;/code&gt; put advice in &lt;code&gt;foo&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="bda02007617357daadbad5daa64711e089b1fa98" translate="yes" xml:space="preserve">
          <source>If you call &lt;code&gt;set-face-attribute&lt;/code&gt; and pass a font spec, font entity, or font name string as the value of the &lt;code&gt;:font&lt;/code&gt; attribute, Emacs opens the best matching font that is available for display. It then stores the corresponding font object as the actual value of the &lt;code&gt;:font&lt;/code&gt; attribute for that face.</source>
          <target state="translated">If you call &lt;code&gt;set-face-attribute&lt;/code&gt; and pass a font spec, font entity, or font name string as the value of the &lt;code&gt;:font&lt;/code&gt; attribute, Emacs opens the best matching font that is available for display. It then stores the corresponding font object as the actual value of the &lt;code&gt;:font&lt;/code&gt; attribute for that face.</target>
        </trans-unit>
        <trans-unit id="69c55f2e5f8ed1abaffbeb201babe6c0b3098a84" translate="yes" xml:space="preserve">
          <source>If you call &lt;code&gt;sort-regexp-fields&lt;/code&gt; interactively, it prompts for &lt;var&gt;record-regexp&lt;/var&gt; and &lt;var&gt;key-regexp&lt;/var&gt; in the minibuffer.</source>
          <target state="translated">If you call &lt;code&gt;sort-regexp-fields&lt;/code&gt; interactively, it prompts for &lt;var&gt;record-regexp&lt;/var&gt; and &lt;var&gt;key-regexp&lt;/var&gt; in the minibuffer.</target>
        </trans-unit>
        <trans-unit id="19b20fbcaed19267c0ae5233685511404c8fe13b" translate="yes" xml:space="preserve">
          <source>If you can read &lt;var&gt;filename&lt;/var&gt; this function returns &lt;code&gt;nil&lt;/code&gt;; otherwise it signals an error using &lt;var&gt;string&lt;/var&gt; as the error message text.</source>
          <target state="translated">If you can read &lt;var&gt;filename&lt;/var&gt; this function returns &lt;code&gt;nil&lt;/code&gt; ; otherwise it signals an error using &lt;var&gt;string&lt;/var&gt; as the error message text.</target>
        </trans-unit>
        <trans-unit id="ec646b6002abc5e60335d6f3ab6e9548f2ac3d2c" translate="yes" xml:space="preserve">
          <source>If you change &lt;code&gt;debug-on-error&lt;/code&gt; or &lt;code&gt;debug-on-quit&lt;/code&gt; while Edebug is active, these changes will be forgotten when Edebug becomes inactive. Furthermore, during Edebug&amp;rsquo;s recursive edit, these variables are bound to the values they had outside of Edebug.</source>
          <target state="translated">If you change &lt;code&gt;debug-on-error&lt;/code&gt; or &lt;code&gt;debug-on-quit&lt;/code&gt; while Edebug is active, these changes will be forgotten when Edebug becomes inactive. Furthermore, during Edebug&amp;rsquo;s recursive edit, these variables are bound to the values they had outside of Edebug.</target>
        </trans-unit>
        <trans-unit id="82e1d7f6837d7e1fd79a005ee98861790c6bed8a" translate="yes" xml:space="preserve">
          <source>If you change &lt;code&gt;debug-on-signal&lt;/code&gt; to a non-&lt;code&gt;nil&lt;/code&gt; value, the debugger gets the first chance at every error, regardless of the presence of &lt;code&gt;condition-case&lt;/code&gt;. (To invoke the debugger, the error must still fulfill the criteria specified by &lt;code&gt;debug-on-error&lt;/code&gt; and &lt;code&gt;debug-ignored-errors&lt;/code&gt;.)</source>
          <target state="translated">If you change &lt;code&gt;debug-on-signal&lt;/code&gt; to a non- &lt;code&gt;nil&lt;/code&gt; value, the debugger gets the first chance at every error, regardless of the presence of &lt;code&gt;condition-case&lt;/code&gt; . (To invoke the debugger, the error must still fulfill the criteria specified by &lt;code&gt;debug-on-error&lt;/code&gt; and &lt;code&gt;debug-ignored-errors&lt;/code&gt; .)</target>
        </trans-unit>
        <trans-unit id="a032c6d2c26bc9a17573480803a0fc6e92740213" translate="yes" xml:space="preserve">
          <source>If you change the bindings in &lt;var&gt;parent-keymap&lt;/var&gt; using &lt;code&gt;define-key&lt;/code&gt; or other key-binding functions, these changed bindings are visible in the inheriting keymap, unless shadowed by the bindings made by &lt;var&gt;elements&lt;/var&gt;. The converse is not true: if you use &lt;code&gt;define-key&lt;/code&gt; to change bindings in the inheriting keymap, these changes are recorded in &lt;var&gt;elements&lt;/var&gt;, but have no effect on &lt;var&gt;parent-keymap&lt;/var&gt;.</source>
          <target state="translated">If you change the bindings in &lt;var&gt;parent-keymap&lt;/var&gt; using &lt;code&gt;define-key&lt;/code&gt; or other key-binding functions, these changed bindings are visible in the inheriting keymap, unless shadowed by the bindings made by &lt;var&gt;elements&lt;/var&gt; . The converse is not true: if you use &lt;code&gt;define-key&lt;/code&gt; to change bindings in the inheriting keymap, these changes are recorded in &lt;var&gt;elements&lt;/var&gt; , but have no effect on &lt;var&gt;parent-keymap&lt;/var&gt; .</target>
        </trans-unit>
        <trans-unit id="9cb1eba86e3ba5c0e1663be951356c7fd19739f3" translate="yes" xml:space="preserve">
          <source>If you change the values of &lt;code&gt;edebug-on-error&lt;/code&gt; or &lt;code&gt;edebug-on-quit&lt;/code&gt; while Edebug is active, their values won&amp;rsquo;t be used until the &lt;em&gt;next&lt;/em&gt; time Edebug is invoked via a new command.</source>
          <target state="translated">If you change the values of &lt;code&gt;edebug-on-error&lt;/code&gt; or &lt;code&gt;edebug-on-quit&lt;/code&gt; while Edebug is active, their values won&amp;rsquo;t be used until the &lt;em&gt;next&lt;/em&gt; time Edebug is invoked via a new command.</target>
        </trans-unit>
        <trans-unit id="b5ecdaab829d09620b381ec99a472542b3bed464" translate="yes" xml:space="preserve">
          <source>If you click a button three or more times and then press it again, the events for the presses beyond the third are all triple events. Emacs does not have separate event types for quadruple, quintuple, etc. events. However, you can look at the event list to find out precisely how many times the button was pressed.</source>
          <target state="translated">Si se pulsa un botón tres o más veces y luego se vuelve a pulsar,los eventos para las prensas más allá del tercero son todos eventos triples.Emacs no tiene tipos de eventos separados para los eventos cuádruples,quíntuples,etc.Sin embargo,puedes mirar la lista de eventos para saber exactamente cuántas veces se ha pulsado el botón.</target>
        </trans-unit>
        <trans-unit id="97f76d136a54a91f5ce09fa28d033744e2b18618" translate="yes" xml:space="preserve">
          <source>If you click a button twice and then press it again, all in quick succession, Emacs generates a &lt;em&gt;triple-down&lt;/em&gt; event, followed by either a &lt;em&gt;triple-click&lt;/em&gt; or a &lt;em&gt;triple-drag&lt;/em&gt;. The event types of these events contain &amp;lsquo;</source>
          <target state="translated">If you click a button twice and then press it again, all in quick succession, Emacs generates a &lt;em&gt;triple-down&lt;/em&gt; event, followed by either a &lt;em&gt;triple-click&lt;/em&gt; or a &lt;em&gt;triple-drag&lt;/em&gt;. The event types of these events contain &amp;lsquo;</target>
        </trans-unit>
        <trans-unit id="babf73f5ef063cd1ca16de5c46e1c4b38d2d236a" translate="yes" xml:space="preserve">
          <source>If you click a button, then press it down again and start moving the mouse with the button held down, then you get a &lt;em&gt;double-drag&lt;/em&gt; event when you ultimately release the button. Its event type contains &amp;lsquo;</source>
          <target state="translated">If you click a button, then press it down again and start moving the mouse with the button held down, then you get a &lt;em&gt;double-drag&lt;/em&gt; event when you ultimately release the button. Its event type contains &amp;lsquo;</target>
        </trans-unit>
        <trans-unit id="c5fb3a0c87cdbd7c9d430fccee88612b713587b6" translate="yes" xml:space="preserve">
          <source>If you compile the above code, the anonymous function is also compiled. This would not happen if, say, you had constructed the anonymous function by quoting it as a list:</source>
          <target state="translated">Si compilas el código anterior,también se compila la función anónima.Esto no sucedería si,digamos,hubieras construido la función anónima citándola como una lista:</target>
        </trans-unit>
        <trans-unit id="3585ff0dc0e69eb3875d3c21881701fbf12049b6" translate="yes" xml:space="preserve">
          <source>If you define a function which is side-effect free or pure, give it a non-&lt;code&gt;nil&lt;/code&gt;&lt;code&gt;side-effect-free&lt;/code&gt; or &lt;code&gt;pure&lt;/code&gt; property, respectively (see &lt;a href=&quot;standard-properties#Standard-Properties&quot;&gt;Standard Properties&lt;/a&gt;).</source>
          <target state="translated">If you define a function which is side-effect free or pure, give it a non- &lt;code&gt;nil&lt;/code&gt; &lt;code&gt;side-effect-free&lt;/code&gt; or &lt;code&gt;pure&lt;/code&gt; property, respectively (see &lt;a href=&quot;standard-properties#Standard-Properties&quot;&gt;Standard Properties&lt;/a&gt;).</target>
        </trans-unit>
        <trans-unit id="9d356c50a344f26b7b7e0c2e2a88f2a9d47c5035" translate="yes" xml:space="preserve">
          <source>If you delete or move the compiled file after loading it, Emacs can no longer load the remaining function definitions not already loaded.</source>
          <target state="translated">Si borra o mueve el archivo compilado después de cargarlo,Emacs ya no podrá cargar las restantes definiciones de funciones que no estén ya cargadas.</target>
        </trans-unit>
        <trans-unit id="832ed8c18f70d41abab32f7213d1a98c3b93e0e3" translate="yes" xml:space="preserve">
          <source>If you did the last search in a buffer, you should omit the &lt;var&gt;string&lt;/var&gt; argument or specify &lt;code&gt;nil&lt;/code&gt; for it, and make sure that the current buffer is the one in which you performed the last search. Then this function edits the buffer, replacing the matched text with &lt;var&gt;replacement&lt;/var&gt;. It leaves point at the end of the replacement text.</source>
          <target state="translated">If you did the last search in a buffer, you should omit the &lt;var&gt;string&lt;/var&gt; argument or specify &lt;code&gt;nil&lt;/code&gt; for it, and make sure that the current buffer is the one in which you performed the last search. Then this function edits the buffer, replacing the matched text with &lt;var&gt;replacement&lt;/var&gt; . It leaves point at the end of the replacement text.</target>
        </trans-unit>
        <trans-unit id="5752e1504ebf2064bf0d5937ac79557053162460" translate="yes" xml:space="preserve">
          <source>If you directly define a file-scope C variable of type &lt;code&gt;Lisp_Object&lt;/code&gt;, you must protect it from garbage-collection by calling &lt;code&gt;staticpro&lt;/code&gt; in &lt;code&gt;syms_of_&lt;var&gt;filename&lt;/var&gt;&lt;/code&gt;, like this:</source>
          <target state="translated">If you directly define a file-scope C variable of type &lt;code&gt;Lisp_Object&lt;/code&gt; , you must protect it from garbage-collection by calling &lt;code&gt;staticpro&lt;/code&gt; in &lt;code&gt;syms_of_&lt;var&gt;filename&lt;/var&gt;&lt;/code&gt; , like this:</target>
        </trans-unit>
        <trans-unit id="a799552f0c440dd51dc850366b3de6e02e55511d" translate="yes" xml:space="preserve">
          <source>If you divide an integer by the integer 0, Emacs signals an &lt;code&gt;arith-error&lt;/code&gt; error (see &lt;a href=&quot;errors#Errors&quot;&gt;Errors&lt;/a&gt;). Floating-point division of a nonzero number by zero yields either positive or negative infinity (see &lt;a href=&quot;float-basics#Float-Basics&quot;&gt;Float Basics&lt;/a&gt;).</source>
          <target state="translated">If you divide an integer by the integer 0, Emacs signals an &lt;code&gt;arith-error&lt;/code&gt; error (see &lt;a href=&quot;errors#Errors&quot;&gt;Errors&lt;/a&gt;). Floating-point division of a nonzero number by zero yields either positive or negative infinity (see &lt;a href=&quot;float-basics#Float-Basics&quot;&gt;Float Basics&lt;/a&gt;).</target>
        </trans-unit>
        <trans-unit id="c48948f392e624e52dbc1aa826b6d5945fcc5647" translate="yes" xml:space="preserve">
          <source>If you do alter &lt;code&gt;mode-line-format&lt;/code&gt; itself, the new value should use the same variables that appear in the default value (see &lt;a href=&quot;mode-line-variables#Mode-Line-Variables&quot;&gt;Mode Line Variables&lt;/a&gt;), rather than duplicating their contents or displaying the information in another fashion. This way, customizations made by the user or by Lisp programs (such as &lt;code&gt;display-time&lt;/code&gt; and major modes) via changes to those variables remain effective.</source>
          <target state="translated">If you do alter &lt;code&gt;mode-line-format&lt;/code&gt; itself, the new value should use the same variables that appear in the default value (see &lt;a href=&quot;mode-line-variables#Mode-Line-Variables&quot;&gt;Mode Line Variables&lt;/a&gt;), rather than duplicating their contents or displaying the information in another fashion. This way, customizations made by the user or by Lisp programs (such as &lt;code&gt;display-time&lt;/code&gt; and major modes) via changes to those variables remain effective.</target>
        </trans-unit>
        <trans-unit id="919e7db85c8f5ee11bd70bb4cc9d84095b916140" translate="yes" xml:space="preserve">
          <source>If you do not specify a window&amp;rsquo;s scroll bar settings via &lt;code&gt;set-window-scroll-bars&lt;/code&gt;, the buffer-local variables &lt;code&gt;vertical-scroll-bar&lt;/code&gt;, &lt;code&gt;horizontal-scroll-bar&lt;/code&gt;, &lt;code&gt;scroll-bar-width&lt;/code&gt; and &lt;code&gt;scroll-bar-height&lt;/code&gt; in the buffer being displayed control the window&amp;rsquo;s scroll bars. The function &lt;code&gt;set-window-buffer&lt;/code&gt; examines these variables. If you change them in a buffer that is already visible in a window, you can make the window take note of the new values by calling &lt;code&gt;set-window-buffer&lt;/code&gt; specifying the same buffer that is already displayed.</source>
          <target state="translated">If you do not specify a window&amp;rsquo;s scroll bar settings via &lt;code&gt;set-window-scroll-bars&lt;/code&gt; , the buffer-local variables &lt;code&gt;vertical-scroll-bar&lt;/code&gt; , &lt;code&gt;horizontal-scroll-bar&lt;/code&gt; , &lt;code&gt;scroll-bar-width&lt;/code&gt; and &lt;code&gt;scroll-bar-height&lt;/code&gt; in the buffer being displayed control the window&amp;rsquo;s scroll bars. The function &lt;code&gt;set-window-buffer&lt;/code&gt; examines these variables. If you change them in a buffer that is already visible in a window, you can make the window take note of the new values by calling &lt;code&gt;set-window-buffer&lt;/code&gt; specifying the same buffer that is already displayed.</target>
        </trans-unit>
        <trans-unit id="7d5478635f2aa0a1b8f06759d112fc9a81bb9ae9" translate="yes" xml:space="preserve">
          <source>If you do not want a Lisp file to be compiled, ever, put a file-local variable binding for &lt;code&gt;no-byte-compile&lt;/code&gt; into it, like this:</source>
          <target state="translated">If you do not want a Lisp file to be compiled, ever, put a file-local variable binding for &lt;code&gt;no-byte-compile&lt;/code&gt; into it, like this:</target>
        </trans-unit>
        <trans-unit id="bd9289930e0af37b6580f5f7e82b4908b4ac925e" translate="yes" xml:space="preserve">
          <source>If you do not want a particular command to be recognized as the previous command in the case where it got an error, you must code that command to prevent this. One way is to set &lt;code&gt;this-command&lt;/code&gt; to &lt;code&gt;t&lt;/code&gt; at the beginning of the command, and set &lt;code&gt;this-command&lt;/code&gt; back to its proper value at the end, like this:</source>
          <target state="translated">If you do not want a particular command to be recognized as the previous command in the case where it got an error, you must code that command to prevent this. One way is to set &lt;code&gt;this-command&lt;/code&gt; to &lt;code&gt;t&lt;/code&gt; at the beginning of the command, and set &lt;code&gt;this-command&lt;/code&gt; back to its proper value at the end, like this:</target>
        </trans-unit>
        <trans-unit id="5611162597f8b6ec87950a669e8a5984dfaa42e0" translate="yes" xml:space="preserve">
          <source>If you do not want this feature, set the variable &lt;code&gt;case-fold-search&lt;/code&gt; to &lt;code&gt;nil&lt;/code&gt;. Then all letters must match exactly, including case. This is a buffer-local variable; altering the variable affects only the current buffer. (See &lt;a href=&quot;intro-to-buffer_002dlocal#Intro-to-Buffer_002dLocal&quot;&gt;Intro to Buffer-Local&lt;/a&gt;.) Alternatively, you may change the default value. In Lisp code, you will more typically use &lt;code&gt;let&lt;/code&gt; to bind &lt;code&gt;case-fold-search&lt;/code&gt; to the desired value.</source>
          <target state="translated">If you do not want this feature, set the variable &lt;code&gt;case-fold-search&lt;/code&gt; to &lt;code&gt;nil&lt;/code&gt; . Then all letters must match exactly, including case. This is a buffer-local variable; altering the variable affects only the current buffer. (See &lt;a href=&quot;intro-to-buffer_002dlocal#Intro-to-Buffer_002dLocal&quot;&gt;Intro to Buffer-Local&lt;/a&gt;.) Alternatively, you may change the default value. In Lisp code, you will more typically use &lt;code&gt;let&lt;/code&gt; to bind &lt;code&gt;case-fold-search&lt;/code&gt; to the desired value.</target>
        </trans-unit>
        <trans-unit id="f866fd286c45411a67dbb50a84fea3f20ae8d82b" translate="yes" xml:space="preserve">
          <source>If you do set the same variable again, the new value replaces the old one:</source>
          <target state="translated">Si vuelves a establecer la misma variable,el nuevo valor reemplaza al antiguo:</target>
        </trans-unit>
        <trans-unit id="3402ff5b14ba5a8ea18eb9cb2a7a34434be535f3" translate="yes" xml:space="preserve">
          <source>If you don&amp;rsquo;t know exactly where in the source code you want to put the debug statement, but you want to display a backtrace when a certain message is displayed, you can set &lt;code&gt;debug-on-message&lt;/code&gt; to a regular expression matching the desired message.</source>
          <target state="translated">If you don&amp;rsquo;t know exactly where in the source code you want to put the debug statement, but you want to display a backtrace when a certain message is displayed, you can set &lt;code&gt;debug-on-message&lt;/code&gt; to a regular expression matching the desired message.</target>
        </trans-unit>
        <trans-unit id="1411d7398cdf316f7a761acc6232531b6f93aa6f" translate="yes" xml:space="preserve">
          <source>If you don&amp;rsquo;t see a problem at that point, the next thing to do is to type</source>
          <target state="translated">If you don&amp;rsquo;t see a problem at that point, the next thing to do is to type</target>
        </trans-unit>
        <trans-unit id="c777867a4fcf3b6790ba4a3f6676ab8e8eb5e7ea" translate="yes" xml:space="preserve">
          <source>If you don&amp;rsquo;t specify &lt;var&gt;help&lt;/var&gt;, the default is &lt;code&gt;(&quot;object&quot;
&quot;objects&quot; &quot;act on&quot;)&lt;/code&gt;.</source>
          <target state="translated">If you don&amp;rsquo;t specify &lt;var&gt;help&lt;/var&gt; , the default is &lt;code&gt;(&quot;object&quot; &quot;objects&quot; &quot;act on&quot;)&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="73fcecbc1356991b98581a800856e4e2763a1b17" translate="yes" xml:space="preserve">
          <source>If you don&amp;rsquo;t specify &lt;var&gt;history&lt;/var&gt;, then the default history list &lt;code&gt;minibuffer-history&lt;/code&gt; is used. For other standard history lists, see below. You can also create your own history list variable; just initialize it to &lt;code&gt;nil&lt;/code&gt; before the first use. If the variable is buffer local, then each buffer will have its own input history list.</source>
          <target state="translated">If you don&amp;rsquo;t specify &lt;var&gt;history&lt;/var&gt; , then the default history list &lt;code&gt;minibuffer-history&lt;/code&gt; is used. For other standard history lists, see below. You can also create your own history list variable; just initialize it to &lt;code&gt;nil&lt;/code&gt; before the first use. If the variable is buffer local, then each buffer will have its own input history list.</target>
        </trans-unit>
        <trans-unit id="3b45979ffc14a7465f0296ae53f5338e35b87473" translate="yes" xml:space="preserve">
          <source>If you don&amp;rsquo;t specify the &lt;code&gt;line-height&lt;/code&gt; property, the line&amp;rsquo;s height consists of the contents&amp;rsquo; height plus the line spacing. There are several ways to specify the line spacing for different parts of Emacs text.</source>
          <target state="translated">If you don&amp;rsquo;t specify the &lt;code&gt;line-height&lt;/code&gt; property, the line&amp;rsquo;s height consists of the contents&amp;rsquo; height plus the line spacing. There are several ways to specify the line spacing for different parts of Emacs text.</target>
        </trans-unit>
        <trans-unit id="b6743c06f00234ad9062a2a3a2ea7fc17e673ef8" translate="yes" xml:space="preserve">
          <source>If you don&amp;rsquo;t specify this keyword at all, the default is to determine the coding systems from the data.</source>
          <target state="translated">If you don&amp;rsquo;t specify this keyword at all, the default is to determine the coding systems from the data.</target>
        </trans-unit>
        <trans-unit id="04bef473929ac543401da8285cfb9a7eb0c1717c" translate="yes" xml:space="preserve">
          <source>If you get a warning that</source>
          <target state="translated">Si recibes una advertencia de que</target>
        </trans-unit>
        <trans-unit id="e767fb6147ef9fb326b46a3482c4c2ceedb2b93a" translate="yes" xml:space="preserve">
          <source>If you have a constant that needs some calculation to produce, &lt;code&gt;eval-when-compile&lt;/code&gt; can do that at compile-time. For example,</source>
          <target state="translated">If you have a constant that needs some calculation to produce, &lt;code&gt;eval-when-compile&lt;/code&gt; can do that at compile-time. For example,</target>
        </trans-unit>
        <trans-unit id="3f37032d6c165b2681c4b1c8b2c526ae79d7f709" translate="yes" xml:space="preserve">
          <source>If you have a frame that displays only one window, you can fit that frame to its buffer using the command &lt;code&gt;fit-frame-to-buffer&lt;/code&gt;.</source>
          <target state="translated">If you have a frame that displays only one window, you can fit that frame to its buffer using the command &lt;code&gt;fit-frame-to-buffer&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="33faad871265de71a9510766889514f64259bfd3" translate="yes" xml:space="preserve">
          <source>If you have made extensive changes to a file and then change your mind about them, you can get rid of them by reading in the previous version of the file with the &lt;code&gt;revert-buffer&lt;/code&gt; command. See &lt;a href=&quot;http://www.gnu.org/software/emacs/manual/html_node/emacs/Reverting.html#Reverting&quot;&gt;Reverting a Buffer&lt;/a&gt; in</source>
          <target state="translated">If you have made extensive changes to a file and then change your mind about them, you can get rid of them by reading in the previous version of the file with the &lt;code&gt;revert-buffer&lt;/code&gt; command. See &lt;a href=&quot;http://www.gnu.org/software/emacs/manual/html_node/emacs/Reverting.html#Reverting&quot;&gt;Reverting a Buffer&lt;/a&gt; in</target>
        </trans-unit>
        <trans-unit id="3114430b909452db4a0ad15c4686bf655a82d1b5" translate="yes" xml:space="preserve">
          <source>If you have never given a symbol any function definition, we say that that symbol&amp;rsquo;s function cell is &lt;em&gt;void&lt;/em&gt;. In other words, the function cell does not have any Lisp object in it. If you try to call the symbol as a function, Emacs signals a &lt;code&gt;void-function&lt;/code&gt; error.</source>
          <target state="translated">If you have never given a symbol any function definition, we say that that symbol&amp;rsquo;s function cell is &lt;em&gt;void&lt;/em&gt;. In other words, the function cell does not have any Lisp object in it. If you try to call the symbol as a function, Emacs signals a &lt;code&gt;void-function&lt;/code&gt; error.</target>
        </trans-unit>
        <trans-unit id="1adb1c551e5096149203b778dae4aca140133316" translate="yes" xml:space="preserve">
          <source>If you have passed a non-&lt;code&gt;nil&lt;/code&gt;&lt;var&gt;stderr&lt;/var&gt; to &lt;code&gt;make-process&lt;/code&gt;, it will have a standard error process. See &lt;a href=&quot;asynchronous-processes#Asynchronous-Processes&quot;&gt;Asynchronous Processes&lt;/a&gt;. In that case, waiting for process output from the main process doesn&amp;rsquo;t wait for output from the standard error process. To make sure you have received both all of standard output and all of standard error from a process, use the following code:</source>
          <target state="translated">If you have passed a non- &lt;code&gt;nil&lt;/code&gt; &lt;var&gt;stderr&lt;/var&gt; to &lt;code&gt;make-process&lt;/code&gt; , it will have a standard error process. See &lt;a href=&quot;asynchronous-processes#Asynchronous-Processes&quot;&gt;Asynchronous Processes&lt;/a&gt;. In that case, waiting for process output from the main process doesn&amp;rsquo;t wait for output from the standard error process. To make sure you have received both all of standard output and all of standard error from a process, use the following code:</target>
        </trans-unit>
        <trans-unit id="ef54783b26bd82dc91fad381aa3579ce041cbe4e" translate="yes" xml:space="preserve">
          <source>If you instrument the &lt;code&gt;test&lt;/code&gt; macro and step through it, then by default the result of the &lt;code&gt;symbol-function&lt;/code&gt; call has numerous &lt;code&gt;edebug-after&lt;/code&gt; and &lt;code&gt;edebug-before&lt;/code&gt; forms, which can make it difficult to see the actual result. If &lt;code&gt;edebug-unwrap-results&lt;/code&gt; is non-&lt;code&gt;nil&lt;/code&gt;, Edebug tries to remove these forms from the result.</source>
          <target state="translated">If you instrument the &lt;code&gt;test&lt;/code&gt; macro and step through it, then by default the result of the &lt;code&gt;symbol-function&lt;/code&gt; call has numerous &lt;code&gt;edebug-after&lt;/code&gt; and &lt;code&gt;edebug-before&lt;/code&gt; forms, which can make it difficult to see the actual result. If &lt;code&gt;edebug-unwrap-results&lt;/code&gt; is non- &lt;code&gt;nil&lt;/code&gt; , Edebug tries to remove these forms from the result.</target>
        </trans-unit>
        <trans-unit id="33abc94ec53362e4d866e3e4d48d4aa529da00b3" translate="yes" xml:space="preserve">
          <source>If you instrument the definition of &lt;code&gt;fac&lt;/code&gt; (shown below) and then execute &lt;code&gt;(fac 3)&lt;/code&gt;, here is what you would normally see. Point is at the open-parenthesis before &lt;code&gt;if&lt;/code&gt;.</source>
          <target state="translated">If you instrument the definition of &lt;code&gt;fac&lt;/code&gt; (shown below) and then execute &lt;code&gt;(fac 3)&lt;/code&gt; , here is what you would normally see. Point is at the open-parenthesis before &lt;code&gt;if&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="30df8677ae4d4b292044bc3da5da7b6491d7a906" translate="yes" xml:space="preserve">
          <source>If you invoke Emacs with command-line options that specify frame appearance, those options take effect by adding elements to either &lt;code&gt;initial-frame-alist&lt;/code&gt; or &lt;code&gt;default-frame-alist&lt;/code&gt;. Options which affect just the initial frame, such as &amp;lsquo;</source>
          <target state="translated">If you invoke Emacs with command-line options that specify frame appearance, those options take effect by adding elements to either &lt;code&gt;initial-frame-alist&lt;/code&gt; or &lt;code&gt;default-frame-alist&lt;/code&gt; . Options which affect just the initial frame, such as &amp;lsquo;</target>
        </trans-unit>
        <trans-unit id="4f8ed670902a9aad525f057b6320f5c8058a1c22" translate="yes" xml:space="preserve">
          <source>If you just want to automatically auto-revert every &lt;code&gt;auto-revert-interval&lt;/code&gt; seconds (like the Buffer Menu), use:</source>
          <target state="translated">If you just want to automatically auto-revert every &lt;code&gt;auto-revert-interval&lt;/code&gt; seconds (like the Buffer Menu), use:</target>
        </trans-unit>
        <trans-unit id="71a2adf65a17fe610efe228b45e1cb903d7bc113" translate="yes" xml:space="preserve">
          <source>If you kill a buffer that is current or displayed in a window, Emacs automatically selects or displays some other buffer instead. This means that killing a buffer can change the current buffer. Therefore, when you kill a buffer, you should also take the precautions associated with changing the current buffer (unless you happen to know that the buffer being killed isn&amp;rsquo;t current). See &lt;a href=&quot;current-buffer#Current-Buffer&quot;&gt;Current Buffer&lt;/a&gt;.</source>
          <target state="translated">If you kill a buffer that is current or displayed in a window, Emacs automatically selects or displays some other buffer instead. This means that killing a buffer can change the current buffer. Therefore, when you kill a buffer, you should also take the precautions associated with changing the current buffer (unless you happen to know that the buffer being killed isn&amp;rsquo;t current). See &lt;a href=&quot;current-buffer#Current-Buffer&quot;&gt;Current Buffer&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="2706b518d3512c99807786ca5940e248dfba9276" translate="yes" xml:space="preserve">
          <source>If you kill a buffer that is the base buffer of one or more indirect buffers (see &lt;a href=&quot;indirect-buffers#Indirect-Buffers&quot;&gt;Indirect Buffers&lt;/a&gt;), the indirect buffers are automatically killed as well.</source>
          <target state="translated">If you kill a buffer that is the base buffer of one or more indirect buffers (see &lt;a href=&quot;indirect-buffers#Indirect-Buffers&quot;&gt;Indirect Buffers&lt;/a&gt;), the indirect buffers are automatically killed as well.</target>
        </trans-unit>
        <trans-unit id="939512f98de951d77e46c1fff3ddbca96952464a" translate="yes" xml:space="preserve">
          <source>If you kill the buffer-local binding of a variable that automatically becomes buffer-local when set, this makes the default value visible in the current buffer. However, if you set the variable again, that will once again create a buffer-local binding for it.</source>
          <target state="translated">Si matas la unión local del buffer de una variable que se convierte automáticamente en local del buffer cuando se establece,esto hace que el valor por defecto sea visible en el buffer actual.Sin embargo,si configuras la variable de nuevo,eso creará una vez más una unión local de la memoria intermedia para ella.</target>
        </trans-unit>
        <trans-unit id="0bd6b02038337f2a12bac9ed44de58bac548a3a1" translate="yes" xml:space="preserve">
          <source>If you make local bindings (with &lt;code&gt;let&lt;/code&gt; or function arguments) for a variable that may also have buffer-local bindings, make sure that the same buffer is current at the beginning and at the end of the local binding&amp;rsquo;s scope. Otherwise you might bind it in one buffer and unbind it in another!</source>
          <target state="translated">If you make local bindings (with &lt;code&gt;let&lt;/code&gt; or function arguments) for a variable that may also have buffer-local bindings, make sure that the same buffer is current at the beginning and at the end of the local binding&amp;rsquo;s scope. Otherwise you might bind it in one buffer and unbind it in another!</target>
        </trans-unit>
        <trans-unit id="0b3744efd19539e84c69f0918b4efca1435c71f7" translate="yes" xml:space="preserve">
          <source>If you may need to follow symbolic links preceding &amp;lsquo;</source>
          <target state="translated">If you may need to follow symbolic links preceding &amp;lsquo;</target>
        </trans-unit>
        <trans-unit id="b461f9a1f06af80679d7c10a422deb5335205d1b" translate="yes" xml:space="preserve">
          <source>If you modify any of these two variables, you should normally modify both, to make sure they describe paragraphs consistently. For example, to have each new line start a new paragraph for bidi-reordering purposes, set both variables to &lt;code&gt;&quot;^&quot;&lt;/code&gt;.</source>
          <target state="translated">If you modify any of these two variables, you should normally modify both, to make sure they describe paragraphs consistently. For example, to have each new line start a new paragraph for bidi-reordering purposes, set both variables to &lt;code&gt;&quot;^&quot;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="fbb55a4c1fcd6f3dc2ebf9fd160259311b33e11d" translate="yes" xml:space="preserve">
          <source>If you need a function to read a character using the minibuffer, use &lt;code&gt;read-char-from-minibuffer&lt;/code&gt; (see &lt;a href=&quot;multiple-queries#Multiple-Queries&quot;&gt;Multiple Queries&lt;/a&gt;).</source>
          <target state="translated">If you need a function to read a character using the minibuffer, use &lt;code&gt;read-char-from-minibuffer&lt;/code&gt; (see &lt;a href=&quot;multiple-queries#Multiple-Queries&quot;&gt;Multiple Queries&lt;/a&gt;).</target>
        </trans-unit>
        <trans-unit id="2229e5dcc64890b68f42258b57c852775ec25771" translate="yes" xml:space="preserve">
          <source>If you need full backtracking capability to handle multiple uses of &amp;lsquo;</source>
          <target state="translated">If you need full backtracking capability to handle multiple uses of &amp;lsquo;</target>
        </trans-unit>
        <trans-unit id="7165f313d61fb790c146d795e82a0805252bf947" translate="yes" xml:space="preserve">
          <source>If you need something more sophisticated, such as to make changes in various buffers constitute one atomic group, you must directly call lower-level functions that &lt;code&gt;atomic-change-group&lt;/code&gt; uses.</source>
          <target state="translated">If you need something more sophisticated, such as to make changes in various buffers constitute one atomic group, you must directly call lower-level functions that &lt;code&gt;atomic-change-group&lt;/code&gt; uses.</target>
        </trans-unit>
        <trans-unit id="11ad821a0f4118843537a5c201be2e1b6fea9371" translate="yes" xml:space="preserve">
          <source>If you need to ask the user a question that might have more than just 2 answers, use &lt;code&gt;read-answer&lt;/code&gt;.</source>
          <target state="translated">If you need to ask the user a question that might have more than just 2 answers, use &lt;code&gt;read-answer&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="bb6836f3fc908033ed970b99b5923dc6160e9d7e" translate="yes" xml:space="preserve">
          <source>If you need to compute the width of a string on display, you should use &lt;code&gt;string-width&lt;/code&gt; (see &lt;a href=&quot;size-of-displayed-text#Size-of-Displayed-Text&quot;&gt;Size of Displayed Text&lt;/a&gt;), not &lt;code&gt;length&lt;/code&gt;, since &lt;code&gt;length&lt;/code&gt; only counts the number of characters, but does not account for the display width of each character.</source>
          <target state="translated">If you need to compute the width of a string on display, you should use &lt;code&gt;string-width&lt;/code&gt; (see &lt;a href=&quot;size-of-displayed-text#Size-of-Displayed-Text&quot;&gt;Size of Displayed Text&lt;/a&gt;), not &lt;code&gt;length&lt;/code&gt; , since &lt;code&gt;length&lt;/code&gt; only counts the number of characters, but does not account for the display width of each character.</target>
        </trans-unit>
        <trans-unit id="70e7694409075c9777e7eff046635c9af505c810" translate="yes" xml:space="preserve">
          <source>If you need to deal with time values that are not representable by &lt;code&gt;struct timespec&lt;/code&gt;, or if you want higher precision, call the Lisp function &lt;code&gt;encode-time&lt;/code&gt; and work with its return value. See &lt;a href=&quot;time-conversion#Time-Conversion&quot;&gt;Time Conversion&lt;/a&gt;.</source>
          <target state="translated">If you need to deal with time values that are not representable by &lt;code&gt;struct timespec&lt;/code&gt; , or if you want higher precision, call the Lisp function &lt;code&gt;encode-time&lt;/code&gt; and work with its return value. See &lt;a href=&quot;time-conversion#Time-Conversion&quot;&gt;Time Conversion&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="b8b147bdeb91ba4529c7e7a0d87287ac0e0835ba" translate="yes" xml:space="preserve">
          <source>If you need to display in a single buffer several very different types of text, consider using an alternative facility described in &lt;a href=&quot;swapping-text#Swapping-Text&quot;&gt;Swapping Text&lt;/a&gt;.</source>
          <target state="translated">If you need to display in a single buffer several very different types of text, consider using an alternative facility described in &lt;a href=&quot;swapping-text#Swapping-Text&quot;&gt;Swapping Text&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="eeed25719a7b61a09bb3ff7fc01192b5bf607932" translate="yes" xml:space="preserve">
          <source>If you need to make sure the resulting string, when copied to a different location, will not change its visual appearance due to reordering of bidirectional text, use the &lt;code&gt;buffer-substring-with-bidi-context&lt;/code&gt; function (see &lt;a href=&quot;bidirectional-display#Bidirectional-Display&quot;&gt;buffer-substring-with-bidi-context&lt;/a&gt;).</source>
          <target state="translated">If you need to make sure the resulting string, when copied to a different location, will not change its visual appearance due to reordering of bidirectional text, use the &lt;code&gt;buffer-substring-with-bidi-context&lt;/code&gt; function (see &lt;a href=&quot;bidirectional-display#Bidirectional-Display&quot;&gt;buffer-substring-with-bidi-context&lt;/a&gt;).</target>
        </trans-unit>
        <trans-unit id="f6b2d2f05788f0a22eaa0bceb4193d2292e14cac" translate="yes" xml:space="preserve">
          <source>If you need to split a string into a list of individual command-line arguments suitable for &lt;code&gt;call-process&lt;/code&gt; or &lt;code&gt;start-process&lt;/code&gt;, see &lt;a href=&quot;shell-arguments#Shell-Arguments&quot;&gt;split-string-and-unquote&lt;/a&gt;.</source>
          <target state="translated">If you need to split a string into a list of individual command-line arguments suitable for &lt;code&gt;call-process&lt;/code&gt; or &lt;code&gt;start-process&lt;/code&gt; , see &lt;a href=&quot;shell-arguments#Shell-Arguments&quot;&gt;split-string-and-unquote&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="af860e5b717926ca034b7f46b6b08bfccf91b51e" translate="yes" xml:space="preserve">
          <source>If you need to use &lt;code&gt;funcall&lt;/code&gt; to call a command and make it behave as if invoked interactively, use &lt;code&gt;funcall-interactively&lt;/code&gt; (see &lt;a href=&quot;interactive-call#Interactive-Call&quot;&gt;Interactive Call&lt;/a&gt;).</source>
          <target state="translated">If you need to use &lt;code&gt;funcall&lt;/code&gt; to call a command and make it behave as if invoked interactively, use &lt;code&gt;funcall-interactively&lt;/code&gt; (see &lt;a href=&quot;interactive-call#Interactive-Call&quot;&gt;Interactive Call&lt;/a&gt;).</target>
        </trans-unit>
        <trans-unit id="d21db95cbdcf54c25ebb2a8e577371ca4dde72ec" translate="yes" xml:space="preserve">
          <source>If you need to use binary I/O in batch mode, e.g., use the functions described in this section to write out arbitrary binary data or avoid conversion of newlines on non-POSIX hosts, see &lt;a href=&quot;input-functions#Input-Functions&quot;&gt;set-binary-mode&lt;/a&gt;.</source>
          <target state="translated">If you need to use binary I/O in batch mode, e.g., use the functions described in this section to write out arbitrary binary data or avoid conversion of newlines on non-POSIX hosts, see &lt;a href=&quot;input-functions#Input-Functions&quot;&gt;set-binary-mode&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="b65293e7558904871088857519e372b129e02eab" translate="yes" xml:space="preserve">
          <source>If you only need to save and restore the identity of the current buffer, use &lt;code&gt;save-current-buffer&lt;/code&gt; or &lt;code&gt;with-current-buffer&lt;/code&gt; instead (see &lt;a href=&quot;current-buffer#Current-Buffer&quot;&gt;Current Buffer&lt;/a&gt;). If you need to save or restore window configurations, see the forms described in &lt;a href=&quot;window-configurations#Window-Configurations&quot;&gt;Window Configurations&lt;/a&gt; and in &lt;a href=&quot;frame-configurations#Frame-Configurations&quot;&gt;Frame Configurations&lt;/a&gt;.</source>
          <target state="translated">If you only need to save and restore the identity of the current buffer, use &lt;code&gt;save-current-buffer&lt;/code&gt; or &lt;code&gt;with-current-buffer&lt;/code&gt; instead (see &lt;a href=&quot;current-buffer#Current-Buffer&quot;&gt;Current Buffer&lt;/a&gt;). If you need to save or restore window configurations, see the forms described in &lt;a href=&quot;window-configurations#Window-Configurations&quot;&gt;Window Configurations&lt;/a&gt; and in &lt;a href=&quot;frame-configurations#Frame-Configurations&quot;&gt;Frame Configurations&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="9083fbc2d21158149a1bc8ac3c7f2844e3ff216f" translate="yes" xml:space="preserve">
          <source>If you performed the last search on a string, pass the same string as &lt;var&gt;string&lt;/var&gt;. Then this function returns a new string, in which the matched text is replaced by &lt;var&gt;replacement&lt;/var&gt;.</source>
          <target state="translated">If you performed the last search on a string, pass the same string as &lt;var&gt;string&lt;/var&gt; . Then this function returns a new string, in which the matched text is replaced by &lt;var&gt;replacement&lt;/var&gt; .</target>
        </trans-unit>
        <trans-unit id="fbd25781d637473670d3becc584d66487e91046b" translate="yes" xml:space="preserve">
          <source>If you plan to use &lt;code&gt;read&lt;/code&gt; later on the formatted string to retrieve a copy of the formatted value, use a specification that lets &lt;code&gt;read&lt;/code&gt; reconstruct the value. To format numbers in this reversible way you can use &amp;lsquo;</source>
          <target state="translated">If you plan to use &lt;code&gt;read&lt;/code&gt; later on the formatted string to retrieve a copy of the formatted value, use a specification that lets &lt;code&gt;read&lt;/code&gt; reconstruct the value. To format numbers in this reversible way you can use &amp;lsquo;</target>
        </trans-unit>
        <trans-unit id="6a33cd11cdd6f251eb76fe12ca6c4e85092aa642" translate="yes" xml:space="preserve">
          <source>If you press the same mouse button more than once in quick succession without moving the mouse, Emacs generates special &lt;em&gt;repeat&lt;/em&gt; mouse events for the second and subsequent presses.</source>
          <target state="translated">If you press the same mouse button more than once in quick succession without moving the mouse, Emacs generates special &lt;em&gt;repeat&lt;/em&gt; mouse events for the second and subsequent presses.</target>
        </trans-unit>
        <trans-unit id="6e651e37e48dc0de984abd21d2f50cbabd101a42" translate="yes" xml:space="preserve">
          <source>If you provide a string instead of a symbol as &lt;var&gt;symbol&lt;/var&gt;, it stands for a symbol name. Then &lt;code&gt;unintern&lt;/code&gt; deletes the symbol (if any) in the obarray which has that name. If there is no such symbol, &lt;code&gt;unintern&lt;/code&gt; does nothing.</source>
          <target state="translated">If you provide a string instead of a symbol as &lt;var&gt;symbol&lt;/var&gt; , it stands for a symbol name. Then &lt;code&gt;unintern&lt;/code&gt; deletes the symbol (if any) in the obarray which has that name. If there is no such symbol, &lt;code&gt;unintern&lt;/code&gt; does nothing.</target>
        </trans-unit>
        <trans-unit id="97d5739d107f56aa611048ed083389faa16f7c11" translate="yes" xml:space="preserve">
          <source>If you put a &lt;code&gt;defcustom&lt;/code&gt; in a pre-loaded Emacs Lisp file (see &lt;a href=&quot;building-emacs#Building-Emacs&quot;&gt;Building Emacs&lt;/a&gt;), the standard value installed at dump time might be incorrect, e.g., because another variable that it depends on has not been assigned the right value yet. In that case, use &lt;code&gt;custom-reevaluate-setting&lt;/code&gt;, described below, to re-evaluate the standard value after Emacs starts up.</source>
          <target state="translated">If you put a &lt;code&gt;defcustom&lt;/code&gt; in a pre-loaded Emacs Lisp file (see &lt;a href=&quot;building-emacs#Building-Emacs&quot;&gt;Building Emacs&lt;/a&gt;), the standard value installed at dump time might be incorrect, e.g., because another variable that it depends on has not been assigned the right value yet. In that case, use &lt;code&gt;custom-reevaluate-setting&lt;/code&gt; , described below, to re-evaluate the standard value after Emacs starts up.</target>
        </trans-unit>
        <trans-unit id="6c382b520db08e679ebb946a10d148108b4e2829" translate="yes" xml:space="preserve">
          <source>If you put a &lt;code&gt;yank-handler&lt;/code&gt; text property on all or part of a string, that alters how &lt;code&gt;insert-for-yank&lt;/code&gt; inserts the string. If different parts of the string have different &lt;code&gt;yank-handler&lt;/code&gt; values (comparison being done with &lt;code&gt;eq&lt;/code&gt;), each substring is handled separately. The property value must be a list of one to four elements, with the following format (where elements after the first may be omitted):</source>
          <target state="translated">If you put a &lt;code&gt;yank-handler&lt;/code&gt; text property on all or part of a string, that alters how &lt;code&gt;insert-for-yank&lt;/code&gt; inserts the string. If different parts of the string have different &lt;code&gt;yank-handler&lt;/code&gt; values (comparison being done with &lt;code&gt;eq&lt;/code&gt; ), each substring is handled separately. The property value must be a list of one to four elements, with the following format (where elements after the first may be omitted):</target>
        </trans-unit>
        <trans-unit id="20d9b4533ab2bc9736806c58622cd4bf44e87f4c" translate="yes" xml:space="preserve">
          <source>If you redump Emacs by calling &lt;code&gt;dump-emacs&lt;/code&gt; (see &lt;a href=&quot;building-emacs#Building-Emacs&quot;&gt;Building Emacs&lt;/a&gt;), you may wish to set this variable to &lt;code&gt;nil&lt;/code&gt; first in order to cause the new dumped Emacs to process its new command-line arguments.</source>
          <target state="translated">If you redump Emacs by calling &lt;code&gt;dump-emacs&lt;/code&gt; (see &lt;a href=&quot;building-emacs#Building-Emacs&quot;&gt;Building Emacs&lt;/a&gt;), you may wish to set this variable to &lt;code&gt;nil&lt;/code&gt; first in order to cause the new dumped Emacs to process its new command-line arguments.</target>
        </trans-unit>
        <trans-unit id="085a188ee0ae3f10744759afa9f5b7baf461b132" translate="yes" xml:space="preserve">
          <source>If you run &lt;code&gt;normal-mode&lt;/code&gt; interactively, the argument &lt;var&gt;find-file&lt;/var&gt; is normally &lt;code&gt;nil&lt;/code&gt;. In this case, &lt;code&gt;normal-mode&lt;/code&gt; unconditionally processes any file local variables.</source>
          <target state="translated">If you run &lt;code&gt;normal-mode&lt;/code&gt; interactively, the argument &lt;var&gt;find-file&lt;/var&gt; is normally &lt;code&gt;nil&lt;/code&gt; . In this case, &lt;code&gt;normal-mode&lt;/code&gt; unconditionally processes any file local variables.</target>
        </trans-unit>
        <trans-unit id="69bd4b2952384a0a33ef5b0366f425ff27273401" translate="yes" xml:space="preserve">
          <source>If you run Emacs from the directory where it was built&amp;mdash;that is, an executable that has not been formally installed&amp;mdash;Emacs instead initializes &lt;code&gt;load-path&lt;/code&gt; using the</source>
          <target state="translated">If you run Emacs from the directory where it was built&amp;mdash;that is, an executable that has not been formally installed&amp;mdash;Emacs instead initializes &lt;code&gt;load-path&lt;/code&gt; using the</target>
        </trans-unit>
        <trans-unit id="33df89859e8bd5153172b40f655f9725c87eaa23" translate="yes" xml:space="preserve">
          <source>If you set &lt;code&gt;debug-on-event&lt;/code&gt; to a special event (see &lt;a href=&quot;special-events#Special-Events&quot;&gt;Special Events&lt;/a&gt;), Emacs will try to enter the debugger as soon as it receives this event, bypassing &lt;code&gt;special-event-map&lt;/code&gt;. At present, the only supported values correspond to the signals &lt;code&gt;SIGUSR1&lt;/code&gt; and &lt;code&gt;SIGUSR2&lt;/code&gt; (this is the default). This can be helpful when &lt;code&gt;inhibit-quit&lt;/code&gt; is set and Emacs is not otherwise responding.</source>
          <target state="translated">If you set &lt;code&gt;debug-on-event&lt;/code&gt; to a special event (see &lt;a href=&quot;special-events#Special-Events&quot;&gt;Special Events&lt;/a&gt;), Emacs will try to enter the debugger as soon as it receives this event, bypassing &lt;code&gt;special-event-map&lt;/code&gt; . At present, the only supported values correspond to the signals &lt;code&gt;SIGUSR1&lt;/code&gt; and &lt;code&gt;SIGUSR2&lt;/code&gt; (this is the default). This can be helpful when &lt;code&gt;inhibit-quit&lt;/code&gt; is set and Emacs is not otherwise responding.</target>
        </trans-unit>
        <trans-unit id="9c694c02ac2532f5fe2abe237714159362002a21" translate="yes" xml:space="preserve">
          <source>If you set &lt;code&gt;debug-on-message&lt;/code&gt; to a regular expression, Emacs will enter the debugger if it displays a matching message in the echo area. For example, this can be useful when trying to find the cause of a particular message.</source>
          <target state="translated">If you set &lt;code&gt;debug-on-message&lt;/code&gt; to a regular expression, Emacs will enter the debugger if it displays a matching message in the echo area. For example, this can be useful when trying to find the cause of a particular message.</target>
        </trans-unit>
        <trans-unit id="690f685efae0cb9f9d5902d7605b6ee4e66d6dce" translate="yes" xml:space="preserve">
          <source>If you set this hook locally in a buffer, it is assumed to be associated with the file or the way the contents of the buffer were obtained. Thus the variable is marked as a permanent local, so that changing the major mode does not alter a buffer-local value. On the other hand, calling &lt;code&gt;set-visited-file-name&lt;/code&gt; will reset it. If this is not what you want, you might like to use &lt;code&gt;write-contents-functions&lt;/code&gt; instead.</source>
          <target state="translated">If you set this hook locally in a buffer, it is assumed to be associated with the file or the way the contents of the buffer were obtained. Thus the variable is marked as a permanent local, so that changing the major mode does not alter a buffer-local value. On the other hand, calling &lt;code&gt;set-visited-file-name&lt;/code&gt; will reset it. If this is not what you want, you might like to use &lt;code&gt;write-contents-functions&lt;/code&gt; instead.</target>
        </trans-unit>
        <trans-unit id="cfc7987161a9303dafc2b33573d2e5f10008802a" translate="yes" xml:space="preserve">
          <source>If you set this variable to &lt;code&gt;nil&lt;/code&gt; in a buffer, that buffer does not have a mode line. (A window that is just one line tall also does not display a mode line.)</source>
          <target state="translated">If you set this variable to &lt;code&gt;nil&lt;/code&gt; in a buffer, that buffer does not have a mode line. (A window that is just one line tall also does not display a mode line.)</target>
        </trans-unit>
        <trans-unit id="9d66da1552d51dd81ff05a3b900a0329bf52436f" translate="yes" xml:space="preserve">
          <source>If you set this variable to a non-&lt;code&gt;nil&lt;/code&gt; value, the feature of moving point out of these sequences is completely turned off.</source>
          <target state="translated">If you set this variable to a non- &lt;code&gt;nil&lt;/code&gt; value, the feature of moving point out of these sequences is completely turned off.</target>
        </trans-unit>
        <trans-unit id="ca8a3595d33e58a00ada25426e1b2f96b61be780" translate="yes" xml:space="preserve">
          <source>If you specify &lt;var&gt;initial&lt;/var&gt;, that is an initial file name to insert in the buffer (after &lt;var&gt;directory&lt;/var&gt;, if that is inserted). In this case, point goes at the beginning of &lt;var&gt;initial&lt;/var&gt;. The default for &lt;var&gt;initial&lt;/var&gt; is &lt;code&gt;nil&lt;/code&gt;&amp;mdash;don&amp;rsquo;t insert any file name. To see what &lt;var&gt;initial&lt;/var&gt; does, try the command</source>
          <target state="translated">If you specify &lt;var&gt;initial&lt;/var&gt; , that is an initial file name to insert in the buffer (after &lt;var&gt;directory&lt;/var&gt; , if that is inserted). In this case, point goes at the beginning of &lt;var&gt;initial&lt;/var&gt; . The default for &lt;var&gt;initial&lt;/var&gt; is &lt;code&gt;nil&lt;/code&gt; &amp;mdash;don&amp;rsquo;t insert any file name. To see what &lt;var&gt;initial&lt;/var&gt; does, try the command</target>
        </trans-unit>
        <trans-unit id="5c87b5e9500f1aecb01a1e2b9e8cf60f70697916" translate="yes" xml:space="preserve">
          <source>If you specify &lt;var&gt;prompt&lt;/var&gt;, that becomes the overall prompt string for the keymap. You should specify this only for menu keymaps (see &lt;a href=&quot;defining-menus#Defining-Menus&quot;&gt;Defining Menus&lt;/a&gt;). A keymap with an overall prompt string will always present a mouse menu or a keyboard menu if it is active for looking up the next input event. Don&amp;rsquo;t specify an overall prompt string for the main map of a major or minor mode, because that would cause the command loop to present a keyboard menu every time.</source>
          <target state="translated">If you specify &lt;var&gt;prompt&lt;/var&gt; , that becomes the overall prompt string for the keymap. You should specify this only for menu keymaps (see &lt;a href=&quot;defining-menus#Defining-Menus&quot;&gt;Defining Menus&lt;/a&gt;). A keymap with an overall prompt string will always present a mouse menu or a keyboard menu if it is active for looking up the next input event. Don&amp;rsquo;t specify an overall prompt string for the main map of a major or minor mode, because that would cause the command loop to present a keyboard menu every time.</target>
        </trans-unit>
        <trans-unit id="5edea50f7657db34bc2bc85d01daa7f7adc96609" translate="yes" xml:space="preserve">
          <source>If you specify &lt;var&gt;uid&lt;/var&gt; (a number), the result is the user name that corresponds to &lt;var&gt;uid&lt;/var&gt;, or &lt;code&gt;nil&lt;/code&gt; if there is no such user.</source>
          <target state="translated">If you specify &lt;var&gt;uid&lt;/var&gt; (a number), the result is the user name that corresponds to &lt;var&gt;uid&lt;/var&gt; , or &lt;code&gt;nil&lt;/code&gt; if there is no such user.</target>
        </trans-unit>
        <trans-unit id="f97e6393b96bab93a2f54c0164447ab04caf4a1b" translate="yes" xml:space="preserve">
          <source>If you specify a buffer, &lt;var&gt;buffer&lt;/var&gt;, then the value is the size of &lt;var&gt;buffer&lt;/var&gt;.</source>
          <target state="translated">If you specify a buffer, &lt;var&gt;buffer&lt;/var&gt; , then the value is the size of &lt;var&gt;buffer&lt;/var&gt; .</target>
        </trans-unit>
        <trans-unit id="f505374ea489ecb94c5a8340e207775e38c3e1b5" translate="yes" xml:space="preserve">
          <source>If you specify a number for &lt;var&gt;limit&lt;/var&gt;, then after chasing through that many links, the function just returns what it has even if that is still a symbolic link.</source>
          <target state="translated">If you specify a number for &lt;var&gt;limit&lt;/var&gt; , then after chasing through that many links, the function just returns what it has even if that is still a symbolic link.</target>
        </trans-unit>
        <trans-unit id="375bd3746fef25d0232e18d73f21e041e0753b43" translate="yes" xml:space="preserve">
          <source>If you specify an XBM image using data within Emacs instead of an external file, use the following three properties:</source>
          <target state="translated">Si especifica una imagen XBM utilizando datos dentro de Emacs en lugar de un archivo externo,utilice las siguientes tres propiedades:</target>
        </trans-unit>
        <trans-unit id="fde2a383a2451f6ddbde3c6482877a98961e5cf2" translate="yes" xml:space="preserve">
          <source>If you specify the frame name explicitly when you create the frame, the name is also used (instead of the name of the Emacs executable) when looking up X resources for the frame.</source>
          <target state="translated">Si especificas el nombre del marco explícitamente cuando lo creas,el nombre también se utiliza (en lugar del nombre del ejecutable de Emacs)cuando buscas X recursos para el marco.</target>
        </trans-unit>
        <trans-unit id="f6ca207d06cc2c68a4c2828df92b77209025123f" translate="yes" xml:space="preserve">
          <source>If you specify the same slot on the same side for two or more different buffers, the buffer displayed last is shown in the corresponding window. Hence, slots can be used for sharing the same side window between buffers.</source>
          <target state="translated">Si se especifica la misma ranura en el mismo lado para dos o más búferes diferentes,el último búfer mostrado se muestra en la ventana correspondiente.Por lo tanto,las ranuras pueden utilizarse para compartir la misma ventana lateral entre las memorias intermedias.</target>
        </trans-unit>
        <trans-unit id="05d28610a19e0f56bd2c76d43cd9274215e3fa7d" translate="yes" xml:space="preserve">
          <source>If you specify this keyword, the variable&amp;rsquo;s documentation string should describe how to do the same job in hand-written Lisp code.</source>
          <target state="translated">If you specify this keyword, the variable&amp;rsquo;s documentation string should describe how to do the same job in hand-written Lisp code.</target>
        </trans-unit>
        <trans-unit id="716618ddbeabe19866aadf7f17b67b04057ebcef" translate="yes" xml:space="preserve">
          <source>If you store a completion alist in a variable, you should mark the variable as risky by giving it a non-&lt;code&gt;nil&lt;/code&gt;&lt;code&gt;risky-local-variable&lt;/code&gt; property. See &lt;a href=&quot;file-local-variables#File-Local-Variables&quot;&gt;File Local Variables&lt;/a&gt;.</source>
          <target state="translated">If you store a completion alist in a variable, you should mark the variable as risky by giving it a non- &lt;code&gt;nil&lt;/code&gt; &lt;code&gt;risky-local-variable&lt;/code&gt; property. See &lt;a href=&quot;file-local-variables#File-Local-Variables&quot;&gt;File Local Variables&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="40a77c6103e436345187dd30831cc5254ef479b8" translate="yes" xml:space="preserve">
          <source>If you try this, you will notice that repeated attempts to display</source>
          <target state="translated">Si intenta esto,notará que los repetidos intentos de mostrar</target>
        </trans-unit>
        <trans-unit id="6a67eecb62315ce39f790ce6ffad7fa4e38d4eb8" translate="yes" xml:space="preserve">
          <source>If you use &lt;code&gt;buffer-swap-text&lt;/code&gt; on a file-visiting buffer, you should set up a hook to save the buffer&amp;rsquo;s original text rather than what it was swapped with. &lt;code&gt;write-region-annotate-functions&lt;/code&gt; works for this purpose. You should probably set &lt;code&gt;buffer-saved-size&lt;/code&gt; to -2 in the buffer, so that changes in the text it is swapped with will not interfere with auto-saving.</source>
          <target state="translated">If you use &lt;code&gt;buffer-swap-text&lt;/code&gt; on a file-visiting buffer, you should set up a hook to save the buffer&amp;rsquo;s original text rather than what it was swapped with. &lt;code&gt;write-region-annotate-functions&lt;/code&gt; works for this purpose. You should probably set &lt;code&gt;buffer-saved-size&lt;/code&gt; to -2 in the buffer, so that changes in the text it is swapped with will not interfere with auto-saving.</target>
        </trans-unit>
        <trans-unit id="d6907391755fb47bb50b18a1d24adc63588140ea" translate="yes" xml:space="preserve">
          <source>If you use &lt;code&gt;regexp-opt&lt;/code&gt; to produce the regular expression &lt;var&gt;matcher&lt;/var&gt;, you can use &lt;code&gt;regexp-opt-depth&lt;/code&gt; (see &lt;a href=&quot;regexp-functions#Regexp-Functions&quot;&gt;Regexp Functions&lt;/a&gt;) to calculate the value for &lt;var&gt;subexp&lt;/var&gt;.</source>
          <target state="translated">If you use &lt;code&gt;regexp-opt&lt;/code&gt; to produce the regular expression &lt;var&gt;matcher&lt;/var&gt; , you can use &lt;code&gt;regexp-opt-depth&lt;/code&gt; (see &lt;a href=&quot;regexp-functions#Regexp-Functions&quot;&gt;Regexp Functions&lt;/a&gt;) to calculate the value for &lt;var&gt;subexp&lt;/var&gt; .</target>
        </trans-unit>
        <trans-unit id="fd48732c105c46f30a8758370472e5d61da524f5" translate="yes" xml:space="preserve">
          <source>If you use a minibuffer-only frame, you might want that frame to raise when you enter the minibuffer. If so, set the variable &lt;code&gt;minibuffer-auto-raise&lt;/code&gt; to &lt;code&gt;t&lt;/code&gt;. See &lt;a href=&quot;raising-and-lowering#Raising-and-Lowering&quot;&gt;Raising and Lowering&lt;/a&gt;.</source>
          <target state="translated">If you use a minibuffer-only frame, you might want that frame to raise when you enter the minibuffer. If so, set the variable &lt;code&gt;minibuffer-auto-raise&lt;/code&gt; to &lt;code&gt;t&lt;/code&gt; . See &lt;a href=&quot;raising-and-lowering#Raising-and-Lowering&quot;&gt;Raising and Lowering&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="fa0c1227e66ae4b44f79049d6018702a84803396" translate="yes" xml:space="preserve">
          <source>If you use any Unicode-style escape sequence &amp;lsquo;</source>
          <target state="translated">If you use any Unicode-style escape sequence &amp;lsquo;</target>
        </trans-unit>
        <trans-unit id="0b2b537fa713937b15520eb5e6b8621ddcd5294c" translate="yes" xml:space="preserve">
          <source>If you use the &lt;code&gt;define-derived-mode&lt;/code&gt; macro, it will take care of many of these conventions automatically. See &lt;a href=&quot;derived-modes#Derived-Modes&quot;&gt;Derived Modes&lt;/a&gt;. Note also that Fundamental mode is an exception to many of these conventions, because it represents the default state of Emacs.</source>
          <target state="translated">If you use the &lt;code&gt;define-derived-mode&lt;/code&gt; macro, it will take care of many of these conventions automatically. See &lt;a href=&quot;derived-modes#Derived-Modes&quot;&gt;Derived Modes&lt;/a&gt;. Note also that Fundamental mode is an exception to many of these conventions, because it represents the default state of Emacs.</target>
        </trans-unit>
        <trans-unit id="ebbd02981d2d6e160b2592d755148aa81cf87d75" translate="yes" xml:space="preserve">
          <source>If you use this command in a different window displaying the same buffer, that window will be used instead to display the current definition in the future.</source>
          <target state="translated">Si utiliza este comando en una ventana diferente que muestre la misma memoria intermedia,esa ventana se utilizará en su lugar para mostrar la definición actual en el futuro.</target>
        </trans-unit>
        <trans-unit id="afdbef8990f56e48b4ad3c9668d8bcdb3999729f" translate="yes" xml:space="preserve">
          <source>If you use this for a type that appears as an alternative inside of &lt;code&gt;choice&lt;/code&gt;; it specifies the default value to use, at first, if and when the user selects this alternative with the menu in the customization buffer.</source>
          <target state="translated">Si usa esto para un tipo que aparece como una alternativa dentro de su &lt;code&gt;choice&lt;/code&gt; ; especifica el valor predeterminado para usar, al principio, si y cuando el usuario selecciona esta alternativa con el men&amp;uacute; en el b&amp;uacute;fer de personalizaci&amp;oacute;n.</target>
        </trans-unit>
        <trans-unit id="629ad44964d5895c3d594065b4e7da091b6bb932" translate="yes" xml:space="preserve">
          <source>If you use this keyword more than once, you can put a single item into more than one group. Displaying any of those groups will show this item. Please don&amp;rsquo;t overdo this, since the result would be annoying.</source>
          <target state="translated">Si usa esta palabra clave m&amp;aacute;s de una vez, puede colocar un solo elemento en m&amp;aacute;s de un grupo. Al mostrar cualquiera de esos grupos, se mostrar&amp;aacute; este elemento. Por favor, no exagere, ya que el resultado ser&amp;iacute;a molesto.</target>
        </trans-unit>
        <trans-unit id="49e3ca07657354c28816ff97da5c7582b8256ace" translate="yes" xml:space="preserve">
          <source>If you want a menu bar submenu to have contents that vary, you should still use a menu keymap to implement it. To make the contents vary, add a hook function to &lt;code&gt;menu-bar-update-hook&lt;/code&gt; to update the contents of the menu keymap as necessary.</source>
          <target state="translated">Si desea que un submen&amp;uacute; de la barra de men&amp;uacute; tenga contenidos que var&amp;iacute;en, a&amp;uacute;n debe usar un mapa de teclas de men&amp;uacute; para implementarlo. Para hacer que el contenido var&amp;iacute;e, agregue una funci&amp;oacute;n de enlace a &lt;code&gt;menu-bar-update-hook&lt;/code&gt; para actualizar el contenido del mapa de teclas del men&amp;uacute; seg&amp;uacute;n sea necesario.</target>
        </trans-unit>
        <trans-unit id="3be39a84378c1d3ff63b94f456da0a9da8540136" translate="yes" xml:space="preserve">
          <source>If you want code to be executed when a &lt;em&gt;particular&lt;/em&gt; library is loaded, use the macro &lt;code&gt;with-eval-after-load&lt;/code&gt;:</source>
          <target state="translated">Si desea que se ejecute c&amp;oacute;digo cuando se carga una biblioteca en &lt;em&gt;particular&lt;/em&gt; , use la macro &lt;code&gt;with-eval-after-load&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="c9e263b344abbe33fc08169dcaf2cad9b660996f" translate="yes" xml:space="preserve">
          <source>If you want to be able to debug errors that are caught by a &lt;code&gt;condition-case&lt;/code&gt;, set the variable &lt;code&gt;debug-on-signal&lt;/code&gt; to a non-&lt;code&gt;nil&lt;/code&gt; value. You can also specify that a particular handler should let the debugger run first, by writing &lt;code&gt;debug&lt;/code&gt; among the conditions, like this:</source>
          <target state="translated">Si desea poder depurar errores detectados por un &lt;code&gt;condition-case&lt;/code&gt; , establezca la variable &lt;code&gt;debug-on-signal&lt;/code&gt; en un valor que no sea &lt;code&gt;nil&lt;/code&gt; . Tambi&amp;eacute;n puede especificar que un controlador en particular debe dejar que el depurador se ejecute primero, escribiendo &lt;code&gt;debug&lt;/code&gt; entre las condiciones, como esta:</target>
        </trans-unit>
        <trans-unit id="59bdec6558d0121a21861b3648de710d60579fcc" translate="yes" xml:space="preserve">
          <source>If you want to be able to distinguish all possible values computed by &lt;var&gt;body&lt;/var&gt; from both kinds of abort conditions, write the code like this:</source>
          <target state="translated">Si desea poder distinguir todos los valores posibles calculados por el &lt;var&gt;body&lt;/var&gt; de ambos tipos de condiciones de aborto, escriba el c&amp;oacute;digo as&amp;iacute;:</target>
        </trans-unit>
        <trans-unit id="c7c6338ea698e54cbd61c931fd1eb115534a9075" translate="yes" xml:space="preserve">
          <source>If you want to change the way Emacs handles drop of different types or add a new type, customize &lt;code&gt;x-dnd-types-alist&lt;/code&gt;. This requires detailed knowledge of what types other applications use for drag and drop.</source>
          <target state="translated">Si desea cambiar la forma en que Emacs maneja la ca&amp;iacute;da de diferentes tipos o agregar un nuevo tipo, personalice &lt;code&gt;x-dnd-types-alist&lt;/code&gt; . Esto requiere un conocimiento detallado de qu&amp;eacute; tipos usan otras aplicaciones para arrastrar y soltar.</target>
        </trans-unit>
        <trans-unit id="9962c78c83f1c13605cf8ba722facf4943be5aa3" translate="yes" xml:space="preserve">
          <source>If you want to define &lt;code&gt;safe-local-variable&lt;/code&gt; properties for variables defined in C source code, add the names and the properties of those variables to the list in the &amp;ldquo;Safe local variables&amp;rdquo; section of</source>
          <target state="translated">Si desea definir propiedades de variables &lt;code&gt;safe-local-variable&lt;/code&gt; para las variables definidas en el c&amp;oacute;digo fuente C, agregue los nombres y las propiedades de esas variables a la lista en la secci&amp;oacute;n &quot;Variables locales seguras&quot; de</target>
        </trans-unit>
        <trans-unit id="a63fb633f610fcf7b569e1e58f5a8bedb9ec6204" translate="yes" xml:space="preserve">
          <source>If you want to delete elements that are &lt;code&gt;equal&lt;/code&gt; to a given value, use &lt;code&gt;delete&lt;/code&gt; (see below).</source>
          <target state="translated">Si desea eliminar elementos que son &lt;code&gt;equal&lt;/code&gt; a un valor dado, use &lt;code&gt;delete&lt;/code&gt; (ver m&amp;aacute;s abajo).</target>
        </trans-unit>
        <trans-unit id="a770c467b911a60af82d90717d058d45481ec026" translate="yes" xml:space="preserve">
          <source>If you want to find all matches for a regexp in part of the buffer, and replace them, the best way is to write an explicit loop using &lt;code&gt;re-search-forward&lt;/code&gt; and &lt;code&gt;replace-match&lt;/code&gt;, like this:</source>
          <target state="translated">Si desea encontrar todas las coincidencias para una expresi&amp;oacute;n regular en parte del b&amp;uacute;fer y reemplazarlas, la mejor manera es escribir un bucle expl&amp;iacute;cito usando &lt;code&gt;re-search-forward&lt;/code&gt; y &lt;code&gt;replace-match&lt;/code&gt; , as&amp;iacute;:</target>
        </trans-unit>
        <trans-unit id="e07043ea04e2ff5e4af20b9e5042e3dbc7fb1ab7" translate="yes" xml:space="preserve">
          <source>If you want to increment the variable, you must use &lt;code&gt;setq&lt;/code&gt;, like this:</source>
          <target state="translated">Si desea incrementar la variable, debe usar &lt;code&gt;setq&lt;/code&gt; , as&amp;iacute;:</target>
        </trans-unit>
        <trans-unit id="c38bee5b246e44204c9311862ab52b37815b5e96" translate="yes" xml:space="preserve">
          <source>If you want to make a Lisp variable that is defined in C behave like one declared with &lt;code&gt;defcustom&lt;/code&gt;, add an appropriate entry to</source>
          <target state="translated">Si desea que una variable Lisp definida en C se comporte como una declarada con &lt;code&gt;defcustom&lt;/code&gt; , agregue una entrada apropiada a</target>
        </trans-unit>
        <trans-unit id="c89381f0269c1ad13f9db33500586f3038ca5d1c" translate="yes" xml:space="preserve">
          <source>If you want to make the new mode the default for files with certain recognizable names, add an element to &lt;code&gt;auto-mode-alist&lt;/code&gt; to select the mode for those file names (see &lt;a href=&quot;auto-major-mode#Auto-Major-Mode&quot;&gt;Auto Major Mode&lt;/a&gt;). If you define the mode command to autoload, you should add this element in the same file that calls &lt;code&gt;autoload&lt;/code&gt;. If you use an autoload cookie for the mode command, you can also use an autoload cookie for the form that adds the element (see &lt;a href=&quot;autoload#autoload-cookie&quot;&gt;autoload cookie&lt;/a&gt;). If you do not autoload the mode command, it is sufficient to add the element in the file that contains the mode definition.</source>
          <target state="translated">Si desea que el nuevo modo sea el predeterminado para archivos con ciertos nombres reconocibles, agregue un elemento a &lt;code&gt;auto-mode-alist&lt;/code&gt; para seleccionar el modo para esos nombres de archivo (consulte &lt;a href=&quot;auto-major-mode#Auto-Major-Mode&quot;&gt;Auto Major Mode&lt;/a&gt; ). Si define el comando de modo para autocarga, debe agregar este elemento en el mismo archivo que llama a &lt;code&gt;autoload&lt;/code&gt; . Si usa una cookie de carga autom&amp;aacute;tica para el comando de modo, tambi&amp;eacute;n puede usar una cookie de carga autom&amp;aacute;tica para el formulario que agrega el elemento (consulte la &lt;a href=&quot;autoload#autoload-cookie&quot;&gt;cookie de carga autom&amp;aacute;tica&lt;/a&gt; ). Si no carga autom&amp;aacute;ticamente el comando de modo, es suficiente agregar el elemento en el archivo que contiene la definici&amp;oacute;n de modo.</target>
        </trans-unit>
        <trans-unit id="b6bd9286bc367e97ce4540abf13e066ac7ad9d72" translate="yes" xml:space="preserve">
          <source>If you want to pass a file name to another process so that another program can read the file, use the function &lt;code&gt;file-local-copy&lt;/code&gt;; see &lt;a href=&quot;magic-file-names#Magic-File-Names&quot;&gt;Magic File Names&lt;/a&gt;.</source>
          <target state="translated">Si desea pasar un nombre de archivo a otro proceso para que otro programa pueda leer el archivo, use la funci&amp;oacute;n &lt;code&gt;file-local-copy&lt;/code&gt; ; consulte &lt;a href=&quot;magic-file-names#Magic-File-Names&quot;&gt;Nombres de archivos m&amp;aacute;gicos&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="252c3f2a6736d1faced75b5183751f3b39035b6e" translate="yes" xml:space="preserve">
          <source>If you want to preload function or variable definitions, there are three ways you can do this and make their documentation strings accessible when you subsequently run Emacs:</source>
          <target state="translated">Si desea cargar previamente la función o las definiciones de las variables,hay tres formas de hacerlo y hacer accesibles sus cadenas de documentación cuando ejecute posteriormente el Emacs:</target>
        </trans-unit>
        <trans-unit id="2cee666fd30a296699a4e8f28dd2fdfe14c7228f" translate="yes" xml:space="preserve">
          <source>If you want to specify group members through &lt;var&gt;members&lt;/var&gt;, each element should have the form &lt;code&gt;(&lt;var&gt;name&lt;/var&gt; &lt;var&gt;widget&lt;/var&gt;)&lt;/code&gt;. Here &lt;var&gt;name&lt;/var&gt; is a symbol, and &lt;var&gt;widget&lt;/var&gt; is a widget type for editing that symbol. Useful widgets are &lt;code&gt;custom-variable&lt;/code&gt; for a variable, &lt;code&gt;custom-face&lt;/code&gt; for a face, and &lt;code&gt;custom-group&lt;/code&gt; for a group.</source>
          <target state="translated">Si desea especificar miembros del grupo a trav&amp;eacute;s de &lt;var&gt;members&lt;/var&gt; , cada elemento debe tener la forma &lt;code&gt;(&lt;var&gt;name&lt;/var&gt; &lt;var&gt;widget&lt;/var&gt;)&lt;/code&gt; . Aqu&amp;iacute;, el &lt;var&gt;name&lt;/var&gt; es un s&amp;iacute;mbolo y el &lt;var&gt;widget&lt;/var&gt; es un tipo de widget para editar ese s&amp;iacute;mbolo. Los widgets &amp;uacute;tiles son &lt;code&gt;custom-variable&lt;/code&gt; para una variable, &lt;code&gt;custom-face&lt;/code&gt; para una cara y &lt;code&gt;custom-group&lt;/code&gt; para un grupo.</target>
        </trans-unit>
        <trans-unit id="8e10bdc9c026c4aa399e4b42ba23f64d06212059" translate="yes" xml:space="preserve">
          <source>If you want to take action as soon as a button is pressed, you need to handle &lt;em&gt;button-down&lt;/em&gt; events.&lt;a href=&quot;#FOOT13&quot; name=&quot;DOCF13&quot;&gt;&lt;sup&gt;13&lt;/sup&gt;&lt;/a&gt; These occur as soon as a button is pressed. They are represented by lists that look exactly like click events (see &lt;a href=&quot;click-events#Click-Events&quot;&gt;Click Events&lt;/a&gt;), except that the &lt;var&gt;event-type&lt;/var&gt; symbol name contains the prefix &amp;lsquo;</source>
          <target state="translated">Si desea tomar medidas tan pronto como se presione un bot&amp;oacute;n, debe manejar &lt;em&gt;los&lt;/em&gt; eventos de &lt;em&gt;botones&lt;/em&gt; . &lt;a href=&quot;#FOOT13&quot; name=&quot;DOCF13&quot;&gt;&lt;sup&gt;13&lt;/sup&gt;&lt;/a&gt; Estos ocurren tan pronto como se presiona un bot&amp;oacute;n. Est&amp;aacute;n representados por listas que se ven exactamente como eventos de clic (consulte &lt;a href=&quot;click-events#Click-Events&quot;&gt;Eventos de clic&lt;/a&gt; ), excepto que el nombre del s&amp;iacute;mbolo de &lt;var&gt;event-type&lt;/var&gt; contiene el prefijo '</target>
        </trans-unit>
        <trans-unit id="1a0489351d0c73d72b0fca1ef67e3467436c6466" translate="yes" xml:space="preserve">
          <source>If you want to use a directory file name in making such a combination, you must first convert it to a directory name using &lt;code&gt;file-name-as-directory&lt;/code&gt;:</source>
          <target state="translated">Si desea utilizar un nombre de archivo de directorio para hacer tal combinaci&amp;oacute;n, primero debe convertirlo a un nombre de directorio usando &lt;code&gt;file-name-as-directory&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="27743c56b5d0dd9981b65d5ea4209829501380cb" translate="yes" xml:space="preserve">
          <source>If you want to use this function in an Emacs that was already dumped, you must run Emacs with the &amp;lsquo;</source>
          <target state="translated">Si desea utilizar esta funci&amp;oacute;n en un Emacs que ya fue volcado, debe ejecutar Emacs con la '</target>
        </trans-unit>
        <trans-unit id="9bff8e6a47b35cd45f5d8552d3e143fb633c4b1c" translate="yes" xml:space="preserve">
          <source>If you want to write a command along the lines of &lt;code&gt;query-replace&lt;/code&gt;, you can use &lt;code&gt;perform-replace&lt;/code&gt; to do the work.</source>
          <target state="translated">Si desea escribir un comando en las l&amp;iacute;neas de &lt;code&gt;query-replace&lt;/code&gt; , puede usar &lt;code&gt;perform-replace&lt;/code&gt; para hacer el trabajo.</target>
        </trans-unit>
        <trans-unit id="353f48c9646e1a608529d6b8bd599dd5f82d0944" translate="yes" xml:space="preserve">
          <source>If you want to write a temporary file which is likely to be small, you should compute the directory like this:</source>
          <target state="translated">Si quieres escribir un archivo temporal que probablemente sea pequeño,deberías calcular el directorio así:</target>
        </trans-unit>
        <trans-unit id="1def4c97f647247a5c5ff48230af3b2e0d31bcc6" translate="yes" xml:space="preserve">
          <source>If you want your program to handle different types differently, you must do explicit type checking. The most common way to check the type of an object is to call a &lt;em&gt;type predicate&lt;/em&gt; function. Emacs has a type predicate for each type, as well as some predicates for combinations of types.</source>
          <target state="translated">Si desea que su programa maneje diferentes tipos de manera diferente, debe realizar una verificaci&amp;oacute;n de tipo expl&amp;iacute;cita. La forma m&amp;aacute;s com&amp;uacute;n de verificar el tipo de un objeto es llamar a una funci&amp;oacute;n de &lt;em&gt;predicado de tipo&lt;/em&gt; . Emacs tiene un predicado de tipo para cada tipo, as&amp;iacute; como algunos predicados para combinaciones de tipos.</target>
        </trans-unit>
        <trans-unit id="7f232d7dc078880a275acb49812461edd0ce860d" translate="yes" xml:space="preserve">
          <source>If you wanted to attach the same replace menu to a mouse click, you can do it this way:</source>
          <target state="translated">Si quisieras adjuntar el mismo menú de reemplazo a un clic del ratón,puedes hacerlo de esta manera:</target>
        </trans-unit>
        <trans-unit id="28b8c0ff1e6b7f40141852b8f78ad49d083249f7" translate="yes" xml:space="preserve">
          <source>If you wish to add text properties to a buffer or remove them without marking the buffer as modified, you can wrap the calls above in the &lt;code&gt;with-silent-modifications&lt;/code&gt; macro. See &lt;a href=&quot;buffer-modification#Buffer-Modification&quot;&gt;Buffer Modification&lt;/a&gt;.</source>
          <target state="translated">Si desea agregar propiedades de texto a un b&amp;uacute;fer o eliminarlas sin marcar el b&amp;uacute;fer como modificado, puede envolver las llamadas anteriores en la macro con &lt;code&gt;with-silent-modifications&lt;/code&gt; . Consulte &lt;a href=&quot;buffer-modification#Buffer-Modification&quot;&gt;Modificaci&amp;oacute;n de b&amp;uacute;fer&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="9314fb2dc1ec806dadc29d80680d276f22ec3691" translate="yes" xml:space="preserve">
          <source>If you wish to verify the conformance of a module to the Emacs dynamic module</source>
          <target state="translated">Si desea verificar la conformidad de un módulo con el módulo dinámico de Emacs</target>
        </trans-unit>
        <trans-unit id="ca331c2a227354c196a20ee4c8b853bb299d3e61" translate="yes" xml:space="preserve">
          <source>If you wish, you can replace the &lt;code&gt;ask-user-about-lock&lt;/code&gt; function with your own version that makes the decision in another way.</source>
          <target state="translated">Si lo desea, puede reemplazar la funci&amp;oacute;n &lt;code&gt;ask-user-about-lock&lt;/code&gt; con su propia versi&amp;oacute;n que toma la decisi&amp;oacute;n de otra manera.</target>
        </trans-unit>
        <trans-unit id="4d662283da0f2958a60954e2e27370bba9903a41" translate="yes" xml:space="preserve">
          <source>If you would like to see Edebug&amp;rsquo;s functions in the backtrace, use</source>
          <target state="translated">Si desea ver las funciones de Edebug en el backtrace, use</target>
        </trans-unit>
        <trans-unit id="0e7b1af4801797b08feab3ca25fd99f927f534a2" translate="yes" xml:space="preserve">
          <source>If you write a function definition with an unusual macro that is not one of the known and recognized function definition methods, use of an ordinary magic autoload comment would copy the whole definition into &lt;code&gt;loaddefs.el&lt;/code&gt;. That is not desirable. You can put the desired &lt;code&gt;autoload&lt;/code&gt; call into &lt;code&gt;loaddefs.el&lt;/code&gt; instead by writing this:</source>
          <target state="translated">Si escribe una definici&amp;oacute;n de funci&amp;oacute;n con una macro inusual que no es uno de los m&amp;eacute;todos de definici&amp;oacute;n de funci&amp;oacute;n conocidos y reconocidos, el uso de un comentario de carga autom&amp;aacute;tica m&amp;aacute;gica ordinaria copiar&amp;iacute;a toda la definici&amp;oacute;n en &lt;code&gt;loaddefs.el&lt;/code&gt; . Eso no es deseable. Puede poner la llamada de &lt;code&gt;autoload&lt;/code&gt; deseada en &lt;code&gt;loaddefs.el&lt;/code&gt; escribiendo esto:</target>
        </trans-unit>
        <trans-unit id="d233d041f222a6f0703355568126be43236fb134" translate="yes" xml:space="preserve">
          <source>If you write your own function to be put on the &lt;code&gt;tooltip-functions&lt;/code&gt; list, you may need to know the buffer of the mouse event that triggered the tooltip display. The following function provides that information.</source>
          <target state="translated">Si escribe su propia funci&amp;oacute;n para colocarla en la lista de &lt;code&gt;tooltip-functions&lt;/code&gt; sobre herramientas , es posible que necesite conocer el b&amp;uacute;fer del evento del mouse que activ&amp;oacute; la visualizaci&amp;oacute;n de informaci&amp;oacute;n sobre herramientas. La siguiente funci&amp;oacute;n proporciona esa informaci&amp;oacute;n.</target>
        </trans-unit>
        <trans-unit id="5f651282e9deb511f780af54aec3d7ab9890404b" translate="yes" xml:space="preserve">
          <source>If you&amp;rsquo;re setting up an asynchronous TLS connection, you have to also provide the &lt;code&gt;:tls-parameters&lt;/code&gt; parameter (see below).</source>
          <target state="translated">Si est&amp;aacute; configurando una conexi&amp;oacute;n TLS as&amp;iacute;ncrona, tambi&amp;eacute;n debe proporcionar el &lt;code&gt;:tls-parameters&lt;/code&gt; parameters (ver m&amp;aacute;s abajo).</target>
        </trans-unit>
        <trans-unit id="d70f5aea9c1d350e01a6eceee76a9e7dbb533230" translate="yes" xml:space="preserve">
          <source>If you&amp;rsquo;re using another package, but only need macros from it (the byte compiler will expand those), then &lt;code&gt;eval-when-compile&lt;/code&gt; can be used to load it for compiling, but not executing. For example,</source>
          <target state="translated">Si est&amp;aacute; usando otro paquete, pero solo necesita macros de &amp;eacute;l (el compilador de bytes los expandir&amp;aacute;), entonces &lt;code&gt;eval-when-compile&lt;/code&gt; se puede usar para cargarlo para compilar, pero no ejecutar. Por ejemplo,</target>
        </trans-unit>
        <trans-unit id="2d45e994d3ba3dcb17fc10bf4fc110fdce2e5f3f" translate="yes" xml:space="preserve">
          <source>If your Emacs Lisp program needs to assign some faces to text, it is often a good idea to use certain existing faces or inherit from them, rather than defining entirely new faces. This way, if other users have customized the basic faces to give Emacs a certain look, your program will fit in without additional customization.</source>
          <target state="translated">Si su programa Emacs Lisp necesita asignar algunas caras al texto,a menudo es una buena idea utilizar ciertas caras existentes o heredadas de ellas,en lugar de definir caras completamente nuevas.De esta manera,si otros usuarios han personalizado las caras básicas para dar a Emacs un cierto aspecto,tu programa encajará sin personalización adicional.</target>
        </trans-unit>
        <trans-unit id="5c8bded4be6d6694860d7eb8600eff32119af59a" translate="yes" xml:space="preserve">
          <source>If your Emacs build has ImageMagick support, you can use the ImageMagick library to load many image formats (see &lt;a href=&quot;http://www.gnu.org/software/emacs/manual/html_node/emacs/File-Conveniences.html#File-Conveniences&quot;&gt;File Conveniences&lt;/a&gt; in</source>
          <target state="translated">Si su compilaci&amp;oacute;n de Emacs tiene soporte para ImageMagick, puede usar la biblioteca ImageMagick para cargar muchos formatos de imagen (vea &lt;a href=&quot;http://www.gnu.org/software/emacs/manual/html_node/emacs/File-Conveniences.html#File-Conveniences&quot;&gt;Comodidades de archivo&lt;/a&gt; en</target>
        </trans-unit>
        <trans-unit id="79aae3290a46dbcf7b36398be7497460dba8720d" translate="yes" xml:space="preserve">
          <source>If your Lisp program needs to make layout decisions, you will find the following function useful:</source>
          <target state="translated">Si su programa Lisp necesita tomar decisiones de diseño,encontrará útil la siguiente función:</target>
        </trans-unit>
        <trans-unit id="5fc6e331da7d896db05ebf47e4b7c4b10ed997b9" translate="yes" xml:space="preserve">
          <source>If your function happens to read input, a character you type intending to interrupt execution may be read by the function instead. You can avoid such unintended results by paying attention to when your program wants input.</source>
          <target state="translated">Si su función lee la entrada,un carácter que escriba con la intención de interrumpir la ejecución puede ser leído por la función en su lugar.Puede evitar tales resultados no deseados prestando atención a cuándo su programa quiere la entrada.</target>
        </trans-unit>
        <trans-unit id="1ba170033e789539342f30492cc68db1c80633aa" translate="yes" xml:space="preserve">
          <source>If your mode fontifies text explicitly by adding &lt;code&gt;font-lock-face&lt;/code&gt; properties, it can specify &lt;code&gt;(nil t)&lt;/code&gt; for &lt;code&gt;font-lock-defaults&lt;/code&gt; to turn off all automatic fontification. However, this is not required; it is possible to fontify some things using &lt;code&gt;font-lock-face&lt;/code&gt; properties and set up automatic fontification for other parts of the text.</source>
          <target state="translated">Si su modo fuente el texto expl&amp;iacute;citamente agregando propiedades &lt;code&gt;font-lock-face&lt;/code&gt; , puede especificar &lt;code&gt;(nil t)&lt;/code&gt; para &lt;code&gt;font-lock-defaults&lt;/code&gt; para desactivar toda la fuente autom&amp;aacute;tica. Sin embargo, esto no es requerido; es posible fontificar algunas cosas utilizando las propiedades de &lt;code&gt;font-lock-face&lt;/code&gt; y configurar la fontificaci&amp;oacute;n autom&amp;aacute;tica para otras partes del texto.</target>
        </trans-unit>
        <trans-unit id="6c52d9cb365da1adebc29d4657b8bbaede4dc551" translate="yes" xml:space="preserve">
          <source>If your module includes potentially long-running code, it is a good idea to check from time to time in that code whether the user wants to quit, e.g., by typing</source>
          <target state="translated">Si su módulo incluye un código potencialmente de larga duración,es una buena idea comprobar de vez en cuando en ese código si el usuario quiere dejarlo,por ejemplo,escribiendo</target>
        </trans-unit>
        <trans-unit id="89267be88e244d3cd9cb4a0ac81d5a54135d6b2b" translate="yes" xml:space="preserve">
          <source>If your monitor displays colors too light, you should specify a &lt;code&gt;screen-gamma&lt;/code&gt; value smaller than 2.2. This requests correction that makes colors darker. A screen gamma value of 1.5 may give good results for LCD color displays.</source>
          <target state="translated">Si su monitor muestra colores demasiado claros, debe especificar un valor de &lt;code&gt;screen-gamma&lt;/code&gt; menor que 2.2. Esto solicita una correcci&amp;oacute;n que oscurece los colores. Un valor de gamma de pantalla de 1,5 puede dar buenos resultados para pantallas LCD en color.</target>
        </trans-unit>
        <trans-unit id="dd935a1aca6ebbfdcc9a67b41e3b53df100359c7" translate="yes" xml:space="preserve">
          <source>If your package uses a fixed file name, how to handle various operating systems simply.</source>
          <target state="translated">Si su paquete utiliza un nombre de archivo fijo,cómo manejar varios sistemas operativos de forma sencilla.</target>
        </trans-unit>
        <trans-unit id="1193689cd9a0ac4f92f059d1dc0a2088ab488de5" translate="yes" xml:space="preserve">
          <source>If your program is working correctly, but not fast enough, and you want to make it run more quickly or efficiently, the first thing to do is &lt;em&gt;profile&lt;/em&gt; your code so that you know where it spends most of the execution time. If you find that one particular function is responsible for a significant portion of the execution time, you can start looking for ways to optimize that piece.</source>
          <target state="translated">Si su programa funciona correctamente, pero no lo suficientemente r&amp;aacute;pido, y desea que se ejecute de manera m&amp;aacute;s r&amp;aacute;pida o eficiente, lo primero que debe hacer es crear un &lt;em&gt;perfil de&lt;/em&gt; su c&amp;oacute;digo para saber d&amp;oacute;nde pasa la mayor parte del tiempo de ejecuci&amp;oacute;n. Si encuentra que una funci&amp;oacute;n en particular es responsable de una parte significativa del tiempo de ejecuci&amp;oacute;n, puede comenzar a buscar formas de optimizar esa pieza.</target>
        </trans-unit>
        <trans-unit id="b1e042424d49662dae08a1bf6462ad5f5721c1d9" translate="yes" xml:space="preserve">
          <source>If your system does not support a locale environment, this function behaves like &lt;code&gt;string-equal&lt;/code&gt;.</source>
          <target state="translated">Si su sistema no admite un entorno local, esta funci&amp;oacute;n se comporta como &lt;code&gt;string-equal&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="3b2ec9e1ced6426f29862d927943724a180f4f37" translate="yes" xml:space="preserve">
          <source>If your system does not support a locale environment, this function behaves like &lt;code&gt;string-lessp&lt;/code&gt;.</source>
          <target state="translated">Si su sistema no admite un entorno local, esta funci&amp;oacute;n se comporta como &lt;code&gt;string-lessp&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="a2a7f8c74638fa05ec98f6bc846b8e0afbd1dcfa" translate="yes" xml:space="preserve">
          <source>If, as a consequence of this variable&amp;rsquo;s setting, &lt;code&gt;split-window&lt;/code&gt; makes a new parent window, it also calls &lt;code&gt;set-window-combination-limit&lt;/code&gt; (see below) on the newly-created internal window. This affects how the window tree is rearranged when the child windows are deleted (see below).</source>
          <target state="translated">Si, como consecuencia de la configuraci&amp;oacute;n de esta variable, &lt;code&gt;split-window&lt;/code&gt; crea una nueva ventana principal, tambi&amp;eacute;n llama a &lt;code&gt;set-window-combination-limit&lt;/code&gt; (ver m&amp;aacute;s abajo) en la ventana interna reci&amp;eacute;n creada. Esto afecta c&amp;oacute;mo se reorganiza el &amp;aacute;rbol de ventanas cuando se eliminan las ventanas secundarias (ver m&amp;aacute;s abajo).</target>
        </trans-unit>
        <trans-unit id="451b00a18210e489817e33a2f75ab13a9719ab44" translate="yes" xml:space="preserve">
          <source>If, for instance, you have a function with the following signature:</source>
          <target state="translated">Si,por ejemplo,tiene una función con la siguiente firma:</target>
        </trans-unit>
        <trans-unit id="2abf7c3ec223f2095009c55b2f242e5df196b064" translate="yes" xml:space="preserve">
          <source>If, in the configuration shown at the beginning of this section, the combination limit of &lt;var&gt;W4&lt;/var&gt; (the parent window of &lt;var&gt;W6&lt;/var&gt; and &lt;var&gt;W7&lt;/var&gt;) is &lt;code&gt;t&lt;/code&gt;, deleting &lt;var&gt;W5&lt;/var&gt; will not implicitly delete &lt;var&gt;W4&lt;/var&gt; too.</source>
          <target state="translated">Si, en la configuraci&amp;oacute;n que se muestra al principio de esta secci&amp;oacute;n, el l&amp;iacute;mite de combinaci&amp;oacute;n de &lt;var&gt;W4&lt;/var&gt; (la ventana principal de &lt;var&gt;W6&lt;/var&gt; y &lt;var&gt;W7&lt;/var&gt; ) es &lt;code&gt;t&lt;/code&gt; , eliminar &lt;var&gt;W5&lt;/var&gt; no eliminar&amp;aacute; impl&amp;iacute;citamente &lt;var&gt;W4&lt;/var&gt; tambi&amp;eacute;n.</target>
        </trans-unit>
        <trans-unit id="78ffec08f0afea5009a9e4f31e999a7aef7bb8b2" translate="yes" xml:space="preserve">
          <source>Illustrates regular expression syntax.</source>
          <target state="translated">Ilustra la sintaxis de la expresión regular.</target>
        </trans-unit>
        <trans-unit id="6d6a2e3a1d75ffca319bbe002e550450309d7c59" translate="yes" xml:space="preserve">
          <source>Image Cache</source>
          <target state="translated">Caché de imágenes</target>
        </trans-unit>
        <trans-unit id="48b5c8b5116be341240880cddc06c139bf112214" translate="yes" xml:space="preserve">
          <source>Image Descriptors</source>
          <target state="translated">Descriptores de la imagen</target>
        </trans-unit>
        <trans-unit id="c8f6654a5156a1080fb81d03686a08b3810bb836" translate="yes" xml:space="preserve">
          <source>Image Formats</source>
          <target state="translated">formatos de imagen</target>
        </trans-unit>
        <trans-unit id="aeaae8093342d2fd0a43876f35175087f3fc1c56" translate="yes" xml:space="preserve">
          <source>Image rotation is supported by &lt;var&gt;frame&lt;/var&gt; if the rotation angle is an integral multiple of 90 degrees.</source>
          <target state="translated">La rotaci&amp;oacute;n de la imagen es compatible con el &lt;var&gt;frame&lt;/var&gt; si el &amp;aacute;ngulo de rotaci&amp;oacute;n es un m&amp;uacute;ltiplo integral de 90 grados.</target>
        </trans-unit>
        <trans-unit id="22a44b07be718b7665f80244ca7dfeffb2cef34a" translate="yes" xml:space="preserve">
          <source>Image scaling is supported by &lt;var&gt;frame&lt;/var&gt; via the &lt;code&gt;:scale&lt;/code&gt;, &lt;code&gt;:width&lt;/code&gt;, &lt;code&gt;:height&lt;/code&gt;, &lt;code&gt;:max-width&lt;/code&gt;, and &lt;code&gt;:max-height&lt;/code&gt; properties.</source>
          <target state="translated">Escalado de imagen es soportado por &lt;var&gt;frame&lt;/var&gt; a trav&amp;eacute;s de la &lt;code&gt;:scale&lt;/code&gt; , &lt;code&gt;:width&lt;/code&gt; , &lt;code&gt;:height&lt;/code&gt; , &lt;code&gt;:max-width&lt;/code&gt; , y &lt;code&gt;:max-height&lt;/code&gt; propiedades.</target>
        </trans-unit>
        <trans-unit id="1d1d6e296cb1c073ca88d9a58e07068eb51b05b3" translate="yes" xml:space="preserve">
          <source>Image support on some platforms uses this facility. Here&amp;rsquo;s an example of setting this variable for supporting images on MS-Windows:</source>
          <target state="translated">El soporte de im&amp;aacute;genes en algunas plataformas utiliza esta funci&amp;oacute;n. A continuaci&amp;oacute;n, se muestra un ejemplo de c&amp;oacute;mo configurar esta variable para admitir im&amp;aacute;genes en MS-Windows:</target>
        </trans-unit>
        <trans-unit id="ba6aa59bf89de0d7431e45a8f58836f3a0d84eff" translate="yes" xml:space="preserve">
          <source>Image type &lt;code&gt;gif&lt;/code&gt;. Supports the &lt;code&gt;:index&lt;/code&gt; property. See &lt;a href=&quot;multi_002dframe-images#Multi_002dFrame-Images&quot;&gt;Multi-Frame Images&lt;/a&gt;.</source>
          <target state="translated">Tipo de imagen &lt;code&gt;gif&lt;/code&gt; . Admite la propiedad &lt;code&gt;:index&lt;/code&gt; . Consulte &lt;a href=&quot;multi_002dframe-images#Multi_002dFrame-Images&quot;&gt;Im&amp;aacute;genes de varios cuadros&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="e6b807cfc6c4926cd04ef1e64755f11a7ed890ee" translate="yes" xml:space="preserve">
          <source>Image type &lt;code&gt;jpeg&lt;/code&gt;.</source>
          <target state="translated">Tipo de imagen &lt;code&gt;jpeg&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="bff299fe7917d8e01d672a807ac7ad596bd1fa0a" translate="yes" xml:space="preserve">
          <source>Image type &lt;code&gt;png&lt;/code&gt;.</source>
          <target state="translated">Tipo de imagen &lt;code&gt;png&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="6d259c4b3f9f796b005c99eb224c7f8328e811db" translate="yes" xml:space="preserve">
          <source>Image type &lt;code&gt;tiff&lt;/code&gt;. Supports the &lt;code&gt;:index&lt;/code&gt; property. See &lt;a href=&quot;multi_002dframe-images#Multi_002dFrame-Images&quot;&gt;Multi-Frame Images&lt;/a&gt;.</source>
          <target state="translated">Tipo de imagen &lt;code&gt;tiff&lt;/code&gt; . Admite la propiedad &lt;code&gt;:index&lt;/code&gt; . Consulte &lt;a href=&quot;multi_002dframe-images#Multi_002dFrame-Images&quot;&gt;Im&amp;aacute;genes de varios cuadros&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="f82696e58684223314f34c1e138cf5a09eed1ec1" translate="yes" xml:space="preserve">
          <source>ImageMagick Images</source>
          <target state="translated">Imágenes de ImageMagick</target>
        </trans-unit>
        <trans-unit id="09e871c98fef3b901a775def173e4126aaf73b42" translate="yes" xml:space="preserve">
          <source>Images</source>
          <target state="translated">Images</target>
        </trans-unit>
        <trans-unit id="b10522704faf5fb14671202d20d0113707920769" translate="yes" xml:space="preserve">
          <source>Images are automatically scaled when created based on the &lt;code&gt;image-scaling-factor&lt;/code&gt; variable. The value is either a floating point number (where numbers higher than 1 means to increase the size and lower means to shrink the size), or the symbol &lt;code&gt;auto&lt;/code&gt;, which will compute a scaling factor based on the font pixel size.</source>
          <target state="translated">Las im&amp;aacute;genes se escalan autom&amp;aacute;ticamente cuando se crean en funci&amp;oacute;n de la variable del &lt;code&gt;image-scaling-factor&lt;/code&gt; la imagen . El valor es un n&amp;uacute;mero de punto flotante (donde los n&amp;uacute;meros superiores a 1 significan aumentar el tama&amp;ntilde;o y m&amp;aacute;s bajos significan reducir el tama&amp;ntilde;o), o el s&amp;iacute;mbolo &lt;code&gt;auto&lt;/code&gt; , que calcular&amp;aacute; un factor de escala basado en el tama&amp;ntilde;o de p&amp;iacute;xel de la fuente.</target>
        </trans-unit>
        <trans-unit id="bffbf50340be5bd8849e7bdae58afca1242ae52f" translate="yes" xml:space="preserve">
          <source>Images inserted with the insertion functions above also get a local keymap installed in the text properties (or overlays) that span the displayed image. This keymap defines the following commands:</source>
          <target state="translated">Las imágenes insertadas con las funciones de inserción anteriores también obtienen un mapa de teclado local instalado en las propiedades de texto (o superposiciones)que abarcan la imagen mostrada.Este mapa de teclas define los siguientes comandos:</target>
        </trans-unit>
        <trans-unit id="2577d1937dba79f175ee8cc8dd563700f7a20a83" translate="yes" xml:space="preserve">
          <source>Images loaded with ImageMagick support the following additional image descriptor properties:</source>
          <target state="translated">Las imágenes cargadas con ImageMagick soportan las siguientes propiedades adicionales del descriptor de la imagen:</target>
        </trans-unit>
        <trans-unit id="ae0df5967aaeb367560d887978e6697e8445e507" translate="yes" xml:space="preserve">
          <source>Images, margins, text size, etc.</source>
          <target state="translated">Imágenes,márgenes,tamaño del texto,etc.</target>
        </trans-unit>
        <trans-unit id="582d79238d4c996206b1d9fcda2bd858616fc5e0" translate="yes" xml:space="preserve">
          <source>Imenu</source>
          <target state="translated">Imenu</target>
        </trans-unit>
        <trans-unit id="9b3ebff6f4733ad352d5af8ef98a92252e56d9f9" translate="yes" xml:space="preserve">
          <source>Implementing a link involves three separate steps: (1) indicating clickability when the mouse moves over the link; (2) making</source>
          <target state="translated">La puesta en práctica de un vínculo implica tres pasos separados:1)indicar la posibilidad de hacer clic cuando el ratón se mueve sobre el enlace;2)hacer</target>
        </trans-unit>
        <trans-unit id="ba709de5d7a6443728b0e7d903b67e7e463a3df8" translate="yes" xml:space="preserve">
          <source>Implied Frame Resizing</source>
          <target state="translated">Redimensionamiento implícito del marco</target>
        </trans-unit>
        <trans-unit id="6be920774eab706a9a6e9e109fe21af9fbbf76a5" translate="yes" xml:space="preserve">
          <source>Implied resizing of frames and how to prevent it.</source>
          <target state="translated">Implica el cambio de tamaño de los marcos y cómo prevenirlo.</target>
        </trans-unit>
        <trans-unit id="aef36502d67b0520654deb764dd055a7e905cfdd" translate="yes" xml:space="preserve">
          <source>In</source>
          <target state="translated">In</target>
        </trans-unit>
        <trans-unit id="8fe04c542be958393c3da42ee6384a7d0cac600e" translate="yes" xml:space="preserve">
          <source>In Adaptive Fill mode, this command calls &lt;code&gt;fill-context-prefix&lt;/code&gt; to choose a fill prefix by default. See &lt;a href=&quot;adaptive-fill#Adaptive-Fill&quot;&gt;Adaptive Fill&lt;/a&gt;.</source>
          <target state="translated">En el modo de relleno adaptable, este comando llama a &lt;code&gt;fill-context-prefix&lt;/code&gt; para elegir un prefijo de relleno por defecto. Consulte &lt;a href=&quot;adaptive-fill#Adaptive-Fill&quot;&gt;Relleno adaptable&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="45a0c5d90449be73929ea5cf30f6e7c34dd2845f" translate="yes" xml:space="preserve">
          <source>In C the corresponding code uses &lt;code&gt;Fmake_variable_buffer_local&lt;/code&gt; in combination with &lt;code&gt;DEFSYM&lt;/code&gt;, i.e.</source>
          <target state="translated">En C, el c&amp;oacute;digo correspondiente usa &lt;code&gt;Fmake_variable_buffer_local&lt;/code&gt; en combinaci&amp;oacute;n con &lt;code&gt;DEFSYM&lt;/code&gt; , es decir</target>
        </trans-unit>
        <trans-unit id="e18ad52ed484e26dd1d95b7bed4a6e310f733e51" translate="yes" xml:space="preserve">
          <source>In C, the tagged pointer is an object of type &lt;code&gt;Lisp_Object&lt;/code&gt;. Any initialized variable of such a type always holds the value of one of the following basic data types: integer, symbol, string, cons cell, float, or vectorlike object. Each of these data types has the corresponding tag value. All tags are enumerated by &lt;code&gt;enum Lisp_Type&lt;/code&gt; and placed into a 3-bit bitfield of the &lt;code&gt;Lisp_Object&lt;/code&gt;. The rest of the bits is the value itself. Integers are immediate, i.e., directly represented by those &lt;em&gt;value bits&lt;/em&gt;, and all other objects are represented by the C pointers to a corresponding object allocated from the heap. Width of the &lt;code&gt;Lisp_Object&lt;/code&gt; is platform- and configuration-dependent: usually it&amp;rsquo;s equal to the width of an underlying platform pointer (i.e., 32-bit on a 32-bit machine and 64-bit on a 64-bit one), but also there is a special configuration where &lt;code&gt;Lisp_Object&lt;/code&gt; is 64-bit but all pointers are 32-bit. The latter trick was designed to overcome the limited range of values for Lisp integers on a 32-bit system by using 64-bit &lt;code&gt;long long&lt;/code&gt; type for &lt;code&gt;Lisp_Object&lt;/code&gt;.</source>
          <target state="translated">En C, el puntero etiquetado es un objeto de tipo &lt;code&gt;Lisp_Object&lt;/code&gt; . Cualquier variable inicializada de este tipo siempre tiene el valor de uno de los siguientes tipos de datos b&amp;aacute;sicos: entero, s&amp;iacute;mbolo, cadena, celda de cons, flotante u objeto similar a un vector. Cada uno de estos tipos de datos tiene el valor de etiqueta correspondiente. Todas las etiquetas se enumeran mediante la &lt;code&gt;enum Lisp_Type&lt;/code&gt; y se colocan en un campo de bits de 3 bits del &lt;code&gt;Lisp_Object&lt;/code&gt; . El resto de los bits es el valor en s&amp;iacute;. Los enteros son inmediatos, es decir, directamente representados por esos &lt;em&gt;bits de valor&lt;/em&gt; , y todos los dem&amp;aacute;s objetos est&amp;aacute;n representados por los punteros C a un objeto correspondiente asignado desde el mont&amp;oacute;n. Ancho del &lt;code&gt;Lisp_Object&lt;/code&gt; depende de la plataforma y de la configuraci&amp;oacute;n: generalmente es igual al ancho de un puntero de plataforma subyacente (es decir, 32 bits en una m&amp;aacute;quina de 32 bits y 64 bits en una de 64 bits), pero tambi&amp;eacute;n hay una configuraci&amp;oacute;n especial donde &lt;code&gt;Lisp_Object&lt;/code&gt; es de 64 bits pero todos los punteros son de 32 bits. El &amp;uacute;ltimo truco fue dise&amp;ntilde;ado para superar el rango limitado de valores para los enteros Lisp en un sistema de 32 bits mediante el uso de &lt;code&gt;long long&lt;/code&gt; tipo largo de 64 bits para &lt;code&gt;Lisp_Object&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="74391ea991c057a25805bcc7f35913579f56dca9" translate="yes" xml:space="preserve">
          <source>In Emacs Lisp, &lt;code&gt;nil&lt;/code&gt; and &lt;code&gt;t&lt;/code&gt; are special symbols that always evaluate to themselves. This is so that you do not need to quote them to use them as constants in a program. An attempt to change their values results in a &lt;code&gt;setting-constant&lt;/code&gt; error. See &lt;a href=&quot;constant-variables#Constant-Variables&quot;&gt;Constant Variables&lt;/a&gt;.</source>
          <target state="translated">En Emacs Lisp, &lt;code&gt;nil&lt;/code&gt; y &lt;code&gt;t&lt;/code&gt; son s&amp;iacute;mbolos especiales que siempre se eval&amp;uacute;an a s&amp;iacute; mismos. Esto es para que no necesite citarlos para usarlos como constantes en un programa. Un intento de cambiar sus valores da como resultado un error de &lt;code&gt;setting-constant&lt;/code&gt; . Consulte &lt;a href=&quot;constant-variables#Constant-Variables&quot;&gt;Variables constantes&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="7ad4e15232bab0e5d73751f02a46989f735b0d79" translate="yes" xml:space="preserve">
          <source>In Emacs Lisp, an obarray is actually a vector. Each element of the vector is a bucket; its value is either an interned symbol whose name hashes to that bucket, or 0 if the bucket is empty. Each interned symbol has an internal link (invisible to the user) to the next symbol in the bucket. Because these links are invisible, there is no way to find all the symbols in an obarray except using &lt;code&gt;mapatoms&lt;/code&gt; (below). The order of symbols in a bucket is not significant.</source>
          <target state="translated">En Emacs Lisp, un obarray es en realidad un vector. Cada elemento del vector es un cubo; su valor es un s&amp;iacute;mbolo interno cuyo nombre se asigna a ese dep&amp;oacute;sito, o 0 si el dep&amp;oacute;sito est&amp;aacute; vac&amp;iacute;o. Cada s&amp;iacute;mbolo interno tiene un enlace interno (invisible para el usuario) al siguiente s&amp;iacute;mbolo en el cubo. Debido a que estos enlaces son invisibles, no hay forma de encontrar todos los s&amp;iacute;mbolos en un obarray excepto usando &lt;code&gt;mapatoms&lt;/code&gt; (abajo). El orden de los s&amp;iacute;mbolos en un cubo no es significativo.</target>
        </trans-unit>
        <trans-unit id="167a75f8cc60d70b238473b34e2d15e825f2b4a7" translate="yes" xml:space="preserve">
          <source>In Emacs Lisp, certain symbols normally evaluate to themselves. These include &lt;code&gt;nil&lt;/code&gt; and &lt;code&gt;t&lt;/code&gt;, as well as any symbol whose name starts with &amp;lsquo;</source>
          <target state="translated">En Emacs Lisp, ciertos s&amp;iacute;mbolos normalmente se eval&amp;uacute;an por s&amp;iacute; mismos. Estos incluyen &lt;code&gt;nil&lt;/code&gt; y &lt;code&gt;t&lt;/code&gt; , as&amp;iacute; como cualquier s&amp;iacute;mbolo cuyo nombre comience con '</target>
        </trans-unit>
        <trans-unit id="d3d82148ca2384cc8ee1ed3664e9a838b9558bde" translate="yes" xml:space="preserve">
          <source>In Emacs Lisp, fonts are represented using three different Lisp object types: &lt;em&gt;font objects&lt;/em&gt;, &lt;em&gt;font specs&lt;/em&gt;, and &lt;em&gt;font entities&lt;/em&gt;.</source>
          <target state="translated">En Emacs Lisp, las fuentes se representan utilizando tres tipos de objetos Lisp diferentes: &lt;em&gt;objetos de fuente&lt;/em&gt; , &lt;em&gt;una especificaci&amp;oacute;n de fuentes&lt;/em&gt; , y &lt;em&gt;las entidades de fuente&lt;/em&gt; .</target>
        </trans-unit>
        <trans-unit id="ce0c7667a4c5fb417ea75b3519174ba5e3b8596c" translate="yes" xml:space="preserve">
          <source>In Emacs Lisp, if two fixnums are numerically equal, they are the same Lisp object. That is, &lt;code&gt;eq&lt;/code&gt; is equivalent to &lt;code&gt;=&lt;/code&gt; on fixnums. It is sometimes convenient to use &lt;code&gt;eq&lt;/code&gt; for comparing an unknown value with a fixnum, because &lt;code&gt;eq&lt;/code&gt; does not report an error if the unknown value is not a number&amp;mdash;it accepts arguments of any type. By contrast, &lt;code&gt;=&lt;/code&gt; signals an error if the arguments are not numbers or markers. However, it is better programming practice to use &lt;code&gt;=&lt;/code&gt; if you can, even for comparing integers.</source>
          <target state="translated">En Emacs Lisp, si dos fixnums son num&amp;eacute;ricamente iguales, son el mismo objeto Lisp. Es decir, &lt;code&gt;eq&lt;/code&gt; es equivalente a &lt;code&gt;=&lt;/code&gt; en n&amp;uacute;meros fijos. A veces es conveniente utilizar &lt;code&gt;eq&lt;/code&gt; para comparar un valor desconocido con un fixnum, porque &lt;code&gt;eq&lt;/code&gt; no informa de un error si el valor desconocido no es un n&amp;uacute;mero; acepta argumentos de cualquier tipo. Por el contrario, &lt;code&gt;=&lt;/code&gt; indica un error si los argumentos no son n&amp;uacute;meros o marcadores. Sin embargo, es una mejor pr&amp;aacute;ctica de programaci&amp;oacute;n usar &lt;code&gt;=&lt;/code&gt; si puede, incluso para comparar enteros.</target>
        </trans-unit>
        <trans-unit id="056b909cc3695df5e93a61166399585cdef0425e" translate="yes" xml:space="preserve">
          <source>In Emacs Lisp, it is &lt;em&gt;not&lt;/em&gt; an error if an element of an association list is not a cons cell. The alist search functions simply ignore such elements. Many other versions of Lisp signal errors in such cases.</source>
          <target state="translated">En Emacs Lisp, es &lt;em&gt;no&lt;/em&gt; un error si un elemento de una lista de asociaci&amp;oacute;n no es una c&amp;eacute;lula contras. Las funciones de b&amp;uacute;squeda de una lista simplemente ignoran tales elementos. Muchas otras versiones de Lisp se&amp;ntilde;alan errores en tales casos.</target>
        </trans-unit>
        <trans-unit id="0ba583440567b18d5b81ae15d30046dcd5919135" translate="yes" xml:space="preserve">
          <source>In Emacs Lisp, such a list is a valid expression which evaluates to a function object.</source>
          <target state="translated">En Emacs Lisp,dicha lista es una expresión válida que evalúa a un objeto de función.</target>
        </trans-unit>
        <trans-unit id="79e9cb90d8f1ed44a5daae3726bf1118952bd6eb" translate="yes" xml:space="preserve">
          <source>In Emacs Lisp, text characters are represented by integers. Any integer between zero and the value of &lt;code&gt;(max-char)&lt;/code&gt;, inclusive, is considered to be valid as a character. See &lt;a href=&quot;character-codes#Character-Codes&quot;&gt;Character Codes&lt;/a&gt;.</source>
          <target state="translated">En Emacs Lisp, los caracteres de texto est&amp;aacute;n representados por n&amp;uacute;meros enteros. Cualquier entero entre cero y el valor de &lt;code&gt;(max-char)&lt;/code&gt; , inclusive, se considera v&amp;aacute;lido como car&amp;aacute;cter. Consulte &lt;a href=&quot;character-codes#Character-Codes&quot;&gt;C&amp;oacute;digos de caracteres&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="dc557095ff4ddb838d7231fc59eb5902f756d5f5" translate="yes" xml:space="preserve">
          <source>In Emacs Lisp, the symbol &lt;code&gt;nil&lt;/code&gt; has three separate meanings: it is a symbol with the name &amp;lsquo;</source>
          <target state="translated">En Emacs Lisp, el s&amp;iacute;mbolo &lt;code&gt;nil&lt;/code&gt; tiene tres significados separados: es un s&amp;iacute;mbolo con el nombre '</target>
        </trans-unit>
        <trans-unit id="4bdd0ad62ddb48a82f579e9d7b8435a64c33dc3b" translate="yes" xml:space="preserve">
          <source>In Emacs&amp;rsquo;s current implementation, each graphical terminal possesses an image cache, which is shared by all the frames on that terminal (see &lt;a href=&quot;multiple-terminals#Multiple-Terminals&quot;&gt;Multiple Terminals&lt;/a&gt;). Thus, refreshing an image in one frame also refreshes it in all other frames on the same terminal.</source>
          <target state="translated">En la implementaci&amp;oacute;n actual de Emacs, cada terminal gr&amp;aacute;fico posee un cach&amp;eacute; de im&amp;aacute;genes, que es compartido por todos los marcos en ese terminal (ver &lt;a href=&quot;multiple-terminals#Multiple-Terminals&quot;&gt;M&amp;uacute;ltiples terminales&lt;/a&gt; ). Por lo tanto, la actualizaci&amp;oacute;n de una imagen en un cuadro tambi&amp;eacute;n la actualiza en todos los dem&amp;aacute;s cuadros del mismo terminal.</target>
        </trans-unit>
        <trans-unit id="2cfd6914c188d4937ed552a12d7ad4fd0e04dbfb" translate="yes" xml:space="preserve">
          <source>In Emacs, each property has a name, which is a symbol, and a set of possible values, whose types depend on the property; if a character does not have a certain property, the value is &lt;code&gt;nil&lt;/code&gt;. As a general rule, the names of character properties in Emacs are produced from the corresponding Unicode properties by downcasing them and replacing each &amp;lsquo;</source>
          <target state="translated">En Emacs, cada propiedad tiene un nombre, que es un s&amp;iacute;mbolo, y un conjunto de valores posibles, cuyos tipos dependen de la propiedad; si un personaje no tiene una determinada propiedad, el valor es &lt;code&gt;nil&lt;/code&gt; . Como regla general, los nombres de las propiedades de los caracteres en Emacs se generan a partir de las propiedades Unicode correspondientes reduci&amp;eacute;ndolas y reemplazando cada '</target>
        </trans-unit>
        <trans-unit id="30d7d9e3884c83ac05ed06549fc0bda540ce471f" translate="yes" xml:space="preserve">
          <source>In Emacs, processing user input takes priority over redisplay. If you call these functions when input is available, they don&amp;rsquo;t redisplay immediately, but the requested redisplay does happen eventually&amp;mdash;after all the input has been processed.</source>
          <target state="translated">En Emacs, el procesamiento de la entrada del usuario tiene prioridad sobre la visualizaci&amp;oacute;n. Si llama a estas funciones cuando la entrada est&amp;aacute; disponible, no se vuelven a mostrar inmediatamente, pero la redistribuci&amp;oacute;n solicitada ocurre eventualmente, despu&amp;eacute;s de que se haya procesado toda la entrada.</target>
        </trans-unit>
        <trans-unit id="495b0af8742c1362f3b43e3c05d5f67cbd311b61" translate="yes" xml:space="preserve">
          <source>In GNU Emacs, you can search for the next match for a regular expression (see &lt;a href=&quot;syntax-of-regexps#Syntax-of-Regexps&quot;&gt;Syntax of Regexps&lt;/a&gt;) either incrementally or not. For incremental search commands, see &lt;a href=&quot;http://www.gnu.org/software/emacs/manual/html_node/emacs/Regexp-Search.html#Regexp-Search&quot;&gt;Regular Expression Search&lt;/a&gt; in</source>
          <target state="translated">En GNU Emacs, puede buscar la siguiente coincidencia para una expresi&amp;oacute;n regular (consulte &lt;a href=&quot;syntax-of-regexps#Syntax-of-Regexps&quot;&gt;Sintaxis de Regexps&lt;/a&gt; ) de forma incremental o no. Para los comandos de b&amp;uacute;squeda incremental, consulte &lt;a href=&quot;http://www.gnu.org/software/emacs/manual/html_node/emacs/Regexp-Search.html#Regexp-Search&quot;&gt;B&amp;uacute;squeda de expresiones regulares&lt;/a&gt; en</target>
        </trans-unit>
        <trans-unit id="bb6bf702e875e738b66a4d81962fcc97a8fc8a9b" translate="yes" xml:space="preserve">
          <source>In Lisp symbols sometimes need to be quoted, to achieve the same effect in C you again use the corresponding constant symbol &lt;code&gt;Qmy_lisp_variable&lt;/code&gt;. For example, when creating a buffer-local variable (see &lt;a href=&quot;buffer_002dlocal-variables#Buffer_002dLocal-Variables&quot;&gt;Buffer-Local Variables&lt;/a&gt;) in Lisp you would write:</source>
          <target state="translated">En Lisp, los s&amp;iacute;mbolos a veces necesitan ser entrecomillados, para lograr el mismo efecto en C, usa nuevamente el s&amp;iacute;mbolo constante correspondiente &lt;code&gt;Qmy_lisp_variable&lt;/code&gt; . Por ejemplo, al crear una variable local de b&amp;uacute;fer (consulte &lt;a href=&quot;buffer_002dlocal-variables#Buffer_002dLocal-Variables&quot;&gt;Variables locales de b&amp;uacute;fer&lt;/a&gt; ) en Lisp, escribir&amp;iacute;a:</target>
        </trans-unit>
        <trans-unit id="1a54f569b2a1104466db435e6a994296e8a10203" translate="yes" xml:space="preserve">
          <source>In POSIX, locales control which language to use in language-related features. These Emacs variables control how Emacs interacts with these features.</source>
          <target state="translated">En el POSIX,los locales controlan qué idioma usar en las características relacionadas con el idioma.Estas variables de Emacs controlan cómo interactúa Emacs con estas características.</target>
        </trans-unit>
        <trans-unit id="cb60a2c08b3d7d91de1154d61b87b4cbb7d768d9" translate="yes" xml:space="preserve">
          <source>In a Lisp program, if you want to look at the contents of a file but not alter it, the fastest way is to use &lt;code&gt;insert-file-contents&lt;/code&gt; in a temporary buffer. Visiting the file is not necessary and takes longer. See &lt;a href=&quot;reading-from-files#Reading-from-Files&quot;&gt;Reading from Files&lt;/a&gt;.</source>
          <target state="translated">En un programa Lisp, si desea ver el contenido de un archivo pero no alterarlo, la forma m&amp;aacute;s r&amp;aacute;pida es usar &lt;code&gt;insert-file-contents&lt;/code&gt; en un b&amp;uacute;fer temporal. Visitar el archivo no es necesario y lleva m&amp;aacute;s tiempo. Consulte &lt;a href=&quot;reading-from-files#Reading-from-Files&quot;&gt;Lectura de archivos&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="1edf8916db656c7d77716fc20e2c864d77eff0a1" translate="yes" xml:space="preserve">
          <source>In a backtrace you can specify a stack frame by moving point to a line describing that frame. The frame whose line point is on is considered the &lt;em&gt;current frame&lt;/em&gt;.</source>
          <target state="translated">En un backtrace, puede especificar un marco de pila moviendo el punto a una l&amp;iacute;nea que describe ese marco. El fotograma cuyo punto de l&amp;iacute;nea est&amp;aacute; activado se considera el &lt;em&gt;fotograma actual&lt;/em&gt; .</target>
        </trans-unit>
        <trans-unit id="d321617bc2957edda9f7299aaed744d6b62dfa9f" translate="yes" xml:space="preserve">
          <source>In a buffer, the buffer-local value of the variable &lt;code&gt;enable-multibyte-characters&lt;/code&gt; specifies the representation used. The representation for a string is determined and recorded in the string when the string is constructed.</source>
          <target state="translated">En un b&amp;uacute;fer, el valor local del b&amp;uacute;fer de la variable &lt;code&gt;enable-multibyte-characters&lt;/code&gt; especifica la representaci&amp;oacute;n utilizada. La representaci&amp;oacute;n de una cadena se determina y se registra en la cadena cuando se construye la cadena.</target>
        </trans-unit>
        <trans-unit id="d5b3c2f60eb9de03c344c19458f75ded0f988032" translate="yes" xml:space="preserve">
          <source>In a computer, an integer is represented as a binary number, a sequence of &lt;em&gt;bits&lt;/em&gt; (digits which are either zero or one). Conceptually the bit sequence is infinite on the left, with the most-significant bits being all zeros or all ones. A bitwise operation acts on the individual bits of such a sequence. For example, &lt;em&gt;shifting&lt;/em&gt; moves the whole sequence left or right one or more places, reproducing the same pattern moved over.</source>
          <target state="translated">En una computadora, un entero se representa como un n&amp;uacute;mero binario, una secuencia de &lt;em&gt;bits&lt;/em&gt; (d&amp;iacute;gitos que son cero o uno). Conceptualmente, la secuencia de bits es infinita a la izquierda, siendo los bits m&amp;aacute;s significativos todos ceros o todos unos. Una operaci&amp;oacute;n bit a bit act&amp;uacute;a sobre los bits individuales de dicha secuencia. Por ejemplo, el &lt;em&gt;desplazamiento&lt;/em&gt; mueve toda la secuencia hacia la izquierda o hacia la derecha uno o m&amp;aacute;s lugares, reproduciendo el mismo patr&amp;oacute;n desplazado.</target>
        </trans-unit>
        <trans-unit id="fb58dc1bd5b5a462384b2bd580dc601ea418376c" translate="yes" xml:space="preserve">
          <source>In a connection, the address in internal format of the remote peer.</source>
          <target state="translated">En una conexión,la dirección en formato interno del par remoto.</target>
        </trans-unit>
        <trans-unit id="937afbfd1c954fb42bb11db790d91eaf0406154d" translate="yes" xml:space="preserve">
          <source>In a customization of &lt;code&gt;display-buffer-alist&lt;/code&gt; it would be used as follows:</source>
          <target state="translated">En una personalizaci&amp;oacute;n de &lt;code&gt;display-buffer-alist&lt;/code&gt; se usar&amp;iacute;a de la siguiente manera:</target>
        </trans-unit>
        <trans-unit id="02df984c3529f76c9a4015001b01d209da05e6aa" translate="yes" xml:space="preserve">
          <source>In a function definition (a &lt;code&gt;lambda&lt;/code&gt; or &lt;code&gt;defun&lt;/code&gt; form), the documentation string is specified after the argument list, and is normally stored directly in the function object. See &lt;a href=&quot;function-documentation#Function-Documentation&quot;&gt;Function Documentation&lt;/a&gt;. You can also put function documentation in the &lt;code&gt;function-documentation&lt;/code&gt; property of a function name (see &lt;a href=&quot;accessing-documentation#Accessing-Documentation&quot;&gt;Accessing Documentation&lt;/a&gt;).</source>
          <target state="translated">En una definici&amp;oacute;n de funci&amp;oacute;n (una forma &lt;code&gt;lambda&lt;/code&gt; o &lt;code&gt;defun&lt;/code&gt; ), la cadena de documentaci&amp;oacute;n se especifica despu&amp;eacute;s de la lista de argumentos y normalmente se almacena directamente en el objeto de funci&amp;oacute;n. Consulte la &lt;a href=&quot;function-documentation#Function-Documentation&quot;&gt;documentaci&amp;oacute;n de funciones&lt;/a&gt; . Tambi&amp;eacute;n puede colocar la documentaci&amp;oacute;n de la &lt;code&gt;function-documentation&lt;/code&gt; en la propiedad de documentaci&amp;oacute;n de la funci&amp;oacute;n de un nombre de funci&amp;oacute;n (consulte &lt;a href=&quot;accessing-documentation#Accessing-Documentation&quot;&gt;Acceso a la documentaci&amp;oacute;n&lt;/a&gt; ).</target>
        </trans-unit>
        <trans-unit id="9eea6a2ed4dafd38340b45092920794b871b7be2" translate="yes" xml:space="preserve">
          <source>In a function description, the name of the function being described appears first. It is followed on the same line by a list of argument names. These names are also used in the body of the description, to stand for the values of the arguments.</source>
          <target state="translated">En la descripción de una función,el nombre de la función que se describe aparece en primer lugar.Va seguido en la misma línea por una lista de nombres de argumentos.Estos nombres también se utilizan en el cuerpo de la descripción,para representar los valores de los argumentos.</target>
        </trans-unit>
        <trans-unit id="f265fc98d3924e1abaf704d23613cfbac37962c6" translate="yes" xml:space="preserve">
          <source>In a general sense, a function is a rule for carrying out a computation given input values called &lt;em&gt;arguments&lt;/em&gt;. The result of the computation is called the &lt;em&gt;value&lt;/em&gt; or &lt;em&gt;return value&lt;/em&gt; of the function. The computation can also have side effects, such as lasting changes in the values of variables or the contents of data structures (see &lt;a href=&quot;intro-eval#Definition-of-side-effect&quot;&gt;Definition of side effect&lt;/a&gt;). A &lt;em&gt;pure function&lt;/em&gt; is a function which, in addition to having no side effects, always returns the same value for the same combination of arguments, regardless of external factors such as machine type or system state.</source>
          <target state="translated">En un sentido general, una funci&amp;oacute;n es una regla para realizar un c&amp;aacute;lculo dados los valores de entrada llamados &lt;em&gt;argumentos&lt;/em&gt; . El resultado del c&amp;aacute;lculo se denomina &lt;em&gt;valor&lt;/em&gt; o &lt;em&gt;valor&lt;/em&gt; de &lt;em&gt;retorno&lt;/em&gt; de la funci&amp;oacute;n. El c&amp;aacute;lculo tambi&amp;eacute;n puede tener efectos secundarios, como cambios duraderos en los valores de las variables o el contenido de las estructuras de datos (consulte &lt;a href=&quot;intro-eval#Definition-of-side-effect&quot;&gt;Definici&amp;oacute;n de efecto secundario&lt;/a&gt; ). Una &lt;em&gt;funci&amp;oacute;n pura&lt;/em&gt; es una funci&amp;oacute;n que, adem&amp;aacute;s de no tener efectos secundarios, siempre devuelve el mismo valor para la misma combinaci&amp;oacute;n de argumentos, independientemente de factores externos como el tipo de m&amp;aacute;quina o el estado del sistema.</target>
        </trans-unit>
        <trans-unit id="96c3f228f301c5161e3eb0673e109763dc8f02e1" translate="yes" xml:space="preserve">
          <source>In a major mode for editing some kind of structured text, such as a programming language, indentation of text according to structure is probably useful. So the mode should set &lt;code&gt;indent-line-function&lt;/code&gt; to a suitable function, and probably customize other variables for indentation. See &lt;a href=&quot;auto_002dindentation#Auto_002dIndentation&quot;&gt;Auto-Indentation&lt;/a&gt;.</source>
          <target state="translated">En un modo principal para editar alg&amp;uacute;n tipo de texto estructurado, como un lenguaje de programaci&amp;oacute;n, la sangr&amp;iacute;a del texto de acuerdo con la estructura probablemente sea &amp;uacute;til. Por lo tanto, el modo deber&amp;iacute;a establecer &lt;code&gt;indent-line-function&lt;/code&gt; en una funci&amp;oacute;n adecuada, y probablemente personalizar otras variables para la sangr&amp;iacute;a. Consulte &lt;a href=&quot;auto_002dindentation#Auto_002dIndentation&quot;&gt;Sangr&amp;iacute;a autom&amp;aacute;tica&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="1010cadba3e3eb9ca7bca39cbf0064b7fa6a1d87" translate="yes" xml:space="preserve">
          <source>In a package that can be preloaded, it is sometimes necessary (or useful) to delay certain evaluations until Emacs subsequently starts up. The vast majority of such cases relate to the values of customizable variables. For example, &lt;code&gt;tutorial-directory&lt;/code&gt; is a variable defined in</source>
          <target state="translated">En un paquete que se puede precargar, a veces es necesario (o &amp;uacute;til) retrasar ciertas evaluaciones hasta que Emacs se inicie posteriormente. La gran mayor&amp;iacute;a de estos casos se relacionan con los valores de variables personalizables. Por ejemplo, &lt;code&gt;tutorial-directory&lt;/code&gt; es una variable definida en</target>
        </trans-unit>
        <trans-unit id="0c9ab0563187085f470a4162ca64c920ef8f3780" translate="yes" xml:space="preserve">
          <source>In a server, if you specified &lt;code&gt;t&lt;/code&gt; for &lt;var&gt;service&lt;/var&gt;, this value is the actual port number.</source>
          <target state="translated">En un servidor, si especific&amp;oacute; &lt;code&gt;t&lt;/code&gt; para el &lt;var&gt;service&lt;/var&gt; , este valor es el n&amp;uacute;mero de puerto real.</target>
        </trans-unit>
        <trans-unit id="38330f228367727c246a23aacc922e71762f491b" translate="yes" xml:space="preserve">
          <source>In a string, the 2**7 bit attached to an</source>
          <target state="translated">En una cadena,el 2**7 bit unido a un</target>
        </trans-unit>
        <trans-unit id="cb764f5b1cd69acb27303028c22d0c8d6831d1ea" translate="yes" xml:space="preserve">
          <source>In a variable definition (a &lt;code&gt;defvar&lt;/code&gt; form), the documentation string is specified after the initial value. See &lt;a href=&quot;defining-variables#Defining-Variables&quot;&gt;Defining Variables&lt;/a&gt;. The string is stored in the variable&amp;rsquo;s &lt;code&gt;variable-documentation&lt;/code&gt; property.</source>
          <target state="translated">En una definici&amp;oacute;n de variable (una forma &lt;code&gt;defvar&lt;/code&gt; ), la cadena de documentaci&amp;oacute;n se especifica despu&amp;eacute;s del valor inicial. Consulte &lt;a href=&quot;defining-variables#Defining-Variables&quot;&gt;Definici&amp;oacute;n de variables&lt;/a&gt; . La cadena se almacena en la propiedad de &lt;code&gt;variable-documentation&lt;/code&gt; variable de la variable .</target>
        </trans-unit>
        <trans-unit id="529ec901908473f00f0f48571f9c0e29f851ad5f" translate="yes" xml:space="preserve">
          <source>In addition an optional &lt;var&gt;coding-system&lt;/var&gt; can be specified if needed.</source>
          <target state="translated">Adem&amp;aacute;s &lt;var&gt;coding-system&lt;/var&gt; se puede especificar un sistema de codificaci&amp;oacute;n opcional si es necesario.</target>
        </trans-unit>
        <trans-unit id="525f83380ee1265a6947c7040c2a3e7d21c25884" translate="yes" xml:space="preserve">
          <source>In addition to accessing and manipulating processes that are subprocesses of the current Emacs session, Emacs Lisp programs can also access other processes running on the same machine. We call these &lt;em&gt;system processes&lt;/em&gt;, to distinguish them from Emacs subprocesses.</source>
          <target state="translated">Adem&amp;aacute;s de acceder y manipular procesos que son subprocesos de la sesi&amp;oacute;n actual de Emacs, los programas Emacs Lisp tambi&amp;eacute;n pueden acceder a otros procesos que se ejecutan en la misma m&amp;aacute;quina. Llamamos a estos &lt;em&gt;procesos del sistema&lt;/em&gt; para distinguirlos de los subprocesos de Emacs.</target>
        </trans-unit>
        <trans-unit id="7bdb7f13163d532b7e614f0668a6458aa5f29adb" translate="yes" xml:space="preserve">
          <source>In addition to its parents, the error symbol has a &lt;var&gt;message&lt;/var&gt; which is a string to be printed when that error is signaled but not handled. If that message is not valid, the error message &amp;lsquo;</source>
          <target state="translated">Adem&amp;aacute;s de sus padres, el s&amp;iacute;mbolo de error tiene un &lt;var&gt;message&lt;/var&gt; que es una cadena que se imprimir&amp;aacute; cuando ese error se se&amp;ntilde;ale pero no se maneje. Si ese mensaje no es v&amp;aacute;lido, el mensaje de error '</target>
        </trans-unit>
        <trans-unit id="c353f4ffe1e4f69045cda4cc05340d97bd69840b" translate="yes" xml:space="preserve">
          <source>In addition to operating on files themselves, Emacs Lisp programs often need to operate on file names; i.e., to take them apart and to use part of a name to construct related file names. This section describes how to manipulate file names.</source>
          <target state="translated">Además de operar sobre los propios archivos,los programas Emacs Lisp a menudo necesitan operar sobre nombres de archivos;es decir,desarmarlos y utilizar parte de un nombre para construir nombres de archivos relacionados.En esta sección se describe cómo manipular los nombres de los archivos.</target>
        </trans-unit>
        <trans-unit id="387b3f59848f82250f4a8ce567df30121ef1d27b" translate="yes" xml:space="preserve">
          <source>In addition to processes that run programs, Lisp programs can open connections of several types to devices or processes running on the same machine or on other machines. The supported connection types are: TCP and UDP network connections, serial port connections, and pipe connections. Each such connection is also represented by a process object.</source>
          <target state="translated">Además de los procesos que ejecutan programas,los programas Lisp pueden abrir conexiones de varios tipos a dispositivos o procesos que se ejecutan en la misma máquina o en otras máquinas.Los tipos de conexión soportados son:Conexiones de red TCP y UDP,conexiones de puerto serie y conexiones de tuberías.Cada una de estas conexiones también está representada por un objeto de proceso.</target>
        </trans-unit>
        <trans-unit id="3c5b86e3b4354c4c1fa9c08ccbf5b49528a15320" translate="yes" xml:space="preserve">
          <source>In addition to specifying a single codepoint, &lt;var&gt;character&lt;/var&gt; may be a cons &lt;code&gt;(&lt;var&gt;from&lt;/var&gt; . &lt;var&gt;to&lt;/var&gt;)&lt;/code&gt;, where &lt;var&gt;from&lt;/var&gt; and &lt;var&gt;to&lt;/var&gt; are character codepoints. In that case, use &lt;var&gt;font-spec&lt;/var&gt; for all the characters in the range &lt;var&gt;from&lt;/var&gt; and &lt;var&gt;to&lt;/var&gt; (inclusive).</source>
          <target state="translated">Adem&amp;aacute;s de especificar un solo punto de c&amp;oacute;digo, el &lt;var&gt;character&lt;/var&gt; puede ser una desventaja &lt;code&gt;(&lt;var&gt;from&lt;/var&gt; . &lt;var&gt;to&lt;/var&gt;)&lt;/code&gt; , donde &lt;var&gt;from&lt;/var&gt; y &lt;var&gt;to&lt;/var&gt; son puntos de c&amp;oacute;digo de car&amp;aacute;cter. En ese caso, use &lt;var&gt;font-spec&lt;/var&gt; para todos los caracteres en el rango &lt;var&gt;from&lt;/var&gt; y &lt;var&gt;to&lt;/var&gt; (inclusive).</target>
        </trans-unit>
        <trans-unit id="41d3cfcccd9ef5616b8769d3619cf8d518b74e63" translate="yes" xml:space="preserve">
          <source>In addition to subprocesses of the current Emacs session, you can also access other processes running on your machine. See &lt;a href=&quot;system-processes#System-Processes&quot;&gt;System Processes&lt;/a&gt;.</source>
          <target state="translated">Adem&amp;aacute;s de los subprocesos de la sesi&amp;oacute;n actual de Emacs, tambi&amp;eacute;n puede acceder a otros procesos que se ejecutan en su m&amp;aacute;quina. Consulte &lt;a href=&quot;system-processes#System-Processes&quot;&gt;Procesos del sistema&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="a7064fdb6b5bca7cd74df3a9cfd9570247d7d390" translate="yes" xml:space="preserve">
          <source>In addition to the above, 24 additional compositions of &lt;code&gt;car&lt;/code&gt; and &lt;code&gt;cdr&lt;/code&gt; are defined as &lt;code&gt;c&lt;var&gt;xxx&lt;/var&gt;r&lt;/code&gt; and &lt;code&gt;c&lt;var&gt;xxxx&lt;/var&gt;r&lt;/code&gt;, where each &lt;code&gt;&lt;var&gt;x&lt;/var&gt;&lt;/code&gt; is either &lt;code&gt;a&lt;/code&gt; or &lt;code&gt;d&lt;/code&gt;. &lt;code&gt;cadr&lt;/code&gt;, &lt;code&gt;caddr&lt;/code&gt;, and &lt;code&gt;cadddr&lt;/code&gt; pick out the second, third or fourth elements of a list, respectively.</source>
          <target state="translated">Adem&amp;aacute;s de lo anterior, 24 composiciones adicionales de &lt;code&gt;car&lt;/code&gt; y &lt;code&gt;cdr&lt;/code&gt; se definen como &lt;code&gt;c&lt;var&gt;xxx&lt;/var&gt;r&lt;/code&gt; y &lt;code&gt;c&lt;var&gt;xxxx&lt;/var&gt;r&lt;/code&gt; , donde cada &lt;code&gt;&lt;var&gt;x&lt;/var&gt;&lt;/code&gt; es &lt;code&gt;a&lt;/code&gt; o &lt;code&gt;d&lt;/code&gt; . &lt;code&gt;cadr&lt;/code&gt; , &lt;code&gt;caddr&lt;/code&gt; y &lt;code&gt;cadddr&lt;/code&gt; seleccionan el segundo, tercer o cuarto elemento de una lista, respectivamente.</target>
        </trans-unit>
        <trans-unit id="5ea747ccb6525f229be3767e03769ebe3fd13bdb" translate="yes" xml:space="preserve">
          <source>In addition to the classes, entries for characters in a syntax table can specify flags. There are eight possible flags, represented by the characters &amp;lsquo;</source>
          <target state="translated">Adem&amp;aacute;s de las clases, las entradas para caracteres en una tabla de sintaxis pueden especificar banderas. Hay ocho banderas posibles, representadas por los caracteres</target>
        </trans-unit>
        <trans-unit id="fa8b8b78067e8a2d0074c7fc569ed6a4aef4b677" translate="yes" xml:space="preserve">
          <source>In addition to the common keywords (see &lt;a href=&quot;common-keywords#Common-Keywords&quot;&gt;Common Keywords&lt;/a&gt;), you can also use this keyword in &lt;code&gt;defgroup&lt;/code&gt;:</source>
          <target state="translated">Adem&amp;aacute;s de las palabras clave comunes (consulte &lt;a href=&quot;common-keywords#Common-Keywords&quot;&gt;Palabras clave comunes&lt;/a&gt; ), tambi&amp;eacute;n puede usar esta palabra clave en &lt;code&gt;defgroup&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="29283b097ca518b11209ca1cc5e62af08088092e" translate="yes" xml:space="preserve">
          <source>In addition to the fundamental buffer list just described, Emacs maintains a local buffer list for each frame, in which the buffers that have been displayed (or had their windows selected) in that frame come first. (This order is recorded in the frame&amp;rsquo;s &lt;code&gt;buffer-list&lt;/code&gt; frame parameter; see &lt;a href=&quot;buffer-parameters#Buffer-Parameters&quot;&gt;Buffer Parameters&lt;/a&gt;.) Buffers never displayed in that frame come afterward, ordered according to the fundamental buffer list.</source>
          <target state="translated">Adem&amp;aacute;s de la lista de b&amp;uacute;feres fundamental que se acaba de describir, Emacs mantiene una lista de b&amp;uacute;feres local para cada marco, en la que los b&amp;uacute;feres que se han mostrado (o ten&amp;iacute;an sus ventanas seleccionadas) en ese marco son lo primero. (Este orden se registra en el par&amp;aacute;metro de marco de &lt;code&gt;buffer-list&lt;/code&gt; de b&amp;uacute;fer del marco; consulte &lt;a href=&quot;buffer-parameters#Buffer-Parameters&quot;&gt;Par&amp;aacute;metros de b&amp;uacute;fer&lt;/a&gt; ). Los b&amp;uacute;feres que nunca se muestran en ese marco vienen despu&amp;eacute;s, ordenados de acuerdo con la lista de b&amp;uacute;fer fundamental.</target>
        </trans-unit>
        <trans-unit id="70589b40fe71188d55af613ff5caa55411dd7c27" translate="yes" xml:space="preserve">
          <source>In addition to the keywords listed in &lt;a href=&quot;common-keywords#Common-Keywords&quot;&gt;Common Keywords&lt;/a&gt;, this macro accepts the following keywords:</source>
          <target state="translated">Adem&amp;aacute;s de las palabras clave enumeradas en &lt;a href=&quot;common-keywords#Common-Keywords&quot;&gt;Palabras clave comunes&lt;/a&gt; , esta macro acepta las siguientes palabras clave:</target>
        </trans-unit>
        <trans-unit id="14751632f3fa92d651d6de24660d939a484e328f" translate="yes" xml:space="preserve">
          <source>In addition to the mark, each buffer has a &lt;em&gt;mark ring&lt;/em&gt; which is a list of markers containing previous values of the mark. When editing commands change the mark, they should normally save the old value of the mark on the mark ring. The variable &lt;code&gt;mark-ring-max&lt;/code&gt; specifies the maximum number of entries in the mark ring; once the list becomes this long, adding a new element deletes the last element.</source>
          <target state="translated">Adem&amp;aacute;s de la marca, cada b&amp;uacute;fer tiene un &lt;em&gt;anillo de marca&lt;/em&gt; que es una lista de marcadores que contienen valores anteriores de la marca. Cuando los comandos de edici&amp;oacute;n cambian la marca, normalmente deber&amp;iacute;an guardar el valor anterior de la marca en el anillo de marcas. La variable &lt;code&gt;mark-ring-max&lt;/code&gt; especifica el n&amp;uacute;mero m&amp;aacute;ximo de entradas en el anillo de marcas; una vez que la lista se vuelve tan larga, agregar un nuevo elemento elimina el &amp;uacute;ltimo elemento.</target>
        </trans-unit>
        <trans-unit id="c174d1d04f5ead445f6e0ecd4196859599f8b7e5" translate="yes" xml:space="preserve">
          <source>In addition to the specific escape sequences for special important control characters, Emacs provides several types of escape syntax that you can use to specify non-</source>
          <target state="translated">Además de las secuencias de escape específicas para personajes de control importantes especiales,Emacs proporciona varios tipos de sintaxis de escape que se pueden utilizar para especificar no</target>
        </trans-unit>
        <trans-unit id="806eb0827f5ad53c91dfa2917aa1276e03487d08" translate="yes" xml:space="preserve">
          <source>In addition to the stack, byte-code functions can use, bind, and set ordinary Lisp variables, by transferring values between variables and the stack.</source>
          <target state="translated">Además de la pila,las funciones de código de bytes pueden utilizar,enlazar y establecer variables Lisp ordinarias,transfiriendo valores entre las variables y la pila.</target>
        </trans-unit>
        <trans-unit id="e8fb33822f9f0ddadebc4c17ae82c36a969b63dc" translate="yes" xml:space="preserve">
          <source>In addition to the usual &lt;code&gt;rx&lt;/code&gt; syntax, &lt;var&gt;rx-expr&lt;/var&gt;&amp;hellip; can contain the following constructs:</source>
          <target state="translated">Adem&amp;aacute;s de la sintaxis de &lt;code&gt;rx&lt;/code&gt; habitual , &lt;var&gt;rx-expr&lt;/var&gt; ... puede contener las siguientes construcciones:</target>
        </trans-unit>
        <trans-unit id="861619441bdc3073f9cfaef71fbacdcaa751184b" translate="yes" xml:space="preserve">
          <source>In addition, Emacs defines the following common mathematical constants:</source>
          <target state="translated">Además,Emacs define las siguientes constantes matemáticas comunes:</target>
        </trans-unit>
        <trans-unit id="a618d5cb4304df670c9f4fb6aed2d8570eaa1d4d" translate="yes" xml:space="preserve">
          <source>In addition, a module can verify the compatibility of the module</source>
          <target state="translated">Además,un módulo puede verificar la compatibilidad del módulo</target>
        </trans-unit>
        <trans-unit id="6138054406fb00c76442b8e0e427c64e19964717" translate="yes" xml:space="preserve">
          <source>In addition, certain &lt;em&gt;magic&lt;/em&gt; file names are handled specially. For example, when a remote file name is specified, Emacs accesses the file over the network via an appropriate protocol. See &lt;a href=&quot;http://www.gnu.org/software/emacs/manual/html_node/emacs/Remote-Files.html#Remote-Files&quot;&gt;Remote Files&lt;/a&gt; in</source>
          <target state="translated">Adem&amp;aacute;s, ciertos nombres de archivos &lt;em&gt;m&amp;aacute;gicos&lt;/em&gt; se manejan de manera especial. Por ejemplo, cuando se especifica un nombre de archivo remoto, Emacs accede al archivo a trav&amp;eacute;s de la red mediante un protocolo apropiado. Ver &lt;a href=&quot;http://www.gnu.org/software/emacs/manual/html_node/emacs/Remote-Files.html#Remote-Files&quot;&gt;archivos remotos&lt;/a&gt; en</target>
        </trans-unit>
        <trans-unit id="e8a5c4503f8397d7e06f3cb0730d58989841f459" translate="yes" xml:space="preserve">
          <source>In addition, each window maintains a list of &lt;em&gt;next buffers&lt;/em&gt;, which is a list of buffers re-shown by &lt;code&gt;switch-to-prev-buffer&lt;/code&gt; (see below). This list is mainly used by &lt;code&gt;switch-to-prev-buffer&lt;/code&gt; and &lt;code&gt;switch-to-next-buffer&lt;/code&gt; for choosing buffers to switch to.</source>
          <target state="translated">Adem&amp;aacute;s, cada ventana mantiene una lista de los &lt;em&gt;b&amp;uacute;feres siguientes&lt;/em&gt; , que es una lista de b&amp;uacute;feres que se muestran de nuevo mediante &lt;code&gt;switch-to-prev-buffer&lt;/code&gt; (ver m&amp;aacute;s abajo). Esta lista es utilizada principalmente por &lt;code&gt;switch-to-prev-buffer&lt;/code&gt; y &lt;code&gt;switch-to-next-buffer&lt;/code&gt; para elegir los b&amp;uacute;feres a los que cambiar.</target>
        </trans-unit>
        <trans-unit id="40fe5e071e4d8814ba46d10ce4d3d2ba5eb89d1b" translate="yes" xml:space="preserve">
          <source>In addition, it doesn&amp;rsquo;t alter a line if &lt;var&gt;nochange-regexp&lt;/var&gt; matches at the beginning of the line (if &lt;var&gt;nochange-regexp&lt;/var&gt; is non-&lt;code&gt;nil&lt;/code&gt;).</source>
          <target state="translated">Adem&amp;aacute;s, no altera una l&amp;iacute;nea si &lt;var&gt;nochange-regexp&lt;/var&gt; coincide con el principio de la l&amp;iacute;nea (si &lt;var&gt;nochange-regexp&lt;/var&gt; no es &lt;code&gt;nil&lt;/code&gt; ).</target>
        </trans-unit>
        <trans-unit id="634b56dedb74cfcfcc2b4c23398c78b873b18883" translate="yes" xml:space="preserve">
          <source>In addition, modes for buffers of tabulated data can inherit from Tabulated List mode, which is in turn derived from Special mode. See &lt;a href=&quot;tabulated-list-mode#Tabulated-List-Mode&quot;&gt;Tabulated List Mode&lt;/a&gt;.</source>
          <target state="translated">Adem&amp;aacute;s, los modos para b&amp;uacute;feres de datos tabulados pueden heredar del modo Lista tabulada, que a su vez se deriva del modo Especial. Consulte &lt;a href=&quot;tabulated-list-mode#Tabulated-List-Mode&quot;&gt;Modo de lista tabulada&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="8458f97247e5805c182989af41d45c53eb115262" translate="yes" xml:space="preserve">
          <source>In addition, several major mode conventions (see &lt;a href=&quot;major-mode-conventions#Major-Mode-Conventions&quot;&gt;Major Mode Conventions&lt;/a&gt;) apply to minor modes as well: those regarding the names of global symbols, the use of a hook at the end of the initialization function, and the use of keymaps and other tables.</source>
          <target state="translated">Adem&amp;aacute;s, varias convenciones de modos principales (consulte &lt;a href=&quot;major-mode-conventions#Major-Mode-Conventions&quot;&gt;Convenciones de modos principales&lt;/a&gt; ) tambi&amp;eacute;n se aplican a modos menores: las relativas a los nombres de los s&amp;iacute;mbolos globales, el uso de un gancho al final de la funci&amp;oacute;n de inicializaci&amp;oacute;n y el uso de mapas de teclas y otras tablas.</target>
        </trans-unit>
        <trans-unit id="4e10e520f9a6c6683a99c59aceede71aae7f0066" translate="yes" xml:space="preserve">
          <source>In addition, the keyword argument &lt;code&gt;:supertype&lt;/code&gt; may be used to specify a button-type from which &lt;var&gt;name&lt;/var&gt; inherits its default property values. Note that this inheritance happens only when &lt;var&gt;name&lt;/var&gt; is defined; subsequent changes to a supertype are not reflected in its subtypes.</source>
          <target state="translated">Adem&amp;aacute;s, el argumento de palabra clave &lt;code&gt;:supertype&lt;/code&gt; se puede usar para especificar un tipo de bot&amp;oacute;n del cual el &lt;var&gt;name&lt;/var&gt; hereda sus valores de propiedad predeterminados. Tenga en cuenta que esta herencia ocurre solo cuando se define el &lt;var&gt;name&lt;/var&gt; ; los cambios posteriores a un supertipo no se reflejan en sus subtipos.</target>
        </trans-unit>
        <trans-unit id="85ff8817dbd0f29156e32c5107069061c8afdaa3" translate="yes" xml:space="preserve">
          <source>In addition, this function by default also tells the display engine to update the display of &lt;var&gt;window&lt;/var&gt; when its frame gets redisplayed the next time. If &lt;var&gt;norecord&lt;/var&gt; is non-&lt;code&gt;nil&lt;/code&gt;, such updates are usually not performed. If, however, &lt;var&gt;norecord&lt;/var&gt; equals the special symbol &lt;code&gt;mark-for-redisplay&lt;/code&gt;, the additional actions mentioned above are omitted but &lt;var&gt;window&lt;/var&gt; will be nevertheless updated.</source>
          <target state="translated">Adem&amp;aacute;s, esta funci&amp;oacute;n por defecto tambi&amp;eacute;n le dice al motor de visualizaci&amp;oacute;n que actualice la visualizaci&amp;oacute;n de la &lt;var&gt;window&lt;/var&gt; cuando su marco se vuelva a visualizar la pr&amp;oacute;xima vez. Si &lt;var&gt;norecord&lt;/var&gt; es no- &lt;code&gt;nil&lt;/code&gt; , dichas actualizaciones generalmente no se realizan. Sin embargo, si &lt;var&gt;norecord&lt;/var&gt; equivale al s&amp;iacute;mbolo especial &lt;code&gt;mark-for-redisplay&lt;/code&gt; volver a mostrar , las acciones adicionales mencionadas anteriormente se omiten, pero la &lt;var&gt;window&lt;/var&gt; se actualizar&amp;aacute; de todos modos.</target>
        </trans-unit>
        <trans-unit id="5bf884b3fb47f2ce4634851fb114d20b6bd6d338" translate="yes" xml:space="preserve">
          <source>In addition, to be acceptable, a completion must also match all the regular expressions in &lt;code&gt;completion-regexp-list&lt;/code&gt;. (Unless &lt;var&gt;collection&lt;/var&gt; is a function, in which case that function has to handle &lt;code&gt;completion-regexp-list&lt;/code&gt; itself.)</source>
          <target state="translated">Adem&amp;aacute;s, para ser aceptable, una finalizaci&amp;oacute;n tambi&amp;eacute;n debe coincidir con todas las expresiones regulares de la lista de expresiones regulares de &lt;code&gt;completion-regexp-list&lt;/code&gt; . (A menos que la &lt;var&gt;collection&lt;/var&gt; sea ​​una funci&amp;oacute;n, en cuyo caso esa funci&amp;oacute;n tiene que manejar la lista &lt;code&gt;completion-regexp-list&lt;/code&gt; ).</target>
        </trans-unit>
        <trans-unit id="7cc2fc189c0b1e344fb740a24d867c950e0a2e21" translate="yes" xml:space="preserve">
          <source>In addition, when several consecutive fields are wildcards, Emacs collapses them into a single wildcard. This is to prevent use of auto-scaled fonts. Fonts made by scaling larger fonts are not usable for editing, and scaling a smaller font is not useful because it is better to use the smaller font in its own size, which Emacs does.</source>
          <target state="translated">Además,cuando varios campos consecutivos son comodines,el Emacs los colapsa en un solo comodín.Esto es para evitar el uso de fuentes auto-escaladas.Las fuentes hechas por escalado de fuentes más grandes no son utilizables para la edición,y el escalado de una fuente más pequeña no es útil porque es mejor utilizar la fuente más pequeña en su propio tamaño,lo que Emacs hace.</target>
        </trans-unit>
        <trans-unit id="dcc0b00855e4755365a0cf1f09ff7bdbd4bc0266" translate="yes" xml:space="preserve">
          <source>In addition, you can mark a particular calling convention for a function as obsolete:</source>
          <target state="translated">Además,puedes marcar una convención de llamada particular para una función como obsoleta:</target>
        </trans-unit>
        <trans-unit id="abd2410956fae4848b0fe5a8e212d2a9cb21e007" translate="yes" xml:space="preserve">
          <source>In addition, you can specify how to override other aspects of &lt;var&gt;parent&lt;/var&gt; with &lt;var&gt;body&lt;/var&gt;. The command &lt;var&gt;variant&lt;/var&gt; evaluates the forms in &lt;var&gt;body&lt;/var&gt; after setting up all its usual overrides, just before running the mode hooks.</source>
          <target state="translated">Adem&amp;aacute;s, puede especificar c&amp;oacute;mo anular otros aspectos de &lt;var&gt;parent&lt;/var&gt; con &lt;var&gt;body&lt;/var&gt; . La &lt;var&gt;variant&lt;/var&gt; e de comando eval&amp;uacute;a los formularios en el &lt;var&gt;body&lt;/var&gt; despu&amp;eacute;s de configurar todas sus anulaciones habituales, justo antes de ejecutar los enlaces de modo.</target>
        </trans-unit>
        <trans-unit id="02d36c3daefb75afe381d792395f9b544a5ec4c1" translate="yes" xml:space="preserve">
          <source>In addition, you can use &lt;code&gt;jit-lock-register&lt;/code&gt; to register a Font Lock fontification function, which will be called whenever parts of a buffer are (re)fontified because a window was scrolled or its size changed. See &lt;a href=&quot;other-font-lock-variables#Other-Font-Lock-Variables&quot;&gt;Other Font Lock Variables&lt;/a&gt;.</source>
          <target state="translated">Adem&amp;aacute;s, puede utilizar &lt;code&gt;jit-lock-register&lt;/code&gt; para registrar una funci&amp;oacute;n de fontificaci&amp;oacute;n Font Lock, que se llamar&amp;aacute; siempre que se (re) fontifiquen partes de un b&amp;uacute;fer porque se desplaz&amp;oacute; una ventana o se modific&amp;oacute; su tama&amp;ntilde;o. Consulte &lt;a href=&quot;other-font-lock-variables#Other-Font-Lock-Variables&quot;&gt;Otras variables de bloqueo de fuentes&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="5705334ff8d1c82c84ad44b35b05007f2fa086a6" translate="yes" xml:space="preserve">
          <source>In addition, you should use the &lt;code&gt;:image&lt;/code&gt; property; this is how you specify the image to display in the tool bar:</source>
          <target state="translated">Adem&amp;aacute;s, debe utilizar la propiedad &lt;code&gt;:image&lt;/code&gt; ; as&amp;iacute; es como se especifica la imagen que se mostrar&amp;aacute; en la barra de herramientas:</target>
        </trans-unit>
        <trans-unit id="ef0d186686b9c18697ab294b6e70ae5ec8c76b45" translate="yes" xml:space="preserve">
          <source>In all cases, the functions specify the program to be run. An error is signaled if the file is not found or cannot be executed. If the file name is relative, the variable &lt;code&gt;exec-path&lt;/code&gt; contains a list of directories to search. Emacs initializes &lt;code&gt;exec-path&lt;/code&gt; when it starts up, based on the value of the environment variable &lt;code&gt;PATH&lt;/code&gt;. The standard file name constructs, &amp;lsquo;</source>
          <target state="translated">En todos los casos, las funciones especifican el programa a ejecutar. Se indica un error si el archivo no se encuentra o no se puede ejecutar. Si el nombre del archivo es relativo, la variable &lt;code&gt;exec-path&lt;/code&gt; contiene una lista de directorios para buscar. Emacs inicializa &lt;code&gt;exec-path&lt;/code&gt; cuando se inicia, bas&amp;aacute;ndose en el valor de la variable de entorno &lt;code&gt;PATH&lt;/code&gt; . Las construcciones de nombre de archivo est&amp;aacute;ndar, '</target>
        </trans-unit>
        <trans-unit id="b115e6222ce380955a9d138aca170aa8e2fc234f" translate="yes" xml:space="preserve">
          <source>In all of these functions, if &lt;var&gt;pos&lt;/var&gt; is omitted or &lt;code&gt;nil&lt;/code&gt;, the value of point is used by default. If narrowing is in effect, then &lt;var&gt;pos&lt;/var&gt; should fall within the accessible portion. See &lt;a href=&quot;narrowing#Narrowing&quot;&gt;Narrowing&lt;/a&gt;.</source>
          <target state="translated">En todas estas funciones, si &lt;var&gt;pos&lt;/var&gt; se omite o es &lt;code&gt;nil&lt;/code&gt; , el valor de punto se usa por defecto. Si el estrechamiento est&amp;aacute; en efecto, entonces &lt;var&gt;pos&lt;/var&gt; debe caer dentro de la parte accesible. Consulte &lt;a href=&quot;narrowing#Narrowing&quot;&gt;Estrechamiento&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="cf682436e64696838034960370c404ea0fb339cf" translate="yes" xml:space="preserve">
          <source>In all other cases (i.e., if a backup was made by copying or if no backup was made), this function returns &lt;code&gt;nil&lt;/code&gt;.</source>
          <target state="translated">En todos los dem&amp;aacute;s casos (es decir, si se realiz&amp;oacute; una copia de seguridad mediante una copia o si no se realiz&amp;oacute; una copia de seguridad), esta funci&amp;oacute;n devuelve &lt;code&gt;nil&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="70cd7827f4bb42c08e11727b0f1fc468af4e5623" translate="yes" xml:space="preserve">
          <source>In all other respects, the indirect buffer and its base buffer are completely separate. They have different names, independent values of point, independent narrowing, independent markers and overlays (though inserting or deleting text in either buffer relocates the markers and overlays for both), independent major modes, and independent buffer-local variable bindings.</source>
          <target state="translated">En todos los demás aspectos,el amortiguador indirecto y su amortiguador base están completamente separados.Tienen nombres diferentes,valores independientes de punto,estrechamientos independientes,marcadores y superposiciones independientes (aunque la inserción o eliminación de texto en cualquiera de los dos buffers reubica los marcadores y superposiciones para ambos),modos principales independientes y uniones independientes de variables buffer-local.</target>
        </trans-unit>
        <trans-unit id="e9323836e208f0f82945b28702f7866a57f8574f" translate="yes" xml:space="preserve">
          <source>In an empty obarray, every element is 0, so you can create an obarray with &lt;code&gt;(make-vector &lt;var&gt;length&lt;/var&gt; 0)&lt;/code&gt;. &lt;strong&gt;This is the only valid way to create an obarray.&lt;/strong&gt; Prime numbers as lengths tend to result in good hashing; lengths one less than a power of two are also good.</source>
          <target state="translated">En un obarray vac&amp;iacute;o, cada elemento es 0, por lo que puede crear un obarray con &lt;code&gt;(make-vector &lt;var&gt;length&lt;/var&gt; 0)&lt;/code&gt; . &lt;strong&gt;Esta es la &amp;uacute;nica forma v&amp;aacute;lida de crear un obarray. &lt;/strong&gt;Los n&amp;uacute;meros primos como longitudes tienden a dar como resultado un buen hash; longitudes de uno menos que una potencia de dos tambi&amp;eacute;n son buenas.</target>
        </trans-unit>
        <trans-unit id="c76083d7ada2b44cfdf97bab16a99c1032df0a60" translate="yes" xml:space="preserve">
          <source>In an indirect buffer, this points to the base buffer. In an ordinary buffer, it is null.</source>
          <target state="translated">En un amortiguador indirecto,esto apunta al amortiguador base.En un buffer ordinario,es nulo.</target>
        </trans-unit>
        <trans-unit id="be6a5b6e0ca7ae36339c26b567db393e85f17f36" translate="yes" xml:space="preserve">
          <source>In an interactive call, &lt;var&gt;buffer-or-name&lt;/var&gt; is the current buffer. You cannot specify any other buffer.</source>
          <target state="translated">En una llamada interactiva, &lt;var&gt;buffer-or-name&lt;/var&gt; es el b&amp;uacute;fer actual. No puede especificar ning&amp;uacute;n otro b&amp;uacute;fer.</target>
        </trans-unit>
        <trans-unit id="c4012945ab51c1de7ae7e0feebb4d0048885f32d" translate="yes" xml:space="preserve">
          <source>In an interactive call, &lt;var&gt;count&lt;/var&gt; is the numeric prefix argument, and &lt;var&gt;killp&lt;/var&gt; is the unprocessed prefix argument. Therefore, if a prefix argument is supplied, the text is saved in the kill ring. If no prefix argument is supplied, then one character is deleted, but not saved in the kill ring.</source>
          <target state="translated">En una llamada interactiva, &lt;var&gt;count&lt;/var&gt; es el argumento de prefijo num&amp;eacute;rico y &lt;var&gt;killp&lt;/var&gt; es el argumento de prefijo sin procesar. Por lo tanto, si se proporciona un argumento de prefijo, el texto se guarda en el kill ring. Si no se proporciona ning&amp;uacute;n argumento de prefijo, se elimina un car&amp;aacute;cter, pero no se guarda en el c&amp;iacute;rculo de la muerte.</target>
        </trans-unit>
        <trans-unit id="704c56b79c4ed2cb4dfd912f6f7d4ba1689e5220" translate="yes" xml:space="preserve">
          <source>In an interactive call, &lt;var&gt;count&lt;/var&gt; is the numeric prefix argument.</source>
          <target state="translated">En una llamada interactiva, &lt;var&gt;count&lt;/var&gt; es el argumento de prefijo num&amp;eacute;rico.</target>
        </trans-unit>
        <trans-unit id="9c353c383e13b0c1f20602b8bc3d920d9ce5a372" translate="yes" xml:space="preserve">
          <source>In an interactive call, &lt;var&gt;join-following-p&lt;/var&gt; is the prefix argument, and &lt;var&gt;beg&lt;/var&gt; and &lt;var&gt;end&lt;/var&gt; are, respectively, the start and end of the region if it is active, else &lt;code&gt;nil&lt;/code&gt;. The function returns &lt;code&gt;nil&lt;/code&gt;.</source>
          <target state="translated">En una llamada interactiva, &lt;var&gt;join-following-p&lt;/var&gt; es el argumento del prefijo, y &lt;var&gt;beg&lt;/var&gt; y &lt;var&gt;end&lt;/var&gt; son, respectivamente, el inicio y el final de la regi&amp;oacute;n si est&amp;aacute; activa, de lo contrario &lt;code&gt;nil&lt;/code&gt; . La funci&amp;oacute;n devuelve &lt;code&gt;nil&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="dd9c47e572e1c96e3e5511e4f902232b871741f5" translate="yes" xml:space="preserve">
          <source>In an interactive call, &lt;var&gt;move-count&lt;/var&gt; is set to the numeric prefix argument.</source>
          <target state="translated">En una llamada interactiva, &lt;var&gt;move-count&lt;/var&gt; se establece en el argumento de prefijo num&amp;eacute;rico.</target>
        </trans-unit>
        <trans-unit id="877a7452b2cb77873327a9d65a9bc81a3bc68b87" translate="yes" xml:space="preserve">
          <source>In an interactive call, &lt;var&gt;n&lt;/var&gt; is the numeric prefix argument, if provided; otherwise &lt;var&gt;n&lt;/var&gt; defaults to &lt;code&gt;nil&lt;/code&gt;.</source>
          <target state="translated">En una llamada interactiva, &lt;var&gt;n&lt;/var&gt; es el argumento de prefijo num&amp;eacute;rico, si se proporciona; de lo contrario, &lt;var&gt;n&lt;/var&gt; toma el valor predeterminado de &lt;code&gt;nil&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="d388d1baf8cc5dc2fc6fa147be58325965385ef6" translate="yes" xml:space="preserve">
          <source>In an interactive call, &lt;var&gt;start&lt;/var&gt; and &lt;var&gt;end&lt;/var&gt; are point and the mark, and &lt;var&gt;region&lt;/var&gt; is always non-&lt;code&gt;nil&lt;/code&gt;, so the command always kills the text in the current region.</source>
          <target state="translated">En una llamada interactiva, el &lt;var&gt;start&lt;/var&gt; y el &lt;var&gt;end&lt;/var&gt; son el punto y la marca, y la &lt;var&gt;region&lt;/var&gt; siempre es no &lt;code&gt;nil&lt;/code&gt; , por lo que el comando siempre elimina el texto de la regi&amp;oacute;n actual.</target>
        </trans-unit>
        <trans-unit id="a6cb6ba8c7fe3535c2d651a8267a7942776259f0" translate="yes" xml:space="preserve">
          <source>In an interactive call, &lt;var&gt;start&lt;/var&gt; and &lt;var&gt;end&lt;/var&gt; are point and the mark, and &lt;var&gt;region&lt;/var&gt; is always non-&lt;code&gt;nil&lt;/code&gt;, so the command always saves the text in the current region.</source>
          <target state="translated">En una llamada interactiva, el &lt;var&gt;start&lt;/var&gt; y el &lt;var&gt;end&lt;/var&gt; son el punto y la marca, y la &lt;var&gt;region&lt;/var&gt; siempre es no &lt;code&gt;nil&lt;/code&gt; , por lo que el comando siempre guarda el texto en la regi&amp;oacute;n actual.</target>
        </trans-unit>
        <trans-unit id="726b5ea42fc92cd6827c86a199c5d5ff92d13493" translate="yes" xml:space="preserve">
          <source>In an interactive call, &lt;var&gt;start&lt;/var&gt; and &lt;var&gt;end&lt;/var&gt; are set to the bounds of the current region (point and the mark, with the smallest first).</source>
          <target state="translated">En una llamada interactiva, el &lt;var&gt;start&lt;/var&gt; y el &lt;var&gt;end&lt;/var&gt; se establecen en los l&amp;iacute;mites de la regi&amp;oacute;n actual (el punto y la marca, con el m&amp;aacute;s peque&amp;ntilde;o primero).</target>
        </trans-unit>
        <trans-unit id="909035f0fed973896fe39afc8da0584d4b089bed" translate="yes" xml:space="preserve">
          <source>In an interactive call, BUFFER-OR-NAME is the current buffer. You cannot specify any other buffer. This function returns &lt;code&gt;nil&lt;/code&gt;.</source>
          <target state="translated">En una llamada interactiva, BUFFER-OR-NAME es el b&amp;uacute;fer actual. No puede especificar ning&amp;uacute;n otro b&amp;uacute;fer. Esta funci&amp;oacute;n devuelve &lt;code&gt;nil&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="b6eeae93f2da1e1eebbead60ee6180c03e34ee17" translate="yes" xml:space="preserve">
          <source>In any alternative for which &lt;code&gt;nil&lt;/code&gt; is not a valid value, other than a &lt;code&gt;const&lt;/code&gt;, you should specify a valid default for that alternative using the &lt;code&gt;:value&lt;/code&gt; keyword. See &lt;a href=&quot;type-keywords#Type-Keywords&quot;&gt;Type Keywords&lt;/a&gt;.</source>
          <target state="translated">En cualquier alternativa para la que &lt;code&gt;nil&lt;/code&gt; no es un valor v&amp;aacute;lido, que no sea una &lt;code&gt;const&lt;/code&gt; ante , debe especificar un valor predeterminado v&amp;aacute;lido para esa alternativa utilizando la palabra clave &lt;code&gt;:value&lt;/code&gt; . Consulte &lt;a href=&quot;type-keywords#Type-Keywords&quot;&gt;Tipo de palabras clave&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="c3f1ff89d869dfc333b47133aae85f8c337add69" translate="yes" xml:space="preserve">
          <source>In any construct except &amp;lsquo;</source>
          <target state="translated">En cualquier construcci&amp;oacute;n excepto '</target>
        </trans-unit>
        <trans-unit id="23f12bc9401d6ef353dd5c55264d43d354d02967" translate="yes" xml:space="preserve">
          <source>In backtraces, the tails of long lists and the ends of long strings, vectors or structures, as well as objects which are deeply nested, will be printed as underlined &amp;ldquo;...&amp;rdquo;. You can click with the mouse on a &amp;ldquo;...&amp;rdquo;, or type</source>
          <target state="translated">En las trazas inversas, las colas de listas largas y los extremos de cadenas largas, vectores o estructuras, as&amp;iacute; como los objetos que est&amp;aacute;n profundamente anidados, se imprimir&amp;aacute;n como &quot;...&quot; subrayado. Puede hacer clic con el mouse en un &quot;...&quot; o escribir</target>
        </trans-unit>
        <trans-unit id="c4a2e0b355083bd4e6d42b1e97e7d50e0326670d" translate="yes" xml:space="preserve">
          <source>In batch mode (see &lt;a href=&quot;batch-mode#Batch-Mode&quot;&gt;Batch Mode&lt;/a&gt;), &lt;code&gt;sit-for&lt;/code&gt; cannot be interrupted, even by input from the standard input descriptor. It is thus equivalent to &lt;code&gt;sleep-for&lt;/code&gt;, which is described below.</source>
          <target state="translated">En el modo por lotes (consulte &lt;a href=&quot;batch-mode#Batch-Mode&quot;&gt;Modo por lotes&lt;/a&gt; ), la &lt;code&gt;sit-for&lt;/code&gt; no se puede interrumpir, ni siquiera mediante la entrada del descriptor de entrada est&amp;aacute;ndar. Por tanto, es equivalente a &lt;code&gt;sleep-for&lt;/code&gt; , que se describe a continuaci&amp;oacute;n.</target>
        </trans-unit>
        <trans-unit id="9752b056c39ff21442a1ef5d86a1fc2649afb383" translate="yes" xml:space="preserve">
          <source>In batch mode, the message is printed to the standard error stream, followed by a newline.</source>
          <target state="translated">En el modo por lotes,el mensaje se imprime en el flujo de error estándar,seguido de una nueva línea.</target>
        </trans-unit>
        <trans-unit id="8f907e0c0c1a2381a3d4d498c2ada7dd4f978099" translate="yes" xml:space="preserve">
          <source>In between &lt;code&gt;deftheme&lt;/code&gt; and &lt;code&gt;provide-theme&lt;/code&gt; are Lisp forms specifying the theme settings: usually a call to &lt;code&gt;custom-theme-set-variables&lt;/code&gt; and/or a call to &lt;code&gt;custom-theme-set-faces&lt;/code&gt;.</source>
          <target state="translated">Entre &lt;code&gt;deftheme&lt;/code&gt; y &lt;code&gt;provide-theme&lt;/code&gt; se encuentran los formularios Lisp que especifican la configuraci&amp;oacute;n del tema: normalmente una llamada a &lt;code&gt;custom-theme-set-variables&lt;/code&gt; y / o una llamada a &lt;code&gt;custom-theme-set-faces&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="3186dd1c1a48267fc6d25c2e34e690dda868c78a" translate="yes" xml:space="preserve">
          <source>In binary, the decimal integer 5 looks like this:</source>
          <target state="translated">En binario,el entero decimal 5 se ve así:</target>
        </trans-unit>
        <trans-unit id="d7ecff436b6d92bbc3770178067cf6d70a3b3360" translate="yes" xml:space="preserve">
          <source>In bitfields, prefer &lt;code&gt;unsigned int&lt;/code&gt; or &lt;code&gt;signed int&lt;/code&gt; to &lt;code&gt;int&lt;/code&gt;, as &lt;code&gt;int&lt;/code&gt; is less portable: it might be signed, and might not be. Single-bit bit fields should be &lt;code&gt;unsigned int&lt;/code&gt; or &lt;code&gt;bool_bf&lt;/code&gt; so that their values are 0 or 1.</source>
          <target state="translated">En campos de bits, prefieren &lt;code&gt;unsigned int&lt;/code&gt; o &lt;code&gt;signed int&lt;/code&gt; a &lt;code&gt;int&lt;/code&gt; , como &lt;code&gt;int&lt;/code&gt; es menos port&amp;aacute;til: podr&amp;iacute;a ser firmado, y podr&amp;iacute;a no ser. Los campos de bits de un solo bit deben estar &lt;code&gt;unsigned int&lt;/code&gt; o &lt;code&gt;bool_bf&lt;/code&gt; para que sus valores sean 0 o 1.</target>
        </trans-unit>
        <trans-unit id="675393a13b41d56ffdbbbad71f7b6ec5ff7928e6" translate="yes" xml:space="preserve">
          <source>In case a process status changes need to be passed to several sentinels, you can use &lt;code&gt;add-function&lt;/code&gt; to combine an existing sentinel with a new one. See &lt;a href=&quot;advising-functions#Advising-Functions&quot;&gt;Advising Functions&lt;/a&gt;.</source>
          <target state="translated">En caso de que los cambios de estado de un proceso deban pasarse a varios centinelas, puede usar &lt;code&gt;add-function&lt;/code&gt; para combinar un centinela existente con uno nuevo. Consulte &lt;a href=&quot;advising-functions#Advising-Functions&quot;&gt;Funciones de asesoramiento&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="0977f1472f3a5da1475ae4011d1503a4798e4640" translate="yes" xml:space="preserve">
          <source>In case the process&amp;rsquo;s output needs to be passed to several filters, you can use &lt;code&gt;add-function&lt;/code&gt; to combine an existing filter with a new one. See &lt;a href=&quot;advising-functions#Advising-Functions&quot;&gt;Advising Functions&lt;/a&gt;.</source>
          <target state="translated">En caso de que la salida del proceso deba pasarse a varios filtros, puede usar &lt;code&gt;add-function&lt;/code&gt; para combinar un filtro existente con uno nuevo. Consulte &lt;a href=&quot;advising-functions#Advising-Functions&quot;&gt;Funciones de asesoramiento&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="415e1a1cd6e77875c4b4a2bc134b390be6d8c82b" translate="yes" xml:space="preserve">
          <source>In complicated programs, simple termination may not be what you want. For example, the program may have made temporary changes in data structures, or created temporary buffers that should be deleted before the program is finished. In such cases, you would use &lt;code&gt;unwind-protect&lt;/code&gt; to establish &lt;em&gt;cleanup expressions&lt;/em&gt; to be evaluated in case of error. (See &lt;a href=&quot;cleanups#Cleanups&quot;&gt;Cleanups&lt;/a&gt;.) Occasionally, you may wish the program to continue execution despite an error in a subroutine. In these cases, you would use &lt;code&gt;condition-case&lt;/code&gt; to establish &lt;em&gt;error handlers&lt;/em&gt; to recover control in case of error.</source>
          <target state="translated">En programas complicados, la terminaci&amp;oacute;n simple puede no ser lo que desea. Por ejemplo, el programa puede haber realizado cambios temporales en las estructuras de datos o creado b&amp;uacute;feres temporales que deben eliminarse antes de que finalice el programa. En tales casos, utilizar&amp;iacute;a un &lt;code&gt;unwind-protect&lt;/code&gt; para establecer &lt;em&gt;expresiones de limpieza&lt;/em&gt; que se evaluar&amp;aacute;n en caso de error. (Consulte &lt;a href=&quot;cleanups#Cleanups&quot;&gt;Limpieza&lt;/a&gt; .) Ocasionalmente, es posible que desee que el programa contin&amp;uacute;e ejecut&amp;aacute;ndose a pesar de un error en una subrutina. En estos casos, usar&amp;iacute;a &lt;code&gt;condition-case&lt;/code&gt; para establecer &lt;em&gt;manejadores de errores&lt;/em&gt; para recuperar el control en caso de error.</target>
        </trans-unit>
        <trans-unit id="60f0d105f0d0cf77e2c002371b610ecf30fd644e" translate="yes" xml:space="preserve">
          <source>In contexts where a truth value is expected, any non-&lt;code&gt;nil&lt;/code&gt; value is considered to be &lt;var&gt;true&lt;/var&gt;. However, &lt;code&gt;t&lt;/code&gt; is the preferred way to represent the truth value &lt;var&gt;true&lt;/var&gt;. When you need to choose a value that represents &lt;var&gt;true&lt;/var&gt;, and there is no other basis for choosing, use &lt;code&gt;t&lt;/code&gt;. The symbol &lt;code&gt;t&lt;/code&gt; always has the value &lt;code&gt;t&lt;/code&gt;.</source>
          <target state="translated">En contextos donde se espera un valor de verdad, cualquier valor que no sea &lt;code&gt;nil&lt;/code&gt; se considera &lt;var&gt;true&lt;/var&gt; . Sin embargo, &lt;code&gt;t&lt;/code&gt; es la forma preferida de representar el valor de verdad &lt;var&gt;true&lt;/var&gt; . Cuando necesite elegir un valor que represente &lt;var&gt;true&lt;/var&gt; y no haya otra base para elegir, use &lt;code&gt;t&lt;/code&gt; . El s&amp;iacute;mbolo &lt;code&gt;t&lt;/code&gt; siempre tiene el valor &lt;code&gt;t&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="8eba9b310f9d565eff25ab947d11a5a1f613377b" translate="yes" xml:space="preserve">
          <source>In contrast to the round-trip specification described in the previous subsection (see &lt;a href=&quot;format-conversion-round_002dtrip#Format-Conversion-Round_002dTrip&quot;&gt;Format Conversion Round-Trip&lt;/a&gt;), you can use the variables &lt;code&gt;after-insert-file-functions&lt;/code&gt; and &lt;code&gt;write-region-annotate-functions&lt;/code&gt; to separately control the respective reading and writing conversions.</source>
          <target state="translated">A diferencia de la especificaci&amp;oacute;n de ida y vuelta descrita en la subsecci&amp;oacute;n anterior (consulte &lt;a href=&quot;format-conversion-round_002dtrip#Format-Conversion-Round_002dTrip&quot;&gt;Conversi&amp;oacute;n de formato de ida y vuelta&lt;/a&gt; ), puede usar las variables &lt;code&gt;after-insert-file-functions&lt;/code&gt; y &lt;code&gt;write-region-annotate-functions&lt;/code&gt; para controlar por separado la lectura y escritura respectivas conversiones.</target>
        </trans-unit>
        <trans-unit id="0a3bf2d74aea58d6ea8bffb1137530a1210d0d12" translate="yes" xml:space="preserve">
          <source>In contrast, when reading, the annotations intermixed with the text are handled immediately. &lt;code&gt;insert-file-contents&lt;/code&gt; sets point to the beginning of some text to be converted, then calls the conversion functions with the length of that text. These functions should always return with point at the beginning of the inserted text. This approach makes sense for reading because annotations removed by the first converter can&amp;rsquo;t be mistakenly processed by a later converter. Each conversion function should scan for the annotations it recognizes, remove the annotation, modify the buffer text (to set a text property, for example), and return the updated length of the text, as it stands after those changes. The value returned by one function becomes the argument to the next function.</source>
          <target state="translated">Por el contrario, al leer, las anotaciones entremezcladas con el texto se manejan de inmediato. &lt;code&gt;insert-file-contents&lt;/code&gt; conjuntos de contenido de archivo de inserci&amp;oacute;n apuntan al comienzo de alg&amp;uacute;n texto que se va a convertir, luego llama a las funciones de conversi&amp;oacute;n con la longitud de ese texto. Estas funciones siempre deben regresar con un punto al principio del texto insertado. Este enfoque tiene sentido para la lectura porque las anotaciones eliminadas por el primer convertidor no pueden ser procesadas por error por un convertidor posterior. Cada funci&amp;oacute;n de conversi&amp;oacute;n debe buscar las anotaciones que reconoce, eliminar la anotaci&amp;oacute;n, modificar el texto del b&amp;uacute;fer (para establecer una propiedad de texto, por ejemplo) y devolver la longitud actualizada del texto, tal como est&amp;aacute; despu&amp;eacute;s de esos cambios. El valor devuelto por una funci&amp;oacute;n se convierte en el argumento de la siguiente funci&amp;oacute;n.</target>
        </trans-unit>
        <trans-unit id="45f849363c53b5551262a12f44a838fe59d9dfff" translate="yes" xml:space="preserve">
          <source>In conventional string syntax, it would be written</source>
          <target state="translated">En la sintaxis convencional de las cuerdas,se escribiría</target>
        </trans-unit>
        <trans-unit id="6763f8895253c23b2bfde0810fbb36d480f05759" translate="yes" xml:space="preserve">
          <source>In database terminology, an &lt;em&gt;atomic&lt;/em&gt; change is an indivisible change&amp;mdash;it can succeed entirely or it can fail entirely, but it cannot partly succeed. A Lisp program can make a series of changes to one or several buffers as an &lt;em&gt;atomic change group&lt;/em&gt;, meaning that either the entire series of changes will be installed in their buffers or, in case of an error, none of them will be.</source>
          <target state="translated">En terminolog&amp;iacute;a de bases de datos, un cambio &lt;em&gt;at&amp;oacute;mico&lt;/em&gt; es un cambio indivisible: puede tener &amp;eacute;xito por completo o puede fallar por completo, pero no puede tener &amp;eacute;xito en parte. Un programa Lisp puede realizar una serie de cambios en uno o varios b&amp;uacute;feres como un &lt;em&gt;grupo de cambio at&amp;oacute;mico&lt;/em&gt; , lo que significa que la serie completa de cambios se instalar&amp;aacute; en sus b&amp;uacute;feres o, en caso de error, ninguno de ellos lo estar&amp;aacute;.</target>
        </trans-unit>
        <trans-unit id="24fde5297de2cdf3f7cddc429425532a566bab63" translate="yes" xml:space="preserve">
          <source>In detail, &lt;code&gt;fill-context-prefix&lt;/code&gt; does this:</source>
          <target state="translated">En detalle, &lt;code&gt;fill-context-prefix&lt;/code&gt; hace esto:</target>
        </trans-unit>
        <trans-unit id="6c73b882a6269a46b3da224791afd0c995e3640a" translate="yes" xml:space="preserve">
          <source>In each frame, at any time, exactly one Emacs window is designated as &lt;em&gt;selected within the frame&lt;/em&gt;. For the selected frame, that window is called the &lt;em&gt;selected window&lt;/em&gt;&amp;mdash;the one in which most editing takes place, and in which the cursor for selected windows appears (see &lt;a href=&quot;cursor-parameters#Cursor-Parameters&quot;&gt;Cursor Parameters&lt;/a&gt;). Keyboard input that inserts or deletes text is also normally directed to this window. The selected window&amp;rsquo;s buffer is usually also the current buffer, except when &lt;code&gt;set-buffer&lt;/code&gt; has been used (see &lt;a href=&quot;current-buffer#Current-Buffer&quot;&gt;Current Buffer&lt;/a&gt;). As for non-selected frames, the window selected within the frame becomes the selected window if the frame is ever selected. See &lt;a href=&quot;selecting-windows#Selecting-Windows&quot;&gt;Selecting Windows&lt;/a&gt;.</source>
          <target state="translated">En cada marco, en cualquier momento, se designa exactamente una ventana de Emacs como &lt;em&gt;seleccionada dentro del marco&lt;/em&gt; . Para el marco seleccionado, esa ventana se denomina &lt;em&gt;ventana seleccionada&lt;/em&gt; , aquella en la que se realiza la mayor parte de la edici&amp;oacute;n y en la que aparece el cursor de las ventanas seleccionadas (consulte &lt;a href=&quot;cursor-parameters#Cursor-Parameters&quot;&gt;Par&amp;aacute;metros del cursor&lt;/a&gt; ). La entrada de teclado que inserta o elimina texto normalmente tambi&amp;eacute;n se dirige a esta ventana. El b&amp;uacute;fer de la ventana seleccionada suele ser tambi&amp;eacute;n el b&amp;uacute;fer actual, excepto cuando se ha utilizado &lt;code&gt;set-buffer&lt;/code&gt; (consulte &lt;a href=&quot;current-buffer#Current-Buffer&quot;&gt;B&amp;uacute;fer actual&lt;/a&gt; ). En cuanto a los marcos no seleccionados, la ventana seleccionada dentro del marco se convierte en la ventana seleccionada si el marco se selecciona alguna vez. Consulte &lt;a href=&quot;selecting-windows#Selecting-Windows&quot;&gt;Selecci&amp;oacute;n de Windows&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="ad35cfb21fd35d93c29df7f5ad4a4bed0b1b3107" translate="yes" xml:space="preserve">
          <source>In either case, evaluating the new form a second time should reuse the window already showing</source>
          <target state="translated">En cualquier caso,al evaluar la nueva forma por segunda vez se debe reutilizar la ventana que ya muestra</target>
        </trans-unit>
        <trans-unit id="ee27d0c4d0b49c83179819de6b9ff1ee23a49d86" translate="yes" xml:space="preserve">
          <source>In either case, if the buffer appended to happens to be displayed in some window, the next redisplay will show how its text has changed. If it is not displayed in any window, you will not see the change immediately on the screen. The command causes the buffer to become current temporarily, but does not cause it to be displayed.</source>
          <target state="translated">En cualquier caso,si la memoria intermedia anexa se muestra en alguna ventana,la siguiente muestra mostrará cómo ha cambiado su texto.Si no se muestra en ninguna ventana,no verá el cambio inmediatamente en la pantalla.El comando hace que el buffer se actualice temporalmente,pero no hace que se muestre.</target>
        </trans-unit>
        <trans-unit id="ef78bac5868bf004212c473e8f88981c10bea61b" translate="yes" xml:space="preserve">
          <source>In either case, the mouse pointer must enter the text area of a window in order to trigger its selection. Dragging the scroll bar slider or the mode line of a window conceptually should not cause its auto-selection.</source>
          <target state="translated">En cualquier caso,el puntero del ratón debe entrar en el área de texto de una ventana para activar su selección.Arrastrar el deslizador de la barra de desplazamiento o la línea de modo de una ventana conceptualmente no debería causar su auto-selección.</target>
        </trans-unit>
        <trans-unit id="bb020b581d31901fa99b6df9f62296593685946f" translate="yes" xml:space="preserve">
          <source>In execution, this is equivalent to &lt;code&gt;(progn &lt;var&gt;body&lt;/var&gt;...)&lt;/code&gt;, but the compiler does not issue warnings for anything that occurs inside &lt;var&gt;body&lt;/var&gt;.</source>
          <target state="translated">En ejecuci&amp;oacute;n, esto es equivalente a &lt;code&gt;(progn &lt;var&gt;body&lt;/var&gt;...)&lt;/code&gt; , pero el compilador no emite advertencias por nada de lo que ocurre dentro de &lt;var&gt;body&lt;/var&gt; .</target>
        </trans-unit>
        <trans-unit id="b9f9f3178064d3634e45314cc92aa2cf96eef93d" translate="yes" xml:space="preserve">
          <source>In execution, this is equivalent to &lt;code&gt;(progn &lt;var&gt;body&lt;/var&gt;...)&lt;/code&gt;, but the compiler does not issue warnings for the specified conditions in &lt;var&gt;body&lt;/var&gt;. &lt;var&gt;warnings&lt;/var&gt; is an associative list of warning symbols and function/variable symbols they apply to. For instance, if you wish to call an obsolete function called &lt;code&gt;foo&lt;/code&gt;, but want to suppress the compilation warning, say:</source>
          <target state="translated">En ejecuci&amp;oacute;n, esto es equivalente a &lt;code&gt;(progn &lt;var&gt;body&lt;/var&gt;...)&lt;/code&gt; , pero el compilador no emite advertencias para las condiciones especificadas en &lt;var&gt;body&lt;/var&gt; . &lt;var&gt;warnings&lt;/var&gt; es una lista asociativa de s&amp;iacute;mbolos de advertencia y s&amp;iacute;mbolos de funci&amp;oacute;n / variable a los que se aplican. Por ejemplo, si desea llamar a una funci&amp;oacute;n obsoleta llamada &lt;code&gt;foo&lt;/code&gt; , pero desea suprimir la advertencia de compilaci&amp;oacute;n, diga:</target>
        </trans-unit>
        <trans-unit id="e7a73c00dd55be6828ec1b5b1eeb3d24e621b2d1" translate="yes" xml:space="preserve">
          <source>In fact, &lt;code&gt;shell-mode&lt;/code&gt; is used only in a function that executes &lt;code&gt;(require 'shell)&lt;/code&gt; before calling &lt;code&gt;shell-mode&lt;/code&gt;, so &lt;code&gt;shell-mode&lt;/code&gt; will be defined properly at run-time. When you know that such a warning does not indicate a real problem, it is good to suppress the warning. That makes new warnings which might mean real problems more visible. You do that with &lt;code&gt;declare-function&lt;/code&gt;.</source>
          <target state="translated">De hecho, &lt;code&gt;shell-mode&lt;/code&gt; se usa solo en una funci&amp;oacute;n que se ejecuta &lt;code&gt;(require 'shell)&lt;/code&gt; antes de llamar &lt;code&gt;shell-mode&lt;/code&gt; &lt;code&gt;shell-mode&lt;/code&gt; , por lo que el modo shell se definir&amp;aacute; correctamente en tiempo de ejecuci&amp;oacute;n. Cuando sepa que tal advertencia no indica un problema real, es bueno suprimir la advertencia. Eso hace que las nuevas advertencias que podr&amp;iacute;an significar problemas reales sean m&amp;aacute;s visibles. Lo haces con &lt;code&gt;declare-function&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="702499afeb8537fae4516a820a217b87dce96b8a" translate="yes" xml:space="preserve">
          <source>In general, a coding system doesn&amp;rsquo;t guarantee roundtrip identity: decoding a byte sequence using a coding system, then encoding the resulting text in the same coding system, can produce a different byte sequence. But some coding systems do guarantee that the byte sequence will be the same as what you originally decoded. Here are a few examples:</source>
          <target state="translated">En general, un sistema de codificaci&amp;oacute;n no garantiza la identidad de ida y vuelta: decodificar una secuencia de bytes utilizando un sistema de codificaci&amp;oacute;n y luego codificar el texto resultante en el mismo sistema de codificaci&amp;oacute;n puede producir una secuencia de bytes diferente. Pero algunos sistemas de codificaci&amp;oacute;n garantizan que la secuencia de bytes ser&amp;aacute; la misma que decodific&amp;oacute; originalmente. Aqu&amp;iacute; est&amp;aacute;n algunos ejemplos:</target>
        </trans-unit>
        <trans-unit id="ed8140bd46b47c404332052d91ca4300f382ef67" translate="yes" xml:space="preserve">
          <source>In general, a customization type is a list whose first element is a symbol, one of the customization type names defined in the following sections. After this symbol come a number of arguments, depending on the symbol. Between the type symbol and its arguments, you can optionally write keyword-value pairs (see &lt;a href=&quot;type-keywords#Type-Keywords&quot;&gt;Type Keywords&lt;/a&gt;).</source>
          <target state="translated">En general, un tipo de personalizaci&amp;oacute;n es una lista cuyo primer elemento es un s&amp;iacute;mbolo, uno de los nombres de tipo de personalizaci&amp;oacute;n definidos en las siguientes secciones. Despu&amp;eacute;s de este s&amp;iacute;mbolo vienen varios argumentos, dependiendo del s&amp;iacute;mbolo. Entre el s&amp;iacute;mbolo de tipo y sus argumentos, puede escribir opcionalmente pares de palabras clave-valor (consulte &lt;a href=&quot;type-keywords#Type-Keywords&quot;&gt;Palabras clave de tipo&lt;/a&gt; ).</target>
        </trans-unit>
        <trans-unit id="1b2ad17401a7d60fe385624a77f3d12df552ad7a" translate="yes" xml:space="preserve">
          <source>In general, any version of Emacs can run byte-compiled code produced by recent earlier versions of Emacs, but the reverse is not true.</source>
          <target state="translated">En general,cualquier versión de Emacs puede ejecutar código compilado en bytes producido por versiones anteriores recientes de Emacs,pero lo contrario no es cierto.</target>
        </trans-unit>
        <trans-unit id="483c66ee5a6826168e53ee4c3c9f71f1f0eb14bb" translate="yes" xml:space="preserve">
          <source>In general, it is not a good idea to position a frame relative to the right or bottom edge of its display. Positioning the initial or a new frame is either not accurate (because the size of the outer frame is not yet fully known before the frame has been made visible) or will cause additional flicker (if the frame has to be repositioned after becoming visible).</source>
          <target state="translated">En general,no es una buena idea posicionar un cuadro en relación con el borde derecho o inferior de su pantalla.Posicionar el marco inicial o uno nuevo no es exacto (porque el tamaño del marco exterior todavía no se conoce completamente antes de que el marco se haya hecho visible)o causará un parpadeo adicional (si el marco tiene que ser reposicionado después de hacerse visible).</target>
        </trans-unit>
        <trans-unit id="034a86c69916fca88f1f01a8bd4d6e2f2b480dfb" translate="yes" xml:space="preserve">
          <source>In general, the execution modes earlier in the above list run the program more slowly or stop sooner than the modes later in the list.</source>
          <target state="translated">En general,los modos de ejecución anteriores de la lista anterior ejecutan el programa más lentamente o se detienen antes que los modos posteriores de la lista.</target>
        </trans-unit>
        <trans-unit id="62c782f036549cb7ac5bcdfa7098ab39e8230d14" translate="yes" xml:space="preserve">
          <source>In general, you should never use &lt;code&gt;select-frame&lt;/code&gt; in a way that could switch to a different terminal without switching back when you&amp;rsquo;re done.</source>
          <target state="translated">En general, nunca debe usar &lt;code&gt;select-frame&lt;/code&gt; de una manera que pueda cambiar a un terminal diferente sin volver a cambiar cuando haya terminado.</target>
        </trans-unit>
        <trans-unit id="000defc205f6d714529fe32278af5b38a4bfd5bc" translate="yes" xml:space="preserve">
          <source>In hexadecimal and octal escape sequences, the escaped character code may contain a variable number of digits, so the first subsequent character which is not a valid hexadecimal or octal digit terminates the escape sequence. If the next character in a string could be interpreted as a hexadecimal or octal digit, write &amp;lsquo;</source>
          <target state="translated">En las secuencias de escape hexadecimal y octal, el c&amp;oacute;digo de car&amp;aacute;cter de escape puede contener un n&amp;uacute;mero variable de d&amp;iacute;gitos, por lo que el primer car&amp;aacute;cter subsiguiente que no sea un d&amp;iacute;gito hexadecimal u octal v&amp;aacute;lido termina la secuencia de escape. Si el siguiente car&amp;aacute;cter de una cadena se puede interpretar como un d&amp;iacute;gito hexadecimal u octal, escriba '</target>
        </trans-unit>
        <trans-unit id="0836c04769a43db17a7b5ef05b200c3203b6be46" translate="yes" xml:space="preserve">
          <source>In human languages, and in C code, the parenthesis pairs are &amp;lsquo;</source>
          <target state="translated">En los lenguajes humanos y en el c&amp;oacute;digo C, los pares de par&amp;eacute;ntesis son '</target>
        </trans-unit>
        <trans-unit id="c6f32a0eb2283df62480c957c724fa4fc47bd02c" translate="yes" xml:space="preserve">
          <source>In its most simplistic form, a frame accommodates always one single window that can be used for displaying a buffer. As a consequence, it is always the latest call of &lt;code&gt;display-buffer&lt;/code&gt; that will have succeeded in placing its buffer there.</source>
          <target state="translated">En su forma m&amp;aacute;s simplista, un marco tiene siempre una sola ventana que se puede utilizar para mostrar un b&amp;uacute;fer. Como consecuencia, siempre es la &amp;uacute;ltima llamada de &lt;code&gt;display-buffer&lt;/code&gt; la que habr&amp;aacute; logrado colocar su b&amp;uacute;fer all&amp;iacute;.</target>
        </trans-unit>
        <trans-unit id="517dd96030f3f996fb1f45cc621a39517562983b" translate="yes" xml:space="preserve">
          <source>In many</source>
          <target state="translated">En muchos</target>
        </trans-unit>
        <trans-unit id="8dcd7ed16971de04e98f26c126a4533e71094f7f" translate="yes" xml:space="preserve">
          <source>In many cases, you can avoid the need to track the mouse by using the &lt;code&gt;mouse-face&lt;/code&gt; text property (see &lt;a href=&quot;special-properties#Special-Properties&quot;&gt;Special Properties&lt;/a&gt;). That works at a much lower level and runs more smoothly than Lisp-level mouse tracking.</source>
          <target state="translated">En muchos casos, puede evitar la necesidad de realizar un seguimiento del mouse mediante el uso de la propiedad de texto de la &lt;code&gt;mouse-face&lt;/code&gt; del mouse (consulte &lt;a href=&quot;special-properties#Special-Properties&quot;&gt;Propiedades especiales&lt;/a&gt; ). Eso funciona a un nivel mucho m&amp;aacute;s bajo y se ejecuta de manera m&amp;aacute;s fluida que el seguimiento del mouse a nivel Lisp.</target>
        </trans-unit>
        <trans-unit id="49101488ffc937e3b7893c385b89b2d974310c1a" translate="yes" xml:space="preserve">
          <source>In most Emacs Lisp programs, the fact that non-</source>
          <target state="translated">En la mayoría de los programas Emacs Lisp,el hecho de que no</target>
        </trans-unit>
        <trans-unit id="3d37db503d5ae63228a732b670e52af7077b5d2f" translate="yes" xml:space="preserve">
          <source>In most cases, &lt;var&gt;repeat&lt;/var&gt; has no effect on when &lt;em&gt;first&lt;/em&gt; call takes place&amp;mdash;&lt;var&gt;time&lt;/var&gt; alone specifies that. There is one exception: if &lt;var&gt;time&lt;/var&gt; is &lt;code&gt;t&lt;/code&gt;, then the timer runs whenever the time is a multiple of &lt;var&gt;repeat&lt;/var&gt; seconds after the epoch. This is useful for functions like &lt;code&gt;display-time&lt;/code&gt;.</source>
          <target state="translated">En la mayor&amp;iacute;a de los casos, la &lt;var&gt;repeat&lt;/var&gt; no tiene ning&amp;uacute;n efecto sobre cu&amp;aacute;ndo se realiza la &lt;em&gt;primera&lt;/em&gt; llamada; solo el &lt;var&gt;time&lt;/var&gt; especifica. Hay una excepci&amp;oacute;n: si el &lt;var&gt;time&lt;/var&gt; es &lt;code&gt;t&lt;/code&gt; , entonces el temporizador se ejecuta siempre que el tiempo sea un m&amp;uacute;ltiplo de los segundos &lt;var&gt;repeat&lt;/var&gt; despu&amp;eacute;s de la &amp;eacute;poca. Esto es &amp;uacute;til para funciones como &lt;code&gt;display-time&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="2168d3ba9383968f4154392a9504604af5704a81" translate="yes" xml:space="preserve">
          <source>In most cases, an object&amp;rsquo;s printed representation is also a read syntax for the object. However, some types have no read syntax, since it does not make sense to enter objects of these types as constants in a Lisp program. These objects are printed in &lt;em&gt;hash notation&lt;/em&gt;, which consists of the characters &amp;lsquo;</source>
          <target state="translated">En la mayor&amp;iacute;a de los casos, la representaci&amp;oacute;n impresa de un objeto tambi&amp;eacute;n es una sintaxis de lectura para el objeto. Sin embargo, algunos tipos no tienen sintaxis de lectura, ya que no tiene sentido ingresar objetos de estos tipos como constantes en un programa Lisp. Estos objetos se imprimen en &lt;em&gt;notaci&amp;oacute;n hash&lt;/em&gt; , que consta de los caracteres '</target>
        </trans-unit>
        <trans-unit id="c750c78aabaa316f26f23fc17657b3720fc57df7" translate="yes" xml:space="preserve">
          <source>In most cases, this is the same as &lt;code&gt;data-directory&lt;/code&gt;. They may be different when you run Emacs from the directory where you built it, without actually installing it. See &lt;a href=&quot;help-functions#Definition-of-data_002ddirectory&quot;&gt;Definition of data-directory&lt;/a&gt;.</source>
          <target state="translated">En la mayor&amp;iacute;a de los casos, es lo mismo que &lt;code&gt;data-directory&lt;/code&gt; . Pueden ser diferentes cuando ejecuta Emacs desde el directorio donde lo construy&amp;oacute;, sin instalarlo realmente. Consulte &lt;a href=&quot;help-functions#Definition-of-data_002ddirectory&quot;&gt;Definici&amp;oacute;n de directorio de datos&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="7f11478c160dcd0584465efccbf9e4064e017f8a" translate="yes" xml:space="preserve">
          <source>In most cases, you should not call minibuffer input functions in the middle of a Lisp function. Instead, do all minibuffer input as part of reading the arguments for a command, in the &lt;code&gt;interactive&lt;/code&gt; specification. See &lt;a href=&quot;defining-commands#Defining-Commands&quot;&gt;Defining Commands&lt;/a&gt;.</source>
          <target state="translated">En la mayor&amp;iacute;a de los casos, no deber&amp;iacute;a llamar a las funciones de entrada del minib&amp;uacute;fer en medio de una funci&amp;oacute;n Lisp. En su lugar, realice todas las entradas del minib&amp;uacute;fer como parte de la lectura de los argumentos de un comando, en la especificaci&amp;oacute;n &lt;code&gt;interactive&lt;/code&gt; . Consulte &lt;a href=&quot;defining-commands#Defining-Commands&quot;&gt;Definici&amp;oacute;n de comandos&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="b4c2bc2c76de37d53e0710c100619151cccb7b2e" translate="yes" xml:space="preserve">
          <source>In most cases, you should not call these functions in the middle of a Lisp function. When possible, do all minibuffer input as part of reading the arguments for a command, in the &lt;code&gt;interactive&lt;/code&gt; specification. See &lt;a href=&quot;defining-commands#Defining-Commands&quot;&gt;Defining Commands&lt;/a&gt;.</source>
          <target state="translated">En la mayor&amp;iacute;a de los casos, no deber&amp;iacute;a llamar a estas funciones en medio de una funci&amp;oacute;n Lisp. Cuando sea posible, realice todas las entradas del minib&amp;uacute;fer como parte de la lectura de los argumentos de un comando, en la especificaci&amp;oacute;n &lt;code&gt;interactive&lt;/code&gt; . Consulte &lt;a href=&quot;defining-commands#Defining-Commands&quot;&gt;Definici&amp;oacute;n de comandos&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="2d28787cdfc551ad73cc6007bcd96f89f863e52c" translate="yes" xml:space="preserve">
          <source>In most cases, you should not need to call &lt;code&gt;package-activate-all&lt;/code&gt;, as this is done automatically during startup. Simply make sure to put any code that should run before &lt;code&gt;package-activate-all&lt;/code&gt; in the early init file, and any code that should run after it in the primary init file (see &lt;a href=&quot;http://www.gnu.org/software/emacs/manual/html_node/emacs/Init-File.html#Init-File&quot;&gt;Init File&lt;/a&gt; in</source>
          <target state="translated">En la mayor&amp;iacute;a de los casos, no deber&amp;iacute;a necesitar llamar a &lt;code&gt;package-activate-all&lt;/code&gt; , ya que esto se hace autom&amp;aacute;ticamente durante el inicio. Simplemente aseg&amp;uacute;rese de poner cualquier c&amp;oacute;digo que deba ejecutarse antes de &lt;code&gt;package-activate-all&lt;/code&gt; en el archivo de inicio inicial, y cualquier c&amp;oacute;digo que deba ejecutarse despu&amp;eacute;s en el archivo de inicio primario (consulte &lt;a href=&quot;http://www.gnu.org/software/emacs/manual/html_node/emacs/Init-File.html#Init-File&quot;&gt;Archivo de inicio&lt;/a&gt; en</target>
        </trans-unit>
        <trans-unit id="574e81c2ebf0fb53e6b7a82f512213500a53d2b7" translate="yes" xml:space="preserve">
          <source>In most clean Lisp code, this difference won&amp;rsquo;t matter. It can matter only if you perform side-effects on the objects constructed by the macro definition. Thus, to avoid trouble, &lt;strong&gt;avoid side effects on objects constructed by macro definitions&lt;/strong&gt;. Here is an example of how such side effects can get you into trouble:</source>
          <target state="translated">En la mayor&amp;iacute;a de los c&amp;oacute;digos Lisp limpios, esta diferencia no importar&amp;aacute;. Solo puede importar si realiza efectos secundarios en los objetos construidos por la definici&amp;oacute;n de macro. Por lo tanto, para evitar problemas, &lt;strong&gt;evite los efectos secundarios en los objetos construidos por definiciones de macros&lt;/strong&gt; . Este es un ejemplo de c&amp;oacute;mo estos efectos secundarios pueden causarle problemas:</target>
        </trans-unit>
        <trans-unit id="0b16687a5ada91a83610070c6aab00214708b230" translate="yes" xml:space="preserve">
          <source>In most computer languages, every function has a name. But in Lisp, a function in the strictest sense has no name: it is an object which can &lt;em&gt;optionally&lt;/em&gt; be associated with a symbol (e.g., &lt;code&gt;car&lt;/code&gt;) that serves as the function name. See &lt;a href=&quot;function-names#Function-Names&quot;&gt;Function Names&lt;/a&gt;. When a function has been given a name, we usually also refer to that symbol as a &amp;ldquo;function&amp;rdquo; (e.g., we refer to &amp;ldquo;the function &lt;code&gt;car&lt;/code&gt;&amp;rdquo;). In this manual, the distinction between a function name and the function object itself is usually unimportant, but we will take note wherever it is relevant.</source>
          <target state="translated">En la mayor&amp;iacute;a de los lenguajes inform&amp;aacute;ticos, cada funci&amp;oacute;n tiene un nombre. Pero en Lisp, una funci&amp;oacute;n en el sentido m&amp;aacute;s estricto no tiene nombre: es un objeto que puede asociarse &lt;em&gt;opcionalmente&lt;/em&gt; con un s&amp;iacute;mbolo (por ejemplo, &lt;code&gt;car&lt;/code&gt; ) que sirve como nombre de la funci&amp;oacute;n. Consulte &lt;a href=&quot;function-names#Function-Names&quot;&gt;Nombres de funciones&lt;/a&gt; . Cuando a una funci&amp;oacute;n se le ha dado un nombre, normalmente tambi&amp;eacute;n nos referimos a ese s&amp;iacute;mbolo como una &quot;funci&amp;oacute;n&quot; (por ejemplo, nos referimos a &quot;la funci&amp;oacute;n &lt;code&gt;car&lt;/code&gt; &quot;). En este manual, la distinci&amp;oacute;n entre el nombre de una funci&amp;oacute;n y el objeto de la funci&amp;oacute;n en s&amp;iacute; no suele ser importante, pero tomaremos nota siempre que sea relevante.</target>
        </trans-unit>
        <trans-unit id="0783cd0cb68b0d9a782edd9f6662166db1491334" translate="yes" xml:space="preserve">
          <source>In most languages, the programmer must declare the data type of each variable, and the type is known by the compiler but not represented in the data. Such type declarations do not exist in Emacs Lisp. A Lisp variable can have any type of value, and it remembers whatever value you store in it, type and all. (Actually, a small number of Emacs Lisp variables can only take on values of a certain type. See &lt;a href=&quot;variables-with-restricted-values#Variables-with-Restricted-Values&quot;&gt;Variables with Restricted Values&lt;/a&gt;.)</source>
          <target state="translated">En la mayor&amp;iacute;a de los lenguajes, el programador debe declarar el tipo de datos de cada variable, y el compilador conoce el tipo, pero no est&amp;aacute; representado en los datos. Tales declaraciones de tipos no existen en Emacs Lisp. Una variable Lisp puede tener cualquier tipo de valor y recuerda cualquier valor que usted almacene en ella, tipo y todo. (En realidad, una peque&amp;ntilde;a cantidad de variables de Emacs Lisp solo pueden tomar valores de un cierto tipo. Consulte &lt;a href=&quot;variables-with-restricted-values#Variables-with-Restricted-Values&quot;&gt;Variables con valores restringidos&lt;/a&gt; ).</target>
        </trans-unit>
        <trans-unit id="48532c1621002093d77ee956f1e52d70bc16b5b2" translate="yes" xml:space="preserve">
          <source>In most of the places where strings are used, we conceptualize the string as containing text characters&amp;mdash;the same kind of characters found in buffers or files. Occasionally Lisp programs use strings that conceptually contain keyboard characters; for example, they may be key sequences or keyboard macro definitions. However, storing keyboard characters in a string is a complex matter, for reasons of historical compatibility, and it is not always possible.</source>
          <target state="translated">En la mayor&amp;iacute;a de los lugares donde se utilizan cadenas, conceptualizamos que la cadena contiene caracteres de texto, el mismo tipo de caracteres que se encuentran en b&amp;uacute;feres o archivos. Ocasionalmente, los programas Lisp usan cadenas que contienen conceptualmente caracteres del teclado; por ejemplo, pueden ser secuencias de teclas o definiciones de macros de teclado. Sin embargo, almacenar caracteres del teclado en una cadena es un asunto complejo, por razones de compatibilidad hist&amp;oacute;rica, y no siempre es posible.</target>
        </trans-unit>
        <trans-unit id="5f4144091cc9aca1cd2f8e02b0fccbdf93c70e06" translate="yes" xml:space="preserve">
          <source>In most programming languages, it is impossible to have a function without a name. In Lisp, a function has no intrinsic name. A lambda expression can be called as a function even though it has no name; to emphasize this, we also call it an &lt;em&gt;anonymous function&lt;/em&gt; (see &lt;a href=&quot;anonymous-functions#Anonymous-Functions&quot;&gt;Anonymous Functions&lt;/a&gt;). A named function in Lisp is just a symbol with a valid function in its function cell (see &lt;a href=&quot;defining-functions#Defining-Functions&quot;&gt;Defining Functions&lt;/a&gt;).</source>
          <target state="translated">En la mayor&amp;iacute;a de los lenguajes de programaci&amp;oacute;n, es imposible tener una funci&amp;oacute;n sin un nombre. En Lisp, una funci&amp;oacute;n no tiene un nombre intr&amp;iacute;nseco. Una expresi&amp;oacute;n lambda se puede llamar como funci&amp;oacute;n aunque no tenga nombre; para enfatizar esto, tambi&amp;eacute;n la llamamos &lt;em&gt;funci&amp;oacute;n an&amp;oacute;nima&lt;/em&gt; (ver &lt;a href=&quot;anonymous-functions#Anonymous-Functions&quot;&gt;Funciones an&amp;oacute;nimas&lt;/a&gt; ). Una funci&amp;oacute;n nombrada en Lisp es solo un s&amp;iacute;mbolo con una funci&amp;oacute;n v&amp;aacute;lida en su celda de funci&amp;oacute;n (ver &lt;a href=&quot;defining-functions#Defining-Functions&quot;&gt;Definici&amp;oacute;n de funciones&lt;/a&gt; ).</target>
        </trans-unit>
        <trans-unit id="717022d1f6adfca4a3a7968227e86d9f8fd9f6f0" translate="yes" xml:space="preserve">
          <source>In most ways, a minibuffer is a normal Emacs buffer. Most operations &lt;em&gt;within&lt;/em&gt; a buffer, such as editing commands, work normally in a minibuffer. However, many operations for managing buffers do not apply to minibuffers. The name of a minibuffer always has the form &amp;lsquo;</source>
          <target state="translated">En la mayor&amp;iacute;a de los casos, un minib&amp;uacute;fer es un b&amp;uacute;fer normal de Emacs. La mayor&amp;iacute;a de las operaciones &lt;em&gt;dentro de&lt;/em&gt; un b&amp;uacute;fer, como los comandos de edici&amp;oacute;n, funcionan normalmente en un minib&amp;uacute;fer. Sin embargo, muchas operaciones para administrar b&amp;uacute;feres no se aplican a los minib&amp;uacute;feres. El nombre de un minib&amp;uacute;fer siempre tiene la forma '</target>
        </trans-unit>
        <trans-unit id="2561cd793393aff7d27fa03dc11a09e0ffcec475" translate="yes" xml:space="preserve">
          <source>In one special case, &lt;var&gt;pos-or-area&lt;/var&gt; is a list containing a symbol (one of the symbols listed above) instead of just the symbol. This happens after the imaginary prefix keys for the event are registered by Emacs. See &lt;a href=&quot;key-sequence-input#Key-Sequence-Input&quot;&gt;Key Sequence Input&lt;/a&gt;.</source>
          <target state="translated">En un caso especial, &lt;var&gt;pos-or-area&lt;/var&gt; es una lista que contiene un s&amp;iacute;mbolo (uno de los s&amp;iacute;mbolos enumerados anteriormente) en lugar de solo el s&amp;iacute;mbolo. Esto sucede despu&amp;eacute;s de que Emacs registra las claves de prefijo imaginarias para el evento. Consulte &lt;a href=&quot;key-sequence-input#Key-Sequence-Input&quot;&gt;Entrada de secuencia de teclas&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="40058b1b79d94d51db03317b307ab30a9e089207" translate="yes" xml:space="preserve">
          <source>In order for a symbol to be an error symbol, it must be defined with &lt;code&gt;define-error&lt;/code&gt; which takes a parent condition (defaults to &lt;code&gt;error&lt;/code&gt;). This parent defines the conditions that this kind of error belongs to. The transitive set of parents always includes the error symbol itself, and the symbol &lt;code&gt;error&lt;/code&gt;. Because quitting is not considered an error, the set of parents of &lt;code&gt;quit&lt;/code&gt; is just &lt;code&gt;(quit)&lt;/code&gt;.</source>
          <target state="translated">Para que un s&amp;iacute;mbolo sea un s&amp;iacute;mbolo de error, debe definirse con &lt;code&gt;define-error&lt;/code&gt; que toma una condici&amp;oacute;n principal (por defecto es &lt;code&gt;error&lt;/code&gt; ). Este padre define las condiciones a las que pertenece este tipo de error. El conjunto transitivo de padres siempre incluye el s&amp;iacute;mbolo de error en s&amp;iacute; y el s&amp;iacute;mbolo de &lt;code&gt;error&lt;/code&gt; . Debido a que dejar de fumar no se considera un error, el grupo de padres de &lt;code&gt;quit&lt;/code&gt; de fumar es simplemente &lt;code&gt;(quit)&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="42862e17fb0b9045574c0488aeeff987c7b035ab" translate="yes" xml:space="preserve">
          <source>In order for compilation of macro calls to work, the macros must already be defined in Lisp when the calls to them are compiled. The compiler has a special feature to help you do this: if a file being compiled contains a &lt;code&gt;defmacro&lt;/code&gt; form, the macro is defined temporarily for the rest of the compilation of that file.</source>
          <target state="translated">Para que la compilaci&amp;oacute;n de llamadas a macros funcione, las macros ya deben estar definidas en Lisp cuando se compilan las llamadas a ellas. El compilador tiene una caracter&amp;iacute;stica especial para ayudarlo a hacer esto: si un archivo que se est&amp;aacute; compilando contiene una forma &lt;code&gt;defmacro&lt;/code&gt; , la macro se define temporalmente para el resto de la compilaci&amp;oacute;n de ese archivo.</target>
        </trans-unit>
        <trans-unit id="007cc651440219a61408c3deac9dfe41920a80bf" translate="yes" xml:space="preserve">
          <source>In order to extract the local part of the file&amp;rsquo;s name of a temporary file, use &lt;code&gt;file-local-name&lt;/code&gt; (see &lt;a href=&quot;magic-file-names#Magic-File-Names&quot;&gt;Magic File Names&lt;/a&gt;).</source>
          <target state="translated">Para extraer la parte local del nombre del archivo de un archivo temporal, use &lt;code&gt;file-local-name&lt;/code&gt; (consulte &lt;a href=&quot;magic-file-names#Magic-File-Names&quot;&gt;Nombres de archivos m&amp;aacute;gicos&lt;/a&gt; ).</target>
        </trans-unit>
        <trans-unit id="02b3ec04225a3187705865de19dd49a2f10d82cd" translate="yes" xml:space="preserve">
          <source>In order to find out which window or frame was selected the last time window change functions were run, the following functions can be used:</source>
          <target state="translated">Para saber qué ventana o marco se seleccionó la última vez que se ejecutaron las funciones de cambio de ventana,se pueden utilizar las siguientes funciones:</target>
        </trans-unit>
        <trans-unit id="4aa759b30fc1bac4367e22f29f78fa95acabc797" translate="yes" xml:space="preserve">
          <source>In order to give a child frame a draggable header or mode line, the window parameters &lt;code&gt;mode-line-format&lt;/code&gt; and &lt;code&gt;header-line-format&lt;/code&gt; are handy (see &lt;a href=&quot;window-parameters#Window-Parameters&quot;&gt;Window Parameters&lt;/a&gt;). These allow to remove an unwanted mode line (when &lt;code&gt;drag-with-header-line&lt;/code&gt; is chosen) and to remove mouse-sensitive areas which might interfere with frame dragging.</source>
          <target state="translated">Para darle a un marco hijo un encabezado o l&amp;iacute;nea de modo que se pueda arrastrar, los par&amp;aacute;metros de la ventana &lt;code&gt;mode-line-format&lt;/code&gt; y &lt;code&gt;header-line-format&lt;/code&gt; son &amp;uacute;tiles (consulte &lt;a href=&quot;window-parameters#Window-Parameters&quot;&gt;Par&amp;aacute;metros de ventana&lt;/a&gt; ). Estos permiten eliminar una l&amp;iacute;nea de modo no deseada (cuando se elige &lt;code&gt;drag-with-header-line&lt;/code&gt; ) y eliminar &amp;aacute;reas sensibles al mouse que podr&amp;iacute;an interferir con el arrastre del marco.</target>
        </trans-unit>
        <trans-unit id="3a1da75035de559e954ff07f12d67704d95cfb68" translate="yes" xml:space="preserve">
          <source>In order to prevent the hook functions from being called more than once for the same part of the buffer, you can use the variable &lt;code&gt;buffer-access-fontified-property&lt;/code&gt;.</source>
          <target state="translated">Para evitar que las funciones de enlace se llamen m&amp;aacute;s de una vez para la misma parte del b&amp;uacute;fer, puede usar la variable &lt;code&gt;buffer-access-fontified-property&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="ce8866ba225f4a0e162725c09d5505ceaec41ba9" translate="yes" xml:space="preserve">
          <source>In order to see how this new, modified form works, delete any frame showing</source>
          <target state="translated">Para ver cómo funciona esta nueva forma modificada,borre cualquier cuadro que muestre</target>
        </trans-unit>
        <trans-unit id="25d21175a564e227d0d2be93a38559526ba4e991" translate="yes" xml:space="preserve">
          <source>In order to use Edebug to debug Lisp code, you must first &lt;em&gt;instrument&lt;/em&gt; the code. Instrumenting code inserts additional code into it, to invoke Edebug at the proper places.</source>
          <target state="translated">Para utilizar Edebug para depurar el c&amp;oacute;digo Lisp, primero debe &lt;em&gt;instrumentar&lt;/em&gt; el c&amp;oacute;digo. El c&amp;oacute;digo de instrumentaci&amp;oacute;n inserta c&amp;oacute;digo adicional en &amp;eacute;l para invocar a Edebug en los lugares adecuados.</target>
        </trans-unit>
        <trans-unit id="fe0db91a5b392657a0aca17c10f50da256d748a3" translate="yes" xml:space="preserve">
          <source>In ordinary usage, the difference between simple packages and multi-file packages is relatively unimportant; the Package Menu interface makes no distinction between them. However, the procedure for creating them differs, as explained in the following sections.</source>
          <target state="translated">En el uso ordinario,la diferencia entre los paquetes simples y los paquetes de varios archivos es relativamente poco importante;la interfaz del menú de paquetes no hace ninguna distinción entre ellos.Sin embargo,el procedimiento para crearlos difiere,como se explica en las secciones siguientes.</target>
        </trans-unit>
        <trans-unit id="4049b50b43320603134b658569956160c5b33eec" translate="yes" xml:space="preserve">
          <source>In other languages, an expression is text; it has no other form. In Lisp, an expression is primarily a Lisp object and only secondarily the text that is the object&amp;rsquo;s read syntax. Often there is no need to emphasize this distinction, but you must keep it in the back of your mind, or you will occasionally be very confused.</source>
          <target state="translated">En otros idiomas, una expresi&amp;oacute;n es texto; no tiene otra forma. En Lisp, una expresi&amp;oacute;n es principalmente un objeto Lisp y solo secundariamente el texto que es la sintaxis de lectura del objeto. A menudo no hay necesidad de enfatizar esta distinci&amp;oacute;n, pero debe mantenerla en el fondo de su mente, o ocasionalmente se sentir&amp;aacute; muy confundido.</target>
        </trans-unit>
        <trans-unit id="b28e79f39397b0edb42bffc1a990b7fa7d5f45bc" translate="yes" xml:space="preserve">
          <source>In other words, after the end of a group, the matcher remembers the beginning and end of the text matched by that group. Later on in the regular expression you can use &amp;lsquo;</source>
          <target state="translated">En otras palabras, despu&amp;eacute;s del final de un grupo, el comparador recuerda el principio y el final del texto que coincide con ese grupo. M&amp;aacute;s adelante en la expresi&amp;oacute;n regular puede usar '</target>
        </trans-unit>
        <trans-unit id="73dca98bad9f727764c940e829d2b4567f5194c0" translate="yes" xml:space="preserve">
          <source>In other words, the string character with the &lt;code&gt;cursor&lt;/code&gt; property of any non-&lt;code&gt;nil&lt;/code&gt; value is the character where to display the cursor. The value of the property says for which buffer positions to display the cursor there. If the value is an integer &lt;var&gt;n&lt;/var&gt;, the cursor is displayed there when point is anywhere between the beginning of the overlay or &lt;code&gt;display&lt;/code&gt; property and &lt;var&gt;n&lt;/var&gt; positions after that. If the value is anything else and non-&lt;code&gt;nil&lt;/code&gt;, the cursor is displayed there only when point is at the beginning of the &lt;code&gt;display&lt;/code&gt; property or at &lt;code&gt;overlay-start&lt;/code&gt;.</source>
          <target state="translated">En otras palabras, el car&amp;aacute;cter de cadena con la propiedad de &lt;code&gt;cursor&lt;/code&gt; de cualquier valor que no sea &lt;code&gt;nil&lt;/code&gt; es el car&amp;aacute;cter donde se muestra el cursor. El valor de la propiedad dice para qu&amp;eacute; posiciones de b&amp;uacute;fer mostrar el cursor all&amp;iacute;. Si el valor es un n&amp;uacute;mero entero &lt;var&gt;n&lt;/var&gt; , el cursor se muestra all&amp;iacute; cuando el punto est&amp;aacute; en cualquier lugar entre el comienzo de la superposici&amp;oacute;n o propiedad de &lt;code&gt;display&lt;/code&gt; y &lt;var&gt;n&lt;/var&gt; posiciones despu&amp;eacute;s de eso. Si el valor es diferente y no es &lt;code&gt;nil&lt;/code&gt; , el cursor se muestra all&amp;iacute; solo cuando el punto est&amp;aacute; al principio de la propiedad de &lt;code&gt;display&lt;/code&gt; o en el inicio de la &lt;code&gt;overlay-start&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="342b05b7073d64e941e7a9180ce0ab73ce5d1977" translate="yes" xml:space="preserve">
          <source>In particular, &lt;code&gt;delete-windows-on&lt;/code&gt; (see &lt;a href=&quot;deleting-windows#Deleting-Windows&quot;&gt;Deleting Windows&lt;/a&gt;) handles case (2) by deleting the associated frame and case (3) by showing another buffer in that frame&amp;rsquo;s only window. The function &lt;code&gt;replace-buffer-in-windows&lt;/code&gt; (see &lt;a href=&quot;buffers-and-windows#Buffers-and-Windows&quot;&gt;Buffers and Windows&lt;/a&gt;) which is called when a buffer gets killed, deletes the window in case (1) and behaves like &lt;code&gt;delete-windows-on&lt;/code&gt; otherwise.</source>
          <target state="translated">En particular, &lt;code&gt;delete-windows-on&lt;/code&gt; (ver &lt;a href=&quot;deleting-windows#Deleting-Windows&quot;&gt;Eliminaci&amp;oacute;n de Windows&lt;/a&gt; ) maneja el caso (2) eliminando el marco asociado y el caso (3) mostrando otro b&amp;uacute;fer en la &amp;uacute;nica ventana de ese marco. La funci&amp;oacute;n &lt;code&gt;replace-buffer-in-windows&lt;/code&gt; (ver &lt;a href=&quot;buffers-and-windows#Buffers-and-Windows&quot;&gt;B&amp;uacute;feres y Windows&lt;/a&gt; ), que se llama cuando se elimina un b&amp;uacute;fer, elimina la ventana en el caso (1) y se comporta como &lt;code&gt;delete-windows-on&lt;/code&gt; en caso contrario.</target>
        </trans-unit>
        <trans-unit id="ae990d311270dc72ee6facabe1f2c786eb8e3f14" translate="yes" xml:space="preserve">
          <source>In particular, mutating the returned value may inadvertently change another string, alter a constant string in the program, or even raise an error. To obtain a string that you can safely mutate, use &lt;code&gt;copy-sequence&lt;/code&gt; on the result.</source>
          <target state="translated">En particular, la mutaci&amp;oacute;n del valor devuelto puede cambiar inadvertidamente otra cadena, alterar una cadena constante en el programa o incluso generar un error. Para obtener una cadena que pueda mutar de forma segura, use &lt;code&gt;copy-sequence&lt;/code&gt; en el resultado.</target>
        </trans-unit>
        <trans-unit id="d8c72f894595d295da4116cddb04e4987b994ba0" translate="yes" xml:space="preserve">
          <source>In particular, under X (but not when building with GTK+), the frame&amp;rsquo;s outer border can be used. On MS-Windows, specifying a non-zero outer border width will show a one-pixel wide external border. Under all window-systems, the internal border can be used. In either case, it&amp;rsquo;s advisable to disable a child frame&amp;rsquo;s window manager decorations with the &lt;code&gt;undecorated&lt;/code&gt; frame parameter (see &lt;a href=&quot;management-parameters#Management-Parameters&quot;&gt;Management Parameters&lt;/a&gt;).</source>
          <target state="translated">En particular, debajo de X (pero no cuando se construye con GTK +), se puede usar el borde exterior del marco. En MS-Windows, especificar un ancho de borde exterior distinto de cero mostrar&amp;aacute; un borde exterior de un p&amp;iacute;xel de ancho. En todos los sistemas de ventanas, se puede utilizar el borde interior. En cualquier caso, es recomendable deshabilitar las decoraciones del administrador de ventanas de un marco secundario con el par&amp;aacute;metro de marco &lt;code&gt;undecorated&lt;/code&gt; (consulte &lt;a href=&quot;management-parameters#Management-Parameters&quot;&gt;Par&amp;aacute;metros de administraci&amp;oacute;n&lt;/a&gt; ).</target>
        </trans-unit>
        <trans-unit id="785c848b7a9c76188153b98dc766e9eee3d7f299" translate="yes" xml:space="preserve">
          <source>In practice not all of the areas shown in the drawing will or may be present. The meaning of these areas is described below.</source>
          <target state="translated">En la práctica,no todas las áreas que se muestran en el dibujo estarán o pueden estar presentes.El significado de estas áreas se describe a continuación.</target>
        </trans-unit>
        <trans-unit id="1a24ae50708083315e6e5d71edf56c47415c18d3" translate="yes" xml:space="preserve">
          <source>In practice this means that &lt;code&gt;display-buffer&lt;/code&gt; builds a list of all action functions specified by these display actions. The first element of this list is the first action function specified by &lt;code&gt;display-buffer-overriding-action&lt;/code&gt;, if any. Its last element is &lt;code&gt;display-buffer-pop-up-frame&lt;/code&gt;&amp;mdash;the last action function specified by &lt;code&gt;display-buffer-fallback-action&lt;/code&gt;. Duplicates are not removed from this list&amp;mdash;hence one and the same action function may be called multiple times during one call of &lt;code&gt;display-buffer&lt;/code&gt;.</source>
          <target state="translated">En la pr&amp;aacute;ctica, esto significa que &lt;code&gt;display-buffer&lt;/code&gt; crea una lista de todas las funciones de acci&amp;oacute;n especificadas por estas acciones de visualizaci&amp;oacute;n. El primer elemento de esta lista es la primera funci&amp;oacute;n de acci&amp;oacute;n especificada por &lt;code&gt;display-buffer-overriding-action&lt;/code&gt; , si existe. Su &amp;uacute;ltimo elemento es &lt;code&gt;display-buffer-pop-up-frame&lt;/code&gt; , la &amp;uacute;ltima funci&amp;oacute;n de acci&amp;oacute;n especificada por &lt;code&gt;display-buffer-fallback-action&lt;/code&gt; . Los duplicados no se eliminan de esta lista; por lo tanto, se puede llamar a una misma funci&amp;oacute;n de acci&amp;oacute;n varias veces durante una llamada de &lt;code&gt;display-buffer&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="069dde31ed88efd7662427ed0d83c24aecd85cef" translate="yes" xml:space="preserve">
          <source>In practice, most &amp;lsquo;</source>
          <target state="translated">En la pr&amp;aacute;ctica, la mayor&amp;iacute;a de '</target>
        </trans-unit>
        <trans-unit id="dff22f2148342d55185406b93857c7cd707282f3" translate="yes" xml:space="preserve">
          <source>In practice, nearly all functions have names, and are referred to by their names. You can create a named Lisp function by defining a lambda expression and putting it in a function cell (see &lt;a href=&quot;function-cells#Function-Cells&quot;&gt;Function Cells&lt;/a&gt;). However, it is more common to use the &lt;code&gt;defun&lt;/code&gt; special form, described in the next section. See &lt;a href=&quot;defining-functions#Defining-Functions&quot;&gt;Defining Functions&lt;/a&gt;.</source>
          <target state="translated">En la pr&amp;aacute;ctica, casi todas las funciones tienen nombres y se las conoce por sus nombres. Puede crear una funci&amp;oacute;n Lisp con nombre definiendo una expresi&amp;oacute;n lambda y coloc&amp;aacute;ndola en una celda de funci&amp;oacute;n (consulte &lt;a href=&quot;function-cells#Function-Cells&quot;&gt;Celdas de funci&amp;oacute;n&lt;/a&gt; ). Sin embargo, es m&amp;aacute;s com&amp;uacute;n utilizar la forma especial &lt;code&gt;defun&lt;/code&gt; , que se describe en la siguiente secci&amp;oacute;n. Consulte &lt;a href=&quot;defining-functions#Defining-Functions&quot;&gt;Definici&amp;oacute;n de funciones&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="e2ec4dd56177cba6f1cdca6d305d727013f82bc9" translate="yes" xml:space="preserve">
          <source>In practice, you can usually use the text property search functions in place of explicit interval boundaries. You can think of them as finding the boundaries of intervals, assuming that intervals are always coalesced whenever possible. See &lt;a href=&quot;property-search#Property-Search&quot;&gt;Property Search&lt;/a&gt;.</source>
          <target state="translated">En la pr&amp;aacute;ctica, normalmente puede utilizar las funciones de b&amp;uacute;squeda de propiedades de texto en lugar de l&amp;iacute;mites de intervalo expl&amp;iacute;citos. Puede pensar en ellos como encontrar los l&amp;iacute;mites de los intervalos, asumiendo que los intervalos siempre se fusionan siempre que sea posible. Consulte &lt;a href=&quot;property-search#Property-Search&quot;&gt;B&amp;uacute;squeda de propiedades&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="595414a18f0f6814ac8aec499699ba0cadf3010e" translate="yes" xml:space="preserve">
          <source>In principle, if you want an array of text characters, you could use either a string or a vector. In practice, we always choose strings for such applications, for four reasons:</source>
          <target state="translated">En principio,si se quiere un conjunto de caracteres de texto,se podría utilizar una cadena o un vector.En la práctica,siempre elegimos cadenas para estas aplicaciones,por cuatro razones:</target>
        </trans-unit>
        <trans-unit id="952a69bffe57014633d87ea51d91051b5c23b497" translate="yes" xml:space="preserve">
          <source>In principle, you can assign a variable value to any symbol with &lt;code&gt;setq&lt;/code&gt;, whether or not it has first been defined as a variable. However, you ought to write a variable definition for each global variable that you want to use; otherwise, your Lisp program may not act correctly if it is evaluated with lexical scoping enabled (see &lt;a href=&quot;variable-scoping#Variable-Scoping&quot;&gt;Variable Scoping&lt;/a&gt;).</source>
          <target state="translated">En principio, puede asignar un valor de variable a cualquier s&amp;iacute;mbolo con &lt;code&gt;setq&lt;/code&gt; , ya sea que se haya definido primero como variable o no. Sin embargo, debe escribir una definici&amp;oacute;n de variable para cada variable global que desee utilizar; de lo contrario, es posible que su programa Lisp no act&amp;uacute;e correctamente si se eval&amp;uacute;a con el alcance l&amp;eacute;xico habilitado (consulte &lt;a href=&quot;variable-scoping#Variable-Scoping&quot;&gt;Alcance variable&lt;/a&gt; ).</target>
        </trans-unit>
        <trans-unit id="59a81a18a5d27bbbef59498c3ff3190989d0d540" translate="yes" xml:space="preserve">
          <source>In short, a keymap entry may be a keymap, a command, a keyboard macro, a symbol that leads to one of them, or &lt;code&gt;nil&lt;/code&gt;.</source>
          <target state="translated">En resumen, una entrada de mapa de teclas puede ser un mapa de teclas, un comando, una macro de teclado, un s&amp;iacute;mbolo que lleva a uno de ellos o &lt;code&gt;nil&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="64a6416d90974dbdcf9b5cf8181346f0fcaef6ea" translate="yes" xml:space="preserve">
          <source>In simple cases, all you need to specify is the mapping to lower-case; the three related tables will be calculated automatically from that one.</source>
          <target state="translated">En los casos sencillos,todo lo que hay que especificar es el mapeo a minúsculas;las tres tablas relacionadas se calcularán automáticamente a partir de esa.</target>
        </trans-unit>
        <trans-unit id="ca3f716cf86956eff115da7250837a9a9ae0da62" translate="yes" xml:space="preserve">
          <source>In some cases, a leading &amp;lsquo;</source>
          <target state="translated">En algunos casos, un l&amp;iacute;der</target>
        </trans-unit>
        <trans-unit id="51c6be916769f1ca362110d817b3845ee05a7c40" translate="yes" xml:space="preserve">
          <source>In some cases, it is important to control the relative ordering of functions on the hook. The optional argument &lt;var&gt;depth&lt;/var&gt; lets you indicate where the function should be inserted in the list: it should then be a number between -100 and 100 where the higher the value, the closer to the end of the list the function should go. The &lt;var&gt;depth&lt;/var&gt; defaults to 0 and for backward compatibility when &lt;var&gt;depth&lt;/var&gt; is a non-nil symbol it is interpreted as a depth of 90. Furthermore, when &lt;var&gt;depth&lt;/var&gt; is strictly greater than 0 the function is added &lt;em&gt;after&lt;/em&gt; rather than before functions of the same depth. One should never use a depth of 100 (or -100), because one can never be sure that no other function will ever need to come before (or after) us.</source>
          <target state="translated">En algunos casos, es importante controlar el orden relativo de las funciones en el gancho. La &lt;var&gt;depth&lt;/var&gt; argumento opcional le permite indicar d&amp;oacute;nde debe insertarse la funci&amp;oacute;n en la lista: entonces debe ser un n&amp;uacute;mero entre -100 y 100 donde cuanto mayor sea el valor, m&amp;aacute;s cerca del final de la lista debe ir la funci&amp;oacute;n. La &lt;var&gt;depth&lt;/var&gt; predeterminada en 0 y para compatibilidad con versiones anteriores, cuando la &lt;var&gt;depth&lt;/var&gt; es un s&amp;iacute;mbolo distinto de cero, se interpreta como una profundidad de 90. Adem&amp;aacute;s, cuando la &lt;var&gt;depth&lt;/var&gt; es estrictamente mayor que 0, la funci&amp;oacute;n se agrega &lt;em&gt;despu&amp;eacute;s en&lt;/em&gt; lugar de antes de las funciones de la misma profundidad. Nunca se debe usar una profundidad de 100 (o -100), porque nunca se puede estar seguro de que ninguna otra funci&amp;oacute;n tendr&amp;aacute; que venir antes (o despu&amp;eacute;s) de nosotros.</target>
        </trans-unit>
        <trans-unit id="65dfdc7d279aaa17d921d1528c2b2fe56c2c0a4d" translate="yes" xml:space="preserve">
          <source>In some cases, text lines are truncated on the screen rather than continued onto additional screen lines. In these cases, &lt;code&gt;vertical-motion&lt;/code&gt; moves point much like &lt;code&gt;forward-line&lt;/code&gt;. See &lt;a href=&quot;truncation#Truncation&quot;&gt;Truncation&lt;/a&gt;.</source>
          <target state="translated">En algunos casos, las l&amp;iacute;neas de texto se truncan en la pantalla en lugar de continuar en l&amp;iacute;neas de pantalla adicionales. En estos casos, &lt;code&gt;vertical-motion&lt;/code&gt; mueve el punto de manera muy similar &lt;code&gt;forward-line&lt;/code&gt; . Consulte &lt;a href=&quot;truncation#Truncation&quot;&gt;Truncamiento&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="4582e0d4f2cc8e2368ad7a2f683a1a7484ac075b" translate="yes" xml:space="preserve">
          <source>In some cases, the option is followed in the command line by an argument. In these cases, the &lt;var&gt;handler-function&lt;/var&gt; can find all the remaining command-line arguments in the variable &lt;code&gt;command-line-args-left&lt;/code&gt; (see below). (The entire list of command-line arguments is in &lt;code&gt;command-line-args&lt;/code&gt;.)</source>
          <target state="translated">En algunos casos, la opci&amp;oacute;n es seguida en la l&amp;iacute;nea de comando por un argumento. En estos casos, la &lt;var&gt;handler-function&lt;/var&gt; puede encontrar todos los argumentos restantes de la l&amp;iacute;nea de comandos en la variable &lt;code&gt;command-line-args-left&lt;/code&gt; (ver m&amp;aacute;s abajo). (La lista completa de argumentos de la l&amp;iacute;nea de comandos est&amp;aacute; en los argumentos de la l&amp;iacute;nea de &lt;code&gt;command-line-args&lt;/code&gt; ).</target>
        </trans-unit>
        <trans-unit id="878c8864da92eab3f1063c3c626126be65624841" translate="yes" xml:space="preserve">
          <source>In some configurations, Emacs cannot display a real dialog box; so instead it displays the same items in a pop-up menu in the center of the frame.</source>
          <target state="translated">En algunas configuraciones,Emacs no puede mostrar un cuadro de diálogo real,por lo que en su lugar muestra los mismos elementos en un menú emergente en el centro del cuadro.</target>
        </trans-unit>
        <trans-unit id="4e6989e3c48ebc292a0fb0be926a8320dfd01322" translate="yes" xml:space="preserve">
          <source>In some functions (such as &lt;code&gt;read-quoted-char&lt;/code&gt;),</source>
          <target state="translated">En algunas funciones (como &lt;code&gt;read-quoted-char&lt;/code&gt; ),</target>
        </trans-unit>
        <trans-unit id="623f15e33a88f6fded6d8865aae03ac806476d9f" translate="yes" xml:space="preserve">
          <source>In some ways, the Button package duplicates the functionality in the Widget package. See &lt;a href=&quot;https://www.gnu.org/software/emacs/manual/html_node/widget/index.html#Top&quot;&gt;Introduction&lt;/a&gt; in</source>
          <target state="translated">De alguna manera, el paquete Button duplica la funcionalidad del paquete Widget. Ver &lt;a href=&quot;https://www.gnu.org/software/emacs/manual/html_node/widget/index.html#Top&quot;&gt;Introducci&amp;oacute;n&lt;/a&gt; en</target>
        </trans-unit>
        <trans-unit id="56e23b6ebee018ae84e4594f62dc43eca78b4394" translate="yes" xml:space="preserve">
          <source>In strings and buffers, the only control characters allowed are those that exist in</source>
          <target state="translated">En las cadenas y los buffers,los únicos caracteres de control permitidos son los que existen en</target>
        </trans-unit>
        <trans-unit id="0183eea7f0857fe25abe600463b2305c9ae8752b" translate="yes" xml:space="preserve">
          <source>In subsequent sections, we will describe the details of what evaluation means for each kind of form.</source>
          <target state="translated">En secciones posteriores,describiremos los detalles de lo que significa la evaluación para cada tipo de forma.</target>
        </trans-unit>
        <trans-unit id="a57836ad148b9af16d39bd5e1f715466141037f4" translate="yes" xml:space="preserve">
          <source>In that case, the anonymous function is kept as a lambda expression in the compiled code. The byte-compiler cannot assume this list is a function, even though it looks like one, since it does not know that &lt;code&gt;change-property&lt;/code&gt; intends to use it as a function.</source>
          <target state="translated">En ese caso, la funci&amp;oacute;n an&amp;oacute;nima se mantiene como una expresi&amp;oacute;n lambda en el c&amp;oacute;digo compilado. El compilador de bytes no puede asumir que esta lista es una funci&amp;oacute;n, aunque parezca una, ya que no sabe que &lt;code&gt;change-property&lt;/code&gt; tiene la intenci&amp;oacute;n de usarla como una funci&amp;oacute;n.</target>
        </trans-unit>
        <trans-unit id="b6abefb0ebc02351d5d08f8505d9c39811bfa807" translate="yes" xml:space="preserve">
          <source>In the</source>
          <target state="translated">En el</target>
        </trans-unit>
        <trans-unit id="cc52d935c1f29304f640ff4f787b205caeb68ac4" translate="yes" xml:space="preserve">
          <source>In the &lt;code&gt;rx&lt;/code&gt; notation (see &lt;a href=&quot;rx-notation#Rx-Notation&quot;&gt;Rx Notation&lt;/a&gt;), the regexp could be written</source>
          <target state="translated">En la notaci&amp;oacute;n &lt;code&gt;rx&lt;/code&gt; (ver &lt;a href=&quot;rx-notation#Rx-Notation&quot;&gt;Notaci&amp;oacute;n Rx&lt;/a&gt; ), la expresi&amp;oacute;n regular podr&amp;iacute;a escribirse</target>
        </trans-unit>
        <trans-unit id="edf58eb540efa82d8a13378501011be853119a74" translate="yes" xml:space="preserve">
          <source>In the above example, the index for &amp;lsquo;</source>
          <target state="translated">En el ejemplo anterior, el &amp;iacute;ndice de '</target>
        </trans-unit>
        <trans-unit id="e3f6d7d410589a0987a82033d6841e21fcb99c48" translate="yes" xml:space="preserve">
          <source>In the above pseudo-code, if a key sequence starts with a mouse event (see &lt;a href=&quot;mouse-events#Mouse-Events&quot;&gt;Mouse Events&lt;/a&gt;), that event&amp;rsquo;s position is used instead of point, and the event&amp;rsquo;s buffer is used instead of the current buffer. In particular, this affects how the &lt;code&gt;keymap&lt;/code&gt; and &lt;code&gt;local-map&lt;/code&gt; properties are looked up. If a mouse event occurs on a string embedded with a &lt;code&gt;display&lt;/code&gt;, &lt;code&gt;before-string&lt;/code&gt;, or &lt;code&gt;after-string&lt;/code&gt; property (see &lt;a href=&quot;special-properties#Special-Properties&quot;&gt;Special Properties&lt;/a&gt;), and the string has a non-&lt;code&gt;nil&lt;/code&gt;&lt;code&gt;keymap&lt;/code&gt; or &lt;code&gt;local-map&lt;/code&gt; property, that overrides the corresponding property in the underlying buffer text (i.e., the property specified by the underlying text is ignored).</source>
          <target state="translated">En el pseudoc&amp;oacute;digo anterior, si una secuencia de teclas comienza con un evento del mouse (ver &lt;a href=&quot;mouse-events#Mouse-Events&quot;&gt;Eventos del mouse&lt;/a&gt; ), se usa la posici&amp;oacute;n de ese evento en lugar del punto, y el b&amp;uacute;fer del evento se usa en lugar del b&amp;uacute;fer actual. En particular, esto afecta c&amp;oacute;mo se &lt;code&gt;keymap&lt;/code&gt; &lt;code&gt;local-map&lt;/code&gt; teclas y las propiedades del mapa local . Si ocurre un evento de mouse en una cadena incrustada con una propiedad &lt;code&gt;display&lt;/code&gt; , &lt;code&gt;before-string&lt;/code&gt; o &lt;code&gt;after-string&lt;/code&gt; (ver &lt;a href=&quot;special-properties#Special-Properties&quot;&gt;Propiedades especiales&lt;/a&gt; ), y la cadena tiene un &lt;code&gt;local-map&lt;/code&gt; &lt;code&gt;keymap&lt;/code&gt; o mapa local que no es &lt;code&gt;nil&lt;/code&gt; propiedad, que anula la propiedad correspondiente en el texto del b&amp;uacute;fer subyacente (es decir, se ignora la propiedad especificada por el texto subyacente).</target>
        </trans-unit>
        <trans-unit id="27631bf78c7ae4e923152b090765e541b19e5a80" translate="yes" xml:space="preserve">
          <source>In the case of lexical bindings (see &lt;a href=&quot;variable-scoping#Variable-Scoping&quot;&gt;Variable Scoping&lt;/a&gt;), a closure is an object like any other in Emacs Lisp, and bindings in a closure are shared by any threads invoking the closure.</source>
          <target state="translated">En el caso de los enlaces l&amp;eacute;xicos (ver &lt;a href=&quot;variable-scoping#Variable-Scoping&quot;&gt;Alcance variable&lt;/a&gt; ), un cierre es un objeto como cualquier otro en Emacs Lisp, y los enlaces en un cierre son compartidos por cualquier hilo que invoque el cierre.</target>
        </trans-unit>
        <trans-unit id="59e0cecfabf4546ad2f48ca811a7e72617ebf6dd" translate="yes" xml:space="preserve">
          <source>In the customization buffer, each element is displayed and edited separately, according to the type specified for it.</source>
          <target state="translated">En la memoria intermedia de personalización,cada elemento se muestra y se edita por separado,según el tipo especificado para él.</target>
        </trans-unit>
        <trans-unit id="b31bdf79753cfe29ec8e26d6c3395cd18ae6e0a8" translate="yes" xml:space="preserve">
          <source>In the customization buffer, the &lt;small&gt;CAR&lt;/small&gt; and &lt;small&gt;CDR&lt;/small&gt; are displayed and edited separately, each according to their specified type.</source>
          <target state="translated">En el b&amp;uacute;fer de personalizaci&amp;oacute;n, el &lt;small&gt;CAR&lt;/small&gt; y el &lt;small&gt;CDR&lt;/small&gt; se muestran y editan por separado, cada uno de acuerdo con su tipo especificado.</target>
        </trans-unit>
        <trans-unit id="794a81a94829a19492d4fef3897a2f66fd03bedc" translate="yes" xml:space="preserve">
          <source>In the customization buffer, the user selects an alternative using a menu, and can then edit the value in the usual way for that alternative.</source>
          <target state="translated">En la memoria intermedia de personalización,el usuario selecciona una alternativa mediante un menú,y luego puede editar el valor de la manera habitual para esa alternativa.</target>
        </trans-unit>
        <trans-unit id="77d73a55a4ef46351e5ba12b487904babc3187bd" translate="yes" xml:space="preserve">
          <source>In the documentation string of an autoloaded command (see &lt;a href=&quot;autoload#Autoload&quot;&gt;Autoload&lt;/a&gt;), these key-substitution sequences have an additional special effect: they cause</source>
          <target state="translated">En la cadena de documentaci&amp;oacute;n de un comando de carga autom&amp;aacute;tica (consulte &lt;a href=&quot;autoload#Autoload&quot;&gt;Carga autom&amp;aacute;tica&lt;/a&gt; ), estas secuencias de sustituci&amp;oacute;n de claves tienen un efecto especial adicional: provocan</target>
        </trans-unit>
        <trans-unit id="a60a213b91a605f64eb22b1f3ba89d0650b4a400" translate="yes" xml:space="preserve">
          <source>In the early days of Lisp, &lt;code&gt;progn&lt;/code&gt; was the only way to execute two or more forms in succession and use the value of the last of them. But programmers found they often needed to use a &lt;code&gt;progn&lt;/code&gt; in the body of a function, where (at that time) only one form was allowed. So the body of a function was made into an implicit &lt;code&gt;progn&lt;/code&gt;: several forms are allowed just as in the body of an actual &lt;code&gt;progn&lt;/code&gt;. Many other control structures likewise contain an implicit &lt;code&gt;progn&lt;/code&gt;. As a result, &lt;code&gt;progn&lt;/code&gt; is not used as much as it was many years ago. It is needed now most often inside an &lt;code&gt;unwind-protect&lt;/code&gt;, &lt;code&gt;and&lt;/code&gt;, &lt;code&gt;or&lt;/code&gt;, or in the &lt;var&gt;then&lt;/var&gt;-part of an &lt;code&gt;if&lt;/code&gt;.</source>
          <target state="translated">En los primeros d&amp;iacute;as de Lisp, &lt;code&gt;progn&lt;/code&gt; era la &amp;uacute;nica forma de ejecutar dos o m&amp;aacute;s formas en sucesi&amp;oacute;n y utilizar el valor de la &amp;uacute;ltima de ellas. Pero los programadores descubrieron que a menudo necesitaban usar un &lt;code&gt;progn&lt;/code&gt; en el cuerpo de una funci&amp;oacute;n, donde (en ese momento) solo se permit&amp;iacute;a una forma. Entonces, el cuerpo de una funci&amp;oacute;n se convirti&amp;oacute; en un &lt;code&gt;progn&lt;/code&gt; impl&amp;iacute;cito : se permiten varias formas al igual que en el cuerpo de un &lt;code&gt;progn&lt;/code&gt; real . Asimismo, muchas otras estructuras de control contienen un &lt;code&gt;progn&lt;/code&gt; impl&amp;iacute;cito . Como resultado, &lt;code&gt;progn&lt;/code&gt; no se usa tanto como hace muchos a&amp;ntilde;os. Se necesita ahora m&amp;aacute;s a menudo dentro de un &lt;code&gt;unwind-protect&lt;/code&gt; , &lt;code&gt;and&lt;/code&gt; , &lt;code&gt;or&lt;/code&gt; , o en el &lt;var&gt;then&lt;/var&gt; -parte de un &lt;code&gt;if&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="7158787e9fd5c853d586cfa0e51a5ed11d6bcd94" translate="yes" xml:space="preserve">
          <source>In the example below,</source>
          <target state="translated">En el ejemplo siguiente,</target>
        </trans-unit>
        <trans-unit id="6ae41878d5c3d4986d366e49c3e9a986cae7e077" translate="yes" xml:space="preserve">
          <source>In the example below, &lt;code&gt;fixup-whitespace&lt;/code&gt; is called the first time with point before the word &amp;lsquo;</source>
          <target state="translated">En el siguiente ejemplo, se llama &lt;code&gt;fixup-whitespace&lt;/code&gt; la primera vez con un punto antes de la palabra '</target>
        </trans-unit>
        <trans-unit id="1159bcac76d9d797434640f0fdc5e48f8f16f786" translate="yes" xml:space="preserve">
          <source>In the example below, point is located on the line starting &amp;lsquo;</source>
          <target state="translated">En el siguiente ejemplo, el punto est&amp;aacute; ubicado en la l&amp;iacute;nea que comienza '</target>
        </trans-unit>
        <trans-unit id="41e79dffa91b26c5c432c03364763e538453a3a0" translate="yes" xml:space="preserve">
          <source>In the example below, the Lisp program reads the character</source>
          <target state="translated">En el siguiente ejemplo,el programa Lisp lee el personaje</target>
        </trans-unit>
        <trans-unit id="6c6b370e3f7d29753468f7d7c39505a6457cb137" translate="yes" xml:space="preserve">
          <source>In the example below, the first process is started and runs (rather, sleeps) for 100 seconds (the output buffer &amp;lsquo;</source>
          <target state="translated">En el siguiente ejemplo, el primer proceso se inicia y se ejecuta (m&amp;aacute;s bien, duerme) durante 100 segundos (el b&amp;uacute;fer de salida '</target>
        </trans-unit>
        <trans-unit id="2cbe7de5e5f4171a8b0909e3ea37d9411601b61f" translate="yes" xml:space="preserve">
          <source>In the example below, the returned alist indicates that the key</source>
          <target state="translated">En el ejemplo siguiente,la lista devuelta indica que la tecla</target>
        </trans-unit>
        <trans-unit id="21f639f7916c0989e45d99b6f8d95bb479e2a7dc" translate="yes" xml:space="preserve">
          <source>In the examples below, imagine that you&amp;rsquo;re in a buffer that looks like this:</source>
          <target state="translated">En los ejemplos siguientes, imagina que est&amp;aacute;s en un b&amp;uacute;fer que tiene este aspecto:</target>
        </trans-unit>
        <trans-unit id="45cdf70211c7a85bbbe2f457d2d568784938c5c8" translate="yes" xml:space="preserve">
          <source>In the examples below, the buffer &amp;lsquo;</source>
          <target state="translated">En los ejemplos siguientes, el b&amp;uacute;fer '</target>
        </trans-unit>
        <trans-unit id="50c103b8760cb1abed49a28229f31f25093e7fe2" translate="yes" xml:space="preserve">
          <source>In the examples below, we show the &lt;em&gt;display appearance&lt;/em&gt; of the buffer &lt;code&gt;foo&lt;/code&gt;, which changes with the value of &lt;code&gt;selective-display&lt;/code&gt;. The &lt;em&gt;contents&lt;/em&gt; of the buffer do not change.</source>
          <target state="translated">En los ejemplos siguientes, mostramos la &lt;em&gt;apariencia&lt;/em&gt; de &lt;em&gt;visualizaci&amp;oacute;n&lt;/em&gt; del b&amp;uacute;fer &lt;code&gt;foo&lt;/code&gt; , que cambia con el valor de &lt;code&gt;selective-display&lt;/code&gt; . El &lt;em&gt;contenido&lt;/em&gt; del b&amp;uacute;fer no cambia.</target>
        </trans-unit>
        <trans-unit id="8d8e5189aaefce12f30329357296c95e61a38bdb" translate="yes" xml:space="preserve">
          <source>In the first example below, the user types the character</source>
          <target state="translated">En el primer ejemplo que figura a continuación,el usuario escribe el carácter</target>
        </trans-unit>
        <trans-unit id="1bcb5b6f5d8b3ef6f45f427e9e77f07309f79243" translate="yes" xml:space="preserve">
          <source>In the first of the following examples, the string &amp;lsquo;</source>
          <target state="translated">En el primero de los siguientes ejemplos, la cadena '</target>
        </trans-unit>
        <trans-unit id="8d216f0c7f12baf6cd4ed80a6b27ab324e470109" translate="yes" xml:space="preserve">
          <source>In the first part of the following example, we list two files,</source>
          <target state="translated">En la primera parte del siguiente ejemplo,enumeramos dos archivos,</target>
        </trans-unit>
        <trans-unit id="acff65f1c9d9496c4b122331f3a702dc9fa85418" translate="yes" xml:space="preserve">
          <source>In the following documentation, &lt;var&gt;spec&lt;/var&gt; refers to a data layout specification, &lt;code&gt;bindat-raw&lt;/code&gt; to a byte array, and &lt;var&gt;struct&lt;/var&gt; to an alist representing unpacked field data.</source>
          <target state="translated">En la siguiente documentaci&amp;oacute;n, &lt;var&gt;spec&lt;/var&gt; se refiere a una especificaci&amp;oacute;n de dise&amp;ntilde;o de datos, &lt;code&gt;bindat-raw&lt;/code&gt; a una matriz de bytes y &lt;var&gt;struct&lt;/var&gt; a una alista que representa datos de campo desempaquetados.</target>
        </trans-unit>
        <trans-unit id="0f00c733671a04000a05bf717e25acf161719f5a" translate="yes" xml:space="preserve">
          <source>In the following example,</source>
          <target state="translated">En el siguiente ejemplo,</target>
        </trans-unit>
        <trans-unit id="e2316694a9af81a8f03d3bab0408009a0c338429" translate="yes" xml:space="preserve">
          <source>In the following example, Emacs displays the prompt &amp;lsquo;</source>
          <target state="translated">En el siguiente ejemplo, Emacs muestra el mensaje '</target>
        </trans-unit>
        <trans-unit id="4a721fdb8420736a6ae7cc10bb2e34400e9c7e6d" translate="yes" xml:space="preserve">
          <source>In the following example, a Lisp expression calls &lt;code&gt;backtrace&lt;/code&gt; explicitly. This prints the backtrace to the stream &lt;code&gt;standard-output&lt;/code&gt;, which, in this case, is the buffer &amp;lsquo;</source>
          <target state="translated">En el siguiente ejemplo, una expresi&amp;oacute;n Lisp llama a &lt;code&gt;backtrace&lt;/code&gt; expl&amp;iacute;citamente. Esto imprime el backtrace a la &lt;code&gt;standard-output&lt;/code&gt; del flujo , que, en este caso, es el b&amp;uacute;fer '</target>
        </trans-unit>
        <trans-unit id="95ec3b70ec2b6de3a44a863ec7979700ca8528bc" translate="yes" xml:space="preserve">
          <source>In the following example, assume that the file</source>
          <target state="translated">En el siguiente ejemplo,supongamos que el archivo</target>
        </trans-unit>
        <trans-unit id="d4d9cd6735838e19fca58cfa4e5f227b1e63a68a" translate="yes" xml:space="preserve">
          <source>In the following example, assume that the first character in the buffer is &amp;lsquo;</source>
          <target state="translated">En el siguiente ejemplo, suponga que el primer car&amp;aacute;cter del b&amp;uacute;fer es '</target>
        </trans-unit>
        <trans-unit id="cbbae18ed437d3d1b7cd3f29fa619c133fefd3c5" translate="yes" xml:space="preserve">
          <source>In the following example, numerous symbols begin with the characters &amp;lsquo;</source>
          <target state="translated">En el siguiente ejemplo, numerosos s&amp;iacute;mbolos comienzan con los caracteres '</target>
        </trans-unit>
        <trans-unit id="1d8315041ff8cb6c06515b158189a3073ed152cc" translate="yes" xml:space="preserve">
          <source>In the following example, point is at the beginning of the second line:</source>
          <target state="translated">En el siguiente ejemplo,el punto está al principio de la segunda línea:</target>
        </trans-unit>
        <trans-unit id="42ecbf1ba17019105911ffebbbf6edf40624a688" translate="yes" xml:space="preserve">
          <source>In the following example, point is initially at the beginning of the line. Then &lt;code&gt;(search-forward &quot;fox&quot;)&lt;/code&gt; moves point after the last letter of &amp;lsquo;</source>
          <target state="translated">En el siguiente ejemplo, el punto est&amp;aacute; inicialmente al principio de la l&amp;iacute;nea. Luego &lt;code&gt;(search-forward &quot;fox&quot;)&lt;/code&gt; mueve el punto despu&amp;eacute;s de la &amp;uacute;ltima letra de '</target>
        </trans-unit>
        <trans-unit id="4e4648a8ef8c97faf71ce36a2f1da992a66ce66a" translate="yes" xml:space="preserve">
          <source>In the following example, point is initially before the &amp;lsquo;</source>
          <target state="translated">En el siguiente ejemplo, el punto est&amp;aacute; inicialmente antes del '</target>
        </trans-unit>
        <trans-unit id="998eebc83fc288fc771f6a8b8a1d104df394fe25" translate="yes" xml:space="preserve">
          <source>In the following example, point is initially located directly before the &amp;lsquo;</source>
          <target state="translated">En el siguiente ejemplo, el punto se ubica inicialmente directamente antes del '</target>
        </trans-unit>
        <trans-unit id="222a580e4261f699fc64318a04a2725d2450a74c" translate="yes" xml:space="preserve">
          <source>In the following example, suppose that</source>
          <target state="translated">En el siguiente ejemplo,supongamos que</target>
        </trans-unit>
        <trans-unit id="c4a412b551b194333428c49302d54e094323961e" translate="yes" xml:space="preserve">
          <source>In the following example, suppose that the current default directory has five files whose names begin with &amp;lsquo;</source>
          <target state="translated">En el siguiente ejemplo, suponga que el directorio predeterminado actual tiene cinco archivos cuyos nombres comienzan con '</target>
        </trans-unit>
        <trans-unit id="5723aa0ef8724a536d5900f5c59be1d86438116d" translate="yes" xml:space="preserve">
          <source>In the following example, the &lt;code&gt;(list 4)&lt;/code&gt; that &lt;code&gt;delq&lt;/code&gt; attempts to match and the &lt;code&gt;(4)&lt;/code&gt; in the &lt;code&gt;sample-list&lt;/code&gt; are &lt;code&gt;equal&lt;/code&gt; but not &lt;code&gt;eq&lt;/code&gt;:</source>
          <target state="translated">En el siguiente ejemplo, la &lt;code&gt;(list 4)&lt;/code&gt; que &lt;code&gt;delq&lt;/code&gt; intenta hacer coincidir y la &lt;code&gt;(4)&lt;/code&gt; en la &lt;code&gt;sample-list&lt;/code&gt; son &lt;code&gt;equal&lt;/code&gt; pero no &lt;code&gt;eq&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="49c3d7898ccead7f82ec14a83d5c284abbacaed2" translate="yes" xml:space="preserve">
          <source>In the following example, the function &lt;code&gt;simple-rec&lt;/code&gt; first advances point one word, then enters a recursive edit, printing out a message in the echo area. The user can then do any editing desired, and then type</source>
          <target state="translated">En el siguiente ejemplo, la funci&amp;oacute;n &lt;code&gt;simple-rec&lt;/code&gt; primero avanza el punto una palabra, luego ingresa una edici&amp;oacute;n recursiva, imprimiendo un mensaje en el &amp;aacute;rea de eco. El usuario puede realizar cualquier edici&amp;oacute;n que desee y luego escribir</target>
        </trans-unit>
        <trans-unit id="bdd55f89db54776fce5243ffc69b1e9e59acdf44" translate="yes" xml:space="preserve">
          <source>In the following example, the user enters &amp;lsquo;</source>
          <target state="translated">En el siguiente ejemplo, el usuario ingresa '</target>
        </trans-unit>
        <trans-unit id="7407d41abc6236fc89ae0cd2ce1bcece190e1422" translate="yes" xml:space="preserve">
          <source>In the following example, the user may type a number of characters right after starting the evaluation of the form. After the &lt;code&gt;sleep-for&lt;/code&gt; finishes sleeping, &lt;code&gt;discard-input&lt;/code&gt; discards any characters typed during the sleep.</source>
          <target state="translated">En el siguiente ejemplo, el usuario puede escribir varios caracteres justo despu&amp;eacute;s de comenzar la evaluaci&amp;oacute;n del formulario. Una vez que el &lt;code&gt;sleep-for&lt;/code&gt; termina de dormir, &lt;code&gt;discard-input&lt;/code&gt; descarte descarta cualquier car&amp;aacute;cter escrito durante el sue&amp;ntilde;o.</target>
        </trans-unit>
        <trans-unit id="f7696bfce1413c1620baa40974e9b096f97b1062" translate="yes" xml:space="preserve">
          <source>In the following example, the user types in the octal number 177 (which is 127 in decimal).</source>
          <target state="translated">En el siguiente ejemplo,el usuario teclea el número octal 177 (que es 127 en decimal).</target>
        </trans-unit>
        <trans-unit id="90031aaefbae5ba18088f25e005afdff8b8be5df" translate="yes" xml:space="preserve">
          <source>In the following example, we define a &lt;code&gt;change-property&lt;/code&gt; function that takes a function as its third argument, followed by a &lt;code&gt;double-property&lt;/code&gt; function that makes use of &lt;code&gt;change-property&lt;/code&gt; by passing it an anonymous function:</source>
          <target state="translated">En el siguiente ejemplo, definimos una funci&amp;oacute;n de &lt;code&gt;change-property&lt;/code&gt; que toma una funci&amp;oacute;n como su tercer argumento, seguida de una funci&amp;oacute;n de &lt;code&gt;double-property&lt;/code&gt; que hace uso de &lt;code&gt;change-property&lt;/code&gt; de cambio pas&amp;aacute;ndole una funci&amp;oacute;n an&amp;oacute;nima:</target>
        </trans-unit>
        <trans-unit id="9a1fd088e9ae4b7e83b043fac095f41e72df8bbd" translate="yes" xml:space="preserve">
          <source>In the following example, we make</source>
          <target state="translated">En el siguiente ejemplo,hacemos</target>
        </trans-unit>
        <trans-unit id="f9648cfc2ef9e1392db8901e3933f175d8a84fca" translate="yes" xml:space="preserve">
          <source>In the following example, we offer the user an expression with initial text that is already a valid form:</source>
          <target state="translated">En el siguiente ejemplo,ofrecemos al usuario una expresión con texto inicial que ya es una forma válida:</target>
        </trans-unit>
        <trans-unit id="2e3e4218ff460b22a5180b17ddb295a8da5eceae" translate="yes" xml:space="preserve">
          <source>In the following example, we set the value of a symbol with &lt;code&gt;setq&lt;/code&gt;. Then we evaluate the symbol, and get back the value that &lt;code&gt;setq&lt;/code&gt; stored.</source>
          <target state="translated">En el siguiente ejemplo, establecemos el valor de un s&amp;iacute;mbolo con &lt;code&gt;setq&lt;/code&gt; . Luego evaluamos el s&amp;iacute;mbolo y recuperamos el valor que almacen&amp;oacute; &lt;code&gt;setq&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="f311afb8bd19dedc75d6adda2a147ef509e3a73e" translate="yes" xml:space="preserve">
          <source>In the following example, we use &lt;code&gt;call-process-region&lt;/code&gt; to run the &lt;code&gt;cat&lt;/code&gt; utility, with standard input being the first five characters in buffer &amp;lsquo;</source>
          <target state="translated">En el siguiente ejemplo, usamos &lt;code&gt;call-process-region&lt;/code&gt; para ejecutar la utilidad &lt;code&gt;cat&lt;/code&gt; , siendo la entrada est&amp;aacute;ndar los primeros cinco caracteres en el b&amp;uacute;fer '</target>
        </trans-unit>
        <trans-unit id="2ed30191890b49ad905f6c690d281609333d59e9" translate="yes" xml:space="preserve">
          <source>In the following examples, we call &lt;code&gt;delete-horizontal-space&lt;/code&gt; four times, once on each line, with point between the second and third characters on the line each time.</source>
          <target state="translated">En los siguientes ejemplos, llamamos &lt;code&gt;delete-horizontal-space&lt;/code&gt; cuatro veces, una vez en cada l&amp;iacute;nea, con un punto entre el segundo y tercer car&amp;aacute;cter de la l&amp;iacute;nea cada vez.</target>
        </trans-unit>
        <trans-unit id="d73b2eb7e108f2274f2167b405818a1a4e5e8de9" translate="yes" xml:space="preserve">
          <source>In the following four functions, &amp;ldquo;beginning&amp;rdquo; or &amp;ldquo;end&amp;rdquo; of buffer refers to the beginning or end of the accessible portion.</source>
          <target state="translated">En las siguientes cuatro funciones, &quot;principio&quot; o &quot;final&quot; del b&amp;uacute;fer se refiere al principio o al final de la parte accesible.</target>
        </trans-unit>
        <trans-unit id="b77941da969f1ea78534b72b05e1f2ecd1399269" translate="yes" xml:space="preserve">
          <source>In the functions below, &lt;var&gt;stream&lt;/var&gt; stands for an input stream (see the previous section). If &lt;var&gt;stream&lt;/var&gt; is &lt;code&gt;nil&lt;/code&gt; or omitted, it defaults to the value of &lt;code&gt;standard-input&lt;/code&gt;.</source>
          <target state="translated">En las funciones siguientes, &lt;var&gt;stream&lt;/var&gt; representa un flujo de entrada (consulte la secci&amp;oacute;n anterior). Si el &lt;var&gt;stream&lt;/var&gt; es &lt;code&gt;nil&lt;/code&gt; o se omite, toma el valor predeterminado de &lt;code&gt;standard-input&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="e02f70d33a63dec1a218a9f9fe21d0936515a768" translate="yes" xml:space="preserve">
          <source>In the functions below, &lt;var&gt;stream&lt;/var&gt; stands for an output stream. (See the previous section for a description of output streams. Also See &lt;a href=&quot;output-streams#external_002ddebugging_002doutput&quot;&gt;external-debugging-output&lt;/a&gt;, a useful stream value for debugging.) If &lt;var&gt;stream&lt;/var&gt; is &lt;code&gt;nil&lt;/code&gt; or omitted, it defaults to the value of &lt;code&gt;standard-output&lt;/code&gt;.</source>
          <target state="translated">En las funciones siguientes, &lt;var&gt;stream&lt;/var&gt; representa un flujo de salida. (Consulte la secci&amp;oacute;n anterior para obtener una descripci&amp;oacute;n de los flujos de salida. Consulte tambi&amp;eacute;n &lt;a href=&quot;output-streams#external_002ddebugging_002doutput&quot;&gt;external-debugging-output&lt;/a&gt; , un valor de flujo &amp;uacute;til para la depuraci&amp;oacute;n). Si el &lt;var&gt;stream&lt;/var&gt; es &lt;code&gt;nil&lt;/code&gt; o se omite, toma el valor predeterminado de &lt;code&gt;standard-output&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="842ff05e729e0c493fb0e3ce6cf4160def60f98a" translate="yes" xml:space="preserve">
          <source>In the functions that have an argument &lt;var&gt;newname&lt;/var&gt;, if a file by the name of &lt;var&gt;newname&lt;/var&gt; already exists, the actions taken depend on the value of the argument &lt;var&gt;ok-if-already-exists&lt;/var&gt;:</source>
          <target state="translated">En las funciones que tienen un argumento &lt;var&gt;newname&lt;/var&gt; , si ya existe un archivo con el nombre &lt;var&gt;newname&lt;/var&gt; , las acciones tomadas dependen del valor del argumento &lt;var&gt;ok-if-already-exists&lt;/var&gt; :</target>
        </trans-unit>
        <trans-unit id="b9986edbcc327565facd71c28fb47353a1513f05" translate="yes" xml:space="preserve">
          <source>In the functions that have an argument &lt;var&gt;newname&lt;/var&gt;, if this argument is a directory name it is treated as if the nondirectory part of the source name were appended. Typically, a directory name is one that ends in &amp;lsquo;</source>
          <target state="translated">En las funciones que tienen un argumento &lt;var&gt;newname&lt;/var&gt; , si este argumento es un nombre de directorio, se trata como si se hubiera agregado la parte no directorio del nombre de la fuente. Por lo general, un nombre de directorio es uno que termina en '</target>
        </trans-unit>
        <trans-unit id="3ff38bdd102a36bf5dad69f0bd3a4c48bcbb2f33" translate="yes" xml:space="preserve">
          <source>In the minibuffer,</source>
          <target state="translated">En el minibús,</target>
        </trans-unit>
        <trans-unit id="95d42950506f5e85d9c00b2291550dcad572692d" translate="yes" xml:space="preserve">
          <source>In the new syntax table, all characters are initially given the &amp;ldquo;inherit&amp;rdquo; (&amp;lsquo;</source>
          <target state="translated">En la nueva tabla de sintaxis, a todos los caracteres se les da inicialmente el &quot;heredar&quot; ('</target>
        </trans-unit>
        <trans-unit id="654197206043d5aa17cba42455172c4d80bf915c" translate="yes" xml:space="preserve">
          <source>In the output, tab and newline appear as themselves.</source>
          <target state="translated">En la salida,el tabulador y la nueva línea aparecen como ellos mismos.</target>
        </trans-unit>
        <trans-unit id="f0a865aff1bbfb0c542ac415212a86fda6d690da" translate="yes" xml:space="preserve">
          <source>In the parse tree, each HTML node is represented by a list in which the first element is a symbol representing the node name, the second element is an alist of node attributes, and the remaining elements are the subnodes.</source>
          <target state="translated">En el árbol de análisis,cada nodo HTML está representado por una lista en la que el primer elemento es un símbolo que representa el nombre del nodo,el segundo elemento es una lista de atributos del nodo,y los elementos restantes son los subnodos.</target>
        </trans-unit>
        <trans-unit id="a6aa826dba60e33cee2ff73324e1dfc071fd99de" translate="yes" xml:space="preserve">
          <source>In the previous section, the definition of &lt;code&gt;for&lt;/code&gt; was fixed as follows to make the expansion evaluate the macro arguments the proper number of times:</source>
          <target state="translated">En la secci&amp;oacute;n anterior, la definici&amp;oacute;n de &lt;code&gt;for&lt;/code&gt; se corrigi&amp;oacute; de la siguiente manera para que la expansi&amp;oacute;n eval&amp;uacute;e los argumentos macro el n&amp;uacute;mero adecuado de veces:</target>
        </trans-unit>
        <trans-unit id="d94acc49f6466170529c5b4de675f17843e1d018" translate="yes" xml:space="preserve">
          <source>In the previous sections we have described how to construct elaborate type specifications for &lt;code&gt;defcustom&lt;/code&gt;. In some cases you may want to give such a type specification a name. The obvious case is when you are using the same type for many user options: rather than repeat the specification for each option, you can give the type specification a name, and use that name each &lt;code&gt;defcustom&lt;/code&gt;. The other case is when a user option&amp;rsquo;s value is a recursive data structure. To make it possible for a datatype to refer to itself, it needs to have a name.</source>
          <target state="translated">En las secciones anteriores hemos descrito c&amp;oacute;mo construir especificaciones de tipo elaboradas para &lt;code&gt;defcustom&lt;/code&gt; . En algunos casos, es posible que desee asignar un nombre a dicha especificaci&amp;oacute;n de tipo. El caso obvio es cuando est&amp;aacute; usando el mismo tipo para muchas opciones de usuario: en lugar de repetir la especificaci&amp;oacute;n para cada opci&amp;oacute;n, puede darle un nombre a la especificaci&amp;oacute;n de tipo y usar ese nombre en cada &lt;code&gt;defcustom&lt;/code&gt; . El otro caso es cuando el valor de una opci&amp;oacute;n de usuario es una estructura de datos recursiva. Para hacer posible que un tipo de datos se refiera a s&amp;iacute; mismo, debe tener un nombre.</target>
        </trans-unit>
        <trans-unit id="e1fe76b2ce299aa2f258889220086dc41caa10db" translate="yes" xml:space="preserve">
          <source>In the previous subsection we have described in detail how individual action functions interpret the action alist entries they care about. Here we give a reference list of all known action alist entries according to their symbols, together with their values and action functions (see &lt;a href=&quot;buffer-display-action-functions#Buffer-Display-Action-Functions&quot;&gt;Buffer Display Action Functions&lt;/a&gt;) that recognize them. Throughout this list, the terms &amp;ldquo;buffer&amp;rdquo; will refer to the buffer &lt;code&gt;display-buffer&lt;/code&gt; is supposed to display, and &amp;ldquo;value&amp;rdquo; refers to the entry&amp;rsquo;s value.</source>
          <target state="translated">En la subsecci&amp;oacute;n anterior hemos descrito en detalle c&amp;oacute;mo las funciones de acci&amp;oacute;n individuales interpretan las entradas de la lista de acciones que les interesan. Aqu&amp;iacute; proporcionamos una lista de referencia de todas las entradas de la lista de acciones conocidas seg&amp;uacute;n sus s&amp;iacute;mbolos, junto con sus valores y funciones de acci&amp;oacute;n (consulte &lt;a href=&quot;buffer-display-action-functions#Buffer-Display-Action-Functions&quot;&gt;Funciones de acci&amp;oacute;n de visualizaci&amp;oacute;n de b&amp;uacute;fer&lt;/a&gt; ) que las reconocen. A lo largo de esta lista, los t&amp;eacute;rminos &amp;ldquo;b&amp;uacute;fer&amp;rdquo; se referir&amp;aacute;n al b&amp;uacute;fer de &lt;code&gt;display-buffer&lt;/code&gt; se supone que debe mostrar el b&amp;uacute;fer , y &amp;ldquo;valor&amp;rdquo; se refiere al valor de la entrada.</target>
        </trans-unit>
        <trans-unit id="70305cb871bf1fadf003b84d92f8f772b2e037ea" translate="yes" xml:space="preserve">
          <source>In the return value, &lt;var&gt;function&lt;/var&gt; is whatever was supplied as the &lt;small&gt;CAR&lt;/small&gt; of the evaluated list, or a &lt;code&gt;lambda&lt;/code&gt; expression in the case of a macro call. If the function has a &lt;code&gt;&amp;amp;rest&lt;/code&gt; argument, that is represented as the tail of the list &lt;var&gt;arg-values&lt;/var&gt;.</source>
          <target state="translated">En el valor de retorno, la &lt;var&gt;function&lt;/var&gt; es lo que se proporcion&amp;oacute; como el &lt;small&gt;CAR&lt;/small&gt; de la lista evaluada, o una expresi&amp;oacute;n &lt;code&gt;lambda&lt;/code&gt; en el caso de una llamada de macro. Si la funci&amp;oacute;n tiene un argumento &lt;code&gt;&amp;amp;rest&lt;/code&gt; , eso se representa como la cola de la lista &lt;var&gt;arg-values&lt;/var&gt; .</target>
        </trans-unit>
        <trans-unit id="a43342cb008eceb0301dec01749bcef5885ffad6" translate="yes" xml:space="preserve">
          <source>In the second expression, the local binding of &lt;code&gt;print-escape-newlines&lt;/code&gt; is in effect during the call to &lt;code&gt;prin1&lt;/code&gt;, but not during the printing of the result.</source>
          <target state="translated">En la segunda expresi&amp;oacute;n, el enlace local de &lt;code&gt;print-escape-newlines&lt;/code&gt; est&amp;aacute; en efecto durante la llamada a &lt;code&gt;prin1&lt;/code&gt; , pero no durante la impresi&amp;oacute;n del resultado.</target>
        </trans-unit>
        <trans-unit id="780bba30b6e90faed0e2ade0fdd2f1da2fdca85f" translate="yes" xml:space="preserve">
          <source>In the second variant, the choice of lines to hide is made automatically based on indentation. This variant is designed to be a user-level feature.</source>
          <target state="translated">En la segunda variante,la elección de las líneas a ocultar se hace automáticamente en base a la indentación.Esta variante está diseñada para ser una característica a nivel de usuario.</target>
        </trans-unit>
        <trans-unit id="bffc354f8e26188db7e818c849dff5db0c9e8f32" translate="yes" xml:space="preserve">
          <source>In the simplest case, &lt;var&gt;listname&lt;/var&gt; is an unquoted symbol naming a list; in that case, this macro is equivalent to &lt;code&gt;(prog1&amp;nbsp;(car&amp;nbsp;listname)&amp;nbsp;(setq&amp;nbsp;listname&amp;nbsp;(cdr&amp;nbsp;listname)))&lt;/code&gt;.</source>
          <target state="translated">En el caso m&amp;aacute;s simple, &lt;var&gt;listname&lt;/var&gt; es un s&amp;iacute;mbolo sin comillas que nombra una lista; en ese caso, esta macro es equivalente a &lt;code&gt;(prog1&amp;nbsp;(car&amp;nbsp;listname)&amp;nbsp;(setq&amp;nbsp;listname&amp;nbsp;(cdr&amp;nbsp;listname)))&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="6677923bd341b8f53bd4e45ad643c994637a35f0" translate="yes" xml:space="preserve">
          <source>In the simplest case, &lt;var&gt;separator-type&lt;/var&gt; consists of only dashes. That specifies the default kind of separator. (For compatibility, &lt;code&gt;&quot;&quot;&lt;/code&gt; and &lt;code&gt;-&lt;/code&gt; also count as separators.)</source>
          <target state="translated">En el caso m&amp;aacute;s simple, &lt;var&gt;separator-type&lt;/var&gt; consta solo de guiones. Eso especifica el tipo de separador predeterminado. (Por compatibilidad, &lt;code&gt;&quot;&quot;&lt;/code&gt; y &lt;code&gt;-&lt;/code&gt; tambi&amp;eacute;n cuentan como separadores).</target>
        </trans-unit>
        <trans-unit id="4ac8ea59e19025468a89992b0f2dbc087cbc7d49" translate="yes" xml:space="preserve">
          <source>In the simplest case, any non-&lt;code&gt;nil&lt;/code&gt;&lt;code&gt;invisible&lt;/code&gt; property makes a character invisible. This is the default case&amp;mdash;if you don&amp;rsquo;t alter the default value of &lt;code&gt;buffer-invisibility-spec&lt;/code&gt;, this is how the &lt;code&gt;invisible&lt;/code&gt; property works. You should normally use &lt;code&gt;t&lt;/code&gt; as the value of the &lt;code&gt;invisible&lt;/code&gt; property if you don&amp;rsquo;t plan to set &lt;code&gt;buffer-invisibility-spec&lt;/code&gt; yourself.</source>
          <target state="translated">En el caso m&amp;aacute;s simple, cualquier propiedad &lt;code&gt;invisible&lt;/code&gt; que no sea &lt;code&gt;nil&lt;/code&gt; hace que un car&amp;aacute;cter sea invisible. Este es el caso predeterminado: si no modifica el valor predeterminado de &lt;code&gt;buffer-invisibility-spec&lt;/code&gt; , as&amp;iacute; es como funciona la propiedad &lt;code&gt;invisible&lt;/code&gt; . Normalmente deber&amp;iacute;a usar &lt;code&gt;t&lt;/code&gt; como el valor de la propiedad &lt;code&gt;invisible&lt;/code&gt; si no planea establecer &lt;code&gt;buffer-invisibility-spec&lt;/code&gt; usted mismo.</target>
        </trans-unit>
        <trans-unit id="b654a675313cc501deccb72dafb7cf632e0a67de" translate="yes" xml:space="preserve">
          <source>In the string representation, alphanumeric characters ordinarily stand for themselves; for example, &lt;code&gt;&quot;a&quot;&lt;/code&gt; represents</source>
          <target state="translated">En la representaci&amp;oacute;n de cadena, los caracteres alfanum&amp;eacute;ricos normalmente se representan a s&amp;iacute; mismos; por ejemplo, &lt;code&gt;&quot;a&quot;&lt;/code&gt; representa</target>
        </trans-unit>
        <trans-unit id="68ea687212db99586a26415019a5a3e01bea5f4c" translate="yes" xml:space="preserve">
          <source>In the terminology of operating systems, a &lt;em&gt;process&lt;/em&gt; is a space in which a program can execute. Emacs runs in a process. Emacs Lisp programs can invoke other programs in processes of their own. These are called &lt;em&gt;subprocesses&lt;/em&gt; or &lt;em&gt;child processes&lt;/em&gt; of the Emacs process, which is their &lt;em&gt;parent process&lt;/em&gt;.</source>
          <target state="translated">En la terminolog&amp;iacute;a de los sistemas operativos, un &lt;em&gt;proceso&lt;/em&gt; es un espacio en el que se puede ejecutar un programa. Emacs se ejecuta en un proceso. Los programas Emacs Lisp pueden invocar otros programas en sus propios procesos. Estos se denominan &lt;em&gt;subprocesos&lt;/em&gt; o &lt;em&gt;procesos secundarios del proceso&lt;/em&gt; de Emacs, que es su &lt;em&gt;proceso padre&lt;/em&gt; .</target>
        </trans-unit>
        <trans-unit id="20d433bd64cf194bf3401eb20026d1e5a072b7d8" translate="yes" xml:space="preserve">
          <source>In the unlikely event that you need a more general functionality than &lt;code&gt;custom-initialize-delay&lt;/code&gt; provides, you can use &lt;code&gt;before-init-hook&lt;/code&gt; (see &lt;a href=&quot;startup-summary#Startup-Summary&quot;&gt;Startup Summary&lt;/a&gt;).</source>
          <target state="translated">En el improbable caso de que necesite una funcionalidad m&amp;aacute;s general que la que proporciona &lt;code&gt;custom-initialize-delay&lt;/code&gt; , puede usar &lt;code&gt;before-init-hook&lt;/code&gt; (consulte &lt;a href=&quot;startup-summary#Startup-Summary&quot;&gt;Resumen de inicio&lt;/a&gt; ).</target>
        </trans-unit>
        <trans-unit id="653d17f655aa9bc207c0340a07989c300bfc7174" translate="yes" xml:space="preserve">
          <source>In the vector representation, each element of the vector represents an input event, in its Lisp form. See &lt;a href=&quot;input-events#Input-Events&quot;&gt;Input Events&lt;/a&gt;. For example, the vector &lt;code&gt;[?\C-x ?l]&lt;/code&gt; represents the key sequence</source>
          <target state="translated">En la representaci&amp;oacute;n vectorial, cada elemento del vector representa un evento de entrada, en su forma Lisp. Consulte &lt;a href=&quot;input-events#Input-Events&quot;&gt;Eventos de entrada&lt;/a&gt; . Por ejemplo, el vector &lt;code&gt;[?\C-x ?l]&lt;/code&gt; representa la secuencia de teclas</target>
        </trans-unit>
        <trans-unit id="37545e5ede88b47c3c895f58d985de6aa2297176" translate="yes" xml:space="preserve">
          <source>In their most simple form of use, side windows allow to display specific buffers always in the same area of a frame. Hence they can be regarded as a generalization of the concept provided by &lt;code&gt;display-buffer-at-bottom&lt;/code&gt; (see &lt;a href=&quot;buffer-display-action-functions#Buffer-Display-Action-Functions&quot;&gt;Buffer Display Action Functions&lt;/a&gt;) to the remaining sides of a frame. With suitable customizations, however, side windows can be also used to provide frame layouts similar to those found in so-called integrated development environments (IDEs).</source>
          <target state="translated">En su forma m&amp;aacute;s simple de uso, las ventanas laterales permiten mostrar b&amp;uacute;feres espec&amp;iacute;ficos siempre en la misma &amp;aacute;rea de un marco. Por lo tanto, se pueden considerar como una generalizaci&amp;oacute;n del concepto proporcionado por &lt;code&gt;display-buffer-at-bottom&lt;/code&gt; (ver &lt;a href=&quot;buffer-display-action-functions#Buffer-Display-Action-Functions&quot;&gt;Funciones de acci&amp;oacute;n de visualizaci&amp;oacute;n de b&amp;uacute;fer&lt;/a&gt; ) a los lados restantes de un marco. Sin embargo, con las personalizaciones adecuadas, las ventanas laterales tambi&amp;eacute;n se pueden utilizar para proporcionar dise&amp;ntilde;os de marcos similares a los que se encuentran en los denominados entornos de desarrollo integrados (IDE).</target>
        </trans-unit>
        <trans-unit id="4da8e1cd8146f3a0b7e768a0095492966a0a3fcb" translate="yes" xml:space="preserve">
          <source>In theory, a theme file can also contain other Lisp forms, which would be evaluated when loading the theme, but that is bad form. To protect against loading themes containing malicious code, Emacs displays the source file and asks for confirmation from the user before loading any non-built-in theme for the first time. As such, themes are not ordinarily byte-compiled, and source files always take precedence when Emacs is looking for a theme to load.</source>
          <target state="translated">En teoría,un archivo de tema también puede contener otras formas de Lisp,que se evaluarían al cargar el tema,pero eso es una mala forma.Para protegerse contra la carga de temas que contengan código malicioso,Emacs muestra el archivo fuente y pide confirmación al usuario antes de cargar cualquier tema no incorporado por primera vez.Como tal,los temas no son normalmente compilados en bytes,y los archivos de origen siempre tienen prioridad cuando Emacs busca un tema para cargar.</target>
        </trans-unit>
        <trans-unit id="bdc0c811869c12153b361b16802c27840ea05add" translate="yes" xml:space="preserve">
          <source>In these functions, the &lt;var&gt;process&lt;/var&gt; argument can be a process or the name of a process, or a buffer or buffer name (which stands for a process via &lt;code&gt;get-buffer-process&lt;/code&gt;). &lt;code&gt;nil&lt;/code&gt; means the current buffer&amp;rsquo;s process.</source>
          <target state="translated">En estas funciones, el argumento del &lt;var&gt;process&lt;/var&gt; puede ser un proceso o el nombre de un proceso, o un b&amp;uacute;fer o un nombre de b&amp;uacute;fer (que significa un proceso a trav&amp;eacute;s de &lt;code&gt;get-buffer-process&lt;/code&gt; ). &lt;code&gt;nil&lt;/code&gt; significa el proceso del b&amp;uacute;fer actual.</target>
        </trans-unit>
        <trans-unit id="7889cf29aeb64d8679d013ba57b97d89a395974a" translate="yes" xml:space="preserve">
          <source>In this case &lt;code&gt;with-temp-buffer-window&lt;/code&gt; always makes a new parent window when it splits an existing window (see &lt;a href=&quot;temporary-displays#Temporary-Displays&quot;&gt;Temporary Displays&lt;/a&gt;). Otherwise, window splitting behaves as for &lt;code&gt;nil&lt;/code&gt;.</source>
          <target state="translated">En este caso, &lt;code&gt;with-temp-buffer-window&lt;/code&gt; siempre crea una nueva ventana principal cuando divide una ventana existente (consulte &lt;a href=&quot;temporary-displays#Temporary-Displays&quot;&gt;Pantallas temporales&lt;/a&gt; ). De lo contrario, la divisi&amp;oacute;n de ventanas se comporta como &lt;code&gt;nil&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="4aad296f13c9498890681b6eab23e4731825c14d" translate="yes" xml:space="preserve">
          <source>In this case &lt;code&gt;with-temp-buffer-window&lt;/code&gt; makes a new parent window when it splits a window and &lt;code&gt;temp-buffer-resize-mode&lt;/code&gt; is enabled (see &lt;a href=&quot;temporary-displays#Temporary-Displays&quot;&gt;Temporary Displays&lt;/a&gt;). Otherwise, window splitting behaves as for &lt;code&gt;nil&lt;/code&gt;.</source>
          <target state="translated">En este caso, &lt;code&gt;with-temp-buffer-window&lt;/code&gt; crea una nueva ventana principal cuando divide una ventana y &lt;code&gt;temp-buffer-resize-mode&lt;/code&gt; est&amp;aacute; habilitado (ver &lt;a href=&quot;temporary-displays#Temporary-Displays&quot;&gt;Pantallas temporales&lt;/a&gt; ). De lo contrario, la divisi&amp;oacute;n de ventanas se comporta como &lt;code&gt;nil&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="f92ba4ac4b99574f776831ff1c5804087ad33c57" translate="yes" xml:space="preserve">
          <source>In this case the &lt;code&gt;inhibit-same-window&lt;/code&gt; alist entry will successfully invalidate the &lt;code&gt;display-buffer-same-window&lt;/code&gt; specification from &lt;code&gt;display-buffer-overriding-action&lt;/code&gt; and &lt;code&gt;display-buffer&lt;/code&gt; will show</source>
          <target state="translated">En este caso, la entrada &lt;code&gt;inhibit-same-window&lt;/code&gt; alist invalidar&amp;aacute; con &amp;eacute;xito la especificaci&amp;oacute;n &lt;code&gt;display-buffer-same-window&lt;/code&gt; de &lt;code&gt;display-buffer-overriding-action&lt;/code&gt; y &lt;code&gt;display-buffer&lt;/code&gt; mostrar&amp;aacute;</target>
        </trans-unit>
        <trans-unit id="04b2213a63614ac8251b3c7bc455f4e8850855b5" translate="yes" xml:space="preserve">
          <source>In this case, &lt;code&gt;&quot;prolog&quot;&lt;/code&gt; is the name of the file to load, 169681 refers to the documentation string in the</source>
          <target state="translated">En este caso, &lt;code&gt;&quot;prolog&quot;&lt;/code&gt; es el nombre del archivo a cargar, 169681 se refiere a la cadena de documentaci&amp;oacute;n en el</target>
        </trans-unit>
        <trans-unit id="8e648e458f3c001b5d685c0aaee6c84fe234be3f" translate="yes" xml:space="preserve">
          <source>In this case, the &lt;small&gt;CDR&lt;/small&gt; of the association &lt;code&gt;(lily white)&lt;/code&gt; is not the symbol &lt;code&gt;white&lt;/code&gt;, but rather the list &lt;code&gt;(white)&lt;/code&gt;. This becomes clearer if the association is written in dotted pair notation:</source>
          <target state="translated">En este caso, el &lt;small&gt;CDR&lt;/small&gt; de la asociaci&amp;oacute;n &lt;code&gt;(lily white)&lt;/code&gt; no es el s&amp;iacute;mbolo &lt;code&gt;white&lt;/code&gt; , sino la lista &lt;code&gt;(white)&lt;/code&gt; . Esto se vuelve m&amp;aacute;s claro si la asociaci&amp;oacute;n se escribe en notaci&amp;oacute;n de par de puntos:</target>
        </trans-unit>
        <trans-unit id="5c978b1007a3cfab25727c041633a410661259c5" translate="yes" xml:space="preserve">
          <source>In this case, the process is not truly synchronous, since it can run in parallel with Emacs; but you can think of it as synchronous in that Emacs is essentially finished with the subprocess as soon as this function returns.</source>
          <target state="translated">En este caso,el proceso no es verdaderamente sincrónico,ya que puede funcionar en paralelo con Emacs;pero puede considerarse sincrónico en el sentido de que Emacs está esencialmente terminado con el subproceso tan pronto como esta función regresa.</target>
        </trans-unit>
        <trans-unit id="3fc1a62b1e8add3600030a618eb06b7554d262e1" translate="yes" xml:space="preserve">
          <source>In this diagram, each box represents a slot that can hold or refer to any Lisp object. Each pair of boxes represents a cons cell. Each arrow represents a reference to a Lisp object, either an atom or another cons cell.</source>
          <target state="translated">En este diagrama,cada cuadro representa una ranura que puede contener o referirse a cualquier objeto de Lisp.Cada par de cajas representa una celda de estafa.Cada flecha representa una referencia a un objeto Lisp,ya sea un átomo u otra celda cons.</target>
        </trans-unit>
        <trans-unit id="5189ea2c15eedb2e76964428691f1c5cd904bd9e" translate="yes" xml:space="preserve">
          <source>In this example, point is between the &amp;lsquo;</source>
          <target state="translated">In this example, point is between the &amp;lsquo;</target>
        </trans-unit>
        <trans-unit id="f7926c062dd5a0ff5ef38fa8e29790f6b8333d0b" translate="yes" xml:space="preserve">
          <source>In this example, point is initially at the beginning of the buffer; the search leaves it between the &amp;lsquo;</source>
          <target state="translated">In this example, point is initially at the beginning of the buffer; the search leaves it between the &amp;lsquo;</target>
        </trans-unit>
        <trans-unit id="8a9cce26338257a7f7f918d357295fda94e21a00" translate="yes" xml:space="preserve">
          <source>In this example, point is initially located at the beginning of the second line:</source>
          <target state="translated">En este ejemplo,el punto se encuentra inicialmente al principio de la segunda línea:</target>
        </trans-unit>
        <trans-unit id="9c8ac6b39fdaea7c1429c01fa50b5a383964f56c" translate="yes" xml:space="preserve">
          <source>In this example, point is located directly before the &amp;lsquo;</source>
          <target state="translated">In this example, point is located directly before the &amp;lsquo;</target>
        </trans-unit>
        <trans-unit id="3576b093aaf2ac699eaa7e91d03edb88bd5e4be3" translate="yes" xml:space="preserve">
          <source>In this example, the first box, which holds the &lt;small&gt;CAR&lt;/small&gt; of the first cons cell, refers to or holds &lt;code&gt;rose&lt;/code&gt; (a symbol). The second box, holding the &lt;small&gt;CDR&lt;/small&gt; of the first cons cell, refers to the next pair of boxes, the second cons cell. The &lt;small&gt;CAR&lt;/small&gt; of the second cons cell is &lt;code&gt;violet&lt;/code&gt;, and its &lt;small&gt;CDR&lt;/small&gt; is the third cons cell. The &lt;small&gt;CDR&lt;/small&gt; of the third (and last) cons cell is &lt;code&gt;nil&lt;/code&gt;.</source>
          <target state="translated">In this example, the first box, which holds the &lt;small&gt;CAR&lt;/small&gt; of the first cons cell, refers to or holds &lt;code&gt;rose&lt;/code&gt; (a symbol). The second box, holding the &lt;small&gt;CDR&lt;/small&gt; of the first cons cell, refers to the next pair of boxes, the second cons cell. The &lt;small&gt;CAR&lt;/small&gt; of the second cons cell is &lt;code&gt;violet&lt;/code&gt; , and its &lt;small&gt;CDR&lt;/small&gt; is the third cons cell. The &lt;small&gt;CDR&lt;/small&gt; of the third (and last) cons cell is &lt;code&gt;nil&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="73de656109b1553b872ecb7b04fd7edf5fcf976d" translate="yes" xml:space="preserve">
          <source>In this example, the form is executed with buffer &amp;lsquo;</source>
          <target state="translated">In this example, the form is executed with buffer &amp;lsquo;</target>
        </trans-unit>
        <trans-unit id="4b9029e7a66aa0c9f8ca4c799ed66e0cfbb79118" translate="yes" xml:space="preserve">
          <source>In this example, the index for &amp;lsquo;</source>
          <target state="translated">In this example, the index for &amp;lsquo;</target>
        </trans-unit>
        <trans-unit id="764b384a226e6ab33f5227fab6776af37eb99b70" translate="yes" xml:space="preserve">
          <source>In this example, the interpreted code required 10 seconds to run, whereas the byte-compiled code required less than 4 seconds. These results are representative, but actual results may vary.</source>
          <target state="translated">En este ejemplo,el código interpretado requirió 10 segundos para ejecutarse,mientras que el código compilado por bytes requirió menos de 4 segundos.Estos resultados son representativos,pero los resultados reales pueden variar.</target>
        </trans-unit>
        <trans-unit id="6c60d69a652292ccff830c67c8d2351ad5e5e0b6" translate="yes" xml:space="preserve">
          <source>In this example, the value says that</source>
          <target state="translated">En este ejemplo,el valor dice que</target>
        </trans-unit>
        <trans-unit id="bf4b9ec25e056b797f6607ca8b59766a3a808319" translate="yes" xml:space="preserve">
          <source>In this kind of element, &lt;var&gt;anchored-highlighter&lt;/var&gt; specifies how to highlight text that follows a match found by &lt;var&gt;matcher&lt;/var&gt;. So a match found by &lt;var&gt;matcher&lt;/var&gt; acts as the anchor for further searches specified by &lt;var&gt;anchored-highlighter&lt;/var&gt;. &lt;var&gt;anchored-highlighter&lt;/var&gt; is a list of the following form:</source>
          <target state="translated">In this kind of element, &lt;var&gt;anchored-highlighter&lt;/var&gt; specifies how to highlight text that follows a match found by &lt;var&gt;matcher&lt;/var&gt; . So a match found by &lt;var&gt;matcher&lt;/var&gt; acts as the anchor for further searches specified by &lt;var&gt;anchored-highlighter&lt;/var&gt; . &lt;var&gt;anchored-highlighter&lt;/var&gt; is a list of the following form:</target>
        </trans-unit>
        <trans-unit id="8f400ef8e587e9e01e8f55ffe8f0804f11bd1102" translate="yes" xml:space="preserve">
          <source>In this kind of element, &lt;var&gt;facespec&lt;/var&gt; is an expression whose value specifies the face to use for highlighting. In the simplest case, &lt;var&gt;facespec&lt;/var&gt; is a Lisp variable (a symbol) whose value is a face name.</source>
          <target state="translated">In this kind of element, &lt;var&gt;facespec&lt;/var&gt; is an expression whose value specifies the face to use for highlighting. In the simplest case, &lt;var&gt;facespec&lt;/var&gt; is a Lisp variable (a symbol) whose value is a face name.</target>
        </trans-unit>
        <trans-unit id="d0f3cf4781874539fca8b12ffa575360a97062a3" translate="yes" xml:space="preserve">
          <source>In this kind of element, &lt;var&gt;matcher&lt;/var&gt; is either a regular expression or a function, as described above. The &lt;small&gt;CDR&lt;/small&gt;, &lt;var&gt;subexp&lt;/var&gt;, specifies which subexpression of &lt;var&gt;matcher&lt;/var&gt; should be highlighted (instead of the entire text that &lt;var&gt;matcher&lt;/var&gt; matched).</source>
          <target state="translated">In this kind of element, &lt;var&gt;matcher&lt;/var&gt; is either a regular expression or a function, as described above. The &lt;small&gt;CDR&lt;/small&gt;, &lt;var&gt;subexp&lt;/var&gt; , specifies which subexpression of &lt;var&gt;matcher&lt;/var&gt; should be highlighted (instead of the entire text that &lt;var&gt;matcher&lt;/var&gt; matched).</target>
        </trans-unit>
        <trans-unit id="d4c92f44f29e6a508a88862991fc4849cfa01b75" translate="yes" xml:space="preserve">
          <source>In this kind of element, &lt;var&gt;subexp-highlighter&lt;/var&gt; is a list which specifies how to highlight matches found by &lt;var&gt;matcher&lt;/var&gt;. It has the form:</source>
          <target state="translated">In this kind of element, &lt;var&gt;subexp-highlighter&lt;/var&gt; is a list which specifies how to highlight matches found by &lt;var&gt;matcher&lt;/var&gt; . It has the form:</target>
        </trans-unit>
        <trans-unit id="65868b57f4589aab73c360fb6e9e308010443437" translate="yes" xml:space="preserve">
          <source>In this manual, we write &lt;code&gt;()&lt;/code&gt; when we wish to emphasize that it means the empty list, and we write &lt;code&gt;nil&lt;/code&gt; when we wish to emphasize that it means the truth value &lt;var&gt;false&lt;/var&gt;. That is a good convention to use in Lisp programs also.</source>
          <target state="translated">In this manual, we write &lt;code&gt;()&lt;/code&gt; when we wish to emphasize that it means the empty list, and we write &lt;code&gt;nil&lt;/code&gt; when we wish to emphasize that it means the truth value &lt;var&gt;false&lt;/var&gt; . That is a good convention to use in Lisp programs also.</target>
        </trans-unit>
        <trans-unit id="af20502ec39925ff9d9d9c1f4f7cbd4800bb2ffe" translate="yes" xml:space="preserve">
          <source>In this next example, point is between the &amp;lsquo;</source>
          <target state="translated">In this next example, point is between the &amp;lsquo;</target>
        </trans-unit>
        <trans-unit id="5b3dc1e84019e82e89cd0988c8c5c64866bf8ed9" translate="yes" xml:space="preserve">
          <source>In this scenario, &lt;code&gt;jsonrpc-connection&lt;/code&gt; is subclassed to implement a different underlying transport strategy (for details on how to subclass, see &lt;a href=&quot;http://www.gnu.org/software/emacs/manual/html_node/eieio/Inheritance.html#Inheritance&quot;&gt;(eieio)Inheritance&lt;/a&gt;.). Users of the application-building interface can then instantiate objects of this concrete class (using the &lt;code&gt;make-instance&lt;/code&gt; function) and connect to JSONRPC endpoints using that strategy.</source>
          <target state="translated">In this scenario, &lt;code&gt;jsonrpc-connection&lt;/code&gt; is subclassed to implement a different underlying transport strategy (for details on how to subclass, see &lt;a href=&quot;http://www.gnu.org/software/emacs/manual/html_node/eieio/Inheritance.html#Inheritance&quot;&gt;(eieio)Inheritance&lt;/a&gt;.). Users of the application-building interface can then instantiate objects of this concrete class (using the &lt;code&gt;make-instance&lt;/code&gt; function) and connect to JSONRPC endpoints using that strategy.</target>
        </trans-unit>
        <trans-unit id="b9e4e7371206d35dcfc5989991b4a959d04ae518" translate="yes" xml:space="preserve">
          <source>In this scenario, the JSONRPC application selects a concrete subclass of &lt;code&gt;jsonrpc-connection&lt;/code&gt;, and proceeds to create objects of that subclass using &lt;code&gt;make-instance&lt;/code&gt;. To initiate a contact to the remote endpoint, the JSONRPC application passes this object to the functions &lt;code&gt;jsonrpc-notify&lt;/code&gt;, &lt;code&gt;jsonrpc-request&lt;/code&gt;, and/or &lt;code&gt;jsonrpc-async-request&lt;/code&gt;. For handling remotely initiated contacts, which generally come in asynchronously, the instantiation should include &lt;code&gt;:request-dispatcher&lt;/code&gt; and &lt;code&gt;:notification-dispatcher&lt;/code&gt; initargs, which are both functions of 3 arguments: the connection object; a symbol naming the JSONRPC method invoked remotely; and a JSONRPC &lt;code&gt;params&lt;/code&gt; object.</source>
          <target state="translated">In this scenario, the JSONRPC application selects a concrete subclass of &lt;code&gt;jsonrpc-connection&lt;/code&gt; , and proceeds to create objects of that subclass using &lt;code&gt;make-instance&lt;/code&gt; . To initiate a contact to the remote endpoint, the JSONRPC application passes this object to the functions &lt;code&gt;jsonrpc-notify&lt;/code&gt; , &lt;code&gt;jsonrpc-request&lt;/code&gt; , and/or &lt;code&gt;jsonrpc-async-request&lt;/code&gt; . For handling remotely initiated contacts, which generally come in asynchronously, the instantiation should include &lt;code&gt;:request-dispatcher&lt;/code&gt; and &lt;code&gt;:notification-dispatcher&lt;/code&gt; initargs, which are both functions of 3 arguments: the connection object; a symbol naming the JSONRPC method invoked remotely; and a JSONRPC &lt;code&gt;params&lt;/code&gt; object.</target>
        </trans-unit>
        <trans-unit id="1af82129d6d32c9e06217b885c8dd8bf6f60a0e9" translate="yes" xml:space="preserve">
          <source>In this section we describe functions for creating, accessing and altering syntax tables.</source>
          <target state="translated">En esta sección describimos las funciones para crear,acceder y alterar las tablas de sintaxis.</target>
        </trans-unit>
        <trans-unit id="7456e6359dd2969245d309399580bcce1506a625" translate="yes" xml:space="preserve">
          <source>In this section we list some of the more general keymaps. Many of these exist when Emacs is first started, but some are loaded only when the respective feature is accessed.</source>
          <target state="translated">En esta sección enumeramos algunos de los mapas de teclas más generales.Muchos de ellos existen cuando se inicia Emacs por primera vez,pero algunos se cargan sólo cuando se accede a la característica respectiva.</target>
        </trans-unit>
        <trans-unit id="75c4faa5a87500b689faf740289921e94ba4648d" translate="yes" xml:space="preserve">
          <source>In this section, we describe how to create an &lt;em&gt;asynchronous process&lt;/em&gt;. After an asynchronous process is created, it runs in parallel with Emacs, and Emacs can communicate with it using the functions described in the following sections (see &lt;a href=&quot;input-to-processes#Input-to-Processes&quot;&gt;Input to Processes&lt;/a&gt;, and see &lt;a href=&quot;output-from-processes#Output-from-Processes&quot;&gt;Output from Processes&lt;/a&gt;). Note that process communication is only partially asynchronous: Emacs sends and receives data to and from a process only when those functions are called.</source>
          <target state="translated">In this section, we describe how to create an &lt;em&gt;asynchronous process&lt;/em&gt;. After an asynchronous process is created, it runs in parallel with Emacs, and Emacs can communicate with it using the functions described in the following sections (see &lt;a href=&quot;input-to-processes#Input-to-Processes&quot;&gt;Input to Processes&lt;/a&gt;, and see &lt;a href=&quot;output-from-processes#Output-from-Processes&quot;&gt;Output from Processes&lt;/a&gt;). Note that process communication is only partially asynchronous: Emacs sends and receives data to and from a process only when those functions are called.</target>
        </trans-unit>
        <trans-unit id="c9b298dd66b005623af56bf6c6bc09c1e5f67332" translate="yes" xml:space="preserve">
          <source>In this section, we describe the functions that accept all types of arrays.</source>
          <target state="translated">En esta sección,describimos las funciones que aceptan todo tipo de arreglos.</target>
        </trans-unit>
        <trans-unit id="abf73e32c756c256563a8daa580c451693687fe9" translate="yes" xml:space="preserve">
          <source>In this section, we document the &lt;code&gt;run-hooks&lt;/code&gt; function, which is used to run a normal hook. We also document the functions for running various kinds of abnormal hooks.</source>
          <target state="translated">In this section, we document the &lt;code&gt;run-hooks&lt;/code&gt; function, which is used to run a normal hook. We also document the functions for running various kinds of abnormal hooks.</target>
        </trans-unit>
        <trans-unit id="cc308cdcd27e50a8464c2fb8c2b137680f8aa92d" translate="yes" xml:space="preserve">
          <source>In this special form, the arguments &lt;var&gt;from&lt;/var&gt; and &lt;var&gt;to&lt;/var&gt; are optional, but must both be present or both absent. If they are present, &lt;var&gt;inc&lt;/var&gt; may optionally be specified as well. These arguments are grouped with the argument &lt;var&gt;var&lt;/var&gt; into a list, to distinguish them from &lt;var&gt;body&lt;/var&gt;, which includes all remaining elements of the form.</source>
          <target state="translated">In this special form, the arguments &lt;var&gt;from&lt;/var&gt; and &lt;var&gt;to&lt;/var&gt; are optional, but must both be present or both absent. If they are present, &lt;var&gt;inc&lt;/var&gt; may optionally be specified as well. These arguments are grouped with the argument &lt;var&gt;var&lt;/var&gt; into a list, to distinguish them from &lt;var&gt;body&lt;/var&gt; , which includes all remaining elements of the form.</target>
        </trans-unit>
        <trans-unit id="9191121a266e1613654b74c183e9b81e80959c1f" translate="yes" xml:space="preserve">
          <source>In this subsection, &lt;var&gt;ewoc&lt;/var&gt; and &lt;var&gt;node&lt;/var&gt; stand for the structures described above (see &lt;a href=&quot;abstract-display#Abstract-Display&quot;&gt;Abstract Display&lt;/a&gt;), while &lt;var&gt;data&lt;/var&gt; stands for an arbitrary Lisp object used as a data element.</source>
          <target state="translated">In this subsection, &lt;var&gt;ewoc&lt;/var&gt; and &lt;var&gt;node&lt;/var&gt; stand for the structures described above (see &lt;a href=&quot;abstract-display#Abstract-Display&quot;&gt;Abstract Display&lt;/a&gt;), while &lt;var&gt;data&lt;/var&gt; stands for an arbitrary Lisp object used as a data element.</target>
        </trans-unit>
        <trans-unit id="b7695c1c385c781384681e043cf75498c33095e8" translate="yes" xml:space="preserve">
          <source>In typical use of text properties, most of the time several or many consecutive characters have the same value for a property. Rather than writing your programs to examine characters one by one, it is much faster to process chunks of text that have the same property value.</source>
          <target state="translated">En el uso típico de las propiedades de texto,la mayoría de las veces varios o muchos caracteres consecutivos tienen el mismo valor para una propiedad.En lugar de escribir sus programas para examinar los caracteres uno por uno,es mucho más rápido procesar trozos de texto que tienen el mismo valor de propiedad.</target>
        </trans-unit>
        <trans-unit id="398759523f553da3a04d5632b9ae89f03ca6ebe6" translate="yes" xml:space="preserve">
          <source>In unusual circumstances, there can be more than one buffer visiting the same file name. In such cases, this function returns the first such buffer in the buffer list.</source>
          <target state="translated">En circunstancias inusuales,puede haber más de un búfer visitando el mismo nombre de archivo.En tales casos,esta función devuelve el primer búfer de este tipo en la lista de búferes.</target>
        </trans-unit>
        <trans-unit id="6bc522c712bd045ae610c3ffdfe588e290263853" translate="yes" xml:space="preserve">
          <source>In window systems, such as X, data can be transferred between different applications by means of &lt;em&gt;selections&lt;/em&gt;. X defines an arbitrary number of &lt;em&gt;selection types&lt;/em&gt;, each of which can store its own data; however, only three are commonly used: the &lt;em&gt;clipboard&lt;/em&gt;, &lt;em&gt;primary selection&lt;/em&gt;, and &lt;em&gt;secondary selection&lt;/em&gt;. Other window systems support only the clipboard. See &lt;a href=&quot;http://www.gnu.org/software/emacs/manual/html_node/emacs/Cut-and-Paste.html#Cut-and-Paste&quot;&gt;Cut and Paste&lt;/a&gt; in</source>
          <target state="translated">In window systems, such as X, data can be transferred between different applications by means of &lt;em&gt;selections&lt;/em&gt;. X defines an arbitrary number of &lt;em&gt;selection types&lt;/em&gt;, each of which can store its own data; however, only three are commonly used: the &lt;em&gt;clipboard&lt;/em&gt;, &lt;em&gt;primary selection&lt;/em&gt;, and &lt;em&gt;secondary selection&lt;/em&gt;. Other window systems support only the clipboard. See &lt;a href=&quot;http://www.gnu.org/software/emacs/manual/html_node/emacs/Cut-and-Paste.html#Cut-and-Paste&quot;&gt;Cut and Paste&lt;/a&gt; in</target>
        </trans-unit>
        <trans-unit id="1f4f96711902573479785d359bea6010a237cdfb" translate="yes" xml:space="preserve">
          <source>In writing the key sequence to rebind, it is good to use the special escape sequences for control and meta characters (see &lt;a href=&quot;string-type#String-Type&quot;&gt;String Type&lt;/a&gt;). The syntax &amp;lsquo;</source>
          <target state="translated">In writing the key sequence to rebind, it is good to use the special escape sequences for control and meta characters (see &lt;a href=&quot;string-type#String-Type&quot;&gt;String Type&lt;/a&gt;). The syntax &amp;lsquo;</target>
        </trans-unit>
        <trans-unit id="5c699af66d7cc4077f86d1419c1e341294245528" translate="yes" xml:space="preserve">
          <source>Include an external link after the documentation string for this item. This is a sentence containing a button that references some other documentation.</source>
          <target state="translated">Incluya un enlace externo después de la cadena de documentación de este artículo.Esta es una frase que contiene un botón que hace referencia a alguna otra documentación.</target>
        </trans-unit>
        <trans-unit id="76775cb67de1d16719f132aea62e321213b81dcb" translate="yes" xml:space="preserve">
          <source>Includes examples and caveats.</source>
          <target state="translated">Incluye ejemplos y advertencias.</target>
        </trans-unit>
        <trans-unit id="abb42b558c56ceb21cca2f6daadd7a31514411ab" translate="yes" xml:space="preserve">
          <source>Increase the image size (&lt;code&gt;image-increase-size&lt;/code&gt;). A prefix value of &amp;lsquo;</source>
          <target state="translated">Increase the image size ( &lt;code&gt;image-increase-size&lt;/code&gt; ). A prefix value of &amp;lsquo;</target>
        </trans-unit>
        <trans-unit id="9229257425378cb0ebb48e0365ae97d30b8cbd09" translate="yes" xml:space="preserve">
          <source>Incremental search can make invisible overlays visible temporarily and/or permanently when a match includes invisible text. To enable this, the overlay should have a non-&lt;code&gt;nil&lt;/code&gt;&lt;code&gt;isearch-open-invisible&lt;/code&gt; property. The property value should be a function to be called with the overlay as an argument. This function should make the overlay visible permanently; it is used when the match overlaps the overlay on exit from the search.</source>
          <target state="translated">Incremental search can make invisible overlays visible temporarily and/or permanently when a match includes invisible text. To enable this, the overlay should have a non- &lt;code&gt;nil&lt;/code&gt; &lt;code&gt;isearch-open-invisible&lt;/code&gt; property. The property value should be a function to be called with the overlay as an argument. This function should make the overlay visible permanently; it is used when the match overlaps the overlay on exit from the search.</target>
        </trans-unit>
        <trans-unit id="e6d579c6cc398fe7db545dd582fc67de8b2d582c" translate="yes" xml:space="preserve">
          <source>Indent all the lines in a region.</source>
          <target state="translated">Indentar todas las líneas de una región.</target>
        </trans-unit>
        <trans-unit id="42c518bd88aefe4faecc452be3932f9e029498cb" translate="yes" xml:space="preserve">
          <source>Indent calls to this function or macro according to &lt;var&gt;indent-spec&lt;/var&gt;. This is typically used for macros, though it works for functions too. See &lt;a href=&quot;indenting-macros#Indenting-Macros&quot;&gt;Indenting Macros&lt;/a&gt;.</source>
          <target state="translated">Indent calls to this function or macro according to &lt;var&gt;indent-spec&lt;/var&gt; . This is typically used for macros, though it works for functions too. See &lt;a href=&quot;indenting-macros#Indenting-Macros&quot;&gt;Indenting Macros&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="27176cfb7708a018b06cd9d8ea7336b632a76f0d" translate="yes" xml:space="preserve">
          <source>Indent current token as a &lt;em&gt;separator&lt;/em&gt;.</source>
          <target state="translated">Indent current token as a &lt;em&gt;separator&lt;/em&gt;.</target>
        </trans-unit>
        <trans-unit id="66b7ce43ce4a7ca89f6dad39cb0198725d35356c" translate="yes" xml:space="preserve">
          <source>Indent the current line based on previous lines.</source>
          <target state="translated">Indentar la línea actual en base a las líneas anteriores.</target>
        </trans-unit>
        <trans-unit id="c9ec7fcf0ce1c005cbdd2ae9ab39e1773e6bf368" translate="yes" xml:space="preserve">
          <source>Indentation</source>
          <target state="translated">Indentation</target>
        </trans-unit>
        <trans-unit id="511f4889f97fada7d908032cc1464f2aa35c8004" translate="yes" xml:space="preserve">
          <source>Indentation Controlled by Major Mode</source>
          <target state="translated">Indentación controlada por el modo principal</target>
        </trans-unit>
        <trans-unit id="fdac28e1c2199ac39cc5e09f4dd786cd625bd4a4" translate="yes" xml:space="preserve">
          <source>Indentation Primitives</source>
          <target state="translated">Primitivos de indentación</target>
        </trans-unit>
        <trans-unit id="5b82b1b833300c0e6e5e24537ad294a6d135f9fa" translate="yes" xml:space="preserve">
          <source>Indentation Relative to Previous Lines</source>
          <target state="translated">Indentación relativa a las líneas anteriores</target>
        </trans-unit>
        <trans-unit id="2af2ccd8b84225bf2c735da91f1184265c730f6a" translate="yes" xml:space="preserve">
          <source>Indentation-Based Motion Commands</source>
          <target state="translated">Comandos de movimiento basados en la indentación</target>
        </trans-unit>
        <trans-unit id="1bb77083feeb12d0ebb47ef46a39b5078cd5cb2d" translate="yes" xml:space="preserve">
          <source>Indenting Macros</source>
          <target state="translated">Macros de inclinación</target>
        </trans-unit>
        <trans-unit id="30f00ddc559ee66f1e7768bbbc4d7eee4d538190" translate="yes" xml:space="preserve">
          <source>Indenting an Entire Region</source>
          <target state="translated">La creación de una región entera</target>
        </trans-unit>
        <trans-unit id="c2df9b932637fe9d32a0f16da1c11873398f873d" translate="yes" xml:space="preserve">
          <source>Index</source>
          <target state="translated">Index</target>
        </trans-unit>
        <trans-unit id="8f868c1e82b2154aed66be4aaa7e76b45121fbff" translate="yes" xml:space="preserve">
          <source>Index including concepts, functions, variables, and other terms.</source>
          <target state="translated">Índice que incluye conceptos,funciones,variables y otros términos.</target>
        </trans-unit>
        <trans-unit id="d52c4a56e9e6d6db73917b478317c4b1d432ad1f" translate="yes" xml:space="preserve">
          <source>Indicates that the specification is for a defining form. Edebug&amp;rsquo;s definition of a defining form is a form containing one or more code forms which are saved and executed later, after the execution of the defining form.</source>
          <target state="translated">Indicates that the specification is for a defining form. Edebug&amp;rsquo;s definition of a defining form is a form containing one or more code forms which are saved and executed later, after the execution of the defining form.</target>
        </trans-unit>
        <trans-unit id="1112b756bb004fe882859143d87adf31c2f5d050" translate="yes" xml:space="preserve">
          <source>Indirect Buffers</source>
          <target state="translated">Búferes indirectos</target>
        </trans-unit>
        <trans-unit id="938b66bd8c62095908b57d694e88050ca1007edd" translate="yes" xml:space="preserve">
          <source>Individual characters are used occasionally in programs, but it is more common to work with &lt;em&gt;strings&lt;/em&gt;, which are sequences composed of characters. See &lt;a href=&quot;string-type#String-Type&quot;&gt;String Type&lt;/a&gt;.</source>
          <target state="translated">Individual characters are used occasionally in programs, but it is more common to work with &lt;em&gt;strings&lt;/em&gt;, which are sequences composed of characters. See &lt;a href=&quot;string-type#String-Type&quot;&gt;String Type&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="4b631f69842530d659306c8f06dbad594a6b1807" translate="yes" xml:space="preserve">
          <source>Info</source>
          <target state="translated">Info</target>
        </trans-unit>
        <trans-unit id="ad474c9deee501ca52324eb72953350dc14402c1" translate="yes" xml:space="preserve">
          <source>Info about total size of Lisp objects made so far.</source>
          <target state="translated">Información sobre el tamaño total de los objetos de Lisp hechos hasta ahora.</target>
        </trans-unit>
        <trans-unit id="e73d741db9df809634f2d60fc44dc32e7f4bc7e7" translate="yes" xml:space="preserve">
          <source>Info for users downgrading to Emacs 26.</source>
          <target state="translated">Información para los usuarios que descienden a Emacs 26.</target>
        </trans-unit>
        <trans-unit id="0eb5ed506e4923c28d7f4a8aa69efe99b3ad75d1" translate="yes" xml:space="preserve">
          <source>Information</source>
          <target state="translated">Information</target>
        </trans-unit>
        <trans-unit id="8247fbb975f100a6b13b56c054fa3613a36b297b" translate="yes" xml:space="preserve">
          <source>Information about Files</source>
          <target state="translated">Información sobre los archivos</target>
        </trans-unit>
        <trans-unit id="df29a9e6a31bec3e8b780a960759047a5bd6a25f" translate="yes" xml:space="preserve">
          <source>Information from Markers</source>
          <target state="translated">Información de los marcadores</target>
        </trans-unit>
        <trans-unit id="3ef56c865ee91dd66ebad0347cc1f0de75602bc3" translate="yes" xml:space="preserve">
          <source>Information from the Command Loop</source>
          <target state="translated">Información del Bucle de Mando</target>
        </trans-unit>
        <trans-unit id="18c79d206ba3bf95c4d3ca95be49d37877182f30" translate="yes" xml:space="preserve">
          <source>Informing user about progress of a long operation.</source>
          <target state="translated">Informar al usuario sobre el progreso de una operación larga.</target>
        </trans-unit>
        <trans-unit id="d8a1fba394d47f17007b00e6ef12b9c86a3c6414" translate="yes" xml:space="preserve">
          <source>Inherit standard syntax: &amp;lsquo;</source>
          <target state="translated">Inherit standard syntax: &amp;lsquo;</target>
        </trans-unit>
        <trans-unit id="15e80c1c18978164d737579b198c39c73404e4e1" translate="yes" xml:space="preserve">
          <source>Inheritance and Keymaps</source>
          <target state="translated">Herencia y mapas clave</target>
        </trans-unit>
        <trans-unit id="fb691787cc7690e0df61a80ff9e0643eb7d0d6da" translate="yes" xml:space="preserve">
          <source>Initial Frame Parameters</source>
          <target state="translated">Parámetros del marco inicial</target>
        </trans-unit>
        <trans-unit id="89a2bccb3e4d6523cbe25ad5db3ff715866a115e" translate="yes" xml:space="preserve">
          <source>Initial Input</source>
          <target state="translated">Entrada inicial</target>
        </trans-unit>
        <trans-unit id="eb607b40a369ea5599a4b2f0220d4f687f78016b" translate="yes" xml:space="preserve">
          <source>Initialize the log function of a server process to &lt;var&gt;log&lt;/var&gt;. The log function is called each time the server accepts a network connection from a client. The arguments passed to the log function are &lt;var&gt;server&lt;/var&gt;, &lt;var&gt;connection&lt;/var&gt;, and &lt;var&gt;message&lt;/var&gt;; where &lt;var&gt;server&lt;/var&gt; is the server process, &lt;var&gt;connection&lt;/var&gt; is the new process for the connection, and &lt;var&gt;message&lt;/var&gt; is a string describing what has happened.</source>
          <target state="translated">Initialize the log function of a server process to &lt;var&gt;log&lt;/var&gt; . The log function is called each time the server accepts a network connection from a client. The arguments passed to the log function are &lt;var&gt;server&lt;/var&gt; , &lt;var&gt;connection&lt;/var&gt; , and &lt;var&gt;message&lt;/var&gt; ; where &lt;var&gt;server&lt;/var&gt; is the server process, &lt;var&gt;connection&lt;/var&gt; is the new process for the connection, and &lt;var&gt;message&lt;/var&gt; is a string describing what has happened.</target>
        </trans-unit>
        <trans-unit id="f894ea5a16cfcad8d7176dad8de92207ba46e301" translate="yes" xml:space="preserve">
          <source>Initialize the process filter to &lt;var&gt;filter&lt;/var&gt;.</source>
          <target state="translated">Initialize the process filter to &lt;var&gt;filter&lt;/var&gt; .</target>
        </trans-unit>
        <trans-unit id="4bdcb3b64e7635d1c8dde72370f13421e348ea64" translate="yes" xml:space="preserve">
          <source>Initialize the process filter to &lt;var&gt;filter&lt;/var&gt;. If not specified, a default filter will be provided, which can be changed later. See &lt;a href=&quot;filter-functions#Filter-Functions&quot;&gt;Filter Functions&lt;/a&gt;.</source>
          <target state="translated">Initialize the process filter to &lt;var&gt;filter&lt;/var&gt; . If not specified, a default filter will be provided, which can be changed later. See &lt;a href=&quot;filter-functions#Filter-Functions&quot;&gt;Filter Functions&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="88aa27fccdee463394440c83004deae351722113" translate="yes" xml:space="preserve">
          <source>Initialize the process filter to &lt;var&gt;filter&lt;/var&gt;. If not specified, a default filter will be provided, which can be overridden later. See &lt;a href=&quot;filter-functions#Filter-Functions&quot;&gt;Filter Functions&lt;/a&gt;.</source>
          <target state="translated">Initialize the process filter to &lt;var&gt;filter&lt;/var&gt; . If not specified, a default filter will be provided, which can be overridden later. See &lt;a href=&quot;filter-functions#Filter-Functions&quot;&gt;Filter Functions&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="978fecd8f603fe8d25457aa9a55a2791886af74d" translate="yes" xml:space="preserve">
          <source>Initialize the process plist to &lt;var&gt;plist&lt;/var&gt;.</source>
          <target state="translated">Initialize the process plist to &lt;var&gt;plist&lt;/var&gt; .</target>
        </trans-unit>
        <trans-unit id="c97165454b295da9973e4e05e4127a6851e7f5bd" translate="yes" xml:space="preserve">
          <source>Initialize the process query flag to &lt;var&gt;query-flag&lt;/var&gt;. See &lt;a href=&quot;query-before-exit#Query-Before-Exit&quot;&gt;Query Before Exit&lt;/a&gt;.</source>
          <target state="translated">Initialize the process query flag to &lt;var&gt;query-flag&lt;/var&gt; . See &lt;a href=&quot;query-before-exit#Query-Before-Exit&quot;&gt;Query Before Exit&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="1296ca254782c4485a383df44dbf7f61ee7b4bc5" translate="yes" xml:space="preserve">
          <source>Initialize the process query flag to &lt;var&gt;query-flag&lt;/var&gt;. See &lt;a href=&quot;query-before-exit#Query-Before-Exit&quot;&gt;Query Before Exit&lt;/a&gt;. The flags defaults to &lt;code&gt;nil&lt;/code&gt; if unspecified.</source>
          <target state="translated">Initialize the process query flag to &lt;var&gt;query-flag&lt;/var&gt; . See &lt;a href=&quot;query-before-exit#Query-Before-Exit&quot;&gt;Query Before Exit&lt;/a&gt;. The flags defaults to &lt;code&gt;nil&lt;/code&gt; if unspecified.</target>
        </trans-unit>
        <trans-unit id="7423f99e44e5c0fe954c4b5fbab30632bfd77607" translate="yes" xml:space="preserve">
          <source>Initialize the process sentinel to &lt;var&gt;sentinel&lt;/var&gt;.</source>
          <target state="translated">Initialize the process sentinel to &lt;var&gt;sentinel&lt;/var&gt; .</target>
        </trans-unit>
        <trans-unit id="9db86c8bfdd16aec885a8fb101a51297ca90199b" translate="yes" xml:space="preserve">
          <source>Initialize the process sentinel to &lt;var&gt;sentinel&lt;/var&gt;. If not specified, a default sentinel will be used, which can be changed later. See &lt;a href=&quot;sentinels#Sentinels&quot;&gt;Sentinels&lt;/a&gt;.</source>
          <target state="translated">Initialize the process sentinel to &lt;var&gt;sentinel&lt;/var&gt; . If not specified, a default sentinel will be used, which can be changed later. See &lt;a href=&quot;sentinels#Sentinels&quot;&gt;Sentinels&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="438b44ac9a269df0c942362a3b40baff51fec529" translate="yes" xml:space="preserve">
          <source>Initialize the process sentinel to &lt;var&gt;sentinel&lt;/var&gt;. If not specified, a default sentinel will be used, which can be overridden later. See &lt;a href=&quot;sentinels#Sentinels&quot;&gt;Sentinels&lt;/a&gt;.</source>
          <target state="translated">Initialize the process sentinel to &lt;var&gt;sentinel&lt;/var&gt; . If not specified, a default sentinel will be used, which can be overridden later. See &lt;a href=&quot;sentinels#Sentinels&quot;&gt;Sentinels&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="cc3466ae2da1d30465b2916d783d7d5e733df96c" translate="yes" xml:space="preserve">
          <source>Initialize the type of device used to communicate with the subprocess. Possible values are &lt;code&gt;pty&lt;/code&gt; to use a pty, &lt;code&gt;pipe&lt;/code&gt; to use a pipe, or &lt;code&gt;nil&lt;/code&gt; to use the default derived from the value of the &lt;code&gt;process-connection-type&lt;/code&gt; variable. This parameter and the value of &lt;code&gt;process-connection-type&lt;/code&gt; are ignored if a non-&lt;code&gt;nil&lt;/code&gt; value is specified for the &lt;code&gt;:stderr&lt;/code&gt; parameter; in that case, the type will always be &lt;code&gt;pipe&lt;/code&gt;. On systems where ptys are not available (MS-Windows), this parameter is likewise ignored, and pipes are used unconditionally.</source>
          <target state="translated">Initialize the type of device used to communicate with the subprocess. Possible values are &lt;code&gt;pty&lt;/code&gt; to use a pty, &lt;code&gt;pipe&lt;/code&gt; to use a pipe, or &lt;code&gt;nil&lt;/code&gt; to use the default derived from the value of the &lt;code&gt;process-connection-type&lt;/code&gt; variable. This parameter and the value of &lt;code&gt;process-connection-type&lt;/code&gt; are ignored if a non- &lt;code&gt;nil&lt;/code&gt; value is specified for the &lt;code&gt;:stderr&lt;/code&gt; parameter; in that case, the type will always be &lt;code&gt;pipe&lt;/code&gt; . On systems where ptys are not available (MS-Windows), this parameter is likewise ignored, and pipes are used unconditionally.</target>
        </trans-unit>
        <trans-unit id="75ba3477c577bc61f2782c6fbd5d3918d3d93888" translate="yes" xml:space="preserve">
          <source>Inline (&lt;code&gt;defsubst&lt;/code&gt;) functions are less troublesome; if you compile a call to such a function before its definition is known, the call will still work right, it will just run slower.</source>
          <target state="translated">Inline ( &lt;code&gt;defsubst&lt;/code&gt; ) functions are less troublesome; if you compile a call to such a function before its definition is known, the call will still work right, it will just run slower.</target>
        </trans-unit>
        <trans-unit id="b60019f47df04ae92897fa912c6748a6013313fa" translate="yes" xml:space="preserve">
          <source>Inline Functions</source>
          <target state="translated">Funciones en línea</target>
        </trans-unit>
        <trans-unit id="023bd002a35d8328e1b84deea2b2fbe846651660" translate="yes" xml:space="preserve">
          <source>Inner Frame</source>
          <target state="translated">Marco interno</target>
        </trans-unit>
        <trans-unit id="1ff7c24cdc862e41c4384103afd571ff8024a31c" translate="yes" xml:space="preserve">
          <source>Input Events</source>
          <target state="translated">Eventos de entrada</target>
        </trans-unit>
        <trans-unit id="68e31416a1a24dd5f2a79386c7cd5ebc7d038f16" translate="yes" xml:space="preserve">
          <source>Input Focus</source>
          <target state="translated">Enfoque de entrada</target>
        </trans-unit>
        <trans-unit id="88198074ced9d4479d4b7e9aafe153884a14b789" translate="yes" xml:space="preserve">
          <source>Input Functions</source>
          <target state="translated">Funciones de entrada</target>
        </trans-unit>
        <trans-unit id="c968ad8768affe487c292b6adc7616df4a013a6b" translate="yes" xml:space="preserve">
          <source>Input Methods</source>
          <target state="translated">Métodos de entrada</target>
        </trans-unit>
        <trans-unit id="a821e6c8419f780e8743b7bf306490cddd9913c4" translate="yes" xml:space="preserve">
          <source>Input Modes</source>
          <target state="translated">Modos de entrada</target>
        </trans-unit>
        <trans-unit id="eed11d0bb1de0f449227ff92bf6d2ad650126f01" translate="yes" xml:space="preserve">
          <source>Input Streams</source>
          <target state="translated">Corrientes de entrada</target>
        </trans-unit>
        <trans-unit id="3b3948df9e555ca646262a35e33cb7cf68613dc1" translate="yes" xml:space="preserve">
          <source>Input methods allow users to enter various non-ASCII characters without special keyboards.</source>
          <target state="translated">Los métodos de entrada permiten a los usuarios introducir varios caracteres no ASCII sin teclados especiales.</target>
        </trans-unit>
        <trans-unit id="bf60d2635214ca206c57f12fa87775f6b4f038df" translate="yes" xml:space="preserve">
          <source>Insert the output in a buffer with that name, before point.</source>
          <target state="translated">Inserte la salida en un buffer con ese nombre,antes del punto.</target>
        </trans-unit>
        <trans-unit id="3aa29461af0f56c0dd73083f79d4a003b7af3788" translate="yes" xml:space="preserve">
          <source>Insert the output in that buffer, before point. This includes both the standard output stream and the standard error stream of the process.</source>
          <target state="translated">Inserte la salida en ese buffer,antes del punto.Esto incluye tanto el flujo de salida estándar como el flujo de error estándar del proceso.</target>
        </trans-unit>
        <trans-unit id="1c64a3bbdde10f3ebb444ccc0c14466f3d048a31" translate="yes" xml:space="preserve">
          <source>Insert the output in the current buffer, before point.</source>
          <target state="translated">Inserte la salida en el buffer actual,antes del punto.</target>
        </trans-unit>
        <trans-unit id="0d849e555da7ae1ee48fec0567933a06f27173ff" translate="yes" xml:space="preserve">
          <source>Insert the strings &lt;var&gt;strings&lt;/var&gt;, just like the function &lt;code&gt;insert-before-markers&lt;/code&gt;, but inherit any sticky properties from the adjoining text.</source>
          <target state="translated">Insert the strings &lt;var&gt;strings&lt;/var&gt; , just like the function &lt;code&gt;insert-before-markers&lt;/code&gt; , but inherit any sticky properties from the adjoining text.</target>
        </trans-unit>
        <trans-unit id="90ef3b52113b2290b776d5edcbf7341e258eb075" translate="yes" xml:space="preserve">
          <source>Insert the strings &lt;var&gt;strings&lt;/var&gt;, just like the function &lt;code&gt;insert&lt;/code&gt;, but inherit any sticky properties from the adjoining text.</source>
          <target state="translated">Insert the strings &lt;var&gt;strings&lt;/var&gt; , just like the function &lt;code&gt;insert&lt;/code&gt; , but inherit any sticky properties from the adjoining text.</target>
        </trans-unit>
        <trans-unit id="d4b10e59d8cd180c5c4c38922e8312024dcd937c" translate="yes" xml:space="preserve">
          <source>Inserting Text</source>
          <target state="translated">Insertar el texto</target>
        </trans-unit>
        <trans-unit id="f62a121c8905d9b70d56a62824bb530abbb240fe" translate="yes" xml:space="preserve">
          <source>Insertion and deletion in a buffer must check all the markers and relocate them if necessary. This slows processing in a buffer with a large number of markers. For this reason, it is a good idea to make a marker point nowhere if you are sure you don&amp;rsquo;t need it any more. Markers that can no longer be accessed are eventually removed (see &lt;a href=&quot;garbage-collection#Garbage-Collection&quot;&gt;Garbage Collection&lt;/a&gt;).</source>
          <target state="translated">Insertion and deletion in a buffer must check all the markers and relocate them if necessary. This slows processing in a buffer with a large number of markers. For this reason, it is a good idea to make a marker point nowhere if you are sure you don&amp;rsquo;t need it any more. Markers that can no longer be accessed are eventually removed (see &lt;a href=&quot;garbage-collection#Garbage-Collection&quot;&gt;Garbage Collection&lt;/a&gt;).</target>
        </trans-unit>
        <trans-unit id="17ee0ff6e39b0d949eba112fc3626357b3a22a32" translate="yes" xml:space="preserve">
          <source>Insertion functions signal an error if the current buffer is read-only (see &lt;a href=&quot;read-only-buffers#Read-Only-Buffers&quot;&gt;Read Only Buffers&lt;/a&gt;) or if they insert within read-only text (see &lt;a href=&quot;special-properties#Special-Properties&quot;&gt;Special Properties&lt;/a&gt;).</source>
          <target state="translated">Insertion functions signal an error if the current buffer is read-only (see &lt;a href=&quot;read-only-buffers#Read-Only-Buffers&quot;&gt;Read Only Buffers&lt;/a&gt;) or if they insert within read-only text (see &lt;a href=&quot;special-properties#Special-Properties&quot;&gt;Special Properties&lt;/a&gt;).</target>
        </trans-unit>
        <trans-unit id="5434f633b863c5453f6112150b15fbd13f9dde5c" translate="yes" xml:space="preserve">
          <source>Insertion moves markers located at positions after the insertion point, so that they stay with the surrounding text (see &lt;a href=&quot;markers#Markers&quot;&gt;Markers&lt;/a&gt;). When a marker points at the place of insertion, insertion may or may not relocate the marker, depending on the marker&amp;rsquo;s insertion type (see &lt;a href=&quot;marker-insertion-types#Marker-Insertion-Types&quot;&gt;Marker Insertion Types&lt;/a&gt;). Certain special functions such as &lt;code&gt;insert-before-markers&lt;/code&gt; relocate all such markers to point after the inserted text, regardless of the markers&amp;rsquo; insertion type.</source>
          <target state="translated">Insertion moves markers located at positions after the insertion point, so that they stay with the surrounding text (see &lt;a href=&quot;markers#Markers&quot;&gt;Markers&lt;/a&gt;). When a marker points at the place of insertion, insertion may or may not relocate the marker, depending on the marker&amp;rsquo;s insertion type (see &lt;a href=&quot;marker-insertion-types#Marker-Insertion-Types&quot;&gt;Marker Insertion Types&lt;/a&gt;). Certain special functions such as &lt;code&gt;insert-before-markers&lt;/code&gt; relocate all such markers to point after the inserted text, regardless of the markers&amp;rsquo; insertion type.</target>
        </trans-unit>
        <trans-unit id="bd95261b13119729b7f21abc1b22f07a4f3b895c" translate="yes" xml:space="preserve">
          <source>Insertion next to a read-only character is an error if inserting ordinary text there would inherit the &lt;code&gt;read-only&lt;/code&gt; property due to stickiness. Thus, you can control permission to insert next to read-only text by controlling the stickiness. See &lt;a href=&quot;sticky-properties#Sticky-Properties&quot;&gt;Sticky Properties&lt;/a&gt;.</source>
          <target state="translated">Insertion next to a read-only character is an error if inserting ordinary text there would inherit the &lt;code&gt;read-only&lt;/code&gt; property due to stickiness. Thus, you can control permission to insert next to read-only text by controlling the stickiness. See &lt;a href=&quot;sticky-properties#Sticky-Properties&quot;&gt;Sticky Properties&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="0021bd63930267acc7e983ae1c2b95215f4a5f19" translate="yes" xml:space="preserve">
          <source>Insertion of text at the border between intervals also raises questions that have no satisfactory answer.</source>
          <target state="translated">La inserción de texto en el límite entre los intervalos también plantea preguntas que no tienen una respuesta satisfactoria.</target>
        </trans-unit>
        <trans-unit id="a632b0d51711f298bce3fb60664237d20718b891" translate="yes" xml:space="preserve">
          <source>Inside a &lt;code&gt;repeat&lt;/code&gt; block, these contain the maximum number of repetitions (as specified by the &lt;var&gt;count&lt;/var&gt; parameter), and the current repetition number (counting from 0). Setting &lt;code&gt;count&lt;/code&gt; to zero will terminate the inner-most repeat block after the current repetition has completed.</source>
          <target state="translated">Inside a &lt;code&gt;repeat&lt;/code&gt; block, these contain the maximum number of repetitions (as specified by the &lt;var&gt;count&lt;/var&gt; parameter), and the current repetition number (counting from 0). Setting &lt;code&gt;count&lt;/code&gt; to zero will terminate the inner-most repeat block after the current repetition has completed.</target>
        </trans-unit>
        <trans-unit id="bbecdb627416247ff6d11ce653cbc5c864a55b32" translate="yes" xml:space="preserve">
          <source>Install &lt;var&gt;filter&lt;/var&gt; as the process filter.</source>
          <target state="translated">Install &lt;var&gt;filter&lt;/var&gt; as the process filter.</target>
        </trans-unit>
        <trans-unit id="44e7cf106d78a4e14ed20efc7a4b48dce495ecdb" translate="yes" xml:space="preserve">
          <source>Install &lt;var&gt;plist&lt;/var&gt; as the initial plist of the process.</source>
          <target state="translated">Install &lt;var&gt;plist&lt;/var&gt; as the initial plist of the process.</target>
        </trans-unit>
        <trans-unit id="f8052583c9ddb4adcb58b5e1d5c25c1b544fa693" translate="yes" xml:space="preserve">
          <source>Install &lt;var&gt;sentinel&lt;/var&gt; as the process sentinel.</source>
          <target state="translated">Install &lt;var&gt;sentinel&lt;/var&gt; as the process sentinel.</target>
        </trans-unit>
        <trans-unit id="c81b79df3c6448eae7c4f80428b54cd5692a17d7" translate="yes" xml:space="preserve">
          <source>Installation</source>
          <target state="translated">Installation</target>
        </trans-unit>
        <trans-unit id="16d39f83c12d88464b887e1ce49fd00973ec280c" translate="yes" xml:space="preserve">
          <source>Installing a package, either via the command &lt;code&gt;package-install-file&lt;/code&gt;, or via the Package Menu, creates a subdirectory of &lt;code&gt;package-user-dir&lt;/code&gt; named</source>
          <target state="translated">Installing a package, either via the command &lt;code&gt;package-install-file&lt;/code&gt; , or via the Package Menu, creates a subdirectory of &lt;code&gt;package-user-dir&lt;/code&gt; named</target>
        </trans-unit>
        <trans-unit id="44bbd8cdd2a2c9792cd51329260082dfa8dcec4d" translate="yes" xml:space="preserve">
          <source>Installing several buffer changes atomically.</source>
          <target state="translated">La instalación de varios cambios de buffer atómicos.</target>
        </trans-unit>
        <trans-unit id="0b8fb4bde942015c31c40daedf4c7212f24d5f6e" translate="yes" xml:space="preserve">
          <source>Instead of a string, &lt;var&gt;rep&lt;/var&gt; can be a function. In that case, &lt;code&gt;replace-regexp-in-string&lt;/code&gt; calls &lt;var&gt;rep&lt;/var&gt; for each match, passing the text of the match as its sole argument. It collects the value &lt;var&gt;rep&lt;/var&gt; returns and passes that to &lt;code&gt;replace-match&lt;/code&gt; as the replacement string. The match data at this point are the result of matching &lt;var&gt;regexp&lt;/var&gt; against a substring of &lt;var&gt;string&lt;/var&gt;.</source>
          <target state="translated">Instead of a string, &lt;var&gt;rep&lt;/var&gt; can be a function. In that case, &lt;code&gt;replace-regexp-in-string&lt;/code&gt; calls &lt;var&gt;rep&lt;/var&gt; for each match, passing the text of the match as its sole argument. It collects the value &lt;var&gt;rep&lt;/var&gt; returns and passes that to &lt;code&gt;replace-match&lt;/code&gt; as the replacement string. The match data at this point are the result of matching &lt;var&gt;regexp&lt;/var&gt; against a substring of &lt;var&gt;string&lt;/var&gt; .</target>
        </trans-unit>
        <trans-unit id="3f1753669c714a1d7e578072aa4ed5c9dba79dc2" translate="yes" xml:space="preserve">
          <source>Instead of adding a buffer name or a regular expression to one of these options use a &lt;code&gt;display-buffer-alist&lt;/code&gt; entry for that buffer specifying the action function &lt;code&gt;display-buffer-same-window&lt;/code&gt;.</source>
          <target state="translated">Instead of adding a buffer name or a regular expression to one of these options use a &lt;code&gt;display-buffer-alist&lt;/code&gt; entry for that buffer specifying the action function &lt;code&gt;display-buffer-same-window&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="b0a6282c7355fde001d90d645305cae7bf3bf7cc" translate="yes" xml:space="preserve">
          <source>Instead of binding the mouse command in a major mode keymap, you can bind it within the link text, using the &lt;code&gt;keymap&lt;/code&gt; text property (see &lt;a href=&quot;special-properties#Special-Properties&quot;&gt;Special Properties&lt;/a&gt;). For instance:</source>
          <target state="translated">Instead of binding the mouse command in a major mode keymap, you can bind it within the link text, using the &lt;code&gt;keymap&lt;/code&gt; text property (see &lt;a href=&quot;special-properties#Special-Properties&quot;&gt;Special Properties&lt;/a&gt;). For instance:</target>
        </trans-unit>
        <trans-unit id="2670142fd5a30e583bc4b4555d7ebad06b38986e" translate="yes" xml:space="preserve">
          <source>Instead of computing text properties for all the text in the buffer, you can arrange to compute the text properties for parts of the text when and if something depends on them.</source>
          <target state="translated">En lugar de computar las propiedades del texto para todo el texto en la memoria intermedia,se puede arreglar para computar las propiedades del texto para partes del texto cuando y si algo depende de ellas.</target>
        </trans-unit>
        <trans-unit id="e0c382c2cc436ecc3057d41eae8562719a5d21f3" translate="yes" xml:space="preserve">
          <source>Instead of customizing this variable to &lt;code&gt;t&lt;/code&gt;, customize &lt;code&gt;display-buffer-base-action&lt;/code&gt;, for example, as follows:</source>
          <target state="translated">Instead of customizing this variable to &lt;code&gt;t&lt;/code&gt; , customize &lt;code&gt;display-buffer-base-action&lt;/code&gt; , for example, as follows:</target>
        </trans-unit>
        <trans-unit id="f48c49102d6b6fcfa99d56a07826d258451b4f42" translate="yes" xml:space="preserve">
          <source>Instead of the &amp;lsquo;</source>
          <target state="translated">Instead of the &amp;lsquo;</target>
        </trans-unit>
        <trans-unit id="27778412a3ebd3d11dbf8545f85798fd64a1f13a" translate="yes" xml:space="preserve">
          <source>Instead of using &lt;code&gt;region-beginning&lt;/code&gt; and &lt;code&gt;region-end&lt;/code&gt;, a command designed to operate on a region should normally use &lt;code&gt;interactive&lt;/code&gt; with the &amp;lsquo;</source>
          <target state="translated">En lugar de usar &lt;code&gt;region-beginning&lt;/code&gt; y &lt;code&gt;region-end&lt;/code&gt; , un comando dise&amp;ntilde;ado para operar en una regi&amp;oacute;n normalmente deber&amp;iacute;a usar &lt;code&gt;interactive&lt;/code&gt; con el '</target>
        </trans-unit>
        <trans-unit id="aaf2819d27bf1d28940bd55fb19452da2f766bc0" translate="yes" xml:space="preserve">
          <source>Instead of using this variable, it is cleaner to use another, newer feature: to pass the function as the &lt;var&gt;read-function&lt;/var&gt; argument to &lt;code&gt;eval-region&lt;/code&gt;. See &lt;a href=&quot;eval#Definition-of-eval_002dregion&quot;&gt;Eval&lt;/a&gt;.</source>
          <target state="translated">En lugar de usar esta variable, es m&amp;aacute;s limpio usar otra caracter&amp;iacute;stica m&amp;aacute;s nueva: pasar la funci&amp;oacute;n como el argumento de &lt;var&gt;read-function&lt;/var&gt; de &lt;code&gt;eval-region&lt;/code&gt; a eval-region . Ver &lt;a href=&quot;eval#Definition-of-eval_002dregion&quot;&gt;Eval&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="0d2c7cb2dbf87e9087cb37f404447063050738e9" translate="yes" xml:space="preserve">
          <source>Instead of writing a character literally into a multibyte string, you can write it as its character code using an escape sequence. See &lt;a href=&quot;general-escape-syntax#General-Escape-Syntax&quot;&gt;General Escape Syntax&lt;/a&gt;, for details about escape sequences.</source>
          <target state="translated">En lugar de escribir un car&amp;aacute;cter literalmente en una cadena de varios bytes, puede escribirlo como su c&amp;oacute;digo de car&amp;aacute;cter mediante una secuencia de escape. Consulte &lt;a href=&quot;general-escape-syntax#General-Escape-Syntax&quot;&gt;Sintaxis de escape general&lt;/a&gt; para obtener detalles sobre las secuencias de escape.</target>
        </trans-unit>
        <trans-unit id="8e0e5c167c46a9a94a4405deed528806c20888f6" translate="yes" xml:space="preserve">
          <source>Instrumenting Macro Calls</source>
          <target state="translated">La instrumentación de las llamadas macro</target>
        </trans-unit>
        <trans-unit id="01d3a83d4f8979d33eb587942de6ed97b7aa1bf4" translate="yes" xml:space="preserve">
          <source>Instrumenting for Edebug</source>
          <target state="translated">Instrumentación para Edebug</target>
        </trans-unit>
        <trans-unit id="08303d355edd3eb94e9dada9e860f7f9d4221540" translate="yes" xml:space="preserve">
          <source>Integer Basics</source>
          <target state="translated">Conceptos básicos de los números enteros</target>
        </trans-unit>
        <trans-unit id="5944fda631d99e7fe1c28748c40fccba38502e8a" translate="yes" xml:space="preserve">
          <source>Integer Type</source>
          <target state="translated">Tipo entero</target>
        </trans-unit>
        <trans-unit id="0392f509cf780dcebf79ba10d500e70f3c35a232" translate="yes" xml:space="preserve">
          <source>Integers in Emacs Lisp are not limited to the machine word size. Under the hood, though, there are two kinds of integers: smaller ones, called &lt;em&gt;fixnums&lt;/em&gt;, and larger ones, called &lt;em&gt;bignums&lt;/em&gt;. Although Emacs Lisp code ordinarily should not depend on whether an integer is a fixnum or a bignum, older Emacs versions support only fixnums, some functions in Emacs still accept only fixnums, and older Emacs Lisp code may have trouble when given bignums. For example, while older Emacs Lisp code could safely compare integers for numeric equality with &lt;code&gt;eq&lt;/code&gt;, the presence of bignums means that equality predicates like &lt;code&gt;eql&lt;/code&gt; and &lt;code&gt;=&lt;/code&gt; should now be used to compare integers.</source>
          <target state="translated">Los enteros en Emacs Lisp no est&amp;aacute;n limitados al tama&amp;ntilde;o de la palabra de la m&amp;aacute;quina. Sin embargo, bajo el cap&amp;oacute;, hay dos tipos de n&amp;uacute;meros enteros: los m&amp;aacute;s peque&amp;ntilde;os, llamados &lt;em&gt;fixnums&lt;/em&gt; , y los m&amp;aacute;s grandes, llamados &lt;em&gt;bignums&lt;/em&gt; . Aunque el c&amp;oacute;digo de Emacs Lisp normalmente no deber&amp;iacute;a depender de si un entero es un fixnum o un bignum, las versiones anteriores de Emacs solo admiten fixnums, algunas funciones en Emacs todav&amp;iacute;a aceptan solo fixnums, y el c&amp;oacute;digo antiguo de Emacs Lisp puede tener problemas cuando se le da bignums. Por ejemplo, mientras que el c&amp;oacute;digo antiguo de Emacs Lisp podr&amp;iacute;a comparar con seguridad enteros para la igualdad num&amp;eacute;rica con &lt;code&gt;eq&lt;/code&gt; , la presencia de bignums significa que los predicados de igualdad como &lt;code&gt;eql&lt;/code&gt; y &lt;code&gt;=&lt;/code&gt; ahora deber&amp;iacute;an usarse para comparar enteros.</target>
        </trans-unit>
        <trans-unit id="cdaff6a8856112e0bedf086bd56487ab63649d1a" translate="yes" xml:space="preserve">
          <source>Inter-thread events.</source>
          <target state="translated">Eventos entre hilos.</target>
        </trans-unit>
        <trans-unit id="6c3d2212a9f9c32cfe9d9e6085463de2a793ed69" translate="yes" xml:space="preserve">
          <source>Interacting with the POSIX locale.</source>
          <target state="translated">Interactuando con el local de POSIX.</target>
        </trans-unit>
        <trans-unit id="a8f3404ff9a3b9a61cebb71bc3145a7e8268e559" translate="yes" xml:space="preserve">
          <source>Interaction with normal keymaps</source>
          <target state="translated">Interacción con los mapas de teclas normales</target>
        </trans-unit>
        <trans-unit id="3a4d181036b390bfd4c90ee0f787d10de7dd1557" translate="yes" xml:space="preserve">
          <source>Interactive Call</source>
          <target state="translated">Llamada interactiva</target>
        </trans-unit>
        <trans-unit id="8c112c62a1db80a1fd6eb4c52dbbd37b94063133" translate="yes" xml:space="preserve">
          <source>Interactive interfaces for redefining keys.</source>
          <target state="translated">Interfaces interactivas para redefinir las claves.</target>
        </trans-unit>
        <trans-unit id="bb426c56195b2ae94b49e74ad823d065b0153c08" translate="yes" xml:space="preserve">
          <source>Interactively, &lt;code&gt;byte-recompile-directory&lt;/code&gt; prompts for &lt;var&gt;directory&lt;/var&gt; and &lt;var&gt;flag&lt;/var&gt; is the prefix argument.</source>
          <target state="translated">De forma interactiva, &lt;code&gt;byte-recompile-directory&lt;/code&gt; solicita el &lt;var&gt;directory&lt;/var&gt; y el &lt;var&gt;flag&lt;/var&gt; es el argumento del prefijo.</target>
        </trans-unit>
        <trans-unit id="89db943b3ea009e2eeb342d7b413658ef1beb7e7" translate="yes" xml:space="preserve">
          <source>Interactively, &lt;var&gt;mode&lt;/var&gt; is read from the minibuffer using &lt;code&gt;read-file-modes&lt;/code&gt; (see below), which lets the user type in either an integer or a string representing the permissions symbolically.</source>
          <target state="translated">De forma interactiva, el &lt;var&gt;mode&lt;/var&gt; se lee desde el minib&amp;uacute;fer usando &lt;code&gt;read-file-modes&lt;/code&gt; (ver m&amp;aacute;s abajo), lo que permite al usuario escribir un n&amp;uacute;mero entero o una cadena que representa los permisos de forma simb&amp;oacute;lica.</target>
        </trans-unit>
        <trans-unit id="1ac1b597f72189ba2ae56769e0cdd444c02533a2" translate="yes" xml:space="preserve">
          <source>Interactively, or when &lt;var&gt;display&lt;/var&gt; is non-&lt;code&gt;nil&lt;/code&gt;, the return value is also displayed in the echo area.</source>
          <target state="translated">De forma interactiva, o cuando la &lt;var&gt;display&lt;/var&gt; no es &lt;code&gt;nil&lt;/code&gt; , el valor de retorno tambi&amp;eacute;n se muestra en el &amp;aacute;rea de eco.</target>
        </trans-unit>
        <trans-unit id="b6a1797fff7a6f70ada887bad92631a8a9bf2bb1" translate="yes" xml:space="preserve">
          <source>Interfacing to an archive web server</source>
          <target state="translated">Interfaz con un servidor web de archivo...</target>
        </trans-unit>
        <trans-unit id="6fd6296201ee71e0d25d2f3b29fb410be639536c" translate="yes" xml:space="preserve">
          <source>Interfacing to an archive web server.</source>
          <target state="translated">Interfaz con un servidor web de archivo.</target>
        </trans-unit>
        <trans-unit id="b88993e0e807666740f1e6e7487891d4221c3508" translate="yes" xml:space="preserve">
          <source>Internal Border</source>
          <target state="translated">Frontera interna</target>
        </trans-unit>
        <trans-unit id="1f6f7ba7cb7b347a96d1107fab7991d51090ae38" translate="yes" xml:space="preserve">
          <source>Internal mechanisms of image display.</source>
          <target state="translated">Mecanismos internos de visualización de imágenes.</target>
        </trans-unit>
        <trans-unit id="aae2d2f7d4d44e63ffbe3d64c1331e1f4a7499c4" translate="yes" xml:space="preserve">
          <source>Internal size of a buffer, i.e., &lt;code&gt;sizeof (struct buffer)&lt;/code&gt;. (Do not confuse with the value returned by &lt;code&gt;buffer-size&lt;/code&gt; function.)</source>
          <target state="translated">Tama&amp;ntilde;o interno de un b&amp;uacute;fer, es decir, tama&amp;ntilde;o de &lt;code&gt;sizeof (struct buffer)&lt;/code&gt; . (No confunda con el valor devuelto por la funci&amp;oacute;n de &lt;code&gt;buffer-size&lt;/code&gt; ).</target>
        </trans-unit>
        <trans-unit id="5a032235c1121bf9c1e0179ca7ff43c3f2ac2220" translate="yes" xml:space="preserve">
          <source>Internal size of a cons cell, i.e., &lt;code&gt;sizeof (struct Lisp_Cons)&lt;/code&gt;.</source>
          <target state="translated">Tama&amp;ntilde;o interno de una celda de contras, es decir, &lt;code&gt;sizeof (struct Lisp_Cons)&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="b01e7eab827250f987c16a7e503e6a91dd12d67d" translate="yes" xml:space="preserve">
          <source>Internal size of a float object, i.e., &lt;code&gt;sizeof (struct Lisp_Float)&lt;/code&gt;. (Do not confuse it with the native platform &lt;code&gt;float&lt;/code&gt; or &lt;code&gt;double&lt;/code&gt;.)</source>
          <target state="translated">Tama&amp;ntilde;o interno de un objeto flotante, es decir, &lt;code&gt;sizeof (struct Lisp_Float)&lt;/code&gt; . (No lo confunda con la plataforma nativa &lt;code&gt;float&lt;/code&gt; o &lt;code&gt;double&lt;/code&gt; ).</target>
        </trans-unit>
        <trans-unit id="1837980aa62b1a62e48654b616a2e12c11db3594" translate="yes" xml:space="preserve">
          <source>Internal size of a string header, i.e., &lt;code&gt;sizeof (struct Lisp_String)&lt;/code&gt;.</source>
          <target state="translated">Tama&amp;ntilde;o interno de un encabezado de cadena, es decir, &lt;code&gt;sizeof (struct Lisp_String)&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="674373e621338f8918b9cf85fce5944b7e0a8d86" translate="yes" xml:space="preserve">
          <source>Internal size of a symbol, i.e., &lt;code&gt;sizeof (struct Lisp_Symbol)&lt;/code&gt;.</source>
          <target state="translated">Tama&amp;ntilde;o interno de un s&amp;iacute;mbolo, es decir, &lt;code&gt;sizeof (struct Lisp_Symbol)&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="b4e2cb2dd48ef88f7cd7e24e4c124a254fe9f746" translate="yes" xml:space="preserve">
          <source>Internal size of a vector slot, always equal to &lt;code&gt;sizeof (Lisp_Object)&lt;/code&gt;.</source>
          <target state="translated">Tama&amp;ntilde;o interno de una ranura vectorial, siempre igual al &lt;code&gt;sizeof (Lisp_Object)&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="0ee27812d3f05af328dcd6e592fdf426cab58207" translate="yes" xml:space="preserve">
          <source>Internal size of an interval object, i.e., &lt;code&gt;sizeof (struct interval)&lt;/code&gt;.</source>
          <target state="translated">Tama&amp;ntilde;o interno de un objeto de intervalo, es decir, tama&amp;ntilde;o de &lt;code&gt;sizeof (struct interval)&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="96c24069c6a8e1694d80a391c18f10c673381b44" translate="yes" xml:space="preserve">
          <source>Internally, &lt;code&gt;defalias&lt;/code&gt; normally uses &lt;code&gt;fset&lt;/code&gt; to set the definition. If &lt;var&gt;name&lt;/var&gt; has a &lt;code&gt;defalias-fset-function&lt;/code&gt; property, however, the associated value is used as a function to call in place of &lt;code&gt;fset&lt;/code&gt;.</source>
          <target state="translated">Internamente, &lt;code&gt;defalias&lt;/code&gt; normalmente usa &lt;code&gt;fset&lt;/code&gt; para establecer la definici&amp;oacute;n. Sin embargo, si &lt;var&gt;name&lt;/var&gt; tiene una &lt;code&gt;defalias-fset-function&lt;/code&gt; , el valor asociado se usa como una funci&amp;oacute;n para llamar en lugar de &lt;code&gt;fset&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="068796783fad3a87ca900b7c710e4916ea8b3bc6" translate="yes" xml:space="preserve">
          <source>Internally, &lt;code&gt;defcustom&lt;/code&gt; uses the symbol property &lt;code&gt;standard-value&lt;/code&gt; to record the expression for the standard value, &lt;code&gt;saved-value&lt;/code&gt; to record the value saved by the user with the customization buffer, and &lt;code&gt;customized-value&lt;/code&gt; to record the value set by the user with the customization buffer, but not saved. See &lt;a href=&quot;symbol-properties#Symbol-Properties&quot;&gt;Symbol Properties&lt;/a&gt;. In addition, there&amp;rsquo;s &lt;code&gt;themed-value&lt;/code&gt;, which is used to record the value set by a theme (see &lt;a href=&quot;custom-themes#Custom-Themes&quot;&gt;Custom Themes&lt;/a&gt;). These properties are lists, the car of which is an expression that evaluates to the value.</source>
          <target state="translated">Internamente, &lt;code&gt;defcustom&lt;/code&gt; usa la propiedad del s&amp;iacute;mbolo &lt;code&gt;standard-value&lt;/code&gt; para registrar la expresi&amp;oacute;n para el valor est&amp;aacute;ndar, valor &lt;code&gt;saved-value&lt;/code&gt; para registrar el valor guardado por el usuario con el b&amp;uacute;fer de &lt;code&gt;customized-value&lt;/code&gt; para registrar el valor establecido por el usuario con la personalizaci&amp;oacute;n b&amp;uacute;fer, pero no guardado. Consulte &lt;a href=&quot;symbol-properties#Symbol-Properties&quot;&gt;Propiedades de s&amp;iacute;mbolo&lt;/a&gt; . Adem&amp;aacute;s, est&amp;aacute; &lt;code&gt;themed-value&lt;/code&gt; , que se utiliza para registrar el valor establecido por un tema (consulte &lt;a href=&quot;custom-themes#Custom-Themes&quot;&gt;Temas personalizados&lt;/a&gt; ). Estas propiedades son listas, cuyo coche es una expresi&amp;oacute;n que eval&amp;uacute;a el valor.</target>
        </trans-unit>
        <trans-unit id="d530007eafdd82a256c358d7298bdbec30d8cfb6" translate="yes" xml:space="preserve">
          <source>Internally, &lt;code&gt;make-serial-process&lt;/code&gt; calls &lt;code&gt;serial-process-configure&lt;/code&gt; for the initial configuration of the serial port.</source>
          <target state="translated">Internamente, &lt;code&gt;make-serial-process&lt;/code&gt; llama a &lt;code&gt;serial-process-configure&lt;/code&gt; para la configuraci&amp;oacute;n inicial del puerto serial.</target>
        </trans-unit>
        <trans-unit id="793925a115b236f980464335670b39f399baa2cd" translate="yes" xml:space="preserve">
          <source>Internally, &lt;code&gt;word-search-forward&lt;/code&gt; and related functions use the function &lt;code&gt;word-search-regexp&lt;/code&gt; to convert &lt;var&gt;string&lt;/var&gt; to a regular expression that ignores punctuation.</source>
          <target state="translated">Internamente, &lt;code&gt;word-search-forward&lt;/code&gt; y las funciones relacionadas utilizan la funci&amp;oacute;n &lt;code&gt;word-search-regexp&lt;/code&gt; para convertir &lt;var&gt;string&lt;/var&gt; en una expresi&amp;oacute;n regular que ignora la puntuaci&amp;oacute;n.</target>
        </trans-unit>
        <trans-unit id="975cc38153f45730f641194a328f88d442fb0adf" translate="yes" xml:space="preserve">
          <source>Internally, Emacs arranges windows in a tree; each group of siblings has a parent window whose area includes all the siblings. This field points to the window&amp;rsquo;s parent in that tree, as a Lisp object. For the root window of the tree and a minibuffer window this is always &lt;code&gt;nil&lt;/code&gt;.</source>
          <target state="translated">Internamente, Emacs organiza las ventanas en un &amp;aacute;rbol; cada grupo de hermanos tiene una ventana principal cuya &amp;aacute;rea incluye a todos los hermanos. Este campo apunta al padre de la ventana en ese &amp;aacute;rbol, como un objeto Lisp. Para la ventana ra&amp;iacute;z del &amp;aacute;rbol y una ventana de minib&amp;uacute;fer, esto siempre es &lt;code&gt;nil&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="c9a16f1135c9a066d602dd303b59514a13358f60" translate="yes" xml:space="preserve">
          <source>Internally, Emacs stores each face&amp;rsquo;s default spec in its &lt;code&gt;face-defface-spec&lt;/code&gt; symbol property (see &lt;a href=&quot;symbol-properties#Symbol-Properties&quot;&gt;Symbol Properties&lt;/a&gt;). The &lt;code&gt;saved-face&lt;/code&gt; property stores any face spec saved by the user using the customization buffer; the &lt;code&gt;customized-face&lt;/code&gt; property stores the face spec customized for the current session, but not saved; and the &lt;code&gt;theme-face&lt;/code&gt; property stores an alist associating the active customization settings and Custom themes with the face specs for that face. The face&amp;rsquo;s documentation string is stored in the &lt;code&gt;face-documentation&lt;/code&gt; property.</source>
          <target state="translated">Internamente, Emacs almacena la especificaci&amp;oacute;n predeterminada de cada cara en su propiedad de s&amp;iacute;mbolo &lt;code&gt;face-defface-spec&lt;/code&gt; (ver &lt;a href=&quot;symbol-properties#Symbol-Properties&quot;&gt;Propiedades de s&amp;iacute;mbolo&lt;/a&gt; ). Los &lt;code&gt;saved-face&lt;/code&gt; tiendas de propiedad cualquier spec cara salvados por el usuario usando el b&amp;uacute;fer de personalizaci&amp;oacute;n; los &lt;code&gt;customized-face&lt;/code&gt; propiedad almacena la especificaci&amp;oacute;n cara personalizada para la sesi&amp;oacute;n actual, pero no se guardan; y la propiedad de la &lt;code&gt;theme-face&lt;/code&gt; del tema almacena una lista que asocia la configuraci&amp;oacute;n de personalizaci&amp;oacute;n activa y los temas personalizados con las especificaciones de la cara para esa cara. La cadena de documentaci&amp;oacute;n de la cara se almacena en la propiedad de &lt;code&gt;face-documentation&lt;/code&gt; la cara .</target>
        </trans-unit>
        <trans-unit id="890345b36f6729af8e091b77ec37233f091c4268" translate="yes" xml:space="preserve">
          <source>Internally, a byte-code function object is much like a vector; its elements can be accessed using &lt;code&gt;aref&lt;/code&gt;. Its printed representation is like that for a vector, with an additional &amp;lsquo;</source>
          <target state="translated">Internamente, un objeto de funci&amp;oacute;n de c&amp;oacute;digo de bytes es muy parecido a un vector; se puede acceder a sus elementos usando &lt;code&gt;aref&lt;/code&gt; . Su representaci&amp;oacute;n impresa es como la de un vector, con un '</target>
        </trans-unit>
        <trans-unit id="c255d867bde58e3eaa0e52e4d12a66d31afbc458" translate="yes" xml:space="preserve">
          <source>Internally, a record object is much like a vector; its slots can be accessed using &lt;code&gt;aref&lt;/code&gt; and it can be copied using &lt;code&gt;copy-sequence&lt;/code&gt;. However, the first slot is used to hold its type as returned by &lt;code&gt;type-of&lt;/code&gt;. Also, in the current implementation records can have at most 4096 slots, whereas vectors can be much larger. Like arrays, records use zero-origin indexing: the first slot has index 0.</source>
          <target state="translated">Internamente, un objeto de registro es muy parecido a un vector; se puede acceder a sus ranuras usando &lt;code&gt;aref&lt;/code&gt; y se puede copiar usando &lt;code&gt;copy-sequence&lt;/code&gt; . Sin embargo, la primera ranura se usa para mantener su tipo como lo devuelve &lt;code&gt;type-of&lt;/code&gt; . Adem&amp;aacute;s, en la implementaci&amp;oacute;n actual, los registros pueden tener como m&amp;aacute;ximo 4096 ranuras, mientras que los vectores pueden ser mucho m&amp;aacute;s grandes. Al igual que las matrices, los registros utilizan indexaci&amp;oacute;n de origen cero: la primera ranura tiene el &amp;iacute;ndice 0.</target>
        </trans-unit>
        <trans-unit id="10ce65f3f55d9a82d5a4e5b0c5a3b5dfc8acdf3d" translate="yes" xml:space="preserve">
          <source>Internally, a syntax table is a char-table (see &lt;a href=&quot;char_002dtables#Char_002dTables&quot;&gt;Char-Tables&lt;/a&gt;). The element at index &lt;var&gt;c&lt;/var&gt; describes the character with code &lt;var&gt;c&lt;/var&gt;; its value is a cons cell which specifies the syntax of the character in question. See &lt;a href=&quot;syntax-table-internals#Syntax-Table-Internals&quot;&gt;Syntax Table Internals&lt;/a&gt;, for details. However, instead of using &lt;code&gt;aset&lt;/code&gt; and &lt;code&gt;aref&lt;/code&gt; to modify and inspect syntax table contents, you should usually use the higher-level functions &lt;code&gt;char-syntax&lt;/code&gt; and &lt;code&gt;modify-syntax-entry&lt;/code&gt;, which are described in &lt;a href=&quot;syntax-table-functions#Syntax-Table-Functions&quot;&gt;Syntax Table Functions&lt;/a&gt;.</source>
          <target state="translated">Internamente, una tabla de sintaxis es una tabla de caracteres (consulte &lt;a href=&quot;char_002dtables#Char_002dTables&quot;&gt;Tablas de caracteres&lt;/a&gt; ). El elemento en el &amp;iacute;ndice &lt;var&gt;c&lt;/var&gt; describe el car&amp;aacute;cter con c&amp;oacute;digo &lt;var&gt;c&lt;/var&gt; ; su valor es una celda contras que especifica la sintaxis del car&amp;aacute;cter en cuesti&amp;oacute;n. Consulte &lt;a href=&quot;syntax-table-internals#Syntax-Table-Internals&quot;&gt;Elementos internos de la tabla de sintaxis&lt;/a&gt; para obtener m&amp;aacute;s detalles. Sin embargo, en lugar de utilizar &lt;code&gt;aset&lt;/code&gt; y &lt;code&gt;aref&lt;/code&gt; para modificar e inspeccionar contenido de la tabla de sintaxis, por lo general debe utilizar la funciones de nivel superior &lt;code&gt;char-syntax&lt;/code&gt; y &lt;code&gt;modify-syntax-entry&lt;/code&gt; , que se describen en &lt;a href=&quot;syntax-table-functions#Syntax-Table-Functions&quot;&gt;Funciones sintaxis de tablas&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="ab6dcb624548f874717d593593cde5ae43f61956" translate="yes" xml:space="preserve">
          <source>Internally, the dynamic loading of documentation strings is accomplished by writing compiled files with a special Lisp reader construct, &amp;lsquo;</source>
          <target state="translated">Internamente, la carga din&amp;aacute;mica de cadenas de documentaci&amp;oacute;n se logra escribiendo archivos compilados con una construcci&amp;oacute;n de lector Lisp especial, '</target>
        </trans-unit>
        <trans-unit id="6c7d074b02409a43b3c3691b8e3eff070049c70c" translate="yes" xml:space="preserve">
          <source>Internally, the set of parents is stored in the &lt;code&gt;error-conditions&lt;/code&gt; property of the error symbol and the message is stored in the &lt;code&gt;error-message&lt;/code&gt; property of the error symbol.</source>
          <target state="translated">Internamente, el conjunto de padres se almacena en la propiedad de &lt;code&gt;error-conditions&lt;/code&gt; de error del s&amp;iacute;mbolo de error y el mensaje se almacena en la propiedad de &lt;code&gt;error-message&lt;/code&gt; de error del s&amp;iacute;mbolo de error.</target>
        </trans-unit>
        <trans-unit id="5b6293020ceb499ae9005377abda5b9d10b853fe" translate="yes" xml:space="preserve">
          <source>Internally, this function creates an overlay, and gives it a &lt;code&gt;before-string&lt;/code&gt; property containing text that has a &lt;code&gt;display&lt;/code&gt; property whose value is the image. (Whew!)</source>
          <target state="translated">Internamente, esta funci&amp;oacute;n crea una superposici&amp;oacute;n y le da una propiedad &lt;code&gt;before-string&lt;/code&gt; contiene texto que tiene una propiedad de &lt;code&gt;display&lt;/code&gt; cuyo valor es la imagen. (&amp;iexcl;Uf!)</target>
        </trans-unit>
        <trans-unit id="ad027260c034e64a0aed9ec0c21434a870d67bde" translate="yes" xml:space="preserve">
          <source>Internally, this function inserts &lt;var&gt;string&lt;/var&gt; in the buffer, and gives it a &lt;code&gt;display&lt;/code&gt; property which specifies &lt;var&gt;image&lt;/var&gt;. See &lt;a href=&quot;display-property#Display-Property&quot;&gt;Display Property&lt;/a&gt;.</source>
          <target state="translated">Internamente, esta funci&amp;oacute;n inserta una &lt;var&gt;string&lt;/var&gt; en el b&amp;uacute;fer y le da una propiedad de &lt;code&gt;display&lt;/code&gt; que especifica la &lt;var&gt;image&lt;/var&gt; n . Consulte &lt;a href=&quot;display-property#Display-Property&quot;&gt;Propiedad de visualizaci&amp;oacute;n&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="d82805e46a43054034aa8dbdc3072940853963ca" translate="yes" xml:space="preserve">
          <source>Internals of Drag-and-Drop implementation.</source>
          <target state="translated">Internos de la aplicación de arrastrar y soltar.</target>
        </trans-unit>
        <trans-unit id="0878947a69e042d32e6c0e5b544cd467d1e941d1" translate="yes" xml:space="preserve">
          <source>Internals of the Debugger</source>
          <target state="translated">Los internos del Depurador</target>
        </trans-unit>
        <trans-unit id="f059416759860bf53ccffccb3662c0ac1c504a36" translate="yes" xml:space="preserve">
          <source>Internals of the Kill Ring</source>
          <target state="translated">Internos del Anillo de la Muerte</target>
        </trans-unit>
        <trans-unit id="c8a6d283f50874c1f273c7066e8f6024a632ca2a" translate="yes" xml:space="preserve">
          <source>International characters in strings.</source>
          <target state="translated">Personajes internacionales en cuerdas.</target>
        </trans-unit>
        <trans-unit id="2a55fdbcbc93e7871a3735ecdecb37fb80ceb461" translate="yes" xml:space="preserve">
          <source>Interning ensures that each obarray has just one symbol with any particular name. Other like-named symbols may exist, but not in the same obarray. Thus, the reader gets the same symbols for the same names, as long as you keep reading with the same obarray.</source>
          <target state="translated">El pasante se asegura de que cada obarray tenga un solo símbolo con un nombre en particular.Pueden existir otros símbolos con nombres similares,pero no en la misma matriz.Así,el lector obtiene los mismos símbolos para los mismos nombres,siempre y cuando siga leyendo con la misma matriz.</target>
        </trans-unit>
        <trans-unit id="a82f77a8f55334d8bb59e260c5127cc00a4536b2" translate="yes" xml:space="preserve">
          <source>Interning usually happens automatically in the reader, but sometimes other programs need to do it. For example, after the</source>
          <target state="translated">El internado suele ocurrir automáticamente en el lector,pero a veces otros programas necesitan hacerlo.Por ejemplo,después de la</target>
        </trans-unit>
        <trans-unit id="2473e96bc614a911821242119918a241a41836d6" translate="yes" xml:space="preserve">
          <source>Introduction</source>
          <target state="translated">Introduction</target>
        </trans-unit>
        <trans-unit id="8ed8ee7e55170bcbcc50e6f4ddad4940be31b3b2" translate="yes" xml:space="preserve">
          <source>Introduction and concepts.</source>
          <target state="translated">Introducción y conceptos.</target>
        </trans-unit>
        <trans-unit id="f63dc883116ea7e854aa44d7f9ec4421e0ce2395" translate="yes" xml:space="preserve">
          <source>Introduction and conventions used.</source>
          <target state="translated">Introducción y convenciones utilizadas.</target>
        </trans-unit>
        <trans-unit id="b8caf81bc82bf9149f7f4f8ca46a4d2df8d59d59" translate="yes" xml:space="preserve">
          <source>Introduction to Buffer-Local Variables</source>
          <target state="translated">Introducción a las Variables Locales de Tampón</target>
        </trans-unit>
        <trans-unit id="ca959ab108e8c4b82e06c2cd8e7df1402c2fdca1" translate="yes" xml:space="preserve">
          <source>Introduction to Evaluation</source>
          <target state="translated">Introducción a la evaluación</target>
        </trans-unit>
        <trans-unit id="424b5352ecd6aed0c4787a5e67cf7822394d4180" translate="yes" xml:space="preserve">
          <source>Introduction to Minibuffers</source>
          <target state="translated">Introducción a los Minibuffers</target>
        </trans-unit>
        <trans-unit id="08f3e034c9cceb45ce8ecb8f79ad7b810051e748" translate="yes" xml:space="preserve">
          <source>Introduction to Reading and Printing</source>
          <target state="translated">Introducción a la lectura y la impresión</target>
        </trans-unit>
        <trans-unit id="97ad18054b9569eed06f9ecf25bb01ba9f0544fc" translate="yes" xml:space="preserve">
          <source>Introduction to use of Edebug.</source>
          <target state="translated">Introducción al uso de Edebug.</target>
        </trans-unit>
        <trans-unit id="fb00fd291ed8bdc1da78f75b2dfea4fe96a9552c" translate="yes" xml:space="preserve">
          <source>Invalid coding system</source>
          <target state="translated">Sistema de codificación inválido</target>
        </trans-unit>
        <trans-unit id="f4da90dedff4144a88b3f5641db5e04aea389b0e" translate="yes" xml:space="preserve">
          <source>Invalid format operation</source>
          <target state="translated">Operación de formato inválido</target>
        </trans-unit>
        <trans-unit id="05b9e32cfa1dec4a8735af4f154c5c0b16324e49" translate="yes" xml:space="preserve">
          <source>Invalid function</source>
          <target state="translated">Función inválida</target>
        </trans-unit>
        <trans-unit id="21f66391b38e2d6c5385ca6d73c08b6046139bff" translate="yes" xml:space="preserve">
          <source>Invalid read syntax</source>
          <target state="translated">Sintaxis de lectura inválida</target>
        </trans-unit>
        <trans-unit id="39af5982d90c7c046f2c0e30d3c43a0d69f7c511" translate="yes" xml:space="preserve">
          <source>Invalid read syntax: &quot;)&quot;</source>
          <target state="translated">Sintaxis de lectura inválida:&quot;)&quot;</target>
        </trans-unit>
        <trans-unit id="1f526a95f220fa3e397793791a95103a25349fa5" translate="yes" xml:space="preserve">
          <source>Invalid regexp</source>
          <target state="translated">Inválido regexp</target>
        </trans-unit>
        <trans-unit id="c28782659524c74728d4791e47ac0768f2d2a2fa" translate="yes" xml:space="preserve">
          <source>Invisible Text</source>
          <target state="translated">Texto Invisible</target>
        </trans-unit>
        <trans-unit id="1ba45e6efe9b69076beb81f22754c2276b515f29" translate="yes" xml:space="preserve">
          <source>Invokes &lt;code&gt;pop-to-buffer&lt;/code&gt; to proceed.</source>
          <target state="translated">Invoca &lt;code&gt;pop-to-buffer&lt;/code&gt; para continuar.</target>
        </trans-unit>
        <trans-unit id="2b6f179c44acf946ea87d5fd9a67e79980a7bf28" translate="yes" xml:space="preserve">
          <source>Invoking the Debugger</source>
          <target state="translated">Invocando al Depurador</target>
        </trans-unit>
        <trans-unit id="3b5c7ed80b795c31ca809c1980f8e9b7ef9b7cb4" translate="yes" xml:space="preserve">
          <source>Invoking the Input Method</source>
          <target state="translated">Invocando el método de entrada</target>
        </trans-unit>
        <trans-unit id="f95535be202c390af54850aaa2b9814ce9f60024" translate="yes" xml:space="preserve">
          <source>Invoking the minibuffer with completion.</source>
          <target state="translated">Invocando al minibú con la finalización.</target>
        </trans-unit>
        <trans-unit id="d82cb1a6affac049d5e0a64e8bc2eabc7098b52a" translate="yes" xml:space="preserve">
          <source>Is a given file readable? Writable?</source>
          <target state="translated">¿Se puede leer un archivo determinado? ¿Escribible?</target>
        </trans-unit>
        <trans-unit id="cc345fde3dff917a2877747ac2b2a0a59a508cad" translate="yes" xml:space="preserve">
          <source>Is it a directory? A symbolic link?</source>
          <target state="translated">¿Es un directorio? ¿Un enlace simbólico?</target>
        </trans-unit>
        <trans-unit id="ce731c05fc64ab5b57ee9d5ba394e0ea5eb6be0b" translate="yes" xml:space="preserve">
          <source>Is this object a list? Comparing two lists.</source>
          <target state="translated">¿Este objeto es una lista? Comparando dos listas.</target>
        </trans-unit>
        <trans-unit id="faf1e5134b7192f681808c3c7a3dcf14d24adcce" translate="yes" xml:space="preserve">
          <source>It adds subdirectories to &lt;code&gt;load-path&lt;/code&gt;, by running the file named</source>
          <target state="translated">Agrega subdirectorios a &lt;code&gt;load-path&lt;/code&gt; , ejecutando el archivo llamado</target>
        </trans-unit>
        <trans-unit id="26ebe0ae609401a2ad28c4f3ef880f902fb57804" translate="yes" xml:space="preserve">
          <source>It also affects decisions about whether to scroll part of the screen or repaint on text terminals. See &lt;a href=&quot;forcing-redisplay#Forcing-Redisplay&quot;&gt;Forcing Redisplay&lt;/a&gt;, for the corresponding functionality on graphical terminals.</source>
          <target state="translated">Tambi&amp;eacute;n afecta las decisiones sobre si desplazar parte de la pantalla o volver a pintar en terminales de texto. Consulte &lt;a href=&quot;forcing-redisplay#Forcing-Redisplay&quot;&gt;Forzar la visualizaci&amp;oacute;n nueva&lt;/a&gt; para conocer la funcionalidad correspondiente en terminales gr&amp;aacute;ficos.</target>
        </trans-unit>
        <trans-unit id="a4141f73f90581e1ab9aa132384bbf4e5ae08ded" translate="yes" xml:space="preserve">
          <source>It also applies to any asynchronous subprocess or network stream, but in a different way: the value of &lt;code&gt;coding-system-for-read&lt;/code&gt; when you start the subprocess or open the network stream specifies the input decoding method for that subprocess or network stream. It remains in use for that subprocess or network stream unless and until overridden.</source>
          <target state="translated">Tambi&amp;eacute;n se aplica a cualquier subproceso asincr&amp;oacute;nico o flujo de red, pero de una manera diferente: el valor de &lt;code&gt;coding-system-for-read&lt;/code&gt; cuando inicia el subproceso o abre el flujo de red especifica el m&amp;eacute;todo de decodificaci&amp;oacute;n de entrada para ese subproceso o flujo de red. Permanece en uso para ese subproceso o flujo de red a menos que y hasta que se anule.</target>
        </trans-unit>
        <trans-unit id="aace0e7e04bb1701d0b33950723bc535b0281f25" translate="yes" xml:space="preserve">
          <source>It also displays the symbols in a buffer named</source>
          <target state="translated">También muestra los símbolos en un buffer llamado</target>
        </trans-unit>
        <trans-unit id="10f4c6d92e33b4069ea7366cc5044b10b6555757" translate="yes" xml:space="preserve">
          <source>It always returns &lt;code&gt;t&lt;/code&gt; for buffers that are not visiting a file, even if &lt;code&gt;visited-file-modtime&lt;/code&gt; returns a non-zero value. For instance, it always returns &lt;code&gt;t&lt;/code&gt; for dired buffers. It returns &lt;code&gt;t&lt;/code&gt; for buffers that are visiting a file that does not exist and never existed, but &lt;code&gt;nil&lt;/code&gt; for file-visiting buffers whose file has been deleted.</source>
          <target state="translated">Siempre devuelve &lt;code&gt;t&lt;/code&gt; para los b&amp;uacute;feres que no visitan un archivo, incluso si &lt;code&gt;visited-file-modtime&lt;/code&gt; devuelve un valor distinto de cero. Por ejemplo, siempre devuelve &lt;code&gt;t&lt;/code&gt; para dired buffers. Devuelve &lt;code&gt;t&lt;/code&gt; para los b&amp;uacute;feres que visitan un archivo que no existe y nunca existi&amp;oacute;, pero &lt;code&gt;nil&lt;/code&gt; para los b&amp;uacute;feres que visitan archivos cuyo archivo ha sido eliminado.</target>
        </trans-unit>
        <trans-unit id="36679f079089d8681a01f756abfb5ab13128d005" translate="yes" xml:space="preserve">
          <source>It always sets the file modes of the copied files to match the corresponding original file.</source>
          <target state="translated">Siempre establece los modos de archivo de los archivos copiados para que coincidan con el archivo original correspondiente.</target>
        </trans-unit>
        <trans-unit id="68c121eadb6645154879627e1f8f4d91b9159e0d" translate="yes" xml:space="preserve">
          <source>It blocks out all process output (since Emacs accepts process output only while waiting).</source>
          <target state="translated">Bloquea toda la salida del proceso (ya que el Emacs acepta la salida del proceso sólo mientras espera).</target>
        </trans-unit>
        <trans-unit id="db1622f7113638a1b6cf00fc1d147d1151f5939d" translate="yes" xml:space="preserve">
          <source>It blocks out any idle timers that ought to run during that time.</source>
          <target state="translated">Bloquea cualquier temporizador ocioso que deba funcionar durante ese tiempo.</target>
        </trans-unit>
        <trans-unit id="500a99712580a0fd93b02db9ad0f50b8dfd5061d" translate="yes" xml:space="preserve">
          <source>It calls &lt;code&gt;frame-notice-user-settings&lt;/code&gt;, which modifies the parameters of the selected frame according to whatever the init files specify.</source>
          <target state="translated">Llama a &lt;code&gt;frame-notice-user-settings&lt;/code&gt; , que modifica los par&amp;aacute;metros del marco seleccionado de acuerdo con lo que especifiquen los archivos de inicio.</target>
        </trans-unit>
        <trans-unit id="08316562225e169cff224da3eaa939766d93f6e4" translate="yes" xml:space="preserve">
          <source>It calls the function &lt;code&gt;package-activate-all&lt;/code&gt; to activate any optional Emacs Lisp package that has been installed. See &lt;a href=&quot;packaging-basics#Packaging-Basics&quot;&gt;Packaging Basics&lt;/a&gt;. However, Emacs doesn&amp;rsquo;t activate the packages when &lt;code&gt;package-enable-at-startup&lt;/code&gt; is &lt;code&gt;nil&lt;/code&gt; or when it&amp;rsquo;s started with one of the options &amp;lsquo;</source>
          <target state="translated">Llama a la funci&amp;oacute;n &lt;code&gt;package-activate-all&lt;/code&gt; para activar cualquier paquete opcional de Emacs Lisp que haya sido instalado. Consulte &lt;a href=&quot;packaging-basics#Packaging-Basics&quot;&gt;Conceptos b&amp;aacute;sicos de empaque&lt;/a&gt; . Sin embargo, Emacs no activa los paquetes cuando &lt;code&gt;package-enable-at-startup&lt;/code&gt; es &lt;code&gt;nil&lt;/code&gt; o cuando se inicia con una de las opciones '</target>
        </trans-unit>
        <trans-unit id="0136b0ca24d16b01a291e47bd7153f4f2fba2a73" translate="yes" xml:space="preserve">
          <source>It creates the submenu &lt;var&gt;menu-title&lt;/var&gt; specified by &lt;var&gt;sub-alist&lt;/var&gt;.</source>
          <target state="translated">Crea el &lt;var&gt;menu-title&lt;/var&gt; del submen&amp;uacute; especificado por &lt;var&gt;sub-alist&lt;/var&gt; .</target>
        </trans-unit>
        <trans-unit id="69c1303d35db5ea0aad7fd95fc917c9a224ef2f1" translate="yes" xml:space="preserve">
          <source>It displays the &lt;em&gt;startup screen&lt;/em&gt;, which is a special buffer that contains information about copyleft and basic Emacs usage. This is not done if &lt;code&gt;inhibit-startup-screen&lt;/code&gt; or &lt;code&gt;initial-buffer-choice&lt;/code&gt; are non-&lt;code&gt;nil&lt;/code&gt;, or if the &amp;lsquo;</source>
          <target state="translated">Muestra la &lt;em&gt;pantalla de inicio&lt;/em&gt; , que es un b&amp;uacute;fer especial que contiene informaci&amp;oacute;n sobre el copyleft y el uso b&amp;aacute;sico de Emacs. Esto no se hace si &lt;code&gt;inhibit-startup-screen&lt;/code&gt; o &lt;code&gt;initial-buffer-choice&lt;/code&gt; son no- &lt;code&gt;nil&lt;/code&gt; , o si el '</target>
        </trans-unit>
        <trans-unit id="26297586b2674d5e45392b02c3a4a0a6b4471608" translate="yes" xml:space="preserve">
          <source>It displays the initial echo area message, unless you have suppressed that with &lt;code&gt;inhibit-startup-echo-area-message&lt;/code&gt;.</source>
          <target state="translated">Muestra el mensaje de &amp;aacute;rea de eco inicial, a menos que lo haya suprimido con &lt;code&gt;inhibit-startup-echo-area-message&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="deb0e9c99bf58c06b6f38c7c256f96f0b734089a" translate="yes" xml:space="preserve">
          <source>It does not matter to the caller of a function whether the function is primitive. However, this does matter if you try to redefine a primitive with a function written in Lisp. The reason is that the primitive function may be called directly from C code. Calls to the redefined function from Lisp will use the new definition, but calls from C code may still use the built-in definition. Therefore, &lt;strong&gt;we discourage redefinition of primitive functions&lt;/strong&gt;.</source>
          <target state="translated">A quien llama a una funci&amp;oacute;n no le importa si la funci&amp;oacute;n es primitiva. Sin embargo, esto importa si intenta redefinir una primitiva con una funci&amp;oacute;n escrita en Lisp. La raz&amp;oacute;n es que la funci&amp;oacute;n primitiva se puede llamar directamente desde el c&amp;oacute;digo C. Las llamadas a la funci&amp;oacute;n redefinida desde Lisp usar&amp;aacute;n la nueva definici&amp;oacute;n, pero las llamadas desde el c&amp;oacute;digo C a&amp;uacute;n pueden usar la definici&amp;oacute;n incorporada. Por &lt;strong&gt;lo&lt;/strong&gt; tanto, &lt;strong&gt;desaconsejamos la redefinici&amp;oacute;n de funciones primitivas&lt;/strong&gt; .</target>
        </trans-unit>
        <trans-unit id="dc2cfa8003c37f1bb7b6976cb93df4aaf5e867c7" translate="yes" xml:space="preserve">
          <source>It does some basic parsing of the command-line arguments.</source>
          <target state="translated">Hace un análisis básico de los argumentos de la línea de mando.</target>
        </trans-unit>
        <trans-unit id="780d4f9cb3c97b4270953a6df1b1b787aacbefcb" translate="yes" xml:space="preserve">
          <source>It first deletes any child frame of &lt;var&gt;frame&lt;/var&gt; (see &lt;a href=&quot;child-frames#Child-Frames&quot;&gt;Child Frames&lt;/a&gt;) and any frame whose &lt;code&gt;delete-before&lt;/code&gt; frame parameter (see &lt;a href=&quot;frame-interaction-parameters#Frame-Interaction-Parameters&quot;&gt;Frame Interaction Parameters&lt;/a&gt;) specifies &lt;var&gt;frame&lt;/var&gt;. All such deletions are performed recursively; so this step makes sure that no other frames with &lt;var&gt;frame&lt;/var&gt; as their ancestor will exist. Then, unless &lt;var&gt;frame&lt;/var&gt; specifies a tooltip, this function runs the hook &lt;code&gt;delete-frame-functions&lt;/code&gt; (each function getting one argument, &lt;var&gt;frame&lt;/var&gt;) before actually killing the frame. After actually killing the frame and removing the frame from the frame list, &lt;code&gt;delete-frame&lt;/code&gt; runs &lt;code&gt;after-delete-frame-functions&lt;/code&gt;.</source>
          <target state="translated">Primero elimina cualquier fotograma hijo del &lt;var&gt;frame&lt;/var&gt; (consulte &lt;a href=&quot;child-frames#Child-Frames&quot;&gt;Fotogramas&lt;/a&gt; secundarios ) y cualquier fotograma cuyo par&amp;aacute;metro de fotograma &lt;code&gt;delete-before&lt;/code&gt; (consulte &lt;a href=&quot;frame-interaction-parameters#Frame-Interaction-Parameters&quot;&gt;Par&amp;aacute;metros de interacci&amp;oacute;n de fotogramas&lt;/a&gt; ) especifica el &lt;var&gt;frame&lt;/var&gt; . Todas estas eliminaciones se realizan de forma recursiva; por lo que este paso asegura que no exista ning&amp;uacute;n otro marco con &lt;var&gt;frame&lt;/var&gt; como su antepasado. Luego, a menos que el &lt;var&gt;frame&lt;/var&gt; especifique una informaci&amp;oacute;n sobre herramientas, esta funci&amp;oacute;n ejecuta el gancho &lt;code&gt;delete-frame-functions&lt;/code&gt; (cada funci&amp;oacute;n obtiene un argumento, &lt;var&gt;frame&lt;/var&gt; ) antes de matar el marco. Despu&amp;eacute;s de matar el marco y eliminarlo de la lista &lt;code&gt;delete-frame&lt;/code&gt; ejecuta delete-frame &lt;code&gt;after-delete-frame-functions&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="65b6824863bde18952e797a108d59972b5cd7ca4" translate="yes" xml:space="preserve">
          <source>It follows the cyclic ordering of windows. The optional arguments &lt;var&gt;minibuf&lt;/var&gt; and &lt;var&gt;all-frames&lt;/var&gt; specify the set of windows included; these have the same arguments as in &lt;code&gt;next-window&lt;/code&gt;. If &lt;var&gt;all-frames&lt;/var&gt; specifies a frame, the first window walked is the first window on that frame (the one returned by &lt;code&gt;frame-first-window&lt;/code&gt;), not necessarily the selected window.</source>
          <target state="translated">Sigue el orden c&amp;iacute;clico de las ventanas. Los argumentos opcionales &lt;var&gt;minibuf&lt;/var&gt; y &lt;var&gt;all-frames&lt;/var&gt; especifican el conjunto de ventanas incluidas; estos tienen los mismos argumentos que en la &lt;code&gt;next-window&lt;/code&gt; . Si &lt;var&gt;all-frames&lt;/var&gt; especifica un marco, la primera ventana recorrida es la primera ventana en ese marco (la que devuelve &lt;code&gt;frame-first-window&lt;/code&gt; ), no necesariamente la ventana seleccionada.</target>
        </trans-unit>
        <trans-unit id="d6d1323f650d9889c77490ede806efe0a1b71711" translate="yes" xml:space="preserve">
          <source>It initializes the initial frame&amp;rsquo;s faces, and sets up the menu bar and tool bar if needed. If graphical frames are supported, it sets up the tool bar even if the current frame is not a graphical one, since a graphical frame may be created later on.</source>
          <target state="translated">Inicializa las caras del marco inicial y configura la barra de men&amp;uacute; y la barra de herramientas si es necesario. Si se admiten marcos gr&amp;aacute;ficos, configura la barra de herramientas incluso si el marco actual no es gr&amp;aacute;fico, ya que se puede crear un marco gr&amp;aacute;fico m&amp;aacute;s adelante.</target>
        </trans-unit>
        <trans-unit id="4dd46431e678931fbcb6b6537b9da5f2a07769f6" translate="yes" xml:space="preserve">
          <source>It inserts frequency counts as comment lines after each line of code. You can undo all insertions with one &lt;code&gt;undo&lt;/code&gt; command. The counts appear under the &amp;lsquo;</source>
          <target state="translated">Inserta recuentos de frecuencia como l&amp;iacute;neas de comentarios despu&amp;eacute;s de cada l&amp;iacute;nea de c&amp;oacute;digo. Puede deshacer todas las inserciones con un comando de &lt;code&gt;undo&lt;/code&gt; . Los recuentos aparecen bajo el '</target>
        </trans-unit>
        <trans-unit id="3173cca5c8e25be905c421498d74ebe861b45fb4" translate="yes" xml:space="preserve">
          <source>It is a good idea for this function to run &lt;code&gt;temp-buffer-show-hook&lt;/code&gt; just as &lt;code&gt;with-output-to-temp-buffer&lt;/code&gt; normally would, inside of &lt;code&gt;save-selected-window&lt;/code&gt; and with the chosen window and buffer selected.</source>
          <target state="translated">Es una buena idea que esta funci&amp;oacute;n ejecute &lt;code&gt;temp-buffer-show-hook&lt;/code&gt; como lo har&amp;iacute;a normalmente &lt;code&gt;with-output-to-temp-buffer&lt;/code&gt; , dentro de &lt;code&gt;save-selected-window&lt;/code&gt; y con la ventana y el b&amp;uacute;fer seleccionados.</target>
        </trans-unit>
        <trans-unit id="12a15b18bad26a84d1b400ed140fae6294485d46" translate="yes" xml:space="preserve">
          <source>It is a good idea to provide documentation strings for all the functions in your program, even those that are called only from within your program. Documentation strings are like comments, except that they are easier to access.</source>
          <target state="translated">Es una buena idea proporcionar cadenas de documentación para todas las funciones de su programa,incluso las que se llaman sólo desde su programa.Las cadenas de documentación son como los comentarios,excepto que son más fáciles de acceder.</target>
        </trans-unit>
        <trans-unit id="f01ee6ca8bab6f5d9577b6a2063514f28c09839e" translate="yes" xml:space="preserve">
          <source>It is also legitimate for a major mode to rebind a standard key sequence whose standard meaning is rarely useful in that mode. For instance, minibuffer modes rebind</source>
          <target state="translated">También es legítimo que un modo principal vuelva a enlazar una secuencia clave estándar cuyo significado estándar rara vez es útil en ese modo.Por ejemplo,los modos de minibúfer rebinden</target>
        </trans-unit>
        <trans-unit id="2b57f5bccf3ef0816a9be0839152c423c58bb643" translate="yes" xml:space="preserve">
          <source>It is also possible to call &lt;code&gt;sit-for&lt;/code&gt; with three arguments, as &lt;code&gt;(sit-for &lt;var&gt;seconds&lt;/var&gt; &lt;var&gt;millisec&lt;/var&gt; &lt;var&gt;nodisp&lt;/var&gt;)&lt;/code&gt;, but that is considered obsolete.</source>
          <target state="translated">Tambi&amp;eacute;n es posible llamar &lt;code&gt;sit-for&lt;/code&gt; con tres argumentos, como &lt;code&gt;(sit-for &lt;var&gt;seconds&lt;/var&gt; &lt;var&gt;millisec&lt;/var&gt; &lt;var&gt;nodisp&lt;/var&gt;)&lt;/code&gt; , pero que se considera obsoleta.</target>
        </trans-unit>
        <trans-unit id="baad5ec4e1257ce583e2c8021e1913799f72c849" translate="yes" xml:space="preserve">
          <source>It is also possible to find out how many arguments an arbitrary function expects:</source>
          <target state="translated">También es posible averiguar cuántos argumentos espera una función arbitraria:</target>
        </trans-unit>
        <trans-unit id="a6c145fead22c2d038d5449b927625f21786cd2b" translate="yes" xml:space="preserve">
          <source>It is also possible to watch filesystems on remote machines, see &lt;a href=&quot;http://www.gnu.org/software/emacs/manual/html_node/emacs/Remote-Files.html#Remote-Files&quot;&gt;Remote Files&lt;/a&gt; in</source>
          <target state="translated">Tambi&amp;eacute;n es posible ver sistemas de archivos en m&amp;aacute;quinas remotas, consulte &lt;a href=&quot;http://www.gnu.org/software/emacs/manual/html_node/emacs/Remote-Files.html#Remote-Files&quot;&gt;Archivos remotos&lt;/a&gt; en</target>
        </trans-unit>
        <trans-unit id="3e621862bcf1c790b5d037616916bbe2c538d4f7" translate="yes" xml:space="preserve">
          <source>It is an error to call &lt;code&gt;condition-wait&lt;/code&gt; without holding the condition&amp;rsquo;s associated mutex.</source>
          <target state="translated">Es un error llamar a &lt;code&gt;condition-wait&lt;/code&gt; sin mantener el mutex asociado a la condici&amp;oacute;n.</target>
        </trans-unit>
        <trans-unit id="a7b086934bad52d2aec76907ca52328c3844b39e" translate="yes" xml:space="preserve">
          <source>It is an error to make a constant or a read-only variable buffer-local. See &lt;a href=&quot;constant-variables#Constant-Variables&quot;&gt;Constant Variables&lt;/a&gt;.</source>
          <target state="translated">Es un error hacer que una constante o una variable de solo lectura sea local al b&amp;uacute;fer. Consulte &lt;a href=&quot;constant-variables#Constant-Variables&quot;&gt;Variables constantes&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="72843249d94cfc895b70ea2d9791255b690c126e" translate="yes" xml:space="preserve">
          <source>It is assumed that when a caller of &lt;code&gt;display-buffer&lt;/code&gt; specifies a non-&lt;code&gt;nil&lt;/code&gt;&lt;code&gt;allow-no-window&lt;/code&gt; entry, it is also able to handle a &lt;code&gt;nil&lt;/code&gt; return value.</source>
          <target state="translated">Se asume que cuando un llamador de &lt;code&gt;display-buffer&lt;/code&gt; especifica una entrada que no es &lt;code&gt;nil&lt;/code&gt; no &lt;code&gt;allow-no-window&lt;/code&gt; , tambi&amp;eacute;n puede manejar un valor de retorno &lt;code&gt;nil&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="3f80f1cfd1cf04e4bc17393008731d354dfb2372" translate="yes" xml:space="preserve">
          <source>It is best to avoid mentioning specific bit numbers in your program. To test the modifier bits of a character, use the function &lt;code&gt;event-modifiers&lt;/code&gt; (see &lt;a href=&quot;classifying-events#Classifying-Events&quot;&gt;Classifying Events&lt;/a&gt;). When making key bindings, you can use the read syntax for characters with modifier bits (&amp;lsquo;</source>
          <target state="translated">Es mejor evitar mencionar n&amp;uacute;meros de bits espec&amp;iacute;ficos en su programa. Para probar los bits modificadores de un car&amp;aacute;cter, utilice la funci&amp;oacute;n &lt;code&gt;event-modifiers&lt;/code&gt; (consulte &lt;a href=&quot;classifying-events#Classifying-Events&quot;&gt;Clasificaci&amp;oacute;n de eventos&lt;/a&gt; ). Al realizar combinaciones de teclas, puede usar la sintaxis de lectura para caracteres con bits modificadores ('</target>
        </trans-unit>
        <trans-unit id="0d52a1fb8bf86f61e2abf981d0b44f7de8aa8b26" translate="yes" xml:space="preserve">
          <source>It is common for Lisp functions to accept functions as arguments or find them in data structures (especially in hook variables and property lists) and call them using &lt;code&gt;funcall&lt;/code&gt; or &lt;code&gt;apply&lt;/code&gt;. Functions that accept function arguments are often called &lt;em&gt;functionals&lt;/em&gt;.</source>
          <target state="translated">Es com&amp;uacute;n que las funciones Lisp acepten funciones como argumentos o las encuentren en estructuras de datos (especialmente en variables hook y listas de propiedades) y las llamen usando &lt;code&gt;funcall&lt;/code&gt; o &lt;code&gt;apply&lt;/code&gt; . Las funciones que aceptan argumentos de funci&amp;oacute;n a menudo se denominan &lt;em&gt;funcionales&lt;/em&gt; .</target>
        </trans-unit>
        <trans-unit id="3f754947b959e216056814f1e32b8d9283beb7a0" translate="yes" xml:space="preserve">
          <source>It is common to add code to one&amp;rsquo;s init file (see &lt;a href=&quot;init-file#Init-File&quot;&gt;Init File&lt;/a&gt;) to add one or more directories to &lt;code&gt;load-path&lt;/code&gt;. For example:</source>
          <target state="translated">Es com&amp;uacute;n agregar c&amp;oacute;digo al archivo de inicio de uno (ver &lt;a href=&quot;init-file#Init-File&quot;&gt;Archivo de inicio&lt;/a&gt; ) para agregar uno o m&amp;aacute;s directorios a &lt;code&gt;load-path&lt;/code&gt; . Por ejemplo:</target>
        </trans-unit>
        <trans-unit id="b83625c7041cfe9ad97f496a0522d9523b3b8dc4" translate="yes" xml:space="preserve">
          <source>It is common to write numbers, characters, strings, and even vectors in Lisp code, taking advantage of the fact that they self-evaluate. However, it is quite unusual to do this for types that lack a read syntax, because there&amp;rsquo;s no way to write them textually. It is possible to construct Lisp expressions containing these types by means of a Lisp program. Here is an example:</source>
          <target state="translated">Es com&amp;uacute;n escribir n&amp;uacute;meros, caracteres, cadenas e incluso vectores en c&amp;oacute;digo Lisp, aprovechando el hecho de que se autoeval&amp;uacute;an. Sin embargo, es bastante inusual hacer esto para tipos que carecen de sintaxis de lectura, porque no hay forma de escribirlos textualmente. Es posible construir expresiones Lisp que contengan estos tipos mediante un programa Lisp. Aqu&amp;iacute; hay un ejemplo:</target>
        </trans-unit>
        <trans-unit id="6c4f2df1721f4ac95ab46d4cfe55ed881a7d9df2" translate="yes" xml:space="preserve">
          <source>It is equally easy to insert a new element by changing &lt;small&gt;CDR&lt;/small&gt;s:</source>
          <target state="translated">Es igualmente f&amp;aacute;cil insertar un nuevo elemento cambiando los &lt;small&gt;CDR&lt;/small&gt; :</target>
        </trans-unit>
        <trans-unit id="66640a1037abec141a287214c7037d4b09466e4e" translate="yes" xml:space="preserve">
          <source>It is generally cleaner and more flexible to store a function in a data structure, and call it with &lt;code&gt;funcall&lt;/code&gt; or &lt;code&gt;apply&lt;/code&gt;, than to store an expression in the data structure and evaluate it. Using functions provides the ability to pass information to them as arguments.</source>
          <target state="translated">Por lo general, es m&amp;aacute;s limpio y flexible almacenar una funci&amp;oacute;n en una estructura de datos y llamarla con &lt;code&gt;funcall&lt;/code&gt; o &lt;code&gt;apply&lt;/code&gt; , que almacenar una expresi&amp;oacute;n en la estructura de datos y evaluarla. El uso de funciones proporciona la capacidad de pasarles informaci&amp;oacute;n como argumentos.</target>
        </trans-unit>
        <trans-unit id="7224f1903528385d0d899a0e49ee687a6aa9d558" translate="yes" xml:space="preserve">
          <source>It is generally impossible to read the same sequence twice, since sequences are always created anew upon reading. If you read the read syntax for a sequence twice, you get two sequences with equal contents. There is one exception: the empty list &lt;code&gt;()&lt;/code&gt; always stands for the same object, &lt;code&gt;nil&lt;/code&gt;.</source>
          <target state="translated">Generalmente es imposible leer la misma secuencia dos veces, ya que las secuencias siempre se crean de nuevo al leerlas. Si lee la sintaxis de lectura de una secuencia dos veces, obtiene dos secuencias con el mismo contenido. Hay una excepci&amp;oacute;n: la lista vac&amp;iacute;a &lt;code&gt;()&lt;/code&gt; siempre representa el mismo objeto, &lt;code&gt;nil&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="e2e4677a7491341a5525f2d613fb39d09d0efa30" translate="yes" xml:space="preserve">
          <source>It is implemented using the watchpoint mechanism, so it inherits the same characteristics and limitations: all aliases of &lt;var&gt;variable&lt;/var&gt; will be watched together, only dynamic variables can be watched, and changes to the objects referenced by variables are not detected. For details, see &lt;a href=&quot;watching-variables#Watching-Variables&quot;&gt;Watching Variables&lt;/a&gt;.</source>
          <target state="translated">Se implementa mediante el mecanismo de punto de observaci&amp;oacute;n, por lo que hereda las mismas caracter&amp;iacute;sticas y limitaciones: todos los alias de &lt;var&gt;variable&lt;/var&gt; se ver&amp;aacute;n juntos, solo se pueden ver las variables din&amp;aacute;micas y no se detectan los cambios en los objetos referenciados por las variables. Para obtener m&amp;aacute;s informaci&amp;oacute;n, consulte &lt;a href=&quot;watching-variables#Watching-Variables&quot;&gt;Observaci&amp;oacute;n de variables&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="8bb7af09e2683dd1d43399c262cc53e7f80c18fb" translate="yes" xml:space="preserve">
          <source>It is important to assure that point does not continuously jump around as a consequence of auto-reverting. Of course, moving point might be inevitable if the buffer radically changes.</source>
          <target state="translated">Es importante asegurar que el punto no salte continuamente como consecuencia de la auto-reversión.Por supuesto,el punto de movimiento podría ser inevitable si el amortiguador cambia radicalmente.</target>
        </trans-unit>
        <trans-unit id="3eede72b9dece35e34101793a2f333f89d89a4f4" translate="yes" xml:space="preserve">
          <source>It is invoked via a mouse command.</source>
          <target state="translated">Se invoca a través de un comando del ratón.</target>
        </trans-unit>
        <trans-unit id="b5639d37fabd83f8e595d9ba42541031771e2456" translate="yes" xml:space="preserve">
          <source>It is legitimate for a major mode to rebind a standard key sequence if it provides a command that does the same job in a way better suited to the text this mode is used for. For example, a major mode for editing a programming language might redefine</source>
          <target state="translated">Es legítimo que un modo principal vuelva a vincular una secuencia de teclas estándar si proporciona un comando que haga el mismo trabajo de una manera más adecuada al texto para el que se utiliza este modo.Por ejemplo,un modo principal para editar un lenguaje de programación podría redefinir</target>
        </trans-unit>
        <trans-unit id="eae810ab4df9e8a364d85ae8c7b547bd3e8d8937" translate="yes" xml:space="preserve">
          <source>It is normal practice to change the bindings in the global keymap, but you should not assign this variable any value other than the keymap it starts out with.</source>
          <target state="translated">Es una práctica normal cambiar los enlaces en el mapa global de claves,pero no se debe asignar a esta variable ningún valor que no sea el del mapa de claves con el que comienza.</target>
        </trans-unit>
        <trans-unit id="c7f2848da15c9bd47e2aa08dc291366d9534c8a8" translate="yes" xml:space="preserve">
          <source>It is not advisable to put anything in</source>
          <target state="translated">No es aconsejable poner nada en</target>
        </trans-unit>
        <trans-unit id="2bbf03bc73d7ef3e252d6245e26ed80331379d73" translate="yes" xml:space="preserve">
          <source>It is not crucial to exclude from the alist the keysyms of other X servers; those do no harm, as long as they don&amp;rsquo;t conflict with the ones used by the X server actually in use.</source>
          <target state="translated">No es crucial excluir de la lista las claves de otros servidores X; &amp;eacute;sas no hacen da&amp;ntilde;o, siempre y cuando no entren en conflicto con las utilizadas por el servidor X actualmente en uso.</target>
        </trans-unit>
        <trans-unit id="6c9d03ef366e0475e733b12fb4ac0e9991b62830" translate="yes" xml:space="preserve">
          <source>It is not sufficient to determine whether a given window shows the currently active minibuffer by comparing it with the result of &lt;code&gt;(minibuffer-window)&lt;/code&gt;, because there can be more than one minibuffer window if there is more than one frame.</source>
          <target state="translated">No es suficiente determinar si una ventana dada muestra el minib&amp;uacute;fer activo actualmente compar&amp;aacute;ndolo con el resultado de &lt;code&gt;(minibuffer-window)&lt;/code&gt; , porque puede haber m&amp;aacute;s de una ventana de minib&amp;uacute;fer si hay m&amp;aacute;s de un marco.</target>
        </trans-unit>
        <trans-unit id="0e93812a73d2bc561240927bd0add1fb2b57b9cb" translate="yes" xml:space="preserve">
          <source>It is often convenient to write a function that allows certain arguments to be omitted. For example, the function &lt;code&gt;substring&lt;/code&gt; accepts three arguments&amp;mdash;a string, the start index and the end index&amp;mdash;but the third argument defaults to the &lt;var&gt;length&lt;/var&gt; of the string if you omit it. It is also convenient for certain functions to accept an indefinite number of arguments, as the functions &lt;code&gt;list&lt;/code&gt; and &lt;code&gt;+&lt;/code&gt; do.</source>
          <target state="translated">A menudo es conveniente escribir una funci&amp;oacute;n que permita omitir ciertos argumentos. Por ejemplo, la funci&amp;oacute;n &lt;code&gt;substring&lt;/code&gt; acepta tres argumentos: una cadena, el &amp;iacute;ndice inicial y el &amp;iacute;ndice final, pero el tercer argumento toma la &lt;var&gt;length&lt;/var&gt; predeterminada de la cadena si lo omite. Tambi&amp;eacute;n es conveniente que ciertas funciones acepten un n&amp;uacute;mero indefinido de argumentos, como lo hacen las funciones &lt;code&gt;list&lt;/code&gt; a y &lt;code&gt;+&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="4d267166b6e7f4643511ccbc7ed7e8692e1af1ee" translate="yes" xml:space="preserve">
          <source>It is often useful to move point temporarily within a localized portion of the program. This is called an &lt;em&gt;excursion&lt;/em&gt;, and it is done with the &lt;code&gt;save-excursion&lt;/code&gt; special form. This construct remembers the initial identity of the current buffer, and its value of point, and restores them after the excursion completes. It is the standard way to move point within one part of a program and avoid affecting the rest of the program, and is used thousands of times in the Lisp sources of Emacs.</source>
          <target state="translated">A menudo es &amp;uacute;til mover un punto temporalmente dentro de una parte localizada del programa. Esto se denomina &lt;em&gt;excursi&amp;oacute;n&lt;/em&gt; y se realiza con el formulario especial &lt;code&gt;save-excursion&lt;/code&gt; . Esta construcci&amp;oacute;n recuerda la identidad inicial del b&amp;uacute;fer actual y su valor de punto, y los restaura despu&amp;eacute;s de que se completa la excursi&amp;oacute;n. Es la forma est&amp;aacute;ndar de mover un punto dentro de una parte de un programa y evitar afectar al resto del programa, y ​​se usa miles de veces en las fuentes Lisp de Emacs.</target>
        </trans-unit>
        <trans-unit id="4a9a518d3c351efa42f91492c1d3d264dda80369" translate="yes" xml:space="preserve">
          <source>It is ok for a mode to use &lt;code&gt;font-lock-face&lt;/code&gt; for some text and also use the normal Font Lock machinery. But if the mode does not use the normal Font Lock machinery, it should not set the variable &lt;code&gt;font-lock-defaults&lt;/code&gt;. In this case the &lt;code&gt;face&lt;/code&gt; property will not be overriden, so using the &lt;code&gt;face&lt;/code&gt; property could work too. However, using &lt;code&gt;font-lock-face&lt;/code&gt; is generally preferable as it allows the user to control the fontification by toggling &lt;code&gt;font-lock-mode&lt;/code&gt;, and lets the code work regardless of whether the mode uses Font Lock machinery or not.</source>
          <target state="translated">Est&amp;aacute; bien que un modo use &lt;code&gt;font-lock-face&lt;/code&gt; para alg&amp;uacute;n texto y tambi&amp;eacute;n use la maquinaria normal de Font Lock. Pero si el modo no usa la maquinaria normal de Font Lock, no deber&amp;iacute;a establecer la variable &lt;code&gt;font-lock-defaults&lt;/code&gt; . En este caso, la propiedad de la &lt;code&gt;face&lt;/code&gt; no se anular&amp;aacute;, por lo que el uso de la propiedad de la &lt;code&gt;face&lt;/code&gt; podr&amp;iacute;a funcionar. Sin embargo, generalmente es preferible usar &lt;code&gt;font-lock-face&lt;/code&gt; , ya que permite al usuario controlar la fontificaci&amp;oacute;n alternando &lt;code&gt;font-lock-mode&lt;/code&gt; , y permite que el c&amp;oacute;digo funcione independientemente de si el modo utiliza maquinaria Font Lock o no.</target>
        </trans-unit>
        <trans-unit id="c3d2ba074f26ffb62a211357cea324dbc4b2f4ea" translate="yes" xml:space="preserve">
          <source>It is possible to advise a primitive (see &lt;a href=&quot;what-is-a-function#What-Is-a-Function&quot;&gt;What Is a Function&lt;/a&gt;), but one should typically &lt;em&gt;not&lt;/em&gt; do so, for two reasons. Firstly, some primitives are used by the advice mechanism, and advising them could cause an infinite recursion. Secondly, many primitives are called directly from C, and such calls ignore advice; hence, one ends up in a confusing situation where some calls (occurring from Lisp code) obey the advice and other calls (from C code) do not.</source>
          <target state="translated">Es posible recomendar una primitiva (consulte &lt;a href=&quot;what-is-a-function#What-Is-a-Function&quot;&gt;&amp;iquest;Qu&amp;eacute; es una funci&amp;oacute;n?&lt;/a&gt; ), Pero normalmente &lt;em&gt;no&lt;/em&gt; se deber&amp;iacute;a hacerlo, por dos razones. En primer lugar, el mecanismo de aviso utiliza algunas primitivas, y avisarlas podr&amp;iacute;a provocar una recursividad infinita. En segundo lugar, muchas primitivas se llaman directamente desde C y estas llamadas ignoran los consejos; por lo tanto, uno termina en una situaci&amp;oacute;n confusa en la que algunas llamadas (que ocurren desde el c&amp;oacute;digo Lisp) obedecen al consejo y otras llamadas (desde el c&amp;oacute;digo C) no.</target>
        </trans-unit>
        <trans-unit id="158ec131ed80fbe1245b2dbcf3882b001d0a335c" translate="yes" xml:space="preserve">
          <source>It is possible to avoid implicit resizing of a specific window when there are one or more other resizable windows on the same frame. For this purpose, Emacs must be advised to &lt;em&gt;preserve&lt;/em&gt; the size of that window. There are two basic ways to do that.</source>
          <target state="translated">Es posible evitar el cambio de tama&amp;ntilde;o impl&amp;iacute;cito de una ventana espec&amp;iacute;fica cuando hay una o m&amp;aacute;s ventanas de tama&amp;ntilde;o variable en el mismo marco. Para este prop&amp;oacute;sito, se debe advertir a Emacs que &lt;em&gt;preserve&lt;/em&gt; el tama&amp;ntilde;o de esa ventana. Hay dos formas b&amp;aacute;sicas de hacerlo.</target>
        </trans-unit>
        <trans-unit id="5059d1ca2b3130d76d02552f9db1a53062d38b02" translate="yes" xml:space="preserve">
          <source>It is possible to read a special file (such as a FIFO or an I/O device) with &lt;code&gt;insert-file-contents&lt;/code&gt;, as long as &lt;var&gt;replace&lt;/var&gt; and &lt;var&gt;visit&lt;/var&gt; are &lt;code&gt;nil&lt;/code&gt;.</source>
          <target state="translated">Es posible leer un archivo especial (como un FIFO o un dispositivo de E / S) con &lt;code&gt;insert-file-contents&lt;/code&gt; , siempre que &lt;var&gt;replace&lt;/var&gt; y &lt;var&gt;visit&lt;/var&gt; ar sean &lt;code&gt;nil&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="206fcc689764ad9025a7ae9e9481deb9e1a87744" translate="yes" xml:space="preserve">
          <source>It is possible to use &lt;code&gt;char-after&lt;/code&gt; to examine characters at various buffer positions without moving point to those positions. Only an actual change in the value of point runs these hook functions.</source>
          <target state="translated">Es posible utilizar &lt;code&gt;char-after&lt;/code&gt; para examinar caracteres en varias posiciones del b&amp;uacute;fer sin mover el punto a esas posiciones. Solo un cambio real en el valor del punto ejecuta estas funciones de gancho.</target>
        </trans-unit>
        <trans-unit id="ea9002dbd9b169e39f06dc37297bb765ac7c9c2f" translate="yes" xml:space="preserve">
          <source>It is possible to use an anonymous Lisp macro just like an anonymous function, but this is never done, because it does not make sense to pass an anonymous macro to functionals such as &lt;code&gt;mapcar&lt;/code&gt;. In practice, all Lisp macros have names, and they are almost always defined with the &lt;code&gt;defmacro&lt;/code&gt; macro.</source>
          <target state="translated">Es posible usar una macro Lisp an&amp;oacute;nima como una funci&amp;oacute;n an&amp;oacute;nima, pero esto nunca se hace, porque no tiene sentido pasar una macro an&amp;oacute;nima a funcionalidades como &lt;code&gt;mapcar&lt;/code&gt; . En la pr&amp;aacute;ctica, todas las macros Lisp tienen nombres y casi siempre se definen con la macro &lt;code&gt;defmacro&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="91987bc01ce4e25960e8f7c77d19903b336be8fa" translate="yes" xml:space="preserve">
          <source>It is probably a good idea for the functions to do nothing if the character after &lt;var&gt;pos&lt;/var&gt; already has a non-&lt;code&gt;nil&lt;/code&gt;&lt;code&gt;fontified&lt;/code&gt; property, but this is not required. If one function overrides the assignments made by a previous one, the properties after the last function finishes are the ones that really matter.</source>
          <target state="translated">Probablemente sea una buena idea que las funciones no hagan nada si el car&amp;aacute;cter despu&amp;eacute;s de &lt;var&gt;pos&lt;/var&gt; ya tiene una propiedad &lt;code&gt;fontified&lt;/code&gt; no &lt;code&gt;nil&lt;/code&gt; , pero esto no es necesario. Si una funci&amp;oacute;n anula las asignaciones realizadas por una anterior, las propiedades despu&amp;eacute;s de que finaliza la &amp;uacute;ltima funci&amp;oacute;n son las que realmente importan.</target>
        </trans-unit>
        <trans-unit id="8c50e007c4847dde92fe8e165d1a24f7fbca3071" translate="yes" xml:space="preserve">
          <source>It is quite common to use some storage for a while, then release it by (for example) killing a buffer or deleting the last pointer to an object. Emacs provides a &lt;em&gt;garbage collector&lt;/em&gt; to reclaim this abandoned storage. The garbage collector operates by finding and marking all Lisp objects that are still accessible to Lisp programs. To begin with, it assumes all the symbols, their values and associated function definitions, and any data presently on the stack, are accessible. Any objects that can be reached indirectly through other accessible objects are also accessible.</source>
          <target state="translated">Es bastante com&amp;uacute;n usar algo de almacenamiento durante un tiempo y luego liberarlo (por ejemplo) eliminando un b&amp;uacute;fer o eliminando el &amp;uacute;ltimo puntero a un objeto. Emacs proporciona un &lt;em&gt;recolector de basura&lt;/em&gt; para recuperar este almacenamiento abandonado. El recolector de basura opera encontrando y marcando todos los objetos Lisp que a&amp;uacute;n son accesibles para los programas Lisp. Para empezar, asume que todos los s&amp;iacute;mbolos, sus valores y definiciones de funciones asociadas, y cualquier dato que se encuentre actualmente en la pila, son accesibles. Tambi&amp;eacute;n son accesibles todos los objetos a los que se pueda llegar indirectamente a trav&amp;eacute;s de otros objetos accesibles.</target>
        </trans-unit>
        <trans-unit id="9f81f2fefce2410ae1512655349098e0d74c8ad5" translate="yes" xml:space="preserve">
          <source>It is risky to change this variable&amp;rsquo;s value without doing various other things. Normally it is better to use &lt;code&gt;set-visited-file-name&lt;/code&gt; (see below); some of the things done there, such as changing the buffer name, are not strictly necessary, but others are essential to avoid confusing Emacs.</source>
          <target state="translated">Es arriesgado cambiar el valor de esta variable sin hacer otras cosas. Normalmente es mejor usar &lt;code&gt;set-visited-file-name&lt;/code&gt; (ver m&amp;aacute;s abajo); Algunas de las cosas que se hacen all&amp;iacute;, como cambiar el nombre del b&amp;uacute;fer, no son estrictamente necesarias, pero otras son esenciales para evitar confundir a Emacs.</target>
        </trans-unit>
        <trans-unit id="81c490de37e7452de0a620a005a47606bd70b349" translate="yes" xml:space="preserve">
          <source>It is sometimes useful to make two variables synonyms, so that both variables always have the same value, and changing either one also changes the other. Whenever you change the name of a variable&amp;mdash;either because you realize its old name was not well chosen, or because its meaning has partly changed&amp;mdash;it can be useful to keep the old name as an &lt;em&gt;alias&lt;/em&gt; of the new one for compatibility. You can do this with &lt;code&gt;defvaralias&lt;/code&gt;.</source>
          <target state="translated">A veces es &amp;uacute;til hacer sin&amp;oacute;nimos de dos variables, de modo que ambas variables siempre tengan el mismo valor y cambiar una de ellas tambi&amp;eacute;n cambie la otra. Siempre que cambie el nombre de una variable, ya sea porque se da cuenta de que su nombre anterior no fue bien elegido o porque su significado ha cambiado parcialmente, puede ser &amp;uacute;til mantener el nombre anterior como un &lt;em&gt;alias&lt;/em&gt; del nuevo por compatibilidad. Puedes hacer esto con &lt;code&gt;defvaralias&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="a2a84b8c48d3b060fcc06470427ce26c8399bf6f" translate="yes" xml:space="preserve">
          <source>It is sometimes useful to take some action when a variable changes its value. The &lt;em&gt;variable watchpoint&lt;/em&gt; facility provides the means to do so. Some possible uses for this feature include keeping display in sync with variable settings, and invoking the debugger to track down unexpected changes to variables (see &lt;a href=&quot;variable-debugging#Variable-Debugging&quot;&gt;Variable Debugging&lt;/a&gt;).</source>
          <target state="translated">A veces es &amp;uacute;til realizar alguna acci&amp;oacute;n cuando una variable cambia su valor. La funci&amp;oacute;n de &lt;em&gt;punto de observaci&amp;oacute;n variable&lt;/em&gt; proporciona los medios para hacerlo. Algunos usos posibles de esta funci&amp;oacute;n incluyen mantener la visualizaci&amp;oacute;n sincronizada con la configuraci&amp;oacute;n de las variables e invocar al depurador para rastrear cambios inesperados en las variables (consulte &lt;a href=&quot;variable-debugging#Variable-Debugging&quot;&gt;Depuraci&amp;oacute;n de variables&lt;/a&gt; ).</target>
        </trans-unit>
        <trans-unit id="3f4f9ca54d322d9dfa0b17bef44fd7e71b5662a0" translate="yes" xml:space="preserve">
          <source>It is useful to specify the &lt;code&gt;:require&lt;/code&gt; keyword for an option that turns on a certain feature. This causes Emacs to load the feature, if it is not already loaded, whenever the option is set. See &lt;a href=&quot;common-keywords#Common-Keywords&quot;&gt;Common Keywords&lt;/a&gt;. Here is an example:</source>
          <target state="translated">Es &amp;uacute;til especificar la palabra clave &lt;code&gt;:require&lt;/code&gt; para una opci&amp;oacute;n que activa una funci&amp;oacute;n determinada. Esto hace que Emacs cargue la caracter&amp;iacute;stica, si a&amp;uacute;n no est&amp;aacute; cargada, siempre que se establezca la opci&amp;oacute;n. Consulte &lt;a href=&quot;common-keywords#Common-Keywords&quot;&gt;Palabras clave comunes&lt;/a&gt; . Aqu&amp;iacute; hay un ejemplo:</target>
        </trans-unit>
        <trans-unit id="1084186213269f2884b66a5901a0fe109856708d" translate="yes" xml:space="preserve">
          <source>It is usually a bad idea for timer functions to alter buffer contents. When they do, they usually should call &lt;code&gt;undo-boundary&lt;/code&gt; both before and after changing the buffer, to separate the timer&amp;rsquo;s changes from user commands&amp;rsquo; changes and prevent a single undo entry from growing to be quite large.</source>
          <target state="translated">Por lo general, es una mala idea que las funciones del temporizador alteren el contenido del b&amp;uacute;fer. Cuando lo hacen, por lo general deber&amp;iacute;an llamar a &lt;code&gt;undo-boundary&lt;/code&gt; antes y despu&amp;eacute;s de cambiar el b&amp;uacute;fer, para separar los cambios del temporizador de los cambios de los comandos del usuario y evitar que una sola entrada de deshacer crezca hasta ser bastante grande.</target>
        </trans-unit>
        <trans-unit id="51bfeb221e33f8fd00e57f4226da961d1d317a23" translate="yes" xml:space="preserve">
          <source>It is usually a bad idea to have more than one process associated with the same buffer.</source>
          <target state="translated">Normalmente es una mala idea tener más de un proceso asociado a la misma memoria intermedia.</target>
        </trans-unit>
        <trans-unit id="341cb9738d8f2bcab2233c96dc993a86f9598f86" translate="yes" xml:space="preserve">
          <source>It is very common to read a Lisp form and then evaluate the form, but reading and evaluation are separate activities, and either can be performed alone. Reading per se does not evaluate anything; it converts the printed representation of a Lisp object to the object itself. It is up to the caller of &lt;code&gt;read&lt;/code&gt; to specify whether this object is a form to be evaluated, or serves some entirely different purpose. See &lt;a href=&quot;input-functions#Input-Functions&quot;&gt;Input Functions&lt;/a&gt;.</source>
          <target state="translated">Es muy com&amp;uacute;n leer un formulario Lisp y luego evaluar el formulario, pero la lectura y la evaluaci&amp;oacute;n son actividades separadas y ambas se pueden realizar por separado. La lectura per se no eval&amp;uacute;a nada; convierte la representaci&amp;oacute;n impresa de un objeto Lisp en el objeto mismo. Depende de quien llama a &lt;code&gt;read&lt;/code&gt; especificar si este objeto es un formulario a evaluar o si tiene un prop&amp;oacute;sito completamente diferente. Consulte &lt;a href=&quot;input-functions#Input-Functions&quot;&gt;Funciones de entrada&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="545d22f4c3da6e907a054b17ba6817a718596224" translate="yes" xml:space="preserve">
          <source>It is very unusual to change the global keymap.</source>
          <target state="translated">Es muy inusual cambiar el mapa global de claves.</target>
        </trans-unit>
        <trans-unit id="96139028099a0bfa0975054c4ed4730a63010934" translate="yes" xml:space="preserve">
          <source>It loads any</source>
          <target state="translated">Carga cualquier</target>
        </trans-unit>
        <trans-unit id="ce4af309e8e71369b6c603cca0cfd8e3be09a193" translate="yes" xml:space="preserve">
          <source>It loads the library</source>
          <target state="translated">Carga la biblioteca</target>
        </trans-unit>
        <trans-unit id="f58887fd3294e17aa3e3e1af45b67849abc46e36" translate="yes" xml:space="preserve">
          <source>It loads your abbrevs from the file specified by &lt;code&gt;abbrev-file-name&lt;/code&gt;, if that file exists and can be read (see &lt;a href=&quot;abbrev-files#Abbrev-Files&quot;&gt;abbrev-file-name&lt;/a&gt;). This is not done if the option &amp;lsquo;</source>
          <target state="translated">Carga sus abreviaturas del archivo especificado por &lt;code&gt;abbrev-file-name&lt;/code&gt; , si ese archivo existe y se puede leer (vea &lt;a href=&quot;abbrev-files#Abbrev-Files&quot;&gt;abbrev-file-name&lt;/a&gt; ). Esto no se hace si la opci&amp;oacute;n '</target>
        </trans-unit>
        <trans-unit id="dea39a1a58b57ed5c242a688a8b16e364190e632" translate="yes" xml:space="preserve">
          <source>It loads your early init file (see &lt;a href=&quot;http://www.gnu.org/software/emacs/manual/html_node/emacs/Early-Init-File.html#Early-Init-File&quot;&gt;Early Init File&lt;/a&gt; in</source>
          <target state="translated">Carga su archivo inicial inicial (consulte &lt;a href=&quot;http://www.gnu.org/software/emacs/manual/html_node/emacs/Early-Init-File.html#Early-Init-File&quot;&gt;Archivo&lt;/a&gt; inicial inicial en</target>
        </trans-unit>
        <trans-unit id="a9b670a2bbddceb4c5ab7bd11a55ab2796be2d98" translate="yes" xml:space="preserve">
          <source>It loads your init file (see &lt;a href=&quot;init-file#Init-File&quot;&gt;Init File&lt;/a&gt;). This is not done if the options &amp;lsquo;</source>
          <target state="translated">Carga su archivo de inicio (ver &lt;a href=&quot;init-file#Init-File&quot;&gt;Archivo de inicio&lt;/a&gt; ). Esto no se hace si las opciones '</target>
        </trans-unit>
        <trans-unit id="26dc9b8940f0ed8395f81364b4d2c60b19096a69" translate="yes" xml:space="preserve">
          <source>It makes a difference whether the user&amp;rsquo;s variable is named &lt;code&gt;a&lt;/code&gt; or &lt;code&gt;x&lt;/code&gt;, because &lt;code&gt;a&lt;/code&gt; conflicts with the macro argument variable &lt;code&gt;a&lt;/code&gt;.</source>
          <target state="translated">Hace una diferencia si la variable del usuario se llama &lt;code&gt;a&lt;/code&gt; o &lt;code&gt;x&lt;/code&gt; , porque &lt;code&gt;a&lt;/code&gt; entra en conflicto con la variable de argumento macro &lt;code&gt;a&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="3f588db542d569932c817bd6b5fdaa9a4f1bd05c" translate="yes" xml:space="preserve">
          <source>It may be a Lisp expression that is not a string; then it should be a form that is evaluated to get a list of arguments to pass to the command. Usually this form will call various functions to read input from the user, most often through the minibuffer (see &lt;a href=&quot;minibuffers#Minibuffers&quot;&gt;Minibuffers&lt;/a&gt;) or directly from the keyboard (see &lt;a href=&quot;reading-input#Reading-Input&quot;&gt;Reading Input&lt;/a&gt;).</source>
          <target state="translated">Puede ser una expresi&amp;oacute;n Lisp que no sea una cadena; entonces deber&amp;iacute;a ser un formulario que se eval&amp;uacute;e para obtener una lista de argumentos para pasar al comando. Por lo general, este formulario llamar&amp;aacute; a varias funciones para leer la entrada del usuario, la mayor&amp;iacute;a de las veces a trav&amp;eacute;s del minib&amp;uacute;fer (ver &lt;a href=&quot;minibuffers#Minibuffers&quot;&gt;Minib&amp;uacute;feres&lt;/a&gt; ) o directamente desde el teclado (ver &lt;a href=&quot;reading-input#Reading-Input&quot;&gt;Entrada de lectura&lt;/a&gt; ).</target>
        </trans-unit>
        <trans-unit id="e657a7f0ef3da4440c9a172406d4c83cc7a6c0ec" translate="yes" xml:space="preserve">
          <source>It may be a string; its contents are a sequence of elements separated by newlines, one for each argument&lt;a href=&quot;#FOOT12&quot; name=&quot;DOCF12&quot;&gt;&lt;sup&gt;12&lt;/sup&gt;&lt;/a&gt;. Each element consists of a code character (see &lt;a href=&quot;interactive-codes#Interactive-Codes&quot;&gt;Interactive Codes&lt;/a&gt;) optionally followed by a prompt (which some code characters use and some ignore). Here is an example:</source>
          <target state="translated">Puede ser una cuerda; su contenido es una secuencia de elementos separados por nuevas l&amp;iacute;neas, una para cada argumento &lt;a href=&quot;#FOOT12&quot; name=&quot;DOCF12&quot;&gt;&lt;sup&gt;12&lt;/sup&gt;&lt;/a&gt; . Cada elemento consta de un car&amp;aacute;cter de c&amp;oacute;digo (consulte &lt;a href=&quot;interactive-codes#Interactive-Codes&quot;&gt;C&amp;oacute;digos interactivos&lt;/a&gt; ) seguido opcionalmente de un mensaje (que algunos caracteres de c&amp;oacute;digo utilizan y otros ignoran). Aqu&amp;iacute; hay un ejemplo:</target>
        </trans-unit>
        <trans-unit id="270207470e73c1b4f20ceeca5a4e07a1e861134d" translate="yes" xml:space="preserve">
          <source>It may be easier to understand Edebug specifications by studying the examples provided here.</source>
          <target state="translated">Puede ser más fácil entender las especificaciones de Edebug estudiando los ejemplos proporcionados aquí.</target>
        </trans-unit>
        <trans-unit id="29ae132e6f7b39d1f5c10685d3a9d808a04b0a94" translate="yes" xml:space="preserve">
          <source>It may be omitted or &lt;code&gt;nil&lt;/code&gt;; then the command is called with no arguments. This leads quickly to an error if the command requires one or more arguments.</source>
          <target state="translated">Puede omitirse o ser &lt;code&gt;nil&lt;/code&gt; ; entonces se llama al comando sin argumentos. Esto conduce r&amp;aacute;pidamente a un error si el comando requiere uno o m&amp;aacute;s argumentos.</target>
        </trans-unit>
        <trans-unit id="a7ae8f4f5163ffdad3ac600dbfe8890ee50679f5" translate="yes" xml:space="preserve">
          <source>It might be illustrative to look at the list of action functions &lt;code&gt;display-buffer&lt;/code&gt; would have tried to display</source>
          <target state="translated">Podr&amp;iacute;a ser ilustrativo mirar la lista de funciones de acci&amp;oacute;n que &lt;code&gt;display-buffer&lt;/code&gt; habr&amp;iacute;a intentado mostrar</target>
        </trans-unit>
        <trans-unit id="f613bf2f4a5a85329f026a11071df7c6baaf0a91" translate="yes" xml:space="preserve">
          <source>It now exits if the option &lt;code&gt;--batch&lt;/code&gt; was specified.</source>
          <target state="translated">Ahora sale si se especific&amp;oacute; la opci&amp;oacute;n &lt;code&gt;--batch&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="b223a189ae751119c33b80a020770286ea64a0a6" translate="yes" xml:space="preserve">
          <source>It processes any command-line options that were not handled earlier.</source>
          <target state="translated">Procesa cualquier opción de la línea de mando que no se haya manejado antes.</target>
        </trans-unit>
        <trans-unit id="f719eab01b127d2177bbaf5f862883e5485e8eae" translate="yes" xml:space="preserve">
          <source>It returns &lt;code&gt;nil&lt;/code&gt; if the frame is known not to be focused, &lt;code&gt;t&lt;/code&gt; if the frame is known to be focused, or &lt;code&gt;unknown&lt;/code&gt; if Emacs does not know the focus state of the frame. (You may see this last state in TTY frames running on terminals that do not support explicit focus notifications.)</source>
          <target state="translated">Devuelve &lt;code&gt;nil&lt;/code&gt; si se sabe que el marco no est&amp;aacute; enfocado, &lt;code&gt;t&lt;/code&gt; si se sabe que el marco est&amp;aacute; enfocado, o &lt;code&gt;unknown&lt;/code&gt; si Emacs no conoce el estado de enfoque del marco. (Puede ver este &amp;uacute;ltimo estado en las tramas TTY que se ejecutan en terminales que no admiten notificaciones de enfoque expl&amp;iacute;cito).</target>
        </trans-unit>
        <trans-unit id="f6127be12a81ec3143b75ff723db16b07ec57fc0" translate="yes" xml:space="preserve">
          <source>It returns a list &lt;code&gt;(&lt;var&gt;id&lt;/var&gt; &lt;var&gt;cols&lt;/var&gt;)&lt;/code&gt;, where &lt;var&gt;id&lt;/var&gt; is the ID of the deleted entry and &lt;var&gt;cols&lt;/var&gt; is a vector of its column descriptors. It moves point to the beginning of the current line. It returns &lt;code&gt;nil&lt;/code&gt; if there is no entry at point.</source>
          <target state="translated">Devuelve una lista &lt;code&gt;(&lt;var&gt;id&lt;/var&gt; &lt;var&gt;cols&lt;/var&gt;)&lt;/code&gt; , donde &lt;var&gt;id&lt;/var&gt; es el ID de la entrada eliminada y &lt;var&gt;cols&lt;/var&gt; es un vector de sus descriptores de columna. Mueve el punto al comienzo de la l&amp;iacute;nea actual. Devuelve &lt;code&gt;nil&lt;/code&gt; si no hay ninguna entrada en el punto.</target>
        </trans-unit>
        <trans-unit id="13687604dddd27521e079b6548d3c35983b18d78" translate="yes" xml:space="preserve">
          <source>It runs &lt;code&gt;emacs-startup-hook&lt;/code&gt;.</source>
          <target state="translated">Ejecuta &lt;code&gt;emacs-startup-hook&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="57d130dea79514478748a7450914f1fdf423cfbf" translate="yes" xml:space="preserve">
          <source>It runs &lt;code&gt;window-setup-hook&lt;/code&gt;. The only difference between this hook and &lt;code&gt;emacs-startup-hook&lt;/code&gt; is that this one runs after the previously mentioned modifications to the frame parameters.</source>
          <target state="translated">Ejecuta &lt;code&gt;window-setup-hook&lt;/code&gt; . La &amp;uacute;nica diferencia entre este gancho y &lt;code&gt;emacs-startup-hook&lt;/code&gt; es que este se ejecuta despu&amp;eacute;s de las modificaciones mencionadas anteriormente a los par&amp;aacute;metros del marco.</target>
        </trans-unit>
        <trans-unit id="b4284000b9f4273ed298f7b9c6acbae8ad8a70fd" translate="yes" xml:space="preserve">
          <source>It runs the normal hook &lt;code&gt;after-init-hook&lt;/code&gt;.</source>
          <target state="translated">Ejecuta el gancho normal &lt;code&gt;after-init-hook&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="65ed86a0349bcbc41775fe86552a371004ac385f" translate="yes" xml:space="preserve">
          <source>It runs the normal hook &lt;code&gt;before-init-hook&lt;/code&gt;.</source>
          <target state="translated">Ejecuta el gancho normal &lt;code&gt;before-init-hook&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="a06c9ffa5dcf00d29d69c9797dd7e0da6832d589" translate="yes" xml:space="preserve">
          <source>It sets the language environment and the terminal coding system, if requested by environment variables such as &lt;code&gt;LANG&lt;/code&gt;.</source>
          <target state="translated">Establece el entorno del idioma y el sistema de codificaci&amp;oacute;n de la terminal, si lo solicitan variables de entorno como &lt;code&gt;LANG&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="4923a2b121bc6bb59693b11c6a7750a08e3930eb" translate="yes" xml:space="preserve">
          <source>It sets the variable &lt;code&gt;after-init-time&lt;/code&gt; to the value of &lt;code&gt;current-time&lt;/code&gt;. This variable was set to &lt;code&gt;nil&lt;/code&gt; earlier; setting it to the current time signals that the initialization phase is over, and, together with &lt;code&gt;before-init-time&lt;/code&gt;, provides the measurement of how long it took.</source>
          <target state="translated">Establece la variable &lt;code&gt;after-init-time&lt;/code&gt; en el valor de &lt;code&gt;current-time&lt;/code&gt; . Esta variable se estableci&amp;oacute; anteriormente en &lt;code&gt;nil&lt;/code&gt; ; establecerlo en la hora actual indica que la fase de inicializaci&amp;oacute;n ha terminado y, junto con el tiempo &lt;code&gt;before-init-time&lt;/code&gt; , proporciona la medida de cu&amp;aacute;nto tiempo tom&amp;oacute;.</target>
        </trans-unit>
        <trans-unit id="5daee93c148acf992b6fea81eb74da11887f6178" translate="yes" xml:space="preserve">
          <source>It sets the variable &lt;code&gt;before-init-time&lt;/code&gt; to the value of &lt;code&gt;current-time&lt;/code&gt; (see &lt;a href=&quot;time-of-day#Time-of-Day&quot;&gt;Time of Day&lt;/a&gt;). It also sets &lt;code&gt;after-init-time&lt;/code&gt; to &lt;code&gt;nil&lt;/code&gt;, which signals to Lisp programs that Emacs is being initialized.</source>
          <target state="translated">Establece la variable &lt;code&gt;before-init-time&lt;/code&gt; en el valor de &lt;code&gt;current-time&lt;/code&gt; (ver &lt;a href=&quot;time-of-day#Time-of-Day&quot;&gt;Hora del d&amp;iacute;a&lt;/a&gt; ). Tambi&amp;eacute;n establece &lt;code&gt;after-init-time&lt;/code&gt; en &lt;code&gt;nil&lt;/code&gt; , lo que indica a los programas Lisp que Emacs se est&amp;aacute; inicializando.</target>
        </trans-unit>
        <trans-unit id="5e3e48641edd97a87cf2a4c0fb33b8851ec59b76" translate="yes" xml:space="preserve">
          <source>It should return either a number, which is the number of columns of indentation for that line, or a list whose car is such a number. The difference between returning a number and returning a list is that a number says that all following lines at the same nesting level should be indented just like this one; a list says that following lines might call for different indentations. This makes a difference when the indentation is being computed by</source>
          <target state="translated">Debe devolver un número,que es el número de columnas de sangría para esa línea,o una lista cuyo coche es tal número.La diferencia entre devolver un número y devolver una lista es que un número dice que todas las líneas siguientes en el mismo nivel de anidación deberían estar sangradas igual que ésta;una lista dice que las líneas siguientes podrían requerir diferentes sangrados.Esto hace una diferencia cuando la sangría se calcula por</target>
        </trans-unit>
        <trans-unit id="99280a67fd3ac6e66ec565182a43a4b5d4ec95df" translate="yes" xml:space="preserve">
          <source>It specifies the numbers of pixels to be left free on the left, above, the right, and below a frame that shall be fit. The default specifies &lt;code&gt;nil&lt;/code&gt; for each which means to use no margins. The value specified here can be overridden for a specific frame by that frame&amp;rsquo;s &lt;code&gt;fit-frame-to-buffer-margins&lt;/code&gt; parameter, if present.</source>
          <target state="translated">Especifica el n&amp;uacute;mero de p&amp;iacute;xeles que se dejar&amp;aacute;n libres a la izquierda, arriba, derecha y debajo de un marco que se ajustar&amp;aacute;. El valor predeterminado especifica &lt;code&gt;nil&lt;/code&gt; para cada uno, lo que significa que no se deben utilizar m&amp;aacute;rgenes. El valor especificado aqu&amp;iacute; se puede anular para un marco espec&amp;iacute;fico mediante el par&amp;aacute;metro &lt;code&gt;fit-frame-to-buffer-margins&lt;/code&gt; de ese marco , si est&amp;aacute; presente.</target>
        </trans-unit>
        <trans-unit id="28ce94806e6158d5cc7c2d469c858c1b7c53e2dd" translate="yes" xml:space="preserve">
          <source>It takes a candidate for the fill prefix from the first line&amp;mdash;it tries first the function in &lt;code&gt;adaptive-fill-function&lt;/code&gt; (if any), then the regular expression &lt;code&gt;adaptive-fill-regexp&lt;/code&gt; (see below). The first non-&lt;code&gt;nil&lt;/code&gt; result of these, or the empty string if they&amp;rsquo;re both &lt;code&gt;nil&lt;/code&gt;, becomes the first line&amp;rsquo;s candidate.</source>
          <target state="translated">Toma un candidato para el prefijo de relleno de la primera l&amp;iacute;nea; primero prueba la funci&amp;oacute;n en &lt;code&gt;adaptive-fill-function&lt;/code&gt; (si existe), luego la expresi&amp;oacute;n regular &lt;code&gt;adaptive-fill-regexp&lt;/code&gt; (ver m&amp;aacute;s abajo). El primer resultado no &lt;code&gt;nil&lt;/code&gt; de estos, o la cadena vac&amp;iacute;a si ambos son &lt;code&gt;nil&lt;/code&gt; , se convierte en el candidato de la primera l&amp;iacute;nea.</target>
        </trans-unit>
        <trans-unit id="f89e2f8e456314ee623854cef9dd8ebd8d7735d3" translate="yes" xml:space="preserve">
          <source>It use &lt;code&gt;custom-reevaluate-setting&lt;/code&gt; to re-initialize the members of the list &lt;code&gt;custom-delayed-init-variables&lt;/code&gt;. These are any pre-loaded user options whose default value depends on the run-time, rather than build-time, context. See &lt;a href=&quot;building-emacs#Building-Emacs&quot;&gt;custom-initialize-delay&lt;/a&gt;.</source>
          <target state="translated">Utiliza &lt;code&gt;custom-reevaluate-setting&lt;/code&gt; para reinicializar los miembros de la lista &lt;code&gt;custom-delayed-init-variables&lt;/code&gt; . Estas son las opciones de usuario precargadas cuyo valor predeterminado depende del contexto de tiempo de ejecuci&amp;oacute;n, en lugar de tiempo de compilaci&amp;oacute;n. Consulte &lt;a href=&quot;building-emacs#Building-Emacs&quot;&gt;retardo de inicializaci&amp;oacute;n personalizado&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="44cd2108881f01dd8c596bbd91d07233b73cb9b2" translate="yes" xml:space="preserve">
          <source>It works to put a &lt;code&gt;lambda&lt;/code&gt;-expression function on a hook, but we recommend avoiding this because it can lead to confusion. If you add the same &lt;code&gt;lambda&lt;/code&gt;-expression a second time but write it slightly differently, you will get two equivalent but distinct functions on the hook. If you then remove one of them, the other will still be on it.</source>
          <target state="translated">Funciona para poner una funci&amp;oacute;n de expresi&amp;oacute;n &lt;code&gt;lambda&lt;/code&gt; en un gancho, pero recomendamos evitar esto porque puede generar confusi&amp;oacute;n. Si agrega la misma expresi&amp;oacute;n &lt;code&gt;lambda&lt;/code&gt; por segunda vez pero la escribe de manera ligeramente diferente, obtendr&amp;aacute; dos funciones equivalentes pero distintas en el gancho. Si luego quita uno de ellos, el otro seguir&amp;aacute; en &amp;eacute;l.</target>
        </trans-unit>
        <trans-unit id="80fdf17dcc7b4f396ac917a2a9e0157cd87886a5" translate="yes" xml:space="preserve">
          <source>It you wish to use &lt;code&gt;fset&lt;/code&gt; to make an alternate name for a function, consider using &lt;code&gt;defalias&lt;/code&gt; instead. See &lt;a href=&quot;defining-functions#Definition-of-defalias&quot;&gt;Definition of defalias&lt;/a&gt;.</source>
          <target state="translated">Si desea usar &lt;code&gt;fset&lt;/code&gt; para crear un nombre alternativo para una funci&amp;oacute;n, considere usar &lt;code&gt;defalias&lt;/code&gt; en su lugar. Ver &lt;a href=&quot;defining-functions#Definition-of-defalias&quot;&gt;Definici&amp;oacute;n de defalias&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="12c3787085fed9c7ac2a19edc5f190b93b7fcd00" translate="yes" xml:space="preserve">
          <source>It&amp;rsquo;s important to note that generator function bodies only execute inside calls to &lt;code&gt;iter-next&lt;/code&gt;. A call to a function defined with &lt;code&gt;iter-defun&lt;/code&gt; produces an iterator; you must drive this iterator with &lt;code&gt;iter-next&lt;/code&gt; for anything interesting to happen. Each call to a generator function produces a &lt;em&gt;different&lt;/em&gt; iterator, each with its own state.</source>
          <target state="translated">Es importante tener en cuenta que los cuerpos de funci&amp;oacute;n del generador solo se ejecutan dentro de las llamadas a &lt;code&gt;iter-next&lt;/code&gt; . Una llamada a una funci&amp;oacute;n definida con &lt;code&gt;iter-defun&lt;/code&gt; produce un iterador; debe conducir este iterador con &lt;code&gt;iter-next&lt;/code&gt; para que suceda algo interesante. Cada llamada a una funci&amp;oacute;n generadora produce un iterador &lt;em&gt;diferente&lt;/em&gt; , cada uno con su propio estado.</target>
        </trans-unit>
        <trans-unit id="729165fc7a05eb589cbb1af78d5106f307b47f0e" translate="yes" xml:space="preserve">
          <source>It&amp;rsquo;s often best to use a button-down event to trigger the menu. Then the user can select a menu item by releasing the button.</source>
          <target state="translated">A menudo, es mejor usar un evento de bot&amp;oacute;n para activar el men&amp;uacute;. Luego, el usuario puede seleccionar un elemento del men&amp;uacute; soltando el bot&amp;oacute;n.</target>
        </trans-unit>
        <trans-unit id="0c08d58a77f22a792633779a50d013f737ce9483" translate="yes" xml:space="preserve">
          <source>It&amp;rsquo;s possible to use &lt;code&gt;defmacro&lt;/code&gt; to define a macro to expand into the same code that an inline function would execute (see &lt;a href=&quot;macros#Macros&quot;&gt;Macros&lt;/a&gt;). But the macro would be limited to direct use in expressions&amp;mdash;a macro cannot be called with &lt;code&gt;apply&lt;/code&gt;, &lt;code&gt;mapcar&lt;/code&gt; and so on. Also, it takes some work to convert an ordinary function into a macro. To convert it into an inline function is easy; just replace &lt;code&gt;defun&lt;/code&gt; with &lt;code&gt;defsubst&lt;/code&gt;. Since each argument of an inline function is evaluated exactly once, you needn&amp;rsquo;t worry about how many times the body uses the arguments, as you do for macros.</source>
          <target state="translated">Es posible usar &lt;code&gt;defmacro&lt;/code&gt; para definir una macro que se expandir&amp;aacute; en el mismo c&amp;oacute;digo que ejecutar&amp;iacute;a una funci&amp;oacute;n en l&amp;iacute;nea (ver &lt;a href=&quot;macros#Macros&quot;&gt;Macros&lt;/a&gt; ). Pero la macro se limitar&amp;iacute;a al uso directo en expresiones; una macro no se puede llamar con &lt;code&gt;apply&lt;/code&gt; , &lt;code&gt;mapcar&lt;/code&gt; , etc. Adem&amp;aacute;s, se necesita algo de trabajo para convertir una funci&amp;oacute;n ordinaria en una macro. Convertirlo en una funci&amp;oacute;n en l&amp;iacute;nea es f&amp;aacute;cil; simplemente reemplace &lt;code&gt;defun&lt;/code&gt; con &lt;code&gt;defsubst&lt;/code&gt; . Dado que cada argumento de una funci&amp;oacute;n en l&amp;iacute;nea se eval&amp;uacute;a exactamente una vez, no necesita preocuparse por cu&amp;aacute;ntas veces el cuerpo usa los argumentos, como lo hace con las macros.</target>
        </trans-unit>
        <trans-unit id="18905aab409cadb5b72681a650ec99001cb221e0" translate="yes" xml:space="preserve">
          <source>Iteration</source>
          <target state="translated">Iteration</target>
        </trans-unit>
        <trans-unit id="f4d74e5132bdad11a69b68ebde992bf491707cbc" translate="yes" xml:space="preserve">
          <source>Iteration means executing part of a program repetitively. For example, you might want to repeat some computation once for each element of a list, or once for each integer from 0 to &lt;var&gt;n&lt;/var&gt;. You can do this in Emacs Lisp with the special form &lt;code&gt;while&lt;/code&gt;:</source>
          <target state="translated">La iteraci&amp;oacute;n significa ejecutar parte de un programa de manera repetitiva. Por ejemplo, es posible que desee repetir algunos c&amp;aacute;lculos una vez para cada elemento de una lista, o una vez para cada n&amp;uacute;mero entero de 0 a &lt;var&gt;n&lt;/var&gt; . Puede hacer esto en Emacs Lisp con la forma especial &lt;code&gt;while&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="2fb2f2a0c2e32e4191a12be240b63fedbe73b154" translate="yes" xml:space="preserve">
          <source>Its default value is a list of two functions:</source>
          <target state="translated">Su valor por defecto es una lista de dos funciones:</target>
        </trans-unit>
        <trans-unit id="49589a66a4ed1e537405d93b509f6624692ac859" translate="yes" xml:space="preserve">
          <source>Its limitations are two-fold:</source>
          <target state="translated">Sus limitaciones son dobles:</target>
        </trans-unit>
        <trans-unit id="007b93ab24ba9d1da7373772173fe2a52b7889ac" translate="yes" xml:space="preserve">
          <source>Its value is a cons cell whose &lt;small&gt;CAR&lt;/small&gt; is the property value, the same value &lt;code&gt;get-char-property&lt;/code&gt; would return with the same arguments. Its &lt;small&gt;CDR&lt;/small&gt; is the overlay in which the property was found, or &lt;code&gt;nil&lt;/code&gt;, if it was found as a text property or not found at all.</source>
          <target state="translated">Su valor es una celda de contras cuyo &lt;small&gt;CAR&lt;/small&gt; es el valor de la propiedad, el mismo valor que &lt;code&gt;get-char-property&lt;/code&gt; devolver&amp;iacute;a con los mismos argumentos. Su &lt;small&gt;CDR&lt;/small&gt; es la superposici&amp;oacute;n en la que se encontr&amp;oacute; la propiedad, o &lt;code&gt;nil&lt;/code&gt; , si se encontr&amp;oacute; como una propiedad de texto o no se encontr&amp;oacute; en absoluto.</target>
        </trans-unit>
        <trans-unit id="6b878b75e01a9b65a11b6b767fc6064f2ed8e1c3" translate="yes" xml:space="preserve">
          <source>Its value should be an alist of elements &lt;code&gt;(&lt;var&gt;group&lt;/var&gt;
. &lt;var&gt;method&lt;/var&gt;)&lt;/code&gt;, where &lt;var&gt;group&lt;/var&gt; is a symbol specifying a group of characters, and &lt;var&gt;method&lt;/var&gt; is a symbol specifying how to display them.</source>
          <target state="translated">Su valor debe ser una lista de elementos &lt;code&gt;(&lt;var&gt;group&lt;/var&gt; . &lt;var&gt;method&lt;/var&gt;)&lt;/code&gt; , donde &lt;var&gt;group&lt;/var&gt; es un s&amp;iacute;mbolo que especifica un grupo de caracteres y &lt;var&gt;method&lt;/var&gt; es un s&amp;iacute;mbolo que especifica c&amp;oacute;mo mostrarlos.</target>
        </trans-unit>
        <trans-unit id="a45885aac538290762a4f7f3317abf411bb16059" translate="yes" xml:space="preserve">
          <source>JPEG</source>
          <target state="translated">JPEG</target>
        </trans-unit>
        <trans-unit id="031a4e76f0b39d0df073d934da5fc48da8d737e5" translate="yes" xml:space="preserve">
          <source>JSON</source>
          <target state="translated">JSON</target>
        </trans-unit>
        <trans-unit id="6f0b2b618684c092a8066c4d2b87cf92b25d0ab7" translate="yes" xml:space="preserve">
          <source>JSON Remote Procedure Call protocol</source>
          <target state="translated">Procedimiento remoto JSON Protocolo de llamada</target>
        </trans-unit>
        <trans-unit id="5f40c53af62eb7b5ee0a65ed1e7c8f365f43b1f1" translate="yes" xml:space="preserve">
          <source>JSON has only one map type, the object. JSON objects are represented using Lisp hashtables, alists or plists. When an alist or plist contains several elements with the same key, Emacs uses only the first element for serialization, in accordance with the behavior of &lt;code&gt;assq&lt;/code&gt;.</source>
          <target state="translated">JSON solo tiene un tipo de mapa, el objeto. Los objetos JSON se representan utilizando tablas hash Lisp, alistas o plists. Cuando una alista o plista contiene varios elementos con la misma clave, Emacs usa solo el primer elemento para la serializaci&amp;oacute;n, de acuerdo con el comportamiento de &lt;code&gt;assq&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="4027009299142689327089033c66ce6d8204c015" translate="yes" xml:space="preserve">
          <source>JSON has only one sequence type, the array. JSON arrays are represented using Lisp vectors.</source>
          <target state="translated">JSON sólo tiene un tipo de secuencia,la matriz.Las matrices de JSON se representan con vectores Lisp.</target>
        </trans-unit>
        <trans-unit id="89330272dcad769514c364e424832f313f1167c0" translate="yes" xml:space="preserve">
          <source>JSON only has floating-point numbers. They can represent both Lisp integers and Lisp floating-point numbers.</source>
          <target state="translated">JSON sólo tiene números de punto flotante.Pueden representar tanto números enteros de Lisp como números de punto flotante de Lisp.</target>
        </trans-unit>
        <trans-unit id="18c0817b7de8ce2fe86bde8704950b2eeeb0640d" translate="yes" xml:space="preserve">
          <source>JSON strings are always Unicode strings encoded in UTF-8. Lisp strings can contain non-Unicode characters.</source>
          <target state="translated">Las cadenas JSON son siempre cadenas de Unicode codificadas en UTF-8.Las cadenas Lisp pueden contener caracteres no Unicode.</target>
        </trans-unit>
        <trans-unit id="604769fe0494c1a23dd3dbf7fcb493bb82074409" translate="yes" xml:space="preserve">
          <source>JSON uses three keywords: &lt;code&gt;true&lt;/code&gt;, &lt;code&gt;null&lt;/code&gt;, &lt;code&gt;false&lt;/code&gt;. &lt;code&gt;true&lt;/code&gt; is represented by the symbol &lt;code&gt;t&lt;/code&gt;. By default, the remaining two are represented, respectively, by the symbols &lt;code&gt;:null&lt;/code&gt; and &lt;code&gt;:false&lt;/code&gt;.</source>
          <target state="translated">JSON usa tres palabras clave: &lt;code&gt;true&lt;/code&gt; , &lt;code&gt;null&lt;/code&gt; , &lt;code&gt;false&lt;/code&gt; . &lt;code&gt;true&lt;/code&gt; est&amp;aacute; representado por el s&amp;iacute;mbolo &lt;code&gt;t&lt;/code&gt; . Por defecto, los dos restantes est&amp;aacute;n representados, respectivamente, por los s&amp;iacute;mbolos &lt;code&gt;:null&lt;/code&gt; y &lt;code&gt;:false&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="ffacdf205c7b613f126d350a3416adc2ea7f7d90" translate="yes" xml:space="preserve">
          <source>JSONRPC</source>
          <target state="translated">JSONRPC</target>
        </trans-unit>
        <trans-unit id="023904df01b91caca2efa0a6f39bbded6afa2411" translate="yes" xml:space="preserve">
          <source>JSONRPC JSON object format</source>
          <target state="translated">Formato de objeto JSONRPC JSON</target>
        </trans-unit>
        <trans-unit id="8cb256262920f81ff7c10fc10bd2e49e81c8137a" translate="yes" xml:space="preserve">
          <source>JSONRPC JSON objects are exchanged as Lisp plists (see &lt;a href=&quot;property-lists#Property-Lists&quot;&gt;Property Lists&lt;/a&gt;): JSON-compatible plists are handed to the dispatcher functions and, likewise, JSON-compatible plists should be given to &lt;code&gt;jsonrpc-notify&lt;/code&gt;, &lt;code&gt;jsonrpc-request&lt;/code&gt;, and &lt;code&gt;jsonrpc-async-request&lt;/code&gt;.</source>
          <target state="translated">JSONRPC Los objetos JSON se intercambian como listas de Lisp (ver &lt;a href=&quot;property-lists#Property-Lists&quot;&gt;Listas de propiedades&lt;/a&gt; ): las listas de plists compatibles con JSON se entregan a las funciones del despachador y, del mismo modo, las listas de plists compatibles con JSON se deben proporcionar a &lt;code&gt;jsonrpc-notify&lt;/code&gt; &lt;code&gt;jsonrpc-request&lt;/code&gt; , jsonrpc-request y &lt;code&gt;jsonrpc-async-request&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="a9068fb4f18e456442cb8e3b2ddc33c5d4e5641e" translate="yes" xml:space="preserve">
          <source>JSONRPC communication</source>
          <target state="translated">Comunicación JSONRPC</target>
        </trans-unit>
        <trans-unit id="bb9246b17bfdff9790f8c3e72422d7b7db8ccff0" translate="yes" xml:space="preserve">
          <source>Jumping</source>
          <target state="translated">Jumping</target>
        </trans-unit>
        <trans-unit id="a20aab26c7084f09b487ca4a8ecb0f67c7f41eca" translate="yes" xml:space="preserve">
          <source>Jumping out of a sequence.</source>
          <target state="translated">Saltando de una secuencia.</target>
        </trans-unit>
        <trans-unit id="2d4e7474c74be192828a058c6fbfa5e4ed48ebd6" translate="yes" xml:space="preserve">
          <source>Just like &lt;code&gt;input-decode-map&lt;/code&gt;, but unlike &lt;code&gt;local-function-key-map&lt;/code&gt;, this keymap is applied regardless of whether the input key-sequence has a normal binding. Note however that actual key bindings can have an effect on &lt;code&gt;key-translation-map&lt;/code&gt;, even though they are overridden by it. Indeed, actual key bindings override &lt;code&gt;local-function-key-map&lt;/code&gt; and thus may alter the key sequence that &lt;code&gt;key-translation-map&lt;/code&gt; receives. Clearly, it is better to avoid this type of situation.</source>
          <target state="translated">Al igual que &lt;code&gt;input-decode-map&lt;/code&gt; , pero a diferencia del &lt;code&gt;local-function-key-map&lt;/code&gt; , este mapa de teclas se aplica independientemente de si la secuencia de teclas de entrada tiene un enlace normal. Sin embargo, tenga en cuenta que las combinaciones de teclas reales pueden tener un efecto en el &lt;code&gt;key-translation-map&lt;/code&gt; , aunque sean anuladas por &amp;eacute;l. De hecho, las combinaciones de teclas reales anulan &lt;code&gt;local-function-key-map&lt;/code&gt; y, por lo tanto, pueden alterar la secuencia de &lt;code&gt;key-translation-map&lt;/code&gt; que recibe el mapa de traducci&amp;oacute;n de teclas . Claramente, es mejor evitar este tipo de situaciones.</target>
        </trans-unit>
        <trans-unit id="77d80675faa0379a05b630d16d127cfd2e69de8d" translate="yes" xml:space="preserve">
          <source>Just moving the mouse, not pushing a button.</source>
          <target state="translated">Sólo moviendo el ratón,no apretando un botón.</target>
        </trans-unit>
        <trans-unit id="17d7aa6336e0d7068a94ced38ef5d747f79474ef" translate="yes" xml:space="preserve">
          <source>Just what parameters a frame has depends on what display mechanism it uses. This section describes the parameters that have special meanings on some or all kinds of terminals. Of these, &lt;code&gt;name&lt;/code&gt;, &lt;code&gt;title&lt;/code&gt;, &lt;code&gt;height&lt;/code&gt;, &lt;code&gt;width&lt;/code&gt;, &lt;code&gt;buffer-list&lt;/code&gt; and &lt;code&gt;buffer-predicate&lt;/code&gt; provide meaningful information in terminal frames, and &lt;code&gt;tty-color-mode&lt;/code&gt; is meaningful only for frames on text terminals.</source>
          <target state="translated">Los par&amp;aacute;metros que tiene un marco dependen del mecanismo de visualizaci&amp;oacute;n que utilice. Esta secci&amp;oacute;n describe los par&amp;aacute;metros que tienen significados especiales en algunos o todos los tipos de terminales. De &amp;eacute;stos, &lt;code&gt;name&lt;/code&gt; , &lt;code&gt;title&lt;/code&gt; , &lt;code&gt;height&lt;/code&gt; , &lt;code&gt;width&lt;/code&gt; , &lt;code&gt;buffer-list&lt;/code&gt; a y &lt;code&gt;buffer-predicate&lt;/code&gt; proporcionan informaci&amp;oacute;n significativa en los marcos de terminales, y &lt;code&gt;tty-color-mode&lt;/code&gt; s&amp;oacute;lo tiene sentido para los marcos en terminales de texto.</target>
        </trans-unit>
        <trans-unit id="a7ee38bb7be4fc44198cb2685d9601dcf2b9f569" translate="yes" xml:space="preserve">
          <source>K</source>
          <target state="translated">K</target>
        </trans-unit>
        <trans-unit id="b4003201894d55fb52e96919b5492ae84d3e20c6" translate="yes" xml:space="preserve">
          <source>Keep the standard output stream separate from the standard error stream; deal with the ordinary output as specified by &lt;var&gt;real-destination&lt;/var&gt;, and dispose of the error output according to &lt;var&gt;error-destination&lt;/var&gt;. If &lt;var&gt;error-destination&lt;/var&gt; is &lt;code&gt;nil&lt;/code&gt;, that means to discard the error output, &lt;code&gt;t&lt;/code&gt; means mix it with the ordinary output, and a string specifies a file name to redirect error output into.</source>
          <target state="translated">Mantenga el flujo de salida est&amp;aacute;ndar separado del flujo de error est&amp;aacute;ndar; tratar con la salida ordinaria seg&amp;uacute;n lo especificado por &lt;var&gt;real-destination&lt;/var&gt; y eliminar la salida de error de acuerdo con &lt;var&gt;error-destination&lt;/var&gt; . Si &lt;var&gt;error-destination&lt;/var&gt; es &lt;code&gt;nil&lt;/code&gt; , eso significa descartar la salida de error, &lt;code&gt;t&lt;/code&gt; significa mezclarla con la salida normal, y una cadena especifica un nombre de archivo para redirigir la salida de error.</target>
        </trans-unit>
        <trans-unit id="2313f6a862f0a5a7b23c0ccfb3f009b7d62043d3" translate="yes" xml:space="preserve">
          <source>Keeping multiple backups for each source file.</source>
          <target state="translated">Manteniendo múltiples copias de seguridad para cada archivo fuente.</target>
        </trans-unit>
        <trans-unit id="8d474fa62c5cf5a6da4cbae82ab10a2815da666e" translate="yes" xml:space="preserve">
          <source>Key Lookup</source>
          <target state="translated">Búsqueda de claves</target>
        </trans-unit>
        <trans-unit id="cb77a254d48a5f705e632277b08072b03c096a05" translate="yes" xml:space="preserve">
          <source>Key Sequence Input</source>
          <target state="translated">Entrada de la secuencia de teclas</target>
        </trans-unit>
        <trans-unit id="7a7b2425d6daf70b349c0a7d7d7ea874344f67e9" translate="yes" xml:space="preserve">
          <source>Key Sequences</source>
          <target state="translated">Secuencias clave</target>
        </trans-unit>
        <trans-unit id="0b515ab1a9fb6a3fcee02f1f50e5a2f26e18e821" translate="yes" xml:space="preserve">
          <source>Key lookup uses just the event type of each event in the key sequence; the rest of the event is ignored. In fact, a key sequence used for key lookup may designate a mouse event with just its types (a symbol) instead of the entire event (a list). See &lt;a href=&quot;input-events#Input-Events&quot;&gt;Input Events&lt;/a&gt;. Such a key sequence is insufficient for &lt;code&gt;command-execute&lt;/code&gt; to run, but it is sufficient for looking up or rebinding a key.</source>
          <target state="translated">La b&amp;uacute;squeda de claves utiliza solo el tipo de evento de cada evento en la secuencia de claves; el resto del evento se ignora. De hecho, una secuencia de teclas utilizada para la b&amp;uacute;squeda de teclas puede designar un evento de mouse con solo sus tipos (un s&amp;iacute;mbolo) en lugar del evento completo (una lista). Consulte &lt;a href=&quot;input-events#Input-Events&quot;&gt;Eventos de entrada&lt;/a&gt; . Esta secuencia de teclas es insuficiente para &lt;code&gt;command-execute&lt;/code&gt; de comandos , pero es suficiente para buscar o volver a enlazar una tecla.</target>
        </trans-unit>
        <trans-unit id="00ac667fea005ecd115f4ed149f2f13d0cf004c7" translate="yes" xml:space="preserve">
          <source>Key sequences as Lisp objects.</source>
          <target state="translated">Secuencias clave como objetos de Lisp.</target>
        </trans-unit>
        <trans-unit id="e6f5765563fe2bf147f6daa60b670109e680de3f" translate="yes" xml:space="preserve">
          <source>Key sequences containing function keys, mouse button events, system events, or non-</source>
          <target state="translated">Secuencias de teclas que contienen teclas de función,eventos de botón de ratón,eventos de sistema,o no</target>
        </trans-unit>
        <trans-unit id="3961da9502b1e99387aff089f5c83ca94c5c588d" translate="yes" xml:space="preserve">
          <source>Keyboard Events</source>
          <target state="translated">Tastatur-Ereignisse</target>
        </trans-unit>
        <trans-unit id="cc4837611e356bedd08fd92c8bd27ef9a22790ca" translate="yes" xml:space="preserve">
          <source>Keyboard Macros</source>
          <target state="translated">Macros de teclado</target>
        </trans-unit>
        <trans-unit id="8b6bd7b83a0711a97c1d29c9f645fc934a4cbc3d" translate="yes" xml:space="preserve">
          <source>Keyboard macros (strings and vectors) are commands also, even though they are not functions. See &lt;a href=&quot;keyboard-macros#Keyboard-Macros&quot;&gt;Keyboard Macros&lt;/a&gt;. We say that a symbol is a command if its function cell contains a command (see &lt;a href=&quot;symbol-components#Symbol-Components&quot;&gt;Symbol Components&lt;/a&gt;); such a &lt;em&gt;named command&lt;/em&gt; can be invoked with</source>
          <target state="translated">Las macros de teclado (cadenas y vectores) tambi&amp;eacute;n son comandos, aunque no sean funciones. Consulte &lt;a href=&quot;keyboard-macros#Keyboard-Macros&quot;&gt;Macros de teclado&lt;/a&gt; . Decimos que un s&amp;iacute;mbolo es un comando si su celda de funci&amp;oacute;n contiene un comando (ver &lt;a href=&quot;symbol-components#Symbol-Components&quot;&gt;Componentes del s&amp;iacute;mbolo&lt;/a&gt; ); tal &lt;em&gt;comando con nombre&lt;/em&gt; se puede invocar con</target>
        </trans-unit>
        <trans-unit id="57d8ce809f6aac6dc1bf827bb30233a06fa72cbe" translate="yes" xml:space="preserve">
          <source>Keyboard macros containing the commands in this section do not completely work: exiting from Edebug, to resume the program, loses track of the keyboard macro. This is not easy to fix. Also, defining or executing a keyboard macro outside of Edebug does not affect commands inside Edebug. This is usually an advantage. See also the &lt;code&gt;edebug-continue-kbd-macro&lt;/code&gt; option in &lt;a href=&quot;edebug-options#Edebug-Options&quot;&gt;Edebug Options&lt;/a&gt;.</source>
          <target state="translated">Las macros de teclado que contienen los comandos de esta secci&amp;oacute;n no funcionan completamente: al salir de Edebug, para reanudar el programa, se pierde la pista de la macro de teclado. Esto no es f&amp;aacute;cil de arreglar. Adem&amp;aacute;s, definir o ejecutar una macro de teclado fuera de Edebug no afecta los comandos dentro de Edebug. Esto suele ser una ventaja. Consulte tambi&amp;eacute;n la opci&amp;oacute;n &lt;code&gt;edebug-continue-kbd-macro&lt;/code&gt; en &lt;a href=&quot;edebug-options#Edebug-Options&quot;&gt;Opciones de Edebug&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="e3894811d2bb2e8a0e70a43023f6e533fc04aa5f" translate="yes" xml:space="preserve">
          <source>Keymap Basics</source>
          <target state="translated">Conceptos básicos del mapa de teclas</target>
        </trans-unit>
        <trans-unit id="7e1e2cf42b1a47ad6de7151c248a098ee3773208" translate="yes" xml:space="preserve">
          <source>Keymap Type</source>
          <target state="translated">Tipo de mapa de teclas</target>
        </trans-unit>
        <trans-unit id="d76a6428ca9ac90ba70592739416e9b19c454e19" translate="yes" xml:space="preserve">
          <source>Keymaps</source>
          <target state="translated">Keymaps</target>
        </trans-unit>
        <trans-unit id="68c5dc6cf88794930ca2d061c030b64676e40cee" translate="yes" xml:space="preserve">
          <source>Keymaps and Minor Modes</source>
          <target state="translated">Mapas de teclas y modos menores</target>
        </trans-unit>
        <trans-unit id="3093db83b00c2f7e5b19934739a3fc63828ae6d8" translate="yes" xml:space="preserve">
          <source>Keymaps do not directly record bindings for the meta characters. Instead, meta characters are regarded for purposes of key lookup as sequences of two characters, the first of which is</source>
          <target state="translated">Los mapas de teclas no registran directamente los enlaces de los personajes meta.En cambio,los meta caracteres se consideran,a efectos de la búsqueda de claves,como secuencias de dos caracteres,el primero de los cuales es</target>
        </trans-unit>
        <trans-unit id="3117df544bce8c92b99c739e69838cf2a9859a28" translate="yes" xml:space="preserve">
          <source>Keymaps for Translating Sequences of Events</source>
          <target state="translated">Mapas clave para traducir secuencias de eventos</target>
        </trans-unit>
        <trans-unit id="89b194f61c3768b6f1d5626d1fe4d243fd85ddb1" translate="yes" xml:space="preserve">
          <source>Keymaps for translating sequences of events.</source>
          <target state="translated">Mapas clave para traducir secuencias de eventos.</target>
        </trans-unit>
        <trans-unit id="fe40ad8ac52f1e3452189e07dae6c5efcaaf2ae3" translate="yes" xml:space="preserve">
          <source>Keypad PF keys.</source>
          <target state="translated">Teclado Teclas PF.</target>
        </trans-unit>
        <trans-unit id="7ff53782c834404cf3524a8597174b2cf0076736" translate="yes" xml:space="preserve">
          <source>Keypad arrow keys. Emacs normally translates these into the corresponding non-keypad keys &lt;code&gt;home&lt;/code&gt;, &lt;code&gt;left&lt;/code&gt;, &amp;hellip;</source>
          <target state="translated">Teclas de flecha del teclado. Emacs normalmente los traduce a las correspondientes teclas que no son del teclado &lt;code&gt;home&lt;/code&gt; , &lt;code&gt;left&lt;/code&gt; , ...</target>
        </trans-unit>
        <trans-unit id="b5eb0d39876e431709d140c2c21d82c8238a6c99" translate="yes" xml:space="preserve">
          <source>Keypad keys (to the right of the regular keyboard).</source>
          <target state="translated">Teclas del teclado (a la derecha del teclado normal).</target>
        </trans-unit>
        <trans-unit id="eef968747a417ebd5b41ada36d96e9a593e3dde7" translate="yes" xml:space="preserve">
          <source>Keypad keys with digits.</source>
          <target state="translated">Teclas del teclado con dígitos.</target>
        </trans-unit>
        <trans-unit id="dd3107ada3563f5762a1c77c6d042feef96965e8" translate="yes" xml:space="preserve">
          <source>Keys which are numbers are the same if they are &lt;code&gt;equal&lt;/code&gt;, that is, if they are equal in value and either both are integers or both are floating point; otherwise, two distinct objects are never the same.</source>
          <target state="translated">Las claves que son n&amp;uacute;meros son iguales si son &lt;code&gt;equal&lt;/code&gt; , es decir, si tienen el mismo valor y ambos son n&amp;uacute;meros enteros o ambos son de coma flotante; de lo contrario, dos objetos distintos nunca son iguales.</target>
        </trans-unit>
        <trans-unit id="0a96287d882fd3ff1fe974dd3e8fb389c5f972f8" translate="yes" xml:space="preserve">
          <source>Keyword-argument pairs in a customization type.</source>
          <target state="translated">Pares palabra clave-argumento en un tipo de personalización.</target>
        </trans-unit>
        <trans-unit id="f530db58b3e5088dc7412c6d2298ba3f8456bdeb" translate="yes" xml:space="preserve">
          <source>Keywords</source>
          <target state="translated">Keywords</target>
        </trans-unit>
        <trans-unit id="99d76e74c509d75e4d702035d810e89f93c7d6d9" translate="yes" xml:space="preserve">
          <source>Kill Ring Concepts</source>
          <target state="translated">Conceptos del Anillo de la Muerte</target>
        </trans-unit>
        <trans-unit id="0793494cd99ab42f2fd7a7de2f60c1b1f50d20a1" translate="yes" xml:space="preserve">
          <source>Killed text is saved for later yanking in the &lt;em&gt;kill ring&lt;/em&gt;. This is a list that holds a number of recent kills, not just the last text kill. We call this a &amp;ldquo;ring&amp;rdquo; because yanking treats it as having elements in a cyclic order. The list is kept in the variable &lt;code&gt;kill-ring&lt;/code&gt;, and can be operated on with the usual functions for lists; there are also specialized functions, described in this section, that treat it as a ring.</source>
          <target state="translated">El texto eliminado se guarda para tirarlo m&amp;aacute;s tarde en el &lt;em&gt;anillo de muerte&lt;/em&gt; . Esta es una lista que contiene varias muertes recientes, no solo la &amp;uacute;ltima muerte de texto. A esto lo llamamos un &quot;anillo&quot; porque tirar lo trata como si tuviera elementos en un orden c&amp;iacute;clico. La lista se guarda en la variable &lt;code&gt;kill-ring&lt;/code&gt; y se puede operar con las funciones habituales de las listas; tambi&amp;eacute;n hay funciones especializadas, descritas en esta secci&amp;oacute;n, que lo tratan como un anillo.</target>
        </trans-unit>
        <trans-unit id="3af8708ad522d3a5f4a8a381debab1e57b5755ab" translate="yes" xml:space="preserve">
          <source>Killing Buffers</source>
          <target state="translated">Buffers de matanza</target>
        </trans-unit>
        <trans-unit id="905a28f726d10a308adc3a62e9e389be2995327d" translate="yes" xml:space="preserve">
          <source>Killing Emacs</source>
          <target state="translated">Matar a Emacs</target>
        </trans-unit>
        <trans-unit id="e96de96c4cb696f64784e596daa37e7385985b37" translate="yes" xml:space="preserve">
          <source>Killing Emacs means ending the execution of the Emacs process. If you started Emacs from a terminal, the parent process normally resumes control. The low-level primitive for killing Emacs is &lt;code&gt;kill-emacs&lt;/code&gt;.</source>
          <target state="translated">Matar a Emacs significa finalizar la ejecuci&amp;oacute;n del proceso de Emacs. Si inici&amp;oacute; Emacs desde una terminal, el proceso padre normalmente retoma el control. La primitiva de bajo nivel para matar a Emacs es &lt;code&gt;kill-emacs&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="32c52ea2582689ab686f39c40e2513b971ea8ebe" translate="yes" xml:space="preserve">
          <source>Killing a buffer that is already dead has no effect.</source>
          <target state="translated">Matar un búfer que ya está muerto no tiene ningún efecto.</target>
        </trans-unit>
        <trans-unit id="6077b76b5702831c966267012f0fbf3e43b7d854" translate="yes" xml:space="preserve">
          <source>Killing an indirect buffer has no effect on its base buffer. Killing the base buffer effectively kills the indirect buffer in that it cannot ever again be the current buffer.</source>
          <target state="translated">Matar un amortiguador indirecto no tiene ningún efecto en su amortiguador base.Matar el búfer base mata efectivamente el búfer indirecto en el sentido de que no puede volver a ser el búfer actual.</target>
        </trans-unit>
        <trans-unit id="6e673387e3bdf070063073a3f9e5be789f453c2e" translate="yes" xml:space="preserve">
          <source>Killing the associated buffer of a process also kills the process. Emacs asks for confirmation first, if the process&amp;rsquo;s &lt;code&gt;process-query-on-exit-flag&lt;/code&gt; is non-&lt;code&gt;nil&lt;/code&gt; (see &lt;a href=&quot;query-before-exit#Query-Before-Exit&quot;&gt;Query Before Exit&lt;/a&gt;). This confirmation is done by the function &lt;code&gt;process-kill-buffer-query-function&lt;/code&gt;, which is run from &lt;code&gt;kill-buffer-query-functions&lt;/code&gt; (see &lt;a href=&quot;killing-buffers#Killing-Buffers&quot;&gt;Killing Buffers&lt;/a&gt;).</source>
          <target state="translated">Matar el b&amp;uacute;fer asociado de un proceso tambi&amp;eacute;n mata el proceso. Emacs solicita confirmaci&amp;oacute;n primero, si el &lt;code&gt;process-query-on-exit-flag&lt;/code&gt; de proceso al salir del proceso no es &lt;code&gt;nil&lt;/code&gt; (consulte &lt;a href=&quot;query-before-exit#Query-Before-Exit&quot;&gt;Consulta antes de salir&lt;/a&gt; ). Esta confirmaci&amp;oacute;n se realiza mediante la funci&amp;oacute;n &lt;code&gt;process-kill-buffer-query-function&lt;/code&gt; , que se ejecuta desde &lt;code&gt;kill-buffer-query-functions&lt;/code&gt; (ver &lt;a href=&quot;killing-buffers#Killing-Buffers&quot;&gt;Killing Buffers&lt;/a&gt; ).</target>
        </trans-unit>
        <trans-unit id="3bdff83a09d5676c78e5c2c430a0e721e8015f53" translate="yes" xml:space="preserve">
          <source>Killing the process&amp;rsquo;s buffer deletes the process, which kills the subprocess with a &lt;code&gt;SIGHUP&lt;/code&gt; signal (see &lt;a href=&quot;signals-to-processes#Signals-to-Processes&quot;&gt;Signals to Processes&lt;/a&gt;).</source>
          <target state="translated">Matar el b&amp;uacute;fer del proceso elimina el proceso, que mata el subproceso con una se&amp;ntilde;al &lt;code&gt;SIGHUP&lt;/code&gt; (ver &lt;a href=&quot;signals-to-processes#Signals-to-Processes&quot;&gt;Se&amp;ntilde;ales a los procesos&lt;/a&gt; ).</target>
        </trans-unit>
        <trans-unit id="7f4b3ead218699344f23be9d2cfa8db0a8b21cce" translate="yes" xml:space="preserve">
          <source>Kinds of Forms</source>
          <target state="translated">Tipos de formas</target>
        </trans-unit>
        <trans-unit id="64d2ffb3f2887641adb1066e515d59980846cd8f" translate="yes" xml:space="preserve">
          <source>Kludge to make preloaded Lisp functions shareable.</source>
          <target state="translated">Kludge para hacer compartibles las funciones de Lisp precargadas.</target>
        </trans-unit>
        <trans-unit id="9f99b3ffcb996071b995db44be3acebff40b85cd" translate="yes" xml:space="preserve">
          <source>Knowing the outer size of a frame is useful for fitting a frame into the working area of its display (see &lt;a href=&quot;multiple-terminals#Multiple-Terminals&quot;&gt;Multiple Terminals&lt;/a&gt;) or for placing two frames adjacent to each other on the screen. Usually, the outer size of a frame is available only after the frame has been mapped (made visible, see &lt;a href=&quot;visibility-of-frames#Visibility-of-Frames&quot;&gt;Visibility of Frames&lt;/a&gt;) at least once. For the initial frame or a frame that has not been created yet, the outer size can be only estimated or must be calculated from the window-system&amp;rsquo;s or window manager&amp;rsquo;s defaults. One workaround is to obtain the differences of the outer and native (see below) sizes of a mapped frame and use them for calculating the outer size of the new frame.</source>
          <target state="translated">Conocer el tama&amp;ntilde;o exterior de un marco es &amp;uacute;til para colocar un marco en el &amp;aacute;rea de trabajo de su pantalla (consulte &lt;a href=&quot;multiple-terminals#Multiple-Terminals&quot;&gt;M&amp;uacute;ltiples terminales&lt;/a&gt; ) o para colocar dos marcos adyacentes entre s&amp;iacute; en la pantalla. Por lo general, el tama&amp;ntilde;o exterior de un marco solo est&amp;aacute; disponible despu&amp;eacute;s de que el marco se haya mapeado (hecho visible, consulte &lt;a href=&quot;visibility-of-frames#Visibility-of-Frames&quot;&gt;Visibilidad de los marcos&lt;/a&gt; ) al menos una vez. Para el marco inicial o un marco que a&amp;uacute;n no se ha creado, el tama&amp;ntilde;o exterior solo puede estimarse o debe calcularse a partir de los valores predeterminados del sistema de ventanas o del administrador de ventanas. Una soluci&amp;oacute;n alternativa es obtener las diferencias de los tama&amp;ntilde;os externo y nativo (ver m&amp;aacute;s abajo) de un marco mapeado y usarlos para calcular el tama&amp;ntilde;o externo del nuevo marco.</target>
        </trans-unit>
        <trans-unit id="cbd787f29ba8f2730cc87a999b5ba33499aa964b" translate="yes" xml:space="preserve">
          <source>Kochi Gothic</source>
          <target state="translated">Kochi Gothic</target>
        </trans-unit>
        <trans-unit id="dbe210e5d6e8e316f7fec4291dc590c38590425d" translate="yes" xml:space="preserve">
          <source>LRM</source>
          <target state="translated">LRM</target>
        </trans-unit>
        <trans-unit id="93888d709ed769c070b132d596bc80ec625d98c7" translate="yes" xml:space="preserve">
          <source>LRO</source>
          <target state="translated">LRO</target>
        </trans-unit>
        <trans-unit id="0d6d942b0d775bd54e421837f661227031916cc3" translate="yes" xml:space="preserve">
          <source>Lambda Expressions</source>
          <target state="translated">Expresiones Lambda</target>
        </trans-unit>
        <trans-unit id="08e9d75b80cfeb0adf69e90498297bc377db4e87" translate="yes" xml:space="preserve">
          <source>Lambda expressions are functions with no names.</source>
          <target state="translated">Las expresiones lambda son funciones sin nombre.</target>
        </trans-unit>
        <trans-unit id="91690fadbf640ee6fddae4125d1ea25d075b5bc6" translate="yes" xml:space="preserve">
          <source>Laplace edge-detection currently uses a matrix of</source>
          <target state="translated">La detección de bordes de Laplace utiliza actualmente una matriz de</target>
        </trans-unit>
        <trans-unit id="c26bd272e8dcb1ad4f38240d83c90fe2b2da1de1" translate="yes" xml:space="preserve">
          <source>Lastly (in this series of &lt;code&gt;and&lt;/code&gt; sub-patterns), &lt;code&gt;app&lt;/code&gt; evaluates &lt;code&gt;(match-string&amp;nbsp;1&amp;nbsp;&lt;var&gt;expval&lt;/var&gt;)&lt;/code&gt; (line 6) to get a temporary value &lt;var&gt;tmp&lt;/var&gt; (i.e., the &amp;ldquo;NUMBER&amp;rdquo; substring) and tries to match &lt;var&gt;tmp&lt;/var&gt; against pattern &lt;code&gt;val&lt;/code&gt; (line 7). Since that is a &lt;var&gt;symbol&lt;/var&gt; pattern, it matches unconditionally and additionally binds &lt;code&gt;val&lt;/code&gt; to &lt;var&gt;tmp&lt;/var&gt;.</source>
          <target state="translated">Por &amp;uacute;ltimo (en esta serie de &lt;code&gt;and&lt;/code&gt; &lt;code&gt;(match-string&amp;nbsp;1&amp;nbsp;&lt;var&gt;expval&lt;/var&gt;)&lt;/code&gt; ), la &lt;code&gt;app&lt;/code&gt; eval&amp;uacute;a (match-string 1&amp;nbsp; expval ) (l&amp;iacute;nea 6) para obtener un valor temporal &lt;var&gt;tmp&lt;/var&gt; (es decir, la subcadena &quot;NUMBER&quot;) e intenta hacer coincidir &lt;var&gt;tmp&lt;/var&gt; con el patr&amp;oacute;n &lt;code&gt;val&lt;/code&gt; (l&amp;iacute;nea 7). Dado que ese es un patr&amp;oacute;n de &lt;var&gt;symbol&lt;/var&gt; , coincide incondicionalmente y, adem&amp;aacute;s, une &lt;code&gt;val&lt;/code&gt; a &lt;var&gt;tmp&lt;/var&gt; .</target>
        </trans-unit>
        <trans-unit id="3c447261c5172f1f0b697d9d9c7e4f3be584769f" translate="yes" xml:space="preserve">
          <source>Layout Parameters</source>
          <target state="translated">Parámetros de diseño</target>
        </trans-unit>
        <trans-unit id="dd7dcc546a0d472e7c791aa18106a1ac7f735332" translate="yes" xml:space="preserve">
          <source>Lazy Computation of Text Properties</source>
          <target state="translated">Cómputo perezoso de las propiedades del texto</target>
        </trans-unit>
        <trans-unit id="51a6c8e8ab483e67fa01f4eb903d9c6360351fa8" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s assume you did not type</source>
          <target state="translated">Supongamos que no escribiste</target>
        </trans-unit>
        <trans-unit id="6c75a6f87f325302da0b7e4c39c4c865071152a7" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s consider a user who, as a rule, prefers to display buffers on another frame. Such a user might provide the following customization:</source>
          <target state="translated">Consideremos un usuario que, por regla general, prefiere mostrar b&amp;uacute;feres en otro marco. Dicho usuario podr&amp;iacute;a proporcionar la siguiente personalizaci&amp;oacute;n:</target>
        </trans-unit>
        <trans-unit id="b0ffbdb0406b9b3b41b822f0911fd341803419cd" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s consider the situation where &lt;code&gt;obj&lt;/code&gt; is not a string, or it is a string but has the wrong form. In this case, one of the &lt;code&gt;pred&lt;/code&gt; (lines 3-5) fails to match, thus &lt;code&gt;and&lt;/code&gt; (line 2) fails to match, thus &lt;code&gt;or&lt;/code&gt; (line 1) proceeds to try sub-pattern &lt;code&gt;let&lt;/code&gt; (line 8).</source>
          <target state="translated">Consideremos la situaci&amp;oacute;n en la que &lt;code&gt;obj&lt;/code&gt; no es una cadena, o es una cadena pero tiene la forma incorrecta. En este caso, uno de los &lt;code&gt;pred&lt;/code&gt; (l&amp;iacute;neas 3-5) no coincide, por lo tanto &lt;code&gt;and&lt;/code&gt; (l&amp;iacute;nea 2) no coincide, por lo tanto &lt;code&gt;or&lt;/code&gt; (l&amp;iacute;nea 1) procede a intentar el subpatr&amp;oacute;n &lt;code&gt;let&lt;/code&gt; (l&amp;iacute;nea 8).</target>
        </trans-unit>
        <trans-unit id="f464f3d20ed12cd11f243e1c955b67ff512e7c56" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s start with a precise explanation of the arguments to the &lt;code&gt;DEFUN&lt;/code&gt; macro. Here is a template for them:</source>
          <target state="translated">Comencemos con una explicaci&amp;oacute;n precisa de los argumentos de la macro &lt;code&gt;DEFUN&lt;/code&gt; . Aqu&amp;iacute; hay una plantilla para ellos:</target>
        </trans-unit>
        <trans-unit id="41d77d8b522c0e48c0a6671a0d4abc1bf8cb3bb4" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s use the term &lt;em&gt;keymap entry&lt;/em&gt; to describe the value found by looking up an event type in a keymap. (This doesn&amp;rsquo;t include the item string and other extra elements in a keymap element for a menu item, because &lt;code&gt;lookup-key&lt;/code&gt; and other key lookup functions don&amp;rsquo;t include them in the returned value.) While any Lisp object may be stored in a keymap as a keymap entry, not all make sense for key lookup. Here is a table of the meaningful types of keymap entries:</source>
          <target state="translated">&lt;em&gt;Usemos&lt;/em&gt; el t&amp;eacute;rmino &lt;em&gt;entrada de mapa de teclas&lt;/em&gt; para describir el valor encontrado al buscar un tipo de evento en un mapa de teclas. (Esto no incluye la cadena de elementos y otros elementos adicionales en un elemento de &lt;code&gt;lookup-key&lt;/code&gt; para un elemento de men&amp;uacute;, porque la tecla de b&amp;uacute;squeda y otras funciones de b&amp;uacute;squeda de teclas no las incluyen en el valor devuelto). Mientras que cualquier objeto Lisp puede almacenarse en un mapa de teclas como entrada de mapa de teclas, no todos tienen sentido para la b&amp;uacute;squeda de teclas. A continuaci&amp;oacute;n, se muestra una tabla de los tipos significativos de entradas del mapa de teclas:</target>
        </trans-unit>
        <trans-unit id="8bbb0c0a5273b41486ac35de13cae2a081554aba" translate="yes" xml:space="preserve">
          <source>Letter-case of the strings is significant for the computed distance, but their text properties are ignored. If the optional argument &lt;var&gt;bytecompare&lt;/var&gt; is non-&lt;code&gt;nil&lt;/code&gt;, the function calculates the distance in terms of bytes instead of characters. The byte-wise comparison uses the internal Emacs representation of characters, so it will produce inaccurate results for multibyte strings that include raw bytes (see &lt;a href=&quot;text-representations#Text-Representations&quot;&gt;Text Representations&lt;/a&gt;); make the strings unibyte by encoding them (see &lt;a href=&quot;explicit-encoding#Explicit-Encoding&quot;&gt;Explicit Encoding&lt;/a&gt;) if you need accurate results with raw bytes.</source>
          <target state="translated">El uso de may&amp;uacute;sculas y min&amp;uacute;sculas de las cadenas es significativo para la distancia calculada, pero sus propiedades de texto se ignoran. Si el argumento opcional &lt;var&gt;bytecompare&lt;/var&gt; no es &lt;code&gt;nil&lt;/code&gt; , la funci&amp;oacute;n calcula la distancia en t&amp;eacute;rminos de bytes en lugar de caracteres. La comparaci&amp;oacute;n de bytes usa la representaci&amp;oacute;n interna de caracteres de Emacs, por lo que producir&amp;aacute; resultados inexactos para cadenas multibyte que incluyen bytes sin procesar (ver &lt;a href=&quot;text-representations#Text-Representations&quot;&gt;Representaciones de texto&lt;/a&gt; ); Convierta las cadenas en unibyte codific&amp;aacute;ndolas (consulte &lt;a href=&quot;explicit-encoding#Explicit-Encoding&quot;&gt;Codificaci&amp;oacute;n expl&amp;iacute;cita&lt;/a&gt; ) si necesita resultados precisos con bytes sin procesar.</target>
        </trans-unit>
        <trans-unit id="24275f318d0094becb9bb3da3aed51320878e090" translate="yes" xml:space="preserve">
          <source>Level 1: highlight function declarations, file directives (such as include or import directives), strings and comments. The idea is speed, so only the most important and top-level components are fontified.</source>
          <target state="translated">Nivel 1:destacar las declaraciones de función,las directivas de archivo (como las directivas de inclusión o importación),las cadenas y los comentarios.La idea es la velocidad,por lo que sólo los componentes más importantes y de nivel superior son fontificados.</target>
        </trans-unit>
        <trans-unit id="2117c8f73cb61424d16255425c9131034d1c287e" translate="yes" xml:space="preserve">
          <source>Level 2: in addition to level 1, highlight all language keywords, including type names that act like keywords, as well as named constant values. The idea is that all keywords (either syntactic or semantic) should be fontified appropriately.</source>
          <target state="translated">Nivel 2:además del nivel 1,destacar todas las palabras clave del idioma,incluyendo los nombres de los tipos que actúan como palabras clave,así como los valores constantes nombrados.La idea es que todas las palabras clave (ya sea sintácticas o semánticas)deben ser tipificadas apropiadamente.</target>
        </trans-unit>
        <trans-unit id="660378d0e3ca367794af05e686894a24e39fd862" translate="yes" xml:space="preserve">
          <source>Level 3: in addition to level 2, highlight the symbols being defined in function and variable declarations, and all builtin function names, wherever they appear.</source>
          <target state="translated">Nivel 3:además del nivel 2,destacar los símbolos que se están definiendo en las declaraciones de funciones y variables,y todos los nombres de funciones incorporados,dondequiera que aparezcan.</target>
        </trans-unit>
        <trans-unit id="87fb603e415154744259577d7102e0b2b0b1e8f1" translate="yes" xml:space="preserve">
          <source>Levels of Font Lock</source>
          <target state="translated">Niveles de bloqueo de la fuente</target>
        </trans-unit>
        <trans-unit id="845c80fcc7da2e284fb9f14c14e06bfedafb8705" translate="yes" xml:space="preserve">
          <source>Lexical Binding</source>
          <target state="translated">Encuadernación léxica</target>
        </trans-unit>
        <trans-unit id="03c426c0276e9e8faf0018b87a45220aece313e0" translate="yes" xml:space="preserve">
          <source>Lexical binding is also enabled in Lisp Interaction and IELM mode, used in the</source>
          <target state="translated">La unión léxica también está habilitada en el modo de interacción con el lápiz y el IELM,utilizado en el</target>
        </trans-unit>
        <trans-unit id="8f85fbb6468aabdaf187bcf592914af6cc0d70ab" translate="yes" xml:space="preserve">
          <source>Lexical binding was introduced to Emacs, as an optional feature, in version 24.1. We expect its importance to increase with time. Lexical binding opens up many more opportunities for optimization, so programs using it are likely to run faster in future Emacs versions. Lexical binding is also more compatible with concurrency, which was added to Emacs in version 26.1.</source>
          <target state="translated">La encuadernación léxica se introdujo en el Emacs,como una característica opcional,en la versión 24.1.Esperamos que su importancia aumente con el tiempo.La unión léxica abre muchas más oportunidades de optimización,por lo que es probable que los programas que la utilicen se ejecuten más rápido en futuras versiones de Emacs.La vinculación léxica también es más compatible con la concurrencia,que se añadió a Emacs en la versión 26.1.</target>
        </trans-unit>
        <trans-unit id="88636ad7d4af3bb35c12874b15e249f93c783680" translate="yes" xml:space="preserve">
          <source>Lexical bindings have indefinite extent. Even after a binding construct has finished executing, its lexical environment can be &amp;ldquo;kept around&amp;rdquo; in Lisp objects called &lt;em&gt;closures&lt;/em&gt;. A closure is created when you define a named or anonymous function with lexical binding enabled. See &lt;a href=&quot;closures#Closures&quot;&gt;Closures&lt;/a&gt;, for details.</source>
          <target state="translated">Los enlaces l&amp;eacute;xicos tienen un alcance indefinido. Incluso despu&amp;eacute;s de que una construcci&amp;oacute;n vinculante haya terminado de ejecutarse, su entorno l&amp;eacute;xico se puede &amp;ldquo;mantener&amp;rdquo; en objetos Lisp llamados &lt;em&gt;cierres&lt;/em&gt; . Se crea un cierre cuando define una funci&amp;oacute;n nombrada o an&amp;oacute;nima con el enlace l&amp;eacute;xico habilitado. Ver &lt;a href=&quot;closures#Closures&quot;&gt;Cierres&lt;/a&gt; , para m&amp;aacute;s detalles.</target>
        </trans-unit>
        <trans-unit id="58d773a50406916324eae7c7bdd22604efe3ac76" translate="yes" xml:space="preserve">
          <source>Library Search</source>
          <target state="translated">Búsqueda en la biblioteca</target>
        </trans-unit>
        <trans-unit id="9b66d8e56a509c424a23ad7b016d16d59e2f1039" translate="yes" xml:space="preserve">
          <source>Licensed under the GNU GPL license.</source>
          <target state="translated">Licenciado bajo la licencia GNU GPL.</target>
        </trans-unit>
        <trans-unit id="c7e02c95fe85052fcadf9745a5f1d0358088d936" translate="yes" xml:space="preserve">
          <source>Like</source>
          <target state="translated">Like</target>
        </trans-unit>
        <trans-unit id="1b251709afeae3912bdd27abd462e3a66e4fd821" translate="yes" xml:space="preserve">
          <source>Like &amp;lsquo;</source>
          <target state="translated">Me gusta '</target>
        </trans-unit>
        <trans-unit id="18854c1917f4c8ae7ba5b12ef46faa8c310417a3" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;base64-encode-string&lt;/code&gt;, but generates the URL variant of base 64, and doesn&amp;rsquo;t insert newline characters into the encoded text, so the result is just one long line.</source>
          <target state="translated">Como &lt;code&gt;base64-encode-string&lt;/code&gt; , pero genera la variante de URL de base 64 y no inserta caracteres de nueva l&amp;iacute;nea en el texto codificado, por lo que el resultado es solo una l&amp;iacute;nea larga.</target>
        </trans-unit>
        <trans-unit id="cf864cb9871ee5f0fed0c2f4c9ed40a911dc24fb" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;const&lt;/code&gt;, but used for values which are functions. This displays the documentation string as well as the function name. The documentation string is either the one you specify with &lt;code&gt;:doc&lt;/code&gt;, or &lt;var&gt;function&lt;/var&gt;&amp;rsquo;s own documentation string.</source>
          <target state="translated">Como &lt;code&gt;const&lt;/code&gt; , pero se usa para valores que son funciones. Esto muestra la cadena de documentaci&amp;oacute;n as&amp;iacute; como el nombre de la funci&amp;oacute;n. La cadena de documentaci&amp;oacute;n es la que especifica con &lt;code&gt;:doc&lt;/code&gt; , o la cadena de documentaci&amp;oacute;n propia de la &lt;var&gt;function&lt;/var&gt; .</target>
        </trans-unit>
        <trans-unit id="35528820d5e979720b5f6b9b2860031f57025852" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;const&lt;/code&gt;, but used for values which are variable names. This displays the documentation string as well as the variable name. The documentation string is either the one you specify with &lt;code&gt;:doc&lt;/code&gt;, or &lt;var&gt;variable&lt;/var&gt;&amp;rsquo;s own documentation string.</source>
          <target state="translated">Como &lt;code&gt;const&lt;/code&gt; , pero se usa para valores que son nombres de variables. Esto muestra la cadena de documentaci&amp;oacute;n as&amp;iacute; como el nombre de la variable. La cadena de documentaci&amp;oacute;n es la que especifica con &lt;code&gt;:doc&lt;/code&gt; , o la cadena de documentaci&amp;oacute;n propia de la &lt;var&gt;variable&lt;/var&gt; .</target>
        </trans-unit>
        <trans-unit id="511f05b3538b8f4e5096f874143c83d71d91d631" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;custom-initialize-set&lt;/code&gt;, but use the function &lt;code&gt;set-default&lt;/code&gt; to set the variable, instead of the variable&amp;rsquo;s &lt;code&gt;:set&lt;/code&gt; function. This is the usual choice for a variable whose &lt;code&gt;:set&lt;/code&gt; function enables or disables a minor mode; with this choice, defining the variable will not call the minor mode function, but customizing the variable will do so.</source>
          <target state="translated">Como &lt;code&gt;custom-initialize-set&lt;/code&gt; , pero use la funci&amp;oacute;n &lt;code&gt;set-default&lt;/code&gt; para establecer la variable, en lugar de la funci&amp;oacute;n &lt;code&gt;:set&lt;/code&gt; de la variable . &amp;Eacute;sta es la elecci&amp;oacute;n habitual para una variable cuya &lt;code&gt;:set&lt;/code&gt; funci&amp;oacute;n set habilita o deshabilita un modo menor; con esta opci&amp;oacute;n, definir la variable no llamar&amp;aacute; a la funci&amp;oacute;n de modo menor, pero la personalizaci&amp;oacute;n de la variable lo har&amp;aacute;.</target>
        </trans-unit>
        <trans-unit id="204b186d3bb6599421d53e05eadb77e0ad88c08e" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;custom-manual&lt;/code&gt; except that the link appears in the customization buffer with the Info node name.</source>
          <target state="translated">Como &lt;code&gt;custom-manual&lt;/code&gt; , excepto que el enlace aparece en el b&amp;uacute;fer de personalizaci&amp;oacute;n con el nombre del nodo Info.</target>
        </trans-unit>
        <trans-unit id="ce9088de4b6dd7133bd35b95efda2d37cb731128" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;defmacro&lt;/code&gt;, a function inlined with &lt;code&gt;define-inline&lt;/code&gt; inherits the scoping rules, either dynamic or lexical, from the call site. See &lt;a href=&quot;variable-scoping#Variable-Scoping&quot;&gt;Variable Scoping&lt;/a&gt;.</source>
          <target state="translated">Como &lt;code&gt;defmacro&lt;/code&gt; , una funci&amp;oacute;n alineada con &lt;code&gt;define-inline&lt;/code&gt; hereda las reglas de alcance, ya sean din&amp;aacute;micas o l&amp;eacute;xicas, del sitio de llamada. Consulte &lt;a href=&quot;variable-scoping#Variable-Scoping&quot;&gt;Alcance variable&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="054b1abbf6ea76431660ba137b3df462a1771437" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;defvar&lt;/code&gt;, this macro marks &lt;code&gt;option&lt;/code&gt; as a special variable, meaning that it should always be dynamically bound. If &lt;var&gt;option&lt;/var&gt; is already lexically bound, that lexical binding remains in effect until the binding construct exits. See &lt;a href=&quot;variable-scoping#Variable-Scoping&quot;&gt;Variable Scoping&lt;/a&gt;.</source>
          <target state="translated">Como &lt;code&gt;defvar&lt;/code&gt; , esta macro marca la &lt;code&gt;option&lt;/code&gt; como una variable especial, lo que significa que siempre debe estar vinculada din&amp;aacute;micamente. Si la &lt;var&gt;option&lt;/var&gt; ya est&amp;aacute; ligada l&amp;eacute;xicamente, esa vinculaci&amp;oacute;n l&amp;eacute;xica permanece en efecto hasta que sale la construcci&amp;oacute;n vinculante. Consulte &lt;a href=&quot;variable-scoping#Variable-Scoping&quot;&gt;Alcance variable&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="f505d65b09cd1366a862e42a8e4a2919c0a4c57d" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;exit&lt;/code&gt;, but add the key that was pressed to &lt;code&gt;unread-command-events&lt;/code&gt; (see &lt;a href=&quot;event-input-misc#Event-Input-Misc&quot;&gt;Event Input Misc&lt;/a&gt;).</source>
          <target state="translated">Como &lt;code&gt;exit&lt;/code&gt; , pero agregue la tecla que se presion&amp;oacute; a &lt;code&gt;unread-command-events&lt;/code&gt; (vea &lt;a href=&quot;event-input-misc#Event-Input-Misc&quot;&gt;Event Input Misc&lt;/a&gt; ).</target>
        </trans-unit>
        <trans-unit id="ea9c4bf2fcaba7d1996da05f9b1b988c94d94fff" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;group&lt;/code&gt;, but explicitly assign the group number &lt;var&gt;n&lt;/var&gt;. &lt;var&gt;n&lt;/var&gt; must be positive. Corresponding string regexp: &amp;lsquo;</source>
          <target state="translated">Como &lt;code&gt;group&lt;/code&gt; , pero asigne expl&amp;iacute;citamente el n&amp;uacute;mero de grupo &lt;var&gt;n&lt;/var&gt; . &lt;var&gt;n&lt;/var&gt; debe ser positivo. Regexp de cadena correspondiente: '</target>
        </trans-unit>
        <trans-unit id="4add0eb468b070e1db0603abb32c078a15300385" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;list&lt;/code&gt; except that the value must be a vector instead of a list. The elements work the same as in &lt;code&gt;list&lt;/code&gt;.</source>
          <target state="translated">Como &lt;code&gt;list&lt;/code&gt; a, excepto que el valor debe ser un vector en lugar de una lista. Los elementos funcionan igual que en la &lt;code&gt;list&lt;/code&gt; a .</target>
        </trans-unit>
        <trans-unit id="1e9ef9ed8d9cfadaf1437987621cbd1046a68178" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;minflt&lt;/code&gt; and &lt;code&gt;majflt&lt;/code&gt;, but include the number of page faults for all the child processes of the given process.</source>
          <target state="translated">Como &lt;code&gt;minflt&lt;/code&gt; y &lt;code&gt;majflt&lt;/code&gt; , pero incluye el n&amp;uacute;mero de fallas de p&amp;aacute;gina para todos los procesos secundarios del proceso dado.</target>
        </trans-unit>
        <trans-unit id="9dec2e247bfc6d918dc0518cecb0337e87b44e0a" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;next-frame&lt;/code&gt;, but cycles through all frames in the opposite direction.</source>
          <target state="translated">Como el &lt;code&gt;next-frame&lt;/code&gt; , pero recorre todos los fotogramas en la direcci&amp;oacute;n opuesta.</target>
        </trans-unit>
        <trans-unit id="1c35e817ce01d7a752f2915ea0e7c93f0517b8ce" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;plist-get&lt;/code&gt; except that it compares properties using &lt;code&gt;equal&lt;/code&gt; instead of &lt;code&gt;eq&lt;/code&gt;.</source>
          <target state="translated">Como &lt;code&gt;plist-get&lt;/code&gt; excepto que compara propiedades usando &lt;code&gt;equal&lt;/code&gt; lugar de &lt;code&gt;eq&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="b8a06b48a7b978de0c0d0d182fbd613f4474d842" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;plist-put&lt;/code&gt; except that it compares properties using &lt;code&gt;equal&lt;/code&gt; instead of &lt;code&gt;eq&lt;/code&gt;.</source>
          <target state="translated">Como &lt;code&gt;plist-put&lt;/code&gt; excepto que compara propiedades usando &lt;code&gt;equal&lt;/code&gt; lugar de &lt;code&gt;eq&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="5e02ab76a9a240ef8de0ab7231efecfe7c29c24c" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;remove-text-properties&lt;/code&gt; except that &lt;var&gt;list-of-properties&lt;/var&gt; is a list of property names only, not an alternating list of property names and values.</source>
          <target state="translated">Como &lt;code&gt;remove-text-properties&lt;/code&gt; excepto que la &lt;var&gt;list-of-properties&lt;/var&gt; es solo una lista de nombres de propiedad, no una lista alterna de nombres y valores de propiedad.</target>
        </trans-unit>
        <trans-unit id="84e3993015f242ac6ae5f8797efb186174cfc8b8" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;set-buffer-modified-p&lt;/code&gt;, but does not force redisplay of mode lines.</source>
          <target state="translated">Como &lt;code&gt;set-buffer-modified-p&lt;/code&gt; , pero no obliga a volver a mostrar las l&amp;iacute;neas de modo.</target>
        </trans-unit>
        <trans-unit id="9a6e79e4e3bd95966166ddf0bb5d7b010896c5bf" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;signal&lt;/code&gt; (see &lt;a href=&quot;signaling-errors#Signaling-Errors&quot;&gt;Signaling Errors&lt;/a&gt;), but the signal is delivered in the thread &lt;var&gt;thread&lt;/var&gt;. If &lt;var&gt;thread&lt;/var&gt; is the current thread, then this just calls &lt;code&gt;signal&lt;/code&gt; immediately. Otherwise, &lt;var&gt;thread&lt;/var&gt; will receive the signal as soon as it becomes current. If &lt;var&gt;thread&lt;/var&gt; was blocked by a call to &lt;code&gt;mutex-lock&lt;/code&gt;, &lt;code&gt;condition-wait&lt;/code&gt;, or &lt;code&gt;thread-join&lt;/code&gt;; &lt;code&gt;thread-signal&lt;/code&gt; will unblock it.</source>
          <target state="translated">Como una &lt;code&gt;signal&lt;/code&gt; (consulte &lt;a href=&quot;signaling-errors#Signaling-Errors&quot;&gt;Errores de se&amp;ntilde;alizaci&amp;oacute;n&lt;/a&gt; ), pero la se&amp;ntilde;al se entrega en el hilo del &lt;var&gt;thread&lt;/var&gt; . Si el &lt;var&gt;thread&lt;/var&gt; es el hilo actual, esto solo llama a la &lt;code&gt;signal&lt;/code&gt; inmediatamente. De lo contrario, el &lt;var&gt;thread&lt;/var&gt; recibir&amp;aacute; la se&amp;ntilde;al tan pronto como se vuelva actual. Si el &lt;var&gt;thread&lt;/var&gt; fue bloqueado por una llamada a &lt;code&gt;mutex-lock&lt;/code&gt; , &lt;code&gt;condition-wait&lt;/code&gt; o &lt;code&gt;thread-join&lt;/code&gt; ; &lt;code&gt;thread-signal&lt;/code&gt; lo desbloquear&amp;aacute;.</target>
        </trans-unit>
        <trans-unit id="70f44fcb4db769ebd3aa02784e1dfae20cbb9cec" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;start-process&lt;/code&gt;, this function starts a new asynchronous subprocess running &lt;var&gt;program&lt;/var&gt; in it, and returns its process object.</source>
          <target state="translated">Al igual que &lt;code&gt;start-process&lt;/code&gt; , esta funci&amp;oacute;n se inicia un nuevo subproceso as&amp;iacute;ncrono ejecutar &lt;var&gt;program&lt;/var&gt; en el mismo, y devuelve su objeto de proceso.</target>
        </trans-unit>
        <trans-unit id="1768be4d2bcedb1b2e7b51f71b8b22c88b6d6932" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;string&lt;/code&gt; except that the string must be a valid regular expression.</source>
          <target state="translated">Como &lt;code&gt;string&lt;/code&gt; excepto que la cadena debe ser una expresi&amp;oacute;n regular v&amp;aacute;lida.</target>
        </trans-unit>
        <trans-unit id="f979121e411bd20dfdc3630fc906f2e77d6bac00" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;switch-to-buffer&lt;/code&gt;, this function updates the buffer list unless &lt;var&gt;norecord&lt;/var&gt; is non-&lt;code&gt;nil&lt;/code&gt;.</source>
          <target state="translated">Al igual que &lt;code&gt;switch-to-buffer&lt;/code&gt; , esta funci&amp;oacute;n actualiza la lista de b&amp;uacute;fer a menos que &lt;var&gt;norecord&lt;/var&gt; sea ​​no- &lt;code&gt;nil&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="41318cc8f100d4675dfe14fffade93d0c7208044" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;tabulated-list-gui-sort-indicator-asc&lt;/code&gt;, but used for text-mode frames.</source>
          <target state="translated">Como &lt;code&gt;tabulated-list-gui-sort-indicator-asc&lt;/code&gt; , pero utilizado para marcos en modo texto.</target>
        </trans-unit>
        <trans-unit id="e26f9bf4e17c8b8a9b3a88b07dbaf00921a8ff2b" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;tabulated-list-gui-sort-indicator-asc&lt;/code&gt;, but used when the column is sorted in the descending order.</source>
          <target state="translated">Como &lt;code&gt;tabulated-list-gui-sort-indicator-asc&lt;/code&gt; , pero se usa cuando la columna est&amp;aacute; ordenada en orden descendente.</target>
        </trans-unit>
        <trans-unit id="ac75f39d714deb46e7cfbb9da2b8004c0b4dd120" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;tabulated-list-tty-sort-indicator-asc&lt;/code&gt;, but used when the column is sorted in the descending order.</source>
          <target state="translated">Como &lt;code&gt;tabulated-list-tty-sort-indicator-asc&lt;/code&gt; , pero se usa cuando la columna est&amp;aacute; ordenada en orden descendente.</target>
        </trans-unit>
        <trans-unit id="83baebd26ca9a920629b6b8881f71882e191e292" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;this-command-keys&lt;/code&gt;, except that it always returns the events in a vector, so you don&amp;rsquo;t need to deal with the complexities of storing input events in a string (see &lt;a href=&quot;strings-of-events#Strings-of-Events&quot;&gt;Strings of Events&lt;/a&gt;).</source>
          <target state="translated">Como &lt;code&gt;this-command-keys&lt;/code&gt; , excepto que siempre devuelve los eventos en un vector, por lo que no necesita lidiar con las complejidades de almacenar eventos de entrada en una cadena (consulte &lt;a href=&quot;strings-of-events#Strings-of-Events&quot;&gt;Cadenas de eventos&lt;/a&gt; ).</target>
        </trans-unit>
        <trans-unit id="2a77e33ddaa024bcb7e1de6d16b70822ff2b74e0" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;utime&lt;/code&gt;, &lt;code&gt;stime&lt;/code&gt;, and &lt;code&gt;time&lt;/code&gt;, but include the times of all the child processes of the given process.</source>
          <target state="translated">Como &lt;code&gt;utime&lt;/code&gt; , &lt;code&gt;stime&lt;/code&gt; y &lt;code&gt;time&lt;/code&gt; , pero incluye los tiempos de todos los procesos secundarios del proceso dado.</target>
        </trans-unit>
        <trans-unit id="264fb3dd5c5a9c6df032cdd8b67cc032c5141d77" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;vertical-motion&lt;/code&gt;, &lt;code&gt;count-screen-lines&lt;/code&gt; always uses the current buffer, regardless of which buffer is displayed in &lt;var&gt;window&lt;/var&gt;. This makes possible to use &lt;code&gt;count-screen-lines&lt;/code&gt; in any buffer, whether or not it is currently displayed in some window.</source>
          <target state="translated">Al igual que &lt;code&gt;vertical-motion&lt;/code&gt; , &lt;code&gt;count-screen-lines&lt;/code&gt; siempre usa el b&amp;uacute;fer actual, independientemente del b&amp;uacute;fer que se muestre en la &lt;var&gt;window&lt;/var&gt; . Esto hace posible utilizar &lt;code&gt;count-screen-lines&lt;/code&gt; en cualquier b&amp;uacute;fer, ya sea que se muestre o no en alguna ventana.</target>
        </trans-unit>
        <trans-unit id="1d2cce2deecdcf8cf23c34bb65bc484d84587588" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;y-or-n-p&lt;/code&gt;, except that if the user fails to answer within &lt;var&gt;seconds&lt;/var&gt; seconds, this function stops waiting and returns &lt;var&gt;default&lt;/var&gt;. It works by setting up a timer; see &lt;a href=&quot;timers#Timers&quot;&gt;Timers&lt;/a&gt;. The argument &lt;var&gt;seconds&lt;/var&gt; should be a number.</source>
          <target state="translated">Al igual que &lt;code&gt;y-or-n-p&lt;/code&gt; , excepto que si el usuario no responde dentro de &lt;var&gt;seconds&lt;/var&gt; segundos, esta funci&amp;oacute;n se detiene y vuelve a la espera &lt;var&gt;default&lt;/var&gt; . Funciona configurando un temporizador; ver &lt;a href=&quot;timers#Timers&quot;&gt;temporizadores&lt;/a&gt; . Los &lt;var&gt;seconds&lt;/var&gt; argumento deben ser un n&amp;uacute;mero.</target>
        </trans-unit>
        <trans-unit id="42d3bb0dd219a8f3377a5d7dfc35b9c093371501" translate="yes" xml:space="preserve">
          <source>Like a buffer, a string can contain text properties for the characters in it, as well as the characters themselves. See &lt;a href=&quot;text-properties#Text-Properties&quot;&gt;Text Properties&lt;/a&gt;. All the Lisp primitives that copy text from strings to buffers or other strings also copy the properties of the characters being copied.</source>
          <target state="translated">Al igual que un b&amp;uacute;fer, una cadena puede contener propiedades de texto para los caracteres que contiene, as&amp;iacute; como los propios caracteres. Consulte &lt;a href=&quot;text-properties#Text-Properties&quot;&gt;Propiedades del texto&lt;/a&gt; . Todas las primitivas Lisp que copian texto de cadenas a b&amp;uacute;feres u otras cadenas tambi&amp;eacute;n copian las propiedades de los caracteres que se copian.</target>
        </trans-unit>
        <trans-unit id="a8a6416bd2f6413e3de422a7bab6e772fb8419cd" translate="yes" xml:space="preserve">
          <source>Like a mode line, but at the top.</source>
          <target state="translated">Como una línea de modo,pero en la parte superior.</target>
        </trans-unit>
        <trans-unit id="ea6efe0718530791d43dbe7d53bb5a14e1b67ed8" translate="yes" xml:space="preserve">
          <source>Like abbrevs, abbrev tables have properties, some of which influence the way they work. You can provide them as arguments to &lt;code&gt;define-abbrev-table&lt;/code&gt;, and manipulate them with the functions:</source>
          <target state="translated">Al igual que las abreviaturas, las tablas de abreviaturas tienen propiedades, algunas de las cuales influyen en la forma en que funcionan. Puede proporcionarlos como argumentos para &lt;code&gt;define-abbrev-table&lt;/code&gt; y manipularlos con las funciones:</target>
        </trans-unit>
        <trans-unit id="44ec097d5bc177ce9f85e7d020e50ae88d2f91c4" translate="yes" xml:space="preserve">
          <source>Like any application, Emacs can be run in a secure environment, where the operating system enforces rules about access and the like. With some care, Emacs-based applications can also be part of a security perimeter that checks such rules. Although the default settings for Emacs work well for a typical software development environment, they may require adjustment in environments containing untrusted users that may include attackers. Here is a compendium of security issues that may be helpful if you are developing such applications. It is by no means complete; it is intended to give you an idea of the security issues involved, rather than to be a security checklist.</source>
          <target state="translated">Como cualquier aplicación,Emacs puede ejecutarse en un entorno seguro,donde el sistema operativo hace cumplir las normas sobre el acceso y similares.Con un poco de cuidado,las aplicaciones basadas en Emacs también pueden formar parte de un perímetro de seguridad que compruebe dichas reglas.Aunque la configuración predeterminada de Emacs funciona bien para un entorno típico de desarrollo de software,puede requerir un ajuste en entornos con usuarios no fiables que pueden incluir atacantes.A continuación se presenta un compendio de problemas de seguridad que puede ser útil si se están desarrollando dichas aplicaciones.No es en absoluto completo;su objetivo es darle una idea de los problemas de seguridad implicados,más que ser una lista de comprobación de seguridad.</target>
        </trans-unit>
        <trans-unit id="64697998797f77574ca5b12fc923c577aecf3e58" translate="yes" xml:space="preserve">
          <source>Like any marker, this marker can be set to point at any buffer you like. If you make it point at any buffer other than the one of which it is the mark, it will yield perfectly consistent, but rather odd, results. We recommend that you not do it!</source>
          <target state="translated">Como cualquier marcador,este marcador puede ser configurado para apuntar a cualquier buffer que desee.Si lo haces apuntar a cualquier memoria intermedia que no sea la de la marca,dará resultados perfectamente consistentes,pero bastante extraños.¡Le recomendamos que no lo haga!</target>
        </trans-unit>
        <trans-unit id="1e30ff33c9d97dd95ea9111da199e049a900cc43" translate="yes" xml:space="preserve">
          <source>Like other arrays, vectors use zero-origin indexing: the first element has index 0.</source>
          <target state="translated">Como otras matrices,los vectores utilizan un índice de origen cero:el primer elemento tiene un índice 0.</target>
        </trans-unit>
        <trans-unit id="bd4fbae429af14d7410a0be5944198b140179fb1" translate="yes" xml:space="preserve">
          <source>Like other buffers, a minibuffer uses a local keymap (see &lt;a href=&quot;keymaps#Keymaps&quot;&gt;Keymaps&lt;/a&gt;) to specify special key bindings. The function that invokes the minibuffer also sets up its local map according to the job to be done. See &lt;a href=&quot;text-from-minibuffer#Text-from-Minibuffer&quot;&gt;Text from Minibuffer&lt;/a&gt;, for the non-completion minibuffer local maps. See &lt;a href=&quot;completion-commands#Completion-Commands&quot;&gt;Completion Commands&lt;/a&gt;, for the minibuffer local maps for completion.</source>
          <target state="translated">Al igual que otros b&amp;uacute;feres, un minib&amp;uacute;fer usa un mapa de &lt;a href=&quot;keymaps#Keymaps&quot;&gt;teclas&lt;/a&gt; local (consulte Mapas de teclas ) para especificar enlaces de teclas especiales. La funci&amp;oacute;n que invoca el minib&amp;uacute;fer tambi&amp;eacute;n configura su mapa local de acuerdo con el trabajo a realizar. Consulte &lt;a href=&quot;text-from-minibuffer#Text-from-Minibuffer&quot;&gt;Texto del&lt;/a&gt; minib&amp;uacute;fer para ver los mapas locales del minib&amp;uacute;fer que no se han completado. Consulte &lt;a href=&quot;completion-commands#Completion-Commands&quot;&gt;Comandos de finalizaci&amp;oacute;n&lt;/a&gt; para conocer los mapas locales del minib&amp;uacute;fer para completar.</target>
        </trans-unit>
        <trans-unit id="b2ee97c7efba6f620110611b5db71717d51e8ddb" translate="yes" xml:space="preserve">
          <source>Like other positions, point designates a place between two characters (or before the first character, or after the last character), rather than a particular character. Usually terminals display the cursor over the character that immediately follows point; point is actually before the character on which the cursor sits.</source>
          <target state="translated">Como otras posiciones,el punto designa un lugar entre dos caracteres (o antes del primer carácter,o después del último carácter),en lugar de un carácter en particular.Normalmente los terminales muestran el cursor sobre el carácter que sigue inmediatamente al punto;el punto está realmente antes del carácter sobre el que se encuentra el cursor.</target>
        </trans-unit>
        <trans-unit id="8da9a43aec4137b9ff967ca13c1bd7372e6ad639" translate="yes" xml:space="preserve">
          <source>Like the &lt;code&gt;and&lt;/code&gt; construct, &lt;code&gt;or&lt;/code&gt; can be written in terms of &lt;code&gt;cond&lt;/code&gt;. For example:</source>
          <target state="translated">Como &lt;code&gt;and&lt;/code&gt; construye, &lt;code&gt;or&lt;/code&gt; puede escribirse en t&amp;eacute;rminos de &lt;code&gt;cond&lt;/code&gt; . Por ejemplo:</target>
        </trans-unit>
        <trans-unit id="a93ae83163cf6a8ddec90d055956fb5025562919" translate="yes" xml:space="preserve">
          <source>Like the menu bar, the tool bar (see &lt;a href=&quot;tool-bar#Tool-Bar&quot;&gt;Tool Bar&lt;/a&gt;) can be either internal (drawn by Emacs itself) or external (drawn by a toolkit). The GTK+ and NS builds have the tool bar drawn by the toolkit. The remaining builds use internal tool bars. With GTK+ the tool bar can be located on either side of the frame, immediately outside the internal border, see below. Tool bars are usually not shown for child frames (see &lt;a href=&quot;child-frames#Child-Frames&quot;&gt;Child Frames&lt;/a&gt;). Display of the tool bar can be suppressed by setting the &lt;code&gt;tool-bar-lines&lt;/code&gt; parameter (see &lt;a href=&quot;layout-parameters#Layout-Parameters&quot;&gt;Layout Parameters&lt;/a&gt;) to zero.</source>
          <target state="translated">Como la barra de men&amp;uacute;, la barra de herramientas (ver &lt;a href=&quot;tool-bar#Tool-Bar&quot;&gt;Barra de herramientas&lt;/a&gt; ) puede ser interna (dibujada por el propio Emacs) o externa (dibujada por un juego de herramientas). Las compilaciones GTK + y NS tienen la barra de herramientas dibujada por el kit de herramientas. Las construcciones restantes utilizan barras de herramientas internas. Con GTK +, la barra de herramientas se puede ubicar a ambos lados del marco, inmediatamente fuera del borde interno, ver m&amp;aacute;s abajo. Las barras de herramientas generalmente no se muestran para los marcos secundarios (consulte &lt;a href=&quot;child-frames#Child-Frames&quot;&gt;Marcos&lt;/a&gt; secundarios ). La visualizaci&amp;oacute;n de la barra de herramientas se puede suprimir estableciendo el par&amp;aacute;metro de &lt;code&gt;tool-bar-lines&lt;/code&gt; (consulte &lt;a href=&quot;layout-parameters#Layout-Parameters&quot;&gt;Par&amp;aacute;metros de dise&amp;ntilde;o&lt;/a&gt; ) en cero.</target>
        </trans-unit>
        <trans-unit id="fda771ab560862777893dc0b295d979a9763ad74" translate="yes" xml:space="preserve">
          <source>Like the menu bar, the tool bar can display separators (see &lt;a href=&quot;menu-separators#Menu-Separators&quot;&gt;Menu Separators&lt;/a&gt;). Tool bar separators are vertical rather than horizontal, though, and only a single style is supported. They are represented in the tool bar keymap by &lt;code&gt;(menu-item &quot;--&quot;)&lt;/code&gt; entries; properties like &lt;code&gt;:visible&lt;/code&gt; are not supported for tool bar separators. Separators are rendered natively in GTK+ and Nextstep tool bars; in the other cases, they are rendered using an image of a vertical line.</source>
          <target state="translated">Al igual que la barra de men&amp;uacute;s, la barra de herramientas puede mostrar separadores (consulte &lt;a href=&quot;menu-separators#Menu-Separators&quot;&gt;Separadores de men&amp;uacute;s&lt;/a&gt; ). Sin embargo, los separadores de la barra de herramientas son verticales en lugar de horizontales y solo se admite un estilo. Est&amp;aacute;n representados en el mapa de teclas de la barra de herramientas mediante entradas &lt;code&gt;(menu-item &quot;--&quot;)&lt;/code&gt; ; propiedades como &lt;code&gt;:visible&lt;/code&gt; no son compatibles con los separadores de barras de herramientas. Los separadores se representan de forma nativa en las barras de herramientas GTK + y Nextstep; en los dem&amp;aacute;s casos, se renderizan utilizando una imagen de una l&amp;iacute;nea vertical.</target>
        </trans-unit>
        <trans-unit id="9df33e5d8f7b38be89f4b568592a838f25636c81" translate="yes" xml:space="preserve">
          <source>Like the standard &lt;code&gt;backref&lt;/code&gt; construct, but &lt;var&gt;ref&lt;/var&gt; can here also be a name introduced by a previous &lt;code&gt;(let &lt;var&gt;ref&lt;/var&gt; &amp;hellip;)&lt;/code&gt; construct.</source>
          <target state="translated">Como la construcci&amp;oacute;n est&amp;aacute;ndar de &lt;code&gt;backref&lt;/code&gt; , pero aqu&amp;iacute; &lt;var&gt;ref&lt;/var&gt; puede ser tambi&amp;eacute;n un nombre introducido por una construcci&amp;oacute;n anterior &lt;code&gt;(let &lt;var&gt;ref&lt;/var&gt; &amp;hellip;)&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="6121daf0fb6ccba2fa0baef96baeb4b4791c43e3" translate="yes" xml:space="preserve">
          <source>Likewise, &lt;code&gt;save-excursion&lt;/code&gt; does not restore window-buffer correspondences altered by functions such as &lt;code&gt;switch-to-buffer&lt;/code&gt;.</source>
          <target state="translated">Del mismo modo, &lt;code&gt;save-excursion&lt;/code&gt; no restaura las correspondencias entre la ventana y el b&amp;uacute;fer alteradas por funciones como el &lt;code&gt;switch-to-buffer&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="86ef385a59e33cf483e8dded5ef79cc70f792473" translate="yes" xml:space="preserve">
          <source>Likewise, for handling the three types of remote contacts (requests, notifications, and responses to local requests), the transport implementation must arrange for the function &lt;code&gt;jsonrpc-connection-receive&lt;/code&gt; to be called after noticing a new JSONRPC message on the wire (whatever that &quot;wire&quot; may be).</source>
          <target state="translated">Asimismo, para manejar los tres tipos de contactos remotos (solicitudes, notificaciones y respuestas a solicitudes locales), la implementaci&amp;oacute;n de transporte debe disponer que se &lt;code&gt;jsonrpc-connection-receive&lt;/code&gt; a la funci&amp;oacute;n jsonrpc-connection-receive despu&amp;eacute;s de notar un nuevo mensaje JSONRPC en el cable (cualquiera &quot;alambre&quot; puede ser).</target>
        </trans-unit>
        <trans-unit id="0f76d8acf641d878dd8f95ce0cf81e2a38f35161" translate="yes" xml:space="preserve">
          <source>Likewise, for scrolling up. The value, &lt;var&gt;f&lt;/var&gt;, specifies how far point should be placed from the bottom of the window; thus, as with &lt;code&gt;scroll-down-aggressively&lt;/code&gt;, a larger value scrolls more aggressively.</source>
          <target state="translated">Del mismo modo, para desplazarse hacia arriba. El valor, &lt;var&gt;f&lt;/var&gt; , especifica qu&amp;eacute; tan lejos se debe colocar el punto desde la parte inferior de la ventana; as&amp;iacute;, al igual que con &lt;code&gt;scroll-down-aggressively&lt;/code&gt; , un valor mayor se desplaza de forma m&amp;aacute;s agresiva.</target>
        </trans-unit>
        <trans-unit id="9173a7576ab9406f8159ed0ad696d18cf5a5de55" translate="yes" xml:space="preserve">
          <source>Likewise, to move to the end of the buffer, use:</source>
          <target state="translated">De la misma manera,para moverse al final del buffer,use:</target>
        </trans-unit>
        <trans-unit id="607bc37fe36f1db5f0eedea396370eb624c4e6e9" translate="yes" xml:space="preserve">
          <source>Likewise, you can suppress the warning for a specific use of a variable &lt;var&gt;variable&lt;/var&gt; by conditionalizing it on a &lt;code&gt;boundp&lt;/code&gt; test:</source>
          <target state="translated">Del mismo modo, puede suprimir la advertencia para un uso espec&amp;iacute;fico de una variable &lt;var&gt;variable&lt;/var&gt; condicion&amp;aacute;ndola en una prueba de &lt;code&gt;boundp&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="6c62e4ab3dbe05f042adec9ffbc82e4cfec79087" translate="yes" xml:space="preserve">
          <source>Likewise, you can tell the compiler that a variable is defined using &lt;code&gt;defvar&lt;/code&gt; with no initial value. (Note that this marks the variable as special, i.e. dynamically bound, but only within the current lexical scope, or file if at top-level.) See &lt;a href=&quot;defining-variables#Defining-Variables&quot;&gt;Defining Variables&lt;/a&gt;.</source>
          <target state="translated">Del mismo modo, puede decirle al compilador que una variable se define utilizando &lt;code&gt;defvar&lt;/code&gt; sin valor inicial. (Tenga en cuenta que esto marca la variable como especial, es decir, unida din&amp;aacute;micamente, pero solo dentro del alcance l&amp;eacute;xico actual, o archivo si est&amp;aacute; en el nivel superior). Consulte &lt;a href=&quot;defining-variables#Defining-Variables&quot;&gt;Definici&amp;oacute;n de variables&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="a7c04c64ed3f2a9374590c76c50d3b7f1b18e3da" translate="yes" xml:space="preserve">
          <source>Limitations</source>
          <target state="translated">Limitations</target>
        </trans-unit>
        <trans-unit id="4b7070c9a5c61e5ad4b904c57e944895659357fd" translate="yes" xml:space="preserve">
          <source>Line 1 &amp;ldquo;factors out&amp;rdquo; the &lt;var&gt;expval&lt;/var&gt; binding with &lt;code&gt;and&lt;/code&gt; and &lt;var&gt;symbol&lt;/var&gt; (in this case, &lt;code&gt;num&lt;/code&gt;). On line 2, &lt;code&gt;or&lt;/code&gt; begins in the same way as before, but instead of binding different symbols, uses &lt;code&gt;let&lt;/code&gt; twice (lines 3-4) to bind the same symbol &lt;code&gt;spin&lt;/code&gt; in both sub-patterns. The value of &lt;code&gt;spin&lt;/code&gt; distinguishes the sub-patterns. The body form references both symbols (line 5).</source>
          <target state="translated">La l&amp;iacute;nea 1 &amp;ldquo;excluye&amp;rdquo; el enlace &lt;var&gt;expval&lt;/var&gt; con &lt;code&gt;and&lt;/code&gt; y el &lt;var&gt;symbol&lt;/var&gt; (en este caso, &lt;code&gt;num&lt;/code&gt; ). En la l&amp;iacute;nea 2, &lt;code&gt;or&lt;/code&gt; comienza de la misma manera que antes, pero en lugar de enlazar diferentes s&amp;iacute;mbolos, usa &lt;code&gt;let&lt;/code&gt; dos veces (l&amp;iacute;neas 3-4) para enlazar el mismo s&amp;iacute;mbolo &lt;code&gt;spin&lt;/code&gt; en ambos subpatrones. El valor del &lt;code&gt;spin&lt;/code&gt; distingue los subpatrones. La forma del cuerpo hace referencia a ambos s&amp;iacute;mbolos (l&amp;iacute;nea 5).</target>
        </trans-unit>
        <trans-unit id="ac3292c1d1364f8eb7cb1cb73de1b6c6819f007a" translate="yes" xml:space="preserve">
          <source>Line Height</source>
          <target state="translated">Altura de la línea</target>
        </trans-unit>
        <trans-unit id="d19fdad54534f671523b6ba91167c0a2af1211e8" translate="yes" xml:space="preserve">
          <source>Link to a file; &lt;var&gt;file&lt;/var&gt; is a string which specifies the name of the file to visit with &lt;code&gt;find-file&lt;/code&gt; when the user invokes this link.</source>
          <target state="translated">Enlace a un archivo; &lt;var&gt;file&lt;/var&gt; es una cadena que especifica el nombre del archivo a visitar con &lt;code&gt;find-file&lt;/code&gt; cuando el usuario invoca este enlace.</target>
        </trans-unit>
        <trans-unit id="22480f8e64b100d948600dc541fbe87fd12cf0ad" translate="yes" xml:space="preserve">
          <source>Link to a web page; &lt;var&gt;url&lt;/var&gt; is a string which specifies the</source>
          <target state="translated">Enlace a una p&amp;aacute;gina web; &lt;var&gt;url&lt;/var&gt; es una cadena que especifica el</target>
        </trans-unit>
        <trans-unit id="6196a47a6fade23ecdb0cf7553070cfc1f4b67e9" translate="yes" xml:space="preserve">
          <source>Link to an Emacs Lisp library file; &lt;var&gt;library&lt;/var&gt; is a string which specifies the library name.</source>
          <target state="translated">Enlace a un archivo de biblioteca Emacs Lisp; &lt;var&gt;library&lt;/var&gt; es una cadena que especifica el nombre de la biblioteca.</target>
        </trans-unit>
        <trans-unit id="bf66ba2266e555d89a7551e84cff8291754f5ac7" translate="yes" xml:space="preserve">
          <source>Link to an Info node; &lt;var&gt;info-node&lt;/var&gt; is a string which specifies the node name, as in &lt;code&gt;&quot;(emacs)Top&quot;&lt;/code&gt;. The link appears as &amp;lsquo;</source>
          <target state="translated">Enlace a un nodo de informaci&amp;oacute;n; &lt;var&gt;info-node&lt;/var&gt; es una cadena que especifica el nombre del nodo, como en &lt;code&gt;&quot;(emacs)Top&quot;&lt;/code&gt; . El enlace aparece como '</target>
        </trans-unit>
        <trans-unit id="0d9e752b2010ff1455dafc24361a10db156301e1" translate="yes" xml:space="preserve">
          <source>Link to another customization group. Invoking it creates a new customization buffer for &lt;var&gt;group&lt;/var&gt;.</source>
          <target state="translated">Enlace a otro grupo de personalizaci&amp;oacute;n. Invocarlo crea un nuevo b&amp;uacute;fer de personalizaci&amp;oacute;n para el &lt;var&gt;group&lt;/var&gt; .</target>
        </trans-unit>
        <trans-unit id="8c73b95e12ba7b48400412835847598d2b4297a9" translate="yes" xml:space="preserve">
          <source>Link to the commentary section of a library; &lt;var&gt;library&lt;/var&gt; is a string which specifies the library name. See &lt;a href=&quot;https://www.gnu.org/software/emacs/manual/html_node/elisp/Library-Headers.html#Library-Headers&quot;&gt;Library Headers&lt;/a&gt;.</source>
          <target state="translated">Enlace a la secci&amp;oacute;n de comentarios de una biblioteca; &lt;var&gt;library&lt;/var&gt; es una cadena que especifica el nombre de la biblioteca. Consulte &lt;a href=&quot;https://www.gnu.org/software/emacs/manual/html_node/elisp/Library-Headers.html#Library-Headers&quot;&gt;Encabezados de biblioteca&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="0af47038ac7d2a137e5fb0843704c0a217bb19fe" translate="yes" xml:space="preserve">
          <source>Link to the documentation of a function; &lt;var&gt;function&lt;/var&gt; is a string which specifies the name of the function to describe with &lt;code&gt;describe-function&lt;/code&gt; when the user invokes this link.</source>
          <target state="translated">Enlace a la documentaci&amp;oacute;n de una funci&amp;oacute;n; &lt;var&gt;function&lt;/var&gt; es una cadena que especifica el nombre de la funci&amp;oacute;n a describir con &lt;code&gt;describe-function&lt;/code&gt; cuando el usuario invoca este enlace.</target>
        </trans-unit>
        <trans-unit id="6004ab0c17b773b21124a13a049a164c20095e5e" translate="yes" xml:space="preserve">
          <source>Link to the documentation of a variable; &lt;var&gt;variable&lt;/var&gt; is a string which specifies the name of the variable to describe with &lt;code&gt;describe-variable&lt;/code&gt; when the user invokes this link.</source>
          <target state="translated">Enlace a la documentaci&amp;oacute;n de una variable; &lt;var&gt;variable&lt;/var&gt; es una cadena que especifica el nombre de la variable a describir con &lt;code&gt;describe-variable&lt;/code&gt; cuando el usuario invoca este enlace.</target>
        </trans-unit>
        <trans-unit id="11b92badcf27d4b637951157332f5903e3a51659" translate="yes" xml:space="preserve">
          <source>Links to the preceding and following nodes in the chain.</source>
          <target state="translated">Enlaces a los nodos anteriores y posteriores de la cadena.</target>
        </trans-unit>
        <trans-unit id="a7518b7d8d9c8b8ab73ff878b6f9268c622af85d" translate="yes" xml:space="preserve">
          <source>Lisp (LISt Processing language) was first developed in the late 1950s at the Massachusetts Institute of Technology for research in artificial intelligence. The great power of the Lisp language makes it ideal for other purposes as well, such as writing editing commands.</source>
          <target state="translated">El Lisp (Lenguaje de Procesamiento LISt)fue desarrollado por primera vez a finales de los años 50 en el Instituto Tecnológico de Massachusetts para la investigación de la inteligencia artificial.El gran poder del lenguaje Lisp lo hace ideal para otros propósitos también,como la escritura de comandos de edición.</target>
        </trans-unit>
        <trans-unit id="093033f3ad1baf1e960c639480ab203cf9eefb80" translate="yes" xml:space="preserve">
          <source>Lisp Data Types</source>
          <target state="translated">Tipos de datos de la lista</target>
        </trans-unit>
        <trans-unit id="070300a2d38e695ab5e6b29fde3619a0ca2a902e" translate="yes" xml:space="preserve">
          <source>Lisp History</source>
          <target state="translated">Historia del ceceo</target>
        </trans-unit>
        <trans-unit id="a95ae648eeb012f8070dcb15c34e598757cc1931" translate="yes" xml:space="preserve">
          <source>Lisp Macro Evaluation</source>
          <target state="translated">Evaluación de la macrocultura del ceceo</target>
        </trans-unit>
        <trans-unit id="0e410e687183103929a8880a76ed05ea40533c7d" translate="yes" xml:space="preserve">
          <source>Lisp code should use this function instead of &lt;code&gt;buffer-substring&lt;/code&gt;, &lt;code&gt;buffer-substring-no-properties&lt;/code&gt;, or &lt;code&gt;delete-and-extract-region&lt;/code&gt; when copying into user-accessible data structures such as the kill-ring, X clipboard, and registers. Major and minor modes can modify &lt;code&gt;filter-buffer-substring-function&lt;/code&gt; to alter such text as it is copied out of the buffer.</source>
          <target state="translated">El c&amp;oacute;digo Lisp debe usar esta funci&amp;oacute;n en lugar de &lt;code&gt;buffer-substring&lt;/code&gt; , &lt;code&gt;buffer-substring-no-properties&lt;/code&gt; o &lt;code&gt;delete-and-extract-region&lt;/code&gt; al copiar en estructuras de datos accesibles para el usuario como kill-ring, X portapapeles y registros. Los modos mayor y menor pueden modificar &lt;code&gt;filter-buffer-substring-function&lt;/code&gt; para alterar el texto a medida que se copia fuera del b&amp;uacute;fer.</target>
        </trans-unit>
        <trans-unit id="8fc5a9e95ef7885a0b7599ee4ecbaf851f92a696" translate="yes" xml:space="preserve">
          <source>Lisp expression:</source>
          <target state="translated">Expresión de ceceo:</target>
        </trans-unit>
        <trans-unit id="9a49e6726f59e36c724f79f5510e315b850a89a9" translate="yes" xml:space="preserve">
          <source>Lisp expressions for defining functions.</source>
          <target state="translated">Cifrar las expresiones para definir las funciones.</target>
        </trans-unit>
        <trans-unit id="04c1aa53f54116c8c2b6559a2f7db15e028716fc" translate="yes" xml:space="preserve">
          <source>Lisp functions are executable code, just like functions in other programming languages. In Lisp, unlike most languages, functions are also Lisp objects. A non-compiled function in Lisp is a lambda expression: that is, a list whose first element is the symbol &lt;code&gt;lambda&lt;/code&gt; (see &lt;a href=&quot;lambda-expressions#Lambda-Expressions&quot;&gt;Lambda Expressions&lt;/a&gt;).</source>
          <target state="translated">Las funciones Lisp son c&amp;oacute;digo ejecutable, al igual que funciones en otros lenguajes de programaci&amp;oacute;n. En Lisp, a diferencia de la mayor&amp;iacute;a de los lenguajes, las funciones tambi&amp;eacute;n son objetos Lisp. Una funci&amp;oacute;n no compilada en Lisp es una expresi&amp;oacute;n lambda: es decir, una lista cuyo primer elemento es el s&amp;iacute;mbolo &lt;code&gt;lambda&lt;/code&gt; (ver &lt;a href=&quot;lambda-expressions#Lambda-Expressions&quot;&gt;Expresiones Lambda&lt;/a&gt; ).</target>
        </trans-unit>
        <trans-unit id="48b47c25285835ef4229cdb4249b0b97f8b61318" translate="yes" xml:space="preserve">
          <source>Lisp functions vs. primitives; terminology.</source>
          <target state="translated">Funciones de ceceo vs.primitivas;terminología.</target>
        </trans-unit>
        <trans-unit id="b7f5a1d65c1925ee62d77c064437066c7e060879" translate="yes" xml:space="preserve">
          <source>Lisp is unlike many other languages in that its objects are &lt;em&gt;self-typing&lt;/em&gt;: the primitive type of each object is implicit in the object itself. For example, if an object is a vector, nothing can treat it as a number; Lisp knows it is a vector, not a number.</source>
          <target state="translated">Lisp es diferente a muchos otros lenguajes en que sus objetos son &lt;em&gt;autotipados&lt;/em&gt; : el tipo primitivo de cada objeto est&amp;aacute; impl&amp;iacute;cito en el objeto mismo. Por ejemplo, si un objeto es un vector, nada puede tratarlo como un n&amp;uacute;mero; Lisp sabe que es un vector, no un n&amp;uacute;mero.</target>
        </trans-unit>
        <trans-unit id="c1a44c55700efa37938155d19ec6cee2495bb14b" translate="yes" xml:space="preserve">
          <source>Lisp macro objects are usually defined with the built-in &lt;code&gt;defmacro&lt;/code&gt; macro, but any list that begins with &lt;code&gt;macro&lt;/code&gt; is a macro as far as Emacs is concerned. See &lt;a href=&quot;macros#Macros&quot;&gt;Macros&lt;/a&gt;, for an explanation of how to write a macro.</source>
          <target state="translated">Los objetos macro Lisp generalmente se definen con la macro &lt;code&gt;defmacro&lt;/code&gt; incorporada , pero cualquier lista que comience con &lt;code&gt;macro&lt;/code&gt; es una macro en lo que respecta a Emacs. Consulte &lt;a href=&quot;macros#Macros&quot;&gt;Macros&lt;/a&gt; para obtener una explicaci&amp;oacute;n de c&amp;oacute;mo escribir una macro.</target>
        </trans-unit>
        <trans-unit id="d9a34bc15715c9484c3c6d58e0cfbe37f7e5fc6d" translate="yes" xml:space="preserve">
          <source>Lisp objects can refer to themselves. Printing a self-referential object in the normal way would require an infinite amount of text, and the attempt could cause infinite recursion. Emacs detects such recursion and prints &amp;lsquo;</source>
          <target state="translated">Los objetos Lisp pueden referirse a s&amp;iacute; mismos. Imprimir un objeto autorreferencial de la forma normal requerir&amp;iacute;a una cantidad infinita de texto, y el intento podr&amp;iacute;a causar una recursividad infinita. Emacs detecta tal recursividad e imprime '</target>
        </trans-unit>
        <trans-unit id="38cb61435a14d84b4e828f9b902cd652a45bb04e" translate="yes" xml:space="preserve">
          <source>Lisp packages that load files of customizations, or any other sort of user profile, should obey this variable in deciding where to find it. They should load the profile of the user name found in this variable. If &lt;code&gt;init-file-user&lt;/code&gt; is &lt;code&gt;nil&lt;/code&gt;, meaning that the &amp;lsquo;</source>
          <target state="translated">Los paquetes Lisp que cargan archivos de personalizaciones, o cualquier otro tipo de perfil de usuario, deben obedecer esta variable al decidir d&amp;oacute;nde encontrarlo. Deben cargar el perfil del nombre de usuario que se encuentra en esta variable. Si &lt;code&gt;init-file-user&lt;/code&gt; es &lt;code&gt;nil&lt;/code&gt; , lo que significa que el '</target>
        </trans-unit>
        <trans-unit id="d96f39c620264ffeb78deb4cecb038146b82aebf" translate="yes" xml:space="preserve">
          <source>Lisp primitives are Lisp functions implemented in C. The details of interfacing the C function so that Lisp can call it are handled by a few C macros. The only way to really understand how to write new C code is to read the source, but we can explain some things here.</source>
          <target state="translated">Las primitivas de Lisp son funciones Lisp implementadas en C.Los detalles de la interfaz de la función C para que Lisp pueda llamarla se manejan con unas pocas macros C.La única forma de entender realmente cómo escribir nuevo código C es leer el código fuente,pero podemos explicar algunas cosas aquí.</target>
        </trans-unit>
        <trans-unit id="a7c856d0fff164a7f1d6af49754ec372f5744350" translate="yes" xml:space="preserve">
          <source>Lisp programs can also directly display a bitmap in the left or right fringe, by using a &lt;code&gt;display&lt;/code&gt; property for one of the characters appearing in the line (see &lt;a href=&quot;other-display-specs#Other-Display-Specs&quot;&gt;Other Display Specs&lt;/a&gt;). Such a display specification has the form</source>
          <target state="translated">Los programas Lisp tambi&amp;eacute;n pueden mostrar directamente un mapa de bits en el margen izquierdo o derecho, utilizando una propiedad de &lt;code&gt;display&lt;/code&gt; para uno de los caracteres que aparecen en la l&amp;iacute;nea (consulte &lt;a href=&quot;other-display-specs#Other-Display-Specs&quot;&gt;Otras especificaciones de visualizaci&amp;oacute;n&lt;/a&gt; ). Tal especificaci&amp;oacute;n de visualizaci&amp;oacute;n tiene la forma</target>
        </trans-unit>
        <trans-unit id="70a68430b5ee6f5c63e455e63af6968f951de310" translate="yes" xml:space="preserve">
          <source>Lisp programs can listen for connections by creating network servers. A network server is also represented by a kind of process object, but unlike a network connection, the network server never transfers data itself. When it receives a connection request, it creates a new network connection to represent the connection just made. (The network connection inherits certain information, including the process plist, from the server.) The network server then goes back to listening for more connection requests.</source>
          <target state="translated">Los programas Lisp pueden escuchar las conexiones creando servidores de red.Un servidor de red también está representado por una especie de objeto de proceso,pero a diferencia de una conexión de red,el servidor de red nunca transfiere datos por sí mismo.Cuando recibe una petición de conexión,crea una nueva conexión de red para representar la conexión que se acaba de realizar.(La conexión de red hereda del servidor cierta información,incluida la lista de procesos).El servidor de red vuelve entonces a escuchar más solicitudes de conexión.</target>
        </trans-unit>
        <trans-unit id="eb25bc2c53938daa0a10ceee8670460ef857ca05" translate="yes" xml:space="preserve">
          <source>Lisp programs can set &lt;code&gt;transient-mark-mode&lt;/code&gt; to non-&lt;code&gt;nil&lt;/code&gt;, non-&lt;code&gt;t&lt;/code&gt; values to enable Transient Mark mode temporarily. If the value is &lt;code&gt;lambda&lt;/code&gt;, Transient Mark mode is automatically turned off after any action, such as buffer modification, that would normally deactivate the mark. If the value is &lt;code&gt;(only&amp;nbsp;.&amp;nbsp;&lt;var&gt;oldval&lt;/var&gt;)&lt;/code&gt;, then &lt;code&gt;transient-mark-mode&lt;/code&gt; is set to the value &lt;var&gt;oldval&lt;/var&gt; after any subsequent command that moves point and is not shift-translated (see &lt;a href=&quot;key-sequence-input#Key-Sequence-Input&quot;&gt;shift-translation&lt;/a&gt;), or after any other action that would normally deactivate the mark.</source>
          <target state="translated">Los programas Lisp pueden establecer &lt;code&gt;transient-mark-mode&lt;/code&gt; en valores no &lt;code&gt;nil&lt;/code&gt; ni &lt;code&gt;t&lt;/code&gt; para habilitar el modo Transient Mark temporalmente. Si el valor es &lt;code&gt;lambda&lt;/code&gt; , el modo Transient Mark se desactiva autom&amp;aacute;ticamente despu&amp;eacute;s de cualquier acci&amp;oacute;n, como la modificaci&amp;oacute;n del b&amp;uacute;fer, que normalmente desactivar&amp;iacute;a la marca. Si el valor es &lt;code&gt;(only&amp;nbsp;.&amp;nbsp;&lt;var&gt;oldval&lt;/var&gt;)&lt;/code&gt; , entonces &lt;code&gt;transient-mark-mode&lt;/code&gt; se establece en el valor &lt;var&gt;oldval&lt;/var&gt; despu&amp;eacute;s de cualquier comando posterior que mueva el punto y no se traduzca por may&amp;uacute;sculas (ver &lt;a href=&quot;key-sequence-input#Key-Sequence-Input&quot;&gt;shift-translation&lt;/a&gt; ), o despu&amp;eacute;s de cualquier otra acci&amp;oacute;n que normalmente desactivar la marca.</target>
        </trans-unit>
        <trans-unit id="3aa64bd9d4a4db969c3909de23bb8e7a8d6e781d" translate="yes" xml:space="preserve">
          <source>Lisp programs can switch frames temporarily by calling the function &lt;code&gt;select-frame&lt;/code&gt;. This does not alter the window system&amp;rsquo;s concept of focus; rather, it escapes from the window manager&amp;rsquo;s control until that control is somehow reasserted.</source>
          <target state="translated">Los programas Lisp pueden cambiar de fotogramas temporalmente llamando a la funci&amp;oacute;n &lt;code&gt;select-frame&lt;/code&gt; . Esto no altera el concepto de enfoque del sistema de ventanas; m&amp;aacute;s bien, escapa del control del administrador de ventanas hasta que ese control se reafirma de alguna manera.</target>
        </trans-unit>
        <trans-unit id="e6266b236aa3407b98b48107324e801de224e6ad" translate="yes" xml:space="preserve">
          <source>Lisp programs must be prepared that user customizations may cause buffers to get displayed in an unexpected way. They should never assume in their subsequent behavior, that the buffer has been shown precisely the way they asked for in the &lt;var&gt;action&lt;/var&gt; argument of &lt;code&gt;display-buffer&lt;/code&gt;.</source>
          <target state="translated">Los programas Lisp deben estar preparados para que las personalizaciones del usuario puedan hacer que los b&amp;uacute;feres se muestren de forma inesperada. En su comportamiento posterior, nunca deben asumir que el b&amp;uacute;fer se ha mostrado precisamente de la forma que pidieron en el argumento de &lt;var&gt;action&lt;/var&gt; de &lt;code&gt;display-buffer&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="6612695190dbf10d24bd3737b61d06d8dee5099f" translate="yes" xml:space="preserve">
          <source>Lisp programs should &lt;em&gt;not&lt;/em&gt; rely on hash codes being preserved between Emacs sessions, as the implementation of the hash functions uses some details of the object storage that can change between sessions and between different architectures.</source>
          <target state="translated">Los programas Lisp &lt;em&gt;no&lt;/em&gt; deber&amp;iacute;an depender de que los c&amp;oacute;digos hash se conserven entre sesiones de Emacs, ya que la implementaci&amp;oacute;n de las funciones hash utiliza algunos detalles del almacenamiento de objetos que pueden cambiar entre sesiones y entre diferentes arquitecturas.</target>
        </trans-unit>
        <trans-unit id="430b9fa1fd5ba568a813aa706678d439215cf675" translate="yes" xml:space="preserve">
          <source>Lisp programs sometimes need to run a shell and give it a command that contains file names that were specified by the user. These programs ought to be able to support any valid file name. But the shell gives special treatment to certain characters, and if these characters occur in the file name, they will confuse the shell. To handle these characters, use the function &lt;code&gt;shell-quote-argument&lt;/code&gt;:</source>
          <target state="translated">Los programas Lisp a veces necesitan ejecutar un shell y darle un comando que contenga nombres de archivo que fueron especificados por el usuario. Estos programas deber&amp;iacute;an poder admitir cualquier nombre de archivo v&amp;aacute;lido. Pero el shell da un tratamiento especial a ciertos caracteres, y si estos caracteres aparecen en el nombre del archivo, confundir&amp;aacute;n al shell. Para manejar estos caracteres, use la funci&amp;oacute;n &lt;code&gt;shell-quote-argument&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="cfca57d0cb6702725bd47fe954b2d8aad7ece85e" translate="yes" xml:space="preserve">
          <source>Lisp representation for character display fonts.</source>
          <target state="translated">Representación de ceceo para las fuentes de visualización de caracteres.</target>
        </trans-unit>
        <trans-unit id="b7904939c664c0654e4069d00a64b5fe14da5051" translate="yes" xml:space="preserve">
          <source>List contains a loop</source>
          <target state="translated">La lista contiene un bucle</target>
        </trans-unit>
        <trans-unit id="3e55737f21b8d4e744eb6aa465bb3fe3e505747a" translate="yes" xml:space="preserve">
          <source>List of frame parameters for window systems.</source>
          <target state="translated">Lista de parámetros de los marcos de los sistemas de ventanas.</target>
        </trans-unit>
        <trans-unit id="c1aa03bb883bbb60cce2d139f90d3fdb47174dc3" translate="yes" xml:space="preserve">
          <source>List of frames that this physical monitor dominates (see below).</source>
          <target state="translated">Lista de fotogramas que domina este monitor físico (véase más abajo).</target>
        </trans-unit>
        <trans-unit id="5255158e8775a2ebbae84ae901ff359ddfa1d8dd" translate="yes" xml:space="preserve">
          <source>List of set bits in &lt;var&gt;len&lt;/var&gt; bytes. The bytes are taken in big endian order and the bits are numbered starting with &lt;code&gt;8 *
&lt;var&gt;len&lt;/var&gt; - 1&lt;/code&gt; and ending with zero. For example: &lt;code&gt;bits
2&lt;/code&gt; unpacks &lt;code&gt;#x28&lt;/code&gt;&lt;code&gt;#x1c&lt;/code&gt; to &lt;code&gt;(2 3 4 11 13)&lt;/code&gt; and &lt;code&gt;#x1c&lt;/code&gt;&lt;code&gt;#x28&lt;/code&gt; to &lt;code&gt;(3 5 10 11 12)&lt;/code&gt;.</source>
          <target state="translated">Lista de bits establecidos en &lt;var&gt;len&lt;/var&gt; bytes. Los bytes se toman en orden big endian y los bits se numeran comenzando con &lt;code&gt;8 * &lt;var&gt;len&lt;/var&gt; - 1&lt;/code&gt; y terminando con cero. Por ejemplo: los &lt;code&gt;bits 2&lt;/code&gt; desempaqueta &lt;code&gt;#x28&lt;/code&gt; &lt;code&gt;#x1c&lt;/code&gt; a &lt;code&gt;(2 3 4 11 13)&lt;/code&gt; y &lt;code&gt;#x1c&lt;/code&gt; &lt;code&gt;#x28&lt;/code&gt; a &lt;code&gt;(3 5 10 11 12)&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="b9849ac255593e53a8f74892aeb3c6148e2227ef" translate="yes" xml:space="preserve">
          <source>List of some standard error symbols.</source>
          <target state="translated">Lista de algunos símbolos de error estándar.</target>
        </trans-unit>
        <trans-unit id="dd46ad2b3ec4905179728f23e75392d7cd255398" translate="yes" xml:space="preserve">
          <source>List of some standard hook variables.</source>
          <target state="translated">Lista de algunas variables de gancho estándar.</target>
        </trans-unit>
        <trans-unit id="684686c9485926fd7bb605cb2b4b6557c3c1c8f3" translate="yes" xml:space="preserve">
          <source>List of some standard keymaps.</source>
          <target state="translated">Lista de algunos mapas de teclas estándar.</target>
        </trans-unit>
        <trans-unit id="57c9502a7d7d48fd4a86b45fefb2b163491c3ae1" translate="yes" xml:space="preserve">
          <source>Lists</source>
          <target state="translated">Lists</target>
        </trans-unit>
        <trans-unit id="20dd55e92ceb2d7f29cba2ee3c74cacc30b7d09c" translate="yes" xml:space="preserve">
          <source>Lists and Cons Cells</source>
          <target state="translated">Listas y Células de Contraste</target>
        </trans-unit>
        <trans-unit id="95e6ae4511e2076e5ec8acc94916a3a73b48a317" translate="yes" xml:space="preserve">
          <source>Lists are the most commonly-used sequences. A list can hold elements of any type, and its length can be easily changed by adding or removing elements. See the next subsection for more about lists.</source>
          <target state="translated">Las listas son las secuencias más utilizadas.Una lista puede contener elementos de cualquier tipo,y su longitud puede modificarse fácilmente añadiendo o quitando elementos.Véase la siguiente subsección para obtener más información sobre las listas.</target>
        </trans-unit>
        <trans-unit id="0deb648df977bd4b3bf1acb18dcca54edca072ea" translate="yes" xml:space="preserve">
          <source>Lists in Lisp are not a primitive data type; they are built up from &lt;em&gt;cons cells&lt;/em&gt; (see &lt;a href=&quot;cons-cell-type#Cons-Cell-Type&quot;&gt;Cons Cell Type&lt;/a&gt;). A cons cell is a data object that represents an ordered pair. That is, it has two slots, and each slot &lt;em&gt;holds&lt;/em&gt;, or &lt;em&gt;refers to&lt;/em&gt;, some Lisp object. One slot is known as the &lt;small&gt;CAR&lt;/small&gt;, and the other is known as the &lt;small&gt;CDR&lt;/small&gt;. (These names are traditional; see &lt;a href=&quot;cons-cell-type#Cons-Cell-Type&quot;&gt;Cons Cell Type&lt;/a&gt;.) &lt;small&gt;CDR&lt;/small&gt; is pronounced &amp;ldquo;could-er&amp;rdquo;.</source>
          <target state="translated">Las listas en Lisp no son un tipo de datos primitivo; se construyen a partir de &lt;em&gt;celdas de contras&lt;/em&gt; (ver &lt;a href=&quot;cons-cell-type#Cons-Cell-Type&quot;&gt;Tipo de celda de contras&lt;/a&gt; ). Una celda de contras es un objeto de datos que representa un par ordenado. Es decir, tiene dos ranuras y cada ranura &lt;em&gt;contiene&lt;/em&gt; , o &lt;em&gt;hace referencia a&lt;/em&gt; , alg&amp;uacute;n objeto Lisp. Una ranura se conoce como &lt;small&gt;CAR&lt;/small&gt; y la otra como &lt;small&gt;CDR&lt;/small&gt; . (Estos nombres son tradicionales; consulte &lt;a href=&quot;cons-cell-type#Cons-Cell-Type&quot;&gt;Tipo de c&amp;eacute;lula contras&lt;/a&gt; ). &lt;small&gt;CDR&lt;/small&gt; se pronuncia &quot;could-er&quot;.</target>
        </trans-unit>
        <trans-unit id="9099e49f5a4614e80a7fbc32b3b32e0c649d2edd" translate="yes" xml:space="preserve">
          <source>Lists, cons cells, and related functions.</source>
          <target state="translated">Listas,células cons y funciones relacionadas.</target>
        </trans-unit>
        <trans-unit id="9e7aaaa88e5ccb737ed89b621f362caa5d1c2f65" translate="yes" xml:space="preserve">
          <source>Lists, strings and the other array types also share important similarities. For example, all have a length &lt;var&gt;l&lt;/var&gt;, and all have elements which can be indexed from zero to &lt;var&gt;l&lt;/var&gt; minus one. Several functions, called sequence functions, accept any kind of sequence. For example, the function &lt;code&gt;length&lt;/code&gt; reports the length of any kind of sequence. See &lt;a href=&quot;sequences-arrays-vectors#Sequences-Arrays-Vectors&quot;&gt;Sequences Arrays Vectors&lt;/a&gt;.</source>
          <target state="translated">Las listas, cadenas y otros tipos de matrices tambi&amp;eacute;n comparten importantes similitudes. Por ejemplo, todos tienen una longitud &lt;var&gt;l&lt;/var&gt; y todos tienen elementos que se pueden indexar de cero a &lt;var&gt;l&lt;/var&gt; menos uno. Varias funciones, llamadas funciones de secuencia, aceptan cualquier tipo de secuencia. Por ejemplo, la funci&amp;oacute;n &lt;code&gt;length&lt;/code&gt; informa la longitud de cualquier tipo de secuencia. Consulte &lt;a href=&quot;sequences-arrays-vectors#Sequences-Arrays-Vectors&quot;&gt;Vectores de matrices de secuencias&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="c9ce88cec200da5730917cabea833810578d4d60" translate="yes" xml:space="preserve">
          <source>Lists, strings and vectors are called sequences. Certain functions act on any kind of sequence. The description of vectors is here as well.</source>
          <target state="translated">Las listas,cuerdas y vectores se llaman secuencias.Ciertas funciones actúan sobre cualquier tipo de secuencia.La descripción de los vectores también está aquí.</target>
        </trans-unit>
        <trans-unit id="44705636b815ace7e561a7446a758c35f2dedad2" translate="yes" xml:space="preserve">
          <source>Literal text</source>
          <target state="translated">Texto literal</target>
        </trans-unit>
        <trans-unit id="7561f82ae5b90f8428d596aba3af87144f94e678" translate="yes" xml:space="preserve">
          <source>Literal unprintable characters in strings.</source>
          <target state="translated">Literalmente caracteres inimprimibles en las cuerdas.</target>
        </trans-unit>
        <trans-unit id="c7ba7dcf662374aafe652b03d75cb8f6024519d9" translate="yes" xml:space="preserve">
          <source>Literals</source>
          <target state="translated">Literals</target>
        </trans-unit>
        <trans-unit id="bc6cc4663c2f684119734fdc2abb9c21336632c5" translate="yes" xml:space="preserve">
          <source>Living With a Weak Parser</source>
          <target state="translated">Vivir con un parser débil</target>
        </trans-unit>
        <trans-unit id="7a611ffe36f69e8659eea0f180752be7e04730b8" translate="yes" xml:space="preserve">
          <source>Load Suffixes</source>
          <target state="translated">Sufijos de carga</target>
        </trans-unit>
        <trans-unit id="f9ad7c8d6bf23f4bd156133162b128490e0c6198" translate="yes" xml:space="preserve">
          <source>Load file &lt;var&gt;file&lt;/var&gt; (a string) before displaying this customization item (see &lt;a href=&quot;loading#Loading&quot;&gt;Loading&lt;/a&gt;). Loading is done with &lt;code&gt;load&lt;/code&gt;, and only if the file is not already loaded.</source>
          <target state="translated">Cargue el &lt;var&gt;file&lt;/var&gt; (una cadena) antes de mostrar este elemento de personalizaci&amp;oacute;n (consulte &lt;a href=&quot;loading#Loading&quot;&gt;Carga&lt;/a&gt; ). La carga se realiza con &lt;code&gt;load&lt;/code&gt; , y solo si el archivo a&amp;uacute;n no est&amp;aacute; cargado.</target>
        </trans-unit>
        <trans-unit id="1bd4cd17a8147cc5cd6d3f97fd6644f944793104" translate="yes" xml:space="preserve">
          <source>Load the files with</source>
          <target state="translated">Cargar los archivos con</target>
        </trans-unit>
        <trans-unit id="883657b0663d05cb81a7f624698cafeec52f6b73" translate="yes" xml:space="preserve">
          <source>Loadable modules in Emacs are enabled by using the</source>
          <target state="translated">Los módulos cargables en Emacs se activan mediante el uso de la</target>
        </trans-unit>
        <trans-unit id="8f26c6520d61588a9757bc182157c4497628e871" translate="yes" xml:space="preserve">
          <source>Loading</source>
          <target state="translated">Loading</target>
        </trans-unit>
        <trans-unit id="0f84e4833a47ae5b5d6c641ba5839ef1259c6482" translate="yes" xml:space="preserve">
          <source>Loading Non-ASCII Characters</source>
          <target state="translated">Cargando personajes no ASCII</target>
        </trans-unit>
        <trans-unit id="a881ef8a5e395de040b2cde053e1fa0f6d614659" translate="yes" xml:space="preserve">
          <source>Loading a file of Lisp code means bringing its contents into the Lisp environment in the form of Lisp objects. Emacs finds and opens the file, reads the text, evaluates each form, and then closes the file. Such a file is also called a &lt;em&gt;Lisp library&lt;/em&gt;.</source>
          <target state="translated">Cargar un archivo de c&amp;oacute;digo Lisp significa llevar su contenido al entorno Lisp en forma de objetos Lisp. Emacs busca y abre el archivo, lee el texto, eval&amp;uacute;a cada formulario y luego cierra el archivo. Este archivo tambi&amp;eacute;n se denomina &lt;em&gt;biblioteca Lisp&lt;/em&gt; .</target>
        </trans-unit>
        <trans-unit id="904a9f782b30e1a58668b2173bc0b744a768d9fa" translate="yes" xml:space="preserve">
          <source>Loading a library if it isn&amp;rsquo;t already loaded.</source>
          <target state="translated">Cargando una biblioteca si a&amp;uacute;n no est&amp;aacute; cargada.</target>
        </trans-unit>
        <trans-unit id="963c158ee7d6cc3ddeaacac290e282697c29cc98" translate="yes" xml:space="preserve">
          <source>Loading foo...</source>
          <target state="translated">Cargando foo...</target>
        </trans-unit>
        <trans-unit id="90227054d0c4071b95dc470817610b24dd4cae6b" translate="yes" xml:space="preserve">
          <source>Loading foo...done</source>
          <target state="translated">Cargando foo...hecho</target>
        </trans-unit>
        <trans-unit id="ff5148d6cff2251fbb44fa24ac71e87831f6949a" translate="yes" xml:space="preserve">
          <source>Local Variables</source>
          <target state="translated">Variables locales</target>
        </trans-unit>
        <trans-unit id="1c80e104177d7b78185bb1b8711d3cbd2a0da9a4" translate="yes" xml:space="preserve">
          <source>Local Variables in Macro Expansions</source>
          <target state="translated">Variables locales en macroexpansiones</target>
        </trans-unit>
        <trans-unit id="81e25eae5238b0d1e80b489db0e70db5d36fa19f" translate="yes" xml:space="preserve">
          <source>Local variable bindings in the expansion require special care.</source>
          <target state="translated">Las fijaciones variables locales en la expansión requieren un cuidado especial.</target>
        </trans-unit>
        <trans-unit id="779b54ae3ad4227df0c4817bd5cf967d7971b9a8" translate="yes" xml:space="preserve">
          <source>Local variables common for remote connections.</source>
          <target state="translated">Las variables locales son comunes para las conexiones remotas.</target>
        </trans-unit>
        <trans-unit id="7f188a87ee03e71d60616a4c96885d1c0b74f9c8" translate="yes" xml:space="preserve">
          <source>Local variables common to all files in a directory.</source>
          <target state="translated">Variables locales comunes a todos los archivos de un directorio.</target>
        </trans-unit>
        <trans-unit id="a222060e32289bf6910ac4a07a10733be500bd99" translate="yes" xml:space="preserve">
          <source>Locales</source>
          <target state="translated">Locales</target>
        </trans-unit>
        <trans-unit id="c40c47188d80c7c01d1f14ab9115e42654014c62" translate="yes" xml:space="preserve">
          <source>Locating Files in Standard Places</source>
          <target state="translated">Localización de archivos en lugares estándar</target>
        </trans-unit>
        <trans-unit id="ca96bd07c69909b5097860baf11cb9da67a0b932" translate="yes" xml:space="preserve">
          <source>Locking and unlocking files, to prevent simultaneous editing by two people.</source>
          <target state="translated">Bloqueo y desbloqueo de archivos,para evitar la edición simultánea por dos personas.</target>
        </trans-unit>
        <trans-unit id="19b48b850743ec74aaf2ba7f74397470f9322fb8" translate="yes" xml:space="preserve">
          <source>Logging Messages in *Messages*</source>
          <target state="translated">Registro de mensajes en *Mensajes*</target>
        </trans-unit>
        <trans-unit id="f992fcdf326b78d500b906f947284b63f7afb915" translate="yes" xml:space="preserve">
          <source>Logical and, or, not, shifting.</source>
          <target state="translated">Lógico y,o,no,cambiante.</target>
        </trans-unit>
        <trans-unit id="5d5f34745d0c565923c156fa463ee88aafc88956" translate="yes" xml:space="preserve">
          <source>Long description</source>
          <target state="translated">Larga descripción</target>
        </trans-unit>
        <trans-unit id="1601ce5c57967aca4f1582458112c97ae2082434" translate="yes" xml:space="preserve">
          <source>Looking Up Fonts</source>
          <target state="translated">Buscando fuentes</target>
        </trans-unit>
        <trans-unit id="d63629c4a0bb6a63de031bf229ac03c609809d09" translate="yes" xml:space="preserve">
          <source>Looking Up and Expanding Abbreviations</source>
          <target state="translated">Mirando hacia arriba y ampliando las abreviaturas</target>
        </trans-unit>
        <trans-unit id="bc0e6625c124c4eb5bd0fcd56ac755373c3fb4f2" translate="yes" xml:space="preserve">
          <source>Looking at the properties of one character.</source>
          <target state="translated">Mirando las propiedades de un personaje.</target>
        </trans-unit>
        <trans-unit id="178121740f45b5d6e7facf9d96018d909c21354f" translate="yes" xml:space="preserve">
          <source>Looking through all keymaps, for printing help.</source>
          <target state="translated">Buscando en todos los mapas de teclas,para la ayuda de la impresión.</target>
        </trans-unit>
        <trans-unit id="851bbb5519ca80dce271e99e2231072e5a4a3479" translate="yes" xml:space="preserve">
          <source>Looking up the names of available fonts and information about them.</source>
          <target state="translated">Buscando los nombres de las fuentes disponibles e información sobre ellas.</target>
        </trans-unit>
        <trans-unit id="68ff0bd1cbaecfae7d37b0d97386effbf3fba27d" translate="yes" xml:space="preserve">
          <source>Lookup in a hash table is extremely fast for large tables&amp;mdash;in fact, the time required is essentially &lt;em&gt;independent&lt;/em&gt; of how many elements are stored in the table. For smaller tables (a few tens of elements) alists may still be faster because hash tables have a more-or-less constant overhead.</source>
          <target state="translated">La b&amp;uacute;squeda en una tabla hash es extremadamente r&amp;aacute;pida para tablas grandes; de hecho, el tiempo requerido es esencialmente &lt;em&gt;independiente&lt;/em&gt; de cu&amp;aacute;ntos elementos se almacenan en la tabla. Para tablas m&amp;aacute;s peque&amp;ntilde;as (algunas decenas de elementos), las listas pueden ser a&amp;uacute;n m&amp;aacute;s r&amp;aacute;pidas porque las tablas hash tienen una sobrecarga m&amp;aacute;s o menos constante.</target>
        </trans-unit>
        <trans-unit id="f5253ec82559052e87ceaff557957647ac4e6a68" translate="yes" xml:space="preserve">
          <source>Low-Level Font Representation</source>
          <target state="translated">Representación de fuentes de bajo nivel</target>
        </trans-unit>
        <trans-unit id="323f212d3828fcc314985cd1386476951f05a2ee" translate="yes" xml:space="preserve">
          <source>Low-Level Kill Ring</source>
          <target state="translated">Anillo asesino de bajo nivel</target>
        </trans-unit>
        <trans-unit id="cd3b0d6e2fa4c08068b3e57e488ba7e247c660c5" translate="yes" xml:space="preserve">
          <source>Low-Level Network Access</source>
          <target state="translated">Acceso a la red de bajo nivel</target>
        </trans-unit>
        <trans-unit id="cbddb05b874ab89fa507c4d8957fdf31bf1114b7" translate="yes" xml:space="preserve">
          <source>Low-Level Parsing</source>
          <target state="translated">Análisis de bajo nivel</target>
        </trans-unit>
        <trans-unit id="4259b3253a806353d7c8d6ae41622a4465d4b63c" translate="yes" xml:space="preserve">
          <source>Low-level functions for completing strings.</source>
          <target state="translated">Funciones de bajo nivel para completar las cuerdas.</target>
        </trans-unit>
        <trans-unit id="e3fc395679fd313e5a3b121bd0f61b1e24d51f49" translate="yes" xml:space="preserve">
          <source>Lower-level but more general function to create connections and servers.</source>
          <target state="translated">Función de nivel inferior pero más general para crear conexiones y servidores.</target>
        </trans-unit>
        <trans-unit id="412965d373e39e0acf2e9d34874530d49b3e8f45" translate="yes" xml:space="preserve">
          <source>Lower-level subroutines that they use.</source>
          <target state="translated">Subrutinas de nivel inferior que utilizan.</target>
        </trans-unit>
        <trans-unit id="c63ae6dd4fc9f9dda66970e827d13f7c73fe841c" translate="yes" xml:space="preserve">
          <source>M</source>
          <target state="translated">M</target>
        </trans-unit>
        <trans-unit id="1380c1040fe5f22f86cfa0fff612c7bb977dc760" translate="yes" xml:space="preserve">
          <source>M-</source>
          <target state="translated">M-</target>
        </trans-unit>
        <trans-unit id="37a5c39dff07a52dd3087c214ce1f8d1b29f0a8c" translate="yes" xml:space="preserve">
          <source>M-&amp;lt;</source>
          <target state="translated">M-&amp;lt;</target>
        </trans-unit>
        <trans-unit id="f56099d279d3bbbe13433ab2b41f59ecda17c1b5" translate="yes" xml:space="preserve">
          <source>M--</source>
          <target state="translated">M--</target>
        </trans-unit>
        <trans-unit id="3c8556ad1d538e0b24776b2eb4aadd97384f92be" translate="yes" xml:space="preserve">
          <source>M-.</source>
          <target state="translated">M-.</target>
        </trans-unit>
        <trans-unit id="195ce7fc591804e0719a61c0fa3a7301aae4a144" translate="yes" xml:space="preserve">
          <source>M-:</source>
          <target state="translated">M-:</target>
        </trans-unit>
        <trans-unit id="d63f0fe93faad24b66a76a47ccdc11cdad6f0669" translate="yes" xml:space="preserve">
          <source>M-: &lt;var&gt;exp&lt;/var&gt;RET</source>
          <target state="translated">M-: &lt;var&gt;exp&lt;/var&gt; RET</target>
        </trans-unit>
        <trans-unit id="306f4c5a0e32d8e206ce9f2acecfdbbd30b93ebd" translate="yes" xml:space="preserve">
          <source>M-A</source>
          <target state="translated">M-A</target>
        </trans-unit>
        <trans-unit id="6951aed8ad5e7255f081050661207da69a62bceb" translate="yes" xml:space="preserve">
          <source>M-F1</source>
          <target state="translated">M-F1</target>
        </trans-unit>
        <trans-unit id="d5deac9a11e75cdf2221fc4ccab2ecbdf3ce7f5e" translate="yes" xml:space="preserve">
          <source>M-O</source>
          <target state="translated">M-O</target>
        </trans-unit>
        <trans-unit id="582c231510f999e4090021d4c4d24dd9d1083ddc" translate="yes" xml:space="preserve">
          <source>M-TAB</source>
          <target state="translated">M-TAB</target>
        </trans-unit>
        <trans-unit id="6e83342732a657a8dfe6c872ef3fa40bd7ab6c1d" translate="yes" xml:space="preserve">
          <source>M-[</source>
          <target state="translated">M-[</target>
        </trans-unit>
        <trans-unit id="c32ec53effd66388f8d3ebba5bbdc052dda00483" translate="yes" xml:space="preserve">
          <source>M-a</source>
          <target state="translated">M-a</target>
        </trans-unit>
        <trans-unit id="dfec75d824ab931885b10c2deb8b602ddf385540" translate="yes" xml:space="preserve">
          <source>M-b</source>
          <target state="translated">M-b</target>
        </trans-unit>
        <trans-unit id="92eda3bf541ac9f8576ded598bec375af4abc3bd" translate="yes" xml:space="preserve">
          <source>M-end</source>
          <target state="translated">M-end</target>
        </trans-unit>
        <trans-unit id="980a6233a9b06694b777bb282affe943e0afc2da" translate="yes" xml:space="preserve">
          <source>M-g</source>
          <target state="translated">M-g</target>
        </trans-unit>
        <trans-unit id="52706036e0d1667ecb93c7d036d3d039cba1682a" translate="yes" xml:space="preserve">
          <source>M-n</source>
          <target state="translated">M-n</target>
        </trans-unit>
        <trans-unit id="c7cf6ebaeff525a4a38321125032420c3882f5a3" translate="yes" xml:space="preserve">
          <source>M-o</source>
          <target state="translated">M-o</target>
        </trans-unit>
        <trans-unit id="15f62577eedb593ecdad3ec32390144de3a4748e" translate="yes" xml:space="preserve">
          <source>M-o M-o</source>
          <target state="translated">M-o M-o</target>
        </trans-unit>
        <trans-unit id="ded2b381f768b0426ee02fc11e7b1ea526d86382" translate="yes" xml:space="preserve">
          <source>M-p</source>
          <target state="translated">M-p</target>
        </trans-unit>
        <trans-unit id="0f8046567a7777233033e7c62fcbaaf077eb077a" translate="yes" xml:space="preserve">
          <source>M-r</source>
          <target state="translated">M-r</target>
        </trans-unit>
        <trans-unit id="0006025ee1ee308621c9836f080cfbad730b00dd" translate="yes" xml:space="preserve">
          <source>M-s</source>
          <target state="translated">M-s</target>
        </trans-unit>
        <trans-unit id="e2dbd97a24cfd42feafe4155928e5e36e05f30f3" translate="yes" xml:space="preserve">
          <source>M-v</source>
          <target state="translated">M-v</target>
        </trans-unit>
        <trans-unit id="5516e58102890d870825312fe7edb083af235de4" translate="yes" xml:space="preserve">
          <source>M-x</source>
          <target state="translated">M-x</target>
        </trans-unit>
        <trans-unit id="e96ee2840300f270b45095c2f0ec40521a00cde5" translate="yes" xml:space="preserve">
          <source>M-x &lt;var&gt;command&lt;/var&gt;</source>
          <target state="translated">&lt;var&gt;command&lt;/var&gt; mx</target>
        </trans-unit>
        <trans-unit id="30b1c3d10bd4ea36dfe161af71f9b59cff94dfbf" translate="yes" xml:space="preserve">
          <source>M-x &lt;var&gt;command&lt;/var&gt;RET</source>
          <target state="translated">&lt;var&gt;command&lt;/var&gt; Mx RET</target>
        </trans-unit>
        <trans-unit id="c8f918be9ef0d86eff9e8b262b173a76afb5d823" translate="yes" xml:space="preserve">
          <source>M-x apropos RET x-pointer RET</source>
          <target state="translated">M-x a propósito de RET x-pointer RET</target>
        </trans-unit>
        <trans-unit id="19d036c0bdece7df51bbb22b25a57a912bb781fc" translate="yes" xml:space="preserve">
          <source>M-x customize</source>
          <target state="translated">M-x personalizar</target>
        </trans-unit>
        <trans-unit id="350cf2e68d92268174ae9d7178734cce54adaa8c" translate="yes" xml:space="preserve">
          <source>M-x describe-categories RET</source>
          <target state="translated">M-x describe-categorías RET</target>
        </trans-unit>
        <trans-unit id="28a7266291890a298f219fa24bf612c876e68a3a" translate="yes" xml:space="preserve">
          <source>M-x dired-default-directory-on-left</source>
          <target state="translated">M-x dired-default-directory-on-left</target>
        </trans-unit>
        <trans-unit id="d0dbe2e240aeb6f1a78c981c88c230cc06b9fce7" translate="yes" xml:space="preserve">
          <source>M-x edebug-all-defs</source>
          <target state="translated">M-x edebug-all-defs</target>
        </trans-unit>
        <trans-unit id="c71a2298fbf3e6b350d972a5f6758ef0c7f37945" translate="yes" xml:space="preserve">
          <source>M-x edebug-all-forms</source>
          <target state="translated">M-x edebug-all-forms</target>
        </trans-unit>
        <trans-unit id="66031655733aef9ceba93288111a34d690630332" translate="yes" xml:space="preserve">
          <source>M-x edebug-backtrace-hide-instrumentation</source>
          <target state="translated">M-x edebug-backtrace-instrumentación de cuero</target>
        </trans-unit>
        <trans-unit id="f849db42cc80a644b891cceb796496aea5a33446" translate="yes" xml:space="preserve">
          <source>M-x edebug-backtrace-show-instrumentation</source>
          <target state="translated">M-x edebug-backtrace-show-instrumentación</target>
        </trans-unit>
        <trans-unit id="0e0239d280915da82047b3562e0edc1ef7e13f61" translate="yes" xml:space="preserve">
          <source>M-x edebug-eval-top-level-form</source>
          <target state="translated">M-x edebug-eval-top-level-form</target>
        </trans-unit>
        <trans-unit id="95fa4b4069fcd95b6d5ac0204ea4c9cff0ee6f75" translate="yes" xml:space="preserve">
          <source>M-x edit-tab-stops</source>
          <target state="translated">M-x edit-tab-stops</target>
        </trans-unit>
        <trans-unit id="924625b2d7b939bdd69c369a8e0e7552d4621132" translate="yes" xml:space="preserve">
          <source>M-x list-colors-display</source>
          <target state="translated">M-x lista de colores de la pantalla</target>
        </trans-unit>
        <trans-unit id="2d76ea9e63fcbb859b33f48edd7feb794a1730b1" translate="yes" xml:space="preserve">
          <source>M-x list-processes</source>
          <target state="translated">Procesos de la lista M-x</target>
        </trans-unit>
        <trans-unit id="84edc9f7052f2c9a7f036d7890685dfe8db762ec" translate="yes" xml:space="preserve">
          <source>M-x load-library RET package-x RET</source>
          <target state="translated">M-x carga-biblioteca paquete RET-x RET</target>
        </trans-unit>
        <trans-unit id="b609619759aa9b92d26776cb6f14ab4bcfcc31de" translate="yes" xml:space="preserve">
          <source>M-x profiler-&amp;hellip;</source>
          <target state="translated">Mx profiler-&amp;hellip;</target>
        </trans-unit>
        <trans-unit id="0773bdccb110b28fb0a67898b66d8dd11444e9cc" translate="yes" xml:space="preserve">
          <source>M-x profiler-report</source>
          <target state="translated">Informe del perfilador M-x</target>
        </trans-unit>
        <trans-unit id="4f21aa5941ccf75086060a4caa6ef135d1f402a8" translate="yes" xml:space="preserve">
          <source>M-x profiler-start</source>
          <target state="translated">M-x profiler-start</target>
        </trans-unit>
        <trans-unit id="7f9fd75200c3ba11f87c5df3770346f3beaa6c06" translate="yes" xml:space="preserve">
          <source>M-x profiler-stop</source>
          <target state="translated">M-x profiler-stop</target>
        </trans-unit>
        <trans-unit id="e1f1559513ee5a73bed6212288039c357856e5b7" translate="yes" xml:space="preserve">
          <source>M-x python-mode</source>
          <target state="translated">Modo pitón M-x</target>
        </trans-unit>
        <trans-unit id="9a178593a35bbea7f02403c42d651edd7a1bdd3d" translate="yes" xml:space="preserve">
          <source>M-x re-builder</source>
          <target state="translated">Reconstructor M-x</target>
        </trans-unit>
        <trans-unit id="02844767c038cdd2dda139c1d2eab250404388db" translate="yes" xml:space="preserve">
          <source>M-x report-emacs-bug</source>
          <target state="translated">M-x report-emacs-bug</target>
        </trans-unit>
        <trans-unit id="4a8d44402484cf1af704bb5188c0b2f67fd9deae" translate="yes" xml:space="preserve">
          <source>M-x serial-term</source>
          <target state="translated">M-x plazo de serie</target>
        </trans-unit>
        <trans-unit id="d262f66141e61698a64505a1167b86f852cd6537" translate="yes" xml:space="preserve">
          <source>M-x set-visited-file-name</source>
          <target state="translated">M-x set-visited-file-name</target>
        </trans-unit>
        <trans-unit id="ddd4cde942039a43aa69d7aaf7874a8689013014" translate="yes" xml:space="preserve">
          <source>M-x shell</source>
          <target state="translated">La cáscara de M-x</target>
        </trans-unit>
        <trans-unit id="aeb29959992cb9268370a1bd309d2ce9f465185c" translate="yes" xml:space="preserve">
          <source>M-x testcover-mark-all</source>
          <target state="translated">M-x testcover-mark-all</target>
        </trans-unit>
        <trans-unit id="e8f70ba057d5e0dc5100fc76829c8002a8f06257" translate="yes" xml:space="preserve">
          <source>M-x testcover-next-mark</source>
          <target state="translated">M-x testcover-nextmark</target>
        </trans-unit>
        <trans-unit id="91f5f461f2c3a31e68b3789ab862a2b579739b85" translate="yes" xml:space="preserve">
          <source>M-x testcover-start RET&lt;var&gt;file&lt;/var&gt;RET</source>
          <target state="translated">Mx testcover-start RET &lt;var&gt;file&lt;/var&gt; RET</target>
        </trans-unit>
        <trans-unit id="0cb1249115b25aa2690a25b8910733c67b4a92a4" translate="yes" xml:space="preserve">
          <source>M-x untabify</source>
          <target state="translated">M-x untabify</target>
        </trans-unit>
        <trans-unit id="8938bda20b679e9984362cfe3b0025e2957609de" translate="yes" xml:space="preserve">
          <source>M-x update-directory-autoloads</source>
          <target state="translated">M-x update-directory-autoloads</target>
        </trans-unit>
        <trans-unit id="17a3a65ded9cf97168d2d48abac758964baf3233" translate="yes" xml:space="preserve">
          <source>M-x update-file-autoloads</source>
          <target state="translated">M-x update-file-autoloads</target>
        </trans-unit>
        <trans-unit id="157b9065ca9092b93a2cd86b2065b6f97cb3c423" translate="yes" xml:space="preserve">
          <source>M-x widget-browse RET binary-tree-of-string RET</source>
          <target state="translated">M-x widget-browse RET binario-árbol de cuerdas RET</target>
        </trans-unit>
        <trans-unit id="3aa424326e8c65a4310c522189aff3bdb49730f9" translate="yes" xml:space="preserve">
          <source>M-xelp-instrument-listRET nil RET</source>
          <target state="translated">M-xelp-instrumento-lista RET nil RET</target>
        </trans-unit>
        <trans-unit id="d61a0439c16b301031a2c72fbbf40aec0781473a" translate="yes" xml:space="preserve">
          <source>M-xelp-results</source>
          <target state="translated">M-xelp-results</target>
        </trans-unit>
        <trans-unit id="4cb98f7867f1180986c1b84ef1785ff0b2c4dc15" translate="yes" xml:space="preserve">
          <source>M-xlist-buffers</source>
          <target state="translated">M-xlist-buffers</target>
        </trans-unit>
        <trans-unit id="05b684cd2cc4407a760fc4776a9afa8ac8eaddb7" translate="yes" xml:space="preserve">
          <source>M-xlist-tags</source>
          <target state="translated">M-xlist-tags</target>
        </trans-unit>
        <trans-unit id="7555a33395fef6db20d121fb58c3221aa124e48c" translate="yes" xml:space="preserve">
          <source>M-y</source>
          <target state="translated">M-y</target>
        </trans-unit>
        <trans-unit id="db42242da8c9daf4dc32a3e8f6a8c77ab461abee" translate="yes" xml:space="preserve">
          <source>MENU-BAR</source>
          <target state="translated">MENU-BAR</target>
        </trans-unit>
        <trans-unit id="40bb78ac4a8f75b73057a2a259dcfa335c88dad4" translate="yes" xml:space="preserve">
          <source>META</source>
          <target state="translated">META</target>
        </trans-unit>
        <trans-unit id="2d4aa5a5271bf55bf5139dda546f0f30ba06a6bd" translate="yes" xml:space="preserve">
          <source>MIME</source>
          <target state="translated">MIME</target>
        </trans-unit>
        <trans-unit id="240ac4da20e27f25d9defe42a63eca4461adbce9" translate="yes" xml:space="preserve">
          <source>MS-DOS and MS-Windows systems usually lack the standard Unix program &lt;code&gt;ls&lt;/code&gt;, so this function emulates the standard Unix program &lt;code&gt;ls&lt;/code&gt; with Lisp code.</source>
          <target state="translated">Los sistemas MS-DOS y MS-Windows generalmente carecen del programa Unix est&amp;aacute;ndar &lt;code&gt;ls&lt;/code&gt; , por lo que esta funci&amp;oacute;n emula el programa Unix est&amp;aacute;ndar &lt;code&gt;ls&lt;/code&gt; con c&amp;oacute;digo Lisp.</target>
        </trans-unit>
        <trans-unit id="a6a56e5df064567806bfd2d02ec60d53d177da70" translate="yes" xml:space="preserve">
          <source>MS-DOS doesn&amp;rsquo;t support asynchronous subprocesses, so this option doesn&amp;rsquo;t work there.</source>
          <target state="translated">MS-DOS no admite subprocesos asincr&amp;oacute;nicos, por lo que esta opci&amp;oacute;n no funciona all&amp;iacute;.</target>
        </trans-unit>
        <trans-unit id="660bf78961f4ec6bd8bd8b37a3b0b2769db2b14a" translate="yes" xml:space="preserve">
          <source>Macro</source>
          <target state="translated">Macro</target>
        </trans-unit>
        <trans-unit id="0d2da2eb949e2df3a96a434a98613935cdfa18a4" translate="yes" xml:space="preserve">
          <source>Macro Type</source>
          <target state="translated">Tipo de macro</target>
        </trans-unit>
        <trans-unit id="3764e4ae50932da915ec9a84fd2ba1b1c33188ce" translate="yes" xml:space="preserve">
          <source>Macro calls (see &lt;a href=&quot;macros#Macros&quot;&gt;Macros&lt;/a&gt;).</source>
          <target state="translated">Llamadas a macros (ver &lt;a href=&quot;macros#Macros&quot;&gt;Macros&lt;/a&gt; ).</target>
        </trans-unit>
        <trans-unit id="730c77b761075cf87c04f675fec25c96f12254c7" translate="yes" xml:space="preserve">
          <source>Macro expansion can have counterintuitive consequences. This section describes some important consequences that can lead to trouble, and rules to follow to avoid trouble.</source>
          <target state="translated">La macroexpansión puede tener consecuencias contrarias a la intuición.Esta sección describe algunas consecuencias importantes que pueden llevar a problemas,y las reglas a seguir para evitarlos.</target>
        </trans-unit>
        <trans-unit id="7c8148b5f3e72ae81e30a87c1414a699978cee33" translate="yes" xml:space="preserve">
          <source>Macro: &lt;strong&gt;1value&lt;/strong&gt;&lt;em&gt;form&lt;/em&gt;</source>
          <target state="translated">Macro: &lt;strong&gt;1value &lt;/strong&gt;&lt;em&gt;forma&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="f625904d011437c920c24217d1112932e75fdede" translate="yes" xml:space="preserve">
          <source>Macro: &lt;strong&gt;EMACS_LIMB_MAX&lt;/strong&gt;</source>
          <target state="translated">Macro: &lt;strong&gt;EMACS_LIMB_MAX&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="f63e91ed8761158e2824094f3c035978e33f0b75" translate="yes" xml:space="preserve">
          <source>Macro: &lt;strong&gt;add-function&lt;/strong&gt;&lt;em&gt;where place function &amp;amp;optional props&lt;/em&gt;</source>
          <target state="translated">Macro: &lt;strong&gt;agregar funci&amp;oacute;n &lt;/strong&gt;&lt;em&gt;donde colocar la funci&amp;oacute;n y los accesorios opcionales&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="5429d225c6285d485886a63d9a654b44fd9af85a" translate="yes" xml:space="preserve">
          <source>Macro: &lt;strong&gt;cl-defgeneric&lt;/strong&gt;&lt;em&gt;name arguments [documentation] [options-and-methods&amp;hellip;] &amp;amp;rest body&lt;/em&gt;</source>
          <target state="translated">Macro: &lt;strong&gt;cl-defgeneric&lt;/strong&gt;&lt;em&gt;name arguments [documentation] [options-and-methods&amp;hellip;] &amp;amp;rest body&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="ba5cedae4a4b306427387f90edd4dbd185e02578" translate="yes" xml:space="preserve">
          <source>Macro: &lt;strong&gt;cl-defmethod&lt;/strong&gt;&lt;em&gt;name [qualifier] arguments [&amp;amp;context (expr spec)&amp;hellip;] &amp;amp;rest [docstring] body&lt;/em&gt;</source>
          <target state="translated">Macro: &lt;strong&gt;cl-defmethod&lt;/strong&gt;&lt;em&gt;name [qualifier] arguments [&amp;amp;context (expr spec)&amp;hellip;] &amp;amp;rest [docstring] body&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="1ff2b909c891d19da7650f8ccd70d4ff20d5f0ef" translate="yes" xml:space="preserve">
          <source>Macro: &lt;strong&gt;combine-after-change-calls&lt;/strong&gt;&lt;em&gt;body&amp;hellip;&lt;/em&gt;</source>
          <target state="translated">Macro: &lt;strong&gt;combine-after-change-calls&lt;/strong&gt;&lt;em&gt;body&amp;hellip;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="6ee51599c974e6734d6444e666498d94c6309037" translate="yes" xml:space="preserve">
          <source>Macro: &lt;strong&gt;combine-change-calls&lt;/strong&gt;&lt;em&gt;beg end body&amp;hellip;&lt;/em&gt;</source>
          <target state="translated">Macro: &lt;strong&gt;combine-change-calls&lt;/strong&gt;&lt;em&gt;beg end body&amp;hellip;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="3aee740831df3fe36c5e3627bd95688debd9b10c" translate="yes" xml:space="preserve">
          <source>Macro: &lt;strong&gt;condition-case-unless-debug&lt;/strong&gt;&lt;em&gt;var protected-form handlers&amp;hellip;&lt;/em&gt;</source>
          <target state="translated">Macro: &lt;strong&gt;condition-case-unless-debug&lt;/strong&gt;&lt;em&gt;var protected-form handlers&amp;hellip;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="be46ac442c6b283fe5303544430db1733ede80cf" translate="yes" xml:space="preserve">
          <source>Macro: &lt;strong&gt;declare-function&lt;/strong&gt;&lt;em&gt;function file &amp;amp;optional arglist fileonly&lt;/em&gt;</source>
          <target state="translated">Macro: &lt;strong&gt;declare-function&lt;/strong&gt;&lt;em&gt;function file &amp;amp;optional arglist fileonly&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="62a5106ba44b52792efba46fd9abcd6f50d2a690" translate="yes" xml:space="preserve">
          <source>Macro: &lt;strong&gt;declare&lt;/strong&gt;&lt;em&gt;specs&amp;hellip;&lt;/em&gt;</source>
          <target state="translated">Macro: &lt;strong&gt;declare&lt;/strong&gt;&lt;em&gt;specs&amp;hellip;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="aad917e7e24305c69cc7b616287145940c7bc611" translate="yes" xml:space="preserve">
          <source>Macro: &lt;strong&gt;def-edebug-spec&lt;/strong&gt;&lt;em&gt;macro specification&lt;/em&gt;</source>
          <target state="translated">Macro: &lt;strong&gt;def-edebug-spec&lt;/strong&gt;&lt;em&gt;macro specification&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="e8850ae7654fdd0f9e7e3643b836d299119c8eb3" translate="yes" xml:space="preserve">
          <source>Macro: &lt;strong&gt;defcustom&lt;/strong&gt;&lt;em&gt;option standard doc [keyword value]&amp;hellip;&lt;/em&gt;</source>
          <target state="translated">Macro: &lt;strong&gt;defcustom&lt;/strong&gt;&lt;em&gt;option standard doc [keyword value]&amp;hellip;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="5434cd21483dbb5ef69be871541753221bd178a5" translate="yes" xml:space="preserve">
          <source>Macro: &lt;strong&gt;defface&lt;/strong&gt;&lt;em&gt;face spec doc [keyword value]&amp;hellip;&lt;/em&gt;</source>
          <target state="translated">Macro: &lt;strong&gt;defface&lt;/strong&gt;&lt;em&gt;face spec doc [keyword value]&amp;hellip;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="14c7fabc7b52a8375cc5c9e142c3ac122d2ea4bc" translate="yes" xml:space="preserve">
          <source>Macro: &lt;strong&gt;defgroup&lt;/strong&gt;&lt;em&gt;group members doc [keyword value]&amp;hellip;&lt;/em&gt;</source>
          <target state="translated">Macro: &lt;strong&gt;defgroup&lt;/strong&gt;&lt;em&gt;group members doc [keyword value]&amp;hellip;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="28b55593ba483070425de7736987bf774bd2c491" translate="yes" xml:space="preserve">
          <source>Macro: &lt;strong&gt;defimage&lt;/strong&gt;&lt;em&gt;symbol specs &amp;amp;optional doc&lt;/em&gt;</source>
          <target state="translated">Macro: &lt;strong&gt;defimage&lt;/strong&gt;&lt;em&gt;symbol specs &amp;amp;optional doc&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="fea6bef8b59da7c79bbd75395190d7484736ecf9" translate="yes" xml:space="preserve">
          <source>Macro: &lt;strong&gt;define-advice&lt;/strong&gt;&lt;em&gt;symbol (where lambda-list &amp;amp;optional name depth) &amp;amp;rest body&lt;/em&gt;</source>
          <target state="translated">Macro: &lt;strong&gt;define-advice&lt;/strong&gt;&lt;em&gt;symbol (where lambda-list &amp;amp;optional name depth) &amp;amp;rest body&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="70852342716d3e0bca8b4f3d79c1ec5991f6b9cc" translate="yes" xml:space="preserve">
          <source>Macro: &lt;strong&gt;define-alternatives&lt;/strong&gt;&lt;em&gt;command &amp;amp;rest customizations&lt;/em&gt;</source>
          <target state="translated">Macro: &lt;strong&gt;define-alternatives&lt;/strong&gt;&lt;em&gt;command &amp;amp;rest customizations&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="af424b3d2ee378903109c9532c12c3d915726f60" translate="yes" xml:space="preserve">
          <source>Macro: &lt;strong&gt;define-derived-mode&lt;/strong&gt;&lt;em&gt;variant parent name docstring keyword-args&amp;hellip; body&amp;hellip;&lt;/em&gt;</source>
          <target state="translated">Macro: &lt;strong&gt;define-derived-mode&lt;/strong&gt;&lt;em&gt;variant parent name docstring keyword-args&amp;hellip; body&amp;hellip;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="d039443b2fcf2ccb94276b2881ba59ab7c4bef6e" translate="yes" xml:space="preserve">
          <source>Macro: &lt;strong&gt;define-generic-mode&lt;/strong&gt;&lt;em&gt;mode comment-list keyword-list font-lock-list auto-mode-list function-list &amp;amp;optional docstring&lt;/em&gt;</source>
          <target state="translated">Macro: &lt;strong&gt;define-generic-mode&lt;/strong&gt;&lt;em&gt;mode comment-list keyword-list font-lock-list auto-mode-list function-list &amp;amp;optional docstring&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="3be7a42eb17b3b478f941dfaad3f2a091b3d9de0" translate="yes" xml:space="preserve">
          <source>Macro: &lt;strong&gt;define-globalized-minor-mode&lt;/strong&gt;&lt;em&gt;global-mode mode turn-on keyword-args&amp;hellip; body&amp;hellip;&lt;/em&gt;</source>
          <target state="translated">Macro: &lt;strong&gt;define-globalized-minor-mode&lt;/strong&gt;&lt;em&gt;global-mode mode turn-on keyword-args&amp;hellip; body&amp;hellip;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="c3698aa5f5a4cf22d04e63dba4fd63eeab2b198c" translate="yes" xml:space="preserve">
          <source>Macro: &lt;strong&gt;define-inline&lt;/strong&gt;&lt;em&gt;name args [doc] [declare] body&amp;hellip;&lt;/em&gt;</source>
          <target state="translated">Macro: &lt;strong&gt;define-inline&lt;/strong&gt;&lt;em&gt;name args [doc] [declare] body&amp;hellip;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="1872fe945d43990f77596fefa545da1cad14ecf2" translate="yes" xml:space="preserve">
          <source>Macro: &lt;strong&gt;define-minor-mode&lt;/strong&gt;&lt;em&gt;mode doc [init-value [lighter [keymap]]] keyword-args&amp;hellip; body&amp;hellip;&lt;/em&gt;</source>
          <target state="translated">Macro: &lt;strong&gt;define-minor-mode&lt;/strong&gt;&lt;em&gt;mode doc [init-value [lighter [keymap]]] keyword-args&amp;hellip; body&amp;hellip;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="e428f2f8e85f45dc22b5c0ef48e7d972c7378dba" translate="yes" xml:space="preserve">
          <source>Macro: &lt;strong&gt;define-obsolete-face-alias&lt;/strong&gt;&lt;em&gt;obsolete-face current-face when&lt;/em&gt;</source>
          <target state="translated">Macro: &lt;strong&gt;define-obsolete-face-alias&lt;/strong&gt;&lt;em&gt;obsolete-face current-face when&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="803af6ea30a01f534dc197a816a8b6feeabe7985" translate="yes" xml:space="preserve">
          <source>Macro: &lt;strong&gt;define-obsolete-function-alias&lt;/strong&gt;&lt;em&gt;obsolete-name current-name when &amp;amp;optional doc&lt;/em&gt;</source>
          <target state="translated">Macro: &lt;strong&gt;define-obsolete-function-alias&lt;/strong&gt;&lt;em&gt;obsolete-name current-name when &amp;amp;optional doc&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="c1c5b6a54e8e1d18babd8fbf3277042db07db8a8" translate="yes" xml:space="preserve">
          <source>Macro: &lt;strong&gt;define-obsolete-variable-alias&lt;/strong&gt;&lt;em&gt;obsolete-name current-name &amp;amp;optional when docstring&lt;/em&gt;</source>
          <target state="translated">Macro: &lt;strong&gt;define-obsolete-variable-alias&lt;/strong&gt;&lt;em&gt;obsolete-name current-name &amp;amp;optional when docstring&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="10f5376be352b9daee65a34b48f0eb2a91bc607c" translate="yes" xml:space="preserve">
          <source>Macro: &lt;strong&gt;defmacro&lt;/strong&gt;&lt;em&gt;name args [doc] [declare] body&amp;hellip;&lt;/em&gt;</source>
          <target state="translated">Macro: &lt;strong&gt;defmacro&lt;/strong&gt;&lt;em&gt;name args [doc] [declare] body&amp;hellip;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="78c0fc24e6b16b98abe1b0908482cec19956ca6f" translate="yes" xml:space="preserve">
          <source>Macro: &lt;strong&gt;defsubst&lt;/strong&gt;&lt;em&gt;name args [doc] [declare] [interactive] body&amp;hellip;&lt;/em&gt;</source>
          <target state="translated">Macro: &lt;strong&gt;defsubst&lt;/strong&gt;&lt;em&gt;name args [doc] [declare] [interactive] body&amp;hellip;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="1683d10fb7854b9d19dee990d4fa2a5c7aa5855c" translate="yes" xml:space="preserve">
          <source>Macro: &lt;strong&gt;deftheme&lt;/strong&gt;&lt;em&gt;theme &amp;amp;optional doc&lt;/em&gt;</source>
          <target state="translated">Macro: &lt;strong&gt;deftheme&lt;/strong&gt;&lt;em&gt;theme &amp;amp;optional doc&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="8f549c138328cc6f82aa82edd990d79c318eb798" translate="yes" xml:space="preserve">
          <source>Macro: &lt;strong&gt;defun&lt;/strong&gt;&lt;em&gt;name args [doc] [declare] [interactive] body&amp;hellip;&lt;/em&gt;</source>
          <target state="translated">Macro: &lt;strong&gt;defun&lt;/strong&gt;&lt;em&gt;name args [doc] [declare] [interactive] body&amp;hellip;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="10c945e44b82a451a5291eaa330f70caa9d10af2" translate="yes" xml:space="preserve">
          <source>Macro: &lt;strong&gt;defvar-local&lt;/strong&gt;&lt;em&gt;variable value &amp;amp;optional docstring&lt;/em&gt;</source>
          <target state="translated">Macro: &lt;strong&gt;defvar-local&lt;/strong&gt;&lt;em&gt;variable value &amp;amp;optional docstring&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="cc1f8d335ca6f3d1108310f49f1d7c79312c2310" translate="yes" xml:space="preserve">
          <source>Macro: &lt;strong&gt;delay-mode-hooks&lt;/strong&gt;&lt;em&gt;body&amp;hellip;&lt;/em&gt;</source>
          <target state="translated">Macro: &lt;strong&gt;delay-mode-hooks&lt;/strong&gt;&lt;em&gt;body&amp;hellip;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="236c5615e3d9ad7c6a4ecbd45a98af3f3547666f" translate="yes" xml:space="preserve">
          <source>Macro: &lt;strong&gt;dolist-with-progress-reporter&lt;/strong&gt;&lt;em&gt;(var count [result]) reporter-or-message body&amp;hellip;&lt;/em&gt;</source>
          <target state="translated">Macro: &lt;strong&gt;dolist-with-progress-reporter&lt;/strong&gt;&lt;em&gt;(var count [result]) reporter-or-message body&amp;hellip;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="af38a7273fecb69f9c319a26123467a4b36e125d" translate="yes" xml:space="preserve">
          <source>Macro: &lt;strong&gt;dolist&lt;/strong&gt;&lt;em&gt;(var list [result]) body&amp;hellip;&lt;/em&gt;</source>
          <target state="translated">Macro: &lt;strong&gt;dolist&lt;/strong&gt;&lt;em&gt;(var list [result]) body&amp;hellip;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="f09315db5afa839072a62fbc1535685142261f35" translate="yes" xml:space="preserve">
          <source>Macro: &lt;strong&gt;dotimes-with-progress-reporter&lt;/strong&gt;&lt;em&gt;(var count [result]) reporter-or-message body&amp;hellip;&lt;/em&gt;</source>
          <target state="translated">Macro: &lt;strong&gt;dotimes-with-progress-reporter&lt;/strong&gt;&lt;em&gt;(var count [result]) reporter-or-message body&amp;hellip;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="7f92ffa9680e321f5b7958eb9df3da33cc00a96e" translate="yes" xml:space="preserve">
          <source>Macro: &lt;strong&gt;dotimes&lt;/strong&gt;&lt;em&gt;(var count [result]) body&amp;hellip;&lt;/em&gt;</source>
          <target state="translated">Macro: &lt;strong&gt;dotimes&lt;/strong&gt;&lt;em&gt;(var count [result]) body&amp;hellip;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="27132dd2125d6a24d297f0e928ce24fd5c66c2a4" translate="yes" xml:space="preserve">
          <source>Macro: &lt;strong&gt;easy-menu-define&lt;/strong&gt;&lt;em&gt;symbol maps doc menu&lt;/em&gt;</source>
          <target state="translated">Macro: &lt;strong&gt;easy-menu-define&lt;/strong&gt;&lt;em&gt;symbol maps doc menu&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="4202975359e6a5a35e94aebc824c1980bfa133ab" translate="yes" xml:space="preserve">
          <source>Macro: &lt;strong&gt;edebug-tracing&lt;/strong&gt;&lt;em&gt;string body&amp;hellip;&lt;/em&gt;</source>
          <target state="translated">Macro: &lt;strong&gt;edebug-tracing&lt;/strong&gt;&lt;em&gt;string body&amp;hellip;&lt;/em&gt;</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
