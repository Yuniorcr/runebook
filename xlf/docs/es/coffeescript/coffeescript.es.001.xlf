<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="es" datatype="htmlbody" original="coffeescript">
    <body>
      <group id="coffeescript">
        <trans-unit id="e11557a88106e7fe5bb613921c6f637bccd31989" translate="yes" xml:space="preserve">
          <source>%%</source>
          <target state="translated">%%</target>
        </trans-unit>
        <trans-unit id="7ccf396b1e0174237c52a3c6bc495b340169bd3c" translate="yes" xml:space="preserve">
          <source>&amp;copy; 2009&amp;ndash;2018 Jeremy Ashkenas</source>
          <target state="translated">&amp;copy; 2009&amp;ndash;2018 Jeremy Ashkenas</target>
        </trans-unit>
        <trans-unit id="e00eab0c44161a5c6e125f234cee4992a6fcd8e4" translate="yes" xml:space="preserve">
          <source>&amp;hellip;and object properties.</source>
          <target state="translated">... y propiedades de objeto.</target>
        </trans-unit>
        <trans-unit id="73dd43829ef8eae899eaf52c55d9ad5b84c8821f" translate="yes" xml:space="preserve">
          <source>&amp;quot;text/coffeescript&amp;quot; Script Tags</source>
          <target state="translated">Etiquetas de script &quot;text / coffeescript&quot;</target>
        </trans-unit>
        <trans-unit id="bc2f74c22f98f7b6ffbc2f67453dbfa99bce9a32" translate="yes" xml:space="preserve">
          <source>**</source>
          <target state="translated">**</target>
        </trans-unit>
        <trans-unit id="ebbffb7d7ea5362a22bfa1bab0bfdeb1617cd610" translate="yes" xml:space="preserve">
          <source>//</source>
          <target state="translated">//</target>
        </trans-unit>
        <trans-unit id="53f56e39c6568e87ed693f2d221db24632d7aa00" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;#modules&quot;&gt;Modules&lt;/a&gt; and &lt;a href=&quot;#jsx&quot;&gt;JSX&lt;/a&gt; always require transpilation.</source>
          <target state="translated">&lt;a href=&quot;#modules&quot;&gt;Los m&amp;oacute;dulos&lt;/a&gt; y &lt;a href=&quot;#jsx&quot;&gt;JSX&lt;/a&gt; siempre requieren transpilaci&amp;oacute;n.</target>
        </trans-unit>
        <trans-unit id="2b5a9a675a7d370676eff4f216883a2020ccc476" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://coffeescript.org/#splats&quot;&gt;Splats, a.k.a. object rest/spread syntax, for objects&lt;/a&gt; are supported by Node 8.6+.</source>
          <target state="translated">&lt;a href=&quot;https://coffeescript.org/#splats&quot;&gt;Los s&amp;iacute;mbolos, tambi&amp;eacute;n conocidos como sintaxis de descanso / propagaci&amp;oacute;n de objetos, para objetos&lt;/a&gt; son compatibles con el Nodo 8.6+.</target>
        </trans-unit>
        <trans-unit id="7f2498c383e4e6502a04279ccad6e370f86b3e20" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/import#Dynamic_Imports&quot;&gt;Dynamic import&lt;/a&gt; is also supported, with mandatory parentheses:</source>
          <target state="translated">&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/import#Dynamic_Imports&quot;&gt;La importaci&amp;oacute;n din&amp;aacute;mica&lt;/a&gt; tambi&amp;eacute;n es compatible, con par&amp;eacute;ntesis obligatorios:</target>
        </trans-unit>
        <trans-unit id="f82ee4d52cb6f66ab432c78025692d4f93c8400d" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://facebook.github.io/react/docs/introducing-jsx.html&quot;&gt;JSX&lt;/a&gt; is JavaScript containing interspersed XML elements. While conceived for &lt;a href=&quot;https://facebook.github.io/react/&quot;&gt;React&lt;/a&gt;, it is not specific to any particular library or framework.</source>
          <target state="translated">&lt;a href=&quot;https://facebook.github.io/react/docs/introducing-jsx.html&quot;&gt;JSX&lt;/a&gt; es JavaScript que contiene elementos XML intercalados. Si bien est&amp;aacute; concebido para &lt;a href=&quot;https://facebook.github.io/react/&quot;&gt;React&lt;/a&gt; , no es espec&amp;iacute;fico de ninguna biblioteca o marco en particular.</target>
        </trans-unit>
        <trans-unit id="5ab0d5c504f451bb7b8744a031b2895facf00809" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://github.com/tc39/proposal-async-iteration&quot;&gt;Async generator functions&lt;/a&gt; are supported by Node 10+.</source>
          <target state="translated">&lt;a href=&quot;https://github.com/tc39/proposal-async-iteration&quot;&gt;Las funciones del generador as&amp;iacute;ncrono&lt;/a&gt; son compatibles con el Nodo 10+.</target>
        </trans-unit>
        <trans-unit id="3eea75d33a4b7141282062785cc396fb0821bbd2" translate="yes" xml:space="preserve">
          <source>&lt;code id=&quot;this&quot;&gt;@&lt;/code&gt;, &lt;code&gt;this&lt;/code&gt;</source>
          <target state="translated">&lt;code id=&quot;this&quot;&gt;@&lt;/code&gt; , &lt;code&gt;this&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="6bddde52d2ce96695935a88af3457fe562602600" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&quot;text/coffeescript&quot;&lt;/code&gt; Script Tags</source>
          <target state="translated">&lt;code&gt;&quot;text/coffeescript&quot;&lt;/code&gt; Etiquetas de script &quot;text / coffeescript&quot;</target>
        </trans-unit>
        <trans-unit id="4f3b179798446cf0398649b8ad3d668bf9055a6f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;--bare&lt;/code&gt; and &lt;code&gt;--no-header&lt;/code&gt; are important because Flow requires the first line of the file to be the comment &lt;code&gt;// @flow&lt;/code&gt;. If you configure your build chain to compile CoffeeScript and pass the result to Flow in-memory, you can get better performance than this example; and a proper build tool should be able to watch your CoffeeScript files and recompile and type-check them for you on save.</source>
          <target state="translated">&lt;code&gt;--bare&lt;/code&gt; y &lt;code&gt;--no-header&lt;/code&gt; son importantes porque Flow requiere que la primera l&amp;iacute;nea del archivo sea el comentario &lt;code&gt;// @flow&lt;/code&gt; . Si configura su cadena de compilaci&amp;oacute;n para compilar CoffeeScript y pasar el resultado a Flow en memoria, puede obtener un mejor rendimiento que este ejemplo; y una herramienta de compilaci&amp;oacute;n adecuada deber&amp;iacute;a poder ver sus archivos CoffeeScript y volver a compilarlos y verificarlos por escrito al guardarlos.</target>
        </trans-unit>
        <trans-unit id="4d635daf3b49933b2580d4b7f115dbf3f7192ece" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;a?(b, c)&lt;/code&gt; or &lt;code&gt;a? b, c&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;a?(b, c)&lt;/code&gt; o &lt;code&gt;a? b, c&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="8b195b055ae12191320d58268dcf96e63ba61e34" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;a?.b&lt;/code&gt; or &lt;code&gt;a?['b']&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;a?.b&lt;/code&gt; o &lt;code&gt;a?['b']&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="f26a6ff56f6f4d1453881906a2fedcfdf70a4192" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;console.log sys.inspect object&lt;/code&gt; &amp;rarr; &lt;code&gt;console.log(sys.inspect(object));&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;console.log sys.inspect object&lt;/code&gt; &amp;rarr; &lt;code&gt;console.log(sys.inspect(object));&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="671572b1210bb1454fe66f9c4630dc77eb820b08" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;false&lt;/code&gt;, &lt;code&gt;no&lt;/code&gt;, &lt;code&gt;off&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;false&lt;/code&gt; , &lt;code&gt;no&lt;/code&gt; , &lt;code&gt;off&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="08092e8ae424c160938c270677dd88a77a69c59c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;get&lt;/code&gt; and &lt;code&gt;set&lt;/code&gt; keyword shorthand syntax</source>
          <target state="translated">&lt;code&gt;get&lt;/code&gt; y &lt;code&gt;set&lt;/code&gt; sintaxis abreviada de palabras clave</target>
        </trans-unit>
        <trans-unit id="6797ae36e87fa19e1efa9483eaa78cd02c6979d2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;get&lt;/code&gt; and &lt;code&gt;set&lt;/code&gt;, as keywords preceding functions or class methods, are intentionally unimplemented in CoffeeScript.</source>
          <target state="translated">&lt;code&gt;get&lt;/code&gt; y &lt;code&gt;set&lt;/code&gt; , como palabras clave que preceden a funciones o m&amp;eacute;todos de clase, no se implementan intencionalmente en CoffeeScript.</target>
        </trans-unit>
        <trans-unit id="b4e24c06746537f3bcc316c7b684e6a1288745a7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;if&lt;/code&gt;/&lt;code&gt;else&lt;/code&gt; statements can be written without the use of parentheses and curly brackets. As with functions and other block expressions, multi-line conditionals are delimited by indentation. There&amp;rsquo;s also a handy postfix form, with the &lt;code&gt;if&lt;/code&gt; or &lt;code&gt;unless&lt;/code&gt; at the end.</source>
          <target state="translated">&lt;code&gt;if&lt;/code&gt; declaraciones if / &lt;code&gt;else&lt;/code&gt; se pueden escribir sin el uso de par&amp;eacute;ntesis y corchetes. Al igual que con las funciones y otras expresiones de bloque, los condicionales de varias l&amp;iacute;neas est&amp;aacute;n delimitados por sangr&amp;iacute;a. Tambi&amp;eacute;n hay un pr&amp;aacute;ctico formulario de postfix, con el &lt;code&gt;if&lt;/code&gt; o el &lt;code&gt;unless&lt;/code&gt; al final.</target>
        </trans-unit>
        <trans-unit id="c898449ed9c27c9ce84efe5f7a1f6fed9d1a6120" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;let&lt;/code&gt; and &lt;code&gt;const&lt;/code&gt; add a useful ability to JavaScript in that you can use them to declare variables within a &lt;em&gt;block&lt;/em&gt; scope, for example within an &lt;code&gt;if&lt;/code&gt; statement body or a &lt;code&gt;for&lt;/code&gt; loop body, whereas &lt;code&gt;var&lt;/code&gt; always declares variables in the scope of an entire function. When CoffeeScript 2 was designed, there was much discussion of whether this functionality was useful enough to outweigh the simplicity offered by never needing to consider variable declaration in CoffeeScript. In the end, it was decided that the simplicity was more valued. In CoffeeScript there remains only one type of variable.</source>
          <target state="translated">&lt;code&gt;let&lt;/code&gt; y &lt;code&gt;const&lt;/code&gt; agregan una habilidad &amp;uacute;til a JavaScript en que puede usarlos para declarar variables dentro de un &amp;aacute;mbito de &lt;em&gt;bloque&lt;/em&gt; , por ejemplo dentro de un cuerpo de declaraci&amp;oacute;n &lt;code&gt;if&lt;/code&gt; o un cuerpo de bucle &lt;code&gt;for&lt;/code&gt; , mientras que &lt;code&gt;var&lt;/code&gt; siempre declara variables en el &amp;aacute;mbito de una funci&amp;oacute;n completa. Cuando se dise&amp;ntilde;&amp;oacute; CoffeeScript 2, se discuti&amp;oacute; mucho si esta funcionalidad era lo suficientemente &amp;uacute;til como para superar la simplicidad ofrecida al no tener que considerar nunca la declaraci&amp;oacute;n de variables en CoffeeScript. Al final, se decidi&amp;oacute; que la simplicidad era m&amp;aacute;s valorada. En CoffeeScript solo queda un tipo de variable.</target>
        </trans-unit>
        <trans-unit id="0d755861b046842e4e015fd91408805286afea66" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;let&lt;/code&gt; and &lt;code&gt;const&lt;/code&gt;: block-scoped and reassignment-protected variables</source>
          <target state="translated">&lt;code&gt;let&lt;/code&gt; y &lt;code&gt;const&lt;/code&gt; : variables protegidas por bloque y reasignadas</target>
        </trans-unit>
        <trans-unit id="69bdd67b5f2fb2b4bc55bed7c7cf382b91714c45" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;options.bare&lt;/code&gt;, boolean: if true, output without the &lt;a href=&quot;#lexical-scope&quot;&gt;top-level function safety wrapper&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;options.bare&lt;/code&gt; , boolean: si es verdadero, salida sin el &lt;a href=&quot;#lexical-scope&quot;&gt;envoltorio de seguridad de la funci&amp;oacute;n de nivel superior&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="7e88224b1d5d85954af2e05694587845ce15ef6c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;options.filename&lt;/code&gt;, string: the filename to use for the source map. It can include a path (relative or absolute).</source>
          <target state="translated">&lt;code&gt;options.filename&lt;/code&gt; , string: el nombre de archivo a utilizar para el mapa fuente. Puede incluir una ruta (relativa o absoluta).</target>
        </trans-unit>
        <trans-unit id="0668f9660893b6c173226ef928d6f8c135d49c5d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;options.header&lt;/code&gt;, boolean: if true, output the &lt;code&gt;Generated by CoffeeScript&lt;/code&gt; header.</source>
          <target state="translated">&lt;code&gt;options.header&lt;/code&gt; , boolean: si es verdadero, &lt;code&gt;Generated by CoffeeScript&lt;/code&gt; encabezado Generado por CoffeeScript .</target>
        </trans-unit>
        <trans-unit id="5d11ef802af0f76e518643ed277b582fea058806" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;options.inlineMap&lt;/code&gt;, boolean: if true, output the source map as a base64-encoded string in a comment at the bottom.</source>
          <target state="translated">&lt;code&gt;options.inlineMap&lt;/code&gt; , boolean: si es verdadero, genera el mapa fuente como una cadena codificada en base64 en un comentario en la parte inferior.</target>
        </trans-unit>
        <trans-unit id="0e70b1c0b6768b86125fef4bd20eb872934d31f3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;options.sourceMap&lt;/code&gt;, boolean: if true, a source map will be generated; and instead of returning a string, &lt;code&gt;compile&lt;/code&gt; will return an object of the form &lt;code&gt;{js, v3SourceMap, sourceMap}&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;options.sourceMap&lt;/code&gt; , boolean: si es verdadero, se generar&amp;aacute; un mapa fuente; y en lugar de devolver una cadena, la &lt;code&gt;compile&lt;/code&gt; devolver&amp;aacute; un objeto de la forma &lt;code&gt;{js, v3SourceMap, sourceMap}&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="bd359cce40eaca31c9f0f745fb688f4ff5606e6d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;options.transpile&lt;/code&gt;, &lt;strong&gt;object&lt;/strong&gt;: if set, this must be an object with the &lt;a href=&quot;https://babeljs.io/docs/usage/api/#options&quot;&gt;options to pass to Babel&lt;/a&gt;. See &lt;a href=&quot;#transpilation&quot;&gt;Transpilation&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;options.transpile&lt;/code&gt; , &lt;strong&gt;object&lt;/strong&gt; : si est&amp;aacute; configurado, este debe ser un objeto con las &lt;a href=&quot;https://babeljs.io/docs/usage/api/#options&quot;&gt;opciones para pasar a Babel&lt;/a&gt; . Ver &lt;a href=&quot;#transpilation&quot;&gt;Transpilaci&amp;oacute;n&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="42ddf3bee0d00b958b57a4f0c778746594dce840" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;require()&lt;/code&gt; the given module before starting the REPL or evaluating the code given with the &lt;code&gt;--eval&lt;/code&gt; flag.</source>
          <target state="translated">&lt;code&gt;require()&lt;/code&gt; el m&amp;oacute;dulo dado antes de comenzar el REPL o evaluar el c&amp;oacute;digo dado con la bandera &lt;code&gt;--eval&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="da337d04d46816ce3f960cc13a8c58049d709032" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;super&lt;/code&gt; and &lt;code&gt;extends&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;super&lt;/code&gt; y se &lt;code&gt;extends&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="f91468df92b13b248660811a65d1664a64a85a87" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;super&lt;/code&gt; and &lt;code&gt;this&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;super&lt;/code&gt; y &lt;code&gt;this&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="febc77da193c1450f3079a54b815c08cfb84cae7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;switch&lt;/code&gt; statements can also be used without a control expression, turning them in to a cleaner alternative to &lt;code&gt;if&lt;/code&gt;/&lt;code&gt;else&lt;/code&gt; chains.</source>
          <target state="translated">&lt;code&gt;switch&lt;/code&gt; declaraciones de cambio tambi&amp;eacute;n se pueden usar sin una expresi&amp;oacute;n de control, convirti&amp;eacute;ndolas en una alternativa m&amp;aacute;s limpia a las cadenas &lt;code&gt;if&lt;/code&gt; / &lt;code&gt;else&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="f14836fb2c4f448ff7f89a8d54a114f65adceb8e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;switch&lt;/code&gt; statements in JavaScript are a bit awkward. You need to remember to &lt;code&gt;break&lt;/code&gt; at the end of every &lt;code&gt;case&lt;/code&gt; statement to avoid accidentally falling through to the default case. CoffeeScript prevents accidental fall-through, and can convert the &lt;code&gt;switch&lt;/code&gt; into a returnable, assignable expression. The format is: &lt;code&gt;switch&lt;/code&gt; condition, &lt;code&gt;when&lt;/code&gt; clauses, &lt;code&gt;else&lt;/code&gt; the default case.</source>
          <target state="translated">&lt;code&gt;switch&lt;/code&gt; declaraciones de cambio en JavaScript son un poco inc&amp;oacute;modas. Debe recordar &lt;code&gt;break&lt;/code&gt; al final de cada declaraci&amp;oacute;n de &lt;code&gt;case&lt;/code&gt; para evitar caer accidentalmente en el caso predeterminado. CoffeeScript evita la ca&amp;iacute;da accidental y puede convertir el &lt;code&gt;switch&lt;/code&gt; en una expresi&amp;oacute;n retornable y asignable. El formato es: &lt;code&gt;switch&lt;/code&gt; condici&amp;oacute;n, &lt;code&gt;when&lt;/code&gt; cl&amp;aacute;usulas, de lo &lt;code&gt;else&lt;/code&gt; , el caso predeterminado.</target>
        </trans-unit>
        <trans-unit id="beb8408aed5d5e0b2e7958d3840c0f622534b644" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt;, &lt;code&gt;yes&lt;/code&gt;, &lt;code&gt;on&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; , &lt;code&gt;yes&lt;/code&gt; , &lt;code&gt;on&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="4cfd4f6560eea48a3bbb6452c625b3643616abf4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;try&lt;/code&gt; expressions have the same semantics as &lt;code&gt;try&lt;/code&gt; statements in JavaScript, though in CoffeeScript, you may omit &lt;em&gt;both&lt;/em&gt; the catch and finally parts. The catch part may also omit the error parameter if it is not needed.</source>
          <target state="translated">&lt;code&gt;try&lt;/code&gt; expresiones tienen la misma sem&amp;aacute;ntica que &lt;code&gt;try&lt;/code&gt; declaraciones en JavaScript, aunque en CoffeeScript, puede omitir &lt;em&gt;tanto&lt;/em&gt; la captura y finalmente partes. La parte catch tambi&amp;eacute;n puede omitir el par&amp;aacute;metro de error si no es necesario.</target>
        </trans-unit>
        <trans-unit id="4068635871de89a0425d7ae15c3ee28c166fda6d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;unless&lt;/code&gt; can be used as the inverse of &lt;code&gt;if&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;unless&lt;/code&gt; pueda usarse como el inverso de &lt;code&gt;if&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="146594e8060979ead0f6d28256eb4ef1779d3dcf" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;yield*&lt;/code&gt; is called &lt;code&gt;yield from&lt;/code&gt;, and &lt;code&gt;yield return&lt;/code&gt; may be used if you need to force a generator that doesn&amp;rsquo;t yield.</source>
          <target state="translated">&lt;code&gt;yield*&lt;/code&gt; se llama &lt;code&gt;yield from&lt;/code&gt; , y el &lt;code&gt;yield return&lt;/code&gt; puede usarse si necesita forzar un generador que no rinde.</target>
        </trans-unit>
        <trans-unit id="eea76de22707204f2de04392630e2b08c9b49475" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;CoffeeScript on the topleft, compiled JavaScript output on the bottomright. The CoffeeScript is editable!&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;CoffeeScript en el topleft, salida de JavaScript compilada en la parte inferior derecha. &amp;iexcl;El CoffeeScript es editable!&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="7315b2762c97737d5039c4b20d8a25a1b9ad4687" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Many of the examples can be run (where it makes sense) by pressing the&lt;/em&gt;&lt;small&gt;▶&lt;/small&gt;&lt;em&gt;button on the right. The CoffeeScript on the left is editable, and the JavaScript will update as you edit.&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;Muchos de los ejemplos se pueden ejecutar (donde tenga sentido) presionando el &lt;/em&gt;&lt;em&gt;bot&amp;oacute;n &lt;/em&gt;&lt;small&gt;▶ &lt;/small&gt;&lt;em&gt;a la derecha. El CoffeeScript de la izquierda es editable y el JavaScript se actualizar&amp;aacute; a medida que edita.&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="c277fcd54562e2635bc26a8132a87027a7d6a56f" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;This reference is structured so that it can be read from top to bottom, if you like. Later sections use ideas and syntax previously introduced. Familiarity with JavaScript is assumed. In all of the following examples, the source CoffeeScript is provided on the left, and the direct compilation into JavaScript is on the right.&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;Esta referencia est&amp;aacute; estructurada para que pueda leerse de arriba abajo, si lo desea. Las secciones posteriores usan ideas y sintaxis introducidas previamente. Se supone familiaridad con JavaScript. En todos los ejemplos siguientes, la fuente de CoffeeScript se proporciona a la izquierda y la compilaci&amp;oacute;n directa en JavaScript est&amp;aacute; a la derecha.&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="a3e61d6a409d40b1cc7e66218d36a04024655912" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;CoffeeScript is a little language that compiles into JavaScript.&lt;/strong&gt; Underneath that awkward Java-esque patina, JavaScript has always had a gorgeous heart. CoffeeScript is an attempt to expose the good parts of JavaScript in a simple way.</source>
          <target state="translated">&lt;strong&gt;CoffeeScript es un peque&amp;ntilde;o lenguaje que se compila en JavaScript. &lt;/strong&gt;Debajo de esa extra&amp;ntilde;a p&amp;aacute;tina al estilo de Java, JavaScript siempre ha tenido un coraz&amp;oacute;n maravilloso. CoffeeScript es un intento de exponer las partes buenas de JavaScript de una manera simple.</target>
        </trans-unit>
        <trans-unit id="3a49dc083df4f29ffc84eceec33918bc2ac078a0" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Latest Version:&lt;/strong&gt;&lt;a href=&quot;https://github.com/jashkenas/coffeescript/tarball/2.4.1&quot;&gt;2.4.1&lt;/a&gt;</source>
          <target state="translated">&lt;strong&gt;&amp;Uacute;ltima versi&amp;oacute;n: &lt;/strong&gt;&lt;a href=&quot;https://github.com/jashkenas/coffeescript/tarball/2.4.1&quot;&gt;2.4.1&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="9a78211436f6d425ec38f5c4e02270801f3524f8" translate="yes" xml:space="preserve">
          <source>@</source>
          <target state="translated">@</target>
        </trans-unit>
        <trans-unit id="749387032ae04dba9bbbf8a243b19977245cf1a6" translate="yes" xml:space="preserve">
          <source>A few caveats:</source>
          <target state="translated">Unas cuantas advertencias:</target>
        </trans-unit>
        <trans-unit id="2992ef6e06f5285c1589f15bbd6cdefabccc9e93" translate="yes" xml:space="preserve">
          <source>All together now, watch and recompile an entire project as you work on it:</source>
          <target state="translated">Todos juntos ahora,miren y recompongan un proyecto entero mientras trabajan en él:</target>
        </trans-unit>
        <trans-unit id="ef9a81eb41028081130a2daf5219d439c4552d2b" translate="yes" xml:space="preserve">
          <source>All together now:</source>
          <target state="translated">Todos juntos ahora:</target>
        </trans-unit>
        <trans-unit id="de911cf89f46bf4aab8399057a0b6f4d24430428" translate="yes" xml:space="preserve">
          <source>Along those lines, code blocks within list items or blockquotes are not treated as executable code. Since list items and blockquotes imply their own indentation, it would be ambiguous how to treat indentation between successive code blocks when some are within these other blocks and some are not.</source>
          <target state="translated">En este sentido,los bloques de código dentro de los elementos de la lista o las comillas no se tratan como código ejecutable.Dado que los elementos de la lista y las comillas implican su propia indentación,sería ambiguo cómo tratar la indentación entre bloques de código sucesivos cuando algunos están dentro de esos otros bloques y otros no.</target>
        </trans-unit>
        <trans-unit id="f205799358de5de3653ec6932d7fc9cc5631d19a" translate="yes" xml:space="preserve">
          <source>Also note that any file with an &lt;code&gt;import&lt;/code&gt; or &lt;code&gt;export&lt;/code&gt; statement will be output without a &lt;a href=&quot;#lexical-scope&quot;&gt;top-level function safety wrapper&lt;/a&gt;; in other words, importing or exporting modules will automatically trigger &lt;a href=&quot;#usage&quot;&gt;bare&lt;/a&gt; mode for that file. This is because per the ES2015 spec, &lt;code&gt;import&lt;/code&gt; or &lt;code&gt;export&lt;/code&gt; statements must occur at the topmost scope.</source>
          <target state="translated">Tambi&amp;eacute;n tenga en cuenta que cualquier archivo con una declaraci&amp;oacute;n de &lt;code&gt;import&lt;/code&gt; aci&amp;oacute;n o &lt;code&gt;export&lt;/code&gt; aci&amp;oacute;n se generar&amp;aacute; sin un &lt;a href=&quot;#lexical-scope&quot;&gt;contenedor de seguridad de funci&amp;oacute;n de nivel superior&lt;/a&gt; ; en otras palabras, la importaci&amp;oacute;n o exportaci&amp;oacute;n de m&amp;oacute;dulos activar&amp;aacute;n autom&amp;aacute;ticamente &lt;a href=&quot;#usage&quot;&gt;al descubierto&lt;/a&gt; el modo de ese archivo. Esto se debe a que seg&amp;uacute;n la especificaci&amp;oacute;n ES2015, &lt;code&gt;export&lt;/code&gt; declaraciones de &lt;code&gt;import&lt;/code&gt; aci&amp;oacute;n o exportaci&amp;oacute;n deben ocurrir en el &amp;aacute;mbito m&amp;aacute;s alto.</target>
        </trans-unit>
        <trans-unit id="8d8c347317a31c9b96b2eb66a2e233fab6fd3515" translate="yes" xml:space="preserve">
          <source>Although suppressed within this documentation for clarity, all CoffeeScript output (except in files with &lt;code&gt;import&lt;/code&gt; or &lt;code&gt;export&lt;/code&gt; statements) is wrapped in an anonymous function: &lt;code&gt;(function(){ &amp;hellip; })();&lt;/code&gt;. This safety wrapper, combined with the automatic generation of the &lt;code&gt;var&lt;/code&gt; keyword, make it exceedingly difficult to pollute the global namespace by accident. (The safety wrapper can be disabled with the &lt;a href=&quot;#usage&quot;&gt;&lt;code&gt;bare&lt;/code&gt; option&lt;/a&gt;, and is unnecessary and automatically disabled when using modules.)</source>
          <target state="translated">Aunque se suprime dentro de esta documentaci&amp;oacute;n para mayor claridad, toda la salida de CoffeeScript (excepto en archivos con declaraciones de &lt;code&gt;import&lt;/code&gt; aci&amp;oacute;n o &lt;code&gt;export&lt;/code&gt; aci&amp;oacute;n ) est&amp;aacute; envuelta en una funci&amp;oacute;n an&amp;oacute;nima: &lt;code&gt;(function(){ &amp;hellip; })();&lt;/code&gt; . Este envoltorio de seguridad, combinado con la generaci&amp;oacute;n autom&amp;aacute;tica de la palabra clave &lt;code&gt;var&lt;/code&gt; , hace que sea extremadamente dif&amp;iacute;cil contaminar el espacio de nombres global por accidente. (El envoltorio de seguridad se puede deshabilitar con la &lt;a href=&quot;#usage&quot;&gt;opci&amp;oacute;n &lt;/a&gt; &lt;code&gt;bare&lt;/code&gt; , y es innecesario y se deshabilita autom&amp;aacute;ticamente cuando se usan m&amp;oacute;dulos).</target>
        </trans-unit>
        <trans-unit id="d1862e82363559b6fb9a22118afd3352933e73f2" translate="yes" xml:space="preserve">
          <source>Argument parsing and shebang (&lt;code&gt;#!&lt;/code&gt;) lines</source>
          <target state="translated">An&amp;aacute;lisis de argumentos y l&amp;iacute;neas shebang ( &lt;code&gt;#!&lt;/code&gt; )</target>
        </trans-unit>
        <trans-unit id="65f9c0eea18b31eb35e30364b4d18f13f72f3e80" translate="yes" xml:space="preserve">
          <source>Arguments can be forwarded explicitly using splats:</source>
          <target state="translated">Los argumentos pueden ser enviados explícitamente usando splats:</target>
        </trans-unit>
        <trans-unit id="bc8d4bce0a86d2f62284d889ea176cb257eb81cf" translate="yes" xml:space="preserve">
          <source>Array Slicing and Splicing with Ranges</source>
          <target state="translated">Arreglar el rebanado y el empalme con las gamas</target>
        </trans-unit>
        <trans-unit id="9ba9135f5143cdbcf8f067d358d2f101a0291868" translate="yes" xml:space="preserve">
          <source>As a shortcut for &lt;code&gt;this.property&lt;/code&gt;, you can use &lt;code&gt;@property&lt;/code&gt;.</source>
          <target state="translated">Como acceso directo para &lt;code&gt;this.property&lt;/code&gt; , puede usar &lt;code&gt;@property&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="4d5ff33811e35eec43fb0c6d044ee1aebaa01617" translate="yes" xml:space="preserve">
          <source>As in &lt;a href=&quot;http://yaml.org/&quot;&gt;YAML&lt;/a&gt;, &lt;code&gt;on&lt;/code&gt; and &lt;code&gt;yes&lt;/code&gt; are the same as boolean &lt;code&gt;true&lt;/code&gt;, while &lt;code&gt;off&lt;/code&gt; and &lt;code&gt;no&lt;/code&gt; are boolean &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">Como en &lt;a href=&quot;http://yaml.org/&quot;&gt;YAML&lt;/a&gt; , &lt;code&gt;on&lt;/code&gt; y &lt;code&gt;yes&lt;/code&gt; son lo mismo que boolean &lt;code&gt;true&lt;/code&gt; , mientras que &lt;code&gt;off&lt;/code&gt; y &lt;code&gt;no&lt;/code&gt; son boolean &lt;code&gt;false&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="c940962594d626d789e7139cf6327778f46a3c66" translate="yes" xml:space="preserve">
          <source>As in Ruby, &lt;code&gt;switch&lt;/code&gt; statements in CoffeeScript can take multiple values for each &lt;code&gt;when&lt;/code&gt; clause. If any of the values match, the clause runs.</source>
          <target state="translated">Como en Ruby, las declaraciones de &lt;code&gt;switch&lt;/code&gt; en CoffeeScript pueden tomar m&amp;uacute;ltiples valores para cada cl&amp;aacute;usula &lt;code&gt;when&lt;/code&gt; . Si alguno de los valores coincide, se ejecuta la cl&amp;aacute;usula.</target>
        </trans-unit>
        <trans-unit id="785872c21d2152c8e487aa14ed3c436575fb2e25" translate="yes" xml:space="preserve">
          <source>As well as silly things, like passing a &lt;code&gt;try&lt;/code&gt;/&lt;code&gt;catch&lt;/code&gt; statement directly into a function call:</source>
          <target state="translated">Adem&amp;aacute;s de cosas tontas, como pasar una declaraci&amp;oacute;n &lt;code&gt;try&lt;/code&gt; / &lt;code&gt;catch&lt;/code&gt; directamente a una llamada de funci&amp;oacute;n:</target>
        </trans-unit>
        <trans-unit id="e17003d05d795ba33cb9b8fb93fce1a1e17abcdc" translate="yes" xml:space="preserve">
          <source>Async Functions</source>
          <target state="translated">Funciones de sincronización</target>
        </trans-unit>
        <trans-unit id="baaf2143528768ba7feea8a142baf40647bed225" translate="yes" xml:space="preserve">
          <source>Because the &lt;code&gt;==&lt;/code&gt; operator frequently causes undesirable coercion, is intransitive, and has a different meaning than in other languages, CoffeeScript compiles &lt;code&gt;==&lt;/code&gt; into &lt;code&gt;===&lt;/code&gt;, and &lt;code&gt;!=&lt;/code&gt; into &lt;code&gt;!==&lt;/code&gt;. In addition, &lt;code&gt;is&lt;/code&gt; compiles into &lt;code&gt;===&lt;/code&gt;, and &lt;code&gt;isnt&lt;/code&gt; into &lt;code&gt;!==&lt;/code&gt;.</source>
          <target state="translated">Debido a que el operador &lt;code&gt;==&lt;/code&gt; con frecuencia causa una coerci&amp;oacute;n indeseable, es intransitivo y tiene un significado diferente que en otros lenguajes, CoffeeScript compila &lt;code&gt;==&lt;/code&gt; en &lt;code&gt;===&lt;/code&gt; , y &lt;code&gt;!=&lt;/code&gt; En &lt;code&gt;!==&lt;/code&gt; . Adem&amp;aacute;s, &lt;code&gt;is&lt;/code&gt; compila en &lt;code&gt;===&lt;/code&gt; , y &lt;code&gt;isnt&lt;/code&gt; en &lt;code&gt;!==&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="48eae9d012f5bd3812c09f9e579487b2ac854c74" translate="yes" xml:space="preserve">
          <source>Because variable declarations occur at the top of scope, assignment can be used within expressions, even for variables that haven&amp;rsquo;t been seen before:</source>
          <target state="translated">Debido a que las declaraciones de variables ocurren en la parte superior del alcance, la asignaci&amp;oacute;n se puede usar dentro de expresiones, incluso para variables que no se han visto antes:</target>
        </trans-unit>
        <trans-unit id="6a73ea1c2b90501e9d317af3a06faec56721a224" translate="yes" xml:space="preserve">
          <source>Because you don&amp;rsquo;t have direct access to the &lt;code&gt;var&lt;/code&gt; keyword, it&amp;rsquo;s impossible to shadow an outer variable on purpose, you may only refer to it. So be careful that you&amp;rsquo;re not reusing the name of an external variable accidentally, if you&amp;rsquo;re writing a deeply nested function.</source>
          <target state="translated">Debido a que no tiene acceso directo a la palabra clave &lt;code&gt;var&lt;/code&gt; , es imposible sombrear una variable externa a prop&amp;oacute;sito, solo puede referirse a ella. Por lo tanto, tenga cuidado de no reutilizar accidentalmente el nombre de una variable externa si est&amp;aacute; escribiendo una funci&amp;oacute;n profundamente anidada.</target>
        </trans-unit>
        <trans-unit id="500d6e30307a158cda828a2b4b51aff3d203b972" translate="yes" xml:space="preserve">
          <source>Besides being used as an ordinary programming language, CoffeeScript may also be written in &amp;ldquo;literate&amp;rdquo; mode. If you name your file with a &lt;code&gt;.litcoffee&lt;/code&gt; extension, you can write it as a Markdown document &amp;mdash; a document that also happens to be executable CoffeeScript code. The compiler will treat any indented blocks (Markdown&amp;rsquo;s way of indicating source code) as executable code, and ignore the rest as comments. Code blocks must also be separated from comments by at least one blank line.</source>
          <target state="translated">Adem&amp;aacute;s de ser utilizado como un lenguaje de programaci&amp;oacute;n ordinario, CoffeeScript tambi&amp;eacute;n puede escribirse en modo &quot;alfabetizado&quot;. Si nombra su archivo con una extensi&amp;oacute;n &lt;code&gt;.litcoffee&lt;/code&gt; , puede escribirlo como un documento Markdown, un documento que tambi&amp;eacute;n resulta ser un c&amp;oacute;digo ejecutable de CoffeeScript. El compilador tratar&amp;aacute; cualquier bloque sangrado (la forma de Markdown de indicar el c&amp;oacute;digo fuente) como c&amp;oacute;digo ejecutable, e ignorar&amp;aacute; el resto como comentarios. Los bloques de c&amp;oacute;digo tambi&amp;eacute;n deben estar separados de los comentarios por al menos una l&amp;iacute;nea en blanco.</target>
        </trans-unit>
        <trans-unit id="52c6757f76d4c59aa1a2f5c458ff43e37ce42012" translate="yes" xml:space="preserve">
          <source>Block Regular Expressions</source>
          <target state="translated">Bloquear las expresiones regulares</target>
        </trans-unit>
        <trans-unit id="88e6d3a6135787b6b130ff7bc9cdd589be5f2a49" translate="yes" xml:space="preserve">
          <source>Block strings, delimited by &lt;code&gt;&quot;&quot;&quot;&lt;/code&gt; or &lt;code&gt;'''&lt;/code&gt;, can be used to hold formatted or indentation-sensitive text (or, if you just don&amp;rsquo;t feel like escaping quotes and apostrophes). The indentation level that begins the block is maintained throughout, so you can keep it all aligned with the body of your code.</source>
          <target state="translated">Las cadenas de bloque, delimitadas por &lt;code&gt;&quot;&quot;&quot;&lt;/code&gt; o &lt;code&gt;'''&lt;/code&gt; , se pueden usar para contener texto con formato o sensible a la sangr&amp;iacute;a (o, si simplemente no desea escapar de comillas y ap&amp;oacute;strofes). El nivel de sangr&amp;iacute;a que comienza el bloque se mantiene en todo momento, para que pueda mantenerlo todo alineado con el cuerpo de su c&amp;oacute;digo.</target>
        </trans-unit>
        <trans-unit id="0860d71a0ec2e658f3d9a3738433ca07ec8f0787" translate="yes" xml:space="preserve">
          <source>Bound (Fat Arrow) Functions</source>
          <target state="translated">Funciones de la Flecha Gorda</target>
        </trans-unit>
        <trans-unit id="c0919393bb78439cc6bdad954e816bfa9e7b5395" translate="yes" xml:space="preserve">
          <source>Bound (fat arrow) functions</source>
          <target state="translated">Las funciones de Bound (flecha gorda)</target>
        </trans-unit>
        <trans-unit id="3146c3bce8a6f3c5954cf4d17548170dd8fa9a5d" translate="yes" xml:space="preserve">
          <source>Bound generator functions</source>
          <target state="translated">Funciones del generador de límites</target>
        </trans-unit>
        <trans-unit id="66a99a10fccdc00a933b3a257862c3f84baadadd" translate="yes" xml:space="preserve">
          <source>Bound generator functions, a.k.a. generator arrow functions, &lt;a href=&quot;https://stackoverflow.com/questions/27661306/can-i-use-es6s-arrow-function-syntax-with-generators-arrow-notation&quot;&gt;aren&amp;rsquo;t allowed in ECMAScript&lt;/a&gt;. You can write &lt;code&gt;function*&lt;/code&gt; or &lt;code&gt;=&amp;gt;&lt;/code&gt;, but not both. Therefore, CoffeeScript code like this:</source>
          <target state="translated">Las funciones de generador vinculadas, tambi&amp;eacute;n conocidas como funciones de flecha de generador, &lt;a href=&quot;https://stackoverflow.com/questions/27661306/can-i-use-es6s-arrow-function-syntax-with-generators-arrow-notation&quot;&gt;no est&amp;aacute;n permitidas en ECMAScript&lt;/a&gt; . Puede escribir la &lt;code&gt;function*&lt;/code&gt; o &lt;code&gt;=&amp;gt;&lt;/code&gt; , pero no ambas. Por lo tanto, el c&amp;oacute;digo CoffeeScript como este:</target>
        </trans-unit>
        <trans-unit id="3f1d6f17ca16b010bf909bd90956813c62360340" translate="yes" xml:space="preserve">
          <source>Breaking Changes From 1.x</source>
          <target state="translated">Rompiendo los cambios de 1.x</target>
        </trans-unit>
        <trans-unit id="3501da7b50f11f0bed95d1651f5526076186c9d5" translate="yes" xml:space="preserve">
          <source>Breaking Changes From CoffeeScript 1.x to 2</source>
          <target state="translated">Rompiendo los cambios de CoffeeScript 1.x a 2</target>
        </trans-unit>
        <trans-unit id="476e56d0eff6f65aab9d09fede93409b5105aa4b" translate="yes" xml:space="preserve">
          <source>But it&amp;rsquo;s also helpful for dealing with functions that return multiple values.</source>
          <target state="translated">Pero tambi&amp;eacute;n es &amp;uacute;til para manejar funciones que devuelven m&amp;uacute;ltiples valores.</target>
        </trans-unit>
        <trans-unit id="eed3eed03e17d439596291023c0881f19f4179f4" translate="yes" xml:space="preserve">
          <source>By default, Babel doesn&amp;rsquo;t do anything&amp;mdash;it doesn&amp;rsquo;t make assumptions about what you want to transpile to. You need to provide it with a configuration so that it knows what to do. One way to do this is by creating a &lt;a href=&quot;https://babeljs.io/docs/usage/babelrc/&quot;&gt;&lt;code&gt;.babelrc&lt;/code&gt; file&lt;/a&gt; in the folder containing the files you&amp;rsquo;re compiling, or in any parent folder up the path above those files. (Babel supports &lt;a href=&quot;https://babeljs.io/docs/usage/babelrc/&quot;&gt;other ways&lt;/a&gt;, too.) A minimal &lt;code&gt;.babelrc&lt;/code&gt; file would be just &lt;code&gt;{ &quot;presets&quot;: [&quot;@babel/env&quot;] }&lt;/code&gt;. This implies that you have installed &lt;a href=&quot;https://babeljs.io/docs/plugins/preset-env/&quot;&gt;&lt;code&gt;@babel/preset-env&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="translated">De manera predeterminada, Babel no hace nada, no hace suposiciones sobre a qu&amp;eacute; desea transferir. Debe proporcionarle una configuraci&amp;oacute;n para que sepa qu&amp;eacute; hacer. Una forma de hacerlo es mediante la creaci&amp;oacute;n de un &lt;a href=&quot;https://babeljs.io/docs/usage/babelrc/&quot;&gt;archivo &lt;/a&gt; &lt;code&gt;.babelrc&lt;/code&gt; en la carpeta que contiene los archivos que est&amp;aacute; compilando, o en cualquier carpeta principal que est&amp;eacute; en la ruta sobre esos archivos. (Babel tambi&amp;eacute;n admite &lt;a href=&quot;https://babeljs.io/docs/usage/babelrc/&quot;&gt;otras formas&lt;/a&gt; ). Un archivo &lt;code&gt;.babelrc&lt;/code&gt; m&amp;iacute;nimo ser&amp;iacute;a solo &lt;code&gt;{ &quot;presets&quot;: [&quot;@babel/env&quot;] }&lt;/code&gt; . Esto implica que ha instalado &lt;a href=&quot;https://babeljs.io/docs/plugins/preset-env/&quot;&gt; &lt;code&gt;@babel/preset-env&lt;/code&gt; &lt;/a&gt; :</target>
        </trans-unit>
        <trans-unit id="49f1d818998e74de59695f157376f3a90606565f" translate="yes" xml:space="preserve">
          <source>Cake, and Cakefiles</source>
          <target state="translated">Pastel,y Archivos de pastel</target>
        </trans-unit>
        <trans-unit id="0088170b2bb2e7f289a6285cc617ed958ec50055" translate="yes" xml:space="preserve">
          <source>Chained Comparisons</source>
          <target state="translated">Comparaciones encadenadas</target>
        </trans-unit>
        <trans-unit id="0ccff6f387e0efef20c206a781d53627c48f2db7" translate="yes" xml:space="preserve">
          <source>Chaining Function Calls</source>
          <target state="translated">La función de encadenamiento llama</target>
        </trans-unit>
        <trans-unit id="0671ba2a2caa16a2ef58982abbdd6ace7b22a6a2" translate="yes" xml:space="preserve">
          <source>Class constructors can&amp;rsquo;t be invoked without &lt;code&gt;new&lt;/code&gt;:</source>
          <target state="translated">Los constructores de clases no pueden invocarse sin &lt;code&gt;new&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="c53d0a7efe848343f2bc3b9f8c6dabb21e16c959" translate="yes" xml:space="preserve">
          <source>Class methods can&amp;rsquo;t be used with &lt;code&gt;new&lt;/code&gt; (uncommon):</source>
          <target state="translated">Los m&amp;eacute;todos de clase no se pueden usar con &lt;code&gt;new&lt;/code&gt; (poco com&amp;uacute;n):</target>
        </trans-unit>
        <trans-unit id="ed1846afee3be21521286932b99e2aeae9e6414a" translate="yes" xml:space="preserve">
          <source>Classes</source>
          <target state="translated">Classes</target>
        </trans-unit>
        <trans-unit id="76ac356fa19e9b009cd862e7b800bf5b501caee5" translate="yes" xml:space="preserve">
          <source>Classes are compiled to ES2015 classes</source>
          <target state="translated">Las clases se compilan a las clases de ES2015</target>
        </trans-unit>
        <trans-unit id="ed3b73338063d6639e5a81aae81f93fb2d0aed3e" translate="yes" xml:space="preserve">
          <source>Code blocks need to maintain consistent indentation relative to each other. When the compiler parses your Literate CoffeeScript file, it first discards all the non-code block lines and then parses the remainder as a regular CoffeeScript file. Therefore the code blocks need to be written as if the comment lines don&amp;rsquo;t exist, with consistent indentation (including whether they are indented with tabs or spaces).</source>
          <target state="translated">Los bloques de c&amp;oacute;digo deben mantener una sangr&amp;iacute;a constante entre s&amp;iacute;. Cuando el compilador analiza su archivo Literate CoffeeScript, primero descarta todas las l&amp;iacute;neas de bloque sin c&amp;oacute;digo y luego analiza el resto como un archivo CoffeeScript normal. Por lo tanto, los bloques de c&amp;oacute;digo deben escribirse como si las l&amp;iacute;neas de comentarios no existieran, con sangr&amp;iacute;a consistente (incluso si est&amp;aacute;n sangradas con tabulaciones o espacios).</target>
        </trans-unit>
        <trans-unit id="5fe0a62d44f69e6416546051403b163d3b065fd0" translate="yes" xml:space="preserve">
          <source>Code blocks should also now maintain a consistent indentation level&amp;mdash;so an indentation of one tab (or whatever you consider to be a tab stop, like 2 spaces or 4 spaces) should be treated as your code&amp;rsquo;s &amp;ldquo;left margin,&amp;rdquo; with all code in the file relative to that column.</source>
          <target state="translated">Los bloques de c&amp;oacute;digo ahora tambi&amp;eacute;n deben mantener un nivel de sangr&amp;iacute;a constante, por lo que una sangr&amp;iacute;a de una pesta&amp;ntilde;a (o lo que considere una tabulaci&amp;oacute;n, como 2 espacios o 4 espacios) debe tratarse como el &quot;margen izquierdo&quot; de su c&amp;oacute;digo, con todo el c&amp;oacute;digo en el archivo relativo a esa columna.</target>
        </trans-unit>
        <trans-unit id="d51fafef78efa145bafb428481015a68d05f79b1" translate="yes" xml:space="preserve">
          <source>Code blocks that you want to be part of the commentary, and not executed, must have at least one line (ideally the first line of the block) completely unindented.</source>
          <target state="translated">Los bloques de código que quieran formar parte del comentario,y no ser ejecutados,deben tener al menos una línea (lo ideal es la primera línea del bloque)completamente desenterrada.</target>
        </trans-unit>
        <trans-unit id="082a42c3704ee38739d3dd41511c5b78ea5ca8f3" translate="yes" xml:space="preserve">
          <source>CoffeeScript</source>
          <target state="translated">CoffeeScript</target>
        </trans-unit>
        <trans-unit id="555ad83e1b73fa461de685e684efafbb06947391" translate="yes" xml:space="preserve">
          <source>CoffeeScript 1 provided the &lt;code&gt;class&lt;/code&gt; and &lt;code&gt;extends&lt;/code&gt; keywords as syntactic sugar for working with prototypal functions. With ES2015, JavaScript has adopted those keywords; so CoffeeScript 2 compiles its &lt;code&gt;class&lt;/code&gt; and &lt;code&gt;extends&lt;/code&gt; keywords to ES2015 classes.</source>
          <target state="translated">CoffeeScript 1 proporcion&amp;oacute; la &lt;code&gt;class&lt;/code&gt; y &lt;code&gt;extends&lt;/code&gt; palabras clave como az&amp;uacute;car sint&amp;aacute;ctica para trabajar con funciones protot&amp;iacute;picas. Con ES2015, JavaScript ha adoptado esas palabras clave; entonces CoffeeScript 2 compila su &lt;code&gt;class&lt;/code&gt; y &lt;code&gt;extends&lt;/code&gt; palabras clave a las clases ES2015.</target>
        </trans-unit>
        <trans-unit id="f07be14301b91058d1c6c7135618a2b966428618" translate="yes" xml:space="preserve">
          <source>CoffeeScript 1.x allowed the &lt;code&gt;extends&lt;/code&gt; keyword to set up prototypal inheritance between functions, and &lt;code&gt;super&lt;/code&gt; could be used manually prototype-assigned functions:</source>
          <target state="translated">CoffeeScript 1.x permiti&amp;oacute; que la palabra clave &lt;code&gt;extends&lt;/code&gt; configurara la herencia protot&amp;iacute;pica entre funciones, y &lt;code&gt;super&lt;/code&gt; podr&amp;iacute;a usarse manualmente para funciones asignadas por prototipo:</target>
        </trans-unit>
        <trans-unit id="2e05d2fb1ef65aeec22154353f09cc33a5cf2c6c" translate="yes" xml:space="preserve">
          <source>CoffeeScript 2</source>
          <target state="translated">CoffeeScript 2</target>
        </trans-unit>
        <trans-unit id="e14399e2ffb6a507f01ea44f0297fe153054114d" translate="yes" xml:space="preserve">
          <source>CoffeeScript 2 aims to output as much idiomatic ES2015+ syntax as possible with as few breaking changes from CoffeeScript 1.x as possible. Some breaking changes, unfortunately, were unavoidable.</source>
          <target state="translated">CoffeeScript 2 tiene como objetivo producir la mayor cantidad de sintaxis idiomática ES2015+posible con la menor cantidad de cambios de ruptura de CoffeeScript 1.x como sea posible.Algunos cambios de ruptura,desafortunadamente,fueron inevitables.</target>
        </trans-unit>
        <trans-unit id="a88022140a2d5d855a42ac84ed596e5d08bb28cc" translate="yes" xml:space="preserve">
          <source>CoffeeScript 2 generates JavaScript that uses the latest, modern syntax. The runtime or browsers where you want your code to run &lt;a href=&quot;#compatibility&quot;&gt;might not support all of that syntax&lt;/a&gt;. In that case, we want to convert modern JavaScript into older JavaScript that will run in older versions of Node or older browsers; for example, &lt;code&gt;{ a } = obj&lt;/code&gt; into &lt;code&gt;a = obj.a&lt;/code&gt;. This is done via transpilers like &lt;a href=&quot;https://babeljs.io/&quot;&gt;Babel&lt;/a&gt;, &lt;a href=&quot;https://buble.surge.sh/&quot;&gt;Bubl&amp;eacute;&lt;/a&gt; or &lt;a href=&quot;https://github.com/google/traceur-compiler&quot;&gt;Traceur Compiler&lt;/a&gt;.</source>
          <target state="translated">CoffeeScript 2 genera JavaScript que utiliza la sintaxis m&amp;aacute;s reciente y moderna. Es posible que el tiempo de ejecuci&amp;oacute;n o los navegadores donde desea que se ejecute su c&amp;oacute;digo &lt;a href=&quot;#compatibility&quot;&gt;no admitan toda esa sintaxis&lt;/a&gt; . En ese caso, queremos convertir JavaScript moderno en JavaScript anterior que se ejecutar&amp;aacute; en versiones anteriores de Node o navegadores anteriores; por ejemplo, &lt;code&gt;{ a } = obj&lt;/code&gt; en &lt;code&gt;a = obj.a&lt;/code&gt; . Esto se hace a trav&amp;eacute;s de transpiladores como &lt;a href=&quot;https://babeljs.io/&quot;&gt;Babel&lt;/a&gt; , &lt;a href=&quot;https://buble.surge.sh/&quot;&gt;Bubl&amp;eacute;&lt;/a&gt; o &lt;a href=&quot;https://github.com/google/traceur-compiler&quot;&gt;Traceur Compiler&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="ca8a8ef142b86f16c228064c3ea4de5a99994a0a" translate="yes" xml:space="preserve">
          <source>CoffeeScript 2&amp;rsquo;s parsing of Literate CoffeeScript has been refactored to now be more careful about not treating indented lists as code blocks; but this means that all code blocks (unless they are to be interpreted as comments) must be separated by at least one blank line from lists.</source>
          <target state="translated">El an&amp;aacute;lisis de CoffeeScript 2 de Literate CoffeeScript se ha refactorizado para que ahora tenga m&amp;aacute;s cuidado de no tratar las listas sangradas como bloques de c&amp;oacute;digo; pero esto significa que todos los bloques de c&amp;oacute;digo (a menos que se interpreten como comentarios) deben estar separados por al menos una l&amp;iacute;nea en blanco de las listas.</target>
        </trans-unit>
        <trans-unit id="0b2ffccac37a106e2b15a0c8a15a92e2320522bc" translate="yes" xml:space="preserve">
          <source>CoffeeScript borrows &lt;a href=&quot;https://docs.python.org/3/reference/expressions.html#not-in&quot;&gt;chained comparisons&lt;/a&gt; from Python &amp;mdash; making it easy to test if a value falls within a certain range.</source>
          <target state="translated">CoffeeScript toma prestadas &lt;a href=&quot;https://docs.python.org/3/reference/expressions.html#not-in&quot;&gt;comparaciones encadenadas&lt;/a&gt; de Python, lo que hace que sea f&amp;aacute;cil probar si un valor cae dentro de un cierto rango.</target>
        </trans-unit>
        <trans-unit id="897a6b8fdb2cee9e51b9a916b9a26978c1b5ce7a" translate="yes" xml:space="preserve">
          <source>CoffeeScript can compile &lt;code&gt;if&lt;/code&gt; statements into JavaScript expressions, using the ternary operator when possible, and closure wrapping otherwise. There is no explicit ternary statement in CoffeeScript &amp;mdash; you simply use a regular &lt;code&gt;if&lt;/code&gt; statement on a single line.</source>
          <target state="translated">CoffeeScript puede compilar &lt;code&gt;if&lt;/code&gt; declaraciones se convierten en expresiones de JavaScript, utilizando el operador ternario cuando sea posible, y cerrando la envoltura de lo contrario. No hay una declaraci&amp;oacute;n ternaria expl&amp;iacute;cita en CoffeeScript: simplemente usa una declaraci&amp;oacute;n &lt;code&gt;if&lt;/code&gt; regular en una sola l&amp;iacute;nea.</target>
        </trans-unit>
        <trans-unit id="ed27d5551e9a44acadffac9bd86e6ee4d3d53ca3" translate="yes" xml:space="preserve">
          <source>CoffeeScript does not do any type checking itself; the JavaScript output you see above needs to get passed to Flow for it to validate your code. We expect most people will use a &lt;a href=&quot;#es2015plus-output&quot;&gt;build tool&lt;/a&gt; for this, but here&amp;rsquo;s how to do it the simplest way possible using the &lt;a href=&quot;#cli&quot;&gt;CoffeeScript&lt;/a&gt; and &lt;a href=&quot;https://flow.org/en/docs/usage/&quot;&gt;Flow&lt;/a&gt; command-line tools, assuming you&amp;rsquo;ve already &lt;a href=&quot;https://flow.org/en/docs/install/&quot;&gt;installed Flow&lt;/a&gt; and the &lt;a href=&quot;#installation&quot;&gt;latest CoffeeScript&lt;/a&gt; in your project folder:</source>
          <target state="translated">CoffeeScript no realiza ning&amp;uacute;n tipo de comprobaci&amp;oacute;n; la salida de JavaScript que ve arriba debe pasar a Flow para que valide su c&amp;oacute;digo. Esperamos que la mayor&amp;iacute;a de la gente use una &lt;a href=&quot;#es2015plus-output&quot;&gt;herramienta de compilaci&amp;oacute;n&lt;/a&gt; para esto, pero as&amp;iacute; es c&amp;oacute;mo hacerlo de la manera m&amp;aacute;s simple posible usando las herramientas de l&amp;iacute;nea de comandos de &lt;a href=&quot;#cli&quot;&gt;CoffeeScript&lt;/a&gt; y &lt;a href=&quot;https://flow.org/en/docs/usage/&quot;&gt;Flow&lt;/a&gt; , suponiendo que ya haya &lt;a href=&quot;https://flow.org/en/docs/install/&quot;&gt;instalado Flow&lt;/a&gt; y la &lt;a href=&quot;#installation&quot;&gt;&amp;uacute;ltima versi&amp;oacute;n&lt;/a&gt; de CoffeeScript en su carpeta de proyecto:</target>
        </trans-unit>
        <trans-unit id="06ec89ba18aa176efa0f4a92848e200506fd34ed" translate="yes" xml:space="preserve">
          <source>CoffeeScript has a shortcut for creating objects when you want the key to be set with a variable of the same name. Note that the &lt;code&gt;{&lt;/code&gt; and &lt;code&gt;}&lt;/code&gt; are required for this shorthand.</source>
          <target state="translated">CoffeeScript tiene un acceso directo para crear objetos cuando desea que la clave se configure con una variable del mismo nombre. Tenga en cuenta que los &lt;code&gt;{&lt;/code&gt; y &lt;code&gt;}&lt;/code&gt; son necesarios para esta taquigraf&amp;iacute;a.</target>
        </trans-unit>
        <trans-unit id="39400b54ccebc49551a1b624ebd5fccd176ecf9a" translate="yes" xml:space="preserve">
          <source>CoffeeScript includes a (very) simple build system similar to &lt;a href=&quot;https://www.gnu.org/software/make/&quot;&gt;Make&lt;/a&gt; and &lt;a href=&quot;http://rake.rubyforge.org/&quot;&gt;Rake&lt;/a&gt;. Naturally, it&amp;rsquo;s called Cake, and is used for the tasks that build and test the CoffeeScript language itself. Tasks are defined in a file named &lt;code&gt;Cakefile&lt;/code&gt;, and can be invoked by running &lt;code&gt;cake [task]&lt;/code&gt; from within the directory. To print a list of all the tasks and options, just type &lt;code&gt;cake&lt;/code&gt;.</source>
          <target state="translated">CoffeeScript incluye un sistema de compilaci&amp;oacute;n (muy) simple similar a &lt;a href=&quot;https://www.gnu.org/software/make/&quot;&gt;Make&lt;/a&gt; and &lt;a href=&quot;http://rake.rubyforge.org/&quot;&gt;Rake&lt;/a&gt; . Naturalmente, se llama Cake y se usa para las tareas que crean y prueban el lenguaje CoffeeScript. Las tareas se definen en un archivo llamado &lt;code&gt;Cakefile&lt;/code&gt; y se pueden invocar ejecutando &lt;code&gt;cake [task]&lt;/code&gt; desde el directorio. Para imprimir una lista de todas las tareas y opciones, simplemente escriba &lt;code&gt;cake&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="eb466ef914e340bd4cbaa0c07a1d399d449cd21c" translate="yes" xml:space="preserve">
          <source>CoffeeScript includes support for generating source maps, a way to tell your JavaScript engine what part of your CoffeeScript program matches up with the code being evaluated. Browsers that support it can automatically use source maps to show your original source code in the debugger. To generate source maps alongside your JavaScript files, pass the &lt;code&gt;--map&lt;/code&gt; or &lt;code&gt;-m&lt;/code&gt; flag to the compiler.</source>
          <target state="translated">CoffeeScript incluye soporte para generar mapas fuente, una forma de decirle a su motor JavaScript qu&amp;eacute; parte de su programa CoffeeScript coincide con el c&amp;oacute;digo que se est&amp;aacute; evaluando. Los navegadores que lo admiten pueden usar autom&amp;aacute;ticamente mapas fuente para mostrar su c&amp;oacute;digo fuente original en el depurador. Para generar mapas fuente junto con sus archivos JavaScript, pase el &lt;code&gt;--map&lt;/code&gt; o &lt;code&gt;-m&lt;/code&gt; al compilador.</target>
        </trans-unit>
        <trans-unit id="3db6d625e027881b87b075cf48db7c76a9bdaa5a" translate="yes" xml:space="preserve">
          <source>CoffeeScript supports &lt;a href=&quot;https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Template_literals#Tagged_template_literals&quot;&gt;ES2015 tagged template literals&lt;/a&gt;, which enable customized string interpolation. If you immediately prefix a string with a function name (no space between the two), CoffeeScript will output this &amp;ldquo;function plus string&amp;rdquo; combination as an ES2015 tagged template literal, which will &lt;a href=&quot;https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Template_literals#Tagged_template_literals&quot;&gt;behave accordingly&lt;/a&gt;: the function is called, with the parameters being the input text and expression parts that make up the interpolated string. The function can then assemble these parts into an output string, providing custom string interpolation.</source>
          <target state="translated">CoffeeScript admite &lt;a href=&quot;https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Template_literals#Tagged_template_literals&quot;&gt;literales de plantilla con etiquetas ES2015&lt;/a&gt; , que permiten la interpolaci&amp;oacute;n de cadenas personalizada. Si inmediatamente agrega un prefijo a una cadena con el nombre de una funci&amp;oacute;n (sin espacio entre los dos), CoffeeScript generar&amp;aacute; esta combinaci&amp;oacute;n de &quot;funci&amp;oacute;n m&amp;aacute;s cadena&quot; como un literal de plantilla etiquetado ES2015, que se &lt;a href=&quot;https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Template_literals#Tagged_template_literals&quot;&gt;comportar&amp;aacute; en consecuencia&lt;/a&gt; : se llama a la funci&amp;oacute;n, siendo los par&amp;aacute;metros el texto de entrada y partes de expresi&amp;oacute;n que forman la cadena interpolada. La funci&amp;oacute;n puede ensamblar estas partes en una cadena de salida, proporcionando una interpolaci&amp;oacute;n de cadena personalizada.</target>
        </trans-unit>
        <trans-unit id="6062d895dad2882c3d733740c8180cb30cd93245" translate="yes" xml:space="preserve">
          <source>CoffeeScript supports ES2015 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/function*&quot;&gt;generator functions&lt;/a&gt; through the &lt;code&gt;yield&lt;/code&gt; keyword. There&amp;rsquo;s no &lt;code&gt;function*(){}&lt;/code&gt; nonsense &amp;mdash; a generator in CoffeeScript is simply a function that yields.</source>
          <target state="translated">CoffeeScript admite las funciones del &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/function*&quot;&gt;generador&lt;/a&gt; ES2015 a trav&amp;eacute;s de la palabra clave de &lt;code&gt;yield&lt;/code&gt; . No hay ninguna &lt;code&gt;function*(){}&lt;/code&gt; sin sentido: un generador en CoffeeScript es simplemente una funci&amp;oacute;n que rinde.</target>
        </trans-unit>
        <trans-unit id="a64e782a7ca1ed608a5e5d8b58e56c5b34418abf" translate="yes" xml:space="preserve">
          <source>CoffeeScript supports interspersed XML elements, without the need for separate plugins or special settings. The XML elements will be compiled as such, outputting JSX that could be parsed like any normal JSX file, for example by &lt;a href=&quot;https://babeljs.io/docs/plugins/transform-react-jsx/&quot;&gt;Babel with the React JSX transform&lt;/a&gt;. CoffeeScript does &lt;em&gt;not&lt;/em&gt; output &lt;code&gt;React.createElement&lt;/code&gt; calls or any code specific to React or any other framework. It is up to you to attach another step in your build chain to convert this JSX to whatever function calls you wish the XML elements to compile to.</source>
          <target state="translated">CoffeeScript admite elementos XML intercalados, sin la necesidad de complementos separados o configuraciones especiales. Los elementos XML se compilar&amp;aacute;n como tales, generando JSX que podr&amp;iacute;a analizarse como cualquier archivo JSX normal, por ejemplo, &lt;a href=&quot;https://babeljs.io/docs/plugins/transform-react-jsx/&quot;&gt;Babel con la transformaci&amp;oacute;n React JSX&lt;/a&gt; . CoffeeScript hace &lt;em&gt;no&lt;/em&gt; salida &lt;code&gt;React.createElement&lt;/code&gt; llamadas o cualquier c&amp;oacute;digo espec&amp;iacute;fico para reaccionar o cualquier otro marco. Depende de usted adjuntar otro paso en su cadena de compilaci&amp;oacute;n para convertir este JSX a cualquier funci&amp;oacute;n que desee que compilen los elementos XML.</target>
        </trans-unit>
        <trans-unit id="59b0754344014d9d6347724f39bcacbaf47c2e7d" translate="yes" xml:space="preserve">
          <source>Command Line</source>
          <target state="translated">Línea de mando</target>
        </trans-unit>
        <trans-unit id="fce06e20e5f7f74aacccab40b59b75a56c8f7305" translate="yes" xml:space="preserve">
          <source>Comments</source>
          <target state="translated">Comments</target>
        </trans-unit>
        <trans-unit id="5d60c7dd62fdcf4abcc61a6a7d335b7117968b4d" translate="yes" xml:space="preserve">
          <source>Compatibility</source>
          <target state="translated">Compatibility</target>
        </trans-unit>
        <trans-unit id="4300e2d5a6e06edd248521ea98c722082a8b228a" translate="yes" xml:space="preserve">
          <source>Compile a &lt;code&gt;.coffee&lt;/code&gt; script into a &lt;code&gt;.js&lt;/code&gt; JavaScript file of the same name.</source>
          <target state="translated">Compile un script &lt;code&gt;.coffee&lt;/code&gt; en un archivo JavaScript &lt;code&gt;.js&lt;/code&gt; del mismo nombre.</target>
        </trans-unit>
        <trans-unit id="e6a3565f7ffca2f5f11e68c1b128efdad5b5cdd7" translate="yes" xml:space="preserve">
          <source>Compile a directory tree of &lt;code&gt;.coffee&lt;/code&gt; files in &lt;code&gt;src&lt;/code&gt; into a parallel tree of &lt;code&gt;.js&lt;/code&gt; files in &lt;code&gt;lib&lt;/code&gt;:</source>
          <target state="translated">Compile un &amp;aacute;rbol de directorios de archivos &lt;code&gt;.coffee&lt;/code&gt; en &lt;code&gt;src&lt;/code&gt; en un &amp;aacute;rbol paralelo de archivos &lt;code&gt;.js&lt;/code&gt; en &lt;code&gt;lib&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="0a3b0300d1b064869ff33a3d2ebe6e0e6baae51a" translate="yes" xml:space="preserve">
          <source>Compile and print a little snippet of CoffeeScript directly from the command line. For example:</source>
          <target state="translated">Compila e imprime un pequeño fragmento de CoffeeScript directamente desde la línea de comandos.Por ejemplo:</target>
        </trans-unit>
        <trans-unit id="7c79230adcfcd792fe3990fd8abbc8770972c8c7" translate="yes" xml:space="preserve">
          <source>Compile the JavaScript without the &lt;a href=&quot;#lexical-scope&quot;&gt;top-level function safety wrapper&lt;/a&gt;.</source>
          <target state="translated">Compile JavaScript sin la &lt;a href=&quot;#lexical-scope&quot;&gt;funci&amp;oacute;n de seguridad de nivel superior&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="cfc3a5e15482fb7edb84902d1ef3f824dafd8030" translate="yes" xml:space="preserve">
          <source>Comprehensions can also be used to iterate over the keys and values in an object. Use &lt;code&gt;of&lt;/code&gt; to signal comprehension over the properties of an object instead of the values in an array.</source>
          <target state="translated">Las comprensiones tambi&amp;eacute;n se pueden usar para iterar sobre las claves y los valores de un objeto. Uso &lt;code&gt;of&lt;/code&gt; para indicar la comprensi&amp;oacute;n sobre las propiedades de un objeto en lugar de los valores en una matriz.</target>
        </trans-unit>
        <trans-unit id="23c37ee042c74f1f491788e4316571902ea348c4" translate="yes" xml:space="preserve">
          <source>Comprehensions should be able to handle most places where you otherwise would use a loop, &lt;code&gt;each&lt;/code&gt;/&lt;code&gt;forEach&lt;/code&gt;, &lt;code&gt;map&lt;/code&gt;, or &lt;code&gt;select&lt;/code&gt;/&lt;code&gt;filter&lt;/code&gt;, for example:</source>
          <target state="translated">Las comprensiones deber&amp;iacute;an poder manejar la mayor&amp;iacute;a de los lugares en los que de otra forma usar&amp;iacute;a un bucle, &lt;code&gt;each&lt;/code&gt; / para &lt;code&gt;forEach&lt;/code&gt; , &lt;code&gt;map&lt;/code&gt; a o &lt;code&gt;select&lt;/code&gt; / &lt;code&gt;filter&lt;/code&gt; , por ejemplo:</target>
        </trans-unit>
        <trans-unit id="f4408c72041f1642066f98a95c77bb7d47148a6c" translate="yes" xml:space="preserve">
          <source>Concatenate a list of files into a single script:</source>
          <target state="translated">Concatenar una lista de archivos en un solo guión:</target>
        </trans-unit>
        <trans-unit id="ec59c7801544b7219c543bca6994038a564b01b6" translate="yes" xml:space="preserve">
          <source>Default values for function parameters and destructured elements</source>
          <target state="translated">Valores por defecto de los parámetros de la función y los elementos desestructurados</target>
        </trans-unit>
        <trans-unit id="bf1be2b7ad07bae2fe92475d10173eb638774def" translate="yes" xml:space="preserve">
          <source>Definition</source>
          <target state="translated">Definition</target>
        </trans-unit>
        <trans-unit id="55f8ebc805e65b5b71ddafdae390e3be2bcd69af" translate="yes" xml:space="preserve">
          <source>Description</source>
          <target state="translated">Description</target>
        </trans-unit>
        <trans-unit id="3971221e4434ee7c22e0cd88456435a7a35e2f99" translate="yes" xml:space="preserve">
          <source>Destructuring Assignment</source>
          <target state="translated">Desestructuración Asignación</target>
        </trans-unit>
        <trans-unit id="693d95d6190509bd73966d59486aedaea1f2f65e" translate="yes" xml:space="preserve">
          <source>Destructuring assignment can be used with any depth of array and object nesting, to help pull out deeply nested properties.</source>
          <target state="translated">La asignación de la desestructuración puede usarse con cualquier profundidad de arreglo y anidación de objetos,para ayudar a sacar las propiedades profundamente anidadas.</target>
        </trans-unit>
        <trans-unit id="084d80478954c0fd6df8a1f5371f23b6b7d2b0bb" translate="yes" xml:space="preserve">
          <source>Destructuring assignment can even be combined with splats.</source>
          <target state="translated">La asignación de desestructuración puede incluso combinarse con splats.</target>
        </trans-unit>
        <trans-unit id="03c2ead8f6c7800e07ddee30aab9ffe372df05ad" translate="yes" xml:space="preserve">
          <source>Destructuring assignment is also useful when combined with class constructors to assign properties to your instance from an options object passed to the constructor.</source>
          <target state="translated">La asignación de la desestructuración también es útil cuando se combina con los constructores de clases para asignar propiedades a su instancia a partir de un objeto de opciones pasado al constructor.</target>
        </trans-unit>
        <trans-unit id="ee64309bcad68d432618adc16618ac8cd4342081" translate="yes" xml:space="preserve">
          <source>Double-quoted block strings, like other double-quoted strings, allow interpolation.</source>
          <target state="translated">Las cadenas de bloques de doble cita,como otras cadenas de doble cita,permiten la interpolación.</target>
        </trans-unit>
        <trans-unit id="76c71025ffe95216c3f2960d37aa6448ff56912e" translate="yes" xml:space="preserve">
          <source>Due to a syntax clash with &lt;code&gt;super&lt;/code&gt; with accessors, &amp;ldquo;bare&amp;rdquo; &lt;code&gt;super&lt;/code&gt; (the keyword &lt;code&gt;super&lt;/code&gt; without parentheses) no longer compiles to a super call forwarding all arguments.</source>
          <target state="translated">Debido a un enfrentamiento con la sintaxis &lt;code&gt;super&lt;/code&gt; con descriptores de acceso, &amp;ldquo;desnudo&amp;rdquo; &lt;code&gt;super&lt;/code&gt; (la palabra clave &lt;code&gt;super&lt;/code&gt; sin par&amp;eacute;ntesis) ya no se compila en una llamada s&amp;uacute;per reenviar todos los argumentos.</target>
        </trans-unit>
        <trans-unit id="cd6c049a857c66bb824182c8c447a61a862212dd" translate="yes" xml:space="preserve">
          <source>Due to the hoisting required to compile to ES2015 classes, dynamic keys in class methods can&amp;rsquo;t use values from the executable class body unless the methods are assigned in prototype style.</source>
          <target state="translated">Debido a la elevaci&amp;oacute;n necesaria para compilar las clases de ES2015, las claves din&amp;aacute;micas en los m&amp;eacute;todos de clase no pueden usar valores del cuerpo de la clase ejecutable a menos que los m&amp;eacute;todos se asignen en estilo prototipo.</target>
        </trans-unit>
        <trans-unit id="abd4833636e3bf75c96fa84f99c79c1dfd504f8f" translate="yes" xml:space="preserve">
          <source>Due to the switch to ES2015 &lt;code&gt;extends&lt;/code&gt; and &lt;code&gt;super&lt;/code&gt;, using these keywords for prototypal functions are no longer supported. The above case could be refactored to:</source>
          <target state="translated">Debido al cambio a ES2015 &lt;code&gt;extends&lt;/code&gt; y &lt;code&gt;super&lt;/code&gt; , el uso de estas palabras clave para las funciones protot&amp;iacute;picos ya no se soportan. El caso anterior podr&amp;iacute;a refactorizarse para:</target>
        </trans-unit>
        <trans-unit id="68f15e98bbba94444d4a5758a91c0b8c7f4919c0" translate="yes" xml:space="preserve">
          <source>ES2015 classes and their methods have some restrictions beyond those on regular functions.</source>
          <target state="translated">Las clases de ES2015 y sus métodos tienen algunas restricciones más allá de las funciones regulares.</target>
        </trans-unit>
        <trans-unit id="686eb8e68104e706ebea5afdbc1c1082e68d1d72" translate="yes" xml:space="preserve">
          <source>ES2015 classes don&amp;rsquo;t allow bound (fat arrow) methods. The CoffeeScript compiler goes through some contortions to preserve support for them, but one thing that can&amp;rsquo;t be accommodated is calling a bound method before it is bound:</source>
          <target state="translated">Las clases ES2015 no permiten m&amp;eacute;todos enlazados (flecha gruesa). El compilador CoffeeScript pasa por algunas contorsiones para preservar el soporte para ellos, pero una cosa que no se puede acomodar es llamar a un m&amp;eacute;todo enlazado antes de que est&amp;eacute; enlazado:</target>
        </trans-unit>
        <trans-unit id="ee88a511a3dd54469352e7cc993bdb9390253e24" translate="yes" xml:space="preserve">
          <source>ES2015 modules are supported in CoffeeScript, with very similar &lt;code&gt;import&lt;/code&gt; and &lt;code&gt;export&lt;/code&gt; syntax:</source>
          <target state="translated">Los m&amp;oacute;dulos ES2015 son compatibles con CoffeeScript, con una sintaxis de &lt;code&gt;import&lt;/code&gt; aci&amp;oacute;n y &lt;code&gt;export&lt;/code&gt; aci&amp;oacute;n muy similar :</target>
        </trans-unit>
        <trans-unit id="a673b896c1665557ccd0cee7c0afccf5405fc642" translate="yes" xml:space="preserve">
          <source>ES2017&amp;rsquo;s &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/async_function&quot;&gt;async functions&lt;/a&gt; are supported through the &lt;code&gt;await&lt;/code&gt; keyword. Like with generators, there&amp;rsquo;s no need for an &lt;code&gt;async&lt;/code&gt; keyword; an async function in CoffeeScript is simply a function that awaits.</source>
          <target state="translated">ES2017 de &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/async_function&quot;&gt;funciones as&amp;iacute;ncronas&lt;/a&gt; son apoyados a trav&amp;eacute;s de la &lt;code&gt;await&lt;/code&gt; la palabra clave. Al igual que con los generadores, no hay necesidad de una palabra clave &lt;code&gt;async&lt;/code&gt; ; Una funci&amp;oacute;n as&amp;iacute;ncrona en CoffeeScript es simplemente una funci&amp;oacute;n que espera.</target>
        </trans-unit>
        <trans-unit id="bfc783ddd79a9914d8fbf1e5c70ddebce72e3d6a" translate="yes" xml:space="preserve">
          <source>Embedded JavaScript</source>
          <target state="translated">Javascript incrustado</target>
        </trans-unit>
        <trans-unit id="a71f86015fbc5b12f95827124758fcdcd748d4e5" translate="yes" xml:space="preserve">
          <source>Escape backslashes before backticks with more backslashes: &lt;code&gt;\\\`​&lt;/code&gt; becomes &lt;code&gt;\`​&lt;/code&gt;.</source>
          <target state="translated">Escapar las barras invertidas antes de acentos abiertos con m&amp;aacute;s barras invertidas: &lt;code&gt;\\\`​&lt;/code&gt; se convierte en &lt;code&gt;\`​&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="ec5f2d9c1baacad5c9a2a2c7ebd37ab7e094639c" translate="yes" xml:space="preserve">
          <source>Escape backticks with backslashes: &lt;code&gt;\`​&lt;/code&gt; becomes &lt;code&gt;`​&lt;/code&gt;.</source>
          <target state="translated">Escapar acentos abiertos con barras invertidas: &lt;code&gt;\`​&lt;/code&gt; se convierte en &lt;code&gt;`​&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="ca324f5a8ab7f029b85119d0ccec4498c155b7a5" translate="yes" xml:space="preserve">
          <source>Even though functions will always return their final value, it&amp;rsquo;s both possible and encouraged to return early from a function body writing out the explicit return (&lt;code&gt;return value&lt;/code&gt;), when you know that you&amp;rsquo;re done.</source>
          <target state="translated">A pesar de que las funciones siempre devolver&amp;aacute;n su valor final, es posible y alentado regresar temprano de un cuerpo de funci&amp;oacute;n que escribe el retorno expl&amp;iacute;cito ( &lt;code&gt;return value&lt;/code&gt; ), cuando sabe que ha terminado.</target>
        </trans-unit>
        <trans-unit id="7fde14a080208598ce35fabd5b0ea5f2affbf555" translate="yes" xml:space="preserve">
          <source>Everything is an Expression</source>
          <target state="translated">Todo es una expresión</target>
        </trans-unit>
        <trans-unit id="7af36896f436a2940c2c5a2723b3bc0c8c329291" translate="yes" xml:space="preserve">
          <source>Everything is an Expression (at least, as much as possible)</source>
          <target state="translated">Todo es una expresión (al menos,tanto como sea posible)</target>
        </trans-unit>
        <trans-unit id="0f01ed56a1e32a05e5ef96e4d779f34784af9a96" translate="yes" xml:space="preserve">
          <source>Example</source>
          <target state="translated">Example</target>
        </trans-unit>
        <trans-unit id="fb3447b632f6a431215776dcf254a01001a40c4f" translate="yes" xml:space="preserve">
          <source>Examples:</source>
          <target state="translated">Examples:</target>
        </trans-unit>
        <trans-unit id="e2a4095571338493938d9208d1a8bdc53cd52da1" translate="yes" xml:space="preserve">
          <source>Existential Operator</source>
          <target state="translated">Operador Existencial</target>
        </trans-unit>
        <trans-unit id="340b3c1e6a8d3673bdad04f30b83addc47a3c77e" translate="yes" xml:space="preserve">
          <source>Expansion can be used to retrieve elements from the end of an array without having to assign the rest of its values. It works in function parameter lists as well.</source>
          <target state="translated">La expansión puede utilizarse para recuperar elementos del extremo de un conjunto sin tener que asignar el resto de sus valores.También funciona en las listas de parámetros de la función.</target>
        </trans-unit>
        <trans-unit id="9435e660888a944ea96d68e322b87de298b0b35d" translate="yes" xml:space="preserve">
          <source>Finally, class definitions are blocks of executable code, which make for interesting metaprogramming possibilities. In the context of a class definition, &lt;code&gt;this&lt;/code&gt; is the class object itself; therefore, you can assign static properties by using &lt;code&gt;@property: value&lt;/code&gt;.</source>
          <target state="translated">Finalmente, las definiciones de clase son bloques de c&amp;oacute;digo ejecutable, que crean interesantes posibilidades de metaprogramaci&amp;oacute;n. En el contexto de una definici&amp;oacute;n de clase, &lt;code&gt;this&lt;/code&gt; es el objeto de clase en s&amp;iacute; mismo; por lo tanto, puede asignar propiedades est&amp;aacute;ticas utilizando &lt;code&gt;@property: value&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="aa7d66d6f53b9efb770a67714bce600a748ba8a3" translate="yes" xml:space="preserve">
          <source>First, the basics: CoffeeScript uses significant whitespace to delimit blocks of code. You don&amp;rsquo;t need to use semicolons &lt;code&gt;;&lt;/code&gt; to terminate expressions, ending the line will do just as well (although semicolons can still be used to fit multiple expressions onto a single line). Instead of using curly braces &lt;code&gt;{ }&lt;/code&gt; to surround blocks of code in &lt;a href=&quot;#literals&quot;&gt;functions&lt;/a&gt;, &lt;a href=&quot;#conditionals&quot;&gt;if-statements&lt;/a&gt;, &lt;a href=&quot;#switch&quot;&gt;switch&lt;/a&gt;, and &lt;a href=&quot;#try&quot;&gt;try/catch&lt;/a&gt;, use indentation.</source>
          <target state="translated">Primero, lo b&amp;aacute;sico: CoffeeScript utiliza un espacio en blanco significativo para delimitar bloques de c&amp;oacute;digo. No necesita usar punto &lt;code&gt;;&lt;/code&gt; coma ; para terminar expresiones, terminar la l&amp;iacute;nea funcionar&amp;aacute; igual de bien (aunque los puntos y comas todav&amp;iacute;a pueden usarse para ajustar m&amp;uacute;ltiples expresiones en una sola l&amp;iacute;nea). En lugar de usar llaves &lt;code&gt;{ }&lt;/code&gt; para rodear bloques de c&amp;oacute;digo en &lt;a href=&quot;#literals&quot;&gt;funciones&lt;/a&gt; , &lt;a href=&quot;#conditionals&quot;&gt;sentencias if&lt;/a&gt; , &lt;a href=&quot;#switch&quot;&gt;cambiar&lt;/a&gt; e &lt;a href=&quot;#try&quot;&gt;intentar / atrapar&lt;/a&gt; , use sangr&amp;iacute;a.</target>
        </trans-unit>
        <trans-unit id="ee19e7cadbb13d1440abec3b34a17cd12b6c5c48" translate="yes" xml:space="preserve">
          <source>For a full introduction to source maps, how they work, and how to hook them up in your browser, read the &lt;a href=&quot;https://www.html5rocks.com/en/tutorials/developertools/sourcemaps/&quot;&gt;HTML5 Tutorial&lt;/a&gt;.</source>
          <target state="translated">Para obtener una introducci&amp;oacute;n completa a los mapas de origen, c&amp;oacute;mo funcionan y c&amp;oacute;mo conectarlos en su navegador, lea el &lt;a href=&quot;https://www.html5rocks.com/en/tutorials/developertools/sourcemaps/&quot;&gt;Tutorial HTML5&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="e01b86e80df0b25b6f0247ef3986bce39d12f358" translate="yes" xml:space="preserve">
          <source>For completeness:</source>
          <target state="translated">Para completar:</target>
        </trans-unit>
        <trans-unit id="8a4f6d4faf8398cfa0cd411363607d10de4be976" translate="yes" xml:space="preserve">
          <source>For logic, &lt;code&gt;and&lt;/code&gt; compiles to &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt;, and &lt;code&gt;or&lt;/code&gt; into &lt;code&gt;||&lt;/code&gt;.</source>
          <target state="translated">Para l&amp;oacute;gica, &lt;code&gt;and&lt;/code&gt; compila a &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt; , y &lt;code&gt;or&lt;/code&gt; en &lt;code&gt;||&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="1fa703ef8acae65b0063e84a587fc7eda00827c3" translate="yes" xml:space="preserve">
          <source>For readability, the &lt;code&gt;until&lt;/code&gt; keyword is equivalent to &lt;code&gt;while not&lt;/code&gt;, and the &lt;code&gt;loop&lt;/code&gt; keyword is equivalent to &lt;code&gt;while true&lt;/code&gt;.</source>
          <target state="translated">Para facilitar la lectura, el &lt;code&gt;until&lt;/code&gt; la palabra clave es equivalente al &lt;code&gt;while not&lt;/code&gt; , y el &lt;code&gt;loop&lt;/code&gt; palabras clave es equivalente a &lt;code&gt;while true&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="8898a99d18cf365fdf183321827b4e34c0860021" translate="yes" xml:space="preserve">
          <source>From the root of your project:</source>
          <target state="translated">Desde la raíz de su proyecto:</target>
        </trans-unit>
        <trans-unit id="2b961dea1dc0c60ddf9a2c8e9d090f6f7d082483" translate="yes" xml:space="preserve">
          <source>Functions</source>
          <target state="translated">Functions</target>
        </trans-unit>
        <trans-unit id="2f64931a65a6e89a9512c49457d675893ed09df0" translate="yes" xml:space="preserve">
          <source>Functions are defined by an optional list of parameters in parentheses, an arrow, and the function body. The empty function looks like this: &lt;code&gt;-&amp;gt;&lt;/code&gt;</source>
          <target state="translated">Las funciones se definen mediante una lista opcional de par&amp;aacute;metros entre par&amp;eacute;ntesis, una flecha y el cuerpo de la funci&amp;oacute;n. La funci&amp;oacute;n vac&amp;iacute;a se ve as&amp;iacute;: &lt;code&gt;-&amp;gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="98cb6e01b2ef1f74900d474df5478cc6c3f8d839" translate="yes" xml:space="preserve">
          <source>Functions may also have default values for arguments, which will be used if the incoming argument is missing (&lt;code&gt;undefined&lt;/code&gt;).</source>
          <target state="translated">Las funciones tambi&amp;eacute;n pueden tener valores predeterminados para los argumentos, que se utilizar&amp;aacute;n si falta el argumento entrante ( &lt;code&gt;undefined&lt;/code&gt; ).</target>
        </trans-unit>
        <trans-unit id="3c74a2f5bbae6a65aa71e01f3ca337b3eb0139aa" translate="yes" xml:space="preserve">
          <source>Generate source maps alongside the compiled JavaScript files. Adds &lt;code&gt;sourceMappingURL&lt;/code&gt; directives to the JavaScript as well.</source>
          <target state="translated">Genere mapas fuente junto con los archivos compilados de JavaScript. Agrega directivas &lt;code&gt;sourceMappingURL&lt;/code&gt; al JavaScript tambi&amp;eacute;n.</target>
        </trans-unit>
        <trans-unit id="532aff027e5f3d32201aa60d2efb5271e9bd4744" translate="yes" xml:space="preserve">
          <source>Generator Functions</source>
          <target state="translated">Funciones del generador</target>
        </trans-unit>
        <trans-unit id="e76ffcd1f650481542d7dda729cb91d61d3111a0" translate="yes" xml:space="preserve">
          <source>Hopefully, you&amp;rsquo;ll never need to use it, but if you ever need to intersperse snippets of JavaScript within your CoffeeScript, you can use backticks to pass it straight through.</source>
          <target state="translated">Afortunadamente, nunca necesitar&amp;aacute; usarlo, pero si alguna vez necesita intercalar fragmentos de JavaScript dentro de su CoffeeScript, puede usar backticks para pasarlo directamente.</target>
        </trans-unit>
        <trans-unit id="abe858446febb39efadf27fc1b2fba8c7df3ab4e" translate="yes" xml:space="preserve">
          <source>If a variable might be undeclared, the compiler does a thorough check. This is what JavaScript coders &lt;em&gt;should&lt;/em&gt; be typing when they want to check if a mystery variable exists.</source>
          <target state="translated">Si una variable no se declara, el compilador realiza una verificaci&amp;oacute;n exhaustiva. Esto es lo que los codificadores de JavaScript &lt;em&gt;deber&amp;iacute;an&lt;/em&gt; escribir cuando quieren verificar si existe una variable misteriosa.</target>
        </trans-unit>
        <trans-unit id="0cfbe04d5e5abb311561c2a3f5993f9e83c1d7a6" translate="yes" xml:space="preserve">
          <source>If this were saved as &lt;code&gt;executable.coffee&lt;/code&gt;, it could be made executable and run:</source>
          <target state="translated">Si se guardara como &lt;code&gt;executable.coffee&lt;/code&gt; , podr&amp;iacute;a hacerse ejecutable y ejecutarse:</target>
        </trans-unit>
        <trans-unit id="42eb1c2c93bbc5c5388c60ca8defece372ea8114" translate="yes" xml:space="preserve">
          <source>If we had used &lt;code&gt;-&amp;gt;&lt;/code&gt; in the callback above, &lt;code&gt;@customer&lt;/code&gt; would have referred to the undefined &amp;ldquo;customer&amp;rdquo; property of the DOM element, and trying to call &lt;code&gt;purchase()&lt;/code&gt; on it would have raised an exception.</source>
          <target state="translated">Si hubi&amp;eacute;ramos usado &lt;code&gt;-&amp;gt;&lt;/code&gt; en la devoluci&amp;oacute;n de llamada anterior, &lt;code&gt;@customer&lt;/code&gt; se habr&amp;iacute;a referido a la propiedad &quot;cliente&quot; indefinida del elemento DOM, e intentar llamar a la &lt;code&gt;purchase()&lt;/code&gt; en &amp;eacute;l habr&amp;iacute;a provocado una excepci&amp;oacute;n.</target>
        </trans-unit>
        <trans-unit id="7e3d568c0c336ebae7d8c3b53ecc75b8f5da93b6" translate="yes" xml:space="preserve">
          <source>If you are using CoffeeScript in a project, you should install it locally for that project so that the version of CoffeeScript is tracked as one of your project&amp;rsquo;s dependencies. Within that project&amp;rsquo;s folder:</source>
          <target state="translated">Si est&amp;aacute; utilizando CoffeeScript en un proyecto, debe instalarlo localmente para ese proyecto para que la versi&amp;oacute;n de CoffeeScript se rastree como una de las dependencias de su proyecto. Dentro de la carpeta de ese proyecto:</target>
        </trans-unit>
        <trans-unit id="9dbf6cbf52cbf3a1c6022d16008907342c32a283" translate="yes" xml:space="preserve">
          <source>If you don&amp;rsquo;t need the current iteration value you may omit it: &lt;code&gt;browser.closeCurrentTab() for [0...count]&lt;/code&gt;</source>
          <target state="translated">Si no necesita el valor de iteraci&amp;oacute;n actual, puede omitirlo: &lt;code&gt;browser.closeCurrentTab() for [0...count]&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="53c4a51d299b5a23747c3c2aa3bbf171cdb568d0" translate="yes" xml:space="preserve">
          <source>If you know of another way to achieve static type checking with CoffeeScript, please &lt;a href=&quot;https://github.com/jashkenas/coffeescript/issues/new&quot;&gt;create an issue&lt;/a&gt; and let us know.</source>
          <target state="translated">Si conoce otra forma de lograr la verificaci&amp;oacute;n de tipos est&amp;aacute;ticos con CoffeeScript, &lt;a href=&quot;https://github.com/jashkenas/coffeescript/issues/new&quot;&gt;cree un problema&lt;/a&gt; y av&amp;iacute;senos.</target>
        </trans-unit>
        <trans-unit id="e4cb8e7ac3be882b151de631a19cf2ab37f9bb1b" translate="yes" xml:space="preserve">
          <source>If you know the start and end of your loop, or would like to step through in fixed-size increments, you can use a range to specify the start and end of your comprehension.</source>
          <target state="translated">Si conoces el comienzo y el final de tu bucle,o quieres avanzar en incrementos de tamaño fijo,puedes usar un rango para especificar el comienzo y el final de tu comprensión.</target>
        </trans-unit>
        <trans-unit id="690eeea1dea81c1df3ff122ee050e1d70f25607b" translate="yes" xml:space="preserve">
          <source>If you need to invoke one task before another &amp;mdash; for example, running &lt;code&gt;build&lt;/code&gt; before &lt;code&gt;test&lt;/code&gt;, you can use the &lt;code&gt;invoke&lt;/code&gt; function: &lt;code&gt;invoke 'build'&lt;/code&gt;. Cake tasks are a minimal way to expose your CoffeeScript functions to the command line, so &lt;a href=&quot;https://coffeescript.org/v2/annotated-source/cake.html&quot;&gt;don&amp;rsquo;t expect any fanciness built-in&lt;/a&gt;. If you need dependencies, or async callbacks, it&amp;rsquo;s best to put them in your code itself &amp;mdash; not the cake task.</source>
          <target state="translated">Si es necesario invocar una tarea antes de que otro - por ejemplo, la ejecuci&amp;oacute;n &lt;code&gt;build&lt;/code&gt; antes de &lt;code&gt;test&lt;/code&gt; , se puede utilizar la &lt;code&gt;invoke&lt;/code&gt; la funci&amp;oacute;n: &lt;code&gt;invoke 'build'&lt;/code&gt; . Las tareas de pastel son una forma m&amp;iacute;nima de exponer sus funciones CoffeeScript a la l&amp;iacute;nea de comandos, por &lt;a href=&quot;https://coffeescript.org/v2/annotated-source/cake.html&quot;&gt;lo que no espere ninguna fantas&amp;iacute;a incorporada&lt;/a&gt; . Si necesita dependencias o devoluciones de llamada as&amp;iacute;ncronas, es mejor ponerlas en su propio c&amp;oacute;digo, no en la tarea f&amp;aacute;cil.</target>
        </trans-unit>
        <trans-unit id="6183792822af0844154cbd94b88cbdf4d74c526f" translate="yes" xml:space="preserve">
          <source>If you plan to use the &lt;code&gt;--transpile&lt;/code&gt; option (see &lt;a href=&quot;#transpilation&quot;&gt;Transpilation&lt;/a&gt;) you will need to also install &lt;code&gt;@babel/core&lt;/code&gt; either globally or locally, depending on whether you are running a globally or locally installed version of CoffeeScript.</source>
          <target state="translated">Si planea usar la opci&amp;oacute;n &lt;code&gt;--transpile&lt;/code&gt; (ver &lt;a href=&quot;#transpilation&quot;&gt;Transpilaci&amp;oacute;n&lt;/a&gt; ), tambi&amp;eacute;n necesitar&amp;aacute; instalar &lt;code&gt;@babel/core&lt;/code&gt; global o localmente, dependiendo de si est&amp;aacute; ejecutando una versi&amp;oacute;n de CoffeeScript instalada global o localmente.</target>
        </trans-unit>
        <trans-unit id="16a1eb24f6b65a8ec749d8523bc57eb23ee0101f" translate="yes" xml:space="preserve">
          <source>If you want to use the compiler&amp;rsquo;s API, for example to make an app that compiles strings of CoffeeScript on the fly, you can &lt;code&gt;require&lt;/code&gt; the full module:</source>
          <target state="translated">Si desea utilizar la API del compilador, por ejemplo, para hacer una aplicaci&amp;oacute;n que compila cadenas de CoffeeScript sobre la marcha, puede &lt;code&gt;require&lt;/code&gt; el m&amp;oacute;dulo completo:</target>
        </trans-unit>
        <trans-unit id="e2028691c6ca114b3e56e788fbd92f28d5fc0156" translate="yes" xml:space="preserve">
          <source>If you would like to iterate over just the keys that are defined on the object itself, by adding a &lt;code&gt;hasOwnProperty&lt;/code&gt; check to avoid properties that may be inherited from the prototype, use &lt;code&gt;for own key, value of object&lt;/code&gt;.</source>
          <target state="translated">Si desea iterar solo sobre las claves que est&amp;aacute;n definidas en el objeto mismo, agregando una comprobaci&amp;oacute;n &lt;code&gt;hasOwnProperty&lt;/code&gt; para evitar las propiedades que pueden heredarse del prototipo, use &lt;code&gt;for own key, value of object&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="592b59788a4d3ef118683778c8b805c5c84cd8ca" translate="yes" xml:space="preserve">
          <source>If you&amp;rsquo;d like to create top-level variables for other scripts to use, attach them as properties on &lt;code&gt;window&lt;/code&gt;; attach them as properties on the &lt;code&gt;exports&lt;/code&gt; object in CommonJS; or use an &lt;a href=&quot;#modules&quot;&gt;&lt;code&gt;export&lt;/code&gt; statement&lt;/a&gt;. If you&amp;rsquo;re targeting both CommonJS and the browser, the &lt;a href=&quot;#existential-operator&quot;&gt;existential operator&lt;/a&gt; (covered below), gives you a reliable way to figure out where to add them: &lt;code&gt;exports ? this&lt;/code&gt;.</source>
          <target state="translated">Si desea crear variables de nivel superior para que otras secuencias de comandos las utilicen, adj&amp;uacute;ntelas como propiedades en la &lt;code&gt;window&lt;/code&gt; ; adj&amp;uacute;ntelos como propiedades en el objeto de &lt;code&gt;exports&lt;/code&gt; en CommonJS; o use una &lt;a href=&quot;#modules&quot;&gt;declaraci&amp;oacute;n de &lt;/a&gt; &lt;code&gt;export&lt;/code&gt; aci&amp;oacute;n . Si est&amp;aacute; apuntando tanto a CommonJS como al navegador, el &lt;a href=&quot;#existential-operator&quot;&gt;operador existencial&lt;/a&gt; (cubierto a continuaci&amp;oacute;n), le brinda una forma confiable de averiguar d&amp;oacute;nde agregarlos: &lt;code&gt;exports ? this&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="146aec742e33fd45508faaf1fd9479d63b8d9e3b" translate="yes" xml:space="preserve">
          <source>If you&amp;rsquo;d like to use Node.js&amp;rsquo; CommonJS to &lt;code&gt;require&lt;/code&gt; CoffeeScript files, e.g. &lt;code&gt;require './app.coffee'&lt;/code&gt;, you must first &amp;ldquo;register&amp;rdquo; CoffeeScript as an extension:</source>
          <target state="translated">Si desea utilizar Node.js 'CommonJS para &lt;code&gt;require&lt;/code&gt; archivos CoffeeScript, por ejemplo, &lt;code&gt;require './app.coffee'&lt;/code&gt; , primero debe &quot;registrar&quot; CoffeeScript como una extensi&amp;oacute;n:</target>
        </trans-unit>
        <trans-unit id="46e33650ad57bc5c400b19005fe7df0765a3fb90" translate="yes" xml:space="preserve">
          <source>If you&amp;rsquo;re using CoffeeScript via the &lt;a href=&quot;https://coffeescript.org/nodejs_usage&quot;&gt;Node API&lt;/a&gt;, where you call &lt;code&gt;CoffeeScript.compile&lt;/code&gt; with a string to be compiled and an &lt;code&gt;options&lt;/code&gt; object, the &lt;code&gt;transpile&lt;/code&gt; key of the &lt;code&gt;options&lt;/code&gt; object should be the Babel options:</source>
          <target state="translated">Si est&amp;aacute; utilizando CoffeeScript a trav&amp;eacute;s de la &lt;a href=&quot;https://coffeescript.org/nodejs_usage&quot;&gt;API Node&lt;/a&gt; , donde llama a &lt;code&gt;CoffeeScript.compile&lt;/code&gt; con una cadena para compilar y un objeto de &lt;code&gt;options&lt;/code&gt; , la clave de &lt;code&gt;transpile&lt;/code&gt; del objeto de &lt;code&gt;options&lt;/code&gt; debe ser las opciones de Babel:</target>
        </trans-unit>
        <trans-unit id="016766665df92106ffce5000526613553ce1231c" translate="yes" xml:space="preserve">
          <source>If, Else, Unless, and Conditional Assignment</source>
          <target state="translated">Si,si,a menos que,y asignación condicional</target>
        </trans-unit>
        <trans-unit id="1e1733da0a2b3323346e10e76e4e0da637c155fe" translate="yes" xml:space="preserve">
          <source>In CoffeeScript 1.x, &lt;code&gt;--&lt;/code&gt; was required after the path and filename of the script to be run, but before any arguments passed to that script. This convention is now deprecated. So instead of:</source>
          <target state="translated">En CoffeeScript 1.x, &lt;code&gt;--&lt;/code&gt; se requer&amp;iacute;a despu&amp;eacute;s de la ruta y el nombre de archivo de la secuencia de comandos a ejecutar, pero antes de que se pasaran argumentos a esa secuencia de comandos. Esta convenci&amp;oacute;n ahora est&amp;aacute; en desuso. Entonces en lugar de:</target>
        </trans-unit>
        <trans-unit id="7064346047d308376ffa12374eb5bf9c93709bc8" translate="yes" xml:space="preserve">
          <source>In CoffeeScript 1.x, &lt;code&gt;=&amp;gt;&lt;/code&gt; compiled to a regular &lt;code&gt;function&lt;/code&gt; but with references to &lt;code&gt;this&lt;/code&gt;/&lt;code&gt;@&lt;/code&gt; rewritten to use the outer scope&amp;rsquo;s &lt;code&gt;this&lt;/code&gt;, or with the inner function bound to the outer scope via &lt;code&gt;.bind&lt;/code&gt; (hence the name &amp;ldquo;bound function&amp;rdquo;). In CoffeeScript 2, &lt;code&gt;=&amp;gt;&lt;/code&gt; compiles to &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions&quot;&gt;ES2015&amp;rsquo;s &lt;code&gt;=&amp;gt;&lt;/code&gt;&lt;/a&gt;, which behaves slightly differently. The largest difference is that in ES2015, &lt;code&gt;=&amp;gt;&lt;/code&gt; functions lack an &lt;code&gt;arguments&lt;/code&gt; object:</source>
          <target state="translated">En CoffeeScript 1.x, &lt;code&gt;=&amp;gt;&lt;/code&gt; compilado a una &lt;code&gt;function&lt;/code&gt; regular pero con referencias a &lt;code&gt;this&lt;/code&gt; / &lt;code&gt;@&lt;/code&gt; reescritas para usar el alcance externo &lt;code&gt;this&lt;/code&gt; , o con la funci&amp;oacute;n interna vinculada al alcance externo a trav&amp;eacute;s de &lt;code&gt;.bind&lt;/code&gt; (de ah&amp;iacute; el nombre &quot;funci&amp;oacute;n vinculada&quot;) . En CoffeeScript 2, &lt;code&gt;=&amp;gt;&lt;/code&gt; compila a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions&quot;&gt;ES2015's &lt;code&gt;=&amp;gt;&lt;/code&gt; &lt;/a&gt; , que se comporta de manera ligeramente diferente. La mayor diferencia es que en ES2015, las funciones &lt;code&gt;=&amp;gt;&lt;/code&gt; carecen de un objeto de &lt;code&gt;arguments&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="04b792bc52fa41c8f5a917a0ddd4654b6dc5918b" translate="yes" xml:space="preserve">
          <source>In CoffeeScript 1.x, this used to fail when trying to pass arguments to the script. Some users on OS X worked around the problem by using &lt;code&gt;#!/usr/bin/env coffee --&lt;/code&gt; as the first line of the file. That didn&amp;rsquo;t work on Linux, however, which cannot parse shebang lines with more than a single argument. While such scripts will still run on OS X, CoffeeScript will now display a warning before compiling or evaluating files that begin with a too-long shebang line. Now that CoffeeScript 2 supports passing arguments without needing &lt;code&gt;--&lt;/code&gt;, we recommend simply changing the shebang lines in such scripts to just &lt;code&gt;#!/usr/bin/env coffee&lt;/code&gt;.</source>
          <target state="translated">En CoffeeScript 1.x, esto sol&amp;iacute;a fallar al tratar de pasar argumentos al script. Algunos usuarios de OS X resolvieron el problema usando &lt;code&gt;#!/usr/bin/env coffee --&lt;/code&gt; como la primera l&amp;iacute;nea del archivo. Sin embargo, eso no funcion&amp;oacute; en Linux, que no puede analizar l&amp;iacute;neas shebang con m&amp;aacute;s de un argumento. Si bien dichos scripts a&amp;uacute;n se ejecutar&amp;aacute;n en OS X, CoffeeScript ahora mostrar&amp;aacute; una advertencia antes de compilar o evaluar archivos que comiencen con una l&amp;iacute;nea shebang demasiado larga. Ahora que CoffeeScript 2 soportes pasar argumentos sin necesidad &lt;code&gt;--&lt;/code&gt; , se recomienda simplemente cambiando las l&amp;iacute;neas shebang en este tipo de scripts a poco &lt;code&gt;#!/usr/bin/env coffee&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="788287c76d023cee7c5e146f9e2387cfe9252f53" translate="yes" xml:space="preserve">
          <source>In CoffeeScript, comments are denoted by the &lt;code&gt;#&lt;/code&gt; character to the end of a line, or from &lt;code&gt;###&lt;/code&gt; to the next appearance of &lt;code&gt;###&lt;/code&gt;. Comments are ignored by the compiler, though the compiler makes its best effort at reinserting your comments into the output JavaScript after compilation.</source>
          <target state="translated">En CoffeeScript, los comentarios se denotan con el car&amp;aacute;cter &lt;code&gt;#&lt;/code&gt; al final de una l&amp;iacute;nea, o desde &lt;code&gt;###&lt;/code&gt; hasta la pr&amp;oacute;xima aparici&amp;oacute;n de &lt;code&gt;###&lt;/code&gt; . El compilador ignora los comentarios, aunque el compilador hace su mejor esfuerzo para reinsertar sus comentarios en el JavaScript de salida despu&amp;eacute;s de la compilaci&amp;oacute;n.</target>
        </trans-unit>
        <trans-unit id="9ffbb2a04cb76868837eab857f3bd0071b209bde" translate="yes" xml:space="preserve">
          <source>In ECMAScript this is called &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_operator&quot;&gt;spread syntax&lt;/a&gt;, and has been supported for arrays since ES2015 and objects since ES2018.</source>
          <target state="translated">En ECMAScript, esto se denomina &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_operator&quot;&gt;sintaxis de propagaci&amp;oacute;n&lt;/a&gt; y se admite para matrices desde ES2015 y objetos desde ES2018.</target>
        </trans-unit>
        <trans-unit id="d2f7a2b157c518d92490aade9f7bd6b939d63730" translate="yes" xml:space="preserve">
          <source>In JavaScript, the &lt;code&gt;this&lt;/code&gt; keyword is dynamically scoped to mean the object that the current function is attached to. If you pass a function as a callback or attach it to a different object, the original value of &lt;code&gt;this&lt;/code&gt; will be lost. If you&amp;rsquo;re not familiar with this behavior, &lt;a href=&quot;https://web.archive.org/web/20150316122013/http://www.digital-web.com/articles/scope_in_javascript&quot;&gt;this Digital Web article&lt;/a&gt; gives a good overview of the quirks.</source>
          <target state="translated">En JavaScript, &lt;code&gt;this&lt;/code&gt; palabra clave tiene un alcance din&amp;aacute;mico para significar el objeto al que se adjunta la funci&amp;oacute;n actual. Si se pasa una funci&amp;oacute;n como una devoluci&amp;oacute;n de llamada o se fija a un objeto diferente, el valor original de &lt;code&gt;this&lt;/code&gt; se perder&amp;aacute;. Si no est&amp;aacute; familiarizado con este comportamiento, &lt;a href=&quot;https://web.archive.org/web/20150316122013/http://www.digital-web.com/articles/scope_in_javascript&quot;&gt;este art&amp;iacute;culo de Digital Web&lt;/a&gt; ofrece una buena descripci&amp;oacute;n de las peculiaridades.</target>
        </trans-unit>
        <trans-unit id="58ccf15493189686fa8384205d1ffa6634f16256" translate="yes" xml:space="preserve">
          <source>In a &lt;code&gt;for&lt;/code&gt; loop, &lt;code&gt;from&lt;/code&gt; compiles to the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...of&quot;&gt;ES2015 &lt;code&gt;of&lt;/code&gt;&lt;/a&gt;. (Yes, it&amp;rsquo;s unfortunate; the CoffeeScript &lt;code&gt;of&lt;/code&gt; predates the ES2015 &lt;code&gt;of&lt;/code&gt;.)</source>
          <target state="translated">En un bucle &lt;code&gt;for&lt;/code&gt; , &lt;code&gt;from&lt;/code&gt; compilaciones hasta el &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...of&quot;&gt;ES2015 &lt;code&gt;of&lt;/code&gt; &lt;/a&gt; . (S&amp;iacute;, es lamentable; el CoffeeScript &lt;code&gt;of&lt;/code&gt; anterior a la ES2015 &lt;code&gt;of&lt;/code&gt; .)</target>
        </trans-unit>
        <trans-unit id="a40e241967ca5277adef3eea005b6b4be0ffdb99" translate="yes" xml:space="preserve">
          <source>In addition to supporting ES2015 classes, CoffeeScript provides a shortcut for working with prototypes. The &lt;code&gt;::&lt;/code&gt; operator gives you quick access to an object&amp;rsquo;s prototype:</source>
          <target state="translated">Adem&amp;aacute;s de admitir clases ES2015, CoffeeScript proporciona un acceso directo para trabajar con prototipos. El operador &lt;code&gt;::&lt;/code&gt; le brinda acceso r&amp;aacute;pido al prototipo de un objeto:</target>
        </trans-unit>
        <trans-unit id="451347f5385b9e51f536746d2dbc2451299a59b5" translate="yes" xml:space="preserve">
          <source>In the constructor of a derived class (a class that &lt;code&gt;extends&lt;/code&gt; another class), &lt;code&gt;this&lt;/code&gt; cannot be used before calling &lt;code&gt;super&lt;/code&gt;:</source>
          <target state="translated">En el constructor de una clase derivada (una clase que &lt;code&gt;extends&lt;/code&gt; otra clase), &lt;code&gt;this&lt;/code&gt; no se puede usar antes de llamar a &lt;code&gt;super&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="ba1d2a3ac8a3cfec3370e8237d30cfd830778b27" translate="yes" xml:space="preserve">
          <source>Inline &lt;code&gt;###&lt;/code&gt; comments make &lt;a href=&quot;#type-annotations&quot;&gt;type annotations&lt;/a&gt; possible.</source>
          <target state="translated">Los comentarios en l&amp;iacute;nea &lt;code&gt;###&lt;/code&gt; hacen posibles las &lt;a href=&quot;#type-annotations&quot;&gt;anotaciones de tipo&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="c81b79df3c6448eae7c4f80428b54cd5692a17d7" translate="yes" xml:space="preserve">
          <source>Installation</source>
          <target state="translated">Installation</target>
        </trans-unit>
        <trans-unit id="6cb9cbd3b08c7fd8fb0c40e013ef550f116fcf3b" translate="yes" xml:space="preserve">
          <source>Instead of a newline or semicolon, &lt;code&gt;then&lt;/code&gt; can be used to separate conditions from expressions, in &lt;code&gt;while&lt;/code&gt;, &lt;code&gt;if&lt;/code&gt;/&lt;code&gt;else&lt;/code&gt;, and &lt;code&gt;switch&lt;/code&gt;/&lt;code&gt;when&lt;/code&gt; statements.</source>
          <target state="translated">En lugar de una nueva l&amp;iacute;nea o un punto y coma, &lt;code&gt;then&lt;/code&gt; puede utilizar para separar las condiciones de las expresiones, en &lt;code&gt;while&lt;/code&gt; , &lt;code&gt;if&lt;/code&gt; / &lt;code&gt;else&lt;/code&gt; y &lt;code&gt;switch&lt;/code&gt; / &lt;code&gt;when&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="288bf7e5a0f1cc7c60023fb37b337bf4edaa3530" translate="yes" xml:space="preserve">
          <source>Instead of compiling the CoffeeScript, just lex and parse it, and print out the parse tree. Used for debugging the compiler.</source>
          <target state="translated">En lugar de compilar el Script de café,sólo lex y analizarlo,e imprimir el árbol de análisis.Se usa para depurar el compilador.</target>
        </trans-unit>
        <trans-unit id="3ca0e2b8ad0603647ea093f1fbd32497da2b06a4" translate="yes" xml:space="preserve">
          <source>Instead of parsing the CoffeeScript, just lex it, and print out the token stream. Used for debugging the compiler.</source>
          <target state="translated">En lugar de analizar el texto del café,sólo léelo e imprime el flujo de fichas.Se usa para depurar el compilador.</target>
        </trans-unit>
        <trans-unit id="1448cab4186e9f54c8b08d7cd2d0636b94d3ac93" translate="yes" xml:space="preserve">
          <source>Instead of writing out the JavaScript as a file, print it directly to &lt;strong&gt;stdout&lt;/strong&gt;.</source>
          <target state="translated">En lugar de escribir el JavaScript como un archivo, impr&amp;iacute;malo directamente en &lt;strong&gt;stdout&lt;/strong&gt; .</target>
        </trans-unit>
        <trans-unit id="7b3c2dba907edd3594545f099a0344f3f1d12c7b" translate="yes" xml:space="preserve">
          <source>It can also be used for safer conditional assignment than the JavaScript pattern &lt;code&gt;a = a || value&lt;/code&gt; provides, for cases where you may be handling numbers or strings.</source>
          <target state="translated">Tambi&amp;eacute;n se puede utilizar para una asignaci&amp;oacute;n condicional m&amp;aacute;s segura que el patr&amp;oacute;n de JavaScript &lt;code&gt;a = a || value&lt;/code&gt; proporciona, para casos en los que puede estar manejando n&amp;uacute;meros o cadenas.</target>
        </trans-unit>
        <trans-unit id="4656fa0b7f789159a4076da2dd99866678c8fbb1" translate="yes" xml:space="preserve">
          <source>It&amp;rsquo;s a little difficult to check for the existence of a variable in JavaScript. &lt;code&gt;if (variable) &amp;hellip;&lt;/code&gt; comes close, but fails for zero, the empty string, and false (to name just the most common cases). CoffeeScript&amp;rsquo;s existential operator &lt;code&gt;?&lt;/code&gt; returns true unless a variable is &lt;code&gt;null&lt;/code&gt; or &lt;code&gt;undefined&lt;/code&gt; or undeclared, which makes it analogous to Ruby&amp;rsquo;s &lt;code&gt;nil?&lt;/code&gt;.</source>
          <target state="translated">Es un poco dif&amp;iacute;cil verificar la existencia de una variable en JavaScript. &lt;code&gt;if (variable) &amp;hellip;&lt;/code&gt; se acerca, pero falla por cero, la cadena vac&amp;iacute;a y false (por nombrar solo los casos m&amp;aacute;s comunes). El operador existencial de CoffeeScript &lt;code&gt;?&lt;/code&gt; devuelve verdadero a menos que una variable sea &lt;code&gt;null&lt;/code&gt; o &lt;code&gt;undefined&lt;/code&gt; o no declarada, lo que la hace an&amp;aacute;loga a la &lt;code&gt;nil?&lt;/code&gt; de Ruby . .</target>
        </trans-unit>
        <trans-unit id="0e4779d05c5a545a6bd2f3323d3fe430a37f5d7b" translate="yes" xml:space="preserve">
          <source>JSX</source>
          <target state="translated">JSX</target>
        </trans-unit>
        <trans-unit id="c5be221a82247da9792ee8a3ab8649882bae0a0f" translate="yes" xml:space="preserve">
          <source>JSX and the &lt;code&gt;&amp;lt;&lt;/code&gt; and &lt;code&gt;&amp;gt;&lt;/code&gt; operators</source>
          <target state="translated">JSX y los operadores &lt;code&gt;&amp;lt;&lt;/code&gt; y &lt;code&gt;&amp;gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="ee620923ff5fc510555dc37083a135ee93b5404b" translate="yes" xml:space="preserve">
          <source>JavaScript</source>
          <target state="translated">JavaScript</target>
        </trans-unit>
        <trans-unit id="fb109f3d3ac46e3151be505c1e1c1768023b31d1" translate="yes" xml:space="preserve">
          <source>Just for kicks, a little bit of the compiler is currently implemented in this fashion: See it &lt;a href=&quot;https://gist.github.com/jashkenas/3fc3c1a8b1009c00d9df&quot;&gt;as a document&lt;/a&gt;, &lt;a href=&quot;https://raw.githubusercontent.com/jashkenas/coffeescript/master/src/scope.litcoffee&quot;&gt;raw&lt;/a&gt;, and &lt;a href=&quot;https://cl.ly/LxEu&quot;&gt;properly highlighted in a text editor&lt;/a&gt;.</source>
          <target state="translated">Solo por diversi&amp;oacute;n, un poco del compilador se implementa actualmente de esta manera: consid&amp;eacute;relo &lt;a href=&quot;https://gist.github.com/jashkenas/3fc3c1a8b1009c00d9df&quot;&gt;como un documento&lt;/a&gt; , &lt;a href=&quot;https://raw.githubusercontent.com/jashkenas/coffeescript/master/src/scope.litcoffee&quot;&gt;sin &lt;/a&gt;&lt;a href=&quot;https://cl.ly/LxEu&quot;&gt;formato&lt;/a&gt; y resaltado correctamente en un editor de texto .</target>
        </trans-unit>
        <trans-unit id="1e7d0e20d61ed8a7062ca711313b21c2b761a366" translate="yes" xml:space="preserve">
          <source>Just like &lt;code&gt;--map&lt;/code&gt;, but include the source map directly in the compiled JavaScript files, rather than in a separate file.</source>
          <target state="translated">Al igual que &lt;code&gt;--map&lt;/code&gt; , pero incluya el mapa fuente directamente en los archivos JavaScript compilados, en lugar de en un archivo separado.</target>
        </trans-unit>
        <trans-unit id="ea7ef5627d33e5626e9aefb01f2fd84df3980789" translate="yes" xml:space="preserve">
          <source>Just like JavaScript (since ES2015), CoffeeScript has destructuring assignment syntax. When you assign an array or object literal to a value, CoffeeScript breaks up and matches both sides against each other, assigning the values on the right to the variables on the left. In the simplest case, it can be used for parallel assignment:</source>
          <target state="translated">Al igual que JavaScript (desde ES2015),CoffeeScript tiene una sintaxis de asignación desestructurante.Cuando se asigna una matriz o un objeto literal a un valor,CoffeeScript se desestructura y hace coincidir ambos lados entre sí,asignando los valores de la derecha a las variables de la izquierda.En el caso más simple,puede ser usado para la asignación paralela:</target>
        </trans-unit>
        <trans-unit id="4c6043a5a849b28412ad4dbe8490852a177ab12e" translate="yes" xml:space="preserve">
          <source>Just like in JSX and HTML, denote XML tags using &lt;code&gt;&amp;lt;&lt;/code&gt; and &lt;code&gt;&amp;gt;&lt;/code&gt;. You can interpolate CoffeeScript code inside a tag using &lt;code&gt;{&lt;/code&gt; and &lt;code&gt;}&lt;/code&gt;. To avoid compiler errors, when using &lt;code&gt;&amp;lt;&lt;/code&gt; and &lt;code&gt;&amp;gt;&lt;/code&gt; to mean &amp;ldquo;less than&amp;rdquo; or &amp;ldquo;greater than,&amp;rdquo; you should wrap the operators in spaces to distinguish them from XML tags. So &lt;code&gt;i &amp;lt; len&lt;/code&gt;, not &lt;code&gt;i&amp;lt;len&lt;/code&gt;. The compiler tries to be forgiving when it can be sure what you intend, but always putting spaces around the &amp;ldquo;less than&amp;rdquo; and &amp;ldquo;greater than&amp;rdquo; operators will remove ambiguity.</source>
          <target state="translated">Al igual que en JSX y HTML, denota etiquetas XML usando &lt;code&gt;&amp;lt;&lt;/code&gt; y &lt;code&gt;&amp;gt;&lt;/code&gt; . Puede interpolar el c&amp;oacute;digo CoffeeScript dentro de una etiqueta usando &lt;code&gt;{&lt;/code&gt; y &lt;code&gt;}&lt;/code&gt; . Para evitar errores del compilador, cuando use &lt;code&gt;&amp;lt;&lt;/code&gt; y &lt;code&gt;&amp;gt;&lt;/code&gt; para significar &quot;menor que&quot; o &quot;mayor que&quot;, debe ajustar los operadores en espacios para distinguirlos de las etiquetas XML. Entonces &lt;code&gt;i &amp;lt; len&lt;/code&gt; , no &lt;code&gt;i&amp;lt;len&lt;/code&gt; . El compilador intenta ser indulgente cuando puede estar seguro de lo que pretende, pero siempre colocando espacios alrededor de los operadores &quot;menor que&quot; y &quot;mayor que&quot; eliminar&amp;aacute; la ambig&amp;uuml;edad.</target>
        </trans-unit>
        <trans-unit id="ee197e1e03ed057d123cd58113296e983974f7c3" translate="yes" xml:space="preserve">
          <source>Keep in mind that &lt;code&gt;const&lt;/code&gt; only protects you from &lt;em&gt;reassigning&lt;/em&gt; a variable; it doesn&amp;rsquo;t prevent the variable&amp;rsquo;s value from changing, the way constants usually do in other languages:</source>
          <target state="translated">Tenga en cuenta que &lt;code&gt;const&lt;/code&gt; solo lo protege de &lt;em&gt;reasignar&lt;/em&gt; una variable; no evita que cambie el valor de la variable, como suelen hacer las constantes en otros idiomas:</target>
        </trans-unit>
        <trans-unit id="89b86ab0e66f527166d98df92ddbcf5416ed58f6" translate="yes" xml:space="preserve">
          <source>Language</source>
          <target state="translated">Language</target>
        </trans-unit>
        <trans-unit id="b52e6ec9fa3d5c13a402c0dc8beb63c9192cad04" translate="yes" xml:space="preserve">
          <source>Language Reference</source>
          <target state="translated">Referencia del lenguaje</target>
        </trans-unit>
        <trans-unit id="b49dc37eaf51e72990aba7aaaf76623a346cbd37" translate="yes" xml:space="preserve">
          <source>Launch an interactive CoffeeScript session to try short snippets. Identical to calling &lt;code&gt;coffee&lt;/code&gt; with no arguments.</source>
          <target state="translated">Inicie una sesi&amp;oacute;n interactiva de CoffeeScript para probar fragmentos cortos. Id&amp;eacute;ntico a llamar &lt;code&gt;coffee&lt;/code&gt; sin argumentos.</target>
        </trans-unit>
        <trans-unit id="a3e90043205a881c2853c2eca6f3e45fcbc541f7" translate="yes" xml:space="preserve">
          <source>Leading &lt;code&gt;.&lt;/code&gt; closes all open calls, allowing for simpler chaining syntax.</source>
          <target state="translated">L&amp;iacute;der &lt;code&gt;.&lt;/code&gt; cierra todas las llamadas abiertas, lo que permite una sintaxis de encadenamiento m&amp;aacute;s simple.</target>
        </trans-unit>
        <trans-unit id="9f985d44bdfbd0484f99e8d147e15d78e5abb70b" translate="yes" xml:space="preserve">
          <source>Lexical Scoping and Variable Safety</source>
          <target state="translated">Alcance léxico y seguridad variable</target>
        </trans-unit>
        <trans-unit id="58fd3b1b83cc7fc933d72fe934bdb6e534441281" translate="yes" xml:space="preserve">
          <source>Licensed under the MIT License.</source>
          <target state="translated">Con licencia del MIT.</target>
        </trans-unit>
        <trans-unit id="807e50c12f9e6b05f56a04dd9b9ff076073a65d0" translate="yes" xml:space="preserve">
          <source>Like JavaScript and many other languages, CoffeeScript supports strings as delimited by the &lt;code&gt;&quot;&lt;/code&gt; or &lt;code&gt;'&lt;/code&gt; characters. CoffeeScript also supports string interpolation within &lt;code&gt;&quot;&lt;/code&gt;-quoted strings, using &lt;code&gt;#{ &amp;hellip; }&lt;/code&gt;. Single-quoted strings are literal. You may even use interpolation in object keys.</source>
          <target state="translated">Al igual que JavaScript y muchos otros lenguajes, CoffeeScript admite cadenas delimitadas por los caracteres &lt;code&gt;&quot;&lt;/code&gt; o &lt;code&gt;'&lt;/code&gt; . CoffeeScript tambi&amp;eacute;n admite la interpolaci&amp;oacute;n de cadenas dentro de cadenas &lt;code&gt;&quot;&lt;/code&gt; entre comillas, usando &lt;code&gt;#{ &amp;hellip; }&lt;/code&gt; . Las cadenas entre comillas simples son literales. Incluso puede usar la interpolaci&amp;oacute;n en claves de objeto.</target>
        </trans-unit>
        <trans-unit id="4f3952077d0c37b4982e8e71fecd691cae455a81" translate="yes" xml:space="preserve">
          <source>List items can be at most only one paragraph long. The second paragraph of a list item would be indented after a blank line, and therefore indistinguishable from a code block.</source>
          <target state="translated">Los elementos de la lista pueden tener como máximo un párrafo de longitud.El segundo párrafo de un elemento de la lista se sangraría después de una línea en blanco y,por lo tanto,no se distinguiría de un bloque de código.</target>
        </trans-unit>
        <trans-unit id="f9958a2677c3ef0351f8de1b9c79ba7331f155a4" translate="yes" xml:space="preserve">
          <source>Literate CoffeeScript</source>
          <target state="translated">Literate CoffeeScript</target>
        </trans-unit>
        <trans-unit id="e0923ed716463b8c9d5b244e2f6ba2d222d500d9" translate="yes" xml:space="preserve">
          <source>Literate CoffeeScript parsing</source>
          <target state="translated">Análisis literario de CoffeeScript</target>
        </trans-unit>
        <trans-unit id="e83f1c0d81e570990421db9c6c5103dd52bab5e9" translate="yes" xml:space="preserve">
          <source>Loops and Comprehensions</source>
          <target state="translated">Bucles y comprensiones</target>
        </trans-unit>
        <trans-unit id="5f2cbd107037ed23248e5058a7a64cd6bae05468" translate="yes" xml:space="preserve">
          <source>Miscellaneous</source>
          <target state="translated">Miscellaneous</target>
        </trans-unit>
        <trans-unit id="04e9462c0ff02bb9032b92abd45881a3c7e15fb7" translate="yes" xml:space="preserve">
          <source>Modules</source>
          <target state="translated">Modules</target>
        </trans-unit>
        <trans-unit id="d0b44f3bb54288ce6ecf8af194238e14f5bd47a8" translate="yes" xml:space="preserve">
          <source>Most modern JavaScript features that CoffeeScript supports can run natively in Node 7.6+, meaning that Node can run CoffeeScript&amp;rsquo;s output without any further processing required. Here are some notable exceptions:</source>
          <target state="translated">La mayor&amp;iacute;a de las funciones modernas de JavaScript que admite CoffeeScript pueden ejecutarse de forma nativa en el Nodo 7.6+, lo que significa que Node puede ejecutar la salida de CoffeeScript sin ning&amp;uacute;n procesamiento adicional requerido. Aqu&amp;iacute; hay algunas excepciones notables:</target>
        </trans-unit>
        <trans-unit id="5987894415f15faa1342fc04b8e4f45d10eb5711" translate="yes" xml:space="preserve">
          <source>Most of the loops you&amp;rsquo;ll write in CoffeeScript will be &lt;strong&gt;comprehensions&lt;/strong&gt; over arrays, objects, and ranges. Comprehensions replace (and compile into) &lt;code&gt;for&lt;/code&gt; loops, with optional guard clauses and the value of the current array index. Unlike for loops, array comprehensions are expressions, and can be returned and assigned.</source>
          <target state="translated">La mayor&amp;iacute;a de los bucles que escribir&amp;aacute; en CoffeeScript ser&amp;aacute;n &lt;strong&gt;comprensiones&lt;/strong&gt; sobre matrices, objetos y rangos. Comprensiones reemplazan (y compilar en) &lt;code&gt;for&lt;/code&gt; bucles, con cl&amp;aacute;usulas de guardia opcionales y el valor del &amp;iacute;ndice de la matriz actual. A diferencia de los bucles, las comprensiones de matrices son expresiones y se pueden devolver y asignar.</target>
        </trans-unit>
        <trans-unit id="e980a53fb5f690679ff0ebade16b508f890902d3" translate="yes" xml:space="preserve">
          <source>Multiline strings are allowed in CoffeeScript. Lines are joined by a single space unless they end with a backslash. Indentation is ignored.</source>
          <target state="translated">Las cadenas de líneas múltiples están permitidas en el CoffeeScript.Las líneas están unidas por un solo espacio a menos que terminen con una barra invertida.La indentación es ignorada.</target>
        </trans-unit>
        <trans-unit id="9c21b9713784f3e4cfd595b3aa43dab514b15d2c" translate="yes" xml:space="preserve">
          <source>Named functions and function declarations</source>
          <target state="translated">Funciones nombradas y declaraciones de funciones</target>
        </trans-unit>
        <trans-unit id="685d8185cabac29e4bc33d85c18962f2c64b8915" translate="yes" xml:space="preserve">
          <source>Needs to be rewritten the old-fashioned way:</source>
          <target state="translated">Necesita ser reescrito a la antigua:</target>
        </trans-unit>
        <trans-unit id="9367a041098127356c25562e1a256085d58951ce" translate="yes" xml:space="preserve">
          <source>Newcomers to CoffeeScript often wonder how to generate the JavaScript &lt;code&gt;function foo() {}&lt;/code&gt;, as opposed to the &lt;code&gt;foo = function() {}&lt;/code&gt; that CoffeeScript produces. The first form is a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/function&quot;&gt;function declaration&lt;/a&gt;, and the second is a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/function&quot;&gt;function expression&lt;/a&gt;. As stated above, in CoffeeScript &lt;a href=&quot;#expressions&quot;&gt;everything is an expression&lt;/a&gt;, so naturally we favor the expression form. Supporting only one variant helps avoid confusing bugs that can arise from the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/function#Function_declaration_hoisting&quot;&gt;subtle differences between the two forms&lt;/a&gt;.</source>
          <target state="translated">Los reci&amp;eacute;n llegados a CoffeeScript a menudo se preguntan c&amp;oacute;mo generar la &lt;code&gt;function foo() {}&lt;/code&gt; JavaScript foo () {} , en oposici&amp;oacute;n a la &lt;code&gt;foo = function() {}&lt;/code&gt; que produce CoffeeScript. La primera forma es una &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/function&quot;&gt;declaraci&amp;oacute;n de funci&amp;oacute;n&lt;/a&gt; , y la segunda es una &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/function&quot;&gt;expresi&amp;oacute;n de funci&amp;oacute;n&lt;/a&gt; . Como se indic&amp;oacute; anteriormente, en CoffeeScript &lt;a href=&quot;#expressions&quot;&gt;todo es una expresi&amp;oacute;n&lt;/a&gt; , por lo que naturalmente favorecemos la forma de expresi&amp;oacute;n. Soportar solo una variante ayuda a evitar errores confusos que pueden surgir de las &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/function#Function_declaration_hoisting&quot;&gt;sutiles diferencias entre las dos formas&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="10b3493287f831e81a438811a1ffba01f8cec4b7" translate="yes" xml:space="preserve">
          <source>Node.js</source>
          <target state="translated">Node.js</target>
        </trans-unit>
        <trans-unit id="a17d639e61da9d0653ca53ca643f92af7655ebe3" translate="yes" xml:space="preserve">
          <source>Note how because we are assigning the value of the comprehensions to a variable in the example above, CoffeeScript is collecting the result of each iteration into an array. Sometimes functions end with loops that are intended to run only for their side-effects. Be careful that you&amp;rsquo;re not accidentally returning the results of the comprehension in these cases, by adding a meaningful return value &amp;mdash; like &lt;code&gt;true&lt;/code&gt; &amp;mdash; or &lt;code&gt;null&lt;/code&gt;, to the bottom of your function.</source>
          <target state="translated">Observe c&amp;oacute;mo, debido a que estamos asignando el valor de las comprensiones a una variable en el ejemplo anterior, CoffeeScript est&amp;aacute; recopilando el resultado de cada iteraci&amp;oacute;n en una matriz. A veces, las funciones terminan con bucles que est&amp;aacute;n destinados a ejecutarse solo por sus efectos secundarios. Tenga cuidado de no devolver accidentalmente los resultados de la comprensi&amp;oacute;n en estos casos, agregando un valor de retorno significativo, como &lt;code&gt;true&lt;/code&gt; , o &lt;code&gt;null&lt;/code&gt; , en la parte inferior de su funci&amp;oacute;n.</target>
        </trans-unit>
        <trans-unit id="7878aae2bc5e1df5f94aa51acb2a5c0788234496" translate="yes" xml:space="preserve">
          <source>Note that JavaScript strings are immutable, and can&amp;rsquo;t be spliced.</source>
          <target state="translated">Tenga en cuenta que las cadenas de JavaScript son inmutables y no se pueden unir.</target>
        </trans-unit>
        <trans-unit id="d3179b6c8afd9cdc3bb1ec6e1c16cc445004943e" translate="yes" xml:space="preserve">
          <source>Note that if the compiler knows that &lt;code&gt;a&lt;/code&gt; is in scope and therefore declared, &lt;code&gt;a?&lt;/code&gt; compiles to &lt;code&gt;a != null&lt;/code&gt;, &lt;em&gt;not&lt;/em&gt;&lt;code&gt;a !== null&lt;/code&gt;. The &lt;code&gt;!=&lt;/code&gt; makes a loose comparison to &lt;code&gt;null&lt;/code&gt;, which does double duty also comparing against &lt;code&gt;undefined&lt;/code&gt;. The reverse also holds for &lt;code&gt;not a?&lt;/code&gt; or &lt;code&gt;unless a?&lt;/code&gt;.</source>
          <target state="translated">Tenga en cuenta que si el compilador sabe que &lt;code&gt;a&lt;/code&gt; est&amp;aacute; dentro del alcance y, por lo tanto, se declara, &lt;code&gt;a?&lt;/code&gt; compila a &lt;code&gt;a != null&lt;/code&gt; , &lt;em&gt;no &lt;/em&gt; &lt;code&gt;a !== null&lt;/code&gt; . El &lt;code&gt;!=&lt;/code&gt; Hace una comparaci&amp;oacute;n suelta con &lt;code&gt;null&lt;/code&gt; , lo que hace doble deber tambi&amp;eacute;n en comparaci&amp;oacute;n con &lt;code&gt;undefined&lt;/code&gt; . El reverso tambi&amp;eacute;n es v&amp;aacute;lido para &lt;code&gt;not a?&lt;/code&gt; o a &lt;code&gt;unless a?&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="c346bd383bcb5c9fab50c836103159e19fa051e2" translate="yes" xml:space="preserve">
          <source>Note that the CoffeeScript compiler &lt;strong&gt;does not resolve modules&lt;/strong&gt;; writing an &lt;code&gt;import&lt;/code&gt; or &lt;code&gt;export&lt;/code&gt; statement in CoffeeScript will produce an &lt;code&gt;import&lt;/code&gt; or &lt;code&gt;export&lt;/code&gt; statement in the resulting output. It is your responsibility to &lt;a href=&quot;#transpilation&quot;&gt;transpile&lt;/a&gt; this ES2015 syntax into code that will work in your target runtimes.</source>
          <target state="translated">Tenga en cuenta que el compilador CoffeeScript &lt;strong&gt;no resuelve m&amp;oacute;dulos&lt;/strong&gt; ; escribir una declaraci&amp;oacute;n de &lt;code&gt;import&lt;/code&gt; aci&amp;oacute;n o &lt;code&gt;export&lt;/code&gt; aci&amp;oacute;n en CoffeeScript producir&amp;aacute; una declaraci&amp;oacute;n de &lt;code&gt;import&lt;/code&gt; aci&amp;oacute;n o &lt;code&gt;export&lt;/code&gt; aci&amp;oacute;n en el resultado resultante. Es su responsabilidad &lt;a href=&quot;#transpilation&quot;&gt;transpilar&lt;/a&gt; esta sintaxis de ES2015 en c&amp;oacute;digo que funcionar&amp;aacute; en sus tiempos de ejecuci&amp;oacute;n de destino.</target>
        </trans-unit>
        <trans-unit id="3da55fdb5cea2e3963662a9bb50c1c4e14f19b69" translate="yes" xml:space="preserve">
          <source>Note that transpiling doesn&amp;rsquo;t automatically supply &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/Polyfill&quot;&gt;polyfills&lt;/a&gt; for your code. CoffeeScript itself will output &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/indexOf&quot;&gt;&lt;code&gt;Array.indexOf&lt;/code&gt;&lt;/a&gt; if you use the &lt;code&gt;in&lt;/code&gt; operator, or destructuring or spread/rest syntax; and &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/bind&quot;&gt;&lt;code&gt;Function.bind&lt;/code&gt;&lt;/a&gt; if you use a bound (&lt;code&gt;=&amp;gt;&lt;/code&gt;) method in a class. Both are supported in Internet Explorer 9+ and all more recent browsers, but you will need to supply polyfills if you need to support Internet Explorer 8 or below and are using features that would cause these methods to be output. You&amp;rsquo;ll also need to supply polyfills if your own code uses these methods or another method added in recent versions of JavaScript. One polyfill option is &lt;a href=&quot;https://babeljs.io/docs/en/babel-polyfill/&quot;&gt;&lt;code&gt;@babel/polyfill&lt;/code&gt;&lt;/a&gt;, though there are many &lt;a href=&quot;https://hackernoon.com/polyfills-everything-you-ever-wanted-to-know-or-maybe-a-bit-less-7c8de164e423&quot;&gt;other&lt;/a&gt;&lt;a href=&quot;https://philipwalton.com/articles/loading-polyfills-only-when-needed/&quot;&gt;strategies&lt;/a&gt;.</source>
          <target state="translated">Tenga en cuenta que transpiling no proporciona autom&amp;aacute;ticamente &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/Polyfill&quot;&gt;polyfills&lt;/a&gt; para su c&amp;oacute;digo. El propio CoffeeScript generar&amp;aacute; &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/indexOf&quot;&gt; &lt;code&gt;Array.indexOf&lt;/code&gt; &lt;/a&gt; si usa el operador &lt;code&gt;in&lt;/code&gt; , o la sintaxis de desestructuraci&amp;oacute;n o propagaci&amp;oacute;n / reposo; y &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/bind&quot;&gt; &lt;code&gt;Function.bind&lt;/code&gt; &lt;/a&gt; si usa un m&amp;eacute;todo enlazado ( &lt;code&gt;=&amp;gt;&lt;/code&gt; ) en una clase. Ambos son compatibles con Internet Explorer 9+ y todos los navegadores m&amp;aacute;s recientes, pero necesitar&amp;aacute; suministrar polyfills si necesita admitir Internet Explorer 8 o inferior y est&amp;aacute; utilizando caracter&amp;iacute;sticas que causar&amp;iacute;an la salida de estos m&amp;eacute;todos. Tambi&amp;eacute;n necesitar&amp;aacute; suministrar polyfills si su propio c&amp;oacute;digo usa estos m&amp;eacute;todos u otro m&amp;eacute;todo agregado en versiones recientes de JavaScript. Una opci&amp;oacute;n de polyfill es &lt;a href=&quot;https://babeljs.io/docs/en/babel-polyfill/&quot;&gt; &lt;code&gt;@babel/polyfill&lt;/code&gt; &lt;/a&gt; , aunque hay muchas&lt;a href=&quot;https://hackernoon.com/polyfills-everything-you-ever-wanted-to-know-or-maybe-a-bit-less-7c8de164e423&quot;&gt;otras &lt;/a&gt;&lt;a href=&quot;https://philipwalton.com/articles/loading-polyfills-only-when-needed/&quot;&gt;estrategias&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="b0e75b1cc5940f3dfdf0f98f2537757533933df2" translate="yes" xml:space="preserve">
          <source>Notice how all of the variable declarations have been pushed up to the top of the closest scope, the first time they appear. &lt;code&gt;outer&lt;/code&gt; is not redeclared within the inner function, because it&amp;rsquo;s already in scope; &lt;code&gt;inner&lt;/code&gt; within the function, on the other hand, should not be able to change the value of the external variable of the same name, and therefore has a declaration of its own.</source>
          <target state="translated">Observe c&amp;oacute;mo todas las declaraciones de variables se han llevado a la parte superior del alcance m&amp;aacute;s cercano, la primera vez que aparecen. &lt;code&gt;outer&lt;/code&gt; no se vuelve a declarar dentro de la funci&amp;oacute;n interna, porque ya est&amp;aacute; dentro del alcance; &lt;code&gt;inner&lt;/code&gt; dentro de la funci&amp;oacute;n, por otro lado, no deber&amp;iacute;a poder cambiar el valor de la variable externa del mismo nombre, y por lo tanto tiene una declaraci&amp;oacute;n propia.</target>
        </trans-unit>
        <trans-unit id="ca1abda92d5b54711ee766219d8e2c4693c6ca7a" translate="yes" xml:space="preserve">
          <source>Now you would just type:</source>
          <target state="translated">Ahora sólo tienes que escribir a máquina:</target>
        </trans-unit>
        <trans-unit id="566c9ccf76b4698b00a6f761b3c71b9f0e05eb29" translate="yes" xml:space="preserve">
          <source>Objects and Arrays</source>
          <target state="translated">Objetos y conjuntos</target>
        </trans-unit>
        <trans-unit id="5fc811955d55e0ff5b82d1a49c11e277df049033" translate="yes" xml:space="preserve">
          <source>Older plugins or forks of CoffeeScript supported JSX syntax and referred to it as CSX or CJSX. They also often used a &lt;code&gt;.cjsx&lt;/code&gt; file extension, but this is no longer necessary; regular &lt;code&gt;.coffee&lt;/code&gt; will do.</source>
          <target state="translated">Los complementos o horquillas m&amp;aacute;s antiguas de CoffeeScript admit&amp;iacute;an la sintaxis JSX y se refer&amp;iacute;an a ella como CSX o CJSX. Tambi&amp;eacute;n sol&amp;iacute;an usar una extensi&amp;oacute;n de archivo &lt;code&gt;.cjsx&lt;/code&gt; , pero esto ya no es necesario; El &lt;code&gt;.coffee&lt;/code&gt; regular servir&amp;aacute;.</target>
        </trans-unit>
        <trans-unit id="47445da7574ef1c2b9f9dbbf29f9a3e160cc9748" translate="yes" xml:space="preserve">
          <source>On non-Windows platforms, a &lt;code&gt;.coffee&lt;/code&gt; file can be made executable by adding a shebang (&lt;code&gt;#!&lt;/code&gt;) line at the top of the file and marking the file as executable. For example:</source>
          <target state="translated">En plataformas que no son de Windows, un archivo &lt;code&gt;.coffee&lt;/code&gt; puede hacerse ejecutable agregando una l&amp;iacute;nea shebang ( &lt;code&gt;#!&lt;/code&gt; ) En la parte superior del archivo y marcando el archivo como ejecutable. Por ejemplo:</target>
        </trans-unit>
        <trans-unit id="88e58b2db811a67c2866ad03f41850be69476b09" translate="yes" xml:space="preserve">
          <source>Once installed, you should have access to the &lt;code&gt;coffee&lt;/code&gt; command, which can execute scripts, compile &lt;code&gt;.coffee&lt;/code&gt; files into &lt;code&gt;.js&lt;/code&gt;, and provide an interactive REPL. The &lt;code&gt;coffee&lt;/code&gt; command takes the following options:</source>
          <target state="translated">Una vez instalado, debe tener acceso al comando &lt;code&gt;coffee&lt;/code&gt; , que puede ejecutar scripts, compilar archivos &lt;code&gt;.coffee&lt;/code&gt; en &lt;code&gt;.js&lt;/code&gt; y proporcionar un REPL interactivo. El comando &lt;code&gt;coffee&lt;/code&gt; toma las siguientes opciones:</target>
        </trans-unit>
        <trans-unit id="968e4a68ad115837ed26068f6b0ed2cb269d66ce" translate="yes" xml:space="preserve">
          <source>Once you have &lt;code&gt;@babel/core&lt;/code&gt; and &lt;code&gt;@babel/preset-env&lt;/code&gt; (or other presets or plugins) installed, and a &lt;code&gt;.babelrc&lt;/code&gt; file (or other equivalent) in place, you can use &lt;code&gt;coffee --transpile&lt;/code&gt; to pipe CoffeeScript&amp;rsquo;s output through Babel using the options you&amp;rsquo;ve saved.</source>
          <target state="translated">Una vez que haya instalado &lt;code&gt;@babel/core&lt;/code&gt; y &lt;code&gt;@babel/preset-env&lt;/code&gt; (u otros preajustes o complementos) instalados, y un archivo &lt;code&gt;.babelrc&lt;/code&gt; (u otro equivalente) en su lugar, puede usar &lt;code&gt;coffee --transpile&lt;/code&gt; para canalizar la salida de CoffeeScript a trav&amp;eacute;s de Babel usando Las opciones que ha guardado.</target>
        </trans-unit>
        <trans-unit id="e90414358dbfff0a68e4eb5d68a16978cf197d5a" translate="yes" xml:space="preserve">
          <source>Operators</source>
          <target state="translated">Operators</target>
        </trans-unit>
        <trans-unit id="1863519535480ab59ac39566f63c3643c8a7c46d" translate="yes" xml:space="preserve">
          <source>Operators and Aliases</source>
          <target state="translated">Operadores y alias</target>
        </trans-unit>
        <trans-unit id="e31d972229de381b461860014dd710856361917a" translate="yes" xml:space="preserve">
          <source>Option</source>
          <target state="translated">Option</target>
        </trans-unit>
        <trans-unit id="70d58de47bef0c1dc805b8a5582bf3bb4065cd12" translate="yes" xml:space="preserve">
          <source>Or if you know that the parent function doesn&amp;rsquo;t require arguments, just call &lt;code&gt;super()&lt;/code&gt;:</source>
          <target state="translated">O si sabe que la funci&amp;oacute;n padre no requiere argumentos, simplemente llame a &lt;code&gt;super()&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="4abfdc58ca2958fb7f19e78ea1f0eafecc095c1b" translate="yes" xml:space="preserve">
          <source>Or if you&amp;rsquo;re running the &lt;code&gt;coffee&lt;/code&gt; command outside of a project folder, using a globally-installed &lt;code&gt;coffeescript&lt;/code&gt; module, &lt;code&gt;@babel/core&lt;/code&gt; needs to be installed globally:</source>
          <target state="translated">O si est&amp;aacute; ejecutando el comando &lt;code&gt;coffee&lt;/code&gt; fuera de una carpeta de proyecto, utilizando un m&amp;oacute;dulo &lt;code&gt;coffeescript&lt;/code&gt; instalado globalmente , &lt;code&gt;@babel/core&lt;/code&gt; debe instalarse globalmente:</target>
        </trans-unit>
        <trans-unit id="0efc2e6be4c23b9a513d7ce0dcff8ed80e8912e7" translate="yes" xml:space="preserve">
          <source>Overview</source>
          <target state="translated">Overview</target>
        </trans-unit>
        <trans-unit id="3582229790b1aa109582562e652fba246dfb989e" translate="yes" xml:space="preserve">
          <source>Parses the code as Literate CoffeeScript. You only need to specify this when passing in code directly over &lt;strong&gt;stdio&lt;/strong&gt;, or using some sort of extension-less file name.</source>
          <target state="translated">Analiza el c&amp;oacute;digo como Literate CoffeeScript. Solo necesita especificar esto cuando pase el c&amp;oacute;digo directamente sobre &lt;strong&gt;stdio&lt;/strong&gt; , o use alg&amp;uacute;n tipo de nombre de archivo sin extensi&amp;oacute;n.</target>
        </trans-unit>
        <trans-unit id="4f1dcee64c9b040dea753f1d5184978e4fd28e2b" translate="yes" xml:space="preserve">
          <source>Per the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Default_parameters&quot;&gt;ES2015 spec regarding function default parameters&lt;/a&gt; and &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment#Default_values&quot;&gt;destructuring default values&lt;/a&gt;, default values are only applied when a value is missing or &lt;code&gt;undefined&lt;/code&gt;. In CoffeeScript 1.x, the default value would be applied in those cases but also if the value was &lt;code&gt;null&lt;/code&gt;.</source>
          <target state="translated">Seg&amp;uacute;n la &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Default_parameters&quot;&gt;especificaci&amp;oacute;n ES2015 con respecto a los par&amp;aacute;metros predeterminados de la funci&amp;oacute;n&lt;/a&gt; y &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment#Default_values&quot;&gt;los valores predeterminados de desestructuraci&amp;oacute;n&lt;/a&gt; , los valores predeterminados solo se aplican cuando falta un valor o &lt;code&gt;undefined&lt;/code&gt; est&amp;aacute; definido . En CoffeeScript 1.x, el valor predeterminado se aplicar&amp;iacute;a en esos casos, pero tambi&amp;eacute;n si el valor fuera &lt;code&gt;null&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="dd72d92f93bcbc4707fdbf29cee5a48b123c133c" translate="yes" xml:space="preserve">
          <source>Pipe in CoffeeScript to STDIN and get back JavaScript over STDOUT. Good for use with processes written in other languages. An example:</source>
          <target state="translated">Ponga el código de café a STDIN y recupere el código de Java sobre STDOUT.Es bueno para usar con procesos escritos en otros idiomas.Un ejemplo:</target>
        </trans-unit>
        <trans-unit id="bb867dd7a9b38a2aedeac5fcb2379aed6eed2d63" translate="yes" xml:space="preserve">
          <source>Pipe the CoffeeScript compiler&amp;rsquo;s output through Babel before saving or running the generated JavaScript. Requires &lt;code&gt;@babel/core&lt;/code&gt; to be installed, and options to pass to Babel in a &lt;code&gt;.babelrc&lt;/code&gt; file or a &lt;code&gt;package.json&lt;/code&gt; with a &lt;code&gt;babel&lt;/code&gt; key in the path of the file or folder to be compiled. See &lt;a href=&quot;#transpilation&quot;&gt;Transpilation&lt;/a&gt;.</source>
          <target state="translated">Canalice la salida del compilador CoffeeScript a trav&amp;eacute;s de Babel antes de guardar o ejecutar el JavaScript generado. Requiere que se instale &lt;code&gt;@babel/core&lt;/code&gt; y opciones para pasar a Babel en un archivo &lt;code&gt;.babelrc&lt;/code&gt; o &lt;code&gt;package.json&lt;/code&gt; con una clave &lt;code&gt;babel&lt;/code&gt; en la ruta del archivo o carpeta que se compilar&amp;aacute;. Ver &lt;a href=&quot;#transpilation&quot;&gt;Transpilaci&amp;oacute;n&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="c65de7239130b2221dc156af1c9b5fa8125b9bf3" translate="yes" xml:space="preserve">
          <source>Polyfills</source>
          <target state="translated">Polyfills</target>
        </trans-unit>
        <trans-unit id="32f6d152131c542beafde761060b9c5187fa0fd9" translate="yes" xml:space="preserve">
          <source>Print out the compiled JS from a one-liner:</source>
          <target state="translated">Imprime el JS compilado de una línea:</target>
        </trans-unit>
        <trans-unit id="a4e2d5650ff557033b751f41cc52650a02e0ddc8" translate="yes" xml:space="preserve">
          <source>Prototypal Inheritance</source>
          <target state="translated">Herencia prototípica</target>
        </trans-unit>
        <trans-unit id="d07133c8504b6a0e98371a1b9afe2ca2855a7270" translate="yes" xml:space="preserve">
          <source>Quickstart</source>
          <target state="translated">Quickstart</target>
        </trans-unit>
        <trans-unit id="0d5fda95e3940bc09dc1ccc22666813c0b54f73d" translate="yes" xml:space="preserve">
          <source>Ranges</source>
          <target state="translated">Ranges</target>
        </trans-unit>
        <trans-unit id="24aaf8084dd55feaa39e1aafbe6c650fc362ceae" translate="yes" xml:space="preserve">
          <source>Ranges can also be used to extract slices of arrays. With two dots (&lt;code&gt;3..6&lt;/code&gt;), the range is inclusive (&lt;code&gt;3, 4, 5, 6&lt;/code&gt;); with three dots (&lt;code&gt;3...6&lt;/code&gt;), the range excludes the end (&lt;code&gt;3, 4, 5&lt;/code&gt;). Slices indices have useful defaults. An omitted first index defaults to zero and an omitted second index defaults to the size of the array.</source>
          <target state="translated">Los rangos tambi&amp;eacute;n se pueden usar para extraer segmentos de matrices. Con dos puntos ( &lt;code&gt;3..6&lt;/code&gt; ), el rango es inclusivo ( &lt;code&gt;3, 4, 5, 6&lt;/code&gt; ); con tres puntos ( &lt;code&gt;3...6&lt;/code&gt; ), el rango excluye el final ( &lt;code&gt;3, 4, 5&lt;/code&gt; ). Los &amp;iacute;ndices de sectores tienen valores predeterminados &amp;uacute;tiles. Un primer &amp;iacute;ndice omitido tiene como valor predeterminado cero y un segundo &amp;iacute;ndice omitido tiene el tama&amp;ntilde;o predeterminado de la matriz.</target>
        </trans-unit>
        <trans-unit id="87df60de337fb58864343e396696d74611e0d403" translate="yes" xml:space="preserve">
          <source>Resources</source>
          <target state="translated">Resources</target>
        </trans-unit>
        <trans-unit id="28bada3d37bb0a3a9f2a34311d7e6164ba0dc426" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;https://babeljs.io/docs/plugins/&quot;&gt;Babel&amp;rsquo;s website to learn about presets and plugins&lt;/a&gt; and the multitude of options you have. Another preset you might need is &lt;a href=&quot;https://babeljs.io/docs/en/babel-plugin-transform-react-jsx/&quot;&gt;&lt;code&gt;@babel/plugin-transform-react-jsx&lt;/code&gt;&lt;/a&gt; if you&amp;rsquo;re using JSX with React (JSX can also be used with other frameworks).</source>
          <target state="translated">Visite &lt;a href=&quot;https://babeljs.io/docs/plugins/&quot;&gt;el sitio web de Babel para obtener informaci&amp;oacute;n sobre los preajustes y complementos&lt;/a&gt; y la multitud de opciones que tiene. Otro valor predeterminado que puede necesitar es &lt;a href=&quot;https://babeljs.io/docs/en/babel-plugin-transform-react-jsx/&quot;&gt; &lt;code&gt;@babel/plugin-transform-react-jsx&lt;/code&gt; &lt;/a&gt; si est&amp;aacute; usando JSX con React (JSX tambi&amp;eacute;n se puede usar con otros marcos).</target>
        </trans-unit>
        <trans-unit id="74aa7d3d7d4395b004fa0da48ff50e997cf268b3" translate="yes" xml:space="preserve">
          <source>Similar to block strings and comments, CoffeeScript supports block regexes &amp;mdash; extended regular expressions that ignore internal whitespace and can contain comments and interpolation. Modeled after Perl&amp;rsquo;s &lt;code&gt;/x&lt;/code&gt; modifier, CoffeeScript&amp;rsquo;s block regexes are delimited by &lt;code&gt;///&lt;/code&gt; and go a long way towards making complex regular expressions readable. To quote from the CoffeeScript source:</source>
          <target state="translated">Similar a cadenas de bloques y comentarios, CoffeeScript admite expresiones regulares de bloque, expresiones regulares extendidas que ignoran los espacios en blanco internos y pueden contener comentarios e interpolaci&amp;oacute;n. Siguiendo el modelo del modificador &lt;code&gt;/x&lt;/code&gt; de Perl , las expresiones regulares de bloque de CoffeeScript est&amp;aacute;n delimitadas por &lt;code&gt;///&lt;/code&gt; y contribuyen en gran medida a hacer legibles las expresiones regulares complejas. Para citar de la fuente CoffeeScript:</target>
        </trans-unit>
        <trans-unit id="8159f92ff6c06035d06cbb7eb3033fede5940b02" translate="yes" xml:space="preserve">
          <source>Similar to how &lt;code&gt;yield return&lt;/code&gt; forces a generator, &lt;code&gt;await return&lt;/code&gt; may be used to force a function to be async.</source>
          <target state="translated">De manera similar a c&amp;oacute;mo el &lt;code&gt;yield return&lt;/code&gt; fuerza a un generador, el &lt;code&gt;await return&lt;/code&gt; puede usarse para forzar que una funci&amp;oacute;n sea as&amp;iacute;ncrona.</target>
        </trans-unit>
        <trans-unit id="d4a58561dd9ce9ebf0ef891fdc51fcf365c7dc7e" translate="yes" xml:space="preserve">
          <source>Since CoffeeScript takes care of all variable declaration, it is not possible to declare variables with ES2015&amp;rsquo;s &lt;code&gt;let&lt;/code&gt; or &lt;code&gt;const&lt;/code&gt;. &lt;a href=&quot;#unsupported-let-const&quot;&gt;This is intentional&lt;/a&gt;; we feel that the simplicity gained by not having to think about variable declaration outweighs the benefit of having three separate ways to declare variables.</source>
          <target state="translated">Dado que CoffeeScript se encarga de todas las declaraciones de variables, no es posible declarar variables con &lt;code&gt;let&lt;/code&gt; o &lt;code&gt;const&lt;/code&gt; de ES2015 . &lt;a href=&quot;#unsupported-let-const&quot;&gt;Esto es intencional&lt;/a&gt; ; creemos que la simplicidad ganada al no tener que pensar en la declaraci&amp;oacute;n de variables supera el beneficio de tener tres formas separadas de declarar variables.</target>
        </trans-unit>
        <trans-unit id="5774da7b802f7af9150c4273aaf57f7387c8eb1d" translate="yes" xml:space="preserve">
          <source>Source Maps</source>
          <target state="translated">Mapas de fuentes</target>
        </trans-unit>
        <trans-unit id="da68b1026804cc80434fc637d86d0eb96635cb24" translate="yes" xml:space="preserve">
          <source>Splats also let us elide array elements&amp;hellip;</source>
          <target state="translated">Los s&amp;iacute;mbolos tambi&amp;eacute;n nos permiten eludir elementos de matriz ...</target>
        </trans-unit>
        <trans-unit id="424dbd400ae6e38a2f49aadeb924ee108357cfdb" translate="yes" xml:space="preserve">
          <source>Splats, or Rest Parameters/Spread Syntax</source>
          <target state="translated">Splats,o parámetros de descanso/sintaxis de propagación</target>
        </trans-unit>
        <trans-unit id="326a96ab3ee59b29761fe875d4032ef3fd1dcd75" translate="yes" xml:space="preserve">
          <source>Start the CoffeeScript REPL (&lt;code&gt;Ctrl-D&lt;/code&gt; to exit, &lt;code&gt;Ctrl-V&lt;/code&gt;for multi-line):</source>
          <target state="translated">Inicie la REPL de CoffeeScript ( &lt;code&gt;Ctrl-D&lt;/code&gt; para salir, &lt;code&gt;Ctrl-V&lt;/code&gt; para l&amp;iacute;neas m&amp;uacute;ltiples):</target>
        </trans-unit>
        <trans-unit id="5653cebc057d4791ce07031ad9286e729de6d691" translate="yes" xml:space="preserve">
          <source>Statements</source>
          <target state="translated">Statements</target>
        </trans-unit>
        <trans-unit id="fd9b9a809e9699ee433dd5e37059d01714f797c7" translate="yes" xml:space="preserve">
          <source>Static methods can be defined using &lt;code&gt;@&lt;/code&gt; before the method name:</source>
          <target state="translated">Los m&amp;eacute;todos est&amp;aacute;ticos se pueden definir usando &lt;code&gt;@&lt;/code&gt; antes del nombre del m&amp;eacute;todo:</target>
        </trans-unit>
        <trans-unit id="bb5eff5196ac991028b63b54dacf4e8686fd3692" translate="yes" xml:space="preserve">
          <source>Static type checking can be achieved in CoffeeScript by using &lt;a href=&quot;https://flow.org/&quot;&gt;Flow&lt;/a&gt;&amp;rsquo;s &lt;a href=&quot;https://flow.org/en/docs/types/comments/&quot;&gt;Comment Types syntax&lt;/a&gt;:</source>
          <target state="translated">La verificaci&amp;oacute;n de tipos est&amp;aacute;ticos se puede lograr en CoffeeScript utilizando la &lt;a href=&quot;https://flow.org/en/docs/types/comments/&quot;&gt;sintaxis de Tipos de comentarios de &lt;/a&gt;&lt;a href=&quot;https://flow.org/&quot;&gt;Flow&lt;/a&gt; :</target>
        </trans-unit>
        <trans-unit id="3816c4beac471c733eed1d91c213f8c2b6a29262" translate="yes" xml:space="preserve">
          <source>Strings</source>
          <target state="translated">Strings</target>
        </trans-unit>
        <trans-unit id="84130039777ac54831b333570728881088c16ed5" translate="yes" xml:space="preserve">
          <source>Suppress the &amp;ldquo;Generated by CoffeeScript&amp;rdquo; header.</source>
          <target state="translated">Suprima el encabezado &quot;Generado por CoffeeScript&quot;.</target>
        </trans-unit>
        <trans-unit id="292abefb8a7c036089ac917fd0757a7bb6e3111c" translate="yes" xml:space="preserve">
          <source>Switch/When/Else</source>
          <target state="translated">Switch/When/Else</target>
        </trans-unit>
        <trans-unit id="5fd53f2212dd11ad266f50696cd5a9ca1ea708d6" translate="yes" xml:space="preserve">
          <source>Tagged Template Literals</source>
          <target state="translated">Literales de la plantilla etiquetados</target>
        </trans-unit>
        <trans-unit id="468657e1c13e92e3564728da3cdadc47c49817c6" translate="yes" xml:space="preserve">
          <source>Task definitions are written in CoffeeScript, so you can put arbitrary code in your Cakefile. Define a task with a name, a long description, and the function to invoke when the task is run. If your task takes a command-line option, you can define the option with short and long flags, and it will be made available in the &lt;code&gt;options&lt;/code&gt; object. Here&amp;rsquo;s a task that uses the Node.js API to rebuild CoffeeScript&amp;rsquo;s parser:</source>
          <target state="translated">Las definiciones de tareas est&amp;aacute;n escritas en CoffeeScript, por lo que puede poner c&amp;oacute;digo arbitrario en su Cakefile. Defina una tarea con un nombre, una descripci&amp;oacute;n larga y la funci&amp;oacute;n a invocar cuando se ejecuta la tarea. Si su tarea toma una opci&amp;oacute;n de l&amp;iacute;nea de comandos, puede definir la opci&amp;oacute;n con banderas cortas y largas, y estar&amp;aacute; disponible en el objeto de &lt;code&gt;options&lt;/code&gt; . Aqu&amp;iacute; hay una tarea que usa la API Node.js para reconstruir el analizador de CoffeeScript:</target>
        </trans-unit>
        <trans-unit id="1bc65a5d778ee3969a41b1e46397162f821ca5f0" translate="yes" xml:space="preserve">
          <source>Technically, &lt;code&gt;foo = function() {}&lt;/code&gt; is creating an anonymous function that gets assigned to a variable named &lt;code&gt;foo&lt;/code&gt;. Some very early versions of CoffeeScript named this function, e.g. &lt;code&gt;foo = function foo() {}&lt;/code&gt;, but this was dropped because of compatibility issues with Internet Explorer. For a while this annoyed people, as these functions would be unnamed in stack traces; but modern JavaScript runtimes &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/name&quot;&gt;infer the names of such anonymous functions&lt;/a&gt; from the names of the variables to which they&amp;rsquo;re assigned. Given that this is the case, it&amp;rsquo;s simplest to just preserve the current behavior.</source>
          <target state="translated">T&amp;eacute;cnicamente, &lt;code&gt;foo = function() {}&lt;/code&gt; est&amp;aacute; creando una funci&amp;oacute;n an&amp;oacute;nima que se asigna a una variable llamada &lt;code&gt;foo&lt;/code&gt; . Algunas versiones muy tempranas de CoffeeScript llamaron a esta funci&amp;oacute;n, por ejemplo, &lt;code&gt;foo = function foo() {}&lt;/code&gt; , pero esto se elimin&amp;oacute; debido a problemas de compatibilidad con Internet Explorer. Durante un tiempo esto molest&amp;oacute; a las personas, ya que estas funciones no se nombrar&amp;iacute;an en los rastros de la pila; pero los tiempos de ejecuci&amp;oacute;n de JavaScript modernos &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/name&quot;&gt;infieren los nombres de tales funciones an&amp;oacute;nimas a&lt;/a&gt; partir de los nombres de las variables a las que est&amp;aacute;n asignadas. Dado que este es el caso, es m&amp;aacute;s simple simplemente preservar el comportamiento actual.</target>
        </trans-unit>
        <trans-unit id="7572c0330f0713d1c5e756a7afc16d79cdfd440e" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://github.com/tc39/proposal-regexp-dotall-flag&quot;&gt;regular expression &lt;code&gt;s&lt;/code&gt; (dotall) flag&lt;/a&gt; is supported by Node 9+.</source>
          <target state="translated">El &lt;a href=&quot;https://github.com/tc39/proposal-regexp-dotall-flag&quot;&gt;indicador de &lt;/a&gt;expresi&amp;oacute;n regular &lt;code&gt;s&lt;/code&gt; (dotall) es compatible con el Nodo 9+.</target>
        </trans-unit>
        <trans-unit id="c056ef78212ae02220f393b10157bf5612f52880" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;coffee&lt;/code&gt; and &lt;code&gt;cake&lt;/code&gt; commands will first look in the current folder to see if CoffeeScript is installed locally, and use that version if so. This allows different versions of CoffeeScript to be installed globally and locally.</source>
          <target state="translated">Los comandos &lt;code&gt;coffee&lt;/code&gt; and &lt;code&gt;cake&lt;/code&gt; se ver&amp;aacute;n primero en la carpeta actual para ver si CoffeeScript est&amp;aacute; instalado localmente, y usar&amp;aacute;n esa versi&amp;oacute;n si es as&amp;iacute;. Esto permite que se instalen diferentes versiones de CoffeeScript de forma global y local.</target>
        </trans-unit>
        <trans-unit id="ba748e704aff73a187b5b4d11e627d8c846dc17c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;compile&lt;/code&gt; method has the signature &lt;code&gt;compile(code, options)&lt;/code&gt; where &lt;code&gt;code&lt;/code&gt; is a string of CoffeeScript code, and the optional &lt;code&gt;options&lt;/code&gt; is an object with some or all of the following properties:</source>
          <target state="translated">El m&amp;eacute;todo de &lt;code&gt;compile&lt;/code&gt; tiene la &lt;code&gt;compile(code, options)&lt;/code&gt; firma (c&amp;oacute;digo, opciones) donde el &lt;code&gt;code&lt;/code&gt; es una cadena de c&amp;oacute;digo CoffeeScript, y las &lt;code&gt;options&lt;/code&gt; opcionales son un objeto con algunas o todas las siguientes propiedades:</target>
        </trans-unit>
        <trans-unit id="655422e26379c46e7d5bcfbd8d6d8f7315e989f7" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;node&lt;/code&gt; executable has some useful options you can set, such as &lt;code&gt;--debug&lt;/code&gt;, &lt;code&gt;--debug-brk&lt;/code&gt;, &lt;code&gt;--max-stack-size&lt;/code&gt;, and &lt;code&gt;--expose-gc&lt;/code&gt;. Use this flag to forward options directly to Node.js. To pass multiple flags, use &lt;code&gt;--nodejs&lt;/code&gt; multiple times.</source>
          <target state="translated">El ejecutable del &lt;code&gt;node&lt;/code&gt; tiene algunas opciones &amp;uacute;tiles que puede establecer, como &lt;code&gt;--debug&lt;/code&gt; , &lt;code&gt;--debug-brk&lt;/code&gt; , &lt;code&gt;--max-stack-size&lt;/code&gt; y &lt;code&gt;--expose-gc&lt;/code&gt; . Use este indicador para reenviar opciones directamente a Node.js. Para pasar varias banderas, use &lt;code&gt;--nodejs&lt;/code&gt; varias veces.</target>
        </trans-unit>
        <trans-unit id="4d06fa582277c824a5eedd0cdf8c8c43e8fd4e37" translate="yes" xml:space="preserve">
          <source>The CoffeeScript compiler takes care to make sure that all of your variables are properly declared within lexical scope &amp;mdash; you never need to write &lt;code&gt;var&lt;/code&gt; yourself.</source>
          <target state="translated">El compilador CoffeeScript se asegura de que todas las variables se declaren correctamente dentro del &amp;aacute;mbito l&amp;eacute;xico; nunca es necesario escribir &lt;code&gt;var&lt;/code&gt; usted mismo.</target>
        </trans-unit>
        <trans-unit id="c6f6a454b2aadf8379fc2d7a711646b0c0889b8e" translate="yes" xml:space="preserve">
          <source>The CoffeeScript literals for objects and arrays look very similar to their JavaScript cousins. When each property is listed on its own line, the commas are optional. Objects may be created using indentation instead of explicit braces, similar to &lt;a href=&quot;http://yaml.org&quot;&gt;YAML&lt;/a&gt;.</source>
          <target state="translated">Los literales de CoffeeScript para objetos y matrices se parecen mucho a sus primos JavaScript. Cuando cada propiedad aparece en su propia l&amp;iacute;nea, las comas son opcionales. Los objetos se pueden crear usando sangr&amp;iacute;a en lugar de llaves expl&amp;iacute;citas, similar a &lt;a href=&quot;http://yaml.org&quot;&gt;YAML&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="632671d8e925198953b170ddd065e3816277d5e2" translate="yes" xml:space="preserve">
          <source>The Existential Operator</source>
          <target state="translated">El operador existencial</target>
        </trans-unit>
        <trans-unit id="c299679511c002544394508b8a38855769b0948a" translate="yes" xml:space="preserve">
          <source>The JavaScript &lt;code&gt;arguments&lt;/code&gt; object is a useful way to work with functions that accept variable numbers of arguments. CoffeeScript provides splats &lt;code&gt;...&lt;/code&gt;, both for function definition as well as invocation, making variable numbers of arguments a little bit more palatable. ES2015 adopted this feature as their &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/rest_parameters&quot;&gt;rest parameters&lt;/a&gt;.</source>
          <target state="translated">El objeto de &lt;code&gt;arguments&lt;/code&gt; JavaScript es una forma &amp;uacute;til de trabajar con funciones que aceptan n&amp;uacute;meros variables de argumentos. CoffeeScript proporciona splats &lt;code&gt;...&lt;/code&gt; , tanto para la definici&amp;oacute;n de funciones como para la invocaci&amp;oacute;n, lo que hace que los n&amp;uacute;meros variables de argumentos sean un poco m&amp;aacute;s sabrosos. ES2015 adopt&amp;oacute; esta caracter&amp;iacute;stica como sus &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/rest_parameters&quot;&gt;par&amp;aacute;metros de descanso&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="cde9be47142db0d427c3f2b4c90516cab84ab990" translate="yes" xml:space="preserve">
          <source>The above example also demonstrates that if properties are missing in the destructured object or array, you can, just like in JavaScript, provide defaults. Note though that unlike with the existential operator, the default is only applied with the value is missing or &lt;code&gt;undefined&lt;/code&gt;&amp;mdash;&lt;a href=&quot;#breaking-changes-default-values&quot;&gt;passing &lt;code&gt;null&lt;/code&gt; will set a value of &lt;code&gt;null&lt;/code&gt;&lt;/a&gt;, not the default.</source>
          <target state="translated">El ejemplo anterior tambi&amp;eacute;n demuestra que si faltan propiedades en el objeto o matriz desestructurado, puede, al igual que en JavaScript, proporcionar valores predeterminados. Sin embargo, tenga en cuenta que, a diferencia del operador existencial, el valor predeterminado solo se aplica cuando el valor falta o &lt;code&gt;undefined&lt;/code&gt; est&amp;aacute; definido : &lt;a href=&quot;#breaking-changes-default-values&quot;&gt;pasar &lt;code&gt;null&lt;/code&gt; establecer&amp;aacute; un valor &lt;code&gt;null&lt;/code&gt; &lt;/a&gt; , no el valor predeterminado.</target>
        </trans-unit>
        <trans-unit id="e95f0f8970d570907faaeca191b0a67113a7c21d" translate="yes" xml:space="preserve">
          <source>The accessor variant of the existential operator &lt;code&gt;?.&lt;/code&gt; can be used to soak up null references in a chain of properties. Use it instead of the dot accessor &lt;code&gt;.&lt;/code&gt; in cases where the base value may be &lt;code&gt;null&lt;/code&gt; or &lt;code&gt;undefined&lt;/code&gt;. If all of the properties exist then you&amp;rsquo;ll get the expected result, if the chain is broken, &lt;code&gt;undefined&lt;/code&gt; is returned instead of the &lt;code&gt;TypeError&lt;/code&gt; that would be raised otherwise.</source>
          <target state="translated">&amp;iquest;La variante accesora del operador existencial &lt;code&gt;?.&lt;/code&gt; se puede usar para absorber referencias nulas en una cadena de propiedades. &amp;Uacute;selo en lugar del punto de acceso &lt;code&gt;.&lt;/code&gt; en casos donde el valor base puede ser &lt;code&gt;null&lt;/code&gt; o &lt;code&gt;undefined&lt;/code&gt; . Si todas las propiedades existen, obtendr&amp;aacute; el resultado esperado, si la cadena se rompe, se devuelve &lt;code&gt;undefined&lt;/code&gt; en lugar del &lt;code&gt;TypeError&lt;/code&gt; que de lo contrario se generar&amp;iacute;a.</target>
        </trans-unit>
        <trans-unit id="39b4b99d9e71ee2e70bef418e0e782a2d14d8671" translate="yes" xml:space="preserve">
          <source>The biggest change in CoffeeScript 2 is that now the CoffeeScript compiler produces modern JavaScript syntax (ES6, or ES2015 and later). A CoffeeScript &lt;code&gt;=&amp;gt;&lt;/code&gt; becomes a JS &lt;code&gt;=&amp;gt;&lt;/code&gt;, a CoffeeScript &lt;code&gt;class&lt;/code&gt; becomes a JS &lt;code&gt;class&lt;/code&gt; and so on. Major new features in CoffeeScript 2 include &lt;a href=&quot;#async-functions&quot;&gt;async functions&lt;/a&gt; and &lt;a href=&quot;#jsx&quot;&gt;JSX&lt;/a&gt;. You can read more in the &lt;a href=&quot;https://coffeescript.org/announcing-coffeescript-2/&quot;&gt;announcement&lt;/a&gt;.</source>
          <target state="translated">El mayor cambio en CoffeeScript 2 es que ahora el compilador CoffeeScript produce una sintaxis JavaScript moderna (ES6 o ES2015 y posterior). Un CoffeeScript &lt;code&gt;=&amp;gt;&lt;/code&gt; se convierte en JS &lt;code&gt;=&amp;gt;&lt;/code&gt; , una &lt;code&gt;class&lt;/code&gt; CoffeeScript se convierte en una &lt;code&gt;class&lt;/code&gt; JS y as&amp;iacute; sucesivamente. Las nuevas caracter&amp;iacute;sticas principales de CoffeeScript 2 incluyen &lt;a href=&quot;#async-functions&quot;&gt;funciones as&amp;iacute;ncronas&lt;/a&gt; y &lt;a href=&quot;#jsx&quot;&gt;JSX&lt;/a&gt; . Puedes leer m&amp;aacute;s en el &lt;a href=&quot;https://coffeescript.org/announcing-coffeescript-2/&quot;&gt;anuncio&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="c2497321a935f3118d62328f3ee12bcb5c1b7482" translate="yes" xml:space="preserve">
          <source>The command-line version of &lt;code&gt;coffee&lt;/code&gt; is available as a &lt;a href=&quot;https://nodejs.org/&quot;&gt;Node.js&lt;/a&gt; utility, requiring Node 6 or later. The &lt;a href=&quot;https://coffeescript.org/v2/browser-compiler-modern/coffeescript.js&quot;&gt;core compiler&lt;/a&gt; however, does not depend on Node, and can be run in any JavaScript environment, or in the browser (see &lt;a href=&quot;#try&quot;&gt;Try CoffeeScript&lt;/a&gt;).</source>
          <target state="translated">La versi&amp;oacute;n de la l&amp;iacute;nea de comandos de &lt;code&gt;coffee&lt;/code&gt; est&amp;aacute; disponible como una utilidad &lt;a href=&quot;https://nodejs.org/&quot;&gt;Node.js&lt;/a&gt; , que requiere el Nodo 6 o posterior. El &lt;a href=&quot;https://coffeescript.org/v2/browser-compiler-modern/coffeescript.js&quot;&gt;compilador de n&amp;uacute;cleo&lt;/a&gt; sin embargo, no depende de nodo, y se puede ejecutar en cualquier entorno de JavaScript, o en el navegador (ver &lt;a href=&quot;#try&quot;&gt;Trate CoffeeScript&lt;/a&gt; ).</target>
        </trans-unit>
        <trans-unit id="31dc4964bd6db99efc6d651e6a7fe7980e835c06" translate="yes" xml:space="preserve">
          <source>The deprecated version will still work, but it will print a warning before running the script.</source>
          <target state="translated">La versión obsoleta seguirá funcionando,pero imprimirá una advertencia antes de ejecutar el guión.</target>
        </trans-unit>
        <trans-unit id="917837c752afebbd8afb9fd1d5377edebb699af5" translate="yes" xml:space="preserve">
          <source>The fat arrow &lt;code&gt;=&amp;gt;&lt;/code&gt; can be used to both define a function, and to bind it to the current value of &lt;code&gt;this&lt;/code&gt;, right on the spot. This is helpful when using callback-based libraries like Prototype or jQuery, for creating iterator functions to pass to &lt;code&gt;each&lt;/code&gt;, or event-handler functions to use with &lt;code&gt;on&lt;/code&gt;. Functions created with the fat arrow are able to access properties of the &lt;code&gt;this&lt;/code&gt; where they&amp;rsquo;re defined.</source>
          <target state="translated">La flecha gruesa &lt;code&gt;=&amp;gt;&lt;/code&gt; se puede usar tanto para definir una funci&amp;oacute;n como para vincularla al valor actual de &lt;code&gt;this&lt;/code&gt; , justo en el lugar. Esto es &amp;uacute;til cuando se usan bibliotecas basadas en devoluci&amp;oacute;n de llamada como Prototype o jQuery, para crear funciones de iterador para pasar a &lt;code&gt;each&lt;/code&gt; , o funciones de controlador de eventos para usar con &lt;code&gt;on&lt;/code&gt; . Las funciones creadas con la flecha gruesa pueden acceder a las propiedades de &lt;code&gt;this&lt;/code&gt; donde est&amp;aacute;n definidas.</target>
        </trans-unit>
        <trans-unit id="29b0a191e077542f4d37bce4ac1081f2f9f11272" translate="yes" xml:space="preserve">
          <source>The fat arrow was one of the most popular features of CoffeeScript, and ES2015 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions&quot;&gt;adopted it&lt;/a&gt;; so CoffeeScript 2 compiles &lt;code&gt;=&amp;gt;&lt;/code&gt; to ES &lt;code&gt;=&amp;gt;&lt;/code&gt;.</source>
          <target state="translated">La flecha gruesa fue una de las caracter&amp;iacute;sticas m&amp;aacute;s populares de CoffeeScript, y ES2015 la &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions&quot;&gt;adopt&amp;oacute;&lt;/a&gt; ; entonces CoffeeScript 2 compila &lt;code&gt;=&amp;gt;&lt;/code&gt; a ES &lt;code&gt;=&amp;gt;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="881be262b3282151a82d808d99bc918261a00f29" translate="yes" xml:space="preserve">
          <source>The golden rule of CoffeeScript is: &lt;em&gt;&amp;ldquo;It&amp;rsquo;s just JavaScript.&amp;rdquo;&lt;/em&gt; The code compiles one-to-one into the equivalent JS, and there is no interpretation at runtime. You can use any existing JavaScript library seamlessly from CoffeeScript (and vice-versa). The compiled output is readable, pretty-printed, and tends to run as fast or faster than the equivalent handwritten JavaScript.</source>
          <target state="translated">La regla de oro de CoffeeScript es: &lt;em&gt;&quot;Es solo JavaScript&quot;. &lt;/em&gt;El c&amp;oacute;digo compila uno a uno en el JS equivalente, y no hay interpretaci&amp;oacute;n en tiempo de ejecuci&amp;oacute;n. Puede usar cualquier biblioteca JavaScript existente sin problemas desde CoffeeScript (y viceversa). La salida compilada es legible, est&amp;aacute; bien impresa y tiende a ejecutarse tan r&amp;aacute;pido o m&amp;aacute;s r&amp;aacute;pido que el JavaScript manuscrito equivalente.</target>
        </trans-unit>
        <trans-unit id="57f6f3bb66cdefe66d61e33b194bae86dc442bf7" translate="yes" xml:space="preserve">
          <source>The only low-level loop that CoffeeScript provides is the &lt;code&gt;while&lt;/code&gt; loop. The main difference from JavaScript is that the &lt;code&gt;while&lt;/code&gt; loop can be used as an expression, returning an array containing the result of each iteration through the loop.</source>
          <target state="translated">El &amp;uacute;nico bucle de bajo nivel que CoffeeScript proporciona es el &lt;code&gt;while&lt;/code&gt; de bucle. La principal diferencia de JavaScript es que el &lt;code&gt;while&lt;/code&gt; de bucle se puede utilizar como una expresi&amp;oacute;n, devuelve una matriz que contiene el resultado de cada iteraci&amp;oacute;n a trav&amp;eacute;s del bucle.</target>
        </trans-unit>
        <trans-unit id="dd6c377bf16ffa88eb3fd655b8bf77b2715b54a5" translate="yes" xml:space="preserve">
          <source>The same syntax can be used with assignment to replace a segment of an array with new values, splicing it.</source>
          <target state="translated">La misma sintaxis puede usarse con la asignación para reemplazar un segmento de un arreglo con nuevos valores,empalmándolo.</target>
        </trans-unit>
        <trans-unit id="d00bce92adf2e76e903d27d857e2684b1a2fb26a" translate="yes" xml:space="preserve">
          <source>The usual caveats about CoffeeScript apply &amp;mdash; your inline scripts will run within a closure wrapper, so if you want to expose global variables or functions, attach them to the &lt;code&gt;window&lt;/code&gt; object.</source>
          <target state="translated">Se aplican las advertencias habituales sobre CoffeeScript: sus scripts en l&amp;iacute;nea se ejecutar&amp;aacute;n dentro de un contenedor de cierre, por lo que si desea exponer variables o funciones globales, adj&amp;uacute;ntelas al objeto de la &lt;code&gt;window&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="0407053f9f37c54f4e22762737710b115655c046" translate="yes" xml:space="preserve">
          <source>There are a few ECMAScript features that CoffeeScript intentionally doesn&amp;rsquo;t support.</source>
          <target state="translated">Hay algunas caracter&amp;iacute;sticas de ECMAScript que CoffeeScript no admite intencionalmente.</target>
        </trans-unit>
        <trans-unit id="dd46d0c19fd2206d2a20dcf63dd1ac447d8ef9a0" translate="yes" xml:space="preserve">
          <source>There are a handful of statements in JavaScript that can&amp;rsquo;t be meaningfully converted into expressions, namely &lt;code&gt;break&lt;/code&gt;, &lt;code&gt;continue&lt;/code&gt;, and &lt;code&gt;return&lt;/code&gt;. If you make use of them within a block of code, CoffeeScript won&amp;rsquo;t try to perform the conversion.</source>
          <target state="translated">Hay un pu&amp;ntilde;ado de declaraciones en JavaScript que no se pueden convertir de manera significativa en expresiones, es decir , &lt;code&gt;break&lt;/code&gt; , &lt;code&gt;continue&lt;/code&gt; y &lt;code&gt;return&lt;/code&gt; . Si los utiliza dentro de un bloque de c&amp;oacute;digo, CoffeeScript no intentar&amp;aacute; realizar la conversi&amp;oacute;n.</target>
        </trans-unit>
        <trans-unit id="8ead996d7aeda765800718ece4a37b9a3d073db9" translate="yes" xml:space="preserve">
          <source>There are very few &lt;a href=&quot;#breaking-changes&quot;&gt;breaking changes from CoffeeScript 1.x to 2&lt;/a&gt;; we hope the upgrade process is smooth for most projects.</source>
          <target state="translated">Hay muy pocos &lt;a href=&quot;#breaking-changes&quot;&gt;cambios importantes de CoffeeScript 1.xa 2&lt;/a&gt; ; Esperamos que el proceso de actualizaci&amp;oacute;n sea sencillo para la mayor&amp;iacute;a de los proyectos.</target>
        </trans-unit>
        <trans-unit id="7625eae784aaf6c02294c43cdfe6aba3b3340de1" translate="yes" xml:space="preserve">
          <source>Things that would otherwise be statements in JavaScript, when used as part of an expression in CoffeeScript, are converted into expressions by wrapping them in a closure. This lets you do useful things, like assign the result of a comprehension to a variable:</source>
          <target state="translated">Las cosas que de otra manera serían declaraciones en JavaScript,cuando se usan como parte de una expresión en CoffeeScript,se convierten en expresiones envolviéndolas en un cierre.Esto permite hacer cosas útiles,como asignar el resultado de una comprensión a una variable:</target>
        </trans-unit>
        <trans-unit id="4b17290b6006c13901c34d75f37b8174f2cf35d0" translate="yes" xml:space="preserve">
          <source>This also means you cannot pass a reference to &lt;code&gt;this&lt;/code&gt; as an argument to &lt;code&gt;super&lt;/code&gt; in the constructor of a derived class:</source>
          <target state="translated">Esto tambi&amp;eacute;n significa que no puede pasar una referencia a &lt;code&gt;this&lt;/code&gt; como argumento para &lt;code&gt;super&lt;/code&gt; en el constructor de una clase derivada:</target>
        </trans-unit>
        <trans-unit id="212e8a3822b15e29b023624fc8e0a3036b265be8" translate="yes" xml:space="preserve">
          <source>This is a limitation of ES2015 classes. As a workaround, assign to &lt;code&gt;this&lt;/code&gt; after the &lt;code&gt;super&lt;/code&gt; call:</source>
          <target state="translated">Esta es una limitaci&amp;oacute;n de las clases de ES2015. Como soluci&amp;oacute;n alternativa, asigne &lt;code&gt;this&lt;/code&gt; despu&amp;eacute;s de la &lt;code&gt;super&lt;/code&gt; llamada:</target>
        </trans-unit>
        <trans-unit id="ebe0a630e1017ea59b90b6804799a28e26c85ded" translate="yes" xml:space="preserve">
          <source>This is to avoid grammatical ambiguity, since in CoffeeScript such a construct looks identical to a function call (e.g. &lt;code&gt;get(function foo() {})&lt;/code&gt;); and because there is an &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty&quot;&gt;alternate syntax&lt;/a&gt; that is slightly more verbose but just as effective:</source>
          <target state="translated">Esto es para evitar la ambig&amp;uuml;edad gramatical, ya que en CoffeeScript dicha construcci&amp;oacute;n se ve id&amp;eacute;ntica a una llamada a funci&amp;oacute;n (por ejemplo, &lt;code&gt;get(function foo() {})&lt;/code&gt; ); y porque hay una &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty&quot;&gt;sintaxis alternativa&lt;/a&gt; que es un poco m&amp;aacute;s detallada pero igual de efectiva:</target>
        </trans-unit>
        <trans-unit id="e35a04b81c2c241c9e49ed37e23da66a8ec2f106" translate="yes" xml:space="preserve">
          <source>This list may be incomplete, and excludes versions of Node that support newer features behind flags; please refer to &lt;a href=&quot;http://node.green/&quot;&gt;node.green&lt;/a&gt; for full details. You can &lt;a href=&quot;https://coffeescript.org/test.html&quot;&gt;run the tests in your browser&lt;/a&gt; to see what your browser supports. It is your responsibility to ensure that your runtime supports the modern features you use; or that you &lt;a href=&quot;#transpilation&quot;&gt;transpile&lt;/a&gt; your code. When in doubt, transpile.</source>
          <target state="translated">Esta lista puede estar incompleta y excluye versiones de Node que admitan nuevas funciones detr&amp;aacute;s de las banderas; consulte &lt;a href=&quot;http://node.green/&quot;&gt;node.green&lt;/a&gt; para obtener todos los detalles. Puede &lt;a href=&quot;https://coffeescript.org/test.html&quot;&gt;ejecutar las pruebas en su navegador&lt;/a&gt; para ver qu&amp;eacute; admite su navegador. Es su responsabilidad asegurarse de que su tiempo de ejecuci&amp;oacute;n sea compatible con las funciones modernas que utiliza; o que &lt;a href=&quot;#transpilation&quot;&gt;transpilas&lt;/a&gt; tu c&amp;oacute;digo. En caso de duda, transpile.</target>
        </trans-unit>
        <trans-unit id="df2efdc78bbbd411a239e3ac6067de5bfdc8c098" translate="yes" xml:space="preserve">
          <source>This will make the &lt;code&gt;coffee&lt;/code&gt; and &lt;code&gt;cake&lt;/code&gt; commands available globally.</source>
          <target state="translated">Esto har&amp;aacute; que los comandos de &lt;code&gt;coffee&lt;/code&gt; y &lt;code&gt;cake&lt;/code&gt; est&amp;eacute;n disponibles en todo el mundo.</target>
        </trans-unit>
        <trans-unit id="60e4dcb12e7b736abe3c6d872654f5052718c59b" translate="yes" xml:space="preserve">
          <source>To install, first make sure you have a working copy of the latest stable version of &lt;a href=&quot;https://nodejs.org/&quot;&gt;Node.js&lt;/a&gt;. You can then install CoffeeScript globally with &lt;a href=&quot;https://www.npmjs.com/&quot;&gt;npm&lt;/a&gt;:</source>
          <target state="translated">Para instalar, primero aseg&amp;uacute;rese de que tiene una copia de trabajo de la &amp;uacute;ltima versi&amp;oacute;n estable de &lt;a href=&quot;https://nodejs.org/&quot;&gt;Node.js&lt;/a&gt; . Luego puede instalar CoffeeScript globalmente con &lt;a href=&quot;https://www.npmjs.com/&quot;&gt;npm&lt;/a&gt; :</target>
        </trans-unit>
        <trans-unit id="4d491acd5ee23c8cde5200452bec031026aa7e84" translate="yes" xml:space="preserve">
          <source>To iterate a generator function, use &lt;code&gt;from&lt;/code&gt;. See &lt;a href=&quot;#generator-iteration&quot;&gt;Generator Functions&lt;/a&gt;.</source>
          <target state="translated">Para iterar una funci&amp;oacute;n generadora, use &lt;code&gt;from&lt;/code&gt; . Ver &lt;a href=&quot;#generator-iteration&quot;&gt;Funciones del generador&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="4879760675e96a4c59a258d8b135d6981fed61f9" translate="yes" xml:space="preserve">
          <source>To make things easy, CoffeeScript has built-in support for the popular &lt;a href=&quot;https://babeljs.io/&quot;&gt;Babel&lt;/a&gt; transpiler. You can use it via the &lt;code&gt;--transpile&lt;/code&gt; command-line option or the &lt;code&gt;transpile&lt;/code&gt; Node API option. To use either, &lt;code&gt;@babel/core&lt;/code&gt; must be installed in your project:</source>
          <target state="translated">Para facilitar las cosas, CoffeeScript tiene soporte incorporado para el popular transpilador de &lt;a href=&quot;https://babeljs.io/&quot;&gt;Babel&lt;/a&gt; . Puede usarlo a trav&amp;eacute;s de la opci&amp;oacute;n de l&amp;iacute;nea de comandos &lt;code&gt;--transpile&lt;/code&gt; o la opci&amp;oacute;n de API de nodo de &lt;code&gt;transpile&lt;/code&gt; . Para utilizar cualquiera, &lt;code&gt;@babel/core&lt;/code&gt; debe estar instalado en su proyecto:</target>
        </trans-unit>
        <trans-unit id="32b8a5b68368acbc341573ad1e61a0edd20250e7" translate="yes" xml:space="preserve">
          <source>To simplify math expressions, &lt;code&gt;**&lt;/code&gt; can be used for exponentiation and &lt;code&gt;//&lt;/code&gt; performs floor division. &lt;code&gt;%&lt;/code&gt; works just like in JavaScript, while &lt;code&gt;%%&lt;/code&gt; provides &lt;a href=&quot;https://en.wikipedia.org/wiki/Modulo_operation&quot;&gt;&amp;ldquo;dividend dependent modulo&amp;rdquo;&lt;/a&gt;:</source>
          <target state="translated">Para simplificar las expresiones matem&amp;aacute;ticas, &lt;code&gt;**&lt;/code&gt; puede usarse para exponenciaci&amp;oacute;n y &lt;code&gt;//&lt;/code&gt; realiza la divisi&amp;oacute;n de piso. &lt;code&gt;%&lt;/code&gt; funciona igual que en JavaScript, mientras que &lt;code&gt;%%&lt;/code&gt; proporciona un &lt;a href=&quot;https://en.wikipedia.org/wiki/Modulo_operation&quot;&gt;&quot;m&amp;oacute;dulo dependiente de dividendos&quot;&lt;/a&gt; :</target>
        </trans-unit>
        <trans-unit id="760008ba15d1db1590d7becaabcd77417431770e" translate="yes" xml:space="preserve">
          <source>To step through a range comprehension in fixed-size chunks, use &lt;code&gt;by&lt;/code&gt;, for example: &lt;code&gt;evens = (x for x in [0..10] by 2)&lt;/code&gt;</source>
          <target state="translated">Para avanzar por una comprensi&amp;oacute;n de rango en fragmentos de tama&amp;ntilde;o fijo, use &lt;code&gt;by&lt;/code&gt; , por ejemplo: &lt;code&gt;evens = (x for x in [0..10] by 2)&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="5ae484c4ea234c74c821257172381d6f5a5706c0" translate="yes" xml:space="preserve">
          <source>To use &lt;code&gt;--transpile&lt;/code&gt;, see &lt;a href=&quot;#transpilation&quot;&gt;Transpilation&lt;/a&gt;.</source>
          <target state="translated">Para usar &lt;code&gt;--transpile&lt;/code&gt; , vea &lt;a href=&quot;#transpilation&quot;&gt;Transpilation&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="134608c329dd197fae36575214763a11330c0d6a" translate="yes" xml:space="preserve">
          <source>Transpilation</source>
          <target state="translated">Transpilation</target>
        </trans-unit>
        <trans-unit id="441544b175e1ff168280f364e13483ad37fdc025" translate="yes" xml:space="preserve">
          <source>Transpiling with the CoffeeScript compiler</source>
          <target state="translated">Transportándolo con el compilador CoffeeScript</target>
        </trans-unit>
        <trans-unit id="2996879f5c4aef02081b95d839c49eeb3e309880" translate="yes" xml:space="preserve">
          <source>Try/Catch/Finally</source>
          <target state="translated">Try/Catch/Finally</target>
        </trans-unit>
        <trans-unit id="22d158ab75d63715d420bc5e58daab5d8357398c" translate="yes" xml:space="preserve">
          <source>Type Annotations</source>
          <target state="translated">Anotaciones de tipo</target>
        </trans-unit>
        <trans-unit id="01692a80e99068bf423c4ff03463fa9389fe6247" translate="yes" xml:space="preserve">
          <source>Unsupported ECMAScript Features</source>
          <target state="translated">Características de ECMAScript no soportadas</target>
        </trans-unit>
        <trans-unit id="0bb18642b70b9f8a9c12ccf39487328f306b8e19" translate="yes" xml:space="preserve">
          <source>Usage</source>
          <target state="translated">Usage</target>
        </trans-unit>
        <trans-unit id="ec90f891d39b4bc9b7913655e4904c205deb12d7" translate="yes" xml:space="preserve">
          <source>Watch a file for changes, and recompile it every time the file is saved:</source>
          <target state="translated">Observa los cambios en un archivo y recompílalo cada vez que lo guardes:</target>
        </trans-unit>
        <trans-unit id="a208b4d5c38d76b0c844e7782318c919be835059" translate="yes" xml:space="preserve">
          <source>Watch files for changes, rerunning the specified command when any file is updated.</source>
          <target state="translated">Vigila los archivos en busca de cambios,volviendo a ejecutar el comando especificado cuando se actualiza cualquier archivo.</target>
        </trans-unit>
        <trans-unit id="6f5de3a310cd5e9cdc833ca57fe2aff4bc3ad811" translate="yes" xml:space="preserve">
          <source>What&amp;rsquo;s New In CoffeeScript 2?</source>
          <target state="translated">&amp;iquest;Qu&amp;eacute; hay de nuevo en CoffeeScript 2?</target>
        </trans-unit>
        <trans-unit id="f83e4a5d898f47de1ab2a712714b5389d4018960" translate="yes" xml:space="preserve">
          <source>When CoffeeScript was designed, &lt;code&gt;var&lt;/code&gt; was &lt;a href=&quot;https://github.com/jashkenas/coffeescript/issues/238#issuecomment-153502&quot;&gt;intentionally omitted&lt;/a&gt;. This was to spare developers the mental housekeeping of needing to worry about variable &lt;em&gt;declaration&lt;/em&gt; (&lt;code&gt;var foo&lt;/code&gt;) as opposed to variable &lt;em&gt;assignment&lt;/em&gt; (&lt;code&gt;foo = 1&lt;/code&gt;). The CoffeeScript compiler automatically takes care of declaration for you, by generating &lt;code&gt;var&lt;/code&gt; statements at the top of every function scope. This makes it impossible to accidentally declare a global variable.</source>
          <target state="translated">Cuando se dise&amp;ntilde;&amp;oacute; CoffeeScript, &lt;code&gt;var&lt;/code&gt; se &lt;a href=&quot;https://github.com/jashkenas/coffeescript/issues/238#issuecomment-153502&quot;&gt;omiti&amp;oacute; intencionalmente&lt;/a&gt; . Esto era para evitar a los desarrolladores el mantenimiento mental de la necesidad de preocuparse por la &lt;em&gt;declaraci&amp;oacute;n de&lt;/em&gt; variables ( &lt;code&gt;var foo&lt;/code&gt; ) en lugar de la &lt;em&gt;asignaci&amp;oacute;n de&lt;/em&gt; variables ( &lt;code&gt;foo = 1&lt;/code&gt; ). El compilador de CoffeeScript se encarga autom&amp;aacute;ticamente de la declaraci&amp;oacute;n, generando declaraciones &lt;code&gt;var&lt;/code&gt; en la parte superior de cada &amp;aacute;mbito de funci&amp;oacute;n. Esto hace que sea imposible declarar accidentalmente una variable global.</target>
        </trans-unit>
        <trans-unit id="5d84cf7d7535701ca31c3e2199811dcec3bed09b" translate="yes" xml:space="preserve">
          <source>When using a JavaScript loop to generate functions, it&amp;rsquo;s common to insert a closure wrapper in order to ensure that loop variables are closed over, and all the generated functions don&amp;rsquo;t just share the final values. CoffeeScript provides the &lt;code&gt;do&lt;/code&gt; keyword, which immediately invokes a passed function, forwarding any arguments.</source>
          <target state="translated">Cuando se usa un bucle de JavaScript para generar funciones, es com&amp;uacute;n insertar un contenedor de cierre para garantizar que las variables del bucle se cierren y que todas las funciones generadas no solo compartan los valores finales. CoffeeScript proporciona la palabra clave &lt;code&gt;do&lt;/code&gt; , que invoca inmediatamente una funci&amp;oacute;n pasada, reenviando cualquier argumento.</target>
        </trans-unit>
        <trans-unit id="ce527aeb1c14343036af5875ab0bc15b7dedfc43" translate="yes" xml:space="preserve">
          <source>While it&amp;rsquo;s not recommended for serious use, CoffeeScripts may be included directly within the browser using &lt;code&gt;&amp;lt;script type=&quot;text/coffeescript&quot;&amp;gt;&lt;/code&gt; tags. The source includes a compressed and minified version of the compiler (&lt;a href=&quot;https://coffeescript.org/v2/browser-compiler-legacy/coffeescript.js&quot;&gt;Download current version here, 77k when gzipped&lt;/a&gt;) as &lt;code&gt;docs/v2/browser-compiler-legacy/coffeescript.js&lt;/code&gt;. Include this file on a page with inline CoffeeScript tags, and it will compile and evaluate them in order.</source>
          <target state="translated">Si bien no se recomienda para un uso serio, CoffeeScripts puede incluirse directamente dentro del navegador utilizando etiquetas &lt;code&gt;&amp;lt;script type=&quot;text/coffeescript&quot;&amp;gt;&lt;/code&gt; . La fuente incluye una versi&amp;oacute;n comprimida y minimizada del compilador ( &lt;a href=&quot;https://coffeescript.org/v2/browser-compiler-legacy/coffeescript.js&quot;&gt;descargue la versi&amp;oacute;n actual aqu&amp;iacute;, 77k cuando est&amp;aacute; comprimido&lt;/a&gt; ) como &lt;code&gt;docs/v2/browser-compiler-legacy/coffeescript.js&lt;/code&gt; . Incluya este archivo en una p&amp;aacute;gina con etiquetas CoffeeScript en l&amp;iacute;nea, y las compilar&amp;aacute; y evaluar&amp;aacute; en orden.</target>
        </trans-unit>
        <trans-unit id="7d27f693c7d9cd75cdbdffcd127b5355d5fa8843" translate="yes" xml:space="preserve">
          <source>With the addition of &lt;a href=&quot;#jsx&quot;&gt;JSX&lt;/a&gt;, the &lt;code&gt;&amp;lt;&lt;/code&gt; and &lt;code&gt;&amp;gt;&lt;/code&gt; characters serve as both the &amp;ldquo;less than&amp;rdquo; and &amp;ldquo;greater than&amp;rdquo; operators and as the delimiters for XML tags, like &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt;. For best results, in general you should always wrap the operators in spaces to distinguish them from XML tags: &lt;code&gt;i &amp;lt; len&lt;/code&gt;, not &lt;code&gt;i&amp;lt;len&lt;/code&gt;. The compiler tries to be forgiving when it can be sure what you intend, but always putting spaces around the &amp;ldquo;less than&amp;rdquo; and &amp;ldquo;greater than&amp;rdquo; operators will remove ambiguity.</source>
          <target state="translated">Con la adici&amp;oacute;n de &lt;a href=&quot;#jsx&quot;&gt;JSX&lt;/a&gt; , los caracteres &lt;code&gt;&amp;lt;&lt;/code&gt; y &lt;code&gt;&amp;gt;&lt;/code&gt; sirven como operadores &quot;menores que&quot; y &quot;mayores que&quot; y como delimitadores para etiquetas XML, como &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; . Para obtener mejores resultados, en general siempre debe envolver los operadores en espacios para distinguirlos de las etiquetas XML: &lt;code&gt;i &amp;lt; len&lt;/code&gt; , no &lt;code&gt;i&amp;lt;len&lt;/code&gt; . El compilador intenta ser indulgente cuando puede estar seguro de lo que pretende, pero siempre colocando espacios alrededor de los operadores &quot;menor que&quot; y &quot;mayor que&quot; eliminar&amp;aacute; la ambig&amp;uuml;edad.</target>
        </trans-unit>
        <trans-unit id="91b3860286d34d188fac6fd2475f0b7c570b45ae" translate="yes" xml:space="preserve">
          <source>Write out all compiled JavaScript files into the specified directory. Use in conjunction with &lt;code&gt;--compile&lt;/code&gt; or &lt;code&gt;--watch&lt;/code&gt;.</source>
          <target state="translated">Escriba todos los archivos JavaScript compilados en el directorio especificado. &amp;Uacute;selo junto con &lt;code&gt;--compile&lt;/code&gt; o &lt;code&gt;--watch&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="7fa8e041a9d1bd281a4b489df18b79561d4193cb" translate="yes" xml:space="preserve">
          <source>You can also embed blocks of JavaScript using triple backticks. That&amp;rsquo;s easier than escaping backticks, if you need them inside your JavaScript block.</source>
          <target state="translated">Tambi&amp;eacute;n puede incrustar bloques de JavaScript utilizando triple backticks. Eso es m&amp;aacute;s f&amp;aacute;cil que escapar de los backticks, si los necesita dentro de su bloque de JavaScript.</target>
        </trans-unit>
        <trans-unit id="895151cddefabe084525e0448e8f3c00c754930a" translate="yes" xml:space="preserve">
          <source>You can also transpile CoffeeScript&amp;rsquo;s output without using the &lt;code&gt;transpile&lt;/code&gt; option, for example as part of a build chain. This lets you use transpilers other than Babel, and it gives you greater control over the process. There are many great task runners for setting up JavaScript build chains, such as &lt;a href=&quot;http://gulpjs.com/&quot;&gt;Gulp&lt;/a&gt;, &lt;a href=&quot;https://webpack.github.io/&quot;&gt;Webpack&lt;/a&gt;, &lt;a href=&quot;https://gruntjs.com/&quot;&gt;Grunt&lt;/a&gt; and &lt;a href=&quot;http://broccolijs.com/&quot;&gt;Broccoli&lt;/a&gt;.</source>
          <target state="translated">Tambi&amp;eacute;n puede transpilar la salida de CoffeeScript sin usar la opci&amp;oacute;n de &lt;code&gt;transpile&lt;/code&gt; , por ejemplo, como parte de una cadena de compilaci&amp;oacute;n. Esto le permite usar transpiladores que no sean Babel, y le brinda un mayor control sobre el proceso. Hay muchos corredores de tareas excelentes para configurar cadenas de compilaci&amp;oacute;n de JavaScript, como &lt;a href=&quot;http://gulpjs.com/&quot;&gt;Gulp&lt;/a&gt; , &lt;a href=&quot;https://webpack.github.io/&quot;&gt;Webpack&lt;/a&gt; , &lt;a href=&quot;https://gruntjs.com/&quot;&gt;Grunt&lt;/a&gt; y &lt;a href=&quot;http://broccolijs.com/&quot;&gt;Broccoli&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="ea09dd580c1117ec826c105827011d4991d422fb" translate="yes" xml:space="preserve">
          <source>You can iterate over a generator function using &lt;code&gt;for&amp;hellip;from&lt;/code&gt;.</source>
          <target state="translated">Puede iterar sobre una funci&amp;oacute;n generadora usando &lt;code&gt;for&amp;hellip;from&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="627a15b97853de570b928cbe1078ef7b23d9800d" translate="yes" xml:space="preserve">
          <source>You can use &lt;code&gt;in&lt;/code&gt; to test for array presence, and &lt;code&gt;of&lt;/code&gt; to test for JavaScript object-key presence.</source>
          <target state="translated">Se puede utilizar &lt;code&gt;in&lt;/code&gt; a prueba para detectar la presencia de matriz, y &lt;code&gt;of&lt;/code&gt; a prueba de JavaScript presencia clave de objeto.</target>
        </trans-unit>
        <trans-unit id="f5d72942f9c85a2499d5ad0b4ecca991c6daa18a" translate="yes" xml:space="preserve">
          <source>You can use &lt;code&gt;not&lt;/code&gt; as an alias for &lt;code&gt;!&lt;/code&gt;.</source>
          <target state="translated">Puede usar &lt;code&gt;not&lt;/code&gt; como un alias para &lt;code&gt;!&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="5cc987de3ea0a3222086b75436a669c943d85b76" translate="yes" xml:space="preserve">
          <source>You don&amp;rsquo;t need to use parentheses to invoke a function if you&amp;rsquo;re passing arguments. The implicit call wraps forward to the end of the line or block expression.</source>
          <target state="translated">No necesita usar par&amp;eacute;ntesis para invocar una funci&amp;oacute;n si est&amp;aacute; pasando argumentos. La llamada impl&amp;iacute;cita se ajusta al final de la l&amp;iacute;nea o expresi&amp;oacute;n de bloque.</target>
        </trans-unit>
        <trans-unit id="b83957bfb0e2f86c484bdb23a3ecc8d6b4ba1ba9" translate="yes" xml:space="preserve">
          <source>You might have noticed how even though we don&amp;rsquo;t add return statements to CoffeeScript functions, they nonetheless return their final value. The CoffeeScript compiler tries to make sure that all statements in the language can be used as expressions. Watch how the &lt;code&gt;return&lt;/code&gt; gets pushed down into each possible branch of execution in the function below.</source>
          <target state="translated">Es posible que haya notado c&amp;oacute;mo, aunque no agreguemos declaraciones de retorno a las funciones de CoffeeScript, sin embargo, devuelven su valor final. El compilador CoffeeScript intenta asegurarse de que todas las declaraciones en el lenguaje se puedan usar como expresiones. Observe c&amp;oacute;mo el &lt;code&gt;return&lt;/code&gt; se introduce en cada posible rama de ejecuci&amp;oacute;n en la funci&amp;oacute;n a continuaci&amp;oacute;n.</target>
        </trans-unit>
        <trans-unit id="cffa50a32cb13a240d705317bcec65dd1f31b6ad" translate="yes" xml:space="preserve">
          <source>and</source>
          <target state="translated">and</target>
        </trans-unit>
        <trans-unit id="94695e0be1a132fc3c8773528fdeaed22b0e2166" translate="yes" xml:space="preserve">
          <source>assigns the value of &lt;code&gt;b&lt;/code&gt; to &lt;code&gt;a&lt;/code&gt; if &lt;code&gt;a&lt;/code&gt; is not in scope or if &lt;code&gt;a == null&lt;/code&gt;; produces the new value of &lt;code&gt;a&lt;/code&gt;</source>
          <target state="translated">asigna el valor de &lt;code&gt;b&lt;/code&gt; a &lt;code&gt;a&lt;/code&gt; si &lt;code&gt;a&lt;/code&gt; no est&amp;aacute; dentro del alcance o si &lt;code&gt;a == null&lt;/code&gt; ; produce el nuevo valor de &lt;code&gt;a&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="30118aa1aa8a06fa5365743b3a5db69fc62b9760" translate="yes" xml:space="preserve">
          <source>await</source>
          <target state="translated">await</target>
        </trans-unit>
        <trans-unit id="7a6e8d704c7decefa5e5d4fa00c771cd1a13ce51" translate="yes" xml:space="preserve">
          <source>coffee command</source>
          <target state="translated">comando de café</target>
        </trans-unit>
        <trans-unit id="bcf9c16f425ba1f8ea1288d2892a8012be3730df" translate="yes" xml:space="preserve">
          <source>for...from</source>
          <target state="translated">for...from</target>
        </trans-unit>
        <trans-unit id="af10ef20dd9060bbeead0afbc55381a66af442ef" translate="yes" xml:space="preserve">
          <source>in</source>
          <target state="translated">in</target>
        </trans-unit>
        <trans-unit id="b47f363e2b430c0647f14deea3eced9b0ef300ce" translate="yes" xml:space="preserve">
          <source>is</source>
          <target state="translated">is</target>
        </trans-unit>
        <trans-unit id="d5a3e9a0d2ce4a1cae8033c54a253510da7f756a" translate="yes" xml:space="preserve">
          <source>isnt</source>
          <target state="translated">isnt</target>
        </trans-unit>
        <trans-unit id="557f255516719ea16f8f4a0aae1166054e2c9b43" translate="yes" xml:space="preserve">
          <source>not</source>
          <target state="translated">not</target>
        </trans-unit>
        <trans-unit id="de04fa0e29f9b35e24905d2e512bedc9bb6e09e4" translate="yes" xml:space="preserve">
          <source>of</source>
          <target state="translated">of</target>
        </trans-unit>
        <trans-unit id="1758356db21759f7c5a0da9b4dd1db8fd6feab3f" translate="yes" xml:space="preserve">
          <source>or</source>
          <target state="translated">or</target>
        </trans-unit>
        <trans-unit id="1f1590943b001194a7e6d7ed8992d476ad4e8a6a" translate="yes" xml:space="preserve">
          <source>returns &lt;code&gt;a.b&lt;/code&gt; if &lt;code&gt;a&lt;/code&gt; is in scope and &lt;code&gt;a != null&lt;/code&gt;; otherwise, &lt;code&gt;undefined&lt;/code&gt;</source>
          <target state="translated">devuelve &lt;code&gt;a.b&lt;/code&gt; si &lt;code&gt;a&lt;/code&gt; est&amp;aacute; dentro del alcance y &lt;code&gt;a != null&lt;/code&gt; ; de lo contrario, &lt;code&gt;undefined&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="bf26d3117231e5075d4fd6c1bf28375ff8a7a8d2" translate="yes" xml:space="preserve">
          <source>returns &lt;code&gt;a&lt;/code&gt; if &lt;code&gt;a&lt;/code&gt; is in scope and &lt;code&gt;a != null&lt;/code&gt;; otherwise, &lt;code&gt;b&lt;/code&gt;</source>
          <target state="translated">devuelve &lt;code&gt;a&lt;/code&gt; si &lt;code&gt;a&lt;/code&gt; est&amp;aacute; dentro del alcance y &lt;code&gt;a != null&lt;/code&gt; ; de lo contrario, &lt;code&gt;b&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="effdab22f101bb837e277a0db2e80288c615f7e6" translate="yes" xml:space="preserve">
          <source>returns the result of calling &lt;code&gt;a&lt;/code&gt; (with arguments &lt;code&gt;b&lt;/code&gt; and &lt;code&gt;c&lt;/code&gt;) if &lt;code&gt;a&lt;/code&gt; is in scope and callable; otherwise, &lt;code&gt;undefined&lt;/code&gt;</source>
          <target state="translated">devuelve el resultado de la llamada &lt;code&gt;a&lt;/code&gt; (con argumentos &lt;code&gt;b&lt;/code&gt; y &lt;code&gt;c&lt;/code&gt; ) si &lt;code&gt;a&lt;/code&gt; es en alcance y exigible; de lo contrario, &lt;code&gt;undefined&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="8451ba8a14d79753d34cb33b51ba46b4b025eb81" translate="yes" xml:space="preserve">
          <source>super</source>
          <target state="translated">super</target>
        </trans-unit>
        <trans-unit id="e7c2a4c990184f8b6e86a548b889c307e41a3860" translate="yes" xml:space="preserve">
          <source>switch...when...else</source>
          <target state="translated">switch...when...else</target>
        </trans-unit>
        <trans-unit id="46aa5a11884223ec3dcfa5773b33d0a26fc9d06c" translate="yes" xml:space="preserve">
          <source>tests that &lt;code&gt;a&lt;/code&gt; is in scope and &lt;code&gt;a != null&lt;/code&gt;</source>
          <target state="translated">prueba que &lt;code&gt;a&lt;/code&gt; est&amp;aacute; dentro del alcance y &lt;code&gt;a != null&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="f52d36be262c616a8c25a3ba007e4c58c101d1eb" translate="yes" xml:space="preserve">
          <source>try...catch...finally</source>
          <target state="translated">try...catch...finally</target>
        </trans-unit>
        <trans-unit id="42e184930956d048c819e40f18f94f0094d47bc6" translate="yes" xml:space="preserve">
          <source>unless</source>
          <target state="translated">unless</target>
        </trans-unit>
        <trans-unit id="6517f89c46c3f0d6db9cb009b8c7d1f98c371fa0" translate="yes" xml:space="preserve">
          <source>while</source>
          <target state="translated">while</target>
        </trans-unit>
        <trans-unit id="f12e1e8f455f823f59cc0134f1795184b98fe5ac" translate="yes" xml:space="preserve">
          <source>yield</source>
          <target state="translated">yield</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
