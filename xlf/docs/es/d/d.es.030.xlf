<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="es" datatype="htmlbody" original="d">
    <body>
      <group id="d">
        <trans-unit id="254f04dbdcdd078872c5dee9d13531e4ebf7fca9" translate="yes" xml:space="preserve">
          <source>alias &lt;strong id=&quot;hnsecs&quot;&gt;hnsecs&lt;/strong&gt; = dur!&quot;&lt;strong id=&quot;hnsecs&quot;&gt;hnsecs&lt;/strong&gt;&quot;.dur;</source>
          <target state="translated">alias &lt;strong id=&quot;hnsecs&quot;&gt;hnsecs&lt;/strong&gt; = dur! &quot; &lt;strong id=&quot;hnsecs&quot;&gt;hnsecs&lt;/strong&gt; &quot; .dur;</target>
        </trans-unit>
        <trans-unit id="009cc77f25a38fb8854d1926b21d038c0ca26c44" translate="yes" xml:space="preserve">
          <source>alias &lt;strong id=&quot;hours&quot;&gt;hours&lt;/strong&gt; = dur!&quot;&lt;strong id=&quot;hours&quot;&gt;hours&lt;/strong&gt;&quot;.dur;</source>
          <target state="translated">alias &lt;strong id=&quot;hours&quot;&gt;horas&lt;/strong&gt; = dur! &quot; &lt;strong id=&quot;hours&quot;&gt;horas&lt;/strong&gt; &quot; .dur;</target>
        </trans-unit>
        <trans-unit id="7c20c0fcdf02912adfdbd501d2a96e77806e6fac" translate="yes" xml:space="preserve">
          <source>alias &lt;strong id=&quot;hypot&quot;&gt;hypot&lt;/strong&gt; = &lt;strong id=&quot;hypot&quot;&gt;hypot&lt;/strong&gt;;</source>
          <target state="translated">alias &lt;strong id=&quot;hypot&quot;&gt;hypot&lt;/strong&gt; = &lt;strong id=&quot;hypot&quot;&gt;hypot&lt;/strong&gt; ;</target>
        </trans-unit>
        <trans-unit id="4b8dd7a2d6a819b8d1dcee378c53c5f6f88e90af" translate="yes" xml:space="preserve">
          <source>alias &lt;strong id=&quot;hypot&quot;&gt;hypot&lt;/strong&gt; = core.stdc.math.hypotl;</source>
          <target state="translated">alias &lt;strong id=&quot;hypot&quot;&gt;hypot&lt;/strong&gt; = core.stdc.math.hypotl;</target>
        </trans-unit>
        <trans-unit id="e11794c2a6fef14be5a474387eaec51fc611eb8b" translate="yes" xml:space="preserve">
          <source>alias &lt;strong id=&quot;ilogb&quot;&gt;ilogb&lt;/strong&gt; = &lt;strong id=&quot;ilogb&quot;&gt;ilogb&lt;/strong&gt;;</source>
          <target state="translated">alias &lt;strong id=&quot;ilogb&quot;&gt;ilogb&lt;/strong&gt; = &lt;strong id=&quot;ilogb&quot;&gt;ilogb&lt;/strong&gt; ;</target>
        </trans-unit>
        <trans-unit id="7b75669f6326ec453ddbfffa2574a0ff8d6f76f1" translate="yes" xml:space="preserve">
          <source>alias &lt;strong id=&quot;ilogb&quot;&gt;ilogb&lt;/strong&gt; = core.stdc.math.ilogbl;</source>
          <target state="translated">alias &lt;strong id=&quot;ilogb&quot;&gt;ilogb&lt;/strong&gt; = core.stdc.math.ilogbl;</target>
        </trans-unit>
        <trans-unit id="88abf7565636c3fff93c5c5491b3bf12fbd1cc17" translate="yes" xml:space="preserve">
          <source>alias &lt;strong id=&quot;imaginary&quot;&gt;imaginary&lt;/strong&gt; = ireal;</source>
          <target state="translated">alias &lt;strong id=&quot;imaginary&quot;&gt;imaginario&lt;/strong&gt; = ireal;</target>
        </trans-unit>
        <trans-unit id="1db986705439e3be32417cc44e181f7931ba18e7" translate="yes" xml:space="preserve">
          <source>alias &lt;strong id=&quot;info&quot;&gt;info&lt;/strong&gt; = .Logger.memLogFunctions!cast(LogLevel)cast(ubyte)64u.logImpl(int line = __LINE__, string file = __FILE__, string funcName = __FUNCTION__, string prettyFuncName = __PRETTY_FUNCTION__, string moduleName = __MODULE__, A...)(lazy A args) if (args.length == 0 || args.length &amp;gt; 0 &amp;amp;&amp;amp; !is(A[0] : bool));</source>
          <target state="translated">alias &lt;strong id=&quot;info&quot;&gt;info&lt;/strong&gt; = .Logger.memLogFunctions! cast (LogLevel) cast (ubyte) 64u.logImpl (int line = __LINE__, string file = __FILE__, string funcName = __FUNCTION__, string prettyFuncName = __PRETTY_FUNCTION__, string moduleName = __MODULE (args perezosos A) if (args.length == 0 || args.length&amp;gt; 0 &amp;amp;&amp;amp;! is (A [0]: bool));</target>
        </trans-unit>
        <trans-unit id="1c0f4e431fb00a2c95a800c4151384e7b0bfd537" translate="yes" xml:space="preserve">
          <source>alias &lt;strong id=&quot;info&quot;&gt;info&lt;/strong&gt; = defaultLogFunction!cast(LogLevel)cast(ubyte)64u.defaultLogFunction(int line = __LINE__, string file = __FILE__, string funcName = __FUNCTION__, string prettyFuncName = __PRETTY_FUNCTION__, string moduleName = __MODULE__, A...)(lazy A args) if (args.length &amp;gt; 0 &amp;amp;&amp;amp; !is(Unqual!(A[0]) : bool) || args.length == 0);</source>
          <target state="translated">alias &lt;strong id=&quot;info&quot;&gt;info&lt;/strong&gt; = defaultLogFunction! cast (LogLevel) cast (ubyte) 64u.defaultLogFunction (int line = __LINE__, string file = __FILE__, string funcName = __FUNCTION__, string prettyFuncName = __PRETTY_FUNCTION__, string moduleName = __MODULE__, A ...) args) if (args.length&amp;gt; 0 &amp;amp;&amp;amp;! is (Unqual! (A [0]): bool) || args.length == 0);</target>
        </trans-unit>
        <trans-unit id="194c4de22f2da8ff8029b84998814e0209e18e58" translate="yes" xml:space="preserve">
          <source>alias &lt;strong id=&quot;infof&quot;&gt;infof&lt;/strong&gt; = .Logger.memLogFunctions!cast(LogLevel)cast(ubyte)64u.logImplf(int line = __LINE__, string file = __FILE__, string funcName = __FUNCTION__, string prettyFuncName = __PRETTY_FUNCTION__, string moduleName = __MODULE__, A...)(lazy bool condition, lazy string msg, lazy A args);</source>
          <target state="translated">alias &lt;strong id=&quot;infof&quot;&gt;infof&lt;/strong&gt; = .Logger.memLogFunctions! cast (LogLevel) cast (ubyte) 64u.logImplf (int line = __LINE__, string file = __FILE__, string funcName = __FUNCTION__, string prettyFuncName = __PRETTY_FUNCTION__, string moduleName = __MODULELELE = __MODULELELE = __MOD (condici&amp;oacute;n de bool diferido, msj de cadena diferida, argumentos A diferidos);</target>
        </trans-unit>
        <trans-unit id="da3a4ae28771efac9ce7731a5a77e054b194dc71" translate="yes" xml:space="preserve">
          <source>alias &lt;strong id=&quot;infof&quot;&gt;infof&lt;/strong&gt; = defaultLogFunctionf!cast(LogLevel)cast(ubyte)64u.defaultLogFunctionf(int line = __LINE__, string file = __FILE__, string funcName = __FUNCTION__, string prettyFuncName = __PRETTY_FUNCTION__, string moduleName = __MODULE__, A...)(lazy string msg, lazy A args);</source>
          <target state="translated">alias &lt;strong id=&quot;infof&quot;&gt;infof&lt;/strong&gt; = defaultLogFunctionf! cast (LogLevel) cast (ubyte) 64u.defaultLogFunctionf (int line = __LINE__, string file = __FILE__, string funcName = __FUNCTION__, string prettyFuncName = __PRETTY_FUNCTION__, string moduleName = __MODULE__, A__ msg, args perezosos A);</target>
        </trans-unit>
        <trans-unit id="b8aeabb76fc8df350ee662d907d051acd47055ca" translate="yes" xml:space="preserve">
          <source>alias &lt;strong id=&quot;insert&quot;&gt;insert&lt;/strong&gt; = insertBack;</source>
          <target state="translated">alias &lt;strong id=&quot;insert&quot;&gt;insert&lt;/strong&gt; = insertBack;</target>
        </trans-unit>
        <trans-unit id="b4d436274378ca3c9e4313d40392b5c5b187bd9f" translate="yes" xml:space="preserve">
          <source>alias &lt;strong id=&quot;insert&quot;&gt;insert&lt;/strong&gt; = insertFront;</source>
          <target state="translated">alias &lt;strong id=&quot;insert&quot;&gt;insert&lt;/strong&gt; = insertFront;</target>
        </trans-unit>
        <trans-unit id="472e113d06fe974aaafada3f717ebae6c78df469" translate="yes" xml:space="preserve">
          <source>alias &lt;strong id=&quot;insert&quot;&gt;insert&lt;/strong&gt; = stableInsert;</source>
          <target state="translated">alias &lt;strong id=&quot;insert&quot;&gt;insert&lt;/strong&gt; = stableInsert;</target>
        </trans-unit>
        <trans-unit id="63c644f0388342b356f6df09446322ee85fd65ce" translate="yes" xml:space="preserve">
          <source>alias &lt;strong id=&quot;int16_t&quot;&gt;int16_t&lt;/strong&gt; = short;</source>
          <target state="translated">alias &lt;strong id=&quot;int16_t&quot;&gt;int16_t&lt;/strong&gt; = corto;</target>
        </trans-unit>
        <trans-unit id="938053c3db1a2f952f9837a408a37e6aca729f5b" translate="yes" xml:space="preserve">
          <source>alias &lt;strong id=&quot;int32_t&quot;&gt;int32_t&lt;/strong&gt; = int;</source>
          <target state="translated">alias &lt;strong id=&quot;int32_t&quot;&gt;int32_t&lt;/strong&gt; = int;</target>
        </trans-unit>
        <trans-unit id="aee7457cf0fa039b4d36fc709a814a9dfc9dcd31" translate="yes" xml:space="preserve">
          <source>alias &lt;strong id=&quot;int4&quot;&gt;int4&lt;/strong&gt; = __vector(int[4]);</source>
          <target state="translated">alias &lt;strong id=&quot;int4&quot;&gt;int4&lt;/strong&gt; = __vector (int [4]);</target>
        </trans-unit>
        <trans-unit id="d09ac7a514014921e753325664c4b7692553d08c" translate="yes" xml:space="preserve">
          <source>alias &lt;strong id=&quot;int64_t&quot;&gt;int64_t&lt;/strong&gt; = long;</source>
          <target state="translated">alias &lt;strong id=&quot;int64_t&quot;&gt;int64_t&lt;/strong&gt; = long;</target>
        </trans-unit>
        <trans-unit id="a2fdb8fc4f7935df32cb8f521759c47359d4ad53" translate="yes" xml:space="preserve">
          <source>alias &lt;strong id=&quot;int8_t&quot;&gt;int8_t&lt;/strong&gt; = byte;</source>
          <target state="translated">alias &lt;strong id=&quot;int8_t&quot;&gt;int8_t&lt;/strong&gt; = byte;</target>
        </trans-unit>
        <trans-unit id="ef10d7904263c2c68ee37680881fbf5cab8da090" translate="yes" xml:space="preserve">
          <source>alias &lt;strong id=&quot;int_fast16_t&quot;&gt;int_fast16_t&lt;/strong&gt; = long;</source>
          <target state="translated">alias &lt;strong id=&quot;int_fast16_t&quot;&gt;int_fast16_t&lt;/strong&gt; = largo;</target>
        </trans-unit>
        <trans-unit id="72f4ea0f6044879fcd85e4b16c381993888e0e4c" translate="yes" xml:space="preserve">
          <source>alias &lt;strong id=&quot;int_fast32_t&quot;&gt;int_fast32_t&lt;/strong&gt; = long;</source>
          <target state="translated">alias &lt;strong id=&quot;int_fast32_t&quot;&gt;int_fast32_t&lt;/strong&gt; = long;</target>
        </trans-unit>
        <trans-unit id="c6ebe00fe5b4b3407edefc41775701e0c86492cf" translate="yes" xml:space="preserve">
          <source>alias &lt;strong id=&quot;int_fast64_t&quot;&gt;int_fast64_t&lt;/strong&gt; = long;</source>
          <target state="translated">alias &lt;strong id=&quot;int_fast64_t&quot;&gt;int_fast64_t&lt;/strong&gt; = long;</target>
        </trans-unit>
        <trans-unit id="d74549578a0b3548b0f2c6e70f56037dd7f5dfd1" translate="yes" xml:space="preserve">
          <source>alias &lt;strong id=&quot;int_fast8_t&quot;&gt;int_fast8_t&lt;/strong&gt; = byte;</source>
          <target state="translated">alias &lt;strong id=&quot;int_fast8_t&quot;&gt;int_fast8_t&lt;/strong&gt; = byte;</target>
        </trans-unit>
        <trans-unit id="fbce74d115baf8f06fddb26c06f2bf0df519b910" translate="yes" xml:space="preserve">
          <source>alias &lt;strong id=&quot;int_least16_t&quot;&gt;int_least16_t&lt;/strong&gt; = short;</source>
          <target state="translated">alias &lt;strong id=&quot;int_least16_t&quot;&gt;int_least16_t&lt;/strong&gt; = corto;</target>
        </trans-unit>
        <trans-unit id="67f73d437b2304e3b407c8ab87cd000282603143" translate="yes" xml:space="preserve">
          <source>alias &lt;strong id=&quot;int_least32_t&quot;&gt;int_least32_t&lt;/strong&gt; = int;</source>
          <target state="translated">alias &lt;strong id=&quot;int_least32_t&quot;&gt;int_least32_t&lt;/strong&gt; = int;</target>
        </trans-unit>
        <trans-unit id="5817a8981d079e5e1dc046d0a7e4f59dc3ed6a2a" translate="yes" xml:space="preserve">
          <source>alias &lt;strong id=&quot;int_least64_t&quot;&gt;int_least64_t&lt;/strong&gt; = long;</source>
          <target state="translated">alias &lt;strong id=&quot;int_least64_t&quot;&gt;int_least64_t&lt;/strong&gt; = long;</target>
        </trans-unit>
        <trans-unit id="44cc1b815f41f02e035206aa5793b4ea760a2dc7" translate="yes" xml:space="preserve">
          <source>alias &lt;strong id=&quot;int_least8_t&quot;&gt;int_least8_t&lt;/strong&gt; = byte;</source>
          <target state="translated">alias &lt;strong id=&quot;int_least8_t&quot;&gt;int_least8_t&lt;/strong&gt; = byte;</target>
        </trans-unit>
        <trans-unit id="8eb07e228710eb2adebe5faff10d1e90bf9b1d58" translate="yes" xml:space="preserve">
          <source>alias &lt;strong id=&quot;intmax_t&quot;&gt;intmax_t&lt;/strong&gt; = long;</source>
          <target state="translated">alias &lt;strong id=&quot;intmax_t&quot;&gt;intmax_t&lt;/strong&gt; = long;</target>
        </trans-unit>
        <trans-unit id="203b6c89737da4a11f46cb099705a2cd71312e19" translate="yes" xml:space="preserve">
          <source>alias &lt;strong id=&quot;intptr_t&quot;&gt;intptr_t&lt;/strong&gt; = long;</source>
          <target state="translated">alias &lt;strong id=&quot;intptr_t&quot;&gt;intptr_t&lt;/strong&gt; = long;</target>
        </trans-unit>
        <trans-unit id="b2220c08db7d1cb26676cf1f8ae84a288f55a5e5" translate="yes" xml:space="preserve">
          <source>alias &lt;strong id=&quot;isExpressionTuple&quot;&gt;isExpressionTuple&lt;/strong&gt; = isExpressions(T...);</source>
          <target state="translated">alias &lt;strong id=&quot;isExpressionTuple&quot;&gt;isExpressionTuple&lt;/strong&gt; = isExpressions (T ...);</target>
        </trans-unit>
        <trans-unit id="e5bfe324afeac8d43a0b29768ce8c9fc64686c7f" translate="yes" xml:space="preserve">
          <source>alias &lt;strong id=&quot;ldexp&quot;&gt;ldexp&lt;/strong&gt; = &lt;strong id=&quot;ldexp&quot;&gt;ldexp&lt;/strong&gt;;</source>
          <target state="translated">alias &lt;strong id=&quot;ldexp&quot;&gt;ldexp&lt;/strong&gt; = &lt;strong id=&quot;ldexp&quot;&gt;ldexp&lt;/strong&gt; ;</target>
        </trans-unit>
        <trans-unit id="5a2ae907a38aedddf316557818b905a71f1f9767" translate="yes" xml:space="preserve">
          <source>alias &lt;strong id=&quot;ldexp&quot;&gt;ldexp&lt;/strong&gt; = core.stdc.math.ldexpl;</source>
          <target state="translated">alias &lt;strong id=&quot;ldexp&quot;&gt;ldexp&lt;/strong&gt; = core.stdc.math.ldexpl;</target>
        </trans-unit>
        <trans-unit id="cf63d6637832063bc30b67f97730f7d6801fc643" translate="yes" xml:space="preserve">
          <source>alias &lt;strong id=&quot;length&quot;&gt;length&lt;/strong&gt; = size;</source>
          <target state="translated">alias &lt;strong id=&quot;length&quot;&gt;longitud&lt;/strong&gt; = tama&amp;ntilde;o;</target>
        </trans-unit>
        <trans-unit id="f08be964780f77b29d62652f674be3726dd6ffce" translate="yes" xml:space="preserve">
          <source>alias &lt;strong id=&quot;lessThan&quot;&gt;lessThan&lt;/strong&gt; = safeOp!&quot;&amp;lt;&quot;.safeOp(T0, T1)(auto ref T0 a, auto ref T1 b);</source>
          <target state="translated">alias &lt;strong id=&quot;lessThan&quot;&gt;lessThan&lt;/strong&gt; = safeOp! &quot;&amp;lt;&quot;. safeOp (T0, T1) (referencia autom&amp;aacute;tica T0 a, referencia autom&amp;aacute;tica T1 b);</target>
        </trans-unit>
        <trans-unit id="919d6edc6ee50f8e6b80bbd1e5eb4cd641dbf1c5" translate="yes" xml:space="preserve">
          <source>alias &lt;strong id=&quot;lgamma&quot;&gt;lgamma&lt;/strong&gt; = &lt;strong id=&quot;lgamma&quot;&gt;lgamma&lt;/strong&gt;;</source>
          <target state="translated">alias &lt;strong id=&quot;lgamma&quot;&gt;lgamma&lt;/strong&gt; = &lt;strong id=&quot;lgamma&quot;&gt;lgamma&lt;/strong&gt; ;</target>
        </trans-unit>
        <trans-unit id="a3c50ca502dc7175879a4ddb56d49d6e6104e086" translate="yes" xml:space="preserve">
          <source>alias &lt;strong id=&quot;lgamma&quot;&gt;lgamma&lt;/strong&gt; = core.stdc.math.lgammal;</source>
          <target state="translated">alias &lt;strong id=&quot;lgamma&quot;&gt;lgamma&lt;/strong&gt; = core.stdc.math.lgammal;</target>
        </trans-unit>
        <trans-unit id="9ba7f609c07cee2cd58245e9ddd336e3eb675b83" translate="yes" xml:space="preserve">
          <source>alias &lt;strong id=&quot;linearInsert&quot;&gt;linearInsert&lt;/strong&gt; = insertBack;</source>
          <target state="translated">alias &lt;strong id=&quot;linearInsert&quot;&gt;linearInsert&lt;/strong&gt; = insertBack;</target>
        </trans-unit>
        <trans-unit id="9a3e53f928cb943cc25c73ca06dd48f2cf6171f6" translate="yes" xml:space="preserve">
          <source>alias &lt;strong id=&quot;llrint&quot;&gt;llrint&lt;/strong&gt; = &lt;strong id=&quot;llrint&quot;&gt;llrint&lt;/strong&gt;;</source>
          <target state="translated">alias &lt;strong id=&quot;llrint&quot;&gt;llrint&lt;/strong&gt; = &lt;strong id=&quot;llrint&quot;&gt;llrint&lt;/strong&gt; ;</target>
        </trans-unit>
        <trans-unit id="d8087b5da29833db77c79f911503c34ea63b6c0a" translate="yes" xml:space="preserve">
          <source>alias &lt;strong id=&quot;llrint&quot;&gt;llrint&lt;/strong&gt; = core.stdc.math.llrintl;</source>
          <target state="translated">alias &lt;strong id=&quot;llrint&quot;&gt;llrint&lt;/strong&gt; = core.stdc.math.llrintl;</target>
        </trans-unit>
        <trans-unit id="cb83ff1e7d9571c62d5ea21a4fc745fe47c33e34" translate="yes" xml:space="preserve">
          <source>alias &lt;strong id=&quot;llround&quot;&gt;llround&lt;/strong&gt; = &lt;strong id=&quot;llround&quot;&gt;llround&lt;/strong&gt;;</source>
          <target state="translated">alias &lt;strong id=&quot;llround&quot;&gt;llround&lt;/strong&gt; = &lt;strong id=&quot;llround&quot;&gt;llround&lt;/strong&gt; ;</target>
        </trans-unit>
        <trans-unit id="fc5533c73837850a8519bcbc4ea7cda3e9387c68" translate="yes" xml:space="preserve">
          <source>alias &lt;strong id=&quot;llround&quot;&gt;llround&lt;/strong&gt; = core.stdc.math.llroundl;</source>
          <target state="translated">alias &lt;strong id=&quot;llround&quot;&gt;llround&lt;/strong&gt; = core.stdc.math.llroundl;</target>
        </trans-unit>
        <trans-unit id="7e716d2f7da494f0771d0c7d485d579c544f3736" translate="yes" xml:space="preserve">
          <source>alias &lt;strong id=&quot;log&quot;&gt;log&lt;/strong&gt; = &lt;strong id=&quot;log&quot;&gt;log&lt;/strong&gt;;</source>
          <target state="translated">alias &lt;strong id=&quot;log&quot;&gt;log&lt;/strong&gt; = &lt;strong id=&quot;log&quot;&gt;log&lt;/strong&gt; ;</target>
        </trans-unit>
        <trans-unit id="6385eca9e2e1fe3344fcc6ff15e0613c333a3e9a" translate="yes" xml:space="preserve">
          <source>alias &lt;strong id=&quot;log&quot;&gt;log&lt;/strong&gt; = core.stdc.complex.clogl;</source>
          <target state="translated">alias &lt;strong id=&quot;log&quot;&gt;log&lt;/strong&gt; = core.stdc.complex.clogl;</target>
        </trans-unit>
        <trans-unit id="9262c9a7470ddf5ba5a1a33d09320533ef050814" translate="yes" xml:space="preserve">
          <source>alias &lt;strong id=&quot;log10&quot;&gt;log10&lt;/strong&gt; = &lt;strong id=&quot;log10&quot;&gt;log10&lt;/strong&gt;;</source>
          <target state="translated">alias &lt;strong id=&quot;log10&quot;&gt;log10&lt;/strong&gt; = &lt;strong id=&quot;log10&quot;&gt;log10&lt;/strong&gt; ;</target>
        </trans-unit>
        <trans-unit id="63c59b1353c26ba23da072cdab0d9f4d405ddc75" translate="yes" xml:space="preserve">
          <source>alias &lt;strong id=&quot;log10&quot;&gt;log10&lt;/strong&gt; = core.stdc.math.log10l;</source>
          <target state="translated">alias &lt;strong id=&quot;log10&quot;&gt;log10&lt;/strong&gt; = core.stdc.math.log10l;</target>
        </trans-unit>
        <trans-unit id="115ac5899421d2084035bf773648b410ff54d22f" translate="yes" xml:space="preserve">
          <source>alias &lt;strong id=&quot;log1p&quot;&gt;log1p&lt;/strong&gt; = &lt;strong id=&quot;log1p&quot;&gt;log1p&lt;/strong&gt;;</source>
          <target state="translated">alias &lt;strong id=&quot;log1p&quot;&gt;log1p&lt;/strong&gt; = &lt;strong id=&quot;log1p&quot;&gt;log1p&lt;/strong&gt; ;</target>
        </trans-unit>
        <trans-unit id="043b3f99ff6d26a5b86b3393bfd287ff3f3fc1fe" translate="yes" xml:space="preserve">
          <source>alias &lt;strong id=&quot;log1p&quot;&gt;log1p&lt;/strong&gt; = core.stdc.math.log1pl;</source>
          <target state="translated">alias &lt;strong id=&quot;log1p&quot;&gt;log1p&lt;/strong&gt; = core.stdc.math.log1pl;</target>
        </trans-unit>
        <trans-unit id="9ffe99a22186cd6520147f8b2c8ad493d7f89206" translate="yes" xml:space="preserve">
          <source>alias &lt;strong id=&quot;log2&quot;&gt;log2&lt;/strong&gt; = &lt;strong id=&quot;log2&quot;&gt;log2&lt;/strong&gt;;</source>
          <target state="translated">alias &lt;strong id=&quot;log2&quot;&gt;log2&lt;/strong&gt; = &lt;strong id=&quot;log2&quot;&gt;log2&lt;/strong&gt; ;</target>
        </trans-unit>
        <trans-unit id="52f48330b18a77ed1e44680632f550f56bd8c2c6" translate="yes" xml:space="preserve">
          <source>alias &lt;strong id=&quot;log2&quot;&gt;log2&lt;/strong&gt; = core.stdc.math.log2l;</source>
          <target state="translated">alias &lt;strong id=&quot;log2&quot;&gt;log2&lt;/strong&gt; = core.stdc.math.log2l;</target>
        </trans-unit>
        <trans-unit id="6c0e4c89349979cec863cc4a5d26185ff6d66149" translate="yes" xml:space="preserve">
          <source>alias &lt;strong id=&quot;logb&quot;&gt;logb&lt;/strong&gt; = &lt;strong id=&quot;logb&quot;&gt;logb&lt;/strong&gt;;</source>
          <target state="translated">alias &lt;strong id=&quot;logb&quot;&gt;logb&lt;/strong&gt; = &lt;strong id=&quot;logb&quot;&gt;logb&lt;/strong&gt; ;</target>
        </trans-unit>
        <trans-unit id="0932d61ab54094553e6930a3e1cd91a68218880f" translate="yes" xml:space="preserve">
          <source>alias &lt;strong id=&quot;logb&quot;&gt;logb&lt;/strong&gt; = core.stdc.math.logbl;</source>
          <target state="translated">alias &lt;strong id=&quot;logb&quot;&gt;logb&lt;/strong&gt; = core.stdc.math.logbl;</target>
        </trans-unit>
        <trans-unit id="391ff7cb968e1a506aa9b55436e73a10c604af02" translate="yes" xml:space="preserve">
          <source>alias &lt;strong id=&quot;long2&quot;&gt;long2&lt;/strong&gt; = __vector(long[2]);</source>
          <target state="translated">alias &lt;strong id=&quot;long2&quot;&gt;long2&lt;/strong&gt; = __vector (long [2]);</target>
        </trans-unit>
        <trans-unit id="d6e3c7aff88a42f057721752775a4cd63377945b" translate="yes" xml:space="preserve">
          <source>alias &lt;strong id=&quot;lrint&quot;&gt;lrint&lt;/strong&gt; = &lt;strong id=&quot;lrint&quot;&gt;lrint&lt;/strong&gt;;</source>
          <target state="translated">alias &lt;strong id=&quot;lrint&quot;&gt;lrint&lt;/strong&gt; = &lt;strong id=&quot;lrint&quot;&gt;lrint&lt;/strong&gt; ;</target>
        </trans-unit>
        <trans-unit id="3b27d4316f2e30b22e337daaa1c15c07db41ddd4" translate="yes" xml:space="preserve">
          <source>alias &lt;strong id=&quot;lrint&quot;&gt;lrint&lt;/strong&gt; = core.stdc.math.lrintl;</source>
          <target state="translated">alias &lt;strong id=&quot;lrint&quot;&gt;lrint&lt;/strong&gt; = core.stdc.math.lrintl;</target>
        </trans-unit>
        <trans-unit id="27acd03b6264acb4ee7dd636c954df369f517cd3" translate="yes" xml:space="preserve">
          <source>alias &lt;strong id=&quot;lround&quot;&gt;lround&lt;/strong&gt; = &lt;strong id=&quot;lround&quot;&gt;lround&lt;/strong&gt;;</source>
          <target state="translated">alias &lt;strong id=&quot;lround&quot;&gt;lround&lt;/strong&gt; = &lt;strong id=&quot;lround&quot;&gt;lround&lt;/strong&gt; ;</target>
        </trans-unit>
        <trans-unit id="8c416f6b5568992d9c4784e6fbd01ff8197bdbc3" translate="yes" xml:space="preserve">
          <source>alias &lt;strong id=&quot;lround&quot;&gt;lround&lt;/strong&gt; = core.stdc.math.lroundl;</source>
          <target state="translated">alias &lt;strong id=&quot;lround&quot;&gt;lround&lt;/strong&gt; = core.stdc.math.lroundl;</target>
        </trans-unit>
        <trans-unit id="bf52b6d3b376a4f789ca0148fb3be9a7cb1dbb36" translate="yes" xml:space="preserve">
          <source>alias &lt;strong id=&quot;mapFunction&quot;&gt;mapFunction&lt;/strong&gt; = extern (C) void function(sqlite3_context*, int, sqlite3_value**) nothrow;</source>
          <target state="translated">alias &lt;strong id=&quot;mapFunction&quot;&gt;mapFunction&lt;/strong&gt; = extern (C) funci&amp;oacute;n vac&amp;iacute;a (sqlite3_context *, int, sqlite3_value **) nothrow;</target>
        </trans-unit>
        <trans-unit id="3d1c4a652591d2a83c7fc82d9e05d12e67707a34" translate="yes" xml:space="preserve">
          <source>alias &lt;strong id=&quot;minutes&quot;&gt;minutes&lt;/strong&gt; = dur!&quot;&lt;strong id=&quot;minutes&quot;&gt;minutes&lt;/strong&gt;&quot;.dur;</source>
          <target state="translated">alias &lt;strong id=&quot;minutes&quot;&gt;minutos&lt;/strong&gt; = dur! &quot; &lt;strong id=&quot;minutes&quot;&gt;minutos&lt;/strong&gt; &quot; .dur;</target>
        </trans-unit>
        <trans-unit id="258c8d3e5315f47bf36ac65a519426a16a1cfc1c" translate="yes" xml:space="preserve">
          <source>alias &lt;strong id=&quot;modf&quot;&gt;modf&lt;/strong&gt; = &lt;strong id=&quot;modf&quot;&gt;modf&lt;/strong&gt;;</source>
          <target state="translated">alias &lt;strong id=&quot;modf&quot;&gt;modf&lt;/strong&gt; = &lt;strong id=&quot;modf&quot;&gt;modf&lt;/strong&gt; ;</target>
        </trans-unit>
        <trans-unit id="13bb353f641b91cc149d224e35dbfb03d059c2ae" translate="yes" xml:space="preserve">
          <source>alias &lt;strong id=&quot;modf&quot;&gt;modf&lt;/strong&gt; = core.stdc.math.modfl;</source>
          <target state="translated">alias &lt;strong id=&quot;modf&quot;&gt;modf&lt;/strong&gt; = core.stdc.math.modfl;</target>
        </trans-unit>
        <trans-unit id="8bd5cb7c8149e5ad18a09e2fe0ea68de984fa42e" translate="yes" xml:space="preserve">
          <source>alias &lt;strong id=&quot;mptr_flags_t&quot;&gt;mptr_flags_t&lt;/strong&gt; = char;</source>
          <target state="translated">alias &lt;strong id=&quot;mptr_flags_t&quot;&gt;mptr_flags_t&lt;/strong&gt; = char;</target>
        </trans-unit>
        <trans-unit id="b14ac27f3875635796f4a255c0c5e331a8d2a2ef" translate="yes" xml:space="preserve">
          <source>alias &lt;strong id=&quot;msecs&quot;&gt;msecs&lt;/strong&gt; = dur!&quot;&lt;strong id=&quot;msecs&quot;&gt;msecs&lt;/strong&gt;&quot;.dur;</source>
          <target state="translated">alias &lt;strong id=&quot;msecs&quot;&gt;msecs&lt;/strong&gt; = dur! &quot; &lt;strong id=&quot;msecs&quot;&gt;msecs&lt;/strong&gt; &quot; .dur;</target>
        </trans-unit>
        <trans-unit id="6f107543dcc2cc456de9ef026cc27f7d89fe097f" translate="yes" xml:space="preserve">
          <source>alias &lt;strong id=&quot;nan&quot;&gt;nan&lt;/strong&gt; = &lt;strong id=&quot;nan&quot;&gt;nan&lt;/strong&gt;;</source>
          <target state="translated">alias &lt;strong id=&quot;nan&quot;&gt;nan&lt;/strong&gt; = &lt;strong id=&quot;nan&quot;&gt;nan&lt;/strong&gt; ;</target>
        </trans-unit>
        <trans-unit id="88f03a29662462315cc891a07a7d9b9a6d70533d" translate="yes" xml:space="preserve">
          <source>alias &lt;strong id=&quot;nan&quot;&gt;nan&lt;/strong&gt; = core.stdc.math.nanl;</source>
          <target state="translated">alias &lt;strong id=&quot;nan&quot;&gt;nan&lt;/strong&gt; = core.stdc.math.nanl;</target>
        </trans-unit>
        <trans-unit id="d9d5f842eabea5f2e6efec4ca827d15cd64f6634" translate="yes" xml:space="preserve">
          <source>alias &lt;strong id=&quot;nearbyint&quot;&gt;nearbyint&lt;/strong&gt; = &lt;strong id=&quot;nearbyint&quot;&gt;nearbyint&lt;/strong&gt;;</source>
          <target state="translated">alias &lt;strong id=&quot;nearbyint&quot;&gt;nearbyint&lt;/strong&gt; = &lt;strong id=&quot;nearbyint&quot;&gt;nearbyint&lt;/strong&gt; ;</target>
        </trans-unit>
        <trans-unit id="604ff3a5814007fc20b6b060fc0f3f7d11010915" translate="yes" xml:space="preserve">
          <source>alias &lt;strong id=&quot;nearbyint&quot;&gt;nearbyint&lt;/strong&gt; = core.stdc.math.nearbyintl;</source>
          <target state="translated">alias &lt;strong id=&quot;nearbyint&quot;&gt;nearbyint&lt;/strong&gt; = core.stdc.math.nearbyintl;</target>
        </trans-unit>
        <trans-unit id="558965acf79caa84d2f10807f3dbef153f0a711d" translate="yes" xml:space="preserve">
          <source>alias &lt;strong id=&quot;nextafter&quot;&gt;nextafter&lt;/strong&gt; = &lt;strong id=&quot;nextafter&quot;&gt;nextafter&lt;/strong&gt;;</source>
          <target state="translated">alias &lt;strong id=&quot;nextafter&quot;&gt;nextafter&lt;/strong&gt; = &lt;strong id=&quot;nextafter&quot;&gt;nextafter&lt;/strong&gt; ;</target>
        </trans-unit>
        <trans-unit id="f125d1707f7657493975fcd3887dd674f8e1d900" translate="yes" xml:space="preserve">
          <source>alias &lt;strong id=&quot;nextafter&quot;&gt;nextafter&lt;/strong&gt; = core.stdc.math.nextafterl;</source>
          <target state="translated">alias &lt;strong id=&quot;nextafter&quot;&gt;nextafter&lt;/strong&gt; = core.stdc.math.nextafterl;</target>
        </trans-unit>
        <trans-unit id="811d06282b512b4986483bd93bf191f7abc9a9d7" translate="yes" xml:space="preserve">
          <source>alias &lt;strong id=&quot;nexttoward&quot;&gt;nexttoward&lt;/strong&gt; = &lt;strong id=&quot;nexttoward&quot;&gt;nexttoward&lt;/strong&gt;;</source>
          <target state="translated">alias &lt;strong id=&quot;nexttoward&quot;&gt;nexttoward&lt;/strong&gt; = &lt;strong id=&quot;nexttoward&quot;&gt;nexttoward&lt;/strong&gt; ;</target>
        </trans-unit>
        <trans-unit id="6a0764de6913580fbd77f92971a5ee90c2499072" translate="yes" xml:space="preserve">
          <source>alias &lt;strong id=&quot;nexttoward&quot;&gt;nexttoward&lt;/strong&gt; = core.stdc.math.nexttowardl;</source>
          <target state="translated">alias &lt;strong id=&quot;nexttoward&quot;&gt;nexttoward&lt;/strong&gt; = core.stdc.math.nexttowardl;</target>
        </trans-unit>
        <trans-unit id="8e4364921967a2debf6ab147f823f05aaad1000f" translate="yes" xml:space="preserve">
          <source>alias &lt;strong id=&quot;nsecs&quot;&gt;nsecs&lt;/strong&gt; = dur!&quot;&lt;strong id=&quot;nsecs&quot;&gt;nsecs&lt;/strong&gt;&quot;.dur;</source>
          <target state="translated">alias &lt;strong id=&quot;nsecs&quot;&gt;nsecs&lt;/strong&gt; = dur! &quot; &lt;strong id=&quot;nsecs&quot;&gt;nsecs&lt;/strong&gt; &quot; .dur;</target>
        </trans-unit>
        <trans-unit id="4e143a195b400d1c42401670e0893f4d6367664f" translate="yes" xml:space="preserve">
          <source>alias &lt;strong id=&quot;nullptr_t&quot;&gt;nullptr_t&lt;/strong&gt; = typeof(null);</source>
          <target state="translated">alias &lt;strong id=&quot;nullptr_t&quot;&gt;nullptr_t&lt;/strong&gt; = typeof (null);</target>
        </trans-unit>
        <trans-unit id="dfe9db040221e2e48b7fa496288be9953f7955fa" translate="yes" xml:space="preserve">
          <source>alias &lt;strong id=&quot;opDollar&quot;&gt;opDollar&lt;/strong&gt; = length;</source>
          <target state="translated">alias &lt;strong id=&quot;opDollar&quot;&gt;opDollar&lt;/strong&gt; = longitud;</target>
        </trans-unit>
        <trans-unit id="6a0edfd1086059016e778281e802af8d95f9ddad" translate="yes" xml:space="preserve">
          <source>alias &lt;strong id=&quot;opflag_t&quot;&gt;opflag_t&lt;/strong&gt; = uint;</source>
          <target state="translated">alias &lt;strong id=&quot;opflag_t&quot;&gt;opflag_t&lt;/strong&gt; = uint;</target>
        </trans-unit>
        <trans-unit id="993b9a6a383090186c7de9c0b10c6149b2285c93" translate="yes" xml:space="preserve">
          <source>alias &lt;strong id=&quot;pflags_t&quot;&gt;pflags_t&lt;/strong&gt; = uint;</source>
          <target state="translated">alias &lt;strong id=&quot;pflags_t&quot;&gt;pflags_t&lt;/strong&gt; = uint;</target>
        </trans-unit>
        <trans-unit id="d09d6adec16026ea81a55995d09cce2da3f09162" translate="yes" xml:space="preserve">
          <source>alias &lt;strong id=&quot;pointer&quot;&gt;pointer&lt;/strong&gt; = T*;</source>
          <target state="translated">&lt;strong id=&quot;pointer&quot;&gt;puntero de&lt;/strong&gt; alias = T *;</target>
        </trans-unit>
        <trans-unit id="2747ad1a03e4ec187f5c69e4371efb444253dcfe" translate="yes" xml:space="preserve">
          <source>alias &lt;strong id=&quot;pointer&quot;&gt;pointer&lt;/strong&gt; = value_type*;</source>
          <target state="translated">&lt;strong id=&quot;pointer&quot;&gt;puntero&lt;/strong&gt; alias = value_type *;</target>
        </trans-unit>
        <trans-unit id="7e11b393fc3c83c2bbdf21db9c9e643e312dc1f2" translate="yes" xml:space="preserve">
          <source>alias &lt;strong id=&quot;popFront&quot;&gt;popFront&lt;/strong&gt; = removeFront;</source>
          <target state="translated">alias &lt;strong id=&quot;popFront&quot;&gt;popFront&lt;/strong&gt; = removeFront;</target>
        </trans-unit>
        <trans-unit id="834a51720dc4d0faa149098392b180aa93cc2d6f" translate="yes" xml:space="preserve">
          <source>alias &lt;strong id=&quot;pow&quot;&gt;pow&lt;/strong&gt; = &lt;strong id=&quot;pow&quot;&gt;pow&lt;/strong&gt;;</source>
          <target state="translated">alias &lt;strong id=&quot;pow&quot;&gt;pow&lt;/strong&gt; = &lt;strong id=&quot;pow&quot;&gt;pow&lt;/strong&gt; ;</target>
        </trans-unit>
        <trans-unit id="86b39e9811de6e86cb694ccb8b170db858c43ebd" translate="yes" xml:space="preserve">
          <source>alias &lt;strong id=&quot;pow&quot;&gt;pow&lt;/strong&gt; = core.stdc.complex.cpowl;</source>
          <target state="translated">alias &lt;strong id=&quot;pow&quot;&gt;pow&lt;/strong&gt; = core.stdc.complex.cpowl;</target>
        </trans-unit>
        <trans-unit id="8314b5d7c43e31928f00ad93ac7da2a17933642f" translate="yes" xml:space="preserve">
          <source>alias &lt;strong id=&quot;put&quot;&gt;put&lt;/strong&gt; = write;</source>
          <target state="translated">alias &lt;strong id=&quot;put&quot;&gt;put&lt;/strong&gt; = escribir;</target>
        </trans-unit>
        <trans-unit id="da39eb88ac4fb559964cff56d0051820b9c9f62f" translate="yes" xml:space="preserve">
          <source>alias &lt;strong id=&quot;remainder&quot;&gt;remainder&lt;/strong&gt; = &lt;strong id=&quot;remainder&quot;&gt;remainder&lt;/strong&gt;;</source>
          <target state="translated">alias &lt;strong id=&quot;remainder&quot;&gt;resto&lt;/strong&gt; = &lt;strong id=&quot;remainder&quot;&gt;resto&lt;/strong&gt; ;</target>
        </trans-unit>
        <trans-unit id="26c457004f9e571ce770157a5416145dc55c56fc" translate="yes" xml:space="preserve">
          <source>alias &lt;strong id=&quot;remainder&quot;&gt;remainder&lt;/strong&gt; = core.stdc.math.remainderl;</source>
          <target state="translated">&lt;strong id=&quot;remainder&quot;&gt;resto de&lt;/strong&gt; alias = core.stdc.math.remainderl;</target>
        </trans-unit>
        <trans-unit id="ee028a2409f6ff45d4c75af148eb02ffe62644b4" translate="yes" xml:space="preserve">
          <source>alias &lt;strong id=&quot;remquo&quot;&gt;remquo&lt;/strong&gt; = &lt;strong id=&quot;remquo&quot;&gt;remquo&lt;/strong&gt;;</source>
          <target state="translated">alias &lt;strong id=&quot;remquo&quot;&gt;remquo&lt;/strong&gt; = &lt;strong id=&quot;remquo&quot;&gt;remquo&lt;/strong&gt; ;</target>
        </trans-unit>
        <trans-unit id="48c68ba698f7f1d17ae00d0eae0f746f43a4263c" translate="yes" xml:space="preserve">
          <source>alias &lt;strong id=&quot;remquo&quot;&gt;remquo&lt;/strong&gt; = core.stdc.math.remquol;</source>
          <target state="translated">alias &lt;strong id=&quot;remquo&quot;&gt;remquo&lt;/strong&gt; = core.stdc.math.remquol;</target>
        </trans-unit>
        <trans-unit id="07b24216f2fc7e6c40a8fb023cbbdb986834bcf7" translate="yes" xml:space="preserve">
          <source>alias &lt;strong id=&quot;requestAbort&quot;&gt;requestAbort&lt;/strong&gt; = etc.c.curl.CurlReadFunc.abort;</source>
          <target state="translated">alias &lt;strong id=&quot;requestAbort&quot;&gt;requestAbort&lt;/strong&gt; = etc.c.curl.CurlReadFunc.abort;</target>
        </trans-unit>
        <trans-unit id="503ac5bc33cf638b133c431d65eace3df88ec82e" translate="yes" xml:space="preserve">
          <source>alias &lt;strong id=&quot;requestPause&quot;&gt;requestPause&lt;/strong&gt; = etc.c.curl.CurlReadFunc.pause;</source>
          <target state="translated">alias &lt;strong id=&quot;requestPause&quot;&gt;requestPause&lt;/strong&gt; = etc.c.curl.CurlReadFunc.pause;</target>
        </trans-unit>
        <trans-unit id="f4e326f111e7c43690d2e5c7916a759ecfb4df45" translate="yes" xml:space="preserve">
          <source>alias &lt;strong id=&quot;rint&quot;&gt;rint&lt;/strong&gt; = &lt;strong id=&quot;rint&quot;&gt;rint&lt;/strong&gt;;</source>
          <target state="translated">alias &lt;strong id=&quot;rint&quot;&gt;rint&lt;/strong&gt; = &lt;strong id=&quot;rint&quot;&gt;rint&lt;/strong&gt; ;</target>
        </trans-unit>
        <trans-unit id="f9ed9727ba927ce19d15f4fa37f558c3a8c6c80e" translate="yes" xml:space="preserve">
          <source>alias &lt;strong id=&quot;rint&quot;&gt;rint&lt;/strong&gt; = core.stdc.math.rintl;</source>
          <target state="translated">alias &lt;strong id=&quot;rint&quot;&gt;rint&lt;/strong&gt; = core.stdc.math.rintl;</target>
        </trans-unit>
        <trans-unit id="2dc41bd7955ed837d2e6e4e634bac7abba627321" translate="yes" xml:space="preserve">
          <source>alias &lt;strong id=&quot;round&quot;&gt;round&lt;/strong&gt; = &lt;strong id=&quot;round&quot;&gt;round&lt;/strong&gt;;</source>
          <target state="translated">alias &lt;strong id=&quot;round&quot;&gt;round&lt;/strong&gt; = &lt;strong id=&quot;round&quot;&gt;round&lt;/strong&gt; ;</target>
        </trans-unit>
        <trans-unit id="dcbf67f6fd526815bf6ac7f9ad7be43275c5a48a" translate="yes" xml:space="preserve">
          <source>alias &lt;strong id=&quot;round&quot;&gt;round&lt;/strong&gt; = core.stdc.math.roundl;</source>
          <target state="translated">alias &lt;strong id=&quot;round&quot;&gt;round&lt;/strong&gt; = core.stdc.math.roundl;</target>
        </trans-unit>
        <trans-unit id="59c9dafbd019d8c3ac1965a367a1cb9b3dbd926a" translate="yes" xml:space="preserve">
          <source>alias &lt;strong id=&quot;scalbln&quot;&gt;scalbln&lt;/strong&gt; = &lt;strong id=&quot;scalbln&quot;&gt;scalbln&lt;/strong&gt;;</source>
          <target state="translated">alias &lt;strong id=&quot;scalbln&quot;&gt;scalbln&lt;/strong&gt; = &lt;strong id=&quot;scalbln&quot;&gt;scalbln&lt;/strong&gt; ;</target>
        </trans-unit>
        <trans-unit id="9b7241f16c59655cc5c1b2f2fc92ebcab16f62ae" translate="yes" xml:space="preserve">
          <source>alias &lt;strong id=&quot;scalbln&quot;&gt;scalbln&lt;/strong&gt; = core.stdc.math.scalblnl;</source>
          <target state="translated">alias &lt;strong id=&quot;scalbln&quot;&gt;scalbln&lt;/strong&gt; = core.stdc.math.scalblnl;</target>
        </trans-unit>
        <trans-unit id="e9532eb86810ed8b69ac52d54b79fe61fb528fe1" translate="yes" xml:space="preserve">
          <source>alias &lt;strong id=&quot;scalbn&quot;&gt;scalbn&lt;/strong&gt; = &lt;strong id=&quot;scalbn&quot;&gt;scalbn&lt;/strong&gt;;</source>
          <target state="translated">alias &lt;strong id=&quot;scalbn&quot;&gt;scalbn&lt;/strong&gt; = &lt;strong id=&quot;scalbn&quot;&gt;scalbn&lt;/strong&gt; ;</target>
        </trans-unit>
        <trans-unit id="24b3da412cc9c542e454265e4071527c01379d17" translate="yes" xml:space="preserve">
          <source>alias &lt;strong id=&quot;scalbn&quot;&gt;scalbn&lt;/strong&gt; = core.stdc.math.scalbnl;</source>
          <target state="translated">alias &lt;strong id=&quot;scalbn&quot;&gt;scalbn&lt;/strong&gt; = core.stdc.math.scalbnl;</target>
        </trans-unit>
        <trans-unit id="d7d9bb2fb8bbcea9ce8c9bdcc9708b12261c97ec" translate="yes" xml:space="preserve">
          <source>alias &lt;strong id=&quot;seconds&quot;&gt;seconds&lt;/strong&gt; = dur!&quot;&lt;strong id=&quot;seconds&quot;&gt;seconds&lt;/strong&gt;&quot;.dur;</source>
          <target state="translated">alias &lt;strong id=&quot;seconds&quot;&gt;segundos&lt;/strong&gt; = dur! &quot; &lt;strong id=&quot;seconds&quot;&gt;segundos&lt;/strong&gt; &quot; .dur;</target>
        </trans-unit>
        <trans-unit id="a7d66736a5880fc2c60364478c8334f007219ee2" translate="yes" xml:space="preserve">
          <source>alias &lt;strong id=&quot;short8&quot;&gt;short8&lt;/strong&gt; = __vector(short[8]);</source>
          <target state="translated">alias &lt;strong id=&quot;short8&quot;&gt;short8&lt;/strong&gt; = __vector (short [8]);</target>
        </trans-unit>
        <trans-unit id="05b22c6212a65d918617c6e9c2b1183adb0445b6" translate="yes" xml:space="preserve">
          <source>alias &lt;strong id=&quot;sig_atomic_t&quot;&gt;sig_atomic_t&lt;/strong&gt; = int;</source>
          <target state="translated">alias &lt;strong id=&quot;sig_atomic_t&quot;&gt;sig_atomic_t&lt;/strong&gt; = int;</target>
        </trans-unit>
        <trans-unit id="346d2238332f0aedc6517a83b92879fb4669a3ae" translate="yes" xml:space="preserve">
          <source>alias &lt;strong id=&quot;sin&quot;&gt;sin&lt;/strong&gt; = &lt;strong id=&quot;sin&quot;&gt;sin&lt;/strong&gt;;</source>
          <target state="translated">alias &lt;strong id=&quot;sin&quot;&gt;pecado&lt;/strong&gt; = &lt;strong id=&quot;sin&quot;&gt;pecado&lt;/strong&gt; ;</target>
        </trans-unit>
        <trans-unit id="e5f6dd3a74913a923d38a79239a1352e9346d61a" translate="yes" xml:space="preserve">
          <source>alias &lt;strong id=&quot;sin&quot;&gt;sin&lt;/strong&gt; = core.stdc.math.sinl;</source>
          <target state="translated">alias &lt;strong id=&quot;sin&quot;&gt;sin&lt;/strong&gt; = core.stdc.math.sinl;</target>
        </trans-unit>
        <trans-unit id="91c602a24360043be5eb3738720b1d3e9ed1fc77" translate="yes" xml:space="preserve">
          <source>alias &lt;strong id=&quot;sinh&quot;&gt;sinh&lt;/strong&gt; = &lt;strong id=&quot;sinh&quot;&gt;sinh&lt;/strong&gt;;</source>
          <target state="translated">alias &lt;strong id=&quot;sinh&quot;&gt;sinh&lt;/strong&gt; = &lt;strong id=&quot;sinh&quot;&gt;sinh&lt;/strong&gt; ;</target>
        </trans-unit>
        <trans-unit id="b4cad9d8cda57aa93e5490b03a810752b54da2d6" translate="yes" xml:space="preserve">
          <source>alias &lt;strong id=&quot;sinh&quot;&gt;sinh&lt;/strong&gt; = core.stdc.complex.csinhl;</source>
          <target state="translated">alias &lt;strong id=&quot;sinh&quot;&gt;sinh&lt;/strong&gt; = core.stdc.complex.csinhl;</target>
        </trans-unit>
        <trans-unit id="f21f017df2bd89d8b3435ed8af27b69a4dc465fe" translate="yes" xml:space="preserve">
          <source>alias &lt;strong id=&quot;size_type&quot;&gt;size_type&lt;/strong&gt; = size_t;</source>
          <target state="translated">alias &lt;strong id=&quot;size_type&quot;&gt;size_type&lt;/strong&gt; = size_t;</target>
        </trans-unit>
        <trans-unit id="229672832d9ee27d496755ced34295b5dad5165b" translate="yes" xml:space="preserve">
          <source>alias &lt;strong id=&quot;slot_t&quot;&gt;slot_t&lt;/strong&gt; = void delegate(T1);</source>
          <target state="translated">alias &lt;strong id=&quot;slot_t&quot;&gt;slot_t&lt;/strong&gt; = delegado vac&amp;iacute;o (T1);</target>
        </trans-unit>
        <trans-unit id="b69635b1d575593cca71ca4d95b0619c0925439b" translate="yes" xml:space="preserve">
          <source>alias &lt;strong id=&quot;sqlite3_callback&quot;&gt;sqlite3_callback&lt;/strong&gt; = extern (C) int function(void*, int, char**, char**) nothrow;</source>
          <target state="translated">alias &lt;strong id=&quot;sqlite3_callback&quot;&gt;sqlite3_callback&lt;/strong&gt; = extern (C) int funci&amp;oacute;n (void *, int, char **, char **) nothrow;</target>
        </trans-unit>
        <trans-unit id="8090850c799513d5da7ce811d8e192c565864707" translate="yes" xml:space="preserve">
          <source>alias &lt;strong id=&quot;sqlite3_destructor_type&quot;&gt;sqlite3_destructor_type&lt;/strong&gt; = extern (C) void function(void*) nothrow;</source>
          <target state="translated">alias &lt;strong id=&quot;sqlite3_destructor_type&quot;&gt;sqlite3_destructor_type&lt;/strong&gt; = extern (C) void function (void *) nothrow;</target>
        </trans-unit>
        <trans-unit id="477fa7a37aec980336a1263a86030d84ccf55aa3" translate="yes" xml:space="preserve">
          <source>alias &lt;strong id=&quot;sqlite3_int64&quot;&gt;sqlite3_int64&lt;/strong&gt; = long;</source>
          <target state="translated">alias &lt;strong id=&quot;sqlite3_int64&quot;&gt;sqlite3_int64&lt;/strong&gt; = long;</target>
        </trans-unit>
        <trans-unit id="ec348d8e1d211539f2e32feb8580921027393164" translate="yes" xml:space="preserve">
          <source>alias &lt;strong id=&quot;sqlite3_syscall_ptr&quot;&gt;sqlite3_syscall_ptr&lt;/strong&gt; = extern (C) void function() nothrow;</source>
          <target state="translated">alias &lt;strong id=&quot;sqlite3_syscall_ptr&quot;&gt;sqlite3_syscall_ptr&lt;/strong&gt; = extern (C) void function () nothrow;</target>
        </trans-unit>
        <trans-unit id="eb2445f0c24b61f1da7402f665c37734221515ba" translate="yes" xml:space="preserve">
          <source>alias &lt;strong id=&quot;sqlite3_uint64&quot;&gt;sqlite3_uint64&lt;/strong&gt; = ulong;</source>
          <target state="translated">alias &lt;strong id=&quot;sqlite3_uint64&quot;&gt;sqlite3_uint64&lt;/strong&gt; = ulong;</target>
        </trans-unit>
        <trans-unit id="752e7668cefeb7bde2211b220d103e90184a74c9" translate="yes" xml:space="preserve">
          <source>alias &lt;strong id=&quot;sqrt&quot;&gt;sqrt&lt;/strong&gt; = &lt;strong id=&quot;sqrt&quot;&gt;sqrt&lt;/strong&gt;;</source>
          <target state="translated">alias &lt;strong id=&quot;sqrt&quot;&gt;sqrt&lt;/strong&gt; = &lt;strong id=&quot;sqrt&quot;&gt;sqrt&lt;/strong&gt; ;</target>
        </trans-unit>
        <trans-unit id="f4df7b9ce4698fbf5d552a5243435d018aa3627b" translate="yes" xml:space="preserve">
          <source>alias &lt;strong id=&quot;sqrt&quot;&gt;sqrt&lt;/strong&gt; = core.stdc.complex.csqrtl;</source>
          <target state="translated">alias &lt;strong id=&quot;sqrt&quot;&gt;sqrt&lt;/strong&gt; = core.stdc.complex.csqrtl;</target>
        </trans-unit>
        <trans-unit id="014cd2b329b7815c65ee386d82e54dd42db2b082" translate="yes" xml:space="preserve">
          <source>alias &lt;strong id=&quot;stableInsert&quot;&gt;stableInsert&lt;/strong&gt; = insert;</source>
          <target state="translated">alias &lt;strong id=&quot;stableInsert&quot;&gt;stableInsert&lt;/strong&gt; = insert;</target>
        </trans-unit>
        <trans-unit id="6a92f5876bc947717fcc4bd6df0d9b781e50b47f" translate="yes" xml:space="preserve">
          <source>alias &lt;strong id=&quot;stableInsert&quot;&gt;stableInsert&lt;/strong&gt; = insertBack;</source>
          <target state="translated">alias &lt;strong id=&quot;stableInsert&quot;&gt;stableInsert&lt;/strong&gt; = insertBack;</target>
        </trans-unit>
        <trans-unit id="35c3360c2f72b3bef324e9cae484581e2078304b" translate="yes" xml:space="preserve">
          <source>alias &lt;strong id=&quot;stableInsertAfter&quot;&gt;stableInsertAfter&lt;/strong&gt; = insertAfter;</source>
          <target state="translated">alias &lt;strong id=&quot;stableInsertAfter&quot;&gt;stableInsertAfter&lt;/strong&gt; = insertAfter;</target>
        </trans-unit>
        <trans-unit id="16f8cbe43c50e68360c1bea8e3c69b9bd48ff5bc" translate="yes" xml:space="preserve">
          <source>alias &lt;strong id=&quot;stableInsertBack&quot;&gt;stableInsertBack&lt;/strong&gt; = insertBack;</source>
          <target state="translated">alias &lt;strong id=&quot;stableInsertBack&quot;&gt;stableInsertBack&lt;/strong&gt; = insertBack;</target>
        </trans-unit>
        <trans-unit id="df1831f5f727b600e57e4edcb8c60d7906afdb73" translate="yes" xml:space="preserve">
          <source>alias &lt;strong id=&quot;stableInsertBefore&quot;&gt;stableInsertBefore&lt;/strong&gt; = insertBefore;</source>
          <target state="translated">alias &lt;strong id=&quot;stableInsertBefore&quot;&gt;stableInsertBefore&lt;/strong&gt; = insertBefore;</target>
        </trans-unit>
        <trans-unit id="0491e42f8ecc727751ec6b7ed51834cb4afe3f1f" translate="yes" xml:space="preserve">
          <source>alias &lt;strong id=&quot;stableInsertFront&quot;&gt;stableInsertFront&lt;/strong&gt; = insertFront;</source>
          <target state="translated">alias &lt;strong id=&quot;stableInsertFront&quot;&gt;stableInsertFront&lt;/strong&gt; = insertFront;</target>
        </trans-unit>
        <trans-unit id="59046fd9b4976ce1d2e94d55b408d38e6846710f" translate="yes" xml:space="preserve">
          <source>alias &lt;strong id=&quot;stableLinearInsert&quot;&gt;stableLinearInsert&lt;/strong&gt; = insertBack;</source>
          <target state="translated">alias &lt;strong id=&quot;stableLinearInsert&quot;&gt;stableLinearInsert&lt;/strong&gt; = insertBack;</target>
        </trans-unit>
        <trans-unit id="bc4c96a11f2c3cbb714c35fbe0615cc879323829" translate="yes" xml:space="preserve">
          <source>alias &lt;strong id=&quot;stableLinearRemove&quot;&gt;stableLinearRemove&lt;/strong&gt; = linearRemove;</source>
          <target state="translated">alias &lt;strong id=&quot;stableLinearRemove&quot;&gt;stableLinearRemove&lt;/strong&gt; = linearRemove;</target>
        </trans-unit>
        <trans-unit id="66bb75c5f43aefc8ca94cd4fdf30be738a5b1862" translate="yes" xml:space="preserve">
          <source>alias &lt;strong id=&quot;stableRemove&quot;&gt;stableRemove&lt;/strong&gt; = remove;</source>
          <target state="translated">alias &lt;strong id=&quot;stableRemove&quot;&gt;stableRemove&lt;/strong&gt; = eliminar;</target>
        </trans-unit>
        <trans-unit id="7e0c264697d6ebee9d3cb79c611dd179ede6ea3d" translate="yes" xml:space="preserve">
          <source>alias &lt;strong id=&quot;stableRemoveAny&quot;&gt;stableRemoveAny&lt;/strong&gt; = removeAny;</source>
          <target state="translated">alias &lt;strong id=&quot;stableRemoveAny&quot;&gt;stableRemoveAny&lt;/strong&gt; = removeAny;</target>
        </trans-unit>
        <trans-unit id="c5662b075cc407ba2b2c435b5fdf858dc9db6df6" translate="yes" xml:space="preserve">
          <source>alias &lt;strong id=&quot;stableRemoveBack&quot;&gt;stableRemoveBack&lt;/strong&gt; = removeBack;</source>
          <target state="translated">alias &lt;strong id=&quot;stableRemoveBack&quot;&gt;stableRemoveBack&lt;/strong&gt; = removeBack;</target>
        </trans-unit>
        <trans-unit id="c9ae6de446551d1ad87237c873afa7924d578cf2" translate="yes" xml:space="preserve">
          <source>alias &lt;strong id=&quot;stableRemoveFront&quot;&gt;stableRemoveFront&lt;/strong&gt; = removeFront;</source>
          <target state="translated">alias &lt;strong id=&quot;stableRemoveFront&quot;&gt;stableRemoveFront&lt;/strong&gt; = removeFront;</target>
        </trans-unit>
        <trans-unit id="16c596bf809f68f35c1aad382fddfa7e6fa6c41c" translate="yes" xml:space="preserve">
          <source>alias &lt;strong id=&quot;stableReplace&quot;&gt;stableReplace&lt;/strong&gt; = replace;</source>
          <target state="translated">alias &lt;strong id=&quot;stableReplace&quot;&gt;stableReplace&lt;/strong&gt; = replace;</target>
        </trans-unit>
        <trans-unit id="78acd3c58a80293d1458d68a0eac7a0660fa13e7" translate="yes" xml:space="preserve">
          <source>alias &lt;strong id=&quot;stderr&quot;&gt;stderr&lt;/strong&gt; = makeGlobal!&quot;core.stdc.stdio.&lt;strong id=&quot;stderr&quot;&gt;stderr&lt;/strong&gt;&quot;.makeGlobal;</source>
          <target state="translated">alias &lt;strong id=&quot;stderr&quot;&gt;stderr&lt;/strong&gt; = makeGlobal! &quot;core.stdc.stdio. &lt;strong id=&quot;stderr&quot;&gt;stderr&lt;/strong&gt; &quot; .makeGlobal;</target>
        </trans-unit>
        <trans-unit id="46167ca3ab8220bf493c445689dd829463f25cc0" translate="yes" xml:space="preserve">
          <source>alias &lt;strong id=&quot;stdin&quot;&gt;stdin&lt;/strong&gt; = makeGlobal!&quot;core.stdc.stdio.&lt;strong id=&quot;stdin&quot;&gt;stdin&lt;/strong&gt;&quot;.makeGlobal;</source>
          <target state="translated">alias &lt;strong id=&quot;stdin&quot;&gt;stdin&lt;/strong&gt; = makeGlobal! &quot;core.stdc.stdio. &lt;strong id=&quot;stdin&quot;&gt;stdin&lt;/strong&gt; &quot; .makeGlobal;</target>
        </trans-unit>
        <trans-unit id="9db77563cd48a6e0f7d6cea32f96926a5cdfc9d5" translate="yes" xml:space="preserve">
          <source>alias &lt;strong id=&quot;stdout&quot;&gt;stdout&lt;/strong&gt; = makeGlobal!&quot;core.stdc.stdio.&lt;strong id=&quot;stdout&quot;&gt;stdout&lt;/strong&gt;&quot;.makeGlobal;</source>
          <target state="translated">alias &lt;strong id=&quot;stdout&quot;&gt;stdout&lt;/strong&gt; = makeGlobal! &quot;core.stdc.stdio. &lt;strong id=&quot;stdout&quot;&gt;stdout&lt;/strong&gt; &quot; .makeGlobal;</target>
        </trans-unit>
        <trans-unit id="0246bbec262c188e5fa11e92a2a30a1572ab5bf0" translate="yes" xml:space="preserve">
          <source>alias &lt;strong id=&quot;string_view&quot;&gt;string_view&lt;/strong&gt; = basic_string_view!(char, char_traits!char).basic_string_view;</source>
          <target state="translated">alias &lt;strong id=&quot;string_view&quot;&gt;string_view&lt;/strong&gt; = basic_string_view! (char, char_traits! char) .basic_string_view;</target>
        </trans-unit>
        <trans-unit id="02dd7637e030fd85163a53526fce72078927bfa6" translate="yes" xml:space="preserve">
          <source>alias &lt;strong id=&quot;struct_flags_t&quot;&gt;struct_flags_t&lt;/strong&gt; = uint;</source>
          <target state="translated">alias &lt;strong id=&quot;struct_flags_t&quot;&gt;struct_flags_t&lt;/strong&gt; = uint;</target>
        </trans-unit>
        <trans-unit id="0cf028bf12933ac1d872864b466b6bb6cd387be3" translate="yes" xml:space="preserve">
          <source>alias &lt;strong id=&quot;tan&quot;&gt;tan&lt;/strong&gt; = &lt;strong id=&quot;tan&quot;&gt;tan&lt;/strong&gt;;</source>
          <target state="translated">alias &lt;strong id=&quot;tan&quot;&gt;tan&lt;/strong&gt; = &lt;strong id=&quot;tan&quot;&gt;tan&lt;/strong&gt; ;</target>
        </trans-unit>
        <trans-unit id="a6081667339590e12fb7be99c9991ca8dda873bb" translate="yes" xml:space="preserve">
          <source>alias &lt;strong id=&quot;tan&quot;&gt;tan&lt;/strong&gt; = core.stdc.complex.ctanl;</source>
          <target state="translated">alias &lt;strong id=&quot;tan&quot;&gt;tan&lt;/strong&gt; = core.stdc.complex.ctanl;</target>
        </trans-unit>
        <trans-unit id="7d5f6fffab995892df6f7d0c8badcecf837e56be" translate="yes" xml:space="preserve">
          <source>alias &lt;strong id=&quot;tanh&quot;&gt;tanh&lt;/strong&gt; = &lt;strong id=&quot;tanh&quot;&gt;tanh&lt;/strong&gt;;</source>
          <target state="translated">alias &lt;strong id=&quot;tanh&quot;&gt;tanh&lt;/strong&gt; = &lt;strong id=&quot;tanh&quot;&gt;tanh&lt;/strong&gt; ;</target>
        </trans-unit>
        <trans-unit id="b25570a7529af6ea4bcb2ab44adf371785bf39c6" translate="yes" xml:space="preserve">
          <source>alias &lt;strong id=&quot;tanh&quot;&gt;tanh&lt;/strong&gt; = core.stdc.complex.ctanhl;</source>
          <target state="translated">alias &lt;strong id=&quot;tanh&quot;&gt;tanh&lt;/strong&gt; = core.stdc.complex.ctanhl;</target>
        </trans-unit>
        <trans-unit id="40fcfbbfe3f02a66f4ab244c8bcda96fda1510a6" translate="yes" xml:space="preserve">
          <source>alias &lt;strong id=&quot;terminate_handler&quot;&gt;terminate_handler&lt;/strong&gt; = extern (C++) void function() nothrow @nogc;</source>
          <target state="translated">alias &lt;strong id=&quot;terminate_handler&quot;&gt;terminate_handler&lt;/strong&gt; = extern (C ++) void function () nothrow @nogc;</target>
        </trans-unit>
        <trans-unit id="4b96c769a71fda77bf51481c25569ce24714e967" translate="yes" xml:space="preserve">
          <source>alias &lt;strong id=&quot;tgamma&quot;&gt;tgamma&lt;/strong&gt; = &lt;strong id=&quot;tgamma&quot;&gt;tgamma&lt;/strong&gt;;</source>
          <target state="translated">alias &lt;strong id=&quot;tgamma&quot;&gt;tgamma&lt;/strong&gt; = &lt;strong id=&quot;tgamma&quot;&gt;tgamma&lt;/strong&gt; ;</target>
        </trans-unit>
        <trans-unit id="df0e12980f3b03f4285cacbb11ebc9d1b0c4ae93" translate="yes" xml:space="preserve">
          <source>alias &lt;strong id=&quot;tgamma&quot;&gt;tgamma&lt;/strong&gt; = core.stdc.math.tgammal;</source>
          <target state="translated">alias &lt;strong id=&quot;tgamma&quot;&gt;tgamma&lt;/strong&gt; = core.stdc.math.tgammal;</target>
        </trans-unit>
        <trans-unit id="ca9dc6828c4761c180993ea92ca951998765c727" translate="yes" xml:space="preserve">
          <source>alias &lt;strong id=&quot;toString&quot;&gt;toString&lt;/strong&gt; = as_array;</source>
          <target state="translated">alias &lt;strong id=&quot;toString&quot;&gt;toString&lt;/strong&gt; = as_array;</target>
        </trans-unit>
        <trans-unit id="467678c0d906d33a06ea22321d48573c1ff914a2" translate="yes" xml:space="preserve">
          <source>alias &lt;strong id=&quot;totalCPUs&quot;&gt;totalCPUs&lt;/strong&gt; = __lazilyInitializedConstant!(immutable(uint), 4294967295u, totalCPUsImpl).__lazilyInitializedConstant;</source>
          <target state="translated">alias &lt;strong id=&quot;totalCPUs&quot;&gt;totalCPUs&lt;/strong&gt; = __lazilyInitializedConstant! (inmutable (uint), 4294967295u, totalCPUsImpl) .__ lazilyInitializedConstant;</target>
        </trans-unit>
        <trans-unit id="5ea1cb6d3f12b40d0ed6e78d9ddc3a17b3142035" translate="yes" xml:space="preserve">
          <source>alias &lt;strong id=&quot;trace&quot;&gt;trace&lt;/strong&gt; = .Logger.memLogFunctions!cast(LogLevel)cast(ubyte)32u.logImpl(int line = __LINE__, string file = __FILE__, string funcName = __FUNCTION__, string prettyFuncName = __PRETTY_FUNCTION__, string moduleName = __MODULE__, A...)(lazy A args) if (args.length == 0 || args.length &amp;gt; 0 &amp;amp;&amp;amp; !is(A[0] : bool));</source>
          <target state="translated">alias &lt;strong id=&quot;trace&quot;&gt;trace&lt;/strong&gt; = .Logger.memLogFunctions! cast (LogLevel) cast (ubyte) 32u.logImpl (int line = __LINE__, string file = __FILE__, string funcName = __FUNCTION__, string prettyFuncName = __PRETTY_FUNCTION__, string moduleName = __MODULE (args perezosos A) if (args.length == 0 || args.length&amp;gt; 0 &amp;amp;&amp;amp;! is (A [0]: bool));</target>
        </trans-unit>
        <trans-unit id="2813ab4c19ba6e4857553db921fa5ce174bb7008" translate="yes" xml:space="preserve">
          <source>alias &lt;strong id=&quot;trace&quot;&gt;trace&lt;/strong&gt; = defaultLogFunction!cast(LogLevel)cast(ubyte)32u.defaultLogFunction(int line = __LINE__, string file = __FILE__, string funcName = __FUNCTION__, string prettyFuncName = __PRETTY_FUNCTION__, string moduleName = __MODULE__, A...)(lazy A args) if (args.length &amp;gt; 0 &amp;amp;&amp;amp; !is(Unqual!(A[0]) : bool) || args.length == 0);</source>
          <target state="translated">alias &lt;strong id=&quot;trace&quot;&gt;trace&lt;/strong&gt; = defaultLogFunction! cast (LogLevel) cast (ubyte) 32u.defaultLogFunction (int line = __LINE__, string file = __FILE__, string funcName = __FUNCTION__, string prettyFuncName = __PRETTY_FUNCTION__, string moduleName = __MODULE__, A ...) args) if (args.length&amp;gt; 0 &amp;amp;&amp;amp;! is (Unqual! (A [0]): bool) || args.length == 0);</target>
        </trans-unit>
        <trans-unit id="0cf1f6522f521dec9bfa58f900c076393d6cdee4" translate="yes" xml:space="preserve">
          <source>alias &lt;strong id=&quot;tracef&quot;&gt;tracef&lt;/strong&gt; = .Logger.memLogFunctions!cast(LogLevel)cast(ubyte)32u.logImplf(int line = __LINE__, string file = __FILE__, string funcName = __FUNCTION__, string prettyFuncName = __PRETTY_FUNCTION__, string moduleName = __MODULE__, A...)(lazy bool condition, lazy string msg, lazy A args);</source>
          <target state="translated">alias &lt;strong id=&quot;tracef&quot;&gt;tracef&lt;/strong&gt; = .Logger.memLogFunctions! cast (LogLevel) cast (ubyte) 32u.logImplf (int line = __LINE__, string file = __FILE__, string funcName = __FUNCTION__, string prettyFuncName = __PRETTY_FUNCTION__, string moduleName = __MODULELELE = __MODULELELE = __MOD (condici&amp;oacute;n de bool diferido, msj de cadena diferida, argumentos A diferidos);</target>
        </trans-unit>
        <trans-unit id="60e18a3034ef19a689a1ef5e67488a34db5c5b71" translate="yes" xml:space="preserve">
          <source>alias &lt;strong id=&quot;tracef&quot;&gt;tracef&lt;/strong&gt; = defaultLogFunctionf!cast(LogLevel)cast(ubyte)32u.defaultLogFunctionf(int line = __LINE__, string file = __FILE__, string funcName = __FUNCTION__, string prettyFuncName = __PRETTY_FUNCTION__, string moduleName = __MODULE__, A...)(lazy string msg, lazy A args);</source>
          <target state="translated">alias &lt;strong id=&quot;tracef&quot;&gt;tracef&lt;/strong&gt; = defaultLogFunctionf! cast (LogLevel) cast (ubyte) 32u.defaultLogFunctionf (int line = __LINE__, string file = __FILE__, string funcName = __FUNCTION__, string prettyFuncName = __PRETTY_FUNCTION__, string moduleName = __MODULE__, A__ msg, args perezosos A);</target>
        </trans-unit>
        <trans-unit id="93f6598e6ae8cbd89a1cd1d8914c4a8a17abf1d5" translate="yes" xml:space="preserve">
          <source>alias &lt;strong id=&quot;traits_type&quot;&gt;traits_type&lt;/strong&gt; = Traits;</source>
          <target state="translated">alias &lt;strong id=&quot;traits_type&quot;&gt;traits_type&lt;/strong&gt; = Rasgos;</target>
        </trans-unit>
        <trans-unit id="449debe5293b06ebc9c6f3e2ad86583a88ac4a63" translate="yes" xml:space="preserve">
          <source>alias &lt;strong id=&quot;trunc&quot;&gt;trunc&lt;/strong&gt; = &lt;strong id=&quot;trunc&quot;&gt;trunc&lt;/strong&gt;;</source>
          <target state="translated">alias &lt;strong id=&quot;trunc&quot;&gt;trunc&lt;/strong&gt; = &lt;strong id=&quot;trunc&quot;&gt;trunc&lt;/strong&gt; ;</target>
        </trans-unit>
        <trans-unit id="31974cdc0e6a369eadf38e2ea7f42e8bb5cdf14f" translate="yes" xml:space="preserve">
          <source>alias &lt;strong id=&quot;trunc&quot;&gt;trunc&lt;/strong&gt; = core.stdc.math.truncl;</source>
          <target state="translated">alias &lt;strong id=&quot;trunc&quot;&gt;trunc&lt;/strong&gt; = core.stdc.math.truncl;</target>
        </trans-unit>
        <trans-unit id="fa7ef48abf0d941500926880fcd547c01640bc03" translate="yes" xml:space="preserve">
          <source>alias &lt;strong id=&quot;type_flags_t&quot;&gt;type_flags_t&lt;/strong&gt; = ushort;</source>
          <target state="translated">alias &lt;strong id=&quot;type_flags_t&quot;&gt;type_flags_t&lt;/strong&gt; = ushort;</target>
        </trans-unit>
        <trans-unit id="cfd9fa566e94e87281efefec57603031005e582e" translate="yes" xml:space="preserve">
          <source>alias &lt;strong id=&quot;u16string_view&quot;&gt;u16string_view&lt;/strong&gt; = basic_string_view!(wchar, char_traits!wchar).basic_string_view;</source>
          <target state="translated">alias &lt;strong id=&quot;u16string_view&quot;&gt;u16string_view&lt;/strong&gt; = basic_string_view! (wchar, char_traits! wchar) .basic_string_view;</target>
        </trans-unit>
        <trans-unit id="3d07ad34a35a2e0599c72b79c8fabcd787506bbc" translate="yes" xml:space="preserve">
          <source>alias &lt;strong id=&quot;u32string_view&quot;&gt;u32string_view&lt;/strong&gt; = basic_string_view!(dchar, char_traits!dchar).basic_string_view;</source>
          <target state="translated">alias &lt;strong id=&quot;u32string_view&quot;&gt;u32string_view&lt;/strong&gt; = basic_string_view! (dchar, char_traits! dchar) .basic_string_view;</target>
        </trans-unit>
        <trans-unit id="d1d595e0407be0334471897ed01b921932f4464d" translate="yes" xml:space="preserve">
          <source>alias &lt;strong id=&quot;ubyte16&quot;&gt;ubyte16&lt;/strong&gt; = __vector(ubyte[16]);</source>
          <target state="translated">alias &lt;strong id=&quot;ubyte16&quot;&gt;ubyte16&lt;/strong&gt; = __vector (ubyte [16]);</target>
        </trans-unit>
        <trans-unit id="4e5ac5029dffeeec4570a3a8e1484276907bd375" translate="yes" xml:space="preserve">
          <source>alias &lt;strong id=&quot;uint16_t&quot;&gt;uint16_t&lt;/strong&gt; = ushort;</source>
          <target state="translated">alias &lt;strong id=&quot;uint16_t&quot;&gt;uint16_t&lt;/strong&gt; = ushort;</target>
        </trans-unit>
        <trans-unit id="644a4f37bb024b20c9f6a50109e46effd65315d6" translate="yes" xml:space="preserve">
          <source>alias &lt;strong id=&quot;uint32_t&quot;&gt;uint32_t&lt;/strong&gt; = uint;</source>
          <target state="translated">alias &lt;strong id=&quot;uint32_t&quot;&gt;uint32_t&lt;/strong&gt; = uint;</target>
        </trans-unit>
        <trans-unit id="3d8475a318aa2fd25e9357487bc5080d2a830013" translate="yes" xml:space="preserve">
          <source>alias &lt;strong id=&quot;uint4&quot;&gt;uint4&lt;/strong&gt; = __vector(uint[4]);</source>
          <target state="translated">alias &lt;strong id=&quot;uint4&quot;&gt;uint4&lt;/strong&gt; = __vector (uint [4]);</target>
        </trans-unit>
        <trans-unit id="f3b330ed02a4b8ffc00f972caf0e35288ef5da4a" translate="yes" xml:space="preserve">
          <source>alias &lt;strong id=&quot;uint64_t&quot;&gt;uint64_t&lt;/strong&gt; = ulong;</source>
          <target state="translated">alias &lt;strong id=&quot;uint64_t&quot;&gt;uint64_t&lt;/strong&gt; = ulong;</target>
        </trans-unit>
        <trans-unit id="4a7cbdd027389225a277486d2354c546b9654d2b" translate="yes" xml:space="preserve">
          <source>alias &lt;strong id=&quot;uint8_t&quot;&gt;uint8_t&lt;/strong&gt; = ubyte;</source>
          <target state="translated">alias &lt;strong id=&quot;uint8_t&quot;&gt;uint8_t&lt;/strong&gt; = ubyte;</target>
        </trans-unit>
        <trans-unit id="0f9dfc4acdfefc4c1ce725816f8fa1c8238e4732" translate="yes" xml:space="preserve">
          <source>alias &lt;strong id=&quot;uint_fast16_t&quot;&gt;uint_fast16_t&lt;/strong&gt; = ulong;</source>
          <target state="translated">alias &lt;strong id=&quot;uint_fast16_t&quot;&gt;uint_fast16_t&lt;/strong&gt; = ulong;</target>
        </trans-unit>
        <trans-unit id="dbc4adf020b10cdcfd4a36004a24dccdac48c9a9" translate="yes" xml:space="preserve">
          <source>alias &lt;strong id=&quot;uint_fast32_t&quot;&gt;uint_fast32_t&lt;/strong&gt; = ulong;</source>
          <target state="translated">alias &lt;strong id=&quot;uint_fast32_t&quot;&gt;uint_fast32_t&lt;/strong&gt; = ulong;</target>
        </trans-unit>
        <trans-unit id="6c08f782cdc1de4614a65b27c57da2697f71e2f2" translate="yes" xml:space="preserve">
          <source>alias &lt;strong id=&quot;uint_fast64_t&quot;&gt;uint_fast64_t&lt;/strong&gt; = ulong;</source>
          <target state="translated">alias &lt;strong id=&quot;uint_fast64_t&quot;&gt;uint_fast64_t&lt;/strong&gt; = ulong;</target>
        </trans-unit>
        <trans-unit id="3d126b49f6abec357c453551d91cb8dfbd9d5cdb" translate="yes" xml:space="preserve">
          <source>alias &lt;strong id=&quot;uint_fast8_t&quot;&gt;uint_fast8_t&lt;/strong&gt; = ubyte;</source>
          <target state="translated">alias &lt;strong id=&quot;uint_fast8_t&quot;&gt;uint_fast8_t&lt;/strong&gt; = ubyte;</target>
        </trans-unit>
        <trans-unit id="73ac66deec356eb31187a02fea4cfa9afedc353d" translate="yes" xml:space="preserve">
          <source>alias &lt;strong id=&quot;uint_least16_t&quot;&gt;uint_least16_t&lt;/strong&gt; = ushort;</source>
          <target state="translated">alias &lt;strong id=&quot;uint_least16_t&quot;&gt;uint_least16_t&lt;/strong&gt; = ushort;</target>
        </trans-unit>
        <trans-unit id="d7057926206654ae2f908de72a64a7d97ccd823c" translate="yes" xml:space="preserve">
          <source>alias &lt;strong id=&quot;uint_least32_t&quot;&gt;uint_least32_t&lt;/strong&gt; = uint;</source>
          <target state="translated">alias &lt;strong id=&quot;uint_least32_t&quot;&gt;uint_least32_t&lt;/strong&gt; = uint;</target>
        </trans-unit>
        <trans-unit id="6518a7850df1b21b1a735ff2d24f250f62cec82d" translate="yes" xml:space="preserve">
          <source>alias &lt;strong id=&quot;uint_least64_t&quot;&gt;uint_least64_t&lt;/strong&gt; = ulong;</source>
          <target state="translated">alias &lt;strong id=&quot;uint_least64_t&quot;&gt;uint_least64_t&lt;/strong&gt; = ulong;</target>
        </trans-unit>
        <trans-unit id="2d070eba255dda9cd6a5090ff0b8907c7e6edfbe" translate="yes" xml:space="preserve">
          <source>alias &lt;strong id=&quot;uint_least8_t&quot;&gt;uint_least8_t&lt;/strong&gt; = ubyte;</source>
          <target state="translated">alias &lt;strong id=&quot;uint_least8_t&quot;&gt;uint_least8_t&lt;/strong&gt; = ubyte;</target>
        </trans-unit>
        <trans-unit id="dffc85740eb66103a9a6b8b595ed2c7411fedc27" translate="yes" xml:space="preserve">
          <source>alias &lt;strong id=&quot;uintmax_t&quot;&gt;uintmax_t&lt;/strong&gt; = ulong;</source>
          <target state="translated">alias &lt;strong id=&quot;uintmax_t&quot;&gt;uintmax_t&lt;/strong&gt; = ulong;</target>
        </trans-unit>
        <trans-unit id="5c7f1a44df01f53d74022f1da5a9472ff04b4c22" translate="yes" xml:space="preserve">
          <source>alias &lt;strong id=&quot;uintptr_t&quot;&gt;uintptr_t&lt;/strong&gt; = ulong;</source>
          <target state="translated">alias &lt;strong id=&quot;uintptr_t&quot;&gt;uintptr_t&lt;/strong&gt; = ulong;</target>
        </trans-unit>
        <trans-unit id="f2b5ef4c01da07223d25b3eb74da33dd4465304b" translate="yes" xml:space="preserve">
          <source>alias &lt;strong id=&quot;ulong2&quot;&gt;ulong2&lt;/strong&gt; = __vector(ulong[2]);</source>
          <target state="translated">alias &lt;strong id=&quot;ulong2&quot;&gt;ulong2&lt;/strong&gt; = __vector (ulong [2]);</target>
        </trans-unit>
        <trans-unit id="41474ee671416a59b18fb26e4e2c2a5188a2baf2" translate="yes" xml:space="preserve">
          <source>alias &lt;strong id=&quot;unexpected_handler&quot;&gt;unexpected_handler&lt;/strong&gt; = extern (C++) void function() @nogc;</source>
          <target state="translated">alias &lt;strong id=&quot;unexpected_handler&quot;&gt;inesperado_handler&lt;/strong&gt; = extern (C ++) funci&amp;oacute;n vac&amp;iacute;a () @nogc;</target>
        </trans-unit>
        <trans-unit id="e83c5decc1ebbde8b0d5147096fa71fa252f3f9d" translate="yes" xml:space="preserve">
          <source>alias &lt;strong id=&quot;usecs&quot;&gt;usecs&lt;/strong&gt; = dur!&quot;&lt;strong id=&quot;usecs&quot;&gt;usecs&lt;/strong&gt;&quot;.dur;</source>
          <target state="translated">alias &lt;strong id=&quot;usecs&quot;&gt;usecs&lt;/strong&gt; = dur! &quot; &lt;strong id=&quot;usecs&quot;&gt;usecs&lt;/strong&gt; &quot; .dur;</target>
        </trans-unit>
        <trans-unit id="c1680fd8fb778f4eedcf68276b37a90947f9b0db" translate="yes" xml:space="preserve">
          <source>alias &lt;strong id=&quot;ushort8&quot;&gt;ushort8&lt;/strong&gt; = __vector(ushort[8]);</source>
          <target state="translated">alias &lt;strong id=&quot;ushort8&quot;&gt;ushort8&lt;/strong&gt; = __vector (ushort [8]);</target>
        </trans-unit>
        <trans-unit id="c6d1357235d55616a86404c29050125ace90a2d0" translate="yes" xml:space="preserve">
          <source>alias &lt;strong id=&quot;value_type&quot;&gt;value_type&lt;/strong&gt; = T;</source>
          <target state="translated">alias &lt;strong id=&quot;value_type&quot;&gt;value_type&lt;/strong&gt; = T;</target>
        </trans-unit>
        <trans-unit id="a58a4cd01d4e57128b8d8750ccefcf7cca9fdad7" translate="yes" xml:space="preserve">
          <source>alias &lt;strong id=&quot;void16&quot;&gt;void16&lt;/strong&gt; = __vector(void[16]);</source>
          <target state="translated">alias &lt;strong id=&quot;void16&quot;&gt;void16&lt;/strong&gt; = __vector (void [16]);</target>
        </trans-unit>
        <trans-unit id="1acb73e905157a0b5ad404ed07e3c8ec58b17f15" translate="yes" xml:space="preserve">
          <source>alias &lt;strong id=&quot;warning&quot;&gt;warning&lt;/strong&gt; = .Logger.memLogFunctions!cast(LogLevel)cast(ubyte)96u.logImpl(int line = __LINE__, string file = __FILE__, string funcName = __FUNCTION__, string prettyFuncName = __PRETTY_FUNCTION__, string moduleName = __MODULE__, A...)(lazy A args) if (args.length == 0 || args.length &amp;gt; 0 &amp;amp;&amp;amp; !is(A[0] : bool));</source>
          <target state="translated">alias &lt;strong id=&quot;warning&quot;&gt;warning&lt;/strong&gt; = .Logger.memLogFunctions! cast (LogLevel) cast (ubyte) 96u.logImpl (int line = __LINE__, string file = __FILE__, string funcName = __FUNCTION__, string prettyFuncName = __PRETTY_FUNCTION__, string moduleName = __MODULE (args perezosos A) if (args.length == 0 || args.length&amp;gt; 0 &amp;amp;&amp;amp;! is (A [0]: bool));</target>
        </trans-unit>
        <trans-unit id="929652164d0f9cbc9b4185e5137584b2475a452c" translate="yes" xml:space="preserve">
          <source>alias &lt;strong id=&quot;warning&quot;&gt;warning&lt;/strong&gt; = defaultLogFunction!cast(LogLevel)cast(ubyte)96u.defaultLogFunction(int line = __LINE__, string file = __FILE__, string funcName = __FUNCTION__, string prettyFuncName = __PRETTY_FUNCTION__, string moduleName = __MODULE__, A...)(lazy A args) if (args.length &amp;gt; 0 &amp;amp;&amp;amp; !is(Unqual!(A[0]) : bool) || args.length == 0);</source>
          <target state="translated">alias &lt;strong id=&quot;warning&quot;&gt;warning&lt;/strong&gt; = defaultLogFunction! cast (LogLevel) cast (ubyte) 96u.defaultLogFunction (int line = __LINE__, string file = __FILE__, string funcName = __FUNCTION__, string prettyFuncName = __PRETTY_FUNCTION__, string moduleName = __MODULE__, A ...) args) if (args.length&amp;gt; 0 &amp;amp;&amp;amp;! is (Unqual! (A [0]): bool) || args.length == 0);</target>
        </trans-unit>
        <trans-unit id="d59ea006406d089c983e286ea62fcd75ad2cff75" translate="yes" xml:space="preserve">
          <source>alias &lt;strong id=&quot;warningf&quot;&gt;warningf&lt;/strong&gt; = .Logger.memLogFunctions!cast(LogLevel)cast(ubyte)96u.logImplf(int line = __LINE__, string file = __FILE__, string funcName = __FUNCTION__, string prettyFuncName = __PRETTY_FUNCTION__, string moduleName = __MODULE__, A...)(lazy bool condition, lazy string msg, lazy A args);</source>
          <target state="translated">alias &lt;strong id=&quot;warningf&quot;&gt;warningf&lt;/strong&gt; = .Logger.memLogFunctions! cast (LogLevel) cast (ubyte) 96u.logImplf (int line = __LINE__, string file = __FILE__, string funcName = __FUNCTION__, string prettyFuncName = __PRETTY_FUNCTION__, string moduleName = __MODULELELE = __MOD) (condici&amp;oacute;n de bool diferido, msj de cadena diferida, argumentos A diferidos);</target>
        </trans-unit>
        <trans-unit id="dac2b04b6dbbe8ed5218d66cf59459f4f74d2236" translate="yes" xml:space="preserve">
          <source>alias &lt;strong id=&quot;warningf&quot;&gt;warningf&lt;/strong&gt; = defaultLogFunctionf!cast(LogLevel)cast(ubyte)96u.defaultLogFunctionf(int line = __LINE__, string file = __FILE__, string funcName = __FUNCTION__, string prettyFuncName = __PRETTY_FUNCTION__, string moduleName = __MODULE__, A...)(lazy string msg, lazy A args);</source>
          <target state="translated">alias &lt;strong id=&quot;warningf&quot;&gt;warningf&lt;/strong&gt; = defaultLogFunctionf! cast (LogLevel) cast (ubyte) 96u.defaultLogFunctionf (int line = __LINE__, string file = __FILE__, string funcName = __FUNCTION__, string prettyFuncName = __PRETTY_FUNCTION__, string moduleName = __MODULE__, A__ msg, args perezosos A);</target>
        </trans-unit>
        <trans-unit id="7664df3ac5a55df4ead68e315e0895dfb77daf19" translate="yes" xml:space="preserve">
          <source>alias &lt;strong id=&quot;wchar_t&quot;&gt;wchar_t&lt;/strong&gt; = dchar;</source>
          <target state="translated">alias &lt;strong id=&quot;wchar_t&quot;&gt;wchar_t&lt;/strong&gt; = dchar;</target>
        </trans-unit>
        <trans-unit id="c430cc93f2d5c41d31f1a3ac1796df1e25c46e11" translate="yes" xml:space="preserve">
          <source>alias &lt;strong id=&quot;wctrans_t&quot;&gt;wctrans_t&lt;/strong&gt; = dchar;</source>
          <target state="translated">alias &lt;strong id=&quot;wctrans_t&quot;&gt;wctrans_t&lt;/strong&gt; = dchar;</target>
        </trans-unit>
        <trans-unit id="2444f83833ec2ffef8f54ed6e0b38ea5eab32f50" translate="yes" xml:space="preserve">
          <source>alias &lt;strong id=&quot;wctype_t&quot;&gt;wctype_t&lt;/strong&gt; = dchar;</source>
          <target state="translated">alias &lt;strong id=&quot;wctype_t&quot;&gt;wctype_t&lt;/strong&gt; = dchar;</target>
        </trans-unit>
        <trans-unit id="97911683028d4c9309e8f004e2423da38c00e52c" translate="yes" xml:space="preserve">
          <source>alias &lt;strong id=&quot;weeks&quot;&gt;weeks&lt;/strong&gt; = dur!&quot;&lt;strong id=&quot;weeks&quot;&gt;weeks&lt;/strong&gt;&quot;.dur;</source>
          <target state="translated">alias &lt;strong id=&quot;weeks&quot;&gt;semanas&lt;/strong&gt; = dur! &quot; &lt;strong id=&quot;weeks&quot;&gt;semanas&lt;/strong&gt; &quot; .dur;</target>
        </trans-unit>
        <trans-unit id="5edeca501edeb121e8a36ebb6d1d02e3d372938c" translate="yes" xml:space="preserve">
          <source>alias &lt;strong id=&quot;wint_t&quot;&gt;wint_t&lt;/strong&gt; = dchar;</source>
          <target state="translated">alias &lt;strong id=&quot;wint_t&quot;&gt;wint_t&lt;/strong&gt; = dchar;</target>
        </trans-unit>
        <trans-unit id="aec6af94df930d4ca098c1d008a375f628def63c" translate="yes" xml:space="preserve">
          <source>alias &lt;strong id=&quot;wstring_view&quot;&gt;wstring_view&lt;/strong&gt; = basic_string_view!(dchar, char_traits!dchar).basic_string_view;</source>
          <target state="translated">alias &lt;strong id=&quot;wstring_view&quot;&gt;wstring_view&lt;/strong&gt; = basic_string_view! (dchar, char_traits! dchar) .basic_string_view;</target>
        </trans-unit>
        <trans-unit id="b0ce1ed29cdbcb55625b29de383825790f76d37e" translate="yes" xml:space="preserve">
          <source>alias &lt;strong id=&quot;xDlSymReturn&quot;&gt;xDlSymReturn&lt;/strong&gt; = extern (C) void* function() nothrow;</source>
          <target state="translated">alias &lt;strong id=&quot;xDlSymReturn&quot;&gt;xDlSymReturn&lt;/strong&gt; = extern (C) void * function () nothrow;</target>
        </trans-unit>
        <trans-unit id="ff306674a5cb03bc36e091a4ec34ca74c53fbdc8" translate="yes" xml:space="preserve">
          <source>alias for &lt;code&gt;MonoTimeImpl&lt;/code&gt; instantiated with &lt;code&gt;ClockType.normal&lt;/code&gt;. This is what most programs should use. It's also what much of &lt;code&gt;MonoTimeImpl&lt;/code&gt; uses in its documentation (particularly in the examples), because that's what's going to be used in most code.</source>
          <target state="translated">alias para &lt;code&gt;MonoTimeImpl&lt;/code&gt; instanciado con &lt;code&gt;ClockType.normal&lt;/code&gt; . Esto es lo que la mayor&amp;iacute;a de los programas deber&amp;iacute;an usar. Tambi&amp;eacute;n es lo que gran parte de &lt;code&gt;MonoTimeImpl&lt;/code&gt; usa en su documentaci&amp;oacute;n (particularmente en los ejemplos), porque eso es lo que se usar&amp;aacute; en la mayor&amp;iacute;a del c&amp;oacute;digo.</target>
        </trans-unit>
        <trans-unit id="ba9b8752761031543f3f66dc0a65757b18cfda71" translate="yes" xml:space="preserve">
          <source>alias ident this;</source>
          <target state="translated">alias identificó esto;</target>
        </trans-unit>
        <trans-unit id="b61976aa899506dc6b5501dfb5db4e271b7201e9" translate="yes" xml:space="preserve">
          <source>alias sequences</source>
          <target state="translated">secuencias de alias</target>
        </trans-unit>
        <trans-unit id="1b3e258c2a02c5b8b0dabfb07df394d30ea8e5b1" translate="yes" xml:space="preserve">
          <source>aliases of callable objects (e.g. function names). Each callable object should take no arguments.</source>
          <target state="translated">alias de objetos llamables (por ejemplo,nombres de funciones).Cada objeto llamable no debe recibir argumentos.</target>
        </trans-unit>
        <trans-unit id="327eb94bc44a3b23a737f473b55ccbba39e41472" translate="yes" xml:space="preserve">
          <source>aliases of callable objects (e.g. function names). Each should take no arguments.</source>
          <target state="translated">alias de objetos llamables (por ejemplo,nombres de funciones).Cada uno de ellos no debe tener argumentos.</target>
        </trans-unit>
        <trans-unit id="81d03e821783c837dca6907f188dee6df4a24577" translate="yes" xml:space="preserve">
          <source>aliasthis.d</source>
          <target state="translated">aliasthis.d</target>
        </trans-unit>
        <trans-unit id="ae21c64a87f6bb0b8e16e55c48be4cc638d7bd3f" translate="yes" xml:space="preserve">
          <source>align</source>
          <target state="translated">align</target>
        </trans-unit>
        <trans-unit id="dbba069f9908209d83de498353b582f0d64e0a70" translate="yes" xml:space="preserve">
          <source>align &lt;i&gt;IntegerExpression&lt;/i&gt;</source>
          <target state="translated">alinear &lt;i&gt;IntegerExpression&lt;/i&gt;</target>
        </trans-unit>
        <trans-unit id="75feca4ee73e30dba89fe356f82c0b34f798d712" translate="yes" xml:space="preserve">
          <source>alignment for reals</source>
          <target state="translated">alineación para los reales</target>
        </trans-unit>
        <trans-unit id="beb5345d950ac7416fb8b36f6c041019dd2175b7" translate="yes" xml:space="preserve">
          <source>alignment for the allocated block</source>
          <target state="translated">la alineación para el bloque asignado</target>
        </trans-unit>
        <trans-unit id="18944139880436d11764fd9439a6cda3a3af2968" translate="yes" xml:space="preserve">
          <source>alignment in bytes</source>
          <target state="translated">alineación en bytes</target>
        </trans-unit>
        <trans-unit id="9bc10ba30edd7557b6a44121e81ae69674cbe179" translate="yes" xml:space="preserve">
          <source>alignment of each block</source>
          <target state="translated">la alineación de cada bloque</target>
        </trans-unit>
        <trans-unit id="0297341ec7d8b99c514528c6d651d622bd6682ae" translate="yes" xml:space="preserve">
          <source>alignment of each block and at the same time length of each node</source>
          <target state="translated">la alineación de cada bloque y al mismo tiempo la longitud de cada nodo</target>
        </trans-unit>
        <trans-unit id="767d8fc689e745fe48e8ff7807a058eb955fd722" translate="yes" xml:space="preserve">
          <source>alignment requirement of field</source>
          <target state="translated">requisito de alineación de campo</target>
        </trans-unit>
        <trans-unit id="cedafd41613bc0f2d1b74b435e8d7220d6c62040" translate="yes" xml:space="preserve">
          <source>alignment size</source>
          <target state="translated">tamaño de la alineación</target>
        </trans-unit>
        <trans-unit id="d87c448044defb778f33158d8ccf94a20531d600" translate="yes" xml:space="preserve">
          <source>all</source>
          <target state="translated">all</target>
        </trans-unit>
        <trans-unit id="359ac6f1503a179be19af61e0194269b1aa25840" translate="yes" xml:space="preserve">
          <source>all fine types set</source>
          <target state="translated">todos los tipos finos establecidos</target>
        </trans-unit>
        <trans-unit id="b69cf16dd38189c3407ddd9f02bd89ac9f00088d" translate="yes" xml:space="preserve">
          <source>all is fine</source>
          <target state="translated">todo está bien</target>
        </trans-unit>
        <trans-unit id="72c73476fdbfefaf462a735afa8d65227ef0a081" translate="yes" xml:space="preserve">
          <source>all types supported by the server</source>
          <target state="translated">todos los tipos soportados por el servidor</target>
        </trans-unit>
        <trans-unit id="a7dfd48867f56c824350b8884ffa06080f90feed" translate="yes" xml:space="preserve">
          <source>allMembers</source>
          <target state="translated">allMembers</target>
        </trans-unit>
        <trans-unit id="28b4a4a3eff354ff7bc737025f0b3c4bc325dd9b" translate="yes" xml:space="preserve">
          <source>allocate an array memory block by applying the proper padding and assigning block attributes if not inherited from the existing block</source>
          <target state="translated">asignar un bloque de memoria de matriz aplicando el relleno adecuado y asignando atributos de bloque si no se heredan del bloque existente</target>
        </trans-unit>
        <trans-unit id="0f675d06af9154d959c7218f667a0b296500968e" translate="yes" xml:space="preserve">
          <source>allocate_gc</source>
          <target state="translated">allocate_gc</target>
        </trans-unit>
        <trans-unit id="14b06c346776690c59421d64b7198cb3dcc1a2c3" translate="yes" xml:space="preserve">
          <source>allocated and initalized ExceptionHeader</source>
          <target state="translated">asignada e inicializada de la Cabeza de la Excepción</target>
        </trans-unit>
        <trans-unit id="977dc0184beded442878d9080d11127a75f2024d" translate="yes" xml:space="preserve">
          <source>allocated and initialized array</source>
          <target state="translated">conjunto asignado e inicializado</target>
        </trans-unit>
        <trans-unit id="79c61507fbac5c3a71e5f07c72580ae0f5616bee" translate="yes" xml:space="preserve">
          <source>allocator from which the &lt;code&gt;BitmappedBlock&lt;/code&gt; will draw memory. If set to &lt;code&gt;NullAllocator&lt;/code&gt;, the storage must be passed via the constructor</source>
          <target state="translated">asignador desde el cual &lt;code&gt;BitmappedBlock&lt;/code&gt; extraer&amp;aacute; memoria. Si se establece en &lt;code&gt;NullAllocator&lt;/code&gt; , el almacenamiento debe pasarse a trav&amp;eacute;s del constructor</target>
        </trans-unit>
        <trans-unit id="c619275aaf11edd90e7fd91201cc5a2f0549825b" translate="yes" xml:space="preserve">
          <source>allowDuplicates</source>
          <target state="translated">allowDuplicates</target>
        </trans-unit>
        <trans-unit id="bccee1ea75662d270cb2751a6841e1a518732f13" translate="yes" xml:space="preserve">
          <source>allowed SSH authentication methods</source>
          <target state="translated">métodos de autentificación de SSH permitidos</target>
        </trans-unit>
        <trans-unit id="01d6c546f73bceaf3ba90a22be64f4ffd1bde4e7" translate="yes" xml:space="preserve">
          <source>allowed, but deprecated</source>
          <target state="translated">permitido,pero desaprobado</target>
        </trans-unit>
        <trans-unit id="cb9d1dd562d3ef043be090f1d55bffdaadb5e3be" translate="yes" xml:space="preserve">
          <source>also contains a pointer that points to the original exception (the head of the chain) if a bypass occurred, so that the entire exception history is retained.</source>
          <target state="translated">también contiene un puntero que señala la excepción original (la cabeza de la cadena)si se produjo una desviación,de modo que se conserva todo el historial de excepciones.</target>
        </trans-unit>
        <trans-unit id="de73eac0c305038f0437bc6a1f994a5a4379ed28" translate="yes" xml:space="preserve">
          <source>an</source>
          <target state="translated">an</target>
        </trans-unit>
        <trans-unit id="a5b9c4b8f0d190071295f4419da68c9d46bc6dd7" translate="yes" xml:space="preserve">
          <source>an &lt;a href=&quot;std_range_primitives#isInputRange&quot;&gt;input range&lt;/a&gt;</source>
          <target state="translated">un &lt;a href=&quot;std_range_primitives#isInputRange&quot;&gt;rango de entrada&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="4cde7f1b19c4c6af09373863a1d48bd82cbece35" translate="yes" xml:space="preserve">
          <source>an &lt;a href=&quot;std_range_primitives#isInputRange&quot;&gt;input range&lt;/a&gt; of characters</source>
          <target state="translated">un &lt;a href=&quot;std_range_primitives#isInputRange&quot;&gt;rango&lt;/a&gt; de entrada de caracteres</target>
        </trans-unit>
        <trans-unit id="db19374359fa9bdb75aa3ca6c3530de2c50e9a49" translate="yes" xml:space="preserve">
          <source>an &lt;a href=&quot;std_range_primitives#isInputRange&quot;&gt;input range&lt;/a&gt; of characters (including strings) or a type that implicitly converts to a string type.</source>
          <target state="translated">un &lt;a href=&quot;std_range_primitives#isInputRange&quot;&gt;rango&lt;/a&gt; de entrada de caracteres (incluidas las cadenas) o un tipo que se convierte impl&amp;iacute;citamente en un tipo de cadena.</target>
        </trans-unit>
        <trans-unit id="d0a16ab21551bff2921ae22ffa6454bc804f804d" translate="yes" xml:space="preserve">
          <source>an &lt;a href=&quot;std_range_primitives#isInputRange&quot;&gt;input range&lt;/a&gt; or a dynamic array</source>
          <target state="translated">un &lt;a href=&quot;std_range_primitives#isInputRange&quot;&gt;rango de entrada&lt;/a&gt; o una matriz din&amp;aacute;mica</target>
        </trans-unit>
        <trans-unit id="952011341766eb23bab9b22a0039a50840098282" translate="yes" xml:space="preserve">
          <source>an &lt;a href=&quot;std_range_primitives#isInputRange&quot;&gt;input range&lt;/a&gt; to iterate over up to &lt;code&gt;n&lt;/code&gt; times</source>
          <target state="translated">un &lt;a href=&quot;std_range_primitives#isInputRange&quot;&gt;rango de entrada&lt;/a&gt; para iterar hasta &lt;code&gt;n&lt;/code&gt; veces</target>
        </trans-unit>
        <trans-unit id="1c3965869560363069473e3f5f03e3d3285f56a1" translate="yes" xml:space="preserve">
          <source>an &lt;a href=&quot;std_range_primitives#isInputRange&quot;&gt;input range&lt;/a&gt; with a length</source>
          <target state="translated">un &lt;a href=&quot;std_range_primitives#isInputRange&quot;&gt;rango de entrada&lt;/a&gt; con una longitud</target>
        </trans-unit>
        <trans-unit id="6ed6e0534f431e7579844e1889aa5d6b0bdf42dc" translate="yes" xml:space="preserve">
          <source>an &lt;a href=&quot;std_range_primitives#isInputRange&quot;&gt;input range&lt;/a&gt; with a length, or a forward range</source>
          <target state="translated">un &lt;a href=&quot;std_range_primitives#isInputRange&quot;&gt;rango de entrada&lt;/a&gt; con una longitud o un rango directo</target>
        </trans-unit>
        <trans-unit id="8a342b93b189998db352ad25a98b4e3c6eabf10c" translate="yes" xml:space="preserve">
          <source>an &lt;a href=&quot;std_range_primitives#isInputRange&quot;&gt;input range&lt;/a&gt; with swappable elements</source>
          <target state="translated">un &lt;a href=&quot;std_range_primitives#isInputRange&quot;&gt;rango de entrada&lt;/a&gt; con elementos intercambiables</target>
        </trans-unit>
        <trans-unit id="4111ffccbb35afe61882c80d561324509f6834c2" translate="yes" xml:space="preserve">
          <source>an &lt;a href=&quot;std_range_primitives#isOutputRange&quot;&gt;output range&lt;/a&gt;</source>
          <target state="translated">un &lt;a href=&quot;std_range_primitives#isOutputRange&quot;&gt;rango de salida&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="0fac80dd348d3cff936141d82f4ed7854d93fae0" translate="yes" xml:space="preserve">
          <source>an &lt;code&gt;InputRange&lt;/code&gt; with &lt;code&gt;ElementType&lt;/code&gt;&lt;code&gt;ubyte&lt;/code&gt;, &lt;code&gt;ubyte[]&lt;/code&gt; or &lt;code&gt;ubyte[num]&lt;/code&gt;</source>
          <target state="translated">un &lt;code&gt;InputRange&lt;/code&gt; con &lt;code&gt;ElementType&lt;/code&gt; &lt;code&gt;ubyte&lt;/code&gt; , &lt;code&gt;ubyte[]&lt;/code&gt; o &lt;code&gt;ubyte[num]&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="66f214f1f3bd2858e923a4fe34e5e857063dbf91" translate="yes" xml:space="preserve">
          <source>an &lt;code&gt;inputRange&lt;/code&gt; where each element represents another call to fun.</source>
          <target state="translated">Un &lt;code&gt;inputRange&lt;/code&gt; donde cada elemento representa otra llamada a la diversi&amp;oacute;n.</target>
        </trans-unit>
        <trans-unit id="b0c646a96e9d058e994e95b8a04795207964f05c" translate="yes" xml:space="preserve">
          <source>an IPv4 address string in the dotted-decimal form a.b.c.d, or a host name which will be resolved using an &lt;code&gt;InternetHost&lt;/code&gt; object.</source>
          <target state="translated">una cadena de direcci&amp;oacute;n IPv4 en forma decimal con puntos abcd, o un nombre de host que se resolver&amp;aacute; utilizando un objeto &lt;code&gt;InternetHost&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="9c58c9762089fb7c387ead768701686444f6bb3a" translate="yes" xml:space="preserve">
          <source>an IPv6 host address string in the form described in RFC 2373, or a host name which will be resolved using &lt;code&gt;getAddressInfo&lt;/code&gt;.</source>
          <target state="translated">una cadena de direcci&amp;oacute;n de host IPv6 en la forma descrita en RFC 2373, o un nombre de host que se resolver&amp;aacute; usando &lt;code&gt;getAddressInfo&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="32a075b97e4dab2e186a2b0e210688a46337a180" translate="yes" xml:space="preserve">
          <source>an InputRange of dchars</source>
          <target state="translated">un InputRange de dchars</target>
        </trans-unit>
        <trans-unit id="1948d2d63c50c1c3c24b4531a87ad28b525060d5" translate="yes" xml:space="preserve">
          <source>an STC.maybescope variable that was assigned to &lt;code&gt;this&lt;/code&gt;</source>
          <target state="translated">una variable STC.maybescope que se asign&amp;oacute; a &lt;code&gt;this&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="30f0e884bc59dfdadb2fb0d2b5a1800db6c66c08" translate="yes" xml:space="preserve">
          <source>an aggregate with a base type &lt;code&gt;T&lt;/code&gt;</source>
          <target state="translated">un agregado con una base tipo &lt;code&gt;T&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="ee5d50fe702376df66f704f144863bf2c11cbca1" translate="yes" xml:space="preserve">
          <source>an array &lt;code&gt;U[]&lt;/code&gt; and &lt;code&gt;U&lt;/code&gt; is not immutable or shared;</source>
          <target state="translated">una matriz &lt;code&gt;U[]&lt;/code&gt; y &lt;code&gt;U&lt;/code&gt; no es inmutable o compartida;</target>
        </trans-unit>
        <trans-unit id="a5c86381df4a2983a32bcb684c5565b03f279f8f" translate="yes" xml:space="preserve">
          <source>an array &lt;code&gt;U[]&lt;/code&gt; and &lt;code&gt;U&lt;/code&gt; is not immutable;</source>
          <target state="translated">una matriz &lt;code&gt;U[]&lt;/code&gt; y &lt;code&gt;U&lt;/code&gt; no es inmutable;</target>
        </trans-unit>
        <trans-unit id="c127b8de7834ebf507ba69adea7abb049c9f4703" translate="yes" xml:space="preserve">
          <source>an array &lt;code&gt;U[]&lt;/code&gt;;</source>
          <target state="translated">una matriz &lt;code&gt;U[]&lt;/code&gt; ;</target>
        </trans-unit>
        <trans-unit id="1694a3244e50c4a0af35c2df22e9405854170137" translate="yes" xml:space="preserve">
          <source>an array means to specify a subarray of it. An array slice does not copy the data, it is only another reference to it. For example:</source>
          <target state="translated">una matriz significa especificar un subconjunto de ella.Un trozo de matriz no copia los datos,es sólo otra referencia a ella.Por ejemplo:</target>
        </trans-unit>
        <trans-unit id="81fd421af6644fd7b6d49ef74b1b0c060e679955" translate="yes" xml:space="preserve">
          <source>an associative array that is not immutable or shared.</source>
          <target state="translated">un conjunto asociativo que no es inmutable ni compartido.</target>
        </trans-unit>
        <trans-unit id="2b3366a35fad14b49d83ad2b03aed34ae662e73c" translate="yes" xml:space="preserve">
          <source>an associative array that is not immutable.</source>
          <target state="translated">un conjunto asociativo que no es inmutable.</target>
        </trans-unit>
        <trans-unit id="751527fa1236df46e8efe910ac9154f671aa239c" translate="yes" xml:space="preserve">
          <source>an associative array.</source>
          <target state="translated">un conjunto asociativo.</target>
        </trans-unit>
        <trans-unit id="3493d852d98d3c7572f15dcf799966bd11f3fcfe" translate="yes" xml:space="preserve">
          <source>an easy handle was not good/valid</source>
          <target state="translated">un manejo fácil no era bueno/válido</target>
        </trans-unit>
        <trans-unit id="23e9f3e62d894f13ee3aa022c5679d56365df72b" translate="yes" xml:space="preserve">
          <source>an enum with a base type &lt;code&gt;T&lt;/code&gt;</source>
          <target state="translated">una enumeraci&amp;oacute;n con una base tipo &lt;code&gt;T&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="8e363619733912cfb7adb0226de83f07521b9359" translate="yes" xml:space="preserve">
          <source>an equivalent &lt;code&gt;ExpInitializer&lt;/code&gt; if successful, or &lt;code&gt;ErrorInitializer&lt;/code&gt; if it cannot be translated</source>
          <target state="translated">un &lt;code&gt;ExpInitializer&lt;/code&gt; equivalente si tiene &amp;eacute;xito, o &lt;code&gt;ErrorInitializer&lt;/code&gt; si no se puede traducir</target>
        </trans-unit>
        <trans-unit id="7a5789c63364541490c4a1c944755042ae43fe37" translate="yes" xml:space="preserve">
          <source>an input range of &lt;code&gt;dchar&lt;/code&gt;s</source>
          <target state="translated">un rango de entrada de &lt;code&gt;dchar&lt;/code&gt; s</target>
        </trans-unit>
        <trans-unit id="b63385ab1281aaff4560ea3471b5d1ee3ecc36c7" translate="yes" xml:space="preserve">
          <source>an integral &lt;a href=&quot;std_range_primitives#isInputRange&quot;&gt;input range&lt;/a&gt; to iterate over</source>
          <target state="translated">un &lt;a href=&quot;std_range_primitives#isInputRange&quot;&gt;rango de entrada&lt;/a&gt; integral para iterar</target>
        </trans-unit>
        <trans-unit id="525a797ba5c36bd586f328912fea5d837c371f08" translate="yes" xml:space="preserve">
          <source>an iterable value as defined by &lt;code&gt;isIterable&lt;/code&gt;</source>
          <target state="translated">un valor iterable definido por &lt;code&gt;isIterable&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="32866051c46625bade0c4b21abecd7547d851a45" translate="yes" xml:space="preserve">
          <source>an optional parameter to change how equality is defined</source>
          <target state="translated">un parámetro opcional para cambiar cómo se define la igualdad</target>
        </trans-unit>
        <trans-unit id="c0b2b4da60091871a78d2fcec0832dd7e129a5ec" translate="yes" xml:space="preserve">
          <source>an optional synchronized attribute</source>
          <target state="translated">un atributo sincronizado opcional</target>
        </trans-unit>
        <trans-unit id="772b97c29d8f0012796941d9db1dc0f51bdf65bb" translate="yes" xml:space="preserve">
          <source>an output range</source>
          <target state="translated">un rango de salida</target>
        </trans-unit>
        <trans-unit id="cffa50a32cb13a240d705317bcec65dd1f31b6ad" translate="yes" xml:space="preserve">
          <source>and</source>
          <target state="translated">and</target>
        </trans-unit>
        <trans-unit id="bb395741883dc0ea399fcd4ae01729526511d5da" translate="yes" xml:space="preserve">
          <source>and --</source>
          <target state="translated">y...</target>
        </trans-unit>
        <trans-unit id="4a0317718949cefc754947bb38c91695d99a2a39" translate="yes" xml:space="preserve">
          <source>and &lt;code&gt;-debug=&lt;/code&gt;</source>
          <target state="translated">y &lt;code&gt;-debug=&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="8bba468ca34fcc9d52c9ea48583b84a246e20dd2" translate="yes" xml:space="preserve">
          <source>and A and B can be imported by a third module, C. Both overload sets, the &lt;code&gt;A.foo&lt;/code&gt; overload set and the &lt;code&gt;B.foo&lt;/code&gt; overload set, are found. An instance of &lt;code&gt;foo&lt;/code&gt; is selected based on it matching in exactly one overload set:</source>
          <target state="translated">y A y B pueden ser importados por un tercer m&amp;oacute;dulo, C. Se encuentran ambos conjuntos de sobrecarga, el &lt;code&gt;A.foo&lt;/code&gt; sobrecarga A.foo y el &lt;code&gt;B.foo&lt;/code&gt; sobrecarga B.foo . Se selecciona una instancia de &lt;code&gt;foo&lt;/code&gt; en funci&amp;oacute;n de que coincida exactamente en un conjunto de sobrecarga:</target>
        </trans-unit>
        <trans-unit id="1412c521f984e9a514f159bf9d85e881d6489b25" translate="yes" xml:space="preserve">
          <source>and can be referred to with or without qualification:</source>
          <target state="translated">y puede ser referido con o sin calificación:</target>
        </trans-unit>
        <trans-unit id="bed4ce24b011a7ec443a63571a090cdada1da059" translate="yes" xml:space="preserve">
          <source>and do not have a name or a visible scope. Their lifetime is managed automatically as defined in this section.</source>
          <target state="translated">y no tienen un nombre o un alcance visible.Su vida útil se gestiona automáticamente como se define en esta sección.</target>
        </trans-unit>
        <trans-unit id="1263063b1ec8bbead29147e5a992b7369005dc86" translate="yes" xml:space="preserve">
          <source>and do not have side effects (i.e. do not write to memory).</source>
          <target state="translated">y no tienen efectos secundarios (es decir,no escriben en la memoria).</target>
        </trans-unit>
        <trans-unit id="231e6854c0a11ed6d6fa1b0a391ecbd3bdfb69d6" translate="yes" xml:space="preserve">
          <source>and does not point to a valid object of type</source>
          <target state="translated">y no apunta a un objeto de tipo válido</target>
        </trans-unit>
        <trans-unit id="e5174c65db5b1b6c523fe93e09e75b2e294cad0e" translate="yes" xml:space="preserve">
          <source>and has a</source>
          <target state="translated">y tiene un</target>
        </trans-unit>
        <trans-unit id="4f4cf8059687fc82d2777cd759038bd78913237e" translate="yes" xml:space="preserve">
          <source>and inserts them into the current context.</source>
          <target state="translated">y los inserta en el contexto actual.</target>
        </trans-unit>
        <trans-unit id="e1c82c7717ff1ed7d028597129f40d8a93764e38" translate="yes" xml:space="preserve">
          <source>and is initialized with the value of the &lt;a href=&quot;expression#Expression&quot;&gt;&lt;i&gt;Expression&lt;/i&gt;&lt;/a&gt;. Its scope extends from when it is initialized to the end of the</source>
          <target state="translated">y se inicializa con el valor de la &lt;a href=&quot;expression#Expression&quot;&gt;&lt;i&gt;Expresi&amp;oacute;n&lt;/i&gt;&lt;/a&gt; . Su alcance se extiende desde cuando se inicializa hasta el final de la</target>
        </trans-unit>
        <trans-unit id="3d4777c014bf5359a8df37b95baf80357993e1e3" translate="yes" xml:space="preserve">
          <source>and is not caught before the original exception is caught, it is chained to the previous exception via the</source>
          <target state="translated">y no es capturado antes de que la excepción original sea capturada,se encadena a la excepción anterior a través de la</target>
        </trans-unit>
        <trans-unit id="1a2d1dcf66801c4b600449657f74f968133772b8" translate="yes" xml:space="preserve">
          <source>and is the same as the the cumulative distribution function.</source>
          <target state="translated">y es la misma que la función de distribución acumulativa.</target>
        </trans-unit>
        <trans-unit id="0be7f9b44dcad89fc2172d5349b8dc5115e8464f" translate="yes" xml:space="preserve">
          <source>and one of</source>
          <target state="translated">y uno de</target>
        </trans-unit>
        <trans-unit id="9f7d35876ea7cc210e4e766dcb538b51734706a5" translate="yes" xml:space="preserve">
          <source>and return the number.</source>
          <target state="translated">y devolver el número.</target>
        </trans-unit>
        <trans-unit id="3872d1bacc5127cb5d6ad2a3e71af61a89219ace" translate="yes" xml:space="preserve">
          <source>and that function is implemented as:</source>
          <target state="translated">y esa función se implementa como:</target>
        </trans-unit>
        <trans-unit id="054e93f9d312e0824ddae26756dbb76098bd9ced" translate="yes" xml:space="preserve">
          <source>and the following where the return type &lt;code&gt;int&lt;/code&gt; and &lt;code&gt;function&lt;/code&gt;/&lt;code&gt;delegate&lt;/code&gt; are inferred:</source>
          <target state="translated">y lo siguiente donde se infiere el tipo de retorno &lt;code&gt;int&lt;/code&gt; y &lt;code&gt;function&lt;/code&gt; / &lt;code&gt;delegate&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="a4f8d02b2a02e694667f984ab675131fc7df4b6f" translate="yes" xml:space="preserve">
          <source>and the one with the &amp;lsquo;better&amp;rsquo; match is selected. It is an error for both to equally match.</source>
          <target state="translated">y se selecciona el que tiene la &quot;mejor&quot; coincidencia. Es un error que ambos coincidan por igual.</target>
        </trans-unit>
        <trans-unit id="01503414d5eec88b69afcb3a695c3d63f53e7b44" translate="yes" xml:space="preserve">
          <source>and the second is said to be the</source>
          <target state="translated">y el segundo se dice que es el</target>
        </trans-unit>
        <trans-unit id="a2c7a0d96bb8656b8954a8411f061575fe450d86" translate="yes" xml:space="preserve">
          <source>and the second is the</source>
          <target state="translated">y el segundo es el</target>
        </trans-unit>
        <trans-unit id="c6a7d78b6a84b109c5bdf22b48dfcf907157b3bd" translate="yes" xml:space="preserve">
          <source>and then it can be called within D code in the obvious way:</source>
          <target state="translated">y luego puede ser llamado dentro del código D de la manera obvia:</target>
        </trans-unit>
        <trans-unit id="9f153d076bc5a18e4f2d18dbdd0487e25e97a1ff" translate="yes" xml:space="preserve">
          <source>and then it can be called within the D code:</source>
          <target state="translated">y entonces se puede llamar dentro del código D:</target>
        </trans-unit>
        <trans-unit id="a5230bf3ac1fc697c044aa12dc9e2fb2c6ea3dcf" translate="yes" xml:space="preserve">
          <source>and:</source>
          <target state="translated">and:</target>
        </trans-unit>
        <trans-unit id="4e479ace0f99c0302e69da16f8b8a149bcca7b80" translate="yes" xml:space="preserve">
          <source>angle in radians (not degrees)</source>
          <target state="translated">ángulo en radianes (no grados)</target>
        </trans-unit>
        <trans-unit id="9280b074bc828d5a17336cbc1cd9659b1d111fd4" translate="yes" xml:space="preserve">
          <source>anonymous enum</source>
          <target state="translated">lista anónima</target>
        </trans-unit>
        <trans-unit id="c5fe0200d1c7a5139bd18fd22268c4ca8bf45e90" translate="yes" xml:space="preserve">
          <source>any</source>
          <target state="translated">any</target>
        </trans-unit>
        <trans-unit id="4e8f633201866f802ab148d2af9d2013c8e34e59" translate="yes" xml:space="preserve">
          <source>any Unicode character</source>
          <target state="translated">cualquier personaje de Unicode</target>
        </trans-unit>
        <trans-unit id="19b55a4828a18911678dd7cbfde84c7dc4a4daa8" translate="yes" xml:space="preserve">
          <source>any character except [{|*+?()^$</source>
          <target state="translated">cualquier personaje excepto [{|*+?()^$</target>
        </trans-unit>
        <trans-unit id="0dbe123225d920530f84014145a2950172096e13" translate="yes" xml:space="preserve">
          <source>any number</source>
          <target state="translated">cualquier número</target>
        </trans-unit>
        <trans-unit id="4743987c929c0cf7879ba69db4234c28b1936fe3" translate="yes" xml:space="preserve">
          <source>any object type</source>
          <target state="translated">cualquier tipo de objeto</target>
        </trans-unit>
        <trans-unit id="327a4bae4f50bd78ddd886a913e335b4d960c465" translate="yes" xml:space="preserve">
          <source>any roots added by core.memory.GC.addRoot() or core.memory.GC.addRange()</source>
          <target state="translated">cualquier raíz añadida por la memoria central GC addRoot()o la memoria central GC addRange()</target>
        </trans-unit>
        <trans-unit id="8867c88b56e0bfb82cffaf15a66bc8d107d6754a" translate="yes" xml:space="preserve">
          <source>anything</source>
          <target state="translated">anything</target>
        </trans-unit>
        <trans-unit id="b17f4fd7a1730663fd1c5965c4915335e96b96c5" translate="yes" xml:space="preserve">
          <source>anytime when recursive function is calling, 'stageflags' marks with bit flag of current stage and unmarks before return from this function. 'inlinecopy' uses similar 'stageflags' and from multiple evaluation 'doInline' (with infinite recursion) of this expression.</source>
          <target state="translated">en cualquier momento en que la función recursiva está llamando,'stageflags' marca con bit bandera de la etapa actual y desmarca antes de volver de esta función.&quot;inlinecopy&quot; utiliza &quot;stageflags&quot; similares y a partir de la evaluación múltiple &quot;doInline&quot; (con recursividad infinita)de esta expresión.</target>
        </trans-unit>
        <trans-unit id="a419c8d08ee71f4f158614bad9b46e39b0ebbd96" translate="yes" xml:space="preserve">
          <source>appears in a &lt;a href=&quot;version#StaticIfCondition&quot;&gt;&lt;i&gt;StaticIfCondition&lt;/i&gt;&lt;/a&gt;.</source>
          <target state="translated">aparece en un &lt;a href=&quot;version#StaticIfCondition&quot;&gt;&lt;i&gt;StaticIfCondition&lt;/i&gt;&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="97070c4771e2e70cbc389986e68ba16f9e89067f" translate="yes" xml:space="preserve">
          <source>appears syntactically first in the source file, and there can be only one per source file.</source>
          <target state="translated">aparece sintácticamente primero en el archivo fuente,y sólo puede haber uno por archivo fuente.</target>
        </trans-unit>
        <trans-unit id="9aa072ec34430f639830a82286cea7333d22b6d1" translate="yes" xml:space="preserve">
          <source>appears. &lt;code&gt;scope(exit)&lt;/code&gt; executes &lt;a href=&quot;#NonEmptyOrScopeBlockStatement&quot;&gt;&lt;i&gt;NonEmptyOrScopeBlockStatement&lt;/i&gt;&lt;/a&gt; when the scope exits normally or when it exits due to exception unwinding. &lt;code&gt;scope(failure)&lt;/code&gt; executes &lt;a href=&quot;#NonEmptyOrScopeBlockStatement&quot;&gt;&lt;i&gt;NonEmptyOrScopeBlockStatement&lt;/i&gt;&lt;/a&gt; when the scope exits due to exception unwinding. &lt;code&gt;scope(success)&lt;/code&gt; executes &lt;a href=&quot;#NonEmptyOrScopeBlockStatement&quot;&gt;&lt;i&gt;NonEmptyOrScopeBlockStatement&lt;/i&gt;&lt;/a&gt; when the scope exits normally.</source>
          <target state="translated">aparece. &lt;code&gt;scope(exit)&lt;/code&gt; ejecuta &lt;a href=&quot;#NonEmptyOrScopeBlockStatement&quot;&gt;&lt;i&gt;NonEmptyOrScopeBlockStatement&lt;/i&gt;&lt;/a&gt; cuando el alcance sale normalmente o cuando sale debido al desenrollado de excepci&amp;oacute;n. &lt;code&gt;scope(failure)&lt;/code&gt; ejecuta &lt;a href=&quot;#NonEmptyOrScopeBlockStatement&quot;&gt;&lt;i&gt;NonEmptyOrScopeBlockStatement&lt;/i&gt;&lt;/a&gt; cuando el alcance se cierra debido al desenrollamiento de excepci&amp;oacute;n. &lt;code&gt;scope(success)&lt;/code&gt; ejecuta &lt;a href=&quot;#NonEmptyOrScopeBlockStatement&quot;&gt;&lt;i&gt;NonEmptyOrScopeBlockStatement&lt;/i&gt;&lt;/a&gt; cuando el alcance sale normalmente.</target>
        </trans-unit>
        <trans-unit id="29147a58c05f7f79d1405e5d1a3e392318f8add5" translate="yes" xml:space="preserve">
          <source>append generated string to buffer</source>
          <target state="translated">añadir la cadena generada a la memoria intermedia</target>
        </trans-unit>
        <trans-unit id="e14049ac30fe1ceb5b3e223fea9cb77562cebacf" translate="yes" xml:space="preserve">
          <source>applications need to make explicit use of it.  For casual creation and disposal of dynamically-allocated objects, use &lt;a href=&quot;#make&quot;&gt;&lt;code&gt;make&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#dispose&quot;&gt;&lt;code&gt;dispose&lt;/code&gt;&lt;/a&gt;, and the array-specific functions &lt;a href=&quot;#makeArray&quot;&gt;&lt;code&gt;makeArray&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#expandArray&quot;&gt;&lt;code&gt;expandArray&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;#shrinkArray&quot;&gt;&lt;code&gt;shrinkArray&lt;/code&gt;&lt;/a&gt;. These use by default D's garbage collected heap, but open the application to better configuration options. These primitives work either with &lt;code&gt;theAllocator&lt;/code&gt; but also with any allocator obtained by combining heap building blocks. For example:</source>
          <target state="translated">las aplicaciones necesitan hacer un uso expl&amp;iacute;cito de la misma. Para la creaci&amp;oacute;n y eliminaci&amp;oacute;n informal de objetos asignados din&amp;aacute;micamente, use &lt;a href=&quot;#make&quot;&gt; &lt;code&gt;make&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;#dispose&quot;&gt; &lt;code&gt;dispose&lt;/code&gt; &lt;/a&gt; y las funciones espec&amp;iacute;ficas de la matriz &lt;a href=&quot;#makeArray&quot;&gt; &lt;code&gt;makeArray&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;#expandArray&quot;&gt; &lt;code&gt;expandArray&lt;/code&gt; &lt;/a&gt; y &lt;a href=&quot;#shrinkArray&quot;&gt; &lt;code&gt;shrinkArray&lt;/code&gt; &lt;/a&gt; . Estos usan de manera predeterminada el mont&amp;oacute;n de basura recolectada de D, pero abren la aplicaci&amp;oacute;n para obtener mejores opciones de configuraci&amp;oacute;n. Estas primitivas funcionan con el &lt;code&gt;theAllocator&lt;/code&gt; pero tambi&amp;eacute;n con cualquier asignador obtenido mediante la combinaci&amp;oacute;n de bloques de construcci&amp;oacute;n de mont&amp;oacute;n. Por ejemplo:</target>
        </trans-unit>
        <trans-unit id="85e14861458159f6776ae91e458233a76a90c2f8" translate="yes" xml:space="preserve">
          <source>applies if &lt;code&gt;s&lt;/code&gt; represents a function. true means it's overloaded and will be resolved later, false means it's the exact function symbol.</source>
          <target state="translated">se aplica si &lt;code&gt;s&lt;/code&gt; representa una funci&amp;oacute;n. verdadero significa que est&amp;aacute; sobrecargado y se resolver&amp;aacute; m&amp;aacute;s tarde, falso significa que es el s&amp;iacute;mbolo de la funci&amp;oacute;n exacta.</target>
        </trans-unit>
        <trans-unit id="20e990d1eb57b949d36664c75cdf5ee41a6ddbb9" translate="yes" xml:space="preserve">
          <source>apply is running</source>
          <target state="translated">La solicitud está en marcha</target>
        </trans-unit>
        <trans-unit id="54a590d8fb750c584539d5f98e069f60936f0806" translate="yes" xml:space="preserve">
          <source>apply to the entire module. If the documentation comment appears on the same line to the right of a declaration, it applies to that.</source>
          <target state="translated">se aplican a todo el módulo.Si el comentario de la documentación aparece en la misma línea a la derecha de una declaración,se aplica a ésta.</target>
        </trans-unit>
        <trans-unit id="d68cd30eeddf8c06180ca4ce49258de017e9b88e" translate="yes" xml:space="preserve">
          <source>apply.d</source>
          <target state="translated">apply.d</target>
        </trans-unit>
        <trans-unit id="a2a233fe8e1f03b125c7027ae365287e528caca0" translate="yes" xml:space="preserve">
          <source>are 8 hexadecimal digits.</source>
          <target state="translated">are 8 hexadecimal digits.</target>
        </trans-unit>
        <trans-unit id="a7005028cc970e840ec17decaa4c80b5af9771e0" translate="yes" xml:space="preserve">
          <source>are a</source>
          <target state="translated">are a</target>
        </trans-unit>
        <trans-unit id="6128be86e45f840026b2daf2b404600736597b6f" translate="yes" xml:space="preserve">
          <source>are all semantically equivalent.</source>
          <target state="translated">son todos semánticamente equivalentes.</target>
        </trans-unit>
        <trans-unit id="a07d3bf0986c88b26a6d6cd79b0c9cf38d6989ef" translate="yes" xml:space="preserve">
          <source>are allowed. For implicit conversions and forwarded lookups, all</source>
          <target state="translated">están permitidas.Para las conversiones implícitas y las búsquedas avanzadas,todos</target>
        </trans-unit>
        <trans-unit id="6df5c438755ad467e3023f5997f771f1115b0f95" translate="yes" xml:space="preserve">
          <source>are declared, they are distinct if they have a different number of arguments or are differently specialized.</source>
          <target state="translated">son declarados,son distintos si tienen un número diferente de argumentos o están especializados de manera diferente.</target>
        </trans-unit>
        <trans-unit id="16f9ad710cb0ae3f01ac3437fd847c91dc54f476" translate="yes" xml:space="preserve">
          <source>are default initialized.</source>
          <target state="translated">están inicializados por defecto.</target>
        </trans-unit>
        <trans-unit id="9c1ae9db503ac0af5969cefa7ca64aaee687bc87" translate="yes" xml:space="preserve">
          <source>are each evaluated exactly once, regardless of how many times the</source>
          <target state="translated">se evalúan cada una exactamente una vez,sin importar cuántas veces la</target>
        </trans-unit>
        <trans-unit id="485f79b1e1c96db0b3e44fcee8093120faad0c3f" translate="yes" xml:space="preserve">
          <source>are four hexadecimal digits.</source>
          <target state="translated">son cuatro dígitos hexadecimales.</target>
        </trans-unit>
        <trans-unit id="5a2142208e059a0a2b9c3a5a5cc3d05eddb3bfd7" translate="yes" xml:space="preserve">
          <source>are functions that are statically checked to exhibit no possibility of &lt;a href=&quot;https://dlang.org/glossary.html#undefined_behavior&quot;&gt;&lt;i&gt;undefined behavior&lt;/i&gt;&lt;/a&gt;. Undefined behavior is often used as a vector for malicious attacks.</source>
          <target state="translated">son funciones que se comprueban est&amp;aacute;ticamente para que no muestren la posibilidad de &lt;a href=&quot;https://dlang.org/glossary.html#undefined_behavior&quot;&gt;&lt;i&gt;un comportamiento indefinido&lt;/i&gt;&lt;/a&gt; . El comportamiento indefinido se usa a menudo como un vector para ataques maliciosos.</target>
        </trans-unit>
        <trans-unit id="ade8d2401d3d5dd9203afd76d19f522ac2e55295" translate="yes" xml:space="preserve">
          <source>are inserted as arguments in place of the sequence.</source>
          <target state="translated">se insertan como argumentos en lugar de la secuencia.</target>
        </trans-unit>
        <trans-unit id="317278e84fc036b17e5b47cb558e85dce2a18343" translate="yes" xml:space="preserve">
          <source>are intended to detect bugs in the program, do not use for detecting input or environmental errors.</source>
          <target state="translated">están pensadas para detectar errores en el programa,no se usan para detectar errores de entrada o ambientales.</target>
        </trans-unit>
        <trans-unit id="f84d3913cc93432b4fd4d1dd47ae8d84ed1c106e" translate="yes" xml:space="preserve">
          <source>are lvalues of the same type; OR</source>
          <target state="translated">son valores del mismo tipo;O</target>
        </trans-unit>
        <trans-unit id="4dbdd6d5f86f044e72eef0ee6030f1a2c069c999" translate="yes" xml:space="preserve">
          <source>are passed as follows:</source>
          <target state="translated">se pasan de la siguiente manera:</target>
        </trans-unit>
        <trans-unit id="832dab90b1edf8e0745fc77e55d8bef997d6681e" translate="yes" xml:space="preserve">
          <source>are semantically equivalent to:</source>
          <target state="translated">son semánticamente equivalentes a:</target>
        </trans-unit>
        <trans-unit id="07197eedacba531172ba21fb867ab3dfb7d61bd0" translate="yes" xml:space="preserve">
          <source>are set to be a copy of the elements of the aggregate. If the variable is &lt;code&gt;ref&lt;/code&gt;, it is a reference to the contents of that aggregate.</source>
          <target state="translated">est&amp;aacute;n configurados para ser una copia de los elementos del agregado. Si la variable es &lt;code&gt;ref&lt;/code&gt; , es una referencia al contenido de ese agregado.</target>
        </trans-unit>
        <trans-unit id="269689aab961e58a51ee667ee139fc7a985ddcf9" translate="yes" xml:space="preserve">
          <source>are translated via &lt;code&gt;opSlice&lt;/code&gt; into user-defined objects that encapsulate the endpoints</source>
          <target state="translated">se traducen a trav&amp;eacute;s de &lt;code&gt;opSlice&lt;/code&gt; en objetos definidos por el usuario que encapsulan los puntos finales</target>
        </trans-unit>
        <trans-unit id="d29af3be00af25d78b0e45d0819a3236111c4823" translate="yes" xml:space="preserve">
          <source>are treated differently. They bypass the normal chaining mechanism, such that the chain can only be caught by catching the first</source>
          <target state="translated">son tratados de manera diferente.Pasan por alto el mecanismo normal de encadenamiento,de tal manera que la cadena sólo puede ser atrapada al atrapar la primera</target>
        </trans-unit>
        <trans-unit id="9c8fefcdcee3186db54172d192680d9753ba3d37" translate="yes" xml:space="preserve">
          <source>are unrelated memory blocks. It returns true if &lt;code&gt;[p1..p2]&lt;/code&gt; lies inside &lt;code&gt;[q1..q2]&lt;/code&gt;, and false otherwise. Similarly, the expression &lt;code&gt;(p1 &amp;lt; q1 || p2 &amp;gt; q2)&lt;/code&gt; is true if &lt;code&gt;[p1..p2]&lt;/code&gt; lies outside &lt;code&gt;[q1..q2]&lt;/code&gt;, and false otherwise.</source>
          <target state="translated">son bloques de memoria no relacionados. Devuelve verdadero si &lt;code&gt;[p1..p2]&lt;/code&gt; se encuentra dentro de &lt;code&gt;[q1..q2]&lt;/code&gt; , y falso en caso contrario. De manera similar, la expresi&amp;oacute;n &lt;code&gt;(p1 &amp;lt; q1 || p2 &amp;gt; q2)&lt;/code&gt; es verdadera si &lt;code&gt;[p1..p2]&lt;/code&gt; se encuentra fuera de &lt;code&gt;[q1..q2]&lt;/code&gt; , y de lo contrario es falsa.</target>
        </trans-unit>
        <trans-unit id="5de17becd94b8b5822927eaeb5c0a9c6368b25c6" translate="yes" xml:space="preserve">
          <source>are zero.</source>
          <target state="translated">son cero.</target>
        </trans-unit>
        <trans-unit id="ba31fdd3e708e3d289d53db1d34bda6867ddd812" translate="yes" xml:space="preserve">
          <source>are:</source>
          <target state="translated">are:</target>
        </trans-unit>
        <trans-unit id="04d6e2b300911995efa37b6707fdc02975a3021c" translate="yes" xml:space="preserve">
          <source>arg</source>
          <target state="translated">arg</target>
        </trans-unit>
        <trans-unit id="3030e728f154bf51419109efb93b6b8aeec9a976" translate="yes" xml:space="preserve">
          <source>args</source>
          <target state="translated">args</target>
        </trans-unit>
        <trans-unit id="29a7e00188183ef37bb248aa97bd8cff6881073c" translate="yes" xml:space="preserve">
          <source>argtypes.d</source>
          <target state="translated">argtypes.d</target>
        </trans-unit>
        <trans-unit id="acf65920ab8b0a2c44af13174f156d54682b107a" translate="yes" xml:space="preserve">
          <source>argtypes_sysv_x64.d</source>
          <target state="translated">argtypes_sysv_x64.d</target>
        </trans-unit>
        <trans-unit id="6ffe6d6e4d2987bfa609b9ba220870e6131f778a" translate="yes" xml:space="preserve">
          <source>argument count</source>
          <target state="translated">argumento cuenta</target>
        </trans-unit>
        <trans-unit id="402eb0acbe9643c28b65030973d74fdbdcadad39" translate="yes" xml:space="preserve">
          <source>argument for a &lt;a href=&quot;template#template_value_parameter&quot;&gt; template value parameter&lt;/a&gt;</source>
          <target state="translated">argumento para un &lt;a href=&quot;template#template_value_parameter&quot;&gt;par&amp;aacute;metro de valor de plantilla&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="1f49b91a4cef1890546d566c1dfeb63f360830f7" translate="yes" xml:space="preserve">
          <source>argument is D code</source>
          <target state="translated">El argumento es el código D</target>
        </trans-unit>
        <trans-unit id="2cba715ace83bcd1bc622cf51c49477dfd3f5de9" translate="yes" xml:space="preserve">
          <source>argument is a data entry in a row</source>
          <target state="translated">El argumento es una entrada de datos en una fila</target>
        </trans-unit>
        <trans-unit id="1de1e039cc729508913eb326168fd3bd5625cc34" translate="yes" xml:space="preserve">
          <source>argument is a definition in a definition list</source>
          <target state="translated">El argumento es una definición en una lista de definiciones</target>
        </trans-unit>
        <trans-unit id="a4b7120e83cce307a332e5b9cfbef94ae6be1421" translate="yes" xml:space="preserve">
          <source>argument is a definition list</source>
          <target state="translated">El argumento es una lista de definiciones</target>
        </trans-unit>
        <trans-unit id="2523a2af9bcc13237e893346b849d1a6b6df0d66" translate="yes" xml:space="preserve">
          <source>argument is a description of a definition</source>
          <target state="translated">El argumento es una descripción de una definición</target>
        </trans-unit>
        <trans-unit id="fe5b7720dbb3574d30b8167c400787f0cc4bd3c2" translate="yes" xml:space="preserve">
          <source>argument is a header entry in a row</source>
          <target state="translated">El argumento es una entrada de cabecera en una fila</target>
        </trans-unit>
        <trans-unit id="de900dbcc7d46e57913658f00ade08b4e39ecc6a" translate="yes" xml:space="preserve">
          <source>argument is a paragraph</source>
          <target state="translated">El argumento es un párrafo</target>
        </trans-unit>
        <trans-unit id="26310807c328a508f3331f0a6eb4a737b9ee760d" translate="yes" xml:space="preserve">
          <source>argument is a row in a table</source>
          <target state="translated">El argumento es una fila en una mesa</target>
        </trans-unit>
        <trans-unit id="917d81be975b5a1884830f113c650e41047deda1" translate="yes" xml:space="preserve">
          <source>argument is a table</source>
          <target state="translated">El argumento es una mesa</target>
        </trans-unit>
        <trans-unit id="53128fb45a99944558cdcd0ac0725357e9ed2b9f" translate="yes" xml:space="preserve">
          <source>argument is an item in a list</source>
          <target state="translated">El argumento es un elemento de una lista</target>
        </trans-unit>
        <trans-unit id="71e03b8c19a608158bd1faccb16e7588f61b2378" translate="yes" xml:space="preserve">
          <source>argument is an ordered list</source>
          <target state="translated">El argumento es una lista ordenada</target>
        </trans-unit>
        <trans-unit id="f573e1c1a3f213ed940e6a417bc9406b47e59f8f" translate="yes" xml:space="preserve">
          <source>argument is an unordered list</source>
          <target state="translated">El argumento es una lista no ordenada</target>
        </trans-unit>
        <trans-unit id="11f8bb0b0e9106690299ca0d5fa216d855be1b42" translate="yes" xml:space="preserve">
          <source>argument is evaluated by the called function and not by the caller</source>
          <target state="translated">el argumento es evaluado por la función llamada y no por el llamador</target>
        </trans-unit>
        <trans-unit id="8ca614792671b45b54b8af94d9037c8bf866a401" translate="yes" xml:space="preserve">
          <source>argument is implicitly converted to a const type</source>
          <target state="translated">el argumento se convierte implícitamente en un tipo de const</target>
        </trans-unit>
        <trans-unit id="e648e9f9765d601d5567f45d92f78db95af475e4" translate="yes" xml:space="preserve">
          <source>argument is implicitly converted to a shared type</source>
          <target state="translated">el argumento se convierte implícitamente en un tipo compartido</target>
        </trans-unit>
        <trans-unit id="0c2869bfa6de2904c99ed91f83aa5b7be79ff101" translate="yes" xml:space="preserve">
          <source>argument is implicitly converted to an immutable type</source>
          <target state="translated">el argumento se convierte implícitamente en un tipo inmutable</target>
        </trans-unit>
        <trans-unit id="e6ea15d3433dead5bf583f26cbffd8e6cfacf1d7" translate="yes" xml:space="preserve">
          <source>argument is implicitly converted to an inout type</source>
          <target state="translated">El argumento se convierte implícitamente en un tipo de inout</target>
        </trans-unit>
        <trans-unit id="53c2858649c66fe5c6e3dacc6873117267ede17c" translate="yes" xml:space="preserve">
          <source>argument is inline D code</source>
          <target state="translated">El argumento es el código D en línea</target>
        </trans-unit>
        <trans-unit id="c081b59269e89d11b975e77544bbd787a69ca519" translate="yes" xml:space="preserve">
          <source>argument is one font size bigger</source>
          <target state="translated">el argumento es un tamaño de fuente más grande</target>
        </trans-unit>
        <trans-unit id="2dae7e14120267d8302b3858209d388c4f7e003e" translate="yes" xml:space="preserve">
          <source>argument is one font size smaller</source>
          <target state="translated">el argumento es un tamaño de fuente más pequeño</target>
        </trans-unit>
        <trans-unit id="abfe643d52f10f643353360f1ab62a6d9957351a" translate="yes" xml:space="preserve">
          <source>argument is set to be black</source>
          <target state="translated">el argumento está preparado para ser negro</target>
        </trans-unit>
        <trans-unit id="ae8b37ed5b457f52373be2d7a7314325058af3f5" translate="yes" xml:space="preserve">
          <source>argument is set to be blue</source>
          <target state="translated">el argumento está preparado para ser azul</target>
        </trans-unit>
        <trans-unit id="a4c254ece588cb5a75b4391875c37c2a8c3edcaf" translate="yes" xml:space="preserve">
          <source>argument is set to be green</source>
          <target state="translated">el argumento está preparado para ser verde</target>
        </trans-unit>
        <trans-unit id="55f864f9b577c8012cb7a43d4d1dc6a7e58a1524" translate="yes" xml:space="preserve">
          <source>argument is set to be red</source>
          <target state="translated">el argumento se establece en rojo</target>
        </trans-unit>
        <trans-unit id="1598d3bd519f196dbae7bcc4d64fb27e9e74502c" translate="yes" xml:space="preserve">
          <source>argument is set to be white</source>
          <target state="translated">el argumento está preparado para ser blanco</target>
        </trans-unit>
        <trans-unit id="2cf487a237e5c292d05ad6794edd4b4357de5fac" translate="yes" xml:space="preserve">
          <source>argument is set to be yellow</source>
          <target state="translated">el argumento se establece en amarillo</target>
        </trans-unit>
        <trans-unit id="5b6c28a7f22d0f0ca72511d97a0ca64e0a3a4d93" translate="yes" xml:space="preserve">
          <source>argument list for __ensure</source>
          <target state="translated">lista de argumentos para la __aseguradora</target>
        </trans-unit>
        <trans-unit id="6af33f02e1acef567ccbb2854fa84d4eb7c6cf35" translate="yes" xml:space="preserve">
          <source>argument list for __require</source>
          <target state="translated">lista de argumentos para __requerir</target>
        </trans-unit>
        <trans-unit id="73f3906eae2f65d2afa1d6abd6edd9614aaf3a53" translate="yes" xml:space="preserve">
          <source>argument to calculate the hash value of</source>
          <target state="translated">para calcular el valor de hash de</target>
        </trans-unit>
        <trans-unit id="3176992b2d0078e125bddd95922229675bc78796" translate="yes" xml:space="preserve">
          <source>argument to convert to a delegate</source>
          <target state="translated">argumento para convertir a un delegado</target>
        </trans-unit>
        <trans-unit id="ad65c165992c6bef5dbbbb0e8745936d25651574" translate="yes" xml:space="preserve">
          <source>argument.</source>
          <target state="translated">argument.</target>
        </trans-unit>
        <trans-unit id="7877e040cddc18ca9042a2e199f986a5cab0caf1" translate="yes" xml:space="preserve">
          <source>arguments to be formatted</source>
          <target state="translated">argumentos para ser formateados</target>
        </trans-unit>
        <trans-unit id="dc332a080fa138f06e612f3cd863e5696ee799a9" translate="yes" xml:space="preserve">
          <source>arguments to bind</source>
          <target state="translated">argumentos para vincular</target>
        </trans-unit>
        <trans-unit id="d28d542371d0399fe06824dfb55b2f1b75772b28" translate="yes" xml:space="preserve">
          <source>arguments to function</source>
          <target state="translated">argumentos para funcionar</target>
        </trans-unit>
        <trans-unit id="7c710ea48c89350b6e3cf9ccb05e0b6855c46c0f" translate="yes" xml:space="preserve">
          <source>arr retyped as an array of chars, wchars, or dchars</source>
          <target state="translated">arr reescrito como un conjunto de chars,wchars o dchars</target>
        </trans-unit>
        <trans-unit id="19edc1210777ba4d45049c29280d9cc5e1064c25" translate="yes" xml:space="preserve">
          <source>array</source>
          <target state="translated">array</target>
        </trans-unit>
        <trans-unit id="8d08c4ae4dd9d2c657a98871054ba86110fbd40b" translate="yes" xml:space="preserve">
          <source>array &lt;a href=&quot;https://dlang.org/expression.html#CatExpression&quot;&gt;concatenation&lt;/a&gt; and appending</source>
          <target state="translated">&lt;a href=&quot;https://dlang.org/expression.html#CatExpression&quot;&gt;concatenaci&amp;oacute;n de&lt;/a&gt; matrices y anexos</target>
        </trans-unit>
        <trans-unit id="746d270892059d0cf7d7b8e6d887d20a1ac36b7d" translate="yes" xml:space="preserve">
          <source>array dimension</source>
          <target state="translated">La dimensión de la matriz</target>
        </trans-unit>
        <trans-unit id="82e96d0a65c0df64b59083763d012c50d8c8637f" translate="yes" xml:space="preserve">
          <source>array initializer to be converted</source>
          <target state="translated">inicializador de matrices para ser convertido</target>
        </trans-unit>
        <trans-unit id="271050f3a3757d26809ab09f1727315845ec3a7e" translate="yes" xml:space="preserve">
          <source>array literal expression</source>
          <target state="translated">la expresión literal de la matriz</target>
        </trans-unit>
        <trans-unit id="82d07ab751d5a6cfdfcd868264cd6141be8eb144" translate="yes" xml:space="preserve">
          <source>array of &lt;code&gt;TemplateParameters&lt;/code&gt; supplied to the &lt;code&gt;TemplateDeclaration&lt;/code&gt;</source>
          <target state="translated">matriz de &lt;code&gt;TemplateParameters&lt;/code&gt; suministrados a &lt;code&gt;TemplateDeclaration&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="fdd0aebd143d28fa2fda97e7c6f50fba5e3fb3dc" translate="yes" xml:space="preserve">
          <source>array of &lt;code&gt;chars&lt;/code&gt;, &lt;code&gt;wchars&lt;/code&gt;, or &lt;code&gt;dchars&lt;/code&gt; or a slicable range</source>
          <target state="translated">conjunto de &lt;code&gt;chars&lt;/code&gt; , &lt;code&gt;wchars&lt;/code&gt; o &lt;code&gt;dchars&lt;/code&gt; o un rango divisible</target>
        </trans-unit>
        <trans-unit id="0f76a584d138982d56116ca20483c328097bafc5" translate="yes" xml:space="preserve">
          <source>array of CaseStatement's</source>
          <target state="translated">de CaseStatement</target>
        </trans-unit>
        <trans-unit id="22c6fb42434a4feffe203482507ca6d359fca249" translate="yes" xml:space="preserve">
          <source>array of Expressions</source>
          <target state="translated">una serie de expresiones...</target>
        </trans-unit>
        <trans-unit id="9a0e8504325cdb04e36f41e8d37699577fbb4f44" translate="yes" xml:space="preserve">
          <source>array of TypeInfo_Class references for classes defined in this module</source>
          <target state="translated">matriz de referencias TypeInfo_Class para las clases definidas en este módulo</target>
        </trans-unit>
        <trans-unit id="c7cebce791a08cfb032592b3ce9dc3a3b07c2db8" translate="yes" xml:space="preserve">
          <source>array of bytes, ubytes, shorts, ushorts, ints, or uints</source>
          <target state="translated">una serie de bytes,ubytes,shorts,ushorts,ints,o uints</target>
        </trans-unit>
        <trans-unit id="b61bcf3420e1383206792f78c5fbf32391c2d2ed" translate="yes" xml:space="preserve">
          <source>array of catch information</source>
          <target state="translated">una serie de información sobre las capturas</target>
        </trans-unit>
        <trans-unit id="9de7d205ab462afaeaa0272a8de8d4d7087a582c" translate="yes" xml:space="preserve">
          <source>array of chars, less than or equal to 256 in length</source>
          <target state="translated">una serie de caracteres de longitud inferior o igual a 256</target>
        </trans-unit>
        <trans-unit id="d67c9d42a7c6249c876c078affe0fcc2ff7d93f3" translate="yes" xml:space="preserve">
          <source>array of coefficients a&lt;sub&gt;0&lt;/sub&gt;, a&lt;sub&gt;1&lt;/sub&gt;, etc.</source>
          <target state="translated">matriz de coeficientes a &lt;sub&gt;0&lt;/sub&gt; , a &lt;sub&gt;1&lt;/sub&gt; , etc.</target>
        </trans-unit>
        <trans-unit id="e3151aca883b088194df3f04ae1c3bb3a725d917" translate="yes" xml:space="preserve">
          <source>array of contents of object module</source>
          <target state="translated">conjunto de contenidos del módulo de objeto</target>
        </trans-unit>
        <trans-unit id="63f5f1bbb022a100689c942287a433266e4aa0fa" translate="yes" xml:space="preserve">
          <source>array of function arguments</source>
          <target state="translated">una serie de argumentos de función</target>
        </trans-unit>
        <trans-unit id="0000e492b6f375afd2eac5268bb67ae05d809813" translate="yes" xml:space="preserve">
          <source>array of grapheme clusters</source>
          <target state="translated">una serie de grupos de grafos</target>
        </trans-unit>
        <trans-unit id="4bd64f4d6328d7ff77770d5fb77d809ee1eb167c" translate="yes" xml:space="preserve">
          <source>array of handler information</source>
          <target state="translated">conjunto de información de los manipuladores</target>
        </trans-unit>
        <trans-unit id="0451c713316667f4237e60954ee2353ad270a68a" translate="yes" xml:space="preserve">
          <source>array of identifiers</source>
          <target state="translated">conjunto de identificadores</target>
        </trans-unit>
        <trans-unit id="6cc692b85bcd2d7cc960323df0f93856f2578cf6" translate="yes" xml:space="preserve">
          <source>array of path strings</source>
          <target state="translated">una serie de cadenas de caminos</target>
        </trans-unit>
        <trans-unit id="afaa4acfccabaf633709101c9d982f9cfa0ed1d5" translate="yes" xml:space="preserve">
          <source>array of pointers to the ModuleInfo's of modules imported by this one</source>
          <target state="translated">conjunto de punteros a los ModuleInfo's de los módulos importados por este</target>
        </trans-unit>
        <trans-unit id="6b8ae94a8f4e70176f40f578fa67c4d0675fa260" translate="yes" xml:space="preserve">
          <source>array of single-line strings</source>
          <target state="translated">una serie de cuerdas de una sola línea</target>
        </trans-unit>
        <trans-unit id="9c26abe7a01a714c7cc1f79e7a78b241e2c77786" translate="yes" xml:space="preserve">
          <source>array of strings, each element is a line that is a slice of &lt;code&gt;s&lt;/code&gt;</source>
          <target state="translated">matriz de cadenas, cada elemento es una l&amp;iacute;nea que es una porci&amp;oacute;n de &lt;code&gt;s&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="3baa4f1e0c0d434e394c99d83ad986f587d4ab20" translate="yes" xml:space="preserve">
          <source>array of unresolved GotoCaseStatement's</source>
          <target state="translated">una serie de declaraciones de caso no resueltas</target>
        </trans-unit>
        <trans-unit id="acbd803f80a095334a762a34609805d719a74dfe" translate="yes" xml:space="preserve">
          <source>array of variables that were assigned to from maybescope variables</source>
          <target state="translated">conjunto de variables que se asignaron a partir de las variables del maybescopio</target>
        </trans-unit>
        <trans-unit id="ea95906b5a012cea5f2dd839cb8d0d8e11574be1" translate="yes" xml:space="preserve">
          <source>array on stack</source>
          <target state="translated">la matriz en la pila...</target>
        </trans-unit>
        <trans-unit id="c4d6693130f824a9ef09af14bb243324260a55b1" translate="yes" xml:space="preserve">
          <source>array representing the entire archive.</source>
          <target state="translated">que representa el archivo completo.</target>
        </trans-unit>
        <trans-unit id="33f864b4b5101a82968af3f7658c765b7daf1c76" translate="yes" xml:space="preserve">
          <source>array to append found variables to</source>
          <target state="translated">para añadir las variables encontradas a</target>
        </trans-unit>
        <trans-unit id="db3f5f4427ea2b70650ca1c686119cdb6b9ed83f" translate="yes" xml:space="preserve">
          <source>array to convert, it is &quot;consumed&quot; by the function</source>
          <target state="translated">para convertir,es &quot;consumido&quot; por la función</target>
        </trans-unit>
        <trans-unit id="1ed5601cece6823e0c274fb7e6854fde946942df" translate="yes" xml:space="preserve">
          <source>array to copy</source>
          <target state="translated">matriz para copiar</target>
        </trans-unit>
        <trans-unit id="ac18b7ba7f1f97b1e1030b30c3819a17727d09ef" translate="yes" xml:space="preserve">
          <source>array to store negative clauses</source>
          <target state="translated">matriz para almacenar las cláusulas negativas</target>
        </trans-unit>
        <trans-unit id="12145c7b38e49bf9343c7e0fa21a5d94a86aec6b" translate="yes" xml:space="preserve">
          <source>array type</source>
          <target state="translated">tipo de matriz</target>
        </trans-unit>
        <trans-unit id="09d758a1dc951527d3ded930d17055cf0ea61958" translate="yes" xml:space="preserve">
          <source>array with negative clauses from &lt;code&gt;instantiated&lt;/code&gt; expression</source>
          <target state="translated">matriz con cl&amp;aacute;usulas negativas de expresi&amp;oacute;n &lt;code&gt;instantiated&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="aeff6ce831a75de97e45515b18c2fe599c95b00c" translate="yes" xml:space="preserve">
          <source>array, not in the array as it is being progressively shortened.)</source>
          <target state="translated">no en la matriz,no en la matriz que se está acortando progresivamente).</target>
        </trans-unit>
        <trans-unit id="473bb92795f517ea09c4747e7d37ba1bd1eeb9cb" translate="yes" xml:space="preserve">
          <source>array.</source>
          <target state="translated">array.</target>
        </trans-unit>
        <trans-unit id="9c31d478b62034de3474b9171d5e8089e61a8ac6" translate="yes" xml:space="preserve">
          <source>arrayop.d</source>
          <target state="translated">arrayop.d</target>
        </trans-unit>
        <trans-unit id="b8a473bdfc0b8bacd4f836816bf74f434215397d" translate="yes" xml:space="preserve">
          <source>arraytypes.d</source>
          <target state="translated">arraytypes.d</target>
        </trans-unit>
        <trans-unit id="df211ccdd94a63e0bcb9e6ae427a249484a49d60" translate="yes" xml:space="preserve">
          <source>as</source>
          <target state="translated">as</target>
        </trans-unit>
        <trans-unit id="fe0db456b4d530dd0ba14ab0ed65a315087d7de6" translate="yes" xml:space="preserve">
          <source>as defined below</source>
          <target state="translated">como se define a continuación</target>
        </trans-unit>
        <trans-unit id="a9d2a1884aa5246051f242363f8f1981e3f47f35" translate="yes" xml:space="preserve">
          <source>as the first line of the function so it will not get inlined.</source>
          <target state="translated">como la primera línea de la función,por lo que no se pondrá en línea.</target>
        </trans-unit>
        <trans-unit id="ffcbb6274e566044113aaf2e534009b9310ede89" translate="yes" xml:space="preserve">
          <source>as well.</source>
          <target state="translated">también.</target>
        </trans-unit>
        <trans-unit id="45e97a5576c71a4db4a9d34e9e87b1674aa40cb9" translate="yes" xml:space="preserve">
          <source>asin(x)</source>
          <target state="translated">asin(x)</target>
        </trans-unit>
        <trans-unit id="6b8d75f3df2cc5ce1cb1a29c8a463bf57756b32a" translate="yes" xml:space="preserve">
          <source>asinh(x)</source>
          <target state="translated">asinh(x)</target>
        </trans-unit>
        <trans-unit id="93ef9cb2ecf41ff1e36e88085f630fc5b5b35f8a" translate="yes" xml:space="preserve">
          <source>asm block</source>
          <target state="translated">bloque asm</target>
        </trans-unit>
        <trans-unit id="cb7f4589c66646d16a26bcea75421bace4ceee80" translate="yes" xml:space="preserve">
          <source>asm statements are not permitted</source>
          <target state="translated">las declaraciones del asm no están permitidas</target>
        </trans-unit>
        <trans-unit id="bd1201780570f51d31d6aed0ceabf8cfb2f3d3b4" translate="yes" xml:space="preserve">
          <source>assigns to the elements of &lt;code&gt;a&lt;/code&gt; the elements of &lt;code&gt;b&lt;/code&gt; with &lt;code&gt;4&lt;/code&gt; added to each. This can also be expressed in vector notation as:</source>
          <target state="translated">asigna a los elementos de &lt;code&gt;a&lt;/code&gt; los elementos de &lt;code&gt;b&lt;/code&gt; con &lt;code&gt;4&lt;/code&gt; agregados a cada uno. Esto tambi&amp;eacute;n se puede expresar en notaci&amp;oacute;n vectorial como:</target>
        </trans-unit>
        <trans-unit id="dcf70c92dd2d6762ad7755a54f0fda2408dd607f" translate="yes" xml:space="preserve">
          <source>associated</source>
          <target state="translated">associated</target>
        </trans-unit>
        <trans-unit id="6ca03a8131b95c61fa25ceb2170b7e6c13d281ed" translate="yes" xml:space="preserve">
          <source>associated C compiler</source>
          <target state="translated">compilador C asociado</target>
        </trans-unit>
        <trans-unit id="c86461f009279cf7d8a8df8f4a2bee27c0ebd359" translate="yes" xml:space="preserve">
          <source>associative array</source>
          <target state="translated">conjunto asociativo</target>
        </trans-unit>
        <trans-unit id="b96b63c05e26f4a36ccd3c6768538c5f53bad767" translate="yes" xml:space="preserve">
          <source>associative array literal expression</source>
          <target state="translated">expresión literal de la matriz asociativa</target>
        </trans-unit>
        <trans-unit id="f73e78c5dba9280a5ecbefb7ac4340aefd57e96a" translate="yes" xml:space="preserve">
          <source>associative array opaque pointer</source>
          <target state="translated">puntero opaco de matriz asociativa</target>
        </trans-unit>
        <trans-unit id="d680422323c3ebabae46a1b17fa37b094e8992ce" translate="yes" xml:space="preserve">
          <source>associative arrays</source>
          <target state="translated">conjuntos asociativos</target>
        </trans-unit>
        <trans-unit id="9b1ea182a7f853680c0cf4febbfbdb931e112b7b" translate="yes" xml:space="preserve">
          <source>ast_node.d</source>
          <target state="translated">ast_node.d</target>
        </trans-unit>
        <trans-unit id="c63cccfcff6450f04ad389df96f37d71f3d8263d" translate="yes" xml:space="preserve">
          <source>asynchronous dns resolves</source>
          <target state="translated">el dns asincrónico resuelve</target>
        </trans-unit>
        <trans-unit id="a4bda49ec30481e40a13a1f712a744ed9328f38b" translate="yes" xml:space="preserve">
          <source>at least 16 bits signed</source>
          <target state="translated">al menos 16 bits firmados</target>
        </trans-unit>
        <trans-unit id="12612e6ae89476ef0c262c59cb5661ef322c7b4d" translate="yes" xml:space="preserve">
          <source>at least 16 bits unsigned</source>
          <target state="translated">al menos 16 bits sin firmar</target>
        </trans-unit>
        <trans-unit id="05c38248d766ccb4ac646c3c4e61b8a3df6c7c1c" translate="yes" xml:space="preserve">
          <source>at least 32 bits signed</source>
          <target state="translated">al menos 32 bits firmados</target>
        </trans-unit>
        <trans-unit id="df07175b9a990c67086843022ab036e14acca419" translate="yes" xml:space="preserve">
          <source>at least 32 bits unsigned</source>
          <target state="translated">al menos 32 bits sin firmar</target>
        </trans-unit>
        <trans-unit id="0073c8ad999435d155281ee74a0ed6e8cd9d3ce4" translate="yes" xml:space="preserve">
          <source>at least 64 bits signed</source>
          <target state="translated">al menos 64 bits firmados</target>
        </trans-unit>
        <trans-unit id="b4843f87b012a4fdd62bd4a4bddc746d7a1eb797" translate="yes" xml:space="preserve">
          <source>at least 64 bits unsigned</source>
          <target state="translated">al menos 64 bits sin firmar</target>
        </trans-unit>
        <trans-unit id="132f5fdd208e471343057ed225076ba77c1c69d1" translate="yes" xml:space="preserve">
          <source>at least 8 bits signed</source>
          <target state="translated">al menos 8 bits firmados</target>
        </trans-unit>
        <trans-unit id="022c39d1f170a1af1d62f7bd47cc68f659a84f7a" translate="yes" xml:space="preserve">
          <source>at least 8 bits unsigned</source>
          <target state="translated">al menos 8 bits sin firmar</target>
        </trans-unit>
        <trans-unit id="e5451a0a84a87896924f00bee6ec7fe06198a07a" translate="yes" xml:space="preserve">
          <source>at most &amp;Omicron;(&lt;code&gt;length&lt;/code&gt;) if &lt;code&gt;e &amp;gt; capacity&lt;/code&gt;, otherwise &amp;Omicron;(&lt;code&gt;1&lt;/code&gt;).</source>
          <target state="translated">a lo sumo &amp;Omicron; ( &lt;code&gt;length&lt;/code&gt; ) si &lt;code&gt;e &amp;gt; capacity&lt;/code&gt; , de lo contrario &amp;Omicron; ( &lt;code&gt;1&lt;/code&gt; ).</target>
        </trans-unit>
        <trans-unit id="8289458df05fe9a312a805068320fae0676fdbe4" translate="yes" xml:space="preserve">
          <source>atan(x)</source>
          <target state="translated">atan(x)</target>
        </trans-unit>
        <trans-unit id="851765672808dff15fb722a2a0dc5b0569c2c3d8" translate="yes" xml:space="preserve">
          <source>atan(y, x)</source>
          <target state="translated">atan(y,x)</target>
        </trans-unit>
        <trans-unit id="877d7c124e8b539737b3e5f04e78c13e02672a71" translate="yes" xml:space="preserve">
          <source>attrib.d</source>
          <target state="translated">attrib.d</target>
        </trans-unit>
        <trans-unit id="2c317cd0735d9046d7675c475fa1c6dce647953f" translate="yes" xml:space="preserve">
          <source>attribute</source>
          <target state="translated">attribute</target>
        </trans-unit>
        <trans-unit id="130856e90bbab066b8bff5aef533f2fbad235efb" translate="yes" xml:space="preserve">
          <source>attrs</source>
          <target state="translated">attrs</target>
        </trans-unit>
        <trans-unit id="9c4801856a30cfabd891c2843df815466fee7e54" translate="yes" xml:space="preserve">
          <source>auto &lt;strong id=&quot;MODMatchToBuffer&quot;&gt;MODMatchToBuffer&lt;/strong&gt;(OutBuffer* buf, ubyte lhsMod, ubyte rhsMod);</source>
          <target state="translated">&lt;strong id=&quot;MODMatchToBuffer&quot;&gt;MODMatchToBuffer&lt;/strong&gt; autom&amp;aacute;tico (OutBuffer * buf, ubyte lhsMod, ubyte rhsMod);</target>
        </trans-unit>
        <trans-unit id="b9591059def0efdb084e5fc42e898bc400ffb188" translate="yes" xml:space="preserve">
          <source>auto &lt;strong id=&quot;abs&quot;&gt;abs&lt;/strong&gt;(Num)(Num x)</source>
          <target state="translated">&lt;strong id=&quot;abs&quot;&gt;abs&lt;/strong&gt; autom&amp;aacute;tico (Num) (Num x)</target>
        </trans-unit>
        <trans-unit id="ee22e603cc808b3c321d9284a6736c93ba90fb49" translate="yes" xml:space="preserve">
          <source>auto &lt;strong id=&quot;amap&quot;&gt;amap&lt;/strong&gt;(Args...)(Args args)</source>
          <target state="translated">auto &lt;strong id=&quot;amap&quot;&gt;amap&lt;/strong&gt; (Args ...) (Args args)</target>
        </trans-unit>
        <trans-unit id="148c5ba24f349fbf44a10d28280745a17b6e2875" translate="yes" xml:space="preserve">
          <source>auto &lt;strong id=&quot;asAbsolutePath&quot;&gt;asAbsolutePath&lt;/strong&gt;(R)(R path)</source>
          <target state="translated">auto &lt;strong id=&quot;asAbsolutePath&quot;&gt;asAbsolutePath&lt;/strong&gt; (R) (ruta R)</target>
        </trans-unit>
        <trans-unit id="2ae5331cd45ca06046ac12aafd59c21def31da63" translate="yes" xml:space="preserve">
          <source>auto &lt;strong id=&quot;asCapitalized&quot;&gt;asCapitalized&lt;/strong&gt;(Range)(Range str)</source>
          <target state="translated">auto &lt;strong id=&quot;asCapitalized&quot;&gt;asCapitalized&lt;/strong&gt; (Range) (Range str)</target>
        </trans-unit>
        <trans-unit id="4e003e73388b4b5f416932e2a8c15f8926c7b933" translate="yes" xml:space="preserve">
          <source>auto &lt;strong id=&quot;asLowerCase&quot;&gt;asLowerCase&lt;/strong&gt;(Range)(Range str)</source>
          <target state="translated">auto &lt;strong id=&quot;asLowerCase&quot;&gt;asLowerCase&lt;/strong&gt; (Range) (Range str)</target>
        </trans-unit>
        <trans-unit id="1ac451afae89adcfe4a6042abf649a67ca0367e0" translate="yes" xml:space="preserve">
          <source>auto &lt;strong id=&quot;asNormalizedPath&quot;&gt;asNormalizedPath&lt;/strong&gt;(R)(R path)</source>
          <target state="translated">auto &lt;strong id=&quot;asNormalizedPath&quot;&gt;asNormalizedPath&lt;/strong&gt; (R) (ruta R)</target>
        </trans-unit>
        <trans-unit id="57180f0a27a60585e7d35fdc96936f5f435a23b4" translate="yes" xml:space="preserve">
          <source>auto &lt;strong id=&quot;asRelativePath&quot;&gt;asRelativePath&lt;/strong&gt;(CaseSensitive cs = CaseSensitive.osDefault, R1, R2)(R1 path, R2 base)</source>
          <target state="translated">auto &lt;strong id=&quot;asRelativePath&quot;&gt;asRelativePath&lt;/strong&gt; (CaseSensitive cs = CaseSensitive.osDefault, R1, R2) (ruta R1, base R2)</target>
        </trans-unit>
        <trans-unit id="809bcfd069a1c8a98904b044c06d232fe8e66e7b" translate="yes" xml:space="preserve">
          <source>auto &lt;strong id=&quot;asUpperCase&quot;&gt;asUpperCase&lt;/strong&gt;(Range)(Range str)</source>
          <target state="translated">auto &lt;strong id=&quot;asUpperCase&quot;&gt;asUpperCase&lt;/strong&gt; (Range) (Range str)</target>
        </trans-unit>
        <trans-unit id="f7368f4243838f777eb6002890100bcdb664e67c" translate="yes" xml:space="preserve">
          <source>auto &lt;strong id=&quot;assertNotThrown&quot;&gt;assertNotThrown&lt;/strong&gt;(T : Throwable = Exception, E)(lazy E expression, string msg = null, string file = __FILE__, size_t line = __LINE__);</source>
          <target state="translated">auto &lt;strong id=&quot;assertNotThrown&quot;&gt;ClaimNotThrown&lt;/strong&gt; (T: Throwable = Exception, E) (expresi&amp;oacute;n E perezosa, cadena msg = nulo, archivo de cadena = __FILE__, size_t line = __LINE__);</target>
        </trans-unit>
        <trans-unit id="eff34e9ca40f715750af5f99098a9c45795537e4" translate="yes" xml:space="preserve">
          <source>auto &lt;strong id=&quot;assocArray&quot;&gt;assocArray&lt;/strong&gt;(Keys, Values)(Keys keys, Values values)</source>
          <target state="translated">auto &lt;strong id=&quot;assocArray&quot;&gt;assocArray&lt;/strong&gt; (claves, valores) (claves de claves, valores de valores)</target>
        </trans-unit>
        <trans-unit id="e668921ba170ad6f6ae120eaaad29e30fbd82863" translate="yes" xml:space="preserve">
          <source>auto &lt;strong id=&quot;assocArray&quot;&gt;assocArray&lt;/strong&gt;(Range)(Range r)</source>
          <target state="translated">auto &lt;strong id=&quot;assocArray&quot;&gt;assocArray&lt;/strong&gt; (Rango) (Rango r)</target>
        </trans-unit>
        <trans-unit id="64277e4c6b1ba77f8acd0d628f0ce3b45c1c491f" translate="yes" xml:space="preserve">
          <source>auto &lt;strong id=&quot;assumeSorted&quot;&gt;assumeSorted&lt;/strong&gt;(alias pred = &quot;a &amp;lt; b&quot;, R)(R r)</source>
          <target state="translated">Auto &lt;strong id=&quot;assumeSorted&quot;&gt;asumir clasificado&lt;/strong&gt; (alias pred = &quot;a &amp;lt;b&quot;, R) (R r)</target>
        </trans-unit>
        <trans-unit id="420daff97ec8c5be07db44ceda2eb3bd5a49a916" translate="yes" xml:space="preserve">
          <source>auto &lt;strong id=&quot;asyncBuf&quot;&gt;asyncBuf&lt;/strong&gt;(C1, C2)(C1 next, C2 empty, size_t initialBufSize = 0, size_t nBuffers = 100)</source>
          <target state="translated">Auto &lt;strong id=&quot;asyncBuf&quot;&gt;asyncBuf&lt;/strong&gt; (C1, C2) (C1 siguiente, C2 vac&amp;iacute;o, size_t initialBufSize = 0, size_t nBuffers = 100)</target>
        </trans-unit>
        <trans-unit id="218c10410f02a28931edbeaa07d029494fcd3b8f" translate="yes" xml:space="preserve">
          <source>auto &lt;strong id=&quot;asyncBuf&quot;&gt;asyncBuf&lt;/strong&gt;(S)(S source, size_t bufSize = 100)</source>
          <target state="translated">auto &lt;strong id=&quot;asyncBuf&quot;&gt;asyncBuf&lt;/strong&gt; (S) (fuente S, size_t bufSize = 100)</target>
        </trans-unit>
        <trans-unit id="f31217a2c87805efb9f2dc6fd74dffaec12065f1" translate="yes" xml:space="preserve">
          <source>auto &lt;strong id=&quot;baseName&quot;&gt;baseName&lt;/strong&gt;(C)(C[] path)</source>
          <target state="translated">auto &lt;strong id=&quot;baseName&quot;&gt;baseName&lt;/strong&gt; (C) (ruta C [])</target>
        </trans-unit>
        <trans-unit id="1c2e76194eacf1c40ceeeb022912ad760727ffa5" translate="yes" xml:space="preserve">
          <source>auto &lt;strong id=&quot;baseName&quot;&gt;baseName&lt;/strong&gt;(R)(R path)</source>
          <target state="translated">auto &lt;strong id=&quot;baseName&quot;&gt;baseName&lt;/strong&gt; (R) (ruta R)</target>
        </trans-unit>
        <trans-unit id="58eb55c4eb0fd656e12c2c9d8623f4258b4ab880" translate="yes" xml:space="preserve">
          <source>auto &lt;strong id=&quot;bitwise&quot;&gt;bitwise&lt;/strong&gt;(R)(auto ref R range)</source>
          <target state="translated">auto &lt;strong id=&quot;bitwise&quot;&gt;bitwise&lt;/strong&gt; (R) (rango autom&amp;aacute;tico de referencia R)</target>
        </trans-unit>
        <trans-unit id="175ec2b854bd8803049925d589f07be30c950ca2" translate="yes" xml:space="preserve">
          <source>auto &lt;strong id=&quot;bmatch&quot;&gt;bmatch&lt;/strong&gt;(R, RegEx)(R input, RegEx re)</source>
          <target state="translated">&lt;strong id=&quot;bmatch&quot;&gt;bmatch&lt;/strong&gt; autom&amp;aacute;tico (R, RegEx) (entrada R, RegEx re)</target>
        </trans-unit>
        <trans-unit id="3fab8d4b386295b2b1af8d1583752fd309b90f9a" translate="yes" xml:space="preserve">
          <source>auto &lt;strong id=&quot;bmatch&quot;&gt;bmatch&lt;/strong&gt;(R, String)(R input, String re)</source>
          <target state="translated">auto &lt;strong id=&quot;bmatch&quot;&gt;bmatch&lt;/strong&gt; (R, String) (entrada R, String re)</target>
        </trans-unit>
        <trans-unit id="7c69463ae3ccbfc076bf8ac77e10d860b1f632b2" translate="yes" xml:space="preserve">
          <source>auto &lt;strong id=&quot;byChunk&quot;&gt;byChunk&lt;/strong&gt;(Conn = AutoProtocol)(const(char)[] url, size_t chunkSize = 1024, Conn conn = Conn())</source>
          <target state="translated">auto &lt;strong id=&quot;byChunk&quot;&gt;byChunk&lt;/strong&gt; (Conn = AutoProtocol) (const (char) [] url, size_t chunkSize = 1024, Conn conn = Conn ())</target>
        </trans-unit>
        <trans-unit id="3b106e515d080a55dd2f7f6a1b68f25cdeef23f6" translate="yes" xml:space="preserve">
          <source>auto &lt;strong id=&quot;byChunk&quot;&gt;byChunk&lt;/strong&gt;(size_t chunkSize);</source>
          <target state="translated">auto &lt;strong id=&quot;byChunk&quot;&gt;byChunk&lt;/strong&gt; (size_t chunkSize);</target>
        </trans-unit>
        <trans-unit id="8cbffabd520bbe76baddd8e94b551d403f19bdfb" translate="yes" xml:space="preserve">
          <source>auto &lt;strong id=&quot;byChunk&quot;&gt;byChunk&lt;/strong&gt;(ubyte[] buffer);</source>
          <target state="translated">auto &lt;strong id=&quot;byChunk&quot;&gt;byChunk&lt;/strong&gt; (b&amp;uacute;fer ubyte []);</target>
        </trans-unit>
        <trans-unit id="0e8a18742bab9c6bcb8ce5b23f5a9cfebb1390b7" translate="yes" xml:space="preserve">
          <source>auto &lt;strong id=&quot;byChunkAsync&quot;&gt;byChunkAsync&lt;/strong&gt;(Conn = AutoProtocol)(const(char)[] url, size_t chunkSize = 1024, size_t transmitBuffers = 10, Conn conn = Conn())</source>
          <target state="translated">auto &lt;strong id=&quot;byChunkAsync&quot;&gt;byChunkAsync&lt;/strong&gt; (Conn = AutoProtocol) (const (char) [] url, size_t chunkSize = 1024, size_t transmitBuffers = 10, Conn conn = Conn ())</target>
        </trans-unit>
        <trans-unit id="b3d988c25700617eb34278fba5fbf6a71636da6f" translate="yes" xml:space="preserve">
          <source>auto &lt;strong id=&quot;byChunkAsync&quot;&gt;byChunkAsync&lt;/strong&gt;(Conn = AutoProtocol, PostUnit)(const(char)[] url, const(PostUnit)[] postData, size_t chunkSize = 1024, size_t transmitBuffers = 10, Conn conn = Conn())</source>
          <target state="translated">auto &lt;strong id=&quot;byChunkAsync&quot;&gt;byChunkAsync&lt;/strong&gt; (Conn = AutoProtocol, PostUnit) (const (char) [] url, const (PostUnit) [] postData, size_t chunkSize = 1024, size_t transmitBuffers = 10, Conn conn = Conn ())</target>
        </trans-unit>
        <trans-unit id="d0183ad76ec20cd9e274f58c8f8606fa696816d4" translate="yes" xml:space="preserve">
          <source>auto &lt;strong id=&quot;byCodePoint&quot;&gt;byCodePoint&lt;/strong&gt;(Range)(Range range)</source>
          <target state="translated">auto &lt;strong id=&quot;byCodePoint&quot;&gt;byCodePoint&lt;/strong&gt; (Range) (Rango rango)</target>
        </trans-unit>
        <trans-unit id="ce6807cf5fb207b1e71c42e39f041729da57415a" translate="yes" xml:space="preserve">
          <source>auto &lt;strong id=&quot;byCodeUnit&quot;&gt;byCodeUnit&lt;/strong&gt;(R)(R r)</source>
          <target state="translated">auto &lt;strong id=&quot;byCodeUnit&quot;&gt;byCodeUnit&lt;/strong&gt; (R) (R r)</target>
        </trans-unit>
        <trans-unit id="702797bacb69766dd653f3dd74d0029c772abb75" translate="yes" xml:space="preserve">
          <source>auto &lt;strong id=&quot;byGrapheme&quot;&gt;byGrapheme&lt;/strong&gt;(Range)(Range range)</source>
          <target state="translated">auto &lt;strong id=&quot;byGrapheme&quot;&gt;byGrapheme&lt;/strong&gt; (Rango) (Rango rango)</target>
        </trans-unit>
        <trans-unit id="2ae95c6d8f3c5ec95a67c8f7363eafb6f6c8c0c4" translate="yes" xml:space="preserve">
          <source>auto &lt;strong id=&quot;byLine&quot;&gt;byLine&lt;/strong&gt;(Conn = AutoProtocol, Terminator = char, Char = char)(const(char)[] url, KeepTerminator keepTerminator = No.keepTerminator, Terminator terminator = '\x0a', Conn conn = Conn())</source>
          <target state="translated">auto &lt;strong id=&quot;byLine&quot;&gt;byLine&lt;/strong&gt; (Conn = AutoProtocol, Terminator = char, Char = char) (const (char) [] url, KeepTerminator keepTerminator = No.keepTerminator, Terminator terminator = '\ x0a', Conn conn = Conn ())</target>
        </trans-unit>
        <trans-unit id="66c1db7c48e4620a63c898f304f27a29a1d175f6" translate="yes" xml:space="preserve">
          <source>auto &lt;strong id=&quot;byLine&quot;&gt;byLine&lt;/strong&gt;(Terminator = char, Char = char)(KeepTerminator keepTerminator = No.keepTerminator, Terminator terminator = '\x0a')</source>
          <target state="translated">auto &lt;strong id=&quot;byLine&quot;&gt;byLine&lt;/strong&gt; (Terminator = char, Char = char) (KeepTerminator keepTerminator = No.keepTerminator, Terminator terminator = '\ x0a')</target>
        </trans-unit>
        <trans-unit id="46c28ce4e9b50a19ee6b91be2a80fc70b2dce7b0" translate="yes" xml:space="preserve">
          <source>auto &lt;strong id=&quot;byLine&quot;&gt;byLine&lt;/strong&gt;(Terminator, Char = char)(KeepTerminator keepTerminator, Terminator terminator)</source>
          <target state="translated">auto &lt;strong id=&quot;byLine&quot;&gt;byLine&lt;/strong&gt; (Terminator, Char = char) (KeepTerminator keepTerminator, Terminator terminator)</target>
        </trans-unit>
        <trans-unit id="b1d1a56f4715271a1de44c754b6d54a41794dd50" translate="yes" xml:space="preserve">
          <source>auto &lt;strong id=&quot;byLineAsync&quot;&gt;byLineAsync&lt;/strong&gt;(Conn = AutoProtocol, Terminator = char, Char = char)(const(char)[] url, KeepTerminator keepTerminator = No.keepTerminator, Terminator terminator = '\x0a', size_t transmitBuffers = 10, Conn conn = Conn());</source>
          <target state="translated">auto &lt;strong id=&quot;byLineAsync&quot;&gt;byLineAsync&lt;/strong&gt; (Conn = AutoProtocol, Terminator = char, Char = char) (const (char) [] url, KeepTerminator keepTerminator = No.keepTerminator, Terminator terminator = '\ x0a', size_t transmitBuffers = 10, Conn conn = Conn () );</target>
        </trans-unit>
        <trans-unit id="550ac82bb49e5f1e965a1934715668e53776afaa" translate="yes" xml:space="preserve">
          <source>auto &lt;strong id=&quot;byLineAsync&quot;&gt;byLineAsync&lt;/strong&gt;(Conn = AutoProtocol, Terminator = char, Char = char, PostUnit)(const(char)[] url, const(PostUnit)[] postData, KeepTerminator keepTerminator = No.keepTerminator, Terminator terminator = '\x0a', size_t transmitBuffers = 10, Conn conn = Conn())</source>
          <target state="translated">auto &lt;strong id=&quot;byLineAsync&quot;&gt;byLineAsync&lt;/strong&gt; (Conn = AutoProtocol, Terminator = char, Char = char, PostUnit) (const (char) [] url, const (PostUnit) [] postData, KeepTerminator keepTerminator = No.keepTerminator, Terminator terminator = '\ x0a', size_t transmitBuffers = 10, Conn conn = Conn ())</target>
        </trans-unit>
        <trans-unit id="e3960b331be57241852379e8464bfda8d7baacfd" translate="yes" xml:space="preserve">
          <source>auto &lt;strong id=&quot;byLineCopy&quot;&gt;byLineCopy&lt;/strong&gt;(Terminator = char, Char = immutable(char))(KeepTerminator keepTerminator = No.keepTerminator, Terminator terminator = '\x0a')</source>
          <target state="translated">auto &lt;strong id=&quot;byLineCopy&quot;&gt;byLineCopy&lt;/strong&gt; (Terminator = char, Char = inmutable (char)) (KeepTerminator keepTerminator = No.keepTerminator, Terminator terminator = '\ x0a')</target>
        </trans-unit>
        <trans-unit id="53ce15f9a79854c3dccc9cde64d9d639eb27e355" translate="yes" xml:space="preserve">
          <source>auto &lt;strong id=&quot;byLineCopy&quot;&gt;byLineCopy&lt;/strong&gt;(Terminator, Char = immutable(char))(KeepTerminator keepTerminator, Terminator terminator)</source>
          <target state="translated">auto &lt;strong id=&quot;byLineCopy&quot;&gt;byLineCopy&lt;/strong&gt; (Terminator, Char = inmutable (char)) (KeepTerminator keepTerminator, Terminator terminator)</target>
        </trans-unit>
        <trans-unit id="012ade6220225190b4bff7b4c458b342a3f7bee0" translate="yes" xml:space="preserve">
          <source>auto &lt;strong id=&quot;byPair&quot;&gt;byPair&lt;/strong&gt;(AA)(AA aa)</source>
          <target state="translated">auto &lt;strong id=&quot;byPair&quot;&gt;byPair&lt;/strong&gt; (AA) (AA aa)</target>
        </trans-unit>
        <trans-unit id="ef291c9fa74e62ea2c0ba05c393434b1d96acb80" translate="yes" xml:space="preserve">
          <source>auto &lt;strong id=&quot;byRecord&quot;&gt;byRecord&lt;/strong&gt;(Fields...)(string format);</source>
          <target state="translated">auto &lt;strong id=&quot;byRecord&quot;&gt;byRecord&lt;/strong&gt; (Campos ...) (formato de cadena);</target>
        </trans-unit>
        <trans-unit id="9028431d474e8add451fe788a84d48eadb90f787" translate="yes" xml:space="preserve">
          <source>auto &lt;strong id=&quot;cache&quot;&gt;cache&lt;/strong&gt;(Range)(Range range)</source>
          <target state="translated">&lt;strong id=&quot;cache&quot;&gt;cach&amp;eacute;&lt;/strong&gt; autom&amp;aacute;tico (Rango) (Rango de rango)</target>
        </trans-unit>
        <trans-unit id="e62b00ed629f9e1c8e5e7a5cc180de042715f2eb" translate="yes" xml:space="preserve">
          <source>auto &lt;strong id=&quot;cacheBidirectional&quot;&gt;cacheBidirectional&lt;/strong&gt;(Range)(Range range)</source>
          <target state="translated">&lt;strong id=&quot;cacheBidirectional&quot;&gt;cach&amp;eacute;&lt;/strong&gt; autom&amp;aacute;tico: &lt;strong id=&quot;cacheBidirectional&quot;&gt;bidireccional&lt;/strong&gt; (rango) (rango rango)</target>
        </trans-unit>
        <trans-unit id="772b22c64fc586a1e8e6f72451cdb21bc0c14cd3" translate="yes" xml:space="preserve">
          <source>auto &lt;strong id=&quot;cartesianProduct&quot;&gt;cartesianProduct&lt;/strong&gt;(R1, R2)(R1 range1, R2 range2)</source>
          <target state="translated">auto &lt;strong id=&quot;cartesianProduct&quot;&gt;cartesianProduct&lt;/strong&gt; (R1, R2) (R1 rango1, R2 rango2)</target>
        </trans-unit>
        <trans-unit id="53bca197d5d728e71ffd2ab880ff0e81df6c6cf8" translate="yes" xml:space="preserve">
          <source>auto &lt;strong id=&quot;cartesianProduct&quot;&gt;cartesianProduct&lt;/strong&gt;(R1, R2, RR...)(R1 range1, R2 range2, RR otherRanges)</source>
          <target state="translated">auto &lt;strong id=&quot;cartesianProduct&quot;&gt;cartesianProduct&lt;/strong&gt; (R1, R2, RR ...) (R1 rango1, R2 rango2, RR otros rangos)</target>
        </trans-unit>
        <trans-unit id="2517319db0608e75c4ac7d99d24aea09e7da1ad6" translate="yes" xml:space="preserve">
          <source>auto &lt;strong id=&quot;cartesianProduct&quot;&gt;cartesianProduct&lt;/strong&gt;(RR...)(RR ranges)</source>
          <target state="translated">auto &lt;strong id=&quot;cartesianProduct&quot;&gt;cartesianProduct&lt;/strong&gt; (RR ...) (rangos RR)</target>
        </trans-unit>
        <trans-unit id="017fa4e7a02753bac6df3a86f4153edfa80c9cfb" translate="yes" xml:space="preserve">
          <source>auto &lt;strong id=&quot;castSwitch&quot;&gt;castSwitch&lt;/strong&gt;(choices...)(Object switchObject);</source>
          <target state="translated">auto &lt;strong id=&quot;castSwitch&quot;&gt;castSwitch&lt;/strong&gt; (opciones ...) (Object switchObject);</target>
        </trans-unit>
        <trans-unit id="7fc4f3cf28b0f4821f61b453dc9415e6a3f841cc" translate="yes" xml:space="preserve">
          <source>auto &lt;strong id=&quot;centerJustifier&quot;&gt;centerJustifier&lt;/strong&gt;(Range)(Range r, size_t width, dchar fillChar = ' ')</source>
          <target state="translated">auto &lt;strong id=&quot;centerJustifier&quot;&gt;centerJustifier&lt;/strong&gt; (Range) (Range r, size_t width, dchar fillChar = '')</target>
        </trans-unit>
        <trans-unit id="a4c70f6b7dbfa3af0c1a130181c5b9b886aacb13" translate="yes" xml:space="preserve">
          <source>auto &lt;strong id=&quot;chain&quot;&gt;chain&lt;/strong&gt;(Ranges...)(Ranges rs)</source>
          <target state="translated">&lt;strong id=&quot;chain&quot;&gt;cadena&lt;/strong&gt; autom&amp;aacute;tica (Rangos ...) (Rangos rs)</target>
        </trans-unit>
        <trans-unit id="3e8c8c4e9f330111fcbc2413553c4a9d1fb62191" translate="yes" xml:space="preserve">
          <source>auto &lt;strong id=&quot;chainPath&quot;&gt;chainPath&lt;/strong&gt;(R1, R2, Ranges...)(R1 r1, R2 r2, Ranges ranges)</source>
          <target state="translated">Auto &lt;strong id=&quot;chainPath&quot;&gt;chainPath&lt;/strong&gt; (R1, R2, Rangos ...) (R1 r1, R2 r2, Rangos)</target>
        </trans-unit>
        <trans-unit id="428a0e16f8ce88b3bfe799b9b32f170900c1e96a" translate="yes" xml:space="preserve">
          <source>auto &lt;strong id=&quot;choose&quot;&gt;choose&lt;/strong&gt;(R1, R2)(bool condition, return scope R1 r1, return scope R2 r2)</source>
          <target state="translated">auto &lt;strong id=&quot;choose&quot;&gt;elegir&lt;/strong&gt; (R1, R2) (condici&amp;oacute;n bool, el alcance de retorno R1 r1, el alcance de retorno R2 r2)</target>
        </trans-unit>
        <trans-unit id="7a7d7df15157ad0c119ec9247eeb96a6e12854e5" translate="yes" xml:space="preserve">
          <source>auto &lt;strong id=&quot;chooseAmong&quot;&gt;chooseAmong&lt;/strong&gt;(Ranges...)(size_t index, return scope Ranges rs)</source>
          <target state="translated">auto &lt;strong id=&quot;chooseAmong&quot;&gt;chooseAmong&lt;/strong&gt; (Rangos ...) (&amp;iacute;ndice size_t, rango de retorno Rangos rs)</target>
        </trans-unit>
        <trans-unit id="b117d318ac67d2ac0d3661c027ce2ba7fb1d1bd9" translate="yes" xml:space="preserve">
          <source>auto &lt;strong id=&quot;chunkBy&quot;&gt;chunkBy&lt;/strong&gt;(alias pred, Range)(Range r)</source>
          <target state="translated">Auto &lt;strong id=&quot;chunkBy&quot;&gt;Chunk By&lt;/strong&gt; (alias pred, Range) (Range r)</target>
        </trans-unit>
        <trans-unit id="bc3bc60d1f2f0fe8369d2b1b5660c2d678f21d05" translate="yes" xml:space="preserve">
          <source>auto &lt;strong id=&quot;chunks&quot;&gt;chunks&lt;/strong&gt;(File f, size_t size);</source>
          <target state="translated">&lt;strong id=&quot;chunks&quot;&gt;trozos&lt;/strong&gt; autom&amp;aacute;ticos (Archivo f, tama&amp;ntilde;o_t tama&amp;ntilde;o);</target>
        </trans-unit>
        <trans-unit id="5e0e1ba55ad133711c05c19fc320e50d8357685b" translate="yes" xml:space="preserve">
          <source>auto &lt;strong id=&quot;clamp&quot;&gt;clamp&lt;/strong&gt;(T1, T2, T3)(T1 val, T2 lower, T3 upper);</source>
          <target state="translated">&lt;strong id=&quot;clamp&quot;&gt;abrazadera&lt;/strong&gt; autom&amp;aacute;tica (T1, T2, T3) (T1 val, T2 inferior, T3 superior);</target>
        </trans-unit>
        <trans-unit id="db16410fc1b5c05afc416fff2548cfd7a16a62b8" translate="yes" xml:space="preserve">
          <source>auto &lt;strong id=&quot;cmp&quot;&gt;cmp&lt;/strong&gt;(R1, R2)(R1 r1, R2 r2)</source>
          <target state="translated">auto &lt;strong id=&quot;cmp&quot;&gt;cmp&lt;/strong&gt; (R1, R2) (R1 r1, R2 r2)</target>
        </trans-unit>
        <trans-unit id="7d506219b0b34104df551c83913bea33afb7320b" translate="yes" xml:space="preserve">
          <source>auto &lt;strong id=&quot;codepointTrie&quot;&gt;codepointTrie&lt;/strong&gt;()(T[dchar] map, T defValue = T.init);</source>
          <target state="translated">&lt;strong id=&quot;codepointTrie&quot;&gt;codepoint&lt;/strong&gt; autom&amp;aacute;ticoTrie () (mapa T [dchar], T defValue = T.init);</target>
        </trans-unit>
        <trans-unit id="55a053896b3886d274d74bb7ea2302cfc3c1a699" translate="yes" xml:space="preserve">
          <source>auto &lt;strong id=&quot;codepointTrie&quot;&gt;codepointTrie&lt;/strong&gt;(R)(R range, T defValue = T.init)</source>
          <target state="translated">&lt;strong id=&quot;codepointTrie&quot;&gt;codepoint&lt;/strong&gt; autom&amp;aacute;tico &lt;strong id=&quot;codepointTrie&quot;&gt;Trie&lt;/strong&gt; (R) (rango R, T defValue = T.init)</target>
        </trans-unit>
        <trans-unit id="97aa5627fd1e455cbb62874d4ed9896686ad56cb" translate="yes" xml:space="preserve">
          <source>auto &lt;strong id=&quot;commonPrefix&quot;&gt;commonPrefix&lt;/strong&gt;(R1, R2)(R1 r1, R2 r2)</source>
          <target state="translated">auto &lt;strong id=&quot;commonPrefix&quot;&gt;commonPrefix&lt;/strong&gt; (R1, R2) (R1 r1, R2 r2)</target>
        </trans-unit>
        <trans-unit id="6ce8faf4427926f721728515bc7c72af1ca2457c" translate="yes" xml:space="preserve">
          <source>auto &lt;strong id=&quot;commonPrefix&quot;&gt;commonPrefix&lt;/strong&gt;(alias pred = &quot;a == b&quot;, R1, R2)(R1 r1, R2 r2)</source>
          <target state="translated">auto &lt;strong id=&quot;commonPrefix&quot;&gt;commonPrefix&lt;/strong&gt; (alias pred = &quot;a == b&quot;, R1, R2) (R1 r1, R2 r2)</target>
        </trans-unit>
        <trans-unit id="a99ce69be709871ba3f761b12b1d9b93fb987e6e" translate="yes" xml:space="preserve">
          <source>auto &lt;strong id=&quot;commonPrefix&quot;&gt;commonPrefix&lt;/strong&gt;(alias pred, R1, R2)(R1 r1, R2 r2)</source>
          <target state="translated">auto &lt;strong id=&quot;commonPrefix&quot;&gt;commonPrefix&lt;/strong&gt; (alias pred, R1, R2) (R1 r1, R2 r2)</target>
        </trans-unit>
        <trans-unit id="e030527c5ac36972d0c259bf273a543135e6d985" translate="yes" xml:space="preserve">
          <source>auto &lt;strong id=&quot;csvReader&quot;&gt;csvReader&lt;/strong&gt;(Contents = string, Malformed ErrorLevel = Malformed.throwException, Range, Header, Separator = char)(Range input, Header header, Separator delimiter = ',', Separator quote = '&quot;')</source>
          <target state="translated">auto &lt;strong id=&quot;csvReader&quot;&gt;csvReader&lt;/strong&gt; (Contenido = cadena, Nivel de error incorrecto = Malformed.throwException, Range, Header, Separator = char) (Entrada de rango, Encabezado de encabezado, Delimitador de separador = ',', Comilla de separador = '&quot;')</target>
        </trans-unit>
        <trans-unit id="a704597facbf16a0abd1ead5169214cf86b3081b" translate="yes" xml:space="preserve">
          <source>auto &lt;strong id=&quot;csvReader&quot;&gt;csvReader&lt;/strong&gt;(Contents = string, Malformed ErrorLevel = Malformed.throwException, Range, Separator = char)(Range input, Separator delimiter = ',', Separator quote = '&quot;')</source>
          <target state="translated">auto &lt;strong id=&quot;csvReader&quot;&gt;csvReader&lt;/strong&gt; (Contenido = cadena, Error de nivel de error = Malformed.throwException, Range, Separator = char) (Entrada de rango, delimitador de separador = ',', comilla de separador = '&quot;')</target>
        </trans-unit>
        <trans-unit id="de807c8ebe0936bf7e0c5a6685a064539d6c3b6b" translate="yes" xml:space="preserve">
          <source>auto &lt;strong id=&quot;cumulativeFold&quot;&gt;cumulativeFold&lt;/strong&gt;(R)(R range)</source>
          <target state="translated">&lt;strong id=&quot;cumulativeFold&quot;&gt;Plegado&lt;/strong&gt; autom&amp;aacute;tico (R) (rango R)</target>
        </trans-unit>
        <trans-unit id="90f4288135ee9335759e95a1b98f2e9ea964570c" translate="yes" xml:space="preserve">
          <source>auto &lt;strong id=&quot;cumulativeFold&quot;&gt;cumulativeFold&lt;/strong&gt;(R, S)(R range, S seed)</source>
          <target state="translated">&lt;strong id=&quot;cumulativeFold&quot;&gt;plegado&lt;/strong&gt; autom&amp;aacute;tico (R, S) (rango R, semilla S)</target>
        </trans-unit>
        <trans-unit id="e5a2994d678f5a155fcb73be94576302909b9f99" translate="yes" xml:space="preserve">
          <source>auto &lt;strong id=&quot;cycle&quot;&gt;cycle&lt;/strong&gt;(R)(R input)</source>
          <target state="translated">&lt;strong id=&quot;cycle&quot;&gt;ciclo&lt;/strong&gt; autom&amp;aacute;tico (R) (entrada R)</target>
        </trans-unit>
        <trans-unit id="7ef9abdb1d1c105aece2ff82123d22a2820fb2fa" translate="yes" xml:space="preserve">
          <source>auto &lt;strong id=&quot;detabber&quot;&gt;detabber&lt;/strong&gt;(Range)(Range r, size_t tabSize = 8)</source>
          <target state="translated">&lt;strong id=&quot;detabber&quot;&gt;separador&lt;/strong&gt; autom&amp;aacute;tico (Rango) (Rango r, size_t tabSize = 8)</target>
        </trans-unit>
        <trans-unit id="ef486dfb844496a3be88f9756579c58723663929" translate="yes" xml:space="preserve">
          <source>auto &lt;strong id=&quot;dirEntries&quot;&gt;dirEntries&lt;/strong&gt;(string path, SpanMode mode, bool followSymlink = true);</source>
          <target state="translated">auto &lt;strong id=&quot;dirEntries&quot;&gt;dirEntries&lt;/strong&gt; (ruta de cadena, modo SpanMode, bool followSymlink = true);</target>
        </trans-unit>
        <trans-unit id="f0ecde02f51c7fefa0cf409848398e020a8ec3ae" translate="yes" xml:space="preserve">
          <source>auto &lt;strong id=&quot;dirEntries&quot;&gt;dirEntries&lt;/strong&gt;(string path, string pattern, SpanMode mode, bool followSymlink = true);</source>
          <target state="translated">&lt;strong id=&quot;dirEntries&quot;&gt;entradas de directorio&lt;/strong&gt; autom&amp;aacute;tico (ruta de cadena, patr&amp;oacute;n de cadena, modo SpanMode, bool followSymlink = true);</target>
        </trans-unit>
        <trans-unit id="63d5ed8d5ba6c4c69851ff8bbcfb3246394f4cc1" translate="yes" xml:space="preserve">
          <source>auto &lt;strong id=&quot;dirName&quot;&gt;dirName&lt;/strong&gt;(C)(C[] path)</source>
          <target state="translated">auto &lt;strong id=&quot;dirName&quot;&gt;dirName&lt;/strong&gt; (C) (ruta C [])</target>
        </trans-unit>
        <trans-unit id="f63f73c1266905f27cd1b1d04dfa69cbfa4c728a" translate="yes" xml:space="preserve">
          <source>auto &lt;strong id=&quot;dirName&quot;&gt;dirName&lt;/strong&gt;(R)(R path)</source>
          <target state="translated">auto &lt;strong id=&quot;dirName&quot;&gt;dirName&lt;/strong&gt; (R) (ruta R)</target>
        </trans-unit>
        <trans-unit id="8b290519d38fcc92451afdac662def7071a7c2a5" translate="yes" xml:space="preserve">
          <source>auto &lt;strong id=&quot;driveName&quot;&gt;driveName&lt;/strong&gt;(C)(C[] path)</source>
          <target state="translated">auto &lt;strong id=&quot;driveName&quot;&gt;driveName&lt;/strong&gt; (C) (ruta C [])</target>
        </trans-unit>
        <trans-unit id="f771cf73351361ba9cf3c8dd4f87c7a39f5eaab7" translate="yes" xml:space="preserve">
          <source>auto &lt;strong id=&quot;driveName&quot;&gt;driveName&lt;/strong&gt;(R)(R path)</source>
          <target state="translated">auto &lt;strong id=&quot;driveName&quot;&gt;driveName&lt;/strong&gt; (R) (ruta R)</target>
        </trans-unit>
        <trans-unit id="bc8e59108f42067aebdb8582df9085989b87adb1" translate="yes" xml:space="preserve">
          <source>auto &lt;strong id=&quot;entab&quot;&gt;entab&lt;/strong&gt;(Range)(Range s, size_t tabSize = 8)</source>
          <target state="translated">auto &lt;strong id=&quot;entab&quot;&gt;entab&lt;/strong&gt; (Range) (Range s, size_t tabSize = 8)</target>
        </trans-unit>
        <trans-unit id="703a66bbf90f0648c370454e32102fc84b3ddc3c" translate="yes" xml:space="preserve">
          <source>auto &lt;strong id=&quot;entabber&quot;&gt;entabber&lt;/strong&gt;(Range)(Range r, size_t tabSize = 8)</source>
          <target state="translated">auto &lt;strong id=&quot;entabber&quot;&gt;entabber&lt;/strong&gt; (Range) (Range r, size_t tabSize = 8)</target>
        </trans-unit>
        <trans-unit id="77653a1e83826c1f357c43f92315cd4ad2aea4c3" translate="yes" xml:space="preserve">
          <source>auto &lt;strong id=&quot;enumerate&quot;&gt;enumerate&lt;/strong&gt;(Enumerator = size_t, Range)(Range range, Enumerator start = 0)</source>
          <target state="translated">&lt;strong id=&quot;enumerate&quot;&gt;enumerar&lt;/strong&gt; autom&amp;aacute;ticamente (Enumerator = size_t, Range) (Range range, Enumerator start = 0)</target>
        </trans-unit>
        <trans-unit id="4806534a94ae76c86f42f5e98cfd86545af1db80" translate="yes" xml:space="preserve">
          <source>auto &lt;strong id=&quot;equalRange&quot;&gt;equalRange&lt;/strong&gt;(V)(V value)</source>
          <target state="translated">auto &lt;strong id=&quot;equalRange&quot;&gt;equalRange&lt;/strong&gt; (V) (valor V)</target>
        </trans-unit>
        <trans-unit id="a4fec211b084ef9eaab7f77a99856efe69a4304c" translate="yes" xml:space="preserve">
          <source>auto &lt;strong id=&quot;equalRange&quot;&gt;equalRange&lt;/strong&gt;(this This)(Elem e);</source>
          <target state="translated">auto &lt;strong id=&quot;equalRange&quot;&gt;equalRange&lt;/strong&gt; (this This) (Elem e);</target>
        </trans-unit>
        <trans-unit id="cd1f5594cb5b76eed520720927d2d8049999ed2f" translate="yes" xml:space="preserve">
          <source>auto &lt;strong id=&quot;escaper&quot;&gt;escaper&lt;/strong&gt;(Range)(Range r);</source>
          <target state="translated">auto &lt;strong id=&quot;escaper&quot;&gt;escaper&lt;/strong&gt; (Rango) (Rango r);</target>
        </trans-unit>
        <trans-unit id="b887e95b4db365894a86f6692c5f680de3686ca0" translate="yes" xml:space="preserve">
          <source>auto &lt;strong id=&quot;extension&quot;&gt;extension&lt;/strong&gt;(R)(R path)</source>
          <target state="translated">&lt;strong id=&quot;extension&quot;&gt;extensi&amp;oacute;n&lt;/strong&gt; autom&amp;aacute;tica (R) (ruta R)</target>
        </trans-unit>
        <trans-unit id="170ac7d4f6404351927813a6d291c83d4a2360f6" translate="yes" xml:space="preserve">
          <source>auto &lt;strong id=&quot;filter&quot;&gt;filter&lt;/strong&gt;(Range)(Range range)</source>
          <target state="translated">&lt;strong id=&quot;filter&quot;&gt;filtro&lt;/strong&gt; autom&amp;aacute;tico (Rango) (Rango rango)</target>
        </trans-unit>
        <trans-unit id="5bc4951b7dfa83a7a6c1a8f86eb8f80ddd06f73b" translate="yes" xml:space="preserve">
          <source>auto &lt;strong id=&quot;filterBidirectional&quot;&gt;filterBidirectional&lt;/strong&gt;(Range)(Range r)</source>
          <target state="translated">&lt;strong id=&quot;filterBidirectional&quot;&gt;filtro&lt;/strong&gt; autom&amp;aacute;tico: &lt;strong id=&quot;filterBidirectional&quot;&gt;bidireccional&lt;/strong&gt; (rango) (rango r)</target>
        </trans-unit>
        <trans-unit id="d91728be546419604d2efd27ed05fc1d7e644e38" translate="yes" xml:space="preserve">
          <source>auto &lt;strong id=&quot;findImportPaths&quot;&gt;findImportPaths&lt;/strong&gt;();</source>
          <target state="translated">auto &lt;strong id=&quot;findImportPaths&quot;&gt;findImportPaths&lt;/strong&gt; ();</target>
        </trans-unit>
        <trans-unit id="dc8c6ef593d8b69bab8bec654404832580477d4a" translate="yes" xml:space="preserve">
          <source>auto &lt;strong id=&quot;findSplit&quot;&gt;findSplit&lt;/strong&gt;(alias pred = &quot;a == b&quot;, R1, R2)(R1 haystack, R2 needle)</source>
          <target state="translated">auto &lt;strong id=&quot;findSplit&quot;&gt;findSplit&lt;/strong&gt; (alias pred = &quot;a == b&quot;, R1, R2) (pajar R1, aguja R2)</target>
        </trans-unit>
        <trans-unit id="950c0ea73d0eb117eae7bba3f303be7130422aee" translate="yes" xml:space="preserve">
          <source>auto &lt;strong id=&quot;findSplitAfter&quot;&gt;findSplitAfter&lt;/strong&gt;(alias pred = &quot;a == b&quot;, R1, R2)(R1 haystack, R2 needle)</source>
          <target state="translated">auto &lt;strong id=&quot;findSplitAfter&quot;&gt;findSplitAfter&lt;/strong&gt; (alias pred = &quot;a == b&quot;, R1, R2) (pajar R1, aguja R2)</target>
        </trans-unit>
        <trans-unit id="3858c16fe7b10dcf3153e9e575d0329ab5597775" translate="yes" xml:space="preserve">
          <source>auto &lt;strong id=&quot;findSplitBefore&quot;&gt;findSplitBefore&lt;/strong&gt;(alias pred = &quot;a == b&quot;, R1, R2)(R1 haystack, R2 needle)</source>
          <target state="translated">auto &lt;strong id=&quot;findSplitBefore&quot;&gt;findSplitBefore&lt;/strong&gt; (alias pred = &quot;a == b&quot;, R1, R2) (pajar R1, aguja R2)</target>
        </trans-unit>
        <trans-unit id="fba83cc70657467a0799e40b876cd9b7f4a2efa7" translate="yes" xml:space="preserve">
          <source>auto &lt;strong id=&quot;fold&quot;&gt;fold&lt;/strong&gt;(Args...)(Args args);</source>
          <target state="translated">&lt;strong id=&quot;fold&quot;&gt;plegado&lt;/strong&gt; autom&amp;aacute;tico (Args ...) (Args args);</target>
        </trans-unit>
        <trans-unit id="045bb21af55029d35c250d30cbc6b3fa9e61de90" translate="yes" xml:space="preserve">
          <source>auto &lt;strong id=&quot;fold&quot;&gt;fold&lt;/strong&gt;(R, S...)(R r, S seed);</source>
          <target state="translated">&lt;strong id=&quot;fold&quot;&gt;plegado&lt;/strong&gt; autom&amp;aacute;tico (R, S ...) (R r, S semilla);</target>
        </trans-unit>
        <trans-unit id="d53fe5d25f217f5ad42acf348bccc2f7d8bb9f73" translate="yes" xml:space="preserve">
          <source>auto &lt;strong id=&quot;generate&quot;&gt;generate&lt;/strong&gt;(Fun)(Fun fun)</source>
          <target state="translated">Auto &lt;strong id=&quot;generate&quot;&gt;generar&lt;/strong&gt; (diversi&amp;oacute;n) (Fun fun)</target>
        </trans-unit>
        <trans-unit id="e6158b973501ea84dc3bde61a72b2715b98a9b46" translate="yes" xml:space="preserve">
          <source>auto &lt;strong id=&quot;generate&quot;&gt;generate&lt;/strong&gt;(alias fun)()</source>
          <target state="translated">Auto &lt;strong id=&quot;generate&quot;&gt;generar&lt;/strong&gt; (divertido alias) ()</target>
        </trans-unit>
        <trans-unit id="aeaf8ded51cf46dfa4e6453fe3d0fc3bf22196df" translate="yes" xml:space="preserve">
          <source>auto &lt;strong id=&quot;groupBy&quot;&gt;groupBy&lt;/strong&gt;()();</source>
          <target state="translated">auto &lt;strong id=&quot;groupBy&quot;&gt;groupBy&lt;/strong&gt; () ();</target>
        </trans-unit>
        <trans-unit id="e52618fbfb47bbe536cd626a8213ae92cf66ea34" translate="yes" xml:space="preserve">
          <source>auto &lt;strong id=&quot;handle&quot;&gt;handle&lt;/strong&gt;(E : Throwable, RangePrimitive primitivesToHandle, alias handler, Range)(Range input)</source>
          <target state="translated">Auto &lt;strong id=&quot;handle&quot;&gt;manejo&lt;/strong&gt; (E: Throwable, RangePrimitive primitivesToHandle, alias handler, Range) (Rango de entrada)</target>
        </trans-unit>
        <trans-unit id="0f48196dda85ca2e2ba954457f82d4cc9bbc47d5" translate="yes" xml:space="preserve">
          <source>auto &lt;strong id=&quot;hmac&quot;&gt;hmac&lt;/strong&gt;(H, size_t blockSize)(scope const(ubyte)[] secret)</source>
          <target state="translated">auto &lt;strong id=&quot;hmac&quot;&gt;hmac&lt;/strong&gt; (H, size_t blockSize) (alcance const (ubyte) [] secreto)</target>
        </trans-unit>
        <trans-unit id="5814715e87acb6302b821e22dd88ec3361f8a309" translate="yes" xml:space="preserve">
          <source>auto &lt;strong id=&quot;hookOpBinary&quot;&gt;hookOpBinary&lt;/strong&gt;(string x, L, R)(L lhs, R rhs);</source>
          <target state="translated">auto &lt;strong id=&quot;hookOpBinary&quot;&gt;hookOpBinary&lt;/strong&gt; (cadena x, L, R) (L lhs, R rhs);</target>
        </trans-unit>
        <trans-unit id="1914b5af92591d78bf579a2653633f3011036ca8" translate="yes" xml:space="preserve">
          <source>auto &lt;strong id=&quot;hookOpBinaryRight&quot;&gt;hookOpBinaryRight&lt;/strong&gt;(string x, L, R)(L lhs, R rhs);</source>
          <target state="translated">auto &lt;strong id=&quot;hookOpBinaryRight&quot;&gt;hookOpBinaryRight&lt;/strong&gt; (cadena x, L, R) (L lhs, R rhs);</target>
        </trans-unit>
        <trans-unit id="ad83577b8652d6662336d0eb84c242f6a5bddffa" translate="yes" xml:space="preserve">
          <source>auto &lt;strong id=&quot;hookOpCmp&quot;&gt;hookOpCmp&lt;/strong&gt;(L, R)(L lhs, R rhs);</source>
          <target state="translated">auto &lt;strong id=&quot;hookOpCmp&quot;&gt;hookOpCmp&lt;/strong&gt; (L, R) (L lhs, R rhs);</target>
        </trans-unit>
        <trans-unit id="6a84743d54ce0fcae9de6467c1faff119dc1eea1" translate="yes" xml:space="preserve">
          <source>auto &lt;strong id=&quot;hookOpUnary&quot;&gt;hookOpUnary&lt;/strong&gt;(string x, T)(ref T v);</source>
          <target state="translated">auto &lt;strong id=&quot;hookOpUnary&quot;&gt;hookOpUnary&lt;/strong&gt; (cadena x, T) (ref T v);</target>
        </trans-unit>
        <trans-unit id="8cb86e179f48ba6280f7fd18561a65a4571d3a06" translate="yes" xml:space="preserve">
          <source>auto &lt;strong id=&quot;iota&quot;&gt;iota&lt;/strong&gt;(B, E)(B begin, E end)</source>
          <target state="translated">auto &lt;strong id=&quot;iota&quot;&gt;iota&lt;/strong&gt; (B, E) (B comienza, E finaliza)</target>
        </trans-unit>
        <trans-unit id="03f7bafda8c842a92d064c437bb0dc54d2baedb4" translate="yes" xml:space="preserve">
          <source>auto &lt;strong id=&quot;iota&quot;&gt;iota&lt;/strong&gt;(B, E, S)(B begin, E end, S step)</source>
          <target state="translated">auto &lt;strong id=&quot;iota&quot;&gt;iota&lt;/strong&gt; (B, E, S) (B comienza, E finaliza, S paso)</target>
        </trans-unit>
        <trans-unit id="9189b49ce409c54eb4e3b82585f442926adaf58a" translate="yes" xml:space="preserve">
          <source>auto &lt;strong id=&quot;iota&quot;&gt;iota&lt;/strong&gt;(E)(E end)</source>
          <target state="translated">auto &lt;strong id=&quot;iota&quot;&gt;iota&lt;/strong&gt; (E) (final E)</target>
        </trans-unit>
        <trans-unit id="97393f768a955d43bdf1b35f3b259c9497f63711" translate="yes" xml:space="preserve">
          <source>auto &lt;strong id=&quot;joiner&quot;&gt;joiner&lt;/strong&gt;(RoR)(RoR r)</source>
          <target state="translated">&lt;strong id=&quot;joiner&quot;&gt;carpintero&lt;/strong&gt; autom&amp;aacute;tico (RoR) (RoR r)</target>
        </trans-unit>
        <trans-unit id="968f61658fbc5fa7920c4fff73da7d387bae433d" translate="yes" xml:space="preserve">
          <source>auto &lt;strong id=&quot;joiner&quot;&gt;joiner&lt;/strong&gt;(RoR, Separator)(RoR r, Separator sep)</source>
          <target state="translated">Auto &lt;strong id=&quot;joiner&quot;&gt;Joiner&lt;/strong&gt; (RoR, Separator) (RoR r, Separator sep)</target>
        </trans-unit>
        <trans-unit id="4d9500452d4b9dbbee572936cba8e708de483c82" translate="yes" xml:space="preserve">
          <source>auto &lt;strong id=&quot;leftJustifier&quot;&gt;leftJustifier&lt;/strong&gt;(Range)(Range r, size_t width, dchar fillChar = ' ')</source>
          <target state="translated">auto &lt;strong id=&quot;leftJustifier&quot;&gt;leftJustifier&lt;/strong&gt; (Range) (Range r, size_t width, dchar fillChar = '')</target>
        </trans-unit>
        <trans-unit id="743cbded72ac89d39eecfdab57da331361be68ed" translate="yes" xml:space="preserve">
          <source>auto &lt;strong id=&quot;lineSplitter&quot;&gt;lineSplitter&lt;/strong&gt;(KeepTerminator keepTerm = No.keepTerminator, C)(C[] r)</source>
          <target state="translated">auto &lt;strong id=&quot;lineSplitter&quot;&gt;lineSplitter&lt;/strong&gt; (KeepTerminator keepTerm = No.keepTerminator, C) (C [] r)</target>
        </trans-unit>
        <trans-unit id="2c2b914b40107262a48797ca434b55004b9e007c" translate="yes" xml:space="preserve">
          <source>auto &lt;strong id=&quot;lineSplitter&quot;&gt;lineSplitter&lt;/strong&gt;(KeepTerminator keepTerm = No.keepTerminator, Range)(Range r)</source>
          <target state="translated">auto &lt;strong id=&quot;lineSplitter&quot;&gt;lineSplitter&lt;/strong&gt; (KeepTerminator keepTerm = No.keepTerminator, Range) (Range r)</target>
        </trans-unit>
        <trans-unit id="58bc72183a9a5d337614a90331d65ac49f3a934d" translate="yes" xml:space="preserve">
          <source>auto &lt;strong id=&quot;lockingBinaryWriter&quot;&gt;lockingBinaryWriter&lt;/strong&gt;();</source>
          <target state="translated">&lt;strong id=&quot;lockingBinaryWriter&quot;&gt;bloqueo&lt;/strong&gt; autom&amp;aacute;ticoBinaryWriter ();</target>
        </trans-unit>
        <trans-unit id="8e688b4cfea99c745c98523ca93005c61736739c" translate="yes" xml:space="preserve">
          <source>auto &lt;strong id=&quot;lowerBound&quot;&gt;lowerBound&lt;/strong&gt;(SearchPolicy sp = SearchPolicy.binarySearch, V)(V value)</source>
          <target state="translated">auto &lt;strong id=&quot;lowerBound&quot;&gt;lowerBound&lt;/strong&gt; ( &lt;strong id=&quot;lowerBound&quot;&gt;SearchPolicy&lt;/strong&gt; sp = SearchPolicy.binarySearch, V) (valor V)</target>
        </trans-unit>
        <trans-unit id="3bd3f7d767e8b1d46c71bea49d8f98bcc4b572f0" translate="yes" xml:space="preserve">
          <source>auto &lt;strong id=&quot;make&quot;&gt;make&lt;/strong&gt;(T, A...)(auto ref A args);</source>
          <target state="translated">auto &lt;strong id=&quot;make&quot;&gt;make&lt;/strong&gt; (T, A ...) (auto ref A args);</target>
        </trans-unit>
        <trans-unit id="706ae9ae17ac49cbfaabb146db77d067852ab993" translate="yes" xml:space="preserve">
          <source>auto &lt;strong id=&quot;make&quot;&gt;make&lt;/strong&gt;(T, Allocator, A...)(auto ref Allocator alloc, auto ref A args);</source>
          <target state="translated">&lt;strong id=&quot;make&quot;&gt;marca&lt;/strong&gt; autom&amp;aacute;tica (T, Allocator, A ...) (asignaci&amp;oacute;n de asignaci&amp;oacute;n de referencia autom&amp;aacute;tica, argumentos A de referencia autom&amp;aacute;tica);</target>
        </trans-unit>
        <trans-unit id="95a72adaf3a4f8f3943b69d92c80987a87e936c8" translate="yes" xml:space="preserve">
          <source>auto &lt;strong id=&quot;makeMultidimensionalArray&quot;&gt;makeMultidimensionalArray&lt;/strong&gt;(T, Allocator, size_t N)(auto ref Allocator alloc, size_t[N] lengths...);</source>
          <target state="translated">auto &lt;strong id=&quot;makeMultidimensionalArray&quot;&gt;makeMultidimensionalArray&lt;/strong&gt; (T, Allocator, size_t N) (auto ref Allocator alloc, longitudes size_t [N] ...);</target>
        </trans-unit>
        <trans-unit id="704c680701f67939bedfdc2cc0607942fb613ab0" translate="yes" xml:space="preserve">
          <source>auto &lt;strong id=&quot;map&quot;&gt;map&lt;/strong&gt;(Range)(Range r)</source>
          <target state="translated">&lt;strong id=&quot;map&quot;&gt;mapa&lt;/strong&gt; autom&amp;aacute;tico (Rango) (Rango r)</target>
        </trans-unit>
        <trans-unit id="4fb8065a94bdfb40e0d01194096be47dae0c64d5" translate="yes" xml:space="preserve">
          <source>auto &lt;strong id=&quot;map&quot;&gt;map&lt;/strong&gt;(S)(S source, size_t bufSize = 100, size_t workUnitSize = size_t.max)</source>
          <target state="translated">&lt;strong id=&quot;map&quot;&gt;mapa&lt;/strong&gt; autom&amp;aacute;tico (S) (fuente S, size_t bufSize = 100, size_t workUnitSize = size_t.max)</target>
        </trans-unit>
        <trans-unit id="33d113717b0d897aa7d8abb1686a47204dfd2067" translate="yes" xml:space="preserve">
          <source>auto &lt;strong id=&quot;match&quot;&gt;match&lt;/strong&gt;(R, RegEx)(R input, RegEx re)</source>
          <target state="translated">&lt;strong id=&quot;match&quot;&gt;coincidencia&lt;/strong&gt; autom&amp;aacute;tica (R, RegEx) (entrada R, RegEx re)</target>
        </trans-unit>
        <trans-unit id="eae71ff16a1d4d45cdbc3b39bd9b1bb888e9beb9" translate="yes" xml:space="preserve">
          <source>auto &lt;strong id=&quot;match&quot;&gt;match&lt;/strong&gt;(R, String)(R input, String re)</source>
          <target state="translated">&lt;strong id=&quot;match&quot;&gt;coincidencia&lt;/strong&gt; autom&amp;aacute;tica (R, String) (entrada R, String re)</target>
        </trans-unit>
        <trans-unit id="885b3f1fad11b984c2dda6ae4aecf35f79161151" translate="yes" xml:space="preserve">
          <source>auto &lt;strong id=&quot;matchAll&quot;&gt;matchAll&lt;/strong&gt;(R, RegEx)(R input, RegEx re)</source>
          <target state="translated">auto &lt;strong id=&quot;matchAll&quot;&gt;matchAll&lt;/strong&gt; (R, RegEx) (entrada R, RegEx re)</target>
        </trans-unit>
        <trans-unit id="921202d9f83cd560a7028e89921fbb8908691b15" translate="yes" xml:space="preserve">
          <source>auto &lt;strong id=&quot;matchAll&quot;&gt;matchAll&lt;/strong&gt;(R, String)(R input, String re)</source>
          <target state="translated">auto &lt;strong id=&quot;matchAll&quot;&gt;matchAll&lt;/strong&gt; (R, String) (entrada R, String re)</target>
        </trans-unit>
        <trans-unit id="1dce2ffa70d3ff0c28e842f4045c02348036c959" translate="yes" xml:space="preserve">
          <source>auto &lt;strong id=&quot;matchAll&quot;&gt;matchAll&lt;/strong&gt;(R, String)(R input, String[] re...)</source>
          <target state="translated">auto &lt;strong id=&quot;matchAll&quot;&gt;matchAll&lt;/strong&gt; (R, String) (entrada R, String [] re ...)</target>
        </trans-unit>
        <trans-unit id="bb064e8928a86d2a0797df7a49536706865530ef" translate="yes" xml:space="preserve">
          <source>auto &lt;strong id=&quot;matchFirst&quot;&gt;matchFirst&lt;/strong&gt;(R, RegEx)(R input, RegEx re)</source>
          <target state="translated">auto &lt;strong id=&quot;matchFirst&quot;&gt;matchFirst&lt;/strong&gt; (R, RegEx) (entrada R, RegEx re)</target>
        </trans-unit>
        <trans-unit id="b92a1a84dea246d6bc60c4a9a58bc2a5832aa194" translate="yes" xml:space="preserve">
          <source>auto &lt;strong id=&quot;matchFirst&quot;&gt;matchFirst&lt;/strong&gt;(R, String)(R input, String re)</source>
          <target state="translated">auto &lt;strong id=&quot;matchFirst&quot;&gt;matchFirst&lt;/strong&gt; (R, String) (entrada R, String re)</target>
        </trans-unit>
        <trans-unit id="c6723442c7547187d555fb1b6f4eeef3cb4a1d08" translate="yes" xml:space="preserve">
          <source>auto &lt;strong id=&quot;matchFirst&quot;&gt;matchFirst&lt;/strong&gt;(R, String)(R input, String[] re...)</source>
          <target state="translated">auto &lt;strong id=&quot;matchFirst&quot;&gt;matchFirst&lt;/strong&gt; (R, String) (entrada R, String [] re ...)</target>
        </trans-unit>
        <trans-unit id="653075ff2e597b32c72191e45fde5bfd37c67473" translate="yes" xml:space="preserve">
          <source>auto &lt;strong id=&quot;maxElement&quot;&gt;maxElement&lt;/strong&gt;(alias map = (a) =&amp;gt; a, Range)(Range r)</source>
          <target state="translated">auto &lt;strong id=&quot;maxElement&quot;&gt;maxElement&lt;/strong&gt; (alias map = (a) =&amp;gt; a, Range) (Range r)</target>
        </trans-unit>
        <trans-unit id="b509c2307a0acb538e6fc3e530872877f319395f" translate="yes" xml:space="preserve">
          <source>auto &lt;strong id=&quot;maxElement&quot;&gt;maxElement&lt;/strong&gt;(alias map = (a) =&amp;gt; a, Range, RangeElementType = ElementType!Range)(Range r, RangeElementType seed)</source>
          <target state="translated">auto &lt;strong id=&quot;maxElement&quot;&gt;maxElement&lt;/strong&gt; (alias map = (a) =&amp;gt; a, Range, RangeElementType = ElementType! Range) (Range r, RangeElementType seed)</target>
        </trans-unit>
        <trans-unit id="e20c90b14fd30bb2bc6bd8699d52c424649cdbc9" translate="yes" xml:space="preserve">
          <source>auto &lt;strong id=&quot;md5Of&quot;&gt;md5Of&lt;/strong&gt;(T...)(T data);</source>
          <target state="translated">auto &lt;strong id=&quot;md5Of&quot;&gt;md5Of&lt;/strong&gt; (T ...) (datos T);</target>
        </trans-unit>
        <trans-unit id="f481c58d19636f8ab7a36a828893536bb4b2b307" translate="yes" xml:space="preserve">
          <source>auto &lt;strong id=&quot;mean&quot;&gt;mean&lt;/strong&gt;(R, T)(R r, T seed)</source>
          <target state="translated">&lt;strong id=&quot;mean&quot;&gt;media&lt;/strong&gt; autom&amp;aacute;tica (R, T) (R r, T seed)</target>
        </trans-unit>
        <trans-unit id="61b60461a914ee3f8b9d7d10c3453bbf66192b29" translate="yes" xml:space="preserve">
          <source>auto &lt;strong id=&quot;measureTime&quot;&gt;measureTime&lt;/strong&gt;(alias func)()</source>
          <target state="translated">auto &lt;strong id=&quot;measureTime&quot;&gt;measureTime&lt;/strong&gt; (alias func) ()</target>
        </trans-unit>
        <trans-unit id="0b976476396e1285f974c5404c29142651fc492a" translate="yes" xml:space="preserve">
          <source>auto &lt;strong id=&quot;minElement&quot;&gt;minElement&lt;/strong&gt;(alias map = (a) =&amp;gt; a, Range)(Range r)</source>
          <target state="translated">auto &lt;strong id=&quot;minElement&quot;&gt;minElement&lt;/strong&gt; (alias map = (a) =&amp;gt; a, Range) (Range r)</target>
        </trans-unit>
        <trans-unit id="180494323d397617f57aaeef51e64ec71e26f5d1" translate="yes" xml:space="preserve">
          <source>auto &lt;strong id=&quot;minElement&quot;&gt;minElement&lt;/strong&gt;(alias map = (a) =&amp;gt; a, Range, RangeElementType = ElementType!Range)(Range r, RangeElementType seed)</source>
          <target state="translated">auto &lt;strong id=&quot;minElement&quot;&gt;minElement&lt;/strong&gt; (alias map = (a) =&amp;gt; a, Range, RangeElementType = ElementType! Range) (Range r, RangeElementType seed)</target>
        </trans-unit>
        <trans-unit id="3251e22d412c8a9d22a293fa310047b6c0b44a97" translate="yes" xml:space="preserve">
          <source>auto &lt;strong id=&quot;mmapRegionList&quot;&gt;mmapRegionList&lt;/strong&gt;(size_t bytesPerRegion);</source>
          <target state="translated">&lt;strong id=&quot;mmapRegionList&quot;&gt;mmapRegionList&lt;/strong&gt; autom&amp;aacute;tico (size_t bytesPerRegion);</target>
        </trans-unit>
        <trans-unit id="97d77d4246eb2a17f725740bace887e3046970d2" translate="yes" xml:space="preserve">
          <source>auto &lt;strong id=&quot;moveAt&quot;&gt;moveAt&lt;/strong&gt;(size_t index);</source>
          <target state="translated">auto &lt;strong id=&quot;moveAt&quot;&gt;moveAt&lt;/strong&gt; (&amp;iacute;ndice size_t);</target>
        </trans-unit>
        <trans-unit id="734ab7077721e7a46f359282daca3ee403aa3f1d" translate="yes" xml:space="preserve">
          <source>auto &lt;strong id=&quot;moveBack&quot;&gt;moveBack&lt;/strong&gt;();</source>
          <target state="translated">auto &lt;strong id=&quot;moveBack&quot;&gt;moveBack&lt;/strong&gt; ();</target>
        </trans-unit>
        <trans-unit id="f02895672dd9eae312c16bb55c54b48d76b35a63" translate="yes" xml:space="preserve">
          <source>auto &lt;strong id=&quot;moveFront&quot;&gt;moveFront&lt;/strong&gt;();</source>
          <target state="translated">auto &lt;strong id=&quot;moveFront&quot;&gt;moveFront&lt;/strong&gt; ();</target>
        </trans-unit>
        <trans-unit id="23e4695e65929ab9ef13a14da86d59ea8bf3ebca" translate="yes" xml:space="preserve">
          <source>auto &lt;strong id=&quot;multiwayUnion&quot;&gt;multiwayUnion&lt;/strong&gt;(alias less = &quot;a &amp;lt; b&quot;, RangeOfRanges)(RangeOfRanges ror);</source>
          <target state="translated">auto &lt;strong id=&quot;multiwayUnion&quot;&gt;multiwayUnion&lt;/strong&gt; (alias less = &quot;a &amp;lt;b&quot;, RangeOfRanges) (RangeOfRanges ror);</target>
        </trans-unit>
        <trans-unit id="d374577c313b37c35f371a4cecf741dc4894ddbc" translate="yes" xml:space="preserve">
          <source>auto &lt;strong id=&quot;nullable&quot;&gt;nullable&lt;/strong&gt;(T)(T t);</source>
          <target state="translated">auto &lt;strong id=&quot;nullable&quot;&gt;anulable&lt;/strong&gt; (T) (T t);</target>
        </trans-unit>
        <trans-unit id="bbdef18a7de79c6e2bd90b0b9b6c3f1a8a868084" translate="yes" xml:space="preserve">
          <source>auto &lt;strong id=&quot;nullable&quot;&gt;nullable&lt;/strong&gt;(alias nullValue, T)(T t)</source>
          <target state="translated">&lt;strong id=&quot;nullable&quot;&gt;anulable&lt;/strong&gt; autom&amp;aacute;ticamente (alias nullValue, T) (T t)</target>
        </trans-unit>
        <trans-unit id="8c67633a9e29956baf553ca05ab03c4b1a1398ff" translate="yes" xml:space="preserve">
          <source>auto &lt;strong id=&quot;nullableRef&quot;&gt;nullableRef&lt;/strong&gt;(T)(T* t);</source>
          <target state="translated">auto &lt;strong id=&quot;nullableRef&quot;&gt;nullableRef&lt;/strong&gt; (T) (T * t);</target>
        </trans-unit>
        <trans-unit id="f578ed3cb199649f8ed0037c741254195122b5fe" translate="yes" xml:space="preserve">
          <source>auto &lt;strong id=&quot;onOverflow&quot;&gt;onOverflow&lt;/strong&gt;(string x, Lhs)(Lhs lhs);</source>
          <target state="translated">auto &lt;strong id=&quot;onOverflow&quot;&gt;onOverflow&lt;/strong&gt; (cadena x, Lhs) (Lhs lhs);</target>
        </trans-unit>
        <trans-unit id="a1eb4a2bbf62f8e31b348fdba4b9218b88277357" translate="yes" xml:space="preserve">
          <source>auto &lt;strong id=&quot;only&quot;&gt;only&lt;/strong&gt;(Values...)(auto return ref scope Values values)</source>
          <target state="translated">&lt;strong id=&quot;only&quot;&gt;solo&lt;/strong&gt; auto (Valores ...) (valores de valores de alcance de referencia de retorno autom&amp;aacute;tico)</target>
        </trans-unit>
        <trans-unit id="36ef2ea66bdc9ee06c4d1579e66eb207aa8e6aa6" translate="yes" xml:space="preserve">
          <source>auto &lt;strong id=&quot;opAssign&quot;&gt;opAssign&lt;/strong&gt;(RefRange rhs);</source>
          <target state="translated">auto &lt;strong id=&quot;opAssign&quot;&gt;opAssign&lt;/strong&gt; (RefRange rhs);</target>
        </trans-unit>
        <trans-unit id="9113ade932ca6773d49271db1a794c040982d615" translate="yes" xml:space="preserve">
          <source>auto &lt;strong id=&quot;opBinary&quot;&gt;opBinary&lt;/strong&gt;(string op, Rhs)(const Rhs rhs)</source>
          <target state="translated">auto &lt;strong id=&quot;opBinary&quot;&gt;opBinary&lt;/strong&gt; (cadena op, Rhs) (const Rhs rhs)</target>
        </trans-unit>
        <trans-unit id="5fe1d534bb699e6df631ae774045a30b3309b10c" translate="yes" xml:space="preserve">
          <source>auto &lt;strong id=&quot;opBinary&quot;&gt;opBinary&lt;/strong&gt;(string op, T)(auto ref T t)</source>
          <target state="translated">auto &lt;strong id=&quot;opBinary&quot;&gt;opBinary&lt;/strong&gt; (cadena op, T) (auto ref T t)</target>
        </trans-unit>
        <trans-unit id="91abb40f678075fc88e283a0e6e5e386dc3341be" translate="yes" xml:space="preserve">
          <source>auto &lt;strong id=&quot;opBinary&quot;&gt;opBinary&lt;/strong&gt;(string op, U, Hook1)(Checked!(U, Hook1) rhs);</source>
          <target state="translated">auto &lt;strong id=&quot;opBinary&quot;&gt;opBinary&lt;/strong&gt; (cadena op, U, Hook1) (Comprobado! (U, Hook1) rhs);</target>
        </trans-unit>
        <trans-unit id="feef8b479c4f70d15c9e3d94aa2abc49b9648e13" translate="yes" xml:space="preserve">
          <source>auto &lt;strong id=&quot;opBinaryRight&quot;&gt;opBinaryRight&lt;/strong&gt;(string op, Lhs)(const Lhs lhs)</source>
          <target state="translated">auto &lt;strong id=&quot;opBinaryRight&quot;&gt;opBinaryRight&lt;/strong&gt; (string op, Lhs) (const Lhs lhs)</target>
        </trans-unit>
        <trans-unit id="a5f8c92be76ac7029760db956077c31516de4dc5" translate="yes" xml:space="preserve">
          <source>auto &lt;strong id=&quot;opBinaryRight&quot;&gt;opBinaryRight&lt;/strong&gt;(string op, T)(auto ref T t)</source>
          <target state="translated">auto &lt;strong id=&quot;opBinaryRight&quot;&gt;opBinaryRight&lt;/strong&gt; (string op, T) (auto ref T t)</target>
        </trans-unit>
        <trans-unit id="9e3d732503c3b58787b848541f151d2ad35cf0d5" translate="yes" xml:space="preserve">
          <source>auto &lt;strong id=&quot;opBinaryRight&quot;&gt;opBinaryRight&lt;/strong&gt;(string op, V)(V value)</source>
          <target state="translated">auto &lt;strong id=&quot;opBinaryRight&quot;&gt;opBinaryRight&lt;/strong&gt; (cadena op, V) (valor V)</target>
        </trans-unit>
        <trans-unit id="9ab35a0420d8edd8a011b8e21911effefb6d1c88" translate="yes" xml:space="preserve">
          <source>auto &lt;strong id=&quot;opCall&quot;&gt;opCall&lt;/strong&gt;(C)(scope const C[] name)</source>
          <target state="translated">auto &lt;strong id=&quot;opCall&quot;&gt;opCall&lt;/strong&gt; (C) (alcance const C [] nombre)</target>
        </trans-unit>
        <trans-unit id="6420d0a17db3e9e0726cdee69b597eeaa5044636" translate="yes" xml:space="preserve">
          <source>auto &lt;strong id=&quot;opCmp&quot;&gt;opCmp&lt;/strong&gt;(U, Hook1, this _)(Checked!(U, Hook1) rhs);</source>
          <target state="translated">auto &lt;strong id=&quot;opCmp&quot;&gt;opCmp&lt;/strong&gt; (U, Hook1, this _) (marcado! (U, Hook1) rhs);</target>
        </trans-unit>
        <trans-unit id="9cde8feda1cbb15c5e96d5426ca74b5002e2f427" translate="yes" xml:space="preserve">
          <source>auto &lt;strong id=&quot;opCmp&quot;&gt;opCmp&lt;/strong&gt;(U, this _)(const U rhs)</source>
          <target state="translated">auto &lt;strong id=&quot;opCmp&quot;&gt;opCmp&lt;/strong&gt; (U, this _) (const U rhs)</target>
        </trans-unit>
        <trans-unit id="227b831f7f78d94b3fef6b0f99e1a3faa7ac4377" translate="yes" xml:space="preserve">
          <source>auto &lt;strong id=&quot;opIndex&quot;&gt;opIndex&lt;/strong&gt;(size_t index);</source>
          <target state="translated">auto &lt;strong id=&quot;opIndex&quot;&gt;opIndex&lt;/strong&gt; (size_t index);</target>
        </trans-unit>
        <trans-unit id="254fde1d7e2494a22190ea237ef6bb6e7eb2c466" translate="yes" xml:space="preserve">
          <source>auto &lt;strong id=&quot;opIndexAssign&quot;&gt;opIndexAssign&lt;/strong&gt;(ElementType!Source newVal, size_t index);</source>
          <target state="translated">auto &lt;strong id=&quot;opIndexAssign&quot;&gt;opIndexAssign&lt;/strong&gt; ( &lt;strong id=&quot;opIndexAssign&quot;&gt;ElementType&lt;/strong&gt; ! Source newVal, size_t index);</target>
        </trans-unit>
        <trans-unit id="9bf884554423c25dd0a6c03f905a6214e1b70bf7" translate="yes" xml:space="preserve">
          <source>auto &lt;strong id=&quot;opSlice&quot;&gt;opSlice&lt;/strong&gt;();</source>
          <target state="translated">auto &lt;strong id=&quot;opSlice&quot;&gt;opSlice&lt;/strong&gt; ();</target>
        </trans-unit>
        <trans-unit id="d8d34fb792ba6d786e1d072dbd58403770708067" translate="yes" xml:space="preserve">
          <source>auto &lt;strong id=&quot;opSlice&quot;&gt;opSlice&lt;/strong&gt;(IndexType1, IndexType2)(IndexType1 begin, IndexType2 end);</source>
          <target state="translated">auto &lt;strong id=&quot;opSlice&quot;&gt;opSlice&lt;/strong&gt; (IndexType1, IndexType2) (IndexType1 begin, IndexType2 end);</target>
        </trans-unit>
        <trans-unit id="363e3e4532df4eb6f59b124ed24e5e3d63d20d98" translate="yes" xml:space="preserve">
          <source>auto &lt;strong id=&quot;opSlice&quot;&gt;opSlice&lt;/strong&gt;(size_t from, size_t to);</source>
          <target state="translated">auto &lt;strong id=&quot;opSlice&quot;&gt;opSlice&lt;/strong&gt; (size_t from, size_t to);</target>
        </trans-unit>
        <trans-unit id="8cd2c34bc413086ab44a8b4e1a59ad4d037c30b7" translate="yes" xml:space="preserve">
          <source>auto &lt;strong id=&quot;opSlice&quot;&gt;opSlice&lt;/strong&gt;(size_t i, DollarToken);</source>
          <target state="translated">auto &lt;strong id=&quot;opSlice&quot;&gt;opSlice&lt;/strong&gt; (size_t i, DollarToken);</target>
        </trans-unit>
        <trans-unit id="eb385107a5087f02d43ec5baa4c46e74bae8b7d3" translate="yes" xml:space="preserve">
          <source>auto &lt;strong id=&quot;opSlice&quot;&gt;opSlice&lt;/strong&gt;(size_t i, size_t j);</source>
          <target state="translated">auto &lt;strong id=&quot;opSlice&quot;&gt;opSlice&lt;/strong&gt; (size_t i, size_t j);</target>
        </trans-unit>
        <trans-unit id="e8cf0900f62a39cd365fc1ccd80d83f2e0923372" translate="yes" xml:space="preserve">
          <source>auto &lt;strong id=&quot;opUnary&quot;&gt;opUnary&lt;/strong&gt;(string op : &quot;!&quot;)();</source>
          <target state="translated">auto &lt;strong id=&quot;opUnary&quot;&gt;opUnary&lt;/strong&gt; (cadena op: &quot;!&quot;) ();</target>
        </trans-unit>
        <trans-unit id="8ae7ded1dd0cd883a1fe4b8f3cb4ce2b827a16f7" translate="yes" xml:space="preserve">
          <source>auto &lt;strong id=&quot;opUnary&quot;&gt;opUnary&lt;/strong&gt;(string op, this _)()</source>
          <target state="translated">auto &lt;strong id=&quot;opUnary&quot;&gt;opUnary&lt;/strong&gt; (string op, this _) ()</target>
        </trans-unit>
        <trans-unit id="03ca2e4f23bb079c77dde657d3f631b8490b915e" translate="yes" xml:space="preserve">
          <source>auto &lt;strong id=&quot;padLeft&quot;&gt;padLeft&lt;/strong&gt;(R, E)(R r, E e, size_t n)</source>
          <target state="translated">auto &lt;strong id=&quot;padLeft&quot;&gt;padLeft&lt;/strong&gt; (R, E) (R r, E e, size_t n)</target>
        </trans-unit>
        <trans-unit id="5f16e1c22c5eabdff9244414738e73ef2cc50bb5" translate="yes" xml:space="preserve">
          <source>auto &lt;strong id=&quot;padRight&quot;&gt;padRight&lt;/strong&gt;(R, E)(R r, E e, size_t n)</source>
          <target state="translated">auto &lt;strong id=&quot;padRight&quot;&gt;padRight&lt;/strong&gt; (R, E) (R r, E e, size_t n)</target>
        </trans-unit>
        <trans-unit id="b5dbda19bfa93c74b64803b6124dd882683e39f4" translate="yes" xml:space="preserve">
          <source>auto &lt;strong id=&quot;parseImportPathsFromConfig&quot;&gt;parseImportPathsFromConfig&lt;/strong&gt;(const(char)[] iniFile, const(char)[] execDir);</source>
          <target state="translated">auto &lt;strong id=&quot;parseImportPathsFromConfig&quot;&gt;parseImportPathsFromConfig&lt;/strong&gt; (const (char) [] iniFile, const (char) [] execDir);</target>
        </trans-unit>
        <trans-unit id="7cfef891573ca9aaa27c26639f59b1221ef3d45e" translate="yes" xml:space="preserve">
          <source>auto &lt;strong id=&quot;partition3&quot;&gt;partition3&lt;/strong&gt;(alias less = &quot;a &amp;lt; b&quot;, SwapStrategy ss = SwapStrategy.unstable, Range, E)(Range r, E pivot)</source>
          <target state="translated">&lt;strong id=&quot;partition3&quot;&gt;partici&amp;oacute;n&lt;/strong&gt; autom&amp;aacute;tica3 (alias less = &quot;a &amp;lt;b&quot;, SwapStrategy ss = SwapStrategy.unstable, Range, E) (Range r, E pivot)</target>
        </trans-unit>
        <trans-unit id="8c23d20219910785ccdb0a2e8597a80da77c1dfd" translate="yes" xml:space="preserve">
          <source>auto &lt;strong id=&quot;pathSplitter&quot;&gt;pathSplitter&lt;/strong&gt;(R)(R path)</source>
          <target state="translated">auto &lt;strong id=&quot;pathSplitter&quot;&gt;pathSplitter&lt;/strong&gt; (R) (ruta R)</target>
        </trans-unit>
        <trans-unit id="f62f69ed245a025e15b3c621c97c151a891ff60b" translate="yes" xml:space="preserve">
          <source>auto &lt;strong id=&quot;predSwitch&quot;&gt;predSwitch&lt;/strong&gt;(alias pred = &quot;a == b&quot;, T, R...)(T switchExpression, lazy R choices);</source>
          <target state="translated">auto &lt;strong id=&quot;predSwitch&quot;&gt;predSwitch&lt;/strong&gt; (alias pred = &quot;a == b&quot;, T, R ...) (T switchExpression, opciones R diferidas);</target>
        </trans-unit>
        <trans-unit id="eb6678a231d266dc5886922a02cbe6c71286fb65" translate="yes" xml:space="preserve">
          <source>auto &lt;strong id=&quot;radial&quot;&gt;radial&lt;/strong&gt;(R)(R r)</source>
          <target state="translated">&lt;strong id=&quot;radial&quot;&gt;radial&lt;/strong&gt; autom&amp;aacute;tico (R) (R r)</target>
        </trans-unit>
        <trans-unit id="3654d11f29c609dea98d343758f5f1e7d11a10e8" translate="yes" xml:space="preserve">
          <source>auto &lt;strong id=&quot;radial&quot;&gt;radial&lt;/strong&gt;(Range, I)(Range r, I startingIndex)</source>
          <target state="translated">auto &lt;strong id=&quot;radial&quot;&gt;radial&lt;/strong&gt; (Range, I) (Range r, I startingIndex)</target>
        </trans-unit>
        <trans-unit id="135bb184196732be7d40bcf70b999150d3097d95" translate="yes" xml:space="preserve">
          <source>auto &lt;strong id=&quot;randomCover&quot;&gt;randomCover&lt;/strong&gt;(Range)(Range r)</source>
          <target state="translated">Auto &lt;strong id=&quot;randomCover&quot;&gt;randomCover&lt;/strong&gt; (Rango) (Rango r)</target>
        </trans-unit>
        <trans-unit id="d768039b656e22f46365c8d09e1cb91eebc4cb4f" translate="yes" xml:space="preserve">
          <source>auto &lt;strong id=&quot;randomCover&quot;&gt;randomCover&lt;/strong&gt;(Range, UniformRNG)(Range r, auto ref UniformRNG rng)</source>
          <target state="translated">auto &lt;strong id=&quot;randomCover&quot;&gt;randomCover&lt;/strong&gt; (Range, UniformRNG) (Range r, auto ref UniformRNG rng)</target>
        </trans-unit>
        <trans-unit id="449b25bf69e6e44cd242a496c893fcb361afe9b3" translate="yes" xml:space="preserve">
          <source>auto &lt;strong id=&quot;randomSample&quot;&gt;randomSample&lt;/strong&gt;(Range)(Range r, size_t n)</source>
          <target state="translated">auto &lt;strong id=&quot;randomSample&quot;&gt;randomSample&lt;/strong&gt; (Range) (Range r, size_t n)</target>
        </trans-unit>
        <trans-unit id="89175803593a9bd56fe28104d0fd58eca42fad24" translate="yes" xml:space="preserve">
          <source>auto &lt;strong id=&quot;randomSample&quot;&gt;randomSample&lt;/strong&gt;(Range)(Range r, size_t n, size_t total)</source>
          <target state="translated">auto &lt;strong id=&quot;randomSample&quot;&gt;randomSample&lt;/strong&gt; (Range) (Rango r, size_t n, size_t total)</target>
        </trans-unit>
        <trans-unit id="45b9b0b6cb036a99411c92aec24d47cbb15b6eb4" translate="yes" xml:space="preserve">
          <source>auto &lt;strong id=&quot;randomSample&quot;&gt;randomSample&lt;/strong&gt;(Range, UniformRNG)(Range r, size_t n, auto ref UniformRNG rng)</source>
          <target state="translated">auto &lt;strong id=&quot;randomSample&quot;&gt;randomSample&lt;/strong&gt; (Range, UniformRNG) (Range r, size_t n, auto ref UniformRNG rng)</target>
        </trans-unit>
        <trans-unit id="db03514ec82098cf3be16febe98ac41c94f84f4a" translate="yes" xml:space="preserve">
          <source>auto &lt;strong id=&quot;randomSample&quot;&gt;randomSample&lt;/strong&gt;(Range, UniformRNG)(Range r, size_t n, size_t total, auto ref UniformRNG rng)</source>
          <target state="translated">auto &lt;strong id=&quot;randomSample&quot;&gt;randomSample&lt;/strong&gt; (Range, UniformRNG) (Range r, size_t n, size_t total, auto ref UniformRNG rng)</target>
        </trans-unit>
        <trans-unit id="8296c8152c0fd8696eaf4766d7126e880939b147" translate="yes" xml:space="preserve">
          <source>auto &lt;strong id=&quot;redBlackTree&quot;&gt;redBlackTree&lt;/strong&gt;(E)(E[] elems...);</source>
          <target state="translated">auto &lt;strong id=&quot;redBlackTree&quot;&gt;redBlackTree&lt;/strong&gt; (E) (E [] elems ...);</target>
        </trans-unit>
        <trans-unit id="be89470202e4a24e113e4c0be4c73688f47b4d34" translate="yes" xml:space="preserve">
          <source>auto &lt;strong id=&quot;redBlackTree&quot;&gt;redBlackTree&lt;/strong&gt;(Stuff)(Stuff range)</source>
          <target state="translated">auto &lt;strong id=&quot;redBlackTree&quot;&gt;redBlackTree&lt;/strong&gt; (Stuff) (Rango de cosas)</target>
        </trans-unit>
        <trans-unit id="b5b9e5fbd0ddc69a8165190547bf33138b7dee25" translate="yes" xml:space="preserve">
          <source>auto &lt;strong id=&quot;redBlackTree&quot;&gt;redBlackTree&lt;/strong&gt;(alias less, E)(E[] elems...)</source>
          <target state="translated">auto &lt;strong id=&quot;redBlackTree&quot;&gt;redBlackTree&lt;/strong&gt; (alias less, E) (E [] elems ...)</target>
        </trans-unit>
        <trans-unit id="cda7aa0647b33e7eedbf9bbb84ee0d4402485fe1" translate="yes" xml:space="preserve">
          <source>auto &lt;strong id=&quot;redBlackTree&quot;&gt;redBlackTree&lt;/strong&gt;(alias less, Stuff)(Stuff range)</source>
          <target state="translated">auto &lt;strong id=&quot;redBlackTree&quot;&gt;redBlackTree&lt;/strong&gt; (alias less, Stuff) (rango de cosas)</target>
        </trans-unit>
        <trans-unit id="d807d64a4c19bc582535eddcb0c4f407f71e4621" translate="yes" xml:space="preserve">
          <source>auto &lt;strong id=&quot;redBlackTree&quot;&gt;redBlackTree&lt;/strong&gt;(alias less, bool allowDuplicates, E)(E[] elems...)</source>
          <target state="translated">auto &lt;strong id=&quot;redBlackTree&quot;&gt;redBlackTree&lt;/strong&gt; (alias less, bool allowDuplicates, E) (E [] elems ...)</target>
        </trans-unit>
        <trans-unit id="1fb6de12520d72c38a244b1921f02a2dd661b237" translate="yes" xml:space="preserve">
          <source>auto &lt;strong id=&quot;redBlackTree&quot;&gt;redBlackTree&lt;/strong&gt;(alias less, bool allowDuplicates, Stuff)(Stuff range)</source>
          <target state="translated">auto &lt;strong id=&quot;redBlackTree&quot;&gt;redBlackTree&lt;/strong&gt; (alias less, bool allowDuplicates, Stuff) (rango de cosas)</target>
        </trans-unit>
        <trans-unit id="efa2f0a24b7b86d9ff8e615e5245753701426637" translate="yes" xml:space="preserve">
          <source>auto &lt;strong id=&quot;redBlackTree&quot;&gt;redBlackTree&lt;/strong&gt;(bool allowDuplicates, E)(E[] elems...);</source>
          <target state="translated">auto &lt;strong id=&quot;redBlackTree&quot;&gt;redBlackTree&lt;/strong&gt; (bool allowDuplicates, E) (E [] elems ...);</target>
        </trans-unit>
        <trans-unit id="891ec37cf4423c4fda9e5b2bec7b1edad1c1a4eb" translate="yes" xml:space="preserve">
          <source>auto &lt;strong id=&quot;redBlackTree&quot;&gt;redBlackTree&lt;/strong&gt;(bool allowDuplicates, Stuff)(Stuff range)</source>
          <target state="translated">auto &lt;strong id=&quot;redBlackTree&quot;&gt;redBlackTree&lt;/strong&gt; (bool allowDuplicates, Stuff) (rango de cosas)</target>
        </trans-unit>
        <trans-unit id="99cb028e25a92eb60f889170fd247b364235d657" translate="yes" xml:space="preserve">
          <source>auto &lt;strong id=&quot;reduce&quot;&gt;reduce&lt;/strong&gt;(Args...)(Args args);</source>
          <target state="translated">&lt;strong id=&quot;reduce&quot;&gt;reducci&amp;oacute;n&lt;/strong&gt; autom&amp;aacute;tica (Args ...) (Args args);</target>
        </trans-unit>
        <trans-unit id="a0510029531101c78159127a8ee903086220ae08" translate="yes" xml:space="preserve">
          <source>auto &lt;strong id=&quot;reduce&quot;&gt;reduce&lt;/strong&gt;(R)(R r)</source>
          <target state="translated">&lt;strong id=&quot;reduce&quot;&gt;reducci&amp;oacute;n&lt;/strong&gt; autom&amp;aacute;tica (R) (R r)</target>
        </trans-unit>
        <trans-unit id="944af199b71d6f0a466c0cccdae3da19c2ebf4c6" translate="yes" xml:space="preserve">
          <source>auto &lt;strong id=&quot;reduce&quot;&gt;reduce&lt;/strong&gt;(S, R)(S seed, R r)</source>
          <target state="translated">&lt;strong id=&quot;reduce&quot;&gt;reducci&amp;oacute;n&lt;/strong&gt; autom&amp;aacute;tica (S, R) (semilla S, R r)</target>
        </trans-unit>
        <trans-unit id="a3e0e0b8cc30beafe215ec3ae4b52f8cc78c707f" translate="yes" xml:space="preserve">
          <source>auto &lt;strong id=&quot;refRange&quot;&gt;refRange&lt;/strong&gt;(R)(R* range)</source>
          <target state="translated">auto &lt;strong id=&quot;refRange&quot;&gt;refRange&lt;/strong&gt; (R) (rango R *)</target>
        </trans-unit>
        <trans-unit id="460767010235f1d23dfd5fb8bbc49959ba9e7e15" translate="yes" xml:space="preserve">
          <source>auto &lt;strong id=&quot;release&quot;&gt;release&lt;/strong&gt;();</source>
          <target state="translated">&lt;strong id=&quot;release&quot;&gt;liberaci&amp;oacute;n&lt;/strong&gt; autom&amp;aacute;tica ();</target>
        </trans-unit>
        <trans-unit id="c5711adab939414f4b6bb1b55204605670151cfd" translate="yes" xml:space="preserve">
          <source>auto &lt;strong id=&quot;retro&quot;&gt;retro&lt;/strong&gt;(Range)(Range r)</source>
          <target state="translated">&lt;strong id=&quot;retro&quot;&gt;retro&lt;/strong&gt; autom&amp;aacute;tico (Rango) (Rango r)</target>
        </trans-unit>
        <trans-unit id="a386474eeb486e5c221a47338bb331405642e02a" translate="yes" xml:space="preserve">
          <source>auto &lt;strong id=&quot;reverse&quot;&gt;reverse&lt;/strong&gt;(T)(T t)</source>
          <target state="translated">&lt;strong id=&quot;reverse&quot;&gt;inversi&amp;oacute;n&lt;/strong&gt; autom&amp;aacute;tica (T) (T t)</target>
        </trans-unit>
        <trans-unit id="6b10815781cd4671d42add8a86de034c06d356d1" translate="yes" xml:space="preserve">
          <source>auto &lt;strong id=&quot;rightJustifier&quot;&gt;rightJustifier&lt;/strong&gt;(Range)(Range r, size_t width, dchar fillChar = ' ')</source>
          <target state="translated">auto &lt;strong id=&quot;rightJustifier&quot;&gt;rightJustifier&lt;/strong&gt; (Range) (Range r, size_t width, dchar fillChar = '')</target>
        </trans-unit>
        <trans-unit id="e2af96504f7213f1096c271ec445d9697ccddc5d" translate="yes" xml:space="preserve">
          <source>auto &lt;strong id=&quot;ripemd160Of&quot;&gt;ripemd160Of&lt;/strong&gt;(T...)(T data);</source>
          <target state="translated">auto &lt;strong id=&quot;ripemd160Of&quot;&gt;ripemd160Of&lt;/strong&gt; (T ...) (datos T);</target>
        </trans-unit>
        <trans-unit id="92f6df78e97f22fddcb35ef094704753a9245af5" translate="yes" xml:space="preserve">
          <source>auto &lt;strong id=&quot;rootName&quot;&gt;rootName&lt;/strong&gt;(C)(C[] path)</source>
          <target state="translated">auto &lt;strong id=&quot;rootName&quot;&gt;rootName&lt;/strong&gt; (C) (ruta C [])</target>
        </trans-unit>
        <trans-unit id="c8e17a44f77ad8512ab113515201467db1d60be8" translate="yes" xml:space="preserve">
          <source>auto &lt;strong id=&quot;rootName&quot;&gt;rootName&lt;/strong&gt;(R)(R path)</source>
          <target state="translated">auto &lt;strong id=&quot;rootName&quot;&gt;rootName&lt;/strong&gt; (R) (ruta R)</target>
        </trans-unit>
        <trans-unit id="d0b014acc2f1be9fad5ec55aa8285d248613eb62" translate="yes" xml:space="preserve">
          <source>auto &lt;strong id=&quot;roundRobin&quot;&gt;roundRobin&lt;/strong&gt;(Rs...)(Rs rs)</source>
          <target state="translated">auto &lt;strong id=&quot;roundRobin&quot;&gt;roundRobin&lt;/strong&gt; (Rs ...) (Rs rs)</target>
        </trans-unit>
        <trans-unit id="8e2a31c3770e610513870c19e18306afe764e037" translate="yes" xml:space="preserve">
          <source>auto &lt;strong id=&quot;save&quot;&gt;save&lt;/strong&gt;();</source>
          <target state="translated">&lt;strong id=&quot;save&quot;&gt;guardado&lt;/strong&gt; autom&amp;aacute;tico ();</target>
        </trans-unit>
        <trans-unit id="5db15cffae10afab027cab596c6cfc1bf0089611" translate="yes" xml:space="preserve">
          <source>auto &lt;strong id=&quot;schwartzSort&quot;&gt;schwartzSort&lt;/strong&gt;(alias transform, SwapStrategy ss, R)(R r)</source>
          <target state="translated">auto &lt;strong id=&quot;schwartzSort&quot;&gt;schwartzSort&lt;/strong&gt; (transformaci&amp;oacute;n de alias, SwapStrategy ss, R) (R r)</target>
        </trans-unit>
        <trans-unit id="bc903e17035f18c987a5c7a58a3e365e4c4123a9" translate="yes" xml:space="preserve">
          <source>auto &lt;strong id=&quot;scopedTask&quot;&gt;scopedTask&lt;/strong&gt;(F, Args...)(scope F delegateOrFp, Args args)</source>
          <target state="translated">auto &lt;strong id=&quot;scopedTask&quot;&gt;scopedTask&lt;/strong&gt; (F, Args ...) (alcance F delegateOrFp, Args args)</target>
        </trans-unit>
        <trans-unit id="497cb001616c46d3980ccbe90f1123cdfc1587cc" translate="yes" xml:space="preserve">
          <source>auto &lt;strong id=&quot;scopedTask&quot;&gt;scopedTask&lt;/strong&gt;(alias fun, Args...)(Args args);</source>
          <target state="translated">auto &lt;strong id=&quot;scopedTask&quot;&gt;scopedTask&lt;/strong&gt; (alias fun, Args ...) (Args args);</target>
        </trans-unit>
        <trans-unit id="bf14e27a0d682d460f7dd11a5c6507b2c9c67364" translate="yes" xml:space="preserve">
          <source>auto &lt;strong id=&quot;sequence&quot;&gt;sequence&lt;/strong&gt;(alias fun, State...)(State args);</source>
          <target state="translated">&lt;strong id=&quot;sequence&quot;&gt;secuencia&lt;/strong&gt; autom&amp;aacute;tica (alias fun, State ...) (State args);</target>
        </trans-unit>
        <trans-unit id="b494431c59dfb37cfba0398a2db7bb4f89d0ef25" translate="yes" xml:space="preserve">
          <source>auto &lt;strong id=&quot;sha1Of&quot;&gt;sha1Of&lt;/strong&gt;(T...)(T data);</source>
          <target state="translated">auto &lt;strong id=&quot;sha1Of&quot;&gt;sha1Of&lt;/strong&gt; (T ...) (datos T);</target>
        </trans-unit>
        <trans-unit id="a66424dcb4475a9cfb8d441bc4c43711a41bd7f1" translate="yes" xml:space="preserve">
          <source>auto &lt;strong id=&quot;sha224Of&quot;&gt;sha224Of&lt;/strong&gt;(T...)(T data);</source>
          <target state="translated">auto &lt;strong id=&quot;sha224Of&quot;&gt;sha224Of&lt;/strong&gt; (T ...) (datos T);</target>
        </trans-unit>
        <trans-unit id="f83323d75db59f31fead63770ab60b6dd5b50330" translate="yes" xml:space="preserve">
          <source>auto &lt;strong id=&quot;sha256Of&quot;&gt;sha256Of&lt;/strong&gt;(T...)(T data);</source>
          <target state="translated">auto &lt;strong id=&quot;sha256Of&quot;&gt;sha256De&lt;/strong&gt; (T ...) (datos T);</target>
        </trans-unit>
        <trans-unit id="b403c42693acd650e695f022c14b6ef885c6f86b" translate="yes" xml:space="preserve">
          <source>auto &lt;strong id=&quot;sha384Of&quot;&gt;sha384Of&lt;/strong&gt;(T...)(T data);</source>
          <target state="translated">auto &lt;strong id=&quot;sha384Of&quot;&gt;sha384De&lt;/strong&gt; (T ...) (datos T);</target>
        </trans-unit>
        <trans-unit id="48cea81a22134a42786187a05f1248bcf22c7609" translate="yes" xml:space="preserve">
          <source>auto &lt;strong id=&quot;sha512Of&quot;&gt;sha512Of&lt;/strong&gt;(T...)(T data);</source>
          <target state="translated">auto &lt;strong id=&quot;sha512Of&quot;&gt;sha512Of&lt;/strong&gt; (T ...) (datos T);</target>
        </trans-unit>
        <trans-unit id="210deff56323d519f6cb11ab06e32869cff7aa52" translate="yes" xml:space="preserve">
          <source>auto &lt;strong id=&quot;sha512_224Of&quot;&gt;sha512_224Of&lt;/strong&gt;(T...)(T data);</source>
          <target state="translated">auto &lt;strong id=&quot;sha512_224Of&quot;&gt;sha512_224Of&lt;/strong&gt; (T ...) (datos T);</target>
        </trans-unit>
        <trans-unit id="a398d30ab90ce7aa5499b303c2fec3968ad3ae97" translate="yes" xml:space="preserve">
          <source>auto &lt;strong id=&quot;sha512_256Of&quot;&gt;sha512_256Of&lt;/strong&gt;(T...)(T data);</source>
          <target state="translated">auto &lt;strong id=&quot;sha512_256Of&quot;&gt;sha512_256De&lt;/strong&gt; (T ...) (datos T);</target>
        </trans-unit>
        <trans-unit id="c8d4deba953ed251050f71e5f5daf1ff4475c51d" translate="yes" xml:space="preserve">
          <source>auto &lt;strong id=&quot;signed&quot;&gt;signed&lt;/strong&gt;(T)(T x)</source>
          <target state="translated">auto &lt;strong id=&quot;signed&quot;&gt;firmado&lt;/strong&gt; (T) (T x)</target>
        </trans-unit>
        <trans-unit id="2ae474b1a2f1530aba5cee315b628fa26fbc0cac" translate="yes" xml:space="preserve">
          <source>auto &lt;strong id=&quot;slide&quot;&gt;slide&lt;/strong&gt;(Flag!&quot;withPartial&quot; f = Yes.withPartial, Source)(Source source, size_t windowSize, size_t stepSize = 1)</source>
          <target state="translated">&lt;strong id=&quot;slide&quot;&gt;diapositiva&lt;/strong&gt; autom&amp;aacute;tica (Flag! &quot;withPartial&quot; f = Yes.withPartial, Source) (Fuente de origen, size_t windowSize, size_t stepSize = 1)</target>
        </trans-unit>
        <trans-unit id="86820bc4a982cd15727539ab9c2ce0f9434fa1df" translate="yes" xml:space="preserve">
          <source>auto &lt;strong id=&quot;speller&quot;&gt;speller&lt;/strong&gt;(alias dg)(const(char)[] seed)</source>
          <target state="translated">&lt;strong id=&quot;speller&quot;&gt;ortograf&amp;iacute;a&lt;/strong&gt; autom&amp;aacute;tica (alias dg) (const (char) [] seed)</target>
        </trans-unit>
        <trans-unit id="3b591da003c47b408876ccea0a1b8bd3ef253dce" translate="yes" xml:space="preserve">
          <source>auto &lt;strong id=&quot;split&quot;&gt;split&lt;/strong&gt;(Range, Separator)(Range range, Separator sep)</source>
          <target state="translated">&lt;strong id=&quot;split&quot;&gt;divisi&amp;oacute;n&lt;/strong&gt; autom&amp;aacute;tica (Rango, Separador) (Rango de rango, Separador sep)</target>
        </trans-unit>
        <trans-unit id="127b6f2e7a919a68e0311abf3f77639c65959955" translate="yes" xml:space="preserve">
          <source>auto &lt;strong id=&quot;split&quot;&gt;split&lt;/strong&gt;(alias isTerminator, Range)(Range range)</source>
          <target state="translated">&lt;strong id=&quot;split&quot;&gt;divisi&amp;oacute;n&lt;/strong&gt; autom&amp;aacute;tica (alias isTerminator, Range) (Range range)</target>
        </trans-unit>
        <trans-unit id="1824a6932ba84b0fde1d9a3f60ede5b4e9e8f5ff" translate="yes" xml:space="preserve">
          <source>auto &lt;strong id=&quot;splitter&quot;&gt;splitter&lt;/strong&gt;(Range)(Range s)</source>
          <target state="translated">&lt;strong id=&quot;splitter&quot;&gt;divisor&lt;/strong&gt; autom&amp;aacute;tico (Rango) (Rango s)</target>
        </trans-unit>
        <trans-unit id="ed74faf65b1dac4f35d96c512da8e4bc1ed5e976" translate="yes" xml:space="preserve">
          <source>auto &lt;strong id=&quot;splitter&quot;&gt;splitter&lt;/strong&gt;(alias isTerminator, Range)(Range r)</source>
          <target state="translated">&lt;strong id=&quot;splitter&quot;&gt;divisor&lt;/strong&gt; autom&amp;aacute;tico (alias isTerminator, Range) (Range r)</target>
        </trans-unit>
        <trans-unit id="f55d3dac925d2f9ab71fda265d5acac0e72f1f55" translate="yes" xml:space="preserve">
          <source>auto &lt;strong id=&quot;splitter&quot;&gt;splitter&lt;/strong&gt;(alias pred = &quot;a == b&quot;, Range, Separator)(Range r, Separator s)</source>
          <target state="translated">&lt;strong id=&quot;splitter&quot;&gt;divisor&lt;/strong&gt; autom&amp;aacute;tico (alias pred = &quot;a == b&quot;, Rango, Separador) (Rango r, Separador s)</target>
        </trans-unit>
        <trans-unit id="1461aa388289f945bee5df40d152af92ac628200" translate="yes" xml:space="preserve">
          <source>auto &lt;strong id=&quot;staticArray&quot;&gt;staticArray&lt;/strong&gt;(U, alias a)()</source>
          <target state="translated">auto &lt;strong id=&quot;staticArray&quot;&gt;staticArray&lt;/strong&gt; (U, alias a) ()</target>
        </trans-unit>
        <trans-unit id="1743e4fa7673490ce2e3a11cb9446bb6c6206521" translate="yes" xml:space="preserve">
          <source>auto &lt;strong id=&quot;staticArray&quot;&gt;staticArray&lt;/strong&gt;(Un : U[n], U, size_t n, T)(scope T a)</source>
          <target state="translated">&lt;strong id=&quot;staticArray&quot;&gt;matriz est&amp;aacute;tica&lt;/strong&gt; autom&amp;aacute;tica (Un: U [n], U, size_t n, T) (alcance T a)</target>
        </trans-unit>
        <trans-unit id="666b3e2e417a77bc6bd91986b9650e5331c955e5" translate="yes" xml:space="preserve">
          <source>auto &lt;strong id=&quot;staticArray&quot;&gt;staticArray&lt;/strong&gt;(Un : U[n], U, size_t n, T)(scope T a, out size_t rangeLength)</source>
          <target state="translated">auto &lt;strong id=&quot;staticArray&quot;&gt;staticArray&lt;/strong&gt; (Un: U [n], U, size_t n, T) (alcance T a, out size_t rangeLength)</target>
        </trans-unit>
        <trans-unit id="94df4d8eea7950ce6db5c627abf6bb2518c7774c" translate="yes" xml:space="preserve">
          <source>auto &lt;strong id=&quot;staticArray&quot;&gt;staticArray&lt;/strong&gt;(alias a)()</source>
          <target state="translated">auto &lt;strong id=&quot;staticArray&quot;&gt;staticArray&lt;/strong&gt; (alias a) ()</target>
        </trans-unit>
        <trans-unit id="6ed8b7fe77b142d585513f736ffdf188a0543305" translate="yes" xml:space="preserve">
          <source>auto &lt;strong id=&quot;staticArray&quot;&gt;staticArray&lt;/strong&gt;(size_t n, T)(scope T a)</source>
          <target state="translated">&lt;strong id=&quot;staticArray&quot;&gt;matriz est&amp;aacute;tica&lt;/strong&gt; autom&amp;aacute;tica (size_t n, T) (alcance T a)</target>
        </trans-unit>
        <trans-unit id="628d3f4c9ac1f73aa80ed2ae32da5dd2a2f12571" translate="yes" xml:space="preserve">
          <source>auto &lt;strong id=&quot;staticArray&quot;&gt;staticArray&lt;/strong&gt;(size_t n, T)(scope T a, out size_t rangeLength)</source>
          <target state="translated">auto &lt;strong id=&quot;staticArray&quot;&gt;staticArray&lt;/strong&gt; (size_t n, T) (scope T a, out size_t rangeLength)</target>
        </trans-unit>
        <trans-unit id="8d86946fc05c71f83a5ca8475914eea6348c905b" translate="yes" xml:space="preserve">
          <source>auto &lt;strong id=&quot;stride&quot;&gt;stride&lt;/strong&gt;(Range)(Range r, size_t n)</source>
          <target state="translated">&lt;strong id=&quot;stride&quot;&gt;zancada&lt;/strong&gt; autom&amp;aacute;tica (Rango) (Rango r, size_t n)</target>
        </trans-unit>
        <trans-unit id="181dac4d08e2abe3b05ef2e9cd521afa205064a3" translate="yes" xml:space="preserve">
          <source>auto &lt;strong id=&quot;strip&quot;&gt;strip&lt;/strong&gt;(Range)(Range str)</source>
          <target state="translated">&lt;strong id=&quot;strip&quot;&gt;tira&lt;/strong&gt; autom&amp;aacute;tica (Range) (Range str)</target>
        </trans-unit>
        <trans-unit id="ef08d87a60a0110d10a57107148fb64d45b873fe" translate="yes" xml:space="preserve">
          <source>auto &lt;strong id=&quot;strip&quot;&gt;strip&lt;/strong&gt;(Range, Char)(Range str, const(Char)[] chars)</source>
          <target state="translated">auto &lt;strong id=&quot;strip&quot;&gt;strip&lt;/strong&gt; (Range, Char) (Range str, const (Char) [] chars)</target>
        </trans-unit>
        <trans-unit id="64195825cb5f53256efa4471e927f2c7d1057b45" translate="yes" xml:space="preserve">
          <source>auto &lt;strong id=&quot;strip&quot;&gt;strip&lt;/strong&gt;(Range, Char)(Range str, const(Char)[] leftChars, const(Char)[] rightChars)</source>
          <target state="translated">&lt;strong id=&quot;strip&quot;&gt;tira&lt;/strong&gt; autom&amp;aacute;tica (Range, Char) (Range str, const (Char) [] leftChars, const (Char) [] rightChars)</target>
        </trans-unit>
        <trans-unit id="17a4c583639d07953dabc8bd574ec1e3151a011a" translate="yes" xml:space="preserve">
          <source>auto &lt;strong id=&quot;stripDrive&quot;&gt;stripDrive&lt;/strong&gt;(C)(C[] path)</source>
          <target state="translated">auto &lt;strong id=&quot;stripDrive&quot;&gt;stripDrive&lt;/strong&gt; (C) (ruta C [])</target>
        </trans-unit>
        <trans-unit id="4d371113862a855d212d3f7692a92d9df4ab58de" translate="yes" xml:space="preserve">
          <source>auto &lt;strong id=&quot;stripDrive&quot;&gt;stripDrive&lt;/strong&gt;(R)(R path)</source>
          <target state="translated">auto &lt;strong id=&quot;stripDrive&quot;&gt;stripDrive&lt;/strong&gt; (R) (ruta R)</target>
        </trans-unit>
        <trans-unit id="ebfad5c6a114475c2a11973402cbb2800f144b5c" translate="yes" xml:space="preserve">
          <source>auto &lt;strong id=&quot;stripExtension&quot;&gt;stripExtension&lt;/strong&gt;(C)(C[] path)</source>
          <target state="translated">auto &lt;strong id=&quot;stripExtension&quot;&gt;stripExtension&lt;/strong&gt; (C) (ruta C [])</target>
        </trans-unit>
        <trans-unit id="313d62c6abd4108f6630edead7457496dd5aa913" translate="yes" xml:space="preserve">
          <source>auto &lt;strong id=&quot;stripExtension&quot;&gt;stripExtension&lt;/strong&gt;(R)(R path)</source>
          <target state="translated">auto &lt;strong id=&quot;stripExtension&quot;&gt;stripExtension&lt;/strong&gt; (R) (ruta R)</target>
        </trans-unit>
        <trans-unit id="493e5115526fc5b8368bcc122a731e2f6d28c53f" translate="yes" xml:space="preserve">
          <source>auto &lt;strong id=&quot;stripLeft&quot;&gt;stripLeft&lt;/strong&gt;(Range)(Range input)</source>
          <target state="translated">auto &lt;strong id=&quot;stripLeft&quot;&gt;stripLeft&lt;/strong&gt; (Range) (Rango de entrada)</target>
        </trans-unit>
        <trans-unit id="2c55c5a5e4bb38df2a15217fc5502864257d02ba" translate="yes" xml:space="preserve">
          <source>auto &lt;strong id=&quot;stripLeft&quot;&gt;stripLeft&lt;/strong&gt;(Range, Char)(Range input, const(Char)[] chars)</source>
          <target state="translated">auto &lt;strong id=&quot;stripLeft&quot;&gt;stripLeft&lt;/strong&gt; (Range, Char) (caracteres de entrada, const (Char) [])</target>
        </trans-unit>
        <trans-unit id="42a75bbbd45eaf5b2aba901aed0e7a70b93e3e6c" translate="yes" xml:space="preserve">
          <source>auto &lt;strong id=&quot;stripRight&quot;&gt;stripRight&lt;/strong&gt;(Range)(Range str)</source>
          <target state="translated">auto &lt;strong id=&quot;stripRight&quot;&gt;stripRight&lt;/strong&gt; (Range) (Range str)</target>
        </trans-unit>
        <trans-unit id="5ef5bde30b252f9a4779a73c52939329e43003f7" translate="yes" xml:space="preserve">
          <source>auto &lt;strong id=&quot;stripRight&quot;&gt;stripRight&lt;/strong&gt;(Range, Char)(Range str, const(Char)[] chars)</source>
          <target state="translated">auto &lt;strong id=&quot;stripRight&quot;&gt;stripRight&lt;/strong&gt; (Range, Char) (Range str, const (Char) [] chars)</target>
        </trans-unit>
        <trans-unit id="0a8c80b393d5f797099c1c5a5b259f9a141eb4fa" translate="yes" xml:space="preserve">
          <source>auto &lt;strong id=&quot;substitute&quot;&gt;substitute&lt;/strong&gt;(Value)(Value value)</source>
          <target state="translated">&lt;strong id=&quot;substitute&quot;&gt;Sustituto&lt;/strong&gt; autom&amp;aacute;tico (valor) (valor del valor)</target>
        </trans-unit>
        <trans-unit id="303579dd9dbf34485023db4a10fe70723532f7d7" translate="yes" xml:space="preserve">
          <source>auto &lt;strong id=&quot;substitute&quot;&gt;substitute&lt;/strong&gt;(alias pred = (a, b) =&amp;gt; a == b, R, Substs...)(R r, Substs substs)</source>
          <target state="translated">&lt;strong id=&quot;substitute&quot;&gt;Sustituto&lt;/strong&gt; autom&amp;aacute;tico (alias pred = (a, b) =&amp;gt; a == b, R, Substs ...) (R r, Substs substs)</target>
        </trans-unit>
        <trans-unit id="ff8e1ebfcb4bfc651c57e49b1f4ad558855efa08" translate="yes" xml:space="preserve">
          <source>auto &lt;strong id=&quot;sum&quot;&gt;sum&lt;/strong&gt;(R)(R r)</source>
          <target state="translated">&lt;strong id=&quot;sum&quot;&gt;suma&lt;/strong&gt; autom&amp;aacute;tica (R) (R r)</target>
        </trans-unit>
        <trans-unit id="a3b035f1b158a5898fddc3b891cf4a8af5329fe8" translate="yes" xml:space="preserve">
          <source>auto &lt;strong id=&quot;sum&quot;&gt;sum&lt;/strong&gt;(R, E)(R r, E seed)</source>
          <target state="translated">&lt;strong id=&quot;sum&quot;&gt;suma&lt;/strong&gt; autom&amp;aacute;tica (R, E) (R r, E semilla)</target>
        </trans-unit>
        <trans-unit id="e384716c993e5505e42e517dafec7d19dd37d174" translate="yes" xml:space="preserve">
          <source>auto &lt;strong id=&quot;tail&quot;&gt;tail&lt;/strong&gt;(Range)(Range range, size_t n)</source>
          <target state="translated">&lt;strong id=&quot;tail&quot;&gt;cola&lt;/strong&gt; autom&amp;aacute;tica (Range) (Range range, size_t n)</target>
        </trans-unit>
        <trans-unit id="5eedd8dcff1df6e6d376461a4a6fbbf65ba24e01" translate="yes" xml:space="preserve">
          <source>auto &lt;strong id=&quot;takeExactly&quot;&gt;takeExactly&lt;/strong&gt;(R)(R range, size_t n)</source>
          <target state="translated">auto &lt;strong id=&quot;takeExactly&quot;&gt;takeExactly&lt;/strong&gt; (R) (rango R, size_t n)</target>
        </trans-unit>
        <trans-unit id="b8bac0d74eca183c1fb7e0171e9a0126c4bdb2d1" translate="yes" xml:space="preserve">
          <source>auto &lt;strong id=&quot;takeNone&quot;&gt;takeNone&lt;/strong&gt;(R)()</source>
          <target state="translated">auto &lt;strong id=&quot;takeNone&quot;&gt;takeNone&lt;/strong&gt; (R) ()</target>
        </trans-unit>
        <trans-unit id="42e60638ccbd200066a35ef2df3aa16623e2817c" translate="yes" xml:space="preserve">
          <source>auto &lt;strong id=&quot;takeNone&quot;&gt;takeNone&lt;/strong&gt;(R)(R range)</source>
          <target state="translated">auto &lt;strong id=&quot;takeNone&quot;&gt;takeNone&lt;/strong&gt; (R) (rango R)</target>
        </trans-unit>
        <trans-unit id="1c85630ae99e8cd179eafbfb9ad6ff5d2f9b7af2" translate="yes" xml:space="preserve">
          <source>auto &lt;strong id=&quot;takeOne&quot;&gt;takeOne&lt;/strong&gt;(R)(R source)</source>
          <target state="translated">auto &lt;strong id=&quot;takeOne&quot;&gt;takeOne&lt;/strong&gt; (R) (fuente R)</target>
        </trans-unit>
        <trans-unit id="088eb6f9b7769826af7cf8e5367761d631606df2" translate="yes" xml:space="preserve">
          <source>auto &lt;strong id=&quot;task&quot;&gt;task&lt;/strong&gt;(F, Args...)(F delegateOrFp, Args args)</source>
          <target state="translated">&lt;strong id=&quot;task&quot;&gt;tarea&lt;/strong&gt; autom&amp;aacute;tica (F, Args ...) (F delegateOrFp, Args args)</target>
        </trans-unit>
        <trans-unit id="08186cfcee0deb97981a1e1c93adfb8379e0b0d1" translate="yes" xml:space="preserve">
          <source>auto &lt;strong id=&quot;task&quot;&gt;task&lt;/strong&gt;(alias fun, Args...)(Args args);</source>
          <target state="translated">&lt;strong id=&quot;task&quot;&gt;tarea&lt;/strong&gt; autom&amp;aacute;tica (alias fun, Args ...) (Args args);</target>
        </trans-unit>
        <trans-unit id="5012d76f29086fa2002fad9228d317ad197c4314" translate="yes" xml:space="preserve">
          <source>auto &lt;strong id=&quot;tee&quot;&gt;tee&lt;/strong&gt;(Flag!&quot;pipeOnPop&quot; pipeOnPop = Yes.pipeOnPop, R1, R2)(R1 inputRange, R2 outputRange)</source>
          <target state="translated">auto &lt;strong id=&quot;tee&quot;&gt;tee&lt;/strong&gt; (Flag! &quot;pipeOnPop&quot; pipeOnPop = Yes.pipeOnPop, R1, R2) (R1 inputRange, R2 outputRange)</target>
        </trans-unit>
        <trans-unit id="99c501842370966b7208f327796b00e6e3f30c6a" translate="yes" xml:space="preserve">
          <source>auto &lt;strong id=&quot;tee&quot;&gt;tee&lt;/strong&gt;(alias fun, Flag!&quot;pipeOnPop&quot; pipeOnPop = Yes.pipeOnPop, R1)(R1 inputRange)</source>
          <target state="translated">auto &lt;strong id=&quot;tee&quot;&gt;tee&lt;/strong&gt; (alias fun, Flag! &quot;pipeOnPop&quot; pipeOnPop = Yes.pipeOnPop, R1) (R1 inputRange)</target>
        </trans-unit>
        <trans-unit id="f45e78e7b642a0ffeebd5e1a16421d121dc9b962" translate="yes" xml:space="preserve">
          <source>auto &lt;strong id=&quot;toDelegate&quot;&gt;toDelegate&lt;/strong&gt;(F)(auto ref F fp)</source>
          <target state="translated">auto &lt;strong id=&quot;toDelegate&quot;&gt;toDelegate&lt;/strong&gt; (F) (auto ref F fp)</target>
        </trans-unit>
        <trans-unit id="1c3753f52aaa0afb844181156dd8b195bb09803e" translate="yes" xml:space="preserve">
          <source>auto &lt;strong id=&quot;toDelegate&quot;&gt;toDelegate&lt;/strong&gt;(Set)(Set set)</source>
          <target state="translated">Auto &lt;strong id=&quot;toDelegate&quot;&gt;toDelegate&lt;/strong&gt; (Set) (Set set)</target>
        </trans-unit>
        <trans-unit id="e6f9d7b887f1702bca3cf2bf0b8c91638de27ade" translate="yes" xml:space="preserve">
          <source>auto &lt;strong id=&quot;toLower&quot;&gt;toLower&lt;/strong&gt;(C)(C c)</source>
          <target state="translated">auto &lt;strong id=&quot;toLower&quot;&gt;toLower&lt;/strong&gt; (C) (C c)</target>
        </trans-unit>
        <trans-unit id="219242af08a605b26566fb9430a94a59081e768c" translate="yes" xml:space="preserve">
          <source>auto &lt;strong id=&quot;toTrie&quot;&gt;toTrie&lt;/strong&gt;(size_t level, Set)(Set set)</source>
          <target state="translated">Auto &lt;strong id=&quot;toTrie&quot;&gt;toTrie&lt;/strong&gt; (size_t level, Set) (Set set)</target>
        </trans-unit>
        <trans-unit id="11403d55d523dd1655d2ed32debab58be681bf78" translate="yes" xml:space="preserve">
          <source>auto &lt;strong id=&quot;toUpper&quot;&gt;toUpper&lt;/strong&gt;(C)(C c)</source>
          <target state="translated">Auto &lt;strong id=&quot;toUpper&quot;&gt;toUpper&lt;/strong&gt; (C) (C c)</target>
        </trans-unit>
        <trans-unit id="b9d340e9b64273b6e1561b9e40cc4eaf9dbec856" translate="yes" xml:space="preserve">
          <source>auto &lt;strong id=&quot;topN&quot;&gt;topN&lt;/strong&gt;(alias less = &quot;a &amp;lt; b&quot;, SwapStrategy ss = SwapStrategy.unstable, Range)(Range r, size_t nth)</source>
          <target state="translated">auto &lt;strong id=&quot;topN&quot;&gt;topN&lt;/strong&gt; (alias less = &quot;a &amp;lt;b&quot;, SwapStrategy ss = SwapStrategy.unstable, Range) (Range r, size_t nth)</target>
        </trans-unit>
        <trans-unit id="4266a559fa9fb8e3b75fa598005edeb9d20d3cdd" translate="yes" xml:space="preserve">
          <source>auto &lt;strong id=&quot;topN&quot;&gt;topN&lt;/strong&gt;(alias less = &quot;a &amp;lt; b&quot;, SwapStrategy ss = SwapStrategy.unstable, Range1, Range2)(Range1 r1, Range2 r2)</source>
          <target state="translated">auto &lt;strong id=&quot;topN&quot;&gt;topN&lt;/strong&gt; (alias less = &quot;a &amp;lt;b&quot;, SwapStrategy ss = SwapStrategy.unstable, Range1, Range2) (Range1 r1, Range2 r2)</target>
        </trans-unit>
        <trans-unit id="a37554193a234b1055747d035ebe610ec7e7f007" translate="yes" xml:space="preserve">
          <source>auto &lt;strong id=&quot;trisect&quot;&gt;trisect&lt;/strong&gt;(V)(V value)</source>
          <target state="translated">&lt;strong id=&quot;trisect&quot;&gt;trisecto&lt;/strong&gt; autom&amp;aacute;tico (V) (valor V)</target>
        </trans-unit>
        <trans-unit id="95a1154568f66f8205423681ccda78f123531eda" translate="yes" xml:space="preserve">
          <source>auto &lt;strong id=&quot;tryVisit&quot;&gt;tryVisit&lt;/strong&gt;(VariantType)(VariantType variant)</source>
          <target state="translated">auto &lt;strong id=&quot;tryVisit&quot;&gt;tryVisit&lt;/strong&gt; (VariantType) (VariantType variant)</target>
        </trans-unit>
        <trans-unit id="93e2f0b756263e30665bc236a60e390a513f82d6" translate="yes" xml:space="preserve">
          <source>auto &lt;strong id=&quot;tuple&quot;&gt;tuple&lt;/strong&gt;(Args...)(Args args);</source>
          <target state="translated">&lt;strong id=&quot;tuple&quot;&gt;tupla&lt;/strong&gt; autom&amp;aacute;tica (Args ...) (Args args);</target>
        </trans-unit>
        <trans-unit id="c8977db2419ebd8f0a42700a77a248c2087b43a8" translate="yes" xml:space="preserve">
          <source>auto &lt;strong id=&quot;uniform&quot;&gt;uniform&lt;/strong&gt;(E)()</source>
          <target state="translated">&lt;strong id=&quot;uniform&quot;&gt;uniforme&lt;/strong&gt; autom&amp;aacute;tico (E) ()</target>
        </trans-unit>
        <trans-unit id="2fcc6c4dec32c5a612fdf5eeace455ad5d38026a" translate="yes" xml:space="preserve">
          <source>auto &lt;strong id=&quot;uniform&quot;&gt;uniform&lt;/strong&gt;(E, UniformRandomNumberGenerator)(ref UniformRandomNumberGenerator urng)</source>
          <target state="translated">&lt;strong id=&quot;uniform&quot;&gt;uniforme&lt;/strong&gt; autom&amp;aacute;tico (E, UniformRandomNumberGenerator) (ref UniformRandomNumberGenerator urng)</target>
        </trans-unit>
        <trans-unit id="a6993335c0adfdbb0bfe42b519ce066e1debdee0" translate="yes" xml:space="preserve">
          <source>auto &lt;strong id=&quot;uniform&quot;&gt;uniform&lt;/strong&gt;(T)()</source>
          <target state="translated">&lt;strong id=&quot;uniform&quot;&gt;uniforme&lt;/strong&gt; autom&amp;aacute;tico (T) ()</target>
        </trans-unit>
        <trans-unit id="eaeb362f01e75966337ac6e5d6f64b57ef6abf0d" translate="yes" xml:space="preserve">
          <source>auto &lt;strong id=&quot;uniform&quot;&gt;uniform&lt;/strong&gt;(T, UniformRandomNumberGenerator)(ref UniformRandomNumberGenerator urng)</source>
          <target state="translated">&lt;strong id=&quot;uniform&quot;&gt;uniforme&lt;/strong&gt; autom&amp;aacute;tico (T, UniformRandomNumberGenerator) (ref UniformRandomNumberGenerator urng)</target>
        </trans-unit>
        <trans-unit id="8f2908897c54dca18038b6f0bf338ad3cda91e74" translate="yes" xml:space="preserve">
          <source>auto &lt;strong id=&quot;uniform&quot;&gt;uniform&lt;/strong&gt;(string boundaries = &quot;[)&quot;, T1, T2)(T1 a, T2 b)</source>
          <target state="translated">&lt;strong id=&quot;uniform&quot;&gt;uniforme&lt;/strong&gt; autom&amp;aacute;tico (l&amp;iacute;mites de cadena = &quot;[)&quot;, T1, T2) (T1 a, T2 b)</target>
        </trans-unit>
        <trans-unit id="53afb993c58a731d94315f3da248ed8965d7b8fc" translate="yes" xml:space="preserve">
          <source>auto &lt;strong id=&quot;uniform&quot;&gt;uniform&lt;/strong&gt;(string boundaries = &quot;[)&quot;, T1, T2, UniformRandomNumberGenerator)(T1 a, T2 b, ref UniformRandomNumberGenerator urng)</source>
          <target state="translated">&lt;strong id=&quot;uniform&quot;&gt;uniforme&lt;/strong&gt; autom&amp;aacute;tico (l&amp;iacute;mites de cadena = &quot;[)&quot;, T1, T2, UniformRandomNumberGenerator) (T1 a, T2 b, ref UniformRandomNumberGenerator urng)</target>
        </trans-unit>
        <trans-unit id="702ea08d17c41e11f596990e7189352c3c1d4d2b" translate="yes" xml:space="preserve">
          <source>auto &lt;strong id=&quot;uniq&quot;&gt;uniq&lt;/strong&gt;(alias pred = &quot;a == b&quot;, Range)(Range r)</source>
          <target state="translated">auto &lt;strong id=&quot;uniq&quot;&gt;uniq&lt;/strong&gt; (alias pred = &quot;a == b&quot;, Rango) (Rango r)</target>
        </trans-unit>
        <trans-unit id="ce463c7693c99df7de2f9ac4d0a1498ce0800db8" translate="yes" xml:space="preserve">
          <source>auto &lt;strong id=&quot;unsigned&quot;&gt;unsigned&lt;/strong&gt;(T)(T x)</source>
          <target state="translated">auto &lt;strong id=&quot;unsigned&quot;&gt;sin signo&lt;/strong&gt; (T) (T x)</target>
        </trans-unit>
        <trans-unit id="3b87faaf518ddb4d06fb4fe73a1c4d247e2919fa" translate="yes" xml:space="preserve">
          <source>auto &lt;strong id=&quot;upperBound&quot;&gt;upperBound&lt;/strong&gt;(SearchPolicy sp = SearchPolicy.binarySearch, V)(V value)</source>
          <target state="translated">auto &lt;strong id=&quot;upperBound&quot;&gt;upperBound&lt;/strong&gt; ( &lt;strong id=&quot;upperBound&quot;&gt;SearchPolicy&lt;/strong&gt; sp = SearchPolicy.binarySearch, V) (valor V)</target>
        </trans-unit>
        <trans-unit id="0d2f79af05ee5d9e60e486186375af4f52cc6662" translate="yes" xml:space="preserve">
          <source>auto &lt;strong id=&quot;utfMatcher&quot;&gt;utfMatcher&lt;/strong&gt;(Char, Set)(Set set)</source>
          <target state="translated">auto &lt;strong id=&quot;utfMatcher&quot;&gt;utfMatcher&lt;/strong&gt; (Char, Set) (Set set)</target>
        </trans-unit>
        <trans-unit id="bd2e970692e269e4dd0974dcd211a780b044fc5a" translate="yes" xml:space="preserve">
          <source>auto &lt;strong id=&quot;visit&quot;&gt;visit&lt;/strong&gt;(VariantType)(VariantType variant)</source>
          <target state="translated">&lt;strong id=&quot;visit&quot;&gt;visita&lt;/strong&gt; autom&amp;aacute;tica (VariantType) (VariantType variant)</target>
        </trans-unit>
        <trans-unit id="aeae0781389033af514b3e09ba43d1cbf05059df" translate="yes" xml:space="preserve">
          <source>auto &lt;strong id=&quot;walkLength&quot;&gt;walkLength&lt;/strong&gt;(Range)(Range range)</source>
          <target state="translated">auto &lt;strong id=&quot;walkLength&quot;&gt;walkLength&lt;/strong&gt; (Range) (Rango rango)</target>
        </trans-unit>
        <trans-unit id="9bdf0e72c2263ee9b140aeb77398bb216cb1667f" translate="yes" xml:space="preserve">
          <source>auto &lt;strong id=&quot;walkLength&quot;&gt;walkLength&lt;/strong&gt;(Range)(Range range, const size_t upTo)</source>
          <target state="translated">auto &lt;strong id=&quot;walkLength&quot;&gt;walkLength&lt;/strong&gt; (Range) (Range range, const size_t upTo)</target>
        </trans-unit>
        <trans-unit id="74e1b83e4cb325a39ecf4f0e9d0adc801918670f" translate="yes" xml:space="preserve">
          <source>auto &lt;strong id=&quot;withDefaultExtension&quot;&gt;withDefaultExtension&lt;/strong&gt;(C1, C2)(C1[] path, C2[] ext)</source>
          <target state="translated">auto &lt;strong id=&quot;withDefaultExtension&quot;&gt;withDefaultExtension&lt;/strong&gt; (C1, C2) (ruta C1 [], C2 [] ext)</target>
        </trans-unit>
        <trans-unit id="f0096b01d67ec1593b97c03358c89b8fbe09f884" translate="yes" xml:space="preserve">
          <source>auto &lt;strong id=&quot;withDefaultExtension&quot;&gt;withDefaultExtension&lt;/strong&gt;(R, C)(R path, C[] ext)</source>
          <target state="translated">auto &lt;strong id=&quot;withDefaultExtension&quot;&gt;withDefaultExtension&lt;/strong&gt; (R, C) (ruta R, C [] ext)</target>
        </trans-unit>
        <trans-unit id="42168ff8f9df73124ad05e50994df68aae9364a0" translate="yes" xml:space="preserve">
          <source>auto &lt;strong id=&quot;withExtension&quot;&gt;withExtension&lt;/strong&gt;(C1, C2)(C1[] path, C2[] ext)</source>
          <target state="translated">auto &lt;strong id=&quot;withExtension&quot;&gt;withExtension&lt;/strong&gt; (C1, C2) (ruta C1 [], C2 [] ext)</target>
        </trans-unit>
        <trans-unit id="c4ad94172931913bc2507aa869971f392d747812" translate="yes" xml:space="preserve">
          <source>auto &lt;strong id=&quot;withExtension&quot;&gt;withExtension&lt;/strong&gt;(R, C)(R path, C[] ext)</source>
          <target state="translated">auto &lt;strong id=&quot;withExtension&quot;&gt;withExtension&lt;/strong&gt; (R, C) (ruta R, C [] ext)</target>
        </trans-unit>
        <trans-unit id="26d1582a47e535af04165ea8d364a0e4804dbfca" translate="yes" xml:space="preserve">
          <source>auto &lt;strong id=&quot;wrap&quot;&gt;wrap&lt;/strong&gt;(Source)(inout Source src)</source>
          <target state="translated">autom&amp;aacute;tico &lt;strong id=&quot;wrap&quot;&gt;envoltura&lt;/strong&gt; (Fuente) (inout Fuente src)</target>
        </trans-unit>
        <trans-unit id="0f8aae271ee15c37afd93650c1907db2ac3075ce" translate="yes" xml:space="preserve">
          <source>auto &lt;strong id=&quot;zip&quot;&gt;zip&lt;/strong&gt;(Ranges...)(Ranges ranges)</source>
          <target state="translated">auto &lt;strong id=&quot;zip&quot;&gt;zip&lt;/strong&gt; (Rangos ...) (Rangos rangos)</target>
        </trans-unit>
        <trans-unit id="4d43e82f8ddd4be61dabd00aec240527404b36a7" translate="yes" xml:space="preserve">
          <source>auto &lt;strong id=&quot;zip&quot;&gt;zip&lt;/strong&gt;(Ranges...)(StoppingPolicy sp, Ranges ranges)</source>
          <target state="translated">auto &lt;strong id=&quot;zip&quot;&gt;zip&lt;/strong&gt; (Rangos ...) (StoppingPolicy sp, Rangos rangos)</target>
        </trans-unit>
        <trans-unit id="e9d71f5ee7c92d6dc9e92ffdad17b8bd49418f98" translate="yes" xml:space="preserve">
          <source>b</source>
          <target state="translated">b</target>
        </trans-unit>
        <trans-unit id="ec1b27e38aae305b81192776d607be1dd446ee20" translate="yes" xml:space="preserve">
          <source>back end equivalent &lt;code&gt;type&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;type&lt;/code&gt; equivalente de fondo</target>
        </trans-unit>
        <trans-unit id="c7fab2fea4d7bd612d4baf8c3e1ff389b3d7ac93" translate="yes" xml:space="preserve">
          <source>back end symbol to initialize with literal</source>
          <target state="translated">el símbolo de la parte posterior para inicializar con el literal</target>
        </trans-unit>
        <trans-unit id="adee31a9f1b9593a4ea72e1ce1ed6ca5898cb2bd" translate="yes" xml:space="preserve">
          <source>backend type</source>
          <target state="translated">tipo de fondo</target>
        </trans-unit>
        <trans-unit id="5da3a70eb9456e1beec177d4577b5c9c12d9052f" translate="yes" xml:space="preserve">
          <source>backend/cc.d</source>
          <target state="translated">backend/cc.d</target>
        </trans-unit>
        <trans-unit id="a55adb280d88100bf0b25b508e25c07dba26d3f2" translate="yes" xml:space="preserve">
          <source>backend/cdef.d</source>
          <target state="translated">backend/cdef.d</target>
        </trans-unit>
        <trans-unit id="9786e8f28222eb02bcb1bb6669d55ea9d4a8a8f9" translate="yes" xml:space="preserve">
          <source>backend/cgcv.c</source>
          <target state="translated">backend/cgcv.c</target>
        </trans-unit>
        <trans-unit id="17ff2cf08840160699c65550c51c19f1de42d954" translate="yes" xml:space="preserve">
          <source>backend/code.d</source>
          <target state="translated">backend/code.d</target>
        </trans-unit>
        <trans-unit id="6eabfd520cb040484f988e65f2c701397fe0fbcf" translate="yes" xml:space="preserve">
          <source>backend/code_x86.d</source>
          <target state="translated">backend/code_x86.d</target>
        </trans-unit>
        <trans-unit id="ea85579dbb427ec9a15c5ba0f0a6e1922222bb7f" translate="yes" xml:space="preserve">
          <source>backend/codebuilder.d</source>
          <target state="translated">backend/codebuilder.d</target>
        </trans-unit>
        <trans-unit id="93104d307e66e215985a7c742fe7bde3cc85eebf" translate="yes" xml:space="preserve">
          <source>backend/cv4.d</source>
          <target state="translated">backend/cv4.d</target>
        </trans-unit>
        <trans-unit id="4c2d1923c098f0311118a98d9dacd6286e141c8a" translate="yes" xml:space="preserve">
          <source>backend/dlist.d</source>
          <target state="translated">backend/dlist.d</target>
        </trans-unit>
        <trans-unit id="4c7a9938a718072bfbce3a6b909b27bbfb228808" translate="yes" xml:space="preserve">
          <source>backend/el.d</source>
          <target state="translated">backend/el.d</target>
        </trans-unit>
        <trans-unit id="1973ca1bae7513c54acd1262bca358adabcf6b08" translate="yes" xml:space="preserve">
          <source>backend/exh.d</source>
          <target state="translated">backend/exh.d</target>
        </trans-unit>
        <trans-unit id="5685e3bcbf2295f71516d4f8f166949a3e233f65" translate="yes" xml:space="preserve">
          <source>backend/global.d</source>
          <target state="translated">backend/global.d</target>
        </trans-unit>
        <trans-unit id="3e953674b7cd16909dd5628855a4db6a49761342" translate="yes" xml:space="preserve">
          <source>backend/iasm.d</source>
          <target state="translated">backend/iasm.d</target>
        </trans-unit>
        <trans-unit id="c96f7dfc37579aa124083ebd41d6f21da26585a0" translate="yes" xml:space="preserve">
          <source>backend/melf.d</source>
          <target state="translated">backend/melf.d</target>
        </trans-unit>
        <trans-unit id="f7b704b70f4403d0b3b6cfdea6b77f3ee9c1dec3" translate="yes" xml:space="preserve">
          <source>backend/mscoff.d</source>
          <target state="translated">backend/mscoff.d</target>
        </trans-unit>
        <trans-unit id="22a4d68664c7657ee726835c86086e69229adcda" translate="yes" xml:space="preserve">
          <source>backend/obj.d</source>
          <target state="translated">backend/obj.d</target>
        </trans-unit>
        <trans-unit id="29fe7fe162b9044c427a3fe1f19e5ece50d704dd" translate="yes" xml:space="preserve">
          <source>backend/oper.d</source>
          <target state="translated">backend/oper.d</target>
        </trans-unit>
        <trans-unit id="b05b47fa346b59fa844c13978a88a94933d118e3" translate="yes" xml:space="preserve">
          <source>backend/outbuf.d</source>
          <target state="translated">backend/outbuf.d</target>
        </trans-unit>
        <trans-unit id="15254b793e077eeb52954cdbed7dc93dd256e297" translate="yes" xml:space="preserve">
          <source>backend/strtold.c</source>
          <target state="translated">backend/strtold.c</target>
        </trans-unit>
        <trans-unit id="80bef2a242b1f5d39e8431af814fa7384d44e3e1" translate="yes" xml:space="preserve">
          <source>backend/ty.d</source>
          <target state="translated">backend/ty.d</target>
        </trans-unit>
        <trans-unit id="5923a51ae56027a7008b95a550688c19866aa6fe" translate="yes" xml:space="preserve">
          <source>backend/type.d</source>
          <target state="translated">backend/type.d</target>
        </trans-unit>
        <trans-unit id="7868153e996db42f57f3bbfd6e5e66690ab0cf25" translate="yes" xml:space="preserve">
          <source>backend/xmm.d</source>
          <target state="translated">backend/xmm.d</target>
        </trans-unit>
        <trans-unit id="1405df66cbe219b0bf6355bc3d60361a8376b6b4" translate="yes" xml:space="preserve">
          <source>base</source>
          <target state="translated">base</target>
        </trans-unit>
        <trans-unit id="9c39c563788790d5b576b2b918f3a9f2caf5de97" translate="yes" xml:space="preserve">
          <source>base = A pointer to the base of the block in question. size = The size of the block, calculated from base. attr = Attribute bits set on the memory block.</source>
          <target state="translated">base=Un puntero a la base del bloque en cuestión.size=El tamaño del bloque,calculado a partir de la base.attr=Bits de atributo fijados en el bloque de memoria.</target>
        </trans-unit>
        <trans-unit id="94f0cf029e34b46f8956546c3ca831b45b7757bb" translate="yes" xml:space="preserve">
          <source>base class</source>
          <target state="translated">clase base</target>
        </trans-unit>
        <trans-unit id="3f942d69ec1de236580e0f440a7acf4059d99ba5" translate="yes" xml:space="preserve">
          <source>base class if overriding, null if not</source>
          <target state="translated">clase base si se anula,nulo si no</target>
        </trans-unit>
        <trans-unit id="c7a4f92f548528d9d0fd62867939bebe16263928" translate="yes" xml:space="preserve">
          <source>base classes of  T, in decreasing order, followed by T's interfaces. TransitiveBaseTypeTuple!Object yields the empty type tuple.</source>
          <target state="translated">clases base de T,en orden decreciente,seguidas de las interfaces de T.El objeto TransitiveBaseTypeTuple! produce la tupla de tipo vacía.</target>
        </trans-unit>
        <trans-unit id="ab2416f3705ed880a3fe16c3414a75a71ac6e230" translate="yes" xml:space="preserve">
          <source>base classes of this class, in decreasing order. Interfaces are not included.  BaseClassesTuple!Object yields the empty type tuple.</source>
          <target state="translated">clases base de esta clase,en orden decreciente.Las interfaces no están incluidas.¡Clases BaseTupla! El objeto produce el tipo vacío tupla.</target>
        </trans-unit>
        <trans-unit id="a3451ef3c5551aab1420a3d9d728a13ee436a6b4" translate="yes" xml:space="preserve">
          <source>base type</source>
          <target state="translated">tipo de base</target>
        </trans-unit>
        <trans-unit id="8b3044730658072831a7e48c1e5af5cbcfef12c1" translate="yes" xml:space="preserve">
          <source>baseFunc</source>
          <target state="translated">baseFunc</target>
        </trans-unit>
        <trans-unit id="685919ac47ab8bbc9632dbb927ea00af2c22576b" translate="yes" xml:space="preserve">
          <source>be used &quot;UFCS-style&quot;, e.g. &lt;code&gt;r.put(e)&lt;/code&gt;. Doing this may call &lt;code&gt;R.put&lt;/code&gt; directly, by-passing any transformation feature provided by &lt;code&gt;Range.put&lt;/code&gt;. &lt;code&gt;put(r, e)&lt;/code&gt; is prefered.</source>
          <target state="translated">ser utilizado &quot;estilo UFCS&quot;, por ejemplo, &lt;code&gt;r.put(e)&lt;/code&gt; . Hacer esto puede llamar a &lt;code&gt;R.put&lt;/code&gt; directamente, omitiendo cualquier caracter&amp;iacute;stica de transformaci&amp;oacute;n proporcionada por &lt;code&gt;Range.put&lt;/code&gt; . &lt;code&gt;put(r, e)&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="5a577cf4576f89a09ea181cfbaa674995f97c427" translate="yes" xml:space="preserve">
          <source>be used to build a Document, but that is not their primary purpose. The handling capabilities of DocumentParser and ElementParser are sufficiently customizable that you can make them do pretty much whatever you want.</source>
          <target state="translated">para construir un documento,pero ese no es su propósito principal.Las capacidades de manejo de DocumentParser y ElementParser son lo suficientemente personalizables como para hacer que hagan prácticamente lo que quieran.</target>
        </trans-unit>
        <trans-unit id="2a4dae977ec56920fee38652ca2403d48804e51f" translate="yes" xml:space="preserve">
          <source>be used to collect any &lt;code&gt;Throwable&lt;/code&gt; and not just &lt;code&gt;Exception&lt;/code&gt;s, it is generally ill-advised to catch anything that is neither an &lt;code&gt;Exception&lt;/code&gt; nor a type derived from &lt;code&gt;Exception&lt;/code&gt;. So, do not use &lt;code&gt;collectException&lt;/code&gt; to collect non-&lt;code&gt;Exception&lt;/code&gt;s unless you're sure that that's what you really want to do.</source>
          <target state="translated">se utiliza para recopilar cualquier &lt;code&gt;Throwable&lt;/code&gt; y no solo &lt;code&gt;Exception&lt;/code&gt; s, por lo general no es aconsejable capturar nada que no sea una &lt;code&gt;Exception&lt;/code&gt; ni un tipo derivado de &lt;code&gt;Exception&lt;/code&gt; . Por lo tanto, no use &lt;code&gt;collectException&lt;/code&gt; para recopilar mensajes que no sean &lt;code&gt;Exception&lt;/code&gt; a menos que est&amp;eacute; seguro de que eso es lo que realmente quiere hacer.</target>
        </trans-unit>
        <trans-unit id="9d555c9f3b739e6c4851fdb7743f953f310ff20e" translate="yes" xml:space="preserve">
          <source>be used to collect any &lt;code&gt;Throwable&lt;/code&gt; and not just &lt;code&gt;Exception&lt;/code&gt;s, it is generally ill-advised to catch anything that is neither an &lt;code&gt;Exception&lt;/code&gt; nor a type derived from &lt;code&gt;Exception&lt;/code&gt;. So, do not use &lt;code&gt;collectExceptionMsg&lt;/code&gt; to collect non-&lt;code&gt;Exception&lt;/code&gt;s unless you're sure that that's what you really want to do.</source>
          <target state="translated">se utiliza para recopilar cualquier &lt;code&gt;Throwable&lt;/code&gt; y no solo &lt;code&gt;Exception&lt;/code&gt; s, por lo general no es aconsejable capturar nada que no sea una &lt;code&gt;Exception&lt;/code&gt; ni un tipo derivado de &lt;code&gt;Exception&lt;/code&gt; . Por lo tanto, no use &lt;code&gt;collectExceptionMsg&lt;/code&gt; para recopilar mensajes que no sean de &lt;code&gt;Exception&lt;/code&gt; a menos que est&amp;eacute; seguro de que eso es lo que realmente quiere hacer.</target>
        </trans-unit>
        <trans-unit id="29caa76cb0369a938f7637f7e156239642b614fd" translate="yes" xml:space="preserve">
          <source>because the included allocators are building blocks that can be assembled in complex nontrivial allocators.</source>
          <target state="translated">porque los asignadores incluidos son bloques de construcción que pueden ser ensamblados en asignadores complejos no triviales.</target>
        </trans-unit>
        <trans-unit id="eab04f9efae70bb5d2404fdafffcf534852fb698" translate="yes" xml:space="preserve">
          <source>because they deal exclusively in &lt;code&gt;void[]&lt;/code&gt; and have no notion of what type the memory allocated would be destined for. They are</source>
          <target state="translated">porque tratan exclusivamente en &lt;code&gt;void[]&lt;/code&gt; y no tienen idea de a qu&amp;eacute; tipo de memoria se destinar&amp;iacute;a la memoria asignada. Son</target>
        </trans-unit>
        <trans-unit id="c295e8211a007de3625c8d4e4671c28df6904b9e" translate="yes" xml:space="preserve">
          <source>beginLogMsg, logMsgPart, finishLogMsg</source>
          <target state="translated">comenzarLogMsg,logMsgPart,terminarLogMsg</target>
        </trans-unit>
        <trans-unit id="336edf81860bdfc5e56a603ab1759d4ec3c587d2" translate="yes" xml:space="preserve">
          <source>beginning</source>
          <target state="translated">beginning</target>
        </trans-unit>
        <trans-unit id="117f9640075c526c9a58df630d8783414aeb834d" translate="yes" xml:space="preserve">
          <source>being a catchy word for a pattern in this domain specific language. Typical problems usually solved by regular expressions include validation of user input and the ubiquitous find &amp;amp; replace in text processing utilities.</source>
          <target state="translated">siendo una palabra pegadiza para un patr&amp;oacute;n en este lenguaje espec&amp;iacute;fico de dominio. Los problemas t&amp;iacute;picos que generalmente se resuelven mediante expresiones regulares incluyen la validaci&amp;oacute;n de la entrada del usuario y la b&amp;uacute;squeda y reemplazo ubicuo en las utilidades de procesamiento de texto.</target>
        </trans-unit>
        <trans-unit id="c5f5e4d75252d9788ce20300d00023fa1ccd4d19" translate="yes" xml:space="preserve">
          <source>best</source>
          <target state="translated">best</target>
        </trans-unit>
        <trans-unit id="8a7cda07f5af1182bfed08f34909322b8eca9e3a" translate="yes" xml:space="preserve">
          <source>beta(x, y) = (&amp;Gamma;(x) * &amp;Gamma;(y)) / &amp;Gamma;(x + y)</source>
          <target state="translated">beta (x, y) = (&amp;Gamma; (x) * &amp;Gamma; (y)) / &amp;Gamma; (x + y)</target>
        </trans-unit>
        <trans-unit id="d8f6b5c41476dbd011118d1dbb1aafcb0afabe83" translate="yes" xml:space="preserve">
          <source>betaIncomplete(a, b, x) = &amp;Gamma;(a + b) / ( &amp;Gamma;(a) &amp;Gamma;(b) ) * &lt;em&gt;&amp;int;&lt;sub&gt;&lt;small&gt;0&lt;/small&gt;&lt;/sub&gt;&lt;sup&gt;x&lt;/sup&gt;&lt;/em&gt; t&lt;sup&gt;a-1&lt;/sup&gt;(1-t)&lt;sup&gt;b-1&lt;/sup&gt; dt</source>
          <target state="translated">betaIncomplete (a, b, x) = &amp;Gamma; (a + b) / (&amp;Gamma; (a) &amp;Gamma; (b)) * &lt;em&gt;&amp;int; &lt;sub&gt;&lt;small&gt;0&lt;/small&gt;&lt;/sub&gt;&lt;sup&gt; x&lt;/sup&gt;&lt;/em&gt; t &lt;sup&gt;a-1&lt;/sup&gt; (1-t) &lt;sup&gt;b-1&lt;/sup&gt; dt</target>
        </trans-unit>
        <trans-unit id="2eece63f6d123855a9d4a2a983727b322c06b5ce" translate="yes" xml:space="preserve">
          <source>betaIncomplete(a, b, x) == y</source>
          <target state="translated">betaIncompleto(a,b,x)==y</target>
        </trans-unit>
        <trans-unit id="fe4c903120690ee6382d6edfa718efab565cf400" translate="yes" xml:space="preserve">
          <source>betaIncompleteCompl(a, b, x ) = betaIncomplete( b, a, 1-x )</source>
          <target state="translated">betaIncompletoCompleto(a,b,x)=betaIncompleto(b,a,1-x )</target>
        </trans-unit>
        <trans-unit id="0f1370a3e64ba6af577245aaee5403b16e328558" translate="yes" xml:space="preserve">
          <source>bidirectional range</source>
          <target state="translated">rango bidireccional</target>
        </trans-unit>
        <trans-unit id="7dbc183362b97e06ef902adc8dc6150c3f948223" translate="yes" xml:space="preserve">
          <source>bidirectional range of UTF code units. Must be random access if &lt;code&gt;index&lt;/code&gt; is passed</source>
          <target state="translated">rango bidireccional de unidades de c&amp;oacute;digo UTF. Debe tener acceso aleatorio si se pasa el &lt;code&gt;index&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="9800f8043b64f6aa79dadc38fb14a850c7fc7a0b" translate="yes" xml:space="preserve">
          <source>bidirectional range of slices of &lt;code&gt;path&lt;/code&gt;</source>
          <target state="translated">rango bidireccional de cortes de &lt;code&gt;path&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="299557edbc4523a2361810d53f6e03ebf2cd3e6e" translate="yes" xml:space="preserve">
          <source>big endian</source>
          <target state="translated">gran indio</target>
        </trans-unit>
        <trans-unit id="c137238f9154954e601a5c39c9ca286f5d0df50b" translate="yes" xml:space="preserve">
          <source>bitmask, see defines below</source>
          <target state="translated">máscara de bits,véase las definiciones a continuación</target>
        </trans-unit>
        <trans-unit id="b79e21024a7c8abc070f2f1576d3afe326d952fb" translate="yes" xml:space="preserve">
          <source>bits to OR in</source>
          <target state="translated">bits a la sala de operaciones en</target>
        </trans-unit>
        <trans-unit id="e94a39eb7a89afb1a75f4842d803c7eaa91ff14c" translate="yes" xml:space="preserve">
          <source>bits to set</source>
          <target state="translated">bits para fijar</target>
        </trans-unit>
        <trans-unit id="6b1719ff7bc3e66c34c47dffa67959350e917747" translate="yes" xml:space="preserve">
          <source>bitwise OR of the 4 actions UA_xxx. UA_SEARCH_PHASE means return URC_HANDLER_FOUND if current frame has a handler, URC_CONTINUE_UNWIND if not. Cannot be used with UA_CLEANUP_PHASE. UA_CLEANUP_PHASE means perform cleanup for current frame by calling nested functions and returning URC_CONTINUE_UNWIND. Or, set up registers and IP for Landing Pad and return URC_INSTALL_CONTEXT. UA_HANDLER_FRAME means this frame was the one with the handler in Phase 1, and now it is Phase 2 and the handler must be run. UA_FORCE_UNWIND means unwinding the stack for longjmp or thread cancellation. Run finally clauses, not catch clauses, finallys must end with call to Uwind_Resume().</source>
          <target state="translated">bitwise OR de las 4 acciones UA_xxx.UA_SEARCH_PHASE significa devolver URC_HANDLER_FOUND si el cuadro actual tiene un handler,URC_CONTINUE_UNWIND si no.No puede ser usado con UA_CLEANUP_PHASE.UA_CLEANUP_PHASE significa realizar la limpieza del marco actual llamando a funciones anidadas y devolviendo URC_CONTINUE_UNWIND.O,configurar registros e IP para Landing Pad y devolver URC_INSTALL_CONTEXT.UA_HANDLER_FRAME significa que este marco era el que tenía el manejador en la fase 1,y ahora es la fase 2 y el manejador debe ser ejecutado.UA_FORCE_UNWIND significa desenrollar la pila para el longjmp o la cancelación del hilo.Ejecutar las cláusulas de final,no las cláusulas de captura,las cláusulas de final deben terminar con la llamada a Uwind_Resume().</target>
        </trans-unit>
        <trans-unit id="2ba0e2624606448bca6d74dc1f609c4531e1c1a2" translate="yes" xml:space="preserve">
          <source>blitting the fields, i.e. copying the bits</source>
          <target state="translated">...borrando los campos,es decir,copiando los pedazos...</target>
        </trans-unit>
        <trans-unit id="ce27a0dde6f3c1ff80a76e667d86787a8377d51c" translate="yes" xml:space="preserve">
          <source>block size for TFTP transfers</source>
          <target state="translated">tamaño de bloque para las transferencias TFTP</target>
        </trans-unit>
        <trans-unit id="b9e9b661ad468e120114e759bac604155dc9e0aa" translate="yes" xml:space="preserve">
          <source>block to be deallocated</source>
          <target state="translated">bloque a ser distribuido</target>
        </trans-unit>
        <trans-unit id="aadb7bde692bd321c561d66ea9801c45e344eb19" translate="yes" xml:space="preserve">
          <source>block* &lt;code&gt;bp&lt;/code&gt;</source>
          <target state="translated">bloque * &lt;code&gt;bp&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="86dbccd639a5b1adc6032f46b6c954e6c8db3699" translate="yes" xml:space="preserve">
          <source>block* &lt;code&gt;startblock&lt;/code&gt;</source>
          <target state="translated">block * &lt;code&gt;startblock&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="283e62752e2b9dffb87c569ca0e9e86ac47be0d2" translate="yes" xml:space="preserve">
          <source>blockexit.d</source>
          <target state="translated">blockexit.d</target>
        </trans-unit>
        <trans-unit id="155d7a12048ffe6ef5f5f574c194f9ad54dbf436" translate="yes" xml:space="preserve">
          <source>boldface the argument</source>
          <target state="translated">negrita el argumento</target>
        </trans-unit>
        <trans-unit id="5039d155a71c0a5f7a2b2654ad49cb7ee47a8980" translate="yes" xml:space="preserve">
          <source>bool</source>
          <target state="translated">bool</target>
        </trans-unit>
        <trans-unit id="be2c13e5659c9c4b071fd531e07768c800bbb8f9" translate="yes" xml:space="preserve">
          <source>bool &lt;code&gt;alwaysCopy&lt;/code&gt;</source>
          <target state="translated">bool &lt;code&gt;alwaysCopy&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="69b0217016d8de00908b6086a898091c7c92c651" translate="yes" xml:space="preserve">
          <source>bool &lt;code&gt;bAllowSep&lt;/code&gt;</source>
          <target state="translated">bool &lt;code&gt;bAllowSep&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="7e3aec4784da3e987559d87911f177432e138181" translate="yes" xml:space="preserve">
          <source>bool &lt;code&gt;cleanupsOnly&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;cleanupsOnly&lt;/code&gt; bool</target>
        </trans-unit>
        <trans-unit id="9a699526af373ae8a7d94af7b43768d83ec50f47" translate="yes" xml:space="preserve">
          <source>bool &lt;code&gt;commentToken&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;commentToken&lt;/code&gt; bool</target>
        </trans-unit>
        <trans-unit id="a615a3749d0c294edf62d2325c469683d4f86cd6" translate="yes" xml:space="preserve">
          <source>bool &lt;code&gt;condition&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;condition&lt;/code&gt; bool</target>
        </trans-unit>
        <trans-unit id="f8b0c4dc2e2bee68601e70e6e5eb8b21e4bea925" translate="yes" xml:space="preserve">
          <source>bool &lt;code&gt;ctorinit&lt;/code&gt;</source>
          <target state="translated">bool &lt;code&gt;ctorinit&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="5e0494e2a84541f22e239b0c615c2faf41b7c844" translate="yes" xml:space="preserve">
          <source>bool &lt;code&gt;cwd&lt;/code&gt;</source>
          <target state="translated">bool &lt;code&gt;cwd&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="df9f345dcdaa07f79632e239eb63576746fa4a19" translate="yes" xml:space="preserve">
          <source>bool &lt;code&gt;doDocComment&lt;/code&gt;</source>
          <target state="translated">bool &lt;code&gt;doDocComment&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="e7503ac8ceee5585e6b7593bcc91bbe495cd6d90" translate="yes" xml:space="preserve">
          <source>bool &lt;code&gt;errors&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;errors&lt;/code&gt; bool</target>
        </trans-unit>
        <trans-unit id="c7d1ba7752a1370224404b5df5f63d1979faab91" translate="yes" xml:space="preserve">
          <source>bool &lt;code&gt;fix17349&lt;/code&gt;</source>
          <target state="translated">bool &lt;code&gt;fix17349&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="58b5a97981ac5fecd19d5eacdac8df463b863e18" translate="yes" xml:space="preserve">
          <source>bool &lt;code&gt;flag&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;flag&lt;/code&gt; bool</target>
        </trans-unit>
        <trans-unit id="1174441911f84ae857ffae1a2a1a7291f6142b33" translate="yes" xml:space="preserve">
          <source>bool &lt;code&gt;followSymlink&lt;/code&gt;</source>
          <target state="translated">bool &lt;code&gt;followSymlink&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="45e7845183b65c548bfebd0175a2b03c1079447f" translate="yes" xml:space="preserve">
          <source>bool &lt;code&gt;found&lt;/code&gt;</source>
          <target state="translated">bool &lt;code&gt;found&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="2b2cb25f837b4ff3690a8afa9bea23f7164efc45" translate="yes" xml:space="preserve">
          <source>bool &lt;code&gt;full&lt;/code&gt;</source>
          <target state="translated">bool &lt;code&gt;full&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="d095c345e0febf24a53db0896e0bbdcd2f086c40" translate="yes" xml:space="preserve">
          <source>bool &lt;code&gt;fullQual&lt;/code&gt;</source>
          <target state="translated">bool &lt;code&gt;fullQual&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="c44098a43644a6ce8c311ed7d5d7865b9599b245" translate="yes" xml:space="preserve">
          <source>bool &lt;code&gt;gag&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;gag&lt;/code&gt; bool</target>
        </trans-unit>
        <trans-unit id="060d9e8627697dd909b98e00082dba93ecf07519" translate="yes" xml:space="preserve">
          <source>bool &lt;code&gt;hasOverloads&lt;/code&gt;</source>
          <target state="translated">bool &lt;code&gt;hasOverloads&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="daa3651a6f6981d955bee0d61d34f2c1aa2fd2fc" translate="yes" xml:space="preserve">
          <source>bool &lt;code&gt;hasthis&lt;/code&gt;</source>
          <target state="translated">bool &lt;code&gt;hasthis&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="a4e2a944f0a5f1122cec198245cc50afc289650d" translate="yes" xml:space="preserve">
          <source>bool &lt;code&gt;hdrscan&lt;/code&gt;</source>
          <target state="translated">bool &lt;code&gt;hdrscan&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="1b4f05004c6fd68e845f012a77f2a6bbd50db51f" translate="yes" xml:space="preserve">
          <source>bool &lt;code&gt;initialState&lt;/code&gt;</source>
          <target state="translated">bool &lt;code&gt;initialState&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="36f7d8a425df8487540792b117c22b6268ac9e5f" translate="yes" xml:space="preserve">
          <source>bool &lt;code&gt;intypeid&lt;/code&gt;</source>
          <target state="translated">bool &lt;code&gt;intypeid&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="515f98f9aeb39c437a334f88a7a8cca83fc3998b" translate="yes" xml:space="preserve">
          <source>bool &lt;code&gt;isAliasedDeclaration&lt;/code&gt;</source>
          <target state="translated">bool &lt;code&gt;isAliasedDeclaration&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="3a18e34ab651d2c2023db25ddfcc82e9e612c5ca" translate="yes" xml:space="preserve">
          <source>bool &lt;code&gt;isForeach&lt;/code&gt;</source>
          <target state="translated">bool &lt;code&gt;isForeach&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="6befc18f73a2744af90d5999bea7491a67b8dfde" translate="yes" xml:space="preserve">
          <source>bool &lt;code&gt;isFundamental&lt;/code&gt;</source>
          <target state="translated">bool &lt;code&gt;isFundamental&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="a5575a7e055c9dae69afcd1842244213e016aec1" translate="yes" xml:space="preserve">
          <source>bool &lt;code&gt;isRef&lt;/code&gt;</source>
          <target state="translated">bool &lt;code&gt;isRef&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="1717b26a3dad097b82dd69bb2e8b89fc519b7935" translate="yes" xml:space="preserve">
          <source>bool &lt;code&gt;keepLvalue&lt;/code&gt;</source>
          <target state="translated">bool &lt;code&gt;keepLvalue&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="10b228129011a2c2137cd09d8587d10ed8344045" translate="yes" xml:space="preserve">
          <source>bool &lt;code&gt;manualReset&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;manualReset&lt;/code&gt; bool</target>
        </trans-unit>
        <trans-unit id="337f6a6b59d668596afd5ce8b4c0e30bf17575ae" translate="yes" xml:space="preserve">
          <source>bool &lt;code&gt;mustNotThrow&lt;/code&gt;</source>
          <target state="translated">bool &lt;code&gt;mustNotThrow&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="7564837b287994b82885178cf35540387ce09d68" translate="yes" xml:space="preserve">
          <source>bool &lt;code&gt;needsThis&lt;/code&gt;</source>
          <target state="translated">bool &lt;code&gt;needsThis&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="dc0dd944dc23ef58fdc3af0d3b8fee66f5cf1c59" translate="yes" xml:space="preserve">
          <source>bool &lt;code&gt;overflow&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;overflow&lt;/code&gt; bool</target>
        </trans-unit>
        <trans-unit id="267b145520944ebe15214e9f976172d9d872ee8c" translate="yes" xml:space="preserve">
          <source>bool &lt;code&gt;preferHandler&lt;/code&gt;</source>
          <target state="translated">bool &lt;code&gt;preferHandler&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="e8b25e2a594c7bb89a601b766c87cb9027bce3b5" translate="yes" xml:space="preserve">
          <source>bool &lt;code&gt;printmsg&lt;/code&gt;</source>
          <target state="translated">bool &lt;code&gt;printmsg&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="2bccb8b67b94d7e6df230b55a6cc6d26c4fd0314" translate="yes" xml:space="preserve">
          <source>bool &lt;code&gt;readonly&lt;/code&gt;</source>
          <target state="translated">bool de &lt;code&gt;readonly&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="de97fe9585231468e4e73ee7b217ecf171ff8a81" translate="yes" xml:space="preserve">
          <source>bool &lt;code&gt;rethrow&lt;/code&gt;</source>
          <target state="translated">bool &lt;code&gt;rethrow&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="1b9eca70342ca8c388dae9bda1168db13e85a949" translate="yes" xml:space="preserve">
          <source>bool &lt;code&gt;returnByRef&lt;/code&gt;</source>
          <target state="translated">bool &lt;code&gt;returnByRef&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="bc929ba2e1eca49c726c57fab55e40a11633112a" translate="yes" xml:space="preserve">
          <source>bool &lt;code&gt;startQuoted&lt;/code&gt;</source>
          <target state="translated">bool &lt;code&gt;startQuoted&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="8f03013f956f998f1a1f69c47f6548cee0306a61" translate="yes" xml:space="preserve">
          <source>bool &lt;code&gt;val&lt;/code&gt;</source>
          <target state="translated">bool &lt;code&gt;val&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="7646224ed631ee9746c56714feb7e32b57f35c7a" translate="yes" xml:space="preserve">
          <source>bool &lt;code&gt;zero&lt;/code&gt;</source>
          <target state="translated">bool &lt;code&gt;zero&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="84782e04ffcef6934aac75dae86f78bdc5f494c4" translate="yes" xml:space="preserve">
          <source>bool &lt;strong id=&quot;_aaDelX&quot;&gt;_aaDelX&lt;/strong&gt;(AA aa, in TypeInfo keyti, in void* pkey);</source>
          <target state="translated">bool &lt;strong id=&quot;_aaDelX&quot;&gt;_aaDelX&lt;/strong&gt; (AA aa, en TypeInfo keyti, en void * pkey);</target>
        </trans-unit>
        <trans-unit id="7d007990a4fe577cf29310a8dbb5739a4d60ec29" translate="yes" xml:space="preserve">
          <source>bool &lt;strong id=&quot;_isRuntimeInitialized&quot;&gt;_isRuntimeInitialized&lt;/strong&gt;;</source>
          <target state="translated">bool &lt;strong id=&quot;_isRuntimeInitialized&quot;&gt;_isRuntimeInitialized&lt;/strong&gt; ;</target>
        </trans-unit>
        <trans-unit id="bf406a42250ece2cda744a1cfa3769c0087ad2d6" translate="yes" xml:space="preserve">
          <source>bool &lt;strong id=&quot;alignedReallocate&quot;&gt;alignedReallocate&lt;/strong&gt;(Allocator)(ref Allocator alloc, ref void[] b, size_t s, uint a)</source>
          <target state="translated">bool &lt;strong id=&quot;alignedReallocate&quot;&gt;alineado Reasignar&lt;/strong&gt; ( &lt;strong id=&quot;alignedReallocate&quot;&gt;Asignador&lt;/strong&gt; ) (asignaci&amp;oacute;n de asignaci&amp;oacute;n de referencia, nula de referencia [] b, size_t s, uint a)</target>
        </trans-unit>
        <trans-unit id="cadc5e573abcf174927dbb945129aa47cfeeb5ad" translate="yes" xml:space="preserve">
          <source>bool &lt;strong id=&quot;alignedReallocate&quot;&gt;alignedReallocate&lt;/strong&gt;(ref void[] b, size_t s, uint a);</source>
          <target state="translated">bool &lt;strong id=&quot;alignedReallocate&quot;&gt;linedReallocate&lt;/strong&gt; (ref void [] b, size_t s, uint a);</target>
        </trans-unit>
        <trans-unit id="50b3b929ec7220075a19153adcbef3e7073a655b" translate="yes" xml:space="preserve">
          <source>bool &lt;strong id=&quot;alignedReallocate&quot;&gt;alignedReallocate&lt;/strong&gt;(ref void[] b, size_t size, uint a);</source>
          <target state="translated">bool &lt;strong id=&quot;alignedReallocate&quot;&gt;linedReallocate&lt;/strong&gt; (ref void [] b, size_t size, uint a);</target>
        </trans-unit>
        <trans-unit id="604ead0cc53445dde4b2be129d9e83e9b8de0f68" translate="yes" xml:space="preserve">
          <source>bool &lt;strong id=&quot;all&quot;&gt;all&lt;/strong&gt;(Range)(Range range)</source>
          <target state="translated">bool &lt;strong id=&quot;all&quot;&gt;all&lt;/strong&gt; (Rango) (Rango rango)</target>
        </trans-unit>
        <trans-unit id="9a6fb7332acd1368177cd750b00fddfbac998eb2" translate="yes" xml:space="preserve">
          <source>bool &lt;strong id=&quot;allowCommaExp&quot;&gt;allowCommaExp&lt;/strong&gt;;</source>
          <target state="translated">bool &lt;strong id=&quot;allowCommaExp&quot;&gt;allowCommaExp&lt;/strong&gt; ;</target>
        </trans-unit>
        <trans-unit id="28f949d27405876ef8f6fec36842f769e17ea8c8" translate="yes" xml:space="preserve">
          <source>bool &lt;strong id=&quot;allowedIn&quot;&gt;allowedIn&lt;/strong&gt;(NormalizationForm norm)(dchar ch);</source>
          <target state="translated">bool &lt;strong id=&quot;allowedIn&quot;&gt;allowedIn&lt;/strong&gt; (norma de normalizaci&amp;oacute;n) (dchar ch);</target>
        </trans-unit>
        <trans-unit id="dd7fedc5cda807019c0f8000fa380b2aae819249" translate="yes" xml:space="preserve">
          <source>bool &lt;strong id=&quot;any&quot;&gt;any&lt;/strong&gt;(Range)(Range range)</source>
          <target state="translated">bool &lt;strong id=&quot;any&quot;&gt;any&lt;/strong&gt; (Rango) (Rango rango)</target>
        </trans-unit>
        <trans-unit id="fc16ba5f6ae6f41e63cab1e4b1d2fbc0125e4ed9" translate="yes" xml:space="preserve">
          <source>bool &lt;strong id=&quot;approxEqual&quot;&gt;approxEqual&lt;/strong&gt;(T, U)(T lhs, U rhs);</source>
          <target state="translated">bool &lt;strong id=&quot;approxEqual&quot;&gt;aproximadamente Igual&lt;/strong&gt; (T, U) (T lhs, U rhs);</target>
        </trans-unit>
        <trans-unit id="d972e3712f45e410f77a9355e62a13dba4b3b14c" translate="yes" xml:space="preserve">
          <source>bool &lt;strong id=&quot;approxEqual&quot;&gt;approxEqual&lt;/strong&gt;(T, U, V)(T lhs, U rhs, V maxRelDiff, V maxAbsDiff = 1e-05);</source>
          <target state="translated">bool &lt;strong id=&quot;approxEqual&quot;&gt;approxEqual&lt;/strong&gt; (T, U, V) (T lhs, U rhs, V maxRelDiff, V maxAbsDiff = 1e-05);</target>
        </trans-unit>
        <trans-unit id="ec08dd0db2edbe64f89a91982585ed0e979c498c" translate="yes" xml:space="preserve">
          <source>bool &lt;strong id=&quot;arrayBoundsCheck&quot;&gt;arrayBoundsCheck&lt;/strong&gt;();</source>
          <target state="translated">bool &lt;strong id=&quot;arrayBoundsCheck&quot;&gt;arrayBoundsCheck&lt;/strong&gt; ();</target>
        </trans-unit>
        <trans-unit id="30870bdd5515c7a0b41e17f128abda125587be19" translate="yes" xml:space="preserve">
          <source>bool &lt;strong id=&quot;arrayExpressionSemantic&quot;&gt;arrayExpressionSemantic&lt;/strong&gt;(Expressions* exps, Scope* sc, bool preserveErrors = false);</source>
          <target state="translated">bool &lt;strong id=&quot;arrayExpressionSemantic&quot;&gt;arrayExpressionSemantic&lt;/strong&gt; (Expressions * exps, Scope * sc, bool preserveErrors = false);</target>
        </trans-unit>
        <trans-unit id="6a0c0e0d0377cb0a24f8a992b09a840afa662614" translate="yes" xml:space="preserve">
          <source>bool &lt;strong id=&quot;arrayTypeCompatible&quot;&gt;arrayTypeCompatible&lt;/strong&gt;(Loc loc, Type t1, Type t2);</source>
          <target state="translated">bool &lt;strong id=&quot;arrayTypeCompatible&quot;&gt;arrayTypeCompatible&lt;/strong&gt; (Loc loc, Tipo t1, Tipo t2);</target>
        </trans-unit>
        <trans-unit id="40540485ee8ba2af13e6bf2b80568231bfe2f72d" translate="yes" xml:space="preserve">
          <source>bool &lt;strong id=&quot;arrayTypeCompatibleWithoutCasting&quot;&gt;arrayTypeCompatibleWithoutCasting&lt;/strong&gt;(Type t1, Type t2);</source>
          <target state="translated">bool &lt;strong id=&quot;arrayTypeCompatibleWithoutCasting&quot;&gt;arrayTypeCompatibleWithoutCasting&lt;/strong&gt; (Tipo t1, Tipo t2);</target>
        </trans-unit>
        <trans-unit id="4d6a62cc73c46635c6dd184aa8d02785eabe0952" translate="yes" xml:space="preserve">
          <source>bool &lt;strong id=&quot;balancedParens&quot;&gt;balancedParens&lt;/strong&gt;(Range, E)(Range r, E lPar, E rPar, size_t maxNestingLevel = size_t.max)</source>
          <target state="translated">bool &lt;strong id=&quot;balancedParens&quot;&gt;BalancedParens&lt;/strong&gt; (Range, E) (Range r, E lPar, E rPar, size_t maxNestingLevel = size_t.max)</target>
        </trans-unit>
        <trans-unit id="0a27ee672cf2931823d09b93d57201db48d7835d" translate="yes" xml:space="preserve">
          <source>bool &lt;strong id=&quot;bodyFallsThru&quot;&gt;bodyFallsThru&lt;/strong&gt;;</source>
          <target state="translated">bool &lt;strong id=&quot;bodyFallsThru&quot;&gt;bodyFallsThru&lt;/strong&gt; ;</target>
        </trans-unit>
        <trans-unit id="757bba41b48417e5a6aba5742c8dd1b7224e36a8" translate="yes" xml:space="preserve">
          <source>bool &lt;strong id=&quot;canEncode&quot;&gt;canEncode&lt;/strong&gt;(E)(dchar c);</source>
          <target state="translated">bool &lt;strong id=&quot;canEncode&quot;&gt;canEncode&lt;/strong&gt; (E) (dchar c);</target>
        </trans-unit>
        <trans-unit id="08c58256d5cb5b965ff18cb9cdffa4506c5a65af" translate="yes" xml:space="preserve">
          <source>bool &lt;strong id=&quot;canFind&quot;&gt;canFind&lt;/strong&gt;(Range)(Range haystack)</source>
          <target state="translated">bool &lt;strong id=&quot;canFind&quot;&gt;canFind&lt;/strong&gt; (Range) (Range haystack)</target>
        </trans-unit>
        <trans-unit id="9d68045dc1570cb29a1f98c3778b490070bb13bb" translate="yes" xml:space="preserve">
          <source>bool &lt;strong id=&quot;canFind&quot;&gt;canFind&lt;/strong&gt;(Range, Element)(Range haystack, scope Element needle)</source>
          <target state="translated">bool &lt;strong id=&quot;canFind&quot;&gt;canFind&lt;/strong&gt; (Rango, Elemento) ( &lt;strong id=&quot;canFind&quot;&gt;Pajar de&lt;/strong&gt; rango, aguja de Elemento de alcance)</target>
        </trans-unit>
        <trans-unit id="214adc6b03fd71b25f70098cf93821c8d554852c" translate="yes" xml:space="preserve">
          <source>bool &lt;strong id=&quot;canThrow&quot;&gt;canThrow&lt;/strong&gt;(Expression e, FuncDeclaration func, bool mustNotThrow);</source>
          <target state="translated">bool &lt;strong id=&quot;canThrow&quot;&gt;canThrow&lt;/strong&gt; (Expression e, FuncDeclaration func, bool mustNotThrow);</target>
        </trans-unit>
        <trans-unit id="d0e5ae25003ad39a6da1fac7c0c9075b394b92e9" translate="yes" xml:space="preserve">
          <source>bool &lt;strong id=&quot;checkAccess&quot;&gt;checkAccess&lt;/strong&gt;(AggregateDeclaration ad, Loc loc, Scope* sc, Dsymbol smember);</source>
          <target state="translated">bool &lt;strong id=&quot;checkAccess&quot;&gt;checkAccess&lt;/strong&gt; (anuncio de &lt;strong id=&quot;checkAccess&quot;&gt;declaraci&amp;oacute;n&lt;/strong&gt; agregada, Loc loc, Scope * sc, Dsymbol smember);</target>
        </trans-unit>
        <trans-unit id="c15d5c7d1bbfcc74babe4636f8c4b4043503f65b" translate="yes" xml:space="preserve">
          <source>bool &lt;strong id=&quot;checkAccess&quot;&gt;checkAccess&lt;/strong&gt;(Loc loc, Scope* sc, Expression e, Declaration d);</source>
          <target state="translated">bool &lt;strong id=&quot;checkAccess&quot;&gt;checkAccess&lt;/strong&gt; (Loc loc, Scope * sc, Expresi&amp;oacute;n e, Declaraci&amp;oacute;n d);</target>
        </trans-unit>
        <trans-unit id="1e73226b60e63c5f767a8f5250887b8cc1d1c776" translate="yes" xml:space="preserve">
          <source>bool &lt;strong id=&quot;checkAccess&quot;&gt;checkAccess&lt;/strong&gt;(Loc loc, Scope* sc, Package p);</source>
          <target state="translated">bool &lt;strong id=&quot;checkAccess&quot;&gt;checkAccess&lt;/strong&gt; (Loc loc, Scope * sc, Paquete p);</target>
        </trans-unit>
        <trans-unit id="3f77e8f27322a3c79a488b982605d6686004e007" translate="yes" xml:space="preserve">
          <source>bool &lt;strong id=&quot;checkArrayLiteralEscape&quot;&gt;checkArrayLiteralEscape&lt;/strong&gt;(Scope* sc, ArrayLiteralExp ae, bool gag);</source>
          <target state="translated">bool &lt;strong id=&quot;checkArrayLiteralEscape&quot;&gt;checkArrayLiteralEscape&lt;/strong&gt; (Scope * sc, ArrayLiteralExp ae, bool gag);</target>
        </trans-unit>
        <trans-unit id="95fec04343f29cae83e48249a2a2c391cea070cd" translate="yes" xml:space="preserve">
          <source>bool &lt;strong id=&quot;checkAssignEscape&quot;&gt;checkAssignEscape&lt;/strong&gt;(Scope* sc, Expression e, bool gag);</source>
          <target state="translated">bool &lt;strong id=&quot;checkAssignEscape&quot;&gt;checkAssignEscape&lt;/strong&gt; (Scope * sc, Expression e, bool gag);</target>
        </trans-unit>
        <trans-unit id="96ca3d15f8f6e14b297d481e32cab80c62458f38" translate="yes" xml:space="preserve">
          <source>bool &lt;strong id=&quot;checkAssocArrayLiteralEscape&quot;&gt;checkAssocArrayLiteralEscape&lt;/strong&gt;(Scope* sc, AssocArrayLiteralExp ae, bool gag);</source>
          <target state="translated">bool &lt;strong id=&quot;checkAssocArrayLiteralEscape&quot;&gt;checkAssocArrayLiteralEscape&lt;/strong&gt; (Scope * sc, AssocArrayLiteralExp ae, bool gag);</target>
        </trans-unit>
        <trans-unit id="4cf83dd46a09529023a2936de1b6d09a5e36b9e4" translate="yes" xml:space="preserve">
          <source>bool &lt;strong id=&quot;checkConstructorEscape&quot;&gt;checkConstructorEscape&lt;/strong&gt;(Scope* sc, CallExp ce, bool gag);</source>
          <target state="translated">bool &lt;strong id=&quot;checkConstructorEscape&quot;&gt;checkConstructorEscape&lt;/strong&gt; (Scope * sc, CallExp ce, bool gag);</target>
        </trans-unit>
        <trans-unit id="46b4f903e93968420f83fe45f5834a4f90c4c237" translate="yes" xml:space="preserve">
          <source>bool &lt;strong id=&quot;checkDeprecatedAliasThis&quot;&gt;checkDeprecatedAliasThis&lt;/strong&gt;(AliasThis at, ref const Loc loc, Scope* sc);</source>
          <target state="translated">bool &lt;strong id=&quot;checkDeprecatedAliasThis&quot;&gt;checkDeprecatedAliasThis&lt;/strong&gt; (AliasThis at, ref const Loc loc, Scope * sc);</target>
        </trans-unit>
        <trans-unit id="8207f12ad375c7229e559808d1a064f68845cec4" translate="yes" xml:space="preserve">
          <source>bool &lt;strong id=&quot;checkFrameAccess&quot;&gt;checkFrameAccess&lt;/strong&gt;(Loc loc, Scope* sc, AggregateDeclaration ad, size_t iStart = 0);</source>
          <target state="translated">bool &lt;strong id=&quot;checkFrameAccess&quot;&gt;checkFrameAccess&lt;/strong&gt; (Loc loc, Scope * sc, AggregateDeclaration ad, size_t iStart = 0);</target>
        </trans-unit>
        <trans-unit id="b50b812c332554a6411ae8cebc8d6c01e4b35048" translate="yes" xml:space="preserve">
          <source>bool &lt;strong id=&quot;checkLabel&quot;&gt;checkLabel&lt;/strong&gt;();</source>
          <target state="translated">bool &lt;strong id=&quot;checkLabel&quot;&gt;checkLabel&lt;/strong&gt; ();</target>
        </trans-unit>
        <trans-unit id="5333b39cb0f57dbca6641aa448f36e3fbf2cd8a9" translate="yes" xml:space="preserve">
          <source>bool &lt;strong id=&quot;checkNewEscape&quot;&gt;checkNewEscape&lt;/strong&gt;(Scope* sc, Expression e, bool gag);</source>
          <target state="translated">bool &lt;strong id=&quot;checkNewEscape&quot;&gt;checkNewEscape&lt;/strong&gt; (Scope * sc, Expression e, bool gag);</target>
        </trans-unit>
        <trans-unit id="533e5be2acef7962ac1a6121e54047b37c3db329" translate="yes" xml:space="preserve">
          <source>bool &lt;strong id=&quot;checkParamArgumentEscape&quot;&gt;checkParamArgumentEscape&lt;/strong&gt;(Scope* sc, FuncDeclaration fdc, Parameter par, Expression arg, bool gag);</source>
          <target state="translated">bool &lt;strong id=&quot;checkParamArgumentEscape&quot;&gt;checkParamArgumentEscape&lt;/strong&gt; (Scope * sc, FuncDeclaration fdc, Par&amp;aacute;metro par, Expression arg, bool gag);</target>
        </trans-unit>
        <trans-unit id="f79349c698629e877f83cbcafc73ee889e3b5738" translate="yes" xml:space="preserve">
          <source>bool &lt;strong id=&quot;checkParamArgumentReturn&quot;&gt;checkParamArgumentReturn&lt;/strong&gt;(Scope* sc, Expression firstArg, Expression arg, bool gag);</source>
          <target state="translated">bool &lt;strong id=&quot;checkParamArgumentReturn&quot;&gt;checkParamArgumentReturn&lt;/strong&gt; (Scope * sc, Expression firstArg, Expression arg, bool gag);</target>
        </trans-unit>
        <trans-unit id="d1ef06b6453355aa8ea6760b8a755aa12e4b8a0c" translate="yes" xml:space="preserve">
          <source>bool &lt;strong id=&quot;checkReturnEscape&quot;&gt;checkReturnEscape&lt;/strong&gt;(Scope* sc, Expression e, bool gag);</source>
          <target state="translated">bool &lt;strong id=&quot;checkReturnEscape&quot;&gt;checkReturnEscape&lt;/strong&gt; (Scope * sc, Expression e, bool gag);</target>
        </trans-unit>
        <trans-unit id="3dfdf526922f5fa2cee34b460fcfb8c3d6209740" translate="yes" xml:space="preserve">
          <source>bool &lt;strong id=&quot;checkReturnEscapeRef&quot;&gt;checkReturnEscapeRef&lt;/strong&gt;(Scope* sc, Expression e, bool gag);</source>
          <target state="translated">bool &lt;strong id=&quot;checkReturnEscapeRef&quot;&gt;checkReturnEscapeRef&lt;/strong&gt; (Scope * sc, Expression e, bool gag);</target>
        </trans-unit>
        <trans-unit id="7a942c05ccff7a80a0e883031a9f2467adac1209" translate="yes" xml:space="preserve">
          <source>bool &lt;strong id=&quot;checkSharedAccess&quot;&gt;checkSharedAccess&lt;/strong&gt;(Expression e, Scope* sc);</source>
          <target state="translated">bool &lt;strong id=&quot;checkSharedAccess&quot;&gt;checkSharedAccess&lt;/strong&gt; (Expresi&amp;oacute;n e, Scope * sc);</target>
        </trans-unit>
        <trans-unit id="5936fd9852bf207bbd10f6ccaee777b9d2cd6fc4" translate="yes" xml:space="preserve">
          <source>bool &lt;strong id=&quot;checkSymbolAccess&quot;&gt;checkSymbolAccess&lt;/strong&gt;(Scope* sc, Dsymbol s);</source>
          <target state="translated">bool &lt;strong id=&quot;checkSymbolAccess&quot;&gt;checkSymbolAccess&lt;/strong&gt; (Scope * sc, Dsymbol s);</target>
        </trans-unit>
        <trans-unit id="27b6e0da87b84ac8593248245cc3d6ad4c57d77a" translate="yes" xml:space="preserve">
          <source>bool &lt;strong id=&quot;checkThrowEscape&quot;&gt;checkThrowEscape&lt;/strong&gt;(Scope* sc, Expression e, bool gag);</source>
          <target state="translated">bool &lt;strong id=&quot;checkThrowEscape&quot;&gt;checkThrowEscape&lt;/strong&gt; (Scope * sc, Expression e, bool gag);</target>
        </trans-unit>
        <trans-unit id="743ef892733a55e3fe81fcdf0d6930f3d99a361c" translate="yes" xml:space="preserve">
          <source>bool &lt;strong id=&quot;checkType&quot;&gt;checkType&lt;/strong&gt;();</source>
          <target state="translated">bool &lt;strong id=&quot;checkType&quot;&gt;checkType&lt;/strong&gt; ();</target>
        </trans-unit>
        <trans-unit id="d278806b3673839c02149f56c468c773002e8ef6" translate="yes" xml:space="preserve">
          <source>bool &lt;strong id=&quot;checkUnsafeAccess&quot;&gt;checkUnsafeAccess&lt;/strong&gt;(Scope* sc, Expression e, bool readonly, bool printmsg);</source>
          <target state="translated">bool &lt;strong id=&quot;checkUnsafeAccess&quot;&gt;checkUnsafeAccess&lt;/strong&gt; (Scope * sc, Expression e, bool readonly, bool printmsg);</target>
        </trans-unit>
        <trans-unit id="0e1e23939ed85a9a24c428f76d39440849f7c0a4" translate="yes" xml:space="preserve">
          <source>bool &lt;strong id=&quot;checkValue&quot;&gt;checkValue&lt;/strong&gt;();</source>
          <target state="translated">bool &lt;strong id=&quot;checkValue&quot;&gt;checkValue&lt;/strong&gt; ();</target>
        </trans-unit>
        <trans-unit id="737ac6ac47d7c0ebcf0e826e43437ce0c3b15c66" translate="yes" xml:space="preserve">
          <source>bool &lt;strong id=&quot;conditionalInsert&quot;&gt;conditionalInsert&lt;/strong&gt;(ElementType!Store value);</source>
          <target state="translated">bool &lt;strong id=&quot;conditionalInsert&quot;&gt;conditionalInsert&lt;/strong&gt; (ElementType! Valor de la tienda);</target>
        </trans-unit>
        <trans-unit id="f122a6258912446a149f58f5e19d8834a3636127" translate="yes" xml:space="preserve">
          <source>bool &lt;strong id=&quot;conditionalSwap&quot;&gt;conditionalSwap&lt;/strong&gt;(ref ElementType!Store value);</source>
          <target state="translated">bool &lt;strong id=&quot;conditionalSwap&quot;&gt;conditionalSwap&lt;/strong&gt; (ref ElementType! Valor de la tienda);</target>
        </trans-unit>
        <trans-unit id="045188693b1af1e10f9c57b0389efe6698a11df6" translate="yes" xml:space="preserve">
          <source>bool &lt;strong id=&quot;contains&quot;&gt;contains&lt;/strong&gt;(V)(V value)</source>
          <target state="translated">bool &lt;strong id=&quot;contains&quot;&gt;contiene&lt;/strong&gt; (V) (valor V)</target>
        </trans-unit>
        <trans-unit id="b101eb6069c7bad0590b63bbf5e5c82c550c3598" translate="yes" xml:space="preserve">
          <source>bool &lt;strong id=&quot;deallocate&quot;&gt;deallocate&lt;/strong&gt;(void[] b);</source>
          <target state="translated">bool &lt;strong id=&quot;deallocate&quot;&gt;deallocate&lt;/strong&gt; (nulo [] b);</target>
        </trans-unit>
        <trans-unit id="7bf439f19a83440bc4149fed2e012314abec8b95" translate="yes" xml:space="preserve">
          <source>bool &lt;strong id=&quot;deallocate&quot;&gt;deallocate&lt;/strong&gt;(void[] block);</source>
          <target state="translated">bool &lt;strong id=&quot;deallocate&quot;&gt;deallocate&lt;/strong&gt; (bloque nulo []);</target>
        </trans-unit>
        <trans-unit id="6d19acef3f4a50a1a6f7bbeb3233cbb95b9cc29e" translate="yes" xml:space="preserve">
          <source>bool &lt;strong id=&quot;deallocateAll&quot;&gt;deallocateAll&lt;/strong&gt;();</source>
          <target state="translated">bool &lt;strong id=&quot;deallocateAll&quot;&gt;deallocateAll&lt;/strong&gt; ();</target>
        </trans-unit>
        <trans-unit id="1a2c195658ff50137668eb6fd4f7a317c034cdc7" translate="yes" xml:space="preserve">
          <source>bool &lt;strong id=&quot;definitelyValueParameter&quot;&gt;definitelyValueParameter&lt;/strong&gt;(Expression e);</source>
          <target state="translated">bool &lt;strong id=&quot;definitelyValueParameter&quot;&gt;definitelyValueParameter&lt;/strong&gt; (Expresi&amp;oacute;n e);</target>
        </trans-unit>
        <trans-unit id="e1498c7e2880fd431061ce133b79011a8123db04" translate="yes" xml:space="preserve">
          <source>bool &lt;strong id=&quot;deprecated_&quot;&gt;deprecated_&lt;/strong&gt;;</source>
          <target state="translated">bool en &lt;strong id=&quot;deprecated_&quot;&gt;desuso_&lt;/strong&gt; ;</target>
        </trans-unit>
        <trans-unit id="38974f71542bc49b2581338dd5687bb54fc37582" translate="yes" xml:space="preserve">
          <source>bool &lt;strong id=&quot;discardValue&quot;&gt;discardValue&lt;/strong&gt;(Expression e);</source>
          <target state="translated">bool &lt;strong id=&quot;discardValue&quot;&gt;discardValue&lt;/strong&gt; (Expresi&amp;oacute;n e);</target>
        </trans-unit>
        <trans-unit id="1377d5bce19e41b467d923aa831e40ff605fd453" translate="yes" xml:space="preserve">
          <source>bool &lt;strong id=&quot;eh_none&quot;&gt;eh_none&lt;/strong&gt;;</source>
          <target state="translated">bool &lt;strong id=&quot;eh_none&quot;&gt;eh_none&lt;/strong&gt; ;</target>
        </trans-unit>
        <trans-unit id="49024172368022c85bfd8499d533732606785e5d" translate="yes" xml:space="preserve">
          <source>bool &lt;strong id=&quot;endsWith&quot;&gt;endsWith&lt;/strong&gt;(alias pred = &quot;a == b&quot;, R, E)(R doesThisEnd, E withThis)</source>
          <target state="translated">bool &lt;strong id=&quot;endsWith&quot;&gt;endsWith&lt;/strong&gt; (alias pred = &quot;a == b&quot;, R, E) (R doesThisEnd, E withThis)</target>
        </trans-unit>
        <trans-unit id="8f5544948815eb1897d81f2a15bb14fc8275069e" translate="yes" xml:space="preserve">
          <source>bool &lt;strong id=&quot;endsWith&quot;&gt;endsWith&lt;/strong&gt;(alias pred = &quot;a == b&quot;, R1, R2)(R1 doesThisEnd, R2 withThis)</source>
          <target state="translated">bool &lt;strong id=&quot;endsWith&quot;&gt;endsWith&lt;/strong&gt; (alias pred = &quot;a == b&quot;, R1, R2) (R1 doesThisEnd, R2 withThis)</target>
        </trans-unit>
        <trans-unit id="c40d991515d88b9497856a6bca6ee32b5f364d51" translate="yes" xml:space="preserve">
          <source>bool &lt;strong id=&quot;endsWith&quot;&gt;endsWith&lt;/strong&gt;(alias pred, R)(R doesThisEnd)</source>
          <target state="translated">bool &lt;strong id=&quot;endsWith&quot;&gt;endsWith&lt;/strong&gt; (alias pred, R) (R doesThisEnd)</target>
        </trans-unit>
        <trans-unit id="d3fc455f91be35e4aa851eb22b01f1ebb5db361e" translate="yes" xml:space="preserve">
          <source>bool &lt;strong id=&quot;ensureStaticLinkTo&quot;&gt;ensureStaticLinkTo&lt;/strong&gt;(Dsymbol s, Dsymbol p);</source>
          <target state="translated">bool &lt;strong id=&quot;ensureStaticLinkTo&quot;&gt;sureStaticLinkTo&lt;/strong&gt; (Dsymbol s, Dsymbol p);</target>
        </trans-unit>
        <trans-unit id="5f4f23900e1fbba03238b11f4a6ed4358a8231d2" translate="yes" xml:space="preserve">
          <source>bool &lt;strong id=&quot;equal&quot;&gt;equal&lt;/strong&gt;(Range1, Range2)(Range1 r1, Range2 r2)</source>
          <target state="translated">bool &lt;strong id=&quot;equal&quot;&gt;igual&lt;/strong&gt; (Rango1, Rango2) (Rango1 r1, Rango2 r2)</target>
        </trans-unit>
        <trans-unit id="4d1eb574bab648366d11429e8304ad0fd55fdbd1" translate="yes" xml:space="preserve">
          <source>bool &lt;strong id=&quot;evalStaticCondition&quot;&gt;evalStaticCondition&lt;/strong&gt;(Scope* sc, Expression original, Expression e, out bool errors, Expressions* negatives = null);</source>
          <target state="translated">bool &lt;strong id=&quot;evalStaticCondition&quot;&gt;evalStaticCondition&lt;/strong&gt; (Scope * sc, Expression original, Expression e, out bool errors, Expressions * negatives = null);</target>
        </trans-unit>
        <trans-unit id="737389b652823fae527344447bc44304a40c4167" translate="yes" xml:space="preserve">
          <source>bool &lt;strong id=&quot;evaluateConstraint&quot;&gt;evaluateConstraint&lt;/strong&gt;(TemplateInstance ti, Scope* sc, Scope* paramscope, Objects* dedargs, FuncDeclaration fd);</source>
          <target state="translated">bool &lt;strong id=&quot;evaluateConstraint&quot;&gt;evaluateConstraint&lt;/strong&gt; (ti TemplateInstance, Alcance * sc, * Alcance paramscope, objetos dedargs *, FuncDeclaration fd);</target>
        </trans-unit>
        <trans-unit id="1618096fc7273b34a1b36fc5ecf4ea42609bb886" translate="yes" xml:space="preserve">
          <source>bool &lt;strong id=&quot;exceptions&quot;&gt;exceptions&lt;/strong&gt;;</source>
          <target state="translated">&lt;strong id=&quot;exceptions&quot;&gt;excepciones&lt;/strong&gt; bool ;</target>
        </trans-unit>
        <trans-unit id="dd5e34d57c1b36d8d16597159f8e6204842ec154" translate="yes" xml:space="preserve">
          <source>bool &lt;strong id=&quot;exists&quot;&gt;exists&lt;/strong&gt;(R)(R name)</source>
          <target state="translated">bool &lt;strong id=&quot;exists&quot;&gt;existe&lt;/strong&gt; (R) (nombre R)</target>
        </trans-unit>
        <trans-unit id="5e966eb9ca02ce899214fb0a9c9bdef778b2a4b0" translate="yes" xml:space="preserve">
          <source>bool &lt;strong id=&quot;exists&quot;&gt;exists&lt;/strong&gt;(R)(auto ref R name)</source>
          <target state="translated">&lt;strong id=&quot;exists&quot;&gt;existe&lt;/strong&gt; bool (R) (nombre de referencia autom&amp;aacute;tico R)</target>
        </trans-unit>
        <trans-unit id="8c0a467cb6c1e24a4fe51677d95b8f38a3e53c42" translate="yes" xml:space="preserve">
          <source>bool &lt;strong id=&quot;expand&quot;&gt;expand&lt;/strong&gt;(ref void[] b, immutable size_t delta);</source>
          <target state="translated">bool &lt;strong id=&quot;expand&quot;&gt;expand&lt;/strong&gt; (ref void [] b, tama&amp;ntilde;o_t inmutable delta);</target>
        </trans-unit>
        <trans-unit id="793c5d97848c85598fff8826e13508e8e8c8c24f" translate="yes" xml:space="preserve">
          <source>bool &lt;strong id=&quot;expand&quot;&gt;expand&lt;/strong&gt;(ref void[] b, size_t bytes);</source>
          <target state="translated">bool &lt;strong id=&quot;expand&quot;&gt;expand&lt;/strong&gt; (ref void [] b, size_t bytes);</target>
        </trans-unit>
        <trans-unit id="86405f0840a7773c906d7f7e4a1d568724778c1e" translate="yes" xml:space="preserve">
          <source>bool &lt;strong id=&quot;expand&quot;&gt;expand&lt;/strong&gt;(ref void[] b, size_t delta);</source>
          <target state="translated">bool &lt;strong id=&quot;expand&quot;&gt;expand&lt;/strong&gt; (ref void [] b, size_t delta);</target>
        </trans-unit>
        <trans-unit id="e15e04d8860ba97077c683d163ad2bd006ee39dc" translate="yes" xml:space="preserve">
          <source>bool &lt;strong id=&quot;expand&quot;&gt;expand&lt;/strong&gt;(ref void[] b, size_t s);</source>
          <target state="translated">bool &lt;strong id=&quot;expand&quot;&gt;expand&lt;/strong&gt; (ref void [] b, size_t s);</target>
        </trans-unit>
        <trans-unit id="ea3a802d93a26238eb573a59612597334e205192" translate="yes" xml:space="preserve">
          <source>bool &lt;strong id=&quot;expandArray&quot;&gt;expandArray&lt;/strong&gt;(T)(T[] array, size_t delta, auto ref T init);</source>
          <target state="translated">bool &lt;strong id=&quot;expandArray&quot;&gt;expandArray&lt;/strong&gt; (T) (matriz T [], size_t delta, referencia autom&amp;aacute;tica T init);</target>
        </trans-unit>
        <trans-unit id="4e9feca0df1a7eedd67b225e639a34cbfb6b381e" translate="yes" xml:space="preserve">
          <source>bool &lt;strong id=&quot;expandArray&quot;&gt;expandArray&lt;/strong&gt;(T)(ref T[] array, size_t delta);</source>
          <target state="translated">bool &lt;strong id=&quot;expandArray&quot;&gt;expandArray&lt;/strong&gt; (T) (ref T [] array, size_t delta);</target>
        </trans-unit>
        <trans-unit id="5a4e700cc8aab70a60b557dc6f47e73ea695f17a" translate="yes" xml:space="preserve">
          <source>bool &lt;strong id=&quot;expandArray&quot;&gt;expandArray&lt;/strong&gt;(T, Allocator)(auto ref Allocator alloc, ref T[] array, size_t delta);</source>
          <target state="translated">bool &lt;strong id=&quot;expandArray&quot;&gt;expandArray&lt;/strong&gt; (T, Allocator) (asignaci&amp;oacute;n autom&amp;aacute;tica de asignaci&amp;oacute;n de referencia, matriz de referencia T [], tama&amp;ntilde;o_t delta);</target>
        </trans-unit>
        <trans-unit id="2c638d0fa8cb07871b524864c00bf6fd36ae785e" translate="yes" xml:space="preserve">
          <source>bool &lt;strong id=&quot;expandArray&quot;&gt;expandArray&lt;/strong&gt;(T, Allocator)(auto ref Allocator alloc, ref T[] array, size_t delta, auto ref T init);</source>
          <target state="translated">bool &lt;strong id=&quot;expandArray&quot;&gt;expandArray&lt;/strong&gt; (T, Allocator) (asignaci&amp;oacute;n de asignaci&amp;oacute;n de referencia autom&amp;aacute;tica, matriz de referencia T [], tama&amp;ntilde;o_t delta, inicio autom&amp;aacute;tico de referencia T);</target>
        </trans-unit>
        <trans-unit id="12ee52a7eca63c93f419dd2093965c8e1fd2d546" translate="yes" xml:space="preserve">
          <source>bool &lt;strong id=&quot;expandArray&quot;&gt;expandArray&lt;/strong&gt;(T, Allocator, R)(auto ref Allocator alloc, ref T[] array, R range)</source>
          <target state="translated">bool &lt;strong id=&quot;expandArray&quot;&gt;expandArray&lt;/strong&gt; (T, Allocator, R) (asignaci&amp;oacute;n autom&amp;aacute;tica del asignador de referencia, matriz de referencia T [], rango R)</target>
        </trans-unit>
        <trans-unit id="552b50528875e2c923509310e810594fe03563fd" translate="yes" xml:space="preserve">
          <source>bool &lt;strong id=&quot;expandArray&quot;&gt;expandArray&lt;/strong&gt;(T, R)(ref T[] array, R range)</source>
          <target state="translated">bool &lt;strong id=&quot;expandArray&quot;&gt;expandArray&lt;/strong&gt; (T, R) (ref T [] array, rango R)</target>
        </trans-unit>
        <trans-unit id="b90d97c9673d72159f3baa56d03ee28741543065" translate="yes" xml:space="preserve">
          <source>bool &lt;strong id=&quot;expressionsToString&quot;&gt;expressionsToString&lt;/strong&gt;(ref OutBuffer buf, Scope* sc, Expressions* exps);</source>
          <target state="translated">bool &lt;strong id=&quot;expressionsToString&quot;&gt;expressionsToString&lt;/strong&gt; (ref OutBuffer buf, Scope * sc, Expressions * exps);</target>
        </trans-unit>
        <trans-unit id="a4e57027db5d9c8ce56cedd892baccc5c3c794f9" translate="yes" xml:space="preserve">
          <source>bool &lt;strong id=&quot;fillVtbl&quot;&gt;fillVtbl&lt;/strong&gt;(ClassDeclaration cd, FuncDeclarations* vtbl, int newinstance);</source>
          <target state="translated">bool &lt;strong id=&quot;fillVtbl&quot;&gt;fillVtbl&lt;/strong&gt; (ClassDeclaration cd, FuncDeclarations * vtbl, int newinstance);</target>
        </trans-unit>
        <trans-unit id="de3d93c138da5f32116b80184c244a9dc3a58a4c" translate="yes" xml:space="preserve">
          <source>bool &lt;strong id=&quot;findCondition&quot;&gt;findCondition&lt;/strong&gt;(Identifiers* ids, Identifier ident);</source>
          <target state="translated">bool &lt;strong id=&quot;findCondition&quot;&gt;findCondition&lt;/strong&gt; (identificadores * identificadores, identificador identificador);</target>
        </trans-unit>
        <trans-unit id="8c9e83533aa928b9f4d7fbd9a4a2c67e5e2d2491" translate="yes" xml:space="preserve">
          <source>bool &lt;strong id=&quot;findSkip&quot;&gt;findSkip&lt;/strong&gt;(alias pred = &quot;a == b&quot;, R1, R2)(ref R1 haystack, R2 needle)</source>
          <target state="translated">bool &lt;strong id=&quot;findSkip&quot;&gt;findSkip&lt;/strong&gt; (alias pred = &quot;a == b&quot;, R1, R2) (ref. Pajar R1, aguja R2)</target>
        </trans-unit>
        <trans-unit id="8942dc2ec67925baa31b0e287f1e044012987ecd" translate="yes" xml:space="preserve">
          <source>bool &lt;strong id=&quot;flDash&quot;&gt;flDash&lt;/strong&gt;;</source>
          <target state="translated">bool &lt;strong id=&quot;flDash&quot;&gt;flDash&lt;/strong&gt; ;</target>
        </trans-unit>
        <trans-unit id="b3d52ac1293b6fc67b06858fd28aaa044b5b5e8b" translate="yes" xml:space="preserve">
          <source>bool &lt;strong id=&quot;flHash&quot;&gt;flHash&lt;/strong&gt;;</source>
          <target state="translated">bool &lt;strong id=&quot;flHash&quot;&gt;flHash&lt;/strong&gt; ;</target>
        </trans-unit>
        <trans-unit id="52785f2ccc5579faa8db161125a0ee6323e44f94" translate="yes" xml:space="preserve">
          <source>bool &lt;strong id=&quot;flPlus&quot;&gt;flPlus&lt;/strong&gt;;</source>
          <target state="translated">bool &lt;strong id=&quot;flPlus&quot;&gt;flPlus&lt;/strong&gt; ;</target>
        </trans-unit>
        <trans-unit id="41190f01e27d8864c0a7ccc5b84eab9124bb307b" translate="yes" xml:space="preserve">
          <source>bool &lt;strong id=&quot;flSeparator&quot;&gt;flSeparator&lt;/strong&gt;;</source>
          <target state="translated">bool &lt;strong id=&quot;flSeparator&quot;&gt;flSeparator&lt;/strong&gt; ;</target>
        </trans-unit>
        <trans-unit id="be4db4afe5c2777514d05972c268f159324a24ba" translate="yes" xml:space="preserve">
          <source>bool &lt;strong id=&quot;flSpace&quot;&gt;flSpace&lt;/strong&gt;;</source>
          <target state="translated">bool &lt;strong id=&quot;flSpace&quot;&gt;flSpace&lt;/strong&gt; ;</target>
        </trans-unit>
        <trans-unit id="bc177ebc2572617d904e17681c85229403037235" translate="yes" xml:space="preserve">
          <source>bool &lt;strong id=&quot;flZero&quot;&gt;flZero&lt;/strong&gt;;</source>
          <target state="translated">bool &lt;strong id=&quot;flZero&quot;&gt;flZero&lt;/strong&gt; ;</target>
        </trans-unit>
        <trans-unit id="96190359c06a93188bd28ea9eaa3f801275b90d1" translate="yes" xml:space="preserve">
          <source>bool &lt;strong id=&quot;followInstantiationContext&quot;&gt;followInstantiationContext&lt;/strong&gt;(D...)(Dsymbol s, D p);</source>
          <target state="translated">bool &lt;strong id=&quot;followInstantiationContext&quot;&gt;followInstantiationContext&lt;/strong&gt; (D ...) (Dsymbol s, D p);</target>
        </trans-unit>
        <trans-unit id="057fb44dd6ec48b30172d333e6df6068b725b304" translate="yes" xml:space="preserve">
          <source>bool &lt;strong id=&quot;fundamentalType&quot;&gt;fundamentalType&lt;/strong&gt;(const Type t, ref bool isFundamental);</source>
          <target state="translated">bool &lt;strong id=&quot;fundamentalType&quot;&gt;fundamentalType&lt;/strong&gt; (const Type t, ref bool isFundamental);</target>
        </trans-unit>
        <trans-unit id="9a91bf5a039d9b12936368e3e38b0ebda35b2e2c" translate="yes" xml:space="preserve">
          <source>bool &lt;strong id=&quot;generated&quot;&gt;generated&lt;/strong&gt;;</source>
          <target state="translated">bool &lt;strong id=&quot;generated&quot;&gt;generado&lt;/strong&gt; ;</target>
        </trans-unit>
        <trans-unit id="be0c7bb6a68f254740227eea3a0b729a76d41252" translate="yes" xml:space="preserve">
          <source>bool &lt;strong id=&quot;hasLazyParameters&quot;&gt;hasLazyParameters&lt;/strong&gt;();</source>
          <target state="translated">bool &lt;strong id=&quot;hasLazyParameters&quot;&gt;hasLazyParameters&lt;/strong&gt; ();</target>
        </trans-unit>
        <trans-unit id="b5f9014884764752933756a4587a3b824883d459" translate="yes" xml:space="preserve">
          <source>bool &lt;strong id=&quot;hasPointers&quot;&gt;hasPointers&lt;/strong&gt;();</source>
          <target state="translated">bool &lt;strong id=&quot;hasPointers&quot;&gt;hasPointers&lt;/strong&gt; ();</target>
        </trans-unit>
        <trans-unit id="01bf91b06957d8063dd0d07cfea36868a1bb207e" translate="yes" xml:space="preserve">
          <source>bool &lt;strong id=&quot;hasSideEffect&quot;&gt;hasSideEffect&lt;/strong&gt;(Expression e);</source>
          <target state="translated">bool &lt;strong id=&quot;hasSideEffect&quot;&gt;hasSideEffect&lt;/strong&gt; (Expresi&amp;oacute;n e);</target>
        </trans-unit>
        <trans-unit id="477c6806d18c2571de0116c627e6093abdb0acfa" translate="yes" xml:space="preserve">
          <source>bool &lt;strong id=&quot;hasStaticCtorOrDtor&quot;&gt;hasStaticCtorOrDtor&lt;/strong&gt;();</source>
          <target state="translated">bool &lt;strong id=&quot;hasStaticCtorOrDtor&quot;&gt;hasStaticCtorOrDtor&lt;/strong&gt; ();</target>
        </trans-unit>
        <trans-unit id="9f4737bcca25f4d7627d0f605d930bfa1c58dfcc" translate="yes" xml:space="preserve">
          <source>bool &lt;strong id=&quot;hasVoidInitPointers&quot;&gt;hasVoidInitPointers&lt;/strong&gt;();</source>
          <target state="translated">bool &lt;strong id=&quot;hasVoidInitPointers&quot;&gt;hasVoidInitPointers&lt;/strong&gt; ();</target>
        </trans-unit>
        <trans-unit id="94cfca2e057553dc4846eb80d09851cfe5a0121d" translate="yes" xml:space="preserve">
          <source>bool &lt;strong id=&quot;helpWanted&quot;&gt;helpWanted&lt;/strong&gt;;</source>
          <target state="translated">bool &lt;strong id=&quot;helpWanted&quot;&gt;helpWanted&lt;/strong&gt; ;</target>
        </trans-unit>
        <trans-unit id="f94be8c63cb08bf9d68181fbad23078e00f83963" translate="yes" xml:space="preserve">
          <source>bool &lt;strong id=&quot;hookOpEquals&quot;&gt;hookOpEquals&lt;/strong&gt;(L, R)(L lhs, R rhs);</source>
          <target state="translated">bool &lt;strong id=&quot;hookOpEquals&quot;&gt;hookOpEquals&lt;/strong&gt; (L, R) (L lhs, R rhs);</target>
        </trans-unit>
        <trans-unit id="9808f44fb83ecfda02133d4f22fb281819f81be6" translate="yes" xml:space="preserve">
          <source>bool &lt;strong id=&quot;hookOpEquals&quot;&gt;hookOpEquals&lt;/strong&gt;(Lhs, Rhs)(Lhs lhs, Rhs rhs);</source>
          <target state="translated">bool &lt;strong id=&quot;hookOpEquals&quot;&gt;hookOpEquals&lt;/strong&gt; (Lhs, Rhs) (Lhs lhs, Rhs rhs);</target>
        </trans-unit>
        <trans-unit id="3fbd301f0996bf334911d20df38f2bd5dce803f5" translate="yes" xml:space="preserve">
          <source>bool &lt;strong id=&quot;inferApplyArgTypes&quot;&gt;inferApplyArgTypes&lt;/strong&gt;(ForeachStatement fes, Scope* sc, ref Dsymbol sapply);</source>
          <target state="translated">bool &lt;strong id=&quot;inferApplyArgTypes&quot;&gt;inferApplyArgTypes&lt;/strong&gt; (ForeachStatement fes, Scope * sc, ref Dsymbol sapply);</target>
        </trans-unit>
        <trans-unit id="759e1eeab7326afed781b4bd6f96fd6a7a943fc1" translate="yes" xml:space="preserve">
          <source>bool &lt;strong id=&quot;inferForeachAggregate&quot;&gt;inferForeachAggregate&lt;/strong&gt;(Scope* sc, bool isForeach, ref Expression feaggr, out Dsymbol sapply);</source>
          <target state="translated">bool &lt;strong id=&quot;inferForeachAggregate&quot;&gt;inferForeachAggregate&lt;/strong&gt; (Scope * sc, bool isForeach, ref Expression feaggr, out Dsymbol sapply);</target>
        </trans-unit>
        <trans-unit id="8a8e790adf471fa51d4d3711a577f073f3e984e3" translate="yes" xml:space="preserve">
          <source>bool &lt;strong id=&quot;inferRetType&quot;&gt;inferRetType&lt;/strong&gt;;</source>
          <target state="translated">bool &lt;strong id=&quot;inferRetType&quot;&gt;inferRetType&lt;/strong&gt; ;</target>
        </trans-unit>
        <trans-unit id="07144a4e07ceff02fd56e95fd1073298505f254d" translate="yes" xml:space="preserve">
          <source>bool &lt;strong id=&quot;introducing&quot;&gt;introducing&lt;/strong&gt;;</source>
          <target state="translated">&lt;strong id=&quot;introducing&quot;&gt;introducci&amp;oacute;n de&lt;/strong&gt; bool ;</target>
        </trans-unit>
        <trans-unit id="4cdad262b4452916ffcb0182901d064724643a5f" translate="yes" xml:space="preserve">
          <source>bool &lt;strong id=&quot;isArrayOp&quot;&gt;isArrayOp&lt;/strong&gt;;</source>
          <target state="translated">bool &lt;strong id=&quot;isArrayOp&quot;&gt;isArrayOp&lt;/strong&gt; ;</target>
        </trans-unit>
        <trans-unit id="319845b2f936ac9b52b5309c603d21b82fa1514d" translate="yes" xml:space="preserve">
          <source>bool &lt;strong id=&quot;isArrayOpOperand&quot;&gt;isArrayOpOperand&lt;/strong&gt;(Expression e);</source>
          <target state="translated">bool &lt;strong id=&quot;isArrayOpOperand&quot;&gt;isArrayOpOperand&lt;/strong&gt; (Expresi&amp;oacute;n e);</target>
        </trans-unit>
        <trans-unit id="a273d7f876eeb18876f83ff993741532dfa6dc74" translate="yes" xml:space="preserve">
          <source>bool &lt;strong id=&quot;isArrayOpValid&quot;&gt;isArrayOpValid&lt;/strong&gt;(Expression e);</source>
          <target state="translated">bool &lt;strong id=&quot;isArrayOpValid&quot;&gt;isArrayOpValid&lt;/strong&gt; (Expresi&amp;oacute;n e);</target>
        </trans-unit>
        <trans-unit id="e19945ca286f7487b2fb851d9fadca6ecfff525e" translate="yes" xml:space="preserve">
          <source>bool &lt;strong id=&quot;isAssignable&quot;&gt;isAssignable&lt;/strong&gt;();</source>
          <target state="translated">bool &lt;strong id=&quot;isAssignable&quot;&gt;isAssignable&lt;/strong&gt; ();</target>
        </trans-unit>
        <trans-unit id="285d7a33bac14ecba0a3ab5e1795444518b4e7e0" translate="yes" xml:space="preserve">
          <source>bool &lt;strong id=&quot;isBaseOf&quot;&gt;isBaseOf&lt;/strong&gt;(ClassDeclaration cd, int* poffset);</source>
          <target state="translated">bool &lt;strong id=&quot;isBaseOf&quot;&gt;isBaseOf&lt;/strong&gt; (ClassDeclaration cd, int * poffset);</target>
        </trans-unit>
        <trans-unit id="890df5aeea19f00f8c4b7c14724046ea9ed782dc" translate="yes" xml:space="preserve">
          <source>bool &lt;strong id=&quot;isBinArrayOp&quot;&gt;isBinArrayOp&lt;/strong&gt;(TOK op);</source>
          <target state="translated">bool &lt;strong id=&quot;isBinArrayOp&quot;&gt;isBinArrayOp&lt;/strong&gt; (TOK op);</target>
        </trans-unit>
        <trans-unit id="faa611cafe15d4f562b71860fca1e217ee0b8a61" translate="yes" xml:space="preserve">
          <source>bool &lt;strong id=&quot;isBinAssignArrayOp&quot;&gt;isBinAssignArrayOp&lt;/strong&gt;(TOK op);</source>
          <target state="translated">bool &lt;strong id=&quot;isBinAssignArrayOp&quot;&gt;isBinAssignArrayOp&lt;/strong&gt; (TOK op);</target>
        </trans-unit>
        <trans-unit id="42c593f872fb4653ab192a560b8f3448043f692f" translate="yes" xml:space="preserve">
          <source>bool &lt;strong id=&quot;isBool&quot;&gt;isBool&lt;/strong&gt;(bool result);</source>
          <target state="translated">bool &lt;strong id=&quot;isBool&quot;&gt;isBool&lt;/strong&gt; (resultado de bool);</target>
        </trans-unit>
        <trans-unit id="6bc89be674f1bb7c9546b86d95110e0de14be9c4" translate="yes" xml:space="preserve">
          <source>bool &lt;strong id=&quot;isBoolean&quot;&gt;isBoolean&lt;/strong&gt;();</source>
          <target state="translated">bool &lt;strong id=&quot;isBoolean&quot;&gt;isBoolean&lt;/strong&gt; ();</target>
        </trans-unit>
        <trans-unit id="f95a64ef114819a5793e49d4f405f3b13d6d25eb" translate="yes" xml:space="preserve">
          <source>bool &lt;strong id=&quot;isCommutative&quot;&gt;isCommutative&lt;/strong&gt;(TOK op);</source>
          <target state="translated">bool es &lt;strong id=&quot;isCommutative&quot;&gt;conmutativo&lt;/strong&gt; (TOK op);</target>
        </trans-unit>
        <trans-unit id="acfb425e38a340e3571e9d7fb2b89397fd60882a" translate="yes" xml:space="preserve">
          <source>bool &lt;strong id=&quot;isCtfeComparable&quot;&gt;isCtfeComparable&lt;/strong&gt;(Expression e);</source>
          <target state="translated">bool &lt;strong id=&quot;isCtfeComparable&quot;&gt;isCtfeComparable&lt;/strong&gt; (Expresi&amp;oacute;n e);</target>
        </trans-unit>
        <trans-unit id="5ef34d902ade074f5d8aa1e3a5900ddc43b1ebdd" translate="yes" xml:space="preserve">
          <source>bool &lt;strong id=&quot;isCtfeValueValid&quot;&gt;isCtfeValueValid&lt;/strong&gt;(Expression newval);</source>
          <target state="translated">bool &lt;strong id=&quot;isCtfeValueValid&quot;&gt;isCtfeValueValid&lt;/strong&gt; (Expresi&amp;oacute;n newval);</target>
        </trans-unit>
        <trans-unit id="57a3fabc70973fb61482ac1b8b91258f15e3fa4d" translate="yes" xml:space="preserve">
          <source>bool &lt;strong id=&quot;isCurrentTargetOS&quot;&gt;isCurrentTargetOS&lt;/strong&gt;(TargetOS os);</source>
          <target state="translated">bool &lt;strong id=&quot;isCurrentTargetOS&quot;&gt;isCurrentTargetOS&lt;/strong&gt; (TargetOS os);</target>
        </trans-unit>
        <trans-unit id="049293163c4209127fc0a583da733be2f67e977e" translate="yes" xml:space="preserve">
          <source>bool &lt;strong id=&quot;isDeprecated_&quot;&gt;isDeprecated_&lt;/strong&gt;;</source>
          <target state="translated">bool &lt;strong id=&quot;isDeprecated_&quot;&gt;isDeprecated_&lt;/strong&gt; ;</target>
        </trans-unit>
        <trans-unit id="2273f1ce47d0e10eb12a924707204c17708e7759" translate="yes" xml:space="preserve">
          <source>bool &lt;strong id=&quot;isDotOpDispatch&quot;&gt;isDotOpDispatch&lt;/strong&gt;(Expression e);</source>
          <target state="translated">bool &lt;strong id=&quot;isDotOpDispatch&quot;&gt;isDotOpDispatch&lt;/strong&gt; (Expresi&amp;oacute;n e);</target>
        </trans-unit>
        <trans-unit id="a6d9c17678084dfbe6cdf5e9fcf67fd1766e1bcc" translate="yes" xml:space="preserve">
          <source>bool &lt;strong id=&quot;isExtern&quot;&gt;isExtern&lt;/strong&gt;;</source>
          <target state="translated">bool &lt;strong id=&quot;isExtern&quot;&gt;isExtern&lt;/strong&gt; ;</target>
        </trans-unit>
        <trans-unit id="ec80a2ca4d12fd5d20316d1a982e6625f247819e" translate="yes" xml:space="preserve">
          <source>bool &lt;strong id=&quot;isFinal&quot;&gt;isFinal&lt;/strong&gt;;</source>
          <target state="translated">bool &lt;strong id=&quot;isFinal&quot;&gt;isFinal&lt;/strong&gt; ;</target>
        </trans-unit>
        <trans-unit id="8352975a35b5301ed4feee47e154d9f69759c8d3" translate="yes" xml:space="preserve">
          <source>bool &lt;strong id=&quot;isIdStart&quot;&gt;isIdStart&lt;/strong&gt;(const(char)* p);</source>
          <target state="translated">bool &lt;strong id=&quot;isIdStart&quot;&gt;isIdStart&lt;/strong&gt; (const (char) * p);</target>
        </trans-unit>
        <trans-unit id="6565497bd65a55b76705295be33f845f87ed3008" translate="yes" xml:space="preserve">
          <source>bool &lt;strong id=&quot;isIdTail&quot;&gt;isIdTail&lt;/strong&gt;(const(char)* p);</source>
          <target state="translated">bool &lt;strong id=&quot;isIdTail&quot;&gt;isIdTail&lt;/strong&gt; (const (char) * p);</target>
        </trans-unit>
        <trans-unit id="9f92331bea1b330a393589a489aacd3b50657d6d" translate="yes" xml:space="preserve">
          <source>bool &lt;strong id=&quot;isIndexableNonAggregate&quot;&gt;isIndexableNonAggregate&lt;/strong&gt;(Type t);</source>
          <target state="translated">bool &lt;strong id=&quot;isIndexableNonAggregate&quot;&gt;isIndexableNonAggregate&lt;/strong&gt; (Tipo t);</target>
        </trans-unit>
        <trans-unit id="a08af10fa47beb33cc06fdb2fb17ae73c8fb2783" translate="yes" xml:space="preserve">
          <source>bool &lt;strong id=&quot;isLvalue&quot;&gt;isLvalue&lt;/strong&gt;();</source>
          <target state="translated">bool &lt;strong id=&quot;isLvalue&quot;&gt;isLvalue&lt;/strong&gt; ();</target>
        </trans-unit>
        <trans-unit id="3fc950c703517cf75854219f786319aa32a3f67a" translate="yes" xml:space="preserve">
          <source>bool &lt;strong id=&quot;isMeta&quot;&gt;isMeta&lt;/strong&gt;;</source>
          <target state="translated">bool &lt;strong id=&quot;isMeta&quot;&gt;isMeta&lt;/strong&gt; ;</target>
        </trans-unit>
        <trans-unit id="8687177e998d524fdf1d6275b52df058d56cbd9e" translate="yes" xml:space="preserve">
          <source>bool &lt;strong id=&quot;isNaN&quot;&gt;isNaN&lt;/strong&gt;(T)(const Checked!(T, WithNaN) x);</source>
          <target state="translated">bool &lt;strong id=&quot;isNaN&quot;&gt;isNaN&lt;/strong&gt; (T) (const Checked! (T, WithNaN) x);</target>
        </trans-unit>
        <trans-unit id="e8d881127d8618d35c7365050e70e5fec3e899a8" translate="yes" xml:space="preserve">
          <source>bool &lt;strong id=&quot;isNeedThisScope&quot;&gt;isNeedThisScope&lt;/strong&gt;(Scope* sc, Declaration d);</source>
          <target state="translated">bool &lt;strong id=&quot;isNeedThisScope&quot;&gt;isNeedThisScope&lt;/strong&gt; (Scope * sc, Declaraci&amp;oacute;n d);</target>
        </trans-unit>
        <trans-unit id="b146d14b915d399a341a1c9a65e6e4f1a825b9a3" translate="yes" xml:space="preserve">
          <source>bool &lt;strong id=&quot;isNothrow&quot;&gt;isNothrow&lt;/strong&gt;();</source>
          <target state="translated">bool &lt;strong id=&quot;isNothrow&quot;&gt;isNothrow&lt;/strong&gt; ();</target>
        </trans-unit>
        <trans-unit id="72d11ef6c664fb55edfdbab506e30752a53ce965" translate="yes" xml:space="preserve">
          <source>bool &lt;strong id=&quot;isNumeric&quot;&gt;isNumeric&lt;/strong&gt;(S)(S s, bool bAllowSep = false)</source>
          <target state="translated">bool &lt;strong id=&quot;isNumeric&quot;&gt;isNumeric&lt;/strong&gt; (S) (S s, bool bAllowSep = false)</target>
        </trans-unit>
        <trans-unit id="e0dec1e15f6117bd5047c079cbeeea08ffaa2c26" translate="yes" xml:space="preserve">
          <source>bool &lt;strong id=&quot;isPartitioned&quot;&gt;isPartitioned&lt;/strong&gt;(alias pred, Range)(Range r)</source>
          <target state="translated">bool &lt;strong id=&quot;isPartitioned&quot;&gt;isPartitioned&lt;/strong&gt; (alias pred, Range) (Range r)</target>
        </trans-unit>
        <trans-unit id="1735d9ad56524d1ffa04c43915674c25896534ba" translate="yes" xml:space="preserve">
          <source>bool &lt;strong id=&quot;isPermutation&quot;&gt;isPermutation&lt;/strong&gt;(AllocateGC allocate_gc, Range1, Range2)(Range1 r1, Range2 r2)</source>
          <target state="translated">bool &lt;strong id=&quot;isPermutation&quot;&gt;isPermutation&lt;/strong&gt; (AllocateGC allocate_gc, Range1, Range2) (Range1 r1, Range2 r2)</target>
        </trans-unit>
        <trans-unit id="7d246bc2aad5a38aa93ec953ea864c2238c5a1d2" translate="yes" xml:space="preserve">
          <source>bool &lt;strong id=&quot;isPermutation&quot;&gt;isPermutation&lt;/strong&gt;(alias pred = &quot;a == b&quot;, Range1, Range2)(Range1 r1, Range2 r2)</source>
          <target state="translated">bool &lt;strong id=&quot;isPermutation&quot;&gt;isPermutation&lt;/strong&gt; (alias pred = &quot;a == b&quot;, Range1, Range2) (Range1 r1, Range2 r2)</target>
        </trans-unit>
        <trans-unit id="57c11286a42dd00ed10ef5b3bcbcfce371613863" translate="yes" xml:space="preserve">
          <source>bool &lt;strong id=&quot;isPointer&quot;&gt;isPointer&lt;/strong&gt;(Type t);</source>
          <target state="translated">bool &lt;strong id=&quot;isPointer&quot;&gt;isPointer&lt;/strong&gt; (Tipo t);</target>
        </trans-unit>
        <trans-unit id="7c4930ca172c9646b2029503443d8958235a3af2" translate="yes" xml:space="preserve">
          <source>bool &lt;strong id=&quot;isPrimaryDtor&quot;&gt;isPrimaryDtor&lt;/strong&gt;(const Dsymbol sym);</source>
          <target state="translated">bool &lt;strong id=&quot;isPrimaryDtor&quot;&gt;isPrimaryDtor&lt;/strong&gt; (const Dsymbol sym);</target>
        </trans-unit>
        <trans-unit id="64fba05b2bdfb9c8c0eeee2504648d80842ac130" translate="yes" xml:space="preserve">
          <source>bool &lt;strong id=&quot;isReturnOnStack&quot;&gt;isReturnOnStack&lt;/strong&gt;(TypeFunction tf, bool needsThis);</source>
          <target state="translated">bool &lt;strong id=&quot;isReturnOnStack&quot;&gt;isReturnOnStack&lt;/strong&gt; (TypeFunction tf, bool needsThis);</target>
        </trans-unit>
        <trans-unit id="3a2167ac402e5b076617f13818246b87c0dc0f22" translate="yes" xml:space="preserve">
          <source>bool &lt;strong id=&quot;isRooted&quot;&gt;isRooted&lt;/strong&gt;(R)(R path)</source>
          <target state="translated">bool &lt;strong id=&quot;isRooted&quot;&gt;isRooted&lt;/strong&gt; (R) (ruta R)</target>
        </trans-unit>
        <trans-unit id="d0f82a1e0ab7db2981a58ac5cdbadf0455cd81ac" translate="yes" xml:space="preserve">
          <source>bool &lt;strong id=&quot;isSafeCast&quot;&gt;isSafeCast&lt;/strong&gt;(Expression e, Type tfrom, Type tto);</source>
          <target state="translated">bool &lt;strong id=&quot;isSafeCast&quot;&gt;isSafeCast&lt;/strong&gt; (Expresi&amp;oacute;n e, Tipo tfrom, Tipo tto);</target>
        </trans-unit>
        <trans-unit id="8cfb43df003121e99b709bec3883ff084f102eb4" translate="yes" xml:space="preserve">
          <source>bool &lt;strong id=&quot;isSameFuncLiteral&quot;&gt;isSameFuncLiteral&lt;/strong&gt;(FuncLiteralDeclaration l1, FuncLiteralDeclaration l2, Scope* sc);</source>
          <target state="translated">bool &lt;strong id=&quot;isSameFuncLiteral&quot;&gt;isSameFuncLiteral&lt;/strong&gt; (FuncLiteralDeclaration l1, FuncLiteralDeclaration l2, Scope * sc);</target>
        </trans-unit>
        <trans-unit id="a46574053cf8d0a7e8131c12851d870f5f16232c" translate="yes" xml:space="preserve">
          <source>bool &lt;strong id=&quot;isSameLength&quot;&gt;isSameLength&lt;/strong&gt;(Range1, Range2)(Range1 r1, Range2 r2)</source>
          <target state="translated">bool &lt;strong id=&quot;isSameLength&quot;&gt;isSameLength&lt;/strong&gt; (Rango1, Rango2) (Rango1 r1, Rango2 r2)</target>
        </trans-unit>
        <trans-unit id="ae90dd5b47be04607172e7b103962f6aaa33166b" translate="yes" xml:space="preserve">
          <source>bool &lt;strong id=&quot;isSorted&quot;&gt;isSorted&lt;/strong&gt;(alias less = &quot;a &amp;lt; b&quot;, Range)(Range r)</source>
          <target state="translated">bool &lt;strong id=&quot;isSorted&quot;&gt;isSorted&lt;/strong&gt; (alias less = &quot;a &amp;lt;b&quot;, Range) (Range r)</target>
        </trans-unit>
        <trans-unit id="ef613c5f8c389f8b0d52f651aa061aad573fb988" translate="yes" xml:space="preserve">
          <source>bool &lt;strong id=&quot;isSpeculativeType&quot;&gt;isSpeculativeType&lt;/strong&gt;(Type t);</source>
          <target state="translated">bool &lt;strong id=&quot;isSpeculativeType&quot;&gt;isSpeculativeType&lt;/strong&gt; (Tipo t);</target>
        </trans-unit>
        <trans-unit id="74d6b0c8c69ed465bbf66d54f96f3f4921d38d94" translate="yes" xml:space="preserve">
          <source>bool &lt;strong id=&quot;isStrictlyMonotonic&quot;&gt;isStrictlyMonotonic&lt;/strong&gt;(alias less = &quot;a &amp;lt; b&quot;, Range)(Range r)</source>
          <target state="translated">bool &lt;strong id=&quot;isStrictlyMonotonic&quot;&gt;isStrictlyMonotonic&lt;/strong&gt; (alias less = &quot;a &amp;lt;b&quot;, Range) (Rango r)</target>
        </trans-unit>
        <trans-unit id="95378d2ae040d3056588fd34246b1073a18a3fa0" translate="yes" xml:space="preserve">
          <source>bool &lt;strong id=&quot;isThis2&quot;&gt;isThis2&lt;/strong&gt;;</source>
          <target state="translated">bool &lt;strong id=&quot;isThis2&quot;&gt;isThis2&lt;/strong&gt; ;</target>
        </trans-unit>
        <trans-unit id="2eb42ba55911858ac1acd862aac6c02c1fa6e527" translate="yes" xml:space="preserve">
          <source>bool &lt;strong id=&quot;isTrivialExp&quot;&gt;isTrivialExp&lt;/strong&gt;(Expression e);</source>
          <target state="translated">bool &lt;strong id=&quot;isTrivialExp&quot;&gt;isTrivialExp&lt;/strong&gt; (Expresi&amp;oacute;n e);</target>
        </trans-unit>
        <trans-unit id="65fa1f9c10c8fcf0435f8f64e98b8c10ab6c6801" translate="yes" xml:space="preserve">
          <source>bool &lt;strong id=&quot;isTypeInfo_Class&quot;&gt;isTypeInfo_Class&lt;/strong&gt;(const Type type);</source>
          <target state="translated">bool &lt;strong id=&quot;isTypeInfo_Class&quot;&gt;isTypeInfo_Class&lt;/strong&gt; (tipo de tipo const);</target>
        </trans-unit>
        <trans-unit id="7e458f1c662e3527296844395709afb5800544de" translate="yes" xml:space="preserve">
          <source>bool &lt;strong id=&quot;isUnaArrayOp&quot;&gt;isUnaArrayOp&lt;/strong&gt;(TOK op);</source>
          <target state="translated">bool &lt;strong id=&quot;isUnaArrayOp&quot;&gt;isUnaArrayOp&lt;/strong&gt; (TOK op);</target>
        </trans-unit>
        <trans-unit id="e778ce11793643148304065ec479d3373b26149b" translate="yes" xml:space="preserve">
          <source>bool &lt;strong id=&quot;isValid&quot;&gt;isValid&lt;/strong&gt;(E)(const(E)[] s);</source>
          <target state="translated">bool &lt;strong id=&quot;isValid&quot;&gt;isValid&lt;/strong&gt; (E) (const (E) [] s);</target>
        </trans-unit>
        <trans-unit id="3bdbe49a27a6cb5e89373b625cd9972d65c37553" translate="yes" xml:space="preserve">
          <source>bool &lt;strong id=&quot;isValid&quot;&gt;isValid&lt;/strong&gt;(const(ubyte)[] s);</source>
          <target state="translated">bool &lt;strong id=&quot;isValid&quot;&gt;isValid&lt;/strong&gt; (const (ubyte) [] s);</target>
        </trans-unit>
        <trans-unit id="ff1fcfadfba342304ec580efdc4dc6dc87ebea88" translate="yes" xml:space="preserve">
          <source>bool &lt;strong id=&quot;isValidCodeUnit&quot;&gt;isValidCodeUnit&lt;/strong&gt;(E)(E c);</source>
          <target state="translated">bool &lt;strong id=&quot;isValidCodeUnit&quot;&gt;isValidCodeUnit&lt;/strong&gt; (E) (E c);</target>
        </trans-unit>
        <trans-unit id="4c8f341ea35d5c89dad9f2d695a2410b8ec21b40" translate="yes" xml:space="preserve">
          <source>bool &lt;strong id=&quot;isValidFilename&quot;&gt;isValidFilename&lt;/strong&gt;(Range)(Range filename)</source>
          <target state="translated">bool &lt;strong id=&quot;isValidFilename&quot;&gt;isValidFilename&lt;/strong&gt; (Range) (Range filename)</target>
        </trans-unit>
        <trans-unit id="632dbd60d30b3fe644075286eb012d650e1f725d" translate="yes" xml:space="preserve">
          <source>bool &lt;strong id=&quot;isValidPath&quot;&gt;isValidPath&lt;/strong&gt;(Range)(Range path)</source>
          <target state="translated">bool &lt;strong id=&quot;isValidPath&quot;&gt;isValidPath&lt;/strong&gt; (Range) (ruta del rango)</target>
        </trans-unit>
        <trans-unit id="1314aedf5f41fc88c38fcec6871d8d02732d5a35" translate="yes" xml:space="preserve">
          <source>bool &lt;strong id=&quot;isVectorOpSupported&quot;&gt;isVectorOpSupported&lt;/strong&gt;(Type type, ubyte op, Type t2 = null);</source>
          <target state="translated">bool &lt;strong id=&quot;isVectorOpSupported&quot;&gt;isVectorOpSupported&lt;/strong&gt; (Tipo de tipo, ubyte op, Tipo t2 = nulo);</target>
        </trans-unit>
        <trans-unit id="42eaaec22a4d6312e031e319f82cae5631c232cd" translate="yes" xml:space="preserve">
          <source>bool &lt;strong id=&quot;isXmmSupported&quot;&gt;isXmmSupported&lt;/strong&gt;();</source>
          <target state="translated">bool &lt;strong id=&quot;isXmmSupported&quot;&gt;isXmmSupported&lt;/strong&gt; ();</target>
        </trans-unit>
        <trans-unit id="609ad6f6a942b0b8596e4e4480f2b8b90e10d69d" translate="yes" xml:space="preserve">
          <source>bool &lt;strong id=&quot;lambdaCheckForNestedRef&quot;&gt;lambdaCheckForNestedRef&lt;/strong&gt;(Expression e, Scope* sc);</source>
          <target state="translated">bool &lt;strong id=&quot;lambdaCheckForNestedRef&quot;&gt;lambdaCheckForNestedRef&lt;/strong&gt; (Expresi&amp;oacute;n e, Alcance * sc);</target>
        </trans-unit>
        <trans-unit id="0a41271cab5b6a07ccc9e3c675730764a6226d80" translate="yes" xml:space="preserve">
          <source>bool &lt;strong id=&quot;linearRemoveElement&quot;&gt;linearRemoveElement&lt;/strong&gt;(T value);</source>
          <target state="translated">bool &lt;strong id=&quot;linearRemoveElement&quot;&gt;linearRemoveElement&lt;/strong&gt; (valor T);</target>
        </trans-unit>
        <trans-unit id="2ee8efd225fbd1422a2b38da1b0b6edf4e979423" translate="yes" xml:space="preserve">
          <source>bool &lt;strong id=&quot;load&quot;&gt;load&lt;/strong&gt;(Scope* sc);</source>
          <target state="translated">&lt;strong id=&quot;load&quot;&gt;carga de&lt;/strong&gt; bool (alcance * sc);</target>
        </trans-unit>
        <trans-unit id="63d4d89798bfd80c9a63479542f9b5bafa31c0ac" translate="yes" xml:space="preserve">
          <source>bool &lt;strong id=&quot;loadSourceBuffer&quot;&gt;loadSourceBuffer&lt;/strong&gt;(ref const Loc loc, ref File.ReadResult readResult);</source>
          <target state="translated">bool &lt;strong id=&quot;loadSourceBuffer&quot;&gt;loadSourceBuffer&lt;/strong&gt; (ref const Loc loc, ref File.ReadResult readResult);</target>
        </trans-unit>
        <trans-unit id="8613f32e6c4a29892654900514ff9a82e7415540" translate="yes" xml:space="preserve">
          <source>bool &lt;strong id=&quot;match&quot;&gt;match&lt;/strong&gt;(Range)(ref Range inp)</source>
          <target state="translated">bool &lt;strong id=&quot;match&quot;&gt;match&lt;/strong&gt; (Range) (ref Range inp)</target>
        </trans-unit>
        <trans-unit id="90c0e424a2aa33c9bcb270479453d3827fddb463" translate="yes" xml:space="preserve">
          <source>bool &lt;strong id=&quot;modifyFieldVar&quot;&gt;modifyFieldVar&lt;/strong&gt;(Loc loc, Scope* sc, VarDeclaration var, Expression e1);</source>
          <target state="translated">bool &lt;strong id=&quot;modifyFieldVar&quot;&gt;modifyFieldVar&lt;/strong&gt; (Loc loc, Scope * sc, VarDeclaration var, Expression e1);</target>
        </trans-unit>
        <trans-unit id="22400a51ffbda72e545c2f49da65844cfe63e0e6" translate="yes" xml:space="preserve">
          <source>bool &lt;strong id=&quot;naked&quot;&gt;naked&lt;/strong&gt;;</source>
          <target state="translated">bool &lt;strong id=&quot;naked&quot;&gt;desnudo&lt;/strong&gt; ;</target>
        </trans-unit>
        <trans-unit id="02ebec7647eae46b0a791fe5748ceb43ac01f627" translate="yes" xml:space="preserve">
          <source>bool &lt;strong id=&quot;needExpansion&quot;&gt;needExpansion&lt;/strong&gt;;</source>
          <target state="translated">bool &lt;strong id=&quot;needExpansion&quot;&gt;needExpansion&lt;/strong&gt; ;</target>
        </trans-unit>
        <trans-unit id="7074faa7b377e026d35e7fcc226456844b1dc841" translate="yes" xml:space="preserve">
          <source>bool &lt;strong id=&quot;needOpEquals&quot;&gt;needOpEquals&lt;/strong&gt;(StructDeclaration sd);</source>
          <target state="translated">bool &lt;strong id=&quot;needOpEquals&quot;&gt;needOpEquals&lt;/strong&gt; (StructDeclaration sd);</target>
        </trans-unit>
        <trans-unit id="c72096816fe527c4d8331ed1b8b7260d27fd42c2" translate="yes" xml:space="preserve">
          <source>bool &lt;strong id=&quot;needToCopyLiteral&quot;&gt;needToCopyLiteral&lt;/strong&gt;(const Expression expr);</source>
          <target state="translated">bool &lt;strong id=&quot;needToCopyLiteral&quot;&gt;needToCopyLiteral&lt;/strong&gt; (const Expression expr);</target>
        </trans-unit>
        <trans-unit id="d2f89deee55b9826123ca6c7bff0194c31e53f19" translate="yes" xml:space="preserve">
          <source>bool &lt;strong id=&quot;needsDestruction&quot;&gt;needsDestruction&lt;/strong&gt;();</source>
          <target state="translated">bool &lt;strong id=&quot;needsDestruction&quot;&gt;needsDestruction&lt;/strong&gt; ();</target>
        </trans-unit>
        <trans-unit id="499638fc44dcd252a1384abf8efb829ce5ac21bb" translate="yes" xml:space="preserve">
          <source>bool &lt;strong id=&quot;needsNested&quot;&gt;needsNested&lt;/strong&gt;();</source>
          <target state="translated">bool &lt;strong id=&quot;needsNested&quot;&gt;needsNested&lt;/strong&gt; ();</target>
        </trans-unit>
        <trans-unit id="fb1ef9e0d7a0764348f7451216823e8e97aa7202" translate="yes" xml:space="preserve">
          <source>bool &lt;strong id=&quot;nextEvenPermutation&quot;&gt;nextEvenPermutation&lt;/strong&gt;(alias less = &quot;a &amp;lt; b&quot;, BidirectionalRange)(BidirectionalRange range)</source>
          <target state="translated">bool &lt;strong id=&quot;nextEvenPermutation&quot;&gt;nextEvenPermutation&lt;/strong&gt; (alias less = &quot;a &amp;lt;b&quot;, BidirectionalRange) (rango BidirectionalRange)</target>
        </trans-unit>
        <trans-unit id="5ce1d8d7dc239dd93b88f291567cf5a0e51fe8e3" translate="yes" xml:space="preserve">
          <source>bool &lt;strong id=&quot;nextPermutation&quot;&gt;nextPermutation&lt;/strong&gt;(alias less = &quot;a &amp;lt; b&quot;, BidirectionalRange)(BidirectionalRange range)</source>
          <target state="translated">bool &lt;strong id=&quot;nextPermutation&quot;&gt;nextPermutation&lt;/strong&gt; (alias less = &quot;a &amp;lt;b&quot;, BidirectionalRange) (rango BidirectionalRange)</target>
        </trans-unit>
        <trans-unit id="123e9229239980054d400175d5c1f3a42dbfc31f" translate="yes" xml:space="preserve">
          <source>bool &lt;strong id=&quot;normalize&quot;&gt;normalize&lt;/strong&gt;(R)(R range, ElementType!R sum = 1)</source>
          <target state="translated">bool &lt;strong id=&quot;normalize&quot;&gt;normalize&lt;/strong&gt; (R) (rango R, ElementType! R sum = 1)</target>
        </trans-unit>
        <trans-unit id="58ba82788c9408c4d1ce24445b1ea51e00ce8619" translate="yes" xml:space="preserve">
          <source>bool &lt;strong id=&quot;nrvo_can&quot;&gt;nrvo_can&lt;/strong&gt;;</source>
          <target state="translated">bool &lt;strong id=&quot;nrvo_can&quot;&gt;nrvo_can&lt;/strong&gt; ;</target>
        </trans-unit>
        <trans-unit id="214d325a06fafd04357ba97829c86fce6180a0fd" translate="yes" xml:space="preserve">
          <source>bool &lt;strong id=&quot;nthPermutationImpl&quot;&gt;nthPermutationImpl&lt;/strong&gt;(Range)(auto ref Range range, ulong perm)</source>
          <target state="translated">bool &lt;strong id=&quot;nthPermutationImpl&quot;&gt;nthPermutationImpl&lt;/strong&gt; (Rango) (rango de rango de referencia autom&amp;aacute;tica, ulong perm)</target>
        </trans-unit>
        <trans-unit id="8425aee463a4185ffc5bccc1b98e5a319572adc4" translate="yes" xml:space="preserve">
          <source>bool &lt;strong id=&quot;onStack&quot;&gt;onStack&lt;/strong&gt;;</source>
          <target state="translated">bool &lt;strong id=&quot;onStack&quot;&gt;onStack&lt;/strong&gt; ;</target>
        </trans-unit>
        <trans-unit id="bc4f0474810600e181dc1dbd5382303cd2e6acee" translate="yes" xml:space="preserve">
          <source>bool &lt;strong id=&quot;oneMember&quot;&gt;oneMember&lt;/strong&gt;(Dsymbol* ps, Identifier ident);</source>
          <target state="translated">bool &lt;strong id=&quot;oneMember&quot;&gt;oneMember&lt;/strong&gt; (Dsymbol * ps, Identificador identificador);</target>
        </trans-unit>
        <trans-unit id="7a88b768f6ae9ff486ad18b08bc8151eb472e8ab" translate="yes" xml:space="preserve">
          <source>bool &lt;strong id=&quot;opEquals&quot;&gt;opEquals&lt;/strong&gt;(Object o);</source>
          <target state="translated">bool &lt;strong id=&quot;opEquals&quot;&gt;opEquals&lt;/strong&gt; (Objeto o);</target>
        </trans-unit>
        <trans-unit id="389070e29f75ea628e0db1559d88bec59c5d7b49" translate="yes" xml:space="preserve">
          <source>bool &lt;strong id=&quot;opEquals&quot;&gt;opEquals&lt;/strong&gt;(Object rhs);</source>
          <target state="translated">bool &lt;strong id=&quot;opEquals&quot;&gt;opEquals&lt;/strong&gt; (Object rhs);</target>
        </trans-unit>
        <trans-unit id="a1474aef03d5b2b1583d38726818b4805c8767da" translate="yes" xml:space="preserve">
          <source>bool &lt;strong id=&quot;opEquals&quot;&gt;opEquals&lt;/strong&gt;(R)(R rhs)</source>
          <target state="translated">bool &lt;strong id=&quot;opEquals&quot;&gt;opEquals&lt;/strong&gt; (R) (R rhs)</target>
        </trans-unit>
        <trans-unit id="71922e6d6fef0b2501a0b792b75882dd39e3f571" translate="yes" xml:space="preserve">
          <source>bool &lt;strong id=&quot;opEquals&quot;&gt;opEquals&lt;/strong&gt;(R...)(auto ref R rhs)</source>
          <target state="translated">bool &lt;strong id=&quot;opEquals&quot;&gt;opEquals&lt;/strong&gt; (R ...) (auto ref R rhs)</target>
        </trans-unit>
        <trans-unit id="53511c0e33514989dbaeba9533215d690314f31d" translate="yes" xml:space="preserve">
          <source>bool &lt;strong id=&quot;opEquals&quot;&gt;opEquals&lt;/strong&gt;(U, this _)(U rhs)</source>
          <target state="translated">bool &lt;strong id=&quot;opEquals&quot;&gt;opEquals&lt;/strong&gt; (U, this _) (U rhs)</target>
        </trans-unit>
        <trans-unit id="814cd93fbed0798112bf6169d52654833ca6644b" translate="yes" xml:space="preserve">
          <source>bool &lt;strong id=&quot;opEquals&quot;&gt;opEquals&lt;/strong&gt;(const Object lhs, const Object rhs);</source>
          <target state="translated">bool &lt;strong id=&quot;opEquals&quot;&gt;opEquals&lt;/strong&gt; (const Object lhs, const Object rhs);</target>
        </trans-unit>
        <trans-unit id="53d847dcbaba10ba25681a790f14c799b6ebcb13" translate="yes" xml:space="preserve">
          <source>bool &lt;strong id=&quot;opIndex&quot;&gt;opIndex&lt;/strong&gt;(size_t i);</source>
          <target state="translated">bool &lt;strong id=&quot;opIndex&quot;&gt;opIndex&lt;/strong&gt; (size_t i);</target>
        </trans-unit>
        <trans-unit id="d2724befd64172dadc549f4246ef76f0048096df" translate="yes" xml:space="preserve">
          <source>bool &lt;strong id=&quot;ordered&quot;&gt;ordered&lt;/strong&gt;(alias less = &quot;a &amp;lt; b&quot;, T...)(T values)</source>
          <target state="translated">bool &lt;strong id=&quot;ordered&quot;&gt;ordenado&lt;/strong&gt; (alias less = &quot;a &amp;lt;b&quot;, T ...) (valores T)</target>
        </trans-unit>
        <trans-unit id="4617099ad46be9ef7f99f6123ddc118300b56c06" translate="yes" xml:space="preserve">
          <source>bool &lt;strong id=&quot;overloadInsert&quot;&gt;overloadInsert&lt;/strong&gt;(Dsymbol s);</source>
          <target state="translated">bool &lt;strong id=&quot;overloadInsert&quot;&gt;overloadInsert&lt;/strong&gt; (Dsymbol s);</target>
        </trans-unit>
        <trans-unit id="04201858a3de426624d5561df162a0a77f770721" translate="yes" xml:space="preserve">
          <source>bool &lt;strong id=&quot;parameterEscapes&quot;&gt;parameterEscapes&lt;/strong&gt;(Type tthis, Parameter p);</source>
          <target state="translated">bool &lt;strong id=&quot;parameterEscapes&quot;&gt;parameterEscapes&lt;/strong&gt; (Escriba tthis, Par&amp;aacute;metro p);</target>
        </trans-unit>
        <trans-unit id="e8e29aa621b5a83ffb7aba597d4e4864db48371d" translate="yes" xml:space="preserve">
          <source>bool &lt;strong id=&quot;parseCommandLine&quot;&gt;parseCommandLine&lt;/strong&gt;(ref const Strings arguments, const size_t argc, ref Param params, ref Strings files);</source>
          <target state="translated">bool &lt;strong id=&quot;parseCommandLine&quot;&gt;parseCommandLine&lt;/strong&gt; (ref const Strings argumentos, const size_t argc, ref Param params, ref Strings files);</target>
        </trans-unit>
        <trans-unit id="0ff6d34e74b1459cd77d7bbe06be61b511dd3356" translate="yes" xml:space="preserve">
          <source>bool &lt;strong id=&quot;pointToSameMemoryBlock&quot;&gt;pointToSameMemoryBlock&lt;/strong&gt;(Expression agg1, Expression agg2);</source>
          <target state="translated">bool &lt;strong id=&quot;pointToSameMemoryBlock&quot;&gt;pointToSameMemoryBlock&lt;/strong&gt; (Expresi&amp;oacute;n agg1, ​​Expresi&amp;oacute;n agg2);</target>
        </trans-unit>
        <trans-unit id="18e81fed01e1f807362c989b5794cde1e2816e24" translate="yes" xml:space="preserve">
          <source>bool &lt;strong id=&quot;read&quot;&gt;read&lt;/strong&gt;(ref const Loc loc);</source>
          <target state="translated">bool &lt;strong id=&quot;read&quot;&gt;read&lt;/strong&gt; (ref const Loc loc);</target>
        </trans-unit>
        <trans-unit id="49b66f2ec9100f1cc720f3fa74e97e2829ec914e" translate="yes" xml:space="preserve">
          <source>bool &lt;strong id=&quot;ready&quot;&gt;ready&lt;/strong&gt;();</source>
          <target state="translated">bool &lt;strong id=&quot;ready&quot;&gt;ready&lt;/strong&gt; ();</target>
        </trans-unit>
        <trans-unit id="00bdf0911a09e4eead6eed3636c69ab21f8a88a8" translate="yes" xml:space="preserve">
          <source>bool &lt;strong id=&quot;reallocate&quot;&gt;reallocate&lt;/strong&gt;(Allocator)(ref Allocator a, ref void[] b, size_t s);</source>
          <target state="translated">bool &lt;strong id=&quot;reallocate&quot;&gt;reallocate&lt;/strong&gt; (Allocator) (Ref Allocator a, ref void [] b, size_t s);</target>
        </trans-unit>
        <trans-unit id="14ac9ec3678660c74ff1ffc9e76b768ee22e1957" translate="yes" xml:space="preserve">
          <source>bool &lt;strong id=&quot;reallocate&quot;&gt;reallocate&lt;/strong&gt;(ref void[] b, size_t newSize);</source>
          <target state="translated">bool &lt;strong id=&quot;reallocate&quot;&gt;reallocate&lt;/strong&gt; (ref void [] b, size_t newSize);</target>
        </trans-unit>
        <trans-unit id="dd4bc5804ec9263d211c9e63c5c29337ca7fee08" translate="yes" xml:space="preserve">
          <source>bool &lt;strong id=&quot;reallocate&quot;&gt;reallocate&lt;/strong&gt;(ref void[] b, size_t s);</source>
          <target state="translated">bool &lt;strong id=&quot;reallocate&quot;&gt;reasignar&lt;/strong&gt; (ref void [] b, size_t s);</target>
        </trans-unit>
        <trans-unit id="2bdfd987eb60427e10c013ca01fba84de557eaea" translate="yes" xml:space="preserve">
          <source>bool &lt;strong id=&quot;reallocate&quot;&gt;reallocate&lt;/strong&gt;(ref void[] b, size_t size);</source>
          <target state="translated">bool &lt;strong id=&quot;reallocate&quot;&gt;reasignar&lt;/strong&gt; (ref void [] b, size_t size);</target>
        </trans-unit>
        <trans-unit id="8a8dd23186f9c1ce0c4328d555c0e98ce8f94c38" translate="yes" xml:space="preserve">
          <source>bool &lt;strong id=&quot;receiveTimeout&quot;&gt;receiveTimeout&lt;/strong&gt;(T...)(Duration duration, T ops);</source>
          <target state="translated">bool &lt;strong id=&quot;receiveTimeout&quot;&gt;recibirTimeout&lt;/strong&gt; (T ...) (Duraci&amp;oacute;n duraci&amp;oacute;n, T ops);</target>
        </trans-unit>
        <trans-unit id="fa5a64498225d27e938b6b78e2dbf28c42b3098c" translate="yes" xml:space="preserve">
          <source>bool &lt;strong id=&quot;register&quot;&gt;register&lt;/strong&gt;(string name, Tid tid);</source>
          <target state="translated">&lt;strong id=&quot;register&quot;&gt;registro&lt;/strong&gt; bool (nombre de cadena, Tid tid);</target>
        </trans-unit>
        <trans-unit id="05d59b476080d10cd7c30e7d8e988a446c7b1eb1" translate="yes" xml:space="preserve">
          <source>bool &lt;strong id=&quot;reliesOnTident&quot;&gt;reliesOnTident&lt;/strong&gt;(Type t, TemplateParameters* tparams, size_t iStart = 0);</source>
          <target state="translated">bool &lt;strong id=&quot;reliesOnTident&quot;&gt;reliesOnTident&lt;/strong&gt; (Tipo t, TemplateParameters * tparams, size_t iStart = 0);</target>
        </trans-unit>
        <trans-unit id="1e4ec22fd4535d63a0927144249542e2a3141df3" translate="yes" xml:space="preserve">
          <source>bool &lt;strong id=&quot;required&quot;&gt;required&lt;/strong&gt;;</source>
          <target state="translated">bool &lt;strong id=&quot;required&quot;&gt;requerido&lt;/strong&gt; ;</target>
        </trans-unit>
        <trans-unit id="5f78d93447a0dde7add77337e3784a98a37973ab" translate="yes" xml:space="preserve">
          <source>bool &lt;strong id=&quot;reverseOverloads&quot;&gt;reverseOverloads&lt;/strong&gt;;</source>
          <target state="translated">bool &lt;strong id=&quot;reverseOverloads&quot;&gt;reverseOverloads&lt;/strong&gt; ;</target>
        </trans-unit>
        <trans-unit id="36da9b9acded38f9f4fdef3e8f559dc7e61d2b54" translate="yes" xml:space="preserve">
          <source>bool &lt;strong id=&quot;rootImports&quot;&gt;rootImports&lt;/strong&gt;();</source>
          <target state="translated">bool &lt;strong id=&quot;rootImports&quot;&gt;rootImports&lt;/strong&gt; ();</target>
        </trans-unit>
        <trans-unit id="2e978b6d76421fae385c67b889c2f34bf7229c37" translate="yes" xml:space="preserve">
          <source>bool &lt;strong id=&quot;runMain&quot;&gt;runMain&lt;/strong&gt;;</source>
          <target state="translated">bool &lt;strong id=&quot;runMain&quot;&gt;runMain&lt;/strong&gt; ;</target>
        </trans-unit>
        <trans-unit id="6aac0e8290fcc557185e51f620f0bd592bfcb115" translate="yes" xml:space="preserve">
          <source>bool &lt;strong id=&quot;secureEqual&quot;&gt;secureEqual&lt;/strong&gt;(R1, R2)(R1 r1, R2 r2)</source>
          <target state="translated">bool &lt;strong id=&quot;secureEqual&quot;&gt;secureEqual&lt;/strong&gt; (R1, R2) (R1 r1, R2 r2)</target>
        </trans-unit>
        <trans-unit id="8b76b49f00a5259e917a43276764e0c82a57cc24" translate="yes" xml:space="preserve">
          <source>bool &lt;strong id=&quot;selfImports&quot;&gt;selfImports&lt;/strong&gt;();</source>
          <target state="translated">bool &lt;strong id=&quot;selfImports&quot;&gt;selfImports&lt;/strong&gt; ();</target>
        </trans-unit>
        <trans-unit id="515d29e154434c8b4a07c1ab0625e934c6a91bab" translate="yes" xml:space="preserve">
          <source>bool &lt;strong id=&quot;semantic3Errors&quot;&gt;semantic3Errors&lt;/strong&gt;;</source>
          <target state="translated">bool &lt;strong id=&quot;semantic3Errors&quot;&gt;semantic3Errors&lt;/strong&gt; ;</target>
        </trans-unit>
        <trans-unit id="61c93d5a5bf8170beb5852bdba487d42db497f99" translate="yes" xml:space="preserve">
          <source>bool &lt;strong id=&quot;shrinkArray&quot;&gt;shrinkArray&lt;/strong&gt;(T)(ref T[] arr, size_t delta);</source>
          <target state="translated">bool &lt;strong id=&quot;shrinkArray&quot;&gt;shrinkArray&lt;/strong&gt; (T) (ref T [] arr, size_t delta);</target>
        </trans-unit>
        <trans-unit id="95a4f959a7a1cdd9a326a665653bbf202197f971" translate="yes" xml:space="preserve">
          <source>bool &lt;strong id=&quot;shrinkArray&quot;&gt;shrinkArray&lt;/strong&gt;(T, Allocator)(auto ref Allocator alloc, ref T[] array, size_t delta);</source>
          <target state="translated">bool &lt;strong id=&quot;shrinkArray&quot;&gt;shrinkArray&lt;/strong&gt; (T, Allocator) (asignaci&amp;oacute;n autom&amp;aacute;tica de asignaci&amp;oacute;n de referencia, matriz de referencia T [], tama&amp;ntilde;o_t delta);</target>
        </trans-unit>
        <trans-unit id="e07efbd2bdee0fc44fb2f660b79bfbf51a057d10" translate="yes" xml:space="preserve">
          <source>bool &lt;strong id=&quot;skip&quot;&gt;skip&lt;/strong&gt;(Range)(ref Range inp)</source>
          <target state="translated">bool &lt;strong id=&quot;skip&quot;&gt;skip&lt;/strong&gt; (Range) (ref Range inp)</target>
        </trans-unit>
        <trans-unit id="19e82a1d3011f270f12926f5ecd5008f4b9dd1ba" translate="yes" xml:space="preserve">
          <source>bool &lt;strong id=&quot;skipOver&quot;&gt;skipOver&lt;/strong&gt;(Haystack, Needles...)(ref Haystack haystack, Needles needles)</source>
          <target state="translated">bool &lt;strong id=&quot;skipOver&quot;&gt;skipOver&lt;/strong&gt; (Haystack, Needles ...) (ref Haystack haystack, Needles needles)</target>
        </trans-unit>
        <trans-unit id="ced2e1a62b2a6aea3e469e1f864e9cc09d679463" translate="yes" xml:space="preserve">
          <source>bool &lt;strong id=&quot;skipOver&quot;&gt;skipOver&lt;/strong&gt;(R)(ref R r1)</source>
          <target state="translated">&lt;strong id=&quot;skipOver&quot;&gt;skolOver&lt;/strong&gt; bool (R) (ref R r1)</target>
        </trans-unit>
        <trans-unit id="409f55b8ed255e65ca729d5fd37a67cbe342e8a4" translate="yes" xml:space="preserve">
          <source>bool &lt;strong id=&quot;skipOver&quot;&gt;skipOver&lt;/strong&gt;(R, Es...)(ref R r, Es es)</source>
          <target state="translated">bool &lt;strong id=&quot;skipOver&quot;&gt;skipOver&lt;/strong&gt; (R, Es ...) (ref R r, Es es)</target>
        </trans-unit>
        <trans-unit id="ea2182326b216515e3a1a3d2864c62383992f0a3" translate="yes" xml:space="preserve">
          <source>bool &lt;strong id=&quot;sortCtorsOld&quot;&gt;sortCtorsOld&lt;/strong&gt;(int[][] edges);</source>
          <target state="translated">bool &lt;strong id=&quot;sortCtorsOld&quot;&gt;sortCtorsOld&lt;/strong&gt; (int [] [] bordes);</target>
        </trans-unit>
        <trans-unit id="45aeb7bd7ee865eb5ef864fa13d237626c30e3fd" translate="yes" xml:space="preserve">
          <source>bool &lt;strong id=&quot;stack&quot;&gt;stack&lt;/strong&gt;;</source>
          <target state="translated">bool &lt;strong id=&quot;stack&quot;&gt;stack&lt;/strong&gt; ;</target>
        </trans-unit>
        <trans-unit id="b4d6571131b9dfb91b86118ed3c3f87e85370a49" translate="yes" xml:space="preserve">
          <source>bool &lt;strong id=&quot;startsWith&quot;&gt;startsWith&lt;/strong&gt;(alias pred = &quot;a == b&quot;, R, E)(R doesThisStart, E withThis)</source>
          <target state="translated">bool &lt;strong id=&quot;startsWith&quot;&gt;comienza con&lt;/strong&gt; (alias pred = &quot;a == b&quot;, R, E) (R doesThisStart, E withThis)</target>
        </trans-unit>
        <trans-unit id="8d2cbecc5148dc4a65e2e72fdcdded9dd025fd44" translate="yes" xml:space="preserve">
          <source>bool &lt;strong id=&quot;startsWith&quot;&gt;startsWith&lt;/strong&gt;(alias pred = &quot;a == b&quot;, R1, R2)(R1 doesThisStart, R2 withThis)</source>
          <target state="translated">bool &lt;strong id=&quot;startsWith&quot;&gt;comienza con&lt;/strong&gt; (alias pred = &quot;a == b&quot;, R1, R2) (R1 doesThisStart, R2 withThis)</target>
        </trans-unit>
        <trans-unit id="a01131a0c03acb6d1f4b72dccbd07001188b317e" translate="yes" xml:space="preserve">
          <source>bool &lt;strong id=&quot;startsWith&quot;&gt;startsWith&lt;/strong&gt;(alias pred, R)(R doesThisStart)</source>
          <target state="translated">Bool &lt;strong id=&quot;startsWith&quot;&gt;comienza con&lt;/strong&gt; (alias pred, R) (R doesThisStart)</target>
        </trans-unit>
        <trans-unit id="a79ee14d05c9615a19d0fdef7bd88b55bddab0dd" translate="yes" xml:space="preserve">
          <source>bool &lt;strong id=&quot;strictlyOrdered&quot;&gt;strictlyOrdered&lt;/strong&gt;(alias less = &quot;a &amp;lt; b&quot;, T...)(T values)</source>
          <target state="translated">bool &lt;strong id=&quot;strictlyOrdered&quot;&gt;estrictamente&lt;/strong&gt; ordenado (alias less = &quot;a &amp;lt;b&quot;, T ...) (valores T)</target>
        </trans-unit>
        <trans-unit id="17fd5b49a7b1c5c77688570a360056c59a540ec2" translate="yes" xml:space="preserve">
          <source>bool &lt;strong id=&quot;summarize&quot;&gt;summarize&lt;/strong&gt;;</source>
          <target state="translated">bool &lt;strong id=&quot;summarize&quot;&gt;resume&lt;/strong&gt; ;</target>
        </trans-unit>
        <trans-unit id="3183b0fc2a908ffaebd5fe556217be802333981e" translate="yes" xml:space="preserve">
          <source>bool &lt;strong id=&quot;symbolIsVisible&quot;&gt;symbolIsVisible&lt;/strong&gt;(Dsymbol origin, Dsymbol s);</source>
          <target state="translated">bool &lt;strong id=&quot;symbolIsVisible&quot;&gt;symbolIsVisible&lt;/strong&gt; (origen Dsymbol, Dsymbol s);</target>
        </trans-unit>
        <trans-unit id="6ff57e380e6ce161d6d51e22b4f764fa3ff0970b" translate="yes" xml:space="preserve">
          <source>bool &lt;strong id=&quot;symbolIsVisible&quot;&gt;symbolIsVisible&lt;/strong&gt;(Module mod, Dsymbol s);</source>
          <target state="translated">bool &lt;strong id=&quot;symbolIsVisible&quot;&gt;symbolIsVisible&lt;/strong&gt; (Mod de m&amp;oacute;dulo, s&amp;iacute;mbolo D);</target>
        </trans-unit>
        <trans-unit id="9394840cabbda178f4e59cfb3bd9a8018e26a6ed" translate="yes" xml:space="preserve">
          <source>bool &lt;strong id=&quot;symbolIsVisible&quot;&gt;symbolIsVisible&lt;/strong&gt;(Scope* sc, Dsymbol s);</source>
          <target state="translated">bool &lt;strong id=&quot;symbolIsVisible&quot;&gt;symbolIsVisible&lt;/strong&gt; (Scope * sc, Dsymbol s);</target>
        </trans-unit>
        <trans-unit id="d8889e2e6e6e03915d46270e68655a8ebb50a1f5" translate="yes" xml:space="preserve">
          <source>bool &lt;strong id=&quot;test&quot;&gt;test&lt;/strong&gt;(Range)(ref Range inp)</source>
          <target state="translated">&lt;strong id=&quot;test&quot;&gt;prueba de&lt;/strong&gt; bool (Rango) (ref Rango inp)</target>
        </trans-unit>
        <trans-unit id="e8c1ac637162d13ff040db4c8c681ed3a3e97ec8" translate="yes" xml:space="preserve">
          <source>bool &lt;strong id=&quot;tpsemantic&quot;&gt;tpsemantic&lt;/strong&gt;(TemplateParameter tp, Scope* sc, TemplateParameters* parameters);</source>
          <target state="translated">bool &lt;strong id=&quot;tpsemantic&quot;&gt;tpsemantic&lt;/strong&gt; (TemplateParameter tp, Scope * sc, TemplateParameters * par&amp;aacute;metros);</target>
        </trans-unit>
        <trans-unit id="6cfda05c1ce53f88e990bc00ad94135d98a9a845" translate="yes" xml:space="preserve">
          <source>bool &lt;strong id=&quot;tryLock&quot;&gt;tryLock&lt;/strong&gt;();</source>
          <target state="translated">bool &lt;strong id=&quot;tryLock&quot;&gt;tryLock&lt;/strong&gt; ();</target>
        </trans-unit>
        <trans-unit id="0b504d24fcbd524462af24c877a7e718f8d59648" translate="yes" xml:space="preserve">
          <source>bool &lt;strong id=&quot;tryLock&quot;&gt;tryLock&lt;/strong&gt;(LockType lockType = LockType.readWrite, ulong start = 0, ulong length = 0);</source>
          <target state="translated">bool &lt;strong id=&quot;tryLock&quot;&gt;tryLock&lt;/strong&gt; (LockType lockType = LockType.readWrite, ulong start = 0, ulong length = 0);</target>
        </trans-unit>
        <trans-unit id="ad84b74d5e7e159358d21b53a3178b10991a7fb3" translate="yes" xml:space="preserve">
          <source>bool &lt;strong id=&quot;tryWait&quot;&gt;tryWait&lt;/strong&gt;();</source>
          <target state="translated">bool &lt;strong id=&quot;tryWait&quot;&gt;tryWait&lt;/strong&gt; ();</target>
        </trans-unit>
        <trans-unit id="4542df686ee6c8207b63dda386c531a0493853a5" translate="yes" xml:space="preserve">
          <source>bool &lt;strong id=&quot;twoDtorInVtable&quot;&gt;twoDtorInVtable&lt;/strong&gt;;</source>
          <target state="translated">bool &lt;strong id=&quot;twoDtorInVtable&quot;&gt;twoDtorInVtable&lt;/strong&gt; ;</target>
        </trans-unit>
        <trans-unit id="ac2ade042e89acbc1c62d1f925333571f276aa4e" translate="yes" xml:space="preserve">
          <source>bool &lt;strong id=&quot;typeMerge&quot;&gt;typeMerge&lt;/strong&gt;(Scope* sc, TOK op, Type* pt, Expression* pe1, Expression* pe2);</source>
          <target state="translated">bool &lt;strong id=&quot;typeMerge&quot;&gt;typeMerge&lt;/strong&gt; (Scope * sc, TOK op, Type * pt, Expression * pe1, Expression * pe2);</target>
        </trans-unit>
        <trans-unit id="63dd97a4bc82f91129bd6ba204643b057882861b" translate="yes" xml:space="preserve">
          <source>bool &lt;strong id=&quot;type_zeroCopy&quot;&gt;type_zeroCopy&lt;/strong&gt;(type* t);</source>
          <target state="translated">bool &lt;strong id=&quot;type_zeroCopy&quot;&gt;type_zeroCopy&lt;/strong&gt; (tipo * t);</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
