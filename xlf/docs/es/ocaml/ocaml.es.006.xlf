<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="es" datatype="htmlbody" original="ocaml">
    <body>
      <group id="ocaml">
        <trans-unit id="aae572464868d3c32a285d92264890f85d5ec63c" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;weak.s#VALstats&quot;&gt;stats&lt;/a&gt; [&lt;a href=&quot;weak.s&quot;&gt;Weak.S&lt;/a&gt;]</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a113e83c587bb22eb2958912f9b892a3fd17771a" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;Before 3.11.2 &lt;/b&gt; no ?temp_dir optional argument</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="18a2f2c810afad22b86e8852457565029374d8c2" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;Before 3.12.0 &lt;/b&gt; used a different algorithm (affects all the following functions)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f6b9449495b533f9e84fcf009850b2bc16fdde84" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;Before 4.00.0 &lt;/b&gt; the &lt;code&gt;random&lt;/code&gt; parameter was not present and all hash tables were created in non-randomized mode.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="34b49318dbcacad72fdf3e0666dbf9751e77f265" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;Before 4.00.0 &lt;/b&gt; the &lt;code&gt;~&lt;/code&gt;&lt;code&gt;random&lt;/code&gt; parameter was not present and all hash tables were created in non-randomized mode.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bcc9144014025dcdbc213de1d3a00770986ae236" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;Before 4.03 &lt;/b&gt; Physical equality was not ensured.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="00208b1289208070fe953aacb98b71f2d244f80f" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;Before 4.03.0 &lt;/b&gt; no ?perms optional argument</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bf0c608135febf93d9bb5c1c483cb685354277e5" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;Before 4.12 &lt;/b&gt;&lt;code&gt;Sys_error&lt;/code&gt; was not raised for recursive locking (platform-dependent behaviour)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e89706f36c6efb31ee96c905e3af6c1258fa2c23" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;Before 4.12 &lt;/b&gt;&lt;code&gt;Sys_error&lt;/code&gt; was not raised when unlocking an unlocked mutex or when unlocking a mutex from a different thread.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e8721f2aa316f6c84af47d6694ffc237eb24b559" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;Note.&lt;/b&gt; The &lt;code&gt;(^)&lt;/code&gt; binary operator concatenates two strings.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9ea1a91b41a002f85dbff2ea71d83daecee7e236" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;Parameters: &lt;/b&gt;</source>
          <target state="translated">&lt;b&gt;Parameters: &lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="a7e598e5a74cc4853ca9ce8f5d3116f8b945060d" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;Past mutability.&lt;/b&gt; OCaml strings used to be modifiable in place, for instance via the &lt;a href=&quot;string#VALset&quot;&gt;&lt;code&gt;String.set&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;string#VALblit&quot;&gt;&lt;code&gt;String.blit&lt;/code&gt;&lt;/a&gt; functions. This use is nowadays only possible when the compiler is put in &quot;unsafe-string&quot; mode by giving the &lt;code&gt;-unsafe-string&lt;/code&gt; command-line option. This compatibility mode makes the types &lt;code&gt;string&lt;/code&gt; and &lt;code&gt;bytes&lt;/code&gt; (see &lt;a href=&quot;bytes#TYPEt&quot;&gt;&lt;code&gt;Bytes.t&lt;/code&gt;&lt;/a&gt;) interchangeable so that functions expecting byte sequences can also accept strings as arguments and modify them.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="914521c06f635e4bd1f7f521cd4b206a7d398bf2" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;Raises&lt;/b&gt;</source>
          <target state="translated">&lt;b&gt;Raises&lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="1dbc77c3e88a80edb46582d37ffea04ca7787f1c" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;Raises&lt;/b&gt;&lt;code&gt;Division_by_zero&lt;/code&gt; if &lt;code&gt;y&lt;/code&gt; is zero.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4b3640701637a4b47271a643e2b7d6b769bfa017" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;Raises&lt;/b&gt;&lt;code&gt;Division_by_zero&lt;/code&gt; if the second argument is 0.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0ed204ccf8670e13d7858d7a68c749f6b0ffb4dc" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;Raises&lt;/b&gt;&lt;code&gt;Division_by_zero&lt;/code&gt; if the second argument is zero.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="73e6522454e20fe4b0b6745276c098db0bee6d65" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;Raises&lt;/b&gt;&lt;code&gt;Division_by_zero&lt;/code&gt; if the second argument is zero. This division rounds the real quotient of its arguments towards zero, as specified for &lt;a href=&quot;stdlib#VAL(/)&quot;&gt;&lt;code&gt;(/)&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="50c8628f087b37c1ec7f2bafd710291e96ac8ab5" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;Raises&lt;/b&gt;&lt;code&gt;End_of_file&lt;/code&gt; if an end of file was reached while reading the integer.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4453f682d793d04f07ce3b5381c0888bbd11e53c" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;Raises&lt;/b&gt;&lt;code&gt;End_of_file&lt;/code&gt; if an end of file was reached.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a2a7004d82d7f99131506be271af8c46ae53503c" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;Raises&lt;/b&gt;&lt;code&gt;End_of_file&lt;/code&gt; if the channel contains fewer than &lt;code&gt;n&lt;/code&gt; characters. In this case, the characters are still added to the buffer, so as to avoid loss of data.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6c2daccfea08a013c6805ed2142661d7fedba0bd" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;Raises&lt;/b&gt;&lt;code&gt;End_of_file&lt;/code&gt; if the end of file is reached before &lt;code&gt;len&lt;/code&gt; characters have been read.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e7ca2ae91f9fd6a9b21c9f4bda3726a51a9e8aba" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;Raises&lt;/b&gt;&lt;code&gt;End_of_file&lt;/code&gt; if the end of the file is reached at the beginning of line.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="879682b7c0ee35318158690698e944f9e9db7691" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;Raises&lt;/b&gt;&lt;code&gt;End_of_file&lt;/code&gt; if there are no more characters to read.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="73025335f6b1f6d800bad10b84eacf09501abfda" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;Raises&lt;/b&gt;&lt;code&gt;End_of_file&lt;/code&gt; when the end of the directory has been reached.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5cead636bb90ae165e0e9a2ef56b41a7af843d15" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;Raises&lt;/b&gt;&lt;code&gt;Failure&lt;/code&gt; if the command cannot be escaped on the current platform.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="05b6226b42ba20488e75b6d798c9032b803a29ac" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;Raises&lt;/b&gt;&lt;code&gt;Failure&lt;/code&gt; if the given string is not a valid representation of a float.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="de4567c5a91476d07203c0233c3fcc8b8e5d9044" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;Raises&lt;/b&gt;&lt;code&gt;Failure&lt;/code&gt; if the given string is not a valid representation of an integer, or if the integer represented exceeds the range of integers representable in type &lt;code&gt;int32&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="efc51a0a7cf87626178910a323af6ee9260c3140" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;Raises&lt;/b&gt;&lt;code&gt;Failure&lt;/code&gt; if the given string is not a valid representation of an integer, or if the integer represented exceeds the range of integers representable in type &lt;code&gt;int64&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="87d68850215e392b7dd1842f0979d001b667810e" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;Raises&lt;/b&gt;&lt;code&gt;Failure&lt;/code&gt; if the given string is not a valid representation of an integer, or if the integer represented exceeds the range of integers representable in type &lt;code&gt;nativeint&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5998120aaf62cc863b732a267200d68cfa099ef9" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;Raises&lt;/b&gt;&lt;code&gt;Failure&lt;/code&gt; if the list is empty.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d02f2dc739162e7d429b41d55f19e42ea07de1dc" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;Raises&lt;/b&gt;&lt;code&gt;Failure&lt;/code&gt; when given a string that does not match these formats.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="137633684de5f64a0f11251d01fe0fc22fdf85b8" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;Raises&lt;/b&gt;&lt;code&gt;Invalid_argument&lt;/code&gt; if &lt;code&gt;Array.length&amp;nbsp;v1&amp;nbsp;+&amp;nbsp;Array.length&amp;nbsp;v2&amp;nbsp;&amp;gt;&amp;nbsp;Sys.max_array_length&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d9903cc3030c22de1b45e69a2d7c74ff501f1e7f" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;Raises&lt;/b&gt;&lt;code&gt;Invalid_argument&lt;/code&gt; if &lt;code&gt;M&amp;nbsp;&amp;gt;=&amp;nbsp;N&lt;/code&gt;, or if &lt;code&gt;[|i1;&amp;nbsp;...&amp;nbsp;;&amp;nbsp;iM|]&lt;/code&gt; is outside the bounds of &lt;code&gt;a&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c20e97f1d2eea58ef36f7f261629bc3e447ab0a0" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;Raises&lt;/b&gt;&lt;code&gt;Invalid_argument&lt;/code&gt; if &lt;code&gt;dimx&lt;/code&gt; or &lt;code&gt;dimy&lt;/code&gt; is negative or greater than &lt;a href=&quot;sys#VALmax_array_length&quot;&gt;&lt;code&gt;Sys.max_array_length&lt;/code&gt;&lt;/a&gt;. If the value of &lt;code&gt;e&lt;/code&gt; is a floating-point number, then the maximum size is only &lt;code&gt;Sys.max_array_length&amp;nbsp;/&amp;nbsp;2&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="71dd8ea501ad048743a7b767c35afd4a20bdf0e8" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;Raises&lt;/b&gt;&lt;code&gt;Invalid_argument&lt;/code&gt; if &lt;code&gt;i+1&lt;/code&gt; is not a valid position in &lt;code&gt;s&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="47cd587fa00a39586b8dfb04e956ec2b3e600421" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;Raises&lt;/b&gt;&lt;code&gt;Invalid_argument&lt;/code&gt; if &lt;code&gt;i&lt;/code&gt; does not satisfy &lt;a href=&quot;uchar#VALis_valid&quot;&gt;&lt;code&gt;Uchar.is_valid&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fb914f512985de3aaab724166ee0f57fd659e6ba" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;Raises&lt;/b&gt;&lt;code&gt;Invalid_argument&lt;/code&gt; if &lt;code&gt;i&lt;/code&gt; is not a valid position in &lt;code&gt;s&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7bacf7644593097478aa2f2326b910e60f8acae1" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;Raises&lt;/b&gt;&lt;code&gt;Invalid_argument&lt;/code&gt; if &lt;code&gt;i&lt;/code&gt; not an index of &lt;code&gt;s&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bd467530f64867872134d55800b7273c1fad5b7c" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;Raises&lt;/b&gt;&lt;code&gt;Invalid_argument&lt;/code&gt; if &lt;code&gt;len&amp;nbsp;&amp;lt;&amp;nbsp;0&lt;/code&gt; or &lt;code&gt;len&amp;nbsp;&amp;gt;&amp;nbsp;length&amp;nbsp;b&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cd4f8228fec9085740ce62e8530c8af424d3ddd8" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;Raises&lt;/b&gt;&lt;code&gt;Invalid_argument&lt;/code&gt; if &lt;code&gt;len&amp;nbsp;&amp;lt;&amp;nbsp;0&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aa44c2d5ef221dc3f49f183940d49d68f7b81e12" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;Raises&lt;/b&gt;&lt;code&gt;Invalid_argument&lt;/code&gt; if &lt;code&gt;length&amp;nbsp;v1&amp;nbsp;+&amp;nbsp;length&amp;nbsp;v2&amp;nbsp;&amp;gt;&amp;nbsp;Sys.max_array_length&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3e889dfc568e5b1a758bdaa7ceaa8d84a6517604" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;Raises&lt;/b&gt;&lt;code&gt;Invalid_argument&lt;/code&gt; if &lt;code&gt;length&amp;nbsp;v1&amp;nbsp;+&amp;nbsp;length&amp;nbsp;v2&amp;nbsp;&amp;gt;&amp;nbsp;Sys.max_floatarray_length&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="deabaed894efb709d291b74801eb006cbca1e17a" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;Raises&lt;/b&gt;&lt;code&gt;Invalid_argument&lt;/code&gt; if &lt;code&gt;n&amp;nbsp;&amp;lt;&amp;nbsp;0&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ac280ebef292d675cf2bec836c0b1417d8dc12bd" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;Raises&lt;/b&gt;&lt;code&gt;Invalid_argument&lt;/code&gt; if &lt;code&gt;n&amp;nbsp;&amp;lt;&amp;nbsp;0&lt;/code&gt; or &lt;code&gt;n&amp;nbsp;&amp;gt;&amp;nbsp;&lt;/code&gt;&lt;a href=&quot;sys#VALmax_string_length&quot;&gt;&lt;code&gt;Sys.max_string_length&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="057bbf676ed984c4810e55bb7ca8ac9eac68f119" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;Raises&lt;/b&gt;&lt;code&gt;Invalid_argument&lt;/code&gt; if &lt;code&gt;n&amp;nbsp;&amp;lt;&amp;nbsp;0&lt;/code&gt; or &lt;code&gt;n&amp;nbsp;&amp;gt;&amp;nbsp;Sys.max_array_length&lt;/code&gt;. If the return type of &lt;code&gt;f&lt;/code&gt; is &lt;code&gt;float&lt;/code&gt;, then the maximum size is only &lt;code&gt;Sys.max_array_length&amp;nbsp;/&amp;nbsp;2&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b006919900a66fa4fafd70a86217d9dc7118d8d2" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;Raises&lt;/b&gt;&lt;code&gt;Invalid_argument&lt;/code&gt; if &lt;code&gt;n&amp;nbsp;&amp;lt;&amp;nbsp;0&lt;/code&gt; or &lt;code&gt;n&amp;nbsp;&amp;gt;&amp;nbsp;Sys.max_array_length&lt;/code&gt;. If the value of &lt;code&gt;x&lt;/code&gt; is a floating-point number, then the maximum size is only &lt;code&gt;Sys.max_array_length&amp;nbsp;/&amp;nbsp;2&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="437a48f3c1e1ea6eacc7a245028eb38a4b5f5734" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;Raises&lt;/b&gt;&lt;code&gt;Invalid_argument&lt;/code&gt; if &lt;code&gt;n&amp;nbsp;&amp;lt;&amp;nbsp;0&lt;/code&gt; or &lt;code&gt;n&amp;nbsp;&amp;gt;&amp;nbsp;Sys.max_floatarray_length&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bb680652bfa139894c10d43a5852a28136c94d43" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;Raises&lt;/b&gt;&lt;code&gt;Invalid_argument&lt;/code&gt; if &lt;code&gt;n&lt;/code&gt; is less than 0 or greater or equal than &lt;code&gt;Genarray.num_dims&amp;nbsp;a&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f3dbb990a114d52192a39bd5ca353d36b76e66d3" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;Raises&lt;/b&gt;&lt;code&gt;Invalid_argument&lt;/code&gt; if &lt;code&gt;n&lt;/code&gt; is negative, return 0 if n is larger than the smoothing window.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ab36e5e1df8021fbc2c979371b127032391e7491" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;Raises&lt;/b&gt;&lt;code&gt;Invalid_argument&lt;/code&gt; if &lt;code&gt;n&lt;/code&gt; is negative.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f8519faf0796008949ff4e1a25b3ce1d4c8beb33" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;Raises&lt;/b&gt;&lt;code&gt;Invalid_argument&lt;/code&gt; if &lt;code&gt;n&lt;/code&gt; is not a valid index in &lt;code&gt;s&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7dd8decf2e0761f44343760e31e5e93f9db91283" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;Raises&lt;/b&gt;&lt;code&gt;Invalid_argument&lt;/code&gt; if &lt;code&gt;n&lt;/code&gt; is not comprised between zero and &lt;a href=&quot;obj.ephemeron#VALmax_ephe_length&quot;&gt;&lt;code&gt;Obj.Ephemeron.max_ephe_length&lt;/code&gt;&lt;/a&gt; (limits included).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b5187390a84eeb07cf99dc06dc733dcbf84a0763" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;Raises&lt;/b&gt;&lt;code&gt;Invalid_argument&lt;/code&gt; if &lt;code&gt;n&lt;/code&gt; is not in the range 0 to &lt;a href=&quot;weak#VALlength&quot;&gt;&lt;code&gt;Weak.length&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;nbsp;a&amp;nbsp;-&amp;nbsp;1&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3d446c0255b5bfe2388ef0d45b50d48081cd0bc3" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;Raises&lt;/b&gt;&lt;code&gt;Invalid_argument&lt;/code&gt; if &lt;code&gt;n&lt;/code&gt; is not in the range 0 to &lt;a href=&quot;weak#VALlength&quot;&gt;&lt;code&gt;Weak.length&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;nbsp;a&amp;nbsp;-&amp;nbsp;1&lt;/code&gt;. If the element is a custom block it is not copied.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d673af044463f7280f6e4ac1f765934f85e41481" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;Raises&lt;/b&gt;&lt;code&gt;Invalid_argument&lt;/code&gt; if &lt;code&gt;n&lt;/code&gt; is outside the range 0 to &lt;code&gt;(Array.length&amp;nbsp;a&amp;nbsp;-&amp;nbsp;1)&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="403a39bf4fcfdbc1479f057b811a8cb0d7726b83" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;Raises&lt;/b&gt;&lt;code&gt;Invalid_argument&lt;/code&gt; if &lt;code&gt;n&lt;/code&gt; is outside the range 0 to &lt;code&gt;(length&amp;nbsp;a&amp;nbsp;-&amp;nbsp;1)&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="263d271646f49260cd8bf8ef3ba70ab03911effd" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;Raises&lt;/b&gt;&lt;code&gt;Invalid_argument&lt;/code&gt; if &lt;code&gt;n&lt;/code&gt; is outside the range 0 to &lt;code&gt;Array.length&amp;nbsp;a&amp;nbsp;-&amp;nbsp;1&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="75384affcbca3fc37208b2cd6c0a20110d64fe37" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;Raises&lt;/b&gt;&lt;code&gt;Invalid_argument&lt;/code&gt; if &lt;code&gt;n&lt;/code&gt; is outside the range 0 to &lt;code&gt;length&amp;nbsp;a&amp;nbsp;-&amp;nbsp;1&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="68ee7f71103ec86d2e92d94a07e486678956f038" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;Raises&lt;/b&gt;&lt;code&gt;Invalid_argument&lt;/code&gt; if &lt;code&gt;n&lt;/code&gt; not a valid index in &lt;code&gt;s&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5d3fceb83d874e2dee44bf01f89de4acf77c6e1b" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;Raises&lt;/b&gt;&lt;code&gt;Invalid_argument&lt;/code&gt; if &lt;code&gt;o1&lt;/code&gt; and &lt;code&gt;len&lt;/code&gt; do not designate a valid subarray of &lt;code&gt;v1&lt;/code&gt;, or if &lt;code&gt;o2&lt;/code&gt; and &lt;code&gt;len&lt;/code&gt; do not designate a valid subarray of &lt;code&gt;v2&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c02794298192af89054eaecc7f7b31373a18cae5" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;Raises&lt;/b&gt;&lt;code&gt;Invalid_argument&lt;/code&gt; if &lt;code&gt;off1&lt;/code&gt; and &lt;code&gt;len&lt;/code&gt; do not designate a valid subarray of &lt;code&gt;ar1&lt;/code&gt;, or if &lt;code&gt;off2&lt;/code&gt; and &lt;code&gt;len&lt;/code&gt; do not designate a valid subarray of &lt;code&gt;ar2&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d219633d3131d66d48c219b36dc70802d3b52707" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;Raises&lt;/b&gt;&lt;code&gt;Invalid_argument&lt;/code&gt; if &lt;code&gt;ofs&lt;/code&gt; and &lt;code&gt;len&lt;/code&gt; do not designate a valid sub-array of &lt;code&gt;a&lt;/code&gt;, that is, if &lt;code&gt;ofs&amp;nbsp;&amp;lt;&amp;nbsp;0&lt;/code&gt;, or &lt;code&gt;len&amp;nbsp;&amp;lt;&amp;nbsp;0&lt;/code&gt;, or &lt;code&gt;ofs&amp;nbsp;+&amp;nbsp;len&amp;nbsp;&amp;gt;&amp;nbsp;Genarray.nth_dim&amp;nbsp;a&amp;nbsp;0&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d0cc7970005c1b7c82bd5f88e3c1c24d55805605" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;Raises&lt;/b&gt;&lt;code&gt;Invalid_argument&lt;/code&gt; if &lt;code&gt;ofs&lt;/code&gt; and &lt;code&gt;len&lt;/code&gt; do not designate a valid sub-array of &lt;code&gt;a&lt;/code&gt;, that is, if &lt;code&gt;ofs&amp;nbsp;&amp;lt;&amp;nbsp;1&lt;/code&gt;, or &lt;code&gt;len&amp;nbsp;&amp;lt;&amp;nbsp;0&lt;/code&gt;, or &lt;code&gt;ofs&amp;nbsp;+&amp;nbsp;len&amp;nbsp;&amp;gt;&amp;nbsp;Genarray.nth_dim&amp;nbsp;a&amp;nbsp;(Genarray.num_dims&amp;nbsp;a&amp;nbsp;-&amp;nbsp;1)&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="caa373018c318f162d3c5ccb527d6de311143439" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;Raises&lt;/b&gt;&lt;code&gt;Invalid_argument&lt;/code&gt; if &lt;code&gt;ofs&lt;/code&gt; and &lt;code&gt;len&lt;/code&gt; do not designate a valid subarray of &lt;code&gt;a&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f86a2bd15c2150084f78c99663e764a6250f99d3" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;Raises&lt;/b&gt;&lt;code&gt;Invalid_argument&lt;/code&gt; if &lt;code&gt;pos&lt;/code&gt; and &lt;code&gt;len&lt;/code&gt; do not designate a valid range of &lt;code&gt;buf&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2e6875d1814cf0d8ad2a77df6a788635d83af3e6" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;Raises&lt;/b&gt;&lt;code&gt;Invalid_argument&lt;/code&gt; if &lt;code&gt;pos&lt;/code&gt; and &lt;code&gt;len&lt;/code&gt; do not designate a valid range of &lt;code&gt;s&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="463d713fd74c9098801940d2693c171054489f86" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;Raises&lt;/b&gt;&lt;code&gt;Invalid_argument&lt;/code&gt; if &lt;code&gt;pos&lt;/code&gt; and &lt;code&gt;len&lt;/code&gt; do not designate a valid subarray of &lt;code&gt;a&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="beefef31bbde90ad27d99f95826a7e567cdbd68c" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;Raises&lt;/b&gt;&lt;code&gt;Invalid_argument&lt;/code&gt; if &lt;code&gt;pos&lt;/code&gt; and &lt;code&gt;len&lt;/code&gt; do not designate a valid subarray of &lt;code&gt;a&lt;/code&gt;; that is, if &lt;code&gt;pos&amp;nbsp;&amp;lt;&amp;nbsp;0&lt;/code&gt;, or &lt;code&gt;len&amp;nbsp;&amp;lt;&amp;nbsp;0&lt;/code&gt;, or &lt;code&gt;pos&amp;nbsp;+&amp;nbsp;len&amp;nbsp;&amp;gt;&amp;nbsp;length&amp;nbsp;a&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="58aea943e8cbffbbeb1aae436a1fa264272d2e97" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;Raises&lt;/b&gt;&lt;code&gt;Invalid_argument&lt;/code&gt; if &lt;code&gt;pos&lt;/code&gt; and &lt;code&gt;len&lt;/code&gt; do not designate a valid substring of &lt;code&gt;s&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="30765b5d780bde727478929a73175cb97b71b0f4" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;Raises&lt;/b&gt;&lt;code&gt;Invalid_argument&lt;/code&gt; if &lt;code&gt;src_pos&lt;/code&gt; and &lt;code&gt;len&lt;/code&gt; do not designate a valid range of &lt;code&gt;src&lt;/code&gt;, or if &lt;code&gt;dst_pos&lt;/code&gt; and &lt;code&gt;len&lt;/code&gt; do not designate a valid range of &lt;code&gt;dst&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f1b71a08c148bca001b68715c9d6f83c43c7b495" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;Raises&lt;/b&gt;&lt;code&gt;Invalid_argument&lt;/code&gt; if &lt;code&gt;src_pos&lt;/code&gt; and &lt;code&gt;len&lt;/code&gt; do not designate a valid subarray of &lt;code&gt;src&lt;/code&gt;, or if &lt;code&gt;dst_pos&lt;/code&gt; and &lt;code&gt;len&lt;/code&gt; do not designate a valid subarray of &lt;code&gt;dst&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="55e823dc0dbb7d7123664635c89a0a33d4d5f99e" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;Raises&lt;/b&gt;&lt;code&gt;Invalid_argument&lt;/code&gt; if &lt;code&gt;srcoff&lt;/code&gt; and &lt;code&gt;len&lt;/code&gt; do not designate a valid range of &lt;code&gt;b&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8975556e38daa8de369915d45db703775e011d3f" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;Raises&lt;/b&gt;&lt;code&gt;Invalid_argument&lt;/code&gt; if &lt;code&gt;srcoff&lt;/code&gt; and &lt;code&gt;len&lt;/code&gt; do not designate a valid range of &lt;code&gt;src&lt;/code&gt;, or if &lt;code&gt;dstoff&lt;/code&gt; and &lt;code&gt;len&lt;/code&gt; do not designate a valid range of &lt;code&gt;dst&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0c6cde9256dabea810974d056470a2af4966d437" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;Raises&lt;/b&gt;&lt;code&gt;Invalid_argument&lt;/code&gt; if &lt;code&gt;start&lt;/code&gt; and &lt;code&gt;len&lt;/code&gt; do not designate a valid range of &lt;code&gt;s&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e63c9efca18cc341e7cc8379608165e519606006" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;Raises&lt;/b&gt;&lt;code&gt;Invalid_argument&lt;/code&gt; if &lt;code&gt;start&lt;/code&gt; and &lt;code&gt;len&lt;/code&gt; do not designate a valid subarray of &lt;code&gt;a&lt;/code&gt;; that is, if &lt;code&gt;start&amp;nbsp;&amp;lt;&amp;nbsp;0&lt;/code&gt;, or &lt;code&gt;len&amp;nbsp;&amp;lt;&amp;nbsp;0&lt;/code&gt;, or &lt;code&gt;start&amp;nbsp;+&amp;nbsp;len&amp;nbsp;&amp;gt;&amp;nbsp;Array.length&amp;nbsp;a&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5d0bfb41027894550a6af128b0f8d2cc3afd108b" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;Raises&lt;/b&gt;&lt;code&gt;Invalid_argument&lt;/code&gt; if &lt;code&gt;start&lt;/code&gt; and &lt;code&gt;len&lt;/code&gt; do not designate a valid subarray of &lt;code&gt;a&lt;/code&gt;; that is, if &lt;code&gt;start&amp;nbsp;&amp;lt;&amp;nbsp;0&lt;/code&gt;, or &lt;code&gt;len&amp;nbsp;&amp;lt;&amp;nbsp;0&lt;/code&gt;, or &lt;code&gt;start&amp;nbsp;+&amp;nbsp;len&amp;nbsp;&amp;gt;&amp;nbsp;length&amp;nbsp;a&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="092025b1548c63901952020720502e1949ce22eb" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;Raises&lt;/b&gt;&lt;code&gt;Invalid_argument&lt;/code&gt; if &lt;code&gt;start&lt;/code&gt; and &lt;code&gt;len&lt;/code&gt; do not designate a valid substring of &lt;code&gt;s&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e2179e43f9055da4c045605caf9bf9890f073a00" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;Raises&lt;/b&gt;&lt;code&gt;Invalid_argument&lt;/code&gt; if &lt;code&gt;start&lt;/code&gt; is not a valid position in &lt;code&gt;s&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5daff4abee65541c46ffb54c460f0326197906a2" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;Raises&lt;/b&gt;&lt;code&gt;Invalid_argument&lt;/code&gt; if &lt;code&gt;stop&amp;nbsp;&amp;lt;&amp;nbsp;0&lt;/code&gt; or &lt;code&gt;stop+1&lt;/code&gt; is not a valid position in &lt;code&gt;s&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="30e7c1ec383e880d4527006384597ce05ae4ec27" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;Raises&lt;/b&gt;&lt;code&gt;Invalid_argument&lt;/code&gt; if &lt;code&gt;u&lt;/code&gt; does not satisfy &lt;a href=&quot;uchar#VALis_char&quot;&gt;&lt;code&gt;Uchar.is_char&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e606dd2b27a4e41af2de7d7df62b28426c1db6c8" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;Raises&lt;/b&gt;&lt;code&gt;Invalid_argument&lt;/code&gt; if &lt;code&gt;u&lt;/code&gt; is &lt;a href=&quot;uchar#VALmax&quot;&gt;&lt;code&gt;Uchar.max&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8396e46f79e679a83c81bb04fcc5fce4aebd5188" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;Raises&lt;/b&gt;&lt;code&gt;Invalid_argument&lt;/code&gt; if &lt;code&gt;u&lt;/code&gt; is &lt;a href=&quot;uchar#VALmin&quot;&gt;&lt;code&gt;Uchar.min&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0d3aec8a696c99d6bb1ac5b16d51e954685f5e9c" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;Raises&lt;/b&gt;&lt;code&gt;Invalid_argument&lt;/code&gt; if index out of bounds</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4301a79c4556cf3ebd80d4625fc46c715d5dff1c" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;Raises&lt;/b&gt;&lt;code&gt;Invalid_argument&lt;/code&gt; if len &amp;lt; 0.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b9ac5a4ead18fa04f427fd8c83ff784ffbb456f6" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;Raises&lt;/b&gt;&lt;code&gt;Invalid_argument&lt;/code&gt; if the argument is not exactly 16 bytes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ed94ff893a5a9d4aeb369b18783e23f1c32b1b0d" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;Raises&lt;/b&gt;&lt;code&gt;Invalid_argument&lt;/code&gt; if the argument is not exactly 32 hexadecimal characters.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="085cc9aa1ddd24c4349fe8409a14d1de891b5498" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;Raises&lt;/b&gt;&lt;code&gt;Invalid_argument&lt;/code&gt; if the argument is outside the range 0--255.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2a70c6ce83fee0bb9211accc950d4513ea359010" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;Raises&lt;/b&gt;&lt;code&gt;Invalid_argument&lt;/code&gt; if the array &lt;code&gt;a&lt;/code&gt; does not have exactly &lt;code&gt;N&lt;/code&gt; dimensions, or if the coordinates are outside the array bounds.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f8dc1443735490a032a507f4c454f48e617d7f62" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;Raises&lt;/b&gt;&lt;code&gt;Invalid_argument&lt;/code&gt; if the arrays are not the same size.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8d8463697465562ebe273965f201b11d24a2b0da" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;Raises&lt;/b&gt;&lt;code&gt;Invalid_argument&lt;/code&gt; if the floatarrays are not the same size.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="685c3dcbddee60550d191d00607511dce6bd4666" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;Raises&lt;/b&gt;&lt;code&gt;Invalid_argument&lt;/code&gt; if the generic Bigarray does not have exactly one dimension.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d8460c4c89173941e9e41a26547278927cb949b4" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;Raises&lt;/b&gt;&lt;code&gt;Invalid_argument&lt;/code&gt; if the generic Bigarray does not have exactly three dimensions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9e53b9dbcd93c41edeaa3e372c462e2e0e0e27a5" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;Raises&lt;/b&gt;&lt;code&gt;Invalid_argument&lt;/code&gt; if the generic Bigarray does not have exactly two dimensions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c4ff083e657348b451f8063239fda0f793096627" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;Raises&lt;/b&gt;&lt;code&gt;Invalid_argument&lt;/code&gt; if the generic Bigarray does not have exactly zero dimension.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e75238bbad2dfb9bc6d65e5353d94dea858c24e5" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;Raises&lt;/b&gt;&lt;code&gt;Invalid_argument&lt;/code&gt; if the length of &lt;code&gt;l&lt;/code&gt; is greater than &lt;code&gt;Sys.max_array_length&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a696c413e8a2bdc93caeb7c7b640e5bbec61d2a2" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;Raises&lt;/b&gt;&lt;code&gt;Invalid_argument&lt;/code&gt; if the length of &lt;code&gt;l&lt;/code&gt; is greater than &lt;code&gt;Sys.max_floatarray_length&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6e211de6ac725cd9012671f68392b27cc9df2e02" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;Raises&lt;/b&gt;&lt;code&gt;Invalid_argument&lt;/code&gt; if the result is longer than &lt;a href=&quot;sys#VALmax_string_length&quot;&gt;&lt;code&gt;Sys.max_string_length&lt;/code&gt;&lt;/a&gt; bytes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4cc560177a7d9b21c2bfaf648fc926e6beeb9399" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;Raises&lt;/b&gt;&lt;code&gt;Invalid_argument&lt;/code&gt; if the result is longer than &lt;a href=&quot;sys#VALmax_string_length&quot;&gt;&lt;code&gt;Sys.max_string_length&lt;/code&gt;&lt;/a&gt; bytes. The function &lt;a href=&quot;scanf#VALunescaped&quot;&gt;&lt;code&gt;Scanf.unescaped&lt;/code&gt;&lt;/a&gt; is a left inverse of &lt;code&gt;escaped&lt;/code&gt;, i.e. &lt;code&gt;Scanf.unescaped&amp;nbsp;(escaped&amp;nbsp;s)&amp;nbsp;=&amp;nbsp;s&lt;/code&gt; for any string &lt;code&gt;s&lt;/code&gt; (unless &lt;code&gt;escape&amp;nbsp;s&lt;/code&gt; fails).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f58e2e12046c920b0410b51bb2590f9e4eff71f4" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;Raises&lt;/b&gt;&lt;code&gt;Invalid_argument&lt;/code&gt; if the result length is negative or longer than &lt;a href=&quot;sys#VALmax_string_length&quot;&gt;&lt;code&gt;Sys.max_string_length&lt;/code&gt;&lt;/a&gt; bytes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="81c12330994b3cbe9423f3a39d94a6f30edb8984" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;Raises&lt;/b&gt;&lt;code&gt;Invalid_argument&lt;/code&gt; if the two arrays have different lengths.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e566ed8f9472c34a87939e34c41dfa34f586edd3" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;Raises&lt;/b&gt;&lt;code&gt;Invalid_argument&lt;/code&gt; if the two lists are determined to have different lengths.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9fa1510901b09ee60986872d6def186772153092" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;Raises&lt;/b&gt;&lt;code&gt;Invalid_argument&lt;/code&gt; if the two lists are determined to have different lengths. Not tail-recursive.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="229818d0278dac08151b27ed16fb0fc60ffe4daf" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;Raises&lt;/b&gt;&lt;code&gt;Invalid_argument&lt;/code&gt; if the two lists have different lengths. Not tail-recursive.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="99e1434d2c6b40842dc2b6c7291fd549972edfa7" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;Raises&lt;/b&gt;&lt;code&gt;Invalid_argument&lt;/code&gt; otherwise.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a1398ba9a2ccaeb607a99ceeff0c11f5957e9cbc" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;Raises&lt;/b&gt;&lt;code&gt;Not_found&lt;/code&gt; if &lt;code&gt;c&lt;/code&gt; does not occur in &lt;code&gt;s&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c553b64e4bc20ccca4e59181f3f88bea6d0dd28a" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;Raises&lt;/b&gt;&lt;code&gt;Not_found&lt;/code&gt; if an error occurs.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f0ba53212a286b9cd1a85851291c7bf7655980a6" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;Raises&lt;/b&gt;&lt;code&gt;Not_found&lt;/code&gt; if no substring matches.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c73080c3dbda3f50f6efc4e15673ab25528a6821" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;Raises&lt;/b&gt;&lt;code&gt;Not_found&lt;/code&gt; if no such entry exist.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7ee898f34b5b62e47017fb89cc9452bd9da5103b" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;Raises&lt;/b&gt;&lt;code&gt;Not_found&lt;/code&gt; if no such entry exist. On Windows, always raise &lt;code&gt;Not_found&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0670e3f70dc70d09545ae3368f696adde1d668fa" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;Raises&lt;/b&gt;&lt;code&gt;Not_found&lt;/code&gt; if no such entry exists, or always on Windows.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ed78e2dc3d3614abdbc789fb7ce2593f541df85a" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;Raises&lt;/b&gt;&lt;code&gt;Not_found&lt;/code&gt; if no such entry exists.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7353781c8138d77b03633f0b8df4e0996283b25f" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;Raises&lt;/b&gt;&lt;code&gt;Not_found&lt;/code&gt; if the &lt;code&gt;n&lt;/code&gt;th group of the regular expression was not matched. This can happen with groups inside alternatives &lt;code&gt;\|&lt;/code&gt;, options &lt;code&gt;?&lt;/code&gt; or repetitions &lt;code&gt;*&lt;/code&gt;. For instance, the empty string will match &lt;code&gt;\(a\)*&lt;/code&gt;, but &lt;code&gt;matched_group&amp;nbsp;1&amp;nbsp;&quot;&quot;&lt;/code&gt; will raise &lt;code&gt;Not_found&lt;/code&gt; because the first group itself was not matched.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c4590ec927a1f8c977c24d5bef792d86e3b674ad" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;Raises&lt;/b&gt;&lt;code&gt;Not_found&lt;/code&gt; if the closing character of a parenthesized variable cannot be found.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9bb881b7deddbd9148508c9726757cc3c978255e" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;Raises&lt;/b&gt;&lt;code&gt;Not_found&lt;/code&gt; if the variable is unbound or the process has special privileges. (This function is identical to &lt;a href=&quot;sys#VALgetenv&quot;&gt;&lt;code&gt;Sys.getenv&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="263905929929185c2865843c450e0bc856790ffd" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;Raises&lt;/b&gt;&lt;code&gt;Not_found&lt;/code&gt; if the variable is unbound or the process has special privileges. This function is identical to &lt;a href=&quot;sys#VALgetenv&quot;&gt;&lt;code&gt;Sys.getenv&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="46cf757196d16f0e5b1dbe6d1d1296f3f28ed153" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;Raises&lt;/b&gt;&lt;code&gt;Not_found&lt;/code&gt; if the variable is unbound.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ad3c0d4a8f3c025ac8b37c07f8eb410f4953021c" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;Raises&lt;/b&gt;&lt;code&gt;Not_found&lt;/code&gt; if there is no such element.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4aed43d615cdd1b9093ad22ed79821b46037875f" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;Raises&lt;/b&gt;&lt;code&gt;Not_found&lt;/code&gt; if there is no value associated with &lt;code&gt;a&lt;/code&gt; in the list &lt;code&gt;l&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bbe4625cce9be4a65dc32b739fd4d0c580eaca23" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;Raises&lt;/b&gt;&lt;code&gt;Not_found&lt;/code&gt; if there is no value that satisfies &lt;code&gt;f&lt;/code&gt; in the list &lt;code&gt;l&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4f73ce35c13c03b044d23abcd31b8b3384024ebb" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;Raises&lt;/b&gt;&lt;code&gt;Not_found&lt;/code&gt; if there is no value that satisfies &lt;code&gt;p&lt;/code&gt; in the list &lt;code&gt;l&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a931ccdcde93d79e58192b85de88d0977e26996e" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;Raises&lt;/b&gt;&lt;code&gt;Scan_failure&lt;/code&gt; if &lt;code&gt;s&lt;/code&gt; is not properly escaped (i.e. &lt;code&gt;s&lt;/code&gt; has invalid escape sequences or special characters that are not properly escaped). For instance, &lt;code&gt;Scanf.unescaped&amp;nbsp;&quot;\&quot;&quot;&lt;/code&gt; will fail.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1712c4612adc9c721756ea0b2fd83b703ed148c2" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;Raises&lt;/b&gt;&lt;code&gt;Scan_failure&lt;/code&gt; if &lt;code&gt;s&lt;/code&gt;, considered as a format string, does not have the same type as &lt;code&gt;fmt&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1c06078307205618922665482714679d01198e51" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;Raises&lt;/b&gt;&lt;code&gt;Scan_failure&lt;/code&gt; if the format string value read does not have the same type as &lt;code&gt;fmt&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="03a0b0d33eac09639c22f2f3fa1b865fa8644d91" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;Raises&lt;/b&gt;&lt;code&gt;Stream.Failure&lt;/code&gt; if the stream is empty.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="44b655ef00fff7139f6d6aab9cb9bbff669bbd9d" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;Raises&lt;/b&gt;&lt;code&gt;Sys_error&lt;/code&gt; if no file exists with the given name.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="929394237656697f1865ec5ea3720e91583cd242" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;Raises&lt;/b&gt;&lt;code&gt;Sys_error&lt;/code&gt; if the file could not be created.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f8ee87166dee12babcaf7d5f83c097e4fe497f1c" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;Raises&lt;/b&gt;&lt;code&gt;Sys_error&lt;/code&gt; if the file could not be opened.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="68b4eb84ddc00ca9661f1740a2ad2c23d78280e0" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;Raises&lt;/b&gt;&lt;code&gt;Sys_error&lt;/code&gt; if the mutex is already locked by the thread calling &lt;a href=&quot;mutex#VALlock&quot;&gt;&lt;code&gt;Mutex.lock&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e075d12772b57511f465ec1d936db8a26c6967c1" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;Raises&lt;/b&gt;&lt;code&gt;Sys_error&lt;/code&gt; if the mutex is unlocked or was locked by another thread.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6debd972500ada23b42be2471c4ba0a8a405d722" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;Raises&lt;/b&gt;&lt;code&gt;Sys_error&lt;/code&gt; if the value of the semaphore would overflow &lt;code&gt;max_int&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="48df35d048fcbc164a2daecebf367ccc06de5d92" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;Raises&lt;/b&gt;&lt;code&gt;Undefined&lt;/code&gt; if the forcing of &lt;code&gt;x&lt;/code&gt; tries to force &lt;code&gt;x&lt;/code&gt; itself recursively.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8d4b9ea70538f2a7b4dadf323b579bea0dd4772b" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;Raises&lt;/b&gt;&lt;code&gt;Unix.Unix_error&lt;/code&gt; on failure.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b3a20b8cba1c6aaa03aa46227f14d01e4736dbe4" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;Raises&lt;/b&gt;&lt;code&gt;Unix_error&lt;/code&gt; on failure</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="51def8c5767ef0d9a07deccf84207e073c03d8f6" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;Raises&lt;/b&gt;&lt;code&gt;Unix_error&lt;/code&gt; otherwise.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="836a7e726e689de09f722a8f7abde4fcebec1544" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;Raises&lt;/b&gt;&lt;code&gt;Unix_error&lt;/code&gt; otherwise. On Windows, execute permission &lt;code&gt;X_OK&lt;/code&gt;, cannot be tested, it just tests for read permission instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fe749bd484749d9087ccb17dd1759e7235cff7be" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;Since&lt;/b&gt; 3.09.0</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e196a9ab092ffe3ef287af290796339506ec38ac" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;Since&lt;/b&gt; 3.09.1</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="facfd1fdbd6c3f9d795defb7076e37a978e56f07" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;Since&lt;/b&gt; 3.10.0</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="532110c6703915ca148e05d77296f985bdcb9185" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;Since&lt;/b&gt; 3.11.0</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dcabba0e2bcfac114cd54b53a645b29cf7814612" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;Since&lt;/b&gt; 3.11.2</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="749f3095cb277081a927d6821a0eb07e4c0582ab" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;Since&lt;/b&gt; 3.12.0</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f6c3649380c9a202f93c2c59c423ec7ee559f821" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;Since&lt;/b&gt; 4.00.0</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="78c622c219aa8e52d1d071b6476c7ce3d92ae35a" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;Since&lt;/b&gt; 4.01</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cb19c1e29e92c358ffcb8c0b632e084f3f2d8209" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;Since&lt;/b&gt; 4.01.0</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5ecaa4c6a03818ec8acbf4337dde220a7c6fbe8d" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;Since&lt;/b&gt; 4.02</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b82ac91cdee47a240d3b47567af3aee580a0891c" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;Since&lt;/b&gt; 4.02.0</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d59e54a93576209072a164b14344b32e9a55fa30" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;Since&lt;/b&gt; 4.02.0 (4.03.0 in ListLabels)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="39021aade679fd287746881615990d4a12644a18" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;Since&lt;/b&gt; 4.02.0 This module is intended to be used through {!StdLabels} which replaces {!Array}, {!Bytes}, {!List} and {!String} with their labeled counterparts. For example: {[ open StdLabels let first = Bytes.sub ~pos:0 ~len:1 ]}</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4997da0523482380673f53dac99c90661df35a5a" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;Since&lt;/b&gt; 4.03</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="573a9e2f5f4b7ac0e13ac87ad1e27bd55091c111" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;Since&lt;/b&gt; 4.03.0</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8a81a36147257ff659b1139727d0116adf87dc54" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;Since&lt;/b&gt; 4.03.0 (4.05.0 in ArrayLabels)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3b23cf32771d08db4dbb82a250a7dfc29694b19a" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;Since&lt;/b&gt; 4.03.0 (4.05.0 in BytesLabels)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="51dc04367188cd2cfeb37d4a1ed1bbb7d7d443bd" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;Since&lt;/b&gt; 4.03.0 (4.05.0 in ListLabels)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="727f39b6d73d6be265f503b2a99c4d520b68c3ff" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;Since&lt;/b&gt; 4.03.0 (4.05.0 in StringLabels)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3c5a9a3fbf7c449bfa179a496e457a488d920dba" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;Since&lt;/b&gt; 4.03.0 (4.12.0 in UnixLabels)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="87c08074712b9f5695c11f090d0193cdc457d809" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;Since&lt;/b&gt; 4.04</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7ce3b1a31d9086d98b9f3e3b8d1858563b782fea" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;Since&lt;/b&gt; 4.04.0</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="795d67f1de14f559ca0f84e4d6cc62388d2903f6" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;Since&lt;/b&gt; 4.04.0 (4.05.0 in StringLabels)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="15ea5e6d70f57463e6285878a1d26d4a521fb45f" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;Since&lt;/b&gt; 4.05</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c9f8c582e53d9efbe0ded279701649b7cdefb902" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;Since&lt;/b&gt; 4.05.0</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8b84db96f1399db2b1697b1c96affbaf344f1657" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;Since&lt;/b&gt; 4.05.0 in BytesLabels</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="184e8cd46924cc15674f5722f6f8fde5ba7cea3f" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;Since&lt;/b&gt; 4.06 concerning the &quot;replace existing file&quot; behavior</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="841ca76184b862dd0e112e8604864448f55921c5" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;Since&lt;/b&gt; 4.06.0</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="737f7746f21fad513ea2004f541fbc5ac8f9c63a" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;Since&lt;/b&gt; 4.06.0 (4.12.0 in UnixLabels)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bb83aff717b2adaf83d46dd1062a169ef1e0fa23" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;Since&lt;/b&gt; 4.07</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="073a9b2d04f83b432dd6658fea77f51f2f4ef9d9" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;Since&lt;/b&gt; 4.07.0</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0b6a1600e5b0ec42fe96d29fc9c62ce925188f2e" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;Since&lt;/b&gt; 4.08</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="65305a190e5195a2b986dee434f113dcb48eac33" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;Since&lt;/b&gt; 4.08.0</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="40d4099c5172ab6c800357d878fe716a601b4f8f" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;Since&lt;/b&gt; 4.08.0 (4.12.0 in UnixLabels)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="641d5d33db91a7e64fbb5b4ceaaec03f6e1fceaf" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;Since&lt;/b&gt; 4.09</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3514eacac8236782b7b36a4abd1bf82dbab94779" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;Since&lt;/b&gt; 4.10.0</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0446a280ccb5005a1c5b348f3290993f29e1a3d1" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;Since&lt;/b&gt; 4.11</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bbfc471999179fd2bfaf0562d8fc83fe600abb07" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;Since&lt;/b&gt; 4.11.0</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4762ad005916333d3c8472bb8ad7eebeeda787b6" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;Since&lt;/b&gt; 4.12</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3a6dc9cfb566c01f12142d36da55994a52e7a7cb" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;Since&lt;/b&gt; 4.12.0</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="de5cdac89acb5759b44f150aaea3a7b3c6389d06" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;Unicode text.&lt;/b&gt; Strings being arbitrary sequences of bytes, they can hold any kind of textual encoding. However the recommended encoding for storing Unicode text in OCaml strings is UTF-8. This is the encoding used by Unicode escapes in string literals. For example the string &lt;code&gt;&quot;\u{1F42B}&quot;&lt;/code&gt; is the UTF-8 encoding of the Unicode character U+1F42B.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="79da46e8e61cf3b04f38408d30541aca79de3950" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;Warning&lt;/b&gt; This module is not thread-safe: each &lt;a href=&quot;queue#TYPEt&quot;&gt;&lt;code&gt;Queue.t&lt;/code&gt;&lt;/a&gt; value must be protected from concurrent access (e.g. with a &lt;code&gt;Mutex.t&lt;/code&gt;). Failure to do so can lead to a crash.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="16152a19b5b61b71cd531c31e02cbce96c95cae7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;!&lt;/code&gt;: matches the end of input condition.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="470b6291e8198054962a17386fb1faf334db20a5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;!&lt;/code&gt;: take no argument and flush the output.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="677e0df132fe6f5249441a4fe8f3cbc8f4a25ff6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;!r&lt;/code&gt; returns the current contents of reference &lt;code&gt;r&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3ed783a1ed7a857f04481bdf3273c0ee23dfebe6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;!r&lt;/code&gt; returns the current contents of reference &lt;code&gt;r&lt;/code&gt;. Equivalent to &lt;code&gt;fun&amp;nbsp;r&amp;nbsp;-&amp;gt;&amp;nbsp;r.contents&lt;/code&gt;. Unary operator, see &lt;a href=&quot;ocaml_operators&quot;&gt;&lt;code&gt;Ocaml_operators&lt;/code&gt;&lt;/a&gt; for more information.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="406b5e2aad52b2a035d8a450783ee2568bb15541" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&quot;Cygwin&quot;&lt;/code&gt; (for MS-Windows, OCaml compiled with Cygwin).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="722a1b4e845813521d0d1f04394dcf347188e67d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&quot;Unix&quot;&lt;/code&gt; (for all Unix versions, including Linux and Mac OS X),</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3e11944898551750091686e9c23220119d9be2b9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&quot;Win32&quot;&lt;/code&gt; (for MS-Windows, OCaml compiled with MSVC++ or Mingw),</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="37a91784aaab453c723f3e2bfbd66fbd84a0a2b9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;#&lt;/code&gt;: request an alternate formatting style for the integer types and the floating-point type &lt;code&gt;F&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a487fbd7fffa66999106ee7af43015db953cb51f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;$&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/code&gt; Matches at end of line: either at the end of the matched string, or just before a '\n' character.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4b3e8c0b37c1e59643b85d26f6f2ef6a39af3857" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;%&lt;/code&gt;: matches one &lt;code&gt;%&lt;/code&gt; character in the input.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="34aa159563c647d34b9fd5928cc5a470590bd27f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;%&lt;/code&gt;: take no argument and output one &lt;code&gt;%&lt;/code&gt; character.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2aa7a6fae21e411e46a786957c3757d2d6311db7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;'a&lt;/code&gt; is the type of the parameters of the format for formatted output functions (&lt;code&gt;printf&lt;/code&gt;-style functions); &lt;code&gt;'a&lt;/code&gt; is the type of the values read by the format for formatted input functions (&lt;code&gt;scanf&lt;/code&gt;-style functions).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b3c765d36fdcbb4f0e91020109400fe312444d93" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;'b&lt;/code&gt; is the type of input source for formatted input functions and the type of output target for formatted output functions. For &lt;code&gt;printf&lt;/code&gt;-style functions from module &lt;a href=&quot;printf&quot;&gt;&lt;code&gt;Printf&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;'b&lt;/code&gt; is typically &lt;code&gt;out_channel&lt;/code&gt;; for &lt;code&gt;printf&lt;/code&gt;-style functions from module &lt;a href=&quot;format&quot;&gt;&lt;code&gt;Format&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;'b&lt;/code&gt; is typically &lt;a href=&quot;format#TYPEformatter&quot;&gt;&lt;code&gt;Format.formatter&lt;/code&gt;&lt;/a&gt;; for &lt;code&gt;scanf&lt;/code&gt;-style functions from module &lt;a href=&quot;scanf&quot;&gt;&lt;code&gt;Scanf&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;'b&lt;/code&gt; is typically &lt;a href=&quot;scanf.scanning#TYPEin_channel&quot;&gt;&lt;code&gt;Scanf.Scanning.in_channel&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9fc9e4f9fd7bdab2d369a009521e2837b1f308fe" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;'c&lt;/code&gt; is the type of the result of the &lt;code&gt;%a&lt;/code&gt; and &lt;code&gt;%t&lt;/code&gt; printing functions, and also the type of the argument transmitted to the first argument of &lt;code&gt;kprintf&lt;/code&gt;-style functions or to the &lt;code&gt;kscanf&lt;/code&gt;-style functions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="96fa4ea33405acfbaae4958bcc2cf7977d23d9c7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;'d&lt;/code&gt; is the type of parameters for the &lt;code&gt;scanf&lt;/code&gt;-style functions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="12a7967bcbd5abcde31a651cbcba154f619c8067" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;'e&lt;/code&gt; is the type of the receiver function for the &lt;code&gt;scanf&lt;/code&gt;-style functions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b6c7c57f7cba019ee9efa528a8be5a9c35baf59f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;'f&lt;/code&gt; is the final result type of a formatted input/output function invocation: for the &lt;code&gt;printf&lt;/code&gt;-style functions, it is typically &lt;code&gt;unit&lt;/code&gt;; for the &lt;code&gt;scanf&lt;/code&gt;-style functions, it is typically the result type of the receiver function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dd3395274c3ba892d97688c745502c5912d6f25c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;(&amp;nbsp;fmt&amp;nbsp;%)&lt;/code&gt;: format string substitution. Take a format string argument and substitute it to the internal format string &lt;code&gt;fmt&lt;/code&gt; to print following arguments. The argument must have the same type as the internal format string &lt;code&gt;fmt&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c777c6797d0b89f6d6f29a1b35f52403bcf93f30" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;(&amp;nbsp;fmt&amp;nbsp;%)&lt;/code&gt;: scanning sub-format substitution. Reads a format string &lt;code&gt;rf&lt;/code&gt; in the input, then goes on scanning with &lt;code&gt;rf&lt;/code&gt; instead of scanning with &lt;code&gt;fmt&lt;/code&gt;. The format string &lt;code&gt;rf&lt;/code&gt; must have the same type as the format string specification &lt;code&gt;fmt&lt;/code&gt; that it replaces. For instance, &lt;code&gt;&quot;%(&amp;nbsp;%i&amp;nbsp;%)&quot;&lt;/code&gt; reads any format string that can read a value of type &lt;code&gt;int&lt;/code&gt;. The conversion returns the format string read &lt;code&gt;rf&lt;/code&gt;, and then a value read using &lt;code&gt;rf&lt;/code&gt;. Hence, if &lt;code&gt;s&lt;/code&gt; is the string &lt;code&gt;&quot;\&quot;%4d\&quot;1234.00&quot;&lt;/code&gt;, then &lt;code&gt;Scanf.sscanf&amp;nbsp;s&amp;nbsp;&quot;%(%i%)&quot;&amp;nbsp;(fun&amp;nbsp;fmt&amp;nbsp;i&amp;nbsp;-&amp;gt;&amp;nbsp;fmt,&amp;nbsp;i)&lt;/code&gt; evaluates to &lt;code&gt;(&quot;%4d&quot;,&amp;nbsp;1234)&lt;/code&gt;. This behaviour is not mere format substitution, since the conversion returns the format string read as additional argument. If you need pure format substitution, use special flag &lt;code&gt;_&lt;/code&gt; to discard the extraneous argument: conversion &lt;code&gt;%_(&amp;nbsp;fmt&amp;nbsp;%)&lt;/code&gt; reads a format string &lt;code&gt;rf&lt;/code&gt; and then behaves the same as format string &lt;code&gt;rf&lt;/code&gt;. Hence, if &lt;code&gt;s&lt;/code&gt; is the string &lt;code&gt;&quot;\&quot;%4d\&quot;1234.00&quot;&lt;/code&gt;, then &lt;code&gt;Scanf.sscanf&amp;nbsp;s&amp;nbsp;&quot;%_(%i%)&quot;&lt;/code&gt; is simply equivalent to &lt;code&gt;Scanf.sscanf&amp;nbsp;&quot;1234.00&quot;&amp;nbsp;&quot;%4d&quot;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a2015965f04c809ffcdd226df6619a346323aacd" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;(Marshal.from_channel&amp;nbsp;chan&amp;nbsp;:&amp;nbsp;type)&lt;/code&gt;. Anything can happen at run-time if the object in the file does not belong to the given type.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0f8be6062bcf0e8e0b1c3f0d39a44b7535181ea3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;*&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/code&gt; (postfix) Matches the preceding expression zero, one or several times</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="16d799a7d0ca56584ad83c99606377eb9a8e6d38" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;+&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/code&gt; (postfix) Matches the preceding expression one or several times</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="96f8cf186b2375f4e4bbf36fea79e2eb3661568c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;+&lt;/code&gt;: for signed numerical conversions, prefix number with a &lt;code&gt;+&lt;/code&gt; sign if positive.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="db9bbfac8fafca46f9e65407052427761f16ef7a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;,&lt;/code&gt;: does nothing.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c5670914bb460701c6f26747f97590ac4687fc9f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;,&lt;/code&gt;: take no argument and output nothing: a no-op delimiter for conversion specifications.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="319149f960c84eb7f486f6aecfa39375acc86264" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;-&lt;/code&gt;: left-justify the output (default is right justification).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="56c8f37fc40a1537df9331dd6b71a6c61509eadc" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;.&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/code&gt; Matches any character except newline.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="baf8c61553c8f2e35caec3119a4281ce7eceb035" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;0&lt;/code&gt;: for numerical conversions, pad with zeroes instead of spaces.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="af4938f6b5f764712f8b3423a51460608a8b24e2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;0x001&lt;/code&gt; Start and end of major GC cycle.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="736b26adc09eca2af7bce7fb643c713228242cf7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;0x001&lt;/code&gt; Start of major GC cycle.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a7d2218a7136cb576aaeab4fe210d02958cca3e4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;0x002&lt;/code&gt; Minor collection and major GC slice.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4c7f6db724d9110ba23afec6c22fb874e92be131" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;0x004&lt;/code&gt; Growing and shrinking of the heap.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d7b3c8c5aec88bcb84951b87b3bba3ff5b07e1c1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;0x008&lt;/code&gt; Resizing of stacks and memory manager tables.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="449e7443845ac19fe61ce98bcee578fd0995d4e3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;0x010&lt;/code&gt; Heap compaction.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f36443d4645fafac6ae55f54f41f72132cefc3ec" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;0x020&lt;/code&gt; Change of GC parameters.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3164e3568fe9c5e2a5ee5cf74eb0515d98c737c1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;0x040&lt;/code&gt; Computation of major GC slice size.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="536c42216c36bb278ca2ad928968f1c197f48451" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;0x080&lt;/code&gt; Calling of finalisation functions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c616b100e3e7f1a1949904462cb30f7e6f015f30" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;0x100&lt;/code&gt; Bytecode executable and shared library search at start-up.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dcfc3c676f2bca297a8a13dfe30ea00829b59624" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;0x200&lt;/code&gt; Computation of compaction-triggering condition.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5915207f558c397332c82a3c095cb1e09223d1b4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;0x400&lt;/code&gt; Output GC statistics at program exit. Default: 0.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4b7da410f1b4de88c01fb2b09f9f0171c768b52f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;?&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/code&gt; (postfix) Matches the preceding expression once or not at all</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="98455b028146e98f5c3d34c9178be42b3332389c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;@&amp;lt;n&amp;gt;&lt;/code&gt;: print the following item as if it were of length &lt;code&gt;n&lt;/code&gt;. Hence, &lt;code&gt;printf&amp;nbsp;&quot;@&amp;lt;0&amp;gt;%s&quot;&amp;nbsp;arg&lt;/code&gt; prints &lt;code&gt;arg&lt;/code&gt; as a zero length string. If &lt;code&gt;@&amp;lt;n&amp;gt;&lt;/code&gt; is not followed by a conversion specification, then the following character of the format is printed as if it were of length &lt;code&gt;n&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bf8f4cd808eddd190f436452077023d584d7e70a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;@&amp;nbsp;&lt;/code&gt;: output a 'space' break hint, as with &lt;code&gt;print_space&amp;nbsp;()&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="34644b8ad78e94bcc01c0a82a7fec4394986ef06" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;@,&lt;/code&gt;: output a 'cut' break hint, as with &lt;code&gt;print_cut&amp;nbsp;()&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6110e08a502bb9991e939e3b5bb19987415ca80c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;@.&lt;/code&gt;: flush the pretty-printer and split the line, as with &lt;code&gt;print_newline&amp;nbsp;()&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f877fdb24ac05bcd9ef3bf0fb0f7e38dffe83720" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;@;&lt;/code&gt;: output a 'full' break hint as with &lt;code&gt;print_break&lt;/code&gt;. The &lt;code&gt;nspaces&lt;/code&gt; and &lt;code&gt;offset&lt;/code&gt; parameters of the break hint may be optionally specified with the following syntax: the &lt;code&gt;&amp;lt;&lt;/code&gt; character, followed by an integer &lt;code&gt;nspaces&lt;/code&gt; value, then an integer &lt;code&gt;offset&lt;/code&gt;, and a closing &lt;code&gt;&amp;gt;&lt;/code&gt; character. If no parameters are provided, the good break defaults to a 'space' break hint.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7012c1beb84eea00f69e44c89d895baa681ac712" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;@&lt;/code&gt;: matches one &lt;code&gt;@&lt;/code&gt; character in the input.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e0fd225153a0730246be71e9eb8070ec7112d392" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;@&lt;/code&gt;: take no argument and output one &lt;code&gt;@&lt;/code&gt; character.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="41aa829c4f8aab9490498f3abde4cfb26cc686a0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;@?&lt;/code&gt;: flush the pretty-printer as with &lt;code&gt;print_flush&amp;nbsp;()&lt;/code&gt;. This is equivalent to the conversion &lt;code&gt;%!&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b5159b684a5e056b8ce0ac4e71e5a2ef7e781c03" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;@[&lt;/code&gt;: open a pretty-printing box. The type and offset of the box may be optionally specified with the following syntax: the &lt;code&gt;&amp;lt;&lt;/code&gt; character, followed by an optional box type indication, then an optional integer offset, and the closing &lt;code&gt;&amp;gt;&lt;/code&gt; character. Pretty-printing box type is one of &lt;code&gt;h&lt;/code&gt;, &lt;code&gt;v&lt;/code&gt;, &lt;code&gt;hv&lt;/code&gt;, &lt;code&gt;b&lt;/code&gt;, or &lt;code&gt;hov&lt;/code&gt;. '&lt;code&gt;h&lt;/code&gt;' stands for an 'horizontal' pretty-printing box, '&lt;code&gt;v&lt;/code&gt;' stands for a 'vertical' pretty-printing box, '&lt;code&gt;hv&lt;/code&gt;' stands for an 'horizontal/vertical' pretty-printing box, '&lt;code&gt;b&lt;/code&gt;' stands for an 'horizontal-or-vertical' pretty-printing box demonstrating indentation, '&lt;code&gt;hov&lt;/code&gt;' stands a simple 'horizontal-or-vertical' pretty-printing box. For instance, &lt;code&gt;@[&amp;lt;hov&amp;nbsp;2&amp;gt;&lt;/code&gt; opens an 'horizontal-or-vertical' pretty-printing box with indentation 2 as obtained with &lt;code&gt;open_hovbox&amp;nbsp;2&lt;/code&gt;. For more details about pretty-printing boxes, see the various box opening functions &lt;code&gt;open_*box&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="853d56865386120561a45e54463282156b1a9e0f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;@\n&lt;/code&gt;: force a newline, as with &lt;code&gt;force_newline&amp;nbsp;()&lt;/code&gt;, not the normal way of pretty-printing, you should prefer using break hints inside a vertical pretty-printing box.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7c8c8cd8f5675ac4babb643a7c2ba7c8d475ef63" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;@]&lt;/code&gt;: close the most recently opened pretty-printing box.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="307790cb02ede6f2d2a0c2720ffde197b9c8fba1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;@{&lt;/code&gt;: open a semantic tag. The name of the tag may be optionally specified with the following syntax: the &lt;code&gt;&amp;lt;&lt;/code&gt; character, followed by an optional string specification, and the closing &lt;code&gt;&amp;gt;&lt;/code&gt; character. The string specification is any character string that does not contain the closing character &lt;code&gt;'&amp;gt;'&lt;/code&gt;. If omitted, the tag name defaults to the empty string. For more details about semantic tags, see the functions &lt;a href=&quot;format#VALopen_stag&quot;&gt;&lt;code&gt;Format.open_stag&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;format#VALclose_stag&quot;&gt;&lt;code&gt;Format.close_stag&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3484c6868e39f3e479ef2889e4fa40c3f711fdd2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;@}&lt;/code&gt;: close the most recently opened semantic tag.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0de509cd2b29924c065a886c8ee9da18c2371035" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Arg.parse&amp;nbsp;speclist&amp;nbsp;anon_fun&amp;nbsp;usage_msg&lt;/code&gt; parses the command line.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f7437c9997ff136fe8083dbdf0c46295d5e848ad" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Arg.parse&amp;nbsp;speclist&amp;nbsp;anon_fun&amp;nbsp;usage_msg&lt;/code&gt; parses the command line. &lt;code&gt;speclist&lt;/code&gt; is a list of triples &lt;code&gt;(key,&amp;nbsp;spec,&amp;nbsp;doc)&lt;/code&gt;. &lt;code&gt;key&lt;/code&gt; is the option keyword, it must start with a &lt;code&gt;'-'&lt;/code&gt; character. &lt;code&gt;spec&lt;/code&gt; gives the option type and the function to call when this option is found on the command line. &lt;code&gt;doc&lt;/code&gt; is a one-line description of this option. &lt;code&gt;anon_fun&lt;/code&gt; is called on anonymous arguments. The functions in &lt;code&gt;spec&lt;/code&gt; and &lt;code&gt;anon_fun&lt;/code&gt; are called in the same order as their arguments appear on the command line.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="544a88577472876c72a105b98dd550e7e7125f75" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Arg.parse_argv&amp;nbsp;~current&amp;nbsp;args&amp;nbsp;speclist&amp;nbsp;anon_fun&amp;nbsp;usage_msg&lt;/code&gt; parses the array &lt;code&gt;args&lt;/code&gt; as if it were the command line.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="814e3a121b7d044966b50feede774e4ddca697a1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Arg.parse_argv&amp;nbsp;~current&amp;nbsp;args&amp;nbsp;speclist&amp;nbsp;anon_fun&amp;nbsp;usage_msg&lt;/code&gt; parses the array &lt;code&gt;args&lt;/code&gt; as if it were the command line. It uses and updates the value of &lt;code&gt;~current&lt;/code&gt; (if given), or &lt;a href=&quot;arg#VALcurrent&quot;&gt;&lt;code&gt;Arg.current&lt;/code&gt;&lt;/a&gt;. You must set it before calling &lt;code&gt;parse_argv&lt;/code&gt;. The initial value of &lt;code&gt;current&lt;/code&gt; is the index of the program name (argument 0) in the array. If an error occurs, &lt;code&gt;Arg.parse_argv&lt;/code&gt; raises &lt;a href=&quot;arg#EXCEPTIONBad&quot;&gt;&lt;code&gt;Arg.Bad&lt;/code&gt;&lt;/a&gt; with the error message as argument. If option &lt;code&gt;-help&lt;/code&gt; or &lt;code&gt;--help&lt;/code&gt; is given, &lt;code&gt;Arg.parse_argv&lt;/code&gt; raises &lt;a href=&quot;arg#EXCEPTIONHelp&quot;&gt;&lt;code&gt;Arg.Help&lt;/code&gt;&lt;/a&gt; with the help message as argument.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5e40593d03e3a99fd6b979c2e7d3cfdba185b55e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Arg.read_arg&amp;nbsp;file&lt;/code&gt; reads newline-terminated command line arguments from file &lt;code&gt;file&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a8b00933dd5825a001064a9df8b73e7d14570fe5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Arg.usage&amp;nbsp;speclist&amp;nbsp;usage_msg&lt;/code&gt; prints to standard error an error message that includes the list of valid options.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="16d62a4e1275b4738b5a022b3b1c7f3b7505fd2b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Arg.usage&amp;nbsp;speclist&amp;nbsp;usage_msg&lt;/code&gt; prints to standard error an error message that includes the list of valid options. This is the same message that &lt;a href=&quot;arg#VALparse&quot;&gt;&lt;code&gt;Arg.parse&lt;/code&gt;&lt;/a&gt; prints in case of error. &lt;code&gt;speclist&lt;/code&gt; and &lt;code&gt;usage_msg&lt;/code&gt; are the same as for &lt;a href=&quot;arg#VALparse&quot;&gt;&lt;code&gt;Arg.parse&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="75304a5f6eaf45aedd0323707c0e8261389b35f2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Arg.write_arg&amp;nbsp;file&amp;nbsp;args&lt;/code&gt; writes the arguments &lt;code&gt;args&lt;/code&gt; newline-terminated into the file &lt;code&gt;file&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7d6190c202c8b9945cbdc67c3e3b158e13982bba" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Arg.write_arg&amp;nbsp;file&amp;nbsp;args&lt;/code&gt; writes the arguments &lt;code&gt;args&lt;/code&gt; newline-terminated into the file &lt;code&gt;file&lt;/code&gt;. If the any of the arguments in &lt;code&gt;args&lt;/code&gt; contains a newline, use &lt;a href=&quot;arg#VALwrite_arg0&quot;&gt;&lt;code&gt;Arg.write_arg0&lt;/code&gt;&lt;/a&gt; instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="617cc2a6f556ec66cffdc34bc31d07312b765e9c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Array.append&amp;nbsp;v1&amp;nbsp;v2&lt;/code&gt; returns a fresh array containing the concatenation of the arrays &lt;code&gt;v1&lt;/code&gt; and &lt;code&gt;v2&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4c9451b8800006adb890570520ee62d21e9e9830" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Array.blit&amp;nbsp;v1&amp;nbsp;o1&amp;nbsp;v2&amp;nbsp;o2&amp;nbsp;len&lt;/code&gt; copies &lt;code&gt;len&lt;/code&gt; elements from array &lt;code&gt;v1&lt;/code&gt;, starting at element number &lt;code&gt;o1&lt;/code&gt;, to array &lt;code&gt;v2&lt;/code&gt;, starting at element number &lt;code&gt;o2&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="287e6abf07b7cce24a84e4c430beba42d4d1c0e2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Array.blit&amp;nbsp;v1&amp;nbsp;o1&amp;nbsp;v2&amp;nbsp;o2&amp;nbsp;len&lt;/code&gt; copies &lt;code&gt;len&lt;/code&gt; elements from array &lt;code&gt;v1&lt;/code&gt;, starting at element number &lt;code&gt;o1&lt;/code&gt;, to array &lt;code&gt;v2&lt;/code&gt;, starting at element number &lt;code&gt;o2&lt;/code&gt;. It works correctly even if &lt;code&gt;v1&lt;/code&gt; and &lt;code&gt;v2&lt;/code&gt; are the same array, and the source and destination chunks overlap.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a377d3632268db2f3c5a3f4a2a5cca6745974031" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Array.copy&amp;nbsp;a&lt;/code&gt; returns a copy of &lt;code&gt;a&lt;/code&gt;, that is, a fresh array containing the same elements as &lt;code&gt;a&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2f33d2611bcb048e949dfd2705a4755eefda9ad2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Array.create_float&amp;nbsp;n&lt;/code&gt; returns a fresh float array of length &lt;code&gt;n&lt;/code&gt;, with uninitialized data.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="200e9431b2a61c9d855f5f5bf8b73e9b8c5c9c46" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Array.exists&amp;nbsp;p&amp;nbsp;[|a1;&amp;nbsp;...;&amp;nbsp;an|]&lt;/code&gt; checks if at least one element of the array satisfies the predicate &lt;code&gt;p&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4d5053201814ed49bb52129193143ce9d63c3327" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Array.exists&amp;nbsp;p&amp;nbsp;[|a1;&amp;nbsp;...;&amp;nbsp;an|]&lt;/code&gt; checks if at least one element of the array satisfies the predicate &lt;code&gt;p&lt;/code&gt;. That is, it returns &lt;code&gt;(p&amp;nbsp;a1)&amp;nbsp;||&amp;nbsp;(p&amp;nbsp;a2)&amp;nbsp;||&amp;nbsp;...&amp;nbsp;||&amp;nbsp;(p&amp;nbsp;an)&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5e11c5bb51f02ff3a8efa6422c89c61defa46599" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Array.fill&amp;nbsp;a&amp;nbsp;ofs&amp;nbsp;len&amp;nbsp;x&lt;/code&gt; modifies the array &lt;code&gt;a&lt;/code&gt; in place, storing &lt;code&gt;x&lt;/code&gt; in elements number &lt;code&gt;ofs&lt;/code&gt; to &lt;code&gt;ofs&amp;nbsp;+&amp;nbsp;len&amp;nbsp;-&amp;nbsp;1&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5571c0014527117cea51698249c14ef943491015" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Array.fold_left&amp;nbsp;f&amp;nbsp;x&amp;nbsp;a&lt;/code&gt; computes &lt;code&gt;f&amp;nbsp;(...&amp;nbsp;(f&amp;nbsp;(f&amp;nbsp;x&amp;nbsp;a.(0))&amp;nbsp;a.(1))&amp;nbsp;...)&amp;nbsp;a.(n-1)&lt;/code&gt;, where &lt;code&gt;n&lt;/code&gt; is the length of the array &lt;code&gt;a&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5cb954dac9925e87828c996e2866898aca33836c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Array.fold_right&amp;nbsp;f&amp;nbsp;a&amp;nbsp;x&lt;/code&gt; computes &lt;code&gt;f&amp;nbsp;a.(0)&amp;nbsp;(f&amp;nbsp;a.(1)&amp;nbsp;(&amp;nbsp;...&amp;nbsp;(f&amp;nbsp;a.(n-1)&amp;nbsp;x)&amp;nbsp;...))&lt;/code&gt;, where &lt;code&gt;n&lt;/code&gt; is the length of the array &lt;code&gt;a&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="032885d62f4f6699ab9dbb1e46bb3114901cb513" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Array.for_all&amp;nbsp;p&amp;nbsp;[|a1;&amp;nbsp;...;&amp;nbsp;an|]&lt;/code&gt; checks if all elements of the array satisfy the predicate &lt;code&gt;p&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9f0d579a59e11942b128b7c36f566edafba9a0bc" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Array.for_all&amp;nbsp;p&amp;nbsp;[|a1;&amp;nbsp;...;&amp;nbsp;an|]&lt;/code&gt; checks if all elements of the array satisfy the predicate &lt;code&gt;p&lt;/code&gt;. That is, it returns &lt;code&gt;(p&amp;nbsp;a1)&amp;nbsp;&amp;amp;&amp;amp;&amp;nbsp;(p&amp;nbsp;a2)&amp;nbsp;&amp;amp;&amp;amp;&amp;nbsp;...&amp;nbsp;&amp;amp;&amp;amp;&amp;nbsp;(p&amp;nbsp;an)&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ad5538ba654978d2ef670701b1364cf84de8bc85" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Array.get&amp;nbsp;a&amp;nbsp;n&lt;/code&gt; returns the element number &lt;code&gt;n&lt;/code&gt; of array &lt;code&gt;a&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d09685abd5030b9040888596663129a0019889b4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Array.get&amp;nbsp;a&amp;nbsp;n&lt;/code&gt; returns the element number &lt;code&gt;n&lt;/code&gt; of array &lt;code&gt;a&lt;/code&gt;. The first element has number 0. The last element has number &lt;code&gt;Array.length&amp;nbsp;a&amp;nbsp;-&amp;nbsp;1&lt;/code&gt;. You can also write &lt;code&gt;a.(n)&lt;/code&gt; instead of &lt;code&gt;Array.get&amp;nbsp;a&amp;nbsp;n&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="577b998dd73a6e77cda66a3813ab4cdbea7baf2d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Array.init&amp;nbsp;n&amp;nbsp;f&lt;/code&gt; returns a fresh array of length &lt;code&gt;n&lt;/code&gt;, with element number &lt;code&gt;i&lt;/code&gt; initialized to the result of &lt;code&gt;f&amp;nbsp;i&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aab62c4e0aea8962bd0fa10654d23288a0a7941d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Array.init&amp;nbsp;n&amp;nbsp;f&lt;/code&gt; returns a fresh array of length &lt;code&gt;n&lt;/code&gt;, with element number &lt;code&gt;i&lt;/code&gt; initialized to the result of &lt;code&gt;f&amp;nbsp;i&lt;/code&gt;. In other terms, &lt;code&gt;Array.init&amp;nbsp;n&amp;nbsp;f&lt;/code&gt; tabulates the results of &lt;code&gt;f&lt;/code&gt; applied to the integers &lt;code&gt;0&lt;/code&gt; to &lt;code&gt;n-1&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="88829e99468e068158fed8af5d99a0061e8728ed" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Array.iter&amp;nbsp;f&amp;nbsp;a&lt;/code&gt; applies function &lt;code&gt;f&lt;/code&gt; in turn to all the elements of &lt;code&gt;a&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5e884d56e4344f41dab903540b23ede2b63d4386" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Array.iter&amp;nbsp;f&amp;nbsp;a&lt;/code&gt; applies function &lt;code&gt;f&lt;/code&gt; in turn to all the elements of &lt;code&gt;a&lt;/code&gt;. It is equivalent to &lt;code&gt;f&amp;nbsp;a.(0);&amp;nbsp;f&amp;nbsp;a.(1);&amp;nbsp;...;&amp;nbsp;f&amp;nbsp;a.(Array.length&amp;nbsp;a&amp;nbsp;-&amp;nbsp;1);&amp;nbsp;()&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ff0984373021caab48994f6c641fa0a35be721c7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Array.iter2&amp;nbsp;f&amp;nbsp;a&amp;nbsp;b&lt;/code&gt; applies function &lt;code&gt;f&lt;/code&gt; to all the elements of &lt;code&gt;a&lt;/code&gt; and &lt;code&gt;b&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="38872ae1e5816ee86ab3f7860f0e0cfeadca7150" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Array.iter2&amp;nbsp;~f&amp;nbsp;a&amp;nbsp;b&lt;/code&gt; applies function &lt;code&gt;f&lt;/code&gt; to all the elements of &lt;code&gt;a&lt;/code&gt; and &lt;code&gt;b&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2574bff5945e31b17691a8afbf18abb52a8cb618" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Array.make&amp;nbsp;n&amp;nbsp;x&lt;/code&gt; returns a fresh array of length &lt;code&gt;n&lt;/code&gt;, initialized with &lt;code&gt;x&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ffe1d94601e8bb9917368d2d6f06de4c4d40bb1e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Array.make&amp;nbsp;n&amp;nbsp;x&lt;/code&gt; returns a fresh array of length &lt;code&gt;n&lt;/code&gt;, initialized with &lt;code&gt;x&lt;/code&gt;. All the elements of this new array are initially physically equal to &lt;code&gt;x&lt;/code&gt; (in the sense of the &lt;code&gt;==&lt;/code&gt; predicate). Consequently, if &lt;code&gt;x&lt;/code&gt; is mutable, it is shared among all elements of the array, and modifying &lt;code&gt;x&lt;/code&gt; through one of the array entries will modify all other entries at the same time.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1a398c214493396c03af9360524b50ac80f3a4f9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Array.make_matrix&amp;nbsp;dimx&amp;nbsp;dimy&amp;nbsp;e&lt;/code&gt; returns a two-dimensional array (an array of arrays) with first dimension &lt;code&gt;dimx&lt;/code&gt; and second dimension &lt;code&gt;dimy&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e102781b765649ea868efb7fcfb7c4bab959cd44" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Array.make_matrix&amp;nbsp;dimx&amp;nbsp;dimy&amp;nbsp;e&lt;/code&gt; returns a two-dimensional array (an array of arrays) with first dimension &lt;code&gt;dimx&lt;/code&gt; and second dimension &lt;code&gt;dimy&lt;/code&gt;. All the elements of this new matrix are initially physically equal to &lt;code&gt;e&lt;/code&gt;. The element (&lt;code&gt;x,y&lt;/code&gt;) of a matrix &lt;code&gt;m&lt;/code&gt; is accessed with the notation &lt;code&gt;m.(x).(y)&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="409735ac545a6903d6423c3efac3b1edfc66ee39" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Array.map&amp;nbsp;f&amp;nbsp;a&lt;/code&gt; applies function &lt;code&gt;f&lt;/code&gt; to all the elements of &lt;code&gt;a&lt;/code&gt;, and builds an array with the results returned by &lt;code&gt;f&lt;/code&gt;: &lt;code&gt;[|&amp;nbsp;f&amp;nbsp;a.(0);&amp;nbsp;f&amp;nbsp;a.(1);&amp;nbsp;...;&amp;nbsp;f&amp;nbsp;a.(Array.length&amp;nbsp;a&amp;nbsp;-&amp;nbsp;1)&amp;nbsp;|]&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e6cdb9634d450f9f81c45a6043aab58d73366b62" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Array.map2&amp;nbsp;f&amp;nbsp;a&amp;nbsp;b&lt;/code&gt; applies function &lt;code&gt;f&lt;/code&gt; to all the elements of &lt;code&gt;a&lt;/code&gt; and &lt;code&gt;b&lt;/code&gt;, and builds an array with the results returned by &lt;code&gt;f&lt;/code&gt;: &lt;code&gt;[|&amp;nbsp;f&amp;nbsp;a.(0)&amp;nbsp;b.(0);&amp;nbsp;...;&amp;nbsp;f&amp;nbsp;a.(Array.length&amp;nbsp;a&amp;nbsp;-&amp;nbsp;1)&amp;nbsp;b.(Array.length&amp;nbsp;b&amp;nbsp;-&amp;nbsp;1)|]&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="66d9836990c680c36b25c34ea437e105097f97b0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Array.of_list&amp;nbsp;l&lt;/code&gt; returns a fresh array containing the elements of &lt;code&gt;l&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1f0355443a36810421f86299e5a712d3b960c615" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Array.set&amp;nbsp;a&amp;nbsp;n&amp;nbsp;x&lt;/code&gt; modifies array &lt;code&gt;a&lt;/code&gt; in place, replacing element number &lt;code&gt;n&lt;/code&gt; with &lt;code&gt;x&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="311beaee2a5ee68fc96a9c501fdebf40fb901f13" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Array.set&amp;nbsp;a&amp;nbsp;n&amp;nbsp;x&lt;/code&gt; modifies array &lt;code&gt;a&lt;/code&gt; in place, replacing element number &lt;code&gt;n&lt;/code&gt; with &lt;code&gt;x&lt;/code&gt;. You can also write &lt;code&gt;a.(n)&amp;nbsp;&amp;lt;-&amp;nbsp;x&lt;/code&gt; instead of &lt;code&gt;Array.set&amp;nbsp;a&amp;nbsp;n&amp;nbsp;x&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e0907ae81911f389ef74ea882ca834425d4f7647" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Array.sub&amp;nbsp;a&amp;nbsp;start&amp;nbsp;len&lt;/code&gt; returns a fresh array of length &lt;code&gt;len&lt;/code&gt;, containing the elements number &lt;code&gt;start&lt;/code&gt; to &lt;code&gt;start&amp;nbsp;+&amp;nbsp;len&amp;nbsp;-&amp;nbsp;1&lt;/code&gt; of array &lt;code&gt;a&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="48fb3f8b4f6bb8e1ea989860c5529ebebbc6badc" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Array.to_list&amp;nbsp;a&lt;/code&gt; returns the list of all the elements of &lt;code&gt;a&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4d11c2e1be7ef9397f2e5c504ebd61d130c1ac69" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Array0.change_layout&amp;nbsp;a&amp;nbsp;layout&lt;/code&gt; returns a Bigarray with the specified &lt;code&gt;layout&lt;/code&gt;, sharing the data with &lt;code&gt;a&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f0183c7b91cdb33b35c96d9fa7b3e76a01bd14d6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Array0.change_layout&amp;nbsp;a&amp;nbsp;layout&lt;/code&gt; returns a Bigarray with the specified &lt;code&gt;layout&lt;/code&gt;, sharing the data with &lt;code&gt;a&lt;/code&gt;. No copying of elements is involved: the new array and the original array share the same storage space.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3d1f74bfb5c95cf76b246cf61cc85c00b2957856" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Array0.create&amp;nbsp;kind&amp;nbsp;layout&lt;/code&gt; returns a new Bigarray of zero dimension.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7f99eb6d5595880acbe24ccf9e9750087e0dbc71" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Array0.create&amp;nbsp;kind&amp;nbsp;layout&lt;/code&gt; returns a new Bigarray of zero dimension. &lt;code&gt;kind&lt;/code&gt; and &lt;code&gt;layout&lt;/code&gt; determine the array element kind and the array layout as described for &lt;a href=&quot;bigarray.genarray#VALcreate&quot;&gt;&lt;code&gt;Bigarray.Genarray.create&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4cb486a37c1ce86ab93c57697b8e2ee94c24d8e4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Array0.get&amp;nbsp;a&lt;/code&gt; returns the only element in &lt;code&gt;a&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3f4993deeff415bd82a590d4a1201c92571b9fff" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Array0.init&amp;nbsp;kind&amp;nbsp;layout&amp;nbsp;v&lt;/code&gt; behaves like &lt;code&gt;Array0.create&amp;nbsp;kind&amp;nbsp;layout&lt;/code&gt; except that the element is additionally initialized to the value &lt;code&gt;v&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bd88ee7ab51d18dc3233784c2c158a6518054633" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Array0.set&amp;nbsp;a&amp;nbsp;x&amp;nbsp;v&lt;/code&gt; stores the value &lt;code&gt;v&lt;/code&gt; in &lt;code&gt;a&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="34cca11bf1ff31741d9d66478af62e91ad713836" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Array1.change_layout&amp;nbsp;a&amp;nbsp;layout&lt;/code&gt; returns a Bigarray with the specified &lt;code&gt;layout&lt;/code&gt;, sharing the data with &lt;code&gt;a&lt;/code&gt; (and hence having the same dimension as &lt;code&gt;a&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="78e25619186782d36bccd1d4af8a9413d5c8e9d7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Array1.change_layout&amp;nbsp;a&amp;nbsp;layout&lt;/code&gt; returns a Bigarray with the specified &lt;code&gt;layout&lt;/code&gt;, sharing the data with &lt;code&gt;a&lt;/code&gt; (and hence having the same dimension as &lt;code&gt;a&lt;/code&gt;). No copying of elements is involved: the new array and the original array share the same storage space.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="40dc72e8678a9a33fbff96a98666ce963285ed4c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Array1.create&amp;nbsp;kind&amp;nbsp;layout&amp;nbsp;dim&lt;/code&gt; returns a new Bigarray of one dimension, whose size is &lt;code&gt;dim&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ab164ab1b09250e62e768966ac0475b8cf125587" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Array1.create&amp;nbsp;kind&amp;nbsp;layout&amp;nbsp;dim&lt;/code&gt; returns a new Bigarray of one dimension, whose size is &lt;code&gt;dim&lt;/code&gt;. &lt;code&gt;kind&lt;/code&gt; and &lt;code&gt;layout&lt;/code&gt; determine the array element kind and the array layout as described for &lt;a href=&quot;bigarray.genarray#VALcreate&quot;&gt;&lt;code&gt;Bigarray.Genarray.create&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="135db6ef3e484c297826bdef2327e71c884164bc" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Array1.get&amp;nbsp;a&amp;nbsp;x&lt;/code&gt;, or alternatively &lt;code&gt;a.{x}&lt;/code&gt;, returns the element of &lt;code&gt;a&lt;/code&gt; at index &lt;code&gt;x&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ba8a018afeec72febe052ee3446be28feeaad787" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Array1.get&amp;nbsp;a&amp;nbsp;x&lt;/code&gt;, or alternatively &lt;code&gt;a.{x}&lt;/code&gt;, returns the element of &lt;code&gt;a&lt;/code&gt; at index &lt;code&gt;x&lt;/code&gt;. &lt;code&gt;x&lt;/code&gt; must be greater or equal than &lt;code&gt;0&lt;/code&gt; and strictly less than &lt;code&gt;Array1.dim&amp;nbsp;a&lt;/code&gt; if &lt;code&gt;a&lt;/code&gt; has C layout. If &lt;code&gt;a&lt;/code&gt; has Fortran layout, &lt;code&gt;x&lt;/code&gt; must be greater or equal than &lt;code&gt;1&lt;/code&gt; and less or equal than &lt;code&gt;Array1.dim&amp;nbsp;a&lt;/code&gt;. Otherwise, &lt;code&gt;Invalid_argument&lt;/code&gt; is raised.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2e7ab8dd9bb5d158ebaf9561c32434fd73081c1f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Array1.init&amp;nbsp;kind&amp;nbsp;layout&amp;nbsp;dim&amp;nbsp;f&lt;/code&gt; returns a new Bigarray &lt;code&gt;b&lt;/code&gt; of one dimension, whose size is &lt;code&gt;dim&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="62f61674e986666ec95a60b01fe0adb9b6ad78de" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Array1.init&amp;nbsp;kind&amp;nbsp;layout&amp;nbsp;dim&amp;nbsp;f&lt;/code&gt; returns a new Bigarray &lt;code&gt;b&lt;/code&gt; of one dimension, whose size is &lt;code&gt;dim&lt;/code&gt;. &lt;code&gt;kind&lt;/code&gt; and &lt;code&gt;layout&lt;/code&gt; determine the array element kind and the array layout as described for &lt;a href=&quot;bigarray.genarray#VALcreate&quot;&gt;&lt;code&gt;Bigarray.Genarray.create&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bbe54c15b57aca4e06d6975ce65e7520a62016da" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Array1.set&amp;nbsp;a&amp;nbsp;x&amp;nbsp;v&lt;/code&gt;, also written &lt;code&gt;a.{x}&amp;nbsp;&amp;lt;-&amp;nbsp;v&lt;/code&gt;, stores the value &lt;code&gt;v&lt;/code&gt; at index &lt;code&gt;x&lt;/code&gt; in &lt;code&gt;a&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="430b7806673d1742f0460f2df00f6e90417fabfe" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Array1.set&amp;nbsp;a&amp;nbsp;x&amp;nbsp;v&lt;/code&gt;, also written &lt;code&gt;a.{x}&amp;nbsp;&amp;lt;-&amp;nbsp;v&lt;/code&gt;, stores the value &lt;code&gt;v&lt;/code&gt; at index &lt;code&gt;x&lt;/code&gt; in &lt;code&gt;a&lt;/code&gt;. &lt;code&gt;x&lt;/code&gt; must be inside the bounds of &lt;code&gt;a&lt;/code&gt; as described in &lt;a href=&quot;bigarray.array1#VALget&quot;&gt;&lt;code&gt;Bigarray.Array1.get&lt;/code&gt;&lt;/a&gt;; otherwise, &lt;code&gt;Invalid_argument&lt;/code&gt; is raised.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e5306f45cf0777a5db25be71631ae4232e58e70e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Array2.change_layout&amp;nbsp;a&amp;nbsp;layout&lt;/code&gt; returns a Bigarray with the specified &lt;code&gt;layout&lt;/code&gt;, sharing the data with &lt;code&gt;a&lt;/code&gt; (and hence having the same dimensions as &lt;code&gt;a&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2bf3de4802d26d67343fc8f6df010c0825e9124f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Array2.change_layout&amp;nbsp;a&amp;nbsp;layout&lt;/code&gt; returns a Bigarray with the specified &lt;code&gt;layout&lt;/code&gt;, sharing the data with &lt;code&gt;a&lt;/code&gt; (and hence having the same dimensions as &lt;code&gt;a&lt;/code&gt;). No copying of elements is involved: the new array and the original array share the same storage space. The dimensions are reversed, such that &lt;code&gt;get&amp;nbsp;v&amp;nbsp;[|&amp;nbsp;a;&amp;nbsp;b&amp;nbsp;|]&lt;/code&gt; in C layout becomes &lt;code&gt;get&amp;nbsp;v&amp;nbsp;[|&amp;nbsp;b+1;&amp;nbsp;a+1&amp;nbsp;|]&lt;/code&gt; in Fortran layout.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3f548d3b65ff17a71cb816df93cba74d86d12803" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Array2.create&amp;nbsp;kind&amp;nbsp;layout&amp;nbsp;dim1&amp;nbsp;dim2&lt;/code&gt; returns a new Bigarray of two dimension, whose size is &lt;code&gt;dim1&lt;/code&gt; in the first dimension and &lt;code&gt;dim2&lt;/code&gt; in the second dimension.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="68091142761fecd3466f112d88d615c8d3e96bdf" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Array2.create&amp;nbsp;kind&amp;nbsp;layout&amp;nbsp;dim1&amp;nbsp;dim2&lt;/code&gt; returns a new Bigarray of two dimension, whose size is &lt;code&gt;dim1&lt;/code&gt; in the first dimension and &lt;code&gt;dim2&lt;/code&gt; in the second dimension. &lt;code&gt;kind&lt;/code&gt; and &lt;code&gt;layout&lt;/code&gt; determine the array element kind and the array layout as described for &lt;a href=&quot;bigarray.genarray#VALcreate&quot;&gt;&lt;code&gt;Bigarray.Genarray.create&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="039a3f0fcaa58899e32b8d59a3b2ba089bc82c7e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Array2.create&amp;nbsp;kind&amp;nbsp;layout&amp;nbsp;dim1&amp;nbsp;dim2&lt;/code&gt; returns a new Bigarray of two dimensions, whose size is &lt;code&gt;dim1&lt;/code&gt; in the first dimension and &lt;code&gt;dim2&lt;/code&gt; in the second dimension.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5ba518175dbad06bc4f05a60a435ceb7a8ce977a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Array2.create&amp;nbsp;kind&amp;nbsp;layout&amp;nbsp;dim1&amp;nbsp;dim2&lt;/code&gt; returns a new Bigarray of two dimensions, whose size is &lt;code&gt;dim1&lt;/code&gt; in the first dimension and &lt;code&gt;dim2&lt;/code&gt; in the second dimension. &lt;code&gt;kind&lt;/code&gt; and &lt;code&gt;layout&lt;/code&gt; determine the array element kind and the array layout as described for &lt;a href=&quot;bigarray.genarray#VALcreate&quot;&gt;&lt;code&gt;Bigarray.Genarray.create&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b2a20a71e0b52343be2f200a33ea9714e671354f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Array2.get&amp;nbsp;a&amp;nbsp;x&amp;nbsp;y&lt;/code&gt;, also written &lt;code&gt;a.{x,y}&lt;/code&gt;, returns the element of &lt;code&gt;a&lt;/code&gt; at coordinates (&lt;code&gt;x&lt;/code&gt;, &lt;code&gt;y&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d34a718fd6df7869e6803ad17c4f269d73ddd193" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Array2.get&amp;nbsp;a&amp;nbsp;x&amp;nbsp;y&lt;/code&gt;, also written &lt;code&gt;a.{x,y}&lt;/code&gt;, returns the element of &lt;code&gt;a&lt;/code&gt; at coordinates (&lt;code&gt;x&lt;/code&gt;, &lt;code&gt;y&lt;/code&gt;). &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt; must be within the bounds of &lt;code&gt;a&lt;/code&gt;, as described for &lt;a href=&quot;bigarray.genarray#VALget&quot;&gt;&lt;code&gt;Bigarray.Genarray.get&lt;/code&gt;&lt;/a&gt;; otherwise, &lt;code&gt;Invalid_argument&lt;/code&gt; is raised.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="121cce799502061269cc1e50a6ad32c697690c23" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Array2.init&amp;nbsp;kind&amp;nbsp;layout&amp;nbsp;dim1&amp;nbsp;dim2&amp;nbsp;f&lt;/code&gt; returns a new Bigarray &lt;code&gt;b&lt;/code&gt; of two dimensions, whose size is &lt;code&gt;dim2&lt;/code&gt; in the first dimension and &lt;code&gt;dim2&lt;/code&gt; in the second dimension.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1b5ab79abf1a154fe6fb823f7ee271863c2b7b06" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Array2.init&amp;nbsp;kind&amp;nbsp;layout&amp;nbsp;dim1&amp;nbsp;dim2&amp;nbsp;f&lt;/code&gt; returns a new Bigarray &lt;code&gt;b&lt;/code&gt; of two dimensions, whose size is &lt;code&gt;dim2&lt;/code&gt; in the first dimension and &lt;code&gt;dim2&lt;/code&gt; in the second dimension. &lt;code&gt;kind&lt;/code&gt; and &lt;code&gt;layout&lt;/code&gt; determine the array element kind and the array layout as described for &lt;a href=&quot;bigarray.genarray#VALcreate&quot;&gt;&lt;code&gt;Bigarray.Genarray.create&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c42e8d495ee39f11caca760b69c50a65ef4d7639" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Array2.set&amp;nbsp;a&amp;nbsp;x&amp;nbsp;y&amp;nbsp;v&lt;/code&gt;, or alternatively &lt;code&gt;a.{x,y}&amp;nbsp;&amp;lt;-&amp;nbsp;v&lt;/code&gt;, stores the value &lt;code&gt;v&lt;/code&gt; at coordinates (&lt;code&gt;x&lt;/code&gt;, &lt;code&gt;y&lt;/code&gt;) in &lt;code&gt;a&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2b6ad6773b84f30265c6cdd5eb9b3bbd2e742549" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Array2.set&amp;nbsp;a&amp;nbsp;x&amp;nbsp;y&amp;nbsp;v&lt;/code&gt;, or alternatively &lt;code&gt;a.{x,y}&amp;nbsp;&amp;lt;-&amp;nbsp;v&lt;/code&gt;, stores the value &lt;code&gt;v&lt;/code&gt; at coordinates (&lt;code&gt;x&lt;/code&gt;, &lt;code&gt;y&lt;/code&gt;) in &lt;code&gt;a&lt;/code&gt;. &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt; must be within the bounds of &lt;code&gt;a&lt;/code&gt;, as described for &lt;a href=&quot;bigarray.genarray#VALset&quot;&gt;&lt;code&gt;Bigarray.Genarray.set&lt;/code&gt;&lt;/a&gt;; otherwise, &lt;code&gt;Invalid_argument&lt;/code&gt; is raised.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="06f5625b6b801f8a30bdd878d1c4d421b8982b88" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Array3.change_layout&amp;nbsp;a&amp;nbsp;layout&lt;/code&gt; returns a Bigarray with the specified &lt;code&gt;layout&lt;/code&gt;, sharing the data with &lt;code&gt;a&lt;/code&gt; (and hence having the same dimensions as &lt;code&gt;a&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6c5bbcec48903cd9d1658802c232ce66d8470cff" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Array3.change_layout&amp;nbsp;a&amp;nbsp;layout&lt;/code&gt; returns a Bigarray with the specified &lt;code&gt;layout&lt;/code&gt;, sharing the data with &lt;code&gt;a&lt;/code&gt; (and hence having the same dimensions as &lt;code&gt;a&lt;/code&gt;). No copying of elements is involved: the new array and the original array share the same storage space. The dimensions are reversed, such that &lt;code&gt;get&amp;nbsp;v&amp;nbsp;[|&amp;nbsp;a;&amp;nbsp;b;&amp;nbsp;c&amp;nbsp;|]&lt;/code&gt; in C layout becomes &lt;code&gt;get&amp;nbsp;v&amp;nbsp;[|&amp;nbsp;c+1;&amp;nbsp;b+1;&amp;nbsp;a+1&amp;nbsp;|]&lt;/code&gt; in Fortran layout.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aec9f16ae64a2a41915cbe7b6dbde712c770a37d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Array3.create&amp;nbsp;kind&amp;nbsp;layout&amp;nbsp;dim1&amp;nbsp;dim2&amp;nbsp;dim3&lt;/code&gt; returns a new Bigarray of three dimension, whose size is &lt;code&gt;dim1&lt;/code&gt; in the first dimension, &lt;code&gt;dim2&lt;/code&gt; in the second dimension, and &lt;code&gt;dim3&lt;/code&gt; in the third.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a1e578ffe8218fd79606c6e9aba4e7c48b0c5cd4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Array3.create&amp;nbsp;kind&amp;nbsp;layout&amp;nbsp;dim1&amp;nbsp;dim2&amp;nbsp;dim3&lt;/code&gt; returns a new Bigarray of three dimension, whose size is &lt;code&gt;dim1&lt;/code&gt; in the first dimension, &lt;code&gt;dim2&lt;/code&gt; in the second dimension, and &lt;code&gt;dim3&lt;/code&gt; in the third. &lt;code&gt;kind&lt;/code&gt; and &lt;code&gt;layout&lt;/code&gt; determine the array element kind and the array layout as described for &lt;a href=&quot;bigarray.genarray#VALcreate&quot;&gt;&lt;code&gt;Bigarray.Genarray.create&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9740ddcd955fbfdd24a648a2e8663bcd5061a12e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Array3.create&amp;nbsp;kind&amp;nbsp;layout&amp;nbsp;dim1&amp;nbsp;dim2&amp;nbsp;dim3&lt;/code&gt; returns a new Bigarray of three dimensions, whose size is &lt;code&gt;dim1&lt;/code&gt; in the first dimension, &lt;code&gt;dim2&lt;/code&gt; in the second dimension, and &lt;code&gt;dim3&lt;/code&gt; in the third.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="485c117320bd6883aa8f9d50fd77ff5598acad94" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Array3.create&amp;nbsp;kind&amp;nbsp;layout&amp;nbsp;dim1&amp;nbsp;dim2&amp;nbsp;dim3&lt;/code&gt; returns a new Bigarray of three dimensions, whose size is &lt;code&gt;dim1&lt;/code&gt; in the first dimension, &lt;code&gt;dim2&lt;/code&gt; in the second dimension, and &lt;code&gt;dim3&lt;/code&gt; in the third. &lt;code&gt;kind&lt;/code&gt; and &lt;code&gt;layout&lt;/code&gt; determine the array element kind and the array layout as described for &lt;a href=&quot;bigarray.genarray#VALcreate&quot;&gt;&lt;code&gt;Bigarray.Genarray.create&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b362b72166c6f7c427b0a0d3ef129994366e465a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Array3.get&amp;nbsp;a&amp;nbsp;x&amp;nbsp;y&amp;nbsp;z&lt;/code&gt;, also written &lt;code&gt;a.{x,y,z}&lt;/code&gt;, returns the element of &lt;code&gt;a&lt;/code&gt; at coordinates (&lt;code&gt;x&lt;/code&gt;, &lt;code&gt;y&lt;/code&gt;, &lt;code&gt;z&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="baaa986c17063cab32a6259f69c5ad4e02bea937" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Array3.get&amp;nbsp;a&amp;nbsp;x&amp;nbsp;y&amp;nbsp;z&lt;/code&gt;, also written &lt;code&gt;a.{x,y,z}&lt;/code&gt;, returns the element of &lt;code&gt;a&lt;/code&gt; at coordinates (&lt;code&gt;x&lt;/code&gt;, &lt;code&gt;y&lt;/code&gt;, &lt;code&gt;z&lt;/code&gt;). &lt;code&gt;x&lt;/code&gt;, &lt;code&gt;y&lt;/code&gt; and &lt;code&gt;z&lt;/code&gt; must be within the bounds of &lt;code&gt;a&lt;/code&gt;, as described for &lt;a href=&quot;bigarray.genarray#VALget&quot;&gt;&lt;code&gt;Bigarray.Genarray.get&lt;/code&gt;&lt;/a&gt;; otherwise, &lt;code&gt;Invalid_argument&lt;/code&gt; is raised.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="120ed95a746436b1f8b10b491e348cf6094d07da" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Array3.init&amp;nbsp;kind&amp;nbsp;layout&amp;nbsp;dim1&amp;nbsp;dim2&amp;nbsp;dim3&amp;nbsp;f&lt;/code&gt; returns a new Bigarray &lt;code&gt;b&lt;/code&gt; of three dimensions, whose size is &lt;code&gt;dim1&lt;/code&gt; in the first dimension, &lt;code&gt;dim2&lt;/code&gt; in the second dimension, and &lt;code&gt;dim3&lt;/code&gt; in the third.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b5506bbb50615981bf79b9c1ed97b613057bdc68" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Array3.init&amp;nbsp;kind&amp;nbsp;layout&amp;nbsp;dim1&amp;nbsp;dim2&amp;nbsp;dim3&amp;nbsp;f&lt;/code&gt; returns a new Bigarray &lt;code&gt;b&lt;/code&gt; of three dimensions, whose size is &lt;code&gt;dim1&lt;/code&gt; in the first dimension, &lt;code&gt;dim2&lt;/code&gt; in the second dimension, and &lt;code&gt;dim3&lt;/code&gt; in the third. &lt;code&gt;kind&lt;/code&gt; and &lt;code&gt;layout&lt;/code&gt; determine the array element kind and the array layout as described for &lt;a href=&quot;bigarray.genarray#VALcreate&quot;&gt;&lt;code&gt;Bigarray.Genarray.create&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2ad28680f3473a06aaf443d6785e870a128f4106" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Array3.set&amp;nbsp;a&amp;nbsp;x&amp;nbsp;y&amp;nbsp;v&lt;/code&gt;, or alternatively &lt;code&gt;a.{x,y,z}&amp;nbsp;&amp;lt;-&amp;nbsp;v&lt;/code&gt;, stores the value &lt;code&gt;v&lt;/code&gt; at coordinates (&lt;code&gt;x&lt;/code&gt;, &lt;code&gt;y&lt;/code&gt;, &lt;code&gt;z&lt;/code&gt;) in &lt;code&gt;a&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1701d6cfff8bf3a79824a62b4319618b68fcc29f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Array3.set&amp;nbsp;a&amp;nbsp;x&amp;nbsp;y&amp;nbsp;v&lt;/code&gt;, or alternatively &lt;code&gt;a.{x,y,z}&amp;nbsp;&amp;lt;-&amp;nbsp;v&lt;/code&gt;, stores the value &lt;code&gt;v&lt;/code&gt; at coordinates (&lt;code&gt;x&lt;/code&gt;, &lt;code&gt;y&lt;/code&gt;, &lt;code&gt;z&lt;/code&gt;) in &lt;code&gt;a&lt;/code&gt;. &lt;code&gt;x&lt;/code&gt;, &lt;code&gt;y&lt;/code&gt; and &lt;code&gt;z&lt;/code&gt; must be within the bounds of &lt;code&gt;a&lt;/code&gt;, as described for &lt;a href=&quot;bigarray.genarray#VALset&quot;&gt;&lt;code&gt;Bigarray.Genarray.set&lt;/code&gt;&lt;/a&gt;; otherwise, &lt;code&gt;Invalid_argument&lt;/code&gt; is raised.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7d2e22b27a5f81c6652e26e8b4c223b59cae3eed" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;B&lt;/code&gt;: convert a boolean argument to the string &lt;code&gt;true&lt;/code&gt; or &lt;code&gt;false&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8467894208b1ca4a26cdccc94bde8150e2c1c61c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;B&lt;/code&gt;: reads a boolean argument (&lt;code&gt;true&lt;/code&gt; or &lt;code&gt;false&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="74e6b7d5fdd1e2d91b0ae2e26cfa08f055231d97" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Buffer.blit&amp;nbsp;src&amp;nbsp;srcoff&amp;nbsp;dst&amp;nbsp;dstoff&amp;nbsp;len&lt;/code&gt; copies &lt;code&gt;len&lt;/code&gt; characters from the current contents of the buffer &lt;code&gt;src&lt;/code&gt;, starting at offset &lt;code&gt;srcoff&lt;/code&gt; to &lt;code&gt;dst&lt;/code&gt;, starting at character &lt;code&gt;dstoff&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0625205d51df61c7d420d6c694813bd694abe911" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Buffer.sub&amp;nbsp;b&amp;nbsp;off&amp;nbsp;len&lt;/code&gt; returns a copy of &lt;code&gt;len&lt;/code&gt; bytes from the current contents of the buffer &lt;code&gt;b&lt;/code&gt;, starting at offset &lt;code&gt;off&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f320b750b7e045d36ed910ac7aee518f1ae12f61" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Bytes.init&amp;nbsp;n&amp;nbsp;f&lt;/code&gt; returns a fresh byte sequence of length &lt;code&gt;n&lt;/code&gt;, with character &lt;code&gt;i&lt;/code&gt; initialized to the result of &lt;code&gt;f&amp;nbsp;i&lt;/code&gt; (in increasing index order).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ac245f8aeeead62b14bf89bf22ddb6f94f286caf" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;C&lt;/code&gt;: convert a character argument to OCaml syntax (single quotes, escapes).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="719b10194758ee180105d124fe9fa50f26ed9536" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;C&lt;/code&gt;: reads a single delimited character (delimiters and special escaped characters follow the lexical conventions of OCaml).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5232573e2d25bddd6aaef6abe1b033f8096c5946" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Callback.register&amp;nbsp;n&amp;nbsp;v&lt;/code&gt; registers the value &lt;code&gt;v&lt;/code&gt; under the name &lt;code&gt;n&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3fbaa4712d0af6b846feeb890aec493819fe01c0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Callback.register&amp;nbsp;n&amp;nbsp;v&lt;/code&gt; registers the value &lt;code&gt;v&lt;/code&gt; under the name &lt;code&gt;n&lt;/code&gt;. C code can later retrieve a handle to &lt;code&gt;v&lt;/code&gt; by calling &lt;code&gt;caml_named_value(n)&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2fbe3e8ea0ff00ad18ba72f9881561dfdcb10176" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Callback.register_exception&amp;nbsp;n&amp;nbsp;exn&lt;/code&gt; registers the exception contained in the exception value &lt;code&gt;exn&lt;/code&gt; under the name &lt;code&gt;n&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b5711904eef1ec36139078c170c42f447c647ade" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Callback.register_exception&amp;nbsp;n&amp;nbsp;exn&lt;/code&gt; registers the exception contained in the exception value &lt;code&gt;exn&lt;/code&gt; under the name &lt;code&gt;n&lt;/code&gt;. C code can later retrieve a handle to the exception by calling &lt;code&gt;caml_named_value(n)&lt;/code&gt;. The exception value thus obtained is suitable for passing as first argument to &lt;code&gt;raise_constant&lt;/code&gt; or &lt;code&gt;raise_with_arg&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f0f1227d69541608b1e580b51002a3138f2c1cc9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Digest.subbytes&amp;nbsp;s&amp;nbsp;ofs&amp;nbsp;len&lt;/code&gt; returns the digest of the subsequence of &lt;code&gt;s&lt;/code&gt; starting at index &lt;code&gt;ofs&lt;/code&gt; and containing &lt;code&gt;len&lt;/code&gt; bytes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="629f551818e3ca3a27a88c3aa0f012ac9d20e635" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Digest.substring&amp;nbsp;s&amp;nbsp;ofs&amp;nbsp;len&lt;/code&gt; returns the digest of the substring of &lt;code&gt;s&lt;/code&gt; starting at index &lt;code&gt;ofs&lt;/code&gt; and containing &lt;code&gt;len&lt;/code&gt; characters.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2b9a40b648ae5af865261ad61916a444ab906d0f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;EACCESS&lt;/code&gt; on Windows</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7b584af53492e0a94ee2f31584e894697db4631c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;EISDIR&lt;/code&gt; on Linux &amp;gt;= 2.1.132</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9afb5dca267f7b493fe6ed9733ef33fa72d078bc" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ENOSYS&lt;/code&gt; On &lt;em&gt;Unix&lt;/em&gt; if &lt;code&gt;~follow:_&lt;/code&gt; is requested, but linkat is unavailable.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cfe5197048926f5b8a750b332caab9f444a4634a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ENOSYS&lt;/code&gt; On &lt;em&gt;Windows&lt;/em&gt; if &lt;code&gt;~follow:false&lt;/code&gt; is requested.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="054da1dbd74bc88aad202dc6e7ecd70aa568a5a3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;EPERM&lt;/code&gt; on POSIX compliant system</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="91d6fd8369316abcc2c1a2db83584a4a34aa8562" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;End_of_file&lt;/code&gt; if the end of file is reached before &lt;code&gt;len&lt;/code&gt; characters have been read.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="219f9c6bc7c1d7fd425f5a20ad13be25b381c782" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Ephemeron.K1.blit_data&amp;nbsp;eph1&amp;nbsp;eph2&lt;/code&gt; sets the data of &lt;code&gt;eph2&lt;/code&gt; with the data of &lt;code&gt;eph1&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="54ffcec9d6daa2b55ba9c058123fa59eecbeb163" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Ephemeron.K1.blit_data&amp;nbsp;eph1&amp;nbsp;eph2&lt;/code&gt; sets the data of &lt;code&gt;eph2&lt;/code&gt; with the data of &lt;code&gt;eph1&lt;/code&gt;. Contrary to using &lt;a href=&quot;ephemeron.k1#VALget_data&quot;&gt;&lt;code&gt;Ephemeron.K1.get_data&lt;/code&gt;&lt;/a&gt; followed by &lt;a href=&quot;ephemeron.k1#VALset_data&quot;&gt;&lt;code&gt;Ephemeron.K1.set_data&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;ephemeron.k1#VALunset_data&quot;&gt;&lt;code&gt;Ephemeron.K1.unset_data&lt;/code&gt;&lt;/a&gt; this function does not prevent the incremental GC from erasing the value in its current cycle.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1335d40de4947a6637025d59d30a4d260e873526" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Ephemeron.K1.blit_key&amp;nbsp;eph1&amp;nbsp;eph2&lt;/code&gt; sets the key of &lt;code&gt;eph2&lt;/code&gt; with the key of &lt;code&gt;eph1&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="51bc1e28750f57f410af05f7aac6668e3de61181" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Ephemeron.K1.blit_key&amp;nbsp;eph1&amp;nbsp;eph2&lt;/code&gt; sets the key of &lt;code&gt;eph2&lt;/code&gt; with the key of &lt;code&gt;eph1&lt;/code&gt;. Contrary to using &lt;a href=&quot;ephemeron.k1#VALget_key&quot;&gt;&lt;code&gt;Ephemeron.K1.get_key&lt;/code&gt;&lt;/a&gt; followed by &lt;a href=&quot;ephemeron.k1#VALset_key&quot;&gt;&lt;code&gt;Ephemeron.K1.set_key&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;ephemeron.k1#VALunset_key&quot;&gt;&lt;code&gt;Ephemeron.K1.unset_key&lt;/code&gt;&lt;/a&gt; this function does not prevent the incremental GC from erasing the value in its current cycle.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b85e772b86d34bd309fdf3de52bf17083d77d4c0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Ephemeron.K1.check_data&amp;nbsp;eph&lt;/code&gt; returns &lt;code&gt;true&lt;/code&gt; if the data of the &lt;code&gt;eph&lt;/code&gt; is full, &lt;code&gt;false&lt;/code&gt; if it is empty.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c772ab761be2c517c1d1430eb5d909f6aaf02c55" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Ephemeron.K1.check_data&amp;nbsp;eph&lt;/code&gt; returns &lt;code&gt;true&lt;/code&gt; if the data of the &lt;code&gt;eph&lt;/code&gt; is full, &lt;code&gt;false&lt;/code&gt; if it is empty. Note that even if &lt;code&gt;Ephemeron.K1.check_data&amp;nbsp;eph&lt;/code&gt; returns &lt;code&gt;true&lt;/code&gt;, a subsequent &lt;a href=&quot;ephemeron.k1#VALget_data&quot;&gt;&lt;code&gt;Ephemeron.K1.get_data&lt;/code&gt;&lt;/a&gt;&lt;code&gt;eph&lt;/code&gt; can return &lt;code&gt;None&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="feb538f5ac2297bf36983b7b82ea2d85d8b0ce06" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Ephemeron.K1.check_key&amp;nbsp;eph&lt;/code&gt; returns &lt;code&gt;true&lt;/code&gt; if the key of the &lt;code&gt;eph&lt;/code&gt; is full, &lt;code&gt;false&lt;/code&gt; if it is empty.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6de0e5404da5b12bf766da06a1080b4cccf6a2a7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Ephemeron.K1.check_key&amp;nbsp;eph&lt;/code&gt; returns &lt;code&gt;true&lt;/code&gt; if the key of the &lt;code&gt;eph&lt;/code&gt; is full, &lt;code&gt;false&lt;/code&gt; if it is empty. Note that even if &lt;code&gt;Ephemeron.K1.check_key&amp;nbsp;eph&lt;/code&gt; returns &lt;code&gt;true&lt;/code&gt;, a subsequent &lt;a href=&quot;ephemeron.k1#VALget_key&quot;&gt;&lt;code&gt;Ephemeron.K1.get_key&lt;/code&gt;&lt;/a&gt;&lt;code&gt;eph&lt;/code&gt; can return &lt;code&gt;None&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fb9385bb258dd0db836004db1b230b53215f8381" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Ephemeron.K1.create&amp;nbsp;()&lt;/code&gt; creates an ephemeron with one key.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a6cda6d1d41e5db327ed7cc534b81f6c9b2ea4f1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Ephemeron.K1.create&amp;nbsp;()&lt;/code&gt; creates an ephemeron with one key. The data and the key are empty</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1af756410199c14cee3cd4573969c9c30fc21544" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Ephemeron.K1.get_data&amp;nbsp;eph&lt;/code&gt; returns &lt;code&gt;None&lt;/code&gt; if the data of &lt;code&gt;eph&lt;/code&gt; is empty, &lt;code&gt;Some&amp;nbsp;x&lt;/code&gt; (where &lt;code&gt;x&lt;/code&gt; is the data) if it is full.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="06319cd01cda66f23167c96a81c85ba6e33e124d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Ephemeron.K1.get_data_copy&amp;nbsp;eph&lt;/code&gt; returns &lt;code&gt;None&lt;/code&gt; if the data of &lt;code&gt;eph&lt;/code&gt; is empty, &lt;code&gt;Some&amp;nbsp;x&lt;/code&gt; (where &lt;code&gt;x&lt;/code&gt; is a (shallow) copy of the data) if it is full.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bb46b99208bc5a498d157c540d5e93845ab98e21" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Ephemeron.K1.get_data_copy&amp;nbsp;eph&lt;/code&gt; returns &lt;code&gt;None&lt;/code&gt; if the data of &lt;code&gt;eph&lt;/code&gt; is empty, &lt;code&gt;Some&amp;nbsp;x&lt;/code&gt; (where &lt;code&gt;x&lt;/code&gt; is a (shallow) copy of the data) if it is full. This function has the same GC friendliness as &lt;a href=&quot;weak#VALget_copy&quot;&gt;&lt;code&gt;Weak.get_copy&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ad582e1c4db3db92849cad3f5924fa4ae61302f5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Ephemeron.K1.get_key&amp;nbsp;eph&lt;/code&gt; returns &lt;code&gt;None&lt;/code&gt; if the key of &lt;code&gt;eph&lt;/code&gt; is empty, &lt;code&gt;Some&amp;nbsp;x&lt;/code&gt; (where &lt;code&gt;x&lt;/code&gt; is the key) if it is full.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8c739d918143bd8deddc4842cbf166ad004f46c3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Ephemeron.K1.get_key_copy&amp;nbsp;eph&lt;/code&gt; returns &lt;code&gt;None&lt;/code&gt; if the key of &lt;code&gt;eph&lt;/code&gt; is empty, &lt;code&gt;Some&amp;nbsp;x&lt;/code&gt; (where &lt;code&gt;x&lt;/code&gt; is a (shallow) copy of the key) if it is full.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b844de54baa3863c04c541eef6eccfd26a56d8dd" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Ephemeron.K1.get_key_copy&amp;nbsp;eph&lt;/code&gt; returns &lt;code&gt;None&lt;/code&gt; if the key of &lt;code&gt;eph&lt;/code&gt; is empty, &lt;code&gt;Some&amp;nbsp;x&lt;/code&gt; (where &lt;code&gt;x&lt;/code&gt; is a (shallow) copy of the key) if it is full. This function has the same GC friendliness as &lt;a href=&quot;weak#VALget_copy&quot;&gt;&lt;code&gt;Weak.get_copy&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6a62a54a2c51a808e0b04ffecec72ebeedfd3634" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Ephemeron.K1.set_data&amp;nbsp;eph&amp;nbsp;el&lt;/code&gt; sets the data of &lt;code&gt;eph&lt;/code&gt; to be a (full) data to &lt;code&gt;el&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b9cee04df508978c949d7afa17dbd5b245a68633" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Ephemeron.K1.set_key&amp;nbsp;eph&amp;nbsp;el&lt;/code&gt; sets the key of &lt;code&gt;eph&lt;/code&gt; to be a (full) key to &lt;code&gt;el&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4fa8121006d841ec3cd8a42ec4120228be6273d1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Ephemeron.K1.unset_data&amp;nbsp;eph&amp;nbsp;el&lt;/code&gt; sets the key of &lt;code&gt;eph&lt;/code&gt; to be an empty key.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="150b5e65a2fd69e5835132dde467b674e67aa762" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Ephemeron.K1.unset_data&amp;nbsp;eph&amp;nbsp;el&lt;/code&gt; sets the key of &lt;code&gt;eph&lt;/code&gt; to be an empty key. The ephemeron starts behaving like a weak pointer.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="66ec698452aa448637236d0871c30aedd9605318" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Ephemeron.K1.unset_key&amp;nbsp;eph&amp;nbsp;el&lt;/code&gt; sets the key of &lt;code&gt;eph&lt;/code&gt; to be an empty key.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="81c2c78a63726192d216503cae8cc2352e5d24fa" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Ephemeron.K1.unset_key&amp;nbsp;eph&amp;nbsp;el&lt;/code&gt; sets the key of &lt;code&gt;eph&lt;/code&gt; to be an empty key. Since there is only one key, the ephemeron starts behaving like a reference on the data.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="21135e395d7cd3aa167becff81b396a09fcb7b73" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;F&lt;/code&gt;: convert a floating-point argument to OCaml syntax (&lt;code&gt;dddd.&lt;/code&gt; or &lt;code&gt;dddd.ddd&lt;/code&gt; or &lt;code&gt;d.ddd&amp;nbsp;e+-dd&lt;/code&gt;). Converts to hexadecimal with the &lt;code&gt;#&lt;/code&gt; flag (see &lt;code&gt;h&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6fe06fe45547966fee4e2332d807991239133655" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;F&lt;/code&gt;: reads a floating point number according to the lexical conventions of OCaml (hence the decimal point is mandatory if the exponent part is not mentioned).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eaf95e7b536270324a8c41f1d76dc158b16041ee" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Failure&lt;/code&gt; if the list is too short.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e02e9123a13771ce24f9e50e592f852eec620abc" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Finally_raised&amp;nbsp;exn&lt;/code&gt; is raised by &lt;code&gt;protect&amp;nbsp;~finally&amp;nbsp;work&lt;/code&gt; when &lt;code&gt;finally&lt;/code&gt; raises an exception &lt;code&gt;exn&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aa503d0f93924ce2311f77ce20928e345ad60f4e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Finally_raised&amp;nbsp;exn&lt;/code&gt; is raised by &lt;code&gt;protect&amp;nbsp;~finally&amp;nbsp;work&lt;/code&gt; when &lt;code&gt;finally&lt;/code&gt; raises an exception &lt;code&gt;exn&lt;/code&gt;. This exception denotes either an unexpected exception or a programming error. As a general rule, one should not catch a &lt;code&gt;Finally_raised&lt;/code&gt; exception except as part of a catch-all handler.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7efd9f51d4e8d56e268f8f577664b7ada466d20f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Genarray.change_layout&amp;nbsp;a&amp;nbsp;layout&lt;/code&gt; returns a Bigarray with the specified &lt;code&gt;layout&lt;/code&gt;, sharing the data with &lt;code&gt;a&lt;/code&gt; (and hence having the same dimensions as &lt;code&gt;a&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="76768d995ce3f42a5bc364907231d1c6dcb9c023" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Genarray.change_layout&amp;nbsp;a&amp;nbsp;layout&lt;/code&gt; returns a Bigarray with the specified &lt;code&gt;layout&lt;/code&gt;, sharing the data with &lt;code&gt;a&lt;/code&gt; (and hence having the same dimensions as &lt;code&gt;a&lt;/code&gt;). No copying of elements is involved: the new array and the original array share the same storage space. The dimensions are reversed, such that &lt;code&gt;get&amp;nbsp;v&amp;nbsp;[|&amp;nbsp;a;&amp;nbsp;b&amp;nbsp;|]&lt;/code&gt; in C layout becomes &lt;code&gt;get&amp;nbsp;v&amp;nbsp;[|&amp;nbsp;b+1;&amp;nbsp;a+1&amp;nbsp;|]&lt;/code&gt; in Fortran layout.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fa6d636b52dddcd262b9c7c0e830ca903af695d3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Genarray.create&amp;nbsp;kind&amp;nbsp;layout&amp;nbsp;dimensions&lt;/code&gt; returns a new Bigarray whose element kind is determined by the parameter &lt;code&gt;kind&lt;/code&gt; (one of &lt;code&gt;float32&lt;/code&gt;, &lt;code&gt;float64&lt;/code&gt;, &lt;code&gt;int8_signed&lt;/code&gt;, etc) and whose layout is determined by the parameter &lt;code&gt;layout&lt;/code&gt; (one of &lt;code&gt;c_layout&lt;/code&gt; or &lt;code&gt;fortran_layout&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e35254c9c18bdc9f9e7dbd054cd20768b01dea8d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Genarray.create&amp;nbsp;kind&amp;nbsp;layout&amp;nbsp;dimensions&lt;/code&gt; returns a new Bigarray whose element kind is determined by the parameter &lt;code&gt;kind&lt;/code&gt; (one of &lt;code&gt;float32&lt;/code&gt;, &lt;code&gt;float64&lt;/code&gt;, &lt;code&gt;int8_signed&lt;/code&gt;, etc) and whose layout is determined by the parameter &lt;code&gt;layout&lt;/code&gt; (one of &lt;code&gt;c_layout&lt;/code&gt; or &lt;code&gt;fortran_layout&lt;/code&gt;). The &lt;code&gt;dimensions&lt;/code&gt; parameter is an array of integers that indicate the size of the Bigarray in each dimension. The length of &lt;code&gt;dimensions&lt;/code&gt; determines the number of dimensions of the Bigarray.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="32b90652f51278c522b2e0490a4f65a962d24c58" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Genarray.create&lt;/code&gt; raises &lt;code&gt;Invalid_argument&lt;/code&gt; if the number of dimensions is not in the range 0 to 16 inclusive, or if one of the dimensions is negative.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ac9e27a7f640aab28a93251c20daef76273b189e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Genarray.dims&amp;nbsp;a&lt;/code&gt; returns all dimensions of the Bigarray &lt;code&gt;a&lt;/code&gt;, as an array of integers of length &lt;code&gt;Genarray.num_dims&amp;nbsp;a&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3c3a8e45d65353dddf836f9430657e005bfb60e3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Genarray.init&amp;nbsp;kind&amp;nbsp;layout&amp;nbsp;dimensions&amp;nbsp;f&lt;/code&gt; returns a new Bigarray &lt;code&gt;b&lt;/code&gt; whose element kind is determined by the parameter &lt;code&gt;kind&lt;/code&gt; (one of &lt;code&gt;float32&lt;/code&gt;, &lt;code&gt;float64&lt;/code&gt;, &lt;code&gt;int8_signed&lt;/code&gt;, etc) and whose layout is determined by the parameter &lt;code&gt;layout&lt;/code&gt; (one of &lt;code&gt;c_layout&lt;/code&gt; or &lt;code&gt;fortran_layout&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="26e10c0480cafb5a7b5fd5e8679ad37003df3c65" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Genarray.init&amp;nbsp;kind&amp;nbsp;layout&amp;nbsp;dimensions&amp;nbsp;f&lt;/code&gt; returns a new Bigarray &lt;code&gt;b&lt;/code&gt; whose element kind is determined by the parameter &lt;code&gt;kind&lt;/code&gt; (one of &lt;code&gt;float32&lt;/code&gt;, &lt;code&gt;float64&lt;/code&gt;, &lt;code&gt;int8_signed&lt;/code&gt;, etc) and whose layout is determined by the parameter &lt;code&gt;layout&lt;/code&gt; (one of &lt;code&gt;c_layout&lt;/code&gt; or &lt;code&gt;fortran_layout&lt;/code&gt;). The &lt;code&gt;dimensions&lt;/code&gt; parameter is an array of integers that indicate the size of the Bigarray in each dimension. The length of &lt;code&gt;dimensions&lt;/code&gt; determines the number of dimensions of the Bigarray.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b5cbe17f4cf6498324009575a323421996d08805" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Genarray.init&lt;/code&gt; raises &lt;code&gt;Invalid_argument&lt;/code&gt; if the number of dimensions is not in the range 0 to 16 inclusive, or if one of the dimensions is negative.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="39f51116770e41e04a5b25c7839e43a4596b1975" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Genarray.map_file&lt;/code&gt; is much more efficient than reading the whole file in a Bigarray, modifying that Bigarray, and writing it afterwards.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7456f37d534dc2d2fdadf0b2151997b8febad6c8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Genarray.nth_dim&amp;nbsp;a&amp;nbsp;n&lt;/code&gt; returns the &lt;code&gt;n&lt;/code&gt;-th dimension of the Bigarray &lt;code&gt;a&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e54af09fab8e17fe052dd3a3c0bc7e0b37eb3adb" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Genarray.nth_dim&amp;nbsp;a&amp;nbsp;n&lt;/code&gt; returns the &lt;code&gt;n&lt;/code&gt;-th dimension of the Bigarray &lt;code&gt;a&lt;/code&gt;. The first dimension corresponds to &lt;code&gt;n&amp;nbsp;=&amp;nbsp;0&lt;/code&gt;; the second dimension corresponds to &lt;code&gt;n&amp;nbsp;=&amp;nbsp;1&lt;/code&gt;; the last dimension, to &lt;code&gt;n&amp;nbsp;=&amp;nbsp;Genarray.num_dims&amp;nbsp;a&amp;nbsp;-&amp;nbsp;1&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ecf673bbe20ced00239009b1dae6b1cfd0230830" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Genarray.slice_left&lt;/code&gt; applies only to Bigarrays in C layout.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4ea5503af54c10b51292c6bfac37ea0c164c63ae" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Genarray.slice_right&lt;/code&gt; applies only to Bigarrays in Fortran layout.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="22e34d2b12bd62b14f84cdf7168e380ddcc0c0de" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Genarray.sub_left&lt;/code&gt; applies only to Bigarrays in C layout.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="73c701451519b813397c2807486d22700cfbce64" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Genarray.sub_right&lt;/code&gt; applies only to Bigarrays in Fortran layout.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c5def7911ce596ab096150edc3914b5205511d7e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Hashtbl.add&amp;nbsp;tbl&amp;nbsp;key&amp;nbsp;data&lt;/code&gt; adds a binding of &lt;code&gt;key&lt;/code&gt; to &lt;code&gt;data&lt;/code&gt; in table &lt;code&gt;tbl&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4910c3ff586f93ef2a48c9312ff3ff18aef139d9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Hashtbl.add&amp;nbsp;tbl&amp;nbsp;key&amp;nbsp;data&lt;/code&gt; adds a binding of &lt;code&gt;key&lt;/code&gt; to &lt;code&gt;data&lt;/code&gt; in table &lt;code&gt;tbl&lt;/code&gt;. Previous bindings for &lt;code&gt;key&lt;/code&gt; are not removed, but simply hidden. That is, after performing &lt;a href=&quot;hashtbl#VALremove&quot;&gt;&lt;code&gt;Hashtbl.remove&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;nbsp;tbl&amp;nbsp;key&lt;/code&gt;, the previous binding for &lt;code&gt;key&lt;/code&gt;, if any, is restored. (Same behavior as with association lists.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0aad1a6433b5eda627bd1e86276af2e44f774110" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Hashtbl.add&amp;nbsp;tbl&amp;nbsp;x&amp;nbsp;y&lt;/code&gt; adds a binding of &lt;code&gt;x&lt;/code&gt; to &lt;code&gt;y&lt;/code&gt; in table &lt;code&gt;tbl&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fc43942de5c94974c12e30bc15676e7cb096b927" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Hashtbl.add&amp;nbsp;tbl&amp;nbsp;x&amp;nbsp;y&lt;/code&gt; adds a binding of &lt;code&gt;x&lt;/code&gt; to &lt;code&gt;y&lt;/code&gt; in table &lt;code&gt;tbl&lt;/code&gt;. Previous bindings for &lt;code&gt;x&lt;/code&gt; are not removed, but simply hidden. That is, after performing &lt;a href=&quot;hashtbl#VALremove&quot;&gt;&lt;code&gt;Hashtbl.remove&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;nbsp;tbl&amp;nbsp;x&lt;/code&gt;, the previous binding for &lt;code&gt;x&lt;/code&gt;, if any, is restored. (Same behavior as with association lists.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="250245d5a230505aa41efdfe9891656674f1ea2b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Hashtbl.add&amp;nbsp;tbl&amp;nbsp;~key&amp;nbsp;~data&lt;/code&gt; adds a binding of &lt;code&gt;key&lt;/code&gt; to &lt;code&gt;data&lt;/code&gt; in table &lt;code&gt;tbl&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="705427e1e00f5be631c430be53a184a66b91457c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Hashtbl.add&amp;nbsp;tbl&amp;nbsp;~key&amp;nbsp;~data&lt;/code&gt; adds a binding of &lt;code&gt;key&lt;/code&gt; to &lt;code&gt;data&lt;/code&gt; in table &lt;code&gt;tbl&lt;/code&gt;. Previous bindings for &lt;code&gt;key&lt;/code&gt; are not removed, but simply hidden. That is, after performing &lt;a href=&quot;morelabels.hashtbl#VALremove&quot;&gt;&lt;code&gt;MoreLabels.Hashtbl.remove&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;nbsp;tbl&amp;nbsp;key&lt;/code&gt;, the previous binding for &lt;code&gt;key&lt;/code&gt;, if any, is restored. (Same behavior as with association lists.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="235d0ca5bca018376f4f25aa62d3b7b0583ce9eb" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Hashtbl.create&amp;nbsp;n&lt;/code&gt; creates a new, empty hash table, with initial size &lt;code&gt;n&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6772d979056a9443711567da0fd46ffe09411ccf" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Hashtbl.create&amp;nbsp;n&lt;/code&gt; creates a new, empty hash table, with initial size &lt;code&gt;n&lt;/code&gt;. For best results, &lt;code&gt;n&lt;/code&gt; should be on the order of the expected number of elements that will be in the table. The table grows as needed, so &lt;code&gt;n&lt;/code&gt; is just an initial guess.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3da46ac82c86595fcaffce3b8ca8a7eba01bfc61" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Hashtbl.filter_map_inplace&amp;nbsp;f&amp;nbsp;tbl&lt;/code&gt; applies &lt;code&gt;f&lt;/code&gt; to all bindings in table &lt;code&gt;tbl&lt;/code&gt; and update each binding depending on the result of &lt;code&gt;f&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a4939848e0f6c8d0cc94d4eb370efa5ae5427ac6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Hashtbl.filter_map_inplace&amp;nbsp;f&amp;nbsp;tbl&lt;/code&gt; applies &lt;code&gt;f&lt;/code&gt; to all bindings in table &lt;code&gt;tbl&lt;/code&gt; and update each binding depending on the result of &lt;code&gt;f&lt;/code&gt;. If &lt;code&gt;f&lt;/code&gt; returns &lt;code&gt;None&lt;/code&gt;, the binding is discarded. If it returns &lt;code&gt;Some&amp;nbsp;new_val&lt;/code&gt;, the binding is update to associate the key to &lt;code&gt;new_val&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="89281cbb3638eed5f08f36749b664e447a5190d6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Hashtbl.filter_map_inplace&amp;nbsp;~f&amp;nbsp;tbl&lt;/code&gt; applies &lt;code&gt;f&lt;/code&gt; to all bindings in table &lt;code&gt;tbl&lt;/code&gt; and update each binding depending on the result of &lt;code&gt;f&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="af1ee17a1598870f87ba2f34bc71a849aea80c45" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Hashtbl.filter_map_inplace&amp;nbsp;~f&amp;nbsp;tbl&lt;/code&gt; applies &lt;code&gt;f&lt;/code&gt; to all bindings in table &lt;code&gt;tbl&lt;/code&gt; and update each binding depending on the result of &lt;code&gt;f&lt;/code&gt;. If &lt;code&gt;f&lt;/code&gt; returns &lt;code&gt;None&lt;/code&gt;, the binding is discarded. If it returns &lt;code&gt;Some&amp;nbsp;new_val&lt;/code&gt;, the binding is update to associate the key to &lt;code&gt;new_val&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f6020eb42918631f8881ae2fc7c9efe9e56e90de" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Hashtbl.find&amp;nbsp;tbl&amp;nbsp;x&lt;/code&gt; returns the current binding of &lt;code&gt;x&lt;/code&gt; in &lt;code&gt;tbl&lt;/code&gt;, or raises &lt;code&gt;Not_found&lt;/code&gt; if no such binding exists.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fe1f3716c06fabafd7b73ac39c59bf74a29069b3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Hashtbl.find_all&amp;nbsp;tbl&amp;nbsp;x&lt;/code&gt; returns the list of all data associated with &lt;code&gt;x&lt;/code&gt; in &lt;code&gt;tbl&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="28a41273044e2985cf3940ccb5be8070c7fa8dde" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Hashtbl.find_all&amp;nbsp;tbl&amp;nbsp;x&lt;/code&gt; returns the list of all data associated with &lt;code&gt;x&lt;/code&gt; in &lt;code&gt;tbl&lt;/code&gt;. The current binding is returned first, then the previous bindings, in reverse order of introduction in the table.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3c4fde2985dc57edb1960edefc55778097b175b9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Hashtbl.find_opt&amp;nbsp;tbl&amp;nbsp;x&lt;/code&gt; returns the current binding of &lt;code&gt;x&lt;/code&gt; in &lt;code&gt;tbl&lt;/code&gt;, or &lt;code&gt;None&lt;/code&gt; if no such binding exists.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="19b1d4f869de36c5b1cd415ba5d5c55f79150f29" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Hashtbl.fold&amp;nbsp;f&amp;nbsp;tbl&amp;nbsp;init&lt;/code&gt; computes &lt;code&gt;(f&amp;nbsp;kN&amp;nbsp;dN&amp;nbsp;...&amp;nbsp;(f&amp;nbsp;k1&amp;nbsp;d1&amp;nbsp;init)...)&lt;/code&gt;, where &lt;code&gt;k1&amp;nbsp;...&amp;nbsp;kN&lt;/code&gt; are the keys of all bindings in &lt;code&gt;tbl&lt;/code&gt;, and &lt;code&gt;d1&amp;nbsp;...&amp;nbsp;dN&lt;/code&gt; are the associated values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="402cf9324460489189ac1e886b98bbebdea6acc6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Hashtbl.fold&amp;nbsp;f&amp;nbsp;tbl&amp;nbsp;init&lt;/code&gt; computes &lt;code&gt;(f&amp;nbsp;kN&amp;nbsp;dN&amp;nbsp;...&amp;nbsp;(f&amp;nbsp;k1&amp;nbsp;d1&amp;nbsp;init)...)&lt;/code&gt;, where &lt;code&gt;k1&amp;nbsp;...&amp;nbsp;kN&lt;/code&gt; are the keys of all bindings in &lt;code&gt;tbl&lt;/code&gt;, and &lt;code&gt;d1&amp;nbsp;...&amp;nbsp;dN&lt;/code&gt; are the associated values. Each binding is presented exactly once to &lt;code&gt;f&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7d709968f58edd6741e0cb9aad085686a4d25495" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Hashtbl.fold&amp;nbsp;~f&amp;nbsp;tbl&amp;nbsp;~init&lt;/code&gt; computes &lt;code&gt;(f&amp;nbsp;kN&amp;nbsp;dN&amp;nbsp;...&amp;nbsp;(f&amp;nbsp;k1&amp;nbsp;d1&amp;nbsp;init)...)&lt;/code&gt;, where &lt;code&gt;k1&amp;nbsp;...&amp;nbsp;kN&lt;/code&gt; are the keys of all bindings in &lt;code&gt;tbl&lt;/code&gt;, and &lt;code&gt;d1&amp;nbsp;...&amp;nbsp;dN&lt;/code&gt; are the associated values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ccaa837c34c071ae4280ae64382c673875a7464d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Hashtbl.fold&amp;nbsp;~f&amp;nbsp;tbl&amp;nbsp;~init&lt;/code&gt; computes &lt;code&gt;(f&amp;nbsp;kN&amp;nbsp;dN&amp;nbsp;...&amp;nbsp;(f&amp;nbsp;k1&amp;nbsp;d1&amp;nbsp;init)...)&lt;/code&gt;, where &lt;code&gt;k1&amp;nbsp;...&amp;nbsp;kN&lt;/code&gt; are the keys of all bindings in &lt;code&gt;tbl&lt;/code&gt;, and &lt;code&gt;d1&amp;nbsp;...&amp;nbsp;dN&lt;/code&gt; are the associated values. Each binding is presented exactly once to &lt;code&gt;f&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a029253c9551e643499b14cb3afe2a7243f7d452" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Hashtbl.hash&amp;nbsp;x&lt;/code&gt; associates a nonnegative integer to any value of any type.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="902b9e85684c514c2724bba753c4cbae3dff9d09" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Hashtbl.hash&amp;nbsp;x&lt;/code&gt; associates a nonnegative integer to any value of any type. It is guaranteed that if &lt;code&gt;x&amp;nbsp;=&amp;nbsp;y&lt;/code&gt; or &lt;code&gt;Stdlib.compare&amp;nbsp;x&amp;nbsp;y&amp;nbsp;=&amp;nbsp;0&lt;/code&gt;, then &lt;code&gt;hash&amp;nbsp;x&amp;nbsp;=&amp;nbsp;hash&amp;nbsp;y&lt;/code&gt;. Moreover, &lt;code&gt;hash&lt;/code&gt; always terminates, even on cyclic structures.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a4cd6ae19749ca9269377988ef170f314598c993" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Hashtbl.hash_param&amp;nbsp;meaningful&amp;nbsp;total&amp;nbsp;x&lt;/code&gt; computes a hash value for &lt;code&gt;x&lt;/code&gt;, with the same properties as for &lt;code&gt;hash&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="86536cd68fb24b6cdc890d6be0c1511c14cd6193" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Hashtbl.hash_param&amp;nbsp;meaningful&amp;nbsp;total&amp;nbsp;x&lt;/code&gt; computes a hash value for &lt;code&gt;x&lt;/code&gt;, with the same properties as for &lt;code&gt;hash&lt;/code&gt;. The two extra integer parameters &lt;code&gt;meaningful&lt;/code&gt; and &lt;code&gt;total&lt;/code&gt; give more precise control over hashing. Hashing performs a breadth-first, left-to-right traversal of the structure &lt;code&gt;x&lt;/code&gt;, stopping after &lt;code&gt;meaningful&lt;/code&gt; meaningful nodes were encountered, or &lt;code&gt;total&lt;/code&gt; nodes (meaningful or not) were encountered. If &lt;code&gt;total&lt;/code&gt; as specified by the user exceeds a certain value, currently 256, then it is capped to that value. Meaningful nodes are: integers; floating-point numbers; strings; characters; booleans; and constant constructors. Larger values of &lt;code&gt;meaningful&lt;/code&gt; and &lt;code&gt;total&lt;/code&gt; means that more nodes are taken into account to compute the final hash value, and therefore collisions are less likely to happen. However, hashing takes longer. The parameters &lt;code&gt;meaningful&lt;/code&gt; and &lt;code&gt;total&lt;/code&gt; govern the tradeoff between accuracy and speed. As default choices, &lt;a href=&quot;hashtbl#VALhash&quot;&gt;&lt;code&gt;Hashtbl.hash&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;hashtbl#VALseeded_hash&quot;&gt;&lt;code&gt;Hashtbl.seeded_hash&lt;/code&gt;&lt;/a&gt; take &lt;code&gt;meaningful&amp;nbsp;=&amp;nbsp;10&lt;/code&gt; and &lt;code&gt;total&amp;nbsp;=&amp;nbsp;100&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="695581d2c4eaf067355c09b330397494bae31774" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Hashtbl.hash_param&amp;nbsp;meaningful&amp;nbsp;total&amp;nbsp;x&lt;/code&gt; computes a hash value for &lt;code&gt;x&lt;/code&gt;, with the same properties as for &lt;code&gt;hash&lt;/code&gt;. The two extra integer parameters &lt;code&gt;meaningful&lt;/code&gt; and &lt;code&gt;total&lt;/code&gt; give more precise control over hashing. Hashing performs a breadth-first, left-to-right traversal of the structure &lt;code&gt;x&lt;/code&gt;, stopping after &lt;code&gt;meaningful&lt;/code&gt; meaningful nodes were encountered, or &lt;code&gt;total&lt;/code&gt; nodes (meaningful or not) were encountered. If &lt;code&gt;total&lt;/code&gt; as specified by the user exceeds a certain value, currently 256, then it is capped to that value. Meaningful nodes are: integers; floating-point numbers; strings; characters; booleans; and constant constructors. Larger values of &lt;code&gt;meaningful&lt;/code&gt; and &lt;code&gt;total&lt;/code&gt; means that more nodes are taken into account to compute the final hash value, and therefore collisions are less likely to happen. However, hashing takes longer. The parameters &lt;code&gt;meaningful&lt;/code&gt; and &lt;code&gt;total&lt;/code&gt; govern the tradeoff between accuracy and speed. As default choices, &lt;a href=&quot;morelabels.hashtbl#VALhash&quot;&gt;&lt;code&gt;MoreLabels.Hashtbl.hash&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;morelabels.hashtbl#VALseeded_hash&quot;&gt;&lt;code&gt;MoreLabels.Hashtbl.seeded_hash&lt;/code&gt;&lt;/a&gt; take &lt;code&gt;meaningful&amp;nbsp;=&amp;nbsp;10&lt;/code&gt; and &lt;code&gt;total&amp;nbsp;=&amp;nbsp;100&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bd43943bf5b30ca0c748f2fddf1abcdc5f99806b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Hashtbl.iter&amp;nbsp;f&amp;nbsp;tbl&lt;/code&gt; applies &lt;code&gt;f&lt;/code&gt; to all bindings in table &lt;code&gt;tbl&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d75c786dbaf5b1f1c4087340dae995e368914414" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Hashtbl.iter&amp;nbsp;f&amp;nbsp;tbl&lt;/code&gt; applies &lt;code&gt;f&lt;/code&gt; to all bindings in table &lt;code&gt;tbl&lt;/code&gt;. &lt;code&gt;f&lt;/code&gt; receives the key as first argument, and the associated value as second argument. Each binding is presented exactly once to &lt;code&gt;f&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7315f31bf304630826f6c9668ebc7d708a123ec9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Hashtbl.iter&amp;nbsp;~f&amp;nbsp;tbl&lt;/code&gt; applies &lt;code&gt;f&lt;/code&gt; to all bindings in table &lt;code&gt;tbl&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="049a14d662bcd0b9f14b0da45e010a8ba205defd" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Hashtbl.iter&amp;nbsp;~f&amp;nbsp;tbl&lt;/code&gt; applies &lt;code&gt;f&lt;/code&gt; to all bindings in table &lt;code&gt;tbl&lt;/code&gt;. &lt;code&gt;f&lt;/code&gt; receives the key as first argument, and the associated value as second argument. Each binding is presented exactly once to &lt;code&gt;f&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e3d61dd0e3f50d9bed16534a50b9badffdbb7e7e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Hashtbl.length&amp;nbsp;tbl&lt;/code&gt; returns the number of bindings in &lt;code&gt;tbl&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="30c32fbf9cd6f7f07d1b6d9cd4cd0c7428b130fe" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Hashtbl.length&amp;nbsp;tbl&lt;/code&gt; returns the number of bindings in &lt;code&gt;tbl&lt;/code&gt;. It takes constant time. Multiple bindings are counted once each, so &lt;code&gt;Hashtbl.length&lt;/code&gt; gives the number of times &lt;code&gt;Hashtbl.iter&lt;/code&gt; calls its first argument.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="efce2678aade426571f70c915928dfb38f7a14b1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Hashtbl.mem&amp;nbsp;tbl&amp;nbsp;x&lt;/code&gt; checks if &lt;code&gt;x&lt;/code&gt; is bound in &lt;code&gt;tbl&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b94354f0a32bd2021a704723016e7161e4128f75" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Hashtbl.remove&amp;nbsp;tbl&amp;nbsp;x&lt;/code&gt; removes the current binding of &lt;code&gt;x&lt;/code&gt; in &lt;code&gt;tbl&lt;/code&gt;, restoring the previous binding if it exists.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c592dfbf15960bcf4824485cadde3ac170afca1e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Hashtbl.remove&amp;nbsp;tbl&amp;nbsp;x&lt;/code&gt; removes the current binding of &lt;code&gt;x&lt;/code&gt; in &lt;code&gt;tbl&lt;/code&gt;, restoring the previous binding if it exists. It does nothing if &lt;code&gt;x&lt;/code&gt; is not bound in &lt;code&gt;tbl&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="25e1295129536a1172ce8414d079008524c5b978" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Hashtbl.replace&amp;nbsp;tbl&amp;nbsp;key&amp;nbsp;data&lt;/code&gt; replaces the current binding of &lt;code&gt;key&lt;/code&gt; in &lt;code&gt;tbl&lt;/code&gt; by a binding of &lt;code&gt;key&lt;/code&gt; to &lt;code&gt;data&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="20195862dec67ff3df40549844d0d88fef15fec2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Hashtbl.replace&amp;nbsp;tbl&amp;nbsp;key&amp;nbsp;data&lt;/code&gt; replaces the current binding of &lt;code&gt;key&lt;/code&gt; in &lt;code&gt;tbl&lt;/code&gt; by a binding of &lt;code&gt;key&lt;/code&gt; to &lt;code&gt;data&lt;/code&gt;. If &lt;code&gt;key&lt;/code&gt; is unbound in &lt;code&gt;tbl&lt;/code&gt;, a binding of &lt;code&gt;key&lt;/code&gt; to &lt;code&gt;data&lt;/code&gt; is added to &lt;code&gt;tbl&lt;/code&gt;. This is functionally equivalent to &lt;a href=&quot;hashtbl#VALremove&quot;&gt;&lt;code&gt;Hashtbl.remove&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;nbsp;tbl&amp;nbsp;key&lt;/code&gt; followed by &lt;a href=&quot;hashtbl#VALadd&quot;&gt;&lt;code&gt;Hashtbl.add&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;nbsp;tbl&amp;nbsp;key&amp;nbsp;data&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b8d862bba9976e2c532e41d9236b348afa830a34" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Hashtbl.replace&amp;nbsp;tbl&amp;nbsp;x&amp;nbsp;y&lt;/code&gt; replaces the current binding of &lt;code&gt;x&lt;/code&gt; in &lt;code&gt;tbl&lt;/code&gt; by a binding of &lt;code&gt;x&lt;/code&gt; to &lt;code&gt;y&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b95239e6806aba87ad6919a10d223946f41dcb92" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Hashtbl.replace&amp;nbsp;tbl&amp;nbsp;x&amp;nbsp;y&lt;/code&gt; replaces the current binding of &lt;code&gt;x&lt;/code&gt; in &lt;code&gt;tbl&lt;/code&gt; by a binding of &lt;code&gt;x&lt;/code&gt; to &lt;code&gt;y&lt;/code&gt;. If &lt;code&gt;x&lt;/code&gt; is unbound in &lt;code&gt;tbl&lt;/code&gt;, a binding of &lt;code&gt;x&lt;/code&gt; to &lt;code&gt;y&lt;/code&gt; is added to &lt;code&gt;tbl&lt;/code&gt;. This is functionally equivalent to &lt;a href=&quot;hashtbl#VALremove&quot;&gt;&lt;code&gt;Hashtbl.remove&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;nbsp;tbl&amp;nbsp;x&lt;/code&gt; followed by &lt;a href=&quot;hashtbl#VALadd&quot;&gt;&lt;code&gt;Hashtbl.add&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;nbsp;tbl&amp;nbsp;x&amp;nbsp;y&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9bca76a7f721d5dd3f70d816ca4e2a3a8bcc6929" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Hashtbl.replace&amp;nbsp;tbl&amp;nbsp;~key&amp;nbsp;~data&lt;/code&gt; replaces the current binding of &lt;code&gt;key&lt;/code&gt; in &lt;code&gt;tbl&lt;/code&gt; by a binding of &lt;code&gt;key&lt;/code&gt; to &lt;code&gt;data&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="084510c546aafb67d935439f461c9a906bc1fcbb" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Hashtbl.replace&amp;nbsp;tbl&amp;nbsp;~key&amp;nbsp;~data&lt;/code&gt; replaces the current binding of &lt;code&gt;key&lt;/code&gt; in &lt;code&gt;tbl&lt;/code&gt; by a binding of &lt;code&gt;key&lt;/code&gt; to &lt;code&gt;data&lt;/code&gt;. If &lt;code&gt;key&lt;/code&gt; is unbound in &lt;code&gt;tbl&lt;/code&gt;, a binding of &lt;code&gt;key&lt;/code&gt; to &lt;code&gt;data&lt;/code&gt; is added to &lt;code&gt;tbl&lt;/code&gt;. This is functionally equivalent to &lt;a href=&quot;morelabels.hashtbl#VALremove&quot;&gt;&lt;code&gt;MoreLabels.Hashtbl.remove&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;nbsp;tbl&amp;nbsp;key&lt;/code&gt; followed by &lt;a href=&quot;morelabels.hashtbl#VALadd&quot;&gt;&lt;code&gt;MoreLabels.Hashtbl.add&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;nbsp;tbl&amp;nbsp;key&amp;nbsp;data&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="425e583a41cca8280835668212f83c441de47b1c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Hashtbl.stats&amp;nbsp;tbl&lt;/code&gt; returns statistics about the table &lt;code&gt;tbl&lt;/code&gt;: number of buckets, size of the biggest bucket, distribution of buckets by size.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1ae1bb5038f531be3745009c94b8c3211edf2dc2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Int32.shift_left&amp;nbsp;x&amp;nbsp;y&lt;/code&gt; shifts &lt;code&gt;x&lt;/code&gt; to the left by &lt;code&gt;y&lt;/code&gt; bits.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c70409977bd5915a4ea34adaa4e67346624b7f5d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Int32.shift_left&amp;nbsp;x&amp;nbsp;y&lt;/code&gt; shifts &lt;code&gt;x&lt;/code&gt; to the left by &lt;code&gt;y&lt;/code&gt; bits. The result is unspecified if &lt;code&gt;y&amp;nbsp;&amp;lt;&amp;nbsp;0&lt;/code&gt; or &lt;code&gt;y&amp;nbsp;&amp;gt;=&amp;nbsp;32&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fafc435e819c2df3270df3cb939c0d717ee8cc89" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Int32.shift_right&amp;nbsp;x&amp;nbsp;y&lt;/code&gt; shifts &lt;code&gt;x&lt;/code&gt; to the right by &lt;code&gt;y&lt;/code&gt; bits.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="03e88416cf966ce66d27fa4bbc3fdea2c70d9bd9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Int32.shift_right&amp;nbsp;x&amp;nbsp;y&lt;/code&gt; shifts &lt;code&gt;x&lt;/code&gt; to the right by &lt;code&gt;y&lt;/code&gt; bits. This is an arithmetic shift: the sign bit of &lt;code&gt;x&lt;/code&gt; is replicated and inserted in the vacated bits. The result is unspecified if &lt;code&gt;y&amp;nbsp;&amp;lt;&amp;nbsp;0&lt;/code&gt; or &lt;code&gt;y&amp;nbsp;&amp;gt;=&amp;nbsp;32&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d05e2c6178ebcb02f8cd379f92f60b90f8c57d6e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Int32.shift_right_logical&amp;nbsp;x&amp;nbsp;y&lt;/code&gt; shifts &lt;code&gt;x&lt;/code&gt; to the right by &lt;code&gt;y&lt;/code&gt; bits.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a96a621149e13cf74e8cd9b98df5bee43e59b7da" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Int32.shift_right_logical&amp;nbsp;x&amp;nbsp;y&lt;/code&gt; shifts &lt;code&gt;x&lt;/code&gt; to the right by &lt;code&gt;y&lt;/code&gt; bits. This is a logical shift: zeroes are inserted in the vacated bits regardless of the sign of &lt;code&gt;x&lt;/code&gt;. The result is unspecified if &lt;code&gt;y&amp;nbsp;&amp;lt;&amp;nbsp;0&lt;/code&gt; or &lt;code&gt;y&amp;nbsp;&amp;gt;=&amp;nbsp;32&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cd2f22e07039b4633f48d0d4b857e1d1a53e7d32" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Int64.shift_left&amp;nbsp;x&amp;nbsp;y&lt;/code&gt; shifts &lt;code&gt;x&lt;/code&gt; to the left by &lt;code&gt;y&lt;/code&gt; bits.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="581e23f1370eddb2daadcc6bfa19760c46dea7e6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Int64.shift_left&amp;nbsp;x&amp;nbsp;y&lt;/code&gt; shifts &lt;code&gt;x&lt;/code&gt; to the left by &lt;code&gt;y&lt;/code&gt; bits. The result is unspecified if &lt;code&gt;y&amp;nbsp;&amp;lt;&amp;nbsp;0&lt;/code&gt; or &lt;code&gt;y&amp;nbsp;&amp;gt;=&amp;nbsp;64&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="15a8e74344244a3933aa74da48457179a640d4a4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Int64.shift_right&amp;nbsp;x&amp;nbsp;y&lt;/code&gt; shifts &lt;code&gt;x&lt;/code&gt; to the right by &lt;code&gt;y&lt;/code&gt; bits.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="19c42d58c884d401d87ec5d40299314c8665ac73" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Int64.shift_right&amp;nbsp;x&amp;nbsp;y&lt;/code&gt; shifts &lt;code&gt;x&lt;/code&gt; to the right by &lt;code&gt;y&lt;/code&gt; bits. This is an arithmetic shift: the sign bit of &lt;code&gt;x&lt;/code&gt; is replicated and inserted in the vacated bits. The result is unspecified if &lt;code&gt;y&amp;nbsp;&amp;lt;&amp;nbsp;0&lt;/code&gt; or &lt;code&gt;y&amp;nbsp;&amp;gt;=&amp;nbsp;64&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="17b8e8ebb2d02ef677cffc1e90d6ae578762c806" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Int64.shift_right_logical&amp;nbsp;x&amp;nbsp;y&lt;/code&gt; shifts &lt;code&gt;x&lt;/code&gt; to the right by &lt;code&gt;y&lt;/code&gt; bits.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ffaf3f59e1c1633bab4af2504b225f44fa599c95" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Int64.shift_right_logical&amp;nbsp;x&amp;nbsp;y&lt;/code&gt; shifts &lt;code&gt;x&lt;/code&gt; to the right by &lt;code&gt;y&lt;/code&gt; bits. This is a logical shift: zeroes are inserted in the vacated bits regardless of the sign of &lt;code&gt;x&lt;/code&gt;. The result is unspecified if &lt;code&gt;y&amp;nbsp;&amp;lt;&amp;nbsp;0&lt;/code&gt; or &lt;code&gt;y&amp;nbsp;&amp;gt;=&amp;nbsp;64&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0ebdea843325c724e839af250d7b5250b62927cb" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Invalid_argument&lt;/code&gt; if &lt;code&gt;i+1&lt;/code&gt; is not a valid position in &lt;code&gt;s&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8a16048dc506de9bf7a3b17abd47177e2da723d8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Invalid_argument&lt;/code&gt; if &lt;code&gt;i&lt;/code&gt; is not a valid position in &lt;code&gt;s&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6b48b8ba21b6467c0984566efb79d4227b218922" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Invalid_argument&lt;/code&gt; if &lt;code&gt;n&lt;/code&gt; is negative.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="50893e85c861a57595ec399491b9400c9daeb38d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Invalid_argument&lt;/code&gt; if &lt;code&gt;pos&lt;/code&gt; and &lt;code&gt;len&lt;/code&gt; do not designate a valid range of &lt;code&gt;buf&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="13df257cedd347f652ee5de513b2e428f276068e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Invalid_argument&lt;/code&gt; if there are fewer than &lt;code&gt;n&lt;/code&gt; groups in the regular expression.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="50fe68b50d0b236a6a5a348722f6a87120ddaa29" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Invalid_argument&lt;/code&gt; or &lt;code&gt;Failure&lt;/code&gt; may be raised in cases where argument validation fails.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2d2e8ce887c125ebed9fcbf6eff95ee22ab790f4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Ld&lt;/code&gt;, &lt;code&gt;Li&lt;/code&gt;, &lt;code&gt;Lu&lt;/code&gt;, &lt;code&gt;Lx&lt;/code&gt;, &lt;code&gt;LX&lt;/code&gt;, &lt;code&gt;Lo&lt;/code&gt;: convert an &lt;code&gt;int64&lt;/code&gt; argument to the format specified by the second letter.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9cf0e047c44fe19079c04d21e27e249fbbc0fa50" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Ld&lt;/code&gt;, &lt;code&gt;Li&lt;/code&gt;, &lt;code&gt;Lu&lt;/code&gt;, &lt;code&gt;Lx&lt;/code&gt;, &lt;code&gt;LX&lt;/code&gt;, &lt;code&gt;Lo&lt;/code&gt;: reads an &lt;code&gt;int64&lt;/code&gt; argument to the format specified by the second letter for regular integers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b998c28632292956169b93931a78d37104035468" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Lexing.lexeme&amp;nbsp;lexbuf&lt;/code&gt; returns the string matched by the regular expression.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dff6077ad6719e22ed8af247871cfd26aae3ca69" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Lexing.lexeme_char&amp;nbsp;lexbuf&amp;nbsp;i&lt;/code&gt; returns character number &lt;code&gt;i&lt;/code&gt; in the matched string.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bb89b9435257d0472636d7392b8b8f325616377c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Lexing.lexeme_end&amp;nbsp;lexbuf&lt;/code&gt; returns the offset in the input stream of the character following the last character of the matched string.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7c606dafa2df15db1a77152cc3975abcb8c57a8d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Lexing.lexeme_end&amp;nbsp;lexbuf&lt;/code&gt; returns the offset in the input stream of the character following the last character of the matched string. The first character of the stream has offset 0.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ca3e8e0739beda46c2700ef495b2108c5414d646" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Lexing.lexeme_start&amp;nbsp;lexbuf&lt;/code&gt; returns the offset in the input stream of the first character of the matched string.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5fd718ad197f99c81a62df27c5423d503f63bc7a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Lexing.lexeme_start&amp;nbsp;lexbuf&lt;/code&gt; returns the offset in the input stream of the first character of the matched string. The first character of the stream has offset 0.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3fd89c4855ff19ec9817613bf2ce43745647ac4f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;List.concat_map&amp;nbsp;f&amp;nbsp;l&lt;/code&gt; gives the same result as &lt;a href=&quot;list#VALconcat&quot;&gt;&lt;code&gt;List.concat&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;nbsp;(&lt;/code&gt;&lt;a href=&quot;list#VALmap&quot;&gt;&lt;code&gt;List.map&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;nbsp;f&amp;nbsp;l)&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="81ab8e8b376cd5561229e350f5723bdb021742f2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;List.concat_map&amp;nbsp;f&amp;nbsp;l&lt;/code&gt; gives the same result as &lt;a href=&quot;list#VALconcat&quot;&gt;&lt;code&gt;List.concat&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;nbsp;(&lt;/code&gt;&lt;a href=&quot;list#VALmap&quot;&gt;&lt;code&gt;List.map&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;nbsp;f&amp;nbsp;l)&lt;/code&gt;. Tail-recursive.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e8274629b085dba23be161846422fab9faf4e76d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;List.fold_left&amp;nbsp;f&amp;nbsp;a&amp;nbsp;[b1;&amp;nbsp;...;&amp;nbsp;bn]&lt;/code&gt; is &lt;code&gt;f&amp;nbsp;(...&amp;nbsp;(f&amp;nbsp;(f&amp;nbsp;a&amp;nbsp;b1)&amp;nbsp;b2)&amp;nbsp;...)&amp;nbsp;bn&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dbce64996702d8f1c48445de09cbc834f75bb3b5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;List.fold_left2&amp;nbsp;f&amp;nbsp;a&amp;nbsp;[b1;&amp;nbsp;...;&amp;nbsp;bn]&amp;nbsp;[c1;&amp;nbsp;...;&amp;nbsp;cn]&lt;/code&gt; is &lt;code&gt;f&amp;nbsp;(...&amp;nbsp;(f&amp;nbsp;(f&amp;nbsp;a&amp;nbsp;b1&amp;nbsp;c1)&amp;nbsp;b2&amp;nbsp;c2)&amp;nbsp;...)&amp;nbsp;bn&amp;nbsp;cn&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fdbb0819cefd45e28cfb704a77251516a4380f07" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;List.fold_right&amp;nbsp;f&amp;nbsp;[a1;&amp;nbsp;...;&amp;nbsp;an]&amp;nbsp;b&lt;/code&gt; is &lt;code&gt;f&amp;nbsp;a1&amp;nbsp;(f&amp;nbsp;a2&amp;nbsp;(...&amp;nbsp;(f&amp;nbsp;an&amp;nbsp;b)&amp;nbsp;...))&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2a058841eafc8bc1c2343a871570bdc4cf020ead" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;List.fold_right&amp;nbsp;f&amp;nbsp;[a1;&amp;nbsp;...;&amp;nbsp;an]&amp;nbsp;b&lt;/code&gt; is &lt;code&gt;f&amp;nbsp;a1&amp;nbsp;(f&amp;nbsp;a2&amp;nbsp;(...&amp;nbsp;(f&amp;nbsp;an&amp;nbsp;b)&amp;nbsp;...))&lt;/code&gt;. Not tail-recursive.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3c7ac48a14a797e68dc70ce3fb759c84c05621cb" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;List.fold_right2&amp;nbsp;f&amp;nbsp;[a1;&amp;nbsp;...;&amp;nbsp;an]&amp;nbsp;[b1;&amp;nbsp;...;&amp;nbsp;bn]&amp;nbsp;c&lt;/code&gt; is &lt;code&gt;f&amp;nbsp;a1&amp;nbsp;b1&amp;nbsp;(f&amp;nbsp;a2&amp;nbsp;b2&amp;nbsp;(...&amp;nbsp;(f&amp;nbsp;an&amp;nbsp;bn&amp;nbsp;c)&amp;nbsp;...))&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4d6cd90b627c4b86f9c9f007ec27f7116525deb1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;List.init&amp;nbsp;len&amp;nbsp;f&lt;/code&gt; is &lt;code&gt;[f&amp;nbsp;0;&amp;nbsp;f&amp;nbsp;1;&amp;nbsp;...;&amp;nbsp;f&amp;nbsp;(len-1)]&lt;/code&gt;, evaluated left to right.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d6b366de831c4adcc0f341ba8b7466d1e1f5d253" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;List.init&amp;nbsp;len&amp;nbsp;f&lt;/code&gt; is &lt;code&gt;f&amp;nbsp;0;&amp;nbsp;f&amp;nbsp;1;&amp;nbsp;...;&amp;nbsp;f&amp;nbsp;(len-1)&lt;/code&gt;, evaluated left to right.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a9e6fa351cf3f883d0ef0f7c6e9c8fcccb2ecbeb" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;List.iter&amp;nbsp;f&amp;nbsp;[a1;&amp;nbsp;...;&amp;nbsp;an]&lt;/code&gt; applies function &lt;code&gt;f&lt;/code&gt; in turn to &lt;code&gt;a1;&amp;nbsp;...;&amp;nbsp;an&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0b2bf24550ce67e163b28a5a5280398643ec9bbb" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;List.iter&amp;nbsp;f&amp;nbsp;[a1;&amp;nbsp;...;&amp;nbsp;an]&lt;/code&gt; applies function &lt;code&gt;f&lt;/code&gt; in turn to &lt;code&gt;a1;&amp;nbsp;...;&amp;nbsp;an&lt;/code&gt;. It is equivalent to &lt;code&gt;begin&amp;nbsp;f&amp;nbsp;a1;&amp;nbsp;f&amp;nbsp;a2;&amp;nbsp;...;&amp;nbsp;f&amp;nbsp;an;&amp;nbsp;()&amp;nbsp;end&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0701f98bcf24430d468028df1dfc732c390ce172" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;List.iter2&amp;nbsp;f&amp;nbsp;[a1;&amp;nbsp;...;&amp;nbsp;an]&amp;nbsp;[b1;&amp;nbsp;...;&amp;nbsp;bn]&lt;/code&gt; calls in turn &lt;code&gt;f&amp;nbsp;a1&amp;nbsp;b1;&amp;nbsp;...;&amp;nbsp;f&amp;nbsp;an&amp;nbsp;bn&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f8355fc13c34994bd49ddc6649d8e27d3ee2c330" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;List.map&amp;nbsp;f&amp;nbsp;[a1;&amp;nbsp;...;&amp;nbsp;an]&lt;/code&gt; applies function &lt;code&gt;f&lt;/code&gt; to &lt;code&gt;a1,&amp;nbsp;...,&amp;nbsp;an&lt;/code&gt;, and builds the list &lt;code&gt;[f&amp;nbsp;a1;&amp;nbsp;...;&amp;nbsp;f&amp;nbsp;an]&lt;/code&gt; with the results returned by &lt;code&gt;f&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="91111a909419ae33774213901353f58f5ad02007" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;List.map&amp;nbsp;f&amp;nbsp;[a1;&amp;nbsp;...;&amp;nbsp;an]&lt;/code&gt; applies function &lt;code&gt;f&lt;/code&gt; to &lt;code&gt;a1,&amp;nbsp;...,&amp;nbsp;an&lt;/code&gt;, and builds the list &lt;code&gt;[f&amp;nbsp;a1;&amp;nbsp;...;&amp;nbsp;f&amp;nbsp;an]&lt;/code&gt; with the results returned by &lt;code&gt;f&lt;/code&gt;. Not tail-recursive.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3bf1ccd2d5304aab2d3ec17a58c67c56bba7a53a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;List.map2&amp;nbsp;f&amp;nbsp;[a1;&amp;nbsp;...;&amp;nbsp;an]&amp;nbsp;[b1;&amp;nbsp;...;&amp;nbsp;bn]&lt;/code&gt; is &lt;code&gt;[f&amp;nbsp;a1&amp;nbsp;b1;&amp;nbsp;...;&amp;nbsp;f&amp;nbsp;an&amp;nbsp;bn]&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="79174865e769a85767e89baaf5162473c329dc21" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;List.rev_append&amp;nbsp;l1&amp;nbsp;l2&lt;/code&gt; reverses &lt;code&gt;l1&lt;/code&gt; and concatenates it to &lt;code&gt;l2&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="740b4916e761c7793e24312e0a108ae5840b7f85" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;List.rev_append&amp;nbsp;l1&amp;nbsp;l2&lt;/code&gt; reverses &lt;code&gt;l1&lt;/code&gt; and concatenates it to &lt;code&gt;l2&lt;/code&gt;. This is equivalent to &lt;a href=&quot;list#VALrev&quot;&gt;&lt;code&gt;List.rev&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;nbsp;l1&amp;nbsp;@&amp;nbsp;l2&lt;/code&gt;, but &lt;code&gt;rev_append&lt;/code&gt; is tail-recursive and more efficient.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="07c610e4fd905593a6e09d6e5703776563b846a0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;List.rev_append&amp;nbsp;l1&amp;nbsp;l2&lt;/code&gt; reverses &lt;code&gt;l1&lt;/code&gt; and concatenates it with &lt;code&gt;l2&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3def4cd21bbd0b48fbdd69292967930744ff1be7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;List.rev_append&amp;nbsp;l1&amp;nbsp;l2&lt;/code&gt; reverses &lt;code&gt;l1&lt;/code&gt; and concatenates it with &lt;code&gt;l2&lt;/code&gt;. This is equivalent to &lt;code&gt;(&lt;/code&gt;&lt;a href=&quot;list#VALrev&quot;&gt;&lt;code&gt;List.rev&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;nbsp;l1)&amp;nbsp;@&amp;nbsp;l2&lt;/code&gt;, but &lt;code&gt;rev_append&lt;/code&gt; is tail-recursive and more efficient.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a2a32c921d6052761397ac54a3720621a82a0b53" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;List.rev_map&amp;nbsp;f&amp;nbsp;l&lt;/code&gt; gives the same result as &lt;a href=&quot;list#VALrev&quot;&gt;&lt;code&gt;List.rev&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;nbsp;(&lt;/code&gt;&lt;a href=&quot;list#VALmap&quot;&gt;&lt;code&gt;List.map&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;nbsp;f&amp;nbsp;l)&lt;/code&gt;, but is tail-recursive and more efficient.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="03873d65b45ec01fd1c3a36fd09a3b9bb168b434" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;List.rev_map2&amp;nbsp;f&amp;nbsp;l1&amp;nbsp;l2&lt;/code&gt; gives the same result as &lt;a href=&quot;list#VALrev&quot;&gt;&lt;code&gt;List.rev&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;nbsp;(&lt;/code&gt;&lt;a href=&quot;list#VALmap2&quot;&gt;&lt;code&gt;List.map2&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;nbsp;f&amp;nbsp;l1&amp;nbsp;l2)&lt;/code&gt;, but is tail-recursive and more efficient.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d8df4c6d365efa1f1fcb6e6007bff2441072b2c0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Marshal.from_bytes&amp;nbsp;buff&amp;nbsp;ofs&lt;/code&gt; unmarshals a structured value like &lt;a href=&quot;marshal#VALfrom_channel&quot;&gt;&lt;code&gt;Marshal.from_channel&lt;/code&gt;&lt;/a&gt; does, except that the byte representation is not read from a channel, but taken from the byte sequence &lt;code&gt;buff&lt;/code&gt;, starting at position &lt;code&gt;ofs&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2da07af373175a6b41bb8e16fc70bd99dabf1772" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Marshal.from_bytes&amp;nbsp;buff&amp;nbsp;ofs&lt;/code&gt; unmarshals a structured value like &lt;a href=&quot;marshal#VALfrom_channel&quot;&gt;&lt;code&gt;Marshal.from_channel&lt;/code&gt;&lt;/a&gt; does, except that the byte representation is not read from a channel, but taken from the byte sequence &lt;code&gt;buff&lt;/code&gt;, starting at position &lt;code&gt;ofs&lt;/code&gt;. The byte sequence is not mutated.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="881698d5c98acd5d7271725cc99b598cd925d697" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Marshal.from_channel&amp;nbsp;chan&lt;/code&gt; reads from channel &lt;code&gt;chan&lt;/code&gt; the byte representation of a structured value, as produced by one of the &lt;code&gt;Marshal.to_*&lt;/code&gt; functions, and reconstructs and returns the corresponding value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6487d434d06c24a70872fcda7e8ed11da646eb0c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Marshal.to_buffer&amp;nbsp;buff&amp;nbsp;ofs&amp;nbsp;len&amp;nbsp;v&amp;nbsp;flags&lt;/code&gt; marshals the value &lt;code&gt;v&lt;/code&gt;, storing its byte representation in the sequence &lt;code&gt;buff&lt;/code&gt;, starting at index &lt;code&gt;ofs&lt;/code&gt;, and writing at most &lt;code&gt;len&lt;/code&gt; bytes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="460a543922e0976275a498bc1693a0cbadbd8272" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Marshal.to_buffer&amp;nbsp;buff&amp;nbsp;ofs&amp;nbsp;len&amp;nbsp;v&amp;nbsp;flags&lt;/code&gt; marshals the value &lt;code&gt;v&lt;/code&gt;, storing its byte representation in the sequence &lt;code&gt;buff&lt;/code&gt;, starting at index &lt;code&gt;ofs&lt;/code&gt;, and writing at most &lt;code&gt;len&lt;/code&gt; bytes. It returns the number of bytes actually written to the sequence. If the byte representation of &lt;code&gt;v&lt;/code&gt; does not fit in &lt;code&gt;len&lt;/code&gt; characters, the exception &lt;code&gt;Failure&lt;/code&gt; is raised.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4c1375574ec6114a92659b4c1821cffa0845ab47" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Marshal.to_bytes&amp;nbsp;v&amp;nbsp;flags&lt;/code&gt; returns a byte sequence containing the representation of &lt;code&gt;v&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="66564227bfb3df8c77500c849e97b8c54ab38e8a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Marshal.to_bytes&amp;nbsp;v&amp;nbsp;flags&lt;/code&gt; returns a byte sequence containing the representation of &lt;code&gt;v&lt;/code&gt;. The &lt;code&gt;flags&lt;/code&gt; argument has the same meaning as for &lt;a href=&quot;marshal#VALto_channel&quot;&gt;&lt;code&gt;Marshal.to_channel&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="53f7726c437f7a29a8cf8c31a59f53476c30446a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Marshal.to_channel&amp;nbsp;chan&amp;nbsp;v&amp;nbsp;flags&lt;/code&gt; writes the representation of &lt;code&gt;v&lt;/code&gt; on channel &lt;code&gt;chan&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5490d852d1e4454a36054981ba5d69a7b2f917b4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Marshal.to_channel&amp;nbsp;chan&amp;nbsp;v&amp;nbsp;flags&lt;/code&gt; writes the representation of &lt;code&gt;v&lt;/code&gt; on channel &lt;code&gt;chan&lt;/code&gt;. The &lt;code&gt;flags&lt;/code&gt; argument is a possibly empty list of flags that governs the marshaling behavior with respect to sharing, functional values, and compatibility between 32- and 64-bit platforms.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f889ec712415070e2282e67e3257a799a9c13c1e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Memprof&lt;/code&gt; is a sampling engine for allocated memory words.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="17781deeadd733cc018827db6edcf32b347bd65f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Memprof&lt;/code&gt; is a sampling engine for allocated memory words. Every allocated word has a probability of being sampled equal to a configurable sampling rate. Once a block is sampled, it becomes tracked. A tracked block triggers a user-defined callback as soon as it is allocated, promoted or deallocated.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d66730f9c971fadf4a276aa22d8d37f3ead3b9ea" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;N&lt;/code&gt; or &lt;code&gt;L&lt;/code&gt;: returns the number of tokens read so far.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5b2bb0d7fedadd1a3844aa773e84acfed4fc278c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Nativeint.shift_left&amp;nbsp;x&amp;nbsp;y&lt;/code&gt; shifts &lt;code&gt;x&lt;/code&gt; to the left by &lt;code&gt;y&lt;/code&gt; bits.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ba19a9c37a68f1778a0d183ebeed50378bcb5986" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Nativeint.shift_left&amp;nbsp;x&amp;nbsp;y&lt;/code&gt; shifts &lt;code&gt;x&lt;/code&gt; to the left by &lt;code&gt;y&lt;/code&gt; bits. The result is unspecified if &lt;code&gt;y&amp;nbsp;&amp;lt;&amp;nbsp;0&lt;/code&gt; or &lt;code&gt;y&amp;nbsp;&amp;gt;=&amp;nbsp;bitsize&lt;/code&gt;, where &lt;code&gt;bitsize&lt;/code&gt; is &lt;code&gt;32&lt;/code&gt; on a 32-bit platform and &lt;code&gt;64&lt;/code&gt; on a 64-bit platform.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="60d73a64ee5ac00fe9d136a2b412989423c543a1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Nativeint.shift_right&amp;nbsp;x&amp;nbsp;y&lt;/code&gt; shifts &lt;code&gt;x&lt;/code&gt; to the right by &lt;code&gt;y&lt;/code&gt; bits.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="00e9125334a9a5fca5b463c3b9c628ddccb7b805" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Nativeint.shift_right&amp;nbsp;x&amp;nbsp;y&lt;/code&gt; shifts &lt;code&gt;x&lt;/code&gt; to the right by &lt;code&gt;y&lt;/code&gt; bits. This is an arithmetic shift: the sign bit of &lt;code&gt;x&lt;/code&gt; is replicated and inserted in the vacated bits. The result is unspecified if &lt;code&gt;y&amp;nbsp;&amp;lt;&amp;nbsp;0&lt;/code&gt; or &lt;code&gt;y&amp;nbsp;&amp;gt;=&amp;nbsp;bitsize&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bf27adc7a22cdfcb61e97405c46c2d17f28e7548" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Nativeint.shift_right_logical&amp;nbsp;x&amp;nbsp;y&lt;/code&gt; shifts &lt;code&gt;x&lt;/code&gt; to the right by &lt;code&gt;y&lt;/code&gt; bits.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c73821e98e29388b090a54704c664bb68bf0ea5c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Nativeint.shift_right_logical&amp;nbsp;x&amp;nbsp;y&lt;/code&gt; shifts &lt;code&gt;x&lt;/code&gt; to the right by &lt;code&gt;y&lt;/code&gt; bits. This is a logical shift: zeroes are inserted in the vacated bits regardless of the sign of &lt;code&gt;x&lt;/code&gt;. The result is unspecified if &lt;code&gt;y&amp;nbsp;&amp;lt;&amp;nbsp;0&lt;/code&gt; or &lt;code&gt;y&amp;nbsp;&amp;gt;=&amp;nbsp;bitsize&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="149dde2e20e39dc5c7243c8ad7e574e96d10f26c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Not_found&lt;/code&gt; if &lt;code&gt;c&lt;/code&gt; does not occur in &lt;code&gt;s&lt;/code&gt; after position &lt;code&gt;i&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f392814e877e4302efc358840433ac5a271a6673" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Not_found&lt;/code&gt; if &lt;code&gt;c&lt;/code&gt; does not occur in &lt;code&gt;s&lt;/code&gt; before position &lt;code&gt;i+1&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9631fb20423ee64cf17e7c1537c0f53ffd0e071f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Not_found&lt;/code&gt; if the &lt;code&gt;n&lt;/code&gt;th group of the regular expression was not matched.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="adc8fcd6134d3762ac4822f75c36174347f70d08" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Oo.copy&amp;nbsp;o&lt;/code&gt; returns a copy of object &lt;code&gt;o&lt;/code&gt;, that is a fresh object with the same methods and instance variables as &lt;code&gt;o&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5c68251e373bc9d79a2d6d6978258307dfcd1954" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Output_indent&amp;nbsp;i&lt;/code&gt;: symbolic indentation of size &lt;code&gt;i&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a82735ffb8cfc486791563d04e20d2e22c080fe4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Output_spaces&amp;nbsp;n&lt;/code&gt;: symbolic command to output &lt;code&gt;n&lt;/code&gt; spaces</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c83669e46eaec773376797c0331b56104641e333" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Output_string&amp;nbsp;s&lt;/code&gt;: symbolic output for string &lt;code&gt;s&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="26dc10708a1183f8186a432c314a062b86433d7b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Printexc.backtrace_status()&lt;/code&gt; returns &lt;code&gt;true&lt;/code&gt; if exception backtraces are currently recorded, &lt;code&gt;false&lt;/code&gt; if not.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8088c4d27ee16b069818a8e26d20b2e599a93c19" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Printexc.catch&amp;nbsp;fn&amp;nbsp;x&lt;/code&gt; is similar to &lt;a href=&quot;printexc#VALprint&quot;&gt;&lt;code&gt;Printexc.print&lt;/code&gt;&lt;/a&gt;, but aborts the program with exit code 2 after printing the uncaught exception.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="be58d19075c8b3c15200cf39bededd342863ae0a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Printexc.catch&amp;nbsp;fn&amp;nbsp;x&lt;/code&gt; is similar to &lt;a href=&quot;printexc#VALprint&quot;&gt;&lt;code&gt;Printexc.print&lt;/code&gt;&lt;/a&gt;, but aborts the program with exit code 2 after printing the uncaught exception. This function is deprecated: the runtime system is now able to print uncaught exceptions as precisely as &lt;code&gt;Printexc.catch&lt;/code&gt; does. Moreover, calling &lt;code&gt;Printexc.catch&lt;/code&gt; makes it harder to track the location of the exception using the debugger or the stack backtrace facility. So, do not use &lt;code&gt;Printexc.catch&lt;/code&gt; in new code.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="51177d9dbba7190f94180c054eab76b229cdfa69" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Printexc.default_uncaught_exception_handler&lt;/code&gt; prints the exception and backtrace on standard error output.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9372aa3f53dc760a6e46658b8109099772c44227" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Printexc.exn_slot_id&lt;/code&gt; returns an integer which uniquely identifies the constructor used to create the exception value &lt;code&gt;exn&lt;/code&gt; (in the current runtime).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7fcd0f440b206b203609283993a4a479f7acc713" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Printexc.exn_slot_name&amp;nbsp;exn&lt;/code&gt; returns the internal name of the constructor used to create the exception value &lt;code&gt;exn&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="32a9199332c82fec95a6c6714855cfe581064b21" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Printexc.get_backtrace&amp;nbsp;()&lt;/code&gt; returns a string containing the same exception backtrace that &lt;code&gt;Printexc.print_backtrace&lt;/code&gt; would print.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d7481949491d170a62c0fd4e4d7a7d68b01646de" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Printexc.get_backtrace&amp;nbsp;()&lt;/code&gt; returns a string containing the same exception backtrace that &lt;code&gt;Printexc.print_backtrace&lt;/code&gt; would print. Same restriction usage than &lt;a href=&quot;printexc#VALprint_backtrace&quot;&gt;&lt;code&gt;Printexc.print_backtrace&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8d06b3a9bb13883cfd77374de27555e27a1b0f2b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Printexc.get_callstack&amp;nbsp;n&lt;/code&gt; returns a description of the top of the call stack on the current program point (for the current thread), with at most &lt;code&gt;n&lt;/code&gt; entries.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="918f1953a2bade3ab48d03327c0d697154698e42" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Printexc.get_callstack&amp;nbsp;n&lt;/code&gt; returns a description of the top of the call stack on the current program point (for the current thread), with at most &lt;code&gt;n&lt;/code&gt; entries. (Note: this function is not related to exceptions at all, despite being part of the &lt;code&gt;Printexc&lt;/code&gt; module.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1df7e46ba28ecb04275cb6304bd170ec6ddcde04" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Printexc.get_raw_backtrace&amp;nbsp;()&lt;/code&gt; returns the same exception backtrace that &lt;code&gt;Printexc.print_backtrace&lt;/code&gt; would print, but in a raw format.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ef9f4a3eafe6a65adfb5cd79b64d21fddf57702b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Printexc.get_raw_backtrace&amp;nbsp;()&lt;/code&gt; returns the same exception backtrace that &lt;code&gt;Printexc.print_backtrace&lt;/code&gt; would print, but in a raw format. Same restriction usage than &lt;a href=&quot;printexc#VALprint_backtrace&quot;&gt;&lt;code&gt;Printexc.print_backtrace&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d680249bf85eff0d0b30ae6ac039ff60acc90cee" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Printexc.print&amp;nbsp;fn&amp;nbsp;x&lt;/code&gt; applies &lt;code&gt;fn&lt;/code&gt; to &lt;code&gt;x&lt;/code&gt; and returns the result.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="124849ae3c68c04a56a1c361b7dbe74d9ef5ef3f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Printexc.print&amp;nbsp;fn&amp;nbsp;x&lt;/code&gt; applies &lt;code&gt;fn&lt;/code&gt; to &lt;code&gt;x&lt;/code&gt; and returns the result. If the evaluation of &lt;code&gt;fn&amp;nbsp;x&lt;/code&gt; raises any exception, the name of the exception is printed on standard error output, and the exception is raised again. The typical use is to catch and report exceptions that escape a function application.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5e523d479319f34d76ae3a8b646ec85b2a69a133" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Printexc.print_backtrace&amp;nbsp;oc&lt;/code&gt; prints an exception backtrace on the output channel &lt;code&gt;oc&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4f3bf97c5f17901cc993bd007b78ee673c39a284" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Printexc.print_backtrace&amp;nbsp;oc&lt;/code&gt; prints an exception backtrace on the output channel &lt;code&gt;oc&lt;/code&gt;. The backtrace lists the program locations where the most-recently raised exception was raised and where it was propagated through function calls.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e1334ccf24b77408a38039fd93a958c68e018e11" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Printexc.record_backtrace&amp;nbsp;b&lt;/code&gt; turns recording of exception backtraces on (if &lt;code&gt;b&amp;nbsp;=&amp;nbsp;true&lt;/code&gt;) or off (if &lt;code&gt;b&amp;nbsp;=&amp;nbsp;false&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a2c3173747b56fa0d0f8918e024683135f696afa" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Printexc.record_backtrace&amp;nbsp;b&lt;/code&gt; turns recording of exception backtraces on (if &lt;code&gt;b&amp;nbsp;=&amp;nbsp;true&lt;/code&gt;) or off (if &lt;code&gt;b&amp;nbsp;=&amp;nbsp;false&lt;/code&gt;). Initially, backtraces are not recorded, unless the &lt;code&gt;b&lt;/code&gt; flag is given to the program through the &lt;code&gt;OCAMLRUNPARAM&lt;/code&gt; variable.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1042f36bbc96c1bc63bbdaacf0d8cbd297da59ac" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Printexc.register_printer&amp;nbsp;fn&lt;/code&gt; registers &lt;code&gt;fn&lt;/code&gt; as an exception printer.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="78f4e570bda7bb8c811d8c3c9265542a79ce4bf0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Printexc.register_printer&amp;nbsp;fn&lt;/code&gt; registers &lt;code&gt;fn&lt;/code&gt; as an exception printer. The printer should return &lt;code&gt;None&lt;/code&gt; or raise an exception if it does not know how to convert the passed exception, and &lt;code&gt;Some&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;s&lt;/code&gt; with &lt;code&gt;s&lt;/code&gt; the resulting string if it can convert the passed exception. Exceptions raised by the printer are ignored.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b28139781e0a949e91144f4f9d25bf4442ce2fd1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Printexc.set_uncaught_exception_handler&amp;nbsp;fn&lt;/code&gt; registers &lt;code&gt;fn&lt;/code&gt; as the handler for uncaught exceptions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="45c7e33f1443e989e508f6dec1caf8a19cabba6d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Printexc.set_uncaught_exception_handler&amp;nbsp;fn&lt;/code&gt; registers &lt;code&gt;fn&lt;/code&gt; as the handler for uncaught exceptions. The default handler is &lt;a href=&quot;printexc#VALdefault_uncaught_exception_handler&quot;&gt;&lt;code&gt;Printexc.default_uncaught_exception_handler&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="04261e1691b292be53cf0a9f0839babc7503f289" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Printexc.to_string&amp;nbsp;e&lt;/code&gt; returns a string representation of the exception &lt;code&gt;e&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ec235517ce7b2e9a91cd3ea8ef1dd585520e2770" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Printexc.to_string_default&amp;nbsp;e&lt;/code&gt; returns a string representation of the exception &lt;code&gt;e&lt;/code&gt;, ignoring all registered exception printers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fb4a5e77ad4e2ea3fb2b3cf32b9d6860c2b1a8c5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Printexc.use_printers&amp;nbsp;e&lt;/code&gt; returns &lt;code&gt;None&lt;/code&gt; if there are no registered printers and &lt;code&gt;Some&amp;nbsp;s&lt;/code&gt; with else as the resulting string otherwise.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e39ce8ee1b4b965206b7305153021e11c324f664" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Random.bool&amp;nbsp;()&lt;/code&gt; returns &lt;code&gt;true&lt;/code&gt; or &lt;code&gt;false&lt;/code&gt; with probability 0.5 each.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c2f91a3e5a6d2051d3972b8fe4a048aefd58e339" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Random.float&amp;nbsp;bound&lt;/code&gt; returns a random floating-point number between 0 and &lt;code&gt;bound&lt;/code&gt; (inclusive).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cb6ed9cdd6f2e6a20e047df582d70f4510e046fc" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Random.float&amp;nbsp;bound&lt;/code&gt; returns a random floating-point number between 0 and &lt;code&gt;bound&lt;/code&gt; (inclusive). If &lt;code&gt;bound&lt;/code&gt; is negative, the result is negative or zero. If &lt;code&gt;bound&lt;/code&gt; is 0, the result is 0.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3e6c769e3db8ec1ab2208d3988bd249d3d42d37e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Random.int&amp;nbsp;bound&lt;/code&gt; returns a random integer between 0 (inclusive) and &lt;code&gt;bound&lt;/code&gt; (exclusive).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="007d5cb756279c4564c89b4eb0961ba3390a2aab" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Random.int&amp;nbsp;bound&lt;/code&gt; returns a random integer between 0 (inclusive) and &lt;code&gt;bound&lt;/code&gt; (exclusive). &lt;code&gt;bound&lt;/code&gt; must be greater than 0 and less than 2&lt;sup&gt;30&lt;/sup&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d1aeb3958fd039a11af75dd111be4fba35edd2e6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Random.int32&amp;nbsp;bound&lt;/code&gt; returns a random integer between 0 (inclusive) and &lt;code&gt;bound&lt;/code&gt; (exclusive).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8ecf1e7b70465dda86600d7e239a6ca928c9e764" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Random.int32&amp;nbsp;bound&lt;/code&gt; returns a random integer between 0 (inclusive) and &lt;code&gt;bound&lt;/code&gt; (exclusive). &lt;code&gt;bound&lt;/code&gt; must be greater than 0.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5d061d587960eb2e20de140347d7978439fa2c2e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Random.int64&amp;nbsp;bound&lt;/code&gt; returns a random integer between 0 (inclusive) and &lt;code&gt;bound&lt;/code&gt; (exclusive).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7a89405e25fbbdde09db6050c82b0242fd4467a4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Random.int64&amp;nbsp;bound&lt;/code&gt; returns a random integer between 0 (inclusive) and &lt;code&gt;bound&lt;/code&gt; (exclusive). &lt;code&gt;bound&lt;/code&gt; must be greater than 0.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e07e69b1814a66e51d290862f321b3083492cc14" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Random.nativeint&amp;nbsp;bound&lt;/code&gt; returns a random integer between 0 (inclusive) and &lt;code&gt;bound&lt;/code&gt; (exclusive).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="694c3e4b690fc6a8d821175ec722e0cac9d335a7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Random.nativeint&amp;nbsp;bound&lt;/code&gt; returns a random integer between 0 (inclusive) and &lt;code&gt;bound&lt;/code&gt; (exclusive). &lt;code&gt;bound&lt;/code&gt; must be greater than 0.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4e41731f48348039be44164da8ef25fbce000593" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Rest&lt;/code&gt; takes a function that is called repeatedly for each remaining command line argument. &lt;code&gt;Rest_all&lt;/code&gt; takes a function that is called once, with the list of all remaining arguments.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aa027a1381752d860b27b579f2e6cb04e003612e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;S&lt;/code&gt;: convert a string argument to OCaml syntax (double quotes, escapes).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9f6ce7ea80298f4838431e36ed9deaf96b1e9334" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;S&lt;/code&gt;: reads a delimited string argument (delimiters and special escaped characters follow the lexical conventions of OCaml).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="682e1ad520ffc90cb7aebeeb66537e1386b27b0c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Scanning.beginning_of_input&amp;nbsp;ic&lt;/code&gt; tests the beginning of input condition of the given &lt;a href=&quot;scanf.scanning#TYPEin_channel&quot;&gt;&lt;code&gt;Scanf.Scanning.in_channel&lt;/code&gt;&lt;/a&gt; formatted input channel.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1e2aac16893d02f9dcc746a3bd1da1cf14e2a2e3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Scanning.end_of_input&amp;nbsp;ic&lt;/code&gt; tests the end-of-input condition of the given &lt;a href=&quot;scanf.scanning#TYPEin_channel&quot;&gt;&lt;code&gt;Scanf.Scanning.in_channel&lt;/code&gt;&lt;/a&gt; formatted input channel.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b4b707fc9a72ffc77d47061419d91933513cb0a8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Scanning.from_channel&amp;nbsp;ic&lt;/code&gt; returns a &lt;a href=&quot;scanf.scanning#TYPEin_channel&quot;&gt;&lt;code&gt;Scanf.Scanning.in_channel&lt;/code&gt;&lt;/a&gt; formatted input channel which reads from the regular &lt;a href=&quot;stdlib#TYPEin_channel&quot;&gt;&lt;code&gt;in_channel&lt;/code&gt;&lt;/a&gt; input channel &lt;code&gt;ic&lt;/code&gt; argument.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="240eb791033286aa0bba83b7276ebac69cac673a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Scanning.from_channel&amp;nbsp;ic&lt;/code&gt; returns a &lt;a href=&quot;scanf.scanning#TYPEin_channel&quot;&gt;&lt;code&gt;Scanf.Scanning.in_channel&lt;/code&gt;&lt;/a&gt; formatted input channel which reads from the regular &lt;a href=&quot;stdlib#TYPEin_channel&quot;&gt;&lt;code&gt;in_channel&lt;/code&gt;&lt;/a&gt; input channel &lt;code&gt;ic&lt;/code&gt; argument. Reading starts at current reading position of &lt;code&gt;ic&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e3f58c8b5f3754b740b227ce8e6fdf2a48fcfa59" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Scanning.from_function&amp;nbsp;f&lt;/code&gt; returns a &lt;a href=&quot;scanf.scanning#TYPEin_channel&quot;&gt;&lt;code&gt;Scanf.Scanning.in_channel&lt;/code&gt;&lt;/a&gt; formatted input channel with the given function as its reading method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bf94a72bf82c09ac800af96ec1aa3ea14e9d6201" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Scanning.from_string&amp;nbsp;s&lt;/code&gt; returns a &lt;a href=&quot;scanf.scanning#TYPEin_channel&quot;&gt;&lt;code&gt;Scanf.Scanning.in_channel&lt;/code&gt;&lt;/a&gt; formatted input channel which reads from the given string.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dc2d2c5907edd722d7104e3642fd3a3a989def6a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Scanning.from_string&amp;nbsp;s&lt;/code&gt; returns a &lt;a href=&quot;scanf.scanning#TYPEin_channel&quot;&gt;&lt;code&gt;Scanf.Scanning.in_channel&lt;/code&gt;&lt;/a&gt; formatted input channel which reads from the given string. Reading starts from the first character in the string. The end-of-input condition is set when the end of the string is reached.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="71b7511e5e2ec7e8caccf1977c2f692ae2a062d0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Scanning.name_of_input&amp;nbsp;ic&lt;/code&gt; returns the name of the character source for the given &lt;a href=&quot;scanf.scanning#TYPEin_channel&quot;&gt;&lt;code&gt;Scanf.Scanning.in_channel&lt;/code&gt;&lt;/a&gt; formatted input channel.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6130ecc6c3634c77d7fd2407e039e4fafe2f5c86" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Scanning.open_in&amp;nbsp;fname&lt;/code&gt; returns a &lt;a href=&quot;scanf.scanning#TYPEin_channel&quot;&gt;&lt;code&gt;Scanf.Scanning.in_channel&lt;/code&gt;&lt;/a&gt; formatted input channel for bufferized reading in text mode from file &lt;code&gt;fname&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f4ec5c5cae2145e3e6641e622f0168a3b55fd581" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Scanning.open_in_bin&amp;nbsp;fname&lt;/code&gt; returns a &lt;a href=&quot;scanf.scanning#TYPEin_channel&quot;&gt;&lt;code&gt;Scanf.Scanning.in_channel&lt;/code&gt;&lt;/a&gt; formatted input channel for bufferized reading in binary mode from file &lt;code&gt;fname&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="29ccccbcac51208aa62b1668f778b020fe1e94bc" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Signal_default&lt;/code&gt;: take the default behavior (usually: abort the program)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7250413be51f7b1a7f0a6d72ecc0807d14a3187e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Signal_handle&amp;nbsp;f&lt;/code&gt;: call function &lt;code&gt;f&lt;/code&gt;, giving it the signal number as argument.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7c0852fcb84d5c7397dcb337522d8644ad14f607" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Signal_ignore&lt;/code&gt;: ignore the signal</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3c05dbeb3e78b1e21f4cfe8da1827ac60a5b98e4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Str.quote&amp;nbsp;s&lt;/code&gt; returns a regexp string that matches exactly &lt;code&gt;s&lt;/code&gt; and nothing else.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d590368b5be3bab6a92b8a67ccec1ec610b02fd7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Str.regexp_string&amp;nbsp;s&lt;/code&gt; returns a regular expression that matches exactly &lt;code&gt;s&lt;/code&gt; and nothing else.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9c4c521a99ad487b7a74a2a65f0e077abe4ecfb2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Str.regexp_string_case_fold&lt;/code&gt; is similar to &lt;a href=&quot;str#VALregexp_string&quot;&gt;&lt;code&gt;Str.regexp_string&lt;/code&gt;&lt;/a&gt;, but the regexp matches in a case-insensitive way.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0f5237441366768887d2a287ca92a6ddd27b0ad6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Stream.from&amp;nbsp;f&lt;/code&gt; returns a stream built from the function &lt;code&gt;f&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ebc643a19ff29bccc525169c8ea036bb0f8e17ff" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Stream.from&amp;nbsp;f&lt;/code&gt; returns a stream built from the function &lt;code&gt;f&lt;/code&gt;. To create a new stream element, the function &lt;code&gt;f&lt;/code&gt; is called with the current stream count. The user function &lt;code&gt;f&lt;/code&gt; must return either &lt;code&gt;Some&amp;nbsp;&amp;lt;value&amp;gt;&lt;/code&gt; for a value or &lt;code&gt;None&lt;/code&gt; to specify the end of the stream.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="462c950f029b583dece83d47b6291e91c538a7a8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Stream.iter&amp;nbsp;f&amp;nbsp;s&lt;/code&gt; scans the whole stream s, applying function &lt;code&gt;f&lt;/code&gt; in turn to each stream element encountered.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a3865cab9222e8ddbb0a20bf3668a14e029e2818" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;String.blit&amp;nbsp;src&amp;nbsp;srcoff&amp;nbsp;dst&amp;nbsp;dstoff&amp;nbsp;len&lt;/code&gt; copies &lt;code&gt;len&lt;/code&gt; bytes from the string &lt;code&gt;src&lt;/code&gt;, starting at index &lt;code&gt;srcoff&lt;/code&gt;, to byte sequence &lt;code&gt;dst&lt;/code&gt;, starting at character number &lt;code&gt;dstoff&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2044c3471f0c3d2f346579c74f5a83b8aba74689" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;String.concat&amp;nbsp;sep&amp;nbsp;sl&lt;/code&gt; concatenates the list of strings &lt;code&gt;sl&lt;/code&gt;, inserting the separator string &lt;code&gt;sep&lt;/code&gt; between each.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f68d05d51f569b00b0c642c57d9d38c1cf4bc191" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;String.contains&amp;nbsp;s&amp;nbsp;c&lt;/code&gt; tests if character &lt;code&gt;c&lt;/code&gt; appears in the string &lt;code&gt;s&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b065f7296d80c74a2be1b54e4c47e6967dec17f4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;String.contains_from&amp;nbsp;s&amp;nbsp;start&amp;nbsp;c&lt;/code&gt; tests if character &lt;code&gt;c&lt;/code&gt; appears in &lt;code&gt;s&lt;/code&gt; after position &lt;code&gt;start&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="47235ff22fcdfe1ceaccc55243d8006be593b1fc" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;String.contains_from&amp;nbsp;s&amp;nbsp;start&amp;nbsp;c&lt;/code&gt; tests if character &lt;code&gt;c&lt;/code&gt; appears in &lt;code&gt;s&lt;/code&gt; after position &lt;code&gt;start&lt;/code&gt;. &lt;code&gt;String.contains&amp;nbsp;s&amp;nbsp;c&lt;/code&gt; is equivalent to &lt;code&gt;String.contains_from&amp;nbsp;s&amp;nbsp;0&amp;nbsp;c&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="06e17fd9f2f3540536ec8f6a9f9ab8c9fe3aede4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;String.create&amp;nbsp;n&lt;/code&gt; returns a fresh byte sequence of length &lt;code&gt;n&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="24863425e8da6495dc71b7d939f27d59b4425022" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;String.create&amp;nbsp;n&lt;/code&gt; returns a fresh byte sequence of length &lt;code&gt;n&lt;/code&gt;. The sequence is uninitialized and contains arbitrary bytes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f5d985a923a67d92a2184493a4b6e6e2e8cbdc55" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;String.fill&amp;nbsp;s&amp;nbsp;start&amp;nbsp;len&amp;nbsp;c&lt;/code&gt; modifies byte sequence &lt;code&gt;s&lt;/code&gt; in place, replacing &lt;code&gt;len&lt;/code&gt; bytes by &lt;code&gt;c&lt;/code&gt;, starting at &lt;code&gt;start&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7a54168d9d78544551c2247cebbd7a39e856593b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;String.fill&amp;nbsp;s&amp;nbsp;start&amp;nbsp;len&amp;nbsp;c&lt;/code&gt; modifies byte sequence &lt;code&gt;s&lt;/code&gt; in place, replacing &lt;code&gt;len&lt;/code&gt; bytes with &lt;code&gt;c&lt;/code&gt;, starting at &lt;code&gt;start&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="55554ab4b58f5a9ad70f71fb08978149f22e2c1a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;String.get&amp;nbsp;s&amp;nbsp;n&lt;/code&gt; returns the character at index &lt;code&gt;n&lt;/code&gt; in string &lt;code&gt;s&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="49dce0e2f88992800f6359dc176ad1910c8532ce" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;String.get&amp;nbsp;s&amp;nbsp;n&lt;/code&gt; returns the character at index &lt;code&gt;n&lt;/code&gt; in string &lt;code&gt;s&lt;/code&gt;. You can also write &lt;code&gt;s.[n]&lt;/code&gt; instead of &lt;code&gt;String.get&amp;nbsp;s&amp;nbsp;n&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cdaebd73e1aecb0d712ff5b25ec698c4dceeeb90" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;String.index&amp;nbsp;s&amp;nbsp;c&lt;/code&gt; returns the index of the first occurrence of character &lt;code&gt;c&lt;/code&gt; in string &lt;code&gt;s&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="32de39bb30accab6f6376fb0f455d58ecef08c26" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;String.index_from&amp;nbsp;s&amp;nbsp;i&amp;nbsp;c&lt;/code&gt; returns the index of the first occurrence of character &lt;code&gt;c&lt;/code&gt; in string &lt;code&gt;s&lt;/code&gt; after position &lt;code&gt;i&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ef5e4311726482fb6cea5bdeb8f0997af2753c2c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;String.index_from&amp;nbsp;s&amp;nbsp;i&amp;nbsp;c&lt;/code&gt; returns the index of the first occurrence of character &lt;code&gt;c&lt;/code&gt; in string &lt;code&gt;s&lt;/code&gt; after position &lt;code&gt;i&lt;/code&gt;. &lt;code&gt;String.index&amp;nbsp;s&amp;nbsp;c&lt;/code&gt; is equivalent to &lt;code&gt;String.index_from&amp;nbsp;s&amp;nbsp;0&amp;nbsp;c&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="da6ad651be72afea9fee5812030ab66380cc3718" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;String.index_from_opt&amp;nbsp;s&amp;nbsp;i&amp;nbsp;c&lt;/code&gt; returns the index of the first occurrence of character &lt;code&gt;c&lt;/code&gt; in string &lt;code&gt;s&lt;/code&gt; after position &lt;code&gt;i&lt;/code&gt; or &lt;code&gt;None&lt;/code&gt; if &lt;code&gt;c&lt;/code&gt; does not occur in &lt;code&gt;s&lt;/code&gt; after position &lt;code&gt;i&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4add9e8dca6a3c34bfc725b99300fbd18e3fd25e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;String.index_opt&amp;nbsp;s&amp;nbsp;c&lt;/code&gt; is equivalent to &lt;code&gt;String.index_from_opt&amp;nbsp;s&amp;nbsp;0&amp;nbsp;c&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cc74a0d0d86d72413f0e2819c6f3d38eb2d33b3d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;String.index_opt&amp;nbsp;s&amp;nbsp;c&lt;/code&gt; returns the index of the first occurrence of character &lt;code&gt;c&lt;/code&gt; in string &lt;code&gt;s&lt;/code&gt;, or &lt;code&gt;None&lt;/code&gt; if &lt;code&gt;c&lt;/code&gt; does not occur in &lt;code&gt;s&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2363b887de52e47b0bdc94b393e9efaaac97c11c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;String.init&amp;nbsp;n&amp;nbsp;f&lt;/code&gt; returns a string of length &lt;code&gt;n&lt;/code&gt;, with character &lt;code&gt;i&lt;/code&gt; initialized to the result of &lt;code&gt;f&amp;nbsp;i&lt;/code&gt; (called in increasing index order).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="213f66347e006147d5d5a9b50d78259cbd07e1ad" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;String.iter&amp;nbsp;f&amp;nbsp;s&lt;/code&gt; applies function &lt;code&gt;f&lt;/code&gt; in turn to all the characters of &lt;code&gt;s&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ea0d50493fe4041357c37143f20189a222a2f659" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;String.iter&amp;nbsp;f&amp;nbsp;s&lt;/code&gt; applies function &lt;code&gt;f&lt;/code&gt; in turn to all the characters of &lt;code&gt;s&lt;/code&gt;. It is equivalent to &lt;code&gt;f&amp;nbsp;s.[0];&amp;nbsp;f&amp;nbsp;s.[1];&amp;nbsp;...;&amp;nbsp;f&amp;nbsp;s.[String.length&amp;nbsp;s&amp;nbsp;-&amp;nbsp;1];&amp;nbsp;()&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2caa65a72cce63fd0bcf89e4e1b43fa07f05f7b0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;String.make&amp;nbsp;n&amp;nbsp;c&lt;/code&gt; returns a fresh string of length &lt;code&gt;n&lt;/code&gt;, filled with the character &lt;code&gt;c&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3016b24b63559816e6d054339e6fb955c6ef885f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;String.map&amp;nbsp;f&amp;nbsp;s&lt;/code&gt; applies function &lt;code&gt;f&lt;/code&gt; in turn to all the characters of &lt;code&gt;s&lt;/code&gt; (in increasing index order) and stores the results in a new string that is returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="07fb1f8d7476e6e41c508e44b0fbe5f46da0309e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;String.map&amp;nbsp;f&amp;nbsp;s&lt;/code&gt; applies function &lt;code&gt;f&lt;/code&gt; in turn to all the characters of &lt;code&gt;s&lt;/code&gt; and stores the results in a new string that is returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="56d774a5bc70fa842853c51bd5805ba46487168f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;String.mapi&amp;nbsp;f&amp;nbsp;s&lt;/code&gt; calls &lt;code&gt;f&lt;/code&gt; with each character of &lt;code&gt;s&lt;/code&gt; and its index (in increasing index order) and stores the results in a new string that is returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2dabcd2e504c64d6436fb242e1db8c52c2b3742f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;String.rcontains_from&amp;nbsp;s&amp;nbsp;stop&amp;nbsp;c&lt;/code&gt; tests if character &lt;code&gt;c&lt;/code&gt; appears in &lt;code&gt;s&lt;/code&gt; before position &lt;code&gt;stop+1&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ca44920d97ce7ac297c0328c8c0b612aa0c69ca0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;String.rindex&amp;nbsp;s&amp;nbsp;c&lt;/code&gt; returns the index of the last occurrence of character &lt;code&gt;c&lt;/code&gt; in string &lt;code&gt;s&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="360940847bbdc47c0d04dce8f68904690997b4dd" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;String.rindex_from&amp;nbsp;s&amp;nbsp;i&amp;nbsp;c&lt;/code&gt; returns the index of the last occurrence of character &lt;code&gt;c&lt;/code&gt; in string &lt;code&gt;s&lt;/code&gt; before position &lt;code&gt;i+1&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7eb89d8fd82476a641fd4d7754714c60129590d3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;String.rindex_from&amp;nbsp;s&amp;nbsp;i&amp;nbsp;c&lt;/code&gt; returns the index of the last occurrence of character &lt;code&gt;c&lt;/code&gt; in string &lt;code&gt;s&lt;/code&gt; before position &lt;code&gt;i+1&lt;/code&gt;. &lt;code&gt;String.rindex&amp;nbsp;s&amp;nbsp;c&lt;/code&gt; is equivalent to &lt;code&gt;String.rindex_from&amp;nbsp;s&amp;nbsp;(String.length&amp;nbsp;s&amp;nbsp;-&amp;nbsp;1)&amp;nbsp;c&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3337f9e1f8c4b29fe4b824177a6c651fd69d47de" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;String.rindex_from_opt&amp;nbsp;s&amp;nbsp;i&amp;nbsp;c&lt;/code&gt; returns the index of the last occurrence of character &lt;code&gt;c&lt;/code&gt; in string &lt;code&gt;s&lt;/code&gt; before position &lt;code&gt;i+1&lt;/code&gt; or &lt;code&gt;None&lt;/code&gt; if &lt;code&gt;c&lt;/code&gt; does not occur in &lt;code&gt;s&lt;/code&gt; before position &lt;code&gt;i+1&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e7c39c6fa27c3a1c24e13fedfead4d43e9841799" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;String.rindex_opt&amp;nbsp;s&amp;nbsp;c&lt;/code&gt; is equivalent to &lt;code&gt;String.rindex_from_opt&amp;nbsp;s&amp;nbsp;(String.length&amp;nbsp;s&amp;nbsp;-&amp;nbsp;1)&amp;nbsp;c&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f6b5b4c027ed9b30b1181ff259ec217f45ed8521" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;String.rindex_opt&amp;nbsp;s&amp;nbsp;c&lt;/code&gt; returns the index of the last occurrence of character &lt;code&gt;c&lt;/code&gt; in string &lt;code&gt;s&lt;/code&gt;, or &lt;code&gt;None&lt;/code&gt; if &lt;code&gt;c&lt;/code&gt; does not occur in &lt;code&gt;s&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eaa19ade8c23d5c897f2cc68311350daefed0d3d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;String.set&amp;nbsp;s&amp;nbsp;n&amp;nbsp;c&lt;/code&gt; modifies byte sequence &lt;code&gt;s&lt;/code&gt; in place, replacing the byte at index &lt;code&gt;n&lt;/code&gt; with &lt;code&gt;c&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dfe49ea3270807ee8c334dc14094cb668cdf62aa" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;String.set&amp;nbsp;s&amp;nbsp;n&amp;nbsp;c&lt;/code&gt; modifies byte sequence &lt;code&gt;s&lt;/code&gt; in place, replacing the byte at index &lt;code&gt;n&lt;/code&gt; with &lt;code&gt;c&lt;/code&gt;. You can also write &lt;code&gt;s.[n]&amp;nbsp;&amp;lt;-&amp;nbsp;c&lt;/code&gt; instead of &lt;code&gt;String.set&amp;nbsp;s&amp;nbsp;n&amp;nbsp;c&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dbaa6fd04e27644b6ca0dcf51a6c947d5cd1de1f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;String.split_on_char&amp;nbsp;sep&amp;nbsp;s&lt;/code&gt; returns the list of all (possibly empty) substrings of &lt;code&gt;s&lt;/code&gt; that are delimited by the &lt;code&gt;sep&lt;/code&gt; character.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a9fb424f3afc27e6deb29302e1635bf9a3f1c334" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;String.sub&amp;nbsp;s&amp;nbsp;start&amp;nbsp;len&lt;/code&gt; returns a fresh string of length &lt;code&gt;len&lt;/code&gt;, containing the substring of &lt;code&gt;s&lt;/code&gt; that starts at position &lt;code&gt;start&lt;/code&gt; and has length &lt;code&gt;len&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1f5316b904d0e071cb7899700e033b31f003d09e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;String_tag&amp;nbsp;s&lt;/code&gt; is a string tag &lt;code&gt;s&lt;/code&gt;. String tags can be inserted either by explicitly using the constructor &lt;code&gt;String_tag&lt;/code&gt; or by using the dedicated format syntax &lt;code&gt;&quot;@{&amp;lt;s&amp;gt;&amp;nbsp;...&amp;nbsp;@}&quot;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5e9112e76358b3c20bff8a3e37d1768388380495" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Thread.create&amp;nbsp;funct&amp;nbsp;arg&lt;/code&gt; creates a new thread of control, in which the function application &lt;code&gt;funct&amp;nbsp;arg&lt;/code&gt; is executed concurrently with the other threads of the program.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="36967f26dd507d46da75c4cee8951f0183243d8a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Thread.create&amp;nbsp;funct&amp;nbsp;arg&lt;/code&gt; creates a new thread of control, in which the function application &lt;code&gt;funct&amp;nbsp;arg&lt;/code&gt; is executed concurrently with the other threads of the program. The application of &lt;code&gt;Thread.create&lt;/code&gt; returns the handle of the newly created thread. The new thread terminates when the application &lt;code&gt;funct&amp;nbsp;arg&lt;/code&gt; returns, either normally or by raising an uncaught exception. In the latter case, the exception is printed on standard error, but not propagated back to the parent thread. Similarly, the result of the application &lt;code&gt;funct&amp;nbsp;arg&lt;/code&gt; is discarded and not directly accessible to the parent thread.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9584d8dddc44d6393cdbefda3abcab9cbac1321d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Unit&lt;/code&gt;, &lt;code&gt;Set&lt;/code&gt; and &lt;code&gt;Clear&lt;/code&gt; keywords take no argument.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="59e7dd1e944d21aa0f6de71559614281b6eb9571" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Unix.putenv&amp;nbsp;name&amp;nbsp;value&lt;/code&gt; sets the value associated to a variable in the process environment.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="73af7c0f8dcf1cf738c2b3fe63b893298c61e85b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Unix.putenv&amp;nbsp;name&amp;nbsp;value&lt;/code&gt; sets the value associated to a variable in the process environment. &lt;code&gt;name&lt;/code&gt; is the name of the environment variable, and &lt;code&gt;value&lt;/code&gt; its new associated value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="95aba4a5fdb52c4ae3f1af4d4d84362d820e00b5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Weak.blit&amp;nbsp;ar1&amp;nbsp;off1&amp;nbsp;ar2&amp;nbsp;off2&amp;nbsp;len&lt;/code&gt; copies &lt;code&gt;len&lt;/code&gt; weak pointers from &lt;code&gt;ar1&lt;/code&gt; (starting at &lt;code&gt;off1&lt;/code&gt;) to &lt;code&gt;ar2&lt;/code&gt; (starting at &lt;code&gt;off2&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7a979e04b83d455b9cfdd67712295d18797d79da" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Weak.blit&amp;nbsp;ar1&amp;nbsp;off1&amp;nbsp;ar2&amp;nbsp;off2&amp;nbsp;len&lt;/code&gt; copies &lt;code&gt;len&lt;/code&gt; weak pointers from &lt;code&gt;ar1&lt;/code&gt; (starting at &lt;code&gt;off1&lt;/code&gt;) to &lt;code&gt;ar2&lt;/code&gt; (starting at &lt;code&gt;off2&lt;/code&gt;). It works correctly even if &lt;code&gt;ar1&lt;/code&gt; and &lt;code&gt;ar2&lt;/code&gt; are the same.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bd0a29ad2434363e2b748a57dc35ff6d30aa6ce5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Weak.check&amp;nbsp;ar&amp;nbsp;n&lt;/code&gt; returns &lt;code&gt;true&lt;/code&gt; if the &lt;code&gt;n&lt;/code&gt;th cell of &lt;code&gt;ar&lt;/code&gt; is full, &lt;code&gt;false&lt;/code&gt; if it is empty.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4c19891481a59a374caecc48d586279b2bada093" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Weak.check&amp;nbsp;ar&amp;nbsp;n&lt;/code&gt; returns &lt;code&gt;true&lt;/code&gt; if the &lt;code&gt;n&lt;/code&gt;th cell of &lt;code&gt;ar&lt;/code&gt; is full, &lt;code&gt;false&lt;/code&gt; if it is empty. Note that even if &lt;code&gt;Weak.check&amp;nbsp;ar&amp;nbsp;n&lt;/code&gt; returns &lt;code&gt;true&lt;/code&gt;, a subsequent &lt;a href=&quot;weak#VALget&quot;&gt;&lt;code&gt;Weak.get&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;nbsp;ar&amp;nbsp;n&lt;/code&gt; can return &lt;code&gt;None&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="938f72ca9e81ba6e7773b8f67c05bef9e4ac8e72" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Weak.create&amp;nbsp;n&lt;/code&gt; returns a new weak array of length &lt;code&gt;n&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="85f248ac0383d1f70b38155162777060de733707" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Weak.create&amp;nbsp;n&lt;/code&gt; returns a new weak array of length &lt;code&gt;n&lt;/code&gt;. All the pointers are initially empty.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="adb22dc7f4f63c3f530373408e5d580f26ddebdd" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Weak.fill&amp;nbsp;ar&amp;nbsp;ofs&amp;nbsp;len&amp;nbsp;el&lt;/code&gt; sets to &lt;code&gt;el&lt;/code&gt; all pointers of &lt;code&gt;ar&lt;/code&gt; from &lt;code&gt;ofs&lt;/code&gt; to &lt;code&gt;ofs&amp;nbsp;+&amp;nbsp;len&amp;nbsp;-&amp;nbsp;1&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2a927e05bcadf7621c41071023f1a1e240660167" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Weak.get&amp;nbsp;ar&amp;nbsp;n&lt;/code&gt; returns None if the &lt;code&gt;n&lt;/code&gt;th cell of &lt;code&gt;ar&lt;/code&gt; is empty, &lt;code&gt;Some&amp;nbsp;x&lt;/code&gt; (where &lt;code&gt;x&lt;/code&gt; is the value) if it is full.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="55835118a6ce55199ae16ecf437df2c0f556d0eb" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Weak.get_copy&amp;nbsp;ar&amp;nbsp;n&lt;/code&gt; returns None if the &lt;code&gt;n&lt;/code&gt;th cell of &lt;code&gt;ar&lt;/code&gt; is empty, &lt;code&gt;Some&amp;nbsp;x&lt;/code&gt; (where &lt;code&gt;x&lt;/code&gt; is a (shallow) copy of the value) if it is full.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c66ac618a35b6bacdb5cdc9aff0a4df7ebc44dd8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Weak.get_copy&amp;nbsp;ar&amp;nbsp;n&lt;/code&gt; returns None if the &lt;code&gt;n&lt;/code&gt;th cell of &lt;code&gt;ar&lt;/code&gt; is empty, &lt;code&gt;Some&amp;nbsp;x&lt;/code&gt; (where &lt;code&gt;x&lt;/code&gt; is a (shallow) copy of the value) if it is full. In addition to pitfalls with mutable values, the interesting difference with &lt;code&gt;get&lt;/code&gt; is that &lt;code&gt;get_copy&lt;/code&gt; does not prevent the incremental GC from erasing the value in its current cycle (&lt;code&gt;get&lt;/code&gt; may delay the erasure to the next GC cycle).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5166b7461c9b0cd0492434780294cba722ee41c8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Weak.length&amp;nbsp;ar&lt;/code&gt; returns the length (number of elements) of &lt;code&gt;ar&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="10b6a2db6d2331001a48d59fb135445a04d71c60" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Weak.set&amp;nbsp;ar&amp;nbsp;n&amp;nbsp;(Some&amp;nbsp;el)&lt;/code&gt; sets the &lt;code&gt;n&lt;/code&gt;th cell of &lt;code&gt;ar&lt;/code&gt; to be a (full) pointer to &lt;code&gt;el&lt;/code&gt;; &lt;code&gt;Weak.set&amp;nbsp;ar&amp;nbsp;n&amp;nbsp;None&lt;/code&gt; sets the &lt;code&gt;n&lt;/code&gt;th cell of &lt;code&gt;ar&lt;/code&gt; to empty.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="617957da3798fd35db1b6628ab1f4ef0d376976a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;X&lt;/code&gt;: convert an integer argument to unsigned hexadecimal, using uppercase letters. The flag &lt;code&gt;#&lt;/code&gt; adds a &lt;code&gt;0X&lt;/code&gt; prefix to non zero values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6bb35c6949cb25ccd85c6de682a62bd7498fa7d7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;[&amp;nbsp;range&amp;nbsp;]&lt;/code&gt;: reads characters that matches one of the characters mentioned in the range of characters &lt;code&gt;range&lt;/code&gt; (or not mentioned in it, if the range starts with &lt;code&gt;^&lt;/code&gt;). Reads a &lt;code&gt;string&lt;/code&gt; that can be empty, if the next input character does not match the range. The set of characters from &lt;code&gt;c1&lt;/code&gt; to &lt;code&gt;c2&lt;/code&gt; (inclusively) is denoted by &lt;code&gt;c1-c2&lt;/code&gt;. Hence, &lt;code&gt;%[0-9]&lt;/code&gt; returns a string representing a decimal number or an empty string if no decimal digit is found; similarly, &lt;code&gt;%[0-9a-f]&lt;/code&gt; returns a string of hexadecimal digits. If a closing bracket appears in a range, it must occur as the first character of the range (or just after the &lt;code&gt;^&lt;/code&gt; in case of range negation); hence &lt;code&gt;[]]&lt;/code&gt; matches a &lt;code&gt;]&lt;/code&gt; character and &lt;code&gt;[^]]&lt;/code&gt; matches any character that is not &lt;code&gt;]&lt;/code&gt;. Use &lt;code&gt;%%&lt;/code&gt; and &lt;code&gt;%@&lt;/code&gt; to include a &lt;code&gt;%&lt;/code&gt; or a &lt;code&gt;@&lt;/code&gt; in a range.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3bb1444ed648677dbe8a09e962b9399c3e7ec8a5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;[..]&amp;nbsp;&amp;nbsp;&lt;/code&gt; Character set. Ranges are denoted with &lt;code&gt;-&lt;/code&gt;, as in &lt;code&gt;[a-z]&lt;/code&gt;. An initial &lt;code&gt;^&lt;/code&gt;, as in &lt;code&gt;[^0-9]&lt;/code&gt;, complements the set. To include a &lt;code&gt;]&lt;/code&gt; character in a set, make it the first character of the set. To include a &lt;code&gt;-&lt;/code&gt; character in a set, make it the first or the last character of the set.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ce8ab36eca82a1babb32126106193e52f665732a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;\     &lt;/code&gt; Quotes special characters. The special characters are &lt;code&gt;$^\.*+?[]&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fb0691d5988332c0652ee8d203fb1cfa9007518a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;\(..\)&lt;/code&gt; Grouping and naming of the enclosed expression.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="88301e68baddfc98e8f4cc24042ed6b298257071" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;\1    &lt;/code&gt; The text matched by the first &lt;code&gt;\(...\)&lt;/code&gt; expression (&lt;code&gt;\2&lt;/code&gt; for the second expression, and so on up to &lt;code&gt;\9&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2cfad9d69bf72248238198754850a024a8470e86" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;\b    &lt;/code&gt; Matches word boundaries.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f5775717f8e60eb1ab8ed5bc5f9619ddca246213" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;\|    &lt;/code&gt; (infix) Alternative between two expressions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="407e3adc737aef1fc3f18bf0874ba55534bdd3fc" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;^&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/code&gt; Matches at beginning of line: either at the beginning of the matched string, or just after a '\n' character.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="30640efacd6c32099bf5db0e0666de47f6dfdfb8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;__FILE__&lt;/code&gt; returns the name of the file currently being parsed by the compiler.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8d78e4dff61408d05a055e6229a9df2e498b737b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;__FUNCTION__&lt;/code&gt; returns the name of the current function or method, including any enclosing modules or classes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="187b64baafae06b161a4f6d04c8a3b13e74199f0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;__LINE_OF__&amp;nbsp;expr&lt;/code&gt; returns a pair &lt;code&gt;(line,&amp;nbsp;expr)&lt;/code&gt;, where &lt;code&gt;line&lt;/code&gt; is the line number at which the expression &lt;code&gt;expr&lt;/code&gt; appears in the file currently being parsed by the compiler.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="89f73772cbc163638056ffdfb3df323f174b48c6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;__LINE__&lt;/code&gt; returns the line number at which this expression appears in the file currently being parsed by the compiler.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1147e76f5134a56a3427fa830330627c9d675f41" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;__LOC_OF__&amp;nbsp;expr&lt;/code&gt; returns a pair &lt;code&gt;(loc,&amp;nbsp;expr)&lt;/code&gt; where &lt;code&gt;loc&lt;/code&gt; is the location of &lt;code&gt;expr&lt;/code&gt; in the file currently being parsed by the compiler, with the standard error format of OCaml: &quot;File %S, line %d, characters %d-%d&quot;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="853d94af0c0f414347e0f23428aa4ab1b1812179" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;__LOC__&lt;/code&gt; returns the location at which this expression appears in the file currently being parsed by the compiler, with the standard error format of OCaml: &quot;File %S, line %d, characters %d-%d&quot;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6c9e211f5567122450e5fc98fa9b3fc0e7e9b5df" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;__MODULE__&lt;/code&gt; returns the module name of the file being parsed by the compiler.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="56032f9a520c08b79f4b47b4fb9f3dbc611efd97" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;__POS_OF__&amp;nbsp;expr&lt;/code&gt; returns a pair &lt;code&gt;(loc,expr)&lt;/code&gt;, where &lt;code&gt;loc&lt;/code&gt; is a tuple &lt;code&gt;(file,lnum,cnum,enum)&lt;/code&gt; corresponding to the location at which the expression &lt;code&gt;expr&lt;/code&gt; appears in the file currently being parsed by the compiler.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="29123fe16b4568dbdd875d1875b54dcb2b4be820" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;__POS_OF__&amp;nbsp;expr&lt;/code&gt; returns a pair &lt;code&gt;(loc,expr)&lt;/code&gt;, where &lt;code&gt;loc&lt;/code&gt; is a tuple &lt;code&gt;(file,lnum,cnum,enum)&lt;/code&gt; corresponding to the location at which the expression &lt;code&gt;expr&lt;/code&gt; appears in the file currently being parsed by the compiler. &lt;code&gt;file&lt;/code&gt; is the current filename, &lt;code&gt;lnum&lt;/code&gt; the line number, &lt;code&gt;cnum&lt;/code&gt; the character position in the line and &lt;code&gt;enum&lt;/code&gt; the last character position in the line.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="53cc13b6447a7ea968e1c6e0318fa99e80e45255" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;__POS__&lt;/code&gt; returns a tuple &lt;code&gt;(file,lnum,cnum,enum)&lt;/code&gt;, corresponding to the location at which this expression appears in the file currently being parsed by the compiler.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="51f7f4edf346df65f89d0dfee67b478408877bc8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;__POS__&lt;/code&gt; returns a tuple &lt;code&gt;(file,lnum,cnum,enum)&lt;/code&gt;, corresponding to the location at which this expression appears in the file currently being parsed by the compiler. &lt;code&gt;file&lt;/code&gt; is the current filename, &lt;code&gt;lnum&lt;/code&gt; the line number, &lt;code&gt;cnum&lt;/code&gt; the character position in the line and &lt;code&gt;enum&lt;/code&gt; the last character position in the line.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="18564636368ebaf69697873cf8cbd9bcd0dcfa82" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;a1&amp;nbsp;::&amp;nbsp;l1&lt;/code&gt; is smaller than &lt;code&gt;a2&amp;nbsp;::&amp;nbsp;l2&lt;/code&gt; (negative result) if &lt;code&gt;a1&lt;/code&gt; is smaller than &lt;code&gt;a2&lt;/code&gt;, or if they are equal (0 result) and &lt;code&gt;l1&lt;/code&gt; is smaller than &lt;code&gt;l2&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="339d0ad45f25a71d29842ea1e8108ce3d161ce5e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;a&lt;/code&gt;: user-defined printer. Take two arguments and apply the first one to &lt;code&gt;outchan&lt;/code&gt; (the current output channel) and to the second argument. The first argument must therefore have type &lt;code&gt;out_channel&amp;nbsp;-&amp;gt;&amp;nbsp;'b&amp;nbsp;-&amp;gt;&amp;nbsp;unit&lt;/code&gt; and the second &lt;code&gt;'b&lt;/code&gt;. The output produced by the function is inserted in the output of &lt;code&gt;fprintf&lt;/code&gt; at the current point.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c61a100a099f09b65d96469754fd391855e11dd6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;abs&amp;nbsp;f&lt;/code&gt; returns the absolute value of &lt;code&gt;f&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ce4251e343a4cab5935740c56e460554d09c3ded" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;abs&amp;nbsp;x&lt;/code&gt; is the absolute value of &lt;code&gt;x&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cfe03b36cd8760c9cc8b727eab7b31839cee5997" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;abs&amp;nbsp;x&lt;/code&gt; is the absolute value of &lt;code&gt;x&lt;/code&gt;. That is &lt;code&gt;x&lt;/code&gt; if &lt;code&gt;x&lt;/code&gt; is positive and &lt;code&gt;neg&amp;nbsp;x&lt;/code&gt; if &lt;code&gt;x&lt;/code&gt; is negative. &lt;b&gt;Warning.&lt;/b&gt; This may be negative if the argument is &lt;a href=&quot;int#VALmin_int&quot;&gt;&lt;code&gt;Int.min_int&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4b38092f9f6c7ff9c061524117bc113624339011" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;abs_float&amp;nbsp;f&lt;/code&gt; returns the absolute value of &lt;code&gt;f&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ec9c30ef81e38027f887852cfa9eb7151c382ff4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;acquire&amp;nbsp;s&lt;/code&gt; blocks the calling thread until the semaphore &lt;code&gt;s&lt;/code&gt; has value 1 (is available), then atomically sets it to 0 and returns.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="78d81d084f2923d1d80b403ce56e7960014afd58" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;acquire&amp;nbsp;s&lt;/code&gt; blocks the calling thread until the value of semaphore &lt;code&gt;s&lt;/code&gt; is not zero, then atomically decrements the value of &lt;code&gt;s&lt;/code&gt; and returns.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4fb7d49004abe6b685000134d2b2a79616f171d0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;add&amp;nbsp;key&amp;nbsp;data&amp;nbsp;m&lt;/code&gt; returns a map containing the same bindings as &lt;code&gt;m&lt;/code&gt;, plus a binding of &lt;code&gt;key&lt;/code&gt; to &lt;code&gt;data&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8c53bd5638398461bc0126fea3d3ee4c216a815b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;add&amp;nbsp;key&amp;nbsp;data&amp;nbsp;m&lt;/code&gt; returns a map containing the same bindings as &lt;code&gt;m&lt;/code&gt;, plus a binding of &lt;code&gt;key&lt;/code&gt; to &lt;code&gt;data&lt;/code&gt;. If &lt;code&gt;key&lt;/code&gt; was already bound in &lt;code&gt;m&lt;/code&gt; to a value that is physically equal to &lt;code&gt;data&lt;/code&gt;, &lt;code&gt;m&lt;/code&gt; is returned unchanged (the result of the function is then physically equal to &lt;code&gt;m&lt;/code&gt;). Otherwise, the previous binding of &lt;code&gt;key&lt;/code&gt; in &lt;code&gt;m&lt;/code&gt; disappears.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="198a9316f531bdf7f68e037f56f2db0fb52b0014" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;add&amp;nbsp;t&amp;nbsp;x&lt;/code&gt; adds &lt;code&gt;x&lt;/code&gt; to &lt;code&gt;t&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b9deab45dd098905f1e63a10db7f1bc8beddb436" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;add&amp;nbsp;t&amp;nbsp;x&lt;/code&gt; adds &lt;code&gt;x&lt;/code&gt; to &lt;code&gt;t&lt;/code&gt;. If there is already an instance of &lt;code&gt;x&lt;/code&gt; in &lt;code&gt;t&lt;/code&gt;, it is unspecified which one will be returned by subsequent calls to &lt;code&gt;find&lt;/code&gt; and &lt;code&gt;merge&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8db761e5919198e76e516c21071b38e5dbcc132a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;add&amp;nbsp;x&amp;nbsp;q&lt;/code&gt; adds the element &lt;code&gt;x&lt;/code&gt; at the end of the queue &lt;code&gt;q&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3c6763e67d442d0ec5331524f97a61290a3a85c9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;add&amp;nbsp;x&amp;nbsp;s&lt;/code&gt; returns a set containing all elements of &lt;code&gt;s&lt;/code&gt;, plus &lt;code&gt;x&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="00ab09ad1a7a43e223f7e6710a0f404bfc800776" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;add&amp;nbsp;x&amp;nbsp;s&lt;/code&gt; returns a set containing all elements of &lt;code&gt;s&lt;/code&gt;, plus &lt;code&gt;x&lt;/code&gt;. If &lt;code&gt;x&lt;/code&gt; was already in &lt;code&gt;s&lt;/code&gt;, &lt;code&gt;s&lt;/code&gt; is returned unchanged (the result of the function is then physically equal to &lt;code&gt;s&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e47e48668ac04406b6e4a026d5ebfe3a271996f3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;add&amp;nbsp;x&amp;nbsp;y&amp;nbsp;m&lt;/code&gt; returns a map containing the same bindings as &lt;code&gt;m&lt;/code&gt;, plus a binding of &lt;code&gt;x&lt;/code&gt; to &lt;code&gt;y&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a9be06b1f5fe516804c0fd8c45f0baac79ad89fa" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;add&amp;nbsp;x&amp;nbsp;y&amp;nbsp;m&lt;/code&gt; returns a map containing the same bindings as &lt;code&gt;m&lt;/code&gt;, plus a binding of &lt;code&gt;x&lt;/code&gt; to &lt;code&gt;y&lt;/code&gt;. If &lt;code&gt;x&lt;/code&gt; was already bound in &lt;code&gt;m&lt;/code&gt; to a value that is physically equal to &lt;code&gt;y&lt;/code&gt;, &lt;code&gt;m&lt;/code&gt; is returned unchanged (the result of the function is then physically equal to &lt;code&gt;m&lt;/code&gt;). Otherwise, the previous binding of &lt;code&gt;x&lt;/code&gt; in &lt;code&gt;m&lt;/code&gt; disappears.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="97484297ccfb751c0851128bdcce3ecc704d3bed" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;add&amp;nbsp;x&amp;nbsp;y&lt;/code&gt; is the addition &lt;code&gt;x&amp;nbsp;+&amp;nbsp;y&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c0f91e20ceecd7d3844da4112c9a47848e99897b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;add&amp;nbsp;~key&amp;nbsp;~data&amp;nbsp;m&lt;/code&gt; returns a map containing the same bindings as &lt;code&gt;m&lt;/code&gt;, plus a binding of &lt;code&gt;key&lt;/code&gt; to &lt;code&gt;data&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0a2fba0dc93c6b670d9f2328f1f7bf7c8c69042f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;add&amp;nbsp;~key&amp;nbsp;~data&amp;nbsp;m&lt;/code&gt; returns a map containing the same bindings as &lt;code&gt;m&lt;/code&gt;, plus a binding of &lt;code&gt;key&lt;/code&gt; to &lt;code&gt;data&lt;/code&gt;. If &lt;code&gt;key&lt;/code&gt; was already bound in &lt;code&gt;m&lt;/code&gt; to a value that is physically equal to &lt;code&gt;data&lt;/code&gt;, &lt;code&gt;m&lt;/code&gt; is returned unchanged (the result of the function is then physically equal to &lt;code&gt;m&lt;/code&gt;). Otherwise, the previous binding of &lt;code&gt;key&lt;/code&gt; in &lt;code&gt;m&lt;/code&gt; disappears.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4850809ae90ed6537fb20a29f99583406a43e892" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;add_buffer&amp;nbsp;b1&amp;nbsp;b2&lt;/code&gt; appends the current contents of buffer &lt;code&gt;b2&lt;/code&gt; at the end of buffer &lt;code&gt;b1&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4e18632dcd2769477dfe2bb0f57d5e6e47d48fea" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;add_buffer&amp;nbsp;b1&amp;nbsp;b2&lt;/code&gt; appends the current contents of buffer &lt;code&gt;b2&lt;/code&gt; at the end of buffer &lt;code&gt;b1&lt;/code&gt;. &lt;code&gt;b2&lt;/code&gt; is not modified.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="83bdfbd96000830ba51d312e0685555f9fbe945e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;add_bytes&amp;nbsp;b&amp;nbsp;s&lt;/code&gt; appends the byte sequence &lt;code&gt;s&lt;/code&gt; at the end of buffer &lt;code&gt;b&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="343c5c9a912653defd1f5d7bb26a937aa0131802" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;add_channel&amp;nbsp;b&amp;nbsp;ic&amp;nbsp;n&lt;/code&gt; reads at most &lt;code&gt;n&lt;/code&gt; characters from the input channel &lt;code&gt;ic&lt;/code&gt; and stores them at the end of buffer &lt;code&gt;b&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="51ae635e58b74352cf4eb4811a2f449477ad959e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;add_char&amp;nbsp;b&amp;nbsp;c&lt;/code&gt; appends the character &lt;code&gt;c&lt;/code&gt; at the end of buffer &lt;code&gt;b&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1da509bdebdc7ee428614e7ddc1577e9565c897a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;add_int16_be&amp;nbsp;b&amp;nbsp;i&lt;/code&gt; appends a binary big-endian signed 16-bit integer &lt;code&gt;i&lt;/code&gt; to &lt;code&gt;b&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c4e16c38195b0aee6b6246f42156bd5c06e015c7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;add_int16_le&amp;nbsp;b&amp;nbsp;i&lt;/code&gt; appends a binary little-endian signed 16-bit integer &lt;code&gt;i&lt;/code&gt; to &lt;code&gt;b&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a3b080c1799b42a4799ef3787b6c38bd6f26e08b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;add_int16_ne&amp;nbsp;b&amp;nbsp;i&lt;/code&gt; appends a binary native-endian signed 16-bit integer &lt;code&gt;i&lt;/code&gt; to &lt;code&gt;b&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="226e0700b816688ef8affba0f52b22d247271d5e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;add_int32_be&amp;nbsp;b&amp;nbsp;i&lt;/code&gt; appends a binary big-endian 32-bit integer &lt;code&gt;i&lt;/code&gt; to &lt;code&gt;b&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4337110ceabf70cbdd2ba4b4fda5fd3bc4d10c2f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;add_int32_le&amp;nbsp;b&amp;nbsp;i&lt;/code&gt; appends a binary little-endian 32-bit integer &lt;code&gt;i&lt;/code&gt; to &lt;code&gt;b&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dee8215470b5976fc0b76a08b9d2baad0d5a56fb" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;add_int32_ne&amp;nbsp;b&amp;nbsp;i&lt;/code&gt; appends a binary native-endian 32-bit integer &lt;code&gt;i&lt;/code&gt; to &lt;code&gt;b&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4788e99170d3173c1a25edf4528142ac7c954a45" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;add_int64_be&amp;nbsp;b&amp;nbsp;i&lt;/code&gt; appends a binary big-endian 64-bit integer &lt;code&gt;i&lt;/code&gt; to &lt;code&gt;b&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b2bc48bb332ba0dcc4f06466914e3d17552024f5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;add_int64_ne&amp;nbsp;b&amp;nbsp;i&lt;/code&gt; appends a binary little-endian 64-bit integer &lt;code&gt;i&lt;/code&gt; to &lt;code&gt;b&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ed19c06f6b657ebcc7aa0f89028a7738ef605a02" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;add_int64_ne&amp;nbsp;b&amp;nbsp;i&lt;/code&gt; appends a binary native-endian 64-bit integer &lt;code&gt;i&lt;/code&gt; to &lt;code&gt;b&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="88807f5becb6e4c32cd87da6f83c2f76128df518" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;add_int8&amp;nbsp;b&amp;nbsp;i&lt;/code&gt; appends a binary signed 8-bit integer &lt;code&gt;i&lt;/code&gt; to &lt;code&gt;b&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="94e287064824e8889f2794d3c846df1233371e23" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;add_string&amp;nbsp;b&amp;nbsp;s&lt;/code&gt; appends the string &lt;code&gt;s&lt;/code&gt; at the end of buffer &lt;code&gt;b&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="856538d2cdbd47d3ede44876f1b824e8f06804a2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;add_subbytes&amp;nbsp;b&amp;nbsp;s&amp;nbsp;ofs&amp;nbsp;len&lt;/code&gt; takes &lt;code&gt;len&lt;/code&gt; characters from offset &lt;code&gt;ofs&lt;/code&gt; in byte sequence &lt;code&gt;s&lt;/code&gt; and appends them at the end of buffer &lt;code&gt;b&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="01906179b0c8e02a8ece99515d9e874ea7f4771e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;add_substitute&amp;nbsp;b&amp;nbsp;f&amp;nbsp;s&lt;/code&gt; appends the string pattern &lt;code&gt;s&lt;/code&gt; at the end of buffer &lt;code&gt;b&lt;/code&gt; with substitution.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d32f14fcae8290a986d30f4a1228e6114d5a524f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;add_substitute&amp;nbsp;b&amp;nbsp;f&amp;nbsp;s&lt;/code&gt; appends the string pattern &lt;code&gt;s&lt;/code&gt; at the end of buffer &lt;code&gt;b&lt;/code&gt; with substitution. The substitution process looks for variables into the pattern and substitutes each variable name by its value, as obtained by applying the mapping &lt;code&gt;f&lt;/code&gt; to the variable name. Inside the string pattern, a variable name immediately follows a non-escaped &lt;code&gt;$&lt;/code&gt; character and is one of the following:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="920c37c3ac3ad3c55fd9d80260c8e25abdcd13a0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;add_substring&amp;nbsp;b&amp;nbsp;s&amp;nbsp;ofs&amp;nbsp;len&lt;/code&gt; takes &lt;code&gt;len&lt;/code&gt; characters from offset &lt;code&gt;ofs&lt;/code&gt; in string &lt;code&gt;s&lt;/code&gt; and appends them at the end of buffer &lt;code&gt;b&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="50c6f1bc4137031f6f01cba24519ddeb4cf9c748" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;add_symbolic_output_item&amp;nbsp;sob&amp;nbsp;itm&lt;/code&gt; adds item &lt;code&gt;itm&lt;/code&gt; to buffer &lt;code&gt;sob&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="310c5d5ebb1d595b376294df3b0880d15723599e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;add_uint16_be&amp;nbsp;b&amp;nbsp;i&lt;/code&gt; appends a binary big-endian unsigned 16-bit integer &lt;code&gt;i&lt;/code&gt; to &lt;code&gt;b&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2cd4ad3a2181add51cb6c554e0627318f7c1cd14" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;add_uint16_le&amp;nbsp;b&amp;nbsp;i&lt;/code&gt; appends a binary little-endian unsigned 16-bit integer &lt;code&gt;i&lt;/code&gt; to &lt;code&gt;b&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ab8f8e687f9689867b98d67bba22a74bfe820df6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;add_uint16_ne&amp;nbsp;b&amp;nbsp;i&lt;/code&gt; appends a binary native-endian unsigned 16-bit integer &lt;code&gt;i&lt;/code&gt; to &lt;code&gt;b&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6e7bc43ec03fed8ec1c040daeed8b4610e9dae50" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;add_uint8&amp;nbsp;b&amp;nbsp;i&lt;/code&gt; appends a binary unsigned 8-bit integer &lt;code&gt;i&lt;/code&gt; to &lt;code&gt;b&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="95c0a48516c1936782aad4a297f19b48c2a128a9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;add_utf_16be_uchar&amp;nbsp;b&amp;nbsp;u&lt;/code&gt; appends the &lt;a href=&quot;https://tools.ietf.org/html/rfc2781&quot;&gt;UTF-16BE&lt;/a&gt; encoding of &lt;code&gt;u&lt;/code&gt; at the end of buffer &lt;code&gt;b&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b5d326b8867ecb55810a8f64e1ea6c7240be7b1a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;add_utf_16le_uchar&amp;nbsp;b&amp;nbsp;u&lt;/code&gt; appends the &lt;a href=&quot;https://tools.ietf.org/html/rfc2781&quot;&gt;UTF-16LE&lt;/a&gt; encoding of &lt;code&gt;u&lt;/code&gt; at the end of buffer &lt;code&gt;b&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fc5d92c1dcf309240c80aaf767a971cae729d012" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;add_utf_8_uchar&amp;nbsp;b&amp;nbsp;u&lt;/code&gt; appends the &lt;a href=&quot;https://tools.ietf.org/html/rfc3629&quot;&gt; UTF-8&lt;/a&gt; encoding of &lt;code&gt;u&lt;/code&gt; at the end of buffer &lt;code&gt;b&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ff53a3dcf86f7fdd34ed19511d8b40253f38ca6e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;allow_only&amp;nbsp;units&lt;/code&gt; sets the list of allowed units to be the intersection of the existing allowed units and the given list of units.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c5f777cfb1900046bfc3e19f083c694fa7f64e96" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;allow_only&amp;nbsp;units&lt;/code&gt; sets the list of allowed units to be the intersection of the existing allowed units and the given list of units. As such it can never increase the set of allowed units.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="48493c8cd60feb545ea93a2435db3d2c5848db57" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;always&amp;nbsp;v&lt;/code&gt; returns an event that is always ready for synchronization.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d3b00158b2c4306dfc9bbb54d2aab9e6e3cb1441" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;always&amp;nbsp;v&lt;/code&gt; returns an event that is always ready for synchronization. The result value of this event is &lt;code&gt;v&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="304eff553a754001368dada547635e449878852f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;append&amp;nbsp;v1&amp;nbsp;v2&lt;/code&gt; returns a fresh array containing the concatenation of the arrays &lt;code&gt;v1&lt;/code&gt; and &lt;code&gt;v2&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="734a0cc4bcd9c78e43337dd8ee6da6db4f0ecafc" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;append&amp;nbsp;v1&amp;nbsp;v2&lt;/code&gt; returns a fresh floatarray containing the concatenation of the floatarrays &lt;code&gt;v1&lt;/code&gt; and &lt;code&gt;v2&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ff58133f62b2ccdda3c1d880c9240a0e425b9570" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;append&amp;nbsp;xs&amp;nbsp;ys&lt;/code&gt; is the sequence &lt;code&gt;xs&lt;/code&gt; followed by the sequence &lt;code&gt;ys&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9032bd926615cd290cdb1c86fef3bace5459128d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;assoc&amp;nbsp;a&amp;nbsp;l&lt;/code&gt; returns the value associated with key &lt;code&gt;a&lt;/code&gt; in the list of pairs &lt;code&gt;l&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7ca7a206a0eddbfa135a729d07ef6052c430c2ef" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;assoc&amp;nbsp;a&amp;nbsp;l&lt;/code&gt; returns the value associated with key &lt;code&gt;a&lt;/code&gt; in the list of pairs &lt;code&gt;l&lt;/code&gt;. That is, &lt;code&gt;assoc&amp;nbsp;a&amp;nbsp;[&amp;nbsp;...;&amp;nbsp;(a,b);&amp;nbsp;...]&amp;nbsp;=&amp;nbsp;b&lt;/code&gt; if &lt;code&gt;(a,b)&lt;/code&gt; is the leftmost binding of &lt;code&gt;a&lt;/code&gt; in list &lt;code&gt;l&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="24220544c5e653f81613a5feceaae48660cbbfca" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;assoc_opt&amp;nbsp;a&amp;nbsp;l&lt;/code&gt; returns the value associated with key &lt;code&gt;a&lt;/code&gt; in the list of pairs &lt;code&gt;l&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5ea020b2ade822d6cbbefe58bde1cfbeb64512db" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;assoc_opt&amp;nbsp;a&amp;nbsp;l&lt;/code&gt; returns the value associated with key &lt;code&gt;a&lt;/code&gt; in the list of pairs &lt;code&gt;l&lt;/code&gt;. That is, &lt;code&gt;assoc&amp;nbsp;a&amp;nbsp;[&amp;nbsp;...;&amp;nbsp;(a,b);&amp;nbsp;...]&amp;nbsp;=&amp;nbsp;b&lt;/code&gt; if &lt;code&gt;(a,b)&lt;/code&gt; is the leftmost binding of &lt;code&gt;a&lt;/code&gt; in list &lt;code&gt;l&lt;/code&gt;. Returns &lt;code&gt;None&lt;/code&gt; if there is no value associated with &lt;code&gt;a&lt;/code&gt; in the list &lt;code&gt;l&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a4baa651f97a086f58a320ca4ea49ed373df67cc" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;assoc_opt&amp;nbsp;a&amp;nbsp;l&lt;/code&gt; returns the value associated with key &lt;code&gt;a&lt;/code&gt; in the list of pairs &lt;code&gt;l&lt;/code&gt;. That is, &lt;code&gt;assoc_opt&amp;nbsp;a&amp;nbsp;[&amp;nbsp;...;&amp;nbsp;(a,b);&amp;nbsp;...]&amp;nbsp;=&amp;nbsp;Some&amp;nbsp;b&lt;/code&gt; if &lt;code&gt;(a,b)&lt;/code&gt; is the leftmost binding of &lt;code&gt;a&lt;/code&gt; in list &lt;code&gt;l&lt;/code&gt;. Returns &lt;code&gt;None&lt;/code&gt; if there is no value associated with &lt;code&gt;a&lt;/code&gt; in the list &lt;code&gt;l&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f648b1b2665a46d60f7e7ffe3906173e74e53a93" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;assoc_opt&amp;nbsp;a&amp;nbsp;l&lt;/code&gt; returns the value associated with key &lt;code&gt;a&lt;/code&gt; in the list of pairs &lt;code&gt;l&lt;/code&gt;. That is, &lt;code&gt;assoc_opt&amp;nbsp;a&amp;nbsp;[&amp;nbsp;...;&amp;nbsp;(a,b);&amp;nbsp;...]&amp;nbsp;=&amp;nbsp;b&lt;/code&gt; if &lt;code&gt;(a,b)&lt;/code&gt; is the leftmost binding of &lt;code&gt;a&lt;/code&gt; in list &lt;code&gt;l&lt;/code&gt;. Returns &lt;code&gt;None&lt;/code&gt; if there is no value associated with &lt;code&gt;a&lt;/code&gt; in the list &lt;code&gt;l&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d3376b75dc8fe0fe685a5374e7021fd51c57bc7b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;atan2&amp;nbsp;y&amp;nbsp;x&lt;/code&gt; returns the arc tangent of &lt;code&gt;y&amp;nbsp;/.&amp;nbsp;x&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5e4db48754e752d5616eade96857faef975841fe" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;atan2&amp;nbsp;y&amp;nbsp;x&lt;/code&gt; returns the arc tangent of &lt;code&gt;y&amp;nbsp;/.&amp;nbsp;x&lt;/code&gt;. The signs of &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt; are used to determine the quadrant of the result. Result is in radians and is between &lt;code&gt;-pi&lt;/code&gt; and &lt;code&gt;pi&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c6fd6c1a41473a9406881f4ba05f0b18002d8a3d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;b&lt;/code&gt;: convert a boolean argument (deprecated; do not use in new programs).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4746dce3dd4104f574aa1dcb223492a013f7818c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;b&lt;/code&gt;: reads a boolean argument (for backward compatibility; do not use in new programs).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="db524cca584c052f1804b529443ddce28dff51ef" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;bind&amp;nbsp;o&amp;nbsp;f&lt;/code&gt; is &lt;code&gt;f&amp;nbsp;v&lt;/code&gt; if &lt;code&gt;o&lt;/code&gt; is &lt;code&gt;Some&amp;nbsp;v&lt;/code&gt; and &lt;code&gt;None&lt;/code&gt; if &lt;code&gt;o&lt;/code&gt; is &lt;code&gt;None&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3c8a6184ec9437688c7324ccd21ecaff8577f4c2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;bind&amp;nbsp;r&amp;nbsp;f&lt;/code&gt; is &lt;code&gt;f&amp;nbsp;v&lt;/code&gt; if &lt;code&gt;r&lt;/code&gt; is &lt;code&gt;Ok&amp;nbsp;v&lt;/code&gt; and &lt;code&gt;r&lt;/code&gt; if &lt;code&gt;r&lt;/code&gt; is &lt;code&gt;Error&amp;nbsp;_&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cb8b54a70d5da03c2a2ee548be8e6a73e4575bae" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;blit&amp;nbsp;src&amp;nbsp;src_pos&amp;nbsp;dst&amp;nbsp;dst_pos&amp;nbsp;len&lt;/code&gt; copies &lt;code&gt;len&lt;/code&gt; bytes from sequence &lt;code&gt;src&lt;/code&gt;, starting at index &lt;code&gt;src_pos&lt;/code&gt;, to sequence &lt;code&gt;dst&lt;/code&gt;, starting at index &lt;code&gt;dst_pos&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6d066bd218d4fafe4a8024a254656c8f098c0919" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;blit&amp;nbsp;src&amp;nbsp;src_pos&amp;nbsp;dst&amp;nbsp;dst_pos&amp;nbsp;len&lt;/code&gt; copies &lt;code&gt;len&lt;/code&gt; bytes from sequence &lt;code&gt;src&lt;/code&gt;, starting at index &lt;code&gt;src_pos&lt;/code&gt;, to sequence &lt;code&gt;dst&lt;/code&gt;, starting at index &lt;code&gt;dst_pos&lt;/code&gt;. It works correctly even if &lt;code&gt;src&lt;/code&gt; and &lt;code&gt;dst&lt;/code&gt; are the same byte sequence, and the source and destination intervals overlap.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aa9c11daef8e750b85958ed30c3b2f172a7f36cd" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;blit&amp;nbsp;src&amp;nbsp;src_pos&amp;nbsp;dst&amp;nbsp;dst_pos&amp;nbsp;len&lt;/code&gt; copies &lt;code&gt;len&lt;/code&gt; bytes from string &lt;code&gt;src&lt;/code&gt;, starting at index &lt;code&gt;src_pos&lt;/code&gt;, to byte sequence &lt;code&gt;dst&lt;/code&gt;, starting at index &lt;code&gt;dst_pos&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3f3e84bda1c57b0b3f4a963a1c65c0ad02354ec2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;blit&amp;nbsp;src&amp;nbsp;src_pos&amp;nbsp;dst&amp;nbsp;dst_pos&amp;nbsp;len&lt;/code&gt; copies &lt;code&gt;len&lt;/code&gt; bytes from the string &lt;code&gt;src&lt;/code&gt;, starting at index &lt;code&gt;src_pos&lt;/code&gt;, to byte sequence &lt;code&gt;dst&lt;/code&gt;, starting at character number &lt;code&gt;dst_pos&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="529203f918ab60f981c3c60fe7c96be799c0a50d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;blit&amp;nbsp;src&amp;nbsp;src_pos&amp;nbsp;dst&amp;nbsp;dst_pos&amp;nbsp;len&lt;/code&gt; copies &lt;code&gt;len&lt;/code&gt; elements from array &lt;code&gt;src&lt;/code&gt;, starting at element number &lt;code&gt;src_pos&lt;/code&gt;, to array &lt;code&gt;dst&lt;/code&gt;, starting at element number &lt;code&gt;dst_pos&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b2120f2b5870d3d3dd156cf3e695f1b6a62c59fe" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;blit&amp;nbsp;src&amp;nbsp;src_pos&amp;nbsp;dst&amp;nbsp;dst_pos&amp;nbsp;len&lt;/code&gt; copies &lt;code&gt;len&lt;/code&gt; elements from array &lt;code&gt;src&lt;/code&gt;, starting at element number &lt;code&gt;src_pos&lt;/code&gt;, to array &lt;code&gt;dst&lt;/code&gt;, starting at element number &lt;code&gt;dst_pos&lt;/code&gt;. It works correctly even if &lt;code&gt;src&lt;/code&gt; and &lt;code&gt;dst&lt;/code&gt; are the same array, and the source and destination chunks overlap.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="57fc61b803fbef510b98989853a7731a65f8968e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;blit&amp;nbsp;src&amp;nbsp;src_pos&amp;nbsp;dst&amp;nbsp;dst_pos&amp;nbsp;len&lt;/code&gt; copies &lt;code&gt;len&lt;/code&gt; elements from floatarray &lt;code&gt;src&lt;/code&gt;, starting at element number &lt;code&gt;src_pos&lt;/code&gt;, to floatarray &lt;code&gt;dst&lt;/code&gt;, starting at element number &lt;code&gt;dst_pos&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e078885b4cbf45f52932a9a850809ebf4f906648" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;blit&amp;nbsp;src&amp;nbsp;src_pos&amp;nbsp;dst&amp;nbsp;dst_pos&amp;nbsp;len&lt;/code&gt; copies &lt;code&gt;len&lt;/code&gt; elements from floatarray &lt;code&gt;src&lt;/code&gt;, starting at element number &lt;code&gt;src_pos&lt;/code&gt;, to floatarray &lt;code&gt;dst&lt;/code&gt;, starting at element number &lt;code&gt;dst_pos&lt;/code&gt;. It works correctly even if &lt;code&gt;src&lt;/code&gt; and &lt;code&gt;dst&lt;/code&gt; are the same floatarray, and the source and destination chunks overlap.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6dd9fd06b9394f8f8625396c88897ad76caef36b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;blit&amp;nbsp;src&amp;nbsp;srcoff&amp;nbsp;dst&amp;nbsp;dstoff&amp;nbsp;len&lt;/code&gt; copies &lt;code&gt;len&lt;/code&gt; bytes from sequence &lt;code&gt;src&lt;/code&gt;, starting at index &lt;code&gt;srcoff&lt;/code&gt;, to sequence &lt;code&gt;dst&lt;/code&gt;, starting at index &lt;code&gt;dstoff&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c980f76abeb56a768226399fbbe7c5aa79851e1a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;blit&amp;nbsp;src&amp;nbsp;srcoff&amp;nbsp;dst&amp;nbsp;dstoff&amp;nbsp;len&lt;/code&gt; copies &lt;code&gt;len&lt;/code&gt; bytes from sequence &lt;code&gt;src&lt;/code&gt;, starting at index &lt;code&gt;srcoff&lt;/code&gt;, to sequence &lt;code&gt;dst&lt;/code&gt;, starting at index &lt;code&gt;dstoff&lt;/code&gt;. It works correctly even if &lt;code&gt;src&lt;/code&gt; and &lt;code&gt;dst&lt;/code&gt; are the same byte sequence, and the source and destination intervals overlap.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8991fb9a468d5084fb06fc84c7afa93c9bd8dcbc" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;blit&amp;nbsp;src&amp;nbsp;srcoff&amp;nbsp;dst&amp;nbsp;dstoff&amp;nbsp;len&lt;/code&gt; copies &lt;code&gt;len&lt;/code&gt; bytes from string &lt;code&gt;src&lt;/code&gt;, starting at index &lt;code&gt;srcoff&lt;/code&gt;, to byte sequence &lt;code&gt;dst&lt;/code&gt;, starting at index &lt;code&gt;dstoff&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5c11236743758d9bb40c540fb26b3d6f39127b49" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;blit&amp;nbsp;v1&amp;nbsp;o1&amp;nbsp;v2&amp;nbsp;o2&amp;nbsp;len&lt;/code&gt; copies &lt;code&gt;len&lt;/code&gt; elements from floatarray &lt;code&gt;v1&lt;/code&gt;, starting at element number &lt;code&gt;o1&lt;/code&gt;, to floatarray &lt;code&gt;v2&lt;/code&gt;, starting at element number &lt;code&gt;o2&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ecf2da74e93ddfc72d2673aae6aa383bd75e8f06" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;blit&amp;nbsp;v1&amp;nbsp;o1&amp;nbsp;v2&amp;nbsp;o2&amp;nbsp;len&lt;/code&gt; copies &lt;code&gt;len&lt;/code&gt; elements from floatarray &lt;code&gt;v1&lt;/code&gt;, starting at element number &lt;code&gt;o1&lt;/code&gt;, to floatarray &lt;code&gt;v2&lt;/code&gt;, starting at element number &lt;code&gt;o2&lt;/code&gt;. It works correctly even if &lt;code&gt;v1&lt;/code&gt; and &lt;code&gt;v2&lt;/code&gt; are the same floatarray, and the source and destination chunks overlap.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2189fc998e96b3f2350bc94ea5a438d8f227d7bd" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;blit&amp;nbsp;~src&amp;nbsp;~src_pos&amp;nbsp;~dst&amp;nbsp;~dst_pos&amp;nbsp;~len&lt;/code&gt; copies &lt;code&gt;len&lt;/code&gt; bytes from sequence &lt;code&gt;src&lt;/code&gt;, starting at index &lt;code&gt;src_pos&lt;/code&gt;, to sequence &lt;code&gt;dst&lt;/code&gt;, starting at index &lt;code&gt;dst_pos&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="edead5663d0db79bab2afd5969ddffaad3d21c89" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;blit&amp;nbsp;~src&amp;nbsp;~src_pos&amp;nbsp;~dst&amp;nbsp;~dst_pos&amp;nbsp;~len&lt;/code&gt; copies &lt;code&gt;len&lt;/code&gt; bytes from sequence &lt;code&gt;src&lt;/code&gt;, starting at index &lt;code&gt;src_pos&lt;/code&gt;, to sequence &lt;code&gt;dst&lt;/code&gt;, starting at index &lt;code&gt;dst_pos&lt;/code&gt;. It works correctly even if &lt;code&gt;src&lt;/code&gt; and &lt;code&gt;dst&lt;/code&gt; are the same byte sequence, and the source and destination intervals overlap.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8466e8d1401874f40e319505e56db33008b3b11e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;blit&amp;nbsp;~src&amp;nbsp;~src_pos&amp;nbsp;~dst&amp;nbsp;~dst_pos&amp;nbsp;~len&lt;/code&gt; copies &lt;code&gt;len&lt;/code&gt; bytes from string &lt;code&gt;src&lt;/code&gt;, starting at index &lt;code&gt;src_pos&lt;/code&gt;, to byte sequence &lt;code&gt;dst&lt;/code&gt;, starting at index &lt;code&gt;dst_pos&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="926b405f3ea5fc3a4ed8a532ac5d9bdaddc9098f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;blit&amp;nbsp;~src&amp;nbsp;~src_pos&amp;nbsp;~dst&amp;nbsp;~dst_pos&amp;nbsp;~len&lt;/code&gt; copies &lt;code&gt;len&lt;/code&gt; bytes from the string &lt;code&gt;src&lt;/code&gt;, starting at index &lt;code&gt;src_pos&lt;/code&gt;, to byte sequence &lt;code&gt;dst&lt;/code&gt;, starting at character number &lt;code&gt;dst_pos&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7a1bb802ee60330fbd289501556a306893b4044d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;blit&amp;nbsp;~src&amp;nbsp;~src_pos&amp;nbsp;~dst&amp;nbsp;~dst_pos&amp;nbsp;~len&lt;/code&gt; copies &lt;code&gt;len&lt;/code&gt; elements from array &lt;code&gt;src&lt;/code&gt;, starting at element number &lt;code&gt;src_pos&lt;/code&gt;, to array &lt;code&gt;dst&lt;/code&gt;, starting at element number &lt;code&gt;dst_pos&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1c5f7364dcf54b54f774e211482b6dfc980b2dc9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;blit&amp;nbsp;~src&amp;nbsp;~src_pos&amp;nbsp;~dst&amp;nbsp;~dst_pos&amp;nbsp;~len&lt;/code&gt; copies &lt;code&gt;len&lt;/code&gt; elements from array &lt;code&gt;src&lt;/code&gt;, starting at element number &lt;code&gt;src_pos&lt;/code&gt;, to array &lt;code&gt;dst&lt;/code&gt;, starting at element number &lt;code&gt;dst_pos&lt;/code&gt;. It works correctly even if &lt;code&gt;src&lt;/code&gt; and &lt;code&gt;dst&lt;/code&gt; are the same array, and the source and destination chunks overlap.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="87fa200c403f24f9e0389ec71273f647e6abd64a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;blit&amp;nbsp;~src&amp;nbsp;~src_pos&amp;nbsp;~dst&amp;nbsp;~dst_pos&amp;nbsp;~len&lt;/code&gt; copies &lt;code&gt;len&lt;/code&gt; elements from floatarray &lt;code&gt;src&lt;/code&gt;, starting at element number &lt;code&gt;src_pos&lt;/code&gt;, to floatarray &lt;code&gt;dst&lt;/code&gt;, starting at element number &lt;code&gt;dst_pos&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="468f99654a94ee824dcf0be39ceec13e4abcb4d5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;blit&amp;nbsp;~src&amp;nbsp;~src_pos&amp;nbsp;~dst&amp;nbsp;~dst_pos&amp;nbsp;~len&lt;/code&gt; copies &lt;code&gt;len&lt;/code&gt; elements from floatarray &lt;code&gt;src&lt;/code&gt;, starting at element number &lt;code&gt;src_pos&lt;/code&gt;, to floatarray &lt;code&gt;dst&lt;/code&gt;, starting at element number &lt;code&gt;dst_pos&lt;/code&gt;. It works correctly even if &lt;code&gt;src&lt;/code&gt; and &lt;code&gt;dst&lt;/code&gt; are the same floatarray, and the source and destination chunks overlap.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a13eff00d134cee9cf140a8ea22ac9afbbf1ceeb" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;blit_string&amp;nbsp;src&amp;nbsp;srcoff&amp;nbsp;dst&amp;nbsp;dstoff&amp;nbsp;len&lt;/code&gt; copies &lt;code&gt;len&lt;/code&gt; bytes from string &lt;code&gt;src&lt;/code&gt;, starting at index &lt;code&gt;srcoff&lt;/code&gt;, to byte sequence &lt;code&gt;dst&lt;/code&gt;, starting at index &lt;code&gt;dstoff&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="da2f8114a94a5897c2b648671c3586ca596bdbea" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;bom&lt;/code&gt; is U+FEFF, the &lt;a href=&quot;http://unicode.org/glossary/#byte_order_mark&quot;&gt;byte order mark&lt;/a&gt; (BOM) character.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0a7a72d0e6862fb4f46aede2774e16a2716ad735" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;bom&lt;/code&gt; is U+FEFF, the &lt;a href=&quot;https://unicode.org/glossary/#byte_order_mark&quot;&gt;byte order mark&lt;/a&gt; (BOM) character.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f307cf87cd770085e46843f2b8a129dcb036adc2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;broadcast&amp;nbsp;c&lt;/code&gt; restarts all processes waiting on the condition variable &lt;code&gt;c&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3e905fd91be3520e0963ca63b223622bdf08df06" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;bscanf&amp;nbsp;ic&amp;nbsp;fmt&amp;nbsp;r1&amp;nbsp;...&amp;nbsp;rN&amp;nbsp;f&lt;/code&gt; reads characters from the &lt;a href=&quot;scanf.scanning#TYPEin_channel&quot;&gt;&lt;code&gt;Scanf.Scanning.in_channel&lt;/code&gt;&lt;/a&gt; formatted input channel &lt;code&gt;ic&lt;/code&gt; and converts them to values according to format string &lt;code&gt;fmt&lt;/code&gt;. As a final step, receiver function &lt;code&gt;f&lt;/code&gt; is applied to the values read and gives the result of the &lt;code&gt;bscanf&lt;/code&gt; call.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0f130f9ce0f4448323d8301d2e5273827754090f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;bscanf_format&amp;nbsp;ic&amp;nbsp;fmt&amp;nbsp;f&lt;/code&gt; reads a format string token from the formatted input channel &lt;code&gt;ic&lt;/code&gt;, according to the given format string &lt;code&gt;fmt&lt;/code&gt;, and applies &lt;code&gt;f&lt;/code&gt; to the resulting format string value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c431024b2ab8cb0f907ae73cbe3014206d05e7aa" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;c&lt;/code&gt;: insert a character argument.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9f3173870c07a46c4ec9053793d19a09447af0e7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;c&lt;/code&gt;: reads a single character. To test the current input character without reading it, specify a null field width, i.e. use specification &lt;code&gt;%0c&lt;/code&gt;. Raise &lt;code&gt;Invalid_argument&lt;/code&gt;, if the field width specification is greater than 1.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="09b397a718aace8fc5195bcc5c524a9a6d258c96" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;capitalize_ascii&amp;nbsp;s&lt;/code&gt; is &lt;code&gt;s&lt;/code&gt; with the first character set to uppercase, using the US-ASCII character set.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="558b873e0a602a417ec35f242fca928177d360f4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;cat&amp;nbsp;s1&amp;nbsp;s2&lt;/code&gt; concatenates &lt;code&gt;s1&lt;/code&gt; and &lt;code&gt;s2&lt;/code&gt; and returns the result as a new byte sequence.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1a16356e212cc0875560441f310fe9c7ca824080" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;cat&amp;nbsp;s1&amp;nbsp;s2&lt;/code&gt; concatenates &lt;code&gt;s1&lt;/code&gt; and &lt;code&gt;s2&lt;/code&gt; and returns the result as new byte sequence.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dd3ab772583a961c4ca1a691344dec074ee40e8e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;catch_break&lt;/code&gt; governs whether interactive interrupt (ctrl-C) terminates the program or raises the &lt;code&gt;Break&lt;/code&gt; exception.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="86a4ca62931f888f34c703dd7c057b6aedd80bfe" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;catch_break&lt;/code&gt; governs whether interactive interrupt (ctrl-C) terminates the program or raises the &lt;code&gt;Break&lt;/code&gt; exception. Call &lt;code&gt;catch_break&amp;nbsp;true&lt;/code&gt; to enable raising &lt;code&gt;Break&lt;/code&gt;, and &lt;code&gt;catch_break&amp;nbsp;false&lt;/code&gt; to let the system terminate the program on user interrupt.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="345a69299f4e7065d5e3d0994b0a07708567f73c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;check_suffix&amp;nbsp;name&amp;nbsp;suff&lt;/code&gt; returns &lt;code&gt;true&lt;/code&gt; if the filename &lt;code&gt;name&lt;/code&gt; ends with the suffix &lt;code&gt;suff&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="78d4c610a3cfc3eec8795f6f1da73833cdd134f9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;choose&amp;nbsp;evl&lt;/code&gt; returns the event that is the alternative of all the events in the list &lt;code&gt;evl&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2ec14e19638af127880bc2012896e6df6e8c4c92" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;chop_suffix&amp;nbsp;name&amp;nbsp;suff&lt;/code&gt; removes the suffix &lt;code&gt;suff&lt;/code&gt; from the filename &lt;code&gt;name&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e86c7874985e04db9cb6ca6f8b972e725f4eede1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;chop_suffix&amp;nbsp;name&amp;nbsp;suff&lt;/code&gt; removes the suffix &lt;code&gt;suff&lt;/code&gt; from the filename &lt;code&gt;name&lt;/code&gt;. The behavior is undefined if &lt;code&gt;name&lt;/code&gt; does not end with the suffix &lt;code&gt;suff&lt;/code&gt;. &lt;code&gt;chop_suffix_opt&lt;/code&gt; is thus recommended instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="883ab5701eec0911d30eeadefed8c1dff2e6d96d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;chop_suffix_opt&amp;nbsp;~suffix&amp;nbsp;filename&lt;/code&gt; removes the suffix from the &lt;code&gt;filename&lt;/code&gt; if possible, or returns &lt;code&gt;None&lt;/code&gt; if the filename does not end with the suffix.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7bd8238ce1a1591de95c21520e6b16eb4a9ad022" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;clear_symbolic_output_buffer&amp;nbsp;sob&lt;/code&gt; resets buffer &lt;code&gt;sob&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e1fd85f913e7db444b3fd6c814cb87d714abf672" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;cmd&amp;nbsp;-flag&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/code&gt;(a unit option)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="31e543a7edc9db718996473958f6a3a8a2ff0289" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;cmd&amp;nbsp;-float&amp;nbsp;12.34&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/code&gt;(a float option with argument &lt;code&gt;12.34&lt;/code&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8345f93076b7793accf1aff087c328b0661998e1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;cmd&amp;nbsp;-int&amp;nbsp;1&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/code&gt;(an int option with argument &lt;code&gt;1&lt;/code&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f165e69ac4031cb183733d413b0b81e389e8f096" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;cmd&amp;nbsp;-string&amp;nbsp;foobar&amp;nbsp;&amp;nbsp;&lt;/code&gt;(a string option with argument &lt;code&gt;&quot;foobar&quot;&lt;/code&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2bca575bf546a5fd888dc52371e5dc76fc1ff8c4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;cmd&amp;nbsp;a&amp;nbsp;b&amp;nbsp;--&amp;nbsp;c&amp;nbsp;d&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/code&gt;(two anonymous arguments and a rest option with two arguments)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1aa2f867d0cc3c033b3be416c4a59a9c1fbe080b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;cmd&amp;nbsp;a&amp;nbsp;b&amp;nbsp;c&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/code&gt;(three anonymous arguments: &lt;code&gt;&quot;a&quot;&lt;/code&gt;, &lt;code&gt;&quot;b&quot;&lt;/code&gt;, and &lt;code&gt;&quot;c&quot;&lt;/code&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3488442db2916d91381fc6047eb2040a50c90304" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;cmp&amp;nbsp;a.(i)&amp;nbsp;a.(j)&lt;/code&gt; &amp;gt;= 0 if and only if i &amp;gt;= j</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fb09d75377c4efa967e62e498d1ac2f9ac214006" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;cmp&amp;nbsp;x&amp;nbsp;y&lt;/code&gt; &amp;gt; 0 if and only if &lt;code&gt;cmp&amp;nbsp;y&amp;nbsp;x&lt;/code&gt; &amp;lt; 0</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b550de7a540a061531e66a6f5ff0ab42fe74ea70" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;compare&amp;nbsp;b0&amp;nbsp;b1&lt;/code&gt; is a total order on boolean values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="400e3b936c33ce671a7945fa54c2324a1c966167" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;compare&amp;nbsp;b0&amp;nbsp;b1&lt;/code&gt; is a total order on boolean values. &lt;code&gt;false&lt;/code&gt; is smaller than &lt;code&gt;true&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b17cf0ba58c047f7c498739f73425e86d856c542" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;compare&amp;nbsp;cmp&amp;nbsp;[a1;&amp;nbsp;...;&amp;nbsp;an]&amp;nbsp;[b1;&amp;nbsp;...;&amp;nbsp;bm]&lt;/code&gt; performs a lexicographic comparison of the two input lists, using the same &lt;code&gt;'a&amp;nbsp;-&amp;gt;&amp;nbsp;'a&amp;nbsp;-&amp;gt;&amp;nbsp;int&lt;/code&gt; interface as &lt;a href=&quot;stdlib#VALcompare&quot;&gt;&lt;code&gt;compare&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c21ddf5f63e4cac7632061bc98dfa9b9f2345d62" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;compare&amp;nbsp;cmp&amp;nbsp;o0&amp;nbsp;o1&lt;/code&gt; is a total order on options using &lt;code&gt;cmp&lt;/code&gt; to compare values wrapped by &lt;code&gt;Some&amp;nbsp;_&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0e74802ec5ab4119b7c81a7f94ba7f82beff2e64" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;compare&amp;nbsp;cmp&amp;nbsp;o0&amp;nbsp;o1&lt;/code&gt; is a total order on options using &lt;code&gt;cmp&lt;/code&gt; to compare values wrapped by &lt;code&gt;Some&amp;nbsp;_&lt;/code&gt;. &lt;code&gt;None&lt;/code&gt; is smaller than &lt;code&gt;Some&amp;nbsp;_&lt;/code&gt; values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4bfe9fd04e64592446958feae8919a5fae1be4a8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;compare&amp;nbsp;s0&amp;nbsp;s1&lt;/code&gt; sorts &lt;code&gt;s0&lt;/code&gt; and &lt;code&gt;s1&lt;/code&gt; in lexicographical order.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d9da3a9f72d0e4a8402d17c496366f2eacc62dac" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;compare&amp;nbsp;s0&amp;nbsp;s1&lt;/code&gt; sorts &lt;code&gt;s0&lt;/code&gt; and &lt;code&gt;s1&lt;/code&gt; in lexicographical order. &lt;code&gt;compare&lt;/code&gt; behaves like &lt;a href=&quot;stdlib#VALcompare&quot;&gt;&lt;code&gt;compare&lt;/code&gt;&lt;/a&gt; on strings but may be more efficient.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3593d50b11eed1548a97b67ec5c1d172ce04c8ea" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;compare&amp;nbsp;u&amp;nbsp;u'&lt;/code&gt; is &lt;code&gt;Stdlib.compare&amp;nbsp;u&amp;nbsp;u'&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="145add7dc6de60f0743b65e63707bdf73a13149f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;compare&amp;nbsp;u1&amp;nbsp;u2&lt;/code&gt; is &lt;code&gt;0&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7e953d4f9c0d73b891965c50947e18f4d1b945aa" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;compare&amp;nbsp;x&amp;nbsp;y&lt;/code&gt; is &lt;a href=&quot;stdlib#VALcompare&quot;&gt;&lt;code&gt;compare&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;nbsp;x&amp;nbsp;y&lt;/code&gt; but more efficient.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="72d8f23d32059fa01497cc867315f38bec99e072" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;compare&amp;nbsp;x&amp;nbsp;y&lt;/code&gt; returns &lt;code&gt;0&lt;/code&gt; if &lt;code&gt;x&lt;/code&gt; is equal to &lt;code&gt;y&lt;/code&gt;, a negative integer if &lt;code&gt;x&lt;/code&gt; is less than &lt;code&gt;y&lt;/code&gt;, and a positive integer if &lt;code&gt;x&lt;/code&gt; is greater than &lt;code&gt;y&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c5101c5c8d4e6f73a7214096729abc25242cb9c9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;compare&amp;nbsp;x&amp;nbsp;y&lt;/code&gt; returns &lt;code&gt;0&lt;/code&gt; if &lt;code&gt;x&lt;/code&gt; is equal to &lt;code&gt;y&lt;/code&gt;, a negative integer if &lt;code&gt;x&lt;/code&gt; is less than &lt;code&gt;y&lt;/code&gt;, and a positive integer if &lt;code&gt;x&lt;/code&gt; is greater than &lt;code&gt;y&lt;/code&gt;. &lt;code&gt;compare&lt;/code&gt; treats &lt;code&gt;nan&lt;/code&gt; as equal to itself and less than any other float value. This treatment of &lt;code&gt;nan&lt;/code&gt; ensures that &lt;code&gt;compare&lt;/code&gt; defines a total ordering relation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5e7717004ab23eb180bad8535ec82195be13a593" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;compare&amp;nbsp;x&amp;nbsp;y&lt;/code&gt; returns &lt;code&gt;0&lt;/code&gt; if &lt;code&gt;x&lt;/code&gt; is equal to &lt;code&gt;y&lt;/code&gt;, a negative integer if &lt;code&gt;x&lt;/code&gt; is less than &lt;code&gt;y&lt;/code&gt;, and a positive integer if &lt;code&gt;x&lt;/code&gt; is greater than &lt;code&gt;y&lt;/code&gt;. The ordering implemented by &lt;code&gt;compare&lt;/code&gt; is compatible with the comparison predicates &lt;code&gt;=&lt;/code&gt;, &lt;code&gt;&amp;lt;&lt;/code&gt; and &lt;code&gt;&amp;gt;&lt;/code&gt; defined above, with one difference on the treatment of the float value &lt;a href=&quot;stdlib#VALnan&quot;&gt;&lt;code&gt;nan&lt;/code&gt;&lt;/a&gt;. Namely, the comparison predicates treat &lt;code&gt;nan&lt;/code&gt; as different from any other float value, including itself; while &lt;code&gt;compare&lt;/code&gt; treats &lt;code&gt;nan&lt;/code&gt; as equal to itself and less than any other float value. This treatment of &lt;code&gt;nan&lt;/code&gt; ensures that &lt;code&gt;compare&lt;/code&gt; defines a total ordering relation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9faf7492170b8cd5f5f47dcc61f98ae88413db05" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;compare&amp;nbsp;~left&amp;nbsp;~right&amp;nbsp;e0&amp;nbsp;e1&lt;/code&gt; totally orders &lt;code&gt;e0&lt;/code&gt; and &lt;code&gt;e1&lt;/code&gt; using &lt;code&gt;left&lt;/code&gt; and &lt;code&gt;right&lt;/code&gt; to respectively compare values wrapped by &lt;code&gt;Left&amp;nbsp;_&amp;nbsp;&lt;/code&gt; and &lt;code&gt;Right&amp;nbsp;_&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="176914dff4a831d4f8cca66f1b898ec669efe02f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;compare&amp;nbsp;~left&amp;nbsp;~right&amp;nbsp;e0&amp;nbsp;e1&lt;/code&gt; totally orders &lt;code&gt;e0&lt;/code&gt; and &lt;code&gt;e1&lt;/code&gt; using &lt;code&gt;left&lt;/code&gt; and &lt;code&gt;right&lt;/code&gt; to respectively compare values wrapped by &lt;code&gt;Left&amp;nbsp;_&amp;nbsp;&lt;/code&gt; and &lt;code&gt;Right&amp;nbsp;_&lt;/code&gt;. &lt;code&gt;Left&amp;nbsp;_&lt;/code&gt; values are smaller than &lt;code&gt;Right&amp;nbsp;_&lt;/code&gt; values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fc8fd75c5071e6236adc2e104e5902db45255519" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;compare&amp;nbsp;~ok&amp;nbsp;~error&amp;nbsp;r0&amp;nbsp;r1&lt;/code&gt; totally orders &lt;code&gt;r0&lt;/code&gt; and &lt;code&gt;r1&lt;/code&gt; using &lt;code&gt;ok&lt;/code&gt; and &lt;code&gt;error&lt;/code&gt; to respectively compare values wrapped by &lt;code&gt;Ok&amp;nbsp;_&amp;nbsp;&lt;/code&gt; and &lt;code&gt;Error&amp;nbsp;_&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="51be99969febb351e45c9756746d94c89467e993" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;compare&amp;nbsp;~ok&amp;nbsp;~error&amp;nbsp;r0&amp;nbsp;r1&lt;/code&gt; totally orders &lt;code&gt;r0&lt;/code&gt; and &lt;code&gt;r1&lt;/code&gt; using &lt;code&gt;ok&lt;/code&gt; and &lt;code&gt;error&lt;/code&gt; to respectively compare values wrapped by &lt;code&gt;Ok&amp;nbsp;_&amp;nbsp;&lt;/code&gt; and &lt;code&gt;Error&amp;nbsp;_&lt;/code&gt;. &lt;code&gt;Ok&amp;nbsp;_&lt;/code&gt; values are smaller than &lt;code&gt;Error&amp;nbsp;_&lt;/code&gt; values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="474d6e0154dc8f931c6197fb39a3ea8b0de19db9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;compare&lt;/code&gt; applied to functional values may raise &lt;code&gt;Invalid_argument&lt;/code&gt;. &lt;code&gt;compare&lt;/code&gt; applied to cyclic structures may not terminate.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="14dc17e84361884f294b66916bc7925738898f26" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;compare_and_set&amp;nbsp;r&amp;nbsp;seen&amp;nbsp;v&lt;/code&gt; sets the new value of &lt;code&gt;r&lt;/code&gt; to &lt;code&gt;v&lt;/code&gt; only if its current value is physically equal to &lt;code&gt;seen&lt;/code&gt; -- the comparison and the set occur atomically.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="269bc3422a1d097f0f358062d102b115fee765be" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;compare_and_set&amp;nbsp;r&amp;nbsp;seen&amp;nbsp;v&lt;/code&gt; sets the new value of &lt;code&gt;r&lt;/code&gt; to &lt;code&gt;v&lt;/code&gt; only if its current value is physically equal to &lt;code&gt;seen&lt;/code&gt; -- the comparison and the set occur atomically. Returns &lt;code&gt;true&lt;/code&gt; if the comparison succeeded (so the set happened) and &lt;code&gt;false&lt;/code&gt; otherwise.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c1664e12357abea1a0483159a34adfea04dba136" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;concat&amp;nbsp;dir&amp;nbsp;file&lt;/code&gt; returns a file name that designates file &lt;code&gt;file&lt;/code&gt; in directory &lt;code&gt;dir&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8333ca082ea5044eb026be921f90cf4113948b45" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;concat&amp;nbsp;sep&amp;nbsp;sl&lt;/code&gt; concatenates the list of byte sequences &lt;code&gt;sl&lt;/code&gt;, inserting the separator byte sequence &lt;code&gt;sep&lt;/code&gt; between each, and returns the result as a new byte sequence.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="58dcdbf4200babdf7a7829973d3ec57acc06b3dc" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;concat&amp;nbsp;sep&amp;nbsp;ss&lt;/code&gt; concatenates the list of strings &lt;code&gt;ss&lt;/code&gt;, inserting the separator string &lt;code&gt;sep&lt;/code&gt; between each.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="41fadc45981447feeb2d4a93afb1f15565a86b6b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;concat&amp;nbsp;~sep&amp;nbsp;sl&lt;/code&gt; concatenates the list of byte sequences &lt;code&gt;sl&lt;/code&gt;, inserting the separator byte sequence &lt;code&gt;sep&lt;/code&gt; between each, and returns the result as a new byte sequence.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cc80211604326732e2aed640287cb64b296091f1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;concat&amp;nbsp;~sep&amp;nbsp;ss&lt;/code&gt; concatenates the list of strings &lt;code&gt;ss&lt;/code&gt;, inserting the separator string &lt;code&gt;sep&lt;/code&gt; between each.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1853524b6c4f0cc3a27d8ff1476b87fc7e202e71" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;concat_map&amp;nbsp;f&amp;nbsp;l&lt;/code&gt; gives the same result as &lt;a href=&quot;list#VALconcat&quot;&gt;&lt;code&gt;List.concat&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;nbsp;(&lt;/code&gt;&lt;a href=&quot;list#VALmap&quot;&gt;&lt;code&gt;List.map&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;nbsp;f&amp;nbsp;l)&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2765d5d0c37ae954d618973977189348e952557b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;concat_map&amp;nbsp;f&amp;nbsp;l&lt;/code&gt; gives the same result as &lt;a href=&quot;list#VALconcat&quot;&gt;&lt;code&gt;List.concat&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;nbsp;(&lt;/code&gt;&lt;a href=&quot;list#VALmap&quot;&gt;&lt;code&gt;List.map&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;nbsp;f&amp;nbsp;l)&lt;/code&gt;. Tail-recursive.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="60ea87d0c25470540d6a036fa18af8521bd45088" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;concat_map&amp;nbsp;~f&amp;nbsp;l&lt;/code&gt; gives the same result as &lt;a href=&quot;listlabels#VALconcat&quot;&gt;&lt;code&gt;ListLabels.concat&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;nbsp;(&lt;/code&gt;&lt;a href=&quot;listlabels#VALmap&quot;&gt;&lt;code&gt;ListLabels.map&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;nbsp;f&amp;nbsp;l)&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c12cec3686fa5dbdba6fcede56405441552189d0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;concat_map&amp;nbsp;~f&amp;nbsp;l&lt;/code&gt; gives the same result as &lt;a href=&quot;listlabels#VALconcat&quot;&gt;&lt;code&gt;ListLabels.concat&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;nbsp;(&lt;/code&gt;&lt;a href=&quot;listlabels#VALmap&quot;&gt;&lt;code&gt;ListLabels.map&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;nbsp;f&amp;nbsp;l)&lt;/code&gt;. Tail-recursive.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e975f85ef9602c413beaef0ed24a5dbfe2a85075" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;cons&amp;nbsp;x&amp;nbsp;xs&lt;/code&gt; is &lt;code&gt;x&amp;nbsp;::&amp;nbsp;xs&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2e417233c4ad305ae9aedad55fd7cc957ba59dc0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;cons&amp;nbsp;x&amp;nbsp;xs&lt;/code&gt; is the sequence containing the element &lt;code&gt;x&lt;/code&gt; followed by the sequence &lt;code&gt;xs&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6bacf2560a15e3be8629d98603a182064c49e14e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;const&amp;nbsp;c&lt;/code&gt; is a function that always returns the value &lt;code&gt;c&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d24a7ac22284b355a9b039a54240e73ff4887f31" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;const&amp;nbsp;c&lt;/code&gt; is a function that always returns the value &lt;code&gt;c&lt;/code&gt;. For any argument &lt;code&gt;x&lt;/code&gt;, &lt;code&gt;(const&amp;nbsp;c)&amp;nbsp;x&lt;/code&gt; is &lt;code&gt;c&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="da62a1b24847029149269e4be8dc21c2cec2d14c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;contains&amp;nbsp;s&amp;nbsp;c&lt;/code&gt; is &lt;a href=&quot;string#VALcontains_from&quot;&gt;&lt;code&gt;String.contains_from&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;nbsp;s&amp;nbsp;0&amp;nbsp;c&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="40411e4e3456764f6701345a67abd879e2f6e267" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;contains&amp;nbsp;s&amp;nbsp;c&lt;/code&gt; tests if byte &lt;code&gt;c&lt;/code&gt; appears in &lt;code&gt;s&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="79591e64c0d5d41b7fc8a0d2cc6ce0246bdb9acc" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;contains_from&amp;nbsp;s&amp;nbsp;start&amp;nbsp;c&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt; if and only if &lt;code&gt;c&lt;/code&gt; appears in &lt;code&gt;s&lt;/code&gt; after position &lt;code&gt;start&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="51af584742c94c9cc15f2e4cb4f9646c5129b30a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;contains_from&amp;nbsp;s&amp;nbsp;start&amp;nbsp;c&lt;/code&gt; tests if byte &lt;code&gt;c&lt;/code&gt; appears in &lt;code&gt;s&lt;/code&gt; after position &lt;code&gt;start&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="42897430efc6eb8fb99f8d8f318c5a62a464d943" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;contains_from&amp;nbsp;s&amp;nbsp;start&amp;nbsp;c&lt;/code&gt; tests if byte &lt;code&gt;c&lt;/code&gt; appears in &lt;code&gt;s&lt;/code&gt; after position &lt;code&gt;start&lt;/code&gt;. &lt;code&gt;contains&amp;nbsp;s&amp;nbsp;c&lt;/code&gt; is equivalent to &lt;code&gt;contains_from&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;s&amp;nbsp;0&amp;nbsp;c&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9522e821dd26559eb12d88a277e28aef9b53d591" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;copy&amp;nbsp;a&lt;/code&gt; returns a copy of &lt;code&gt;a&lt;/code&gt;, that is, a fresh array containing the same elements as &lt;code&gt;a&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="13b10b9c92d58f630b9405ad436fbb0fa1c1da03" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;copy&amp;nbsp;a&lt;/code&gt; returns a copy of &lt;code&gt;a&lt;/code&gt;, that is, a fresh floatarray containing the same elements as &lt;code&gt;a&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e5e858114f9bc6261045968b400ea372afcaed78" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;copy_sign&amp;nbsp;x&amp;nbsp;y&lt;/code&gt; returns a float whose absolute value is that of &lt;code&gt;x&lt;/code&gt; and whose sign is that of &lt;code&gt;y&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="26ab425860ed9abfa62ede1aeb0f3beebcc15b63" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;copy_sign&amp;nbsp;x&amp;nbsp;y&lt;/code&gt; returns a float whose absolute value is that of &lt;code&gt;x&lt;/code&gt; and whose sign is that of &lt;code&gt;y&lt;/code&gt;. If &lt;code&gt;x&lt;/code&gt; is &lt;code&gt;nan&lt;/code&gt;, returns &lt;code&gt;nan&lt;/code&gt;. If &lt;code&gt;y&lt;/code&gt; is &lt;code&gt;nan&lt;/code&gt;, returns either &lt;code&gt;x&lt;/code&gt; or &lt;code&gt;-.&amp;nbsp;x&lt;/code&gt;, but it is not specified which.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b35a09030af8a1bece55a133053710500e10284e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;copysign&amp;nbsp;x&amp;nbsp;y&lt;/code&gt; returns a float whose absolute value is that of &lt;code&gt;x&lt;/code&gt; and whose sign is that of &lt;code&gt;y&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8b6c16f9dc9c040ed90e181ac4eaaac0a73f3a82" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;copysign&amp;nbsp;x&amp;nbsp;y&lt;/code&gt; returns a float whose absolute value is that of &lt;code&gt;x&lt;/code&gt; and whose sign is that of &lt;code&gt;y&lt;/code&gt;. If &lt;code&gt;x&lt;/code&gt; is &lt;code&gt;nan&lt;/code&gt;, returns &lt;code&gt;nan&lt;/code&gt;. If &lt;code&gt;y&lt;/code&gt; is &lt;code&gt;nan&lt;/code&gt;, returns either &lt;code&gt;x&lt;/code&gt; or &lt;code&gt;-.&amp;nbsp;x&lt;/code&gt;, but it is not specified which.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b4f89bb55a708a807dd1047980df60f28d89a42e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;create&amp;nbsp;n&lt;/code&gt; creates a new empty weak hash set, of initial size &lt;code&gt;n&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8599c3355ec13858a521f31b4c9984206cad4be8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;create&amp;nbsp;n&lt;/code&gt; creates a new empty weak hash set, of initial size &lt;code&gt;n&lt;/code&gt;. The table will grow as needed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c45282b64a5d8a5d3a28805f1f4c8c77073ac365" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;create&amp;nbsp;n&lt;/code&gt; returns a fresh buffer, initially empty.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a68fd63c75051bba98032f1491531b85959e459e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;create&amp;nbsp;n&lt;/code&gt; returns a fresh buffer, initially empty. The &lt;code&gt;n&lt;/code&gt; parameter is the initial size of the internal byte sequence that holds the buffer contents. That byte sequence is automatically reallocated when more than &lt;code&gt;n&lt;/code&gt; characters are stored in the buffer, but shrinks back to &lt;code&gt;n&lt;/code&gt; characters when &lt;code&gt;reset&lt;/code&gt; is called. For best performance, &lt;code&gt;n&lt;/code&gt; should be of the same order of magnitude as the number of characters that are expected to be stored in the buffer (for instance, 80 for a buffer that holds one output line). Nothing bad will happen if the buffer grows beyond that limit, however. In doubt, take &lt;code&gt;n&amp;nbsp;=&amp;nbsp;16&lt;/code&gt; for instance. If &lt;code&gt;n&lt;/code&gt; is not between 1 and &lt;a href=&quot;sys#VALmax_string_length&quot;&gt;&lt;code&gt;Sys.max_string_length&lt;/code&gt;&lt;/a&gt;, it will be clipped to that interval.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e8997416c8aa7ef5f343ca136e2ef49243ff7e87" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;create&amp;nbsp;n&lt;/code&gt; returns a fresh byte sequence of length &lt;code&gt;n&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d952ad27f8de6b0596d1ef8c77c59fd1e7effff9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;create&amp;nbsp;n&lt;/code&gt; returns a fresh byte sequence of length &lt;code&gt;n&lt;/code&gt;. The sequence is uninitialized and contains arbitrary bytes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="81fbe63ca4e97ade78ffe98a82f9fd5c03419581" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;create&amp;nbsp;n&lt;/code&gt; returns a fresh floatarray of length &lt;code&gt;n&lt;/code&gt;, with uninitialized data.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1b8d56d5d54d24c1d3d152bf22f5b9589b17ae73" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;create&amp;nbsp;n&lt;/code&gt; returns a new byte sequence of length &lt;code&gt;n&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="85577c149634f2b5775ea58da8a4ddcbdeb6932d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;create&amp;nbsp;n&lt;/code&gt; returns a new byte sequence of length &lt;code&gt;n&lt;/code&gt;. The sequence is uninitialized and contains arbitrary bytes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1f890f21d79b9e5854f9846c1bbbb36468d151e9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;create&amp;nbsp;n&lt;/code&gt; returns an ephemeron with &lt;code&gt;n&lt;/code&gt; keys.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="603cb3b6cbd6d4675e057d6bae32e476f6ff04bc" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;create&amp;nbsp;n&lt;/code&gt; returns an ephemeron with &lt;code&gt;n&lt;/code&gt; keys. All the keys and the data are initially empty. The argument &lt;code&gt;n&lt;/code&gt; must be between zero and &lt;a href=&quot;obj.ephemeron#VALmax_ephe_length&quot;&gt;&lt;code&gt;Obj.Ephemeron.max_ephe_length&lt;/code&gt;&lt;/a&gt; (limits included).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2557bc3acfeb2659dd51862e5e0e949e47635d62" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;create&amp;nbsp;~path&lt;/code&gt; creates a series file at &lt;code&gt;path&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d4c10671a9318ca378263eaac1c1fc2722756888" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;create_alarm&amp;nbsp;f&lt;/code&gt; will arrange for &lt;code&gt;f&lt;/code&gt; to be called at the end of each major GC cycle, starting with the current cycle or the next one.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e0478433101e685fca681959507a02454e71dd89" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;create_alarm&amp;nbsp;f&lt;/code&gt; will arrange for &lt;code&gt;f&lt;/code&gt; to be called at the end of each major GC cycle, starting with the current cycle or the next one. A value of type &lt;code&gt;alarm&lt;/code&gt; is returned that you can use to call &lt;code&gt;delete_alarm&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a65a2c6513c281f7a20376b9ba7bbc0996bbfeda" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;create_float&amp;nbsp;n&lt;/code&gt; returns a fresh float array of length &lt;code&gt;n&lt;/code&gt;, with uninitialized data.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="94dbd1a53b3547a2072235a232d2686a6f09722d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;create_process&amp;nbsp;prog&amp;nbsp;args&amp;nbsp;new_stdin&amp;nbsp;new_stdout&amp;nbsp;new_stderr&lt;/code&gt; forks a new process that executes the program in file &lt;code&gt;prog&lt;/code&gt;, with arguments &lt;code&gt;args&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9db50363c8234c9f1fc8cdf016600a7fe789ea34" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;create_process&amp;nbsp;prog&amp;nbsp;args&amp;nbsp;new_stdin&amp;nbsp;new_stdout&amp;nbsp;new_stderr&lt;/code&gt; forks a new process that executes the program in file &lt;code&gt;prog&lt;/code&gt;, with arguments &lt;code&gt;args&lt;/code&gt;. The pid of the new process is returned immediately; the new process executes concurrently with the current process. The standard input and outputs of the new process are connected to the descriptors &lt;code&gt;new_stdin&lt;/code&gt;, &lt;code&gt;new_stdout&lt;/code&gt; and &lt;code&gt;new_stderr&lt;/code&gt;. Passing e.g. &lt;code&gt;stdout&lt;/code&gt; for &lt;code&gt;new_stdout&lt;/code&gt; prevents the redirection and causes the new process to have the same standard output as the current process. The executable file &lt;code&gt;prog&lt;/code&gt; is searched in the path. The new process has the same environment as the current process.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1755db401caa809b03c6f2b718388009124b4bd8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;create_process&amp;nbsp;prog&amp;nbsp;args&amp;nbsp;stdin&amp;nbsp;stdout&amp;nbsp;stderr&lt;/code&gt; forks a new process that executes the program in file &lt;code&gt;prog&lt;/code&gt;, with arguments &lt;code&gt;args&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="beef57754242df9e056ec4ae0f78fa113f4cf38b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;create_process&amp;nbsp;prog&amp;nbsp;args&amp;nbsp;stdin&amp;nbsp;stdout&amp;nbsp;stderr&lt;/code&gt; forks a new process that executes the program in file &lt;code&gt;prog&lt;/code&gt;, with arguments &lt;code&gt;args&lt;/code&gt;. The pid of the new process is returned immediately; the new process executes concurrently with the current process. The standard input and outputs of the new process are connected to the descriptors &lt;code&gt;stdin&lt;/code&gt;, &lt;code&gt;stdout&lt;/code&gt; and &lt;code&gt;stderr&lt;/code&gt;. Passing e.g. &lt;code&gt;Stdlib.stdout&lt;/code&gt; for &lt;code&gt;stdout&lt;/code&gt; prevents the redirection and causes the new process to have the same standard output as the current process. The executable file &lt;code&gt;prog&lt;/code&gt; is searched in the path. The new process has the same environment as the current process.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="32c6d816dd1e3889b0528b7a92ec1d06724e10ee" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;create_process&amp;nbsp;~prog&amp;nbsp;~args&amp;nbsp;~stdin&amp;nbsp;~stdout&amp;nbsp;~stderr&lt;/code&gt; forks a new process that executes the program in file &lt;code&gt;prog&lt;/code&gt;, with arguments &lt;code&gt;args&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0e4f221224fb764340fbb8d7bbe142eecc9d34cc" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;create_process&amp;nbsp;~prog&amp;nbsp;~args&amp;nbsp;~stdin&amp;nbsp;~stdout&amp;nbsp;~stderr&lt;/code&gt; forks a new process that executes the program in file &lt;code&gt;prog&lt;/code&gt;, with arguments &lt;code&gt;args&lt;/code&gt;. The pid of the new process is returned immediately; the new process executes concurrently with the current process. The standard input and outputs of the new process are connected to the descriptors &lt;code&gt;stdin&lt;/code&gt;, &lt;code&gt;stdout&lt;/code&gt; and &lt;code&gt;stderr&lt;/code&gt;. Passing e.g. &lt;code&gt;Stdlib.stdout&lt;/code&gt; for &lt;code&gt;stdout&lt;/code&gt; prevents the redirection and causes the new process to have the same standard output as the current process. The executable file &lt;code&gt;prog&lt;/code&gt; is searched in the path. The new process has the same environment as the current process.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a519acd67270e3fecc10fd2b080d2d27eb91d793" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;create_process_env&amp;nbsp;prog&amp;nbsp;args&amp;nbsp;env&amp;nbsp;new_stdin&amp;nbsp;new_stdout&amp;nbsp;new_stderr&lt;/code&gt; works as &lt;a href=&quot;unix#VALcreate_process&quot;&gt;&lt;code&gt;Unix.create_process&lt;/code&gt;&lt;/a&gt;, except that the extra argument &lt;code&gt;env&lt;/code&gt; specifies the environment passed to the program.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d27422cc02e24f545e800a35c0a46e6a78fbf900" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;create_process_env&amp;nbsp;prog&amp;nbsp;args&amp;nbsp;env&amp;nbsp;new_stdin&amp;nbsp;new_stdout&amp;nbsp;new_stderr&lt;/code&gt; works as &lt;a href=&quot;unixlabels#VALcreate_process&quot;&gt;&lt;code&gt;UnixLabels.create_process&lt;/code&gt;&lt;/a&gt;, except that the extra argument &lt;code&gt;env&lt;/code&gt; specifies the environment passed to the program.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="71db1767f4f3cf5c77da803fc51c0933ff59fd9f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;create_process_env&amp;nbsp;prog&amp;nbsp;args&amp;nbsp;env&amp;nbsp;stdin&amp;nbsp;stdout&amp;nbsp;stderr&lt;/code&gt; works as &lt;a href=&quot;unix#VALcreate_process&quot;&gt;&lt;code&gt;Unix.create_process&lt;/code&gt;&lt;/a&gt;, except that the extra argument &lt;code&gt;env&lt;/code&gt; specifies the environment passed to the program.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0090b9bd6f8c73cfae869025ff7ccbc917d4ac3d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;create_process_env&amp;nbsp;~prog&amp;nbsp;~args&amp;nbsp;~env&amp;nbsp;~stdin&amp;nbsp;~stdout&amp;nbsp;~stderr&lt;/code&gt; works as &lt;a href=&quot;unixlabels#VALcreate_process&quot;&gt;&lt;code&gt;UnixLabels.create_process&lt;/code&gt;&lt;/a&gt;, except that the extra argument &lt;code&gt;env&lt;/code&gt; specifies the environment passed to the program.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b91b39099d4508805f77914004fcac82b2598bbe" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;d&lt;/code&gt;, &lt;code&gt;i&lt;/code&gt;: convert an integer argument to signed decimal. The flag &lt;code&gt;#&lt;/code&gt; adds underscores to large values for readability.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bfe595320d5f9d57a80db821a2ad19dc3537132a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;d&lt;/code&gt;: reads an optionally signed decimal integer (&lt;code&gt;0-9&lt;/code&gt;+).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8f0820bb2ae68b75936e5d0530db89d953889186" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;decr&amp;nbsp;r&lt;/code&gt; atomically decrements the value of &lt;code&gt;r&lt;/code&gt; by &lt;code&gt;1&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a0c8844b6ad8f6d1a568305bf6bf9fc28ec52dbf" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;delay&amp;nbsp;d&lt;/code&gt; suspends the execution of the calling thread for &lt;code&gt;d&lt;/code&gt; seconds.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a0207b83d36db273c87ce71547d9ed9cd2f9035e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;delay&amp;nbsp;d&lt;/code&gt; suspends the execution of the calling thread for &lt;code&gt;d&lt;/code&gt; seconds. The other program threads continue to run during this time.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4273a8129c408fdeb45cb1dce7835a9ec24dedaa" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;delete_alarm&amp;nbsp;a&lt;/code&gt; will stop the calls to the function associated to &lt;code&gt;a&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="459cf893129533e93289195d781f180261d075dc" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;delete_alarm&amp;nbsp;a&lt;/code&gt; will stop the calls to the function associated to &lt;code&gt;a&lt;/code&gt;. Calling &lt;code&gt;delete_alarm&amp;nbsp;a&lt;/code&gt; again has no effect.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e51fc21f097b4b45bfdf39b44d3cb1875950a7ea" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;div&amp;nbsp;x&amp;nbsp;y&lt;/code&gt; is the division &lt;code&gt;x&amp;nbsp;/&amp;nbsp;y&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f3c1662e12f9e546c74db5a14247dc4046b035fd" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;div&amp;nbsp;x&amp;nbsp;y&lt;/code&gt; is the division &lt;code&gt;x&amp;nbsp;/&amp;nbsp;y&lt;/code&gt;. See &lt;a href=&quot;stdlib#VAL(/)&quot;&gt;&lt;code&gt;(/)&lt;/code&gt;&lt;/a&gt; for details.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="edbf343ede403af1c7e8afaef7510c8c56a8c310" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;dup2&amp;nbsp;fd1&amp;nbsp;fd2&lt;/code&gt; duplicates &lt;code&gt;fd1&lt;/code&gt; to &lt;code&gt;fd2&lt;/code&gt;, closing &lt;code&gt;fd2&lt;/code&gt; if already opened.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="577d041ce93342e00266820f1dc6bac87e86a86a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;dup2&amp;nbsp;fd1&amp;nbsp;fd2&lt;/code&gt; duplicates &lt;code&gt;fd1&lt;/code&gt; to &lt;code&gt;fd2&lt;/code&gt;, closing &lt;code&gt;fd2&lt;/code&gt; if already opened. See &lt;a href=&quot;unix#VALset_close_on_exec&quot;&gt;&lt;code&gt;Unix.set_close_on_exec&lt;/code&gt;&lt;/a&gt; for documentation on the &lt;code&gt;cloexec&lt;/code&gt; optional argument.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="24134f2813e68266c98efd94548f86f771c94dad" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;dup2&amp;nbsp;src&amp;nbsp;dst&lt;/code&gt; duplicates &lt;code&gt;src&lt;/code&gt; to &lt;code&gt;dst&lt;/code&gt;, closing &lt;code&gt;dst&lt;/code&gt; if already opened.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9c20649e942fed2764dcbd4d6f777304f6f3bde7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;dup2&amp;nbsp;src&amp;nbsp;dst&lt;/code&gt; duplicates &lt;code&gt;src&lt;/code&gt; to &lt;code&gt;dst&lt;/code&gt;, closing &lt;code&gt;dst&lt;/code&gt; if already opened. See &lt;a href=&quot;unix#VALset_close_on_exec&quot;&gt;&lt;code&gt;Unix.set_close_on_exec&lt;/code&gt;&lt;/a&gt; for documentation on the &lt;code&gt;cloexec&lt;/code&gt; optional argument.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0fc2e14958a91615179a9bdacb43248b0a8592c2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;dup2&amp;nbsp;~src&amp;nbsp;~dst&lt;/code&gt; duplicates &lt;code&gt;src&lt;/code&gt; to &lt;code&gt;dst&lt;/code&gt;, closing &lt;code&gt;dst&lt;/code&gt; if already opened.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6bb5628ec6265031aa01b05e4a9b68f12b9cb9c7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;dup2&amp;nbsp;~src&amp;nbsp;~dst&lt;/code&gt; duplicates &lt;code&gt;src&lt;/code&gt; to &lt;code&gt;dst&lt;/code&gt;, closing &lt;code&gt;dst&lt;/code&gt; if already opened. See &lt;a href=&quot;unixlabels#VALset_close_on_exec&quot;&gt;&lt;code&gt;UnixLabels.set_close_on_exec&lt;/code&gt;&lt;/a&gt; for documentation on the &lt;code&gt;cloexec&lt;/code&gt; optional argument.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="16329349beec962f04f26545a44e4e6047c5860e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;e0&amp;nbsp;&amp;amp;&amp;amp;&amp;nbsp;e1&lt;/code&gt; is the lazy boolean conjunction of expressions &lt;code&gt;e0&lt;/code&gt; and &lt;code&gt;e1&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0984ff0d92660b924ba7b5bfd2963f3fb5630a74" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;e0&amp;nbsp;&amp;amp;&amp;amp;&amp;nbsp;e1&lt;/code&gt; is the lazy boolean conjunction of expressions &lt;code&gt;e0&lt;/code&gt; and &lt;code&gt;e1&lt;/code&gt;. If &lt;code&gt;e0&lt;/code&gt; evaluates to &lt;code&gt;false&lt;/code&gt;, &lt;code&gt;e1&lt;/code&gt; is not evaluated. Right-associative operator at precedence level 3/11.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4b96c7027fca97ac78aa4f193ca119834c4edc69" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;e0&amp;nbsp;||&amp;nbsp;e1&lt;/code&gt; is the lazy boolean disjunction of expressions &lt;code&gt;e0&lt;/code&gt; and &lt;code&gt;e1&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b05ae496980adec90112084667d422947d88886e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;e0&amp;nbsp;||&amp;nbsp;e1&lt;/code&gt; is the lazy boolean disjunction of expressions &lt;code&gt;e0&lt;/code&gt; and &lt;code&gt;e1&lt;/code&gt;. If &lt;code&gt;e0&lt;/code&gt; evaluates to &lt;code&gt;true&lt;/code&gt;, &lt;code&gt;e1&lt;/code&gt; is not evaluated. Right-associative operator at precedence level 2/11.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="47708961cdba47dc03522b2e7fb7cfbc7cf601ef" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;e1&amp;nbsp;=&amp;nbsp;e2&lt;/code&gt; tests for structural equality of &lt;code&gt;e1&lt;/code&gt; and &lt;code&gt;e2&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="69bea1101bcde531cf5c680feee9640fb3ca9dea" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;e1&amp;nbsp;=&amp;nbsp;e2&lt;/code&gt; tests for structural equality of &lt;code&gt;e1&lt;/code&gt; and &lt;code&gt;e2&lt;/code&gt;. Mutable structures (e.g. references and arrays) are equal if and only if their current contents are structurally equal, even if the two mutable objects are not the same physical object. Equality between functional values raises &lt;code&gt;Invalid_argument&lt;/code&gt;. Equality between cyclic data structures may not terminate. Left-associative operator, see &lt;a href=&quot;ocaml_operators&quot;&gt;&lt;code&gt;Ocaml_operators&lt;/code&gt;&lt;/a&gt; for more information.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ea41b980a7927502911ed254715c636eed504614" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;e1&amp;nbsp;==&amp;nbsp;e2&lt;/code&gt; tests for physical equality of &lt;code&gt;e1&lt;/code&gt; and &lt;code&gt;e2&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7d4c708c572a62edac67087bb6aa0d09141582e0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;e1&amp;nbsp;==&amp;nbsp;e2&lt;/code&gt; tests for physical equality of &lt;code&gt;e1&lt;/code&gt; and &lt;code&gt;e2&lt;/code&gt;. On mutable types such as references, arrays, byte sequences, records with mutable fields and objects with mutable instance variables, &lt;code&gt;e1&amp;nbsp;==&amp;nbsp;e2&lt;/code&gt; is true if and only if physical modification of &lt;code&gt;e1&lt;/code&gt; also affects &lt;code&gt;e2&lt;/code&gt;. On non-mutable types, the behavior of &lt;code&gt;(&amp;nbsp;==&amp;nbsp;)&lt;/code&gt; is implementation-dependent; however, it is guaranteed that &lt;code&gt;e1&amp;nbsp;==&amp;nbsp;e2&lt;/code&gt; implies &lt;code&gt;compare&amp;nbsp;e1&amp;nbsp;e2&amp;nbsp;=&amp;nbsp;0&lt;/code&gt;. Left-associative operator, see &lt;a href=&quot;ocaml_operators&quot;&gt;&lt;code&gt;Ocaml_operators&lt;/code&gt;&lt;/a&gt; for more information.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e1ce7177b16015011200072d8e69c9840d993a23" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;e&lt;/code&gt; or &lt;code&gt;E&lt;/code&gt;: convert a floating-point argument to decimal notation, in the style &lt;code&gt;d.ddd&amp;nbsp;e+-dd&lt;/code&gt; (mantissa and exponent).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6084d7437807dda17bc2ba4d50f41b44854523ad" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;enabled&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt; if the compiler is configured with spacetime and &lt;code&gt;false&lt;/code&gt; otherwise</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ca2cd77d0485e1c1aed758be567a1c9abe21d2c3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;equal&amp;nbsp;b0&amp;nbsp;b1&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt; if and only if &lt;code&gt;b0&lt;/code&gt; and &lt;code&gt;b1&lt;/code&gt; are both &lt;code&gt;true&lt;/code&gt; or both &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0bbeaef9922d30666dfb76224d6dde911fe34e5e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;equal&amp;nbsp;b0&amp;nbsp;b1&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt; iff &lt;code&gt;b0&lt;/code&gt; and &lt;code&gt;b1&lt;/code&gt; are both either &lt;code&gt;true&lt;/code&gt; or &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8f6dbbd3072eeec37aecaf6b186b68ca94da72d0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;equal&amp;nbsp;cmp&amp;nbsp;m1&amp;nbsp;m2&lt;/code&gt; tests whether the maps &lt;code&gt;m1&lt;/code&gt; and &lt;code&gt;m2&lt;/code&gt; are equal, that is, contain equal keys and associate them with equal data.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9e7d9cdac7dd8de649b27cf98cb900cf32c3b892" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;equal&amp;nbsp;cmp&amp;nbsp;m1&amp;nbsp;m2&lt;/code&gt; tests whether the maps &lt;code&gt;m1&lt;/code&gt; and &lt;code&gt;m2&lt;/code&gt; are equal, that is, contain equal keys and associate them with equal data. &lt;code&gt;cmp&lt;/code&gt; is the equality predicate used to compare the data associated with the keys.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6736b7ed527d18f6c64f154d119d5022133e889e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;equal&amp;nbsp;eq&amp;nbsp;[a1;&amp;nbsp;...;&amp;nbsp;an]&amp;nbsp;[b1;&amp;nbsp;..;&amp;nbsp;bm]&lt;/code&gt; holds when the two input lists have the same length, and for each pair of elements &lt;code&gt;ai&lt;/code&gt;, &lt;code&gt;bi&lt;/code&gt; at the same position we have &lt;code&gt;eq&amp;nbsp;ai&amp;nbsp;bi&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0b6648e8321db709376202fb26cfea6a9cbf6cc5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;equal&amp;nbsp;eq&amp;nbsp;o0&amp;nbsp;o1&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt; if and only if &lt;code&gt;o0&lt;/code&gt; and &lt;code&gt;o1&lt;/code&gt; are both &lt;code&gt;None&lt;/code&gt; or if they are &lt;code&gt;Some&amp;nbsp;v0&lt;/code&gt; and &lt;code&gt;Some&amp;nbsp;v1&lt;/code&gt; and &lt;code&gt;eq&amp;nbsp;v0&amp;nbsp;v1&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5c481430879d8626d41f28df9f4fb42f27773ccc" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;equal&amp;nbsp;eq&amp;nbsp;o0&amp;nbsp;o1&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt; iff &lt;code&gt;o0&lt;/code&gt; and &lt;code&gt;o1&lt;/code&gt; are both &lt;code&gt;None&lt;/code&gt; or if they are &lt;code&gt;Some&amp;nbsp;v0&lt;/code&gt; and &lt;code&gt;Some&amp;nbsp;v1&lt;/code&gt; and &lt;code&gt;eq&amp;nbsp;v0&amp;nbsp;v1&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="50185ccada9bbf4bd9ce18460241e263acf04321" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;equal&amp;nbsp;s0&amp;nbsp;s1&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt; if and only if &lt;code&gt;s0&lt;/code&gt; and &lt;code&gt;s1&lt;/code&gt; are character-wise equal.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2ae3596680678eb482da0bca51ff6f426025524f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;equal&amp;nbsp;s1&amp;nbsp;s2&lt;/code&gt; tests whether the sets &lt;code&gt;s1&lt;/code&gt; and &lt;code&gt;s2&lt;/code&gt; are equal, that is, contain equal elements.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fbefc9048542130b54777286e735e1258af1002d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;equal&amp;nbsp;u&amp;nbsp;u'&lt;/code&gt; is &lt;code&gt;u&amp;nbsp;=&amp;nbsp;u'&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="db4ed58d0ba7e4efeed344c0d84af643b727258b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;equal&amp;nbsp;u1&amp;nbsp;u2&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b721428054c2d2eb6e42292faa3deb5b0161776b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;equal&amp;nbsp;x&amp;nbsp;y&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt; if and only if &lt;code&gt;x&amp;nbsp;=&amp;nbsp;y&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="774746d4a4ba27f9c218c0f0971b35e75eccbfb0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;equal&amp;nbsp;x&amp;nbsp;y&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt; iff &lt;code&gt;x&amp;nbsp;=&amp;nbsp;y&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="93e5719f2df9afad5de8b3ca47ac252de1707b24" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;equal&amp;nbsp;~cmp&amp;nbsp;m1&amp;nbsp;m2&lt;/code&gt; tests whether the maps &lt;code&gt;m1&lt;/code&gt; and &lt;code&gt;m2&lt;/code&gt; are equal, that is, contain equal keys and associate them with equal data.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="81878697a2beeada80a0ac64dc324f5a7e336601" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;equal&amp;nbsp;~cmp&amp;nbsp;m1&amp;nbsp;m2&lt;/code&gt; tests whether the maps &lt;code&gt;m1&lt;/code&gt; and &lt;code&gt;m2&lt;/code&gt; are equal, that is, contain equal keys and associate them with equal data. &lt;code&gt;cmp&lt;/code&gt; is the equality predicate used to compare the data associated with the keys.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8f6ad86f5b789da829875495f6cb18727e0dde22" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;equal&amp;nbsp;~left&amp;nbsp;~right&amp;nbsp;e0&amp;nbsp;e1&lt;/code&gt; tests equality of &lt;code&gt;e0&lt;/code&gt; and &lt;code&gt;e1&lt;/code&gt; using &lt;code&gt;left&lt;/code&gt; and &lt;code&gt;right&lt;/code&gt; to respectively compare values wrapped by &lt;code&gt;Left&amp;nbsp;_&lt;/code&gt; and &lt;code&gt;Right&amp;nbsp;_&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c6cd1ba983a6b91a979fb6b83d373a82aa0bc97b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;equal&amp;nbsp;~ok&amp;nbsp;~error&amp;nbsp;r0&amp;nbsp;r1&lt;/code&gt; tests equality of &lt;code&gt;r0&lt;/code&gt; and &lt;code&gt;r1&lt;/code&gt; using &lt;code&gt;ok&lt;/code&gt; and &lt;code&gt;error&lt;/code&gt; to respectively compare values wrapped by &lt;code&gt;Ok&amp;nbsp;_&lt;/code&gt; and &lt;code&gt;Error&amp;nbsp;_&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f282faa2ec5f524cc7fb7353389d8587e5a875b5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;error&amp;nbsp;e&lt;/code&gt; is &lt;code&gt;Error&amp;nbsp;e&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8fe65b71b4cb73433a598c7b70565fdaf9f84e04" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;escaped&amp;nbsp;s&lt;/code&gt; is &lt;code&gt;s&lt;/code&gt; with special characters represented by escape sequences, following the lexical conventions of OCaml.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f82753ab0709ce927e2dc3ea9b0acfa9f8c96b15" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;eventlog_pause&amp;nbsp;()&lt;/code&gt; will pause the collection of traces in the runtime.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="000c90bcb57a9527d5efc16c34289af5fbf72f03" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;eventlog_pause&amp;nbsp;()&lt;/code&gt; will pause the collection of traces in the runtime. Traces are collected if the program is linked to the instrumented runtime and started with the environment variable OCAML_EVENTLOG_ENABLED. Events are flushed to disk after pausing, and no new events will be recorded until &lt;code&gt;eventlog_resume&lt;/code&gt; is called.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="64580bb8782eb031f856f0393e12b64ceb25660b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;eventlog_resume&amp;nbsp;()&lt;/code&gt; will resume the collection of traces in the runtime.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d7447bc5e7f831e3b59849e607e60e5296904cb3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;eventlog_resume&amp;nbsp;()&lt;/code&gt; will resume the collection of traces in the runtime. Traces are collected if the program is linked to the instrumented runtime and started with the environment variable OCAML_EVENTLOG_ENABLED. This call can be used after calling &lt;code&gt;eventlog_pause&lt;/code&gt;, or if the program was started with OCAML_EVENTLOG_ENABLED=p. (which pauses the collection of traces before the first event.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="021f5eec866205f4ace273b79fb39db2d5ee060e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;execv&amp;nbsp;prog&amp;nbsp;args&lt;/code&gt; execute the program in file &lt;code&gt;prog&lt;/code&gt;, with the arguments &lt;code&gt;args&lt;/code&gt;, and the current process environment.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f88078626beb446f35811f95c8be973490b4cb99" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;execv&amp;nbsp;prog&amp;nbsp;args&lt;/code&gt; execute the program in file &lt;code&gt;prog&lt;/code&gt;, with the arguments &lt;code&gt;args&lt;/code&gt;, and the current process environment. These &lt;code&gt;execv*&lt;/code&gt; functions never return: on success, the current program is replaced by the new one.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1c8da6b898af5e5b7f12826370433ff0d3646303" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;execv&amp;nbsp;prog&amp;nbsp;args&lt;/code&gt; execute the program in file &lt;code&gt;prog&lt;/code&gt;, with the arguments &lt;code&gt;args&lt;/code&gt;, and the current process environment. These &lt;code&gt;execv*&lt;/code&gt; functions never return: on success, the current program is replaced by the new one; on failure, a &lt;a href=&quot;unixlabels#EXCEPTIONUnix_error&quot;&gt;&lt;code&gt;UnixLabels.Unix_error&lt;/code&gt;&lt;/a&gt; exception is raised.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e4cbcedec2114d489460b309ce8d08ab3fe9d5ea" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;execv&amp;nbsp;~prog&amp;nbsp;~args&lt;/code&gt; execute the program in file &lt;code&gt;prog&lt;/code&gt;, with the arguments &lt;code&gt;args&lt;/code&gt;, and the current process environment.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8267e985d4d67b50461b52026f248565d95bc47a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;execv&amp;nbsp;~prog&amp;nbsp;~args&lt;/code&gt; execute the program in file &lt;code&gt;prog&lt;/code&gt;, with the arguments &lt;code&gt;args&lt;/code&gt;, and the current process environment. These &lt;code&gt;execv*&lt;/code&gt; functions never return: on success, the current program is replaced by the new one.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e5686bddbbc00f72eb15664a7b5076c56cd9470b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;exists&amp;nbsp;f&amp;nbsp;[a1;&amp;nbsp;...;&amp;nbsp;an]&lt;/code&gt; checks if at least one element of the list satisfies the predicate &lt;code&gt;f&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7cc46f729a5367c3b204aae7d3a09c287675ece8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;exists&amp;nbsp;f&amp;nbsp;[a1;&amp;nbsp;...;&amp;nbsp;an]&lt;/code&gt; checks if at least one element of the list satisfies the predicate &lt;code&gt;f&lt;/code&gt;. That is, it returns &lt;code&gt;(f&amp;nbsp;a1)&amp;nbsp;||&amp;nbsp;(f&amp;nbsp;a2)&amp;nbsp;||&amp;nbsp;...&amp;nbsp;||&amp;nbsp;(f&amp;nbsp;an)&lt;/code&gt; for a non-empty list and &lt;code&gt;false&lt;/code&gt; if the list is empty.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7afe5bca276b7ba2d795cad61f2536dffd155fca" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;exists&amp;nbsp;f&amp;nbsp;[|a1;&amp;nbsp;...;&amp;nbsp;an|]&lt;/code&gt; checks if at least one element of the array satisfies the predicate &lt;code&gt;f&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="76e1f7d26cdf83ca0f8bb1afd4054a535ea35581" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;exists&amp;nbsp;f&amp;nbsp;[|a1;&amp;nbsp;...;&amp;nbsp;an|]&lt;/code&gt; checks if at least one element of the array satisfies the predicate &lt;code&gt;f&lt;/code&gt;. That is, it returns &lt;code&gt;(f&amp;nbsp;a1)&amp;nbsp;||&amp;nbsp;(f&amp;nbsp;a2)&amp;nbsp;||&amp;nbsp;...&amp;nbsp;||&amp;nbsp;(f&amp;nbsp;an)&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="de7038e47def59e129774b98d720c7481e03df77" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;exists&amp;nbsp;f&amp;nbsp;[|a1;&amp;nbsp;...;&amp;nbsp;an|]&lt;/code&gt; checks if at least one element of the floatarray satisfies the predicate &lt;code&gt;f&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7b94ad14ca66190e7a78dc669089b0779fe52ebf" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;exists&amp;nbsp;f&amp;nbsp;[|a1;&amp;nbsp;...;&amp;nbsp;an|]&lt;/code&gt; checks if at least one element of the floatarray satisfies the predicate &lt;code&gt;f&lt;/code&gt;. That is, it returns &lt;code&gt;(f&amp;nbsp;a1)&amp;nbsp;||&amp;nbsp;(f&amp;nbsp;a2)&amp;nbsp;||&amp;nbsp;...&amp;nbsp;||&amp;nbsp;(f&amp;nbsp;an)&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9ee83ef2a79f1410f0e40c54490b3d4e2b6b24e7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;exists&amp;nbsp;f&amp;nbsp;m&lt;/code&gt; checks if at least one binding of the map satisfies the predicate &lt;code&gt;f&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5fee270c97cfd678699c413877af52f9673fd585" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;exists&amp;nbsp;f&amp;nbsp;s&lt;/code&gt; checks if at least one element of the set satisfies the predicate &lt;code&gt;f&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4cc7ddcb2e220ebc92daeec903ea743be2844736" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;exists&amp;nbsp;p&amp;nbsp;[a1;&amp;nbsp;...;&amp;nbsp;an]&lt;/code&gt; checks if at least one element of the list satisfies the predicate &lt;code&gt;p&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="49986951ba3ccb93f08201d2be7ce3b41be697e3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;exists&amp;nbsp;p&amp;nbsp;[a1;&amp;nbsp;...;&amp;nbsp;an]&lt;/code&gt; checks if at least one element of the list satisfies the predicate &lt;code&gt;p&lt;/code&gt;. That is, it returns &lt;code&gt;(p&amp;nbsp;a1)&amp;nbsp;||&amp;nbsp;(p&amp;nbsp;a2)&amp;nbsp;||&amp;nbsp;...&amp;nbsp;||&amp;nbsp;(p&amp;nbsp;an)&lt;/code&gt; for a non-empty list and &lt;code&gt;false&lt;/code&gt; if the list is empty.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="edacb2b980987b2ac831dbf5fa299bcd28219598" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;exists&amp;nbsp;p&amp;nbsp;[a1;&amp;nbsp;...;&amp;nbsp;an]&lt;/code&gt; checks if at least one element of the list satisfies the predicate &lt;code&gt;p&lt;/code&gt;. That is, it returns &lt;code&gt;(p&amp;nbsp;a1)&amp;nbsp;||&amp;nbsp;(p&amp;nbsp;a2)&amp;nbsp;||&amp;nbsp;...&amp;nbsp;||&amp;nbsp;(p&amp;nbsp;an)&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="03860a2fae8f45c280ea343d6aa133c8df0cc2dc" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;exists&amp;nbsp;p&amp;nbsp;[|a1;&amp;nbsp;...;&amp;nbsp;an|]&lt;/code&gt; checks if at least one element of the floatarray satisfies the predicate &lt;code&gt;p&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c0c7b537ce4ab1e9a8883dd04fbe4244ace01592" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;exists&amp;nbsp;p&amp;nbsp;[|a1;&amp;nbsp;...;&amp;nbsp;an|]&lt;/code&gt; checks if at least one element of the floatarray satisfies the predicate &lt;code&gt;p&lt;/code&gt;. That is, it returns &lt;code&gt;(p&amp;nbsp;a1)&amp;nbsp;||&amp;nbsp;(p&amp;nbsp;a2)&amp;nbsp;||&amp;nbsp;...&amp;nbsp;||&amp;nbsp;(p&amp;nbsp;an)&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8eb13642bdab0e8bc7dc8e4b1e6b900d26152f4d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;exists&amp;nbsp;p&amp;nbsp;m&lt;/code&gt; checks if at least one binding of the map satisfies the predicate &lt;code&gt;p&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cacf27924fb7e997cb5d1d4153abc272d1f02f37" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;exists&amp;nbsp;p&amp;nbsp;s&lt;/code&gt; checks if at least one element of the set satisfies the predicate &lt;code&gt;p&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3b21ae9cd38bfc928fb0484bcbb88150984698e0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;exists&amp;nbsp;~f&amp;nbsp;[a1;&amp;nbsp;...;&amp;nbsp;an]&lt;/code&gt; checks if at least one element of the list satisfies the predicate &lt;code&gt;f&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c488f3410158f641be496909ce5c0f5b8d4838df" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;exists&amp;nbsp;~f&amp;nbsp;[a1;&amp;nbsp;...;&amp;nbsp;an]&lt;/code&gt; checks if at least one element of the list satisfies the predicate &lt;code&gt;f&lt;/code&gt;. That is, it returns &lt;code&gt;(f&amp;nbsp;a1)&amp;nbsp;||&amp;nbsp;(f&amp;nbsp;a2)&amp;nbsp;||&amp;nbsp;...&amp;nbsp;||&amp;nbsp;(f&amp;nbsp;an)&lt;/code&gt; for a non-empty list and &lt;code&gt;false&lt;/code&gt; if the list is empty.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="01a9abc3d3c55811c9841e2688b8fdd54a9cc109" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;exists&amp;nbsp;~f&amp;nbsp;[|a1;&amp;nbsp;...;&amp;nbsp;an|]&lt;/code&gt; checks if at least one element of the array satisfies the predicate &lt;code&gt;f&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="17d433211b95b32b9327ccde1aa1e232153da638" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;exists&amp;nbsp;~f&amp;nbsp;[|a1;&amp;nbsp;...;&amp;nbsp;an|]&lt;/code&gt; checks if at least one element of the array satisfies the predicate &lt;code&gt;f&lt;/code&gt;. That is, it returns &lt;code&gt;(f&amp;nbsp;a1)&amp;nbsp;||&amp;nbsp;(f&amp;nbsp;a2)&amp;nbsp;||&amp;nbsp;...&amp;nbsp;||&amp;nbsp;(f&amp;nbsp;an)&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c50e9856d641bf6ea750120258761da4cc83065b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;exists&amp;nbsp;~f&amp;nbsp;m&lt;/code&gt; checks if at least one binding of the map satisfies the predicate &lt;code&gt;f&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4c0fee96d4a5ba6c946e8d055fd6c5aa1504a63e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;exists&amp;nbsp;~f&amp;nbsp;s&lt;/code&gt; checks if at least one element of the set satisfies the predicate &lt;code&gt;f&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="28dbd8bce9d2444651587d6fec9df7022296691a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;expm1&amp;nbsp;x&lt;/code&gt; computes &lt;code&gt;exp&amp;nbsp;x&amp;nbsp;-.&amp;nbsp;1.0&lt;/code&gt;, giving numerically-accurate results even if &lt;code&gt;x&lt;/code&gt; is close to &lt;code&gt;0.0&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9e29d0276ea1e672e9130bde02ef7ad193d06f53" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ext&lt;/code&gt; is preceded by at least one non-period character in &lt;code&gt;name0&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="65321fea4b47545444b093d38b717de87fdef6b4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ext&lt;/code&gt; starts with a period;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5fa7d9f30e4963d91d0d95a81f6416c89bd939e3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;extend&amp;nbsp;s&amp;nbsp;left&amp;nbsp;right&lt;/code&gt; returns a new byte sequence that contains the bytes of &lt;code&gt;s&lt;/code&gt;, with &lt;code&gt;left&lt;/code&gt; uninitialized bytes prepended and &lt;code&gt;right&lt;/code&gt; uninitialized bytes appended to it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c4e766f7eae63e1963d6bcf26dbcb8eea88e9707" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;extend&amp;nbsp;s&amp;nbsp;left&amp;nbsp;right&lt;/code&gt; returns a new byte sequence that contains the bytes of &lt;code&gt;s&lt;/code&gt;, with &lt;code&gt;left&lt;/code&gt; uninitialized bytes prepended and &lt;code&gt;right&lt;/code&gt; uninitialized bytes appended to it. If &lt;code&gt;left&lt;/code&gt; or &lt;code&gt;right&lt;/code&gt; is negative, then bytes are removed (instead of appended) from the corresponding side of &lt;code&gt;s&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c019d7a6c4096571b9f6a4ee1fc2fbd944420abd" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;extend&amp;nbsp;s&amp;nbsp;~left&amp;nbsp;~right&lt;/code&gt; returns a new byte sequence that contains the bytes of &lt;code&gt;s&lt;/code&gt;, with &lt;code&gt;left&lt;/code&gt; uninitialized bytes prepended and &lt;code&gt;right&lt;/code&gt; uninitialized bytes appended to it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f568e5fd5514aaf5d4bf02aa6964888d0d2ffc3c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;extend&amp;nbsp;s&amp;nbsp;~left&amp;nbsp;~right&lt;/code&gt; returns a new byte sequence that contains the bytes of &lt;code&gt;s&lt;/code&gt;, with &lt;code&gt;left&lt;/code&gt; uninitialized bytes prepended and &lt;code&gt;right&lt;/code&gt; uninitialized bytes appended to it. If &lt;code&gt;left&lt;/code&gt; or &lt;code&gt;right&lt;/code&gt; is negative, then bytes are removed (instead of appended) from the corresponding side of &lt;code&gt;s&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="47779ae20ecfb8e2561d43c5d9d076a03cf3f014" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;extension&amp;nbsp;name&lt;/code&gt; is the shortest suffix &lt;code&gt;ext&lt;/code&gt; of &lt;code&gt;name0&lt;/code&gt; where:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="816054672f8c2b5134d9c4138b73672f384a8e26" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;f1&amp;nbsp;^^&amp;nbsp;f2&lt;/code&gt; catenates format strings &lt;code&gt;f1&lt;/code&gt; and &lt;code&gt;f2&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5e5cf1efa323ea9a7c76e4e60e96dafd9b2c3737" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;f1&amp;nbsp;^^&amp;nbsp;f2&lt;/code&gt; catenates format strings &lt;code&gt;f1&lt;/code&gt; and &lt;code&gt;f2&lt;/code&gt;. The result is a format string that behaves as the concatenation of format strings &lt;code&gt;f1&lt;/code&gt; and &lt;code&gt;f2&lt;/code&gt;: in case of formatted output, it accepts arguments from &lt;code&gt;f1&lt;/code&gt;, then arguments from &lt;code&gt;f2&lt;/code&gt;; in case of formatted input, it returns results from &lt;code&gt;f1&lt;/code&gt;, then results from &lt;code&gt;f2&lt;/code&gt;. Right-associative operator, see &lt;a href=&quot;ocaml_operators&quot;&gt;&lt;code&gt;Ocaml_operators&lt;/code&gt;&lt;/a&gt; for more information.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f2b65d4a0c2d6a6a679ce749781ff58a9a6f6b63" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;f&lt;/code&gt; is a function that has as many arguments as the number of values to read in the input according to &lt;code&gt;fmt&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="29ba5bae9a3821eef058dd21065f4309e97a3771" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;f&lt;/code&gt;, &lt;code&gt;e&lt;/code&gt;, &lt;code&gt;E&lt;/code&gt;, &lt;code&gt;g&lt;/code&gt;, &lt;code&gt;G&lt;/code&gt;: reads an optionally signed floating-point number in decimal notation, in the style &lt;code&gt;dddd.ddd&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;e/E+-dd&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7e4dea8bb36ce22d9c8f77771292a6ff75e2cfdc" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;f&lt;/code&gt;: convert a floating-point argument to decimal notation, in the style &lt;code&gt;dddd.ddd&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bbd9b790fa51b4c88201b2d9d988ff434b12fce2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fetch_and_add&amp;nbsp;r&amp;nbsp;n&lt;/code&gt; atomically increments the value of &lt;code&gt;r&lt;/code&gt; by &lt;code&gt;n&lt;/code&gt;, and returns the current value (before the increment).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ee988d078a8b1835e7476cade68ce4c2217d597c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fill&amp;nbsp;a&amp;nbsp;ofs&amp;nbsp;len&amp;nbsp;x&lt;/code&gt; modifies the floatarray &lt;code&gt;a&lt;/code&gt; in place, storing &lt;code&gt;x&lt;/code&gt; in elements number &lt;code&gt;ofs&lt;/code&gt; to &lt;code&gt;ofs&amp;nbsp;+&amp;nbsp;len&amp;nbsp;-&amp;nbsp;1&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d48e0da0751637c6f587711d6effc05491aa97e3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fill&amp;nbsp;a&amp;nbsp;pos&amp;nbsp;len&amp;nbsp;x&lt;/code&gt; modifies the array &lt;code&gt;a&lt;/code&gt; in place, storing &lt;code&gt;x&lt;/code&gt; in elements number &lt;code&gt;pos&lt;/code&gt; to &lt;code&gt;pos&amp;nbsp;+&amp;nbsp;len&amp;nbsp;-&amp;nbsp;1&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="58a8a4149a6257e7283c1b6504b35a470931e03f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fill&amp;nbsp;a&amp;nbsp;pos&amp;nbsp;len&amp;nbsp;x&lt;/code&gt; modifies the floatarray &lt;code&gt;a&lt;/code&gt; in place, storing &lt;code&gt;x&lt;/code&gt; in elements number &lt;code&gt;pos&lt;/code&gt; to &lt;code&gt;pos&amp;nbsp;+&amp;nbsp;len&amp;nbsp;-&amp;nbsp;1&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0c3b6b9d16ef251254388033c41d393ae7c5f2e8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fill&amp;nbsp;a&amp;nbsp;~pos&amp;nbsp;~len&amp;nbsp;x&lt;/code&gt; modifies the array &lt;code&gt;a&lt;/code&gt; in place, storing &lt;code&gt;x&lt;/code&gt; in elements number &lt;code&gt;pos&lt;/code&gt; to &lt;code&gt;pos&amp;nbsp;+&amp;nbsp;len&amp;nbsp;-&amp;nbsp;1&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f21abe23ed3117fb043e76b1a182f0ec9b51b005" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fill&amp;nbsp;a&amp;nbsp;~pos&amp;nbsp;~len&amp;nbsp;x&lt;/code&gt; modifies the floatarray &lt;code&gt;a&lt;/code&gt; in place, storing &lt;code&gt;x&lt;/code&gt; in elements number &lt;code&gt;pos&lt;/code&gt; to &lt;code&gt;pos&amp;nbsp;+&amp;nbsp;len&amp;nbsp;-&amp;nbsp;1&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0a05ddc23a04a05a946baaa859b117a164122437" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fill&amp;nbsp;s&amp;nbsp;pos&amp;nbsp;len&amp;nbsp;c&lt;/code&gt; modifies &lt;code&gt;s&lt;/code&gt; in place, replacing &lt;code&gt;len&lt;/code&gt; characters with &lt;code&gt;c&lt;/code&gt;, starting at &lt;code&gt;pos&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ae20634da6495e5b3197128c28866c465bc37327" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fill&amp;nbsp;s&amp;nbsp;pos&amp;nbsp;len&amp;nbsp;c&lt;/code&gt; modifies byte sequence &lt;code&gt;s&lt;/code&gt; in place, replacing &lt;code&gt;len&lt;/code&gt; bytes by &lt;code&gt;c&lt;/code&gt;, starting at &lt;code&gt;pos&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4504151889651ebe4ff6a4a1861bade85120849c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fill&amp;nbsp;s&amp;nbsp;start&amp;nbsp;len&amp;nbsp;c&lt;/code&gt; modifies &lt;code&gt;s&lt;/code&gt; in place, replacing &lt;code&gt;len&lt;/code&gt; characters with &lt;code&gt;c&lt;/code&gt;, starting at &lt;code&gt;start&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="40c97722c97ea2fcbbf774ce690a8e2b1843b2c7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fill&amp;nbsp;s&amp;nbsp;~pos&amp;nbsp;~len&amp;nbsp;c&lt;/code&gt; modifies &lt;code&gt;s&lt;/code&gt; in place, replacing &lt;code&gt;len&lt;/code&gt; characters with &lt;code&gt;c&lt;/code&gt;, starting at &lt;code&gt;pos&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="185643b4791519ae9e5c4b3499edeefe6aeb81b0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fill&amp;nbsp;s&amp;nbsp;~pos&amp;nbsp;~len&amp;nbsp;c&lt;/code&gt; modifies byte sequence &lt;code&gt;s&lt;/code&gt; in place, replacing &lt;code&gt;len&lt;/code&gt; bytes by &lt;code&gt;c&lt;/code&gt;, starting at &lt;code&gt;pos&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ea50750ac48a3ec96b96ddefd2e364b75aef1636" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;filter&amp;nbsp;f&amp;nbsp;l&lt;/code&gt; returns all the elements of the list &lt;code&gt;l&lt;/code&gt; that satisfy the predicate &lt;code&gt;f&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d467f94f78a610fde559e5ded125c3e7872c7b45" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;filter&amp;nbsp;f&amp;nbsp;l&lt;/code&gt; returns all the elements of the list &lt;code&gt;l&lt;/code&gt; that satisfy the predicate &lt;code&gt;f&lt;/code&gt;. The order of the elements in the input list is preserved.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0263ea6d18ad851c00398ec3108228ea5328203e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;filter&amp;nbsp;f&amp;nbsp;m&lt;/code&gt; returns the map with all the bindings in &lt;code&gt;m&lt;/code&gt; that satisfy predicate &lt;code&gt;p&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eef9ca69fe68bec1133ad4b368013ddfe0324fbf" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;filter&amp;nbsp;f&amp;nbsp;m&lt;/code&gt; returns the map with all the bindings in &lt;code&gt;m&lt;/code&gt; that satisfy predicate &lt;code&gt;p&lt;/code&gt;. If every binding in &lt;code&gt;m&lt;/code&gt; satisfies &lt;code&gt;f&lt;/code&gt;, &lt;code&gt;m&lt;/code&gt; is returned unchanged (the result of the function is then physically equal to &lt;code&gt;m&lt;/code&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e00e7421baebda7cd48b23a2f8a0ec425a0939d9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;filter&amp;nbsp;f&amp;nbsp;s&lt;/code&gt; returns the set of all elements in &lt;code&gt;s&lt;/code&gt; that satisfy predicate &lt;code&gt;f&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="25709233095d3934494b6e2d59586cdb16f39bb7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;filter&amp;nbsp;f&amp;nbsp;s&lt;/code&gt; returns the set of all elements in &lt;code&gt;s&lt;/code&gt; that satisfy predicate &lt;code&gt;f&lt;/code&gt;. If &lt;code&gt;f&lt;/code&gt; satisfies every element in &lt;code&gt;s&lt;/code&gt;, &lt;code&gt;s&lt;/code&gt; is returned unchanged (the result of the function is then physically equal to &lt;code&gt;s&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3e9c3d68c35962adf25887a7ee5047190dbeccf2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;filter&amp;nbsp;p&amp;nbsp;l&lt;/code&gt; returns all the elements of the list &lt;code&gt;l&lt;/code&gt; that satisfy the predicate &lt;code&gt;p&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d54ce337acb2bc7bc619cfab3236472b056f6167" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;filter&amp;nbsp;p&amp;nbsp;l&lt;/code&gt; returns all the elements of the list &lt;code&gt;l&lt;/code&gt; that satisfy the predicate &lt;code&gt;p&lt;/code&gt;. The order of the elements in the input list is preserved.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="97a0329bebdbbf0c988e93e38052389b0e965c5b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;filter&amp;nbsp;p&amp;nbsp;m&lt;/code&gt; returns the map with all the bindings in &lt;code&gt;m&lt;/code&gt; that satisfy predicate &lt;code&gt;p&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2cba00cd6c442f5e7e57b8eccb46057c389b6396" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;filter&amp;nbsp;p&amp;nbsp;m&lt;/code&gt; returns the map with all the bindings in &lt;code&gt;m&lt;/code&gt; that satisfy predicate &lt;code&gt;p&lt;/code&gt;. If every binding in &lt;code&gt;m&lt;/code&gt; satisfies &lt;code&gt;p&lt;/code&gt;, &lt;code&gt;m&lt;/code&gt; is returned unchanged (the result of the function is then physically equal to &lt;code&gt;m&lt;/code&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fba22f2d2e934e5d9f49636cad14885937e87cde" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;filter&amp;nbsp;p&amp;nbsp;s&lt;/code&gt; returns the set of all elements in &lt;code&gt;s&lt;/code&gt; that satisfy predicate &lt;code&gt;p&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e9f434c9fb0031ab5d29ccc80c96b5cbbd111b46" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;filter&amp;nbsp;p&amp;nbsp;s&lt;/code&gt; returns the set of all elements in &lt;code&gt;s&lt;/code&gt; that satisfy predicate &lt;code&gt;p&lt;/code&gt;. If &lt;code&gt;p&lt;/code&gt; satisfies every element in &lt;code&gt;s&lt;/code&gt;, &lt;code&gt;s&lt;/code&gt; is returned unchanged (the result of the function is then physically equal to &lt;code&gt;s&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0851c61daf36b36b234308bb87306b3755acc5e3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;filter&amp;nbsp;~f&amp;nbsp;l&lt;/code&gt; returns all the elements of the list &lt;code&gt;l&lt;/code&gt; that satisfy the predicate &lt;code&gt;f&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="100edce7a2dfe293370b48ccff82a827afa90dac" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;filter&amp;nbsp;~f&amp;nbsp;l&lt;/code&gt; returns all the elements of the list &lt;code&gt;l&lt;/code&gt; that satisfy the predicate &lt;code&gt;f&lt;/code&gt;. The order of the elements in the input list is preserved.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7c029eb47b6a0288e37622739bdc7acfd5ce9130" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;filter&amp;nbsp;~f&amp;nbsp;m&lt;/code&gt; returns the map with all the bindings in &lt;code&gt;m&lt;/code&gt; that satisfy predicate &lt;code&gt;p&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1ba9b777fba64863c94d580adec42ad00bea485b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;filter&amp;nbsp;~f&amp;nbsp;m&lt;/code&gt; returns the map with all the bindings in &lt;code&gt;m&lt;/code&gt; that satisfy predicate &lt;code&gt;p&lt;/code&gt;. If every binding in &lt;code&gt;m&lt;/code&gt; satisfies &lt;code&gt;f&lt;/code&gt;, &lt;code&gt;m&lt;/code&gt; is returned unchanged (the result of the function is then physically equal to &lt;code&gt;m&lt;/code&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="05a7bbd0227c78e6cde19498a22f62aa1ba3aded" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;filter&amp;nbsp;~f&amp;nbsp;s&lt;/code&gt; returns the set of all elements in &lt;code&gt;s&lt;/code&gt; that satisfy predicate &lt;code&gt;f&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fbac9918ae4fbb8586aece41b0a6891eaa3dca75" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;filter&amp;nbsp;~f&amp;nbsp;s&lt;/code&gt; returns the set of all elements in &lt;code&gt;s&lt;/code&gt; that satisfy predicate &lt;code&gt;f&lt;/code&gt;. If &lt;code&gt;f&lt;/code&gt; satisfies every element in &lt;code&gt;s&lt;/code&gt;, &lt;code&gt;s&lt;/code&gt; is returned unchanged (the result of the function is then physically equal to &lt;code&gt;s&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="51ef1955777225d32165f6fb0845bb09147ff90e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;filter_map&amp;nbsp;f&amp;nbsp;l&lt;/code&gt; applies &lt;code&gt;f&lt;/code&gt; to every element of &lt;code&gt;l&lt;/code&gt;, filters out the &lt;code&gt;None&lt;/code&gt; elements and returns the list of the arguments of the &lt;code&gt;Some&lt;/code&gt; elements.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c06a481ca9ec5da8b1a26f3a2923b7e80579f85a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;filter_map&amp;nbsp;f&amp;nbsp;m&lt;/code&gt; applies the function &lt;code&gt;f&lt;/code&gt; to every binding of &lt;code&gt;m&lt;/code&gt;, and builds a map from the results.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a4895c18c891360959a147c8fb3ef2c9428d30c0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;filter_map&amp;nbsp;f&amp;nbsp;m&lt;/code&gt; applies the function &lt;code&gt;f&lt;/code&gt; to every binding of &lt;code&gt;m&lt;/code&gt;, and builds a map from the results. For each binding &lt;code&gt;(k,&amp;nbsp;v)&lt;/code&gt; in the input map:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8e5dd8573a0bf13cf859c240b9c79ce8467ce686" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;filter_map&amp;nbsp;f&amp;nbsp;s&lt;/code&gt; returns the set of all &lt;code&gt;v&lt;/code&gt; such that &lt;code&gt;f&amp;nbsp;x&amp;nbsp;=&amp;nbsp;Some&amp;nbsp;v&lt;/code&gt; for some element &lt;code&gt;x&lt;/code&gt; of &lt;code&gt;s&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b17a7cfb50f6539ae24d3b95f3a99ba5a0e7ea79" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;filter_map&amp;nbsp;~f&amp;nbsp;l&lt;/code&gt; applies &lt;code&gt;f&lt;/code&gt; to every element of &lt;code&gt;l&lt;/code&gt;, filters out the &lt;code&gt;None&lt;/code&gt; elements and returns the list of the arguments of the &lt;code&gt;Some&lt;/code&gt; elements.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8c52824fe51050e86ffce6570741a0c06c3faac8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;filter_map&amp;nbsp;~f&amp;nbsp;m&lt;/code&gt; applies the function &lt;code&gt;f&lt;/code&gt; to every binding of &lt;code&gt;m&lt;/code&gt;, and builds a map from the results.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3f95a1f9420069f8970a193d530f03328ae18c07" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;filter_map&amp;nbsp;~f&amp;nbsp;m&lt;/code&gt; applies the function &lt;code&gt;f&lt;/code&gt; to every binding of &lt;code&gt;m&lt;/code&gt;, and builds a map from the results. For each binding &lt;code&gt;(k,&amp;nbsp;v)&lt;/code&gt; in the input map:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6ed2f6519dcfbd256fa5a5f9c4b65cff79449a2a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;filter_map&amp;nbsp;~f&amp;nbsp;s&lt;/code&gt; returns the set of all &lt;code&gt;v&lt;/code&gt; such that &lt;code&gt;f&amp;nbsp;x&amp;nbsp;=&amp;nbsp;Some&amp;nbsp;v&lt;/code&gt; for some element &lt;code&gt;x&lt;/code&gt; of &lt;code&gt;s&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="947da468b84d2f2a2d13d0e99a7f11c1f528672e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;finalise&amp;nbsp;f&amp;nbsp;v&lt;/code&gt; registers &lt;code&gt;f&lt;/code&gt; as a finalisation function for &lt;code&gt;v&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="74af036e725d7e6019a9e49af4116a2075dc2131" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;finalise&amp;nbsp;f&amp;nbsp;v&lt;/code&gt; registers &lt;code&gt;f&lt;/code&gt; as a finalisation function for &lt;code&gt;v&lt;/code&gt;. &lt;code&gt;v&lt;/code&gt; must be heap-allocated. &lt;code&gt;f&lt;/code&gt; will be called with &lt;code&gt;v&lt;/code&gt; as argument at some point between the first time &lt;code&gt;v&lt;/code&gt; becomes unreachable (including through weak pointers) and the time &lt;code&gt;v&lt;/code&gt; is collected by the GC. Several functions can be registered for the same value, or even several instances of the same function. Each instance will be called once (or never, if the program terminates before &lt;code&gt;v&lt;/code&gt; becomes unreachable).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4e5030f8f46d66d0979b79e8d58bd04969b93c56" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;finalise&lt;/code&gt; will raise &lt;code&gt;Invalid_argument&lt;/code&gt; if &lt;code&gt;v&lt;/code&gt; is not guaranteed to be heap-allocated. Some examples of values that are not heap-allocated are integers, constant constructors, booleans, the empty array, the empty list, the unit value. The exact list of what is heap-allocated or not is implementation-dependent. Some constant values can be heap-allocated but never deallocated during the lifetime of the program, for example a list of integer constants; this is also implementation-dependent. Note that values of types &lt;code&gt;float&lt;/code&gt; are sometimes allocated and sometimes not, so finalising them is unsafe, and &lt;code&gt;finalise&lt;/code&gt; will also raise &lt;code&gt;Invalid_argument&lt;/code&gt; for them. Values of type &lt;code&gt;'a&amp;nbsp;Lazy.t&lt;/code&gt; (for any &lt;code&gt;'a&lt;/code&gt;) are like &lt;code&gt;float&lt;/code&gt; in this respect, except that the compiler sometimes optimizes them in a way that prevents &lt;code&gt;finalise&lt;/code&gt; from detecting them. In this case, it will not raise &lt;code&gt;Invalid_argument&lt;/code&gt;, but you should still avoid calling &lt;code&gt;finalise&lt;/code&gt; on lazy values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="70b95c5f076fbe00e22c487e5d744642c8b0ab80" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;find&amp;nbsp;f&amp;nbsp;l&lt;/code&gt; returns the first element of the list &lt;code&gt;l&lt;/code&gt; that satisfies the predicate &lt;code&gt;f&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="007cecd96aa04f2d16abcad405e10c0a1bb53554" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;find&amp;nbsp;f&amp;nbsp;l&lt;/code&gt; returns the first element of the list &lt;code&gt;l&lt;/code&gt; that satisfies the predicate &lt;code&gt;f&lt;/code&gt;. Returns &lt;code&gt;None&lt;/code&gt; if there is no value that satisfies &lt;code&gt;f&lt;/code&gt; in the list &lt;code&gt;l&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="28cd940748de014ba1aa1543a21cadf1c26be6e5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;find&amp;nbsp;p&amp;nbsp;l&lt;/code&gt; returns the first element of the list &lt;code&gt;l&lt;/code&gt; that satisfies the predicate &lt;code&gt;p&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e6eadf74c2e80218d3ce05b7116e0fc7df94e70d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;find&amp;nbsp;p&amp;nbsp;l&lt;/code&gt; returns the first element of the list &lt;code&gt;l&lt;/code&gt; that satisfies the predicate &lt;code&gt;p&lt;/code&gt;. Returns &lt;code&gt;None&lt;/code&gt; if there is no value that satisfies &lt;code&gt;p&lt;/code&gt; in the list &lt;code&gt;l&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fa74d3f6974aad17a125ec75a64da9064d4b672a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;find&amp;nbsp;t&amp;nbsp;x&lt;/code&gt; returns an instance of &lt;code&gt;x&lt;/code&gt; found in &lt;code&gt;t&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2accbc227dddb0e2e5197995b9e5390b2c137640" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;find&amp;nbsp;x&amp;nbsp;m&lt;/code&gt; returns the current value of &lt;code&gt;x&lt;/code&gt; in &lt;code&gt;m&lt;/code&gt;, or raises &lt;code&gt;Not_found&lt;/code&gt; if no binding for &lt;code&gt;x&lt;/code&gt; exists.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="530e270c1fd933c99e4909def74a7fe51ad02864" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;find&amp;nbsp;x&amp;nbsp;s&lt;/code&gt; returns the element of &lt;code&gt;s&lt;/code&gt; equal to &lt;code&gt;x&lt;/code&gt; (according to &lt;code&gt;Ord.compare&lt;/code&gt;), or raise &lt;code&gt;Not_found&lt;/code&gt; if no such element exists.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0b55cf505d212a9261fec566a5f44a8f3741f2b5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;find&amp;nbsp;~f&amp;nbsp;l&lt;/code&gt; returns the first element of the list &lt;code&gt;l&lt;/code&gt; that satisfies the predicate &lt;code&gt;f&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="da3bc83dfdc3748db29dd6e13cb0f659b0281c67" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;find&amp;nbsp;~f&amp;nbsp;l&lt;/code&gt; returns the first element of the list &lt;code&gt;l&lt;/code&gt; that satisfies the predicate &lt;code&gt;f&lt;/code&gt;. Returns &lt;code&gt;None&lt;/code&gt; if there is no value that satisfies &lt;code&gt;f&lt;/code&gt; in the list &lt;code&gt;l&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="32b0754b23335cc0e9112b7a860f875d1f37cb5a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;find_all&amp;nbsp;t&amp;nbsp;x&lt;/code&gt; returns a list of all the instances of &lt;code&gt;x&lt;/code&gt; found in &lt;code&gt;t&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1c14c67975cf5562fcd0597cfaa187adec3e8391" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;find_all&lt;/code&gt; is another name for &lt;a href=&quot;list#VALfilter&quot;&gt;&lt;code&gt;List.filter&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bcc3c486d474fffa98e4a80294406f6f5bdc6f78" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;find_all&lt;/code&gt; is another name for &lt;a href=&quot;listlabels#VALfilter&quot;&gt;&lt;code&gt;ListLabels.filter&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ae12b89484a996ee43a26fc18f90da927c72dcd3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;find_first&amp;nbsp;f&amp;nbsp;m&lt;/code&gt;, where &lt;code&gt;f&lt;/code&gt; is a monotonically increasing function, returns the binding of &lt;code&gt;m&lt;/code&gt; with the lowest key &lt;code&gt;k&lt;/code&gt; such that &lt;code&gt;f&amp;nbsp;k&lt;/code&gt;, or raises &lt;code&gt;Not_found&lt;/code&gt; if no such key exists.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d0ca94fda146ef63bb9e894b54535ea81cc2c936" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;find_first&amp;nbsp;f&amp;nbsp;s&lt;/code&gt;, where &lt;code&gt;f&lt;/code&gt; is a monotonically increasing function, returns the lowest element &lt;code&gt;e&lt;/code&gt; of &lt;code&gt;s&lt;/code&gt; such that &lt;code&gt;f&amp;nbsp;e&lt;/code&gt;, or raises &lt;code&gt;Not_found&lt;/code&gt; if no such element exists.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ca43c1c4fe6a623420f23448be542b273be6dac4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;find_first&amp;nbsp;~f&amp;nbsp;m&lt;/code&gt;, where &lt;code&gt;f&lt;/code&gt; is a monotonically increasing function, returns the binding of &lt;code&gt;m&lt;/code&gt; with the lowest key &lt;code&gt;k&lt;/code&gt; such that &lt;code&gt;f&amp;nbsp;k&lt;/code&gt;, or raises &lt;code&gt;Not_found&lt;/code&gt; if no such key exists.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="be99388ae38a5d8a7bf6fc4c79c25c2a57da1ee0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;find_first&amp;nbsp;~f&amp;nbsp;s&lt;/code&gt;, where &lt;code&gt;f&lt;/code&gt; is a monotonically increasing function, returns the lowest element &lt;code&gt;e&lt;/code&gt; of &lt;code&gt;s&lt;/code&gt; such that &lt;code&gt;f&amp;nbsp;e&lt;/code&gt;, or raises &lt;code&gt;Not_found&lt;/code&gt; if no such element exists.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d72d4bb6335ea2231e064cf40b1dff484f00ca80" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;find_first_opt&amp;nbsp;f&amp;nbsp;m&lt;/code&gt;, where &lt;code&gt;f&lt;/code&gt; is a monotonically increasing function, returns an option containing the binding of &lt;code&gt;m&lt;/code&gt; with the lowest key &lt;code&gt;k&lt;/code&gt; such that &lt;code&gt;f&amp;nbsp;k&lt;/code&gt;, or &lt;code&gt;None&lt;/code&gt; if no such key exists.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="96dcdec6212817348cfe23d45b3893169616345b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;find_first_opt&amp;nbsp;f&amp;nbsp;s&lt;/code&gt;, where &lt;code&gt;f&lt;/code&gt; is a monotonically increasing function, returns an option containing the lowest element &lt;code&gt;e&lt;/code&gt; of &lt;code&gt;s&lt;/code&gt; such that &lt;code&gt;f&amp;nbsp;e&lt;/code&gt;, or &lt;code&gt;None&lt;/code&gt; if no such element exists.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5d87da401ac9bdfd7eeddfa7fac66e7c5ea99b02" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;find_first_opt&amp;nbsp;~f&amp;nbsp;m&lt;/code&gt;, where &lt;code&gt;f&lt;/code&gt; is a monotonically increasing function, returns an option containing the binding of &lt;code&gt;m&lt;/code&gt; with the lowest key &lt;code&gt;k&lt;/code&gt; such that &lt;code&gt;f&amp;nbsp;k&lt;/code&gt;, or &lt;code&gt;None&lt;/code&gt; if no such key exists.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4a680a8a07e5936b98a341e7bf480e021fff9025" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;find_first_opt&amp;nbsp;~f&amp;nbsp;s&lt;/code&gt;, where &lt;code&gt;f&lt;/code&gt; is a monotonically increasing function, returns an option containing the lowest element &lt;code&gt;e&lt;/code&gt; of &lt;code&gt;s&lt;/code&gt; such that &lt;code&gt;f&amp;nbsp;e&lt;/code&gt;, or &lt;code&gt;None&lt;/code&gt; if no such element exists.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="243d696bf27b3e4c3a1e28781dca52bdf4558c00" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;find_last&amp;nbsp;f&amp;nbsp;m&lt;/code&gt;, where &lt;code&gt;f&lt;/code&gt; is a monotonically decreasing function, returns the binding of &lt;code&gt;m&lt;/code&gt; with the highest key &lt;code&gt;k&lt;/code&gt; such that &lt;code&gt;f&amp;nbsp;k&lt;/code&gt;, or raises &lt;code&gt;Not_found&lt;/code&gt; if no such key exists.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="86dfeca57383cf65076c314ee3c8150bfd86f360" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;find_last&amp;nbsp;f&amp;nbsp;s&lt;/code&gt;, where &lt;code&gt;f&lt;/code&gt; is a monotonically decreasing function, returns the highest element &lt;code&gt;e&lt;/code&gt; of &lt;code&gt;s&lt;/code&gt; such that &lt;code&gt;f&amp;nbsp;e&lt;/code&gt;, or raises &lt;code&gt;Not_found&lt;/code&gt; if no such element exists.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5fa7117f66797ffafdf822a397b60c12e44cf5ff" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;find_last&amp;nbsp;~f&amp;nbsp;m&lt;/code&gt;, where &lt;code&gt;f&lt;/code&gt; is a monotonically decreasing function, returns the binding of &lt;code&gt;m&lt;/code&gt; with the highest key &lt;code&gt;k&lt;/code&gt; such that &lt;code&gt;f&amp;nbsp;k&lt;/code&gt;, or raises &lt;code&gt;Not_found&lt;/code&gt; if no such key exists.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f08292e6a77e7d9b4a39a153d07b828c656ef9ee" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;find_last&amp;nbsp;~f&amp;nbsp;s&lt;/code&gt;, where &lt;code&gt;f&lt;/code&gt; is a monotonically decreasing function, returns the highest element &lt;code&gt;e&lt;/code&gt; of &lt;code&gt;s&lt;/code&gt; such that &lt;code&gt;f&amp;nbsp;e&lt;/code&gt;, or raises &lt;code&gt;Not_found&lt;/code&gt; if no such element exists.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f7dcea61a804a1f2f7dea836da2699582b7d9238" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;find_last_opt&amp;nbsp;f&amp;nbsp;m&lt;/code&gt;, where &lt;code&gt;f&lt;/code&gt; is a monotonically decreasing function, returns an option containing the binding of &lt;code&gt;m&lt;/code&gt; with the highest key &lt;code&gt;k&lt;/code&gt; such that &lt;code&gt;f&amp;nbsp;k&lt;/code&gt;, or &lt;code&gt;None&lt;/code&gt; if no such key exists.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b76f6d077a75e7a7802d5728264d11d944aba270" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;find_last_opt&amp;nbsp;f&amp;nbsp;s&lt;/code&gt;, where &lt;code&gt;f&lt;/code&gt; is a monotonically decreasing function, returns an option containing the highest element &lt;code&gt;e&lt;/code&gt; of &lt;code&gt;s&lt;/code&gt; such that &lt;code&gt;f&amp;nbsp;e&lt;/code&gt;, or &lt;code&gt;None&lt;/code&gt; if no such element exists.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="013fbd8200ed8943229f36370b18bd708984fb2d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;find_last_opt&amp;nbsp;~f&amp;nbsp;m&lt;/code&gt;, where &lt;code&gt;f&lt;/code&gt; is a monotonically decreasing function, returns an option containing the binding of &lt;code&gt;m&lt;/code&gt; with the highest key &lt;code&gt;k&lt;/code&gt; such that &lt;code&gt;f&amp;nbsp;k&lt;/code&gt;, or &lt;code&gt;None&lt;/code&gt; if no such key exists.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ea0d111daafc22fa9d5eb258da970613c7d47a2e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;find_last_opt&amp;nbsp;~f&amp;nbsp;s&lt;/code&gt;, where &lt;code&gt;f&lt;/code&gt; is a monotonically decreasing function, returns an option containing the highest element &lt;code&gt;e&lt;/code&gt; of &lt;code&gt;s&lt;/code&gt; such that &lt;code&gt;f&amp;nbsp;e&lt;/code&gt;, or &lt;code&gt;None&lt;/code&gt; if no such element exists.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b763fcc8a01d6a9ba39f3fd283892ef4b38bb93e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;find_left&amp;nbsp;(Left&amp;nbsp;v)&lt;/code&gt; is &lt;code&gt;Some&amp;nbsp;v&lt;/code&gt;, &lt;code&gt;find_left&amp;nbsp;(Right&amp;nbsp;_)&lt;/code&gt; is &lt;code&gt;None&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3a8449123f8354de4c74248b8ae1aba6430e8977" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;find_map&amp;nbsp;f&amp;nbsp;l&lt;/code&gt; applies &lt;code&gt;f&lt;/code&gt; to the elements of &lt;code&gt;l&lt;/code&gt; in order, and returns the first result of the form &lt;code&gt;Some&amp;nbsp;v&lt;/code&gt;, or &lt;code&gt;None&lt;/code&gt; if none exist.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="89dba21b37849abe3e38cb58a332ce04e7c639bf" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;find_map&amp;nbsp;~f&amp;nbsp;l&lt;/code&gt; applies &lt;code&gt;f&lt;/code&gt; to the elements of &lt;code&gt;l&lt;/code&gt; in order, and returns the first result of the form &lt;code&gt;Some&amp;nbsp;v&lt;/code&gt;, or &lt;code&gt;None&lt;/code&gt; if none exist.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9b41e363e58fd13aca3de1a6a57bc5781afae4d5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;find_opt&amp;nbsp;p&amp;nbsp;l&lt;/code&gt; returns the first element of the list &lt;code&gt;l&lt;/code&gt; that satisfies the predicate &lt;code&gt;p&lt;/code&gt;, or &lt;code&gt;None&lt;/code&gt; if there is no value that satisfies &lt;code&gt;p&lt;/code&gt; in the list &lt;code&gt;l&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f5c0d6441c81eb1178498ac1e0e48a4148f5b812" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;find_opt&amp;nbsp;t&amp;nbsp;x&lt;/code&gt; returns an instance of &lt;code&gt;x&lt;/code&gt; found in &lt;code&gt;t&lt;/code&gt; or &lt;code&gt;None&lt;/code&gt; if there is no such element.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d3419033d6a5616f91be00a3d8f504eaf1025be5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;find_opt&amp;nbsp;x&amp;nbsp;m&lt;/code&gt; returns &lt;code&gt;Some&amp;nbsp;v&lt;/code&gt; if the current value of &lt;code&gt;x&lt;/code&gt; in &lt;code&gt;m&lt;/code&gt; is &lt;code&gt;v&lt;/code&gt;, or &lt;code&gt;None&lt;/code&gt; if no binding for &lt;code&gt;x&lt;/code&gt; exists.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="74662cd93e7eb06c804a12e3e9eae3a370381c51" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;find_opt&amp;nbsp;x&amp;nbsp;s&lt;/code&gt; returns the element of &lt;code&gt;s&lt;/code&gt; equal to &lt;code&gt;x&lt;/code&gt; (according to &lt;code&gt;Ord.compare&lt;/code&gt;), or &lt;code&gt;None&lt;/code&gt; if no such element exists.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="528da48c0c2b7905f9992088fe186f0217825cd3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;find_right&amp;nbsp;(Right&amp;nbsp;v)&lt;/code&gt; is &lt;code&gt;Some&amp;nbsp;v&lt;/code&gt;, &lt;code&gt;find_right&amp;nbsp;(Left&amp;nbsp;_)&lt;/code&gt; is &lt;code&gt;None&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9f18c72545855af5a5b52d9706e7ec6f05461ad5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;first_chars&amp;nbsp;s&amp;nbsp;n&lt;/code&gt; returns the first &lt;code&gt;n&lt;/code&gt; characters of &lt;code&gt;s&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5c8ed5bb1257817bda46318f5da8cc47ca127484" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;first_chars&amp;nbsp;s&amp;nbsp;n&lt;/code&gt; returns the first &lt;code&gt;n&lt;/code&gt; characters of &lt;code&gt;s&lt;/code&gt;. This is the same function as &lt;a href=&quot;str#VALstring_before&quot;&gt;&lt;code&gt;Str.string_before&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1e2a992a9aab3921f8d3c4ed594c5700f2880c32" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;flip&amp;nbsp;f&lt;/code&gt; reverses the argument order of the binary function &lt;code&gt;f&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4c0ed75552c3b165354408a73b091f24526264d8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;flip&amp;nbsp;f&lt;/code&gt; reverses the argument order of the binary function &lt;code&gt;f&lt;/code&gt;. For any arguments &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt;, &lt;code&gt;(flip&amp;nbsp;f)&amp;nbsp;x&amp;nbsp;y&lt;/code&gt; is &lt;code&gt;f&amp;nbsp;y&amp;nbsp;x&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b220aa586bb7b5fc966c1fa8e6328ace6ca90c93" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;flush_symbolic_output_buffer&amp;nbsp;sob&lt;/code&gt; returns the contents of buffer &lt;code&gt;sob&lt;/code&gt; and resets buffer &lt;code&gt;sob&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="83bcf4a7d5001bc83e014db6d366f87e3ec9893f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;flush_symbolic_output_buffer&amp;nbsp;sob&lt;/code&gt; returns the contents of buffer &lt;code&gt;sob&lt;/code&gt; and resets buffer &lt;code&gt;sob&lt;/code&gt;. &lt;code&gt;flush_symbolic_output_buffer&amp;nbsp;sob&lt;/code&gt; is equivalent to &lt;code&gt;let&amp;nbsp;items&amp;nbsp;=&amp;nbsp;get_symbolic_output_buffer&amp;nbsp;sob&amp;nbsp;in&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;clear_symbolic_output_buffer&amp;nbsp;sob;&amp;nbsp;items&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7c5e5b291a17ce07fdc97e2dbae23b3f694d61d6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;flush_symbolic_output_buffer&amp;nbsp;sob&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;flush_symbolic_output_buffer&amp;nbsp;sob&lt;/code&gt;.</target>
        </trans-unit>
        <trans-unit id="9ef6fa804e18808f9f33d4811aa816c7277aede0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fma&amp;nbsp;x&amp;nbsp;y&amp;nbsp;z&lt;/code&gt; returns &lt;code&gt;x&amp;nbsp;*&amp;nbsp;y&amp;nbsp;+&amp;nbsp;z&lt;/code&gt;, with a best effort for computing this expression with a single rounding, using either hardware instructions (providing full IEEE compliance) or a software emulation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6170b205b04a3010505d402cf56aef59d2d27b4c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fma&amp;nbsp;x&amp;nbsp;y&amp;nbsp;z&lt;/code&gt; returns &lt;code&gt;x&amp;nbsp;*&amp;nbsp;y&amp;nbsp;+&amp;nbsp;z&lt;/code&gt;, with a best effort for computing this expression with a single rounding, using either hardware instructions (providing full IEEE compliance) or a software emulation. Note: since software emulation of the fma is costly, make sure that you are using hardware fma support if performance matters.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="65c37f8c9470e6f5a128e20652c2a8f8ead3ee87" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fmt&lt;/code&gt; is a format string (the same format strings as those used to print material with module &lt;a href=&quot;printf&quot;&gt;&lt;code&gt;Printf&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;format&quot;&gt;&lt;code&gt;Format&lt;/code&gt;&lt;/a&gt;),</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="513bd400d44ec770ff6cdcef38ba3455c9d87c02" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fold&amp;nbsp;f&amp;nbsp;accu&amp;nbsp;q&lt;/code&gt; is equivalent to &lt;code&gt;List.fold_left&amp;nbsp;f&amp;nbsp;accu&amp;nbsp;l&lt;/code&gt;, where &lt;code&gt;l&lt;/code&gt; is the list of &lt;code&gt;q&lt;/code&gt;'s elements.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="100e3b96102aeea46535847d00a06aaa4a28847f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fold&amp;nbsp;f&amp;nbsp;accu&amp;nbsp;q&lt;/code&gt; is equivalent to &lt;code&gt;List.fold_left&amp;nbsp;f&amp;nbsp;accu&amp;nbsp;l&lt;/code&gt;, where &lt;code&gt;l&lt;/code&gt; is the list of &lt;code&gt;q&lt;/code&gt;'s elements. The queue remains unchanged.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bdefc6fd117140ceaee811a1c20a0cc1badd442b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fold&amp;nbsp;f&amp;nbsp;accu&amp;nbsp;s&lt;/code&gt; is &lt;code&gt;(f&amp;nbsp;(...&amp;nbsp;(f&amp;nbsp;(f&amp;nbsp;accu&amp;nbsp;x1)&amp;nbsp;x2)&amp;nbsp;...)&amp;nbsp;xn)&lt;/code&gt; where &lt;code&gt;x1&lt;/code&gt; is the top of the stack, &lt;code&gt;x2&lt;/code&gt; the second element, and &lt;code&gt;xn&lt;/code&gt; the bottom element.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c9a2cbe8451fa9551ac977a97ceda75359d1a579" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fold&amp;nbsp;f&amp;nbsp;accu&amp;nbsp;s&lt;/code&gt; is &lt;code&gt;(f&amp;nbsp;(...&amp;nbsp;(f&amp;nbsp;(f&amp;nbsp;accu&amp;nbsp;x1)&amp;nbsp;x2)&amp;nbsp;...)&amp;nbsp;xn)&lt;/code&gt; where &lt;code&gt;x1&lt;/code&gt; is the top of the stack, &lt;code&gt;x2&lt;/code&gt; the second element, and &lt;code&gt;xn&lt;/code&gt; the bottom element. The stack is unchanged.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="23d9d4d55be4c8d6f090eb092baf53b9771a7e81" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fold&amp;nbsp;f&amp;nbsp;m&amp;nbsp;a&lt;/code&gt; computes &lt;code&gt;(f&amp;nbsp;kN&amp;nbsp;dN&amp;nbsp;...&amp;nbsp;(f&amp;nbsp;k1&amp;nbsp;d1&amp;nbsp;a)...)&lt;/code&gt;, where &lt;code&gt;k1&amp;nbsp;...&amp;nbsp;kN&lt;/code&gt; are the keys of all bindings in &lt;code&gt;m&lt;/code&gt; (in increasing order), and &lt;code&gt;d1&amp;nbsp;...&amp;nbsp;dN&lt;/code&gt; are the associated data.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e83a90a0b7ca6a60422dd6f90f2927233dfc8e05" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fold&amp;nbsp;f&amp;nbsp;m&amp;nbsp;init&lt;/code&gt; computes &lt;code&gt;(f&amp;nbsp;kN&amp;nbsp;dN&amp;nbsp;...&amp;nbsp;(f&amp;nbsp;k1&amp;nbsp;d1&amp;nbsp;init)...)&lt;/code&gt;, where &lt;code&gt;k1&amp;nbsp;...&amp;nbsp;kN&lt;/code&gt; are the keys of all bindings in &lt;code&gt;m&lt;/code&gt; (in increasing order), and &lt;code&gt;d1&amp;nbsp;...&amp;nbsp;dN&lt;/code&gt; are the associated data.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="512ab4ec7525d7e9e8d2c0e327d0239f17c8f4b5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fold&amp;nbsp;f&amp;nbsp;s&amp;nbsp;a&lt;/code&gt; computes &lt;code&gt;(f&amp;nbsp;xN&amp;nbsp;...&amp;nbsp;(f&amp;nbsp;x2&amp;nbsp;(f&amp;nbsp;x1&amp;nbsp;a))...)&lt;/code&gt;, where &lt;code&gt;x1&amp;nbsp;...&amp;nbsp;xN&lt;/code&gt; are the elements of &lt;code&gt;s&lt;/code&gt;, in increasing order.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0f6120fb815223073bff166968bb72c22e60b3bd" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fold&amp;nbsp;f&amp;nbsp;s&amp;nbsp;init&lt;/code&gt; computes &lt;code&gt;(f&amp;nbsp;xN&amp;nbsp;...&amp;nbsp;(f&amp;nbsp;x2&amp;nbsp;(f&amp;nbsp;x1&amp;nbsp;init))...)&lt;/code&gt;, where &lt;code&gt;x1&amp;nbsp;...&amp;nbsp;xN&lt;/code&gt; are the elements of &lt;code&gt;s&lt;/code&gt;, in increasing order.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a362040e4ab8e424e80449de92f349e89f5790a4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fold&amp;nbsp;f&amp;nbsp;t&amp;nbsp;init&lt;/code&gt; computes &lt;code&gt;(f&amp;nbsp;d1&amp;nbsp;(...&amp;nbsp;(f&amp;nbsp;dN&amp;nbsp;init)))&lt;/code&gt; where &lt;code&gt;d1&amp;nbsp;...&amp;nbsp;dN&lt;/code&gt; are the elements of &lt;code&gt;t&lt;/code&gt; in some unspecified order.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="985f9d8a31aa80e9945a67e4693b866b34bddf49" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fold&amp;nbsp;f&amp;nbsp;t&amp;nbsp;init&lt;/code&gt; computes &lt;code&gt;(f&amp;nbsp;d1&amp;nbsp;(...&amp;nbsp;(f&amp;nbsp;dN&amp;nbsp;init)))&lt;/code&gt; where &lt;code&gt;d1&amp;nbsp;...&amp;nbsp;dN&lt;/code&gt; are the elements of &lt;code&gt;t&lt;/code&gt; in some unspecified order. It is not specified what happens if &lt;code&gt;f&lt;/code&gt; tries to change &lt;code&gt;t&lt;/code&gt; itself.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3e8fe191c18041e8d0eac44d85b50a76b487f51d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fold&amp;nbsp;~f&amp;nbsp;m&amp;nbsp;~init&lt;/code&gt; computes &lt;code&gt;(f&amp;nbsp;kN&amp;nbsp;dN&amp;nbsp;...&amp;nbsp;(f&amp;nbsp;k1&amp;nbsp;d1&amp;nbsp;init)...)&lt;/code&gt;, where &lt;code&gt;k1&amp;nbsp;...&amp;nbsp;kN&lt;/code&gt; are the keys of all bindings in &lt;code&gt;m&lt;/code&gt; (in increasing order), and &lt;code&gt;d1&amp;nbsp;...&amp;nbsp;dN&lt;/code&gt; are the associated data.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6eee0b4a80333519113d1465cffa840d1b051b4a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fold&amp;nbsp;~f&amp;nbsp;s&amp;nbsp;init&lt;/code&gt; computes &lt;code&gt;(f&amp;nbsp;xN&amp;nbsp;...&amp;nbsp;(f&amp;nbsp;x2&amp;nbsp;(f&amp;nbsp;x1&amp;nbsp;init))...)&lt;/code&gt;, where &lt;code&gt;x1&amp;nbsp;...&amp;nbsp;xN&lt;/code&gt; are the elements of &lt;code&gt;s&lt;/code&gt;, in increasing order.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="368262d740c7064bbdd13f3bba4688878f9ac40d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fold&amp;nbsp;~left&amp;nbsp;~right&amp;nbsp;(Left&amp;nbsp;v)&lt;/code&gt; is &lt;code&gt;left&amp;nbsp;v&lt;/code&gt;, and &lt;code&gt;fold&amp;nbsp;~left&amp;nbsp;~right&amp;nbsp;(Right&amp;nbsp;v)&lt;/code&gt; is &lt;code&gt;right&amp;nbsp;v&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6ecbac5b0d9ba5c082790df0f730362c6b5220a7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fold&amp;nbsp;~none&amp;nbsp;~some&amp;nbsp;o&lt;/code&gt; is &lt;code&gt;none&lt;/code&gt; if &lt;code&gt;o&lt;/code&gt; is &lt;code&gt;None&lt;/code&gt; and &lt;code&gt;some&amp;nbsp;v&lt;/code&gt; if &lt;code&gt;o&lt;/code&gt; is &lt;code&gt;Some&amp;nbsp;v&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="50db21066dc3228d3707b1e635d08cf3bc19ef89" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fold&amp;nbsp;~ok&amp;nbsp;~error&amp;nbsp;r&lt;/code&gt; is &lt;code&gt;ok&amp;nbsp;v&lt;/code&gt; if &lt;code&gt;r&lt;/code&gt; is &lt;code&gt;Ok&amp;nbsp;v&lt;/code&gt; and &lt;code&gt;error&amp;nbsp;e&lt;/code&gt; if &lt;code&gt;r&lt;/code&gt; is &lt;code&gt;Error&amp;nbsp;e&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9305eaacd15023083bd835447cedc2d30d955521" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fold_left&amp;nbsp;f&amp;nbsp;init&amp;nbsp;[b1;&amp;nbsp;...;&amp;nbsp;bn]&lt;/code&gt; is &lt;code&gt;f&amp;nbsp;(...&amp;nbsp;(f&amp;nbsp;(f&amp;nbsp;init&amp;nbsp;b1)&amp;nbsp;b2)&amp;nbsp;...)&amp;nbsp;bn&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9daa27e119c4a56c974c07a8cd62050f749a0779" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fold_left&amp;nbsp;f&amp;nbsp;init&amp;nbsp;a&lt;/code&gt; computes &lt;code&gt;f&amp;nbsp;(...&amp;nbsp;(f&amp;nbsp;(f&amp;nbsp;init&amp;nbsp;a.(0))&amp;nbsp;a.(1))&amp;nbsp;...)&amp;nbsp;a.(n-1)&lt;/code&gt;, where &lt;code&gt;n&lt;/code&gt; is the length of the array &lt;code&gt;a&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ad4ddbb96529e27bdea892b58fb46764197b371f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fold_left&amp;nbsp;f&amp;nbsp;x&amp;nbsp;a&lt;/code&gt; computes &lt;code&gt;f&amp;nbsp;(...&amp;nbsp;(f&amp;nbsp;(f&amp;nbsp;x&amp;nbsp;a.(0))&amp;nbsp;a.(1))&amp;nbsp;...)&amp;nbsp;a.(n-1)&lt;/code&gt;, where &lt;code&gt;n&lt;/code&gt; is the length of the floatarray &lt;code&gt;a&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="25bf6c50afa1f65af8907c98e9a8e6274287f215" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fold_left&amp;nbsp;f&amp;nbsp;x&amp;nbsp;init&lt;/code&gt; computes &lt;code&gt;f&amp;nbsp;(...&amp;nbsp;(f&amp;nbsp;(f&amp;nbsp;x&amp;nbsp;init.(0))&amp;nbsp;init.(1))&amp;nbsp;...)&amp;nbsp;init.(n-1)&lt;/code&gt;, where &lt;code&gt;n&lt;/code&gt; is the length of the floatarray &lt;code&gt;init&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ec012f8ff032a5704058562cc243c267258bfe8e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fold_left&amp;nbsp;~f&amp;nbsp;x&amp;nbsp;~init&lt;/code&gt; computes &lt;code&gt;f&amp;nbsp;(...&amp;nbsp;(f&amp;nbsp;(f&amp;nbsp;x&amp;nbsp;init.(0))&amp;nbsp;init.(1))&amp;nbsp;...)&amp;nbsp;init.(n-1)&lt;/code&gt;, where &lt;code&gt;n&lt;/code&gt; is the length of the floatarray &lt;code&gt;init&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="013fb97023674c8fded7dabcbfa3611ec2090cf0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fold_left&amp;nbsp;~f&amp;nbsp;~init&amp;nbsp;[b1;&amp;nbsp;...;&amp;nbsp;bn]&lt;/code&gt; is &lt;code&gt;f&amp;nbsp;(...&amp;nbsp;(f&amp;nbsp;(f&amp;nbsp;init&amp;nbsp;b1)&amp;nbsp;b2)&amp;nbsp;...)&amp;nbsp;bn&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="29243b6ba4cff59eb04daa0870eedeed5c46f4fd" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fold_left&amp;nbsp;~f&amp;nbsp;~init&amp;nbsp;a&lt;/code&gt; computes &lt;code&gt;f&amp;nbsp;(...&amp;nbsp;(f&amp;nbsp;(f&amp;nbsp;init&amp;nbsp;a.(0))&amp;nbsp;a.(1))&amp;nbsp;...)&amp;nbsp;a.(n-1)&lt;/code&gt;, where &lt;code&gt;n&lt;/code&gt; is the length of the array &lt;code&gt;a&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="66f9804060a747ffe712564e2d5596b71c17db4a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fold_left2&amp;nbsp;f&amp;nbsp;init&amp;nbsp;[a1;&amp;nbsp;...;&amp;nbsp;an]&amp;nbsp;[b1;&amp;nbsp;...;&amp;nbsp;bn]&lt;/code&gt; is &lt;code&gt;f&amp;nbsp;(...&amp;nbsp;(f&amp;nbsp;(f&amp;nbsp;init&amp;nbsp;a1&amp;nbsp;b1)&amp;nbsp;a2&amp;nbsp;b2)&amp;nbsp;...)&amp;nbsp;an&amp;nbsp;bn&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1c783c432451494daa6968ea0495ed49445aabfa" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fold_left2&amp;nbsp;~f&amp;nbsp;~init&amp;nbsp;[a1;&amp;nbsp;...;&amp;nbsp;an]&amp;nbsp;[b1;&amp;nbsp;...;&amp;nbsp;bn]&lt;/code&gt; is &lt;code&gt;f&amp;nbsp;(...&amp;nbsp;(f&amp;nbsp;(f&amp;nbsp;init&amp;nbsp;a1&amp;nbsp;b1)&amp;nbsp;a2&amp;nbsp;b2)&amp;nbsp;...)&amp;nbsp;an&amp;nbsp;bn&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="32fa0de93893010cfa5877c8ad98dad6a94e5e35" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fold_left_map&lt;/code&gt; is a combination of &lt;code&gt;fold_left&lt;/code&gt; and &lt;code&gt;map&lt;/code&gt; hat threads an accumulator through calls to &lt;code&gt;f&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
