<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="es" datatype="htmlbody" original="go">
    <body>
      <group id="go">
        <trans-unit id="d7c13c7a23d1bca61bcfdaf2258296ba2d4aca3a" translate="yes" xml:space="preserve">
          <source>func (p Pos) Position() Pos</source>
          <target state="translated">func (p Pos)Position()Pos</target>
        </trans-unit>
        <trans-unit id="30a12884475efcfc666ad00b4c1ef6a8ea37fb81" translate="yes" xml:space="preserve">
          <source>func (p ProcInst) Copy() ProcInst</source>
          <target state="translated">func (p ProcInst)Copy()ProcInst</target>
        </trans-unit>
        <trans-unit id="6b603b4e5e5440dd8cc7d26dae4231cb2036aa35" translate="yes" xml:space="preserve">
          <source>func (p ProtocolError) Error() string</source>
          <target state="translated">func (p ProtocolError)Error()string</target>
        </trans-unit>
        <trans-unit id="1db9fc2a0a879e8bcc0d0c48273d32b36ccea4db" translate="yes" xml:space="preserve">
          <source>func (p StringSlice) Len() int</source>
          <target state="translated">func (p StringSlice)Len()int</target>
        </trans-unit>
        <trans-unit id="12886c85cce97cec2d1a017b4e9f8ad5507d9754" translate="yes" xml:space="preserve">
          <source>func (p StringSlice) Less(i, j int) bool</source>
          <target state="translated">func (p StringSlice)Less(i,j int)bool</target>
        </trans-unit>
        <trans-unit id="6a11e3bfd3d41490458c49d3adee87b2c41aed6a" translate="yes" xml:space="preserve">
          <source>func (p StringSlice) Search(x string) int</source>
          <target state="translated">func (p StringSlice)Search(x string)int</target>
        </trans-unit>
        <trans-unit id="6ebac8839f28c474ed13c6c4a9a21514409b335f" translate="yes" xml:space="preserve">
          <source>func (p StringSlice) Sort()</source>
          <target state="translated">func (p StringSlice)Sort()</target>
        </trans-unit>
        <trans-unit id="d10371476299b647c741a9ac9bfc7c4ed321cc99" translate="yes" xml:space="preserve">
          <source>func (p StringSlice) Swap(i, j int)</source>
          <target state="translated">func (p StringSlice)Swap(i,j int)</target>
        </trans-unit>
        <trans-unit id="266954cbbf61daefb7eb448322ed15a1730ee223" translate="yes" xml:space="preserve">
          <source>func (pb *PB) Next() bool</source>
          <target state="translated">func(pb *PB)Next()bool</target>
        </trans-unit>
        <trans-unit id="a6afdbc92f4ff49e37e48bc0dc5b3ca51644ba5a" translate="yes" xml:space="preserve">
          <source>func (pe *ProtocolError) Error() string</source>
          <target state="translated">func (pe *ProtocolError)Error()string</target>
        </trans-unit>
        <trans-unit id="73cafc0231f9b33187a5649a2a8a9ea476ae7d5b" translate="yes" xml:space="preserve">
          <source>func (pkg *Package) Complete() bool</source>
          <target state="translated">func (pkg *Paquete)Complete()bool</target>
        </trans-unit>
        <trans-unit id="761a1afd3a9135d14c4fdd2fc41d3b841d0c2d3c" translate="yes" xml:space="preserve">
          <source>func (pkg *Package) Imports() []*Package</source>
          <target state="translated">func (pkg *Envase)Importaciones()[]*Envase</target>
        </trans-unit>
        <trans-unit id="8b029c5ee9bb9d34620f98b1f19cf1acfcc3970e" translate="yes" xml:space="preserve">
          <source>func (pkg *Package) MarkComplete()</source>
          <target state="translated">func (pkg *Paquete)MarkComplete()</target>
        </trans-unit>
        <trans-unit id="ae670b89511d87fd80b67037cb59d0911a80f704" translate="yes" xml:space="preserve">
          <source>func (pkg *Package) Name() string</source>
          <target state="translated">func (pkg *Paquete)Name()string</target>
        </trans-unit>
        <trans-unit id="dc215afae709ecfe9d9363fcab9b1d3861f8bc24" translate="yes" xml:space="preserve">
          <source>func (pkg *Package) Path() string</source>
          <target state="translated">func (pkg *Paquete)Path()string</target>
        </trans-unit>
        <trans-unit id="9cb64701a3d1c4516d68a3101d498579374bc4e1" translate="yes" xml:space="preserve">
          <source>func (pkg *Package) Scope() *Scope</source>
          <target state="translated">func (pkg *Paquete)Scope()*Scope</target>
        </trans-unit>
        <trans-unit id="ff6ffc8e6d90eca49201c7bf1e83e83711721e32" translate="yes" xml:space="preserve">
          <source>func (pkg *Package) SetImports(list []*Package)</source>
          <target state="translated">func (pkg *Paquete)SetImports(list []*Paquete)</target>
        </trans-unit>
        <trans-unit id="716d45bb9d150b75e7460613c8a0043ac01810a6" translate="yes" xml:space="preserve">
          <source>func (pkg *Package) SetName(name string)</source>
          <target state="translated">func (pkg *Paquete)SetName(name string)</target>
        </trans-unit>
        <trans-unit id="476ce8104713b28a105eb108f83773a9a3328294" translate="yes" xml:space="preserve">
          <source>func (pkg *Package) String() string</source>
          <target state="translated">func (pkg *Paquete)String()string</target>
        </trans-unit>
        <trans-unit id="6d7b449cc5603fd623437ccf7f3179a27d47dc5d" translate="yes" xml:space="preserve">
          <source>func (pos *Position) IsValid() bool</source>
          <target state="translated">func (pos *Position)IsValid()bool</target>
        </trans-unit>
        <trans-unit id="8bdb9b72084e990237f4622c07b73cddf7a2c3f6" translate="yes" xml:space="preserve">
          <source>func (pos Position) String() string</source>
          <target state="translated">func (pos Position)String()string</target>
        </trans-unit>
        <trans-unit id="1b14cdfae3474d1dae7b76e94dd340dd96271404" translate="yes" xml:space="preserve">
          <source>func (priv *PrivateKey) Decrypt(rand io.Reader, ciphertext []byte, opts crypto.DecrypterOpts) (plaintext []byte, err error)</source>
          <target state="translated">func (priv *PrivateKey)Decrypt(rand io.Reader,ciphertext []byte,opts crypto.DecrypterOpts)(plaintext []byte,err error)</target>
        </trans-unit>
        <trans-unit id="ffa46b374cff3af22cc0050fd99b304b45b22082" translate="yes" xml:space="preserve">
          <source>func (priv *PrivateKey) Equal(x crypto.PrivateKey) bool</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f38dc8be6f29640f0c91cbf120b13cd7361c98b3" translate="yes" xml:space="preserve">
          <source>func (priv *PrivateKey) Precompute()</source>
          <target state="translated">func (priv *PrivateKey)Precompute()</target>
        </trans-unit>
        <trans-unit id="fe2812c6b148bbc743757dd304be1acb93815412" translate="yes" xml:space="preserve">
          <source>func (priv *PrivateKey) Public() crypto.PublicKey</source>
          <target state="translated">func (priv *PrivateKey)Public()crypto.PublicKey</target>
        </trans-unit>
        <trans-unit id="bf2b8a4e089bffe33cf1255b611d010873a7b312" translate="yes" xml:space="preserve">
          <source>func (priv *PrivateKey) Sign(rand io.Reader, digest []byte, opts crypto.SignerOpts) ([]byte, error)</source>
          <target state="translated">func (priv *PrivateKey)Sign(rand io.Reader,digest []byte,opts crypto.SignerOpts)([]byte,error)</target>
        </trans-unit>
        <trans-unit id="607c62e561d9cdcbc93b9aa90e323d6f544200ae" translate="yes" xml:space="preserve">
          <source>func (priv *PrivateKey) Validate() error</source>
          <target state="translated">func (priv *PrivateKey)Validate()error</target>
        </trans-unit>
        <trans-unit id="82180c018a5a92f1f62e3261b7813e85f2f64153" translate="yes" xml:space="preserve">
          <source>func (priv PrivateKey) Equal(x crypto.PrivateKey) bool</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="054c64dc7c3663b93448261201e70bf0a8076857" translate="yes" xml:space="preserve">
          <source>func (priv PrivateKey) Public() crypto.PublicKey</source>
          <target state="translated">func (priv PrivateKey)Public()crypto.PublicKey</target>
        </trans-unit>
        <trans-unit id="df9dc074cb7bb49470bb6c333a6141ae95ddd706" translate="yes" xml:space="preserve">
          <source>func (priv PrivateKey) Seed() []byte</source>
          <target state="translated">func (priv PrivateKey)Seed()[]byte</target>
        </trans-unit>
        <trans-unit id="841ad79aa19b3432660148cf1cf816030befda8a" translate="yes" xml:space="preserve">
          <source>func (priv PrivateKey) Sign(rand io.Reader, message []byte, opts crypto.SignerOpts) (signature []byte, err error)</source>
          <target state="translated">func (priv PrivateKey)Sign(rand io.Reader,message []byte,opts crypto.SignerOpts)(signature []byte,err error)</target>
        </trans-unit>
        <trans-unit id="7370056028ba1e9772b951c3e5559c25abdae890" translate="yes" xml:space="preserve">
          <source>func (pssOpts *PSSOptions) HashFunc() crypto.Hash</source>
          <target state="translated">func (pssOpts *PSSOptions)HashFunc()crypto.Hash</target>
        </trans-unit>
        <trans-unit id="c4789d0d55680d8db35c33429dd3feabda9321b3" translate="yes" xml:space="preserve">
          <source>func (pub *PublicKey) Equal(x crypto.PublicKey) bool</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="78c2f24f98fde486a46e015240b24027a04187bb" translate="yes" xml:space="preserve">
          <source>func (pub *PublicKey) Size() int</source>
          <target state="translated">func (pub *PublicKey)Size()int</target>
        </trans-unit>
        <trans-unit id="162cc08af469beae25c9f322ece365625fff8904" translate="yes" xml:space="preserve">
          <source>func (pub PublicKey) Equal(x crypto.PublicKey) bool</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="017f5c473a06b998ff2b192e8ccd511272069ddb" translate="yes" xml:space="preserve">
          <source>func (r *LineReader) Files() []*LineFile</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c4bf95a21d409d51931d26a833986d495190988e" translate="yes" xml:space="preserve">
          <source>func (r *LineReader) Next(entry *LineEntry) error</source>
          <target state="translated">func (r *LineReader)Next(entry *LineEntry)error</target>
        </trans-unit>
        <trans-unit id="9e7cbd100e9e5a08412e5548b2f7001f24802e90" translate="yes" xml:space="preserve">
          <source>func (r *LineReader) Reset()</source>
          <target state="translated">func (r *LineReader)Reset()</target>
        </trans-unit>
        <trans-unit id="d4b5ca8a9da84a3ff2af429ffed24295b9687c6e" translate="yes" xml:space="preserve">
          <source>func (r *LineReader) Seek(pos LineReaderPos)</source>
          <target state="translated">func (r *LineReader)Seek(pos LineReaderPos)</target>
        </trans-unit>
        <trans-unit id="195ddd9cbba52955eafe7d6fbfbfa831a51513d9" translate="yes" xml:space="preserve">
          <source>func (r *LineReader) SeekPC(pc uint64, entry *LineEntry) error</source>
          <target state="translated">func (r *LineReader)SeekPC(pc uint64,entry *LineEntry)error</target>
        </trans-unit>
        <trans-unit id="f76a52c343c513afc47a10639c93ccf0c5ea7ed3" translate="yes" xml:space="preserve">
          <source>func (r *LineReader) Tell() LineReaderPos</source>
          <target state="translated">func (r *LineReader)Tell()LineReaderPos</target>
        </trans-unit>
        <trans-unit id="585fe0476f4a72f69117b3ec721ae709a0138779" translate="yes" xml:space="preserve">
          <source>func (r *MemProfileRecord) InUseBytes() int64</source>
          <target state="translated">func (r *MemProfileRecord)InUseBytes()int64</target>
        </trans-unit>
        <trans-unit id="70abd36df89b70c9b30586dfc0abb46ace1f9929" translate="yes" xml:space="preserve">
          <source>func (r *MemProfileRecord) InUseObjects() int64</source>
          <target state="translated">func (r *MemProfileRecord)InUseObjects()int64</target>
        </trans-unit>
        <trans-unit id="904736b476b533f38dc68c305dfd1749d683972b" translate="yes" xml:space="preserve">
          <source>func (r *MemProfileRecord) Stack() []uintptr</source>
          <target state="translated">func (r *MemProfileRecord)Stack()[]uintptr</target>
        </trans-unit>
        <trans-unit id="ed38ced883e808f290bd08baccff40f04a1305a4" translate="yes" xml:space="preserve">
          <source>func (r *PipeReader) Close() error</source>
          <target state="translated">func (r *PipeReader)Close()error</target>
        </trans-unit>
        <trans-unit id="b5fb74dbe56bc4aa636698225233986c16749285" translate="yes" xml:space="preserve">
          <source>func (r *PipeReader) CloseWithError(err error) error</source>
          <target state="translated">func (r *PipeReader)CloseWithError(err error)error</target>
        </trans-unit>
        <trans-unit id="098dc64626ed1e95470945cc3dd920432a398a2c" translate="yes" xml:space="preserve">
          <source>func (r *PipeReader) Read(data []byte) (n int, err error)</source>
          <target state="translated">func (r *PipeReader)Read(data []byte)(n int,err error)</target>
        </trans-unit>
        <trans-unit id="2ba76b87524c18fb60646c1f9247c6ae22ccfcb7" translate="yes" xml:space="preserve">
          <source>func (r *PtraceRegs) PC() uint64</source>
          <target state="translated">func (r *PtraceRegs)PC()uint64</target>
        </trans-unit>
        <trans-unit id="27c1320f227b78761b7ab2fc45fcc1bd277ef1b1" translate="yes" xml:space="preserve">
          <source>func (r *PtraceRegs) SetPC(pc uint64)</source>
          <target state="translated">func (r *PtraceRegs)SetPC(pc uint64)</target>
        </trans-unit>
        <trans-unit id="e2c5eb814ff72c0f6b8d221febe2a237e9305a40" translate="yes" xml:space="preserve">
          <source>func (r *Rand) ExpFloat64() float64</source>
          <target state="translated">func (r *Rand)ExpFloat64()float64</target>
        </trans-unit>
        <trans-unit id="24671175fc3ba363c5e59337111e9c273db8a615" translate="yes" xml:space="preserve">
          <source>func (r *Rand) Float32() float32</source>
          <target state="translated">func (r *Rand)Float32()float32</target>
        </trans-unit>
        <trans-unit id="41ed1ef7a3779330befc4100fbca14d8ad37370e" translate="yes" xml:space="preserve">
          <source>func (r *Rand) Float64() float64</source>
          <target state="translated">func (r *Rand)Float64()float64</target>
        </trans-unit>
        <trans-unit id="44c4a20744ae6c33ceecabd0a77709ac20ead730" translate="yes" xml:space="preserve">
          <source>func (r *Rand) Int() int</source>
          <target state="translated">func (r *Rand)Int()int</target>
        </trans-unit>
        <trans-unit id="eca5a97b1e32d245597faf863a2c70afdcadcb46" translate="yes" xml:space="preserve">
          <source>func (r *Rand) Int31() int32</source>
          <target state="translated">func (r *Rand)Int31()int32</target>
        </trans-unit>
        <trans-unit id="9a9d10a3d78d17a8f377bd3e499111cc9e9b57a4" translate="yes" xml:space="preserve">
          <source>func (r *Rand) Int31n(n int32) int32</source>
          <target state="translated">func (r *Rand)Int31n(n int32)int32</target>
        </trans-unit>
        <trans-unit id="81a68693974bccc8c8f0df537544b74c24414247" translate="yes" xml:space="preserve">
          <source>func (r *Rand) Int63() int64</source>
          <target state="translated">func (r *Rand)Int63()int64</target>
        </trans-unit>
        <trans-unit id="cf6d36fd8a113684395c7ea956ad8f1766ddc208" translate="yes" xml:space="preserve">
          <source>func (r *Rand) Int63n(n int64) int64</source>
          <target state="translated">func (r *Rand)Int63n(n int64)int64</target>
        </trans-unit>
        <trans-unit id="f961236d1dfab4898a250b8093b7ba4b6fca3efd" translate="yes" xml:space="preserve">
          <source>func (r *Rand) Intn(n int) int</source>
          <target state="translated">func (r *Rand)Intn(n int)int</target>
        </trans-unit>
        <trans-unit id="12d1f4ce6ea5ae713b49ce1f92870946e00a3c64" translate="yes" xml:space="preserve">
          <source>func (r *Rand) NormFloat64() float64</source>
          <target state="translated">func (r *Rand)NormFloat64()float64</target>
        </trans-unit>
        <trans-unit id="af38ebcf0f86cf1850fac8d0bc2e98f30f4219d9" translate="yes" xml:space="preserve">
          <source>func (r *Rand) Perm(n int) []int</source>
          <target state="translated">func (r *Rand)Perm(n int)[]int</target>
        </trans-unit>
        <trans-unit id="afc3ef0a77ffa1edb3eb95f14e14dfe0d67bfd44" translate="yes" xml:space="preserve">
          <source>func (r *Rand) Read(p []byte) (n int, err error)</source>
          <target state="translated">func (r *Rand)Read(p []byte)(n int,err error)</target>
        </trans-unit>
        <trans-unit id="63b295210c733b7faf1e6066b0761262cb506d85" translate="yes" xml:space="preserve">
          <source>func (r *Rand) Seed(seed int64)</source>
          <target state="translated">func (r *Rand)Seed(seed int64)</target>
        </trans-unit>
        <trans-unit id="fc08958ee3284098343b5bee6c8c2426141cf098" translate="yes" xml:space="preserve">
          <source>func (r *Rand) Shuffle(n int, swap func(i, j int))</source>
          <target state="translated">func(r *Rand)Shuffle(n int,swap func(i,j int))</target>
        </trans-unit>
        <trans-unit id="0534a8c617193c4f7897c2cf459ddc73a2119ac5" translate="yes" xml:space="preserve">
          <source>func (r *Rand) Uint32() uint32</source>
          <target state="translated">func (r *edge)Uint32()uint32</target>
        </trans-unit>
        <trans-unit id="3d31e7a213038d17ab387557b3db71194610cf8f" translate="yes" xml:space="preserve">
          <source>func (r *Rand) Uint64() uint64</source>
          <target state="translated">func (r *Rand)Uint64()uint64</target>
        </trans-unit>
        <trans-unit id="6363535ea5a8867254f76c9293e158d18b741990" translate="yes" xml:space="preserve">
          <source>func (r *RangeNode) Copy() Node</source>
          <target state="translated">func(r *RangeNode)Copy()Node</target>
        </trans-unit>
        <trans-unit id="3764b1ba00d22c08659887e3cacedf122697fbac" translate="yes" xml:space="preserve">
          <source>func (r *Reader) AddressSize() int</source>
          <target state="translated">func (r *Reader)AddressSize()int</target>
        </trans-unit>
        <trans-unit id="918063f51ab157058ce64813c8b010cbacf8e3a7" translate="yes" xml:space="preserve">
          <source>func (r *Reader) ByteOrder() binary.ByteOrder</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0a018513f0868368d4cb8c6eadefd5bf05e23751" translate="yes" xml:space="preserve">
          <source>func (r *Reader) DotReader() io.Reader</source>
          <target state="translated">func (r *Reader)DotReader()io.Reader</target>
        </trans-unit>
        <trans-unit id="5668f382c4731a8396a406f1358ac1c14b574c55" translate="yes" xml:space="preserve">
          <source>func (r *Reader) Len() int</source>
          <target state="translated">func (r *Reader)Len()int</target>
        </trans-unit>
        <trans-unit id="36a898d257f0d40f93a722bbb65ad3995e23634a" translate="yes" xml:space="preserve">
          <source>func (r *Reader) Next() (*Entry, error)</source>
          <target state="translated">func (r *Reader)Next()(*Entry,error)</target>
        </trans-unit>
        <trans-unit id="ceeca4100ac1a8eb5a267fe640926e6b13b8dee2" translate="yes" xml:space="preserve">
          <source>func (r *Reader) NextPart() (*Part, error)</source>
          <target state="translated">func (r *Reader)NextPart()(*Part,error)</target>
        </trans-unit>
        <trans-unit id="224f27e2354cd48d9df0e1b42dd0302c9c290fc4" translate="yes" xml:space="preserve">
          <source>func (r *Reader) NextRawPart() (*Part, error)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d66d845cdc611bdcc342d1bc2e0da454f8752912" translate="yes" xml:space="preserve">
          <source>func (r *Reader) Open(name string) (fs.File, error)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="652e99b5bd2f63c3501f8ccbfd9e1d5d0dff7ec0" translate="yes" xml:space="preserve">
          <source>func (r *Reader) Read() (record []string, err error)</source>
          <target state="translated">func (r *Reader)Read()(record []string,err error)</target>
        </trans-unit>
        <trans-unit id="727e6d9055e7295d858fd52744e2753b8cb1c160" translate="yes" xml:space="preserve">
          <source>func (r *Reader) Read(b []byte) (n int, err error)</source>
          <target state="translated">func (r *Reader)Read(b []byte)(n int,err error)</target>
        </trans-unit>
        <trans-unit id="d946d78c272fc791e727078af742065d909b55ea" translate="yes" xml:space="preserve">
          <source>func (r *Reader) Read(p []byte) (n int, err error)</source>
          <target state="translated">func (r *Reader)Read(p []byte)(n int,err error)</target>
        </trans-unit>
        <trans-unit id="e92c00d93df2f5d36eea55f296c372ce0f520965" translate="yes" xml:space="preserve">
          <source>func (r *Reader) ReadAll() (records [][]string, err error)</source>
          <target state="translated">func (r *Reader)ReadAll()(records [][]string,err error)</target>
        </trans-unit>
        <trans-unit id="509be06c97e4c9e0fe35c27aaffe823b388ff900" translate="yes" xml:space="preserve">
          <source>func (r *Reader) ReadAt(b []byte, off int64) (n int, err error)</source>
          <target state="translated">func (r *Reader)ReadAt(b []byte,off int64)(n int,err error)</target>
        </trans-unit>
        <trans-unit id="65ee7f915fe9a344c25c6fb3a5dca5cb230af10c" translate="yes" xml:space="preserve">
          <source>func (r *Reader) ReadByte() (byte, error)</source>
          <target state="translated">func (r *Reader)ReadByte()(byte,error)</target>
        </trans-unit>
        <trans-unit id="496ca8740417398e96391672e76b6159b1cf0c19" translate="yes" xml:space="preserve">
          <source>func (r *Reader) ReadCodeLine(expectCode int) (code int, message string, err error)</source>
          <target state="translated">func (r *Reader)ReadCodeLine(expectCode int)(code int,message string,err error)</target>
        </trans-unit>
        <trans-unit id="c373ec4c4ed6254d52ba2da8c4e4494774122130" translate="yes" xml:space="preserve">
          <source>func (r *Reader) ReadContinuedLine() (string, error)</source>
          <target state="translated">func (r *Reader)ReadContinuedLine()(cadena,error)</target>
        </trans-unit>
        <trans-unit id="b3246b658f4b9d932979498508260254ac5d67ec" translate="yes" xml:space="preserve">
          <source>func (r *Reader) ReadContinuedLineBytes() ([]byte, error)</source>
          <target state="translated">func (r *Reader)ReadContinuedLineBytes()([]byte,error)</target>
        </trans-unit>
        <trans-unit id="afeae12c23ac23f041a7f3c8deee5bede0eca703" translate="yes" xml:space="preserve">
          <source>func (r *Reader) ReadDotBytes() ([]byte, error)</source>
          <target state="translated">func (r *Reader)ReadDotBytes()([]byte,error)</target>
        </trans-unit>
        <trans-unit id="223cf97e9b6f687806dbf5c6983bd4c62c9ad949" translate="yes" xml:space="preserve">
          <source>func (r *Reader) ReadDotLines() ([]string, error)</source>
          <target state="translated">func (r *Reader)ReadDotLines()([]string,error)</target>
        </trans-unit>
        <trans-unit id="7d1d2a2bf7340eaadb2a2ca5b31d805c0495dc71" translate="yes" xml:space="preserve">
          <source>func (r *Reader) ReadForm(maxMemory int64) (*Form, error)</source>
          <target state="translated">func (r *Reader)ReadForm(maxMemory int64)(*Form,error)</target>
        </trans-unit>
        <trans-unit id="8d3cc3434841a72e6f9670c5c2859bede19dd1a6" translate="yes" xml:space="preserve">
          <source>func (r *Reader) ReadLine() (string, error)</source>
          <target state="translated">func (r *Reader)ReadLine()(cadena,error)</target>
        </trans-unit>
        <trans-unit id="9aaa318b0d896d7715e5359f4f2398155c2ec28a" translate="yes" xml:space="preserve">
          <source>func (r *Reader) ReadLineBytes() ([]byte, error)</source>
          <target state="translated">func (r *Reader)ReadLineBytes()([]byte,error)</target>
        </trans-unit>
        <trans-unit id="c6d2774bec2ead90a34aa91bb42b291b9bc01918" translate="yes" xml:space="preserve">
          <source>func (r *Reader) ReadMIMEHeader() (MIMEHeader, error)</source>
          <target state="translated">func (r *Reader)ReadMIMEHeader()(MIMEHeader,error)</target>
        </trans-unit>
        <trans-unit id="85ea575c0598b276bdf73575398b39813ea11440" translate="yes" xml:space="preserve">
          <source>func (r *Reader) ReadResponse(expectCode int) (code int, message string, err error)</source>
          <target state="translated">func (r *Reader)ReadResponse(expectCode int)(code int,message string,err error)</target>
        </trans-unit>
        <trans-unit id="f80b99a9927351e1bffaebc2fa14a3598c973e31" translate="yes" xml:space="preserve">
          <source>func (r *Reader) ReadRune() (ch rune, size int, err error)</source>
          <target state="translated">func (r *Reader)ReadRune()(ch rune,size int,err error)</target>
        </trans-unit>
        <trans-unit id="d78bec68fb0a88885e0cff3390f2eea89a67eec3" translate="yes" xml:space="preserve">
          <source>func (r *Reader) Reset(b []byte)</source>
          <target state="translated">func (r *Lector)Reset(b []byte)</target>
        </trans-unit>
        <trans-unit id="fab5757cd0e2a5b71a267095cc74221e381a897a" translate="yes" xml:space="preserve">
          <source>func (r *Reader) Reset(s string)</source>
          <target state="translated">func (r *Reader)Reset(s string)</target>
        </trans-unit>
        <trans-unit id="8274e8639564d2abe7a7681d4bce2f683341411b" translate="yes" xml:space="preserve">
          <source>func (r *Reader) Seek(off Offset)</source>
          <target state="translated">func (r *Reader)Seek(offset)</target>
        </trans-unit>
        <trans-unit id="0d007277402d3bcf2123f807230656fe772886a9" translate="yes" xml:space="preserve">
          <source>func (r *Reader) Seek(offset int64, whence int) (int64, error)</source>
          <target state="translated">func (r *Reader)Seek(offset int64,whence int)(int64,error)</target>
        </trans-unit>
        <trans-unit id="52f00c156f65bdbb5c1ae827b8b30ebbbdab79bc" translate="yes" xml:space="preserve">
          <source>func (r *Reader) SeekPC(pc uint64) (*Entry, error)</source>
          <target state="translated">func (r *Lector)SeekPC(pc uint64)(*Entrada,error)</target>
        </trans-unit>
        <trans-unit id="cee09231eb2e1f8348b40dfad13698887f459d9a" translate="yes" xml:space="preserve">
          <source>func (r *Reader) Size() int64</source>
          <target state="translated">func (r *Reader)Size()int64</target>
        </trans-unit>
        <trans-unit id="e66d16d7241d9cf81c9e6f5e73e66b1f2318fa70" translate="yes" xml:space="preserve">
          <source>func (r *Reader) SkipChildren()</source>
          <target state="translated">func (r *Lector)SkipChildren()</target>
        </trans-unit>
        <trans-unit id="842c4bc099a34c978addbcc11a4897df19c5700c" translate="yes" xml:space="preserve">
          <source>func (r *Reader) UnreadByte() error</source>
          <target state="translated">func (r *Reader)UnreadByte()error</target>
        </trans-unit>
        <trans-unit id="867d47c4809cd422548c2d9e18552f67a79ae233" translate="yes" xml:space="preserve">
          <source>func (r *Reader) UnreadRune() error</source>
          <target state="translated">func (r *Reader)UnreadRune()error</target>
        </trans-unit>
        <trans-unit id="a0e7a8799c418dfac8ab12d69e7c2a422e244810" translate="yes" xml:space="preserve">
          <source>func (r *Reader) WriteTo(w io.Writer) (n int64, err error)</source>
          <target state="translated">func (r *Reader)WriteTo(w io.Writer)(n int64,err error)</target>
        </trans-unit>
        <trans-unit id="7795a821531a5291d216297aaaec9dac8d04501b" translate="yes" xml:space="preserve">
          <source>func (r *Region) End()</source>
          <target state="translated">func (r *Región)End()</target>
        </trans-unit>
        <trans-unit id="fdfdc2000ddd91c172c48d0c97225effd3030b21" translate="yes" xml:space="preserve">
          <source>func (r *Replacer) Replace(s string) string</source>
          <target state="translated">func (r *Reemplazador)Reemplaza(n)la(s)cuerda(s)</target>
        </trans-unit>
        <trans-unit id="435971d075ada74aeac264c0033fab6e5141ef02" translate="yes" xml:space="preserve">
          <source>func (r *Replacer) WriteString(w io.Writer, s string) (n int, err error)</source>
          <target state="translated">func (r *Replace)WriteString(w io.Writer,s string)(n int,err error)</target>
        </trans-unit>
        <trans-unit id="e103fdfd626ff9131619e34361113028408908f1" translate="yes" xml:space="preserve">
          <source>func (r *Request) AddCookie(c *Cookie)</source>
          <target state="translated">func (r *Solicitud)AddCookie(c *Cookie)</target>
        </trans-unit>
        <trans-unit id="a01dd3c7b49d36cb8d292794c675cb4909771597" translate="yes" xml:space="preserve">
          <source>func (r *Request) BasicAuth() (username, password string, ok bool)</source>
          <target state="translated">func (r *Request)BasicAuth()(nombre de usuario,cadena de contraseña,ok bool)</target>
        </trans-unit>
        <trans-unit id="bc7404dcee4ebf6910d7202922dbf43340702e83" translate="yes" xml:space="preserve">
          <source>func (r *Request) Clone(ctx context.Context) *Request</source>
          <target state="translated">func (r *Solicitud)Clon(ctx context.Context)*Solicitud</target>
        </trans-unit>
        <trans-unit id="ec83bfad0a9bc7b50ab8c13734943a33fe1faea8" translate="yes" xml:space="preserve">
          <source>func (r *Request) Context() context.Context</source>
          <target state="translated">func (r *Solicitud)Context()context.Contexto</target>
        </trans-unit>
        <trans-unit id="36a59bb69f5802a87f27a1395a0af064ab7bb681" translate="yes" xml:space="preserve">
          <source>func (r *Request) Cookie(name string) (*Cookie, error)</source>
          <target state="translated">func (r *Request)Cookie(name string)(*Cookie,error)</target>
        </trans-unit>
        <trans-unit id="3e936f9ac87e2d537f74514e9297c251d0902d6d" translate="yes" xml:space="preserve">
          <source>func (r *Request) Cookies() []*Cookie</source>
          <target state="translated">func (r *Request)Cookies()[]*Cookie</target>
        </trans-unit>
        <trans-unit id="b6c8f55feb6c5c2acc3f2ed27f7bc6eccc00d715" translate="yes" xml:space="preserve">
          <source>func (r *Request) FormFile(key string) (multipart.File, *multipart.FileHeader, error)</source>
          <target state="translated">func (r *Request)FormFile(key string)(multipart.File,*multipart.FileHeader,error)</target>
        </trans-unit>
        <trans-unit id="4206f7619f0f9e3c1dffc306fca380b553b2c4ee" translate="yes" xml:space="preserve">
          <source>func (r *Request) FormValue(key string) string</source>
          <target state="translated">func (r *Request)FormValue(key string)string</target>
        </trans-unit>
        <trans-unit id="9c51045c5315d41409526b5060d0838da3a9dd58" translate="yes" xml:space="preserve">
          <source>func (r *Request) MultipartReader() (*multipart.Reader, error)</source>
          <target state="translated">func (r *Request)MultipartReader()(*multipart.Reader,error)</target>
        </trans-unit>
        <trans-unit id="a3249e5626217caeed3c7c18d2c4e0c5ab4d4f67" translate="yes" xml:space="preserve">
          <source>func (r *Request) ParseForm() error</source>
          <target state="translated">func (r *Request)ParseForm()error</target>
        </trans-unit>
        <trans-unit id="dfdc54f78e282731a27ead3b728784dfe6395cb0" translate="yes" xml:space="preserve">
          <source>func (r *Request) ParseMultipartForm(maxMemory int64) error</source>
          <target state="translated">func (r *Request)ParseMultipartForm(maxMemory int64)error</target>
        </trans-unit>
        <trans-unit id="9fae37f6e0152592beb7a8a285befadce8090b61" translate="yes" xml:space="preserve">
          <source>func (r *Request) PostFormValue(key string) string</source>
          <target state="translated">func (r *Request)PostFormValue(key string)string</target>
        </trans-unit>
        <trans-unit id="ce84dd7d3326490fff5ee5eb654537b76faf0ecd" translate="yes" xml:space="preserve">
          <source>func (r *Request) ProtoAtLeast(major, minor int) bool</source>
          <target state="translated">func (r *Request)ProtoAtLeast(major,minor int)bool</target>
        </trans-unit>
        <trans-unit id="66e9d8d7f4de9ba16d6413917a0faf9b27837c76" translate="yes" xml:space="preserve">
          <source>func (r *Request) Referer() string</source>
          <target state="translated">func (r *Request)Referer()string</target>
        </trans-unit>
        <trans-unit id="4b0420998de93a3b6cd387a2b7244d278976e4b9" translate="yes" xml:space="preserve">
          <source>func (r *Request) SetBasicAuth(username, password string)</source>
          <target state="translated">func (r *Request)SetBasicAuth(nombre de usuario,cadena de contraseña)</target>
        </trans-unit>
        <trans-unit id="67d0159de5117c07d7e17747586c76ae9c810a24" translate="yes" xml:space="preserve">
          <source>func (r *Request) UserAgent() string</source>
          <target state="translated">func (r *Request)UserAgent()string</target>
        </trans-unit>
        <trans-unit id="cbdc9a53fb255292e20951d38663d78e3b16b196" translate="yes" xml:space="preserve">
          <source>func (r *Request) WithContext(ctx context.Context) *Request</source>
          <target state="translated">func (r *Solicitud)WithContext(ctx context.Context)*Solicitud</target>
        </trans-unit>
        <trans-unit id="d1aa8e0e0575c036b2414406b989a1c4d97f65ee" translate="yes" xml:space="preserve">
          <source>func (r *Request) Write(w io.Writer) error</source>
          <target state="translated">func (r *Request)Write(w io.Writer)error</target>
        </trans-unit>
        <trans-unit id="e0b82d782cd031dd2a57cff0185c628c18f1bb0f" translate="yes" xml:space="preserve">
          <source>func (r *Request) WriteProxy(w io.Writer) error</source>
          <target state="translated">func (r *Request)WriteProxy(w io.Writer)error</target>
        </trans-unit>
        <trans-unit id="5851d7482f2f3061496001e8d229c4b87e04cd23" translate="yes" xml:space="preserve">
          <source>func (r *Resolver) LookupAddr(ctx context.Context, addr string) (names []string, err error)</source>
          <target state="translated">func (r *Resolver)LookupAddr(ctx context.Context,addr string)(nombres []string,error err)</target>
        </trans-unit>
        <trans-unit id="fcec59efca79f4ff5941389c0ae6410de7bddd71" translate="yes" xml:space="preserve">
          <source>func (r *Resolver) LookupCNAME(ctx context.Context, host string) (cname string, err error)</source>
          <target state="translated">func (r *Resolver)LookupCNAME(ctx context.Context,host string)(cname string,err error)</target>
        </trans-unit>
        <trans-unit id="e36ba0af5cd17bbe24be169c176c614d78fdbe87" translate="yes" xml:space="preserve">
          <source>func (r *Resolver) LookupHost(ctx context.Context, host string) (addrs []string, err error)</source>
          <target state="translated">func (r *Resolver)LookupHost(ctx context.Context,host string)(addrs []string,err error)</target>
        </trans-unit>
        <trans-unit id="08051ba39ece392cdbf162e477f7e5b1813d51fc" translate="yes" xml:space="preserve">
          <source>func (r *Resolver) LookupIP(ctx context.Context, network, host string) ([]IP, error)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9d497f7091803c5b96eeda5b0a90f60656b5bc7e" translate="yes" xml:space="preserve">
          <source>func (r *Resolver) LookupIPAddr(ctx context.Context, host string) ([]IPAddr, error)</source>
          <target state="translated">func (r *Resolver)LookupIPAddr(ctx context.Context,host string)([]IPAddr,error)</target>
        </trans-unit>
        <trans-unit id="c9bae2e4634d2c7956839ffc1442fe1b74f1b03e" translate="yes" xml:space="preserve">
          <source>func (r *Resolver) LookupMX(ctx context.Context, name string) ([]*MX, error)</source>
          <target state="translated">func (r *Resolver)LookupMX(ctx context.Context,name string)([]*MX,error)</target>
        </trans-unit>
        <trans-unit id="9dd2143959980b3ecdc3709867cf2a4ef06d2d0d" translate="yes" xml:space="preserve">
          <source>func (r *Resolver) LookupNS(ctx context.Context, name string) ([]*NS, error)</source>
          <target state="translated">func (r *Resolver)LookupNS(ctx context.Context,name string)([]*NS,error)</target>
        </trans-unit>
        <trans-unit id="a689061c11327fef4470ec5481bee18a81576efa" translate="yes" xml:space="preserve">
          <source>func (r *Resolver) LookupPort(ctx context.Context, network, service string) (port int, err error)</source>
          <target state="translated">func (r *Resolver)LookupPort(ctx context.Contexto,red,cadena de servicio)(port int,err error)</target>
        </trans-unit>
        <trans-unit id="a7ae9460fe28289b8197d5ba3d121cf25e39db01" translate="yes" xml:space="preserve">
          <source>func (r *Resolver) LookupSRV(ctx context.Context, service, proto, name string) (cname string, addrs []*SRV, err error)</source>
          <target state="translated">func (r *Resolver)LookupSRV(ctx context.Contexto,servicio,proto,cadena de nombre)(cadena de nombre,addrs []*SRV,error err)</target>
        </trans-unit>
        <trans-unit id="526b8c1b9f5c3fadd92c22c2df0b5b19b5774db7" translate="yes" xml:space="preserve">
          <source>func (r *Resolver) LookupTXT(ctx context.Context, name string) ([]string, error)</source>
          <target state="translated">func (r *Resolver)LookupTXT(ctx context.Context,name string)([]string,error)</target>
        </trans-unit>
        <trans-unit id="b8a1a220b711523bd77065efe6d62de3b4d6b366" translate="yes" xml:space="preserve">
          <source>func (r *Response) Cookies() []*Cookie</source>
          <target state="translated">func (r *Respuesta)Cookies()[]*Cookie</target>
        </trans-unit>
        <trans-unit id="82adcb5be95207074691a13eb8fac4041b7e99c7" translate="yes" xml:space="preserve">
          <source>func (r *Response) Location() (*url.URL, error)</source>
          <target state="translated">func (r *Responder)Location()(*url.URL,error)</target>
        </trans-unit>
        <trans-unit id="655ba224bb0ad85d47b28d9206b10c0e3657f653" translate="yes" xml:space="preserve">
          <source>func (r *Response) ProtoAtLeast(major, minor int) bool</source>
          <target state="translated">func (r *Responder)ProtoAtLeast(major,minor int)bool</target>
        </trans-unit>
        <trans-unit id="37accfc156a923864be62cb2977c95266c23eef3" translate="yes" xml:space="preserve">
          <source>func (r *Response) Write(w io.Writer) error</source>
          <target state="translated">func (r *Responder)Write(w io.Writer)error</target>
        </trans-unit>
        <trans-unit id="583d53f9e6cfbfac98d92bb9b13fbf6d8aa16666" translate="yes" xml:space="preserve">
          <source>func (r *Ring) Do(f func(interface{}))</source>
          <target state="translated">func (r *Ring)Do(f func(interface{}))</target>
        </trans-unit>
        <trans-unit id="95314632b19809dd3b729d737c0e1a6b70d3f004" translate="yes" xml:space="preserve">
          <source>func (r *Ring) Len() int</source>
          <target state="translated">func (r *Ring)Len()int</target>
        </trans-unit>
        <trans-unit id="c245dc98727a05419d53a5e6e4c6d6b85884771d" translate="yes" xml:space="preserve">
          <source>func (r *Ring) Link(s *Ring) *Ring</source>
          <target state="translated">func (r *Ring)Link(s *Ring)*Ring</target>
        </trans-unit>
        <trans-unit id="544f87f62cff0ca681f90470002f6a72ae41a087" translate="yes" xml:space="preserve">
          <source>func (r *Ring) Move(n int) *Ring</source>
          <target state="translated">func (r *Ring)Move(n int)*Ring</target>
        </trans-unit>
        <trans-unit id="4d61e711a9ba4233a28be886587d740b46b17fe7" translate="yes" xml:space="preserve">
          <source>func (r *Ring) Next() *Ring</source>
          <target state="translated">func (r *Ring)Next()*Ring</target>
        </trans-unit>
        <trans-unit id="6b3a5f1e871672cdfd24087c1d9ac65c9e07703e" translate="yes" xml:space="preserve">
          <source>func (r *Ring) Prev() *Ring</source>
          <target state="translated">func (r *Ring)Prev()*Ring</target>
        </trans-unit>
        <trans-unit id="06807ba2e5f91982c9625cce46cfcb8e28c6c5cc" translate="yes" xml:space="preserve">
          <source>func (r *Ring) Unlink(n int) *Ring</source>
          <target state="translated">func (r *Ring)Unlink(n int)*Ring</target>
        </trans-unit>
        <trans-unit id="7aa966529b40d30c2d7901ef9bbebbf75eb8a354" translate="yes" xml:space="preserve">
          <source>func (r *Row) Err() error</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="de1adb7aa24aa4b4c4aa71205dc12cece71bf6aa" translate="yes" xml:space="preserve">
          <source>func (r *Row) Scan(dest ...interface{}) error</source>
          <target state="translated">func (r *Row)Scan(dest ...interface{})error</target>
        </trans-unit>
        <trans-unit id="2375c53448896bc5ea9d337da9da16be960b6129" translate="yes" xml:space="preserve">
          <source>func (r *StackRecord) Stack() []uintptr</source>
          <target state="translated">func (r *StackRecord)Stack()[]uintptr</target>
        </trans-unit>
        <trans-unit id="dbe6233faaa458ccdcdaa1af596ad99e82681974" translate="yes" xml:space="preserve">
          <source>func (r BenchmarkResult) AllocedBytesPerOp() int64</source>
          <target state="translated">func (r BenchmarkResult)AllocedBytesPerOp()int64</target>
        </trans-unit>
        <trans-unit id="94e8a6b41b4f6e2890d4b9386331d29f9718e265" translate="yes" xml:space="preserve">
          <source>func (r BenchmarkResult) AllocsPerOp() int64</source>
          <target state="translated">func (r BenchmarkResult)AllocsPerOp()int64</target>
        </trans-unit>
        <trans-unit id="8fe38fe7a841d7a11f8d07431acbea228e75965a" translate="yes" xml:space="preserve">
          <source>func (r BenchmarkResult) MemString() string</source>
          <target state="translated">func (r BenchmarkResult)MemString()string</target>
        </trans-unit>
        <trans-unit id="de891d0f8668c91c2bda2cad1d9c9d982a510a72" translate="yes" xml:space="preserve">
          <source>func (r BenchmarkResult) NsPerOp() int64</source>
          <target state="translated">func (r BenchmarkResult)NsPerOp()int64</target>
        </trans-unit>
        <trans-unit id="e18de110eb2d83728a5798d10fd3c7474e0cdd24" translate="yes" xml:space="preserve">
          <source>func (r BenchmarkResult) String() string</source>
          <target state="translated">func (r BenchmarkResult)String()string</target>
        </trans-unit>
        <trans-unit id="e6f0c2e191626f8df314d82e406d378546623084" translate="yes" xml:space="preserve">
          <source>func (r RDNSequence) String() string</source>
          <target state="translated">func (r RDNSequence)String()string</target>
        </trans-unit>
        <trans-unit id="428f83404a470a44b8d53d81f7abc3008a0def80" translate="yes" xml:space="preserve">
          <source>func (r Rectangle) Add(p Point) Rectangle</source>
          <target state="translated">func (r Rectángulo)Add(p Punto)Rectángulo</target>
        </trans-unit>
        <trans-unit id="25d4fe9b26e8b66124a5ba1fa4cbf2ac97665563" translate="yes" xml:space="preserve">
          <source>func (r Rectangle) At(x, y int) color.Color</source>
          <target state="translated">func (r Rectángulo)At(x,y int)color.Color</target>
        </trans-unit>
        <trans-unit id="8fcea03830ddd8d847faeda68cd09548a0d7100d" translate="yes" xml:space="preserve">
          <source>func (r Rectangle) Bounds() Rectangle</source>
          <target state="translated">func (r Rectángulo)Límites()Rectángulo</target>
        </trans-unit>
        <trans-unit id="e4cd4a40c81483c20977f38973b973c292c74bbe" translate="yes" xml:space="preserve">
          <source>func (r Rectangle) Canon() Rectangle</source>
          <target state="translated">func (r Rectángulo)Canon()Rectángulo</target>
        </trans-unit>
        <trans-unit id="91d6123df4757a639c3c4eed8975695828e3e6fe" translate="yes" xml:space="preserve">
          <source>func (r Rectangle) ColorModel() color.Model</source>
          <target state="translated">func (r Rectángulo)ColorModelo()color.Modelo</target>
        </trans-unit>
        <trans-unit id="c129c35edb4792cd5f7e1c2c007ee1b31305f820" translate="yes" xml:space="preserve">
          <source>func (r Rectangle) Dx() int</source>
          <target state="translated">func (r Rectángulo)Dx()int</target>
        </trans-unit>
        <trans-unit id="232e6d1776e30abd6361c9fad5393aec70c9503b" translate="yes" xml:space="preserve">
          <source>func (r Rectangle) Dy() int</source>
          <target state="translated">func (r Rectángulo)Dy()int</target>
        </trans-unit>
        <trans-unit id="dc7f1c2230f6df5105c558a9a70b0f974500a73d" translate="yes" xml:space="preserve">
          <source>func (r Rectangle) Empty() bool</source>
          <target state="translated">func (r Rectángulo)Empty()bool</target>
        </trans-unit>
        <trans-unit id="6fce375b55bf012cbf0923bc6176d6c96ec94f55" translate="yes" xml:space="preserve">
          <source>func (r Rectangle) Eq(s Rectangle) bool</source>
          <target state="translated">func (r Rectángulo)Eq(s Rectángulo)bool</target>
        </trans-unit>
        <trans-unit id="6b364864a57f9f5cd7288ec24e8fc10e7ae6747d" translate="yes" xml:space="preserve">
          <source>func (r Rectangle) In(s Rectangle) bool</source>
          <target state="translated">func (r Rectángulo)In(s Rectángulo)bool</target>
        </trans-unit>
        <trans-unit id="adc40514f7fa2a6912377b07266d6e32a329f38e" translate="yes" xml:space="preserve">
          <source>func (r Rectangle) Inset(n int) Rectangle</source>
          <target state="translated">func (r Rectángulo)Inset(n int)Rectángulo</target>
        </trans-unit>
        <trans-unit id="2da4118bebd3969f8c6f25bf69176deeeed837d0" translate="yes" xml:space="preserve">
          <source>func (r Rectangle) Intersect(s Rectangle) Rectangle</source>
          <target state="translated">func (r Rectángulo)Intersect (s Rectángulo)Rectángulo</target>
        </trans-unit>
        <trans-unit id="0ab7946f480e034d3af369d4c74cf77483f9ec60" translate="yes" xml:space="preserve">
          <source>func (r Rectangle) Overlaps(s Rectangle) bool</source>
          <target state="translated">func (r Rectángulo)Solapamientos(s Rectángulo)bool</target>
        </trans-unit>
        <trans-unit id="ca229c273e368595cb4954227c9eccacce90c0a0" translate="yes" xml:space="preserve">
          <source>func (r Rectangle) Size() Point</source>
          <target state="translated">func (r Rectángulo)Tamaño()Punto</target>
        </trans-unit>
        <trans-unit id="48ac7eb41fe7e9bc83ee708a0ec2e19b4141aade" translate="yes" xml:space="preserve">
          <source>func (r Rectangle) String() string</source>
          <target state="translated">func (r Rectángulo)String()string</target>
        </trans-unit>
        <trans-unit id="a16b2bc1cbb3e1424f5761fc81b477026881eb40" translate="yes" xml:space="preserve">
          <source>func (r Rectangle) Sub(p Point) Rectangle</source>
          <target state="translated">func (r Rectángulo)Sub(p Punto)Rectángulo</target>
        </trans-unit>
        <trans-unit id="e29ea1ad1a069d70ece88826a09196fd5e3b31a6" translate="yes" xml:space="preserve">
          <source>func (r Rectangle) Union(s Rectangle) Rectangle</source>
          <target state="translated">func (r Rectángulo)Unión(s Rectángulo)Rectángulo</target>
        </trans-unit>
        <trans-unit id="be6888c3b8d1e6217e26b147cb98ffcee27db2e8" translate="yes" xml:space="preserve">
          <source>func (r RelocTypeARM) GoString() string</source>
          <target state="translated">func (r RelocTypeARM)GoString()string</target>
        </trans-unit>
        <trans-unit id="7710a331149cb0c251b94b2e17ec7a66043d9204" translate="yes" xml:space="preserve">
          <source>func (r RelocTypeARM64) GoString() string</source>
          <target state="translated">func (r RelocTypeARM64)GoString()string</target>
        </trans-unit>
        <trans-unit id="cbadacae3e72e55ee996741ca483224b5d0f2533" translate="yes" xml:space="preserve">
          <source>func (r RelocTypeGeneric) GoString() string</source>
          <target state="translated">func (r RelocTypeGeneric)GoString()string</target>
        </trans-unit>
        <trans-unit id="a2eaeac7ea5923e03f4957436502d036eecf04bf" translate="yes" xml:space="preserve">
          <source>func (r RelocTypeX86_64) GoString() string</source>
          <target state="translated">func (r RelocTypeX86_64)GoString()string</target>
        </trans-unit>
        <trans-unit id="42b3e06b0d2d72bf3793f31c1947fcbfd74efe9b" translate="yes" xml:space="preserve">
          <source>func (r StreamReader) Read(dst []byte) (n int, err error)</source>
          <target state="translated">func (r StreamReader)Read(dst []byte)(n int,err error)</target>
        </trans-unit>
        <trans-unit id="ca83a74bdc04de3837577c591942f4dd4d4ec695" translate="yes" xml:space="preserve">
          <source>func (rc *ReadCloser) Close() error</source>
          <target state="translated">func (rc *ReadCloser)Close()error</target>
        </trans-unit>
        <trans-unit id="b434ac52182e97a227eaf6c60de302b0715582e8" translate="yes" xml:space="preserve">
          <source>func (re *Regexp) CapNames() []string</source>
          <target state="translated">func (re *Regexp)CapNames()[]string</target>
        </trans-unit>
        <trans-unit id="ff01c34733b24c66cbfc7de97628377a2d475669" translate="yes" xml:space="preserve">
          <source>func (re *Regexp) Copy() *Regexp</source>
          <target state="translated">func (re *Regexp)Copy()*Regexp</target>
        </trans-unit>
        <trans-unit id="c87dfabff7abe599c888d6101b8343c23fb30213" translate="yes" xml:space="preserve">
          <source>func (re *Regexp) Expand(dst []byte, template []byte, src []byte, match []int) []byte</source>
          <target state="translated">func (re *Regexp)Expandir(dst []byte,plantilla []byte,src []byte,match []int)[]byte</target>
        </trans-unit>
        <trans-unit id="d0e247fbc886ad4d90dd0ff8b289da0ab52a7bb1" translate="yes" xml:space="preserve">
          <source>func (re *Regexp) ExpandString(dst []byte, template string, src string, match []int) []byte</source>
          <target state="translated">func (re *Regexp)ExpandString(dst []byte,template string,src string,match []int)[]byte</target>
        </trans-unit>
        <trans-unit id="9d88498e19a6c405dc6ddfa1cc73e0c9cf8c8f26" translate="yes" xml:space="preserve">
          <source>func (re *Regexp) Find(b []byte) []byte</source>
          <target state="translated">func (re *Regexp)Find(b []byte)[]byte</target>
        </trans-unit>
        <trans-unit id="ddcb086063cd2601a60118e85eaf18b7e71e54f3" translate="yes" xml:space="preserve">
          <source>func (re *Regexp) FindAll(b []byte, n int) [][]byte</source>
          <target state="translated">func (re *Regexp)FindAll(b []byte,n int)[][]byte</target>
        </trans-unit>
        <trans-unit id="df131b72c47a2af95c645700424aa018d18c36ba" translate="yes" xml:space="preserve">
          <source>func (re *Regexp) FindAllIndex(b []byte, n int) [][]int</source>
          <target state="translated">func (re *Regexp)FindAllIndex(b []byte,n int)[][]int</target>
        </trans-unit>
        <trans-unit id="de317c277a6eb504516fc1fb9b29a394719b9169" translate="yes" xml:space="preserve">
          <source>func (re *Regexp) FindAllString(s string, n int) []string</source>
          <target state="translated">func (re *Regexp)FindAllString(s string,n int)[]string</target>
        </trans-unit>
        <trans-unit id="680eb6d647de355f1f3746205b1bd2bf555db819" translate="yes" xml:space="preserve">
          <source>func (re *Regexp) FindAllStringIndex(s string, n int) [][]int</source>
          <target state="translated">func (re *Regexp)FindAllStringIndex(s string,n int)[][]int</target>
        </trans-unit>
        <trans-unit id="2ff49d23d1ee7687d518657aa012729c8388c169" translate="yes" xml:space="preserve">
          <source>func (re *Regexp) FindAllStringSubmatch(s string, n int) [][]string</source>
          <target state="translated">func (re *Regexp)FindAllStringSubmatch(s string,n int)[][]string</target>
        </trans-unit>
        <trans-unit id="3f5518bcae99cb394045f7ff81d31ff6666cdbdc" translate="yes" xml:space="preserve">
          <source>func (re *Regexp) FindAllStringSubmatchIndex(s string, n int) [][]int</source>
          <target state="translated">func (re *Regexp)FindAllStringSubmatchIndex(s string,n int)[][]int</target>
        </trans-unit>
        <trans-unit id="d7df92255718b9466f4c2018552cefca89f644f9" translate="yes" xml:space="preserve">
          <source>func (re *Regexp) FindAllSubmatch(b []byte, n int) [][][]byte</source>
          <target state="translated">func (re *Regexp)FindAllSubmatch(b []byte,n int)[][][]byte</target>
        </trans-unit>
        <trans-unit id="effec2fae0274cb8c97bd4bfb3d090da289bb63b" translate="yes" xml:space="preserve">
          <source>func (re *Regexp) FindAllSubmatchIndex(b []byte, n int) [][]int</source>
          <target state="translated">func (re *Regexp)FindAllSubmatchIndex(b []byte,n int)[][]int</target>
        </trans-unit>
        <trans-unit id="33faa55868c4f3702b31ddd0d86fd957fb6bac4a" translate="yes" xml:space="preserve">
          <source>func (re *Regexp) FindIndex(b []byte) (loc []int)</source>
          <target state="translated">func (re *Regexp)FindIndex(b []byte)(loc []int)</target>
        </trans-unit>
        <trans-unit id="3cbde745c689dfdb6598a8ac6005e819205443b0" translate="yes" xml:space="preserve">
          <source>func (re *Regexp) FindReaderIndex(r io.RuneReader) (loc []int)</source>
          <target state="translated">func (re *Regexp)FindReaderIndex(r io.RuneReader)(loc []int)</target>
        </trans-unit>
        <trans-unit id="b832989d33260fa36ceb8b1b033fe5d5bfa3ed9d" translate="yes" xml:space="preserve">
          <source>func (re *Regexp) FindReaderSubmatchIndex(r io.RuneReader) []int</source>
          <target state="translated">func (re *Regexp)FindReaderSubmatchIndex(r io.RuneReader)[]int</target>
        </trans-unit>
        <trans-unit id="9d4ab47aefe0fc14238c960c4c8d08e728ba7d29" translate="yes" xml:space="preserve">
          <source>func (re *Regexp) FindString(s string) string</source>
          <target state="translated">func (re *Regexp)FindString(s string)string</target>
        </trans-unit>
        <trans-unit id="00fbf331f5266b7a5b08d23e6a043b1c6ec68a6b" translate="yes" xml:space="preserve">
          <source>func (re *Regexp) FindStringIndex(s string) (loc []int)</source>
          <target state="translated">func (re *Regexp)FindStringIndex(s string)(loc []int)</target>
        </trans-unit>
        <trans-unit id="d46aff0a9dc8a6762c18509b1d57a1f7ff2e86d4" translate="yes" xml:space="preserve">
          <source>func (re *Regexp) FindStringSubmatch(s string) []string</source>
          <target state="translated">func (re *Regexp)FindStringSubmatch(s string)[]string</target>
        </trans-unit>
        <trans-unit id="3d79a2184fb6a33a4aa9ac3c8cf2f777bb9f5613" translate="yes" xml:space="preserve">
          <source>func (re *Regexp) FindStringSubmatchIndex(s string) []int</source>
          <target state="translated">func (re *Regexp)FindStringSubmatchIndex(s string)[]int</target>
        </trans-unit>
        <trans-unit id="b9bc4f63a9a5ee9ec11fde257a6ae52bd649ec37" translate="yes" xml:space="preserve">
          <source>func (re *Regexp) FindSubmatch(b []byte) [][]byte</source>
          <target state="translated">func (re *Regexp)FindSubmatch(b []byte)[][]byte</target>
        </trans-unit>
        <trans-unit id="fbd9612619c109bdaad42dfd47e77b141a8f7b2f" translate="yes" xml:space="preserve">
          <source>func (re *Regexp) FindSubmatchIndex(b []byte) []int</source>
          <target state="translated">func (re *Regexp)FindSubmatchIndex(b []byte)[]int</target>
        </trans-unit>
        <trans-unit id="27f5d9915ecb655303f1707a619ce92864e4b9c0" translate="yes" xml:space="preserve">
          <source>func (re *Regexp) LiteralPrefix() (prefix string, complete bool)</source>
          <target state="translated">func (re *Regexp)LiteralPrefix()(prefijo cadena,bool completo)</target>
        </trans-unit>
        <trans-unit id="88e71b1b92a58316a7ad051182e89cba002c9962" translate="yes" xml:space="preserve">
          <source>func (re *Regexp) Longest()</source>
          <target state="translated">func (re *Regexp)Longest()</target>
        </trans-unit>
        <trans-unit id="ae51a87b925a8d2bca9ce30f6f25d755b066ffa7" translate="yes" xml:space="preserve">
          <source>func (re *Regexp) Match(b []byte) bool</source>
          <target state="translated">func (re *Regexp)Match(b []byte)bool</target>
        </trans-unit>
        <trans-unit id="7d6d497b29cff1404d5f1e29fa0e96f0412160e2" translate="yes" xml:space="preserve">
          <source>func (re *Regexp) MatchReader(r io.RuneReader) bool</source>
          <target state="translated">func(re *Regexp)MatchReader(r io.RuneReader)bool</target>
        </trans-unit>
        <trans-unit id="a3d6f7e4dcd4540bad4677e9d17a7124a08c4754" translate="yes" xml:space="preserve">
          <source>func (re *Regexp) MatchString(s string) bool</source>
          <target state="translated">func(re *Regexp)MatchString(s string)bool</target>
        </trans-unit>
        <trans-unit id="992771025dbff2fad07e15a2c1946eeaa8382b1e" translate="yes" xml:space="preserve">
          <source>func (re *Regexp) MaxCap() int</source>
          <target state="translated">func (re *Regexp)MaxCap()int</target>
        </trans-unit>
        <trans-unit id="78ec3bf849eac66065f2a5a60a8c308ef3c819f1" translate="yes" xml:space="preserve">
          <source>func (re *Regexp) NumSubexp() int</source>
          <target state="translated">func (re *Regexp)NumSubexp()int</target>
        </trans-unit>
        <trans-unit id="4113b68ce752bdd650fde861de3965f83f55d22a" translate="yes" xml:space="preserve">
          <source>func (re *Regexp) ReplaceAll(src, repl []byte) []byte</source>
          <target state="translated">func (re *Regexp)ReplaceAll(src,repl []byte)[]byte</target>
        </trans-unit>
        <trans-unit id="7d09a49443d5a39fd9f641c616423fe1e72c0bca" translate="yes" xml:space="preserve">
          <source>func (re *Regexp) ReplaceAllFunc(src []byte, repl func([]byte) []byte) []byte</source>
          <target state="translated">func (re *Regexp)ReemplazarAllFunc(src []byte,repl func([]byte)[]byte)[]byte</target>
        </trans-unit>
        <trans-unit id="f85f7e3e2ba31417051f3ee2f4e3948b8a426d9b" translate="yes" xml:space="preserve">
          <source>func (re *Regexp) ReplaceAllLiteral(src, repl []byte) []byte</source>
          <target state="translated">func (re *Regexp)ReplaceAllLiteral(src,repl []byte)[]byte</target>
        </trans-unit>
        <trans-unit id="1e8c816dfe5d18bc4e9c64416272fbc6739e4e42" translate="yes" xml:space="preserve">
          <source>func (re *Regexp) ReplaceAllLiteralString(src, repl string) string</source>
          <target state="translated">func (re *Regexp)Reemplaza toda la cadena de caracteres (src,repl string)</target>
        </trans-unit>
        <trans-unit id="4099ac108e0cba71410846123896978b74bef518" translate="yes" xml:space="preserve">
          <source>func (re *Regexp) ReplaceAllString(src, repl string) string</source>
          <target state="translated">func (re *Regexp)Reemplaza la cadena AllString(src,repl string)string</target>
        </trans-unit>
        <trans-unit id="f88425baaf24ae4f3cff055691090d06b9936b04" translate="yes" xml:space="preserve">
          <source>func (re *Regexp) ReplaceAllStringFunc(src string, repl func(string) string) string</source>
          <target state="translated">func (re *Regexp)ReplaceAllStringFunc(src string,repl func(string)string)string</target>
        </trans-unit>
        <trans-unit id="305788934413320356f3ac3b731739a690b3aac8" translate="yes" xml:space="preserve">
          <source>func (re *Regexp) Simplify() *Regexp</source>
          <target state="translated">func (re *Regexp)Simplificar()*Regexp</target>
        </trans-unit>
        <trans-unit id="ae56a0a528519c700fcdd38592454839f3534ba6" translate="yes" xml:space="preserve">
          <source>func (re *Regexp) Split(s string, n int) []string</source>
          <target state="translated">func (re *Regexp)Split(s string,n int)[]string</target>
        </trans-unit>
        <trans-unit id="0423a5b9f9666ba9a98d6f3143499bf06112cffa" translate="yes" xml:space="preserve">
          <source>func (re *Regexp) String() string</source>
          <target state="translated">func (re *Regexp)String()string</target>
        </trans-unit>
        <trans-unit id="058357c8f8ae5635d06edf0d80aa4406a346122c" translate="yes" xml:space="preserve">
          <source>func (re *Regexp) SubexpIndex(name string) int</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8385d115bcfd1f37ee2766e335e09aea91d1f20a" translate="yes" xml:space="preserve">
          <source>func (re *Regexp) SubexpNames() []string</source>
          <target state="translated">func (re *Regexp)SubexpNames()[]string</target>
        </trans-unit>
        <trans-unit id="de22bc2ac8a1958e62157648649b89a502b697ab" translate="yes" xml:space="preserve">
          <source>func (rs *Rows) Close() error</source>
          <target state="translated">func (rs *Rows)Close()error</target>
        </trans-unit>
        <trans-unit id="f85ccc29c8c3d88e34f08830784ae196bd725385" translate="yes" xml:space="preserve">
          <source>func (rs *Rows) ColumnTypes() ([]*ColumnType, error)</source>
          <target state="translated">func (rs *Rows)ColumnTypes()([]*ColumnType,error)</target>
        </trans-unit>
        <trans-unit id="7bd3422acb499a5f6e405d22f969f53d83409d96" translate="yes" xml:space="preserve">
          <source>func (rs *Rows) Columns() ([]string, error)</source>
          <target state="translated">func (rs *Rows)Columns()([]string,error)</target>
        </trans-unit>
        <trans-unit id="2ee0736e3d7a4d8b846d209db1c1a84e002f072e" translate="yes" xml:space="preserve">
          <source>func (rs *Rows) Err() error</source>
          <target state="translated">func (rs *Rows)Err()error</target>
        </trans-unit>
        <trans-unit id="475ff12da97d26e2b6510870d9b1fb7bd9910e7f" translate="yes" xml:space="preserve">
          <source>func (rs *Rows) Next() bool</source>
          <target state="translated">func(rs *Rows)Next()bool</target>
        </trans-unit>
        <trans-unit id="ee6edd3049fd8a023f65de731504ef143db4dcf0" translate="yes" xml:space="preserve">
          <source>func (rs *Rows) NextResultSet() bool</source>
          <target state="translated">func(rs *Rows)NextResultSet()bool</target>
        </trans-unit>
        <trans-unit id="04ef3b45241c2ba2edb493d88dff852bb4ecb9d9" translate="yes" xml:space="preserve">
          <source>func (rs *Rows) Scan(dest ...interface{}) error</source>
          <target state="translated">func (rs *Rows)Scan(dest ...interface{})error</target>
        </trans-unit>
        <trans-unit id="333c957c6c1e1963a2692748d6064f3fe9ffc40f" translate="yes" xml:space="preserve">
          <source>func (rw *RWMutex) Lock()</source>
          <target state="translated">func (rw *RWMutex)Lock()</target>
        </trans-unit>
        <trans-unit id="625a43b2352e0e86dac3ac6cd0ca55fd57a50493" translate="yes" xml:space="preserve">
          <source>func (rw *RWMutex) RLock()</source>
          <target state="translated">func (rw *RWMutex)RLock()</target>
        </trans-unit>
        <trans-unit id="0c31b1e3d380970939fa4ac543fef089d39cb5ca" translate="yes" xml:space="preserve">
          <source>func (rw *RWMutex) RLocker() Locker</source>
          <target state="translated">func (rw *RWMutex)RLocker()Locker</target>
        </trans-unit>
        <trans-unit id="23dc65a233b935254d17735346c49c6c7bdace09" translate="yes" xml:space="preserve">
          <source>func (rw *RWMutex) RUnlock()</source>
          <target state="translated">func (rw *RWMutex)RUnlock()</target>
        </trans-unit>
        <trans-unit id="c8ce0443a2119bcd142116601a3b45b497ca41a0" translate="yes" xml:space="preserve">
          <source>func (rw *RWMutex) Unlock()</source>
          <target state="translated">func (rw *RWMutex)Unlock()</target>
        </trans-unit>
        <trans-unit id="2a2b7e68ae906ab0799d6843088245a98b61ebe4" translate="yes" xml:space="preserve">
          <source>func (rw *ResponseRecorder) Flush()</source>
          <target state="translated">func (rw *ResponseRecorder)Flush()</target>
        </trans-unit>
        <trans-unit id="1c9092d3723e819a441e860ad6d9f694d625f1fd" translate="yes" xml:space="preserve">
          <source>func (rw *ResponseRecorder) Header() http.Header</source>
          <target state="translated">func (rw *ResponseRecorder)Header()http.Header</target>
        </trans-unit>
        <trans-unit id="603da6577e93cb19dc30c457ad25c036033b5768" translate="yes" xml:space="preserve">
          <source>func (rw *ResponseRecorder) Result() *http.Response</source>
          <target state="translated">func (rw *ResponseRecorder)Result()*http.Response</target>
        </trans-unit>
        <trans-unit id="4d0aabc3c9950c41d53ece19be1a235a37cef392" translate="yes" xml:space="preserve">
          <source>func (rw *ResponseRecorder) Write(buf []byte) (int, error)</source>
          <target state="translated">func (rw *ResponseRecorder)Write(buf []byte)(int,error)</target>
        </trans-unit>
        <trans-unit id="8671ac0034f9b72d85a2f10d49f59b507caf4e1b" translate="yes" xml:space="preserve">
          <source>func (rw *ResponseRecorder) WriteHeader(code int)</source>
          <target state="translated">func (rw *ResponseRecorder)WriteHeader(code int)</target>
        </trans-unit>
        <trans-unit id="f937a43a23a81f83905aa9c582565aa267297fa9" translate="yes" xml:space="preserve">
          <source>func (rw *ResponseRecorder) WriteString(str string) (int, error)</source>
          <target state="translated">func (rw *ResponseRecorder)WriteString(str string)(int,error)</target>
        </trans-unit>
        <trans-unit id="1fbc6741249b02235dfb5feadbda12805eb1f6fc" translate="yes" xml:space="preserve">
          <source>func (s *AssignStmt) End() token.Pos</source>
          <target state="translated">func(s *AssignStmt)End()token.Pos</target>
        </trans-unit>
        <trans-unit id="873a1f32a3c77866736327109a70836e8d34a54c" translate="yes" xml:space="preserve">
          <source>func (s *AssignStmt) Pos() token.Pos</source>
          <target state="translated">func(s *AssignStmt)Pos()token.Pos</target>
        </trans-unit>
        <trans-unit id="399871a841a7ad4172cde35dc81393247f788c29" translate="yes" xml:space="preserve">
          <source>func (s *BadStmt) End() token.Pos</source>
          <target state="translated">func(s *BadStmt)End()token.Pos</target>
        </trans-unit>
        <trans-unit id="6ed13776f72a09e505225a4a45b2b0f17ba7210e" translate="yes" xml:space="preserve">
          <source>func (s *BadStmt) Pos() token.Pos</source>
          <target state="translated">func(s *BadStmt)Pos()token.Pos</target>
        </trans-unit>
        <trans-unit id="1ff10efdab19b8a9f4c1e694149ddd6fa4abbbc0" translate="yes" xml:space="preserve">
          <source>func (s *BlockStmt) End() token.Pos</source>
          <target state="translated">func (s *BlockStmt)End()token.Pos</target>
        </trans-unit>
        <trans-unit id="d75a826ad442a48d16bb25e972bdd82cfec59d75" translate="yes" xml:space="preserve">
          <source>func (s *BlockStmt) Pos() token.Pos</source>
          <target state="translated">func (s *BlockStmt)Pos()token.Pos</target>
        </trans-unit>
        <trans-unit id="27fb6ffe3ab9bb41136cc17613a81155bfb0b88f" translate="yes" xml:space="preserve">
          <source>func (s *BranchStmt) End() token.Pos</source>
          <target state="translated">func(s *BranchStmt)End()token.Pos</target>
        </trans-unit>
        <trans-unit id="3af930a4fa2b2ff2dac9fc42cec4ed25fc434897" translate="yes" xml:space="preserve">
          <source>func (s *BranchStmt) Pos() token.Pos</source>
          <target state="translated">func(s *BranchStmt)Pos()token.Pos</target>
        </trans-unit>
        <trans-unit id="5c4e797d933bfb5385777d9be0dcee4e5bb8b95d" translate="yes" xml:space="preserve">
          <source>func (s *CaseClause) End() token.Pos</source>
          <target state="translated">func(s *CaseClause)End()token.Pos</target>
        </trans-unit>
        <trans-unit id="a44e60d9666787b802abf608345b82cca8874d45" translate="yes" xml:space="preserve">
          <source>func (s *CaseClause) Pos() token.Pos</source>
          <target state="translated">func (s *CaseClause)Pos()token.Pos</target>
        </trans-unit>
        <trans-unit id="4066b873a01fc9b1db00632a5861c4ee328d1cea" translate="yes" xml:space="preserve">
          <source>func (s *CertPool) AddCert(cert *Certificate)</source>
          <target state="translated">func (s *CertPool)AddCert(cert *Certificado)</target>
        </trans-unit>
        <trans-unit id="27628161f51536c174f09e1fabd57f034586ce3b" translate="yes" xml:space="preserve">
          <source>func (s *CertPool) AppendCertsFromPEM(pemCerts []byte) (ok bool)</source>
          <target state="translated">func(s *CertPool)AppendCertsFromPEM(pemCerts []byte)(ok bool)</target>
        </trans-unit>
        <trans-unit id="ebd1525067fb46e6aa0b4959d87b65f41c001b4b" translate="yes" xml:space="preserve">
          <source>func (s *CertPool) Subjects() [][]byte</source>
          <target state="translated">func (s *CertPool)Subjects()[][]byte</target>
        </trans-unit>
        <trans-unit id="d1e8aa6769692d38a8e48bc1f7666659f0c2f919" translate="yes" xml:space="preserve">
          <source>func (s *CheckEqualError) Error() string</source>
          <target state="translated">func (s *CheckEqualError)Error()string</target>
        </trans-unit>
        <trans-unit id="47cdfbd475b9d79c8ab6067c6bd9ce4b0f0912f3" translate="yes" xml:space="preserve">
          <source>func (s *CheckError) Error() string</source>
          <target state="translated">func (s *CheckError)Error()string</target>
        </trans-unit>
        <trans-unit id="aa203ab6c0eee185c5686e1a95dbf836be9950a2" translate="yes" xml:space="preserve">
          <source>func (s *CommClause) End() token.Pos</source>
          <target state="translated">func(s *CommClause)End()token.Pos</target>
        </trans-unit>
        <trans-unit id="be18d430c5e9acbd016f205f5690531d9ee3903b" translate="yes" xml:space="preserve">
          <source>func (s *CommClause) Pos() token.Pos</source>
          <target state="translated">func (s *CommClause)Pos()token.Pos</target>
        </trans-unit>
        <trans-unit id="c5531f69f6d8c6de74a8f99155880b5f1bdcd32e" translate="yes" xml:space="preserve">
          <source>func (s *DeclStmt) End() token.Pos</source>
          <target state="translated">func(s *DeclStmt)End()token.Pos</target>
        </trans-unit>
        <trans-unit id="992a2f45915cee1267039bc76e5963c5d5dc1af2" translate="yes" xml:space="preserve">
          <source>func (s *DeclStmt) Pos() token.Pos</source>
          <target state="translated">func(s *DeclStmt)Pos()token.Pos</target>
        </trans-unit>
        <trans-unit id="b861e64e9d0f2a172bbbbc8795d9ea9d078cf961" translate="yes" xml:space="preserve">
          <source>func (s *DeferStmt) End() token.Pos</source>
          <target state="translated">func(s *DeferStmt)End()token.Pos</target>
        </trans-unit>
        <trans-unit id="3bbbbdb5f2a1e51206bb6336ca5c5ad66620a9e4" translate="yes" xml:space="preserve">
          <source>func (s *DeferStmt) Pos() token.Pos</source>
          <target state="translated">func(s *DeferStmt)Pos()token.Pos</target>
        </trans-unit>
        <trans-unit id="4a1f012a0bb59437e1cb6f5672a11c30f92019c6" translate="yes" xml:space="preserve">
          <source>func (s *EmptyStmt) End() token.Pos</source>
          <target state="translated">func(s *EmptyStmt)End()token.Pos</target>
        </trans-unit>
        <trans-unit id="baa1d59b347f62d67692bfec230d6e6e30fec426" translate="yes" xml:space="preserve">
          <source>func (s *EmptyStmt) Pos() token.Pos</source>
          <target state="translated">func(s *EmptyStmt)Pos()token.Pos</target>
        </trans-unit>
        <trans-unit id="c317670bb295d5cd4968f07bde9895d6a91c9544" translate="yes" xml:space="preserve">
          <source>func (s *ExprStmt) End() token.Pos</source>
          <target state="translated">func (s *ExprStmt)End()token.Pos</target>
        </trans-unit>
        <trans-unit id="e283c439460616c662b24eabfaca652b0c9e5013" translate="yes" xml:space="preserve">
          <source>func (s *ExprStmt) Pos() token.Pos</source>
          <target state="translated">func(s *ExprStmt)Pos()token.Pos</target>
        </trans-unit>
        <trans-unit id="ebed5349774eb39f29d31ef302cdcf5ba8835886" translate="yes" xml:space="preserve">
          <source>func (s *FileSet) AddFile(filename string, base, size int) *File</source>
          <target state="translated">func (s *FileSet)AddFile(filename string,base,size int)*File</target>
        </trans-unit>
        <trans-unit id="c619a580612403762f62260a7a099ec0323a7591" translate="yes" xml:space="preserve">
          <source>func (s *FileSet) Base() int</source>
          <target state="translated">func (s *FileSet)Base()int</target>
        </trans-unit>
        <trans-unit id="95bc9fb0119d78df3c477593ac1b06792708e20d" translate="yes" xml:space="preserve">
          <source>func (s *FileSet) File(p Pos) (f *File)</source>
          <target state="translated">func (s *FileSet)File(p Pos)(f *File)</target>
        </trans-unit>
        <trans-unit id="42e097130ec9d65e0e0b83e0b389981ed16d40cd" translate="yes" xml:space="preserve">
          <source>func (s *FileSet) Iterate(f func(*File) bool)</source>
          <target state="translated">func (s *FileSet)Iterate(f func(*File)bool)</target>
        </trans-unit>
        <trans-unit id="f5b61a8a09cb7478b0f880bb93f8d5f657d844ca" translate="yes" xml:space="preserve">
          <source>func (s *FileSet) Position(p Pos) (pos Position)</source>
          <target state="translated">func (s *FileSet)Position(p Pos)(pos Position)</target>
        </trans-unit>
        <trans-unit id="7f82ec0a850dadad75d6b48ea8eb2ed317b29f1f" translate="yes" xml:space="preserve">
          <source>func (s *FileSet) PositionFor(p Pos, adjusted bool) (pos Position)</source>
          <target state="translated">func (s *FileSet)PositionFor(p Pos,bool ajustado)(pos Position)</target>
        </trans-unit>
        <trans-unit id="9b29b1a4a60ba234ed081c372159e6a6ecd9dde4" translate="yes" xml:space="preserve">
          <source>func (s *FileSet) Read(decode func(interface{}) error) error</source>
          <target state="translated">func (s *FileSet)Read(decode func(interface{})error)</target>
        </trans-unit>
        <trans-unit id="1ff65d64bb751a5fb58a17f82e40d719b9d0e064" translate="yes" xml:space="preserve">
          <source>func (s *FileSet) Write(encode func(interface{}) error) error</source>
          <target state="translated">func (s *FileSet)Write(encode func(interface{})error)error</target>
        </trans-unit>
        <trans-unit id="9b42b81ef93822245b9bd08f55e78ed9f38e3bd3" translate="yes" xml:space="preserve">
          <source>func (s *ForStmt) End() token.Pos</source>
          <target state="translated">func(s *ForStmt)End()token.Pos</target>
        </trans-unit>
        <trans-unit id="2a6f47d560ad9eaf891b8ec35fda2dce3a0724ec" translate="yes" xml:space="preserve">
          <source>func (s *ForStmt) Pos() token.Pos</source>
          <target state="translated">func(s *ForStmt)Pos()token.Pos</target>
        </trans-unit>
        <trans-unit id="13b014532589336184e32698e8cd7d8dcf6589c5" translate="yes" xml:space="preserve">
          <source>func (s *GoStmt) End() token.Pos</source>
          <target state="translated">func(s *GoStmt)End()token.Pos</target>
        </trans-unit>
        <trans-unit id="a490121d0018a607086fe20da838c7c6f9074cfa" translate="yes" xml:space="preserve">
          <source>func (s *GoStmt) Pos() token.Pos</source>
          <target state="translated">func(s *GoStmt)Pos()token.Pos</target>
        </trans-unit>
        <trans-unit id="95429d2fd410ff23cec5fd9854ea7f42628f46f8" translate="yes" xml:space="preserve">
          <source>func (s *IfStmt) End() token.Pos</source>
          <target state="translated">func(s *IfStmt)End()token.Pos</target>
        </trans-unit>
        <trans-unit id="724dd0dd947943155b694e1ee6b212ea5d204029" translate="yes" xml:space="preserve">
          <source>func (s *IfStmt) Pos() token.Pos</source>
          <target state="translated">func(s *IfStmt)Pos()token.Pos</target>
        </trans-unit>
        <trans-unit id="0147dd6c2794bef67dd5be7c17a106585b46f12b" translate="yes" xml:space="preserve">
          <source>func (s *ImportSpec) End() token.Pos</source>
          <target state="translated">func (s *ImportSpec)End()token.Pos</target>
        </trans-unit>
        <trans-unit id="a6ef6a0bc9ec061e565e206c6e8f431f01c0dd56" translate="yes" xml:space="preserve">
          <source>func (s *ImportSpec) Pos() token.Pos</source>
          <target state="translated">func (s *ImportSpec)Pos()token.Pos</target>
        </trans-unit>
        <trans-unit id="17d916c086ed4751bfc3271dac61626404293b51" translate="yes" xml:space="preserve">
          <source>func (s *IncDecStmt) End() token.Pos</source>
          <target state="translated">func(s *IncDecStmt)End()token.Pos</target>
        </trans-unit>
        <trans-unit id="ec1eb3cc8a6812e8f40fe7d9c68c07c297162929" translate="yes" xml:space="preserve">
          <source>func (s *IncDecStmt) Pos() token.Pos</source>
          <target state="translated">func(s *IncDecStmt)Pos()token.Pos</target>
        </trans-unit>
        <trans-unit id="74067ba2cfe6bac11c92c1031300dfb925687e9f" translate="yes" xml:space="preserve">
          <source>func (s *LabeledStmt) End() token.Pos</source>
          <target state="translated">func(s *LabeledStmt)End()token.Pos</target>
        </trans-unit>
        <trans-unit id="ffbb0e93dae6a720b2b2b73417842f7d0c7364a9" translate="yes" xml:space="preserve">
          <source>func (s *LabeledStmt) Pos() token.Pos</source>
          <target state="translated">func(s *LabeledStmt)Pos()token.Pos</target>
        </trans-unit>
        <trans-unit id="814f42ab57e1e631b0b9eeb1b10f7fdeaa3bd6fa" translate="yes" xml:space="preserve">
          <source>func (s *MethodSet) At(i int) *Selection</source>
          <target state="translated">func (s *MethodSet)At(i int)*Selectie</target>
        </trans-unit>
        <trans-unit id="bf88a4367f09338ca5d4f996536a605f7a8f3688" translate="yes" xml:space="preserve">
          <source>func (s *MethodSet) Len() int</source>
          <target state="translated">func (s *MethodSet)Len()int</target>
        </trans-unit>
        <trans-unit id="5b3496e4799589f20cfe26915b8e297434b29a0e" translate="yes" xml:space="preserve">
          <source>func (s *MethodSet) Lookup(pkg *Package, name string) *Selection</source>
          <target state="translated">func (s *MethodSet)Lookup (pkg *Package,name string)*Selection</target>
        </trans-unit>
        <trans-unit id="dbd780dbfe20d463681421140851874b89459130" translate="yes" xml:space="preserve">
          <source>func (s *MethodSet) String() string</source>
          <target state="translated">func (s *MethodSet)String()string</target>
        </trans-unit>
        <trans-unit id="0dde8edd644ee16e20cc67991ca3db4fc35ad106" translate="yes" xml:space="preserve">
          <source>func (s *RangeStmt) End() token.Pos</source>
          <target state="translated">func(s *RangeStmt)End()token.Pos</target>
        </trans-unit>
        <trans-unit id="15e09203ab3da1bb17d20b76116a5edf6b9ee74d" translate="yes" xml:space="preserve">
          <source>func (s *RangeStmt) Pos() token.Pos</source>
          <target state="translated">func(s *RangeStmt)Pos()token.Pos</target>
        </trans-unit>
        <trans-unit id="0a1f25534949eb3c5e33787cc545c31575677e2f" translate="yes" xml:space="preserve">
          <source>func (s *ReturnStmt) End() token.Pos</source>
          <target state="translated">func(s *ReturnStmt)End()token.Pos</target>
        </trans-unit>
        <trans-unit id="00e536d9678689f1998347d86a28019761f74bb5" translate="yes" xml:space="preserve">
          <source>func (s *ReturnStmt) Pos() token.Pos</source>
          <target state="translated">func (s *ReturnStmt)Pos()token.Pos</target>
        </trans-unit>
        <trans-unit id="ff2faba5afd792190c5b97c69d2aa4a5ff511741" translate="yes" xml:space="preserve">
          <source>func (s *Scanner) Buffer(buf []byte, max int)</source>
          <target state="translated">func (s *Scanner)Buffer (buf []byte,max int)</target>
        </trans-unit>
        <trans-unit id="4256c716320bdddb6b3094c4cbc800757215c086" translate="yes" xml:space="preserve">
          <source>func (s *Scanner) Bytes() []byte</source>
          <target state="translated">func (s *Scanner)Bytes()[]byte</target>
        </trans-unit>
        <trans-unit id="3d087dfe09d4c778f198041085394ca953e7ed6b" translate="yes" xml:space="preserve">
          <source>func (s *Scanner) Err() error</source>
          <target state="translated">func (s *Scanner)Err()fout</target>
        </trans-unit>
        <trans-unit id="e2443b9e786fe191e95d7a44f0f7dbf60f00d1c3" translate="yes" xml:space="preserve">
          <source>func (s *Scanner) Init(file *token.File, src []byte, err ErrorHandler, mode Mode)</source>
          <target state="translated">func (s *Scanner)Init (bestand *token.File,src []byte,err ErrorHandler,mode)</target>
        </trans-unit>
        <trans-unit id="2e3448f25f61eee4f32d85e6e2108a92468a6b49" translate="yes" xml:space="preserve">
          <source>func (s *Scanner) Init(src io.Reader) *Scanner</source>
          <target state="translated">func (s *Scanner)Init(src io.Reader)*Scanner</target>
        </trans-unit>
        <trans-unit id="fb1fa2826ccfe50c306f7cbf00344fb7dae04cfa" translate="yes" xml:space="preserve">
          <source>func (s *Scanner) Next() rune</source>
          <target state="translated">func (s *Scanner)Next()rune</target>
        </trans-unit>
        <trans-unit id="a765ebfb39ea57154e82e6905539bce4930a9f6b" translate="yes" xml:space="preserve">
          <source>func (s *Scanner) Peek() rune</source>
          <target state="translated">func (s *Scanner)Peek()rune</target>
        </trans-unit>
        <trans-unit id="7851d3a8f1e45f461f784fad018ee19ee2d34928" translate="yes" xml:space="preserve">
          <source>func (s *Scanner) Pos() (pos Position)</source>
          <target state="translated">func (s *Scanner)Pos()(pos Positie)</target>
        </trans-unit>
        <trans-unit id="93bef72e1fc15d872ffce967db4d091da170348c" translate="yes" xml:space="preserve">
          <source>func (s *Scanner) Scan() (pos token.Pos, tok token.Token, lit string)</source>
          <target state="translated">func (s *Scanner)Scan()(pos token.Pos,tok token.Token,lit string)</target>
        </trans-unit>
        <trans-unit id="598d997c987e0d97e07d06ff3dbb70c6f58f854d" translate="yes" xml:space="preserve">
          <source>func (s *Scanner) Scan() bool</source>
          <target state="translated">func(s *Scanner)Scan()bool</target>
        </trans-unit>
        <trans-unit id="d25f3c21a2b8bb12eee8ecfb12298683fa39130b" translate="yes" xml:space="preserve">
          <source>func (s *Scanner) Scan() rune</source>
          <target state="translated">func(s *Scanner)Scan()rune</target>
        </trans-unit>
        <trans-unit id="29c59815f3c0973f8a359580f07d76661220cb1a" translate="yes" xml:space="preserve">
          <source>func (s *Scanner) Split(split SplitFunc)</source>
          <target state="translated">func(s *Scanner)Split(split SplitFunc)</target>
        </trans-unit>
        <trans-unit id="8548269e1304850f105b0856cfd731482d001fe7" translate="yes" xml:space="preserve">
          <source>func (s *Scanner) Text() string</source>
          <target state="translated">func (s *Scanner)Tekst()string</target>
        </trans-unit>
        <trans-unit id="9128245d17f083ff722f5dd2eb01c8d679e1cd03" translate="yes" xml:space="preserve">
          <source>func (s *Scanner) TokenText() string</source>
          <target state="translated">func (s *Scanner)TokenText()string</target>
        </trans-unit>
        <trans-unit id="9ba6d515802aacad7c4d9c17859c8c1ec76cf7a6" translate="yes" xml:space="preserve">
          <source>func (s *Scope) Child(i int) *Scope</source>
          <target state="translated">func (s *Scope)Kind(i int)*Scope</target>
        </trans-unit>
        <trans-unit id="8c535300d781da030d96c14e4f45a3f9eb0f597d" translate="yes" xml:space="preserve">
          <source>func (s *Scope) Contains(pos token.Pos) bool</source>
          <target state="translated">func (s *Scope)Bevat (pos token.Pos)bool</target>
        </trans-unit>
        <trans-unit id="107e87909c02fef70c1d0835d79ae922f5e88fb5" translate="yes" xml:space="preserve">
          <source>func (s *Scope) End() token.Pos</source>
          <target state="translated">func(s *Scope)End()token.Pos</target>
        </trans-unit>
        <trans-unit id="118dd6b9ae5534d89064837326e6a6352007c61a" translate="yes" xml:space="preserve">
          <source>func (s *Scope) Innermost(pos token.Pos) *Scope</source>
          <target state="translated">func(s *Scope)Innermost(pos token.Pos)*Scope</target>
        </trans-unit>
        <trans-unit id="f3ee6aaca3abd1a8b94a4ff80a05d15ac8a45268" translate="yes" xml:space="preserve">
          <source>func (s *Scope) Insert(obj *Object) (alt *Object)</source>
          <target state="translated">func (s *Scope)Invoegen (obj *Object)(alt *Object)</target>
        </trans-unit>
        <trans-unit id="e2ca27dee9588f9063a7ede8db1fbce2b2816043" translate="yes" xml:space="preserve">
          <source>func (s *Scope) Insert(obj Object) Object</source>
          <target state="translated">func (s *Scope)Invoegen (obj Object)Object</target>
        </trans-unit>
        <trans-unit id="c138642de63ef7a2fe258f3401e8875c3a62ba1a" translate="yes" xml:space="preserve">
          <source>func (s *Scope) Len() int</source>
          <target state="translated">func (s *Scope)Len()int</target>
        </trans-unit>
        <trans-unit id="adc8bd3f90e0a15c5f4531fd9dc841ef3535b40f" translate="yes" xml:space="preserve">
          <source>func (s *Scope) Lookup(name string) *Object</source>
          <target state="translated">func (s *Scope)Lookup (naamstring)*Object</target>
        </trans-unit>
        <trans-unit id="ff35977b05859cb4d257f66091ae013767da2d4e" translate="yes" xml:space="preserve">
          <source>func (s *Scope) Lookup(name string) Object</source>
          <target state="translated">func (s *Scope)Lookup(name string)Object</target>
        </trans-unit>
        <trans-unit id="5cb45982523d1a1a93fd6552c7b6ca7925263b2f" translate="yes" xml:space="preserve">
          <source>func (s *Scope) LookupParent(name string, pos token.Pos) (*Scope, Object)</source>
          <target state="translated">func (s *Scope)LookupParent(name string,pos token.Pos)(*Scope,Object)</target>
        </trans-unit>
        <trans-unit id="e4431c2cd8ca9fc783f4cf94bc05d6238ff43bad" translate="yes" xml:space="preserve">
          <source>func (s *Scope) Names() []string</source>
          <target state="translated">func (s *Scope)Names()[]string</target>
        </trans-unit>
        <trans-unit id="c3cf7007c9aae58ca10e6e04fd4dad0ecc025b9b" translate="yes" xml:space="preserve">
          <source>func (s *Scope) NumChildren() int</source>
          <target state="translated">func (s *Scope)NumChildren()int</target>
        </trans-unit>
        <trans-unit id="a745360a580340e756684d944ac0d61d5ce609d3" translate="yes" xml:space="preserve">
          <source>func (s *Scope) Parent() *Scope</source>
          <target state="translated">func (s *Scope)Parent()*Scope</target>
        </trans-unit>
        <trans-unit id="db4f05c139c0b08d5b2f11c8e244634c353d2320" translate="yes" xml:space="preserve">
          <source>func (s *Scope) Pos() token.Pos</source>
          <target state="translated">func(s *Scope)Pos()token.Pos</target>
        </trans-unit>
        <trans-unit id="5a157b682f800fa4d38b5835a6cf6cb0a257d813" translate="yes" xml:space="preserve">
          <source>func (s *Scope) String() string</source>
          <target state="translated">func(s *Scope)String()string</target>
        </trans-unit>
        <trans-unit id="ee881595f1794ffbbe778b2225f10fc831cee634" translate="yes" xml:space="preserve">
          <source>func (s *Scope) WriteTo(w io.Writer, n int, recurse bool)</source>
          <target state="translated">func (s *Scope)WriteTo(w io.Writer,n int,recurse bool)</target>
        </trans-unit>
        <trans-unit id="cb4fdd5fc9dbc4aaba8239beba24d730bf0dcbd9" translate="yes" xml:space="preserve">
          <source>func (s *Section) Data() ([]byte, error)</source>
          <target state="translated">func (s *Sección)Data()([]byte,error)</target>
        </trans-unit>
        <trans-unit id="b70e3137c32056c37b6a2a298cec0691d5c5e7cc" translate="yes" xml:space="preserve">
          <source>func (s *Section) Open() io.ReadSeeker</source>
          <target state="translated">func (s *Sección)Open()io.ReadSeeker</target>
        </trans-unit>
        <trans-unit id="b4a271597ed917ebca113c7dc50b452d9b02f7d9" translate="yes" xml:space="preserve">
          <source>func (s *SectionReader) Read(p []byte) (n int, err error)</source>
          <target state="translated">func (s *SectionReader)Read(p []byte)(n int,err error)</target>
        </trans-unit>
        <trans-unit id="1b3e31dbbc3c1e27ac5c4c63087d163bb0518c4e" translate="yes" xml:space="preserve">
          <source>func (s *SectionReader) ReadAt(p []byte, off int64) (n int, err error)</source>
          <target state="translated">func (s *SectionReader)ReadAt(p []byte,off int64)(n int,err error)</target>
        </trans-unit>
        <trans-unit id="807a8e2e7b46405d059cf7cd0790cc875729ad47" translate="yes" xml:space="preserve">
          <source>func (s *SectionReader) Seek(offset int64, whence int) (int64, error)</source>
          <target state="translated">func (s *SectionReader)Seek(offset int64,whence int)(int64,error)</target>
        </trans-unit>
        <trans-unit id="8a7f9a9c7634e38dfd28b85d187c3235e9b64a94" translate="yes" xml:space="preserve">
          <source>func (s *SectionReader) Size() int64</source>
          <target state="translated">func (s *SectionReader)Size()int64</target>
        </trans-unit>
        <trans-unit id="3c04d5edb15164f244381bac1955e55b4438f5f4" translate="yes" xml:space="preserve">
          <source>func (s *Segment) Data() ([]byte, error)</source>
          <target state="translated">func (s *Segmento)Data()([]byte,error)</target>
        </trans-unit>
        <trans-unit id="965eb2d2c979b8ffb8dc11b0841fb3710ddaa07f" translate="yes" xml:space="preserve">
          <source>func (s *Segment) Open() io.ReadSeeker</source>
          <target state="translated">func (s *Segmento)Open()io.ReadSeeker</target>
        </trans-unit>
        <trans-unit id="661b19cf89597084f105be51ae663556987f6835" translate="yes" xml:space="preserve">
          <source>func (s *SelectStmt) End() token.Pos</source>
          <target state="translated">func(s *SelectStmt)End()token.Pos</target>
        </trans-unit>
        <trans-unit id="8ba79958bd6517f41de6c9358eed831007fb2112" translate="yes" xml:space="preserve">
          <source>func (s *SelectStmt) Pos() token.Pos</source>
          <target state="translated">func(s *SelectStmt)Pos()token.Pos</target>
        </trans-unit>
        <trans-unit id="910dd7a786cf2fa35c19c45bd5c8a83488a4924a" translate="yes" xml:space="preserve">
          <source>func (s *Selection) Index() []int</source>
          <target state="translated">func (s *Selección)Índice()[]int</target>
        </trans-unit>
        <trans-unit id="6b1dda8934ee23cd2df90587ade86aa27193b3b5" translate="yes" xml:space="preserve">
          <source>func (s *Selection) Indirect() bool</source>
          <target state="translated">func (s *Selección)Indirecta()bool</target>
        </trans-unit>
        <trans-unit id="490f37e7cba798441ebadcbae5207158c8c20d4f" translate="yes" xml:space="preserve">
          <source>func (s *Selection) Kind() SelectionKind</source>
          <target state="translated">func (s *Selección)Clase()SelecciónClase</target>
        </trans-unit>
        <trans-unit id="1bbd374381c27271852dd346b2a6bf9c2f3b0c5c" translate="yes" xml:space="preserve">
          <source>func (s *Selection) Obj() Object</source>
          <target state="translated">func (s *Selección)Obj()Objeto</target>
        </trans-unit>
        <trans-unit id="3626854d83fe78317cbec865c5e413fc015628e6" translate="yes" xml:space="preserve">
          <source>func (s *Selection) Recv() Type</source>
          <target state="translated">func (s *Selección)Recv()Tipo</target>
        </trans-unit>
        <trans-unit id="8061a5ae66d6debe715acb86da1973295f06497c" translate="yes" xml:space="preserve">
          <source>func (s *Selection) String() string</source>
          <target state="translated">func (s *Selección)String()string</target>
        </trans-unit>
        <trans-unit id="944aeed7f2a50d933985007b46874c0b3c2ba8d3" translate="yes" xml:space="preserve">
          <source>func (s *Selection) Type() Type</source>
          <target state="translated">func (s *Selección)Tipo()Tipo</target>
        </trans-unit>
        <trans-unit id="759ef3f725f8b995cde5170f0ea0f59fd14cb106" translate="yes" xml:space="preserve">
          <source>func (s *SendStmt) End() token.Pos</source>
          <target state="translated">func(s *SendStmt)End()token.Pos</target>
        </trans-unit>
        <trans-unit id="fa5970ea53a067202f26a48c83539f997a109707" translate="yes" xml:space="preserve">
          <source>func (s *SendStmt) Pos() token.Pos</source>
          <target state="translated">func(s *SendStmt)Pos()token.Pos</target>
        </trans-unit>
        <trans-unit id="5bf51776c03f6bea259526c8b4299291328e249e" translate="yes" xml:space="preserve">
          <source>func (s *Server) Certificate() *x509.Certificate</source>
          <target state="translated">func (s *Servidor)Certificado()*x509.Certificado</target>
        </trans-unit>
        <trans-unit id="a05f4f9ce5d39dd996584a9c1940680dfb1de1e1" translate="yes" xml:space="preserve">
          <source>func (s *Server) Client() *http.Client</source>
          <target state="translated">func (s *Servidor)Cliente()*http.Cliente</target>
        </trans-unit>
        <trans-unit id="9516775a9e932669782e793a89400e2582ab33ea" translate="yes" xml:space="preserve">
          <source>func (s *Server) Close()</source>
          <target state="translated">func (s *Server)Close()</target>
        </trans-unit>
        <trans-unit id="80cc42f4ec36f60aed747d6547fc91d388236c0d" translate="yes" xml:space="preserve">
          <source>func (s *Server) CloseClientConnections()</source>
          <target state="translated">func (s *Servidor)CloseClientConnections()</target>
        </trans-unit>
        <trans-unit id="af7d09e22f6e3603b70bf7806dc26fa58bb42f11" translate="yes" xml:space="preserve">
          <source>func (s *Server) Start()</source>
          <target state="translated">func (s *Server)Start()</target>
        </trans-unit>
        <trans-unit id="170161aeb278530d9e180f39433b84445299b9ea" translate="yes" xml:space="preserve">
          <source>func (s *Server) StartTLS()</source>
          <target state="translated">func (s *Server)StartTLS()</target>
        </trans-unit>
        <trans-unit id="43bc2b876f254a590aa020efa283c34313a49629" translate="yes" xml:space="preserve">
          <source>func (s *Signature) Params() *Tuple</source>
          <target state="translated">func (s *Firma)Params()*Tuple</target>
        </trans-unit>
        <trans-unit id="8e00cde63a54ef9e4575a698ff4550e6ba8964b2" translate="yes" xml:space="preserve">
          <source>func (s *Signature) Recv() *Var</source>
          <target state="translated">func (s *Firma)Recv()*Var</target>
        </trans-unit>
        <trans-unit id="a2b7a8e1b465cc1a663e827290141b88c06af0ad" translate="yes" xml:space="preserve">
          <source>func (s *Signature) Results() *Tuple</source>
          <target state="translated">func (s *Firma)Resultados()*Tuple</target>
        </trans-unit>
        <trans-unit id="0fd2b2c812f4e8f20311a6cb0ec1aa2c98c8ddde" translate="yes" xml:space="preserve">
          <source>func (s *Signature) String() string</source>
          <target state="translated">func (s *Firma)String()string</target>
        </trans-unit>
        <trans-unit id="8af6e5d46a272ff1ae1e20b5f251bc908b1b5896" translate="yes" xml:space="preserve">
          <source>func (s *Signature) Underlying() Type</source>
          <target state="translated">func (s *Firma)Subyacente()Tipo</target>
        </trans-unit>
        <trans-unit id="68afa0c1d57f7b3b5c9d0e3ee0704b16ba22e7b0" translate="yes" xml:space="preserve">
          <source>func (s *Signature) Variadic() bool</source>
          <target state="translated">func (s *Firma)Variadic()bool</target>
        </trans-unit>
        <trans-unit id="dcbba31cd2ce6fcdcac714da569cc051c8ff834f" translate="yes" xml:space="preserve">
          <source>func (s *Slice) Elem() Type</source>
          <target state="translated">func (s *Slice)Elem()Type</target>
        </trans-unit>
        <trans-unit id="d9f7e58f3f32ac76cf501e00b2be5696bc3c2641" translate="yes" xml:space="preserve">
          <source>func (s *Slice) String() string</source>
          <target state="translated">func (s *Slice)String()string</target>
        </trans-unit>
        <trans-unit id="0295e19a6617d567001144344a63086f87c221fa" translate="yes" xml:space="preserve">
          <source>func (s *Slice) Underlying() Type</source>
          <target state="translated">func (s *Corte)Subyacente()Tipo</target>
        </trans-unit>
        <trans-unit id="34e4885284d68b2a7b5679328396900098b864b3" translate="yes" xml:space="preserve">
          <source>func (s *StdSizes) Alignof(T Type) int64</source>
          <target state="translated">func (s *StdSizes)Alignof(T Type)int64</target>
        </trans-unit>
        <trans-unit id="85d58e53f6e6894ca499e45aa60db4655db2d49e" translate="yes" xml:space="preserve">
          <source>func (s *StdSizes) Offsetsof(fields []*Var) []int64</source>
          <target state="translated">func (s *StdSizes)Offsetsof(fields []*Var)[]int64</target>
        </trans-unit>
        <trans-unit id="2f3b1413f3df2723e162d8fc42e5066d3992791d" translate="yes" xml:space="preserve">
          <source>func (s *StdSizes) Sizeof(T Type) int64</source>
          <target state="translated">func (s *StdSizes)Sizeof(T Type)int64</target>
        </trans-unit>
        <trans-unit id="e54932cd6271704587c4089032e5044cdc19beef" translate="yes" xml:space="preserve">
          <source>func (s *Stmt) Close() error</source>
          <target state="translated">func (s *Stmt)Close()error</target>
        </trans-unit>
        <trans-unit id="2c05bb44e01eb6eb12ae68429f8e6d7244bf7891" translate="yes" xml:space="preserve">
          <source>func (s *Stmt) Exec(args ...interface{}) (Result, error)</source>
          <target state="translated">func (s *Stmt)Exec(args ...interface{})(Resultado,error)</target>
        </trans-unit>
        <trans-unit id="a9fd8d66324c8c6c361be744bd10fb47a3864ac4" translate="yes" xml:space="preserve">
          <source>func (s *Stmt) ExecContext(ctx context.Context, args ...interface{}) (Result, error)</source>
          <target state="translated">func (s *Stmt)ExecContext(ctx context.Contexto,args ...interface{})(Resultado,error)</target>
        </trans-unit>
        <trans-unit id="5c3b111cb60a1d73938339ce5cac9ade229ff849" translate="yes" xml:space="preserve">
          <source>func (s *Stmt) Query(args ...interface{}) (*Rows, error)</source>
          <target state="translated">func (s *Stmt)Query(args ...interface{})(*Rows,error)</target>
        </trans-unit>
        <trans-unit id="3494204ba02128815155e92f970df2ad4b6390f9" translate="yes" xml:space="preserve">
          <source>func (s *Stmt) QueryContext(ctx context.Context, args ...interface{}) (*Rows, error)</source>
          <target state="translated">func (s *Stmt)QueryContext(ctx context.Contexto,args ...interface{})(*Filas,error)</target>
        </trans-unit>
        <trans-unit id="f83bdb1d8928dd77ae10774b4345dc5e9ca84fd2" translate="yes" xml:space="preserve">
          <source>func (s *Stmt) QueryRow(args ...interface{}) *Row</source>
          <target state="translated">func (s *Stmt)QueryRow(args ...interface{})*Row</target>
        </trans-unit>
        <trans-unit id="3f65a79977b0eef4d322147cdd2c417bb803071f" translate="yes" xml:space="preserve">
          <source>func (s *Stmt) QueryRowContext(ctx context.Context, args ...interface{}) *Row</source>
          <target state="translated">func (s *Stmt)QueryRowContext(ctx context.Context,args ...interface{})*Row</target>
        </trans-unit>
        <trans-unit id="13a4c368d4c72891f3f2d38409dbc4b9865fd99b" translate="yes" xml:space="preserve">
          <source>func (s *StringNode) Copy() Node</source>
          <target state="translated">func (s *StringNode)Copy()Node</target>
        </trans-unit>
        <trans-unit id="d8bc13a4c046c98ca7bbf03eda13ff6c06250382" translate="yes" xml:space="preserve">
          <source>func (s *StringNode) String() string</source>
          <target state="translated">func (s *StringNode)String()string</target>
        </trans-unit>
        <trans-unit id="a3cca7d11b6418398a21aa9dc7287e44a8c209ef" translate="yes" xml:space="preserve">
          <source>func (s *Struct) Field(i int) *Var</source>
          <target state="translated">func (s *Struct)Field(i int)*Var</target>
        </trans-unit>
        <trans-unit id="a037b538147beb845fbb434bfee694b050fa4d2f" translate="yes" xml:space="preserve">
          <source>func (s *Struct) NumFields() int</source>
          <target state="translated">func (s *Struct)NumFields()int</target>
        </trans-unit>
        <trans-unit id="d28e6d1772fcc1078eac75701497599da61230ed" translate="yes" xml:space="preserve">
          <source>func (s *Struct) String() string</source>
          <target state="translated">func (s *Struct)String()string</target>
        </trans-unit>
        <trans-unit id="ab967e308e61394e52a83f14064d9790117e170d" translate="yes" xml:space="preserve">
          <source>func (s *Struct) Tag(i int) string</source>
          <target state="translated">func (s *Struct)Tag(i int)string</target>
        </trans-unit>
        <trans-unit id="8bb28afd824db1fb1df02dd33221a83cbebf1c37" translate="yes" xml:space="preserve">
          <source>func (s *Struct) Underlying() Type</source>
          <target state="translated">func (s *Structura)Subyacente()Tipo</target>
        </trans-unit>
        <trans-unit id="f35724e4cc13fbe70e8e5a21f993a6bad7690ea9" translate="yes" xml:space="preserve">
          <source>func (s *SwitchStmt) End() token.Pos</source>
          <target state="translated">func (s *SwitchStmt)End()token.Pos</target>
        </trans-unit>
        <trans-unit id="02a5eb6fcfce8a3e19809c28417de02ad8b1eafd" translate="yes" xml:space="preserve">
          <source>func (s *SwitchStmt) Pos() token.Pos</source>
          <target state="translated">func (s *SwitchStmt)Pos()token.Pos</target>
        </trans-unit>
        <trans-unit id="1cba841131d67c353702df5b1782a4b6c967b4f5" translate="yes" xml:space="preserve">
          <source>func (s *Sym) BaseName() string</source>
          <target state="translated">func (s *Sym)BaseName()string</target>
        </trans-unit>
        <trans-unit id="c92ced76b16eb22b13b5d2db1bab3d5c76ebe666" translate="yes" xml:space="preserve">
          <source>func (s *Sym) PackageName() string</source>
          <target state="translated">func (s *Sym)PackageName()string</target>
        </trans-unit>
        <trans-unit id="fb14e41bfb5cf1b5c630b32f8bd2bf3280c9cb39" translate="yes" xml:space="preserve">
          <source>func (s *Sym) ReceiverName() string</source>
          <target state="translated">func (s *Sym)ReceiverName()string</target>
        </trans-unit>
        <trans-unit id="e2f438a0441249ef8979719acbd72cfd283c0d66" translate="yes" xml:space="preserve">
          <source>func (s *Sym) Static() bool</source>
          <target state="translated">func (s *Sym)Static()bool</target>
        </trans-unit>
        <trans-unit id="597b42e1457954523045b5b8ef9ca8d45314f2a7" translate="yes" xml:space="preserve">
          <source>func (s *TypeSpec) End() token.Pos</source>
          <target state="translated">func(s *TypeSpec)End()token.Pos</target>
        </trans-unit>
        <trans-unit id="40d09f876359b79b33efb84b260dbece9ed1ed7a" translate="yes" xml:space="preserve">
          <source>func (s *TypeSpec) Pos() token.Pos</source>
          <target state="translated">func(s *TypeSpec)Pos()token.Pos</target>
        </trans-unit>
        <trans-unit id="e063a31e50df833dab5a5b25dd57b7d91c5d2536" translate="yes" xml:space="preserve">
          <source>func (s *TypeSwitchStmt) End() token.Pos</source>
          <target state="translated">func (s *TypeSwitchStmt)End()token.Pos</target>
        </trans-unit>
        <trans-unit id="4da63dff666f390585a19cfb801525ef2568f323" translate="yes" xml:space="preserve">
          <source>func (s *TypeSwitchStmt) Pos() token.Pos</source>
          <target state="translated">func (s *TypeSwitchStmt)Pos()token.Pos</target>
        </trans-unit>
        <trans-unit id="808395ad08fdf5dfe57bc270f96eb73b949f3eeb" translate="yes" xml:space="preserve">
          <source>func (s *ValueSpec) End() token.Pos</source>
          <target state="translated">func(s *ValueSpec)End()token.Pos</target>
        </trans-unit>
        <trans-unit id="dd74c4545d95eb1da560a6347f086411a7195e3f" translate="yes" xml:space="preserve">
          <source>func (s *ValueSpec) Pos() token.Pos</source>
          <target state="translated">func(s *ValueSpec)Pos()token.Pos</target>
        </trans-unit>
        <trans-unit id="a7159bcc05d90cdf7499a32cf28acde88c3240f0" translate="yes" xml:space="preserve">
          <source>func (s SetupError) Error() string</source>
          <target state="translated">func (s SetupError)Error()string</target>
        </trans-unit>
        <trans-unit id="5e61ffc8bd19f1e8b08b39faeacb31be03d8ab4b" translate="yes" xml:space="preserve">
          <source>func (s Signal) Signal()</source>
          <target state="translated">func (s Señal)Señal()</target>
        </trans-unit>
        <trans-unit id="e6555da15f990002cf4cbd10966b62bcfe25479c" translate="yes" xml:space="preserve">
          <source>func (s Signal) String() string</source>
          <target state="translated">func (s Signal)String()string</target>
        </trans-unit>
        <trans-unit id="56032feff25be457ab204550cf4aedf786706bdf" translate="yes" xml:space="preserve">
          <source>func (s StructuralError) Error() string</source>
          <target state="translated">func (s StructuralError)Error()string</target>
        </trans-unit>
        <trans-unit id="631d2ac76f45dc9965f2f82a72cf77b37e0b8c82" translate="yes" xml:space="preserve">
          <source>func (s YCbCrSubsampleRatio) String() string</source>
          <target state="translated">func (s YCbCrSubmuestreoRatio)String()string</target>
        </trans-unit>
        <trans-unit id="a577e0e8eb4eff828c33a431ee9599ed7374be55" translate="yes" xml:space="preserve">
          <source>func (sc *ServerConn) Close() error</source>
          <target state="translated">func (sc *ServerConn)Close()error</target>
        </trans-unit>
        <trans-unit id="e006de99bae35844da7dbeb3edd76b6c6f5524f8" translate="yes" xml:space="preserve">
          <source>func (sc *ServerConn) Hijack() (net.Conn, *bufio.Reader)</source>
          <target state="translated">func (sc *ServerConn)Hijack()(net.Conn,*bufio.Reader)</target>
        </trans-unit>
        <trans-unit id="e6253ead05e3ce1a136a1789eb6915766c5815ef" translate="yes" xml:space="preserve">
          <source>func (sc *ServerConn) Pending() int</source>
          <target state="translated">func (sc *ServerConn)Pendiente()int</target>
        </trans-unit>
        <trans-unit id="c6ab5ce3274873d3442a8a0a57dea300f5683c56" translate="yes" xml:space="preserve">
          <source>func (sc *ServerConn) Read() (*http.Request, error)</source>
          <target state="translated">func (sc *ServerConn)Read()(*http.Request,error)</target>
        </trans-unit>
        <trans-unit id="ff253cb3bae0e2699c9e33ba3b5af2360155d16e" translate="yes" xml:space="preserve">
          <source>func (sc *ServerConn) Write(req *http.Request, resp *http.Response) error</source>
          <target state="translated">func (sc *ServerConn)Write(req *http.Request,resp *http.Response)error</target>
        </trans-unit>
        <trans-unit id="dea7a1b9dacfbd89dafa9ee0f60b9df059ca0156" translate="yes" xml:space="preserve">
          <source>func (se SystemRootsError) Error() string</source>
          <target state="translated">func (se SystemRootsError)Error()string</target>
        </trans-unit>
        <trans-unit id="3d0a6f9b04f857932995626ef2717fa411684ed6" translate="yes" xml:space="preserve">
          <source>func (se SystemRootsError) Unwrap() error</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6e7470d29c644dbd010579fc443ecd1dd7fa0d45" translate="yes" xml:space="preserve">
          <source>func (server *Server) Accept(lis net.Listener)</source>
          <target state="translated">func (servidor *Servidor)Accept(lis net.Listener)</target>
        </trans-unit>
        <trans-unit id="ca9fc6cf5c8fe3b40d4871e6592dc0d851b31c7a" translate="yes" xml:space="preserve">
          <source>func (server *Server) HandleHTTP(rpcPath, debugPath string)</source>
          <target state="translated">func (servidor *Servidor)HandleHTTP(rpcPath,debugPath string)</target>
        </trans-unit>
        <trans-unit id="ca30d0d7f3baf1f08ce0bad647e09dc7ad29ad32" translate="yes" xml:space="preserve">
          <source>func (server *Server) Register(rcvr interface{}) error</source>
          <target state="translated">func (servidor *Servidor)Register(rcvr interface{})error</target>
        </trans-unit>
        <trans-unit id="20d9ac34d3b4591356d88c213e4df740680c3d97" translate="yes" xml:space="preserve">
          <source>func (server *Server) RegisterName(name string, rcvr interface{}) error</source>
          <target state="translated">func (servidor *Servidor)RegisterName(cadena de nombre,interfaz rcvr{})error</target>
        </trans-unit>
        <trans-unit id="e513a5585cf550da9baa6c848eebd27996ffa770" translate="yes" xml:space="preserve">
          <source>func (server *Server) ServeCodec(codec ServerCodec)</source>
          <target state="translated">func (servidor *Servidor)ServeCodec(codec ServerCodec)</target>
        </trans-unit>
        <trans-unit id="8ab0ce7cc1bd87f96dbf38daac1a29378903f1b3" translate="yes" xml:space="preserve">
          <source>func (server *Server) ServeConn(conn io.ReadWriteCloser)</source>
          <target state="translated">func (servidor *Servidor)ServeConn(conn io.ReadWriteCloser)</target>
        </trans-unit>
        <trans-unit id="77e5b018b10e5cfa8dc6170a3872eb0417558e49" translate="yes" xml:space="preserve">
          <source>func (server *Server) ServeHTTP(w http.ResponseWriter, req *http.Request)</source>
          <target state="translated">func (servidor *Servidor)ServeHTTP(w http.ResponseWriter,req *http.Request)</target>
        </trans-unit>
        <trans-unit id="65ba96e0404e164c5268ca0e30881ae561ea6a42" translate="yes" xml:space="preserve">
          <source>func (server *Server) ServeRequest(codec ServerCodec) error</source>
          <target state="translated">func (server *Server)ServeRequest(codec ServerCodec)error</target>
        </trans-unit>
        <trans-unit id="b8dca19bd5c08e24f6ad0bcc6fd8ccdf39c4c74b" translate="yes" xml:space="preserve">
          <source>func (special SpecialCase) ToLower(r rune) rune</source>
          <target state="translated">func (specialCase)ToLower(r rune)rune</target>
        </trans-unit>
        <trans-unit id="462e8521451e06f4f8cc70bd0b03a4b80c22e564" translate="yes" xml:space="preserve">
          <source>func (special SpecialCase) ToTitle(r rune) rune</source>
          <target state="translated">func (specialCase)ToTitle(r rune)rune</target>
        </trans-unit>
        <trans-unit id="bdd811e69e7ff6f82ee05658125f459d424a959a" translate="yes" xml:space="preserve">
          <source>func (special SpecialCase) ToUpper(r rune) rune</source>
          <target state="translated">func (specialCase)ToUpper(r rune)rune</target>
        </trans-unit>
        <trans-unit id="4e77322643219862c25b1d04e6198af8e75bca74" translate="yes" xml:space="preserve">
          <source>func (srv *Server) Close() error</source>
          <target state="translated">func (srv *Server)Close()error</target>
        </trans-unit>
        <trans-unit id="ff755ef4ecfa09a11125a24e2900fd3fddd45a7d" translate="yes" xml:space="preserve">
          <source>func (srv *Server) ListenAndServe() error</source>
          <target state="translated">func (srv *Server)ListenAndServe()error</target>
        </trans-unit>
        <trans-unit id="73bd16efdb7ebf42da1ae44ad4da77e49c81221e" translate="yes" xml:space="preserve">
          <source>func (srv *Server) ListenAndServeTLS(certFile, keyFile string) error</source>
          <target state="translated">func (srv *Server)ListenAndServeTLS(certFile,keyFile string)error</target>
        </trans-unit>
        <trans-unit id="be9111f9c466babd1657f2b875e044adc560db70" translate="yes" xml:space="preserve">
          <source>func (srv *Server) RegisterOnShutdown(f func())</source>
          <target state="translated">func (srv *Server)RegisterOnShutdown(f func())</target>
        </trans-unit>
        <trans-unit id="8ff5238d109105f91b11c87960b988ae4883978b" translate="yes" xml:space="preserve">
          <source>func (srv *Server) Serve(l net.Listener) error</source>
          <target state="translated">func (srv *server)Serve(l net.Listener)error</target>
        </trans-unit>
        <trans-unit id="9536f3703ec3db75aeda652b5c5feea068fd0623" translate="yes" xml:space="preserve">
          <source>func (srv *Server) ServeTLS(l net.Listener, certFile, keyFile string) error</source>
          <target state="translated">func (srv *Server)ServeTLS(l net.Listener,certFile,keyFile string)error</target>
        </trans-unit>
        <trans-unit id="e538f45ad9f7bab17a704f3646d2db9795ed706a" translate="yes" xml:space="preserve">
          <source>func (srv *Server) SetKeepAlivesEnabled(v bool)</source>
          <target state="translated">func (srv *Server)SetKeepAlivesEnabled(v bool)</target>
        </trans-unit>
        <trans-unit id="0964428e9f7c66ec5b0f3be7845d5485de8bd907" translate="yes" xml:space="preserve">
          <source>func (srv *Server) Shutdown(ctx context.Context) error</source>
          <target state="translated">func (srv *Server)Shutdown(ctx context.Context)error</target>
        </trans-unit>
        <trans-unit id="b20c2bc2515e7e98ee6466641a6f1155ba5d1274" translate="yes" xml:space="preserve">
          <source>func (st StringTable) String(start uint32) (string, error)</source>
          <target state="translated">func (st StringTable)String(start uint32)(string,error)</target>
        </trans-unit>
        <trans-unit id="99be80b6a27090a34eb584801e1a499c867e9def" translate="yes" xml:space="preserve">
          <source>func (sym *COFFSymbol) FullName(st StringTable) (string, error)</source>
          <target state="translated">func (sym *COFFSymbol)FullName(st StringTable)(string,error)</target>
        </trans-unit>
        <trans-unit id="d868189ffd28b0013d827013416816fd0729cfc6" translate="yes" xml:space="preserve">
          <source>func (t *ArrayType) Size() int64</source>
          <target state="translated">func (t *ArrayType)Size()int64</target>
        </trans-unit>
        <trans-unit id="588f3270d3a2fdaf5fab8527606f0c08f6d7bf28" translate="yes" xml:space="preserve">
          <source>func (t *ArrayType) String() string</source>
          <target state="translated">func (t *ArrayType)String()string</target>
        </trans-unit>
        <trans-unit id="89b22d1e1bd4f7564978400f31fa994545a395f2" translate="yes" xml:space="preserve">
          <source>func (t *BasicType) String() string</source>
          <target state="translated">func (t *BasicType)String()string</target>
        </trans-unit>
        <trans-unit id="b9f8b79e3a88d1ae7b58968262c186b541c929df" translate="yes" xml:space="preserve">
          <source>func (t *DotDotDotType) String() string</source>
          <target state="translated">func (t *DotDotDotType)String()string</target>
        </trans-unit>
        <trans-unit id="3bfeb4785c39cd9cb7845d97d78d586a3f634c14" translate="yes" xml:space="preserve">
          <source>func (t *EnumType) String() string</source>
          <target state="translated">func (t *EnumType)String()string</target>
        </trans-unit>
        <trans-unit id="162df4bfd9eca4a66c886787ba24c8ff7466521c" translate="yes" xml:space="preserve">
          <source>func (t *FuncType) String() string</source>
          <target state="translated">func (t *FuncType)String()string</target>
        </trans-unit>
        <trans-unit id="4a0e0be389703b47f46fdb0f7738f46549e157de" translate="yes" xml:space="preserve">
          <source>func (t *Interface) Complete() *Interface</source>
          <target state="translated">func (t *Interface)Complete()*Interface</target>
        </trans-unit>
        <trans-unit id="48abb8c0ce802bc8764c60ff7c3abf64ce99d566" translate="yes" xml:space="preserve">
          <source>func (t *Interface) Embedded(i int) *Named</source>
          <target state="translated">func (t *Interface)Embedded(i int)*Named</target>
        </trans-unit>
        <trans-unit id="c2a7849e4655658c8e8b2214cccdf3063e03a74c" translate="yes" xml:space="preserve">
          <source>func (t *Interface) EmbeddedType(i int) Type</source>
          <target state="translated">func (t *Interface)EmbeddedType(i int)Type</target>
        </trans-unit>
        <trans-unit id="d4554c1599675f0948469b62678e33f2f3bb1c85" translate="yes" xml:space="preserve">
          <source>func (t *Interface) Empty() bool</source>
          <target state="translated">func (t *Interface)Empty()bool</target>
        </trans-unit>
        <trans-unit id="86075a9dbbda5dea692bfc4e4ccb10acb3e1c187" translate="yes" xml:space="preserve">
          <source>func (t *Interface) ExplicitMethod(i int) *Func</source>
          <target state="translated">func (t *Interface)ExplicitMethod(i int)*Func</target>
        </trans-unit>
        <trans-unit id="c2d3580891c4db76d57b1c4fa35b4cc19d326f6f" translate="yes" xml:space="preserve">
          <source>func (t *Interface) Method(i int) *Func</source>
          <target state="translated">func (t *Interface)Method(i int)*Func</target>
        </trans-unit>
        <trans-unit id="c814b7b3a6c6d70dc6d09ca87ffd36163cbb6b48" translate="yes" xml:space="preserve">
          <source>func (t *Interface) NumEmbeddeds() int</source>
          <target state="translated">func (t *Interface)NumEmbeddeds()int</target>
        </trans-unit>
        <trans-unit id="f93102abe766284167e02c4e329cfe0ea1ebc5e8" translate="yes" xml:space="preserve">
          <source>func (t *Interface) NumExplicitMethods() int</source>
          <target state="translated">func (t *Interface)NumExplicitMethods()int</target>
        </trans-unit>
        <trans-unit id="62f9ddfbb0adc7af4b39d3dfedb1a1b46796369e" translate="yes" xml:space="preserve">
          <source>func (t *Interface) NumMethods() int</source>
          <target state="translated">func (t *Interface)NumMethods()int</target>
        </trans-unit>
        <trans-unit id="198fdf0c8025d95f6088769feec89f1b6c762b53" translate="yes" xml:space="preserve">
          <source>func (t *Interface) String() string</source>
          <target state="translated">func (t *Interface)String()string</target>
        </trans-unit>
        <trans-unit id="8d429124ccc4f57e4f640071d78277ce2077dd23" translate="yes" xml:space="preserve">
          <source>func (t *Interface) Underlying() Type</source>
          <target state="translated">func (t *Interface)Underlying()Type</target>
        </trans-unit>
        <trans-unit id="2f61a7f9c240996fd922e6fefaaaf3f2c50a540d" translate="yes" xml:space="preserve">
          <source>func (t *LineTable) LineToPC(line int, maxpc uint64) uint64</source>
          <target state="translated">func (t *LineTable)LineToPC(line int,maxpc uint64)uint64</target>
        </trans-unit>
        <trans-unit id="2c71b0d795a98cf074490237680bbd1693f0e039" translate="yes" xml:space="preserve">
          <source>func (t *LineTable) PCToLine(pc uint64) int</source>
          <target state="translated">func (t *LineTable)PCToLine(pc uint64)int</target>
        </trans-unit>
        <trans-unit id="ea7446c880169dcbb10bb31ef690249774db209e" translate="yes" xml:space="preserve">
          <source>func (t *Named) AddMethod(m *Func)</source>
          <target state="translated">func (t *Nombrado)AddMethod(m *Func)</target>
        </trans-unit>
        <trans-unit id="a095bf463744d8c0ab529750938612230f17fbc6" translate="yes" xml:space="preserve">
          <source>func (t *Named) Method(i int) *Func</source>
          <target state="translated">func (t *Nombre)Método(i int)*Func</target>
        </trans-unit>
        <trans-unit id="907ef93c76d034b8801b0f37ce5f96c62be537a9" translate="yes" xml:space="preserve">
          <source>func (t *Named) NumMethods() int</source>
          <target state="translated">func (t *Nombrado)NumMethods()int</target>
        </trans-unit>
        <trans-unit id="b7faa9dbc198511ba35f260d3c7a4e3608a7afe0" translate="yes" xml:space="preserve">
          <source>func (t *Named) Obj() *TypeName</source>
          <target state="translated">func (t *Named)Obj()*TypeName</target>
        </trans-unit>
        <trans-unit id="8090f799b15a1bc6c046f87f70b5895bb761dfc7" translate="yes" xml:space="preserve">
          <source>func (t *Named) SetUnderlying(underlying Type)</source>
          <target state="translated">func (t *Nombrado)SetUnderlying (Tipo subyacente)</target>
        </trans-unit>
        <trans-unit id="d45a218d603ddabdb6bc23f0b8b8ee1ebb93e3da" translate="yes" xml:space="preserve">
          <source>func (t *Named) String() string</source>
          <target state="translated">func (t *Nombrado)String()string</target>
        </trans-unit>
        <trans-unit id="74208b79dc60a6d4e81173a507ec6f83bd5285d5" translate="yes" xml:space="preserve">
          <source>func (t *Named) Underlying() Type</source>
          <target state="translated">func (t *Nombre)Subyacente()Tipo</target>
        </trans-unit>
        <trans-unit id="8d49fae6da9b60262526e701c3497ec33acb2bfa" translate="yes" xml:space="preserve">
          <source>func (t *PtrType) String() string</source>
          <target state="translated">func (t *PtrType)String()string</target>
        </trans-unit>
        <trans-unit id="31f4994e4fbcaca55d69da27bfcc772a7cd38285" translate="yes" xml:space="preserve">
          <source>func (t *QualType) Size() int64</source>
          <target state="translated">func (t *QualType)Size()int64</target>
        </trans-unit>
        <trans-unit id="fa90dd44b87029aca7de9ec3c53f708ce9db55ba" translate="yes" xml:space="preserve">
          <source>func (t *QualType) String() string</source>
          <target state="translated">func (t *QualType)String()string</target>
        </trans-unit>
        <trans-unit id="2f0e6cfed4384f63ff5c16d5ce59bfd1f5403417" translate="yes" xml:space="preserve">
          <source>func (t *StructType) Defn() string</source>
          <target state="translated">func (t *StructType)Defn()string</target>
        </trans-unit>
        <trans-unit id="5e814f2450498a05b060a9523cebf755a865fb2c" translate="yes" xml:space="preserve">
          <source>func (t *StructType) String() string</source>
          <target state="translated">func (t *StructType)String()string</target>
        </trans-unit>
        <trans-unit id="e81a23050da9d0fce144c5d7821d27c5044fce85" translate="yes" xml:space="preserve">
          <source>func (t *T) Deadline() (deadline time.Time, ok bool)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="158192c8c44ab9f83f039fca1b0ec5b22ae01a58" translate="yes" xml:space="preserve">
          <source>func (t *T) Parallel()</source>
          <target state="translated">func (t *T)Paralelo()</target>
        </trans-unit>
        <trans-unit id="2b7c566210ec76b1157f6673df0f86ee2cc0ed85" translate="yes" xml:space="preserve">
          <source>func (t *T) Run(name string, f func(t *T)) bool</source>
          <target state="translated">func (t *T)Run(name string,f func(t *T))bool</target>
        </trans-unit>
        <trans-unit id="fb9b822352a2ba0d8c55c7fd1b91e908bb14e88c" translate="yes" xml:space="preserve">
          <source>func (t *Table) LineToPC(file string, line int) (pc uint64, fn *Func, err error)</source>
          <target state="translated">func (t *Table)LineToPC(file string,line int)(pc uint64,fn *Func,err error)</target>
        </trans-unit>
        <trans-unit id="d433aef259acb4c14b3d0a1961a493cf0feed292" translate="yes" xml:space="preserve">
          <source>func (t *Table) LookupFunc(name string) *Func</source>
          <target state="translated">func (t *Tabla)LookupFunc(name string)*Func</target>
        </trans-unit>
        <trans-unit id="b0a65b6d9e80ac9193a48987cf25c490ef9a4889" translate="yes" xml:space="preserve">
          <source>func (t *Table) LookupSym(name string) *Sym</source>
          <target state="translated">func (t *Tabla)LookupSym(name string)*Sym</target>
        </trans-unit>
        <trans-unit id="f334e746190d803edc4e3cfdf7188180b5ffcd2b" translate="yes" xml:space="preserve">
          <source>func (t *Table) PCToFunc(pc uint64) *Func</source>
          <target state="translated">func (t *Tabla)PCToFunc(pc uint64)*Func</target>
        </trans-unit>
        <trans-unit id="b1abb74abd7fd7ee8c7155d1f27fadcdde2764dd" translate="yes" xml:space="preserve">
          <source>func (t *Table) PCToLine(pc uint64) (file string, line int, fn *Func)</source>
          <target state="translated">func (t *Tabla)PCToLine(pc uint64)(file string,line int,fn *Func)</target>
        </trans-unit>
        <trans-unit id="cd7150522c2d26bb4af01f5bf2b7ed7c51870570" translate="yes" xml:space="preserve">
          <source>func (t *Table) SymByAddr(addr uint64) *Sym</source>
          <target state="translated">func (t *Tabla)SymByAddr(addr uint64)*Sym</target>
        </trans-unit>
        <trans-unit id="849a51a798662bcde61f0275cf0e5a455bf3b915" translate="yes" xml:space="preserve">
          <source>func (t *Task) End()</source>
          <target state="translated">func (t *Task)End()</target>
        </trans-unit>
        <trans-unit id="20bf574c7c3b4f63311f23a1e50ea0c5dc2366e0" translate="yes" xml:space="preserve">
          <source>func (t *Template) AddParseTree(name string, tree *parse.Tree) (*Template, error)</source>
          <target state="translated">func (t *Template)AddParseTree(name string,tree *parse.Tree)(*Template,error)</target>
        </trans-unit>
        <trans-unit id="3fdf733eed69eb776a07621956cfd1c26bcbbee8" translate="yes" xml:space="preserve">
          <source>func (t *Template) Clone() (*Template, error)</source>
          <target state="translated">func (t *Plantilla)Clone()(*Plantilla,error)</target>
        </trans-unit>
        <trans-unit id="2bf21f1a81c6d21576534f60a5baecfcb382443e" translate="yes" xml:space="preserve">
          <source>func (t *Template) DefinedTemplates() string</source>
          <target state="translated">func (t *Template)DefinedTemplates()string</target>
        </trans-unit>
        <trans-unit id="4019ec0864c5287ec8c4fc7e119908439c252535" translate="yes" xml:space="preserve">
          <source>func (t *Template) Delims(left, right string) *Template</source>
          <target state="translated">func (t *Plantilla)Delims(left,right string)*Plantilla</target>
        </trans-unit>
        <trans-unit id="5a1af3394b7cb1844cfc3098a57fd3258b688cbc" translate="yes" xml:space="preserve">
          <source>func (t *Template) Execute(wr io.Writer, data interface{}) error</source>
          <target state="translated">func (t *Template)Execute(wr io.Writer,data interface{})error</target>
        </trans-unit>
        <trans-unit id="7841659b2f55272366f7de8f18a602023c73949b" translate="yes" xml:space="preserve">
          <source>func (t *Template) ExecuteTemplate(wr io.Writer, name string, data interface{}) error</source>
          <target state="translated">func (t *Template)ExecuteTemplate(wr io.Writer,name string,data interface{})error</target>
        </trans-unit>
        <trans-unit id="2e8de92c57e50c189e96606813750e8de8bb9a8d" translate="yes" xml:space="preserve">
          <source>func (t *Template) Funcs(funcMap FuncMap) *Template</source>
          <target state="translated">func (t *Plantilla)Funcs(funcMap FuncMap)*Plantilla</target>
        </trans-unit>
        <trans-unit id="6816c689b05cb57189287c4dc47a994bcd49662c" translate="yes" xml:space="preserve">
          <source>func (t *Template) Lookup(name string) *Template</source>
          <target state="translated">func (t *Plantilla)Lookup(name string)*Plantilla</target>
        </trans-unit>
        <trans-unit id="405925c0e081357fe4575316209c86b9630f7cd8" translate="yes" xml:space="preserve">
          <source>func (t *Template) Name() string</source>
          <target state="translated">func (t *Template)Name()string</target>
        </trans-unit>
        <trans-unit id="61fc9e761bffa3771a1cb02cbbdf1e65e1c9b45c" translate="yes" xml:space="preserve">
          <source>func (t *Template) New(name string) *Template</source>
          <target state="translated">func (t *Plantilla)New(name string)*Plantilla</target>
        </trans-unit>
        <trans-unit id="aca9dc486ebd40de3f30c9a449be4fb7a2ee9466" translate="yes" xml:space="preserve">
          <source>func (t *Template) Option(opt ...string) *Template</source>
          <target state="translated">func (t *Plantilla)Opción(opt ...string)*Plantilla</target>
        </trans-unit>
        <trans-unit id="c1aceb5e4dee382d9e7470da4d5363183734c0f1" translate="yes" xml:space="preserve">
          <source>func (t *Template) Parse(text string) (*Template, error)</source>
          <target state="translated">func (t *Plantilla)Parse(cadena de texto)(*Plantilla,error)</target>
        </trans-unit>
        <trans-unit id="b07d7f4ea2de5d7fa842dc90766ce74ec242e550" translate="yes" xml:space="preserve">
          <source>func (t *Template) ParseFS(fs fs.FS, patterns ...string) (*Template, error)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d10d5d11f0643cf912163a2e57e21c1be3574a77" translate="yes" xml:space="preserve">
          <source>func (t *Template) ParseFS(fsys fs.FS, patterns ...string) (*Template, error)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="33b4cccae2faa823cf5c28be109b16226b1ba53b" translate="yes" xml:space="preserve">
          <source>func (t *Template) ParseFiles(filenames ...string) (*Template, error)</source>
          <target state="translated">func (t *Template)ParseFiles(filenames ...string)(*Template,error)</target>
        </trans-unit>
        <trans-unit id="12e87565572df38dd73da59d7f6a06ae089bb5c4" translate="yes" xml:space="preserve">
          <source>func (t *Template) ParseGlob(pattern string) (*Template, error)</source>
          <target state="translated">func (t *Template)ParseGlob(pattern string)(*Template,error)</target>
        </trans-unit>
        <trans-unit id="5c62c1462b9bdced62ae1429ff3a09d9bc764743" translate="yes" xml:space="preserve">
          <source>func (t *Template) Templates() []*Template</source>
          <target state="translated">func (t *Template)Templates()[]*Template</target>
        </trans-unit>
        <trans-unit id="bfc1838aa8bd4105c914299bc0d9696531731926" translate="yes" xml:space="preserve">
          <source>func (t *TemplateNode) Copy() Node</source>
          <target state="translated">func (t *TemplateNode)Copy()Node</target>
        </trans-unit>
        <trans-unit id="710a7844cdb3d03488e145c3091e22ebf4429a40" translate="yes" xml:space="preserve">
          <source>func (t *TemplateNode) String() string</source>
          <target state="translated">func (t *TemplateNode)String()string</target>
        </trans-unit>
        <trans-unit id="3898720d38adf322464d0913bc3d49ed4ef2a016" translate="yes" xml:space="preserve">
          <source>func (t *TextNode) Copy() Node</source>
          <target state="translated">func (t *TextNode)Copy()Node</target>
        </trans-unit>
        <trans-unit id="a6c704532b33afd60cd3f5937296962e4fe6dbec" translate="yes" xml:space="preserve">
          <source>func (t *TextNode) String() string</source>
          <target state="translated">func (t *TextNode)String()string</target>
        </trans-unit>
        <trans-unit id="8d26d902072b9fa6d48fb50b4008cf6867f96fe3" translate="yes" xml:space="preserve">
          <source>func (t *Ticker) Reset(d Duration)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6369fde3e6c348c2ffc7a5f1bae508679ce4ac23" translate="yes" xml:space="preserve">
          <source>func (t *Ticker) Stop()</source>
          <target state="translated">func (t *ticker)Stop()</target>
        </trans-unit>
        <trans-unit id="2309d8d9e3842f10e9e0d716521ccb7b98536a35" translate="yes" xml:space="preserve">
          <source>func (t *Time) GobDecode(data []byte) error</source>
          <target state="translated">func (t *Time)GobDecode(data []byte)error</target>
        </trans-unit>
        <trans-unit id="8e700d4d2a917eb3bed17dda6daee8f6c1ca202f" translate="yes" xml:space="preserve">
          <source>func (t *Time) UnmarshalBinary(data []byte) error</source>
          <target state="translated">func (t *Time)UnmarshalBinary(data []byte)error</target>
        </trans-unit>
        <trans-unit id="80a0bd3c3d068c8dcf7d0ac6d13c84c3d2a60af1" translate="yes" xml:space="preserve">
          <source>func (t *Time) UnmarshalJSON(data []byte) error</source>
          <target state="translated">func (t *Time)UnmarshalJSON(date []byte)error</target>
        </trans-unit>
        <trans-unit id="3225cc0cf7f5c717e01d304c9267df220704bb74" translate="yes" xml:space="preserve">
          <source>func (t *Time) UnmarshalText(data []byte) error</source>
          <target state="translated">func (t *Time)UnmarshalText(date []byte)error</target>
        </trans-unit>
        <trans-unit id="d92def2b49cc730969b379ec4a04a91e4ddbb606" translate="yes" xml:space="preserve">
          <source>func (t *Timer) Reset(d Duration) bool</source>
          <target state="translated">func (t *Timer)Reset(d Duración)bool</target>
        </trans-unit>
        <trans-unit id="d5d5df877d49edcce9fa14708d4bf94d53c84215" translate="yes" xml:space="preserve">
          <source>func (t *Timer) Stop() bool</source>
          <target state="translated">func (t *Timer)Stop()bool</target>
        </trans-unit>
        <trans-unit id="5a18e31f6c4f78fd2d4930f17b674a261ec7dd0a" translate="yes" xml:space="preserve">
          <source>func (t *Transport) CancelRequest(req *Request)</source>
          <target state="translated">func (t *Transporte)CancelRequest(req *Solicitud)</target>
        </trans-unit>
        <trans-unit id="c01f45482fca3d26d05e43942697d5512ffda5c4" translate="yes" xml:space="preserve">
          <source>func (t *Transport) Clone() *Transport</source>
          <target state="translated">func (t *Transporte)Clon()*Transporte</target>
        </trans-unit>
        <trans-unit id="ad49984004efb93c8c4c6d47985c7e6d84b0be45" translate="yes" xml:space="preserve">
          <source>func (t *Transport) CloseIdleConnections()</source>
          <target state="translated">func (t *Transport)CloseIdleConnections()</target>
        </trans-unit>
        <trans-unit id="3e64a56ca08621fc0bab3ab766ed7ce318ecddc0" translate="yes" xml:space="preserve">
          <source>func (t *Transport) RegisterProtocol(scheme string, rt RoundTripper)</source>
          <target state="translated">func (t *Transporte)RegisterProtocol(scheme string,rt RoundTripper)</target>
        </trans-unit>
        <trans-unit id="bd86ad9a37004baa845a1ec182558f7cf79ca0b8" translate="yes" xml:space="preserve">
          <source>func (t *Transport) RoundTrip(req *Request) (*Response, error)</source>
          <target state="translated">func (t *Transporte)Viaje de ida y vuelta(req *Solicitud)(*Respuesta,error)</target>
        </trans-unit>
        <trans-unit id="b0eb25171c11c96709170df24fe7dcbf337c68c8" translate="yes" xml:space="preserve">
          <source>func (t *Tree) Copy() *Tree</source>
          <target state="translated">func (t *Tree)Copy()*Tree</target>
        </trans-unit>
        <trans-unit id="8d2fdb585c0b4fde9089d6b35433dc961207527e" translate="yes" xml:space="preserve">
          <source>func (t *Tree) ErrorContext(n Node) (location, context string)</source>
          <target state="translated">func (t *Tree)ErrorContext(n Node)(location,context string)</target>
        </trans-unit>
        <trans-unit id="97ab41d02ff3e7f18423f2bab4cbafcda97cef75" translate="yes" xml:space="preserve">
          <source>func (t *Tree) Parse(text, leftDelim, rightDelim string, treeSet map[string]*Tree, funcs ...map[string]interface{}) (tree *Tree, err error)</source>
          <target state="translated">func (t *Tree)Parse(text,leftDelim,rightDelim string,treeSet map[string]*Tree,funcs ...map[string]interface{})(tree *Tree,err err error)</target>
        </trans-unit>
        <trans-unit id="fdc17ccb8e85f6bd39a6ee8ddc3caaa3865ec66a" translate="yes" xml:space="preserve">
          <source>func (t *Tuple) At(i int) *Var</source>
          <target state="translated">func (t *Tuple)At(i int)*Var</target>
        </trans-unit>
        <trans-unit id="6e66d771cfda37241e14863c3cd5ec5588c8d090" translate="yes" xml:space="preserve">
          <source>func (t *Tuple) Len() int</source>
          <target state="translated">func (t *Tuple)Len()int</target>
        </trans-unit>
        <trans-unit id="80009402a036f581cd5d2689b02f41f4fdba5312" translate="yes" xml:space="preserve">
          <source>func (t *Tuple) String() string</source>
          <target state="translated">func (t *Tuple)String()string</target>
        </trans-unit>
        <trans-unit id="445ad55cee305f0eb8f5ab176f259af3ac72b547" translate="yes" xml:space="preserve">
          <source>func (t *Tuple) Underlying() Type</source>
          <target state="translated">func (t *Tuple)Subyacente()Tipo</target>
        </trans-unit>
        <trans-unit id="969cf424b1b3a352ddc16fabaf833429922a3b97" translate="yes" xml:space="preserve">
          <source>func (t *TypedefType) Size() int64</source>
          <target state="translated">func (t *TipedefType)Size()int64</target>
        </trans-unit>
        <trans-unit id="b1717c3ba22aa746b258415cf74f7e9072f46439" translate="yes" xml:space="preserve">
          <source>func (t *TypedefType) String() string</source>
          <target state="translated">func (t *TypedefType)String()string</target>
        </trans-unit>
        <trans-unit id="4e02690778ec74bec3215ab088ff3b7ad78da328" translate="yes" xml:space="preserve">
          <source>func (t *UnsupportedType) String() string</source>
          <target state="translated">func (t *UnsupportedType)String()string</target>
        </trans-unit>
        <trans-unit id="46b9a2e81608f6108ba07e90ae7d68c7da227d4e" translate="yes" xml:space="preserve">
          <source>func (t *VoidType) String() string</source>
          <target state="translated">func (t *VoidType)String()string</target>
        </trans-unit>
        <trans-unit id="dba0ea4252cb6506f0c7c25112d8ec933b30f30e" translate="yes" xml:space="preserve">
          <source>func (t NodeType) Type() NodeType</source>
          <target state="translated">func (t NodeType)Type()NodeType</target>
        </trans-unit>
        <trans-unit id="50fb753745c791ed8ea8964b48f945915cb862da" translate="yes" xml:space="preserve">
          <source>func (t Tag) GoString() string</source>
          <target state="translated">func(t Tag)GoString()string</target>
        </trans-unit>
        <trans-unit id="727d5c06aabe2ea2f1dca02a68080f6723fc2e80" translate="yes" xml:space="preserve">
          <source>func (t Time) Add(d Duration) Time</source>
          <target state="translated">func (t Tiempo)Add(d Duración)Tiempo</target>
        </trans-unit>
        <trans-unit id="dc39761855948a0e5520b6b6613e59b2ccbcf4a5" translate="yes" xml:space="preserve">
          <source>func (t Time) AddDate(years int, months int, days int) Time</source>
          <target state="translated">func (t Tiempo)AddDate(años int,meses int,días int)Tiempo</target>
        </trans-unit>
        <trans-unit id="4741193453a3bb53ae559d8f9f5c85e7cabe2f9e" translate="yes" xml:space="preserve">
          <source>func (t Time) After(u Time) bool</source>
          <target state="translated">func (t Time)After(u Time)bool</target>
        </trans-unit>
        <trans-unit id="0c2f9d178d4abeab963e138784b7888546ea8a91" translate="yes" xml:space="preserve">
          <source>func (t Time) AppendFormat(b []byte, layout string) []byte</source>
          <target state="translated">func (t Tiempo)AppendFormat(b []byte,cadena de disposición)[]byte</target>
        </trans-unit>
        <trans-unit id="18525a81a894115e2fc9c1bf43f8f7ac937328b2" translate="yes" xml:space="preserve">
          <source>func (t Time) Before(u Time) bool</source>
          <target state="translated">func (t Time)Before(u Time)bool</target>
        </trans-unit>
        <trans-unit id="803e0956fadb0efad2e81c81da6f43d9b5c486a2" translate="yes" xml:space="preserve">
          <source>func (t Time) Clock() (hour, min, sec int)</source>
          <target state="translated">func (t Time)Clock()(hora,min,sec int)</target>
        </trans-unit>
        <trans-unit id="67477f7804ad9df182c7ab89e7164856e03f6aac" translate="yes" xml:space="preserve">
          <source>func (t Time) Date() (year int, month Month, day int)</source>
          <target state="translated">func (t Hora)Date()(año int,mes Mes,día int)</target>
        </trans-unit>
        <trans-unit id="7a0d04b569447d54db1316d8fd0ed6d5115f1e07" translate="yes" xml:space="preserve">
          <source>func (t Time) Day() int</source>
          <target state="translated">func (t Tiempo)Día()int</target>
        </trans-unit>
        <trans-unit id="e9052ac84eaeb555ce6b129f4f392fff3b84b48e" translate="yes" xml:space="preserve">
          <source>func (t Time) Equal(u Time) bool</source>
          <target state="translated">func (t Tiempo)Equal(u Tiempo)bool</target>
        </trans-unit>
        <trans-unit id="03492123fa6a8129fc5aeb3433179b72d6980763" translate="yes" xml:space="preserve">
          <source>func (t Time) Format(layout string) string</source>
          <target state="translated">func (t Tiempo)Formato(cadena de diseño)cadena</target>
        </trans-unit>
        <trans-unit id="1f400f8b1c21c6c862c270c6666dd07ca89c5d68" translate="yes" xml:space="preserve">
          <source>func (t Time) GobEncode() ([]byte, error)</source>
          <target state="translated">func (t Time)GobEncode()([]byte,error)</target>
        </trans-unit>
        <trans-unit id="77f1660eb7e6d526b05c5f5b11881174cdc12da6" translate="yes" xml:space="preserve">
          <source>func (t Time) Hour() int</source>
          <target state="translated">func (t Tiempo)Hora()int</target>
        </trans-unit>
        <trans-unit id="dae83dbdf6d2063448b8813a1fc5b2af2100d540" translate="yes" xml:space="preserve">
          <source>func (t Time) ISOWeek() (year, week int)</source>
          <target state="translated">func (t Tiempo)ISOWeek()(año,semana int)</target>
        </trans-unit>
        <trans-unit id="389c8d7d8c382c1eac62fd91da1f633888b47202" translate="yes" xml:space="preserve">
          <source>func (t Time) In(loc *Location) Time</source>
          <target state="translated">func (t Tiempo)In(loc *Lugar)Tiempo</target>
        </trans-unit>
        <trans-unit id="3357ec837bc55602d9667030a7b530562046d16a" translate="yes" xml:space="preserve">
          <source>func (t Time) IsZero() bool</source>
          <target state="translated">func (t Time)IsZero()bool</target>
        </trans-unit>
        <trans-unit id="61b17288bbc7ec5cce2d7f58360f5b5a81a2471d" translate="yes" xml:space="preserve">
          <source>func (t Time) Local() Time</source>
          <target state="translated">func (t Tiempo)Local()Tiempo</target>
        </trans-unit>
        <trans-unit id="043784a589712e57931c992c16088aa01a11d0df" translate="yes" xml:space="preserve">
          <source>func (t Time) Location() *Location</source>
          <target state="translated">func (t Tiempo)Ubicación()*Localización</target>
        </trans-unit>
        <trans-unit id="25deed7ee986c82e1e3a384ef13e7cfaf444df0c" translate="yes" xml:space="preserve">
          <source>func (t Time) MarshalBinary() ([]byte, error)</source>
          <target state="translated">func (t Time)MarshalBinary()([]byte,error)</target>
        </trans-unit>
        <trans-unit id="51c36158757d5189e3d57e1737b7bab9cf8fd062" translate="yes" xml:space="preserve">
          <source>func (t Time) MarshalJSON() ([]byte, error)</source>
          <target state="translated">func (t Time)MarshalJSON()([]byte,error)</target>
        </trans-unit>
        <trans-unit id="205d604d15f2e43ee90b65ef2c4e410a1d5d548d" translate="yes" xml:space="preserve">
          <source>func (t Time) MarshalText() ([]byte, error)</source>
          <target state="translated">func (t Time)MarshalText()([]byte,error)</target>
        </trans-unit>
        <trans-unit id="1bec201d208f7a81d2c9eca0bd10ecee1561dd5a" translate="yes" xml:space="preserve">
          <source>func (t Time) Minute() int</source>
          <target state="translated">func (t Tiempo)Minuto()int</target>
        </trans-unit>
        <trans-unit id="ec928e57ce2606179a383c0a2c8c94e75bc6c58c" translate="yes" xml:space="preserve">
          <source>func (t Time) Month() Month</source>
          <target state="translated">func (t Tiempo)Mes()Mes</target>
        </trans-unit>
        <trans-unit id="2d7b3f7a2de5945789233405ae5e589aee0c9edb" translate="yes" xml:space="preserve">
          <source>func (t Time) Nanosecond() int</source>
          <target state="translated">func (t Tiempo)Nanosegundo()int</target>
        </trans-unit>
        <trans-unit id="5a3ec82ac10bdbdbb9db7272a438e1274017dab8" translate="yes" xml:space="preserve">
          <source>func (t Time) Round(d Duration) Time</source>
          <target state="translated">func (t Tiempo)Redondo (d Duración)Tiempo</target>
        </trans-unit>
        <trans-unit id="67a51ee8970f6a4e02a11383361cd8d208fd9d2f" translate="yes" xml:space="preserve">
          <source>func (t Time) Second() int</source>
          <target state="translated">func (t Tiempo)Second()int</target>
        </trans-unit>
        <trans-unit id="26f9734237be2fe2fcab2c951c59f781114b2dc1" translate="yes" xml:space="preserve">
          <source>func (t Time) String() string</source>
          <target state="translated">func (t Time)String()string</target>
        </trans-unit>
        <trans-unit id="1e9602af95a650c06304a4b93a27a84d0a0caada" translate="yes" xml:space="preserve">
          <source>func (t Time) Sub(u Time) Duration</source>
          <target state="translated">func (t Tiempo)Sub(u Tiempo)Duración</target>
        </trans-unit>
        <trans-unit id="0fc4e9f39109d9d8d4d97f33b64d14349b0496ab" translate="yes" xml:space="preserve">
          <source>func (t Time) Truncate(d Duration) Time</source>
          <target state="translated">func (t Tiempo)Truncado(d Duración)Tiempo</target>
        </trans-unit>
        <trans-unit id="5e4259b4b0205ce683b90af927ddf0ad2cc8020b" translate="yes" xml:space="preserve">
          <source>func (t Time) UTC() Time</source>
          <target state="translated">func (t Tiempo)UTC()Tiempo</target>
        </trans-unit>
        <trans-unit id="878fafcd077275daa8235a988622339ebc3feb34" translate="yes" xml:space="preserve">
          <source>func (t Time) Unix() int64</source>
          <target state="translated">func (t Time)Unix()int64</target>
        </trans-unit>
        <trans-unit id="76905c0de004bcfacf07ec0bd01c45d9fc43e18e" translate="yes" xml:space="preserve">
          <source>func (t Time) UnixNano() int64</source>
          <target state="translated">func (t Time)UnixNano()int64</target>
        </trans-unit>
        <trans-unit id="d023681cb4d9a9cb47dffb11caef10183995f310" translate="yes" xml:space="preserve">
          <source>func (t Time) Weekday() Weekday</source>
          <target state="translated">func (t Tiempo)Día de la semana()Día de la semana</target>
        </trans-unit>
        <trans-unit id="5a3ae54cb566a30d555cd003b35b43930b9896d7" translate="yes" xml:space="preserve">
          <source>func (t Time) Year() int</source>
          <target state="translated">func (t Tiempo)Año()int</target>
        </trans-unit>
        <trans-unit id="81c1ae9dcb5d8341eeaea17371432a3800eeeffe" translate="yes" xml:space="preserve">
          <source>func (t Time) YearDay() int</source>
          <target state="translated">func (t Tiempo)YearDay()int</target>
        </trans-unit>
        <trans-unit id="92edc66de086c161f845845caa701764753f9f51" translate="yes" xml:space="preserve">
          <source>func (t Time) Zone() (name string, offset int)</source>
          <target state="translated">func (t Time)Zone()(nombre cadena,offset int)</target>
        </trans-unit>
        <trans-unit id="26acd4074f802225b9913f76f812c0866a62d8d3" translate="yes" xml:space="preserve">
          <source>func (t Type) GoString() string</source>
          <target state="translated">func(t Tipo)GoString()string</target>
        </trans-unit>
        <trans-unit id="9d3fedf46ffe54f574f897429c47e23f01181739" translate="yes" xml:space="preserve">
          <source>func (t Type) String() string</source>
          <target state="translated">func(t Tipo)String()string</target>
        </trans-unit>
        <trans-unit id="4cd63a94e252ccd9734bbc8e6c385182829e3089" translate="yes" xml:space="preserve">
          <source>func (tag StructTag) Get(key string) string</source>
          <target state="translated">func (tag StructTag)Get(key string)string</target>
        </trans-unit>
        <trans-unit id="7561cfae729cef2fd92e66e9217c739550b820f8" translate="yes" xml:space="preserve">
          <source>func (tag StructTag) Lookup(key string) (value string, ok bool)</source>
          <target state="translated">func (tag StructTag)Lookup(key string)(value string,ok bool)</target>
        </trans-unit>
        <trans-unit id="f8414bce98f3ba1980e3015e2b2c70ab6180122e" translate="yes" xml:space="preserve">
          <source>func (tok Token) IsKeyword() bool</source>
          <target state="translated">func (tok Token)IsKeyword()bool</target>
        </trans-unit>
        <trans-unit id="d67676ff93587e9b436423ca38814b09dfbc620c" translate="yes" xml:space="preserve">
          <source>func (tok Token) IsLiteral() bool</source>
          <target state="translated">func (tok Token)IsLiteral()bool</target>
        </trans-unit>
        <trans-unit id="07afd41cae302913a8f2bbb8cb3858c92ba5fffb" translate="yes" xml:space="preserve">
          <source>func (tok Token) IsOperator() bool</source>
          <target state="translated">func (tok Token)IsOperator()bool</target>
        </trans-unit>
        <trans-unit id="631a161e4e34b1e2e1159928d06ce894c6fe0267" translate="yes" xml:space="preserve">
          <source>func (tok Token) String() string</source>
          <target state="translated">func(tok Token)String()string</target>
        </trans-unit>
        <trans-unit id="d0675bae8c6b4463c6d0051fb94ca8e830a74484" translate="yes" xml:space="preserve">
          <source>func (tr *Reader) Next() (*Header, error)</source>
          <target state="translated">func (tr *Reader)Next()(*Header,error)</target>
        </trans-unit>
        <trans-unit id="4c51550476d9f379c7715de2b974da5c86b7f7b7" translate="yes" xml:space="preserve">
          <source>func (tr *Reader) Read(b []byte) (int, error)</source>
          <target state="translated">func (tr *Reader)Read(b []byte)(int,error)</target>
        </trans-unit>
        <trans-unit id="d55337e94931bd76c3cca126badb68d688ea30f8" translate="yes" xml:space="preserve">
          <source>func (ts *Timespec) Nano() int64</source>
          <target state="translated">func (ts *Timespec)Nano()int64</target>
        </trans-unit>
        <trans-unit id="ef64d5a637e060230a93366edcb51bea3358722c" translate="yes" xml:space="preserve">
          <source>func (ts *Timespec) Unix() (sec int64, nsec int64)</source>
          <target state="translated">func (ts *Timespec)Unix()(sec int64,nsec int64)</target>
        </trans-unit>
        <trans-unit id="2ae78f58dacea8cfa4b7896e8e65c754ff54b902" translate="yes" xml:space="preserve">
          <source>func (tv *Timeval) Nano() int64</source>
          <target state="translated">func (tv *Timeval)Nano()int64</target>
        </trans-unit>
        <trans-unit id="9202da9cacd2117778efd985b4e890251d168206" translate="yes" xml:space="preserve">
          <source>func (tv *Timeval) Unix() (sec int64, nsec int64)</source>
          <target state="translated">func (tv *Timeval)Unix()(sec int64,nsec int64)</target>
        </trans-unit>
        <trans-unit id="ead71707a1449949110de81f770498525d62ae65" translate="yes" xml:space="preserve">
          <source>func (tv TypeAndValue) Addressable() bool</source>
          <target state="translated">func (tv TypeAndValue)Addressable()bool</target>
        </trans-unit>
        <trans-unit id="afa60026b4989f75e5d04b2c7cc5929589bf65b1" translate="yes" xml:space="preserve">
          <source>func (tv TypeAndValue) Assignable() bool</source>
          <target state="translated">func (tv TypeAndValue)Assignable()bool</target>
        </trans-unit>
        <trans-unit id="6510635c07307e367bade0266f8449accf266be5" translate="yes" xml:space="preserve">
          <source>func (tv TypeAndValue) HasOk() bool</source>
          <target state="translated">func (tv TypeAndValue)HasOk()bool</target>
        </trans-unit>
        <trans-unit id="c701f272c243e4e69b1c6e204f118dfbedbfa517" translate="yes" xml:space="preserve">
          <source>func (tv TypeAndValue) IsBuiltin() bool</source>
          <target state="translated">func (tv TypeAndValue)IsBuiltin()bool</target>
        </trans-unit>
        <trans-unit id="9a439bcf5544841863131e3f3d7e45bc621b92a2" translate="yes" xml:space="preserve">
          <source>func (tv TypeAndValue) IsNil() bool</source>
          <target state="translated">func (tv TypeAndValue)IsNil()bool</target>
        </trans-unit>
        <trans-unit id="8b5ac2a9b6f31dbf7f6decabd619f5dc299e4595" translate="yes" xml:space="preserve">
          <source>func (tv TypeAndValue) IsType() bool</source>
          <target state="translated">func (tv TypeAndValue)IsType()bool</target>
        </trans-unit>
        <trans-unit id="a78bebd3b60ce10ac041c9c8c821a89925ce6733" translate="yes" xml:space="preserve">
          <source>func (tv TypeAndValue) IsValue() bool</source>
          <target state="translated">func (tv TypeAndValue)IsValue()bool</target>
        </trans-unit>
        <trans-unit id="5b16b64e3fcc581f3f5979c8a25f41df646c64c3" translate="yes" xml:space="preserve">
          <source>func (tv TypeAndValue) IsVoid() bool</source>
          <target state="translated">func (tv TypeAndValue)IsVoid()bool</target>
        </trans-unit>
        <trans-unit id="0eca6aba9052c3682b1974f7fa16d188fa43451c" translate="yes" xml:space="preserve">
          <source>func (tw *Writer) Close() error</source>
          <target state="translated">func (tw *Writer)Close()error</target>
        </trans-unit>
        <trans-unit id="563a676603b30f05685def2eab48c3c1a4482506" translate="yes" xml:space="preserve">
          <source>func (tw *Writer) Flush() error</source>
          <target state="translated">func (tw *Writer)Flush()error</target>
        </trans-unit>
        <trans-unit id="152ac99bd18c5c3651a78f2b0b10081fee98c234" translate="yes" xml:space="preserve">
          <source>func (tw *Writer) Write(b []byte) (int, error)</source>
          <target state="translated">func (tw *Writer)Write(b []byte)(int,error)</target>
        </trans-unit>
        <trans-unit id="1e3493870266de64e182409a70ab2c4890fd4dca" translate="yes" xml:space="preserve">
          <source>func (tw *Writer) WriteHeader(hdr *Header) error</source>
          <target state="translated">func (tw *Writer)WriteHeader(hdr *Header)error</target>
        </trans-unit>
        <trans-unit id="5f4a95f65116d1c4ca7da7f38854e00cfd209517" translate="yes" xml:space="preserve">
          <source>func (tx *Tx) Commit() error</source>
          <target state="translated">func (tx *Tx)Commit()error</target>
        </trans-unit>
        <trans-unit id="47a2c6c9a3dfd8a578a2498cef174264bf9c35ac" translate="yes" xml:space="preserve">
          <source>func (tx *Tx) Exec(query string, args ...interface{}) (Result, error)</source>
          <target state="translated">func (tx *Tx)Exec(query string,args ...interface{})(Resultado,error)</target>
        </trans-unit>
        <trans-unit id="a4c61814b521e15167abccccec2e4b9696c5a1b7" translate="yes" xml:space="preserve">
          <source>func (tx *Tx) ExecContext(ctx context.Context, query string, args ...interface{}) (Result, error)</source>
          <target state="translated">func (tx *Tx)ExecContext(ctx context.Contexto,cadena de consulta,args ...interfaz{})(Resultado,error)</target>
        </trans-unit>
        <trans-unit id="4bb7737c1c90cb2c32b6e272c0d7d69a582764fe" translate="yes" xml:space="preserve">
          <source>func (tx *Tx) Prepare(query string) (*Stmt, error)</source>
          <target state="translated">func (tx *Tx)Prepare(query string)(*Stmt,error)</target>
        </trans-unit>
        <trans-unit id="2137fcbdc2932441da64ea5d443cc4ae1454a01e" translate="yes" xml:space="preserve">
          <source>func (tx *Tx) PrepareContext(ctx context.Context, query string) (*Stmt, error)</source>
          <target state="translated">func (tx *Tx)PrepareContext(ctx context.Context,query string)(*Stmt,error)</target>
        </trans-unit>
        <trans-unit id="b2a23479b2f6aa527b10fb2449663f80eee016f3" translate="yes" xml:space="preserve">
          <source>func (tx *Tx) Query(query string, args ...interface{}) (*Rows, error)</source>
          <target state="translated">func (tx *Tx)Query(query string,args ...interface{})(*Rows,error)</target>
        </trans-unit>
        <trans-unit id="1cd0c65cfbe2b64ce3b75102ba23f1bbc40f259c" translate="yes" xml:space="preserve">
          <source>func (tx *Tx) QueryContext(ctx context.Context, query string, args ...interface{}) (*Rows, error)</source>
          <target state="translated">func (tx *Tx)QueryContext(ctx context.Contexto,cadena de consulta,args ...interface{})(*Filas,error)</target>
        </trans-unit>
        <trans-unit id="97d6164a62784ba574ec93386b56907682427479" translate="yes" xml:space="preserve">
          <source>func (tx *Tx) QueryRow(query string, args ...interface{}) *Row</source>
          <target state="translated">func (tx *Tx)QueryRow(cadena de consulta,args ...interfaz{})*Row</target>
        </trans-unit>
        <trans-unit id="791ddec2c8041bfd293b4da3c14a6344b967a8ec" translate="yes" xml:space="preserve">
          <source>func (tx *Tx) QueryRowContext(ctx context.Context, query string, args ...interface{}) *Row</source>
          <target state="translated">func (tx *Tx)QueryRowContext(ctx context.Contexto,cadena de consulta,args ...interfaz{})*Row</target>
        </trans-unit>
        <trans-unit id="9b791b7501aca92f681ddd1b414717d11a04be21" translate="yes" xml:space="preserve">
          <source>func (tx *Tx) Rollback() error</source>
          <target state="translated">func (tx *Tx)Rollback()error</target>
        </trans-unit>
        <trans-unit id="1523658ad4bd5aff17ca43f46bb9e81a75be23c9" translate="yes" xml:space="preserve">
          <source>func (tx *Tx) Stmt(stmt *Stmt) *Stmt</source>
          <target state="translated">func (tx *Tx)Stmt(stmt *Stmt)*Stmt</target>
        </trans-unit>
        <trans-unit id="abd9b47de8f3e4f93cb079acbbe43ef1efe04501" translate="yes" xml:space="preserve">
          <source>func (tx *Tx) StmtContext(ctx context.Context, stmt *Stmt) *Stmt</source>
          <target state="translated">func (tx *Tx)StmtContext(ctx context.Contexto,stmt *Stmt)*Stmt</target>
        </trans-unit>
        <trans-unit id="c01743c1fc70320fbd6ead1a8fc5b553d052dcb4" translate="yes" xml:space="preserve">
          <source>func (u *URL) EscapedFragment() string</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e20446b84a8e8a7430992f9f03f977b7280c66d6" translate="yes" xml:space="preserve">
          <source>func (u *URL) EscapedPath() string</source>
          <target state="translated">func (u *URL)EscapedPath()string</target>
        </trans-unit>
        <trans-unit id="9dcff3a8dd5657d9471c36f75a6d0532afaf27cf" translate="yes" xml:space="preserve">
          <source>func (u *URL) Hostname() string</source>
          <target state="translated">func (u *URL)Hostname()string</target>
        </trans-unit>
        <trans-unit id="666aa439dca2b8a6711c8103cee3b023ac200916" translate="yes" xml:space="preserve">
          <source>func (u *URL) IsAbs() bool</source>
          <target state="translated">func (u *URL)IsAbs()bool</target>
        </trans-unit>
        <trans-unit id="04582f10192967613dd09592235336b8422be6e2" translate="yes" xml:space="preserve">
          <source>func (u *URL) MarshalBinary() (text []byte, err error)</source>
          <target state="translated">func (u *URL)MarshalBinary()(text []byte,err error)</target>
        </trans-unit>
        <trans-unit id="048e75663815d29540fdfe51b30aa4dc1a7638da" translate="yes" xml:space="preserve">
          <source>func (u *URL) Parse(ref string) (*URL, error)</source>
          <target state="translated">func (u *URL)Parse(ref string)(*URL,error)</target>
        </trans-unit>
        <trans-unit id="04978467793a498bf9362145ee114a623b7fa220" translate="yes" xml:space="preserve">
          <source>func (u *URL) Port() string</source>
          <target state="translated">func (u *URL)Port()string</target>
        </trans-unit>
        <trans-unit id="6b29c07ebc80860fe248d8dfcd89ec26300c8683" translate="yes" xml:space="preserve">
          <source>func (u *URL) Query() Values</source>
          <target state="translated">func (u *URL)Query()Values</target>
        </trans-unit>
        <trans-unit id="58fc0f442959b54cb9165860d4dbf3e29dba5596" translate="yes" xml:space="preserve">
          <source>func (u *URL) Redacted() string</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="64eb00791b9a336b43e17193803663544643783c" translate="yes" xml:space="preserve">
          <source>func (u *URL) RequestURI() string</source>
          <target state="translated">func (u *URL)RequestURI()string</target>
        </trans-unit>
        <trans-unit id="71237fcf66248c3fb5440c50d584df44a3cad0ec" translate="yes" xml:space="preserve">
          <source>func (u *URL) ResolveReference(ref *URL) *URL</source>
          <target state="translated">func (u *URL)ResolveReference(ref *URL)*URL</target>
        </trans-unit>
        <trans-unit id="ae21a45cc046997821dfffe06f7207eed8939eb7" translate="yes" xml:space="preserve">
          <source>func (u *URL) String() string</source>
          <target state="translated">func(u *URL)String()string</target>
        </trans-unit>
        <trans-unit id="a2d9175932d374802bf95c0bb113e8b1396a37f8" translate="yes" xml:space="preserve">
          <source>func (u *URL) UnmarshalBinary(text []byte) error</source>
          <target state="translated">func (u *URL)UnmarshalBinary(text []byte)error</target>
        </trans-unit>
        <trans-unit id="8e82bce1bdfb5b3be7c5b59d6061e9ff275ea435" translate="yes" xml:space="preserve">
          <source>func (u *User) GroupIds() ([]string, error)</source>
          <target state="translated">func (u *Usuario)GroupIds()([]cadena,error)</target>
        </trans-unit>
        <trans-unit id="f0ccb9a53d75eaee53e6b5f15ee4fe556874264c" translate="yes" xml:space="preserve">
          <source>func (u *Userinfo) Password() (string, bool)</source>
          <target state="translated">func (u *Userinfo)Password()(string,bool)</target>
        </trans-unit>
        <trans-unit id="0cbd71899e37dba1c781c948c3126fcf7deb61ae" translate="yes" xml:space="preserve">
          <source>func (u *Userinfo) String() string</source>
          <target state="translated">func (u *Userinfo)String()string</target>
        </trans-unit>
        <trans-unit id="dfcbb7f5e5653be1771606d1cc6c98367a4716b4" translate="yes" xml:space="preserve">
          <source>func (u *Userinfo) Username() string</source>
          <target state="translated">func (u *Userinfo)Username()string</target>
        </trans-unit>
        <trans-unit id="9e474abefb0933d6026b02a5c17d64d36e5b3bed" translate="yes" xml:space="preserve">
          <source>func (v *Buffers) Read(p []byte) (n int, err error)</source>
          <target state="translated">func (v *Buffers)Read(p []byte)(n int,err error)</target>
        </trans-unit>
        <trans-unit id="d4adc79152df25dc0b8cbb855469c623b67c566e" translate="yes" xml:space="preserve">
          <source>func (v *Buffers) WriteTo(w io.Writer) (n int64, err error)</source>
          <target state="translated">func (v *Buffers)WriteTo(w io.Writer)(n int64,err error)</target>
        </trans-unit>
        <trans-unit id="88d624b7d4ab0e96f40831112224a73551820efd" translate="yes" xml:space="preserve">
          <source>func (v *Float) Add(delta float64)</source>
          <target state="translated">func (v *Flota)Add(delta float64)</target>
        </trans-unit>
        <trans-unit id="0097b6c2424301bc1222bc6f2311ef14b0ddca88" translate="yes" xml:space="preserve">
          <source>func (v *Float) Set(value float64)</source>
          <target state="translated">func (v *Float)Set(valor float64)</target>
        </trans-unit>
        <trans-unit id="027000918b8b5bdfe5947cd16ccdfbb9a7dde036" translate="yes" xml:space="preserve">
          <source>func (v *Float) String() string</source>
          <target state="translated">func (v *Flota)String()string</target>
        </trans-unit>
        <trans-unit id="0af653084b07e1013c0a8859e6070245b601eed1" translate="yes" xml:space="preserve">
          <source>func (v *Float) Value() float64</source>
          <target state="translated">func (v *Flota)Value()float64</target>
        </trans-unit>
        <trans-unit id="a77e28847a27e54aa269b5193ec104dcabb165ca" translate="yes" xml:space="preserve">
          <source>func (v *Int) Add(delta int64)</source>
          <target state="translated">func (v *Int)Add(delta int64)</target>
        </trans-unit>
        <trans-unit id="3ce1389d9c643ae8041d6ee9bd77209a6ea36015" translate="yes" xml:space="preserve">
          <source>func (v *Int) Set(value int64)</source>
          <target state="translated">func (v *Int)Set(valor int64)</target>
        </trans-unit>
        <trans-unit id="c2074ccdc276e0da69dacf0f393a59a2a98d54c0" translate="yes" xml:space="preserve">
          <source>func (v *Int) String() string</source>
          <target state="translated">func (v *Int)String()string</target>
        </trans-unit>
        <trans-unit id="1bd1d7ec9acab9fda9f11ef41182dd03aee3ed35" translate="yes" xml:space="preserve">
          <source>func (v *Int) Value() int64</source>
          <target state="translated">func (v *Int)Value()int64</target>
        </trans-unit>
        <trans-unit id="f7cf01177b6262c5bcf5acdbd0c4d34438e63b5b" translate="yes" xml:space="preserve">
          <source>func (v *Map) Add(key string, delta int64)</source>
          <target state="translated">func (v *Map)Add(key string,delta int64)</target>
        </trans-unit>
        <trans-unit id="7c56bc5c4fec8022b4527c9146395592b029aecc" translate="yes" xml:space="preserve">
          <source>func (v *Map) AddFloat(key string, delta float64)</source>
          <target state="translated">func (v *Map)AddFloat(key string,delta float64)</target>
        </trans-unit>
        <trans-unit id="8496fe68289c16d6c1351f94e20e089f61c07643" translate="yes" xml:space="preserve">
          <source>func (v *Map) Delete(key string)</source>
          <target state="translated">func (v *Map)Delete(key string)</target>
        </trans-unit>
        <trans-unit id="cce119b83f1e5cb16f38afc202d0c24031803b9f" translate="yes" xml:space="preserve">
          <source>func (v *Map) Do(f func(KeyValue))</source>
          <target state="translated">func (v *Map)Do(f func(KeyValue))</target>
        </trans-unit>
        <trans-unit id="91a3247baf384f441a4e342f873944074d0fd3fe" translate="yes" xml:space="preserve">
          <source>func (v *Map) Get(key string) Var</source>
          <target state="translated">func (v *Map)Get(key string)Var</target>
        </trans-unit>
        <trans-unit id="f8bfaa014a18ca1ec7383e37f4ac2cf9fa0cdb74" translate="yes" xml:space="preserve">
          <source>func (v *Map) Init() *Map</source>
          <target state="translated">func (v *Map)Init()*Map</target>
        </trans-unit>
        <trans-unit id="b802e850263274d541c1d5cf78d5e19e0e619be4" translate="yes" xml:space="preserve">
          <source>func (v *Map) Set(key string, av Var)</source>
          <target state="translated">func (v *Map)Set(key string,av Var)</target>
        </trans-unit>
        <trans-unit id="63824761420b0e226b96fe040ae774429b45ccf7" translate="yes" xml:space="preserve">
          <source>func (v *Map) String() string</source>
          <target state="translated">func(v *Carpeta)String()string</target>
        </trans-unit>
        <trans-unit id="d194acb5a6ef93f7a2ebbf6da7793bac688a2c57" translate="yes" xml:space="preserve">
          <source>func (v *String) Set(value string)</source>
          <target state="translated">func (v *String)Set(cadena de valores)</target>
        </trans-unit>
        <trans-unit id="7fba5507d5e4600abbef167af9a27fb71702b78a" translate="yes" xml:space="preserve">
          <source>func (v *String) String() string</source>
          <target state="translated">func (v *String)String()string</target>
        </trans-unit>
        <trans-unit id="ed6ab84088838272d9eed18745c582cf432580e3" translate="yes" xml:space="preserve">
          <source>func (v *String) Value() string</source>
          <target state="translated">func (v *String)Value()string</target>
        </trans-unit>
        <trans-unit id="dd4017762c93ed253a8e0f825fa33997c9fcd2ed" translate="yes" xml:space="preserve">
          <source>func (v *Value) Load() (x interface{})</source>
          <target state="translated">func (v *Valor)Load()(x interfaz{})</target>
        </trans-unit>
        <trans-unit id="d38b48cfad546a51a9f7a1b478a85e36a786eb59" translate="yes" xml:space="preserve">
          <source>func (v *Value) Store(x interface{})</source>
          <target state="translated">func (v *Valor)Store(x interfaz{})</target>
        </trans-unit>
        <trans-unit id="c79b6b05b89aeeaacac0b6b63bc8c62dda509657" translate="yes" xml:space="preserve">
          <source>func (v *VariableNode) Copy() Node</source>
          <target state="translated">func (v *NodoVariable)Copy()Node</target>
        </trans-unit>
        <trans-unit id="2f71fc57b55889acf3a034ea97c10e7e94614465" translate="yes" xml:space="preserve">
          <source>func (v *VariableNode) String() string</source>
          <target state="translated">func (v *NodoVariable)String()string</target>
        </trans-unit>
        <trans-unit id="c70f8032d6320f61f97b88f0e3c8dd5233783a17" translate="yes" xml:space="preserve">
          <source>func (v RowsAffected) RowsAffected() (int64, error)</source>
          <target state="translated">func (v RowsAffected)RowsAffected()(int64,error)</target>
        </trans-unit>
        <trans-unit id="7e8aaa3a5c18bd49cf231e5a49e54a04f7167e15" translate="yes" xml:space="preserve">
          <source>func (v Value) Addr() Value</source>
          <target state="translated">func (v Valor)Addr()Valor</target>
        </trans-unit>
        <trans-unit id="9759d63287542196bf901c262a17044406a5a700" translate="yes" xml:space="preserve">
          <source>func (v Value) Bool() bool</source>
          <target state="translated">func (v Valor)Bool()bool</target>
        </trans-unit>
        <trans-unit id="bb087cf581ce4a55066bd6eb4878658d4e209827" translate="yes" xml:space="preserve">
          <source>func (v Value) Bytes() []byte</source>
          <target state="translated">func (v Valor)Bytes()[]byte</target>
        </trans-unit>
        <trans-unit id="d6aba512c9c6a1da015161b8a9bd154b489a6f67" translate="yes" xml:space="preserve">
          <source>func (v Value) Call(in []Value) []Value</source>
          <target state="translated">func (v Valor)Call(in []Valor)[]Valor</target>
        </trans-unit>
        <trans-unit id="503ede3e29f36d1423f83735a1cbb2b43421cb1a" translate="yes" xml:space="preserve">
          <source>func (v Value) Call(m string, args ...interface{}) Value</source>
          <target state="translated">func (v Valor)Call(m string,args ...interface{})Valor</target>
        </trans-unit>
        <trans-unit id="70768cef2494d5975eed85f54df37b42eefacc5a" translate="yes" xml:space="preserve">
          <source>func (v Value) CallSlice(in []Value) []Value</source>
          <target state="translated">func (v Valor)CallSlice(in []Valor)[]Valor</target>
        </trans-unit>
        <trans-unit id="181e151a35e2d30de88ddd09f765e81df68cde8c" translate="yes" xml:space="preserve">
          <source>func (v Value) CanAddr() bool</source>
          <target state="translated">func (v Valor)CanAddr()bool</target>
        </trans-unit>
        <trans-unit id="f23d2c45fda3d00986e7b6d2886ea0f6756786f3" translate="yes" xml:space="preserve">
          <source>func (v Value) CanInterface() bool</source>
          <target state="translated">func (v Valor)CanInterface()bool</target>
        </trans-unit>
        <trans-unit id="943729a1e410d3e82d8589b79ccfd6690ebe6952" translate="yes" xml:space="preserve">
          <source>func (v Value) CanSet() bool</source>
          <target state="translated">func (v Valor)CanSet()bool</target>
        </trans-unit>
        <trans-unit id="68a6d82e9f647bd81afebe7648096d69eaadbe2d" translate="yes" xml:space="preserve">
          <source>func (v Value) Cap() int</source>
          <target state="translated">func (v Valor)Cap()int</target>
        </trans-unit>
        <trans-unit id="9471114de05b7abd925a2ffe89bfce9a009bc10c" translate="yes" xml:space="preserve">
          <source>func (v Value) Close()</source>
          <target state="translated">func (v Valor)Close()</target>
        </trans-unit>
        <trans-unit id="a036cbddce5cae1f783139500ff73d3936931b4c" translate="yes" xml:space="preserve">
          <source>func (v Value) Complex() complex128</source>
          <target state="translated">func (v Valor)Complejo()complejo128</target>
        </trans-unit>
        <trans-unit id="d6614bd7c929e7c644a4c2620af1b877c2673835" translate="yes" xml:space="preserve">
          <source>func (v Value) Convert(t Type) Value</source>
          <target state="translated">func (v Valor)Convertir(t Tipo)Valor</target>
        </trans-unit>
        <trans-unit id="44f2dc3c6ce98de9f1594bed7705c446b037fff4" translate="yes" xml:space="preserve">
          <source>func (v Value) Delete(p string)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8717b0e3d7efafe42f85c5db1bb04757df0437a6" translate="yes" xml:space="preserve">
          <source>func (v Value) Elem() Value</source>
          <target state="translated">func (v Valor)Elem()Valor</target>
        </trans-unit>
        <trans-unit id="a1a2872951eeaad04cc1abd9295c553c60c5ef73" translate="yes" xml:space="preserve">
          <source>func (v Value) Equal(w Value) bool</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5a29eb802ede9f47586096a67dc6f5293f698b56" translate="yes" xml:space="preserve">
          <source>func (v Value) Field(i int) Value</source>
          <target state="translated">func (v Valor)Campo(i int)Valor</target>
        </trans-unit>
        <trans-unit id="51792bc1c076c9a6e5c1faa33a9b6f7cb1548968" translate="yes" xml:space="preserve">
          <source>func (v Value) FieldByIndex(index []int) Value</source>
          <target state="translated">func (v Valor)FieldByIndex(índice []int)Valor</target>
        </trans-unit>
        <trans-unit id="19fcbbd1ecdf41313f6970579175a129dc02f0b9" translate="yes" xml:space="preserve">
          <source>func (v Value) FieldByName(name string) Value</source>
          <target state="translated">func (v Valor)FieldByName(name string)Value</target>
        </trans-unit>
        <trans-unit id="45f93af87099883755568bbe3e76dd4d7c9eff7c" translate="yes" xml:space="preserve">
          <source>func (v Value) FieldByNameFunc(match func(string) bool) Value</source>
          <target state="translated">func (v Valor)FieldByNameFunc(match func(string)bool)Valor</target>
        </trans-unit>
        <trans-unit id="e678644484b68e5ba53531f9a3265364240c00b7" translate="yes" xml:space="preserve">
          <source>func (v Value) Float() float64</source>
          <target state="translated">func (v Valor)Float()float64</target>
        </trans-unit>
        <trans-unit id="995bb185c322ad4dfa66f9b2492de431a8ad63ec" translate="yes" xml:space="preserve">
          <source>func (v Value) Float64() float64</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9521e550a3d832ef2f4cad94b99dbad10c745926" translate="yes" xml:space="preserve">
          <source>func (v Value) Float64Histogram() *Float64Histogram</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0d6fe1ed9ca7b8bf990a0a9e5f244fdbbf7aed5e" translate="yes" xml:space="preserve">
          <source>func (v Value) Get(p string) Value</source>
          <target state="translated">func (v Valor)Get(p cadena)Valor</target>
        </trans-unit>
        <trans-unit id="9add5e937708db1bfca43a46d373435365e5e253" translate="yes" xml:space="preserve">
          <source>func (v Value) Index(i int) Value</source>
          <target state="translated">func (v Valor)Índice(i int)Valor</target>
        </trans-unit>
        <trans-unit id="dd7a7c080db56e4b2f87d0fdeddf0e41f070757a" translate="yes" xml:space="preserve">
          <source>func (v Value) InstanceOf(t Value) bool</source>
          <target state="translated">func (v Valor)InstanceOf(t Valor)bool</target>
        </trans-unit>
        <trans-unit id="f9de2f5047c1b347f1d76afd7c47e730914e7ffa" translate="yes" xml:space="preserve">
          <source>func (v Value) Int() int</source>
          <target state="translated">func (v Valor)Int()int</target>
        </trans-unit>
        <trans-unit id="a2220433010967dc62986634ef69c54798fdbc8d" translate="yes" xml:space="preserve">
          <source>func (v Value) Int() int64</source>
          <target state="translated">func (v Valor)Int()int64</target>
        </trans-unit>
        <trans-unit id="97e1a9c0519b45e161a28781d13f3f26c288d5ff" translate="yes" xml:space="preserve">
          <source>func (v Value) Interface() (i interface{})</source>
          <target state="translated">func (v Valor)Interface()(i interface{})</target>
        </trans-unit>
        <trans-unit id="c784b905446a00797f72f12648e674ebad5fce26" translate="yes" xml:space="preserve">
          <source>func (v Value) InterfaceData() [2]uintptr</source>
          <target state="translated">func (v Valor)InterfaceData()[2]uintptr</target>
        </trans-unit>
        <trans-unit id="2347afd2b8e956cf6ce74c52600cc0bdbe7817a9" translate="yes" xml:space="preserve">
          <source>func (v Value) Invoke(args ...interface{}) Value</source>
          <target state="translated">func (v Valor)Invoke(args ...interface{})Valor</target>
        </trans-unit>
        <trans-unit id="339e920226aee7a040d2879c1254df44d82d3352" translate="yes" xml:space="preserve">
          <source>func (v Value) IsNaN() bool</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1b5dd7ebc3d162ed1a3c79889045dd558870024d" translate="yes" xml:space="preserve">
          <source>func (v Value) IsNil() bool</source>
          <target state="translated">func (v Valor)IsNil()bool</target>
        </trans-unit>
        <trans-unit id="b72a6dce763c76e21ad099bb0f2bb13cfaf8b497" translate="yes" xml:space="preserve">
          <source>func (v Value) IsNull() bool</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="941534129861d695cc23b1c55ae1ed5ee1df92c4" translate="yes" xml:space="preserve">
          <source>func (v Value) IsUndefined() bool</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4baee19dd0755cb6664832b395b9d67bec320d3c" translate="yes" xml:space="preserve">
          <source>func (v Value) IsValid() bool</source>
          <target state="translated">func (v Value)IsValid()bool</target>
        </trans-unit>
        <trans-unit id="a1e9e4483f3e70b414795d9ced21803a9cfbd98e" translate="yes" xml:space="preserve">
          <source>func (v Value) IsZero() bool</source>
          <target state="translated">func (v Valor)IsZero()bool</target>
        </trans-unit>
        <trans-unit id="b25125e0991de263cde977cfa5258cbf3eab448d" translate="yes" xml:space="preserve">
          <source>func (v Value) JSValue() Value</source>
          <target state="translated">func (v Valor)JSValue()Valor</target>
        </trans-unit>
        <trans-unit id="676ec3854939ce619754e66087c7a9a3ad43998a" translate="yes" xml:space="preserve">
          <source>func (v Value) Kind() Kind</source>
          <target state="translated">func (v Value)Kind()Kind</target>
        </trans-unit>
        <trans-unit id="c5b7e8b36d2e296db39a2bbd510ab19190d2b972" translate="yes" xml:space="preserve">
          <source>func (v Value) Kind() ValueKind</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6c2dd08ff68d696ed8cf717a239b8a84381966fe" translate="yes" xml:space="preserve">
          <source>func (v Value) Len() int</source>
          <target state="translated">func (v Valor)Len()int</target>
        </trans-unit>
        <trans-unit id="8c0c54d5a6cbe5bd2795fb23a67dd038686bf5b7" translate="yes" xml:space="preserve">
          <source>func (v Value) Length() int</source>
          <target state="translated">func (v Valor)Longitud()int</target>
        </trans-unit>
        <trans-unit id="f7843dbcb4c62225092e0fa2e139bf37e5c7030a" translate="yes" xml:space="preserve">
          <source>func (v Value) MapIndex(key Value) Value</source>
          <target state="translated">func (v Valor)MapIndex(key Value)Valor</target>
        </trans-unit>
        <trans-unit id="63d9fb5d8bd6cdacb36a114d2548176fc9fb2cb6" translate="yes" xml:space="preserve">
          <source>func (v Value) MapKeys() []Value</source>
          <target state="translated">func (v Valor)MapKeys()[]Valor</target>
        </trans-unit>
        <trans-unit id="bd86cfd93ba87ac926e9ca781232edf47f101fca" translate="yes" xml:space="preserve">
          <source>func (v Value) MapRange() *MapIter</source>
          <target state="translated">func (v Value)MapRange()*MapIter</target>
        </trans-unit>
        <trans-unit id="e0b871e9d660feeea31bac5d7b9b1e8946b34f6c" translate="yes" xml:space="preserve">
          <source>func (v Value) Method(i int) Value</source>
          <target state="translated">func (v Valor)Método(i int)Valor</target>
        </trans-unit>
        <trans-unit id="b2e74bab4a2177ec05ed511e1314d39fce74aac8" translate="yes" xml:space="preserve">
          <source>func (v Value) MethodByName(name string) Value</source>
          <target state="translated">func (v Valor)MethodByName(name string)Value</target>
        </trans-unit>
        <trans-unit id="b06da4eb4fc1a7fcc17b5d89b3c8fd876f641b1b" translate="yes" xml:space="preserve">
          <source>func (v Value) New(args ...interface{}) Value</source>
          <target state="translated">func (v Valor)New(args ...interface{})Valor</target>
        </trans-unit>
        <trans-unit id="bbe75b5db51027789f8d565a8b503377e5b0f315" translate="yes" xml:space="preserve">
          <source>func (v Value) NumField() int</source>
          <target state="translated">func (v Valor)NumField()int</target>
        </trans-unit>
        <trans-unit id="97f187306a86c0ef0295bb50b7e55991fa7d1a90" translate="yes" xml:space="preserve">
          <source>func (v Value) NumMethod() int</source>
          <target state="translated">func (v Valor)NumMethod()int</target>
        </trans-unit>
        <trans-unit id="57630513bd5427a316a63eb5a3d5cdbaba07c255" translate="yes" xml:space="preserve">
          <source>func (v Value) OverflowComplex(x complex128) bool</source>
          <target state="translated">func (v Valor)OverflowComplex(x complejo128)bool</target>
        </trans-unit>
        <trans-unit id="a73a5a6493d03c1e66b8cc7066abb2c50481bccd" translate="yes" xml:space="preserve">
          <source>func (v Value) OverflowFloat(x float64) bool</source>
          <target state="translated">func (v Valor)OverflowFloat(x float64)bool</target>
        </trans-unit>
        <trans-unit id="d2d6b31e50677d3c57a5cda65d8265d92a0716c1" translate="yes" xml:space="preserve">
          <source>func (v Value) OverflowInt(x int64) bool</source>
          <target state="translated">func (v Valor)OverflowInt(x int64)bool</target>
        </trans-unit>
        <trans-unit id="213dd8ff7658773719d09d167d5d4d966a567e87" translate="yes" xml:space="preserve">
          <source>func (v Value) OverflowUint(x uint64) bool</source>
          <target state="translated">func (v Valor)OverflowUint(x uint64)bool</target>
        </trans-unit>
        <trans-unit id="5416bdfb57dc5048b75ac13b5fbb661d547ad2fc" translate="yes" xml:space="preserve">
          <source>func (v Value) Pointer() uintptr</source>
          <target state="translated">func (v Valor)Pointer()uintptr</target>
        </trans-unit>
        <trans-unit id="d82fc2be3c71dde17ed8a3b9dba7984c97f1d71f" translate="yes" xml:space="preserve">
          <source>func (v Value) Recv() (x Value, ok bool)</source>
          <target state="translated">func (v Valor)Recv()(x Valor,ok bool)</target>
        </trans-unit>
        <trans-unit id="3ed97e7d6a37c6ee3e8b62ff6df8a044980e82b9" translate="yes" xml:space="preserve">
          <source>func (v Value) Send(x Value)</source>
          <target state="translated">func (v Valor)Send(x Valor)</target>
        </trans-unit>
        <trans-unit id="f67c2bba1d5b468d5115abb1c8ca70fdcb6b2685" translate="yes" xml:space="preserve">
          <source>func (v Value) Set(p string, x interface{})</source>
          <target state="translated">func (v Valor)Set(p cadena,x interfaz{})</target>
        </trans-unit>
        <trans-unit id="5a7cf7534246aa8ad6e64760549feb8eb78833bb" translate="yes" xml:space="preserve">
          <source>func (v Value) Set(x Value)</source>
          <target state="translated">func (v Valor)Set(x Valor)</target>
        </trans-unit>
        <trans-unit id="ea29c5ecb6c699d011143d75b7f8fa708d700dfc" translate="yes" xml:space="preserve">
          <source>func (v Value) SetBool(x bool)</source>
          <target state="translated">func (v Valor)SetBool(x bool)</target>
        </trans-unit>
        <trans-unit id="8a3b8d3758778b8dd0587d3d82867bcb5da3ee29" translate="yes" xml:space="preserve">
          <source>func (v Value) SetBytes(x []byte)</source>
          <target state="translated">func (v Valor)SetBytes(x []byte)</target>
        </trans-unit>
        <trans-unit id="55bf9ce0d9b8640c02b959ae73ffcd795303501f" translate="yes" xml:space="preserve">
          <source>func (v Value) SetCap(n int)</source>
          <target state="translated">func (v Valor)SetCap(n int)</target>
        </trans-unit>
        <trans-unit id="829e3c7bf1c52444794d1970975524fca2b33273" translate="yes" xml:space="preserve">
          <source>func (v Value) SetComplex(x complex128)</source>
          <target state="translated">func (v Valor)SetComplex(x complejo128)</target>
        </trans-unit>
        <trans-unit id="171dbcc27f675bc3c459200d5302c25a1d4cafc5" translate="yes" xml:space="preserve">
          <source>func (v Value) SetFloat(x float64)</source>
          <target state="translated">func (v Valor)SetFloat(x float64)</target>
        </trans-unit>
        <trans-unit id="6b8ebf3c1c16c0dc6e5e810e8d85d51569ac5176" translate="yes" xml:space="preserve">
          <source>func (v Value) SetIndex(i int, x interface{})</source>
          <target state="translated">func (v Value)SetIndex(i int,x interface{})</target>
        </trans-unit>
        <trans-unit id="fd3f9947591cca39ffc5591d24d05a96a6a127b1" translate="yes" xml:space="preserve">
          <source>func (v Value) SetInt(x int64)</source>
          <target state="translated">func (v Valor)SetInt(x int64)</target>
        </trans-unit>
        <trans-unit id="d476607a0355f57515d39257ee310969b882ca18" translate="yes" xml:space="preserve">
          <source>func (v Value) SetLen(n int)</source>
          <target state="translated">func (v Valor)SetLen(n int)</target>
        </trans-unit>
        <trans-unit id="b8c7580e7af3f3080ac76660a3cc30567834894f" translate="yes" xml:space="preserve">
          <source>func (v Value) SetMapIndex(key, elem Value)</source>
          <target state="translated">func (v Value)SetMapIndex(key,elem Value)</target>
        </trans-unit>
        <trans-unit id="97c873b62ff3d9891d74c65f8ef0d9f68366b473" translate="yes" xml:space="preserve">
          <source>func (v Value) SetPointer(x unsafe.Pointer)</source>
          <target state="translated">func (v Value)SetPointer(x unsafe.Pointer)</target>
        </trans-unit>
        <trans-unit id="1ae932182c793f27db327142926d6916fa7b0812" translate="yes" xml:space="preserve">
          <source>func (v Value) SetString(x string)</source>
          <target state="translated">func (v Valor)SetString(x cadena)</target>
        </trans-unit>
        <trans-unit id="f05f8b67f9c13c774c9af96a73fbc47dc71b3cb0" translate="yes" xml:space="preserve">
          <source>func (v Value) SetUint(x uint64)</source>
          <target state="translated">func (v Valor)SetUint(x uint64)</target>
        </trans-unit>
        <trans-unit id="408cf94c769bc7791bf1dd04d5c21bfd859c72f1" translate="yes" xml:space="preserve">
          <source>func (v Value) Slice(i, j int) Value</source>
          <target state="translated">func (v Valor)Slice(i,j int)Valor</target>
        </trans-unit>
        <trans-unit id="07f630072031564b7db8b8e3c0f2466bb2e2d5d1" translate="yes" xml:space="preserve">
          <source>func (v Value) Slice3(i, j, k int) Value</source>
          <target state="translated">func (v Valor)Slice3(i,j,k int)Valor</target>
        </trans-unit>
        <trans-unit id="35540232505331e874be4367e851883c5a1ea799" translate="yes" xml:space="preserve">
          <source>func (v Value) String() string</source>
          <target state="translated">func (v Valor)String()string</target>
        </trans-unit>
        <trans-unit id="0525363c7d267d711c96111925d9a15aa7b6fc6d" translate="yes" xml:space="preserve">
          <source>func (v Value) Truthy() bool</source>
          <target state="translated">func (v Value)Truthy()bool</target>
        </trans-unit>
        <trans-unit id="6ed44a82ae86e9a6ac66c174ace4e3772905e95b" translate="yes" xml:space="preserve">
          <source>func (v Value) TryRecv() (x Value, ok bool)</source>
          <target state="translated">func (v Valor)TryRecv()(x Valor,ok bool)</target>
        </trans-unit>
        <trans-unit id="a8294dd756445b490726f56d8ef4440cc3cd8837" translate="yes" xml:space="preserve">
          <source>func (v Value) TrySend(x Value) bool</source>
          <target state="translated">func (v Valor)TrySend(x Valor)bool</target>
        </trans-unit>
        <trans-unit id="7bf2003d166e35c344154e6a38e46f3b7839f08a" translate="yes" xml:space="preserve">
          <source>func (v Value) Type() Type</source>
          <target state="translated">func (v Valor)Tipo()Tipo</target>
        </trans-unit>
        <trans-unit id="c1df5e047e656372bfad52bd94769a00553c8d54" translate="yes" xml:space="preserve">
          <source>func (v Value) Uint() uint64</source>
          <target state="translated">func (v Valor)Uint()uint64</target>
        </trans-unit>
        <trans-unit id="2dc454b560699152545c8043ffd0b4b46ea88b34" translate="yes" xml:space="preserve">
          <source>func (v Value) Uint64() uint64</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="21bbe36a83686715d785ca99cde27a26d14d19bd" translate="yes" xml:space="preserve">
          <source>func (v Value) UnsafeAddr() uintptr</source>
          <target state="translated">func (v Value)Uintptr()UnsafeAddr()</target>
        </trans-unit>
        <trans-unit id="18223c4e3c12e68ce780892e44e4b4f6c062ba49" translate="yes" xml:space="preserve">
          <source>func (v Values) Add(key, value string)</source>
          <target state="translated">func (v Valores)Add(key,value string)</target>
        </trans-unit>
        <trans-unit id="e25a7a9572e28f1e4777e3e867748f86e36a75d6" translate="yes" xml:space="preserve">
          <source>func (v Values) Del(key string)</source>
          <target state="translated">func (v Valores)Del(key string)</target>
        </trans-unit>
        <trans-unit id="6caa569bdc38f22de308366fc78f01138afa2e80" translate="yes" xml:space="preserve">
          <source>func (v Values) Encode() string</source>
          <target state="translated">func (v Valores)Encode()string</target>
        </trans-unit>
        <trans-unit id="41acf3a2b9305d5a25ccf55e41fb6298e509e566" translate="yes" xml:space="preserve">
          <source>func (v Values) Get(key string) string</source>
          <target state="translated">func (v Valores)Get(key string)string</target>
        </trans-unit>
        <trans-unit id="74ee419041a7ddd8314707de088e882dbe6c937e" translate="yes" xml:space="preserve">
          <source>func (v Values) Set(key, value string)</source>
          <target state="translated">func (v Valores)Set(key,cadena de valores)</target>
        </trans-unit>
        <trans-unit id="d06c9969b5ed64da16f0679edcfd680ce8fee6df" translate="yes" xml:space="preserve">
          <source>func (w *PipeWriter) Close() error</source>
          <target state="translated">func (w *PipeWriter)Close()error</target>
        </trans-unit>
        <trans-unit id="d0566da4c7ca863a3f2d0e722dddc4a4621ac7f6" translate="yes" xml:space="preserve">
          <source>func (w *PipeWriter) CloseWithError(err error) error</source>
          <target state="translated">func (w *PipeWriter)CloseWithError(err error)error</target>
        </trans-unit>
        <trans-unit id="473c8fb548c759637500c38673b76abcfab178dd" translate="yes" xml:space="preserve">
          <source>func (w *PipeWriter) Write(data []byte) (n int, err error)</source>
          <target state="translated">func (w *PipeWriter)Write(data []byte)(n int,err error)</target>
        </trans-unit>
        <trans-unit id="55da53a3dda165f1b42c464391d249154644ceaf" translate="yes" xml:space="preserve">
          <source>func (w *WithNode) Copy() Node</source>
          <target state="translated">func (w *WithNode)Copy()Node</target>
        </trans-unit>
        <trans-unit id="76e03ef997e4a1af4d8bb28a7df56f58fb52bd76" translate="yes" xml:space="preserve">
          <source>func (w *Writer) Alert(m string) error</source>
          <target state="translated">func (w *Writer)Alert(m string)error</target>
        </trans-unit>
        <trans-unit id="34c933229d8d10cdb0f933848ef7bc3a39952861" translate="yes" xml:space="preserve">
          <source>func (w *Writer) Boundary() string</source>
          <target state="translated">func (w *Writer)Boundary()string</target>
        </trans-unit>
        <trans-unit id="eb7149d0a2dc232cdf03e6178cbaba32d126dcf3" translate="yes" xml:space="preserve">
          <source>func (w *Writer) Close() error</source>
          <target state="translated">func (w *Writer)Close()error</target>
        </trans-unit>
        <trans-unit id="38f8058cd7317f8b3985c0d57b49d29f31765465" translate="yes" xml:space="preserve">
          <source>func (w *Writer) Create(name string) (io.Writer, error)</source>
          <target state="translated">func (w *Writer)Create(name string)(io.Writer,error)</target>
        </trans-unit>
        <trans-unit id="67f6074f6194b0a0b64b2fd54c2f6fb7b5eeb7d9" translate="yes" xml:space="preserve">
          <source>func (w *Writer) CreateFormField(fieldname string) (io.Writer, error)</source>
          <target state="translated">func (w *Writer)CreateFormField(fielddname string)(io.Writer,error)</target>
        </trans-unit>
        <trans-unit id="146c4424abe74541e5ae8533e1025fb029d08151" translate="yes" xml:space="preserve">
          <source>func (w *Writer) CreateFormFile(fieldname, filename string) (io.Writer, error)</source>
          <target state="translated">func (w *Writer)CreateFormFile(nombre de campo,cadena de nombre de archivo)(io.Writer,error)</target>
        </trans-unit>
        <trans-unit id="081c5837dcd2cf27313a7a6f3696952286171969" translate="yes" xml:space="preserve">
          <source>func (w *Writer) CreateHeader(fh *FileHeader) (io.Writer, error)</source>
          <target state="translated">func (w *Escritor)CreateHeader(fh *FileHeader)(io.Writer,error)</target>
        </trans-unit>
        <trans-unit id="321c8731a4c6de676a2b807806f967af372c6b11" translate="yes" xml:space="preserve">
          <source>func (w *Writer) CreatePart(header textproto.MIMEHeader) (io.Writer, error)</source>
          <target state="translated">func (w *Writer)CreatePart(header textproto.MIMEHeader)(io.Writer,error)</target>
        </trans-unit>
        <trans-unit id="a4dc6b425b6adbae77d7bb32cbb457bb9667cc25" translate="yes" xml:space="preserve">
          <source>func (w *Writer) Crit(m string) error</source>
          <target state="translated">func (w *Writer)Crit(m string)error</target>
        </trans-unit>
        <trans-unit id="e3b19671db39977031ae55aa3b7c91a61665c542" translate="yes" xml:space="preserve">
          <source>func (w *Writer) Debug(m string) error</source>
          <target state="translated">func (w *Writer)Debug(m string)error</target>
        </trans-unit>
        <trans-unit id="3ead87d3ac79b5b9f8dc2bf135a0a07032c3bc72" translate="yes" xml:space="preserve">
          <source>func (w *Writer) DotWriter() io.WriteCloser</source>
          <target state="translated">func (w *Writer)DotWriter()io.WriteCloser</target>
        </trans-unit>
        <trans-unit id="ba156927e6960d63c6540fba9e2b1073d1cf00ac" translate="yes" xml:space="preserve">
          <source>func (w *Writer) Emerg(m string) error</source>
          <target state="translated">func (w *Writer)Emerg(m string)error</target>
        </trans-unit>
        <trans-unit id="a3ad8b9ff29191b4dac78680cfec0806b9a3de72" translate="yes" xml:space="preserve">
          <source>func (w *Writer) Err(m string) error</source>
          <target state="translated">func (w *Writer)Err(m string)error</target>
        </trans-unit>
        <trans-unit id="22458b5acdb87081ec478536c9ad71343c17f378" translate="yes" xml:space="preserve">
          <source>func (w *Writer) Error() error</source>
          <target state="translated">func (w *Writer)Error()error</target>
        </trans-unit>
        <trans-unit id="ef70c5ebdadc10a87871575aa07e27bcfd7a3424" translate="yes" xml:space="preserve">
          <source>func (w *Writer) Flush()</source>
          <target state="translated">func (w *Writer)Flush()</target>
        </trans-unit>
        <trans-unit id="77396a8bd3f188a7c833c6733a06835f408f94ea" translate="yes" xml:space="preserve">
          <source>func (w *Writer) Flush() error</source>
          <target state="translated">func (w *Writer)Flush()error</target>
        </trans-unit>
        <trans-unit id="105681ac5861cfeff86f400dd04e80ce45ea96c9" translate="yes" xml:space="preserve">
          <source>func (w *Writer) FormDataContentType() string</source>
          <target state="translated">func (w *Writer)FormDataContentType()string</target>
        </trans-unit>
        <trans-unit id="b0b8fedc90234aa751239408249af57c33505942" translate="yes" xml:space="preserve">
          <source>func (w *Writer) Info(m string) error</source>
          <target state="translated">func (w *Writer)Info(m string)error</target>
        </trans-unit>
        <trans-unit id="f1921730731863cb647cf4878abd6b5ceed876d1" translate="yes" xml:space="preserve">
          <source>func (w *Writer) Notice(m string) error</source>
          <target state="translated">func (w *Writer)Notice(m string)error</target>
        </trans-unit>
        <trans-unit id="d3a83e7e7d973c953d475527d35afde0e30b258a" translate="yes" xml:space="preserve">
          <source>func (w *Writer) PrintfLine(format string, args ...interface{}) error</source>
          <target state="translated">func (w *Writer)PrintfLine(format string,args ...interface{})error</target>
        </trans-unit>
        <trans-unit id="d85203b006755cb184da8f3e8c5b6debf1835074" translate="yes" xml:space="preserve">
          <source>func (w *Writer) RegisterCompressor(method uint16, comp Compressor)</source>
          <target state="translated">func (w *Writer)RegisterCompressor(method uint16,comp Compressor)</target>
        </trans-unit>
        <trans-unit id="dcf1ffe84e7fcb52954869e6c14609e2d6c4398b" translate="yes" xml:space="preserve">
          <source>func (w *Writer) Reset(dst io.Writer)</source>
          <target state="translated">func (w *Writer)Reset(dst io.Writer)</target>
        </trans-unit>
        <trans-unit id="7c8cf8e335b1ae2a2b6fc49a071f93416250c8af" translate="yes" xml:space="preserve">
          <source>func (w *Writer) SetBoundary(boundary string) error</source>
          <target state="translated">func (w *Writer)SetBoundary(boundary string)error</target>
        </trans-unit>
        <trans-unit id="40b851abe813846d34b0002877e72231e31a1ba3" translate="yes" xml:space="preserve">
          <source>func (w *Writer) SetComment(comment string) error</source>
          <target state="translated">func (w *Writer)SetComment(comment string)error</target>
        </trans-unit>
        <trans-unit id="ce05274883fec7339b25a4d4e99ef0bdda58fde3" translate="yes" xml:space="preserve">
          <source>func (w *Writer) SetOffset(n int64)</source>
          <target state="translated">func (w *Writer)SetOffset(n int64)</target>
        </trans-unit>
        <trans-unit id="c522b70cf9f4b27ed88bf87b376fd79765117cbc" translate="yes" xml:space="preserve">
          <source>func (w *Writer) Warning(m string) error</source>
          <target state="translated">func (w *Writer)Warning(m string)error</target>
        </trans-unit>
        <trans-unit id="97b5a59d80ab352effc917e8c65bfb7c750ede5b" translate="yes" xml:space="preserve">
          <source>func (w *Writer) Write(b []byte) (int, error)</source>
          <target state="translated">func (w *Writer)Write(b []byte)(int,error)</target>
        </trans-unit>
        <trans-unit id="d6600dffe203ea741b7c192dcf57c959fc225d41" translate="yes" xml:space="preserve">
          <source>func (w *Writer) Write(data []byte) (n int, err error)</source>
          <target state="translated">func (w *Writer)Write(data []byte)(n int,err error)</target>
        </trans-unit>
        <trans-unit id="130be4678ca7fbcf21a45b64661ea7994b7869fc" translate="yes" xml:space="preserve">
          <source>func (w *Writer) Write(p []byte) (n int, err error)</source>
          <target state="translated">func (w *Writer)Write(p []byte)(n int,err error)</target>
        </trans-unit>
        <trans-unit id="09334e7a71bfebc17067c6e7aa9d8b6c954b5bf0" translate="yes" xml:space="preserve">
          <source>func (w *Writer) Write(record []string) error</source>
          <target state="translated">func (w *Writer)Write(record []string)error</target>
        </trans-unit>
        <trans-unit id="3ce668894f072bd6b75021db11c3025905d2709d" translate="yes" xml:space="preserve">
          <source>func (w *Writer) WriteAll(records [][]string) error</source>
          <target state="translated">func (w *Writer)WriteAll(records [][]string)error</target>
        </trans-unit>
        <trans-unit id="69d7261459b530fee5ded74dca6f71896530b836" translate="yes" xml:space="preserve">
          <source>func (w *Writer) WriteField(fieldname, value string) error</source>
          <target state="translated">func (w *Writer)WriteField(nombre de campo,cadena de valor)error</target>
        </trans-unit>
        <trans-unit id="456971cd6bde718c8af4b14ad659fb9bf9f3d15d" translate="yes" xml:space="preserve">
          <source>func (w StreamWriter) Close() error</source>
          <target state="translated">func (w StreamWriter)Close()error</target>
        </trans-unit>
        <trans-unit id="6516139b9096e974c878983b7748b78c9bf8394c" translate="yes" xml:space="preserve">
          <source>func (w StreamWriter) Write(src []byte) (n int, err error)</source>
          <target state="translated">func (w StreamWriter)Write(src []byte)(n int,err error)</target>
        </trans-unit>
        <trans-unit id="bb1d1d6c0517fef020ef1c6494f4a8f34918fb93" translate="yes" xml:space="preserve">
          <source>func (w WaitStatus) Continued() bool</source>
          <target state="translated">func (w WaitStatus)Continued()bool</target>
        </trans-unit>
        <trans-unit id="73cb542965654ca9040a32f8472530bc69156831" translate="yes" xml:space="preserve">
          <source>func (w WaitStatus) CoreDump() bool</source>
          <target state="translated">func (w WaitStatus)CoreDump()bool</target>
        </trans-unit>
        <trans-unit id="c4432c27315feeb5e40a9e14f03018465a15e029" translate="yes" xml:space="preserve">
          <source>func (w WaitStatus) ExitStatus() int</source>
          <target state="translated">func (w WaitStatus)ExitStatus()int</target>
        </trans-unit>
        <trans-unit id="ce78807f26bb40f0bc1998aebc75ed47e0b65e87" translate="yes" xml:space="preserve">
          <source>func (w WaitStatus) Exited() bool</source>
          <target state="translated">func (w WaitStatus)Exited()bool</target>
        </trans-unit>
        <trans-unit id="6f93bb2ff7a28ee6cc8344ba911ef00b025682c1" translate="yes" xml:space="preserve">
          <source>func (w WaitStatus) Signal() Signal</source>
          <target state="translated">func (w WaitStatus)Señal()Señal</target>
        </trans-unit>
        <trans-unit id="c0515bc5fecb076300c60ecfd0bc774211b26ebe" translate="yes" xml:space="preserve">
          <source>func (w WaitStatus) Signaled() bool</source>
          <target state="translated">func (w WaitStatus)Signaled()bool</target>
        </trans-unit>
        <trans-unit id="2c277fc345a2c0e38495ec814c104ee6013f28f7" translate="yes" xml:space="preserve">
          <source>func (w WaitStatus) StopSignal() Signal</source>
          <target state="translated">func (w WaitStatus)StopSignal()Señal</target>
        </trans-unit>
        <trans-unit id="da3057ed50ab70ee185684944815ea70e3a912f9" translate="yes" xml:space="preserve">
          <source>func (w WaitStatus) Stopped() bool</source>
          <target state="translated">func (w WaitStatus)Stopped()bool</target>
        </trans-unit>
        <trans-unit id="929a70386bd17c6c6417dcdc3b342d013b16c5b7" translate="yes" xml:space="preserve">
          <source>func (w WaitStatus) TrapCause() int</source>
          <target state="translated">func (w WaitStatus)TrapCause()int</target>
        </trans-unit>
        <trans-unit id="3ec52adde766ddc29d8c38c36a39e39ec1f9540e" translate="yes" xml:space="preserve">
          <source>func (wg *WaitGroup) Add(delta int)</source>
          <target state="translated">func (wg *WaitGroup)Add(delta int)</target>
        </trans-unit>
        <trans-unit id="5ab137c4dde1c8e46e560e89f854103a4ae50137" translate="yes" xml:space="preserve">
          <source>func (wg *WaitGroup) Done()</source>
          <target state="translated">func (wg *WaitGroup)Done()</target>
        </trans-unit>
        <trans-unit id="a6661841b565e69979150c68fc72422bb9f89d71" translate="yes" xml:space="preserve">
          <source>func (wg *WaitGroup) Wait()</source>
          <target state="translated">func (wg *WaitGroup)Wait()</target>
        </trans-unit>
        <trans-unit id="4ff6258e704d7c4ea4db5460f88c4ba4ffb7bb33" translate="yes" xml:space="preserve">
          <source>func (x *AndExpr) Eval(ok func(tag string) bool) bool</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c316eec7ed0b1bba81b9f81af2e7d54ccb008fe7" translate="yes" xml:space="preserve">
          <source>func (x *AndExpr) String() string</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="520c8c1f4a9b9a5f63fde0faf17468afb6290ad7" translate="yes" xml:space="preserve">
          <source>func (x *ArrayType) End() token.Pos</source>
          <target state="translated">func (x *ArrayType)End()token.Pos</target>
        </trans-unit>
        <trans-unit id="aa13891a574c2124d95307c1e7db02075e847f17" translate="yes" xml:space="preserve">
          <source>func (x *ArrayType) Pos() token.Pos</source>
          <target state="translated">func (x *ArrayType)Pos()token.Pos</target>
        </trans-unit>
        <trans-unit id="48fc516812be4c2d4fa87966c8bc8114e7a5257c" translate="yes" xml:space="preserve">
          <source>func (x *BadExpr) End() token.Pos</source>
          <target state="translated">func (x *BadExpr)End()token.Pos</target>
        </trans-unit>
        <trans-unit id="d2e5dad44792b4cf5fe0cded8abfa95815b3f6ed" translate="yes" xml:space="preserve">
          <source>func (x *BadExpr) Pos() token.Pos</source>
          <target state="translated">func (x *BadExpr)Pos()token.Pos</target>
        </trans-unit>
        <trans-unit id="e90722f7c78f22b2b0adc1a355dce1b4bbd8a5cd" translate="yes" xml:space="preserve">
          <source>func (x *BasicLit) End() token.Pos</source>
          <target state="translated">func (x *BasicLit)End()token.Pos</target>
        </trans-unit>
        <trans-unit id="0d365818e996021e039805be1fed8848751f302d" translate="yes" xml:space="preserve">
          <source>func (x *BasicLit) Pos() token.Pos</source>
          <target state="translated">func(x *BasicLit)Pos()token.Pos</target>
        </trans-unit>
        <trans-unit id="7d207926b2cb17cfd9c9c1099bd82178a7756f45" translate="yes" xml:space="preserve">
          <source>func (x *BinaryExpr) End() token.Pos</source>
          <target state="translated">func (x *BinarioExpr)End()token.Pos</target>
        </trans-unit>
        <trans-unit id="a4af25ecbe1eafc943d3af2964970ef343e0d0c8" translate="yes" xml:space="preserve">
          <source>func (x *BinaryExpr) Pos() token.Pos</source>
          <target state="translated">func (x *BinarioExpr)Pos()token.Pos</target>
        </trans-unit>
        <trans-unit id="c03235f63052c9fdbc1b7b4a14392b0631fb5b81" translate="yes" xml:space="preserve">
          <source>func (x *CallExpr) End() token.Pos</source>
          <target state="translated">func (x *CallExpr)End()token.Pos</target>
        </trans-unit>
        <trans-unit id="1ea4708815bf2a15233759eb33928f4abaf8097d" translate="yes" xml:space="preserve">
          <source>func (x *CallExpr) Pos() token.Pos</source>
          <target state="translated">func (x *CallExpr)Pos()token.Pos</target>
        </trans-unit>
        <trans-unit id="636985ea339cd66554b95e35843c8a2dbe074d2b" translate="yes" xml:space="preserve">
          <source>func (x *ChanType) End() token.Pos</source>
          <target state="translated">func(x *ChanType)End()token.Pos</target>
        </trans-unit>
        <trans-unit id="7b7db46e153a92d89e889a1fe6b7868cbf46511f" translate="yes" xml:space="preserve">
          <source>func (x *ChanType) Pos() token.Pos</source>
          <target state="translated">func(x *ChanType)Pos()token.Pos</target>
        </trans-unit>
        <trans-unit id="826d7b1e5e267668d104407c21c45b95158d27fd" translate="yes" xml:space="preserve">
          <source>func (x *CompositeLit) End() token.Pos</source>
          <target state="translated">func (x *CompositeLit)End()token.Pos</target>
        </trans-unit>
        <trans-unit id="5d9eb8eed1bc46e4783e5efd61bb021103004fa5" translate="yes" xml:space="preserve">
          <source>func (x *CompositeLit) Pos() token.Pos</source>
          <target state="translated">func (x *CompositeLit)Pos()token.Pos</target>
        </trans-unit>
        <trans-unit id="8cbcdf9d00e8f94c3a6a168a331f92215f63feec" translate="yes" xml:space="preserve">
          <source>func (x *Ellipsis) End() token.Pos</source>
          <target state="translated">func (x *Ellipsis)End()token.Pos</target>
        </trans-unit>
        <trans-unit id="c7f3d53648dcded174609619020707759634fd7c" translate="yes" xml:space="preserve">
          <source>func (x *Ellipsis) Pos() token.Pos</source>
          <target state="translated">func (x *Ellipsis)Pos()token.Pos</target>
        </trans-unit>
        <trans-unit id="84f2625a5158fc1b0b20c208cc793ea40e74aa7a" translate="yes" xml:space="preserve">
          <source>func (x *Float) Acc() Accuracy</source>
          <target state="translated">func (x *Flota)Acc()Precisión</target>
        </trans-unit>
        <trans-unit id="993ebbd7d4ea00264299fc89d2d81273c633eb1a" translate="yes" xml:space="preserve">
          <source>func (x *Float) Append(buf []byte, fmt byte, prec int) []byte</source>
          <target state="translated">func (x *Flota)Append(buf []byte,fmt byte,prec int)[]byte</target>
        </trans-unit>
        <trans-unit id="1c5a5068a0e0960a603df5d79ad97b62c380ceed" translate="yes" xml:space="preserve">
          <source>func (x *Float) Cmp(y *Float) int</source>
          <target state="translated">func (x *Flota)Cmp(y *Flota)int</target>
        </trans-unit>
        <trans-unit id="55cdfd6b7dc1f01131ccfe73190d3797f48c96ca" translate="yes" xml:space="preserve">
          <source>func (x *Float) Float32() (float32, Accuracy)</source>
          <target state="translated">func (x *Flota)Flota32()(float32,Precisión)</target>
        </trans-unit>
        <trans-unit id="8d57c59db4aecf636dcd1088a625ea0a422c45df" translate="yes" xml:space="preserve">
          <source>func (x *Float) Float64() (float64, Accuracy)</source>
          <target state="translated">func (x *Flota)Float64()(float64,Precisión)</target>
        </trans-unit>
        <trans-unit id="a03face5c1575a9fd3c4eb8ea2a8b4b2e55f8f30" translate="yes" xml:space="preserve">
          <source>func (x *Float) Format(s fmt.State, format rune)</source>
          <target state="translated">func (x *Flota)Formato(s fmt.Estado,formato runa)</target>
        </trans-unit>
        <trans-unit id="15372f07b8153105d13c7ee0ddfedbf7e04fb8ec" translate="yes" xml:space="preserve">
          <source>func (x *Float) GobEncode() ([]byte, error)</source>
          <target state="translated">func (x *Flota)GobEncode()([]byte,error)</target>
        </trans-unit>
        <trans-unit id="09c9286f36e2af1bd95e4257579e3312584a1b50" translate="yes" xml:space="preserve">
          <source>func (x *Float) Int(z *Int) (*Int, Accuracy)</source>
          <target state="translated">func (x *Flota)Int(z *Int)(*Int,Precisión)</target>
        </trans-unit>
        <trans-unit id="8078c5a78875a608db386230a829243c9c7b03c9" translate="yes" xml:space="preserve">
          <source>func (x *Float) Int64() (int64, Accuracy)</source>
          <target state="translated">func (x *Flota)Int64()(int64,Precisión)</target>
        </trans-unit>
        <trans-unit id="a092d7bfdc14c6aaae246f8e55ed02c8ccae2e5a" translate="yes" xml:space="preserve">
          <source>func (x *Float) IsInf() bool</source>
          <target state="translated">func (x *Float)IsInf()bool</target>
        </trans-unit>
        <trans-unit id="858c392e89c87cc536ab6f9277fbc22c3e67b6ae" translate="yes" xml:space="preserve">
          <source>func (x *Float) IsInt() bool</source>
          <target state="translated">func (x *Flota)IsInt()bool</target>
        </trans-unit>
        <trans-unit id="e4ef752cb486698833b944af0d5cb8d7ab00e2a7" translate="yes" xml:space="preserve">
          <source>func (x *Float) MantExp(mant *Float) (exp int)</source>
          <target state="translated">func (x *Flota)MantExp(mant *Flota)(exp int)</target>
        </trans-unit>
        <trans-unit id="3a9469a59d34125b21cce710d659d62a09f20828" translate="yes" xml:space="preserve">
          <source>func (x *Float) MarshalText() (text []byte, err error)</source>
          <target state="translated">func (x *Flota)MarshalText()(text []byte,err error)</target>
        </trans-unit>
        <trans-unit id="a017a4379ba0b4ada76d59e9672a7e48deb27223" translate="yes" xml:space="preserve">
          <source>func (x *Float) MinPrec() uint</source>
          <target state="translated">func (x *Flota)MinPrec()uint</target>
        </trans-unit>
        <trans-unit id="0fa476fc9ec6185a661af47c3f34aa1348e813e9" translate="yes" xml:space="preserve">
          <source>func (x *Float) Mode() RoundingMode</source>
          <target state="translated">func (x *Flota)Mode()RoundingMode</target>
        </trans-unit>
        <trans-unit id="08ea3bed05d54db4590845f0732186242d6fbd24" translate="yes" xml:space="preserve">
          <source>func (x *Float) Prec() uint</source>
          <target state="translated">func (x *Flota)Prec()uint</target>
        </trans-unit>
        <trans-unit id="61f3da50374f08e24275c553fc0f0f82b462c5da" translate="yes" xml:space="preserve">
          <source>func (x *Float) Rat(z *Rat) (*Rat, Accuracy)</source>
          <target state="translated">func (x *Flota)Rat(z *Rat)(*Rat,Precisión)</target>
        </trans-unit>
        <trans-unit id="0eba0dcad0f8fed039016494b53778ef70e23122" translate="yes" xml:space="preserve">
          <source>func (x *Float) Sign() int</source>
          <target state="translated">func (x *Flota)Sign()int</target>
        </trans-unit>
        <trans-unit id="ac6bb31ca45acd3af367a30e0876e686dbc35c55" translate="yes" xml:space="preserve">
          <source>func (x *Float) Signbit() bool</source>
          <target state="translated">func (x *Flota)Signbit()bool</target>
        </trans-unit>
        <trans-unit id="79e914bffef43931f0c5c493b2e65262ab74fbdf" translate="yes" xml:space="preserve">
          <source>func (x *Float) String() string</source>
          <target state="translated">func (x *Flota)String()string</target>
        </trans-unit>
        <trans-unit id="ca6fe0c1e6d3da386eb9af0f01a8053f61726e25" translate="yes" xml:space="preserve">
          <source>func (x *Float) Text(format byte, prec int) string</source>
          <target state="translated">func (x *Flota)Texto(formato byte,prec int)cadena</target>
        </trans-unit>
        <trans-unit id="00f7c195c9184187afd61e13f58d74f2423f237a" translate="yes" xml:space="preserve">
          <source>func (x *Float) Uint64() (uint64, Accuracy)</source>
          <target state="translated">func (x *Flota)Uint64()(uint64,Precisión)</target>
        </trans-unit>
        <trans-unit id="abc2d9ae2fec98e9c1d32c34b88a8b4feba4a9e1" translate="yes" xml:space="preserve">
          <source>func (x *FuncLit) End() token.Pos</source>
          <target state="translated">func(x *FuncLit)End()token.Pos</target>
        </trans-unit>
        <trans-unit id="1d546abf823d1db83e7850db3eb2aef55f7b1cdc" translate="yes" xml:space="preserve">
          <source>func (x *FuncLit) Pos() token.Pos</source>
          <target state="translated">func(x *FuncLit)Pos()token.Pos</target>
        </trans-unit>
        <trans-unit id="f8469d401f2e3b0de7eeb608a32c83bae56c8d32" translate="yes" xml:space="preserve">
          <source>func (x *FuncType) End() token.Pos</source>
          <target state="translated">func (x *FuncType)End()token.Pos</target>
        </trans-unit>
        <trans-unit id="b257d64c578dbfb32ae2f6d4d5f1f84fb3be657d" translate="yes" xml:space="preserve">
          <source>func (x *FuncType) Pos() token.Pos</source>
          <target state="translated">func(x *FuncType)Pos()token.Pos</target>
        </trans-unit>
        <trans-unit id="387f57c6ee37d1ce79aa655a140a8dffc8951abd" translate="yes" xml:space="preserve">
          <source>func (x *Ident) End() token.Pos</source>
          <target state="translated">func (x *Ident)End()token.Pos</target>
        </trans-unit>
        <trans-unit id="735db4e0255c0f19107ad23fb35b5114c5333ad1" translate="yes" xml:space="preserve">
          <source>func (x *Ident) Pos() token.Pos</source>
          <target state="translated">func (x *Ident)Pos()token.Pos</target>
        </trans-unit>
        <trans-unit id="e6de3d07d919fcba4d53d4a722c770d7b92fafb3" translate="yes" xml:space="preserve">
          <source>func (x *Index) Bytes() []byte</source>
          <target state="translated">func (x *Índice)Bytes()[]byte</target>
        </trans-unit>
        <trans-unit id="017e4bebae335051bbcaff1f2315b0aee4ec639b" translate="yes" xml:space="preserve">
          <source>func (x *Index) FindAllIndex(r *regexp.Regexp, n int) (result [][]int)</source>
          <target state="translated">func (x *Index)FindAllIndex(r *regexp.Regexp,n int)(result [][]int)</target>
        </trans-unit>
        <trans-unit id="f674499f82562927f37772e499e79a0e387f9cf2" translate="yes" xml:space="preserve">
          <source>func (x *Index) Lookup(s []byte, n int) (result []int)</source>
          <target state="translated">func (x *Index)Lookup(s []byte,n int)(resultado []int)</target>
        </trans-unit>
        <trans-unit id="5220497e6f1a310c03f566390f97e76532f26707" translate="yes" xml:space="preserve">
          <source>func (x *Index) Read(r io.Reader) error</source>
          <target state="translated">func (x *index)Error de lectura (r io.Reader)</target>
        </trans-unit>
        <trans-unit id="b13a5deea6ef2033740791f25ebc32448a6c4793" translate="yes" xml:space="preserve">
          <source>func (x *Index) Write(w io.Writer) error</source>
          <target state="translated">func (x *Index)Write(w io.Writer)error</target>
        </trans-unit>
        <trans-unit id="fdb8dc781574a635b05e2bf8efd5b0c25159847b" translate="yes" xml:space="preserve">
          <source>func (x *IndexExpr) End() token.Pos</source>
          <target state="translated">func (x *IndexExpr)End()token.Pos</target>
        </trans-unit>
        <trans-unit id="2bcfae1a88feb3f1beec9fa47c1c958b4f028e4d" translate="yes" xml:space="preserve">
          <source>func (x *IndexExpr) Pos() token.Pos</source>
          <target state="translated">func (x *IndexExpr)Pos()token.Pos</target>
        </trans-unit>
        <trans-unit id="2e1d4992aa73ced67efc0bbcdd8cde131281a7dc" translate="yes" xml:space="preserve">
          <source>func (x *Int) Append(buf []byte, base int) []byte</source>
          <target state="translated">func (x *Int)Append(buf []byte,base int)[]byte</target>
        </trans-unit>
        <trans-unit id="1a76815ffa12d652ee7783aa2a5e45f3ed53de29" translate="yes" xml:space="preserve">
          <source>func (x *Int) Bit(i int) uint</source>
          <target state="translated">func (x *Int)Bit(i int)uint</target>
        </trans-unit>
        <trans-unit id="4c37f1eec8f65563902951d1dcbf4828acdb39ee" translate="yes" xml:space="preserve">
          <source>func (x *Int) BitLen() int</source>
          <target state="translated">func (x *Int)BitLen()int</target>
        </trans-unit>
        <trans-unit id="721baff73e9796634b5bf3bd7bf94ccb004e6c5e" translate="yes" xml:space="preserve">
          <source>func (x *Int) Bits() []Word</source>
          <target state="translated">func (x *Int)Bits()[]Word</target>
        </trans-unit>
        <trans-unit id="94d28b6e796fc4dcf68c894c9d28f9fd3402c3bb" translate="yes" xml:space="preserve">
          <source>func (x *Int) Bytes() []byte</source>
          <target state="translated">func (x *Int)Bytes()[]byte</target>
        </trans-unit>
        <trans-unit id="ddda283261ef1a946bdf11deaece1b827bdf28b6" translate="yes" xml:space="preserve">
          <source>func (x *Int) Cmp(y *Int) (r int)</source>
          <target state="translated">func (x *Int)Cmp(y *Int)(r int)</target>
        </trans-unit>
        <trans-unit id="d9f9fcfa4fede0bc9cdf9ab1456bb0b93c4ff0c5" translate="yes" xml:space="preserve">
          <source>func (x *Int) CmpAbs(y *Int) int</source>
          <target state="translated">func (x *Int)CmpAbs(y *Int)int</target>
        </trans-unit>
        <trans-unit id="82e8c7bc93edf3c684a0e72946eb560494eb225f" translate="yes" xml:space="preserve">
          <source>func (x *Int) FillBytes(buf []byte) []byte</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e10121ef4117019eaf6d7fadf2f3918122be46f1" translate="yes" xml:space="preserve">
          <source>func (x *Int) Format(s fmt.State, ch rune)</source>
          <target state="translated">func (x *Int)Formato(s fmt.Estado,ch runa)</target>
        </trans-unit>
        <trans-unit id="ae9f4da78e622b24babaad83fcb864bd1a2a4fb1" translate="yes" xml:space="preserve">
          <source>func (x *Int) GobEncode() ([]byte, error)</source>
          <target state="translated">func (x *Int)GobEncode()([]byte,error)</target>
        </trans-unit>
        <trans-unit id="2d08ab2e4297b6abfd7a5f31002bfdcb0cbea403" translate="yes" xml:space="preserve">
          <source>func (x *Int) Int64() int64</source>
          <target state="translated">func (x *Int)Int64()int64</target>
        </trans-unit>
        <trans-unit id="eca3291c138c403ad693a96a9c2752264b51d1ad" translate="yes" xml:space="preserve">
          <source>func (x *Int) IsInt64() bool</source>
          <target state="translated">func (x *Int)IsInt64()bool</target>
        </trans-unit>
        <trans-unit id="5dab2f4ba4c38e285d4fdfa0f5c3f8314ef80975" translate="yes" xml:space="preserve">
          <source>func (x *Int) IsUint64() bool</source>
          <target state="translated">func (x *Int)IsUint64()bool</target>
        </trans-unit>
        <trans-unit id="e362f62e57b41f5b994fb5eeb7d7fd0092e94f7a" translate="yes" xml:space="preserve">
          <source>func (x *Int) MarshalJSON() ([]byte, error)</source>
          <target state="translated">func (x *Int)MarshalJSON()([]byte,error)</target>
        </trans-unit>
        <trans-unit id="5a13ff5d3d432520cd1e05b38d68298fb50cdbb3" translate="yes" xml:space="preserve">
          <source>func (x *Int) MarshalText() (text []byte, err error)</source>
          <target state="translated">func (x *Int)MarshalText()(text []byte,err error)</target>
        </trans-unit>
        <trans-unit id="a4b7329694fd329899f112de38b7d6f164f5abde" translate="yes" xml:space="preserve">
          <source>func (x *Int) ProbablyPrime(n int) bool</source>
          <target state="translated">func (x *Int)ProbablementePrime(n int)bool</target>
        </trans-unit>
        <trans-unit id="5dd69a88723cf0992c7c43d55ca1384aca277141" translate="yes" xml:space="preserve">
          <source>func (x *Int) Sign() int</source>
          <target state="translated">func (x *Int)Sign()int</target>
        </trans-unit>
        <trans-unit id="674ddf3868eaba2a7f7cad23fcbc291fc2de9abe" translate="yes" xml:space="preserve">
          <source>func (x *Int) String() string</source>
          <target state="translated">func (x *Int)String()string</target>
        </trans-unit>
        <trans-unit id="5f165189cd6cc073dc2bdb6897a1fb6be4379f08" translate="yes" xml:space="preserve">
          <source>func (x *Int) Text(base int) string</source>
          <target state="translated">func (x *Int)Texto(base int)cadena</target>
        </trans-unit>
        <trans-unit id="058f80b47981b4d9b85103233103d4b768326dfe" translate="yes" xml:space="preserve">
          <source>func (x *Int) TrailingZeroBits() uint</source>
          <target state="translated">func (x *Int)TrailingZeroBits()uint</target>
        </trans-unit>
        <trans-unit id="c53fee04bfbeb7a46be8aa5bc7f9732c7e78afc9" translate="yes" xml:space="preserve">
          <source>func (x *Int) Uint64() uint64</source>
          <target state="translated">func (x *Int)Uint64()uint64</target>
        </trans-unit>
        <trans-unit id="9274efe403ff65fcab258c4c971009997860d7a0" translate="yes" xml:space="preserve">
          <source>func (x *InterfaceType) End() token.Pos</source>
          <target state="translated">func (x *InterfaceType)End()token.Pos</target>
        </trans-unit>
        <trans-unit id="e31e285172489e41779eb5dc3d3799e0464aadea" translate="yes" xml:space="preserve">
          <source>func (x *InterfaceType) Pos() token.Pos</source>
          <target state="translated">func (x *InterfaceType)Pos()token.Pos</target>
        </trans-unit>
        <trans-unit id="b9f551c9ad971a6fb3cd7f56243fbfe18fe249b3" translate="yes" xml:space="preserve">
          <source>func (x *KeyValueExpr) End() token.Pos</source>
          <target state="translated">func (x *KeyValueExpr)End()token.Pos</target>
        </trans-unit>
        <trans-unit id="ebca08af0f00537dbced2b4f3ac513761625a64e" translate="yes" xml:space="preserve">
          <source>func (x *KeyValueExpr) Pos() token.Pos</source>
          <target state="translated">func (x *KeyValueExpr)Pos()token.Pos</target>
        </trans-unit>
        <trans-unit id="9a3e97370402d9779b53ecbc93978fc2940d7963" translate="yes" xml:space="preserve">
          <source>func (x *MapType) End() token.Pos</source>
          <target state="translated">func(x *MapType)End()token.Pos</target>
        </trans-unit>
        <trans-unit id="eaa3798c4bcbc99d61d28b6577ef0ced68a8a1bf" translate="yes" xml:space="preserve">
          <source>func (x *MapType) Pos() token.Pos</source>
          <target state="translated">func(x *MapType)Pos()token.Pos</target>
        </trans-unit>
        <trans-unit id="fa5cbc3bb364ff151bf8d788890d5c8c58cfc73c" translate="yes" xml:space="preserve">
          <source>func (x *NotExpr) Eval(ok func(tag string) bool) bool</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d9bfad22d518f4ac58bbe14666431dea1e5e726a" translate="yes" xml:space="preserve">
          <source>func (x *NotExpr) String() string</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="34485af47550cb3009442de6ca27e0e0b8c5bb2f" translate="yes" xml:space="preserve">
          <source>func (x *OrExpr) Eval(ok func(tag string) bool) bool</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="51284d9099d49b2fa5c2a5995742ddf083543805" translate="yes" xml:space="preserve">
          <source>func (x *OrExpr) String() string</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bb7b3fb9eae9c240c3b0d6e167d0235fbdfca42a" translate="yes" xml:space="preserve">
          <source>func (x *ParenExpr) End() token.Pos</source>
          <target state="translated">func (x *ParenExpr)End()token.Pos</target>
        </trans-unit>
        <trans-unit id="31698d8d7c622d41e5a767c851950361b315db1b" translate="yes" xml:space="preserve">
          <source>func (x *ParenExpr) Pos() token.Pos</source>
          <target state="translated">func (x *ParenExpr)Pos()token.Pos</target>
        </trans-unit>
        <trans-unit id="53dbc2925d8dee1477abc26b11c485ee7d53172f" translate="yes" xml:space="preserve">
          <source>func (x *Rat) Cmp(y *Rat) int</source>
          <target state="translated">func(x *Rat)Cmp(y *Rat)int</target>
        </trans-unit>
        <trans-unit id="34020081133317232e105e0ca22032046844b930" translate="yes" xml:space="preserve">
          <source>func (x *Rat) Denom() *Int</source>
          <target state="translated">func (x *Rat)Denom()*Int</target>
        </trans-unit>
        <trans-unit id="909c902fc81b59825298c88b59ba006dc72ddf7f" translate="yes" xml:space="preserve">
          <source>func (x *Rat) Float32() (f float32, exact bool)</source>
          <target state="translated">func (x *Rat)Float32()(f float32,bool exacto)</target>
        </trans-unit>
        <trans-unit id="4d883541e6024e3cd9c821e874c73801e330e6ca" translate="yes" xml:space="preserve">
          <source>func (x *Rat) Float64() (f float64, exact bool)</source>
          <target state="translated">func (x *Rat)Float64()(f float64,bool exacto)</target>
        </trans-unit>
        <trans-unit id="d6503a691278e8221c6595b2c2ad6d7b410db184" translate="yes" xml:space="preserve">
          <source>func (x *Rat) FloatString(prec int) string</source>
          <target state="translated">func (x *Rat)FloatString(prec int)string</target>
        </trans-unit>
        <trans-unit id="617ed31b000d864bbff1b52749bb62e888779c4d" translate="yes" xml:space="preserve">
          <source>func (x *Rat) GobEncode() ([]byte, error)</source>
          <target state="translated">func (x *Rat)GobEncode()([]byte,error)</target>
        </trans-unit>
        <trans-unit id="619fe0f48675a3c9274c9ad900bd1b6d8c0c7d0d" translate="yes" xml:space="preserve">
          <source>func (x *Rat) IsInt() bool</source>
          <target state="translated">func (x *Rat)IsInt()bool</target>
        </trans-unit>
        <trans-unit id="8bcae6a33d265e64bbcf59d7354319ab20383a8b" translate="yes" xml:space="preserve">
          <source>func (x *Rat) MarshalText() (text []byte, err error)</source>
          <target state="translated">func (x *Rat)MarshalText()(text []byte,err error)</target>
        </trans-unit>
        <trans-unit id="ba5c2e502bf97d67c8bf0550186f6c4477bffd9d" translate="yes" xml:space="preserve">
          <source>func (x *Rat) Num() *Int</source>
          <target state="translated">func (x *Rat)Num()*Int</target>
        </trans-unit>
        <trans-unit id="473ed73505fb61d9544497589e4f55f999d4c82c" translate="yes" xml:space="preserve">
          <source>func (x *Rat) RatString() string</source>
          <target state="translated">func (x *Rat)RatString()string</target>
        </trans-unit>
        <trans-unit id="2eff13a9d9b960cbfe8e0547210343c7cc0fcf43" translate="yes" xml:space="preserve">
          <source>func (x *Rat) Sign() int</source>
          <target state="translated">func (x *Rat)Sign()int</target>
        </trans-unit>
        <trans-unit id="f4304c3b419ee75f50a2d26714e48af3144e0bf1" translate="yes" xml:space="preserve">
          <source>func (x *Rat) String() string</source>
          <target state="translated">func (x *Rat)String()string</target>
        </trans-unit>
        <trans-unit id="40d5cc588cbe5478104bb6c880bdc8932fd4751f" translate="yes" xml:space="preserve">
          <source>func (x *Regexp) Equal(y *Regexp) bool</source>
          <target state="translated">func (x *Regexp)Equal(y *Regexp)bool</target>
        </trans-unit>
        <trans-unit id="193b17db03f65d08a53fa5e538959e1d1a3bd082" translate="yes" xml:space="preserve">
          <source>func (x *SelectorExpr) End() token.Pos</source>
          <target state="translated">func (x *SelectorExpr)End()token.Pos</target>
        </trans-unit>
        <trans-unit id="f4c81b6a4df1ab6bd630b9c013e3e3fdbc8625c5" translate="yes" xml:space="preserve">
          <source>func (x *SelectorExpr) Pos() token.Pos</source>
          <target state="translated">func (x *SelectorExpr)Pos()token.Pos</target>
        </trans-unit>
        <trans-unit id="7aa400dad8ef6b7c80464bdf8764952bcde6ca35" translate="yes" xml:space="preserve">
          <source>func (x *SliceExpr) End() token.Pos</source>
          <target state="translated">func (x *SliceExpr)End()token.Pos</target>
        </trans-unit>
        <trans-unit id="8eee18bdf8f79d62781cd00e3fda2ccaf36ccf75" translate="yes" xml:space="preserve">
          <source>func (x *SliceExpr) Pos() token.Pos</source>
          <target state="translated">func (x *SliceExpr)Pos()token.Pos</target>
        </trans-unit>
        <trans-unit id="e2807fc084648c0ed910aee7441ee6037d814a45" translate="yes" xml:space="preserve">
          <source>func (x *StarExpr) End() token.Pos</source>
          <target state="translated">func (x *StarExpr)End()token.Pos</target>
        </trans-unit>
        <trans-unit id="e0013ce5a1937caefa6e00fee046f63128de960e" translate="yes" xml:space="preserve">
          <source>func (x *StarExpr) Pos() token.Pos</source>
          <target state="translated">func (x *StarExpr)Pos()token.Pos</target>
        </trans-unit>
        <trans-unit id="84ee3f37a366ed9ad79df74b1927c530c4b64e7d" translate="yes" xml:space="preserve">
          <source>func (x *StructType) End() token.Pos</source>
          <target state="translated">func (x *StructType)End()token.Pos</target>
        </trans-unit>
        <trans-unit id="7f096110f8092d8996bbda58d6dd6c2fed44991f" translate="yes" xml:space="preserve">
          <source>func (x *StructType) Pos() token.Pos</source>
          <target state="translated">func (x *Tipo de estructura)Pos()token.Pos</target>
        </trans-unit>
        <trans-unit id="c39388c208d0d47b16309ac53fd0d4777552702e" translate="yes" xml:space="preserve">
          <source>func (x *TagExpr) Eval(ok func(tag string) bool) bool</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dd0c5e38387d6469138112cc4041ada63d2f583f" translate="yes" xml:space="preserve">
          <source>func (x *TagExpr) String() string</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9774898ad3142ed7d4c72dfb87bac7c7bdf051d6" translate="yes" xml:space="preserve">
          <source>func (x *TypeAssertExpr) End() token.Pos</source>
          <target state="translated">func (x *TypeAssertExpr)End()token.Pos</target>
        </trans-unit>
        <trans-unit id="040d5c2955bd18e4a3892c2795ee0ea2a2d69957" translate="yes" xml:space="preserve">
          <source>func (x *TypeAssertExpr) Pos() token.Pos</source>
          <target state="translated">func (x *TypeAssertExpr)Pos()token.Pos</target>
        </trans-unit>
        <trans-unit id="10d15f2e0419f9cf027c73c951187953b3e899fe" translate="yes" xml:space="preserve">
          <source>func (x *UnaryExpr) End() token.Pos</source>
          <target state="translated">func (x *UnaryExpr)End()token.Pos</target>
        </trans-unit>
        <trans-unit id="52d6bb64a65036c4095766b727a107d5a86194cc" translate="yes" xml:space="preserve">
          <source>func (x *UnaryExpr) Pos() token.Pos</source>
          <target state="translated">func (x *UnaryExpr)Pos()token.Pos</target>
        </trans-unit>
        <trans-unit id="f56f262ca729ed5a90ce0c0b18f11974d0a8ba5c" translate="yes" xml:space="preserve">
          <source>func (x Float64Slice) Len() int</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2cd3a4eb21d1c915990f44aa8423a8de0d69413a" translate="yes" xml:space="preserve">
          <source>func (x Float64Slice) Less(i, j int) bool</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="04257e9ac8e2f8248dded7f7faeb601b7444536f" translate="yes" xml:space="preserve">
          <source>func (x Float64Slice) Sort()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1d57989e72e1c2c5dc03746b81a8461db025b5fa" translate="yes" xml:space="preserve">
          <source>func (x Float64Slice) Swap(i, j int)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8a2a705f78629311bf4a025397c7f70ba30fedca" translate="yes" xml:space="preserve">
          <source>func (x IntSlice) Len() int</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="28a12d1f7301678dbb0ae51b6c08b3606b7873db" translate="yes" xml:space="preserve">
          <source>func (x IntSlice) Less(i, j int) bool</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c5279744781d22aba28e7648508c0d54c6147899" translate="yes" xml:space="preserve">
          <source>func (x IntSlice) Sort()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="920fb4cf719131781ed4d7eb5fb7b1ab1a216dc3" translate="yes" xml:space="preserve">
          <source>func (x IntSlice) Swap(i, j int)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="80cd9f46f05c8b5c0b6b032c43e8f0534c568283" translate="yes" xml:space="preserve">
          <source>func (x StringSlice) Len() int</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a6923851cba6742a3639513ab62bb752b1aa4eef" translate="yes" xml:space="preserve">
          <source>func (x StringSlice) Less(i, j int) bool</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a3ecde5d3a3dbda854d93e8bb40df740e52f8b78" translate="yes" xml:space="preserve">
          <source>func (x StringSlice) Sort()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8a9b105faa9891a374a39e909b28df90b4b15d26" translate="yes" xml:space="preserve">
          <source>func (x StringSlice) Swap(i, j int)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="15536609e987857dd8f06c91a52be8d8eb1a9b5f" translate="yes" xml:space="preserve">
          <source>func (z *Float) Abs(x *Float) *Float</source>
          <target state="translated">Func (con *Flota)Abs(x *Flota)*Flota</target>
        </trans-unit>
        <trans-unit id="34f9bb80b4be7cc6ab77d522e2759d47ed11745f" translate="yes" xml:space="preserve">
          <source>func (z *Float) Add(x, y *Float) *Float</source>
          <target state="translated">libra (con *Flotación)Añadir(x,y *Flotación)*Flotación</target>
        </trans-unit>
        <trans-unit id="0416d1f703e6010e4f1a3555936f40ec63be2aaf" translate="yes" xml:space="preserve">
          <source>func (z *Float) Copy(x *Float) *Float</source>
          <target state="translated">libra (con *Flotación)Copia(x *Flotación)*Flotación</target>
        </trans-unit>
        <trans-unit id="2e7822ec0a10c665103f130401810862f3685764" translate="yes" xml:space="preserve">
          <source>func (z *Float) GobDecode(buf []byte) error</source>
          <target state="translated">func (z *Flota)GobDecode(buf []byte)error</target>
        </trans-unit>
        <trans-unit id="b563afff0b56572d5cd8b3db32de7ee35b76136b" translate="yes" xml:space="preserve">
          <source>func (z *Float) Mul(x, y *Float) *Float</source>
          <target state="translated">func (z *Flota)Mul(x,y *Flota)*Flota</target>
        </trans-unit>
        <trans-unit id="5515545029d30c8aef6996fd17c5a509d843f248" translate="yes" xml:space="preserve">
          <source>func (z *Float) Neg(x *Float) *Float</source>
          <target state="translated">libra (con *Flotación)Neg(x *Flotación)*Flotación</target>
        </trans-unit>
        <trans-unit id="5f289eefda109edb4058957884ae4caea7f19f7d" translate="yes" xml:space="preserve">
          <source>func (z *Float) Parse(s string, base int) (f *Float, b int, err error)</source>
          <target state="translated">func (z *Flotación)Parse(s string,base int)(f *Flotación,b int,err error)</target>
        </trans-unit>
        <trans-unit id="d1699fa105a72b4eb8583f486bba17e6cae0d633" translate="yes" xml:space="preserve">
          <source>func (z *Float) Quo(x, y *Float) *Float</source>
          <target state="translated">func (z *Float)Quo(x,y *Float)*Float</target>
        </trans-unit>
        <trans-unit id="b1d8a75a342fce091827353f467e8a56010c9297" translate="yes" xml:space="preserve">
          <source>func (z *Float) Scan(s fmt.ScanState, ch rune) error</source>
          <target state="translated">Func (z *Float)Scan(s fmt.ScanState,ch rune)błąd</target>
        </trans-unit>
        <trans-unit id="74fb2cf12de44957c6a1abdcddc22e846bd97710" translate="yes" xml:space="preserve">
          <source>func (z *Float) Set(x *Float) *Float</source>
          <target state="translated">Func (z *Float)Set(x *Float)*Float</target>
        </trans-unit>
        <trans-unit id="f252d6c1945441caec82a9beae9cb1fbe3fe4e23" translate="yes" xml:space="preserve">
          <source>func (z *Float) SetFloat64(x float64) *Float</source>
          <target state="translated">func (z *Float)SetFloat64(x float64)*Float</target>
        </trans-unit>
        <trans-unit id="bc9b73f6c697fcc278ba97cd209a4cb5a0478e48" translate="yes" xml:space="preserve">
          <source>func (z *Float) SetInf(signbit bool) *Float</source>
          <target state="translated">func (z *Float)SetInf(signbit bool)*Float</target>
        </trans-unit>
        <trans-unit id="2509b98d03e9fb132e3198bf03a95c6e88583ba9" translate="yes" xml:space="preserve">
          <source>func (z *Float) SetInt(x *Int) *Float</source>
          <target state="translated">func (z *Float)SetInt(x *Int)*Float</target>
        </trans-unit>
        <trans-unit id="275e6c7587895e932425c6a8902f34b58f459e21" translate="yes" xml:space="preserve">
          <source>func (z *Float) SetInt64(x int64) *Float</source>
          <target state="translated">func (z *Float)SetInt64(x int64)*Float</target>
        </trans-unit>
        <trans-unit id="41308f47cd39aa83acb220022556c45b17bcff4c" translate="yes" xml:space="preserve">
          <source>func (z *Float) SetMantExp(mant *Float, exp int) *Float</source>
          <target state="translated">func (z *Float)SetMantExp(mant *Float,exp int)*Float</target>
        </trans-unit>
        <trans-unit id="5290dc8fb0ec1c22c1d861740264bd88fc728cf0" translate="yes" xml:space="preserve">
          <source>func (z *Float) SetMode(mode RoundingMode) *Float</source>
          <target state="translated">Func (z *Float)SetMode(tryb RoundingMode)*Float</target>
        </trans-unit>
        <trans-unit id="69523d3022a9bc9a6560137e734a0c624ae94c9f" translate="yes" xml:space="preserve">
          <source>func (z *Float) SetPrec(prec uint) *Float</source>
          <target state="translated">func (z *Float)SetPrec(prec uint)*Float</target>
        </trans-unit>
        <trans-unit id="7c70c5590022eaad939b757d3de818725447fd79" translate="yes" xml:space="preserve">
          <source>func (z *Float) SetRat(x *Rat) *Float</source>
          <target state="translated">func(z *Float)SetRat(x *Rat)*Float</target>
        </trans-unit>
        <trans-unit id="fbf182e14f8dc21d3f141ee5c755febdc32a4fde" translate="yes" xml:space="preserve">
          <source>func (z *Float) SetString(s string) (*Float, bool)</source>
          <target state="translated">func (z *Float)SetString(s string)(*Float,bool)</target>
        </trans-unit>
        <trans-unit id="cd43a536b4adeaacc77b25bdeea348356ea977f8" translate="yes" xml:space="preserve">
          <source>func (z *Float) SetUint64(x uint64) *Float</source>
          <target state="translated">func (z *Float)SetUint64(x uint64)*Float</target>
        </trans-unit>
        <trans-unit id="e3dd4d8ad1c448aa8bd7d12dfae8f345c8283ffb" translate="yes" xml:space="preserve">
          <source>func (z *Float) Sqrt(x *Float) *Float</source>
          <target state="translated">Sqrt(x *Float)*Float</target>
        </trans-unit>
        <trans-unit id="99c6f606609cec1f6d908959047da494d07b3730" translate="yes" xml:space="preserve">
          <source>func (z *Float) Sub(x, y *Float) *Float</source>
          <target state="translated">pound (with *Float)Sub(x,y *Float)*Float</target>
        </trans-unit>
        <trans-unit id="6d5b9cd93e89c216e20e6d1d6968659d994e2822" translate="yes" xml:space="preserve">
          <source>func (z *Float) UnmarshalText(text []byte) error</source>
          <target state="translated">func (z *Float)UnmarshalText(tekst []bajt)błąd</target>
        </trans-unit>
        <trans-unit id="b7f4dd34363a4de00ee5777a3d9f332c45f3ef9e" translate="yes" xml:space="preserve">
          <source>func (z *Int) Abs(x *Int) *Int</source>
          <target state="translated">func (z *Int)Abs(x *Int)*Int</target>
        </trans-unit>
        <trans-unit id="937a67c42fde96e462bdb7ac163eee667434200e" translate="yes" xml:space="preserve">
          <source>func (z *Int) Add(x, y *Int) *Int</source>
          <target state="translated">func (z *Int)Add(x,y *Int)*Int</target>
        </trans-unit>
        <trans-unit id="b68480a56e2b8ccab93e2ff224f88556741388c7" translate="yes" xml:space="preserve">
          <source>func (z *Int) And(x, y *Int) *Int</source>
          <target state="translated">func (z *Int)I(x,y *Int)*Int</target>
        </trans-unit>
        <trans-unit id="8c82def95c8a3a5861e2df6cf159b84528568f90" translate="yes" xml:space="preserve">
          <source>func (z *Int) AndNot(x, y *Int) *Int</source>
          <target state="translated">func (z *Int)AndNot(x,y *Int)*Int</target>
        </trans-unit>
        <trans-unit id="cb44cfee1e138dcc7e42b9c20f2e32debf03cfa1" translate="yes" xml:space="preserve">
          <source>func (z *Int) Binomial(n, k int64) *Int</source>
          <target state="translated">func (z *Int)Binomial(n,k int64)*Int</target>
        </trans-unit>
        <trans-unit id="bfb4b3d7f074228305440ad278c460cbb122c027" translate="yes" xml:space="preserve">
          <source>func (z *Int) Div(x, y *Int) *Int</source>
          <target state="translated">func (z *Int)Div(x,y *Int)*Int</target>
        </trans-unit>
        <trans-unit id="22a4f77b297dc1ce841aaec2d125579fbe368afa" translate="yes" xml:space="preserve">
          <source>func (z *Int) DivMod(x, y, m *Int) (*Int, *Int)</source>
          <target state="translated">func (z *Int)DivMod(x,y,m *Int)(*Int,*Int)</target>
        </trans-unit>
        <trans-unit id="4cdc35b2e4c13a17638787b83e4997dd29da59e3" translate="yes" xml:space="preserve">
          <source>func (z *Int) Exp(x, y, m *Int) *Int</source>
          <target state="translated">func (z *Int)Exp(x,y,m *Int)*Int</target>
        </trans-unit>
        <trans-unit id="bc40d4fbcf50d33af42ec0fc5858f2fc61f6b997" translate="yes" xml:space="preserve">
          <source>func (z *Int) GCD(x, y, a, b *Int) *Int</source>
          <target state="translated">func (z *Int)GCD(x,y,a,b *Int)*Int</target>
        </trans-unit>
        <trans-unit id="3d8adcf2879817a12021e3d1af44153e97d7cd40" translate="yes" xml:space="preserve">
          <source>func (z *Int) GobDecode(buf []byte) error</source>
          <target state="translated">błąd func (z *Int)GobDecode(buf []bajt)</target>
        </trans-unit>
        <trans-unit id="709d012d236bec2844ea298aa809477a1543cc5d" translate="yes" xml:space="preserve">
          <source>func (z *Int) Lsh(x *Int, n uint) *Int</source>
          <target state="translated">func (z *Int)Lsh(x *Int,n uint)*Int</target>
        </trans-unit>
        <trans-unit id="6a1ceabdff186aa34137d8c6dab2dca76b4f2dfb" translate="yes" xml:space="preserve">
          <source>func (z *Int) Mod(x, y *Int) *Int</source>
          <target state="translated">func (z *Int)Mod(x,y *Int)*Int</target>
        </trans-unit>
        <trans-unit id="0585ea5122291517bc8f4a067f808a4284417e0d" translate="yes" xml:space="preserve">
          <source>func (z *Int) ModInverse(g, n *Int) *Int</source>
          <target state="translated">func (z *Int)ModInverse(g,n *Int)*Int</target>
        </trans-unit>
        <trans-unit id="ac5fc73129aff51f90089d1778813c75a1111f82" translate="yes" xml:space="preserve">
          <source>func (z *Int) ModSqrt(x, p *Int) *Int</source>
          <target state="translated">func (z *Int)ModSqrt(x,p *Int)*Int</target>
        </trans-unit>
        <trans-unit id="7009f7610af615adae29a818a1f29e5d4154a659" translate="yes" xml:space="preserve">
          <source>func (z *Int) Mul(x, y *Int) *Int</source>
          <target state="translated">func (z *Int)Mul(x,y *Int)*Int</target>
        </trans-unit>
        <trans-unit id="9adce673ae56835343ace70e71e606bf6fadcd1a" translate="yes" xml:space="preserve">
          <source>func (z *Int) MulRange(a, b int64) *Int</source>
          <target state="translated">func (z *Int)MulRange(a,b int64)*Int</target>
        </trans-unit>
        <trans-unit id="cec3b4215567e50a6cca0b7ddaad665595f9603e" translate="yes" xml:space="preserve">
          <source>func (z *Int) Neg(x *Int) *Int</source>
          <target state="translated">func (z *Int)Neg(x *Int)*Int</target>
        </trans-unit>
        <trans-unit id="1cf3bda5460b4ebd0d66a2f61a67360db6d50d7d" translate="yes" xml:space="preserve">
          <source>func (z *Int) Not(x *Int) *Int</source>
          <target state="translated">func (z *Int)Nie(x *Int)*Int</target>
        </trans-unit>
        <trans-unit id="c7c6f819cb7b71fb43a32d23a6df05b176a79814" translate="yes" xml:space="preserve">
          <source>func (z *Int) Or(x, y *Int) *Int</source>
          <target state="translated">func (z *Int)lub(x,y *Int)*Int</target>
        </trans-unit>
        <trans-unit id="bff95fc9d5dc56c5c3501b02aac5077a798a4b98" translate="yes" xml:space="preserve">
          <source>func (z *Int) Quo(x, y *Int) *Int</source>
          <target state="translated">func (z *Int)Quo(x,y *Int)*Int</target>
        </trans-unit>
        <trans-unit id="ba9baac99c3c85fa34dbc327cd563c15be5f5003" translate="yes" xml:space="preserve">
          <source>func (z *Int) QuoRem(x, y, r *Int) (*Int, *Int)</source>
          <target state="translated">func (z *Int)QuoRem(x,y,r *Int)(*Int,*Int)</target>
        </trans-unit>
        <trans-unit id="e62f62fe79ac2178d9e73296f6f762d994c37da9" translate="yes" xml:space="preserve">
          <source>func (z *Int) Rand(rnd *rand.Rand, n *Int) *Int</source>
          <target state="translated">func(z *Int)Rand(rnd *rand.Rand,n *Int)*Int</target>
        </trans-unit>
        <trans-unit id="74bf64240b66920a86c249215a13b52c162bab45" translate="yes" xml:space="preserve">
          <source>func (z *Int) Rem(x, y *Int) *Int</source>
          <target state="translated">func (z *Int)Hamulec(x,y *Int)*Int</target>
        </trans-unit>
        <trans-unit id="184551a48b52da89049de6ef721a95d01ccf31d3" translate="yes" xml:space="preserve">
          <source>func (z *Int) Rsh(x *Int, n uint) *Int</source>
          <target state="translated">func(z *Int)Rsh(x *Int,n uint)*Int</target>
        </trans-unit>
        <trans-unit id="3022f13db80e06640e7a5f582485a4115a8cab75" translate="yes" xml:space="preserve">
          <source>func (z *Int) Scan(s fmt.ScanState, ch rune) error</source>
          <target state="translated">func (z *Int)Skan(s fmt.ScanState,ch rune)błąd</target>
        </trans-unit>
        <trans-unit id="5031f87b0417de292de71e249d76a4bc3cbac2c2" translate="yes" xml:space="preserve">
          <source>func (z *Int) Set(x *Int) *Int</source>
          <target state="translated">func (z *Int)Set(x *Int)*Int</target>
        </trans-unit>
        <trans-unit id="fb2ae61d366c4f2257568622ba82ac7fc8f44e19" translate="yes" xml:space="preserve">
          <source>func (z *Int) SetBit(x *Int, i int, b uint) *Int</source>
          <target state="translated">func (z *Int)SetBit(x *Int,i int,b uint)*Int</target>
        </trans-unit>
        <trans-unit id="d022dfc754d9313d5a3c32cb281deeaf8afc28c2" translate="yes" xml:space="preserve">
          <source>func (z *Int) SetBits(abs []Word) *Int</source>
          <target state="translated">func (z *Int)SetBits(abs []Word)*Int</target>
        </trans-unit>
        <trans-unit id="7b4d5f31ca55f157ef7fa499955cc1c292b8e847" translate="yes" xml:space="preserve">
          <source>func (z *Int) SetBytes(buf []byte) *Int</source>
          <target state="translated">func (z *Int)SetBytes(buf []bajt)*Int</target>
        </trans-unit>
        <trans-unit id="b21462ef9ab6c707da8b211f79e5225cdb9d846b" translate="yes" xml:space="preserve">
          <source>func (z *Int) SetInt64(x int64) *Int</source>
          <target state="translated">func (z *Int)SetInt64(x int64)*Int</target>
        </trans-unit>
        <trans-unit id="ee074b7ff98a9480af64a49a7236e53b5452c8b8" translate="yes" xml:space="preserve">
          <source>func (z *Int) SetString(s string, base int) (*Int, bool)</source>
          <target state="translated">func (z *Int)SetString(s string,base int)(*Int,bool)</target>
        </trans-unit>
        <trans-unit id="7b3224cedc574fe69e416ac575ae8cd73b969841" translate="yes" xml:space="preserve">
          <source>func (z *Int) SetUint64(x uint64) *Int</source>
          <target state="translated">func (z *Int)SetUint64(x uint64)*Int</target>
        </trans-unit>
        <trans-unit id="041105ab187d079fa6650d1bdbdac7ab33a776bc" translate="yes" xml:space="preserve">
          <source>func (z *Int) Sqrt(x *Int) *Int</source>
          <target state="translated">func (z *Int)Sqrt(x *Int)*Int</target>
        </trans-unit>
        <trans-unit id="f7bc9f40348e083f0b57470753d99443b800522e" translate="yes" xml:space="preserve">
          <source>func (z *Int) Sub(x, y *Int) *Int</source>
          <target state="translated">func (z *Int)Sub(x,y *Int)*Int</target>
        </trans-unit>
        <trans-unit id="d4a02ff4cb42fba7c526f7993de9c98b2872c943" translate="yes" xml:space="preserve">
          <source>func (z *Int) UnmarshalJSON(text []byte) error</source>
          <target state="translated">func (z *Int)UnmarshalJSON(tekst []bajt)błąd</target>
        </trans-unit>
        <trans-unit id="c85721729dcb9b865b5caf58f07befa140c9b5b9" translate="yes" xml:space="preserve">
          <source>func (z *Int) UnmarshalText(text []byte) error</source>
          <target state="translated">func (z *Int)Błąd UnmarshalText(tekst []bajt)</target>
        </trans-unit>
        <trans-unit id="a5727f3feb2f3cb091b03de158a4a0cd103734bb" translate="yes" xml:space="preserve">
          <source>func (z *Int) Xor(x, y *Int) *Int</source>
          <target state="translated">func (z *Int)Xor(x,y *Int)*Int</target>
        </trans-unit>
        <trans-unit id="09393f8a17c0965ebfeb55b782caa56758943b36" translate="yes" xml:space="preserve">
          <source>func (z *Rat) Abs(x *Rat) *Rat</source>
          <target state="translated">func (z *Rada)Abs(x *Rada)*Rada</target>
        </trans-unit>
        <trans-unit id="a113c04d482f6877f1dd37dee147427f38659431" translate="yes" xml:space="preserve">
          <source>func (z *Rat) Add(x, y *Rat) *Rat</source>
          <target state="translated">func (z *Rada)Dodaj(x,y *Rada)*Rada</target>
        </trans-unit>
        <trans-unit id="eb622b18cea126defa98d9f492b5c9f151ae44d1" translate="yes" xml:space="preserve">
          <source>func (z *Rat) GobDecode(buf []byte) error</source>
          <target state="translated">func (z *Rat)GobDecode(buf []bajt)błąd</target>
        </trans-unit>
        <trans-unit id="3b6e753072ce576ba18d284f80a0e272d3ce7518" translate="yes" xml:space="preserve">
          <source>func (z *Rat) Inv(x *Rat) *Rat</source>
          <target state="translated">func(z *Rat)Inv(x *Rat)*Rat</target>
        </trans-unit>
        <trans-unit id="37dd6d2dfb3f53ce562a8b8e338c1d366cfaffa3" translate="yes" xml:space="preserve">
          <source>func (z *Rat) Mul(x, y *Rat) *Rat</source>
          <target state="translated">func(z *Rat)Mul(x,y *Rat)*Rat</target>
        </trans-unit>
        <trans-unit id="1e4f3c22eadf423b1f23f8a47a471adfa62a01c7" translate="yes" xml:space="preserve">
          <source>func (z *Rat) Neg(x *Rat) *Rat</source>
          <target state="translated">func(z *Rat)Neg(x *Rat)*Rat</target>
        </trans-unit>
        <trans-unit id="8e9ab4505d5aa3844d54ff3a7309cff75fe96aa8" translate="yes" xml:space="preserve">
          <source>func (z *Rat) Quo(x, y *Rat) *Rat</source>
          <target state="translated">func(z *Rat)Quo(x,y *Rat)*Rat</target>
        </trans-unit>
        <trans-unit id="950153ead6bc9176ac7976a048dd1cc33b0fe28b" translate="yes" xml:space="preserve">
          <source>func (z *Rat) Scan(s fmt.ScanState, ch rune) error</source>
          <target state="translated">Func (z *Rat)Scan(s fmt.ScanState,ch rune)błąd</target>
        </trans-unit>
        <trans-unit id="27fd216b65e19e124beeed91827c29c1ca277b6e" translate="yes" xml:space="preserve">
          <source>func (z *Rat) Set(x *Rat) *Rat</source>
          <target state="translated">func (z *Rat)Set(x *Rat)*Rat</target>
        </trans-unit>
        <trans-unit id="aa0d8ca2297981c0ca9f1a93b53d47da918c07db" translate="yes" xml:space="preserve">
          <source>func (z *Rat) SetFloat64(f float64) *Rat</source>
          <target state="translated">func (z *Rat)SetFloat64(f float64)*Rat</target>
        </trans-unit>
        <trans-unit id="08107283ef98f775675be66b17d66c571116ef4d" translate="yes" xml:space="preserve">
          <source>func (z *Rat) SetFrac(a, b *Int) *Rat</source>
          <target state="translated">func (z *Rat)SetFrac(a,b *Int)*Rat</target>
        </trans-unit>
        <trans-unit id="4d8c8011e54eaf8409235fe660588f438d0250c6" translate="yes" xml:space="preserve">
          <source>func (z *Rat) SetFrac64(a, b int64) *Rat</source>
          <target state="translated">func (z *Rat)SetFrac64(a,b int64)*Rat</target>
        </trans-unit>
        <trans-unit id="d1c9e9a6457bab450e8e675939596ccb8ce797b0" translate="yes" xml:space="preserve">
          <source>func (z *Rat) SetInt(x *Int) *Rat</source>
          <target state="translated">func (z *Rat)SetInt(x *Int)*Rat</target>
        </trans-unit>
        <trans-unit id="46a509309a6841086c55d0e0aeef97cb75be789e" translate="yes" xml:space="preserve">
          <source>func (z *Rat) SetInt64(x int64) *Rat</source>
          <target state="translated">func (z *Rat)SetInt64(x int64)*Rat</target>
        </trans-unit>
        <trans-unit id="b88a84921ba51d656505414610e10d2b2c79bb25" translate="yes" xml:space="preserve">
          <source>func (z *Rat) SetString(s string) (*Rat, bool)</source>
          <target state="translated">func(z *Rat)SetString(s string)(*Rat,bool)</target>
        </trans-unit>
        <trans-unit id="84190c64f3f95dd1293522165bd7ac05d7b74357" translate="yes" xml:space="preserve">
          <source>func (z *Rat) SetUint64(x uint64) *Rat</source>
          <target state="translated">func(z *Rat)SetUint64(x uint64)*Rat</target>
        </trans-unit>
        <trans-unit id="50a3f93aad9622af96ee45e1927a70432721a100" translate="yes" xml:space="preserve">
          <source>func (z *Rat) Sub(x, y *Rat) *Rat</source>
          <target state="translated">func (z *Rat)Sub(x,y *Rat)*Rat</target>
        </trans-unit>
        <trans-unit id="3bced2b1297171f9864234beb83740464dded9df" translate="yes" xml:space="preserve">
          <source>func (z *Rat) UnmarshalText(text []byte) error</source>
          <target state="translated">func (z*Consejo)UnmarshalText(texto []byte)error</target>
        </trans-unit>
        <trans-unit id="a8bb510bb86800cce3c3ef04cb9c23779b8c61c2" translate="yes" xml:space="preserve">
          <source>func (z *Reader) Close() error</source>
          <target state="translated">func (z *Reader)Close()error</target>
        </trans-unit>
        <trans-unit id="22da93c6f774e951145bb8d17f0915f7b7da753b" translate="yes" xml:space="preserve">
          <source>func (z *Reader) Multistream(ok bool)</source>
          <target state="translated">func(z *Reader)Multistream(ok bool)</target>
        </trans-unit>
        <trans-unit id="65245cd106a2b547c3caf057f289233d7a372412" translate="yes" xml:space="preserve">
          <source>func (z *Reader) Read(p []byte) (n int, err error)</source>
          <target state="translated">func (z *Lector)Read(p []byte)(n int,err error)</target>
        </trans-unit>
        <trans-unit id="66c76ea4d1043028bf64b53b2d671374d8bb9e2b" translate="yes" xml:space="preserve">
          <source>func (z *Reader) RegisterDecompressor(method uint16, dcomp Decompressor)</source>
          <target state="translated">func (z *Reader)RegisterDecompressor(method uint16,dcomp Decompressor)</target>
        </trans-unit>
        <trans-unit id="8f6e282492b55afdd4ae2afb86e6045ffea50dc6" translate="yes" xml:space="preserve">
          <source>func (z *Reader) Reset(r io.Reader) error</source>
          <target state="translated">func (z *Reader)Reset(r io.Reader)error</target>
        </trans-unit>
        <trans-unit id="cf320bb857878d25df2c106cef8d521b2ffd8f48" translate="yes" xml:space="preserve">
          <source>func (z *Writer) Close() error</source>
          <target state="translated">func (z *Writer)Close()error</target>
        </trans-unit>
        <trans-unit id="7bedc26756f7815aa9055b99620c08f009ac5bcc" translate="yes" xml:space="preserve">
          <source>func (z *Writer) Flush() error</source>
          <target state="translated">func (z *Writer)Flush()error</target>
        </trans-unit>
        <trans-unit id="d9e67bb7273ce8a03539763422bc56abcb585db6" translate="yes" xml:space="preserve">
          <source>func (z *Writer) Reset(w io.Writer)</source>
          <target state="translated">func (z *Escritor)Reset(w io.Escritor)</target>
        </trans-unit>
        <trans-unit id="1f83e0756ad2eb250d2a998d4bd26f86d25b667d" translate="yes" xml:space="preserve">
          <source>func (z *Writer) Write(p []byte) (int, error)</source>
          <target state="translated">func (z *Escritor)Write(p []byte)(int,error)</target>
        </trans-unit>
        <trans-unit id="19dd1c7bfae57a6e039723cfe880a5354a274476" translate="yes" xml:space="preserve">
          <source>func (z *Writer) Write(p []byte) (n int, err error)</source>
          <target state="translated">func (z *Escritor)Write(p []byte)(n int,err error)</target>
        </trans-unit>
        <trans-unit id="fe732c6fb307507a83c1ff1e03012486608be4b7" translate="yes" xml:space="preserve">
          <source>func (z *Zipf) Uint64() uint64</source>
          <target state="translated">func (z *Zipf)Uint64()uint64</target>
        </trans-unit>
        <trans-unit id="b6c9906722dba49a61fc4ee9caf16a3d235ddd0f" translate="yes" xml:space="preserve">
          <source>func Abs(path string) (string, error)</source>
          <target state="translated">func Abs(path string)(cadena,error)</target>
        </trans-unit>
        <trans-unit id="d57e2ade35e095d5f2ff959956b2f8adb79151e6" translate="yes" xml:space="preserve">
          <source>func Abs(x complex128) float64</source>
          <target state="translated">func Abs(x complejo128)float64</target>
        </trans-unit>
        <trans-unit id="52d1bdb6e11924036a92efddbc648f711027b16e" translate="yes" xml:space="preserve">
          <source>func Abs(x float64) float64</source>
          <target state="translated">func Abs(x float64)float64</target>
        </trans-unit>
        <trans-unit id="c2cbcdae05ab7d21e6913daf0a4f96c67b6183b4" translate="yes" xml:space="preserve">
          <source>func Abs&lt;a href=&quot;https://golang.org/src/math/abs.go?s=278:305#L2&quot;&gt;Source&lt;/a&gt;</source>
          <target state="translated">func Abs &lt;a href=&quot;https://golang.org/src/math/abs.go?s=278:305#L2&quot;&gt;Source&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="432b746b2dcc185064865caf56211508adbeb4e9" translate="yes" xml:space="preserve">
          <source>func Abs&lt;a href=&quot;https://golang.org/src/math/cmplx/abs.go?s=349:379#L2&quot;&gt;Source&lt;/a&gt;</source>
          <target state="translated">func Abs &lt;a href=&quot;https://golang.org/src/math/cmplx/abs.go?s=349:379#L2&quot;&gt;Source&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="bda15462d940a777850823d81347185e0c3e7405" translate="yes" xml:space="preserve">
          <source>func Abs&lt;a href=&quot;https://golang.org/src/math/cmplx/abs.go?s=452:482#L3&quot;&gt;Source&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7a6665be1c1c1675439f5cc35cc47f4d756671a3" translate="yes" xml:space="preserve">
          <source>func Abs&lt;a href=&quot;https://golang.org/src/path/filepath/path.go?s=6920:6957#L230&quot;&gt;Source&lt;/a&gt;</source>
          <target state="translated">func Abs &lt;a href=&quot;https://golang.org/src/path/filepath/path.go?s=6920:6957#L230&quot;&gt;Source&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="6266af2cbf286d69d1892314caa25e025b6c171d" translate="yes" xml:space="preserve">
          <source>func Abs&lt;a href=&quot;https://golang.org/src/path/filepath/path.go?s=7016:7053#L232&quot;&gt;Source&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dc348f7e0bbdd32076a3f7ad1c9974269e417d7a" translate="yes" xml:space="preserve">
          <source>func Abs&lt;a href=&quot;https://golang.org/src/path/filepath/path.go?s=7025:7062#L233&quot;&gt;Source&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2ab62a22ec80f4da856758b380ac6aa8b8aeea4e" translate="yes" xml:space="preserve">
          <source>func Accept(fd int) (nfd int, sa Sockaddr, err error)</source>
          <target state="translated">func Accept(fd int)(nfd int,sa Sockaddr,err error)</target>
        </trans-unit>
        <trans-unit id="fbcdf143355f3edecc48a04a893eb49048e9b38c" translate="yes" xml:space="preserve">
          <source>func Accept(lis net.Listener)</source>
          <target state="translated">func Aceptar(lis net.Listener)</target>
        </trans-unit>
        <trans-unit id="5006d18e9a738741bb45162c398e99f511551c21" translate="yes" xml:space="preserve">
          <source>func Accept4(fd int, flags int) (nfd int, sa Sockaddr, err error)</source>
          <target state="translated">func Accept4(fd int,flags int)(nfd int,sa Sockaddr,err error)</target>
        </trans-unit>
        <trans-unit id="2febc8fde2928ea6433cfea1afd8d2d26af82a44" translate="yes" xml:space="preserve">
          <source>func Accept4&lt;a href=&quot;https://golang.org/src/syscall/syscall_linux.go?s=13029:13094#L528&quot;&gt;Source&lt;/a&gt;</source>
          <target state="translated">func Accept4 &lt;a href=&quot;https://golang.org/src/syscall/syscall_linux.go?s=13029:13094#L528&quot;&gt;Fuente&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="be6bb92b53fb8c5a06fbc6fbe7c5f8ac0b17019b" translate="yes" xml:space="preserve">
          <source>func Accept4&lt;a href=&quot;https://golang.org/src/syscall/syscall_linux.go?s=13038:13103#L534&quot;&gt;Source&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7fe55942fc67ddbea3786a9037c9e1a4b84c72b2" translate="yes" xml:space="preserve">
          <source>func Accept4&lt;a href=&quot;https://golang.org/src/syscall/syscall_linux.go?s=13608:13673#L555&quot;&gt;Source&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="05d8629a4912de30d2414f81c541982060075fe6" translate="yes" xml:space="preserve">
          <source>func Accept&lt;a href=&quot;https://golang.org/src/net/rpc/server.go?s=20693:20722#L675&quot;&gt;Source&lt;/a&gt;</source>
          <target state="translated">func Aceptar &lt;a href=&quot;https://golang.org/src/net/rpc/server.go?s=20693:20722#L675&quot;&gt;fuente&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="a86f4c31363017d07faf207592a2e7c8d9559ad0" translate="yes" xml:space="preserve">
          <source>func Accept&lt;a href=&quot;https://golang.org/src/syscall/syscall_linux.go?s=12762:12815#L513&quot;&gt;Source&lt;/a&gt;</source>
          <target state="translated">func Aceptar &lt;a href=&quot;https://golang.org/src/syscall/syscall_linux.go?s=12762:12815#L513&quot;&gt;fuente&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="d61aab5e4ab2b536e9d14447b425e170abff91b0" translate="yes" xml:space="preserve">
          <source>func Accept&lt;a href=&quot;https://golang.org/src/syscall/syscall_linux.go?s=12771:12824#L519&quot;&gt;Source&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="453263f33193ee3675e46aef1bc44f1d183f17fd" translate="yes" xml:space="preserve">
          <source>func Accept&lt;a href=&quot;https://golang.org/src/syscall/syscall_linux.go?s=13341:13394#L540&quot;&gt;Source&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="46bba7a034580dc30e97597982b25a6d9c694eba" translate="yes" xml:space="preserve">
          <source>func Access(path string, mode uint32) (err error)</source>
          <target state="translated">func Access(path string,mode uint32)(error err)</target>
        </trans-unit>
        <trans-unit id="e6e47553f32d31728c271f17e9ea2bb554f92eba" translate="yes" xml:space="preserve">
          <source>func Access&lt;a href=&quot;https://golang.org/src/syscall/syscall_linux.go?s=554:603#L12&quot;&gt;Source&lt;/a&gt;</source>
          <target state="translated">func &lt;a href=&quot;https://golang.org/src/syscall/syscall_linux.go?s=554:603#L12&quot;&gt;Fuente de&lt;/a&gt; acceso</target>
        </trans-unit>
        <trans-unit id="c7e93cf3bfa274453bb40a2f1ef5dc7f28b4c1df" translate="yes" xml:space="preserve">
          <source>func Acct(path string) (err error)</source>
          <target state="translated">func Acct(path string)(error de error)</target>
        </trans-unit>
        <trans-unit id="d384ec5d65dd3ddae4d375ebc67243bde9824096" translate="yes" xml:space="preserve">
          <source>func Acct&lt;a href=&quot;https://golang.org/src/syscall/zsyscall_linux_amd64.go?s=5698:5732#L218&quot;&gt;Source&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c787860ee20f1702c8df283ea113a3c6c375e8a4" translate="yes" xml:space="preserve">
          <source>func Acct&lt;a href=&quot;https://golang.org/src/syscall/zsyscall_linux_amd64.go?s=6350:6384#L243&quot;&gt;Source&lt;/a&gt;</source>
          <target state="translated">func Acct &lt;a href=&quot;https://golang.org/src/syscall/zsyscall_linux_amd64.go?s=6350:6384#L243&quot;&gt;Source&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="6f8d4c38abbf0c9be70f5b2c1dae7e1d62605d11" translate="yes" xml:space="preserve">
          <source>func Acos(x complex128) complex128</source>
          <target state="translated">func Acos(x complejo128)complejo128</target>
        </trans-unit>
        <trans-unit id="c5882f9f50153aebb22256a6f951078cc015350e" translate="yes" xml:space="preserve">
          <source>func Acos(x float64) float64</source>
          <target state="translated">func Acos(x float64)float64</target>
        </trans-unit>
        <trans-unit id="e1f674841881a253cf2169170a6abea5988cb4e3" translate="yes" xml:space="preserve">
          <source>func Acos&lt;a href=&quot;https://golang.org/src/math/asin.go?s=897:925#L41&quot;&gt;Source&lt;/a&gt;</source>
          <target state="translated">func Acos &lt;a href=&quot;https://golang.org/src/math/asin.go?s=897:925#L41&quot;&gt;Source&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="02cda7d2b0d57c2389ac11ef1204fef0560cfa06" translate="yes" xml:space="preserve">
          <source>func Acos&lt;a href=&quot;https://golang.org/src/math/cmplx/asin.go?s=2730:2764#L77&quot;&gt;Source&lt;/a&gt;</source>
          <target state="translated">func Acos &lt;a href=&quot;https://golang.org/src/math/cmplx/asin.go?s=2730:2764#L77&quot;&gt;Source&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="7da708411565b2f35df2836b13ef53412f456c26" translate="yes" xml:space="preserve">
          <source>func Acos&lt;a href=&quot;https://golang.org/src/math/cmplx/asin.go?s=3839:3873#L123&quot;&gt;Source&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b55e66944700f1bf8d032e9951ac7f0773618aa3" translate="yes" xml:space="preserve">
          <source>func Acosh(x complex128) complex128</source>
          <target state="translated">func Acosh(x complejo128)complejo128</target>
        </trans-unit>
        <trans-unit id="eec81c94daf00581aa90bb0c6398222646f0ad9a" translate="yes" xml:space="preserve">
          <source>func Acosh(x float64) float64</source>
          <target state="translated">func Acosh(x float64)float64</target>
        </trans-unit>
        <trans-unit id="e80ae0295882452d6b557cb63e8f31c175805f52" translate="yes" xml:space="preserve">
          <source>func Acosh&lt;a href=&quot;https://golang.org/src/math/acosh.go?s=1294:1323#L32&quot;&gt;Source&lt;/a&gt;</source>
          <target state="translated">func Acosh &lt;a href=&quot;https://golang.org/src/math/acosh.go?s=1294:1323#L32&quot;&gt;Source&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="a37329b9a70a2e7fb6e8f6c29ea57e0e35c18029" translate="yes" xml:space="preserve">
          <source>func Acosh&lt;a href=&quot;https://golang.org/src/math/cmplx/asin.go?s=2882:2917#L83&quot;&gt;Source&lt;/a&gt;</source>
          <target state="translated">func Acosh &lt;a href=&quot;https://golang.org/src/math/cmplx/asin.go?s=2882:2917#L83&quot;&gt;Source&lt;/a&gt;</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
