<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="es" datatype="htmlbody" original="go">
    <body>
      <group id="go">
        <trans-unit id="2d6d467b4ada22c917c7207e519bb92af0424078" translate="yes" xml:space="preserve">
          <source>func (e *Error) Timeout() bool</source>
          <target state="translated">func (e *Error)Timeout()bool</target>
        </trans-unit>
        <trans-unit id="78c8ab716fa1f2c9bb7ae5b48d87c0807d88132b" translate="yes" xml:space="preserve">
          <source>func (e *Error) Unwrap() error</source>
          <target state="translated">func (e *Error)Unwrap()error</target>
        </trans-unit>
        <trans-unit id="041799c0d9fb2684f655f55d61c0ef220b5e47e9" translate="yes" xml:space="preserve">
          <source>func (e *ExitError) Error() string</source>
          <target state="translated">func (y *ExitError)Error()string</target>
        </trans-unit>
        <trans-unit id="b7aff18093a663fb626d6ba0755154ecff5a8bd4" translate="yes" xml:space="preserve">
          <source>func (e *FormatError) Error() string</source>
          <target state="translated">func (y *FormatError)Error()string</target>
        </trans-unit>
        <trans-unit id="74ac915c3c1ed048a052748d15f3b8472670d6d2" translate="yes" xml:space="preserve">
          <source>func (e *InvalidUTF8Error) Error() string</source>
          <target state="translated">func (y *InvalidUTF8Error)Error()string</target>
        </trans-unit>
        <trans-unit id="0f16fb232f0e4ba6f5e857e773836825f781a8c7" translate="yes" xml:space="preserve">
          <source>func (e *InvalidUnmarshalError) Error() string</source>
          <target state="translated">func (y *InvalidUnmarshalError)Error()string</target>
        </trans-unit>
        <trans-unit id="3270d6bd62bb05b95e14460fe0286775384aade9" translate="yes" xml:space="preserve">
          <source>func (e *LinkError) Error() string</source>
          <target state="translated">func (y *LinkError)Error()string</target>
        </trans-unit>
        <trans-unit id="52e2e08d8a699da60b5564f970c50649a7c78091" translate="yes" xml:space="preserve">
          <source>func (e *LinkError) Unwrap() error</source>
          <target state="translated">func (y *LinkError)Unwrap()error</target>
        </trans-unit>
        <trans-unit id="63393c6c196d1ae5e11bec31d92f1c4e9affe4a0" translate="yes" xml:space="preserve">
          <source>func (e *MarshalerError) Error() string</source>
          <target state="translated">func (y *MarshalerError)Error()string</target>
        </trans-unit>
        <trans-unit id="60a98444fda1558a15566d20099a2beb703d0a6e" translate="yes" xml:space="preserve">
          <source>func (e *MarshalerError) Unwrap() error</source>
          <target state="translated">func (y *MarshalerError)Unwrap()error</target>
        </trans-unit>
        <trans-unit id="aa81b927d26f0ce73d99b90ea170123a60f47632" translate="yes" xml:space="preserve">
          <source>func (e *MultiplePackageError) Error() string</source>
          <target state="translated">func (e *MultiplePackageError)Error()string</target>
        </trans-unit>
        <trans-unit id="b3c4dbd09ff6c725b1ae68336cf5eea61b2a2e28" translate="yes" xml:space="preserve">
          <source>func (e *NoGoError) Error() string</source>
          <target state="translated">func (y *NoGoError)Error()string</target>
        </trans-unit>
        <trans-unit id="21c5c1708e5773d806eea0b34d8e0e0156a032d5" translate="yes" xml:space="preserve">
          <source>func (e *NumError) Error() string</source>
          <target state="translated">func (y *NumError)Error()string</target>
        </trans-unit>
        <trans-unit id="9bf0eb3b8f80ab1a593b17a55687162cef152880" translate="yes" xml:space="preserve">
          <source>func (e *NumError) Unwrap() error</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="55eca42be6c63b70f1523aa24f12820195c67eb4" translate="yes" xml:space="preserve">
          <source>func (e *OpError) Error() string</source>
          <target state="translated">func (y *OpError)Error()string</target>
        </trans-unit>
        <trans-unit id="6915dcef0ce6b5ca4d0d04b7ae5004311c7d402a" translate="yes" xml:space="preserve">
          <source>func (e *OpError) Temporary() bool</source>
          <target state="translated">func (e *OpError)Temporary()bool</target>
        </trans-unit>
        <trans-unit id="20f0d43ad4561c6891aca278666fbe0e4134fa24" translate="yes" xml:space="preserve">
          <source>func (e *OpError) Timeout() bool</source>
          <target state="translated">func (e *OpError)Timeout()bool</target>
        </trans-unit>
        <trans-unit id="a4e6110b1aad2eb05705960ff203fa93ff4e329d" translate="yes" xml:space="preserve">
          <source>func (e *OpError) Unwrap() error</source>
          <target state="translated">func (e *OpError)Unwrap()error</target>
        </trans-unit>
        <trans-unit id="12580fcd4423ef80a76f6073b412f3627f0015cc" translate="yes" xml:space="preserve">
          <source>func (e *ParseError) Error() string</source>
          <target state="translated">func (y *ParseError)Error()string</target>
        </trans-unit>
        <trans-unit id="0783a20149f853a883dee68d30bc5be62bc39b14" translate="yes" xml:space="preserve">
          <source>func (e *ParseError) Unwrap() error</source>
          <target state="translated">func (y *ParseError)Unwrap()error</target>
        </trans-unit>
        <trans-unit id="b1773e48572bffb6a4dec24a4881d3c4433b43c5" translate="yes" xml:space="preserve">
          <source>func (e *PathError) Error() string</source>
          <target state="translated">func (y *PathError)Error()string</target>
        </trans-unit>
        <trans-unit id="5213045299da0866aeba072b5c7cc0132e0b9679" translate="yes" xml:space="preserve">
          <source>func (e *PathError) Timeout() bool</source>
          <target state="translated">func (e *PathError)Timeout()bool</target>
        </trans-unit>
        <trans-unit id="6f0125a979a134510ceed94dd38f09ae6ae2cf6f" translate="yes" xml:space="preserve">
          <source>func (e *PathError) Unwrap() error</source>
          <target state="translated">func (e *PathError)Unwrap()error</target>
        </trans-unit>
        <trans-unit id="5116f6db06526de830cc656467cfcaf246858c24" translate="yes" xml:space="preserve">
          <source>func (e *ReadError) Error() string</source>
          <target state="translated">func (y *ReadError)Error()string</target>
        </trans-unit>
        <trans-unit id="fa7299a585fd011a2ce3d65a56bf684507aa067f" translate="yes" xml:space="preserve">
          <source>func (e *SyntaxError) Error() string</source>
          <target state="translated">func (y *SyntaxError)Error()string</target>
        </trans-unit>
        <trans-unit id="18917348b4e8e94443c61160d65bddfe74f812b0" translate="yes" xml:space="preserve">
          <source>func (e *SyscallError) Error() string</source>
          <target state="translated">func (y *SyscallError)Error()string</target>
        </trans-unit>
        <trans-unit id="b36fdd3e07b389febd5391f4ce5eaffd9ec99cd3" translate="yes" xml:space="preserve">
          <source>func (e *SyscallError) Timeout() bool</source>
          <target state="translated">func (e *SyscallError)Timeout()bool</target>
        </trans-unit>
        <trans-unit id="667dc56285569045055a3efe4975392a75305fff" translate="yes" xml:space="preserve">
          <source>func (e *SyscallError) Unwrap() error</source>
          <target state="translated">func (e *SyscallError)Unwrap()error</target>
        </trans-unit>
        <trans-unit id="d96e38f2c7e38f7706108515eb933e1891228a99" translate="yes" xml:space="preserve">
          <source>func (e *TagPathError) Error() string</source>
          <target state="translated">func (y *TagPathError)Error()string</target>
        </trans-unit>
        <trans-unit id="181f964169810b6ca047260c4e79bfcb9ae8649b" translate="yes" xml:space="preserve">
          <source>func (e *TypeAssertionError) Error() string</source>
          <target state="translated">func (y *TypeAssertionError)Error()string</target>
        </trans-unit>
        <trans-unit id="87b50931fd8abeacdc5c2b740c4070da3fc95fc9" translate="yes" xml:space="preserve">
          <source>func (e *UnknownLineError) Error() string</source>
          <target state="translated">func (e *UnknownLineError)Error()string</target>
        </trans-unit>
        <trans-unit id="22485c7dfab60f3af1c49426d5f19185ef8138ab" translate="yes" xml:space="preserve">
          <source>func (e *UnmarshalFieldError) Error() string</source>
          <target state="translated">func (e *UnmarshalFieldError)Error()string</target>
        </trans-unit>
        <trans-unit id="f2361e3b74be0002138bdd45aa8d8b96ce7151c3" translate="yes" xml:space="preserve">
          <source>func (e *UnmarshalTypeError) Error() string</source>
          <target state="translated">func (y *UnmarshalTypeError)Error()string</target>
        </trans-unit>
        <trans-unit id="82321087fa76da73889dc1d62f578cd2b4f49cb5" translate="yes" xml:space="preserve">
          <source>func (e *UnsupportedTypeError) Error() string</source>
          <target state="translated">func (y *UnsupportedTypeError)Error()string</target>
        </trans-unit>
        <trans-unit id="bf58c95a7188c700ec52b82a6a813c8c97939e02" translate="yes" xml:space="preserve">
          <source>func (e *UnsupportedValueError) Error() string</source>
          <target state="translated">func (y *UnsupportedValueError)Error()string</target>
        </trans-unit>
        <trans-unit id="e0e0d1134b20395c608ac284f8653e09b597ac04" translate="yes" xml:space="preserve">
          <source>func (e *ValueError) Error() string</source>
          <target state="translated">func (y *ValueError)Error()string</target>
        </trans-unit>
        <trans-unit id="fc0162355133cfc36112d72e29e3a14a9edd287e" translate="yes" xml:space="preserve">
          <source>func (e *WriteError) Error() string</source>
          <target state="translated">func (y *WriteError)Error()string</target>
        </trans-unit>
        <trans-unit id="60edd22b5c85eb276ea1b35cc56819661f02d012" translate="yes" xml:space="preserve">
          <source>func (e CertificateInvalidError) Error() string</source>
          <target state="translated">func (y CertificateInvalidError)Error()string</target>
        </trans-unit>
        <trans-unit id="50cb9c1ff6321e807f289ef179d708f02900574a" translate="yes" xml:space="preserve">
          <source>func (e CorruptInputError) Error() string</source>
          <target state="translated">func (y CorruptInputError)Error()string</target>
        </trans-unit>
        <trans-unit id="8001f7597462bfad1742b1b13a89b6165ecc94e9" translate="yes" xml:space="preserve">
          <source>func (e DecodeError) Error() string</source>
          <target state="translated">func (y DecodeError)Error()string</target>
        </trans-unit>
        <trans-unit id="d898a00f82d79b0b572d5d4d2346be4e979aa142" translate="yes" xml:space="preserve">
          <source>func (e Errno) Error() string</source>
          <target state="translated">func (y Errno)Error()string</target>
        </trans-unit>
        <trans-unit id="f448a07ad052eea2f84743779e8b92c7db6ab2a1" translate="yes" xml:space="preserve">
          <source>func (e Errno) Is(target error) bool</source>
          <target state="translated">func (e Errno)Is(target error)bool</target>
        </trans-unit>
        <trans-unit id="1cd379bdd697abe42457e9c45b4c6be27a2efde8" translate="yes" xml:space="preserve">
          <source>func (e Errno) Temporary() bool</source>
          <target state="translated">func (e Errno)Temporary()bool</target>
        </trans-unit>
        <trans-unit id="18c83bd405ec14f4706995e05634b57534fc5ece" translate="yes" xml:space="preserve">
          <source>func (e Errno) Timeout() bool</source>
          <target state="translated">func (e Errno)Timeout()bool</target>
        </trans-unit>
        <trans-unit id="51234c8c723074daf7c66662b67c81fe9ff9db2f" translate="yes" xml:space="preserve">
          <source>func (e Error) Error() string</source>
          <target state="translated">func (and Error)Error()string</target>
        </trans-unit>
        <trans-unit id="e8ca4b2b99d66d5591462fb936fec7cc97a0d6ee" translate="yes" xml:space="preserve">
          <source>func (e ErrorCode) String() string</source>
          <target state="translated">func (y ErrorCode)String()string</target>
        </trans-unit>
        <trans-unit id="3bb9b8297904fc0a716a482d025bf06d85cdbd18" translate="yes" xml:space="preserve">
          <source>func (e EscapeError) Error() string</source>
          <target state="translated">func (y EscapeError)Error()string</target>
        </trans-unit>
        <trans-unit id="0192a1383e98f48ecc80277cae91ee29a293a034" translate="yes" xml:space="preserve">
          <source>func (e ExecError) Error() string</source>
          <target state="translated">func (and ExecError)Error()string</target>
        </trans-unit>
        <trans-unit id="50afe36b7d57445378efe6db30bb344884cb6123" translate="yes" xml:space="preserve">
          <source>func (e ExecError) Unwrap() error</source>
          <target state="translated">func (y ExecError)Unwrap()error</target>
        </trans-unit>
        <trans-unit id="6b5367c944ef6cd5c7419a4a463313463753abc8" translate="yes" xml:space="preserve">
          <source>func (e FormatError) Error() string</source>
          <target state="translated">func (y FormatError)Error()string</target>
        </trans-unit>
        <trans-unit id="8b951640bfb4955da50d53e6f29ca6e032a05336" translate="yes" xml:space="preserve">
          <source>func (e InsecureAlgorithmError) Error() string</source>
          <target state="translated">func (e InsecureAlgorithmError)Error()string</target>
        </trans-unit>
        <trans-unit id="3606af718b4ac2ae2f40457b15a0dbed22aa7253" translate="yes" xml:space="preserve">
          <source>func (e InternalError) Error() string</source>
          <target state="translated">func (e InternalError)Error()string</target>
        </trans-unit>
        <trans-unit id="5bd2b9c5bec05de855c0ce48a0cfea1349939432" translate="yes" xml:space="preserve">
          <source>func (e InvalidAddrError) Error() string</source>
          <target state="translated">func (and InvalidAddrError)Error()string</target>
        </trans-unit>
        <trans-unit id="ef23243e0a4de93b4e2612cda695b3622af18c91" translate="yes" xml:space="preserve">
          <source>func (e InvalidAddrError) Temporary() bool</source>
          <target state="translated">func (e InvalidAddrError)Temporal()bool</target>
        </trans-unit>
        <trans-unit id="c84af9482cbec9da977046e792dcf131bc8b562f" translate="yes" xml:space="preserve">
          <source>func (e InvalidAddrError) Timeout() bool</source>
          <target state="translated">func (e InvalidAddrError)Timeout()bool</target>
        </trans-unit>
        <trans-unit id="b66f6672367b312917be81468feb458aa8e5e3da" translate="yes" xml:space="preserve">
          <source>func (e InvalidByteError) Error() string</source>
          <target state="translated">func (y InvalidByteError)Error()string</target>
        </trans-unit>
        <trans-unit id="baa4614fbec7faaa71fa9e5f559a200018eb6371" translate="yes" xml:space="preserve">
          <source>func (e InvalidHostError) Error() string</source>
          <target state="translated">func (y InvalidHostError)Error()string</target>
        </trans-unit>
        <trans-unit id="b0cfe9e00ca72b8bc24f536bab57d474e61ef50e" translate="yes" xml:space="preserve">
          <source>func (e RecordHeaderError) Error() string</source>
          <target state="translated">func (y RecordHeaderError)Error()string</target>
        </trans-unit>
        <trans-unit id="27d765e9da314dbbc5ccb322f22ed81ed64446cb" translate="yes" xml:space="preserve">
          <source>func (e ServerError) Error() string</source>
          <target state="translated">func (y ServerError)Error()string</target>
        </trans-unit>
        <trans-unit id="3f8943764ed87024a9ba3181a289645275737ded" translate="yes" xml:space="preserve">
          <source>func (e StartElement) Copy() StartElement</source>
          <target state="translated">func (e StartElement)Copy()StartElement</target>
        </trans-unit>
        <trans-unit id="6a4b79d8a9ff669380d62517ba5ecffe5fb17107" translate="yes" xml:space="preserve">
          <source>func (e StartElement) End() EndElement</source>
          <target state="translated">func (e StartElement)End()EndElement</target>
        </trans-unit>
        <trans-unit id="fbf2446b1dad2270785048d7f6569efe34e9cce5" translate="yes" xml:space="preserve">
          <source>func (e StructuralError) Error() string</source>
          <target state="translated">func (e StructuralError)Error()string</target>
        </trans-unit>
        <trans-unit id="94cbe1d73fd5548e6aef2ed1f3669903bbf7ca33" translate="yes" xml:space="preserve">
          <source>func (e SyntaxError) Error() string</source>
          <target state="translated">func (e SyntaxError)Error()string</target>
        </trans-unit>
        <trans-unit id="75ed74b211a906cf97563fc347f40f470836fe9f" translate="yes" xml:space="preserve">
          <source>func (e UnknownAuthorityError) Error() string</source>
          <target state="translated">func (e UnknownAuthorityError)Error()string</target>
        </trans-unit>
        <trans-unit id="0e5a88d07f4bff12e75524775b09b33c210f5cb2" translate="yes" xml:space="preserve">
          <source>func (e UnknownFileError) Error() string</source>
          <target state="translated">func (e UnknownFileError)Error()string</target>
        </trans-unit>
        <trans-unit id="5ce5d5a37455ea2f2ede0eccc60baacacc316580" translate="yes" xml:space="preserve">
          <source>func (e UnknownGroupError) Error() string</source>
          <target state="translated">func (e UnknownGroupError)Error()string</target>
        </trans-unit>
        <trans-unit id="739ec29fad2906dba0a36c7aba6c69fb52849fc0" translate="yes" xml:space="preserve">
          <source>func (e UnknownGroupIdError) Error() string</source>
          <target state="translated">func (e UnknownGroupIdError)Error()string</target>
        </trans-unit>
        <trans-unit id="f9b0cb07de5f835a832a90ec7245964db3d074e3" translate="yes" xml:space="preserve">
          <source>func (e UnknownNetworkError) Error() string</source>
          <target state="translated">func (e UnknownNetworkError)Error()string</target>
        </trans-unit>
        <trans-unit id="71b350445b9e0b17121f43e0aa504a7a5c3455b9" translate="yes" xml:space="preserve">
          <source>func (e UnknownNetworkError) Temporary() bool</source>
          <target state="translated">func (e UnknownNetworkError)Temporary()bool</target>
        </trans-unit>
        <trans-unit id="9651f27dfe15827024f36ca89139d59815e78b94" translate="yes" xml:space="preserve">
          <source>func (e UnknownNetworkError) Timeout() bool</source>
          <target state="translated">func (e UnknownNetworkError)Timeout()bool</target>
        </trans-unit>
        <trans-unit id="e4bc2ffd15df2d97083f6883bd8809a962c41891" translate="yes" xml:space="preserve">
          <source>func (e UnknownUserError) Error() string</source>
          <target state="translated">func (e UnknownUserError)Error()string</target>
        </trans-unit>
        <trans-unit id="5d5f4a24cc3ca6076c1439730cdce7138952270d" translate="yes" xml:space="preserve">
          <source>func (e UnknownUserIdError) Error() string</source>
          <target state="translated">func (e UnknownUserIdError)Error()string</target>
        </trans-unit>
        <trans-unit id="9a4503aa748eb8ce3eb00f4d8fef0b93b7498eff" translate="yes" xml:space="preserve">
          <source>func (e UnmarshalError) Error() string</source>
          <target state="translated">func (e UnmarshalError)Error()string</target>
        </trans-unit>
        <trans-unit id="23c98392a584049de0195fb3ba4b7e07bc7c0346" translate="yes" xml:space="preserve">
          <source>func (e UnsupportedError) Error() string</source>
          <target state="translated">func (and UnsupportedError)Error()string</target>
        </trans-unit>
        <trans-unit id="cb13c21257e62e698a72e6587d204f7eb664f7ee" translate="yes" xml:space="preserve">
          <source>func (e WordEncoder) Encode(charset, s string) string</source>
          <target state="translated">func (e WordEncoder)Encode(charset,s string)string</target>
        </trans-unit>
        <trans-unit id="d678027c5497120731586a5d486783f01b4e01d6" translate="yes" xml:space="preserve">
          <source>func (enc *Encoder) Encode(e interface{}) error</source>
          <target state="translated">func (enc *Encoder)Encode(e interface{})error</target>
        </trans-unit>
        <trans-unit id="1414f2a03eca301d7c3c3286e2584a2a7e9a21cc" translate="yes" xml:space="preserve">
          <source>func (enc *Encoder) Encode(v interface{}) error</source>
          <target state="translated">func (enc *Encoder)Encode(v interface{})error</target>
        </trans-unit>
        <trans-unit id="86fe4f20f202ba76f3bb45fb9d66e5eeff31bbd1" translate="yes" xml:space="preserve">
          <source>func (enc *Encoder) Encode(w io.Writer, m image.Image) error</source>
          <target state="translated">func (enc *Encoder)Encode(w io.Writer,m image.Image)error</target>
        </trans-unit>
        <trans-unit id="83de63325b183da6887949f6e87d1443196483b2" translate="yes" xml:space="preserve">
          <source>func (enc *Encoder) EncodeElement(v interface{}, start StartElement) error</source>
          <target state="translated">func (enc *Encoder)EncodeElement(v interface{},start StartElement)error</target>
        </trans-unit>
        <trans-unit id="7ef8fcb57e983205fb2d6548ae4350474c42826b" translate="yes" xml:space="preserve">
          <source>func (enc *Encoder) EncodeToken(t Token) error</source>
          <target state="translated">func (enc *Encoder)EncodeToken(t Token)error</target>
        </trans-unit>
        <trans-unit id="cd1495b14158a0eb06020ce6bdc0081ab638e8e4" translate="yes" xml:space="preserve">
          <source>func (enc *Encoder) EncodeValue(value reflect.Value) error</source>
          <target state="translated">func (enc *Encoder)EncodeValue(valor reflect.Valor)error</target>
        </trans-unit>
        <trans-unit id="724f6268eadcd7eadefcc285dd5d9d8981673617" translate="yes" xml:space="preserve">
          <source>func (enc *Encoder) Flush() error</source>
          <target state="translated">func (enc *encoder)Flush()error</target>
        </trans-unit>
        <trans-unit id="b04bf60d14acf15262b086f1c4366b0d4bf893a6" translate="yes" xml:space="preserve">
          <source>func (enc *Encoder) Indent(prefix, indent string)</source>
          <target state="translated">func (enc *Encoder)Indent(prefijo,cadena de sangría)</target>
        </trans-unit>
        <trans-unit id="61c628594bf1b98fc9dbf721fa0a3347185f010c" translate="yes" xml:space="preserve">
          <source>func (enc *Encoder) SetEscapeHTML(on bool)</source>
          <target state="translated">func (enc *Encoder)SetEscapeHTML(on bool)</target>
        </trans-unit>
        <trans-unit id="105cc93c48d8abc4f58dc6c0138bc6f06f2ddef3" translate="yes" xml:space="preserve">
          <source>func (enc *Encoder) SetIndent(prefix, indent string)</source>
          <target state="translated">func (enc *Encoder)SetIndent(prefijo,cadena de sangría)</target>
        </trans-unit>
        <trans-unit id="13e8cbec0d7e53923fadbbcc2ffc3d47f4597d81" translate="yes" xml:space="preserve">
          <source>func (enc *Encoding) Decode(dst, src []byte) (n int, err error)</source>
          <target state="translated">func (enc *Encoding)Decode(dst,src []byte)(n int,err error)</target>
        </trans-unit>
        <trans-unit id="425ce6e7936f6dcb824db65713e1550cd806bb57" translate="yes" xml:space="preserve">
          <source>func (enc *Encoding) DecodeString(s string) ([]byte, error)</source>
          <target state="translated">func (enc *Encoding)DecodeString(s string)([]byte,error)</target>
        </trans-unit>
        <trans-unit id="664b230e86b541ca9db28e10bbdb1ad0f44ada67" translate="yes" xml:space="preserve">
          <source>func (enc *Encoding) DecodedLen(n int) int</source>
          <target state="translated">func (enc *Encoding)DecodedLen(n int)int</target>
        </trans-unit>
        <trans-unit id="8a3da4e08a2c7b0c4e202ecdf290506fed2e6fbb" translate="yes" xml:space="preserve">
          <source>func (enc *Encoding) Encode(dst, src []byte)</source>
          <target state="translated">func (enc *Encoding)Encode(dst,src []byte)</target>
        </trans-unit>
        <trans-unit id="161068b44fcacd9c0258babacbb8b06c03641883" translate="yes" xml:space="preserve">
          <source>func (enc *Encoding) EncodeToString(src []byte) string</source>
          <target state="translated">func (enc *Encoding)EncodeToString(src []byte)string</target>
        </trans-unit>
        <trans-unit id="adbae83fb7a7e4b5ed57aece2c1fa22df854c25a" translate="yes" xml:space="preserve">
          <source>func (enc *Encoding) EncodedLen(n int) int</source>
          <target state="translated">func (enc *Encoding)EncodedLen(n int)int</target>
        </trans-unit>
        <trans-unit id="877405d9e6a26f65225ebca38017c219c1a5c8d2" translate="yes" xml:space="preserve">
          <source>func (enc Encoding) Strict() *Encoding</source>
          <target state="translated">func (codificación)Strict()*Codificación</target>
        </trans-unit>
        <trans-unit id="f406b98bd7f772b32d1ba7994e5dc9422024a28e" translate="yes" xml:space="preserve">
          <source>func (enc Encoding) WithPadding(padding rune) *Encoding</source>
          <target state="translated">func (codificación)ConPadding(runa de relleno)*Codificación</target>
        </trans-unit>
        <trans-unit id="fc3bcabdc85f93730422d3fce0dce58d6721b6ce" translate="yes" xml:space="preserve">
          <source>func (err ErrNaN) Error() string</source>
          <target state="translated">func (err ErrNaN)Error()string</target>
        </trans-unit>
        <trans-unit id="71c9549e1c1a1311f5ebf7f451bde70e8b09e9e5" translate="yes" xml:space="preserve">
          <source>func (err Error) Error() string</source>
          <target state="translated">func (err Error)Error()string</target>
        </trans-unit>
        <trans-unit id="ddaadc07338d6c5d0cd3d0c61973f93602ab695d" translate="yes" xml:space="preserve">
          <source>func (f *Field) End() token.Pos</source>
          <target state="translated">func (f *Field)End()token.Pos</target>
        </trans-unit>
        <trans-unit id="6639a87966d5321b2aa12ecb24db121717a4a459" translate="yes" xml:space="preserve">
          <source>func (f *Field) Pos() token.Pos</source>
          <target state="translated">func (f *Field)Pos()token.Pos</target>
        </trans-unit>
        <trans-unit id="3fbae8ec9527398ca67b7bff32c60da02adb843c" translate="yes" xml:space="preserve">
          <source>func (f *FieldList) End() token.Pos</source>
          <target state="translated">func (f *FieldList)End()token.Pos</target>
        </trans-unit>
        <trans-unit id="e1aabdbb65feffb9ee1a394f40552b4cee4d515f" translate="yes" xml:space="preserve">
          <source>func (f *FieldList) NumFields() int</source>
          <target state="translated">func (f *FieldList)NumFields()int</target>
        </trans-unit>
        <trans-unit id="f33617f79e0f0d1be23a376eb808a5aec72d6955" translate="yes" xml:space="preserve">
          <source>func (f *FieldList) Pos() token.Pos</source>
          <target state="translated">func (f *FieldList)Pos()token.Pos</target>
        </trans-unit>
        <trans-unit id="ebc8b7ad43f1a9c25c24f04349b0b9057f18c660" translate="yes" xml:space="preserve">
          <source>func (f *FieldNode) Copy() Node</source>
          <target state="translated">func (f *FieldNode)Copy()Node</target>
        </trans-unit>
        <trans-unit id="6b75a5ca630a9a6aceb624bd14852158e4bde522" translate="yes" xml:space="preserve">
          <source>func (f *FieldNode) String() string</source>
          <target state="translated">func(f *FieldNode)String()string</target>
        </trans-unit>
        <trans-unit id="11d1b98b7abef9c823dcf9ed95f1153df821f4ae" translate="yes" xml:space="preserve">
          <source>func (f *File) AddLine(offset int)</source>
          <target state="translated">func (f *File)AddLine(offset int)</target>
        </trans-unit>
        <trans-unit id="f06766d6f1900923f9ea63528040b24aa672ba2e" translate="yes" xml:space="preserve">
          <source>func (f *File) AddLineColumnInfo(offset int, filename string, line, column int)</source>
          <target state="translated">func (f *Archivo)AddLineColumnInfo(offset int,cadena de nombre de archivo,línea,columna int)</target>
        </trans-unit>
        <trans-unit id="cb3f79a648fe1cffd09cddb00b1bd57b84b24243" translate="yes" xml:space="preserve">
          <source>func (f *File) AddLineInfo(offset int, filename string, line int)</source>
          <target state="translated">func (f *File)AddLineInfo(offset int,filename string,line int)</target>
        </trans-unit>
        <trans-unit id="cf23c9d25c6abeb3765e22e5273879566165cb93" translate="yes" xml:space="preserve">
          <source>func (f *File) Base() int</source>
          <target state="translated">func (f *Archivo)Base()int</target>
        </trans-unit>
        <trans-unit id="ea2b81af5750a3029e656194e3fdeb6dd81bb271" translate="yes" xml:space="preserve">
          <source>func (f *File) Chdir() error</source>
          <target state="translated">func (f *File)Chdir()error</target>
        </trans-unit>
        <trans-unit id="08775194cb1634233aa66cf6fc9c59f2f3f5a741" translate="yes" xml:space="preserve">
          <source>func (f *File) Chmod(mode FileMode) error</source>
          <target state="translated">func (f *File)Chmod(mode FileMode)error</target>
        </trans-unit>
        <trans-unit id="8888aa0775abb39f2ea25a6cc36ac7cf37f301a1" translate="yes" xml:space="preserve">
          <source>func (f *File) Chown(uid, gid int) error</source>
          <target state="translated">func (f *File)Chown(uid,gid int)error</target>
        </trans-unit>
        <trans-unit id="526f72973dac4f0eb46992ca8e6ccd0eed56eeda" translate="yes" xml:space="preserve">
          <source>func (f *File) Close() error</source>
          <target state="translated">func (f *Archivo)Close()error</target>
        </trans-unit>
        <trans-unit id="f09a3f2cc54242016a352663c33f1c3fcc3d7a67" translate="yes" xml:space="preserve">
          <source>func (f *File) DWARF() (*dwarf.Data, error)</source>
          <target state="translated">func (f *Archivo)DWARF()(*dwarf.Data,error)</target>
        </trans-unit>
        <trans-unit id="e644407fdb42f9d40870e255c40156ade9924ed0" translate="yes" xml:space="preserve">
          <source>func (f *File) DataOffset() (offset int64, err error)</source>
          <target state="translated">func (f *File)DataOffset()(offset int64,err error)</target>
        </trans-unit>
        <trans-unit id="6cc1b52744b5df3c3c6b64cf82d220bd6227957e" translate="yes" xml:space="preserve">
          <source>func (f *File) DynString(tag DynTag) ([]string, error)</source>
          <target state="translated">func (f *Archivo)DynString(tag DynTag)([]cadena,error)</target>
        </trans-unit>
        <trans-unit id="9e4e6c63d919cd5265046e86d8d15ccf1a1596fc" translate="yes" xml:space="preserve">
          <source>func (f *File) DynamicSymbols() ([]Symbol, error)</source>
          <target state="translated">func (f *Archivo)DynamicSymbols()([]Símbolo,error)</target>
        </trans-unit>
        <trans-unit id="1bc9ba9ce7d656f3cb92a99827b0452a408b2666" translate="yes" xml:space="preserve">
          <source>func (f *File) End() token.Pos</source>
          <target state="translated">func (f *Archivo)End()token.Pos</target>
        </trans-unit>
        <trans-unit id="6544f665e7cc9b0b74546e9b306feb59a6c2ffdd" translate="yes" xml:space="preserve">
          <source>func (f *File) Fd() uintptr</source>
          <target state="translated">func (f *Archivo)Fd()uintptr</target>
        </trans-unit>
        <trans-unit id="3a4e3fbc850b80596d133a1f33ce129d4740e47f" translate="yes" xml:space="preserve">
          <source>func (f *File) ImportedLibraries() ([]string, error)</source>
          <target state="translated">func (f *Archivo)ImportedLibraries()([]cadena,error)</target>
        </trans-unit>
        <trans-unit id="b586de06f721cfd70ae85d91d3e7d27e337cc98f" translate="yes" xml:space="preserve">
          <source>func (f *File) ImportedSymbols() ([]ImportedSymbol, error)</source>
          <target state="translated">func (f *Archivo)ImportedSymbols()([]ImportedSymbol,error)</target>
        </trans-unit>
        <trans-unit id="2c3a31b85c4f207724e3ee4ce9f06aac1f3f441d" translate="yes" xml:space="preserve">
          <source>func (f *File) ImportedSymbols() ([]string, error)</source>
          <target state="translated">func (f *Archivo)ImportedSymbols()([]cadena,error)</target>
        </trans-unit>
        <trans-unit id="fe28e6af51444ed7ececfc65997d8bb8bae3e8cd" translate="yes" xml:space="preserve">
          <source>func (f *File) Line(p Pos) int</source>
          <target state="translated">func (f *Archivo)Line(p Pos)int</target>
        </trans-unit>
        <trans-unit id="000e23250a8ad70da444fad5b13774ed428f2bfc" translate="yes" xml:space="preserve">
          <source>func (f *File) LineCount() int</source>
          <target state="translated">func (f *File)LineCount()int</target>
        </trans-unit>
        <trans-unit id="bb432ea717c84e31375d70035b697a5426865ff9" translate="yes" xml:space="preserve">
          <source>func (f *File) LineStart(line int) Pos</source>
          <target state="translated">func (f *Archivo)LineStart(line int)Pos</target>
        </trans-unit>
        <trans-unit id="b4927fb320af2cc969f0d03bd774a882119be0c1" translate="yes" xml:space="preserve">
          <source>func (f *File) MergeLine(line int)</source>
          <target state="translated">func (f *Archivo)MergeLine(line int)</target>
        </trans-unit>
        <trans-unit id="a91fe797208d422a68859aaf4344d30222571ca5" translate="yes" xml:space="preserve">
          <source>func (f *File) Name() string</source>
          <target state="translated">func (f *Archivo)Name()string</target>
        </trans-unit>
        <trans-unit id="1ad1445cfb687a8b09283ca59bc39a98194a00ef" translate="yes" xml:space="preserve">
          <source>func (f *File) Offset(p Pos) int</source>
          <target state="translated">func (f *Archivo)Offset(p Pos)int</target>
        </trans-unit>
        <trans-unit id="28ab48568b03b5dfab125dbb33fbe1dde7f380e6" translate="yes" xml:space="preserve">
          <source>func (f *File) Open() (io.ReadCloser, error)</source>
          <target state="translated">func (f *Archivo)Open()(io.ReadCloser,error)</target>
        </trans-unit>
        <trans-unit id="a16fe9270a94a8ffd7378df8bcf19f1bd03ee696" translate="yes" xml:space="preserve">
          <source>func (f *File) Pos() token.Pos</source>
          <target state="translated">func (f *Archivo)Pos()token.Pos</target>
        </trans-unit>
        <trans-unit id="a28fa7ae789174e78ad4b40d378681c24705b045" translate="yes" xml:space="preserve">
          <source>func (f *File) Pos(offset int) Pos</source>
          <target state="translated">func (f *Archivo)Pos(offset int)Pos</target>
        </trans-unit>
        <trans-unit id="58c508e538d22088194878bb88e4201842bbf0bd" translate="yes" xml:space="preserve">
          <source>func (f *File) Position(p Pos) (pos Position)</source>
          <target state="translated">func (f *Archivo)Position(p Pos)(pos Position)</target>
        </trans-unit>
        <trans-unit id="4e37ba380c2eabdda6dfbbf00da4dffaf98b5948" translate="yes" xml:space="preserve">
          <source>func (f *File) PositionFor(p Pos, adjusted bool) (pos Position)</source>
          <target state="translated">func (f *Archivo)PositionFor(p Pos,bool ajustado)(pos Position)</target>
        </trans-unit>
        <trans-unit id="fe02988bf9d81eeb666f8c0aed0e8dcb1a7c8e67" translate="yes" xml:space="preserve">
          <source>func (f *File) Read(b []byte) (n int, err error)</source>
          <target state="translated">func (f *Archivo)Read(b []byte)(n int,err error)</target>
        </trans-unit>
        <trans-unit id="5526dec58153fbf46bef5a7cf2789dc121966252" translate="yes" xml:space="preserve">
          <source>func (f *File) ReadAt(b []byte, off int64) (n int, err error)</source>
          <target state="translated">func (f *File)ReadAt(b []byte,off int64)(n int,err error)</target>
        </trans-unit>
        <trans-unit id="d01ba4ab73535ec51eb6c3e69edf1c780f8f08e2" translate="yes" xml:space="preserve">
          <source>func (f *File) ReadFrom(r io.Reader) (n int64, err error)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="17cca8543c8801282d1941c9b40ebdc77dba378c" translate="yes" xml:space="preserve">
          <source>func (f *File) Readdir(n int) ([]FileInfo, error)</source>
          <target state="translated">func (f *File)Readdir(n int)([]FileInfo,error)</target>
        </trans-unit>
        <trans-unit id="78eb9b48a638aae642f24241e29dc89332227e3d" translate="yes" xml:space="preserve">
          <source>func (f *File) Readdirnames(n int) (names []string, err error)</source>
          <target state="translated">func (f *File)Readdirnames(n int)(names []string,err error)</target>
        </trans-unit>
        <trans-unit id="5704f10088c19667105741388785333caa8c2c62" translate="yes" xml:space="preserve">
          <source>func (f *File) Section(name string) *Section</source>
          <target state="translated">func (f *Archivo)Sección(nombre cadena)*Sección</target>
        </trans-unit>
        <trans-unit id="c0894f836394831b65b00cffc7d10bfbae6ba3c1" translate="yes" xml:space="preserve">
          <source>func (f *File) SectionByType(typ SectionType) *Section</source>
          <target state="translated">func (f *Archivo)SectionByType(typ SectionType)*Section</target>
        </trans-unit>
        <trans-unit id="5c751c273f0073f09c091738f0b2b0500de39c98" translate="yes" xml:space="preserve">
          <source>func (f *File) Seek(offset int64, whence int) (ret int64, err error)</source>
          <target state="translated">func (f *Archivo)Seek(offset int64,whence int)(ret int64,err error)</target>
        </trans-unit>
        <trans-unit id="2ba009ad8c7c5069ed2574686bead0f000d39f2a" translate="yes" xml:space="preserve">
          <source>func (f *File) Segment(name string) *Segment</source>
          <target state="translated">func (f *Archivo)Segmento(nombre de la cadena)*Segmento</target>
        </trans-unit>
        <trans-unit id="d2637267eb954a514914cd4f2f6d16ad27c80d93" translate="yes" xml:space="preserve">
          <source>func (f *File) SetDeadline(t time.Time) error</source>
          <target state="translated">func (f *Archivo)SetDeadline(t time.Time)error</target>
        </trans-unit>
        <trans-unit id="26d8028ce4a79c5dc9ef4b9d7b1a4f87e20dc66b" translate="yes" xml:space="preserve">
          <source>func (f *File) SetLines(lines []int) bool</source>
          <target state="translated">func (f *File)SetLines(lines []int)bool</target>
        </trans-unit>
        <trans-unit id="83255610f33efdcca0aba38cdeb73b6027205611" translate="yes" xml:space="preserve">
          <source>func (f *File) SetLinesForContent(content []byte)</source>
          <target state="translated">func (f *Archivo)SetLinesForContent(content []byte)</target>
        </trans-unit>
        <trans-unit id="d218d6d1595b34cee5d6df3fb95d3d0e5d07ea8e" translate="yes" xml:space="preserve">
          <source>func (f *File) SetReadDeadline(t time.Time) error</source>
          <target state="translated">func (f *Archivo)SetReadDeadline(t time.Time)error</target>
        </trans-unit>
        <trans-unit id="6a9562bdb8e6f8c173c088de9b752848be5e9906" translate="yes" xml:space="preserve">
          <source>func (f *File) SetWriteDeadline(t time.Time) error</source>
          <target state="translated">func (f *Archivo)SetWriteDeadline(t time.Time)error</target>
        </trans-unit>
        <trans-unit id="d7fc00aba5709c7fec18c6e268d906784c7f1a7d" translate="yes" xml:space="preserve">
          <source>func (f *File) Size() int</source>
          <target state="translated">func (f *Archivo)Tamaño()int</target>
        </trans-unit>
        <trans-unit id="9fa53582b162f8f84dc1a43176acccd1dec39aa7" translate="yes" xml:space="preserve">
          <source>func (f *File) Stat() (FileInfo, error)</source>
          <target state="translated">func (f *File)Stat()(FileInfo,error)</target>
        </trans-unit>
        <trans-unit id="a5630eb0c3c097c33c32cdd5931db6be5c89ca00" translate="yes" xml:space="preserve">
          <source>func (f *File) Symbols() ([]Sym, error)</source>
          <target state="translated">func (f *fichero)Símbolos()([]Sym,error)</target>
        </trans-unit>
        <trans-unit id="479f16dbfa1517313b26b242e91f075f9efab107" translate="yes" xml:space="preserve">
          <source>func (f *File) Symbols() ([]Symbol, error)</source>
          <target state="translated">func (f *Archivo)Símbolos()([]Símbolo,error)</target>
        </trans-unit>
        <trans-unit id="fb222f79845f98378042219ae26f0124494abab2" translate="yes" xml:space="preserve">
          <source>func (f *File) Sync() error</source>
          <target state="translated">func (f *fichero)Sync()error</target>
        </trans-unit>
        <trans-unit id="1c9001f23a696255f533418f16b83ed19977312c" translate="yes" xml:space="preserve">
          <source>func (f *File) SyscallConn() (syscall.RawConn, error)</source>
          <target state="translated">func (f *Archivo)SyscallConn()(syscall.RawConn,error)</target>
        </trans-unit>
        <trans-unit id="8588273e2f0c9448e4f271b2d496f27815af651a" translate="yes" xml:space="preserve">
          <source>func (f *File) Truncate(size int64) error</source>
          <target state="translated">func (f *Archivo)Truncado(tamaño int64)error</target>
        </trans-unit>
        <trans-unit id="333de95988ce8317f7382cafaa7c52c597030f3d" translate="yes" xml:space="preserve">
          <source>func (f *File) Write(b []byte) (n int, err error)</source>
          <target state="translated">func (f *Archivo)Write(b []byte)(n int,err error)</target>
        </trans-unit>
        <trans-unit id="3c0e0888a6ce6a29dd8398d176667598f94812da" translate="yes" xml:space="preserve">
          <source>func (f *File) WriteAt(b []byte, off int64) (n int, err error)</source>
          <target state="translated">func (f *File)WriteAt(b []byte,off int64)(n int,err error)</target>
        </trans-unit>
        <trans-unit id="b24fd6ff4cfae8195d963312be29d029efd48d1d" translate="yes" xml:space="preserve">
          <source>func (f *File) WriteString(s string) (n int, err error)</source>
          <target state="translated">func (f *File)WriteString(s string)(n int,err error)</target>
        </trans-unit>
        <trans-unit id="b471ad8a3840fba07c0397532baf3e8426db8ea0" translate="yes" xml:space="preserve">
          <source>func (f *FlagSet) Arg(i int) string</source>
          <target state="translated">func (f *FlagSet)Arg(i int)string</target>
        </trans-unit>
        <trans-unit id="d8e542d37fd2a0f37a260fbb679a59e63934ced4" translate="yes" xml:space="preserve">
          <source>func (f *FlagSet) Args() []string</source>
          <target state="translated">func (f *FlagSet)Args()[]string</target>
        </trans-unit>
        <trans-unit id="bfdb06f7746a1ea221f96b818dcb43b68b75c82e" translate="yes" xml:space="preserve">
          <source>func (f *FlagSet) Bool(name string, value bool, usage string) *bool</source>
          <target state="translated">func (f *FlagSet)Bool(name string,value bool,usage string)*bool</target>
        </trans-unit>
        <trans-unit id="066d275bc2cc743d5cde9a1c2d87e5083363f47a" translate="yes" xml:space="preserve">
          <source>func (f *FlagSet) BoolVar(p *bool, name string, value bool, usage string)</source>
          <target state="translated">func (f *FlagSet)BoolVar(p *bool,name string,value bool,usage string)</target>
        </trans-unit>
        <trans-unit id="dd99e0858c7605d644bc1eb136ad091d94572bb3" translate="yes" xml:space="preserve">
          <source>func (f *FlagSet) Duration(name string, value time.Duration, usage string) *time.Duration</source>
          <target state="translated">func (f *FlagSet)Duration(name string,value time.Duration,usage string)*time.Duration</target>
        </trans-unit>
        <trans-unit id="a88db4de2f31497db115b955f2d3899f74017dd8" translate="yes" xml:space="preserve">
          <source>func (f *FlagSet) DurationVar(p *time.Duration, name string, value time.Duration, usage string)</source>
          <target state="translated">func (f *FlagSet)DurationVar(p *time.Duration,name string,value time.Duration,usage string)</target>
        </trans-unit>
        <trans-unit id="8edb9bb9c8c9ddb444a9e0272954007353bc7857" translate="yes" xml:space="preserve">
          <source>func (f *FlagSet) ErrorHandling() ErrorHandling</source>
          <target state="translated">func (f *FlagSet)ErrorHandling()ErrorHandling</target>
        </trans-unit>
        <trans-unit id="c25482c336e71e6184691dc47eac931e7dc2e6bd" translate="yes" xml:space="preserve">
          <source>func (f *FlagSet) Float64(name string, value float64, usage string) *float64</source>
          <target state="translated">func (f *FlagSet)Float64(name string,value float64,usage string)*float64</target>
        </trans-unit>
        <trans-unit id="de4c8d261138b2631946374e536e6cc3c7749d8b" translate="yes" xml:space="preserve">
          <source>func (f *FlagSet) Float64Var(p *float64, name string, value float64, usage string)</source>
          <target state="translated">func (f *FlagSet)Float64Var(p *float64,name string,value float64,usage string)</target>
        </trans-unit>
        <trans-unit id="98e2cd548df1764c17232bf5741cc05f5c301147" translate="yes" xml:space="preserve">
          <source>func (f *FlagSet) Init(name string, errorHandling ErrorHandling)</source>
          <target state="translated">func (f *FlagSet)Init(name string,errorHandling ErrorHandling)</target>
        </trans-unit>
        <trans-unit id="c69b9e1f9910d272e5e51241e8bf1d01aebe05b0" translate="yes" xml:space="preserve">
          <source>func (f *FlagSet) Int(name string, value int, usage string) *int</source>
          <target state="translated">func (f *FlagSet)Int(name string,value int,usage string)*int</target>
        </trans-unit>
        <trans-unit id="16b2e9ac022ae4c1193b7d2ce44b738576c58fcd" translate="yes" xml:space="preserve">
          <source>func (f *FlagSet) Int64(name string, value int64, usage string) *int64</source>
          <target state="translated">func (f *FlagSet)Int64(name string,value int64,usage string)*int64</target>
        </trans-unit>
        <trans-unit id="de5eb572eab853730cd2f63e93e38f3ce72199f3" translate="yes" xml:space="preserve">
          <source>func (f *FlagSet) Int64Var(p *int64, name string, value int64, usage string)</source>
          <target state="translated">func (f *FlagSet)Int64Var(p *int64,cadena de nombre,valor int64,cadena de uso)</target>
        </trans-unit>
        <trans-unit id="df584870df332714e1ccceb599edae462af0db1e" translate="yes" xml:space="preserve">
          <source>func (f *FlagSet) IntVar(p *int, name string, value int, usage string)</source>
          <target state="translated">func (f *FlagSet)IntVar(p *int,name string,value int,usage string)</target>
        </trans-unit>
        <trans-unit id="3aaee39354e976171865d819661b7f98502a27c1" translate="yes" xml:space="preserve">
          <source>func (f *FlagSet) Lookup(name string) *Flag</source>
          <target state="translated">func (f *FlagSet)Lookup(name string)*Flag</target>
        </trans-unit>
        <trans-unit id="0002c83eeecebac8e866807ca0079bc3b0c72d68" translate="yes" xml:space="preserve">
          <source>func (f *FlagSet) NArg() int</source>
          <target state="translated">func (f *FlagSet)NArg()int</target>
        </trans-unit>
        <trans-unit id="7c8a529cf936a2270cdaa6856b8961b1f1a0a838" translate="yes" xml:space="preserve">
          <source>func (f *FlagSet) NFlag() int</source>
          <target state="translated">func (f *FlagSet)NFlag()int</target>
        </trans-unit>
        <trans-unit id="814515b6d1ab126f031e0b36178813daef9ea8c8" translate="yes" xml:space="preserve">
          <source>func (f *FlagSet) Name() string</source>
          <target state="translated">func (f *FlagSet)Name()string</target>
        </trans-unit>
        <trans-unit id="7a6095599f6ef77938c4068bb4039be75c86e981" translate="yes" xml:space="preserve">
          <source>func (f *FlagSet) Output() io.Writer</source>
          <target state="translated">func (f *FlagSet)Output()io.Writer</target>
        </trans-unit>
        <trans-unit id="98b1c31a5bb5854210e3635e12bee42f5e442187" translate="yes" xml:space="preserve">
          <source>func (f *FlagSet) Parse(arguments []string) error</source>
          <target state="translated">func (f *FlagSet)Parse(arguments []string)error</target>
        </trans-unit>
        <trans-unit id="39e7c9d43568060ce7ddd316debff171bbe42d23" translate="yes" xml:space="preserve">
          <source>func (f *FlagSet) Parsed() bool</source>
          <target state="translated">func (f *FlagSet)Parsed()bool</target>
        </trans-unit>
        <trans-unit id="99b3411d588fecb7a222ca22d6555cc83d822ac4" translate="yes" xml:space="preserve">
          <source>func (f *FlagSet) PrintDefaults()</source>
          <target state="translated">func (f *FlagSet)PrintDefaults()</target>
        </trans-unit>
        <trans-unit id="0a0c1db617ce16b53de32d9f897c6320a398081c" translate="yes" xml:space="preserve">
          <source>func (f *FlagSet) Set(name, value string) error</source>
          <target state="translated">func (f *FlagSet)Set(name,value string)error</target>
        </trans-unit>
        <trans-unit id="4e55c5fc10deffeef25f6f7d3de92bfe95dd7f97" translate="yes" xml:space="preserve">
          <source>func (f *FlagSet) SetOutput(output io.Writer)</source>
          <target state="translated">func (f *FlagSet)SetOutput(output io.Writer)</target>
        </trans-unit>
        <trans-unit id="6e3e27530e390cf635e41d747e14f4d635dbece8" translate="yes" xml:space="preserve">
          <source>func (f *FlagSet) String(name string, value string, usage string) *string</source>
          <target state="translated">func (f *FlagSet)String(name string,value string,usage string)*string</target>
        </trans-unit>
        <trans-unit id="7d8087e99f07f1d23356a65fb9b75ba45fadf724" translate="yes" xml:space="preserve">
          <source>func (f *FlagSet) StringVar(p *string, name string, value string, usage string)</source>
          <target state="translated">func (f *FlagSet)StringVar(p *string,name string,value string,usage string)</target>
        </trans-unit>
        <trans-unit id="8845275d2eaae9c80e289b2d435562ae4dd1e2b7" translate="yes" xml:space="preserve">
          <source>func (f *FlagSet) Uint(name string, value uint, usage string) *uint</source>
          <target state="translated">func (f *FlagSet)Uint(name string,value uint,usage string)*uint</target>
        </trans-unit>
        <trans-unit id="8c2ac461357ff15db269c767e4cd15ef750b5798" translate="yes" xml:space="preserve">
          <source>func (f *FlagSet) Uint64(name string, value uint64, usage string) *uint64</source>
          <target state="translated">func (f *FlagSet)Uint64(name string,value uint64,usage string)*uint64</target>
        </trans-unit>
        <trans-unit id="63f4ea93b702d360c0360af4939c991eae34d25d" translate="yes" xml:space="preserve">
          <source>func (f *FlagSet) Uint64Var(p *uint64, name string, value uint64, usage string)</source>
          <target state="translated">func (f *FlagSet)Uint64Var(p *uint64,cadena de nombre,valor uint64,cadena de uso)</target>
        </trans-unit>
        <trans-unit id="33f85bd7fd5c07823638b77d8cda5bcecf42195e" translate="yes" xml:space="preserve">
          <source>func (f *FlagSet) UintVar(p *uint, name string, value uint, usage string)</source>
          <target state="translated">func (f *FlagSet)UintVar(p *uint,name string,value uint,usage string)</target>
        </trans-unit>
        <trans-unit id="4e82d619143fae1db21c8c485a53daf75d4100e6" translate="yes" xml:space="preserve">
          <source>func (f *FlagSet) Var(value Value, name string, usage string)</source>
          <target state="translated">func (f *FlagSet)Var(value Value,name string,usage string)</target>
        </trans-unit>
        <trans-unit id="4fef77029ac1bdc47683036c6b64d71a9039bf33" translate="yes" xml:space="preserve">
          <source>func (f *FlagSet) Visit(fn func(*Flag))</source>
          <target state="translated">func (f *FlagSet)Visit(fn func(*Flag))</target>
        </trans-unit>
        <trans-unit id="2262a3a11a58ba1cd25a49f8a4686684436d7d59" translate="yes" xml:space="preserve">
          <source>func (f *FlagSet) VisitAll(fn func(*Flag))</source>
          <target state="translated">func(f *FlagSet)VisitAll(fn func(*Flag))</target>
        </trans-unit>
        <trans-unit id="f10834996f5e4940c8379c74f9ec9dc80532b2fa" translate="yes" xml:space="preserve">
          <source>func (f *Form) RemoveAll() error</source>
          <target state="translated">func (f *Form)RemoveAll()error</target>
        </trans-unit>
        <trans-unit id="4ebdd6904e0d47a0362f0b8a2f4f3b427e006122" translate="yes" xml:space="preserve">
          <source>func (f *Func) Entry() uintptr</source>
          <target state="translated">func (f *Func)Entry()uintptr</target>
        </trans-unit>
        <trans-unit id="63ddf683705394066f08c4e731dc202522d524ee" translate="yes" xml:space="preserve">
          <source>func (f *Func) FileLine(pc uintptr) (file string, line int)</source>
          <target state="translated">func (f *Func)FileLine(pc uintptr)(file string,line int)</target>
        </trans-unit>
        <trans-unit id="542460994eb4c180f53221f886bd257b6ca917b6" translate="yes" xml:space="preserve">
          <source>func (f *Func) Name() string</source>
          <target state="translated">func (f *Func)Name()string</target>
        </trans-unit>
        <trans-unit id="69b2694e7618be1cbb2b9a2a84aad13d264e2cfe" translate="yes" xml:space="preserve">
          <source>func (f Flags) String() string</source>
          <target state="translated">func (f Flags)String()string</target>
        </trans-unit>
        <trans-unit id="1e12ea7316801e5ecb5fd3b4880c180b997ac28f" translate="yes" xml:space="preserve">
          <source>func (f Format) String() string</source>
          <target state="translated">func (f Formato)String()string</target>
        </trans-unit>
        <trans-unit id="872a52f0323bc6cae3267447b0581f1d5b09591a" translate="yes" xml:space="preserve">
          <source>func (f Func) String() string</source>
          <target state="translated">func (f Func)String()string</target>
        </trans-unit>
        <trans-unit id="e6fe0367e787ad7c89a3f0d3937256dabf1010b1" translate="yes" xml:space="preserve">
          <source>func (f Func) Value() interface{}</source>
          <target state="translated">func (f Func)Value()interface{}</target>
        </trans-unit>
        <trans-unit id="55591cb03ab9a15a337ec4df7d813128b42a7d43" translate="yes" xml:space="preserve">
          <source>func (f HandlerFunc) ServeHTTP(w ResponseWriter, r *Request)</source>
          <target state="translated">func (f HandlerFunc)ServeHTTP(w ResponseWriter,r *Request)</target>
        </trans-unit>
        <trans-unit id="2f6fbd5f1b9c4a5be32bde19b7c03aaa45c5ac40" translate="yes" xml:space="preserve">
          <source>func (ff *FatFile) Close() error</source>
          <target state="translated">func (ff *FatFile)Close()error</target>
        </trans-unit>
        <trans-unit id="5f658a623a9dfcf3b49b8ec24bb8e44254e6f2d9" translate="yes" xml:space="preserve">
          <source>func (fh *FileHeader) Open() (File, error)</source>
          <target state="translated">func (fh *FileHeader)Open()(Archivo,error)</target>
        </trans-unit>
        <trans-unit id="6058a65383691299f1296ca95a60ec1f52d50859" translate="yes" xml:space="preserve">
          <source>func (g *CommentGroup) End() token.Pos</source>
          <target state="translated">func (g *CommentGroup)End()token.Pos</target>
        </trans-unit>
        <trans-unit id="7aff3136cd9de633a30953fe800a143da1ef6d61" translate="yes" xml:space="preserve">
          <source>func (g *CommentGroup) Pos() token.Pos</source>
          <target state="translated">func (g *CommentGroup)Pos()token.Pos</target>
        </trans-unit>
        <trans-unit id="cf1d2ddbd693be355adf6a335656f554e0c5804d" translate="yes" xml:space="preserve">
          <source>func (g *CommentGroup) Text() string</source>
          <target state="translated">func (g *CommentGroup)Text()string</target>
        </trans-unit>
        <trans-unit id="eb5957edeea021c0eb885758f2af6ed8e710aa53" translate="yes" xml:space="preserve">
          <source>func (h *FileHeader) FileInfo() os.FileInfo</source>
          <target state="translated">func (h *FileHeader)FileInfo()os.FileInfo</target>
        </trans-unit>
        <trans-unit id="4abca8d94c6f992dab6e8e487cafa1e926405a3b" translate="yes" xml:space="preserve">
          <source>func (h *FileHeader) ModTime() time.Time</source>
          <target state="translated">func (h *FileHeader)ModTime()time.Time</target>
        </trans-unit>
        <trans-unit id="ef3376802e3429939f48510dbcbe637995bb3040" translate="yes" xml:space="preserve">
          <source>func (h *FileHeader) Mode() (mode os.FileMode)</source>
          <target state="translated">func (h *FileHeader)Mode()(modo os.FileMode)</target>
        </trans-unit>
        <trans-unit id="e12ef7a76bb3e9762300b61823ec8dcdc3e790f4" translate="yes" xml:space="preserve">
          <source>func (h *FileHeader) SetModTime(t time.Time)</source>
          <target state="translated">func (h *FileHeader)SetModTime(t time.Time)</target>
        </trans-unit>
        <trans-unit id="3c1c226b84aacb7dd914260079a8222359138617" translate="yes" xml:space="preserve">
          <source>func (h *FileHeader) SetMode(mode os.FileMode)</source>
          <target state="translated">func (h *FileHeader)SetMode(mode os.FileMode)</target>
        </trans-unit>
        <trans-unit id="ad51139a1880e39d613dff932a3a820b0073567e" translate="yes" xml:space="preserve">
          <source>func (h *Handler) ServeHTTP(rw http.ResponseWriter, req *http.Request)</source>
          <target state="translated">func (h *Handler)ServeHTTP(rw http.ResponseWriter,req *http.Request)</target>
        </trans-unit>
        <trans-unit id="3f0439b9f49897965689d4e98b7964b59ec6590f" translate="yes" xml:space="preserve">
          <source>func (h *Header) FileInfo() os.FileInfo</source>
          <target state="translated">func (h *Header)FileInfo()os.FileInfo</target>
        </trans-unit>
        <trans-unit id="5a4e39450846b9901a34a8c22a68d3677be99ee5" translate="yes" xml:space="preserve">
          <source>func (h Hash) Available() bool</source>
          <target state="translated">func (h Hash)Available()bool</target>
        </trans-unit>
        <trans-unit id="fb06faaf89ea3b3f3331f3f543ab7c206ee0aa3b" translate="yes" xml:space="preserve">
          <source>func (h Hash) HashFunc() Hash</source>
          <target state="translated">func (h Hash)HashFunc()Hash</target>
        </trans-unit>
        <trans-unit id="2b002da597c09a5d99ceb127809f41b0b54596a0" translate="yes" xml:space="preserve">
          <source>func (h Hash) New() hash.Hash</source>
          <target state="translated">func (h Hash)New()hash.Hash</target>
        </trans-unit>
        <trans-unit id="e378c97c81581e23767b06ab6f285bbe0e7108d0" translate="yes" xml:space="preserve">
          <source>func (h Hash) Size() int</source>
          <target state="translated">func (h Hash)Size()int</target>
        </trans-unit>
        <trans-unit id="ae6bdc1d9cc5341267be702fce9cc39d220ad14e" translate="yes" xml:space="preserve">
          <source>func (h Hash) String() string</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="118a8bc778a3ad5cfec3b3d28f308592b173a105" translate="yes" xml:space="preserve">
          <source>func (h Header) Add(key, value string)</source>
          <target state="translated">func (h Header)Add(key,value string)</target>
        </trans-unit>
        <trans-unit id="a84e27ca1ecea389011c172c06859f00194ada36" translate="yes" xml:space="preserve">
          <source>func (h Header) AddressList(key string) ([]*Address, error)</source>
          <target state="translated">func (h Header)AddressList(key string)([]*Dirección,error)</target>
        </trans-unit>
        <trans-unit id="2df1cee2dc8ccd6a83592d1e82333c8398954d8a" translate="yes" xml:space="preserve">
          <source>func (h Header) Clone() Header</source>
          <target state="translated">func (h Header)Clone()Header</target>
        </trans-unit>
        <trans-unit id="7ad6b90fe6c2e39e9668e4b0f8c84037c255a855" translate="yes" xml:space="preserve">
          <source>func (h Header) Date() (time.Time, error)</source>
          <target state="translated">func (h Header)Date()(time.Time,error)</target>
        </trans-unit>
        <trans-unit id="1ded813722847da4763bcd84a24784e46d3784a4" translate="yes" xml:space="preserve">
          <source>func (h Header) Del(key string)</source>
          <target state="translated">func (h Header)Del(key string)</target>
        </trans-unit>
        <trans-unit id="eb015741026adf4ba981a31fb3b9003682c720f2" translate="yes" xml:space="preserve">
          <source>func (h Header) Get(key string) string</source>
          <target state="translated">func (h Header)Get(key string)string</target>
        </trans-unit>
        <trans-unit id="a69228bc50917612b79e2922485586ac2af243d4" translate="yes" xml:space="preserve">
          <source>func (h Header) Set(key, value string)</source>
          <target state="translated">func (h Header)Set(key,value string)</target>
        </trans-unit>
        <trans-unit id="af61d1a9bc4ade88c876006a5fda69bddaac7ab2" translate="yes" xml:space="preserve">
          <source>func (h Header) Values(key string) []string</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a9a1ee52ad8614c0541546935ce50c2a285a517a" translate="yes" xml:space="preserve">
          <source>func (h Header) Write(w io.Writer) error</source>
          <target state="translated">func (h Header)Write(w io.Writer)error</target>
        </trans-unit>
        <trans-unit id="00e765f8abe5b7099fab3aea0ec05491d7ab862b" translate="yes" xml:space="preserve">
          <source>func (h Header) WriteSubset(w io.Writer, exclude map[string]bool) error</source>
          <target state="translated">func (h Header)WriteSubset(w io.Writer,excluye map[string]bool)error</target>
        </trans-unit>
        <trans-unit id="83cf347a1a2a12a0fba8feccc82bd7d0e5618d08" translate="yes" xml:space="preserve">
          <source>func (h HostnameError) Error() string</source>
          <target state="translated">func (h HostnameError)Error()string</target>
        </trans-unit>
        <trans-unit id="2319130f668a903f2b762a232340eb1aab41a729" translate="yes" xml:space="preserve">
          <source>func (h MIMEHeader) Add(key, value string)</source>
          <target state="translated">func (h MIMEHeader)Add(key,value string)</target>
        </trans-unit>
        <trans-unit id="b12f79b42f26805cf6cf872e560db556f9b78541" translate="yes" xml:space="preserve">
          <source>func (h MIMEHeader) Del(key string)</source>
          <target state="translated">func (h MIMEHeader)Del(key string)</target>
        </trans-unit>
        <trans-unit id="1f49d23343018ba3adfacce69ebdfabb74f113c9" translate="yes" xml:space="preserve">
          <source>func (h MIMEHeader) Get(key string) string</source>
          <target state="translated">func (h MIMEHeader)Get(key string)string</target>
        </trans-unit>
        <trans-unit id="c450c0ba59c6a333344a98dd08f2449529bc7518" translate="yes" xml:space="preserve">
          <source>func (h MIMEHeader) Set(key, value string)</source>
          <target state="translated">func (h MIMEHeader)Set(key,value string)</target>
        </trans-unit>
        <trans-unit id="902a6ebcd3b49d45b23c00a3a7dc36c6b7658e9e" translate="yes" xml:space="preserve">
          <source>func (h MIMEHeader) Values(key string) []string</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1055cfdf4456a81a1a9b7756de5ea86ab49c4641" translate="yes" xml:space="preserve">
          <source>func (h UnhandledCriticalExtension) Error() string</source>
          <target state="translated">func (h UnhandledCriticalExtension)Error()string</target>
        </trans-unit>
        <trans-unit id="81c22e4ad28844bf6fb40146067602b38c0d4cb3" translate="yes" xml:space="preserve">
          <source>func (i *IdentifierNode) Copy() Node</source>
          <target state="translated">func (i *IdentifierNode)Copy()Node</target>
        </trans-unit>
        <trans-unit id="6ea7018d6a7f3bcd160fb02fbb83a38fbbfca0b9" translate="yes" xml:space="preserve">
          <source>func (i *IdentifierNode) SetPos(pos Pos) *IdentifierNode</source>
          <target state="translated">func (i *IdentifierNode)SetPos(pos)*IdentifierNode</target>
        </trans-unit>
        <trans-unit id="451e4c0f438ae933e0c2971f24b51abecdf3646f" translate="yes" xml:space="preserve">
          <source>func (i *IdentifierNode) SetTree(t *Tree) *IdentifierNode</source>
          <target state="translated">func (i *IdentifierNode)SetTree(t *Tree)*IdentifierNode</target>
        </trans-unit>
        <trans-unit id="09ad29895dc64a295d58bc728dcf8f26ae2ecd98" translate="yes" xml:space="preserve">
          <source>func (i *IdentifierNode) String() string</source>
          <target state="translated">func (i *IdentifierNode)String()string</target>
        </trans-unit>
        <trans-unit id="ef7fb1dadf7c0a211acd343a6e5ed95e1763cf0c" translate="yes" xml:space="preserve">
          <source>func (i *IfNode) Copy() Node</source>
          <target state="translated">func (i *IfNode)Copy()Node</target>
        </trans-unit>
        <trans-unit id="31ffbbe40400b57eb4a665288b64870ffd72800f" translate="yes" xml:space="preserve">
          <source>func (i *Inst) MatchEmptyWidth(before rune, after rune) bool</source>
          <target state="translated">func (i *Inst)MatchEmptyWidth(antes de la runa,después de la runa)bool</target>
        </trans-unit>
        <trans-unit id="ad7df5cbcf35f64a9c3826f2a67002817684e463" translate="yes" xml:space="preserve">
          <source>func (i *Inst) MatchRune(r rune) bool</source>
          <target state="translated">func (i *Inst)MatchRune(r rune)bool</target>
        </trans-unit>
        <trans-unit id="47fd61e7d5c8636750e0d71c6df4a83bcef7c9bf" translate="yes" xml:space="preserve">
          <source>func (i *Inst) MatchRunePos(r rune) int</source>
          <target state="translated">func (i *Inst)MatchRunePos(r rune)int</target>
        </trans-unit>
        <trans-unit id="08e41cb0cc1d8ff7aa04e344765280812e56fa82" translate="yes" xml:space="preserve">
          <source>func (i *Inst) String() string</source>
          <target state="translated">func (i *Inst)String()string</target>
        </trans-unit>
        <trans-unit id="1a2a20435a013935713bec5b8dd68ec65a8afe8c" translate="yes" xml:space="preserve">
          <source>func (i Accuracy) String() string</source>
          <target state="translated">func (i Accuracy)String()string</target>
        </trans-unit>
        <trans-unit id="5a49a76dfc0b87d77d4b72050ea98469c515bc1f" translate="yes" xml:space="preserve">
          <source>func (i Attr) String() string</source>
          <target state="translated">func (i Attr)String()string</target>
        </trans-unit>
        <trans-unit id="2990f07cead508315439e8ada0591863132f0d3c" translate="yes" xml:space="preserve">
          <source>func (i Class) GoString() string</source>
          <target state="translated">func (Clase i)GoString()string</target>
        </trans-unit>
        <trans-unit id="119c6d56a84da71b3c44e018a6048c0879ec92e9" translate="yes" xml:space="preserve">
          <source>func (i Class) String() string</source>
          <target state="translated">func (Clase i)String()string</target>
        </trans-unit>
        <trans-unit id="bdb48e75fe4eb59cbde41e4bf7622c2b97a7c7bf" translate="yes" xml:space="preserve">
          <source>func (i ClientAuthType) String() string</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="888547de3332bd67ea30af7bd227134302b97a71" translate="yes" xml:space="preserve">
          <source>func (i CompressionType) GoString() string</source>
          <target state="translated">func (i CompressionType)GoString()string</target>
        </trans-unit>
        <trans-unit id="2f3648d8b731d6dbc9ea70ad0df12456a8745d68" translate="yes" xml:space="preserve">
          <source>func (i CompressionType) String() string</source>
          <target state="translated">func (i CompressionType)String()string</target>
        </trans-unit>
        <trans-unit id="0c5487d58b2bbebedbfd50160a9a9e88660638b9" translate="yes" xml:space="preserve">
          <source>func (i Cpu) GoString() string</source>
          <target state="translated">func (i Cpu)GoString()string</target>
        </trans-unit>
        <trans-unit id="b38f7daa715755a499575885c47e7490905d238f" translate="yes" xml:space="preserve">
          <source>func (i Cpu) String() string</source>
          <target state="translated">func (i Cpu)String()string</target>
        </trans-unit>
        <trans-unit id="53fb1eb0921b45ac599974eadd0ad3bf97741094" translate="yes" xml:space="preserve">
          <source>func (i CurveID) String() string</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d998856acff8c3a47129eff2e12598bebfa3df22" translate="yes" xml:space="preserve">
          <source>func (i Data) GoString() string</source>
          <target state="translated">func (i Data)GoString()string</target>
        </trans-unit>
        <trans-unit id="4035ee66c71d89f680d6dd0ce34446081e96172e" translate="yes" xml:space="preserve">
          <source>func (i Data) String() string</source>
          <target state="translated">func (i Data)String()string</target>
        </trans-unit>
        <trans-unit id="2efb31e9df0c79469b9b3a1cb0e84a2deb385871" translate="yes" xml:space="preserve">
          <source>func (i DynFlag) GoString() string</source>
          <target state="translated">func (i DynFlag)GoString()string</target>
        </trans-unit>
        <trans-unit id="9ff9f5361db95af447f4842e16e16bdcea53dfaa" translate="yes" xml:space="preserve">
          <source>func (i DynFlag) String() string</source>
          <target state="translated">func (i DynFlag)String()string</target>
        </trans-unit>
        <trans-unit id="cf38de62c4d38cfda539a1722401e58927d5b23a" translate="yes" xml:space="preserve">
          <source>func (i DynTag) GoString() string</source>
          <target state="translated">func (i DynTag)GoString()string</target>
        </trans-unit>
        <trans-unit id="8e9fb0a6053cf0a4b9fdbe4cee9b5fa0b60a3eec" translate="yes" xml:space="preserve">
          <source>func (i DynTag) String() string</source>
          <target state="translated">func (i DynTag)String()string</target>
        </trans-unit>
        <trans-unit id="eee6f1de9f9e61f362abdd098fe45e3cec306376" translate="yes" xml:space="preserve">
          <source>func (i InstOp) String() string</source>
          <target state="translated">func (i InstOp)String()string</target>
        </trans-unit>
        <trans-unit id="8dfccdecfbb43c1e39ec635549b51f734ead5641" translate="yes" xml:space="preserve">
          <source>func (i IsolationLevel) String() string</source>
          <target state="translated">func (i IsolationLevel)String()string</target>
        </trans-unit>
        <trans-unit id="26c39826f73e50513b2372fdb6b80da5756a04a5" translate="yes" xml:space="preserve">
          <source>func (i LoadCmd) GoString() string</source>
          <target state="translated">func (i LoadCmd)GoString()string</target>
        </trans-unit>
        <trans-unit id="6f3b2ce4585273674cccf1ff784b5f1385e93603" translate="yes" xml:space="preserve">
          <source>func (i LoadCmd) String() string</source>
          <target state="translated">func (i LoadCmd)String()string</target>
        </trans-unit>
        <trans-unit id="252c0a3f62ea0ba99ce111c1634a4567396bd0b4" translate="yes" xml:space="preserve">
          <source>func (i Machine) GoString() string</source>
          <target state="translated">func (i Machine)GoString()string</target>
        </trans-unit>
        <trans-unit id="36c0ea7399dc1d578ba55a26dc2fc85f74a16eae" translate="yes" xml:space="preserve">
          <source>func (i Machine) String() string</source>
          <target state="translated">func(i Machine)String()string</target>
        </trans-unit>
        <trans-unit id="ebb632221528ed700cbaa414f261e1d5d36c0b72" translate="yes" xml:space="preserve">
          <source>func (i NType) GoString() string</source>
          <target state="translated">func (i NType)GoString()string</target>
        </trans-unit>
        <trans-unit id="5ddeea9f01822b4a9f3330858a580b031ff4a0c5" translate="yes" xml:space="preserve">
          <source>func (i NType) String() string</source>
          <target state="translated">func (i NType)String()string</target>
        </trans-unit>
        <trans-unit id="452624b590e0106b6c06cb4b456c76e8de8ae8f9" translate="yes" xml:space="preserve">
          <source>func (i OSABI) GoString() string</source>
          <target state="translated">func (i OSABI)GoString()string</target>
        </trans-unit>
        <trans-unit id="90f3ec2ef90f6c8ff498580b45d13676b1f36292" translate="yes" xml:space="preserve">
          <source>func (i OSABI) String() string</source>
          <target state="translated">func (i OSABI)String()string</target>
        </trans-unit>
        <trans-unit id="dbebcc1dbf4ad243ac2353743e099403358348a4" translate="yes" xml:space="preserve">
          <source>func (i Op) String() string</source>
          <target state="translated">func(i Op)String()string</target>
        </trans-unit>
        <trans-unit id="b8d714c83f01233d03d9c190412ddfe781ef97a3" translate="yes" xml:space="preserve">
          <source>func (i ProgFlag) GoString() string</source>
          <target state="translated">func (i ProgFlag)GoString()string</target>
        </trans-unit>
        <trans-unit id="7631d6543e1065afbfa3ff0fcf288af4b8351fe0" translate="yes" xml:space="preserve">
          <source>func (i ProgFlag) String() string</source>
          <target state="translated">func (i ProgFlag)String()string</target>
        </trans-unit>
        <trans-unit id="bb3c1a2fcbd692aa4adfa849d94fe8bdbd3e98f8" translate="yes" xml:space="preserve">
          <source>func (i ProgType) GoString() string</source>
          <target state="translated">func (i ProgType)GoString()string</target>
        </trans-unit>
        <trans-unit id="a0e20b2813ede818468bec14a0427a79e9915b55" translate="yes" xml:space="preserve">
          <source>func (i ProgType) String() string</source>
          <target state="translated">func (i ProgType)String()string</target>
        </trans-unit>
        <trans-unit id="1b79858e6c3c3728dbf22f76230a0894ab2e8fe4" translate="yes" xml:space="preserve">
          <source>func (i R_386) GoString() string</source>
          <target state="translated">func (i R_386)GoString()string</target>
        </trans-unit>
        <trans-unit id="bcf3b9301ed7b9bdf287072d77026ba45ff89219" translate="yes" xml:space="preserve">
          <source>func (i R_386) String() string</source>
          <target state="translated">func (i R_386)String()string</target>
        </trans-unit>
        <trans-unit id="7f6aa6d00c0e6fd23b715cc367f7a95a1ce0a663" translate="yes" xml:space="preserve">
          <source>func (i R_390) GoString() string</source>
          <target state="translated">func (i R_390)GoString()string</target>
        </trans-unit>
        <trans-unit id="212a30c07cead5e2fd48e59cfd967e0a92dbb338" translate="yes" xml:space="preserve">
          <source>func (i R_390) String() string</source>
          <target state="translated">func (i R_390)String()string</target>
        </trans-unit>
        <trans-unit id="da54d1158ea136b756303afedfb6077d0c509842" translate="yes" xml:space="preserve">
          <source>func (i R_AARCH64) GoString() string</source>
          <target state="translated">func (i R_AARCH64)GoString()string</target>
        </trans-unit>
        <trans-unit id="92679281677dd753e70c4154f9a9cf383a295fe3" translate="yes" xml:space="preserve">
          <source>func (i R_AARCH64) String() string</source>
          <target state="translated">func (i R_AARCH64)String()string</target>
        </trans-unit>
        <trans-unit id="0647579513031f66393c8c56243b142421602a01" translate="yes" xml:space="preserve">
          <source>func (i R_ALPHA) GoString() string</source>
          <target state="translated">func (i R_ALPHA)GoString()string</target>
        </trans-unit>
        <trans-unit id="f0a726582685244bbc8f4d7804ccde5b81269037" translate="yes" xml:space="preserve">
          <source>func (i R_ALPHA) String() string</source>
          <target state="translated">func (i R_ALPHA)String()string</target>
        </trans-unit>
        <trans-unit id="9173656aaf5340413205ac3b9a6d621fa9f34fb9" translate="yes" xml:space="preserve">
          <source>func (i R_ARM) GoString() string</source>
          <target state="translated">func (i R_ARM)GoString()string</target>
        </trans-unit>
        <trans-unit id="5092c76e581727b86ca1c07a65cf48df8db1c181" translate="yes" xml:space="preserve">
          <source>func (i R_ARM) String() string</source>
          <target state="translated">func (i R_ARM)String()string</target>
        </trans-unit>
        <trans-unit id="39c37cf75ed9ce20e4e47c750e2b56e9368bc8a3" translate="yes" xml:space="preserve">
          <source>func (i R_MIPS) GoString() string</source>
          <target state="translated">func (i R_MIPS)GoString()string</target>
        </trans-unit>
        <trans-unit id="917f4018adac4064d36720a47231699cfaf46796" translate="yes" xml:space="preserve">
          <source>func (i R_MIPS) String() string</source>
          <target state="translated">func (i R_MIPS)String()string</target>
        </trans-unit>
        <trans-unit id="79a35bbb11a44de977f52ac6d4a5ed89852b4758" translate="yes" xml:space="preserve">
          <source>func (i R_PPC) GoString() string</source>
          <target state="translated">func (i R_PPC)GoString()string</target>
        </trans-unit>
        <trans-unit id="4d16f9826c9b4c5ea7f51694c2063c7040515991" translate="yes" xml:space="preserve">
          <source>func (i R_PPC) String() string</source>
          <target state="translated">func (i R_PPC)String()string</target>
        </trans-unit>
        <trans-unit id="a67ad318e4322c5b819f4bb949c76d4bf6d6f60d" translate="yes" xml:space="preserve">
          <source>func (i R_PPC64) GoString() string</source>
          <target state="translated">func (i R_PPC64)GoString()string</target>
        </trans-unit>
        <trans-unit id="d98f2bf8a6845d53a49f00366af2a2d624ccfe61" translate="yes" xml:space="preserve">
          <source>func (i R_PPC64) String() string</source>
          <target state="translated">func (i R_PPC64)String()string</target>
        </trans-unit>
        <trans-unit id="3bb56cbed0e30d2f3d3107bda47abdb681e2498e" translate="yes" xml:space="preserve">
          <source>func (i R_RISCV) GoString() string</source>
          <target state="translated">func (i R_RISCV)GoString()string</target>
        </trans-unit>
        <trans-unit id="bad0b980558b110888e555fad20b9c6f9820b953" translate="yes" xml:space="preserve">
          <source>func (i R_RISCV) String() string</source>
          <target state="translated">func (i R_RISCV)String()string</target>
        </trans-unit>
        <trans-unit id="a352bea76191e59ec31b5e3385324d7370c6836a" translate="yes" xml:space="preserve">
          <source>func (i R_SPARC) GoString() string</source>
          <target state="translated">func (i R_SPARC)GoString()string</target>
        </trans-unit>
        <trans-unit id="ac910c5480f43c024f9849265b20636d9416a4cd" translate="yes" xml:space="preserve">
          <source>func (i R_SPARC) String() string</source>
          <target state="translated">func (i R_SPARC)String()string</target>
        </trans-unit>
        <trans-unit id="c3e429c684cc45eae94b276768e122718c4fc43f" translate="yes" xml:space="preserve">
          <source>func (i R_X86_64) GoString() string</source>
          <target state="translated">func (i R_X86_64)GoString()string</target>
        </trans-unit>
        <trans-unit id="89c327d9bd387a8e671709f620eadc2f90845eb1" translate="yes" xml:space="preserve">
          <source>func (i R_X86_64) String() string</source>
          <target state="translated">func (i R_X86_64)String()string</target>
        </trans-unit>
        <trans-unit id="b4607c8e90354b891962c34f28c89e7a0655627e" translate="yes" xml:space="preserve">
          <source>func (i RelocTypeARM) String() string</source>
          <target state="translated">func (i RelocTypeARM)String()string</target>
        </trans-unit>
        <trans-unit id="fb7590b578a5f038cdcc2658b5f38d5e8f29f849" translate="yes" xml:space="preserve">
          <source>func (i RelocTypeARM64) String() string</source>
          <target state="translated">func (i RelocTypeARM64)String()string</target>
        </trans-unit>
        <trans-unit id="e3d4db042e5917c8f5e8d5ab2e8ddcbc30697190" translate="yes" xml:space="preserve">
          <source>func (i RelocTypeGeneric) String() string</source>
          <target state="translated">func (i RelocTypeGeneric)String()string</target>
        </trans-unit>
        <trans-unit id="f14c766c3253b2cfb81ab59c89131135cda4aa1f" translate="yes" xml:space="preserve">
          <source>func (i RelocTypeX86_64) String() string</source>
          <target state="translated">func (i RelocTypeX86_64)String()string</target>
        </trans-unit>
        <trans-unit id="660396c73807b59b2bdf5bb906447b8a5be10738" translate="yes" xml:space="preserve">
          <source>func (i RoundingMode) String() string</source>
          <target state="translated">func (i RoundingMode)String()string</target>
        </trans-unit>
        <trans-unit id="bcb1a6fa40f1fa518fdcc4d102c9266075b3ca1a" translate="yes" xml:space="preserve">
          <source>func (i SectionFlag) GoString() string</source>
          <target state="translated">func (i SectionFlag)GoString()string</target>
        </trans-unit>
        <trans-unit id="61bbb4d9cf064df1018b7bb75352209b104cb087" translate="yes" xml:space="preserve">
          <source>func (i SectionFlag) String() string</source>
          <target state="translated">func (i SectionFlag)String()string</target>
        </trans-unit>
        <trans-unit id="2fc49270b57b1dc4dda6b1300bc0a62554806140" translate="yes" xml:space="preserve">
          <source>func (i SectionIndex) GoString() string</source>
          <target state="translated">func (i SectionIndex)GoString()string</target>
        </trans-unit>
        <trans-unit id="76836e2a1ace6e05643ab1c46037dfef0039d7f9" translate="yes" xml:space="preserve">
          <source>func (i SectionIndex) String() string</source>
          <target state="translated">func (i SectionIndex)String()string</target>
        </trans-unit>
        <trans-unit id="0e01315eb9d8cc800bacd227fb48d3979874bdf9" translate="yes" xml:space="preserve">
          <source>func (i SectionType) GoString() string</source>
          <target state="translated">func (i SectionType)GoString()string</target>
        </trans-unit>
        <trans-unit id="3afefa7acd92486893c333b9878496264be1e700" translate="yes" xml:space="preserve">
          <source>func (i SectionType) String() string</source>
          <target state="translated">func (i SectionType)String()string</target>
        </trans-unit>
        <trans-unit id="f1910e0b51291c13346454585fc5a631b279fcaa" translate="yes" xml:space="preserve">
          <source>func (i SignatureScheme) String() string</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c8060553a32619461ba2312b9b830265bca7b395" translate="yes" xml:space="preserve">
          <source>func (i SymBind) GoString() string</source>
          <target state="translated">func (i SymBind)GoString()string</target>
        </trans-unit>
        <trans-unit id="2318fb725a4c3a20a7f473403bd086da925d2628" translate="yes" xml:space="preserve">
          <source>func (i SymBind) String() string</source>
          <target state="translated">func (i SymBind)String()string</target>
        </trans-unit>
        <trans-unit id="9d89ecbe22b31a3b213bef53bd600bc7d940cb79" translate="yes" xml:space="preserve">
          <source>func (i SymType) GoString() string</source>
          <target state="translated">func (i SymType)GoString()string</target>
        </trans-unit>
        <trans-unit id="0b7b16535ec07a8d6691a4bf969094f6691220d7" translate="yes" xml:space="preserve">
          <source>func (i SymType) String() string</source>
          <target state="translated">func (i SymType)String()string</target>
        </trans-unit>
        <trans-unit id="87c7a607d09a647ccd3f2fcfcbedf5e132969be0" translate="yes" xml:space="preserve">
          <source>func (i SymVis) GoString() string</source>
          <target state="translated">func (i SymVis)GoString()string</target>
        </trans-unit>
        <trans-unit id="6fd5ef53aae023c346f905e9828fc57fa73097c4" translate="yes" xml:space="preserve">
          <source>func (i SymVis) String() string</source>
          <target state="translated">func (i SymVis)String()string</target>
        </trans-unit>
        <trans-unit id="5a1979854eac5a31dc1c159a5940556043f4b294" translate="yes" xml:space="preserve">
          <source>func (i Tag) String() string</source>
          <target state="translated">func (i Tag)String()string</target>
        </trans-unit>
        <trans-unit id="18052f64cf7afcaf2b50b2715181a10875361775" translate="yes" xml:space="preserve">
          <source>func (i Type) GoString() string</source>
          <target state="translated">func (i Type)GoString()string</target>
        </trans-unit>
        <trans-unit id="2f6e20f151b94a07bdee48b252f2de9c1cacfe9e" translate="yes" xml:space="preserve">
          <source>func (i Type) String() string</source>
          <target state="translated">func (i Tipo)String()string</target>
        </trans-unit>
        <trans-unit id="5468d36b6581e020e3adf15b480c9611ab9cec2d" translate="yes" xml:space="preserve">
          <source>func (i Version) GoString() string</source>
          <target state="translated">func (i Version)GoString()string</target>
        </trans-unit>
        <trans-unit id="0e85d57980c3c14cd29675bdc718b6c6011629f5" translate="yes" xml:space="preserve">
          <source>func (i Version) String() string</source>
          <target state="translated">func (i Version)String()string</target>
        </trans-unit>
        <trans-unit id="675b83e2bc46a1497a1062bd863fe2caa8e93b4d" translate="yes" xml:space="preserve">
          <source>func (id *Ident) IsExported() bool</source>
          <target state="translated">func (id *Ident)IsExported()bool</target>
        </trans-unit>
        <trans-unit id="f8c420d2f4dbd2944f26d914bdc7cdcc1af2a8fd" translate="yes" xml:space="preserve">
          <source>func (id *Ident) String() string</source>
          <target state="translated">func (id *Ident)String()string</target>
        </trans-unit>
        <trans-unit id="2328509e995e1dbcd275c2e618047abd6de6d20b" translate="yes" xml:space="preserve">
          <source>func (ifi *Interface) Addrs() ([]Addr, error)</source>
          <target state="translated">func (ifi *Interface)Addrs()([]Addr,error)</target>
        </trans-unit>
        <trans-unit id="2e07329eb60bd029bc0e9bed43a4cc3765837063" translate="yes" xml:space="preserve">
          <source>func (ifi *Interface) MulticastAddrs() ([]Addr, error)</source>
          <target state="translated">func (ifi *Interface)MulticastAddrs()([]Addr,error)</target>
        </trans-unit>
        <trans-unit id="89247eb2eafff17e7b772e6de0a31f57d1d8cf6c" translate="yes" xml:space="preserve">
          <source>func (info *Info) ObjectOf(id *ast.Ident) Object</source>
          <target state="translated">func (info *Info)ObjectOf(id *ast.Ident)Object</target>
        </trans-unit>
        <trans-unit id="752ce90d63fcbe79e15da64db9e1dbdfbab1452e" translate="yes" xml:space="preserve">
          <source>func (info *Info) TypeOf(e ast.Expr) Type</source>
          <target state="translated">func (info *Info)TypeOf(e ast.Expr)Type</target>
        </trans-unit>
        <trans-unit id="65e601af40b63f993f20bd9d5ea3f1ba1f77c9cd" translate="yes" xml:space="preserve">
          <source>func (init *Initializer) String() string</source>
          <target state="translated">func (init *Iniciador)String()string</target>
        </trans-unit>
        <trans-unit id="fa4612b5817acffbc02ad92b67c6bf2aabe04479" translate="yes" xml:space="preserve">
          <source>func (iov *Iovec) SetLen(length int)</source>
          <target state="translated">func (iov *Iovec)SetLen(length int)</target>
        </trans-unit>
        <trans-unit id="3000e2b682c2910f12afbd460594f6317b757dd5" translate="yes" xml:space="preserve">
          <source>func (ip *IP) UnmarshalText(text []byte) error</source>
          <target state="translated">func (ip *IP)UnmarshalText(text []byte)error</target>
        </trans-unit>
        <trans-unit id="267190956e03307fe28031241b5532ccdd2852fb" translate="yes" xml:space="preserve">
          <source>func (ip IP) DefaultMask() IPMask</source>
          <target state="translated">func (ip IP)DefaultMask()IPMask</target>
        </trans-unit>
        <trans-unit id="91beb625bd11516b434dff3d998e966bfb38e628" translate="yes" xml:space="preserve">
          <source>func (ip IP) Equal(x IP) bool</source>
          <target state="translated">func (ip IP)Equal(x IP)bool</target>
        </trans-unit>
        <trans-unit id="5b995f1ec7b4cc36aafdac6ba8ae38f335d28dd4" translate="yes" xml:space="preserve">
          <source>func (ip IP) IsGlobalUnicast() bool</source>
          <target state="translated">func (ip IP)IsGlobalUnicast()bool</target>
        </trans-unit>
        <trans-unit id="87f14e77ef3d1132080d12fd576f94dd849609db" translate="yes" xml:space="preserve">
          <source>func (ip IP) IsInterfaceLocalMulticast() bool</source>
          <target state="translated">func (ip IP)IsInterfaceLocalMulticast()bool</target>
        </trans-unit>
        <trans-unit id="2328a225b908a6341682da14844af07bfd9d6c29" translate="yes" xml:space="preserve">
          <source>func (ip IP) IsLinkLocalMulticast() bool</source>
          <target state="translated">func (ip IP)IsLinkLocalMulticast()bool</target>
        </trans-unit>
        <trans-unit id="582779b2f687e2499bb4cb995024a80fac7bdd77" translate="yes" xml:space="preserve">
          <source>func (ip IP) IsLinkLocalUnicast() bool</source>
          <target state="translated">func (ip IP)IsLinkLocalUnicast()bool</target>
        </trans-unit>
        <trans-unit id="ee1b082fff6d49e64f05a4c79f267412834848a6" translate="yes" xml:space="preserve">
          <source>func (ip IP) IsLoopback() bool</source>
          <target state="translated">func (ip IP)IsLoopback()bool</target>
        </trans-unit>
        <trans-unit id="99236586f370ad92fcfbaeb06a93dd95aae2815d" translate="yes" xml:space="preserve">
          <source>func (ip IP) IsMulticast() bool</source>
          <target state="translated">func (ip IP)IsMulticast()bool</target>
        </trans-unit>
        <trans-unit id="3ad90464822fe95be6b5c2b3e92a2dfb1edbd38a" translate="yes" xml:space="preserve">
          <source>func (ip IP) IsUnspecified() bool</source>
          <target state="translated">func (ip IP)IsUnspecified()bool</target>
        </trans-unit>
        <trans-unit id="8ae0fd0d43a86cde1360cb22de7d04212829dc0f" translate="yes" xml:space="preserve">
          <source>func (ip IP) MarshalText() ([]byte, error)</source>
          <target state="translated">func (ip IP)MarshalText()([]byte,error)</target>
        </trans-unit>
        <trans-unit id="0b331049a7b50d7249aa5bd76ed11781145092e7" translate="yes" xml:space="preserve">
          <source>func (ip IP) Mask(mask IPMask) IP</source>
          <target state="translated">func (ip IP)Mask(máscara IPMask)IP</target>
        </trans-unit>
        <trans-unit id="d43c42fba13c248ed4218eb50b75f80a95ff17f8" translate="yes" xml:space="preserve">
          <source>func (ip IP) String() string</source>
          <target state="translated">func (ip IP)String()string</target>
        </trans-unit>
        <trans-unit id="1eaa343e7ffd998dd549bd9c9624bb47d930d1a4" translate="yes" xml:space="preserve">
          <source>func (ip IP) To16() IP</source>
          <target state="translated">func (ip IP)To16()IP</target>
        </trans-unit>
        <trans-unit id="140216227b529de46fe5e8fcd2bca7198bab7e68" translate="yes" xml:space="preserve">
          <source>func (ip IP) To4() IP</source>
          <target state="translated">func (ip IP)To4()IP</target>
        </trans-unit>
        <trans-unit id="fd1b69aac9f0e711b7722733090a293db45cb958" translate="yes" xml:space="preserve">
          <source>func (it *MapIter) Key() Value</source>
          <target state="translated">func (it *MapIter)Key()Value</target>
        </trans-unit>
        <trans-unit id="30725fa45388cf2eb67fccbe1a73ba766339d9b9" translate="yes" xml:space="preserve">
          <source>func (it *MapIter) Next() bool</source>
          <target state="translated">func (it *MapIter)Next()bool</target>
        </trans-unit>
        <trans-unit id="bef9661017f7e556847a72422989e712a695caf3" translate="yes" xml:space="preserve">
          <source>func (it *MapIter) Value() Value</source>
          <target state="translated">func (it *MapIter)Value()Value</target>
        </trans-unit>
        <trans-unit id="69db8ddf109276145c3dcaab5312c336eb7cd529" translate="yes" xml:space="preserve">
          <source>func (j *Jar) Cookies(u *url.URL) (cookies []*http.Cookie)</source>
          <target state="translated">func (j *Jar)Cookies(u *url.URL)(cookies []*http.Cookie)</target>
        </trans-unit>
        <trans-unit id="2ce243c5fb2c419faf3026c9b134898957b4a266" translate="yes" xml:space="preserve">
          <source>func (j *Jar) SetCookies(u *url.URL, cookies []*http.Cookie)</source>
          <target state="translated">func (j *Jar)SetCookies(u *url.URL,cookies []*http.Cookie)</target>
        </trans-unit>
        <trans-unit id="3afdb166a0708d49a4c61ec2facf69ac9cab0d79" translate="yes" xml:space="preserve">
          <source>func (k KeySizeError) Error() string</source>
          <target state="translated">func (k KeySizeError)Error()string</target>
        </trans-unit>
        <trans-unit id="a9072cf6a9a9c10daf87d85d724122c19821565b" translate="yes" xml:space="preserve">
          <source>func (k Kind) String() string</source>
          <target state="translated">func (niño)String()string</target>
        </trans-unit>
        <trans-unit id="c03f0dd072efbaa2dd16049decb7e0dcbdc2fe8f" translate="yes" xml:space="preserve">
          <source>func (kind ObjKind) String() string</source>
          <target state="translated">func (child objKind)Thong()string</target>
        </trans-unit>
        <trans-unit id="29fa287d5a6c4a2aea63b1621daeadc5b10ea490" translate="yes" xml:space="preserve">
          <source>func (l *LimitedReader) Read(p []byte) (n int, err error)</source>
          <target state="translated">func (l *Lector limitado)Read(p []byte)(n int,err error)</target>
        </trans-unit>
        <trans-unit id="5f484752c43cfdbbe8e2b08d81d40bc6b5bf2dbc" translate="yes" xml:space="preserve">
          <source>func (l *List) Back() *Element</source>
          <target state="translated">func (l *Lista)Back()*Element</target>
        </trans-unit>
        <trans-unit id="8ba6ad08322be48d4fa73535debc2583bc131dd0" translate="yes" xml:space="preserve">
          <source>func (l *List) Front() *Element</source>
          <target state="translated">func (l *Lista)Front()*Elemento</target>
        </trans-unit>
        <trans-unit id="f23c6207c5482f5026b50bd325112b9f160ad85a" translate="yes" xml:space="preserve">
          <source>func (l *List) Init() *List</source>
          <target state="translated">func (l *List)Init()*List</target>
        </trans-unit>
        <trans-unit id="28bd666ea0aaba3689953341b6778ed860633e57" translate="yes" xml:space="preserve">
          <source>func (l *List) InsertAfter(v interface{}, mark *Element) *Element</source>
          <target state="translated">func (l *Lista)InsertAfter(v interface{},marcar *Element)*Element</target>
        </trans-unit>
        <trans-unit id="acf5fa59301010369da37cae308b93a9efa049ca" translate="yes" xml:space="preserve">
          <source>func (l *List) InsertBefore(v interface{}, mark *Element) *Element</source>
          <target state="translated">func (l *Lista)InsertBefore(v interface{},marcar *Element)*Element</target>
        </trans-unit>
        <trans-unit id="30346a0434d34cdfc695153301c884dfc9a34434" translate="yes" xml:space="preserve">
          <source>func (l *List) Len() int</source>
          <target state="translated">func (l *List)Len()int</target>
        </trans-unit>
        <trans-unit id="ef6c9a42999ec0ce0631adfffacf34828972c483" translate="yes" xml:space="preserve">
          <source>func (l *List) MoveAfter(e, mark *Element)</source>
          <target state="translated">func (l *Lista)MoveAfter(e,marca *Element)</target>
        </trans-unit>
        <trans-unit id="9d7ff4c2df2a92933da362b306531e086ca06e57" translate="yes" xml:space="preserve">
          <source>func (l *List) MoveBefore(e, mark *Element)</source>
          <target state="translated">func (l *Lista)MoveBefore(e,mark *Element)</target>
        </trans-unit>
        <trans-unit id="e7d7b7aaabad3bd9a3bde1832dc17926010e59c8" translate="yes" xml:space="preserve">
          <source>func (l *List) MoveToBack(e *Element)</source>
          <target state="translated">func (l *Lista)MoveToBack(e *Element)</target>
        </trans-unit>
        <trans-unit id="bd608dceaad2036d5372fcab4836e2fb72572a90" translate="yes" xml:space="preserve">
          <source>func (l *List) MoveToFront(e *Element)</source>
          <target state="translated">func (l *Lista)MoveToFront(e *Element)</target>
        </trans-unit>
        <trans-unit id="e3a5120d5fe683f82f687f99b4f66b4076aad07e" translate="yes" xml:space="preserve">
          <source>func (l *List) PushBack(v interface{}) *Element</source>
          <target state="translated">func (l *Lista)PushBack(v interfaz{})*Elemento</target>
        </trans-unit>
        <trans-unit id="aa69524d384414d7481439894b700495d0dfb385" translate="yes" xml:space="preserve">
          <source>func (l *List) PushBackList(other *List)</source>
          <target state="translated">func (l *Lista)PushBackList(other *List)</target>
        </trans-unit>
        <trans-unit id="755077c54ff680235ec6d8e5e55f27b30d4ae34a" translate="yes" xml:space="preserve">
          <source>func (l *List) PushFront(v interface{}) *Element</source>
          <target state="translated">func (l *Lista)PushFront(v interface{})*Elemento</target>
        </trans-unit>
        <trans-unit id="8a88919c5225224a61886b6cf4a7664fc57d23ce" translate="yes" xml:space="preserve">
          <source>func (l *List) PushFrontList(other *List)</source>
          <target state="translated">func (l *Lista)PushFrontList(other *List)</target>
        </trans-unit>
        <trans-unit id="636a1733cbd32120735914267949ce28a7cbec5c" translate="yes" xml:space="preserve">
          <source>func (l *List) Remove(e *Element) interface{}</source>
          <target state="translated">func (l *List)Remove(e *Element)interface{}</target>
        </trans-unit>
        <trans-unit id="ca66869eed9c9f1c4fcd1652920d6204165d7dac" translate="yes" xml:space="preserve">
          <source>func (l *ListNode) Copy() Node</source>
          <target state="translated">func (l *ListNode)Copy()Node</target>
        </trans-unit>
        <trans-unit id="5480273a3e34bf29c736e1170410717e69069385" translate="yes" xml:space="preserve">
          <source>func (l *ListNode) CopyList() *ListNode</source>
          <target state="translated">func (l *ListNode)CopyList()*ListNode</target>
        </trans-unit>
        <trans-unit id="75b7d406e6b6f7b46d37a10f1fd745f63ff947ba" translate="yes" xml:space="preserve">
          <source>func (l *ListNode) String() string</source>
          <target state="translated">func (l *ListNode)String()string</target>
        </trans-unit>
        <trans-unit id="2121b91711188a1e2108e3673277c918a3d8c1b9" translate="yes" xml:space="preserve">
          <source>func (l *Location) String() string</source>
          <target state="translated">func (l *Localización)String()string</target>
        </trans-unit>
        <trans-unit id="20373798a221f99b8b06e55a0809bfd555a781d5" translate="yes" xml:space="preserve">
          <source>func (l *Logger) Fatal(v ...interface{})</source>
          <target state="translated">func (l *Logger)Fatal(v ...interface{})</target>
        </trans-unit>
        <trans-unit id="f0f8668d42d37ec4f200b2fe3e2888288cb8567e" translate="yes" xml:space="preserve">
          <source>func (l *Logger) Fatalf(format string, v ...interface{})</source>
          <target state="translated">func (l *Logger)Fatalf(format string,v ...interface{})</target>
        </trans-unit>
        <trans-unit id="7eb123d169c849c75745e172d6ec20241a3dd953" translate="yes" xml:space="preserve">
          <source>func (l *Logger) Fatalln(v ...interface{})</source>
          <target state="translated">func (l *Logger)Fatalln(v ...interface{})</target>
        </trans-unit>
        <trans-unit id="754045ec7871dc6ed8b8d2ed74149600c5daa73d" translate="yes" xml:space="preserve">
          <source>func (l *Logger) Flags() int</source>
          <target state="translated">func (l *Logger)Flags()int</target>
        </trans-unit>
        <trans-unit id="af70609dbe6174f4843d1719b922a5ff413ed49e" translate="yes" xml:space="preserve">
          <source>func (l *Logger) Output(calldepth int, s string) error</source>
          <target state="translated">func (l *Logger)Output(calldepth int,s string)error</target>
        </trans-unit>
        <trans-unit id="02b0dcbcacf3855825adac6c2012f1788b44df74" translate="yes" xml:space="preserve">
          <source>func (l *Logger) Panic(v ...interface{})</source>
          <target state="translated">func (l *Logger)Panic(v ...interface{})</target>
        </trans-unit>
        <trans-unit id="6fc0b038e751a52a698dd6da6b3e639a489faf3b" translate="yes" xml:space="preserve">
          <source>func (l *Logger) Panicf(format string, v ...interface{})</source>
          <target state="translated">func (l *Logger)Panicf(format string,v ...interface{})</target>
        </trans-unit>
        <trans-unit id="f2707d0204ae97fe962b69711847f6fbc898786e" translate="yes" xml:space="preserve">
          <source>func (l *Logger) Panicln(v ...interface{})</source>
          <target state="translated">func (l *Logger)Panicln(v ...interface{})</target>
        </trans-unit>
        <trans-unit id="d4d0958a66d9a0e62911fcb0916157fe2b646810" translate="yes" xml:space="preserve">
          <source>func (l *Logger) Prefix() string</source>
          <target state="translated">func (l *Logger)Prefix()string</target>
        </trans-unit>
        <trans-unit id="a3f3264bd604204d7b39b572bedfa986277a267d" translate="yes" xml:space="preserve">
          <source>func (l *Logger) Print(v ...interface{})</source>
          <target state="translated">func (l *Logger)Print(v ...interface{})</target>
        </trans-unit>
        <trans-unit id="212af5cba9d8667f71f0cd9fb798bcc585e3efde" translate="yes" xml:space="preserve">
          <source>func (l *Logger) Printf(format string, v ...interface{})</source>
          <target state="translated">func (l *Logger)Printf(format string,v ...interface{})</target>
        </trans-unit>
        <trans-unit id="91216366d6a3b8e7fbce559679cca1689bfd3d07" translate="yes" xml:space="preserve">
          <source>func (l *Logger) Println(v ...interface{})</source>
          <target state="translated">func (l *Logger)Println(v ...interface{})</target>
        </trans-unit>
        <trans-unit id="e737979217ed3858d259322363563cf7c4d29839" translate="yes" xml:space="preserve">
          <source>func (l *Logger) SetFlags(flag int)</source>
          <target state="translated">func (l *Logger)SetFlags(flag int)</target>
        </trans-unit>
        <trans-unit id="058ad78ad105c3a22a0ffd7722babdd8d0939f6a" translate="yes" xml:space="preserve">
          <source>func (l *Logger) SetOutput(w io.Writer)</source>
          <target state="translated">func (l *Logger)SetOutput(w io.Writer)</target>
        </trans-unit>
        <trans-unit id="8dcf0a7ef72fcb4201503792d2f78b8dba8b644f" translate="yes" xml:space="preserve">
          <source>func (l *Logger) SetPrefix(prefix string)</source>
          <target state="translated">func (l *Logger)SetPrefix(cadena de prefijos)</target>
        </trans-unit>
        <trans-unit id="2a01920918ddb2e87c0d3e46d4b119f8d184670e" translate="yes" xml:space="preserve">
          <source>func (l *Logger) Writer() io.Writer</source>
          <target state="translated">func (l *Logger)Writer()io.Writer</target>
        </trans-unit>
        <trans-unit id="742e9e40f0064ca9b4533af884eda09ed14ba3d7" translate="yes" xml:space="preserve">
          <source>func (l *TCPListener) Accept() (Conn, error)</source>
          <target state="translated">func (l *TCPListener)Accept()(Conn,error)</target>
        </trans-unit>
        <trans-unit id="bf7fdb1cb8ad1d1667bcc8bde84ce12fdca7ef4c" translate="yes" xml:space="preserve">
          <source>func (l *TCPListener) AcceptTCP() (*TCPConn, error)</source>
          <target state="translated">func (l *TCPListener)AcceptTCP()(*TCPConn,error)</target>
        </trans-unit>
        <trans-unit id="ba227ea3b57ec86cfc183b97abfe388f943ff077" translate="yes" xml:space="preserve">
          <source>func (l *TCPListener) Addr() Addr</source>
          <target state="translated">func (l *TCPListener)Addr()Addr</target>
        </trans-unit>
        <trans-unit id="67f575812e50cb2c991e16b0f0587b9fd42798e2" translate="yes" xml:space="preserve">
          <source>func (l *TCPListener) Close() error</source>
          <target state="translated">func (l *TCPListener)Close()error</target>
        </trans-unit>
        <trans-unit id="a71a0dce4877f8f11238a7bb04eb20751397d03e" translate="yes" xml:space="preserve">
          <source>func (l *TCPListener) File() (f *os.File, err error)</source>
          <target state="translated">func (l *TCPListener)File()(f *os.File,err error)</target>
        </trans-unit>
        <trans-unit id="9c816befa6437fe159ae19ac9f6bb8789f13dde3" translate="yes" xml:space="preserve">
          <source>func (l *TCPListener) SetDeadline(t time.Time) error</source>
          <target state="translated">func (l *TCPListener)SetDeadline(t time.Time)error</target>
        </trans-unit>
        <trans-unit id="6f7aee11742d7b2888d4913cc5137a4d487c2884" translate="yes" xml:space="preserve">
          <source>func (l *TCPListener) SyscallConn() (syscall.RawConn, error)</source>
          <target state="translated">func (l *TCPListener)SyscallConn()(syscall.RawConn,error)</target>
        </trans-unit>
        <trans-unit id="6ac589d27b7a297f9b315ca62ee5579fabafffb9" translate="yes" xml:space="preserve">
          <source>func (l *UnixListener) Accept() (Conn, error)</source>
          <target state="translated">func (l *UnixListener)Accept()(Conn,error)</target>
        </trans-unit>
        <trans-unit id="ead875227f459f563606e5e50d31cdd0552b1859" translate="yes" xml:space="preserve">
          <source>func (l *UnixListener) AcceptUnix() (*UnixConn, error)</source>
          <target state="translated">func (l *UnixListener)AcceptUnix()(*UnixConn,error)</target>
        </trans-unit>
        <trans-unit id="f20ac7f1369db4a4c4256283d35e2391552df8b8" translate="yes" xml:space="preserve">
          <source>func (l *UnixListener) Addr() Addr</source>
          <target state="translated">func (l *UnixListener)Addr()Addr</target>
        </trans-unit>
        <trans-unit id="ef01b201df8e28878f3035bcbef54ae187cf996a" translate="yes" xml:space="preserve">
          <source>func (l *UnixListener) Close() error</source>
          <target state="translated">func (l *UnixListener)Close()error</target>
        </trans-unit>
        <trans-unit id="c039657398bc75889e030c8e3ed057fae630cac1" translate="yes" xml:space="preserve">
          <source>func (l *UnixListener) File() (f *os.File, err error)</source>
          <target state="translated">func (l *UnixListener)File()(f *os.File,err error)</target>
        </trans-unit>
        <trans-unit id="caa4943973fbbc0d1e7d21ec9bd555df2828f263" translate="yes" xml:space="preserve">
          <source>func (l *UnixListener) SetDeadline(t time.Time) error</source>
          <target state="translated">func (l *UnixListener)SetDeadline(t time.Time)error</target>
        </trans-unit>
        <trans-unit id="5f9479dd8f175298dea32cdd3640deb77957cf3d" translate="yes" xml:space="preserve">
          <source>func (l *UnixListener) SetUnlinkOnClose(unlink bool)</source>
          <target state="translated">func (l *UnixListener)SetUnlinkOnClose(unlink bool)</target>
        </trans-unit>
        <trans-unit id="56c30768f4bd8277b3227546239ceebb4563b95b" translate="yes" xml:space="preserve">
          <source>func (l *UnixListener) SyscallConn() (syscall.RawConn, error)</source>
          <target state="translated">func (l *UnixListener)SyscallConn()(syscall.RawConn,error)</target>
        </trans-unit>
        <trans-unit id="ffb9ce409608e40c151d201bccca8b15df0aa005" translate="yes" xml:space="preserve">
          <source>func (lc *ListenConfig) Listen(ctx context.Context, network, address string) (Listener, error)</source>
          <target state="translated">func (lc *ListenConfig)Listen(ctx context.Contexto,red,cadena de direcciones)(Listener,error)</target>
        </trans-unit>
        <trans-unit id="e060cba9de1b9fce1d13f415f6c47e99ab470da8" translate="yes" xml:space="preserve">
          <source>func (lc *ListenConfig) ListenPacket(ctx context.Context, network, address string) (PacketConn, error)</source>
          <target state="translated">func (lc *ListenConfig)ListenPacket(ctx context.Contexto,red,cadena de direcciones)(PacketConn,error)</target>
        </trans-unit>
        <trans-unit id="4c6dbb8a921cf08cfcdfc18e60d866ae0978b3bd" translate="yes" xml:space="preserve">
          <source>func (m *M) Run() (code int)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1e533ab23f281b5681ce39ec7c47491c4b3b0874" translate="yes" xml:space="preserve">
          <source>func (m *M) Run() int</source>
          <target state="translated">func (m *M)Run()int</target>
        </trans-unit>
        <trans-unit id="250bb4fb5927f8e3ad8fa9a567d84aa945ce64f1" translate="yes" xml:space="preserve">
          <source>func (m *Map) Delete(key interface{})</source>
          <target state="translated">func (m *Map)Delete(key interface{})</target>
        </trans-unit>
        <trans-unit id="0c49d1797b42f1e2257ae660e075ccd70db63002" translate="yes" xml:space="preserve">
          <source>func (m *Map) Elem() Type</source>
          <target state="translated">func(m *Carpeta)Elem()Tipo</target>
        </trans-unit>
        <trans-unit id="33b49560efcb868240396ccbff67252ad0e6cc56" translate="yes" xml:space="preserve">
          <source>func (m *Map) Key() Type</source>
          <target state="translated">func(m *Carpeta)Key()Type</target>
        </trans-unit>
        <trans-unit id="f31b64dce55aa6f2245e7d2dd7f8100b280e5cfd" translate="yes" xml:space="preserve">
          <source>func (m *Map) Load(key interface{}) (value interface{}, ok bool)</source>
          <target state="translated">func (m *Map)Load(key interface{})(value interface{},ok bool)</target>
        </trans-unit>
        <trans-unit id="7d66622a8e3afe78a7377684ab648425503bc51c" translate="yes" xml:space="preserve">
          <source>func (m *Map) LoadAndDelete(key interface{}) (value interface{}, loaded bool)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b5abd53b173316186f12c060718193b735a43b5e" translate="yes" xml:space="preserve">
          <source>func (m *Map) LoadOrStore(key, value interface{}) (actual interface{}, loaded bool)</source>
          <target state="translated">func (m *Map)LoadOrStore(key,value interface{})(interfaz real{},bool cargado)</target>
        </trans-unit>
        <trans-unit id="9393fd4a31a92873fd39f04678638c65b2b8d37b" translate="yes" xml:space="preserve">
          <source>func (m *Map) Range(f func(key, value interface{}) bool)</source>
          <target state="translated">func (m *Mapa)Rango(f func(key,value interface{})bool)</target>
        </trans-unit>
        <trans-unit id="e7c34cad19d06c0b4d10cad3e3416fa7c62a874a" translate="yes" xml:space="preserve">
          <source>func (m *Map) Store(key, value interface{})</source>
          <target state="translated">func (m *Map)Store(key,value interface{})</target>
        </trans-unit>
        <trans-unit id="1c9c05ea91a333ea7867858ab02a291810eac6d9" translate="yes" xml:space="preserve">
          <source>func (m *Map) String() string</source>
          <target state="translated">func(m *Carpeta)String()string</target>
        </trans-unit>
        <trans-unit id="b7bbe335af840007059859505445d3e2758667e7" translate="yes" xml:space="preserve">
          <source>func (m *Map) Underlying() Type</source>
          <target state="translated">func (m *Map)Subyacente()Tipo</target>
        </trans-unit>
        <trans-unit id="74dfccb4299b3d3e11ba05bb248a9e5a8554e90e" translate="yes" xml:space="preserve">
          <source>func (m *Mutex) Lock()</source>
          <target state="translated">func (m *Mutex)Lock()</target>
        </trans-unit>
        <trans-unit id="87ced1aeee67726dfc652529c7758432907049ca" translate="yes" xml:space="preserve">
          <source>func (m *Mutex) Unlock()</source>
          <target state="translated">func (m *Mutex)Unlock()</target>
        </trans-unit>
        <trans-unit id="dc1d8ce131f84ab5efac90ab00c7a159aff504e0" translate="yes" xml:space="preserve">
          <source>func (m *RawMessage) UnmarshalJSON(data []byte) error</source>
          <target state="translated">func (m *RawMessage)UnmarshalJSON(data []byte)error</target>
        </trans-unit>
        <trans-unit id="db561d0fee89f4f8b28ba8833c716b9403b37845" translate="yes" xml:space="preserve">
          <source>func (m FileMode) IsDir() bool</source>
          <target state="translated">func (m FileMode)IsDir()bool</target>
        </trans-unit>
        <trans-unit id="65a90bfc5fbe48517e8cd2b7cfd7c98804bfd6c0" translate="yes" xml:space="preserve">
          <source>func (m FileMode) IsRegular() bool</source>
          <target state="translated">func (m FileMode)IsRegular()bool</target>
        </trans-unit>
        <trans-unit id="19badb47223acf65ffab66245ec52f91672ee6f7" translate="yes" xml:space="preserve">
          <source>func (m FileMode) Perm() FileMode</source>
          <target state="translated">func (m FileMode)Perm()FileMode</target>
        </trans-unit>
        <trans-unit id="d96198a303d05f5f5b2b571159fb337050de4d27" translate="yes" xml:space="preserve">
          <source>func (m FileMode) String() string</source>
          <target state="translated">func(m FileMode)String()string</target>
        </trans-unit>
        <trans-unit id="6851311f074fd637a5a3178fb9228c08a81c59d7" translate="yes" xml:space="preserve">
          <source>func (m IPMask) Size() (ones, bits int)</source>
          <target state="translated">func (m IPMask)Size()(ones,bits int)</target>
        </trans-unit>
        <trans-unit id="b25746fa39416777d2f7fba0e253494f831afe3c" translate="yes" xml:space="preserve">
          <source>func (m IPMask) String() string</source>
          <target state="translated">func (m IPMask)String()string</target>
        </trans-unit>
        <trans-unit id="13e66db2688ce8e14a81df8d3890f3ab240b81cc" translate="yes" xml:space="preserve">
          <source>func (m Month) String() string</source>
          <target state="translated">func (m Mes)String()string</target>
        </trans-unit>
        <trans-unit id="50549ec7eee7f56d76eff40ae262cfce59cca8fa" translate="yes" xml:space="preserve">
          <source>func (m RawMessage) MarshalJSON() ([]byte, error)</source>
          <target state="translated">func (m RawMessage)MarshalJSON()([]byte,error)</target>
        </trans-unit>
        <trans-unit id="01f793f4a9b45572435fbd721d9c6d9718e276a8" translate="yes" xml:space="preserve">
          <source>func (msghdr *Msghdr) SetControllen(length int)</source>
          <target state="translated">func (msghdr *Msghdr)SetControllen(length int)</target>
        </trans-unit>
        <trans-unit id="8a371c585e4fec27dde9f7ef71d7a44d085bef40" translate="yes" xml:space="preserve">
          <source>func (mux *ServeMux) Handle(pattern string, handler Handler)</source>
          <target state="translated">func (mux *ServeMux)Mango(pattern string,handler Handler)</target>
        </trans-unit>
        <trans-unit id="21bffa0bc3c25ba9ec73af974ac46177be34ad4a" translate="yes" xml:space="preserve">
          <source>func (mux *ServeMux) HandleFunc(pattern string, handler func(ResponseWriter, *Request))</source>
          <target state="translated">func (mux *ServeMux)HandleFunc(pattern string,handler func(ResponseWriter,*Request))</target>
        </trans-unit>
        <trans-unit id="4eb4405737f0e7832249a8f2aa6bdae79736258a" translate="yes" xml:space="preserve">
          <source>func (mux *ServeMux) Handler(r *Request) (h Handler, pattern string)</source>
          <target state="translated">func (mux *ServeMux)Handler(r *Request)(h Handler,pattern string)</target>
        </trans-unit>
        <trans-unit id="e71d84d700561bd681ac17b18c025b536452cc04" translate="yes" xml:space="preserve">
          <source>func (mux *ServeMux) ServeHTTP(w ResponseWriter, r *Request)</source>
          <target state="translated">func (mux *ServeMux)ServeHTTP(w ResponseWriter,r *Request)</target>
        </trans-unit>
        <trans-unit id="cd3e4dc2ebd3535921591368004a955b69ca9cae" translate="yes" xml:space="preserve">
          <source>func (n *IPNet) Contains(ip IP) bool</source>
          <target state="translated">func (n *IPNet)Contiene(ip IP)bool</target>
        </trans-unit>
        <trans-unit id="1d0b05322b46a24829fcbb270727eb47716fadb7" translate="yes" xml:space="preserve">
          <source>func (n *IPNet) Network() string</source>
          <target state="translated">func (n *IPNet)Network()string</target>
        </trans-unit>
        <trans-unit id="5bfc6f6495a6df46a7a606675b2f991cee6d3eae" translate="yes" xml:space="preserve">
          <source>func (n *IPNet) String() string</source>
          <target state="translated">func (n *IPNet)String()string</target>
        </trans-unit>
        <trans-unit id="e62990d83eb192db247c091854fe7982f0e03f33" translate="yes" xml:space="preserve">
          <source>func (n *Name) FillFromRDNSequence(rdns *RDNSequence)</source>
          <target state="translated">func (n *Nombre)FillFromRDNSequence(rdns *RDNSequence)</target>
        </trans-unit>
        <trans-unit id="97b2db8963cf19099438beb370fdbb89c3d85291" translate="yes" xml:space="preserve">
          <source>func (n *NilNode) Copy() Node</source>
          <target state="translated">func (n *NilNode)Copy()Node</target>
        </trans-unit>
        <trans-unit id="c69e40eddd71c0d8f19e2f975523defe8df953d4" translate="yes" xml:space="preserve">
          <source>func (n *NilNode) String() string</source>
          <target state="translated">func(n *NilNode)String()string</target>
        </trans-unit>
        <trans-unit id="a63e0f193465527d7d2999b100f7b4ae92a68485" translate="yes" xml:space="preserve">
          <source>func (n *NilNode) Type() NodeType</source>
          <target state="translated">func (n *NilNode)Type()NodeType</target>
        </trans-unit>
        <trans-unit id="f61eff570edd7b7e020bf12de5f85f704a268f0c" translate="yes" xml:space="preserve">
          <source>func (n *NullBool) Scan(value interface{}) error</source>
          <target state="translated">func (n *NullBool)Scan(value interface{})error</target>
        </trans-unit>
        <trans-unit id="b486828c49cf9fee2cbed0a8d315fa83ac5dbab5" translate="yes" xml:space="preserve">
          <source>func (n *NullFloat64) Scan(value interface{}) error</source>
          <target state="translated">func (n *NullFloat64)Scan(value interface{})error</target>
        </trans-unit>
        <trans-unit id="b67484bf24e71001bae34e7d9ae42cf691227d17" translate="yes" xml:space="preserve">
          <source>func (n *NullInt32) Scan(value interface{}) error</source>
          <target state="translated">func (n *NullInt32)Scan(value interface{})error</target>
        </trans-unit>
        <trans-unit id="39cb6529d7907cbb3eb178acd4df6954b56620f6" translate="yes" xml:space="preserve">
          <source>func (n *NullInt64) Scan(value interface{}) error</source>
          <target state="translated">func (n *NullInt64)Scan(value interface{})error</target>
        </trans-unit>
        <trans-unit id="bda77964007378d417992f83b8f983832d0cbb5c" translate="yes" xml:space="preserve">
          <source>func (n *NullTime) Scan(value interface{}) error</source>
          <target state="translated">func (n *NullTime)Scan(value interface{})error</target>
        </trans-unit>
        <trans-unit id="3a43deab179dcbe6c841454fb0477cc2c9fbed2e" translate="yes" xml:space="preserve">
          <source>func (n *NumberNode) Copy() Node</source>
          <target state="translated">func (n *NumberNode)Copy()Node</target>
        </trans-unit>
        <trans-unit id="97cf4cfdb6b512098cd41906c8b1ef2557b4bb06" translate="yes" xml:space="preserve">
          <source>func (n *NumberNode) String() string</source>
          <target state="translated">func (n *NumberNode)String()string</target>
        </trans-unit>
        <trans-unit id="3195122396d2b1ff3f115f705597c39e58da0b36" translate="yes" xml:space="preserve">
          <source>func (n Name) String() string</source>
          <target state="translated">func (n Nombre)String()string</target>
        </trans-unit>
        <trans-unit id="91795aa218850710a4fbc0cc2146c411b160efa1" translate="yes" xml:space="preserve">
          <source>func (n Name) ToRDNSequence() (ret RDNSequence)</source>
          <target state="translated">func (n Nombre)ToRDNSequence()(ret RDNSequence)</target>
        </trans-unit>
        <trans-unit id="fc17eab305cc739b31de5713b1e1d267d765f060" translate="yes" xml:space="preserve">
          <source>func (n NotNull) ConvertValue(v interface{}) (Value, error)</source>
          <target state="translated">func (n NotNull)ConvertValue(v interface{})(Valor,error)</target>
        </trans-unit>
        <trans-unit id="ed13859522e5cbd2cfd8ed639561937f573f2fdf" translate="yes" xml:space="preserve">
          <source>func (n Null) ConvertValue(v interface{}) (Value, error)</source>
          <target state="translated">func (n Null)ConvertValue(v interface{})(Valor,error)</target>
        </trans-unit>
        <trans-unit id="98c430faa10f3df85c55dde5a88ac39934862305" translate="yes" xml:space="preserve">
          <source>func (n NullBool) Value() (driver.Value, error)</source>
          <target state="translated">func (n NullBool)Value()(driver.Value,error)</target>
        </trans-unit>
        <trans-unit id="9e404aabd972b745563362fdfce5e81786da08a5" translate="yes" xml:space="preserve">
          <source>func (n NullFloat64) Value() (driver.Value, error)</source>
          <target state="translated">func (n NullFloat64)Value()(driver.Value,error)</target>
        </trans-unit>
        <trans-unit id="e8977148455642a82dab4a5e0377daf78e2ffd53" translate="yes" xml:space="preserve">
          <source>func (n NullInt32) Value() (driver.Value, error)</source>
          <target state="translated">func (n NullInt32)Value()(driver.Value,error)</target>
        </trans-unit>
        <trans-unit id="4c17180375efbd58baf0120670cf644419c08c6a" translate="yes" xml:space="preserve">
          <source>func (n NullInt64) Value() (driver.Value, error)</source>
          <target state="translated">func (n NullInt64)Value()(driver.Value,error)</target>
        </trans-unit>
        <trans-unit id="a85d9f81ffc64e0754968ffd8c5e17639b6c830d" translate="yes" xml:space="preserve">
          <source>func (n NullTime) Value() (driver.Value, error)</source>
          <target state="translated">func (n NullTime)Value()(driver.Value,error)</target>
        </trans-unit>
        <trans-unit id="5d9a9539cd4e374decfe245e7f30c786ae5dc593" translate="yes" xml:space="preserve">
          <source>func (n Number) Float64() (float64, error)</source>
          <target state="translated">func (n Número)Float64()(float64,error)</target>
        </trans-unit>
        <trans-unit id="01fee754d06401430395fc388f3c704829630acc" translate="yes" xml:space="preserve">
          <source>func (n Number) Int64() (int64, error)</source>
          <target state="translated">func (n Número)Int64()(int64,error)</target>
        </trans-unit>
        <trans-unit id="93b8fa9b5152dfd6711d25ba641a3dbce77e4324" translate="yes" xml:space="preserve">
          <source>func (n Number) String() string</source>
          <target state="translated">func (n Número)String()string</target>
        </trans-unit>
        <trans-unit id="643775ea2c7f3236a780f425da376a5bac94dfd6" translate="yes" xml:space="preserve">
          <source>func (ns *NullString) Scan(value interface{}) error</source>
          <target state="translated">func (ns *NullString)Scan(value interface{})error</target>
        </trans-unit>
        <trans-unit id="5e1d047a98be518940f31b083ddba109c53fff17" translate="yes" xml:space="preserve">
          <source>func (ns NullString) Value() (driver.Value, error)</source>
          <target state="translated">func (ns NullString)Value()(driver.Value,error)</target>
        </trans-unit>
        <trans-unit id="01de9e023573316897488efc0ba3e18f64897d17" translate="yes" xml:space="preserve">
          <source>func (o *Once) Do(f func())</source>
          <target state="translated">func (o *Once)Do(f func())</target>
        </trans-unit>
        <trans-unit id="8bbe052dd25fad629193a48e87f970de4c66da94" translate="yes" xml:space="preserve">
          <source>func (obj *Builtin) Exported() bool</source>
          <target state="translated">func (obj *Builtin)Exported()bool</target>
        </trans-unit>
        <trans-unit id="0eb0a014015c3a4a7c49b55435cd0849747b4beb" translate="yes" xml:space="preserve">
          <source>func (obj *Builtin) Id() string</source>
          <target state="translated">func (obj *Builtin)Id()string</target>
        </trans-unit>
        <trans-unit id="f6acda8148acd1aa282aabb4aa1b7c74c52096bc" translate="yes" xml:space="preserve">
          <source>func (obj *Builtin) Name() string</source>
          <target state="translated">func (obj *Builtin)Name()string</target>
        </trans-unit>
        <trans-unit id="b9d639fde323c5dabe75a7e10348ca9152fe6a67" translate="yes" xml:space="preserve">
          <source>func (obj *Builtin) Parent() *Scope</source>
          <target state="translated">func (obj *Builtin)Parent()*Scope</target>
        </trans-unit>
        <trans-unit id="8edc75e62a350408a512db8f8e36c133607431bc" translate="yes" xml:space="preserve">
          <source>func (obj *Builtin) Pkg() *Package</source>
          <target state="translated">func (obj *Builtin)Pkg()*Package</target>
        </trans-unit>
        <trans-unit id="9645cf410caa45625182ed30d2bae9d72388611d" translate="yes" xml:space="preserve">
          <source>func (obj *Builtin) Pos() token.Pos</source>
          <target state="translated">func (obj *Builtin)Pos()token.Pos</target>
        </trans-unit>
        <trans-unit id="9af3218476f3efa1ea467cb09d87ee0108cfe881" translate="yes" xml:space="preserve">
          <source>func (obj *Builtin) String() string</source>
          <target state="translated">func (obj *Builtin)String()string</target>
        </trans-unit>
        <trans-unit id="88c7e7ee39912a35331d70ad3796729d99719142" translate="yes" xml:space="preserve">
          <source>func (obj *Builtin) Type() Type</source>
          <target state="translated">func (obj *Builtin)Type()Type</target>
        </trans-unit>
        <trans-unit id="6343db581bfbaeb59836a408015a81a5f073718f" translate="yes" xml:space="preserve">
          <source>func (obj *Const) Exported() bool</source>
          <target state="translated">func (obj *Const)Exported()bool</target>
        </trans-unit>
        <trans-unit id="acb857880a1fe41498be28593e111fde2002587e" translate="yes" xml:space="preserve">
          <source>func (obj *Const) Id() string</source>
          <target state="translated">func (obj *Const)Id()string</target>
        </trans-unit>
        <trans-unit id="a81a5c560b96300d38d4e24b7fa74f7cb9b4a428" translate="yes" xml:space="preserve">
          <source>func (obj *Const) Name() string</source>
          <target state="translated">func (obj *Const)Name()string</target>
        </trans-unit>
        <trans-unit id="9c57b6c600cbd88f6ee02c9777d5fe7cd99e03e3" translate="yes" xml:space="preserve">
          <source>func (obj *Const) Parent() *Scope</source>
          <target state="translated">func (obj *Const)Parent()*Scope</target>
        </trans-unit>
        <trans-unit id="db17805b92c824c754af89a4f2a478f9ff36ec79" translate="yes" xml:space="preserve">
          <source>func (obj *Const) Pkg() *Package</source>
          <target state="translated">func (obj *Const)Pkg()*Paquete</target>
        </trans-unit>
        <trans-unit id="b4217cc814cf2e22b8fc0ef41b853a7fb7dda215" translate="yes" xml:space="preserve">
          <source>func (obj *Const) Pos() token.Pos</source>
          <target state="translated">func (obj *Const)Pos()token.Pos</target>
        </trans-unit>
        <trans-unit id="c5ed38dd9674b3c9ab8ef49ee8a3da1ae49c9553" translate="yes" xml:space="preserve">
          <source>func (obj *Const) String() string</source>
          <target state="translated">func (obj *Const)String()string</target>
        </trans-unit>
        <trans-unit id="b200e3f40ee71a0eea95c35a13f41a44bb6a9c60" translate="yes" xml:space="preserve">
          <source>func (obj *Const) Type() Type</source>
          <target state="translated">func (obj *Const)Type()Type</target>
        </trans-unit>
        <trans-unit id="82ee4831779dab67c71e28f1e8c45b01608e4042" translate="yes" xml:space="preserve">
          <source>func (obj *Const) Val() constant.Value</source>
          <target state="translated">func (obj *Const)Val()constante.Valor</target>
        </trans-unit>
        <trans-unit id="e2cb452a71dd5d566287ad8a9a34467ba122982a" translate="yes" xml:space="preserve">
          <source>func (obj *Func) Exported() bool</source>
          <target state="translated">func (obj *Func)Exported()bool</target>
        </trans-unit>
        <trans-unit id="2d2aeacb95e4b099783f371f7a9c5607b3dc19b3" translate="yes" xml:space="preserve">
          <source>func (obj *Func) FullName() string</source>
          <target state="translated">func (obj *Func)FullName()string</target>
        </trans-unit>
        <trans-unit id="fbf2b5ed95bc17e13ae3cd37f11bc27172a19909" translate="yes" xml:space="preserve">
          <source>func (obj *Func) Id() string</source>
          <target state="translated">func (obj *Func)Id()string</target>
        </trans-unit>
        <trans-unit id="0d4d6982af8a8817669c226eb2451fae137c1b61" translate="yes" xml:space="preserve">
          <source>func (obj *Func) Name() string</source>
          <target state="translated">func (obj *Func)Name()string</target>
        </trans-unit>
        <trans-unit id="50248bb1968ff875605e66a9432c71e2b350cbbd" translate="yes" xml:space="preserve">
          <source>func (obj *Func) Parent() *Scope</source>
          <target state="translated">func (obj *Func)Parent()*Scope</target>
        </trans-unit>
        <trans-unit id="13da58443a9f7af59eaab4981288447d3c1414a8" translate="yes" xml:space="preserve">
          <source>func (obj *Func) Pkg() *Package</source>
          <target state="translated">func (obj *Func)Pkg()*Package</target>
        </trans-unit>
        <trans-unit id="0e7b5a5a5add053660bd0f8abb701c150eff941d" translate="yes" xml:space="preserve">
          <source>func (obj *Func) Pos() token.Pos</source>
          <target state="translated">func (obj *Func)Pos()token.Pos</target>
        </trans-unit>
        <trans-unit id="1de5e896f40a49f99351b9235c53e16d7335e652" translate="yes" xml:space="preserve">
          <source>func (obj *Func) Scope() *Scope</source>
          <target state="translated">func (obj *Func)Scope()*Scope</target>
        </trans-unit>
        <trans-unit id="125276332d2ffabcc4b8f85b334a98efe833853c" translate="yes" xml:space="preserve">
          <source>func (obj *Func) String() string</source>
          <target state="translated">func (obj *Func)String()string</target>
        </trans-unit>
        <trans-unit id="bbccfdd03169759200ad41258eafb5c2deba7de2" translate="yes" xml:space="preserve">
          <source>func (obj *Func) Type() Type</source>
          <target state="translated">func (obj *Func)Type()Type</target>
        </trans-unit>
        <trans-unit id="8770cdcd739943a19edd0d3eebbbd9279c5f8756" translate="yes" xml:space="preserve">
          <source>func (obj *Label) Exported() bool</source>
          <target state="translated">func (obj *Label)Exported()bool</target>
        </trans-unit>
        <trans-unit id="11f1824c958b92abc6567ca91cfb0d56a2517f16" translate="yes" xml:space="preserve">
          <source>func (obj *Label) Id() string</source>
          <target state="translated">func (obj *Label)Id()string</target>
        </trans-unit>
        <trans-unit id="58afeecb18eaff3bc72c41ec998b80a1c4a849a1" translate="yes" xml:space="preserve">
          <source>func (obj *Label) Name() string</source>
          <target state="translated">func (obj *Label)Name()string</target>
        </trans-unit>
        <trans-unit id="cad7d4b1802f7b26394dca975e51910a4250a1eb" translate="yes" xml:space="preserve">
          <source>func (obj *Label) Parent() *Scope</source>
          <target state="translated">func (obj *Label)Parent()*Scope</target>
        </trans-unit>
        <trans-unit id="a63ec4b925fe747e7a948fb17bd74c72c2c438e8" translate="yes" xml:space="preserve">
          <source>func (obj *Label) Pkg() *Package</source>
          <target state="translated">func (obj *Etiqueta)Pkg()*Paquete</target>
        </trans-unit>
        <trans-unit id="bc6d58376365d722fa405c7678c7b3a5cdde7f8d" translate="yes" xml:space="preserve">
          <source>func (obj *Label) Pos() token.Pos</source>
          <target state="translated">func (obj *Label)Pos()token.Pos</target>
        </trans-unit>
        <trans-unit id="872d63e950934fce040fa55ee1b53fcc22c6bbfd" translate="yes" xml:space="preserve">
          <source>func (obj *Label) String() string</source>
          <target state="translated">func(obj *Label)String()string</target>
        </trans-unit>
        <trans-unit id="54dfd89ab70265ebe3465c38fbf47de10d45834e" translate="yes" xml:space="preserve">
          <source>func (obj *Label) Type() Type</source>
          <target state="translated">func (obj *Label)Type()Type</target>
        </trans-unit>
        <trans-unit id="19b4e963041dab680e9c1d62f9332f8cab96ec67" translate="yes" xml:space="preserve">
          <source>func (obj *Nil) Exported() bool</source>
          <target state="translated">func (obj *Nil)Exported()bool</target>
        </trans-unit>
        <trans-unit id="c23fef21473d7daa7fed9775ff7a2b232889876f" translate="yes" xml:space="preserve">
          <source>func (obj *Nil) Id() string</source>
          <target state="translated">func (obj *Nil)Id()string</target>
        </trans-unit>
        <trans-unit id="03e1c1707ecdddd3f57394787b8b6a0deb29a42a" translate="yes" xml:space="preserve">
          <source>func (obj *Nil) Name() string</source>
          <target state="translated">func (obj *Nil)Name()string</target>
        </trans-unit>
        <trans-unit id="bd1e9e2205dfd3aaddc5823a493bee878a22a656" translate="yes" xml:space="preserve">
          <source>func (obj *Nil) Parent() *Scope</source>
          <target state="translated">func (obj *Nil)Parent()*Scope</target>
        </trans-unit>
        <trans-unit id="c702c0ad74447b8296ca481491dbed04b26c012d" translate="yes" xml:space="preserve">
          <source>func (obj *Nil) Pkg() *Package</source>
          <target state="translated">func (obj *Nil)Pkg()*Paquete</target>
        </trans-unit>
        <trans-unit id="b90aedd58a232c628dd34689d3e9ffbbcb9e74ea" translate="yes" xml:space="preserve">
          <source>func (obj *Nil) Pos() token.Pos</source>
          <target state="translated">func (obj *Nil)Pos()token.Pos</target>
        </trans-unit>
        <trans-unit id="438a9d12f8aec24b8bc17bff3c24e29e152e00bd" translate="yes" xml:space="preserve">
          <source>func (obj *Nil) String() string</source>
          <target state="translated">func (obj *Nil)String()string</target>
        </trans-unit>
        <trans-unit id="773cdc1b766c0127063936abd89567cc5748d0f0" translate="yes" xml:space="preserve">
          <source>func (obj *Nil) Type() Type</source>
          <target state="translated">func (obj *Nil)Type()Type</target>
        </trans-unit>
        <trans-unit id="54bc01296e54130fdf4f706ee819b3dce06a222e" translate="yes" xml:space="preserve">
          <source>func (obj *Object) Pos() token.Pos</source>
          <target state="translated">func (obj *Objeto)Pos()token.Pos</target>
        </trans-unit>
        <trans-unit id="fb9cd67a97711ad14159b8e3e4713d463f291ea9" translate="yes" xml:space="preserve">
          <source>func (obj *PkgName) Exported() bool</source>
          <target state="translated">func (obj *PkgName)Exported()bool</target>
        </trans-unit>
        <trans-unit id="3ca96ea06217e4574fb275f4f1fd193a1aceb800" translate="yes" xml:space="preserve">
          <source>func (obj *PkgName) Id() string</source>
          <target state="translated">func (obj *PkgName)Id()string</target>
        </trans-unit>
        <trans-unit id="460127ee60280eee79024ece1c0cfb7304e49f34" translate="yes" xml:space="preserve">
          <source>func (obj *PkgName) Imported() *Package</source>
          <target state="translated">func (obj *PkgName)Imported()*Package</target>
        </trans-unit>
        <trans-unit id="81f3f65a038213f8a3787e5a04829ae274453c58" translate="yes" xml:space="preserve">
          <source>func (obj *PkgName) Name() string</source>
          <target state="translated">func (obj *PkgName)Name()string</target>
        </trans-unit>
        <trans-unit id="0bba26e6fb030749fc7ab9cd78c63fb8dd12d17f" translate="yes" xml:space="preserve">
          <source>func (obj *PkgName) Parent() *Scope</source>
          <target state="translated">func (obj *PkgName)Parent()*Scope</target>
        </trans-unit>
        <trans-unit id="45c2df52ee80d4b0a251ff09040831f7ca3e5702" translate="yes" xml:space="preserve">
          <source>func (obj *PkgName) Pkg() *Package</source>
          <target state="translated">func (obj *NombrePkg)Pkg()*Paquete</target>
        </trans-unit>
        <trans-unit id="5fc5683e48fdfe180451b5fe85caf9ceb688f531" translate="yes" xml:space="preserve">
          <source>func (obj *PkgName) Pos() token.Pos</source>
          <target state="translated">func(obj *PkgName)Pos()token.Pos</target>
        </trans-unit>
        <trans-unit id="d139cf6d0f1832e4bd52796501647d24d0c7b4d1" translate="yes" xml:space="preserve">
          <source>func (obj *PkgName) String() string</source>
          <target state="translated">func(obj *PkgName)String()string</target>
        </trans-unit>
        <trans-unit id="1045c17c44bd8279a92261b45c0dd9aba1f5f678" translate="yes" xml:space="preserve">
          <source>func (obj *PkgName) Type() Type</source>
          <target state="translated">func (obj *PkgName)Type()Type</target>
        </trans-unit>
        <trans-unit id="b6edb9b8790007cbee01018178271c41a005863e" translate="yes" xml:space="preserve">
          <source>func (obj *TypeName) Exported() bool</source>
          <target state="translated">func (obj *NombreTipo)Exported()bool</target>
        </trans-unit>
        <trans-unit id="6462507cb05cdf91cfb2b4e4458a08833c298ed2" translate="yes" xml:space="preserve">
          <source>func (obj *TypeName) Id() string</source>
          <target state="translated">func (obj *TypeName)Id()string</target>
        </trans-unit>
        <trans-unit id="8d49dd129989a5b16c8958021c590c51b3bf6ec0" translate="yes" xml:space="preserve">
          <source>func (obj *TypeName) IsAlias() bool</source>
          <target state="translated">func (obj *NombreTipo)IsAlias()bool</target>
        </trans-unit>
        <trans-unit id="63d17c9f9ae9680c68e64925d40f4d32ea49f799" translate="yes" xml:space="preserve">
          <source>func (obj *TypeName) Name() string</source>
          <target state="translated">func (obj *TypeName)Name()string</target>
        </trans-unit>
        <trans-unit id="d6f9026341d28e27e65491892e442a4d4fee4654" translate="yes" xml:space="preserve">
          <source>func (obj *TypeName) Parent() *Scope</source>
          <target state="translated">func (obj *NombreTipo)Parent()*Scope</target>
        </trans-unit>
        <trans-unit id="38f4456bf5c2ca4b156119df7dd3257dd5728e6e" translate="yes" xml:space="preserve">
          <source>func (obj *TypeName) Pkg() *Package</source>
          <target state="translated">func (obj *NombreTipo)Pkg()*Paquete</target>
        </trans-unit>
        <trans-unit id="2ce1313a2c1f249e59beb285ee3a88db7487c91a" translate="yes" xml:space="preserve">
          <source>func (obj *TypeName) Pos() token.Pos</source>
          <target state="translated">func (obj *NombreTipo)Pos()token.Pos</target>
        </trans-unit>
        <trans-unit id="3bfe350747bf6cc12e74a08ce8eb05f223ba89c9" translate="yes" xml:space="preserve">
          <source>func (obj *TypeName) String() string</source>
          <target state="translated">func(obj *NombreTipo)String()string</target>
        </trans-unit>
        <trans-unit id="338ac2e1e9934f2fc90b51874d8c82e3750a91f1" translate="yes" xml:space="preserve">
          <source>func (obj *TypeName) Type() Type</source>
          <target state="translated">func (obj *NombreTipo)Tipo()Tipo</target>
        </trans-unit>
        <trans-unit id="afcc67fe9fe9504f236943442d95d6eb9458b123" translate="yes" xml:space="preserve">
          <source>func (obj *Var) Anonymous() bool</source>
          <target state="translated">func (obj *Var)Anonymous()bool</target>
        </trans-unit>
        <trans-unit id="faa274dada7019fa74e92564d8a2e2fdb8e80913" translate="yes" xml:space="preserve">
          <source>func (obj *Var) Embedded() bool</source>
          <target state="translated">func (obj *Var)Embedded()bool</target>
        </trans-unit>
        <trans-unit id="edfe438748d3e5bf4946f80a31d0ae6c4e2cdadd" translate="yes" xml:space="preserve">
          <source>func (obj *Var) Exported() bool</source>
          <target state="translated">func (obj *Var)Exported()bool</target>
        </trans-unit>
        <trans-unit id="e589aca5a6e0d9b10b6db95d4826477591de6a77" translate="yes" xml:space="preserve">
          <source>func (obj *Var) Id() string</source>
          <target state="translated">func(obj *Var)Id()string</target>
        </trans-unit>
        <trans-unit id="61821029d6fab9874eb81a85eeaaa9cdc561d809" translate="yes" xml:space="preserve">
          <source>func (obj *Var) IsField() bool</source>
          <target state="translated">func (obj *Var)IsField()bool</target>
        </trans-unit>
        <trans-unit id="af5d6b62e2fc17227fb948edd893afed053ead3e" translate="yes" xml:space="preserve">
          <source>func (obj *Var) Name() string</source>
          <target state="translated">func (obj *Var)Name()string</target>
        </trans-unit>
        <trans-unit id="14c5555208ce3aaedf30a48ce89e003112767f13" translate="yes" xml:space="preserve">
          <source>func (obj *Var) Parent() *Scope</source>
          <target state="translated">func(obj *Var)Parent()*Scope</target>
        </trans-unit>
        <trans-unit id="92968544da13e40737b58a0d19fb9412808b60ec" translate="yes" xml:space="preserve">
          <source>func (obj *Var) Pkg() *Package</source>
          <target state="translated">func (obj *Var)Pkg()*Paquete</target>
        </trans-unit>
        <trans-unit id="dd2c4314e5f1844212f3c28013ef9e35b9c6b10a" translate="yes" xml:space="preserve">
          <source>func (obj *Var) Pos() token.Pos</source>
          <target state="translated">func(obj *Var)Pos()token.Pos</target>
        </trans-unit>
        <trans-unit id="7b1b32b19961cae28c02974d99dd41def33c81f8" translate="yes" xml:space="preserve">
          <source>func (obj *Var) String() string</source>
          <target state="translated">func(obj *Var)String()string</target>
        </trans-unit>
        <trans-unit id="c15de238948de70c6feddb0a99948a193c0c6684" translate="yes" xml:space="preserve">
          <source>func (obj *Var) Type() Type</source>
          <target state="translated">func (obj *Var)Tipo()Tipo</target>
        </trans-unit>
        <trans-unit id="480b3b4256dfbfa5ddbe5d6619f3046aea42d64b" translate="yes" xml:space="preserve">
          <source>func (oi ObjectIdentifier) Equal(other ObjectIdentifier) bool</source>
          <target state="translated">func (oi ObjectIdentifier)Equal(other ObjectIdentifier)bool</target>
        </trans-unit>
        <trans-unit id="a4e30a1054031de2c324393b177df5722df022e1" translate="yes" xml:space="preserve">
          <source>func (oi ObjectIdentifier) String() string</source>
          <target state="translated">func (oi ObjectIdentifier)String()string</target>
        </trans-unit>
        <trans-unit id="14e614ddfdd30e7d0001b3f463d12cdfd43fcee8" translate="yes" xml:space="preserve">
          <source>func (op Op) Draw(dst Image, r image.Rectangle, src image.Image, sp image.Point)</source>
          <target state="translated">func (op Op)Draw(dst Imagen,r imagen.Rectángulo,src imagen.Imagen,sp imagen.Punto)</target>
        </trans-unit>
        <trans-unit id="cf5336c5a8069e2e6123367348ef7b48ce0557c8" translate="yes" xml:space="preserve">
          <source>func (op Token) Precedence() int</source>
          <target state="translated">func (on Token)Precedence()int</target>
        </trans-unit>
        <trans-unit id="84416e23e8f2c01f407d7ba913d2dc0995f5f867" translate="yes" xml:space="preserve">
          <source>func (opts *PSSOptions) HashFunc() crypto.Hash</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="72cd3d5deef6451e2ad788b022a989a2d1bbc835" translate="yes" xml:space="preserve">
          <source>func (p *AddressParser) Parse(address string) (*Address, error)</source>
          <target state="translated">func (p *AddressParser)Parse(address string)(*Address,error)</target>
        </trans-unit>
        <trans-unit id="ed8aed582b4cf73ca47007f7b6d90fa47ce26506" translate="yes" xml:space="preserve">
          <source>func (p *AddressParser) ParseList(list string) ([]*Address, error)</source>
          <target state="translated">func (p *AddressParser)ParseList(list string)([]*Address,error)</target>
        </trans-unit>
        <trans-unit id="829a43ee12248b1cbd5602d1f940bb415fe5bf51" translate="yes" xml:space="preserve">
          <source>func (p *Alpha) AlphaAt(x, y int) color.Alpha</source>
          <target state="translated">func (p *Alpha)AlphaAt(x,y int)color.Alpha</target>
        </trans-unit>
        <trans-unit id="59966c4c8b6c3d751287f026b99a7afc7d7d88e4" translate="yes" xml:space="preserve">
          <source>func (p *Alpha) At(x, y int) color.Color</source>
          <target state="translated">func (p *Alfa)At(x,y int)color.Color</target>
        </trans-unit>
        <trans-unit id="5ccba0b336f1bc82703b4555d6d745770b862b34" translate="yes" xml:space="preserve">
          <source>func (p *Alpha) Bounds() Rectangle</source>
          <target state="translated">func (p *Alfa)Límites()Rectángulo</target>
        </trans-unit>
        <trans-unit id="17657dd6b5085a7873e73e8838aecd6eda5a5651" translate="yes" xml:space="preserve">
          <source>func (p *Alpha) ColorModel() color.Model</source>
          <target state="translated">func (p *Alfa)ColorModel()color.Model</target>
        </trans-unit>
        <trans-unit id="43fcf4d1d588bf1d4709f75302af1ae0946d4e54" translate="yes" xml:space="preserve">
          <source>func (p *Alpha) Opaque() bool</source>
          <target state="translated">func (p *Alpha)Opaque()bool</target>
        </trans-unit>
        <trans-unit id="b9ded9e1733e47890c629d128df850df9cbcaa09" translate="yes" xml:space="preserve">
          <source>func (p *Alpha) PixOffset(x, y int) int</source>
          <target state="translated">func (p *Alpha)PixOffset(x,y int)int</target>
        </trans-unit>
        <trans-unit id="01499ccb3772519d3babde2d700fc3855037644c" translate="yes" xml:space="preserve">
          <source>func (p *Alpha) Set(x, y int, c color.Color)</source>
          <target state="translated">func (p *Alfa)Set(x,y int,c color.Color)</target>
        </trans-unit>
        <trans-unit id="9f0527649af37dbf20dbffb2277521d5d92d1191" translate="yes" xml:space="preserve">
          <source>func (p *Alpha) SetAlpha(x, y int, c color.Alpha)</source>
          <target state="translated">func (p *Alpha)SetAlpha(x,y int,c color.Alpha)</target>
        </trans-unit>
        <trans-unit id="99d301b4f3fbc0f86e6ea669c084d0c7be721c60" translate="yes" xml:space="preserve">
          <source>func (p *Alpha) SubImage(r Rectangle) Image</source>
          <target state="translated">func (p *Alfa)SubImage(r Rectángulo)Imagen</target>
        </trans-unit>
        <trans-unit id="214eef54654271a662a52f4cd5011978592f654a" translate="yes" xml:space="preserve">
          <source>func (p *Alpha16) Alpha16At(x, y int) color.Alpha16</source>
          <target state="translated">func (p *Alpha16)Alpha16At(x,y int)color.Alpha16</target>
        </trans-unit>
        <trans-unit id="cf56a038a054c183d630da3a997bcb42a8084eb8" translate="yes" xml:space="preserve">
          <source>func (p *Alpha16) At(x, y int) color.Color</source>
          <target state="translated">func (p *Alfa16)At(x,y int)color.Color</target>
        </trans-unit>
        <trans-unit id="836e4a2b9568d67fff2ea5f2e87ac40f3a991406" translate="yes" xml:space="preserve">
          <source>func (p *Alpha16) Bounds() Rectangle</source>
          <target state="translated">func (p *Alfa16)Límites()Rectángulo</target>
        </trans-unit>
        <trans-unit id="0a06e036f5c6df662d0fd14938399656d7a5ac9c" translate="yes" xml:space="preserve">
          <source>func (p *Alpha16) ColorModel() color.Model</source>
          <target state="translated">func (p *Alfa16)ColorModel()color.Model</target>
        </trans-unit>
        <trans-unit id="d054708dc2179da0223b6e0390af809d3ab1c9ad" translate="yes" xml:space="preserve">
          <source>func (p *Alpha16) Opaque() bool</source>
          <target state="translated">func (p *Alfa16)Opaque()bool</target>
        </trans-unit>
        <trans-unit id="4865353ef433e13475fa061552975f546c1137b1" translate="yes" xml:space="preserve">
          <source>func (p *Alpha16) PixOffset(x, y int) int</source>
          <target state="translated">func (p *Alpha16)PixOffset(x,y int)int</target>
        </trans-unit>
        <trans-unit id="fab24f91a97944dc335fcd6b6427ec362d1c252f" translate="yes" xml:space="preserve">
          <source>func (p *Alpha16) Set(x, y int, c color.Color)</source>
          <target state="translated">func (p *Alfa16)Set(x,y int,c color.Color)</target>
        </trans-unit>
        <trans-unit id="43ad05f9e64dd327849c6379e62580a1e19672bb" translate="yes" xml:space="preserve">
          <source>func (p *Alpha16) SetAlpha16(x, y int, c color.Alpha16)</source>
          <target state="translated">func (p *Alpha16)SetAlpha16(x,y int,c color.Alpha16)</target>
        </trans-unit>
        <trans-unit id="ddbfd2c42112a661926cea9205c489e6590c7359" translate="yes" xml:space="preserve">
          <source>func (p *Alpha16) SubImage(r Rectangle) Image</source>
          <target state="translated">func (p *Alfa16)SubImage(r Rectángulo)Imagen</target>
        </trans-unit>
        <trans-unit id="689f8bd8578b2171cb29c82571af64a45743634c" translate="yes" xml:space="preserve">
          <source>func (p *CMYK) At(x, y int) color.Color</source>
          <target state="translated">func (p *CMYK)At(x,y int)color.Color</target>
        </trans-unit>
        <trans-unit id="dc5ca91726c775eeb3394cd51f111c5081f712f0" translate="yes" xml:space="preserve">
          <source>func (p *CMYK) Bounds() Rectangle</source>
          <target state="translated">func (p *CMYK)Bounds()Rectángulo</target>
        </trans-unit>
        <trans-unit id="daaf732f0e2c094508fc46fb67ffd727ffe824b5" translate="yes" xml:space="preserve">
          <source>func (p *CMYK) CMYKAt(x, y int) color.CMYK</source>
          <target state="translated">func (p *CMYK)CMYKAt(x,y int)color.CMYK</target>
        </trans-unit>
        <trans-unit id="dc6fa6ad7e2129280a36b776ce7495b922f54b26" translate="yes" xml:space="preserve">
          <source>func (p *CMYK) ColorModel() color.Model</source>
          <target state="translated">func (p *CMYK)ColorModel()color.Model</target>
        </trans-unit>
        <trans-unit id="2c017112a8f8e5c9590d082803e20a0870534a40" translate="yes" xml:space="preserve">
          <source>func (p *CMYK) Opaque() bool</source>
          <target state="translated">func (p *CMYK)Opaque()bool</target>
        </trans-unit>
        <trans-unit id="751a5671d0418e10daba0e7d7bbb5fa3705017b5" translate="yes" xml:space="preserve">
          <source>func (p *CMYK) PixOffset(x, y int) int</source>
          <target state="translated">func (p *CMYK)PixOffset(x,y int)int</target>
        </trans-unit>
        <trans-unit id="83b8643b923f2c00f24e73309f288fabbc1d5701" translate="yes" xml:space="preserve">
          <source>func (p *CMYK) Set(x, y int, c color.Color)</source>
          <target state="translated">func (p *CMYK)Set(x,y int,c color.Color)</target>
        </trans-unit>
        <trans-unit id="21d41067c777c0b413b0f2ac8acc52c28cd900a0" translate="yes" xml:space="preserve">
          <source>func (p *CMYK) SetCMYK(x, y int, c color.CMYK)</source>
          <target state="translated">func (p *CMYK)SetCMYK(x,y int,c color.CMYK)</target>
        </trans-unit>
        <trans-unit id="a271fe09621a74abb2a0130b58814d3bd4a9979d" translate="yes" xml:space="preserve">
          <source>func (p *CMYK) SubImage(r Rectangle) Image</source>
          <target state="translated">func (p *CMYK)SubImage(r Rectángulo)Imagen</target>
        </trans-unit>
        <trans-unit id="45e55c8918e3db8cf40b656f0382eef17ed59394" translate="yes" xml:space="preserve">
          <source>func (p *ErrorList) Add(pos token.Position, msg string)</source>
          <target state="translated">func (p *ErrorList)Add(pos token.Position,msg string)</target>
        </trans-unit>
        <trans-unit id="59c4031ef244fec2453a91410635782f2aeefb4e" translate="yes" xml:space="preserve">
          <source>func (p *ErrorList) RemoveMultiples()</source>
          <target state="translated">func (p *ErrorList)RemoveMultiples()</target>
        </trans-unit>
        <trans-unit id="872eb1a8b3074178f34cec3c7827f1ed91dc5553" translate="yes" xml:space="preserve">
          <source>func (p *ErrorList) Reset()</source>
          <target state="translated">func (p *ErrorList)Reset()</target>
        </trans-unit>
        <trans-unit id="e17575af7544d667e5974fd79e7cf2fda102b3f0" translate="yes" xml:space="preserve">
          <source>func (p *Gray) At(x, y int) color.Color</source>
          <target state="translated">func (p *Gray)At(x,y int)color.Color</target>
        </trans-unit>
        <trans-unit id="45be0778beabec23bcf1ac7bf0705b587101af71" translate="yes" xml:space="preserve">
          <source>func (p *Gray) Bounds() Rectangle</source>
          <target state="translated">func (p *Gray)Bounds()Rectángulo</target>
        </trans-unit>
        <trans-unit id="f221d03ba48de3482321e3d730712c95aa266bcf" translate="yes" xml:space="preserve">
          <source>func (p *Gray) ColorModel() color.Model</source>
          <target state="translated">func (p *Gris)ColorModelo()color.Modelo</target>
        </trans-unit>
        <trans-unit id="2560ba8b0c706abaf293696243ff4caa3c87ae08" translate="yes" xml:space="preserve">
          <source>func (p *Gray) GrayAt(x, y int) color.Gray</source>
          <target state="translated">func (p *Gray)GrayAt(x,y int)color.Gray</target>
        </trans-unit>
        <trans-unit id="b36e79a23dfef5464cbc835b353098461dc20e3c" translate="yes" xml:space="preserve">
          <source>func (p *Gray) Opaque() bool</source>
          <target state="translated">func (p *Gray)Opaque()bool</target>
        </trans-unit>
        <trans-unit id="039d301cea2e53756b104eada1a5eacfad08c8e2" translate="yes" xml:space="preserve">
          <source>func (p *Gray) PixOffset(x, y int) int</source>
          <target state="translated">func (p *Gray)PixOffset(x,y int)int</target>
        </trans-unit>
        <trans-unit id="31493cde017b2af74e67f980c7ee4345b5363162" translate="yes" xml:space="preserve">
          <source>func (p *Gray) Set(x, y int, c color.Color)</source>
          <target state="translated">func (p *Gray)Set(x,y int,c color.Color)</target>
        </trans-unit>
        <trans-unit id="7ceb0c663f4112d945aaf3aaa21266a087c72a92" translate="yes" xml:space="preserve">
          <source>func (p *Gray) SetGray(x, y int, c color.Gray)</source>
          <target state="translated">func (p *Gray)SetGray(x,y int,c color.Gray)</target>
        </trans-unit>
        <trans-unit id="5896c4eb26bfd159ed3685d970fa50a922fd4f7c" translate="yes" xml:space="preserve">
          <source>func (p *Gray) SubImage(r Rectangle) Image</source>
          <target state="translated">func (p *Gris)SubImage(r Rectángulo)Imagen</target>
        </trans-unit>
        <trans-unit id="d84b13d881405c8e8029040ea6147fc076bdcaf5" translate="yes" xml:space="preserve">
          <source>func (p *Gray16) At(x, y int) color.Color</source>
          <target state="translated">func (p *Gray16)At(x,y int)color.Color</target>
        </trans-unit>
        <trans-unit id="6445df53337bebc3f92a221cb1efa61f33532b1b" translate="yes" xml:space="preserve">
          <source>func (p *Gray16) Bounds() Rectangle</source>
          <target state="translated">func (p *Gray16)Bounds()Rectángulo</target>
        </trans-unit>
        <trans-unit id="fd4e720e7c58e5577b392ddc9a22a710f18a4d4e" translate="yes" xml:space="preserve">
          <source>func (p *Gray16) ColorModel() color.Model</source>
          <target state="translated">func (p *Gray16)ColorModel()color.Model</target>
        </trans-unit>
        <trans-unit id="98ff35034ec43d42ff157d9ee37fa919a8cc648e" translate="yes" xml:space="preserve">
          <source>func (p *Gray16) Gray16At(x, y int) color.Gray16</source>
          <target state="translated">func (p *Gray16)Gray16At(x,y int)color.Gray16</target>
        </trans-unit>
        <trans-unit id="580b7e94666e72d3d194c2cb4fe5b9459b9a8d37" translate="yes" xml:space="preserve">
          <source>func (p *Gray16) Opaque() bool</source>
          <target state="translated">func (p *Gray16)Opaque()bool</target>
        </trans-unit>
        <trans-unit id="5da6b94d53e8fd5cd43d28ea90bd5cc6d82622d3" translate="yes" xml:space="preserve">
          <source>func (p *Gray16) PixOffset(x, y int) int</source>
          <target state="translated">func (p *Gray16)PixOffset(x,y int)int</target>
        </trans-unit>
        <trans-unit id="52c5290087b0864189ec0afac8081fbc05806e67" translate="yes" xml:space="preserve">
          <source>func (p *Gray16) Set(x, y int, c color.Color)</source>
          <target state="translated">func (p *Gray16)Set(x,y int,c color.Color)</target>
        </trans-unit>
        <trans-unit id="9e57094cb7a412c4ec375f49986ba62c67721abd" translate="yes" xml:space="preserve">
          <source>func (p *Gray16) SetGray16(x, y int, c color.Gray16)</source>
          <target state="translated">func (p *Gray16)SetGray16(x,y int,c color.Gray16)</target>
        </trans-unit>
        <trans-unit id="cadf7b09423121cfea6e20c3f5becee933c7c576" translate="yes" xml:space="preserve">
          <source>func (p *Gray16) SubImage(r Rectangle) Image</source>
          <target state="translated">func (p *Gray16)SubImage(r Rectángulo)Imagen</target>
        </trans-unit>
        <trans-unit id="d653b13b55a817acc1cb305d579c0cdf936fb748" translate="yes" xml:space="preserve">
          <source>func (p *NRGBA) At(x, y int) color.Color</source>
          <target state="translated">func (p *NRGBA)At(x,y int)color.Color</target>
        </trans-unit>
        <trans-unit id="398a25e23a021569671851e6eddcb378298dae7a" translate="yes" xml:space="preserve">
          <source>func (p *NRGBA) Bounds() Rectangle</source>
          <target state="translated">func (p *NRGBA)Bounds()Rectángulo</target>
        </trans-unit>
        <trans-unit id="529764c727e31c5d52c41260fd4e54c7ffe93b35" translate="yes" xml:space="preserve">
          <source>func (p *NRGBA) ColorModel() color.Model</source>
          <target state="translated">func (p *NRGBA)ColorModel()color.Model</target>
        </trans-unit>
        <trans-unit id="f5e94dc82cd13b2d7b33909a115240005689c6b8" translate="yes" xml:space="preserve">
          <source>func (p *NRGBA) NRGBAAt(x, y int) color.NRGBA</source>
          <target state="translated">func (p *NRGBA)NRGBAAt(x,y int)color.NRGBA</target>
        </trans-unit>
        <trans-unit id="4ab3309ec8477acf2152f0462ea5c2ecc5f6ec42" translate="yes" xml:space="preserve">
          <source>func (p *NRGBA) Opaque() bool</source>
          <target state="translated">func (p *NRGBA)Opaque()bool</target>
        </trans-unit>
        <trans-unit id="20575b072270cbd8af2bf2ecb6bc7c138e1373fa" translate="yes" xml:space="preserve">
          <source>func (p *NRGBA) PixOffset(x, y int) int</source>
          <target state="translated">func (p *NRGBA)PixOffset(x,y int)int</target>
        </trans-unit>
        <trans-unit id="494bca8c0df971e20d281d5284c0e9421c8bfad1" translate="yes" xml:space="preserve">
          <source>func (p *NRGBA) Set(x, y int, c color.Color)</source>
          <target state="translated">func (p *NRGBA)Set(x,y int,c color.Color)</target>
        </trans-unit>
        <trans-unit id="76529c1c75cc015f776b54b0568211c31dbeaf5c" translate="yes" xml:space="preserve">
          <source>func (p *NRGBA) SetNRGBA(x, y int, c color.NRGBA)</source>
          <target state="translated">func (p *NRGBA)SetNRGBA(x,y int,c color.NRGBA)</target>
        </trans-unit>
        <trans-unit id="361b17c9b22c2e4c494ad1262f3529ee299f87dd" translate="yes" xml:space="preserve">
          <source>func (p *NRGBA) SubImage(r Rectangle) Image</source>
          <target state="translated">func (p *NRGBA)SubImage(r Rectángulo)Imagen</target>
        </trans-unit>
        <trans-unit id="da3300cb9750873f5bc31cff5b7602d5a41f5baf" translate="yes" xml:space="preserve">
          <source>func (p *NRGBA64) At(x, y int) color.Color</source>
          <target state="translated">func (p *NRGBA64)At(x,y int)color.Color</target>
        </trans-unit>
        <trans-unit id="d590e3a3342acff511f7f2a81347954678dfcb86" translate="yes" xml:space="preserve">
          <source>func (p *NRGBA64) Bounds() Rectangle</source>
          <target state="translated">func (p *NRGBA64)Bounds()Rectángulo</target>
        </trans-unit>
        <trans-unit id="c13a2280ed6f9f2892f80c7bc4ee251cf4508f5b" translate="yes" xml:space="preserve">
          <source>func (p *NRGBA64) ColorModel() color.Model</source>
          <target state="translated">func (p *NRGBA64)ColorModel()color.Model</target>
        </trans-unit>
        <trans-unit id="8d7501d5f8d79259bf681a13c6801654ae564e1a" translate="yes" xml:space="preserve">
          <source>func (p *NRGBA64) NRGBA64At(x, y int) color.NRGBA64</source>
          <target state="translated">func (p *NRGBA64)NRGBA64At(x,y int)color.NRGBA64</target>
        </trans-unit>
        <trans-unit id="7df6f8e9f1cc008bbfd326a6225ae84f8413f24b" translate="yes" xml:space="preserve">
          <source>func (p *NRGBA64) Opaque() bool</source>
          <target state="translated">func (p *NRGBA64)Opaque()bool</target>
        </trans-unit>
        <trans-unit id="00a72e430d081c12307abff42af9ed2541c75b59" translate="yes" xml:space="preserve">
          <source>func (p *NRGBA64) PixOffset(x, y int) int</source>
          <target state="translated">func (p *NRGBA64)PixOffset(x,y int)int</target>
        </trans-unit>
        <trans-unit id="f40aaf3e9996dadea230cf70622ed6c34521d0cb" translate="yes" xml:space="preserve">
          <source>func (p *NRGBA64) Set(x, y int, c color.Color)</source>
          <target state="translated">func (p *NRGBA64)Set(x,y int,c color.Color)</target>
        </trans-unit>
        <trans-unit id="91e8bcb9264327813d8a2b40a0d0d9dc824b7c58" translate="yes" xml:space="preserve">
          <source>func (p *NRGBA64) SetNRGBA64(x, y int, c color.NRGBA64)</source>
          <target state="translated">func (p *NRGBA64)SetNRGBA64(x,y int,c color.NRGBA64)</target>
        </trans-unit>
        <trans-unit id="dde06903e83d98e5222078c049e252a613dcb14e" translate="yes" xml:space="preserve">
          <source>func (p *NRGBA64) SubImage(r Rectangle) Image</source>
          <target state="translated">func (p *NRGBA64)SubImage(r Rectángulo)Imagen</target>
        </trans-unit>
        <trans-unit id="b86911e9634020db9f912597e2a2d65c6a1fa1b9" translate="yes" xml:space="preserve">
          <source>func (p *NYCbCrA) AOffset(x, y int) int</source>
          <target state="translated">func (p *NYCbCrA)AOffset(x,y int)int</target>
        </trans-unit>
        <trans-unit id="5536884b2ced52e07728ab4385e8064ee5066ca4" translate="yes" xml:space="preserve">
          <source>func (p *NYCbCrA) At(x, y int) color.Color</source>
          <target state="translated">func (p *NYCbCrA)At(x,y int)color.Color</target>
        </trans-unit>
        <trans-unit id="bead90a0bd525d1e1b9b6ff6a5ec02dce168e0b6" translate="yes" xml:space="preserve">
          <source>func (p *NYCbCrA) ColorModel() color.Model</source>
          <target state="translated">func (p *NYCbCrA)ColorModel()color.Model</target>
        </trans-unit>
        <trans-unit id="d28fdc968cda58aee96fdf4158de407b90c16a57" translate="yes" xml:space="preserve">
          <source>func (p *NYCbCrA) NYCbCrAAt(x, y int) color.NYCbCrA</source>
          <target state="translated">func (p *NYCbCrA)NYCbCrAAt(x,y int)color.NYCbCrA</target>
        </trans-unit>
        <trans-unit id="ef236d6d3b1206070d4a2665f038e13c468d8b68" translate="yes" xml:space="preserve">
          <source>func (p *NYCbCrA) Opaque() bool</source>
          <target state="translated">func (p *NYCbCrA)Opaque()bool</target>
        </trans-unit>
        <trans-unit id="83a71b680822b8897d0137632533284e0fad03da" translate="yes" xml:space="preserve">
          <source>func (p *NYCbCrA) SubImage(r Rectangle) Image</source>
          <target state="translated">func (p *NYCbCrA)SubImage(r Rectángulo)Imagen</target>
        </trans-unit>
        <trans-unit id="e4652e25319f76d44a4286a655381822f583e517" translate="yes" xml:space="preserve">
          <source>func (p *Package) End() token.Pos</source>
          <target state="translated">func (p *Paquete)End()token.Pos</target>
        </trans-unit>
        <trans-unit id="0c8a0c471a3e4abd8d2edd39c9104255299bf25c" translate="yes" xml:space="preserve">
          <source>func (p *Package) Filter(f Filter)</source>
          <target state="translated">func (p *Paquete)Filtro(f Filtro)</target>
        </trans-unit>
        <trans-unit id="90c1ad3d70f286d84c7e46fbc5e76829eb075e04" translate="yes" xml:space="preserve">
          <source>func (p *Package) IsCommand() bool</source>
          <target state="translated">func (p *Paquete)IsCommand()bool</target>
        </trans-unit>
        <trans-unit id="d43e0f3f9828ce6c8802168982620348b0fed28a" translate="yes" xml:space="preserve">
          <source>func (p *Package) Pos() token.Pos</source>
          <target state="translated">func (p *Paquete)Pos()token.Pos</target>
        </trans-unit>
        <trans-unit id="c9d6bae84bebf8b340812dd9fbf2f0d37f3fd59e" translate="yes" xml:space="preserve">
          <source>func (p *Paletted) At(x, y int) color.Color</source>
          <target state="translated">func (p *Paletted)At(x,y int)color.Color</target>
        </trans-unit>
        <trans-unit id="e86d7ac2f3b2db90d0f20800c8a823b533ca943d" translate="yes" xml:space="preserve">
          <source>func (p *Paletted) Bounds() Rectangle</source>
          <target state="translated">func (p *Paletted)Bounds()Rectángulo</target>
        </trans-unit>
        <trans-unit id="f5cefa3e3f04424b51bb1969fca3e2aa3573b5a8" translate="yes" xml:space="preserve">
          <source>func (p *Paletted) ColorIndexAt(x, y int) uint8</source>
          <target state="translated">func (p *Paletted)ColorIndexAt(x,y int)uint8</target>
        </trans-unit>
        <trans-unit id="5ea3c8b67c969765dd73cd6751d5a86d4926941e" translate="yes" xml:space="preserve">
          <source>func (p *Paletted) ColorModel() color.Model</source>
          <target state="translated">func (p *Paletted)ColorModel()color.Model</target>
        </trans-unit>
        <trans-unit id="5586b7a6637cee79cdac5d3d026a897a3fa640fc" translate="yes" xml:space="preserve">
          <source>func (p *Paletted) Opaque() bool</source>
          <target state="translated">func (p *Paletted)Opaque()bool</target>
        </trans-unit>
        <trans-unit id="c47b7aa9127add0d4eb179c3e8fbdc8d2352c2d7" translate="yes" xml:space="preserve">
          <source>func (p *Paletted) PixOffset(x, y int) int</source>
          <target state="translated">func (p *Paletted)PixOffset(x,y int)int</target>
        </trans-unit>
        <trans-unit id="9b081cb63e4818618b5d25a2c5470a2caeb35a55" translate="yes" xml:space="preserve">
          <source>func (p *Paletted) Set(x, y int, c color.Color)</source>
          <target state="translated">func (p *Paletted)Set(x,y int,c color.Color)</target>
        </trans-unit>
        <trans-unit id="47d810617f9ce04e88d9554e4d74794dd951108e" translate="yes" xml:space="preserve">
          <source>func (p *Paletted) SetColorIndex(x, y int, index uint8)</source>
          <target state="translated">func (p *Paletted)SetColorIndex(x,y int,index uint8)</target>
        </trans-unit>
        <trans-unit id="f1857465f84419a9947b5350a65ea5a0fff1aea6" translate="yes" xml:space="preserve">
          <source>func (p *Paletted) SubImage(r Rectangle) Image</source>
          <target state="translated">func (p *Paletted)SubImage(r Rectangle)Image</target>
        </trans-unit>
        <trans-unit id="1a7e517df56ec6d40a424a8caecf86a3c206073e" translate="yes" xml:space="preserve">
          <source>func (p *Part) Close() error</source>
          <target state="translated">func (p *Part)Close()error</target>
        </trans-unit>
        <trans-unit id="8e6c0b6e4156d9579b1d02f631a852257cd6a8b3" translate="yes" xml:space="preserve">
          <source>func (p *Part) FileName() string</source>
          <target state="translated">func (p *Parte)FileName()string</target>
        </trans-unit>
        <trans-unit id="c397f672861b1996739edf09075a896519aa00fe" translate="yes" xml:space="preserve">
          <source>func (p *Part) FormName() string</source>
          <target state="translated">func (p *Parte)FormName()string</target>
        </trans-unit>
        <trans-unit id="6e9bec2c01fffbbb687920b785fd0671f741c6d4" translate="yes" xml:space="preserve">
          <source>func (p *Part) Read(d []byte) (n int, err error)</source>
          <target state="translated">func (p *Part)Read(d []byte)(n int,err error)</target>
        </trans-unit>
        <trans-unit id="bce2ce6bde632731ad8aa323db05276105b45391" translate="yes" xml:space="preserve">
          <source>func (p *PipeNode) Copy() Node</source>
          <target state="translated">func (p *PipeNode)Copy()Node</target>
        </trans-unit>
        <trans-unit id="f26865930186f8165ac743752c2139bd02064027" translate="yes" xml:space="preserve">
          <source>func (p *PipeNode) CopyPipe() *PipeNode</source>
          <target state="translated">func (p *PipeNode)CopyPipe()*PipeNode</target>
        </trans-unit>
        <trans-unit id="6fb25f8fbd58b9274d05e10271468e966492501f" translate="yes" xml:space="preserve">
          <source>func (p *PipeNode) String() string</source>
          <target state="translated">func(p *PipeNode)String()string</target>
        </trans-unit>
        <trans-unit id="13035b76ce0ec1fcf81f2a522496069bdb6348cf" translate="yes" xml:space="preserve">
          <source>func (p *Pipeline) EndRequest(id uint)</source>
          <target state="translated">func(p *Pipeline)EndRequest(id uint)</target>
        </trans-unit>
        <trans-unit id="84e4b403d54c0ea99e77963daca9200b2359edda" translate="yes" xml:space="preserve">
          <source>func (p *Pipeline) EndResponse(id uint)</source>
          <target state="translated">func(p *Pipeline)EndResponse(id uint)</target>
        </trans-unit>
        <trans-unit id="ca142bca511ab668115459a6b8c29491c88c828f" translate="yes" xml:space="preserve">
          <source>func (p *Pipeline) Next() uint</source>
          <target state="translated">func (p *Pipeline)Next()uint</target>
        </trans-unit>
        <trans-unit id="fc201b7da727d0326aeec01425956d8618cc3c20" translate="yes" xml:space="preserve">
          <source>func (p *Pipeline) StartRequest(id uint)</source>
          <target state="translated">func(p *Pipeline)StartRequest(id uint)</target>
        </trans-unit>
        <trans-unit id="5f6aee30a4a663f4dd021e833d2ee86a09b911e2" translate="yes" xml:space="preserve">
          <source>func (p *Pipeline) StartResponse(id uint)</source>
          <target state="translated">func(p *Pipeline)StartResponse(id uint)</target>
        </trans-unit>
        <trans-unit id="12e0496195dd22addb229b83507cc586ba62c5fb" translate="yes" xml:space="preserve">
          <source>func (p *Plugin) Lookup(symName string) (Symbol, error)</source>
          <target state="translated">func (p *Plugin)Lookup(symName string)(Symbol,error)</target>
        </trans-unit>
        <trans-unit id="919497c7b01a22b4636ce67612ca1de0bca8a922" translate="yes" xml:space="preserve">
          <source>func (p *Pointer) Elem() Type</source>
          <target state="translated">func (p *Pointer)Elem()Type</target>
        </trans-unit>
        <trans-unit id="b0563a7a8fa613382906352e1b6f77122c81e811" translate="yes" xml:space="preserve">
          <source>func (p *Pointer) String() string</source>
          <target state="translated">func(p *Pointer)String()string</target>
        </trans-unit>
        <trans-unit id="bc443cee146d577600a1752111efe665215b1860" translate="yes" xml:space="preserve">
          <source>func (p *Pointer) Underlying() Type</source>
          <target state="translated">func (p *Pointer)Underlying()Type</target>
        </trans-unit>
        <trans-unit id="4e581c9b33509d094547c9f3d14f11025e5d45a7" translate="yes" xml:space="preserve">
          <source>func (p *Pool) Get() interface{}</source>
          <target state="translated">func (p *Pool)Get()interface{}</target>
        </trans-unit>
        <trans-unit id="34e04f13deb7eeb80be564a9592aa5625b3cb291" translate="yes" xml:space="preserve">
          <source>func (p *Pool) Put(x interface{})</source>
          <target state="translated">func (p *Pool)Put(x interface{})</target>
        </trans-unit>
        <trans-unit id="5c44e4646e93f173486f45cc5d57d05ae89f907d" translate="yes" xml:space="preserve">
          <source>func (p *Process) Kill() error</source>
          <target state="translated">func (p *Process)Kill()error</target>
        </trans-unit>
        <trans-unit id="873b4204bdd953047d7a67fed86b53cca9c3128b" translate="yes" xml:space="preserve">
          <source>func (p *Process) Release() error</source>
          <target state="translated">func (p *Proceso)Release()error</target>
        </trans-unit>
        <trans-unit id="8b3e764027400c4e0bcb58381a1bfe1532f42742" translate="yes" xml:space="preserve">
          <source>func (p *Process) Signal(sig Signal) error</source>
          <target state="translated">func (p *Proceso)Señal(sig Señal)error</target>
        </trans-unit>
        <trans-unit id="3de022f5ed83be1ce790ff36b6427f104c807710" translate="yes" xml:space="preserve">
          <source>func (p *Process) Wait() (*ProcessState, error)</source>
          <target state="translated">func (p *Proceso)Wait()(*ProcessState,error)</target>
        </trans-unit>
        <trans-unit id="e867238bd563fe422fe47be2205ad30b4d57a07c" translate="yes" xml:space="preserve">
          <source>func (p *ProcessState) ExitCode() int</source>
          <target state="translated">func (p *ProcessState)ExitCode()int</target>
        </trans-unit>
        <trans-unit id="950dc195339f19ad42765e845fbf1c608730bd89" translate="yes" xml:space="preserve">
          <source>func (p *ProcessState) Exited() bool</source>
          <target state="translated">func (p *ProcessState)Exited()bool</target>
        </trans-unit>
        <trans-unit id="9816533c967caeece19e041417afb893ee89c03e" translate="yes" xml:space="preserve">
          <source>func (p *ProcessState) Pid() int</source>
          <target state="translated">func (p *ProcessState)Pid()int</target>
        </trans-unit>
        <trans-unit id="2aa09ac250932be8b3b6aeea98dd73811c7d3ebb" translate="yes" xml:space="preserve">
          <source>func (p *ProcessState) String() string</source>
          <target state="translated">func (p *ProcessState)String()string</target>
        </trans-unit>
        <trans-unit id="a3e464338f8cebd9be58a911e7260057fdc45508" translate="yes" xml:space="preserve">
          <source>func (p *ProcessState) Success() bool</source>
          <target state="translated">func (p *ProcessState)Success()bool</target>
        </trans-unit>
        <trans-unit id="5ab5c921cb4dee58356324855b2b20feb593c15b" translate="yes" xml:space="preserve">
          <source>func (p *ProcessState) Sys() interface{}</source>
          <target state="translated">func (p *ProcessState)Sys()interface{}</target>
        </trans-unit>
        <trans-unit id="386d93beb609aa2efc1e251982bd650d33f23df3" translate="yes" xml:space="preserve">
          <source>func (p *ProcessState) SysUsage() interface{}</source>
          <target state="translated">func (p *ProcessState)SysUsage()interface{}</target>
        </trans-unit>
        <trans-unit id="c33324c6350e268310f725efa9c1c210289cf64f" translate="yes" xml:space="preserve">
          <source>func (p *ProcessState) SystemTime() time.Duration</source>
          <target state="translated">func (p *ProcessState)SystemTime()time.Duration</target>
        </trans-unit>
        <trans-unit id="f9be2e23c5a0d5fa04dad5e60075f950ec5c56b9" translate="yes" xml:space="preserve">
          <source>func (p *ProcessState) UserTime() time.Duration</source>
          <target state="translated">func (p *ProcessState)UserTime()time.Duration</target>
        </trans-unit>
        <trans-unit id="836e1aaad7e74c712f079a9e3d6239da583e7812" translate="yes" xml:space="preserve">
          <source>func (p *Profile) Add(value interface{}, skip int)</source>
          <target state="translated">func (p *Perfil)Add(value interface{},skip int)</target>
        </trans-unit>
        <trans-unit id="8e5efb9f8a39d8a2bdda826d830c70539ea8127e" translate="yes" xml:space="preserve">
          <source>func (p *Profile) Count() int</source>
          <target state="translated">func (p *Perfil)Count()int</target>
        </trans-unit>
        <trans-unit id="972218c8c61c3218750bd3aab74d083194d581e1" translate="yes" xml:space="preserve">
          <source>func (p *Profile) Name() string</source>
          <target state="translated">func (p *Perfil)Name()string</target>
        </trans-unit>
        <trans-unit id="6ff1d3991626efcda7feb20e24a17d852df269cb" translate="yes" xml:space="preserve">
          <source>func (p *Profile) Remove(value interface{})</source>
          <target state="translated">func (p *Perfil)Remove(value interface{})</target>
        </trans-unit>
        <trans-unit id="615a31bbf40420856fab8f26a77b2e3d71aacd72" translate="yes" xml:space="preserve">
          <source>func (p *Profile) WriteTo(w io.Writer, debug int) error</source>
          <target state="translated">func (p *Perfil)WriteTo(w io.Writer,debug int)error</target>
        </trans-unit>
        <trans-unit id="a1b7b690f503acd76d4707254b8a6bd996377e93" translate="yes" xml:space="preserve">
          <source>func (p *Prog) Open() io.ReadSeeker</source>
          <target state="translated">func (p *Prog)Open()io.ReadSeeker</target>
        </trans-unit>
        <trans-unit id="adb64332143a6af2cebff92ff793200638e23a72" translate="yes" xml:space="preserve">
          <source>func (p *Prog) Prefix() (prefix string, complete bool)</source>
          <target state="translated">func (p *Prog)Prefix()(prefijo cadena,bool completo)</target>
        </trans-unit>
        <trans-unit id="ae87c8fb662090bf0398c26a30b305a0878c696b" translate="yes" xml:space="preserve">
          <source>func (p *Prog) StartCond() EmptyOp</source>
          <target state="translated">func (p *Prog)StartCond()EmptyOp</target>
        </trans-unit>
        <trans-unit id="0cba96bbae73d7189b36e66653622f3867f7c41d" translate="yes" xml:space="preserve">
          <source>func (p *Prog) String() string</source>
          <target state="translated">func (p *Prog)String()string</target>
        </trans-unit>
        <trans-unit id="e6b99afc7dc7bb4f2bb8b098ae8b69b7e40e2cae" translate="yes" xml:space="preserve">
          <source>func (p *RGBA) At(x, y int) color.Color</source>
          <target state="translated">func (p *RGBA)At(x,y int)color.Color</target>
        </trans-unit>
        <trans-unit id="1ed959659d4611ec90d4c7766f40c8d0d86a2f0e" translate="yes" xml:space="preserve">
          <source>func (p *RGBA) Bounds() Rectangle</source>
          <target state="translated">func (p *RGBA)Bounds()Rectángulo</target>
        </trans-unit>
        <trans-unit id="7150a4cc9af327c2b94b4d06b119c1a2847c68d1" translate="yes" xml:space="preserve">
          <source>func (p *RGBA) ColorModel() color.Model</source>
          <target state="translated">func (p *RGBA)ColorModel()color.Model</target>
        </trans-unit>
        <trans-unit id="42580eedb8100a8d46cf19aed6d77c254fdee6dc" translate="yes" xml:space="preserve">
          <source>func (p *RGBA) Opaque() bool</source>
          <target state="translated">func (p *RGBA)Opaque()bool</target>
        </trans-unit>
        <trans-unit id="64f71357e68aed33aadbf74b9dd4aebaf192efbb" translate="yes" xml:space="preserve">
          <source>func (p *RGBA) PixOffset(x, y int) int</source>
          <target state="translated">func (p *RGBA)PixOffset(x,y int)int</target>
        </trans-unit>
        <trans-unit id="4936c362a78d45448f2d50a6e81f0c6de0a84e08" translate="yes" xml:space="preserve">
          <source>func (p *RGBA) RGBAAt(x, y int) color.RGBA</source>
          <target state="translated">func (p *RGBA)RGBAAt(x,y int)color.RGBA</target>
        </trans-unit>
        <trans-unit id="a98422e38887cf06208a27079c51b26c4a9f94e4" translate="yes" xml:space="preserve">
          <source>func (p *RGBA) Set(x, y int, c color.Color)</source>
          <target state="translated">func (p *RGBA)Set(x,y int,c color.Color)</target>
        </trans-unit>
        <trans-unit id="12516648890946112492fd6d4a6197169d51685f" translate="yes" xml:space="preserve">
          <source>func (p *RGBA) SetRGBA(x, y int, c color.RGBA)</source>
          <target state="translated">func (p *RGBA)SetRGBA(x,y int,c color.RGBA)</target>
        </trans-unit>
        <trans-unit id="317ce6396f9b37734e4d556295ba1527f3763ace" translate="yes" xml:space="preserve">
          <source>func (p *RGBA) SubImage(r Rectangle) Image</source>
          <target state="translated">func (p *RGBA)SubImage(r Rectángulo)Imagen</target>
        </trans-unit>
        <trans-unit id="78df34e2a7841c155f602481ab9d92582a446182" translate="yes" xml:space="preserve">
          <source>func (p *RGBA64) At(x, y int) color.Color</source>
          <target state="translated">func (p *RGBA64)At(x,y int)color.Color</target>
        </trans-unit>
        <trans-unit id="524d00fb9376dd9736dd8c99421909ce85a36079" translate="yes" xml:space="preserve">
          <source>func (p *RGBA64) Bounds() Rectangle</source>
          <target state="translated">func (p *RGBA64)Bounds()Rectángulo</target>
        </trans-unit>
        <trans-unit id="5509612db642429862273d2de9a35357ff99ef0b" translate="yes" xml:space="preserve">
          <source>func (p *RGBA64) ColorModel() color.Model</source>
          <target state="translated">func (p *RGBA64)ColorModel()color.Model</target>
        </trans-unit>
        <trans-unit id="f623d56941a53507f6f6d66fa5869a0acdaa6f85" translate="yes" xml:space="preserve">
          <source>func (p *RGBA64) Opaque() bool</source>
          <target state="translated">func (p *RGBA64)Opaque()bool</target>
        </trans-unit>
        <trans-unit id="d1aa3a0b17efe68913301df06eb83974f325520c" translate="yes" xml:space="preserve">
          <source>func (p *RGBA64) PixOffset(x, y int) int</source>
          <target state="translated">func (p *RGBA64)PixOffset(x,y int)int</target>
        </trans-unit>
        <trans-unit id="d53f1872fd21e1487b832fa6e45ffbf8eafcd60c" translate="yes" xml:space="preserve">
          <source>func (p *RGBA64) RGBA64At(x, y int) color.RGBA64</source>
          <target state="translated">func (p *RGBA64)RGBA64At(x,y int)color.RGBA64</target>
        </trans-unit>
        <trans-unit id="1b3afef74fa638bd672e9e546d2951774373bd04" translate="yes" xml:space="preserve">
          <source>func (p *RGBA64) Set(x, y int, c color.Color)</source>
          <target state="translated">func (p *RGBA64)Set(x,y int,c color.Color)</target>
        </trans-unit>
        <trans-unit id="630325a91e7834f1e2ead89f13d425a0bc2ae9ca" translate="yes" xml:space="preserve">
          <source>func (p *RGBA64) SetRGBA64(x, y int, c color.RGBA64)</source>
          <target state="translated">func (p *RGBA64)SetRGBA64(x,y int,c color.RGBA64)</target>
        </trans-unit>
        <trans-unit id="749e63bf8f6f77c1283305fdabb7f2457698372f" translate="yes" xml:space="preserve">
          <source>func (p *RGBA64) SubImage(r Rectangle) Image</source>
          <target state="translated">func (p *RGBA64)SubImage(r Rectángulo)Imagen</target>
        </trans-unit>
        <trans-unit id="e9514da99f855eecaaa040b0c4f88a3d9d4a5176" translate="yes" xml:space="preserve">
          <source>func (p *ReverseProxy) ServeHTTP(rw http.ResponseWriter, req *http.Request)</source>
          <target state="translated">func (p *ReverseProxy)ServeHTTP(rw http.ResponseWriter,req *http.Request)</target>
        </trans-unit>
        <trans-unit id="022e692517f47a65cf27d35a6166b4aeaff7ca8e" translate="yes" xml:space="preserve">
          <source>func (p *YCbCr) At(x, y int) color.Color</source>
          <target state="translated">func (p *YCbCr)At(x,y int)color.Color</target>
        </trans-unit>
        <trans-unit id="75892a31f654fb479c0ba8514a16eac14f9317b3" translate="yes" xml:space="preserve">
          <source>func (p *YCbCr) Bounds() Rectangle</source>
          <target state="translated">func (p *YCbCr)Bounds()Rectángulo</target>
        </trans-unit>
        <trans-unit id="133a3d84c8bec32556f4793d1c1b812f534bdd1e" translate="yes" xml:space="preserve">
          <source>func (p *YCbCr) COffset(x, y int) int</source>
          <target state="translated">func (p *YCbCr)COffset(x,y int)int</target>
        </trans-unit>
        <trans-unit id="43216447abee566daafee52397834798f873228b" translate="yes" xml:space="preserve">
          <source>func (p *YCbCr) ColorModel() color.Model</source>
          <target state="translated">func (p *YCbCr)ColorModel()color.Model</target>
        </trans-unit>
        <trans-unit id="32ab32f9ebb91dad7fcb8bc30f71488eb3c00bb0" translate="yes" xml:space="preserve">
          <source>func (p *YCbCr) Opaque() bool</source>
          <target state="translated">func (p *YCbCr)Opaque()bool</target>
        </trans-unit>
        <trans-unit id="4d194b8505e26cf9266ee7a64198728c790cf997" translate="yes" xml:space="preserve">
          <source>func (p *YCbCr) SubImage(r Rectangle) Image</source>
          <target state="translated">func (p *YCbCr)SubImage(r Rectángulo)Imagen</target>
        </trans-unit>
        <trans-unit id="20274af0b5a08b798d50c804287f9438d7d69b5e" translate="yes" xml:space="preserve">
          <source>func (p *YCbCr) YCbCrAt(x, y int) color.YCbCr</source>
          <target state="translated">func (p *YCbCr)YCbCrAt(x,y int)color.YCbCr</target>
        </trans-unit>
        <trans-unit id="0ce8c88e464349f0953a4c2e7e07dba576296d6e" translate="yes" xml:space="preserve">
          <source>func (p *YCbCr) YOffset(x, y int) int</source>
          <target state="translated">func (p *YCbCr)YOffset(x,y int)int</target>
        </trans-unit>
        <trans-unit id="c6c60387e1d64e70eb6cf14f04d20c32a59f6576" translate="yes" xml:space="preserve">
          <source>func (p ErrorList) Err() error</source>
          <target state="translated">func (p Lista de errores)Err()error</target>
        </trans-unit>
        <trans-unit id="a3cc8efae6bf1525063710dabbfabf5da9db8f13" translate="yes" xml:space="preserve">
          <source>func (p ErrorList) Error() string</source>
          <target state="translated">func (p ErrorList)Error()string</target>
        </trans-unit>
        <trans-unit id="2093f1a7a3958b2b182f8258d6b8dcca41d04fee" translate="yes" xml:space="preserve">
          <source>func (p ErrorList) Len() int</source>
          <target state="translated">func (p Lista de errores)Len()int</target>
        </trans-unit>
        <trans-unit id="8ce11423f84d014fa119aacf9e116e12b0740366" translate="yes" xml:space="preserve">
          <source>func (p ErrorList) Less(i, j int) bool</source>
          <target state="translated">func (p ErrorList)Less(i,j int)bool</target>
        </trans-unit>
        <trans-unit id="f21372926280005429178517e71606597b2ded88" translate="yes" xml:space="preserve">
          <source>func (p ErrorList) Sort()</source>
          <target state="translated">func (p Lista de errores)Sort()</target>
        </trans-unit>
        <trans-unit id="215d394bec2bf6f775c64a2c32104ea2c04fbd6f" translate="yes" xml:space="preserve">
          <source>func (p ErrorList) Swap(i, j int)</source>
          <target state="translated">func (p Lista de errores)Swap(i,j int)</target>
        </trans-unit>
        <trans-unit id="d0430cf3b928d6d8d8a78fbddc96445058b862c8" translate="yes" xml:space="preserve">
          <source>func (p Float64Slice) Len() int</source>
          <target state="translated">func (p Float64Slice)Len()int</target>
        </trans-unit>
        <trans-unit id="847864a237093dec2416f75868303e7afb3813fb" translate="yes" xml:space="preserve">
          <source>func (p Float64Slice) Less(i, j int) bool</source>
          <target state="translated">func (p Float64Slice)Less(i,j int)bool</target>
        </trans-unit>
        <trans-unit id="8f97f6f7c52a738afa448a8e956380991740153a" translate="yes" xml:space="preserve">
          <source>func (p Float64Slice) Search(x float64) int</source>
          <target state="translated">func (p Float64Slice)Search(x float64)int</target>
        </trans-unit>
        <trans-unit id="7dd3a549c1302d197acf6301732ee623f131d4f3" translate="yes" xml:space="preserve">
          <source>func (p Float64Slice) Sort()</source>
          <target state="translated">func (p Float64Slice)Sort()</target>
        </trans-unit>
        <trans-unit id="5ef4f5f0ea2ff0384a2e08d477f8571d8ee899c1" translate="yes" xml:space="preserve">
          <source>func (p Float64Slice) Swap(i, j int)</source>
          <target state="translated">libra (p Float64Slice)Swap(i,j int)</target>
        </trans-unit>
        <trans-unit id="9c9a08d75338150668f1d1305a223a1fe8ec01c4" translate="yes" xml:space="preserve">
          <source>func (p IntSlice) Len() int</source>
          <target state="translated">func (p IntSlice)Len()int</target>
        </trans-unit>
        <trans-unit id="3c1421a9ef3833746a52059c9171a8c7df14ace7" translate="yes" xml:space="preserve">
          <source>func (p IntSlice) Less(i, j int) bool</source>
          <target state="translated">libra (p IntSlice)Menos(i,j int)bool</target>
        </trans-unit>
        <trans-unit id="fedcf877dea16e1654add06d15711046ba711cfe" translate="yes" xml:space="preserve">
          <source>func (p IntSlice) Search(x int) int</source>
          <target state="translated">func (p IntSlice)Search(x int)int</target>
        </trans-unit>
        <trans-unit id="af2d7e488b65426d31a746457ec8303608a15b29" translate="yes" xml:space="preserve">
          <source>func (p IntSlice) Sort()</source>
          <target state="translated">func (p IntSlice)Sort()</target>
        </trans-unit>
        <trans-unit id="0fa5483b82a3b7932a3d52a7599fc13464daa70f" translate="yes" xml:space="preserve">
          <source>func (p IntSlice) Swap(i, j int)</source>
          <target state="translated">func (p IntSlice)Swap(i,j int)</target>
        </trans-unit>
        <trans-unit id="44db06905732890133f9d42a7a73cd4a6b3aae42" translate="yes" xml:space="preserve">
          <source>func (p Palette) Convert(c Color) Color</source>
          <target state="translated">func (p Paleta)Convertir(c Color)Color</target>
        </trans-unit>
        <trans-unit id="9dfd0afb785d127511b0441883150720dec393c2" translate="yes" xml:space="preserve">
          <source>func (p Palette) Index(c Color) int</source>
          <target state="translated">func (p Paleta)Index(c Color)int</target>
        </trans-unit>
        <trans-unit id="afcd504bab2fb9203884da1e8fbb4cfd771b3b53" translate="yes" xml:space="preserve">
          <source>func (p Point) Add(q Point) Point</source>
          <target state="translated">func (p Punto)Add(q Punto)Punto</target>
        </trans-unit>
        <trans-unit id="b55f1a4780503ae917b0c523c99df8e092b75306" translate="yes" xml:space="preserve">
          <source>func (p Point) Div(k int) Point</source>
          <target state="translated">func (p Punto)Div(k int)Punto</target>
        </trans-unit>
        <trans-unit id="b4d19c92312cf3c2eabf074a3395c553daa72bd1" translate="yes" xml:space="preserve">
          <source>func (p Point) Eq(q Point) bool</source>
          <target state="translated">func (p Punto)Eq(q Punto)bool</target>
        </trans-unit>
        <trans-unit id="1dea8e65c226d8707b8a3ef945535cca3089a4d9" translate="yes" xml:space="preserve">
          <source>func (p Point) In(r Rectangle) bool</source>
          <target state="translated">func (p Punto)In(r Rectángulo)bool</target>
        </trans-unit>
        <trans-unit id="66cf19d900ed6fb3e99285593d7208cc3b402cc5" translate="yes" xml:space="preserve">
          <source>func (p Point) Mod(r Rectangle) Point</source>
          <target state="translated">func (p Punto)Mod(r Rectángulo)Punto</target>
        </trans-unit>
        <trans-unit id="92e03df29ada80fee7fb902c59186cee57b351e7" translate="yes" xml:space="preserve">
          <source>func (p Point) Mul(k int) Point</source>
          <target state="translated">func (p Punto)Mul(k int)Punto</target>
        </trans-unit>
        <trans-unit id="064f34b811998b44c8d916e9a126df99f2867970" translate="yes" xml:space="preserve">
          <source>func (p Point) String() string</source>
          <target state="translated">func (p Point)String()string</target>
        </trans-unit>
        <trans-unit id="21eb5fb594dff0ebca7f98c37822c9c71187d88e" translate="yes" xml:space="preserve">
          <source>func (p Point) Sub(q Point) Point</source>
          <target state="translated">func (p Punto)Sub(q Punto)Punto</target>
        </trans-unit>
        <trans-unit id="84ce4f70a4c8643578e779e68f8b39d6e5a47c0b" translate="yes" xml:space="preserve">
          <source>func (p Pos) IsValid() bool</source>
          <target state="translated">func (p Pos)IsValid()bool</target>
        </trans-unit>
        <trans-unit id="d7c13c7a23d1bca61bcfdaf2258296ba2d4aca3a" translate="yes" xml:space="preserve">
          <source>func (p Pos) Position() Pos</source>
          <target state="translated">func (p Pos)Position()Pos</target>
        </trans-unit>
        <trans-unit id="30a12884475efcfc666ad00b4c1ef6a8ea37fb81" translate="yes" xml:space="preserve">
          <source>func (p ProcInst) Copy() ProcInst</source>
          <target state="translated">func (p ProcInst)Copy()ProcInst</target>
        </trans-unit>
        <trans-unit id="6b603b4e5e5440dd8cc7d26dae4231cb2036aa35" translate="yes" xml:space="preserve">
          <source>func (p ProtocolError) Error() string</source>
          <target state="translated">func (p ProtocolError)Error()string</target>
        </trans-unit>
        <trans-unit id="1db9fc2a0a879e8bcc0d0c48273d32b36ccea4db" translate="yes" xml:space="preserve">
          <source>func (p StringSlice) Len() int</source>
          <target state="translated">func (p StringSlice)Len()int</target>
        </trans-unit>
        <trans-unit id="12886c85cce97cec2d1a017b4e9f8ad5507d9754" translate="yes" xml:space="preserve">
          <source>func (p StringSlice) Less(i, j int) bool</source>
          <target state="translated">func (p StringSlice)Less(i,j int)bool</target>
        </trans-unit>
        <trans-unit id="6a11e3bfd3d41490458c49d3adee87b2c41aed6a" translate="yes" xml:space="preserve">
          <source>func (p StringSlice) Search(x string) int</source>
          <target state="translated">func (p StringSlice)Search(x string)int</target>
        </trans-unit>
        <trans-unit id="6ebac8839f28c474ed13c6c4a9a21514409b335f" translate="yes" xml:space="preserve">
          <source>func (p StringSlice) Sort()</source>
          <target state="translated">func (p StringSlice)Sort()</target>
        </trans-unit>
        <trans-unit id="d10371476299b647c741a9ac9bfc7c4ed321cc99" translate="yes" xml:space="preserve">
          <source>func (p StringSlice) Swap(i, j int)</source>
          <target state="translated">func (p StringSlice)Swap(i,j int)</target>
        </trans-unit>
        <trans-unit id="266954cbbf61daefb7eb448322ed15a1730ee223" translate="yes" xml:space="preserve">
          <source>func (pb *PB) Next() bool</source>
          <target state="translated">func(pb *PB)Next()bool</target>
        </trans-unit>
        <trans-unit id="a6afdbc92f4ff49e37e48bc0dc5b3ca51644ba5a" translate="yes" xml:space="preserve">
          <source>func (pe *ProtocolError) Error() string</source>
          <target state="translated">func (pe *ProtocolError)Error()string</target>
        </trans-unit>
        <trans-unit id="73cafc0231f9b33187a5649a2a8a9ea476ae7d5b" translate="yes" xml:space="preserve">
          <source>func (pkg *Package) Complete() bool</source>
          <target state="translated">func (pkg *Paquete)Complete()bool</target>
        </trans-unit>
        <trans-unit id="761a1afd3a9135d14c4fdd2fc41d3b841d0c2d3c" translate="yes" xml:space="preserve">
          <source>func (pkg *Package) Imports() []*Package</source>
          <target state="translated">func (pkg *Envase)Importaciones()[]*Envase</target>
        </trans-unit>
        <trans-unit id="8b029c5ee9bb9d34620f98b1f19cf1acfcc3970e" translate="yes" xml:space="preserve">
          <source>func (pkg *Package) MarkComplete()</source>
          <target state="translated">func (pkg *Paquete)MarkComplete()</target>
        </trans-unit>
        <trans-unit id="ae670b89511d87fd80b67037cb59d0911a80f704" translate="yes" xml:space="preserve">
          <source>func (pkg *Package) Name() string</source>
          <target state="translated">func (pkg *Paquete)Name()string</target>
        </trans-unit>
        <trans-unit id="dc215afae709ecfe9d9363fcab9b1d3861f8bc24" translate="yes" xml:space="preserve">
          <source>func (pkg *Package) Path() string</source>
          <target state="translated">func (pkg *Paquete)Path()string</target>
        </trans-unit>
        <trans-unit id="9cb64701a3d1c4516d68a3101d498579374bc4e1" translate="yes" xml:space="preserve">
          <source>func (pkg *Package) Scope() *Scope</source>
          <target state="translated">func (pkg *Paquete)Scope()*Scope</target>
        </trans-unit>
        <trans-unit id="ff6ffc8e6d90eca49201c7bf1e83e83711721e32" translate="yes" xml:space="preserve">
          <source>func (pkg *Package) SetImports(list []*Package)</source>
          <target state="translated">func (pkg *Paquete)SetImports(list []*Paquete)</target>
        </trans-unit>
        <trans-unit id="716d45bb9d150b75e7460613c8a0043ac01810a6" translate="yes" xml:space="preserve">
          <source>func (pkg *Package) SetName(name string)</source>
          <target state="translated">func (pkg *Paquete)SetName(name string)</target>
        </trans-unit>
        <trans-unit id="476ce8104713b28a105eb108f83773a9a3328294" translate="yes" xml:space="preserve">
          <source>func (pkg *Package) String() string</source>
          <target state="translated">func (pkg *Paquete)String()string</target>
        </trans-unit>
        <trans-unit id="6d7b449cc5603fd623437ccf7f3179a27d47dc5d" translate="yes" xml:space="preserve">
          <source>func (pos *Position) IsValid() bool</source>
          <target state="translated">func (pos *Position)IsValid()bool</target>
        </trans-unit>
        <trans-unit id="8bdb9b72084e990237f4622c07b73cddf7a2c3f6" translate="yes" xml:space="preserve">
          <source>func (pos Position) String() string</source>
          <target state="translated">func (pos Position)String()string</target>
        </trans-unit>
        <trans-unit id="1b14cdfae3474d1dae7b76e94dd340dd96271404" translate="yes" xml:space="preserve">
          <source>func (priv *PrivateKey) Decrypt(rand io.Reader, ciphertext []byte, opts crypto.DecrypterOpts) (plaintext []byte, err error)</source>
          <target state="translated">func (priv *PrivateKey)Decrypt(rand io.Reader,ciphertext []byte,opts crypto.DecrypterOpts)(plaintext []byte,err error)</target>
        </trans-unit>
        <trans-unit id="ffa46b374cff3af22cc0050fd99b304b45b22082" translate="yes" xml:space="preserve">
          <source>func (priv *PrivateKey) Equal(x crypto.PrivateKey) bool</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f38dc8be6f29640f0c91cbf120b13cd7361c98b3" translate="yes" xml:space="preserve">
          <source>func (priv *PrivateKey) Precompute()</source>
          <target state="translated">func (priv *PrivateKey)Precompute()</target>
        </trans-unit>
        <trans-unit id="fe2812c6b148bbc743757dd304be1acb93815412" translate="yes" xml:space="preserve">
          <source>func (priv *PrivateKey) Public() crypto.PublicKey</source>
          <target state="translated">func (priv *PrivateKey)Public()crypto.PublicKey</target>
        </trans-unit>
        <trans-unit id="bf2b8a4e089bffe33cf1255b611d010873a7b312" translate="yes" xml:space="preserve">
          <source>func (priv *PrivateKey) Sign(rand io.Reader, digest []byte, opts crypto.SignerOpts) ([]byte, error)</source>
          <target state="translated">func (priv *PrivateKey)Sign(rand io.Reader,digest []byte,opts crypto.SignerOpts)([]byte,error)</target>
        </trans-unit>
        <trans-unit id="607c62e561d9cdcbc93b9aa90e323d6f544200ae" translate="yes" xml:space="preserve">
          <source>func (priv *PrivateKey) Validate() error</source>
          <target state="translated">func (priv *PrivateKey)Validate()error</target>
        </trans-unit>
        <trans-unit id="82180c018a5a92f1f62e3261b7813e85f2f64153" translate="yes" xml:space="preserve">
          <source>func (priv PrivateKey) Equal(x crypto.PrivateKey) bool</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="054c64dc7c3663b93448261201e70bf0a8076857" translate="yes" xml:space="preserve">
          <source>func (priv PrivateKey) Public() crypto.PublicKey</source>
          <target state="translated">func (priv PrivateKey)Public()crypto.PublicKey</target>
        </trans-unit>
        <trans-unit id="df9dc074cb7bb49470bb6c333a6141ae95ddd706" translate="yes" xml:space="preserve">
          <source>func (priv PrivateKey) Seed() []byte</source>
          <target state="translated">func (priv PrivateKey)Seed()[]byte</target>
        </trans-unit>
        <trans-unit id="841ad79aa19b3432660148cf1cf816030befda8a" translate="yes" xml:space="preserve">
          <source>func (priv PrivateKey) Sign(rand io.Reader, message []byte, opts crypto.SignerOpts) (signature []byte, err error)</source>
          <target state="translated">func (priv PrivateKey)Sign(rand io.Reader,message []byte,opts crypto.SignerOpts)(signature []byte,err error)</target>
        </trans-unit>
        <trans-unit id="7370056028ba1e9772b951c3e5559c25abdae890" translate="yes" xml:space="preserve">
          <source>func (pssOpts *PSSOptions) HashFunc() crypto.Hash</source>
          <target state="translated">func (pssOpts *PSSOptions)HashFunc()crypto.Hash</target>
        </trans-unit>
        <trans-unit id="c4789d0d55680d8db35c33429dd3feabda9321b3" translate="yes" xml:space="preserve">
          <source>func (pub *PublicKey) Equal(x crypto.PublicKey) bool</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="78c2f24f98fde486a46e015240b24027a04187bb" translate="yes" xml:space="preserve">
          <source>func (pub *PublicKey) Size() int</source>
          <target state="translated">func (pub *PublicKey)Size()int</target>
        </trans-unit>
        <trans-unit id="162cc08af469beae25c9f322ece365625fff8904" translate="yes" xml:space="preserve">
          <source>func (pub PublicKey) Equal(x crypto.PublicKey) bool</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="017f5c473a06b998ff2b192e8ccd511272069ddb" translate="yes" xml:space="preserve">
          <source>func (r *LineReader) Files() []*LineFile</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c4bf95a21d409d51931d26a833986d495190988e" translate="yes" xml:space="preserve">
          <source>func (r *LineReader) Next(entry *LineEntry) error</source>
          <target state="translated">func (r *LineReader)Next(entry *LineEntry)error</target>
        </trans-unit>
        <trans-unit id="9e7cbd100e9e5a08412e5548b2f7001f24802e90" translate="yes" xml:space="preserve">
          <source>func (r *LineReader) Reset()</source>
          <target state="translated">func (r *LineReader)Reset()</target>
        </trans-unit>
        <trans-unit id="d4b5ca8a9da84a3ff2af429ffed24295b9687c6e" translate="yes" xml:space="preserve">
          <source>func (r *LineReader) Seek(pos LineReaderPos)</source>
          <target state="translated">func (r *LineReader)Seek(pos LineReaderPos)</target>
        </trans-unit>
        <trans-unit id="195ddd9cbba52955eafe7d6fbfbfa831a51513d9" translate="yes" xml:space="preserve">
          <source>func (r *LineReader) SeekPC(pc uint64, entry *LineEntry) error</source>
          <target state="translated">func (r *LineReader)SeekPC(pc uint64,entry *LineEntry)error</target>
        </trans-unit>
        <trans-unit id="f76a52c343c513afc47a10639c93ccf0c5ea7ed3" translate="yes" xml:space="preserve">
          <source>func (r *LineReader) Tell() LineReaderPos</source>
          <target state="translated">func (r *LineReader)Tell()LineReaderPos</target>
        </trans-unit>
        <trans-unit id="585fe0476f4a72f69117b3ec721ae709a0138779" translate="yes" xml:space="preserve">
          <source>func (r *MemProfileRecord) InUseBytes() int64</source>
          <target state="translated">func (r *MemProfileRecord)InUseBytes()int64</target>
        </trans-unit>
        <trans-unit id="70abd36df89b70c9b30586dfc0abb46ace1f9929" translate="yes" xml:space="preserve">
          <source>func (r *MemProfileRecord) InUseObjects() int64</source>
          <target state="translated">func (r *MemProfileRecord)InUseObjects()int64</target>
        </trans-unit>
        <trans-unit id="904736b476b533f38dc68c305dfd1749d683972b" translate="yes" xml:space="preserve">
          <source>func (r *MemProfileRecord) Stack() []uintptr</source>
          <target state="translated">func (r *MemProfileRecord)Stack()[]uintptr</target>
        </trans-unit>
        <trans-unit id="ed38ced883e808f290bd08baccff40f04a1305a4" translate="yes" xml:space="preserve">
          <source>func (r *PipeReader) Close() error</source>
          <target state="translated">func (r *PipeReader)Close()error</target>
        </trans-unit>
        <trans-unit id="b5fb74dbe56bc4aa636698225233986c16749285" translate="yes" xml:space="preserve">
          <source>func (r *PipeReader) CloseWithError(err error) error</source>
          <target state="translated">func (r *PipeReader)CloseWithError(err error)error</target>
        </trans-unit>
        <trans-unit id="098dc64626ed1e95470945cc3dd920432a398a2c" translate="yes" xml:space="preserve">
          <source>func (r *PipeReader) Read(data []byte) (n int, err error)</source>
          <target state="translated">func (r *PipeReader)Read(data []byte)(n int,err error)</target>
        </trans-unit>
        <trans-unit id="2ba76b87524c18fb60646c1f9247c6ae22ccfcb7" translate="yes" xml:space="preserve">
          <source>func (r *PtraceRegs) PC() uint64</source>
          <target state="translated">func (r *PtraceRegs)PC()uint64</target>
        </trans-unit>
        <trans-unit id="27c1320f227b78761b7ab2fc45fcc1bd277ef1b1" translate="yes" xml:space="preserve">
          <source>func (r *PtraceRegs) SetPC(pc uint64)</source>
          <target state="translated">func (r *PtraceRegs)SetPC(pc uint64)</target>
        </trans-unit>
        <trans-unit id="e2c5eb814ff72c0f6b8d221febe2a237e9305a40" translate="yes" xml:space="preserve">
          <source>func (r *Rand) ExpFloat64() float64</source>
          <target state="translated">func (r *Rand)ExpFloat64()float64</target>
        </trans-unit>
        <trans-unit id="24671175fc3ba363c5e59337111e9c273db8a615" translate="yes" xml:space="preserve">
          <source>func (r *Rand) Float32() float32</source>
          <target state="translated">func (r *Rand)Float32()float32</target>
        </trans-unit>
        <trans-unit id="41ed1ef7a3779330befc4100fbca14d8ad37370e" translate="yes" xml:space="preserve">
          <source>func (r *Rand) Float64() float64</source>
          <target state="translated">func (r *Rand)Float64()float64</target>
        </trans-unit>
        <trans-unit id="44c4a20744ae6c33ceecabd0a77709ac20ead730" translate="yes" xml:space="preserve">
          <source>func (r *Rand) Int() int</source>
          <target state="translated">func (r *Rand)Int()int</target>
        </trans-unit>
        <trans-unit id="eca5a97b1e32d245597faf863a2c70afdcadcb46" translate="yes" xml:space="preserve">
          <source>func (r *Rand) Int31() int32</source>
          <target state="translated">func (r *Rand)Int31()int32</target>
        </trans-unit>
        <trans-unit id="9a9d10a3d78d17a8f377bd3e499111cc9e9b57a4" translate="yes" xml:space="preserve">
          <source>func (r *Rand) Int31n(n int32) int32</source>
          <target state="translated">func (r *Rand)Int31n(n int32)int32</target>
        </trans-unit>
        <trans-unit id="81a68693974bccc8c8f0df537544b74c24414247" translate="yes" xml:space="preserve">
          <source>func (r *Rand) Int63() int64</source>
          <target state="translated">func (r *Rand)Int63()int64</target>
        </trans-unit>
        <trans-unit id="cf6d36fd8a113684395c7ea956ad8f1766ddc208" translate="yes" xml:space="preserve">
          <source>func (r *Rand) Int63n(n int64) int64</source>
          <target state="translated">func (r *Rand)Int63n(n int64)int64</target>
        </trans-unit>
        <trans-unit id="f961236d1dfab4898a250b8093b7ba4b6fca3efd" translate="yes" xml:space="preserve">
          <source>func (r *Rand) Intn(n int) int</source>
          <target state="translated">func (r *Rand)Intn(n int)int</target>
        </trans-unit>
        <trans-unit id="12d1f4ce6ea5ae713b49ce1f92870946e00a3c64" translate="yes" xml:space="preserve">
          <source>func (r *Rand) NormFloat64() float64</source>
          <target state="translated">func (r *Rand)NormFloat64()float64</target>
        </trans-unit>
        <trans-unit id="af38ebcf0f86cf1850fac8d0bc2e98f30f4219d9" translate="yes" xml:space="preserve">
          <source>func (r *Rand) Perm(n int) []int</source>
          <target state="translated">func (r *Rand)Perm(n int)[]int</target>
        </trans-unit>
        <trans-unit id="afc3ef0a77ffa1edb3eb95f14e14dfe0d67bfd44" translate="yes" xml:space="preserve">
          <source>func (r *Rand) Read(p []byte) (n int, err error)</source>
          <target state="translated">func (r *Rand)Read(p []byte)(n int,err error)</target>
        </trans-unit>
        <trans-unit id="63b295210c733b7faf1e6066b0761262cb506d85" translate="yes" xml:space="preserve">
          <source>func (r *Rand) Seed(seed int64)</source>
          <target state="translated">func (r *Rand)Seed(seed int64)</target>
        </trans-unit>
        <trans-unit id="fc08958ee3284098343b5bee6c8c2426141cf098" translate="yes" xml:space="preserve">
          <source>func (r *Rand) Shuffle(n int, swap func(i, j int))</source>
          <target state="translated">func(r *Rand)Shuffle(n int,swap func(i,j int))</target>
        </trans-unit>
        <trans-unit id="0534a8c617193c4f7897c2cf459ddc73a2119ac5" translate="yes" xml:space="preserve">
          <source>func (r *Rand) Uint32() uint32</source>
          <target state="translated">func (r *edge)Uint32()uint32</target>
        </trans-unit>
        <trans-unit id="3d31e7a213038d17ab387557b3db71194610cf8f" translate="yes" xml:space="preserve">
          <source>func (r *Rand) Uint64() uint64</source>
          <target state="translated">func (r *Rand)Uint64()uint64</target>
        </trans-unit>
        <trans-unit id="6363535ea5a8867254f76c9293e158d18b741990" translate="yes" xml:space="preserve">
          <source>func (r *RangeNode) Copy() Node</source>
          <target state="translated">func(r *RangeNode)Copy()Node</target>
        </trans-unit>
        <trans-unit id="3764b1ba00d22c08659887e3cacedf122697fbac" translate="yes" xml:space="preserve">
          <source>func (r *Reader) AddressSize() int</source>
          <target state="translated">func (r *Reader)AddressSize()int</target>
        </trans-unit>
        <trans-unit id="918063f51ab157058ce64813c8b010cbacf8e3a7" translate="yes" xml:space="preserve">
          <source>func (r *Reader) ByteOrder() binary.ByteOrder</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0a018513f0868368d4cb8c6eadefd5bf05e23751" translate="yes" xml:space="preserve">
          <source>func (r *Reader) DotReader() io.Reader</source>
          <target state="translated">func (r *Reader)DotReader()io.Reader</target>
        </trans-unit>
        <trans-unit id="5668f382c4731a8396a406f1358ac1c14b574c55" translate="yes" xml:space="preserve">
          <source>func (r *Reader) Len() int</source>
          <target state="translated">func (r *Reader)Len()int</target>
        </trans-unit>
        <trans-unit id="36a898d257f0d40f93a722bbb65ad3995e23634a" translate="yes" xml:space="preserve">
          <source>func (r *Reader) Next() (*Entry, error)</source>
          <target state="translated">func (r *Reader)Next()(*Entry,error)</target>
        </trans-unit>
        <trans-unit id="ceeca4100ac1a8eb5a267fe640926e6b13b8dee2" translate="yes" xml:space="preserve">
          <source>func (r *Reader) NextPart() (*Part, error)</source>
          <target state="translated">func (r *Reader)NextPart()(*Part,error)</target>
        </trans-unit>
        <trans-unit id="224f27e2354cd48d9df0e1b42dd0302c9c290fc4" translate="yes" xml:space="preserve">
          <source>func (r *Reader) NextRawPart() (*Part, error)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="652e99b5bd2f63c3501f8ccbfd9e1d5d0dff7ec0" translate="yes" xml:space="preserve">
          <source>func (r *Reader) Read() (record []string, err error)</source>
          <target state="translated">func (r *Reader)Read()(record []string,err error)</target>
        </trans-unit>
        <trans-unit id="727e6d9055e7295d858fd52744e2753b8cb1c160" translate="yes" xml:space="preserve">
          <source>func (r *Reader) Read(b []byte) (n int, err error)</source>
          <target state="translated">func (r *Reader)Read(b []byte)(n int,err error)</target>
        </trans-unit>
        <trans-unit id="d946d78c272fc791e727078af742065d909b55ea" translate="yes" xml:space="preserve">
          <source>func (r *Reader) Read(p []byte) (n int, err error)</source>
          <target state="translated">func (r *Reader)Read(p []byte)(n int,err error)</target>
        </trans-unit>
        <trans-unit id="e92c00d93df2f5d36eea55f296c372ce0f520965" translate="yes" xml:space="preserve">
          <source>func (r *Reader) ReadAll() (records [][]string, err error)</source>
          <target state="translated">func (r *Reader)ReadAll()(records [][]string,err error)</target>
        </trans-unit>
        <trans-unit id="509be06c97e4c9e0fe35c27aaffe823b388ff900" translate="yes" xml:space="preserve">
          <source>func (r *Reader) ReadAt(b []byte, off int64) (n int, err error)</source>
          <target state="translated">func (r *Reader)ReadAt(b []byte,off int64)(n int,err error)</target>
        </trans-unit>
        <trans-unit id="65ee7f915fe9a344c25c6fb3a5dca5cb230af10c" translate="yes" xml:space="preserve">
          <source>func (r *Reader) ReadByte() (byte, error)</source>
          <target state="translated">func (r *Reader)ReadByte()(byte,error)</target>
        </trans-unit>
        <trans-unit id="496ca8740417398e96391672e76b6159b1cf0c19" translate="yes" xml:space="preserve">
          <source>func (r *Reader) ReadCodeLine(expectCode int) (code int, message string, err error)</source>
          <target state="translated">func (r *Reader)ReadCodeLine(expectCode int)(code int,message string,err error)</target>
        </trans-unit>
        <trans-unit id="c373ec4c4ed6254d52ba2da8c4e4494774122130" translate="yes" xml:space="preserve">
          <source>func (r *Reader) ReadContinuedLine() (string, error)</source>
          <target state="translated">func (r *Reader)ReadContinuedLine()(cadena,error)</target>
        </trans-unit>
        <trans-unit id="b3246b658f4b9d932979498508260254ac5d67ec" translate="yes" xml:space="preserve">
          <source>func (r *Reader) ReadContinuedLineBytes() ([]byte, error)</source>
          <target state="translated">func (r *Reader)ReadContinuedLineBytes()([]byte,error)</target>
        </trans-unit>
        <trans-unit id="afeae12c23ac23f041a7f3c8deee5bede0eca703" translate="yes" xml:space="preserve">
          <source>func (r *Reader) ReadDotBytes() ([]byte, error)</source>
          <target state="translated">func (r *Reader)ReadDotBytes()([]byte,error)</target>
        </trans-unit>
        <trans-unit id="223cf97e9b6f687806dbf5c6983bd4c62c9ad949" translate="yes" xml:space="preserve">
          <source>func (r *Reader) ReadDotLines() ([]string, error)</source>
          <target state="translated">func (r *Reader)ReadDotLines()([]string,error)</target>
        </trans-unit>
        <trans-unit id="7d1d2a2bf7340eaadb2a2ca5b31d805c0495dc71" translate="yes" xml:space="preserve">
          <source>func (r *Reader) ReadForm(maxMemory int64) (*Form, error)</source>
          <target state="translated">func (r *Reader)ReadForm(maxMemory int64)(*Form,error)</target>
        </trans-unit>
        <trans-unit id="8d3cc3434841a72e6f9670c5c2859bede19dd1a6" translate="yes" xml:space="preserve">
          <source>func (r *Reader) ReadLine() (string, error)</source>
          <target state="translated">func (r *Reader)ReadLine()(cadena,error)</target>
        </trans-unit>
        <trans-unit id="9aaa318b0d896d7715e5359f4f2398155c2ec28a" translate="yes" xml:space="preserve">
          <source>func (r *Reader) ReadLineBytes() ([]byte, error)</source>
          <target state="translated">func (r *Reader)ReadLineBytes()([]byte,error)</target>
        </trans-unit>
        <trans-unit id="c6d2774bec2ead90a34aa91bb42b291b9bc01918" translate="yes" xml:space="preserve">
          <source>func (r *Reader) ReadMIMEHeader() (MIMEHeader, error)</source>
          <target state="translated">func (r *Reader)ReadMIMEHeader()(MIMEHeader,error)</target>
        </trans-unit>
        <trans-unit id="85ea575c0598b276bdf73575398b39813ea11440" translate="yes" xml:space="preserve">
          <source>func (r *Reader) ReadResponse(expectCode int) (code int, message string, err error)</source>
          <target state="translated">func (r *Reader)ReadResponse(expectCode int)(code int,message string,err error)</target>
        </trans-unit>
        <trans-unit id="f80b99a9927351e1bffaebc2fa14a3598c973e31" translate="yes" xml:space="preserve">
          <source>func (r *Reader) ReadRune() (ch rune, size int, err error)</source>
          <target state="translated">func (r *Reader)ReadRune()(ch rune,size int,err error)</target>
        </trans-unit>
        <trans-unit id="d78bec68fb0a88885e0cff3390f2eea89a67eec3" translate="yes" xml:space="preserve">
          <source>func (r *Reader) Reset(b []byte)</source>
          <target state="translated">func (r *Lector)Reset(b []byte)</target>
        </trans-unit>
        <trans-unit id="fab5757cd0e2a5b71a267095cc74221e381a897a" translate="yes" xml:space="preserve">
          <source>func (r *Reader) Reset(s string)</source>
          <target state="translated">func (r *Reader)Reset(s string)</target>
        </trans-unit>
        <trans-unit id="8274e8639564d2abe7a7681d4bce2f683341411b" translate="yes" xml:space="preserve">
          <source>func (r *Reader) Seek(off Offset)</source>
          <target state="translated">func (r *Reader)Seek(offset)</target>
        </trans-unit>
        <trans-unit id="0d007277402d3bcf2123f807230656fe772886a9" translate="yes" xml:space="preserve">
          <source>func (r *Reader) Seek(offset int64, whence int) (int64, error)</source>
          <target state="translated">func (r *Reader)Seek(offset int64,whence int)(int64,error)</target>
        </trans-unit>
        <trans-unit id="52f00c156f65bdbb5c1ae827b8b30ebbbdab79bc" translate="yes" xml:space="preserve">
          <source>func (r *Reader) SeekPC(pc uint64) (*Entry, error)</source>
          <target state="translated">func (r *Lector)SeekPC(pc uint64)(*Entrada,error)</target>
        </trans-unit>
        <trans-unit id="cee09231eb2e1f8348b40dfad13698887f459d9a" translate="yes" xml:space="preserve">
          <source>func (r *Reader) Size() int64</source>
          <target state="translated">func (r *Reader)Size()int64</target>
        </trans-unit>
        <trans-unit id="e66d16d7241d9cf81c9e6f5e73e66b1f2318fa70" translate="yes" xml:space="preserve">
          <source>func (r *Reader) SkipChildren()</source>
          <target state="translated">func (r *Lector)SkipChildren()</target>
        </trans-unit>
        <trans-unit id="842c4bc099a34c978addbcc11a4897df19c5700c" translate="yes" xml:space="preserve">
          <source>func (r *Reader) UnreadByte() error</source>
          <target state="translated">func (r *Reader)UnreadByte()error</target>
        </trans-unit>
        <trans-unit id="867d47c4809cd422548c2d9e18552f67a79ae233" translate="yes" xml:space="preserve">
          <source>func (r *Reader) UnreadRune() error</source>
          <target state="translated">func (r *Reader)UnreadRune()error</target>
        </trans-unit>
        <trans-unit id="a0e7a8799c418dfac8ab12d69e7c2a422e244810" translate="yes" xml:space="preserve">
          <source>func (r *Reader) WriteTo(w io.Writer) (n int64, err error)</source>
          <target state="translated">func (r *Reader)WriteTo(w io.Writer)(n int64,err error)</target>
        </trans-unit>
        <trans-unit id="7795a821531a5291d216297aaaec9dac8d04501b" translate="yes" xml:space="preserve">
          <source>func (r *Region) End()</source>
          <target state="translated">func (r *Región)End()</target>
        </trans-unit>
        <trans-unit id="fdfdc2000ddd91c172c48d0c97225effd3030b21" translate="yes" xml:space="preserve">
          <source>func (r *Replacer) Replace(s string) string</source>
          <target state="translated">func (r *Reemplazador)Reemplaza(n)la(s)cuerda(s)</target>
        </trans-unit>
        <trans-unit id="435971d075ada74aeac264c0033fab6e5141ef02" translate="yes" xml:space="preserve">
          <source>func (r *Replacer) WriteString(w io.Writer, s string) (n int, err error)</source>
          <target state="translated">func (r *Replace)WriteString(w io.Writer,s string)(n int,err error)</target>
        </trans-unit>
        <trans-unit id="e103fdfd626ff9131619e34361113028408908f1" translate="yes" xml:space="preserve">
          <source>func (r *Request) AddCookie(c *Cookie)</source>
          <target state="translated">func (r *Solicitud)AddCookie(c *Cookie)</target>
        </trans-unit>
        <trans-unit id="a01dd3c7b49d36cb8d292794c675cb4909771597" translate="yes" xml:space="preserve">
          <source>func (r *Request) BasicAuth() (username, password string, ok bool)</source>
          <target state="translated">func (r *Request)BasicAuth()(nombre de usuario,cadena de contraseña,ok bool)</target>
        </trans-unit>
        <trans-unit id="bc7404dcee4ebf6910d7202922dbf43340702e83" translate="yes" xml:space="preserve">
          <source>func (r *Request) Clone(ctx context.Context) *Request</source>
          <target state="translated">func (r *Solicitud)Clon(ctx context.Context)*Solicitud</target>
        </trans-unit>
        <trans-unit id="ec83bfad0a9bc7b50ab8c13734943a33fe1faea8" translate="yes" xml:space="preserve">
          <source>func (r *Request) Context() context.Context</source>
          <target state="translated">func (r *Solicitud)Context()context.Contexto</target>
        </trans-unit>
        <trans-unit id="36a59bb69f5802a87f27a1395a0af064ab7bb681" translate="yes" xml:space="preserve">
          <source>func (r *Request) Cookie(name string) (*Cookie, error)</source>
          <target state="translated">func (r *Request)Cookie(name string)(*Cookie,error)</target>
        </trans-unit>
        <trans-unit id="3e936f9ac87e2d537f74514e9297c251d0902d6d" translate="yes" xml:space="preserve">
          <source>func (r *Request) Cookies() []*Cookie</source>
          <target state="translated">func (r *Request)Cookies()[]*Cookie</target>
        </trans-unit>
        <trans-unit id="b6c8f55feb6c5c2acc3f2ed27f7bc6eccc00d715" translate="yes" xml:space="preserve">
          <source>func (r *Request) FormFile(key string) (multipart.File, *multipart.FileHeader, error)</source>
          <target state="translated">func (r *Request)FormFile(key string)(multipart.File,*multipart.FileHeader,error)</target>
        </trans-unit>
        <trans-unit id="4206f7619f0f9e3c1dffc306fca380b553b2c4ee" translate="yes" xml:space="preserve">
          <source>func (r *Request) FormValue(key string) string</source>
          <target state="translated">func (r *Request)FormValue(key string)string</target>
        </trans-unit>
        <trans-unit id="9c51045c5315d41409526b5060d0838da3a9dd58" translate="yes" xml:space="preserve">
          <source>func (r *Request) MultipartReader() (*multipart.Reader, error)</source>
          <target state="translated">func (r *Request)MultipartReader()(*multipart.Reader,error)</target>
        </trans-unit>
        <trans-unit id="a3249e5626217caeed3c7c18d2c4e0c5ab4d4f67" translate="yes" xml:space="preserve">
          <source>func (r *Request) ParseForm() error</source>
          <target state="translated">func (r *Request)ParseForm()error</target>
        </trans-unit>
        <trans-unit id="dfdc54f78e282731a27ead3b728784dfe6395cb0" translate="yes" xml:space="preserve">
          <source>func (r *Request) ParseMultipartForm(maxMemory int64) error</source>
          <target state="translated">func (r *Request)ParseMultipartForm(maxMemory int64)error</target>
        </trans-unit>
        <trans-unit id="9fae37f6e0152592beb7a8a285befadce8090b61" translate="yes" xml:space="preserve">
          <source>func (r *Request) PostFormValue(key string) string</source>
          <target state="translated">func (r *Request)PostFormValue(key string)string</target>
        </trans-unit>
        <trans-unit id="ce84dd7d3326490fff5ee5eb654537b76faf0ecd" translate="yes" xml:space="preserve">
          <source>func (r *Request) ProtoAtLeast(major, minor int) bool</source>
          <target state="translated">func (r *Request)ProtoAtLeast(major,minor int)bool</target>
        </trans-unit>
        <trans-unit id="66e9d8d7f4de9ba16d6413917a0faf9b27837c76" translate="yes" xml:space="preserve">
          <source>func (r *Request) Referer() string</source>
          <target state="translated">func (r *Request)Referer()string</target>
        </trans-unit>
        <trans-unit id="4b0420998de93a3b6cd387a2b7244d278976e4b9" translate="yes" xml:space="preserve">
          <source>func (r *Request) SetBasicAuth(username, password string)</source>
          <target state="translated">func (r *Request)SetBasicAuth(nombre de usuario,cadena de contraseña)</target>
        </trans-unit>
        <trans-unit id="67d0159de5117c07d7e17747586c76ae9c810a24" translate="yes" xml:space="preserve">
          <source>func (r *Request) UserAgent() string</source>
          <target state="translated">func (r *Request)UserAgent()string</target>
        </trans-unit>
        <trans-unit id="cbdc9a53fb255292e20951d38663d78e3b16b196" translate="yes" xml:space="preserve">
          <source>func (r *Request) WithContext(ctx context.Context) *Request</source>
          <target state="translated">func (r *Solicitud)WithContext(ctx context.Context)*Solicitud</target>
        </trans-unit>
        <trans-unit id="d1aa8e0e0575c036b2414406b989a1c4d97f65ee" translate="yes" xml:space="preserve">
          <source>func (r *Request) Write(w io.Writer) error</source>
          <target state="translated">func (r *Request)Write(w io.Writer)error</target>
        </trans-unit>
        <trans-unit id="e0b82d782cd031dd2a57cff0185c628c18f1bb0f" translate="yes" xml:space="preserve">
          <source>func (r *Request) WriteProxy(w io.Writer) error</source>
          <target state="translated">func (r *Request)WriteProxy(w io.Writer)error</target>
        </trans-unit>
        <trans-unit id="5851d7482f2f3061496001e8d229c4b87e04cd23" translate="yes" xml:space="preserve">
          <source>func (r *Resolver) LookupAddr(ctx context.Context, addr string) (names []string, err error)</source>
          <target state="translated">func (r *Resolver)LookupAddr(ctx context.Context,addr string)(nombres []string,error err)</target>
        </trans-unit>
        <trans-unit id="fcec59efca79f4ff5941389c0ae6410de7bddd71" translate="yes" xml:space="preserve">
          <source>func (r *Resolver) LookupCNAME(ctx context.Context, host string) (cname string, err error)</source>
          <target state="translated">func (r *Resolver)LookupCNAME(ctx context.Context,host string)(cname string,err error)</target>
        </trans-unit>
        <trans-unit id="e36ba0af5cd17bbe24be169c176c614d78fdbe87" translate="yes" xml:space="preserve">
          <source>func (r *Resolver) LookupHost(ctx context.Context, host string) (addrs []string, err error)</source>
          <target state="translated">func (r *Resolver)LookupHost(ctx context.Context,host string)(addrs []string,err error)</target>
        </trans-unit>
        <trans-unit id="08051ba39ece392cdbf162e477f7e5b1813d51fc" translate="yes" xml:space="preserve">
          <source>func (r *Resolver) LookupIP(ctx context.Context, network, host string) ([]IP, error)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9d497f7091803c5b96eeda5b0a90f60656b5bc7e" translate="yes" xml:space="preserve">
          <source>func (r *Resolver) LookupIPAddr(ctx context.Context, host string) ([]IPAddr, error)</source>
          <target state="translated">func (r *Resolver)LookupIPAddr(ctx context.Context,host string)([]IPAddr,error)</target>
        </trans-unit>
        <trans-unit id="c9bae2e4634d2c7956839ffc1442fe1b74f1b03e" translate="yes" xml:space="preserve">
          <source>func (r *Resolver) LookupMX(ctx context.Context, name string) ([]*MX, error)</source>
          <target state="translated">func (r *Resolver)LookupMX(ctx context.Context,name string)([]*MX,error)</target>
        </trans-unit>
        <trans-unit id="9dd2143959980b3ecdc3709867cf2a4ef06d2d0d" translate="yes" xml:space="preserve">
          <source>func (r *Resolver) LookupNS(ctx context.Context, name string) ([]*NS, error)</source>
          <target state="translated">func (r *Resolver)LookupNS(ctx context.Context,name string)([]*NS,error)</target>
        </trans-unit>
        <trans-unit id="a689061c11327fef4470ec5481bee18a81576efa" translate="yes" xml:space="preserve">
          <source>func (r *Resolver) LookupPort(ctx context.Context, network, service string) (port int, err error)</source>
          <target state="translated">func (r *Resolver)LookupPort(ctx context.Contexto,red,cadena de servicio)(port int,err error)</target>
        </trans-unit>
        <trans-unit id="a7ae9460fe28289b8197d5ba3d121cf25e39db01" translate="yes" xml:space="preserve">
          <source>func (r *Resolver) LookupSRV(ctx context.Context, service, proto, name string) (cname string, addrs []*SRV, err error)</source>
          <target state="translated">func (r *Resolver)LookupSRV(ctx context.Contexto,servicio,proto,cadena de nombre)(cadena de nombre,addrs []*SRV,error err)</target>
        </trans-unit>
        <trans-unit id="526b8c1b9f5c3fadd92c22c2df0b5b19b5774db7" translate="yes" xml:space="preserve">
          <source>func (r *Resolver) LookupTXT(ctx context.Context, name string) ([]string, error)</source>
          <target state="translated">func (r *Resolver)LookupTXT(ctx context.Context,name string)([]string,error)</target>
        </trans-unit>
        <trans-unit id="b8a1a220b711523bd77065efe6d62de3b4d6b366" translate="yes" xml:space="preserve">
          <source>func (r *Response) Cookies() []*Cookie</source>
          <target state="translated">func (r *Respuesta)Cookies()[]*Cookie</target>
        </trans-unit>
        <trans-unit id="82adcb5be95207074691a13eb8fac4041b7e99c7" translate="yes" xml:space="preserve">
          <source>func (r *Response) Location() (*url.URL, error)</source>
          <target state="translated">func (r *Responder)Location()(*url.URL,error)</target>
        </trans-unit>
        <trans-unit id="655ba224bb0ad85d47b28d9206b10c0e3657f653" translate="yes" xml:space="preserve">
          <source>func (r *Response) ProtoAtLeast(major, minor int) bool</source>
          <target state="translated">func (r *Responder)ProtoAtLeast(major,minor int)bool</target>
        </trans-unit>
        <trans-unit id="37accfc156a923864be62cb2977c95266c23eef3" translate="yes" xml:space="preserve">
          <source>func (r *Response) Write(w io.Writer) error</source>
          <target state="translated">func (r *Responder)Write(w io.Writer)error</target>
        </trans-unit>
        <trans-unit id="583d53f9e6cfbfac98d92bb9b13fbf6d8aa16666" translate="yes" xml:space="preserve">
          <source>func (r *Ring) Do(f func(interface{}))</source>
          <target state="translated">func (r *Ring)Do(f func(interface{}))</target>
        </trans-unit>
        <trans-unit id="95314632b19809dd3b729d737c0e1a6b70d3f004" translate="yes" xml:space="preserve">
          <source>func (r *Ring) Len() int</source>
          <target state="translated">func (r *Ring)Len()int</target>
        </trans-unit>
        <trans-unit id="c245dc98727a05419d53a5e6e4c6d6b85884771d" translate="yes" xml:space="preserve">
          <source>func (r *Ring) Link(s *Ring) *Ring</source>
          <target state="translated">func (r *Ring)Link(s *Ring)*Ring</target>
        </trans-unit>
        <trans-unit id="544f87f62cff0ca681f90470002f6a72ae41a087" translate="yes" xml:space="preserve">
          <source>func (r *Ring) Move(n int) *Ring</source>
          <target state="translated">func (r *Ring)Move(n int)*Ring</target>
        </trans-unit>
        <trans-unit id="4d61e711a9ba4233a28be886587d740b46b17fe7" translate="yes" xml:space="preserve">
          <source>func (r *Ring) Next() *Ring</source>
          <target state="translated">func (r *Ring)Next()*Ring</target>
        </trans-unit>
        <trans-unit id="6b3a5f1e871672cdfd24087c1d9ac65c9e07703e" translate="yes" xml:space="preserve">
          <source>func (r *Ring) Prev() *Ring</source>
          <target state="translated">func (r *Ring)Prev()*Ring</target>
        </trans-unit>
        <trans-unit id="06807ba2e5f91982c9625cce46cfcb8e28c6c5cc" translate="yes" xml:space="preserve">
          <source>func (r *Ring) Unlink(n int) *Ring</source>
          <target state="translated">func (r *Ring)Unlink(n int)*Ring</target>
        </trans-unit>
        <trans-unit id="7aa966529b40d30c2d7901ef9bbebbf75eb8a354" translate="yes" xml:space="preserve">
          <source>func (r *Row) Err() error</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="de1adb7aa24aa4b4c4aa71205dc12cece71bf6aa" translate="yes" xml:space="preserve">
          <source>func (r *Row) Scan(dest ...interface{}) error</source>
          <target state="translated">func (r *Row)Scan(dest ...interface{})error</target>
        </trans-unit>
        <trans-unit id="2375c53448896bc5ea9d337da9da16be960b6129" translate="yes" xml:space="preserve">
          <source>func (r *StackRecord) Stack() []uintptr</source>
          <target state="translated">func (r *StackRecord)Stack()[]uintptr</target>
        </trans-unit>
        <trans-unit id="dbe6233faaa458ccdcdaa1af596ad99e82681974" translate="yes" xml:space="preserve">
          <source>func (r BenchmarkResult) AllocedBytesPerOp() int64</source>
          <target state="translated">func (r BenchmarkResult)AllocedBytesPerOp()int64</target>
        </trans-unit>
        <trans-unit id="94e8a6b41b4f6e2890d4b9386331d29f9718e265" translate="yes" xml:space="preserve">
          <source>func (r BenchmarkResult) AllocsPerOp() int64</source>
          <target state="translated">func (r BenchmarkResult)AllocsPerOp()int64</target>
        </trans-unit>
        <trans-unit id="8fe38fe7a841d7a11f8d07431acbea228e75965a" translate="yes" xml:space="preserve">
          <source>func (r BenchmarkResult) MemString() string</source>
          <target state="translated">func (r BenchmarkResult)MemString()string</target>
        </trans-unit>
        <trans-unit id="de891d0f8668c91c2bda2cad1d9c9d982a510a72" translate="yes" xml:space="preserve">
          <source>func (r BenchmarkResult) NsPerOp() int64</source>
          <target state="translated">func (r BenchmarkResult)NsPerOp()int64</target>
        </trans-unit>
        <trans-unit id="e18de110eb2d83728a5798d10fd3c7474e0cdd24" translate="yes" xml:space="preserve">
          <source>func (r BenchmarkResult) String() string</source>
          <target state="translated">func (r BenchmarkResult)String()string</target>
        </trans-unit>
        <trans-unit id="e6f0c2e191626f8df314d82e406d378546623084" translate="yes" xml:space="preserve">
          <source>func (r RDNSequence) String() string</source>
          <target state="translated">func (r RDNSequence)String()string</target>
        </trans-unit>
        <trans-unit id="428f83404a470a44b8d53d81f7abc3008a0def80" translate="yes" xml:space="preserve">
          <source>func (r Rectangle) Add(p Point) Rectangle</source>
          <target state="translated">func (r Rectángulo)Add(p Punto)Rectángulo</target>
        </trans-unit>
        <trans-unit id="25d4fe9b26e8b66124a5ba1fa4cbf2ac97665563" translate="yes" xml:space="preserve">
          <source>func (r Rectangle) At(x, y int) color.Color</source>
          <target state="translated">func (r Rectángulo)At(x,y int)color.Color</target>
        </trans-unit>
        <trans-unit id="8fcea03830ddd8d847faeda68cd09548a0d7100d" translate="yes" xml:space="preserve">
          <source>func (r Rectangle) Bounds() Rectangle</source>
          <target state="translated">func (r Rectángulo)Límites()Rectángulo</target>
        </trans-unit>
        <trans-unit id="e4cd4a40c81483c20977f38973b973c292c74bbe" translate="yes" xml:space="preserve">
          <source>func (r Rectangle) Canon() Rectangle</source>
          <target state="translated">func (r Rectángulo)Canon()Rectángulo</target>
        </trans-unit>
        <trans-unit id="91d6123df4757a639c3c4eed8975695828e3e6fe" translate="yes" xml:space="preserve">
          <source>func (r Rectangle) ColorModel() color.Model</source>
          <target state="translated">func (r Rectángulo)ColorModelo()color.Modelo</target>
        </trans-unit>
        <trans-unit id="c129c35edb4792cd5f7e1c2c007ee1b31305f820" translate="yes" xml:space="preserve">
          <source>func (r Rectangle) Dx() int</source>
          <target state="translated">func (r Rectángulo)Dx()int</target>
        </trans-unit>
        <trans-unit id="232e6d1776e30abd6361c9fad5393aec70c9503b" translate="yes" xml:space="preserve">
          <source>func (r Rectangle) Dy() int</source>
          <target state="translated">func (r Rectángulo)Dy()int</target>
        </trans-unit>
        <trans-unit id="dc7f1c2230f6df5105c558a9a70b0f974500a73d" translate="yes" xml:space="preserve">
          <source>func (r Rectangle) Empty() bool</source>
          <target state="translated">func (r Rectángulo)Empty()bool</target>
        </trans-unit>
        <trans-unit id="6fce375b55bf012cbf0923bc6176d6c96ec94f55" translate="yes" xml:space="preserve">
          <source>func (r Rectangle) Eq(s Rectangle) bool</source>
          <target state="translated">func (r Rectángulo)Eq(s Rectángulo)bool</target>
        </trans-unit>
        <trans-unit id="6b364864a57f9f5cd7288ec24e8fc10e7ae6747d" translate="yes" xml:space="preserve">
          <source>func (r Rectangle) In(s Rectangle) bool</source>
          <target state="translated">func (r Rectángulo)In(s Rectángulo)bool</target>
        </trans-unit>
        <trans-unit id="adc40514f7fa2a6912377b07266d6e32a329f38e" translate="yes" xml:space="preserve">
          <source>func (r Rectangle) Inset(n int) Rectangle</source>
          <target state="translated">func (r Rectángulo)Inset(n int)Rectángulo</target>
        </trans-unit>
        <trans-unit id="2da4118bebd3969f8c6f25bf69176deeeed837d0" translate="yes" xml:space="preserve">
          <source>func (r Rectangle) Intersect(s Rectangle) Rectangle</source>
          <target state="translated">func (r Rectángulo)Intersect (s Rectángulo)Rectángulo</target>
        </trans-unit>
        <trans-unit id="0ab7946f480e034d3af369d4c74cf77483f9ec60" translate="yes" xml:space="preserve">
          <source>func (r Rectangle) Overlaps(s Rectangle) bool</source>
          <target state="translated">func (r Rectángulo)Solapamientos(s Rectángulo)bool</target>
        </trans-unit>
        <trans-unit id="ca229c273e368595cb4954227c9eccacce90c0a0" translate="yes" xml:space="preserve">
          <source>func (r Rectangle) Size() Point</source>
          <target state="translated">func (r Rectángulo)Tamaño()Punto</target>
        </trans-unit>
        <trans-unit id="48ac7eb41fe7e9bc83ee708a0ec2e19b4141aade" translate="yes" xml:space="preserve">
          <source>func (r Rectangle) String() string</source>
          <target state="translated">func (r Rectángulo)String()string</target>
        </trans-unit>
        <trans-unit id="a16b2bc1cbb3e1424f5761fc81b477026881eb40" translate="yes" xml:space="preserve">
          <source>func (r Rectangle) Sub(p Point) Rectangle</source>
          <target state="translated">func (r Rectángulo)Sub(p Punto)Rectángulo</target>
        </trans-unit>
        <trans-unit id="e29ea1ad1a069d70ece88826a09196fd5e3b31a6" translate="yes" xml:space="preserve">
          <source>func (r Rectangle) Union(s Rectangle) Rectangle</source>
          <target state="translated">func (r Rectángulo)Unión(s Rectángulo)Rectángulo</target>
        </trans-unit>
        <trans-unit id="be6888c3b8d1e6217e26b147cb98ffcee27db2e8" translate="yes" xml:space="preserve">
          <source>func (r RelocTypeARM) GoString() string</source>
          <target state="translated">func (r RelocTypeARM)GoString()string</target>
        </trans-unit>
        <trans-unit id="7710a331149cb0c251b94b2e17ec7a66043d9204" translate="yes" xml:space="preserve">
          <source>func (r RelocTypeARM64) GoString() string</source>
          <target state="translated">func (r RelocTypeARM64)GoString()string</target>
        </trans-unit>
        <trans-unit id="cbadacae3e72e55ee996741ca483224b5d0f2533" translate="yes" xml:space="preserve">
          <source>func (r RelocTypeGeneric) GoString() string</source>
          <target state="translated">func (r RelocTypeGeneric)GoString()string</target>
        </trans-unit>
        <trans-unit id="a2eaeac7ea5923e03f4957436502d036eecf04bf" translate="yes" xml:space="preserve">
          <source>func (r RelocTypeX86_64) GoString() string</source>
          <target state="translated">func (r RelocTypeX86_64)GoString()string</target>
        </trans-unit>
        <trans-unit id="42b3e06b0d2d72bf3793f31c1947fcbfd74efe9b" translate="yes" xml:space="preserve">
          <source>func (r StreamReader) Read(dst []byte) (n int, err error)</source>
          <target state="translated">func (r StreamReader)Read(dst []byte)(n int,err error)</target>
        </trans-unit>
        <trans-unit id="ca83a74bdc04de3837577c591942f4dd4d4ec695" translate="yes" xml:space="preserve">
          <source>func (rc *ReadCloser) Close() error</source>
          <target state="translated">func (rc *ReadCloser)Close()error</target>
        </trans-unit>
        <trans-unit id="b434ac52182e97a227eaf6c60de302b0715582e8" translate="yes" xml:space="preserve">
          <source>func (re *Regexp) CapNames() []string</source>
          <target state="translated">func (re *Regexp)CapNames()[]string</target>
        </trans-unit>
        <trans-unit id="ff01c34733b24c66cbfc7de97628377a2d475669" translate="yes" xml:space="preserve">
          <source>func (re *Regexp) Copy() *Regexp</source>
          <target state="translated">func (re *Regexp)Copy()*Regexp</target>
        </trans-unit>
        <trans-unit id="c87dfabff7abe599c888d6101b8343c23fb30213" translate="yes" xml:space="preserve">
          <source>func (re *Regexp) Expand(dst []byte, template []byte, src []byte, match []int) []byte</source>
          <target state="translated">func (re *Regexp)Expandir(dst []byte,plantilla []byte,src []byte,match []int)[]byte</target>
        </trans-unit>
        <trans-unit id="d0e247fbc886ad4d90dd0ff8b289da0ab52a7bb1" translate="yes" xml:space="preserve">
          <source>func (re *Regexp) ExpandString(dst []byte, template string, src string, match []int) []byte</source>
          <target state="translated">func (re *Regexp)ExpandString(dst []byte,template string,src string,match []int)[]byte</target>
        </trans-unit>
        <trans-unit id="9d88498e19a6c405dc6ddfa1cc73e0c9cf8c8f26" translate="yes" xml:space="preserve">
          <source>func (re *Regexp) Find(b []byte) []byte</source>
          <target state="translated">func (re *Regexp)Find(b []byte)[]byte</target>
        </trans-unit>
        <trans-unit id="ddcb086063cd2601a60118e85eaf18b7e71e54f3" translate="yes" xml:space="preserve">
          <source>func (re *Regexp) FindAll(b []byte, n int) [][]byte</source>
          <target state="translated">func (re *Regexp)FindAll(b []byte,n int)[][]byte</target>
        </trans-unit>
        <trans-unit id="df131b72c47a2af95c645700424aa018d18c36ba" translate="yes" xml:space="preserve">
          <source>func (re *Regexp) FindAllIndex(b []byte, n int) [][]int</source>
          <target state="translated">func (re *Regexp)FindAllIndex(b []byte,n int)[][]int</target>
        </trans-unit>
        <trans-unit id="de317c277a6eb504516fc1fb9b29a394719b9169" translate="yes" xml:space="preserve">
          <source>func (re *Regexp) FindAllString(s string, n int) []string</source>
          <target state="translated">func (re *Regexp)FindAllString(s string,n int)[]string</target>
        </trans-unit>
        <trans-unit id="680eb6d647de355f1f3746205b1bd2bf555db819" translate="yes" xml:space="preserve">
          <source>func (re *Regexp) FindAllStringIndex(s string, n int) [][]int</source>
          <target state="translated">func (re *Regexp)FindAllStringIndex(s string,n int)[][]int</target>
        </trans-unit>
        <trans-unit id="2ff49d23d1ee7687d518657aa012729c8388c169" translate="yes" xml:space="preserve">
          <source>func (re *Regexp) FindAllStringSubmatch(s string, n int) [][]string</source>
          <target state="translated">func (re *Regexp)FindAllStringSubmatch(s string,n int)[][]string</target>
        </trans-unit>
        <trans-unit id="3f5518bcae99cb394045f7ff81d31ff6666cdbdc" translate="yes" xml:space="preserve">
          <source>func (re *Regexp) FindAllStringSubmatchIndex(s string, n int) [][]int</source>
          <target state="translated">func (re *Regexp)FindAllStringSubmatchIndex(s string,n int)[][]int</target>
        </trans-unit>
        <trans-unit id="d7df92255718b9466f4c2018552cefca89f644f9" translate="yes" xml:space="preserve">
          <source>func (re *Regexp) FindAllSubmatch(b []byte, n int) [][][]byte</source>
          <target state="translated">func (re *Regexp)FindAllSubmatch(b []byte,n int)[][][]byte</target>
        </trans-unit>
        <trans-unit id="effec2fae0274cb8c97bd4bfb3d090da289bb63b" translate="yes" xml:space="preserve">
          <source>func (re *Regexp) FindAllSubmatchIndex(b []byte, n int) [][]int</source>
          <target state="translated">func (re *Regexp)FindAllSubmatchIndex(b []byte,n int)[][]int</target>
        </trans-unit>
        <trans-unit id="33faa55868c4f3702b31ddd0d86fd957fb6bac4a" translate="yes" xml:space="preserve">
          <source>func (re *Regexp) FindIndex(b []byte) (loc []int)</source>
          <target state="translated">func (re *Regexp)FindIndex(b []byte)(loc []int)</target>
        </trans-unit>
        <trans-unit id="3cbde745c689dfdb6598a8ac6005e819205443b0" translate="yes" xml:space="preserve">
          <source>func (re *Regexp) FindReaderIndex(r io.RuneReader) (loc []int)</source>
          <target state="translated">func (re *Regexp)FindReaderIndex(r io.RuneReader)(loc []int)</target>
        </trans-unit>
        <trans-unit id="b832989d33260fa36ceb8b1b033fe5d5bfa3ed9d" translate="yes" xml:space="preserve">
          <source>func (re *Regexp) FindReaderSubmatchIndex(r io.RuneReader) []int</source>
          <target state="translated">func (re *Regexp)FindReaderSubmatchIndex(r io.RuneReader)[]int</target>
        </trans-unit>
        <trans-unit id="9d4ab47aefe0fc14238c960c4c8d08e728ba7d29" translate="yes" xml:space="preserve">
          <source>func (re *Regexp) FindString(s string) string</source>
          <target state="translated">func (re *Regexp)FindString(s string)string</target>
        </trans-unit>
        <trans-unit id="00fbf331f5266b7a5b08d23e6a043b1c6ec68a6b" translate="yes" xml:space="preserve">
          <source>func (re *Regexp) FindStringIndex(s string) (loc []int)</source>
          <target state="translated">func (re *Regexp)FindStringIndex(s string)(loc []int)</target>
        </trans-unit>
        <trans-unit id="d46aff0a9dc8a6762c18509b1d57a1f7ff2e86d4" translate="yes" xml:space="preserve">
          <source>func (re *Regexp) FindStringSubmatch(s string) []string</source>
          <target state="translated">func (re *Regexp)FindStringSubmatch(s string)[]string</target>
        </trans-unit>
        <trans-unit id="3d79a2184fb6a33a4aa9ac3c8cf2f777bb9f5613" translate="yes" xml:space="preserve">
          <source>func (re *Regexp) FindStringSubmatchIndex(s string) []int</source>
          <target state="translated">func (re *Regexp)FindStringSubmatchIndex(s string)[]int</target>
        </trans-unit>
        <trans-unit id="b9bc4f63a9a5ee9ec11fde257a6ae52bd649ec37" translate="yes" xml:space="preserve">
          <source>func (re *Regexp) FindSubmatch(b []byte) [][]byte</source>
          <target state="translated">func (re *Regexp)FindSubmatch(b []byte)[][]byte</target>
        </trans-unit>
        <trans-unit id="fbd9612619c109bdaad42dfd47e77b141a8f7b2f" translate="yes" xml:space="preserve">
          <source>func (re *Regexp) FindSubmatchIndex(b []byte) []int</source>
          <target state="translated">func (re *Regexp)FindSubmatchIndex(b []byte)[]int</target>
        </trans-unit>
        <trans-unit id="27f5d9915ecb655303f1707a619ce92864e4b9c0" translate="yes" xml:space="preserve">
          <source>func (re *Regexp) LiteralPrefix() (prefix string, complete bool)</source>
          <target state="translated">func (re *Regexp)LiteralPrefix()(prefijo cadena,bool completo)</target>
        </trans-unit>
        <trans-unit id="88e71b1b92a58316a7ad051182e89cba002c9962" translate="yes" xml:space="preserve">
          <source>func (re *Regexp) Longest()</source>
          <target state="translated">func (re *Regexp)Longest()</target>
        </trans-unit>
        <trans-unit id="ae51a87b925a8d2bca9ce30f6f25d755b066ffa7" translate="yes" xml:space="preserve">
          <source>func (re *Regexp) Match(b []byte) bool</source>
          <target state="translated">func (re *Regexp)Match(b []byte)bool</target>
        </trans-unit>
        <trans-unit id="7d6d497b29cff1404d5f1e29fa0e96f0412160e2" translate="yes" xml:space="preserve">
          <source>func (re *Regexp) MatchReader(r io.RuneReader) bool</source>
          <target state="translated">func(re *Regexp)MatchReader(r io.RuneReader)bool</target>
        </trans-unit>
        <trans-unit id="a3d6f7e4dcd4540bad4677e9d17a7124a08c4754" translate="yes" xml:space="preserve">
          <source>func (re *Regexp) MatchString(s string) bool</source>
          <target state="translated">func(re *Regexp)MatchString(s string)bool</target>
        </trans-unit>
        <trans-unit id="992771025dbff2fad07e15a2c1946eeaa8382b1e" translate="yes" xml:space="preserve">
          <source>func (re *Regexp) MaxCap() int</source>
          <target state="translated">func (re *Regexp)MaxCap()int</target>
        </trans-unit>
        <trans-unit id="78ec3bf849eac66065f2a5a60a8c308ef3c819f1" translate="yes" xml:space="preserve">
          <source>func (re *Regexp) NumSubexp() int</source>
          <target state="translated">func (re *Regexp)NumSubexp()int</target>
        </trans-unit>
        <trans-unit id="4113b68ce752bdd650fde861de3965f83f55d22a" translate="yes" xml:space="preserve">
          <source>func (re *Regexp) ReplaceAll(src, repl []byte) []byte</source>
          <target state="translated">func (re *Regexp)ReplaceAll(src,repl []byte)[]byte</target>
        </trans-unit>
        <trans-unit id="7d09a49443d5a39fd9f641c616423fe1e72c0bca" translate="yes" xml:space="preserve">
          <source>func (re *Regexp) ReplaceAllFunc(src []byte, repl func([]byte) []byte) []byte</source>
          <target state="translated">func (re *Regexp)ReemplazarAllFunc(src []byte,repl func([]byte)[]byte)[]byte</target>
        </trans-unit>
        <trans-unit id="f85f7e3e2ba31417051f3ee2f4e3948b8a426d9b" translate="yes" xml:space="preserve">
          <source>func (re *Regexp) ReplaceAllLiteral(src, repl []byte) []byte</source>
          <target state="translated">func (re *Regexp)ReplaceAllLiteral(src,repl []byte)[]byte</target>
        </trans-unit>
        <trans-unit id="1e8c816dfe5d18bc4e9c64416272fbc6739e4e42" translate="yes" xml:space="preserve">
          <source>func (re *Regexp) ReplaceAllLiteralString(src, repl string) string</source>
          <target state="translated">func (re *Regexp)Reemplaza toda la cadena de caracteres (src,repl string)</target>
        </trans-unit>
        <trans-unit id="4099ac108e0cba71410846123896978b74bef518" translate="yes" xml:space="preserve">
          <source>func (re *Regexp) ReplaceAllString(src, repl string) string</source>
          <target state="translated">func (re *Regexp)Reemplaza la cadena AllString(src,repl string)string</target>
        </trans-unit>
        <trans-unit id="f88425baaf24ae4f3cff055691090d06b9936b04" translate="yes" xml:space="preserve">
          <source>func (re *Regexp) ReplaceAllStringFunc(src string, repl func(string) string) string</source>
          <target state="translated">func (re *Regexp)ReplaceAllStringFunc(src string,repl func(string)string)string</target>
        </trans-unit>
        <trans-unit id="305788934413320356f3ac3b731739a690b3aac8" translate="yes" xml:space="preserve">
          <source>func (re *Regexp) Simplify() *Regexp</source>
          <target state="translated">func (re *Regexp)Simplificar()*Regexp</target>
        </trans-unit>
        <trans-unit id="ae56a0a528519c700fcdd38592454839f3534ba6" translate="yes" xml:space="preserve">
          <source>func (re *Regexp) Split(s string, n int) []string</source>
          <target state="translated">func (re *Regexp)Split(s string,n int)[]string</target>
        </trans-unit>
        <trans-unit id="0423a5b9f9666ba9a98d6f3143499bf06112cffa" translate="yes" xml:space="preserve">
          <source>func (re *Regexp) String() string</source>
          <target state="translated">func (re *Regexp)String()string</target>
        </trans-unit>
        <trans-unit id="058357c8f8ae5635d06edf0d80aa4406a346122c" translate="yes" xml:space="preserve">
          <source>func (re *Regexp) SubexpIndex(name string) int</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8385d115bcfd1f37ee2766e335e09aea91d1f20a" translate="yes" xml:space="preserve">
          <source>func (re *Regexp) SubexpNames() []string</source>
          <target state="translated">func (re *Regexp)SubexpNames()[]string</target>
        </trans-unit>
        <trans-unit id="de22bc2ac8a1958e62157648649b89a502b697ab" translate="yes" xml:space="preserve">
          <source>func (rs *Rows) Close() error</source>
          <target state="translated">func (rs *Rows)Close()error</target>
        </trans-unit>
        <trans-unit id="f85ccc29c8c3d88e34f08830784ae196bd725385" translate="yes" xml:space="preserve">
          <source>func (rs *Rows) ColumnTypes() ([]*ColumnType, error)</source>
          <target state="translated">func (rs *Rows)ColumnTypes()([]*ColumnType,error)</target>
        </trans-unit>
        <trans-unit id="7bd3422acb499a5f6e405d22f969f53d83409d96" translate="yes" xml:space="preserve">
          <source>func (rs *Rows) Columns() ([]string, error)</source>
          <target state="translated">func (rs *Rows)Columns()([]string,error)</target>
        </trans-unit>
        <trans-unit id="2ee0736e3d7a4d8b846d209db1c1a84e002f072e" translate="yes" xml:space="preserve">
          <source>func (rs *Rows) Err() error</source>
          <target state="translated">func (rs *Rows)Err()error</target>
        </trans-unit>
        <trans-unit id="475ff12da97d26e2b6510870d9b1fb7bd9910e7f" translate="yes" xml:space="preserve">
          <source>func (rs *Rows) Next() bool</source>
          <target state="translated">func(rs *Rows)Next()bool</target>
        </trans-unit>
        <trans-unit id="ee6edd3049fd8a023f65de731504ef143db4dcf0" translate="yes" xml:space="preserve">
          <source>func (rs *Rows) NextResultSet() bool</source>
          <target state="translated">func(rs *Rows)NextResultSet()bool</target>
        </trans-unit>
        <trans-unit id="04ef3b45241c2ba2edb493d88dff852bb4ecb9d9" translate="yes" xml:space="preserve">
          <source>func (rs *Rows) Scan(dest ...interface{}) error</source>
          <target state="translated">func (rs *Rows)Scan(dest ...interface{})error</target>
        </trans-unit>
        <trans-unit id="333c957c6c1e1963a2692748d6064f3fe9ffc40f" translate="yes" xml:space="preserve">
          <source>func (rw *RWMutex) Lock()</source>
          <target state="translated">func (rw *RWMutex)Lock()</target>
        </trans-unit>
        <trans-unit id="625a43b2352e0e86dac3ac6cd0ca55fd57a50493" translate="yes" xml:space="preserve">
          <source>func (rw *RWMutex) RLock()</source>
          <target state="translated">func (rw *RWMutex)RLock()</target>
        </trans-unit>
        <trans-unit id="0c31b1e3d380970939fa4ac543fef089d39cb5ca" translate="yes" xml:space="preserve">
          <source>func (rw *RWMutex) RLocker() Locker</source>
          <target state="translated">func (rw *RWMutex)RLocker()Locker</target>
        </trans-unit>
        <trans-unit id="23dc65a233b935254d17735346c49c6c7bdace09" translate="yes" xml:space="preserve">
          <source>func (rw *RWMutex) RUnlock()</source>
          <target state="translated">func (rw *RWMutex)RUnlock()</target>
        </trans-unit>
        <trans-unit id="c8ce0443a2119bcd142116601a3b45b497ca41a0" translate="yes" xml:space="preserve">
          <source>func (rw *RWMutex) Unlock()</source>
          <target state="translated">func (rw *RWMutex)Unlock()</target>
        </trans-unit>
        <trans-unit id="2a2b7e68ae906ab0799d6843088245a98b61ebe4" translate="yes" xml:space="preserve">
          <source>func (rw *ResponseRecorder) Flush()</source>
          <target state="translated">func (rw *ResponseRecorder)Flush()</target>
        </trans-unit>
        <trans-unit id="1c9092d3723e819a441e860ad6d9f694d625f1fd" translate="yes" xml:space="preserve">
          <source>func (rw *ResponseRecorder) Header() http.Header</source>
          <target state="translated">func (rw *ResponseRecorder)Header()http.Header</target>
        </trans-unit>
        <trans-unit id="603da6577e93cb19dc30c457ad25c036033b5768" translate="yes" xml:space="preserve">
          <source>func (rw *ResponseRecorder) Result() *http.Response</source>
          <target state="translated">func (rw *ResponseRecorder)Result()*http.Response</target>
        </trans-unit>
        <trans-unit id="4d0aabc3c9950c41d53ece19be1a235a37cef392" translate="yes" xml:space="preserve">
          <source>func (rw *ResponseRecorder) Write(buf []byte) (int, error)</source>
          <target state="translated">func (rw *ResponseRecorder)Write(buf []byte)(int,error)</target>
        </trans-unit>
        <trans-unit id="8671ac0034f9b72d85a2f10d49f59b507caf4e1b" translate="yes" xml:space="preserve">
          <source>func (rw *ResponseRecorder) WriteHeader(code int)</source>
          <target state="translated">func (rw *ResponseRecorder)WriteHeader(code int)</target>
        </trans-unit>
        <trans-unit id="f937a43a23a81f83905aa9c582565aa267297fa9" translate="yes" xml:space="preserve">
          <source>func (rw *ResponseRecorder) WriteString(str string) (int, error)</source>
          <target state="translated">func (rw *ResponseRecorder)WriteString(str string)(int,error)</target>
        </trans-unit>
        <trans-unit id="1fbc6741249b02235dfb5feadbda12805eb1f6fc" translate="yes" xml:space="preserve">
          <source>func (s *AssignStmt) End() token.Pos</source>
          <target state="translated">func(s *AssignStmt)End()token.Pos</target>
        </trans-unit>
        <trans-unit id="873a1f32a3c77866736327109a70836e8d34a54c" translate="yes" xml:space="preserve">
          <source>func (s *AssignStmt) Pos() token.Pos</source>
          <target state="translated">func(s *AssignStmt)Pos()token.Pos</target>
        </trans-unit>
        <trans-unit id="399871a841a7ad4172cde35dc81393247f788c29" translate="yes" xml:space="preserve">
          <source>func (s *BadStmt) End() token.Pos</source>
          <target state="translated">func(s *BadStmt)End()token.Pos</target>
        </trans-unit>
        <trans-unit id="6ed13776f72a09e505225a4a45b2b0f17ba7210e" translate="yes" xml:space="preserve">
          <source>func (s *BadStmt) Pos() token.Pos</source>
          <target state="translated">func(s *BadStmt)Pos()token.Pos</target>
        </trans-unit>
        <trans-unit id="1ff10efdab19b8a9f4c1e694149ddd6fa4abbbc0" translate="yes" xml:space="preserve">
          <source>func (s *BlockStmt) End() token.Pos</source>
          <target state="translated">func (s *BlockStmt)End()token.Pos</target>
        </trans-unit>
        <trans-unit id="d75a826ad442a48d16bb25e972bdd82cfec59d75" translate="yes" xml:space="preserve">
          <source>func (s *BlockStmt) Pos() token.Pos</source>
          <target state="translated">func (s *BlockStmt)Pos()token.Pos</target>
        </trans-unit>
        <trans-unit id="27fb6ffe3ab9bb41136cc17613a81155bfb0b88f" translate="yes" xml:space="preserve">
          <source>func (s *BranchStmt) End() token.Pos</source>
          <target state="translated">func(s *BranchStmt)End()token.Pos</target>
        </trans-unit>
        <trans-unit id="3af930a4fa2b2ff2dac9fc42cec4ed25fc434897" translate="yes" xml:space="preserve">
          <source>func (s *BranchStmt) Pos() token.Pos</source>
          <target state="translated">func(s *BranchStmt)Pos()token.Pos</target>
        </trans-unit>
        <trans-unit id="5c4e797d933bfb5385777d9be0dcee4e5bb8b95d" translate="yes" xml:space="preserve">
          <source>func (s *CaseClause) End() token.Pos</source>
          <target state="translated">func(s *CaseClause)End()token.Pos</target>
        </trans-unit>
        <trans-unit id="a44e60d9666787b802abf608345b82cca8874d45" translate="yes" xml:space="preserve">
          <source>func (s *CaseClause) Pos() token.Pos</source>
          <target state="translated">func (s *CaseClause)Pos()token.Pos</target>
        </trans-unit>
        <trans-unit id="4066b873a01fc9b1db00632a5861c4ee328d1cea" translate="yes" xml:space="preserve">
          <source>func (s *CertPool) AddCert(cert *Certificate)</source>
          <target state="translated">func (s *CertPool)AddCert(cert *Certificado)</target>
        </trans-unit>
        <trans-unit id="27628161f51536c174f09e1fabd57f034586ce3b" translate="yes" xml:space="preserve">
          <source>func (s *CertPool) AppendCertsFromPEM(pemCerts []byte) (ok bool)</source>
          <target state="translated">func(s *CertPool)AppendCertsFromPEM(pemCerts []byte)(ok bool)</target>
        </trans-unit>
        <trans-unit id="ebd1525067fb46e6aa0b4959d87b65f41c001b4b" translate="yes" xml:space="preserve">
          <source>func (s *CertPool) Subjects() [][]byte</source>
          <target state="translated">func (s *CertPool)Subjects()[][]byte</target>
        </trans-unit>
        <trans-unit id="d1e8aa6769692d38a8e48bc1f7666659f0c2f919" translate="yes" xml:space="preserve">
          <source>func (s *CheckEqualError) Error() string</source>
          <target state="translated">func (s *CheckEqualError)Error()string</target>
        </trans-unit>
        <trans-unit id="47cdfbd475b9d79c8ab6067c6bd9ce4b0f0912f3" translate="yes" xml:space="preserve">
          <source>func (s *CheckError) Error() string</source>
          <target state="translated">func (s *CheckError)Error()string</target>
        </trans-unit>
        <trans-unit id="aa203ab6c0eee185c5686e1a95dbf836be9950a2" translate="yes" xml:space="preserve">
          <source>func (s *CommClause) End() token.Pos</source>
          <target state="translated">func(s *CommClause)End()token.Pos</target>
        </trans-unit>
        <trans-unit id="be18d430c5e9acbd016f205f5690531d9ee3903b" translate="yes" xml:space="preserve">
          <source>func (s *CommClause) Pos() token.Pos</source>
          <target state="translated">func (s *CommClause)Pos()token.Pos</target>
        </trans-unit>
        <trans-unit id="c5531f69f6d8c6de74a8f99155880b5f1bdcd32e" translate="yes" xml:space="preserve">
          <source>func (s *DeclStmt) End() token.Pos</source>
          <target state="translated">func(s *DeclStmt)End()token.Pos</target>
        </trans-unit>
        <trans-unit id="992a2f45915cee1267039bc76e5963c5d5dc1af2" translate="yes" xml:space="preserve">
          <source>func (s *DeclStmt) Pos() token.Pos</source>
          <target state="translated">func(s *DeclStmt)Pos()token.Pos</target>
        </trans-unit>
        <trans-unit id="b861e64e9d0f2a172bbbbc8795d9ea9d078cf961" translate="yes" xml:space="preserve">
          <source>func (s *DeferStmt) End() token.Pos</source>
          <target state="translated">func(s *DeferStmt)End()token.Pos</target>
        </trans-unit>
        <trans-unit id="3bbbbdb5f2a1e51206bb6336ca5c5ad66620a9e4" translate="yes" xml:space="preserve">
          <source>func (s *DeferStmt) Pos() token.Pos</source>
          <target state="translated">func(s *DeferStmt)Pos()token.Pos</target>
        </trans-unit>
        <trans-unit id="4a1f012a0bb59437e1cb6f5672a11c30f92019c6" translate="yes" xml:space="preserve">
          <source>func (s *EmptyStmt) End() token.Pos</source>
          <target state="translated">func(s *EmptyStmt)End()token.Pos</target>
        </trans-unit>
        <trans-unit id="baa1d59b347f62d67692bfec230d6e6e30fec426" translate="yes" xml:space="preserve">
          <source>func (s *EmptyStmt) Pos() token.Pos</source>
          <target state="translated">func(s *EmptyStmt)Pos()token.Pos</target>
        </trans-unit>
        <trans-unit id="c317670bb295d5cd4968f07bde9895d6a91c9544" translate="yes" xml:space="preserve">
          <source>func (s *ExprStmt) End() token.Pos</source>
          <target state="translated">func (s *ExprStmt)End()token.Pos</target>
        </trans-unit>
        <trans-unit id="e283c439460616c662b24eabfaca652b0c9e5013" translate="yes" xml:space="preserve">
          <source>func (s *ExprStmt) Pos() token.Pos</source>
          <target state="translated">func(s *ExprStmt)Pos()token.Pos</target>
        </trans-unit>
        <trans-unit id="ebed5349774eb39f29d31ef302cdcf5ba8835886" translate="yes" xml:space="preserve">
          <source>func (s *FileSet) AddFile(filename string, base, size int) *File</source>
          <target state="translated">func (s *FileSet)AddFile(filename string,base,size int)*File</target>
        </trans-unit>
        <trans-unit id="c619a580612403762f62260a7a099ec0323a7591" translate="yes" xml:space="preserve">
          <source>func (s *FileSet) Base() int</source>
          <target state="translated">func (s *FileSet)Base()int</target>
        </trans-unit>
        <trans-unit id="95bc9fb0119d78df3c477593ac1b06792708e20d" translate="yes" xml:space="preserve">
          <source>func (s *FileSet) File(p Pos) (f *File)</source>
          <target state="translated">func (s *FileSet)File(p Pos)(f *File)</target>
        </trans-unit>
        <trans-unit id="42e097130ec9d65e0e0b83e0b389981ed16d40cd" translate="yes" xml:space="preserve">
          <source>func (s *FileSet) Iterate(f func(*File) bool)</source>
          <target state="translated">func (s *FileSet)Iterate(f func(*File)bool)</target>
        </trans-unit>
        <trans-unit id="f5b61a8a09cb7478b0f880bb93f8d5f657d844ca" translate="yes" xml:space="preserve">
          <source>func (s *FileSet) Position(p Pos) (pos Position)</source>
          <target state="translated">func (s *FileSet)Position(p Pos)(pos Position)</target>
        </trans-unit>
        <trans-unit id="7f82ec0a850dadad75d6b48ea8eb2ed317b29f1f" translate="yes" xml:space="preserve">
          <source>func (s *FileSet) PositionFor(p Pos, adjusted bool) (pos Position)</source>
          <target state="translated">func (s *FileSet)PositionFor(p Pos,bool ajustado)(pos Position)</target>
        </trans-unit>
        <trans-unit id="9b29b1a4a60ba234ed081c372159e6a6ecd9dde4" translate="yes" xml:space="preserve">
          <source>func (s *FileSet) Read(decode func(interface{}) error) error</source>
          <target state="translated">func (s *FileSet)Read(decode func(interface{})error)</target>
        </trans-unit>
        <trans-unit id="1ff65d64bb751a5fb58a17f82e40d719b9d0e064" translate="yes" xml:space="preserve">
          <source>func (s *FileSet) Write(encode func(interface{}) error) error</source>
          <target state="translated">func (s *FileSet)Write(encode func(interface{})error)error</target>
        </trans-unit>
        <trans-unit id="9b42b81ef93822245b9bd08f55e78ed9f38e3bd3" translate="yes" xml:space="preserve">
          <source>func (s *ForStmt) End() token.Pos</source>
          <target state="translated">func(s *ForStmt)End()token.Pos</target>
        </trans-unit>
        <trans-unit id="2a6f47d560ad9eaf891b8ec35fda2dce3a0724ec" translate="yes" xml:space="preserve">
          <source>func (s *ForStmt) Pos() token.Pos</source>
          <target state="translated">func(s *ForStmt)Pos()token.Pos</target>
        </trans-unit>
        <trans-unit id="13b014532589336184e32698e8cd7d8dcf6589c5" translate="yes" xml:space="preserve">
          <source>func (s *GoStmt) End() token.Pos</source>
          <target state="translated">func(s *GoStmt)End()token.Pos</target>
        </trans-unit>
        <trans-unit id="a490121d0018a607086fe20da838c7c6f9074cfa" translate="yes" xml:space="preserve">
          <source>func (s *GoStmt) Pos() token.Pos</source>
          <target state="translated">func(s *GoStmt)Pos()token.Pos</target>
        </trans-unit>
        <trans-unit id="95429d2fd410ff23cec5fd9854ea7f42628f46f8" translate="yes" xml:space="preserve">
          <source>func (s *IfStmt) End() token.Pos</source>
          <target state="translated">func(s *IfStmt)End()token.Pos</target>
        </trans-unit>
        <trans-unit id="724dd0dd947943155b694e1ee6b212ea5d204029" translate="yes" xml:space="preserve">
          <source>func (s *IfStmt) Pos() token.Pos</source>
          <target state="translated">func(s *IfStmt)Pos()token.Pos</target>
        </trans-unit>
        <trans-unit id="0147dd6c2794bef67dd5be7c17a106585b46f12b" translate="yes" xml:space="preserve">
          <source>func (s *ImportSpec) End() token.Pos</source>
          <target state="translated">func (s *ImportSpec)End()token.Pos</target>
        </trans-unit>
        <trans-unit id="a6ef6a0bc9ec061e565e206c6e8f431f01c0dd56" translate="yes" xml:space="preserve">
          <source>func (s *ImportSpec) Pos() token.Pos</source>
          <target state="translated">func (s *ImportSpec)Pos()token.Pos</target>
        </trans-unit>
        <trans-unit id="17d916c086ed4751bfc3271dac61626404293b51" translate="yes" xml:space="preserve">
          <source>func (s *IncDecStmt) End() token.Pos</source>
          <target state="translated">func(s *IncDecStmt)End()token.Pos</target>
        </trans-unit>
        <trans-unit id="ec1eb3cc8a6812e8f40fe7d9c68c07c297162929" translate="yes" xml:space="preserve">
          <source>func (s *IncDecStmt) Pos() token.Pos</source>
          <target state="translated">func(s *IncDecStmt)Pos()token.Pos</target>
        </trans-unit>
        <trans-unit id="74067ba2cfe6bac11c92c1031300dfb925687e9f" translate="yes" xml:space="preserve">
          <source>func (s *LabeledStmt) End() token.Pos</source>
          <target state="translated">func(s *LabeledStmt)End()token.Pos</target>
        </trans-unit>
        <trans-unit id="ffbb0e93dae6a720b2b2b73417842f7d0c7364a9" translate="yes" xml:space="preserve">
          <source>func (s *LabeledStmt) Pos() token.Pos</source>
          <target state="translated">func(s *LabeledStmt)Pos()token.Pos</target>
        </trans-unit>
        <trans-unit id="814f42ab57e1e631b0b9eeb1b10f7fdeaa3bd6fa" translate="yes" xml:space="preserve">
          <source>func (s *MethodSet) At(i int) *Selection</source>
          <target state="translated">func (s *MethodSet)At(i int)*Selectie</target>
        </trans-unit>
        <trans-unit id="bf88a4367f09338ca5d4f996536a605f7a8f3688" translate="yes" xml:space="preserve">
          <source>func (s *MethodSet) Len() int</source>
          <target state="translated">func (s *MethodSet)Len()int</target>
        </trans-unit>
        <trans-unit id="5b3496e4799589f20cfe26915b8e297434b29a0e" translate="yes" xml:space="preserve">
          <source>func (s *MethodSet) Lookup(pkg *Package, name string) *Selection</source>
          <target state="translated">func (s *MethodSet)Lookup (pkg *Package,name string)*Selection</target>
        </trans-unit>
        <trans-unit id="dbd780dbfe20d463681421140851874b89459130" translate="yes" xml:space="preserve">
          <source>func (s *MethodSet) String() string</source>
          <target state="translated">func (s *MethodSet)String()string</target>
        </trans-unit>
        <trans-unit id="0dde8edd644ee16e20cc67991ca3db4fc35ad106" translate="yes" xml:space="preserve">
          <source>func (s *RangeStmt) End() token.Pos</source>
          <target state="translated">func(s *RangeStmt)End()token.Pos</target>
        </trans-unit>
        <trans-unit id="15e09203ab3da1bb17d20b76116a5edf6b9ee74d" translate="yes" xml:space="preserve">
          <source>func (s *RangeStmt) Pos() token.Pos</source>
          <target state="translated">func(s *RangeStmt)Pos()token.Pos</target>
        </trans-unit>
        <trans-unit id="0a1f25534949eb3c5e33787cc545c31575677e2f" translate="yes" xml:space="preserve">
          <source>func (s *ReturnStmt) End() token.Pos</source>
          <target state="translated">func(s *ReturnStmt)End()token.Pos</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
