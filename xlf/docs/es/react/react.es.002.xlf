<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="es" datatype="htmlbody" original="react">
    <body>
      <group id="react">
        <trans-unit id="679fe92462c39504c9ff9773ae608eb7389ffc9e" translate="yes" xml:space="preserve">
          <source>For a more concrete example of these concepts, let&amp;rsquo;s write a minimal wrapper for the plugin &lt;a href=&quot;https://harvesthq.github.io/chosen/&quot;&gt;Chosen&lt;/a&gt;, which augments &lt;code&gt;&amp;lt;select&amp;gt;&lt;/code&gt; inputs.</source>
          <target state="translated">Para un ejemplo m&amp;aacute;s concreto de estos conceptos, escribamos un contenedor m&amp;iacute;nimo para el complemento &lt;a href=&quot;https://harvesthq.github.io/chosen/&quot;&gt;Chosen&lt;/a&gt; , que aumenta las entradas &lt;code&gt;&amp;lt;select&amp;gt;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="e02416dec32f4ac14f5c635f846c95b0b1f3e149" translate="yes" xml:space="preserve">
          <source>For a more detailed walkthrough, check out &lt;a href=&quot;https://calibreapp.com/blog/react-performance-profiling-optimization&quot;&gt;this article by Ben Schwarz&lt;/a&gt;.</source>
          <target state="translated">Para obtener un tutorial m&amp;aacute;s detallado, consulte &lt;a href=&quot;https://calibreapp.com/blog/react-performance-profiling-optimization&quot;&gt;este art&amp;iacute;culo de Ben Schwarz&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="6742712e3a4c00cde6cec63fd4e900f882182503" translate="yes" xml:space="preserve">
          <source>For components defined as classes, use &lt;code&gt;this.props.children&lt;/code&gt;:</source>
          <target state="translated">Para los componentes definidos como clases, use &lt;code&gt;this.props.children&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="df0460aa967c08b3c0359b521985038ac48561d5" translate="yes" xml:space="preserve">
          <source>For each particular piece of changing data, there should be just one component that &amp;ldquo;owns&amp;rdquo; it in its state. Don&amp;rsquo;t try to synchronize states of two different components. Instead, &lt;a href=&quot;lifting-state-up&quot;&gt;lift it up&lt;/a&gt; to their closest shared ancestor, and pass it down as props to both of them.</source>
          <target state="translated">Para cada dato cambiante en particular, debe haber un solo componente que lo &quot;posea&quot; en su estado. No intente sincronizar estados de dos componentes diferentes. En su lugar, &lt;a href=&quot;lifting-state-up&quot;&gt;lev&amp;aacute;ntelo&lt;/a&gt; a su antepasado compartido m&amp;aacute;s cercano y p&amp;aacute;selo como accesorios para ambos.</target>
        </trans-unit>
        <trans-unit id="647bc53c804dc25be5b4801130ef3922760422b8" translate="yes" xml:space="preserve">
          <source>For each piece of state in your application:</source>
          <target state="translated">Para cada parte de estado en su solicitud:</target>
        </trans-unit>
        <trans-unit id="4657ab12168f0360582ae377c9a3fb4c69201085" translate="yes" xml:space="preserve">
          <source>For each test, we usually want to render our React tree to a DOM element that&amp;rsquo;s attached to &lt;code&gt;document&lt;/code&gt;. This is important so that it can receive DOM events. When the test ends, we want to &amp;ldquo;clean up&amp;rdquo; and unmount the tree from the &lt;code&gt;document&lt;/code&gt;.</source>
          <target state="translated">Para cada prueba, generalmente queremos representar nuestro &amp;aacute;rbol React en un elemento DOM que est&amp;aacute; adjunto al &lt;code&gt;document&lt;/code&gt; o . Esto es importante para que pueda recibir eventos DOM. Cuando finaliza la prueba, queremos &quot;limpiar&quot; y desmontar el &amp;aacute;rbol del &lt;code&gt;document&lt;/code&gt; o .</target>
        </trans-unit>
        <trans-unit id="9d2f11c83d765d839676e4e232e576ddbe2a1a64" translate="yes" xml:space="preserve">
          <source>For example a custom Hook that returned a &lt;code&gt;Date&lt;/code&gt; value could avoid calling the &lt;code&gt;toDateString&lt;/code&gt; function unnecessarily by passing the following formatter:</source>
          <target state="translated">Por ejemplo, un Hook personalizado que devolvi&amp;oacute; un valor de &lt;code&gt;Date&lt;/code&gt; podr&amp;iacute;a evitar llamar a la funci&amp;oacute;n &lt;code&gt;toDateString&lt;/code&gt; innecesariamente pasando el siguiente formateador:</target>
        </trans-unit>
        <trans-unit id="6db6725e9e7d5c088630e348048d1e73fc7657d3" translate="yes" xml:space="preserve">
          <source>For example,</source>
          <target state="translated">Por ejemplo,</target>
        </trans-unit>
        <trans-unit id="6ccd00019fe7c93727e1ee7af34a30096debfa1c" translate="yes" xml:space="preserve">
          <source>For example, &lt;code&gt;class&lt;/code&gt; becomes &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Element/className&quot;&gt;&lt;code&gt;className&lt;/code&gt;&lt;/a&gt; in JSX, and &lt;code&gt;tabindex&lt;/code&gt; becomes &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/tabIndex&quot;&gt;&lt;code&gt;tabIndex&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">Por ejemplo, &lt;code&gt;class&lt;/code&gt; se convierte en &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Element/className&quot;&gt; &lt;code&gt;className&lt;/code&gt; &lt;/a&gt; en JSX y &lt;code&gt;tabindex&lt;/code&gt; se convierte en &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/tabIndex&quot;&gt; &lt;code&gt;tabIndex&lt;/code&gt; &lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="257bf267f4accf76b8a71c8a6fc907d879bb3b3b" translate="yes" xml:space="preserve">
          <source>For example, &lt;code&gt;tryConvert('abc', toCelsius)&lt;/code&gt; returns an empty string, and &lt;code&gt;tryConvert('10.22', toFahrenheit)&lt;/code&gt; returns &lt;code&gt;'50.396'&lt;/code&gt;.</source>
          <target state="translated">Por ejemplo, &lt;code&gt;tryConvert('abc', toCelsius)&lt;/code&gt; devuelve una cadena vac&amp;iacute;a y &lt;code&gt;tryConvert('10.22', toFahrenheit)&lt;/code&gt; devuelve &lt;code&gt;'50.396'&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="86da3811ff28fce969e656a6a27c26d72c389972" translate="yes" xml:space="preserve">
          <source>For example, Facebook Messenger wraps content of the sidebar, the info panel, the conversation log, and the message input into separate error boundaries. If some component in one of these UI areas crashes, the rest of them remain interactive.</source>
          <target state="translated">Por ejemplo,Facebook Messenger envuelve el contenido de la barra lateral,el panel de información,el registro de la conversación y la entrada del mensaje en límites de error separados.Si algún componente de una de estas áreas de la interfaz de usuario se bloquea,el resto de ellas permanecen interactivas.</target>
        </trans-unit>
        <trans-unit id="d9d8139b3a5725d0dbe39a1d636583f71febc457" translate="yes" xml:space="preserve">
          <source>For example, both of the imports are necessary in this code, even though &lt;code&gt;React&lt;/code&gt; and &lt;code&gt;CustomButton&lt;/code&gt; are not directly referenced from JavaScript:</source>
          <target state="translated">Por ejemplo, ambas importaciones son necesarias en este c&amp;oacute;digo, aunque &lt;code&gt;React&lt;/code&gt; y &lt;code&gt;CustomButton&lt;/code&gt; no est&amp;aacute;n referenciados directamente desde JavaScript:</target>
        </trans-unit>
        <trans-unit id="390fb39992645b6398deff562b8f840081098a97" translate="yes" xml:space="preserve">
          <source>For example, consider a &lt;code&gt;Page&lt;/code&gt; component that passes a &lt;code&gt;user&lt;/code&gt; and &lt;code&gt;avatarSize&lt;/code&gt; prop several levels down so that deeply nested &lt;code&gt;Link&lt;/code&gt; and &lt;code&gt;Avatar&lt;/code&gt; components can read it:</source>
          <target state="translated">Por ejemplo, considere un componente de &lt;code&gt;Page&lt;/code&gt; que pasa un &lt;code&gt;user&lt;/code&gt; y &lt;code&gt;avatarSize&lt;/code&gt; accesorio avatarSize varios niveles hacia abajo para que los componentes &lt;code&gt;Link&lt;/code&gt; y &lt;code&gt;Avatar&lt;/code&gt; profundamente anidados puedan leerlo:</target>
        </trans-unit>
        <trans-unit id="3a0f37544377fd4ba88f4814137f0c59e828e67d" translate="yes" xml:space="preserve">
          <source>For example, consider a filterable list like this:</source>
          <target state="translated">Por ejemplo,considere una lista filtrable como esta:</target>
        </trans-unit>
        <trans-unit id="672d122436eb70d444bbe9b6d5a7454eb80d94df" translate="yes" xml:space="preserve">
          <source>For example, consider the &lt;code&gt;useFriendStatus&lt;/code&gt; custom Hook described in &lt;a href=&quot;hooks-custom&quot;&gt;&amp;ldquo;Building Your Own Hooks&amp;rdquo;&lt;/a&gt;:</source>
          <target state="translated">Por ejemplo, considere el &lt;code&gt;useFriendStatus&lt;/code&gt; personalizado useFriendStatus que se describe en &lt;a href=&quot;hooks-custom&quot;&gt;&quot;Creaci&amp;oacute;n de sus propios ganchos&quot;&lt;/a&gt; :</target>
        </trans-unit>
        <trans-unit id="897f4de2b32102497cc28727717c94d918135994" translate="yes" xml:space="preserve">
          <source>For example, consider the following code:</source>
          <target state="translated">Por ejemplo,considere el siguiente código:</target>
        </trans-unit>
        <trans-unit id="9050062cc798394f53d6e8b1ff9014a2612f33bb" translate="yes" xml:space="preserve">
          <source>For example, consider this &lt;code&gt;Comment&lt;/code&gt; component:</source>
          <target state="translated">Por ejemplo, considere este componente de &lt;code&gt;Comment&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="17c300f11b425a9fc05f0c1272d1583ab4603762" translate="yes" xml:space="preserve">
          <source>For example, continuing with our &lt;code&gt;&amp;lt;Mouse&amp;gt;&lt;/code&gt; component from above, if &lt;code&gt;Mouse&lt;/code&gt; were to extend &lt;code&gt;React.PureComponent&lt;/code&gt; instead of &lt;code&gt;React.Component&lt;/code&gt;, our example would look like this:</source>
          <target state="translated">Por ejemplo, continuando con nuestro componente &lt;code&gt;&amp;lt;Mouse&amp;gt;&lt;/code&gt; de arriba, si &lt;code&gt;Mouse&lt;/code&gt; extendiera &lt;code&gt;React.PureComponent&lt;/code&gt; en lugar de &lt;code&gt;React.Component&lt;/code&gt; , nuestro ejemplo se ver&amp;iacute;a as&amp;iacute;:</target>
        </trans-unit>
        <trans-unit id="20ed488706a8a3ad440cf53c3eca5d4c4ed1ad07" translate="yes" xml:space="preserve">
          <source>For example, if the Experimental channel had existed when we announced Hooks, we would have released Hooks to the Experimental channel weeks before they were available in Latest.</source>
          <target state="translated">Por ejemplo,si el canal Experimental hubiera existido cuando anunciamos Hooks,habríamos lanzado Hooks al canal Experimental semanas antes de que estuvieran disponibles en Latest.</target>
        </trans-unit>
        <trans-unit id="72386049d7fd0a4d1be43f2f6774c74af5948367" translate="yes" xml:space="preserve">
          <source>For example, if we enter 37 into the Celsius input, the state of the &lt;code&gt;Calculator&lt;/code&gt; component will be:</source>
          <target state="translated">Por ejemplo, si ingresamos 37 en la entrada Celsius, el estado del componente &lt;code&gt;Calculator&lt;/code&gt; ser&amp;aacute;:</target>
        </trans-unit>
        <trans-unit id="b9993ee38514320027480d338484992ca1feb5c6" translate="yes" xml:space="preserve">
          <source>For example, if we switch from one page to another, and none of the code or data for the next screen has loaded yet, it might be frustrating to immediately see a blank page with a loading indicator. We might prefer to stay longer on the previous screen. Implementing this pattern has historically been difficult in React. Concurrent Mode offers a new set of tools to do that.</source>
          <target state="translated">Por ejemplo,si pasamos de una página a otra,y todavía no se ha cargado ningún código o dato de la siguiente pantalla,podría ser frustrante ver inmediatamente una página en blanco con un indicador de carga.Podríamos preferir quedarnos más tiempo en la pantalla anterior.Implementar este patrón ha sido históricamente difícil en React.El Modo Concurrente ofrece un nuevo conjunto de herramientas para hacerlo.</target>
        </trans-unit>
        <trans-unit id="65295b13b97c2a6ed8a939287bfe094925fc31cc" translate="yes" xml:space="preserve">
          <source>For example, if we want to make the previous example log the name when it is submitted, we can write the form as a controlled component:</source>
          <target state="translated">Por ejemplo,si queremos que el ejemplo anterior registre el nombre cuando se presente,podemos escribir el formulario como un componente controlado:</target>
        </trans-unit>
        <trans-unit id="a90b29303f730a5e659074ca0cb511ba946d5117" translate="yes" xml:space="preserve">
          <source>For example, if you &lt;a href=&quot;components-and-props#extracting-components&quot;&gt;extract&lt;/a&gt; a &lt;code&gt;ListItem&lt;/code&gt; component, you should keep the key on the &lt;code&gt;&amp;lt;ListItem /&amp;gt;&lt;/code&gt; elements in the array rather than on the &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt; element in the &lt;code&gt;ListItem&lt;/code&gt; itself.</source>
          <target state="translated">Por ejemplo, si &lt;a href=&quot;components-and-props#extracting-components&quot;&gt;extrae&lt;/a&gt; un componente &lt;code&gt;ListItem&lt;/code&gt; , debe mantener la clave en los elementos &lt;code&gt;&amp;lt;ListItem /&amp;gt;&lt;/code&gt; de la matriz en lugar de en el elemento &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt; del &lt;code&gt;ListItem&lt;/code&gt; mismo.</target>
        </trans-unit>
        <trans-unit id="4f472461a434d14b304ba318506b6c2b7dd4f729" translate="yes" xml:space="preserve">
          <source>For example, if you have the following component:</source>
          <target state="translated">Por ejemplo,si tiene el siguiente componente:</target>
        </trans-unit>
        <trans-unit id="cf9af7a91451dd9ae9a9996fb7f391bbc16ec6a4" translate="yes" xml:space="preserve">
          <source>For example, instead of exposing &lt;code&gt;open()&lt;/code&gt; and &lt;code&gt;close()&lt;/code&gt; methods on a &lt;code&gt;Dialog&lt;/code&gt; component, pass an &lt;code&gt;isOpen&lt;/code&gt; prop to it.</source>
          <target state="translated">Por ejemplo, en lugar de exponer &lt;code&gt;open()&lt;/code&gt; m&amp;eacute;todos open () y &lt;code&gt;close()&lt;/code&gt; en un componente &lt;code&gt;Dialog&lt;/code&gt; , pase una propiedad &lt;code&gt;isOpen&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="d8de9356ec83d73b1f5bd25ff7148e61b4571f9a" translate="yes" xml:space="preserve">
          <source>For example, let&amp;rsquo;s say we have a &lt;code&gt;&amp;lt;Cat&amp;gt;&lt;/code&gt; component that renders the image of a cat chasing the mouse around the screen. We might use a &lt;code&gt;&amp;lt;Cat mouse={{ x, y }}&amp;gt;&lt;/code&gt; prop to tell the component the coordinates of the mouse so it knows where to position the image on the screen.</source>
          <target state="translated">Por ejemplo, digamos que tenemos un componente &lt;code&gt;&amp;lt;Cat&amp;gt;&lt;/code&gt; que muestra la imagen de un gato persiguiendo al rat&amp;oacute;n por la pantalla. Podr&amp;iacute;amos usar un &lt;code&gt;&amp;lt;Cat mouse={{ x, y }}&amp;gt;&lt;/code&gt; prop para decirle al componente las coordenadas del mouse para que sepa d&amp;oacute;nde colocar la imagen en la pantalla.</target>
        </trans-unit>
        <trans-unit id="ba22bdb002e0f405abcc6c642198532d39f6bf7a" translate="yes" xml:space="preserve">
          <source>For example, let&amp;rsquo;s say we have this &lt;code&gt;Counter&lt;/code&gt; component:</source>
          <target state="translated">Por ejemplo, digamos que tenemos este componente &lt;code&gt;Counter&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="6f0a42e407f76b6421f57202e0a6b998a33eea86" translate="yes" xml:space="preserve">
          <source>For example, let&amp;rsquo;s say we have this counter component:</source>
          <target state="translated">Por ejemplo, digamos que tenemos este componente contador:</target>
        </trans-unit>
        <trans-unit id="6829043516c2d5b5543372593d5ecc18cc4a4134" translate="yes" xml:space="preserve">
          <source>For example, maybe you have a complex component that contains a lot of local state that is managed in an ad-hoc way. &lt;code&gt;useState&lt;/code&gt; doesn&amp;rsquo;t make centralizing the update logic any easier so you might prefer to write it as a &lt;a href=&quot;https://redux.js.org/&quot;&gt;Redux&lt;/a&gt; reducer:</source>
          <target state="translated">Por ejemplo, tal vez tenga un componente complejo que contenga una gran cantidad de estado local que se gestione de forma ad-hoc. &lt;code&gt;useState&lt;/code&gt; no facilita la centralizaci&amp;oacute;n de la l&amp;oacute;gica de actualizaci&amp;oacute;n, por lo que es posible que prefiera escribirlo como un reductor de &lt;a href=&quot;https://redux.js.org/&quot;&gt;Redux&lt;/a&gt; :</target>
        </trans-unit>
        <trans-unit id="e18ae5d39ecd3952c9cebace04d8ec7b3336fb23" translate="yes" xml:space="preserve">
          <source>For example, research shows that displaying too many intermediate loading states when transitioning between screens makes a transition feel &lt;em&gt;slower&lt;/em&gt;. This is why Concurrent Mode shows new loading states on a fixed &amp;ldquo;schedule&amp;rdquo; to avoid jarring and too frequent updates.</source>
          <target state="translated">Por ejemplo, la investigaci&amp;oacute;n muestra que mostrar demasiados estados de carga intermedios al realizar la transici&amp;oacute;n entre pantallas hace que la transici&amp;oacute;n se sienta &lt;em&gt;m&amp;aacute;s lenta&lt;/em&gt; . Esta es la raz&amp;oacute;n por la que el modo concurrente muestra nuevos estados de carga en un &quot;programa&quot; fijo para evitar discordancias y actualizaciones demasiado frecuentes.</target>
        </trans-unit>
        <trans-unit id="78683415bcaad856b1ab7dfe02f23e05fa2ced55" translate="yes" xml:space="preserve">
          <source>For example, say you have a &lt;code&gt;CommentList&lt;/code&gt; component that subscribes to an external data source to render a list of comments:</source>
          <target state="translated">Por ejemplo, supongamos que tiene un componente &lt;code&gt;CommentList&lt;/code&gt; que se suscribe a una fuente de datos externa para generar una lista de comentarios:</target>
        </trans-unit>
        <trans-unit id="1a1a629d470f55d2fee2000499a4cacbb9a4833a" translate="yes" xml:space="preserve">
          <source>For example, the HTML:</source>
          <target state="translated">Por ejemplo,el HTML:</target>
        </trans-unit>
        <trans-unit id="6ba76674660b5e537e8b2cdd0ef1d5a91df770a7" translate="yes" xml:space="preserve">
          <source>For example, the following component tracks the mouse position in a web app:</source>
          <target state="translated">Por ejemplo,el siguiente componente rastrea la posición del ratón en una aplicación web:</target>
        </trans-unit>
        <trans-unit id="e8f359161b98ba57290664f3cc1ede81cf753231" translate="yes" xml:space="preserve">
          <source>For example, the following component will appear as &amp;rdquo;&lt;em&gt;ForwardRef&lt;/em&gt;&amp;rdquo; in the DevTools:</source>
          <target state="translated">Por ejemplo, el siguiente componente aparecer&amp;aacute; como &quot; &lt;em&gt;ForwardRef&lt;/em&gt; &quot; en DevTools:</target>
        </trans-unit>
        <trans-unit id="5c4201bd25776812cd7bc0c469c68c4fbd842451" translate="yes" xml:space="preserve">
          <source>For example, the following component will appear as MyDisplayName in the DevTools:</source>
          <target state="translated">Por ejemplo,el siguiente componente aparecerá como MyDisplayName en el DevTools:</target>
        </trans-unit>
        <trans-unit id="3069268548855f5d165876787923a3ea3d1da874" translate="yes" xml:space="preserve">
          <source>For example, this code accepts a single name in an uncontrolled component:</source>
          <target state="translated">Por ejemplo,este código acepta un solo nombre en un componente no controlado:</target>
        </trans-unit>
        <trans-unit id="2c55286e50f3215379ff426fa48eb785d76df4a7" translate="yes" xml:space="preserve">
          <source>For example, this code may fail to update the counter:</source>
          <target state="translated">Por ejemplo,este código puede fallar al actualizar el contador:</target>
        </trans-unit>
        <trans-unit id="0ccc1009af6f8f6328943760f3255e5b65c01689" translate="yes" xml:space="preserve">
          <source>For example, this code renders &amp;ldquo;Hello, Sara&amp;rdquo; on the page:</source>
          <target state="translated">Por ejemplo, este c&amp;oacute;digo muestra &quot;Hola, Sara&quot; en la p&amp;aacute;gina:</target>
        </trans-unit>
        <trans-unit id="c3a55dc4cb118bd5e2852ddf3c6b69f2d61b25ed" translate="yes" xml:space="preserve">
          <source>For example, this code will not run as expected:</source>
          <target state="translated">Por ejemplo,este código no funcionará como se esperaba:</target>
        </trans-unit>
        <trans-unit id="8e989a1227816ccbcfdce9a1ef1f8646c7fe3950" translate="yes" xml:space="preserve">
          <source>For example, this code written with JSX:</source>
          <target state="translated">Por ejemplo,este código escrito con JSX:</target>
        </trans-unit>
        <trans-unit id="f04fad3363acf285dbccbb82a73f5be8eb678633" translate="yes" xml:space="preserve">
          <source>For example, this component sets the document title after React updates the DOM:</source>
          <target state="translated">Por ejemplo,este componente establece el título del documento después de que React actualiza el DOM:</target>
        </trans-unit>
        <trans-unit id="7884e8e4fb1aae5ecf12d8317e1f6d9f4593fec2" translate="yes" xml:space="preserve">
          <source>For example, this will not re-render a component:</source>
          <target state="translated">Por ejemplo,esto no volverá a producir un componente:</target>
        </trans-unit>
        <trans-unit id="20851a45788a2fdc02ea529e15ac7f8112f9de05" translate="yes" xml:space="preserve">
          <source>For example, to profile a &lt;code&gt;Navigation&lt;/code&gt; component and its descendants:</source>
          <target state="translated">Por ejemplo, para perfilar un componente de &lt;code&gt;Navigation&lt;/code&gt; y sus descendientes:</target>
        </trans-unit>
        <trans-unit id="d13080b59ca5d53e0ba7b314b267e9b38197f049" translate="yes" xml:space="preserve">
          <source>For example, we can create an &lt;code&gt;App&lt;/code&gt; component that renders &lt;code&gt;Welcome&lt;/code&gt; many times:</source>
          <target state="translated">Por ejemplo, podemos crear un componente de la &lt;code&gt;App&lt;/code&gt; que muestre &lt;code&gt;Welcome&lt;/code&gt; muchas veces:</target>
        </trans-unit>
        <trans-unit id="f1ead1eab1f84507539e34706446448f0d28e9f5" translate="yes" xml:space="preserve">
          <source>For example, we could split our component state into &lt;code&gt;position&lt;/code&gt; and &lt;code&gt;size&lt;/code&gt; objects, and always replace the &lt;code&gt;position&lt;/code&gt; with no need for merging:</source>
          <target state="translated">Por ejemplo, podr&amp;iacute;amos dividir el estado de nuestro componente en objetos de &lt;code&gt;position&lt;/code&gt; y &lt;code&gt;size&lt;/code&gt; , y siempre reemplazar la &lt;code&gt;position&lt;/code&gt; sin necesidad de fusionar:</target>
        </trans-unit>
        <trans-unit id="2d42c3a9b978bb53213888cf10f240637aca3105" translate="yes" xml:space="preserve">
          <source>For example, when adding an element at the end of the children, converting between these two trees works well:</source>
          <target state="translated">Por ejemplo,cuando se añade un elemento al final de los niños,la conversión entre estos dos árboles funciona bien:</target>
        </trans-unit>
        <trans-unit id="3142f55d25c885268e370e43896a3749c9b69c27" translate="yes" xml:space="preserve">
          <source>For example, your state may contain several independent variables:</source>
          <target state="translated">Por ejemplo,su estado puede contener varias variables independientes:</target>
        </trans-unit>
        <trans-unit id="059c3e8cce263b2945a18ac90b2637e10a8026b1" translate="yes" xml:space="preserve">
          <source>For example:</source>
          <target state="translated">Por ejemplo:</target>
        </trans-unit>
        <trans-unit id="331fc234992fd41cfe4aafa1cbadd06d8bfafb82" translate="yes" xml:space="preserve">
          <source>For modal dialogs, ensure that everyone can interact with them by following the &lt;a href=&quot;https://www.w3.org/TR/wai-aria-practices-1.1/#dialog_modal&quot;&gt;WAI-ARIA Modal Authoring Practices&lt;/a&gt;.</source>
          <target state="translated">Para los di&amp;aacute;logos modales, aseg&amp;uacute;rese de que todos puedan interactuar con ellos siguiendo las &lt;a href=&quot;https://www.w3.org/TR/wai-aria-practices-1.1/#dialog_modal&quot;&gt;Pr&amp;aacute;cticas de autor&amp;iacute;a modal WAI-ARIA&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="ec096cdc71e0b7a6ca398c02cfc7d40516f822a1" translate="yes" xml:space="preserve">
          <source>For more detail, see:</source>
          <target state="translated">Para más detalles,vea:</target>
        </trans-unit>
        <trans-unit id="8c88366a24fd2ea482dc14d0de87b283bbe87e7a" translate="yes" xml:space="preserve">
          <source>For more details, see &lt;a href=&quot;https://reactjs.org/blog/2017/07/26/error-handling-in-react-16.html&quot;&gt;&lt;em&gt;Error Handling in React 16&lt;/em&gt;&lt;/a&gt;.</source>
          <target state="translated">Para obtener m&amp;aacute;s detalles, consulte &lt;a href=&quot;https://reactjs.org/blog/2017/07/26/error-handling-in-react-16.html&quot;&gt;&lt;em&gt;Manejo de errores en React 16&lt;/em&gt;&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="db28a2392ea1b7c225c391a0872eaf779d774686" translate="yes" xml:space="preserve">
          <source>For more info, see &lt;a href=&quot;fragments&quot;&gt;the Fragments documentation&lt;/a&gt;.</source>
          <target state="translated">Para obtener m&amp;aacute;s informaci&amp;oacute;n, consulte &lt;a href=&quot;fragments&quot;&gt;la documentaci&amp;oacute;n de Fragmentos&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="4ab9916b7ffb2e490bd12d8282c8ddb3d82ffa2a" translate="yes" xml:space="preserve">
          <source>For more information about the &amp;lsquo;function as a child&amp;rsquo; pattern, see &lt;a href=&quot;render-props&quot;&gt;render props&lt;/a&gt;.</source>
          <target state="translated">Para obtener m&amp;aacute;s informaci&amp;oacute;n sobre el patr&amp;oacute;n de 'funci&amp;oacute;n como hijo', consulte los &lt;a href=&quot;render-props&quot;&gt;accesorios de renderizado&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="754ab305ab4f9aeec53763a39090226c0de9d63f" translate="yes" xml:space="preserve">
          <source>For more information about the onChange event, see &lt;a href=&quot;forms&quot;&gt;Forms&lt;/a&gt;.</source>
          <target state="translated">Para obtener m&amp;aacute;s informaci&amp;oacute;n sobre el evento onChange, consulte &lt;a href=&quot;forms&quot;&gt;Formularios&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="0cba5c3c0c27cf5088d9888383d141d07a0f2491" translate="yes" xml:space="preserve">
          <source>For more information on Concurrent Mode, check out the &lt;a href=&quot;concurrent-mode-intro&quot;&gt;Concurrent Mode documentation.&lt;/a&gt;</source>
          <target state="translated">Para obtener m&amp;aacute;s informaci&amp;oacute;n sobre el modo concurrente, consulte la &lt;a href=&quot;concurrent-mode-intro&quot;&gt;documentaci&amp;oacute;n del modo concurrente.&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="b9732d78e0ad658ec6be5aa1a8cfda86c791eaa9" translate="yes" xml:space="preserve">
          <source>For more information, check out &lt;a href=&quot;testing-recipes&quot;&gt;Testing Recipes&lt;/a&gt;.</source>
          <target state="translated">Para obtener m&amp;aacute;s informaci&amp;oacute;n, consulte &lt;a href=&quot;testing-recipes&quot;&gt;Recetas de prueba&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="c4a38f12036a32191520afa8a2753bdccc47eea0" translate="yes" xml:space="preserve">
          <source>For more information, see &lt;a href=&quot;forwarding-refs&quot;&gt;forwarding refs&lt;/a&gt;.</source>
          <target state="translated">Para obtener m&amp;aacute;s informaci&amp;oacute;n, consulte &lt;a href=&quot;forwarding-refs&quot;&gt;Reenv&amp;iacute;o de referencias&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="e5fc1e92e2c893003eb2447d228048e1a7aaf57a" translate="yes" xml:space="preserve">
          <source>For older codebases, Concurrent Mode might be a step too far. This is why we also provide a new &amp;ldquo;Blocking Mode&amp;rdquo; in the experimental React builds. You can try it by substituting &lt;code&gt;createRoot&lt;/code&gt; with &lt;code&gt;createBlockingRoot&lt;/code&gt;. It only offers a &lt;em&gt;small subset&lt;/em&gt; of the Concurrent Mode features, but it is closer to how React works today and can serve as a migration step.</source>
          <target state="translated">Para bases de c&amp;oacute;digo m&amp;aacute;s antiguas, el modo concurrente puede ser un paso demasiado lejos. Es por eso que tambi&amp;eacute;n proporcionamos un nuevo &quot;Modo de bloqueo&quot; en las compilaciones experimentales de React. Puede probarlo sustituyendo &lt;code&gt;createRoot&lt;/code&gt; con &lt;code&gt;createBlockingRoot&lt;/code&gt; . Solo ofrece un &lt;em&gt;peque&amp;ntilde;o subconjunto&lt;/em&gt; de las caracter&amp;iacute;sticas del modo concurrente, pero est&amp;aacute; m&amp;aacute;s cerca de c&amp;oacute;mo funciona React hoy y puede servir como un paso de migraci&amp;oacute;n.</target>
        </trans-unit>
        <trans-unit id="770927b3887fe0c354b4fb137b4cc1bdc30fbbb9" translate="yes" xml:space="preserve">
          <source>For other use cases, &lt;a href=&quot;https://reactjs.org/blog/2018/06/07/you-probably-dont-need-derived-state.html&quot;&gt;follow the recommendations in this blog post about derived state&lt;/a&gt;.</source>
          <target state="translated">Para otros casos de uso, &lt;a href=&quot;https://reactjs.org/blog/2018/06/07/you-probably-dont-need-derived-state.html&quot;&gt;siga las recomendaciones de esta publicaci&amp;oacute;n de blog sobre el estado derivado&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="b327cbe7031e739d617d4f75e12fa5fef2acc3b7" translate="yes" xml:space="preserve">
          <source>For the most efficient Browserify production build, install a few plugins:</source>
          <target state="translated">Para la construcción más eficiente de la producción de Browserify,instala algunos plugins:</target>
        </trans-unit>
        <trans-unit id="17194133fbe1957bfdd4b741f2933c9c86f4ba6d" translate="yes" xml:space="preserve">
          <source>For the most efficient Brunch production build, install the &lt;a href=&quot;https://github.com/brunch/terser-brunch&quot;&gt;&lt;code&gt;terser-brunch&lt;/code&gt;&lt;/a&gt; plugin:</source>
          <target state="translated">Para la construcci&amp;oacute;n de producci&amp;oacute;n de Brunch m&amp;aacute;s eficiente, instale el &lt;a href=&quot;https://github.com/brunch/terser-brunch&quot;&gt; &lt;code&gt;terser-brunch&lt;/code&gt; &lt;/a&gt; :</target>
        </trans-unit>
        <trans-unit id="a6ce51b2f939e3558a44b1cb8fdbdf554bc07d90" translate="yes" xml:space="preserve">
          <source>For the most efficient Rollup production build, install a few plugins:</source>
          <target state="translated">Para la construcción más eficiente de la producción de Rollup,instale algunos plugins:</target>
        </trans-unit>
        <trans-unit id="7475cb5e6f5adf915c29f1cdea4e2bdc8ba92aa9" translate="yes" xml:space="preserve">
          <source>For these reasons, we reserve patch releases only for the most critical bugs and security vulnerabilities.</source>
          <target state="translated">Por estas razones,nos reservamos la publicación de parches sólo para los fallos y vulnerabilidades de seguridad más críticos.</target>
        </trans-unit>
        <trans-unit id="faa8c036fd5e3a800041a6a85017b66c2fe68715" translate="yes" xml:space="preserve">
          <source>For this change, we&amp;rsquo;ve provided a &lt;a href=&quot;https://github.com/reactjs/react-codemod#error-boundaries&quot;&gt;codemod&lt;/a&gt; to automatically migrate your code.</source>
          <target state="translated">Para este cambio, proporcionamos un &lt;a href=&quot;https://github.com/reactjs/react-codemod#error-boundaries&quot;&gt;codificador&lt;/a&gt; para migrar autom&amp;aacute;ticamente su c&amp;oacute;digo.</target>
        </trans-unit>
        <trans-unit id="4e1bce685a135223c199242bc8c77e474653706f" translate="yes" xml:space="preserve">
          <source>For this reason &lt;code&gt;useDebugValue&lt;/code&gt; accepts a formatting function as an optional second parameter. This function is only called if the Hooks are inspected. It receives the debug value as a parameter and should return a formatted display value.</source>
          <target state="translated">Por esta raz&amp;oacute;n &lt;code&gt;useDebugValue&lt;/code&gt; acepta una funci&amp;oacute;n de formato como un segundo par&amp;aacute;metro opcional. Esta funci&amp;oacute;n solo se llama si se inspeccionan los Hooks. Recibe el valor de depuraci&amp;oacute;n como par&amp;aacute;metro y debe devolver un valor de visualizaci&amp;oacute;n formateado.</target>
        </trans-unit>
        <trans-unit id="d77cd5d73e371d728872a07b909df96d58e4b7b3" translate="yes" xml:space="preserve">
          <source>Forgetting to handle &lt;code&gt;componentDidUpdate&lt;/code&gt; properly is a common source of bugs in React applications.</source>
          <target state="translated">Olvidar manejar el &lt;code&gt;componentDidUpdate&lt;/code&gt; correctamente es una fuente com&amp;uacute;n de errores en las aplicaciones React.</target>
        </trans-unit>
        <trans-unit id="7d30ae53e81b25bd47a3ef79f6270bb2aee0a4b4" translate="yes" xml:space="preserve">
          <source>Form Events</source>
          <target state="translated">Formulario de Eventos</target>
        </trans-unit>
        <trans-unit id="4bec9575721b2739ed1e7c56eb6c8471084fcbcf" translate="yes" xml:space="preserve">
          <source>Forms</source>
          <target state="translated">Forms</target>
        </trans-unit>
        <trans-unit id="955e3f80970e0af47e55f5200545b8b3a318bc97" translate="yes" xml:space="preserve">
          <source>Fortunately, we can explicitly forward refs to the inner &lt;code&gt;FancyButton&lt;/code&gt; component using the &lt;code&gt;React.forwardRef&lt;/code&gt; API. &lt;code&gt;React.forwardRef&lt;/code&gt; accepts a render function that receives &lt;code&gt;props&lt;/code&gt; and &lt;code&gt;ref&lt;/code&gt; parameters and returns a React node. For example:</source>
          <target state="translated">Afortunadamente, podemos reenviar referencias expl&amp;iacute;citamente al componente &lt;code&gt;FancyButton&lt;/code&gt; interno usando la API &lt;code&gt;React.forwardRef&lt;/code&gt; . &lt;code&gt;React.forwardRef&lt;/code&gt; acepta una funci&amp;oacute;n de renderizaci&amp;oacute;n que recibe &lt;code&gt;props&lt;/code&gt; y par&amp;aacute;metros de &lt;code&gt;ref&lt;/code&gt; erencia y devuelve un nodo React. Por ejemplo:</target>
        </trans-unit>
        <trans-unit id="f601df170026e953bbac95daafb8c35102220f96" translate="yes" xml:space="preserve">
          <source>Forwarding Refs</source>
          <target state="translated">Los árbitros de la expedición</target>
        </trans-unit>
        <trans-unit id="98364eb3c7e295c55161e71c692712d164542fd6" translate="yes" xml:space="preserve">
          <source>Forwarding refs in higher-order components</source>
          <target state="translated">Reenvío de refs en componentes de orden superior</target>
        </trans-unit>
        <trans-unit id="fe54eca6f507b141b7575b8953c555c23ecbd348" translate="yes" xml:space="preserve">
          <source>Forwarding refs in higher-order-components</source>
          <target state="translated">Reenvío de refs en componentes de orden superior</target>
        </trans-unit>
        <trans-unit id="ee0dcf389f3ad894e637d4cba7ff22af9df9a072" translate="yes" xml:space="preserve">
          <source>Forwarding refs to DOM components</source>
          <target state="translated">Reenvío de referencias a los componentes DOM</target>
        </trans-unit>
        <trans-unit id="d45089940ca38bf48726ea01710791bffa1dee6e" translate="yes" xml:space="preserve">
          <source>Fragments</source>
          <target state="translated">Fragments</target>
        </trans-unit>
        <trans-unit id="796f3ca672ebd9bd41a7a01b5a01b8745791f0e8" translate="yes" xml:space="preserve">
          <source>Fragments declared with the explicit &lt;code&gt;&amp;lt;React.Fragment&amp;gt;&lt;/code&gt; syntax may have keys. A use case for this is mapping a collection to an array of fragments &amp;mdash; for example, to create a description list:</source>
          <target state="translated">Los fragmentos declarados con la sintaxis expl&amp;iacute;cita &lt;code&gt;&amp;lt;React.Fragment&amp;gt;&lt;/code&gt; pueden tener claves. Un caso de uso para esto es mapear una colecci&amp;oacute;n a una matriz de fragmentos, por ejemplo, para crear una lista de descripci&amp;oacute;n:</target>
        </trans-unit>
        <trans-unit id="8065c017db022d1f5ec110b82bbd874c082a88f9" translate="yes" xml:space="preserve">
          <source>Fragments solve this problem.</source>
          <target state="translated">Los fragmentos resuelven este problema.</target>
        </trans-unit>
        <trans-unit id="3bcb0016a5230b33666fdcf36ccabf570e7de70e" translate="yes" xml:space="preserve">
          <source>Frameworks like &lt;a href=&quot;https://www.cypress.io/&quot;&gt;Cypress&lt;/a&gt;, &lt;a href=&quot;https://github.com/GoogleChrome/puppeteer&quot;&gt;puppeteer&lt;/a&gt; and &lt;a href=&quot;https://www.seleniumhq.org/projects/webdriver/&quot;&gt;webdriver&lt;/a&gt; are useful for running &lt;a href=&quot;#end-to-end-tests-aka-e2e-tests&quot;&gt;end-to-end tests&lt;/a&gt;.</source>
          <target state="translated">Los marcos como &lt;a href=&quot;https://www.cypress.io/&quot;&gt;Cypress&lt;/a&gt; , &lt;a href=&quot;https://github.com/GoogleChrome/puppeteer&quot;&gt;titiritero&lt;/a&gt; y &lt;a href=&quot;https://www.seleniumhq.org/projects/webdriver/&quot;&gt;webdriver&lt;/a&gt; son &amp;uacute;tiles para ejecutar &lt;a href=&quot;#end-to-end-tests-aka-e2e-tests&quot;&gt;pruebas de un extremo a otro&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="cf9e2789ee767980ad3bc5023d41ac7e306fd5ec" translate="yes" xml:space="preserve">
          <source>Frameworks like Jest also let you save &amp;ldquo;snapshots&amp;rdquo; of data with &lt;a href=&quot;https://jestjs.io/docs/en/snapshot-testing&quot;&gt;&lt;code&gt;toMatchSnapshot&lt;/code&gt; / &lt;code&gt;toMatchInlineSnapshot&lt;/code&gt;&lt;/a&gt;. With these, we can &amp;ldquo;save&amp;rdquo; the rendered component output and ensure that a change to it has to be explicitly committed as a change to the snapshot.</source>
          <target state="translated">Los marcos como Jest tambi&amp;eacute;n le permiten guardar &quot;instant&amp;aacute;neas&quot; de datos con &lt;a href=&quot;https://jestjs.io/docs/en/snapshot-testing&quot;&gt; &lt;code&gt;toMatchSnapshot&lt;/code&gt; / &lt;code&gt;toMatchInlineSnapshot&lt;/code&gt; &lt;/a&gt; . Con estos, podemos &quot;guardar&quot; la salida del componente renderizado y asegurarnos de que un cambio en &amp;eacute;l debe confirmarse expl&amp;iacute;citamente como un cambio en la instant&amp;aacute;nea.</target>
        </trans-unit>
        <trans-unit id="d790b402d79ac1a723c790313bcd679999474630" translate="yes" xml:space="preserve">
          <source>Frequently Asked Questions</source>
          <target state="translated">Preguntas frecuentes</target>
        </trans-unit>
        <trans-unit id="149defa1bf170ed878773e58e8f5ff8d5c8a3478" translate="yes" xml:space="preserve">
          <source>From Classes to Hooks</source>
          <target state="translated">De las clases a los ganchos</target>
        </trans-unit>
        <trans-unit id="bbed11ef2d053428bd9995e6dc4db90c56f977a2" translate="yes" xml:space="preserve">
          <source>From React&amp;rsquo;s point of view, a component using Hooks is just a regular component. If your testing solution doesn&amp;rsquo;t rely on React internals, testing components with Hooks shouldn&amp;rsquo;t be different from how you normally test components.</source>
          <target state="translated">Desde el punto de vista de React, un componente que usa Hooks es solo un componente regular. Si su soluci&amp;oacute;n de prueba no se basa en los componentes internos de React, probar componentes con Hooks no deber&amp;iacute;a ser diferente de c&amp;oacute;mo prueba normalmente los componentes.</target>
        </trans-unit>
        <trans-unit id="12d07daa800d296a026c49de79bda8bb9f64ea8a" translate="yes" xml:space="preserve">
          <source>From here you could start moving more logic into the component and begin adopting more common React practices. For example, in components it is best not to rely on IDs because the same component can be rendered multiple times. Instead, we will use the &lt;a href=&quot;handling-events&quot;&gt;React event system&lt;/a&gt; and register the click handler directly on the React &lt;code&gt;&amp;lt;button&amp;gt;&lt;/code&gt; element:</source>
          <target state="translated">Desde aqu&amp;iacute;, puede comenzar a mover m&amp;aacute;s l&amp;oacute;gica al componente y comenzar a adoptar pr&amp;aacute;cticas React m&amp;aacute;s comunes. Por ejemplo, en los componentes es mejor no depender de los ID porque el mismo componente se puede renderizar varias veces. En su lugar, usaremos el &lt;a href=&quot;handling-events&quot;&gt;sistema de eventos React&lt;/a&gt; y registraremos el controlador de clic directamente en el elemento React &lt;code&gt;&amp;lt;button&amp;gt;&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="732afd30e77a6dc18afd55e03cd71f20b12f519d" translate="yes" xml:space="preserve">
          <source>Fully-Fledged Solutions</source>
          <target state="translated">Soluciones completas</target>
        </trans-unit>
        <trans-unit id="d1ab6dc65e716361136b87c26f6834c3fa7eba19" translate="yes" xml:space="preserve">
          <source>Function and Class Components</source>
          <target state="translated">Función y componentes de la clase</target>
        </trans-unit>
        <trans-unit id="fd744c2eded0413dd090011205868c3aa86df00b" translate="yes" xml:space="preserve">
          <source>Function and Class components both have some additional features that we will discuss in the &lt;a href=&quot;state-and-lifecycle&quot;&gt;next sections&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ccf4dbac73be46db02a4f245d06acae861568bf3" translate="yes" xml:space="preserve">
          <source>Function component bodies</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a0437f301087d86e5d06d2280e2674b540deaba5" translate="yes" xml:space="preserve">
          <source>Function components are also able to reference &lt;code&gt;context&lt;/code&gt; if &lt;code&gt;contextTypes&lt;/code&gt; is defined as a property of the function. The following code shows a &lt;code&gt;Button&lt;/code&gt; component written as a function component.</source>
          <target state="translated">Los componentes de la funci&amp;oacute;n tambi&amp;eacute;n pueden hacer referencia al &lt;code&gt;context&lt;/code&gt; o si &lt;code&gt;contextTypes&lt;/code&gt; se define como una propiedad de la funci&amp;oacute;n. El siguiente c&amp;oacute;digo muestra un componente &lt;code&gt;Button&lt;/code&gt; escrito como un componente de funci&amp;oacute;n.</target>
        </trans-unit>
        <trans-unit id="73f523ab76ca84802a4f7ad409b8b8a11d5ec14d" translate="yes" xml:space="preserve">
          <source>Functional updates</source>
          <target state="translated">Actualizaciones funcionales</target>
        </trans-unit>
        <trans-unit id="68254545bf32d5c6b80d7f1482247c069c365636" translate="yes" xml:space="preserve">
          <source>Functions as Children</source>
          <target state="translated">Funciona como los niños</target>
        </trans-unit>
        <trans-unit id="1f41b572070fa59c9db0924aa546698fb57d612e" translate="yes" xml:space="preserve">
          <source>Functions passed to &lt;code&gt;useState&lt;/code&gt;, &lt;code&gt;useMemo&lt;/code&gt;, or &lt;code&gt;useReducer&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9b8b995fc31e98c113f50f1e6e4e3cd2d61d6d9d" translate="yes" xml:space="preserve">
          <source>Fundamentally, JSX just provides syntactic sugar for the &lt;code&gt;React.createElement(component, props, ...children)&lt;/code&gt; function. The JSX code:</source>
          <target state="translated">B&amp;aacute;sicamente, JSX solo proporciona az&amp;uacute;car sint&amp;aacute;ctico para la funci&amp;oacute;n &lt;code&gt;React.createElement(component, props, ...children)&lt;/code&gt; . El c&amp;oacute;digo JSX:</target>
        </trans-unit>
        <trans-unit id="4d6b62bf07d530cf7754450cf7f4baeba776dcc5" translate="yes" xml:space="preserve">
          <source>Furthermore, &lt;code&gt;React.PureComponent&lt;/code&gt;&amp;rsquo;s &lt;code&gt;shouldComponentUpdate()&lt;/code&gt; skips prop updates for the whole component subtree. Make sure all the children components are also &amp;ldquo;pure&amp;rdquo;.</source>
          <target state="translated">Adem&amp;aacute;s, &lt;code&gt;React.PureComponent&lt;/code&gt; &amp;lsquo;s &lt;code&gt;shouldComponentUpdate()&lt;/code&gt; salta prop actualizaciones para todo el sub&amp;aacute;rbol componente. Aseg&amp;uacute;rese de que todos los componentes secundarios tambi&amp;eacute;n sean &quot;puros&quot;.</target>
        </trans-unit>
        <trans-unit id="96bfe330b3c43755e29748c139c92671348a757f" translate="yes" xml:space="preserve">
          <source>Gatsby</source>
          <target state="translated">Gatsby</target>
        </trans-unit>
        <trans-unit id="14837150cbbe37e0d75d8160b89e20cd804e5090" translate="yes" xml:space="preserve">
          <source>Generally speaking, no.</source>
          <target state="translated">En general,no.</target>
        </trans-unit>
        <trans-unit id="52caaec9d0bac23a32c7ed19ebe70c6cf9d9b6ff" translate="yes" xml:space="preserve">
          <source>Generally speaking, yes, it is OK, and it is often the easiest way to pass parameters to callback functions.</source>
          <target state="translated">En general,sí,está bien,y a menudo es la forma más fácil de pasar parámetros a las funciones de devolución de llamada.</target>
        </trans-unit>
        <trans-unit id="28a76c547269406d92dd91388795bcc92164307d" translate="yes" xml:space="preserve">
          <source>Generally, you don&amp;rsquo;t want to keep the generated javascript in your source control, so be sure to add the build folder to your &lt;code&gt;.gitignore&lt;/code&gt;.</source>
          <target state="translated">Generalmente, no desea mantener el javascript generado en su control de c&amp;oacute;digo fuente, as&amp;iacute; que aseg&amp;uacute;rese de agregar la carpeta de compilaci&amp;oacute;n a su &lt;code&gt;.gitignore&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="18b5b1a5960100dd8954a497a5206e63c5798df0" translate="yes" xml:space="preserve">
          <source>Generic Events</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="010b85ad56b34c34c7c2a3b2436c740e30428ed5" translate="yes" xml:space="preserve">
          <source>Getting Started</source>
          <target state="translated">Empezando</target>
        </trans-unit>
        <trans-unit id="b75a226127e3ed2978b5f42961dd98a51c54f567" translate="yes" xml:space="preserve">
          <source>Given the code below, we use the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map&quot;&gt;&lt;code&gt;map()&lt;/code&gt;&lt;/a&gt; function to take an array of &lt;code&gt;numbers&lt;/code&gt; and double their values. We assign the new array returned by &lt;code&gt;map()&lt;/code&gt; to the variable &lt;code&gt;doubled&lt;/code&gt; and log it:</source>
          <target state="translated">Dado el siguiente c&amp;oacute;digo, usamos la funci&amp;oacute;n &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map&quot;&gt; &lt;code&gt;map()&lt;/code&gt; &lt;/a&gt; para tomar una matriz de &lt;code&gt;numbers&lt;/code&gt; y duplicar sus valores. Asignamos la nueva matriz devuelta por &lt;code&gt;map()&lt;/code&gt; a la variable &lt;code&gt;doubled&lt;/code&gt; y la registramos:</target>
        </trans-unit>
        <trans-unit id="7427cf697be16a4ec1d916910128a59d920125e7" translate="yes" xml:space="preserve">
          <source>Glossary</source>
          <target state="translated">Glossary</target>
        </trans-unit>
        <trans-unit id="96136d53d8b75905c13546cd90a5c916cbb29871" translate="yes" xml:space="preserve">
          <source>Glossary and FAQ</source>
          <target state="translated">Glosario y preguntas frecuentes</target>
        </trans-unit>
        <trans-unit id="2f13a545b80f208a5c342a3f09da99fe34c3e60a" translate="yes" xml:space="preserve">
          <source>Glossary of React Terms</source>
          <target state="translated">Glosario de Términos de Reacción</target>
        </trans-unit>
        <trans-unit id="c8a8632c801140a5a9de611953f386d1dbbf8845" translate="yes" xml:space="preserve">
          <source>Go to your project folder in the terminal, and paste these two commands:</source>
          <target state="translated">Ve a tu carpeta de proyectos en la terminal y pega estos dos comandos:</target>
        </trans-unit>
        <trans-unit id="d182bef8d5f2839f88903394bb60f7e51fd6c42c" translate="yes" xml:space="preserve">
          <source>Google Chromebook Help - Use the Built-in Screen Reader</source>
          <target state="translated">Ayuda de Google Chromebook:utiliza el lector de pantalla integrado</target>
        </trans-unit>
        <trans-unit id="bcf36c27c78804650761947c87a38f4f6e07ce7e" translate="yes" xml:space="preserve">
          <source>Gradual Adoption Strategy</source>
          <target state="translated">Estrategia de adopción gradual</target>
        </trans-unit>
        <trans-unit id="428e0a93f1ac72bcc666336cd6d935f2d9640d9e" translate="yes" xml:space="preserve">
          <source>Gradual Upgrades via Warnings</source>
          <target state="translated">Mejoras graduales a través de advertencias</target>
        </trans-unit>
        <trans-unit id="58273e47057ce993d5fd97a4eb4dface99c26929" translate="yes" xml:space="preserve">
          <source>Great! Now when we run our build script the compiler will output the generated javascript to the &lt;code&gt;build&lt;/code&gt; folder. The &lt;a href=&quot;https://github.com/Microsoft/TypeScript-React-Starter/blob/master/tsconfig.json&quot;&gt;TypeScript React Starter&lt;/a&gt; provides a &lt;code&gt;tsconfig.json&lt;/code&gt; with a good set of rules to get you started.</source>
          <target state="translated">&amp;iexcl;Excelente! Ahora, cuando ejecutamos nuestro script de compilaci&amp;oacute;n, el compilador enviar&amp;aacute; el javascript generado a la carpeta de &lt;code&gt;build&lt;/code&gt; . El &lt;a href=&quot;https://github.com/Microsoft/TypeScript-React-Starter/blob/master/tsconfig.json&quot;&gt;TypeScript React Starter&lt;/a&gt; proporciona un &lt;code&gt;tsconfig.json&lt;/code&gt; con un buen conjunto de reglas para comenzar.</target>
        </trans-unit>
        <trans-unit id="72b257d572f9de8cb600dc9ff344b295b0affeca" translate="yes" xml:space="preserve">
          <source>Grouping by features or routes</source>
          <target state="translated">Agrupación por características o rutas</target>
        </trans-unit>
        <trans-unit id="b7fd6516d065f4d8e30a111bc4d1476d4af19bbe" translate="yes" xml:space="preserve">
          <source>Grouping by file type</source>
          <target state="translated">Agrupación por tipo de archivo</target>
        </trans-unit>
        <trans-unit id="b02dd6f98e40fbc355cf17dc049baecc28173b57" translate="yes" xml:space="preserve">
          <source>HOCs add features to a component. They shouldn&amp;rsquo;t drastically alter its contract. It&amp;rsquo;s expected that the component returned from a HOC has a similar interface to the wrapped component.</source>
          <target state="translated">Los HOC agregan caracter&amp;iacute;sticas a un componente. No deber&amp;iacute;an alterar dr&amp;aacute;sticamente su contrato. Se espera que el componente devuelto por un HOC tenga una interfaz similar al componente empaquetado.</target>
        </trans-unit>
        <trans-unit id="063035c50f06bf73e08fe91d42e9d79e9dcc00b0" translate="yes" xml:space="preserve">
          <source>HOCs are common in third-party React libraries, such as Redux&amp;rsquo;s &lt;a href=&quot;https://github.com/reduxjs/react-redux/blob/master/docs/api/connect.md#connect&quot;&gt;&lt;code&gt;connect&lt;/code&gt;&lt;/a&gt; and Relay&amp;rsquo;s &lt;a href=&quot;http://facebook.github.io/relay/docs/en/fragment-container.html&quot;&gt;&lt;code&gt;createFragmentContainer&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">Los HOC son comunes en bibliotecas React de terceros, como la &lt;a href=&quot;https://github.com/reduxjs/react-redux/blob/master/docs/api/connect.md#connect&quot;&gt; &lt;code&gt;connect&lt;/code&gt; &lt;/a&gt; de Redux y la &lt;a href=&quot;http://facebook.github.io/relay/docs/en/fragment-container.html&quot;&gt; &lt;code&gt;createFragmentContainer&lt;/code&gt; &lt;/a&gt; de Relay .</target>
        </trans-unit>
        <trans-unit id="5c8962b048f87decc8156392f32206c1be5db772" translate="yes" xml:space="preserve">
          <source>HOCs should pass through props that are unrelated to its specific concern. Most HOCs contain a render method that looks something like this:</source>
          <target state="translated">Los COH deben pasar a través de los accesorios que no están relacionados con su preocupación específica.La mayoría de los HOC contienen un método de representación que se parece a esto:</target>
        </trans-unit>
        <trans-unit id="90574747f52ec1f5009a45ed8d33cb2283639a02" translate="yes" xml:space="preserve">
          <source>HTML form elements work a little bit differently from other DOM elements in React, because form elements naturally keep some internal state. For example, this form in plain HTML accepts a single name:</source>
          <target state="translated">Los elementos de forma HTML funcionan un poco diferente de otros elementos DOM en React,porque los elementos de forma mantienen naturalmente algún estado interno.Por ejemplo,este formulario en HTML plano acepta un solo nombre:</target>
        </trans-unit>
        <trans-unit id="0d2d67fd740d7ec7df3d8674c33679652ab92712" translate="yes" xml:space="preserve">
          <source>Handling Errors</source>
          <target state="translated">Manejo de errores</target>
        </trans-unit>
        <trans-unit id="d425f7e27fe0f057871c46f4c72c4a3bd2b0f136" translate="yes" xml:space="preserve">
          <source>Handling Events</source>
          <target state="translated">Manejar los eventos</target>
        </trans-unit>
        <trans-unit id="a45618425a820085679577753f54c9b8cd00317e" translate="yes" xml:space="preserve">
          <source>Handling Multiple Inputs</source>
          <target state="translated">Manejo de múltiples entradas</target>
        </trans-unit>
        <trans-unit id="af96eff387bd2ffe3a5340f3ed51fac600fd535c" translate="yes" xml:space="preserve">
          <source>Handling events with React elements has some syntactic differences:</source>
          <target state="translated">El manejo de eventos con elementos de Reactancia tiene algunas diferencias sintácticas:</target>
        </trans-unit>
        <trans-unit id="d5e781a7966802398bc6183dffb3545a19611d53" translate="yes" xml:space="preserve">
          <source>Handling events with React elements is very similar to handling events on DOM elements. There are some syntactic differences:</source>
          <target state="translated">El manejo de eventos con elementos de Reactancia es muy similar al manejo de eventos con elementos de DOM.Hay algunas diferencias sintácticas:</target>
        </trans-unit>
        <trans-unit id="47bdd35246e7567f551a4817bb36764578de248d" translate="yes" xml:space="preserve">
          <source>Handling events with React elements is very similar to handling events on DOM elements. There are some syntax differences:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="710df444e674bad2b7f10527830ac10000028b6c" translate="yes" xml:space="preserve">
          <source>Here are some good resources for further reading on when to use &lt;code&gt;props&lt;/code&gt; vs &lt;code&gt;state&lt;/code&gt;:</source>
          <target state="translated">Aqu&amp;iacute; hay algunos buenos recursos para leer m&amp;aacute;s sobre cu&amp;aacute;ndo usar &lt;code&gt;props&lt;/code&gt; frente a &lt;code&gt;state&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="0fa9e19aaf02a489848d103e6df5f48fd01b2888" translate="yes" xml:space="preserve">
          <source>Here is &lt;a href=&quot;https://reactjs.org/redirect-to-codepen/reconciliation/index-used-as-key&quot;&gt;an example of the issues that can be caused by using indexes as keys&lt;/a&gt; on CodePen, and here is &lt;a href=&quot;https://reactjs.org/redirect-to-codepen/reconciliation/no-index-used-as-key&quot;&gt;an updated version of the same example showing how not using indexes as keys will fix these reordering, sorting, and prepending issues&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2a3421fa1b421c70fdf50bc5b3706d1884ec45d9" translate="yes" xml:space="preserve">
          <source>Here is a &lt;a href=&quot;https://codesandbox.io/s/jvvkoo8pq3&quot;&gt;small demo&lt;/a&gt; to get you started. To learn more, check out &lt;a href=&quot;https://www.robinwieruch.de/react-hooks-fetch-data/&quot;&gt;this article&lt;/a&gt; about data fetching with Hooks.</source>
          <target state="translated">Aqu&amp;iacute; hay una &lt;a href=&quot;https://codesandbox.io/s/jvvkoo8pq3&quot;&gt;peque&amp;ntilde;a demostraci&amp;oacute;n&lt;/a&gt; para comenzar. Para obtener m&amp;aacute;s informaci&amp;oacute;n, consulte &lt;a href=&quot;https://www.robinwieruch.de/react-hooks-fetch-data/&quot;&gt;este art&amp;iacute;culo&lt;/a&gt; sobre la obtenci&amp;oacute;n de datos con Hooks.</target>
        </trans-unit>
        <trans-unit id="c8317f95e08c6543e53027d145f8eddcf023d7fe" translate="yes" xml:space="preserve">
          <source>Here is a step-by-step explanation of what happens in the above example:</source>
          <target state="translated">He aquí una explicación paso a paso de lo que sucede en el ejemplo anterior:</target>
        </trans-unit>
        <trans-unit id="10e83a22ccb4f6fc7030872a422ceee48e5b88b6" translate="yes" xml:space="preserve">
          <source>Here is an &lt;a href=&quot;reconciliation#recursing-on-children&quot;&gt;in-depth explanation about why keys are necessary&lt;/a&gt; if you&amp;rsquo;re interested in learning more.</source>
          <target state="translated">Aqu&amp;iacute; hay una &lt;a href=&quot;reconciliation#recursing-on-children&quot;&gt;explicaci&amp;oacute;n detallada sobre por qu&amp;eacute; las claves son necesarias&lt;/a&gt; si est&amp;aacute; interesado en aprender m&amp;aacute;s.</target>
        </trans-unit>
        <trans-unit id="469c11af4fb767b071b7bc9fc6660c36d0303d75" translate="yes" xml:space="preserve">
          <source>Here is an example documenting the different validators provided:</source>
          <target state="translated">He aquí un ejemplo que documenta los diferentes validadores proporcionados:</target>
        </trans-unit>
        <trans-unit id="dd61c330907127ed38d293d1d4af5a24b4c290e7" translate="yes" xml:space="preserve">
          <source>Here is how we can test it:</source>
          <target state="translated">Así es como podemos probarlo:</target>
        </trans-unit>
        <trans-unit id="3102275a43d8c23e8b4c58890783bfe23456b8e1" translate="yes" xml:space="preserve">
          <source>Here is the equivalent with &lt;a href=&quot;hooks-intro&quot;&gt;Hooks&lt;/a&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="36728af60fa3c9f7c434352505e9201caca43d44" translate="yes" xml:space="preserve">
          <source>Here we require knowledge of &lt;a href=&quot;https://www.w3.org/TR/wai-aria/#roles&quot;&gt;ARIA Roles&lt;/a&gt; as well as &lt;a href=&quot;https://www.w3.org/TR/wai-aria/#states_and_properties&quot;&gt;ARIA States and Properties&lt;/a&gt;. These are toolboxes filled with HTML attributes that are fully supported in JSX and enable us to construct fully accessible, highly functional React components.</source>
          <target state="translated">Aqu&amp;iacute; necesitamos conocimiento de los &lt;a href=&quot;https://www.w3.org/TR/wai-aria/#roles&quot;&gt;roles&lt;/a&gt; de ARIA , as&amp;iacute; como de los &lt;a href=&quot;https://www.w3.org/TR/wai-aria/#states_and_properties&quot;&gt;estados y propiedades de ARIA&lt;/a&gt; . Estas son cajas de herramientas llenas de atributos HTML que son totalmente compatibles con JSX y nos permiten construir componentes React totalmente accesibles y altamente funcionales.</target>
        </trans-unit>
        <trans-unit id="dc9d8cd325a00d9730f610bfeca5652d530f0f8e" translate="yes" xml:space="preserve">
          <source>Here&amp;rsquo;s a subtree of components. For each one, &lt;code&gt;SCU&lt;/code&gt; indicates what &lt;code&gt;shouldComponentUpdate&lt;/code&gt; returned, and &lt;code&gt;vDOMEq&lt;/code&gt; indicates whether the rendered React elements were equivalent. Finally, the circle&amp;rsquo;s color indicates whether the component had to be reconciled or not.</source>
          <target state="translated">Aqu&amp;iacute; hay un sub&amp;aacute;rbol de componentes. Para cada uno, &lt;code&gt;SCU&lt;/code&gt; indica qu&amp;eacute; &lt;code&gt;shouldComponentUpdate&lt;/code&gt; devolvi&amp;oacute;, y &lt;code&gt;vDOMEq&lt;/code&gt; indica si los elementos React renderizados eran equivalentes. Finalmente, el color del c&amp;iacute;rculo indica si el componente ten&amp;iacute;a que conciliarse o no.</target>
        </trans-unit>
        <trans-unit id="3e5e88093705abf9b440083ab6665499dccb5254" translate="yes" xml:space="preserve">
          <source>Here&amp;rsquo;s an example of how to setup route-based code splitting into your app using libraries like &lt;a href=&quot;https://reacttraining.com/react-router/&quot;&gt;React Router&lt;/a&gt; with &lt;code&gt;React.lazy&lt;/code&gt;.</source>
          <target state="translated">Aqu&amp;iacute; hay un ejemplo de c&amp;oacute;mo configurar la divisi&amp;oacute;n de c&amp;oacute;digo basado en rutas en su aplicaci&amp;oacute;n utilizando bibliotecas como &lt;a href=&quot;https://reacttraining.com/react-router/&quot;&gt;React Router&lt;/a&gt; con &lt;code&gt;React.lazy&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="983fc3a4301db31eed982a269174f75044f4d44b" translate="yes" xml:space="preserve">
          <source>Here&amp;rsquo;s the counter example from the &lt;a href=&quot;#usestate&quot;&gt;&lt;code&gt;useState&lt;/code&gt;&lt;/a&gt; section, rewritten to use a reducer:</source>
          <target state="translated">Aqu&amp;iacute; est&amp;aacute; el ejemplo de contador de la secci&amp;oacute;n &lt;a href=&quot;#usestate&quot;&gt; &lt;code&gt;useState&lt;/code&gt; &lt;/a&gt; , reescrito para usar un reductor:</target>
        </trans-unit>
        <trans-unit id="6ccd56b3438af9572583e63a1873615e49b63ab1" translate="yes" xml:space="preserve">
          <source>Here&amp;rsquo;s what happens when we render &lt;code&gt;&amp;lt;ProfilePage&amp;gt;&lt;/code&gt; on the screen:</source>
          <target state="translated">Esto es lo que sucede cuando representamos &lt;code&gt;&amp;lt;ProfilePage&amp;gt;&lt;/code&gt; en la pantalla:</target>
        </trans-unit>
        <trans-unit id="23a6a5eadd7c0a89a44b430f4d016d98f4bf2e1e" translate="yes" xml:space="preserve">
          <source>Here&amp;rsquo;s where the render prop comes in: Instead of hard-coding a &lt;code&gt;&amp;lt;Cat&amp;gt;&lt;/code&gt; inside a &lt;code&gt;&amp;lt;Mouse&amp;gt;&lt;/code&gt; component, and effectively changing its rendered output, we can provide &lt;code&gt;&amp;lt;Mouse&amp;gt;&lt;/code&gt; with a function prop that it uses to dynamically determine what to render&amp;ndash;a render prop.</source>
          <target state="translated">Aqu&amp;iacute; es donde entra en juego el prop de renderizado: en lugar de codificar un &lt;code&gt;&amp;lt;Cat&amp;gt;&lt;/code&gt; dentro de un componente &lt;code&gt;&amp;lt;Mouse&amp;gt;&lt;/code&gt; y cambiar efectivamente su salida renderizada, podemos proporcionar a &lt;code&gt;&amp;lt;Mouse&amp;gt;&lt;/code&gt; un prop de funci&amp;oacute;n que utiliza para determinar din&amp;aacute;micamente qu&amp;eacute; renderizar. &amp;ndash;Un accesorio de renderizado.</target>
        </trans-unit>
        <trans-unit id="4fc4a89b23c19ca1c558111776c4ec5e877854de" translate="yes" xml:space="preserve">
          <source>Here, &lt;code&gt;e&lt;/code&gt; is a synthetic event. React defines these synthetic events according to the &lt;a href=&quot;https://www.w3.org/TR/DOM-Level-3-Events/&quot;&gt;W3C spec&lt;/a&gt;, so you don&amp;rsquo;t need to worry about cross-browser compatibility. React events do not work exactly the same as native events. See the &lt;a href=&quot;events&quot;&gt;&lt;code&gt;SyntheticEvent&lt;/code&gt;&lt;/a&gt; reference guide to learn more.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f2ee35e6fcb6ceeda6ad5733dbfe3081d417836a" translate="yes" xml:space="preserve">
          <source>Here, &lt;code&gt;e&lt;/code&gt; is a synthetic event. React defines these synthetic events according to the &lt;a href=&quot;https://www.w3.org/TR/DOM-Level-3-Events/&quot;&gt;W3C spec&lt;/a&gt;, so you don&amp;rsquo;t need to worry about cross-browser compatibility. See the &lt;a href=&quot;events&quot;&gt;&lt;code&gt;SyntheticEvent&lt;/code&gt;&lt;/a&gt; reference guide to learn more.</source>
          <target state="translated">Aqu&amp;iacute;, &lt;code&gt;e&lt;/code&gt; es un evento sint&amp;eacute;tico. React define estos eventos sint&amp;eacute;ticos de acuerdo con la &lt;a href=&quot;https://www.w3.org/TR/DOM-Level-3-Events/&quot;&gt;especificaci&amp;oacute;n W3C&lt;/a&gt; , por lo que no necesita preocuparse por la compatibilidad entre navegadores. Consulte la gu&amp;iacute;a de referencia &lt;a href=&quot;events&quot;&gt; &lt;code&gt;SyntheticEvent&lt;/code&gt; &lt;/a&gt; para obtener m&amp;aacute;s informaci&amp;oacute;n.</target>
        </trans-unit>
        <trans-unit id="fc55606f595a34d3c61c69e9ffbf6a6904254c39" translate="yes" xml:space="preserve">
          <source>Here, &lt;code&gt;useState&lt;/code&gt; is a &lt;em&gt;Hook&lt;/em&gt; (we&amp;rsquo;ll talk about what this means in a moment). We call it inside a function component to add some local state to it. React will preserve this state between re-renders. &lt;code&gt;useState&lt;/code&gt; returns a pair: the &lt;em&gt;current&lt;/em&gt; state value and a function that lets you update it. You can call this function from an event handler or somewhere else. It&amp;rsquo;s similar to &lt;code&gt;this.setState&lt;/code&gt; in a class, except it doesn&amp;rsquo;t merge the old and new state together. (We&amp;rsquo;ll show an example comparing &lt;code&gt;useState&lt;/code&gt; to &lt;code&gt;this.state&lt;/code&gt; in &lt;a href=&quot;hooks-state&quot;&gt;Using the State Hook&lt;/a&gt;.)</source>
          <target state="translated">Aqu&amp;iacute;, &lt;code&gt;useState&lt;/code&gt; es un &lt;em&gt;Hook&lt;/em&gt; (hablaremos sobre lo que esto significa en un momento). Lo llamamos dentro de un componente de funci&amp;oacute;n para agregarle un estado local. React conservar&amp;aacute; este estado entre re-renderizaciones. &lt;code&gt;useState&lt;/code&gt; devuelve un par: el valor del estado &lt;em&gt;actual&lt;/em&gt; y una funci&amp;oacute;n que le permite actualizarlo. Puede llamar a esta funci&amp;oacute;n desde un controlador de eventos o desde otro lugar. Es similar a &lt;code&gt;this.setState&lt;/code&gt; en una clase, excepto que no fusiona el estado antiguo y el nuevo. ( &lt;code&gt;useState&lt;/code&gt; un ejemplo que compara useState con &lt;code&gt;this.state&lt;/code&gt; en &lt;a href=&quot;hooks-state&quot;&gt;Using the State Hook&lt;/a&gt; .)</target>
        </trans-unit>
        <trans-unit id="62ba3ca71c800446a468a8f1df328896c57eaf85" translate="yes" xml:space="preserve">
          <source>Here, we store the previous value of the &lt;code&gt;row&lt;/code&gt; prop in a state variable so that we can compare:</source>
          <target state="translated">Aqu&amp;iacute;, almacenamos el valor anterior de la propiedad de &lt;code&gt;row&lt;/code&gt; en una variable de estado para que podamos comparar:</target>
        </trans-unit>
        <trans-unit id="694a8ab065bc1ddcb8bfd82b16d99febb5b29744" translate="yes" xml:space="preserve">
          <source>Heydon Pickering - ARIA Examples</source>
          <target state="translated">Heydon Pickering-ARIA Ejemplos</target>
        </trans-unit>
        <trans-unit id="9949204d6ccc01e71532e6b5a07e754220b79927" translate="yes" xml:space="preserve">
          <source>Higher-Order Components</source>
          <target state="translated">Componentes de orden superior</target>
        </trans-unit>
        <trans-unit id="020cce2b859c795f0df3f5cefeb0457647d208e5" translate="yes" xml:space="preserve">
          <source>Higher-order components come with a few caveats that aren&amp;rsquo;t immediately obvious if you&amp;rsquo;re new to React.</source>
          <target state="translated">Los componentes de orden superior vienen con algunas advertencias que no son obvias de inmediato si eres nuevo en React.</target>
        </trans-unit>
        <trans-unit id="4bd8f3f03a576b2088bd73a2339d07fca1de805d" translate="yes" xml:space="preserve">
          <source>Hooks</source>
          <target state="translated">Hooks</target>
        </trans-unit>
        <trans-unit id="5f4d9480b4df0d6e740642769da4ab963d23e1df" translate="yes" xml:space="preserve">
          <source>Hooks &lt;strong&gt;don&amp;rsquo;t&lt;/strong&gt; work inside classes. But you can use them instead of writing classes.</source>
          <target state="translated">Los ganchos &lt;strong&gt;no&lt;/strong&gt; funcionan dentro de las clases. Pero puedes usarlos en lugar de clases de escritura.</target>
        </trans-unit>
        <trans-unit id="6346e065d302bd612cb57acc37b5c4b2d11b5c55" translate="yes" xml:space="preserve">
          <source>Hooks API Reference</source>
          <target state="translated">Referencia de la API de los ganchos</target>
        </trans-unit>
        <trans-unit id="83f68a3284889949ad8da40e185f437f9cd788cc" translate="yes" xml:space="preserve">
          <source>Hooks FAQ</source>
          <target state="translated">Preguntas frecuentes sobre ganchos</target>
        </trans-unit>
        <trans-unit id="6741749abbd97e5aa67270b4114318826ae8ec0d" translate="yes" xml:space="preserve">
          <source>Hooks and Function Components</source>
          <target state="translated">Ganchos y componentes de la función</target>
        </trans-unit>
        <trans-unit id="984e9f1dce4f6c473f93ec63fbba28614d61a0c3" translate="yes" xml:space="preserve">
          <source>Hooks are &lt;a href=&quot;hooks-intro#no-breaking-changes&quot;&gt;backwards-compatible&lt;/a&gt;. This page provides an overview of Hooks for experienced React users. This is a fast-paced overview. If you get confused, look for a yellow box like this:</source>
          <target state="translated">Los ganchos son &lt;a href=&quot;hooks-intro#no-breaking-changes&quot;&gt;compatibles con versiones anteriores&lt;/a&gt; . Esta p&amp;aacute;gina proporciona una descripci&amp;oacute;n general de Hooks para usuarios experimentados de React. Esta es una descripci&amp;oacute;n general r&amp;aacute;pida. Si se confunde, busque un cuadro amarillo como este:</target>
        </trans-unit>
        <trans-unit id="de1b424d96849c452e8623c3aff21cbd2124f794" translate="yes" xml:space="preserve">
          <source>Hooks are JavaScript functions, but they impose two additional rules:</source>
          <target state="translated">Los ganchos son funciones de JavaScript,pero imponen dos reglas adicionales:</target>
        </trans-unit>
        <trans-unit id="c38711e94905b544d78f9780d3bf6f82e5586c52" translate="yes" xml:space="preserve">
          <source>Hooks are JavaScript functions, but you need to follow two rules when using them. We provide a &lt;a href=&quot;https://www.npmjs.com/package/eslint-plugin-react-hooks&quot;&gt;linter plugin&lt;/a&gt; to enforce these rules automatically:</source>
          <target state="translated">Los ganchos son funciones de JavaScript, pero debe seguir dos reglas al usarlas. Proporcionamos un &lt;a href=&quot;https://www.npmjs.com/package/eslint-plugin-react-hooks&quot;&gt;complemento linter&lt;/a&gt; para hacer cumplir estas reglas autom&amp;aacute;ticamente:</target>
        </trans-unit>
        <trans-unit id="12baa054732ac507c2f0e0ac9c1bc905d155c97a" translate="yes" xml:space="preserve">
          <source>Hooks are a more direct way to use the React features you already know &amp;mdash; such as state, lifecycle, context, and refs. They don&amp;rsquo;t fundamentally change how React works, and your knowledge of components, props, and top-down data flow is just as relevant.</source>
          <target state="translated">Los hooks son una forma m&amp;aacute;s directa de usar las funciones de React que ya conoce, como el estado, el ciclo de vida, el contexto y las referencias. No cambian fundamentalmente el funcionamiento de React, y su conocimiento de los componentes, los accesorios y el flujo de datos de arriba hacia abajo es igualmente relevante.</target>
        </trans-unit>
        <trans-unit id="b3dffafdaf027921074c093681b6b2fa42d7706d" translate="yes" xml:space="preserve">
          <source>Hooks are called in the same order on every render.</source>
          <target state="translated">Los ganchos se llaman en el mismo orden en cada representación.</target>
        </trans-unit>
        <trans-unit id="4f6e49743738970df49a4e276c80da3002abd881" translate="yes" xml:space="preserve">
          <source>Hooks are functions that let you &amp;ldquo;hook into&amp;rdquo; React state and lifecycle features from function components. Hooks don&amp;rsquo;t work inside classes &amp;mdash; they let you use React without classes. (We &lt;a href=&quot;hooks-intro#gradual-adoption-strategy&quot;&gt;don&amp;rsquo;t recommend&lt;/a&gt; rewriting your existing components overnight but you can start using Hooks in the new ones if you&amp;rsquo;d like.)</source>
          <target state="translated">Los enganches son funciones que le permiten &quot;conectarse&quot; al estado de React y las caracter&amp;iacute;sticas del ciclo de vida de los componentes de la funci&amp;oacute;n. Los Hooks no funcionan dentro de las clases, te permiten usar React sin clases. (No &lt;a href=&quot;hooks-intro#gradual-adoption-strategy&quot;&gt;recomendamos&lt;/a&gt; reescribir sus componentes existentes de la noche a la ma&amp;ntilde;ana, pero puede comenzar a usar Hooks en los nuevos si lo desea).</target>
        </trans-unit>
        <trans-unit id="ea0760f5cbbc31d25fdb696fae6c90d049a7e43f" translate="yes" xml:space="preserve">
          <source>Hooks at a Glance</source>
          <target state="translated">Ganchos de un vistazo</target>
        </trans-unit>
        <trans-unit id="d26a024e6656cfd225f9b3faaf69112eb79c72b0" translate="yes" xml:space="preserve">
          <source>Hooks avoid a lot of the overhead that classes require, like the cost of creating class instances and binding event handlers in the constructor.</source>
          <target state="translated">Los ganchos evitan muchos de los gastos generales que requieren las clases,como el costo de crear instancias de clase y vincular a los manejadores de eventos en el constructor.</target>
        </trans-unit>
        <trans-unit id="c4f46f02e8a51698c3e23f41f8d864b3b26080e0" translate="yes" xml:space="preserve">
          <source>Hooks do have a learning curve of their own. If there&amp;rsquo;s something missing in this documentation, &lt;a href=&quot;https://github.com/reactjs/reactjs.org/issues/new&quot;&gt;raise an issue&lt;/a&gt; and we&amp;rsquo;ll try to help.</source>
          <target state="translated">Los ganchos tienen una curva de aprendizaje propia. Si falta algo en esta documentaci&amp;oacute;n, &lt;a href=&quot;https://github.com/reactjs/reactjs.org/issues/new&quot;&gt;plantee un problema&lt;/a&gt; e intentaremos ayudarlo.</target>
        </trans-unit>
        <trans-unit id="e78aadbe4b447f0e05b05e1acb099273d9660236" translate="yes" xml:space="preserve">
          <source>Hooks let you organize side effects in a component by what pieces are related (such as adding and removing a subscription), rather than forcing a split based on lifecycle methods.</source>
          <target state="translated">Los ganchos permiten organizar los efectos secundarios de un componente según las piezas que se relacionan (como agregar y quitar una suscripción),en lugar de forzar una división basada en los métodos del ciclo de vida.</target>
        </trans-unit>
        <trans-unit id="4fd8adc24c90fba774c6fae7ebe2e06da199b06e" translate="yes" xml:space="preserve">
          <source>Hooks offer a powerful and expressive new way to reuse functionality between components. &lt;a href=&quot;hooks-custom&quot;&gt;&amp;ldquo;Building Your Own Hooks&amp;rdquo;&lt;/a&gt; provides a glimpse of what&amp;rsquo;s possible. &lt;a href=&quot;https://medium.com/@dan_abramov/making-sense-of-react-hooks-fdbde8803889&quot;&gt;This article&lt;/a&gt; by a React core team member dives deeper into the new capabilities unlocked by Hooks.</source>
          <target state="translated">Los ganchos ofrecen una nueva forma potente y expresiva de reutilizar la funcionalidad entre componentes. &lt;a href=&quot;hooks-custom&quot;&gt;&quot;Construyendo sus propios ganchos&quot;&lt;/a&gt; ofrece una idea de lo que es posible. &lt;a href=&quot;https://medium.com/@dan_abramov/making-sense-of-react-hooks-fdbde8803889&quot;&gt;Este art&amp;iacute;culo&lt;/a&gt; de un miembro del equipo central de React profundiza en las nuevas capacidades desbloqueadas por Hooks.</target>
        </trans-unit>
        <trans-unit id="beee8e71e8faa563add416aa12ae92953a859ef1" translate="yes" xml:space="preserve">
          <source>Hooks solve a wide variety of seemingly unconnected problems in React that we&amp;rsquo;ve encountered over five years of writing and maintaining tens of thousands of components. Whether you&amp;rsquo;re learning React, use it daily, or even prefer a different library with a similar component model, you might recognize some of these problems.</source>
          <target state="translated">Los Hooks resuelven una amplia variedad de problemas aparentemente inconexos en React que hemos encontrado durante cinco a&amp;ntilde;os de escritura y mantenimiento de decenas de miles de componentes. Ya sea que est&amp;eacute; aprendiendo React, lo use a diario o incluso prefiera una biblioteca diferente con un modelo de componente similar, es posible que reconozca algunos de estos problemas.</target>
        </trans-unit>
        <trans-unit id="125ff9caefd47f46f6f9836d25c8aeb5965e4029" translate="yes" xml:space="preserve">
          <source>Hooks synthesize ideas from several different sources:</source>
          <target state="translated">Los ganchos sintetizan ideas de varias fuentes diferentes:</target>
        </trans-unit>
        <trans-unit id="9ddd1c044852bd20a73c95243ed31e59f05c49ac" translate="yes" xml:space="preserve">
          <source>Hooks were designed with static typing in mind. Because they&amp;rsquo;re functions, they are easier to type correctly than patterns like higher-order components. The latest Flow and TypeScript React definitions include support for React Hooks.</source>
          <target state="translated">Los ganchos se dise&amp;ntilde;aron teniendo en cuenta la escritura est&amp;aacute;tica. Debido a que son funciones, son m&amp;aacute;s f&amp;aacute;ciles de escribir correctamente que los patrones como componentes de orden superior. Las &amp;uacute;ltimas definiciones de React de Flow y TypeScript incluyen soporte para React Hooks.</target>
        </trans-unit>
        <trans-unit id="3263600c56483c0a3a486401c7c00425cf496889" translate="yes" xml:space="preserve">
          <source>Hopefully, this gives you an idea of how to think about building components and applications with React. While it may be a little more typing than you&amp;rsquo;re used to, remember that code is read far more than it&amp;rsquo;s written, and it&amp;rsquo;s less difficult to read this modular, explicit code. As you start to build large libraries of components, you&amp;rsquo;ll appreciate this explicitness and modularity, and with code reuse, your lines of code will start to shrink. :)</source>
          <target state="translated">Con suerte, esto le dar&amp;aacute; una idea de c&amp;oacute;mo pensar en la construcci&amp;oacute;n de componentes y aplicaciones con React. Si bien puede ser un poco m&amp;aacute;s de escritura de lo que est&amp;aacute; acostumbrado, recuerde que el c&amp;oacute;digo se lee mucho m&amp;aacute;s de lo que se escribe, y es menos dif&amp;iacute;cil leer este c&amp;oacute;digo modular y expl&amp;iacute;cito. A medida que comience a crear grandes bibliotecas de componentes, apreciar&amp;aacute; esta expl&amp;iacute;cita y modularidad, y con la reutilizaci&amp;oacute;n del c&amp;oacute;digo, sus l&amp;iacute;neas de c&amp;oacute;digo comenzar&amp;aacute;n a encogerse. :)</target>
        </trans-unit>
        <trans-unit id="692095ebf5adc28ef5dd43de59073c7e0f30fed7" translate="yes" xml:space="preserve">
          <source>How About Event Handlers?</source>
          <target state="translated">¿Qué hay de los manejadores de eventos?</target>
        </trans-unit>
        <trans-unit id="cb6ede7c8218456d272e15d1df527222761a5d58" translate="yes" xml:space="preserve">
          <source>How About try/catch?</source>
          <target state="translated">¿Y qué hay de la prueba/tratamiento?</target>
        </trans-unit>
        <trans-unit id="10f9d04f7128ff4e06c8d87250d8e47453873aca" translate="yes" xml:space="preserve">
          <source>How Can I Learn More About Experimental Features?</source>
          <target state="translated">¿Cómo puedo aprender más sobre las características experimentales?</target>
        </trans-unit>
        <trans-unit id="6b32b4ad6bd37176faffadb32d22a8289534a746" translate="yes" xml:space="preserve">
          <source>How To Use Context</source>
          <target state="translated">Cómo usar el contexto</target>
        </trans-unit>
        <trans-unit id="0d3b1dc4703059a43990fb4f54a82b7ea462210e" translate="yes" xml:space="preserve">
          <source>How can I do data fetching with Hooks?</source>
          <target state="translated">¿Cómo puedo hacer la búsqueda de datos con Hooks?</target>
        </trans-unit>
        <trans-unit id="5f3eb93766a70bcb23bd57b5f81706e1346cc00b" translate="yes" xml:space="preserve">
          <source>How can I make an AJAX call?</source>
          <target state="translated">¿Cómo puedo hacer una llamada AJAX?</target>
        </trans-unit>
        <trans-unit id="d65c5d09d6ca3b416e582fadae15682637bf85c2" translate="yes" xml:space="preserve">
          <source>How can I measure a DOM node?</source>
          <target state="translated">¿Cómo puedo medir un nodo DOM?</target>
        </trans-unit>
        <trans-unit id="fe8a15cb87dd32841f00b87b456991b2721d9c55" translate="yes" xml:space="preserve">
          <source>How can I prevent a function from being called too quickly or too many times in a row?</source>
          <target state="translated">¿Cómo puedo evitar que se llame a una función demasiado rápido o demasiadas veces seguidas?</target>
        </trans-unit>
        <trans-unit id="6aec71a52b9be72fd0463ec529f9c780d7f499e0" translate="yes" xml:space="preserve">
          <source>How can I write comments in JSX?</source>
          <target state="translated">¿Cómo puedo escribir comentarios en JSX?</target>
        </trans-unit>
        <trans-unit id="83d4d9bc9ea4bb507420dda2c277f59106d4c62f" translate="yes" xml:space="preserve">
          <source>How do I add CSS classes to components?</source>
          <target state="translated">¿Cómo puedo añadir clases CSS a los componentes?</target>
        </trans-unit>
        <trans-unit id="81a15ac345101e045ea595d31734e8063db66661" translate="yes" xml:space="preserve">
          <source>How do I bind a function to a component instance?</source>
          <target state="translated">¿Cómo puedo vincular una función a una instancia componente?</target>
        </trans-unit>
        <trans-unit id="aa62b3618db8ebfa8f917b302351ed7099483e1f" translate="yes" xml:space="preserve">
          <source>How do I implement &lt;code&gt;getDerivedStateFromProps&lt;/code&gt;?</source>
          <target state="translated">&amp;iquest;C&amp;oacute;mo implemento &lt;code&gt;getDerivedStateFromProps&lt;/code&gt; ?</target>
        </trans-unit>
        <trans-unit id="d0572ad330916c3fe730299d4ede58b185b5ca13" translate="yes" xml:space="preserve">
          <source>How do I implement &lt;code&gt;shouldComponentUpdate&lt;/code&gt;?</source>
          <target state="translated">&amp;iquest;C&amp;oacute;mo implemento &lt;code&gt;shouldComponentUpdate&lt;/code&gt; ?</target>
        </trans-unit>
        <trans-unit id="fb9e955accc6d91168550466054bc2a0652117d7" translate="yes" xml:space="preserve">
          <source>How do I implement getDerivedStateFromProps?</source>
          <target state="translated">¿Cómo implemento getDerivedStateFromProps?</target>
        </trans-unit>
        <trans-unit id="e9415649ba2cf6fdc23c48d06f17328a84773eae" translate="yes" xml:space="preserve">
          <source>How do I implement shouldComponentUpdate?</source>
          <target state="translated">¿Cómo implemento shouldComponentUpdate?</target>
        </trans-unit>
        <trans-unit id="d0ca0d1ae983bdbef86eee8bd0c53b191176837f" translate="yes" xml:space="preserve">
          <source>How do I pass a parameter to an event handler or callback?</source>
          <target state="translated">¿Cómo paso un parámetro a un manejador de eventos o a una devolución de llamada?</target>
        </trans-unit>
        <trans-unit id="38b2ecaed14852353d71b3ff348314158c48bfb1" translate="yes" xml:space="preserve">
          <source>How do I pass an event handler (like onClick) to a component?</source>
          <target state="translated">¿Cómo paso un manejador de eventos (como onClick)a un componente?</target>
        </trans-unit>
        <trans-unit id="b0b4082736e34d847d56b0cabd7b94a845d15d06" translate="yes" xml:space="preserve">
          <source>How do I update state with values that depend on the current state?</source>
          <target state="translated">¿Cómo actualizo el estado con valores que dependen del estado actual?</target>
        </trans-unit>
        <trans-unit id="1571c2b05260a179a5c52b92711d13ace65d09c2" translate="yes" xml:space="preserve">
          <source>How do lifecycle methods correspond to Hooks?</source>
          <target state="translated">¿Cómo se corresponden los métodos del ciclo de vida con los ganchos?</target>
        </trans-unit>
        <trans-unit id="ef86d6c075ad452ca05fc6dfcb095042d6b94c62" translate="yes" xml:space="preserve">
          <source>How do we separate the Receded and the Skeleton states? The difference between them is that the &lt;strong&gt;Receded&lt;/strong&gt; state feels like &amp;ldquo;taking a step back&amp;rdquo; to the user, while the &lt;strong&gt;Skeleton&lt;/strong&gt; state feels like &amp;ldquo;taking a step forward&amp;rdquo; in our progress to show more content.</source>
          <target state="translated">&amp;iquest;C&amp;oacute;mo separamos los estados Receded y Skeleton? La diferencia entre ellos es que el estado &lt;strong&gt;Receded se&lt;/strong&gt; siente como &quot;dar un paso atr&amp;aacute;s&quot; para el usuario, mientras que el estado &lt;strong&gt;Skeleton se&lt;/strong&gt; siente como &quot;dar un paso adelante&quot; en nuestro progreso para mostrar m&amp;aacute;s contenido.</target>
        </trans-unit>
        <trans-unit id="9cd07e5b2055c72f75ab42f26ab2628f05373053" translate="yes" xml:space="preserve">
          <source>How does React associate Hook calls with components?</source>
          <target state="translated">¿Cómo es que Reacciona asocia las llamadas de Hook con los componentes?</target>
        </trans-unit>
        <trans-unit id="03433b6618565d81523f098fea7bbfc849e26f58" translate="yes" xml:space="preserve">
          <source>How is this different from debouncing? Our example has a fixed artificial delay (3ms for every one of 80 items), so there is always a delay, no matter how fast our computer is. However, the &lt;code&gt;useDeferredValue&lt;/code&gt; value only &amp;ldquo;lags behind&amp;rdquo; if the rendering takes a while. There is no minimal lag imposed by React. With a more realistic workload, you can expect the lag to adjust to the user&amp;rsquo;s device. On fast machines, the lag would be smaller or non-existent, and on slow machines, it would be more noticeable. In both cases, the app would remain responsive. That&amp;rsquo;s the advantage of this mechanism over debouncing or throttling, which always impose a minimal delay and can&amp;rsquo;t avoid blocking the thread while rendering.</source>
          <target state="translated">&amp;iquest;En qu&amp;eacute; se diferencia esto de la eliminaci&amp;oacute;n de rebotes? Nuestro ejemplo tiene un retraso artificial fijo (3 ms por cada uno de los 80 elementos), por lo que siempre hay un retraso, sin importar qu&amp;eacute; tan r&amp;aacute;pido sea nuestra computadora. Sin embargo, el valor &lt;code&gt;useDeferredValue&lt;/code&gt; solo &quot;se retrasa&quot; si la renderizaci&amp;oacute;n toma un tiempo. React no impone ning&amp;uacute;n retraso m&amp;iacute;nimo. Con una carga de trabajo m&amp;aacute;s realista, puede esperar que el retraso se adapte al dispositivo del usuario. En m&amp;aacute;quinas r&amp;aacute;pidas, el retraso ser&amp;iacute;a menor o inexistente, y en m&amp;aacute;quinas lentas, ser&amp;iacute;a m&amp;aacute;s notorio. En ambos casos, la aplicaci&amp;oacute;n seguir&amp;aacute; respondiendo. Esa es la ventaja de este mecanismo sobre la eliminaci&amp;oacute;n de rebotes o la limitaci&amp;oacute;n, que siempre imponen un retraso m&amp;iacute;nimo y no pueden evitar bloquear el hilo mientras se renderiza.</target>
        </trans-unit>
        <trans-unit id="ef20a3ab1615429a9e3caea2dfc9283ba06feb8c" translate="yes" xml:space="preserve">
          <source>How much of my React knowledge stays relevant?</source>
          <target state="translated">¿Cuánto de mi conocimiento de React permanece relevante?</target>
        </trans-unit>
        <trans-unit id="01cf9009310d5e4e171575929c85ba93f68d8165" translate="yes" xml:space="preserve">
          <source>How to Approach the Problem</source>
          <target state="translated">Cómo abordar el problema</target>
        </trans-unit>
        <trans-unit id="772ce99a70283ae35b4e13fa8d26821113684e81" translate="yes" xml:space="preserve">
          <source>How to Read This Guide</source>
          <target state="translated">Cómo leer esta guía</target>
        </trans-unit>
        <trans-unit id="5e5bdd73691289d5424afb561fb4d4a8c352d85e" translate="yes" xml:space="preserve">
          <source>How to avoid passing callbacks down?</source>
          <target state="translated">¿Cómo evitar pasar las llamadas de regreso?</target>
        </trans-unit>
        <trans-unit id="e4460bb5cb239f962c6f963dd45f4bfc12fafab4" translate="yes" xml:space="preserve">
          <source>How to create expensive objects lazily?</source>
          <target state="translated">¿Cómo crear objetos caros de forma perezosa?</target>
        </trans-unit>
        <trans-unit id="b8b7e53bed65fc2a70652cc57c409f8809ebddf6" translate="yes" xml:space="preserve">
          <source>How to get the previous props or state?</source>
          <target state="translated">¿Cómo se consigue el estado o el atrezzo anterior?</target>
        </trans-unit>
        <trans-unit id="c24f12ba653d001525d8a8bd81fe1cef3fad0860" translate="yes" xml:space="preserve">
          <source>How to memoize calculations?</source>
          <target state="translated">¿Cómo memorizar los cálculos?</target>
        </trans-unit>
        <trans-unit id="24fb9eef456bcd915cd5640203146790d6c28cff" translate="yes" xml:space="preserve">
          <source>How to read an often-changing value from &lt;code&gt;useCallback&lt;/code&gt;?</source>
          <target state="translated">&amp;iquest;C&amp;oacute;mo leer un valor que cambia a menudo de &lt;code&gt;useCallback&lt;/code&gt; ?</target>
        </trans-unit>
        <trans-unit id="ecc2a2a6938156221ff27517255883f6fe53d187" translate="yes" xml:space="preserve">
          <source>How to read an often-changing value from useCallback?</source>
          <target state="translated">¿Cómo leer un valor a menudo cambiante de useCallback?</target>
        </trans-unit>
        <trans-unit id="4e42ecde4eca22b2d3b189bcf068d674eeacdb8a" translate="yes" xml:space="preserve">
          <source>How to test components that use Hooks?</source>
          <target state="translated">¿Cómo probar los componentes que usan ganchos?</target>
        </trans-unit>
        <trans-unit id="9da64590fe0ba979539b260ad3ab00d0ecded657" translate="yes" xml:space="preserve">
          <source>However, &lt;code&gt;useRef()&lt;/code&gt; is useful for more than the &lt;code&gt;ref&lt;/code&gt; attribute. It&amp;rsquo;s &lt;a href=&quot;hooks-faq#is-there-something-like-instance-variables&quot;&gt;handy for keeping any mutable value around&lt;/a&gt; similar to how you&amp;rsquo;d use instance fields in classes.</source>
          <target state="translated">Sin embargo, &lt;code&gt;useRef()&lt;/code&gt; es &amp;uacute;til para m&amp;aacute;s que el atributo &lt;code&gt;ref&lt;/code&gt; . Es &lt;a href=&quot;hooks-faq#is-there-something-like-instance-variables&quot;&gt;&amp;uacute;til para mantener cualquier valor mutable&lt;/a&gt; similar a c&amp;oacute;mo usar&amp;iacute;a los campos de instancia en las clases.</target>
        </trans-unit>
        <trans-unit id="65f0f95f546c8a3bf04820043025e19f7a76c111" translate="yes" xml:space="preserve">
          <source>However, React also offers an option to use &lt;a href=&quot;introducing-jsx&quot;&gt;JSX&lt;/a&gt; instead:</source>
          <target state="translated">Sin embargo, React tambi&amp;eacute;n ofrece una opci&amp;oacute;n para usar &lt;a href=&quot;introducing-jsx&quot;&gt;JSX en su&lt;/a&gt; lugar:</target>
        </trans-unit>
        <trans-unit id="3333696f448160f28cb91d4eececaddabcf02145" translate="yes" xml:space="preserve">
          <source>However, React components are declarative and specify &lt;em&gt;what&lt;/em&gt; should be rendered:</source>
          <target state="translated">Sin embargo, los componentes de React son declarativos y especifican &lt;em&gt;qu&amp;eacute; se&lt;/em&gt; debe representar:</target>
        </trans-unit>
        <trans-unit id="e9b9ee92c12009c14589ca7400a64667019fa998" translate="yes" xml:space="preserve">
          <source>However, elements can also represent user-defined components:</source>
          <target state="translated">Sin embargo,los elementos también pueden representar componentes definidos por el usuario:</target>
        </trans-unit>
        <trans-unit id="8914df7a2751ed9a49c0a876b51e78db6ebded98" translate="yes" xml:space="preserve">
          <source>However, in Concurrent Mode there are cases where you might &lt;em&gt;want&lt;/em&gt; to &amp;ldquo;duplicate&amp;rdquo; some data in different state variables. Consider this tiny translation app:</source>
          <target state="translated">Sin embargo, en el modo concurrente hay casos en los que es posible que &lt;em&gt;desee&lt;/em&gt; &quot;duplicar&quot; algunos datos en diferentes variables de estado. Considere esta peque&amp;ntilde;a aplicaci&amp;oacute;n de traducci&amp;oacute;n:</target>
        </trans-unit>
        <trans-unit id="d58ece91c2a93ff8dda87d95414ebd23f4782a9c" translate="yes" xml:space="preserve">
          <source>However, it also preserves &lt;code&gt;ref&lt;/code&gt;s. This means that if you get a child with a &lt;code&gt;ref&lt;/code&gt; on it, you won&amp;rsquo;t accidentally steal it from your ancestor. You will get the same &lt;code&gt;ref&lt;/code&gt; attached to your new element.</source>
          <target state="translated">Sin embargo, tambi&amp;eacute;n conserva las &lt;code&gt;ref&lt;/code&gt; s. Esto significa que si tiene un hijo con un &lt;code&gt;ref&lt;/code&gt; , no se lo robar&amp;aacute; accidentalmente a su antepasado. Obtendr&amp;aacute; la misma &lt;code&gt;ref&lt;/code&gt; erencia adjunta a su nuevo elemento.</target>
        </trans-unit>
        <trans-unit id="7dccca1546e00e09348d2ca880b503bbc3782a4f" translate="yes" xml:space="preserve">
          <source>However, it does raise the question of why these releases aren&amp;rsquo;t versioned as patches instead.</source>
          <target state="translated">Sin embargo, plantea la cuesti&amp;oacute;n de por qu&amp;eacute; estas versiones no est&amp;aacute;n versionadas como parches.</target>
        </trans-unit>
        <trans-unit id="f6a583f2ca74afad8b48de4866dda319994ca798" translate="yes" xml:space="preserve">
          <source>However, it misses a crucial requirement: the fact that the &lt;code&gt;Clock&lt;/code&gt; sets up a timer and updates the UI every second should be an implementation detail of the &lt;code&gt;Clock&lt;/code&gt;.</source>
          <target state="translated">Sin embargo, pasa por alto un requisito crucial: el hecho de que el &lt;code&gt;Clock&lt;/code&gt; configure un temporizador y actualice la interfaz de usuario cada segundo deber&amp;iacute;a ser un detalle de implementaci&amp;oacute;n del &lt;code&gt;Clock&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="c0b55a581ed0d44371ffb07796a1f139be740fa1" translate="yes" xml:space="preserve">
          <source>However, not all effects can be deferred. For example, a DOM mutation that is visible to the user must fire synchronously before the next paint so that the user does not perceive a visual inconsistency. (The distinction is conceptually similar to passive versus active event listeners.) For these types of effects, React provides one additional Hook called &lt;a href=&quot;#uselayouteffect&quot;&gt;&lt;code&gt;useLayoutEffect&lt;/code&gt;&lt;/a&gt;. It has the same signature as &lt;code&gt;useEffect&lt;/code&gt;, and only differs in when it is fired.</source>
          <target state="translated">Sin embargo, no todos los efectos pueden aplazarse. Por ejemplo, una mutaci&amp;oacute;n DOM que es visible para el usuario debe dispararse sincr&amp;oacute;nicamente antes de la siguiente pintura para que el usuario no perciba una inconsistencia visual. (La distinci&amp;oacute;n es conceptualmente similar a los oyentes de eventos pasivos frente a los activos). Para estos tipos de efectos, React proporciona un gancho adicional llamado &lt;a href=&quot;#uselayouteffect&quot;&gt; &lt;code&gt;useLayoutEffect&lt;/code&gt; &lt;/a&gt; . Tiene la misma firma que &lt;code&gt;useEffect&lt;/code&gt; , y solo se diferencia cuando se activa .</target>
        </trans-unit>
        <trans-unit id="66df5c038ad97c79d198f1c4a9bcf642fe39edab" translate="yes" xml:space="preserve">
          <source>However, sometimes it might be helpful to intentionally introduce an inconsistency. We could do it manually by &amp;ldquo;splitting&amp;rdquo; the state like above, but React also offers a built-in Hook for this:</source>
          <target state="translated">Sin embargo, a veces puede ser &amp;uacute;til introducir intencionalmente una inconsistencia. Podr&amp;iacute;amos hacerlo manualmente &quot;dividiendo&quot; el estado como el anterior, pero React tambi&amp;eacute;n ofrece un Hook incorporado para esto:</target>
        </trans-unit>
        <trans-unit id="684d4b7ace58812c1c1257030e5191e892f4d124" translate="yes" xml:space="preserve">
          <source>However, sometimes it&amp;rsquo;s useful to insert a child into a different location in the DOM:</source>
          <target state="translated">Sin embargo, a veces es &amp;uacute;til insertar un ni&amp;ntilde;o en una ubicaci&amp;oacute;n diferente en el DOM:</target>
        </trans-unit>
        <trans-unit id="7873b7f443466f38d48c121a13c985ec5c569acf" translate="yes" xml:space="preserve">
          <source>However, sometimes the same data needs to be accessible by many components in the tree, and at different nesting levels. Context lets you &amp;ldquo;broadcast&amp;rdquo; such data, and changes to it, to all components below. Common examples where using context might be simpler than the alternatives include managing the current locale, theme, or a data cache.</source>
          <target state="translated">Sin embargo, a veces es necesario que muchos componentes del &amp;aacute;rbol tengan acceso a los mismos datos y en diferentes niveles de anidaci&amp;oacute;n. El contexto le permite &quot;difundir&quot; dichos datos y cambios en ellos a todos los componentes siguientes. Los ejemplos comunes en los que usar el contexto puede ser m&amp;aacute;s simple que las alternativas incluyen la administraci&amp;oacute;n de la configuraci&amp;oacute;n regional actual, el tema o una cach&amp;eacute; de datos.</target>
        </trans-unit>
        <trans-unit id="23514e5e71b6ee6ebabf134e94bf282dd4ddd004" translate="yes" xml:space="preserve">
          <source>However, the experience feels really jarring. We were browsing a page, but it got replaced by a loading state right as we were interacting with it. It&amp;rsquo;s disorienting. &lt;strong&gt;Just like before, to avoid showing an undesirable loading state, we can wrap the state update in a transition:&lt;/strong&gt;</source>
          <target state="translated">Sin embargo, la experiencia se siente realmente discordante. Est&amp;aacute;bamos navegando por una p&amp;aacute;gina, pero fue reemplazada por un estado de carga justo cuando est&amp;aacute;bamos interactuando con ella. Es desorientador. &lt;strong&gt;Al igual que antes, para evitar mostrar un estado de carga no deseado, podemos envolver la actualizaci&amp;oacute;n del estado en una transici&amp;oacute;n:&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="1b955a466dd5e01eaf645eec3e93c8799d5ab4f5" translate="yes" xml:space="preserve">
          <source>However, this may be overkill in some cases, like the subscription example from the previous section. We don&amp;rsquo;t need to create a new subscription on every update, only if the &lt;code&gt;source&lt;/code&gt; prop has changed.</source>
          <target state="translated">Sin embargo, esto puede ser excesivo en algunos casos, como el ejemplo de suscripci&amp;oacute;n de la secci&amp;oacute;n anterior. No necesitamos crear una nueva suscripci&amp;oacute;n en cada actualizaci&amp;oacute;n, solo si la propiedad de &lt;code&gt;source&lt;/code&gt; ha cambiado.</target>
        </trans-unit>
        <trans-unit id="d54fc10053a808be02d653b28bf41ebcbb425fe4" translate="yes" xml:space="preserve">
          <source>However, this requires you to know exactly which methods need to be copied. You can use &lt;a href=&quot;https://github.com/mridgway/hoist-non-react-statics&quot;&gt;hoist-non-react-statics&lt;/a&gt; to automatically copy all non-React static methods:</source>
          <target state="translated">Sin embargo, esto requiere que sepa exactamente qu&amp;eacute; m&amp;eacute;todos deben copiarse. Puede usar &lt;a href=&quot;https://github.com/mridgway/hoist-non-react-statics&quot;&gt;hoist-non-react-statics&lt;/a&gt; para copiar autom&amp;aacute;ticamente todos los m&amp;eacute;todos est&amp;aacute;ticos que no son de React:</target>
        </trans-unit>
        <trans-unit id="b543d8a8b990abf052de4f376f9d0b9c65f73938" translate="yes" xml:space="preserve">
          <source>However, we want these two inputs to be in sync with each other. When we update the Celsius input, the Fahrenheit input should reflect the converted temperature, and vice versa.</source>
          <target state="translated">Sin embargo,queremos que estas dos entradas estén sincronizadas entre sí.Cuando actualizamos la entrada de Celsius,la entrada de Fahrenheit debería reflejar la temperatura convertida,y viceversa.</target>
        </trans-unit>
        <trans-unit id="bd3ad954f0338c11e6cda950a40addb37e02fd0f" translate="yes" xml:space="preserve">
          <source>However, you might still be wondering why React doesn&amp;rsquo;t just update &lt;code&gt;this.state&lt;/code&gt; immediately without re-rendering.</source>
          <target state="translated">Sin embargo, es posible que a&amp;uacute;n se pregunte por qu&amp;eacute; React no solo actualiza &lt;code&gt;this.state&lt;/code&gt; inmediatamente sin volver a renderizar.</target>
        </trans-unit>
        <trans-unit id="1e059ed18e3f4b02238b502a8f5e588e0008af29" translate="yes" xml:space="preserve">
          <source>Ideally we want to write this once and have the &lt;code&gt;Clock&lt;/code&gt; update itself:</source>
          <target state="translated">Idealmente, queremos escribir esto una vez y que el &lt;code&gt;Clock&lt;/code&gt; actualice:</target>
        </trans-unit>
        <trans-unit id="6a176af0e3541b91734625dec4f3b8292439dd1d" translate="yes" xml:space="preserve">
          <source>Ideas</source>
          <target state="translated">Ideas</target>
        </trans-unit>
        <trans-unit id="dbd660e2dd45612fbe7fcb2d52008460403f801b" translate="yes" xml:space="preserve">
          <source>Identify every component that renders something based on that state.</source>
          <target state="translated">Identificar cada componente que hace algo basado en ese estado.</target>
        </trans-unit>
        <trans-unit id="96c7ee658b9e92f85c8bfec7b6c2a38fb96663d7" translate="yes" xml:space="preserve">
          <source>Identifying components with unsafe lifecycles</source>
          <target state="translated">Identificar los componentes con ciclos de vida inseguros</target>
        </trans-unit>
        <trans-unit id="634e92551f670791962e82615e588bc9e77eae60" translate="yes" xml:space="preserve">
          <source>Identifying unsafe lifecycles</source>
          <target state="translated">Identificar los ciclos de vida inseguros</target>
        </trans-unit>
        <trans-unit id="c95633762d757325e688096b23309ad6ed512c6b" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;children&lt;/code&gt; is a &lt;code&gt;Fragment&lt;/code&gt; it will be treated as a single child and not traversed.</source>
          <target state="translated">Si &lt;code&gt;children&lt;/code&gt; es un &lt;code&gt;Fragment&lt;/code&gt; , se tratar&amp;aacute; como un solo ni&amp;ntilde;o y no se cruzar&amp;aacute;.</target>
        </trans-unit>
        <trans-unit id="d9ec8b74463d4b6788285debd449e8a36886f529" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;contextTypes&lt;/code&gt; is defined within a component, the following &lt;a href=&quot;react-component#the-component-lifecycle&quot;&gt;lifecycle methods&lt;/a&gt; will receive an additional parameter, the &lt;code&gt;context&lt;/code&gt; object:</source>
          <target state="translated">Si &lt;code&gt;contextTypes&lt;/code&gt; se define dentro de un componente, los siguientes &lt;a href=&quot;react-component#the-component-lifecycle&quot;&gt;m&amp;eacute;todos de ciclo de vida&lt;/a&gt; recibir&amp;aacute;n un par&amp;aacute;metro adicional, el objeto de &lt;code&gt;context&lt;/code&gt; o :</target>
        </trans-unit>
        <trans-unit id="a7942ea96f993393244bb793ed3444403e13d0d6" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;contextTypes&lt;/code&gt; is not defined, then &lt;code&gt;context&lt;/code&gt; will be an empty object.</source>
          <target state="translated">Si &lt;code&gt;contextTypes&lt;/code&gt; no est&amp;aacute; definido, el &lt;code&gt;context&lt;/code&gt; o ser&amp;aacute; un objeto vac&amp;iacute;o.</target>
        </trans-unit>
        <trans-unit id="cb8bc3d5f6a162a81742105b7e5aa8a5814ce785" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;props.color&lt;/code&gt; is not provided, it will be set by default to &lt;code&gt;'blue'&lt;/code&gt;:</source>
          <target state="translated">Si no se proporciona &lt;code&gt;props.color&lt;/code&gt; , se establecer&amp;aacute; de forma predeterminada en &lt;code&gt;'blue'&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="459dd598a5e1720f34594d812d939384bffda8ab" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;props.color&lt;/code&gt; is set to &lt;code&gt;null&lt;/code&gt;, it will remain &lt;code&gt;null&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ba93d4ea31d24880e40a17c457b5255600429f98" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;props.color&lt;/code&gt; is set to null, it will remain null:</source>
          <target state="translated">Si &lt;code&gt;props.color&lt;/code&gt; se establece en nulo, seguir&amp;aacute; siendo nulo:</target>
        </trans-unit>
        <trans-unit id="a6b6d366d7013c823d86f9937f864aa2f4eb5035" translate="yes" xml:space="preserve">
          <source>If a Minor Release Includes No New Features, Why Isn&amp;rsquo;t It a Patch?</source>
          <target state="translated">Si una versi&amp;oacute;n secundaria no incluye funciones nuevas, &amp;iquest;por qu&amp;eacute; no es un parche?</target>
        </trans-unit>
        <trans-unit id="7808973984d8e4c597980af26324716a790b3eb9" translate="yes" xml:space="preserve">
          <source>If a component is using multiple mixins and several mixins define the same lifecycle method (i.e. several mixins want to do some cleanup when the component is destroyed), all of the lifecycle methods are guaranteed to be called. Methods defined on mixins run in the order mixins were listed, followed by a method call on the component.</source>
          <target state="translated">Si un componente utiliza varias mezclas y varias mezclas definen el mismo método de ciclo de vida (es decir,varias mezclas quieren hacer alguna limpieza cuando el componente se destruye),se garantiza que se llamarán todos los métodos de ciclo de vida.Los métodos definidos en las mezclas se ejecutan en el orden en que se enumeran las mezclas,seguido de una llamada al método del componente.</target>
        </trans-unit>
        <trans-unit id="97235b567c0265f0d9926f25dc8829579aa2e646" translate="yes" xml:space="preserve">
          <source>If a feature is not documented, they may be accompanied by an &lt;a href=&quot;https://github.com/reactjs/rfcs&quot;&gt;RFC&lt;/a&gt;.</source>
          <target state="translated">Si una caracter&amp;iacute;stica no est&amp;aacute; documentada, puede ir acompa&amp;ntilde;ada de un &lt;a href=&quot;https://github.com/reactjs/rfcs&quot;&gt;RFC&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="c6bc1e73352759548987f8a409ddc10869579747" translate="yes" xml:space="preserve">
          <source>If a release includes non-essential changes &amp;mdash; such as internal refactors, changes to implementation details, performance improvements, or minor bugfixes &amp;mdash; we will bump the minor version even when there are no new features.</source>
          <target state="translated">Si una versi&amp;oacute;n incluye cambios no esenciales, como refactores internos, cambios en los detalles de implementaci&amp;oacute;n, mejoras de rendimiento o correcciones de errores menores, mejoraremos la versi&amp;oacute;n secundaria incluso cuando no haya nuevas funciones.</target>
        </trans-unit>
        <trans-unit id="b8ff55774a140aca8bdaed69bfb51da5366dacc0" translate="yes" xml:space="preserve">
          <source>If a single element&amp;rsquo;s attribute or text content is unavoidably different between the server and the client (for example, a timestamp), you may silence the warning by adding &lt;code&gt;suppressHydrationWarning={true}&lt;/code&gt; to the element. It only works one level deep, and is intended to be an escape hatch. Don&amp;rsquo;t overuse it. Unless it&amp;rsquo;s text content, React still won&amp;rsquo;t attempt to patch it up, so it may remain inconsistent until future updates.</source>
          <target state="translated">Si el atributo o el contenido de texto de un solo elemento es inevitablemente diferente entre el servidor y el cliente (por ejemplo, una marca de tiempo), puede silenciar la advertencia agregando &lt;code&gt;suppressHydrationWarning={true}&lt;/code&gt; al elemento. Solo funciona a un nivel de profundidad y est&amp;aacute; destinado a ser una trampilla de escape. No lo uses en exceso. A menos que sea contenido de texto, React a&amp;uacute;n no intentar&amp;aacute; arreglarlo, por lo que puede seguir siendo inconsistente hasta futuras actualizaciones.</target>
        </trans-unit>
        <trans-unit id="d556b20cb4547e127f2815074ef2fe4e41710802" translate="yes" xml:space="preserve">
          <source>If a tag is empty, you may close it immediately with &lt;code&gt;/&amp;gt;&lt;/code&gt;, like XML:</source>
          <target state="translated">Si una etiqueta est&amp;aacute; vac&amp;iacute;a, puede cerrarla inmediatamente con &lt;code&gt;/&amp;gt;&lt;/code&gt; , como XML:</target>
        </trans-unit>
        <trans-unit id="3b320bf64ff848996f74d77101a47dfdd619e264" translate="yes" xml:space="preserve">
          <source>If after that we still don&amp;rsquo;t use any values from the component scope, it&amp;rsquo;s safe to specify &lt;code&gt;[]&lt;/code&gt;:</source>
          <target state="translated">Si despu&amp;eacute;s de eso todav&amp;iacute;a no usamos ning&amp;uacute;n valor del alcance del componente, es seguro especificar &lt;code&gt;[]&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="5b6b3e11e3d3c38135418032d8908ab5281f6aca" translate="yes" xml:space="preserve">
          <source>If calling &lt;code&gt;bind&lt;/code&gt; annoys you, there are two ways you can get around this. If you are using the experimental &lt;a href=&quot;https://babeljs.io/docs/plugins/transform-class-properties/&quot;&gt;public class fields syntax&lt;/a&gt;, you can use class fields to correctly bind callbacks:</source>
          <target state="translated">Si llamar &lt;code&gt;bind&lt;/code&gt; Bind le molesta, hay dos formas de evitarlo. Si est&amp;aacute; utilizando la &lt;a href=&quot;https://babeljs.io/docs/plugins/transform-class-properties/&quot;&gt;sintaxis de campos de clase p&amp;uacute;blica&lt;/a&gt; experimental , puede utilizar campos de clase para enlazar correctamente las devoluciones de llamada:</target>
        </trans-unit>
        <trans-unit id="58ab379086a708259f83594879dae195d221ed0e" translate="yes" xml:space="preserve">
          <source>If everything passes, great! You can expect that your project will work with the next minor React release.</source>
          <target state="translated">Si todo pasa,¡genial! Puedes esperar que tu proyecto funcione con la próxima versión menor de React.</target>
        </trans-unit>
        <trans-unit id="c6bec09d61efa659eb228a4953584f79786650d2" translate="yes" xml:space="preserve">
          <source>If fetching user details takes three seconds, we&amp;rsquo;ll only &lt;em&gt;start&lt;/em&gt; fetching the posts after three seconds! That&amp;rsquo;s a &amp;ldquo;waterfall&amp;rdquo;: an unintentional &lt;em&gt;sequence&lt;/em&gt; that should have been parallelized.</source>
          <target state="translated">Si la obtenci&amp;oacute;n de los detalles del usuario toma tres segundos, &amp;iexcl;solo &lt;em&gt;comenzaremos a&lt;/em&gt; buscar las publicaciones despu&amp;eacute;s de tres segundos! Eso es una &quot;cascada&quot;: una &lt;em&gt;secuencia&lt;/em&gt; no intencionada que deber&amp;iacute;a haberse paralelizado.</target>
        </trans-unit>
        <trans-unit id="61455d144dae27e035208c57b22d9252594b892f" translate="yes" xml:space="preserve">
          <source>If it&amp;rsquo;s still not clear which type of component you should use for a particular situation, you might find &lt;a href=&quot;https://goshakkk.name/controlled-vs-uncontrolled-inputs-react/&quot;&gt;this article on controlled versus uncontrolled inputs&lt;/a&gt; to be helpful.</source>
          <target state="translated">Si a&amp;uacute;n no est&amp;aacute; claro qu&amp;eacute; tipo de componente debe usar para una situaci&amp;oacute;n particular, &lt;a href=&quot;https://goshakkk.name/controlled-vs-uncontrolled-inputs-react/&quot;&gt;este art&amp;iacute;culo sobre entradas controladas versus no controladas&lt;/a&gt; puede resultarle &amp;uacute;til.</target>
        </trans-unit>
        <trans-unit id="64a099559eb261307dc775d158033df86e50e770" translate="yes" xml:space="preserve">
          <source>If no array is provided, a new value will be computed on every render.</source>
          <target state="translated">Si no se proporciona una matriz,se calculará un nuevo valor en cada representación.</target>
        </trans-unit>
        <trans-unit id="44bfdbf92e17d273381e7b8fb1a3f01879ecf26c" translate="yes" xml:space="preserve">
          <source>If some common scenario is not covered, please let us know on the &lt;a href=&quot;https://github.com/reactjs/reactjs.org/issues&quot;&gt;issue tracker&lt;/a&gt; for the documentation website.</source>
          <target state="translated">Si no se cubre alg&amp;uacute;n escenario com&amp;uacute;n, h&amp;aacute;ganoslo saber en el &lt;a href=&quot;https://github.com/reactjs/reactjs.org/issues&quot;&gt;rastreador de problemas&lt;/a&gt; del sitio web de documentaci&amp;oacute;n.</target>
        </trans-unit>
        <trans-unit id="0387b7a09358144d9726581e47b1de8c8b84739d" translate="yes" xml:space="preserve">
          <source>If some component &amp;ldquo;suspends&amp;rdquo;, does the app freeze? How to avoid this?</source>
          <target state="translated">Si alg&amp;uacute;n componente se &amp;ldquo;suspende&amp;rdquo;, &amp;iquest;se congela la aplicaci&amp;oacute;n? &amp;iquest;C&amp;oacute;mo evitarlo?</target>
        </trans-unit>
        <trans-unit id="fb69be684ead34368506e903349ff51d28c48c95" translate="yes" xml:space="preserve">
          <source>If some value isn&amp;rsquo;t used for rendering or data flow (for example, a timer ID), you don&amp;rsquo;t have to put it in the state. Such values can be defined as fields on the component instance.</source>
          <target state="translated">Si alg&amp;uacute;n valor no se utiliza para la representaci&amp;oacute;n o el flujo de datos (por ejemplo, un ID de temporizador), no es necesario que lo ponga en el estado. Estos valores se pueden definir como campos en la instancia del componente.</target>
        </trans-unit>
        <trans-unit id="bb0fa5a864d283d560c5564be4c37fdc16ee5c7f" translate="yes" xml:space="preserve">
          <source>If something breaks unexpectedly, please let us know by &lt;a href=&quot;https://github.com/facebook/react/issues&quot;&gt;filing an issue&lt;/a&gt;.</source>
          <target state="translated">Si algo se rompe inesperadamente, h&amp;aacute;ganoslo saber &lt;a href=&quot;https://github.com/facebook/react/issues&quot;&gt;presentando un problema&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="e81b0e7afa3fb271a0976602cc04371ca693d752" translate="yes" xml:space="preserve">
          <source>If something can be derived from either props or state, it probably shouldn&amp;rsquo;t be in the state. For example, instead of storing both &lt;code&gt;celsiusValue&lt;/code&gt; and &lt;code&gt;fahrenheitValue&lt;/code&gt;, we store just the last edited &lt;code&gt;temperature&lt;/code&gt; and its &lt;code&gt;scale&lt;/code&gt;. The value of the other input can always be calculated from them in the &lt;code&gt;render()&lt;/code&gt; method. This lets us clear or apply rounding to the other field without losing any precision in the user input.</source>
          <target state="translated">Si algo puede derivarse de los accesorios o del estado, probablemente no deber&amp;iacute;a estar en el estado. Por ejemplo, en lugar de almacenar tanto &lt;code&gt;celsiusValue&lt;/code&gt; como &lt;code&gt;fahrenheitValue&lt;/code&gt; , almacenamos solo la &amp;uacute;ltima &lt;code&gt;temperature&lt;/code&gt; editada y su &lt;code&gt;scale&lt;/code&gt; . El valor de la otra entrada siempre se puede calcular a partir de ellos en el m&amp;eacute;todo &lt;code&gt;render()&lt;/code&gt; . Esto nos permite borrar o aplicar redondeo al otro campo sin perder precisi&amp;oacute;n en la entrada del usuario.</target>
        </trans-unit>
        <trans-unit id="1e1eff28de072c228c3fac6f7de4af84285d52c7" translate="yes" xml:space="preserve">
          <source>If something is missing in the documentation or if you found some part confusing, please &lt;a href=&quot;https://github.com/reactjs/reactjs.org/issues/new&quot;&gt;file an issue for the documentation repository&lt;/a&gt; with your suggestions for improvement, or tweet at the &lt;a href=&quot;https://twitter.com/reactjs&quot;&gt;@reactjs account&lt;/a&gt;. We love hearing from you!</source>
          <target state="translated">Si falta algo en la documentaci&amp;oacute;n o si encuentra alguna parte confusa, &lt;a href=&quot;https://github.com/reactjs/reactjs.org/issues/new&quot;&gt;presente un problema para el repositorio de documentaci&amp;oacute;n&lt;/a&gt; con sus sugerencias de mejora, o &lt;a href=&quot;https://twitter.com/reactjs&quot;&gt;env&amp;iacute;e un&lt;/a&gt; tweet a la cuenta @reactjs . &amp;iexcl;Nos encanta saber de ti!</target>
        </trans-unit>
        <trans-unit id="9ba9933df2ec0f3c00ec311cb0e316ed0a71e056" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;Calculator&lt;/code&gt; owns the shared state, it becomes the &amp;ldquo;source of truth&amp;rdquo; for the current temperature in both inputs. It can instruct them both to have values that are consistent with each other. Since the props of both &lt;code&gt;TemperatureInput&lt;/code&gt; components are coming from the same parent &lt;code&gt;Calculator&lt;/code&gt; component, the two inputs will always be in sync.</source>
          <target state="translated">Si la &lt;code&gt;Calculator&lt;/code&gt; posee el estado compartido, se convierte en la &quot;fuente de verdad&quot; para la temperatura actual en ambas entradas. Puede instruirlos a ambos para que tengan valores que sean coherentes entre s&amp;iacute;. Dado que los accesorios de ambos componentes &lt;code&gt;TemperatureInput&lt;/code&gt; provienen del mismo componente principal de la &lt;code&gt;Calculator&lt;/code&gt; , las dos entradas siempre estar&amp;aacute;n sincronizadas.</target>
        </trans-unit>
        <trans-unit id="e1508d0b9f38075d8659f83a363a29e0a2c1eb40" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;Clock&lt;/code&gt; component is ever removed from the DOM, React calls the &lt;code&gt;componentWillUnmount()&lt;/code&gt; lifecycle method so the timer is stopped.</source>
          <target state="translated">Si el componente &lt;code&gt;Clock&lt;/code&gt; se elimina alguna vez del DOM, React llama al m&amp;eacute;todo de ciclo de vida &lt;code&gt;componentWillUnmount()&lt;/code&gt; para que el temporizador se detenga.</target>
        </trans-unit>
        <trans-unit id="285cc10d670d67e7a1d042087524d72b3c61948c" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;ref&lt;/code&gt; callback is defined as an inline function, it will get called twice during updates, first with &lt;code&gt;null&lt;/code&gt; and then again with the DOM element. This is because a new instance of the function is created with each render, so React needs to clear the old ref and set up the new one. You can avoid this by defining the &lt;code&gt;ref&lt;/code&gt; callback as a bound method on the class, but note that it shouldn&amp;rsquo;t matter in most cases.</source>
          <target state="translated">Si la devoluci&amp;oacute;n de llamada de &lt;code&gt;ref&lt;/code&gt; erencia se define como una funci&amp;oacute;n en l&amp;iacute;nea, se llamar&amp;aacute; dos veces durante las actualizaciones, primero con &lt;code&gt;null&lt;/code&gt; y luego nuevamente con el elemento DOM. Esto se debe a que se crea una nueva instancia de la funci&amp;oacute;n con cada render, por lo que React necesita borrar la referencia anterior y configurar la nueva. Puede evitar esto definiendo la devoluci&amp;oacute;n de llamada &lt;code&gt;ref&lt;/code&gt; como un m&amp;eacute;todo enlazado en la clase, pero tenga en cuenta que no deber&amp;iacute;a importar en la mayor&amp;iacute;a de los casos.</target>
        </trans-unit>
        <trans-unit id="a11443443fa44ef2cec37924f0c1f90e49c7f394" translate="yes" xml:space="preserve">
          <source>If the React element was previously rendered into &lt;code&gt;container&lt;/code&gt;, this will perform an update on it and only mutate the DOM as necessary to reflect the latest React element.</source>
          <target state="translated">Si el elemento React se renderiz&amp;oacute; previamente en un &lt;code&gt;container&lt;/code&gt; , esto realizar&amp;aacute; una actualizaci&amp;oacute;n y solo mutar&amp;aacute; el DOM seg&amp;uacute;n sea necesario para reflejar el &amp;uacute;ltimo elemento React.</target>
        </trans-unit>
        <trans-unit id="f68368472358ffa4040481d1ccc81327648d3fb5" translate="yes" xml:space="preserve">
          <source>If the boilerplate code is too unattractive to you, you may enable the &lt;strong&gt;experimental&lt;/strong&gt;&lt;a href=&quot;https://babeljs.io/docs/plugins/transform-class-properties/&quot;&gt;Class Properties&lt;/a&gt; syntax proposal with Babel:</source>
          <target state="translated">Si el c&amp;oacute;digo repetitivo no le resulta atractivo, puede habilitar la propuesta de sintaxis de &lt;a href=&quot;https://babeljs.io/docs/plugins/transform-class-properties/&quot;&gt;propiedades de clase &lt;/a&gt;&lt;strong&gt;experimental&lt;/strong&gt; con Babel:</target>
        </trans-unit>
        <trans-unit id="b1524d0a0bb3f485163f09431911716ee3095bb5" translate="yes" xml:space="preserve">
          <source>If the function you&amp;rsquo;re calling is a pure computation and is safe to call while rendering, you may &lt;strong&gt;call it outside of the effect instead,&lt;/strong&gt; and make the effect depend on the returned value.</source>
          <target state="translated">Si la funci&amp;oacute;n que est&amp;aacute; llamando es un c&amp;aacute;lculo puro y es seguro llamarla mientras se renderiza, puede &lt;strong&gt;llamarla fuera del efecto&lt;/strong&gt; y hacer que el efecto dependa del valor devuelto.</target>
        </trans-unit>
        <trans-unit id="72c76fa2e50dee5e670f91c11fbf1264bff2a124" translate="yes" xml:space="preserve">
          <source>If the new state is computed using the previous state, you can pass a function to &lt;code&gt;setState&lt;/code&gt;. The function will receive the previous value, and return an updated value. Here&amp;rsquo;s an example of a counter component that uses both forms of &lt;code&gt;setState&lt;/code&gt;:</source>
          <target state="translated">Si el nuevo estado se calcula utilizando el estado anterior, puede pasar una funci&amp;oacute;n a &lt;code&gt;setState&lt;/code&gt; . La funci&amp;oacute;n recibir&amp;aacute; el valor anterior y devolver&amp;aacute; un valor actualizado. A continuaci&amp;oacute;n, se muestra un ejemplo de un componente de contador que usa ambas formas de &lt;code&gt;setState&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="4d5fb4c02d4fde303749802adf11f045d7e01c08" translate="yes" xml:space="preserve">
          <source>If the only way your component ever changes is when the &lt;code&gt;props.color&lt;/code&gt; or the &lt;code&gt;state.count&lt;/code&gt; variable changes, you could have &lt;code&gt;shouldComponentUpdate&lt;/code&gt; check that:</source>
          <target state="translated">Si la &amp;uacute;nica forma en que su componente cambia es cuando &lt;code&gt;props.color&lt;/code&gt; la variable props.color o &lt;code&gt;state.count&lt;/code&gt; , deber&amp;iacute;a tener &lt;code&gt;shouldComponentUpdate&lt;/code&gt; verificar que:</target>
        </trans-unit>
        <trans-unit id="8d4d632eeb98bbd6eb7a8cf7c7cf0db0d585a084" translate="yes" xml:space="preserve">
          <source>If the optional callback is provided, it will be executed after the component is rendered or updated.</source>
          <target state="translated">Si se proporciona la devolución de llamada opcional,se ejecutará después de que se renderice o actualice el componente.</target>
        </trans-unit>
        <trans-unit id="9825426bb3519158f32e335335bf1288ffbb02ac" translate="yes" xml:space="preserve">
          <source>If the other module fails to load (for example, due to network failure), it will trigger an error. You can handle these errors to show a nice user experience and manage recovery with &lt;a href=&quot;error-boundaries&quot;&gt;Error Boundaries&lt;/a&gt;. Once you&amp;rsquo;ve created your Error Boundary, you can use it anywhere above your lazy components to display an error state when there&amp;rsquo;s a network error.</source>
          <target state="translated">Si el otro m&amp;oacute;dulo no se carga (por ejemplo, debido a una falla de la red), generar&amp;aacute; un error. Puede manejar estos errores para mostrar una experiencia de usuario agradable y administrar la recuperaci&amp;oacute;n con &lt;a href=&quot;error-boundaries&quot;&gt;L&amp;iacute;mites de error&lt;/a&gt; . Una vez que haya creado su L&amp;iacute;mite de error, puede usarlo en cualquier lugar por encima de sus componentes perezosos para mostrar un estado de error cuando hay un error de red.</target>
        </trans-unit>
        <trans-unit id="6d645637af0f89ddb43e30926c108ad1d42dea97" translate="yes" xml:space="preserve">
          <source>If this component has been mounted into the DOM, this returns the corresponding native browser DOM element. This method is useful for reading values out of the DOM, such as form field values and performing DOM measurements. &lt;strong&gt;In most cases, you can attach a ref to the DOM node and avoid using &lt;code&gt;findDOMNode&lt;/code&gt; at all.&lt;/strong&gt;</source>
          <target state="translated">Si este componente se ha montado en el DOM, devuelve el correspondiente elemento DOM nativo del navegador. Este m&amp;eacute;todo es &amp;uacute;til para leer valores fuera del DOM, como valores de campo de formulario y realizar mediciones DOM. &lt;strong&gt;En la mayor&amp;iacute;a de los casos, puede adjuntar una referencia al nodo DOM y evitar usar &lt;code&gt;findDOMNode&lt;/code&gt; en absoluto.&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="2beaac6d52020b7f238083eeeeccbf47e42f3e4b" translate="yes" xml:space="preserve">
          <source>If two or more context values are often used together, you might want to consider creating your own render prop component that provides both.</source>
          <target state="translated">Si dos o más valores de contexto se usan a menudo juntos,puede que quieras considerar la posibilidad de crear tu propio componente de representación que proporcione ambos.</target>
        </trans-unit>
        <trans-unit id="d1f978898c43c050ba9392e9f7a52dfcd4549f6d" translate="yes" xml:space="preserve">
          <source>If we don&amp;rsquo;t want some component to delay the transition, we can wrap it in its own &lt;code&gt;&amp;lt;Suspense&amp;gt;&lt;/code&gt; boundary.</source>
          <target state="translated">Si no queremos que alg&amp;uacute;n componente retrase la transici&amp;oacute;n, podemos envolverlo en su propio l&amp;iacute;mite &lt;code&gt;&amp;lt;Suspense&amp;gt;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="19013949653b81e2adb86a0553d1ff708b6beb68" translate="yes" xml:space="preserve">
          <source>If we don&amp;rsquo;t want to load this component in our tests, we can mock out the dependency itself to a dummy component, and run our tests:</source>
          <target state="translated">Si no queremos cargar este componente en nuestras pruebas, podemos simular la dependencia en s&amp;iacute; de un componente ficticio y ejecutar nuestras pruebas:</target>
        </trans-unit>
        <trans-unit id="cc989df7c0d84bfb51075d6a4b04861fa37c52c1" translate="yes" xml:space="preserve">
          <source>If we don&amp;rsquo;t want to stay in the Pending state for too long, our first instinct might be to set &lt;code&gt;timeoutMs&lt;/code&gt; in &lt;code&gt;useTransition&lt;/code&gt; to something smaller, like &lt;code&gt;3000&lt;/code&gt;. You can try this &lt;a href=&quot;https://codesandbox.io/s/practical-kowalevski-kpjg4&quot;&gt;here&lt;/a&gt;. This lets us escape the prolonged Pending state, but we still don&amp;rsquo;t have anything useful to show!</source>
          <target state="translated">Si no queremos permanecer en el estado Pendiente por mucho tiempo, nuestro primer instinto podr&amp;iacute;a ser establecer &lt;code&gt;timeoutMs&lt;/code&gt; en &lt;code&gt;useTransition&lt;/code&gt; a algo m&amp;aacute;s peque&amp;ntilde;o, como &lt;code&gt;3000&lt;/code&gt; . Puedes probar esto &lt;a href=&quot;https://codesandbox.io/s/practical-kowalevski-kpjg4&quot;&gt;aqu&amp;iacute;&lt;/a&gt; . Esto nos permite escapar del prolongado estado Pendiente, &amp;iexcl;pero todav&amp;iacute;a no tenemos nada &amp;uacute;til que mostrar!</target>
        </trans-unit>
        <trans-unit id="b28361e99b6744be8efafa4d49b562aaade2f3b5" translate="yes" xml:space="preserve">
          <source>If we intentionally &lt;em&gt;want&lt;/em&gt; to show an inconsistent UI for a small period of time, can we do that?</source>
          <target state="translated">Si intencionalmente &lt;em&gt;queremos&lt;/em&gt; mostrar una IU inconsistente durante un per&amp;iacute;odo de tiempo breve, &amp;iquest;podemos hacerlo?</target>
        </trans-unit>
        <trans-unit id="dc070f0d7e8042a80001420c3eae7347b4592739" translate="yes" xml:space="preserve">
          <source>If we just wanted to set an interval, we wouldn&amp;rsquo;t need the ref (&lt;code&gt;id&lt;/code&gt; could be local to the effect), but it&amp;rsquo;s useful if we want to clear the interval from an event handler:</source>
          <target state="translated">Si solo quisi&amp;eacute;ramos establecer un intervalo, no necesitar&amp;iacute;amos la referencia (la &lt;code&gt;id&lt;/code&gt; entificaci&amp;oacute;n podr&amp;iacute;a ser local para el efecto), pero es &amp;uacute;til si queremos borrar el intervalo de un controlador de eventos:</target>
        </trans-unit>
        <trans-unit id="10129e51e2f781d3b2a1978fc9c0500021cdb2cc" translate="yes" xml:space="preserve">
          <source>If we later edit the Fahrenheit field to be 212, the state of the &lt;code&gt;Calculator&lt;/code&gt; will be:</source>
          <target state="translated">Si luego editamos el campo Fahrenheit para que sea 212, el estado de la &lt;code&gt;Calculator&lt;/code&gt; ser&amp;aacute;:</target>
        </trans-unit>
        <trans-unit id="5ef4de5727a1ae42b86ddd7ac75d5b2cb2686cbb" translate="yes" xml:space="preserve">
          <source>If we make our API responses take 5 seconds, &lt;a href=&quot;https://codesandbox.io/s/relaxed-greider-suewh&quot;&gt;we can confirm&lt;/a&gt; that now React &amp;ldquo;gives up&amp;rdquo; and transitions anyway to the next screen after 3 seconds. This is because we passed &lt;code&gt;{timeoutMs: 3000}&lt;/code&gt; to &lt;code&gt;useTransition()&lt;/code&gt;. For example, if we passed &lt;code&gt;{timeoutMs: 60000}&lt;/code&gt; instead, it would wait a whole minute.</source>
          <target state="translated">Si hacemos que nuestras respuestas de API demoren 5 segundos, &lt;a href=&quot;https://codesandbox.io/s/relaxed-greider-suewh&quot;&gt;podemos confirmar&lt;/a&gt; que ahora React &quot;se rinde&quot; y pasa de todos modos a la siguiente pantalla despu&amp;eacute;s de 3 segundos. Esto se debe a que pasamos &lt;code&gt;{timeoutMs: 3000}&lt;/code&gt; a &lt;code&gt;useTransition()&lt;/code&gt; . Por ejemplo, si pasamos &lt;code&gt;{timeoutMs: 60000}&lt;/code&gt; lugar, esperar&amp;iacute;a un minuto entero.</target>
        </trans-unit>
        <trans-unit id="0d759d3e1bb1bdd18c1893117d44336d9737a917" translate="yes" xml:space="preserve">
          <source>If we try this code, it might seem like it works at first. However, if we randomize the delay time in our &amp;ldquo;fake API&amp;rdquo; implementation and press the &amp;ldquo;Next&amp;rdquo; button fast enough, we&amp;rsquo;ll see from the console logs that something is going very wrong. &lt;strong&gt;Requests from the previous profiles may sometimes &amp;ldquo;come back&amp;rdquo; after we&amp;rsquo;ve already switched the profile to another ID &amp;mdash; and in that case they can overwrite the new state with a stale response for a different ID.&lt;/strong&gt;</source>
          <target state="translated">Si probamos este c&amp;oacute;digo, puede parecer que funciona al principio. Sin embargo, si aleatorizamos el tiempo de retraso en nuestra implementaci&amp;oacute;n de &quot;API falsa&quot; y presionamos el bot&amp;oacute;n &quot;Siguiente&quot; lo suficientemente r&amp;aacute;pido, veremos en los registros de la consola que algo va muy mal. &lt;strong&gt;Las solicitudes de los perfiles anteriores a veces pueden &quot;volver&quot; despu&amp;eacute;s de que ya hayamos cambiado el perfil a otro ID, y en ese caso pueden sobrescribir el nuevo estado con una respuesta obsoleta para un ID diferente.&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="be3a9278266bf705f6dd179c22a52cc57d1c6f99" translate="yes" xml:space="preserve">
          <source>If we used this in React, displaying 1000 elements would require in the order of one billion comparisons. This is far too expensive. Instead, React implements a heuristic O(n) algorithm based on two assumptions:</source>
          <target state="translated">Si usamos esto en React,mostrar 1000 elementos requeriría del orden de mil millones de comparaciones.Esto es demasiado caro.En su lugar,React implementa un algoritmo heurístico de O(n)basado en dos supuestos:</target>
        </trans-unit>
        <trans-unit id="0bd6f78d0df5d6a5d29d430057c8831c6b2afedc" translate="yes" xml:space="preserve">
          <source>If we wanted to wrap the &lt;code&gt;CustomTextInput&lt;/code&gt; above to simulate it being clicked immediately after mounting, we could use a ref to get access to the custom input and call its &lt;code&gt;focusTextInput&lt;/code&gt; method manually:</source>
          <target state="translated">Si quisi&amp;eacute;ramos envolver el &lt;code&gt;CustomTextInput&lt;/code&gt; anterior para simular que se hace clic en &amp;eacute;l inmediatamente despu&amp;eacute;s del montaje, podr&amp;iacute;amos usar una referencia para obtener acceso a la entrada personalizada y llamar a su m&amp;eacute;todo &lt;code&gt;focusTextInput&lt;/code&gt; manualmente:</target>
        </trans-unit>
        <trans-unit id="406ca61e719e6f4e1e3008d4b342561469a8b770" translate="yes" xml:space="preserve">
          <source>If we&amp;rsquo;re willing to sacrifice consistency, we could &lt;strong&gt;pass potentially stale data to the components that delay our transition&lt;/strong&gt;. That&amp;rsquo;s what &lt;code&gt;useDeferredValue()&lt;/code&gt; lets us do:</source>
          <target state="translated">Si estamos dispuestos a sacrificar la coherencia, podr&amp;iacute;amos &lt;strong&gt;pasar datos potencialmente obsoletos a los componentes que retrasan nuestra transici&amp;oacute;n&lt;/strong&gt; . Eso es lo que &lt;code&gt;useDeferredValue()&lt;/code&gt; nos permite hacer:</target>
        </trans-unit>
        <trans-unit id="6c9413bd0fc5834a029e8af7dddbd9382c56068a" translate="yes" xml:space="preserve">
          <source>If you already have &lt;code&gt;props&lt;/code&gt; as an object, and you want to pass it in JSX, you can use &lt;code&gt;...&lt;/code&gt; as a &amp;ldquo;spread&amp;rdquo; operator to pass the whole props object. These two components are equivalent:</source>
          <target state="translated">Si ya tiene &lt;code&gt;props&lt;/code&gt; como objeto y desea pasarlo en JSX, puede usar &lt;code&gt;...&lt;/code&gt; como operador de &quot;extensi&amp;oacute;n&quot; para pasar todo el objeto de props. Estos dos componentes son equivalentes:</target>
        </trans-unit>
        <trans-unit id="8735706de7bdc6d287d2a819b6a76fae1e775b79" translate="yes" xml:space="preserve">
          <source>If you already minify the application scripts, &lt;strong&gt;your site will be production-ready&lt;/strong&gt; if you ensure that the deployed HTML loads the versions of React ending in &lt;code&gt;production.min.js&lt;/code&gt;:</source>
          <target state="translated">Si ya minimiza los scripts de la aplicaci&amp;oacute;n, &lt;strong&gt;su sitio estar&amp;aacute; listo&lt;/strong&gt; para &lt;strong&gt;producci&amp;oacute;n&lt;/strong&gt; si se asegura de que el HTML implementado cargue las versiones de React que terminan en &lt;code&gt;production.min.js&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="1cd058484ca6af46bd0f0bdc60864ddb7e7bdf9f" translate="yes" xml:space="preserve">
          <source>If you are confident you want to write it by hand, you may compare &lt;code&gt;this.props&lt;/code&gt; with &lt;code&gt;nextProps&lt;/code&gt; and &lt;code&gt;this.state&lt;/code&gt; with &lt;code&gt;nextState&lt;/code&gt; and return &lt;code&gt;false&lt;/code&gt; to tell React the update can be skipped. Note that returning &lt;code&gt;false&lt;/code&gt; does not prevent child components from re-rendering when &lt;em&gt;their&lt;/em&gt; state changes.</source>
          <target state="translated">Si est&amp;aacute; seguro de que desea escribirlo a mano, puede comparar &lt;code&gt;this.props&lt;/code&gt; con &lt;code&gt;nextProps&lt;/code&gt; y &lt;code&gt;this.state&lt;/code&gt; con &lt;code&gt;nextState&lt;/code&gt; y devolver &lt;code&gt;false&lt;/code&gt; para decirle a React que se puede omitir la actualizaci&amp;oacute;n. Tenga en cuenta que devolver &lt;code&gt;false&lt;/code&gt; no evita que los componentes secundarios se vuelvan a representar cuando cambia &lt;em&gt;su&lt;/em&gt; estado.</target>
        </trans-unit>
        <trans-unit id="15c76b0412bce989363700bf2ef3011d9639d358" translate="yes" xml:space="preserve">
          <source>If you are using a Babel transform like &lt;a href=&quot;https://babeljs.io/docs/plugins/transform-class-properties/&quot;&gt;transform-class-properties&lt;/a&gt; , you can also declare &lt;code&gt;defaultProps&lt;/code&gt; as static property within a React component class. This syntax has not yet been finalized though and will require a compilation step to work within a browser. For more information, see the &lt;a href=&quot;https://github.com/tc39/proposal-class-fields&quot;&gt;class fields proposal&lt;/a&gt;.</source>
          <target state="translated">Si est&amp;aacute; utilizando una transformaci&amp;oacute;n de Babel como &lt;a href=&quot;https://babeljs.io/docs/plugins/transform-class-properties/&quot;&gt;transform-class-properties&lt;/a&gt; , tambi&amp;eacute;n puede declarar &lt;code&gt;defaultProps&lt;/code&gt; como propiedad est&amp;aacute;tica dentro de una clase de componente React. Sin embargo, esta sintaxis a&amp;uacute;n no se ha finalizado y requerir&amp;aacute; un paso de compilaci&amp;oacute;n para funcionar dentro de un navegador. Para obtener m&amp;aacute;s informaci&amp;oacute;n, consulte la &lt;a href=&quot;https://github.com/tc39/proposal-class-fields&quot;&gt;propuesta de campos de clase&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="75b66416e2290abd98cf21dbd99025df7c4ba6a0" translate="yes" xml:space="preserve">
          <source>If you are using the experimental &lt;a href=&quot;https://babeljs.io/docs/plugins/transform-class-properties/&quot;&gt;public class fields syntax&lt;/a&gt;, you can use a &lt;strong&gt;static&lt;/strong&gt; class field to initialize your &lt;code&gt;contextType&lt;/code&gt;.</source>
          <target state="translated">Si est&amp;aacute; utilizando la &lt;a href=&quot;https://babeljs.io/docs/plugins/transform-class-properties/&quot;&gt;sintaxis de campos de clase p&amp;uacute;blica&lt;/a&gt; experimental , puede utilizar un campo de clase &lt;strong&gt;est&amp;aacute;tica&lt;/strong&gt; para inicializar su &lt;code&gt;contextType&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="2bcd73af03cb4d3e4e3b7c1bd1f74a1bd7b665d0" translate="yes" xml:space="preserve">
          <source>If you aren&amp;rsquo;t sure whether your build process is set up correctly, you can check it by installing &lt;a href=&quot;https://chrome.google.com/webstore/detail/react-developer-tools/fmkadmapgofadopljbjfkapdkoienihi&quot;&gt;React Developer Tools for Chrome&lt;/a&gt;. If you visit a site with React in production mode, the icon will have a dark background:</source>
          <target state="translated">Si no est&amp;aacute; seguro de si su proceso de compilaci&amp;oacute;n est&amp;aacute; configurado correctamente, puede verificarlo instalando &lt;a href=&quot;https://chrome.google.com/webstore/detail/react-developer-tools/fmkadmapgofadopljbjfkapdkoienihi&quot;&gt;React Developer Tools para Chrome&lt;/a&gt; . Si visita un sitio con React en modo de producci&amp;oacute;n, el &amp;iacute;cono tendr&amp;aacute; un fondo oscuro:</target>
        </trans-unit>
        <trans-unit id="eb0c664da034e861544cfcdf5f02c8fd40d847b9" translate="yes" xml:space="preserve">
          <source>If you aren&amp;rsquo;t using class fields syntax, you can use an &lt;a href=&quot;https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Functions/Arrow_functions&quot;&gt;arrow function&lt;/a&gt; in the callback:</source>
          <target state="translated">Si no est&amp;aacute; utilizando la sintaxis de campos de clase, puede utilizar una &lt;a href=&quot;https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Functions/Arrow_functions&quot;&gt;funci&amp;oacute;n de flecha&lt;/a&gt; en la devoluci&amp;oacute;n de llamada:</target>
        </trans-unit>
        <trans-unit id="38bf06802507eba86661f75bc21760f1686e68d8" translate="yes" xml:space="preserve">
          <source>If you aren&amp;rsquo;t, you&amp;rsquo;ll need to setup bundling yourself. For example, see the &lt;a href=&quot;https://webpack.js.org/guides/installation/&quot;&gt;Installation&lt;/a&gt; and &lt;a href=&quot;https://webpack.js.org/guides/getting-started/&quot;&gt;Getting Started&lt;/a&gt; guides on the Webpack docs.</source>
          <target state="translated">Si no es as&amp;iacute;, deber&amp;aacute; configurar la agrupaci&amp;oacute;n usted mismo. Por ejemplo, consulte las gu&amp;iacute;as de &lt;a href=&quot;https://webpack.js.org/guides/installation/&quot;&gt;instalaci&amp;oacute;n&lt;/a&gt; y de &lt;a href=&quot;https://webpack.js.org/guides/getting-started/&quot;&gt;introducci&amp;oacute;n&lt;/a&gt; en los documentos de Webpack.</target>
        </trans-unit>
        <trans-unit id="7e3292dd08de71388ad7c0b1a0bf8e95045ff37d" translate="yes" xml:space="preserve">
          <source>If you call &lt;a href=&quot;react-dom#hydrate&quot;&gt;&lt;code&gt;ReactDOM.hydrate()&lt;/code&gt;&lt;/a&gt; on a node that already has this server-rendered markup, React will preserve it and only attach event handlers, allowing you to have a very performant first-load experience.</source>
          <target state="translated">Si llama a &lt;a href=&quot;react-dom#hydrate&quot;&gt; &lt;code&gt;ReactDOM.hydrate()&lt;/code&gt; &lt;/a&gt; en un nodo que ya tiene este marcado renderizado por el servidor, React lo preservar&amp;aacute; y solo adjuntar&amp;aacute; controladores de eventos, lo que le permitir&amp;aacute; tener una experiencia de primera carga muy eficiente.</target>
        </trans-unit>
        <trans-unit id="c12886015a122be4810ebe17201bb8cce342272e" translate="yes" xml:space="preserve">
          <source>If you call it on a &lt;code&gt;&amp;lt;select&amp;gt;&lt;/code&gt; DOM node, it reads the attributes off of the original DOM node, hides it with an inline style, and then appends a separate DOM node with its own visual representation right after the &lt;code&gt;&amp;lt;select&amp;gt;&lt;/code&gt;. Then it fires jQuery events to notify us about the changes.</source>
          <target state="translated">Si lo llama en un nodo DOM &lt;code&gt;&amp;lt;select&amp;gt;&lt;/code&gt; , lee los atributos del nodo DOM original, lo oculta con un estilo en l&amp;iacute;nea y luego agrega un nodo DOM separado con su propia representaci&amp;oacute;n visual justo despu&amp;eacute;s de &lt;code&gt;&amp;lt;select&amp;gt;&lt;/code&gt; . Luego dispara eventos jQuery para notificarnos sobre los cambios.</target>
        </trans-unit>
        <trans-unit id="a4f9877110efff3327fdffedf68d4026372380df" translate="yes" xml:space="preserve">
          <source>If you can&amp;rsquo;t find a component where it makes sense to own the state, create a new component solely for holding the state and add it somewhere in the hierarchy above the common owner component.</source>
          <target state="translated">Si no puede encontrar un componente en el que tenga sentido poseer el estado, cree un nuevo componente &amp;uacute;nicamente para mantener el estado y agr&amp;eacute;guelo en alg&amp;uacute;n lugar de la jerarqu&amp;iacute;a por encima del componente propietario com&amp;uacute;n.</target>
        </trans-unit>
        <trans-unit id="e80d72886f63f44e90c32f25b0726ec9919167cc" translate="yes" xml:space="preserve">
          <source>If you do have performance issues, by all means, optimize!</source>
          <target state="translated">Si tienes problemas de rendimiento,por supuesto,¡optimízalo!</target>
        </trans-unit>
        <trans-unit id="842af6389784f4195a6f44b18d1ae6472e5779f0" translate="yes" xml:space="preserve">
          <source>If you don&amp;rsquo;t experience the problems described above or don&amp;rsquo;t feel comfortable using JavaScript tools yet, consider &lt;a href=&quot;add-react-to-a-website&quot;&gt;adding React as a plain &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; tag on an HTML page&lt;/a&gt;, optionally &lt;a href=&quot;add-react-to-a-website#optional-try-react-with-jsx&quot;&gt;with JSX&lt;/a&gt;.</source>
          <target state="translated">Si no experimenta los problemas descritos anteriormente o a&amp;uacute;n no se siente c&amp;oacute;modo con las herramientas de JavaScript, considere &lt;a href=&quot;add-react-to-a-website&quot;&gt;agregar React como una etiqueta &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; simple en una p&amp;aacute;gina HTML&lt;/a&gt; , opcionalmente &lt;a href=&quot;add-react-to-a-website#optional-try-react-with-jsx&quot;&gt;con JSX&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="c3a3d724ce9d7d08105873a53c6f8dacf835179a" translate="yes" xml:space="preserve">
          <source>If you don&amp;rsquo;t have a minification step for your scripts, &lt;a href=&quot;https://gist.github.com/gaearon/42a2ffa41b8319948f9be4076286e1f3&quot;&gt;here&amp;rsquo;s one way to set it up&lt;/a&gt;.</source>
          <target state="translated">Si no tiene un paso de minificaci&amp;oacute;n para sus scripts, &lt;a href=&quot;https://gist.github.com/gaearon/42a2ffa41b8319948f9be4076286e1f3&quot;&gt;aqu&amp;iacute; hay una forma de configurarlo&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="a180293faf5f67e8b6a45fe2b65f049a132062b3" translate="yes" xml:space="preserve">
          <source>If you don&amp;rsquo;t use Create React App, you can add &lt;a href=&quot;https://www.npmjs.com/package/@babel/plugin-transform-react-jsx-source&quot;&gt;this plugin&lt;/a&gt; manually to your Babel configuration. Note that it&amp;rsquo;s intended only for development and &lt;strong&gt;must be disabled in production&lt;/strong&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="169a21de60ad2e2c1ea7fcef1a94d52e1be56808" translate="yes" xml:space="preserve">
          <source>If you don&amp;rsquo;t use Create React App, you can add &lt;a href=&quot;https://www.npmjs.com/package/babel-plugin-transform-react-jsx-source&quot;&gt;this plugin&lt;/a&gt; manually to your Babel configuration. Note that it&amp;rsquo;s intended only for development and &lt;strong&gt;must be disabled in production&lt;/strong&gt;.</source>
          <target state="translated">Si no usa la aplicaci&amp;oacute;n Create React, puede agregar &lt;a href=&quot;https://www.npmjs.com/package/babel-plugin-transform-react-jsx-source&quot;&gt;este complemento&lt;/a&gt; manualmente a su configuraci&amp;oacute;n de Babel. Tenga en cuenta que est&amp;aacute; destinado solo para el desarrollo y &lt;strong&gt;debe desactivarse en producci&amp;oacute;n&lt;/strong&gt; .</target>
        </trans-unit>
        <trans-unit id="59cb0765a73ef01c64e7a89fed250a66bd20f39c" translate="yes" xml:space="preserve">
          <source>If you don&amp;rsquo;t use ES6 classes, you may use the &lt;code&gt;create-react-class&lt;/code&gt; module instead. See &lt;a href=&quot;react-without-es6&quot;&gt;Using React without ES6&lt;/a&gt; for more information.</source>
          <target state="translated">Si no usa las clases de ES6, puede usar el m&amp;oacute;dulo &lt;code&gt;create-react-class&lt;/code&gt; en su lugar. Consulte &lt;a href=&quot;react-without-es6&quot;&gt;Uso de React sin ES6&lt;/a&gt; para obtener m&amp;aacute;s informaci&amp;oacute;n.</target>
        </trans-unit>
        <trans-unit id="f856dc1fed776914cf062b3e550d19f3eb8f9429" translate="yes" xml:space="preserve">
          <source>If you don&amp;rsquo;t use ES6 yet, you may use the &lt;code&gt;create-react-class&lt;/code&gt; module instead:</source>
          <target state="translated">Si a&amp;uacute;n no usa ES6, puede usar el m&amp;oacute;dulo &lt;code&gt;create-react-class&lt;/code&gt; en su lugar:</target>
        </trans-unit>
        <trans-unit id="4b0b9b7af2dae0cbfcf4257fa36894387d46af3e" translate="yes" xml:space="preserve">
          <source>If you don&amp;rsquo;t use Relay today, you might have to wait before you can really try Suspense in your app. So far, it&amp;rsquo;s the only implementation that we tested in production and are confident in.</source>
          <target state="translated">Si no usa Relay hoy, es posible que tenga que esperar antes de poder probar Suspense en su aplicaci&amp;oacute;n. Hasta ahora, es la &amp;uacute;nica implementaci&amp;oacute;n que probamos en producci&amp;oacute;n y en la que confiamos.</target>
        </trans-unit>
        <trans-unit id="332383307eebba5d31fd9d269485dc3ba0b151a2" translate="yes" xml:space="preserve">
          <source>If you don&amp;rsquo;t use a JavaScript bundler and loaded React from a &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; tag, it is already in scope as the &lt;code&gt;React&lt;/code&gt; global.</source>
          <target state="translated">Si no usa un paquete de JavaScript y carg&amp;oacute; React desde una etiqueta &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; , ya est&amp;aacute; dentro del alcance como &lt;code&gt;React&lt;/code&gt; global.</target>
        </trans-unit>
        <trans-unit id="6fce0593a2dfad3e9857ade52faf663322205bd6" translate="yes" xml:space="preserve">
          <source>If you don&amp;rsquo;t use either Create React App or Babel, you can use &lt;a href=&quot;https://github.com/flowtype/flow-remove-types&quot;&gt;flow-remove-types&lt;/a&gt; to strip the type annotations.</source>
          <target state="translated">Si no usa la aplicaci&amp;oacute;n Create React ni Babel, puede usar &lt;a href=&quot;https://github.com/flowtype/flow-remove-types&quot;&gt;flow-remove-types&lt;/a&gt; para eliminar las anotaciones de tipo.</target>
        </trans-unit>
        <trans-unit id="fb891743d28825149d46e0a3067c093baedd036f" translate="yes" xml:space="preserve">
          <source>If you feel completely stuck, start by keeping all files in a single folder. Eventually it will grow large enough that you will want to separate some files from the rest. By that time you&amp;rsquo;ll have enough knowledge to tell which files you edit together most often. In general, it is a good idea to keep files that often change together close to each other. This principle is called &amp;ldquo;colocation&amp;rdquo;.</source>
          <target state="translated">Si se siente completamente atascado, comience por mantener todos los archivos en una sola carpeta. Con el tiempo, crecer&amp;aacute; lo suficiente como para que desee separar algunos archivos del resto. Para entonces, tendr&amp;aacute; suficiente conocimiento para saber qu&amp;eacute; archivos edita juntos con m&amp;aacute;s frecuencia. En general, es una buena idea mantener los archivos que a menudo cambian juntos cerca unos de otros. Este principio se llama &quot;colocaci&amp;oacute;n&quot;.</target>
        </trans-unit>
        <trans-unit id="df68e6e9e49708727aa3d9b52f358771b20204ab" translate="yes" xml:space="preserve">
          <source>If you feel that the React documentation goes at a faster pace than you&amp;rsquo;re comfortable with, check out &lt;a href=&quot;https://www.taniarascia.com/getting-started-with-react/&quot;&gt;this overview of React by Tania Rascia&lt;/a&gt;. It introduces the most important React concepts in a detailed, beginner-friendly way. Once you&amp;rsquo;re done, give the documentation another try!</source>
          <target state="translated">Si cree que la documentaci&amp;oacute;n de React va a un ritmo m&amp;aacute;s r&amp;aacute;pido del que se siente c&amp;oacute;modo, consulte &lt;a href=&quot;https://www.taniarascia.com/getting-started-with-react/&quot;&gt;esta descripci&amp;oacute;n general de React de Tania Rascia&lt;/a&gt; . Presenta los conceptos de React m&amp;aacute;s importantes de una manera detallada y amigable para principiantes. Una vez que hayas terminado, prueba la documentaci&amp;oacute;n de nuevo.</target>
        </trans-unit>
        <trans-unit id="4d81fbc72ec17b2e89d0c20f4ef89b52ec88b669" translate="yes" xml:space="preserve">
          <source>If you find that you need the underlying browser event for some reason, simply use the &lt;code&gt;nativeEvent&lt;/code&gt; attribute to get it. Every &lt;code&gt;SyntheticEvent&lt;/code&gt; object has the following attributes:</source>
          <target state="translated">Si encuentra que necesita el evento del navegador subyacente por alguna raz&amp;oacute;n, simplemente use el atributo &lt;code&gt;nativeEvent&lt;/code&gt; para obtenerlo. Cada objeto &lt;code&gt;SyntheticEvent&lt;/code&gt; tiene los siguientes atributos:</target>
        </trans-unit>
        <trans-unit id="96e08083c70a07076b5dab4e563d39dc680a49a8" translate="yes" xml:space="preserve">
          <source>If you find that you need the underlying browser event for some reason, simply use the &lt;code&gt;nativeEvent&lt;/code&gt; attribute to get it. The synthetic events are different from, and do not map directly to, the browser&amp;rsquo;s native events. For example in &lt;code&gt;onMouseLeave&lt;/code&gt;&lt;code&gt;event.nativeEvent&lt;/code&gt; will point to a &lt;code&gt;mouseout&lt;/code&gt; event. The specific mapping is not part of the public API and may change at any time. Every &lt;code&gt;SyntheticEvent&lt;/code&gt; object has the following attributes:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="76310cae2aa02095c07fe271a1cb7cd76b5e2f80" translate="yes" xml:space="preserve">
          <source>If you first click &amp;ldquo;Show alert&amp;rdquo; and then increment the counter, the alert will show the &lt;code&gt;count&lt;/code&gt; variable &lt;strong&gt;at the time you clicked the &amp;ldquo;Show alert&amp;rdquo; button&lt;/strong&gt;. This prevents bugs caused by the code assuming props and state don&amp;rsquo;t change.</source>
          <target state="translated">Si primero hace clic en &quot;Mostrar alerta&quot; y luego incrementa el contador, la alerta mostrar&amp;aacute; la variable de &lt;code&gt;count&lt;/code&gt; &lt;strong&gt;en el momento en que hizo clic en el bot&amp;oacute;n &quot;Mostrar alerta&quot;&lt;/strong&gt; . Esto evita errores causados ​​por el c&amp;oacute;digo asumiendo que los accesorios y el estado no cambian.</target>
        </trans-unit>
        <trans-unit id="88c29ce29fd299ea922160b41c611cec1eecbc8a" translate="yes" xml:space="preserve">
          <source>If you followed the instructions above, you should be able to run Flow for the first time.</source>
          <target state="translated">Si has seguido las instrucciones anteriores,deberías ser capaz de ejecutar Flow por primera vez.</target>
        </trans-unit>
        <trans-unit id="c5309b9cba3e5ecb4cc81e27f68ffbda4d5dab96" translate="yes" xml:space="preserve">
          <source>If you followed the instructions above, you should be able to run TypeScript for the first time.</source>
          <target state="translated">Si has seguido las instrucciones anteriores,deberías ser capaz de ejecutar TypeScript por primera vez.</target>
        </trans-unit>
        <trans-unit id="35f39f38f2b3af85590f8b59543c367401e440f4" translate="yes" xml:space="preserve">
          <source>If you get tired of typing &lt;code&gt;React.createElement&lt;/code&gt; so much, one common pattern is to assign a shorthand:</source>
          <target state="translated">Si te cansas de escribir tanto &lt;code&gt;React.createElement&lt;/code&gt; , un patr&amp;oacute;n com&amp;uacute;n es asignar una abreviatura:</target>
        </trans-unit>
        <trans-unit id="7325f76c86bc8debb6d4b74351284f0958afc1d0" translate="yes" xml:space="preserve">
          <source>If you have a large existing app, or if your app depends on a lot of third-party packages, please don&amp;rsquo;t expect that you can use the Concurrent Mode immediately. &lt;strong&gt;For example, at Facebook we are using Concurrent Mode for the new website, but we&amp;rsquo;re not planning to enable it on the old website.&lt;/strong&gt; This is because our old website still uses unsafe lifecycle methods in the product code, incompatible third-party libraries, and patterns that don&amp;rsquo;t work well with the Concurrent Mode.</source>
          <target state="translated">Si tiene una aplicaci&amp;oacute;n grande existente, o si su aplicaci&amp;oacute;n depende de muchos paquetes de terceros, no espere poder usar el modo concurrente de inmediato. &lt;strong&gt;Por ejemplo, en Facebook estamos usando el modo concurrente para el nuevo sitio web, pero no planeamos habilitarlo en el sitio web anterior. &lt;/strong&gt;Esto se debe a que nuestro antiguo sitio web todav&amp;iacute;a utiliza m&amp;eacute;todos de ciclo de vida inseguros en el c&amp;oacute;digo del producto, bibliotecas de terceros incompatibles y patrones que no funcionan bien con el modo concurrente.</target>
        </trans-unit>
        <trans-unit id="049b884296cbaec372f91838646c82b517badc89" translate="yes" xml:space="preserve">
          <source>If you have an event handler such as &lt;code&gt;onClick&lt;/code&gt; or &lt;code&gt;onScroll&lt;/code&gt; and want to prevent the callback from being fired too quickly, then you can limit the rate at which callback is executed. This can be done by using:</source>
          <target state="translated">Si tiene un controlador de eventos como &lt;code&gt;onClick&lt;/code&gt; u &lt;code&gt;onScroll&lt;/code&gt; y desea evitar que la devoluci&amp;oacute;n de llamada se active demasiado r&amp;aacute;pido, puede limitar la velocidad a la que se ejecuta la devoluci&amp;oacute;n de llamada. Esto se puede hacer usando:</target>
        </trans-unit>
        <trans-unit id="4c213f4472d12ecabe35b829a19649d2ed0d0411" translate="yes" xml:space="preserve">
          <source>If you haven&amp;rsquo;t yet installed the React DevTools, you can find them here:</source>
          <target state="translated">Si a&amp;uacute;n no ha instalado React DevTools, puede encontrarlas aqu&amp;iacute;:</target>
        </trans-unit>
        <trans-unit id="6f4eeb14778b01a7164c9500da7ff7d43818dfb4" translate="yes" xml:space="preserve">
          <source>If you imagine a component tree as a waterfall of props, each component&amp;rsquo;s state is like an additional water source that joins it at an arbitrary point but also flows down.</source>
          <target state="translated">Si imagina un &amp;aacute;rbol de componentes como una cascada de accesorios, el estado de cada componente es como una fuente de agua adicional que lo une en un punto arbitrario pero que tambi&amp;eacute;n fluye hacia abajo.</target>
        </trans-unit>
        <trans-unit id="827469f1283cc9cfff29c0d19a28165070940429" translate="yes" xml:space="preserve">
          <source>If you implement it naively, inserting an element at the beginning has worse performance. For example, converting between these two trees works poorly:</source>
          <target state="translated">Si lo implementas ingenuamente,insertar un elemento al principio tiene peor rendimiento.Por ejemplo,convertir entre estos dos árboles funciona mal:</target>
        </trans-unit>
        <trans-unit id="d15834c075532b4876fc67d3752aa2da60bdf369" translate="yes" xml:space="preserve">
          <source>If you intentionally need to render something different on the server and the client, you can do a two-pass rendering. Components that render something different on the client can read a state variable like &lt;code&gt;this.state.isClient&lt;/code&gt;, which you can set to &lt;code&gt;true&lt;/code&gt; in &lt;code&gt;componentDidMount()&lt;/code&gt;. This way the initial render pass will render the same content as the server, avoiding mismatches, but an additional pass will happen synchronously right after hydration. Note that this approach will make your components slower because they have to render twice, so use it with caution.</source>
          <target state="translated">Si intencionalmente necesita renderizar algo diferente en el servidor y en el cliente, puede hacer una renderizaci&amp;oacute;n de dos pasos. Los componentes que representan algo diferente en el cliente pueden leer una variable de estado como &lt;code&gt;this.state.isClient&lt;/code&gt; , que puede establecer en &lt;code&gt;true&lt;/code&gt; en &lt;code&gt;componentDidMount()&lt;/code&gt; . De esta manera, el pase de renderizado inicial renderizar&amp;aacute; el mismo contenido que el servidor, evitando desajustes, pero se producir&amp;aacute; un pase adicional sincr&amp;oacute;nicamente justo despu&amp;eacute;s de la hidrataci&amp;oacute;n. Tenga en cuenta que este enfoque har&amp;aacute; que sus componentes sean m&amp;aacute;s lentos porque tienen que renderizarse dos veces, as&amp;iacute; que &amp;uacute;selo con precauci&amp;oacute;n.</target>
        </trans-unit>
        <trans-unit id="286d3422088a5f59b246609f9ba1c043e52041ac" translate="yes" xml:space="preserve">
          <source>If you intentionally want to read the &lt;em&gt;latest&lt;/em&gt; state from some asynchronous callback, you could keep it in &lt;a href=&quot;hooks-faq#is-there-something-like-instance-variables&quot;&gt;a ref&lt;/a&gt;, mutate it, and read from it.</source>
          <target state="translated">Si intencionalmente desea leer el &lt;em&gt;&amp;uacute;ltimo&lt;/em&gt; estado de alguna devoluci&amp;oacute;n de llamada asincr&amp;oacute;nica, puede mantenerlo en &lt;a href=&quot;hooks-faq#is-there-something-like-instance-variables&quot;&gt;una referencia&lt;/a&gt; , mutarlo y leerlo.</target>
        </trans-unit>
        <trans-unit id="e225027ec18fdfd87c9b8442cffb1951bc054fb1" translate="yes" xml:space="preserve">
          <source>If you know that in some situations your component doesn&amp;rsquo;t need to update, you can return &lt;code&gt;false&lt;/code&gt; from &lt;code&gt;shouldComponentUpdate&lt;/code&gt; instead, to skip the whole rendering process, including calling &lt;code&gt;render()&lt;/code&gt; on this component and below.</source>
          <target state="translated">Si sabe que en algunas situaciones su componente no necesita actualizarse, puede devolver &lt;code&gt;false&lt;/code&gt; desde &lt;code&gt;shouldComponentUpdate&lt;/code&gt; en su lugar, para omitir todo el proceso de renderizado, incluida la llamada a &lt;code&gt;render()&lt;/code&gt; en este componente y m&amp;aacute;s abajo.</target>
        </trans-unit>
        <trans-unit id="f91d2eeadcd117626f038d440e0070b4483671a4" translate="yes" xml:space="preserve">
          <source>If you load React from a &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; tag, these top-level APIs are available on the &lt;code&gt;ReactDOM&lt;/code&gt; global. If you use ES6 with npm, you can write &lt;code&gt;import ReactDOM from 'react-dom'&lt;/code&gt;. If you use ES5 with npm, you can write &lt;code&gt;var ReactDOM = require('react-dom')&lt;/code&gt;.</source>
          <target state="translated">Si carga React desde una etiqueta &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; , estas API de nivel superior est&amp;aacute;n disponibles en &lt;code&gt;ReactDOM&lt;/code&gt; global. Si usa ES6 con npm, puede escribir &lt;code&gt;import ReactDOM from 'react-dom'&lt;/code&gt; . Si usa ES5 con npm, puede escribir &lt;code&gt;var ReactDOM = require('react-dom')&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="b93e9d0b0522ffa63fd03295a5cdd6cf8a5e08ca" translate="yes" xml:space="preserve">
          <source>If you look at &lt;code&gt;ProductTable&lt;/code&gt;, you&amp;rsquo;ll see that the table header (containing the &amp;ldquo;Name&amp;rdquo; and &amp;ldquo;Price&amp;rdquo; labels) isn&amp;rsquo;t its own component. This is a matter of preference, and there&amp;rsquo;s an argument to be made either way. For this example, we left it as part of &lt;code&gt;ProductTable&lt;/code&gt; because it is part of rendering the &lt;em&gt;data collection&lt;/em&gt; which is &lt;code&gt;ProductTable&lt;/code&gt;&amp;rsquo;s responsibility. However, if this header grows to be complex (e.g., if we were to add affordances for sorting), it would certainly make sense to make this its own &lt;code&gt;ProductTableHeader&lt;/code&gt; component.</source>
          <target state="translated">Si observa &lt;code&gt;ProductTable&lt;/code&gt; , ver&amp;aacute; que el encabezado de la tabla (que contiene las etiquetas &quot;Nombre&quot; y &quot;Precio&quot;) no es su propio componente. Esta es una cuesti&amp;oacute;n de preferencia, y hay un argumento que se puede hacer de cualquier manera. Para este ejemplo, lo dejamos como parte de &lt;code&gt;ProductTable&lt;/code&gt; porque es parte de la representaci&amp;oacute;n de la &lt;em&gt;recopilaci&amp;oacute;n de datos&lt;/em&gt; que es responsabilidad de &lt;code&gt;ProductTable&lt;/code&gt; . Sin embargo, si este encabezado se vuelve complejo (por ejemplo, si tuvi&amp;eacute;ramos que agregar posibilidades para la clasificaci&amp;oacute;n), ciertamente tendr&amp;iacute;a sentido hacer de este su propio componente &lt;code&gt;ProductTableHeader&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="a8d1d424e7e902eeef27e0e70b07d9c861ccdada" translate="yes" xml:space="preserve">
          <source>If you manually configured Babel for your project, you will need to install a special preset for Flow.</source>
          <target state="translated">Si configuró manualmente Babel para su proyecto,necesitará instalar un preajuste especial para Flow.</target>
        </trans-unit>
        <trans-unit id="2852832854adc219ab4e001ad21ce5c774975fe9" translate="yes" xml:space="preserve">
          <source>If you miss automatic merging, you can write a custom &lt;code&gt;useLegacyState&lt;/code&gt; Hook that merges object state updates. However, instead &lt;strong&gt;we recommend to split state into multiple state variables based on which values tend to change together.&lt;/strong&gt;</source>
          <target state="translated">Si pierde la combinaci&amp;oacute;n autom&amp;aacute;tica, puede escribir un gancho &lt;code&gt;useLegacyState&lt;/code&gt; personalizado que combine las actualizaciones de estado del objeto. Sin embargo, en su lugar &lt;strong&gt;, recomendamos dividir el estado en m&amp;uacute;ltiples variables de estado seg&amp;uacute;n los valores que tienden a cambiar juntos.&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="d4b8240e4f9b63ece74e9ad3522c2bee38662743" translate="yes" xml:space="preserve">
          <source>If you miss automatic merging, you could write a custom &lt;code&gt;useLegacyState&lt;/code&gt; Hook that merges object state updates. However, &lt;strong&gt;we recommend to split state into multiple state variables based on which values tend to change together.&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d79521cbe23ba5b60b28726474c0765c13be1ba0" translate="yes" xml:space="preserve">
          <source>If you name the render function, DevTools will also include its name (e.g. &amp;rdquo;&lt;em&gt;ForwardRef(myFunction)&lt;/em&gt;&amp;rdquo;):</source>
          <target state="translated">Si nombra la funci&amp;oacute;n de renderizado, DevTools tambi&amp;eacute;n incluir&amp;aacute; su nombre (por ejemplo, &quot; &lt;em&gt;ForwardRef (myFunction)&lt;/em&gt; &quot;):</target>
        </trans-unit>
        <trans-unit id="86f30ff0b95e1da79af197894b22f7fa988c3f02" translate="yes" xml:space="preserve">
          <source>If you need to &lt;strong&gt;perform a side effect&lt;/strong&gt; (for example, data fetching or an animation) in response to a change in props, use &lt;a href=&quot;#componentdidupdate&quot;&gt;&lt;code&gt;componentDidUpdate&lt;/code&gt;&lt;/a&gt; lifecycle instead.</source>
          <target state="translated">Si necesita &lt;strong&gt;realizar un efecto secundario&lt;/strong&gt; (por ejemplo, obtener datos o una animaci&amp;oacute;n) en respuesta a un cambio en los accesorios, use el ciclo de vida &lt;a href=&quot;#componentdidupdate&quot;&gt; &lt;code&gt;componentDidUpdate&lt;/code&gt; en su&lt;/a&gt; lugar.</target>
        </trans-unit>
        <trans-unit id="c925262a759cc54d5372cde4e465f2bacbb07601" translate="yes" xml:space="preserve">
          <source>If you need to access event object&amp;rsquo;s properties after the event handler has run, you need to call &lt;code&gt;e.persist()&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="205f3177c868e6b279f403e9745e8dcaeb2d6fd7" translate="yes" xml:space="preserve">
          <source>If you need to catch an error inside event handler, use the regular JavaScript &lt;code&gt;try&lt;/code&gt; / &lt;code&gt;catch&lt;/code&gt; statement:</source>
          <target state="translated">Si necesita detectar un error dentro del controlador de eventos, use la declaraci&amp;oacute;n normal de JavaScript &lt;code&gt;try&lt;/code&gt; / &lt;code&gt;catch&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="70a74f7dd4fe0268f156490184fdd512266a1aa6" translate="yes" xml:space="preserve">
          <source>If you need to have access to the parent component in the handler, you also need to bind the function to the component instance (see below).</source>
          <target state="translated">Si se necesita tener acceso al componente principal del manipulador,también es necesario vincular la función a la instancia del componente (véase más abajo).</target>
        </trans-unit>
        <trans-unit id="ca64c98be7ac6b3d7e337c9127443df11a919dbf" translate="yes" xml:space="preserve">
          <source>If you need to interact with the browser, perform your work in &lt;code&gt;componentDidMount()&lt;/code&gt; or the other lifecycle methods instead. Keeping &lt;code&gt;render()&lt;/code&gt; pure makes components easier to think about.</source>
          <target state="translated">Si necesita interactuar con el navegador, realice su trabajo en &lt;code&gt;componentDidMount()&lt;/code&gt; o en los otros m&amp;eacute;todos del ciclo de vida. Mantener &lt;code&gt;render()&lt;/code&gt; puro hace que sea m&amp;aacute;s f&amp;aacute;cil pensar en los componentes.</target>
        </trans-unit>
        <trans-unit id="999ea53a2b5707c7945911f1e76d3cadb698fd97" translate="yes" xml:space="preserve">
          <source>If you need to modify some value in response to user input or a network response, use &lt;code&gt;state&lt;/code&gt; instead.</source>
          <target state="translated">Si necesita modificar alg&amp;uacute;n valor en respuesta a la entrada del usuario o una respuesta de la red, utilice el &lt;code&gt;state&lt;/code&gt; lugar.</target>
        </trans-unit>
        <trans-unit id="8943142e15f89aafbe2213a7c4d356ded10b9fca" translate="yes" xml:space="preserve">
          <source>If you need to test a custom Hook, you can do so by creating a component in your test, and using your Hook from it. Then you can test the component you wrote.</source>
          <target state="translated">Si necesitas probar un Hook personalizado,puedes hacerlo creando un componente en tu prueba,y usando tu Hook a partir de él.Entonces puedes probar el componente que escribiste.</target>
        </trans-unit>
        <trans-unit id="8f1a99a66b2ca1ad147dc87037be4bed83199b9c" translate="yes" xml:space="preserve">
          <source>If you notice that you&amp;rsquo;re getting comfortable with build tools and want them to do more for you, &lt;a href=&quot;create-a-new-react-app&quot;&gt;the next section&lt;/a&gt; describes some of the most popular and approachable toolchains. If not &amp;mdash; those script tags will do just fine!</source>
          <target state="translated">Si nota que se est&amp;aacute; familiarizando con las herramientas de compilaci&amp;oacute;n y desea que hagan m&amp;aacute;s por usted, &lt;a href=&quot;create-a-new-react-app&quot;&gt;la siguiente secci&amp;oacute;n&lt;/a&gt; describe algunas de las cadenas de herramientas m&amp;aacute;s populares y accesibles. De lo contrario, &amp;iexcl;esas etiquetas de script funcionar&amp;aacute;n bien!</target>
        </trans-unit>
        <trans-unit id="130609e0ef86c8bb326cdb736a8d5fa6030de201" translate="yes" xml:space="preserve">
          <source>If you now create a file called &lt;code&gt;src/like_button.js&lt;/code&gt; with this &lt;strong&gt;&lt;a href=&quot;https://gist.github.com/gaearon/c8e112dc74ac44aac4f673f2c39d19d1/raw/09b951c86c1bf1116af741fa4664511f2f179f0a/like_button.js&quot;&gt;JSX starter code&lt;/a&gt;&lt;/strong&gt;, the watcher will create a preprocessed &lt;code&gt;like_button.js&lt;/code&gt; with the plain JavaScript code suitable for the browser. When you edit the source file with JSX, the transform will re-run automatically.</source>
          <target state="translated">Si ahora crea un archivo llamado &lt;code&gt;src/like_button.js&lt;/code&gt; con este &lt;strong&gt;&lt;a href=&quot;https://gist.github.com/gaearon/c8e112dc74ac44aac4f673f2c39d19d1/raw/09b951c86c1bf1116af741fa4664511f2f179f0a/like_button.js&quot;&gt;c&amp;oacute;digo de inicio JSX&lt;/a&gt;&lt;/strong&gt; , el observador crear&amp;aacute; un &lt;code&gt;like_button.js&lt;/code&gt; preprocesado con el c&amp;oacute;digo JavaScript simple adecuado para el navegador. Cuando edita el archivo fuente con JSX, la transformaci&amp;oacute;n se volver&amp;aacute; a ejecutar autom&amp;aacute;ticamente.</target>
        </trans-unit>
        <trans-unit id="eeff73e27684ff93921c75989a38770068d66406" translate="yes" xml:space="preserve">
          <source>If you often find yourself writing code like this, &lt;a href=&quot;https://www.npmjs.com/package/classnames#usage-with-reactjs&quot;&gt;classnames&lt;/a&gt; package can simplify it.</source>
          <target state="translated">Si a menudo se encuentra escribiendo c&amp;oacute;digo como este, el paquete &lt;a href=&quot;https://www.npmjs.com/package/classnames#usage-with-reactjs&quot;&gt;classnames&lt;/a&gt; puede simplificarlo.</target>
        </trans-unit>
        <trans-unit id="523f123efc70d115d1e9f594fc23ba7ce9678a9f" translate="yes" xml:space="preserve">
          <source>If you pass an empty array (&lt;code&gt;[]&lt;/code&gt;), the props and state inside the effect will always have their initial values. While passing &lt;code&gt;[]&lt;/code&gt; as the second argument is closer to the familiar &lt;code&gt;componentDidMount&lt;/code&gt; and &lt;code&gt;componentWillUnmount&lt;/code&gt; mental model, there are usually &lt;a href=&quot;hooks-faq#is-it-safe-to-omit-functions-from-the-list-of-dependencies&quot;&gt;better&lt;/a&gt;&lt;a href=&quot;hooks-faq#what-can-i-do-if-my-effect-dependencies-change-too-often&quot;&gt;solutions&lt;/a&gt; to avoid re-running effects too often. Also, don&amp;rsquo;t forget that React defers running &lt;code&gt;useEffect&lt;/code&gt; until after the browser has painted, so doing extra work is less of a problem.</source>
          <target state="translated">Si pasa una matriz vac&amp;iacute;a ( &lt;code&gt;[]&lt;/code&gt; ), los accesorios y el estado dentro del efecto siempre tendr&amp;aacute;n sus valores iniciales. Si bien pasar &lt;code&gt;[]&lt;/code&gt; como segundo argumento est&amp;aacute; m&amp;aacute;s cerca del conocido modelo mental &lt;code&gt;componentDidMount&lt;/code&gt; y &lt;code&gt;componentWillUnmount&lt;/code&gt; , generalmente existen &lt;a href=&quot;hooks-faq#is-it-safe-to-omit-functions-from-the-list-of-dependencies&quot;&gt;mejores &lt;/a&gt;&lt;a href=&quot;hooks-faq#what-can-i-do-if-my-effect-dependencies-change-too-often&quot;&gt;soluciones&lt;/a&gt; para evitar la repetici&amp;oacute;n de los efectos con demasiada frecuencia. Adem&amp;aacute;s, no olvide que React &lt;code&gt;useEffect&lt;/code&gt; ejecuci&amp;oacute;n de useEffect hasta despu&amp;eacute;s de que el navegador haya pintado, por lo que hacer trabajo adicional es un problema menor.</target>
        </trans-unit>
        <trans-unit id="ec6b23abafdc2b9551fe13b784fbb8c555b202cd" translate="yes" xml:space="preserve">
          <source>If you pass no value for a prop, it defaults to &lt;code&gt;true&lt;/code&gt;. These two JSX expressions are equivalent:</source>
          <target state="translated">Si no pasa ning&amp;uacute;n valor para una propiedad, el valor predeterminado es &lt;code&gt;true&lt;/code&gt; . Estas dos expresiones JSX son equivalentes:</target>
        </trans-unit>
        <trans-unit id="c20bd7989c1f9f633f138de90c77630a2841cd72" translate="yes" xml:space="preserve">
          <source>If you plan to use React on the client to make the markup interactive, do not use this method. Instead, use &lt;a href=&quot;#rendertonodestream&quot;&gt;&lt;code&gt;renderToNodeStream&lt;/code&gt;&lt;/a&gt; on the server and &lt;a href=&quot;react-dom#hydrate&quot;&gt;&lt;code&gt;ReactDOM.hydrate()&lt;/code&gt;&lt;/a&gt; on the client.</source>
          <target state="translated">Si planea usar React en el cliente para hacer que el marcado sea interactivo, no use este m&amp;eacute;todo. En su lugar, use &lt;a href=&quot;#rendertonodestream&quot;&gt; &lt;code&gt;renderToNodeStream&lt;/code&gt; &lt;/a&gt; en el servidor y &lt;a href=&quot;react-dom#hydrate&quot;&gt; &lt;code&gt;ReactDOM.hydrate()&lt;/code&gt; &lt;/a&gt; en el cliente.</target>
        </trans-unit>
        <trans-unit id="4310f49d1554474b642c8b917463ce1122a21130" translate="yes" xml:space="preserve">
          <source>If you plan to use React on the client to make the markup interactive, do not use this method. Instead, use &lt;a href=&quot;#rendertostring&quot;&gt;&lt;code&gt;renderToString&lt;/code&gt;&lt;/a&gt; on the server and &lt;a href=&quot;react-dom#hydrate&quot;&gt;&lt;code&gt;ReactDOM.hydrate()&lt;/code&gt;&lt;/a&gt; on the client.</source>
          <target state="translated">Si planea usar React en el cliente para hacer que el marcado sea interactivo, no use este m&amp;eacute;todo. En su lugar, use &lt;a href=&quot;#rendertostring&quot;&gt; &lt;code&gt;renderToString&lt;/code&gt; &lt;/a&gt; en el servidor y &lt;a href=&quot;react-dom#hydrate&quot;&gt; &lt;code&gt;ReactDOM.hydrate()&lt;/code&gt; &lt;/a&gt; en el cliente.</target>
        </trans-unit>
        <trans-unit id="47e07a9bb649f4c37cacef3f1b08b496d76e7c98" translate="yes" xml:space="preserve">
          <source>If you prefer to &lt;strong&gt;learn by doing,&lt;/strong&gt; check out our &lt;a href=&quot;https://reactjs.org/tutorial/tutorial.html&quot;&gt;practical tutorial&lt;/a&gt;. In this tutorial, we build a tic-tac-toe game in React. You might be tempted to skip it because you&amp;rsquo;re not building games &amp;mdash; but give it a chance. The techniques you&amp;rsquo;ll learn in the tutorial are fundamental to building &lt;em&gt;any&lt;/em&gt; React apps, and mastering it will give you a much deeper understanding.</source>
          <target state="translated">Si prefiere &lt;strong&gt;aprender haciendo,&lt;/strong&gt; consulte nuestro &lt;a href=&quot;https://reactjs.org/tutorial/tutorial.html&quot;&gt;tutorial pr&amp;aacute;ctico&lt;/a&gt; . En este tutorial, creamos un juego de tic-tac-toe en React. Es posible que tenga la tentaci&amp;oacute;n de omitirlo porque no est&amp;aacute; creando juegos, pero d&amp;eacute;le una oportunidad. Las t&amp;eacute;cnicas que aprender&amp;aacute; en el tutorial son fundamentales para la construcci&amp;oacute;n de &lt;em&gt;cualquier&lt;/em&gt; Reaccionar aplicaciones, y el dominio que le dar&amp;aacute; una comprensi&amp;oacute;n mucho m&amp;aacute;s profunda.</target>
        </trans-unit>
        <trans-unit id="c1b9fd1209940d1b60d72917c0ebfc7e5668281f" translate="yes" xml:space="preserve">
          <source>If you prefer to &lt;strong&gt;learn by doing,&lt;/strong&gt; check out our &lt;a href=&quot;https://reactjs.org/tutorial/tutorial.html&quot;&gt;practical tutorial&lt;/a&gt;. In this tutorial, we build a tic-tac-toe game in React. You might be tempted to skip it because you&amp;rsquo;re not into building games &amp;mdash; but give it a chance. The techniques you&amp;rsquo;ll learn in the tutorial are fundamental to building &lt;em&gt;any&lt;/em&gt; React apps, and mastering it will give you a much deeper understanding.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="25ae91e52cf25cb83ca4d281086a571771ef39b0" translate="yes" xml:space="preserve">
          <source>If you prefer to &lt;strong&gt;learn by doing&lt;/strong&gt;, start with our &lt;a href=&quot;https://reactjs.org/tutorial/tutorial.html&quot;&gt;practical tutorial&lt;/a&gt;.</source>
          <target state="translated">Si prefiere &lt;strong&gt;aprender haciendo&lt;/strong&gt; , comience con nuestro &lt;a href=&quot;https://reactjs.org/tutorial/tutorial.html&quot;&gt;tutorial pr&amp;aacute;ctico&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="c18121d1ed0c7e2f4c183167ee82f078e32e932e" translate="yes" xml:space="preserve">
          <source>If you prefer to &lt;strong&gt;learn concepts step by step,&lt;/strong&gt; our &lt;a href=&quot;index&quot;&gt;guide to main concepts&lt;/a&gt; is the best place to start. Every next chapter in it builds on the knowledge introduced in the previous chapters so you won&amp;rsquo;t miss anything as you go along.</source>
          <target state="translated">Si prefiere &lt;strong&gt;aprender los conceptos paso a paso,&lt;/strong&gt; nuestra &lt;a href=&quot;index&quot;&gt;gu&amp;iacute;a de conceptos principales&lt;/a&gt; es el mejor lugar para comenzar. Cada cap&amp;iacute;tulo siguiente se basa en el conocimiento introducido en los cap&amp;iacute;tulos anteriores para que no se pierda nada a medida que avanza.</target>
        </trans-unit>
        <trans-unit id="51a1d7a5fd157767ed19cef5074e83cab2e2cd1f" translate="yes" xml:space="preserve">
          <source>If you prefer to &lt;strong&gt;learn concepts step by step&lt;/strong&gt;, start with our &lt;a href=&quot;index&quot;&gt;guide to main concepts&lt;/a&gt;.</source>
          <target state="translated">Si prefiere &lt;strong&gt;aprender conceptos paso a paso&lt;/strong&gt; , comience con nuestra &lt;a href=&quot;index&quot;&gt;gu&amp;iacute;a de conceptos principales&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="4a70d45458110999e3ed23edf11293a04e3c413b" translate="yes" xml:space="preserve">
          <source>If you prefer to set up your own JavaScript toolchain from scratch, &lt;a href=&quot;https://blog.usejournal.com/creating-a-react-app-from-scratch-f3c693b84658&quot;&gt;check out this guide&lt;/a&gt; that re-creates some of the Create React App functionality.</source>
          <target state="translated">Si prefiere configurar su propia cadena de herramientas de JavaScript desde cero, &lt;a href=&quot;https://blog.usejournal.com/creating-a-react-app-from-scratch-f3c693b84658&quot;&gt;consulte esta gu&amp;iacute;a&lt;/a&gt; que recrea algunas de las funciones de Create React App.</target>
        </trans-unit>
        <trans-unit id="ce6bf88e40be3156ec3b84e97a7685d5e9ea541e" translate="yes" xml:space="preserve">
          <source>If you prefer to use your own text editor, you can also &lt;a href=&quot;https://raw.githubusercontent.com/reactjs/reactjs.org/master/static/html/single-file-example.html&quot;&gt;download this HTML file&lt;/a&gt;, edit it, and open it from the local filesystem in your browser. It does a slow runtime code transformation, so we&amp;rsquo;d only recommend using this for simple demos.</source>
          <target state="translated">Si prefiere utilizar su propio editor de texto, tambi&amp;eacute;n puede &lt;a href=&quot;https://raw.githubusercontent.com/reactjs/reactjs.org/master/static/html/single-file-example.html&quot;&gt;descargar este archivo HTML&lt;/a&gt; , editarlo y abrirlo desde el sistema de archivos local en su navegador. Realiza una transformaci&amp;oacute;n lenta del c&amp;oacute;digo en tiempo de ejecuci&amp;oacute;n, por lo que solo recomendamos usar esto para demostraciones simples.</target>
        </trans-unit>
        <trans-unit id="f757443e0590f766abe60dffa51082eecb2b0c12" translate="yes" xml:space="preserve">
          <source>If you press &amp;ldquo;Open Profile&amp;rdquo; now, you can tell something is wrong. It takes a whole seven seconds to make the transition now! This is because our trivia API is too slow. Let&amp;rsquo;s say we can&amp;rsquo;t make the API faster. How can we improve the user experience with this constraint?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d251364ce59ed1632b03eee6d1772a843639a2d0" translate="yes" xml:space="preserve">
          <source>If you press &amp;ldquo;Open Profile&amp;rdquo; now, you can tell something is wrong. It takes whole seven seconds to make the transition now! This is because our trivia API is too slow. Let&amp;rsquo;s say we can&amp;rsquo;t make the API faster. How can we improve the user experience with this constraint?</source>
          <target state="translated">Si presiona &quot;Abrir perfil&quot; ahora, puede notar que algo est&amp;aacute; mal. &amp;iexcl;Se necesitan siete segundos completos para hacer la transici&amp;oacute;n ahora! Esto se debe a que nuestra API de trivia es demasiado lenta. Digamos que no podemos hacer que la API sea m&amp;aacute;s r&amp;aacute;pida. &amp;iquest;C&amp;oacute;mo podemos mejorar la experiencia del usuario con esta restricci&amp;oacute;n?</target>
        </trans-unit>
        <trans-unit id="ab0fcad6ece9f5a091fd940a4e69d81e420608bb" translate="yes" xml:space="preserve">
          <source>If you return the same value from a Reducer Hook as the current state, React will bail out without rendering the children or firing effects. (React uses the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is#Description&quot;&gt;&lt;code&gt;Object.is&lt;/code&gt; comparison algorithm&lt;/a&gt;.)</source>
          <target state="translated">Si devuelve el mismo valor de un Reducer Hook que el estado actual, React se retirar&amp;aacute; sin representar a los ni&amp;ntilde;os ni disparar efectos. (React usa el &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is#Description&quot;&gt;algoritmo de comparaci&amp;oacute;n &lt;/a&gt; &lt;code&gt;Object.is&lt;/code&gt; ).</target>
        </trans-unit>
        <trans-unit id="759d8e9c5a7a89f86b0192bac647a89f30115a0f" translate="yes" xml:space="preserve">
          <source>If you run this code and watch the console logs, you&amp;rsquo;ll notice the sequence is:</source>
          <target state="translated">Si ejecuta este c&amp;oacute;digo y observa los registros de la consola, notar&amp;aacute; que la secuencia es:</target>
        </trans-unit>
        <trans-unit id="5efa147e22d5f8a48f15dbde439cdd94297df3a9" translate="yes" xml:space="preserve">
          <source>If you see an error message saying &amp;ldquo;You have mistakenly installed the &lt;code&gt;babel&lt;/code&gt; package&amp;rdquo;, you might have missed &lt;a href=&quot;#add-jsx-to-a-project&quot;&gt;the previous step&lt;/a&gt;. Perform it in the same folder, and then try again.</source>
          <target state="translated">Si ve un mensaje de error que dice &quot;Ha instalado por error el paquete &lt;code&gt;babel&lt;/code&gt; &quot;, es posible que se haya perdido &lt;a href=&quot;#add-jsx-to-a-project&quot;&gt;el paso anterior&lt;/a&gt; . Real&amp;iacute;celo en la misma carpeta y vuelva a intentarlo.</target>
        </trans-unit>
        <trans-unit id="b075833725a23cb77b5ba4dda4642dd74ec1c98a" translate="yes" xml:space="preserve">
          <source>If you see no output, it means that it completed successfully.</source>
          <target state="translated">Si no ves ninguna salida,significa que se completó con éxito.</target>
        </trans-unit>
        <trans-unit id="0c6e92cbb0194609294df3744170608e6c63909c" translate="yes" xml:space="preserve">
          <source>If you serve React from a CDN, we recommend to keep the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_settings_attributes&quot;&gt;&lt;code&gt;crossorigin&lt;/code&gt;&lt;/a&gt; attribute set:</source>
          <target state="translated">Si sirve React desde una CDN, le recomendamos que mantenga el &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_settings_attributes&quot;&gt; &lt;code&gt;crossorigin&lt;/code&gt; &lt;/a&gt; atributos de origen cruzado :</target>
        </trans-unit>
        <trans-unit id="6188f195de25803ee9e3dfbd8d8e12ea147b1a34" translate="yes" xml:space="preserve">
          <source>If you set &lt;code&gt;suppressHydrationWarning&lt;/code&gt; to &lt;code&gt;true&lt;/code&gt;, React will not warn you about mismatches in the attributes and the content of that element. It only works one level deep, and is intended to be used as an escape hatch. Don&amp;rsquo;t overuse it. You can read more about hydration in the &lt;a href=&quot;react-dom#hydrate&quot;&gt;&lt;code&gt;ReactDOM.hydrate()&lt;/code&gt; documentation&lt;/a&gt;.</source>
          <target state="translated">Si establece &lt;code&gt;suppressHydrationWarning&lt;/code&gt; en &lt;code&gt;true&lt;/code&gt; , React no le advertir&amp;aacute; sobre discrepancias en los atributos y el contenido de ese elemento. Solo funciona a un nivel de profundidad y est&amp;aacute; dise&amp;ntilde;ado para usarse como una trampilla de escape. No lo uses en exceso. Puede leer m&amp;aacute;s sobre la hidrataci&amp;oacute;n en la &lt;a href=&quot;react-dom#hydrate&quot;&gt;documentaci&amp;oacute;n de &lt;/a&gt; &lt;code&gt;ReactDOM.hydrate()&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="d4b1b979c8e20d02ec5a081ede351ede1e9e64ce" translate="yes" xml:space="preserve">
          <source>If you specify a &lt;a href=&quot;hooks-reference#conditionally-firing-an-effect&quot;&gt;list of dependencies&lt;/a&gt; as the last argument to &lt;code&gt;useEffect&lt;/code&gt;, &lt;code&gt;useLayoutEffect&lt;/code&gt;, &lt;code&gt;useMemo&lt;/code&gt;, &lt;code&gt;useCallback&lt;/code&gt;, or &lt;code&gt;useImperativeHandle&lt;/code&gt;, it must include all values that are used inside the callback and participate in the React data flow. That includes props, state, and anything derived from them.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="83336394d37cf4d7a5b1da0ff1854997645bf222" translate="yes" xml:space="preserve">
          <source>If you specify a &lt;a href=&quot;hooks-reference#conditionally-firing-an-effect&quot;&gt;list of dependencies&lt;/a&gt; as the last argument to &lt;code&gt;useEffect&lt;/code&gt;, &lt;code&gt;useMemo&lt;/code&gt;, &lt;code&gt;useCallback&lt;/code&gt;, or &lt;code&gt;useImperativeHandle&lt;/code&gt;, it must include all values used inside that participate in the React data flow. That includes props, state, and anything derived from them.</source>
          <target state="translated">Si especifica una &lt;a href=&quot;hooks-reference#conditionally-firing-an-effect&quot;&gt;lista de dependencias&lt;/a&gt; como &amp;uacute;ltimo argumento para &lt;code&gt;useEffect&lt;/code&gt; , &lt;code&gt;useMemo&lt;/code&gt; , &lt;code&gt;useCallback&lt;/code&gt; o &lt;code&gt;useImperativeHandle&lt;/code&gt; , debe incluir todos los valores usados ​​dentro que participan en el flujo de datos de React. Eso incluye accesorios, estado y todo lo que se derive de ellos.</target>
        </trans-unit>
        <trans-unit id="faccdb965000ef6d3d72692abf68f01516804384" translate="yes" xml:space="preserve">
          <source>If you try to type or check the box in the current version of the example, you&amp;rsquo;ll see that React ignores your input. This is intentional, as we&amp;rsquo;ve set the &lt;code&gt;value&lt;/code&gt; prop of the &lt;code&gt;input&lt;/code&gt; to always be equal to the &lt;code&gt;state&lt;/code&gt; passed in from &lt;code&gt;FilterableProductTable&lt;/code&gt;.</source>
          <target state="translated">Si intenta escribir o marcar la casilla en la versi&amp;oacute;n actual del ejemplo, ver&amp;aacute; que React ignora su entrada. Esto es intencional, ya que hemos establecido el &lt;code&gt;value&lt;/code&gt; prop de la &lt;code&gt;input&lt;/code&gt; para que siempre sea igual al &lt;code&gt;state&lt;/code&gt; pasado desde &lt;code&gt;FilterableProductTable&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="6678ae603feef4934590c9fa76461843ca5d6683" translate="yes" xml:space="preserve">
          <source>If you update a State Hook to the same value as the current state, React will bail out without rendering the children or firing effects. (React uses the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is#Description&quot;&gt;&lt;code&gt;Object.is&lt;/code&gt; comparison algorithm&lt;/a&gt;.)</source>
          <target state="translated">Si actualiza un State Hook al mismo valor que el estado actual, React se recuperar&amp;aacute; sin representar a los ni&amp;ntilde;os ni disparar efectos. (React usa el &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is#Description&quot;&gt;algoritmo de comparaci&amp;oacute;n &lt;/a&gt; &lt;code&gt;Object.is&lt;/code&gt; ).</target>
        </trans-unit>
        <trans-unit id="56066137d55bf0e7ea681f5b1c777065f8ae4ce8" translate="yes" xml:space="preserve">
          <source>If you use &lt;a href=&quot;https://www.npmjs.com/&quot;&gt;npm&lt;/a&gt;, run:</source>
          <target state="translated">Si usa &lt;a href=&quot;https://www.npmjs.com/&quot;&gt;npm&lt;/a&gt; , ejecute:</target>
        </trans-unit>
        <trans-unit id="ade7aaf73be5436c90eadc8335fc3dd6aae134ed" translate="yes" xml:space="preserve">
          <source>If you use &lt;a href=&quot;https://yarnpkg.com/&quot;&gt;Yarn&lt;/a&gt;, run:</source>
          <target state="translated">Si usa &lt;a href=&quot;https://yarnpkg.com/&quot;&gt;Yarn&lt;/a&gt; , ejecute:</target>
        </trans-unit>
        <trans-unit id="2699510a2c0fb7e097d079f03709fb5c277aac2f" translate="yes" xml:space="preserve">
          <source>If you use &lt;code&gt;react-test-renderer&lt;/code&gt;, it also provides an &lt;code&gt;act&lt;/code&gt; export that behaves the same way.</source>
          <target state="translated">Si usa &lt;code&gt;react-test-renderer&lt;/code&gt; , tambi&amp;eacute;n proporciona una exportaci&amp;oacute;n de &lt;code&gt;act&lt;/code&gt; os que se comporta de la misma manera.</target>
        </trans-unit>
        <trans-unit id="2f17ca24abe37d1b86e8f96b92da181d93f0022e" translate="yes" xml:space="preserve">
          <source>If you use Create React App, you can &lt;strong&gt;skip the rest of this page&lt;/strong&gt;. It describes the manual setup which doesn&amp;rsquo;t apply to Create React App users.</source>
          <target state="translated">Si usa la aplicaci&amp;oacute;n Create React, puede &lt;strong&gt;omitir el resto de esta p&amp;aacute;gina&lt;/strong&gt; . Describe la configuraci&amp;oacute;n manual que no se aplica a los usuarios de la aplicaci&amp;oacute;n Create React.</target>
        </trans-unit>
        <trans-unit id="4a8c97699e7a184def74f6d4614cb42d1ba5dcbe" translate="yes" xml:space="preserve">
          <source>If you use React 16.2 or lower, or if you need more flexibility than provided by ref forwarding, you can use &lt;a href=&quot;https://gist.github.com/gaearon/1a018a023347fe1c2476073330cc5509&quot;&gt;this alternative approach&lt;/a&gt; and explicitly pass a ref as a differently named prop.</source>
          <target state="translated">Si usa React 16.2 o una versi&amp;oacute;n anterior, o si necesita m&amp;aacute;s flexibilidad que la proporcionada por el reenv&amp;iacute;o de referencias, puede usar &lt;a href=&quot;https://gist.github.com/gaearon/1a018a023347fe1c2476073330cc5509&quot;&gt;este enfoque alternativo&lt;/a&gt; y pasar expl&amp;iacute;citamente una referencia como una propuesta con un nombre diferente.</target>
        </trans-unit>
        <trans-unit id="5a26f616e6ce178a355bc6c9ea84fd7cd247eb1f" translate="yes" xml:space="preserve">
          <source>If you use React 16.3 or higher, we recommend to use &lt;a href=&quot;forwarding-refs&quot;&gt;ref forwarding&lt;/a&gt; for these cases. &lt;strong&gt;Ref forwarding lets components opt into exposing any child component&amp;rsquo;s ref as their own&lt;/strong&gt;. You can find a detailed example of how to expose a child&amp;rsquo;s DOM node to a parent component &lt;a href=&quot;forwarding-refs#forwarding-refs-to-dom-components&quot;&gt;in the ref forwarding documentation&lt;/a&gt;.</source>
          <target state="translated">Si usa React 16.3 o superior, le recomendamos que utilice el &lt;a href=&quot;forwarding-refs&quot;&gt;reenv&amp;iacute;o de referencias&lt;/a&gt; para estos casos. &lt;strong&gt;El reenv&amp;iacute;o de referencias permite a los componentes optar por exponer la referencia de cualquier componente secundario como propia&lt;/strong&gt; . Puede encontrar un ejemplo detallado de c&amp;oacute;mo exponer el nodo DOM de un ni&amp;ntilde;o a un componente principal &lt;a href=&quot;forwarding-refs#forwarding-refs-to-dom-components&quot;&gt;en la documentaci&amp;oacute;n de reenv&amp;iacute;o de referencias&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="0c9cdf2ae438a9227b0fb23473474b484ea3d6ee" translate="yes" xml:space="preserve">
          <source>If you use React with Web Components (which is uncommon), use the &lt;code&gt;class&lt;/code&gt; attribute instead.</source>
          <target state="translated">Si usa React with Web Components (lo cual es poco com&amp;uacute;n), use el atributo de &lt;code&gt;class&lt;/code&gt; lugar.</target>
        </trans-unit>
        <trans-unit id="ab5e9d5516774b9d626ce5a38d7e13d370bfc3f7" translate="yes" xml:space="preserve">
          <source>If you use Yarn, run:</source>
          <target state="translated">Si usas hilo,corre:</target>
        </trans-unit>
        <trans-unit id="102d3b3dd48c9c09e36ebc5686501b3bb694fec8" translate="yes" xml:space="preserve">
          <source>If you use npm, run:</source>
          <target state="translated">Si usas npm,corre:</target>
        </trans-unit>
        <trans-unit id="b8118d016218e4b145cd1549aa3d71605952205a" translate="yes" xml:space="preserve">
          <source>If you use server rendering, keep in mind that &lt;em&gt;neither&lt;/em&gt;&lt;code&gt;useLayoutEffect&lt;/code&gt; nor &lt;code&gt;useEffect&lt;/code&gt; can run until the JavaScript is downloaded. This is why React warns when a server-rendered component contains &lt;code&gt;useLayoutEffect&lt;/code&gt;. To fix this, either move that logic to &lt;code&gt;useEffect&lt;/code&gt; (if it isn&amp;rsquo;t necessary for the first render), or delay showing that component until after the client renders (if the HTML looks broken until &lt;code&gt;useLayoutEffect&lt;/code&gt; runs).</source>
          <target state="translated">Si utiliza la representaci&amp;oacute;n del servidor, tenga en cuenta que &lt;em&gt;ni &lt;/em&gt; &lt;code&gt;useLayoutEffect&lt;/code&gt; ni &lt;code&gt;useEffect&lt;/code&gt; pueden ejecutarse hasta que se descargue JavaScript. Es por eso que React advierte cuando un componente renderizado por el servidor contiene &lt;code&gt;useLayoutEffect&lt;/code&gt; . Para solucionar esto, mueva esa l&amp;oacute;gica a &lt;code&gt;useEffect&lt;/code&gt; (si no es necesario para el primer renderizado), o retrase la visualizaci&amp;oacute;n de ese componente hasta despu&amp;eacute;s de que el cliente renderice (si el HTML parece roto hasta que &lt;code&gt;useLayoutEffect&lt;/code&gt; se ejecute).</target>
        </trans-unit>
        <trans-unit id="70f4f49dc8d98ed757f120ffbd84c5052c4128e4" translate="yes" xml:space="preserve">
          <source>If you use server-side React rendering, normally there is a warning when the server and the client render different content. However, in some rare cases, it is very hard or impossible to guarantee an exact match. For example, timestamps are expected to differ on the server and on the client.</source>
          <target state="translated">Si utiliza la renderización de React del lado del servidor,normalmente hay una advertencia cuando el servidor y el cliente renderizan un contenido diferente.Sin embargo,en algunos casos raros,es muy difícil o imposible garantizar una coincidencia exacta.Por ejemplo,se espera que las marcas de tiempo sean diferentes en el servidor y en el cliente.</target>
        </trans-unit>
        <trans-unit id="4b4178e978ea6a519b02f6012454f8eaa90a9377" translate="yes" xml:space="preserve">
          <source>If you use this optimization, make sure the array includes &lt;strong&gt;all values from the component scope (such as props and state) that change over time and that are used by the effect&lt;/strong&gt;. Otherwise, your code will reference stale values from previous renders. Learn more about &lt;a href=&quot;hooks-faq#is-it-safe-to-omit-functions-from-the-list-of-dependencies&quot;&gt;how to deal with functions&lt;/a&gt; and &lt;a href=&quot;hooks-faq#what-can-i-do-if-my-effect-dependencies-change-too-often&quot;&gt;what to do when the array changes too often&lt;/a&gt;.</source>
          <target state="translated">Si usa esta optimizaci&amp;oacute;n, aseg&amp;uacute;rese de que la matriz incluya &lt;strong&gt;todos los valores del alcance del componente (como los accesorios y el estado) que cambian con el tiempo y que son usados ​​por el efecto&lt;/strong&gt; . De lo contrario, su c&amp;oacute;digo har&amp;aacute; referencia a valores obsoletos de representaciones anteriores. Obtenga m&amp;aacute;s informaci&amp;oacute;n sobre &lt;a href=&quot;hooks-faq#is-it-safe-to-omit-functions-from-the-list-of-dependencies&quot;&gt;c&amp;oacute;mo manejar las funciones&lt;/a&gt; y &lt;a href=&quot;hooks-faq#what-can-i-do-if-my-effect-dependencies-change-too-often&quot;&gt;qu&amp;eacute; hacer cuando la matriz cambia con demasiada frecuencia&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="6b64e4be8855b0be8c046942224485641c321ede" translate="yes" xml:space="preserve">
          <source>If you use this optimization, make sure the array includes &lt;strong&gt;all values from the component scope (such as props and state) that change over time and that are used by the effect&lt;/strong&gt;. Otherwise, your code will reference stale values from previous renders. Learn more about &lt;a href=&quot;hooks-faq#is-it-safe-to-omit-functions-from-the-list-of-dependencies&quot;&gt;how to deal with functions&lt;/a&gt; and what to do when the &lt;a href=&quot;hooks-faq#what-can-i-do-if-my-effect-dependencies-change-too-often&quot;&gt;array values change too often&lt;/a&gt;.</source>
          <target state="translated">Si usa esta optimizaci&amp;oacute;n, aseg&amp;uacute;rese de que la matriz incluya &lt;strong&gt;todos los valores del alcance del componente (como los accesorios y el estado) que cambian con el tiempo y que son usados ​​por el efecto&lt;/strong&gt; . De lo contrario, su c&amp;oacute;digo har&amp;aacute; referencia a valores obsoletos de representaciones anteriores. Obtenga m&amp;aacute;s informaci&amp;oacute;n sobre &lt;a href=&quot;hooks-faq#is-it-safe-to-omit-functions-from-the-list-of-dependencies&quot;&gt;c&amp;oacute;mo manejar funciones&lt;/a&gt; y qu&amp;eacute; hacer cuando los &lt;a href=&quot;hooks-faq#what-can-i-do-if-my-effect-dependencies-change-too-often&quot;&gt;valores de&lt;/a&gt; la matriz cambian con demasiada frecuencia .</target>
        </trans-unit>
        <trans-unit id="d4105f95647054b8ce2ef44647d3afb57bb52d64" translate="yes" xml:space="preserve">
          <source>If you use this shorthand form for &lt;code&gt;React.createElement&lt;/code&gt;, it can be almost as convenient to use React without JSX.</source>
          <target state="translated">Si usa esta forma abreviada para &lt;code&gt;React.createElement&lt;/code&gt; , puede ser casi tan conveniente usar React sin JSX.</target>
        </trans-unit>
        <trans-unit id="cd2291bcdecaf7bcb60d1e8e04c1651f5828fbb6" translate="yes" xml:space="preserve">
          <source>If you used &lt;code&gt;componentWillReceiveProps&lt;/code&gt; for &lt;strong&gt;re-computing some data only when a prop changes&lt;/strong&gt;, &lt;a href=&quot;https://reactjs.org/blog/2018/06/07/you-probably-dont-need-derived-state.html#what-about-memoization&quot;&gt;use a memoization helper instead&lt;/a&gt;.</source>
          <target state="translated">Si us&amp;oacute; &lt;code&gt;componentWillReceiveProps&lt;/code&gt; para &lt;strong&gt;volver a calcular algunos datos solo cuando cambia una propiedad&lt;/strong&gt; , &lt;a href=&quot;https://reactjs.org/blog/2018/06/07/you-probably-dont-need-derived-state.html#what-about-memoization&quot;&gt;use un ayudante de memoizaci&amp;oacute;n en su lugar&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="aa1798685fecc6fe21b1daed99365b31b3e0abf4" translate="yes" xml:space="preserve">
          <source>If you used &lt;code&gt;componentWillReceiveProps&lt;/code&gt; to &lt;strong&gt;&amp;ldquo;reset&amp;rdquo; some state when a prop changes&lt;/strong&gt;, consider either making a component &lt;a href=&quot;https://reactjs.org/blog/2018/06/07/you-probably-dont-need-derived-state.html#recommendation-fully-controlled-component&quot;&gt;fully controlled&lt;/a&gt; or &lt;a href=&quot;https://reactjs.org/blog/2018/06/07/you-probably-dont-need-derived-state.html#recommendation-fully-uncontrolled-component-with-a-key&quot;&gt;fully uncontrolled with a &lt;code&gt;key&lt;/code&gt;&lt;/a&gt; instead.</source>
          <target state="translated">Si us&amp;oacute; &lt;code&gt;componentWillReceiveProps&lt;/code&gt; para &lt;strong&gt;&quot;restablecer&quot; alg&amp;uacute;n estado cuando cambia una propiedad&lt;/strong&gt; , considere hacer un componente &lt;a href=&quot;https://reactjs.org/blog/2018/06/07/you-probably-dont-need-derived-state.html#recommendation-fully-controlled-component&quot;&gt;totalmente controlado&lt;/a&gt; o &lt;a href=&quot;https://reactjs.org/blog/2018/06/07/you-probably-dont-need-derived-state.html#recommendation-fully-uncontrolled-component-with-a-key&quot;&gt;totalmente descontrolado con una &lt;code&gt;key&lt;/code&gt; &lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="a3a26502e1fe8a2d37c09afc69271006277d32cf" translate="yes" xml:space="preserve">
          <source>If you used classes in React before, this code should look familiar:</source>
          <target state="translated">Si usaste las clases de Reaccionar antes,este código debería parecerte familiar:</target>
        </trans-unit>
        <trans-unit id="f80346a09a47643908c6e3e6ed53648965736c75" translate="yes" xml:space="preserve">
          <source>If you visit a site with React in development mode, the icon will have a red background:</source>
          <target state="translated">Si visitas un sitio con React en modo de desarrollo,el icono tendrá un fondo rojo:</target>
        </trans-unit>
        <trans-unit id="8d195f74ff5d044f82074fc4c274d0cab852a524" translate="yes" xml:space="preserve">
          <source>If you want to &lt;strong&gt;&amp;ldquo;reset&amp;rdquo; some state when a prop changes&lt;/strong&gt;, consider either making a component &lt;a href=&quot;https://reactjs.org/blog/2018/06/07/you-probably-dont-need-derived-state.html#recommendation-fully-controlled-component&quot;&gt;fully controlled&lt;/a&gt; or &lt;a href=&quot;https://reactjs.org/blog/2018/06/07/you-probably-dont-need-derived-state.html#recommendation-fully-uncontrolled-component-with-a-key&quot;&gt;fully uncontrolled with a &lt;code&gt;key&lt;/code&gt;&lt;/a&gt; instead.</source>
          <target state="translated">Si desea &lt;strong&gt;&quot;restablecer&quot; alg&amp;uacute;n estado cuando cambia una propiedad&lt;/strong&gt; , considere hacer que un componente &lt;a href=&quot;https://reactjs.org/blog/2018/06/07/you-probably-dont-need-derived-state.html#recommendation-fully-controlled-component&quot;&gt;est&amp;eacute; completamente controlado&lt;/a&gt; o &lt;a href=&quot;https://reactjs.org/blog/2018/06/07/you-probably-dont-need-derived-state.html#recommendation-fully-uncontrolled-component-with-a-key&quot;&gt;completamente descontrolado con una &lt;code&gt;key&lt;/code&gt; &lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="029c59f29056b8c40cf61f9a51a8fb598e52ee51" translate="yes" xml:space="preserve">
          <source>If you want to &lt;strong&gt;re-compute some data only when a prop changes&lt;/strong&gt;, &lt;a href=&quot;https://reactjs.org/blog/2018/06/07/you-probably-dont-need-derived-state.html#what-about-memoization&quot;&gt;use a memoization helper instead&lt;/a&gt;.</source>
          <target state="translated">Si desea &lt;strong&gt;volver a calcular algunos datos solo cuando cambia una propiedad&lt;/strong&gt; , &lt;a href=&quot;https://reactjs.org/blog/2018/06/07/you-probably-dont-need-derived-state.html#what-about-memoization&quot;&gt;use un ayudante de memorizaci&amp;oacute;n en su lugar&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="ec176e2b65d2b16278f626d01b65a2ecdb160310" translate="yes" xml:space="preserve">
          <source>If you want to access the event properties in an asynchronous way, you should call &lt;code&gt;event.persist()&lt;/code&gt; on the event, which will remove the synthetic event from the pool and allow references to the event to be retained by user code.</source>
          <target state="translated">Si desea acceder a las propiedades del evento de forma asincr&amp;oacute;nica, debe llamar a &lt;code&gt;event.persist()&lt;/code&gt; en el evento, lo que eliminar&amp;aacute; el evento sint&amp;eacute;tico del grupo y permitir&amp;aacute; que el c&amp;oacute;digo de usuario retenga las referencias al evento.</target>
        </trans-unit>
        <trans-unit id="7b47497fde239e197e47109c7ac26f42ec5315b4" translate="yes" xml:space="preserve">
          <source>If you want to allow people to take a &lt;code&gt;ref&lt;/code&gt; to your function component, you can use &lt;a href=&quot;forwarding-refs&quot;&gt;&lt;code&gt;forwardRef&lt;/code&gt;&lt;/a&gt; (possibly in conjunction with &lt;a href=&quot;hooks-reference#useimperativehandle&quot;&gt;&lt;code&gt;useImperativeHandle&lt;/code&gt;&lt;/a&gt;), or you can convert the component to a class.</source>
          <target state="translated">Si desea permitir que las personas tomen una &lt;code&gt;ref&lt;/code&gt; erencia a su componente de funci&amp;oacute;n, puede usar &lt;a href=&quot;forwarding-refs&quot;&gt; &lt;code&gt;forwardRef&lt;/code&gt; &lt;/a&gt; (posiblemente junto con &lt;a href=&quot;hooks-reference#useimperativehandle&quot;&gt; &lt;code&gt;useImperativeHandle&lt;/code&gt; &lt;/a&gt; ), o puede convertir el componente en una clase.</target>
        </trans-unit>
        <trans-unit id="9774977c9a0cf92ae57d02963964597fc3851501" translate="yes" xml:space="preserve">
          <source>If you want to extend your contrast testing abilities you can use these tools:</source>
          <target state="translated">Si desea ampliar sus habilidades de evaluación de contraste puede utilizar estas herramientas:</target>
        </trans-unit>
        <trans-unit id="86422551613e303c9360cc61b58e27131dcc97ca" translate="yes" xml:space="preserve">
          <source>If you want to mark an &lt;code&gt;&amp;lt;option&amp;gt;&lt;/code&gt; as selected, reference the value of that option in the &lt;code&gt;value&lt;/code&gt; of its &lt;code&gt;&amp;lt;select&amp;gt;&lt;/code&gt; instead. Check out &lt;a href=&quot;forms#the-select-tag&quot;&gt;&amp;ldquo;The select Tag&amp;rdquo;&lt;/a&gt; for detailed instructions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4c61cdf741239e1629cb1394fd5b25ad2e23b07e" translate="yes" xml:space="preserve">
          <source>If you want to reuse non-UI functionality between components, we suggest extracting it into a separate JavaScript module. The components may import it and use that function, object, or a class, without extending it.</source>
          <target state="translated">Si desea reutilizar la funcionalidad no relacionada con la interfaz entre componentes,sugerimos extraerla en un módulo JavaScript separado.Los componentes pueden importarlo y usar esa función,objeto o clase,sin extenderlo.</target>
        </trans-unit>
        <trans-unit id="0c62cdf54a3c4b69e723af171e44872b6cf5229d" translate="yes" xml:space="preserve">
          <source>If you want to run an effect and clean it up only once (on mount and unmount), you can pass an empty array (&lt;code&gt;[]&lt;/code&gt;) as a second argument. This tells React that your effect doesn&amp;rsquo;t depend on &lt;em&gt;any&lt;/em&gt; values from props or state, so it never needs to re-run. This isn&amp;rsquo;t handled as a special case &amp;mdash; it follows directly from how the dependencies array always works.</source>
          <target state="translated">Si desea ejecutar un efecto y limpiarlo solo una vez (al montar y desmontar), puede pasar una matriz vac&amp;iacute;a ( &lt;code&gt;[]&lt;/code&gt; ) como segundo argumento. Esto le dice a React que su efecto no depende de &lt;em&gt;ning&amp;uacute;n&lt;/em&gt; valor de los accesorios o el estado, por lo que nunca necesita volver a ejecutarse. Esto no se maneja como un caso especial, se deriva directamente de c&amp;oacute;mo funciona siempre la matriz de dependencias.</target>
        </trans-unit>
        <trans-unit id="ff9f5e51b60174574056d9954f4502bc83ff6681" translate="yes" xml:space="preserve">
          <source>If you want to test out how some specific JSX is converted into JavaScript, you can try out &lt;a href=&quot;https://babeljs.io/repl/#?presets=react&amp;amp;code_lz=GYVwdgxgLglg9mABACwKYBt1wBQEpEDeAUIogE6pQhlIA8AJjAG4B8AEhlogO5xnr0AhLQD0jVgG4iAXyJA&quot;&gt;the online Babel compiler&lt;/a&gt;.</source>
          <target state="translated">Si desea probar c&amp;oacute;mo se convierte un JSX espec&amp;iacute;fico en JavaScript, puede probar &lt;a href=&quot;https://babeljs.io/repl/#?presets=react&amp;amp;code_lz=GYVwdgxgLglg9mABACwKYBt1wBQEpEDeAUIogE6pQhlIA8AJjAG4B8AEhlogO5xnr0AhLQD0jVgG4iAXyJA&quot;&gt;el compilador de Babel en l&amp;iacute;nea&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="ff5c25e81b4c83c34080d583406db75e5fbd89cb" translate="yes" xml:space="preserve">
          <source>If you want, you can &lt;a href=&quot;https://codesandbox.io/s/m5o42082xy&quot;&gt;extract this logic&lt;/a&gt; into a reusable Hook:</source>
          <target state="translated">Si lo desea, puede &lt;a href=&quot;https://codesandbox.io/s/m5o42082xy&quot;&gt;extraer esta l&amp;oacute;gica&lt;/a&gt; en un Hook reutilizable:</target>
        </trans-unit>
        <trans-unit id="399df8ef1381d54faa0cf11b65366b05a0ec37b9" translate="yes" xml:space="preserve">
          <source>If you worked with React before, you might be familiar with an older API where the &lt;code&gt;ref&lt;/code&gt; attribute is a string, like &lt;code&gt;&quot;textInput&quot;&lt;/code&gt;, and the DOM node is accessed as &lt;code&gt;this.refs.textInput&lt;/code&gt;. We advise against it because string refs have &lt;a href=&quot;https://github.com/facebook/react/pull/8333#issuecomment-271648615&quot;&gt;some issues&lt;/a&gt;, are considered legacy, and &lt;strong&gt;are likely to be removed in one of the future releases&lt;/strong&gt;.</source>
          <target state="translated">Si trabaj&amp;oacute; con React antes, es posible que est&amp;eacute; familiarizado con una API anterior donde el atributo &lt;code&gt;ref&lt;/code&gt; es una cadena, como &lt;code&gt;&quot;textInput&quot;&lt;/code&gt; , y se accede al nodo DOM como &lt;code&gt;this.refs.textInput&lt;/code&gt; . No lo recomendamos porque las referencias de cadenas tienen &lt;a href=&quot;https://github.com/facebook/react/pull/8333#issuecomment-271648615&quot;&gt;algunos problemas&lt;/a&gt; , se consideran heredadas y &lt;strong&gt;es probable que se eliminen en una de las versiones futuras&lt;/strong&gt; .</target>
        </trans-unit>
        <trans-unit id="aefdc0d20887310bdbbac46cc25deb537667e418" translate="yes" xml:space="preserve">
          <source>If you&amp;rsquo;d rather play it safe, you have a few options:</source>
          <target state="translated">Si prefiere ir a lo seguro, tiene algunas opciones:</target>
        </trans-unit>
        <trans-unit id="c7e8f0a6c71e57b282d77890abf3bb605b7ee301" translate="yes" xml:space="preserve">
          <source>If you&amp;rsquo;re &lt;strong&gt;learning React&lt;/strong&gt; or &lt;strong&gt;creating a new &lt;a href=&quot;glossary#single-page-application&quot;&gt;single-page&lt;/a&gt; app,&lt;/strong&gt; use &lt;a href=&quot;#create-react-app&quot;&gt;Create React App&lt;/a&gt;.</source>
          <target state="translated">Si est&amp;aacute; &lt;strong&gt;aprendiendo React&lt;/strong&gt; o est&amp;aacute; &lt;strong&gt;creando una nueva aplicaci&amp;oacute;n de una &lt;a href=&quot;glossary#single-page-application&quot;&gt;sola p&amp;aacute;gina&lt;/a&gt; ,&lt;/strong&gt; use &lt;a href=&quot;#create-react-app&quot;&gt;Create React App&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="35c007d618e08aa59cd6a4806d7e82c16701dda7" translate="yes" xml:space="preserve">
          <source>If you&amp;rsquo;re benchmarking or experiencing performance problems in your React apps, make sure you&amp;rsquo;re testing with the minified production build.</source>
          <target state="translated">Si est&amp;aacute; realizando una evaluaci&amp;oacute;n comparativa o tiene problemas de rendimiento en sus aplicaciones React, aseg&amp;uacute;rese de realizar la prueba con la compilaci&amp;oacute;n de producci&amp;oacute;n minificada.</target>
        </trans-unit>
        <trans-unit id="7fc0f59462da1ba03fb1bccaf4af7f83c2421ae8" translate="yes" xml:space="preserve">
          <source>If you&amp;rsquo;re building a &lt;strong&gt;component library&lt;/strong&gt; or &lt;strong&gt;integrating with an existing codebase&lt;/strong&gt;, try &lt;a href=&quot;#more-flexible-toolchains&quot;&gt;More Flexible Toolchains&lt;/a&gt;.</source>
          <target state="translated">Si est&amp;aacute; creando una &lt;strong&gt;biblioteca de componentes&lt;/strong&gt; o &lt;strong&gt;integr&amp;aacute;ndose con una base de c&amp;oacute;digo existente&lt;/strong&gt; , pruebe &lt;a href=&quot;#more-flexible-toolchains&quot;&gt;cadenas de herramientas m&amp;aacute;s flexibles&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="e3161c887f0931683850b4ab0d55e09441cde098" translate="yes" xml:space="preserve">
          <source>If you&amp;rsquo;re building a &lt;strong&gt;server-rendered website with Node.js,&lt;/strong&gt; try &lt;a href=&quot;#nextjs&quot;&gt;Next.js&lt;/a&gt;.</source>
          <target state="translated">Si usted est&amp;aacute; construyendo una &lt;strong&gt;p&amp;aacute;gina web rendido servidor con Node.js,&lt;/strong&gt; tratar &lt;a href=&quot;#nextjs&quot;&gt;Next.js&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="1fbb68fe4e24629438d31ddaa72b597eeb2cb3e7" translate="yes" xml:space="preserve">
          <source>If you&amp;rsquo;re building a &lt;strong&gt;static content-oriented website,&lt;/strong&gt; try &lt;a href=&quot;#gatsby&quot;&gt;Gatsby&lt;/a&gt;.</source>
          <target state="translated">Si est&amp;aacute; creando un &lt;strong&gt;sitio web orientado a contenido est&amp;aacute;tico,&lt;/strong&gt; pruebe &lt;a href=&quot;#gatsby&quot;&gt;Gatsby&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="5cb0145636525588474f0e8276c35e496d1aac96" translate="yes" xml:space="preserve">
          <source>If you&amp;rsquo;re coming from a design background, &lt;a href=&quot;https://reactfordesigners.com/&quot;&gt;these resources&lt;/a&gt; are a great place to get started.</source>
          <target state="translated">Si tiene experiencia en dise&amp;ntilde;o, &lt;a href=&quot;https://reactfordesigners.com/&quot;&gt;estos recursos&lt;/a&gt; son un excelente lugar para comenzar.</target>
        </trans-unit>
        <trans-unit id="1b21a8327f2d695d247dab9ba4c44926f184c95d" translate="yes" xml:space="preserve">
          <source>If you&amp;rsquo;re coming from classes, you might be tempted to always call &lt;code&gt;useState()&lt;/code&gt; once and put all state into a single object. You can do it if you&amp;rsquo;d like. Here is an example of a component that follows the mouse movement. We keep its position and size in the local state:</source>
          <target state="translated">Si viene de clases, puede tener la tentaci&amp;oacute;n de llamar siempre a &lt;code&gt;useState()&lt;/code&gt; una vez y poner todos los estados en un solo objeto. Puedes hacerlo si quieres. A continuaci&amp;oacute;n, se muestra un ejemplo de un componente que sigue el movimiento del mouse. Mantenemos su posici&amp;oacute;n y tama&amp;ntilde;o en el estado local:</target>
        </trans-unit>
        <trans-unit id="bbe478a8949bbc21442ebfd2295d514e9b9da8e6" translate="yes" xml:space="preserve">
          <source>If you&amp;rsquo;re curious to see more examples of how JSX is converted to JavaScript, you can try out &lt;a href=&quot;https://babeljs.io/repl/#?presets=react&amp;amp;code_lz=GYVwdgxgLglg9mABACwKYBt1wBQEpEDeAUIogE6pQhlIA8AJjAG4B8AEhlogO5xnr0AhLQD0jVgG4iAXyJA&quot;&gt;the online Babel compiler&lt;/a&gt;.</source>
          <target state="translated">Si tiene curiosidad por ver m&amp;aacute;s ejemplos de c&amp;oacute;mo JSX se convierte a JavaScript, puede probar &lt;a href=&quot;https://babeljs.io/repl/#?presets=react&amp;amp;code_lz=GYVwdgxgLglg9mABACwKYBt1wBQEpEDeAUIogE6pQhlIA8AJjAG4B8AEhlogO5xnr0AhLQD0jVgG4iAXyJA&quot;&gt;el compilador de Babel en l&amp;iacute;nea&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="cdbf14a41aa9dba4bb37c7ce0040976c3385bce3" translate="yes" xml:space="preserve">
          <source>If you&amp;rsquo;re currently using &lt;code&gt;this.refs.textInput&lt;/code&gt; to access refs, we recommend using either the &lt;a href=&quot;#callback-refs&quot;&gt;callback pattern&lt;/a&gt; or the &lt;a href=&quot;#creating-refs&quot;&gt;&lt;code&gt;createRef&lt;/code&gt; API&lt;/a&gt; instead.</source>
          <target state="translated">Si actualmente est&amp;aacute; utilizando &lt;code&gt;this.refs.textInput&lt;/code&gt; para acceder a las referencias, le recomendamos que utilice el &lt;a href=&quot;#callback-refs&quot;&gt;patr&amp;oacute;n de devoluci&amp;oacute;n de llamada&lt;/a&gt; o la &lt;a href=&quot;#creating-refs&quot;&gt;API &lt;/a&gt; &lt;code&gt;createRef&lt;/code&gt; en su lugar.</target>
        </trans-unit>
        <trans-unit id="1c02314892cb9a48617e7c2fdd059a92d98fef42" translate="yes" xml:space="preserve">
          <source>If you&amp;rsquo;re familiar with React class lifecycle methods, you can think of &lt;code&gt;useEffect&lt;/code&gt; Hook as &lt;code&gt;componentDidMount&lt;/code&gt;, &lt;code&gt;componentDidUpdate&lt;/code&gt;, and &lt;code&gt;componentWillUnmount&lt;/code&gt; combined.</source>
          <target state="translated">Si est&amp;aacute; familiarizado con los m&amp;eacute;todos del ciclo de vida de la clase React, puede pensar en &lt;code&gt;useEffect&lt;/code&gt; Hook como &lt;code&gt;componentDidMount&lt;/code&gt; , &lt;code&gt;componentDidUpdate&lt;/code&gt; y &lt;code&gt;componentWillUnmount&lt;/code&gt; combinados.</target>
        </trans-unit>
        <trans-unit id="2bdbd195fffc505b9d49fae18463ec74871e0648" translate="yes" xml:space="preserve">
          <source>If you&amp;rsquo;re familiar with the context API before Hooks, &lt;code&gt;useContext(MyContext)&lt;/code&gt; is equivalent to &lt;code&gt;static contextType = MyContext&lt;/code&gt; in a class, or to &lt;code&gt;&amp;lt;MyContext.Consumer&amp;gt;&lt;/code&gt;.</source>
          <target state="translated">Si est&amp;aacute; familiarizado con la API de contexto antes de Hooks, &lt;code&gt;useContext(MyContext)&lt;/code&gt; es equivalente a &lt;code&gt;static contextType = MyContext&lt;/code&gt; en una clase, o a &lt;code&gt;&amp;lt;MyContext.Consumer&amp;gt;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="71cc84d56c28a1262eb498557fb996376cead69c" translate="yes" xml:space="preserve">
          <source>If you&amp;rsquo;re interested in playing around with React, you can use an online code playground. Try a Hello World template on &lt;a href=&quot;https://reactjs.org/redirect-to-codepen/hello-world&quot;&gt;CodePen&lt;/a&gt;, &lt;a href=&quot;https://codesandbox.io/s/new&quot;&gt;CodeSandbox&lt;/a&gt;, or &lt;a href=&quot;https://glitch.com/edit/#!/remix/starter-react-template&quot;&gt;Glitch&lt;/a&gt;.</source>
          <target state="translated">Si est&amp;aacute; interesado en jugar con React, puede usar un &amp;aacute;rea de juegos de c&amp;oacute;digo en l&amp;iacute;nea. Pruebe una plantilla de Hello World en &lt;a href=&quot;https://reactjs.org/redirect-to-codepen/hello-world&quot;&gt;CodePen&lt;/a&gt; , &lt;a href=&quot;https://codesandbox.io/s/new&quot;&gt;CodeSandbox&lt;/a&gt; o &lt;a href=&quot;https://glitch.com/edit/#!/remix/starter-react-template&quot;&gt;Glitch&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="111900da49ce06d00c9d5ebb52775be7c724af2c" translate="yes" xml:space="preserve">
          <source>If you&amp;rsquo;re interested in playing around with React, you can use an online code playground. Try a Hello World template on &lt;a href=&quot;https://reactjs.org/redirect-to-codepen/hello-world&quot;&gt;CodePen&lt;/a&gt;, &lt;a href=&quot;https://codesandbox.io/s/new&quot;&gt;CodeSandbox&lt;/a&gt;, or &lt;a href=&quot;https://stackblitz.com/fork/react&quot;&gt;Stackblitz&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b478957a5f6430e0e6de7b367d98ab11dc6863ad" translate="yes" xml:space="preserve">
          <source>If you&amp;rsquo;re just starting a project, &lt;a href=&quot;https://en.wikipedia.org/wiki/Analysis_paralysis&quot;&gt;don&amp;rsquo;t spend more than five minutes&lt;/a&gt; on choosing a file structure. Pick any of the above approaches (or come up with your own) and start writing code! You&amp;rsquo;ll likely want to rethink it anyway after you&amp;rsquo;ve written some real code.</source>
          <target state="translated">Si reci&amp;eacute;n est&amp;aacute; comenzando un proyecto, &lt;a href=&quot;https://en.wikipedia.org/wiki/Analysis_paralysis&quot;&gt;no dedique m&amp;aacute;s de cinco minutos&lt;/a&gt; a elegir una estructura de archivo. Elija cualquiera de los enfoques anteriores (o cree uno propio) y comience a escribir c&amp;oacute;digo. Es probable que desee reconsiderarlo de todos modos despu&amp;eacute;s de haber escrito un c&amp;oacute;digo real.</target>
        </trans-unit>
        <trans-unit id="02065c0e863b23eb9f215dd9e810ad0fbc822f45" translate="yes" xml:space="preserve">
          <source>If you&amp;rsquo;re looking for a complete solution including validation, keeping track of the visited fields, and handling form submission, &lt;a href=&quot;https://jaredpalmer.com/formik&quot;&gt;Formik&lt;/a&gt; is one of the popular choices. However, it is built on the same principles of controlled components and managing state &amp;mdash; so don&amp;rsquo;t neglect to learn them.</source>
          <target state="translated">Si est&amp;aacute; buscando una soluci&amp;oacute;n completa que incluya validaci&amp;oacute;n, seguimiento de los campos visitados y manejo del env&amp;iacute;o de formularios, &lt;a href=&quot;https://jaredpalmer.com/formik&quot;&gt;Formik&lt;/a&gt; es una de las opciones m&amp;aacute;s populares. Sin embargo, se basa en los mismos principios de componentes controlados y estado de gesti&amp;oacute;n, as&amp;iacute; que no olvide aprenderlos.</target>
        </trans-unit>
        <trans-unit id="ff4bea4c5b521a6375a592447c292171386ec893" translate="yes" xml:space="preserve">
          <source>If you&amp;rsquo;re migrating code from a class component, note &lt;code&gt;useLayoutEffect&lt;/code&gt; fires in the same phase as &lt;code&gt;componentDidMount&lt;/code&gt; and &lt;code&gt;componentDidUpdate&lt;/code&gt;. However, &lt;strong&gt;we recommend starting with &lt;code&gt;useEffect&lt;/code&gt; first&lt;/strong&gt; and only trying &lt;code&gt;useLayoutEffect&lt;/code&gt; if that causes a problem.</source>
          <target state="translated">Si est&amp;aacute; migrando c&amp;oacute;digo desde un componente de clase, tenga en cuenta que &lt;code&gt;useLayoutEffect&lt;/code&gt; se activa en la misma fase que &lt;code&gt;componentDidMount&lt;/code&gt; y &lt;code&gt;componentDidUpdate&lt;/code&gt; . Sin embargo, &lt;strong&gt;recomendamos comenzar con &lt;code&gt;useEffect&lt;/code&gt; primero&lt;/strong&gt; y solo probar &lt;code&gt;useLayoutEffect&lt;/code&gt; si eso causa un problema.</target>
        </trans-unit>
        <trans-unit id="1c5503753c4ba3a8933fe75a74d026956b4dbf0b" translate="yes" xml:space="preserve">
          <source>If you&amp;rsquo;re new to Hooks, you might want to check out &lt;a href=&quot;hooks-overview&quot;&gt;the overview&lt;/a&gt; first. You may also find useful information in the &lt;a href=&quot;hooks-faq&quot;&gt;frequently asked questions&lt;/a&gt; section.</source>
          <target state="translated">Si es nuevo en Hooks, es posible que desee consultar primero &lt;a href=&quot;hooks-overview&quot;&gt;la descripci&amp;oacute;n general&lt;/a&gt; . Tambi&amp;eacute;n puede encontrar informaci&amp;oacute;n &amp;uacute;til en la secci&amp;oacute;n de &lt;a href=&quot;hooks-faq&quot;&gt;preguntas frecuentes&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="83c7ebc6b49f6dd3625d44bdc17f0c9841de397f" translate="yes" xml:space="preserve">
          <source>If you&amp;rsquo;re not familiar with this syntax, check out the &lt;a href=&quot;hooks-state#tip-what-do-square-brackets-mean&quot;&gt;explanation&lt;/a&gt; in the State Hook documentation.</source>
          <target state="translated">Si no est&amp;aacute; familiarizado con esta sintaxis, consulte la &lt;a href=&quot;hooks-state#tip-what-do-square-brackets-mean&quot;&gt;explicaci&amp;oacute;n&lt;/a&gt; en la documentaci&amp;oacute;n de State Hook.</target>
        </trans-unit>
        <trans-unit id="5174b478727365c84b01ba51be97ccc6bde6c829" translate="yes" xml:space="preserve">
          <source>If you&amp;rsquo;re setting up Webpack yourself, you&amp;rsquo;ll probably want to read Webpack&amp;rsquo;s &lt;a href=&quot;https://webpack.js.org/guides/code-splitting/&quot;&gt;guide on code splitting&lt;/a&gt;. Your Webpack config should look vaguely &lt;a href=&quot;https://gist.github.com/gaearon/ca6e803f5c604d37468b0091d9959269&quot;&gt;like this&lt;/a&gt;.</source>
          <target state="translated">Si est&amp;aacute; configurando Webpack usted mismo, probablemente querr&amp;aacute; leer la &lt;a href=&quot;https://webpack.js.org/guides/code-splitting/&quot;&gt;gu&amp;iacute;a&lt;/a&gt; de Webpack sobre la divisi&amp;oacute;n de c&amp;oacute;digo . La configuraci&amp;oacute;n de su Webpack deber&amp;iacute;a verse vagamente &lt;a href=&quot;https://gist.github.com/gaearon/ca6e803f5c604d37468b0091d9959269&quot;&gt;as&amp;iacute;&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="a795cf4399197efaee67030befff9eb14a55d67d" translate="yes" xml:space="preserve">
          <source>If you&amp;rsquo;re the author of a third party React framework, library, developer tool, or similar infrastructure-type project, you can help us keep React stable for your users and the entire React community by periodically running your test suite against the most recent changes. If you&amp;rsquo;re interested, follow these steps:</source>
          <target state="translated">Si es el autor de un marco, biblioteca, herramienta de desarrollo o proyecto similar de tipo de infraestructura de React de terceros, puede ayudarnos a mantener a React estable para sus usuarios y toda la comunidad de React ejecutando peri&amp;oacute;dicamente su suite de pruebas contra la m&amp;aacute;s reciente cambios. Si est&amp;aacute; interesado, siga estos pasos:</target>
        </trans-unit>
        <trans-unit id="88d974a28ce0731e8c5b22ec90e221bfa58d8cf7" translate="yes" xml:space="preserve">
          <source>If you&amp;rsquo;re used to classes, you might be wondering why the effect cleanup phase happens after every re-render, and not just once during unmounting. Let&amp;rsquo;s look at a practical example to see why this design helps us create components with fewer bugs.</source>
          <target state="translated">Si est&amp;aacute; acostumbrado a las clases, es posible que se pregunte por qu&amp;eacute; la fase de limpieza del efecto ocurre despu&amp;eacute;s de cada renderizado, y no solo una vez durante el desmontaje. Veamos un ejemplo pr&amp;aacute;ctico para ver por qu&amp;eacute; este dise&amp;ntilde;o nos ayuda a crear componentes con menos errores.</target>
        </trans-unit>
        <trans-unit id="1a62f31b074af071c75f6aa5fa6fe227724f9d8d" translate="yes" xml:space="preserve">
          <source>If you&amp;rsquo;re using &lt;a href=&quot;https://create-react-app.dev/&quot;&gt;Create React App&lt;/a&gt;, &lt;a href=&quot;https://nextjs.org/&quot;&gt;Next.js&lt;/a&gt;, &lt;a href=&quot;https://www.gatsbyjs.org/&quot;&gt;Gatsby&lt;/a&gt;, or a similar tool, you will have a Webpack setup out of the box to bundle your app.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d6e2e192cd0c1fbe3f4992433f068147160c96ca" translate="yes" xml:space="preserve">
          <source>If you&amp;rsquo;re using &lt;a href=&quot;https://github.com/facebookincubator/create-react-app&quot;&gt;Create React App&lt;/a&gt;, &lt;a href=&quot;https://github.com/zeit/next.js/&quot;&gt;Next.js&lt;/a&gt;, &lt;a href=&quot;https://www.gatsbyjs.org/&quot;&gt;Gatsby&lt;/a&gt;, or a similar tool, you will have a Webpack setup out of the box to bundle your app.</source>
          <target state="translated">Si est&amp;aacute; utilizando &lt;a href=&quot;https://github.com/facebookincubator/create-react-app&quot;&gt;Create React App&lt;/a&gt; , &lt;a href=&quot;https://github.com/zeit/next.js/&quot;&gt;Next.js&lt;/a&gt; , &lt;a href=&quot;https://www.gatsbyjs.org/&quot;&gt;Gatsby&lt;/a&gt; o una herramienta similar, tendr&amp;aacute; una configuraci&amp;oacute;n Webpack lista para usar para empaquetar su aplicaci&amp;oacute;n.</target>
        </trans-unit>
        <trans-unit id="3d127abe7b8ab646fe461064799810c4bc682187" translate="yes" xml:space="preserve">
          <source>If you&amp;rsquo;re using Create React App, both &lt;code&gt;Object.assign&lt;/code&gt; and the object spread syntax are available by default.</source>
          <target state="translated">Si est&amp;aacute; utilizando la aplicaci&amp;oacute;n Create React, tanto &lt;code&gt;Object.assign&lt;/code&gt; como la sintaxis de propagaci&amp;oacute;n de objetos est&amp;aacute;n disponibles de forma predeterminada.</target>
        </trans-unit>
        <trans-unit id="0e78c645e20c8ca2c19f0d386c2f5955c20c8fe1" translate="yes" xml:space="preserve">
          <source>If you&amp;rsquo;re using Create React App, please follow &lt;a href=&quot;#create-react-app&quot;&gt;the instructions above&lt;/a&gt;.</source>
          <target state="translated">Si est&amp;aacute; utilizando la aplicaci&amp;oacute;n Create React, siga &lt;a href=&quot;#create-react-app&quot;&gt;las instrucciones anteriores&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="2b82de6f7cc131deac549e5bef7f9e8de5d34f8d" translate="yes" xml:space="preserve">
          <source>If you&amp;rsquo;re working on a data fetching library, there&amp;rsquo;s a crucial aspect of Render-as-You-Fetch you don&amp;rsquo;t want to miss. &lt;strong&gt;We kick off fetching &lt;em&gt;before&lt;/em&gt; rendering.&lt;/strong&gt; Look at this code example closer:</source>
          <target state="translated">Si est&amp;aacute; trabajando en una biblioteca de obtenci&amp;oacute;n de datos, hay un aspecto crucial de Render-as-You-Fetch que no querr&amp;aacute; perderse. &lt;strong&gt;Comenzamos a buscar &lt;em&gt;antes de&lt;/em&gt; renderizar. &lt;/strong&gt;Mira este ejemplo de c&amp;oacute;digo m&amp;aacute;s de cerca:</target>
        </trans-unit>
        <trans-unit id="52cc1d74837d5c0361acef0611ccd09597783f72" translate="yes" xml:space="preserve">
          <source>If you&amp;rsquo;re writing a library that tests mostly browser-specific behavior, and requires native browser behavior like layout or real inputs, you could use a framework like &lt;a href=&quot;https://mochajs.org/&quot;&gt;mocha.&lt;/a&gt;</source>
          <target state="translated">Si est&amp;aacute; escribiendo una biblioteca que prueba principalmente el comportamiento espec&amp;iacute;fico del navegador y requiere un comportamiento nativo del navegador como dise&amp;ntilde;o o entradas reales, puede usar un marco como &lt;a href=&quot;https://mochajs.org/&quot;&gt;mocha.&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="f1b3ede746a1b41e135139260bd938036c1b5653" translate="yes" xml:space="preserve">
          <source>If your React component&amp;rsquo;s &lt;code&gt;render()&lt;/code&gt; function renders the same result given the same props and state, you can use &lt;code&gt;React.PureComponent&lt;/code&gt; for a performance boost in some cases.</source>
          <target state="translated">Si la funci&amp;oacute;n &lt;code&gt;render()&lt;/code&gt; su componente React &lt;code&gt;React.PureComponent&lt;/code&gt; el mismo resultado dados los mismos accesorios y estado, puede usar React.PureComponent para aumentar el rendimiento en algunos casos.</target>
        </trans-unit>
        <trans-unit id="2ae535fa4a52d95be43cd119d3dce94ee825d2ad" translate="yes" xml:space="preserve">
          <source>If your application renders long lists of data (hundreds or thousands of rows), we recommended using a technique known as &amp;ldquo;windowing&amp;rdquo;. This technique only renders a small subset of your rows at any given time, and can dramatically reduce the time it takes to re-render the components as well as the number of DOM nodes created.</source>
          <target state="translated">Si su aplicaci&amp;oacute;n muestra largas listas de datos (cientos o miles de filas), le recomendamos que utilice una t&amp;eacute;cnica conocida como &quot;ventanas&quot;. Esta t&amp;eacute;cnica solo representa un peque&amp;ntilde;o subconjunto de sus filas en un momento dado y puede reducir dr&amp;aacute;sticamente el tiempo que lleva volver a representar los componentes, as&amp;iacute; como la cantidad de nodos DOM creados.</target>
        </trans-unit>
        <trans-unit id="6b0415d8714549e60a664370c6ba10482c3fc92d" translate="yes" xml:space="preserve">
          <source>If your application requires pointer events, we recommend adding a third party pointer event polyfill.</source>
          <target state="translated">Si su aplicación requiere eventos de puntero,le recomendamos que añada un evento de puntero de terceros polyfill.</target>
        </trans-unit>
        <trans-unit id="2395816cffe7512d0939e7686c6115bba399430f" translate="yes" xml:space="preserve">
          <source>If your component implements the &lt;code&gt;getSnapshotBeforeUpdate()&lt;/code&gt; lifecycle (which is rare), the value it returns will be passed as a third &amp;ldquo;snapshot&amp;rdquo; parameter to &lt;code&gt;componentDidUpdate()&lt;/code&gt;. Otherwise this parameter will be undefined.</source>
          <target state="translated">Si su componente implementa el ciclo de vida &lt;code&gt;getSnapshotBeforeUpdate()&lt;/code&gt; (lo cual es raro), el valor que devuelve se pasar&amp;aacute; como un tercer par&amp;aacute;metro de &quot;instant&amp;aacute;nea&quot; a &lt;code&gt;componentDidUpdate()&lt;/code&gt; . De lo contrario, este par&amp;aacute;metro no estar&amp;aacute; definido.</target>
        </trans-unit>
        <trans-unit id="5a60b45baec63445920ea948b6b750469a15d8d0" translate="yes" xml:space="preserve">
          <source>If your component renders the same result given the same props, you can wrap it in a call to &lt;code&gt;React.memo&lt;/code&gt; for a performance boost in some cases by memoizing the result. This means that React will skip rendering the component, and reuse the last rendered result.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="20d599f1233ec4f9623c8e348df9de9e2c174bee" translate="yes" xml:space="preserve">
          <source>If your function component renders the same result given the same props, you can wrap it in a call to &lt;code&gt;React.memo&lt;/code&gt; for a performance boost in some cases by memoizing the result. This means that React will skip rendering the component, and reuse the last rendered result.</source>
          <target state="translated">Si el componente de su funci&amp;oacute;n genera el mismo resultado con los mismos accesorios, puede envolverlo en una llamada a &lt;code&gt;React.memo&lt;/code&gt; para aumentar el rendimiento en algunos casos al memorizar el resultado. Esto significa que React omitir&amp;aacute; la renderizaci&amp;oacute;n del componente y reutilizar&amp;aacute; el &amp;uacute;ltimo resultado renderizado.</target>
        </trans-unit>
        <trans-unit id="7b153be87230d19e0959754d7e8fdb722e18406e" translate="yes" xml:space="preserve">
          <source>If your project is built with &lt;a href=&quot;https://github.com/facebookincubator/create-react-app&quot;&gt;Create React App&lt;/a&gt;, run:</source>
          <target state="translated">Si su proyecto est&amp;aacute; construido con la &lt;a href=&quot;https://github.com/facebookincubator/create-react-app&quot;&gt;aplicaci&amp;oacute;n Create React&lt;/a&gt; , ejecute:</target>
        </trans-unit>
        <trans-unit id="4f76989cbe467f747eafaee915ffd618ee7e8e9e" translate="yes" xml:space="preserve">
          <source>If your project was set up using &lt;a href=&quot;https://github.com/facebookincubator/create-react-app&quot;&gt;Create React App&lt;/a&gt;, congratulations! The Flow annotations are already being stripped by default so you don&amp;rsquo;t need to do anything else in this step.</source>
          <target state="translated">Si su proyecto se configur&amp;oacute; con la &lt;a href=&quot;https://github.com/facebookincubator/create-react-app&quot;&gt;aplicaci&amp;oacute;n Create React&lt;/a&gt; , &amp;iexcl;felicitaciones! Las anotaciones de flujo ya se est&amp;aacute;n eliminando de forma predeterminada, por lo que no necesita hacer nada m&amp;aacute;s en este paso.</target>
        </trans-unit>
        <trans-unit id="0fc4f1f17431418025447890fea827dfa0079ea0" translate="yes" xml:space="preserve">
          <source>If your update function returns the exact same value as the current state, the subsequent rerender will be skipped completely.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="71e8d7dcd1b990fee40afd460f8d53442f4e8b92" translate="yes" xml:space="preserve">
          <source>If your update function returns the exact same value, the subsequent rerender will be skipped completely.</source>
          <target state="translated">Si su función de actualización devuelve exactamente el mismo valor,la retransmisión posterior se omitirá por completo.</target>
        </trans-unit>
        <trans-unit id="e2e9082f9e460ca12ce12808ea1db2401ca59946" translate="yes" xml:space="preserve">
          <source>Image Events</source>
          <target state="translated">Eventos de imagen</target>
        </trans-unit>
        <trans-unit id="38bbbb29751f3fd92cc08381c3226ccef034d3b1" translate="yes" xml:space="preserve">
          <source>Imagine that we already have a JSON API and a mock from our designer. The mock looks like this:</source>
          <target state="translated">Imagina que ya tenemos un API de JSON y una burla de nuestro diseñador.El simulacro se ve así:</target>
        </trans-unit>
        <trans-unit id="515dd2117b7986f40a9ea292c49529e087a55c0a" translate="yes" xml:space="preserve">
          <source>Imagine we&amp;rsquo;re navigating between two screens in an app. Sometimes, we might not have enough code and data loaded to show a &amp;ldquo;good enough&amp;rdquo; loading state to the user on the new screen. Transitioning to an empty screen or a large spinner can be a jarring experience. However, it&amp;rsquo;s also common that the necessary code and data doesn&amp;rsquo;t take too long to fetch. &lt;strong&gt;Wouldn&amp;rsquo;t it be nicer if React could stay on the old screen for a little longer, and &amp;ldquo;skip&amp;rdquo; the &amp;ldquo;bad loading state&amp;rdquo; before showing the new screen?&lt;/strong&gt;</source>
          <target state="translated">Imagina que navegamos entre dos pantallas en una aplicaci&amp;oacute;n. A veces, es posible que no tengamos suficiente c&amp;oacute;digo y datos cargados para mostrar un estado de carga &quot;suficientemente bueno&quot; al usuario en la nueva pantalla. La transici&amp;oacute;n a una pantalla vac&amp;iacute;a o una rueda giratoria grande puede ser una experiencia discordante. Sin embargo, tambi&amp;eacute;n es com&amp;uacute;n que el c&amp;oacute;digo y los datos necesarios no tarden demasiado en recuperarse. &lt;strong&gt;&amp;iquest;No ser&amp;iacute;a mejor si React pudiera permanecer en la pantalla anterior durante un poco m&amp;aacute;s de tiempo y &quot;omitir&quot; el &quot;estado de carga incorrecto&quot; antes de mostrar la nueva pantalla?&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="a33a303f56a6bbd06206e5ce4d8446405d3fa4f3" translate="yes" xml:space="preserve">
          <source>Importantly, custom Hooks give you the power to constrain React API if you&amp;rsquo;d like to type them more strictly in some way. React gives you the primitives, but you can combine them in different ways than what we provide out of the box.</source>
          <target state="translated">Es importante destacar que los Hooks personalizados le dan el poder de restringir React API si desea escribirlos de manera m&amp;aacute;s estricta de alguna manera. React le brinda las primitivas, pero puede combinarlas de diferentes maneras a las que le brindamos de f&amp;aacute;brica.</target>
        </trans-unit>
        <trans-unit id="389fbb58f34b12bedefc8ca743f17e0f3583836d" translate="yes" xml:space="preserve">
          <source>Importantly, the way you &lt;em&gt;use&lt;/em&gt; React is the same. Concepts like components, props, and state fundamentally work the same way. When you want to update the screen, you set the state.</source>
          <target state="translated">Es importante destacar que la forma en que &lt;em&gt;usa&lt;/em&gt; React es la misma. Los conceptos como componentes, accesorios y estado funcionan fundamentalmente de la misma manera. Cuando desee actualizar la pantalla, establezca el estado.</target>
        </trans-unit>
        <trans-unit id="1368d43d01a36b5581bb3e9a2be050b9de12c101" translate="yes" xml:space="preserve">
          <source>In CSS, the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/display#display_contents&quot;&gt;&lt;code&gt;display: contents&lt;/code&gt;&lt;/a&gt; attribute can be used if you don&amp;rsquo;t want the node to be part of the layout.</source>
          <target state="translated">En CSS, el atributo &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/display#display_contents&quot;&gt; &lt;code&gt;display: contents&lt;/code&gt; &lt;/a&gt; se puede utilizar si no desea que el nodo forme parte del dise&amp;ntilde;o.</target>
        </trans-unit>
        <trans-unit id="4b55e065dea1bfb41665c75fc1cc794c8f70a095" translate="yes" xml:space="preserve">
          <source>In Concurrent Mode, rendering is not blocking. It is interruptible. This improves the user experience. It also unlocks new features that weren&amp;rsquo;t possible before. Before we look at concrete examples in the &lt;a href=&quot;concurrent-mode-suspense&quot;&gt;next&lt;/a&gt;&lt;a href=&quot;concurrent-mode-patterns&quot;&gt;chapters&lt;/a&gt;, we&amp;rsquo;ll do a high-level overview of new features.</source>
          <target state="translated">En el modo concurrente, la renderizaci&amp;oacute;n no bloquea. Es interrumpible. Esto mejora la experiencia del usuario. Tambi&amp;eacute;n desbloquea nuevas funciones que antes no eran posibles. Antes de ver ejemplos concretos en los &lt;a href=&quot;concurrent-mode-suspense&quot;&gt;pr&amp;oacute;ximos &lt;/a&gt;&lt;a href=&quot;concurrent-mode-patterns&quot;&gt;cap&amp;iacute;tulos&lt;/a&gt; , haremos una descripci&amp;oacute;n general de alto nivel de las nuevas funciones.</target>
        </trans-unit>
        <trans-unit id="7ecc95e249a2849c1eb4333865f60656c17be67b" translate="yes" xml:space="preserve">
          <source>In Concurrent Mode, the lifecycle methods &lt;a href=&quot;https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html&quot;&gt;previously marked&lt;/a&gt; as &amp;ldquo;unsafe&amp;rdquo; actually &lt;em&gt;are&lt;/em&gt; unsafe, and lead to bugs even more than in today&amp;rsquo;s React. We don&amp;rsquo;t recommend trying Concurrent Mode until your app is &lt;a href=&quot;strict-mode&quot;&gt;Strict Mode&lt;/a&gt;-compatible.</source>
          <target state="translated">En el modo concurrente, los m&amp;eacute;todos del ciclo de vida &lt;a href=&quot;https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html&quot;&gt;previamente marcados&lt;/a&gt; como &quot;inseguros&quot; en realidad &lt;em&gt;son&lt;/em&gt; inseguros y provocan errores incluso m&amp;aacute;s que en React de hoy. No recomendamos probar el modo concurrente hasta que su aplicaci&amp;oacute;n sea compatible con el &lt;a href=&quot;strict-mode&quot;&gt;modo estricto&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="21ea6a0b5b929f6e4d971d6001063e6cdcc606f8" translate="yes" xml:space="preserve">
          <source>In ES6 classes, you can define the initial state by assigning &lt;code&gt;this.state&lt;/code&gt; in the constructor:</source>
          <target state="translated">En las clases de ES6, puede definir el estado inicial asignando &lt;code&gt;this.state&lt;/code&gt; en el constructor:</target>
        </trans-unit>
        <trans-unit id="74b9508d775e315d9d48d1ac6d2be46507d95cbb" translate="yes" xml:space="preserve">
          <source>In HTML, &lt;code&gt;&amp;lt;select&amp;gt;&lt;/code&gt; creates a drop-down list. For example, this HTML creates a drop-down list of flavors:</source>
          <target state="translated">En HTML, &lt;code&gt;&amp;lt;select&amp;gt;&lt;/code&gt; crea una lista desplegable. Por ejemplo, este HTML crea una lista desplegable de sabores:</target>
        </trans-unit>
        <trans-unit id="6260ccb22bfbbde7ec537c88316f474366bfa99b" translate="yes" xml:space="preserve">
          <source>In HTML, a &lt;code&gt;&amp;lt;textarea&amp;gt;&lt;/code&gt; element defines its text by its children:</source>
          <target state="translated">En HTML, un elemento &lt;code&gt;&amp;lt;textarea&amp;gt;&lt;/code&gt; define su texto por sus hijos:</target>
        </trans-unit>
        <trans-unit id="cee26a6db634e40e4019da1e44bc2fa5e8708d30" translate="yes" xml:space="preserve">
          <source>In HTML, an &lt;code&gt;&amp;lt;input type=&quot;file&quot;&amp;gt;&lt;/code&gt; lets the user choose one or more files from their device storage to be uploaded to a server or manipulated by JavaScript via the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/File/Using_files_from_web_applications&quot;&gt;File API&lt;/a&gt;.</source>
          <target state="translated">En HTML, un &lt;code&gt;&amp;lt;input type=&quot;file&quot;&amp;gt;&lt;/code&gt; permite al usuario elegir uno o m&amp;aacute;s archivos del almacenamiento de su dispositivo para cargarlos en un servidor o manipularlos con JavaScript a trav&amp;eacute;s de la &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/File/Using_files_from_web_applications&quot;&gt;API de archivos&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="bdd8882487752794b9ff3cba07ccbd1e6347dd57" translate="yes" xml:space="preserve">
          <source>In HTML, form elements such as &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;textarea&amp;gt;&lt;/code&gt;, and &lt;code&gt;&amp;lt;select&amp;gt;&lt;/code&gt; typically maintain their own state and update it based on user input. In React, mutable state is typically kept in the state property of components, and only updated with &lt;a href=&quot;react-component#setstate&quot;&gt;&lt;code&gt;setState()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">En HTML, los elementos de formulario como &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; , &lt;code&gt;&amp;lt;textarea&amp;gt;&lt;/code&gt; y &lt;code&gt;&amp;lt;select&amp;gt;&lt;/code&gt; normalmente mantienen su propio estado y lo actualizan seg&amp;uacute;n la entrada del usuario. En React, el estado mutable generalmente se mantiene en la propiedad de estado de los componentes y solo se actualiza con &lt;a href=&quot;react-component#setstate&quot;&gt; &lt;code&gt;setState()&lt;/code&gt; &lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="451fb8c93e5b83ed15cecd30a84768222971358c" translate="yes" xml:space="preserve">
          <source>In JSX expressions that contain both an opening tag and a closing tag, the content between those tags is passed as a special prop: &lt;code&gt;props.children&lt;/code&gt;. There are several different ways to pass children:</source>
          <target state="translated">En las expresiones JSX que contienen tanto una etiqueta de apertura como una etiqueta de cierre, el contenido entre esas etiquetas se pasa como un accesorio especial: &lt;code&gt;props.children&lt;/code&gt; . Hay varias formas diferentes de pasar a los ni&amp;ntilde;os:</target>
        </trans-unit>
        <trans-unit id="2b47b7c0e900bd9fddd8dd976d3fa0c74ee40520" translate="yes" xml:space="preserve">
          <source>In JavaScript, these two code snippets are &lt;strong&gt;not&lt;/strong&gt; equivalent:</source>
          <target state="translated">En JavaScript, estos dos fragmentos de c&amp;oacute;digo &lt;strong&gt;no&lt;/strong&gt; son equivalentes:</target>
        </trans-unit>
        <trans-unit id="896c4ff0b7dad9168327f4c2b1e69fd7b821d242" translate="yes" xml:space="preserve">
          <source>In React apps, whether a component is stateful or stateless is considered an implementation detail of the component that may change over time. You can use stateless components inside stateful components, and vice versa.</source>
          <target state="translated">En las aplicaciones de React,el hecho de que un componente sea estatal o apátrida se considera un detalle de aplicación del componente que puede cambiar con el tiempo.Se pueden utilizar componentes sin estado dentro de los componentes con estado y viceversa.</target>
        </trans-unit>
        <trans-unit id="b509261276a2c24087d4a53dfcbb229d41ff110f" translate="yes" xml:space="preserve">
          <source>In React class components, the &lt;code&gt;render&lt;/code&gt; method itself shouldn&amp;rsquo;t cause side effects. It would be too early &amp;mdash; we typically want to perform our effects &lt;em&gt;after&lt;/em&gt; React has updated the DOM.</source>
          <target state="translated">En los componentes de la clase React, el m&amp;eacute;todo de &lt;code&gt;render&lt;/code&gt; izado en s&amp;iacute; no deber&amp;iacute;a causar efectos secundarios. Ser&amp;iacute;a demasiado pronto; normalmente queremos realizar nuestros efectos &lt;em&gt;despu&amp;eacute;s de que&lt;/em&gt; React haya actualizado el DOM.</target>
        </trans-unit>
        <trans-unit id="cea30c1cddacc5c2fb8659ad8a3ea7724439494a" translate="yes" xml:space="preserve">
          <source>In React components declared as ES6 classes, methods follow the same semantics as regular ES6 classes. This means that they don&amp;rsquo;t automatically bind &lt;code&gt;this&lt;/code&gt; to the instance. You&amp;rsquo;ll have to explicitly use &lt;code&gt;.bind(this)&lt;/code&gt; in the constructor:</source>
          <target state="translated">En los componentes de React declarados como clases ES6, los m&amp;eacute;todos siguen la misma sem&amp;aacute;ntica que las clases normales de ES6. Esto significa que no enlazan autom&amp;aacute;ticamente &lt;code&gt;this&lt;/code&gt; a la instancia. Tendr&amp;aacute; que usar expl&amp;iacute;citamente &lt;code&gt;.bind(this)&lt;/code&gt; en el constructor:</target>
        </trans-unit>
        <trans-unit id="538221c0cbcf54504c0c303253382099a46a923b" translate="yes" xml:space="preserve">
          <source>In React, a &lt;code&gt;&amp;lt;textarea&amp;gt;&lt;/code&gt; uses a &lt;code&gt;value&lt;/code&gt; attribute instead. This way, a form using a &lt;code&gt;&amp;lt;textarea&amp;gt;&lt;/code&gt; can be written very similarly to a form that uses a single-line input:</source>
          <target state="translated">En React, un &lt;code&gt;&amp;lt;textarea&amp;gt;&lt;/code&gt; usa un atributo de &lt;code&gt;value&lt;/code&gt; lugar. De esta manera, un formulario que usa un &lt;code&gt;&amp;lt;textarea&amp;gt;&lt;/code&gt; se puede escribir de manera muy similar a un formulario que usa una entrada de una sola l&amp;iacute;nea:</target>
        </trans-unit>
        <trans-unit id="9c9a3a5e0ceac65aab6602bc1dbe2fe9e493d0fe" translate="yes" xml:space="preserve">
          <source>In React, all DOM properties and attributes (including event handlers) should be camelCased. For example, the HTML attribute &lt;code&gt;tabindex&lt;/code&gt; corresponds to the attribute &lt;code&gt;tabIndex&lt;/code&gt; in React. The exception is &lt;code&gt;aria-*&lt;/code&gt; and &lt;code&gt;data-*&lt;/code&gt; attributes, which should be lowercased. For example, you can keep &lt;code&gt;aria-label&lt;/code&gt; as &lt;code&gt;aria-label&lt;/code&gt;.</source>
          <target state="translated">En React, todas las propiedades y atributos DOM (incluidos los controladores de eventos) deben estar basados ​​en camel. Por ejemplo, el atributo HTML &lt;code&gt;tabindex&lt;/code&gt; corresponde al atributo &lt;code&gt;tabIndex&lt;/code&gt; en React. La excepci&amp;oacute;n son los &lt;code&gt;aria-*&lt;/code&gt; y &lt;code&gt;data-*&lt;/code&gt; , que deben estar en min&amp;uacute;sculas. Por ejemplo, puede mantener &lt;code&gt;aria-label&lt;/code&gt; como &lt;code&gt;aria-label&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="7c511871e368bc7af53ec2e81d4fb957978f940e" translate="yes" xml:space="preserve">
          <source>In React, an &lt;code&gt;&amp;lt;input type=&quot;file&quot; /&amp;gt;&lt;/code&gt; is always an uncontrolled component because its value can only be set by a user, and not programmatically.</source>
          <target state="translated">En React, un &lt;code&gt;&amp;lt;input type=&quot;file&quot; /&amp;gt;&lt;/code&gt; es siempre un componente no controlado porque su valor solo puede ser establecido por un usuario, y no mediante programaci&amp;oacute;n.</target>
        </trans-unit>
        <trans-unit id="3c7fa02f2469625e763a13cd5609a01cda7c6c08" translate="yes" xml:space="preserve">
          <source>In React, both &lt;code&gt;this.props&lt;/code&gt; and &lt;code&gt;this.state&lt;/code&gt; represent the &lt;em&gt;rendered&lt;/em&gt; values, i.e. what&amp;rsquo;s currently on the screen.</source>
          <target state="translated">En React, tanto &lt;code&gt;this.props&lt;/code&gt; como &lt;code&gt;this.state&lt;/code&gt; representan los valores &lt;em&gt;renderizados&lt;/em&gt; , es decir, lo que est&amp;aacute; actualmente en la pantalla.</target>
        </trans-unit>
        <trans-unit id="f14047f4f0476e66fe99901264ae249589cef260" translate="yes" xml:space="preserve">
          <source>In React, sharing state is accomplished by moving it up to the closest common ancestor of the components that need it. This is called &amp;ldquo;lifting state up&amp;rdquo;. We will remove the local state from the &lt;code&gt;TemperatureInput&lt;/code&gt; and move it into the &lt;code&gt;Calculator&lt;/code&gt; instead.</source>
          <target state="translated">En React, el estado de intercambio se logra movi&amp;eacute;ndolo hacia el ancestro com&amp;uacute;n m&amp;aacute;s cercano de los componentes que lo necesitan. A esto se le llama &quot;estado de elevaci&amp;oacute;n&quot;. Eliminaremos el estado local de &lt;code&gt;TemperatureInput&lt;/code&gt; y lo trasladaremos a la &lt;code&gt;Calculator&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="4a53b8bc22280c0c555667af9e91fb2d02153f1e" translate="yes" xml:space="preserve">
          <source>In React, this could instead be:</source>
          <target state="translated">En realidad,esto podría ser:</target>
        </trans-unit>
        <trans-unit id="410126e91330d77043a8e4cf7862f0a183679992" translate="yes" xml:space="preserve">
          <source>In React, this is also achieved by composition, where a more &amp;ldquo;specific&amp;rdquo; component renders a more &amp;ldquo;generic&amp;rdquo; one and configures it with props:</source>
          <target state="translated">En React, esto tambi&amp;eacute;n se logra mediante la composici&amp;oacute;n, donde un componente m&amp;aacute;s &quot;espec&amp;iacute;fico&quot; representa uno m&amp;aacute;s &quot;gen&amp;eacute;rico&quot; y lo configura con accesorios:</target>
        </trans-unit>
        <trans-unit id="5f50da8ee138f52d6b59eebfb1b47338f96dd4b5" translate="yes" xml:space="preserve">
          <source>In React, this is usually solved by making a component &amp;ldquo;controlled&amp;rdquo;. Just like the DOM &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; accepts both a &lt;code&gt;value&lt;/code&gt; and an &lt;code&gt;onChange&lt;/code&gt; prop, so can the custom &lt;code&gt;TemperatureInput&lt;/code&gt; accept both &lt;code&gt;temperature&lt;/code&gt; and &lt;code&gt;onTemperatureChange&lt;/code&gt; props from its parent &lt;code&gt;Calculator&lt;/code&gt;.</source>
          <target state="translated">En React, esto generalmente se resuelve haciendo que un componente sea &quot;controlado&quot;. Al igual que DOM &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; acepta tanto un &lt;code&gt;value&lt;/code&gt; como una propiedad &lt;code&gt;onChange&lt;/code&gt; , tambi&amp;eacute;n puede la &lt;code&gt;TemperatureInput&lt;/code&gt; personalizada aceptar &lt;code&gt;temperature&lt;/code&gt; &lt;code&gt;onTemperatureChange&lt;/code&gt; temperatura y onTemperatureChange de su &lt;code&gt;Calculator&lt;/code&gt; principal .</target>
        </trans-unit>
        <trans-unit id="87275e536b566529b077b0ff131cc019d2d910ed" translate="yes" xml:space="preserve">
          <source>In React, transforming arrays into lists of &lt;a href=&quot;rendering-elements&quot;&gt;elements&lt;/a&gt; is nearly identical.</source>
          <target state="translated">En React, la transformaci&amp;oacute;n de matrices en listas de &lt;a href=&quot;rendering-elements&quot;&gt;elementos&lt;/a&gt; es casi id&amp;eacute;ntica.</target>
        </trans-unit>
        <trans-unit id="28e0e1f0e9359d0e312a435e081792d0bfb666a7" translate="yes" xml:space="preserve">
          <source>In React, you can create distinct components that encapsulate behavior you need. Then, you can render only some of them, depending on the state of your application.</source>
          <target state="translated">En React,puedes crear distintos componentes que encapsulan el comportamiento que necesitas.Luego,puedes renderizar sólo algunos de ellos,dependiendo del estado de tu aplicación.</target>
        </trans-unit>
        <trans-unit id="f18d05ee6185a8ba49d29302bd632b76aa474a54" translate="yes" xml:space="preserve">
          <source>In React, you most likely write your components in a &lt;code&gt;.js&lt;/code&gt; file. In TypeScript we have 2 file extensions:</source>
          <target state="translated">En React, lo m&amp;aacute;s probable es que escriba sus componentes en un archivo &lt;code&gt;.js&lt;/code&gt; . En TypeScript tenemos 2 extensiones de archivo:</target>
        </trans-unit>
        <trans-unit id="9f15ab1b0e75d6b53c4958487bbf30fca20cdcdd" translate="yes" xml:space="preserve">
          <source>In a React class, you would typically set up a subscription in &lt;code&gt;componentDidMount&lt;/code&gt;, and clean it up in &lt;code&gt;componentWillUnmount&lt;/code&gt;. For example, let&amp;rsquo;s say we have a &lt;code&gt;ChatAPI&lt;/code&gt; module that lets us subscribe to a friend&amp;rsquo;s online status. Here&amp;rsquo;s how we might subscribe and display that status using a class:</source>
          <target state="translated">En una clase React, normalmente configurar&amp;iacute;a una suscripci&amp;oacute;n en &lt;code&gt;componentDidMount&lt;/code&gt; y la limpiar&amp;iacute;a en &lt;code&gt;componentWillUnmount&lt;/code&gt; . Por ejemplo, digamos que tenemos un m&amp;oacute;dulo &lt;code&gt;ChatAPI&lt;/code&gt; que nos permite suscribirnos al estado en l&amp;iacute;nea de un amigo. As&amp;iacute; es como podemos suscribirnos y mostrar ese estado usando una clase:</target>
        </trans-unit>
        <trans-unit id="ae59876c3b29c0877309b94f02f1bd1dffc61a49" translate="yes" xml:space="preserve">
          <source>In a class component, we would need to add &lt;code&gt;componentDidUpdate&lt;/code&gt; to handle this case:</source>
          <target state="translated">En un componente de clase, necesitar&amp;iacute;amos agregar &lt;code&gt;componentDidUpdate&lt;/code&gt; para manejar este caso:</target>
        </trans-unit>
        <trans-unit id="92c2ff44f620f5f28854f62d80affff3a499ba93" translate="yes" xml:space="preserve">
          <source>In a class, we initialize the &lt;code&gt;count&lt;/code&gt; state to &lt;code&gt;0&lt;/code&gt; by setting &lt;code&gt;this.state&lt;/code&gt; to &lt;code&gt;{ count: 0 }&lt;/code&gt; in the constructor:</source>
          <target state="translated">En una clase, inicializamos el estado de &lt;code&gt;count&lt;/code&gt; en &lt;code&gt;0&lt;/code&gt; estableciendo &lt;code&gt;this.state&lt;/code&gt; en &lt;code&gt;{ count: 0 }&lt;/code&gt; en el constructor:</target>
        </trans-unit>
        <trans-unit id="0f976be121765c87a20b8cbb91d05fe0f6e68773" translate="yes" xml:space="preserve">
          <source>In a class, we need to call &lt;code&gt;this.setState()&lt;/code&gt; to update the &lt;code&gt;count&lt;/code&gt; state:</source>
          <target state="translated">En una clase, necesitamos llamar a &lt;code&gt;this.setState()&lt;/code&gt; para actualizar el estado de &lt;code&gt;count&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="42f4e9921f51af97e4b657670a6fd71ed33571b6" translate="yes" xml:space="preserve">
          <source>In a function component, we have no &lt;code&gt;this&lt;/code&gt;, so we can&amp;rsquo;t assign or read &lt;code&gt;this.state&lt;/code&gt;. Instead, we call the &lt;code&gt;useState&lt;/code&gt; Hook directly inside our component:</source>
          <target state="translated">En un componente de funci&amp;oacute;n, no tenemos &lt;code&gt;this&lt;/code&gt; , por lo que no podemos asignar o leer &lt;code&gt;this.state&lt;/code&gt; . En su lugar, llamamos a &lt;code&gt;useState&lt;/code&gt; Hook directamente dentro de nuestro componente:</target>
        </trans-unit>
        <trans-unit id="f02a6361f2d8d56c63358f0ea5c054c54d590ac2" translate="yes" xml:space="preserve">
          <source>In a function, we already have &lt;code&gt;setCount&lt;/code&gt; and &lt;code&gt;count&lt;/code&gt; as variables so we don&amp;rsquo;t need &lt;code&gt;this&lt;/code&gt;:</source>
          <target state="translated">En una funci&amp;oacute;n, ya tenemos &lt;code&gt;setCount&lt;/code&gt; y &lt;code&gt;count&lt;/code&gt; como variables, por lo que no necesitamos &lt;code&gt;this&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="8baa32bfe1b6970407832863578c772af74c5714" translate="yes" xml:space="preserve">
          <source>In a function, we can use &lt;code&gt;count&lt;/code&gt; directly:</source>
          <target state="translated">En una funci&amp;oacute;n, podemos usar &lt;code&gt;count&lt;/code&gt; directamente:</target>
        </trans-unit>
        <trans-unit id="e453bfad87294cd830086d87833eed893f7ed85e" translate="yes" xml:space="preserve">
          <source>In a typical React application, data is passed top-down (parent to child) via props, but this can be cumbersome for certain types of props (e.g. locale preference, UI theme) that are required by many components within an application. Context provides a way to share values like these between components without having to explicitly pass a prop through every level of the tree.</source>
          <target state="translated">En una aplicación típica de React,los datos se transmiten de arriba a abajo (de padre a hijo)a través de los accesorios,pero esto puede ser engorroso para ciertos tipos de accesorios (por ejemplo,la preferencia de localización,el tema de la interfaz de usuario)que son requeridos por muchos componentes dentro de una aplicación.El contexto proporciona una forma de compartir valores como estos entre los componentes sin tener que pasar explícitamente un props a través de cada nivel del árbol.</target>
        </trans-unit>
        <trans-unit id="b9e54856b0d6dda52097e2ff1d03dbed8218a984" translate="yes" xml:space="preserve">
          <source>In addition to making code reuse and code organization more difficult, we&amp;rsquo;ve found that classes can be a large barrier to learning React. You have to understand how &lt;code&gt;this&lt;/code&gt; works in JavaScript, which is very different from how it works in most languages. You have to remember to bind the event handlers. Without unstable &lt;a href=&quot;https://babeljs.io/docs/en/babel-plugin-transform-class-properties/&quot;&gt;syntax proposals&lt;/a&gt;, the code is very verbose. People can understand props, state, and top-down data flow perfectly well but still struggle with classes. The distinction between function and class components in React and when to use each one leads to disagreements even between experienced React developers.</source>
          <target state="translated">Adem&amp;aacute;s de dificultar la reutilizaci&amp;oacute;n y la organizaci&amp;oacute;n del c&amp;oacute;digo, hemos descubierto que las clases pueden ser una gran barrera para aprender React. Debe comprender c&amp;oacute;mo funciona &lt;code&gt;this&lt;/code&gt; en JavaScript, que es muy diferente de c&amp;oacute;mo funciona en la mayor&amp;iacute;a de los lenguajes. Debe recordar vincular los controladores de eventos. Sin &lt;a href=&quot;https://babeljs.io/docs/en/babel-plugin-transform-class-properties/&quot;&gt;propuestas de sintaxis&lt;/a&gt; inestable , el c&amp;oacute;digo es muy detallado. La gente puede entender perfectamente bien los apoyos, el estado y el flujo de datos de arriba hacia abajo, pero a&amp;uacute;n as&amp;iacute; tienen dificultades con las clases. La distinci&amp;oacute;n entre los componentes de funci&amp;oacute;n y clase en React y cu&amp;aacute;ndo usar cada uno conduce a desacuerdos incluso entre desarrolladores de React experimentados.</target>
        </trans-unit>
        <trans-unit id="289e0d186dd0eceb3a53aed219c7fedfcae512fa" translate="yes" xml:space="preserve">
          <source>In addition, consider that the design of Hooks is more efficient in a couple ways:</source>
          <target state="translated">Además,considere que el diseño de Hooks es más eficiente de un par de maneras:</target>
        </trans-unit>
        <trans-unit id="cf07c2cb1d9764411791f25d366167bf2c6a4a7d" translate="yes" xml:space="preserve">
          <source>In an environment where you &lt;em&gt;can&amp;rsquo;t&lt;/em&gt; simulate a DOM (e.g. testing React Native components on Node.js), you could use &lt;a href=&quot;test-utils#simulate&quot;&gt;event simulation helpers&lt;/a&gt; to simulate interactions with elements. Alternately, you could use the &lt;code&gt;fireEvent&lt;/code&gt; helper from &lt;a href=&quot;https://testing-library.com/docs/native-testing-library&quot;&gt;&lt;code&gt;@testing-library/react-native&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">En un entorno en el que &lt;em&gt;no puede&lt;/em&gt; simular un DOM (por ejemplo, probar componentes React Native en Node.js), puede usar &lt;a href=&quot;test-utils#simulate&quot;&gt;ayudantes de simulaci&amp;oacute;n de eventos&lt;/a&gt; para simular interacciones con elementos. Alternativamente, puede usar el ayudante &lt;code&gt;fireEvent&lt;/code&gt; de &lt;a href=&quot;https://testing-library.com/docs/native-testing-library&quot;&gt; &lt;code&gt;@testing-library/react-native&lt;/code&gt; &lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="7f063e3769c1f0ad77a1abd50a358ab7846c95c3" translate="yes" xml:space="preserve">
          <source>In an environment where you &lt;em&gt;can&amp;rsquo;t&lt;/em&gt; simulate a DOM (e.g. testing React Native components on Node.js), you could use &lt;a href=&quot;test-utils#simulate&quot;&gt;event simulation helpers&lt;/a&gt; to simulate interactions with elements. Alternately, you could use the &lt;code&gt;fireEvent&lt;/code&gt; helper from &lt;a href=&quot;https://testing-library.com/docs/react-native-testing-library/intro&quot;&gt;&lt;code&gt;@testing-library/react-native&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dd08e59d935cb13b1f6c01dc28056496f6a9bc4e" translate="yes" xml:space="preserve">
          <source>In applications with many components, it&amp;rsquo;s very important to free up resources taken by the components when they are destroyed.</source>
          <target state="translated">En aplicaciones con muchos componentes, es muy importante liberar los recursos que toman los componentes cuando se destruyen.</target>
        </trans-unit>
        <trans-unit id="6b767eadf5b4139629873d3d67b44c49dd15f7ed" translate="yes" xml:space="preserve">
          <source>In both cases, the &lt;code&gt;e&lt;/code&gt; argument representing the React event will be passed as a second argument after the ID. With an arrow function, we have to pass it explicitly, but with &lt;code&gt;bind&lt;/code&gt; any further arguments are automatically forwarded.</source>
          <target state="translated">En ambos casos, el argumento &lt;code&gt;e&lt;/code&gt; que representa el evento React se pasar&amp;aacute; como un segundo argumento despu&amp;eacute;s del ID. Con una funci&amp;oacute;n de flecha, tenemos que pasarla expl&amp;iacute;citamente, pero con &lt;code&gt;bind&lt;/code&gt; cualquier otro argumento se reenv&amp;iacute;a autom&amp;aacute;ticamente.</target>
        </trans-unit>
        <trans-unit id="d1802f47fc0c94f1304e39a33f567229bc6a0fe9" translate="yes" xml:space="preserve">
          <source>In cases where you cannot define the prop statically (e.g. because you need to close over the component&amp;rsquo;s props and/or state) &lt;code&gt;&amp;lt;Mouse&amp;gt;&lt;/code&gt; should extend &lt;code&gt;React.Component&lt;/code&gt; instead.</source>
          <target state="translated">En los casos en los que no pueda definir la propiedad de forma est&amp;aacute;tica (por ejemplo, porque necesita cerrar sobre las propiedades y / o el estado del componente) &lt;code&gt;&amp;lt;Mouse&amp;gt;&lt;/code&gt; deber&amp;iacute;a extender &lt;code&gt;React.Component&lt;/code&gt; en su lugar.</target>
        </trans-unit>
        <trans-unit id="d09f5ea2f719cb84240d22955b912b59e89f6fc3" translate="yes" xml:space="preserve">
          <source>In contrast, this function is impure because it changes its own input:</source>
          <target state="translated">Por el contrario,esta función es impura porque cambia su propia entrada:</target>
        </trans-unit>
        <trans-unit id="ba9a0d3186492384944825ac9b7292279498c6fb" translate="yes" xml:space="preserve">
          <source>In depth: When and why are &lt;code&gt;setState()&lt;/code&gt; calls batched?</source>
          <target state="translated">En profundidad: &amp;iquest;Cu&amp;aacute;ndo y por qu&amp;eacute; se &lt;code&gt;setState()&lt;/code&gt; por lotes las llamadas setState () ?</target>
        </trans-unit>
        <trans-unit id="e28fdfcba350e9460a5b11538d17a9495f7864ad" translate="yes" xml:space="preserve">
          <source>In depth: Why isn&amp;rsquo;t &lt;code&gt;this.state&lt;/code&gt; updated immediately?</source>
          <target state="translated">En profundidad: &amp;iquest;Por qu&amp;eacute; &lt;code&gt;this.state&lt;/code&gt; no se actualiza de inmediato?</target>
        </trans-unit>
        <trans-unit id="c1b95b07888beb397c1c34cba846e81f89eafcbe" translate="yes" xml:space="preserve">
          <source>In either case, we &lt;strong&gt;don&amp;rsquo;t recommend this pattern&lt;/strong&gt; and only show it here for completeness. Instead, it is preferable to &lt;a href=&quot;#how-to-avoid-passing-callbacks-down&quot;&gt;avoid passing callbacks deep down&lt;/a&gt;.</source>
          <target state="translated">En cualquier caso, &lt;strong&gt;no recomendamos este patr&amp;oacute;n&lt;/strong&gt; y solo lo mostramos aqu&amp;iacute; para que est&amp;eacute; completo. En cambio, es preferible &lt;a href=&quot;#how-to-avoid-passing-callbacks-down&quot;&gt;evitar pasar devoluciones de llamada en el fondo&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="f9d91c5022448dc96b7db04173ff7b2483babe71" translate="yes" xml:space="preserve">
          <source>In fact, if we open the console, we&amp;rsquo;ll see a warning:</source>
          <target state="translated">De hecho, si abrimos la consola, veremos una advertencia:</target>
        </trans-unit>
        <trans-unit id="f345dbdd77bde7a2de6d314ebebbeb5d11132d71" translate="yes" xml:space="preserve">
          <source>In fact, this is exactly how React is used at Facebook. This lets us write applications in React piece by piece, and combine them with our existing server-generated templates and other client-side code.</source>
          <target state="translated">De hecho,así es exactamente como se usa React en Facebook.Esto nos permite escribir aplicaciones en React pieza por pieza,y combinarlas con nuestras plantillas generadas por el servidor y otros códigos del lado del cliente.</target>
        </trans-unit>
        <trans-unit id="ffdfd80e389f7e74a49541704e05ae80cc6fc69b" translate="yes" xml:space="preserve">
          <source>In general, we &lt;em&gt;don&amp;rsquo;t&lt;/em&gt; bump the major version number for changes to:</source>
          <target state="translated">En general, &lt;em&gt;no&lt;/em&gt; aumentamos el n&amp;uacute;mero de versi&amp;oacute;n principal para cambios en:</target>
        </trans-unit>
        <trans-unit id="7e0726e767128fb2eb99272298da3fc6afa9f477" translate="yes" xml:space="preserve">
          <source>In general, we don&amp;rsquo;t recommend &lt;em&gt;not&lt;/em&gt; passing a value for a prop, because it can be confused with the &lt;a href=&quot;https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Operators/Object_initializer#New_notations_in_ECMAScript_2015&quot;&gt;ES6 object shorthand&lt;/a&gt;&lt;code&gt;{foo}&lt;/code&gt; which is short for &lt;code&gt;{foo: foo}&lt;/code&gt; rather than &lt;code&gt;{foo: true}&lt;/code&gt;. This behavior is just there so that it matches the behavior of HTML.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ee266aeffd83dee46d08b5a2d9e5dd0db59bd0ba" translate="yes" xml:space="preserve">
          <source>In general, we don&amp;rsquo;t recommend using this because it can be confused with the &lt;a href=&quot;https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Operators/Object_initializer#New_notations_in_ECMAScript_2015&quot;&gt;ES6 object shorthand&lt;/a&gt;&lt;code&gt;{foo}&lt;/code&gt; which is short for &lt;code&gt;{foo: foo}&lt;/code&gt; rather than &lt;code&gt;{foo: true}&lt;/code&gt;. This behavior is just there so that it matches the behavior of HTML.</source>
          <target state="translated">En general, no recomendamos usar esto porque puede confundirse con la &lt;a href=&quot;https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Operators/Object_initializer#New_notations_in_ECMAScript_2015&quot;&gt;abreviatura del objeto ES6 &lt;/a&gt; &lt;code&gt;{foo}&lt;/code&gt; , que es la abreviatura de &lt;code&gt;{foo: foo}&lt;/code&gt; lugar de &lt;code&gt;{foo: true}&lt;/code&gt; . Este comportamiento est&amp;aacute; ah&amp;iacute; para que coincida con el comportamiento de HTML.</target>
        </trans-unit>
        <trans-unit id="fb1a71609500b2f5f9daba332366828dbac63210" translate="yes" xml:space="preserve">
          <source>In large component trees, an alternative we recommend is to pass down a &lt;code&gt;dispatch&lt;/code&gt; function from &lt;a href=&quot;hooks-reference#usereducer&quot;&gt;&lt;code&gt;useReducer&lt;/code&gt;&lt;/a&gt; via context:</source>
          <target state="translated">En &amp;aacute;rboles de componentes grandes, una alternativa que recomendamos es transmitir una funci&amp;oacute;n de &lt;code&gt;dispatch&lt;/code&gt; desde &lt;a href=&quot;hooks-reference#usereducer&quot;&gt; &lt;code&gt;useReducer&lt;/code&gt; a&lt;/a&gt; trav&amp;eacute;s del contexto:</target>
        </trans-unit>
        <trans-unit id="ba93ca3416f3cbfccc68a69a219fb2048e2dc7a7" translate="yes" xml:space="preserve">
          <source>In many cases it&amp;rsquo;s not possible to break these components into smaller ones because the stateful logic is all over the place. It&amp;rsquo;s also difficult to test them. This is one of the reasons many people prefer to combine React with a separate state management library. However, that often introduces too much abstraction, requires you to jump between different files, and makes reusing components more difficult.</source>
          <target state="translated">En muchos casos, no es posible dividir estos componentes en componentes m&amp;aacute;s peque&amp;ntilde;os porque la l&amp;oacute;gica con estado est&amp;aacute; por todas partes. Tambi&amp;eacute;n es dif&amp;iacute;cil probarlos. Esta es una de las razones por las que muchas personas prefieren combinar React con una biblioteca de administraci&amp;oacute;n estatal separada. Sin embargo, eso a menudo introduce demasiada abstracci&amp;oacute;n, requiere que salte entre diferentes archivos y dificulta la reutilizaci&amp;oacute;n de componentes.</target>
        </trans-unit>
        <trans-unit id="c3440d610e4a5c2ec2cdeed99640aaa90c65f21a" translate="yes" xml:space="preserve">
          <source>In more complex cases (such as if one state depends on another state), try moving the state update logic outside the effect with the &lt;a href=&quot;hooks-reference#usereducer&quot;&gt;&lt;code&gt;useReducer&lt;/code&gt; Hook&lt;/a&gt;. &lt;a href=&quot;https://adamrackis.dev/state-and-use-reducer/&quot;&gt;This article&lt;/a&gt; offers an example of how you can do this. &lt;strong&gt;The identity of the &lt;code&gt;dispatch&lt;/code&gt; function from &lt;code&gt;useReducer&lt;/code&gt; is always stable&lt;/strong&gt; &amp;mdash; even if the reducer function is declared inside the component and reads its props.</source>
          <target state="translated">En casos m&amp;aacute;s complejos (como si un estado depende de otro estado), intente mover la l&amp;oacute;gica de actualizaci&amp;oacute;n de estado fuera del efecto con el &lt;a href=&quot;hooks-reference#usereducer&quot;&gt;gancho &lt;/a&gt; &lt;code&gt;useReducer&lt;/code&gt; . &lt;a href=&quot;https://adamrackis.dev/state-and-use-reducer/&quot;&gt;Este art&amp;iacute;culo&lt;/a&gt; ofrece un ejemplo de c&amp;oacute;mo puede hacer esto. &lt;strong&gt;La identidad de la funci&amp;oacute;n de &lt;code&gt;dispatch&lt;/code&gt; de &lt;code&gt;useReducer&lt;/code&gt; siempre es estable&lt;/strong&gt; , incluso si la funci&amp;oacute;n reductora se declara dentro del componente y lee sus accesorios.</target>
        </trans-unit>
        <trans-unit id="ea3661ac2ed158cad82144227101fb280362b435" translate="yes" xml:space="preserve">
          <source>In most cases you should use controlled components.</source>
          <target state="translated">En la mayoría de los casos se deben utilizar componentes controlados.</target>
        </trans-unit>
        <trans-unit id="4a7abdefe6c187e6dc04e0d7f5c214840047bcdd" translate="yes" xml:space="preserve">
          <source>In most cases, instead of writing &lt;code&gt;shouldComponentUpdate()&lt;/code&gt; by hand, you can inherit from &lt;a href=&quot;react-api#reactpurecomponent&quot;&gt;&lt;code&gt;React.PureComponent&lt;/code&gt;&lt;/a&gt;. It is equivalent to implementing &lt;code&gt;shouldComponentUpdate()&lt;/code&gt; with a shallow comparison of current and previous props and state.</source>
          <target state="translated">En la mayor&amp;iacute;a de los casos, en lugar de escribir &lt;code&gt;shouldComponentUpdate()&lt;/code&gt; a mano, puede heredar de &lt;a href=&quot;react-api#reactpurecomponent&quot;&gt; &lt;code&gt;React.PureComponent&lt;/code&gt; &lt;/a&gt; . Es equivalente a implementar &lt;code&gt;shouldComponentUpdate()&lt;/code&gt; con una comparaci&amp;oacute;n superficial de los accesorios y el estado actuales y anteriores.</target>
        </trans-unit>
        <trans-unit id="cbad587d21c37cda62d8252410ab69d53dfcaebf" translate="yes" xml:space="preserve">
          <source>In most cases, jsdom behaves like a regular browser would, but doesn&amp;rsquo;t have features like &lt;a href=&quot;https://github.com/jsdom/jsdom#unimplemented-parts-of-the-web-platform&quot;&gt;layout and navigation&lt;/a&gt;. This is still useful for most web-based component tests, since it runs quicker than having to start up a browser for each test. It also runs in the same process as your tests, so you can write code to examine and assert on the rendered DOM.</source>
          <target state="translated">En la mayor&amp;iacute;a de los casos, jsdom se comporta como lo har&amp;iacute;a un navegador normal, pero no tiene caracter&amp;iacute;sticas como &lt;a href=&quot;https://github.com/jsdom/jsdom#unimplemented-parts-of-the-web-platform&quot;&gt;dise&amp;ntilde;o y navegaci&amp;oacute;n&lt;/a&gt; . Esto sigue siendo &amp;uacute;til para la mayor&amp;iacute;a de las pruebas de componentes basadas en la web, ya que se ejecuta m&amp;aacute;s r&amp;aacute;pido que tener que iniciar un navegador para cada prueba. Tambi&amp;eacute;n se ejecuta en el mismo proceso que sus pruebas, por lo que puede escribir c&amp;oacute;digo para examinar y afirmar en el DOM renderizado.</target>
        </trans-unit>
        <trans-unit id="1911017bb2356e24f2e7725ec8dd38cb5980645a" translate="yes" xml:space="preserve">
          <source>In most cases, we recommend using &lt;a href=&quot;forms#controlled-components&quot;&gt;controlled components&lt;/a&gt; to implement forms. In a controlled component, form data is handled by a React component. The alternative is uncontrolled components, where form data is handled by the DOM itself.</source>
          <target state="translated">En la mayor&amp;iacute;a de los casos, recomendamos utilizar &lt;a href=&quot;forms#controlled-components&quot;&gt;componentes controlados&lt;/a&gt; para implementar formularios. En un componente controlado, los datos del formulario son manejados por un componente React. La alternativa son los componentes no controlados, donde los datos del formulario son manejados por el propio DOM.</target>
        </trans-unit>
        <trans-unit id="6d3c1b36b4f10f7bf6d14d76f2b5886538fe9af9" translate="yes" xml:space="preserve">
          <source>In order to solve this issue, React supports a &lt;code&gt;key&lt;/code&gt; attribute. When children have keys, React uses the key to match children in the original tree with children in the subsequent tree. For example, adding a &lt;code&gt;key&lt;/code&gt; to our inefficient example above can make the tree conversion efficient:</source>
          <target state="translated">Para resolver este problema, React admite un atributo &lt;code&gt;key&lt;/code&gt; . Cuando los ni&amp;ntilde;os tienen claves, React usa la clave para hacer coincidir los ni&amp;ntilde;os en el &amp;aacute;rbol original con los ni&amp;ntilde;os en el &amp;aacute;rbol siguiente. Por ejemplo, agregar una &lt;code&gt;key&lt;/code&gt; a nuestro ejemplo ineficiente anterior puede hacer que la conversi&amp;oacute;n del &amp;aacute;rbol sea eficiente:</target>
        </trans-unit>
        <trans-unit id="9b6804b7a0eea45b9845222ba70ab59b4cf0b8e7" translate="yes" xml:space="preserve">
          <source>In other words, &lt;code&gt;connect&lt;/code&gt; is a higher-order function that returns a higher-order component!</source>
          <target state="translated">En otras palabras, &amp;iexcl; &lt;code&gt;connect&lt;/code&gt; es una funci&amp;oacute;n de orden superior que devuelve un componente de orden superior!</target>
        </trans-unit>
        <trans-unit id="80f812104a6e940fb1554b3b0a149eca257b5c85" translate="yes" xml:space="preserve">
          <source>In our example, we already have two state variables. The input text is in &lt;code&gt;query&lt;/code&gt;, and we read the translation from &lt;code&gt;resource&lt;/code&gt;. We want changes to the &lt;code&gt;query&lt;/code&gt; state to happen immediately, but changes to the &lt;code&gt;resource&lt;/code&gt; (i.e. fetching a new translation) should trigger a transition.</source>
          <target state="translated">En nuestro ejemplo, ya tenemos dos variables de estado. El texto de entrada est&amp;aacute; en &lt;code&gt;query&lt;/code&gt; y leemos la traducci&amp;oacute;n del &lt;code&gt;resource&lt;/code&gt; . Queremos que los cambios en el estado de la &lt;code&gt;query&lt;/code&gt; produzcan de inmediato, pero los cambios en el &lt;code&gt;resource&lt;/code&gt; (es decir, obtener una nueva traducci&amp;oacute;n) deber&amp;iacute;an activar una transici&amp;oacute;n.</target>
        </trans-unit>
        <trans-unit id="2e399b2e569c6a0bcf071e62ad256ed5a3d201d7" translate="yes" xml:space="preserve">
          <source>In our experience, code that uses idiomatic React patterns and doesn&amp;rsquo;t rely on external state management solutions is the easiest to get running in the Concurrent Mode. We will describe common problems we&amp;rsquo;ve seen and the solutions to them separately in the coming weeks.</source>
          <target state="translated">En nuestra experiencia, el c&amp;oacute;digo que usa patrones idiom&amp;aacute;ticos de React y no depende de soluciones de administraci&amp;oacute;n de estado externas es el m&amp;aacute;s f&amp;aacute;cil de ejecutar en el modo concurrente. Describiremos los problemas comunes que hemos visto y las soluciones a ellos por separado en las pr&amp;oacute;ximas semanas.</target>
        </trans-unit>
        <trans-unit id="3a945c86c779350192d3215abb4afd0b7e2b4ebf" translate="yes" xml:space="preserve">
          <source>In our experience, thinking about how the UI should look at any given moment rather than how to change it over time eliminates a whole class of bugs.</source>
          <target state="translated">En nuestra experiencia,pensar en cómo debe verse la UI en un momento dado en lugar de cómo cambiarlo con el tiempo elimina toda una clase de bichos.</target>
        </trans-unit>
        <trans-unit id="2c952c1cb63d7f6dce2e3deb06b435fa75cedd7a" translate="yes" xml:space="preserve">
          <source>In our experience, thinking about how the UI should look at any given moment, rather than how to change it over time, eliminates a whole class of bugs.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="33d3facfdb5b3a33c51c1e47e735a86dc335c375" translate="yes" xml:space="preserve">
          <source>In particular, &lt;code&gt;this.props.children&lt;/code&gt; is a special prop, typically defined by the child tags in the JSX expression rather than in the tag itself.</source>
          <target state="translated">En particular, &lt;code&gt;this.props.children&lt;/code&gt; es un accesorio especial, normalmente definido por las etiquetas secundarias en la expresi&amp;oacute;n JSX en lugar de en la etiqueta misma.</target>
        </trans-unit>
        <trans-unit id="ff52786b96cb28b8516c4c77d035f3f94ffa6e3e" translate="yes" xml:space="preserve">
          <source>In particular, the rule enforces that:</source>
          <target state="translated">En particular,la norma hace cumplir eso:</target>
        </trans-unit>
        <trans-unit id="0d696f2b7ef6c0b071645ffc121cc67457984603" translate="yes" xml:space="preserve">
          <source>In practice, finding a key is usually not hard. The element you are going to display may already have a unique ID, so the key can just come from your data:</source>
          <target state="translated">En la práctica,encontrar una llave no suele ser difícil.El elemento que vas a mostrar puede tener ya una identificación única,así que la llave puede venir de tus datos:</target>
        </trans-unit>
        <trans-unit id="c43f54f78b227de9a41edca0fcd34399cba7c611" translate="yes" xml:space="preserve">
          <source>In practice, most React apps only call &lt;a href=&quot;react-dom#render&quot;&gt;&lt;code&gt;ReactDOM.render()&lt;/code&gt;&lt;/a&gt; once. In the next sections we will learn how such code gets encapsulated into &lt;a href=&quot;state-and-lifecycle&quot;&gt;stateful components&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ade1231470ce955a57c66a5a4a65595e2c307122" translate="yes" xml:space="preserve">
          <source>In practice, most React apps only call &lt;code&gt;ReactDOM.render()&lt;/code&gt; once. In the next sections we will learn how such code gets encapsulated into &lt;a href=&quot;state-and-lifecycle&quot;&gt;stateful components&lt;/a&gt;.</source>
          <target state="translated">En la pr&amp;aacute;ctica, la mayor&amp;iacute;a de las aplicaciones de React solo llaman a &lt;code&gt;ReactDOM.render()&lt;/code&gt; una vez. En las siguientes secciones, aprenderemos c&amp;oacute;mo se encapsula dicho c&amp;oacute;digo en &lt;a href=&quot;state-and-lifecycle&quot;&gt;componentes con estado&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="909459ee6d5f8fcf3afdeb0255be50e086b6e528" translate="yes" xml:space="preserve">
          <source>In practice, these assumptions are valid for almost all practical use cases.</source>
          <target state="translated">En la práctica,estos supuestos son válidos para casi todos los casos de uso práctico.</target>
        </trans-unit>
        <trans-unit id="3d0b8aeba59f064eef6dc0b26b57e2face696137" translate="yes" xml:space="preserve">
          <source>In practice, we expect that most apps using Legacy Mode today should be able to migrate at least to the Blocking Mode (if not Concurrent Mode). This fragmentation can be annoying for libraries that aim to support all Modes in the short term. However, gradually moving the ecosystem away from the Legacy Mode will also &lt;em&gt;solve&lt;/em&gt; problems that affect major libraries in the React ecosystem, such as &lt;a href=&quot;https://github.com/facebook/react/issues/14536&quot;&gt;confusing Suspense behavior when reading layout&lt;/a&gt; and &lt;a href=&quot;https://github.com/facebook/react/issues/15080&quot;&gt;lack of consistent batching guarantees&lt;/a&gt;. There&amp;rsquo;s a number of bugs that can&amp;rsquo;t be fixed in Legacy Mode without changing semantics, but don&amp;rsquo;t exist in Blocking and Concurrent Modes.</source>
          <target state="translated">En la pr&amp;aacute;ctica, esperamos que la mayor&amp;iacute;a de las aplicaciones que usan el modo heredado en la actualidad puedan migrar al menos al modo de bloqueo (si no es el modo concurrente). Esta fragmentaci&amp;oacute;n puede resultar molesta para las bibliotecas que pretenden admitir todos los modos a corto plazo. Sin embargo, alejar gradualmente el ecosistema del modo heredado tambi&amp;eacute;n &lt;em&gt;resolver&amp;aacute; los&lt;/em&gt; problemas que afectan a las principales bibliotecas del ecosistema React, como el &lt;a href=&quot;https://github.com/facebook/react/issues/14536&quot;&gt;comportamiento confuso de Suspense al leer el dise&amp;ntilde;o&lt;/a&gt; y la &lt;a href=&quot;https://github.com/facebook/react/issues/15080&quot;&gt;falta de garant&amp;iacute;as de lotes consistentes&lt;/a&gt; . Hay una serie de errores que no se pueden corregir en el modo heredado sin cambiar la sem&amp;aacute;ntica, pero no existen en los modos de bloqueo y concurrente.</target>
        </trans-unit>
        <trans-unit id="6b279656dca3be237f10a8565147d5f390d7e94e" translate="yes" xml:space="preserve">
          <source>In rare cases you might want a component to hide itself even though it was rendered by another component. To do this return &lt;code&gt;null&lt;/code&gt; instead of its render output.</source>
          <target state="translated">En casos excepcionales, es posible que desee que un componente se oculte aunque haya sido renderizado por otro componente. Para hacer esto, devuelva &lt;code&gt;null&lt;/code&gt; en lugar de su salida de renderizado.</target>
        </trans-unit>
        <trans-unit id="0a098d464d31796bcdd791f834a68bda2df286c2" translate="yes" xml:space="preserve">
          <source>In rare cases, you may be running a test on a component that uses multiple renderers. For example, you may be running snapshot tests on a component with &lt;code&gt;react-test-renderer&lt;/code&gt;, that internally uses &lt;code&gt;ReactDOM.render&lt;/code&gt; inside a child component to render some content. In this scenario, you can wrap updates with &lt;code&gt;act()&lt;/code&gt;s corresponding to their renderers.</source>
          <target state="translated">En casos excepcionales, es posible que est&amp;eacute; ejecutando una prueba en un componente que usa varios procesadores. Por ejemplo, es posible que est&amp;eacute; ejecutando pruebas de instant&amp;aacute;neas en un componente con &lt;code&gt;react-test-renderer&lt;/code&gt; , que usa internamente &lt;code&gt;ReactDOM.render&lt;/code&gt; dentro de un componente secundario para representar alg&amp;uacute;n contenido. En este escenario, puede ajustar las actualizaciones con &lt;code&gt;act()&lt;/code&gt; s correspondientes a sus renderizadores.</target>
        </trans-unit>
        <trans-unit id="04d050c85bc701c68bd6d50bf673ea61647fdec4" translate="yes" xml:space="preserve">
          <source>In rare cases, you might want to have access to a child&amp;rsquo;s DOM node from a parent component. This is generally not recommended because it breaks component encapsulation, but it can occasionally be useful for triggering focus or measuring the size or position of a child DOM node.</source>
          <target state="translated">En casos excepcionales, es posible que desee tener acceso al nodo DOM de un ni&amp;ntilde;o desde un componente principal. Por lo general, esto no se recomienda porque rompe la encapsulaci&amp;oacute;n del componente, pero ocasionalmente puede ser &amp;uacute;til para activar el enfoque o medir el tama&amp;ntilde;o o la posici&amp;oacute;n de un nodo DOM secundario.</target>
        </trans-unit>
        <trans-unit id="c6863ffdd3d1c41a019b99c0ce9ef587c06e42de" translate="yes" xml:space="preserve">
          <source>In some browsers we can easily view the accessibility information for each element in the accessibility tree:</source>
          <target state="translated">En algunos navegadores podemos ver fácilmente la información de accesibilidad de cada elemento del árbol de accesibilidad:</target>
        </trans-unit>
        <trans-unit id="ef7f108e140b39155a7e18cc38167a7857627734" translate="yes" xml:space="preserve">
          <source>In some cases formatting a value for display might be an expensive operation. It&amp;rsquo;s also unnecessary unless a Hook is actually inspected.</source>
          <target state="translated">En algunos casos, formatear un valor para mostrarlo puede resultar una operaci&amp;oacute;n costosa. Tambi&amp;eacute;n es innecesario a menos que se inspeccione un Hook.</target>
        </trans-unit>
        <trans-unit id="abfe23fc439cd1390e394329a6ecb1eeec14f4b5" translate="yes" xml:space="preserve">
          <source>In some cases, cleaning up or applying the effect after every render might create a performance problem. In class components, we can solve this by writing an extra comparison with &lt;code&gt;prevProps&lt;/code&gt; or &lt;code&gt;prevState&lt;/code&gt; inside &lt;code&gt;componentDidUpdate&lt;/code&gt;:</source>
          <target state="translated">En algunos casos, limpiar o aplicar el efecto despu&amp;eacute;s de cada renderizado puede crear un problema de rendimiento. En los componentes de la clase, podemos resolver esto escribiendo una comparaci&amp;oacute;n adicional con &lt;code&gt;prevProps&lt;/code&gt; o &lt;code&gt;prevState&lt;/code&gt; dentro de &lt;code&gt;componentDidUpdate&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="110ae94bd79008897c0972ade096014f8e0302a9" translate="yes" xml:space="preserve">
          <source>In some rare cases you might need to memoize a callback with &lt;a href=&quot;hooks-reference#usecallback&quot;&gt;&lt;code&gt;useCallback&lt;/code&gt;&lt;/a&gt; but the memoization doesn&amp;rsquo;t work very well because the inner function has to be re-created too often. If the function you&amp;rsquo;re memoizing is an event handler and isn&amp;rsquo;t used during rendering, you can use &lt;a href=&quot;#is-there-something-like-instance-variables&quot;&gt;ref as an instance variable&lt;/a&gt;, and save the last committed value into it manually:</source>
          <target state="translated">En algunos casos excepcionales, es posible que deba memorizar una devoluci&amp;oacute;n de llamada con &lt;a href=&quot;hooks-reference#usecallback&quot;&gt; &lt;code&gt;useCallback&lt;/code&gt; ,&lt;/a&gt; pero la memorizaci&amp;oacute;n no funciona muy bien porque la funci&amp;oacute;n interna debe volver a crearse con demasiada frecuencia. Si la funci&amp;oacute;n que est&amp;aacute; memorizando es un controlador de eventos y no se usa durante el renderizado, puede usar &lt;a href=&quot;#is-there-something-like-instance-variables&quot;&gt;ref como una variable de instancia&lt;/a&gt; y guardar el &amp;uacute;ltimo valor comprometido manualmente:</target>
        </trans-unit>
        <trans-unit id="0c1cdbd6853a083ca4623e0db98a09dc4da4738b" translate="yes" xml:space="preserve">
          <source>In the &lt;strong&gt;development&lt;/strong&gt; mode, you can visualize how components mount, update, and unmount, using the performance tools in supported browsers. For example:</source>
          <target state="translated">En el modo de &lt;strong&gt;desarrollo&lt;/strong&gt; , puede visualizar c&amp;oacute;mo se montan, actualizan y desmontan los componentes utilizando las herramientas de rendimiento en los navegadores compatibles. Por ejemplo:</target>
        </trans-unit>
        <trans-unit id="f0b550316b6eedb96eacfc072502ecdd2917564a" translate="yes" xml:space="preserve">
          <source>In the React rendering lifecycle, the &lt;code&gt;value&lt;/code&gt; attribute on form elements will override the value in the DOM. With an uncontrolled component, you often want React to specify the initial value, but leave subsequent updates uncontrolled. To handle this case, you can specify a &lt;code&gt;defaultValue&lt;/code&gt; attribute instead of &lt;code&gt;value&lt;/code&gt;.</source>
          <target state="translated">En el ciclo de vida de la representaci&amp;oacute;n de React, el atributo de &lt;code&gt;value&lt;/code&gt; en los elementos del formulario anular&amp;aacute; el valor en el DOM. Con un componente no controlado, a menudo desea que React especifique el valor inicial, pero deje las actualizaciones posteriores sin control. Para manejar este caso, puede especificar un atributo &lt;code&gt;defaultValue&lt;/code&gt; en lugar de &lt;code&gt;value&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="8d3c7fd4b516fb9bcad29f73328ec8f65a7430fc" translate="yes" xml:space="preserve">
          <source>In the React rendering lifecycle, the &lt;code&gt;value&lt;/code&gt; attribute on form elements will override the value in the DOM. With an uncontrolled component, you often want React to specify the initial value, but leave subsequent updates uncontrolled. To handle this case, you can specify a &lt;code&gt;defaultValue&lt;/code&gt; attribute instead of &lt;code&gt;value&lt;/code&gt;. Changing the value of &lt;code&gt;defaultValue&lt;/code&gt; attribute after a component has mounted will not cause any update of the value in the DOM.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="903bb48f1156a6b0ac31b18a1cbe3d5dc1be1cc3" translate="yes" xml:space="preserve">
          <source>In the above component, we have &lt;code&gt;age&lt;/code&gt;, &lt;code&gt;fruit&lt;/code&gt;, and &lt;code&gt;todos&lt;/code&gt; as local variables, and we can update them individually:</source>
          <target state="translated">En el componente anterior, tenemos &lt;code&gt;age&lt;/code&gt; , &lt;code&gt;fruit&lt;/code&gt; y &lt;code&gt;todos&lt;/code&gt; como variables locales, y podemos actualizarlas individualmente:</target>
        </trans-unit>
        <trans-unit id="4d1e3bc1269742bd242168387646a23702e59a34" translate="yes" xml:space="preserve">
          <source>In the above example, React passes a &lt;code&gt;ref&lt;/code&gt; given to &lt;code&gt;&amp;lt;FancyButton ref={ref}&amp;gt;&lt;/code&gt; element as a second argument to the rendering function inside the &lt;code&gt;React.forwardRef&lt;/code&gt; call. This rendering function passes the &lt;code&gt;ref&lt;/code&gt; to the &lt;code&gt;&amp;lt;button ref={ref}&amp;gt;&lt;/code&gt; element.</source>
          <target state="translated">En el ejemplo anterior, React pasa una &lt;code&gt;ref&lt;/code&gt; erencia dada al elemento &lt;code&gt;&amp;lt;FancyButton ref={ref}&amp;gt;&lt;/code&gt; como un segundo argumento a la funci&amp;oacute;n de renderizado dentro de la llamada &lt;code&gt;React.forwardRef&lt;/code&gt; . Esta funci&amp;oacute;n de renderizado pasa la &lt;code&gt;ref&lt;/code&gt; erencia al elemento &lt;code&gt;&amp;lt;button ref={ref}&amp;gt;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="ccb9604592cfa6b12895f257ac0c24ea334d72d8" translate="yes" xml:space="preserve">
          <source>In the above example, strict mode checks will &lt;em&gt;not&lt;/em&gt; be run against the &lt;code&gt;Header&lt;/code&gt; and &lt;code&gt;Footer&lt;/code&gt; components. However, &lt;code&gt;ComponentOne&lt;/code&gt; and &lt;code&gt;ComponentTwo&lt;/code&gt;, as well as all of their descendants, will have the checks.</source>
          <target state="translated">En el ejemplo anterior, las comprobaciones de modo estricto &lt;em&gt;no&lt;/em&gt; se ejecutar&amp;aacute;n en los componentes &lt;code&gt;Header&lt;/code&gt; y &lt;code&gt;Footer&lt;/code&gt; . Sin embargo, &lt;code&gt;ComponentOne&lt;/code&gt; y &lt;code&gt;ComponentTwo&lt;/code&gt; , as&amp;iacute; como todos sus descendientes, tendr&amp;aacute;n los controles.</target>
        </trans-unit>
        <trans-unit id="161b69b6d458031682de9bd001c8a47eb9f053a9" translate="yes" xml:space="preserve">
          <source>In the above examples, it is important to read the &lt;code&gt;scrollHeight&lt;/code&gt; property in &lt;code&gt;getSnapshotBeforeUpdate&lt;/code&gt; because there may be delays between &amp;ldquo;render&amp;rdquo; phase lifecycles (like &lt;code&gt;render&lt;/code&gt;) and &amp;ldquo;commit&amp;rdquo; phase lifecycles (like &lt;code&gt;getSnapshotBeforeUpdate&lt;/code&gt; and &lt;code&gt;componentDidUpdate&lt;/code&gt;).</source>
          <target state="translated">En los ejemplos anteriores, es importante leer la propiedad &lt;code&gt;scrollHeight&lt;/code&gt; en &lt;code&gt;getSnapshotBeforeUpdate&lt;/code&gt; porque puede haber retrasos entre los ciclos de vida de la fase &quot;render&quot; (como &lt;code&gt;render&lt;/code&gt; ) y los ciclos de vida de la fase &quot;commit&quot; (como &lt;code&gt;getSnapshotBeforeUpdate&lt;/code&gt; y &lt;code&gt;componentDidUpdate&lt;/code&gt; ).</target>
        </trans-unit>
        <trans-unit id="d1492c41f81989404e70e8f6aae15b755c6639ac" translate="yes" xml:space="preserve">
          <source>In the beginning, our stated goal was to remove the duplicated logic from the &lt;code&gt;FriendStatus&lt;/code&gt; and &lt;code&gt;FriendListItem&lt;/code&gt; components. Both of them want to know whether a friend is online.</source>
          <target state="translated">Al principio, nuestro objetivo declarado era eliminar la l&amp;oacute;gica duplicada de los componentes &lt;code&gt;FriendStatus&lt;/code&gt; y &lt;code&gt;FriendListItem&lt;/code&gt; . Ambos quieren saber si un amigo est&amp;aacute; conectado.</target>
        </trans-unit>
        <trans-unit id="c894c3353cd13202ba9261426d4b8ea1935aef6a" translate="yes" xml:space="preserve">
          <source>In the cron job, update your React packages to the most recent React release in the Next channel, using &lt;code&gt;next&lt;/code&gt; tag on npm. Using the npm cli:</source>
          <target state="translated">En el trabajo cron, actualice sus paquetes React a la versi&amp;oacute;n React m&amp;aacute;s reciente en el canal Siguiente, usando la etiqueta &lt;code&gt;next&lt;/code&gt; en npm. Usando el npm cli:</target>
        </trans-unit>
        <trans-unit id="2fe2f07417c38339db698cf1646bb4c866463cd8" translate="yes" xml:space="preserve">
          <source>In the event of an error, you can render a fallback UI with &lt;code&gt;componentDidCatch()&lt;/code&gt; by calling &lt;code&gt;setState&lt;/code&gt;, but this will be deprecated in a future release. Use &lt;code&gt;static getDerivedStateFromError()&lt;/code&gt; to handle fallback rendering instead.</source>
          <target state="translated">En caso de error, puede representar una interfaz de usuario alternativa con &lt;code&gt;componentDidCatch()&lt;/code&gt; llamando a &lt;code&gt;setState&lt;/code&gt; , pero esto quedar&amp;aacute; obsoleto en una versi&amp;oacute;n futura. Utilice &lt;code&gt;static getDerivedStateFromError()&lt;/code&gt; para manejar el renderizado alternativo.</target>
        </trans-unit>
        <trans-unit id="81bc674a950124866a089232847d2007a365dc48" translate="yes" xml:space="preserve">
          <source>In the example above, &lt;code&gt;Parent&lt;/code&gt; passes its ref callback as an &lt;code&gt;inputRef&lt;/code&gt; prop to the &lt;code&gt;CustomTextInput&lt;/code&gt;, and the &lt;code&gt;CustomTextInput&lt;/code&gt; passes the same function as a special &lt;code&gt;ref&lt;/code&gt; attribute to the &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt;. As a result, &lt;code&gt;this.inputElement&lt;/code&gt; in &lt;code&gt;Parent&lt;/code&gt; will be set to the DOM node corresponding to the &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; element in the &lt;code&gt;CustomTextInput&lt;/code&gt;.</source>
          <target state="translated">En el ejemplo anterior, &lt;code&gt;Parent&lt;/code&gt; pasa su devoluci&amp;oacute;n de llamada ref como una propiedad &lt;code&gt;inputRef&lt;/code&gt; a &lt;code&gt;CustomTextInput&lt;/code&gt; , y &lt;code&gt;CustomTextInput&lt;/code&gt; pasa la misma funci&amp;oacute;n como un atributo &lt;code&gt;ref&lt;/code&gt; especial al &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; . Como resultado, &lt;code&gt;this.inputElement&lt;/code&gt; en &lt;code&gt;Parent&lt;/code&gt; se establecer&amp;aacute; en el nodo DOM correspondiente al elemento &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; en &lt;code&gt;CustomTextInput&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="78bb563116bb5963983d968cb91e61df5f00f963" translate="yes" xml:space="preserve">
          <source>In the example above, the &lt;code&gt;kind&lt;/code&gt; prop is safely consumed and &lt;em&gt;is not&lt;/em&gt; passed on to the &lt;code&gt;&amp;lt;button&amp;gt;&lt;/code&gt; element in the DOM. All other props are passed via the &lt;code&gt;...other&lt;/code&gt; object making this component really flexible. You can see that it passes an &lt;code&gt;onClick&lt;/code&gt; and &lt;code&gt;children&lt;/code&gt; props.</source>
          <target state="translated">En el ejemplo anterior, la &lt;code&gt;kind&lt;/code&gt; prop se consume de forma segura y &lt;em&gt;no se&lt;/em&gt; pasa al elemento &lt;code&gt;&amp;lt;button&amp;gt;&lt;/code&gt; en el DOM. Todos los dem&amp;aacute;s accesorios se pasan a trav&amp;eacute;s del &lt;code&gt;...other&lt;/code&gt; objeto, lo que hace que este componente sea realmente flexible. Se puede ver que pasa un &lt;code&gt;onClick&lt;/code&gt; y &lt;code&gt;children&lt;/code&gt; puntales.</target>
        </trans-unit>
        <trans-unit id="50c03112f0e316b498156bed257c2771954012e9" translate="yes" xml:space="preserve">
          <source>In the example above, we pass &lt;code&gt;[count]&lt;/code&gt; as the second argument. What does this mean? If the &lt;code&gt;count&lt;/code&gt; is &lt;code&gt;5&lt;/code&gt;, and then our component re-renders with &lt;code&gt;count&lt;/code&gt; still equal to &lt;code&gt;5&lt;/code&gt;, React will compare &lt;code&gt;[5]&lt;/code&gt; from the previous render and &lt;code&gt;[5]&lt;/code&gt; from the next render. Because all items in the array are the same (&lt;code&gt;5 === 5&lt;/code&gt;), React would skip the effect. That&amp;rsquo;s our optimization.</source>
          <target state="translated">En el ejemplo anterior, pasamos &lt;code&gt;[count]&lt;/code&gt; como segundo argumento. &amp;iquest;Qu&amp;eacute; significa esto? Si el &lt;code&gt;count&lt;/code&gt; es &lt;code&gt;5&lt;/code&gt; , y luego nuestro componente se vuelve a renderizar con un &lt;code&gt;count&lt;/code&gt; igual a &lt;code&gt;5&lt;/code&gt; , React comparar&amp;aacute; &lt;code&gt;[5]&lt;/code&gt; del renderizado anterior y &lt;code&gt;[5]&lt;/code&gt; del siguiente render. Debido a que todos los elementos de la matriz son iguales ( &lt;code&gt;5 === 5&lt;/code&gt; ), React omitir&amp;aacute; el efecto. Esa es nuestra optimizaci&amp;oacute;n.</target>
        </trans-unit>
        <trans-unit id="b7c3d10a47d45d9cf31357af92cb4eff75e31bc3" translate="yes" xml:space="preserve">
          <source>In the example below, &lt;code&gt;FancyButton&lt;/code&gt; uses &lt;code&gt;React.forwardRef&lt;/code&gt; to obtain the &lt;code&gt;ref&lt;/code&gt; passed to it, and then forward it to the DOM &lt;code&gt;button&lt;/code&gt; that it renders:</source>
          <target state="translated">En el siguiente ejemplo, &lt;code&gt;FancyButton&lt;/code&gt; usa &lt;code&gt;React.forwardRef&lt;/code&gt; para obtener la &lt;code&gt;ref&lt;/code&gt; erencia que se le pasa y luego reenviarla al &lt;code&gt;button&lt;/code&gt; DOM que muestra:</target>
        </trans-unit>
        <trans-unit id="da172bb676090bc853f066f60868863ede80ccc2" translate="yes" xml:space="preserve">
          <source>In the example below, the &lt;code&gt;&amp;lt;WarningBanner /&amp;gt;&lt;/code&gt; is rendered depending on the value of the prop called &lt;code&gt;warn&lt;/code&gt;. If the value of the prop is &lt;code&gt;false&lt;/code&gt;, then the component does not render:</source>
          <target state="translated">En el siguiente ejemplo, el &lt;code&gt;&amp;lt;WarningBanner /&amp;gt;&lt;/code&gt; se representa en funci&amp;oacute;n del valor de la propiedad llamada &lt;code&gt;warn&lt;/code&gt; . Si el valor de la propiedad es &lt;code&gt;false&lt;/code&gt; , entonces el componente no se procesa:</target>
        </trans-unit>
        <trans-unit id="4c9b0d091cbcaeb26aef58746ea16d7326d16599" translate="yes" xml:space="preserve">
          <source>In the example below, the &lt;code&gt;List&lt;/code&gt; component renders a Backbone collection, using the &lt;code&gt;Item&lt;/code&gt; component to render individual items.</source>
          <target state="translated">En el ejemplo siguiente, el componente &lt;code&gt;List&lt;/code&gt; a representa una colecci&amp;oacute;n de Backbone, utilizando el componente &lt;code&gt;Item&lt;/code&gt; para representar elementos individuales.</target>
        </trans-unit>
        <trans-unit id="132775b1447feeefec74e2f18536a9d528215b18" translate="yes" xml:space="preserve">
          <source>In the example below, we declare a variable called &lt;code&gt;name&lt;/code&gt; and then use it inside JSX by wrapping it in curly braces:</source>
          <target state="translated">En el siguiente ejemplo, declaramos una variable llamada &lt;code&gt;name&lt;/code&gt; y luego la usamos dentro de JSX envolvi&amp;eacute;ndola entre llaves:</target>
        </trans-unit>
        <trans-unit id="d7dd67cb57a4dc9f027ea3f3b201e027d6f0cf20" translate="yes" xml:space="preserve">
          <source>In the example below, we embed the result of calling a JavaScript function, &lt;code&gt;formatName(user)&lt;/code&gt;, into an &lt;code&gt;&amp;lt;h1&amp;gt;&lt;/code&gt; element.</source>
          <target state="translated">En el siguiente ejemplo, incrustamos el resultado de llamar a una funci&amp;oacute;n de JavaScript, &lt;code&gt;formatName(user)&lt;/code&gt; , en un elemento &lt;code&gt;&amp;lt;h1&amp;gt;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="e50a991765ef6cc4009766a397d70d227449d563" translate="yes" xml:space="preserve">
          <source>In the example below, we use it to conditionally render a small block of text.</source>
          <target state="translated">En el siguiente ejemplo,lo usamos para representar condicionalmente un pequeño bloque de texto.</target>
        </trans-unit>
        <trans-unit id="d3bfcd8d3b96478cd697022392b9e4b2c38089ff" translate="yes" xml:space="preserve">
          <source>In the example below, we will create a &lt;a href=&quot;state-and-lifecycle#adding-local-state-to-a-class&quot;&gt;stateful component&lt;/a&gt; called &lt;code&gt;LoginControl&lt;/code&gt;.</source>
          <target state="translated">En el siguiente ejemplo, crearemos un &lt;a href=&quot;state-and-lifecycle#adding-local-state-to-a-class&quot;&gt;componente con estado&lt;/a&gt; llamado &lt;code&gt;LoginControl&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="6b92032c1bbddab0648c95b3163a2986b7e77271" translate="yes" xml:space="preserve">
          <source>In the example below, we will make a copy of the model&amp;rsquo;s attributes to form the initial state. We subscribe to the &lt;code&gt;change&lt;/code&gt; event (and unsubscribe on unmounting), and when it happens, we update the state with the model&amp;rsquo;s current attributes. Finally, we make sure that if the &lt;code&gt;model&lt;/code&gt; prop itself changes, we don&amp;rsquo;t forget to unsubscribe from the old model, and subscribe to the new one.</source>
          <target state="translated">En el siguiente ejemplo, haremos una copia de los atributos del modelo para formar el estado inicial. Nos suscribimos al evento de &lt;code&gt;change&lt;/code&gt; (y cancelamos la suscripci&amp;oacute;n al desmontar), y cuando sucede, actualizamos el estado con los atributos actuales del modelo. Por &amp;uacute;ltimo, nos aseguramos de que si cambia el accesorio del &lt;code&gt;model&lt;/code&gt; o , no olvidemos darnos de baja del modelo anterior y suscribirnos al nuevo.</target>
        </trans-unit>
        <trans-unit id="63df20cb3c0206857b6eb72aa649ffbe4eec47b7" translate="yes" xml:space="preserve">
          <source>In the examples above we declared a separate &lt;code&gt;listItems&lt;/code&gt; variable and included it in JSX:</source>
          <target state="translated">En los ejemplos anteriores, &lt;code&gt;listItems&lt;/code&gt; variable listItems separada y la incluimos en JSX:</target>
        </trans-unit>
        <trans-unit id="ee218035757e1dcb006cf4b284261900739df97e" translate="yes" xml:space="preserve">
          <source>In the examples above, we only relied on features that are natively supported by the browsers. This is why we used a JavaScript function call to tell React what to display:</source>
          <target state="translated">En los ejemplos anteriores,sólo nos basamos en características que son soportadas nativamente por los navegadores.Por eso usamos una llamada a la función de JavaScript para decirle a React qué mostrar:</target>
        </trans-unit>
        <trans-unit id="d4709b211731b0d98acf24cd2d4b4c0e25f437be" translate="yes" xml:space="preserve">
          <source>In the future, the second argument might get added automatically by a build-time transformation.</source>
          <target state="translated">En el futuro,el segundo argumento podría ser añadido automáticamente por una transformación del tiempo de construcción.</target>
        </trans-unit>
        <trans-unit id="8be1cdda076b922dcae71dadf71ff42ad65b19bd" translate="yes" xml:space="preserve">
          <source>In the long term, we intend Suspense to become the primary way to read asynchronous data from components &amp;mdash; no matter where that data is coming from.</source>
          <target state="translated">A largo plazo, pretendemos que Suspense se convierta en la forma principal de leer datos asincr&amp;oacute;nicos de los componentes, sin importar de d&amp;oacute;nde provengan esos datos.</target>
        </trans-unit>
        <trans-unit id="067bfddcfac5a573b68db915d05c5417e983d5ef" translate="yes" xml:space="preserve">
          <source>In the past, JavaScript errors inside components used to corrupt React&amp;rsquo;s internal state and cause it to &lt;a href=&quot;https://github.com/facebook/react/issues/4026&quot;&gt;emit&lt;/a&gt;&lt;a href=&quot;https://github.com/facebook/react/issues/6895&quot;&gt;cryptic&lt;/a&gt;&lt;a href=&quot;https://github.com/facebook/react/issues/8579&quot;&gt;errors&lt;/a&gt; on next renders. These errors were always caused by an earlier error in the application code, but React did not provide a way to handle them gracefully in components, and could not recover from them.</source>
          <target state="translated">En el pasado, los errores de JavaScript dentro de los componentes que se usaban para corromper el estado interno de React y provocar que &lt;a href=&quot;https://github.com/facebook/react/issues/4026&quot;&gt;emitiera &lt;/a&gt;&lt;a href=&quot;https://github.com/facebook/react/issues/8579&quot;&gt;errores &lt;/a&gt;&lt;a href=&quot;https://github.com/facebook/react/issues/6895&quot;&gt;cr&amp;iacute;pticos&lt;/a&gt; en las pr&amp;oacute;ximas versiones. Estos errores siempre fueron causados ​​por un error anterior en el c&amp;oacute;digo de la aplicaci&amp;oacute;n, pero React no proporcion&amp;oacute; una forma de manejarlos correctamente en los componentes y no pudo recuperarse de ellos.</target>
        </trans-unit>
        <trans-unit id="1d1757c6b2b83b26c148e1fe2455fe52c634722f" translate="yes" xml:space="preserve">
          <source>In the previous Suspense example, we only had one &lt;code&gt;resource&lt;/code&gt;, so we held it in a top-level variable. Now that we have multiple resources, we moved it to the &lt;code&gt;&amp;lt;App&amp;gt;&lt;/code&gt;&amp;rsquo;s component state:</source>
          <target state="translated">En el ejemplo anterior de Suspense, solo ten&amp;iacute;amos un &lt;code&gt;resource&lt;/code&gt; , por lo que lo mantuvimos en una variable de nivel superior. Ahora que tenemos varios recursos, lo movimos al estado del componente de la &lt;code&gt;&amp;lt;App&amp;gt;&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="fbb97b6fdd583b9cf2c6eeadfbb049b439293e48" translate="yes" xml:space="preserve">
          <source>In the previous approach, we fetched data before we called &lt;code&gt;setState&lt;/code&gt;:</source>
          <target state="translated">En el enfoque anterior, obtuvimos datos antes de llamar a &lt;code&gt;setState&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="c0baea048f9023ac78378921b5cbb9d00932c292" translate="yes" xml:space="preserve">
          <source>In the typical React dataflow, &lt;a href=&quot;components-and-props&quot;&gt;props&lt;/a&gt; are the only way that parent components interact with their children. To modify a child, you re-render it with new props. However, there are a few cases where you need to imperatively modify a child outside of the typical dataflow. The child to be modified could be an instance of a React component, or it could be a DOM element. For both of these cases, React provides an escape hatch.</source>
          <target state="translated">En el flujo de datos t&amp;iacute;pico de React, los &lt;a href=&quot;components-and-props&quot;&gt;accesorios&lt;/a&gt; son la &amp;uacute;nica forma en que los componentes principales interact&amp;uacute;an con sus hijos. Para modificar un ni&amp;ntilde;o, vuelva a renderizarlo con nuevos accesorios. Sin embargo, hay algunos casos en los que es necesario modificar imperativamente a un ni&amp;ntilde;o fuera del flujo de datos t&amp;iacute;pico. El elemento secundario que se modificar&amp;aacute; podr&amp;iacute;a ser una instancia de un componente React o podr&amp;iacute;a ser un elemento DOM. Para ambos casos, React proporciona una trampilla de escape.</target>
        </trans-unit>
        <trans-unit id="a86357d07cf0dbd879f2bd26a66e1afff5014629" translate="yes" xml:space="preserve">
          <source>In this code, &lt;code&gt;shouldComponentUpdate&lt;/code&gt; is just checking if there is any change in &lt;code&gt;props.color&lt;/code&gt; or &lt;code&gt;state.count&lt;/code&gt;. If those values don&amp;rsquo;t change, the component doesn&amp;rsquo;t update. If your component got more complex, you could use a similar pattern of doing a &amp;ldquo;shallow comparison&amp;rdquo; between all the fields of &lt;code&gt;props&lt;/code&gt; and &lt;code&gt;state&lt;/code&gt; to determine if the component should update. This pattern is common enough that React provides a helper to use this logic - just inherit from &lt;code&gt;React.PureComponent&lt;/code&gt;. So this code is a simpler way to achieve the same thing:</source>
          <target state="translated">En este c&amp;oacute;digo, &lt;code&gt;shouldComponentUpdate&lt;/code&gt; solo verifica si hay alg&amp;uacute;n cambio en &lt;code&gt;props.color&lt;/code&gt; o &lt;code&gt;state.count&lt;/code&gt; . Si esos valores no cambian, el componente no se actualiza. Si su componente se vuelve m&amp;aacute;s complejo, puede usar un patr&amp;oacute;n similar de hacer una &amp;ldquo;comparaci&amp;oacute;n superficial&amp;rdquo; entre todos los campos de &lt;code&gt;props&lt;/code&gt; y &lt;code&gt;state&lt;/code&gt; para determinar si el componente debe actualizarse. Este patr&amp;oacute;n es lo suficientemente com&amp;uacute;n como para que React proporcione un ayudante para usar esta l&amp;oacute;gica, simplemente herede de &lt;code&gt;React.PureComponent&lt;/code&gt; . Entonces este c&amp;oacute;digo es una forma m&amp;aacute;s simple de lograr lo mismo:</target>
        </trans-unit>
        <trans-unit id="9baf7530f7f1f0cc2de7e8a95550b370cd39a79c" translate="yes" xml:space="preserve">
          <source>In this code, we&amp;rsquo;ve wrapped our data fetching with &lt;code&gt;startTransition&lt;/code&gt;. This allows us to start fetching the profile data right away, while deferring the render of the next profile page and its associated &lt;code&gt;Spinner&lt;/code&gt; for 2 seconds (the time shown in &lt;code&gt;timeoutMs&lt;/code&gt;).</source>
          <target state="translated">En este c&amp;oacute;digo, hemos empaquetado nuestra b&amp;uacute;squeda de datos con &lt;code&gt;startTransition&lt;/code&gt; . Esto nos permite comenzar a obtener los datos del perfil de inmediato, mientras posponemos el procesamiento de la siguiente p&amp;aacute;gina de perfil y su &lt;code&gt;Spinner&lt;/code&gt; asociado durante 2 segundos (el tiempo que se muestra en &lt;code&gt;timeoutMs&lt;/code&gt; ).</target>
        </trans-unit>
        <trans-unit id="a37905846a8f4c106d186eeaf752c69ecc60a20e" translate="yes" xml:space="preserve">
          <source>In this document, we&amp;rsquo;ll discuss why higher-order components are useful, and how to write your own.</source>
          <target state="translated">En este documento, discutiremos por qu&amp;eacute; los componentes de orden superior son &amp;uacute;tiles y c&amp;oacute;mo escribir los suyos propios.</target>
        </trans-unit>
        <trans-unit id="cbf9764d5b2c9095bb5b4589f2f63cafc22cfd01" translate="yes" xml:space="preserve">
          <source>In this document, we&amp;rsquo;ll discuss why render props are useful, and how to write your own.</source>
          <target state="translated">En este documento, discutiremos por qu&amp;eacute; son &amp;uacute;tiles los accesorios de renderizado y c&amp;oacute;mo escribir los suyos propios.</target>
        </trans-unit>
        <trans-unit id="600a8bed687912f2e4672cb1492ee6559ff93168" translate="yes" xml:space="preserve">
          <source>In this example, &lt;code&gt;&amp;lt;ProfilePage&amp;gt;&lt;/code&gt; waits for both requests but starts them in parallel:</source>
          <target state="translated">En este ejemplo, &lt;code&gt;&amp;lt;ProfilePage&amp;gt;&lt;/code&gt; espera ambas solicitudes pero las inicia en paralelo:</target>
        </trans-unit>
        <trans-unit id="d9098805d0375365763e9b4152ec3e31f62f1c1a" translate="yes" xml:space="preserve">
          <source>In this example, &lt;code&gt;ProfileDetails&lt;/code&gt; is waiting for an asynchronous API call to fetch some data. While we wait for &lt;code&gt;ProfileDetails&lt;/code&gt; and &lt;code&gt;ProfilePhoto&lt;/code&gt;, we will show the &lt;code&gt;Loading...&lt;/code&gt; fallback instead. It is important to note that until all children inside &lt;code&gt;&amp;lt;Suspense&amp;gt;&lt;/code&gt; has loaded, we will continue to show the fallback.</source>
          <target state="translated">En este ejemplo, &lt;code&gt;ProfileDetails&lt;/code&gt; est&amp;aacute; esperando una llamada API as&amp;iacute;ncrona para recuperar algunos datos. Mientras esperamos los detalles del &lt;code&gt;ProfileDetails&lt;/code&gt; y la &lt;code&gt;ProfilePhoto&lt;/code&gt; , mostraremos el respaldo &lt;code&gt;Loading...&lt;/code&gt; lugar. Es importante tener en cuenta que hasta que todos los elementos secundarios dentro de &lt;code&gt;&amp;lt;Suspense&amp;gt;&lt;/code&gt; se hayan cargado, continuaremos mostrando el respaldo.</target>
        </trans-unit>
        <trans-unit id="782491ad80c95f67dcb2debb7f87f060c15672be" translate="yes" xml:space="preserve">
          <source>In this example, &lt;strong&gt;every item in &lt;code&gt;&amp;lt;MySlowList&amp;gt;&lt;/code&gt; has an artificial slowdown &amp;mdash; each of them blocks the thread for a few milliseconds&lt;/strong&gt;. We&amp;rsquo;d never do this in a real app, but this helps us simulate what can happen in a deep component tree with no single obvious place to optimize.</source>
          <target state="translated">En este ejemplo, &lt;strong&gt;todos los elementos de &lt;code&gt;&amp;lt;MySlowList&amp;gt;&lt;/code&gt; tienen una ralentizaci&amp;oacute;n artificial: cada uno de ellos bloquea el hilo durante unos milisegundos&lt;/strong&gt; . Nunca har&amp;iacute;amos esto en una aplicaci&amp;oacute;n real, pero esto nos ayuda a simular lo que puede suceder en un &amp;aacute;rbol de componentes profundo sin un lugar obvio para optimizar.</target>
        </trans-unit>
        <trans-unit id="1e713cd57d3c728babeb0c18ce780cd3201c1805" translate="yes" xml:space="preserve">
          <source>In this example, React would unsubscribe from our &lt;code&gt;ChatAPI&lt;/code&gt; when the component unmounts, as well as before re-running the effect due to a subsequent render. (If you want, there&amp;rsquo;s a way to &lt;a href=&quot;hooks-effect#tip-optimizing-performance-by-skipping-effects&quot;&gt;tell React to skip re-subscribing&lt;/a&gt; if the &lt;code&gt;props.friend.id&lt;/code&gt; we passed to &lt;code&gt;ChatAPI&lt;/code&gt; didn&amp;rsquo;t change.)</source>
          <target state="translated">En este ejemplo, React se dar&amp;iacute;a de baja de nuestra &lt;code&gt;ChatAPI&lt;/code&gt; cuando el componente se desmontara, as&amp;iacute; como antes de volver a ejecutar el efecto debido a un procesamiento posterior. (Si lo desea, hay una manera de &lt;a href=&quot;hooks-effect#tip-optimizing-performance-by-skipping-effects&quot;&gt;decirle a React que omita&lt;/a&gt; la &lt;code&gt;props.friend.id&lt;/code&gt; si el props.friend.id que pasamos a &lt;code&gt;ChatAPI&lt;/code&gt; no cambi&amp;oacute;).</target>
        </trans-unit>
        <trans-unit id="be0484ff678e7e7fe151098cbd0937ebbd00eb82" translate="yes" xml:space="preserve">
          <source>In this example, a parent component that renders &lt;code&gt;&amp;lt;FancyInput ref={inputRef} /&amp;gt;&lt;/code&gt; would be able to call &lt;code&gt;inputRef.current.focus()&lt;/code&gt;.</source>
          <target state="translated">En este ejemplo, un componente padre que representa &lt;code&gt;&amp;lt;FancyInput ref={inputRef} /&amp;gt;&lt;/code&gt; podr&amp;iacute;a llamar a &lt;code&gt;inputRef.current.focus()&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="7d4bb4e68cbd0c4ac7dd0c4d7a725bdc64841434" translate="yes" xml:space="preserve">
          <source>In this example, each time &lt;code&gt;&amp;lt;MouseTracker&amp;gt;&lt;/code&gt; renders, it generates a new function as the value of the &lt;code&gt;&amp;lt;Mouse render&amp;gt;&lt;/code&gt; prop, thus negating the effect of &lt;code&gt;&amp;lt;Mouse&amp;gt;&lt;/code&gt; extending &lt;code&gt;React.PureComponent&lt;/code&gt; in the first place!</source>
          <target state="translated">En este ejemplo, cada vez que &lt;code&gt;&amp;lt;MouseTracker&amp;gt;&lt;/code&gt; renderiza, genera una nueva funci&amp;oacute;n como el valor de la propiedad &lt;code&gt;&amp;lt;Mouse render&amp;gt;&lt;/code&gt; , negando as&amp;iacute; el efecto de &lt;code&gt;&amp;lt;Mouse&amp;gt;&lt;/code&gt; extendiendo &lt;code&gt;React.PureComponent&lt;/code&gt; en primer lugar.</target>
        </trans-unit>
        <trans-unit id="1a67a59e557a8bb22da36c7b17ee44b1abf8d495" translate="yes" xml:space="preserve">
          <source>In this example, the callback ref will be called only when the component mounts and unmounts, since the rendered &lt;code&gt;&amp;lt;h1&amp;gt;&lt;/code&gt; component stays present throughout any rerenders. If you want to be notified any time a component resizes, you may want to use &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/ResizeObserver&quot;&gt;&lt;code&gt;ResizeObserver&lt;/code&gt;&lt;/a&gt; or a third-party Hook built on it.</source>
          <target state="translated">En este ejemplo, se llamar&amp;aacute; a la referencia de devoluci&amp;oacute;n de llamada solo cuando el componente se monte y desmonte, ya que el componente &lt;code&gt;&amp;lt;h1&amp;gt;&lt;/code&gt; renderizado permanece presente durante cualquier reproducci&amp;oacute;n. Si desea que se le notifique cada vez que un componente cambie de tama&amp;ntilde;o, puede utilizar &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/ResizeObserver&quot;&gt; &lt;code&gt;ResizeObserver&lt;/code&gt; &lt;/a&gt; o un Hook de terceros integrado en &amp;eacute;l.</target>
        </trans-unit>
        <trans-unit id="e22a8550914f5fd593b0e5202ccbe094289cbe2b" translate="yes" xml:space="preserve">
          <source>In this example, we are using a class component, but the same functionality could also be applied to function components, or components created by &lt;a href=&quot;react-api#reactmemo&quot;&gt;&lt;code&gt;React.memo&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;react-api#reactforwardref&quot;&gt;&lt;code&gt;React.forwardRef&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e55f1824db5d408d73e18ba03a5505618f145cbb" translate="yes" xml:space="preserve">
          <source>In this example, we manually thread through a &lt;code&gt;color&lt;/code&gt; prop in order to style the &lt;code&gt;Button&lt;/code&gt; and &lt;code&gt;Message&lt;/code&gt; components appropriately. Using context, we can pass this through the tree automatically:</source>
          <target state="translated">En este ejemplo, pasamos manualmente un accesorio de &lt;code&gt;color&lt;/code&gt; para dise&amp;ntilde;ar los componentes &lt;code&gt;Button&lt;/code&gt; y &lt;code&gt;Message&lt;/code&gt; adecuada. Usando el contexto, podemos pasar esto a trav&amp;eacute;s del &amp;aacute;rbol autom&amp;aacute;ticamente:</target>
        </trans-unit>
        <trans-unit id="f0d3462a96fdf5b6668c86137312037ef5107ef1" translate="yes" xml:space="preserve">
          <source>In this example, we render a component and format the rendered HTML with the &lt;a href=&quot;https://www.npmjs.com/package/pretty&quot;&gt;&lt;code&gt;pretty&lt;/code&gt;&lt;/a&gt; package, before saving it as an inline snapshot:</source>
          <target state="translated">En este ejemplo, renderizamos un componente y formateamos el HTML renderizado con el &lt;a href=&quot;https://www.npmjs.com/package/pretty&quot;&gt; &lt;code&gt;pretty&lt;/code&gt; &lt;/a&gt; paquete, antes de guardarlo como una instant&amp;aacute;nea en l&amp;iacute;nea:</target>
        </trans-unit>
        <trans-unit id="a2a678be6ef80893f4443dae3189e07dc9af8576" translate="yes" xml:space="preserve">
          <source>In this example, we start data fetching at the load &lt;em&gt;and&lt;/em&gt; every time you press &amp;ldquo;Refresh&amp;rdquo;. We put the result of calling &lt;code&gt;fetchUserAndPosts()&lt;/code&gt; into state so that components below can start reading the new data from the request we just kicked off.</source>
          <target state="translated">En este ejemplo, comenzamos a buscar datos en la carga &lt;em&gt;y&lt;/em&gt; cada vez que presiona &quot;Actualizar&quot;. Ponemos el resultado de llamar a &lt;code&gt;fetchUserAndPosts()&lt;/code&gt; en estado para que los componentes siguientes puedan comenzar a leer los nuevos datos de la solicitud que acabamos de iniciar.</target>
        </trans-unit>
        <trans-unit id="40e5ce9d2c277949ff6850c2e07a7ce4249ad65e" translate="yes" xml:space="preserve">
          <source>In this example, we started our journey on the &lt;code&gt;&amp;lt;HomePage&amp;gt;&lt;/code&gt;:</source>
          <target state="translated">En este ejemplo, comenzamos nuestro viaje en &lt;code&gt;&amp;lt;HomePage&amp;gt;&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="be16ebf22fd30a0569861e07662b2e8b026b4f83" translate="yes" xml:space="preserve">
          <source>In this guide, we will examine the building blocks of React apps: elements and components. Once you master them, you can create complex apps from small reusable pieces.</source>
          <target state="translated">En esta guía,examinaremos los componentes básicos de las aplicaciones de React:elementos y componentes.Una vez que los domine,podrá crear aplicaciones complejas a partir de pequeñas piezas reutilizables.</target>
        </trans-unit>
        <trans-unit id="04d2198505214dcf8ceed2b4c9ee7adaedd5197b" translate="yes" xml:space="preserve">
          <source>In this scenario, you would use a framework like &lt;a href=&quot;https://www.cypress.io/&quot;&gt;Cypress&lt;/a&gt; or a library like &lt;a href=&quot;https://github.com/GoogleChrome/puppeteer&quot;&gt;puppeteer&lt;/a&gt; so you can navigate between multiple routes and assert on side effects not just in the browser, but potentially on the backend as well.</source>
          <target state="translated">En este escenario, usar&amp;iacute;a un marco como &lt;a href=&quot;https://www.cypress.io/&quot;&gt;Cypress&lt;/a&gt; o una biblioteca como &lt;a href=&quot;https://github.com/GoogleChrome/puppeteer&quot;&gt;titiritero&lt;/a&gt; para poder navegar entre m&amp;uacute;ltiples rutas y hacer valer los efectos secundarios no solo en el navegador, sino potencialmente tambi&amp;eacute;n en el backend.</target>
        </trans-unit>
        <trans-unit id="012fec99829ecc46c7a061a559b55cea20db4530" translate="yes" xml:space="preserve">
          <source>In this section, we will consider a few problems where developers new to React often reach for inheritance, and show how we can solve them with composition.</source>
          <target state="translated">En esta sección,consideraremos algunos problemas en los que los desarrolladores nuevos en Reaccionar a menudo llegan a la herencia,y mostraremos cómo podemos resolverlos con la composición.</target>
        </trans-unit>
        <trans-unit id="2354bfe7189104f2d54a127296a8b8ac4cb54d00" translate="yes" xml:space="preserve">
          <source>In this section, we will create a temperature calculator that calculates whether the water would boil at a given temperature.</source>
          <target state="translated">En esta sección,crearemos una calculadora de temperatura que calcula si el agua herviría a una temperatura determinada.</target>
        </trans-unit>
        <trans-unit id="83d7bcb20d79f9f405dc2a045c7b8717d8f1c228" translate="yes" xml:space="preserve">
          <source>In this section, we will learn how to make the &lt;code&gt;Clock&lt;/code&gt; component truly reusable and encapsulated. It will set up its own timer and update itself every second.</source>
          <target state="translated">En esta secci&amp;oacute;n, aprenderemos c&amp;oacute;mo hacer que el componente &lt;code&gt;Clock&lt;/code&gt; sea realmente reutilizable y encapsulado. Configurar&amp;aacute; su propio temporizador y se actualizar&amp;aacute; a s&amp;iacute; mismo cada segundo.</target>
        </trans-unit>
        <trans-unit id="ce38739a991553b55a16fa00b7561acd9e3c69cd" translate="yes" xml:space="preserve">
          <source>In this section, we will show how to add a React component to an existing HTML page. You can follow along with your own website, or create an empty HTML file to practice.</source>
          <target state="translated">En esta sección,mostraremos cómo añadir un componente de Reactancia a una página HTML existente.Puede seguirlo junto con su propia página web,o crear un archivo HTML vacío para practicar.</target>
        </trans-unit>
        <trans-unit id="c457ca26e31df4ff72bf75e4781f7e68170aaedf" translate="yes" xml:space="preserve">
          <source>In those rare cases where you need to apply a HOC dynamically, you can also do it inside a component&amp;rsquo;s lifecycle methods or its constructor.</source>
          <target state="translated">En esos raros casos en los que necesita aplicar un HOC din&amp;aacute;micamente, tambi&amp;eacute;n puede hacerlo dentro de los m&amp;eacute;todos del ciclo de vida de un componente o su constructor.</target>
        </trans-unit>
        <trans-unit id="98e74adf3229ab63477c62be5d7146a7e849046e" translate="yes" xml:space="preserve">
          <source>Inclusive Components</source>
          <target state="translated">Componentes inclusivos</target>
        </trans-unit>
        <trans-unit id="1042f8600a94d974b83e4d369aaa4b17edb453b8" translate="yes" xml:space="preserve">
          <source>Indicate the human language of page texts as screen reader software uses this to select the correct voice settings:</source>
          <target state="translated">Indique el lenguaje humano de los textos de las páginas,ya que el software de lectura de pantalla lo utiliza para seleccionar los ajustes de voz correctos:</target>
        </trans-unit>
        <trans-unit id="49a578fd2622c2582fc0bfccfa222e7fbdccd773" translate="yes" xml:space="preserve">
          <source>Initializing &lt;a href=&quot;state-and-lifecycle&quot;&gt;local state&lt;/a&gt; by assigning an object to &lt;code&gt;this.state&lt;/code&gt;.</source>
          <target state="translated">Inicializando &lt;a href=&quot;state-and-lifecycle&quot;&gt;el estado local&lt;/a&gt; asignando un objeto a &lt;code&gt;this.state&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="308f934b533308c752b10e77267068798d66f567" translate="yes" xml:space="preserve">
          <source>Inline If with Logical &amp;amp;&amp;amp; Operator</source>
          <target state="translated">Inline If con operador l&amp;oacute;gico &amp;amp;&amp;amp;</target>
        </trans-unit>
        <trans-unit id="bb9001f5844d8678a32c2945ed8a6fb7c63e0e2f" translate="yes" xml:space="preserve">
          <source>Inline If-Else with Conditional Operator</source>
          <target state="translated">Inline If-Else con Operador Condicional</target>
        </trans-unit>
        <trans-unit id="66528a87a38e1e59da8d23434a47ffa479d5a4ba" translate="yes" xml:space="preserve">
          <source>Inside a loop, it is common to want to pass an extra parameter to an event handler. For example, if &lt;code&gt;id&lt;/code&gt; is the row ID, either of the following would work:</source>
          <target state="translated">Dentro de un bucle, es com&amp;uacute;n querer pasar un par&amp;aacute;metro adicional a un controlador de eventos. Por ejemplo, si &lt;code&gt;id&lt;/code&gt; es el ID de fila, cualquiera de los siguientes funcionar&amp;iacute;a:</target>
        </trans-unit>
        <trans-unit id="4304c63954bdc246b29ab78b7a7b6fb0356bca4f" translate="yes" xml:space="preserve">
          <source>Inside the listener, call &lt;code&gt;setState&lt;/code&gt; whenever the data source changes.</source>
          <target state="translated">Dentro del oyente, llame a &lt;code&gt;setState&lt;/code&gt; siempre que cambie la fuente de datos.</target>
        </trans-unit>
        <trans-unit id="1da0532bc1d42056af8f38805b51309a604715c0" translate="yes" xml:space="preserve">
          <source>Inside these methods, the &lt;code&gt;Calculator&lt;/code&gt; component asks React to re-render itself by calling &lt;code&gt;this.setState()&lt;/code&gt; with the new input value and the current scale of the input we just edited.</source>
          <target state="translated">Dentro de estos m&amp;eacute;todos, el componente &lt;code&gt;Calculator&lt;/code&gt; le pide a React que se vuelva a renderizar llamando a &lt;code&gt;this.setState()&lt;/code&gt; con el nuevo valor de entrada y la escala actual de la entrada que acabamos de editar.</target>
        </trans-unit>
        <trans-unit id="c81b79df3c6448eae7c4f80428b54cd5692a17d7" translate="yes" xml:space="preserve">
          <source>Installation</source>
          <target state="translated">Installation</target>
        </trans-unit>
        <trans-unit id="227bff69876b172aeee6752f9b003b6b9627ce6c" translate="yes" xml:space="preserve">
          <source>Instance Properties</source>
          <target state="translated">Propiedades de la Instancia</target>
        </trans-unit>
        <trans-unit id="68b9166fcdb7337cee3b47f14be3169cc82acd61" translate="yes" xml:space="preserve">
          <source>Instead of artificially separating &lt;em&gt;technologies&lt;/em&gt; by putting markup and logic in separate files, React &lt;a href=&quot;https://en.wikipedia.org/wiki/Separation_of_concerns&quot;&gt;separates &lt;em&gt;concerns&lt;/em&gt;&lt;/a&gt; with loosely coupled units called &amp;ldquo;components&amp;rdquo; that contain both. We will come back to components in a &lt;a href=&quot;components-and-props&quot;&gt;further section&lt;/a&gt;, but if you&amp;rsquo;re not yet comfortable putting markup in JS, &lt;a href=&quot;https://www.youtube.com/watch?v=x7cQ3mrcKaY&quot;&gt;this talk&lt;/a&gt; might convince you otherwise.</source>
          <target state="translated">En lugar de separar las &lt;em&gt;tecnolog&amp;iacute;as&lt;/em&gt; de forma artificial poniendo el marcado y la l&amp;oacute;gica en archivos separados, React &lt;a href=&quot;https://en.wikipedia.org/wiki/Separation_of_concerns&quot;&gt;separa las &lt;em&gt;preocupaciones&lt;/em&gt;&lt;/a&gt; con unidades poco acopladas llamadas &quot;componentes&quot; que contienen ambos. Volveremos a los componentes en una &lt;a href=&quot;components-and-props&quot;&gt;secci&amp;oacute;n posterior&lt;/a&gt; , pero si a&amp;uacute;n no se siente c&amp;oacute;modo poniendo marcado en JS, &lt;a href=&quot;https://www.youtube.com/watch?v=x7cQ3mrcKaY&quot;&gt;esta charla&lt;/a&gt; podr&amp;iacute;a convencerlo de lo contrario.</target>
        </trans-unit>
        <trans-unit id="d025bac2dca752df204440cbc1297998e47df835" translate="yes" xml:space="preserve">
          <source>Instead of calling real APIs in all your tests, you can mock requests with dummy data. Mocking data fetching with &amp;ldquo;fake&amp;rdquo; data prevents flaky tests due to an unavailable backend, and makes them run faster. Note: you may still want to run a subset of tests using an &lt;a href=&quot;testing-environments#end-to-end-tests-aka-e2e-tests&quot;&gt;&amp;ldquo;end-to-end&amp;rdquo;&lt;/a&gt; framework that tells whether the whole app is working together.</source>
          <target state="translated">En lugar de llamar a API reales en todas sus pruebas, puede simular solicitudes con datos ficticios. La b&amp;uacute;squeda de datos simulada con datos &quot;falsos&quot; evita las pruebas defectuosas debido a un backend no disponible y hace que se ejecuten m&amp;aacute;s r&amp;aacute;pido. Nota: es posible que a&amp;uacute;n desee ejecutar un subconjunto de pruebas utilizando un marco &lt;a href=&quot;testing-environments#end-to-end-tests-aka-e2e-tests&quot;&gt;&quot;de&lt;/a&gt; un extremo a otro&quot; que indique si toda la aplicaci&amp;oacute;n est&amp;aacute; funcionando en conjunto.</target>
        </trans-unit>
        <trans-unit id="df48b0f4d5bf5819b9914fd6531ebe1dc8a79973" translate="yes" xml:space="preserve">
          <source>Instead of doing &lt;code&gt;useTransition&lt;/code&gt; in every other component, we can build it into our design system.</source>
          <target state="translated">En lugar de &lt;code&gt;useTransition&lt;/code&gt; en todos los dem&amp;aacute;s componentes, podemos incorporarlo a nuestro sistema de dise&amp;ntilde;o.</target>
        </trans-unit>
        <trans-unit id="8aded08fa023761e3f1e6e5311a0cc3ddf79baf0" translate="yes" xml:space="preserve">
          <source>Instead of mutation, HOCs should use composition, by wrapping the input component in a container component:</source>
          <target state="translated">En lugar de la mutación,los COH deben utilizar la composición,envolviendo el componente de entrada en un componente contenedor:</target>
        </trans-unit>
        <trans-unit id="5cf9d7c83880386192ebfbb360c2c6812d8bcf20" translate="yes" xml:space="preserve">
          <source>Instead of passing a &lt;code&gt;ref&lt;/code&gt; attribute created by &lt;code&gt;createRef()&lt;/code&gt;, you pass a function. The function receives the React component instance or HTML DOM element as its argument, which can be stored and accessed elsewhere.</source>
          <target state="translated">En lugar de pasar un atributo &lt;code&gt;ref&lt;/code&gt; creado por &lt;code&gt;createRef()&lt;/code&gt; , pasa una funci&amp;oacute;n. La funci&amp;oacute;n recibe la instancia del componente React o el elemento DOM de HTML como argumento, que se puede almacenar y acceder en otro lugar.</target>
        </trans-unit>
        <trans-unit id="8c04ebdd8624a1412a2c00e3ee3be737187bc902" translate="yes" xml:space="preserve">
          <source>Instead of showing a spinner, can we add a visual effect like &amp;ldquo;greying out&amp;rdquo; the current screen?</source>
          <target state="translated">En lugar de mostrar una ruleta, &amp;iquest;podemos agregar un efecto visual como &quot;atenuar&quot; la pantalla actual?</target>
        </trans-unit>
        <trans-unit id="54c51eb3d5154be37011a4c79e90fdae3d688bfd" translate="yes" xml:space="preserve">
          <source>Instead, &lt;em&gt;pass the function itself&lt;/em&gt; (without parens):</source>
          <target state="translated">En su lugar, &lt;em&gt;pase la funci&amp;oacute;n en s&amp;iacute;&lt;/em&gt; (sin parens):</target>
        </trans-unit>
        <trans-unit id="6cf33354387d8bc0b95b73e1b637b872d08038c4" translate="yes" xml:space="preserve">
          <source>Instead, apply HOCs outside the component definition so that the resulting component is created only once. Then, its identity will be consistent across renders. This is usually what you want, anyway.</source>
          <target state="translated">En su lugar,aplicar los HOC fuera de la definición del componente para que el componente resultante se cree sólo una vez.Entonces,su identidad será consistente a través de los renders.Esto es usualmente lo que quieres,de todos modos.</target>
        </trans-unit>
        <trans-unit id="14487f72778797d41aa4fbaf38ed77b989f65799" translate="yes" xml:space="preserve">
          <source>Instead, use &lt;code&gt;setState()&lt;/code&gt;:</source>
          <target state="translated">En su lugar, use &lt;code&gt;setState()&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="441f654229a4276797437835009f1f108efbc02d" translate="yes" xml:space="preserve">
          <source>Instead, use &lt;code&gt;useEffect&lt;/code&gt;. The function passed to &lt;code&gt;useEffect&lt;/code&gt; will run after the render is committed to the screen. Think of effects as an escape hatch from React&amp;rsquo;s purely functional world into the imperative world.</source>
          <target state="translated">En su lugar, use &lt;code&gt;useEffect&lt;/code&gt; . La funci&amp;oacute;n pasada a &lt;code&gt;useEffect&lt;/code&gt; se ejecutar&amp;aacute; despu&amp;eacute;s de que el renderizado se confirme en la pantalla. Piense en los efectos como una trampilla de escape del mundo puramente funcional de React al mundo imperativo.</target>
        </trans-unit>
        <trans-unit id="6e5c222edd3cc915db386166adcd08d3c4524ced" translate="yes" xml:space="preserve">
          <source>Instead, we release new features in minor versions. That means that minor releases are often more interesting and compelling than majors, despite their unassuming name.</source>
          <target state="translated">En su lugar,lanzamos nuevas características en versiones menores.Eso significa que las versiones menores son a menudo más interesantes y convincentes que las mayores,a pesar de su modesto nombre.</target>
        </trans-unit>
        <trans-unit id="9cad89ab27a31a43bc8bcabb4f1530a63711b236" translate="yes" xml:space="preserve">
          <source>Instead, we&amp;rsquo;d like to share this logic between &lt;code&gt;FriendStatus&lt;/code&gt; and &lt;code&gt;FriendListItem&lt;/code&gt;.</source>
          <target state="translated">En su lugar, nos gustar&amp;iacute;a compartir esta l&amp;oacute;gica entre &lt;code&gt;FriendStatus&lt;/code&gt; y &lt;code&gt;FriendListItem&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="1bc56bd7b51ec191a2b44a72405da8bdc2c8e271" translate="yes" xml:space="preserve">
          <source>Instead, we&amp;rsquo;ll look at Suspense as a logical next step in a sequence of approaches:</source>
          <target state="translated">En cambio, veremos Suspense como el siguiente paso l&amp;oacute;gico en una secuencia de enfoques:</target>
        </trans-unit>
        <trans-unit id="56e78cabfede8d071dad68a99417a1db55165ae4" translate="yes" xml:space="preserve">
          <source>Integrating with DOM Manipulation Plugins</source>
          <target state="translated">Integración con los plugins de manipulación DOM</target>
        </trans-unit>
        <trans-unit id="fabcdcb5781cef22218fde185dcc3275b3caf232" translate="yes" xml:space="preserve">
          <source>Integrating with Model Layers</source>
          <target state="translated">La integración con las capas de modelo</target>
        </trans-unit>
        <trans-unit id="2abfc3b773acf5210e59c6612eeb838ec30c6daf" translate="yes" xml:space="preserve">
          <source>Integrating with Other Libraries</source>
          <target state="translated">Integración con otras bibliotecas</target>
        </trans-unit>
        <trans-unit id="323ce191323fe812d9b2285405712a7540e602ee" translate="yes" xml:space="preserve">
          <source>Integrating with Other View Libraries</source>
          <target state="translated">Integración con otras bibliotecas de vistas</target>
        </trans-unit>
        <trans-unit id="a7ead22e923dd75533f31fb755b0096e8335cf4b" translate="yes" xml:space="preserve">
          <source>Integrating with jQuery Chosen Plugin</source>
          <target state="translated">Integrándose con el Plugin elegido por jQuery</target>
        </trans-unit>
        <trans-unit id="31f07fcd6fa5d6cf3bce211abaa7f9938b9f8b59" translate="yes" xml:space="preserve">
          <source>Integrating with third-party DOM libraries.</source>
          <target state="translated">Integrarse con bibliotecas DOM de terceros.</target>
        </trans-unit>
        <trans-unit id="d188e3da39485e86c68a2e47954789d012f3e98a" translate="yes" xml:space="preserve">
          <source>Intentional Loading Sequences</source>
          <target state="translated">Secuencias de carga intencional</target>
        </trans-unit>
        <trans-unit id="458622e11438e28a4579aeaa119e2f6a90af7730" translate="yes" xml:space="preserve">
          <source>Interactions can be used to identify the cause of an update, although the API for tracing them is still experimental.</source>
          <target state="translated">Las interacciones pueden utilizarse para identificar la causa de una actualización,aunque la API para rastrearlas es todavía experimental.</target>
        </trans-unit>
        <trans-unit id="6896564dcbd1c525b78f98182de42c4bb2b09515" translate="yes" xml:space="preserve">
          <source>Internally, React uses several clever techniques to minimize the number of costly DOM operations required to update the UI. For many applications, using React will lead to a fast user interface without doing much work to specifically optimize for performance. Nevertheless, there are several ways you can speed up your React application.</source>
          <target state="translated">Internamente,React utiliza varias técnicas inteligentes para minimizar el número de operaciones costosas de DOM necesarias para actualizar la UI.Para muchas aplicaciones,el uso de React llevará a una rápida interfaz de usuario sin hacer mucho trabajo para optimizar específicamente el rendimiento.No obstante,hay varias maneras de acelerar la aplicación de React.</target>
        </trans-unit>
        <trans-unit id="78abc071449ad0da13e4d5e5a3f22e08fc793563" translate="yes" xml:space="preserve">
          <source>Interruptible Prerendering</source>
          <target state="translated">Prerrepresentación Interrumpible</target>
        </trans-unit>
        <trans-unit id="5bdb65efee969d707c5e1bc2b4a881568f89c4af" translate="yes" xml:space="preserve">
          <source>Interruptible Rendering</source>
          <target state="translated">Rendimiento interrumpible</target>
        </trans-unit>
        <trans-unit id="fe91e5b2febdee26a910e78fb467ec00cef2cc7f" translate="yes" xml:space="preserve">
          <source>Introducing Concurrent Mode</source>
          <target state="translated">Introduciendo el modo concurrente</target>
        </trans-unit>
        <trans-unit id="8d1fa1c8913451a1f429075bf69c1c706857274d" translate="yes" xml:space="preserve">
          <source>Introducing Concurrent Mode (Experimental)</source>
          <target state="translated">Introduciendo el Modo Concurrente (Experimental)</target>
        </trans-unit>
        <trans-unit id="2c358e3ea80007355c4cebac6d98e29b8a15fd58" translate="yes" xml:space="preserve">
          <source>Introducing Error Boundaries</source>
          <target state="translated">Introduciendo límites de error</target>
        </trans-unit>
        <trans-unit id="6752670ac4fd3d43c072341f57aeec0c7e6fa7d6" translate="yes" xml:space="preserve">
          <source>Introducing Hooks</source>
          <target state="translated">Introduciendo los ganchos</target>
        </trans-unit>
        <trans-unit id="99fc0e820b4798682e759dbf88cc8628f74605fc" translate="yes" xml:space="preserve">
          <source>Introducing JSX</source>
          <target state="translated">Presentamos JSX</target>
        </trans-unit>
        <trans-unit id="f9c770701ef9646b1634d74252668c51159f3855" translate="yes" xml:space="preserve">
          <source>Invokes a function on every immediate child contained within &lt;code&gt;children&lt;/code&gt; with &lt;code&gt;this&lt;/code&gt; set to &lt;code&gt;thisArg&lt;/code&gt;. If &lt;code&gt;children&lt;/code&gt; is an array it will be traversed and the function will be called for each child in the array. If children is &lt;code&gt;null&lt;/code&gt; or &lt;code&gt;undefined&lt;/code&gt;, this method will return &lt;code&gt;null&lt;/code&gt; or &lt;code&gt;undefined&lt;/code&gt; rather than an array.</source>
          <target state="translated">Invoca una funci&amp;oacute;n en cada ni&amp;ntilde;o inmediata contenida dentro de &lt;code&gt;children&lt;/code&gt; con &lt;code&gt;this&lt;/code&gt; conjunto de &lt;code&gt;thisArg&lt;/code&gt; . Si los &lt;code&gt;children&lt;/code&gt; son una matriz, se atravesar&amp;aacute; y se llamar&amp;aacute; a la funci&amp;oacute;n para cada hijo de la matriz. Si los ni&amp;ntilde;os son &lt;code&gt;null&lt;/code&gt; o &lt;code&gt;undefined&lt;/code&gt; , este m&amp;eacute;todo devolver&amp;aacute; &lt;code&gt;null&lt;/code&gt; o &lt;code&gt;undefined&lt;/code&gt; lugar de una matriz.</target>
        </trans-unit>
        <trans-unit id="19019a267c68ec0d9a87bbfe53368307773f4e69" translate="yes" xml:space="preserve">
          <source>Is it OK to use arrow functions in render methods?</source>
          <target state="translated">¿Está bien usar las funciones de flecha en los métodos de representación?</target>
        </trans-unit>
        <trans-unit id="b94bd0fbbd4ff5757505741937dacab45d2007bf" translate="yes" xml:space="preserve">
          <source>Is it passed in from a parent via props? If so, it probably isn&amp;rsquo;t state.</source>
          <target state="translated">&amp;iquest;Se transmite de un padre a trav&amp;eacute;s de accesorios? Si es as&amp;iacute;, probablemente no sea un estado.</target>
        </trans-unit>
        <trans-unit id="b12fb0c98d31f06f2e894073d26a29b446b6105a" translate="yes" xml:space="preserve">
          <source>Is it safe to omit functions from the list of dependencies?</source>
          <target state="translated">¿Es seguro omitir funciones de la lista de dependencias?</target>
        </trans-unit>
        <trans-unit id="36e2fa776e8e49d37a8c66174c7a287fbd5c8891" translate="yes" xml:space="preserve">
          <source>Is the Shadow DOM the same as the Virtual DOM?</source>
          <target state="translated">¿Es el DOM de la Sombra lo mismo que el DOM Virtual?</target>
        </trans-unit>
        <trans-unit id="118a7d245e14f3d46907f813b32d6d32103aa8e9" translate="yes" xml:space="preserve">
          <source>Is there a recommended way to structure React projects?</source>
          <target state="translated">¿Hay alguna forma recomendada de estructurar los proyectos de React?</target>
        </trans-unit>
        <trans-unit id="431584afff8cf3078b613772134b8cf66a20ffd7" translate="yes" xml:space="preserve">
          <source>Is there something like forceUpdate?</source>
          <target state="translated">¿Hay algo como forceUpdate?</target>
        </trans-unit>
        <trans-unit id="c240e644bcf66edddc303b13a6145795d52277ac" translate="yes" xml:space="preserve">
          <source>Is there something like instance variables?</source>
          <target state="translated">¿Hay algo así como variables de instancia?</target>
        </trans-unit>
        <trans-unit id="85ab7deeb83142d16bed5604f08f86936f301d70" translate="yes" xml:space="preserve">
          <source>Is this page useful?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="615079284bccc262002fb9d64da4565ad0ff149a" translate="yes" xml:space="preserve">
          <source>It accepts &lt;code&gt;author&lt;/code&gt; (an object), &lt;code&gt;text&lt;/code&gt; (a string), and &lt;code&gt;date&lt;/code&gt; (a date) as props, and describes a comment on a social media website.</source>
          <target state="translated">Acepta &lt;code&gt;author&lt;/code&gt; (un objeto), &lt;code&gt;text&lt;/code&gt; o (una cadena) y &lt;code&gt;date&lt;/code&gt; (una fecha) como accesorios, y describe un comentario en un sitio web de redes sociales.</target>
        </trans-unit>
        <trans-unit id="fe1bc6eb63b54ec080a5b630f4c12685f9a1f7ff" translate="yes" xml:space="preserve">
          <source>It all begins with running one command in your terminal.</source>
          <target state="translated">Todo comienza con la ejecución de un comando en su terminal.</target>
        </trans-unit>
        <trans-unit id="188127c3aef7bdf7fd35fe7c856bcfd34c54e44a" translate="yes" xml:space="preserve">
          <source>It calls &lt;a href=&quot;react-dom#render&quot;&gt;&lt;code&gt;ReactDOM.render()&lt;/code&gt;&lt;/a&gt; every second from a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/WindowTimers/setInterval&quot;&gt;&lt;code&gt;setInterval()&lt;/code&gt;&lt;/a&gt; callback.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c3cb8127bb9bd6695f9f71a7f9270c5ec20060df" translate="yes" xml:space="preserve">
          <source>It calls &lt;code&gt;ReactDOM.render()&lt;/code&gt; every second from a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/WindowTimers/setInterval&quot;&gt;&lt;code&gt;setInterval()&lt;/code&gt;&lt;/a&gt; callback.</source>
          <target state="translated">Llama a &lt;code&gt;ReactDOM.render()&lt;/code&gt; cada segundo desde una devoluci&amp;oacute;n de llamada &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/WindowTimers/setInterval&quot;&gt; &lt;code&gt;setInterval()&lt;/code&gt; &lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="2cef424d8853229927def0460dc79c6c0ba401d9" translate="yes" xml:space="preserve">
          <source>It can also be used for larger expressions although it is less obvious what&amp;rsquo;s going on:</source>
          <target state="translated">Tambi&amp;eacute;n se puede usar para expresiones m&amp;aacute;s grandes, aunque es menos obvio lo que est&amp;aacute; sucediendo:</target>
        </trans-unit>
        <trans-unit id="0cbe1ab611653ca85961be292443488b8a02544f" translate="yes" xml:space="preserve">
          <source>It can be tedious to manually calculate the proper color combinations for all cases in your website so instead, you can &lt;a href=&quot;https://jxnblk.com/colorable/&quot;&gt;calculate an entire accessible color palette with Colorable&lt;/a&gt;.</source>
          <target state="translated">Puede ser tedioso calcular manualmente las combinaciones de colores adecuadas para todos los casos en su sitio web, por lo que en su lugar, puede &lt;a href=&quot;https://jxnblk.com/colorable/&quot;&gt;calcular una paleta de colores completa accesible con Colorable&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="d62fd02389ef9525bb5984bc2a6e5af4ca327920" translate="yes" xml:space="preserve">
          <source>It can sometimes be tedious to use controlled components, because you need to write an event handler for every way your data can change and pipe all of the input state through a React component. This can become particularly annoying when you are converting a preexisting codebase to React, or integrating a React application with a non-React library. In these situations, you might want to check out &lt;a href=&quot;uncontrolled-components&quot;&gt;uncontrolled components&lt;/a&gt;, an alternative technique for implementing input forms.</source>
          <target state="translated">A veces puede ser tedioso usar componentes controlados, porque necesita escribir un controlador de eventos para todas las formas en que sus datos pueden cambiar y canalizar todo el estado de entrada a trav&amp;eacute;s de un componente React. Esto puede volverse particularmente molesto cuando est&amp;aacute; convirtiendo una base de c&amp;oacute;digo preexistente a React, o integrando una aplicaci&amp;oacute;n React con una biblioteca que no es React. En estas situaciones, es posible que desee comprobar los &lt;a href=&quot;uncontrolled-components&quot;&gt;componentes no controlados&lt;/a&gt; , una t&amp;eacute;cnica alternativa para implementar formularios de entrada.</target>
        </trans-unit>
        <trans-unit id="2005e7f27cdc72de843371aaff7b32477d8c91bf" translate="yes" xml:space="preserve">
          <source>It conceptually makes sense for the filter text and checked value to live in &lt;code&gt;FilterableProductTable&lt;/code&gt;</source>
          <target state="translated">Conceptualmente, tiene sentido que el texto del filtro y el valor verificado vivan en &lt;code&gt;FilterableProductTable&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="688f0ab18438d6d367169c900008f7481be7690d" translate="yes" xml:space="preserve">
          <source>It displays &amp;ldquo;Hello, world&amp;rdquo; on the page.</source>
          <target state="translated">Muestra &quot;Hola, mundo&quot; en la p&amp;aacute;gina.</target>
        </trans-unit>
        <trans-unit id="52ab860d9c544904ffaab788e02b64e8286beee6" translate="yes" xml:space="preserve">
          <source>It displays a heading saying &amp;ldquo;Hello, world!&amp;rdquo; on the page.</source>
          <target state="translated">Muestra un t&amp;iacute;tulo que dice &quot;&amp;iexcl;Hola, mundo!&quot; en la pagina.</target>
        </trans-unit>
        <trans-unit id="e82647fae753dc8b035e66a8857ffb17ac2da33f" translate="yes" xml:space="preserve">
          <source>It doesn&amp;rsquo;t suffer from this bug. (But we also didn&amp;rsquo;t make any changes to it.)</source>
          <target state="translated">No sufre de este error. (Pero tampoco le hicimos ning&amp;uacute;n cambio).</target>
        </trans-unit>
        <trans-unit id="602a6efa84948afcddd9d1b66dd5be71479d7a38" translate="yes" xml:space="preserve">
          <source>It is &lt;strong&gt;only&lt;/strong&gt; safe to omit a function from the dependency list if nothing in it (or the functions called by it) references props, state, or values derived from them. This example has a bug:</source>
          <target state="translated">Es &lt;strong&gt;solamente&lt;/strong&gt; segura para omitir una funci&amp;oacute;n de la lista de dependencias si nada en ella (o las funciones llamadas por ella) hace referencia a los apoyos, estatal o valores derivados de ellos. Este ejemplo tiene un error:</target>
        </trans-unit>
        <trans-unit id="6ead55f0f98915b5c6f13c05726f2286aab42a96" translate="yes" xml:space="preserve">
          <source>It is an early time for Hooks, and some third-party libraries might not be compatible with Hooks at the moment.</source>
          <target state="translated">Es una época temprana para Hooks,y algunas bibliotecas de terceros podrían no ser compatibles con Hooks por el momento.</target>
        </trans-unit>
        <trans-unit id="50466c950e08c88b69e598ab61d92c2dc031d70e" translate="yes" xml:space="preserve">
          <source>It is called JSX, and it is a syntax extension to JavaScript. We recommend using it with React to describe what the UI should look like. JSX may remind you of a template language, but it comes with the full power of JavaScript.</source>
          <target state="translated">Se llama JSX,y es una extensión sintáctica de JavaScript.Recomendamos usarlo con React para describir cómo debería ser la interfaz de usuario.JSX puede recordar a un lenguaje de plantillas,pero viene con todo el poder de JavaScript.</target>
        </trans-unit>
        <trans-unit id="92466150db2416a73798d13e0245efd07871c27a" translate="yes" xml:space="preserve">
          <source>It is common for CSS classes to depend on the component props or state:</source>
          <target state="translated">Es común que las clases de CSS dependan del componente props o estado:</target>
        </trans-unit>
        <trans-unit id="7e283c36c21325ef64876afd9194c0a0cb70a383" translate="yes" xml:space="preserve">
          <source>It is documented in our &lt;a href=&quot;code-splitting#reactlazy&quot;&gt;code splitting guide&lt;/a&gt;. Note that &lt;code&gt;lazy&lt;/code&gt; components can be deep inside the &lt;code&gt;Suspense&lt;/code&gt; tree &amp;mdash; it doesn&amp;rsquo;t have to wrap every one of them. The best practice is to place &lt;code&gt;&amp;lt;Suspense&amp;gt;&lt;/code&gt; where you want to see a loading indicator, but to use &lt;code&gt;lazy()&lt;/code&gt; wherever you want to do code splitting.</source>
          <target state="translated">Est&amp;aacute; documentado en nuestra &lt;a href=&quot;code-splitting#reactlazy&quot;&gt;gu&amp;iacute;a de divisi&amp;oacute;n de c&amp;oacute;digo&lt;/a&gt; . Tenga en cuenta que los componentes &lt;code&gt;lazy&lt;/code&gt; pueden estar en lo m&amp;aacute;s profundo del &amp;aacute;rbol de &lt;code&gt;Suspense&lt;/code&gt; , no tiene que envolver todos ellos. La mejor pr&amp;aacute;ctica es colocar &lt;code&gt;&amp;lt;Suspense&amp;gt;&lt;/code&gt; donde desee ver un indicador de carga, pero usar &lt;code&gt;lazy()&lt;/code&gt; donde desee dividir el c&amp;oacute;digo.</target>
        </trans-unit>
        <trans-unit id="f9b84f156dc2b1e8053f6383bcb338d839775393" translate="yes" xml:space="preserve">
          <source>It is equivalent to this ES5 code:</source>
          <target state="translated">Es equivalente a este código ES5:</target>
        </trans-unit>
        <trans-unit id="e8b287ce575a54f80be869742a5c4a51c76fe13e" translate="yes" xml:space="preserve">
          <source>It is expected that you use the development mode when working on your app, and the production mode when deploying your app to the users.</source>
          <target state="translated">Se espera que utilice el modo de desarrollo cuando trabaje en su aplicación,y el modo de producción cuando despliegue su aplicación a los usuarios.</target>
        </trans-unit>
        <trans-unit id="c952a73f20c5f13e3de4b9d7ef50fbb5a61fc052" translate="yes" xml:space="preserve">
          <source>It is important that we also call &lt;code&gt;ReactDOM.unmountComponentAtNode()&lt;/code&gt; in the &lt;code&gt;remove&lt;/code&gt; method so that React unregisters event handlers and other resources associated with the component tree when it is detached.</source>
          <target state="translated">Es importante que tambi&amp;eacute;n llamemos a &lt;code&gt;ReactDOM.unmountComponentAtNode()&lt;/code&gt; en el m&amp;eacute;todo de &lt;code&gt;remove&lt;/code&gt; para que React anule el registro de los controladores de eventos y otros recursos asociados con el &amp;aacute;rbol de componentes cuando se separe.</target>
        </trans-unit>
        <trans-unit id="32d368243a184c2b8d827bcbfe71e38225d8ed76" translate="yes" xml:space="preserve">
          <source>It is important to remember that the reconciliation algorithm is an implementation detail. React could rerender the whole app on every action; the end result would be the same. Just to be clear, rerender in this context means calling &lt;code&gt;render&lt;/code&gt; for all components, it doesn&amp;rsquo;t mean React will unmount and remount them. It will only apply the differences following the rules stated in the previous sections.</source>
          <target state="translated">Es importante recordar que el algoritmo de reconciliaci&amp;oacute;n es un detalle de implementaci&amp;oacute;n. React podr&amp;iacute;a volver a reproducir toda la aplicaci&amp;oacute;n en cada acci&amp;oacute;n; el resultado final ser&amp;iacute;a el mismo. Para ser claros, &lt;code&gt;render&lt;/code&gt; a renderizar en este contexto significa llamar a renderizar para todos los componentes, no significa que React los desmontar&amp;aacute; y volver&amp;aacute; a montar. Solo aplicar&amp;aacute; las diferencias siguiendo las reglas indicadas en los apartados anteriores.</target>
        </trans-unit>
        <trans-unit id="061882208caaee20f8d6caf81dd052b896705df2" translate="yes" xml:space="preserve">
          <source>It is often necessary to update the context from a component that is nested somewhere deeply in the component tree. In this case you can pass a function down through the context to allow consumers to update the context:</source>
          <target state="translated">A menudo es necesario actualizar el contexto a partir de un componente que está anidado en algún lugar profundo del árbol de componentes.En este caso se puede pasar una función a través del contexto para permitir a los consumidores actualizar el contexto:</target>
        </trans-unit>
        <trans-unit id="68f2025036d719ebb13936746e156dcb2e46aebc" translate="yes" xml:space="preserve">
          <source>It is safe to embed user input in JSX:</source>
          <target state="translated">Es seguro incrustar la entrada del usuario en JSX:</target>
        </trans-unit>
        <trans-unit id="aa4e4c8c699f839e3d4430e49f56a9d08895180e" translate="yes" xml:space="preserve">
          <source>It lets you extract the logic for calculating the initial state outside the reducer. This is also handy for resetting the state later in response to an action:</source>
          <target state="translated">Permite extraer la lógica para calcular el estado inicial fuera del reductor.Esto también es útil para restablecer el estado más tarde en respuesta a una acción:</target>
        </trans-unit>
        <trans-unit id="534a38fabcd6aaf35f04bf09e44ca89301bf0ea1" translate="yes" xml:space="preserve">
          <source>It might feel redundant to pass down the &lt;code&gt;user&lt;/code&gt; and &lt;code&gt;avatarSize&lt;/code&gt; props through many levels if in the end only the &lt;code&gt;Avatar&lt;/code&gt; component really needs it. It&amp;rsquo;s also annoying that whenever the &lt;code&gt;Avatar&lt;/code&gt; component needs more props from the top, you have to add them at all the intermediate levels too.</source>
          <target state="translated">Puede parecer redundante pasar los accesorios de &lt;code&gt;user&lt;/code&gt; y &lt;code&gt;avatarSize&lt;/code&gt; a trav&amp;eacute;s de muchos niveles si al final solo el componente &lt;code&gt;Avatar&lt;/code&gt; realmente lo necesita. Tambi&amp;eacute;n es molesto que cada vez que el componente &lt;code&gt;Avatar&lt;/code&gt; necesita m&amp;aacute;s accesorios de la parte superior, tambi&amp;eacute;n tenga que agregarlos en todos los niveles intermedios.</target>
        </trans-unit>
        <trans-unit id="50fb2495198065234962cb4b4d0c32c48a17f7f2" translate="yes" xml:space="preserve">
          <source>It returns an empty string on an invalid &lt;code&gt;temperature&lt;/code&gt;, and it keeps the output rounded to the third decimal place:</source>
          <target state="translated">Devuelve una cadena vac&amp;iacute;a en una &lt;code&gt;temperature&lt;/code&gt; no v&amp;aacute;lida y mantiene la salida redondeada al tercer lugar decimal:</target>
        </trans-unit>
        <trans-unit id="72f61e484682b21e93d363b30d4566ea24fa8ee5" translate="yes" xml:space="preserve">
          <source>It sets up your development environment so that you can use the latest JavaScript features, provides a nice developer experience, and optimizes your app for production. You&amp;rsquo;ll need to have &lt;a href=&quot;https://nodejs.org/en/&quot;&gt;Node &amp;gt;= 8.10 and npm &amp;gt;= 5.6&lt;/a&gt; on your machine. To create a project, run:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e9057e6a7d66d1d7c47dc528ed3b3b130a69063f" translate="yes" xml:space="preserve">
          <source>It sets up your development environment so that you can use the latest JavaScript features, provides a nice developer experience, and optimizes your app for production. You&amp;rsquo;ll need to have Node &amp;gt;= 8.10 and npm &amp;gt;= 5.6 on your machine. To create a project, run:</source>
          <target state="translated">Configura su entorno de desarrollo para que pueda utilizar las &amp;uacute;ltimas funciones de JavaScript, proporciona una experiencia de desarrollador agradable y optimiza su aplicaci&amp;oacute;n para la producci&amp;oacute;n. Necesitar&amp;aacute; tener Node&amp;gt; = 8.10 y npm&amp;gt; = 5.6 en su m&amp;aacute;quina. Para crear un proyecto, ejecute:</target>
        </trans-unit>
        <trans-unit id="706a32880b71586a8d7aa0ac7d5f1463de4cb7ba" translate="yes" xml:space="preserve">
          <source>It takes &lt;code&gt;friendID&lt;/code&gt; as an argument, and returns whether our friend is online.</source>
          <target state="translated">Toma &lt;code&gt;friendID&lt;/code&gt; como argumento y devuelve si nuestro amigo est&amp;aacute; en l&amp;iacute;nea.</target>
        </trans-unit>
        <trans-unit id="3161055d73426680e8d35bc1e7cbbe8e4104358e" translate="yes" xml:space="preserve">
          <source>It took us only seven lines of code to add this transition:</source>
          <target state="translated">Sólo nos tomó siete líneas de código para agregar esta transición:</target>
        </trans-unit>
        <trans-unit id="45e77ef569a1f7d7c48e0e05eba962af9f6767c1" translate="yes" xml:space="preserve">
          <source>It will render either &lt;code&gt;&amp;lt;LoginButton /&amp;gt;&lt;/code&gt; or &lt;code&gt;&amp;lt;LogoutButton /&amp;gt;&lt;/code&gt; depending on its current state. It will also render a &lt;code&gt;&amp;lt;Greeting /&amp;gt;&lt;/code&gt; from the previous example:</source>
          <target state="translated">Se har&amp;aacute; que sea &lt;code&gt;&amp;lt;LoginButton /&amp;gt;&lt;/code&gt; o &lt;code&gt;&amp;lt;LogoutButton /&amp;gt;&lt;/code&gt; dependiendo de su estado actual. Tambi&amp;eacute;n representar&amp;aacute; un &lt;code&gt;&amp;lt;Greeting /&amp;gt;&lt;/code&gt; del ejemplo anterior:</target>
        </trans-unit>
        <trans-unit id="2155bb73f8bf6451916989b5cbacb97df229da2a" translate="yes" xml:space="preserve">
          <source>It will use &lt;code&gt;this.setState()&lt;/code&gt; to schedule updates to the component local state:</source>
          <target state="translated">Utilizar&amp;aacute; &lt;code&gt;this.setState()&lt;/code&gt; para programar actualizaciones en el estado local del componente:</target>
        </trans-unit>
        <trans-unit id="d02413defbcafdd99d3c520fd9d4aa148536aaf1" translate="yes" xml:space="preserve">
          <source>It works because in JavaScript, &lt;code&gt;true &amp;amp;&amp;amp; expression&lt;/code&gt; always evaluates to &lt;code&gt;expression&lt;/code&gt;, and &lt;code&gt;false &amp;amp;&amp;amp; expression&lt;/code&gt; always evaluates to &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">Funciona porque en JavaScript, la &lt;code&gt;true &amp;amp;&amp;amp; expression&lt;/code&gt; siempre se eval&amp;uacute;a como &lt;code&gt;expression&lt;/code&gt; , y la &lt;code&gt;false &amp;amp;&amp;amp; expression&lt;/code&gt; siempre se eval&amp;uacute;a como &lt;code&gt;false&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="df1035dc615a18406c02f413ad0f4e40e484e2b1" translate="yes" xml:space="preserve">
          <source>It would catch both rendering errors &lt;em&gt;and&lt;/em&gt; errors from Suspense data fetching. We can have as many error boundaries as we like but it&amp;rsquo;s best to &lt;a href=&quot;https://aweary.dev/fault-tolerance-react/&quot;&gt;be intentional&lt;/a&gt; about their placement.</source>
          <target state="translated">Detectar&amp;iacute;a tanto los errores de representaci&amp;oacute;n &lt;em&gt;como los&lt;/em&gt; errores de la obtenci&amp;oacute;n de datos de Suspense. Podemos tener tantos l&amp;iacute;mites de error como queramos, pero es mejor &lt;a href=&quot;https://aweary.dev/fault-tolerance-react/&quot;&gt;ser intencional&lt;/a&gt; sobre su ubicaci&amp;oacute;n.</target>
        </trans-unit>
        <trans-unit id="d53bef197f2d6ecda97fc0ca21c3fffc1a9ab88e" translate="yes" xml:space="preserve">
          <source>It&amp;rsquo;s a good idea to get to know React first, before adding in additional libraries. You can build quite complex applications using only React.</source>
          <target state="translated">Es una buena idea conocer React primero, antes de agregar bibliotecas adicionales. Puede crear aplicaciones bastante complejas utilizando solo React.</target>
        </trans-unit>
        <trans-unit id="1069cd6014468c5f2a1a444828d18bfcd86ae157" translate="yes" xml:space="preserve">
          <source>It&amp;rsquo;s a result of several years of research and development, but it&amp;rsquo;s not finished. In the section on &lt;a href=&quot;concurrent-mode-adoption&quot;&gt;adopting Concurrent Mode&lt;/a&gt;, we&amp;rsquo;ll describe how you can try it and what you can expect.</source>
          <target state="translated">Es el resultado de varios a&amp;ntilde;os de investigaci&amp;oacute;n y desarrollo, pero no est&amp;aacute; terminado. En la secci&amp;oacute;n sobre la &lt;a href=&quot;concurrent-mode-adoption&quot;&gt;adopci&amp;oacute;n del modo concurrente&lt;/a&gt; , describiremos c&amp;oacute;mo puede probarlo y qu&amp;eacute; puede esperar.</target>
        </trans-unit>
        <trans-unit id="5b97c1e1db1289e7c4f51d01cbfaea288680830c" translate="yes" xml:space="preserve">
          <source>It&amp;rsquo;s difficult to remember which props or state are used by functions outside of the effect. This is why &lt;strong&gt;usually you&amp;rsquo;ll want to declare functions needed by an effect &lt;em&gt;inside&lt;/em&gt; of it.&lt;/strong&gt; Then it&amp;rsquo;s easy to see what values from the component scope that effect depends on:</source>
          <target state="translated">Es dif&amp;iacute;cil recordar qu&amp;eacute; accesorios o estados utilizan las funciones fuera del efecto. Esta es la raz&amp;oacute;n &lt;strong&gt;por la que generalmente querr&amp;aacute; declarar las funciones necesarias para un efecto &lt;em&gt;dentro&lt;/em&gt; de &amp;eacute;l. &lt;/strong&gt;Entonces es f&amp;aacute;cil ver de qu&amp;eacute; valores del alcance del componente depende ese efecto:</target>
        </trans-unit>
        <trans-unit id="12d523ee0a8b2e43fbd774373dabc117b68d15fc" translate="yes" xml:space="preserve">
          <source>It&amp;rsquo;s hard to reuse stateful logic between components</source>
          <target state="translated">Es dif&amp;iacute;cil reutilizar la l&amp;oacute;gica con estado entre componentes</target>
        </trans-unit>
        <trans-unit id="e11305e8e0d8ed22ffeb90393f322ef30d355dd4" translate="yes" xml:space="preserve">
          <source>It&amp;rsquo;s important to remember that just because the pattern is called &amp;ldquo;render props&amp;rdquo; you don&amp;rsquo;t &lt;em&gt;have to use a prop named &lt;code&gt;render&lt;/code&gt; to use this pattern&lt;/em&gt;. In fact, &lt;a href=&quot;https://cdb.reacttraining.com/use-a-render-prop-50de598f11ce&quot;&gt;&lt;em&gt;any&lt;/em&gt; prop that is a function that a component uses to know what to render is technically a &amp;ldquo;render prop&amp;rdquo;&lt;/a&gt;.</source>
          <target state="translated">Es importante recordar que solo porque el patr&amp;oacute;n se llama &quot;accesorios de renderizado&quot;, no es necesario &lt;em&gt;usar un accesorio llamado &lt;code&gt;render&lt;/code&gt; izado para usar este patr&amp;oacute;n&lt;/em&gt; . De hecho, &lt;a href=&quot;https://cdb.reacttraining.com/use-a-render-prop-50de598f11ce&quot;&gt;&lt;em&gt;cualquier&lt;/em&gt; accesorio que sea una funci&amp;oacute;n que utiliza un componente para saber qu&amp;eacute; renderizar es t&amp;eacute;cnicamente un &quot;objeto de renderizado&quot;&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="abbcf3e467e64993c40145b58380cca00dde2358" translate="yes" xml:space="preserve">
          <source>It&amp;rsquo;s not a Hook because it doesn&amp;rsquo;t compose like Hooks do. &lt;code&gt;React.memo&lt;/code&gt; is equivalent to &lt;code&gt;PureComponent&lt;/code&gt;, but it only compares props. (You can also add a second argument to specify a custom comparison function that takes the old and new props. If it returns true, the update is skipped.)</source>
          <target state="translated">No es un Hook porque no compone como lo hacen Hooks. &lt;code&gt;React.memo&lt;/code&gt; es equivalente a &lt;code&gt;PureComponent&lt;/code&gt; , pero solo compara accesorios. (Tambi&amp;eacute;n puede agregar un segundo argumento para especificar una funci&amp;oacute;n de comparaci&amp;oacute;n personalizada que tome los accesorios antiguos y nuevos. Si devuelve verdadero, se omite la actualizaci&amp;oacute;n).</target>
        </trans-unit>
        <trans-unit id="218c8c3fba795922b2f79061baba6ea0eea01f6d" translate="yes" xml:space="preserve">
          <source>It&amp;rsquo;s possible that a minor release will not include new features. &lt;a href=&quot;https://semver.org/#spec-item-7&quot;&gt;This is allowed by semver&lt;/a&gt;, which states &lt;strong&gt;&amp;rdquo;[a minor version] MAY be incremented if substantial new functionality or improvements are introduced within the private code. It MAY include patch level changes.&amp;rdquo;&lt;/strong&gt;</source>
          <target state="translated">Es posible que una versi&amp;oacute;n menor no incluya nuevas funciones. &lt;a href=&quot;https://semver.org/#spec-item-7&quot;&gt;Esto est&amp;aacute; permitido por semver&lt;/a&gt; , que establece que &lt;strong&gt;&amp;ldquo;[una versi&amp;oacute;n menor] PUEDE incrementarse si se introducen nuevas funciones o mejoras sustanciales dentro del c&amp;oacute;digo privado. PUEDE incluir cambios de nivel de parche &quot;.&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="1ed922784aa3b9ce3ee3dfd000c51ce8f2ddc5c7" translate="yes" xml:space="preserve">
          <source>It&amp;rsquo;s possible that in the future React will provide a &lt;code&gt;usePrevious&lt;/code&gt; Hook out of the box since it&amp;rsquo;s a relatively common use case.</source>
          <target state="translated">Es posible que en el futuro React proporcione un gancho de uso anterior &lt;code&gt;usePrevious&lt;/code&gt; , ya que es un caso de uso relativamente com&amp;uacute;n.</target>
        </trans-unit>
        <trans-unit id="4411f615cb9a34eac0782d89d41554e9d48dcddd" translate="yes" xml:space="preserve">
          <source>It&amp;rsquo;s typically better to make more specific assertions than to use snapshots. These kinds of tests include implementation details so they break easily, and teams can get desensitized to snapshot breakages. Selectively &lt;a href=&quot;#mocking-modules&quot;&gt;mocking some child components&lt;/a&gt; can help reduce the size of snapshots and keep them readable for the code review.</source>
          <target state="translated">Por lo general, es mejor hacer afirmaciones m&amp;aacute;s espec&amp;iacute;ficas que usar instant&amp;aacute;neas. Este tipo de pruebas incluyen detalles de implementaci&amp;oacute;n para que se rompan f&amp;aacute;cilmente, y los equipos pueden volverse insensibles a las rupturas de instant&amp;aacute;neas. La &lt;a href=&quot;#mocking-modules&quot;&gt;burla&lt;/a&gt; selectiva de algunos componentes secundarios puede ayudar a reducir el tama&amp;ntilde;o de las instant&amp;aacute;neas y mantenerlas legibles para la revisi&amp;oacute;n del c&amp;oacute;digo.</target>
        </trans-unit>
        <trans-unit id="1abbf23e01de1391e6e121af6cd34d1a85aa0356" translate="yes" xml:space="preserve">
          <source>It&amp;rsquo;s worth noting that &lt;code&gt;useDeferredValue&lt;/code&gt; is not &lt;em&gt;only&lt;/em&gt; useful for data fetching. It also helps when an expensive component tree causes an interaction (e.g. typing in an input) to be sluggish. Just like we can &amp;ldquo;defer&amp;rdquo; a value that takes too long to fetch (and show its old value despite other components updating), we can do this with trees that take too long to render.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="483a41989a3f28face460eaf57d7dae044787b9f" translate="yes" xml:space="preserve">
          <source>It&amp;rsquo;s worth noting that &lt;code&gt;useDeferredValue&lt;/code&gt; is not &lt;em&gt;only&lt;/em&gt; useful for data fetching. It also helps when an expensive component tree causes an interaction (e.g. typing in an input) to be sluggish. Just like we can &amp;ldquo;defer&amp;rdquo; a value that takes too long to fetch (and show its old value despite others components updating), we can do this with trees that take too long to render.</source>
          <target state="translated">Vale la pena se&amp;ntilde;alar que &lt;code&gt;useDeferredValue&lt;/code&gt; no &lt;em&gt;solo es&lt;/em&gt; &amp;uacute;til para obtener datos. Tambi&amp;eacute;n ayuda cuando un &amp;aacute;rbol de componentes costoso hace que una interacci&amp;oacute;n (por ejemplo, escribir una entrada) sea lenta. Al igual que podemos &quot;diferir&quot; un valor que tarda demasiado en recuperarse (y mostrar su antiguo valor a pesar de la actualizaci&amp;oacute;n de otros componentes), podemos hacer esto con &amp;aacute;rboles que tardan demasiado en renderizarse.</target>
        </trans-unit>
        <trans-unit id="55b65216aa0540eaf6506a4435bb83e1e7f8f013" translate="yes" xml:space="preserve">
          <source>JAWS in Internet Explorer</source>
          <target state="translated">JAWS en Internet Explorer</target>
        </trans-unit>
        <trans-unit id="0e4779d05c5a545a6bd2f3323d3fe430a37f5d7b" translate="yes" xml:space="preserve">
          <source>JSX</source>
          <target state="translated">JSX</target>
        </trans-unit>
        <trans-unit id="1390ed0a23d1a0f6a989a72f7740422bce623820" translate="yes" xml:space="preserve">
          <source>JSX Children</source>
          <target state="translated">JSX Children</target>
        </trans-unit>
        <trans-unit id="5a08e455cb80c9325d21ca392ead0811d7f7928f" translate="yes" xml:space="preserve">
          <source>JSX In Depth</source>
          <target state="translated">JSX en profundidad</target>
        </trans-unit>
        <trans-unit id="d79f80b3f74dfa812404ff28047b6abd93ce00a8" translate="yes" xml:space="preserve">
          <source>JSX Prevents Injection Attacks</source>
          <target state="translated">JSX previene los ataques con inyecciones</target>
        </trans-unit>
        <trans-unit id="201092e5747855ff7f46489df7db6fec3735acac" translate="yes" xml:space="preserve">
          <source>JSX Represents Objects</source>
          <target state="translated">JSX representa objetos</target>
        </trans-unit>
        <trans-unit id="f821c0797aa66329cd5b6a52d7b985154fb5e626" translate="yes" xml:space="preserve">
          <source>JSX allows &lt;a href=&quot;introducing-jsx#embedding-expressions-in-jsx&quot;&gt;embedding any expression&lt;/a&gt; in curly braces so we could inline the &lt;code&gt;map()&lt;/code&gt; result:</source>
          <target state="translated">JSX permite &lt;a href=&quot;introducing-jsx#embedding-expressions-in-jsx&quot;&gt;incrustar cualquier expresi&amp;oacute;n&lt;/a&gt; entre llaves para que podamos alinear el resultado del &lt;code&gt;map()&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="f572ba8add6be836659fce1a76a91186f8683f81" translate="yes" xml:space="preserve">
          <source>JSX is a syntax extension to JavaScript. It is similar to a template language, but it has full power of JavaScript. JSX gets compiled to &lt;code&gt;React.createElement()&lt;/code&gt; calls which return plain JavaScript objects called &amp;ldquo;React elements&amp;rdquo;. To get a basic introduction to JSX &lt;a href=&quot;introducing-jsx&quot;&gt;see the docs here&lt;/a&gt; and find a more in-depth tutorial on JSX &lt;a href=&quot;jsx-in-depth&quot;&gt;here&lt;/a&gt;.</source>
          <target state="translated">JSX es una extensi&amp;oacute;n de sintaxis de JavaScript. Es similar a un lenguaje de plantilla, pero tiene todo el poder de JavaScript. JSX se compila en llamadas &lt;code&gt;React.createElement()&lt;/code&gt; que devuelven objetos JavaScript simples llamados &quot;elementos React&quot;. Para obtener una introducci&amp;oacute;n b&amp;aacute;sica a JSX, &lt;a href=&quot;introducing-jsx&quot;&gt;consulte los documentos aqu&amp;iacute;&lt;/a&gt; y encuentre un tutorial m&amp;aacute;s detallado sobre JSX &lt;a href=&quot;jsx-in-depth&quot;&gt;aqu&amp;iacute;&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="2a6badf2480a79666ab2a50ef49c41eec53e3e92" translate="yes" xml:space="preserve">
          <source>JSX is an Expression Too</source>
          <target state="translated">JSX es una expresión también</target>
        </trans-unit>
        <trans-unit id="a7d41082c94e0ade95a8097ecf33e2cb44acdb09" translate="yes" xml:space="preserve">
          <source>JSX is not a requirement for using React. Using React without JSX is especially convenient when you don&amp;rsquo;t want to set up compilation in your build environment.</source>
          <target state="translated">JSX no es un requisito para usar React. Usar React sin JSX es especialmente conveniente cuando no desea configurar la compilaci&amp;oacute;n en su entorno de compilaci&amp;oacute;n.</target>
        </trans-unit>
        <trans-unit id="dd38b28ee1a9a309326f94891c1df14009e831fa" translate="yes" xml:space="preserve">
          <source>JSX produces React &amp;ldquo;elements&amp;rdquo;. We will explore rendering them to the DOM in the &lt;a href=&quot;rendering-elements&quot;&gt;next section&lt;/a&gt;. Below, you can find the basics of JSX necessary to get you started.</source>
          <target state="translated">JSX produce &quot;elementos&quot; de React. Exploraremos c&amp;oacute;mo renderizarlos al DOM en la &lt;a href=&quot;rendering-elements&quot;&gt;siguiente secci&amp;oacute;n&lt;/a&gt; . A continuaci&amp;oacute;n, puede encontrar los conceptos b&amp;aacute;sicos de JSX necesarios para comenzar.</target>
        </trans-unit>
        <trans-unit id="e5c0788f2156485e43ec1aec3f13813b6ce0ec76" translate="yes" xml:space="preserve">
          <source>JSX removes whitespace at the beginning and ending of a line. It also removes blank lines. New lines adjacent to tags are removed; new lines that occur in the middle of string literals are condensed into a single space. So these all render to the same thing:</source>
          <target state="translated">JSX elimina los espacios en blanco al principio y al final de una línea.También elimina las líneas en blanco.Se eliminan las nuevas líneas adyacentes a las etiquetas;las nuevas líneas que aparecen en medio de los literales de la cadena se condensan en un solo espacio.Así que todas ellas se convierten en lo mismo:</target>
        </trans-unit>
        <trans-unit id="e557a0ad7b8dd428002b075a12a339460bf81183" translate="yes" xml:space="preserve">
          <source>JSX tags may contain children:</source>
          <target state="translated">Las etiquetas JSX pueden contener niños:</target>
        </trans-unit>
        <trans-unit id="c88547a44d266cdafe70fec17001f13058415c5b" translate="yes" xml:space="preserve">
          <source>JavaScript Environment Requirements</source>
          <target state="translated">JavaScript Requisitos del entorno</target>
        </trans-unit>
        <trans-unit id="191332a52bb73fc079e6c2be8fbab52a7b9b0c79" translate="yes" xml:space="preserve">
          <source>JavaScript Expressions as Children</source>
          <target state="translated">Expresiones de JavaScript en la infancia</target>
        </trans-unit>
        <trans-unit id="f86b0b485fe227f9926cd86119e4d67d9db9cb41" translate="yes" xml:space="preserve">
          <source>JavaScript Expressions as Props</source>
          <target state="translated">Expresiones de JavaScript como accesorios</target>
        </trans-unit>
        <trans-unit id="8262e0b313f4b908f2bfa1fa8c04c78e05342554" translate="yes" xml:space="preserve">
          <source>JavaScript Resources</source>
          <target state="translated">Recursos de JavaScript</target>
        </trans-unit>
        <trans-unit id="3ab669d11c2053c3096b0ce975c409719b9ab1f3" translate="yes" xml:space="preserve">
          <source>JavaScript expressions can be mixed with other types of children. This is often useful in lieu of string templates:</source>
          <target state="translated">Las expresiones de JavaScript pueden mezclarse con otros tipos de niños.Esto es a menudo útil en lugar de las plantillas de cuerda:</target>
        </trans-unit>
        <trans-unit id="fdc6b5ae1ed04a526c0403c39f6d892a4884f28f" translate="yes" xml:space="preserve">
          <source>Jest is widely compatible with React projects, supporting features like mocked &lt;a href=&quot;#mocking-modules&quot;&gt;modules&lt;/a&gt; and &lt;a href=&quot;#mocking-timers&quot;&gt;timers&lt;/a&gt;, and &lt;a href=&quot;#mocking-a-rendering-surface&quot;&gt;&lt;code&gt;jsdom&lt;/code&gt;&lt;/a&gt; support. &lt;strong&gt;If you use Create React App, &lt;a href=&quot;https://facebook.github.io/create-react-app/docs/running-tests&quot;&gt;Jest is already included out of the box&lt;/a&gt; with useful defaults.&lt;/strong&gt;</source>
          <target state="translated">Jest es ampliamente compatible con los proyectos de React, admite funciones como &lt;a href=&quot;#mocking-modules&quot;&gt;m&amp;oacute;dulos&lt;/a&gt; y &lt;a href=&quot;#mocking-timers&quot;&gt;temporizadores &lt;/a&gt;&lt;a href=&quot;#mocking-a-rendering-surface&quot;&gt; &lt;code&gt;jsdom&lt;/code&gt; &lt;/a&gt; , y compatibilidad con jsdom . &lt;strong&gt;Si usa la aplicaci&amp;oacute;n Create React, &lt;a href=&quot;https://facebook.github.io/create-react-app/docs/running-tests&quot;&gt;Jest ya est&amp;aacute; incluido de f&amp;aacute;brica&lt;/a&gt; con &amp;uacute;tiles valores predeterminados.&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="fffb2c94a89ef37f4ff800dd4f2f3274e7b4c9bf" translate="yes" xml:space="preserve">
          <source>JetBrains develops and maintains several tools specifically for the React community: &lt;a href=&quot;https://github.com/JetBrains/kotlin-wrappers&quot;&gt;React bindings&lt;/a&gt; as well as &lt;a href=&quot;https://github.com/JetBrains/create-react-kotlin-app&quot;&gt;Create React Kotlin App&lt;/a&gt;. The latter helps you start building React apps with Kotlin with no build configuration.</source>
          <target state="translated">JetBrains desarrolla y mantiene varias herramientas espec&amp;iacute;ficamente para la comunidad React: &lt;a href=&quot;https://github.com/JetBrains/kotlin-wrappers&quot;&gt;Reaccionar fijaciones&lt;/a&gt; , as&amp;iacute; como &lt;a href=&quot;https://github.com/JetBrains/create-react-kotlin-app&quot;&gt;crear Reaccionar Kotlin aplicaci&amp;oacute;n&lt;/a&gt; . Este &amp;uacute;ltimo lo ayuda a comenzar a crear aplicaciones React con Kotlin sin configuraci&amp;oacute;n de compilaci&amp;oacute;n.</target>
        </trans-unit>
        <trans-unit id="26f4f29dc54a0429c9c6356ba883190a57985b95" translate="yes" xml:space="preserve">
          <source>Just because it&amp;rsquo;s possible, doesn&amp;rsquo;t mean that it&amp;rsquo;s the best approach for React apps. We encourage you to use React components when you can. React components are easier to reuse in React applications, and often provide more control over their behavior and appearance.</source>
          <target state="translated">El hecho de que sea posible no significa que sea el mejor enfoque para las aplicaciones React. Le recomendamos que utilice los componentes de React siempre que pueda. Los componentes de React son m&amp;aacute;s f&amp;aacute;ciles de reutilizar en las aplicaciones de React y, a menudo, brindan m&amp;aacute;s control sobre su comportamiento y apariencia.</target>
        </trans-unit>
        <trans-unit id="59c6c9a90cc15a2b6bbb52187ffa7d5c291abb80" translate="yes" xml:space="preserve">
          <source>Just like in JavaScript, it is up to you to choose an appropriate style based on what you and your team consider more readable. Also remember that whenever conditions become too complex, it might be a good time to &lt;a href=&quot;components-and-props#extracting-components&quot;&gt;extract a component&lt;/a&gt;.</source>
          <target state="translated">Al igual que en JavaScript, depende de usted elegir un estilo apropiado en funci&amp;oacute;n de lo que usted y su equipo consideren m&amp;aacute;s legible. Recuerde tambi&amp;eacute;n que cuando las condiciones se vuelven demasiado complejas, puede ser un buen momento para &lt;a href=&quot;components-and-props#extracting-components&quot;&gt;extraer un componente&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="e19fb11d1b21bc4e9e11220a38333f6f51bc6998" translate="yes" xml:space="preserve">
          <source>Just like in a real browser, jsdom lets us model user interactions; tests can dispatch events on DOM nodes, and then observe and assert on the side effects of these actions &lt;a href=&quot;testing-recipes#events&quot;&gt;&lt;small&gt;(example)&lt;/small&gt;&lt;/a&gt;.</source>
          <target state="translated">Al igual que en un navegador real, jsdom nos permite modelar las interacciones del usuario; Las pruebas pueden enviar eventos en los nodos DOM y luego observar y afirmar los efectos secundarios de estas acciones &lt;a href=&quot;testing-recipes#events&quot;&gt;&lt;small&gt;(ejemplo)&lt;/small&gt;&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="04a953b2cc6af815cf1d538af4ea7e0cdd73a8c9" translate="yes" xml:space="preserve">
          <source>Just like with &lt;code&gt;useState&lt;/code&gt;, you can use more than a single effect in a component:</source>
          <target state="translated">Al igual que con &lt;code&gt;useState&lt;/code&gt; , puede usar m&amp;aacute;s de un efecto en un componente:</target>
        </trans-unit>
        <trans-unit id="0417f986bcfb4e8e2b6c2b20736543a236a42518" translate="yes" xml:space="preserve">
          <source>Keep in mind that &lt;code&gt;&amp;lt;SuspenseList&amp;gt;&lt;/code&gt; is composable, like anything in React. For example, you can create a grid by putting several &lt;code&gt;&amp;lt;SuspenseList&amp;gt;&lt;/code&gt; rows inside a &lt;code&gt;&amp;lt;SuspenseList&amp;gt;&lt;/code&gt; table.</source>
          <target state="translated">Tenga en cuenta que &lt;code&gt;&amp;lt;SuspenseList&amp;gt;&lt;/code&gt; es componible, como cualquier cosa en React. Por ejemplo, puede crear una cuadr&amp;iacute;cula colocando varias filas &lt;code&gt;&amp;lt;SuspenseList&amp;gt;&lt;/code&gt; dentro de una tabla &lt;code&gt;&amp;lt;SuspenseList&amp;gt;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="07019d7742ef51cadec0c4168d9dbc4ff41a327c" translate="yes" xml:space="preserve">
          <source>Keep in mind that &lt;code&gt;useRef&lt;/code&gt;&lt;em&gt;doesn&amp;rsquo;t&lt;/em&gt; notify you when its content changes. Mutating the &lt;code&gt;.current&lt;/code&gt; property doesn&amp;rsquo;t cause a re-render. If you want to run some code when React attaches or detaches a ref to a DOM node, you may want to use a &lt;a href=&quot;hooks-faq#how-can-i-measure-a-dom-node&quot;&gt;callback ref&lt;/a&gt; instead.</source>
          <target state="translated">Tenga en cuenta que &lt;code&gt;useRef&lt;/code&gt; &lt;em&gt;no le&lt;/em&gt; notifica cuando cambia su contenido. La &lt;code&gt;.current&lt;/code&gt; propiedad .current no provoca una repetici&amp;oacute;n. Si desea ejecutar alg&amp;uacute;n c&amp;oacute;digo cuando React adjunta o separa una referencia a un nodo DOM, es posible que desee utilizar una &lt;a href=&quot;hooks-faq#how-can-i-measure-a-dom-node&quot;&gt;referencia de devoluci&amp;oacute;n de llamada en su&lt;/a&gt; lugar.</target>
        </trans-unit>
        <trans-unit id="2fa659e6371af8e34371298a054c6fa0b8e3f4e6" translate="yes" xml:space="preserve">
          <source>Keep scrolling down, and you&amp;rsquo;ll find the link to the &lt;a href=&quot;introducing-jsx&quot;&gt;next chapter of this guide&lt;/a&gt; right before the website footer.</source>
          <target state="translated">Siga desplaz&amp;aacute;ndose hacia abajo y encontrar&amp;aacute; el enlace al &lt;a href=&quot;introducing-jsx&quot;&gt;siguiente cap&amp;iacute;tulo de esta gu&amp;iacute;a&lt;/a&gt; justo antes del pie de p&amp;aacute;gina del sitio web.</target>
        </trans-unit>
        <trans-unit id="4a277208935542103e33cce1ec94231bfcbe2812" translate="yes" xml:space="preserve">
          <source>Keep using &lt;code&gt;createReactClass&lt;/code&gt;.</source>
          <target state="translated">Siga usando &lt;code&gt;createReactClass&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="3961da9502b1e99387aff089f5c83ca94c5c588d" translate="yes" xml:space="preserve">
          <source>Keyboard Events</source>
          <target state="translated">Tastatur-Ereignisse</target>
        </trans-unit>
        <trans-unit id="a63562f9dc59d3d173ce1da297fea061eda935fe" translate="yes" xml:space="preserve">
          <source>Keyboard focus and focus outline</source>
          <target state="translated">Enfoque del teclado y esquema de enfoque</target>
        </trans-unit>
        <trans-unit id="71a38cea4a8ef2893215c7068a770d00cbeee9f2" translate="yes" xml:space="preserve">
          <source>Keyboard focus refers to the current element in the DOM that is selected to accept input from the keyboard. We see it everywhere as a focus outline similar to that shown in the following image:</source>
          <target state="translated">El enfoque del teclado se refiere al elemento actual en el DOM que se selecciona para aceptar la entrada del teclado.Lo vemos en todas partes como un contorno de enfoque similar al que se muestra en la siguiente imagen:</target>
        </trans-unit>
        <trans-unit id="7ea41b7bfa6e4c0a74c593ca76797a28b26b665e" translate="yes" xml:space="preserve">
          <source>Keyed Fragments</source>
          <target state="translated">Fragmentos clave</target>
        </trans-unit>
        <trans-unit id="e5651c683f14c95aa972cfdbc300d9fecfe02019" translate="yes" xml:space="preserve">
          <source>Keys</source>
          <target state="translated">Keys</target>
        </trans-unit>
        <trans-unit id="033fe9e03aa157b184cec9c5c36765ae681fc7ed" translate="yes" xml:space="preserve">
          <source>Keys Must Only Be Unique Among Siblings</source>
          <target state="translated">Las llaves sólo deben ser únicas entre hermanos</target>
        </trans-unit>
        <trans-unit id="58d08b1dcb85c35147a1b3441c0c392efd3a8241" translate="yes" xml:space="preserve">
          <source>Keys help React identify which items have changed, are added, or are removed. Keys should be given to the elements inside the array to give the elements a stable identity:</source>
          <target state="translated">Las claves ayudan a Reaccionar a identificar qué elementos han cambiado,se añaden o se eliminan.Las llaves deben ser dadas a los elementos dentro de la matriz para dar a los elementos una identidad estable:</target>
        </trans-unit>
        <trans-unit id="c207367e515ac72a16c2932ecfa02b3376650bf0" translate="yes" xml:space="preserve">
          <source>Keys only make sense in the context of the surrounding array.</source>
          <target state="translated">Las claves sólo tienen sentido en el contexto de la matriz circundante.</target>
        </trans-unit>
        <trans-unit id="21b4e388c860748250255ac3aec6577a53bb08ca" translate="yes" xml:space="preserve">
          <source>Keys only need to be unique among sibling elements in the same array. They don&amp;rsquo;t need to be unique across the whole application or even a single component.</source>
          <target state="translated">Las claves solo deben ser &amp;uacute;nicas entre los elementos hermanos de la misma matriz. No es necesario que sean &amp;uacute;nicos en toda la aplicaci&amp;oacute;n o incluso en un solo componente.</target>
        </trans-unit>
        <trans-unit id="f269f84d4b420a7eccc734c9f3e4bbe7ec1e654b" translate="yes" xml:space="preserve">
          <source>Keys serve as a hint to React but they don&amp;rsquo;t get passed to your components. If you need the same value in your component, pass it explicitly as a prop with a different name:</source>
          <target state="translated">Las claves sirven como una pista para React pero no pasan a sus componentes. Si necesita el mismo valor en su componente, p&amp;aacute;selo expl&amp;iacute;citamente como un accesorio con un nombre diferente:</target>
        </trans-unit>
        <trans-unit id="4eb803361f1db02c12313aa22ea43364fef308c9" translate="yes" xml:space="preserve">
          <source>Keys should be stable, predictable, and unique. Unstable keys (like those produced by &lt;code&gt;Math.random()&lt;/code&gt;) will cause many component instances and DOM nodes to be unnecessarily recreated, which can cause performance degradation and lost state in child components.</source>
          <target state="translated">Las claves deben ser estables, predecibles y &amp;uacute;nicas. Las claves inestables (como las producidas por &lt;code&gt;Math.random()&lt;/code&gt; ) har&amp;aacute;n que muchas instancias de componentes y nodos DOM se vuelvan a crear innecesariamente, lo que puede provocar una degradaci&amp;oacute;n del rendimiento y la p&amp;eacute;rdida de estado en los componentes secundarios.</target>
        </trans-unit>
        <trans-unit id="46d2b02a27e73ea54e2ad8018f1f566c76419e35" translate="yes" xml:space="preserve">
          <source>Keys used within arrays should be unique among their siblings. However they don&amp;rsquo;t need to be globally unique. We can use the same keys when we produce two different arrays:</source>
          <target state="translated">Las claves utilizadas dentro de las matrices deben ser &amp;uacute;nicas entre sus hermanos. Sin embargo, no es necesario que sean &amp;uacute;nicos a nivel mundial. Podemos usar las mismas claves cuando producimos dos matrices diferentes:</target>
        </trans-unit>
        <trans-unit id="b950ddccc3180b1568a4677560f1be2e72ae0d05" translate="yes" xml:space="preserve">
          <source>Knowledge Level Assumptions</source>
          <target state="translated">Supuestos del nivel de conocimiento</target>
        </trans-unit>
        <trans-unit id="4b97a1cc4cde2d848838f0605a552d5704eea24b" translate="yes" xml:space="preserve">
          <source>Kotlin</source>
          <target state="translated">Kotlin</target>
        </trans-unit>
        <trans-unit id="087f43dec679500a381105d8177480d92e5bc6f7" translate="yes" xml:space="preserve">
          <source>Labeling</source>
          <target state="translated">Labeling</target>
        </trans-unit>
        <trans-unit id="86ade0000eab7713840cb80442178dbad165e1c7" translate="yes" xml:space="preserve">
          <source>Later, you write a component for subscribing to a single blog post, which follows a similar pattern:</source>
          <target state="translated">Más tarde,escribes un componente para suscribirte a una sola entrada del blog,que sigue un patrón similar:</target>
        </trans-unit>
        <trans-unit id="4e81f878f11e9186c40f41b370cbeff1223f6553" translate="yes" xml:space="preserve">
          <source>Latest Channel</source>
          <target state="translated">Último canal</target>
        </trans-unit>
        <trans-unit id="801295034f8f587a8731684b0829ce3fafe33d56" translate="yes" xml:space="preserve">
          <source>Latest is the channel used for stable React releases. It corresponds to the &lt;code&gt;latest&lt;/code&gt; tag on npm. It is the recommended channel for all React apps that are shipped to real users.</source>
          <target state="translated">Latest es el canal utilizado para las versiones estables de React. Corresponde a la &lt;code&gt;latest&lt;/code&gt; etiqueta en npm. Es el canal recomendado para todas las aplicaciones React que se env&amp;iacute;an a usuarios reales.</target>
        </trans-unit>
        <trans-unit id="09dea8b1934495cf50be92926eded5430df29f58" translate="yes" xml:space="preserve">
          <source>Lazy initial state</source>
          <target state="translated">Estado inicial perezoso</target>
        </trans-unit>
        <trans-unit id="0aa93a4477a941d54e9e6489ff5a7fb43a5339e0" translate="yes" xml:space="preserve">
          <source>Lazy initialization</source>
          <target state="translated">Inicialización perezosa</target>
        </trans-unit>
        <trans-unit id="e1c5a8ff2c0a4cee2266af52e69d8ea217bc6355" translate="yes" xml:space="preserve">
          <source>Learn Gatsby from &lt;a href=&quot;https://www.gatsbyjs.org/docs/&quot;&gt;its official guide&lt;/a&gt; and a &lt;a href=&quot;https://www.gatsbyjs.org/docs/gatsby-starters/&quot;&gt;gallery of starter kits&lt;/a&gt;.</source>
          <target state="translated">Aprende a Gatsby con &lt;a href=&quot;https://www.gatsbyjs.org/docs/&quot;&gt;su gu&amp;iacute;a oficial&lt;/a&gt; y una &lt;a href=&quot;https://www.gatsbyjs.org/docs/gatsby-starters/&quot;&gt;galer&amp;iacute;a de kits de inicio&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="378cbbf54cbb2e3f3bd201f02c1b946ec3601eba" translate="yes" xml:space="preserve">
          <source>Learn More</source>
          <target state="translated">Aprende más</target>
        </trans-unit>
        <trans-unit id="47738a476129c3a8cb6d980e52a9a75eb86f2183" translate="yes" xml:space="preserve">
          <source>Learn Next.js from &lt;a href=&quot;https://nextjs.org/learn/&quot;&gt;its official guide&lt;/a&gt;.</source>
          <target state="translated">Aprenda Next.js de &lt;a href=&quot;https://nextjs.org/learn/&quot;&gt;su gu&amp;iacute;a oficial&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="802c853c766c4a1fb751dfe0a5007088efb8fff9" translate="yes" xml:space="preserve">
          <source>Learn React</source>
          <target state="translated">Aprender a reaccionar</target>
        </trans-unit>
        <trans-unit id="6c1aff18b114655a3728004f5ddf84acf496ed61" translate="yes" xml:space="preserve">
          <source>Learn more about it at &lt;a href=&quot;https://fb.me/react-interaction-tracing&quot;&gt;fb.me/react-interaction-tracing&lt;/a&gt;</source>
          <target state="translated">Obtenga m&amp;aacute;s informaci&amp;oacute;n al &lt;a href=&quot;https://fb.me/react-interaction-tracing&quot;&gt;respecto&lt;/a&gt; en fb.me/react-interaction-tracing</target>
        </trans-unit>
        <trans-unit id="74783fcd98611ef8c679d0b35c17456b50fdbdab" translate="yes" xml:space="preserve">
          <source>Learn more about setState</source>
          <target state="translated">Más información sobre setState</target>
        </trans-unit>
        <trans-unit id="3d9e1ea32612926012e0f27c2e2d3bc9d3504c65" translate="yes" xml:space="preserve">
          <source>Learn more about the new &lt;code&gt;createRef&lt;/code&gt; API here.</source>
          <target state="translated">Obtenga m&amp;aacute;s informaci&amp;oacute;n sobre la nueva API &lt;code&gt;createRef&lt;/code&gt; aqu&amp;iacute;.</target>
        </trans-unit>
        <trans-unit id="d12363dec3cec522658520bb14b574d2c38d4a9b" translate="yes" xml:space="preserve">
          <source>Legacy API</source>
          <target state="translated">Legado API</target>
        </trans-unit>
        <trans-unit id="dde4f866b5827a3ecdb1b59f566920d28fc762d3" translate="yes" xml:space="preserve">
          <source>Legacy API: String Refs</source>
          <target state="translated">Legado API:Refs.de la cadena</target>
        </trans-unit>
        <trans-unit id="e5b92b7804190333f8d5aa0581703f3b2664d74b" translate="yes" xml:space="preserve">
          <source>Legacy Context</source>
          <target state="translated">Contexto del legado</target>
        </trans-unit>
        <trans-unit id="673ce3a3969d34565237049f3b8553b6bff614da" translate="yes" xml:space="preserve">
          <source>Legacy Lifecycle Methods</source>
          <target state="translated">Métodos del ciclo de vida del legado</target>
        </trans-unit>
        <trans-unit id="0ebe4f64c19e892054a7737b95e642e4103d4505" translate="yes" xml:space="preserve">
          <source>Legacy Mode</source>
          <target state="translated">Modo Legado</target>
        </trans-unit>
        <trans-unit id="e41df52dcff2d5fb3f135df9c40c44c902c43f73" translate="yes" xml:space="preserve">
          <source>Lessons Learned</source>
          <target state="translated">Lecciones aprendidas</target>
        </trans-unit>
        <trans-unit id="59538c378635dc8630feb1d884595472a4a714c5" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s Get Started!</source>
          <target state="translated">&amp;iexcl;Empecemos!</target>
        </trans-unit>
        <trans-unit id="83ad68c13a4560eb3e6da14fe3991a29f25a12c8" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s assign a &lt;code&gt;key&lt;/code&gt; to our list items inside &lt;code&gt;numbers.map()&lt;/code&gt; and fix the missing key issue.</source>
          <target state="translated">Asignemos una &lt;code&gt;key&lt;/code&gt; a los elementos de nuestra lista dentro de &lt;code&gt;numbers.map()&lt;/code&gt; y solucionemos el problema de la clave que falta.</target>
        </trans-unit>
        <trans-unit id="62e35c44c6745b986cc311a397ff72118a2f50c3" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s compare how different data fetching strategies deal with this requirement.</source>
          <target state="translated">Comparemos c&amp;oacute;mo las diferentes estrategias de obtenci&amp;oacute;n de datos abordan este requisito.</target>
        </trans-unit>
        <trans-unit id="45e9d17f03076a3ad9477b82b07a51d4ce77f838" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s get back to our &lt;a href=&quot;https://codesandbox.io/s/frosty-hermann-bztrp&quot;&gt;first Suspense demo&lt;/a&gt; where there was just one profile. Currently, it fetches the data only once. We&amp;rsquo;ll add a &amp;ldquo;Refresh&amp;rdquo; button to check for server updates.</source>
          <target state="translated">Volvamos a nuestra &lt;a href=&quot;https://codesandbox.io/s/frosty-hermann-bztrp&quot;&gt;primera demostraci&amp;oacute;n de Suspense&lt;/a&gt; donde solo hab&amp;iacute;a un perfil. Actualmente, solo obtiene los datos una vez. Agregaremos un bot&amp;oacute;n &quot;Actualizar&quot; para buscar actualizaciones del servidor.</target>
        </trans-unit>
        <trans-unit id="f2172c9119c229d11c473d5df9aa8d5d8d41b93a" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s go over these in detail.</source>
          <target state="translated">Repasemos estos en detalle.</target>
        </trans-unit>
        <trans-unit id="c35b4f5f51eb24f390b73104414deef66768949e" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s go through each one and figure out which one is state. Ask three questions about each piece of data:</source>
          <target state="translated">Repasemos cada uno y averig&amp;uuml;emos cu&amp;aacute;l es el estado. Haga tres preguntas sobre cada dato:</target>
        </trans-unit>
        <trans-unit id="efb2b5e509c3f39d850f9c0bc68afe5b00ce8cbb" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s now &lt;strong&gt;recap what we learned line by line&lt;/strong&gt; and check our understanding.</source>
          <target state="translated">Ahora &lt;strong&gt;recapitulemos lo que aprendimos l&amp;iacute;nea por l&amp;iacute;nea&lt;/strong&gt; y verifiquemos nuestra comprensi&amp;oacute;n.</target>
        </trans-unit>
        <trans-unit id="2db586e06ea830a0bf5bd7eba403ec7c7c1d5191" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s quickly recap what&amp;rsquo;s going on and the order in which the methods are called:</source>
          <target state="translated">Recapitulemos r&amp;aacute;pidamente lo que est&amp;aacute; pasando y el orden en que se llaman los m&amp;eacute;todos:</target>
        </trans-unit>
        <trans-unit id="b731235df3a08f9cefe099e4a2b6bfde68c1ff0c" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s recap the two examples above and see how Concurrent Mode unifies them. &lt;strong&gt;In Concurrent Mode, React can work on several state updates &lt;em&gt;concurrently&lt;/em&gt;&lt;/strong&gt; &amp;mdash; just like branches let different team members work independently:</source>
          <target state="translated">Recapitulemos los dos ejemplos anteriores y veamos c&amp;oacute;mo los unifica el modo concurrente. &lt;strong&gt;En el modo concurrente, React puede trabajar en varias actualizaciones de estado al &lt;em&gt;mismo tiempo&lt;/em&gt;&lt;/strong&gt; , al igual que las ramas permiten que diferentes miembros del equipo trabajen de forma independiente:</target>
        </trans-unit>
        <trans-unit id="27b3965c34758d4b1e54e8fcc6e8e8d971b07cb2" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s recap what happens in this example:</source>
          <target state="translated">Recapitulemos lo que sucede en este ejemplo:</target>
        </trans-unit>
        <trans-unit id="87dc62cffe0ac1c4c5391c6f0828660b4dd4a79a" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s recap what happens when you edit an input:</source>
          <target state="translated">Recapitulemos lo que sucede cuando editas una entrada:</target>
        </trans-unit>
        <trans-unit id="3eca8e8ef68c829498c7d9e68354b1472e530462" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s revisit &lt;a href=&quot;https://codesandbox.io/s/infallible-feather-xjtbu&quot;&gt;this demo&lt;/a&gt; from the previous page about &lt;a href=&quot;concurrent-mode-suspense&quot;&gt;Suspense for Data Fetching&lt;/a&gt;.</source>
          <target state="translated">Revisemos &lt;a href=&quot;https://codesandbox.io/s/infallible-feather-xjtbu&quot;&gt;esta demostraci&amp;oacute;n&lt;/a&gt; de la p&amp;aacute;gina anterior sobre &lt;a href=&quot;concurrent-mode-suspense&quot;&gt;Suspense para la obtenci&amp;oacute;n de datos&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="31e57dda434c35263f11856e0672be5db88ed7e8" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s rewrite this example again, but using Suspense only:</source>
          <target state="translated">Reescribamos este ejemplo nuevamente, pero usando solo Suspense:</target>
        </trans-unit>
        <trans-unit id="e68a7b21d6c5f27413fdb9eda1dd97e5fd7b5762" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s run through this strategy for our application:</source>
          <target state="translated">Repasemos esta estrategia para nuestra aplicaci&amp;oacute;n:</target>
        </trans-unit>
        <trans-unit id="85ef0e00ecbe33d94c5d49e91e16ab5645be9c88" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s say that fetching the user details is very fast and only takes 300 milliseconds. Currently, we&amp;rsquo;re waiting a whole second because we need both user details and posts to display a consistent profile page. But what if we want to show the details faster?</source>
          <target state="translated">Digamos que obtener los detalles del usuario es muy r&amp;aacute;pido y solo toma 300 milisegundos. Actualmente, estamos esperando un segundo entero porque necesitamos tanto los detalles del usuario como las publicaciones para mostrar una p&amp;aacute;gina de perfil consistente. Pero, &amp;iquest;y si queremos mostrar los detalles m&amp;aacute;s r&amp;aacute;pido?</target>
        </trans-unit>
        <trans-unit id="4991d5eafd8e8e062c0f087c85c40c1ea2d4cc4e" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s say that this is the API we&amp;rsquo;re striving for with our &lt;code&gt;&amp;lt;Chosen&amp;gt;&lt;/code&gt; wrapper React component:</source>
          <target state="translated">Digamos que esta es la API por la que nos esforzamos con nuestro componente React envoltorio &lt;code&gt;&amp;lt;Chosen&amp;gt;&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="2036fedebbcaf2b79f375bedb67a4420e6a7e60a" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s say there is a &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; somewhere in your HTML file:</source>
          <target state="translated">Digamos que hay un &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; en alg&amp;uacute;n lugar de su archivo HTML:</target>
        </trans-unit>
        <trans-unit id="e0dc0ebd0f6824d83a50f1aeaa18d1eaaf7cabfa" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s see how this works step by step.</source>
          <target state="translated">Veamos c&amp;oacute;mo funciona esto paso a paso.</target>
        </trans-unit>
        <trans-unit id="65e8fb3a23f53b18cf26df347e321256ab7c212c" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s see how we could write this component with Hooks.</source>
          <target state="translated">Veamos c&amp;oacute;mo podemos escribir este componente con Hooks.</target>
        </trans-unit>
        <trans-unit id="af6fa6b57cf391318ac0bf024b8e3823314cbcfa" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s see why this matters.</source>
          <target state="translated">Veamos por qu&amp;eacute; esto importa.</target>
        </trans-unit>
        <trans-unit id="b577a0e161bcf81a4e96e3f3a99c76d5a54c4977" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s take a closer look at each of the props:</source>
          <target state="translated">Echemos un vistazo m&amp;aacute;s de cerca a cada uno de los accesorios:</target>
        </trans-unit>
        <trans-unit id="a23b9ea82a3fd528716ce8cd73af2430db7a55e4" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s take another look at all the changes we&amp;rsquo;ve made since the &lt;a href=&quot;https://codesandbox.io/s/infallible-feather-xjtbu&quot;&gt;original example&lt;/a&gt;:</source>
          <target state="translated">Echemos otro vistazo a todos los cambios que hemos realizado desde el &lt;a href=&quot;https://codesandbox.io/s/infallible-feather-xjtbu&quot;&gt;ejemplo original&lt;/a&gt; :</target>
        </trans-unit>
        <trans-unit id="5910b527fe0e81b1ac837051111d1cfb45c48766" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s think about what we want to happen. We want to make sure that whenever the user changes the form, we update the state to reflect the user input. Since components should only update their own state, &lt;code&gt;FilterableProductTable&lt;/code&gt; will pass callbacks to &lt;code&gt;SearchBar&lt;/code&gt; that will fire whenever the state should be updated. We can use the &lt;code&gt;onChange&lt;/code&gt; event on the inputs to be notified of it. The callbacks passed by &lt;code&gt;FilterableProductTable&lt;/code&gt; will call &lt;code&gt;setState()&lt;/code&gt;, and the app will be updated.</source>
          <target state="translated">Pensemos en lo que queremos que suceda. Queremos asegurarnos de que cada vez que el usuario cambia el formulario, actualizamos el estado para reflejar la entrada del usuario. Dado que los componentes solo deben actualizar su propio estado, &lt;code&gt;FilterableProductTable&lt;/code&gt; pasar&amp;aacute; devoluciones de llamada a &lt;code&gt;SearchBar&lt;/code&gt; que se activar&amp;aacute;n siempre que el estado deba actualizarse. Podemos usar el evento &lt;code&gt;onChange&lt;/code&gt; en las entradas para ser notificados. Las devoluciones de llamada aprobadas por &lt;code&gt;FilterableProductTable&lt;/code&gt; llamar&amp;aacute;n &lt;code&gt;setState()&lt;/code&gt; , y la aplicaci&amp;oacute;n se actualizar&amp;aacute;.</target>
        </trans-unit>
        <trans-unit id="1e893f82b5ddbd897be82bf493ce9e81174e5eb4" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s try that:</source>
          <target state="translated">Probemos eso:</target>
        </trans-unit>
        <trans-unit id="b5f77d8b5f6dfc038e27b746c7a414fe97a3630d" translate="yes" xml:space="preserve">
          <source>Libraries can prevent waterfalls by offering a more centralized way to do data fetching. For example, Relay solves this problem by moving the information about the data a component needs to statically analyzable &lt;em&gt;fragments&lt;/em&gt;, which later get composed into a single query.</source>
          <target state="translated">Las bibliotecas pueden evitar las cascadas al ofrecer una forma m&amp;aacute;s centralizada de obtener datos. Por ejemplo, Relay resuelve este problema al mover la informaci&amp;oacute;n sobre los datos que necesita un componente a &lt;em&gt;fragmentos&lt;/em&gt; analizables est&amp;aacute;ticamente , que luego se componen en una sola consulta.</target>
        </trans-unit>
        <trans-unit id="46000d17b247964f6470d045921aa1d6334b0a4b" translate="yes" xml:space="preserve">
          <source>Libraries like &lt;a href=&quot;https://mochajs.org/#running-mocha-in-the-browser&quot;&gt;mocha&lt;/a&gt; work well in real browser environments, and could help for tests that explicitly need it.</source>
          <target state="translated">Las bibliotecas como &lt;a href=&quot;https://mochajs.org/#running-mocha-in-the-browser&quot;&gt;mocha&lt;/a&gt; funcionan bien en entornos de navegador reales y podr&amp;iacute;an ayudar para las pruebas que lo necesitan expl&amp;iacute;citamente.</target>
        </trans-unit>
        <trans-unit id="041313632fc218e701e7df8b55493ecd8a5123e5" translate="yes" xml:space="preserve">
          <source>Libraries that use render props include &lt;a href=&quot;https://reacttraining.com/react-router/web/api/Route/render-func&quot;&gt;React Router&lt;/a&gt;, &lt;a href=&quot;https://github.com/paypal/downshift&quot;&gt;Downshift&lt;/a&gt; and &lt;a href=&quot;https://github.com/jaredpalmer/formik&quot;&gt;Formik&lt;/a&gt;.</source>
          <target state="translated">Las bibliotecas que usan accesorios de renderizaci&amp;oacute;n incluyen &lt;a href=&quot;https://reacttraining.com/react-router/web/api/Route/render-func&quot;&gt;React Router&lt;/a&gt; , &lt;a href=&quot;https://github.com/paypal/downshift&quot;&gt;Downshift&lt;/a&gt; y &lt;a href=&quot;https://github.com/jaredpalmer/formik&quot;&gt;Formik&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="40721cc170a6bfccd149edbfe1dc276de96ccd33" translate="yes" xml:space="preserve">
          <source>Licensed under the Creative Commons Attribution 4.0 International Public License.</source>
          <target state="translated">Licenciado bajo la Creative Commons Attribution 4.0 International Public License.</target>
        </trans-unit>
        <trans-unit id="17ff789df886ac8c1ebe62bba2f20adc6571666a" translate="yes" xml:space="preserve">
          <source>Lifecycle Methods</source>
          <target state="translated">Métodos del ciclo de vida</target>
        </trans-unit>
        <trans-unit id="17ec3a03bfeda0f665ab03b38f3ed1016d195b0e" translate="yes" xml:space="preserve">
          <source>Lifecycle methods are custom functionality that gets executed during the different phases of a component. There are methods available when the component gets created and inserted into the DOM (&lt;a href=&quot;react-component#mounting&quot;&gt;mounting&lt;/a&gt;), when the component updates, and when the component gets unmounted or removed from the DOM.</source>
          <target state="translated">Los m&amp;eacute;todos de ciclo de vida son funciones personalizadas que se ejecutan durante las diferentes fases de un componente. Hay m&amp;eacute;todos disponibles cuando el componente se crea e inserta en el DOM ( &lt;a href=&quot;react-component#mounting&quot;&gt;montaje&lt;/a&gt; ), cuando el componente se actualiza y cuando el componente se desmonta o elimina del DOM.</target>
        </trans-unit>
        <trans-unit id="fe2783625398c73ad59607a3ac0e2c10a16bd848" translate="yes" xml:space="preserve">
          <source>Lifting State Up</source>
          <target state="translated">Estado de levantamiento arriba</target>
        </trans-unit>
        <trans-unit id="60f96af2feedeafd8240d4e2179b169296b1ab38" translate="yes" xml:space="preserve">
          <source>Lifting state involves writing more &amp;ldquo;boilerplate&amp;rdquo; code than two-way binding approaches, but as a benefit, it takes less work to find and isolate bugs. Since any state &amp;ldquo;lives&amp;rdquo; in some component and that component alone can change it, the surface area for bugs is greatly reduced. Additionally, you can implement any custom logic to reject or transform user input.</source>
          <target state="translated">El estado de elevaci&amp;oacute;n implica escribir m&amp;aacute;s c&amp;oacute;digo &quot;repetitivo&quot; que los enfoques de enlace bidireccional, pero como beneficio, se necesita menos trabajo para encontrar y aislar errores. Dado que cualquier estado &quot;vive&quot; en alg&amp;uacute;n componente y ese componente solo puede cambiarlo, el &amp;aacute;rea de superficie de errores se reduce considerablemente. Adem&amp;aacute;s, puede implementar cualquier l&amp;oacute;gica personalizada para rechazar o transformar la entrada del usuario.</target>
        </trans-unit>
        <trans-unit id="6205c7daf26478bf62962f9d33d7bc15dfc34968" translate="yes" xml:space="preserve">
          <source>Like &lt;a href=&quot;#reactchildrenmap&quot;&gt;&lt;code&gt;React.Children.map()&lt;/code&gt;&lt;/a&gt; but does not return an array.</source>
          <target state="translated">Como &lt;a href=&quot;#reactchildrenmap&quot;&gt; &lt;code&gt;React.Children.map()&lt;/code&gt; &lt;/a&gt; pero no devuelve una matriz.</target>
        </trans-unit>
        <trans-unit id="1a7b45e8f4e6108d3cd632f0d9032c3748a2b4eb" translate="yes" xml:space="preserve">
          <source>Like &lt;a href=&quot;#scryrendereddomcomponentswithclass&quot;&gt;&lt;code&gt;scryRenderedDOMComponentsWithClass()&lt;/code&gt;&lt;/a&gt; but expects there to be one result, and returns that one result, or throws exception if there is any other number of matches besides one.</source>
          <target state="translated">Como &lt;a href=&quot;#scryrendereddomcomponentswithclass&quot;&gt; &lt;code&gt;scryRenderedDOMComponentsWithClass()&lt;/code&gt; &lt;/a&gt; pero espera que haya un resultado y devuelve ese resultado, o arroja una excepci&amp;oacute;n si hay cualquier otro n&amp;uacute;mero de coincidencias adem&amp;aacute;s de uno.</target>
        </trans-unit>
        <trans-unit id="fbfeab98f1492d3cbd4fe154e243495eb88fd5bc" translate="yes" xml:space="preserve">
          <source>Like &lt;a href=&quot;#scryrendereddomcomponentswithtag&quot;&gt;&lt;code&gt;scryRenderedDOMComponentsWithTag()&lt;/code&gt;&lt;/a&gt; but expects there to be one result, and returns that one result, or throws exception if there is any other number of matches besides one.</source>
          <target state="translated">Como &lt;a href=&quot;#scryrendereddomcomponentswithtag&quot;&gt; &lt;code&gt;scryRenderedDOMComponentsWithTag()&lt;/code&gt; &lt;/a&gt; pero espera que haya un resultado y devuelve ese resultado, o arroja una excepci&amp;oacute;n si hay cualquier otro n&amp;uacute;mero de coincidencias adem&amp;aacute;s de uno.</target>
        </trans-unit>
        <trans-unit id="f9229dd48cd84c65e22bacddf9669feed15d9307" translate="yes" xml:space="preserve">
          <source>Like Next, the Experimental channel is a prerelease channel that tracks the master branch of the React repository. Unlike Next, Experimental releases include additional features and APIs that are not ready for wider release.</source>
          <target state="translated">Al igual que Next,el canal experimental es un canal de pre-lanzamiento que rastrea la rama maestra del repositorio de React.A diferencia de Next,las versiones de Experimental incluyen características adicionales y API que no están listas para una versión más amplia.</target>
        </trans-unit>
        <trans-unit id="b243b275e73df60e527af74a2a1e22222d9d870a" translate="yes" xml:space="preserve">
          <source>Like any unfamiliar technology, React does have a learning curve. With practice and some patience, you &lt;em&gt;will&lt;/em&gt; get the hang of it.</source>
          <target state="translated">Como cualquier tecnolog&amp;iacute;a desconocida, React tiene una curva de aprendizaje. Con la pr&amp;aacute;ctica y un poco de paciencia, que &lt;em&gt;va a&lt;/em&gt; conseguir la ca&amp;iacute;da de ella.</target>
        </trans-unit>
        <trans-unit id="3b06e3b678326306ca6aedaf4c7b742dbd8cc493" translate="yes" xml:space="preserve">
          <source>Like components, the contract between &lt;code&gt;withSubscription&lt;/code&gt; and the wrapped component is entirely props-based. This makes it easy to swap one HOC for a different one, as long as they provide the same props to the wrapped component. This may be useful if you change data-fetching libraries, for example.</source>
          <target state="translated">Al igual que los componentes, el contrato entre &lt;code&gt;withSubscription&lt;/code&gt; y el componente envuelto est&amp;aacute; completamente basado en accesorios. Esto facilita el intercambio de un HOC por otro diferente, siempre que proporcionen los mismos accesorios al componente envuelto. Esto puede resultar &amp;uacute;til si cambia las bibliotecas de obtenci&amp;oacute;n de datos, por ejemplo.</target>
        </trans-unit>
        <trans-unit id="8756ee6b18f3a0b99d47c3487ab6bf4153dc005f" translate="yes" xml:space="preserve">
          <source>Likewise, &lt;code&gt;&amp;lt;input type=&quot;checkbox&quot;&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;input type=&quot;radio&quot;&amp;gt;&lt;/code&gt; support &lt;code&gt;defaultChecked&lt;/code&gt;, and &lt;code&gt;&amp;lt;select&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;textarea&amp;gt;&lt;/code&gt; supports &lt;code&gt;defaultValue&lt;/code&gt;.</source>
          <target state="translated">Asimismo, &lt;code&gt;&amp;lt;input type=&quot;checkbox&quot;&amp;gt;&lt;/code&gt; y &lt;code&gt;&amp;lt;input type=&quot;radio&quot;&amp;gt;&lt;/code&gt; admiten &lt;code&gt;defaultChecked&lt;/code&gt; , y &lt;code&gt;&amp;lt;select&amp;gt;&lt;/code&gt; y &lt;code&gt;&amp;lt;textarea&amp;gt;&lt;/code&gt; admiten &lt;code&gt;defaultValue&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="64b1d121df3542e14f97acaa2800f9f76542cac7" translate="yes" xml:space="preserve">
          <source>Linting in Flow</source>
          <target state="translated">Pelusa en el flujo</target>
        </trans-unit>
        <trans-unit id="f3b64dc10b36fcc65c0d847eaaa62fd7fe512239" translate="yes" xml:space="preserve">
          <source>Lists and Keys</source>
          <target state="translated">Listas y claves</target>
        </trans-unit>
        <trans-unit id="110bfe58a1735dfc3135bc1d5e016924d60c0744" translate="yes" xml:space="preserve">
          <source>Live Demo</source>
          <target state="translated">Demostración en vivo</target>
        </trans-unit>
        <trans-unit id="5f00bd7dc65bd809a53f2303fb70b92320c36fa6" translate="yes" xml:space="preserve">
          <source>Live-editing CSS and JS in development.</source>
          <target state="translated">Edición en vivo de CSS y JS en desarrollo.</target>
        </trans-unit>
        <trans-unit id="dc841064cbfd066e159686f41aef96834b0e8bf6" translate="yes" xml:space="preserve">
          <source>Looking at the now generated &lt;code&gt;tsconfig.json&lt;/code&gt;, you can see that there are many options you can use to configure the compiler. For a detailed description of all the options, check &lt;a href=&quot;https://www.typescriptlang.org/docs/handbook/tsconfig-json.html&quot;&gt;here&lt;/a&gt;.</source>
          <target state="translated">Si &lt;code&gt;tsconfig.json&lt;/code&gt; generado ahora , puede ver que hay muchas opciones que puede usar para configurar el compilador. Para obtener una descripci&amp;oacute;n detallada de todas las opciones, consulte &lt;a href=&quot;https://www.typescriptlang.org/docs/handbook/tsconfig-json.html&quot;&gt;aqu&amp;iacute;&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="f500ff46d146daea76d615ff5daed4f1aeaa0d00" translate="yes" xml:space="preserve">
          <source>MDN HTML elements reference</source>
          <target state="translated">Referencia de los elementos HTML de MDN</target>
        </trans-unit>
        <trans-unit id="d5beafe9207c5520f3ac09a7866f79c87d68f07b" translate="yes" xml:space="preserve">
          <source>MDN Web Docs takes a look at this and describes how we can build &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Accessibility/Keyboard-navigable_JavaScript_widgets&quot;&gt;keyboard-navigable JavaScript widgets&lt;/a&gt;.</source>
          <target state="translated">MDN Web Docs analiza esto y describe c&amp;oacute;mo podemos crear &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Accessibility/Keyboard-navigable_JavaScript_widgets&quot;&gt;widgets JavaScript navegables por teclado&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="48b1316849f970c5b3e2af20718278c5b7793286" translate="yes" xml:space="preserve">
          <source>Main Concepts</source>
          <target state="translated">Conceptos principales</target>
        </trans-unit>
        <trans-unit id="02ff3711bd667ed46bace9ec4c6ec8190ecebfcc" translate="yes" xml:space="preserve">
          <source>Major releases can also contain new features, and any release can include bug fixes.</source>
          <target state="translated">Las versiones principales también pueden contener nuevas características,y cualquier versión puede incluir correcciones de errores.</target>
        </trans-unit>
        <trans-unit id="f18f93964d446c1e6ba3cd266eb85e86312f1773" translate="yes" xml:space="preserve">
          <source>Make sure you aren&amp;rsquo;t &lt;em&gt;calling the function&lt;/em&gt; when you pass it to the component:</source>
          <target state="translated">Aseg&amp;uacute;rese de no &lt;em&gt;llamar a la funci&amp;oacute;n&lt;/em&gt; cuando la pase al componente:</target>
        </trans-unit>
        <trans-unit id="1908a834f7fac54b702b7157c4e6dc90e16f736a" translate="yes" xml:space="preserve">
          <source>Make sure you&amp;rsquo;re familiar with simpler alternatives:</source>
          <target state="translated">Aseg&amp;uacute;rese de estar familiarizado con alternativas m&amp;aacute;s simples:</target>
        </trans-unit>
        <trans-unit id="90e7115a4c3ac435e928084df77c98aa6a10ab0d" translate="yes" xml:space="preserve">
          <source>Make sure you&amp;rsquo;re running the application in the development mode.</source>
          <target state="translated">Aseg&amp;uacute;rese de ejecutar la aplicaci&amp;oacute;n en modo de desarrollo.</target>
        </trans-unit>
        <trans-unit id="16f51d22d8fb5f4e18c7b9a43a14aa00fb1d1d71" translate="yes" xml:space="preserve">
          <source>Managing focus, text selection, or media playback.</source>
          <target state="translated">Administración del enfoque,la selección de texto o la reproducción de medios.</target>
        </trans-unit>
        <trans-unit id="63ee04fb3d96bb1368dfb5a70eed53b537b4cf07" translate="yes" xml:space="preserve">
          <source>Many React users credit reading &lt;a href=&quot;thinking-in-react&quot;&gt;Thinking in React&lt;/a&gt; as the moment React finally &amp;ldquo;clicked&amp;rdquo; for them. It&amp;rsquo;s probably the oldest React walkthrough but it&amp;rsquo;s still just as relevant.</source>
          <target state="translated">Muchos usuarios de React dan cr&amp;eacute;dito a la lectura de &lt;a href=&quot;thinking-in-react&quot;&gt;Thinking in React&lt;/a&gt; como el momento en que React finalmente hizo clic para ellos. Es probablemente el tutorial de React m&amp;aacute;s antiguo, pero sigue siendo igual de relevante.</target>
        </trans-unit>
        <trans-unit id="25207d84725584b98b20c010ae4e867354803e86" translate="yes" xml:space="preserve">
          <source>Maybe.</source>
          <target state="translated">Maybe.</target>
        </trans-unit>
        <trans-unit id="5279878671cef1bbee173e636b630698108458c0" translate="yes" xml:space="preserve">
          <source>Mechanisms to skip to desired content</source>
          <target state="translated">Mecanismos para saltar al contenido deseado</target>
        </trans-unit>
        <trans-unit id="80ebd3a5b45a9f5adf87a363ab82624e164a1745" translate="yes" xml:space="preserve">
          <source>Media Events</source>
          <target state="translated">Medienereignisse</target>
        </trans-unit>
        <trans-unit id="2fce9fc1bba59eae6ae511090a30e9f9acda79af" translate="yes" xml:space="preserve">
          <source>Migration Step: Blocking Mode</source>
          <target state="translated">Paso de la migración:Modo de bloqueo</target>
        </trans-unit>
        <trans-unit id="c51e9091bf1aa90a7dc06f8b80d1cf4f79106e04" translate="yes" xml:space="preserve">
          <source>Minor releases are the most common type of release.</source>
          <target state="translated">Las liberaciones menores son el tipo más común de liberación.</target>
        </trans-unit>
        <trans-unit id="d634308003ff858f289d2833f637dfc9bee3fc78" translate="yes" xml:space="preserve">
          <source>Mixins</source>
          <target state="translated">Mixins</target>
        </trans-unit>
        <trans-unit id="e609b515d8887ae3c0a2bcd948b76d5eb888dcae" translate="yes" xml:space="preserve">
          <source>Mocking Modules</source>
          <target state="translated">Módulos de burla</target>
        </trans-unit>
        <trans-unit id="5fd5e79fcfd93473fe47f93cc81171186377bc01" translate="yes" xml:space="preserve">
          <source>Mocking a rendering surface</source>
          <target state="translated">Burlarse de una superficie de representación</target>
        </trans-unit>
        <trans-unit id="9f9db431c0932c551ce8ea2f4c40d441d4aa97a6" translate="yes" xml:space="preserve">
          <source>Mocking functions</source>
          <target state="translated">Funciones de burla</target>
        </trans-unit>
        <trans-unit id="7e3ebffe5140fcd669b91ded83765eee7cd79ed7" translate="yes" xml:space="preserve">
          <source>Mocking modules</source>
          <target state="translated">Módulos de burla</target>
        </trans-unit>
        <trans-unit id="dfc6f7ed11adb29245ad928339ee3fe94bf8f96c" translate="yes" xml:space="preserve">
          <source>Mocking timers</source>
          <target state="translated">Burlarse de los temporizadores</target>
        </trans-unit>
        <trans-unit id="c5ab7c68a15742b6ace6a0b59f0802cd56989f9d" translate="yes" xml:space="preserve">
          <source>More Complex Widgets</source>
          <target state="translated">Widgets más complejos</target>
        </trans-unit>
        <trans-unit id="ae1e9c89527fbc96f2921cbe93fbfc11e6a52a9a" translate="yes" xml:space="preserve">
          <source>More Flexible Toolchains</source>
          <target state="translated">Cadenas de herramientas más flexibles</target>
        </trans-unit>
        <trans-unit id="c42df7c665642f754f240ed7f247eeed80d1ceb3" translate="yes" xml:space="preserve">
          <source>More concretely, &lt;strong&gt;a render prop is a function prop that a component uses to know what to render.&lt;/strong&gt;</source>
          <target state="translated">M&amp;aacute;s concretamente, &lt;strong&gt;un objeto de renderizado es un objeto de funci&amp;oacute;n que un componente usa para saber qu&amp;eacute; renderizar.&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="a4184dc3093adbdaf5a60e796e014a24e3eb74b2" translate="yes" xml:space="preserve">
          <source>Most React apps will have their files &amp;ldquo;bundled&amp;rdquo; using tools like &lt;a href=&quot;https://webpack.js.org/&quot;&gt;Webpack&lt;/a&gt;, &lt;a href=&quot;https://rollupjs.org/&quot;&gt;Rollup&lt;/a&gt; or &lt;a href=&quot;http://browserify.org/&quot;&gt;Browserify&lt;/a&gt;. Bundling is the process of following imported files and merging them into a single file: a &amp;ldquo;bundle&amp;rdquo;. This bundle can then be included on a webpage to load an entire app at once.</source>
          <target state="translated">La mayor&amp;iacute;a de las aplicaciones React tendr&amp;aacute;n sus archivos &quot;empaquetados&quot; usando herramientas como &lt;a href=&quot;https://webpack.js.org/&quot;&gt;Webpack&lt;/a&gt; , &lt;a href=&quot;https://rollupjs.org/&quot;&gt;Rollup&lt;/a&gt; o &lt;a href=&quot;http://browserify.org/&quot;&gt;Browserify&lt;/a&gt; . La agrupaci&amp;oacute;n es el proceso de seguir archivos importados y fusionarlos en un solo archivo: una &quot;agrupaci&amp;oacute;n&quot;. Luego, este paquete se puede incluir en una p&amp;aacute;gina web para cargar una aplicaci&amp;oacute;n completa a la vez.</target>
        </trans-unit>
        <trans-unit id="7f5a32a23f908873850adbc01e3bfc083647f135" translate="yes" xml:space="preserve">
          <source>Most of the time, you can use &lt;code&gt;React.PureComponent&lt;/code&gt; instead of writing your own &lt;code&gt;shouldComponentUpdate&lt;/code&gt;. It only does a shallow comparison, so you can&amp;rsquo;t use it if the props or state may have been mutated in a way that a shallow comparison would miss.</source>
          <target state="translated">La mayor&amp;iacute;a de las veces, puede usar &lt;code&gt;React.PureComponent&lt;/code&gt; en lugar de escribir su propio &lt;code&gt;shouldComponentUpdate&lt;/code&gt; . Solo hace una comparaci&amp;oacute;n superficial, por lo que no puede usarlo si los accesorios o el estado pueden haber sido mutados de una manera que una comparaci&amp;oacute;n superficial pasar&amp;iacute;a por alto.</target>
        </trans-unit>
        <trans-unit id="0d6ec3d67d6c3f4388c5225ce97b912bc6998b9b" translate="yes" xml:space="preserve">
          <source>Most people who use React don&amp;rsquo;t use Web Components, but you may want to, especially if you are using third-party UI components that are written using Web Components.</source>
          <target state="translated">La mayor&amp;iacute;a de las personas que usan React no usan componentes web, pero es posible que desee hacerlo, especialmente si usa componentes de IU de terceros que est&amp;aacute;n escritos con componentes web.</target>
        </trans-unit>
        <trans-unit id="d6a06199cc127e571d3588aef63c79108675eabc" translate="yes" xml:space="preserve">
          <source>Motivation</source>
          <target state="translated">Motivation</target>
        </trans-unit>
        <trans-unit id="26ae06ab481b93e012f7ab95465638d5fb60ed34" translate="yes" xml:space="preserve">
          <source>Mounting</source>
          <target state="translated">Mounting</target>
        </trans-unit>
        <trans-unit id="b239ecd4f1b125963a812db57dc3cec60573502b" translate="yes" xml:space="preserve">
          <source>Mouse Events</source>
          <target state="translated">Eventos del ratón</target>
        </trans-unit>
        <trans-unit id="7b20c10dce51324fb107e751c01666324956e394" translate="yes" xml:space="preserve">
          <source>Mouse and pointer events</source>
          <target state="translated">Eventos de ratón y puntero</target>
        </trans-unit>
        <trans-unit id="4d1e7bad76871046ddf523d9fe663dd3a621512b" translate="yes" xml:space="preserve">
          <source>Move the body of the function into the &lt;code&gt;render()&lt;/code&gt; method.</source>
          <target state="translated">Mueva el cuerpo de la funci&amp;oacute;n al m&amp;eacute;todo &lt;code&gt;render()&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="7b29de6bcd589e86e040638485090ea2a9bf182d" translate="yes" xml:space="preserve">
          <source>Multiple &lt;code&gt;Profiler&lt;/code&gt; components can be used to measure different parts of an application:</source>
          <target state="translated">Se pueden usar varios componentes de &lt;code&gt;Profiler&lt;/code&gt; para medir diferentes partes de una aplicaci&amp;oacute;n:</target>
        </trans-unit>
        <trans-unit id="8e23b3461f95ee737c2d746ec92f09e64df8c67e" translate="yes" xml:space="preserve">
          <source>Multiple Renderers</source>
          <target state="translated">Múltiples Renderizadores</target>
        </trans-unit>
        <trans-unit id="b0479fd15fec4ef8ee834648226853be71fdeda8" translate="yes" xml:space="preserve">
          <source>Mutating HOCs are a leaky abstraction&amp;mdash;the consumer must know how they are implemented in order to avoid conflicts with other HOCs.</source>
          <target state="translated">Los HOC mutantes son una abstracci&amp;oacute;n con fugas: el consumidor debe saber c&amp;oacute;mo se implementan para evitar conflictos con otros HOC.</target>
        </trans-unit>
        <trans-unit id="6b4fb500f3d1079177a94f12b723a038f9d11e9c" translate="yes" xml:space="preserve">
          <source>Mutations, subscriptions, timers, logging, and other side effects are not allowed inside the main body of a function component (referred to as React&amp;rsquo;s &lt;em&gt;render phase&lt;/em&gt;). Doing so will lead to confusing bugs and inconsistencies in the UI.</source>
          <target state="translated">No se permiten mutaciones, suscripciones, temporizadores, registros y otros efectos secundarios dentro del cuerpo principal de un componente de funci&amp;oacute;n (lo que se conoce como &lt;em&gt;fase de procesamiento&lt;/em&gt; de React ). Si lo hace, generar&amp;aacute; errores confusos e inconsistencias en la interfaz de usuario.</target>
        </trans-unit>
        <trans-unit id="298fe7648153e9ef9747060691f787af56551508" translate="yes" xml:space="preserve">
          <source>NVDA in Firefox</source>
          <target state="translated">NVDA en Firefox</target>
        </trans-unit>
        <trans-unit id="88f2f30ba49708ae97f8d92b8a8a72e7ddff53df" translate="yes" xml:space="preserve">
          <source>Named Exports</source>
          <target state="translated">Exportaciones nombradas</target>
        </trans-unit>
        <trans-unit id="8223c4ee1ebba2ecb6739e2c07dbe5aef3df91b4" translate="yes" xml:space="preserve">
          <source>Naming Changes from React 15</source>
          <target state="translated">Cambios de nombre de React 15</target>
        </trans-unit>
        <trans-unit id="e41e56840d69bd1bdd31e27707dc3a8b970413df" translate="yes" xml:space="preserve">
          <source>Neither parent nor child components can know if a certain component is stateful or stateless, and they shouldn&amp;rsquo;t care whether it is defined as a function or a class.</source>
          <target state="translated">Ni los componentes padre ni hijo pueden saber si un determinado componente tiene estado o no, y no deber&amp;iacute;a importarles si se define como una funci&amp;oacute;n o una clase.</target>
        </trans-unit>
        <trans-unit id="c44dcd3a4ac0c4c177b3fafe8b75ff34a66cc079" translate="yes" xml:space="preserve">
          <source>Never mutate &lt;code&gt;this.state&lt;/code&gt; directly, as calling &lt;code&gt;setState()&lt;/code&gt; afterwards may replace the mutation you made. Treat &lt;code&gt;this.state&lt;/code&gt; as if it were immutable.</source>
          <target state="translated">Nunca &lt;code&gt;this.state&lt;/code&gt; directamente, ya que llamar a &lt;code&gt;setState()&lt;/code&gt; despu&amp;eacute;s puede reemplazar la mutaci&amp;oacute;n que hiciste. Trate este &lt;code&gt;this.state&lt;/code&gt; como si fuera inmutable.</target>
        </trans-unit>
        <trans-unit id="2cb61bead103f4e57375ed4a4afb6cfadf7e8a73" translate="yes" xml:space="preserve">
          <source>New Behavior for Uncaught Errors</source>
          <target state="translated">Nuevo comportamiento para los errores no atrapados</target>
        </trans-unit>
        <trans-unit id="9840d3214efbf61f44cf5554641966293bd9f3a1" translate="yes" xml:space="preserve">
          <source>Next Channel</source>
          <target state="translated">Próximo Canal</target>
        </trans-unit>
        <trans-unit id="3f170caead65df254d786032a409a6f6d204bca6" translate="yes" xml:space="preserve">
          <source>Next Steps</source>
          <target state="translated">Próximos pasos</target>
        </trans-unit>
        <trans-unit id="0ed8ca892cbf39b577e860e50cdb6e102751578f" translate="yes" xml:space="preserve">
          <source>Next, add three &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; tags to the HTML page right before the closing &lt;code&gt;&amp;lt;/body&amp;gt;&lt;/code&gt; tag:</source>
          <target state="translated">A continuaci&amp;oacute;n, agregue tres etiquetas &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; a la p&amp;aacute;gina HTML justo antes de la etiqueta &lt;code&gt;&amp;lt;/body&amp;gt;&lt;/code&gt; de cierre :</target>
        </trans-unit>
        <trans-unit id="87cb58c13d37c6cc1855c1dd32d1fed18cfeb93f" translate="yes" xml:space="preserve">
          <source>Next, the &lt;code&gt;render()&lt;/code&gt; method is called and the diff algorithm recurses on the previous result and the new result.</source>
          <target state="translated">A continuaci&amp;oacute;n, se llama al m&amp;eacute;todo &lt;code&gt;render()&lt;/code&gt; y el algoritmo diff recurre al resultado anterior y al nuevo resultado.</target>
        </trans-unit>
        <trans-unit id="3e81212e5ac19cfc9b59fe21a631d3753e83f2b5" translate="yes" xml:space="preserve">
          <source>Next, we will create a component called &lt;code&gt;Calculator&lt;/code&gt;. It renders an &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; that lets you enter the temperature, and keeps its value in &lt;code&gt;this.state.temperature&lt;/code&gt;.</source>
          <target state="translated">A continuaci&amp;oacute;n, crearemos un componente llamado &lt;code&gt;Calculator&lt;/code&gt; . Muestra una &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; que le permite ingresar la temperatura y mantiene su valor en &lt;code&gt;this.state.temperature&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="773f24daf1da57217e2f8e8567bf1bc9016af437" translate="yes" xml:space="preserve">
          <source>Next, we will extract a &lt;code&gt;UserInfo&lt;/code&gt; component that renders an &lt;code&gt;Avatar&lt;/code&gt; next to the user&amp;rsquo;s name:</source>
          <target state="translated">A continuaci&amp;oacute;n, &lt;code&gt;UserInfo&lt;/code&gt; un componente UserInfo que muestra un &lt;code&gt;Avatar&lt;/code&gt; junto al nombre del usuario:</target>
        </trans-unit>
        <trans-unit id="72d6961628775828349729a4be218018b6d3a3ac" translate="yes" xml:space="preserve">
          <source>Next, we will implement the lifecycle methods. We need to initialize Chosen with the ref to the &lt;code&gt;&amp;lt;select&amp;gt;&lt;/code&gt; node in &lt;code&gt;componentDidMount&lt;/code&gt;, and tear it down in &lt;code&gt;componentWillUnmount&lt;/code&gt;:</source>
          <target state="translated">A continuaci&amp;oacute;n, implementaremos los m&amp;eacute;todos del ciclo de vida. Necesitamos inicializar Chosen con la referencia al nodo &lt;code&gt;&amp;lt;select&amp;gt;&lt;/code&gt; en &lt;code&gt;componentDidMount&lt;/code&gt; , y derribarlo en &lt;code&gt;componentWillUnmount&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="ce34474eda0627488f7dc85176d87bf118e6e53d" translate="yes" xml:space="preserve">
          <source>Next, we&amp;rsquo;ll add an import for the &lt;code&gt;useTransition&lt;/code&gt; Hook from React:</source>
          <target state="translated">A continuaci&amp;oacute;n, agregaremos una importaci&amp;oacute;n para &lt;code&gt;useTransition&lt;/code&gt; Hook de React:</target>
        </trans-unit>
        <trans-unit id="00d7070daf25a2f645c41cd51b24e95c602ef3cd" translate="yes" xml:space="preserve">
          <source>Next, we&amp;rsquo;ll make the &lt;code&gt;Clock&lt;/code&gt; set up its own timer and update itself every second.</source>
          <target state="translated">A continuaci&amp;oacute;n, haremos que el &lt;code&gt;Clock&lt;/code&gt; configure su propio temporizador y se actualice cada segundo.</target>
        </trans-unit>
        <trans-unit id="83e778abae94d2dfc988da43bf316d54e5851ca7" translate="yes" xml:space="preserve">
          <source>Next, we&amp;rsquo;ll tell the compiler where our source code is and where the output should go.</source>
          <target state="translated">A continuaci&amp;oacute;n, le diremos al compilador d&amp;oacute;nde est&amp;aacute; nuestro c&amp;oacute;digo fuente y d&amp;oacute;nde debe ir la salida.</target>
        </trans-unit>
        <trans-unit id="694fd7bdca2fabcac6a912607368e98378b0b39b" translate="yes" xml:space="preserve">
          <source>Next.js</source>
          <target state="translated">Next.js</target>
        </trans-unit>
        <trans-unit id="aa4786474b1f9c2b27bbf660fd976c2e3f9e0c0b" translate="yes" xml:space="preserve">
          <source>No Breaking Changes</source>
          <target state="translated">No hay cambios de ruptura</target>
        </trans-unit>
        <trans-unit id="ea583f6afe9b6e25e50f115711dd0b56142fcb36" translate="yes" xml:space="preserve">
          <source>No! Check out &lt;a href=&quot;react-without-es6&quot;&gt;&amp;ldquo;React Without ES6&amp;rdquo;&lt;/a&gt; to learn more.</source>
          <target state="translated">&amp;iexcl;No! Consulte &lt;a href=&quot;react-without-es6&quot;&gt;&quot;Reaccionar sin ES6&quot;&lt;/a&gt; para obtener m&amp;aacute;s informaci&amp;oacute;n.</target>
        </trans-unit>
        <trans-unit id="65b196a9e021f5013ed7f97aab941425359e880d" translate="yes" xml:space="preserve">
          <source>No! Check out &lt;a href=&quot;react-without-jsx&quot;&gt;&amp;ldquo;React Without JSX&amp;rdquo;&lt;/a&gt; to learn more.</source>
          <target state="translated">&amp;iexcl;No! Consulte &lt;a href=&quot;react-without-jsx&quot;&gt;&quot;Reaccionar sin JSX&quot;&lt;/a&gt; para obtener m&amp;aacute;s informaci&amp;oacute;n.</target>
        </trans-unit>
        <trans-unit id="9848de506504aee3698fb2303cc082341679f4dc" translate="yes" xml:space="preserve">
          <source>No, they are different. The Shadow DOM is a browser technology designed primarily for scoping variables and CSS in web components. The virtual DOM is a concept implemented by libraries in JavaScript on top of browser APIs.</source>
          <target state="translated">No,son diferentes.El Shadow DOM es una tecnología de navegación diseñada principalmente para la exploración de variables y CSS en componentes web.El DOM virtual es un concepto implementado por bibliotecas en JavaScript sobre las API de los navegadores.</target>
        </trans-unit>
        <trans-unit id="e4ec72f282ae4d51f6663dfafe02a89ddbd53865" translate="yes" xml:space="preserve">
          <source>No. In modern browsers, the raw performance of closures compared to classes doesn&amp;rsquo;t differ significantly except in extreme scenarios.</source>
          <target state="translated">No. En los navegadores modernos, el rendimiento bruto de los cierres en comparaci&amp;oacute;n con las clases no difiere significativamente, excepto en escenarios extremos.</target>
        </trans-unit>
        <trans-unit id="0e489b277ff2e842c4240cf5198329ad064dfd60" translate="yes" xml:space="preserve">
          <source>No. There are &lt;a href=&quot;hooks-intro#gradual-adoption-strategy&quot;&gt;no plans&lt;/a&gt; to remove classes from React &amp;mdash; we all need to keep shipping products and can&amp;rsquo;t afford rewrites. We recommend trying Hooks in new code.</source>
          <target state="translated">No. No &lt;a href=&quot;hooks-intro#gradual-adoption-strategy&quot;&gt;hay planes&lt;/a&gt; para eliminar clases de React; todos necesitamos seguir enviando productos y no podemos permitirnos reescribirlos. Recomendamos probar Hooks en un c&amp;oacute;digo nuevo.</target>
        </trans-unit>
        <trans-unit id="a407ef4de7c3c16900e064cfde1c40d6f88459c3" translate="yes" xml:space="preserve">
          <source>Normally you should try to avoid all uses of &lt;code&gt;forceUpdate()&lt;/code&gt; and only read from &lt;code&gt;this.props&lt;/code&gt; and &lt;code&gt;this.state&lt;/code&gt; in &lt;code&gt;render()&lt;/code&gt;.</source>
          <target state="translated">Normalmente, debe intentar evitar todos los usos de &lt;code&gt;forceUpdate()&lt;/code&gt; y solo leer de &lt;code&gt;this.props&lt;/code&gt; y &lt;code&gt;this.state&lt;/code&gt; en &lt;code&gt;render()&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="99653f5245ac5639a7989484c01146c83245683b" translate="yes" xml:space="preserve">
          <source>Normally you would define a React component as a plain JavaScript class:</source>
          <target state="translated">Normalmente se definiría un componente de React como una clase de JavaScript simple:</target>
        </trans-unit>
        <trans-unit id="183009a95c48cc3c8552b8d193bc55733a9da03e" translate="yes" xml:space="preserve">
          <source>Normally, JavaScript expressions inserted in JSX will evaluate to a string, a React element, or a list of those things. However, &lt;code&gt;props.children&lt;/code&gt; works just like any other prop in that it can pass any sort of data, not just the sorts that React knows how to render. For example, if you have a custom component, you could have it take a callback as &lt;code&gt;props.children&lt;/code&gt;:</source>
          <target state="translated">Normalmente, las expresiones JavaScript insertadas en JSX se evaluar&amp;aacute;n como una cadena, un elemento React o una lista de esas cosas. Sin embargo, &lt;code&gt;props.children&lt;/code&gt; funciona como cualquier otro prop, ya que puede pasar cualquier tipo de datos, no solo los que React sabe c&amp;oacute;mo renderizar. Por ejemplo, si tiene un componente personalizado, podr&amp;iacute;a hacer que &lt;code&gt;props.children&lt;/code&gt; una devoluci&amp;oacute;n de llamada como props.children :</target>
        </trans-unit>
        <trans-unit id="190f214c6271f32c16616efc1edf4a598d1724d4" translate="yes" xml:space="preserve">
          <source>Normally, there is a warning when an element with children is also marked as &lt;code&gt;contentEditable&lt;/code&gt;, because it won&amp;rsquo;t work. This attribute suppresses that warning. Don&amp;rsquo;t use this unless you are building a library like &lt;a href=&quot;https://facebook.github.io/draft-js/&quot;&gt;Draft.js&lt;/a&gt; that manages &lt;code&gt;contentEditable&lt;/code&gt; manually.</source>
          <target state="translated">Normalmente, hay una advertencia cuando un elemento con hijos tambi&amp;eacute;n se marca como &lt;code&gt;contentEditable&lt;/code&gt; , porque no funcionar&amp;aacute;. Este atributo suprime esa advertencia. No use esto a menos que est&amp;eacute; creando una biblioteca como &lt;a href=&quot;https://facebook.github.io/draft-js/&quot;&gt;Draft.js&lt;/a&gt; que administra &lt;code&gt;contentEditable&lt;/code&gt; manualmente.</target>
        </trans-unit>
        <trans-unit id="0cd4b09c96906d68937c9412b6fd82a68a4314a7" translate="yes" xml:space="preserve">
          <source>Normally, when we add features to React, you can start using them immediately. Fragments, Context, and even Hooks are examples of such features. You can use in new code without making any changes to the existing code.</source>
          <target state="translated">Normalmente,cuando añadimos funciones a React,puedes empezar a usarlas inmediatamente.Fragmentos,Contexto,e incluso Ganchos son ejemplos de tales características.Puedes usarlas en un nuevo código sin hacer ningún cambio en el código existente.</target>
        </trans-unit>
        <trans-unit id="6c6b777eeab761f59c9850ff240a2c5f5aa55549" translate="yes" xml:space="preserve">
          <source>Normally, when we add features to React, you can start using them immediately. Fragments, Context, and even Hooks are examples of such features. You can use them in new code without making any changes to the existing code.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a2dec545b1bcbcdd30f45e8128cc1dc979967845" translate="yes" xml:space="preserve">
          <source>Normally, when you return an element from a component&amp;rsquo;s render method, it&amp;rsquo;s mounted into the DOM as a child of the nearest parent node:</source>
          <target state="translated">Normalmente, cuando devuelve un elemento del m&amp;eacute;todo de representaci&amp;oacute;n de un componente, se monta en el DOM como un elemento secundario del nodo principal m&amp;aacute;s cercano:</target>
        </trans-unit>
        <trans-unit id="b36f36a60ec7e988ebd6b0da0589f77cbff203cc" translate="yes" xml:space="preserve">
          <source>Normally, you shouldn&amp;rsquo;t mutate local state in React. However, as an escape hatch, you can use an incrementing counter to force a re-render even if the state has not changed:</source>
          <target state="translated">Normalmente, no debe mutar el estado local en React. Sin embargo, como una trampilla de escape, puede usar un contador incremental para forzar una nueva renderizaci&amp;oacute;n incluso si el estado no ha cambiado:</target>
        </trans-unit>
        <trans-unit id="65436a84c77556cccffc3de4f952f08eb5996b2a" translate="yes" xml:space="preserve">
          <source>Normally, you shouldn&amp;rsquo;t need to think about this. But it matters for HOCs because it means you can&amp;rsquo;t apply a HOC to a component within the render method of a component:</source>
          <target state="translated">Normalmente, no deber&amp;iacute;a tener que pensar en esto. Pero es importante para los HOC porque significa que no puede aplicar un HOC a un componente dentro del m&amp;eacute;todo de renderizado de un componente:</target>
        </trans-unit>
        <trans-unit id="b634d41d383d2c2c85fe24302f5a62774271b079" translate="yes" xml:space="preserve">
          <source>Not all HOCs look the same. Sometimes they accept only a single argument, the wrapped component:</source>
          <target state="translated">No todos los HOC se ven igual.A veces sólo aceptan un único argumento,el componente envuelto:</target>
        </trans-unit>
        <trans-unit id="81b40478626081aff6b6152a5ac2bc60a347ba9e" translate="yes" xml:space="preserve">
          <source>Not all style properties are converted to pixel strings though. Certain ones remain unitless (eg &lt;code&gt;zoom&lt;/code&gt;, &lt;code&gt;order&lt;/code&gt;, &lt;code&gt;flex&lt;/code&gt;). A complete list of unitless properties can be seen &lt;a href=&quot;https://github.com/facebook/react/blob/4131af3e4bf52f3a003537ec95a1655147c81270/src/renderers/dom/shared/CSSProperty.js#L15-L59&quot;&gt;here&lt;/a&gt;.</source>
          <target state="translated">Sin embargo, no todas las propiedades de estilo se convierten en cadenas de p&amp;iacute;xeles. Algunos permanecen sin unidad (por ejemplo , &lt;code&gt;zoom&lt;/code&gt; , &lt;code&gt;order&lt;/code&gt; , &lt;code&gt;flex&lt;/code&gt; i&amp;oacute;n ). Se puede ver una lista completa de propiedades sin unidades &lt;a href=&quot;https://github.com/facebook/react/blob/4131af3e4bf52f3a003537ec95a1655147c81270/src/renderers/dom/shared/CSSProperty.js#L15-L59&quot;&gt;aqu&amp;iacute;&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="a3dce74d24f02b63c13638f91d2e8c790ee44211" translate="yes" xml:space="preserve">
          <source>Not every React release deserves its own blog post, but you can find a detailed changelog for every release in the &lt;a href=&quot;https://github.com/facebook/react/blob/master/CHANGELOG.md&quot;&gt;&lt;code&gt;CHANGELOG.md&lt;/code&gt; file in the React repository&lt;/a&gt;, as well as on the &lt;a href=&quot;https://github.com/facebook/react/releases&quot;&gt;Releases&lt;/a&gt; page.</source>
          <target state="translated">No todas las versiones de React merecen su propia publicaci&amp;oacute;n de blog, pero puede encontrar un registro de cambios detallado para cada versi&amp;oacute;n en el &lt;a href=&quot;https://github.com/facebook/react/blob/master/CHANGELOG.md&quot;&gt;archivo &lt;/a&gt; &lt;code&gt;CHANGELOG.md&lt;/code&gt; en el repositorio de React , as&amp;iacute; como en la p&amp;aacute;gina de &lt;a href=&quot;https://github.com/facebook/react/releases&quot;&gt;versiones&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="2c924e3088204ee77ba681f72be3444357932fca" translate="yes" xml:space="preserve">
          <source>Note</source>
          <target state="translated">Note</target>
        </trans-unit>
        <trans-unit id="b703ebbf1b1cf4f4af246b8831b3304e1ea7b732" translate="yes" xml:space="preserve">
          <source>Note for component library maintainers</source>
          <target state="translated">Nota para los encargados de la biblioteca de componentes</target>
        </trans-unit>
        <trans-unit id="61f07fc00eca63f479177f8f24ebc20765f4ab58" translate="yes" xml:space="preserve">
          <source>Note how &lt;strong&gt;we have to duplicate the code between these two lifecycle methods in class.&lt;/strong&gt;</source>
          <target state="translated">Tenga en cuenta c&amp;oacute;mo &lt;strong&gt;tenemos que duplicar el c&amp;oacute;digo entre estos dos m&amp;eacute;todos de ciclo de vida en clase.&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="136a652f0357162f7faa10211f6de25fc285e258" translate="yes" xml:space="preserve">
          <source>Note how the logic that sets &lt;code&gt;document.title&lt;/code&gt; is split between &lt;code&gt;componentDidMount&lt;/code&gt; and &lt;code&gt;componentDidUpdate&lt;/code&gt;. The subscription logic is also spread between &lt;code&gt;componentDidMount&lt;/code&gt; and &lt;code&gt;componentWillUnmount&lt;/code&gt;. And &lt;code&gt;componentDidMount&lt;/code&gt; contains code for both tasks.</source>
          <target state="translated">Observe c&amp;oacute;mo la l&amp;oacute;gica que establece &lt;code&gt;document.title&lt;/code&gt; se divide entre &lt;code&gt;componentDidMount&lt;/code&gt; y &lt;code&gt;componentDidUpdate&lt;/code&gt; . La l&amp;oacute;gica de suscripci&amp;oacute;n tambi&amp;eacute;n se distribuye entre &lt;code&gt;componentDidMount&lt;/code&gt; y &lt;code&gt;componentWillUnmount&lt;/code&gt; . Y &lt;code&gt;componentDidMount&lt;/code&gt; contiene c&amp;oacute;digo para ambas tareas.</target>
        </trans-unit>
        <trans-unit id="af859993c451cb0b08b7e66c1d591884e0bd7b2b" translate="yes" xml:space="preserve">
          <source>Note how this would work for props, state, or any other calculated value.</source>
          <target state="translated">Fíjese en cómo funcionaría esto para la utilería,el estado o cualquier otro valor calculado.</target>
        </trans-unit>
        <trans-unit id="81f0076b98d34a6e29be0cedd7cf07479dcc0f97" translate="yes" xml:space="preserve">
          <source>Note how we also changed the effect dependencies from &lt;code&gt;[]&lt;/code&gt; to &lt;code&gt;[id]&lt;/code&gt; &amp;mdash; because we want the effect to re-run when the &lt;code&gt;id&lt;/code&gt; changes. Otherwise, we wouldn&amp;rsquo;t refetch new data.</source>
          <target state="translated">Observe c&amp;oacute;mo tambi&amp;eacute;n cambiamos las dependencias del efecto de &lt;code&gt;[]&lt;/code&gt; a &lt;code&gt;[id]&lt;/code&gt; , porque queremos que el efecto se vuelva a ejecutar cuando cambie el &lt;code&gt;id&lt;/code&gt; . De lo contrario, no volver&amp;iacute;amos a obtener datos nuevos.</target>
        </trans-unit>
        <trans-unit id="66e67313f6ff24b0ac9427a27eaa56f7a14b86fb" translate="yes" xml:space="preserve">
          <source>Note how we eliminated the &lt;code&gt;if (...)&lt;/code&gt; &amp;ldquo;is loading&amp;rdquo; checks from our components. This doesn&amp;rsquo;t only remove boilerplate code, but it also simplifies making quick design changes. For example, if we wanted profile details and posts to always &amp;ldquo;pop in&amp;rdquo; together, we could delete the &lt;code&gt;&amp;lt;Suspense&amp;gt;&lt;/code&gt; boundary between them. Or we could make them independent from each other by giving each &lt;em&gt;its own&lt;/em&gt;&lt;code&gt;&amp;lt;Suspense&amp;gt;&lt;/code&gt; boundary. Suspense lets us change the granularity of our loading states and orchestrate their sequencing without invasive changes to our code.</source>
          <target state="translated">Observe c&amp;oacute;mo eliminamos las comprobaciones &lt;code&gt;if (...)&lt;/code&gt; &quot;is loading&quot; de nuestros componentes. Esto no solo elimina el c&amp;oacute;digo repetitivo, sino que tambi&amp;eacute;n simplifica la realizaci&amp;oacute;n de cambios de dise&amp;ntilde;o r&amp;aacute;pidos. Por ejemplo, si quisi&amp;eacute;ramos que los detalles del perfil y las publicaciones siempre &amp;ldquo;aparezcan&amp;rdquo; juntos, podr&amp;iacute;amos eliminar el l&amp;iacute;mite &lt;code&gt;&amp;lt;Suspense&amp;gt;&lt;/code&gt; entre ellos. O podr&amp;iacute;amos hacerlos independientes entre s&amp;iacute; d&amp;aacute;ndoles a cada uno &lt;em&gt;su propio&lt;/em&gt; l&amp;iacute;mite &lt;code&gt;&amp;lt;Suspense&amp;gt;&lt;/code&gt; . Suspense nos permite cambiar la granularidad de nuestros estados de carga y orquestar su secuenciaci&amp;oacute;n sin cambios invasivos en nuestro c&amp;oacute;digo.</target>
        </trans-unit>
        <trans-unit id="a102e3bac932a4b73c9dad4c0a7268f562de444e" translate="yes" xml:space="preserve">
          <source>Note how we pass &lt;code&gt;props&lt;/code&gt; to the base constructor:</source>
          <target state="translated">Observe c&amp;oacute;mo pasamos &lt;code&gt;props&lt;/code&gt; al constructor base:</target>
        </trans-unit>
        <trans-unit id="2582d2e45f28b6c6e7c9a5f4534087c1aa30ef02" translate="yes" xml:space="preserve">
          <source>Note how we save the timer ID right on &lt;code&gt;this&lt;/code&gt; (&lt;code&gt;this.timerID&lt;/code&gt;).</source>
          <target state="translated">Tenga en cuenta c&amp;oacute;mo guardamos la ID del temporizador directamente en &lt;code&gt;this&lt;/code&gt; ( &lt;code&gt;this.timerID&lt;/code&gt; ).</target>
        </trans-unit>
        <trans-unit id="7abe7d49c5110b0b495bee7ab2bbbd92a50f878a" translate="yes" xml:space="preserve">
          <source>Note how we used the ES6 &lt;a href=&quot;https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Operators/Object_initializer#Computed_property_names&quot;&gt;computed property name&lt;/a&gt; syntax to update the state key corresponding to the given input name:</source>
          <target state="translated">Observe c&amp;oacute;mo usamos la sintaxis de &lt;a href=&quot;https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Operators/Object_initializer#Computed_property_names&quot;&gt;nombre de propiedad calculada de&lt;/a&gt; ES6 para actualizar la clave de estado correspondiente al nombre de entrada dado:</target>
        </trans-unit>
        <trans-unit id="b008f8350f4cfc8fc1ac8218af3644148e094014" translate="yes" xml:space="preserve">
          <source>Note how we were able to move the &lt;code&gt;useState&lt;/code&gt; call for the &lt;code&gt;position&lt;/code&gt; state variable and the related effect into a custom Hook without changing their code. If all state was in a single object, extracting it would be more difficult.</source>
          <target state="translated">Observe c&amp;oacute;mo pudimos mover la llamada &lt;code&gt;useState&lt;/code&gt; para la variable de estado de &lt;code&gt;position&lt;/code&gt; y el efecto relacionado a un Hook personalizado sin cambiar su c&amp;oacute;digo. Si todo el estado estuviera en un solo objeto, extraerlo ser&amp;iacute;a m&amp;aacute;s dif&amp;iacute;cil.</target>
        </trans-unit>
        <trans-unit id="4b1a921c73e886405b533b71309555191e0dd804" translate="yes" xml:space="preserve">
          <source>Note that &lt;code&gt;SuspenseList&lt;/code&gt; only operates on the closest &lt;code&gt;Suspense&lt;/code&gt; and &lt;code&gt;SuspenseList&lt;/code&gt; components below it. It does not search for boundaries deeper than one level. However, it is possible to nest multiple &lt;code&gt;SuspenseList&lt;/code&gt; components in each other to build grids.</source>
          <target state="translated">Tenga en cuenta que &lt;code&gt;SuspenseList&lt;/code&gt; solo funciona en los componentes &lt;code&gt;Suspense&lt;/code&gt; y &lt;code&gt;SuspenseList&lt;/code&gt; m&amp;aacute;s cercanos que se encuentran debajo. No busca l&amp;iacute;mites m&amp;aacute;s profundos que un nivel. Sin embargo, es posible anidar varios componentes &lt;code&gt;SuspenseList&lt;/code&gt; entre s&amp;iacute; para crear cuadr&amp;iacute;culas.</target>
        </trans-unit>
        <trans-unit id="5369d72764239c963258ac4860d4222756071b86" translate="yes" xml:space="preserve">
          <source>Note that &lt;strong&gt;error boundaries only catch errors in the components below them in the tree&lt;/strong&gt;. An error boundary can&amp;rsquo;t catch an error within itself. If an error boundary fails trying to render the error message, the error will propagate to the closest error boundary above it. This, too, is similar to how catch {} block works in JavaScript.</source>
          <target state="translated">Tenga en cuenta que &lt;strong&gt;los l&amp;iacute;mites de error solo detectan errores en los componentes debajo de ellos en el &amp;aacute;rbol&lt;/strong&gt; . Un l&amp;iacute;mite de error no puede detectar un error en s&amp;iacute; mismo. Si un l&amp;iacute;mite de error falla al intentar representar el mensaje de error, el error se propagar&amp;aacute; al l&amp;iacute;mite de error m&amp;aacute;s cercano por encima de &amp;eacute;l. Esto tambi&amp;eacute;n es similar a c&amp;oacute;mo funciona el bloque catch {} en JavaScript.</target>
        </trans-unit>
        <trans-unit id="056385a2ed6637b481ae142bf0a46d9f70a318a3" translate="yes" xml:space="preserve">
          <source>Note that &lt;strong&gt;the numbers are relative so components will render faster in production&lt;/strong&gt;. Still, this should help you realize when unrelated UI gets updated by mistake, and how deep and how often your UI updates occur.</source>
          <target state="translated">Tenga en cuenta que &lt;strong&gt;los n&amp;uacute;meros son relativos, por lo que los componentes se procesar&amp;aacute;n m&amp;aacute;s r&amp;aacute;pido en producci&amp;oacute;n&lt;/strong&gt; . A&amp;uacute;n as&amp;iacute;, esto deber&amp;iacute;a ayudarlo a darse cuenta de cu&amp;aacute;ndo se actualiza la interfaz de usuario no relacionada por error, y con qu&amp;eacute; profundidad y con qu&amp;eacute; frecuencia ocurren las actualizaciones de la interfaz de usuario.</target>
        </trans-unit>
        <trans-unit id="89ff4a5e91c66b9d6944b9d99f0d60617bdf219c" translate="yes" xml:space="preserve">
          <source>Note that &lt;strong&gt;to enable Hooks, all React packages need to be 16.8.0 or higher&lt;/strong&gt;. Hooks won&amp;rsquo;t work if you forget to update, for example, React DOM.</source>
          <target state="translated">Tenga en cuenta que &lt;strong&gt;para habilitar Hooks, todos los paquetes de React deben ser 16.8.0 o superior&lt;/strong&gt; . Los hooks no funcionar&amp;aacute;n si olvidas actualizar, por ejemplo, React DOM.</target>
        </trans-unit>
        <trans-unit id="a58c552c3d3190dd2fb91ca8e1639154f214426b" translate="yes" xml:space="preserve">
          <source>Note that React assigns no special meaning to the &lt;code&gt;this.el&lt;/code&gt; field. It only works because we have previously assigned this field from a &lt;code&gt;ref&lt;/code&gt; in the &lt;code&gt;render()&lt;/code&gt; method:</source>
          <target state="translated">Tenga en cuenta que React no asigna ning&amp;uacute;n significado especial al campo &lt;code&gt;this.el&lt;/code&gt; .Solo funciona porque previamente hemos asignado este campo desde una &lt;code&gt;ref&lt;/code&gt; erencia en el m&amp;eacute;todo &lt;code&gt;render()&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="47b82595a068571374ab58a7ca07015bf588a435" translate="yes" xml:space="preserve">
          <source>Note that React may still need to render that specific component again before bailing out. That shouldn&amp;rsquo;t be a concern because React won&amp;rsquo;t unnecessarily go &amp;ldquo;deeper&amp;rdquo; into the tree. If you&amp;rsquo;re doing expensive calculations while rendering, you can optimize them with &lt;code&gt;useMemo&lt;/code&gt;.</source>
          <target state="translated">Tenga en cuenta que React todav&amp;iacute;a puede necesitar renderizar ese componente espec&amp;iacute;fico nuevamente antes de rescatar. Eso no deber&amp;iacute;a ser una preocupaci&amp;oacute;n porque React no ir&amp;aacute; &quot;m&amp;aacute;s profundamente&quot; innecesariamente en el &amp;aacute;rbol. Si est&amp;aacute; haciendo c&amp;aacute;lculos costosos mientras renderiza, puede optimizarlos con &lt;code&gt;useMemo&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="20548fe21065f678631f41f93e7e5b0293cf3638" translate="yes" xml:space="preserve">
          <source>Note that React only had to do DOM mutations for C6, which was inevitable. For C8, it bailed out by comparing the rendered React elements, and for C2&amp;rsquo;s subtree and C7, it didn&amp;rsquo;t even have to compare the elements as we bailed out on &lt;code&gt;shouldComponentUpdate&lt;/code&gt;, and &lt;code&gt;render&lt;/code&gt; was not called.</source>
          <target state="translated">Tenga en cuenta que React solo tuvo que hacer mutaciones DOM para C6, lo cual era inevitable. Para C8, se rescat&amp;oacute; al comparar los elementos de React renderizados, y para el sub&amp;aacute;rbol de C2 y C7, ni siquiera tuvo que comparar los elementos cuando salimos de &lt;code&gt;shouldComponentUpdate&lt;/code&gt; , y no se llam&amp;oacute; a &lt;code&gt;render&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="cd5e25e3c06e2e0a9f837231ef8545ceec20aa21" translate="yes" xml:space="preserve">
          <source>Note that a HOC doesn&amp;rsquo;t modify the input component, nor does it use inheritance to copy its behavior. Rather, a HOC &lt;em&gt;composes&lt;/em&gt; the original component by &lt;em&gt;wrapping&lt;/em&gt; it in a container component. A HOC is a pure function with zero side-effects.</source>
          <target state="translated">Tenga en cuenta que un HOC no modifica el componente de entrada ni utiliza la herencia para copiar su comportamiento. M&amp;aacute;s bien, un HOC &lt;em&gt;compone&lt;/em&gt; el componente original &lt;em&gt;envolvi&amp;eacute;ndolo&lt;/em&gt; en un componente contenedor. Un HOC es una funci&amp;oacute;n pura sin efectos secundarios.</target>
        </trans-unit>
        <trans-unit id="b0e7b7a2953e10e5ee351f37db62af70ce535d29" translate="yes" xml:space="preserve">
          <source>Note that all &lt;code&gt;aria-*&lt;/code&gt; HTML attributes are fully supported in JSX. Whereas most DOM properties and attributes in React are camelCased, these attributes should be hyphen-cased (also known as kebab-case, lisp-case, etc) as they are in plain HTML:</source>
          <target state="translated">Tenga en cuenta que todos los &lt;code&gt;aria-*&lt;/code&gt; HTML son totalmente compatibles con JSX. Mientras que la mayor&amp;iacute;a de las propiedades y atributos DOM en React est&amp;aacute;n basados ​​en camel, estos atributos deben estar entre may&amp;uacute;sculas y min&amp;uacute;sculas (tambi&amp;eacute;n conocidos como kebab-case, lisp-case, etc.) ya que est&amp;aacute;n en HTML simple:</target>
        </trans-unit>
        <trans-unit id="7624acea1a9c060576a9f15d678ecc769a9b76e6" translate="yes" xml:space="preserve">
          <source>Note that if a parent component causes your component to re-render, this method will be called even if props have not changed. Make sure to compare the current and next values if you only want to handle changes.</source>
          <target state="translated">Tenga en cuenta que si un componente padre hace que su componente se vuelva a reproducir,se llamará a este método aunque los accesorios no hayan cambiado.Asegúrate de comparar el valor actual y el siguiente si sólo quieres manejar los cambios.</target>
        </trans-unit>
        <trans-unit id="c974944cb18d8a4b4d98d26cf2d4b75e73525b1b" translate="yes" xml:space="preserve">
          <source>Note that in the above example we &lt;strong&gt;need&lt;/strong&gt; to keep the function in the dependencies list. This ensures that a change in the &lt;code&gt;productId&lt;/code&gt; prop of &lt;code&gt;ProductPage&lt;/code&gt; automatically triggers a refetch in the &lt;code&gt;ProductDetails&lt;/code&gt; component.</source>
          <target state="translated">Tenga en cuenta que en el ejemplo anterior que &lt;strong&gt;necesitamos&lt;/strong&gt; para mantener la funci&amp;oacute;n en la lista de dependencias. Esto garantiza que un cambio en la propiedad &lt;code&gt;productId&lt;/code&gt; de &lt;code&gt;ProductPage&lt;/code&gt; desencadena autom&amp;aacute;ticamente una nueva recuperaci&amp;oacute;n en el componente &lt;code&gt;ProductDetails&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="15064b1b66df67d34d5a232d98bfeba9ea33bea0" translate="yes" xml:space="preserve">
          <source>Note that rendering &lt;code&gt;lazy&lt;/code&gt; components requires that there&amp;rsquo;s a &lt;code&gt;&amp;lt;React.Suspense&amp;gt;&lt;/code&gt; component higher in the rendering tree. This is how you specify a loading indicator.</source>
          <target state="translated">Tenga en cuenta que la representaci&amp;oacute;n de componentes &lt;code&gt;lazy&lt;/code&gt; requiere que haya un componente &lt;code&gt;&amp;lt;React.Suspense&amp;gt;&lt;/code&gt; m&amp;aacute;s arriba en el &amp;aacute;rbol de representaci&amp;oacute;n. As&amp;iacute; es como se especifica un indicador de carga.</target>
        </trans-unit>
        <trans-unit id="aa4c033446ec6662e8a38df6618cdc398a3612d3" translate="yes" xml:space="preserve">
          <source>Note that returning a falsy expression will still cause the element after &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt; to be skipped but will return the falsy expression. In the example below, &lt;code&gt;&amp;lt;div&amp;gt;0&amp;lt;/div&amp;gt;&lt;/code&gt; will be returned by the render method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bca9869270c610c84eca37a4188271b709cfb625" translate="yes" xml:space="preserve">
          <source>Note that styles are not autoprefixed. To support older browsers, you need to supply corresponding style properties:</source>
          <target state="translated">Tengan en cuenta que los estilos no se fijan automáticamente.Para admitir los navegadores más antiguos,debes proporcionar las propiedades de estilo correspondientes:</target>
        </trans-unit>
        <trans-unit id="067b30a981f559502026a96e0fc3941571707473" translate="yes" xml:space="preserve">
          <source>Note that the &lt;code&gt;read()&lt;/code&gt; call in this example doesn&amp;rsquo;t &lt;em&gt;start&lt;/em&gt; fetching. It only tries to read the data that is &lt;strong&gt;already being fetched&lt;/strong&gt;. This difference is crucial to creating fast applications with Suspense. We don&amp;rsquo;t want to delay loading data until a component starts rendering. As a data fetching library author, you can enforce this by making it impossible to get a &lt;code&gt;resource&lt;/code&gt; object without also starting a fetch. Every demo on this page using our &amp;ldquo;fake API&amp;rdquo; enforces this.</source>
          <target state="translated">Tenga en cuenta que la llamada &lt;code&gt;read()&lt;/code&gt; en este ejemplo no &lt;em&gt;comienza a&lt;/em&gt; recuperarse. Solo intenta leer los datos que &lt;strong&gt;ya se est&amp;aacute;n recuperando&lt;/strong&gt; . Esta diferencia es crucial para crear aplicaciones r&amp;aacute;pidas con Suspense. No queremos retrasar la carga de datos hasta que un componente comience a renderizarse. Como autor de una biblioteca de b&amp;uacute;squeda de datos, puede hacer cumplir esto haciendo que sea imposible obtener un objeto de &lt;code&gt;resource&lt;/code&gt; sin iniciar tambi&amp;eacute;n una b&amp;uacute;squeda. Cada demostraci&amp;oacute;n en esta p&amp;aacute;gina que utiliza nuestra &quot;API falsa&quot; refuerza esto.</target>
        </trans-unit>
        <trans-unit id="dd2a771e4fad07ffb446c282efadcd2888cbe8e6" translate="yes" xml:space="preserve">
          <source>Note that the Coconut option is initially selected, because of the &lt;code&gt;selected&lt;/code&gt; attribute. React, instead of using this &lt;code&gt;selected&lt;/code&gt; attribute, uses a &lt;code&gt;value&lt;/code&gt; attribute on the root &lt;code&gt;select&lt;/code&gt; tag. This is more convenient in a controlled component because you only need to update it in one place. For example:</source>
          <target state="translated">Tenga en cuenta que la opci&amp;oacute;n Coco se selecciona inicialmente, debido al atributo &lt;code&gt;selected&lt;/code&gt; . React, en lugar de usar este atributo &lt;code&gt;selected&lt;/code&gt; , usa un atributo de &lt;code&gt;value&lt;/code&gt; en la etiqueta de &lt;code&gt;select&lt;/code&gt; ra&amp;iacute;z . Esto es m&amp;aacute;s conveniente en un componente controlado porque solo necesita actualizarlo en un lugar. Por ejemplo:</target>
        </trans-unit>
        <trans-unit id="d5999130fbdfde82a85986a35fe0795798389c68" translate="yes" xml:space="preserve">
          <source>Note that the above example is demonstrating regular JavaScript behavior and doesn&amp;rsquo;t use error boundaries.</source>
          <target state="translated">Tenga en cuenta que el ejemplo anterior demuestra el comportamiento regular de JavaScript y no utiliza l&amp;iacute;mites de error.</target>
        </trans-unit>
        <trans-unit id="61cff9e21e25a4670560f3ba3575f47b51bc9f0f" translate="yes" xml:space="preserve">
          <source>Note that the button doesn&amp;rsquo;t care &lt;em&gt;what&lt;/em&gt; state we&amp;rsquo;re updating. It&amp;rsquo;s wrapping &lt;em&gt;any&lt;/em&gt; state updates that happen during its &lt;code&gt;onClick&lt;/code&gt; handler into a transition. Now that our &lt;code&gt;&amp;lt;Button&amp;gt;&lt;/code&gt; takes care of setting up the transition, the &lt;code&gt;&amp;lt;ProfilePage&amp;gt;&lt;/code&gt; component doesn&amp;rsquo;t need to set up its own:</source>
          <target state="translated">Tenga en cuenta que al bot&amp;oacute;n no le importa &lt;em&gt;qu&amp;eacute;&lt;/em&gt; estado estamos actualizando. Envuelve &lt;em&gt;cualquier&lt;/em&gt; actualizaci&amp;oacute;n de estado que ocurra durante su controlador &lt;code&gt;onClick&lt;/code&gt; en una transici&amp;oacute;n. Ahora que nuestro &lt;code&gt;&amp;lt;Button&amp;gt;&lt;/code&gt; se encarga de configurar la transici&amp;oacute;n, el componente &lt;code&gt;&amp;lt;ProfilePage&amp;gt;&lt;/code&gt; no necesita configurar el suyo:</target>
        </trans-unit>
        <trans-unit id="23b6882327e1c317b3769b724af427c65f26d7de" translate="yes" xml:space="preserve">
          <source>Note that this approach won&amp;rsquo;t work in a loop because Hook calls &lt;a href=&quot;hooks-rules&quot;&gt;can&amp;rsquo;t&lt;/a&gt; be placed inside loops. But you can extract a separate component for the list item, and call &lt;code&gt;useMemo&lt;/code&gt; there.</source>
          <target state="translated">Tenga en cuenta que este enfoque no funcionar&amp;aacute; en un bucle porque las llamadas de Hook &lt;a href=&quot;hooks-rules&quot;&gt;no se&lt;/a&gt; pueden colocar dentro de los bucles. Pero puede extraer un componente separado para el elemento de la lista y llamar a &lt;code&gt;useMemo&lt;/code&gt; all&amp;iacute;.</target>
        </trans-unit>
        <trans-unit id="d3bb49079ffd95590ce09e3d67d7befe22d9e2ab" translate="yes" xml:space="preserve">
          <source>Note that this example is not meant to be exhaustive with regards to working with Backbone, but it should give you an idea for how to approach this in a generic way:</source>
          <target state="translated">Tenga en cuenta que este ejemplo no pretende ser exhaustivo en lo que respecta al trabajo con Backbone,pero debería darle una idea de cómo enfocar esto de forma genérica:</target>
        </trans-unit>
        <trans-unit id="c41ae3592459d184c8cfe8a8c9a865858f7f5834" translate="yes" xml:space="preserve">
          <source>Note that this method is fired on &lt;em&gt;every&lt;/em&gt; render, regardless of the cause. This is in contrast to &lt;code&gt;UNSAFE_componentWillReceiveProps&lt;/code&gt;, which only fires when the parent causes a re-render and not as a result of a local &lt;code&gt;setState&lt;/code&gt;.</source>
          <target state="translated">Tenga en cuenta que este m&amp;eacute;todo se activa en &lt;em&gt;cada&lt;/em&gt; render, independientemente de la causa. Esto contrasta con &lt;code&gt;UNSAFE_componentWillReceiveProps&lt;/code&gt; , que solo se activa cuando el padre provoca una repetici&amp;oacute;n y no como resultado de un &lt;code&gt;setState&lt;/code&gt; local .</target>
        </trans-unit>
        <trans-unit id="293936fb383c744f2f9630271a7efb4989979625" translate="yes" xml:space="preserve">
          <source>Note that this only works if &lt;code&gt;CustomTextInput&lt;/code&gt; is declared as a class:</source>
          <target state="translated">Tenga en cuenta que esto solo funciona si &lt;code&gt;CustomTextInput&lt;/code&gt; se declara como una clase:</target>
        </trans-unit>
        <trans-unit id="d6de8667681c14632896b78b9f59b00902732f9a" translate="yes" xml:space="preserve">
          <source>Note that we defined both &lt;code&gt;componentDidMount&lt;/code&gt; and &lt;code&gt;componentWillUnmount&lt;/code&gt;&lt;a href=&quot;react-component#the-component-lifecycle&quot;&gt;lifecycle methods&lt;/a&gt;. Many jQuery plugins attach event listeners to the DOM so it&amp;rsquo;s important to detach them in &lt;code&gt;componentWillUnmount&lt;/code&gt;. If the plugin does not provide a method for cleanup, you will probably have to provide your own, remembering to remove any event listeners the plugin registered to prevent memory leaks.</source>
          <target state="translated">Tenga en cuenta que definimos los &lt;a href=&quot;react-component#the-component-lifecycle&quot;&gt;m&amp;eacute;todos de ciclo de vida &lt;/a&gt; &lt;code&gt;componentDidMount&lt;/code&gt; y &lt;code&gt;componentWillUnmount&lt;/code&gt; . Muchos complementos de jQuery adjuntan detectores de eventos al DOM, por lo que es importante separarlos en &lt;code&gt;componentWillUnmount&lt;/code&gt; . Si el complemento no proporciona un m&amp;eacute;todo de limpieza, probablemente tendr&amp;aacute; que proporcionar el suyo, recordando eliminar cualquier detector de eventos que el complemento haya registrado para evitar p&amp;eacute;rdidas de memoria.</target>
        </trans-unit>
        <trans-unit id="0e7bd878200c78bd50ee3d98b684ecb341171678" translate="yes" xml:space="preserve">
          <source>Note that we pass &lt;code&gt;[]&lt;/code&gt; as a dependency array to &lt;code&gt;useCallback&lt;/code&gt;. This ensures that our ref callback doesn&amp;rsquo;t change between the re-renders, and so React won&amp;rsquo;t call it unnecessarily.</source>
          <target state="translated">Tenga en cuenta que pasamos &lt;code&gt;[]&lt;/code&gt; como una matriz de dependencia para &lt;code&gt;useCallback&lt;/code&gt; . Esto asegura que nuestra devoluci&amp;oacute;n de llamada de referencia no cambie entre las re-renderizaciones, por lo que React no la llamar&amp;aacute; innecesariamente.</target>
        </trans-unit>
        <trans-unit id="f3da62d793b8e6e725893da6d74020b9b0c1d282" translate="yes" xml:space="preserve">
          <source>Note that you can still choose whether to pass the application &lt;em&gt;state&lt;/em&gt; down as props (more explicit) or as context (more convenient for very deep updates). If you use context to pass down the state too, use two different context types &amp;mdash; the &lt;code&gt;dispatch&lt;/code&gt; context never changes, so components that read it don&amp;rsquo;t need to rerender unless they also need the application state.</source>
          <target state="translated">Tenga en cuenta que a&amp;uacute;n puede elegir si pasar el &lt;em&gt;estado de&lt;/em&gt; la aplicaci&amp;oacute;n como accesorios (m&amp;aacute;s expl&amp;iacute;cito) o como contexto (m&amp;aacute;s conveniente para actualizaciones muy profundas). Si usa el contexto para transmitir el estado tambi&amp;eacute;n, use dos tipos de contexto diferentes: el contexto de &lt;code&gt;dispatch&lt;/code&gt; nunca cambia, por lo que los componentes que lo leen no necesitan volver a procesarse a menos que tambi&amp;eacute;n necesiten el estado de la aplicaci&amp;oacute;n.</target>
        </trans-unit>
        <trans-unit id="5438c62ee57f24fd4d0711d668e74ee64c6002c5" translate="yes" xml:space="preserve">
          <source>Note that you cannot call &lt;code&gt;this.setState()&lt;/code&gt; here; nor should you do anything else (e.g. dispatch a Redux action) that would trigger an update to a React component before &lt;code&gt;UNSAFE_componentWillUpdate()&lt;/code&gt; returns.</source>
          <target state="translated">Tenga en cuenta que no puede llamar a &lt;code&gt;this.setState()&lt;/code&gt; aqu&amp;iacute;; ni debe hacer nada m&amp;aacute;s (por ejemplo, enviar una acci&amp;oacute;n de Redux) que desencadenar&amp;iacute;a una actualizaci&amp;oacute;n de un componente React antes de que &lt;code&gt;UNSAFE_componentWillUpdate()&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="9bcdc977b06fb5be1faf45e2966b7781759aee94" translate="yes" xml:space="preserve">
          <source>Note there are other statically typed languages that compile to JavaScript and are thus React compatible. For example, &lt;a href=&quot;https://fable.io/&quot;&gt;F#/Fable&lt;/a&gt; with &lt;a href=&quot;https://elmish.github.io/react&quot;&gt;elmish-react&lt;/a&gt;. Check out their respective sites for more information, and feel free to add more statically typed languages that work with React to this page!</source>
          <target state="translated">Tenga en cuenta que hay otros lenguajes de tipado est&amp;aacute;tico que se compilan en JavaScript y, por lo tanto, son compatibles con React. Por ejemplo, &lt;a href=&quot;https://fable.io/&quot;&gt;F # / Fable&lt;/a&gt; con &lt;a href=&quot;https://elmish.github.io/react&quot;&gt;elmish-react&lt;/a&gt; . Consulte sus respectivos sitios para obtener m&amp;aacute;s informaci&amp;oacute;n y si&amp;eacute;ntase libre de agregar m&amp;aacute;s idiomas escritos est&amp;aacute;ticamente que funcionan con React en esta p&amp;aacute;gina.</target>
        </trans-unit>
        <trans-unit id="04e9b4dc0a682c919374be737463c7b46bbd33ef" translate="yes" xml:space="preserve">
          <source>Note we passed a configuration object to &lt;code&gt;useTransition&lt;/code&gt;. Its &lt;code&gt;timeoutMs&lt;/code&gt; property specifies &lt;strong&gt;how long we&amp;rsquo;re willing to wait for the transition to finish&lt;/strong&gt;. By passing &lt;code&gt;{timeoutMs: 3000}&lt;/code&gt;, we say &amp;ldquo;If the next profile takes more than 3 seconds to load, show the big spinner &amp;mdash; but before that timeout it&amp;rsquo;s okay to keep showing the previous screen&amp;rdquo;.</source>
          <target state="translated">Tenga en cuenta que pasamos un objeto de configuraci&amp;oacute;n a &lt;code&gt;useTransition&lt;/code&gt; . Su propiedad &lt;code&gt;timeoutMs&lt;/code&gt; especifica &lt;strong&gt;cu&amp;aacute;nto tiempo estamos dispuestos a esperar para que finalice la transici&amp;oacute;n&lt;/strong&gt; . Al pasar &lt;code&gt;{timeoutMs: 3000}&lt;/code&gt; , decimos &amp;ldquo;Si el siguiente perfil tarda m&amp;aacute;s de 3 segundos en cargarse, muestre la ruleta grande, pero antes de ese tiempo de espera est&amp;aacute; bien seguir mostrando la pantalla anterior&amp;rdquo;.</target>
        </trans-unit>
        <trans-unit id="83423c198b6099edba08f185f940042d5dba3b79" translate="yes" xml:space="preserve">
          <source>Note:</source>
          <target state="translated">Note:</target>
        </trans-unit>
        <trans-unit id="3d0510089477e2c3202ca52ed149fc2903a72e31" translate="yes" xml:space="preserve">
          <source>Notice how &lt;code&gt;componentDidMount&lt;/code&gt; and &lt;code&gt;componentWillUnmount&lt;/code&gt; need to mirror each other. Lifecycle methods force us to split this logic even though conceptually code in both of them is related to the same effect.</source>
          <target state="translated">Observe c&amp;oacute;mo &lt;code&gt;componentDidMount&lt;/code&gt; y &lt;code&gt;componentWillUnmount&lt;/code&gt; necesitan reflejarse entre s&amp;iacute;. Los m&amp;eacute;todos del ciclo de vida nos obligan a dividir esta l&amp;oacute;gica a pesar de que el c&amp;oacute;digo conceptual en ambos est&amp;aacute; relacionado con el mismo efecto.</target>
        </trans-unit>
        <trans-unit id="87bf57ef650f61bb6153e8d1ccb5545722813ea9" translate="yes" xml:space="preserve">
          <source>Notice how we wrapped &lt;code&gt;&amp;lt;select&amp;gt;&lt;/code&gt; in an extra &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt;. This is necessary because Chosen will append another DOM element right after the &lt;code&gt;&amp;lt;select&amp;gt;&lt;/code&gt; node we passed to it. However, as far as React is concerned, &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; always only has a single child. This is how we ensure that React updates won&amp;rsquo;t conflict with the extra DOM node appended by Chosen. It is important that if you modify the DOM outside of React flow, you must ensure React doesn&amp;rsquo;t have a reason to touch those DOM nodes.</source>
          <target state="translated">Observe c&amp;oacute;mo envolvimos &lt;code&gt;&amp;lt;select&amp;gt;&lt;/code&gt; en un &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; adicional . Esto es necesario porque Chosen agregar&amp;aacute; otro elemento DOM justo despu&amp;eacute;s del nodo &lt;code&gt;&amp;lt;select&amp;gt;&lt;/code&gt; que le pasamos. Sin embargo, en lo que respecta a React, &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; siempre solo tiene un hijo. As&amp;iacute; es como nos aseguramos de que las actualizaciones de React no entren en conflicto con el nodo DOM adicional agregado por Chosen. Es importante que si modifica el DOM fuera del flujo de React, debe asegurarse de que React no tenga una raz&amp;oacute;n para tocar esos nodos DOM.</target>
        </trans-unit>
        <trans-unit id="f4059c045862b5d2fc7b27115084fa8f80b3c32e" translate="yes" xml:space="preserve">
          <source>Notice how when you type into the input, the &lt;code&gt;&amp;lt;Translation&amp;gt;&lt;/code&gt; component suspends, and we see the &lt;code&gt;&amp;lt;p&amp;gt;Loading...&amp;lt;/p&amp;gt;&lt;/code&gt; fallback until we get fresh results. This is not ideal. It would be better if we could see the &lt;em&gt;previous&lt;/em&gt; translation for a bit while we&amp;rsquo;re fetching the next one.</source>
          <target state="translated">Observe c&amp;oacute;mo cuando escribe en la entrada, el componente &lt;code&gt;&amp;lt;Translation&amp;gt;&lt;/code&gt; se suspende y vemos el &lt;code&gt;&amp;lt;p&amp;gt;Loading...&amp;lt;/p&amp;gt;&lt;/code&gt; hasta que obtengamos resultados nuevos. Esto no es ideal. Ser&amp;iacute;a mejor si pudi&amp;eacute;ramos ver la traducci&amp;oacute;n &lt;em&gt;anterior&lt;/em&gt; por un momento mientras buscamos la siguiente.</target>
        </trans-unit>
        <trans-unit id="e41a0eb10d6b00e47a2107e31a6fe602367acaa9" translate="yes" xml:space="preserve">
          <source>Notice that &lt;code&gt;this.state.value&lt;/code&gt; is initialized in the constructor, so that the text area starts off with some text in it.</source>
          <target state="translated">Observe que &lt;code&gt;this.state.value&lt;/code&gt; se inicializa en el constructor, por lo que el &amp;aacute;rea de texto comienza con algo de texto en ella.</target>
        </trans-unit>
        <trans-unit id="c48101c52bcbacc9cc53778eb2bf3edb99dccc8c" translate="yes" xml:space="preserve">
          <source>Notifying the user of errors</source>
          <target state="translated">Notificación al usuario de los errores</target>
        </trans-unit>
        <trans-unit id="c404d41fa7846adb181731741a44bd59410207d8" translate="yes" xml:space="preserve">
          <source>Now React knows that the element with key &lt;code&gt;'2014'&lt;/code&gt; is the new one, and the elements with the keys &lt;code&gt;'2015'&lt;/code&gt; and &lt;code&gt;'2016'&lt;/code&gt; have just moved.</source>
          <target state="translated">Ahora React sabe que el elemento con la clave &lt;code&gt;'2014'&lt;/code&gt; es el nuevo, y los elementos con las claves &lt;code&gt;'2015'&lt;/code&gt; y &lt;code&gt;'2016'&lt;/code&gt; se acaban de mover.</target>
        </trans-unit>
        <trans-unit id="a823d334901d2890efe56f8ef0b2a72eeceac120" translate="yes" xml:space="preserve">
          <source>Now consider the version of this component that uses Hooks:</source>
          <target state="translated">Ahora considera la versión de este componente que utiliza ganchos:</target>
        </trans-unit>
        <trans-unit id="8183f56b4559e51b16e97bdcb7a1243573a8bd1d" translate="yes" xml:space="preserve">
          <source>Now let&amp;rsquo;s say that our chat application also has a contact list, and we want to render names of online users with a green color. We could copy and paste similar logic above into our &lt;code&gt;FriendListItem&lt;/code&gt; component but it wouldn&amp;rsquo;t be ideal:</source>
          <target state="translated">Ahora digamos que nuestra aplicaci&amp;oacute;n de chat tambi&amp;eacute;n tiene una lista de contactos y queremos representar los nombres de los usuarios en l&amp;iacute;nea con un color verde. Podr&amp;iacute;amos copiar y pegar una l&amp;oacute;gica similar en nuestro componente &lt;code&gt;FriendListItem&lt;/code&gt; , pero no ser&amp;iacute;a ideal:</target>
        </trans-unit>
        <trans-unit id="925974ac4f4434d5e39f807c69d3762bcfdfc9e3" translate="yes" xml:space="preserve">
          <source>Now let&amp;rsquo;s say we want to write some logic that changes &lt;code&gt;left&lt;/code&gt; and &lt;code&gt;top&lt;/code&gt; when the user moves their mouse. Note how we have to merge these fields into the previous state object manually:</source>
          <target state="translated">Ahora digamos que queremos escribir alguna l&amp;oacute;gica que cambie hacia la &lt;code&gt;left&lt;/code&gt; y hacia &lt;code&gt;top&lt;/code&gt; cuando el usuario mueve el mouse. Observe c&amp;oacute;mo tenemos que fusionar estos campos en el objeto de estado anterior manualmente:</target>
        </trans-unit>
        <trans-unit id="6e4daa5c187fd27dc1d98689209a36560e567ee5" translate="yes" xml:space="preserve">
          <source>Now let&amp;rsquo;s see how we can do the same with the &lt;code&gt;useEffect&lt;/code&gt; Hook.</source>
          <target state="translated">Ahora veamos c&amp;oacute;mo podemos hacer lo mismo con &lt;code&gt;useEffect&lt;/code&gt; Hook.</target>
        </trans-unit>
        <trans-unit id="3f0c36b18073d97246d1ae6fdd941d78bd84aa02" translate="yes" xml:space="preserve">
          <source>Now let&amp;rsquo;s see how we can use our custom Hook.</source>
          <target state="translated">Ahora veamos c&amp;oacute;mo podemos usar nuestro Hook personalizado.</target>
        </trans-unit>
        <trans-unit id="4ff24b1ed7e4290e5868df543207689b4f4b743a" translate="yes" xml:space="preserve">
          <source>Now let&amp;rsquo;s turn to the &lt;code&gt;Calculator&lt;/code&gt; component.</source>
          <target state="translated">Pasemos ahora al componente &lt;code&gt;Calculator&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="844b2d5f9df9b2eb6e433eb964cbaab4370de078" translate="yes" xml:space="preserve">
          <source>Now that we know more about effects, these lines should make sense:</source>
          <target state="translated">Ahora que sabemos más sobre los efectos,estas líneas deberían tener sentido:</target>
        </trans-unit>
        <trans-unit id="9b0970d0ace9e4ccf49f5bb229273af5230ad8a4" translate="yes" xml:space="preserve">
          <source>Now that we know what the &lt;code&gt;useState&lt;/code&gt; Hook does, our example should make more sense:</source>
          <target state="translated">Ahora que sabemos lo que hace &lt;code&gt;useState&lt;/code&gt; Hook, nuestro ejemplo deber&amp;iacute;a tener m&amp;aacute;s sentido:</target>
        </trans-unit>
        <trans-unit id="8a8788b2f194e8402d2a42fc02e179198bb60d53" translate="yes" xml:space="preserve">
          <source>Now that we&amp;rsquo;ve extracted this logic to a &lt;code&gt;useFriendStatus&lt;/code&gt; hook, we can &lt;em&gt;just use it:&lt;/em&gt;</source>
          <target state="translated">Ahora que hemos extra&amp;iacute;do esta l&amp;oacute;gica a un gancho &lt;code&gt;useFriendStatus&lt;/code&gt; , podemos &lt;em&gt;usarla:&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="0ad30db96883edc2b1c98cb238c68962796e03d5" translate="yes" xml:space="preserve">
          <source>Now that we&amp;rsquo;ve identified the components in our mock, let&amp;rsquo;s arrange them into a hierarchy. Components that appear within another component in the mock should appear as a child in the hierarchy:</source>
          <target state="translated">Ahora que hemos identificado los componentes en nuestro simulacro, organic&amp;eacute;moslos en una jerarqu&amp;iacute;a. Los componentes que aparecen dentro de otro componente en el simulacro deber&amp;iacute;an aparecer como un ni&amp;ntilde;o en la jerarqu&amp;iacute;a:</target>
        </trans-unit>
        <trans-unit id="5fb8a97af0340e1169bfb8c33de464ee1f6338c0" translate="yes" xml:space="preserve">
          <source>Now that you have your component hierarchy, it&amp;rsquo;s time to implement your app. The easiest way is to build a version that takes your data model and renders the UI but has no interactivity. It&amp;rsquo;s best to decouple these processes because building a static version requires a lot of typing and no thinking, and adding interactivity requires a lot of thinking and not a lot of typing. We&amp;rsquo;ll see why.</source>
          <target state="translated">Ahora que tiene su jerarqu&amp;iacute;a de componentes, es hora de implementar su aplicaci&amp;oacute;n. La forma m&amp;aacute;s sencilla es crear una versi&amp;oacute;n que tome su modelo de datos y represente la interfaz de usuario, pero que no tenga interactividad. Es mejor desacoplar estos procesos porque la construcci&amp;oacute;n de una versi&amp;oacute;n est&amp;aacute;tica requiere mucho tecleo y no pensar, y agregar interactividad requiere mucho pensamiento y no mucho tecleo. Veremos por qu&amp;eacute;.</target>
        </trans-unit>
        <trans-unit id="48ab459928ce6ebd5489677a0e93ec9929ee70a3" translate="yes" xml:space="preserve">
          <source>Now the &lt;code&gt;&amp;lt;Mouse&amp;gt;&lt;/code&gt; component encapsulates all behavior associated with listening for &lt;code&gt;mousemove&lt;/code&gt; events and storing the (x, y) position of the cursor, but it&amp;rsquo;s not yet truly reusable.</source>
          <target state="translated">Ahora, el componente &lt;code&gt;&amp;lt;Mouse&amp;gt;&lt;/code&gt; encapsula todo el comportamiento asociado con la escucha de eventos &lt;code&gt;mousemove&lt;/code&gt; y el almacenamiento de la posici&amp;oacute;n (x, y) del cursor, pero a&amp;uacute;n no es realmente reutilizable.</target>
        </trans-unit>
        <trans-unit id="8290d2b0cd763be0c1cff68b5b8f6a2022e9e2e1" translate="yes" xml:space="preserve">
          <source>Now the clock ticks every second.</source>
          <target state="translated">Ahora el reloj hace tictac cada segundo.</target>
        </trans-unit>
        <trans-unit id="445b4c42d80c61abe526efe3707111a846581295" translate="yes" xml:space="preserve">
          <source>Now the question is: How can we reuse this behavior in another component? In other words, if another component needs to know about the cursor position, can we encapsulate that behavior so that we can easily share it with that component?</source>
          <target state="translated">Ahora la pregunta es:¿Cómo podemos reutilizar este comportamiento en otro componente? En otras palabras,si otro componente necesita saber la posición del cursor,¿podemos encapsular ese comportamiento para poder compartirlo fácilmente con ese componente?</target>
        </trans-unit>
        <trans-unit id="1024ae8f19583bac76078bc0bd6540db20a2ec73" translate="yes" xml:space="preserve">
          <source>Now the subscription will only be recreated when &lt;code&gt;props.source&lt;/code&gt; changes.</source>
          <target state="translated">Ahora la suscripci&amp;oacute;n solo se volver&amp;aacute; a crear cuando cambie &lt;code&gt;props.source&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="54d03c366729e2d81c1e64f36f6b07756f996b09" translate="yes" xml:space="preserve">
          <source>Now typing has a lot less stutter &amp;mdash; although we pay for this by showing the results with a lag.</source>
          <target state="translated">Ahora escribir tiene mucho menos tartamudeo, aunque pagamos por esto mostrando los resultados con un retraso.</target>
        </trans-unit>
        <trans-unit id="dcc5b4606d16f6fd9f79e37463ac776146ee84f2" translate="yes" xml:space="preserve">
          <source>Now we can use it from both components:</source>
          <target state="translated">Ahora podemos usarlo de ambos componentes:</target>
        </trans-unit>
        <trans-unit id="1eb51804f6cb1c7460d60f186cd080f9b9a70bf5" translate="yes" xml:space="preserve">
          <source>Now we could use it in our component, and let the reducer drive its state management:</source>
          <target state="translated">Ahora podríamos usarlo en nuestro componente,y dejar que el reductor dirija su gestión estatal:</target>
        </trans-unit>
        <trans-unit id="4fe952474b56ef3cb4e5c17adcf45971d3250970" translate="yes" xml:space="preserve">
          <source>Now you can use JSX in any &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; tag by adding &lt;code&gt;type=&quot;text/babel&quot;&lt;/code&gt; attribute to it. Here is &lt;a href=&quot;https://raw.githubusercontent.com/reactjs/reactjs.org/master/static/html/single-file-example.html&quot;&gt;an example HTML file with JSX&lt;/a&gt; that you can download and play with.</source>
          <target state="translated">Ahora puede utilizar JSX en cualquier etiqueta &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; a&amp;ntilde;adi&amp;eacute;ndole el atributo &lt;code&gt;type=&quot;text/babel&quot;&lt;/code&gt; . Aqu&amp;iacute; hay &lt;a href=&quot;https://raw.githubusercontent.com/reactjs/reactjs.org/master/static/html/single-file-example.html&quot;&gt;un archivo HTML de ejemplo con JSX&lt;/a&gt; que puede descargar y jugar.</target>
        </trans-unit>
        <trans-unit id="8ad6204428141993d5d0c80a5aa20caa71f41e56" translate="yes" xml:space="preserve">
          <source>Now you know what Concurrent Mode is all about!</source>
          <target state="translated">¡Ahora ya sabes de qué se trata el Modo Concurrente!</target>
        </trans-unit>
        <trans-unit id="a0921c0c4a9937c51a84cd82cfb41ca7387c23e1" translate="yes" xml:space="preserve">
          <source>Now you&amp;rsquo;re all set! We recommend to check out the following resources to learn more about Flow:</source>
          <target state="translated">&amp;iexcl;Ahora est&amp;aacute;s listo! Recomendamos consultar los siguientes recursos para obtener m&amp;aacute;s informaci&amp;oacute;n sobre Flow:</target>
        </trans-unit>
        <trans-unit id="8a49e11731f8fb793b2ecb4306067e3e3083ea67" translate="yes" xml:space="preserve">
          <source>Now, add &lt;code&gt;flow&lt;/code&gt; to the &lt;code&gt;&quot;scripts&quot;&lt;/code&gt; section of your &lt;code&gt;package.json&lt;/code&gt; to be able to use this from the terminal:</source>
          <target state="translated">Ahora, agregue &lt;code&gt;flow&lt;/code&gt; a la secci&amp;oacute;n &lt;code&gt;&quot;scripts&quot;&lt;/code&gt; de su &lt;code&gt;package.json&lt;/code&gt; para poder usar esto desde la terminal:</target>
        </trans-unit>
        <trans-unit id="c8086f34489af74ae217e4df5aa3be615d57812e" translate="yes" xml:space="preserve">
          <source>Now, instead of effectively cloning the &lt;code&gt;&amp;lt;Mouse&amp;gt;&lt;/code&gt; component and hard-coding something else in its &lt;code&gt;render&lt;/code&gt; method to solve for a specific use case, we provide a &lt;code&gt;render&lt;/code&gt; prop that &lt;code&gt;&amp;lt;Mouse&amp;gt;&lt;/code&gt; can use to dynamically determine what it renders.</source>
          <target state="translated">Ahora, en lugar de clonar eficazmente el componente &lt;code&gt;&amp;lt;Mouse&amp;gt;&lt;/code&gt; y codificar algo m&amp;aacute;s en su m&amp;eacute;todo de &lt;code&gt;render&lt;/code&gt; izado para resolver un caso de uso espec&amp;iacute;fico, proporcionamos un accesorio de &lt;code&gt;render&lt;/code&gt; izado que &lt;code&gt;&amp;lt;Mouse&amp;gt;&lt;/code&gt; puede usar para determinar din&amp;aacute;micamente lo que renderiza.</target>
        </trans-unit>
        <trans-unit id="2f73936a74018552ceacc64aa326e02fb6cf0a5b" translate="yes" xml:space="preserve">
          <source>Now, no matter which input you edit, &lt;code&gt;this.state.temperature&lt;/code&gt; and &lt;code&gt;this.state.scale&lt;/code&gt; in the &lt;code&gt;Calculator&lt;/code&gt; get updated. One of the inputs gets the value as is, so any user input is preserved, and the other input value is always recalculated based on it.</source>
          <target state="translated">Ahora, sin importar qu&amp;eacute; entrada edite, &lt;code&gt;this.state.temperature&lt;/code&gt; y &lt;code&gt;this.state.scale&lt;/code&gt; en la &lt;code&gt;Calculator&lt;/code&gt; se actualizan. Una de las entradas obtiene el valor tal cual, por lo que cualquier entrada del usuario se conserva y el otro valor de entrada siempre se recalcula en funci&amp;oacute;n de ella.</target>
        </trans-unit>
        <trans-unit id="301eea1e7c8206fb45c541acd3e524bf4a699d97" translate="yes" xml:space="preserve">
          <source>Now, the &lt;code&gt;setInterval&lt;/code&gt; callback executes once a second, but each time the inner call to &lt;code&gt;setCount&lt;/code&gt; can use an up-to-date value for &lt;code&gt;count&lt;/code&gt; (called &lt;code&gt;c&lt;/code&gt; in the callback here.)</source>
          <target state="translated">Ahora, la &lt;code&gt;setInterval&lt;/code&gt; llamada setInterval se ejecuta una vez por segundo, pero cada vez que la llamada interna a &lt;code&gt;setCount&lt;/code&gt; puede usar un valor actualizado para el &lt;code&gt;count&lt;/code&gt; (llamado &lt;code&gt;c&lt;/code&gt; en la devoluci&amp;oacute;n de llamada aqu&amp;iacute;).</target>
        </trans-unit>
        <trans-unit id="9e8130cbd3e360ebc980c05ecf896eace815977b" translate="yes" xml:space="preserve">
          <source>Now, this feels a lot better! When we click Next, it gets disabled because clicking it multiple times doesn&amp;rsquo;t make sense. And the new &amp;ldquo;Loading&amp;hellip;&amp;rdquo; tells the user that the app didn&amp;rsquo;t freeze.</source>
          <target state="translated">&amp;iexcl;Ahora, esto se siente mucho mejor! Cuando hacemos clic en Siguiente, se desactiva porque hacer clic en &amp;eacute;l varias veces no tiene sentido. Y el nuevo &quot;Cargando ...&quot; le dice al usuario que la aplicaci&amp;oacute;n no se ha congelado.</target>
        </trans-unit>
        <trans-unit id="b0f788b2b09588e404d0447b39bd5c7c761184f0" translate="yes" xml:space="preserve">
          <source>Now, when the &lt;code&gt;TemperatureInput&lt;/code&gt; wants to update its temperature, it calls &lt;code&gt;this.props.onTemperatureChange&lt;/code&gt;:</source>
          <target state="translated">Ahora, cuando &lt;code&gt;TemperatureInput&lt;/code&gt; quiere actualizar su temperatura, llama a &lt;code&gt;this.props.onTemperatureChange&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="7e7446f170a663a7c78e802aab1ac1a7cb9040dd" translate="yes" xml:space="preserve">
          <source>OK, so we&amp;rsquo;ve identified what the minimal set of app state is. Next, we need to identify which component mutates, or &lt;em&gt;owns&lt;/em&gt;, this state.</source>
          <target state="translated">Bien, hemos identificado cu&amp;aacute;l es el conjunto m&amp;iacute;nimo de estado de la aplicaci&amp;oacute;n. A continuaci&amp;oacute;n, debemos identificar qu&amp;eacute; componente muta, o &lt;em&gt;posee&lt;/em&gt; , este estado.</target>
        </trans-unit>
        <trans-unit id="585a7418eed63f477ec8bd53089988cc7e4a12c6" translate="yes" xml:space="preserve">
          <source>Of course, application UIs are dynamic and change over time. In the &lt;a href=&quot;state-and-lifecycle&quot;&gt;next section&lt;/a&gt;, we will introduce a new concept of &amp;ldquo;state&amp;rdquo;. State allows React components to change their output over time in response to user actions, network responses, and anything else, without violating this rule.</source>
          <target state="translated">Por supuesto, las IU de las aplicaciones son din&amp;aacute;micas y cambian con el tiempo. En la &lt;a href=&quot;state-and-lifecycle&quot;&gt;siguiente secci&amp;oacute;n&lt;/a&gt; , presentaremos un nuevo concepto de &quot;estado&quot;. State permite que los componentes de React cambien su salida a lo largo del tiempo en respuesta a las acciones del usuario, las respuestas de la red y cualquier otra cosa, sin violar esta regla.</target>
        </trans-unit>
        <trans-unit id="3132cb0b79eb69074dc3e62af86660efd5589630" translate="yes" xml:space="preserve">
          <source>Of course, this is possible to fix in this particular example. We could remove the &lt;code&gt;Promise.all()&lt;/code&gt; call, and wait for both Promises separately. However, this approach gets progressively more difficult as the complexity of our data and component tree grows. It&amp;rsquo;s hard to write reliable components when arbitrary parts of the data tree may be missing or stale. So fetching all data for the new screen and &lt;em&gt;then&lt;/em&gt; rendering is often a more practical option.</source>
          <target state="translated">Por supuesto, esto es posible solucionarlo en este ejemplo en particular. Podr&amp;iacute;amos eliminar la llamada a &lt;code&gt;Promise.all()&lt;/code&gt; y esperar ambas Promesas por separado. Sin embargo, este enfoque se vuelve cada vez m&amp;aacute;s dif&amp;iacute;cil a medida que crece la complejidad de nuestro &amp;aacute;rbol de datos y componentes. Es dif&amp;iacute;cil escribir componentes confiables cuando partes arbitrarias del &amp;aacute;rbol de datos pueden faltar o estar obsoletas. Por lo tanto, obtener todos los datos para la nueva pantalla y &lt;em&gt;luego&lt;/em&gt; renderizarlos es a menudo una opci&amp;oacute;n m&amp;aacute;s pr&amp;aacute;ctica.</target>
        </trans-unit>
        <trans-unit id="a4a2711c46e947081b52625c85320ddf4541e19b" translate="yes" xml:space="preserve">
          <source>Of course, two versions of the tree rendering &lt;em&gt;at the same time&lt;/em&gt; is an illusion, just like the idea that all programs run on your computer at the same time is an illusion. An operating system switches between different applications very fast. Similarly, React can switch between the version of the tree you see on the screen and the version that it&amp;rsquo;s &amp;ldquo;preparing&amp;rdquo; to show next.</source>
          <target state="translated">Por supuesto, dos versiones de la representaci&amp;oacute;n del &amp;aacute;rbol &lt;em&gt;al mismo tiempo&lt;/em&gt; es una ilusi&amp;oacute;n, al igual que la idea de que todos los programas se ejecuten en su computadora al mismo tiempo es una ilusi&amp;oacute;n. Un sistema operativo cambia entre diferentes aplicaciones muy r&amp;aacute;pido. De manera similar, React puede cambiar entre la versi&amp;oacute;n del &amp;aacute;rbol que ves en la pantalla y la versi&amp;oacute;n que se est&amp;aacute; &amp;ldquo;preparando&amp;rdquo; para mostrar a continuaci&amp;oacute;n.</target>
        </trans-unit>
        <trans-unit id="4d6825e0a32d926930eddf56f84b2970fa58fb08" translate="yes" xml:space="preserve">
          <source>Of the many options, we&amp;rsquo;ll look at &lt;code&gt;rootDir&lt;/code&gt; and &lt;code&gt;outDir&lt;/code&gt;. In its true fashion, the compiler will take in typescript files and generate javascript files. However we don&amp;rsquo;t want to get confused with our source files and the generated output.</source>
          <target state="translated">De las muchas opciones, veremos &lt;code&gt;rootDir&lt;/code&gt; y &lt;code&gt;outDir&lt;/code&gt; . En su verdadera forma, el compilador tomar&amp;aacute; archivos mecanografiados y generar&amp;aacute; archivos javascript. Sin embargo, no queremos confundirnos con nuestros archivos fuente y la salida generada.</target>
        </trans-unit>
        <trans-unit id="dd20357e3644302dde97b2ad62dcb95ce1daedfd" translate="yes" xml:space="preserve">
          <source>Often, effects create resources that need to be cleaned up before the component leaves the screen, such as a subscription or timer ID. To do this, the function passed to &lt;code&gt;useEffect&lt;/code&gt; may return a clean-up function. For example, to create a subscription:</source>
          <target state="translated">A menudo, los efectos crean recursos que deben limpiarse antes de que el componente abandone la pantalla, como una suscripci&amp;oacute;n o un identificador de temporizador. Para hacer esto, la funci&amp;oacute;n pasada a &lt;code&gt;useEffect&lt;/code&gt; puede devolver una funci&amp;oacute;n de limpieza. Por ejemplo, para crear una suscripci&amp;oacute;n:</target>
        </trans-unit>
        <trans-unit id="2eb2d11868ae24a92e334900c6ad022490e23cc8" translate="yes" xml:space="preserve">
          <source>Often, render props and higher-order components render only a single child. We think Hooks are a simpler way to serve this use case. There is still a place for both patterns (for example, a virtual scroller component might have a &lt;code&gt;renderItem&lt;/code&gt; prop, or a visual container component might have its own DOM structure). But in most cases, Hooks will be sufficient and can help reduce nesting in your tree.</source>
          <target state="translated">A menudo, los accesorios de procesamiento y los componentes de orden superior solo representan un elemento secundario. Creemos que los Hooks son una forma m&amp;aacute;s sencilla de atender este caso de uso. Todav&amp;iacute;a hay un lugar para ambos patrones (por ejemplo, un componente de desplazamiento virtual puede tener un objeto &lt;code&gt;renderItem&lt;/code&gt; , o un componente contenedor visual puede tener su propia estructura DOM). Pero en la mayor&amp;iacute;a de los casos, los Hooks ser&amp;aacute;n suficientes y pueden ayudar a reducir la anidaci&amp;oacute;n en su &amp;aacute;rbol.</target>
        </trans-unit>
        <trans-unit id="e238d62aafad5d06561c0c307e341349b7b49d0a" translate="yes" xml:space="preserve">
          <source>Often, several components need to reflect the same changing data. We recommend lifting the shared state up to their closest common ancestor. Let&amp;rsquo;s see how this works in action.</source>
          <target state="translated">A menudo, varios componentes deben reflejar los mismos datos cambiantes. Recomendamos elevar el estado compartido a su antepasado com&amp;uacute;n m&amp;aacute;s cercano. Veamos c&amp;oacute;mo funciona esto en acci&amp;oacute;n.</target>
        </trans-unit>
        <trans-unit id="2a50db4683ea185c93852b3e2a65a8212128837a" translate="yes" xml:space="preserve">
          <source>On Node.js, runners like Jest &lt;a href=&quot;https://jestjs.io/docs/en/manual-mocks&quot;&gt;support mocking modules&lt;/a&gt;. You could also use libraries like &lt;a href=&quot;https://www.npmjs.com/package/mock-require&quot;&gt;&lt;code&gt;mock-require&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">En Node.js, los corredores como Jest &lt;a href=&quot;https://jestjs.io/docs/en/manual-mocks&quot;&gt;admiten m&amp;oacute;dulos de burla&lt;/a&gt; . Tambi&amp;eacute;n puede utilizar bibliotecas como &lt;a href=&quot;https://www.npmjs.com/package/mock-require&quot;&gt; &lt;code&gt;mock-require&lt;/code&gt; &lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="0710c7b04d45a11f0492b116459fb4abc9eedba3" translate="yes" xml:space="preserve">
          <source>On mount, add a change listener to &lt;code&gt;DataSource&lt;/code&gt;.</source>
          <target state="translated">En el montaje, agregue un detector de cambios a &lt;code&gt;DataSource&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="82c91bbc6306c5630c222b9dcf2187c2dc2ae099" translate="yes" xml:space="preserve">
          <source>On the next pages, you&amp;rsquo;ll learn more details about specific topics:</source>
          <target state="translated">En las p&amp;aacute;ginas siguientes, obtendr&amp;aacute; m&amp;aacute;s detalles sobre temas espec&amp;iacute;ficos:</target>
        </trans-unit>
        <trans-unit id="9d62e4f730620eef1f3de85e2d6c3131a9b4dfea" translate="yes" xml:space="preserve">
          <source>On this page we&amp;rsquo;ve learned about one of the Hooks provided by React, called &lt;code&gt;useState&lt;/code&gt;. We&amp;rsquo;re also sometimes going to refer to it as the &amp;ldquo;State Hook&amp;rdquo;. It lets us add local state to React function components &amp;mdash; which we did for the first time ever!</source>
          <target state="translated">En esta p&amp;aacute;gina hemos aprendido sobre uno de los Hooks proporcionados por React, llamado &lt;code&gt;useState&lt;/code&gt; . A veces tambi&amp;eacute;n nos referiremos a &amp;eacute;l como el &quot;gancho estatal&quot;. Nos permite agregar el estado local a los componentes de la funci&amp;oacute;n React, &amp;iexcl;lo cual hicimos por primera vez!</target>
        </trans-unit>
        <trans-unit id="0c2cd7a4d0e65ff37df2b337e658e2df9075d64a" translate="yes" xml:space="preserve">
          <source>On this page, we don&amp;rsquo;t assume knowledge of Relay, so we won&amp;rsquo;t be using it for this example. Instead, we&amp;rsquo;ll write something similar manually by combining our data fetching methods:</source>
          <target state="translated">En esta p&amp;aacute;gina, no asumimos conocimiento de Relay, por lo que no lo usaremos para este ejemplo. En su lugar, escribiremos algo similar manualmente combinando nuestros m&amp;eacute;todos de obtenci&amp;oacute;n de datos:</target>
        </trans-unit>
        <trans-unit id="fb59abe30c04acfe966b6c95ce457faf73c79f0f" translate="yes" xml:space="preserve">
          <source>On this page, we will primarily use function components. However, these testing strategies don&amp;rsquo;t depend on implementation details, and work just as well for class components too.</source>
          <target state="translated">En esta p&amp;aacute;gina, utilizaremos principalmente componentes de funci&amp;oacute;n. Sin embargo, estas estrategias de prueba no dependen de los detalles de implementaci&amp;oacute;n y funcionan igual de bien para los componentes de la clase.</target>
        </trans-unit>
        <trans-unit id="4d9354d5334212c4fa7c510917e4a36aa72a9176" translate="yes" xml:space="preserve">
          <source>On unmount, remove the change listener.</source>
          <target state="translated">Al desmontarlo,quite el escuchador de cambio.</target>
        </trans-unit>
        <trans-unit id="06dfbc05cf68b1af9ef7e3eb0c666319a41ff504" translate="yes" xml:space="preserve">
          <source>Once you&amp;rsquo;re comfortable with the &lt;a href=&quot;index&quot;&gt;main concepts&lt;/a&gt; and played with React a little bit, you might be interested in more advanced topics. This section will introduce you to the powerful, but less commonly used React features like &lt;a href=&quot;context&quot;&gt;context&lt;/a&gt; and &lt;a href=&quot;refs-and-the-dom&quot;&gt;refs&lt;/a&gt;.</source>
          <target state="translated">Una vez que se sienta c&amp;oacute;modo con los &lt;a href=&quot;index&quot;&gt;conceptos principales&lt;/a&gt; y haya jugado un poco con React, es posible que le interesen temas m&amp;aacute;s avanzados. Esta secci&amp;oacute;n le presentar&amp;aacute; las funciones de React potentes, pero menos utilizadas, como el &lt;a href=&quot;context&quot;&gt;contexto&lt;/a&gt; y las &lt;a href=&quot;refs-and-the-dom&quot;&gt;referencias&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="26db98adea48b68a169ca2de0e843e2459313e88" translate="yes" xml:space="preserve">
          <source>One caveat is that some &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/Falsy&quot;&gt;&amp;ldquo;falsy&amp;rdquo; values&lt;/a&gt;, such as the &lt;code&gt;0&lt;/code&gt; number, are still rendered by React. For example, this code will not behave as you might expect because &lt;code&gt;0&lt;/code&gt; will be printed when &lt;code&gt;props.messages&lt;/code&gt; is an empty array:</source>
          <target state="translated">Una advertencia es que React todav&amp;iacute;a representa algunos &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/Falsy&quot;&gt;valores &quot;falsos&quot;&lt;/a&gt; , como el n&amp;uacute;mero &lt;code&gt;0&lt;/code&gt; . Por ejemplo, este c&amp;oacute;digo no se comportar&amp;aacute; como cabr&amp;iacute;a esperar porque se imprimir&amp;aacute; &lt;code&gt;0&lt;/code&gt; cuando &lt;code&gt;props.messages&lt;/code&gt; sea ​​una matriz vac&amp;iacute;a:</target>
        </trans-unit>
        <trans-unit id="92d29f167487a4fbbd927e887cecef3d212e829f" translate="yes" xml:space="preserve">
          <source>One common confusion is that Web Components use &amp;ldquo;class&amp;rdquo; instead of &amp;ldquo;className&amp;rdquo;.</source>
          <target state="translated">Una confusi&amp;oacute;n com&amp;uacute;n es que los componentes web usan &quot;clase&quot; en lugar de &quot;nombre de clase&quot;.</target>
        </trans-unit>
        <trans-unit id="d84c92ddc298e496ea4adc3bf91cf1363cd458a5" translate="yes" xml:space="preserve">
          <source>One common use case is a component wanting to update itself on a time interval. It&amp;rsquo;s easy to use &lt;code&gt;setInterval()&lt;/code&gt;, but it&amp;rsquo;s important to cancel your interval when you don&amp;rsquo;t need it anymore to save memory. React provides &lt;a href=&quot;react-component#the-component-lifecycle&quot;&gt;lifecycle methods&lt;/a&gt; that let you know when a component is about to be created or destroyed. Let&amp;rsquo;s create a simple mixin that uses these methods to provide an easy &lt;code&gt;setInterval()&lt;/code&gt; function that will automatically get cleaned up when your component is destroyed.</source>
          <target state="translated">Un caso de uso com&amp;uacute;n es un componente que desea actualizarse en un intervalo de tiempo. Es f&amp;aacute;cil de usar &lt;code&gt;setInterval()&lt;/code&gt; , pero es importante cancelar su intervalo cuando ya no lo necesite para ahorrar memoria. React proporciona &lt;a href=&quot;react-component#the-component-lifecycle&quot;&gt;m&amp;eacute;todos de ciclo de vida&lt;/a&gt; que le permiten saber cu&amp;aacute;ndo un componente est&amp;aacute; a punto de crearse o destruirse. &lt;code&gt;setInterval()&lt;/code&gt; un mixin simple que utilice estos m&amp;eacute;todos para proporcionar una funci&amp;oacute;n setInterval () f&amp;aacute;cil que se limpiar&amp;aacute; autom&amp;aacute;ticamente cuando se destruya su componente.</target>
        </trans-unit>
        <trans-unit id="91fca79071097d684ed292ccb8f4ce6e063eb595" translate="yes" xml:space="preserve">
          <source>One common way to structure projects is locate CSS, JS, and tests together inside folders grouped by feature or route.</source>
          <target state="translated">Una forma común de estructurar los proyectos es localizar el CSS,JS,y las pruebas juntas dentro de carpetas agrupadas por característica o ruta.</target>
        </trans-unit>
        <trans-unit id="eecfa7e254d87da6b100134e8a7e164ed183eec7" translate="yes" xml:space="preserve">
          <source>One common way to structure projects is to locate CSS, JS, and tests together inside folders grouped by feature or route.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3294950b9d1114486b86edac639fe247ba41031e" translate="yes" xml:space="preserve">
          <source>One interesting thing to note about render props is that you can implement most &lt;a href=&quot;higher-order-components&quot;&gt;higher-order components&lt;/a&gt; (HOC) using a regular component with a render prop. For example, if you would prefer to have a &lt;code&gt;withMouse&lt;/code&gt; HOC instead of a &lt;code&gt;&amp;lt;Mouse&amp;gt;&lt;/code&gt; component, you could easily create one using a regular &lt;code&gt;&amp;lt;Mouse&amp;gt;&lt;/code&gt; with a render prop:</source>
          <target state="translated">Una cosa interesante a tener en cuenta sobre los accesorios de renderizado es que puede implementar la mayor&amp;iacute;a de &lt;a href=&quot;higher-order-components&quot;&gt;los componentes de orden superior&lt;/a&gt; (HOC) utilizando un componente regular con un accesorio de renderizado. Por ejemplo, si prefieres tener un &lt;code&gt;withMouse&lt;/code&gt; HOC en lugar de un componente &lt;code&gt;&amp;lt;Mouse&amp;gt;&lt;/code&gt; , puedes crear f&amp;aacute;cilmente uno usando un &lt;code&gt;&amp;lt;Mouse&amp;gt;&lt;/code&gt; normal con un accesorio de renderizado:</target>
        </trans-unit>
        <trans-unit id="89bb7b23e1cfb796ff7ccb3c5631654a6d5d4429" translate="yes" xml:space="preserve">
          <source>One might confuse elements with a more widely known concept of &amp;ldquo;components&amp;rdquo;. We will introduce components in the &lt;a href=&quot;components-and-props&quot;&gt;next section&lt;/a&gt;. Elements are what components are &amp;ldquo;made of&amp;rdquo;, and we encourage you to read this section before jumping ahead.</source>
          <target state="translated">Uno podr&amp;iacute;a confundir elementos con un concepto m&amp;aacute;s conocido de &quot;componentes&quot;. Introduciremos componentes en la &lt;a href=&quot;components-and-props&quot;&gt;siguiente secci&amp;oacute;n&lt;/a&gt; . Los elementos son de lo que est&amp;aacute;n &quot;hechos&quot; los componentes, y le recomendamos que lea esta secci&amp;oacute;n antes de seguir adelante.</target>
        </trans-unit>
        <trans-unit id="7588b233fbe6695c0a65bfe0ca7544cc4e57a4ac" translate="yes" xml:space="preserve">
          <source>One might think that this is a problem specific to &lt;code&gt;useEffect&lt;/code&gt; or Hooks. Maybe if we port this code to classes or use convenient syntax like &lt;code&gt;async&lt;/code&gt; / &lt;code&gt;await&lt;/code&gt;, it will solve the problem?</source>
          <target state="translated">Se podr&amp;iacute;a pensar que este es un problema espec&amp;iacute;fico de &lt;code&gt;useEffect&lt;/code&gt; o Hooks. &amp;iquest;Quiz&amp;aacute;s si trasladamos este c&amp;oacute;digo a clases o usamos una sintaxis conveniente como &lt;code&gt;async&lt;/code&gt; / &lt;code&gt;await&lt;/code&gt; , resolver&amp;aacute; el problema?</target>
        </trans-unit>
        <trans-unit id="c0f348c5b745ab1da4b86972cf956fe2d397217e" translate="yes" xml:space="preserve">
          <source>One of the many great parts of React is how it makes you think about apps as you build them. In this document, we&amp;rsquo;ll walk you through the thought process of building a searchable product data table using React.</source>
          <target state="translated">Una de las muchas partes excelentes de React es c&amp;oacute;mo te hace pensar en las aplicaciones mientras las construyes. En este documento, lo guiaremos a trav&amp;eacute;s del proceso de pensamiento de crear una tabla de datos de productos con capacidad de b&amp;uacute;squeda usando React.</target>
        </trans-unit>
        <trans-unit id="7ac2374e3473c6ff21b1231d986c7761ceb4980d" translate="yes" xml:space="preserve">
          <source>One of the problems we outlined in the &lt;a href=&quot;hooks-intro#complex-components-become-hard-to-understand&quot;&gt;Motivation&lt;/a&gt; for Hooks is that class lifecycle methods often contain unrelated logic, but related logic gets broken up into several methods. Here is a component that combines the counter and the friend status indicator logic from the previous examples:</source>
          <target state="translated">Uno de los problemas que describimos en &lt;a href=&quot;hooks-intro#complex-components-become-hard-to-understand&quot;&gt;Motivation&lt;/a&gt; for Hooks es que los m&amp;eacute;todos del ciclo de vida de las clases a menudo contienen l&amp;oacute;gica no relacionada, pero la l&amp;oacute;gica relacionada se divide en varios m&amp;eacute;todos. A continuaci&amp;oacute;n, se muestra un componente que combina el contador y la l&amp;oacute;gica del indicador de estado de amigo de los ejemplos anteriores:</target>
        </trans-unit>
        <trans-unit id="a418baabb2a2970b5f712a2f3fec059c69ada5c1" translate="yes" xml:space="preserve">
          <source>One possible solution to this is to &lt;em&gt;delay the spinner itself&lt;/em&gt; from displaying:</source>
          <target state="translated">Una posible soluci&amp;oacute;n a esto es &lt;em&gt;retrasar la&lt;/em&gt; visualizaci&amp;oacute;n de &lt;em&gt;la ruleta&lt;/em&gt; :</target>
        </trans-unit>
        <trans-unit id="b271b0f7d1b61e9056e53697bfa59e66ec53dabf" translate="yes" xml:space="preserve">
          <source>One rudimentary way to measure the position or size of a DOM node is to use a &lt;a href=&quot;refs-and-the-dom#callback-refs&quot;&gt;callback ref&lt;/a&gt;. React will call that callback whenever the ref gets attached to a different node. Here is a &lt;a href=&quot;https://codesandbox.io/s/l7m0v5x4v9&quot;&gt;small demo&lt;/a&gt;:</source>
          <target state="translated">Una forma rudimentaria de medir la posici&amp;oacute;n o el tama&amp;ntilde;o de un nodo DOM es usar una &lt;a href=&quot;refs-and-the-dom#callback-refs&quot;&gt;referencia de devoluci&amp;oacute;n de llamada&lt;/a&gt; . React llamar&amp;aacute; a esa devoluci&amp;oacute;n de llamada cada vez que la referencia se adjunte a un nodo diferente. Aqu&amp;iacute; hay una &lt;a href=&quot;https://codesandbox.io/s/l7m0v5x4v9&quot;&gt;peque&amp;ntilde;a demostraci&amp;oacute;n&lt;/a&gt; :</target>
        </trans-unit>
        <trans-unit id="6fa8706f6009f63753c15a5df17eaaa0d7f204a0" translate="yes" xml:space="preserve">
          <source>One solution to this is to extract the model&amp;rsquo;s attributes as plain data whenever it changes, and keep this logic in a single place. The following is &lt;a href=&quot;higher-order-components&quot;&gt;a higher-order component&lt;/a&gt; that extracts all attributes of a Backbone model into state, passing the data to the wrapped component.</source>
          <target state="translated">Una soluci&amp;oacute;n a esto es extraer los atributos del modelo como datos sin formato cada vez que cambia y mantener esta l&amp;oacute;gica en un solo lugar. El siguiente es &lt;a href=&quot;higher-order-components&quot;&gt;un componente de orden superior&lt;/a&gt; que extrae todos los atributos de un modelo Backbone al estado, pasando los datos al componente empaquetado.</target>
        </trans-unit>
        <trans-unit id="58b79eb7fa7ae8bb13eed6fa689b5ce8ed867366" translate="yes" xml:space="preserve">
          <source>One way to solve this issue &lt;strong&gt;without context&lt;/strong&gt; is to &lt;a href=&quot;composition-vs-inheritance#containment&quot;&gt;pass down the &lt;code&gt;Avatar&lt;/code&gt; component itself&lt;/a&gt; so that the intermediate components don&amp;rsquo;t need to know about the &lt;code&gt;user&lt;/code&gt; or &lt;code&gt;avatarSize&lt;/code&gt; props:</source>
          <target state="translated">Una forma de resolver este problema &lt;strong&gt;sin contexto&lt;/strong&gt; es &lt;a href=&quot;composition-vs-inheritance#containment&quot;&gt;pasar el componente &lt;code&gt;Avatar&lt;/code&gt; en s&amp;iacute; mismo&lt;/a&gt; para que los componentes intermedios no necesiten saber sobre el &lt;code&gt;user&lt;/code&gt; o los accesorios de &lt;code&gt;avatarSize&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="c6299e6ee53c4fc7bdfb602433272b7a519918fc" translate="yes" xml:space="preserve">
          <source>One way we could fix it is by putting them both in a single boundary:</source>
          <target state="translated">Una forma de arreglarlo es poniéndolos a ambos en un solo límite:</target>
        </trans-unit>
        <trans-unit id="c05b9709100b2a39470a0603a95728131ccfa2e0" translate="yes" xml:space="preserve">
          <source>Online Playgrounds</source>
          <target state="translated">Parques de juegos en línea</target>
        </trans-unit>
        <trans-unit id="68c313b91ba43cdce9e6230021dd3cc44332356e" translate="yes" xml:space="preserve">
          <source>Only Call Hooks at the Top Level</source>
          <target state="translated">Sólo los ganchos de llamada en el nivel superior</target>
        </trans-unit>
        <trans-unit id="980e73ef860f23909c36445661b606d8b3e93697" translate="yes" xml:space="preserve">
          <source>Only Call Hooks from React Functions</source>
          <target state="translated">Sólo los ganchos de llamada de las funciones de reacción</target>
        </trans-unit>
        <trans-unit id="5acf9b36b7f149f65b12a00c58b688239df37660" translate="yes" xml:space="preserve">
          <source>Only call Hooks &lt;strong&gt;at the top level&lt;/strong&gt;. Don&amp;rsquo;t call Hooks inside loops, conditions, or nested functions.</source>
          <target state="translated">Solo llame a Hooks &lt;strong&gt;en el nivel superior&lt;/strong&gt; . No llame a Hooks dentro de bucles, condiciones o funciones anidadas.</target>
        </trans-unit>
        <trans-unit id="c8bacc2bc0cd7f69fa0df071e2e600234a8896fe" translate="yes" xml:space="preserve">
          <source>Only call Hooks &lt;strong&gt;from React function components&lt;/strong&gt;. Don&amp;rsquo;t call Hooks from regular JavaScript functions. (There is just one other valid place to call Hooks &amp;mdash; your own custom Hooks. We&amp;rsquo;ll learn about them in a moment.)</source>
          <target state="translated">Solo llame a Hooks &lt;strong&gt;desde los componentes de la funci&amp;oacute;n React&lt;/strong&gt; . No llame a Hooks desde funciones regulares de JavaScript. (Solo hay otro lugar v&amp;aacute;lido para llamar a Hooks: sus propios Hooks personalizados. Aprenderemos sobre ellos en un momento).</target>
        </trans-unit>
        <trans-unit id="78f87a20c05bef10c0fc20bc0609245bc0128bed" translate="yes" xml:space="preserve">
          <source>Only do this if you couldn&amp;rsquo;t find a better alternative, as relying on mutation makes components less predictable. If there&amp;rsquo;s a specific pattern that doesn&amp;rsquo;t translate well, &lt;a href=&quot;https://github.com/facebook/react/issues/new&quot;&gt;file an issue&lt;/a&gt; with a runnable example code and we can try to help.</source>
          <target state="translated">Solo haga esto si no puede encontrar una alternativa mejor, ya que depender de la mutaci&amp;oacute;n hace que los componentes sean menos predecibles. Si hay un patr&amp;oacute;n espec&amp;iacute;fico que no se traduce bien, &lt;a href=&quot;https://github.com/facebook/react/issues/new&quot;&gt;presente un problema&lt;/a&gt; con un c&amp;oacute;digo de ejemplo ejecutable y podemos intentar ayudarlo.</target>
        </trans-unit>
        <trans-unit id="c28575a6029fc70e57860e000b695cc6f0b3e57e" translate="yes" xml:space="preserve">
          <source>Only ever use CSS that removes this outline, for example by setting &lt;code&gt;outline: 0&lt;/code&gt;, if you are replacing it with another focus outline implementation.</source>
          <target state="translated">Solo use CSS que elimine este esquema, por ejemplo, estableciendo &lt;code&gt;outline: 0&lt;/code&gt; , si lo est&amp;aacute; reemplazando con otra implementaci&amp;oacute;n de esquema de enfoque.</target>
        </trans-unit>
        <trans-unit id="7322dbc7cc37c39174edd21f985b523446462851" translate="yes" xml:space="preserve">
          <source>Only use error boundaries for recovering from unexpected exceptions; &lt;strong&gt;don&amp;rsquo;t try to use them for control flow.&lt;/strong&gt;</source>
          <target state="translated">Utilice &amp;uacute;nicamente l&amp;iacute;mites de error para recuperarse de excepciones inesperadas; &lt;strong&gt;no intente utilizarlos para controlar el flujo.&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="6b1b25a5af502c4955acf005be6d083dc1a30602" translate="yes" xml:space="preserve">
          <source>Open &lt;a href=&quot;https://codesandbox.io/s/nameless-butterfly-fkw5q&quot;&gt;this example&lt;/a&gt;. When you press a button, you&amp;rsquo;ll see the Pending state for a second before moving on. This transition feels nice and fluid.</source>
          <target state="translated">Abra &lt;a href=&quot;https://codesandbox.io/s/nameless-butterfly-fkw5q&quot;&gt;este ejemplo&lt;/a&gt; . Cuando presiona un bot&amp;oacute;n, ver&amp;aacute; el estado Pendiente por un segundo antes de continuar. Esta transici&amp;oacute;n se siente agradable y fluida.</target>
        </trans-unit>
        <trans-unit id="82faec880ab06096a12df754c31b316dbff6580b" translate="yes" xml:space="preserve">
          <source>Open &lt;a href=&quot;https://codesandbox.io/s/prod-grass-g1lh5&quot;&gt;this example&lt;/a&gt; and click &amp;ldquo;Open Profile&amp;rdquo;. You will see several visual states one by one:</source>
          <target state="translated">Abra &lt;a href=&quot;https://codesandbox.io/s/prod-grass-g1lh5&quot;&gt;este ejemplo&lt;/a&gt; y haga clic en &quot;Abrir perfil&quot;. Ver&amp;aacute; varios estados visuales uno por uno:</target>
        </trans-unit>
        <trans-unit id="f911658ce7d859922d5257b0b036abe5292fca9b" translate="yes" xml:space="preserve">
          <source>Open &lt;strong&gt;&lt;a href=&quot;https://gist.github.com/gaearon/0b180827c190fe4fd98b4c7f570ea4a8/raw/b9157ce933c79a4559d2aa9ff3372668cce48de7/LikeButton.js&quot;&gt;this starter code&lt;/a&gt;&lt;/strong&gt; and paste it into the file you created.</source>
          <target state="translated">Abra &lt;strong&gt;&lt;a href=&quot;https://gist.github.com/gaearon/0b180827c190fe4fd98b4c7f570ea4a8/raw/b9157ce933c79a4559d2aa9ff3372668cce48de7/LikeButton.js&quot;&gt;este c&amp;oacute;digo de inicio&lt;/a&gt;&lt;/strong&gt; y p&amp;eacute;guelo en el archivo que cre&amp;oacute;.</target>
        </trans-unit>
        <trans-unit id="55d9ece27ec32d8829711be1a1d3afea9c2dafd2" translate="yes" xml:space="preserve">
          <source>Open the Chrome DevTools &lt;strong&gt;&lt;a href=&quot;https://developers.google.com/web/tools/chrome-devtools/evaluate-performance/timeline-tool&quot;&gt;Performance&lt;/a&gt;&lt;/strong&gt; tab and press &lt;strong&gt;Record&lt;/strong&gt;.</source>
          <target state="translated">Abra la pesta&amp;ntilde;a &lt;strong&gt;&lt;a href=&quot;https://developers.google.com/web/tools/chrome-devtools/evaluate-performance/timeline-tool&quot;&gt;Rendimiento de&lt;/a&gt;&lt;/strong&gt; Chrome DevTools y presione &lt;strong&gt;Grabar&lt;/strong&gt; .</target>
        </trans-unit>
        <trans-unit id="a45e17e011c01ffe2a91ced4f7a209475dd8d2a0" translate="yes" xml:space="preserve">
          <source>Optimizing Performance</source>
          <target state="translated">Optimizar el rendimiento</target>
        </trans-unit>
        <trans-unit id="db92a3f80d780ad79d58ccf80d95c08e0583866f" translate="yes" xml:space="preserve">
          <source>Optimizing the output for production.</source>
          <target state="translated">Optimizar el rendimiento de la producción.</target>
        </trans-unit>
        <trans-unit id="ebed446427427efeada77fb1de8555c343d3531f" translate="yes" xml:space="preserve">
          <source>Opting into Concurrent Mode introduces semantic changes to how React works. This means that you can&amp;rsquo;t use Concurrent Mode in just a few components. Because of this, some apps may not be able to migrate directly to Concurrent Mode.</source>
          <target state="translated">Optar por el modo concurrente introduce cambios sem&amp;aacute;nticos en el funcionamiento de React. Esto significa que no puede usar el modo concurrente en solo unos pocos componentes. Debido a esto, es posible que algunas aplicaciones no puedan migrar directamente al modo concurrente.</target>
        </trans-unit>
        <trans-unit id="eb6793ee41543d3424f0cf56f0cf4f4c5c5d0813" translate="yes" xml:space="preserve">
          <source>Optional: &lt;a href=&quot;https://gist.github.com/gaearon/6668a1f6986742109c00a581ce704605/archive/f6c882b6ae18bde42dcf6fdb751aae93495a2275.zip&quot;&gt;Download the full example (2KB zipped)&lt;/a&gt;</source>
          <target state="translated">Opcional: &lt;a href=&quot;https://gist.github.com/gaearon/6668a1f6986742109c00a581ce704605/archive/f6c882b6ae18bde42dcf6fdb751aae93495a2275.zip&quot;&gt;descargue el ejemplo completo (2 KB comprimido)&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="ee3267798d0259e5dd98aa26c31e33223e26cac3" translate="yes" xml:space="preserve">
          <source>Optional: Try React with JSX</source>
          <target state="translated">Opcional:Intenta reaccionar con JSX</target>
        </trans-unit>
        <trans-unit id="3a09e35972dfc007bcd7aa10e05cf800743e8354" translate="yes" xml:space="preserve">
          <source>Or yarn:</source>
          <target state="translated">O hilo:</target>
        </trans-unit>
        <trans-unit id="160496746ed70b43025c17e2f2433373eef18b6a" translate="yes" xml:space="preserve">
          <source>Other APIs</source>
          <target state="translated">Otros APIs</target>
        </trans-unit>
        <trans-unit id="1b361bfb2d40f2fa584dfe16d7abd56931268577" translate="yes" xml:space="preserve">
          <source>Other Build Setups</source>
          <target state="translated">Otras configuraciones de construcción</target>
        </trans-unit>
        <trans-unit id="718591843f9ba65a328acf7e21cfb68fa2042427" translate="yes" xml:space="preserve">
          <source>Other Events</source>
          <target state="translated">Otros eventos</target>
        </trans-unit>
        <trans-unit id="456d2677e518e26ef0d24a4e5e0c50a00c1e8bbd" translate="yes" xml:space="preserve">
          <source>Other Languages</source>
          <target state="translated">Otros idiomas</target>
        </trans-unit>
        <trans-unit id="b1866d3283a2c6b4f31b7bd94d302109ad919e6f" translate="yes" xml:space="preserve">
          <source>Other Patterns</source>
          <target state="translated">Otros patrones</target>
        </trans-unit>
        <trans-unit id="670876f3113d937960727ed05a2f82e686590502" translate="yes" xml:space="preserve">
          <source>Other Points for Consideration</source>
          <target state="translated">Otros puntos a considerar</target>
        </trans-unit>
        <trans-unit id="c8298a228f42e1a844433af47c0c496b7ae9065b" translate="yes" xml:space="preserve">
          <source>Other Screen Readers</source>
          <target state="translated">Otros lectores de pantalla</target>
        </trans-unit>
        <trans-unit id="a6a3346524b28d21d18a28316c1731fc127a349f" translate="yes" xml:space="preserve">
          <source>Other Utilities</source>
          <target state="translated">Otras utilidades</target>
        </trans-unit>
        <trans-unit id="4715125742dd4e459dcb1cbb3b644f3692b0c443" translate="yes" xml:space="preserve">
          <source>Other approaches to this, such as composing Promises in a special way, are increasingly difficult to pull off when the loading states are located in different components down the tree.</source>
          <target state="translated">Otros enfoques,como la composición de las promesas de una manera especial,son cada vez más difíciles de llevar a cabo cuando los estados de carga se localizan en diferentes componentes del árbol.</target>
        </trans-unit>
        <trans-unit id="b17f43760c19635a2cfeb450e22843e0fca3cca3" translate="yes" xml:space="preserve">
          <source>Other effects might not have a cleanup phase, and don&amp;rsquo;t return anything.</source>
          <target state="translated">Es posible que otros efectos no tengan una fase de limpieza y no devuelvan nada.</target>
        </trans-unit>
        <trans-unit id="efe0a2f2b6a088b22020eedfca1f8171b23b1b2a" translate="yes" xml:space="preserve">
          <source>Other libraries might support hooks in the future too.</source>
          <target state="translated">Otras bibliotecas podrían apoyar los ganchos en el futuro también.</target>
        </trans-unit>
        <trans-unit id="fbb1c9f1eb4ca77b950c7272aaa7baca69202c49" translate="yes" xml:space="preserve">
          <source>Our &amp;ldquo;Next&amp;rdquo; button click handler sets the state that switches the current profile in the state:</source>
          <target state="translated">Nuestro controlador de clic del bot&amp;oacute;n &quot;Siguiente&quot; establece el estado que cambia el perfil actual en el estado:</target>
        </trans-unit>
        <trans-unit id="d8d512d8960f76b07e5be884686cf1a1860c585e" translate="yes" xml:space="preserve">
          <source>Our &lt;code&gt;Button&lt;/code&gt; component will immediately show the Pending state indicator on click:</source>
          <target state="translated">Nuestro componente &lt;code&gt;Button&lt;/code&gt; mostrar&amp;aacute; inmediatamente el indicador de estado pendiente al hacer clic:</target>
        </trans-unit>
        <trans-unit id="5564b57b9c8ed5194280102aa6b272b6ace8690e" translate="yes" xml:space="preserve">
          <source>Our &lt;code&gt;Welcome&lt;/code&gt; component returns a &lt;code&gt;&amp;lt;h1&amp;gt;Hello, Sara&amp;lt;/h1&amp;gt;&lt;/code&gt; element as the result.</source>
          <target state="translated">Nuestro componente de &lt;code&gt;Welcome&lt;/code&gt; devuelve un elemento &lt;code&gt;&amp;lt;h1&amp;gt;Hello, Sara&amp;lt;/h1&amp;gt;&lt;/code&gt; como resultado.</target>
        </trans-unit>
        <trans-unit id="24e602677bd730cb72e7da761f1b1f89e01b70c7" translate="yes" xml:space="preserve">
          <source>Our &lt;code&gt;useTransition()&lt;/code&gt; call returns two values: &lt;code&gt;startTransition&lt;/code&gt; and &lt;code&gt;isPending&lt;/code&gt;.</source>
          <target state="translated">Nuestra llamada &lt;code&gt;useTransition()&lt;/code&gt; devuelve dos valores: &lt;code&gt;startTransition&lt;/code&gt; e &lt;code&gt;isPending&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="b96521a8515cede856d54400c09ad380c0daf2e3" translate="yes" xml:space="preserve">
          <source>Our JSON API returns some data that looks like this:</source>
          <target state="translated">Nuestra API JSON devuelve algunos datos que se parecen a esto:</target>
        </trans-unit>
        <trans-unit id="bef855825370735f30744e8e204330946ef7b36c" translate="yes" xml:space="preserve">
          <source>Our React applications continuously modify the HTML DOM during runtime, sometimes leading to keyboard focus being lost or set to an unexpected element. In order to repair this, we need to programmatically nudge the keyboard focus in the right direction. For example, by resetting keyboard focus to a button that opened a modal window after that modal window is closed.</source>
          <target state="translated">Nuestras aplicaciones React modifican continuamente el DOM HTML durante el tiempo de ejecución,lo que a veces lleva a que se pierda el enfoque del teclado o a que se establezca un elemento inesperado.Para poder reparar esto,necesitamos programar el enfoque del teclado en la dirección correcta.Por ejemplo,restableciendo el foco del teclado en un botón que abrió una ventana modal después de que se cerrara esa ventana modal.</target>
        </trans-unit>
        <trans-unit id="74299bea00c013faee08bac03735a9e8eb9da361" translate="yes" xml:space="preserve">
          <source>Our first attempt might look like this:</source>
          <target state="translated">Nuestro primer intento podría verse así:</target>
        </trans-unit>
        <trans-unit id="cfdb46afa859b90b54e6db2005a9424a33bafd62" translate="yes" xml:space="preserve">
          <source>Our goal is for Hooks to cover all use cases for classes as soon as possible. There are no Hook equivalents to the uncommon &lt;code&gt;getSnapshotBeforeUpdate&lt;/code&gt; and &lt;code&gt;componentDidCatch&lt;/code&gt; lifecycles yet, but we plan to add them soon.</source>
          <target state="translated">Nuestro objetivo es que Hooks cubra todos los casos de uso de las clases lo antes posible. A&amp;uacute;n no hay equivalentes de Hook a los &lt;code&gt;getSnapshotBeforeUpdate&lt;/code&gt; vida poco comunes getSnapshotBeforeUpdate y &lt;code&gt;componentDidCatch&lt;/code&gt; , pero planeamos agregarlos pronto.</target>
        </trans-unit>
        <trans-unit id="4fbbff78891e0fe3161c5f1fa839d8f83c89e351" translate="yes" xml:space="preserve">
          <source>Our goal is for Hooks to cover all use cases for classes as soon as possible. There are no Hook equivalents to the uncommon &lt;code&gt;getSnapshotBeforeUpdate&lt;/code&gt;, &lt;code&gt;getDerivedStateFromError&lt;/code&gt; and &lt;code&gt;componentDidCatch&lt;/code&gt; lifecycles yet, but we plan to add them soon.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6f7bdd68f3093bdd85231792c356d3a08261c101" translate="yes" xml:space="preserve">
          <source>Our new example starts by importing the &lt;code&gt;useState&lt;/code&gt; Hook from React:</source>
          <target state="translated">Nuestro nuevo ejemplo comienza importando &lt;code&gt;useState&lt;/code&gt; Hook de React:</target>
        </trans-unit>
        <trans-unit id="1fc98859f39fc7662d2321203db3a057fbfc1f78" translate="yes" xml:space="preserve">
          <source>Our new requirement is that, in addition to a Celsius input, we provide a Fahrenheit input, and they are kept in sync.</source>
          <target state="translated">Nuestro nuevo requisito es que,además de una entrada de Celsius,proporcionemos una entrada de Fahrenheit,y que se mantengan en sincronía.</target>
        </trans-unit>
        <trans-unit id="bdbaf73bc5cb4adf782290fa0e9328bf03a93107" translate="yes" xml:space="preserve">
          <source>Our old experiments with functional APIs in the &lt;a href=&quot;https://github.com/reactjs/react-future/tree/master/07%20-%20Returning%20State&quot;&gt;react-future&lt;/a&gt; repository.</source>
          <target state="translated">Nuestros viejos experimentos con API funcionales en el repositorio &lt;a href=&quot;https://github.com/reactjs/react-future/tree/master/07%20-%20Returning%20State&quot;&gt;react-future&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="ecead6fae262a6840fa100e15a353465a381857e" translate="yes" xml:space="preserve">
          <source>Over a million developers use React, collectively maintaining millions of components. The Facebook codebase alone has over 50,000 React components. That means we need to make it as easy as possible to upgrade to new versions of React; if we make large changes without a migration path, people will be stuck on old versions. We test these upgrade paths on Facebook itself &amp;ndash; if our team of less than 10 people can update 50,000+ components alone, we hope the upgrade will be manageable for anyone using React. In many cases, we write &lt;a href=&quot;https://github.com/reactjs/react-codemod&quot;&gt;automated scripts&lt;/a&gt; to upgrade component syntax, which we then include in the open-source release for everyone to use.</source>
          <target state="translated">M&amp;aacute;s de un mill&amp;oacute;n de desarrolladores usan React, manteniendo colectivamente millones de componentes. Solo el c&amp;oacute;digo base de Facebook tiene m&amp;aacute;s de 50.000 componentes de React. Eso significa que debemos facilitar al m&amp;aacute;ximo la actualizaci&amp;oacute;n a nuevas versiones de React; si hacemos grandes cambios sin una ruta de migraci&amp;oacute;n, la gente se quedar&amp;aacute; atrapada en versiones antiguas. Probamos estas rutas de actualizaci&amp;oacute;n en el propio Facebook: si nuestro equipo de menos de 10 personas puede actualizar m&amp;aacute;s de 50,000 componentes, esperamos que la actualizaci&amp;oacute;n sea manejable para cualquiera que use React. En muchos casos, escribimos &lt;a href=&quot;https://github.com/reactjs/react-codemod&quot;&gt;scripts automatizados&lt;/a&gt; para actualizar la sintaxis de los componentes, que luego incluimos en la versi&amp;oacute;n de c&amp;oacute;digo abierto para que todos los utilicen.</target>
        </trans-unit>
        <trans-unit id="67ee80037726319e2173c25a2b8a820cdf39330c" translate="yes" xml:space="preserve">
          <source>Over the next several months, many libraries will appear with different takes on Suspense APIs. &lt;strong&gt;If you prefer to learn when things are more stable, you might prefer to ignore this work for now, and come back when the Suspense ecosystem is more mature.&lt;/strong&gt;</source>
          <target state="translated">Durante los pr&amp;oacute;ximos meses, aparecer&amp;aacute;n muchas bibliotecas con diferentes versiones de las API de Suspense. &lt;strong&gt;Si prefiere aprender cu&amp;aacute;ndo las cosas son m&amp;aacute;s estables, es posible que prefiera ignorar este trabajo por ahora y volver cuando el ecosistema de Suspense est&amp;eacute; m&amp;aacute;s maduro.&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="33b00a214a218165c819825f50d811fd28c59d9c" translate="yes" xml:space="preserve">
          <source>Overall, this makes it so that &lt;code&gt;&amp;lt;input type=&quot;text&quot;&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;textarea&amp;gt;&lt;/code&gt;, and &lt;code&gt;&amp;lt;select&amp;gt;&lt;/code&gt; all work very similarly - they all accept a &lt;code&gt;value&lt;/code&gt; attribute that you can use to implement a controlled component.</source>
          <target state="translated">En general, esto hace que &lt;code&gt;&amp;lt;input type=&quot;text&quot;&amp;gt;&lt;/code&gt; , &lt;code&gt;&amp;lt;textarea&amp;gt;&lt;/code&gt; y &lt;code&gt;&amp;lt;select&amp;gt;&lt;/code&gt; funcionen de manera muy similar: todos aceptan un atributo de &lt;code&gt;value&lt;/code&gt; que puede usar para implementar un componente controlado.</target>
        </trans-unit>
        <trans-unit id="0efc2e6be4c23b9a513d7ce0dcff8ed80e8912e7" translate="yes" xml:space="preserve">
          <source>Overview</source>
          <target state="translated">Overview</target>
        </trans-unit>
        <trans-unit id="ac6ae6a452c9a133b258c63f82756651e2997eaf" translate="yes" xml:space="preserve">
          <source>Package Managers</source>
          <target state="translated">Gestores de paquetes</target>
        </trans-unit>
        <trans-unit id="20ec6193c88aaa60a810f707fb624f400dab682a" translate="yes" xml:space="preserve">
          <source>Package managers are tools that allow you to manage dependencies in your project. &lt;a href=&quot;https://www.npmjs.com/&quot;&gt;npm&lt;/a&gt; and &lt;a href=&quot;https://yarnpkg.com/&quot;&gt;Yarn&lt;/a&gt; are two package managers commonly used in React applications. Both of them are clients for the same npm package registry.</source>
          <target state="translated">Los administradores de paquetes son herramientas que le permiten administrar las dependencias en su proyecto. &lt;a href=&quot;https://www.npmjs.com/&quot;&gt;npm&lt;/a&gt; y &lt;a href=&quot;https://yarnpkg.com/&quot;&gt;Yarn&lt;/a&gt; son dos administradores de paquetes que se usan com&amp;uacute;nmente en las aplicaciones React. Ambos son clientes del mismo registro de paquetes npm.</target>
        </trans-unit>
        <trans-unit id="7dca5f8363324ed0f27645a7b9839654bdd31f45" translate="yes" xml:space="preserve">
          <source>Parent-Child Coupling</source>
          <target state="translated">Acoplamiento padres-hijos</target>
        </trans-unit>
        <trans-unit id="60bd5e09f1e5e3ba47a58c7db16fad72304e43c8" translate="yes" xml:space="preserve">
          <source>Pass a &amp;ldquo;create&amp;rdquo; function and an array of dependencies. &lt;code&gt;useMemo&lt;/code&gt; will only recompute the memoized value when one of the dependencies has changed. This optimization helps to avoid expensive calculations on every render.</source>
          <target state="translated">Pase una funci&amp;oacute;n &quot;crear&quot; y una serie de dependencias. &lt;code&gt;useMemo&lt;/code&gt; solo volver&amp;aacute; a calcular el valor memorizado cuando una de las dependencias haya cambiado. Esta optimizaci&amp;oacute;n ayuda a evitar costosos c&amp;aacute;lculos en cada render.</target>
        </trans-unit>
        <trans-unit id="dd926194677835b376654a809999d830104e7b63" translate="yes" xml:space="preserve">
          <source>Pass a function instead of an object to &lt;code&gt;setState&lt;/code&gt; to ensure the call always uses the most updated version of state (see below).</source>
          <target state="translated">Pase una funci&amp;oacute;n en lugar de un objeto a &lt;code&gt;setState&lt;/code&gt; para asegurarse de que la llamada siempre use la versi&amp;oacute;n m&amp;aacute;s actualizada del estado (ver m&amp;aacute;s abajo).</target>
        </trans-unit>
        <trans-unit id="2780570791c9ee7131760cf13185af6586f6a67f" translate="yes" xml:space="preserve">
          <source>Pass a mocked component module to this method to augment it with useful methods that allow it to be used as a dummy React component. Instead of rendering as usual, the component will become a simple &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; (or other tag if &lt;code&gt;mockTagName&lt;/code&gt; is provided) containing any provided children.</source>
          <target state="translated">Pase un m&amp;oacute;dulo de componente simulado a este m&amp;eacute;todo para aumentarlo con m&amp;eacute;todos &amp;uacute;tiles que le permitan ser utilizado como un componente de React ficticio. En lugar de renderizar como de costumbre, el componente se convertir&amp;aacute; en un &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; simple (u otra etiqueta si se proporciona &lt;code&gt;mockTagName&lt;/code&gt; ) que contiene los elementos secundarios proporcionados.</target>
        </trans-unit>
        <trans-unit id="fdde832b0e4e25e7efa528b27f908118f6bfa769" translate="yes" xml:space="preserve">
          <source>Pass a string as the &lt;code&gt;className&lt;/code&gt; prop:</source>
          <target state="translated">Pase una cadena como prop &lt;code&gt;className&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="534c9e580a2811b44edf2a15e3bc0f460c0a7212" translate="yes" xml:space="preserve">
          <source>Pass an inline callback and an array of dependencies. &lt;code&gt;useCallback&lt;/code&gt; will return a memoized version of the callback that only changes if one of the dependencies has changed. This is useful when passing callbacks to optimized child components that rely on reference equality to prevent unnecessary renders (e.g. &lt;code&gt;shouldComponentUpdate&lt;/code&gt;).</source>
          <target state="translated">Pase una devoluci&amp;oacute;n de llamada en l&amp;iacute;nea y una serie de dependencias. &lt;code&gt;useCallback&lt;/code&gt; devolver&amp;aacute; una versi&amp;oacute;n memorizada de la devoluci&amp;oacute;n de llamada que solo cambia si una de las dependencias ha cambiado. Esto es &amp;uacute;til cuando se pasan devoluciones de llamada a componentes secundarios optimizados que dependen de la igualdad de referencia para evitar representaciones innecesarias (por ejemplo, &lt;code&gt;shouldComponentUpdate&lt;/code&gt; ).</target>
        </trans-unit>
        <trans-unit id="6b1ecfde360ca670c99a034b3467938615912d18" translate="yes" xml:space="preserve">
          <source>Pass event handlers and other functions as props to child components:</source>
          <target state="translated">Pasar los manejadores de eventos y otras funciones como accesorios a los componentes de los niños:</target>
        </trans-unit>
        <trans-unit id="7977cb8dad2d6673088b4722d378da8582b6ab23" translate="yes" xml:space="preserve">
          <source>Passing Arguments to Event Handlers</source>
          <target state="translated">Pasar argumentos a los encargados de los eventos</target>
        </trans-unit>
        <trans-unit id="7731b6038ead3e4f42010f183a92cc0e8e663535" translate="yes" xml:space="preserve">
          <source>Passing Functions to Components</source>
          <target state="translated">Pasar funciones a los componentes</target>
        </trans-unit>
        <trans-unit id="47c211ae4a2b3b47216fe468fbd82f27983e4011" translate="yes" xml:space="preserve">
          <source>Passing an update function allows you to access the current state value inside the updater. Since &lt;code&gt;setState&lt;/code&gt; calls are batched, this lets you chain updates and ensure they build on top of each other instead of conflicting:</source>
          <target state="translated">Pasar una funci&amp;oacute;n de actualizaci&amp;oacute;n le permite acceder al valor del estado actual dentro del actualizador. Dado que &lt;code&gt;setState&lt;/code&gt; llamadas setState se agrupan, esto le permite encadenar actualizaciones y asegurarse de que se construyan una encima de la otra en lugar de entrar en conflicto:</target>
        </trans-unit>
        <trans-unit id="9a6194136e1fc05bb75b0051025e3237f9608a70" translate="yes" xml:space="preserve">
          <source>People come to React from different backgrounds and with different learning styles. Whether you prefer a more theoretical or a practical approach, we hope you&amp;rsquo;ll find this section helpful.</source>
          <target state="translated">La gente viene a React de diferentes or&amp;iacute;genes y con diferentes estilos de aprendizaje. Ya sea que prefiera un enfoque m&amp;aacute;s te&amp;oacute;rico o pr&amp;aacute;ctico, esperamos que esta secci&amp;oacute;n le resulte &amp;uacute;til.</target>
        </trans-unit>
        <trans-unit id="a454c4946afe6de8abb7a71c3c543078037ceb08" translate="yes" xml:space="preserve">
          <source>Perform the actions you want to profile. Don&amp;rsquo;t record more than 20 seconds or Chrome might hang.</source>
          <target state="translated">Realice las acciones que desee perfilar. No grabe m&amp;aacute;s de 20 segundos o Chrome podr&amp;iacute;a bloquearse.</target>
        </trans-unit>
        <trans-unit id="1456888f4e0889c6c1362473e30e3fb8f16a2193" translate="yes" xml:space="preserve">
          <source>Performance Optimizations</source>
          <target state="translated">Optimizaciones de rendimiento</target>
        </trans-unit>
        <trans-unit id="afe33e97d445c1aa01afdea12de2c8a6bf6ef536" translate="yes" xml:space="preserve">
          <source>Phew, that was fast! If some things didn&amp;rsquo;t quite make sense or you&amp;rsquo;d like to learn more in detail, you can read the next pages, starting with the &lt;a href=&quot;hooks-state&quot;&gt;State Hook&lt;/a&gt; documentation.</source>
          <target state="translated">&amp;iexcl;Uf, eso fue r&amp;aacute;pido! Si algunas cosas no tienen mucho sentido o si le gustar&amp;iacute;a aprender m&amp;aacute;s en detalle, puede leer las p&amp;aacute;ginas siguientes, comenzando con la documentaci&amp;oacute;n de &lt;a href=&quot;hooks-state&quot;&gt;State Hook&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="649b0aad2e87bf224c37505fbd45954d6ae44866" translate="yes" xml:space="preserve">
          <source>Play a bit more with the &lt;a href=&quot;https://codesandbox.io/s/jovial-lalande-26yep&quot;&gt;demo&lt;/a&gt;, and try to imagine it happening.</source>
          <target state="translated">Juega un poco m&amp;aacute;s con la &lt;a href=&quot;https://codesandbox.io/s/jovial-lalande-26yep&quot;&gt;demostraci&amp;oacute;n&lt;/a&gt; e intenta imaginarlo.</target>
        </trans-unit>
        <trans-unit id="e22243b7987a499744ba5d18f9114f54c25fe1f4" translate="yes" xml:space="preserve">
          <source>Please note that browser / screen reader combinations matter. It is recommended that you test your application in the browser best suited to your screen reader of choice.</source>
          <target state="translated">Tenga en cuenta que las combinaciones de navegador y lector de pantalla son importantes.Se recomienda que pruebe su aplicación en el navegador que mejor se adapte a su lector de pantalla preferido.</target>
        </trans-unit>
        <trans-unit id="e61307201646dc8a1687dacab76a450772d3c680" translate="yes" xml:space="preserve">
          <source>Please note that the syntax above is &lt;strong&gt;experimental&lt;/strong&gt; and the syntax may change, or the proposal might not make it into the language.</source>
          <target state="translated">Tenga en cuenta que la sintaxis anterior es &lt;strong&gt;experimental&lt;/strong&gt; y la sintaxis puede cambiar, o es posible que la propuesta no se encuentre en el idioma.</target>
        </trans-unit>
        <trans-unit id="a84c3942bb67e056a4c3f6552e902c1c6de812f7" translate="yes" xml:space="preserve">
          <source>Pointer Events</source>
          <target state="translated">Eventos de puntero</target>
        </trans-unit>
        <trans-unit id="51c36c348e5c25ede527a987ca5d7e15ef86c339" translate="yes" xml:space="preserve">
          <source>Pointer events are not yet supported in every browser (at the time of writing this article, supported browsers include: Chrome, Firefox, Edge, and Internet Explorer). React deliberately does not polyfill support for other browsers because a standard-conform polyfill would significantly increase the bundle size of &lt;code&gt;react-dom&lt;/code&gt;.</source>
          <target state="translated">Los eventos de puntero a&amp;uacute;n no son compatibles con todos los navegadores (en el momento de escribir este art&amp;iacute;culo, los navegadores compatibles incluyen: Chrome, Firefox, Edge e Internet Explorer). React deliberadamente no admite polyfill para otros navegadores porque un polyfill est&amp;aacute;ndar aumentar&amp;iacute;a significativamente el tama&amp;ntilde;o del paquete de &lt;code&gt;react-dom&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="a0c88242e813893ab8ad50b7e16808768f9baafb" translate="yes" xml:space="preserve">
          <source>Portals</source>
          <target state="translated">Portals</target>
        </trans-unit>
        <trans-unit id="4b918b44974a1664555fe8092f41a8a9c3c7132e" translate="yes" xml:space="preserve">
          <source>Portals provide a first-class way to render children into a DOM node that exists outside the DOM hierarchy of the parent component.</source>
          <target state="translated">Los portales ofrecen una forma de primera clase de convertir a los hijos en un nodo DOM que existe fuera de la jerarquía DOM del componente padre.</target>
        </trans-unit>
        <trans-unit id="029998f5e0e501dc2ec70d705846fadf01f5078f" translate="yes" xml:space="preserve">
          <source>Practical Tutorial</source>
          <target state="translated">Tutorial práctico</target>
        </trans-unit>
        <trans-unit id="0da325394f7b2561f269c38b5353a62787615dc5" translate="yes" xml:space="preserve">
          <source>Prefer the standard &lt;code&gt;useEffect&lt;/code&gt; when possible to avoid blocking visual updates.</source>
          <target state="translated">Prefiera el &lt;code&gt;useEffect&lt;/code&gt; est&amp;aacute;ndar cuando sea posible para evitar bloquear las actualizaciones visuales.</target>
        </trans-unit>
        <trans-unit id="87cfce24dccded60294e74f312a7bb64c4e35de4" translate="yes" xml:space="preserve">
          <source>Preferred: Pending &amp;rarr; Skeleton &amp;rarr; Complete</source>
          <target state="translated">Preferido: Pendiente &amp;rarr; Esqueleto &amp;rarr; Completo</target>
        </trans-unit>
        <trans-unit id="fb1323678aee55ea7816c8e30aa6f1bdb912fb64" translate="yes" xml:space="preserve">
          <source>Press &amp;ldquo;Next&amp;rdquo; a few times. Notice it already feels very different. &lt;strong&gt;Instead of immediately seeing an empty screen on click, we now keep seeing the previous page for a while.&lt;/strong&gt; When the data has loaded, React transitions us to the new screen.</source>
          <target state="translated">Presione &quot;Siguiente&quot; varias veces. Note que ya se siente muy diferente. &lt;strong&gt;En lugar de ver inmediatamente una pantalla vac&amp;iacute;a al hacer clic, ahora seguimos viendo la p&amp;aacute;gina anterior por un tiempo. &lt;/strong&gt;Cuando los datos se han cargado, React nos cambia a la nueva pantalla.</target>
        </trans-unit>
        <trans-unit id="ef2165e905ee1367c14a6f33243da7d43b8b7584" translate="yes" xml:space="preserve">
          <source>Preventing Component from Rendering</source>
          <target state="translated">Evitar que el componente se renderice</target>
        </trans-unit>
        <trans-unit id="3efe0b4e061393bdaf49e8a579601b4bd4ce78de" translate="yes" xml:space="preserve">
          <source>Previously, React provided two ways for managing refs: the legacy string ref API and the callback API. Although the string ref API was the more convenient of the two, it had &lt;a href=&quot;https://github.com/facebook/react/issues/1373&quot;&gt;several downsides&lt;/a&gt; and so our official recommendation was to &lt;a href=&quot;refs-and-the-dom#legacy-api-string-refs&quot;&gt;use the callback form instead&lt;/a&gt;.</source>
          <target state="translated">Anteriormente, React proporcionaba dos formas de administrar referencias: la API de referencia de cadena heredada y la API de devoluci&amp;oacute;n de llamada. Aunque la API de referencia de cadena era la m&amp;aacute;s conveniente de las dos, ten&amp;iacute;a &lt;a href=&quot;https://github.com/facebook/react/issues/1373&quot;&gt;varias desventajas,&lt;/a&gt; por lo que nuestra recomendaci&amp;oacute;n oficial fue &lt;a href=&quot;refs-and-the-dom#legacy-api-string-refs&quot;&gt;utilizar el formulario de devoluci&amp;oacute;n de llamada&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="5f508d98b08c23e21ae8ba502e34faaa9bf61dd9" translate="yes" xml:space="preserve">
          <source>Previously, we only encountered React elements that represent DOM tags:</source>
          <target state="translated">Anteriormente,sólo encontramos elementos de React que representan etiquetas DOM:</target>
        </trans-unit>
        <trans-unit id="886739715565d2665d39c8366ec2d10dc344405d" translate="yes" xml:space="preserve">
          <source>Priority-based Rendering</source>
          <target state="translated">Rendición basada en prioridades</target>
        </trans-unit>
        <trans-unit id="bb2e2459a0759f7d2b3b0d9811210079874a39cc" translate="yes" xml:space="preserve">
          <source>Profiler API</source>
          <target state="translated">API del perfilador</target>
        </trans-unit>
        <trans-unit id="5f47591c38d90876e84e5a679c6dc16b4b65918a" translate="yes" xml:space="preserve">
          <source>Profiling Components with the Chrome Performance Tab</source>
          <target state="translated">Perfilando los componentes con la pestaña de rendimiento de cromo</target>
        </trans-unit>
        <trans-unit id="e9edfd9d87db8eb1b7c2fee04f3c7d3c4f51081d" translate="yes" xml:space="preserve">
          <source>Profiling Components with the DevTools Profiler</source>
          <target state="translated">Componentes del perfil con el perfil de DevTools</target>
        </trans-unit>
        <trans-unit id="38e01723f7448dcb8aa35875d9f81ee04d125e7e" translate="yes" xml:space="preserve">
          <source>Profiling adds some additional overhead, so &lt;strong&gt;it is disabled in &lt;a href=&quot;optimizing-performance#use-the-production-build&quot;&gt;the production build&lt;/a&gt;&lt;/strong&gt;.</source>
          <target state="translated">La creaci&amp;oacute;n de perfiles agrega algunos gastos generales adicionales, por &lt;strong&gt;lo que est&amp;aacute; deshabilitada en &lt;a href=&quot;optimizing-performance#use-the-production-build&quot;&gt;la generaci&amp;oacute;n de producci&amp;oacute;n&lt;/a&gt;&lt;/strong&gt; .</target>
        </trans-unit>
        <trans-unit id="a865967da74c8436b8d176a76b2002d968e98151" translate="yes" xml:space="preserve">
          <source>Programmatically managing focus</source>
          <target state="translated">Manejo programático del enfoque</target>
        </trans-unit>
        <trans-unit id="86cd3058a8d5775df18dce4ea57b680ca5e164b6" translate="yes" xml:space="preserve">
          <source>Progressive Hydration</source>
          <target state="translated">Hidratación progresiva</target>
        </trans-unit>
        <trans-unit id="9fb705d5e8095ddb73ff47bd5a3af904d3ea97b5" translate="yes" xml:space="preserve">
          <source>PropTypes</source>
          <target state="translated">PropTypes</target>
        </trans-unit>
        <trans-unit id="351f56a6fefd5127c90506d3e91990f1d7631787" translate="yes" xml:space="preserve">
          <source>Properties:</source>
          <target state="translated">Properties:</target>
        </trans-unit>
        <trans-unit id="2187830d82c3a1f4829ffcf9703990399389ecd1" translate="yes" xml:space="preserve">
          <source>Props Default to &amp;ldquo;True&amp;rdquo;</source>
          <target state="translated">Props predeterminado a &quot;Verdadero&quot;</target>
        </trans-unit>
        <trans-unit id="9c2d9ce6b30a5f9172862e1e2a2103f1545aae76" translate="yes" xml:space="preserve">
          <source>Props and composition give you all the flexibility you need to customize a component&amp;rsquo;s look and behavior in an explicit and safe way. Remember that components may accept arbitrary props, including primitive values, React elements, or functions.</source>
          <target state="translated">Los accesorios y la composici&amp;oacute;n le brindan toda la flexibilidad que necesita para personalizar el aspecto y el comportamiento de un componente de una manera expl&amp;iacute;cita y segura. Recuerde que los componentes pueden aceptar accesorios arbitrarios, incluidos valores primitivos, elementos React o funciones.</target>
        </trans-unit>
        <trans-unit id="78feac20bb5fc62e7459d810b7135fef805d6854" translate="yes" xml:space="preserve">
          <source>Props are Read-Only</source>
          <target state="translated">La utilería es de sólo lectura</target>
        </trans-unit>
        <trans-unit id="b33f3c7f743fb12f6a11e786a2fcb6e13d6efcfa" translate="yes" xml:space="preserve">
          <source>Props in JSX</source>
          <target state="translated">Atrezzo en JSX</target>
        </trans-unit>
        <trans-unit id="5e8dad475166c2eac08c646b3ebdf3559b8f22bb" translate="yes" xml:space="preserve">
          <source>Props vs State</source>
          <target state="translated">Atrevimiento vs.Estado</target>
        </trans-unit>
        <trans-unit id="ef11665379e87b4432e89567d3144207597dde64" translate="yes" xml:space="preserve">
          <source>Provide a mechanism to allow users to skip past navigation sections in your application as this assists and speeds up keyboard navigation.</source>
          <target state="translated">Proporcionar un mecanismo que permita a los usuarios saltarse las secciones de navegación anteriores en su aplicación,ya que esto ayuda y acelera la navegación por el teclado.</target>
        </trans-unit>
        <trans-unit id="65135d5ec4d5950c26be85cdc6405b0542ba4616" translate="yes" xml:space="preserve">
          <source>Putting Research into Production</source>
          <target state="translated">Poner la investigación en producción</target>
        </trans-unit>
        <trans-unit id="4ee9c42d60235c923278d5e44bad794e0fe45c13" translate="yes" xml:space="preserve">
          <source>Quickly Try JSX</source>
          <target state="translated">Pruebe rápidamente el JSX</target>
        </trans-unit>
        <trans-unit id="723a59bfbd4916773b778eea25c500ba0e2055e2" translate="yes" xml:space="preserve">
          <source>Race Conditions with &lt;code&gt;componentDidUpdate&lt;/code&gt;</source>
          <target state="translated">Condiciones de carrera con &lt;code&gt;componentDidUpdate&lt;/code&gt;</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
