<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="es" datatype="htmlbody" original="spring_boot">
    <body>
      <group id="spring_boot">
        <trans-unit id="44ff7951f4b61b0602175a1f747998f49c47da5c" translate="yes" xml:space="preserve">
          <source>HTTP compression</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4cf8c4860d175bf0cae9cec56dae12c68076963b" translate="yes" xml:space="preserve">
          <source>HTTP header used to transfer the shared secret.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="337ba610aa0d207b04a3d0c4fbe59b410042c4cf" translate="yes" xml:space="preserve">
          <source>HTTP method</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c2e40eff7c03fbf9aeb1aae826bbd68981ec0a3f" translate="yes" xml:space="preserve">
          <source>HTTP response compression is supported by Jetty, Tomcat, and Undertow. It can be enabled in &lt;code&gt;application.properties&lt;/code&gt;, as follows:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="661ff786e3d1a6ece2dacb28144f2d85ff0a46af" translate="yes" xml:space="preserve">
          <source>Handles the property as if it were defined by the type defined by the mandatory &lt;code&gt;target&lt;/code&gt; parameter.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="24be66c7c8f86d2159b18c626a99245f9c1b513f" translate="yes" xml:space="preserve">
          <source>Hazelcast</source>
          <target state="translated">Hazelcast</target>
        </trans-unit>
        <trans-unit id="49eaad9928826d13cea8f3ffc6d06ad306869b6a" translate="yes" xml:space="preserve">
          <source>Header that holds the incoming protocol, usually named &quot;X-Forwarded-Proto&quot;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="87398e24ea58e8cafa77352da02409bcf395978d" translate="yes" xml:space="preserve">
          <source>Health checks</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8500fc3188d53ad050bf27cea56dd89c5658efbd" translate="yes" xml:space="preserve">
          <source>Health endpoint groups.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="596d7d1f11f7c47fc7491dfe0b05b8b72f9314fb" translate="yes" xml:space="preserve">
          <source>Health information is collected from the content of a &lt;a href=&quot;https://github.com/spring-projects/spring-boot/tree/v2.4.0/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/health/HealthContributorRegistry.java&quot;&gt;&lt;code&gt;HealthContributorRegistry&lt;/code&gt;&lt;/a&gt; (by default all &lt;a href=&quot;https://github.com/spring-projects/spring-boot/tree/v2.4.0/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/health/HealthContributor.java&quot;&gt;&lt;code&gt;HealthContributor&lt;/code&gt;&lt;/a&gt; instances defined in your &lt;code&gt;ApplicationContext&lt;/code&gt;). Spring Boot includes a number of auto-configured &lt;code&gt;HealthContributors&lt;/code&gt; and you can also write your own.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="315d2dafc56ff2334bc06e16f63df9bfacb60835" translate="yes" xml:space="preserve">
          <source>Heartbeat interval after which a message is sent on an idle connection to make sure it's still alive.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="29b730ef03643872ba57b14304e6a23c419349bf" translate="yes" xml:space="preserve">
          <source>Height of the banner image in chars (default based on image height).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ccf701d1607873247d883078af966a3688a2c769" translate="yes" xml:space="preserve">
          <source>Here are some rules we follow internally to make sure descriptions are consistent:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4d50f0d374cc20157b9a45ce37e45a1c973dd15a" translate="yes" xml:space="preserve">
          <source>Here is an example &lt;code&gt;scrape_config&lt;/code&gt; to add to &lt;code&gt;prometheus.yml&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cb29a61f6a6947fc584b871dd1920356b17d203c" translate="yes" xml:space="preserve">
          <source>Here&amp;rsquo;s how you can launch your jar with a &lt;code&gt;layertools&lt;/code&gt; jar mode:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="355bfce20d63a6813688f51285c4f79c7295eb22" translate="yes" xml:space="preserve">
          <source>Heroku is another popular PaaS platform. To customize Heroku builds, you provide a &lt;code&gt;Procfile&lt;/code&gt;, which provides the incantation required to deploy an application. Heroku assigns a &lt;code&gt;port&lt;/code&gt; for the Java application to use and then ensures that routing to the external URI works.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2bc34cd4ba384991ba3b8f1bc179b424bf50b20f" translate="yes" xml:space="preserve">
          <source>Hibernate &lt;a href=&quot;https://docs.jboss.org/hibernate/orm/5.4/userguide/html_single/Hibernate_User_Guide.html#caching&quot;&gt;second-level cache&lt;/a&gt; can be configured for a range of cache providers. Rather than configuring Hibernate to lookup the cache provider again, it is better to provide the one that is available in the context whenever possible.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a181cf6a9039631c2587fc38355848d7b79cca2d" translate="yes" xml:space="preserve">
          <source>Hibernate uses &lt;a href=&quot;https://docs.jboss.org/hibernate/orm/5.4/userguide/html_single/Hibernate_User_Guide.html#naming&quot;&gt;two different naming strategies&lt;/a&gt; to map names from the object model to the corresponding database names. The fully qualified class name of the physical and the implicit strategy implementations can be configured by setting the &lt;code&gt;spring.jpa.hibernate.naming.physical-strategy&lt;/code&gt; and &lt;code&gt;spring.jpa.hibernate.naming.implicit-strategy&lt;/code&gt; properties, respectively. Alternatively, if &lt;code&gt;ImplicitNamingStrategy&lt;/code&gt; or &lt;code&gt;PhysicalNamingStrategy&lt;/code&gt; beans are available in the application context, Hibernate will be automatically configured to use them.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="76ead043c4f5e4a6c8350e2cb28a31dce6eb8daa" translate="yes" xml:space="preserve">
          <source>Hibernate&amp;rsquo;s own internal property name for this (if you happen to remember it better) is &lt;code&gt;hibernate.hbm2ddl.auto&lt;/code&gt;. You can set it, along with other Hibernate native properties, by using &lt;code&gt;spring.jpa.properties.*&lt;/code&gt; (the prefix is stripped before adding them to the entity manager). The following line shows an example of setting JPA properties for Hibernate:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a1f82f20e4fc1585b317e75ed0f68e82885488af" translate="yes" xml:space="preserve">
          <source>Hibernate: One of the most popular JPA implementations.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9e71e47d2d815155a56506a29f7bda8edfbb34d4" translate="yes" xml:space="preserve">
          <source>Higher-level Database Migration Tool</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="95fb24e64e1399f996413354177eaa0550536f94" translate="yes" xml:space="preserve">
          <source>Hikari specific settings bound to an instance of Hikari's HikariDataSource</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="00cf7740cdf83d3721f14869d591d404833fe572" translate="yes" xml:space="preserve">
          <source>Histogram type for backing DistributionSummary and Timer.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c169d8ac271f2f2073fc8bb6c6d71f06e30c9800" translate="yes" xml:space="preserve">
          <source>Homebrew installs &lt;code&gt;spring&lt;/code&gt; to &lt;code&gt;/usr/local/bin&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="04624eba7970e87b81262e69fc106496bc0a0e05" translate="yes" xml:space="preserve">
          <source>Hopefully, this section provided some of the Spring Boot basics and got you on your way to writing your own applications. If you are a task-oriented type of developer, you might want to jump over to &lt;a href=&quot;https://spring.io&quot;&gt;spring.io&lt;/a&gt; and check out some of the &lt;a href=&quot;https://spring.io/guides/&quot;&gt;getting started&lt;/a&gt; guides that solve specific &amp;ldquo;How do I do that with Spring?&amp;rdquo; problems. We also have Spring Boot-specific &amp;ldquo;&lt;a href=&quot;howto#howto&quot;&gt;How-to&lt;/a&gt;&amp;rdquo; reference documentation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="af39ed7a2558c1b59a6d125b79340958a311890a" translate="yes" xml:space="preserve">
          <source>Host of the Ganglia server to receive exported metrics.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5aa7c97f2f944e28946e31adb06733a95316b400" translate="yes" xml:space="preserve">
          <source>Host of the Graphite server to receive exported metrics.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6e83e1fa6695e05a0e832259308d61f6f8f9b960" translate="yes" xml:space="preserve">
          <source>Host of the StatsD server to receive exported metrics.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b0a65a5a882559d75807708d7bf346465bfa8b0d" translate="yes" xml:space="preserve">
          <source>Host portion of the URI</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ae3b4b9defbce35415f26485ea5e16f2f0229698" translate="yes" xml:space="preserve">
          <source>Host to export metrics to.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="79bdbcc9243c6f4e1dc1a040239794aaeda875e9" translate="yes" xml:space="preserve">
          <source>How long should normal shutdown (no-force) wait for transactions to complete.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e421535fe0f274df74fb73b41c7640faa4cde78d" translate="yes" xml:space="preserve">
          <source>How long the driver waits for a request to complete.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d90f7b3e942d26ded4c39d6e8c728e21eb545eb1" translate="yes" xml:space="preserve">
          <source>How long the response from a pre-flight request can be cached by clients. If a duration suffix is not specified, seconds will be used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4780a55bdff3de54313400a21225fa584cf504a3" translate="yes" xml:space="preserve">
          <source>How many copies of the data are stored in the cluster. Must be 1 for a single node instance.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bd96f56e99fe5f41b84504e0d312756c45d20ceb" translate="yes" xml:space="preserve">
          <source>How many rows will be retrieved simultaneously in a single network roundtrip.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="74508e8c15563f72b76e4ef17908e1655c6e9ca3" translate="yes" xml:space="preserve">
          <source>How often gauges will be polled. When a gauge is polled, its value is recalculated and if the value has changed (or publishUnchangedMeters is true), it is sent to the StatsD server.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="58bb5c407fce884752be548ec7c1bb2d6675ed07" translate="yes" xml:space="preserve">
          <source>How often idle container events should be published.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="deaf37a6040088801d4e37b9e6a4af2488aa06c8" translate="yes" xml:space="preserve">
          <source>How often the throttler attempts to dequeue requests. Set this high enough that each attempt will process multiple entries in the queue, but not delay requests too much.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="862da9a3329dfb29cf7b08a3094cf07b853a1a06" translate="yes" xml:space="preserve">
          <source>How-to documents</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a844fc80443b81d7059a9967d94ff705ed43a444" translate="yes" xml:space="preserve">
          <source>However, there is a catch. Because the actual type of the connection pool is not exposed, no keys are generated in the metadata for your custom &lt;code&gt;DataSource&lt;/code&gt; and no completion is available in your IDE (because the &lt;code&gt;DataSource&lt;/code&gt; interface exposes no properties). Also, if you happen to have Hikari on the classpath, this basic setup does not work, because Hikari has no &lt;code&gt;url&lt;/code&gt; property (but does have a &lt;code&gt;jdbcUrl&lt;/code&gt; property). In that case, you must rewrite your configuration as follows:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f9769a6ea7281f5b4c0e29fb9fa8354563aba9ca" translate="yes" xml:space="preserve">
          <source>Howto</source>
          <target state="translated">Howto</target>
        </trans-unit>
        <trans-unit id="f8efe190fdafbf842f6e5264a89351835b726caa" translate="yes" xml:space="preserve">
          <source>Humio</source>
          <target state="translated">Humio</target>
        </trans-unit>
        <trans-unit id="b727dd4633a379c5d0df43282c3bc2dcb521a076" translate="yes" xml:space="preserve">
          <source>Humio API token.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ac34ca616fafed000de521e91c9ac77f6589b732" translate="yes" xml:space="preserve">
          <source>Humio tags describing the data source in which metrics will be stored. Humio tags are a distinct concept from Micrometer's tags. Micrometer's tags are used to divide metrics along dimensional boundaries.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="89f89c02cf47e091e726a4e07b88af0966806897" translate="yes" xml:space="preserve">
          <source>ID</source>
          <target state="translated">ID</target>
        </trans-unit>
        <trans-unit id="c69ef9a9ecdd1eac0327567218425c15a7777822" translate="yes" xml:space="preserve">
          <source>ID of the custom device that is exporting metrics to Dynatrace.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7e1db88dcb14868a5bff454fe150befb53b1dec2" translate="yes" xml:space="preserve">
          <source>ID to pass to the server when making requests. Used for server-side logging.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6b4059c9b5820041f826f688b6e57c7201e42d5f" translate="yes" xml:space="preserve">
          <source>IDE</source>
          <target state="translated">IDE</target>
        </trans-unit>
        <trans-unit id="bd0ab5637e12341e8a24eec29800408c3e697562" translate="yes" xml:space="preserve">
          <source>IP: For complete details of Spring Data Solr, refer to the &lt;a href=&quot;https://docs.spring.io/spring-data/solr/docs/4.3.1/reference/html/&quot;&gt;reference documentation&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f0c927d5854559edb015965655ab58fe061a3dbc" translate="yes" xml:space="preserve">
          <source>Ideally, your application, like a Spring Boot executable jar, has everything that it needs to run packaged within it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="181f76d269990de98e38daa3a8269aaae742eb80" translate="yes" xml:space="preserve">
          <source>Identifier of the Google Cloud project to monitor.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b5ee367e9047e15d32ac7efc665527825b33db91" translate="yes" xml:space="preserve">
          <source>Idle timeout before an idle connection is removed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2919891a443d2c4e9b508a1f7a5ccaeda056f9f1" translate="yes" xml:space="preserve">
          <source>If &lt;a href=&quot;https://hazelcast.com/&quot;&gt;Hazelcast&lt;/a&gt; is on the classpath and a suitable configuration is found, Spring Boot auto-configures a &lt;code&gt;HazelcastInstance&lt;/code&gt; that you can inject in your application.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4d866136133f9a7eca15adee1389071ad2a11d70" translate="yes" xml:space="preserve">
          <source>If &lt;a href=&quot;https://redis.io/&quot;&gt;Redis&lt;/a&gt; is available and configured, a &lt;code&gt;RedisCacheManager&lt;/code&gt; is auto-configured. It is possible to create additional caches on startup by setting the &lt;code&gt;spring.cache.cache-names&lt;/code&gt; property and cache defaults can be configured by using &lt;code&gt;spring.cache.redis.*&lt;/code&gt; properties. For instance, the following configuration creates &lt;code&gt;cache1&lt;/code&gt; and &lt;code&gt;cache2&lt;/code&gt; caches with a &lt;em&gt;time to live&lt;/em&gt; of 10 minutes:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3f175d730db9428179ec751c0157d4911a62c316" translate="yes" xml:space="preserve">
          <source>If &lt;a href=&quot;https://spring.io/projects/spring-security&quot;&gt;Spring Security&lt;/a&gt; is on the classpath, then web applications are secured by default. Spring Boot relies on Spring Security&amp;rsquo;s content-negotiation strategy to determine whether to use &lt;code&gt;httpBasic&lt;/code&gt; or &lt;code&gt;formLogin&lt;/code&gt;. To add method-level security to a web application, you can also add &lt;code&gt;@EnableGlobalMethodSecurity&lt;/code&gt; with your desired settings. Additional information can be found in the &lt;a href=&quot;https://docs.spring.io/spring-security/site/docs/5.4.1/reference/html5/#jc-method&quot;&gt;Spring Security Reference Guide&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c9021cebe9fe62d92b090dbc4b9131c1a61c23d4" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;@ConfigurationProperties&lt;/code&gt; beans are registered via &lt;code&gt;@EnableConfigurationProperties&lt;/code&gt; instead of automatic scanning, the &lt;code&gt;@Profile&lt;/code&gt; annotation needs to be specified on the &lt;code&gt;@Configuration&lt;/code&gt; class that has the &lt;code&gt;@EnableConfigurationProperties&lt;/code&gt; annotation. In the case where &lt;code&gt;@ConfigurationProperties&lt;/code&gt; are scanned, &lt;code&gt;@Profile&lt;/code&gt; can be specified on the &lt;code&gt;@ConfigurationProperties&lt;/code&gt; class itself.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="da3bd32bf5a43f9c43eac7e0b5f7f52e5c2525d8" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;spring-integration-rsocket&lt;/code&gt; is available, developers can configure an RSocket server using &lt;code&gt;&quot;spring.rsocket.server.*&quot;&lt;/code&gt; properties and let it use &lt;code&gt;IntegrationRSocketEndpoint&lt;/code&gt; or &lt;code&gt;RSocketOutboundGateway&lt;/code&gt; components to handle incoming RSocket messages. This infrastructure can handle Spring Integration RSocket channel adapters and &lt;code&gt;@MessageMapping&lt;/code&gt; handlers (given &lt;code&gt;&quot;spring.integration.rsocket.server.message-mapping-enabled&quot;&lt;/code&gt; is configured).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="62a5e30d2b762b65e0ce638c3223a3ea1289dd38" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;spring.config.location&lt;/code&gt; contains directories (as opposed to files), they should end in &lt;code&gt;/&lt;/code&gt; (at runtime they will be appended with the names generated from &lt;code&gt;spring.config.name&lt;/code&gt; before being loaded). Files specified in &lt;code&gt;spring.config.location&lt;/code&gt; are used as-is. Whether specified directly or contained in a directory, configuration files must include a file extension in their name. Typical extensions that are supported out-of-the-box are &lt;code&gt;.properties&lt;/code&gt;, &lt;code&gt;.yaml&lt;/code&gt;, and &lt;code&gt;.yml&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="055532dd2f7fdcbfea087df7f8a7c6fd18713fa4" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;spring.data.mongodb.port&lt;/code&gt; is not specified, the default of &lt;code&gt;27017&lt;/code&gt; is used. You could delete this line from the example shown earlier.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8a4ff2f22f2ba74abc300770ec7039e88b0f01d8" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;spring.mail.host&lt;/code&gt; and the relevant libraries (as defined by &lt;code&gt;spring-boot-starter-mail&lt;/code&gt;) are available, a default &lt;code&gt;JavaMailSender&lt;/code&gt; is created if none exists. The sender can be further customized by configuration items from the &lt;code&gt;spring.mail&lt;/code&gt; namespace. See &lt;a href=&quot;https://github.com/spring-projects/spring-boot/tree/v2.4.0/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/mail/MailProperties.java&quot;&gt;&lt;code&gt;MailProperties&lt;/code&gt;&lt;/a&gt; for more details.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7793f01b6ff762855d1a7c363377331643282fff" translate="yes" xml:space="preserve">
          <source>If Groovy is on the classpath, you should be able to configure Logback with &lt;code&gt;logback.groovy&lt;/code&gt; as well. If present, this setting is given preference.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="69c3c8c2fbb72d838a7fd9cdec686b150abda825" translate="yes" xml:space="preserve">
          <source>If Jackson&amp;rsquo;s XML extension is not available and JAXB is available, XML can be rendered with the additional requirement of having &lt;code&gt;MyThing&lt;/code&gt; annotated as &lt;code&gt;@XmlRootElement&lt;/code&gt;, as shown in the following example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b60f2ca05b8eadaca131fa170fdaab4284a9a5a7" translate="yes" xml:space="preserve">
          <source>If Spring Data Couchbase is available and Couchbase is &lt;a href=&quot;#boot-features-couchbase&quot;&gt;configured&lt;/a&gt;, a &lt;code&gt;CouchbaseCacheManager&lt;/code&gt; is auto-configured. It is possible to create additional caches on startup by setting the &lt;code&gt;spring.cache.cache-names&lt;/code&gt; property and cache defaults can be configured by using &lt;code&gt;spring.cache.couchbase.*&lt;/code&gt; properties. For instance, the following configuration creates &lt;code&gt;cache1&lt;/code&gt; and &lt;code&gt;cache2&lt;/code&gt; caches with an entry &lt;em&gt;expiration&lt;/em&gt; of 10 minutes:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cda4bc39ef6af2c1d095920e8ca6745d66eb7b37" translate="yes" xml:space="preserve">
          <source>If Spring MVC is available, a regular MVC-based application context is configured. If you have only Spring WebFlux, we&amp;rsquo;ll detect that and configure a WebFlux-based application context instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ee4714334e20fa48cd5ae94d1b0ec04aa1c7f393" translate="yes" xml:space="preserve">
          <source>If Spring MVC is not present and Spring WebFlux is present, an &lt;code&gt;AnnotationConfigReactiveWebServerApplicationContext&lt;/code&gt; is used</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="619eb24c8bf18bdcc52fc06bf3ba0915ea5bf972" translate="yes" xml:space="preserve">
          <source>If Spring MVC is present, an &lt;code&gt;AnnotationConfigServletWebServerApplicationContext&lt;/code&gt; is used</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4e30deb11333729ab78370b1fad40f86a51171b6" translate="yes" xml:space="preserve">
          <source>If Spring Security is on the classpath and no other &lt;code&gt;WebSecurityConfigurerAdapter&lt;/code&gt; or &lt;code&gt;SecurityFilterChain&lt;/code&gt; bean is present, all actuators other than &lt;code&gt;/health&lt;/code&gt; and &lt;code&gt;/info&lt;/code&gt; are secured by Spring Boot auto-configuration. If you define a custom &lt;code&gt;WebSecurityConfigurerAdapter&lt;/code&gt; or &lt;code&gt;SecurityFilterChain&lt;/code&gt; bean, Spring Boot auto-configuration will back off and you will be in full control of actuator access rules.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c158f079e0aa6ed3abee93c691129ae9bf5683f7" translate="yes" xml:space="preserve">
          <source>If a &lt;code&gt;@WriteOperation&lt;/code&gt; or &lt;code&gt;@DeleteOperation&lt;/code&gt; returns a value, the response status will be 200 (OK). If it does not return a value the response status will be 204 (No Content).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="555dbbdcea4508877a5ac6e4ef100f4cafe8e9d4" translate="yes" xml:space="preserve">
          <source>If a &lt;code&gt;BuildProperties&lt;/code&gt; bean is available, the &lt;code&gt;info&lt;/code&gt; endpoint can also publish information about your build. This happens if a &lt;code&gt;META-INF/build-info.properties&lt;/code&gt; file is available in the classpath.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="878b1828167ebf0ddb2fb8ccb58e8fa9f50561e3" translate="yes" xml:space="preserve">
          <source>If a &lt;code&gt;ConnectionNameStrategy&lt;/code&gt; bean exists in the context, it will be automatically used to name connections created by the auto-configured &lt;code&gt;ConnectionFactory&lt;/code&gt;. See &lt;a href=&quot;https://github.com/spring-projects/spring-boot/tree/v2.4.0/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/amqp/RabbitProperties.java&quot;&gt;&lt;code&gt;RabbitProperties&lt;/code&gt;&lt;/a&gt; for more of the supported options.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b64547907637d27e39766be3337c0bacb2c6362a" translate="yes" xml:space="preserve">
          <source>If a &lt;code&gt;KafkaTransactionManager&lt;/code&gt; bean is defined, it is automatically associated to the container factory. Similarly, if a &lt;code&gt;RecordFilterStrategy&lt;/code&gt;, &lt;code&gt;ErrorHandler&lt;/code&gt;, &lt;code&gt;AfterRollbackProcessor&lt;/code&gt; or &lt;code&gt;ConsumerAwareRebalanceListener&lt;/code&gt; bean is defined, it is automatically associated to the default factory.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1a4c5233b593adbfb2e06eb911c62d5d5db69fe1" translate="yes" xml:space="preserve">
          <source>If a &lt;code&gt;com.github.benmanes.caffeine.cache.CacheLoader&lt;/code&gt; bean is defined, it is automatically associated to the &lt;code&gt;CaffeineCacheManager&lt;/code&gt;. Since the &lt;code&gt;CacheLoader&lt;/code&gt; is going to be associated with &lt;em&gt;all&lt;/em&gt; caches managed by the cache manager, it must be defined as &lt;code&gt;CacheLoader&amp;lt;Object, Object&amp;gt;&lt;/code&gt;. The auto-configuration ignores any other generic type.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1c150e197562ad976c7b1d18532d63ebbb290652" translate="yes" xml:space="preserve">
          <source>If a bean has one constructor, you can omit the &lt;code&gt;@Autowired&lt;/code&gt;, as shown in the following example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b70ccb45d93affcfbec9393d988edffc7e838e8d" translate="yes" xml:space="preserve">
          <source>If a client can&amp;rsquo;t be created, Spring Boot attempts to configure an embedded server. If you define a &lt;code&gt;com.hazelcast.config.Config&lt;/code&gt; bean, Spring Boot uses that. If your configuration defines an instance name, Spring Boot tries to locate an existing instance rather than creating a new one.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="28b05fb4690d622467833aaef015d62a67d286e5" translate="yes" xml:space="preserve">
          <source>If a config file location includes the &lt;code&gt;*&lt;/code&gt; character for the last path segment, it is considered a wildcard location. Wildcards are expanded when the config is loaded so that immediate subdirectories are also checked. Wildcard locations are particularly useful in an environment such as Kubernetes when there are multiple sources of config properties.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ca371e7a87a435914e68adfbf38f285e4ceb1edf" translate="yes" xml:space="preserve">
          <source>If a document contains a &lt;code&gt;spring.config.activate.on-profile&lt;/code&gt; key, then the profiles value (a comma-separated list of profiles or a profile expression) is fed into the Spring &lt;code&gt;Environment.acceptsProfiles()&lt;/code&gt; method. If the profile expression matches then that document is included in the final merge (otherwise, it is not), as shown in the following example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="31e8b0e1cad689d2003cc59e08a65964b543a28c" translate="yes" xml:space="preserve">
          <source>If a single Spring Session module is present on the classpath, Spring Boot uses that store implementation automatically. If you have more than one implementation, you must choose the &lt;a href=&quot;https://github.com/spring-projects/spring-boot/tree/v2.4.0/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/session/StoreType.java&quot;&gt;&lt;code&gt;StoreType&lt;/code&gt;&lt;/a&gt; that you wish to use to store the sessions. For instance, to use JDBC as the back-end store, you can configure your application as follows:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2d733a3935c451dcd567ee182f2f665f9f4868a8" translate="yes" xml:space="preserve">
          <source>If a standard &lt;code&gt;javax.cache.CacheManager&lt;/code&gt; bean is defined, it is wrapped automatically in an &lt;code&gt;org.springframework.cache.CacheManager&lt;/code&gt; implementation that the abstraction expects. No further customization is applied to it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3c32cd7f1339339f8b10bde2ae860ae735494c5d" translate="yes" xml:space="preserve">
          <source>If all instances of an application are unready, a Kubernetes Service with &lt;code&gt;type=ClusterIP&lt;/code&gt; or &lt;code&gt;NodePort&lt;/code&gt; will not accept any incoming connections. There is no HTTP error response (503 etc.) since there is no connection. A Service with &lt;code&gt;type=LoadBalancer&lt;/code&gt; might or might not accept connections, depending on the provider. A Service that has an explicit &lt;a href=&quot;https://kubernetes.io/docs/concepts/services-networking/ingress/&quot;&gt;Ingress&lt;/a&gt; will also respond in a way that depends on the implementation - the ingress service itself will have to decide how to handle the &quot;connection refused&quot; from downstream. HTTP 503 is quite likely in the case of both load balancer and ingress.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e84d3ddbeb08a38897b54a296ceea297508afe72" translate="yes" xml:space="preserve">
          <source>If an application takes longer to start than the configured liveness period, Kubernetes mention the &lt;code&gt;&quot;startupProbe&quot;&lt;/code&gt; as a possible solution. The &lt;code&gt;&quot;startupProbe&quot;&lt;/code&gt; is not necessarily needed here as the &lt;code&gt;&quot;readinessProbe&quot;&lt;/code&gt; fails until all startup tasks are done, see &lt;a href=&quot;#production-ready-kubernetes-probes-lifecycle&quot;&gt;how Probes behave during the application lifecycle&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="743cf84474cf0b6de0ab18e5b8e2167c4306a055" translate="yes" xml:space="preserve">
          <source>If an operation is invoked without a required parameter, or with a parameter that cannot be converted to the required type, the operation method will not be called and the response status will be 400 (Bad Request).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a5c35b8fc8bfc24ca6b51d0da8f0abf0e6685026" translate="yes" xml:space="preserve">
          <source>If at all possible, you should consider updating your code to only store values compliant with later Cookie specifications. If, however, you cannot change the way that cookies are written, you can instead configure Tomcat to use a &lt;code&gt;LegacyCookieProcessor&lt;/code&gt;. To switch to the &lt;code&gt;LegacyCookieProcessor&lt;/code&gt;, use an &lt;code&gt;WebServerFactoryCustomizer&lt;/code&gt; bean that adds a &lt;code&gt;TomcatContextCustomizer&lt;/code&gt;, as shown in the following example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dfd04cb565791f36a9b8f4644fba284149fdeb5f" translate="yes" xml:space="preserve">
          <source>If both are present, Spring MVC takes precedence. If you want to test a reactive web application in this scenario, you must set the &lt;code&gt;spring.main.web-application-type&lt;/code&gt; property:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a40d6d0257723db2d483d85b4439588aaedd16c0" translate="yes" xml:space="preserve">
          <source>If convention-based mapping is not flexible enough, you can use the &lt;code&gt;ServletRegistrationBean&lt;/code&gt;, &lt;code&gt;FilterRegistrationBean&lt;/code&gt;, and &lt;code&gt;ServletListenerRegistrationBean&lt;/code&gt; classes for complete control.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f87f18e085c311d14dafad53c5a708f4a1dbbfca" translate="yes" xml:space="preserve">
          <source>If defined, it is used in the default log configuration.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dde9e66690fb1adca981c303295caf5fb1cba249" translate="yes" xml:space="preserve">
          <source>If devtools configuration files are not found in &lt;code&gt;$HOME/.config/spring-boot&lt;/code&gt;, the root of the &lt;code&gt;$HOME&lt;/code&gt; directory is searched for the presence of a &lt;code&gt;.spring-boot-devtools.properties&lt;/code&gt; file. This allows you to share the devtools global configuration with applications that are on an older version of Spring Boot that does not support the &lt;code&gt;$HOME/.config/spring-boot&lt;/code&gt; location.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c116a8b3d27a9f9f4c840fa3b2698df0fee5942e" translate="yes" xml:space="preserve">
          <source>If enabled, &lt;a href=&quot;spring-boot-features#boot-features-graceful-shutdown&quot;&gt;graceful shutdown processes in-flight requests&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="619dcb98edbc2a3f73e8a69de3569a49c392f1d0" translate="yes" xml:space="preserve">
          <source>If log archive cleanup should occur when the application starts.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1403c8e2694d75b858e07fce63be63be2778cd10" translate="yes" xml:space="preserve">
          <source>If multiple auto-configurations have to be defined, there is no need to order their declarations as they are invoked in the exact same order as when running the application.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="53a789f03daaa167b3db0efcc41e88fc845ffb0b" translate="yes" xml:space="preserve">
          <source>If multiple values can be provided, use a &lt;code&gt;Collection&lt;/code&gt; or &lt;em&gt;Array&lt;/em&gt; type to teach the IDE about it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="75c2ac629f2a89814af98aab20161f20852eca85" translate="yes" xml:space="preserve">
          <source>If necessary, any &lt;code&gt;org.springframework.amqp.core.Queue&lt;/code&gt; that is defined as a bean is automatically used to declare a corresponding queue on the RabbitMQ instance.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0e006d87059067b0ef9a1b4edec92a4712010b71" translate="yes" xml:space="preserve">
          <source>If necessary, reactive indicators replace the regular ones. Also, any &lt;code&gt;HealthIndicator&lt;/code&gt; that is not handled explicitly is wrapped automatically.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="46311796bca2f2ccb4c1ddf4f64e8fd0d2f8979c" translate="yes" xml:space="preserve">
          <source>If nested POJO properties are initialized (like the &lt;code&gt;Security&lt;/code&gt; field in the preceding example), a setter is not required. If you want the binder to create the instance on the fly by using its default constructor, you need a setter.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5be4cfc9c072504c1c67b465cc564ac579428d03" translate="yes" xml:space="preserve">
          <source>If no &lt;code&gt;dispatcherType&lt;/code&gt; is specified on a filter registration, &lt;code&gt;REQUEST&lt;/code&gt; is used. This aligns with the Servlet Specification&amp;rsquo;s default dispatcher type.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d90ef7677b566e5953fa5db1fd1487642a281697" translate="yes" xml:space="preserve">
          <source>If no failure analyzers are able to handle the exception, you can still display the full conditions report to better understand what went wrong. To do so, you need to &lt;a href=&quot;#boot-features-external-config&quot;&gt;enable the &lt;code&gt;debug&lt;/code&gt; property&lt;/a&gt; or &lt;a href=&quot;#boot-features-custom-log-levels&quot;&gt;enable &lt;code&gt;DEBUG&lt;/code&gt; logging&lt;/a&gt; for &lt;code&gt;org.springframework.boot.autoconfigure.logging.ConditionEvaluationReportLoggingListener&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="50eb1241f36f7ccf6c772d161c0fef9c47a50847" translate="yes" xml:space="preserve">
          <source>If none of HikariCP, Tomcat, and DBCP2 are available and if Oracle UCP is available, we use it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="da7f3774dc12cee8bed8221a818ea637f2104713" translate="yes" xml:space="preserve">
          <source>If none of the other providers can be found, a simple implementation using a &lt;code&gt;ConcurrentHashMap&lt;/code&gt; as the cache store is configured. This is the default if no caching library is present in your application. By default, caches are created as needed, but you can restrict the list of available caches by setting the &lt;code&gt;cache-names&lt;/code&gt; property. For instance, if you want only &lt;code&gt;cache1&lt;/code&gt; and &lt;code&gt;cache2&lt;/code&gt; caches, set the &lt;code&gt;cache-names&lt;/code&gt; property as follows:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="73f2d43cd50b086f992a9982fcf6e1582796d1fc" translate="yes" xml:space="preserve">
          <source>If not empty, sets the &lt;code&gt;-x&lt;/code&gt; flag on the shell process, allowing you to see the logic in the script.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ac0dc36af4124ecf4cd68eb48849ad48e9edc5b1" translate="yes" xml:space="preserve">
          <source>If possible, JSPs should be avoided. There are several &lt;a href=&quot;#boot-features-jsp-limitations&quot;&gt;known limitations&lt;/a&gt; when using them with embedded servlet containers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3c1b1df07d8b8ff59653d1a085d7c3fba396909a" translate="yes" xml:space="preserve">
          <source>If publishing metrics to a Wavefront proxy (as described in &lt;a href=&quot;https://docs.wavefront.com/proxies_installing.html&quot;&gt;the documentation&lt;/a&gt;), the host must be in the &lt;code&gt;proxy://HOST:PORT&lt;/code&gt; format.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="07bd02d96b5a06b4f2bd2bbcd5d3b28c945589d6" translate="yes" xml:space="preserve">
          <source>If root is used to control the application&amp;rsquo;s service and you &lt;a href=&quot;#deployment-script-customization-conf-file&quot;&gt;use a &lt;code&gt;.conf&lt;/code&gt; file&lt;/a&gt; to customize its startup, the &lt;code&gt;.conf&lt;/code&gt; file is read and evaluated by the root user. It should be secured accordingly. Use &lt;code&gt;chmod&lt;/code&gt; so that the file can only be read by the owner and use &lt;code&gt;chown&lt;/code&gt; to make root the owner, as shown in the following example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="98954c15d77a8ef4352f38a4b2792a4a0041ca58" translate="yes" xml:space="preserve">
          <source>If several &lt;code&gt;CommandLineRunner&lt;/code&gt; or &lt;code&gt;ApplicationRunner&lt;/code&gt; beans are defined that must be called in a specific order, you can additionally implement the &lt;code&gt;org.springframework.core.Ordered&lt;/code&gt; interface or use the &lt;code&gt;org.springframework.core.annotation.Order&lt;/code&gt; annotation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="59f41cab262dfab33f9314a3d7c8e51d3f23e5fb" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;CacheManager&lt;/code&gt; is auto-configured by Spring Boot, you can further tune its configuration before it is fully initialized by exposing a bean that implements the &lt;code&gt;CacheManagerCustomizer&lt;/code&gt; interface. The following example sets a flag to say that &lt;code&gt;null&lt;/code&gt; values should be passed down to the underlying map:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="53122bdc7aade39f271be4307871a074e5bc2b7b" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;SpringApplication&lt;/code&gt; defaults are not to your taste, you can instead create a local instance and customize it. For example, to turn off the banner, you could write:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9f382a68f808b894e0456443881414a7046f54f1" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;dev&lt;/code&gt; profile is not active, &lt;code&gt;AcmeProperties.list&lt;/code&gt; contains one &lt;code&gt;MyPojo&lt;/code&gt; entry, as previously defined. If the &lt;code&gt;dev&lt;/code&gt; profile is enabled, however, the &lt;code&gt;list&lt;/code&gt;&lt;em&gt;still&lt;/em&gt; contains only one entry (with a name of &lt;code&gt;my another name&lt;/code&gt; and a description of &lt;code&gt;null&lt;/code&gt;). This configuration &lt;em&gt;does not&lt;/em&gt; add a second &lt;code&gt;MyPojo&lt;/code&gt; instance to the list, and it does not merge the items.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e98db77848c88167022a94b820fdab8fa352e883" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;dev&lt;/code&gt; profile is not active, &lt;code&gt;AcmeProperties.map&lt;/code&gt; contains one entry with key &lt;code&gt;key1&lt;/code&gt; (with a name of &lt;code&gt;my name 1&lt;/code&gt; and a description of &lt;code&gt;my description 1&lt;/code&gt;). If the &lt;code&gt;dev&lt;/code&gt; profile is enabled, however, &lt;code&gt;map&lt;/code&gt; contains two entries with keys &lt;code&gt;key1&lt;/code&gt; (with a name of &lt;code&gt;dev name 1&lt;/code&gt; and a description of &lt;code&gt;my description 1&lt;/code&gt;) and &lt;code&gt;key2&lt;/code&gt; (with a name of &lt;code&gt;dev name 2&lt;/code&gt; and a description of &lt;code&gt;dev description 2&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c6f645dd7aa3523f3b28248c9c4419e4c783a40d" translate="yes" xml:space="preserve">
          <source>If the authorization server does not support a JWK Set URI, you can configure the resource server with the Public Key used for verifying the signature of the JWT. This can be done using the &lt;code&gt;spring.security.oauth2.resourceserver.jwt.public-key-location&lt;/code&gt; property, where the value needs to point to a file containing the public key in the PEM-encoded x509 format.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4ec72335e88d4287317c04c96c4b0e3ea14dcb97" translate="yes" xml:space="preserve">
          <source>If the auto-configuration is relatively straightforward and does not have optional feature, merging the two modules in the starter is definitely an option.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ce0f2d4ed48020840e843232e03181a20f1ae1f8" translate="yes" xml:space="preserve">
          <source>If the class is also annotated with &lt;code&gt;@ConstructorBinding&lt;/code&gt;, a single constructor is expected and one property is created per constructor parameter. Otherwise, properties are discovered through the presence of standard getters and setters with special handling for collection and map types (that is detected even if only a getter is present). The annotation processor also supports the use of the &lt;code&gt;@Data&lt;/code&gt;, &lt;code&gt;@Getter&lt;/code&gt;, and &lt;code&gt;@Setter&lt;/code&gt; lombok annotations.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6ebb9b217c5aee846bfa9a7e3e405dd8be0bcd94" translate="yes" xml:space="preserve">
          <source>If the class is not on the classpath, you can use the &lt;code&gt;excludeName&lt;/code&gt; attribute of the annotation and specify the fully qualified name instead. If you prefer to use &lt;code&gt;@EnableAutoConfiguration&lt;/code&gt; rather than &lt;code&gt;@SpringBootApplication&lt;/code&gt;, &lt;code&gt;exclude&lt;/code&gt; and &lt;code&gt;excludeName&lt;/code&gt; are also available. Finally, you can also control the list of auto-configuration classes to exclude by using the &lt;code&gt;spring.autoconfigure.exclude&lt;/code&gt; property.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fac70f27159ca37ef35b28dcf5cf7e4e9db1ad9c" translate="yes" xml:space="preserve">
          <source>If the configuration properties are not enough and you&amp;rsquo;d like to fully control the client configuration, you can register a custom &lt;code&gt;ClientConfiguration&lt;/code&gt; bean.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a7f32b1ffc1d3256222f0bef34c08072756b55f3" translate="yes" xml:space="preserve">
          <source>If the connection to InfluxDB requires a user and password, you can set the &lt;code&gt;spring.influx.user&lt;/code&gt; and &lt;code&gt;spring.influx.password&lt;/code&gt; properties accordingly.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fb5d688790cd7a467f4b92681359014f36bf5e33" translate="yes" xml:space="preserve">
          <source>If the only change you need to make to logging is to set the levels of various loggers, you can do so in &lt;code&gt;application.properties&lt;/code&gt; by using the &quot;logging.level&quot; prefix, as shown in the following example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7920568a5f9bc4a0dae58048991026c9dccd5a0d" translate="yes" xml:space="preserve">
          <source>If the operation method returns &lt;code&gt;void&lt;/code&gt; or &lt;code&gt;Void&lt;/code&gt; the produces clause is empty. If the operation method returns a &lt;code&gt;org.springframework.core.io.Resource&lt;/code&gt;, the produces clause is &lt;code&gt;application/octet-stream&lt;/code&gt;. For all other operations the produces clause is &lt;code&gt;application/vnd.spring-boot.actuator.v2+json, application/json&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c0f86d05cc27797f90b2e394cab4d68d0dc53de7" translate="yes" xml:space="preserve">
          <source>If the port is the same for all your contact points you can use a shortcut and only specify the host names, as shown in the following example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c12facfdd4c23633129fb1e16c3452da7256c4c2" translate="yes" xml:space="preserve">
          <source>If the preceding customization techniques are too limited, you can register the &lt;code&gt;TomcatServletWebServerFactory&lt;/code&gt;, &lt;code&gt;JettyServletWebServerFactory&lt;/code&gt;, or &lt;code&gt;UndertowServletWebServerFactory&lt;/code&gt; bean yourself.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="507f5056b5c9d9ab1c6787ab2372eec9a0224d8b" translate="yes" xml:space="preserve">
          <source>If the preceding restrictions mean that you cannot use Spring Boot Loader, consider the following alternatives:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="75838280fa8fdb999d7fc38e031fc8e48fbd5bf9" translate="yes" xml:space="preserve">
          <source>If the property &lt;code&gt;spring.kafka.producer.transaction-id-prefix&lt;/code&gt; is defined, a &lt;code&gt;KafkaTransactionManager&lt;/code&gt; is automatically configured. Also, if a &lt;code&gt;RecordMessageConverter&lt;/code&gt; bean is defined, it is automatically associated to the auto-configured &lt;code&gt;KafkaTemplate&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="450d143f2958b05db32f958d3293b6d08470ef5f" translate="yes" xml:space="preserve">
          <source>If the proxy adds the commonly used &lt;code&gt;X-Forwarded-For&lt;/code&gt; and &lt;code&gt;X-Forwarded-Proto&lt;/code&gt; headers, setting &lt;code&gt;server.forward-headers-strategy&lt;/code&gt; to &lt;code&gt;NATIVE&lt;/code&gt; is enough to support those. With this option, the Web servers themselves natively support this feature; you can check their specific documentation to learn about specific behavior.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6817394d9d0fbc711a6b56ce4369f348a61715e2" translate="yes" xml:space="preserve">
          <source>If the server&amp;rsquo;s context-path has been configured to anything other than &lt;code&gt;/&lt;/code&gt;, the Cloud Foundry endpoints will not be available at the root of the application. For example, if &lt;code&gt;server.servlet.context-path=/app&lt;/code&gt;, Cloud Foundry endpoints will be available at &lt;code&gt;/app/cloudfoundryapplication/*&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c7bdde4485a673593765893af01dfe2994582e9c" translate="yes" xml:space="preserve">
          <source>If there is a &lt;code&gt;schema.ldif&lt;/code&gt; file on your classpath, it is used to initialize the server. If you want to load the initialization script from a different resource, you can also use the &lt;code&gt;spring.ldap.embedded.ldif&lt;/code&gt; property.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c418089ba6d49824b60a31f90b605497aa3ebf49" translate="yes" xml:space="preserve">
          <source>If this is not an option for you, you can create a &lt;code&gt;@SpringBootConfiguration&lt;/code&gt; somewhere in the hierarchy of your test so that it is used instead. Alternatively, you can specify a source for your test, which disables the behavior of finding a default one.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="938357f1d9338dc1aaa7b2ad3eb5024bb24f7346" translate="yes" xml:space="preserve">
          <source>If this is not enough, Spring Framework provides a &lt;a href=&quot;https://docs.spring.io/spring/docs/5.3.1/reference/html/web.html#filters-forwarded-headers&quot;&gt;ForwardedHeaderFilter&lt;/a&gt;. You can register it as a Servlet Filter in your application by setting &lt;code&gt;server.forward-headers-strategy&lt;/code&gt; is set to &lt;code&gt;FRAMEWORK&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9720a420270245d15b5d3f37ad8cc50f469502f9" translate="yes" xml:space="preserve">
          <source>If you &lt;a href=&quot;using-spring-boot#using-boot-structuring-your-code&quot;&gt;structure your code&lt;/a&gt; in a sensible way, your &lt;code&gt;@SpringBootApplication&lt;/code&gt; class is &lt;a href=&quot;#boot-features-testing-spring-boot-applications-detecting-config&quot;&gt;used by default&lt;/a&gt; as the configuration of your tests.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a2bc13b2da75c18b80cea43040478a6b09ff85fa" translate="yes" xml:space="preserve">
          <source>If you absolutely must use XML based configuration, we recommend that you still start with a &lt;code&gt;@Configuration&lt;/code&gt; class. You can then use an &lt;code&gt;@ImportResource&lt;/code&gt; annotation to load XML configuration files.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6572581dbbf90ba690ae50f96e3e884079122cdf" translate="yes" xml:space="preserve">
          <source>If you accidentally run a web application twice, you see a &amp;ldquo;Port already in use&amp;rdquo; error. STS users can use the &lt;code&gt;Relaunch&lt;/code&gt; button rather than the &lt;code&gt;Run&lt;/code&gt; button to ensure that any existing instance is closed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e1f6d39c40b48958aacacd44e321a6e83d99a71e" translate="yes" xml:space="preserve">
          <source>If you add a &lt;code&gt;@Bean&lt;/code&gt; annotated with &lt;code&gt;@Endpoint&lt;/code&gt;, any methods annotated with &lt;code&gt;@ReadOperation&lt;/code&gt;, &lt;code&gt;@WriteOperation&lt;/code&gt;, or &lt;code&gt;@DeleteOperation&lt;/code&gt; are automatically exposed over JMX and, in a web application, over HTTP as well. Endpoints can be exposed over HTTP using Jersey, Spring MVC, or Spring WebFlux. If both Jersey and Spring MVC are available, Spring MVC will be used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="67f18b9ae92f26f1aa4dcca11f50389d720d423d" translate="yes" xml:space="preserve">
          <source>If you add your own &lt;code&gt;@Bean&lt;/code&gt; of any of the auto-configured types, it replaces the default (except in the case of &lt;code&gt;RedisTemplate&lt;/code&gt;, when the exclusion is based on the bean name, &lt;code&gt;redisTemplate&lt;/code&gt;, not its type). By default, if &lt;code&gt;commons-pool2&lt;/code&gt; is on the classpath, you get a pooled connection factory.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="50d01e9789f329fdebc1709bbba3de62ad935b6c" translate="yes" xml:space="preserve">
          <source>If you add your own &lt;code&gt;@Bean&lt;/code&gt; of type &lt;code&gt;CassandraTemplate&lt;/code&gt;, it replaces the default.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bcccf0c6196520ed57bd7f60c16e9dc6504a06a0" translate="yes" xml:space="preserve">
          <source>If you add your own &lt;code&gt;@Bean&lt;/code&gt; of type &lt;code&gt;SolrClient&lt;/code&gt;, it replaces the default.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4595e495abf61cd45cccb50264a6f58438118a97" translate="yes" xml:space="preserve">
          <source>If you are building a jar, package the application&amp;rsquo;s classes and resources in a nested &lt;code&gt;BOOT-INF/classes&lt;/code&gt; directory. If you are building a war, package the application&amp;rsquo;s classes in a nested &lt;code&gt;WEB-INF/classes&lt;/code&gt; directory as usual.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2b29e54ab72ab11ae441281bb367e30c45f51553" translate="yes" xml:space="preserve">
          <source>If you are comfortable with Spring Boot&amp;rsquo;s core features, you can continue on and read about &lt;a href=&quot;production-ready-features#production-ready&quot;&gt;production-ready features&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9c3c4e22e933d7a0ffc223493d8921e6950547f4" translate="yes" xml:space="preserve">
          <source>If you are configuring a component yourself, you can use an &lt;code&gt;EntityManagerFactoryDependsOnPostProcessor&lt;/code&gt; subclass as a convenient way of setting up the necessary dependencies. For example, if you use Hibernate Search with Elasticsearch as its index manager, any &lt;code&gt;EntityManagerFactory&lt;/code&gt; beans must be configured to depend on the &lt;code&gt;elasticsearchClient&lt;/code&gt; bean, as shown in the following example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4b8d3f76056010f2181140beaccd4e002aabd43d" translate="yes" xml:space="preserve">
          <source>If you are deploying to a classic Application Server, you could also use a JNDI variable named &lt;code&gt;java:comp/env/spring.application.json&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6a29ed9b81fc6ff3fe527585e8c36700325163a6" translate="yes" xml:space="preserve">
          <source>If you are developing a web application, Spring Boot Actuator auto-configures all enabled endpoints to be exposed over HTTP. The default convention is to use the &lt;code&gt;id&lt;/code&gt; of the endpoint with a prefix of &lt;code&gt;/actuator&lt;/code&gt; as the URL path. For example, &lt;code&gt;health&lt;/code&gt; is exposed as &lt;code&gt;/actuator/health&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0b10fc81848fdd572323eaba1e4af494bafd7528" translate="yes" xml:space="preserve">
          <source>If you are familiar with the Spring Test Framework, you may be used to using &lt;code&gt;@ContextConfiguration(classes=&amp;hellip;​)&lt;/code&gt; in order to specify which Spring &lt;code&gt;@Configuration&lt;/code&gt; to load. Alternatively, you might have often used nested &lt;code&gt;@Configuration&lt;/code&gt; classes within your test.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="07a77d13b8d2f66e4a3961132ded0f3a82aff58e" translate="yes" xml:space="preserve">
          <source>If you are getting started with Spring Boot or 'Spring' in general, start with &lt;a href=&quot;getting-started#getting-started&quot;&gt;the following topics&lt;/a&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b87acbd8399c832a91318bfdad0ffbca68d194ae" translate="yes" xml:space="preserve">
          <source>If you are getting started with Spring Boot, or &amp;ldquo;Spring&amp;rdquo; in general, start by reading this section. It answers the basic &amp;ldquo;what?&amp;rdquo;, &amp;ldquo;how?&amp;rdquo; and &amp;ldquo;why?&amp;rdquo; questions. It includes an introduction to Spring Boot, along with installation instructions. We then walk you through building your first Spring Boot application, discussing some core principles as we go.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d02caee9c6a775f48b8edf664eb3c2cc5dc83fd0" translate="yes" xml:space="preserve">
          <source>If you are interested in how the build tool plugins work, you can look at the &lt;a href=&quot;https://github.com/spring-projects/spring-boot/tree/v2.4.0/spring-boot-project/spring-boot-tools&quot;&gt;&lt;code&gt;spring-boot-tools&lt;/code&gt;&lt;/a&gt; module on GitHub. More technical details of the executable jar format are covered in &lt;a href=&quot;appendix-executable-jar-format#executable-jar&quot;&gt;the appendix&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f664aa6febe2198a322baa1998404745c525c05e" translate="yes" xml:space="preserve">
          <source>If you are new to Java development or if you want to experiment with Spring Boot, you might want to try the &lt;a href=&quot;#getting-started-installing-the-cli&quot;&gt;Spring Boot CLI&lt;/a&gt; (Command Line Interface) first. Otherwise, read on for &amp;ldquo;classic&amp;rdquo; installation instructions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="87c66314e663a40531bbedebffff7912021ed63f" translate="yes" xml:space="preserve">
          <source>If you are not using Spring Boot&amp;rsquo;s developer tools but would still like to make use of H2&amp;rsquo;s console, you can configure the &lt;code&gt;spring.h2.console.enabled&lt;/code&gt; property with a value of &lt;code&gt;true&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f38b724d33ac1d7ed73d9389ad79f5442de48eaa" translate="yes" xml:space="preserve">
          <source>If you are on a Mac and use &lt;a href=&quot;https://brew.sh/&quot;&gt;Homebrew&lt;/a&gt;, you can install the Spring Boot CLI by using the following commands:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a8119afcf8162105ee3ab4130bcdec0a6e584867" translate="yes" xml:space="preserve">
          <source>If you are on a Mac and use &lt;a href=&quot;https://www.macports.org/&quot;&gt;MacPorts&lt;/a&gt;, you can install the Spring Boot CLI by using the following command:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3ed2de546bfcfab7e7eb5aac5f84c9aa17d93fb8" translate="yes" xml:space="preserve">
          <source>If you are on a Windows and use &lt;a href=&quot;https://scoop.sh/&quot;&gt;Scoop&lt;/a&gt;, you can install the Spring Boot CLI by using the following commands:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9e7d76094ebcca26c44cfb5c738d72c9ec56ce86" translate="yes" xml:space="preserve">
          <source>If you are running a web application, Spring Boot by default registers &lt;a href=&quot;https://docs.spring.io/spring/docs/5.3.1/javadoc-api/org/springframework/orm/jpa/support/OpenEntityManagerInViewInterceptor.html&quot;&gt;&lt;code&gt;OpenEntityManagerInViewInterceptor&lt;/code&gt;&lt;/a&gt; to apply the &amp;ldquo;Open EntityManager in View&amp;rdquo; pattern, to allow for lazy loading in web views. If you do not want this behavior, you should set &lt;code&gt;spring.jpa.open-in-view&lt;/code&gt; to &lt;code&gt;false&lt;/code&gt; in your &lt;code&gt;application.properties&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f24aad1ae61a013d291b076f53a6a504da8a3bdf" translate="yes" xml:space="preserve">
          <source>If you are running your application from a container, you can use an executable jar, but it is also often an advantage to explode it and run it in a different way. Certain PaaS implementations may also choose to unpack archives before they run. For example, Cloud Foundry operates this way. One way to run an unpacked archive is by starting the appropriate launcher, as follows:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f500b897c7e1dcbfd2e6db40454ee8a0d701da25" translate="yes" xml:space="preserve">
          <source>If you are running your application in an application server, Spring Boot tries to locate a JMS &lt;code&gt;ConnectionFactory&lt;/code&gt; by using JNDI. By default, the &lt;code&gt;java:/JmsXA&lt;/code&gt; and &lt;code&gt;java:/XAConnectionFactory&lt;/code&gt; location are checked. You can use the &lt;code&gt;spring.jms.jndi-name&lt;/code&gt; property if you need to specify an alternative location, as shown in the following example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="082aa1b4cce3cd4b57250ce9b0e535a2df1b53f7" translate="yes" xml:space="preserve">
          <source>If you are starting out with Spring Boot, you should probably read the &lt;em&gt;&lt;a href=&quot;getting-started#getting-started&quot;&gt;Getting Started&lt;/a&gt;&lt;/em&gt; guide before diving into this section.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2c7003763f7d393e0290a03524f2812f878c3b07" translate="yes" xml:space="preserve">
          <source>If you are upgrading a &lt;code&gt;Long&lt;/code&gt; property, make sure to define the unit (using &lt;code&gt;@DataSizeUnit&lt;/code&gt;) if it isn&amp;rsquo;t bytes. Doing so gives a transparent upgrade path while supporting a much richer format.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d1e8c841b81187520acb48dedfb31c7475af32d0" translate="yes" xml:space="preserve">
          <source>If you are upgrading a &lt;code&gt;Long&lt;/code&gt; property, make sure to define the unit (using &lt;code&gt;@DurationUnit&lt;/code&gt;) if it isn&amp;rsquo;t milliseconds. Doing so gives a transparent upgrade path while supporting a much richer format.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="19ce29d23a14fce2ca2d47733135ce6dd14b5565" translate="yes" xml:space="preserve">
          <source>If you are upgrading from the &lt;code&gt;1.x&lt;/code&gt; release of Spring Boot, check the &lt;a href=&quot;https://github.com/spring-projects/spring-boot/wiki/Spring-Boot-2.0-Migration-Guide&quot;&gt;&amp;ldquo;migration guide&amp;rdquo; on the project wiki&lt;/a&gt; that provides detailed upgrade instructions. Check also the &lt;a href=&quot;https://github.com/spring-projects/spring-boot/wiki&quot;&gt;&amp;ldquo;release notes&amp;rdquo;&lt;/a&gt; for a list of &amp;ldquo;new and noteworthy&amp;rdquo; features for each release.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2e85e2e7242fe9c0487d2e275c3de6ed475314e9" translate="yes" xml:space="preserve">
          <source>If you are using &lt;code&gt;@SpyBean&lt;/code&gt; to spy on a bean with &lt;code&gt;@Cacheable&lt;/code&gt; methods that refer to parameters by name, your application must be compiled with &lt;code&gt;-parameters&lt;/code&gt;. This ensures that the parameter names are available to the caching infrastructure once the bean has been spied upon.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="986fe72d55eb2734bc7baeddfefa3aeb789f25f7" translate="yes" xml:space="preserve">
          <source>If you are using AspectJ in your project, you need to make sure that the annotation processor runs only once. There are several ways to do this. With Maven, you can configure the &lt;code&gt;maven-apt-plugin&lt;/code&gt; explicitly and add the dependency to the annotation processor only there. You could also let the AspectJ plugin run all the processing and disable annotation processing in the &lt;code&gt;maven-compiler-plugin&lt;/code&gt; configuration, as follows:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d34fea382f6e985144c677ce737b467f54855bf9" translate="yes" xml:space="preserve">
          <source>If you are using JUnit 4, don&amp;rsquo;t forget to also add &lt;code&gt;@RunWith(SpringRunner.class)&lt;/code&gt; to your test, otherwise the annotations will be ignored. If you are using JUnit 5, there&amp;rsquo;s no need to add the equivalent &lt;code&gt;@ExtendWith(SpringExtension.class)&lt;/code&gt; as &lt;code&gt;@SpringBootTest&lt;/code&gt; and the other &lt;code&gt;@&amp;hellip;Test&lt;/code&gt; annotations are already annotated with it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b8cabbb921d4dcce379b0a86b0046f39cb62272a" translate="yes" xml:space="preserve">
          <source>If you are using R2DBC, the regular &lt;code&gt;DataSource&lt;/code&gt; auto-configuration backs off so none of the options described above can be used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c2e8de4489cd31b099072b3085552c2a680e1d2b" translate="yes" xml:space="preserve">
          <source>If you are using Spring Security and want to access the principal in an error page, you must configure Spring Security&amp;rsquo;s filter to be invoked on error dispatches. To do so, set the &lt;code&gt;spring.security.filter.dispatcher-types&lt;/code&gt; property to &lt;code&gt;async, error, forward, request&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dfe22ff6e01c6cfef79e8663750e04704e48b3b7" translate="yes" xml:space="preserve">
          <source>If you are using Tomcat and terminating SSL at the proxy, &lt;code&gt;server.tomcat.redirect-context-root&lt;/code&gt; should be set to &lt;code&gt;false&lt;/code&gt;. This allows the &lt;code&gt;X-Forwarded-Proto&lt;/code&gt; header to be honored before any redirects are performed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bfd7838128881e3fb03548b986c6f1d54266c73f" translate="yes" xml:space="preserve">
          <source>If you are using a &lt;a href=&quot;spring-boot-features#howto-use-a-higher-level-database-migration-tool&quot;&gt;Higher-level Database Migration Tool&lt;/a&gt;, like Flyway or Liquibase, you should use them alone to create and initialize the schema. Using the basic &lt;code&gt;schema.sql&lt;/code&gt; and &lt;code&gt;data.sql&lt;/code&gt; scripts alongside Flyway or Liquibase is not recommended and support will be removed in a future release.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c131f23884a2011494b4ed0eecf08b99d8079b9b" translate="yes" xml:space="preserve">
          <source>If you are using an &lt;code&gt;additional-spring-configuration-metadata.json&lt;/code&gt; file, the &lt;code&gt;compileJava&lt;/code&gt; task should be configured to depend on the &lt;code&gt;processResources&lt;/code&gt; task, as shown in the following example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8b956c5c5ac128896b08fe62ec5930aa1c6e8511" translate="yes" xml:space="preserve">
          <source>If you are using the Logback, it&amp;rsquo;s possible to fine-tune log rotation settings using your &lt;code&gt;application.properties&lt;/code&gt; or &lt;code&gt;application.yaml&lt;/code&gt; file. For all other logging system, you&amp;rsquo;ll need to configure rotation settings directly yourself (for example, if you use Log4J2 then you could add a &lt;code&gt;log4j.xml&lt;/code&gt; file).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="edf243125d0c77115aa8fca8edbbb8b2b9375874" translate="yes" xml:space="preserve">
          <source>If you are using the reactive driver, Netty is required for SSL. The auto-configuration configures this factory automatically if Netty is available and the factory to use hasn&amp;rsquo;t been customized already.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="05520dba572bb1905e02c1e6e1ec3df9015e5fe7" translate="yes" xml:space="preserve">
          <source>If you are using this feature in your tests, you may notice that the same database is reused by your whole test suite regardless of the number of application contexts that you use. If you want to make sure that each context has a separate embedded database, you should set &lt;code&gt;spring.datasource.generate-unique-name&lt;/code&gt; to &lt;code&gt;true&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="05e6855885545354f8fd8ce0c037ee718eb5398b" translate="yes" xml:space="preserve">
          <source>If you are using this feature in your tests, you may notice that the same database is reused by your whole test suite regardless of the number of application contexts that you use. If you want to make sure that each context has a separate embedded database, you should set &lt;code&gt;spring.r2dbc.generate-unique-name&lt;/code&gt; to &lt;code&gt;true&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9dd8c015cf84b363aa62ca5e595e0231f5e6cd92" translate="yes" xml:space="preserve">
          <source>If you cannot directly import your project into your IDE, you may be able to generate IDE metadata by using a build plugin. Maven includes plugins for &lt;a href=&quot;https://maven.apache.org/plugins/maven-eclipse-plugin/&quot;&gt;Eclipse&lt;/a&gt; and &lt;a href=&quot;https://maven.apache.org/plugins/maven-idea-plugin/&quot;&gt;IDEA&lt;/a&gt;. Gradle offers plugins for &lt;a href=&quot;https://docs.gradle.org/current/userguide/userguide.html&quot;&gt;various IDEs&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2e1416e745b3105c9ecfa3be5a4e9a97b683dc41" translate="yes" xml:space="preserve">
          <source>If you cannot rearrange your code as recommended above, Spring Boot&amp;rsquo;s Maven and Gradle plugins must be configured to produce a separate artifact that is suitable for use as a dependency. The executable archive cannot be used as a dependency as the &lt;a href=&quot;appendix-executable-jar-format#executable-jar-jar-file-structure&quot;&gt;executable jar format&lt;/a&gt; packages application classes in &lt;code&gt;BOOT-INF/classes&lt;/code&gt;. This means that they cannot be found when the executable jar is used as a dependency.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="067795ebdf1ea98f333665ce2d5b161d9e32b9e8" translate="yes" xml:space="preserve">
          <source>If you configured Spring Boot&amp;rsquo;s Maven or Gradle plugin to generate a &lt;a href=&quot;#deployment-install&quot;&gt;fully executable jar&lt;/a&gt;, and you do not use a custom &lt;code&gt;embeddedLaunchScript&lt;/code&gt;, your application can be used as an &lt;code&gt;init.d&lt;/code&gt; service. To do so, symlink the jar to &lt;code&gt;init.d&lt;/code&gt; to support the standard &lt;code&gt;start&lt;/code&gt;, &lt;code&gt;stop&lt;/code&gt;, &lt;code&gt;restart&lt;/code&gt;, and &lt;code&gt;status&lt;/code&gt; commands.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="98908532d1f8d21726a3861095dedde92d9849d6" translate="yes" xml:space="preserve">
          <source>If you create your own &lt;code&gt;DataSource&lt;/code&gt;, the auto-configuration backs off. In the following example, we provide the &lt;em&gt;exact&lt;/em&gt; same feature set as the auto-configuration provides on the primary data source:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2672658ebc1866e6d769e12ae0ce9c5706ba2f3b" translate="yes" xml:space="preserve">
          <source>If you define a &lt;code&gt;@Configuration&lt;/code&gt; with a &lt;code&gt;WebSecurityConfigurerAdapter&lt;/code&gt; or a &lt;code&gt;SecurityFilterChain&lt;/code&gt; bean in your application, it switches off the default webapp security settings in Spring Boot.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c636f1aaf4734726a0548a7390524c321ca38041" translate="yes" xml:space="preserve">
          <source>If you define a set of configuration keys for your own components, we recommend you group them in a POJO annotated with &lt;code&gt;@ConfigurationProperties&lt;/code&gt;. Doing so will provide you with structured, type-safe object that you can inject into your own beans.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8c35739402b23e941af22d8094f19e566b03d4b5" translate="yes" xml:space="preserve">
          <source>If you deploy applications behind a firewall, you may prefer that all your actuator endpoints can be accessed without requiring authentication. You can do so by changing the &lt;code&gt;management.endpoints.web.exposure.include&lt;/code&gt; property, as follows:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="883fd3f10db0d06e07b96d09a42c261f2b172826" translate="yes" xml:space="preserve">
          <source>If you deploy your Spring Boot application to an Application Server, you might want to configure and manage your DataSource by using your Application Server&amp;rsquo;s built-in features and access it by using JNDI.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fb3dbe4457474d9e997af1f8f93f241a3f364bc6" translate="yes" xml:space="preserve">
          <source>If you develop a RESTful API that makes use of hypermedia, Spring Boot provides auto-configuration for Spring HATEOAS that works well with most applications. The auto-configuration replaces the need to use &lt;code&gt;@EnableHypermediaSupport&lt;/code&gt; and registers a number of beans to ease building hypermedia-based applications, including a &lt;code&gt;LinkDiscoverers&lt;/code&gt; (for client side support) and an &lt;code&gt;ObjectMapper&lt;/code&gt; configured to correctly marshal responses into the desired representation. The &lt;code&gt;ObjectMapper&lt;/code&gt; is customized by setting the various &lt;code&gt;spring.jackson.*&lt;/code&gt; properties or, if one exists, by a &lt;code&gt;Jackson2ObjectMapperBuilder&lt;/code&gt; bean.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e640f000e6c85523f506a8513e0dc4ae9704d1e3" translate="yes" xml:space="preserve">
          <source>If you develop features for the CLI and want access to the version you built, use the following commands:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6d96532f6bfc3ad5c05d22aa7064c0fc1c162c75" translate="yes" xml:space="preserve">
          <source>If you directly use &lt;code&gt;@ComponentScan&lt;/code&gt; (that is, not through &lt;code&gt;@SpringBootApplication&lt;/code&gt;) you need to register the &lt;code&gt;TypeExcludeFilter&lt;/code&gt; with it. See &lt;a href=&quot;https://docs.spring.io/spring-boot/docs/2.4.0/api/org/springframework/boot/context/TypeExcludeFilter.html&quot;&gt;the Javadoc&lt;/a&gt; for details.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cd797ff5b99b886acbfe487fea3802da0e0e0b96" translate="yes" xml:space="preserve">
          <source>If you do not add any specific cache library, Spring Boot auto-configures a &lt;a href=&quot;#boot-features-caching-provider-simple&quot;&gt;simple provider&lt;/a&gt; that uses concurrent maps in memory. When a cache is required (such as &lt;code&gt;piDecimals&lt;/code&gt; in the preceding example), this provider creates it for you. The simple provider is not really recommended for production usage, but it is great for getting started and making sure that you understand the features. When you have made up your mind about the cache provider to use, please make sure to read its documentation to figure out how to configure the caches that your application uses. Nearly all providers require you to explicitly configure every cache that you use in the application. Some offer a way to customize the default caches defined by the &lt;code&gt;spring.cache.cache-names&lt;/code&gt; property.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e1195ef13fcdbb776b42405c681e2cdd130ce13d" translate="yes" xml:space="preserve">
          <source>If you do not configure a custom port, the embedded support uses a random port (rather than 27017) by default.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="572e4a51e86ee775c1d5a55bd855c853dafc1900" translate="yes" xml:space="preserve">
          <source>If you do not like &lt;code&gt;application&lt;/code&gt; as the configuration file name, you can switch to another file name by specifying a &lt;code&gt;spring.config.name&lt;/code&gt; environment property. You can also refer to an explicit location by using the &lt;code&gt;spring.config.location&lt;/code&gt; environment property (which is a comma-separated list of directory locations or file paths). The following example shows how to specify a different file name:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="77ea2d44a9405526e6b8c24fef8f43264ba0a980" translate="yes" xml:space="preserve">
          <source>If you do not like having the config file next to the jar file, you can set a &lt;code&gt;CONF_FOLDER&lt;/code&gt; environment variable to customize the location of the config file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c4bfbdb330c48412b055343c957c46e353da2761" translate="yes" xml:space="preserve">
          <source>If you do not need to customize these providers, you can set the &lt;code&gt;provider&lt;/code&gt; attribute to the one for which you need to infer defaults. Also, if the key for the client registration matches a default supported provider, Spring Boot infers that as well.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="286bd44c15de3af8649c2960e6f83645cf0b5f9b" translate="yes" xml:space="preserve">
          <source>If you do not see the app manifest, your installation of scoop might be out-of-date. In that case, run &lt;code&gt;scoop update&lt;/code&gt; and try again.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4873e99b17e201f7a7608b884527c464dacc55ed" translate="yes" xml:space="preserve">
          <source>If you do not see the formula, your installation of brew might be out-of-date. In that case, run &lt;code&gt;brew update&lt;/code&gt; and try again.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="596fd66868a8d0bfe49b534d11df783839bdeae0" translate="yes" xml:space="preserve">
          <source>If you do not specify any order on your custom &lt;code&gt;RepositoryRestConfigurer&lt;/code&gt;, it runs after the one Spring Boot uses internally. If you need to specify an order, make sure it is higher than 0.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="99500ffbaeb6ae788d7f4d830ac1edeb70424552" translate="yes" xml:space="preserve">
          <source>If you do not use &lt;code&gt;Repackager.setMainClass()&lt;/code&gt; to specify a main class, the repackager uses &lt;a href=&quot;https://asm.ow2.io/&quot;&gt;ASM&lt;/a&gt; to read class files and tries to find a suitable class with a &lt;code&gt;public static void main(String[] args)&lt;/code&gt; method. An exception is thrown if more than one candidate is found.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c6a503e19e5acfc17e937caaab83c896a3cf8668" translate="yes" xml:space="preserve">
          <source>If you do not use Spring Data MongoDB, you can inject a &lt;code&gt;MongoClient&lt;/code&gt; bean instead of using &lt;code&gt;MongoDatabaseFactory&lt;/code&gt;. If you want to take complete control of establishing the MongoDB connection, you can also declare your own &lt;code&gt;MongoDatabaseFactory&lt;/code&gt; or &lt;code&gt;MongoClient&lt;/code&gt; bean.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1c70dec476cb39d4fcd78e29d7a2699c63c9bfa1" translate="yes" xml:space="preserve">
          <source>If you do not use the parent POM, you can still use the plugin. However, you must additionally add an &lt;code&gt;&amp;lt;executions&amp;gt;&lt;/code&gt; section, as follows:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="677dbf12d0613ba78be9f9db6bf7adb956f8da82" translate="yes" xml:space="preserve">
          <source>If you do not use the starter parent, you need to include the following element inside the &lt;code&gt;&amp;lt;build/&amp;gt;&lt;/code&gt; element of your &lt;code&gt;pom.xml&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2907284a0f32eaabb6e660a7826923fe16ee9bfe" translate="yes" xml:space="preserve">
          <source>If you do not want command line properties to be added to the &lt;code&gt;Environment&lt;/code&gt;, you can disable them by using &lt;code&gt;SpringApplication.setAddCommandLineProperties(false)&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8c2e51c44b2cdbd1cb4a58de5a5a3fe0b63092cd" translate="yes" xml:space="preserve">
          <source>If you do not want to expose endpoints over HTTP, you can set the management port to &lt;code&gt;-1&lt;/code&gt;, as shown in the following example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4e0f28203faca6817dff4899ca6c20a857a0b05c" translate="yes" xml:space="preserve">
          <source>If you do not want to expose endpoints over JMX, you can set the &lt;code&gt;management.endpoints.jmx.exposure.exclude&lt;/code&gt; property to &lt;code&gt;*&lt;/code&gt;, as shown in the following example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="93dd06ce93bb75b2d0727e88330dd3009585812b" translate="yes" xml:space="preserve">
          <source>If you do not want to start the LiveReload server when your application runs, you can set the &lt;code&gt;spring.devtools.livereload.enabled&lt;/code&gt; property to &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fa9ab43ed20166ff6c7204b4fe4a4c178037c931" translate="yes" xml:space="preserve">
          <source>If you do not want to use the &lt;code&gt;spring-boot-antlib&lt;/code&gt; module, see the &lt;em&gt;&lt;a href=&quot;howto#howto-build-an-executable-archive-with-ant&quot;&gt;howto.html&lt;/a&gt;&lt;/em&gt; &amp;ldquo;How-to&amp;rdquo; .</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b52c60b926effc5b5e0ba51384a4c8045d036ace" translate="yes" xml:space="preserve">
          <source>If you do not want to use the restart feature, you can disable it by using the &lt;code&gt;spring.devtools.restart.enabled&lt;/code&gt; property. In most cases, you can set this property in your &lt;code&gt;application.properties&lt;/code&gt; (doing so still initializes the restart classloader, but it does not watch for file changes).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c2b75265e218cea2fb1af5a03a4a478853886f8a" translate="yes" xml:space="preserve">
          <source>If you do so and your application uses a cache not listed, then it fails at runtime when the cache is needed, but not on startup. This is similar to the way the &quot;real&quot; cache providers behave if you use an undeclared cache.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3d6ad7a26bac332848a4fd11fe808ec3172723b8" translate="yes" xml:space="preserve">
          <source>If you do want to use &lt;code&gt;@Value&lt;/code&gt;, we recommend that you refer to property names using their canonical form (kebab-case using only lowercase letters). This will allow Spring Boot to use the same logic as it does when relaxed binding &lt;code&gt;@ConfigurationProperties&lt;/code&gt;. For example, &lt;code&gt;@Value(&quot;{demo.item-price}&quot;)&lt;/code&gt; will pick up &lt;code&gt;demo.item-price&lt;/code&gt; and &lt;code&gt;demo.itemPrice&lt;/code&gt; forms from the &lt;code&gt;application.properties&lt;/code&gt; file, as well as &lt;code&gt;DEMO_ITEMPRICE&lt;/code&gt; from the system environment. If you used &lt;code&gt;@Value(&quot;{demo.itemPrice}&quot;)&lt;/code&gt; instead, &lt;code&gt;demo.item-price&lt;/code&gt; and &lt;code&gt;DEMO_ITEMPRICE&lt;/code&gt; would not be considered.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4d5f96d57fb2ec3e8c3e49ab96f21c0959ef416d" translate="yes" xml:space="preserve">
          <source>If you don&amp;rsquo;t want property defaults to be applied you can set &lt;code&gt;spring.devtools.add-properties&lt;/code&gt; to &lt;code&gt;false&lt;/code&gt; in your &lt;code&gt;application.properties&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7e2da155550874f24176eb06dfdec04fe5f01ee0" translate="yes" xml:space="preserve">
          <source>If you don&amp;rsquo;t want to use &lt;code&gt;@SpringBootApplication&lt;/code&gt;, the &lt;code&gt;@EnableAutoConfiguration&lt;/code&gt; and &lt;code&gt;@ComponentScan&lt;/code&gt; annotations that it imports defines that behaviour so you can also use those instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="80ab4b1c1c2897e0159588c65363cabc38e591d7" translate="yes" xml:space="preserve">
          <source>If you enable the &lt;code&gt;addResources&lt;/code&gt; flag, the &lt;code&gt;spring-boot:run&lt;/code&gt; goal can add &lt;code&gt;src/main/resources&lt;/code&gt; directly to the classpath (for hot reloading purposes). Doing so circumvents the resource filtering and this feature. Instead, you can use the &lt;code&gt;exec:java&lt;/code&gt; goal or customize the plugin&amp;rsquo;s configuration. See the &lt;a href=&quot;https://docs.spring.io/spring-boot/docs/2.4.0/maven-plugin/reference/htmlsingle/#getting-started&quot;&gt;plugin usage page&lt;/a&gt; for more details.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8ff516b1e62a693a880fccb43f25eb15cd3727ad" translate="yes" xml:space="preserve">
          <source>If you expect the Cloud Foundry endpoints to always be available at &lt;code&gt;/cloudfoundryapplication/*&lt;/code&gt;, regardless of the server&amp;rsquo;s context-path, you will need to explicitly configure that in your application. The configuration will differ depending on the web server in use. For Tomcat, the following configuration can be added:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="40c810cd0a33485d530f19aa3ebc15e39e3aa177" translate="yes" xml:space="preserve">
          <source>If you find that restarts are not quick enough for your applications or you encounter classloading issues, you could consider reloading technologies such as &lt;a href=&quot;https://jrebel.com/software/jrebel/&quot;&gt;JRebel&lt;/a&gt; from ZeroTurnaround. These work by rewriting classes as they are loaded to make them more amenable to reloading.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5f39d7b76b4bbc17ab19022256a5a99a7a4a4ae1" translate="yes" xml:space="preserve">
          <source>If you find that specific auto-configuration classes that you do not want are being applied, you can use the exclude attribute of &lt;code&gt;@SpringBootApplication&lt;/code&gt; to disable them, as shown in the following example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6d8aa4cc188a729fd6c328c3f0b822ba927ff71a" translate="yes" xml:space="preserve">
          <source>If you find that you reach the limit of the CLI tool, you probably want to look at converting your application to a full Gradle or Maven built &amp;ldquo;Groovy project&amp;rdquo;. The next section covers Spring Boot&amp;rsquo;s &quot;&lt;a href=&quot;build-tool-plugins#build-tool-plugins&quot;&gt;Build tool plugins&lt;/a&gt;&quot;, which you can use with Gradle or Maven.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a422ea186f8a4891666c0cc4b0bfa4536286bc1f" translate="yes" xml:space="preserve">
          <source>If you fine-tune your logging configuration, ensure that the &lt;code&gt;org.springframework.boot.autoconfigure.security&lt;/code&gt; category is set to log &lt;code&gt;INFO&lt;/code&gt;-level messages. Otherwise, the default password is not printed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5f687a1a525bd8570f63a13386fcacf1ce90b0c3" translate="yes" xml:space="preserve">
          <source>If you have &lt;code&gt;spring-security-oauth2-client&lt;/code&gt; on your classpath, you can take advantage of some auto-configuration to set up an OAuth2/Open ID Connect clients. This configuration makes use of the properties under &lt;code&gt;OAuth2ClientProperties&lt;/code&gt;. The same properties are applicable to both servlet and reactive applications.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2fbecc75e706d90289969741b895e5eb3be45a81" translate="yes" xml:space="preserve">
          <source>If you have &lt;code&gt;spring-security-oauth2-resource-server&lt;/code&gt; on your classpath, Spring Boot can set up an OAuth2 Resource Server. For JWT configuration, a JWK Set URI or OIDC Issuer URI needs to be specified, as shown in the following examples:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="201030c5751653b70add3760cfda05923500a504" translate="yes" xml:space="preserve">
          <source>If you have &lt;code&gt;spring-security-saml2-service-provider&lt;/code&gt; on your classpath, you can take advantage of some auto-configuration to set up a SAML 2.0 Relying Party. This configuration makes use of the properties under &lt;code&gt;Saml2RelyingPartyProperties&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="76734cdd777650b6b446cae68ad62d6a501e5c48" translate="yes" xml:space="preserve">
          <source>If you have SLF4J on the classpath, the output produced by Mongo is automatically routed to a logger named &lt;code&gt;org.springframework.boot.autoconfigure.mongo.embedded.EmbeddedMongo&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6a62083652efbcc2f313eccb067051cbe15639f2" translate="yes" xml:space="preserve">
          <source>If you have Spring Security on the classpath, &lt;code&gt;@WebMvcTest&lt;/code&gt; will also scan &lt;code&gt;WebSecurityConfigurer&lt;/code&gt; beans. Instead of disabling security completely for such tests, you can use Spring Security&amp;rsquo;s test support. More details on how to use Spring Security&amp;rsquo;s &lt;code&gt;MockMvc&lt;/code&gt; support can be found in this &lt;em&gt;&lt;a href=&quot;howto#howto-use-test-with-spring-security&quot;&gt;howto.html&lt;/a&gt;&lt;/em&gt; how-to section.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a5665ea0983cdde25c86dcaba87b12d687a0146a" translate="yes" xml:space="preserve">
          <source>If you have Spring WebFlux on your classpath, you can also choose to use &lt;code&gt;WebClient&lt;/code&gt; to call remote REST services. Compared to &lt;code&gt;RestTemplate&lt;/code&gt;, this client has a more functional feel and is fully reactive. You can learn more about the &lt;code&gt;WebClient&lt;/code&gt; in the dedicated &lt;a href=&quot;https://docs.spring.io/spring/docs/5.3.1/reference/html/web-reactive.html#webflux-client&quot;&gt;section in the Spring Framework docs&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="21a74ffc0736d410c7d1f911a30f8432e41311b3" translate="yes" xml:space="preserve">
          <source>If you have a specific problem that we do not cover here, you might want to check out &lt;a href=&quot;https://stackoverflow.com/tags/spring-boot&quot;&gt;stackoverflow.com&lt;/a&gt; to see if someone has already provided an answer. This is also a great place to ask new questions (please use the &lt;code&gt;spring-boot&lt;/code&gt; tag).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="07c39edaeec8bed76f02a5dca942ad05cd716793" translate="yes" xml:space="preserve">
          <source>If you have additional servlets you can declare a &lt;code&gt;@Bean&lt;/code&gt; of type &lt;code&gt;Servlet&lt;/code&gt; or &lt;code&gt;ServletRegistrationBean&lt;/code&gt; for each and Spring Boot will register them transparently to the container. Because servlets are registered that way, they can be mapped to a sub-context of the &lt;code&gt;DispatcherServlet&lt;/code&gt; without invoking it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b1e45b090ba703513c976aba2f9c4e67059ad748" translate="yes" xml:space="preserve">
          <source>If you have defined &lt;code&gt;@ConfigurationProperties&lt;/code&gt; in your application, make sure to configure the &lt;code&gt;spring-boot-maven-plugin&lt;/code&gt; to prevent the &lt;code&gt;repackage&lt;/code&gt; goal from adding the dependency into the fat jar:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d50a98d1d9e4fb31019dd3bbcf2face1824431be" translate="yes" xml:space="preserve">
          <source>If you have defined a custom &lt;code&gt;Executor&lt;/code&gt; in the context, regular task execution (i.e. &lt;code&gt;@EnableAsync&lt;/code&gt;) will use it transparently but the Spring MVC support will not be configured as it requires an &lt;code&gt;AsyncTaskExecutor&lt;/code&gt; implementation (named &lt;code&gt;applicationTaskExecutor&lt;/code&gt;). Depending on your target arrangement, you could change your &lt;code&gt;Executor&lt;/code&gt; into a &lt;code&gt;ThreadPoolTaskExecutor&lt;/code&gt; or define both a &lt;code&gt;ThreadPoolTaskExecutor&lt;/code&gt; and an &lt;code&gt;AsyncConfigurer&lt;/code&gt; wrapping your custom &lt;code&gt;Executor&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="859b83b63e6a1341a8c262b7c49945de61cdef58" translate="yes" xml:space="preserve">
          <source>If you have defined auto-configurations directly in your application, make sure to configure the &lt;code&gt;spring-boot-maven-plugin&lt;/code&gt; to prevent the &lt;code&gt;repackage&lt;/code&gt; goal from adding the dependency into the fat jar:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0bb8d4f7758fe7f84dfba4e21c69ce64ea2fb8fd" translate="yes" xml:space="preserve">
          <source>If you have defined your own &lt;code&gt;MongoClient&lt;/code&gt;, it will be used to auto-configure a suitable &lt;code&gt;MongoDatabaseFactory&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="25abd91a273c532909adc1cf6e522ab5aa09c1d0" translate="yes" xml:space="preserve">
          <source>If you have more than one constructor for your class you can also use &lt;code&gt;@ConstructorBinding&lt;/code&gt; directly on the constructor that should be bound.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f68630916b5368d7c00d99716cb15d78c1642280" translate="yes" xml:space="preserve">
          <source>If you have multiple config trees to import from the same parent folder you can use a wildcard shortcut. Any &lt;code&gt;configtree:&lt;/code&gt; location that ends with &lt;code&gt;/*/&lt;/code&gt; will import all immediate children as config trees.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3cc76db5d69134291dcd80ae7838beb34df6bd54" translate="yes" xml:space="preserve">
          <source>If you have not defined a bean of type &lt;code&gt;CacheManager&lt;/code&gt; or a &lt;code&gt;CacheResolver&lt;/code&gt; named &lt;code&gt;cacheResolver&lt;/code&gt; (see &lt;a href=&quot;https://docs.spring.io/spring/docs/5.3.1/javadoc-api/org/springframework/cache/annotation/CachingConfigurer.html&quot;&gt;&lt;code&gt;CachingConfigurer&lt;/code&gt;&lt;/a&gt;), Spring Boot tries to detect the following providers (in the indicated order):</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="10de8cb70e557fd28080f90ae45d3502d1c4a15d" translate="yes" xml:space="preserve">
          <source>If you have not used the &lt;code&gt;spring-test&lt;/code&gt; module before, you should start by reading the &lt;a href=&quot;https://docs.spring.io/spring/docs/5.3.1/reference/html/testing.html#testing&quot;&gt;relevant section&lt;/a&gt; of the Spring Framework reference documentation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c42b6d6b1791832635106f18290ce09a1be255bd" translate="yes" xml:space="preserve">
          <source>If you have not yet developed a Spring Boot web application, you can follow the &quot;Hello World!&quot; example in the &lt;em&gt;&lt;a href=&quot;getting-started#getting-started-first-application&quot;&gt;Getting started&lt;/a&gt;&lt;/em&gt; section.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="01997769b9678453e3fab939995fe9dcfe1a8483" translate="yes" xml:space="preserve">
          <source>If you have secured your application and wish to use &lt;code&gt;always&lt;/code&gt;, your security configuration must permit access to the health endpoint for both authenticated and unauthenticated users.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b6ed615205e2626f6521e37f6a16e5816b461e6d" translate="yes" xml:space="preserve">
          <source>If you have specific build-related questions, you can check out the &amp;ldquo;&lt;a href=&quot;howto#howto&quot;&gt;how-to&lt;/a&gt;&amp;rdquo; guides.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f3c1698517634f85ec291f2f4f4c13255ce0638c" translate="yes" xml:space="preserve">
          <source>If you have tests that use JUnit 4, JUnit 5&amp;rsquo;s vintage engine can be used to run them. To use the vintage engine, add a dependency on &lt;code&gt;junit-vintage-engine&lt;/code&gt;, as shown in the following example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="416eceaab3353a2d269cb750bbcc4b78d5974321" translate="yes" xml:space="preserve">
          <source>If you have the Jackson XML extension (&lt;code&gt;jackson-dataformat-xml&lt;/code&gt;) on the classpath, you can use it to render XML responses. The previous example that we used for JSON would work. To use the Jackson XML renderer, add the following dependency to your project:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b8bf2321af198c2cfecf3dc6f2dd4931dab0667b" translate="yes" xml:space="preserve">
          <source>If you have this dependency on the classpath, Spring Boot will auto-configure and register a &lt;code&gt;RestHighLevelClient&lt;/code&gt; bean that by default targets &lt;code&gt;&lt;a href=&quot;http://localhost:9200&quot;&gt;localhost:9200&lt;/a&gt;&lt;/code&gt;. You can further tune how &lt;code&gt;RestHighLevelClient&lt;/code&gt; is configured, as shown in the following example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="00d335f931dbac6b9156a7cb7ed6c3adf93fab5f" translate="yes" xml:space="preserve">
          <source>If you have trouble with Spring Boot, we would like to help.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aaa462e576cf3636233ff044fd52aa53df90956c" translate="yes" xml:space="preserve">
          <source>If you inherit from the &lt;code&gt;spring-boot-starter-parent&lt;/code&gt; POM, the default filter token of the &lt;code&gt;maven-resources-plugins&lt;/code&gt; has been changed from &lt;code&gt;${*}&lt;/code&gt; to &lt;code&gt;@&lt;/code&gt; (that is, &lt;code&gt;@maven.token@&lt;/code&gt; instead of &lt;code&gt;${maven.token}&lt;/code&gt;) to prevent conflicts with Spring-style placeholders. If you have enabled Maven filtering for the &lt;code&gt;application.properties&lt;/code&gt; directly, you may want to also change the default filter token to use &lt;a href=&quot;https://maven.apache.org/plugins/maven-resources-plugin/resources-mojo.html#delimiters&quot;&gt;other delimiters&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c9db74b01d649779058300f7af7510815bae621e" translate="yes" xml:space="preserve">
          <source>If you install the Spring Boot CLI by using Homebrew or MacPorts, the command-line completion scripts are automatically registered with your shell.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b8fca1840f7e3311f08af1039234cc0b3513a2fd" translate="yes" xml:space="preserve">
          <source>If you intend to start your application as a war or as an executable application, you need to share the customizations of the builder in a method that is both available to the &lt;code&gt;SpringBootServletInitializer&lt;/code&gt; callback and in the &lt;code&gt;main&lt;/code&gt; method in a class similar to the following:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dfa35489213f3bee7397024e0d961126af59a1b3" translate="yes" xml:space="preserve">
          <source>If you look in the &lt;code&gt;target&lt;/code&gt; directory, you should see &lt;code&gt;myproject-0.0.1-SNAPSHOT.jar&lt;/code&gt;. The file should be around 10 MB in size. If you want to peek inside, you can use &lt;code&gt;jar tvf&lt;/code&gt;, as follows:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a0a7e40f2d4ab9f009d9b2ba9f7199c5bfab4737" translate="yes" xml:space="preserve">
          <source>If you need access to the &lt;code&gt;BeanFactory&lt;/code&gt; or the &lt;code&gt;Environment&lt;/code&gt;, your &lt;code&gt;FailureAnalyzer&lt;/code&gt; can implement &lt;code&gt;BeanFactoryAware&lt;/code&gt; or &lt;code&gt;EnvironmentAware&lt;/code&gt; respectively.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5331e3b98564b8a8340f6e036bb6c784772d86d2" translate="yes" xml:space="preserve">
          <source>If you need more control over the configuration, consider registering a &lt;code&gt;CouchbaseCacheManagerBuilderCustomizer&lt;/code&gt; bean. The following example shows a customizer that configures a specific entry expiration for &lt;code&gt;cache1&lt;/code&gt; and &lt;code&gt;cache2&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0a3298b36219ad41621115909fc0d9801b938a62" translate="yes" xml:space="preserve">
          <source>If you need more control over the configuration, consider registering a &lt;code&gt;RedisCacheManagerBuilderCustomizer&lt;/code&gt; bean. The following example shows a customizer that configures a specific time to live for &lt;code&gt;cache1&lt;/code&gt; and &lt;code&gt;cache2&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="30227a848622b2905a723df563f6bfed0b554ddd" translate="yes" xml:space="preserve">
          <source>If you need more control, you can define your own &lt;code&gt;HttpCodeStatusMapper&lt;/code&gt; bean.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3b8128e4238c6cd934c58dc252759c197b47fa74" translate="yes" xml:space="preserve">
          <source>If you need to &lt;em&gt;completely&lt;/em&gt; disable restart support (for example, because it does not work with a specific library), you need to set the &lt;code&gt;spring.devtools.restart.enabled&lt;/code&gt;&lt;code&gt;System&lt;/code&gt; property to &lt;code&gt;false&lt;/code&gt; before calling &lt;code&gt;SpringApplication.run(&amp;hellip;​)&lt;/code&gt;, as shown in the following example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a7c30dc082f5895a590683e05632cdff9f14d830" translate="yes" xml:space="preserve">
          <source>If you need to access the application arguments that were passed to &lt;code&gt;SpringApplication.run(&amp;hellip;​)&lt;/code&gt;, you can inject a &lt;code&gt;org.springframework.boot.ApplicationArguments&lt;/code&gt; bean. The &lt;code&gt;ApplicationArguments&lt;/code&gt; interface provides access to both the raw &lt;code&gt;String[]&lt;/code&gt; arguments as well as parsed &lt;code&gt;option&lt;/code&gt; and &lt;code&gt;non-option&lt;/code&gt; arguments, as shown in the following example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a4baf28b6909ec2afac617f36981bf63f5cc8e14" translate="yes" xml:space="preserve">
          <source>If you need to add or customize codecs, you can create a custom &lt;code&gt;CodecCustomizer&lt;/code&gt; component, as shown in the following example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="11bc43596df66c705dda5c0d74ec039994e98553" translate="yes" xml:space="preserve">
          <source>If you need to add or customize converters, you can use Spring Boot&amp;rsquo;s &lt;code&gt;HttpMessageConverters&lt;/code&gt; class, as shown in the following listing:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="32e6ab8652fa52e164c5dd3e0b8c7a7ab7c953b5" translate="yes" xml:space="preserve">
          <source>If you need to apply advanced customization to Hibernate properties, consider registering a &lt;code&gt;HibernatePropertiesCustomizer&lt;/code&gt; bean that will be invoked prior to creating the &lt;code&gt;EntityManagerFactory&lt;/code&gt;. This takes precedence to anything that is applied by the auto-configuration.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9dcb0cb16d297fd66b34f6aecc18a49fe00171e6" translate="yes" xml:space="preserve">
          <source>If you need to apply customizations to logback beyond those that can be achieved with &lt;code&gt;application.properties&lt;/code&gt;, you&amp;rsquo;ll need to add a standard logback configuration file. You can add a &lt;code&gt;logback.xml&lt;/code&gt; file to the root of your classpath for logback to find. You can also use &lt;code&gt;logback-spring.xml&lt;/code&gt; if you want to use the &lt;a href=&quot;spring-boot-features#boot-features-logback-extensions&quot;&gt;Spring Boot Logback extensions&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="36511b1aaf38e111c5e404376030a943c79dfe03" translate="yes" xml:space="preserve">
          <source>If you need to apply customizations to specific &lt;code&gt;Meter&lt;/code&gt; instances you can use the &lt;code&gt;io.micrometer.core.instrument.config.MeterFilter&lt;/code&gt; interface. By default, all &lt;code&gt;MeterFilter&lt;/code&gt; beans will be automatically applied to the micrometer &lt;code&gt;MeterRegistry.Config&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="782f1193152eac0953973a3acd84be6f285532f1" translate="yes" xml:space="preserve">
          <source>If you need to build an &lt;code&gt;ApplicationContext&lt;/code&gt; hierarchy (multiple contexts with a parent/child relationship) or if you prefer using a &amp;ldquo;fluent&amp;rdquo; builder API, you can use the &lt;code&gt;SpringApplicationBuilder&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bda2ea4decbf2f2b14cf2b1af2d7fa3e09ec417e" translate="yes" xml:space="preserve">
          <source>If you need to call remote REST services from your application, you can use the Spring Framework&amp;rsquo;s &lt;a href=&quot;https://docs.spring.io/spring/docs/5.3.1/javadoc-api/org/springframework/web/client/RestTemplate.html&quot;&gt;&lt;code&gt;RestTemplate&lt;/code&gt;&lt;/a&gt; class. Since &lt;code&gt;RestTemplate&lt;/code&gt; instances often need to be customized before being used, Spring Boot does not provide any single auto-configured &lt;code&gt;RestTemplate&lt;/code&gt; bean. It does, however, auto-configure a &lt;code&gt;RestTemplateBuilder&lt;/code&gt;, which can be used to create &lt;code&gt;RestTemplate&lt;/code&gt; instances when needed. The auto-configured &lt;code&gt;RestTemplateBuilder&lt;/code&gt; ensures that sensible &lt;code&gt;HttpMessageConverters&lt;/code&gt; are applied to &lt;code&gt;RestTemplate&lt;/code&gt; instances.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d0ef25456bdd301f8507d356ad46505794cfd2d8" translate="yes" xml:space="preserve">
          <source>If you need to call remote Web services from your application, you can use the &lt;a href=&quot;https://docs.spring.io/spring-ws/docs/3.0.10.RELEASE/reference/#client-web-service-template&quot;&gt;&lt;code&gt;WebServiceTemplate&lt;/code&gt;&lt;/a&gt; class. Since &lt;code&gt;WebServiceTemplate&lt;/code&gt; instances often need to be customized before being used, Spring Boot does not provide any single auto-configured &lt;code&gt;WebServiceTemplate&lt;/code&gt; bean. It does, however, auto-configure a &lt;code&gt;WebServiceTemplateBuilder&lt;/code&gt;, which can be used to create &lt;code&gt;WebServiceTemplate&lt;/code&gt; instances when needed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fb385718fb821e1ba1872c12a85e326e51a27fc5" translate="yes" xml:space="preserve">
          <source>If you need to configure elements of the auto-configuration (for example, when servlet filters should be applied) you can use attributes in the &lt;code&gt;@AutoConfigureMockMvc&lt;/code&gt; annotation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="570205ea2e9b54f1cb412f5f5f7cdb3de8ad0b9c" translate="yes" xml:space="preserve">
          <source>If you need to configure elements of the auto-configuration, you can use the &lt;code&gt;@AutoConfigureJsonTesters&lt;/code&gt; annotation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7884cd3ee944dc571a85838f824fa11cee62deda" translate="yes" xml:space="preserve">
          <source>If you need to configure multiple data sources, you can apply the same tricks that are described in the previous section. You must, however, mark one of the &lt;code&gt;DataSource&lt;/code&gt; instances as &lt;code&gt;@Primary&lt;/code&gt;, because various auto-configurations down the road expect to be able to get one by type.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3115886cb21c65fa723324e9c8d1b45d8335a8fd" translate="yes" xml:space="preserve">
          <source>If you need to create executable jars from a different build system or if you are just curious about the underlying technology, this appendix provides some background.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="28203c1cb2297fff419b6d7a4460a47d1095038e" translate="yes" xml:space="preserve">
          <source>If you need to create more &lt;code&gt;JmsListenerContainerFactory&lt;/code&gt; instances or if you want to override the default, Spring Boot provides a &lt;code&gt;DefaultJmsListenerContainerFactoryConfigurer&lt;/code&gt; that you can use to initialize a &lt;code&gt;DefaultJmsListenerContainerFactory&lt;/code&gt; with the same settings as the one that is auto-configured.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="da71da0edd1ad9c66ec7ab16d72499848121e277" translate="yes" xml:space="preserve">
          <source>If you need to create more &lt;code&gt;RabbitListenerContainerFactory&lt;/code&gt; instances or if you want to override the default, Spring Boot provides a &lt;code&gt;SimpleRabbitListenerContainerFactoryConfigurer&lt;/code&gt; and a &lt;code&gt;DirectRabbitListenerContainerFactoryConfigurer&lt;/code&gt; that you can use to initialize a &lt;code&gt;SimpleRabbitListenerContainerFactory&lt;/code&gt; and a &lt;code&gt;DirectRabbitListenerContainerFactory&lt;/code&gt; with the same settings as the factories used by the auto-configuration.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="26d5160a5103f52288ce07a67e4e924453dcf3ee" translate="yes" xml:space="preserve">
          <source>If you need to create more &lt;code&gt;RabbitTemplate&lt;/code&gt; instances or if you want to override the default, Spring Boot provides a &lt;code&gt;RabbitTemplateConfigurer&lt;/code&gt; bean that you can use to initialize a &lt;code&gt;RabbitTemplate&lt;/code&gt; with the same settings as the factories used by the auto-configuration.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dbf1d4fda04c9ea136efbf9d2a8dc4531dafdfa7" translate="yes" xml:space="preserve">
          <source>If you need to customize connection settings, you can use the &lt;code&gt;spring.ldap.base&lt;/code&gt; and &lt;code&gt;spring.ldap.base-environment&lt;/code&gt; properties.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1e0b9e0b8b9e43e11f57c3d9327a733700341ca0" translate="yes" xml:space="preserve">
          <source>If you need to export metrics to a different backend as part of an integration test, annotate it with &lt;code&gt;@AutoConfigureMetrics&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bbe0a476ba095da7e315280701aaa1983e008d3f" translate="yes" xml:space="preserve">
          <source>If you need to find out what auto-configuration is currently being applied, and why, start your application with the &lt;code&gt;--debug&lt;/code&gt; switch. Doing so enables debug logs for a selection of core loggers and logs a conditions report to the console.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="19dd42adb10a3d75cad4cad6b6f279408b0664bf" translate="yes" xml:space="preserve">
          <source>If you need to perform servlet context initialization in a Spring Boot application, you should register a bean that implements the &lt;code&gt;org.springframework.boot.web.servlet.ServletContextInitializer&lt;/code&gt; interface. The single &lt;code&gt;onStartup&lt;/code&gt; method provides access to the &lt;code&gt;ServletContext&lt;/code&gt; and, if necessary, can easily be used as an adapter to an existing &lt;code&gt;WebApplicationInitializer&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3b9b21bb26f8db89852072e0d363111891c98425" translate="yes" xml:space="preserve">
          <source>If you need to programmatically configure your embedded servlet container, you can register a Spring bean that implements the &lt;code&gt;WebServerFactoryCustomizer&lt;/code&gt; interface. &lt;code&gt;WebServerFactoryCustomizer&lt;/code&gt; provides access to the &lt;code&gt;ConfigurableServletWebServerFactory&lt;/code&gt;, which includes numerous customization setter methods. The following example shows programmatically setting the port:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1f648fe1e7a050dcb87ebdf9b064138f156619bb" translate="yes" xml:space="preserve">
          <source>If you need to register extra components, such as Jackson &lt;code&gt;Module&lt;/code&gt;, you can import additional configuration classes using &lt;code&gt;@Import&lt;/code&gt; on your test.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1a7b2e9ec22776d8429adc6cbe6ddd092a8bf286" translate="yes" xml:space="preserve">
          <source>If you need to register extra components, such as the Jackson &lt;code&gt;Module&lt;/code&gt;, you can import additional configuration classes by using &lt;code&gt;@Import&lt;/code&gt; on your test.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3c40916ef7de52e752b517882b96a769eaee2a0f" translate="yes" xml:space="preserve">
          <source>If you need to run some specific code once the &lt;code&gt;SpringApplication&lt;/code&gt; has started, you can implement the &lt;code&gt;ApplicationRunner&lt;/code&gt; or &lt;code&gt;CommandLineRunner&lt;/code&gt; interfaces. Both interfaces work in the same way and offer a single &lt;code&gt;run&lt;/code&gt; method, which is called just before &lt;code&gt;SpringApplication.run(&amp;hellip;​)&lt;/code&gt; completes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bcdf518e7dbdbe2254f3ecdae93cd34b63fd5d6f" translate="yes" xml:space="preserve">
          <source>If you need to start a full running server, we recommend that you use random ports. If you use &lt;code&gt;@SpringBootTest(webEnvironment=WebEnvironment.RANDOM_PORT)&lt;/code&gt;, an available port is picked at random each time your test runs.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="db90163e4f1769d7e9f20b7e746fbed8af5d5f25" translate="yes" xml:space="preserve">
          <source>If you need to test an auto-configuration that only operates in a Servlet or Reactive web application context, use the &lt;code&gt;WebApplicationContextRunner&lt;/code&gt; or &lt;code&gt;ReactiveWebApplicationContextRunner&lt;/code&gt; respectively.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1d6a6d7b8eea31a903a98f506a36b2375a3975ad" translate="yes" xml:space="preserve">
          <source>If you need to use a proxy to access the remote application, configure the &lt;code&gt;spring.devtools.remote.proxy.host&lt;/code&gt; and &lt;code&gt;spring.devtools.remote.proxy.port&lt;/code&gt; properties.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1c30ad38c18a84275da6cebe783f87238a94426a" translate="yes" xml:space="preserve">
          <source>If you need to use jOOQ with multiple data sources, you should create your own &lt;code&gt;DSLContext&lt;/code&gt; for each one. Refer to &lt;a href=&quot;https://github.com/spring-projects/spring-boot/tree/v2.4.0/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jooq/JooqAutoConfiguration.java&quot;&gt;JooqAutoConfiguration&lt;/a&gt; for more details.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3e0430f91952e0efcfb2eaed807a4abfab7821c7" translate="yes" xml:space="preserve">
          <source>If you open a web browser to &lt;code&gt;&lt;a href=&quot;http://localhost:8080&quot;&gt;localhost:8080&lt;/a&gt;&lt;/code&gt;, you should see the following output:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8e7b4122a155c60906e67d20102c7510c77f03b3" translate="yes" xml:space="preserve">
          <source>If you package your Spring Boot application as a &lt;code&gt;war&lt;/code&gt; or &lt;code&gt;ear&lt;/code&gt; file and deploy it to a Java EE application server, you can use your application server&amp;rsquo;s built-in transaction manager. Spring Boot tries to auto-configure a transaction manager by looking at common JNDI locations (&lt;code&gt;java:comp/UserTransaction&lt;/code&gt;, &lt;code&gt;java:comp/TransactionManager&lt;/code&gt;, and so on). If you use a transaction service provided by your application server, you generally also want to ensure that all resources are managed by the server and exposed over JNDI. Spring Boot tries to auto-configure JMS by looking for a &lt;code&gt;ConnectionFactory&lt;/code&gt; at the JNDI path (&lt;code&gt;java:/JmsXA&lt;/code&gt; or &lt;code&gt;java:/XAConnectionFactory&lt;/code&gt;), and you can use the &lt;a href=&quot;#boot-features-connecting-to-a-jndi-datasource&quot;&gt;&lt;code&gt;spring.datasource.jndi-name&lt;/code&gt; property&lt;/a&gt; to configure your &lt;code&gt;DataSource&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c0794e82675c7ada176166c5810445ff421f6ed7" translate="yes" xml:space="preserve">
          <source>If you prefer endpoint enablement to be opt-in rather than opt-out, set the &lt;code&gt;management.endpoints.enabled-by-default&lt;/code&gt; property to &lt;code&gt;false&lt;/code&gt; and use individual endpoint &lt;code&gt;enabled&lt;/code&gt; properties to opt back in. The following example enables the &lt;code&gt;info&lt;/code&gt; endpoint and disables all other endpoints:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="80f9e9fb9f9868af76b75a6f758b1a634be9c20a" translate="yes" xml:space="preserve">
          <source>If you prefer the JAX-RS programming model for REST endpoints, you can use one of the available implementations instead of Spring MVC. &lt;a href=&quot;https://jersey.github.io/&quot;&gt;Jersey&lt;/a&gt; and &lt;a href=&quot;https://cxf.apache.org/&quot;&gt;Apache CXF&lt;/a&gt; work quite well out of the box. CXF requires you to register its &lt;code&gt;Servlet&lt;/code&gt; or &lt;code&gt;Filter&lt;/code&gt; as a &lt;code&gt;@Bean&lt;/code&gt; in your application context. Jersey has some native Spring support, so we also provide auto-configuration support for it in Spring Boot, together with a starter.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a47b011528f7626b58e9c70b3f6a78fd55cfd1ae" translate="yes" xml:space="preserve">
          <source>If you prefer to add addition locations, rather than replacing them, you can use &lt;code&gt;spring.config.additional-location&lt;/code&gt;. Properties loaded from additional locations can override those in the default locations. For example, if &lt;code&gt;spring.config.additional-location&lt;/code&gt; is configured with the value &lt;code&gt;optional:classpath:/custom-config/,optional:file:./custom-config/&lt;/code&gt;, the complete the complete set of locations considered is:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="db4d84b541db0b7b7783fae159844c8034f70951" translate="yes" xml:space="preserve">
          <source>If you prefer to use Hibernate 5&amp;rsquo;s default instead, set the following property:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f1d0ae7c5f4773ad33dfb78efc33c19e89abb5dd" translate="yes" xml:space="preserve">
          <source>If you prefer to use constructor binding, the same properties can be exposed, as shown in the following example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4a4f816ad3107f3cf95f745be70085d74acab585" translate="yes" xml:space="preserve">
          <source>If you prefer your test to run against a real database, you can use the &lt;code&gt;@AutoConfigureTestDatabase&lt;/code&gt; annotation in the same way as for &lt;code&gt;DataJpaTest&lt;/code&gt;. (See &quot;&lt;a href=&quot;#boot-features-testing-spring-boot-applications-testing-autoconfigured-jpa-test&quot;&gt;Auto-configured Data JPA Tests&lt;/a&gt;&quot;.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="22ae51262a7b30f98adfdf1f37737ea4e9287154" translate="yes" xml:space="preserve">
          <source>If you provide a &lt;code&gt;@Bean&lt;/code&gt; of type &lt;code&gt;AuthenticationManager&lt;/code&gt;, &lt;code&gt;AuthenticationProvider&lt;/code&gt;, or &lt;code&gt;UserDetailsService&lt;/code&gt;, the default &lt;code&gt;@Bean&lt;/code&gt; for &lt;code&gt;InMemoryUserDetailsManager&lt;/code&gt; is not created. This means you have the full feature set of Spring Security available (such as &lt;a href=&quot;https://docs.spring.io/spring-security/site/docs/5.4.1/reference/html5/#servlet-authentication&quot;&gt;various authentication options&lt;/a&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a340a7ea03d25a950a252001f18fe7f3a13b8297" translate="yes" xml:space="preserve">
          <source>If you provide any &lt;code&gt;@Beans&lt;/code&gt; of type &lt;code&gt;MappingJackson2HttpMessageConverter&lt;/code&gt;, they replace the default value in the MVC configuration. Also, a convenience bean of type &lt;code&gt;HttpMessageConverters&lt;/code&gt; is provided (and is always available if you use the default MVC configuration). It has some useful methods to access the default and user-enhanced message converters.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3ee303ba9e9410615f9a17d0daf3f65cdd26300c" translate="yes" xml:space="preserve">
          <source>If you reach the &lt;code&gt;info&lt;/code&gt; endpoint, you should see a response that contains the following additional entry:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3b695604334353c0ac7f82b53ca758e0bf5e9ece" translate="yes" xml:space="preserve">
          <source>If you refer to a property that has been detected automatically, the description, default value, and deprecation information are overridden, if specified. If the manual property declaration is not identified in the current module, it is added as a new property.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="13cbfbb26b1c595070fe9e09284a93d413cd4e3f" translate="yes" xml:space="preserve">
          <source>If you register an &lt;code&gt;ErrorPage&lt;/code&gt; with a path that ends up being handled by a &lt;code&gt;Filter&lt;/code&gt; (as is common with some non-Spring web frameworks, like Jersey and Wicket), then the &lt;code&gt;Filter&lt;/code&gt; has to be explicitly registered as an &lt;code&gt;ERROR&lt;/code&gt; dispatcher, as shown in the following example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7a13de1c3f77d881aa222806b2f0e652ce22bbb9" translate="yes" xml:space="preserve">
          <source>If you require more control over Spring REST Docs configuration than offered by the attributes of &lt;code&gt;@AutoConfigureRestDocs&lt;/code&gt;, a &lt;code&gt;RestDocsRestAssuredConfigurationCustomizer&lt;/code&gt; bean can be used, as shown in the following example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="956e9bef895cd158f231ec77a51ca5d0f25980ca" translate="yes" xml:space="preserve">
          <source>If you require more control over Spring REST Docs configuration than offered by the attributes of &lt;code&gt;@AutoConfigureRestDocs&lt;/code&gt;, you can use a &lt;code&gt;RestDocsMockMvcConfigurationCustomizer&lt;/code&gt; bean, as shown in the following example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c8c2c8da2bde5ec5fbc578d076e71f78abcb0bd6" translate="yes" xml:space="preserve">
          <source>If you require more control over Spring REST Docs configuration than offered by the attributes of &lt;code&gt;@AutoConfigureRestDocs&lt;/code&gt;, you can use a &lt;code&gt;RestDocsWebTestClientConfigurationCustomizer&lt;/code&gt; bean, as shown in the following example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8ee4e86b4c4f1ffd37fa30313a89e6b4b1880b75" translate="yes" xml:space="preserve">
          <source>If you run &lt;code&gt;mvn dependency:tree&lt;/code&gt; again, you see that there are now a number of additional dependencies, including the Tomcat web server and Spring Boot itself.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0094e8539d66a83001b1261f7a17aa88358cf92c" translate="yes" xml:space="preserve">
          <source>If you run the application with the argument &lt;code&gt;--spring.profiles.active=dev&lt;/code&gt; you might expect &lt;code&gt;mypassword&lt;/code&gt; to be set to &amp;ldquo;secret&amp;rdquo;, but this is not the case.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c39b17465578f8a9146ee6a0a521a7166c5783af" translate="yes" xml:space="preserve">
          <source>If you specify a property of the &lt;code&gt;Environment&lt;/code&gt; on the command line, it is ignored by the job. Consider the following command:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8e6fed2ca0cc99965bd25af751b0a9ee10fcfc62" translate="yes" xml:space="preserve">
          <source>If you structure your code as suggested above (locating your application class in a root package), you can add &lt;code&gt;@ComponentScan&lt;/code&gt; without any arguments. All of your application components (&lt;code&gt;@Component&lt;/code&gt;, &lt;code&gt;@Service&lt;/code&gt;, &lt;code&gt;@Repository&lt;/code&gt;, &lt;code&gt;@Controller&lt;/code&gt; etc.) are automatically registered as Spring Beans.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c988c13a4cefac6ec360b1f0c4a14e8aefb65b42" translate="yes" xml:space="preserve">
          <source>If you use &amp;ldquo;Starters&amp;rdquo;, SnakeYAML is automatically provided by &lt;code&gt;spring-boot-starter&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ccb544e3f7a5429a364c0998316fd84db6109927" translate="yes" xml:space="preserve">
          <source>If you use &lt;code&gt;@ConditionalOnClass&lt;/code&gt; or &lt;code&gt;@ConditionalOnMissingClass&lt;/code&gt; as a part of a meta-annotation to compose your own composed annotations, you must use &lt;code&gt;name&lt;/code&gt; as referring to the class in such a case is not handled.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f3b86abacc5af41ae0a5c64969aa26d9c5b63c37" translate="yes" xml:space="preserve">
          <source>If you use &lt;code&gt;spring-boot-starter-activemq&lt;/code&gt;, the necessary dependencies to connect or embed an ActiveMQ instance are provided, as is the Spring infrastructure to integrate with JMS.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="777d69b44c943a844cdfd40ad1512b3c91b089f4" translate="yes" xml:space="preserve">
          <source>If you use &lt;code&gt;spring-boot-starter-artemis&lt;/code&gt;, the necessary dependencies to connect to an existing Artemis instance are provided, as well as the Spring infrastructure to integrate with JMS. Adding &lt;code&gt;org.apache.activemq:artemis-jms-server&lt;/code&gt; to your application lets you use embedded mode.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6d4e8535de59d50a058d6eb6e673992cee50cf68" translate="yes" xml:space="preserve">
          <source>If you use FreeMarker, set &lt;code&gt;spring.freemarker.cache&lt;/code&gt; to &lt;code&gt;false&lt;/code&gt;. See &lt;a href=&quot;https://github.com/spring-projects/spring-boot/tree/v2.4.0/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/freemarker/FreeMarkerAutoConfiguration.java&quot;&gt;&lt;code&gt;FreeMarkerAutoConfiguration&lt;/code&gt;&lt;/a&gt; for other FreeMarker customization options.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="96599129ad1f98bc96079b4970485263acdb8104" translate="yes" xml:space="preserve">
          <source>If you use FreeMarker, you also have a &lt;code&gt;FreeMarkerViewResolver&lt;/code&gt; named &amp;lsquo;freeMarkerViewResolver&amp;rsquo;. It looks for resources in a loader path (which is externalized to &lt;code&gt;spring.freemarker.templateLoaderPath&lt;/code&gt; and has a default value of &amp;lsquo;classpath:/templates/&amp;rsquo;) by surrounding the view name with a prefix and a suffix. The prefix is externalized to &lt;code&gt;spring.freemarker.prefix&lt;/code&gt;, and the suffix is externalized to &lt;code&gt;spring.freemarker.suffix&lt;/code&gt;. The default values of the prefix and suffix are empty and &amp;lsquo;.ftlh&amp;rsquo;, respectively. You can override &lt;code&gt;FreeMarkerViewResolver&lt;/code&gt; by providing a bean of the same name.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cb3cf7f0044b3718d98e8477f6b375588d83e74f" translate="yes" xml:space="preserve">
          <source>If you use Gradle, the following example marks the servlet container (Tomcat, in this case) as being provided:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f34a37f05c3e65d27f04a64a6ebf570925be5885" translate="yes" xml:space="preserve">
          <source>If you use Gradle, you need to modify &lt;code&gt;build.gradle&lt;/code&gt; to apply the war plugin to the project, as follows:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="329dbf16f14bf242b43f88c33385de61b3bc8529" translate="yes" xml:space="preserve">
          <source>If you use Groovy templates (actually, if &lt;code&gt;groovy-templates&lt;/code&gt; is on your classpath), you also have a &lt;code&gt;GroovyMarkupViewResolver&lt;/code&gt; named &amp;lsquo;groovyMarkupViewResolver&amp;rsquo;. It looks for resources in a loader path by surrounding the view name with a prefix and suffix (externalized to &lt;code&gt;spring.groovy.template.prefix&lt;/code&gt; and &lt;code&gt;spring.groovy.template.suffix&lt;/code&gt;). The prefix and suffix have default values of &amp;lsquo;classpath:/templates/&amp;rsquo; and &amp;lsquo;.tpl&amp;rsquo;, respectively. You can override &lt;code&gt;GroovyMarkupViewResolver&lt;/code&gt; by providing a bean of the same name.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="55a452a65fce8ac3e807f77005213b38beeb6fca" translate="yes" xml:space="preserve">
          <source>If you use Groovy templates, set &lt;code&gt;spring.groovy.template.cache&lt;/code&gt; to &lt;code&gt;false&lt;/code&gt;. See &lt;a href=&quot;https://github.com/spring-projects/spring-boot/tree/v2.4.0/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/groovy/template/GroovyTemplateAutoConfiguration.java&quot;&gt;&lt;code&gt;GroovyTemplateAutoConfiguration&lt;/code&gt;&lt;/a&gt; for other Groovy customization options.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="200f85ac0a387627788e92ef461afabf20d8cd8f" translate="yes" xml:space="preserve">
          <source>If you use HtmlUnit or Selenium, auto-configuration also provides an HtmlUnit &lt;code&gt;WebClient&lt;/code&gt; bean and/or a Selenium &lt;code&gt;WebDriver&lt;/code&gt; bean. The following example uses HtmlUnit:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a5b73ac8a4e2e3bd5122a9967bb1e5aa3b2b81d2" translate="yes" xml:space="preserve">
          <source>If you use JBoss, you need to declare the &lt;code&gt;webjars-locator-jboss-vfs&lt;/code&gt; dependency instead of the &lt;code&gt;webjars-locator-core&lt;/code&gt;. Otherwise, all Webjars resolve as a &lt;code&gt;404&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7b47169a793e43e7f3cdbc6eef2e7957bc6accb0" translate="yes" xml:space="preserve">
          <source>If you use Jackson to serialize and deserialize JSON data, you might want to write your own &lt;code&gt;JsonSerializer&lt;/code&gt; and &lt;code&gt;JsonDeserializer&lt;/code&gt; classes. Custom serializers are usually &lt;a href=&quot;https://github.com/FasterXML/jackson-docs/wiki/JacksonHowToCustomSerializers&quot;&gt;registered with Jackson through a module&lt;/a&gt;, but Spring Boot provides an alternative &lt;code&gt;@JsonComponent&lt;/code&gt; annotation that makes it easier to directly register Spring Beans.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b695a3390103bb7810c9fb6fec75fa21a4799f7f" translate="yes" xml:space="preserve">
          <source>If you use Jolokia but do not want Spring Boot to configure it, set the &lt;code&gt;management.endpoint.jolokia.enabled&lt;/code&gt; property to &lt;code&gt;false&lt;/code&gt;, as follows:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bf25614405be298d7a4d7a6e5abd575729609a39" translate="yes" xml:space="preserve">
          <source>If you use Logback, you also need to tell WebLogic to prefer the packaged version rather than the version that was pre-installed with the server. You can do so by adding a &lt;code&gt;WEB-INF/weblogic.xml&lt;/code&gt; file with the following contents:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="80554eb5f4ad22a776ab22dd91d6f38324cad630" translate="yes" xml:space="preserve">
          <source>If you use Maven, the following example marks the servlet container (Tomcat, in this case) as being provided:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9f04e29e756f1592ca2dd280c4fc5294e88cb611" translate="yes" xml:space="preserve">
          <source>If you use Mustache, you also have a &lt;code&gt;MustacheViewResolver&lt;/code&gt; named &amp;lsquo;mustacheViewResolver&amp;rsquo;. It looks for resources by surrounding the view name with a prefix and suffix. The prefix is &lt;code&gt;spring.mustache.prefix&lt;/code&gt;, and the suffix is &lt;code&gt;spring.mustache.suffix&lt;/code&gt;. The values of the prefix and suffix default to &amp;lsquo;classpath:/templates/&amp;rsquo; and &amp;lsquo;.mustache&amp;rsquo;, respectively. You can override &lt;code&gt;MustacheViewResolver&lt;/code&gt; by providing a bean of the same name.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b30da9a89c682550578ea8c7efbe8f28b4a05c08" translate="yes" xml:space="preserve">
          <source>If you use Spring Batch, it comes pre-packaged with SQL initialization scripts for most popular database platforms. Spring Boot can detect your database type and execute those scripts on startup. If you use an embedded database, this happens by default. You can also enable it for any database type, as shown in the following example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="22fa9734f5eb9434eb1050cdecd1168d30f64d65" translate="yes" xml:space="preserve">
          <source>If you use Spring Data, you need to configure &lt;code&gt;@EnableJpaRepositories&lt;/code&gt; accordingly, as shown in the following example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0c1f3aa8d467e878058de21d916e107b6a52feae" translate="yes" xml:space="preserve">
          <source>If you use Thymeleaf, set &lt;code&gt;spring.thymeleaf.cache&lt;/code&gt; to &lt;code&gt;false&lt;/code&gt;. See &lt;a href=&quot;https://github.com/spring-projects/spring-boot/tree/v2.4.0/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/thymeleaf/ThymeleafAutoConfiguration.java&quot;&gt;&lt;code&gt;ThymeleafAutoConfiguration&lt;/code&gt;&lt;/a&gt; for other Thymeleaf customization options.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4b5645a11e8f0d1774fdab2dc0e90570cde1e795" translate="yes" xml:space="preserve">
          <source>If you use Thymeleaf, you also have a &lt;code&gt;ThymeleafViewResolver&lt;/code&gt; named &amp;lsquo;thymeleafViewResolver&amp;rsquo;. It looks for resources by surrounding the view name with a prefix and suffix. The prefix is &lt;code&gt;spring.thymeleaf.prefix&lt;/code&gt;, and the suffix is &lt;code&gt;spring.thymeleaf.suffix&lt;/code&gt;. The values of the prefix and suffix default to &amp;lsquo;classpath:/templates/&amp;rsquo; and &amp;lsquo;.html&amp;rsquo;, respectively. You can override &lt;code&gt;ThymeleafViewResolver&lt;/code&gt; by providing a bean of the same name.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e2cb7a4911ec6a44e2e2c117d4a109b91eb25cf1" translate="yes" xml:space="preserve">
          <source>If you use Tomcat, you can additionally configure the names of the headers used to carry &amp;ldquo;forwarded&amp;rdquo; information, as shown in the following example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3a1f94f9e752d2b8817badba75e798e1a0a8b144" translate="yes" xml:space="preserve">
          <source>If you use a &lt;a href=&quot;#boot-features-testing-spring-boot-applications-testing-autoconfigured-tests&quot;&gt;test annotation to test a more specific slice of your application&lt;/a&gt;, you should avoid adding configuration settings that are specific to a particular area on the &lt;a href=&quot;#boot-features-testing-spring-boot-applications-testing-user-configuration&quot;&gt;main method&amp;rsquo;s application class&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bc40eb2f65523c978c4f8c3a1192e22d28ae652d" translate="yes" xml:space="preserve">
          <source>If you use environment variables rather than system properties, most operating systems disallow period-separated key names, but you can use underscores instead (for example, &lt;code&gt;SPRING_CONFIG_NAME&lt;/code&gt; instead of &lt;code&gt;spring.config.name&lt;/code&gt;). See &lt;a href=&quot;#boot-features-external-config-relaxed-binding-from-environment-variables&quot;&gt;Binding from Environment Variables&lt;/a&gt; for details.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ed4e2fa0f1d8558d87d0fa88ed63043fb5275eab" translate="yes" xml:space="preserve">
          <source>If you use the &lt;a href=&quot;build-tool-plugins#build-tool-plugins&quot;&gt;Spring Boot build tools&lt;/a&gt;, marking the embedded servlet container dependency as provided produces an executable war file with the provided dependencies packaged in a &lt;code&gt;lib-provided&lt;/code&gt; directory. This means that, in addition to being deployable to a servlet container, you can also run your application by using &lt;code&gt;java -jar&lt;/code&gt; on the command line.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3eb5649d21878432f522e65663bd0fee35bf190f" translate="yes" xml:space="preserve">
          <source>If you use the &lt;code&gt;spring-boot-starter-jdbc&lt;/code&gt; or &lt;code&gt;spring-boot-starter-data-jpa&lt;/code&gt; &amp;ldquo;starters&amp;rdquo;, you automatically get a dependency to &lt;code&gt;HikariCP&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c755384d00b62d6971b7db9830aa5cc4183b833c" translate="yes" xml:space="preserve">
          <source>If you use the Spring Boot Maven or Gradle plugins to create an executable jar, you can run your application using &lt;code&gt;java -jar&lt;/code&gt;, as shown in the following example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="699b36a0cb846149d39b263e09f196f3fa06fd44" translate="yes" xml:space="preserve">
          <source>If you want those listeners to be registered automatically, regardless of the way the application is created, you can add a &lt;code&gt;META-INF/spring.factories&lt;/code&gt; file to your project and reference your listener(s) by using the &lt;code&gt;org.springframework.context.ApplicationListener&lt;/code&gt; key, as shown in the following example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b25f014b843edbb25ac485fe2714072ade62884b" translate="yes" xml:space="preserve">
          <source>If you want to configure a component that JPA uses, then you need to ensure that the component is initialized before JPA. When the component is auto-configured, Spring Boot takes care of this for you. For example, when Flyway is auto-configured, Hibernate is configured to depend upon Flyway so that Flyway has a chance to initialize the database before Hibernate tries to use it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="be2360b76ae9f8eb9c884b7a3ac7ce1efdaab0ee" translate="yes" xml:space="preserve">
          <source>If you want to customize the primary configuration, you can use a nested &lt;code&gt;@TestConfiguration&lt;/code&gt; class. Unlike a nested &lt;code&gt;@Configuration&lt;/code&gt; class, which would be used instead of your application&amp;rsquo;s primary configuration, a nested &lt;code&gt;@TestConfiguration&lt;/code&gt; class is used in addition to your application&amp;rsquo;s primary configuration.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b50fc66f62117cfae0cc3b36483a125265ecbb41" translate="yes" xml:space="preserve">
          <source>If you want to disable console logging and write output only to a file, you need a custom &lt;code&gt;logback-spring.xml&lt;/code&gt; that imports &lt;code&gt;file-appender.xml&lt;/code&gt; but not &lt;code&gt;console-appender.xml&lt;/code&gt;, as shown in the following example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1d223a57b56e8fb9986e84d89f1846a61686f0d0" translate="yes" xml:space="preserve">
          <source>If you want to disable lazy initialization for certain beans while using lazy initialization for the rest of the application, you can explicitly set their lazy attribute to false using the &lt;code&gt;@Lazy(false)&lt;/code&gt; annotation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f8a62e4249d3e387255d76202942ee0cfe00bb0a" translate="yes" xml:space="preserve">
          <source>If you want to display a custom HTML error page for a given status code, you can add a file to an &lt;code&gt;/error&lt;/code&gt; directory. Error pages can either be static HTML (that is, added under any of the static resource directories) or be built by using templates. The name of the file should be the exact status code or a series mask.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="69f9761c08829c9eabaf567e4363649fb544439a" translate="yes" xml:space="preserve">
          <source>If you want to display a custom HTML error page for a given status code, you can add a file to an &lt;code&gt;/error&lt;/code&gt; directory. Error pages can either be static HTML (that is, added under any of the static resource directories) or built with templates. The name of the file should be the exact status code or a series mask.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="624b7d8a30a77db7ab8cabf777e5c0b3a374000c" translate="yes" xml:space="preserve">
          <source>If you want to display the full git information (that is, the full content of &lt;code&gt;git.properties&lt;/code&gt;), use the &lt;code&gt;management.info.git.mode&lt;/code&gt; property, as follows:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="493964adcff302ec746abc24cb0a1e5c34c15dd8" translate="yes" xml:space="preserve">
          <source>If you want to focus only on the web layer and not start a complete &lt;code&gt;ApplicationContext&lt;/code&gt;, consider &lt;a href=&quot;#boot-features-testing-spring-boot-applications-testing-autoconfigured-mvc-tests&quot;&gt;using &lt;code&gt;@WebMvcTest&lt;/code&gt; instead&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="82fdad60661aeaff32999005c56a3b78e7142db4" translate="yes" xml:space="preserve">
          <source>If you want to fully disable the &lt;code&gt;/cloudfoundryapplication&lt;/code&gt; endpoints, you can add the following setting to your &lt;code&gt;application.properties&lt;/code&gt; file:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="73a7d3ceeb384bcb40ac81265e1aab52bc28f853" translate="yes" xml:space="preserve">
          <source>If you want to ignore all &lt;code&gt;ConfigDataLocationNotFoundExceptions&lt;/code&gt; and always continue to start your application, you can use the &lt;code&gt;spring.config.on-not-found&lt;/code&gt; property. Set the value to &lt;code&gt;ignore&lt;/code&gt; using &lt;code&gt;SpringApplication.setDefaultProperties(&amp;hellip;​)&lt;/code&gt; or with a system/environment variable.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6fd19d0383892da728742c28a42c5af7f941d041" translate="yes" xml:space="preserve">
          <source>If you want to implement your own strategy for when endpoints are exposed, you can register an &lt;code&gt;EndpointFilter&lt;/code&gt; bean.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="741c16b9ff9ccedc5c83c834e3dfe6b8c2600b21" translate="yes" xml:space="preserve">
          <source>If you want to keep Spring Boot WebFlux features and you want to add additional &lt;a href=&quot;https://docs.spring.io/spring/docs/5.3.1/reference/html/web-reactive.html#webflux-config&quot;&gt;WebFlux configuration&lt;/a&gt;, you can add your own &lt;code&gt;@Configuration&lt;/code&gt; class of type &lt;code&gt;WebFluxConfigurer&lt;/code&gt; but &lt;strong&gt;without&lt;/strong&gt;&lt;code&gt;@EnableWebFlux&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fbd9388dd671c21460011cd9b6eb05186652ddd1" translate="yes" xml:space="preserve">
          <source>If you want to keep those Spring Boot MVC customizations and make more &lt;a href=&quot;https://docs.spring.io/spring/docs/5.3.1/reference/html/web.html#mvc&quot;&gt;MVC customizations&lt;/a&gt; (interceptors, formatters, view controllers, and other features), you can add your own &lt;code&gt;@Configuration&lt;/code&gt; class of type &lt;code&gt;WebMvcConfigurer&lt;/code&gt; but &lt;strong&gt;without&lt;/strong&gt;&lt;code&gt;@EnableWebMvc&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="36716c70e1204add70bad25f0a422fcd44455b3b" translate="yes" xml:space="preserve">
          <source>If you want to keep those defaults and &lt;em&gt;add&lt;/em&gt; additional exclusions, use the &lt;code&gt;spring.devtools.restart.additional-exclude&lt;/code&gt; property instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="64fef5df8dfd20e835450f3a8052e8c80a266c1c" translate="yes" xml:space="preserve">
          <source>If you want to know on which HTTP port the application is running, get the property with a key of &lt;code&gt;local.server.port&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f3c14308ed1f8bd2ad58596890afa151af96551c" translate="yes" xml:space="preserve">
          <source>If you want to learn more about any of the classes discussed in this section, you can check out the &lt;a href=&quot;https://docs.spring.io/spring-boot/docs/2.4.0/api/&quot;&gt;Spring Boot API documentation&lt;/a&gt; or you can browse the &lt;a href=&quot;https://github.com/spring-projects/spring-boot/tree/v2.4.0&quot;&gt;source code directly&lt;/a&gt;. If you have specific questions, take a look at the &lt;a href=&quot;howto#howto&quot;&gt;how-to&lt;/a&gt; section.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a2626fcca1e8673560c93c7d00aed1923b2b0290" translate="yes" xml:space="preserve">
          <source>If you want to make use of Spring REST Docs support for a parameterized output directory, you can create a &lt;code&gt;RestDocumentationResultHandler&lt;/code&gt; bean. The auto-configuration calls &lt;code&gt;alwaysDo&lt;/code&gt; with this result handler, thereby causing each &lt;code&gt;MockMvc&lt;/code&gt; call to automatically generate the default snippets. The following example shows a &lt;code&gt;RestDocumentationResultHandler&lt;/code&gt; being defined:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c607775e0b707f23313431305f4ab41ab5d0f1a0" translate="yes" xml:space="preserve">
          <source>If you want to map endpoints to a different path, you can use the &lt;code&gt;management.endpoints.web.path-mapping&lt;/code&gt; property.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="432dd123a66ed2fa55b7613841392f2732f319f4" translate="yes" xml:space="preserve">
          <source>If you want to order certain auto-configurations that should not have any direct knowledge of each other, you can also use &lt;code&gt;@AutoConfigureOrder&lt;/code&gt;. That annotation has the same semantic as the regular &lt;code&gt;@Order&lt;/code&gt; annotation but provides a dedicated order for auto-configuration classes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="91211ab9c662e446c11bf23eb1e4dc10b8b2fea2" translate="yes" xml:space="preserve">
          <source>If you want to provide custom instances of &lt;code&gt;RequestMappingHandlerMapping&lt;/code&gt;, &lt;code&gt;RequestMappingHandlerAdapter&lt;/code&gt;, or &lt;code&gt;ExceptionHandlerExceptionResolver&lt;/code&gt;, and still keep the Spring Boot MVC customizations, you can declare a bean of type &lt;code&gt;WebMvcRegistrations&lt;/code&gt; and use it to provide custom instances of those components.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="23b15bc8b8ede57829d4e69ff8b81773edf478aa" translate="yes" xml:space="preserve">
          <source>If you want to replace the default &lt;code&gt;ObjectMapper&lt;/code&gt; completely, either define a &lt;code&gt;@Bean&lt;/code&gt; of that type and mark it as &lt;code&gt;@Primary&lt;/code&gt; or, if you prefer the builder-based approach, define a &lt;code&gt;Jackson2ObjectMapperBuilder&lt;/code&gt;&lt;code&gt;@Bean&lt;/code&gt;. Note that, in either case, doing so disables all auto-configuration of the &lt;code&gt;ObjectMapper&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="edbf741fa0c3df0dfda82aeb97d412a27aa3f6ee" translate="yes" xml:space="preserve">
          <source>If you want to specify a location, but you don&amp;rsquo;t mind if it doesn&amp;rsquo;t always exist, you can use the &lt;code&gt;optional:&lt;/code&gt; prefix. You can use this prefix with the &lt;code&gt;spring.config.location&lt;/code&gt; and &lt;code&gt;spring.config.additional-location&lt;/code&gt; properties, as well as with &lt;a href=&quot;#boot-features-external-config-files-importing&quot;&gt;&lt;code&gt;spring.config.import&lt;/code&gt;&lt;/a&gt; declarations.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9891c4c37257cf2295f9959de070aec764ce22fb" translate="yes" xml:space="preserve">
          <source>If you want to support your own locations, see the &lt;code&gt;ConfigDataLocationResolver&lt;/code&gt; and &lt;code&gt;ConfigDataLoader&lt;/code&gt; classes in the &lt;code&gt;org.springframework.boot.context.config&lt;/code&gt; package.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e6f7e0617bbef6d4edd55dc0470f3fc295c93514" translate="yes" xml:space="preserve">
          <source>If you want to take complete control of Spring MVC, you can add your own &lt;code&gt;@Configuration&lt;/code&gt; annotated with &lt;code&gt;@EnableWebMvc&lt;/code&gt;, or alternatively add your own &lt;code&gt;@Configuration&lt;/code&gt;-annotated &lt;code&gt;DelegatingWebMvcConfiguration&lt;/code&gt; as described in the Javadoc of &lt;code&gt;@EnableWebMvc&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="56a28c43685cb3281d250918d6da45d0d6a5320f" translate="yes" xml:space="preserve">
          <source>If you want to take complete control of Spring WebFlux, you can add your own &lt;code&gt;@Configuration&lt;/code&gt; annotated with &lt;code&gt;@EnableWebFlux&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2e69ddb36111de9fcdef0e601749e63eb2a112e7" translate="yes" xml:space="preserve">
          <source>If you want to use &lt;code&gt;@ServerEndpoint&lt;/code&gt; in a Spring Boot application that used an embedded container, you must declare a single &lt;code&gt;ServerEndpointExporter&lt;/code&gt;&lt;code&gt;@Bean&lt;/code&gt;, as shown in the following example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="013ad3799a0f1a3cba25b8dccb7f0df3f8a62d7f" translate="yes" xml:space="preserve">
          <source>If you want to use a build tool other than Maven, Gradle, or Ant, you likely need to develop your own plugin. Executable jars need to follow a specific format and certain entries need to be written in an uncompressed form (see the &amp;ldquo;&lt;a href=&quot;appendix-executable-jar-format#executable-jar&quot;&gt;executable jar format&lt;/a&gt;&amp;rdquo; section in the appendix for details).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="373fe9e7645717678b271f84131ac9f8b016f106" translate="yes" xml:space="preserve">
          <source>If you want to use a non-XA &lt;code&gt;ConnectionFactory&lt;/code&gt;, you can inject the &lt;code&gt;nonXaJmsConnectionFactory&lt;/code&gt; bean rather than the &lt;code&gt;@Primary&lt;/code&gt;&lt;code&gt;jmsConnectionFactory&lt;/code&gt; bean. For consistency, the &lt;code&gt;jmsConnectionFactory&lt;/code&gt; bean is also provided by using the bean alias &lt;code&gt;xaJmsConnectionFactory&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9bad185f506dbaedb06659b3c83779ad74120227" translate="yes" xml:space="preserve">
          <source>If you want to use a placeholder in a logging property, you should use &lt;a href=&quot;#boot-features-external-config-placeholders-in-properties&quot;&gt;Spring Boot&amp;rsquo;s syntax&lt;/a&gt; and not the syntax of the underlying framework. Notably, if you use Logback, you should use &lt;code&gt;:&lt;/code&gt; as the delimiter between a property name and its default value and not use &lt;code&gt;:-&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e19fe20bc62c53824a70c197105a5812e81a17ca" translate="yes" xml:space="preserve">
          <source>If you wish to override that choice for the client, you can define your own &lt;code&gt;ClientHttpConnector&lt;/code&gt; bean and have full control over the client configuration.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0d093e0d415bc10b403677fb4783e8f1c921505c" translate="yes" xml:space="preserve">
          <source>If you wish to use Spock to test a Spring Boot application, you should add a dependency on Spock&amp;rsquo;s &lt;code&gt;spock-spring&lt;/code&gt; module to your application&amp;rsquo;s build. &lt;code&gt;spock-spring&lt;/code&gt; integrates Spring&amp;rsquo;s test framework into Spock. It is recommended that you use Spock 1.2 or later to benefit from a number of improvements to Spock&amp;rsquo;s Spring Framework and Spring Boot integration. See &lt;a href=&quot;http://spockframework.org/spock/docs/1.2/modules.html#_spring_module&quot;&gt;the documentation for Spock&amp;rsquo;s Spring module&lt;/a&gt; for further details.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="674409ec74a8fb74c075ffce71bec99f6d688385" translate="yes" xml:space="preserve">
          <source>If you wish to use your own template for backing the Elasticsearch repositories, you can add your own &lt;code&gt;ElasticsearchRestTemplate&lt;/code&gt; or &lt;code&gt;ElasticsearchOperations&lt;/code&gt;&lt;code&gt;@Bean&lt;/code&gt;, as long as it is named &lt;code&gt;&quot;elasticsearchTemplate&quot;&lt;/code&gt;. Same applies to &lt;code&gt;ReactiveElasticsearchTemplate&lt;/code&gt; and &lt;code&gt;ReactiveElasticsearchOperations&lt;/code&gt;, with the bean name &lt;code&gt;&quot;reactiveElasticsearchTemplate&quot;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aa75191ea35e9ca860e2a0b768176bf25547f68c" translate="yes" xml:space="preserve">
          <source>If you work in a company that develops shared libraries, or if you work on an open-source or commercial library, you might want to develop your own auto-configuration. Auto-configuration classes can be bundled in external jars and still be picked-up by Spring Boot.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a5cb98e0220a61ea3812df759ed802ecc934ebae" translate="yes" xml:space="preserve">
          <source>If you work with an IDE that continuously compiles changed files, you might prefer to trigger restarts only at specific times. To do so, you can use a &amp;ldquo;trigger file&amp;rdquo;, which is a special file that must be modified when you want to actually trigger a restart check.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1df71523c85d414cef5755a813a32f85957cfee6" translate="yes" xml:space="preserve">
          <source>If you&amp;rsquo;d rather use native pooling, you can do so by adding a dependency to &lt;code&gt;org.messaginghub:pooled-jms&lt;/code&gt; and configuring the &lt;code&gt;JmsPoolConnectionFactory&lt;/code&gt; accordingly, as shown in the following example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c4fd1e9a8093f7560e569f2b3fb1d3c90d2a67af" translate="yes" xml:space="preserve">
          <source>If you&amp;rsquo;re looking for a secure way to store credentials and passwords, the &lt;a href=&quot;https://cloud.spring.io/spring-cloud-vault/&quot;&gt;Spring Cloud Vault&lt;/a&gt; project provides support for storing externalized configuration in &lt;a href=&quot;https://www.vaultproject.io/&quot;&gt;HashiCorp Vault&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="755f2b5981fa3e701b83111a7d9be865466b6fa1" translate="yes" xml:space="preserve">
          <source>If you&amp;rsquo;re using &lt;code&gt;CqlSessionBuilder&lt;/code&gt; to create multiple &lt;code&gt;CqlSession&lt;/code&gt; beans, keep in mind the builder is mutable so make sure to inject a fresh copy for each session.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9c66b22d9d74bc66272791e367da27972b4a54cc" translate="yes" xml:space="preserve">
          <source>If you&amp;rsquo;re using Logback, the following properties are also transfered:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ad9aff1dfba157d71c46e8d8037f6f4cca20e1e2" translate="yes" xml:space="preserve">
          <source>If you&amp;rsquo;re using Spring Boot&amp;rsquo;s AssertJ-based helpers to assert on a number value at a given JSON path, you might not be able to use &lt;code&gt;isEqualTo&lt;/code&gt; depending on the type. Instead, you can use AssertJ&amp;rsquo;s &lt;code&gt;satisfies&lt;/code&gt; to assert that the value matches the given condition. For instance, the following example asserts that the actual number is a float value close to &lt;code&gt;0.15&lt;/code&gt; within an offset of &lt;code&gt;0.01&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="544d50bf6423319a5da409a253d07b53966b42e3" translate="yes" xml:space="preserve">
          <source>If your Actuator endpoints are deployed on a separate management context, be aware that endpoints are then not using the same web infrastructure (port, connection pools, framework components) as the main application. In this case, a probe check could be successful even if the main application does not work properly (for example, it cannot accept new connections).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9e543959634891444497e3af208efb2f434578a0" translate="yes" xml:space="preserve">
          <source>If your JMS broker does not support transacted sessions, you have to disable the support of transactions altogether. If you create your own &lt;code&gt;JmsListenerContainerFactory&lt;/code&gt;, there is nothing to do, since, by default it cannot be transacted. If you want to use the &lt;code&gt;DefaultJmsListenerContainerFactoryConfigurer&lt;/code&gt; to reuse Spring Boot&amp;rsquo;s default, you can disable transacted sessions, as follows:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="562d2457f6fdebdf847ef579012b91cf0f1a2b5c" translate="yes" xml:space="preserve">
          <source>If your application contains more than one Spring &lt;code&gt;ApplicationContext&lt;/code&gt;, you may find that names clash. To solve this problem, you can set the &lt;code&gt;spring.jmx.unique-names&lt;/code&gt; property to &lt;code&gt;true&lt;/code&gt; so that MBean names are always unique.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2408a1896383c7cf37df7085b37565b7972d39b5" translate="yes" xml:space="preserve">
          <source>If your application expects &lt;a href=&quot;#boot-features-application-arguments&quot;&gt;arguments&lt;/a&gt;, you can have &lt;code&gt;@SpringBootTest&lt;/code&gt; inject them using the &lt;code&gt;args&lt;/code&gt; attribute.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="df4bbe47ef449952b4917a670844583cef078b23" translate="yes" xml:space="preserve">
          <source>If your application fails to start, check the log file written to &lt;code&gt;/var/log/&amp;lt;appname&amp;gt;.log&lt;/code&gt; for errors.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6987f290750e30e17648350e6d96216380421c08" translate="yes" xml:space="preserve">
          <source>If your application fails to start, registered &lt;code&gt;FailureAnalyzers&lt;/code&gt; get a chance to provide a dedicated error message and a concrete action to fix the problem. For instance, if you start a web application on port &lt;code&gt;8080&lt;/code&gt; and that port is already in use, you should see something similar to the following message:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d09a339c008618edea8f94ed53285f6ddcebd4dc" translate="yes" xml:space="preserve">
          <source>If your application is a web application (Spring MVC, Spring WebFlux, or Jersey), you can use the following additional endpoints:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7b23495c1af6bfb78b7c8c76ce1e850f2ee80845" translate="yes" xml:space="preserve">
          <source>If your application is exposed publicly, we strongly recommend that you also &lt;a href=&quot;#production-ready-endpoints-security&quot;&gt;secure your endpoints&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="70df1c7c35e88f1942a9ae6aac775a101a6eb92a" translate="yes" xml:space="preserve">
          <source>If your application is running behind a proxy, a load-balancer or in the cloud, the request information (like the host, port, scheme&amp;hellip;​) might change along the way. Your application may be running on &lt;code&gt;10.10.10.10:8080&lt;/code&gt;, but HTTP clients should only see &lt;code&gt;example.org&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4d86630bcd0cddf0f984409e5331f328e036afc7" translate="yes" xml:space="preserve">
          <source>If your application needs access to a &quot;Low Level&quot; &lt;code&gt;RestClient&lt;/code&gt;, you can get it by calling &lt;code&gt;client.getLowLevelClient()&lt;/code&gt; on the auto-configured &lt;code&gt;RestHighLevelClient&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1746807825dc1070de34bdc5112d2d7413f860d6" translate="yes" xml:space="preserve">
          <source>If your application runs in Cloud Foundry or Heroku, the &lt;code&gt;server.forward-headers-strategy&lt;/code&gt; property defaults to &lt;code&gt;NATIVE&lt;/code&gt;. In all other instances, it defaults to &lt;code&gt;NONE&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ec670aec0af8919cc0b192397b66f0365eed8d79" translate="yes" xml:space="preserve">
          <source>If your application runs in a servlet container or application server, then JNDI properties (in &lt;code&gt;java:comp/env&lt;/code&gt;) or servlet context initialization parameters can be used instead of, or as well as, environment variables or system properties.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="70469c98ce5e2abc281bbffd2a4b5ec2dac29016" translate="yes" xml:space="preserve">
          <source>If your application uses component scanning (for example, if you use &lt;code&gt;@SpringBootApplication&lt;/code&gt; or &lt;code&gt;@ComponentScan&lt;/code&gt;), you may find top-level configuration classes that you created only for specific tests accidentally get picked up everywhere.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="865a126e78fbff000e0d20fd9f6b4dd949498f1c" translate="yes" xml:space="preserve">
          <source>If your archive already includes libraries, you can use &lt;code&gt;Libraries.NONE&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1ec2b86f4112aef0e47922fff566988cf05e86fe" translate="yes" xml:space="preserve">
          <source>If your classpath contains the necessary bits to start a web server, Spring Boot will automatically start it. To disable this behavior configure the &lt;code&gt;WebApplicationType&lt;/code&gt; in your &lt;code&gt;application.properties&lt;/code&gt;, as shown in the following example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="98c7f84455c022b73b44ae40d92286eba6487a7c" translate="yes" xml:space="preserve">
          <source>If your metrics depend on other beans, it is recommended that you use a &lt;code&gt;MeterBinder&lt;/code&gt; to register them, as shown in the following example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cb45bdc97312e651611a5412252a4a3b3b48653b" translate="yes" xml:space="preserve">
          <source>If your platform provides a standard &lt;code&gt;MBeanServer&lt;/code&gt;, Spring Boot will use that and default to the VM &lt;code&gt;MBeanServer&lt;/code&gt; if necessary. If all that fails, a new &lt;code&gt;MBeanServer&lt;/code&gt; will be created.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9bbe8dde1e7457579662ad88b47b7ee4ae46cad3" translate="yes" xml:space="preserve">
          <source>If your property is of type &lt;code&gt;Map&lt;/code&gt;, you can provide hints for both the keys and the values (but not for the map itself). The special &lt;code&gt;.keys&lt;/code&gt; and &lt;code&gt;.values&lt;/code&gt; suffixes must refer to the keys and the values, respectively.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e61aa2679c91cffdedf8926c915f14c1abf10338" translate="yes" xml:space="preserve">
          <source>If your starter provides configuration keys, use a unique namespace for them. In particular, do not include your keys in the namespaces that Spring Boot uses (such as &lt;code&gt;server&lt;/code&gt;, &lt;code&gt;management&lt;/code&gt;, &lt;code&gt;spring&lt;/code&gt;, and so on). If you use the same namespace, we may modify these namespaces in the future in ways that break your modules. As a rule of thumb, prefix all your keys with a namespace that you own (e.g. &lt;code&gt;acme&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="346ec77fff651d53a6cb0a535d2f51e3bba465b5" translate="yes" xml:space="preserve">
          <source>If your terminal supports ANSI, color output is used to aid readability. You can set &lt;code&gt;spring.output.ansi.enabled&lt;/code&gt; to a &lt;a href=&quot;https://docs.spring.io/spring-boot/docs/2.4.0/api/org/springframework/boot/ansi/AnsiOutput.Enabled.html&quot;&gt;supported value&lt;/a&gt; to override the auto-detection.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6f018ceb7c14bbbd9af1206d321b709efaba54ed" translate="yes" xml:space="preserve">
          <source>If your test is &lt;code&gt;@Transactional&lt;/code&gt;, it rolls back the transaction at the end of each test method by default. However, as using this arrangement with either &lt;code&gt;RANDOM_PORT&lt;/code&gt; or &lt;code&gt;DEFINED_PORT&lt;/code&gt; implicitly provides a real servlet environment, the HTTP client and server run in separate threads and, thus, in separate transactions. Any transaction initiated on the server does not roll back in this case.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c79c58977bdb50bec62645df49c250a02d1483a7" translate="yes" xml:space="preserve">
          <source>If your test uses one of Spring Boot&amp;rsquo;s test annotations (such as &lt;code&gt;@SpringBootTest&lt;/code&gt;), this feature is automatically enabled. To use this feature with a different arrangement, a listener must be explicitly added, as shown in the following example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="878f816d7453cc69f291f0327564f469cfae9c5d" translate="yes" xml:space="preserve">
          <source>If, for whatever reason, you do configure the connection URL for an embedded database, take care to ensure that the database&amp;rsquo;s automatic shutdown is disabled. If you use H2, you should use &lt;code&gt;DB_CLOSE_ON_EXIT=FALSE&lt;/code&gt; to do so. If you use HSQLDB, you should ensure that &lt;code&gt;shutdown=true&lt;/code&gt; is not used. Disabling the database&amp;rsquo;s automatic shutdown lets Spring Boot control when the database is closed, thereby ensuring that it happens once access to the database is no longer needed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f3a9dd0511c000f299f6fad4b4428f32d56ac2b0" translate="yes" xml:space="preserve">
          <source>Immediate child directories of the &lt;code&gt;/config&lt;/code&gt; subdirectory</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8ac838c301ab843744fc94b8e08c9e38cb1b5b62" translate="yes" xml:space="preserve">
          <source>Import additional config data.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7a0f6e4a24d5d58a972483713801f2a5d3139039" translate="yes" xml:space="preserve">
          <source>Imported auto-configuration</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b1a100a5d1557214654a2b6875883ebc5364abc2" translate="yes" xml:space="preserve">
          <source>In Maven, the executable jar must be the main artifact and you can add a classified jar for the library, as follows:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e9fba501466c169b2aca4f0712aaaa9e73777bca" translate="yes" xml:space="preserve">
          <source>In Spring Boot, you can also set the active profile in &lt;code&gt;application.properties&lt;/code&gt;, as shown in the following example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0b9fddced2b2f4ee7f67c2247bcd02aaec19f8bc" translate="yes" xml:space="preserve">
          <source>In a JPA-based app, you can choose to let Hibernate create the schema or use &lt;code&gt;schema.sql&lt;/code&gt;, but you cannot do both. Make sure to disable &lt;code&gt;spring.jpa.hibernate.ddl-auto&lt;/code&gt; if you use &lt;code&gt;schema.sql&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="40944fdf331aa8639bbb2a9577ab15167cd913a8" translate="yes" xml:space="preserve">
          <source>In a nutshell, to add caching to an operation of your service add the relevant annotation to its method, as shown in the following example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="883c513ef285a1b02c9bb61eb8a71fc85e3a4d2b" translate="yes" xml:space="preserve">
          <source>In a reactive application, The &lt;code&gt;ReactiveHealthContributorRegistry&lt;/code&gt; should be used to register and unregister health indicators at runtime. If you need to register a regular &lt;code&gt;HealthContributor&lt;/code&gt;, you should wrap it using &lt;code&gt;ReactiveHealthContributor#adapt&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d0d67df72dc8d9f567ea765a99bf2e3e50a00631" translate="yes" xml:space="preserve">
          <source>In a servlet stack application, i.e. with the &lt;code&gt;spring-boot-starter-web&lt;/code&gt;, there are two ways to add &lt;code&gt;Servlet&lt;/code&gt;, &lt;code&gt;Filter&lt;/code&gt;, &lt;code&gt;ServletContextListener&lt;/code&gt;, and the other listeners supported by the Servlet API to your application:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a34a5344406a3679d938a0fd7988536cc598d61d" translate="yes" xml:space="preserve">
          <source>In a stand-alone web application, the default servlet from the container is also enabled and acts as a fallback, serving content from the root of the &lt;code&gt;ServletContext&lt;/code&gt; if Spring decides not to handle it. Most of the time, this does not happen (unless you modify the default MVC configuration), because Spring can always handle requests through the &lt;code&gt;DispatcherServlet&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="925527b943b8878a627943c79b326dd616e5e63f" translate="yes" xml:space="preserve">
          <source>In a standalone application, the Actuator HTTP port defaults to the same as the main HTTP port. To make the application listen on a different port, set the external property: &lt;code&gt;management.server.port&lt;/code&gt;. To listen on a completely different network address (such as when you have an internal network for management and an external one for user applications), you can also set &lt;code&gt;management.server.address&lt;/code&gt; to a valid IP address to which the server is able to bind.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7fe94f5cfb668e55ca180d36b5d02a0472f9e586" translate="yes" xml:space="preserve">
          <source>In a standalone application, the main HTTP port defaults to &lt;code&gt;8080&lt;/code&gt; but can be set with &lt;code&gt;server.port&lt;/code&gt; (for example, in &lt;code&gt;application.properties&lt;/code&gt; or as a System property). Thanks to relaxed binding of &lt;code&gt;Environment&lt;/code&gt; values, you can also use &lt;code&gt;SERVER_PORT&lt;/code&gt; (for example, as an OS environment variable).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d094a910b232935f8b548331327aa42e819b27de" translate="yes" xml:space="preserve">
          <source>In addition Spring Boot provides:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e55c1a6ec5bcd656e64bf3fd398503ba790572ce" translate="yes" xml:space="preserve">
          <source>In addition to &lt;code&gt;MeterFilter&lt;/code&gt; beans, it&amp;rsquo;s also possible to apply a limited set of customization on a per-meter basis using properties. Per-meter customizations apply to any all meter IDs that start with the given name. For example, the following will disable any meters that have an ID starting with &lt;code&gt;example.remote&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6a3114b2f6da78a7cb821387b82467f1535b6370" translate="yes" xml:space="preserve">
          <source>In addition to Spring Boot&amp;rsquo;s predefined &lt;a href=&quot;https://github.com/spring-projects/spring-boot/tree/v2.4.0/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/health/Status.java&quot;&gt;&lt;code&gt;Status&lt;/code&gt;&lt;/a&gt; types, it is also possible for &lt;code&gt;Health&lt;/code&gt; to return a custom &lt;code&gt;Status&lt;/code&gt; that represents a new system state. In such cases, a custom implementation of the &lt;a href=&quot;https://github.com/spring-projects/spring-boot/tree/v2.4.0/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/health/StatusAggregator.java&quot;&gt;&lt;code&gt;StatusAggregator&lt;/code&gt;&lt;/a&gt; interface also needs to be provided, or the default implementation has to be configured by using the &lt;code&gt;management.endpoint.health.status.order&lt;/code&gt; configuration property.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fa82e5cfd7fc9ff12c023355b5887b00196e37d6" translate="yes" xml:space="preserve">
          <source>In addition to durations, Spring Boot can also work with &lt;code&gt;java.time.Period&lt;/code&gt; type. The following formats can be used in application properties:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="762de70fbc64305bcc8bf1c2b03561e3eb575d4d" translate="yes" xml:space="preserve">
          <source>In addition to installing the artifacts identified by the coordinates you supply, all of the artifacts' dependencies are also installed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e533ef2d244e727007a10093c46b8440efb1b095" translate="yes" xml:space="preserve">
          <source>In addition to its default XML configuration format, Log4j 2 also supports YAML and JSON configuration files. To configure Log4j 2 to use an alternative configuration file format, add the appropriate dependencies to the classpath and name your configuration files to match your chosen file format, as shown in the following example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1fc37d2a5c958d168ab0fd2d0f26ea3e4bef8657" translate="yes" xml:space="preserve">
          <source>In addition to running Spring Boot applications by using &lt;code&gt;java -jar&lt;/code&gt;, it is also possible to make fully executable applications for Unix systems. A fully executable jar can be executed like any other executable binary or it can be &lt;a href=&quot;#deployment-service&quot;&gt;registered with &lt;code&gt;init.d&lt;/code&gt; or &lt;code&gt;systemd&lt;/code&gt;&lt;/a&gt;. This helps when installing and managing Spring Boot applications in common production environments.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="45763bf54b4ba4b6a59a86274093bcecf3190dfc" translate="yes" xml:space="preserve">
          <source>In addition to the &amp;ldquo;standard&amp;rdquo; static resource locations listed earlier, a special case is made for &lt;a href=&quot;https://www.webjars.org/&quot;&gt;Webjars content&lt;/a&gt;. Any resources with a path in &lt;code&gt;/webjars/**&lt;/code&gt; are served from jar files if they are packaged in the Webjars format.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ee8c7043a974eda6126c3144c8456226a8e2308f" translate="yes" xml:space="preserve">
          <source>In addition to the &amp;ldquo;standard&amp;rdquo; static resource locations mentioned earlier, a special case is made for &lt;a href=&quot;https://www.webjars.org/&quot;&gt;Webjars content&lt;/a&gt;. Any resources with a path in &lt;code&gt;/webjars/**&lt;/code&gt; are served from jar files if they are packaged in the Webjars format.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="207a1f43ecea4799fcb2f649398988cd75aaa988" translate="yes" xml:space="preserve">
          <source>In addition to the application starters, the following starters can be used to add &lt;em&gt;&lt;a href=&quot;production-ready-features#production-ready&quot;&gt;production ready&lt;/a&gt;&lt;/em&gt; features:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="105502b14eafb27ea17ac83a8c94b50156c69152" translate="yes" xml:space="preserve">
          <source>In addition to the usual Spring Framework events, such as &lt;a href=&quot;https://docs.spring.io/spring/docs/5.3.1/javadoc-api/org/springframework/context/event/ContextRefreshedEvent.html&quot;&gt;&lt;code&gt;ContextRefreshedEvent&lt;/code&gt;&lt;/a&gt;, a &lt;code&gt;SpringApplication&lt;/code&gt; sends some additional application events.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="93c30705c25a19f8a5780c716b0ccc0eba314f86" translate="yes" xml:space="preserve">
          <source>In addition, a file named &lt;code&gt;import.sql&lt;/code&gt; in the root of the classpath is executed on startup if Hibernate creates the schema from scratch (that is, if the &lt;code&gt;ddl-auto&lt;/code&gt; property is set to &lt;code&gt;create&lt;/code&gt; or &lt;code&gt;create-drop&lt;/code&gt;). This can be useful for demos and for testing if you are careful but is probably not something you want to be on the classpath in production. It is a Hibernate feature (and has nothing to do with Spring).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="58ec095a1f9b28b7aebef03c9d013c27316ac4be" translate="yes" xml:space="preserve">
          <source>In addition, a legacy &lt;code&gt;base.xml&lt;/code&gt; file is provided for compatibility with earlier versions of Spring Boot.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="55864e5964bb8e908e440d3fb89a91ca4b179b20" translate="yes" xml:space="preserve">
          <source>In addition, all properties in &lt;code&gt;spring.jpa.properties.*&lt;/code&gt; are passed through as normal JPA properties (with the prefix stripped) when the local &lt;code&gt;EntityManagerFactory&lt;/code&gt; is created.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a29cab1eccbeeafaf391ac91135afc680e3c1bbe" translate="yes" xml:space="preserve">
          <source>In addition, beans may implement the &lt;code&gt;org.springframework.boot.ExitCodeGenerator&lt;/code&gt; interface if they wish to return a specific exit code when &lt;code&gt;SpringApplication.exit()&lt;/code&gt; is called. This exit code can then be passed to &lt;code&gt;System.exit()&lt;/code&gt; to return it as a status code, as shown in the following example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bf2467ba9eafcdc92ac53bdf707877e34089b96f" translate="yes" xml:space="preserve">
          <source>In addition, you can also obtain availability states by injecting the &lt;code&gt;ApplicationAvailability&lt;/code&gt; interface into your own beans.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ceefae5e3cfb3205376256a07b9b427f24c13009" translate="yes" xml:space="preserve">
          <source>In an application using the reactive style, a &lt;code&gt;ReactiveTransactionManager&lt;/code&gt; is not auto-configured. To enable transaction management, the following bean must be defined in your configuration:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fe620603f3bdba2aa345416b76eca215a7d181c9" translate="yes" xml:space="preserve">
          <source>In cases where opaque tokens are used instead of JWTs, you can configure the following properties to validate tokens via introspection:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f0b624a7bab69756f3f57989d3b3d96842a1ef0e" translate="yes" xml:space="preserve">
          <source>In fact, both Spring Data JPA and Spring Data Elasticsearch share the same common infrastructure. You could take the JPA example from earlier and, assuming that &lt;code&gt;City&lt;/code&gt; is now an Elasticsearch &lt;code&gt;@Document&lt;/code&gt; class rather than a JPA &lt;code&gt;@Entity&lt;/code&gt;, it works in the same way.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bbba997ac7bbf5ab0b575c91ce0525e554a6ac71" translate="yes" xml:space="preserve">
          <source>In fact, both Spring Data JPA and Spring Data MongoDB share the same common infrastructure. You could take the JPA example from earlier and, assuming that &lt;code&gt;City&lt;/code&gt; is now a MongoDB data class rather than a JPA &lt;code&gt;@Entity&lt;/code&gt;, it works in the same way, as shown in the following example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="574c7d0e36ccf217a5be47d84258dd8245ddcda0" translate="yes" xml:space="preserve">
          <source>In fact, both Spring Data JPA and Spring Data Solr share the same common infrastructure. You could take the JPA example from earlier and, assuming that &lt;code&gt;City&lt;/code&gt; is now a &lt;code&gt;@SolrDocument&lt;/code&gt; class rather than a JPA &lt;code&gt;@Entity&lt;/code&gt;, it works in the same way.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f6585260ade06f3a500fec89416b6873b09928b8" translate="yes" xml:space="preserve">
          <source>In general, the &quot;Liveness&quot; state should not be based on external checks, such as &lt;a href=&quot;production-ready-features#production-ready-health&quot;&gt;Health checks&lt;/a&gt;. If it did, a failing external system (a database, a Web API, an external cache) would trigger massive restarts and cascading failures across the platform.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="30e9bc20800f45146a15dfbdd478d0e2c6e1e834" translate="yes" xml:space="preserve">
          <source>In order to access these properties from the &lt;code&gt;Environment&lt;/code&gt;, they would be flattened as follows:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="360b23905cd612f36b2363fded14bed7cdd1be6a" translate="yes" xml:space="preserve">
          <source>In order to achieve reproducible builds and container image caching, Buildpacks can manipulate the application resources metadata (such as the file &quot;last modified&quot; information). You should ensure that your application does not rely on that metadata at runtime. Spring Boot can use that information when serving static resources, but this can be disabled with &lt;code&gt;spring.web.resources.cache.use-last-modified&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a311cb1383108ed96e2fd1b307f9952f83abf388" translate="yes" xml:space="preserve">
          <source>In order to avoid mixing different versions of Kotlin dependencies on the classpath, Spring Boot imports the Kotlin BOM.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="51edf71a20a83c2b0e24a15a77a44288e5ca567c" translate="yes" xml:space="preserve">
          <source>In order to document default values for properties in the class above, you could add the following content to &lt;a href=&quot;#configuration-metadata-additional-metadata&quot;&gt;the manual metadata of the module&lt;/a&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f5f1acfe72853656c6872ca5b655211c762fd37e" translate="yes" xml:space="preserve">
          <source>In order to use jOOQ type-safe queries, you need to generate Java classes from your database schema. You can follow the instructions in the &lt;a href=&quot;https://www.jooq.org/doc/3.14.3/manual-single-page/#jooq-in-7-steps-step3&quot;&gt;jOOQ user manual&lt;/a&gt;. If you use the &lt;code&gt;jooq-codegen-maven&lt;/code&gt; plugin and you also use the &lt;code&gt;spring-boot-starter-parent&lt;/code&gt; &amp;ldquo;parent POM&amp;rdquo;, you can safely omit the plugin&amp;rsquo;s &lt;code&gt;&amp;lt;version&amp;gt;&lt;/code&gt; tag. You can also use Spring Boot-defined version variables (such as &lt;code&gt;h2.version&lt;/code&gt;) to declare the plugin&amp;rsquo;s database dependency. The following listing shows an example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b8b2964008f51eb830ea618af6b314ee4efe08a7" translate="yes" xml:space="preserve">
          <source>In other words, the two configurations in the following example use the Google provider:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="75e501471c4544658981415ddccf1bd54aad16d8" translate="yes" xml:space="preserve">
          <source>In particular, &lt;code&gt;JooqExceptionTranslator&lt;/code&gt; and &lt;code&gt;SpringTransactionProvider&lt;/code&gt; can be reused to provide similar features to what the auto-configuration does with a single &lt;code&gt;DataSource&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aca084254980b839f856ca4ee7b0c5f23df2817e" translate="yes" xml:space="preserve">
          <source>In particular, an &lt;code&gt;Executor&lt;/code&gt; bean is not associated with the scheduler as Quartz offers a way to configure the scheduler via &lt;code&gt;spring.quartz.properties&lt;/code&gt;. If you need to customize the task executor, consider implementing &lt;code&gt;SchedulerFactoryBeanCustomizer&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ed4db2ede03a1a8e2396c2d89b50e7964e41a2fb" translate="yes" xml:space="preserve">
          <source>In particular, certain default timeout values are infinite, and you may want to change that to avoid having a thread blocked by an unresponsive mail server, as shown in the following example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="63c5e14beb6cbb637f794bf409a08b7b87c45448" translate="yes" xml:space="preserve">
          <source>In the &lt;code&gt;META-INF/spring.factories&lt;/code&gt; file, you can activate the listener(s) that writes a PID file, as shown in the following example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cbd89352df8b31aa692276a55931b27373848d2e" translate="yes" xml:space="preserve">
          <source>In the &lt;code&gt;spring-boot&lt;/code&gt; module, you can find two classes to create files that are often useful for process monitoring:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d977626647bca64754d50e68d6416b1dac5ac302" translate="yes" xml:space="preserve">
          <source>In the absence of an &lt;code&gt;Executor&lt;/code&gt; bean in the context, Spring Boot auto-configures a &lt;code&gt;ThreadPoolTaskExecutor&lt;/code&gt; with sensible defaults that can be automatically associated to asynchronous task execution (&lt;code&gt;@EnableAsync&lt;/code&gt;) and Spring MVC asynchronous request processing.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b19b619ab34acbdfa4243d52e42e77cc24584333" translate="yes" xml:space="preserve">
          <source>In the case of &lt;code&gt;Filters&lt;/code&gt; and &lt;code&gt;Servlets&lt;/code&gt;, you can also add mappings and init parameters by adding a &lt;code&gt;FilterRegistrationBean&lt;/code&gt; or a &lt;code&gt;ServletRegistrationBean&lt;/code&gt; instead of or in addition to the underlying component.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="484cd257874be9a816eebf2962abb99ee3e3bf4e" translate="yes" xml:space="preserve">
          <source>In the preceding example, an auto-configured &lt;code&gt;ConcurrentMapCacheManager&lt;/code&gt; is expected. If that is not the case (either you provided your own config or a different cache provider was auto-configured), the customizer is not invoked at all. You can have as many customizers as you want, and you can also order them by using &lt;code&gt;@Order&lt;/code&gt; or &lt;code&gt;Ordered&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bfc9aa09a15fc7b34ed45099e034825aa697daaf" translate="yes" xml:space="preserve">
          <source>In the preceding example, if &lt;code&gt;YourException&lt;/code&gt; is thrown by a controller defined in the same package as &lt;code&gt;AcmeController&lt;/code&gt;, a JSON representation of the &lt;code&gt;CustomErrorType&lt;/code&gt; POJO is used instead of the &lt;code&gt;ErrorAttributes&lt;/code&gt; representation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="83cbc85dd4006e698ef6ad4db29bf0bf172eb2d7" translate="yes" xml:space="preserve">
          <source>In the preceding example, if the &lt;code&gt;dev&lt;/code&gt; profile is active, &lt;code&gt;AcmeProperties.list&lt;/code&gt; contains &lt;em&gt;one&lt;/em&gt;&lt;code&gt;MyPojo&lt;/code&gt; entry (with a name of &lt;code&gt;my another name&lt;/code&gt; and a description of &lt;code&gt;null&lt;/code&gt;). For YAML, both comma-separated lists and YAML lists can be used for completely overriding the contents of the list.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="93d1249acf6e5ba1f10c842dfa34c782d1339091" translate="yes" xml:space="preserve">
          <source>In the preceding example, the &lt;code&gt;myService&lt;/code&gt; bean is going to be created if no bean of type &lt;code&gt;MyService&lt;/code&gt; is already contained in the &lt;code&gt;ApplicationContext&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9d6e02a4a83d105c0eb78377934fa7a8996f214c" translate="yes" xml:space="preserve">
          <source>In the preceding example, the default port is 9000. However, if the Spring profile called &amp;lsquo;development&amp;rsquo; is active, then the port is 9001. If &amp;lsquo;production&amp;rsquo; is active, then the port is 0.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="530c9efb9834d76bfa47621f0ba8a6b36b7c5bbb" translate="yes" xml:space="preserve">
          <source>In the preceding example, we substitute &lt;code&gt;acloudyspringtime&lt;/code&gt; for whatever value you give &lt;code&gt;cf&lt;/code&gt; as the name of your application.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3fc242a0e260a765f224f70fda1242064d022781" translate="yes" xml:space="preserve">
          <source>In the preceding example, you end up with &lt;code&gt;acme.name=test&lt;/code&gt; in the Spring &lt;code&gt;Environment&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="48ae8c300c1db5a1d7fe4db3dcf4d7e359287f56" translate="yes" xml:space="preserve">
          <source>In the presence of &lt;code&gt;spring-data-elasticsearch&lt;/code&gt; and the required dependencies for using a &lt;code&gt;WebClient&lt;/code&gt; (typically &lt;code&gt;spring-boot-starter-webflux&lt;/code&gt;), Spring Boot can also auto-configure a &lt;a href=&quot;#boot-features-connecting-to-elasticsearch-reactive-rest&quot;&gt;ReactiveElasticsearchClient&lt;/a&gt; and a &lt;code&gt;ReactiveElasticsearchTemplate&lt;/code&gt; as beans. They are the reactive equivalent of the other REST clients.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="276b792dda5574d3aa764ceed03a74dffacafcd7" translate="yes" xml:space="preserve">
          <source>In this case, the default executable script runs the application as the &lt;code&gt;bootapp&lt;/code&gt; user.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="afde51a39424ae9e65b31cbf5e5cc91824cad54f" translate="yes" xml:space="preserve">
          <source>In this example, &lt;code&gt;Application&lt;/code&gt; is just like any other Spring Boot application except that &lt;code&gt;@Component&lt;/code&gt;-annotated classes and &lt;code&gt;@ConfigurationProperties&lt;/code&gt;-annotated classes are not detected automatically and the user-defined beans are imported explicitly (see &lt;code&gt;@Import&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="17e2f5090f9ff5fcb182b42de079883483379f93" translate="yes" xml:space="preserve">
          <source>In this section, we look at what it takes to get the &lt;a href=&quot;getting-started#getting-started-first-application&quot;&gt;application that we developed&lt;/a&gt; in the &amp;ldquo;Getting Started&amp;rdquo; section up and running in the Cloud.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ddb74f18441f84635174c4031db0e157480252c0" translate="yes" xml:space="preserve">
          <source>In this setup, the &lt;code&gt;@ConstructorBinding&lt;/code&gt; annotation is used to indicate that constructor binding should be used. This means that the binder will expect to find a constructor with the parameters that you wish to have bound.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="50f5d97b347cc87750f73ccc10c30c9fce624118" translate="yes" xml:space="preserve">
          <source>In this specific case, the port binding works in a PaaS environment such as Heroku or Cloud Foundry. In those two platforms, the &lt;code&gt;PORT&lt;/code&gt; environment variable is set automatically and Spring can bind to capitalized synonyms for &lt;code&gt;Environment&lt;/code&gt; properties.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="88b192b751942e1a850b4ef7d62d70867a636609" translate="yes" xml:space="preserve">
          <source>In yaml files, you can use the yaml list notation. In properties files, you must include the index as part of the property name:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c6dbd993b937ce1b38ac2e607169a8dbd67e0524" translate="yes" xml:space="preserve">
          <source>In-memory embedded LDAP generally works well for tests, since it is fast and does not require any developer installation. If, however, you prefer to run tests against a real LDAP server, you should exclude the embedded LDAP auto-configuration, as shown in the following example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d6c7a72f9e7214a9b0541570ee279e341d6645b5" translate="yes" xml:space="preserve">
          <source>In-memory embedded MongoDB generally works well for tests, since it is fast and does not require any developer installation. If, however, you prefer to run tests against a real MongoDB server, you should exclude the embedded MongoDB auto-configuration, as shown in the following example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="79d139a90e468239acac922f41466d52fd051cd3" translate="yes" xml:space="preserve">
          <source>In-memory embedded databases generally work well for tests, since they are fast and do not require any installation. If, however, you prefer to run tests against a real database you can use the &lt;code&gt;@AutoConfigureTestDatabase&lt;/code&gt; annotation, as shown in the following example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="21ba267080f0b1b6a1304a5568a061ff34f4e0ea" translate="yes" xml:space="preserve">
          <source>Include the &quot;exception&quot; attribute.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="08c61bd8ccf00fcdd45e944238bc2dc6902e8a62" translate="yes" xml:space="preserve">
          <source>Including multiple &amp;ldquo;slices&amp;rdquo; by using several &lt;code&gt;@&amp;hellip;​Test&lt;/code&gt; annotations in one test is not supported. If you need multiple &amp;ldquo;slices&amp;rdquo;, pick one of the &lt;code&gt;@&amp;hellip;​Test&lt;/code&gt; annotations and include the &lt;code&gt;@AutoConfigure&amp;hellip;​&lt;/code&gt; annotations of the other &amp;ldquo;slices&amp;rdquo; by hand.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bd9332e575884b066c5d5130cb063ce6e9994b00" translate="yes" xml:space="preserve">
          <source>Inclusion of &lt;code&gt;ContentNegotiatingViewResolver&lt;/code&gt; and &lt;code&gt;BeanNameViewResolver&lt;/code&gt; beans.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="48a6bf61ef03cbd3bf93cb8878ed926b564eef74" translate="yes" xml:space="preserve">
          <source>Index date format used for rolling indices. Appended to the index name.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2659f08a599fba294a045146a3b720bfd7c5368c" translate="yes" xml:space="preserve">
          <source>Index files follow a YAML compatible syntax so that they can be easily parsed by third-party tools. These files, however, are &lt;em&gt;not&lt;/em&gt; parsed internally as YAML and they must be written in exactly the formats described below in order to be used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7e6282b4f96ae1ab766c24398a7034fbd0e1a96a" translate="yes" xml:space="preserve">
          <source>Index to export metrics to.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bcc913d52f1555747e21e4b882c289f716bbb00c" translate="yes" xml:space="preserve">
          <source>Indicate intermediaries (caches and others) that they should not transform the response content.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="29e1431467f1a7f58ba90ae84dad098df12fae5d" translate="yes" xml:space="preserve">
          <source>Indicate that any cache may store the response.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ab41555fb1fb156cac0f36c6b483f710c5474c9f" translate="yes" xml:space="preserve">
          <source>Indicate that once it has become stale, a cache must not use the response without re-validating it with the server.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f413f362ab5a91368536763b6cead6a2c7526008" translate="yes" xml:space="preserve">
          <source>Indicate that the cached response can be reused only if re-validated with the server.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="707097195fdc761e9e7dc1366ebe92541fb27d8c" translate="yes" xml:space="preserve">
          <source>Indicate that the response message is intended for a single user and must not be stored by a shared cache.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1e8cfe9306804f85fc6094a7aac5ad15f9e8a620" translate="yes" xml:space="preserve">
          <source>Indicate to not cache the response in any case.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ac0bd2d38de78a774e94c399a2922ae46bea3783" translate="yes" xml:space="preserve">
          <source>Infinispan</source>
          <target state="translated">Infinispan</target>
        </trans-unit>
        <trans-unit id="1a8479c98f2d6af522690474c1674e8ba835f561" translate="yes" xml:space="preserve">
          <source>Influx</source>
          <target state="translated">Influx</target>
        </trans-unit>
        <trans-unit id="c36b3bee195a35bec9f411d10a441e1db9cf408c" translate="yes" xml:space="preserve">
          <source>InfluxDB relies on OkHttp. If you need to tune the http client &lt;code&gt;InfluxDB&lt;/code&gt; uses behind the scenes, you can register an &lt;code&gt;InfluxDbOkHttpClientBuilderProvider&lt;/code&gt; bean.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4faeda0c3fa6f6b4caeec766b36b6695337a9a81" translate="yes" xml:space="preserve">
          <source>Information returned by the &lt;code&gt;env&lt;/code&gt; and &lt;code&gt;configprops&lt;/code&gt; endpoints can be somewhat sensitive so keys matching a certain pattern are sanitized by default (i.e. their values are replaced by &lt;code&gt;******&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3e7789ab1824442b7958f2e9401f3749e8be176e" translate="yes" xml:space="preserve">
          <source>Ingest pipeline name. By default, events are not pre-processed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="19478c9d17c98db1f11d018e765ddfcf227d1acd" translate="yes" xml:space="preserve">
          <source>Init parameters to pass to Jersey through the servlet or filter.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3a9ccc7d1ee84f02db08c1ceaf7d97b4a737b61f" translate="yes" xml:space="preserve">
          <source>Init parameters used to configure the JSP servlet.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cf686febab63d9cc18c50d2c3dd18e12a04bbe06" translate="yes" xml:space="preserve">
          <source>Initial buffer size for HTTP request decoding.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dbe58e28c696d71b755dcf6bac5e4360e7155a08" translate="yes" xml:space="preserve">
          <source>Initial connection pool size.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0a3bd5b26616e003420c4b3c494e78bb99a7748f" translate="yes" xml:space="preserve">
          <source>Input type conversion</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a146472e963ec9891412a94daa2ca75430b069d5" translate="yes" xml:space="preserve">
          <source>Inside your &lt;code&gt;banner.txt&lt;/code&gt; file, you can use any of the following placeholders:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c81b79df3c6448eae7c4f80428b54cd5692a17d7" translate="yes" xml:space="preserve">
          <source>Installation</source>
          <target state="translated">Installation</target>
        </trans-unit>
        <trans-unit id="f3e344d348a077ceae9c867376f1fe1e5208d7cc" translate="yes" xml:space="preserve">
          <source>Installing the CLI, Using the CLI, Configuring the CLI, and more.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8ca4930d0a993b2b679d5dcfaf7457a2fda9062c" translate="yes" xml:space="preserve">
          <source>Instructions for how to upgrade from earlier versions of Spring Boot are provided on the project &lt;a href=&quot;https://github.com/spring-projects/spring-boot/wiki&quot;&gt;wiki&lt;/a&gt;. Follow the links in the &lt;a href=&quot;https://github.com/spring-projects/spring-boot/wiki#release-notes&quot;&gt;release notes&lt;/a&gt; section to find the version that you want to upgrade to.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c45fdf0e73a6762732491f6f0b102841fdaa31ee" translate="yes" xml:space="preserve">
          <source>Intermediate location of uploaded files.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="428748e2b14d5e27966975f6fc328b3a65fff00f" translate="yes" xml:space="preserve">
          <source>Interval between checkpoints, expressed as the number of log writes between two checkpoints. A checkpoint reduces the log file size at the expense of adding some overhead in the runtime.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="21d6cc107c07a01290168d4a766f34b4162b1485" translate="yes" xml:space="preserve">
          <source>Introducing Kotlin support in Spring Framework 5.0</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2a097b4088c6c983354bb5faeb0cad18dd1847a1" translate="yes" xml:space="preserve">
          <source>Introducing Spring Boot, System Requirements, Servlet Containers, Installing Spring Boot, Developing Your First Spring Boot Application</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f63289d08d91d66b38d80ac08a9d6ec133e01261" translate="yes" xml:space="preserve">
          <source>Isolation level for reading messages that have been written transactionally.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="47fef12f103c46eaf53c63224dabf237624c3f69" translate="yes" xml:space="preserve">
          <source>It does not matter which container type you chose. Those two beans are exposed by the auto-configuration.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="863d313bbf3c82face4ec49a50f2faa80dfe576b" translate="yes" xml:space="preserve">
          <source>It is also possible to &lt;em&gt;force&lt;/em&gt; a particular cache provider by setting the &lt;code&gt;spring.cache.type&lt;/code&gt; property. Use this property if you need to &lt;a href=&quot;#boot-features-caching-provider-none&quot;&gt;disable caching altogether&lt;/a&gt; in certain environment (such as tests).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="405e432c01cc54a165c2085f4e393dbc1d2d70eb" translate="yes" xml:space="preserve">
          <source>It is also possible to apply manually the customizers responsible for this instrumentation, namely &lt;code&gt;MetricsRestTemplateCustomizer&lt;/code&gt; and &lt;code&gt;MetricsWebClientCustomizer&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0e342a8f50ff98a728775c71587211369a73cacc" translate="yes" xml:space="preserve">
          <source>It is also possible to configure a &lt;code&gt;JavaMailSender&lt;/code&gt; with an existing &lt;code&gt;Session&lt;/code&gt; from JNDI:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="491376887d99e9660a0b638f766e0559735b44f5" translate="yes" xml:space="preserve">
          <source>It is also possible to configure the &lt;code&gt;SpringApplication&lt;/code&gt; by using an &lt;code&gt;application.properties&lt;/code&gt; file. See &lt;em&gt;&lt;a href=&quot;#boot-features-external-config&quot;&gt;Externalized Configuration&lt;/a&gt;&lt;/em&gt; for details.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bcc8002acb9e2e1eaf620051b8934226b03f8178" translate="yes" xml:space="preserve">
          <source>It is also possible to customize some of the &lt;code&gt;ClusterEnvironment&lt;/code&gt; settings. For instance, the following configuration changes the timeout to use to open a new &lt;code&gt;Bucket&lt;/code&gt; and enables SSL support:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d0458253c62f04237a38b55ace84a9de21113f29" translate="yes" xml:space="preserve">
          <source>It is also possible to customize the &lt;code&gt;Environment&lt;/code&gt; before the application context is refreshed by using &lt;code&gt;EnvironmentPostProcessor&lt;/code&gt;. Each implementation should be registered in &lt;code&gt;META-INF/spring.factories&lt;/code&gt;, as shown in the following example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6c79c88ce4106f93c1147e73f2cc6d68f46e56aa" translate="yes" xml:space="preserve">
          <source>It is also possible to easily customize the &lt;code&gt;Environment&lt;/code&gt;, as shown in the following example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1f3fc50c8d4c1ccc5ff60f442ad26704dd404e88" translate="yes" xml:space="preserve">
          <source>It is also possible to run a packaged application with remote debugging support enabled. Doing so lets you attach a debugger to your packaged application, as shown in the following example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8fed57a9495b65fd6cf2f077c2cedf14a00e3668" translate="yes" xml:space="preserve">
          <source>It is also possible to take complete control of the &lt;code&gt;ApplicationContext&lt;/code&gt; type that is used by calling &lt;code&gt;setApplicationContextClass(&amp;hellip;​)&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="693b351a9cd5863fd308de92780625d7abb3a29b" translate="yes" xml:space="preserve">
          <source>It is also possible to test what happens when a particular class and/or package is not present at runtime. Spring Boot ships with a &lt;code&gt;FilteredClassLoader&lt;/code&gt; that can easily be used by the runner. In the following example, we assert that if &lt;code&gt;UserService&lt;/code&gt; is not present, the auto-configuration is properly disabled:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2734c8dfa6c0d6bd13d500dca2fdcd68ed55839d" translate="yes" xml:space="preserve">
          <source>It is also possible to transparently &lt;a href=&quot;https://docs.spring.io/spring/docs/5.3.1/reference/html/integration.html#cache-annotations-put&quot;&gt;update&lt;/a&gt; or &lt;a href=&quot;https://docs.spring.io/spring/docs/5.3.1/reference/html/integration.html#cache-annotations-evict&quot;&gt;evict&lt;/a&gt; data from the cache.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="df866c73f0be7820ec044fb4c96c342a5f3864e9" translate="yes" xml:space="preserve">
          <source>It is also possible to use the &lt;code&gt;@AutoConfigure&amp;hellip;​&lt;/code&gt; annotations with the standard &lt;code&gt;@SpringBootTest&lt;/code&gt; annotation. You can use this combination if you are not interested in &amp;ldquo;slicing&amp;rdquo; your application but you want some of the auto-configured test beans.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3e2591ae1b16c95c560c9f0dda27230771278b0c" translate="yes" xml:space="preserve">
          <source>It is always advisable to use &lt;code&gt;https://&lt;/code&gt; as the connection protocol, so that traffic is encrypted and passwords cannot be intercepted.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5a06c25c2d8d826ea318e002cd7ce8e2b2ac25c5" translate="yes" xml:space="preserve">
          <source>It is not required that every &amp;ldquo;property&amp;rdquo; has a &amp;ldquo;group&amp;rdquo;. Some properties might exist in their own right.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e2557bf1d7b72d96d4ee34efd9c5f77d65dc70c1" translate="yes" xml:space="preserve">
          <source>It is often convenient to develop applications by using an in-memory embedded database. Obviously, in-memory databases do not provide persistent storage. You need to populate your database when your application starts and be prepared to throw away data when your application ends.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a53e016c06956f99c26890bc37226134dd422de2" translate="yes" xml:space="preserve">
          <source>It is often desirable to call &lt;code&gt;setWebApplicationType(WebApplicationType.NONE)&lt;/code&gt; when using &lt;code&gt;SpringApplication&lt;/code&gt; within a JUnit test.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="451ed0e0a361886145f1f396232c806ddaaddd1b" translate="yes" xml:space="preserve">
          <source>It is possible to bind a bean declaring standard JavaBean properties as shown in the following example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="344049e68019f4ddc313dcdee4ebe3ce3dec6593" translate="yes" xml:space="preserve">
          <source>It is possible to build a Spring Boot project using Apache Ant+Ivy. The &lt;code&gt;spring-boot-antlib&lt;/code&gt; &amp;ldquo;AntLib&amp;rdquo; module is also available to help Ant create executable jars.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6d0474d51ae4b77a4f88c22618902e3a7b59c162" translate="yes" xml:space="preserve">
          <source>It is possible to define multiple base-dn values, however, since distinguished names usually contain commas, they must be defined using the correct notation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a84f595f3d28ff46338a9d8ccb0e6f5ed0d4b3a6" translate="yes" xml:space="preserve">
          <source>It is possible to disable them all by setting the &lt;code&gt;management.info.defaults.enabled&lt;/code&gt; property.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8e067d397dd176791bae5e31ab4ff5128c0ca663" translate="yes" xml:space="preserve">
          <source>It is possible to enable admin-related features for the application by specifying the &lt;code&gt;spring.application.admin.enabled&lt;/code&gt; property. This exposes the &lt;a href=&quot;https://github.com/spring-projects/spring-boot/tree/v2.4.0/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/admin/SpringApplicationAdminMXBean.java&quot;&gt;&lt;code&gt;SpringApplicationAdminMXBean&lt;/code&gt;&lt;/a&gt; on the platform &lt;code&gt;MBeanServer&lt;/code&gt;. You could use this feature to administer your Spring Boot application remotely. This feature could also be useful for any service wrapper implementation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4a871d5a04565de30c6b48dbccfa48395131465a" translate="yes" xml:space="preserve">
          <source>It is recommended to use the container&amp;rsquo;s built-in support for multipart uploads rather than introducing an additional dependency such as Apache Commons File Upload.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="92d60f6d689b64f99614193beab9b378963ad3c4" translate="yes" xml:space="preserve">
          <source>It is recommended, but not mandatory, to use the Apache HTTP Client (version 4.3.2 or better). If you have that on your classpath, the &lt;code&gt;TestRestTemplate&lt;/code&gt; responds by configuring the client appropriately. If you do use Apache&amp;rsquo;s HTTP client, some additional test-friendly features are enabled:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ba5e9169a65079dfae3dc127054d5197f0ca8368" translate="yes" xml:space="preserve">
          <source>It is strongly recommended that you choose a build system that supports &lt;a href=&quot;#using-boot-dependency-management&quot;&gt;&lt;em&gt;dependency management&lt;/em&gt;&lt;/a&gt; and that can consume artifacts published to the &amp;ldquo;Maven Central&amp;rdquo; repository. We would recommend that you choose Maven or Gradle. It is possible to get Spring Boot to work with other build systems (Ant, for example), but they are not particularly well supported.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eac61dd25fe995d9e27baf561d75975f8a0f3a09" translate="yes" xml:space="preserve">
          <source>It is usually safe to leave Filter beans unordered. If a specific order is required, you should annotate the &lt;code&gt;Filter&lt;/code&gt; with &lt;code&gt;@Order&lt;/code&gt; or make it implement &lt;code&gt;Ordered&lt;/code&gt;. You cannot configure the order of a &lt;code&gt;Filter&lt;/code&gt; by annotating its bean method with &lt;code&gt;@Order&lt;/code&gt;. If you cannot change the &lt;code&gt;Filter&lt;/code&gt; class to add &lt;code&gt;@Order&lt;/code&gt; or implement &lt;code&gt;Ordered&lt;/code&gt;, you must define a &lt;code&gt;FilterRegistrationBean&lt;/code&gt; for the &lt;code&gt;Filter&lt;/code&gt; and set the registration bean&amp;rsquo;s order using the &lt;code&gt;setOrder(int)&lt;/code&gt; method. Avoid configuring a Filter that reads the request body at &lt;code&gt;Ordered.HIGHEST_PRECEDENCE&lt;/code&gt;, since it might go against the character encoding configuration of your application. If a Servlet filter wraps the request, it should be configured with an order that is less than or equal to &lt;code&gt;OrderedFilter.REQUEST_WRAPPER_FILTER_MAX_ORDER&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d166ea0dac48c8e50540890a87bddcad9b755266" translate="yes" xml:space="preserve">
          <source>It might happen that more than one provider is present, in which case the provider must be explicitly specified. Even if the JSR-107 standard does not enforce a standardized way to define the location of the configuration file, Spring Boot does its best to accommodate setting a cache with implementation details, as shown in the following example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bf1c8e0d789bebd778512bfa4643a64eb675dbcf" translate="yes" xml:space="preserve">
          <source>It often makes sense to customize elements of the start script as it is written into the jar file. For example, init.d scripts can provide a &amp;ldquo;description&amp;rdquo;. Since you know the description up front (and it need not change), you may as well provide it when the jar is generated.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="63a0a802d9a5aa9be545ebf0904443cdd1834de6" translate="yes" xml:space="preserve">
          <source>It then becomes important not to litter the application&amp;rsquo;s main class with configuration settings that are specific to a particular area of its functionality.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d2b432134b80a832301e20530a4fae9f849fbf1d" translate="yes" xml:space="preserve">
          <source>It uninstalls the artifacts identified by the coordinates you supply and their dependencies.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bb2c3a228b8a63c3d0f9ebfba46e52f66b831430" translate="yes" xml:space="preserve">
          <source>It&amp;rsquo;s also possible to set logging levels using environment variables. For example, &lt;code&gt;LOGGING_LEVEL_ORG_SPRINGFRAMEWORK_WEB=DEBUG&lt;/code&gt; will set &lt;code&gt;org.springframework.web&lt;/code&gt; to &lt;code&gt;DEBUG&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ddfdf5526d71d394651f2b743fce4bcd7766aae8" translate="yes" xml:space="preserve">
          <source>It&amp;rsquo;s often useful to be able to group related loggers together so that they can all be configured at the same time. For example, you might commonly change the logging levels for &lt;em&gt;all&lt;/em&gt; Tomcat related loggers, but you can&amp;rsquo;t easily remember top level packages.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fa677fdd781a780e4d387d2d67356227f9de02d2" translate="yes" xml:space="preserve">
          <source>It&amp;rsquo;s sometimes useful to only activate a given get of properties when certain conditions are met. For example, you might have properties that are only relevant when a specific profile is active.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="33a245cd63a1cb2272703c16ecd530e77755243f" translate="yes" xml:space="preserve">
          <source>It&amp;rsquo;s sometimes useful to organize health indicators into groups that can be used for different purposes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="44d25b5d1b6d98c7d090ca3609aca11ae2815fa0" translate="yes" xml:space="preserve">
          <source>Items</source>
          <target state="translated">Items</target>
        </trans-unit>
        <trans-unit id="f44d4dfad4f0d772ef96d36f8dd8d15cccf6d2a8" translate="yes" xml:space="preserve">
          <source>Items to be included in the trace. Defaults to request headers (excluding Authorization and Cookie), response headers (excluding Set-Cookie), and time taken.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8990a34e20bfc58622aa559f693fe5d4f6683250" translate="yes" xml:space="preserve">
          <source>JAXB is only available out of the box with Java 8. If you&amp;rsquo;re using a more recent Java generation, add the following dependency to your project:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a73a76028ee498b374420023104d23fd243e7ff9" translate="yes" xml:space="preserve">
          <source>JCache (JSR-107)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1f1062dcbb83b59e4f6f5cb50ef505afac199e0d" translate="yes" xml:space="preserve">
          <source>JDBC</source>
          <target state="translated">JDBC</target>
        </trans-unit>
        <trans-unit id="ad5621d8c078ad36c48a8ae5327068dd26b91876" translate="yes" xml:space="preserve">
          <source>JDBC Application.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a04db6096c703c480ad28630ca79777c2e60643b" translate="yes" xml:space="preserve">
          <source>JDBC URL of the database to migrate. If not set, the primary configured data source is used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8bd9a87b97be06a610d9c2f6d003732f633bec18" translate="yes" xml:space="preserve">
          <source>JDBC URL of the database.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d00750e627573302a5f445a548d45368af752f13" translate="yes" xml:space="preserve">
          <source>JDBC url of the database to migrate. If not set, the primary configured data source is used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c9a020eac89ab9b75f8806942142b0ac0c3ed8cb" translate="yes" xml:space="preserve">
          <source>JDK (Java Util Logging)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="419767c84102b8a9c04263f473fb2478441eb8aa" translate="yes" xml:space="preserve">
          <source>JMS</source>
          <target state="translated">JMS</target>
        </trans-unit>
        <trans-unit id="2a04fe014d05cd4f74b53bc76206a96e43028e70" translate="yes" xml:space="preserve">
          <source>JMS Application.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2b8bd7f0cfe36bbd5d2714b1db91c558851c9311" translate="yes" xml:space="preserve">
          <source>JMX</source>
          <target state="translated">JMX</target>
        </trans-unit>
        <trans-unit id="310baf4ae8f57fd200c45e52fc9e8c56b05596fa" translate="yes" xml:space="preserve">
          <source>JMX domain name.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a0cd744138adf29ca3b64e8bffb57362f90d221e" translate="yes" xml:space="preserve">
          <source>JMX name of the application admin MBean.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a9e7b55cd877e40ab90cc05f9c98cddf9083a4b9" translate="yes" xml:space="preserve">
          <source>JNDI attributes from &lt;code&gt;java:comp/env&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="35d017995f01092fa725ef1601af717de166be1c" translate="yes" xml:space="preserve">
          <source>JNDI location of the datasource. Class, url, username and password are ignored when set.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="38cfc96020d4957295a1f07e6707b67e41b4b9b7" translate="yes" xml:space="preserve">
          <source>JOOQ tests are transactional and roll back at the end of each test by default. If that is not what you want, you can disable transaction management for a test or for the whole test class as &lt;a href=&quot;#boot-features-testing-spring-boot-applications-testing-autoconfigured-jdbc-test&quot;&gt;shown in the JDBC example&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cb79b19c096665c52490ed34b986eb585fd31f46" translate="yes" xml:space="preserve">
          <source>JPA has features for DDL generation, and these can be set up to run on startup against the database. This is controlled through two external properties:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="031a4e76f0b39d0df073d934da5fc48da8d737e5" translate="yes" xml:space="preserve">
          <source>JSON</source>
          <target state="translated">JSON</target>
        </trans-unit>
        <trans-unit id="187865a73891c6c5c355a20afd5a4b3f7d170893" translate="yes" xml:space="preserve">
          <source>JSON Web Algorithm used for verifying the digital signatures.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7ac1960a724ee59b5cde4eb3cb3d6422d0cf4c36" translate="yes" xml:space="preserve">
          <source>JSON Web Key URI to use to verify the JWT token.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b7c4e2a27dfd6128a61ee0f30729d100e037a876" translate="yes" xml:space="preserve">
          <source>JSON codecs with Jackson</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4cd96e2546fe562804d627e5dea07c1ccdb0ab96" translate="yes" xml:space="preserve">
          <source>JSON helper classes can also be used directly in standard unit tests. To do so, call the &lt;code&gt;initFields&lt;/code&gt; method of the helper in your &lt;code&gt;@Before&lt;/code&gt; method if you do not use &lt;code&gt;@JsonTest&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6b9e900296313a511c3acee86fa44e5fcab11fcb" translate="yes" xml:space="preserve">
          <source>JSON object</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e224795a4fbc5a0f7e05432dd42747a823359ca6" translate="yes" xml:space="preserve">
          <source>JSON-B</source>
          <target state="translated">JSON-B</target>
        </trans-unit>
        <trans-unit id="8fe083bb8cc51867baa49b96d8b209a6f2d0024b" translate="yes" xml:space="preserve">
          <source>JUnit.</source>
          <target state="translated">JUnit.</target>
        </trans-unit>
        <trans-unit id="74ab05132a080fb308f9e0b9ed3bf6fd0019158b" translate="yes" xml:space="preserve">
          <source>JVM metrics, report utilization of:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f1ed159a2cabb9ff836d38b5f7192badaa2849a5" translate="yes" xml:space="preserve">
          <source>Jackson</source>
          <target state="translated">Jackson</target>
        </trans-unit>
        <trans-unit id="27cc37fede01d31a536a11d3a8237c9e85b6a2b9" translate="yes" xml:space="preserve">
          <source>Jackson &lt;code&gt;ObjectMapper&lt;/code&gt;, any &lt;code&gt;@JsonComponent&lt;/code&gt; beans and any Jackson &lt;code&gt;Module&lt;/code&gt;s</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3f54f6909caad4a0bfa906651795a252b7c6c45c" translate="yes" xml:space="preserve">
          <source>Jackson general purpose on/off features.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0995ef6b6d3b9226f9e47610c2875632f3f1d365" translate="yes" xml:space="preserve">
          <source>Jackson is a required dependency in order to get the correct JSON responses as documented in the API documentation (&lt;a href=&quot;https://docs.spring.io/spring-boot/docs/2.4.0/actuator-api/htmlsingle&quot;&gt;HTML&lt;/a&gt; or &lt;a href=&quot;https://docs.spring.io/spring-boot/docs/2.4.0/actuator-api/pdf/spring-boot-actuator-web-api.pdf&quot;&gt;PDF&lt;/a&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d0b0325c94db1c22fe64079d9205512f543c0058" translate="yes" xml:space="preserve">
          <source>Jackson is the preferred and default library.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="547b474c08ae92a002d843e6868382d4aab5784b" translate="yes" xml:space="preserve">
          <source>Jackson on/off features for generators.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cbce0343b91bd0cc4bb155d1799e42a0eca12518" translate="yes" xml:space="preserve">
          <source>Jackson on/off features for parsers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1e6204ca69d5c11ba849a8325682627bfa2d5bb2" translate="yes" xml:space="preserve">
          <source>Jackson on/off features that affect the way Java objects are deserialized.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="23cd5d34ffb3c5830479979aed136c9ef61b7a5f" translate="yes" xml:space="preserve">
          <source>Jackson on/off features that affect the way Java objects are serialized.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8105e635e716286ef49fb4e241fe94e6c226ead1" translate="yes" xml:space="preserve">
          <source>Jackson visibility thresholds that can be used to limit which methods (and fields) are auto-detected.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cb79c539a2a56174884e28f105604136c19834fd" translate="yes" xml:space="preserve">
          <source>JarClassLoader</source>
          <target state="translated">JarClassLoader</target>
        </trans-unit>
        <trans-unit id="f0075ce3f78df0ba25f3bb8ec3b3bfc12fea525a" translate="yes" xml:space="preserve">
          <source>Java Management Extensions (JMX) provide a standard mechanism to monitor and manage applications. By default, this feature is not enabled and can be turned on by setting the configuration property &lt;code&gt;spring.jmx.enabled&lt;/code&gt; to &lt;code&gt;true&lt;/code&gt;. Spring Boot exposes management endpoints as JMX MBeans under the &lt;code&gt;org.springframework.boot&lt;/code&gt; domain by default.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bc4c2a3fdb3a9196ac84f91bf451d0f97383d883" translate="yes" xml:space="preserve">
          <source>Java Management Extensions (JMX) provide a standard mechanism to monitor and manage applications. Spring Boot exposes the most suitable &lt;code&gt;MBeanServer&lt;/code&gt; as a bean with an ID of &lt;code&gt;mbeanServer&lt;/code&gt;. Any of your beans that are annotated with Spring JMX annotations (&lt;code&gt;@ManagedResource&lt;/code&gt;, &lt;code&gt;@ManagedAttribute&lt;/code&gt;, or &lt;code&gt;@ManagedOperation&lt;/code&gt;) are exposed to it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9747eb44e42aa5de6b257e4909a5b116df5ca16c" translate="yes" xml:space="preserve">
          <source>Java System properties (&lt;code&gt;System.getProperties()&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f6d2f4d439bdab46705981aaecb533191c3849a8" translate="yes" xml:space="preserve">
          <source>Java Util logging</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9ef958bc5860771de753d6c21cc5c6486f2697eb" translate="yes" xml:space="preserve">
          <source>Java does not provide a standard way to load nested jar files (jar files that are themselves contained within a jar). This can be problematic if you are looking to distribute a self-contained application.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5fa7ba9740eca1e8b7f16b9bc7e80be2f3059366" translate="yes" xml:space="preserve">
          <source>Java does not provide any standard way to load nested jar files (that is, jar files that are themselves contained within a jar). This can be problematic if you need to distribute a self-contained application that can be run from the command line without unpacking.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4c5def929cabac7943a10b810d1015ebaa82b630" translate="yes" xml:space="preserve">
          <source>Java&amp;rsquo;s &lt;code&gt;javax.sql.DataSource&lt;/code&gt; interface provides a standard method of working with database connections. Traditionally, a 'DataSource' uses a &lt;code&gt;URL&lt;/code&gt; along with some credentials to establish a database connection.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6973cc3eadd1140cda4652fd46a015ddd879e09d" translate="yes" xml:space="preserve">
          <source>Jersey filter chain order.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="739a8cce0a10f9aee0caa5bfc5179ade31dda0b6" translate="yes" xml:space="preserve">
          <source>Jersey integration type.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="49a77d1c37c6437cd04b5aa7fdd6451e74487832" translate="yes" xml:space="preserve">
          <source>Jersey&amp;rsquo;s support for scanning executable archives is rather limited. For example, it cannot scan for endpoints in a package found in a &lt;a href=&quot;deployment#deployment-install&quot;&gt;fully executable jar file&lt;/a&gt; or in &lt;code&gt;WEB-INF/classes&lt;/code&gt; when running an executable war file. To avoid this limitation, the &lt;code&gt;packages&lt;/code&gt; method should not be used, and endpoints should be registered individually by using the &lt;code&gt;register&lt;/code&gt; method, as shown in the preceding example.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5daa7eda8bf46d2be010ec245e1f86944d0a4f8f" translate="yes" xml:space="preserve">
          <source>Jetty</source>
          <target state="translated">Jetty</target>
        </trans-unit>
        <trans-unit id="37ace646175c1dc6e750bd7ab0784beb4126921c" translate="yes" xml:space="preserve">
          <source>Jetty 9.4</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5c3a3e06977cb1daed9284e256ee904c170aee3b" translate="yes" xml:space="preserve">
          <source>Job identifier for this application instance.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="10dad544cbc310e2188c588a023cf65831924bc6" translate="yes" xml:space="preserve">
          <source>Jobs can define setters to inject data map properties. Regular beans can also be injected in a similar manner, as shown in the following example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5f0369017e1392c0a4b6689605ad20bd244753f4" translate="yes" xml:space="preserve">
          <source>Jolokia has a number of settings that you would traditionally configure by setting servlet parameters. With Spring Boot, you can use your &lt;code&gt;application.properties&lt;/code&gt; file. To do so, prefix the parameter with &lt;code&gt;management.endpoint.jolokia.config.&lt;/code&gt;, as shown in the following example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7e0a66e0de0df5673b953babfcf26e022ca521c3" translate="yes" xml:space="preserve">
          <source>Jolokia is a JMX-HTTP bridge that provides an alternative method of accessing JMX beans. To use Jolokia, include a dependency to &lt;code&gt;org.jolokia:jolokia-core&lt;/code&gt;. For example, with Maven, you would add the following dependency:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d1c9f87c011ebb2b02fe168b1af0adb7ca1493ee" translate="yes" xml:space="preserve">
          <source>Jolokia settings. Refer to the documentation of Jolokia for more details.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5a631805ef8081179baa29880cb7a06166b4a517" translate="yes" xml:space="preserve">
          <source>Journal file directory. Not necessary if persistence is turned off.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0e08bcb558474ee100a8066b69b6422c8b7663e9" translate="yes" xml:space="preserve">
          <source>Kafka configuration is controlled by external configuration properties in &lt;code&gt;spring.kafka.*&lt;/code&gt;. For example, you might declare the following section in &lt;code&gt;application.properties&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cefc35ab781fd2fe287498f1c176a010c71d4f2a" translate="yes" xml:space="preserve">
          <source>Kafka consumer and producer metrics</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9d9e32baf5a2bf8b3928155a8a4ead2b94cf4195" translate="yes" xml:space="preserve">
          <source>Kafka streams application.id property; default spring.application.name.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="46a4cb9aae221babe4927beb38610ad540748355" translate="yes" xml:space="preserve">
          <source>KairosDB</source>
          <target state="translated">KairosDB</target>
        </trans-unit>
        <trans-unit id="78caee9f18a6f8f0100da07e22cce1b35a5a3731" translate="yes" xml:space="preserve">
          <source>Kebab case, which is recommended for use in &lt;code&gt;.properties&lt;/code&gt; and &lt;code&gt;.yml&lt;/code&gt; files.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b8b34802d798bc418bf19d24e3ce9216fcc415f8" translate="yes" xml:space="preserve">
          <source>Kerberos ticket for connecting to the database. Mutual exclusive with a given username.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c67dd20ee842986086a0a915ddc2a279490130ed" translate="yes" xml:space="preserve">
          <source>Key</source>
          <target state="translated">Key</target>
        </trans-unit>
        <trans-unit id="a8eeb9309d9648de77abc4af0238859b1cf4a09a" translate="yes" xml:space="preserve">
          <source>Key prefix.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b2c3bf93e5d2b05d4fb338f3f54f060861294e14" translate="yes" xml:space="preserve">
          <source>Key store type.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3c87ff0800ee95293fab3503841f0b648309018f" translate="yes" xml:space="preserve">
          <source>Keys that should be sanitized. Keys can be simple strings that the property ends with or regular expressions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="abc7a4d108d8e23708da2da1912008fa738433b0" translate="yes" xml:space="preserve">
          <source>Keyspace name to use.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="22eeb075433d11105acbd32874039d75d4ee5cf5" translate="yes" xml:space="preserve">
          <source>Kotlin &lt;a href=&quot;https://kotlinlang.org/docs/reference/extensions.html&quot;&gt;extensions&lt;/a&gt; provide the ability to extend existing classes with additional functionality. The Spring Boot Kotlin API makes use of these extensions to add new Kotlin specific conveniences to existing APIs.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f0434f58b8720cbd69d1034bb8e4434e2eb5492f" translate="yes" xml:space="preserve">
          <source>Kotlin blog</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1e03395c3d6127542077eabc0b6c4ca31f032fb1" translate="yes" xml:space="preserve">
          <source>Kotlin language reference</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5f94c71f202259a98d3f2d35e48a333cd7ecc8ac" translate="yes" xml:space="preserve">
          <source>Kubernetes checks the &quot;liveness&quot; Probe and restarts the application if it takes too long.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c83775a91cba568b84baf3ac42a318aefcf62da3" translate="yes" xml:space="preserve">
          <source>Kubernetes container lifecycle section</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d8343c683ae1584c96390fa627005bc1bb0719cd" translate="yes" xml:space="preserve">
          <source>LDAP</source>
          <target state="translated">LDAP</target>
        </trans-unit>
        <trans-unit id="8827bb5f51c1660f03fa78a26e0e13f7f6dc1c4b" translate="yes" xml:space="preserve">
          <source>LDAP URLs of the server.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0d9e191d69de1edb3b2e453c0e6c9090927439e8" translate="yes" xml:space="preserve">
          <source>LDAP abstractions are provided by &lt;a href=&quot;https://github.com/spring-projects/spring-data-ldap&quot;&gt;Spring Data LDAP&lt;/a&gt;. There is a &lt;code&gt;spring-boot-starter-data-ldap&lt;/code&gt; &amp;ldquo;Starter&amp;rdquo; for collecting the dependencies in a convenient way.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="abce1d819e0c840f3d0194e6f5baa099f3d72a01" translate="yes" xml:space="preserve">
          <source>LDAP specification settings.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cc0e39416e6a0c03c6328668bf74b3b5ff2e02bb" translate="yes" xml:space="preserve">
          <source>Last updated 2020-11-12 14:03:20 UTC</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4dff625c9354d6f33dd88e51e7fb2c86e6778aa8" translate="yes" xml:space="preserve">
          <source>Lazy initialization can be enabled programmatically using the &lt;code&gt;lazyInitialization&lt;/code&gt; method on &lt;code&gt;SpringApplicationBuilder&lt;/code&gt; or the &lt;code&gt;setLazyInitialization&lt;/code&gt; method on &lt;code&gt;SpringApplication&lt;/code&gt;. Alternatively, it can be enabled using the &lt;code&gt;spring.main.lazy-initialization&lt;/code&gt; property as shown in the following example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="61581147768998c97619020d4a72a80500731544" translate="yes" xml:space="preserve">
          <source>Learn the Spring basics. Spring Boot builds on many other Spring projects. Check the &lt;a href=&quot;https://spring.io&quot;&gt;spring.io&lt;/a&gt; web-site for a wealth of reference documentation. If you are starting out with Spring, try one of the &lt;a href=&quot;https://spring.io/guides&quot;&gt;guides&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e68585189b3ee48c6bbc054a3e4583fec15765bc" translate="yes" xml:space="preserve">
          <source>Left hand image margin in chars.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="902c91d94e0fd512d0a7f41cf7f018ee6f01bf85" translate="yes" xml:space="preserve">
          <source>Legal</source>
          <target state="translated">Legal</target>
        </trans-unit>
        <trans-unit id="46f114c54a50444dec8f74a288228a278976e28c" translate="yes" xml:space="preserve">
          <source>Legal information.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bd1911cd34957db0fd8dbdbf8e8533ed5d7870ef" translate="yes" xml:space="preserve">
          <source>Length of time an HTTP connection may remain idle before it is closed and removed from the pool.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a7a49f357b8ac74d1c48a0111c54e41afe6a32a2" translate="yes" xml:space="preserve">
          <source>Lets the application be gracefully shutdown. Disabled by default.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7c7f5d049fad2569721d446c4a811f9bd5da5393" translate="yes" xml:space="preserve">
          <source>Level</source>
          <target state="translated">Level</target>
        </trans-unit>
        <trans-unit id="b8100f5ba8bd048a7cf11d116fbbd73130c3c6f5" translate="yes" xml:space="preserve">
          <source>Library</source>
          <target state="translated">Library</target>
        </trans-unit>
        <trans-unit id="ec620d2e65e032b1b60988e5692e9decf5da874b" translate="yes" xml:space="preserve">
          <source>Licence key for Flyway Teams.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="60f604112e4e010df3ef5350c14e50d905767573" translate="yes" xml:space="preserve">
          <source>Like a war file, a Spring Boot application is not intended to be used as a dependency. If your application contains classes that you want to share with other projects, the recommended approach is to move that code into a separate module. The separate module can then be depended upon by your application and other projects.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0ae604c86372ce37fdac4150739ac68ed0ab1c9e" translate="yes" xml:space="preserve">
          <source>Like any other Spring bean, you can define the order of Servlet filter beans; please make sure to check the &amp;ldquo;&lt;a href=&quot;spring-boot-features#boot-features-embedded-container-servlets-filters-listeners-beans&quot;&gt;spring-boot-features.html&lt;/a&gt;&amp;rdquo; section.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2633835bf19d7d476cb820842f4a1591174dfc54" translate="yes" xml:space="preserve">
          <source>Likewise, YAML lists also need to be flattened. They are represented as property keys with &lt;code&gt;[index]&lt;/code&gt; dereferencers. For example, consider the following YAML:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8c4eedcf35c53796bb39b4138b327e88a0c74b59" translate="yes" xml:space="preserve">
          <source>Limit on the number of bytes that can be buffered whenever the input stream needs to be aggregated.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="626a2fdf03e3cfadb530ea024b1d99cf88820efe" translate="yes" xml:space="preserve">
          <source>Limit on the number of bytes that can be buffered whenever the input stream needs to be aggregated. This applies only to the auto-configured WebFlux server and WebClient instances. By default this is not set, in which case individual codec defaults apply. Most codecs are limited to 256K by default.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8347abdde0d300a5a47f31343483c66472a08fe2" translate="yes" xml:space="preserve">
          <source>Limited (see &lt;a href=&quot;#boot-features-external-config-vs-value-note&quot;&gt;note below&lt;/a&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="014bcd654c60d5250fad2123b073b9c0ac3340f6" translate="yes" xml:space="preserve">
          <source>Links</source>
          <target state="translated">Links</target>
        </trans-unit>
        <trans-unit id="c89ad4626db1429d0b5f7eae22d9ba8610081129" translate="yes" xml:space="preserve">
          <source>Links to resources are rewritten in templates at runtime, thanks to a &lt;code&gt;ResourceUrlEncodingFilter&lt;/code&gt; that is auto-configured for Thymeleaf and FreeMarker. You should manually declare this filter when using JSPs. Other template engines are currently not automatically supported but can be with custom template macros/helpers and the use of the &lt;a href=&quot;https://docs.spring.io/spring/docs/5.3.1/javadoc-api/org/springframework/web/servlet/resource/ResourceUrlProvider.html&quot;&gt;&lt;code&gt;ResourceUrlProvider&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a1fffaaafb7cc996685bceb829c053cc4f7de43d" translate="yes" xml:space="preserve">
          <source>List</source>
          <target state="translated">List</target>
        </trans-unit>
        <trans-unit id="e01c913d60f7659d57809ea69cbae3e6b97b4da3" translate="yes" xml:space="preserve">
          <source>List of base DNs.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ab5de2ea399eeda6f180a271c58772a94bc0d9c7" translate="yes" xml:space="preserve">
          <source>Listener AckMode. See the spring-kafka documentation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8f014b37a7e29692a624a762cc2c03afaa9dbe39" translate="yes" xml:space="preserve">
          <source>Listener container type.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="448da65f8d0a5e6e3586a213158b2ae3888b1ce4" translate="yes" xml:space="preserve">
          <source>Listener type.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="01db52eb94b40073d1b9965c727f93e182fcb48d" translate="yes" xml:space="preserve">
          <source>Liveness State</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5683feef7f5886b7d6629979e3e5987efc5884a0" translate="yes" xml:space="preserve">
          <source>Load on startup priority of the Jersey servlet.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4c94291b90b8dcaa764059a3c15db3c816f0fea2" translate="yes" xml:space="preserve">
          <source>Load on startup priority of the Spring Web Services servlet.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c45e5cc0bcb0ba13b5c12398b7298c6e0b3642e6" translate="yes" xml:space="preserve">
          <source>Load on startup priority of the dispatcher servlet.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="22913b878ebd8a5b484ad6df6e2b571e099067e5" translate="yes" xml:space="preserve">
          <source>Loaded resource bundle files cache duration. When not set, bundles are cached forever. If a duration suffix is not specified, seconds will be used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7f810c488bdaa9656ac9f4d6f07cb7dfc373b621" translate="yes" xml:space="preserve">
          <source>Locale to use. By default, this locale is overridden by the &quot;Accept-Language&quot; header.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="101b4d744881234d6ac7d9f9954d089f708f4436" translate="yes" xml:space="preserve">
          <source>Locale used for formatting.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ea7021bbb56c07464b34d635e8551af83e1325a1" translate="yes" xml:space="preserve">
          <source>Locale used to format timestamps in log entries and in log file name suffix. Default to the default locale of the Java process.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2036170627ec29fc62e5fa8426bf6addcefb3eb5" translate="yes" xml:space="preserve">
          <source>Location of the PID file to write (if ApplicationPidFileWriter is used).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d9ce7d081fcfaba3eb4c51d9fb109b21ae3e7209" translate="yes" xml:space="preserve">
          <source>Location of the file containing the public key used to verify a JWT.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="048a5f7d9447e98068979bde7e6d2d1db655dac5" translate="yes" xml:space="preserve">
          <source>Location of the generated build-info.properties file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="90bdc36b87c41168c86546ef00804482d51ab7e3" translate="yes" xml:space="preserve">
          <source>Location of the generated git.properties file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="685406051b763a9f998bb74e576128c5dce467a4" translate="yes" xml:space="preserve">
          <source>Location of the key store file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3a7dc54a5afd7cc0d0a4eeee4b59eb8cb3f99350" translate="yes" xml:space="preserve">
          <source>Location of the log file. For instance, `/var/log`.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b90c895b67d3157f991e1daff4ac50c21711246e" translate="yes" xml:space="preserve">
          <source>Location of the logging configuration file. For instance, `classpath:logback.xml` for Logback.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="43c6cffba4f700a83b65fd8c0ca2ed2132810bdd" translate="yes" xml:space="preserve">
          <source>Location of the trust store file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="35b427926d0bc229302875d1bde1daaa8cc6b1fb" translate="yes" xml:space="preserve">
          <source>Locations configured by using &lt;code&gt;spring.config.location&lt;/code&gt; replace the default locations. For example, if &lt;code&gt;spring.config.location&lt;/code&gt; is configured with the value &lt;code&gt;optional:classpath:/custom-config/,optional:file:./custom-config/&lt;/code&gt;, the complete set of locations considered is:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b7768888b7001a05cc50328acf608cd136a8febb" translate="yes" xml:space="preserve">
          <source>Locations of migrations scripts. Can contain the special &quot;{vendor}&quot; placeholder to use vendor-specific locations.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="795778d2ca881c03272f6857141a7a7006ba1ac4" translate="yes" xml:space="preserve">
          <source>Locations of static resources. Defaults to classpath:[/META-INF/resources/, /resources/, /static/, /public/].</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="49145269289b8db9036414f14c45a5ed2f647cf0" translate="yes" xml:space="preserve">
          <source>Log Level: &lt;code&gt;ERROR&lt;/code&gt;, &lt;code&gt;WARN&lt;/code&gt;, &lt;code&gt;INFO&lt;/code&gt;, &lt;code&gt;DEBUG&lt;/code&gt;, or &lt;code&gt;TRACE&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d2adc65e4c55a29e5fa25bc9569bc47ae8edee64" translate="yes" xml:space="preserve">
          <source>Log file name (for instance, `myapp.log`). Names can be an exact location or relative to the current directory.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3d3cc2442abccea0b12aeca0d246bf5b26d02a55" translate="yes" xml:space="preserve">
          <source>Log file name prefix.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="46ff4960e0b1f858c22e5fddcfdb9017803de74c" translate="yes" xml:space="preserve">
          <source>Log file name suffix.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6437f18ed77e2484d5191325865274f68ad9c218" translate="yes" xml:space="preserve">
          <source>Log filename. If not specified, logs redirect to &quot;System.err&quot;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4c29ebfcf417fb49a745b6fb53eed4c5b57d04ac" translate="yes" xml:space="preserve">
          <source>Log files rotate when they reach 10 MB and, as with console output, &lt;code&gt;ERROR&lt;/code&gt;-level, &lt;code&gt;WARN&lt;/code&gt;-level, and &lt;code&gt;INFO&lt;/code&gt;-level messages are logged by default.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d8cf6d63639f4dead6c02ef14e462cfc1b89cedf" translate="yes" xml:space="preserve">
          <source>Log format.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9583b91d1b5165d1e9d25a7c5c816addbb79ad13" translate="yes" xml:space="preserve">
          <source>Log groups to quickly change multiple loggers at the same time. For instance, `logging.group.db=org.hibernate,org.springframework.jdbc`.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="684e57a43d8299e8944fe36e3e7068ecdb401051" translate="yes" xml:space="preserve">
          <source>Log levels severity mapping. For instance, `logging.level.org.springframework=DEBUG`.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="544daab255c20340d662098dae251dfac501fa6d" translate="yes" xml:space="preserve">
          <source>Log4j 2</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="88ada725afc8dd4642c7e7e3bb5b0ffed120c446" translate="yes" xml:space="preserve">
          <source>Log4j2</source>
          <target state="translated">Log4j2</target>
        </trans-unit>
        <trans-unit id="84174f5c82cdc9d4ff3517596e2df727c4bb3b2c" translate="yes" xml:space="preserve">
          <source>Log4j2 metrics: record the number of events logged to Log4j2 at each level</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="401aeb95ae4ca2286cd4c14b3acc969627d56983" translate="yes" xml:space="preserve">
          <source>Logback</source>
          <target state="translated">Logback</target>
        </trans-unit>
        <trans-unit id="d2526bae6cb6a0e519d5a575044fdf47b91b9b54" translate="yes" xml:space="preserve">
          <source>Logback does not have a &lt;code&gt;FATAL&lt;/code&gt; level. It is mapped to &lt;code&gt;ERROR&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a106e8b629409b5011e235a1db9f1f179787213a" translate="yes" xml:space="preserve">
          <source>Logback metrics: record the number of events logged to Logback at each level</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="efd11dcd43f64c3ef921cfec39de7ff7808f35f2" translate="yes" xml:space="preserve">
          <source>Logger name: This is usually the source class name (often abbreviated).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="012294fbc07fc652fdbbd3b8b48183b6e7925dda" translate="yes" xml:space="preserve">
          <source>Loggers</source>
          <target state="translated">Loggers</target>
        </trans-unit>
        <trans-unit id="57003616863fe634c645e342ee9080681e419c5f" translate="yes" xml:space="preserve">
          <source>Logging</source>
          <target state="translated">Logging</target>
        </trans-unit>
        <trans-unit id="d8bb180147faeb75ef1a8c5b7e2422dfa8fd7db0" translate="yes" xml:space="preserve">
          <source>Logging System</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="36ba947f561a5e0b38a2886a7b161fa35b8f5e2d" translate="yes" xml:space="preserve">
          <source>Logging properties are independent of the actual logging infrastructure. As a result, specific configuration keys (such as &lt;code&gt;logback.configurationFile&lt;/code&gt; for Logback) are not managed by spring Boot.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="52c9688b9fb7a10dade4b6c05a349ae6d3ec738e" translate="yes" xml:space="preserve">
          <source>Login module.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7c6cadbc6a3e119fd73921f4ed85e8611a8a078c" translate="yes" xml:space="preserve">
          <source>Login password of the Elastic server.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="35d634c0eccc58a58c0b54a9f8d35ec0d7d85637" translate="yes" xml:space="preserve">
          <source>Login password of the Influx server.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c40cd6971e11c563a0e71cf4bda8251a9f8c77ed" translate="yes" xml:space="preserve">
          <source>Login password of the KairosDB server.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f1cab86ad2a18a0bac2cc6fd4e722582b7213d9a" translate="yes" xml:space="preserve">
          <source>Login password of the Prometheus Pushgateway.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="24caabbbbddc1dbbe2cef6df24d410e2f15c7351" translate="yes" xml:space="preserve">
          <source>Login password of the SMTP server.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5f8a266aadf009e2e33391c11b1780ce6db01cb6" translate="yes" xml:space="preserve">
          <source>Login password of the broker.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5807bc71b893f7406d2d969b11111e2f617df5b5" translate="yes" xml:space="preserve">
          <source>Login password of the database to migrate.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bbccee4e754ffbdff631ecf3a4198a7d29d00c4e" translate="yes" xml:space="preserve">
          <source>Login password of the database.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5d0bc25cd3fe8dd8f6b00e75a8fbf8f14f44f9e1" translate="yes" xml:space="preserve">
          <source>Login password of the database. Set if no password is specified in the url.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b167708f482f37b065ec9a9abcdd1a70c1155a33" translate="yes" xml:space="preserve">
          <source>Login password of the mongo server. Cannot be set with URI.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0199894772870073d9c31b19d882925c006f9adf" translate="yes" xml:space="preserve">
          <source>Login password of the redis server.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0635be091b6113c14562758f92980adf59e5c6d0" translate="yes" xml:space="preserve">
          <source>Login password of the server.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="514a2157a7e8465337910ba3ba7f62932bfd45b0" translate="yes" xml:space="preserve">
          <source>Login password.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="912b6683ab143855d5e466f7217690128db71893" translate="yes" xml:space="preserve">
          <source>Login to authenticate against the broker.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5e695365788c57d8db014e57a479f3907e61aad9" translate="yes" xml:space="preserve">
          <source>Login user of the Elastic server.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f1c7b0d4a4fc23c2f1f19d09c5332ffce04f847f" translate="yes" xml:space="preserve">
          <source>Login user of the Influx server.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3179d5d196c40b9fb318a55b2d4538f7ecd8f2b2" translate="yes" xml:space="preserve">
          <source>Login user of the KairosDB server.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="df0305eaec50f8d7b322db6e09cbe71a7a11b0a6" translate="yes" xml:space="preserve">
          <source>Login user of the Prometheus Pushgateway.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="79da4c8f111f76e01f1e850155fa58278e01dce1" translate="yes" xml:space="preserve">
          <source>Login user of the SMTP server.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fdb07e078d16b7a464cfefc005d1ed4c0ba1d9b2" translate="yes" xml:space="preserve">
          <source>Login user of the broker.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c5a7d1a21a4a1367e31b57ce8d2c79d937a98b72" translate="yes" xml:space="preserve">
          <source>Login user of the database to migrate.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5c81c488ee23cf89c7f9db28eb9a6e16c5881649" translate="yes" xml:space="preserve">
          <source>Login user of the mongo server. Cannot be set with URI.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="16e7e896f7cc31c9a08742ec4f3a3de0389f42f1" translate="yes" xml:space="preserve">
          <source>Login user of the server.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e11e8bad6f38e23a986da3e76798c8bb93ba8ead" translate="yes" xml:space="preserve">
          <source>Login user to authenticate to the broker.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8dc993648704c5136ace77a2e6aaa80fd7d13be9" translate="yes" xml:space="preserve">
          <source>Login user.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="010a87e707090c6ed2e266bc9c8fef1b49317fb9" translate="yes" xml:space="preserve">
          <source>Login username of the database.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="729aa582a20f68c2cc9728f39a80668bc52dee2d" translate="yes" xml:space="preserve">
          <source>Login username of the database. Set if no username is specified in the url.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="85f2281244cb635a0da40016e74bac10159c636e" translate="yes" xml:space="preserve">
          <source>Login username of the redis server.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5fa79866948276956f094701af7f786dad9ac13f" translate="yes" xml:space="preserve">
          <source>Login username of the server.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="59dfafb6237b0df27b7e90106db3404797ae0653" translate="yes" xml:space="preserve">
          <source>Logs are stored in a &lt;code&gt;logs&lt;/code&gt; directory relative to the working directory of the application. You can customize this location by setting the &lt;code&gt;server.undertow.accesslog.dir&lt;/code&gt; property.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9d86968ae39f0a9c1625137fdaa19451d92a542d" translate="yes" xml:space="preserve">
          <source>Look for &lt;code&gt;@ConditionalOnExpression&lt;/code&gt; annotations that switch features on and off in response to SpEL expressions, normally evaluated with placeholders resolved from the &lt;code&gt;Environment&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5284c3bb4225d5568c57063d0003ce57e9f972fd" translate="yes" xml:space="preserve">
          <source>Look for &lt;code&gt;@Value&lt;/code&gt; annotations that bind directly to the &lt;code&gt;Environment&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c768d5be22e4018db650f0a14480796ff107e1d6" translate="yes" xml:space="preserve">
          <source>Look for classes called &lt;code&gt;*AutoConfiguration&lt;/code&gt; and read their sources. Pay special attention to the &lt;code&gt;@Conditional*&lt;/code&gt; annotations to find out what features they enable and when. Add &lt;code&gt;--debug&lt;/code&gt; to the command line or a System property &lt;code&gt;-Ddebug&lt;/code&gt; to get a log on the console of all the auto-configuration decisions that were made in your app. In a running application with actuator enabled, look at the &lt;code&gt;conditions&lt;/code&gt; endpoint (&lt;code&gt;/actuator/conditions&lt;/code&gt; or the JMX equivalent) for the same information.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d8b65c04317666284ff5b8bb2402fecc24e48bdc" translate="yes" xml:space="preserve">
          <source>Look for classes that are &lt;code&gt;@ConfigurationProperties&lt;/code&gt; (such as &lt;a href=&quot;https://github.com/spring-projects/spring-boot/tree/v2.4.0/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/ServerProperties.java&quot;&gt;&lt;code&gt;ServerProperties&lt;/code&gt;&lt;/a&gt;) and read from there the available external configuration options. The &lt;code&gt;@ConfigurationProperties&lt;/code&gt; annotation has a &lt;code&gt;name&lt;/code&gt; attribute that acts as a prefix to external properties. Thus, &lt;code&gt;ServerProperties&lt;/code&gt; has &lt;code&gt;prefix=&quot;server&quot;&lt;/code&gt; and its configuration properties are &lt;code&gt;server.port&lt;/code&gt;, &lt;code&gt;server.address&lt;/code&gt;, and others. In a running application with actuator enabled, look at the &lt;code&gt;configprops&lt;/code&gt; endpoint.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="73d7f62ea1fde2fb3f7b59cd61f7000023db1c01" translate="yes" xml:space="preserve">
          <source>Look for uses of the &lt;code&gt;bind&lt;/code&gt; method on the &lt;code&gt;Binder&lt;/code&gt; to pull configuration values explicitly out of the &lt;code&gt;Environment&lt;/code&gt; in a relaxed manner. It is often used with a prefix.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ea57db0dbd995d40aa7b03f143b32072d93f7600" translate="yes" xml:space="preserve">
          <source>MBeanServer bean name.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="681f765024ebc0a4b0b64018aa4f978f784153e6" translate="yes" xml:space="preserve">
          <source>MVC</source>
          <target state="translated">MVC</target>
        </trans-unit>
        <trans-unit id="bf2fc8a2e70bccf8e02cf4bc5660d1a3ec53bbb7" translate="yes" xml:space="preserve">
          <source>Make sure that configuration keys are documented by adding field javadoc for each property, as shown in the following example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cf0db1a8a5c4ba49027b0f3a11be57ae6bbe79ae" translate="yes" xml:space="preserve">
          <source>Make sure to &lt;a href=&quot;appendix-configuration-metadata#configuration-metadata-annotation-processor&quot;&gt;trigger meta-data generation&lt;/a&gt; so that IDE assistance is available for your keys as well. You may want to review the generated metadata (&lt;code&gt;META-INF/spring-configuration-metadata.json&lt;/code&gt;) to make sure your keys are properly documented. Using your own starter in a compatible IDE is also a good idea to validate that quality of the metadata.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4b94cb898e073e0ed01e21ad84c862dee0a7e358" translate="yes" xml:space="preserve">
          <source>Make sure to not use the regular &lt;code&gt;@Import&lt;/code&gt; annotation to import auto-configurations as they are handled in a specific way by Spring Boot.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="058dc1cfbaf8acd9cd3f496fb5da5420df01e6aa" translate="yes" xml:space="preserve">
          <source>Management endpoint HTTP port (uses the same port as the application by default). Configure a different port to use management-specific SSL.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7fa412367683076a8a8d0f100e81875a77999495" translate="yes" xml:space="preserve">
          <source>Management endpoint base path (for instance, `/management`). Requires a custom management.server.port.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7ce8940d144e7e26862331b4f76e00a10c428429" translate="yes" xml:space="preserve">
          <source>Manifest entry</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a8cf58c1e1c42475b176078d9b99255b2187130c" translate="yes" xml:space="preserve">
          <source>Many Spring Boot developers like their apps to use auto-configuration, component scan and be able to define extra configuration on their &quot;application class&quot;. A single &lt;code&gt;@SpringBootApplication&lt;/code&gt; annotation can be used to enable those three features, that is:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="65da3ce11583517169aecce616bd002b31fdcafe" translate="yes" xml:space="preserve">
          <source>Many Spring Boot starters include default embedded containers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e5295400ffda6894436623c3b97fa244b7ee6f8a" translate="yes" xml:space="preserve">
          <source>Many Spring annotations work without using &lt;code&gt;import&lt;/code&gt; statements. Try running your application to see what fails before adding imports.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c1d7c57fcc8bdd7a7fe820d601dfd474a116c8d6" translate="yes" xml:space="preserve">
          <source>Many Spring configuration examples have been published on the Internet that use XML configuration. If possible, always try to use the equivalent Java-based configuration. Searching for &lt;code&gt;Enable*&lt;/code&gt; annotations can be a good starting point.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0854b0fe6c62f7c476bd6915302fdadfa3311f6f" translate="yes" xml:space="preserve">
          <source>Many modern IDEs (Eclipse, IDEA, and others) support hot swapping of bytecode. Consequently, if you make a change that does not affect class or method signatures, it should reload cleanly with no side effects.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c7592c0b0b6b54cfee99e3311a481163ddecd3d1" translate="yes" xml:space="preserve">
          <source>Many more questions can be answered by looking at the source code and the Javadoc. When reading the code, remember the following rules of thumb:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5ec481195f926a1ce0ed463727f8dafeb1f4a877" translate="yes" xml:space="preserve">
          <source>Map file extensions to media types for content negotiation. For instance, yml to text/yaml.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="def2eba59562958fa4a005f8070d692ef8502312" translate="yes" xml:space="preserve">
          <source>Mapping</source>
          <target state="translated">Mapping</target>
        </trans-unit>
        <trans-unit id="1fcb6a82b5c57c56e01eb76694920f579d03ae3c" translate="yes" xml:space="preserve">
          <source>Mapping Error Pages outside of Spring MVC</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6773028ff5f6ee798da6635a3152f8aa16798a15" translate="yes" xml:space="preserve">
          <source>Mapping between endpoint IDs and the path that should expose them.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e5ac652972ed1c2de05209453921e5d82343c51d" translate="yes" xml:space="preserve">
          <source>Mapping of health statuses to HTTP status codes. By default, registered health statuses map to sensible defaults (for example, UP maps to 200).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d9fbc317d5124d8917f8509bd4e65137ffcfa4d2" translate="yes" xml:space="preserve">
          <source>Mapping resources (equivalent to &quot;mapping-file&quot; entries in persistence.xml).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2b75e29c53ce158df7f34319e74f17af4038af0d" translate="yes" xml:space="preserve">
          <source>Maps, as long as they are initialized, need a getter but not necessarily a setter, since they can be mutated by the binder.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6af37177e65c1a71744a7cb984d51ba2f07f5140" translate="yes" xml:space="preserve">
          <source>Maven</source>
          <target state="translated">Maven</target>
        </trans-unit>
        <trans-unit id="d35290a7a28a289e523c619327ac9c7a2c650820" translate="yes" xml:space="preserve">
          <source>Maven Plugin, Gradle Plugin, Antlib, and more.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="72c78563515440b0f5bea68161b432b4bdc49629" translate="yes" xml:space="preserve">
          <source>Maven Shade Plugin</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8a1a29888d136f57d77a5be7be3b957fd9103a00" translate="yes" xml:space="preserve">
          <source>Maven default</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="99eb40eca858095cdcf97f3e621e6a830b072d3f" translate="yes" xml:space="preserve">
          <source>Max file size.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5a0254945febbdb219e4253ff52f03096a8fde4d" translate="yes" xml:space="preserve">
          <source>Max request size.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="002c4fc8849eca30a4a6bfaa968cb337177172de" translate="yes" xml:space="preserve">
          <source>Maximal connection pool size.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3ed72cf45000e48bda5cf6b1ce5a8cbca0365a06" translate="yes" xml:space="preserve">
          <source>Maximum age of the session cookie. If a duration suffix is not specified, seconds will be used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6fd8aeed11f02baca1e49444381f8181e1f8e665" translate="yes" xml:space="preserve">
          <source>Maximum allowed number of threads.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3d16757e12dbe0824aff8c5b550cf49139f1699a" translate="yes" xml:space="preserve">
          <source>Maximum allowed number of threads. If tasks are filling up the queue, the pool can expand up to that size to accommodate the load. Ignored if the queue is unbounded.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f3d6c7a5439a86daafb98f30a36674a2db93dec9" translate="yes" xml:space="preserve">
          <source>Maximum allowed request rate.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="320eb00385d21c97a86fc556c72fcb1116030b60" translate="yes" xml:space="preserve">
          <source>Maximum amount of connections in the connection pool towards a single database.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="985e34eb0e91a9d9e76d095d06c9d05f09025ee3" translate="yes" xml:space="preserve">
          <source>Maximum amount of request body to swallow.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7cf2e85b58a426294c5912971e7b6b66bbe9cf96" translate="yes" xml:space="preserve">
          <source>Maximum amount of time a connection allocation should block before throwing an exception when the pool is exhausted. Use a negative value to block indefinitely.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b494efaef293ff1dd2d7adda04c136d7aca344cc" translate="yes" xml:space="preserve">
          <source>Maximum amount of time that a connection is allowed to sit idle in the pool.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7591f9f8724c2a7601902dfbd78b2b4f11025fc7" translate="yes" xml:space="preserve">
          <source>Maximum amount of time the server blocks before answering the fetch request if there isn't sufficient data to immediately satisfy the requirement given by &quot;fetch-min-size&quot;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5c3d8c59a150b32433bbd93acbe4f0527f05862f" translate="yes" xml:space="preserve">
          <source>Maximum amount of worker threads.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cc94cda186a15593ee4a8a82eb61d8912e18a047" translate="yes" xml:space="preserve">
          <source>Maximum capacity of the thread pool's backing queue. A default is computed based on the threading configuration.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b9a658c8e961a48c81ea1d8f45a9e3eb99c4aa54" translate="yes" xml:space="preserve">
          <source>Maximum chunk size that can be decoded for an HTTP request.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="415eca94590fd78a5b663516a96cdfafff0d22a1" translate="yes" xml:space="preserve">
          <source>Maximum content length of an H2C upgrade request.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ff8f0eb09ce898578a945275e3fe8882a5bb62cc" translate="yes" xml:space="preserve">
          <source>Maximum duration between attempts.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ef95c32142ed357d47b71a667fb00c7a4d807709" translate="yes" xml:space="preserve">
          <source>Maximum length that can be decoded for an HTTP request's initial line.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bc1f8b3b66a58ca65d46e6669c51e645c38cf389" translate="yes" xml:space="preserve">
          <source>Maximum lifetime of a connection in the pool. By default, connections have an infinite lifetime.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b06db1d9f9150c74bd0761c15cdd3edfdd0529cc" translate="yes" xml:space="preserve">
          <source>Maximum log file size.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="de1726a3d9a6f46ddb286983cff73159b60a2e6d" translate="yes" xml:space="preserve">
          <source>Maximum memory size to be used for buffering across all threads.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="058bfb83ca612fe7204f0a22a7f0a1fe9b138643" translate="yes" xml:space="preserve">
          <source>Maximum number of &quot;idle&quot; connections in the pool. Use a negative value to indicate an unlimited number of idle connections.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="89de7ec9725ffaea798ff37ba24e4afc6d9beeb2" translate="yes" xml:space="preserve">
          <source>Maximum number of active transactions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3663e004d487e19e99f097e1b9348fc8396b1e53" translate="yes" xml:space="preserve">
          <source>Maximum number of archive log files to keep.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5cbe039f624d82157d466cfb99465e5f57846c2c" translate="yes" xml:space="preserve">
          <source>Maximum number of attempts to deliver a message.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5d15624633c9671ab877d7afd8ab9b0658b1efa8" translate="yes" xml:space="preserve">
          <source>Maximum number of concurrent consumers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0832634e6fd7fd54d8aaaf1acea34c51fd17f245" translate="yes" xml:space="preserve">
          <source>Maximum number of connections that can be allocated by the pool at a given time. Use a negative value for no limit.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="deeeb2ff9d5e5f7837d274133762901db00fc72f" translate="yes" xml:space="preserve">
          <source>Maximum number of connections that the server accepts and processes at any given time. Once the limit has been reached, the operating system may still accept connections based on the &quot;acceptCount&quot; property.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2ecc10deb590fcac226b5beed19631b8115221b1" translate="yes" xml:space="preserve">
          <source>Maximum number of cookies that are allowed. This limit exists to prevent hash collision based DOS attacks.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4e55315d81ca1ec3c73f53a4729078f3a0521543" translate="yes" xml:space="preserve">
          <source>Maximum number of days archive log files are kept.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="97b6ea4e49e27c39e89caf27d51f84eb368f2bad" translate="yes" xml:space="preserve">
          <source>Maximum number of headers that are allowed. This limit exists to prevent hash collision based DOS attacks.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="253f4f080ec004fc8a30e47a00d4b300806bdcee" translate="yes" xml:space="preserve">
          <source>Maximum number of idle processors that will be retained in the cache and reused with a subsequent request. When set to -1 the cache will be unlimited with a theoretical maximum size equal to the maximum number of connections.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2b15c9c38e4af9ee1d6657d6a6830a9e84a7350c" translate="yes" xml:space="preserve">
          <source>Maximum number of listener invoker threads.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d18eaed2e5b825d2d115e4782a4290b37f6c3b65" translate="yes" xml:space="preserve">
          <source>Maximum number of pooled connections.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fc690106b6a8d5c40263d095d774195f799c008d" translate="yes" xml:space="preserve">
          <source>Maximum number of pooled sessions per connection in the pool.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c233c15778ee875e820d4a34ef0f50e8748a167e" translate="yes" xml:space="preserve">
          <source>Maximum number of query or path parameters that are allowed. This limit exists to prevent hash collision based DOS attacks.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5784e25b79250096de89e3c78320d04b8a6136ab" translate="yes" xml:space="preserve">
          <source>Maximum number of records returned in a single call to poll().</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0beb565e8ad48525dc8c50600bc463a57b6e5ef6" translate="yes" xml:space="preserve">
          <source>Maximum number of redirects to follow when executing commands across the cluster.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="767ed6b32c9875fc4a16011028ec2bc56bed6679" translate="yes" xml:space="preserve">
          <source>Maximum number of requests that are allowed to execute in parallel.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="959d6625f99f0db18ef416678cc9f13d2bb0eae2" translate="yes" xml:space="preserve">
          <source>Maximum number of requests that can be enqueued when the throttling threshold is exceeded.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e6e5ca9ec0cbbe602d8044d7b31db97c27a720b9" translate="yes" xml:space="preserve">
          <source>Maximum number of retries when attempting to connect to the database.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5b69224810c27b1f7c415a0902093f26d9f0ebfa" translate="yes" xml:space="preserve">
          <source>Maximum number of retries when trying to obtain a lock.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a7efbe357b4b4794e0b92e70e53d31904ce9c86d" translate="yes" xml:space="preserve">
          <source>Maximum number of rows. Use -1 to use the JDBC driver's default configuration.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="efa4a147465a5d06118e2fe12a90446387f02f54" translate="yes" xml:space="preserve">
          <source>Maximum number of sockets per node.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e19bb4919a374b464c50641e126b005f9b6d17a1" translate="yes" xml:space="preserve">
          <source>Maximum number of threads.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="da852c1e283eeece5cc005dc4d1220e21987ad6d" translate="yes" xml:space="preserve">
          <source>Maximum number of unacknowledged messages that can be outstanding at each consumer.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5b58f42185b112d0265c907d9e74fb0732e2c24f" translate="yes" xml:space="preserve">
          <source>Maximum number of unique URI tag values allowed. After the max number of tag values is reached, metrics with additional tag values are denied by filter.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0ef80796bb67558ffb5165af2bb0b8a29db83fb0" translate="yes" xml:space="preserve">
          <source>Maximum page size to be accepted.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3ab7a45a254921759741f2e62a22fa7cd65c45ea" translate="yes" xml:space="preserve">
          <source>Maximum queue length for incoming connection requests when all possible request processing threads are in use.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9f3285b78fe46546bd15df94d6e64f60b2ecf78c" translate="yes" xml:space="preserve">
          <source>Maximum size of data buffers used for writing to the response. Templates will execute in CHUNKED mode by default if this is set.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9851e12339a5181d335e4eaebfd63949299d3464" translate="yes" xml:space="preserve">
          <source>Maximum size of pages.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2adc50ac01bb782e78671a93604dea614c759360" translate="yes" xml:space="preserve">
          <source>Maximum size of the HTTP message header.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="24a74fd5815728ba75d99fcc3291b7d297eb3843" translate="yes" xml:space="preserve">
          <source>Maximum size of the HTTP post content. When the value is -1, the default, the size is unlimited.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="95d0f8ff08cbecfdf4b34c403d120dbf8a3b8876" translate="yes" xml:space="preserve">
          <source>Maximum size of the form content in any HTTP post request.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f255fdd1b58b3c4ea4bd19c0ea26770e99010103" translate="yes" xml:space="preserve">
          <source>Maximum size of the oplog.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a195223d45c96a49573a567d1bab0f319a28f494" translate="yes" xml:space="preserve">
          <source>Maximum size of the pool.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="92469a2a16bdcae9b32c0ac7a62218d6f244561f" translate="yes" xml:space="preserve">
          <source>Maximum size of the pool. 0 denotes no limit.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f4c432ccb69d32ff76728bae7e86b50669991cd6" translate="yes" xml:space="preserve">
          <source>Maximum thread idle time.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1096c74b42a8b091a88694dfb2858a79ea77d910" translate="yes" xml:space="preserve">
          <source>Maximum time that a response can be cached.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="079449cf6617021b83625f02408a3f05d04a8702" translate="yes" xml:space="preserve">
          <source>Maximum time the executor should wait for remaining tasks to complete.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="520d1439cd1eb63ac7b49635e55b91734e6b9b69" translate="yes" xml:space="preserve">
          <source>Maximum time the response can be served after it becomes stale, in seconds if no duration suffix is not specified.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a66e20073da25151b7fe784137ef3d8a8deded8a" translate="yes" xml:space="preserve">
          <source>Maximum time the response may be used when errors are encountered, in seconds if no duration suffix is not specified.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b82d5b88ca725cd93c5890aa9aff69d4b5557fe4" translate="yes" xml:space="preserve">
          <source>Maximum time the response should be cached by shared caches, in seconds if no duration suffix is not specified.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1eecdcdde15166d68de5bf0d7f55f7e810a242e2" translate="yes" xml:space="preserve">
          <source>Maximum time the response should be cached, in seconds if no duration suffix is not specified.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9a716ee2cc964a79d9de49d9f6ff55852d23adba" translate="yes" xml:space="preserve">
          <source>Maximum time to acquire a connection from the pool. By default, wait indefinitely.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9a85cef2aeb899dc48599e8ef5db92bf28b83c07" translate="yes" xml:space="preserve">
          <source>Maximum time to wait to create a new connection. By default, wait indefinitely.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="90309fa638c0629b999ca17c1f4c6a49d7db52b5" translate="yes" xml:space="preserve">
          <source>Maximum time transactions are allowed to retry.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="286422aac2c11645e8ade261c16084e67ea06806" translate="yes" xml:space="preserve">
          <source>Maximum timeout that can be allowed for transactions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ac8fe4658c8c6dfffb4915e2ac95f0945f276f7a" translate="yes" xml:space="preserve">
          <source>Maximum transmission unit. Frames larger than the specified value are fragmented.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="89c990f6cf87e07b685916c7cd7ce3ea11faafe1" translate="yes" xml:space="preserve">
          <source>Maximum value that meter IDs starting with the specified name are expected to observe. The longest match wins. Values can be specified as a long or as a Duration value (for timer meters, defaulting to ms if no unit specified).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="db1c89dafff0f11ad4874541b54348ad73d7476c" translate="yes" xml:space="preserve">
          <source>Media types supported by the view technology.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b575b9a4ef9ebaebd8881f0011a517fb5aaa3711" translate="yes" xml:space="preserve">
          <source>Message bundles encoding.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aa2a08f47de15e34e9098916e1da6d5972e9e129" translate="yes" xml:space="preserve">
          <source>Meta-data support</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1e59b4292d231fb02b5130441a7fd37b50f71ca7" translate="yes" xml:space="preserve">
          <source>Metadata used to describe configuration properties.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ddf6a1f0ce8cfffc5cd8f14230ab1fecd0f34953" translate="yes" xml:space="preserve">
          <source>Metrics</source>
          <target state="translated">Metrics</target>
        </trans-unit>
        <trans-unit id="c67f36b9a79a7d754e54e64d961c0bec27922b9e" translate="yes" xml:space="preserve">
          <source>Metrics JMX domain name.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e2a761013e8c2be7182ddf386230abb9d5b7ff45" translate="yes" xml:space="preserve">
          <source>Metrics are also tagged by the name of the &lt;code&gt;DataSource&lt;/code&gt; computed based on the bean name.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a2f6344c59f53d62fa97e26a33dd120cdd84a2e8" translate="yes" xml:space="preserve">
          <source>Metrics are also tagged by the name of the &lt;code&gt;EntityManagerFactory&lt;/code&gt; that is derived from the bean name.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="339ee586bdd603953ebff6a6d291e2569a5d9258" translate="yes" xml:space="preserve">
          <source>Metrics are tagged by the name of the cache and by the name of the &lt;code&gt;CacheManager&lt;/code&gt; that is derived from the bean name.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e03e3f992925ddcbd184b991a2a15a3de9221f38" translate="yes" xml:space="preserve">
          <source>Micrometer provides a default &lt;code&gt;HierarchicalNameMapper&lt;/code&gt; that governs how a dimensional meter id is &lt;a href=&quot;https://micrometer.io/docs/registry/graphite#_hierarchical_name_mapping&quot;&gt;mapped to flat hierarchical names&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e3d0dde8f8d5520834acd9f742e9a15ae56f2900" translate="yes" xml:space="preserve">
          <source>Micrometer provides a default &lt;code&gt;HierarchicalNameMapper&lt;/code&gt; that governs how a dimensional meter id is &lt;a href=&quot;https://micrometer.io/docs/registry/jmx#_hierarchical_name_mapping&quot;&gt;mapped to flat hierarchical names&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="269e529552f870eeb11cb95ba3477633f0fdceb9" translate="yes" xml:space="preserve">
          <source>Micrometer provides a hierarchical mapping to &lt;a href=&quot;https://micrometer.io/docs/registry/jmx&quot;&gt;JMX&lt;/a&gt;, primarily as a cheap and portable way to view metrics locally. By default, metrics are exported to the &lt;code&gt;metrics&lt;/code&gt; JMX domain. The domain to use can be provided using:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5eff95e0cf85ca246f1b410a2bd899333332ff29" translate="yes" xml:space="preserve">
          <source>Micrometer ships with a simple, in-memory backend that is automatically used as a fallback if no other registry is configured. This allows you to see what metrics are collected in the &lt;a href=&quot;#production-ready-metrics-endpoint&quot;&gt;metrics endpoint&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b8d92bb150e9cdc1f8b82aaf44e906c4dcf0caa3" translate="yes" xml:space="preserve">
          <source>Migrations can also be written in Java. Flyway will be auto-configured with any beans that implement &lt;code&gt;JavaMigration&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fd5346cad2cecffad3048114f46e05dfcc361725" translate="yes" xml:space="preserve">
          <source>Migrations that Flyway should consider when migrating or undoing. When empty all available migrations are considered. Requires Flyway Teams.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="960774ccac7cc7bf068218a065512c549ced4ffe" translate="yes" xml:space="preserve">
          <source>Minimum &quot;Content-Length&quot; value that is required for compression to be performed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6adc7d05d0b7c676130fcb211f72872ee8e2407f" translate="yes" xml:space="preserve">
          <source>Minimum amount of data the server should return for a fetch request.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d3be4f2f956d1d893aa2e24f38c56e2cc8a06563" translate="yes" xml:space="preserve">
          <source>Minimum amount of worker threads.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9ce126de960d033999fb2a45af867f1f14026e95" translate="yes" xml:space="preserve">
          <source>Minimum disk space that should be available.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d95a57408742669a17e7f3f54f839bc66fa51e1e" translate="yes" xml:space="preserve">
          <source>Minimum number of concurrent consumers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="46783ed615e84b7c12d83e0b8deb2403e528af9d" translate="yes" xml:space="preserve">
          <source>Minimum number of listener invoker threads.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="802f0b8210020b0b12165d39758a51c8ec9ff3c5" translate="yes" xml:space="preserve">
          <source>Minimum number of sockets per node.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b0f2ee61671a8f8196273c460511d182070c275a" translate="yes" xml:space="preserve">
          <source>Minimum number of threads.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c4aff79bb142b9485764ff827f0ce374996751a0" translate="yes" xml:space="preserve">
          <source>Minimum size of the pool.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dbed3b95ae4a8f1b621ea8c0805d1e4071d82bda" translate="yes" xml:space="preserve">
          <source>Minimum value that meter IDs starting with the specified name are expected to observe. The longest match wins. Values can be specified as a long or as a Duration value (for timer meters, defaulting to ms if no unit specified).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c92a133e8e92ffcf0c9578a6d4506ea98170ba24" translate="yes" xml:space="preserve">
          <source>Mirrors</source>
          <target state="translated">Mirrors</target>
        </trans-unit>
        <trans-unit id="530df4545ec2320e9aeb599a9aa50d81a968a140" translate="yes" xml:space="preserve">
          <source>Mode to apply when determining if DataSource initialization should be performed using the available DDL and DML scripts.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9de02370a3d2a9a39e82d38ef8e80ea8175822cd" translate="yes" xml:space="preserve">
          <source>Mode to use to expose git information.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="577a39711a4b75bf3fd7473e6cd71fa01f2fdb07" translate="yes" xml:space="preserve">
          <source>Mode used to display the banner when the application runs.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2730bec427de0ed7966041222cd247edd37b4918" translate="yes" xml:space="preserve">
          <source>Mode used to shuffle configured addresses.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6d51775734e41d5cefb79bf945fe4f7caecb98e6" translate="yes" xml:space="preserve">
          <source>Mongo database URI. Cannot be set with host, port, credentials and replica set name.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="06fb961cc1e77f3fbed817f2dd4ea2fb148ed50a" translate="yes" xml:space="preserve">
          <source>Mongo server host. Cannot be set with URI.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="886d5e9f18861e5a546f7d21ea5cd922adb16ffb" translate="yes" xml:space="preserve">
          <source>Mongo server port. Cannot be set with URI.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f0c6acff24bc7941d7797f41a861782190b4b85f" translate="yes" xml:space="preserve">
          <source>MongoDB</source>
          <target state="translated">MongoDB</target>
        </trans-unit>
        <trans-unit id="f9a994ac64175c6a784707d98677395fa627d2a8" translate="yes" xml:space="preserve">
          <source>Monitored resource type.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3792176608969fa17f22ffff0f88830826bf92de" translate="yes" xml:space="preserve">
          <source>Monitoring, Metrics, Auditing, and more.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f6ea856496941fff053cbd22c81a8f48d574e3d4" translate="yes" xml:space="preserve">
          <source>More advanced customizations can be achieved by defining your own &lt;code&gt;@Bean&lt;/code&gt; definitions, which is used when the jOOQ &lt;code&gt;Configuration&lt;/code&gt; is created. You can define beans for the following jOOQ Types:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bccbc33c48881b3a0d459798274f59c9cd6f4b1e" translate="yes" xml:space="preserve">
          <source>More details on getting started with Spring Boot and Gradle can be found in the &lt;a href=&quot;https://docs.spring.io/spring-boot/docs/2.4.0/gradle-plugin/reference/htmlsingle/#getting-started&quot;&gt;Getting Started section&lt;/a&gt; of the Gradle plugin&amp;rsquo;s reference guide.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5b64f2f8c9f3d0c34ded096a27dc16fdd5d813e9" translate="yes" xml:space="preserve">
          <source>More details on getting started with Spring Boot and Maven can be found in the &lt;a href=&quot;https://docs.spring.io/spring-boot/docs/2.4.0/maven-plugin/reference/htmlsingle/#getting-started&quot;&gt;Getting Started section&lt;/a&gt; of the Maven plugin&amp;rsquo;s reference guide.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f964b6a58cab7b7836f644a3205e750496d582cb" translate="yes" xml:space="preserve">
          <source>More efficient container images can also be created by &lt;a href=&quot;spring-boot-features#boot-features-container-images-docker&quot;&gt;creating separate layers&lt;/a&gt; for your dependencies and application classes and resources (which normally change more frequently).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="550a319df598840418675972f4a57f6eb7fc27b3" translate="yes" xml:space="preserve">
          <source>Most developers use the &lt;code&gt;spring-boot-starter-test&lt;/code&gt; &amp;ldquo;Starter&amp;rdquo;, which imports both Spring Boot test modules as well as JUnit Jupiter, AssertJ, Hamcrest, and a number of other useful libraries.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ade0741821f68c80ba43734f200775978f3341b5" translate="yes" xml:space="preserve">
          <source>Most nested libraries in an executable jar do not need to be unpacked in order to run. However, certain libraries can have problems. For example, JRuby includes its own nested jar support, which assumes that the &lt;code&gt;jruby-complete.jar&lt;/code&gt; is always directly available as a file in its own right.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="58de662f6379ecada7bd3405641cb26ee5579912" translate="yes" xml:space="preserve">
          <source>Most of the templating technologies supported by Spring Boot include a configuration option to disable caching (described later in this document). If you use the &lt;code&gt;spring-boot-devtools&lt;/code&gt; module, these properties are &lt;a href=&quot;using-spring-boot#using-boot-devtools-property-defaults&quot;&gt;automatically configured&lt;/a&gt; for you at development time.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1d2f7ccc7deaec1235da5a638b709436b6092578" translate="yes" xml:space="preserve">
          <source>Most operating systems impose strict rules around the names that can be used for environment variables. For example, Linux shell variables can contain only letters (&lt;code&gt;a&lt;/code&gt; to &lt;code&gt;z&lt;/code&gt; or &lt;code&gt;A&lt;/code&gt; to &lt;code&gt;Z&lt;/code&gt;), numbers (&lt;code&gt;0&lt;/code&gt; to &lt;code&gt;9&lt;/code&gt;) or the underscore character (&lt;code&gt;_&lt;/code&gt;). By convention, Unix shell variables will also have their names in UPPERCASE.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b0d8b6cb148bb21fe43faf5213a0139ce976cde6" translate="yes" xml:space="preserve">
          <source>Most registries share common features. For instance, you can disable a particular registry even if the Micrometer registry implementation is on the classpath. For example, to disable Datadog:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="62a97d4415ef61ad89ce602fd4dbd48d7ecdc6fa" translate="yes" xml:space="preserve">
          <source>Most standard media types are supported out-of-the-box, but you can also define new ones:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3e668458d9951406a8899610f326bcd3124cd7ad" translate="yes" xml:space="preserve">
          <source>Multi-document property files are often used in conjunction with activation properties such as &lt;code&gt;spring.config.activate.on-profile&lt;/code&gt;. See the &lt;a href=&quot;#boot-features-external-config-file-activation-properties&quot;&gt;next section&lt;/a&gt; for details.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aff661523b560f8517e9c15678fa06597d03a777" translate="yes" xml:space="preserve">
          <source>Multi-page HTML</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fdf3a0a66074f70295eb0036ac0bae5e97328ddb" translate="yes" xml:space="preserve">
          <source>Multiple files are written to a directory tree, with the filename becoming the &amp;lsquo;key&amp;rsquo; and the contents becoming the &amp;lsquo;value&amp;rsquo;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="001f5edf74f71418a87a4b0ae61bb2825434be43" translate="yes" xml:space="preserve">
          <source>Multiplier applied to &quot;pollTimeout&quot; to determine if a consumer is non-responsive.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4e4430ae095ddcb359146c2d7ecff52162d16653" translate="yes" xml:space="preserve">
          <source>Multiplier to apply to the previous retry interval.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f6c4e7b63424b23379a654d10fb8fa7fb7d21c17" translate="yes" xml:space="preserve">
          <source>Mustache</source>
          <target state="translated">Mustache</target>
        </trans-unit>
        <trans-unit id="08d2e98e6754af941484848930ccbaddfefe13d6" translate="yes" xml:space="preserve">
          <source>N/A</source>
          <target state="translated">N/A</target>
        </trans-unit>
        <trans-unit id="59531f035542e1a77b5725840d3558bc5d92f67c" translate="yes" xml:space="preserve">
          <source>N1QL query operations timeout.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fb549b6cd88b9e4351422cf23fbfc434de75e871" translate="yes" xml:space="preserve">
          <source>NO-SQL</source>
          <target state="translated">NO-SQL</target>
        </trans-unit>
        <trans-unit id="709a23220f2c3d64d1e1d6d18c4d5280f8d82fca" translate="yes" xml:space="preserve">
          <source>Name</source>
          <target state="translated">Name</target>
        </trans-unit>
        <trans-unit id="adb5745529268d773bde4875847fd6a8b2697a34" translate="yes" xml:space="preserve">
          <source>Name of a specific file that, when changed, triggers the restart check. Must be a simple name (without any path) of a file that appears on your classpath. If not specified, any classpath file change triggers the restart.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cee0172bdf8cb04d683bf6946884f27d4f974d03" translate="yes" xml:space="preserve">
          <source>Name of main class to launch (for example, &lt;code&gt;com.app.Application&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="65123bc5a2f0584d7c5dd22444701bf37f5e5ecb" translate="yes" xml:space="preserve">
          <source>Name of properties file (for example, &lt;code&gt;launcher&lt;/code&gt;). It defaults to &lt;code&gt;loader&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c7adbce8e08501655835d0e26073ded671bca1a9" translate="yes" xml:space="preserve">
          <source>Name of table to use for tracking change history.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bfd8fd88bcab24560f2eca65867c63e5e254a63d" translate="yes" xml:space="preserve">
          <source>Name of table to use for tracking concurrent Liquibase usage.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="72a344532515c38514afa4ff2853d3c473fe56ac" translate="yes" xml:space="preserve">
          <source>Name of the Cassandra session.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="969041b5f6703d769483401b0778976ddea5a1a6" translate="yes" xml:space="preserve">
          <source>Name of the HTTP header from which the remote IP is extracted. For instance, `X-FORWARDED-FOR`.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cdd467aa82bb018c5dd08ff3408be4c747246663" translate="yes" xml:space="preserve">
          <source>Name of the HTTP header from which the remote host is extracted.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9ce166e2bf71e8d83c83bee8f024cb700336597a" translate="yes" xml:space="preserve">
          <source>Name of the HTTP header used to override the original port value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="30b59bfe14700074914427807b5aed279c562084" translate="yes" xml:space="preserve">
          <source>Name of the Redis server.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="81d0bbb1ed903c8bb896a75a443befaef48124f1" translate="yes" xml:space="preserve">
          <source>Name of the RequestContext attribute for all views.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9254c50b678f5f2bca866b26cea76d68e8b8f5d2" translate="yes" xml:space="preserve">
          <source>Name of the URL query string parameter that indicates how many results to return at once.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9bae2574f9dc9bbe195b6a44792972a55dc11b0c" translate="yes" xml:space="preserve">
          <source>Name of the URL query string parameter that indicates what direction to sort results.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cea695aa58cc23eb15d3478e1e3c11dbdd06c40d" translate="yes" xml:space="preserve">
          <source>Name of the URL query string parameter that indicates what page to return.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="75ccdbf1ce0c89337ea0fadd37bbe4a23853e77d" translate="yes" xml:space="preserve">
          <source>Name of the bucket to connect to.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="df40997d242d4a15bd3065dceac19547bc9587b6" translate="yes" xml:space="preserve">
          <source>Name of the database table used to store sessions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="11e2fc51ba92fe09711123622eec7f6f87993ae1" translate="yes" xml:space="preserve">
          <source>Name of the datasource. Default to &quot;testdb&quot; when using an embedded database.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="504905f580052d293ca7195e152d2ad7ef355daf" translate="yes" xml:space="preserve">
          <source>Name of the default exchange to use for send operations.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c710bd2ba72b88d659b766553903b5a5a2a8f2d4" translate="yes" xml:space="preserve">
          <source>Name of the default queue to receive messages from when none is specified explicitly.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8cfdf471ccf99b27bf5b1b1d045f515a7b12090b" translate="yes" xml:space="preserve">
          <source>Name of the field that stores the type information for complex types when using &quot;MappingCouchbaseConverter&quot;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="40b8596cbfe208b56456a068a385882e8d5bf425" translate="yes" xml:space="preserve">
          <source>Name of the map used to store sessions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f0bd0170890311b901eb7b803f248f4caf874146" translate="yes" xml:space="preserve">
          <source>Name of the metric for received requests.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="29d48870b1c654e84817663ce7c415fe34d012db" translate="yes" xml:space="preserve">
          <source>Name of the metric for sent requests.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c23da5c8cb305efd1e79bf222d8e6002ee7d03bc" translate="yes" xml:space="preserve">
          <source>Name of the replica set.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7d42036ede6ef6f91fbec61c98fe519220f6738a" translate="yes" xml:space="preserve">
          <source>Name of the scheduler.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dac3aaff4f2dbd3e15e83af2767c2cd225391732" translate="yes" xml:space="preserve">
          <source>Name of the schema history table that will be used by Flyway.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1734d03cee40ba5008fd8d6d2d34f09d8290c873" translate="yes" xml:space="preserve">
          <source>Name of the scope used for all collection access.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f6f4e4cd2a79e667e896dcb11e9ad0e73fa483c0" translate="yes" xml:space="preserve">
          <source>Name of the target database to operate on, auto-detected by default. Can be alternatively set using the &quot;Database&quot; enum.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bdb58a6932fa0249ab6dd166ef5ad1acf51d023f" translate="yes" xml:space="preserve">
          <source>Name of the timestamp field.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bdb13e3f53bcd1d1d982079d12fcf90b3a872449" translate="yes" xml:space="preserve">
          <source>Namespace for keys used to store sessions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4b909f6c77de87c607e9f8280878e86dec61789b" translate="yes" xml:space="preserve">
          <source>Naming policy that should be applied to an object's field during serialization and deserialization.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7fafd1c2baa4e8e81df9b75f6c4bb62d2d4fa596" translate="yes" xml:space="preserve">
          <source>Navigating to &lt;code&gt;/actuator/metrics&lt;/code&gt; displays a list of available meter names. You can drill down to view information about a particular meter by providing its name as a selector, e.g. &lt;code&gt;/actuator/metrics/jvm.memory.max&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2076e460d9aa7a9b83d6ac5fd826d61323f2a4a8" translate="yes" xml:space="preserve">
          <source>Need more details about Spring Boot&amp;rsquo;s core features? &lt;a href=&quot;spring-boot-features#boot-features&quot;&gt;The following content is for you&lt;/a&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aebee6499ae87f969b34929f47028cfa78a146e7" translate="yes" xml:space="preserve">
          <source>Neo4J</source>
          <target state="translated">Neo4J</target>
        </trans-unit>
        <trans-unit id="df5abe2ac785ad7fd020161d276090c52b736f9e" translate="yes" xml:space="preserve">
          <source>Nested members of a &lt;code&gt;@ConstructorBinding&lt;/code&gt; class (such as &lt;code&gt;Security&lt;/code&gt; in the example above) will also be bound via their constructor.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ae74558e9f6207b0d6aba6af63c04b8e82ba9125" translate="yes" xml:space="preserve">
          <source>Network address to which the management endpoints should bind. Requires a custom management.server.port.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ec9b68db256e80f9e6e5428dbbefebd091091977" translate="yes" xml:space="preserve">
          <source>Network address to which the server should bind.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="61bea3ee2054d13c27c8a7b108f354b79cd1da74" translate="yes" xml:space="preserve">
          <source>Network settings: Listen port for incoming HTTP requests (&lt;code&gt;server.port&lt;/code&gt;), interface address to bind to &lt;code&gt;server.address&lt;/code&gt;, and so on.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ff3436427337238b332c9a8f185813f051d61173" translate="yes" xml:space="preserve">
          <source>New Relic</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2110ccee381de7249a0f1301a0e7a2a40b573781" translate="yes" xml:space="preserve">
          <source>New Relic API key.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d02ddd19bfb7b3a6bd57e8fd29ddebe1a4fd3b37" translate="yes" xml:space="preserve">
          <source>New Relic account ID.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8939928802e4ac81da7b13ce4c1e9caa3bc7d335" translate="yes" xml:space="preserve">
          <source>New Relic registry pushes metrics to &lt;a href=&quot;https://micrometer.io/docs/registry/new-relic&quot;&gt;New Relic&lt;/a&gt; periodically. To export metrics to &lt;a href=&quot;https://newrelic.com&quot;&gt;New Relic&lt;/a&gt;, your API key and account id must be provided:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="816c52fd2bdd94a63cd0944823a6c0aa9384c103" translate="yes" xml:space="preserve">
          <source>No</source>
          <target state="translated">No</target>
        </trans-unit>
        <trans-unit id="a696326ac1c949ff65e9ff4546459d7f48d466ef" translate="yes" xml:space="preserve">
          <source>No &lt;em&gt;(result will be logged if unspecified)&lt;/em&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7cb92221078745a84180a52936046477176627a0" translate="yes" xml:space="preserve">
          <source>No &lt;em&gt;(the default is the first class found that declares a &lt;code&gt;main&lt;/code&gt; method)&lt;/em&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a1c90cd3956f8c452ccc498c297da4fe7fd0471d" translate="yes" xml:space="preserve">
          <source>No JNDI lookup is involved, and destinations are resolved against their names, using either the &lt;code&gt;name&lt;/code&gt; attribute in the Artemis configuration or the names provided through configuration.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b68ca6f19dba3a07bb24c0dd5e286505cc7e8e7b" translate="yes" xml:space="preserve">
          <source>No mapping by default, so http status is 200</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b5a6ce7df27fe51cbb1ee81121bb8783e0e48aae" translate="yes" xml:space="preserve">
          <source>No matter what you set in the environment, Spring Boot always loads &lt;code&gt;application.properties&lt;/code&gt; as described above. By default, if YAML is used, then files with the &amp;lsquo;.yml&amp;rsquo; extension are also added to the list.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d912e994424274067a431c4b376b8c72dd789989" translate="yes" xml:space="preserve">
          <source>None of these features are mandatory and you may choose to replace this single annotation by any of the features that it enables. For instance, you may not want to use component scan or configuration properties scan in your application:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cd35558faf74c560e63507e24559cfc6d4472e65" translate="yes" xml:space="preserve">
          <source>Not all Spring applications have to be web applications (or web services). If you want to execute some code in a &lt;code&gt;main&lt;/code&gt; method but also bootstrap a Spring application to set up the infrastructure to use, you can use the &lt;code&gt;SpringApplication&lt;/code&gt; features of Spring Boot. A &lt;code&gt;SpringApplication&lt;/code&gt; changes its &lt;code&gt;ApplicationContext&lt;/code&gt; class, depending on whether it thinks it needs a web application or not. The first thing you can do to help it is to leave server-related dependencies (e.g. servlet API) off the classpath. If you cannot do that (for example, you run two applications from the same code base) then you can explicitly call &lt;code&gt;setWebApplicationType(WebApplicationType.NONE)&lt;/code&gt; on your &lt;code&gt;SpringApplication&lt;/code&gt; instance or set the &lt;code&gt;applicationContextClass&lt;/code&gt; property (through the Java API or with external properties). Application code that you want to run as your business logic can be implemented as a &lt;code&gt;CommandLineRunner&lt;/code&gt; and dropped into the context as a &lt;code&gt;@Bean&lt;/code&gt; definition.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2c924e3088204ee77ba681f72be3444357932fca" translate="yes" xml:space="preserve">
          <source>Note</source>
          <target state="translated">Note</target>
        </trans-unit>
        <trans-unit id="fc381829b966432469d9fc852b519cd5f3dbceeb" translate="yes" xml:space="preserve">
          <source>Note that the default &lt;code&gt;FilterRegistrationBean&lt;/code&gt; does not include the &lt;code&gt;ERROR&lt;/code&gt; dispatcher type.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0af3e2522afa2191e5542fc841c67658e3c91683" translate="yes" xml:space="preserve">
          <source>Note that, in the preceding example, any other value is also allowed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0b0d16fb2a813af015422b72daf18ec97248425d" translate="yes" xml:space="preserve">
          <source>Note that, unlike when running as an &lt;code&gt;init.d&lt;/code&gt; service, the user that runs the application, the PID file, and the console log file are managed by &lt;code&gt;systemd&lt;/code&gt; itself and therefore must be configured by using appropriate fields in the &amp;lsquo;service&amp;rsquo; script. Consult the &lt;a href=&quot;https://www.freedesktop.org/software/systemd/man/systemd.service.html&quot;&gt;service unit configuration man page&lt;/a&gt; for more details.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9f1b55aa3f75f19a77d99ca9a9240f847e15bb35" translate="yes" xml:space="preserve">
          <source>Note the use of &lt;code&gt;ReactorResourceFactory&lt;/code&gt; for the connection provider and event loop resources. This ensures efficient sharing of resources for the server receiving requests and the client making requests.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="70440046a3dc2e079f23ee1c57dfa76669b732aa" translate="yes" xml:space="preserve">
          <source>Notes</source>
          <target state="translated">Notes</target>
        </trans-unit>
        <trans-unit id="e36fcd1148b404153eda89ff7ecf418479a4346e" translate="yes" xml:space="preserve">
          <source>Notice how using constructor injection lets the &lt;code&gt;riskAssessor&lt;/code&gt; field be marked as &lt;code&gt;final&lt;/code&gt;, indicating that it cannot be subsequently changed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="16ea68825410150f5cb607ace19e8f0f5d68d3e8" translate="yes" xml:space="preserve">
          <source>Now consider the following configuration:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="681dcfaad2584ee20f4c4cb8f2d1bfe7082d8d18" translate="yes" xml:space="preserve">
          <source>Number of I/O threads to create for the worker. The default is derived from the number of available processors.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5469f9477634fa872262890b22b6443561498970" translate="yes" xml:space="preserve">
          <source>Number of acceptor threads to use. When the value is -1, the default, the number of acceptors is derived from the operating environment.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="60d127d3a4aedf92d7d53fd6e9b15c9b459d3ee4" translate="yes" xml:space="preserve">
          <source>Number of acknowledgments the producer requires the leader to have received before considering a request complete.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8b80e0a09b1f7fbc4fb6c6a18627a5e293b6c4fb" translate="yes" xml:space="preserve">
          <source>Number of channels per connection requested by the client. Use 0 for unlimited.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f8758ad0e1a2c909219e7d8feb0db1eaf0e3c660" translate="yes" xml:space="preserve">
          <source>Number of channels to retain in the cache. When &quot;check-timeout&quot; &amp;gt; 0, max channels per connection.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c2820d7fa72675423e7dc3dfe60acc0515ea3796" translate="yes" xml:space="preserve">
          <source>Number of classes loaded/unloaded</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="05f846aff4e4d1fdb8d93759bfb3227e39a0c5f9" translate="yes" xml:space="preserve">
          <source>Number of connections to cache. Only applies when mode is CONNECTION.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="25cb143ca7dfb17b112bf1a0f36cac586bbd83af" translate="yes" xml:space="preserve">
          <source>Number of connections to create when growing the pool.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9398a817dcd3ea55740c5da1279f52a544e13557" translate="yes" xml:space="preserve">
          <source>Number of consumers per queue.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="df21db9fbd619c531f620eced7aee99d69d48da4" translate="yes" xml:space="preserve">
          <source>Number of days before rotated log files are deleted.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e1e95ea8788991fb283e2a6729c28577aa58366d" translate="yes" xml:space="preserve">
          <source>Number of days to retain the access log files before they are removed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5959360839f32f1335ec4f45c8408e304fdfd93a" translate="yes" xml:space="preserve">
          <source>Number of measurements per request to use for this backend. If more measurements are found, then multiple requests will be made.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fd34c4d54673665a0397069f43ba528dfe66e0eb" translate="yes" xml:space="preserve">
          <source>Number of records between offset commits when ackMode is &quot;COUNT&quot; or &quot;COUNT_TIME&quot;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e7a1a5ffecfdd718e9aeb7dc505da39baccb9d9e" translate="yes" xml:space="preserve">
          <source>Number of retry attempts to commit the transaction before throwing an exception.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c1c4616798f56a3442a6e65ea48f8fbef7301d03" translate="yes" xml:space="preserve">
          <source>Number of rows that should be fetched from the database when more rows are needed. Use -1 to use the JDBC driver's default configuration.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bbb3e1aeb555e53eabe215e1f27f6fc09dbb050f" translate="yes" xml:space="preserve">
          <source>Number of selector threads to use. When the value is -1, the default, the number of selectors is derived from the operating environment.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="814fcd40d51f513ae036f4355c0d29b11334cada" translate="yes" xml:space="preserve">
          <source>Number of threads to run in the listener containers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="003c167dc68df2ee4f9e5891b5dba50eee620506" translate="yes" xml:space="preserve">
          <source>Number of threads to use with the metrics publishing scheduler.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2f19cf4531b082e8e410a1cd2a43ed7d12663c59" translate="yes" xml:space="preserve">
          <source>Number of worker threads. The default is 8 times the number of I/O threads.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ab959bf3e597e16f718a6f5ac840189d9d341fcf" translate="yes" xml:space="preserve">
          <source>Numeric values surrounded by underscores (see &lt;a href=&quot;#boot-features-external-config-relaxed-binding-from-environment-variables&quot;&gt;Binding from Environment Variables&lt;/a&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="740e7eb16ae6b1ba6b1e0357e662fec291cc24e1" translate="yes" xml:space="preserve">
          <source>OAuth 2.0 endpoint through which token introspection is accomplished.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3df72bdcb7d2bbf2e55d260f80a7baf82cedb13c" translate="yes" xml:space="preserve">
          <source>OAuth client registrations.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6bcc5555e5b5bfbf70c2cadc7e37bd73f658c303" translate="yes" xml:space="preserve">
          <source>OAuth provider details.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0c2f820a83657630ceb1bbff15f4713846d1c0da" translate="yes" xml:space="preserve">
          <source>OAuth2 client registration for common providers</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5ab5d8356cd009de5be7ca9821e61f43175a5dbf" translate="yes" xml:space="preserve">
          <source>OS Service</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8db068f05012ae9cd8936205c21e9b0deb42f91d" translate="yes" xml:space="preserve">
          <source>OS environment variables.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="289321e1a596e17d37bd252db183c90b595dd422" translate="yes" xml:space="preserve">
          <source>OUT_OF_SERVICE</source>
          <target state="translated">OUT_OF_SERVICE</target>
        </trans-unit>
        <trans-unit id="2883f191bc5ebfdc16c0813eff659b35363ea69b" translate="yes" xml:space="preserve">
          <source>Object</source>
          <target state="translated">Object</target>
        </trans-unit>
        <trans-unit id="9dd87b18ec13240b99774a62fd26b712affb42fe" translate="yes" xml:space="preserve">
          <source>Objects with the same &amp;ldquo;property&amp;rdquo; and &amp;ldquo;group&amp;rdquo; name can appear multiple times within a metadata file. For example, you could bind two separate classes to the same prefix, with each having potentially overlapping property names. While the same names appearing in the metadata multiple times should not be common, consumers of metadata should take care to ensure that they support it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fbbc24c4d0cded15a4db9943abb9dba2dde9ff8f" translate="yes" xml:space="preserve">
          <source>Occasionally the profiles that you define and use in your application are too fine-grained and become cumbersome to use. For example, you might have &lt;code&gt;proddb&lt;/code&gt; and &lt;code&gt;prodmq&lt;/code&gt; profiles that you use to enable database and messaging features independently.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2aec639fda5b8808f7fa66f8fca2c310ee66ab74" translate="yes" xml:space="preserve">
          <source>Of course, a Dockerfile can be written without using the jarmode. You can use some combination of &lt;code&gt;unzip&lt;/code&gt; and &lt;code&gt;mv&lt;/code&gt; to move things to the right layer but jarmode simplifies that.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e01fa717baccf94556f36e24206821f4f9e2047f" translate="yes" xml:space="preserve">
          <source>Offline</source>
          <target state="translated">Offline</target>
        </trans-unit>
        <trans-unit id="e5299943508fbcec8d07c8b739178693e0972eea" translate="yes" xml:space="preserve">
          <source>Often, &lt;code&gt;@WebFluxTest&lt;/code&gt; is limited to a single controller and used in combination with the &lt;code&gt;@MockBean&lt;/code&gt; annotation to provide mock implementations for required collaborators.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5701fd8b21aaa7b4b2e75417fdeb2ef8815580ee" translate="yes" xml:space="preserve">
          <source>Often, &lt;code&gt;@WebMvcTest&lt;/code&gt; is limited to a single controller and is used in combination with &lt;code&gt;@MockBean&lt;/code&gt; to provide mock implementations for required collaborators.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1cb331f4462fee36b45716a39152b29a02a9cd72" translate="yes" xml:space="preserve">
          <source>Often, if you have an executable and a non-executable jar as two separate build products, the executable version has additional configuration files that are not needed in a library jar. For example, the &lt;code&gt;application.yml&lt;/code&gt; configuration file might be excluded from the non-executable JAR.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f3c6f88133db3f367f875660a0704f77de8fa132" translate="yes" xml:space="preserve">
          <source>Often, you need to move beyond unit testing and start integration testing (with a Spring &lt;code&gt;ApplicationContext&lt;/code&gt;). It is useful to be able to perform integration testing without requiring deployment of your application or needing to connect to other infrastructure.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6ac9eb7f12c9c799171a17d0b4f17d169e499242" translate="yes" xml:space="preserve">
          <source>On Cloud Foundry, applications only receive requests on port 8080 for both HTTP and TCP routing, by default. If you want to use a custom management port on Cloud Foundry, you will need to explicitly set up the application&amp;rsquo;s routes to forward traffic to the custom port.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b8211abcce05e1d59970f8673b4a927949e69722" translate="yes" xml:space="preserve">
          <source>On a method to enable for an individual endpoint. This is not necessary if you have it on the class, but can be used to further customize the timer for this particular endpoint.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="138de7afb56bcd514bf620f62fd9364d6bd96908" translate="yes" xml:space="preserve">
          <source>On a method with &lt;code&gt;longTask = true&lt;/code&gt; to enable a long task timer for the method. Long task timers require a separate metric name, and can be stacked with a short task timer.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e00a900b494c67485b732c82901d95b867a538e8" translate="yes" xml:space="preserve">
          <source>On a resource class to enable timings on every request handler in the resource.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d83a8f8a20329a6fc21b2a3b915ebc33d64bf994" translate="yes" xml:space="preserve">
          <source>On a slower development environment, it may happen that the quiet period is not enough, and the changes in the classes may be split into batches. The server is restarted after the first batch of class changes is uploaded. The next batch can&amp;rsquo;t be sent to the application, since the server is restarting.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="27cb77ffa640f1416669690f5838d21f65188736" translate="yes" xml:space="preserve">
          <source>On many operating systems, Maven can be installed with a package manager. If you use OSX Homebrew, try &lt;code&gt;brew install maven&lt;/code&gt;. Ubuntu users can run &lt;code&gt;sudo apt-get install maven&lt;/code&gt;. Windows users with &lt;a href=&quot;https://chocolatey.org/&quot;&gt;Chocolatey&lt;/a&gt; can run &lt;code&gt;choco install maven&lt;/code&gt; from an elevated (administrator) prompt.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2e7299c5b916b468de6a4c3eaaa498077c23bc0f" translate="yes" xml:space="preserve">
          <source>On your application classpath (for example, inside your jar) you can have an &lt;code&gt;application.properties&lt;/code&gt; file that provides a sensible default property value for &lt;code&gt;name&lt;/code&gt;. When running in a new environment, an &lt;code&gt;application.properties&lt;/code&gt; file can be provided outside of your jar that overrides the &lt;code&gt;name&lt;/code&gt;. For one-off testing, you can launch with a specific command line switch (for example, &lt;code&gt;java -jar app.jar --name=&quot;Spring&quot;&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ab8645f4a23d945e0a24dec5e4f16f74a0338c5a" translate="yes" xml:space="preserve">
          <source>Once Cloud Foundry acknowledges that your application has been deployed, you should be able to find the application at the URI given. In the preceding example, you could find it at &lt;code&gt;https://acloudyspringtime.cfapps.io/&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f1e702e4369a816074565a1d68789aad13ba2396" translate="yes" xml:space="preserve">
          <source>Once Spring Security is in play, Spring Boot Actuator has a flexible audit framework that publishes events (by default, &amp;ldquo;authentication success&amp;rdquo;, &amp;ldquo;failure&amp;rdquo; and &amp;ldquo;access denied&amp;rdquo; exceptions). This feature can be very useful for reporting and for implementing a lock-out policy based on authentication failures.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6a3ee8278f4e9bfd686fc5aa00dce858728840a6" translate="yes" xml:space="preserve">
          <source>Once defined, you can change the level for all the loggers in the group with a single line:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4dcd66e9cee43b2affeb742fbd6b2e4608512bf0" translate="yes" xml:space="preserve">
          <source>Once downloaded, follow the &lt;a href=&quot;https://raw.githubusercontent.com/spring-projects/spring-boot/v2.4.0/spring-boot-project/spring-boot-cli/src/main/content/INSTALL.txt&quot;&gt;INSTALL.txt&lt;/a&gt; instructions from the unpacked archive. In summary, there is a &lt;code&gt;spring&lt;/code&gt; script (&lt;code&gt;spring.bat&lt;/code&gt; for Windows) in a &lt;code&gt;bin/&lt;/code&gt; directory in the &lt;code&gt;.zip&lt;/code&gt; file. Alternatively, you can use &lt;code&gt;java -jar&lt;/code&gt; with the &lt;code&gt;.jar&lt;/code&gt; file (the script helps you to be sure that the classpath is set correctly).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0b19fa176ae5532b9b8271d0e8e612a17a022f22" translate="yes" xml:space="preserve">
          <source>Once installed, you can start and stop the service in the usual way. For example, on a Debian-based system, you could start it with the following command:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cb2eb8db191cc1e00e601f97d1f84bed206bb256" translate="yes" xml:space="preserve">
          <source>Once the &lt;code&gt;RSocket&lt;/code&gt; channel is established between server and client, any party can send or receive requests to the other.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b3b3a42f928d91541edf05947c60fbad6a958371" translate="yes" xml:space="preserve">
          <source>Once the &lt;code&gt;spring-boot-antlib&lt;/code&gt; namespace has been declared, the following additional tasks are available:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="72c3445895347de2cb2d77ad548d3f9c1ee4e87c" translate="yes" xml:space="preserve">
          <source>Once the pre-stop hook has completed, SIGTERM will be sent to the container and &lt;a href=&quot;spring-boot-features#boot-features-graceful-shutdown&quot;&gt;graceful shutdown&lt;/a&gt; will begin, allowing any remaining in-flight requests to complete.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8347d803657d94512d97bc6ecf3d721a4380c105" translate="yes" xml:space="preserve">
          <source>Once the war file is working, you can make it executable by adding a &lt;code&gt;main&lt;/code&gt; method to your &lt;code&gt;Application&lt;/code&gt;, as shown in the following example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1afac784048ae6ad3eb7b00c37446f6027a11bcf" translate="yes" xml:space="preserve">
          <source>Once you have built your application (by using, for example, &lt;code&gt;mvn clean package&lt;/code&gt;) and have &lt;a href=&quot;https://docs.cloudfoundry.org/cf-cli/install-go-cli.html&quot;&gt;installed the &lt;code&gt;cf&lt;/code&gt; command line tool&lt;/a&gt;, deploy your application by using the &lt;code&gt;cf push&lt;/code&gt; command, substituting the path to your compiled &lt;code&gt;.jar&lt;/code&gt;. Be sure to have &lt;a href=&quot;https://docs.cloudfoundry.org/cf-cli/getting-started.html#login&quot;&gt;logged in with your &lt;code&gt;cf&lt;/code&gt; command line client&lt;/a&gt; before pushing an application. The following line shows using the &lt;code&gt;cf push&lt;/code&gt; command to deploy an application:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="507df9a504bc5094bff7897db31175bdc74fc5c4" translate="yes" xml:space="preserve">
          <source>Once you have created a &lt;a href=&quot;https://console.boxfuse.com&quot;&gt;Boxfuse account&lt;/a&gt;, connected it to your AWS account, installed the latest version of the Boxfuse Client, and ensured that the application has been built by Maven or Gradle (by using, for example, &lt;code&gt;mvn clean package&lt;/code&gt;), you can deploy your Spring Boot application to AWS with a command similar to the following:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3b7d2cf44bdc7ab73b319aa159a258bbe099c12f" translate="yes" xml:space="preserve">
          <source>Once you have installed the CLI, you can run it by typing &lt;code&gt;spring&lt;/code&gt; and pressing Enter at the command line. If you run &lt;code&gt;spring&lt;/code&gt; without any arguments, a help screen is displayed, as follows:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="19bd84e4843a8e7a8c8a34b71e31d5b9fdd42d27" translate="yes" xml:space="preserve">
          <source>Once you have unpacked the jar file, you can also get an extra boost to startup time by running the app with its &quot;natural&quot; main method instead of the &lt;code&gt;JarLauncher&lt;/code&gt;. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4ce2236b24bdf5f22019c7bda5db48f83b472bca" translate="yes" xml:space="preserve">
          <source>Once you&amp;rsquo;re done with the migration, please make sure to remove this module from your project&amp;rsquo;s dependencies.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c2f2bf924524a3b72b36fe22f1befde3e8e59703" translate="yes" xml:space="preserve">
          <source>Once you&amp;rsquo;ve got access to a &lt;code&gt;WebServerFactory&lt;/code&gt;, you can often add customizers to it to configure specific parts, like connectors, server resources, or the server itself - all using server-specific APIs.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="63c21c6aa78217c12046c51d41eb4797e0809a52" translate="yes" xml:space="preserve">
          <source>Once your application is live, you can verify the status of the deployed application by using the &lt;code&gt;cf apps&lt;/code&gt; command, as shown in the following example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7c1d279dfbbc79d7a0576e90b69c8ee5cbacb698" translate="yes" xml:space="preserve">
          <source>One of Kotlin&amp;rsquo;s key features is &lt;a href=&quot;https://kotlinlang.org/docs/reference/null-safety.html&quot;&gt;null-safety&lt;/a&gt;. It deals with &lt;code&gt;null&lt;/code&gt; values at compile time rather than deferring the problem to runtime and encountering a &lt;code&gt;NullPointerException&lt;/code&gt;. This helps to eliminate a common source of bugs without paying the cost of wrappers like &lt;code&gt;Optional&lt;/code&gt;. Kotlin also allows using functional constructs with nullable values as described in this &lt;a href=&quot;https://www.baeldung.com/kotlin-null-safety&quot;&gt;comprehensive guide to null-safety in Kotlin&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6c027602a59517ac945b1b59fc995138db7bdc66" translate="yes" xml:space="preserve">
          <source>One of the biggest advantages of packaging your application as a jar and using an embedded HTTP server is that you can run your application as you would any other. The sample applies to debugging Spring Boot applications. You do not need any special IDE plugins or extensions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0c6cf4cf801d15ddecd1888c89934c941cd1fb41" translate="yes" xml:space="preserve">
          <source>One of the constants on Jackson's PropertyNamingStrategy. Can also be a fully-qualified class name of a PropertyNamingStrategy subclass.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7a5f3dff57db48353e42add862a62fdc1afbecbb" translate="yes" xml:space="preserve">
          <source>One of the major advantages of dependency injection is that it should make your code easier to unit test. You can instantiate objects by using the &lt;code&gt;new&lt;/code&gt; operator without even involving Spring. You can also use &lt;em&gt;mock objects&lt;/em&gt; instead of real dependencies.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="978d9ea6405287366110066f230e2539eb79c7d8" translate="yes" xml:space="preserve">
          <source>One or more &lt;a href=&quot;https://ant.apache.org/manual/Types/resources.html#collection&quot;&gt;Resource Collections&lt;/a&gt; describing a set of &lt;a href=&quot;https://ant.apache.org/manual/Types/resources.html&quot;&gt;Resources&lt;/a&gt; that should be added to the content of the created jar file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2f67a0107ea559d3c9cba2645b3ea96f22080f23" translate="yes" xml:space="preserve">
          <source>One or more &lt;a href=&quot;https://ant.apache.org/manual/Types/resources.html#collection&quot;&gt;Resource Collections&lt;/a&gt; that should be added to the set of jar libraries that make up the runtime dependency classpath of the application.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1ffa91ff71d810b117c1509734e037318c0bed6e" translate="yes" xml:space="preserve">
          <source>OneJar</source>
          <target state="translated">OneJar</target>
        </trans-unit>
        <trans-unit id="80f68083b0bf11932a61c29912eb731064556e6e" translate="yes" xml:space="preserve">
          <source>Only a subset of the properties supported by Kafka are available directly through the &lt;code&gt;KafkaProperties&lt;/code&gt; class. If you wish to configure the producer or consumer with additional properties that are not directly supported, use the following properties:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e8a6f743a234e32bdf0bcf3507e31a57b24a288b" translate="yes" xml:space="preserve">
          <source>Only caches that are configured on startup are bound to the registry. For caches not defined in the cache&amp;rsquo;s configuration, e.g. caches created on-the-fly or programmatically after the startup phase, an explicit registration is required. A &lt;code&gt;CacheMetricsRegistrar&lt;/code&gt; bean is made available to make that process easier.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="62a834890da15c9a542e7a46438fc1c2297b65c3" translate="yes" xml:space="preserve">
          <source>Only one provider can be active for a given property, but you can specify several providers if they can all manage the property &lt;em&gt;in some way&lt;/em&gt;. Make sure to place the most powerful provider first, as the IDE must use the first one in the JSON section that it can handle. If no provider for a given property is supported, no special content assistance is provided, either.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b2d37fd03579089418b6c82f6a1e5b74f25e5bbd" translate="yes" xml:space="preserve">
          <source>Only production configuration is filtered that way (in other words, no filtering is applied on &lt;code&gt;src/test/resources&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0bafe93d7c0b89a3053e12e1a18f8163680e9e20" translate="yes" xml:space="preserve">
          <source>Only the &lt;code&gt;name&lt;/code&gt; of the property is required to document additional metadata for existing properties.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cb8ded1c04cd5c22aa7f053a31635721e367ebd9" translate="yes" xml:space="preserve">
          <source>Open &lt;code&gt;&lt;a href=&quot;http://localhost:8080&quot;&gt;localhost:8080&lt;/a&gt;&lt;/code&gt; in your favorite web browser. You should see the following output:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aae76627771768ed4f70835ba91564d157e7d10e" translate="yes" xml:space="preserve">
          <source>OpenShift Commons Briefing</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="430d32076eb256f0fb1db5fd1333254c368ef1ba" translate="yes" xml:space="preserve">
          <source>Operation</source>
          <target state="translated">Operation</target>
        </trans-unit>
        <trans-unit id="9b2e918e47e14b9cfaa1f966addcfe46350a0eba" translate="yes" xml:space="preserve">
          <source>Operation that should be performed on shutdown.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="39635ed03fc2b40f2789b1717b8e2643c9e1a072" translate="yes" xml:space="preserve">
          <source>Operations on an &lt;code&gt;@Endpoint&lt;/code&gt;, &lt;code&gt;@WebEndpoint&lt;/code&gt;, or &lt;code&gt;@EndpointWebExtension&lt;/code&gt; are automatically exposed over HTTP using Jersey, Spring MVC, or Spring WebFlux. If both Jersey and Spring MVC are available, Spring MVC will be used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="09884354dbcc1669f29a83c98113e5dbaed3e5bb" translate="yes" xml:space="preserve">
          <source>Operations on an endpoint receive input via their parameters. When exposed via the web, the values for these parameters are taken from the URL&amp;rsquo;s query parameters and from the JSON request body. When exposed via JMX, the parameters are mapped to the parameters of the MBean&amp;rsquo;s operations. Parameters are required by default. They can be made optional by annotating them with &lt;code&gt;@org.springframework.lang.Nullable&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="96b049bd9a54335dda4b80928178998104fa7507" translate="yes" xml:space="preserve">
          <source>Options that are passed to the JVM when it is launched.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="874f6bc0d9c3d473c3656cef91b625732a8eb434" translate="yes" xml:space="preserve">
          <source>Or if you prefer to use a different parameter name:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d1f8bded2e5a90dc454414de9062b9aff8f62143" translate="yes" xml:space="preserve">
          <source>Or you could supply the JSON by using a command line argument:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d7918b0eb3e799365ad731b9e48757a8be33b3fb" translate="yes" xml:space="preserve">
          <source>Oracle UCP specific settings bound to an instance of Oracle UCP's PoolDataSource</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1d75774c0f96b6ee44eb6643c9fea71b50b90ea8" translate="yes" xml:space="preserve">
          <source>Order</source>
          <target state="translated">Order</target>
        </trans-unit>
        <trans-unit id="04cf3a0ab49d60e8ed01ed51c32e5b6c824e5f3b" translate="yes" xml:space="preserve">
          <source>Order of the template resolver in the chain. By default, the template resolver is first in the chain. Order start at 1 and should only be set if you have defined additional &quot;TemplateResolver&quot; beans.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="47a125964abc7e31c919bf58b1053f77c6ed704f" translate="yes" xml:space="preserve">
          <source>Other &amp;ldquo;Starters&amp;rdquo; provide dependencies that you are likely to need when developing a specific type of application. Since we are developing a web application, we add a &lt;code&gt;spring-boot-starter-web&lt;/code&gt; dependency. Before that, we can look at what we currently have by running the following command:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dfab54f44c448ca8bf62e759cec65ec258987831" translate="yes" xml:space="preserve">
          <source>Otherwise, &lt;code&gt;AnnotationConfigApplicationContext&lt;/code&gt; is used</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1b8e479501b1fe73ee5f5db14bd276ef4c92e8e3" translate="yes" xml:space="preserve">
          <source>Otherwise, Spring Boot tries to find the Hazelcast configuration from the default locations: &lt;code&gt;hazelcast.xml&lt;/code&gt; in the working directory or at the root of the classpath, or a &lt;code&gt;.yaml&lt;/code&gt; counterpart in the same locations. We also check if the &lt;code&gt;hazelcast.config&lt;/code&gt; system property is set. See the &lt;a href=&quot;https://docs.hazelcast.org/docs/latest/manual/html-single/&quot;&gt;Hazelcast documentation&lt;/a&gt; for more details.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1c7987967e8ce0f21095d9522ae6c5d028216694" translate="yes" xml:space="preserve">
          <source>Otherwise, if &lt;a href=&quot;https://commons.apache.org/proper/commons-dbcp/&quot;&gt;Commons DBCP2&lt;/a&gt; is available, we use it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b6fc1ca003bfae121e1b260b94a23db5823ad7b5" translate="yes" xml:space="preserve">
          <source>Otherwise, if the Tomcat pooling &lt;code&gt;DataSource&lt;/code&gt; is available, we use it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="df56f52fbe70b9a52b68370c8f8a47848599027e" translate="yes" xml:space="preserve">
          <source>Otherwise, the next logical step is to read &lt;em&gt;&lt;a href=&quot;using-spring-boot#using-boot&quot;&gt;using-spring-boot.html&lt;/a&gt;&lt;/em&gt;. If you are really impatient, you could also jump ahead and read about &lt;em&gt;&lt;a href=&quot;spring-boot-features#boot-features&quot;&gt;Spring Boot features&lt;/a&gt;&lt;/em&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="721d7d9a38b8e1e5d83246ae3a5fa5d2b9967d20" translate="yes" xml:space="preserve">
          <source>Otherwise, you can continue on, to read about &lt;a href=&quot;deployment#deployment&quot;&gt;&amp;lsquo;deployment options&amp;rsquo;&lt;/a&gt; or jump ahead for some in-depth information about Spring Boot&amp;rsquo;s &lt;em&gt;&lt;a href=&quot;build-tool-plugins#build-tool-plugins&quot;&gt;build tool plugins&lt;/a&gt;&lt;/em&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ec4bd97c3569de0fa1d8f1253187edf5ce58880b" translate="yes" xml:space="preserve">
          <source>Our application can now be started using &lt;code&gt;--spring.profiles.active=production&lt;/code&gt; to active the &lt;code&gt;production&lt;/code&gt;, &lt;code&gt;proddb&lt;/code&gt; and &lt;code&gt;prodmq&lt;/code&gt; profiles in one hit.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9d052ac0353c5dc8369f0f4940140295e13cd7bb" translate="yes" xml:space="preserve">
          <source>Our primary goals are:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="231d0186aecd61c39a5ead79a2400954506c6d9a" translate="yes" xml:space="preserve">
          <source>Override and set</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="13e736a47a5365f31706ab86ff89ffb27ffe47a7" translate="yes" xml:space="preserve">
          <source>Override the Cloud Platform auto-detection.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6b2422aca1e8b38c759a080d3138ee6a49ff89b5" translate="yes" xml:space="preserve">
          <source>Overriding the error page with your own depends on the templating technology that you use. For example, if you use Thymeleaf, you can add an &lt;code&gt;error.html&lt;/code&gt; template. If you use FreeMarker, you can add an &lt;code&gt;error.ftlh&lt;/code&gt; template. In general, you need a &lt;code&gt;View&lt;/code&gt; that resolves with a name of &lt;code&gt;error&lt;/code&gt; or a &lt;code&gt;@Controller&lt;/code&gt; that handles the &lt;code&gt;/error&lt;/code&gt; path. Unless you replaced some of the default configuration, you should find a &lt;code&gt;BeanNameViewResolver&lt;/code&gt; in your &lt;code&gt;ApplicationContext&lt;/code&gt;, so a &lt;code&gt;@Bean&lt;/code&gt; named &lt;code&gt;error&lt;/code&gt; would be one way of doing that. See &lt;a href=&quot;https://github.com/spring-projects/spring-boot/tree/v2.4.0/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/servlet/error/ErrorMvcAutoConfiguration.java&quot;&gt;&lt;code&gt;ErrorMvcAutoConfiguration&lt;/code&gt;&lt;/a&gt; for more options.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0efc2e6be4c23b9a513d7ce0dcff8ed80e8912e7" translate="yes" xml:space="preserve">
          <source>Overview</source>
          <target state="translated">Overview</target>
        </trans-unit>
        <trans-unit id="d613d88cb2d86f484f6f82d44ac1fc60722abe20" translate="yes" xml:space="preserve">
          <source>PDF</source>
          <target state="translated">PDF</target>
        </trans-unit>
        <trans-unit id="e07f24b1c7828abaf63789683f964df8fe8fff55" translate="yes" xml:space="preserve">
          <source>Packaged</source>
          <target state="translated">Packaged</target>
        </trans-unit>
        <trans-unit id="0d75735d421f6f19c544bb6c6eaaa8d7aae13b18" translate="yes" xml:space="preserve">
          <source>Page index parameter name.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1f2cf4ae834f0c628349e18b20e8f08efed413a9" translate="yes" xml:space="preserve">
          <source>Page size parameter name.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f699f295e5ae4ac633cfa18437fed38d028b3fdb" translate="yes" xml:space="preserve">
          <source>Parameter</source>
          <target state="translated">Parameter</target>
        </trans-unit>
        <trans-unit id="d30d052ce036d32e9ae0b7578fc5eee3a2823c82" translate="yes" xml:space="preserve">
          <source>Part 1</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5a01db6f2d606f2a701b77fbab0924cc899be0e3" translate="yes" xml:space="preserve">
          <source>Part 2</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="18c875c3f311afc1bde03cdce5b76fccfb218d6c" translate="yes" xml:space="preserve">
          <source>Password for authenticating with sentinel(s).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5ab7d10b6e698bddaef020c959f959f4e13235c1" translate="yes" xml:space="preserve">
          <source>Password for the default user name.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5a8338303529cab96f9445a769d56015fb0163c5" translate="yes" xml:space="preserve">
          <source>Password of the database to execute DDL scripts (if different).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0cfab668ae507cdd4efa220cfad7ef6acb749ffd" translate="yes" xml:space="preserve">
          <source>Password of the database to execute DML scripts (if different).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a71b5b9871dd3a9baf2238220e2b754284c072d4" translate="yes" xml:space="preserve">
          <source>Password of the private key in the key store file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a64c4d21903b5e259ea628ecc647cfc3a65e4be2" translate="yes" xml:space="preserve">
          <source>Password to access preferences and tools of H2 Console.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1bc64303c06fb7a93fcb010078e62183afcf4309" translate="yes" xml:space="preserve">
          <source>Password to use to connect to the JMS provider.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9a76a6fb440c4af66058671ab82a848d04ecb449" translate="yes" xml:space="preserve">
          <source>Password used to access the key in the key store.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7d0c15c895dc556129d99bc9ac4ac3067d39e56e" translate="yes" xml:space="preserve">
          <source>Password used to access the key store.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="744e5960da55cbb3be50d6581808fd3c5b725423" translate="yes" xml:space="preserve">
          <source>Password used to access the trust store.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="519e39132bb98418cc0483cc446ccf5f3c8dcffe" translate="yes" xml:space="preserve">
          <source>Path</source>
          <target state="translated">Path</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
