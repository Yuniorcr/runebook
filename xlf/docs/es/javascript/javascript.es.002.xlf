<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="es" datatype="htmlbody" original="javascript">
    <body>
      <group id="javascript">
        <trans-unit id="80c66b70ed4adf877ab1a2d6a8178d7239561803" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;var&gt;padString&lt;/var&gt;&lt;/code&gt;Optional</source>
          <target state="translated">&lt;code&gt;&lt;var&gt;padString&lt;/var&gt;&lt;/code&gt;Optional</target>
        </trans-unit>
        <trans-unit id="cf744b5734cc5f0eb4f45d46f7788146fdf0fa7e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;var&gt;param&lt;/var&gt;&lt;/code&gt;Optional</source>
          <target state="translated">&lt;code&gt;&lt;var&gt;param&lt;/var&gt;&lt;/code&gt;Optional</target>
        </trans-unit>
        <trans-unit id="dbaff4e9059faa844deed1fadc0d4bdd053cddad" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;var&gt;paramN&lt;/var&gt;&lt;/code&gt;Optional</source>
          <target state="translated">&lt;code&gt;&lt;var&gt;paramN&lt;/var&gt;&lt;/code&gt;Optional</target>
        </trans-unit>
        <trans-unit id="b875f2e8f3a682241863768a15396d29ff4cbcb9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;var&gt;position&lt;/var&gt;&lt;/code&gt;Optional</source>
          <target state="translated">&lt;code&gt;&lt;var&gt;position&lt;/var&gt;&lt;/code&gt;Optional</target>
        </trans-unit>
        <trans-unit id="b4340d3632367639932797569f514c52ee6ef7e2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;var&gt;propertiesObject&lt;/var&gt;&lt;/code&gt;Optional</source>
          <target state="translated">&lt;code&gt;&lt;var&gt;propertiesObject&lt;/var&gt;&lt;/code&gt;Optional</target>
        </trans-unit>
        <trans-unit id="47f63b0ecbf4c1949c5923477317e35a6c26afc0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;var&gt;radix&lt;/var&gt;&lt;/code&gt;&lt;var&gt; Optional&lt;/var&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e89e8bbf5630d89a83126f71d8f2d8098cb7ec50" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;var&gt;radix&lt;/var&gt;&lt;/code&gt;Optional</source>
          <target state="translated">&lt;code&gt;&lt;var&gt;radix&lt;/var&gt;&lt;/code&gt;Optional</target>
        </trans-unit>
        <trans-unit id="136e6687f4ac3dc79f1f54d88128877eee1c31cf" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;var&gt;receiver&lt;/var&gt;&lt;/code&gt;Optional</source>
          <target state="translated">&lt;code&gt;&lt;var&gt;receiver&lt;/var&gt;&lt;/code&gt;Optional</target>
        </trans-unit>
        <trans-unit id="adb14389c861d5347ad7002fd23e313e1fc1ce9d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;var&gt;regexp&lt;/var&gt;&lt;/code&gt; (pattern)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c559c98a721a6b317999a6592f2378dd8ba74f9c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;var&gt;replacer&lt;/var&gt;&lt;/code&gt;Optional</source>
          <target state="translated">&lt;code&gt;&lt;var&gt;replacer&lt;/var&gt;&lt;/code&gt;Optional</target>
        </trans-unit>
        <trans-unit id="e113849c2c7c4c4615caea5690d0724f6a72ff8f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;var&gt;reviver&lt;/var&gt;&lt;/code&gt;Optional</source>
          <target state="translated">&lt;code&gt;&lt;var&gt;reviver&lt;/var&gt;&lt;/code&gt;Optional</target>
        </trans-unit>
        <trans-unit id="77414fb25ca96726e4e64f7e3fface0bacbc8363" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;var&gt;rv&lt;/var&gt;&lt;/code&gt;Optional</source>
          <target state="translated">&lt;code&gt;&lt;var&gt;rv&lt;/var&gt;&lt;/code&gt;Optional</target>
        </trans-unit>
        <trans-unit id="a2fa18a39208e35b6324f9f740f6d6da8776004f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;var&gt;second&lt;/var&gt;&lt;/code&gt;Optional</source>
          <target state="translated">&lt;code&gt;&lt;var&gt;second&lt;/var&gt;&lt;/code&gt;Optional</target>
        </trans-unit>
        <trans-unit id="de19a8f13705169ffcc5bb782d0a2fea6de31575" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;var&gt;seconds&lt;/var&gt;&lt;/code&gt;Optional</source>
          <target state="translated">&lt;code&gt;&lt;var&gt;seconds&lt;/var&gt;&lt;/code&gt;Optional</target>
        </trans-unit>
        <trans-unit id="698ab8bf520d6f74d36175b2a1293f7a0e7ac702" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;var&gt;separator&lt;/var&gt;&lt;/code&gt;Optional</source>
          <target state="translated">&lt;code&gt;&lt;var&gt;separator&lt;/var&gt;&lt;/code&gt;Optional</target>
        </trans-unit>
        <trans-unit id="411991c0297117b1191ef5806cb31716cf9d935b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;var&gt;space&lt;/var&gt;&lt;/code&gt;Optional</source>
          <target state="translated">&lt;code&gt;&lt;var&gt;space&lt;/var&gt;&lt;/code&gt;Optional</target>
        </trans-unit>
        <trans-unit id="97f39fb5a07ed5c6d57ddd7f5e9cbe3050858890" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;var&gt;start&lt;/var&gt;&lt;/code&gt;Optional</source>
          <target state="translated">&lt;code&gt;&lt;var&gt;start&lt;/var&gt;&lt;/code&gt;Optional</target>
        </trans-unit>
        <trans-unit id="935626cb5f82b67a00479ddfcb3d73c9c600e714" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;var&gt;statements&lt;/var&gt;&lt;/code&gt;Optional</source>
          <target state="translated">&lt;code&gt;&lt;var&gt;statements&lt;/var&gt;&lt;/code&gt;Optional</target>
        </trans-unit>
        <trans-unit id="90bdb81bd95e1b87e16d7931dee8e92e65540737" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;var&gt;thisArg&lt;/var&gt;&lt;/code&gt;Optional</source>
          <target state="translated">&lt;code&gt;&lt;var&gt;thisArg&lt;/var&gt;&lt;/code&gt;Optional</target>
        </trans-unit>
        <trans-unit id="b990f7f14b3f9275bf56b2a3619341a93601f08b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;var&gt;timeout&lt;/var&gt;&lt;/code&gt;Optional</source>
          <target state="translated">&lt;code&gt;&lt;var&gt;timeout&lt;/var&gt;&lt;/code&gt;Optional</target>
        </trans-unit>
        <trans-unit id="b692d409ec1d74a4f752d87c2a47106c09b4ba56" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;var&gt;unregisterToken&lt;/var&gt;&lt;/code&gt;Optional</source>
          <target state="translated">&lt;code&gt;&lt;var&gt;unregisterToken&lt;/var&gt;&lt;/code&gt;Optional</target>
        </trans-unit>
        <trans-unit id="2ab61063f348721ba23b3ff8ae5da7084d3b4c81" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;var&gt;value1&lt;/var&gt;&lt;/code&gt;, &lt;code&gt;&lt;var&gt;value2&lt;/var&gt;&lt;/code&gt;, &amp;hellip;, &lt;code&gt;&lt;var&gt;valueN&lt;/var&gt;&lt;/code&gt;Optional</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2c54dc9d883495147152bab4c07da4dea0d0034c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;var&gt;value&lt;/var&gt;&lt;/code&gt;Optional</source>
          <target state="translated">&lt;code&gt;&lt;var&gt;value&lt;/var&gt;&lt;/code&gt;Optional</target>
        </trans-unit>
        <trans-unit id="151bc08f156add899f754bd9fac9c13570008bea" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;var&gt;value&lt;strong&gt;N&lt;/strong&gt;&lt;/var&gt;&lt;/code&gt;Optional</source>
          <target state="translated">&lt;code&gt;&lt;var&gt;value&lt;strong&gt;N&lt;/strong&gt;&lt;/var&gt;&lt;/code&gt;Optional</target>
        </trans-unit>
        <trans-unit id="fdfa2c1615056dc7f5284e9a9c87ef635a49d894" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;var&gt;var1&lt;/var&gt;&lt;/code&gt;, &lt;code&gt;&lt;var&gt;var2&lt;/var&gt;&lt;/code&gt;, &amp;hellip;, &lt;code&gt;&lt;var&gt;varN&lt;/var&gt;&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="59bdf65c54f0b04a57f78169576da2e120829c72" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;AggregateError()&lt;/code&gt; constructor</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="78e4667c760542b31536b322388764e5a3deb263" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Array()&lt;/code&gt; constructor</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fa93edc86cd512039bb90ac993dd482f54867757" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Array.from()&lt;/code&gt; has an optional parameter &lt;code&gt;&lt;var&gt;mapFn&lt;/var&gt;&lt;/code&gt;, which allows you to execute a &lt;a href=&quot;map&quot;&gt;&lt;code&gt;map()&lt;/code&gt;&lt;/a&gt; function on each element of the array being created.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3d59c97bdadc730c2f8a1f173bad8082725d463e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Array.from()&lt;/code&gt; has an optional parameter &lt;code&gt;mapFn&lt;/code&gt;, which allows you to execute a &lt;a href=&quot;map&quot;&gt;&lt;code&gt;map&lt;/code&gt;&lt;/a&gt; function on each element of the array (or subclass object) that is being created. More clearly,&lt;code&gt; Array.from(obj, mapFn, thisArg)&lt;/code&gt; has the same result as &lt;code&gt;Array.from(obj).map(mapFn, thisArg)&lt;/code&gt;, except that it does not create an intermediate array. This is especially important for certain array subclasses, like &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Typed_arrays&quot;&gt;typed arrays&lt;/a&gt;, since the intermediate array would necessarily have values truncated to fit into the appropriate type.</source>
          <target state="translated">&lt;code&gt;Array.from()&lt;/code&gt; tiene un par&amp;aacute;metro opcional &lt;code&gt;mapFn&lt;/code&gt; , que le permite ejecutar una funci&amp;oacute;n de &lt;a href=&quot;map&quot;&gt; &lt;code&gt;map&lt;/code&gt; a&lt;/a&gt; en cada elemento de la matriz (u objeto de subclase) que se est&amp;aacute; creando. M&amp;aacute;s claramente, &lt;code&gt; Array.from(obj, mapFn, thisArg)&lt;/code&gt; tiene el mismo resultado que &lt;code&gt;Array.from(obj).map(mapFn, thisArg)&lt;/code&gt; , excepto que no crea una matriz intermedia. Esto es especialmente importante para ciertas subclases de matrices, como &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Typed_arrays&quot;&gt;matrices con tipo&lt;/a&gt; , ya que la matriz intermedia necesariamente tendr&amp;iacute;a valores truncados para encajar en el tipo apropiado.</target>
        </trans-unit>
        <trans-unit id="cd851f0e36b0c5828db73c916fcecf4764b0b2b1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Array.from()&lt;/code&gt; lets you create &lt;code&gt;Array&lt;/code&gt;s from:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7b83e72855e03f8e15622061339b99f1fb2a68b7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Array.from()&lt;/code&gt; lets you create &lt;code&gt;Arrays&lt;/code&gt; from:</source>
          <target state="translated">&lt;code&gt;Array.from()&lt;/code&gt; permite crear &lt;code&gt;Arrays&lt;/code&gt; partir de:</target>
        </trans-unit>
        <trans-unit id="cc49ae06be90c36c2060868e90221d09b7b76464" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Array.from()&lt;/code&gt; proposal</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c3f440a263ff0304a8fb3bf0d6b426450864e1af" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Array.from()&lt;/code&gt; was added to the ECMA-262 standard in the 6&lt;sup&gt;th&lt;/sup&gt; Edition (ES2015). As such, it may not be present in other implementations of the standard.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aacf1b205604b1c760dff80cc7cc706d14f66025" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Array.from&lt;/code&gt; was added to the ECMA-262 standard in the 6th edition (ES2015); as such it may not be present in other implementations of the standard. You can work around this by inserting the following code at the beginning of your scripts, allowing use of &lt;code&gt;Array.from&lt;/code&gt; in implementations that don't natively support it. This algorithm is exactly the one specified in ECMA-262, 6th edition, assuming &lt;code&gt;Object&lt;/code&gt; and &lt;code&gt;TypeError&lt;/code&gt; have their original values and that &lt;code&gt;callback.call&lt;/code&gt; evaluates to the original value of &lt;a href=&quot;../function/call&quot;&gt;&lt;code&gt;Function.prototype.call&lt;/code&gt;&lt;/a&gt;. In addition, since true iterables can not be polyfilled, this implementation does not support generic iterables as defined in the 6th edition of ECMA-262.</source>
          <target state="translated">&lt;code&gt;Array.from&lt;/code&gt; se agreg&amp;oacute; al est&amp;aacute;ndar ECMA-262 en la sexta edici&amp;oacute;n (ES2015); como tal, puede que no est&amp;eacute; presente en otras implementaciones del est&amp;aacute;ndar. Puede &lt;code&gt;Array.from&lt;/code&gt; esto insertando el siguiente c&amp;oacute;digo al principio de sus scripts, permitiendo el uso de Array.from en implementaciones que no lo admiten de forma nativa. Este algoritmo es exactamente el especificado en ECMA-262, sexta edici&amp;oacute;n, asumiendo que &lt;code&gt;Object&lt;/code&gt; y &lt;code&gt;TypeError&lt;/code&gt; tienen sus valores originales y que &lt;code&gt;callback.call&lt;/code&gt; se eval&amp;uacute;a como el valor original de &lt;a href=&quot;../function/call&quot;&gt; &lt;code&gt;Function.prototype.call&lt;/code&gt; &lt;/a&gt; . Adem&amp;aacute;s, dado que los iterables verdaderos no se pueden rellenar, esta implementaci&amp;oacute;n no admite iterables gen&amp;eacute;ricos como se define en la sexta edici&amp;oacute;n de ECMA-262.</target>
        </trans-unit>
        <trans-unit id="484c178eaca0332ee281f8ae6f56fc81c994c4f3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Array.of()&lt;/code&gt; polyfill</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ec6c47097b8c24deab5e849ae9e47d7c9581b038" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Array.prototype.flat&lt;/code&gt; proposal</source>
          <target state="translated">&lt;code&gt;Array.prototype.flat&lt;/code&gt; Propuesta array.prototype.flat</target>
        </trans-unit>
        <trans-unit id="9e043e1e945b38085cd4df39a0939f19fb692f1a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Array.prototype.flatMap&lt;/code&gt; proposal</source>
          <target state="translated">&lt;code&gt;Array.prototype.flatMap&lt;/code&gt; Propuesta de Array.prototype.flatMap</target>
        </trans-unit>
        <trans-unit id="eefe0484b4e9e3eb37a23bbb7cfe53b96bc27e02" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Array&lt;/code&gt; generic methods</source>
          <target state="translated">&lt;code&gt;Array&lt;/code&gt; m&amp;eacute;todos gen&amp;eacute;ricos</target>
        </trans-unit>
        <trans-unit id="777b5e93e6f7eecc4a209c11edb0a5c33a80938d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Array&lt;/code&gt; instances</source>
          <target state="translated">&lt;code&gt;Array&lt;/code&gt; Instancias de matriz</target>
        </trans-unit>
        <trans-unit id="2f761b089e0d26f1c9a36ed3bab8d642e0838be2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Array&lt;/code&gt; methods can be used on rest parameters, but not on the &lt;code&gt;arguments&lt;/code&gt; object:</source>
          <target state="translated">&lt;code&gt;Array&lt;/code&gt; m&amp;eacute;todos de matriz se pueden usar en par&amp;aacute;metros de descanso, pero no en el objeto de &lt;code&gt;arguments&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="10cd8da3bad19995d49c960b3a22ef2d361221e3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ArrayBuffer()&lt;/code&gt; constructor</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2726867c3e9e18a2a823093562ddf229d78e0b90" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ArrayBuffer()&lt;/code&gt; without &lt;code&gt;new&lt;/code&gt; throws</source>
          <target state="translated">&lt;code&gt;ArrayBuffer()&lt;/code&gt; sin &lt;code&gt;new&lt;/code&gt; lanzamientos</target>
        </trans-unit>
        <trans-unit id="8263ee65f86b9f6d04505d04f039509f768237ed" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ArrayBuffer&lt;/code&gt; instances inherit from &lt;code&gt;ArrayBuffer.prototype&lt;/code&gt;. As with all constructors, you can change the constructor's prototype object to make changes to all &lt;code&gt;ArrayBuffer&lt;/code&gt; instances.</source>
          <target state="translated">&lt;code&gt;ArrayBuffer&lt;/code&gt; instancias de ArrayBuffer heredan de &lt;code&gt;ArrayBuffer.prototype&lt;/code&gt; . Como ocurre con todos los constructores, puede cambiar el objeto prototipo del constructor para realizar cambios en todas &lt;code&gt;ArrayBuffer&lt;/code&gt; instancias de ArrayBuffer .</target>
        </trans-unit>
        <trans-unit id="c5de6db96e74fd23743879499ea7553cb9115c75" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;AsyncFunction&lt;/code&gt; instances</source>
          <target state="translated">&lt;code&gt;AsyncFunction&lt;/code&gt; Instancias de AsyncFunction</target>
        </trans-unit>
        <trans-unit id="48a07b736306d4c32041dab045bbf0131a54796c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;AsyncFunction&lt;/code&gt; instances inherit methods and properties from &lt;a href=&quot;asyncfunction/prototype&quot;&gt;&lt;code&gt;AsyncFunction.prototype&lt;/code&gt;&lt;/a&gt;. As with all constructors, you can change the constructor's prototype object to make changes to all &lt;code&gt;AsyncFunction&lt;/code&gt; instances.</source>
          <target state="translated">&lt;code&gt;AsyncFunction&lt;/code&gt; instancias de AsyncFunction heredan m&amp;eacute;todos y propiedades de &lt;a href=&quot;asyncfunction/prototype&quot;&gt; &lt;code&gt;AsyncFunction.prototype&lt;/code&gt; &lt;/a&gt; . Al igual que con todos los constructores, puede cambiar el objeto prototipo del constructor para realizar cambios en todas &lt;code&gt;AsyncFunction&lt;/code&gt; instancias de AsyncFunction .</target>
        </trans-unit>
        <trans-unit id="0d75b651d3045a0e979356ed03f57470beaa6877" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;AsyncFunction&lt;/code&gt; prototype object</source>
          <target state="translated">&lt;code&gt;AsyncFunction&lt;/code&gt; prototipo AsyncFunction</target>
        </trans-unit>
        <trans-unit id="297651bcd9f16b2735f0d452c33eac8d45b2af12" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;BigInt()&lt;/code&gt; constructor</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="35e3e83255970466eb13327b34b20ec186746cf1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;BigInt64Array()&lt;/code&gt; constructor</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b39f0e77f3dc1162c9d6c043f66002f8c0953fdd" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;BigInt&lt;/code&gt; is a built-in object that provides a way to represent whole numbers larger than 2&lt;sup&gt;53&lt;/sup&gt; - 1, which is the largest number JavaScript can reliably represent with the &lt;a href=&quot;number&quot;&gt;&lt;code&gt;Number&lt;/code&gt;&lt;/a&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/Primitive&quot;&gt;primitive&lt;/a&gt; and represented by the &lt;a href=&quot;number/max_safe_integer&quot;&gt;&lt;code&gt;Number.MAX_SAFE_INTEGER&lt;/code&gt;&lt;/a&gt; constant. &lt;code&gt;BigInt&lt;/code&gt; can be used for arbitrarily large integers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6ef634646172e8f510647d34d7a95d50f2d42aba" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;BigInt&lt;/code&gt; is similar to &lt;a href=&quot;number&quot;&gt;&lt;code&gt;Number&lt;/code&gt;&lt;/a&gt; in some ways, but also differs in a few key matters &amp;mdash; it cannot be used with methods in the built-in &lt;a href=&quot;math&quot;&gt;&lt;code&gt;Math&lt;/code&gt;&lt;/a&gt; object and cannot be mixed with instances of &lt;code&gt;Number&lt;/code&gt; in operations; they must be coerced to the same type. Be careful coercing values back and forth, however, as the precision of a &lt;code&gt;BigInt&lt;/code&gt; may be lost when it is coerced to a &lt;code&gt;Number&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6e9b941899fd04804d14c4c4d44fc484219324c4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;BigUint64Array()&lt;/code&gt; constructor</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="acf372eec89253316b4f010d062dd3edb7b528de" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Boolean()&lt;/code&gt; constructor</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8d07b2881f61980d053fa49bd72d6adf2a300a0f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Boolean&lt;/code&gt; instances</source>
          <target state="translated">&lt;code&gt;Boolean&lt;/code&gt; Instancias booleanas</target>
        </trans-unit>
        <trans-unit id="d072101dbac2b43c09905ca78b189abdf01e11d9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Boolean&lt;/code&gt;: return &lt;code&gt;true&lt;/code&gt; only if operands are both &lt;code&gt;true&lt;/code&gt; or both &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="540d44d7b6abb05e3a882a9dc61d455486f80ef3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Collator()&lt;/code&gt; constructor</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="68f175b8e9a45bfc0aea10e7fab814a9142c7e48" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Collator&lt;/code&gt; instances</source>
          <target state="translated">&lt;code&gt;Collator&lt;/code&gt; Instancias de clasificador</target>
        </trans-unit>
        <trans-unit id="8969999a0848aceecf88611ba845cb35284592b3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Collator&lt;/code&gt; instances inherit the following methods from their prototype:</source>
          <target state="translated">&lt;code&gt;Collator&lt;/code&gt; instancias de clasificador heredan los siguientes m&amp;eacute;todos de su prototipo:</target>
        </trans-unit>
        <trans-unit id="e6d43a03d8668cc6f704bfff0edae5199b26f163" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Collator&lt;/code&gt; instances inherit the following properties from their prototype:</source>
          <target state="translated">&lt;code&gt;Collator&lt;/code&gt; instancias de intercalador heredan las siguientes propiedades de su prototipo:</target>
        </trans-unit>
        <trans-unit id="4b070d477b2ebb8a0be2177fe95c405d2bc41c66" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;CompileError()&lt;/code&gt; constructor</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e607c3cfd314f305c1ac396647ed4c034f8009ab" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Configurable&lt;/code&gt;: If this attribute set to &lt;code&gt;false&lt;/code&gt;, any attempts to delete the property or change its attributes (&lt;code&gt;Writable&lt;/code&gt;, &lt;code&gt;Configurable&lt;/code&gt;, or &lt;code&gt;Enumerable&lt;/code&gt;) will fail.</source>
          <target state="translated">&lt;code&gt;Configurable&lt;/code&gt; : si este atributo se establece en &lt;code&gt;false&lt;/code&gt; , cualquier intento de eliminar la propiedad o cambiar sus atributos ( &lt;code&gt;Writable&lt;/code&gt; , &lt;code&gt;Configurable&lt;/code&gt; o &lt;code&gt;Enumerable&lt;/code&gt; ) fallar&amp;aacute;.</target>
        </trans-unit>
        <trans-unit id="509e45c99ca79cedbed833aeb08b235e3e1de69d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Cross-Origin-Embedder-Policy&lt;/code&gt;: &lt;a href=&quot;https://github.com/whatwg/html/issues/4175&quot;&gt;whatwg/html issue #4175&lt;/a&gt;, &lt;a href=&quot;https://mikewest.github.io/corpp/&quot;&gt;draft specification&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fecf1f9ce399347b78e9108d9d6ac3325671ca77" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Cross-Origin-Opener-Policy&lt;/code&gt;: &lt;a href=&quot;https://github.com/whatwg/html/issues/3740&quot;&gt;whatwg/html issue #3740&lt;/a&gt;, &lt;a href=&quot;https://gist.github.com/annevk/6f2dd8c79c77123f39797f6bdac43f3e&quot;&gt;draft specification&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d1de323ab773726b9d26d7b405d4e48103329945" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Cross-Origin-Resource-Policy&lt;/code&gt;: &lt;a href=&quot;https://fetch.spec.whatwg.org/#cross-origin-resource-policy-header&quot;&gt;standardized in Fetch&lt;/a&gt;, new &lt;code&gt;cross-origin&lt;/code&gt; value is part of the &lt;code&gt;Cross-Origin-Embedder-Policy&lt;/code&gt; effort.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="02dd5a5456fdcb4cd8cefb5e0ff19ea8dcf76939" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;DataView()&lt;/code&gt; constructor</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d2182fa032dd0647de3a022d004b97f3076b6277" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;DataView()&lt;/code&gt; without &lt;code&gt;new&lt;/code&gt; throws</source>
          <target state="translated">&lt;code&gt;DataView()&lt;/code&gt; sin &lt;code&gt;new&lt;/code&gt; lanzamientos</target>
        </trans-unit>
        <trans-unit id="d822a111d65fb53764fb1ac0f34f7d9b8a8fa4c9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;DataView&lt;/code&gt; instances inherit from &lt;code&gt;DataView.prototype&lt;/code&gt;. As with all constructors, you can change the constructor's prototype object to make changes to all &lt;code&gt;DataView&lt;/code&gt; instances.</source>
          <target state="translated">&lt;code&gt;DataView&lt;/code&gt; instancias de DataView heredan de &lt;code&gt;DataView.prototype&lt;/code&gt; . Como con todos los constructores, puede cambiar el objeto prototipo del constructor para realizar cambios en todas las instancias de &lt;code&gt;DataView&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="a930ff9fd414144d4df13f34901efd823e84708f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Date()&lt;/code&gt; constructor</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1e5e74fe992634313fd3245f20ae30781bf02a4f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Date.UTC()&lt;/code&gt; returns a time value as a number instead of creating a &lt;a href=&quot;../date&quot;&gt;&lt;code&gt;Date&lt;/code&gt;&lt;/a&gt; object.</source>
          <target state="translated">&lt;code&gt;Date.UTC()&lt;/code&gt; devuelve un valor de hora como un n&amp;uacute;mero en lugar de crear un objeto &lt;a href=&quot;../date&quot;&gt; &lt;code&gt;Date&lt;/code&gt; &lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="2d895976f6984ad8ba88a5b531f9aaa210133f07" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Date.UTC()&lt;/code&gt; uses universal time instead of the local time.</source>
          <target state="translated">&lt;code&gt;Date.UTC()&lt;/code&gt; usa la hora universal en lugar de la hora local.</target>
        </trans-unit>
        <trans-unit id="8ffbd1531504354a4ccd821b2ea0b71f9870f208" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Date.UTC&lt;/code&gt; with fewer than two arguments</source>
          <target state="translated">&lt;code&gt;Date.UTC&lt;/code&gt; con menos de dos argumentos</target>
        </trans-unit>
        <trans-unit id="6a7d4834eaee9153306599decf46f6cde4af98eb" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Date&lt;/code&gt;: &lt;a href=&quot;../date/tolocalestring&quot;&gt;&lt;code&gt;Date.prototype.toLocaleString()&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">&lt;code&gt;Date&lt;/code&gt; : &lt;a href=&quot;../date/tolocalestring&quot;&gt; &lt;code&gt;Date.prototype.toLocaleString()&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="e7ceb6aa1368107082e4008d3e5553ed017c115b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;DateTimeFormat()&lt;/code&gt; constructor</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d943e321cb61d87166a07b28484c63d042e41fdb" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;DateTimeFormat&lt;/code&gt; instances</source>
          <target state="translated">&lt;code&gt;DateTimeFormat&lt;/code&gt; Instancias de DateTimeFormat</target>
        </trans-unit>
        <trans-unit id="99b0cb16d3be137f09c76352c9c9b44d578dc0cf" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;DateTimeFormat&lt;/code&gt; instances inherit the following methods from their prototype:</source>
          <target state="translated">&lt;code&gt;DateTimeFormat&lt;/code&gt; instancias de DateTimeFormat heredan los siguientes m&amp;eacute;todos de su prototipo:</target>
        </trans-unit>
        <trans-unit id="d5b069e887c361bd2f94a91ad252b91396478f23" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;DateTimeFormat&lt;/code&gt; instances inherit the following properties from their prototype:</source>
          <target state="translated">&lt;code&gt;DateTimeFormat&lt;/code&gt; instancias de DateTimeFormat heredan las siguientes propiedades de su prototipo:</target>
        </trans-unit>
        <trans-unit id="d20fe34f0beb8b8de582c29da21e844218d3da5b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;DateTimeFormat&lt;/code&gt; outputs localized, opaque strings that cannot be manipulated directly:</source>
          <target state="translated">&lt;code&gt;DateTimeFormat&lt;/code&gt; genera cadenas localizadas y opacas que no se pueden manipular directamente:</target>
        </trans-unit>
        <trans-unit id="ed306f597543d4fc0d32a5c1b7efc144effce7ab" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;DisplayNames()&lt;/code&gt; constructor</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0ba012848145dfb3e00a64ab8a1a1b01bda7cd9a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Enumerable&lt;/code&gt;: If this attribute set to &lt;code&gt;true&lt;/code&gt;, the property will be iterated over during &lt;a href=&quot;../../statements/for&quot;&gt;for&lt;/a&gt; or &lt;a href=&quot;../../statements/for...in&quot;&gt;for..in&lt;/a&gt; loops.</source>
          <target state="translated">&lt;code&gt;Enumerable&lt;/code&gt; : si este atributo se establece en &lt;code&gt;true&lt;/code&gt; , la propiedad se &lt;a href=&quot;../../statements/for...in&quot;&gt;iterar&amp;aacute;&lt;/a&gt; durante los bucles &lt;a href=&quot;../../statements/for&quot;&gt;for&lt;/a&gt; o for..in .</target>
        </trans-unit>
        <trans-unit id="daf8e9eaee06685c5a8525a3e10b9a03f47fd7aa" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Error()&lt;/code&gt; constructor</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e35d802d68aecf81fc1e632418dffd9d40bcfe32" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Error&lt;/code&gt; objects are thrown when runtime errors occur. The &lt;code&gt;Error&lt;/code&gt; object can also be used as a base object for user-defined exceptions. See below for standard built-in error types.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a96504d493844a0552638a6b3d63668e108d1118" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;EvalError()&lt;/code&gt; constructor</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="74b3ea295753fe04122fe9724d59fa583539602e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;EvalError&lt;/code&gt; is not used in the current ECMAScript specification and will thus not be thrown by the runtime. However, the object itself remains for backwards compatibility with earlier versions of the specification.</source>
          <target state="translated">&lt;code&gt;EvalError&lt;/code&gt; no se usa en la especificaci&amp;oacute;n actual de ECMAScript y, por lo tanto, el tiempo de ejecuci&amp;oacute;n no lo lanzar&amp;aacute;. Sin embargo, el objeto en s&amp;iacute; permanece por compatibilidad con versiones anteriores de la especificaci&amp;oacute;n.</target>
        </trans-unit>
        <trans-unit id="bd5e5aaef13e80a685ca5393a1fff5534e67ed2e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;FinalizationRegistry()&lt;/code&gt; constructor</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="01b31a3db5cc1557671cc61352ab0f04b0677791" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;FinalizationRegistry&lt;/code&gt; provides a way to request that a &lt;em&gt;cleanup callback&lt;/em&gt; get called at some point when an object registered with the registry has been &lt;em&gt;reclaimed&lt;/em&gt; (garbage-collected). (Cleanup callbacks are sometimes called &lt;em&gt;finalizers&lt;/em&gt;.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b75264027c4f192321170a86cf4f8ce6e383093b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Float32Array()&lt;/code&gt; constructor</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1f4c7ebe82880e1c7aafc88c303b06077f8c2279" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Float32Array()&lt;/code&gt; without &lt;code&gt;new&lt;/code&gt; throws</source>
          <target state="translated">&lt;code&gt;Float32Array()&lt;/code&gt; sin &lt;code&gt;new&lt;/code&gt; lanzamientos</target>
        </trans-unit>
        <trans-unit id="825147755d4ae78d1182392c6667a0034ed330a8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Float32Array&lt;/code&gt; prototype</source>
          <target state="translated">&lt;code&gt;Float32Array&lt;/code&gt; Prototipo Float32Array</target>
        </trans-unit>
        <trans-unit id="6c7dad1ddf6ffbb9d985d207208ded65d7814221" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Float64Array()&lt;/code&gt; constructor</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a5be141d958b11c5738b7f0086c05a707ecec667" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Float64Array()&lt;/code&gt; without &lt;code&gt;new&lt;/code&gt; throws</source>
          <target state="translated">&lt;code&gt;Float64Array()&lt;/code&gt; sin &lt;code&gt;new&lt;/code&gt; lanzamientos</target>
        </trans-unit>
        <trans-unit id="cc6a64b4726d5945d0c45c1ad156deb5a5429953" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Float64Array&lt;/code&gt; prototype</source>
          <target state="translated">&lt;code&gt;Float64Array&lt;/code&gt; Prototipo Float64Array</target>
        </trans-unit>
        <trans-unit id="3748d8fa673f84643ee9aed2186bf4a528f81d2b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Function()&lt;/code&gt; constructor</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3e8fe4115d906c4f0370de85681bd48d0ca41cfc" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Function()&lt;/code&gt; more easily allows your code to utilize the performance buttering &lt;code&gt;&quot;use strict&quot;;&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="629f54e561cd968743e0f763193b12294924cdd5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Function.prototype.toString&lt;/code&gt; revisions proposal</source>
          <target state="translated">&lt;code&gt;Function.prototype.toString&lt;/code&gt; Propuesta de revisiones de Function.prototype.toString</target>
        </trans-unit>
        <trans-unit id="1f7ba86ffe56397a130f7edf31035131471e7722" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Function&lt;/code&gt; instances</source>
          <target state="translated">&lt;code&gt;Function&lt;/code&gt; Instancias de funci&amp;oacute;n</target>
        </trans-unit>
        <trans-unit id="dd8de827fde7de38172d736f83bfe068392a40de" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Function&lt;/code&gt; instances inherit methods and properties from &lt;a href=&quot;function/prototype&quot;&gt;&lt;code&gt;Function.prototype&lt;/code&gt;&lt;/a&gt;. As with all constructors, you can change the constructor's prototype object to make changes to all &lt;code&gt;Function&lt;/code&gt; instances.</source>
          <target state="translated">&lt;code&gt;Function&lt;/code&gt; instancias de funci&amp;oacute;n heredan m&amp;eacute;todos y propiedades de &lt;a href=&quot;function/prototype&quot;&gt; &lt;code&gt;Function.prototype&lt;/code&gt; &lt;/a&gt; . Como con todos los constructores, puede cambiar el objeto prototipo del constructor para realizar cambios en todas las instancias de &lt;code&gt;Function&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="4d8dfc1810a2246457b74bdfa6b68ebdf34a5ca5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Function&lt;/code&gt; objects created with the &lt;code&gt;Function&lt;/code&gt; constructor are parsed when the function is created. This is less efficient than declaring a function with a &lt;a href=&quot;../../operators/function&quot;&gt;function expression&lt;/a&gt; or &lt;a href=&quot;../../statements/function&quot;&gt;function statement&lt;/a&gt; and calling it within your code because such functions are parsed with the rest of the code.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f7a1cf529dd10be672009eecc94907f50911b9a7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Function&lt;/code&gt; objects created with the &lt;code&gt;Function&lt;/code&gt; constructor are parsed when the function is created. This is less efficient than declaring a function with a &lt;a href=&quot;../operators/function&quot;&gt;function expression&lt;/a&gt; or &lt;a href=&quot;../statements/function&quot;&gt;function statement&lt;/a&gt; and calling it within your code because such functions are parsed with the rest of the code.</source>
          <target state="translated">&lt;code&gt;Function&lt;/code&gt; objetos de funci&amp;oacute;n creados con el constructor de &lt;code&gt;Function&lt;/code&gt; se analizan cuando se crea la funci&amp;oacute;n. Esto es menos eficiente que declarar una funci&amp;oacute;n con una &lt;a href=&quot;../operators/function&quot;&gt;expresi&amp;oacute;n de funci&amp;oacute;n&lt;/a&gt; o &lt;a href=&quot;../statements/function&quot;&gt;declaraci&amp;oacute;n de funci&amp;oacute;n&lt;/a&gt; y llamarla dentro de su c&amp;oacute;digo porque tales funciones se analizan con el resto del c&amp;oacute;digo.</target>
        </trans-unit>
        <trans-unit id="8d8b8dea2d9ce0de3f280f55b5962027b99c2877" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Function&lt;/code&gt; prototype object</source>
          <target state="translated">&lt;code&gt;Function&lt;/code&gt; Objeto prototipo de funci&amp;oacute;n</target>
        </trans-unit>
        <trans-unit id="bdc9a10c4ce3956b173f85c40bba998db4c15ee8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Generator.&lt;/code&gt;&lt;code&gt;prototype.&lt;/code&gt;&lt;code&gt;throw()&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;Generator.&lt;/code&gt;&lt;code&gt;prototype.&lt;/code&gt;&lt;code&gt;throw()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="0891d6d3590fe26a942df231ac1d800f8283921a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;GeneratorFunction&lt;/code&gt; instances</source>
          <target state="translated">&lt;code&gt;GeneratorFunction&lt;/code&gt; Instancias de GeneratorFunction</target>
        </trans-unit>
        <trans-unit id="5bba2ce005ea7df2b74168d90dfac9cb2dd446b3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;GeneratorFunction&lt;/code&gt; instances inherit methods and properties from &lt;a href=&quot;generatorfunction/prototype&quot;&gt;&lt;code&gt;GeneratorFunction.prototype&lt;/code&gt;&lt;/a&gt;. As with all constructors, you can change the constructor's prototype object to make changes to all &lt;code&gt;GeneratorFunction&lt;/code&gt; instances.</source>
          <target state="translated">&lt;code&gt;GeneratorFunction&lt;/code&gt; instancias de GeneratorFunction heredan m&amp;eacute;todos y propiedades de &lt;a href=&quot;generatorfunction/prototype&quot;&gt; &lt;code&gt;GeneratorFunction.prototype&lt;/code&gt; &lt;/a&gt; . Como ocurre con todos los constructores, puede cambiar el objeto prototipo del constructor para realizar cambios en todas las instancias de &lt;code&gt;GeneratorFunction&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="0d810624d23160371a811a024e853a9f6209db06" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;GeneratorFunction&lt;/code&gt; prototype object</source>
          <target state="translated">&lt;code&gt;GeneratorFunction&lt;/code&gt; Objeto prototipo GeneratorFunction</target>
        </trans-unit>
        <trans-unit id="58764e98c36f21b027b0ab48ca92e8e6eb2e090a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Global()&lt;/code&gt; constructor</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0d32385030ee8beec68fa3259a0cbd7cd8c4c9af" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Infinity&lt;/code&gt; is a property of the &lt;em&gt;global object&lt;/em&gt;, or in other words, a variable in global scope.</source>
          <target state="translated">&lt;code&gt;Infinity&lt;/code&gt; es una propiedad del &lt;em&gt;objeto global&lt;/em&gt; , o en otras palabras, una variable de alcance global.</target>
        </trans-unit>
        <trans-unit id="b26969c66c648bb1313da8c471ba5b7f7ca71dee" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Infinity&lt;/code&gt; is a property of the &lt;em&gt;global object&lt;/em&gt;. In other words, it is a variable in global scope.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="110f353eead031e96bb539a5bc629776ed4c5bdb" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Instance()&lt;/code&gt; constructor</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bb444c4695ab21faf84ab1b82dc4792a80161b85" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Instance&lt;/code&gt; instances</source>
          <target state="translated">&lt;code&gt;Instance&lt;/code&gt; los casos</target>
        </trans-unit>
        <trans-unit id="fbb74fca2284b340e49956d0a7c71263a00dd391" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Int16Array()&lt;/code&gt; constructor</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="956ab59565ef88e68fca36f322a871adad7e17f6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Int16Array()&lt;/code&gt; without &lt;code&gt;new&lt;/code&gt; throws</source>
          <target state="translated">&lt;code&gt;Int16Array()&lt;/code&gt; sin &lt;code&gt;new&lt;/code&gt; lanzamientos</target>
        </trans-unit>
        <trans-unit id="f36c6d867c261272f02299ebc80f0e78495d2001" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Int16Array&lt;/code&gt; prototype</source>
          <target state="translated">&lt;code&gt;Int16Array&lt;/code&gt; Prototipo Int16Array</target>
        </trans-unit>
        <trans-unit id="7244f25230b1d64ed82fca4e48ecb74ff2bd23cd" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Int32Array()&lt;/code&gt; constructor</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0201e094703e3aea7488fe2d7cb3ad8e0e7a6796" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Int32Array()&lt;/code&gt; without &lt;code&gt;new&lt;/code&gt; throws</source>
          <target state="translated">&lt;code&gt;Int32Array()&lt;/code&gt; sin &lt;code&gt;new&lt;/code&gt; lanzamientos</target>
        </trans-unit>
        <trans-unit id="c869ec7a2ce18a2b725e39385b02dfd6e348fe6e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Int32Array&lt;/code&gt; prototype</source>
          <target state="translated">&lt;code&gt;Int32Array&lt;/code&gt; Prototipo Int32Array</target>
        </trans-unit>
        <trans-unit id="2177c222e057a48cf05a04ea8aef25d1702c5d55" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Int8Array()&lt;/code&gt; constructor</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8a7df20b812af35a9900b05e2b56f8c76dc94cd2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Int8Array()&lt;/code&gt; without &lt;code&gt;new&lt;/code&gt; throws</source>
          <target state="translated">&lt;code&gt;Int8Array()&lt;/code&gt; sin &lt;code&gt;new&lt;/code&gt; lanzamientos</target>
        </trans-unit>
        <trans-unit id="d3e7af3ebd23b2d2f25c50a670dc78d2217e0095" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Int8Array&lt;/code&gt; prototype</source>
          <target state="translated">&lt;code&gt;Int8Array&lt;/code&gt; Prototipo de Int8Array</target>
        </trans-unit>
        <trans-unit id="42f5628be04b5ae2baf467371e133a19c52f8e5c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;IteratorResult&lt;/code&gt; object instead of throwing</source>
          <target state="translated">&lt;code&gt;IteratorResult&lt;/code&gt; Objeto IteratorResult en lugar de lanzar</target>
        </trans-unit>
        <trans-unit id="04d666850d0c866af9e699c434b1d4de2e994096" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;IteratorResult&lt;/code&gt; object returned instead of throwing</source>
          <target state="translated">&lt;code&gt;IteratorResult&lt;/code&gt; Objeto IteratorResult devuelto en lugar de lanzar</target>
        </trans-unit>
        <trans-unit id="99bf142591158d5669990d515492aeb7e19db9b3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;JSON.parse()&lt;/code&gt; does not allow trailing commas</source>
          <target state="translated">&lt;code&gt;JSON.parse()&lt;/code&gt; no permite comas finales</target>
        </trans-unit>
        <trans-unit id="792a9827e85fda5fb0f2826880070cbba653fa1d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;JSON.stringify()&lt;/code&gt; converts a value to JSON notation representing it:</source>
          <target state="translated">&lt;code&gt;JSON.stringify()&lt;/code&gt; convierte un valor a notaci&amp;oacute;n JSON que lo representa:</target>
        </trans-unit>
        <trans-unit id="99d15540bd179508a1b379ec775326d57dcda4ec" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LinkError()&lt;/code&gt; constructor</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="795d0060cfecfda0744e7d5af758e92e05e6c1c8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ListFormat()&lt;/code&gt; constructor</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9a6a5b9a315b96b448d9effb7d16c2e954e32c86" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Locale()&lt;/code&gt; constructor</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f357441cbb064efb2755affac7956b95367a80c2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;MIN_VALUE&lt;/code&gt; has a value of approximately &lt;code&gt;5e-324&lt;/code&gt;. Values smaller than &lt;code&gt;MIN_VALUE&lt;/code&gt; (&quot;underflow values&quot;) are converted to 0.</source>
          <target state="translated">&lt;code&gt;MIN_VALUE&lt;/code&gt; tiene un valor de aproximadamente &lt;code&gt;5e-324&lt;/code&gt; . Los valores menores que &lt;code&gt;MIN_VALUE&lt;/code&gt; (&quot;valores de subdesbordamiento&quot;) se convierten a 0.</target>
        </trans-unit>
        <trans-unit id="8a7df267ea0fcc210d5cbe17b20827ba4b7c7078" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Map()&lt;/code&gt; constructor</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7b1e5dd0c012303db962f4607a578c791b67434a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Map()&lt;/code&gt; without &lt;code&gt;new&lt;/code&gt; throws</source>
          <target state="translated">&lt;code&gt;Map()&lt;/code&gt; sin &lt;code&gt;new&lt;/code&gt; lanzamientos</target>
        </trans-unit>
        <trans-unit id="8318b22aa8d141e0724c8ed13eac5cb86e604c9d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Map&lt;/code&gt; instances</source>
          <target state="translated">&lt;code&gt;Map&lt;/code&gt; Instancias de mapas</target>
        </trans-unit>
        <trans-unit id="c9f74064b2f4d39f2ff9a75fab30b8b76f7760e7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Math.asinh&lt;/code&gt; can be emulated with the following function:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2a7bcd8cf43ec0c6188f2699c4935f40c7e3d138" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Math.atan2()&lt;/code&gt; is passed separate &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt; arguments, and &lt;code&gt;Math.atan()&lt;/code&gt; is passed the ratio of those two arguments.</source>
          <target state="translated">&lt;code&gt;Math.atan2()&lt;/code&gt; se hace pasar por separado &lt;code&gt;x&lt;/code&gt; y &lt;code&gt;y&lt;/code&gt; argumentos, y &lt;code&gt;Math.atan()&lt;/code&gt; se pasa a la relaci&amp;oacute;n de esas dos argumentos.</target>
        </trans-unit>
        <trans-unit id="aa268387b5ee5b06e13574d8c4522eba1a94f150" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Math.hypot&lt;/code&gt; also avoids overflow/underflow problems if the magnitude of your numbers is very large. The largest number you can represent in JS is &lt;code&gt;Number.MAX_VALUE&lt;/code&gt;, which is around 10&lt;sup&gt;308&lt;/sup&gt;. If your numbers are larger than about 10&lt;sup&gt;154&lt;/sup&gt;, taking the square of them will result in Infinity. For example, &lt;code&gt;Math.sqrt(1e200*1e200 + 1e200*1e200) = Infinity&lt;/code&gt;. If you use &lt;code&gt;hypot()&lt;/code&gt; instead, you get better answer: &lt;code&gt;Math.hypot(1e200, 1e200) = 1.4142...e+200&lt;/code&gt; . This is also true with very small numbers. &lt;code&gt;Math.sqrt(1e-200*1e-200 + 1e-200*1e-200) = 0&lt;/code&gt;, but &lt;code&gt;Math.hypot(1e-200, 1e-200) = 1.4142...e-200&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4380e68cdd3c6b768be71b198599bf7c90c809f9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Math.imul()&lt;/code&gt; allows for 32-bit integer multiplication with C-like semantics. This feature is useful for projects like &lt;a href=&quot;http://en.wikipedia.org/wiki/Emscripten&quot;&gt;Emscripten&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="109bb4285faf535e17adad3f4a8c412db543cf11" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Math.imul()&lt;/code&gt; allows for 32-bit integer multiplication with C-like semantics. This feature is useful for projects like &lt;a href=&quot;http://en.wikipedia.org/wiki/Emscripten&quot;&gt;Emscripten&lt;/a&gt;. Because &lt;code&gt;imul()&lt;/code&gt; is a static method of &lt;code&gt;Math&lt;/code&gt;, you always use it as &lt;code&gt;Math.imul()&lt;/code&gt;, rather than as a method of a &lt;code&gt;Math&lt;/code&gt; object you created (&lt;code&gt;Math&lt;/code&gt; is not a constructor). If you use normal JavaScript floating point numbers in imul, you will experience a degrade in performance. This is because of the costly conversion from a floating point to an integer for multiplication, and then converting the multiplied integer back into a floating point. The reason imul exists is because it is faster in only one (so far) circumstance: AsmJS. AsmJS allows for JIST-optimizers to more easily implement internal integers in JavaScript. Multiplying two numbers stored internally as integers (which is only possible with AsmJS) with imul is the only potential circumstance where Math.imul may prove performant in current browsers.</source>
          <target state="translated">&lt;code&gt;Math.imul()&lt;/code&gt; permite la multiplicaci&amp;oacute;n de enteros de 32 bits con sem&amp;aacute;ntica similar a C. Esta funci&amp;oacute;n es &amp;uacute;til para proyectos como &lt;a href=&quot;http://en.wikipedia.org/wiki/Emscripten&quot;&gt;Emscripten&lt;/a&gt; . Debido a que &lt;code&gt;imul()&lt;/code&gt; es un m&amp;eacute;todo est&amp;aacute;tico de &lt;code&gt;Math&lt;/code&gt; , siempre lo usa como &lt;code&gt;Math.imul()&lt;/code&gt; , en lugar de como un m&amp;eacute;todo de un objeto &lt;code&gt;Math&lt;/code&gt; que cre&amp;oacute; ( &lt;code&gt;Math&lt;/code&gt; no es un constructor). Si usa n&amp;uacute;meros de punto flotante JavaScript normales en imul, experimentar&amp;aacute; una disminuci&amp;oacute;n en el rendimiento. Esto se debe a la costosa conversi&amp;oacute;n de un punto flotante a un n&amp;uacute;mero entero para la multiplicaci&amp;oacute;n y luego convertir el n&amp;uacute;mero entero multiplicado de nuevo en un punto flotante. La raz&amp;oacute;n por la que imul existe es porque es m&amp;aacute;s r&amp;aacute;pido en una sola circunstancia (hasta ahora): AsmJS. AsmJS permite que los optimizadores JIST implementen m&amp;aacute;s f&amp;aacute;cilmente enteros internos en JavaScript. Multiplicar dos n&amp;uacute;meros almacenados internamente como enteros (que solo es posible con AsmJS) con imul es la &amp;uacute;nica circunstancia potencial en la que Math.imul puede resultar eficaz en los navegadores actuales.</target>
        </trans-unit>
        <trans-unit id="bf70bf8c3da6f3b076bf5d954b331a7c10f7b309" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Math.log1p&lt;/code&gt; may also have to be polyfilled; see &lt;a href=&quot;log1p&quot;&gt;Math.log1p&lt;/a&gt; for details.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="59e190daf89959e7871e7b6b5951cf74fc9d783a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Math.min()&lt;/code&gt; is often used to clip a value so that it is always less than or equal to a boundary. For instance, this</source>
          <target state="translated">&lt;code&gt;Math.min()&lt;/code&gt; se usa a menudo para recortar un valor de modo que siempre sea menor o igual a un l&amp;iacute;mite. Por ejemplo, este</target>
        </trans-unit>
        <trans-unit id="0651dcff17c1e704a772d61ec8c4700f697a0006" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Math.random()&lt;/code&gt;&lt;em&gt;does not&lt;/em&gt; provide cryptographically secure random numbers. Do not use them for anything related to security. Use the Web Crypto API instead, and more precisely the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/RandomSource/getRandomValues&quot;&gt;&lt;code&gt;window.crypto.getRandomValues()&lt;/code&gt;&lt;/a&gt; method.</source>
          <target state="translated">&lt;code&gt;Math.random()&lt;/code&gt; &lt;em&gt;no&lt;/em&gt; proporciona n&amp;uacute;meros aleatorios criptogr&amp;aacute;ficamente seguros. No los utilice para nada relacionado con la seguridad. En su lugar, utilice Web Crypto API y, m&amp;aacute;s precisamente, el m&amp;eacute;todo &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/RandomSource/getRandomValues&quot;&gt; &lt;code&gt;window.crypto.getRandomValues()&lt;/code&gt; &lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="64bc8ee2d3f73b32c8edb3a065497b5ecc220daf" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Math.random()&lt;/code&gt;&lt;em&gt;does not&lt;/em&gt; provide cryptographically secure random numbers. Do not use them for anything related to security. Use the Web Crypto API instead, and more precisely the &lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Web/API/Crypto/getRandomValues&quot;&gt;&lt;code&gt;window.crypto.getRandomValues()&lt;/code&gt;&lt;/a&gt; method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="28917bb98c98a66481cdaea4a6725b931811b706" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Math&lt;/code&gt; is a built-in object that has properties and methods for mathematical constants and functions. It&amp;rsquo;s not a function object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="95822a9f4600d3fa0ae62a6c435caa678bb649dc" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Math&lt;/code&gt; is a built-in object that has properties and methods for mathematical constants and functions. Not a function object.</source>
          <target state="translated">&lt;code&gt;Math&lt;/code&gt; es un objeto integrado que tiene propiedades y m&amp;eacute;todos para constantes y funciones matem&amp;aacute;ticas. No es un objeto de funci&amp;oacute;n.</target>
        </trans-unit>
        <trans-unit id="0e446ee8535cb8e95880ca018ff750027d302569" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Math&lt;/code&gt; works with the &lt;a href=&quot;number&quot;&gt;&lt;code&gt;Number&lt;/code&gt;&lt;/a&gt; type. It doesn't work with &lt;a href=&quot;bigint&quot;&gt;&lt;code&gt;BigInt&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="23cd3acb4a476bbff338277d7549d718c987b643" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Memory()&lt;/code&gt; constructor</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5ffd35b10bd0b6e9c0b2cc76654fa2a5107ed68f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Memory&lt;/code&gt; instances</source>
          <target state="translated">&lt;code&gt;Memory&lt;/code&gt; Instancias de memoria</target>
        </trans-unit>
        <trans-unit id="4725b15ca1c5ed1d6ec0bb57a59e940770274702" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Module()&lt;/code&gt; constructor</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="09818648bf65bb450f878315f5e3b4a6792d37da" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Module&lt;/code&gt; instances</source>
          <target state="translated">&lt;code&gt;Module&lt;/code&gt; Instancias de m&amp;oacute;dulo</target>
        </trans-unit>
        <trans-unit id="9ca2a82b57690975f17141a6943191dd87af3928" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;NEGATIVE_INFINITY&lt;/code&gt;, divided by any negative value except &lt;code&gt;NEGATIVE_INFINITY&lt;/code&gt;, is &lt;a href=&quot;positive_infinity&quot;&gt;&lt;code&gt;POSITIVE_INFINITY&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;NEGATIVE_INFINITY&lt;/code&gt; , dividido por cualquier valor negativo excepto &lt;code&gt;NEGATIVE_INFINITY&lt;/code&gt; , es &lt;a href=&quot;positive_infinity&quot;&gt; &lt;code&gt;POSITIVE_INFINITY&lt;/code&gt; &lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="d9a5a069c8d5d8c0ff92afc1ec360a194365aadd" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;NEGATIVE_INFINITY&lt;/code&gt;, divided by any positive value except &lt;a href=&quot;positive_infinity&quot;&gt;&lt;code&gt;POSITIVE_INFINITY&lt;/code&gt;&lt;/a&gt;, is &lt;code&gt;NEGATIVE_INFINITY&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;NEGATIVE_INFINITY&lt;/code&gt; , dividido por cualquier valor positivo excepto &lt;a href=&quot;positive_infinity&quot;&gt; &lt;code&gt;POSITIVE_INFINITY&lt;/code&gt; &lt;/a&gt; , es &lt;code&gt;NEGATIVE_INFINITY&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="03e3277c88549dd5517a511556b8dd4a34ffe917" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;NEGATIVE_INFINITY&lt;/code&gt;, divided by either &lt;code&gt;NEGATIVE_INFINITY&lt;/code&gt; or &lt;a href=&quot;positive_infinity&quot;&gt;&lt;code&gt;POSITIVE_INFINITY&lt;/code&gt;&lt;/a&gt;, is &lt;a href=&quot;../nan&quot;&gt;&lt;code&gt;NaN&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;NEGATIVE_INFINITY&lt;/code&gt; , dividido por &lt;code&gt;NEGATIVE_INFINITY&lt;/code&gt; o &lt;a href=&quot;positive_infinity&quot;&gt; &lt;code&gt;POSITIVE_INFINITY&lt;/code&gt; &lt;/a&gt; , es &lt;a href=&quot;../nan&quot;&gt; &lt;code&gt;NaN&lt;/code&gt; &lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="1aed53a23cf732a01d3f8f1616323f24c81e9467" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;NFC&lt;/code&gt; &amp;mdash; Normalization Form Canonical Composition.</source>
          <target state="translated">&lt;code&gt;NFC&lt;/code&gt; - Composici&amp;oacute;n can&amp;oacute;nica de forma de normalizaci&amp;oacute;n.</target>
        </trans-unit>
        <trans-unit id="aefdfca995a5c3358970ae35e74a52c6908211f1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;NFD&lt;/code&gt; &amp;mdash; Normalization Form Canonical Decomposition.</source>
          <target state="translated">&lt;code&gt;NFD&lt;/code&gt; - Descomposici&amp;oacute;n can&amp;oacute;nica de forma de normalizaci&amp;oacute;n.</target>
        </trans-unit>
        <trans-unit id="0cef8f1d2d1df7b44adaf9efe1e591c487abb5d6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;NFKC&lt;/code&gt; &amp;mdash; Normalization Form Compatibility Composition.</source>
          <target state="translated">&lt;code&gt;NFKC&lt;/code&gt; - Composici&amp;oacute;n de compatibilidad de formas de normalizaci&amp;oacute;n.</target>
        </trans-unit>
        <trans-unit id="1a0524020fef998da4773aad160c354b21d7f22a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;NFKD&lt;/code&gt; &amp;mdash; Normalization Form Compatibility Decomposition.</source>
          <target state="translated">&lt;code&gt;NFKD&lt;/code&gt; - Descomposici&amp;oacute;n de compatibilidad de formas de normalizaci&amp;oacute;n.</target>
        </trans-unit>
        <trans-unit id="bf3ea7fc9cefcbece612900ee2442560cc60defe" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;NaN&lt;/code&gt; can also be used as a key. Even though every &lt;code&gt;NaN&lt;/code&gt; is not equal to itself (&lt;code&gt;NaN !== NaN&lt;/code&gt; is true), the following example works because &lt;code&gt;NaN&lt;/code&gt;s are indistinguishable from each other:</source>
          <target state="translated">&lt;code&gt;NaN&lt;/code&gt; tambi&amp;eacute;n se puede utilizar como clave. Aunque cada &lt;code&gt;NaN&lt;/code&gt; no es igual a s&amp;iacute; mismo ( &lt;code&gt;NaN !== NaN&lt;/code&gt; es verdadero), el siguiente ejemplo funciona porque los &lt;code&gt;NaN&lt;/code&gt; son indistinguibles entre s&amp;iacute;:</target>
        </trans-unit>
        <trans-unit id="a70c5bba79474ee06cb3b3cd2fca4d23cf4d3de2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;NaN&lt;/code&gt; compares unequal (via &lt;code&gt;==&lt;/code&gt;, &lt;code&gt;!=&lt;/code&gt;, &lt;code&gt;===&lt;/code&gt;, and &lt;code&gt;!==&lt;/code&gt;) to any other value -- including to another &lt;code&gt;NaN&lt;/code&gt; value. Use &lt;a href=&quot;number/isnan&quot;&gt;&lt;code&gt;Number.isNaN()&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;isnan&quot;&gt;&lt;code&gt;isNaN()&lt;/code&gt;&lt;/a&gt; to most clearly determine whether a value is &lt;code&gt;NaN&lt;/code&gt;. Or perform a self-comparison: &lt;code&gt;NaN&lt;/code&gt;, and only &lt;code&gt;NaN&lt;/code&gt;, will compare unequal to itself.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="deab52786b21a86072697583a5ba813e578f3de6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;NaN&lt;/code&gt; compares unequal (via &lt;code&gt;==&lt;/code&gt;, &lt;code&gt;!=&lt;/code&gt;, &lt;code&gt;===&lt;/code&gt;, and &lt;code&gt;!==&lt;/code&gt;) to any other value -- including to another NaN value. Use &lt;a href=&quot;number/isnan&quot;&gt;&lt;code&gt;Number.isNaN()&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;isnan&quot;&gt;&lt;code&gt;isNaN()&lt;/code&gt;&lt;/a&gt; to most clearly determine whether a value is NaN. Or perform a self-comparison: NaN, and only NaN, will compare unequal to itself.</source>
          <target state="translated">&lt;code&gt;NaN&lt;/code&gt; compara desigual (a trav&amp;eacute;s de &lt;code&gt;==&lt;/code&gt; , &lt;code&gt;!=&lt;/code&gt; , &lt;code&gt;===&lt;/code&gt; , y &lt;code&gt;!==&lt;/code&gt; ) A cualquier otro valor - incluyendo a otro valor NaN. Utilice &lt;a href=&quot;number/isnan&quot;&gt; &lt;code&gt;Number.isNaN()&lt;/code&gt; &lt;/a&gt; o &lt;a href=&quot;isnan&quot;&gt; &lt;code&gt;isNaN()&lt;/code&gt; &lt;/a&gt; para determinar m&amp;aacute;s claramente si un valor es NaN. O realice una autocomparaci&amp;oacute;n: NaN, y solo NaN, comparar&amp;aacute; desigual consigo mismo.</target>
        </trans-unit>
        <trans-unit id="0b88d9c66d6240394cb3095b6dfc791dbfa0fd4a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;NaN&lt;/code&gt; is a property of the &lt;em&gt;global object&lt;/em&gt;.</source>
          <target state="translated">&lt;code&gt;NaN&lt;/code&gt; es una propiedad del &lt;em&gt;objeto global&lt;/em&gt; .</target>
        </trans-unit>
        <trans-unit id="6a5780d3e1049bb0db8be1c5dab6dbfa6d11212e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;NaN&lt;/code&gt; is a property of the &lt;em&gt;global object&lt;/em&gt;. In other words, it is a variable in global scope.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f2e3f2b7ca75dcbf8fe405a2df8910f266da1607" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;NaN&lt;/code&gt; values are generated when arithmetic operations result in &lt;em&gt;undefined&lt;/em&gt; or &lt;em&gt;unrepresentable&lt;/em&gt; values. Such values do not necessarily represent overflow conditions. A &lt;code&gt;NaN&lt;/code&gt; also results from attempted coercion to numeric values of non-numeric values for which no primitive numeric value is available.</source>
          <target state="translated">&lt;code&gt;NaN&lt;/code&gt; valores de NaN se generan cuando las operaciones aritm&amp;eacute;ticas dan como resultado valores &lt;em&gt;indefinidos&lt;/em&gt; o &lt;em&gt;no representables&lt;/em&gt; . Estos valores no representan necesariamente condiciones de desbordamiento. Un &lt;code&gt;NaN&lt;/code&gt; tambi&amp;eacute;n resulta de un intento de coerci&amp;oacute;n a valores num&amp;eacute;ricos de valores no num&amp;eacute;ricos para los que no hay ning&amp;uacute;n valor num&amp;eacute;rico primitivo disponible.</target>
        </trans-unit>
        <trans-unit id="ad8d9d2430f4b3e8a1035cdd6adc1add4c672801" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;NaN&lt;/code&gt;;</source>
          <target state="translated">&lt;code&gt;NaN&lt;/code&gt;;</target>
        </trans-unit>
        <trans-unit id="8698d16b49f0fe93fcc90ecd5a36ccc0c5623db7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Number()&lt;/code&gt; constructor</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1c798758854594309c025414c7607745062fa79f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Number.MIN_VALUE&lt;/code&gt; is &lt;code&gt;5e-324&lt;/code&gt;, i.e. the smallest positive number that can be represented within float precision, i.e. that's as close as you can get to zero. Values smaller than &lt;code&gt;MIN_VALUE&lt;/code&gt; (&quot;underflow values&quot;) are converted to 0.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4cb340c2033aa11e0e7e675fa69ea76928a5cdbe" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Number&lt;/code&gt; instances</source>
          <target state="translated">&lt;code&gt;Number&lt;/code&gt; instancias</target>
        </trans-unit>
        <trans-unit id="a3f82156d866753edd6dfcd499f5ce12e4c9980e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Number&lt;/code&gt; is a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/Primitive#Primitive_wrapper_objects_in_JavaScript&quot;&gt;primitive wrapper object&lt;/a&gt; used to represent and manipulate numbers like &lt;code&gt;37&lt;/code&gt; or &lt;code&gt;-9.25&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f67156eb4019a290fb016ef4e691235840f5029a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Number&lt;/code&gt;: &lt;a href=&quot;../number/tolocalestring&quot;&gt;&lt;code&gt;Number.prototype.toLocaleString()&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">&lt;code&gt;Number&lt;/code&gt; : &lt;a href=&quot;../number/tolocalestring&quot;&gt; &lt;code&gt;Number.prototype.toLocaleString()&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="a6d2652956e5c24f5d8351ec231e0ba5d1667882" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Number&lt;/code&gt;: return &lt;code&gt;true&lt;/code&gt; only if both operands have the same value. &lt;code&gt;+0&lt;/code&gt; and &lt;code&gt;-0&lt;/code&gt; are treated as the same value. If either operand is &lt;code&gt;NaN&lt;/code&gt;, return &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="53f62559120f8f96e1b6b0c88367d1887c24c472" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;NumberFormat()&lt;/code&gt; constructor</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d842f2b08055813e139ebf0b5c3617888c210b14" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;NumberFormat&lt;/code&gt; instances</source>
          <target state="translated">&lt;code&gt;NumberFormat&lt;/code&gt; Instancias de NumberFormat</target>
        </trans-unit>
        <trans-unit id="34769652aa34093f9c08e7ef970909ba62cbb1e0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;NumberFormat&lt;/code&gt; instances inherit the following methods from their prototype:</source>
          <target state="translated">&lt;code&gt;NumberFormat&lt;/code&gt; instancias de NumberFormat heredan los siguientes m&amp;eacute;todos de su prototipo:</target>
        </trans-unit>
        <trans-unit id="377b596939f39bf7eb0c7cb9f88ae3a61617d06b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;NumberFormat&lt;/code&gt; instances inherit the following properties from their prototype:</source>
          <target state="translated">&lt;code&gt;NumberFormat&lt;/code&gt; instancias de NumberFormat heredan las siguientes propiedades de su prototipo:</target>
        </trans-unit>
        <trans-unit id="76ca0a0d36ea66ea594e0d9ab86b24dacd583933" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;NumberFormat&lt;/code&gt; outputs localized, opaque strings that cannot be manipulated directly:</source>
          <target state="translated">&lt;code&gt;NumberFormat&lt;/code&gt; genera cadenas localizadas y opacas que no se pueden manipular directamente:</target>
        </trans-unit>
        <trans-unit id="13109e15641430c48a9590fb201d669fb63ee7aa" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Object()&lt;/code&gt; constructor</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d2b5dff67d51b9ec1c5d1504caea6a1cda4aedc8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Object.defineProperties&lt;/code&gt;, in essence, defines all properties corresponding to the enumerable own properties of &lt;code&gt;props&lt;/code&gt; on the object &lt;code&gt;obj&lt;/code&gt; object.</source>
          <target state="translated">&lt;code&gt;Object.defineProperties&lt;/code&gt; , en esencia, define todas las propiedades correspondientes a las propiedades propias enumerables de los &lt;code&gt;props&lt;/code&gt; en el objeto &lt;code&gt;obj&lt;/code&gt; object.</target>
        </trans-unit>
        <trans-unit id="94a2599652b8e7a62613e83cefea75ec321bf6b5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Object.entries()&lt;/code&gt; returns an array whose elements are arrays corresponding to the enumerable property &lt;code&gt;[key, value]&lt;/code&gt; pairs found directly upon &lt;code&gt;object&lt;/code&gt;. The ordering of the properties is the same as that given by looping over the property values of the object manually.</source>
          <target state="translated">&lt;code&gt;Object.entries()&lt;/code&gt; devuelve una matriz cuyos elementos son matrices correspondientes a los pares de propiedades enumerables &lt;code&gt;[key, value]&lt;/code&gt; encuentran directamente sobre el &lt;code&gt;object&lt;/code&gt; . El orden de las propiedades es el mismo que se da al recorrer los valores de propiedad del objeto manualmente.</target>
        </trans-unit>
        <trans-unit id="b7c387c984d73cdf236970025ac1943f2502e4f2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Object.entries()&lt;/code&gt; returns an array whose elements are arrays corresponding to the enumerable string-keyed property &lt;code&gt;[&lt;var&gt;key&lt;/var&gt;, &lt;var&gt;value&lt;/var&gt;]&lt;/code&gt; pairs found directly upon &lt;code&gt;object&lt;/code&gt;. The ordering of the properties is the same as that given by looping over the property values of the object manually.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d40fbd715a89dd871124c69df74ec60374407397" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Object.fromEntries()&lt;/code&gt; performs the reverse of &lt;a href=&quot;entries&quot;&gt;&lt;code&gt;Object.entries()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;Object.fromEntries()&lt;/code&gt; realiza lo contrario de &lt;a href=&quot;entries&quot;&gt; &lt;code&gt;Object.entries()&lt;/code&gt; &lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="e0b5db9f890cafea46cfa59ec58bfa9f320c814c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Object.getOwnPropertyNames()&lt;/code&gt; returns an array whose elements are strings corresponding to the enumerable &lt;em&gt;and non-enumerable&lt;/em&gt; properties found directly upon &lt;code&gt;obj&lt;/code&gt;. The ordering of the enumerable properties in the array is consistent with the ordering exposed by a &lt;a href=&quot;../../statements/for...in&quot;&gt;&lt;code&gt;for...in&lt;/code&gt;&lt;/a&gt; loop (or by &lt;a href=&quot;keys&quot;&gt;&lt;code&gt;Object.keys()&lt;/code&gt;&lt;/a&gt;) over the properties of the object. The ordering of the non-enumerable properties in the array, and among the enumerable properties, is not defined.</source>
          <target state="translated">&lt;code&gt;Object.getOwnPropertyNames()&lt;/code&gt; devuelve una matriz cuyos elementos son cadenas correspondientes a las propiedades enumerables &lt;em&gt;y no enumerables que se&lt;/em&gt; encuentran directamente en &lt;code&gt;obj&lt;/code&gt; . El orden de las propiedades enumerables en la matriz es consistente con el orden expuesto por un bucle &lt;a href=&quot;../../statements/for...in&quot;&gt; &lt;code&gt;for...in&lt;/code&gt; &lt;/a&gt; (o por &lt;a href=&quot;keys&quot;&gt; &lt;code&gt;Object.keys()&lt;/code&gt; &lt;/a&gt; ) sobre las propiedades del objeto. El orden de las propiedades no enumerables en la matriz y entre las propiedades enumerables no est&amp;aacute; definido.</target>
        </trans-unit>
        <trans-unit id="118ece4d5f880b8e4add7768a011a7fab44b5a91" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Object.getOwnPropertyNames()&lt;/code&gt; returns an array whose elements are strings corresponding to the enumerable and non-enumerable properties found directly in a given object &lt;code&gt;&lt;var&gt;obj&lt;/var&gt;&lt;/code&gt;. The ordering of the enumerable properties in the array is consistent with the ordering exposed by a &lt;a href=&quot;../../statements/for...in&quot;&gt;&lt;code&gt;for...in&lt;/code&gt;&lt;/a&gt; loop (or by &lt;a href=&quot;keys&quot;&gt;&lt;code&gt;Object.keys()&lt;/code&gt;&lt;/a&gt;) over the properties of the object. According to ES6, the integer keys of the object (both enumerable and non-enumerable) are added in ascending order to the array first, followed by the string keys in the order of insertion.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="53f064df4675406d577e7f66f771574299c010d4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Object.is()&lt;/code&gt; determines whether two values are &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Equality_comparisons_and_sameness&quot;&gt;the same value&lt;/a&gt;. Two values are the same if one of the following holds:</source>
          <target state="translated">&lt;code&gt;Object.is()&lt;/code&gt; determina si dos valores son &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Equality_comparisons_and_sameness&quot;&gt;el mismo valor&lt;/a&gt; . Dos valores son iguales si se cumple uno de los siguientes:</target>
        </trans-unit>
        <trans-unit id="3e427f28fbab3aa8e470ec28df4afbaf7e7795bf" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Object.is()&lt;/code&gt; determines whether two values are &lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Web/JavaScript/Equality_comparisons_and_sameness&quot;&gt;the same value&lt;/a&gt;. Two values are the same if one of the following holds:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="292114da75b24517969285cbaa7952206f5c3699" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Object.isExtensible(&lt;var&gt;proxy&lt;/var&gt;)&lt;/code&gt; must return the same value as &lt;code&gt;Object.isExtensible(&lt;var&gt;target&lt;/var&gt;)&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b77508a2284c935505a15ed0f03b6ce0ec32778c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Object.isExtensible(proxy)&lt;/code&gt; must return the same value as &lt;code&gt;Object.isExtensible(target)&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Object.isExtensible(proxy)&lt;/code&gt; debe devolver el mismo valor que &lt;code&gt;Object.isExtensible(target)&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="fbe59d99537dc4af1b79388ebb143c010f86aab2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Object.keys()&lt;/code&gt; returns an array whose elements are strings corresponding to the enumerable properties found directly upon &lt;code&gt;object&lt;/code&gt;. The ordering of the properties is the same as that given by looping over the properties of the object manually.</source>
          <target state="translated">&lt;code&gt;Object.keys()&lt;/code&gt; devuelve una matriz cuyos elementos son cadenas correspondientes a las propiedades enumerables que se encuentran directamente sobre el &lt;code&gt;object&lt;/code&gt; . El orden de las propiedades es el mismo que se da al recorrer las propiedades del objeto manualmente.</target>
        </trans-unit>
        <trans-unit id="c5c4e7bfe3f6de29f45845228f477545e9738ebe" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Object.preventExtensions()&lt;/code&gt; only prevents addition of own properties. Properties can still be added to the object prototype.</source>
          <target state="translated">&lt;code&gt;Object.preventExtensions()&lt;/code&gt; solo evita la adici&amp;oacute;n de propiedades propias. A&amp;uacute;n se pueden agregar propiedades al prototipo de objeto.</target>
        </trans-unit>
        <trans-unit id="550b993a4ba894984824caec992d4d53622db620" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Object.preventExtensions(&lt;var&gt;proxy&lt;/var&gt;)&lt;/code&gt; only returns &lt;code&gt;true&lt;/code&gt; if &lt;code&gt;Object.isExtensible(&lt;var&gt;proxy&lt;/var&gt;)&lt;/code&gt; is &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="33d843ac0aa426a5133fd2436e7e601dd94c0fa6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Object.preventExtensions(proxy)&lt;/code&gt; only returns &lt;code&gt;true&lt;/code&gt; if &lt;code&gt;Object.isExtensible(proxy)&lt;/code&gt; is &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Object.preventExtensions(proxy)&lt;/code&gt; solo devuelve &lt;code&gt;true&lt;/code&gt; si &lt;code&gt;Object.isExtensible(proxy)&lt;/code&gt; es &lt;code&gt;false&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="b946c5927bb591acf9393952a5c14efb18bcf4ec" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Object.setPrototypeOf()&lt;/code&gt; is in the ECMAScript 2015 specification. It is generally considered the proper way to set the prototype of an object, vs. the more controversial &lt;a href=&quot;proto&quot;&gt;&lt;code&gt;Object.prototype.__proto__&lt;/code&gt;&lt;/a&gt; property.</source>
          <target state="translated">&lt;code&gt;Object.setPrototypeOf()&lt;/code&gt; est&amp;aacute; en la especificaci&amp;oacute;n ECMAScript 2015. Generalmente se considera la forma correcta de configurar el prototipo de un objeto, frente a la propiedad &lt;a href=&quot;proto&quot;&gt; &lt;code&gt;Object.prototype.__proto__&lt;/code&gt; &lt;/a&gt; m&amp;aacute;s controvertida .</target>
        </trans-unit>
        <trans-unit id="0d87c1851f78e910756e6741bd628fac708509ab" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Object.values()&lt;/code&gt; returns an array whose elements are the enumerable property values found on the object. The ordering of the properties is the same as that given by looping over the property values of the object manually.</source>
          <target state="translated">&lt;code&gt;Object.values()&lt;/code&gt; devuelve una matriz cuyos elementos son los valores de propiedad enumerables que se encuentran en el objeto. El orden de las propiedades es el mismo que se da al recorrer los valores de propiedad del objeto manualmente.</target>
        </trans-unit>
        <trans-unit id="2525f02b3e1c3cb7023532b04c9f39b17b86a47c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Object&lt;/code&gt; instances and &lt;code&gt;Object&lt;/code&gt; prototype object</source>
          <target state="translated">&lt;code&gt;Object&lt;/code&gt; Instancias de objeto y &lt;code&gt;Object&lt;/code&gt; prototipo de objeto</target>
        </trans-unit>
        <trans-unit id="c60905a4d4b9d5726e0b58cbef176a723a644ca5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Object&lt;/code&gt;: &lt;a href=&quot;../object/tolocalestring&quot;&gt;&lt;code&gt;Object.prototype.toLocaleString()&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">&lt;code&gt;Object&lt;/code&gt; : &lt;a href=&quot;../object/tolocalestring&quot;&gt; &lt;code&gt;Object.prototype.toLocaleString()&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="e9c7f8bbdabc1ea944f9d5966a3150769d5998e8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;POSITIVE_INFINITY&lt;/code&gt;, divided by any negative value except &lt;a href=&quot;negative_infinity&quot;&gt;&lt;code&gt;NEGATIVE_INFINITY&lt;/code&gt;&lt;/a&gt;, is &lt;a href=&quot;negative_infinity&quot;&gt;&lt;code&gt;NEGATIVE_INFINITY&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;POSITIVE_INFINITY&lt;/code&gt; , dividido por cualquier valor negativo excepto &lt;a href=&quot;negative_infinity&quot;&gt; &lt;code&gt;NEGATIVE_INFINITY&lt;/code&gt; &lt;/a&gt; , es &lt;a href=&quot;negative_infinity&quot;&gt; &lt;code&gt;NEGATIVE_INFINITY&lt;/code&gt; &lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="04e445a9260f94d24607c1c5d8a72f9ffca1e717" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;POSITIVE_INFINITY&lt;/code&gt;, divided by any positive value except &lt;code&gt;POSITIVE_INFINITY&lt;/code&gt;, is &lt;code&gt;POSITIVE_INFINITY&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;POSITIVE_INFINITY&lt;/code&gt; , dividido por cualquier valor positivo excepto &lt;code&gt;POSITIVE_INFINITY&lt;/code&gt; , es &lt;code&gt;POSITIVE_INFINITY&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="2ff256e7e23ca1d80777bf5a5c3b7ae449c2c048" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;POSITIVE_INFINITY&lt;/code&gt;, divided by either &lt;a href=&quot;negative_infinity&quot;&gt;&lt;code&gt;NEGATIVE_INFINITY&lt;/code&gt;&lt;/a&gt; or &lt;code&gt;POSITIVE_INFINITY&lt;/code&gt;, is &lt;a href=&quot;../nan&quot;&gt;&lt;code&gt;NaN&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;POSITIVE_INFINITY&lt;/code&gt; , dividido por &lt;a href=&quot;negative_infinity&quot;&gt; &lt;code&gt;NEGATIVE_INFINITY&lt;/code&gt; &lt;/a&gt; o &lt;code&gt;POSITIVE_INFINITY&lt;/code&gt; , es &lt;a href=&quot;../nan&quot;&gt; &lt;code&gt;NaN&lt;/code&gt; &lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="929fbe714f59a093b49e64f4d9def71b6776f2db" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;PluralRules()&lt;/code&gt; constructor</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="55b5fff9b395ab1dcfd9539e7aee993be9fdf420" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;PluralRules&lt;/code&gt; instances inherit the following methods from their prototype:</source>
          <target state="translated">&lt;code&gt;PluralRules&lt;/code&gt; instancias de PluralRules heredan los siguientes m&amp;eacute;todos de su prototipo:</target>
        </trans-unit>
        <trans-unit id="82703d16f2081e2d72446cf7d19775b6faacbbed" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;PluralRules&lt;/code&gt; instances inherit the following properties from their prototype:</source>
          <target state="translated">&lt;code&gt;PluralRules&lt;/code&gt; instancias de PluralRules heredan las siguientes propiedades de su prototipo:</target>
        </trans-unit>
        <trans-unit id="bedf737d9637942cc912fa1f169351a71d36a6ac" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Promise()&lt;/code&gt; constructor</source>
          <target state="translated">&lt;code&gt;Promise()&lt;/code&gt; Constructor Promise ()</target>
        </trans-unit>
        <trans-unit id="de504afa9f2aa80378546578e789706d03a6bfef" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Promise.all()&lt;/code&gt; will reject immediately upon &lt;strong&gt;any &lt;/strong&gt;of the input promises rejecting. In comparison, the promise returned by &lt;a href=&quot;allsettled&quot;&gt;&lt;code&gt;Promise.allSettled()&lt;/code&gt;&lt;/a&gt; will wait for all input promises to complete, regardless of whether or not one rejects. Consequently, it will always return the final result of every promise and function from the input iterable.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c1ec4910ed70333ab471ee21bb61ba62ed12e54f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Promise.all&lt;/code&gt; fail-fast behaviour</source>
          <target state="translated">&lt;code&gt;Promise.all&lt;/code&gt; comportamiento a prueba de fallas</target>
        </trans-unit>
        <trans-unit id="ce6d2cf289580390a0516fe84e542dafae930633" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Promise.all&lt;/code&gt; is rejected if any of the elements are rejected. For example, if you pass in four promises that resolve after a timeout and one promise that rejects immediately, then &lt;code&gt;Promise.all&lt;/code&gt; will reject immediately.</source>
          <target state="translated">&lt;code&gt;Promise.all&lt;/code&gt; se rechaza si se rechaza alguno de los elementos. Por ejemplo, si aprueba cuatro promesas que se resuelven despu&amp;eacute;s de un tiempo de espera y una promesa que se rechaza inmediatamente, &lt;code&gt;Promise.all&lt;/code&gt; se rechazar&amp;aacute; inmediatamente.</target>
        </trans-unit>
        <trans-unit id="1779f1ce3e076528fe29025eec8de433c0f320e6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Promise.all&lt;/code&gt; waits for all fulfillments (or the first rejection).</source>
          <target state="translated">&lt;code&gt;Promise.all&lt;/code&gt; espera todos los cumplimientos (o el primer rechazo).</target>
        </trans-unit>
        <trans-unit id="8bd05f8ddd2fa0ed0d53d00f4231af78d977a2b0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Promise.any()&lt;/code&gt; rejects with an &lt;a href=&quot;../aggregateerror&quot;&gt;&lt;code&gt;AggregateError&lt;/code&gt;&lt;/a&gt; if no promise fulfils.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="38d1836cf3a058919e8254186e8abeac83751df8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Promise.any()&lt;/code&gt; resolves with the first promise to fulfil, even if a promise rejects first. This is in contrast to &lt;a href=&quot;race&quot;&gt;&lt;code&gt;Promise.race()&lt;/code&gt;&lt;/a&gt;, which resolves or rejects with the first promise to settle.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8e844e757e7730296f4687e203e99e561befee0b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Promise.any()&lt;/code&gt; takes an iterable of &lt;a href=&quot;../promise&quot;&gt;&lt;code&gt;Promise&lt;/code&gt;&lt;/a&gt; objects and, as soon as one of the promises in the iterable fulfills, returns a single promise that resolves with the value from that promise. If no promises in the iterable fulfill (if all of the given promises are rejected), then the returned promise is rejected with an &lt;a href=&quot;../aggregateerror&quot;&gt;&lt;code&gt;AggregateError&lt;/code&gt;&lt;/a&gt;, a new subclass of &lt;a href=&quot;../error&quot;&gt;&lt;code&gt;Error&lt;/code&gt;&lt;/a&gt; that groups together individual errors. Essentially, this method is the opposite of &lt;a href=&quot;all&quot;&gt;&lt;code&gt;Promise.all()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a625dd03d23e3099e19df92140494934737b67c4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Proxy()&lt;/code&gt; constructor</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="670177279f668e4b479f47426830027f5fabe757" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Proxy&lt;/code&gt; and &lt;code&gt;Reflect&lt;/code&gt; in the JavaScript Guide</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8103b45ff17330ca30e0658080a58009174f1b97" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;RangeError()&lt;/code&gt; constructor</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9f4343fae7508efe378b1bd8618bc224a943f270" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;RangeError&lt;/code&gt; instances</source>
          <target state="translated">&lt;code&gt;RangeError&lt;/code&gt; Instancias de RangeError</target>
        </trans-unit>
        <trans-unit id="240f68857cb2a56a74e6bdf920bb36e5ff9c3a28" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ReferenceError()&lt;/code&gt; constructor</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="06d89dab2fd0357de6930904b7a38260826a206f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ReferenceError&lt;/code&gt; instances</source>
          <target state="translated">&lt;code&gt;ReferenceError&lt;/code&gt; Instancias de ReferenceError</target>
        </trans-unit>
        <trans-unit id="fd0fdfd7cced3dc672976ed442f8f44890b2f0e7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Reflect.construct()&lt;/code&gt; allows you to invoke a constructor with a variable number of arguments. (This would also be possible by using the &lt;a href=&quot;../../operators/spread_syntax&quot;&gt;spread syntax&lt;/a&gt; combined with the &lt;a href=&quot;../../operators/new&quot;&gt;&lt;code&gt;new&lt;/code&gt; operator&lt;/a&gt;.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="32fdd1b07f271312217740c97b19c393e76ea995" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Reflect.construct()&lt;/code&gt; vs &lt;code&gt;Object.create()&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;Reflect.construct()&lt;/code&gt; vs &lt;code&gt;Object.create()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="0005212f36f3af64abe52dfbde826f99406f9b92" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Reflect.construct&lt;/code&gt; allows you to invoke a constructor with a variable number of arguments (which would also be possible by using the &lt;a href=&quot;../../operators/spread_syntax&quot;&gt;spread operator&lt;/a&gt; combined with the &lt;a href=&quot;../../operators/new&quot;&gt;new operator&lt;/a&gt;).</source>
          <target state="translated">&lt;code&gt;Reflect.construct&lt;/code&gt; le permite invocar un constructor con un n&amp;uacute;mero variable de argumentos (lo que tambi&amp;eacute;n ser&amp;iacute;a posible usando el &lt;a href=&quot;../../operators/spread_syntax&quot;&gt;operador de extensi&amp;oacute;n&lt;/a&gt; combinado con el &lt;a href=&quot;../../operators/new&quot;&gt;operador nuevo&lt;/a&gt; ).</target>
        </trans-unit>
        <trans-unit id="a08fe7a7d6107a9ec2388db5830e7f61fe4ddc23" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Reflect.has&lt;/code&gt; returns &lt;code&gt;true&lt;/code&gt; for any inherited properties, like the &lt;a href=&quot;../../operators/in&quot;&gt;&lt;code&gt;in&lt;/code&gt; operator&lt;/a&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ea23ab9b01d0cfe7defbb0a6803b803f616e4457" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;RegExp()&lt;/code&gt; constructor</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b3d13e5e6e3252272976e4077c65e96a0381bce7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;RegExp.input&lt;/code&gt; (&lt;code&gt;$_&lt;/code&gt;)</source>
          <target state="translated">&lt;code&gt;RegExp.input&lt;/code&gt; ( &lt;code&gt;$_&lt;/code&gt; )</target>
        </trans-unit>
        <trans-unit id="c5a6e56004d43ed90f7662c7348f8eafbb851351" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;RegExp.lastMatch&lt;/code&gt; (&lt;code&gt;$&amp;amp;&lt;/code&gt;)</source>
          <target state="translated">&lt;code&gt;RegExp.lastMatch&lt;/code&gt; ( &lt;code&gt;$&amp;amp;&lt;/code&gt; )</target>
        </trans-unit>
        <trans-unit id="e82214b185df399209fe38a4c764e6638f8fa6d0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;RegExp.lastParen&lt;/code&gt; (&lt;code&gt;$+&lt;/code&gt;)</source>
          <target state="translated">&lt;code&gt;RegExp.lastParen&lt;/code&gt; ( &lt;code&gt;$+&lt;/code&gt; )</target>
        </trans-unit>
        <trans-unit id="fe1706da132a2dc4ca5f40ca1cdad320ab2745c4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;RegExp.leftContext&lt;/code&gt; (&lt;code&gt;$`&lt;/code&gt;)</source>
          <target state="translated">&lt;code&gt;RegExp.leftContext&lt;/code&gt; ( &lt;code&gt;$`&lt;/code&gt; )</target>
        </trans-unit>
        <trans-unit id="22bdaf6cf0e6c7e8e144ef9cf93d72f4dd25dfc1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;RegExp.rightContext&lt;/code&gt; (&lt;code&gt;$'&lt;/code&gt;)</source>
          <target state="translated">&lt;code&gt;RegExp.rightContext&lt;/code&gt; ( &lt;code&gt;$'&lt;/code&gt; )</target>
        </trans-unit>
        <trans-unit id="901e3ed9a19c003ba09bea4a74e0e24ea6e4b83c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;RegExp&lt;/code&gt; prototype objects and instances</source>
          <target state="translated">&lt;code&gt;RegExp&lt;/code&gt; Objetos e instancias prototipo de RegExp</target>
        </trans-unit>
        <trans-unit id="af9c08f1483927964d654a979be7d5a313d7d093" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;RelativeTimeFormat()&lt;/code&gt; constructor</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ab009d3d930769a6206411674e56ca868feae25b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;RuntimeError()&lt;/code&gt; constructor</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="201f1da8c9bcadca98b84682cba79b6f3b42a6ae" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Seal&lt;/code&gt;-ed Arrays</source>
          <target state="translated">&lt;code&gt;Seal&lt;/code&gt; Matrices con sello</target>
        </trans-unit>
        <trans-unit id="03afb3a1eb7aa8f96f2bb19e4cc53c5861633315" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Set()&lt;/code&gt; constructor</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d61f06a37cebf33215f3a9cb8335e9f3c14d9519" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Set()&lt;/code&gt; without &lt;code&gt;new&lt;/code&gt; throws</source>
          <target state="translated">&lt;code&gt;Set()&lt;/code&gt; sin &lt;code&gt;new&lt;/code&gt; lanzamientos</target>
        </trans-unit>
        <trans-unit id="d6a80c9b6ae5f4647c03a1658debdf4e0a4b0021" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Set&lt;/code&gt; instances</source>
          <target state="translated">&lt;code&gt;Set&lt;/code&gt; instancias</target>
        </trans-unit>
        <trans-unit id="1f92b81cefbafeaa8650e7c3eefc1944acf4c0de" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Set&lt;/code&gt; objects are collections of values. You can iterate through the elements of a set in insertion order. A value in the &lt;code&gt;Set&lt;/code&gt;&lt;strong&gt;may only occur once&lt;/strong&gt;; it is unique in the &lt;code&gt;Set&lt;/code&gt;'s collection.</source>
          <target state="translated">&lt;code&gt;Set&lt;/code&gt; objetos establecidos son colecciones de valores. Puede iterar a trav&amp;eacute;s de los elementos de un conjunto en el orden de inserci&amp;oacute;n. Un valor en el &lt;code&gt;Set&lt;/code&gt; &lt;strong&gt;solo puede aparecer una vez&lt;/strong&gt; ; es &amp;uacute;nico en la colecci&amp;oacute;n del &lt;code&gt;Set&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="9fce2994959b0a2cf78e24f9571af7a693d7743a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;SharedArrayBuffer()&lt;/code&gt; constructor</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0eb5ecf3461603f67c3f67cd2f47b959b3a673c5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;SharedArrayBuffer&lt;/code&gt; accepted as buffer</source>
          <target state="translated">&lt;code&gt;SharedArrayBuffer&lt;/code&gt; aceptado como b&amp;uacute;fer</target>
        </trans-unit>
        <trans-unit id="976224a162080f0db0595246d027b7dd9bf87dec" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;SharedArrayBuffer&lt;/code&gt; constructors are required to be constructed with a &lt;a href=&quot;../../operators/new&quot;&gt;&lt;code&gt;new&lt;/code&gt;&lt;/a&gt; operator. Calling a &lt;code&gt;SharedArrayBuffer&lt;/code&gt; constructor as a function without &lt;code&gt;new&lt;/code&gt; will throw a &lt;a href=&quot;../typeerror&quot;&gt;&lt;code&gt;TypeError&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2fe9d5dcf0aaf6b3ed3111d726e2acaa0c80ed81" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;SharedArrayBuffer&lt;/code&gt; constructors are required to be constructed with a &lt;a href=&quot;../operators/new&quot;&gt;&lt;code&gt;new&lt;/code&gt;&lt;/a&gt; operator. Calling a &lt;code&gt;SharedArrayBuffer&lt;/code&gt; constructor as a function without &lt;code&gt;new&lt;/code&gt; will throw a &lt;a href=&quot;typeerror&quot;&gt;&lt;code&gt;TypeError&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;SharedArrayBuffer&lt;/code&gt; constructores SharedArrayBuffer deben construirse con un &lt;a href=&quot;../operators/new&quot;&gt; &lt;code&gt;new&lt;/code&gt; &lt;/a&gt; operador. Llamar a un constructor &lt;code&gt;SharedArrayBuffer&lt;/code&gt; como una funci&amp;oacute;n sin &lt;code&gt;new&lt;/code&gt; arrojar&amp;aacute; un &lt;a href=&quot;typeerror&quot;&gt; &lt;code&gt;TypeError&lt;/code&gt; &lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="694c118c1629579f247a93ffc7fd668d97bb1cc0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;SharedArrayBuffer&lt;/code&gt; in &lt;code&gt;DataView&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;SharedArrayBuffer&lt;/code&gt; en &lt;code&gt;DataView&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="ade1b689bf7cf96d39fcd871aa0d1d63000489bf" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;SharedArrayBuffer&lt;/code&gt; instances inherit from &lt;code&gt;SharedArrayBuffer.prototype&lt;/code&gt;. As with all constructors, you can change the constructor's prototype object to make changes to all &lt;code&gt;SharedArrayBuffer&lt;/code&gt; instances.</source>
          <target state="translated">&lt;code&gt;SharedArrayBuffer&lt;/code&gt; instancias de SharedArrayBuffer heredan de &lt;code&gt;SharedArrayBuffer.prototype&lt;/code&gt; . Al igual que con todos los constructores, puede cambiar el objeto prototipo del constructor para realizar cambios en todas &lt;code&gt;SharedArrayBuffer&lt;/code&gt; instancias de SharedArrayBuffer .</target>
        </trans-unit>
        <trans-unit id="9a5e37e3a34f142ff9c61a4fba2c983287d191ee" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;SharedArrayBuffer&lt;/code&gt; objects are in principle always available, but unfortunately the constructor on the global object is hidden, unless the two headers mentioned above are set, for compatibility with web content. There is hope that this restriction can be removed in the future. &lt;code&gt;&lt;a href=&quot;../webassembly/memory&quot;&gt;WebAssembly.Memory&lt;/a&gt;&lt;/code&gt; can still be used to get an instance.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8fc56ca15d004263ba5b1f48fa789e9512d92a38" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;SharedArrayBuffer&lt;/code&gt; prototype object</source>
          <target state="translated">&lt;code&gt;SharedArrayBuffer&lt;/code&gt; prototipo SharedArrayBuffer</target>
        </trans-unit>
        <trans-unit id="358db96534e930da46d15248e0771ea729f9e3cb" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;String()&lt;/code&gt; constructor</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="541fe17ffc5feb6b770cbfd3fc0d4488e46ffbe9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;String.fromCodePoint()&lt;/code&gt;, on the other hand, can return 4-byte supplementary characters, as well as the more common 2-byte BMP characters, by specifying their code point (which is equivalent to the UTF-32 code unit):</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="026c37320625e09f6db4af1c40c338f8c8a2154f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;String.raw()&lt;/code&gt; is the only built-in tag function of template strings. It works just like the default template function and performs concatenation. You can even re-implement it with normal JavaScript code.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fd5b052c278a476ba803b4b1ad945f01d09c6da3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;String.raw()&lt;/code&gt; is the only built-in tag function of template strings; it works just like the default template function and performs concatenation. You can even re-implement it with normal JavaScript code.</source>
          <target state="translated">&lt;code&gt;String.raw()&lt;/code&gt; es la &amp;uacute;nica funci&amp;oacute;n de etiqueta incorporada de las cadenas de plantilla; funciona igual que la funci&amp;oacute;n de plantilla predeterminada y realiza la concatenaci&amp;oacute;n. Incluso puede volver a implementarlo con c&amp;oacute;digo JavaScript normal.</target>
        </trans-unit>
        <trans-unit id="3d311077157d6496d82bad21613ee0fd7f94d723" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;String&lt;/code&gt; generic methods</source>
          <target state="translated">&lt;code&gt;String&lt;/code&gt; M&amp;eacute;todos gen&amp;eacute;ricos de cadena</target>
        </trans-unit>
        <trans-unit id="957f6d3c2e44b0fd76092286d9bef8d94dd4f558" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;String&lt;/code&gt; instances</source>
          <target state="translated">&lt;code&gt;String&lt;/code&gt; Instancias de cadena</target>
        </trans-unit>
        <trans-unit id="ee2f64a7a60e1d8dda64b274f58d0013d5a297a8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;String&lt;/code&gt;'s &lt;a href=&quot;global_objects/string/@@iterator&quot;&gt;default iterator&lt;/a&gt; returns the string's code points one by one:</source>
          <target state="translated">&lt;code&gt;String&lt;/code&gt; El &lt;a href=&quot;global_objects/string/@@iterator&quot;&gt;iterador predeterminado de &lt;/a&gt;String devuelve los puntos de c&amp;oacute;digo de la cadena uno por uno:</target>
        </trans-unit>
        <trans-unit id="9a907861454ef51daa226d6d22fe3ffb1a1e97be" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;String&lt;/code&gt;: return &lt;code&gt;true&lt;/code&gt; only if both operands have the same characters in the same order.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7ec85924b7b04029cd624feab4237ad86df2247d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;StringView&lt;/code&gt; &amp;mdash; a C-like representation of strings based on typed arrays</source>
          <target state="translated">&lt;code&gt;StringView&lt;/code&gt; : una representaci&amp;oacute;n similar a C de cadenas basada en matrices escritas</target>
        </trans-unit>
        <trans-unit id="60b4ae79f4c4ca3aa84db8f03aebcd14d7363410" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Symbol(&quot;foo&quot;) + &quot;bar&quot; &lt;/code&gt;throws a &lt;a href=&quot;typeerror&quot;&gt;&lt;code&gt;TypeError&lt;/code&gt;&lt;/a&gt; (can't convert symbol to string). This prevents you from silently creating a new string property name from a symbol, for example.</source>
          <target state="translated">&lt;code&gt;Symbol(&quot;foo&quot;) + &quot;bar&quot; &lt;/code&gt; arroja un &lt;a href=&quot;typeerror&quot;&gt; &lt;code&gt;TypeError&lt;/code&gt; &lt;/a&gt; (no se puede convertir el s&amp;iacute;mbolo en una cadena). Esto le impide crear silenciosamente un nuevo nombre de propiedad de cadena a partir de un s&amp;iacute;mbolo, por ejemplo.</target>
        </trans-unit>
        <trans-unit id="1dc1e462828d4f605f5aeaf3ce482a9527bc0e11" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Symbol()&lt;/code&gt; constructor</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c9a9b316ef591a13d2301c578627b2a8184b49b1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Symbol&lt;/code&gt; prototype</source>
          <target state="translated">&lt;code&gt;Symbol&lt;/code&gt; Prototipo de s&amp;iacute;mbolo</target>
        </trans-unit>
        <trans-unit id="963a6c546f50b738589289258a5c772502b63d81" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;SyntaxError()&lt;/code&gt; constructor</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4a0fbdd60d6177c53a5d8b524c88338047bd6ece" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;SyntaxError&lt;/code&gt; instances</source>
          <target state="translated">&lt;code&gt;SyntaxError&lt;/code&gt; Instancias de SyntaxError</target>
        </trans-unit>
        <trans-unit id="393e41ca447aa46f70bfc53773c21010f27a3781" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;SyntaxError&lt;/code&gt;s are also generated in the following code examples which use &lt;code&gt;break&lt;/code&gt; statements within functions that are nested within a loop, or labeled block that the &lt;code&gt;break&lt;/code&gt; statements are intended to break out of.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c4c162c221ac4fb83c72b25ffbbfe5b1ffd6e42b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Table()&lt;/code&gt; constructor</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7a1df3ead8a0aeaa592ae24a0b035af0bc7189d8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Table&lt;/code&gt; instances</source>
          <target state="translated">&lt;code&gt;Table&lt;/code&gt; Instancias de tabla</target>
        </trans-unit>
        <trans-unit id="a62bcbcff4c2e0bcb718fd7779a3dfd5bc4bf567" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;TypeError()&lt;/code&gt; constructor</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="185c2de94de6aeb9761d5ba13e0e86b799e248a1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;TypeError&lt;/code&gt; instances</source>
          <target state="translated">&lt;code&gt;TypeError&lt;/code&gt; Instancias de TypeError</target>
        </trans-unit>
        <trans-unit id="d2fb3b3a17d823468e0d9433cfcedb993264cf7a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;TypedArray()&lt;/code&gt; without &lt;code&gt;new&lt;/code&gt; throws</source>
          <target state="translated">&lt;code&gt;TypedArray()&lt;/code&gt; sin &lt;code&gt;new&lt;/code&gt; lanzamientos</target>
        </trans-unit>
        <trans-unit id="773caa00fe82d64d0260e842b2fc9e4d6cb87400" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;TypedArray.from()&lt;/code&gt; uses &lt;code&gt;[[Put]]&lt;/code&gt; where &lt;code&gt;Array.from()&lt;/code&gt; uses &lt;code&gt;[[DefineProperty]]&lt;/code&gt;. Hence, when working with &lt;a href=&quot;../proxy&quot;&gt;&lt;code&gt;Proxy&lt;/code&gt;&lt;/a&gt; objects, it calls &lt;a href=&quot;../proxy/proxy/set&quot;&gt;&lt;code&gt;handler.set&lt;/code&gt;&lt;/a&gt; to create new elements rather than &lt;a href=&quot;../proxy/proxy/defineproperty&quot;&gt;&lt;code&gt;handler.defineProperty()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1b4bd4bfbd2ade293baa6571fc777f0c72400e9a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;TypedArray&lt;/code&gt; objects differ from each other in the number of bytes per element and in the way the bytes are interpreted. The &lt;code&gt;BYTES_PER_ELEMENT&lt;/code&gt; constant contains the number of bytes each element in the given &lt;code&gt;TypedArray&lt;/code&gt; has.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5bf82f0112a728b3aa1d32123c6535a3162ee9df" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;TypedArray&lt;/code&gt; objects differ from each other in the number of bytes per element and in the way the bytes are interpreted. The &lt;code&gt;name&lt;/code&gt; property describes of what data type the array consists. The first part can be &lt;code&gt;Int&lt;/code&gt; for &quot;integer&quot; or &lt;code&gt;Uint&lt;/code&gt; for an &quot;unsigned integer&quot;, also &lt;code&gt;Float&lt;/code&gt; for &quot;floating point&quot; is used. The second part is a number describing the bit-size of the array. Finally, the object type is &lt;code&gt;Array&lt;/code&gt;, with &lt;code&gt;ClampedArray&lt;/code&gt; as a special case. Please see &lt;a href=&quot;../uint8clampedarray&quot;&gt;&lt;code&gt;Uint8ClampedArray&lt;/code&gt;&lt;/a&gt; for more details.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="447d6374256296bf26fbc7b786c5e3f68e621761" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Typeof&lt;/code&gt; operator and &lt;code&gt;undefined&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;Typeof&lt;/code&gt; operador e &lt;code&gt;undefined&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="5ce41596ac632d894d8222e798b826827610096c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;URIError()&lt;/code&gt; constructor</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9346949e2074624e5362d491abdd876543e6023f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;URIError&lt;/code&gt; instances</source>
          <target state="translated">&lt;code&gt;URIError&lt;/code&gt; Instancias URIError</target>
        </trans-unit>
        <trans-unit id="485d7b1ee3239b11791f99a4347c824bc0ab2f7e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;UTC()&lt;/code&gt; is a static method of &lt;a href=&quot;../date&quot;&gt;&lt;code&gt;Date&lt;/code&gt;&lt;/a&gt;, so it's called as &lt;code&gt;Date.UTC()&lt;/code&gt; rather than as a method of a &lt;a href=&quot;../date&quot;&gt;&lt;code&gt;Date&lt;/code&gt;&lt;/a&gt; instance.</source>
          <target state="translated">&lt;code&gt;UTC()&lt;/code&gt; es un m&amp;eacute;todo est&amp;aacute;tico de &lt;a href=&quot;../date&quot;&gt; &lt;code&gt;Date&lt;/code&gt; &lt;/a&gt; , por lo que se llama como &lt;code&gt;Date.UTC()&lt;/code&gt; lugar de como un m&amp;eacute;todo de una instancia de &lt;a href=&quot;../date&quot;&gt; &lt;code&gt;Date&lt;/code&gt; &lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="bda763fc1cf6d424a141aa626488983c45c2ca10" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;UTC()&lt;/code&gt; takes comma-delimited date and time parameters and returns the number of milliseconds between January 1, 1970, 00:00:00, universal time and the specified date and time.</source>
          <target state="translated">&lt;code&gt;UTC()&lt;/code&gt; toma par&amp;aacute;metros de fecha y hora delimitados por comas y devuelve el n&amp;uacute;mero de milisegundos entre el 1 de enero de 1970, 00:00:00, hora universal y la fecha y hora especificadas.</target>
        </trans-unit>
        <trans-unit id="54a0222ec25be2720a01373f3636d2978b84d8ac" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Uint16Array()&lt;/code&gt; constructor</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7e6e7a5ffdffc9021c092c72ccaaba4f2e64fcbd" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Uint16Array()&lt;/code&gt; without &lt;code&gt;new&lt;/code&gt; throws</source>
          <target state="translated">&lt;code&gt;Uint16Array()&lt;/code&gt; sin &lt;code&gt;new&lt;/code&gt; lanzamientos</target>
        </trans-unit>
        <trans-unit id="74a1d80e3e57591d71e2205e004d0d02d85276bb" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Uint16Array&lt;/code&gt; prototype</source>
          <target state="translated">&lt;code&gt;Uint16Array&lt;/code&gt; Prototipo Uint16Array</target>
        </trans-unit>
        <trans-unit id="4c8e814c6371a0758d623c702025602fcc5928a5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Uint32Array()&lt;/code&gt; constructor</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="611ad5dd041251513f59b98b814862ef0c0f3509" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Uint32Array()&lt;/code&gt; without &lt;code&gt;new&lt;/code&gt; throws</source>
          <target state="translated">&lt;code&gt;Uint32Array()&lt;/code&gt; sin &lt;code&gt;new&lt;/code&gt; lanzamientos</target>
        </trans-unit>
        <trans-unit id="4a55b60c159dc73bd9dcc8397e5cd20dda0d1c0c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Uint32Array&lt;/code&gt; prototype</source>
          <target state="translated">&lt;code&gt;Uint32Array&lt;/code&gt; Prototipo Uint32Array</target>
        </trans-unit>
        <trans-unit id="57d26d5791c35dfbe491dd5db9baad164e3b864a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Uint8Array()&lt;/code&gt; constructor</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c1b499796aa64d7c04a80ed44405eed3064fc43f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Uint8Array()&lt;/code&gt; without &lt;code&gt;new&lt;/code&gt; throws</source>
          <target state="translated">&lt;code&gt;Uint8Array()&lt;/code&gt; sin &lt;code&gt;new&lt;/code&gt; lanzamientos</target>
        </trans-unit>
        <trans-unit id="31e72035046a0e9477a2259121e9a3e0b40f17b2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Uint8Array&lt;/code&gt; prototype</source>
          <target state="translated">&lt;code&gt;Uint8Array&lt;/code&gt; Prototipo de Uint8Array</target>
        </trans-unit>
        <trans-unit id="c972df39997b34a6c0310e46ef259e0f5a1b5f11" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Uint8ClampedArray()&lt;/code&gt; constructor</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a6957e8798c1c746c336c6d6ecaaa7eb1ae361dd" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Uint8ClampedArray()&lt;/code&gt; without &lt;code&gt;new&lt;/code&gt; throws</source>
          <target state="translated">&lt;code&gt;Uint8ClampedArray()&lt;/code&gt; sin &lt;code&gt;new&lt;/code&gt; lanzamientos</target>
        </trans-unit>
        <trans-unit id="0bb1807b874692b9f5f2ec19b59c221125cfb6c7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Uint8ClampedArray&lt;/code&gt; prototype</source>
          <target state="translated">&lt;code&gt;Uint8ClampedArray&lt;/code&gt; Prototipo Uint8ClampedArray</target>
        </trans-unit>
        <trans-unit id="3f4c761b5e2888241d269b969f3a10984c07eca8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Void&lt;/code&gt; operator and &lt;code&gt;undefined&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;Void&lt;/code&gt; Operador vac&amp;iacute;o e &lt;code&gt;undefined&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="d0c1e4954b2e20c960af9358f0e0212b5bd5e971" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;WeakMap()&lt;/code&gt; constructor</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ba2a9fa90f329749427e6240e67bc971f9b9b621" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;WeakMap()&lt;/code&gt; without &lt;code&gt;new&lt;/code&gt; throws</source>
          <target state="translated">&lt;code&gt;WeakMap()&lt;/code&gt; sin &lt;code&gt;new&lt;/code&gt; lanzamientos</target>
        </trans-unit>
        <trans-unit id="06853438c8ea15de5f6857455ca09cd186bdf823" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;WeakMap.prototype&lt;/code&gt; is itself just an ordinary object:</source>
          <target state="translated">&lt;code&gt;WeakMap.prototype&lt;/code&gt; es en s&amp;iacute; mismo un objeto ordinario:</target>
        </trans-unit>
        <trans-unit id="5bff6adc35bafe83014779e372f5ec78848dbe3f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;WeakMap&lt;/code&gt; There is no method to obtain a list of the keys. If they were, the list would depend on the state of garbage collection, introducing non-determinism. If you want to have a list of keys, you should use a &lt;a href=&quot;map&quot;&gt;&lt;code&gt;Map&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b87d565c959998a4bd024f99645ab8acaa498666" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;WeakMap&lt;/code&gt; and &lt;code&gt;WeakSet&lt;/code&gt; objects require object keys</source>
          <target state="translated">&lt;code&gt;WeakMap&lt;/code&gt; objetos WeakMap y &lt;code&gt;WeakSet&lt;/code&gt; requieren claves de objeto</target>
        </trans-unit>
        <trans-unit id="83c5e696b7470198277f00d16ad92acea89ede24" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;WeakMap&lt;/code&gt; in the JavaScript guide</source>
          <target state="translated">&lt;code&gt;WeakMap&lt;/code&gt; en la gu&amp;iacute;a de JavaScript</target>
        </trans-unit>
        <trans-unit id="1ca5b9af4fe2a0160dd07e19c618f1c599524fd7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;WeakMap&lt;/code&gt; instances</source>
          <target state="translated">&lt;code&gt;WeakMap&lt;/code&gt; Instancias de WeakMap</target>
        </trans-unit>
        <trans-unit id="6573142203b1533aefc8dd3c63d4e37c41e1bcab" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;WeakRef()&lt;/code&gt; constructor</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b000a344d761e25504218f9b82d55629f3e08ad3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;WeakSet()&lt;/code&gt; constructor</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="06dff1f18e6a87478f9e9d0096e88834d404f1f7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;WeakSet.prototype&lt;/code&gt; is itself just an ordinary object:</source>
          <target state="translated">&lt;code&gt;WeakSet.prototype&lt;/code&gt; es en s&amp;iacute; mismo un objeto ordinario:</target>
        </trans-unit>
        <trans-unit id="fac397a4016c006f74ce6d33be39720720eb2ad6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;WeakSet&lt;/code&gt; instances</source>
          <target state="translated">&lt;code&gt;WeakSet&lt;/code&gt; Instancias WeakSet</target>
        </trans-unit>
        <trans-unit id="059de5eafbc88297797b683bee1abb4c63f54a7f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;WeakSet&lt;/code&gt; objects are collections of objects. An object in the &lt;code&gt;WeakSet&lt;/code&gt; may occur only once; it is unique in the &lt;code&gt;WeakSet&lt;/code&gt;'s collection.</source>
          <target state="translated">&lt;code&gt;WeakSet&lt;/code&gt; objetos WeakSet son colecciones de objetos. Un objeto en &lt;code&gt;WeakSet&lt;/code&gt; puede aparecer solo una vez; es &amp;uacute;nico en la colecci&amp;oacute;n de &lt;code&gt;WeakSet&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="9cfb49531f17908e2f314fe08aec439a3f5655b0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;WeakSet&lt;/code&gt; objects are collections of objects. Just as with &lt;a href=&quot;set&quot;&gt;&lt;code&gt;Set&lt;/code&gt;&lt;/a&gt;s, each object in a &lt;code&gt;WeakSet&lt;/code&gt; may occur only once; all objects in a &lt;code&gt;WeakSet&lt;/code&gt;'s collection are unique.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d481a1df4d52801b921dd1c0aaf64403ee49a864" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;WeakSet&lt;/code&gt;s are collections of &lt;strong&gt;objects only&lt;/strong&gt;. They cannot contain arbitrary values of any type, as &lt;a href=&quot;set&quot;&gt;&lt;code&gt;Set&lt;/code&gt;&lt;/a&gt;s can.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="30c4fc1f2d33cc015027e7da4bb77347eb56df72" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;WeakSet&lt;/code&gt;s are ideal for this purpose:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d453c8b8014fa71df7de4e97471f2e8280d52f9f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Writable&lt;/code&gt;: If this attribute set to &lt;code&gt;false&lt;/code&gt;, the value of the property cannot be changed.</source>
          <target state="translated">&lt;code&gt;Writable&lt;/code&gt; : si este atributo se establece en &lt;code&gt;false&lt;/code&gt; , el valor de la propiedad no se puede cambiar.</target>
        </trans-unit>
        <trans-unit id="8edb0b191e85e764e4009acc85f62e49faf4a154" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;\u&lt;var&gt;XXXX&lt;/var&gt;&lt;/code&gt; (where &lt;code&gt;&lt;var&gt;XXXX&lt;/var&gt;&lt;/code&gt; is 4 hex digits; range of &lt;code&gt;0x0000&lt;/code&gt;&amp;ndash;&lt;code&gt;0xFFFF&lt;/code&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6ca0ada46c2db337c3c466182bee5ed23890fa2f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;\u{&lt;var&gt;X&lt;/var&gt;}&lt;/code&gt; ... &lt;code&gt;\u{&lt;var&gt;XXXXXX&lt;/var&gt;}&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d1704a7be629607f350b16ec85790ba13cfee3a3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;\u{X}&lt;/code&gt; ... &lt;code&gt;\u{XXXXXX}&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;\u{X}&lt;/code&gt; ... &lt;code&gt;\u{XXXXXX}&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="76f51741e9c758f6ba3a4fcb94e013e1a8f04e7a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;\w&lt;/code&gt; and &lt;code&gt;\W&lt;/code&gt; only matches ASCII based characters; for example, &lt;code&gt;a&lt;/code&gt; to &lt;code&gt;z&lt;/code&gt;, &lt;code&gt;A&lt;/code&gt; to &lt;code&gt;Z&lt;/code&gt;, &lt;code&gt;0&lt;/code&gt; to &lt;code&gt;9&lt;/code&gt;, and &lt;code&gt;_&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cb904c02769fb826a92f1daca094dc3a49ecb987" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;apply&lt;/code&gt; is very similar to &lt;a href=&quot;call&quot;&gt;&lt;code&gt;call()&lt;/code&gt;&lt;/a&gt;, except for the type of arguments it supports. You use an arguments array instead of a list of arguments (parameters). With &lt;code&gt;apply&lt;/code&gt;, you can also use an array literal, for example, &lt;code&gt;&lt;em&gt;func&lt;/em&gt;.apply(this, ['eat', 'bananas'])&lt;/code&gt;, or an &lt;a href=&quot;../array&quot;&gt;&lt;code&gt;Array&lt;/code&gt;&lt;/a&gt; object, for example, &lt;code&gt;&lt;em&gt;func&lt;/em&gt;.apply(this, new Array('eat', 'bananas'))&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;apply&lt;/code&gt; es muy similar a &lt;a href=&quot;call&quot;&gt; &lt;code&gt;call()&lt;/code&gt; &lt;/a&gt; , excepto por el tipo de argumentos que admite. Utiliza una matriz de argumentos en lugar de una lista de argumentos (par&amp;aacute;metros). Con &lt;code&gt;apply&lt;/code&gt; , tambi&amp;eacute;n puede usar un literal de matriz, por ejemplo, &lt;code&gt;&lt;em&gt;func&lt;/em&gt;.apply(this, ['eat', 'bananas'])&lt;/code&gt; , o un objeto &lt;a href=&quot;../array&quot;&gt; &lt;code&gt;Array&lt;/code&gt; &lt;/a&gt; , por ejemplo, &lt;code&gt;&lt;em&gt;func&lt;/em&gt;.apply(this, new Array('eat', 'bananas'))&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="834e7e8de444204025622dfff22dc4cc64d0c99d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;apply&lt;/code&gt; is very similar to &lt;a href=&quot;call&quot;&gt;&lt;code&gt;call()&lt;/code&gt;&lt;/a&gt;, except for the type of arguments it supports. You use an arguments array instead of a list of arguments (parameters). With &lt;code&gt;apply&lt;/code&gt;, you can also use an array literal, for example, &lt;code&gt;&lt;var&gt;func&lt;/var&gt;.apply(this, ['eat', 'bananas'])&lt;/code&gt;, or an &lt;a href=&quot;../array&quot;&gt;&lt;code&gt;Array&lt;/code&gt;&lt;/a&gt; object, for example, &lt;code&gt;&lt;var&gt;func&lt;/var&gt;.apply(this, new Array('eat', 'bananas'))&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ed94fe1714597ff99435ce3873d622e408f55825" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;apply&lt;/code&gt; to the rescue!</source>
          <target state="translated">&lt;code&gt;apply&lt;/code&gt; al rescate!</target>
        </trans-unit>
        <trans-unit id="1a40b9836c28a42eb40a6c4c4c03388261cef287" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;arguments&lt;/code&gt; doesn't alias named function arguments</source>
          <target state="translated">&lt;code&gt;arguments&lt;/code&gt; no tienen alias nombrados argumentos de funci&amp;oacute;n</target>
        </trans-unit>
        <trans-unit id="11797c48fbe5569e9f59ce5c8a3248e8d916e8fc" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;arguments&lt;/code&gt; is an &lt;code&gt;Array&lt;/code&gt;-like object accessible inside &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Functions&quot;&gt;functions&lt;/a&gt; that contains the values of the arguments passed to that function.</source>
          <target state="translated">&lt;code&gt;arguments&lt;/code&gt; es un objeto similar a &lt;code&gt;Array&lt;/code&gt; accesible dentro de &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Functions&quot;&gt;funciones&lt;/a&gt; que contiene los valores de los argumentos pasados ​​a esa funci&amp;oacute;n.</target>
        </trans-unit>
        <trans-unit id="1413a9600bc526c12a6896dab84d86e1cd12d220" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;arguments&lt;/code&gt; is an &lt;code&gt;Array&lt;/code&gt;-like object accessible inside &lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Functions&quot;&gt;functions&lt;/a&gt; that contains the values of the arguments passed to that function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e9f26671650a450c1763ae9c5d95eb3d93087962" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;arguments&lt;/code&gt;: always access function arguments via their name or perform a copy of the arguments object using:</source>
          <target state="translated">&lt;code&gt;arguments&lt;/code&gt; : siempre acceda a los argumentos de la funci&amp;oacute;n a trav&amp;eacute;s de su nombre o realice una copia del objeto de argumentos usando:</target>
        </trans-unit>
        <trans-unit id="e56044c126ce7ea9ee354877ad51896735cadb59" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;array&lt;/code&gt;Optional</source>
          <target state="translated">&lt;code&gt;array&lt;/code&gt;Optional</target>
        </trans-unit>
        <trans-unit id="404a2b042516b952ef414e5a84429d8e6243569c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;async function&lt;/code&gt; expression</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a82639344d73aafa8f5b422c73c443f2937fdf68" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;baseName&lt;/code&gt; returns the &lt;code&gt;language [&quot;-&quot; script] [&quot;-&quot; region] *(&quot;-&quot; variant)&lt;/code&gt; subsequence of the &lt;a href=&quot;https://www.unicode.org/reports/tr35/#Identifiers&quot;&gt;unicode_language_id grammar&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="043df3f43f3f4e40e685d8d3e646d4725a01ebb3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;begin&lt;/code&gt;Optional</source>
          <target state="translated">&lt;code&gt;begin&lt;/code&gt;Optional</target>
        </trans-unit>
        <trans-unit id="2db6404b54bf7bbb8ebcce50e8245f60f4e6cac9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;bind()&lt;/code&gt; is also helpful in cases where you want to create a shortcut to a function which requires a specific &lt;code&gt;this&lt;/code&gt; value.</source>
          <target state="translated">&lt;code&gt;bind()&lt;/code&gt; tambi&amp;eacute;n es &amp;uacute;til en los casos en los que desee crear un acceso directo a una funci&amp;oacute;n que requiera un valor espec&amp;iacute;fico de &lt;code&gt;this&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="55e2c210d071867bf1d329374d1e52d98bbaf2ab" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;byteLength&lt;/code&gt;Optional</source>
          <target state="translated">&lt;code&gt;byteLength&lt;/code&gt;Optional</target>
        </trans-unit>
        <trans-unit id="6978f11195abed41788f154dab42c60de2021bfb" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;byteOffset&lt;/code&gt;Optional</source>
          <target state="translated">&lt;code&gt;byteOffset&lt;/code&gt;Optional</target>
        </trans-unit>
        <trans-unit id="23e35f4831a4b726b4898d17186ce1efe269dd34" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;call()&lt;/code&gt; provides a new value of &lt;code&gt;this&lt;/code&gt; to the function/method. With &lt;code&gt;call()&lt;/code&gt;, you can write a method once and then inherit it in another object, without having to rewrite the method for the new object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8102d9c9c43038d1f942c33abe1f578b86b0bbae" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;call()&lt;/code&gt; provides a new value of &lt;strong&gt;this&lt;/strong&gt; to the function/method. With &lt;code&gt;call&lt;/code&gt;, you can write a method once and then inherit it in another object, without having to rewrite the method for the new object.</source>
          <target state="translated">&lt;code&gt;call()&lt;/code&gt; proporciona un nuevo valor de &lt;strong&gt;esto&lt;/strong&gt; a la funci&amp;oacute;n / m&amp;eacute;todo. Con la &lt;code&gt;call&lt;/code&gt; , puede escribir un m&amp;eacute;todo una vez y luego heredarlo en otro objeto, sin tener que volver a escribir el m&amp;eacute;todo para el nuevo objeto.</target>
        </trans-unit>
        <trans-unit id="b34459a1e9fa83cb7a51ab21b17b2292f23ac00d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;callback&lt;/code&gt; is invoked with 3 arguments:</source>
          <target state="translated">&lt;code&gt;callback&lt;/code&gt; se invoca con 3 argumentos:</target>
        </trans-unit>
        <trans-unit id="1b683124bcf90e20952715111bf3315fe756aae4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;callback&lt;/code&gt; is invoked with &lt;strong&gt;three arguments&lt;/strong&gt;:</source>
          <target state="translated">&lt;code&gt;callback&lt;/code&gt; se invoca con &lt;strong&gt;tres argumentos&lt;/strong&gt; :</target>
        </trans-unit>
        <trans-unit id="8d223df244085ecabc4844335dd03fa473224d2a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;callback&lt;/code&gt; is invoked with three arguments:</source>
          <target state="translated">&lt;code&gt;callback&lt;/code&gt; se invoca con tres argumentos:</target>
        </trans-unit>
        <trans-unit id="8f1ce3797aea99bfd523db41b004b5bfb2fe7251" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;callback&lt;/code&gt; is invoked with three arguments: the value of the element, the index of the element, and the Array object being traversed.</source>
          <target state="translated">&lt;code&gt;callback&lt;/code&gt; se invoca con tres argumentos: el valor del elemento, el &amp;iacute;ndice del elemento y el objeto Array que se atraviesa.</target>
        </trans-unit>
        <trans-unit id="19cb9b2e0bdbec64e5ee2e03fc1f40f47bf02621" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;callback&lt;/code&gt; is invoked with three arguments: the value of the element, the index of the element, and the array object being traversed.</source>
          <target state="translated">&lt;code&gt;callback&lt;/code&gt; se invoca con tres argumentos: el valor del elemento, el &amp;iacute;ndice del elemento y el objeto de matriz que se atraviesa.</target>
        </trans-unit>
        <trans-unit id="e8801a2e66e2d1f55761428f8e246b7301aadda1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;callback&lt;/code&gt; is invoked with three arguments: the value of the element, the index of the element, and the typed array object being traversed.</source>
          <target state="translated">&lt;code&gt;callback&lt;/code&gt; se invoca con tres argumentos: el valor del elemento, el &amp;iacute;ndice del elemento y el objeto de matriz con tipo que se recorre.</target>
        </trans-unit>
        <trans-unit id="7b5ce8375a4923fb5df1cd9966bc9fb3ff227bc9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;callee&lt;/code&gt; is a property of the &lt;code&gt;arguments&lt;/code&gt; object. It can be used to refer to the currently executing function inside the function body of that function. This is useful when the name of the function is unknown, such as within a function expression with no name (also called &quot;anonymous functions&quot;).</source>
          <target state="translated">&lt;code&gt;callee&lt;/code&gt; es una propiedad del objeto de &lt;code&gt;arguments&lt;/code&gt; . Puede usarse para referirse a la funci&amp;oacute;n que se est&amp;aacute; ejecutando actualmente dentro del cuerpo de la funci&amp;oacute;n de esa funci&amp;oacute;n. Esto es &amp;uacute;til cuando se desconoce el nombre de la funci&amp;oacute;n, como dentro de una expresi&amp;oacute;n de funci&amp;oacute;n sin nombre (tambi&amp;eacute;n llamadas &quot;funciones an&amp;oacute;nimas&quot;).</target>
        </trans-unit>
        <trans-unit id="a912464486baab4e26f9669d4a567ab63b8397ce" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;case &lt;var&gt;valueN&lt;/var&gt;&lt;/code&gt;Optional</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6c1a69880471124e8cb9d048188b49911990a81e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;case valueN&lt;/code&gt;Optional</source>
          <target state="translated">&lt;code&gt;case valueN&lt;/code&gt; Opcional</target>
        </trans-unit>
        <trans-unit id="9f56292d53f4a10e95780fd1c744b10f929891de" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;caseFirst&lt;/code&gt; option</source>
          <target state="translated">&lt;code&gt;caseFirst&lt;/code&gt; opci&amp;oacute;n</target>
        </trans-unit>
        <trans-unit id="ed3106e3af0c8885a883e09c6209604cd397c987" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;caseFirst&lt;/code&gt; values</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="72cc25137abaff335761bfdde99edaacb8ca9d8f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;catch_statements_1&lt;/code&gt;, &lt;code&gt;catch_statements_2&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;catch_statements_1&lt;/code&gt; , &lt;code&gt;catch_statements_2&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="15ae45fe31540f354cd2dcafd8238ff21b93520c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;charCodeAt()&lt;/code&gt; returns &lt;a href=&quot;../nan&quot;&gt;&lt;code&gt;NaN&lt;/code&gt;&lt;/a&gt; if the given index is less than 0 or is equal to or greater than the length of the string.</source>
          <target state="translated">&lt;code&gt;charCodeAt()&lt;/code&gt; devuelve &lt;a href=&quot;../nan&quot;&gt; &lt;code&gt;NaN&lt;/code&gt; &lt;/a&gt; si el &amp;iacute;ndice dado es menor que 0 o es igual o mayor que la longitud de la cadena.</target>
        </trans-unit>
        <trans-unit id="5561ef4580972f409c7a7acdb87dc70250892c07" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;charCodeAt()&lt;/code&gt; returns &lt;a href=&quot;../nan&quot;&gt;&lt;code&gt;NaN&lt;/code&gt;&lt;/a&gt; if the given index is less than &lt;code&gt;0&lt;/code&gt;, or if it is equal to or greater than the &lt;code&gt;length&lt;/code&gt; of the string.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="276aae309017edf2e8791e19cb51f0f15a6fc973" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;childModule1.js&lt;/code&gt;: exporting &lt;code&gt;myFunction&lt;/code&gt; and &lt;code&gt;myVariable&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="09f8b5b707d773d5651bb0dc81bf4fc4faf11802" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;childModule2.js&lt;/code&gt;: exporting &lt;code&gt;myClass&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="461b470fcfda3a7797856c9bca86ab7f8902ec4e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;class&lt;/code&gt; declaration</source>
          <target state="translated">&lt;code&gt;class&lt;/code&gt; declaraci&amp;oacute;n de clase</target>
        </trans-unit>
        <trans-unit id="45206c79cec506b470947f6aa2660fcb15d1132a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;class&lt;/code&gt; expression</source>
          <target state="translated">&lt;code&gt;class&lt;/code&gt; expresi&amp;oacute;n de clase</target>
        </trans-unit>
        <trans-unit id="f49afc836f9ef9799e93bf3c927fbf2f9ef345e7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;class&lt;/code&gt; statement</source>
          <target state="translated">&lt;code&gt;class&lt;/code&gt; declaraci&amp;oacute;n de clase</target>
        </trans-unit>
        <trans-unit id="c95026abc2717d7392024a4edfbabc94e0227fc0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;compactDisplay&lt;/code&gt; option</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fc7b9dfaf8c17862dbf3fed450c41f3ecb9c59e8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;compareFunction(a, b)&lt;/code&gt; must always return the same value when given a specific pair of elements &lt;code&gt;a&lt;/code&gt; and &lt;code&gt;b&lt;/code&gt; as its two arguments. If inconsistent results are returned, then the sort order is undefined.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cb33b070076760817bb0dea01f284644d7704346" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;compareFunction(a, b)&lt;/code&gt; must always return the same value when given a specific pair of elements a and b as its two arguments. If inconsistent results are returned then the sort order is undefined.</source>
          <target state="translated">&lt;code&gt;compareFunction(a, b)&lt;/code&gt; siempre debe devolver el mismo valor cuando se le da un par espec&amp;iacute;fico de elementos ayb como sus dos argumentos. Si se devuelven resultados inconsistentes, el orden de clasificaci&amp;oacute;n no est&amp;aacute; definido.</target>
        </trans-unit>
        <trans-unit id="4eaf8b79e4165f764a657b6e9689b842d9530f21" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;compareFunction&lt;/code&gt;Optional</source>
          <target state="translated">&lt;code&gt;compareFunction&lt;/code&gt;Optional</target>
        </trans-unit>
        <trans-unit id="e133550631b748a8dcb720b26bbbed184e8bdbb3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;const&lt;/code&gt; and immutability</source>
          <target state="translated">&lt;code&gt;const&lt;/code&gt; ante e inmutabilidad</target>
        </trans-unit>
        <trans-unit id="6e472cacd6232538a972135f520492bb8074bb0e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;const&lt;/code&gt;, &lt;code&gt;let&lt;/code&gt; or &lt;code&gt;var&lt;/code&gt;?</source>
          <target state="translated">&lt;code&gt;const&lt;/code&gt; , &lt;code&gt;let&lt;/code&gt; o &lt;code&gt;var&lt;/code&gt; ?</target>
        </trans-unit>
        <trans-unit id="e01fa501b4322ef44ce95c0c175da63ae3bbd392" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;continue&lt;/code&gt;, &lt;code&gt;break&lt;/code&gt;, &lt;code&gt;throw&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;continue&lt;/code&gt; , &lt;code&gt;break&lt;/code&gt; , &lt;code&gt;throw&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="a25aea120629c5b5ea9988ec84a632696d656e63" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;count&lt;/code&gt;Optional</source>
          <target state="translated">&lt;code&gt;count&lt;/code&gt;Optional</target>
        </trans-unit>
        <trans-unit id="629babd7fb225885294b7a6c26058b4e00d50540" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;currencySign&lt;/code&gt; option</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b65412d24e8afe5c69c59b8f9f74d81f874963ec" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;currentIndex&lt;/code&gt;Optional</source>
          <target state="translated">&lt;code&gt;currentIndex&lt;/code&gt;Optional</target>
        </trans-unit>
        <trans-unit id="e3862df225c9e8ff947612f8eee5b741056a97f2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;date&lt;/code&gt;Optional</source>
          <target state="translated">&lt;code&gt;date&lt;/code&gt;Optional</target>
        </trans-unit>
        <trans-unit id="c2555aecd5f6ec0d770f3fdb6bd2f086151603c3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;day&lt;/code&gt;Optional</source>
          <target state="translated">&lt;code&gt;day&lt;/code&gt;Optional</target>
        </trans-unit>
        <trans-unit id="eb02f953c91bdad6722f3d3783135f7290792dfa" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;default&lt;/code&gt; keyword in &lt;code&gt;switch&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;default&lt;/code&gt; palabra clave predeterminada en el &lt;code&gt;switch&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="7f3e7550c678520ca60f63db6b375ada90b056e6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;default&lt;/code&gt; keyword with &lt;code&gt;export&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;default&lt;/code&gt; palabra clave predeterminada con &lt;code&gt;export&lt;/code&gt; aci&amp;oacute;n</target>
        </trans-unit>
        <trans-unit id="ecabcd6884ed0583a484f96388a0606249e0622f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;default&lt;/code&gt;Optional</source>
          <target state="translated">&lt;code&gt;default&lt;/code&gt;Optional</target>
        </trans-unit>
        <trans-unit id="da35f1ff7c6dd5e16e2d0b59152de7fae2689c36" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;delete&lt;/code&gt; and the prototype chain</source>
          <target state="translated">&lt;code&gt;delete&lt;/code&gt; y la cadena de prototipos</target>
        </trans-unit>
        <trans-unit id="d7553176536b328979b9e89f9c43e945f24dcf77" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;delete&lt;/code&gt; operator</source>
          <target state="translated">&lt;code&gt;delete&lt;/code&gt; operador</target>
        </trans-unit>
        <trans-unit id="05980f17e4337db7f5c8c25437f5ff5b3b78bd53" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;deleteCount&lt;/code&gt;Optional</source>
          <target state="translated">&lt;code&gt;deleteCount&lt;/code&gt;Optional</target>
        </trans-unit>
        <trans-unit id="6c446dc8939a859b73b187440b0e5c5353baebe4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;depth&lt;/code&gt;Optional</source>
          <target state="translated">&lt;code&gt;depth&lt;/code&gt;Optional</target>
        </trans-unit>
        <trans-unit id="7887c816caf8050fa8cfb3b7e9983ce98ece533e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;description&lt;/code&gt;Optional</source>
          <target state="translated">&lt;code&gt;description&lt;/code&gt;Optional</target>
        </trans-unit>
        <trans-unit id="4f4845f14c3933c5a299f4216e6180ea5ea01291" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;document.all&lt;/code&gt; willful violation of the standard</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="98c0d36da02b5598b2f2d0cde960f6b616e4cb6b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;done&lt;/code&gt; (boolean)</source>
          <target state="translated">&lt;code&gt;done&lt;/code&gt; (booleano)</target>
        </trans-unit>
        <trans-unit id="48cebe4d861a21baf77a09ab963fa2fee1d3abc3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;encodeURI()&lt;/code&gt; differs from &lt;a href=&quot;encodeuricomponent&quot;&gt;&lt;code&gt;encodeURIComponent()&lt;/code&gt;&lt;/a&gt; as follows:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7c423c9b97172f97ae484653ed99407b9f1ca361" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;encodeURI()&lt;/code&gt; escapes all characters &lt;strong&gt;except&lt;/strong&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6d9f08e7012cddc9bb4aae7dc03dfb9d7c8c0699" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;encodeURI&lt;/code&gt; escapes all characters &lt;strong&gt;except&lt;/strong&gt;:</source>
          <target state="translated">&lt;code&gt;encodeURI&lt;/code&gt; escapa a todos los caracteres &lt;strong&gt;excepto&lt;/strong&gt; :</target>
        </trans-unit>
        <trans-unit id="0b21bd24927735d5778208ba887405bc83796032" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;encodeURIComponent()&lt;/code&gt; differs from &lt;code&gt;encodeURI&lt;/code&gt; as follows:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1fab764458ff93b0f2aac61af7740d7c11e0c1f7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;encodeURIComponent()&lt;/code&gt; escapes all characters &lt;strong&gt;except&lt;/strong&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b6b3ec6e6a492e76b558de1a3d4bde2dfd341658" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;encodeURIComponent&lt;/code&gt; differs from &lt;code&gt;encodeURI&lt;/code&gt; as follows:</source>
          <target state="translated">&lt;code&gt;encodeURIComponent&lt;/code&gt; se diferencia de &lt;code&gt;encodeURI&lt;/code&gt; de la siguiente manera:</target>
        </trans-unit>
        <trans-unit id="1b4027c5a1b271176f842f97cc4ba39af2defe6b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;encodeURIComponent&lt;/code&gt; escapes all characters &lt;strong&gt;except&lt;/strong&gt;:</source>
          <target state="translated">&lt;code&gt;encodeURIComponent&lt;/code&gt; escapa a todos los caracteres &lt;strong&gt;excepto&lt;/strong&gt; :</target>
        </trans-unit>
        <trans-unit id="215ea8eb55071fe1cf9e4e79b9fbe718afa52c13" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;end&lt;/code&gt;Optional</source>
          <target state="translated">&lt;code&gt;end&lt;/code&gt;Optional</target>
        </trans-unit>
        <trans-unit id="8b5b1b29b6a8ade130b7d7071b108d2daca6dedb" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;eval()&lt;/code&gt; is a dangerous function, which executes the code it's passed with the privileges of the caller. If you run &lt;code&gt;eval()&lt;/code&gt; with a string that could be affected by a malicious party, you may end up running malicious code on the user's machine with the permissions of your webpage / extension. More importantly, a third-party code can see the scope in which &lt;code&gt;eval()&lt;/code&gt; was invoked, which can lead to possible attacks in ways to which the similar &lt;a href=&quot;function&quot;&gt;&lt;code&gt;Function&lt;/code&gt;&lt;/a&gt; is not susceptible.</source>
          <target state="translated">&lt;code&gt;eval()&lt;/code&gt; es una funci&amp;oacute;n peligrosa, que ejecuta el c&amp;oacute;digo que se pasa con los privilegios de la persona que llama. Si ejecuta &lt;code&gt;eval()&lt;/code&gt; con una cadena que podr&amp;iacute;a verse afectada por una parte maliciosa, puede terminar ejecutando c&amp;oacute;digo malicioso en la m&amp;aacute;quina del usuario con los permisos de su p&amp;aacute;gina web / extensi&amp;oacute;n. M&amp;aacute;s importante a&amp;uacute;n, un c&amp;oacute;digo de terceros puede ver el alcance en el que se invoc&amp;oacute; &lt;code&gt;eval()&lt;/code&gt; , lo que puede conducir a posibles ataques en formas a las que la &lt;a href=&quot;function&quot;&gt; &lt;code&gt;Function&lt;/code&gt; &lt;/a&gt; similar no es susceptible.</target>
        </trans-unit>
        <trans-unit id="d444ec6caafce939d286f3f1eb6742f337855da7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;eval()&lt;/code&gt; is a function property of the global object.</source>
          <target state="translated">&lt;code&gt;eval()&lt;/code&gt; es una propiedad de funci&amp;oacute;n del objeto global.</target>
        </trans-unit>
        <trans-unit id="00970df4a544864f72414b4fe0a99cc1510e380c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;eval()&lt;/code&gt; is also slower than the alternatives, since it has to invoke the JS interpreter, while many other constructs are optimized by modern JS engines.</source>
          <target state="translated">&lt;code&gt;eval()&lt;/code&gt; tambi&amp;eacute;n es m&amp;aacute;s lento que las alternativas, ya que tiene que invocar al int&amp;eacute;rprete JS, mientras que muchas otras construcciones est&amp;aacute;n optimizadas por motores JS modernos.</target>
        </trans-unit>
        <trans-unit id="703776839e4af188e662e930ccb4c5749b90877a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;eval()&lt;/code&gt; is also slower than the alternatives, since it has to invoke the JavaScript interpreter, while many other constructs are optimized by modern JS engines.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cf0f9927059fbe1fc1127829693be37c0a3a8dd9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;eval()&lt;/code&gt; is slow and should be avoided whenever possible. Also, &lt;code&gt;strFormControl&lt;/code&gt; would have to hold an identifier, which is not required for names and &lt;code&gt;id&lt;/code&gt;s of form controls. It is better to use bracket notation instead:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="89eac8b0f94f419df7d7b3c0485c55fef82a781b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;eval()&lt;/code&gt; returns the value of the last expression evaluated.</source>
          <target state="translated">&lt;code&gt;eval()&lt;/code&gt; devuelve el valor de la &amp;uacute;ltima expresi&amp;oacute;n evaluada.</target>
        </trans-unit>
        <trans-unit id="600810b45ac04849e54a6d48db5380d1df16e701" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;eval&lt;/code&gt; as a string defining function requires &quot;(&quot; and &quot;)&quot; as prefix and suffix</source>
          <target state="translated">&lt;code&gt;eval&lt;/code&gt; como una funci&amp;oacute;n de definici&amp;oacute;n de cadena requiere &quot;(&quot; y &quot;)&quot; como prefijo y sufijo</target>
        </trans-unit>
        <trans-unit id="608c30dcccba3dfc7943b5524689023a0fbb3ceb" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;eval&lt;/code&gt;: use it only if you know what you're doing</source>
          <target state="translated">&lt;code&gt;eval&lt;/code&gt; : util&amp;iacute;celo solo si sabe lo que est&amp;aacute; haciendo</target>
        </trans-unit>
        <trans-unit id="37eb8fa0218312c3ee9899c3d31da19a58c268f6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;every&lt;/code&gt; acts like the &quot;for all&quot; quantifier in mathematics. In particular, for an empty array, it returns &lt;code&gt;true&lt;/code&gt;. (It is &lt;a href=&quot;https://en.wikipedia.org/wiki/Vacuous_truth&quot;&gt;vacuously true&lt;/a&gt; that all elements of the &lt;a href=&quot;https://en.wikipedia.org/wiki/Empty_set#Properties&quot;&gt;empty set&lt;/a&gt; satisfy any given condition.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="55c5195c0cfda1cfa9da357fb761012eeb49aa77" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;every&lt;/code&gt; acts like the &quot;for all&quot; quantifier in mathematics. In particular, for an empty array, it returns true. (It is &lt;a href=&quot;http://en.wikipedia.org/wiki/Vacuous_truth&quot;&gt;vacuously true&lt;/a&gt; that all elements of the &lt;a href=&quot;https://en.wikipedia.org/wiki/Empty_set#Properties&quot;&gt;empty set&lt;/a&gt; satisfy any given condition.)</source>
          <target state="translated">&lt;code&gt;every&lt;/code&gt; act&amp;uacute;a como el cuantificador &quot;para todos&quot; en matem&amp;aacute;ticas. En particular, para una matriz vac&amp;iacute;a, devuelve verdadero. (Es &lt;a href=&quot;http://en.wikipedia.org/wiki/Vacuous_truth&quot;&gt;cierto&lt;/a&gt; que todos los elementos del &lt;a href=&quot;https://en.wikipedia.org/wiki/Empty_set#Properties&quot;&gt;conjunto vac&amp;iacute;o&lt;/a&gt; satisfacen cualquier condici&amp;oacute;n dada).</target>
        </trans-unit>
        <trans-unit id="891404fa41e6aae11b5779138b084a82fe81f62e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;every&lt;/code&gt; does not mutate the array on which it is called.</source>
          <target state="translated">&lt;code&gt;every&lt;/code&gt; no muta la matriz en la que se llama.</target>
        </trans-unit>
        <trans-unit id="9ccac465949f0e492ead02fef05e94ba6c4ec794" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;every&lt;/code&gt; does not mutate the typed array on which it is called.</source>
          <target state="translated">&lt;code&gt;every&lt;/code&gt; no muta la matriz con tipo en la que se llama.</target>
        </trans-unit>
        <trans-unit id="e3087b66f4b9e574f63c3fed9d188af769cc23e4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;every&lt;/code&gt; was added to the ECMA-262 standard in the 5&lt;sup&gt;th&lt;/sup&gt; edition, and it may not be present in other implementations of the standard. You can work around this by inserting the following code at the beginning of your scripts, allowing use of &lt;code&gt;every&lt;/code&gt; in implementations which do not natively support it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="99408d1717d0b5e5b375cff696ec223b859d9d87" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;every&lt;/code&gt; was added to the ECMA-262 standard in the 5th edition; as such it may not be present in other implementations of the standard. You can work around this by inserting the following code at the beginning of your scripts, allowing use of &lt;code&gt;every&lt;/code&gt; in implementations which do not natively support it. This algorithm is exactly the one specified in ECMA-262, 5th edition, assuming &lt;code&gt;Object&lt;/code&gt; and &lt;code&gt;TypeError&lt;/code&gt; have their original values and that &lt;code&gt;callbackfn.call&lt;/code&gt; evaluates to the original value of &lt;a href=&quot;../function/call&quot;&gt;&lt;code&gt;Function.prototype.call&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">&lt;code&gt;every&lt;/code&gt; se agreg&amp;oacute; al est&amp;aacute;ndar ECMA-262 en la quinta edici&amp;oacute;n; como tal, puede que no est&amp;eacute; presente en otras implementaciones del est&amp;aacute;ndar. Puede solucionar esto insertando el siguiente c&amp;oacute;digo al comienzo de sus scripts, permitiendo el uso de &lt;code&gt;every&lt;/code&gt; en implementaciones que no lo admiten de forma nativa. Este algoritmo es exactamente el especificado en ECMA-262, 5ta edici&amp;oacute;n, asumiendo que &lt;code&gt;Object&lt;/code&gt; y &lt;code&gt;TypeError&lt;/code&gt; tienen sus valores originales y que &lt;code&gt;callbackfn.call&lt;/code&gt; eval&amp;uacute;a el valor original de &lt;a href=&quot;../function/call&quot;&gt; &lt;code&gt;Function.prototype.call&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="5693b9d905ee483c02061dab44f0b7573db2bbe2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;exception_var_1&lt;/code&gt;, &lt;code&gt;exception_var_2&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;exception_var_1&lt;/code&gt; , &lt;code&gt;exception_var_2&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="8a3facaf044474f653c6aa42a5281dc1c816d34e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;expr1&lt;/code&gt;, &lt;code&gt;expr2, expr3...&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;expr1&lt;/code&gt; , &lt;code&gt;expr2, expr3...&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="a8c2b372109f8df6e4890e3e96b9c114c9b22c00" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;expr1&lt;/code&gt;, &lt;code&gt;expr2&lt;/code&gt;, &lt;code&gt;expr3&lt;/code&gt;...</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cc223973a504fc821ee91ae00447c7e6e5257008" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;exprT&lt;/code&gt;, &lt;code&gt;exprF&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;exprT&lt;/code&gt; , &lt;code&gt;exprF&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="e634146ccb066a22c654e72d6518777b77cbe55c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;false &amp;amp;&amp;amp; (&lt;em&gt;anything)&lt;/em&gt;&lt;/code&gt; is short-circuit evaluated to false.</source>
          <target state="translated">&lt;code&gt;false &amp;amp;&amp;amp; (&lt;em&gt;anything)&lt;/em&gt;&lt;/code&gt; se eval&amp;uacute;a en cortocircuito como falso.</target>
        </trans-unit>
        <trans-unit id="5e134ff37fc872f42a8b1e5eef59a551d6527ddf" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;false&lt;/code&gt; if the argument is (or will be coerced to) positive or negative &lt;a href=&quot;infinity&quot;&gt;&lt;code&gt;Infinity&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;nan&quot;&gt;&lt;code&gt;NaN&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;undefined&quot;&gt;&lt;code&gt;undefined&lt;/code&gt;&lt;/a&gt;; otherwise, &lt;code&gt;true&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4390b42cc8144a9d2785547c1fe93b7e0127cb7f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;false&lt;/code&gt; if the argument is positive or negative &lt;a href=&quot;infinity&quot;&gt;&lt;code&gt;Infinity&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;nan&quot;&gt;&lt;code&gt;NaN&lt;/code&gt;&lt;/a&gt;; otherwise, &lt;code&gt;true&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;false&lt;/code&gt; si el argumento es &lt;a href=&quot;infinity&quot;&gt; &lt;code&gt;Infinity&lt;/code&gt; &lt;/a&gt; o &lt;a href=&quot;nan&quot;&gt; &lt;code&gt;NaN&lt;/code&gt; &lt;/a&gt; positivo o negativo ; de lo contrario, es &lt;code&gt;true&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="ab08eb4a28f7a7e73119b02f77d3ac35228a8e3f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fileName&lt;/code&gt;Optional</source>
          <target state="translated">&lt;code&gt;fileName&lt;/code&gt;Optional</target>
        </trans-unit>
        <trans-unit id="0dc9688ea5ea1a0fcee112b9b829b8a277eae78a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fill&lt;/code&gt; is a mutable method, it will change &lt;code&gt;this&lt;/code&gt; object itself, and return it, not just return a copy of it.</source>
          <target state="translated">&lt;code&gt;fill&lt;/code&gt; es un m&amp;eacute;todo mutable, cambiar&amp;aacute; &lt;code&gt;this&lt;/code&gt; objeto en s&amp;iacute; y lo devolver&amp;aacute;, no solo devolver&amp;aacute; una copia del mismo.</target>
        </trans-unit>
        <trans-unit id="48f54546a2d209d77a06d2fef46bb0dd11ca0764" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fill&lt;/code&gt; is a mutator method: it will change the array itself and return it, not a copy of it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2244ef1443d5b96b9e16546a26da7bd93f39dff3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fill&lt;/code&gt; is intentionally generic, it does not require that its &lt;code&gt;this&lt;/code&gt; value be an Array object.</source>
          <target state="translated">&lt;code&gt;fill&lt;/code&gt; es intencionalmente gen&amp;eacute;rico, que no requiere que su &lt;code&gt;this&lt;/code&gt; valor sea un objeto Array.</target>
        </trans-unit>
        <trans-unit id="f4a3ca486fde38d256953f4821b7418b8489f960" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fill&lt;/code&gt; is intentionally generic: it does not require that its &lt;code&gt;this&lt;/code&gt; value be an &lt;code&gt;Array&lt;/code&gt; object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0e75a13d4dcb4c2b543db91637bdac58d1eb23b7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;filter()&lt;/code&gt; calls a provided &lt;code&gt;&lt;var&gt;callback&lt;/var&gt;&lt;/code&gt; function once for each element in an array, and constructs a new array of all the values for which &lt;code&gt;&lt;var&gt;callback&lt;/var&gt;&lt;/code&gt; returns &lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Glossary/Truthy&quot;&gt;a value that coerces to &lt;code&gt;true&lt;/code&gt;&lt;/a&gt;. &lt;code&gt;&lt;var&gt;callback&lt;/var&gt;&lt;/code&gt; is invoked only for indexes of the array which have assigned values; it is not invoked for indexes which have been deleted or which have never been assigned values. Array elements which do not pass the &lt;code&gt;&lt;var&gt;callback&lt;/var&gt;&lt;/code&gt; test are simply skipped, and are not included in the new array.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9931eb055735f06ef92202cbff1c458a76c30a3c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;filter()&lt;/code&gt; calls a provided &lt;code&gt;callback&lt;/code&gt; function once for each element in an array, and constructs a new array of all the values for which &lt;code&gt;callback&lt;/code&gt; returns &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/Truthy&quot;&gt;a value that coerces to &lt;code&gt;true&lt;/code&gt;&lt;/a&gt;. &lt;code&gt;callback&lt;/code&gt; is invoked only for indexes of the array which have assigned values; it is not invoked for indexes which have been deleted or which have never been assigned values. Array elements which do not pass the &lt;code&gt;callback&lt;/code&gt; test are simply skipped, and are not included in the new array.</source>
          <target state="translated">&lt;code&gt;filter()&lt;/code&gt; invoca una funci&amp;oacute;n de &lt;code&gt;callback&lt;/code&gt; proporcionada una vez para cada elemento de una matriz y construye una nueva matriz de todos los valores para los que la &lt;code&gt;callback&lt;/code&gt; devuelve &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/Truthy&quot;&gt;un valor que coacciona a &lt;code&gt;true&lt;/code&gt; &lt;/a&gt; . &lt;code&gt;callback&lt;/code&gt; se invoca solo para los &amp;iacute;ndices de la matriz que tienen valores asignados; no se invoca para &amp;iacute;ndices que se han eliminado o a los que nunca se les han asignado valores. Los elementos de la matriz que no pasan la prueba de &lt;code&gt;callback&lt;/code&gt; simplemente se omiten y no se incluyen en la nueva matriz.</target>
        </trans-unit>
        <trans-unit id="cb4070c4aa57dd9cc4cea03e95495a23fa00a0fe" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;filter()&lt;/code&gt; does not mutate the array on which it is called.</source>
          <target state="translated">&lt;code&gt;filter()&lt;/code&gt; no muta la matriz en la que se llama.</target>
        </trans-unit>
        <trans-unit id="0a8bc74b97e6a37b56b48708bcc6d54acffa7cbd" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;filter()&lt;/code&gt; does not mutate the typed array on which it is called.</source>
          <target state="translated">&lt;code&gt;filter()&lt;/code&gt; no muta la matriz con tipo en la que se llama.</target>
        </trans-unit>
        <trans-unit id="dcb7240b9b0c5996aed924c4d65ff740632936bb" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;filter()&lt;/code&gt; was added to the ECMA-262 standard in the 5th edition. Therefore, it may not be present in all implementations of the standard.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="196ae0582902d699ef32320143b093b6f8a8e679" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;filter()&lt;/code&gt; was added to the ECMA-262 standard in the 5th edition; as such it may not be present in all implementations of the standard. You can work around this by inserting the following code at the beginning of your scripts, allowing use of &lt;code&gt;filter()&lt;/code&gt; in ECMA-262 implementations which do not natively support it. This algorithm is exactly equivalent to the one specified in ECMA-262, 5th edition, assuming that &lt;code&gt;fn.call&lt;/code&gt; evaluates to the original value of &lt;a href=&quot;../function/bind&quot;&gt;&lt;code&gt;Function.prototype.bind()&lt;/code&gt;&lt;/a&gt;, and that &lt;a href=&quot;push&quot;&gt;&lt;code&gt;Array.prototype.push()&lt;/code&gt;&lt;/a&gt; has its original value.</source>
          <target state="translated">&lt;code&gt;filter()&lt;/code&gt; se a&amp;ntilde;adi&amp;oacute; al est&amp;aacute;ndar ECMA-262 en la 5&amp;ordf; edici&amp;oacute;n; como tal, puede que no est&amp;eacute; presente en todas las implementaciones del est&amp;aacute;ndar. Puede solucionar esto insertando el siguiente c&amp;oacute;digo al comienzo de sus scripts, permitiendo el uso de &lt;code&gt;filter()&lt;/code&gt; en implementaciones ECMA-262 que no lo admiten de forma nativa. Este algoritmo es exactamente equivalente al especificado en ECMA-262, 5&amp;ordf; edici&amp;oacute;n, asumiendo que &lt;code&gt;fn.call&lt;/code&gt; eval&amp;uacute;a el valor original de &lt;a href=&quot;../function/bind&quot;&gt; &lt;code&gt;Function.prototype.bind()&lt;/code&gt; &lt;/a&gt; y que &lt;a href=&quot;push&quot;&gt; &lt;code&gt;Array.prototype.push()&lt;/code&gt; &lt;/a&gt; tiene su valor original.</target>
        </trans-unit>
        <trans-unit id="ca6df0f89bd872fa089404a26641bda49ad386d3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;find&lt;/code&gt; does not mutate the array on which it is called.</source>
          <target state="translated">&lt;code&gt;find&lt;/code&gt; no muta la matriz en la que se llama.</target>
        </trans-unit>
        <trans-unit id="4c7118cc9110fcbad2161e45e547d7d0573d2f3d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;find&lt;/code&gt; does not mutate the typed array on which it is called.</source>
          <target state="translated">&lt;code&gt;find&lt;/code&gt; no muta la matriz con tipo en la que se llama.</target>
        </trans-unit>
        <trans-unit id="32f03428cf96c1472f765e850c9fa116c6b3524e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;findIndex&lt;/code&gt; does not mutate the typed array on which it is called.</source>
          <target state="translated">&lt;code&gt;findIndex&lt;/code&gt; no muta la matriz con tipo en la que se llama.</target>
        </trans-unit>
        <trans-unit id="11d5c35a35b4042381fd598510b58c08ec9985c5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;flags&lt;/code&gt; was a non standard second argument only available in Gecko : &lt;var&gt;str&lt;/var&gt;.match(&lt;var&gt;regexp, flags&lt;/var&gt;)</source>
          <target state="translated">&lt;code&gt;flags&lt;/code&gt; era un segundo argumento no est&amp;aacute;ndar solo disponible en Gecko: &lt;var&gt;str&lt;/var&gt; .match ( &lt;var&gt;regexp, flags&lt;/var&gt; )</target>
        </trans-unit>
        <trans-unit id="fa22972dd8b2049c3b74e2db623902d15ea6b989" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;flags&lt;/code&gt; was a non standard second argument only available in Gecko : &lt;var&gt;str&lt;/var&gt;.search(&lt;var&gt;regexp, flags&lt;/var&gt;)</source>
          <target state="translated">&lt;code&gt;flags&lt;/code&gt; era un segundo argumento no est&amp;aacute;ndar solo disponible en Gecko: &lt;var&gt;str&lt;/var&gt; .search ( &lt;var&gt;regexp, flags&lt;/var&gt; )</target>
        </trans-unit>
        <trans-unit id="6eb79e623cafc579061ffa3d7507c5996a293abb" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;flags&lt;/code&gt; was a non standard third argument only available in Gecko : &lt;var&gt;str&lt;/var&gt;.replace(&lt;var&gt;regexp&lt;/var&gt;|&lt;var&gt;substr&lt;/var&gt;, &lt;var&gt;newSubStr&lt;/var&gt;|&lt;var&gt;function, flags&lt;/var&gt;)</source>
          <target state="translated">&lt;code&gt;flags&lt;/code&gt; era un tercer argumento no est&amp;aacute;ndar que solo estaba disponible en Gecko: &lt;var&gt;str&lt;/var&gt; .replace ( &lt;var&gt;regexp&lt;/var&gt; | &lt;var&gt;substr&lt;/var&gt; , &lt;var&gt;newSubStr&lt;/var&gt; | &lt;var&gt;function, flags&lt;/var&gt; )</target>
        </trans-unit>
        <trans-unit id="fd5a8027993d656faa80570c5456d1dce5693040" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;flatMap&lt;/code&gt; can be used as a way to add and remove items (modify the number of items) during a &lt;code&gt;map&lt;/code&gt;. In other words, it allows you to map &lt;em&gt;many items to many items&lt;/em&gt; (by handling each input item separately), rather than always &lt;em&gt;one-to-one&lt;/em&gt;. In this sense, it works like the opposite of &lt;a href=&quot;filter&quot;&gt;filter&lt;/a&gt;. Simply return a 1-element array to keep the item, a multiple-element array to add items, or a 0-element array to remove the item.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dadce4710263583bae4d6b17367b7bbc5b9b0b64" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;foo&lt;/code&gt; is &lt;code&gt;NaN&lt;/code&gt; or not &lt;code&gt;1&lt;/code&gt;, &lt;code&gt;2&lt;/code&gt;, &lt;code&gt;3&lt;/code&gt;, &lt;code&gt;4&lt;/code&gt;, &lt;code&gt;5&lt;/code&gt;, or &lt;code&gt;0&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="83e3ca26ee2fc73b8886ad494b8a3c91137c6e36" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;for await...of&lt;/code&gt; doesn't work with async iterators that are not async iterables.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="55d9c567d1fb44edbb51b4f6e5fe2cd824f016ad" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;for await...of&lt;/code&gt; loop also consumes sync iterables and generators. In that case it internally awaits emitted values before assign them to the loop control variable.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="621ea668ec4d59c0023fff8f56596614bf4f90d4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;for&lt;/code&gt; loop</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c684ce48c8d812f15369e4a493eca4e5496d6a46" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;forEach()&lt;/code&gt; calls a provided &lt;code&gt;&lt;var&gt;callback&lt;/var&gt;&lt;/code&gt; function once for each element in an array in ascending order. It is not invoked for index properties that have been deleted or are uninitialized. (For sparse arrays, &lt;a href=&quot;#sparseArray&quot;&gt;see example below&lt;/a&gt;.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="61ac8916f2eb97628882e3c16c67a2d5584209d6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;forEach()&lt;/code&gt; does not make a copy of the array before iterating.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="505e473e1c8501db66c179fe2b1fedcb11f696ea" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;forEach()&lt;/code&gt; does not mutate the array on which it is called (although &lt;code&gt;callback&lt;/code&gt;, if invoked, may do so).</source>
          <target state="translated">&lt;code&gt;forEach()&lt;/code&gt; no muta la matriz en la que se llama (aunque la &lt;code&gt;callback&lt;/code&gt; , si se invoca, puede hacerlo).</target>
        </trans-unit>
        <trans-unit id="122cb2dd89516d084f4686e3ecf131715d2e7f9c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;forEach()&lt;/code&gt; does not mutate the array on which it is called. (However, &lt;code&gt;&lt;var&gt;callback&lt;/var&gt;&lt;/code&gt; may do so)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2c8f41d7ab222de50ea48c43d8c2fca696da45cc" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;forEach()&lt;/code&gt; executes the &lt;code&gt;&lt;var&gt;callback&lt;/var&gt;&lt;/code&gt; function once for each array element; unlike &lt;a href=&quot;map&quot;&gt;&lt;code&gt;map()&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;reduce&quot;&gt;&lt;code&gt;reduce()&lt;/code&gt;&lt;/a&gt; it always returns the value &lt;a href=&quot;../undefined&quot;&gt;&lt;code&gt;undefined&lt;/code&gt;&lt;/a&gt; and is not chainable. The typical use case is to execute side effects at the end of a chain.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="140bf08672d99e7b40deb6802e23f8969e7c2afc" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;forEach()&lt;/code&gt; executes the &lt;code&gt;&lt;var&gt;callback&lt;/var&gt;&lt;/code&gt; function once for each element in the &lt;code&gt;Set&lt;/code&gt; object; it does not return a value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d8f318df590ff64ad8dd7b8d3ecdd2aef08f80d5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;forEach()&lt;/code&gt; executes the &lt;code&gt;callback&lt;/code&gt; function once for each array element; unlike &lt;a href=&quot;map&quot;&gt;&lt;code&gt;map()&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;reduce&quot;&gt;&lt;code&gt;reduce()&lt;/code&gt;&lt;/a&gt; it always returns the value &lt;a href=&quot;../undefined&quot;&gt;&lt;code&gt;undefined&lt;/code&gt;&lt;/a&gt; and is not chainable. The typical use case is to execute side effects at the end of a chain.</source>
          <target state="translated">&lt;code&gt;forEach()&lt;/code&gt; ejecuta la funci&amp;oacute;n de &lt;code&gt;callback&lt;/code&gt; una vez para cada elemento de la matriz; a diferencia de &lt;a href=&quot;map&quot;&gt; &lt;code&gt;map()&lt;/code&gt; &lt;/a&gt; o &lt;a href=&quot;reduce&quot;&gt; &lt;code&gt;reduce()&lt;/code&gt; &lt;/a&gt; , siempre devuelve el valor &lt;a href=&quot;../undefined&quot;&gt; &lt;code&gt;undefined&lt;/code&gt; &lt;/a&gt; y no es encadenable. El caso de uso t&amp;iacute;pico es ejecutar efectos secundarios al final de una cadena.</target>
        </trans-unit>
        <trans-unit id="15d32f13145a9ff97ee2e682abbdd4776ccd249d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;forEach()&lt;/code&gt; executes the &lt;code&gt;callback&lt;/code&gt; function once for each element in the &lt;code&gt;Set&lt;/code&gt; object; it does not return a value.</source>
          <target state="translated">&lt;code&gt;forEach()&lt;/code&gt; ejecuta la funci&amp;oacute;n de &lt;code&gt;callback&lt;/code&gt; una vez para cada elemento en el objeto &lt;code&gt;Set&lt;/code&gt; ; no devuelve un valor.</target>
        </trans-unit>
        <trans-unit id="e9e6d7b52dbc9c50a38e45b44bcab9cc49997800" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;forEach()&lt;/code&gt; executes the &lt;code&gt;callback&lt;/code&gt; function once for each typed array element; unlike &lt;a href=&quot;every&quot;&gt;&lt;code&gt;every()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;some&quot;&gt;&lt;code&gt;some()&lt;/code&gt;&lt;/a&gt; it, always returns the value &lt;a href=&quot;../undefined&quot;&gt;&lt;code&gt;undefined&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;forEach()&lt;/code&gt; ejecuta la funci&amp;oacute;n de &lt;code&gt;callback&lt;/code&gt; una vez para cada elemento de matriz escrito; a diferencia de &lt;a href=&quot;every&quot;&gt; &lt;code&gt;every()&lt;/code&gt; &lt;/a&gt; y &lt;a href=&quot;some&quot;&gt; &lt;code&gt;some()&lt;/code&gt; &lt;/a&gt; it, siempre devuelve el valor &lt;a href=&quot;../undefined&quot;&gt; &lt;code&gt;undefined&lt;/code&gt; &lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="6d99514785a66a9f4359da83a2ddc20e98c722d2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;forEach()&lt;/code&gt; executes the provided &lt;code&gt;callback&lt;/code&gt; once for each element present in the array in ascending order. It is not invoked for index properties that have been deleted or are uninitialized (i.e. on sparse arrays).</source>
          <target state="translated">&lt;code&gt;forEach()&lt;/code&gt; ejecuta la &lt;code&gt;callback&lt;/code&gt; proporcionada una vez para cada elemento presente en la matriz en orden ascendente. No se invoca para propiedades de &amp;iacute;ndice que se han eliminado o no est&amp;aacute;n inicializadas (es decir, en matrices dispersas).</target>
        </trans-unit>
        <trans-unit id="8d2c67472eea83a470614c382d174137cffcb87b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;forEach()&lt;/code&gt; was added to the ECMA-262 standard in the 5&lt;sup&gt;th&lt;/sup&gt; edition, and it may not be present in all implementations of the standard. You can work around this by inserting the following code at the beginning of your scripts, allowing use of &lt;code&gt;forEach()&lt;/code&gt; in implementations which do not natively support it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="38045490e0afb0ca144c992bf77a2cad99e4033d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;forEach()&lt;/code&gt; was added to the ECMA-262 standard in the 5th edition; as such it may not be present in other implementations of the standard. You can work around this by inserting the following code at the beginning of your scripts, allowing use of &lt;code&gt;forEach()&lt;/code&gt; in implementations that don't natively support it. This algorithm is exactly the one specified in ECMA-262, 5th edition, assuming &lt;a href=&quot;../object&quot;&gt;&lt;code&gt;Object&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../typeerror&quot;&gt;&lt;code&gt;TypeError&lt;/code&gt;&lt;/a&gt; have their original values and that &lt;code&gt;callback.call()&lt;/code&gt; evaluates to the original value of &lt;a href=&quot;../function/call&quot;&gt;&lt;code&gt;Function.prototype.call()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;forEach()&lt;/code&gt; se agreg&amp;oacute; al est&amp;aacute;ndar ECMA-262 en la quinta edici&amp;oacute;n; como tal, puede que no est&amp;eacute; presente en otras implementaciones del est&amp;aacute;ndar. Puede &lt;code&gt;forEach()&lt;/code&gt; esto insertando el siguiente c&amp;oacute;digo al comienzo de sus scripts, permitiendo el uso de forEach () en implementaciones que no lo admiten de forma nativa. Este algoritmo es exactamente el especificado en ECMA-262, 5ta edici&amp;oacute;n, asumiendo que &lt;a href=&quot;../object&quot;&gt; &lt;code&gt;Object&lt;/code&gt; &lt;/a&gt; y &lt;a href=&quot;../typeerror&quot;&gt; &lt;code&gt;TypeError&lt;/code&gt; &lt;/a&gt; tienen sus valores originales y que &lt;code&gt;callback.call()&lt;/code&gt; eval&amp;uacute;a el valor original de &lt;a href=&quot;../function/call&quot;&gt; &lt;code&gt;Function.prototype.call()&lt;/code&gt; &lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="b99ab58892f9484da11488a904d6063d972cd6bc" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;forEach&lt;/code&gt; does not wait for promises. Kindly make sure you are aware of the implications while using promises(or async functions) as &lt;code&gt;forEach&lt;/code&gt; callback.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="066c1e2d96d50172521b1ae46c75a9f2b8485324" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;forEach&lt;/code&gt; executes the &lt;code&gt;callback&lt;/code&gt; function once for each element in the &lt;code&gt;Map&lt;/code&gt; object; it does not return a value.</source>
          <target state="translated">&lt;code&gt;forEach&lt;/code&gt; ejecuta la funci&amp;oacute;n de &lt;code&gt;callback&lt;/code&gt; una vez para cada elemento del objeto &lt;code&gt;Map&lt;/code&gt; ; no devuelve un valor.</target>
        </trans-unit>
        <trans-unit id="ba33f3b489e4013319156f61afcc85d9e87bc69c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;freeze()&lt;/code&gt; returns the same object that was passed into the function. It &lt;em&gt;does not&lt;/em&gt; create a frozen copy.</source>
          <target state="translated">&lt;code&gt;freeze()&lt;/code&gt; devuelve el mismo objeto que se pas&amp;oacute; a la funci&amp;oacute;n. Que &lt;em&gt;no se&lt;/em&gt; cree una copia inmovilizada.</target>
        </trans-unit>
        <trans-unit id="7e2f1ff38536e9c9e9a8136c2cdd2294572a1038" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fromIndex&amp;nbsp;&lt;/code&gt;Optional</source>
          <target state="translated">&lt;code&gt;fromIndex&amp;nbsp;&lt;/code&gt;Optional</target>
        </trans-unit>
        <trans-unit id="bee6e19ad3c9099da8b9ab2424c4b2b5946d8cd8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fromIndex&lt;/code&gt; is greater than or equal to the array length</source>
          <target state="translated">&lt;code&gt;fromIndex&lt;/code&gt; es mayor o igual que la longitud de la matriz</target>
        </trans-unit>
        <trans-unit id="6c937141dbd3191462f80c54be496e44e1992bd6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fromIndex&lt;/code&gt;Optional</source>
          <target state="translated">&lt;code&gt;fromIndex&lt;/code&gt;Optional</target>
        </trans-unit>
        <trans-unit id="358cdb10e770108a8b2b3b281e873a6ad5335b63" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;function*&lt;/code&gt; expression</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="90a85f3ea7f1c9dcc4a388cf90f234f42f13ff66" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;function&lt;/code&gt; (replacement)</source>
          <target state="translated">&lt;code&gt;function&lt;/code&gt; (reemplazo)</target>
        </trans-unit>
        <trans-unit id="d8799ddb01f20c5e14ad56d122cf4986814f3897" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;function&lt;/code&gt; declaration</source>
          <target state="translated">&lt;code&gt;function&lt;/code&gt; declaraci&amp;oacute;n de funci&amp;oacute;n</target>
        </trans-unit>
        <trans-unit id="4b1865c25c16f8ff52fcc0e153e75cf1961038e5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;function&lt;/code&gt; expression</source>
          <target state="translated">&lt;code&gt;function&lt;/code&gt; expresi&amp;oacute;n de funci&amp;oacute;n</target>
        </trans-unit>
        <trans-unit id="731b406fee064605c5191401c692c8a198e5134a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;g&lt;/code&gt; (global match)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4a359f4c773eaf213776da6c135989fb617bed85" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;get&lt;/code&gt; Vs. &lt;code&gt;defineProperty&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;get&lt;/code&gt; Vs. &lt;code&gt;defineProperty&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="fbf2e02a7b2dc35a45872173748ff16b3bce11a9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;get&lt;/code&gt; vs. &lt;code&gt;defineProperty&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d5fdca2c05929e8891ca4748189ded0955164c64" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;getOwnPropertyDescriptor()&lt;/code&gt; must return an object or &lt;code&gt;undefined&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="53d3b8684e292ff6949ea8327e9c163e1bba65e5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;getOwnPropertyDescriptor&lt;/code&gt; must return an object or &lt;code&gt;undefined&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;getOwnPropertyDescriptor&lt;/code&gt; debe devolver un objeto o &lt;code&gt;undefined&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="6ff8a13feb27ffa1fb82ba38eaf217c01ea63b47" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;getPrototypeOf()&lt;/code&gt; method must return an object or &lt;code&gt;null&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a675b0c321cf6b5904dc47877f2eec161a8731b7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;getPrototypeOf&lt;/code&gt; method must return an object or &lt;code&gt;null&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;getPrototypeOf&lt;/code&gt; m&amp;eacute;todo getPrototypeOf debe devolver un objeto o un &lt;code&gt;null&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="801f0cf750aa9bea1079d2acc9918d26727d3ac9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;global&lt;/code&gt; is now a prototype accessor property rather than an instance's own data property.</source>
          <target state="translated">&lt;code&gt;global&lt;/code&gt; es ahora una propiedad de acceso prototipo en lugar de la propiedad de datos propia de una instancia.</target>
        </trans-unit>
        <trans-unit id="0f05e5322348a1efa1ae50972219f0923b9acb4e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;handler&lt;/code&gt; is the object that defines the custom behavior of the proxy.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="44f5763fb31f15b11a6fba466b8fb4cd8653a215" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;handler&lt;/code&gt;: an object that defines which operations will be intercepted and how to redefine intercepted operations.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="864a74d4da5b68e8fedfb93ead7e04a274d1b988" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;hasOwnProperty&lt;/code&gt; returns true even if the value of the property is &lt;code&gt;null&lt;/code&gt; or &lt;code&gt;undefined&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;hasOwnProperty&lt;/code&gt; devuelve verdadero incluso si el valor de la propiedad es &lt;code&gt;null&lt;/code&gt; o &lt;code&gt;undefined&lt;/code&gt; est&amp;aacute; definido .</target>
        </trans-unit>
        <trans-unit id="1784eeb21131a356713b8f2fc7dd33eab1982729" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;hour&lt;/code&gt;, &lt;code&gt;minute&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;hour&lt;/code&gt; , &lt;code&gt;minute&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="4fe1ee02a25dfb97bf42b7c74afece58cd943c02" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;hour&lt;/code&gt;, &lt;code&gt;minute&lt;/code&gt;, &lt;code&gt;second&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;hour&lt;/code&gt; , &lt;code&gt;minute&lt;/code&gt; , &lt;code&gt;second&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="6d7e43e3815d75bf8e8566e5254388513e8b3e43" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;hours&lt;/code&gt;Optional</source>
          <target state="translated">&lt;code&gt;hours&lt;/code&gt;Optional</target>
        </trans-unit>
        <trans-unit id="f6b6fc7dd32079226b1aca28b9c5dba051a8f4c5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;i&lt;/code&gt; (ignore case)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9977172d403109221c163470004205c3655feb13" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ignoreCase&lt;/code&gt; is now a prototype accessor property rather than an instance's own data property.</source>
          <target state="translated">&lt;code&gt;ignoreCase&lt;/code&gt; es ahora una propiedad de acceso prototipo en lugar de la propiedad de datos propia de una instancia.</target>
        </trans-unit>
        <trans-unit id="16f65165c4d8bc6321cfbce2d04807e2abe6c280" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;import&lt;/code&gt;, &lt;code&gt;export&lt;/code&gt;, module declaration</source>
          <target state="translated">&lt;code&gt;import&lt;/code&gt; aci&amp;oacute;n , &lt;code&gt;export&lt;/code&gt; aci&amp;oacute;n , declaraci&amp;oacute;n de m&amp;oacute;dulo</target>
        </trans-unit>
        <trans-unit id="729f06e23eea04de4eb06501468f86352a9d8df4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;in&lt;/code&gt; operator</source>
          <target state="translated">&lt;code&gt;in&lt;/code&gt; operador</target>
        </trans-unit>
        <trans-unit id="63089956eea3d1b5b12ee81c2484d81a752d0ca8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;includes()&lt;/code&gt; method is intentionally generic. It does not require &lt;code&gt;this&lt;/code&gt; value to be an Array object, so it can be applied to other kinds of objects (e.g. array-like objects).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d7c7175c8b0be83e3f5c561485512895741c5f0f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;includes()&lt;/code&gt; method is intentionally generic. It does not require &lt;code&gt;this&lt;/code&gt; value to be an Array object, so it can be applied to other kinds of objects (e.g. array-like objects). The example below illustrates &lt;code&gt;includes()&lt;/code&gt; method called on the function's &lt;a href=&quot;../../functions/arguments&quot;&gt;arguments&lt;/a&gt; object.</source>
          <target state="translated">&lt;code&gt;includes()&lt;/code&gt; m&amp;eacute;todo incluye () es intencionalmente gen&amp;eacute;rico. No requiere que &lt;code&gt;this&lt;/code&gt; valor sea un objeto Array, por lo que se puede aplicar a otros tipos de objetos (por ejemplo, objetos tipo array). El siguiente ejemplo ilustra el m&amp;eacute;todo &lt;code&gt;includes()&lt;/code&gt; llamado en el objeto de &lt;a href=&quot;../../functions/arguments&quot;&gt;argumentos de&lt;/a&gt; la funci&amp;oacute;n .</target>
        </trans-unit>
        <trans-unit id="379e18331c93ef94aa3c77faa0ac94bc7d417cd5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;includes()&lt;/code&gt; used as a generic method</source>
          <target state="translated">&lt;code&gt;includes()&lt;/code&gt; utilizado como m&amp;eacute;todo gen&amp;eacute;rico</target>
        </trans-unit>
        <trans-unit id="56e97b568cbc9fbfd601257310f762a373899fbf" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;index&lt;/code&gt;Optional</source>
          <target state="translated">&lt;code&gt;index&lt;/code&gt;Optional</target>
        </trans-unit>
        <trans-unit id="f0a72c71f73b90aaab7762c65221e8a0bf196685" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;indexOf()&lt;/code&gt; and case-sensitivity</source>
          <target state="translated">&lt;code&gt;indexOf()&lt;/code&gt; y distinci&amp;oacute;n entre may&amp;uacute;sculas y min&amp;uacute;sculas</target>
        </trans-unit>
        <trans-unit id="25533fe1dedd3d23ca89fb498c89238a1e15c359" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;indexOf()&lt;/code&gt; compares &lt;code&gt;&lt;var&gt;searchElement&lt;/var&gt;&lt;/code&gt; to elements of the Array using &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Strict_equality&quot;&gt;strict equality&lt;/a&gt; (the same method used by the &lt;code&gt;===&lt;/code&gt; or triple-equals operator).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="66ff0e251d85a9886b9b96038a87352179a4ea29" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;indexOf()&lt;/code&gt; compares &lt;code&gt;searchElement&lt;/code&gt; to elements of the Array using &lt;a href=&quot;../../operators/comparison_operators#Using_the_Equality_Operators&quot;&gt;strict equality&lt;/a&gt; (the same method used by the &lt;code&gt;===&lt;/code&gt; or triple-equals operator).</source>
          <target state="translated">&lt;code&gt;indexOf()&lt;/code&gt; compara &lt;code&gt;searchElement&lt;/code&gt; con elementos del Array usando &lt;a href=&quot;../../operators/comparison_operators#Using_the_Equality_Operators&quot;&gt;igualdad estricta&lt;/a&gt; (el mismo m&amp;eacute;todo usado por el operador &lt;code&gt;===&lt;/code&gt; o triple-igual).</target>
        </trans-unit>
        <trans-unit id="fb945b69bce56c487bbd5ab28dc8600bdedc9b48" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;indexOf()&lt;/code&gt; was added to the ECMA-262 standard in the 5th edition; as such it may not be present in all browsers. You can work around this by utilizing the following code at the beginning of your scripts. This will allow you to use &lt;code&gt;indexOf()&lt;/code&gt; when there is still no native support. This algorithm matches the one specified in ECMA-262, 5th edition, assuming &lt;a href=&quot;../typeerror&quot;&gt;&lt;code&gt;TypeError&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../math/abs&quot;&gt;&lt;code&gt;Math.abs()&lt;/code&gt;&lt;/a&gt; have their original values.</source>
          <target state="translated">&lt;code&gt;indexOf()&lt;/code&gt; se agreg&amp;oacute; al est&amp;aacute;ndar ECMA-262 en la 5&amp;ordf; edici&amp;oacute;n; como tal, puede que no est&amp;eacute; presente en todos los navegadores. Puede solucionar esto utilizando el siguiente c&amp;oacute;digo al principio de sus scripts. Esto le permitir&amp;aacute; usar &lt;code&gt;indexOf()&lt;/code&gt; cuando todav&amp;iacute;a no haya soporte nativo. Este algoritmo coincide con el especificado en ECMA-262, 5&amp;ordf; edici&amp;oacute;n, asumiendo que &lt;a href=&quot;../typeerror&quot;&gt; &lt;code&gt;TypeError&lt;/code&gt; &lt;/a&gt; y &lt;a href=&quot;../math/abs&quot;&gt; &lt;code&gt;Math.abs()&lt;/code&gt; &lt;/a&gt; tienen sus valores originales.</target>
        </trans-unit>
        <trans-unit id="07b5bcc8ec621659ddc920118c5f84093d89b02d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;indexOf&lt;/code&gt; compares &lt;code&gt;&lt;var&gt;searchElement&lt;/var&gt;&lt;/code&gt; to elements of the typed array using &lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators#Using_the_Equality_Operators&quot;&gt;strict equality&lt;/a&gt; (the same method used by the ===, or triple-equals, operator).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1bd0640cfd2574c0ffeb45d92a4029c92577a53c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;indexOf&lt;/code&gt; compares &lt;code&gt;searchElement&lt;/code&gt; to elements of the typed array using &lt;a href=&quot;../../operators/comparison_operators#Using_the_Equality_Operators&quot;&gt;strict equality&lt;/a&gt; (the same method used by the ===, or triple-equals, operator).</source>
          <target state="translated">&lt;code&gt;indexOf&lt;/code&gt; compara &lt;code&gt;searchElement&lt;/code&gt; con elementos de la matriz con tipo usando &lt;a href=&quot;../../operators/comparison_operators#Using_the_Equality_Operators&quot;&gt;igualdad estricta&lt;/a&gt; (el mismo m&amp;eacute;todo usado por el operador ===, o triple-igual).</target>
        </trans-unit>
        <trans-unit id="9f42a3aed7d7d9b7c92972f3e06ccc9b78cb9a51" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;initialValue&lt;/code&gt;Optional</source>
          <target state="translated">&lt;code&gt;initialValue&lt;/code&gt;Optional</target>
        </trans-unit>
        <trans-unit id="a492a507d4fb6b8bf3add697f0744aef2eb88479" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;instance&lt;/code&gt;: A &lt;a href=&quot;instance&quot;&gt;&lt;code&gt;WebAssembly.Instance&lt;/code&gt;&lt;/a&gt; object that contains all the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/WebAssembly/Exported_functions&quot;&gt;Exported WebAssembly functions&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;instance&lt;/code&gt; : un objeto &lt;a href=&quot;instance&quot;&gt; &lt;code&gt;WebAssembly.Instance&lt;/code&gt; &lt;/a&gt; que contiene todas las &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/WebAssembly/Exported_functions&quot;&gt;funciones de WebAssembly exportadas&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="ceed7d000d9c56cb7c6c5a7157bded93d8365bec" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;instance&lt;/code&gt;: A &lt;a href=&quot;instance&quot;&gt;&lt;code&gt;WebAssembly.Instance&lt;/code&gt;&lt;/a&gt; object that contains all the &lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/WebAssembly/Exported_functions&quot;&gt;Exported WebAssembly functions&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3f40adc2d9149e7d2788a10342a44a60c6112844" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;instanceof&lt;/code&gt; and multiple context (e.g. frames or windows)</source>
          <target state="translated">&lt;code&gt;instanceof&lt;/code&gt; y contexto m&amp;uacute;ltiple (por ejemplo, marcos o ventanas)</target>
        </trans-unit>
        <trans-unit id="06143afd51c718da002970cafe8b8e2ee936ec97" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;instanceof&lt;/code&gt; operator</source>
          <target state="translated">&lt;code&gt;instanceof&lt;/code&gt; operador de instancia</target>
        </trans-unit>
        <trans-unit id="765a0abe9ec887d90d01da8f0a01bea77faeb433" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;instanceof&lt;/code&gt; vs &lt;code&gt;isArray&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;instanceof&lt;/code&gt; vs &lt;code&gt;isArray&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="939c9dc0aaff8bb1d4fe5d5b9c115e46e8c4a06f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;isFinite&lt;/code&gt; is a function property of the global object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="08e2a027e362ac052d31a7654b0c37de6f2514f9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;isFinite&lt;/code&gt; is a top-level function and is not associated with any object.</source>
          <target state="translated">&lt;code&gt;isFinite&lt;/code&gt; es una funci&amp;oacute;n de nivel superior y no est&amp;aacute; asociada con ning&amp;uacute;n objeto.</target>
        </trans-unit>
        <trans-unit id="899d654d9872fce9b9b929b5bc4064e7c4fa5ae7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;isPrototypeOf()&lt;/code&gt; differs from the &lt;a href=&quot;../../operators/instanceof&quot;&gt;&lt;code&gt;instanceof&lt;/code&gt;&lt;/a&gt; operator. In the expression &quot;&lt;code&gt;object instanceof AFunction&lt;/code&gt;&quot;, the &lt;code&gt;object&lt;/code&gt; prototype chain is checked against &lt;code&gt;AFunction.prototype&lt;/code&gt;, not against &lt;code&gt;AFunction&lt;/code&gt; itself.</source>
          <target state="translated">&lt;code&gt;isPrototypeOf()&lt;/code&gt; difiere del operador &lt;a href=&quot;../../operators/instanceof&quot;&gt; &lt;code&gt;instanceof&lt;/code&gt; &lt;/a&gt; . En la expresi&amp;oacute;n &quot; &lt;code&gt;object instanceof AFunction&lt;/code&gt; &quot;, la cadena del prototipo de &lt;code&gt;object&lt;/code&gt; se comprueba con &lt;code&gt;AFunction.prototype&lt;/code&gt; , no con &lt;code&gt;AFunction&lt;/code&gt; en s&amp;iacute;.</target>
        </trans-unit>
        <trans-unit id="24981d89f983eafa2f7ed0ce22611f6a983b331b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;isPrototypeOf()&lt;/code&gt; method, along with the &lt;a href=&quot;../../operators/instanceof&quot;&gt;&lt;code&gt;instanceof&lt;/code&gt;&lt;/a&gt; operator particularly comes in handy if you have code that can only function when dealing with objects descended from a specific prototype chain, e.g., to guarantee that certain methods or properties will be present on that object.</source>
          <target state="translated">&lt;code&gt;isPrototypeOf()&lt;/code&gt; m&amp;eacute;todo isPrototypeOf () , junto con el operador &lt;a href=&quot;../../operators/instanceof&quot;&gt; &lt;code&gt;instanceof&lt;/code&gt; &lt;/a&gt; , es particularmente &amp;uacute;til si tiene un c&amp;oacute;digo que solo puede funcionar cuando se trata de objetos descendientes de una cadena de prototipos espec&amp;iacute;fica, por ejemplo, para garantizar que ciertos m&amp;eacute;todos o propiedades estar&amp;aacute;n presentes en ese objeto.</target>
        </trans-unit>
        <trans-unit id="643e854dbba61944e3251da5b8f1a5f3449c237a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;item1, item2, &lt;em&gt;...&lt;/em&gt;&lt;/code&gt;Optional</source>
          <target state="translated">&lt;code&gt;item1, item2, &lt;em&gt;...&lt;/em&gt;&lt;/code&gt; Opcional</target>
        </trans-unit>
        <trans-unit id="b34594d7601e63262cea8313640fe4f1931e6e5c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;lastIndexOf&lt;/code&gt; compares &lt;code&gt;&lt;var&gt;searchElement&lt;/var&gt;&lt;/code&gt; to elements of the typed array using &lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators#Using_the_Equality_Operators&quot;&gt;strict equality&lt;/a&gt; (the same method used by the ===, or triple-equals, operator).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="abd9081c42cfb8c91e1feb43ab7884a70b776093" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;lastIndexOf&lt;/code&gt; compares &lt;code&gt;searchElement&lt;/code&gt; to elements of the Array using &lt;a href=&quot;../../operators/comparison_operators#Using_the_Equality_Operators&quot;&gt;strict equality&lt;/a&gt; (the same method used by the ===, or triple-equals, operator).</source>
          <target state="translated">&lt;code&gt;lastIndexOf&lt;/code&gt; compara &lt;code&gt;searchElement&lt;/code&gt; con elementos del Array usando &lt;a href=&quot;../../operators/comparison_operators#Using_the_Equality_Operators&quot;&gt;igualdad estricta&lt;/a&gt; (el mismo m&amp;eacute;todo usado por el operador ===, o triple-equals,).</target>
        </trans-unit>
        <trans-unit id="853e89e96e9dcfddbfd8fdd2c68dbd41b39b2ccc" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;lastIndexOf&lt;/code&gt; compares &lt;code&gt;searchElement&lt;/code&gt; to elements of the Array using &lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators#Using_the_Equality_Operators&quot;&gt;strict equality&lt;/a&gt; (the same method used by the ===, or triple-equals, operator).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d600a7491d52a042a3747106c14e80e1c228eb1c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;lastIndexOf&lt;/code&gt; compares &lt;code&gt;searchElement&lt;/code&gt; to elements of the typed array using &lt;a href=&quot;../../operators/comparison_operators#Using_the_Equality_Operators&quot;&gt;strict equality&lt;/a&gt; (the same method used by the ===, or triple-equals, operator).</source>
          <target state="translated">&lt;code&gt;lastIndexOf&lt;/code&gt; compara &lt;code&gt;searchElement&lt;/code&gt; con elementos de la matriz con tipo usando &lt;a href=&quot;../../operators/comparison_operators#Using_the_Equality_Operators&quot;&gt;igualdad estricta&lt;/a&gt; (el mismo m&amp;eacute;todo usado por el operador ===, o triple-igual).</target>
        </trans-unit>
        <trans-unit id="c27aa6a59fc580db6f23a5fe5efe997412979d42" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;lastIndexOf&lt;/code&gt; was added to the ECMA-262 standard in the 5th edition; as such it may not be present in other implementations of the standard. You can work around this by inserting the following code at the beginning of your scripts, allowing use of &lt;code&gt;lastIndexOf&lt;/code&gt; in implementations which do not natively support it. This algorithm is exactly the one specified in ECMA-262, 5th edition, assuming &lt;a href=&quot;../object&quot;&gt;&lt;code&gt;Object&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../typeerror&quot;&gt;&lt;code&gt;TypeError&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../number&quot;&gt;&lt;code&gt;Number&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../math/floor&quot;&gt;&lt;code&gt;Math.floor&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../math/abs&quot;&gt;&lt;code&gt;Math.abs&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;../math/min&quot;&gt;&lt;code&gt;Math.min&lt;/code&gt;&lt;/a&gt; have their original values.</source>
          <target state="translated">&lt;code&gt;lastIndexOf&lt;/code&gt; se agreg&amp;oacute; al est&amp;aacute;ndar ECMA-262 en la quinta edici&amp;oacute;n; como tal, puede que no est&amp;eacute; presente en otras implementaciones del est&amp;aacute;ndar. Puede &lt;code&gt;lastIndexOf&lt;/code&gt; esto insertando el siguiente c&amp;oacute;digo al comienzo de sus scripts, permitiendo el uso de lastIndexOf en implementaciones que no lo admiten de forma nativa. Este algoritmo es exactamente el especificado en ECMA-262, 5.a edici&amp;oacute;n, asumiendo que &lt;a href=&quot;../object&quot;&gt; &lt;code&gt;Object&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;../typeerror&quot;&gt; &lt;code&gt;TypeError&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;../number&quot;&gt; &lt;code&gt;Number&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;../math/floor&quot;&gt; &lt;code&gt;Math.floor&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;../math/abs&quot;&gt; &lt;code&gt;Math.abs&lt;/code&gt; &lt;/a&gt; y &lt;a href=&quot;../math/min&quot;&gt; &lt;code&gt;Math.min&lt;/code&gt; &lt;/a&gt; tienen sus valores originales.</target>
        </trans-unit>
        <trans-unit id="e1494054b2864371304dcf168fa269c57a88dc12" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;length&lt;/code&gt; is a property of a function object, and indicates how many arguments the function expects, i.e. the number of formal parameters. This number excludes the &lt;a href=&quot;../../functions/rest_parameters&quot;&gt;rest parameter&lt;/a&gt; and only includes parameters before the first one with a default value. By contrast, &lt;a href=&quot;../../functions/arguments/length&quot;&gt;&lt;code&gt;arguments.length&lt;/code&gt;&lt;/a&gt; is local to a function and provides the number of arguments actually passed to the function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f359b5e345426d9bf6ba59f0790a690636177b65" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;length&lt;/code&gt; is a property of a function object, and indicates how many arguments the function expects, i.e. the number of formal parameters. This number excludes the &lt;a href=&quot;../../functions/rest_parameters&quot;&gt;rest parameter&lt;/a&gt; and only includes parameters before the first one with a default value. By contrast, &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/arguments/length&quot;&gt;&lt;code&gt;arguments.length&lt;/code&gt;&lt;/a&gt; is local to a function and provides the number of arguments actually passed to the function.</source>
          <target state="translated">&lt;code&gt;length&lt;/code&gt; es una propiedad de un objeto de funci&amp;oacute;n e indica cu&amp;aacute;ntos argumentos espera la funci&amp;oacute;n, es decir, el n&amp;uacute;mero de par&amp;aacute;metros formales. Este n&amp;uacute;mero excluye el &lt;a href=&quot;../../functions/rest_parameters&quot;&gt;resto del par&amp;aacute;metro&lt;/a&gt; y solo incluye los par&amp;aacute;metros antes del primero con un valor predeterminado. Por el contrario, &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/arguments/length&quot;&gt; &lt;code&gt;arguments.length&lt;/code&gt; &lt;/a&gt; es local a una funci&amp;oacute;n y proporciona el n&amp;uacute;mero de argumentos que realmente se pasan a la funci&amp;oacute;n.</target>
        </trans-unit>
        <trans-unit id="61223d52bfa6ffb8d595751e1469103ccd1961ce" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;let&lt;/code&gt; allows you to declare variables that are limited in scope to the block, statement, or expression on which it is used. This is unlike the &lt;a href=&quot;var&quot;&gt;&lt;code&gt;var&lt;/code&gt;&lt;/a&gt; keyword, which defines a variable globally, or locally to an entire function regardless of block scope.</source>
          <target state="translated">&lt;code&gt;let&lt;/code&gt; le permite declarar variables que tienen un alcance limitado al bloque, declaraci&amp;oacute;n o expresi&amp;oacute;n en la que se usa. Esto es diferente a la palabra clave &lt;a href=&quot;var&quot;&gt; &lt;code&gt;var&lt;/code&gt; &lt;/a&gt; , que define una variable globalmente o localmente a una funci&amp;oacute;n completa independientemente del alcance del bloque.</target>
        </trans-unit>
        <trans-unit id="822fcb1bfcb03aa68b4ab3d211f4de95c6048a5e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;let&lt;/code&gt; allows you to declare variables that are limited to the scope of a &lt;a href=&quot;../statements/block&quot;&gt;block&lt;/a&gt; statement, or expression on which it is used, unlike the &lt;a href=&quot;../statements/var&quot;&gt;&lt;code&gt;var&lt;/code&gt;&lt;/a&gt; keyword, which declares a variable globally, or locally to an entire function regardless of block scope. The other difference between &lt;a href=&quot;../statements/var&quot;&gt;&lt;code&gt;var&lt;/code&gt;&lt;/a&gt; and &lt;code&gt;let&lt;/code&gt; is that the latter is initialized to a value only when a &lt;a href=&quot;#Temporal_dead_zone&quot;&gt;parser evaluates it (see below)&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="28700d9a888e1b6a0cec7993d7cfde5ee80c0d86" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;let&lt;/code&gt; bindings are created at the top of the (block) scope containing the declaration, commonly referred to as &quot;hoisting&quot;. Unlike variables declared with &lt;code&gt;&lt;a href=&quot;var#var_hoisting&quot;&gt;var&lt;/a&gt;&lt;/code&gt;, which will start with the value &lt;code&gt;undefined&lt;/code&gt;, &lt;code&gt;let&lt;/code&gt; variables are &lt;em&gt;not&lt;/em&gt; initialized until their definition is evaluated. Accessing the variable before the initialization results in a &lt;code&gt;&lt;a href=&quot;../global_objects/referenceerror&quot;&gt;ReferenceError&lt;/a&gt;&lt;/code&gt;. The variable is in a &quot;temporal dead zone&quot; from the start of the block until the initialization is processed.</source>
          <target state="translated">&lt;code&gt;let&lt;/code&gt; enlaces de let se crean en la parte superior del alcance (bloque) que contiene la declaraci&amp;oacute;n, com&amp;uacute;nmente conocida como &quot;elevaci&amp;oacute;n&quot;. A diferencia de las variables declaradas con &lt;code&gt;&lt;a href=&quot;var#var_hoisting&quot;&gt;var&lt;/a&gt;&lt;/code&gt; , que comenzar&amp;aacute; con el valor &lt;code&gt;undefined&lt;/code&gt; , &lt;code&gt;let&lt;/code&gt; variables &lt;em&gt;no&lt;/em&gt; inicializadas hasta que se eval&amp;uacute;e su definici&amp;oacute;n. Acceder a la variable antes de la inicializaci&amp;oacute;n da como resultado un &lt;code&gt;&lt;a href=&quot;../global_objects/referenceerror&quot;&gt;ReferenceError&lt;/a&gt;&lt;/code&gt; . La variable est&amp;aacute; en una &quot;zona muerta temporal&quot; desde el inicio del bloque hasta que se procesa la inicializaci&amp;oacute;n.</target>
        </trans-unit>
        <trans-unit id="6634b62facb18e92b00a216b96f06a1e139dc81a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;let&lt;/code&gt;, &lt;code&gt;const&lt;/code&gt;, variable statement</source>
          <target state="translated">&lt;code&gt;let&lt;/code&gt; , &lt;code&gt;const&lt;/code&gt; , declaraci&amp;oacute;n de variable</target>
        </trans-unit>
        <trans-unit id="e72e4b1e66e02de9140db23dd83df205ea597263" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;limit&lt;/code&gt;Optional</source>
          <target state="translated">&lt;code&gt;limit&lt;/code&gt;Optional</target>
        </trans-unit>
        <trans-unit id="d7f9cffd4f74afa4801161ace29d01cb665195a6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;lineNumber&lt;/code&gt;Optional</source>
          <target state="translated">&lt;code&gt;lineNumber&lt;/code&gt;Optional</target>
        </trans-unit>
        <trans-unit id="e712bfe6ecb688ba32226dbefb5354e6d725e103" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;locale&lt;/code&gt; and &lt;code&gt;option&lt;/code&gt; parameter definitions.</source>
          <target state="translated">&lt;code&gt;locale&lt;/code&gt; definiciones de par&amp;aacute;metros de &lt;code&gt;option&lt;/code&gt; y configuraciones regionales .</target>
        </trans-unit>
        <trans-unit id="60a815eab185eaffdecdce195568be8a4df143ee" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;locale&lt;/code&gt;Optional</source>
          <target state="translated">&lt;code&gt;locale&lt;/code&gt;Optional</target>
        </trans-unit>
        <trans-unit id="8b1219aab945d5132e5f2b35f5244596fcaec49d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;localeCompare()&lt;/code&gt; enables case-insensitive sorting for an array.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b20a44dfcca998c5ef503eff3becc16118b7b710" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;localeCompare&lt;/code&gt; enables a case-insensitive sort of an array.</source>
          <target state="translated">&lt;code&gt;localeCompare&lt;/code&gt; habilita un tipo de matriz que no distingue entre may&amp;uacute;sculas y min&amp;uacute;sculas.</target>
        </trans-unit>
        <trans-unit id="da6bd07002699a30e46870ede88d7a681743ae9b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;locales&lt;/code&gt; argument</source>
          <target state="translated">&lt;code&gt;locales&lt;/code&gt; argumento locales</target>
        </trans-unit>
        <trans-unit id="49d2c825203adc463bf3d692bed66344507e517f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;locales&lt;/code&gt;Optional</source>
          <target state="translated">&lt;code&gt;locales&lt;/code&gt;Optional</target>
        </trans-unit>
        <trans-unit id="d693fd09ba07b5b383cba96c0cca1bb48dc459e9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;m&lt;/code&gt; (multiline)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c04fc9f45a7c9cb08466db65c0f83719b0340636" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;map()&lt;/code&gt; and &lt;code&gt;flatMap()&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a7d933424e1b1c5d9493824146a1599d7add5d14" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;map()&lt;/code&gt; does not mutate the typed array on which it is called (although &lt;code&gt;&lt;var&gt;mapFn&lt;/var&gt;&lt;/code&gt;, if invoked, may do so).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="25b1070a11e663243cc897c90af46f99c6df445c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;map&lt;/code&gt; and &lt;code&gt;flatMap&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;map&lt;/code&gt; a y mapa &lt;code&gt;flatMap&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="e57a3fd231e88a7547f9de2db947f8cada7aef65" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;map&lt;/code&gt; calls a provided &lt;code&gt;&lt;var&gt;callback&lt;/var&gt;&lt;/code&gt; function &lt;strong&gt;once for each element&lt;/strong&gt; in an array, in order, and constructs a new array from the results. &lt;code&gt;&lt;var&gt;callback&lt;/var&gt;&lt;/code&gt; is invoked only for indexes of the array which have assigned values (including &lt;a href=&quot;../undefined&quot;&gt;&lt;code&gt;undefined&lt;/code&gt;&lt;/a&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="96cc5b436c888c25476cb2dbf8e94df66eabfc8e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;map&lt;/code&gt; calls a provided &lt;code&gt;callback&lt;/code&gt; function &lt;strong&gt;once for each element&lt;/strong&gt; in an array, in order, and constructs a new array from the results. &lt;code&gt;callback&lt;/code&gt; is invoked only for indexes of the array which have assigned values, including &lt;a href=&quot;../undefined&quot;&gt;undefined&lt;/a&gt;. It is not called for missing elements of the array (that is, indexes that have never been set, which have been deleted or which have never been assigned a value).</source>
          <target state="translated">&lt;code&gt;map&lt;/code&gt; invoca una funci&amp;oacute;n de &lt;code&gt;callback&lt;/code&gt; proporcionada una &lt;strong&gt;vez para cada elemento&lt;/strong&gt; de una matriz, en orden, y construye una nueva matriz a partir de los resultados. &lt;code&gt;callback&lt;/code&gt; se invoca solo para los &amp;iacute;ndices de la matriz que tienen valores asignados, incluido &lt;a href=&quot;../undefined&quot;&gt;undefined&lt;/a&gt; . No se llama por elementos faltantes de la matriz (es decir, &amp;iacute;ndices que nunca se han establecido, que se han eliminado o que nunca se les ha asignado un valor).</target>
        </trans-unit>
        <trans-unit id="e0c23f070663cb2915f56370ea143dc4868c5938" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;map&lt;/code&gt; does not mutate the array on which it is called (although &lt;code&gt;&lt;var&gt;callback&lt;/var&gt;&lt;/code&gt;, if invoked, may do so).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e17ed71a37d5b65ffb0eeb6231a2013dd37931f2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;map&lt;/code&gt; does not mutate the array on which it is called (although &lt;code&gt;callback&lt;/code&gt;, if invoked, may do so).</source>
          <target state="translated">&lt;code&gt;map&lt;/code&gt; no muta la matriz en la que se llama (aunque la &lt;code&gt;callback&lt;/code&gt; , si se invoca, puede hacerlo).</target>
        </trans-unit>
        <trans-unit id="55e8ffd2f0cfc3a7a058db12dcbf51d63c959f0e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;map&lt;/code&gt; does not mutate the typed array on which it is called (although &lt;code&gt;callback&lt;/code&gt;, if invoked, may do so).</source>
          <target state="translated">&lt;code&gt;map&lt;/code&gt; no muta la matriz con tipo en la que se llama (aunque la &lt;code&gt;callback&lt;/code&gt; , si se invoca, puede hacerlo).</target>
        </trans-unit>
        <trans-unit id="cafa7ca5004263e211a23b1ac00fee8761e93337" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;map&lt;/code&gt; was added to the ECMA-262 standard in the 5th edition. Therefore, it may not be present in all implementations of the standard.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5cc420628951d5ff30d148e62effd16d526a1f18" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;map&lt;/code&gt; was added to the ECMA-262 standard in the 5th edition; as such it may not be present in all implementations of the standard. You can work around this by inserting the following code at the beginning of your scripts, allowing use of &lt;code&gt;map&lt;/code&gt; in implementations which do not natively support it. This algorithm is exactly the one specified in ECMA-262, 5th edition, assuming &lt;a href=&quot;../object&quot;&gt;&lt;code&gt;Object&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../typeerror&quot;&gt;&lt;code&gt;TypeError&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;../array&quot;&gt;&lt;code&gt;Array&lt;/code&gt;&lt;/a&gt; have their original values and that &lt;code&gt;callback.call&lt;/code&gt; evaluates to the original value of &lt;code&gt;&lt;a href=&quot;../function/call&quot;&gt;&lt;code&gt;Function.prototype.call&lt;/code&gt;&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;map&lt;/code&gt; a fue agregado al est&amp;aacute;ndar ECMA-262 en la 5ta edici&amp;oacute;n; como tal, puede que no est&amp;eacute; presente en todas las implementaciones del est&amp;aacute;ndar. Puede solucionar esto insertando el siguiente c&amp;oacute;digo al comienzo de sus scripts, permitiendo el uso del &lt;code&gt;map&lt;/code&gt; a en implementaciones que no lo admiten de forma nativa. Este algoritmo es exactamente el especificado en ECMA-262, 5&amp;ordf; edici&amp;oacute;n, asumiendo que &lt;a href=&quot;../object&quot;&gt; &lt;code&gt;Object&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;../typeerror&quot;&gt; &lt;code&gt;TypeError&lt;/code&gt; &lt;/a&gt; y &lt;a href=&quot;../array&quot;&gt; &lt;code&gt;Array&lt;/code&gt; &lt;/a&gt; tienen sus valores originales y que &lt;code&gt;callback.call&lt;/code&gt; se eval&amp;uacute;a como el valor original de &lt;code&gt;&lt;a href=&quot;../function/call&quot;&gt;&lt;code&gt;Function.prototype.call&lt;/code&gt;&lt;/a&gt;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="229ea5beb0c00342e4f861fcdb34073bc4227946" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;mapFn&lt;/code&gt;Optional</source>
          <target state="translated">&lt;code&gt;mapFn&lt;/code&gt;Optional</target>
        </trans-unit>
        <trans-unit id="3194b4c4883bec65fb224fbe2be9dd4e38ab0b8f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;matchAll&lt;/code&gt; internally makes a clone of the &lt;code&gt;&lt;var&gt;regexp&lt;/var&gt;&lt;/code&gt;&amp;mdash;so, unlike &lt;a href=&quot;../regexp/exec&quot;&gt;&lt;code&gt;regexp.exec()&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;lastIndex&lt;/code&gt; does not change as the string is scanned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d12a5ebe0df407a552db7b0799ae18fd3a92bb71" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;matchAll&lt;/code&gt; will throw an exception if the &lt;code&gt;g&lt;/code&gt; flag is missing.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7423960ad7b7cd8782f87524a1f286508f9169eb" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;message&lt;/code&gt;Optional</source>
          <target state="translated">&lt;code&gt;message&lt;/code&gt;Optional</target>
        </trans-unit>
        <trans-unit id="54687aeffccec4fbf3906cafca5811891cf8de0a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;milliseconds&lt;/code&gt;Optional</source>
          <target state="translated">&lt;code&gt;milliseconds&lt;/code&gt;Optional</target>
        </trans-unit>
        <trans-unit id="7bec0eddee15fcea03a00fc66c2039b6f38a0780" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;minutes&lt;/code&gt;Optional</source>
          <target state="translated">&lt;code&gt;minutes&lt;/code&gt;Optional</target>
        </trans-unit>
        <trans-unit id="cab863f9c8e7a621ab3319be4113367dd1c08e73" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;module&lt;/code&gt;: A &lt;a href=&quot;module&quot;&gt;&lt;code&gt;WebAssembly.Module&lt;/code&gt;&lt;/a&gt; object representing the compiled WebAssembly module. This &lt;code&gt;Module&lt;/code&gt; can be instantiated again or shared via &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Worker/postMessage&quot;&gt;postMessage()&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;module&lt;/code&gt; : un objeto &lt;a href=&quot;module&quot;&gt; &lt;code&gt;WebAssembly.Module&lt;/code&gt; &lt;/a&gt; que representa el m&amp;oacute;dulo WebAssembly compilado. Este &lt;code&gt;Module&lt;/code&gt; se puede crear de nuevo o compartir a trav&amp;eacute;s de &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Worker/postMessage&quot;&gt;postMessage ()&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="5689a43f501cd71795d1d667f7206c15c2e1e8cd" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;module&lt;/code&gt;: A &lt;a href=&quot;module&quot;&gt;&lt;code&gt;WebAssembly.Module&lt;/code&gt;&lt;/a&gt; object representing the compiled WebAssembly module. This &lt;code&gt;Module&lt;/code&gt; can be instantiated again or shared via &lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Web/API/Worker/postMessage&quot;&gt;postMessage()&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="570037a5d65dbd849625a8cab9872a559b518e7e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;module&lt;/code&gt;: A &lt;a href=&quot;module&quot;&gt;&lt;code&gt;WebAssembly.Module&lt;/code&gt;&lt;/a&gt; object representing the compiled WebAssembly module. This &lt;code&gt;Module&lt;/code&gt; can be instantiated again, shared via &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Worker/postMessage&quot;&gt;postMessage()&lt;/a&gt; or &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/WebAssembly/Caching_modules&quot;&gt;cached in IndexedDB&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;module&lt;/code&gt; : un objeto &lt;a href=&quot;module&quot;&gt; &lt;code&gt;WebAssembly.Module&lt;/code&gt; &lt;/a&gt; que representa el m&amp;oacute;dulo WebAssembly compilado. Este &lt;code&gt;Module&lt;/code&gt; se puede crear de nuevo, compartir a trav&amp;eacute;s de &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Worker/postMessage&quot;&gt;postMessage ()&lt;/a&gt; o &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/WebAssembly/Caching_modules&quot;&gt;almacenar en cach&amp;eacute; en IndexedDB&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="fc134d6450f86e7a6724daf78b78adb312805c57" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;module&lt;/code&gt;: A &lt;a href=&quot;module&quot;&gt;&lt;code&gt;WebAssembly.Module&lt;/code&gt;&lt;/a&gt; object representing the compiled WebAssembly module. This &lt;code&gt;Module&lt;/code&gt; can be instantiated again, shared via &lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Web/API/Worker/postMessage&quot;&gt;&lt;code&gt;postMessage()&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/WebAssembly/Caching_modules&quot;&gt;cached in IndexedDB&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="df19f489f733c86b7b7bcd72782bc7a2e1800a64" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;month&lt;/code&gt;, &lt;code&gt;day&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;month&lt;/code&gt; , &lt;code&gt;day&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="2a1acc7d30a7c5dacbd2d1aab8b125592a7291c9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;multiline&lt;/code&gt; is now a prototype accessor property rather than an instance's own data property.</source>
          <target state="translated">&lt;code&gt;multiline&lt;/code&gt; es ahora una propiedad de acceso prototipo en lugar de la propiedad de datos propia de una instancia.</target>
        </trans-unit>
        <trans-unit id="e666c8f51154bbcf68f816b9dfc58ee28346e8a4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;mutable&lt;/code&gt;: A boolean value that determines whether the global is mutable or not. By default, this is &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;mutable&lt;/code&gt; : un valor booleano que determina si el global es mutable o no. Por defecto, esto es &lt;code&gt;false&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="32a18f6c94a79fb46945b65f077d9c265b494b87" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;new&lt;/code&gt; operator</source>
          <target state="translated">&lt;code&gt;new&lt;/code&gt; operador</target>
        </trans-unit>
        <trans-unit id="85f59cdf7d685517bc3f5651df6cf2d502964309" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;newSubStr&lt;/code&gt; (replacement)</source>
          <target state="translated">&lt;code&gt;newSubStr&lt;/code&gt; (reemplazo)</target>
        </trans-unit>
        <trans-unit id="d17007687f3a99f714d9d260f795e29a2b0ec361" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;newTarget&lt;/code&gt;Optional</source>
          <target state="translated">&lt;code&gt;newTarget&lt;/code&gt;Optional</target>
        </trans-unit>
        <trans-unit id="147573f26050da6d3802de8a669c445a3c694cd6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;notation&lt;/code&gt; option</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8d5abc0ff9ad38da841cceeac7c345818292c7fd" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;null&lt;/code&gt; is converted to 0.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="30d3fa6853f76c881084956d744a7e1c78f35fa4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;null&lt;/code&gt;;</source>
          <target state="translated">&lt;code&gt;null&lt;/code&gt;;</target>
        </trans-unit>
        <trans-unit id="4abe21d3341151eecd4969352592801fdea88152" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;number&lt;/code&gt;Optional</source>
          <target state="translated">&lt;code&gt;number&lt;/code&gt;Optional</target>
        </trans-unit>
        <trans-unit id="5244ccb067ab9d4431750169d11696d9bf36936a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;onFulfilled&lt;/code&gt;Optional</source>
          <target state="translated">&lt;code&gt;onFulfilled&lt;/code&gt;Optional</target>
        </trans-unit>
        <trans-unit id="9f726bced0ba01ba4cfbd1e6ee1918fc41560308" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;onRejected&amp;nbsp;&lt;/code&gt;Optional</source>
          <target state="translated">&lt;code&gt;onRejected&amp;nbsp;&lt;/code&gt;Optional</target>
        </trans-unit>
        <trans-unit id="f881a71ea084724bb42dd595f47466ac0583c43c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;onRejected&lt;/code&gt;Optional</source>
          <target state="translated">&lt;code&gt;onRejected&lt;/code&gt;Optional</target>
        </trans-unit>
        <trans-unit id="cb95c8ee705426c47ba89027128d9ef4168b36c2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;options&lt;/code&gt; argument</source>
          <target state="translated">&lt;code&gt;options&lt;/code&gt; argumento de opciones</target>
        </trans-unit>
        <trans-unit id="3210cfefc5d87bfad12d64d89fcf375275f108b4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;options&lt;/code&gt;Optional</source>
          <target state="translated">&lt;code&gt;options&lt;/code&gt;Optional</target>
        </trans-unit>
        <trans-unit id="4d5084bd7d4339ac2ccb75678c4a506c3a413f08" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;padString&lt;/code&gt;Optional</source>
          <target state="translated">&lt;code&gt;padString&lt;/code&gt;Optional</target>
        </trans-unit>
        <trans-unit id="8088aff0e0317cef88623399f1d8160d8c5c6bff" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;parentModule.js&lt;/code&gt;: acting as an aggregator (and doing nothing else)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="60a360387f23771e444dd7daeed80d461294ce6b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;parse&lt;/code&gt;: ISO 8601 format</source>
          <target state="translated">&lt;code&gt;parse&lt;/code&gt; : formato ISO 8601</target>
        </trans-unit>
        <trans-unit id="0947306acda4ddd1a5cf6f10a435ca59aa3ce255" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;parseFloat&lt;/code&gt; and &lt;code&gt;BigInt&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7a8927b9e38c8bc77bf97f12457660717a0ab643" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;parseFloat&lt;/code&gt; can also parse and return &lt;a href=&quot;infinity&quot;&gt;&lt;code&gt;Infinity&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="09d1686c4d9e40c080766590b5d9888d77570f77" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;parseFloat&lt;/code&gt; can also parse and return the value &lt;code&gt;Infinity&lt;/code&gt;. You can use the &lt;a href=&quot;isfinite&quot;&gt;&lt;code&gt;isFinite&lt;/code&gt;&lt;/a&gt; function to determine if the result is a finite number (not &lt;code&gt;Infinity&lt;/code&gt;, &lt;code&gt;-Infinity&lt;/code&gt;, or &lt;code&gt;NaN&lt;/code&gt;).</source>
          <target state="translated">&lt;code&gt;parseFloat&lt;/code&gt; tambi&amp;eacute;n puede analizar y devolver el valor &lt;code&gt;Infinity&lt;/code&gt; . Puede usar la funci&amp;oacute;n &lt;a href=&quot;isfinite&quot;&gt; &lt;code&gt;isFinite&lt;/code&gt; &lt;/a&gt; para determinar si el resultado es un n&amp;uacute;mero finito (no &lt;code&gt;Infinity&lt;/code&gt; , &lt;code&gt;-Infinity&lt;/code&gt; o &lt;code&gt;NaN&lt;/code&gt; ).</target>
        </trans-unit>
        <trans-unit id="40fddb6d720adba759e183b974832e39d40b5e5a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;parseFloat&lt;/code&gt; converts &lt;a href=&quot;bigint&quot;&gt;&lt;code&gt;BigInt&lt;/code&gt;&lt;/a&gt; syntax to &lt;a href=&quot;number&quot;&gt;&lt;code&gt;Numbers&lt;/code&gt;&lt;/a&gt;, losing precision. This happens because the trailing &lt;code&gt;n&lt;/code&gt; character is discarded.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ed06ab8d1ef80cb9d0c2aecb83f1ac769b32d235" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;parseFloat&lt;/code&gt; is a function property of the global object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e833e009bf6d96e7580e00e81e79474c6101d516" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;parseFloat&lt;/code&gt; is a top-level function and is not associated with any object.</source>
          <target state="translated">&lt;code&gt;parseFloat&lt;/code&gt; es una funci&amp;oacute;n de nivel superior y no est&amp;aacute; asociada con ning&amp;uacute;n objeto.</target>
        </trans-unit>
        <trans-unit id="c752e1cc1ed89d3cc5b1e95b1fa353bbff053244" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;parseFloat&lt;/code&gt; is also able to parse an object if it has a &lt;code&gt;toString&lt;/code&gt; or &lt;code&gt;valueOf&lt;/code&gt; method defined. The returned value is the same as if &lt;code&gt;parseFloat&lt;/code&gt; had been called on the result of calling that method.</source>
          <target state="translated">&lt;code&gt;parseFloat&lt;/code&gt; tambi&amp;eacute;n puede analizar un objeto si tiene un m&amp;eacute;todo &lt;code&gt;toString&lt;/code&gt; o &lt;code&gt;valueOf&lt;/code&gt; definido. El valor devuelto es el mismo que si se hubiera llamado a &lt;code&gt;parseFloat&lt;/code&gt; en el resultado de llamar a ese m&amp;eacute;todo.</target>
        </trans-unit>
        <trans-unit id="512af01629ed1f2f64dbc4d20a68658cce4d04cb" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;parseFloat&lt;/code&gt; parses its argument, and returns a floating point number. If it encounters a character other than a sign (+ or -), numeral (0-9), a decimal point, or an exponent, it returns the value up to that point and ignores that character and all succeeding characters. Leading and trailing spaces are allowed.</source>
          <target state="translated">&lt;code&gt;parseFloat&lt;/code&gt; analiza su argumento y devuelve un n&amp;uacute;mero de punto flotante. Si encuentra un car&amp;aacute;cter que no sea un signo (+ o -), un n&amp;uacute;mero (0-9), un punto decimal o un exponente, devuelve el valor hasta ese punto e ignora ese car&amp;aacute;cter y todos los caracteres siguientes. Se permiten espacios al principio y al final.</target>
        </trans-unit>
        <trans-unit id="dc4d1144569338664864cf74314032a54052defe" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;parseFloat&lt;/code&gt; returning &lt;code&gt;NaN&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c564d64ddcd2e6b477aebac437fd30fc7d3c9ab7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;parseFloat&lt;/code&gt; returning NaN</source>
          <target state="translated">&lt;code&gt;parseFloat&lt;/code&gt; que devuelve NaN</target>
        </trans-unit>
        <trans-unit id="7b82697d079ee451f8d08adc44b466d16a58f984" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;parseFloat&lt;/code&gt; returning a number</source>
          <target state="translated">&lt;code&gt;parseFloat&lt;/code&gt; devolviendo un n&amp;uacute;mero</target>
        </trans-unit>
        <trans-unit id="debdd5e01ab62bc3885c17016a45f499580cae76" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;parseFloat&lt;/code&gt; will parse non-string objects if they have a &lt;a href=&quot;object/tostring&quot;&gt;&lt;code&gt;toString&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;object/valueof&quot;&gt;&lt;code&gt;valueOf&lt;/code&gt;&lt;/a&gt; method. The returned value is the same as if &lt;code&gt;parseFloat&lt;/code&gt; had been called on the result of those methods.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b9cc97bca43306de8337457eb72736b3da3c5cdc" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;parseInt&lt;/code&gt; doesn't work with &lt;a href=&quot;../lexical_grammar#Numeric_separators&quot;&gt;numeric separators&lt;/a&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8ad844b7b48b7392f9e0839617c1cb44f0467d5c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;parseInt&lt;/code&gt; understands exactly two signs: &lt;code&gt;+&lt;/code&gt; for positive, and &lt;code&gt;-&lt;/code&gt; for negative (since ECMAScript 1). It is done as an initial step in the parsing after whitespace is removed. If no signs are found, the algorithm moves to the following step; otherwise, it removes the sign and runs the number-parsing on the rest of the string.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="88486a3a2be7fe33994788c2f4fac2845014952c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pop&lt;/code&gt; is intentionally generic; this method can be &lt;a href=&quot;../function/call&quot;&gt;called&lt;/a&gt; or &lt;a href=&quot;../function/apply&quot;&gt;applied&lt;/a&gt; to objects resembling arrays. Objects which do not contain a &lt;code&gt;length&lt;/code&gt; property reflecting the last in a series of consecutive, zero-based numerical properties may not behave in any meaningful manner.</source>
          <target state="translated">&lt;code&gt;pop&lt;/code&gt; es intencionalmente gen&amp;eacute;rico; este m&amp;eacute;todo se puede &lt;a href=&quot;../function/call&quot;&gt;llamar&lt;/a&gt; o &lt;a href=&quot;../function/apply&quot;&gt;aplicar&lt;/a&gt; a objetos que se asemejan a matrices. Los objetos que no contienen una propiedad de &lt;code&gt;length&lt;/code&gt; refleje la &amp;uacute;ltima de una serie de propiedades num&amp;eacute;ricas consecutivas basadas en cero pueden no comportarse de manera significativa.</target>
        </trans-unit>
        <trans-unit id="6a8fa3c796449db4a213d5cc2b7b10858c8fdb79" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;position&amp;nbsp;&lt;/code&gt;Optional</source>
          <target state="translated">&lt;code&gt;position&amp;nbsp;&lt;/code&gt;Optional</target>
        </trans-unit>
        <trans-unit id="64dc41635d1bb28845a6ca824a743234d18c19d0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;position&lt;/code&gt;Optional</source>
          <target state="translated">&lt;code&gt;position&lt;/code&gt;Optional</target>
        </trans-unit>
        <trans-unit id="cb86b63bb01ae44b6552744d66f7037f9548e136" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;postMessage()&lt;/code&gt; changes and &lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/crossOriginIsolated&quot;&gt;&lt;code&gt;self.crossOriginIsolated&lt;/code&gt;&lt;/a&gt;: &lt;a href=&quot;https://github.com/whatwg/html/issues/4732&quot;&gt;whatwg/html issue #4732&lt;/a&gt;, &lt;a href=&quot;https://github.com/whatwg/html/issues/4872&quot;&gt;whatwg/html issue #4872&lt;/a&gt;, &lt;a href=&quot;https://github.com/whatwg/html/pull/4734&quot;&gt;draft specification&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="789e43667203fa7c1507d9c5e506e81f5e11b37f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;precision&lt;/code&gt;Optional</source>
          <target state="translated">&lt;code&gt;precision&lt;/code&gt;Optional</target>
        </trans-unit>
        <trans-unit id="73937dff81681f8e5ee4b1551bdfbe4f70c2c3a5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;property_name&lt;/code&gt; is a string. The string does not have to be a valid identifier; it can have any value, e.g. &quot;1foo&quot;, &quot;!bar!&quot;, or even &quot; &quot; (a space).</source>
          <target state="translated">&lt;code&gt;property_name&lt;/code&gt; es una cadena. La cadena no tiene que ser un identificador v&amp;aacute;lido; puede tener cualquier valor, por ejemplo, &quot;1foo&quot;, &quot;! bar!&quot;, o incluso &quot;&quot; (un espacio).</target>
        </trans-unit>
        <trans-unit id="6e6c5a92bf165d55a69dcdd790ec75642103d7b4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;prototype&lt;/code&gt;: Ordinary object (ES2015)</source>
          <target state="translated">&lt;code&gt;prototype&lt;/code&gt; : objeto ordinario (ES2015)</target>
        </trans-unit>
        <trans-unit id="412cbba62e710f9fda920ebc4cc9a20a08e11e2a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;push&lt;/code&gt; is intentionally generic. This method can be used with &lt;a href=&quot;../function/call&quot;&gt;&lt;code&gt;call()&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;../function/apply&quot;&gt;&lt;code&gt;apply()&lt;/code&gt;&lt;/a&gt; on objects resembling arrays. The &lt;code&gt;push&lt;/code&gt; method relies on a &lt;code&gt;length&lt;/code&gt; property to determine where to start inserting the given values. If the &lt;code&gt;length&lt;/code&gt; property cannot be converted into a number, the index used is 0. This includes the possibility of &lt;code&gt;length&lt;/code&gt; being nonexistent, in which case &lt;code&gt;length&lt;/code&gt; will also be created.</source>
          <target state="translated">&lt;code&gt;push&lt;/code&gt; es intencionalmente gen&amp;eacute;rico. Este m&amp;eacute;todo se puede usar con &lt;a href=&quot;../function/call&quot;&gt; &lt;code&gt;call()&lt;/code&gt; &lt;/a&gt; o &lt;a href=&quot;../function/apply&quot;&gt; &lt;code&gt;apply()&lt;/code&gt; &lt;/a&gt; en objetos que se asemejan a matrices. El m&amp;eacute;todo &lt;code&gt;push&lt;/code&gt; se basa en una propiedad de &lt;code&gt;length&lt;/code&gt; para determinar d&amp;oacute;nde empezar a insertar los valores dados. Si la propiedad de &lt;code&gt;length&lt;/code&gt; no se puede convertir en un n&amp;uacute;mero, el &amp;iacute;ndice utilizado es 0. Esto incluye la posibilidad de que la &lt;code&gt;length&lt;/code&gt; no exista, en cuyo caso tambi&amp;eacute;n se crear&amp;aacute; la &lt;code&gt;length&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="340e2add3b7b6ebe096bb95c0caecd7197905d6b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;radix&lt;/code&gt;Optional</source>
          <target state="translated">&lt;code&gt;radix&lt;/code&gt;Optional</target>
        </trans-unit>
        <trans-unit id="ff437e1d27781fa8fde8129f602fde7e4d2dfb7c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;reduce()&lt;/code&gt; and &lt;code&gt;concat()&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="36091360e3739c71f986e08864dc9e15354071d4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;reduce()&lt;/code&gt; executes the &lt;code&gt;callback&lt;/code&gt; function once for each element present in the array, excluding holes in the array, receiving four arguments:</source>
          <target state="translated">&lt;code&gt;reduce()&lt;/code&gt; ejecuta la funci&amp;oacute;n de &lt;code&gt;callback&lt;/code&gt; una vez para cada elemento presente en la matriz, excluyendo los huecos en la matriz, recibiendo cuatro argumentos:</target>
        </trans-unit>
        <trans-unit id="1b3c57cbbdda6a36df177dbe374329222c4c22c3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;reduce&lt;/code&gt; and &lt;code&gt;concat&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;reduce&lt;/code&gt; y &lt;code&gt;concat&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="19f7daca497866407a804d2515195e9b50de7a0b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;reduceRight&lt;/code&gt; executes the callback function once for each element present in the array, excluding holes in the array, receiving four arguments: the initial value (or value from the previous callback call), the value of the current element, the current index, and the array over which iteration is occurring.</source>
          <target state="translated">&lt;code&gt;reduceRight&lt;/code&gt; ejecuta la funci&amp;oacute;n de devoluci&amp;oacute;n de llamada una vez para cada elemento presente en la matriz, excluyendo los huecos en la matriz, recibiendo cuatro argumentos: el valor inicial (o valor de la llamada de devoluci&amp;oacute;n de llamada anterior), el valor del elemento actual, el &amp;iacute;ndice actual y el matriz sobre la que se est&amp;aacute; produciendo la iteraci&amp;oacute;n.</target>
        </trans-unit>
        <trans-unit id="e183bcee9fa0461929a460275eb46398543ac401" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;reduceRight&lt;/code&gt; was added to the ECMA-262 standard in the 5th edition; as such it may not be present in all implementations of the standard. You can work around this by inserting the following code at the beginning of your scripts, allowing use of &lt;code&gt;reduceRight&lt;/code&gt; in implementations which do not natively support it.</source>
          <target state="translated">&lt;code&gt;reduceRight&lt;/code&gt; se agreg&amp;oacute; al est&amp;aacute;ndar ECMA-262 en la quinta edici&amp;oacute;n; como tal, puede que no est&amp;eacute; presente en todas las implementaciones del est&amp;aacute;ndar. Puede &lt;code&gt;reduceRight&lt;/code&gt; esto insertando el siguiente c&amp;oacute;digo al comienzo de sus scripts, permitiendo el uso de reduceRight en implementaciones que no lo admiten de forma nativa.</target>
        </trans-unit>
        <trans-unit id="33516876493d7ab271acd01e5cd4df9b508bb817" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;regexp&lt;/code&gt; (pattern)</source>
          <target state="translated">&lt;code&gt;regexp&lt;/code&gt; (patr&amp;oacute;n)</target>
        </trans-unit>
        <trans-unit id="3b50cdeee94225760e2f7747c9332b8825ee7e2b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;replacer&lt;/code&gt;Optional</source>
          <target state="translated">&lt;code&gt;replacer&lt;/code&gt;Optional</target>
        </trans-unit>
        <trans-unit id="8370a5faedcbe09d86c0241713208a1aca553593" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;reverse&lt;/code&gt; is intentionally generic; this method can be &lt;a href=&quot;../function/call&quot;&gt;called&lt;/a&gt; or &lt;a href=&quot;../function/apply&quot;&gt;applied&lt;/a&gt; to objects resembling arrays. Objects which do not contain a &lt;code&gt;length&lt;/code&gt; property reflecting the last in a series of consecutive, zero-based numerical properties may not behave in any meaningful manner.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="edf09657a6cd9369f4157f23ba0b5f27d5b6de5c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;reviver&lt;/code&gt;Optional</source>
          <target state="translated">&lt;code&gt;reviver&lt;/code&gt;Optional</target>
        </trans-unit>
        <trans-unit id="f8cf22697640068f09c41dd93045f7f4566319a2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;s&lt;/code&gt; (&quot;dotAll&quot;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f0e904f8c24ecf682a6f5e63458cb1cbcee9bac9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;seconds&lt;/code&gt;Optional</source>
          <target state="translated">&lt;code&gt;seconds&lt;/code&gt;Optional</target>
        </trans-unit>
        <trans-unit id="ff83357cc1b6979bd79773394fe6ea40a346fe11" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;separator&lt;/code&gt;Optional</source>
          <target state="translated">&lt;code&gt;separator&lt;/code&gt;Optional</target>
        </trans-unit>
        <trans-unit id="8804c2168c9ae5a944f0d3f1afffcf1f8c60f9f1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;shared&lt;/code&gt; flag</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7170a35caeba3e97dec9aca1b6e4db73bc4bd2fe" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;shift&lt;/code&gt; is intentionally generic; this method can be &lt;a href=&quot;../function/call&quot;&gt;called&lt;/a&gt; or &lt;a href=&quot;../function/apply&quot;&gt;applied&lt;/a&gt; to objects resembling arrays. Objects which do not contain a &lt;code&gt;length&lt;/code&gt; property reflecting the last in a series of consecutive, zero-based numerical properties may not behave in any meaningful manner.</source>
          <target state="translated">&lt;code&gt;shift&lt;/code&gt; es intencionalmente gen&amp;eacute;rico; este m&amp;eacute;todo se puede &lt;a href=&quot;../function/call&quot;&gt;llamar&lt;/a&gt; o &lt;a href=&quot;../function/apply&quot;&gt;aplicar&lt;/a&gt; a objetos que se asemejan a matrices. Los objetos que no contienen una propiedad de &lt;code&gt;length&lt;/code&gt; refleje la &amp;uacute;ltima de una serie de propiedades num&amp;eacute;ricas consecutivas basadas en cero pueden no comportarse de manera significativa.</target>
        </trans-unit>
        <trans-unit id="506872a0c3ac9392e17d31db7e7baa1b3244c1b0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;signDisplay&lt;/code&gt; option</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="daf9baeb2c55cc5db46ec106ce982f897f699f52" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;slice()&lt;/code&gt; also treats &lt;code&gt;NaN&lt;/code&gt; arguments as &lt;code&gt;0&lt;/code&gt;, but when it is given negative values it counts backwards from the end of the string to find the indexes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="160dad759dd0e75b44cd564955c2cdc5c93e7148" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;slice()&lt;/code&gt; extracts the text from one string and returns a new string. Changes to the text in one string do not affect the other string.</source>
          <target state="translated">&lt;code&gt;slice()&lt;/code&gt; extrae el texto de una cadena y devuelve una nueva cadena. Los cambios en el texto de una cadena no afectan a la otra cadena.</target>
        </trans-unit>
        <trans-unit id="76c7627f2bf06346ac2769ec493e76edbc0bb0ee" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;slice()&lt;/code&gt; extracts up to but not including &lt;code&gt;&lt;var&gt;endIndex&lt;/var&gt;&lt;/code&gt;. &lt;code&gt;&lt;var&gt;str&lt;/var&gt;.slice(1, 4)&lt;/code&gt; extracts the second character through the fourth character (characters indexed &lt;code&gt;1&lt;/code&gt;, &lt;code&gt;2&lt;/code&gt;, and &lt;code&gt;3&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c5f97bc4748414b9af188076accbb28e2bc86ead" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;slice()&lt;/code&gt; extracts up to but not including &lt;code&gt;endIndex&lt;/code&gt;. &lt;code&gt;str.slice(1, 4)&lt;/code&gt; extracts the second character through the fourth character (characters indexed 1, 2, and 3).</source>
          <target state="translated">&lt;code&gt;slice()&lt;/code&gt; extrae hasta &lt;code&gt;endIndex&lt;/code&gt; , pero sin incluirlo . &lt;code&gt;str.slice(1, 4)&lt;/code&gt; extrae del segundo car&amp;aacute;cter al cuarto car&amp;aacute;cter (caracteres indexados 1, 2 y 3).</target>
        </trans-unit>
        <trans-unit id="c3e1099202446c7e4ab7ef63ac55d9f8ec063f3d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;slice&lt;/code&gt; does not alter the original array. It returns a shallow copy of elements from the original array. Elements of the original array are copied into the returned array as follows:</source>
          <target state="translated">&lt;code&gt;slice&lt;/code&gt; no altera la matriz original. Devuelve una copia superficial de los elementos de la matriz original. Los elementos de la matriz original se copian en la matriz devuelta de la siguiente manera:</target>
        </trans-unit>
        <trans-unit id="179b14e482dd2bf02a96de7ee24337cd6514dc71" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;slice&lt;/code&gt; method can also be called to convert Array-like objects / collections to a new Array. You just bind the method to the object. The &lt;a href=&quot;../../functions/arguments&quot;&gt;&lt;code&gt;arguments&lt;/code&gt;&lt;/a&gt; inside a function is an example of an 'array-like object'.</source>
          <target state="translated">&lt;code&gt;slice&lt;/code&gt; Tambi&amp;eacute;n se puede llamar al m&amp;eacute;todo slice para convertir objetos / colecciones similares a Array en un nuevo Array. Simplemente vincula el m&amp;eacute;todo al objeto. Los &lt;a href=&quot;../../functions/arguments&quot;&gt; &lt;code&gt;arguments&lt;/code&gt; &lt;/a&gt; dentro de una funci&amp;oacute;n son un ejemplo de un 'objeto similar a una matriz'.</target>
        </trans-unit>
        <trans-unit id="a233c16db0b04f34febcbccaa3c2964718da7174" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;slice&lt;/code&gt; method can also be called to convert Array-like objects/collections to a new Array. You just &lt;a href=&quot;../function/bind&quot;&gt;&lt;code&gt;bind&lt;/code&gt;&lt;/a&gt; the method to the object. The &lt;a href=&quot;../../functions/arguments&quot;&gt;&lt;code&gt;arguments&lt;/code&gt;&lt;/a&gt; inside a function is an example of an 'array-like object'.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="06c5dda2e59bbcd28149fa9d5e0afd8d273ac68e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;some()&lt;/code&gt; does not mutate the array on which it is called.</source>
          <target state="translated">&lt;code&gt;some()&lt;/code&gt; no muta la matriz en la que se llama.</target>
        </trans-unit>
        <trans-unit id="11b28e4ba0863d328756279e3c3292205af51c63" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;some()&lt;/code&gt; executes the &lt;code&gt;callback&lt;/code&gt; function once for each element present in the array until it finds one where &lt;code&gt;callback&lt;/code&gt; returns a &lt;em&gt;truthy&lt;/em&gt; value (a value that becomes true when converted to a Boolean). If such an element is found, &lt;code&gt;some()&lt;/code&gt; immediately returns &lt;code&gt;true&lt;/code&gt;. Otherwise, &lt;code&gt;some()&lt;/code&gt; returns &lt;code&gt;false&lt;/code&gt;. &lt;code&gt;callback&lt;/code&gt; is invoked only for indexes of the array which have assigned values; it is not invoked for indexes which have been deleted or which have never been assigned values.</source>
          <target state="translated">&lt;code&gt;some()&lt;/code&gt; ejecuta la funci&amp;oacute;n de &lt;code&gt;callback&lt;/code&gt; una vez para cada elemento presente en la matriz hasta que encuentra uno en el que la &lt;code&gt;callback&lt;/code&gt; devuelve un valor &lt;em&gt;verdadero&lt;/em&gt; (un valor que se convierte en verdadero cuando se convierte en un booleano). Si se encuentra tal elemento, &lt;code&gt;some()&lt;/code&gt; inmediatamente devuelve &lt;code&gt;true&lt;/code&gt; . De lo contrario, &lt;code&gt;some()&lt;/code&gt; devuelve &lt;code&gt;false&lt;/code&gt; . &lt;code&gt;callback&lt;/code&gt; se invoca solo para los &amp;iacute;ndices de la matriz que tienen valores asignados; no se invoca para &amp;iacute;ndices que se han eliminado o a los que nunca se les han asignado valores.</target>
        </trans-unit>
        <trans-unit id="55765333c3af73f2cdee6fec903b8092522ffe32" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;some()&lt;/code&gt; was added to the ECMA-262 standard in the 5&lt;sup&gt;th&lt;/sup&gt; edition, and it may not be present in all implementations of the standard. You can work around this by inserting the following code at the beginning of your scripts, allowing use of &lt;code&gt;some()&lt;/code&gt; in implementations which do not natively support it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1794642ba04e4d6337bfd3f3640e4918152c675c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;some()&lt;/code&gt; was added to the ECMA-262 standard in the 5th edition; as such it may not be present in all implementations of the standard. You can work around this by inserting the following code at the beginning of your scripts, allowing use of &lt;code&gt;some()&lt;/code&gt; in implementations which do not natively support it. This algorithm is exactly the one specified in ECMA-262, 5th edition, assuming &lt;a href=&quot;../object&quot;&gt;&lt;code&gt;Object&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../typeerror&quot;&gt;&lt;code&gt;TypeError&lt;/code&gt;&lt;/a&gt; have their original values and that &lt;code&gt;fun.call&lt;/code&gt; evaluates to the original value of &lt;a href=&quot;../function/call&quot;&gt;&lt;code&gt;Function.prototype.call()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;some()&lt;/code&gt; se agregaron al est&amp;aacute;ndar ECMA-262 en la quinta edici&amp;oacute;n; como tal, puede que no est&amp;eacute; presente en todas las implementaciones del est&amp;aacute;ndar. Puede solucionar esto insertando el siguiente c&amp;oacute;digo al comienzo de sus scripts, permitiendo el uso de &lt;code&gt;some()&lt;/code&gt; en implementaciones que no lo admiten de forma nativa. Este algoritmo es exactamente el especificado en ECMA-262, 5&amp;ordf; edici&amp;oacute;n, asumiendo que &lt;a href=&quot;../object&quot;&gt; &lt;code&gt;Object&lt;/code&gt; &lt;/a&gt; y &lt;a href=&quot;../typeerror&quot;&gt; &lt;code&gt;TypeError&lt;/code&gt; &lt;/a&gt; tienen sus valores originales y que &lt;code&gt;fun.call&lt;/code&gt; eval&amp;uacute;a el valor original de &lt;a href=&quot;../function/call&quot;&gt; &lt;code&gt;Function.prototype.call()&lt;/code&gt; &lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="814c33c4bbb96e5e855c39b48aa6eebdeb69b0f3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;some&lt;/code&gt; does not mutate the typed array on which it is called.</source>
          <target state="translated">&lt;code&gt;some&lt;/code&gt; no mutan la matriz con tipo en la que se llama.</target>
        </trans-unit>
        <trans-unit id="be6f45d77c2c5ad4e6d66e946743407f28d80e60" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;source&lt;/code&gt; is now a prototype accessor property rather than an instance's own data property.</source>
          <target state="translated">&lt;code&gt;source&lt;/code&gt; ahora es una propiedad de acceso prototipo en lugar de la propiedad de datos propia de una instancia.</target>
        </trans-unit>
        <trans-unit id="ec32f67a13e274cee41ce0b037a6bd6e20a67d84" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;space&lt;/code&gt;Optional</source>
          <target state="translated">&lt;code&gt;space&lt;/code&gt;Optional</target>
        </trans-unit>
        <trans-unit id="facf33433b0c7fdcba36fd5d05001e4a2741b9cd" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;start&lt;/code&gt;Optional</source>
          <target state="translated">&lt;code&gt;start&lt;/code&gt;Optional</target>
        </trans-unit>
        <trans-unit id="00e4a88804e5cd470ac0711199de74522ec38452" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;substr()&lt;/code&gt; extracts &lt;code&gt;&lt;var&gt;length&lt;/var&gt;&lt;/code&gt; characters from a &lt;code&gt;&lt;var&gt;str&lt;/var&gt;&lt;/code&gt;, counting from the &lt;code&gt;&lt;var&gt;start&lt;/var&gt;&lt;/code&gt; index.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="32bc7ebdd7a94be9c6d291b91bbee7e102177381" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;substr()&lt;/code&gt; extracts &lt;code&gt;length&lt;/code&gt; characters from a &lt;code&gt;string&lt;/code&gt;, counting from the &lt;code&gt;start&lt;/code&gt; index.</source>
          <target state="translated">&lt;code&gt;substr()&lt;/code&gt; extrae caracteres de &lt;code&gt;length&lt;/code&gt; de una &lt;code&gt;string&lt;/code&gt; , contando desde el &amp;iacute;ndice de &lt;code&gt;start&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="ba89e1d86344d4b9f6294322e48f8743d850e860" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;substr&lt;/code&gt; (pattern)</source>
          <target state="translated">&lt;code&gt;substr&lt;/code&gt; (patr&amp;oacute;n)</target>
        </trans-unit>
        <trans-unit id="0ea2b9dd54c521c8b0568f54307c19c64d1e9292" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;substring()&lt;/code&gt; extracts characters from &lt;code&gt;&lt;var&gt;indexStart&lt;/var&gt;&lt;/code&gt; up to &lt;em&gt;but not including&lt;/em&gt;&lt;code&gt;&lt;var&gt;indexEnd&lt;/var&gt;&lt;/code&gt;. In particular:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="74bf3cc5b028ce89b3830152d34219ed010da730" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;substring()&lt;/code&gt; extracts characters from &lt;code&gt;indexStart&lt;/code&gt; up to &lt;em&gt;but not including&lt;/em&gt;&lt;code&gt;indexEnd&lt;/code&gt;. In particular:</source>
          <target state="translated">&lt;code&gt;substring()&lt;/code&gt; extrae caracteres desde &lt;code&gt;indexStart&lt;/code&gt; hasta indexEnd , &lt;em&gt;pero sin &lt;/em&gt; &lt;code&gt;indexEnd&lt;/code&gt; . En particular:</target>
        </trans-unit>
        <trans-unit id="f44a4e0f38b52ecf0a8a2003b18a78ebea1791aa" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;super.prop&lt;/code&gt; cannot overwrite non-writable properties</source>
          <target state="translated">&lt;code&gt;super.prop&lt;/code&gt; no puede sobrescribir propiedades no grabables</target>
        </trans-unit>
        <trans-unit id="f3f5e7ea00ede47e426c0e1147b757390d601664" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;target&lt;/code&gt; is the object for which you want to create the proxy</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8ec1da6f6f76d69f8e15863e8233f7a1bbd22277" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;target&lt;/code&gt;: the original object which you want to proxy</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7a5594874f7480f484387f72310ff0d93b8fc375" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;this&lt;/code&gt; in function calls</source>
          <target state="translated">&lt;code&gt;this&lt;/code&gt; en llamadas a funciones</target>
        </trans-unit>
        <trans-unit id="2b5ee3fe1f8e0e75aa710db2fa0a27deb969033d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;this&lt;/code&gt; on the object's prototype chain</source>
          <target state="translated">&lt;code&gt;this&lt;/code&gt; en la cadena del prototipo del objeto</target>
        </trans-unit>
        <trans-unit id="b501381387afcdf844a20f96f0b6091228630172" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;this&lt;/code&gt; with a getter or setter</source>
          <target state="translated">&lt;code&gt;this&lt;/code&gt; con un getter o setter</target>
        </trans-unit>
        <trans-unit id="0d5e6c58c5cd9b050c7049083d44fd11c2eec388" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;this&lt;/code&gt;: only use &lt;code&gt;this&lt;/code&gt; when it refers to an object you created.</source>
          <target state="translated">&lt;code&gt;this&lt;/code&gt; : solo use &lt;code&gt;this&lt;/code&gt; cuando se refiera a un objeto que usted cre&amp;oacute;.</target>
        </trans-unit>
        <trans-unit id="779aceeb7270cdad00cb940de800bd7521481776" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;thisArg&lt;/code&gt;Optional</source>
          <target state="translated">&lt;code&gt;thisArg&lt;/code&gt;Optional</target>
        </trans-unit>
        <trans-unit id="5a08d5948b2def2607aed3f4f4280c011a8b47f9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;timeout&lt;/code&gt;Optional</source>
          <target state="translated">&lt;code&gt;timeout&lt;/code&gt;Optional</target>
        </trans-unit>
        <trans-unit id="cd6efa8c28d1b71498be4ed0b4c22dea950a0fb1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;toFixed()&lt;/code&gt; returns a string representation of &lt;code&gt;&lt;var&gt;numObj&lt;/var&gt;&lt;/code&gt; that does not use exponential notation and has exactly &lt;code&gt;&lt;var&gt;digits&lt;/var&gt;&lt;/code&gt; digits after the decimal place. The number is rounded if necessary, and the fractional part is padded with zeros if necessary so that it has the specified length. If the absolute value of &lt;code&gt;&lt;var&gt;numObj&lt;/var&gt;&lt;/code&gt; is greater or equal to &lt;code&gt;1e+21&lt;/code&gt;, this method simply calls &lt;a href=&quot;tostring&quot;&gt;&lt;code&gt;Number.prototype.toString()&lt;/code&gt;&lt;/a&gt; and returns a string in exponential notation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a3e9c8c91a10a0289e722c74917e77510f78f592" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;toFixed()&lt;/code&gt; returns a string representation of &lt;code&gt;numObj&lt;/code&gt; that does not use exponential notation and has exactly &lt;code&gt;digits&lt;/code&gt; digits after the decimal place. The number is rounded if necessary, and the fractional part is padded with zeros if necessary so that it has the specified length. If &lt;code&gt;numObj&lt;/code&gt; is greater than &lt;code&gt;1e+21&lt;/code&gt;, this method simply calls &lt;a href=&quot;tostring&quot;&gt;&lt;code&gt;Number.prototype.toString()&lt;/code&gt;&lt;/a&gt; and returns a string in exponential notation.</source>
          <target state="translated">&lt;code&gt;toFixed()&lt;/code&gt; devuelve una representaci&amp;oacute;n de cadena de &lt;code&gt;numObj&lt;/code&gt; que no usa notaci&amp;oacute;n exponencial y tiene exactamente &lt;code&gt;digits&lt;/code&gt; d&amp;iacute;gitos despu&amp;eacute;s del lugar decimal. El n&amp;uacute;mero se redondea si es necesario y la parte fraccionaria se rellena con ceros si es necesario para que tenga la longitud especificada. Si &lt;code&gt;numObj&lt;/code&gt; es mayor que &lt;code&gt;1e+21&lt;/code&gt; , este m&amp;eacute;todo simplemente llama a &lt;a href=&quot;tostring&quot;&gt; &lt;code&gt;Number.prototype.toString()&lt;/code&gt; &lt;/a&gt; y devuelve una cadena en notaci&amp;oacute;n exponencial.</target>
        </trans-unit>
        <trans-unit id="a8b651b9c77ed0ce1c0de403bac2282de958ed8b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;toJSON()&lt;/code&gt; behavior</source>
          <target state="translated">&lt;code&gt;toJSON()&lt;/code&gt; comportamiento de toJSON ()</target>
        </trans-unit>
        <trans-unit id="80382765aecda671c63e02055ef7711dfa13c7c3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;toLocaleDateString&lt;/code&gt;: IANA time zone names in &lt;code&gt;timeZone&lt;/code&gt; option</source>
          <target state="translated">&lt;code&gt;toLocaleDateString&lt;/code&gt; : nombres de zona horaria de IANA en la opci&amp;oacute;n &lt;code&gt;timeZone&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="1b752b34a5916bc298b5c8206b28f514ea8ff59f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;toLocaleString&lt;/code&gt;: IANA time zone names in &lt;code&gt;timeZone&lt;/code&gt; option</source>
          <target state="translated">&lt;code&gt;toLocaleString&lt;/code&gt; : nombres de zona horaria de IANA en la opci&amp;oacute;n &lt;code&gt;timeZone&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="6eb277cafd46f4159c896025370f12a2f6d64434" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;toLocaleTimeString&lt;/code&gt;: IANA time zone names in &lt;code&gt;timeZone&lt;/code&gt; option</source>
          <target state="translated">&lt;code&gt;toLocaleTimeString&lt;/code&gt; : nombres de zona horaria de IANA en la opci&amp;oacute;n &lt;code&gt;timeZone&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="f2357bc54ea5d43b9624cc032c23bbef3e951d3c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;toString()&lt;/code&gt; can be used with every object and (by default) allows you to get its class.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="24c0e4e4bc808aeef7016fa7c11598fcba4dde6b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;toString()&lt;/code&gt; can be used with every object and allows you to get its class. To use the &lt;code&gt;Object.prototype.toString()&lt;/code&gt; with every object, you need to call &lt;a href=&quot;../function/call&quot;&gt;&lt;code&gt;Function.prototype.call()&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;../function/apply&quot;&gt;&lt;code&gt;Function.prototype.apply()&lt;/code&gt;&lt;/a&gt; on it, passing the object you want to inspect as the first parameter called &lt;code&gt;thisArg&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;toString()&lt;/code&gt; se puede usar con cada objeto y le permite obtener su clase. Para usar &lt;code&gt;Object.prototype.toString()&lt;/code&gt; con cada objeto, necesita llamar a &lt;a href=&quot;../function/call&quot;&gt; &lt;code&gt;Function.prototype.call()&lt;/code&gt; &lt;/a&gt; o &lt;a href=&quot;../function/apply&quot;&gt; &lt;code&gt;Function.prototype.apply()&lt;/code&gt; &lt;/a&gt; en &amp;eacute;l, pasando el objeto que desea inspeccionar como el primer par&amp;aacute;metro llamado &lt;code&gt;thisArg&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="ebaec00cdc4f2608e90c999113783bb2ce314eb2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;toString()&lt;/code&gt; is a generic method, it does not require that its &lt;code&gt;this&lt;/code&gt; is a &lt;a href=&quot;../date&quot;&gt;&lt;code&gt;Date&lt;/code&gt;&lt;/a&gt; instance. However, it must have an internal &lt;code&gt;[[TimeValue]]&lt;/code&gt; property that can't be constructed using native javascript, so it's effectively limited to use with &lt;a href=&quot;../date&quot;&gt;&lt;code&gt;Date&lt;/code&gt;&lt;/a&gt; instances. If called on a non&amp;ndash;Date instance, a &lt;a href=&quot;../typeerror&quot;&gt;&lt;code&gt;TypeError&lt;/code&gt;&lt;/a&gt; is thrown.</source>
          <target state="translated">&lt;code&gt;toString()&lt;/code&gt; es un m&amp;eacute;todo gen&amp;eacute;rico, que no requiere que su &lt;code&gt;this&lt;/code&gt; es una &lt;a href=&quot;../date&quot;&gt; &lt;code&gt;Date&lt;/code&gt; &lt;/a&gt; instancia. Sin embargo, debe tener una propiedad &lt;code&gt;[[TimeValue]]&lt;/code&gt; interna que no se pueda construir usando javascript nativo, por lo que est&amp;aacute; efectivamente limitado para usarse con instancias de &lt;a href=&quot;../date&quot;&gt; &lt;code&gt;Date&lt;/code&gt; &lt;/a&gt; . Si se llama en una instancia que no es de Date, se lanza un &lt;a href=&quot;../typeerror&quot;&gt; &lt;code&gt;TypeError&lt;/code&gt; &lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="7ca2801f838535a0ed5aff213d7462469b98e89e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;toStringTag&lt;/code&gt; available on all DOM prototype objects</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="03e7516d03397c9f071fe8f614d35da9a8a7cb33" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true || (&lt;em&gt;anything)&lt;/em&gt;&lt;/code&gt; is short-circuit evaluated to true.</source>
          <target state="translated">&lt;code&gt;true || (&lt;em&gt;anything)&lt;/em&gt;&lt;/code&gt; se eval&amp;uacute;a como verdadero en cortocircuito.</target>
        </trans-unit>
        <trans-unit id="3a75a9892ce646bf1a1c3e7454deee3185504855" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; for all cases except when the property is an &lt;a href=&quot;../global_objects/object/hasownproperty&quot;&gt;&lt;code&gt;own&lt;/code&gt;&lt;/a&gt;&lt;a href=&quot;../errors/cant_delete&quot;&gt;&lt;code&gt;non-configurable&lt;/code&gt;&lt;/a&gt; property, in which case, &lt;code&gt;false&lt;/code&gt; is returned in non-strict mode.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="38cbb75fcf75ae853ba9352668f45a213d129616" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; for all cases except when the property is an &lt;a href=&quot;../global_objects/object/hasownproperty&quot;&gt;own&lt;/a&gt;&lt;a href=&quot;../errors/cant_delete&quot;&gt;non-configurable&lt;/a&gt; property, in which case, &lt;code&gt;false&lt;/code&gt; is returned in non-strict mode.</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; para todos los casos, excepto cuando la propiedad es una propiedad &lt;a href=&quot;../global_objects/object/hasownproperty&quot;&gt;propia &lt;/a&gt;&lt;a href=&quot;../errors/cant_delete&quot;&gt;no configurable&lt;/a&gt; , en cuyo caso, se devuelve &lt;code&gt;false&lt;/code&gt; en modo no estricto.</target>
        </trans-unit>
        <trans-unit id="43d49a42f4ac24a23d7b0dc480f52bb724400658" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if an element in the &lt;code&gt;Map&lt;/code&gt; object existed and has been removed, or &lt;code&gt;false&lt;/code&gt; if the element does not exist.</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; si un elemento del objeto &lt;code&gt;Map&lt;/code&gt; a exist&amp;iacute;a y se ha eliminado, o &lt;code&gt;false&lt;/code&gt; si el elemento no existe.</target>
        </trans-unit>
        <trans-unit id="b52fa274694ea5a1179413a7e3384afacd0c8c93" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if an element in the &lt;code&gt;Set&lt;/code&gt; object has been removed successfully; otherwise &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; si un elemento del objeto &lt;code&gt;Set&lt;/code&gt; se ha eliminado correctamente; de lo contrario &lt;code&gt;false&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="ad47e78b85ff8fcadb3f477f5ee28babaf94f1aa" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if an element in the &lt;code&gt;WeakMap&lt;/code&gt; object has been removed successfully. &lt;code&gt;false&lt;/code&gt; if the key is not found in the &lt;code&gt;WeakMap&lt;/code&gt; or if the key is not an object.</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; si un elemento del objeto &lt;code&gt;WeakMap&lt;/code&gt; se ha eliminado correctamente. &lt;code&gt;false&lt;/code&gt; si la clave no se encuentra en &lt;code&gt;WeakMap&lt;/code&gt; o si la clave no es un objeto.</target>
        </trans-unit>
        <trans-unit id="29b415aaceb085945bf44324421e03d6e9dd9d79" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if an element in the &lt;code&gt;WeakSet&lt;/code&gt; object has been removed successfully. &lt;code&gt;false&lt;/code&gt; if the &lt;code&gt;&lt;var&gt;value&lt;/var&gt;&lt;/code&gt; is not found in the &lt;code&gt;WeakSet&lt;/code&gt; or if the &lt;code&gt;&lt;var&gt;value&lt;/var&gt;&lt;/code&gt; is not an object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d10e10b35c90a25c38dcec81ac0307fdb144459e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if an element with the specified key exists in the &lt;code&gt;Map&lt;/code&gt; object; otherwise &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dbd4f5c319694e7739e297c51a6f63c48382b8ae" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if and only if the type of this property descriptor may be changed and if the property may be deleted from the corresponding object.</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; si y solo si el tipo de este descriptor de propiedad puede cambiarse y si la propiedad puede eliminarse del objeto correspondiente.</target>
        </trans-unit>
        <trans-unit id="a261c928f83c6ef114df5a7b67df45bdfdd4d65e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if and only if the value associated with the property may be changed (data descriptors only).</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; si y solo si se puede cambiar el valor asociado con la propiedad (solo descriptores de datos).</target>
        </trans-unit>
        <trans-unit id="2998d7302bb6803e20e9c8b2bacf115cfee7be97" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if and only if the value associated with the property may be changed with an &lt;a href=&quot;../../operators/assignment_operators&quot;&gt;assignment operator&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; si y solo si el valor asociado con la propiedad puede cambiarse con un &lt;a href=&quot;../../operators/assignment_operators&quot;&gt;operador de asignaci&amp;oacute;n&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="d00d86a6d8a92e37edb6285755a29d872a473677" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if and only if the value associated with the property may be changed with an &lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators&quot;&gt;assignment operator&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b9f79a7d054490db92eba9d372aa4b719752b605" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if and only if this property shows up during enumeration of the properties on the corresponding object.</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; si y solo si esta propiedad aparece durante la enumeraci&amp;oacute;n de las propiedades en el objeto correspondiente.</target>
        </trans-unit>
        <trans-unit id="4c3da4f0fa6fb277cb9092ad700602053d320d24" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if the &lt;code&gt;&lt;var&gt;callback&lt;/var&gt;&lt;/code&gt; function returns a &lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Glossary/truthy&quot;&gt;truthy&lt;/a&gt; value for every array element. Otherwise, &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="67d3dd43c68d5e696a9e5641f1bcd93c50c6e202" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if the callback function returns a &lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Glossary/truthy&quot;&gt;truthy&lt;/a&gt; value for at least one element in the array. Otherwise, &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c21a792f1196a7bf318d7ddda31a497ec72af276" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if the given argument is one of the &lt;a href=&quot;../arraybuffer&quot;&gt;&lt;code&gt;ArrayBuffer&lt;/code&gt;&lt;/a&gt; views; otherwise, &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="403ab8fef7185da9ea8f236690743212ee3f4511" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if the given argument is one of the &lt;code&gt;ArrayBuffer&lt;/code&gt; views; otherwise, &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; si el argumento dado es una de las vistas &lt;code&gt;ArrayBuffer&lt;/code&gt; ; de lo contrario, &lt;code&gt;false&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="2ad722b1a78f0b3aaa3ab9fc3122d01b5ab72196" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if the given characters are found at the beginning of the string; otherwise, &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; si los caracteres dados se encuentran al principio de la cadena; de lo contrario, &lt;code&gt;false&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="599635e4a36f0da6f478ec8cea82bf84c7e4eba4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if the given characters are found at the end of the string; otherwise, &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; si los caracteres dados se encuentran al final de la cadena; de lo contrario, &lt;code&gt;false&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="efce8eb89437ea55e8a2d32953d36dcf92c4b621" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if the given value is &lt;a href=&quot;nan&quot;&gt;&lt;code&gt;NaN&lt;/code&gt;&lt;/a&gt;; otherwise, &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; si el valor dado es &lt;a href=&quot;nan&quot;&gt; &lt;code&gt;NaN&lt;/code&gt; &lt;/a&gt; ; de lo contrario, &lt;code&gt;false&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="342737374e8a91e88099d9b9c6cf35e172a22132" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if the search string is found anywhere within the given string; otherwise, &lt;code&gt;false&lt;/code&gt; if not.</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; si la cadena de b&amp;uacute;squeda se encuentra en cualquier lugar dentro de la cadena dada; de lo contrario, &lt;code&gt;false&lt;/code&gt; si no.</target>
        </trans-unit>
        <trans-unit id="b45b62d5368b4c0e9efcd190abd4657b28482aac" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if the type of this property descriptor may be changed and if the property may be deleted from the corresponding object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9adc4051d3bc152ed3183c5026223536cde154b7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if the value associated with the property may be changed with an &lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators&quot;&gt;assignment operator&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="81c424b5f4868e1250efd5e39d0663d70bdfaf0b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if the value is an &lt;a href=&quot;../array&quot;&gt;&lt;code&gt;Array&lt;/code&gt;&lt;/a&gt;; otherwise, &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; si el valor es una &lt;a href=&quot;../array&quot;&gt; &lt;code&gt;Array&lt;/code&gt; &lt;/a&gt; ; de lo contrario, &lt;code&gt;false&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="559a1263b837d64ca49563260ab655c8946e0b25" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if there is a match between the regular expression and the specified string; otherwise, &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; si hay una coincidencia entre la expresi&amp;oacute;n regular y la cadena especificada; de lo contrario, &lt;code&gt;false&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="5aa4fc19ff2fed2084866086fd95c9826c1eb21b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if there is a match between the regular expression and the string &lt;code&gt;&lt;var&gt;str&lt;/var&gt;&lt;/code&gt;. Otherwise, &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="77828a19827fbdc424b84d1895fdd02871afd19b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;typeof&lt;/code&gt; is very useful, but it's not as versatile as might be required. For example, &lt;code&gt;typeof([])&lt;/code&gt; , is &lt;code&gt;'object'&lt;/code&gt;, as well as &lt;code&gt;typeof(new Date())&lt;/code&gt;, &lt;code&gt;typeof(/abc/)&lt;/code&gt;, etc.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b06a8d0aa1f35f09637f0a833487b8ac3df2eaf8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;typeof&lt;/code&gt; operator</source>
          <target state="translated">&lt;code&gt;typeof&lt;/code&gt; operador</target>
        </trans-unit>
        <trans-unit id="d8f4be745b14d9299f6ec673a464339d3ea7a35d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;u&lt;/code&gt; (unicode)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a0e464a434c0829ccdda8e446f04c6aa52dfeef9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;undefined&lt;/code&gt; is a property of the &lt;em&gt;global object&lt;/em&gt;. That is, it is a variable in global scope. The initial value of &lt;code&gt;undefined&lt;/code&gt; is the primitive value &lt;code&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/Undefined&quot;&gt;undefined&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e39019e70685809a646df8badf13aa6fcb90f191" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;undefined&lt;/code&gt; is a property of the &lt;em&gt;global object&lt;/em&gt;; i.e., it is a variable in global scope. The initial value of &lt;code&gt;undefined&lt;/code&gt; is the primitive value &lt;code&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/Undefined&quot;&gt;undefined&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;undefined&lt;/code&gt; es una propiedad del &lt;em&gt;objeto global&lt;/em&gt; ; es decir, es una variable de alcance global. El valor inicial de &lt;code&gt;undefined&lt;/code&gt; es el valor primitivo &lt;code&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/Undefined&quot;&gt;undefined&lt;/a&gt;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="bafb25e45e9121c8d8d141bc3c18cf2567eaee64" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;undefined&lt;/code&gt; is converted to &lt;code&gt;NaN&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e32478874aacd9d501e1cb1554de2adde3425fe6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;undefined&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;undefined&lt;/code&gt;.</target>
        </trans-unit>
        <trans-unit id="583f1a093d9e0daac2d6218f56fbe2b878d0a75c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;uneval()&lt;/code&gt; is a top-level function and is not associated with any object.</source>
          <target state="translated">&lt;code&gt;uneval()&lt;/code&gt; es una funci&amp;oacute;n de nivel superior y no est&amp;aacute; asociada con ning&amp;uacute;n objeto.</target>
        </trans-unit>
        <trans-unit id="f81616975d2e8f5874d919bfd5327ba6f8106ce0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;unit&lt;/code&gt; option</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="302cdc6ce7cb7add774a492bfe1607e6e195d274" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;unitDisplay&lt;/code&gt; option</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="32c095e38b4ee414da4e757f9bfe9348be4e3399" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;unshift&lt;/code&gt; is intentionally generic. This method can be &lt;a href=&quot;../function/call&quot;&gt;called&lt;/a&gt; or &lt;a href=&quot;../function/apply&quot;&gt;applied&lt;/a&gt; to objects resembling arrays. Objects which do not contain a &lt;code&gt;length&lt;/code&gt; property&amp;mdash;reflecting the last in a series of consecutive, zero-based numerical properties&amp;mdash;may not behave in any meaningful manner.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="54ea170c667936dd460a01147aec68e0e36f24d9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;unshift&lt;/code&gt; is intentionally generic; this method can be &lt;a href=&quot;../function/call&quot;&gt;called&lt;/a&gt; or &lt;a href=&quot;../function/apply&quot;&gt;applied&lt;/a&gt; to objects resembling arrays. Objects which do not contain a &lt;code&gt;length&lt;/code&gt; property reflecting the last in a series of consecutive, zero-based numerical properties may not behave in any meaningful manner.</source>
          <target state="translated">&lt;code&gt;unshift&lt;/code&gt; es intencionalmente gen&amp;eacute;rico; este m&amp;eacute;todo se puede &lt;a href=&quot;../function/call&quot;&gt;llamar&lt;/a&gt; o &lt;a href=&quot;../function/apply&quot;&gt;aplicar&lt;/a&gt; a objetos que se asemejan a matrices. Los objetos que no contienen una propiedad de &lt;code&gt;length&lt;/code&gt; refleje la &amp;uacute;ltima de una serie de propiedades num&amp;eacute;ricas consecutivas basadas en cero pueden no comportarse de manera significativa.</target>
        </trans-unit>
        <trans-unit id="082c78c82d02cfa1aa55b9668629269cfe246e0b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;value1&lt;/code&gt;, &lt;code&gt;value2&lt;/code&gt;, &amp;hellip;, &lt;code&gt;valueN&lt;/code&gt;Optional</source>
          <target state="translated">&lt;code&gt;value1&lt;/code&gt; , &lt;code&gt;value2&lt;/code&gt; , ..., &lt;code&gt;valueN&lt;/code&gt; opcional</target>
        </trans-unit>
        <trans-unit id="d8fca77d17b58678670fbc0cae9a64a21cc517f9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;value&lt;/code&gt; - any JavaScript value returned by the iterator. Can be omitted when &lt;code&gt;done&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;value&lt;/code&gt; : cualquier valor de JavaScript devuelto por el iterador. Se puede omitir cuando &lt;code&gt;done&lt;/code&gt; es &lt;code&gt;true&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="719b0a44fa3a7cc390dda454c3238006d814f0f5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;value&lt;/code&gt;: A &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/USVString&quot;&gt;&lt;code&gt;USVString&lt;/code&gt;&lt;/a&gt; representing the data type of the global. This can be one of &lt;code&gt;i32&lt;/code&gt;, &lt;code&gt;i64&lt;/code&gt;, &lt;code&gt;f32&lt;/code&gt;, and &lt;code&gt;f64&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;value&lt;/code&gt; : un &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/USVString&quot;&gt; &lt;code&gt;USVString&lt;/code&gt; que&lt;/a&gt; representa el tipo de datos del global. Esta puede ser una de &lt;code&gt;i32&lt;/code&gt; , &lt;code&gt;i64&lt;/code&gt; , &lt;code&gt;f32&lt;/code&gt; y &lt;code&gt;f64&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="6054dec0fecbb0eb5efb4e993d88827bd4a23b3e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;value&lt;/code&gt;: A &lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Web/API/USVString&quot;&gt;&lt;code&gt;USVString&lt;/code&gt;&lt;/a&gt; representing the data type of the global. This can be one of &lt;code&gt;i32&lt;/code&gt;, &lt;code&gt;i64&lt;/code&gt;, &lt;code&gt;f32&lt;/code&gt;, and &lt;code&gt;f64&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c7212f894d6633f59bc5f54b28b6cb717ee7845e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;value&lt;/code&gt;Optional</source>
          <target state="translated">&lt;code&gt;value&lt;/code&gt;Optional</target>
        </trans-unit>
        <trans-unit id="e73f3f1f5fa4d6bd92c5a843d08920d8f064e14a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;value&lt;em&gt;N&lt;/em&gt;&lt;/code&gt;Optional</source>
          <target state="translated">&lt;code&gt;value&lt;em&gt;N&lt;/em&gt;&lt;/code&gt;Optional</target>
        </trans-unit>
        <trans-unit id="b278bbc667f37602237e3f657c44d68ec7b00636" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;var1&lt;/code&gt;, &lt;code&gt;var2&lt;/code&gt;, &amp;hellip;, &lt;code&gt;varN&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;var1&lt;/code&gt; , &lt;code&gt;var2&lt;/code&gt; ,&amp;hellip;, &lt;code&gt;varN&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="5198c43a0a2c8e761576d62222bceee6d227648e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;var&lt;/code&gt; declarations, wherever they occur, are processed before any code is executed. This is called</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="185c9b3f09ed3b97953f5ab491884df10b2d1078" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;var&lt;/code&gt; declarations, wherever they occur, are processed before any code is executed. This is called hoisting, and is discussed further below.</source>
          <target state="translated">&lt;code&gt;var&lt;/code&gt; declaraciones de var , dondequiera que ocurran, se procesan antes de que se ejecute cualquier c&amp;oacute;digo. A esto se le llama elevaci&amp;oacute;n y se analiza m&amp;aacute;s adelante.</target>
        </trans-unit>
        <trans-unit id="e29396e88101aa5c9c6e5b1a6ea79a0ca2383722" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;weekday&lt;/code&gt;, &lt;code&gt;year&lt;/code&gt;, &lt;code&gt;month&lt;/code&gt;, &lt;code&gt;day&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;weekday&lt;/code&gt; , &lt;code&gt;year&lt;/code&gt; , &lt;code&gt;month&lt;/code&gt; , &lt;code&gt;day&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="a1ab0381dcfa7096741dbbe819c3f0cd4e33a1de" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;weekday&lt;/code&gt;, &lt;code&gt;year&lt;/code&gt;, &lt;code&gt;month&lt;/code&gt;, &lt;code&gt;day&lt;/code&gt;, &lt;code&gt;hour&lt;/code&gt;, &lt;code&gt;minute&lt;/code&gt;, &lt;code&gt;second&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;weekday&lt;/code&gt; , &lt;code&gt;year&lt;/code&gt; , &lt;code&gt;month&lt;/code&gt; , &lt;code&gt;day&lt;/code&gt; , &lt;code&gt;hour&lt;/code&gt; , &lt;code&gt;minute&lt;/code&gt; , &lt;code&gt;second&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="77ba3e1c7e5c081f8adbe70192a42e20eed1a621" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;with&lt;/code&gt; check: &lt;code&gt;with(&lt;var&gt;proxy&lt;/var&gt;) { (&lt;var&gt;foo&lt;/var&gt;); }&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4a3d71da112f61025ed1ed587e449658a6dd9467" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;with&lt;/code&gt; check&lt;code&gt;: with(proxy) { (foo); }&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;with&lt;/code&gt; cheque &lt;code&gt;: with(proxy) { (foo); }&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="f2564e73c49fba950a33b3b2d7e8d86a1fac9b92" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;y&lt;/code&gt; (sticky)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e21e2f9b82bc91902812d873f3f79cfae15e1f2e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;year&lt;/code&gt;, &lt;code&gt;month&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;year&lt;/code&gt; , &lt;code&gt;month&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="127e3bef85bcf72c62d28958d52e82b0eba14fa6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;year&lt;/code&gt;, &lt;code&gt;month&lt;/code&gt;, &lt;code&gt;day&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;year&lt;/code&gt; , &lt;code&gt;month&lt;/code&gt; , &lt;code&gt;day&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="f44ca90616094f82848fbe5144c223df70db8b64" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;yield*&lt;/code&gt; is an expression, not a statement&amp;mdash;so it evaluates to a value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e3c455c86448186ceb1938325bdc16b3566e6f09" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;yield*&lt;/code&gt; is an expression, not a statement, so it evaluates to a value.</source>
          <target state="translated">&lt;code&gt;yield*&lt;/code&gt; es una expresi&amp;oacute;n, no una declaraci&amp;oacute;n, por lo que se eval&amp;uacute;a como un valor.</target>
        </trans-unit>
        <trans-unit id="c4818477820572aa3eba10723060b580dabd13d5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;yield&lt;/code&gt; can only be called directly from the generator function that contains it. It cannot be called from nested functions or from callbacks.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="419dd5b8fccd2a6487579a6a8a9b5e7f19fe9565" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;yield&lt;/code&gt;, &lt;code&gt;yield*&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;yield&lt;/code&gt; , &lt;code&gt;yield*&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="341bf96f46b0c81adb002d295542211646e18d09" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;{a, b} = {a: 1, b: 2}&lt;/code&gt; is not valid stand-alone syntax, as the &lt;code&gt;{a, b}&lt;/code&gt; on the left-hand side is considered a block and not an object literal.</source>
          <target state="translated">&lt;code&gt;{a, b} = {a: 1, b: 2}&lt;/code&gt; no es una sintaxis independiente v&amp;aacute;lida, ya que &lt;code&gt;{a, b}&lt;/code&gt; en el lado izquierdo se considera un bloque y no un objeto literal.</target>
        </trans-unit>
        <trans-unit id="5230ab5dda2ed412cc89baa47822f4d75125653e" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;(But if same object is created simply in different order -- at least in some implementations...)&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;(Pero si el mismo objeto se crea simplemente en un orden diferente, al menos en algunas implementaciones ...)&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="c80e7c4a9494fcf16c8427fb8b64aa835e6b0f9c" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;(But if the same object is created simply in a different order -- at least in some implementations...)&lt;/em&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dfb02ceb026e6ae5ac6f0be402c1b301d7940564" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;(In addition to all the string-related functions shown above, this also adds:)&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;(Adem&amp;aacute;s de todas las funciones relacionadas con cadenas que se muestran arriba, esto tambi&amp;eacute;n agrega :)&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="a2eef995cc95e10cdc733dccecfaa31698e73159" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;A simple common debugging function:&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;Una funci&amp;oacute;n de depuraci&amp;oacute;n com&amp;uacute;n simple:&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="5d5b905aab17381457ccd41c46671a2d91479799" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Implementation-dependent&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;Implementation-dependent&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="7fa0ad8b5a8291adb411d07ca7859a1bddd190ce" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Not such simple results: (especially if silent error-trapping had hidden the error messages)&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;Resultados no tan simples: (especialmente si la captura silenciosa de errores hab&amp;iacute;a ocultado los mensajes de error)&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="717f3e3fcef4bcf703ec3a92b35b6d2e55c89b37" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;The &lt;code&gt;CompileError&lt;/code&gt; constructor contains no methods of its own, however, it does inherit some methods through the prototype chain.&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;El constructor &lt;code&gt;CompileError&lt;/code&gt; no contiene m&amp;eacute;todos propios, sin embargo, hereda algunos m&amp;eacute;todos a trav&amp;eacute;s de la cadena de prototipos.&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="87700a667a6673156a97eafb30f14af47b5921a3" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;The &lt;code&gt;CompileError&lt;/code&gt; constructor contains no unique properties of its own, however, it does inherit some properties through the prototype chain.&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;El constructor &lt;code&gt;CompileError&lt;/code&gt; no contiene propiedades &amp;uacute;nicas propias, sin embargo, hereda algunas propiedades a trav&amp;eacute;s de la cadena de prototipos.&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="f15b7e992ab5dd1f13952a86ad0bf02cdea5df4b" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;The &lt;code&gt;LinkError&lt;/code&gt; constructor contains no methods of its own, however, it does inherit some methods through the prototype chain.&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;El constructor &lt;code&gt;LinkError&lt;/code&gt; no contiene m&amp;eacute;todos propios, sin embargo, hereda algunos m&amp;eacute;todos a trav&amp;eacute;s de la cadena de prototipos.&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="6c1ba8efd28bc55d3bdf90dfe77d00fb1c86e62d" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;The &lt;code&gt;LinkError&lt;/code&gt; constructor contains no unique properties of its own, however, it does inherit some properties through the prototype chain.&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;El constructor &lt;code&gt;LinkError&lt;/code&gt; no contiene propiedades &amp;uacute;nicas propias, sin embargo, hereda algunas propiedades a trav&amp;eacute;s de la cadena de prototipos.&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="81ab2d2c1255f7e1753ac01cc91d81c8f9c48501" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;The &lt;code&gt;RuntimeError&lt;/code&gt; constructor contains no methods of its own, however, it does inherit some methods through the prototype chain.&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;El constructor &lt;code&gt;RuntimeError&lt;/code&gt; no contiene m&amp;eacute;todos propios, sin embargo, hereda algunos m&amp;eacute;todos a trav&amp;eacute;s de la cadena de prototipos.&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="74095f42de4d7f5475ae1dbc4725b9be3544fd4f" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;The &lt;code&gt;RuntimeError&lt;/code&gt; constructor contains no unique properties of its own, however, it does inherit some properties through the prototype chain.&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;El constructor &lt;code&gt;RuntimeError&lt;/code&gt; no contiene propiedades &amp;uacute;nicas propias, sin embargo, hereda algunas propiedades a trav&amp;eacute;s de la cadena de prototipos.&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="8cb7b844be425a6fac5553f6a15fb2935cc155cf" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;TypedArray&lt;/em&gt;.length</source>
          <target state="translated">&lt;em&gt;TypedArray&lt;/em&gt;.length</target>
        </trans-unit>
        <trans-unit id="1c710b3236a880a923694bf6a06886ddbacad493" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;bufferSource&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;bufferSource&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="1fba8cd3f7f6217871e25861874ae318826487b9" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;descriptor&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;descriptor&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="54072ae3218999871450d1ac7d5ccf9caab714d0" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;element&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;element&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="842439d5a5b16c0e40a6c0b28aaf23f3b2e8f80e" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;fulfilled&lt;/em&gt;: meaning that the operation completed successfully.</source>
          <target state="translated">&lt;em&gt;cumplido&lt;/em&gt; : significa que la operaci&amp;oacute;n se complet&amp;oacute; con &amp;eacute;xito.</target>
        </trans-unit>
        <trans-unit id="9d5941e7369e2245ec8324630f746a5f579fa604" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;fulfilled&lt;/em&gt;: meaning that the operation was completed successfully.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dd168aa9d4ae49e271eef17edb16794501f68041" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;getTime() always uses UTC for time representation. For example, a client browser in one timezone, getTime() will be the same as a client browser in any other timezone.&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;getTime () siempre usa UTC para la representaci&amp;oacute;n de la hora. Por ejemplo, un navegador cliente en una zona horaria, getTime () ser&amp;aacute; el mismo que un navegador cliente en cualquier otra zona horaria.&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="5202973f7bda6ae438bed3c03b95c200d8b18c2c" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;importObject&lt;/em&gt;Optional</source>
          <target state="translated">&lt;em&gt;importObject&lt;/em&gt;Optional</target>
        </trans-unit>
        <trans-unit id="4bdbec4903c75d928d10089c854073ed37579d4d" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;index&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;index&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="2d7b87c5aff182ec43148180c5da2bc7e9cebaa8" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;initial&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;initial&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="598521aec28dde71093d6bbc59ff5cfc1299ca0e" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;maximum Optional&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;m&amp;aacute;ximo Opcional&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="934ace61f06798239432f0fa44e4ff08d6329c5a" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;memoryDescriptor&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;memoryDescriptor&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="38e0f8032431764a059a1cb9cc659b02c68bf62d" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;module&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;module&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="cb30455a66424f3529cb89fcf9b7e15c3d5db894" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;number&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;number&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="d8d22cc104a692c502f9dcdf46a40697fc074e64" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;or&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;or&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="c43da98eedb6185b4e71f1eec7e1639f100b2700" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;pending&lt;/em&gt;: initial state, neither fulfilled nor rejected.</source>
          <target state="translated">&lt;em&gt;pendiente&lt;/em&gt; : estado inicial, ni cumplido ni rechazado.</target>
        </trans-unit>
        <trans-unit id="62469c9ee4d6d79ce6f2f8d4741fef5526fd9e0a" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;rejected&lt;/em&gt;: meaning that the operation failed.</source>
          <target state="translated">&lt;em&gt;rechazado&lt;/em&gt; : significa que la operaci&amp;oacute;n fall&amp;oacute;.</target>
        </trans-unit>
        <trans-unit id="076c60f25ec5e538e4ed4f4fecd6fb1b67cb4534" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;sectionName&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;sectionName&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="24bcdb791ccc08a22b157d613997e10cb880d5ab" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;source&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;source&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="90915625bd23460bbd44a00cfa9cf6a30f7e2120" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;tableDescriptor&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;tableDescriptor&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="10724613722309506661f9165cfb6951a5777c68" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;tagged template&lt;/em&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="57b94954efb552b29d0a51dd28abd1e100e2963d" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;value&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;value&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="186298d2b51234bde601493ff83fbb5fe6dc2235" translate="yes" xml:space="preserve">
          <source>&lt;s&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/arity&quot;&gt;&lt;code&gt;Function.arity&lt;/code&gt;&lt;/a&gt; &lt;/s&gt;</source>
          <target state="translated">&lt;s&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/arity&quot;&gt;&lt;code&gt;Function.arity&lt;/code&gt;&lt;/a&gt; &lt;/s&gt;</target>
        </trans-unit>
        <trans-unit id="6029dc0e32d5181c9fba478ecc8d70c25b2353fa" translate="yes" xml:space="preserve">
          <source>&lt;s&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/toInteger&quot;&gt;&lt;code&gt;Number.toInteger()&lt;/code&gt;&lt;/a&gt; &lt;/s&gt;</source>
          <target state="translated">&lt;s&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/toInteger&quot;&gt;&lt;code&gt;Number.toInteger()&lt;/code&gt;&lt;/a&gt; &lt;/s&gt;</target>
        </trans-unit>
        <trans-unit id="3d323408d32352f03d18541923ef7caf562d4d7d" translate="yes" xml:space="preserve">
          <source>&lt;s&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/count&quot;&gt;&lt;code&gt;Object.prototype.__count__&lt;/code&gt;&lt;/a&gt; &lt;/s&gt;</source>
          <target state="translated">&lt;s&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/count&quot;&gt;&lt;code&gt;Object.prototype.__count__&lt;/code&gt;&lt;/a&gt; &lt;/s&gt;</target>
        </trans-unit>
        <trans-unit id="21cd6cc7bf1095aefebe43ef37e8ced2ea2fbe4a" translate="yes" xml:space="preserve">
          <source>&lt;s&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/eval&quot;&gt;&lt;code&gt;Object.prototype.eval()&lt;/code&gt;&lt;/a&gt; &lt;/s&gt;</source>
          <target state="translated">&lt;s&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/eval&quot;&gt;&lt;code&gt;Object.prototype.eval()&lt;/code&gt;&lt;/a&gt; &lt;/s&gt;</target>
        </trans-unit>
        <trans-unit id="df274dbbedd00a1dd82f3a4a7d6246936b3a95f4" translate="yes" xml:space="preserve">
          <source>&lt;s&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/parent&quot;&gt;&lt;code&gt;Object.prototype.__parent__&lt;/code&gt;&lt;/a&gt; &lt;/s&gt;</source>
          <target state="translated">&lt;s&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/parent&quot;&gt;&lt;code&gt;Object.prototype.__parent__&lt;/code&gt;&lt;/a&gt; &lt;/s&gt;</target>
        </trans-unit>
        <trans-unit id="22a2cc28c8fd46b420a8e8c936878a517cb20ea9" translate="yes" xml:space="preserve">
          <source>&lt;s&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/quote&quot;&gt;&lt;code&gt;String.prototype.quote()&lt;/code&gt;&lt;/a&gt; &lt;/s&gt;</source>
          <target state="translated">&lt;s&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/quote&quot;&gt;&lt;code&gt;String.prototype.quote()&lt;/code&gt;&lt;/a&gt; &lt;/s&gt;</target>
        </trans-unit>
        <trans-unit id="f519c17b9e05ab642f70b7f859003b50b27c3755" translate="yes" xml:space="preserve">
          <source>&lt;s&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap/clear&quot;&gt;&lt;code&gt;WeakMap.prototype.clear()&lt;/code&gt;&lt;/a&gt; &lt;/s&gt;</source>
          <target state="translated">&lt;s&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap/clear&quot;&gt;&lt;code&gt;WeakMap.prototype.clear()&lt;/code&gt;&lt;/a&gt; &lt;/s&gt;</target>
        </trans-unit>
        <trans-unit id="0af0f742385c87deb76114ccabb08706485d454d" translate="yes" xml:space="preserve">
          <source>&lt;s&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakSet/clear&quot;&gt;&lt;code&gt;WeakSet.prototype.clear()&lt;/code&gt;&lt;/a&gt; &lt;/s&gt;</source>
          <target state="translated">&lt;s&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakSet/clear&quot;&gt;&lt;code&gt;WeakSet.prototype.clear()&lt;/code&gt;&lt;/a&gt; &lt;/s&gt;</target>
        </trans-unit>
        <trans-unit id="3562043c28d38e818e1d9187523ab791d7e15d59" translate="yes" xml:space="preserve">
          <source>&lt;s&gt;Removes all elements from the &lt;code&gt;WeakSet&lt;/code&gt; object.&lt;/s&gt;</source>
          <target state="translated">&lt;s&gt;Elimina todos los elementos del objeto &lt;code&gt;WeakSet&lt;/code&gt; .&lt;/s&gt;</target>
        </trans-unit>
        <trans-unit id="62be5d11388f2bf91d12309fb1a47e2b90a86249" translate="yes" xml:space="preserve">
          <source>&lt;s&gt;Removes all key/value pairs from the &lt;code&gt;WeakMap&lt;/code&gt; object. Note that it is possible to implement a &lt;code&gt;WeakMap&lt;/code&gt;-like object that has a &lt;code&gt;.clear()&lt;/code&gt; method by encapsulating a &lt;code&gt;WeakMap&lt;/code&gt; object that hasn't it (see example on page &lt;a href=&quot;../weakmap&quot;&gt;&lt;code&gt;WeakMap&lt;/code&gt;&lt;/a&gt;)&lt;/s&gt;</source>
          <target state="translated">&lt;s&gt;Elimina todos los pares clave / valor del objeto &lt;code&gt;WeakMap&lt;/code&gt; . Tenga en cuenta que es posible implementar un objeto similar a &lt;code&gt;WeakMap&lt;/code&gt; que tiene un m&amp;eacute;todo &lt;code&gt;.clear()&lt;/code&gt; encapsulando un objeto &lt;code&gt;WeakMap&lt;/code&gt; que no lo tiene (ver ejemplo en la p&amp;aacute;gina &lt;a href=&quot;../weakmap&quot;&gt; &lt;code&gt;WeakMap&lt;/code&gt; &lt;/a&gt; )&lt;/s&gt;</target>
        </trans-unit>
        <trans-unit id="3c7aa0f3f104fcbc272e3a3584e844979b6c8c0f" translate="yes" xml:space="preserve">
          <source>&lt;s&gt;Removes all key/value pairs from the &lt;code&gt;WeakMap&lt;/code&gt; object. Note that it is possible to implement a &lt;code&gt;WeakMap&lt;/code&gt;-like object that has a &lt;code&gt;.clear()&lt;/code&gt; method by encapsulating a &lt;code&gt;WeakMap&lt;/code&gt; object that hasn't it (see example on page &lt;a href=&quot;weakmap&quot;&gt;&lt;code&gt;WeakMap&lt;/code&gt;&lt;/a&gt;)&lt;/s&gt;</source>
          <target state="translated">&lt;s&gt;Elimina todos los pares clave / valor del objeto &lt;code&gt;WeakMap&lt;/code&gt; . Tenga en cuenta que es posible implementar un objeto similar a &lt;code&gt;WeakMap&lt;/code&gt; que tiene un m&amp;eacute;todo &lt;code&gt;.clear()&lt;/code&gt; encapsulando un objeto &lt;code&gt;WeakMap&lt;/code&gt; que no lo tiene (ver ejemplo en la p&amp;aacute;gina &lt;a href=&quot;weakmap&quot;&gt; &lt;code&gt;WeakMap&lt;/code&gt; &lt;/a&gt; )&lt;/s&gt;</target>
        </trans-unit>
        <trans-unit id="f336d80dafe45ae2ae62932e7bc01ae45e6a6a39" translate="yes" xml:space="preserve">
          <source>&lt;s&gt;Used to evaluate a string of JavaScript code in the context of the specified object, but has been removed.&lt;/s&gt;</source>
          <target state="translated">&lt;s&gt;Se utiliza para evaluar una cadena de c&amp;oacute;digo JavaScript en el contexto del objeto especificado, pero se ha eliminado.&lt;/s&gt;</target>
        </trans-unit>
        <trans-unit id="0bc2f9caec433cdab4e0c56b5932cc0751fa2a1f" translate="yes" xml:space="preserve">
          <source>&lt;s&gt;Used to evaluate the passed value and convert it to an integer (or &lt;a href=&quot;infinity&quot;&gt;&lt;code&gt;Infinity&lt;/code&gt;&lt;/a&gt;), but has been removed.&lt;/s&gt;</source>
          <target state="translated">&lt;s&gt;Se utiliza para evaluar el valor pasado y convertirlo en un n&amp;uacute;mero entero (o &lt;a href=&quot;infinity&quot;&gt; &lt;code&gt;Infinity&lt;/code&gt; &lt;/a&gt; ), pero se ha eliminado.&lt;/s&gt;</target>
        </trans-unit>
        <trans-unit id="06147fd5b0330a3bd35221810117c0104614dc3b" translate="yes" xml:space="preserve">
          <source>&lt;s&gt;Used to point to an object's context, but has been removed.&lt;/s&gt;</source>
          <target state="translated">&lt;s&gt;Se usa para se&amp;ntilde;alar el contexto de un objeto, pero se ha eliminado.&lt;/s&gt;</target>
        </trans-unit>
        <trans-unit id="6df39bb87236c6a95814f2126d778ad77c7fb09b" translate="yes" xml:space="preserve">
          <source>&lt;s&gt;Used to return the number of enumerable properties directly on a user-defined object, but has been removed.&lt;/s&gt;</source>
          <target state="translated">&lt;s&gt;Se utiliza para devolver el n&amp;uacute;mero de propiedades enumerables directamente en un objeto definido por el usuario, pero se ha eliminado.&lt;/s&gt;</target>
        </trans-unit>
        <trans-unit id="06fd1cef6bdb79a0e58063eda9afba9011f52ad0" translate="yes" xml:space="preserve">
          <source>&lt;s&gt;Used to specifiy the number of arguments expected by the function, but has been removed. Use the &lt;a href=&quot;function/length&quot;&gt;&lt;code&gt;length&lt;/code&gt;&lt;/a&gt; property instead.&lt;/s&gt;</source>
          <target state="translated">&lt;s&gt;Se utiliza para especificar el n&amp;uacute;mero de argumentos que espera la funci&amp;oacute;n, pero se ha eliminado. En su lugar, utilice la propiedad &lt;a href=&quot;function/length&quot;&gt; &lt;code&gt;length&lt;/code&gt; &lt;/a&gt; .&lt;/s&gt;</target>
        </trans-unit>
        <trans-unit id="265633d3d66ddc1de561025f67cfe5ba36aeb85a" translate="yes" xml:space="preserve">
          <source>&lt;s&gt;Used to specifiy the number of arguments expected by the function, but has been removed. Use the &lt;a href=&quot;length&quot;&gt;&lt;code&gt;length&lt;/code&gt;&lt;/a&gt; property instead.&lt;/s&gt;</source>
          <target state="translated">&lt;s&gt;Se utiliza para especificar el n&amp;uacute;mero de argumentos que espera la funci&amp;oacute;n, pero se ha eliminado. En su lugar, utilice la propiedad &lt;a href=&quot;length&quot;&gt; &lt;code&gt;length&lt;/code&gt; &lt;/a&gt; .&lt;/s&gt;</target>
        </trans-unit>
        <trans-unit id="82c4c36b0afe843b69360745935e5cc612adb09e" translate="yes" xml:space="preserve">
          <source>&lt;s&gt;Wraps the string in double quotes (&quot;&lt;code&gt;&quot;&lt;/code&gt;&quot;).&lt;/s&gt;</source>
          <target state="translated">&lt;s&gt;Envuelve la cadena entre comillas dobles (&quot; &lt;code&gt;&quot;&lt;/code&gt; &quot;).&lt;/s&gt;</target>
        </trans-unit>
        <trans-unit id="c2edd1d39238dfdee97d64fcceb59811e32c0b09" translate="yes" xml:space="preserve">
          <source>&lt;small&gt;The definition of '%TypedArray%.from' in that specification.&lt;/small&gt;</source>
          <target state="translated">&lt;small&gt;La definici&amp;oacute;n de '% TypedArray% .from' en esa especificaci&amp;oacute;n.&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="ec21b87dec9278fc8594eefd0e2feb0afbe15dc4" translate="yes" xml:space="preserve">
          <source>&lt;small&gt;The definition of '%TypedArray%.of' in that specification.&lt;/small&gt;</source>
          <target state="translated">&lt;small&gt;La definici&amp;oacute;n de '% TypedArray% .of' en esa especificaci&amp;oacute;n.&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="50181da8c7ca3c3c77058e8d742194f188be30cb" translate="yes" xml:space="preserve">
          <source>&lt;small&gt;The definition of '%TypedArray%.prototype.entries()' in that specification.&lt;/small&gt;</source>
          <target state="translated">&lt;small&gt;La definici&amp;oacute;n de '% TypedArray% .prototype.entries ()' en esa especificaci&amp;oacute;n.&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="93618b2469ae3ba1395c666fa06c56e602111c2a" translate="yes" xml:space="preserve">
          <source>&lt;small&gt;The definition of '%TypedArray%.prototype.find' in that specification.&lt;/small&gt;</source>
          <target state="translated">&lt;small&gt;La definici&amp;oacute;n de '% TypedArray% .prototype.find' en esa especificaci&amp;oacute;n.&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="a9e67246a6424819b8bcc17c0b6092e768e1685d" translate="yes" xml:space="preserve">
          <source>&lt;small&gt;The definition of '%TypedArray%.prototype.findIndex' in that specification.&lt;/small&gt;</source>
          <target state="translated">&lt;small&gt;La definici&amp;oacute;n de '% TypedArray% .prototype.findIndex' en esa especificaci&amp;oacute;n.&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="fd6f4e0049a23c4bbca92eaa29f39479abb6cff8" translate="yes" xml:space="preserve">
          <source>&lt;small&gt;The definition of '%TypedArray%.prototype.forEach' in that specification.&lt;/small&gt;</source>
          <target state="translated">&lt;small&gt;La definici&amp;oacute;n de '% TypedArray% .prototype.forEach' en esa especificaci&amp;oacute;n.&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="c9859be65b844ff2599639efb57bf72ca0f2591b" translate="yes" xml:space="preserve">
          <source>&lt;small&gt;The definition of '%TypedArray%.prototype.keys()' in that specification.&lt;/small&gt;</source>
          <target state="translated">&lt;small&gt;La definici&amp;oacute;n de '% TypedArray% .prototype.keys ()' en esa especificaci&amp;oacute;n.&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="555530e63b597af98450a9d80fdf1ab621870a26" translate="yes" xml:space="preserve">
          <source>&lt;small&gt;The definition of '%TypedArray%.prototype.reduce' in that specification.&lt;/small&gt;</source>
          <target state="translated">&lt;small&gt;La definici&amp;oacute;n de '% TypedArray% .prototype.reduce' en esa especificaci&amp;oacute;n.&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="a82a5ae53ccbde6340335955d077126e6c8107f9" translate="yes" xml:space="preserve">
          <source>&lt;small&gt;The definition of '%TypedArray%.prototype.reduceRight' in that specification.&lt;/small&gt;</source>
          <target state="translated">&lt;small&gt;La definici&amp;oacute;n de '% TypedArray% .prototype.reduceRight' en esa especificaci&amp;oacute;n.&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="7f63a5a0facf86d23bc51132692430599e3505e8" translate="yes" xml:space="preserve">
          <source>&lt;small&gt;The definition of '%TypedArray%.prototype.slice' in that specification.&lt;/small&gt;</source>
          <target state="translated">&lt;small&gt;La definici&amp;oacute;n de '% TypedArray% .prototype.slice' en esa especificaci&amp;oacute;n.&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="04b318feae6f39c1e4b739df7abff3764dccc63f" translate="yes" xml:space="preserve">
          <source>&lt;small&gt;The definition of '%TypedArray%.prototype.values()' in that specification.&lt;/small&gt;</source>
          <target state="translated">&lt;small&gt;La definici&amp;oacute;n de '% TypedArray% .prototype.values ​​()' en esa especificaci&amp;oacute;n.&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="2c67a3e5fb004d6ce59b555006262218dbe4b79c" translate="yes" xml:space="preserve">
          <source>&lt;small&gt;The definition of '%TypedArray%.prototype[@@iterator]()' in that specification.&lt;/small&gt;</source>
          <target state="translated">&lt;small&gt;La definici&amp;oacute;n de '% TypedArray% .prototype [@@ iterator] ()' en esa especificaci&amp;oacute;n.&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="6b8b94313c26b169ad06a3892984eea7a1275836" translate="yes" xml:space="preserve">
          <source>&lt;small&gt;The definition of 'Array.prototype.toString' in that specification.&lt;/small&gt;</source>
          <target state="translated">&lt;small&gt;La definici&amp;oacute;n de 'Array.prototype.toString' en esa especificaci&amp;oacute;n.&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="05f0d395a01f847edbb134cddbd70a230cd72ba0" translate="yes" xml:space="preserve">
          <source>&lt;small&gt;The definition of 'TypedArray prototype' in that specification.&lt;/small&gt;</source>
          <target state="translated">&lt;small&gt;La definici&amp;oacute;n de 'prototipo TypedArray' en esa especificaci&amp;oacute;n.&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="aaf87eb60417d761e3d1bde5b784dd3965f4f7a2" translate="yes" xml:space="preserve">
          <source>&lt;small&gt;The definition of 'TypedArray.prototype.buffer' in that specification.&lt;/small&gt;</source>
          <target state="translated">&lt;small&gt;La definici&amp;oacute;n de 'TypedArray.prototype.buffer' en esa especificaci&amp;oacute;n.&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="041e9f1d779d6b664311d0decdc5c7422f8cc02c" translate="yes" xml:space="preserve">
          <source>&lt;small&gt;The definition of 'TypedArray.prototype.byteLength' in that specification.&lt;/small&gt;</source>
          <target state="translated">&lt;small&gt;La definici&amp;oacute;n de 'TypedArray.prototype.byteLength' en esa especificaci&amp;oacute;n.&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="5b09b27abc95298efd70295bf57bb217c76c725e" translate="yes" xml:space="preserve">
          <source>&lt;small&gt;The definition of 'TypedArray.prototype.byteOffset' in that specification.&lt;/small&gt;</source>
          <target state="translated">&lt;small&gt;La definici&amp;oacute;n de 'TypedArray.prototype.byteOffset' en esa especificaci&amp;oacute;n.&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="c9fb7375e045d8b7e636f00da7f6d87a9f5b45ad" translate="yes" xml:space="preserve">
          <source>&lt;small&gt;The definition of 'TypedArray.prototype.copyWithin' in that specification.&lt;/small&gt;</source>
          <target state="translated">&lt;small&gt;La definici&amp;oacute;n de 'TypedArray.prototype.copyWithin' en esa especificaci&amp;oacute;n.&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="498626fed36d12b550426d39d4185197eba02bc5" translate="yes" xml:space="preserve">
          <source>&lt;small&gt;The definition of 'TypedArray.prototype.every' in that specification.&lt;/small&gt;</source>
          <target state="translated">&lt;small&gt;La definici&amp;oacute;n de 'TypedArray.prototype.every' en esa especificaci&amp;oacute;n.&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="2964fb1fedc0fc2fb8cf624c61dbc8c8dcbc8a46" translate="yes" xml:space="preserve">
          <source>&lt;small&gt;The definition of 'TypedArray.prototype.fill' in that specification.&lt;/small&gt;</source>
          <target state="translated">&lt;small&gt;La definici&amp;oacute;n de 'TypedArray.prototype.fill' en esa especificaci&amp;oacute;n.&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="6880629eea61e0e7e26ff10d8d36960ce8e472b1" translate="yes" xml:space="preserve">
          <source>&lt;small&gt;The definition of 'TypedArray.prototype.filter' in that specification.&lt;/small&gt;</source>
          <target state="translated">&lt;small&gt;La definici&amp;oacute;n de 'TypedArray.prototype.filter' en esa especificaci&amp;oacute;n.&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="00dd7391b48af10ba809bd9c0714cd1f2d6af8f8" translate="yes" xml:space="preserve">
          <source>&lt;small&gt;The definition of 'TypedArray.prototype.includes' in that specification.&lt;/small&gt;</source>
          <target state="translated">&lt;small&gt;La definici&amp;oacute;n de 'TypedArray.prototype.include' en esa especificaci&amp;oacute;n.&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="22830ca445ed4afca15737a437b93580a3f8e624" translate="yes" xml:space="preserve">
          <source>&lt;small&gt;The definition of 'TypedArray.prototype.indexOf' in that specification.&lt;/small&gt;</source>
          <target state="translated">&lt;small&gt;La definici&amp;oacute;n de 'TypedArray.prototype.indexOf' en esa especificaci&amp;oacute;n.&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="3da3282a0b835f58d03e8f6a1d380259e47a0097" translate="yes" xml:space="preserve">
          <source>&lt;small&gt;The definition of 'TypedArray.prototype.join' in that specification.&lt;/small&gt;</source>
          <target state="translated">&lt;small&gt;La definici&amp;oacute;n de 'TypedArray.prototype.join' en esa especificaci&amp;oacute;n.&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="ceedb06a6a4c3d0e33d4085fecbe7774c125920e" translate="yes" xml:space="preserve">
          <source>&lt;small&gt;The definition of 'TypedArray.prototype.lastIndexOf' in that specification.&lt;/small&gt;</source>
          <target state="translated">&lt;small&gt;La definici&amp;oacute;n de 'TypedArray.prototype.lastIndexOf' en esa especificaci&amp;oacute;n.&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="15f3571954f021e744e2c2871a084e198cf3beea" translate="yes" xml:space="preserve">
          <source>&lt;small&gt;The definition of 'TypedArray.prototype.length' in that specification.&lt;/small&gt;</source>
          <target state="translated">&lt;small&gt;La definici&amp;oacute;n de 'TypedArray.prototype.length' en esa especificaci&amp;oacute;n.&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="d504b9133964d32f917280196b75ed9e5c33acb2" translate="yes" xml:space="preserve">
          <source>&lt;small&gt;The definition of 'TypedArray.prototype.map' in that specification.&lt;/small&gt;</source>
          <target state="translated">&lt;small&gt;La definici&amp;oacute;n de 'TypedArray.prototype.map' en esa especificaci&amp;oacute;n.&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="855c656d01612dc788a429a8d6753591ac413ab8" translate="yes" xml:space="preserve">
          <source>&lt;small&gt;The definition of 'TypedArray.prototype.reverse' in that specification.&lt;/small&gt;</source>
          <target state="translated">&lt;small&gt;La definici&amp;oacute;n de 'TypedArray.prototype.reverse' en esa especificaci&amp;oacute;n.&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="30bebe3efea7dfe7266798053e324280beb1bc59" translate="yes" xml:space="preserve">
          <source>&lt;small&gt;The definition of 'TypedArray.prototype.set' in that specification.&lt;/small&gt;</source>
          <target state="translated">&lt;small&gt;La definici&amp;oacute;n de 'TypedArray.prototype.set' en esa especificaci&amp;oacute;n.&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="84545422c6366771aa76bd4ef9c53e10164fb432" translate="yes" xml:space="preserve">
          <source>&lt;small&gt;The definition of 'TypedArray.prototype.some' in that specification.&lt;/small&gt;</source>
          <target state="translated">&lt;small&gt;La definici&amp;oacute;n de 'TypedArray.prototype.some' en esa especificaci&amp;oacute;n.&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="34fca14ece1e544a703fd6b52d3f97dba54ac6a6" translate="yes" xml:space="preserve">
          <source>&lt;small&gt;The definition of 'TypedArray.prototype.sort' in that specification.&lt;/small&gt;</source>
          <target state="translated">&lt;small&gt;La definici&amp;oacute;n de 'TypedArray.prototype.sort' en esa especificaci&amp;oacute;n.&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="531d01a0bd87594f9ca5ae61086e88b35418c538" translate="yes" xml:space="preserve">
          <source>&lt;small&gt;The definition of 'TypedArray.prototype.subarray' in that specification.&lt;/small&gt;</source>
          <target state="translated">&lt;small&gt;La definici&amp;oacute;n de 'TypedArray.prototype.subarray' en esa especificaci&amp;oacute;n.&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="b35e02e72a8f9d3d05d568b57e778b65d09f80b7" translate="yes" xml:space="preserve">
          <source>&lt;small&gt;The definition of 'TypedArray.prototype.toLocaleString' in that specification.&lt;/small&gt;</source>
          <target state="translated">&lt;small&gt;La definici&amp;oacute;n de 'TypedArray.prototype.toLocaleString' en esa especificaci&amp;oacute;n.&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="d21658e80923eecc6538b3617f1a3f50482446da" translate="yes" xml:space="preserve">
          <source>&lt;small&gt;The definition of 'TypedArray.prototype.toString' in that specification.&lt;/small&gt;</source>
          <target state="translated">&lt;small&gt;La definici&amp;oacute;n de 'TypedArray.prototype.toString' en esa especificaci&amp;oacute;n.&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="d0c8ecd9ee0131f54965f622aaaba0fcec001e26" translate="yes" xml:space="preserve">
          <source>&lt;small&gt;The definition of 'get %TypedArray% [ @@species ]' in that specification.&lt;/small&gt;</source>
          <target state="translated">&lt;small&gt;La definici&amp;oacute;n de 'get% TypedArray% [@@ species]' en esa especificaci&amp;oacute;n.&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="8e3853505372fe592bda8804bbd1d24bacc08f84" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt; Deprecated&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt; Deprecated&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="3a6d428e3c3bdac121ee984826a4318bc3046d02" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt; Non-standard&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt; Non-standard&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="0a1898e32517f0ac48473cf7b8bf5b7c1c216e9f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt; Obsolete since Gecko 58 (Firefox 58 / Thunderbird 58 / SeaMonkey 2.55)&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt; Obsoleto desde Gecko 58 (Firefox 58 / Thunderbird 58 / SeaMonkey 2.55)&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="e23e7b16b1b356401be67f3b11f39c65f93e89ff" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt; Obsolete&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt; Obsolete&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="172ae4e6fbe9c24145f8a36e109db427455dec6b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;a href=&quot;arraybuffer&quot;&gt;&lt;code&gt;ArrayBuffer&lt;/code&gt;&lt;/a&gt;&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;a href=&quot;arraybuffer&quot;&gt;&lt;code&gt;ArrayBuffer&lt;/code&gt;&lt;/a&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="8d371e0d12d95e7320be76e5fa753778071b3bcc" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;a href=&quot;bigint&quot;&gt;&lt;code&gt;BigInt&lt;/code&gt;&lt;/a&gt; Warning:&lt;/strong&gt;&lt;code&gt;parseInt&lt;/code&gt; converts a &lt;a href=&quot;bigint&quot;&gt;&lt;code&gt;BigInt&lt;/code&gt;&lt;/a&gt; to a &lt;a href=&quot;number&quot;&gt;&lt;code&gt;Number&lt;/code&gt;&lt;/a&gt; and loses precision in the process. This is because trailing non-numeric values, including &quot;&lt;code&gt;n&lt;/code&gt;&quot;, are discarded.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8eae18544e969ea1ae19359bce2f08c71a822945" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;a href=&quot;dataview&quot;&gt;&lt;code&gt;DataView&lt;/code&gt;&lt;/a&gt;&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;a href=&quot;dataview&quot;&gt;&lt;code&gt;DataView&lt;/code&gt;&lt;/a&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="192a9d0b0d4b42aeaf456019c947cee4aa7fb9bf" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Typed_arrays&quot;&gt;JavaScript typed arrays&lt;/a&gt;&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6d85d7843cdb7df149eb099678f0570262bb69ab" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;a href=&quot;https://tc39.es/ecma262/#table-49&quot;&gt;ECMAScript (ECMA-262)&lt;br/&gt;&lt;small&gt;The definition of 'TypedArray constructors' in that specification.&lt;/small&gt;&lt;/a&gt;&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="82ef1555a226014cc707d85fff35e034455a34a5" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;a href=&quot;typedarray/@@iterator&quot;&gt;&lt;code&gt;Int16Array.prototype[@@iterator]()&lt;/code&gt;&lt;/a&gt;&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;a href=&quot;typedarray/@@iterator&quot;&gt;&lt;code&gt;Int16Array.prototype[@@iterator]()&lt;/code&gt;&lt;/a&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="5a0d75516c25b530476ea55684eb6bf843042cce" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;a href=&quot;typedarray/tolocalestring&quot;&gt;&lt;code&gt;Int16Array.prototype.toLocaleString()&lt;/code&gt;&lt;/a&gt;&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;a href=&quot;typedarray/tolocalestring&quot;&gt;&lt;code&gt;Int16Array.prototype.toLocaleString()&lt;/code&gt;&lt;/a&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="51dd3dd05b5cdb95cc4486f7aea8876baa98b207" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;a href=&quot;typedarray/tostring&quot;&gt;&lt;code&gt;Int16Array.prototype.toString()&lt;/code&gt;&lt;/a&gt;&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;a href=&quot;typedarray/tostring&quot;&gt;&lt;code&gt;Int16Array.prototype.toString()&lt;/code&gt;&lt;/a&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="bb813b811a0f9583c1dd4e86873f316e12ee9b48" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;div&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;Desktop&lt;/th&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;Chrome&lt;/th&gt;
&lt;th&gt;Edge&lt;/th&gt;
&lt;th&gt;Firefox&lt;/th&gt;
&lt;th&gt;Internet Explorer&lt;/th&gt;
&lt;th&gt;Opera&lt;/th&gt;
&lt;th&gt;Safari&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;th&gt;&lt;code&gt;Int16Array&lt;/code&gt;&lt;/th&gt;
&lt;td&gt; 7&lt;/td&gt;
&lt;td&gt; 12&lt;/td&gt;
&lt;td&gt; 4&lt;/td&gt;
&lt;td&gt; 10&lt;/td&gt;
&lt;td&gt; 11.6&lt;/td&gt;
&lt;td&gt; 5.1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;th&gt;&lt;a href=&quot;int16array/int16array&quot;&gt;&lt;code&gt;Int16Array()&lt;/code&gt; constructor&lt;/a&gt;&lt;/th&gt;
&lt;td&gt; 7&lt;/td&gt;
&lt;td&gt; 12&lt;/td&gt;
&lt;td&gt; 4&lt;/td&gt;
&lt;td&gt; 10&lt;/td&gt;
&lt;td&gt; 11.6&lt;/td&gt;
&lt;td&gt; 5.1&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;Mobile&lt;/th&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;Android webview&lt;/th&gt;
&lt;th&gt;Chrome for Android&lt;/th&gt;
&lt;th&gt;Firefox for Android&lt;/th&gt;
&lt;th&gt;Opera for Android&lt;/th&gt;
&lt;th&gt;Safari on iOS&lt;/th&gt;
&lt;th&gt;Samsung Internet&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;th&gt;&lt;code&gt;Int16Array&lt;/code&gt;&lt;/th&gt;
&lt;td&gt; 4&lt;/td&gt;
&lt;td&gt; 18&lt;/td&gt;
&lt;td&gt; 4&lt;/td&gt;
&lt;td&gt; 12&lt;/td&gt;
&lt;td&gt; 4.2&lt;/td&gt;
&lt;td&gt; 1.0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;th&gt;&lt;a href=&quot;int16array/int16array&quot;&gt;&lt;code&gt;Int16Array()&lt;/code&gt; constructor&lt;/a&gt;&lt;/th&gt;
&lt;td&gt; 4&lt;/td&gt;
&lt;td&gt; 18&lt;/td&gt;
&lt;td&gt; 4&lt;/td&gt;
&lt;td&gt; 12&lt;/td&gt;
&lt;td&gt; 4.2&lt;/td&gt;
&lt;td&gt; 1.0&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;Server&lt;/th&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;Node.js&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;th&gt;&lt;code&gt;Int16Array&lt;/code&gt;&lt;/th&gt;
&lt;td&gt; 0.10&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;th&gt;&lt;a href=&quot;int16array/int16array&quot;&gt;&lt;code&gt;Int16Array()&lt;/code&gt; constructor&lt;/a&gt;&lt;/th&gt;
&lt;td&gt; 0.10&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e8f31cb3d7955b486489fd58e39cfdefd88275fb" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Access (index into) an Array item&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Acceder (indexar) a un elemento de matriz&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="0ef1aa2b0af88f29eaa02e667c11f0a596eb6784" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Access an Array item using the index position&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5d1954ee33201c308252226266e4dbe9d2091905" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Add an item to the beginning of an Array&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3f44b98376b3b51d5d6d07c61bcc50bed6d74788" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Add an item to the end of an Array&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bdcb55dedfa87a860f62cc64679e147f49a4d6f1" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Add to the end of an Array&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Agregar al final de una matriz&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="05ea62e60330916a6489b6ce7bb5b8dc0c78c4b2" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Add to the front of an Array&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Agregar al frente de una matriz&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="e633bdcc75b5a6296dc8a21f7a534980415f5537" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;All&lt;/strong&gt; browsers include the &lt;code&gt;CustomError&lt;/code&gt; constructor in the stack trace when using a prototypal declaration.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="33b02d206997d55697090cf6e35836cc1d3eaf90" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;All&lt;/strong&gt; browsers include the CustomError constructor in the stack trace when using a prototypal declaration.</source>
          <target state="translated">&lt;strong&gt;Todos los&lt;/strong&gt; navegadores incluyen el constructor CustomError en el seguimiento de la pila cuando se usa una declaraci&amp;oacute;n de prototipo.</target>
        </trans-unit>
        <trans-unit id="3c72d46e3e32099dbea132c4b0fa513f2bc991b3" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Any JSON text is a valid JavaScript expression...&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5b683df0325a5c3aa0ff6b82a0efd33ff4fb848b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Any JSON text is a valid JavaScript expression&lt;/strong&gt; &amp;ndash; but only in JavaScript engines that have implemented the &lt;a href=&quot;https://github.com/tc39/proposal-json-superset&quot;&gt;proposal to make all JSON text valid ECMA-262&lt;/a&gt;. In engines that haven't implemented the proposal, U+2028 LINE SEPARATOR and U+2029 PARAGRAPH SEPARATOR are allowed in string literals and property keys in JSON; but their use in these features in JavaScript literals is a &lt;a href=&quot;syntaxerror&quot;&gt;&lt;code&gt;SyntaxError&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;strong&gt;Cualquier texto JSON es una expresi&amp;oacute;n JavaScript v&amp;aacute;lida&lt;/strong&gt; , pero solo en motores JavaScript que han implementado la &lt;a href=&quot;https://github.com/tc39/proposal-json-superset&quot;&gt;propuesta para hacer que todo el texto JSON sea v&amp;aacute;lido ECMA-262&lt;/a&gt; . En los motores que no han implementado la propuesta, se permiten U + 2028 LINE SEPARATOR y U + 2029 PARAGRAPH SEPARATOR en literales de cadena y claves de propiedad en JSON; pero su uso en estas caracter&amp;iacute;sticas en literales de JavaScript es un &lt;a href=&quot;syntaxerror&quot;&gt; &lt;code&gt;SyntaxError&lt;/code&gt; &lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="ea3e336bbbe349f686d1a7de34680c471c0c7441" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Any&lt;/strong&gt; object of which the value is not &lt;a href=&quot;undefined&quot;&gt;&lt;code&gt;undefined&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;null&quot;&gt;&lt;code&gt;null&lt;/code&gt;&lt;/a&gt;, including a &lt;code&gt;Boolean&lt;/code&gt; object whose value is &lt;code&gt;false&lt;/code&gt;, evaluates to &lt;code&gt;true&lt;/code&gt; when passed to a conditional statement. For example, the condition in the following &lt;a href=&quot;../statements/if...else&quot;&gt;&lt;code&gt;if&lt;/code&gt;&lt;/a&gt; statement evaluates to &lt;code&gt;true&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5b0c0be5998f55ce07f49b011955c83a425bf461" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Arithmetic operators&lt;/strong&gt; take numerical values (either literals or variables) as their operands and return a single numerical value. The standard arithmetic operators are addition (+), subtraction (-), multiplication (*), and division (/).</source>
          <target state="translated">&lt;strong&gt;Los operadores aritm&amp;eacute;ticos&lt;/strong&gt; toman valores num&amp;eacute;ricos (literales o variables) como sus operandos y devuelven un &amp;uacute;nico valor num&amp;eacute;rico. Los operadores aritm&amp;eacute;ticos est&amp;aacute;ndar son suma (+), resta (-), multiplicaci&amp;oacute;n (*) y divisi&amp;oacute;n (/).</target>
        </trans-unit>
        <trans-unit id="d58761037eb102cdd483560e6c7d7030ff86f575" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Array generics are non-standard, deprecated and will get removed in the near future&lt;/strong&gt;.</source>
          <target state="translated">&lt;strong&gt;Los gen&amp;eacute;ricos de matriz no son est&amp;aacute;ndar, est&amp;aacute;n obsoletos y se eliminar&amp;aacute;n en un futuro pr&amp;oacute;ximo&lt;/strong&gt; .</target>
        </trans-unit>
        <trans-unit id="b30cb3c4fca448be47cfe32dca81740b30ec763e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Array.prototype.values&lt;/strong&gt; is default implementation of &lt;strong&gt;Array.prototype[Symbol.iterator]&lt;/strong&gt;.</source>
          <target state="translated">&lt;strong&gt;Array.prototype.values&lt;/strong&gt; es la implementaci&amp;oacute;n predeterminada de &lt;strong&gt;Array.prototype [Symbol.iterator]&lt;/strong&gt; .</target>
        </trans-unit>
        <trans-unit id="6efb3bf91a95bec8d1d30e9bea61156f9c22e13d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Arrow Example:&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="805aa3dec6c8b5cb37863bc74e5c0608ae28b5e2" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Arrow functions&lt;/strong&gt; do&lt;strong&gt; not &lt;/strong&gt;default &lt;code&gt;this&lt;/code&gt; to the window &lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Glossary/Scope&quot;&gt;scope&lt;/a&gt;, rather they execute in the &lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Glossary/Scope&quot;&gt;scope&lt;/a&gt; they are created:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="36c7566dc578690db6b36befa24d4cca31c20a6f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;As a function&lt;/strong&gt;, it takes two parameters: the &lt;var&gt;key&lt;/var&gt; and the &lt;var&gt;value&lt;/var&gt; being stringified. The object in which the key was found is provided as the &lt;code&gt;&lt;var&gt;replacer&lt;/var&gt;&lt;/code&gt;'s &lt;code&gt;this&lt;/code&gt; parameter.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cfe77fb8f9d3ead7aa894195d340299d87c05d7e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;As a function&lt;/strong&gt;, it takes two parameters: the &lt;var&gt;key&lt;/var&gt; and the &lt;var&gt;value&lt;/var&gt; being stringified. The object in which the key was found is provided as the replacer's &lt;code&gt;this&lt;/code&gt; parameter.</source>
          <target state="translated">&lt;strong&gt;Como funci&amp;oacute;n&lt;/strong&gt; , toma dos par&amp;aacute;metros: la &lt;var&gt;key&lt;/var&gt; y el &lt;var&gt;value&lt;/var&gt; est&amp;aacute; secuenciando. El objeto en el que se encontr&amp;oacute; la clave se proporciona como &lt;code&gt;this&lt;/code&gt; par&amp;aacute;metro de reemplazo .</target>
        </trans-unit>
        <trans-unit id="c7ec23eb0448e3f81c2c2f60a57dc525e6125f5c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Be careful.&lt;/strong&gt; While it is possible to use it as an &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/identifier&quot;&gt;identifier&lt;/a&gt; (variable name) in any scope other than the global scope (because &lt;code&gt;undefined&lt;/code&gt; is not a &lt;a href=&quot;../lexical_grammar&quot;&gt;reserved word&lt;/a&gt;), doing so is a very bad idea that will make your code difficult to maintain and debug.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="08de02d64d63b964ff314d3c7beb845b2d276f35" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Bitwise operators&lt;/strong&gt; treat their operands as a sequence of 32 bits (zeroes and ones), rather than as decimal, hexadecimal, or octal &lt;code&gt;&lt;a href=&quot;../global_objects/number&quot;&gt;numbers&lt;/a&gt;&lt;/code&gt;. For example, the decimal number nine has a binary representation of 1001. Bitwise operators perform their operations on such binary representations, but they return standard JavaScript numerical values.</source>
          <target state="translated">&lt;strong&gt;Los operadores&lt;/strong&gt; bit a bit tratan sus operandos como una secuencia de 32 bits (ceros y unos), en lugar de &lt;code&gt;&lt;a href=&quot;../global_objects/number&quot;&gt;numbers&lt;/a&gt;&lt;/code&gt; decimales, hexadecimales u octales . Por ejemplo, el n&amp;uacute;mero decimal nueve tiene una representaci&amp;oacute;n binaria de 1001. Los operadores bit a bit realizan sus operaciones en dichas representaciones binarias, pero devuelven valores num&amp;eacute;ricos est&amp;aacute;ndar de JavaScript.</target>
        </trans-unit>
        <trans-unit id="1f68cd6401f243f6a15630c0fd88ba2ba9d0cc08" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Bonus:&lt;/strong&gt; use &lt;a href=&quot;../../operators/comparison_operators#Identity_strict_equality_(===)&quot;&gt;&lt;code&gt;===&lt;/code&gt;&lt;/a&gt; operator to test if the original string was palindrome.</source>
          <target state="translated">&lt;strong&gt;Bono:&lt;/strong&gt; use el operador &lt;a href=&quot;../../operators/comparison_operators#Identity_strict_equality_(===)&quot;&gt; &lt;code&gt;===&lt;/code&gt; &lt;/a&gt; para probar si la cadena original era pal&amp;iacute;ndromo.</target>
        </trans-unit>
        <trans-unit id="8d086d03331e84de998e1bf1a70efb9ec37db280" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Bonus:&lt;/strong&gt; use &lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators#Identity_strict_equality_(===)&quot;&gt;&lt;code&gt;===&lt;/code&gt;&lt;/a&gt; operator to test if the original string was a palindrome.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0f12d95482e50bf60a5c3eccb3489d7df27695b8" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Caution:&lt;/strong&gt; If you need to support truly obsolete JavaScript engines that do not support &lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Web/API/Object/defineProperty&quot;&gt;&lt;code&gt;Object.defineProperty()&lt;/code&gt;&lt;/a&gt;, it is best not to polyfill &lt;code&gt;Array.prototype&lt;/code&gt; methods at all, as you cannot make them &lt;strong&gt;non-enumerable&lt;/strong&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fc5dc729bef9476d8b9fa887d570ead303840acd" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Caution:&lt;/strong&gt; In certain cases, &lt;code&gt;&lt;var&gt;thisArg&lt;/var&gt;&lt;/code&gt; may not be the actual value seen by the method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e57e3b48007a9688af856b535c037d2d8b0475f7" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Caution:&lt;/strong&gt; In strict mode, the value of &lt;code&gt;this&lt;/code&gt; will be &lt;code&gt;undefined&lt;/code&gt;. See below.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="50f91b49c0b3ad0d52d00d17e539c6788e8af3a9" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Caution&lt;/strong&gt;: Calling this method on an empty array returns &lt;code&gt;false&lt;/code&gt; for any condition!</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0955feb1440a51e876ff4dcc97a71276f8119aa1" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Caution&lt;/strong&gt;: Calling this method on an empty array will return &lt;code&gt;true&lt;/code&gt; for any condition!</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f05d85b02380728c9b8f869506264468b6420bed" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Comparing traditional functions to arrow functions&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="354d7cd920e22988d709c2fcafbfc3b986052128" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Contra: &lt;/strong&gt;Code using &lt;code&gt;with&lt;/code&gt; may not be forward compatible, especially when used with something other than a plain object. Consider this example:</source>
          <target state="translated">&lt;strong&gt;Contra: el&lt;/strong&gt; c&amp;oacute;digo que se usa &lt;code&gt;with&lt;/code&gt; puede no ser compatible con versiones posteriores, especialmente cuando se usa con algo que no sea un objeto simple. Considere este ejemplo:</target>
        </trans-unit>
        <trans-unit id="4b1d91dbcdb082d80f433f735c070501aa6f7059" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Contra:&lt;/strong&gt; The &lt;code&gt;with&lt;/code&gt; statement forces the specified object to be searched first for all name lookups. Therefore all identifiers that aren't members of the specified object will be found more slowly in a 'with' block. Where performance is important, 'with' should only be used to encompass code blocks that access members of the specified object.</source>
          <target state="translated">&lt;strong&gt;Contra:&lt;/strong&gt; La instrucci&amp;oacute;n &lt;code&gt;with&lt;/code&gt; obliga a buscar primero el objeto especificado para todas las b&amp;uacute;squedas de nombres. Por lo tanto, todos los identificadores que no son miembros del objeto especificado se encontrar&amp;aacute;n m&amp;aacute;s lentamente en un bloque 'con'. Cuando el rendimiento es importante, 'con' solo debe usarse para abarcar bloques de c&amp;oacute;digo que acceden a miembros del objeto especificado.</target>
        </trans-unit>
        <trans-unit id="fd571b82c00d35e92b4ad6f646719c1880c12581" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Contra:&lt;/strong&gt; The &lt;code&gt;with&lt;/code&gt; statement makes it hard for a human reader or JavaScript compiler to decide whether an unqualified name will be found along the scope chain, and if so, in which object. So given this example:</source>
          <target state="translated">&lt;strong&gt;Contra:&lt;/strong&gt; La instrucci&amp;oacute;n &lt;code&gt;with&lt;/code&gt; dificulta que un lector humano o un compilador de JavaScript decida si se encontrar&amp;aacute; un nombre no calificado a lo largo de la cadena de alcance y, de ser as&amp;iacute;, en qu&amp;eacute; objeto. Entonces, dado este ejemplo:</target>
        </trans-unit>
        <trans-unit id="0002fefd9f47b1f2fb792e23d2c9c3abaea8a1cc" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Copy an Array&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Copiar una matriz&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="f9fc669e554526f585dd24406b20edb1293ae49d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Create an Array&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Crear una matriz&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="e8d9129ebb409db374dea0252562001e3362acce" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;DO NOT rely on exact return values of -1 or 1. &lt;/strong&gt;Negative and positive integer results vary between browsers (as well as between browser versions) because the W3C specification only mandates negative and positive values. Some browsers may return -2 or 2 or even some other negative or positive value.</source>
          <target state="translated">&lt;strong&gt;NO conf&amp;iacute;e en valores de retorno exactos de -1 o 1.&lt;/strong&gt; Los resultados enteros negativos y positivos var&amp;iacute;an entre los navegadores (as&amp;iacute; como entre las versiones de los navegadores) porque la especificaci&amp;oacute;n W3C solo exige valores negativos y positivos. Algunos navegadores pueden devolver -2 o 2 o incluso alg&amp;uacute;n otro valor negativo o positivo.</target>
        </trans-unit>
        <trans-unit id="1d10557d3984d83778d01243f0951be3fe40e695" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Default function parameters&lt;/strong&gt; allow named parameters to be initialized with default values if no value or &lt;code&gt;undefined&lt;/code&gt; is passed.</source>
          <target state="translated">&lt;strong&gt;Los par&amp;aacute;metros de funci&amp;oacute;n predeterminados&lt;/strong&gt; permiten que los par&amp;aacute;metros con nombre se inicialicen con valores predeterminados si no se pasa ning&amp;uacute;n valor o &lt;code&gt;undefined&lt;/code&gt; se define.</target>
        </trans-unit>
        <trans-unit id="75559a8556e3c27c5d912beff976b58d02107da3" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Defaults to &lt;a href=&quot;../undefined&quot;&gt;&lt;code&gt;undefined&lt;/code&gt;&lt;/a&gt;.&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;El valor predeterminado es &lt;a href=&quot;../undefined&quot;&gt; &lt;code&gt;undefined&lt;/code&gt; &lt;/a&gt; .&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="3bfbcff8db90762ab7b7cbc62ec24a1263a90015" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deleting array elements&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Eliminar elementos de la matriz&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="bbf74f16f95e0cf9b687fa6ce03d882c2fd5437e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Demonstration of the internal call:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Demostraci&amp;oacute;n de la convocatoria interna:&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="11376d94d46ae6467f3f97216bb3abcd3d09da55" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deprecated. Avoid these methods.&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b4a2d9d7036ccea7bde0ff0c57610643265b9bc3" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deprecated&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Deprecated&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="53c5b98fc1bbd6480cc2a37258052f312d640c9e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deprecation warning:&lt;/strong&gt; Do not use &lt;code&gt;unwatch()&lt;/code&gt; and &lt;a href=&quot;watch&quot;&gt;&lt;code&gt;watch()&lt;/code&gt;&lt;/a&gt;! These two methods were implemented only in Firefox prior to version 58, they're &lt;strong&gt;deprecated and removed in Firefox 58+&lt;/strong&gt;. In addition, using watchpoints has a serious negative impact on performance, which is especially true when used on global objects, such as &lt;code&gt;window&lt;/code&gt;. You can usually use &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Working_with_Objects#Defining_getters_and_setters&quot;&gt;setters and getters&lt;/a&gt; or &lt;a href=&quot;../proxy&quot;&gt;proxies&lt;/a&gt; instead.</source>
          <target state="translated">&lt;strong&gt;Advertencia de &lt;/strong&gt; &lt;code&gt;unwatch()&lt;/code&gt; &lt;strong&gt;:&lt;/strong&gt; &amp;iexcl;No use unwatch () y &lt;a href=&quot;watch&quot;&gt; &lt;code&gt;watch()&lt;/code&gt; &lt;/a&gt; ! Estos dos m&amp;eacute;todos se implementaron solo en Firefox antes de la versi&amp;oacute;n 58, est&amp;aacute;n &lt;strong&gt;obsoletos y se eliminaron en Firefox 58+&lt;/strong&gt; . Adem&amp;aacute;s, el uso de puntos de observaci&amp;oacute;n tiene un impacto negativo grave en el rendimiento, lo que es especialmente cierto cuando se usa en objetos globales, como la &lt;code&gt;window&lt;/code&gt; . Por lo general, puede usar &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Working_with_Objects#Defining_getters_and_setters&quot;&gt;setters y getters&lt;/a&gt; o &lt;a href=&quot;../proxy&quot;&gt;proxies en su&lt;/a&gt; lugar.</target>
        </trans-unit>
        <trans-unit id="69de191aa06761f1ef525b205cd37c6dd77d7c9d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deprecation warning:&lt;/strong&gt; Do not use &lt;code&gt;watch()&lt;/code&gt; and &lt;a href=&quot;unwatch&quot;&gt;&lt;code&gt;unwatch()&lt;/code&gt;&lt;/a&gt;! These two methods were implemented only in Firefox prior to version 58, they're &lt;strong&gt;deprecated and removed in Firefox 58+&lt;/strong&gt;. In addition, using watchpoints has a serious negative impact on performance, which is especially true when used on global objects, such as &lt;code&gt;window&lt;/code&gt;. You can usually use &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Working_with_Objects#Defining_getters_and_setters&quot;&gt;setters and getters&lt;/a&gt; or &lt;a href=&quot;../proxy&quot;&gt;proxies&lt;/a&gt; instead.</source>
          <target state="translated">&lt;strong&gt;Advertencia de obsolescencia:&lt;/strong&gt; &amp;iexcl;No use &lt;code&gt;watch()&lt;/code&gt; y &lt;a href=&quot;unwatch&quot;&gt; &lt;code&gt;unwatch()&lt;/code&gt; &lt;/a&gt; ! Estos dos m&amp;eacute;todos se implementaron solo en Firefox antes de la versi&amp;oacute;n 58, est&amp;aacute;n &lt;strong&gt;obsoletos y se eliminaron en Firefox 58+&lt;/strong&gt; . Adem&amp;aacute;s, el uso de puntos de observaci&amp;oacute;n tiene un impacto negativo grave en el rendimiento, lo que es especialmente cierto cuando se usa en objetos globales, como la &lt;code&gt;window&lt;/code&gt; . Por lo general, puede usar &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Working_with_Objects#Defining_getters_and_setters&quot;&gt;setters y getters&lt;/a&gt; o &lt;a href=&quot;../proxy&quot;&gt;proxies en su&lt;/a&gt; lugar.</target>
        </trans-unit>
        <trans-unit id="c13e0b1023aac3ff5f304015f3a3d6767b8ab1ca" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Differences &amp;amp; Limitations:&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3685363e10992fdc7b2a54614f433adcc3e026c9" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Different ways to create an Int16Array&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5f25933184a39ab3e6cd8618d81473fbf8cd9d07" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Do NOT rely on exact return values of &lt;code&gt;-1&lt;/code&gt; or &lt;code&gt;1&lt;/code&gt;! &lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5715d4940925e6e262a8369986cf65e9ecbb1389" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;ECMAScript 2016 and earlier:&lt;/strong&gt;&lt;em&gt;(&lt;code&gt;&lt;var&gt;month&lt;/var&gt;&lt;/code&gt; used to be required)&lt;/em&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e884d831e5e132f6ef9afd897a615ea2d905c763" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Edge case alert:&lt;/strong&gt; Unlike other array methods such as &lt;a href=&quot;some&quot;&gt;&lt;code&gt;Array.some()&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;&lt;var&gt;callback&lt;/var&gt;&lt;/code&gt; is run even for indexes with unassigned values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="25222a23c95aa0f2d21abd7571810ca19e4c7730" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Find the index of an item in the Array&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Encuentra el &amp;iacute;ndice de un elemento en la matriz&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="4dcdd1b9ec2a97e86f7bd99f0a71c4f5d77cebf4" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Firefox now warns about the usage of &lt;code&gt;for each...in&lt;/code&gt; and it no longer works starting with Firefox 57.&lt;br/&gt; Please see &lt;a href=&quot;../errors/for-each-in_loops_are_deprecated&quot;&gt;Warning: JavaScript 1.6's for-each-in loops are deprecated&lt;/a&gt; for migration help.&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Firefox ahora advierte sobre el uso de &lt;code&gt;for each...in&lt;/code&gt; y ya no funciona a partir de Firefox 57. &lt;br/&gt;Consulte &lt;a href=&quot;../errors/for-each-in_loops_are_deprecated&quot;&gt;Advertencia: los bucles for-each-in de JavaScript 1.6 est&amp;aacute;n obsoletos&lt;/a&gt; para la ayuda de migraci&amp;oacute;n.&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="e0496cfb2f9e6ec6f243ccb4e6039d3ca80808c8" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;For example:&lt;/strong&gt; Suppose a script does &lt;code&gt;&lt;var&gt;obj&lt;/var&gt;.name = &quot;jen&quot;&lt;/code&gt;, and &lt;code&gt;&lt;var&gt;obj&lt;/var&gt;&lt;/code&gt; is not a proxy, and has no own property &lt;code&gt;.name&lt;/code&gt;, but it has a proxy on its prototype chain. That proxy's &lt;code&gt;set()&lt;/code&gt; handler will be called, and &lt;code&gt;obj&lt;/code&gt; will be passed as the receiver.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="be8d6e51472f943aefdf0780162eb41648ba3c87" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;If it is a number&lt;/strong&gt;, successive levels in the stringification will each be indented by this many space characters (up to 10).</source>
          <target state="translated">&lt;strong&gt;Si es un n&amp;uacute;mero&lt;/strong&gt; , cada uno de los niveles sucesivos de la cadena se sangrar&amp;aacute; con este n&amp;uacute;mero de caracteres de espacio (hasta 10).</target>
        </trans-unit>
        <trans-unit id="c1116add768a684f4e58eaf62c48388c556991ce" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;If it is a string&lt;/strong&gt;, successive levels will be indented by this string (or the first ten characters of it).</source>
          <target state="translated">&lt;strong&gt;Si es una cadena&lt;/strong&gt; , los niveles sucesivos ser&amp;aacute;n sangrados por esta cadena (o los primeros diez caracteres).</target>
        </trans-unit>
        <trans-unit id="f9f4496bc64957b286836cb0dca59830923c8967" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;If it's absolutely necessary and performance is not a concern&lt;/strong&gt;, a far slower (but more specification-compliant solution) can be found at &lt;a href=&quot;https://github.com/Raynos/function-bind&quot;&gt;https://github.com/Raynos/function-bind&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6ef21b1de11bce68cd05ab1e28ca9d6039c56334" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Important:&lt;/strong&gt; Keep in mind that &lt;em&gt;the data itself&lt;/em&gt; is not cloned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d04ae433bb1875d491614265edf7525304e985fb" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Important&lt;/strong&gt;: Since compilation for large modules can be expensive, developers should only use the &lt;code&gt;Module()&lt;/code&gt; constructor when synchronous compilation is absolutely required; the asynchronous &lt;a href=&quot;../compilestreaming&quot;&gt;&lt;code&gt;WebAssembly.compileStreaming()&lt;/code&gt;&lt;/a&gt; method should be used at all other times.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="48c257781cc4b92a9f97156dca91f0debe711918" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Important&lt;/strong&gt;: Since compilation for large modules can be expensive, developers should only use the &lt;code&gt;Module()&lt;/code&gt; constructor when synchronous compilation is absolutely required; the asynchronous &lt;a href=&quot;compilestreaming&quot;&gt;&lt;code&gt;WebAssembly.compileStreaming()&lt;/code&gt;&lt;/a&gt; method should be used at all other times.</source>
          <target state="translated">&lt;strong&gt;Importante&lt;/strong&gt; : dado que la compilaci&amp;oacute;n para m&amp;oacute;dulos grandes puede ser costosa, los desarrolladores solo deben usar el constructor &lt;code&gt;Module()&lt;/code&gt; cuando la compilaci&amp;oacute;n sincr&amp;oacute;nica sea absolutamente necesaria; el m&amp;eacute;todo asincr&amp;oacute;nico &lt;a href=&quot;compilestreaming&quot;&gt; &lt;code&gt;WebAssembly.compileStreaming()&lt;/code&gt; &lt;/a&gt; debe usarse en todos los dem&amp;aacute;s momentos.</target>
        </trans-unit>
        <trans-unit id="72f4365ea861da7ff79f36e519dadee474292e85" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Important&lt;/strong&gt;: Since instantiation for large modules can be expensive, developers should only use the &lt;code&gt;Instance()&lt;/code&gt; constructor when synchronous instantiation is absolutely required; the asynchronous &lt;a href=&quot;../instantiatestreaming&quot;&gt;&lt;code&gt;WebAssembly.instantiateStreaming()&lt;/code&gt;&lt;/a&gt; method should be used at all other times.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bd1aefe99b2310836321b557de98b25cf407e51f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Important&lt;/strong&gt;: Since instantiation for large modules can be expensive, developers should only use the &lt;code&gt;Instance()&lt;/code&gt; constructor when synchronous instantiation is absolutely required; the asynchronous &lt;a href=&quot;instantiatestreaming&quot;&gt;&lt;code&gt;WebAssembly.instantiateStreaming()&lt;/code&gt;&lt;/a&gt; method should be used at all other times.</source>
          <target state="translated">&lt;strong&gt;Importante&lt;/strong&gt; : dado que la creaci&amp;oacute;n de instancias para m&amp;oacute;dulos grandes puede ser costosa, los desarrolladores solo deben usar el constructor &lt;code&gt;Instance()&lt;/code&gt; cuando la instanciaci&amp;oacute;n sincr&amp;oacute;nica sea absolutamente necesaria; el m&amp;eacute;todo asincr&amp;oacute;nico &lt;a href=&quot;instantiatestreaming&quot;&gt; &lt;code&gt;WebAssembly.instantiateStreaming()&lt;/code&gt; &lt;/a&gt; debe utilizarse en todos los dem&amp;aacute;s momentos.</target>
        </trans-unit>
        <trans-unit id="14c42c01d279faea2c8328245769b59a152a811c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Important&lt;/strong&gt;: This method is not the most efficient way of fetching and instantiating wasm modules. If at all possible, you should use the newer &lt;a href=&quot;instantiatestreaming&quot;&gt;&lt;code&gt;WebAssembly.instantiateStreaming()&lt;/code&gt;&lt;/a&gt; method instead, which fetches, compiles, and instantiates a module all in one step, directly from the raw bytecode, so doesn't require conversion to an &lt;a href=&quot;../arraybuffer&quot;&gt;&lt;code&gt;ArrayBuffer&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a9bf07972f40544b9b201abb81e01b4ac7dbd3dd" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Important&lt;/strong&gt;: This method is not the most efficient way of fetching and instantiating wasm modules. If at all possible, you should use the newer &lt;a href=&quot;instantiatestreaming&quot;&gt;&lt;code&gt;WebAssembly.instantiateStreaming()&lt;/code&gt;&lt;/a&gt; method instead, which fetches, compiles, and instantiates a module all in one step, directly from the raw bytecode, so doesn't require conversion to an &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/ArrayBuffer&quot;&gt;&lt;code&gt;ArrayBuffer&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;strong&gt;Importante&lt;/strong&gt; : este m&amp;eacute;todo no es la forma m&amp;aacute;s eficaz de recuperar y crear instancias de m&amp;oacute;dulos wasm. Si es posible, debe usar el m&amp;eacute;todo &lt;a href=&quot;instantiatestreaming&quot;&gt; &lt;code&gt;WebAssembly.instantiateStreaming()&lt;/code&gt; &lt;/a&gt; lugar, que busca, compila y crea una instancia de un m&amp;oacute;dulo en un solo paso, directamente desde el &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/ArrayBuffer&quot;&gt; &lt;code&gt;ArrayBuffer&lt;/code&gt; &lt;/a&gt; , por lo que no requiere conversi&amp;oacute;n a un ArrayBuffer .</target>
        </trans-unit>
        <trans-unit id="d8ff1f9032591ebf283b62753a8815882b515c8d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Input:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Input:&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="e04e672456b4ff723c5f9f6e53dc395cb83b4bac" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Loop over an Array&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Bucle sobre una matriz&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="48dde77d098e09c30903fcaf542b212d7acfa42e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Non-configurable properties&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Propiedades no configurables&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="5709d241af5f68117d5d8e9f9e8ba6cd6442579b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Non-standard. Do not use!&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;No est&amp;aacute;ndar. &amp;iexcl;No utilice!&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="9cd8cdcde972ac7d0c144f44a32217226c13bf66" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Not to be confused with:&lt;/strong&gt; Several other languages have mechanisms for lazy evaluation and deferring a computation, which they also call &quot;promises&quot;, e.g. Scheme. Promises in JavaScript represent processes that are already happening, which can be chained with callback functions. If you are looking to lazily evaluate an expression, consider the &lt;a href=&quot;../functions/arrow_functions&quot;&gt;arrow function&lt;/a&gt; with no arguments: &lt;code&gt;f = () =&amp;gt; &lt;em&gt;expression&lt;/em&gt;&lt;/code&gt; to create the lazily-evaluated expression, and &lt;code&gt;f()&lt;/code&gt; to evaluate.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e3ac491f9ac5113b463db546a5ed84958fab0c7d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Not to be confused with:&lt;/strong&gt; Several other languages have mechanisms for lazy evaluation and deferring a computation, which they also call &quot;promises&quot;, e.g. Scheme. Promises in JavaScript represent processes which are already happening, which can be chained with callback functions. If you are looking to lazily evaluate an expression, consider the &lt;a href=&quot;../functions/arrow_functions&quot;&gt;arrow function&lt;/a&gt; with no arguments: &lt;code&gt;f = () =&amp;gt; &lt;em&gt;expression&lt;/em&gt;&lt;/code&gt; to create the lazily-evaluated expression, and &lt;code&gt;f()&lt;/code&gt; to evaluate.</source>
          <target state="translated">&lt;strong&gt;No confundir con:&lt;/strong&gt; Varios otros lenguajes tienen mecanismos para la evaluaci&amp;oacute;n perezosa y aplazar un c&amp;aacute;lculo, que tambi&amp;eacute;n llaman &quot;promesas&quot;, por ejemplo, Scheme. Las promesas en JavaScript representan procesos que ya est&amp;aacute;n sucediendo, que se pueden encadenar con funciones de devoluci&amp;oacute;n de llamada. Si est&amp;aacute; buscando evaluar una expresi&amp;oacute;n de manera perezosa, considere la &lt;a href=&quot;../functions/arrow_functions&quot;&gt;funci&amp;oacute;n de flecha&lt;/a&gt; sin argumentos: &lt;code&gt;f = () =&amp;gt; &lt;em&gt;expression&lt;/em&gt;&lt;/code&gt; para crear la expresi&amp;oacute;n evaluada de manera perezosa y &lt;code&gt;f()&lt;/code&gt; para evaluar.</target>
        </trans-unit>
        <trans-unit id="d61ea3464cad9c0ab62e9b7e02009f31bada4249" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note :&lt;/strong&gt; In UTF-16, Unicode characters above &lt;code&gt;\uFFFF&lt;/code&gt; are encoded as two surrogate code units, of the range &lt;code&gt;\uD800&lt;/code&gt;-&lt;code&gt;\uDFFF&lt;/code&gt;. The value of each code unit is taken separately into account for the comparison. Thus the character formed by the surrogate pair &lt;code&gt;\uD655\uDE55&lt;/code&gt; will be sorted before the character &lt;code&gt;\uFF3A&lt;/code&gt;.</source>
          <target state="translated">&lt;strong&gt;Nota:&lt;/strong&gt; En UTF-16, los caracteres Unicode por encima de &lt;code&gt;\uFFFF&lt;/code&gt; se codifican como dos unidades de c&amp;oacute;digo sustitutas, del rango &lt;code&gt;\uD800&lt;/code&gt; - &lt;code&gt;\uDFFF&lt;/code&gt; . El valor de cada unidad de c&amp;oacute;digo se tiene en cuenta por separado para la comparaci&amp;oacute;n. As&amp;iacute;, el car&amp;aacute;cter formado por el par sustituto &lt;code&gt;\uD655\uDE55&lt;/code&gt; se ordenar&amp;aacute; antes que el car&amp;aacute;cter &lt;code&gt;\uFF3A&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="a9ee1c1c79242cef0d6a8d6908b45f5bd0aa2279" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note for Mozilla developers:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Nota para los desarrolladores de Mozilla:&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="0d49e205123b74544e699dde5af47486480c8533" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note: &lt;/strong&gt;&lt;code&gt;Math.ceil(&lt;a href=&quot;../null&quot;&gt;&lt;code&gt;null&lt;/code&gt;&lt;/a&gt;)&lt;/code&gt; returns integer 0 and does not give a &lt;a href=&quot;../nan&quot;&gt;&lt;code&gt;NaN&lt;/code&gt;&lt;/a&gt; error.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="11988984f50812d4be2739340bf8761830dab235" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note: &lt;/strong&gt;&lt;code&gt;Math.floor(null)&lt;/code&gt; returns 0, not a &lt;a href=&quot;../nan&quot;&gt;&lt;code&gt;NaN&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="266386213fc144f5ea42932675546d6395a6da7f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note: &lt;/strong&gt;&lt;code&gt;\d&lt;/code&gt; matches the &lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions/Character_Classes&quot;&gt;character class&lt;/a&gt; for digits between 0 and 9.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="220e1fbc78a51bbe255c0338790e6417361b15cc" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note: =&amp;gt;&lt;/strong&gt; is not an operator, but the notation for &lt;a href=&quot;functions/arrow_functions&quot;&gt;Arrow functions&lt;/a&gt;.</source>
          <target state="translated">&lt;strong&gt;Nota: =&amp;gt;&lt;/strong&gt; no es un operador, sino la notaci&amp;oacute;n para las &lt;a href=&quot;functions/arrow_functions&quot;&gt;funciones de flecha&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="355567dbdd8638060c3a628610d64ffb90c96389" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; &amp;ldquo;Array-like&amp;rdquo; means that &lt;code&gt;arguments&lt;/code&gt; has a &lt;a href=&quot;arguments/length&quot;&gt;&lt;code&gt;length&lt;/code&gt;&lt;/a&gt; property and properties indexed from zero, but it doesn't have &lt;a href=&quot;../global_objects/array&quot;&gt;&lt;code&gt;Array&lt;/code&gt;&lt;/a&gt;'s built-in methods like &lt;a href=&quot;../global_objects/array/foreach&quot;&gt;&lt;code&gt;forEach()&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;../global_objects/array/map&quot;&gt;&lt;code&gt;map()&lt;/code&gt;&lt;/a&gt;. See &lt;a href=&quot;#Description&quot;&gt;&amp;sect;Description&lt;/a&gt; for details.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="21af73758032257908f95eb10b99a3fa25edcefd" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; &amp;ldquo;Array-like&amp;rdquo; means that &lt;code&gt;arguments&lt;/code&gt; has a &lt;code&gt;&lt;a href=&quot;arguments/length&quot;&gt;length&lt;/a&gt;&lt;/code&gt; property and properties indexed from zero, but it doesn't have &lt;a href=&quot;../global_objects/array&quot;&gt;&lt;code&gt;Array&lt;/code&gt;&lt;/a&gt;'s built-in methods like &lt;code&gt;&lt;a href=&quot;../global_objects/array/foreach&quot;&gt;forEach&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;../global_objects/array/map&quot;&gt;map&lt;/a&gt;&lt;/code&gt;. See &lt;a href=&quot;#Description&quot;&gt;&amp;sect;Description&lt;/a&gt; for details.</source>
          <target state="translated">&lt;strong&gt;Nota:&lt;/strong&gt; &amp;ldquo;Matriz-como&amp;rdquo; significa que &lt;code&gt;arguments&lt;/code&gt; tiene una &lt;code&gt;&lt;a href=&quot;arguments/length&quot;&gt;length&lt;/a&gt;&lt;/code&gt; propiedad y propiedades indexada desde cero, pero no tiene un &lt;a href=&quot;../global_objects/array&quot;&gt; &lt;code&gt;Array&lt;/code&gt; &lt;/a&gt; 's incorporado m&amp;eacute;todos como &lt;code&gt;&lt;a href=&quot;../global_objects/array/foreach&quot;&gt;forEach&lt;/a&gt;&lt;/code&gt; y &lt;code&gt;&lt;a href=&quot;../global_objects/array/map&quot;&gt;map&lt;/a&gt;&lt;/code&gt; ear . Consulte la &lt;a href=&quot;#Description&quot;&gt;secci&amp;oacute;n Descripci&amp;oacute;n&lt;/a&gt; para obtener m&amp;aacute;s detalles.</target>
        </trans-unit>
        <trans-unit id="fdbf3840a2f6f9eeaa020c7a23c885188c93bd94" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; A &lt;code&gt;throw&lt;/code&gt; (or returning a rejected promise) in the &lt;code&gt;finally&lt;/code&gt; callback will reject the new promise with the rejection reason specified when calling &lt;code&gt;throw()&lt;/code&gt;.</source>
          <target state="translated">&lt;strong&gt;Nota:&lt;/strong&gt; Un &lt;code&gt;throw&lt;/code&gt; (o devolver una promesa desestimado) en el &lt;code&gt;finally&lt;/code&gt; de devoluci&amp;oacute;n de llamada rechazar&amp;aacute; la nueva promesa con el motivo de rechazo especificado cuando se llama a &lt;code&gt;throw()&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="24948113914476639ee1466e70b24ea1653cfffb" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; A &lt;code&gt;throw&lt;/code&gt; (or returning a rejected promise) in the &lt;code&gt;finally&lt;/code&gt; callback will reject the new promise with the rejection reason specified when calling &lt;code&gt;throw&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1925ccbf9ec06b8d3228b3952cf7825ef523dc72" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; As long as &lt;code&gt;test()&lt;/code&gt; returns &lt;code&gt;true&lt;/code&gt;, &lt;code&gt;lastIndex&lt;/code&gt; will &lt;em&gt;not&lt;/em&gt; reset&amp;mdash;even when testing a different string!</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0ec31a31990208b6eee691568983f588d9d526ab" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; As of ES5, this can be bypassed by using &lt;a href=&quot;object/create&quot;&gt;&lt;code&gt;Object.create(null)&lt;/code&gt;&lt;/a&gt;, but this is seldom done.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ba2d2aa8e4c5677b17e394010e4566e6c0629d2a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; Calling &lt;code&gt;watch()&lt;/code&gt; on an object for a specific property overrides any previous handler attached for that property.</source>
          <target state="translated">&lt;strong&gt;Nota:&lt;/strong&gt; Llamar a &lt;code&gt;watch()&lt;/code&gt; en un objeto para una propiedad espec&amp;iacute;fica anula cualquier controlador anterior adjunto para esa propiedad.</target>
        </trans-unit>
        <trans-unit id="c5e1b863217894f54f5c1996cbd75468632a7d09" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; Class &lt;strong&gt;expressions&lt;/strong&gt; are subject to the same hoisting restrictions as described in the &lt;a href=&quot;#Class_declarations&quot;&gt;Class declarations&lt;/a&gt; section.</source>
          <target state="translated">&lt;strong&gt;Nota:&lt;/strong&gt; Las &lt;strong&gt;expresiones de&lt;/strong&gt; clase est&amp;aacute;n sujetas a las mismas restricciones de elevaci&amp;oacute;n que se describen en la secci&amp;oacute;n de &lt;a href=&quot;#Class_declarations&quot;&gt;declaraciones de clase&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="a03d1d8c57afa6faee49ee93b7f49ba08b9c218d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; Classes are always strict mode code. Calling methods with an undefined &lt;code&gt;this&lt;/code&gt; will throw an error.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e2a12720b25736efcd83cef6b9d014d4b1ead524" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; Cleanup callbacks should not be used for essential program logic. See &lt;a href=&quot;#Notes_on_cleanup_callbacks&quot;&gt;Notes on cleanup callbacks&lt;/a&gt; for details.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="88bba440ee116b0187025292f62bac9e6b3181db" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; Concatenating array(s)/value(s) will leave the originals untouched. Furthermore, any operation on the new array (except operations on elements which are object references) will have no effect on the original arrays, and vice versa.</source>
          <target state="translated">&lt;strong&gt;Nota: La&lt;/strong&gt; concatenaci&amp;oacute;n de matrices / valores dejar&amp;aacute; los originales intactos. Adem&amp;aacute;s, cualquier operaci&amp;oacute;n en la nueva matriz (excepto las operaciones en elementos que son referencias a objetos) no tendr&amp;aacute; ning&amp;uacute;n efecto en las matrices originales y viceversa.</target>
        </trans-unit>
        <trans-unit id="f7ce291d511f0fc928b257e47c776f63c996ccb6" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; ECMAScript 2019 and older permitted implementations to have &lt;code&gt;typeof&lt;/code&gt; return any implementation-defined string value for non-callable non-standard exotic objects.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ce3b4b48eb733544d15ad2e35bdd85b6a5d52409" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; ECMAScript Internationalization API, implemented with Firefox 29, added the &lt;code&gt;locales&lt;/code&gt; argument to the &lt;code&gt;Number.toLocaleString()&lt;/code&gt; method. If the argument is &lt;a href=&quot;../undefined&quot;&gt;&lt;code&gt;undefined&lt;/code&gt;&lt;/a&gt;, this method returns localized digits specified by the OS, while the previous versions of Firefox returned&lt;a href=&quot;https://en.wikipedia.org/wiki/Arabic_numerals&quot;&gt; Western Arabic&lt;/a&gt; digits. This change has been reported as a regression affecting backward compatibility which might be fixed soon. (&lt;a href=&quot;https://bugzilla.mozilla.org/show_bug.cgi?id=999003&quot;&gt;bug 999003&lt;/a&gt;)</source>
          <target state="translated">&lt;strong&gt;Nota:&lt;/strong&gt; La API de internacionalizaci&amp;oacute;n de ECMAScript, implementada con Firefox 29, agreg&amp;oacute; el argumento &lt;code&gt;locales&lt;/code&gt; al m&amp;eacute;todo &lt;code&gt;Number.toLocaleString()&lt;/code&gt; . Si el argumento &lt;a href=&quot;../undefined&quot;&gt; &lt;code&gt;undefined&lt;/code&gt; &lt;/a&gt; est&amp;aacute; definido , este m&amp;eacute;todo devuelve d&amp;iacute;gitos localizados especificados por el sistema operativo, mientras que las versiones anteriores de Firefox devolvieron d&amp;iacute;gitos del &lt;a href=&quot;https://en.wikipedia.org/wiki/Arabic_numerals&quot;&gt;&amp;aacute;rabe occidental&lt;/a&gt; . Este cambio se ha informado como una regresi&amp;oacute;n que afecta la compatibilidad con versiones anteriores y que podr&amp;iacute;a corregirse pronto. ( &lt;a href=&quot;https://bugzilla.mozilla.org/show_bug.cgi?id=999003&quot;&gt;error 999003&lt;/a&gt; )</target>
        </trans-unit>
        <trans-unit id="8b005bd4745ae59192a510679861adb544ac3246" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; For another possible approach to strings in JavaScript, please read the article about &lt;a href=&quot;https://developer.mozilla.org/en-US/Add-ons/Code_snippets/StringView&quot;&gt;&lt;code&gt;StringView&lt;/code&gt; &amp;mdash; a C-like representation of strings based on typed arrays&lt;/a&gt;.</source>
          <target state="translated">&lt;strong&gt;Nota:&lt;/strong&gt; Para conocer otro posible enfoque de las cadenas en JavaScript, lea el art&amp;iacute;culo sobre &lt;a href=&quot;https://developer.mozilla.org/en-US/Add-ons/Code_snippets/StringView&quot;&gt; &lt;code&gt;StringView&lt;/code&gt; , una representaci&amp;oacute;n similar a C de cadenas basada en matrices escritas&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="49422b1f67b73c938af873bfc9a6d9fcd09fafa8" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; For the Array method, see &lt;a href=&quot;../array/indexof&quot;&gt;&lt;code&gt;Array.prototype.indexOf()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;strong&gt;Nota:&lt;/strong&gt; Para el m&amp;eacute;todo Array, consulte &lt;a href=&quot;../array/indexof&quot;&gt; &lt;code&gt;Array.prototype.indexOf()&lt;/code&gt; &lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="fafbf00abcf5c63c2ca82ab257820e3938f88e17" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; For the String method, see &lt;a href=&quot;../string/indexof&quot;&gt;&lt;code&gt;String.prototype.indexOf()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;strong&gt;Nota:&lt;/strong&gt; Para el m&amp;eacute;todo String, consulte &lt;a href=&quot;../string/indexof&quot;&gt; &lt;code&gt;String.prototype.indexOf()&lt;/code&gt; &lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="60ae19d75f16acd84824e590ac493d39c4b2e3e8" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; If &lt;code&gt;&lt;var&gt;initialValue&lt;/var&gt;&lt;/code&gt; is not provided, &lt;code&gt;reduce()&lt;/code&gt; will execute the callback function starting at index &lt;code&gt;1&lt;/code&gt;, skipping the first index. If &lt;code&gt;&lt;var&gt;initialValue&lt;/var&gt;&lt;/code&gt; is provided, it will start at index &lt;code&gt;0&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="86f89811eda018557eeb00403726d33bfa160377" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; If &lt;code&gt;initialValue&lt;/code&gt; isn't provided, &lt;code&gt;reduce()&lt;/code&gt; will execute the callback function starting at index 1, skipping the first index. If &lt;code&gt;initialValue&lt;/code&gt; is provided, it will start at index 0.</source>
          <target state="translated">&lt;strong&gt;Nota:&lt;/strong&gt; Si no se proporciona &lt;code&gt;initialValue&lt;/code&gt; , &lt;code&gt;reduce()&lt;/code&gt; ejecutar&amp;aacute; la funci&amp;oacute;n de devoluci&amp;oacute;n de llamada comenzando en el &amp;iacute;ndice 1, omitiendo el primer &amp;iacute;ndice. Si se proporciona &lt;code&gt;initialValue&lt;/code&gt; , comenzar&amp;aacute; en el &amp;iacute;ndice 0.</target>
        </trans-unit>
        <trans-unit id="a51e0618dd10039b1f12013d1dbac5bb57b40083" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; If &lt;code&gt;someInterface&lt;/code&gt; itself is &lt;code&gt;null&lt;/code&gt; or &lt;code&gt;undefined&lt;/code&gt;, a &lt;a href=&quot;../global_objects/typeerror&quot;&gt;&lt;code&gt;TypeError&lt;/code&gt;&lt;/a&gt; exception will still be raised (&lt;code&gt;someInterface is null&lt;/code&gt;). If you expect that &lt;code&gt;someInterface&lt;/code&gt; itself may be &lt;code&gt;null&lt;/code&gt; or &lt;code&gt;undefined&lt;/code&gt;, you have to use ?. at this position as well: &lt;code&gt;someInterface?.customMethod?.()&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="684ec8c40e719415d1bba76189c015fc69263264" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; If needed, the full name of a day (&quot;&lt;code&gt;Monday&lt;/code&gt;&quot; for example) can be obtained by using &lt;a href=&quot;../intl/datetimeformat&quot;&gt;&lt;code&gt;Intl.DateTimeFormat&lt;/code&gt;&lt;/a&gt; with an &lt;code&gt;options&lt;/code&gt; parameter. Using this method, the internationalization is made easier:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e23fb56081f7a141997ed5ab497891b83d99e197" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; If needed, the full name of a month (&lt;code&gt;January&lt;/code&gt; for example) can be obtained by using &lt;code&gt;&lt;a href=&quot;../intl/datetimeformat#Using_options&quot;&gt;Intl.DateTimeFormat()&lt;/a&gt;&lt;/code&gt; with an &lt;code&gt;options&lt;/code&gt; parameter. Using this method, internationalization is made easier:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="358de7eb45f10875788ff4438c63a1720a968f2e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; If passing the callback function uses an &lt;a href=&quot;../../functions/arrow_functions&quot;&gt;arrow function expression&lt;/a&gt;, the &lt;code&gt;&lt;var&gt;thisArg&lt;/var&gt;&lt;/code&gt; parameter can be omitted, since all arrow functions lexically bind the &lt;a href=&quot;../../operators/this&quot;&gt;&lt;code&gt;this&lt;/code&gt;&lt;/a&gt; value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="491010bb0305b35d250aff76d1c21bd3570ff021" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; If there is a property with such a name and which is not a function, using &lt;code&gt;?.&lt;/code&gt; will still raise a &lt;a href=&quot;../global_objects/typeerror&quot;&gt;&lt;code&gt;TypeError&lt;/code&gt;&lt;/a&gt; exception (&lt;code&gt;someInterface.customMethod&amp;nbsp;is not a function&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1bd4187a04e0a8e4bf553061e2ab071ddd4c5e3b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; If you are using an environment compatible with &lt;a href=&quot;../set&quot;&gt;&lt;code&gt;Set&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;from&quot;&gt;&lt;code&gt;Array.from()&lt;/code&gt;&lt;/a&gt;, you could use &lt;code&gt;let orderedArray = Array.from(new Set(myArray))&lt;/code&gt; to get an array where duplicate items have been removed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a3892fa7127d3560348454e7621a024be63a6004" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; If you use this operator to provide a default value to some variable, be aware that any &lt;em&gt;falsy&lt;/em&gt; value will not be used. If you only need to filter out &lt;a href=&quot;../global_objects/null&quot;&gt;&lt;code&gt;null&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;../global_objects/undefined&quot;&gt;&lt;code&gt;undefined&lt;/code&gt;&lt;/a&gt;, consider using &lt;a href=&quot;nullish_coalescing_operator&quot;&gt;the nullish coalescing operator&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7822b5aeb75f5d2a582a80d085cdebe05016e60b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; If you wish the &lt;code&gt;&lt;var&gt;replacer&lt;/var&gt;&lt;/code&gt; to distinguish an initial object from a key with an empty string property (since both would give the empty string as key and potentially an object as value), you will have to keep track of the iteration count (if it is beyond the first iteration, it is a genuine empty string key).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0606f016259513e72d37c5d9a393efa4b1bbb49c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; If you wish the replacer to distinguish an initial object from a key with an empty string property (since both would give the empty string as key and potentially an object as value), you will have to keep track of the iteration count (if it is beyond the first iteration, it is a genuine empty string key).</source>
          <target state="translated">&lt;strong&gt;Nota:&lt;/strong&gt; Si desea que el reemplazador distinga un objeto inicial de una clave con una propiedad de cadena vac&amp;iacute;a (ya que ambos dar&amp;iacute;an la cadena vac&amp;iacute;a como clave y potencialmente un objeto como valor), tendr&amp;aacute; que realizar un seguimiento del recuento de iteraciones (si est&amp;aacute; m&amp;aacute;s all&amp;aacute; de la primera iteraci&amp;oacute;n, es una clave de cadena vac&amp;iacute;a genuina).</target>
        </trans-unit>
        <trans-unit id="25fd065e6e03dfd2256bad0756539873eb842f47" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; If you're writing ES6 compatible code, then &lt;a href=&quot;rest_parameters&quot;&gt;rest parameters&lt;/a&gt; should be preferred.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e74f245ac8626bc2488812fdb3f76579068c2d13" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; In IE8, it won't delete all when &lt;code&gt;&lt;var&gt;deleteCount&lt;/var&gt;&lt;/code&gt; is omitted.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cc7ec0a50ad5c171c36ec4b7997d54a3f65a816b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; In browsers that support the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Window/performance&quot;&gt;Web Performance API&lt;/a&gt;'s high-resolution time feature, &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Performance/now&quot;&gt;&lt;code&gt;Performance.now()&lt;/code&gt;&lt;/a&gt; can provide more reliable and precise measurements of elapsed time than &lt;a href=&quot;date/now&quot;&gt;&lt;code&gt;Date.now()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;strong&gt;Nota:&lt;/strong&gt; En los navegadores que admiten la funci&amp;oacute;n de tiempo de alta resoluci&amp;oacute;n de la &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Window/performance&quot;&gt;API de rendimiento web&lt;/a&gt; , &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Performance/now&quot;&gt; &lt;code&gt;Performance.now()&lt;/code&gt; &lt;/a&gt; puede proporcionar mediciones m&amp;aacute;s confiables y precisas del tiempo transcurrido que &lt;a href=&quot;date/now&quot;&gt; &lt;code&gt;Date.now()&lt;/code&gt; &lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="bd6287d6d9ed836fbba50b27a65c0f35a8c77248" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; In order to display the content of an array in the console, you can use &lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Web/API/Console/table&quot;&gt;&lt;code&gt;console.table()&lt;/code&gt;&lt;/a&gt;, which prints a formatted version of the array.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4f976fd9fea9d5aa4ce715d9bf46bd7fa9796846" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; It is a good idea to comment the intentional use of the empty statement, as it is not really obvious to distinguish between a normal semicolon. In the following example the usage is probably not intentional:</source>
          <target state="translated">&lt;strong&gt;Nota:&lt;/strong&gt; Es una buena idea comentar el uso intencional de la declaraci&amp;oacute;n vac&amp;iacute;a, ya que no es realmente obvio distinguir entre un punto y coma normal. En el siguiente ejemplo, el uso probablemente no sea intencional:</target>
        </trans-unit>
        <trans-unit id="bcfea8397f57ed908ca1ce86c587c0948329e841" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; It is not possible to know reflectively whether a particular object implements the iterator protocol. However, it is easy to create an object that satisfies &lt;em&gt;both&lt;/em&gt; the iterator and iterable protocols (as shown in the example below).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6bfe1f5b870b1d60d48fcd5c7b5fcea78b71eb90" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; It's important to keep in mind that while the time value at the heart of a Date object is UTC, the basic methods to fetch the date and time or its components all work in the local (i.e. host system) time zone and offset.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7f4bbacf6321e13f6eb99261e1d22c24b709b5c2" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; JavaScript &lt;code&gt;Date&lt;/code&gt; objects can only be instantiated by calling JavaScript &lt;code&gt;Date&lt;/code&gt; as a constructor: calling it as a regular function (i.e. without the &lt;a href=&quot;../operators/new&quot;&gt;&lt;code&gt;new&lt;/code&gt;&lt;/a&gt; operator) will return a string rather than a &lt;code&gt;Date&lt;/code&gt; object; unlike other JavaScript object types, JavaScript &lt;code&gt;Date&lt;/code&gt; objects have no literal syntax.</source>
          <target state="translated">&lt;strong&gt;Nota: &lt;/strong&gt; &lt;code&gt;Date&lt;/code&gt; objetos de fecha de JavaScript solo se pueden instanciar llamando a la &lt;code&gt;Date&lt;/code&gt; JavaScript como un constructor: llamarlo como una funci&amp;oacute;n regular (es decir, sin el operador &lt;a href=&quot;../operators/new&quot;&gt; &lt;code&gt;new&lt;/code&gt; &lt;/a&gt; ) devolver&amp;aacute; una cadena en lugar de un objeto de &lt;code&gt;Date&lt;/code&gt; ; a diferencia de otros tipos de objetos de JavaScript, los objetos de &lt;code&gt;Date&lt;/code&gt; JavaScript no tienen sintaxis literal.</target>
        </trans-unit>
        <trans-unit id="cba716c445446c37823ee39ce035c3f7e61e130a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; JavaScript also has &lt;a href=&quot;bitwise_operators#Bitwise_XOR&quot;&gt;a bitwise operator ^ (logical XOR)&lt;/a&gt;. &lt;code&gt;**&lt;/code&gt; and &lt;code&gt;^&lt;/code&gt; are different (for example : &lt;code&gt;2 ** 3 === 8&lt;/code&gt; when &lt;code&gt;2 ^ 3 === 1&lt;/code&gt;.)</source>
          <target state="translated">&lt;strong&gt;Nota:&lt;/strong&gt; JavaScript tambi&amp;eacute;n tiene &lt;a href=&quot;bitwise_operators#Bitwise_XOR&quot;&gt;un operador bit a bit ^ (XOR l&amp;oacute;gico)&lt;/a&gt; . &lt;code&gt;**&lt;/code&gt; y &lt;code&gt;^&lt;/code&gt; son diferentes (por ejemplo: &lt;code&gt;2 ** 3 === 8&lt;/code&gt; cuando &lt;code&gt;2 ^ 3 === 1&lt;/code&gt; )</target>
        </trans-unit>
        <trans-unit id="771025a125bb3c93ccfe202888079e1424a8e069" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; Labeled loops or blocks are very uncommon. Usually function calls can be used instead of loop jumps.</source>
          <target state="translated">&lt;strong&gt;Nota: Los&lt;/strong&gt; bucles o bloques etiquetados son muy poco comunes. Por lo general, se pueden usar llamadas a funciones en lugar de saltos de bucle.</target>
        </trans-unit>
        <trans-unit id="817378a03f44c8672a6044bd391916398bcb3fea" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; Many &lt;code&gt;Math&lt;/code&gt; functions have a precision that&amp;rsquo;s &lt;em&gt;implementation-dependent.&lt;/em&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c51f56c9c6eb301eeeac8ec59172e72208de14f9" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; Many older browsers&amp;mdash;including Chrome &amp;lt;17 and Internet Explorer &amp;lt;9&amp;mdash;don't accept array-like objects, and will throw an exception.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1fac8f55feeec11dca5f652a1e6bc14af58f7c8b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; Month are 0-indexed when used as an argument of &lt;a href=&quot;../date&quot;&gt;&lt;code&gt;Date&lt;/code&gt;&lt;/a&gt; (thus 0 corresponds to January and 11 to December).</source>
          <target state="translated">&lt;strong&gt;Nota: Los&lt;/strong&gt; meses est&amp;aacute;n indexados con 0 cuando se usan como un argumento de &lt;a href=&quot;../date&quot;&gt; &lt;code&gt;Date&lt;/code&gt; &lt;/a&gt; (por lo tanto, 0 corresponde a enero y 11 a diciembre).</target>
        </trans-unit>
        <trans-unit id="6aefc9efe8abe1e05cdb3d94a2c17571efaa3b6b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; Objects in string contexts convert via the &lt;a href=&quot;tostring&quot;&gt;&lt;code&gt;toString()&lt;/code&gt;&lt;/a&gt; method, which is different from &lt;a href=&quot;../string&quot;&gt;&lt;code&gt;String&lt;/code&gt;&lt;/a&gt; objects converting to string primitives using &lt;code&gt;valueOf&lt;/code&gt;. All objects have a string conversion, if only &quot;&lt;code&gt;[object &lt;em&gt;type&lt;/em&gt;]&lt;/code&gt;&quot;. But many objects do not convert to number, boolean, or function.</source>
          <target state="translated">&lt;strong&gt;Nota: Los&lt;/strong&gt; objetos en contextos de cadena se convierten a trav&amp;eacute;s del m&amp;eacute;todo &lt;a href=&quot;tostring&quot;&gt; &lt;code&gt;toString()&lt;/code&gt; &lt;/a&gt; , que es diferente de los objetos de &lt;a href=&quot;../string&quot;&gt; &lt;code&gt;String&lt;/code&gt; &lt;/a&gt; que se convierten en primitivas de cadena usando &lt;code&gt;valueOf&lt;/code&gt; . Todos los objetos tienen una conversi&amp;oacute;n de cadena, aunque solo sea &quot; &lt;code&gt;[object &lt;em&gt;type&lt;/em&gt;]&lt;/code&gt; &quot;. Pero muchos objetos no se convierten en n&amp;uacute;meros, booleanos o funciones.</target>
        </trans-unit>
        <trans-unit id="20ecd745e775d777d5e0530f2746a8b4bdc34ce0" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; Parsing of date strings with the &lt;code&gt;Date&lt;/code&gt; constructor (and &lt;code&gt;Date.parse()&lt;/code&gt;, which works the same way) is &lt;em&gt;strongly discouraged&lt;/em&gt; due to browser differences and inconsistencies.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6af260530dffa5616e1a97f776680caae737db0c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; Parsing of date strings with the &lt;code&gt;Date&lt;/code&gt; constructor (and &lt;code&gt;Date.parse&lt;/code&gt;, they are equivalent) is strongly discouraged due to browser differences and inconsistencies.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="727266a08c0b936a62b4097f40ecb0ef35024e59" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; Parsing of strings with &lt;code&gt;Date.parse&lt;/code&gt; is strongly discouraged due to browser differences and inconsistencies.</source>
          <target state="translated">&lt;strong&gt;Nota:&lt;/strong&gt; Se desaconseja enf&amp;aacute;ticamente el an&amp;aacute;lisis de cadenas con &lt;code&gt;Date.parse&lt;/code&gt; debido a las diferencias e inconsistencias del navegador.</target>
        </trans-unit>
        <trans-unit id="e266d0db100d7c0ee5966d7654b3a7ff4ecb2158" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; Please see the &lt;a href=&quot;#Avoid_where_possible&quot;&gt;Avoid where possible&lt;/a&gt; section below. Correct use of &lt;code&gt;WeakRef&lt;/code&gt; takes careful thought, and it's best avoided if possible.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0c6387929bf8e20366e124fb355a09268278b5c7" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; See &lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions&quot;&gt;this guide&lt;/a&gt; for more explanations about regular expressions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6dc36416db2a62f5b79c686618c268478b428ae4" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; See also &lt;a href=&quot;matchall&quot;&gt;&lt;code&gt;String.prototype.matchAll()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions#Advanced_searching_with_flags&quot;&gt;Advanced searching with flags&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b4d90c5d6d9b94a1f7230d93bf106368245455c4" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; Spread syntax effectively goes one level deep while copying an array. Therefore, it may be unsuitable for copying multidimensional arrays as the following example shows (it's the same with &lt;a href=&quot;../global_objects/object/assign&quot;&gt;&lt;code&gt;Object.assign()&lt;/code&gt;&lt;/a&gt; and spread syntax).</source>
          <target state="translated">&lt;strong&gt;Nota: La&lt;/strong&gt; sintaxis de propagaci&amp;oacute;n alcanza un nivel de profundidad al copiar una matriz. Por lo tanto, puede que no sea adecuado para copiar matrices multidimensionales como muestra el siguiente ejemplo (es lo mismo con &lt;a href=&quot;../global_objects/object/assign&quot;&gt; &lt;code&gt;Object.assign()&lt;/code&gt; &lt;/a&gt; y sintaxis de propagaci&amp;oacute;n).</target>
        </trans-unit>
        <trans-unit id="b1e58dd8b5aa3a0080bb077a9ad00d39a01d1e04" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; Spread syntax effectively goes one level deep while copying an array. Therefore, it may be unsuitable for copying multidimensional arrays, as the following example shows. (The same is true with &lt;a href=&quot;../global_objects/object/assign&quot;&gt;&lt;code&gt;Object.assign()&lt;/code&gt;&lt;/a&gt; and spread syntax.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="358e3ce297689d443eafc4cf6dc6e850fef804bd" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; Starting in JavaScript 1.8.5 &lt;code&gt;toString()&lt;/code&gt; called on &lt;a href=&quot;../null&quot;&gt;&lt;code&gt;null&lt;/code&gt;&lt;/a&gt; returns &lt;code&gt;[object &lt;em&gt;Null&lt;/em&gt;]&lt;/code&gt;, and &lt;a href=&quot;../undefined&quot;&gt;&lt;code&gt;undefined&lt;/code&gt;&lt;/a&gt; returns &lt;code&gt;[object &lt;em&gt;Undefined&lt;/em&gt;]&lt;/code&gt;, as defined in the 5th Edition of ECMAScript and a subsequent Errata. See &lt;a href=&quot;#Using_toString()_to_detect_object_class&quot;&gt;Using_toString()_to_detect_object_class&lt;/a&gt;.</source>
          <target state="translated">&lt;strong&gt;Nota:&lt;/strong&gt; A partir de JavaScript 1.8.5 &lt;code&gt;toString()&lt;/code&gt; llamada en &lt;a href=&quot;../null&quot;&gt; &lt;code&gt;null&lt;/code&gt; &lt;/a&gt; retornos &lt;code&gt;[object &lt;em&gt;Null&lt;/em&gt;]&lt;/code&gt; , y &lt;a href=&quot;../undefined&quot;&gt; &lt;code&gt;undefined&lt;/code&gt; &lt;/a&gt; vuelve &lt;code&gt;[object &lt;em&gt;Undefined&lt;/em&gt;]&lt;/code&gt; , tal como se define en la 5&amp;ordf; edici&amp;oacute;n de ECMAScript y una posterior erratas. Consulte &lt;a href=&quot;#Using_toString()_to_detect_object_class&quot;&gt;Using_toString () _ to_detect_object_class&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="a15d9c1ea2b0a0e1c267bed84cbe1cdc7fe69654" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; Starting in JavaScript 1.8.5, &lt;code&gt;toString()&lt;/code&gt; called on &lt;a href=&quot;../null&quot;&gt;&lt;code&gt;null&lt;/code&gt;&lt;/a&gt; returns &lt;code&gt;[object &lt;em&gt;Null&lt;/em&gt;]&lt;/code&gt;, and &lt;a href=&quot;../undefined&quot;&gt;&lt;code&gt;undefined&lt;/code&gt;&lt;/a&gt; returns &lt;code&gt;[object &lt;em&gt;Undefined&lt;/em&gt;]&lt;/code&gt;, as defined in the 5&lt;sup&gt;th&lt;/sup&gt; Edition of ECMAScript and subsequent Errata.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8d57bc72c11abaf69eb43644d025eb28d1419aee" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; Static methods are not properties of &lt;code&gt;this&lt;/code&gt;. They are properties of the class itself.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0e12c8b40a6c873368a85592313dce66b1e2b5dd" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; String objects are Type Object, not String! String objects are rarely used, so the following results might be surprising:</source>
          <target state="translated">&lt;strong&gt;Nota:&lt;/strong&gt; Los objetos de cadena son objetos de tipo, no cadenas. Los objetos de cadena rara vez se utilizan, por lo que los siguientes resultados pueden ser sorprendentes:</target>
        </trans-unit>
        <trans-unit id="61d22cf1bf09fb835287646ba1ff636d7d5dfd9f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; Technically speaking, &lt;code&gt;has()&lt;/code&gt; uses the &lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Web/JavaScript/Equality_comparisons_and_sameness#Same-value-zero_equality&quot;&gt;Same-value-zero&lt;/a&gt; algorithm to determine whether the given element is found.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="84fe9a5fbe07ccdfcfe25ab1224f1a2b8b21eb68" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; Technically speaking, &lt;code&gt;has()&lt;/code&gt; uses the &lt;code&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Equality_comparisons_and_sameness#Same-value-zero_equality&quot;&gt;sameValueZero&lt;/a&gt;&lt;/code&gt; algorithm to determine whether the given element is found.</source>
          <target state="translated">&lt;strong&gt;Nota:&lt;/strong&gt; t&amp;eacute;cnicamente hablando, &lt;code&gt;has()&lt;/code&gt; usa el algoritmo &lt;code&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Equality_comparisons_and_sameness#Same-value-zero_equality&quot;&gt;sameValueZero&lt;/a&gt;&lt;/code&gt; para determinar si se encuentra el elemento dado.</target>
        </trans-unit>
        <trans-unit id="932b8bb42efb809689f0c3094f4532ecc539146e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; Technically speaking, &lt;code&gt;includes()&lt;/code&gt; uses the &lt;code&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Equality_comparisons_and_sameness#Same-value-zero_equality&quot;&gt;sameValueZero&lt;/a&gt;&lt;/code&gt; algorithm to determine whether the given element is found.</source>
          <target state="translated">&lt;strong&gt;Nota:&lt;/strong&gt; t&amp;eacute;cnicamente hablando, &lt;code&gt;includes()&lt;/code&gt; usa el algoritmo &lt;code&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Equality_comparisons_and_sameness#Same-value-zero_equality&quot;&gt;sameValueZero&lt;/a&gt;&lt;/code&gt; para determinar si se encuentra el elemento dado.</target>
        </trans-unit>
        <trans-unit id="a26e8f7c200274b339ac0e717593fe6705fc9661" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; Technically speaking, &lt;code&gt;includes()&lt;/code&gt; uses the &lt;code&gt;&lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Web/JavaScript/Equality_comparisons_and_sameness#Same-value-zero_equality&quot;&gt;sameValueZero&lt;/a&gt;&lt;/code&gt; algorithm to determine whether the given element is found.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="98b0a7fbbe7fc19a335dd9a46844842671c58994" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; The &lt;code&gt;Object.create()&lt;/code&gt; method used above is relatively new. For alternative methods, please consider one of the following approaches:</source>
          <target state="translated">&lt;strong&gt;Nota:&lt;/strong&gt; El m&amp;eacute;todo &lt;code&gt;Object.create()&lt;/code&gt; utilizado anteriormente es relativamente nuevo. Para m&amp;eacute;todos alternativos, considere uno de los siguientes enfoques:</target>
        </trans-unit>
        <trans-unit id="600193aeb66c423b3e68da8317526519bcbd1aab" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; The &lt;code&gt;length&lt;/code&gt; property is used to control the number of object properties to be added. In the above example, &lt;code&gt;length:2&lt;/code&gt; indicates two properties has to be added.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="18120179463c581abf4bb091c97434a0b8908b11" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; The &lt;em&gt;strict equality&lt;/em&gt; operator (as opposed to the &lt;em&gt;standard equality&lt;/em&gt; operator) must be used here, because &lt;code&gt;x == undefined&lt;/code&gt; also checks whether &lt;code&gt;x&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt;, while strict equality doesn't. This is because &lt;code&gt;null&lt;/code&gt; is not equivalent to &lt;code&gt;undefined&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2092b16cccf693b8d8fff7395070e011bb2ec6d4" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; The argument &lt;code&gt;monthIndex&lt;/code&gt; is 0-based. This means that &lt;code&gt;January = 0&lt;/code&gt; and &lt;code&gt;December = 11&lt;/code&gt;.</source>
          <target state="translated">&lt;strong&gt;Nota:&lt;/strong&gt; El argumento &lt;code&gt;monthIndex&lt;/code&gt; est&amp;aacute; basado en 0. Esto significa que &lt;code&gt;January = 0&lt;/code&gt; y &lt;code&gt;December = 11&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="78e59a989e9e78fba04060c0dc59ccc7a4a2add3" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; The following is syntactically invalid despite its import equivalent:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="de2bcffb62cf8d3b51c0ce4c49f05b67caf35b96" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; The only correct way to instantiate a new &lt;code&gt;Date&lt;/code&gt; object is by using the &lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/new&quot;&gt;&lt;code&gt;new&lt;/code&gt;&lt;/a&gt; operator. If you simply call the &lt;code&gt;Date&lt;/code&gt; object directly, such as &lt;code&gt;now = Date()&lt;/code&gt;, the returned value is a string rather than a &lt;code&gt;Date&lt;/code&gt; object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1955d1efaa1f8720eb71242a2a0fe4e7c8e0d0b5" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; The reason for &lt;code&gt;unwatch()&lt;/code&gt; to take the property name &lt;em&gt;prop&lt;/em&gt; as its only parameter is due to the &quot;single handler allowing&quot; behavior of the &lt;a href=&quot;watch&quot;&gt;&lt;code&gt;watch()&lt;/code&gt;&lt;/a&gt; method.</source>
          <target state="translated">&lt;strong&gt;Nota:&lt;/strong&gt; La raz&amp;oacute;n por la que &lt;code&gt;unwatch()&lt;/code&gt; toma el &lt;em&gt;prop de&lt;/em&gt; nombre de &lt;em&gt;propiedad&lt;/em&gt; como su &amp;uacute;nico par&amp;aacute;metro se debe al comportamiento de &quot;un solo controlador que permite&quot; del m&amp;eacute;todo &lt;a href=&quot;watch&quot;&gt; &lt;code&gt;watch()&lt;/code&gt; &lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="40b2c17bd14e9e2f0d83c335e3a0b242c8caae4f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; The value of &lt;code&gt;this&lt;/code&gt; will be &lt;code&gt;undefined&lt;/code&gt; in strict mode. See below.</source>
          <target state="translated">&lt;strong&gt;Nota:&lt;/strong&gt; El valor de &lt;code&gt;this&lt;/code&gt; no estar&amp;aacute; &lt;code&gt;undefined&lt;/code&gt; en modo estricto. Vea abajo.</target>
        </trans-unit>
        <trans-unit id="28e45baa0bcb5c4340df55ba049e2a785cb346b7" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; This also means that there is no list of current objects stored in the collection. &lt;code&gt;WeakSets&lt;/code&gt; are not enumerable.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8c7727adbde630d97ded4c8afef19d6a4439e805" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; This article describes the &lt;code&gt;Promise&lt;/code&gt; constructor and the methods and properties of such objects. To learn about the way promises work and how you can use them, we advise you to read &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Using_promises&quot;&gt;Using promises&lt;/a&gt; first. The constructor is primarily used to wrap functions that do not already support promises.</source>
          <target state="translated">&lt;strong&gt;Nota:&lt;/strong&gt; Este art&amp;iacute;culo describe el constructor &lt;code&gt;Promise&lt;/code&gt; y los m&amp;eacute;todos y propiedades de dichos objetos. Para conocer la forma en que funcionan las promesas y c&amp;oacute;mo puede usarlas, le recomendamos que lea primero &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Using_promises&quot;&gt;Usar promesas&lt;/a&gt; . El constructor se utiliza principalmente para ajustar funciones que a&amp;uacute;n no admiten promesas.</target>
        </trans-unit>
        <trans-unit id="63e3c87f450a346f40b18eca582548e2deeb51f9" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; This is one of the few cases in JavaScript where &lt;strong&gt;the semicolon is mandatory&lt;/strong&gt;. Indeed, without the semicolon the line that follows the cycle declaration will be considered a statement.</source>
          <target state="translated">&lt;strong&gt;Nota:&lt;/strong&gt; Este es uno de los pocos casos en JavaScript donde &lt;strong&gt;el punto y coma es obligatorio&lt;/strong&gt; . De hecho, sin el punto y coma, la l&amp;iacute;nea que sigue a la declaraci&amp;oacute;n del ciclo se considerar&amp;aacute; una declaraci&amp;oacute;n.</target>
        </trans-unit>
        <trans-unit id="d0ad1118a4dbbaf1b10c897edea38f62e7d5039e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; This non-native &lt;code&gt;Function.construct&lt;/code&gt; method will not work with some native constructors; like &lt;a href=&quot;../date&quot;&gt;&lt;code&gt;Date&lt;/code&gt;&lt;/a&gt;, for example. In these cases you have to use the &lt;a href=&quot;bind&quot;&gt;&lt;code&gt;Function.prototype.bind&lt;/code&gt;&lt;/a&gt; method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f70fb05109e87bae7ee85aa0c96458c3ad964ea2" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; This non-native &lt;code&gt;Function.construct&lt;/code&gt; method will not work with some native constructors; like &lt;a href=&quot;../date&quot;&gt;&lt;code&gt;Date&lt;/code&gt;&lt;/a&gt;, for example. In these cases you have to use the &lt;a href=&quot;bind&quot;&gt;&lt;code&gt;Function.prototype.bind&lt;/code&gt;&lt;/a&gt; method. For example, imagine having an array like the following, to be used with &lt;a href=&quot;../date&quot;&gt;&lt;code&gt;Date&lt;/code&gt;&lt;/a&gt; constructor: &lt;code&gt;[2012, 11, 4]&lt;/code&gt;; in this case you have to write something like: &lt;code&gt;new (Function.prototype.bind.apply(Date, [null].concat([2012, 11, 4])))()&lt;/code&gt;. This is not the best way to do things, and probably not to be used in any production environment.</source>
          <target state="translated">&lt;strong&gt;Nota:&lt;/strong&gt; Este m&amp;eacute;todo &lt;code&gt;Function.construct&lt;/code&gt; no nativo no funcionar&amp;aacute; con algunos constructores nativos; como &lt;a href=&quot;../date&quot;&gt; &lt;code&gt;Date&lt;/code&gt; &lt;/a&gt; , por ejemplo. En estos casos, debe utilizar el m&amp;eacute;todo &lt;a href=&quot;bind&quot;&gt; &lt;code&gt;Function.prototype.bind&lt;/code&gt; &lt;/a&gt; . Por ejemplo, imagina tener una matriz como la siguiente, para usar con el constructor &lt;a href=&quot;../date&quot;&gt; &lt;code&gt;Date&lt;/code&gt; &lt;/a&gt; : &lt;code&gt;[2012, 11, 4]&lt;/code&gt; ; en este caso tienes que escribir algo como: &lt;code&gt;new (Function.prototype.bind.apply(Date, [null].concat([2012, 11, 4])))()&lt;/code&gt; . &amp;Eacute;sta no es la mejor forma de hacer las cosas y probablemente no se utilizar&amp;aacute; en ning&amp;uacute;n entorno de producci&amp;oacute;n.</target>
        </trans-unit>
        <trans-unit id="24502e3f5823bcbfeccb81fd33ffa25b3f363c52" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; This operation only works with a shared &lt;a href=&quot;../int32array&quot;&gt;&lt;code&gt;Int32Array&lt;/code&gt;&lt;/a&gt; and may not be allowed on the main thread.</source>
          <target state="translated">&lt;strong&gt;Nota:&lt;/strong&gt; Esta operaci&amp;oacute;n solo funciona con un &lt;a href=&quot;../int32array&quot;&gt; &lt;code&gt;Int32Array&lt;/code&gt; &lt;/a&gt; compartido y es posible que no se permita en el hilo principal.</target>
        </trans-unit>
        <trans-unit id="ef427d917c001b1f4650cf5e5def0d0fc7c777bb" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; This operation works with a shared &lt;a href=&quot;../int32array&quot;&gt;&lt;code&gt;Int32Array&lt;/code&gt;&lt;/a&gt; only.</source>
          <target state="translated">&lt;strong&gt;Nota:&lt;/strong&gt; esta operaci&amp;oacute;n solo funciona con un &lt;a href=&quot;../int32array&quot;&gt; &lt;code&gt;Int32Array&lt;/code&gt; &lt;/a&gt; compartido .</target>
        </trans-unit>
        <trans-unit id="e500d399515becb665391f5e8c5556e3dc0ddc69" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; Unlike &lt;code&gt;unshift()&lt;/code&gt;, this creates a new &lt;code&gt;arr1&lt;/code&gt;, and does not modify the original &lt;code&gt;arr1&lt;/code&gt; array in-place.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="459514910373cc21fc85761c674b24cfc7d00d66" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; Using the &lt;code&gt;Function&lt;/code&gt; constructor to create functions is not recommended since it needs the function body as a string which may prevent some JS engine optimizations and can also cause other problems.</source>
          <target state="translated">&lt;strong&gt;Nota:&lt;/strong&gt; No se recomienda el uso del constructor de &lt;code&gt;Function&lt;/code&gt; para crear funciones, ya que necesita el cuerpo de la funci&amp;oacute;n como una cadena que puede evitar algunas optimizaciones del motor JS y tambi&amp;eacute;n puede causar otros problemas.</target>
        </trans-unit>
        <trans-unit id="725b65434e6935214fd79e2f1684e8b9c1ce58bf" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; Using the &lt;code&gt;GeneratorFunction&lt;/code&gt; constructor to create functions is not recommended since it needs the function body as a string which may prevent some JS engine optimizations and can also cause other problems.</source>
          <target state="translated">&lt;strong&gt;Nota:&lt;/strong&gt; No se recomienda usar el constructor &lt;code&gt;GeneratorFunction&lt;/code&gt; para crear funciones, ya que necesita el cuerpo de la funci&amp;oacute;n como una cadena que puede evitar algunas optimizaciones del motor JS y tambi&amp;eacute;n puede causar otros problemas.</target>
        </trans-unit>
        <trans-unit id="6cf46a3d7059d3673cfb92d7b3e5d229fd13029e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; When comparing strings and characters, &lt;code&gt;includes()&lt;/code&gt; is &lt;em&gt;case-sensitive&lt;/em&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="85c319751ff83b08966d7270386045fb1f98bd7b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; When loading a library (such as jQuery), make sure it is loaded before you access library variables, such as &quot;$&quot;. Put the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/script&quot;&gt;&lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt;&lt;/a&gt; tag that loads the library before your code that uses it.</source>
          <target state="translated">&lt;strong&gt;Nota:&lt;/strong&gt; Al cargar una biblioteca (como jQuery), aseg&amp;uacute;rese de que est&amp;eacute; cargada antes de acceder a las variables de la biblioteca, como &quot;$&quot;. Coloque la etiqueta &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/script&quot;&gt; &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; &lt;/a&gt; que carga la biblioteca antes de su c&amp;oacute;digo que la usa.</target>
        </trans-unit>
        <trans-unit id="ad4e82294745878a54c69e55c811a42836c1ccaa" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; When loading a library (such as jQuery), make sure it is loaded before you access library variables, such as &quot;$&quot;. Put the &lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Web/HTML/Element/script&quot;&gt;&lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt;&lt;/a&gt; tag that loads the library before your code that uses it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="78a25d81475121b131542b82b7c0571e1ed01b13" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; When the first argument is undefined or null a similar outcome can be achieved using the array &lt;a href=&quot;../../operators/spread_syntax&quot;&gt;spread syntax&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0a681172ba1c89d6f086e8f2d83d03e01913d5ce" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; When the non-standard property &lt;code&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Document#Properties&quot;&gt;document.all&lt;/a&gt;&lt;/code&gt; is used as an argument for this constructor, the result is a &lt;code&gt;Boolean&lt;/code&gt; object with the value &lt;code&gt;false&lt;/code&gt;. This property is legacy and non-standard and should not be used.</source>
          <target state="translated">&lt;strong&gt;Nota:&lt;/strong&gt; Cuando se usa la propiedad no est&amp;aacute;ndar &lt;code&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Document#Properties&quot;&gt;document.all&lt;/a&gt;&lt;/code&gt; como argumento para este constructor, el resultado es un objeto &lt;code&gt;Boolean&lt;/code&gt; con el valor &lt;code&gt;false&lt;/code&gt; . Esta propiedad es heredada y no est&amp;aacute;ndar y no debe usarse.</target>
        </trans-unit>
        <trans-unit id="78fe89a73001c5f232175ca238a51a999dec2f14" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; When the string is empty, &lt;code&gt;split()&lt;/code&gt; returns an array containing one empty string, rather than an empty array. If the string and separator are both empty strings, an empty array is returned.</source>
          <target state="translated">&lt;strong&gt;Nota:&lt;/strong&gt; cuando la cadena est&amp;aacute; vac&amp;iacute;a, &lt;code&gt;split()&lt;/code&gt; devuelve una matriz que contiene una cadena vac&amp;iacute;a, en lugar de una matriz vac&amp;iacute;a. Si la cadena y el separador son cadenas vac&amp;iacute;as, se devuelve una matriz vac&amp;iacute;a.</target>
        </trans-unit>
        <trans-unit id="a96e44fab969f1254bb7b66f556f52c2916c9cd7" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; Where &lt;code&gt;Date&lt;/code&gt; is called as a constructor with more than one argument, if values are greater than their logical range (e.g. 13 is provided as the month value or 70 for the minute value), the adjacent value will be adjusted. E.g. &lt;code&gt;new Date(2013, 13, 1)&lt;/code&gt; is equivalent to &lt;code&gt;new Date(2014, 1, 1)&lt;/code&gt;, both create a date for &lt;code&gt;2014-02-01&lt;/code&gt; (note that the month is 0-based). Similarly for other values: &lt;code&gt;new Date(2013, 2, 1, 0, 70)&lt;/code&gt; is equivalent to &lt;code&gt;new Date(2013, 2, 1, 1, 10)&lt;/code&gt; which both create a date for &lt;code&gt;2013-03-01T01:10:00&lt;/code&gt;.</source>
          <target state="translated">&lt;strong&gt;Nota:&lt;/strong&gt; Cuando se llama a &lt;code&gt;Date&lt;/code&gt; como un constructor con m&amp;aacute;s de un argumento, si los valores son mayores que su rango l&amp;oacute;gico (por ejemplo, se proporciona 13 como el valor del mes o 70 para el valor de los minutos), se ajustar&amp;aacute; el valor adyacente. Por ejemplo, &lt;code&gt;new Date(2013, 13, 1)&lt;/code&gt; es equivalente a &lt;code&gt;new Date(2014, 1, 1)&lt;/code&gt; , ambos crean una fecha para &lt;code&gt;2014-02-01&lt;/code&gt; (tenga en cuenta que el mes se basa en 0). De manera similar para otros valores: &lt;code&gt;new Date(2013, 2, 1, 0, 70)&lt;/code&gt; es equivalente a &lt;code&gt;new Date(2013, 2, 1, 1, 10)&lt;/code&gt; que crean una fecha para &lt;code&gt;2013-03-01T01:10:00&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="c376b19033b5623261bc5e616fe9c13de6b18217" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; Where &lt;code&gt;Date&lt;/code&gt; is called as a constructor with more than one argument, the specified arguments represent local time. If UTC is desired, use &lt;code&gt;new Date(&lt;a href=&quot;date/utc&quot;&gt;&lt;code&gt;Date.UTC(...)&lt;/code&gt;&lt;/a&gt;)&lt;/code&gt; with the same arguments.</source>
          <target state="translated">&lt;strong&gt;Nota:&lt;/strong&gt; Cuando se llama a &lt;code&gt;Date&lt;/code&gt; como un constructor con m&amp;aacute;s de un argumento, los argumentos especificados representan la hora local. Si desea UTC, use la &lt;code&gt;new Date(&lt;a href=&quot;date/utc&quot;&gt;&lt;code&gt;Date.UTC(...)&lt;/code&gt;&lt;/a&gt;)&lt;/code&gt; con los mismos argumentos.</target>
        </trans-unit>
        <trans-unit id="483e9d92a6e22a6218f96269fd44e507007c34f8" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; While the syntax of this function is almost identical to that of &lt;a href=&quot;apply&quot;&gt;&lt;code&gt;apply()&lt;/code&gt;&lt;/a&gt;, the fundamental difference is that &lt;code&gt;call()&lt;/code&gt; accepts an &lt;strong&gt;argument list&lt;/strong&gt;, while &lt;code&gt;apply()&lt;/code&gt; accepts a &lt;strong&gt;single array of arguments&lt;/strong&gt;.</source>
          <target state="translated">&lt;strong&gt;Nota:&lt;/strong&gt; Si bien la sintaxis de esta funci&amp;oacute;n es casi id&amp;eacute;ntica a la de &lt;a href=&quot;apply&quot;&gt; &lt;code&gt;apply()&lt;/code&gt; &lt;/a&gt; , la diferencia fundamental es que &lt;code&gt;call()&lt;/code&gt; acepta una &lt;strong&gt;lista de argumentos&lt;/strong&gt; , mientras que &lt;code&gt;apply()&lt;/code&gt; acepta una &lt;strong&gt;&amp;uacute;nica matriz de argumentos&lt;/strong&gt; .</target>
        </trans-unit>
        <trans-unit id="45de165c548b297c79c481f99d672f8cf89f9257" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; While the syntax of this function is almost identical to that of &lt;a href=&quot;call&quot;&gt;&lt;code&gt;call()&lt;/code&gt;&lt;/a&gt;, the fundamental difference is that &lt;code&gt;call()&lt;/code&gt; accepts an &lt;strong&gt;argument list&lt;/strong&gt;, while &lt;code&gt;apply()&lt;/code&gt; accepts a &lt;strong&gt;single array of arguments&lt;/strong&gt;.</source>
          <target state="translated">&lt;strong&gt;Nota:&lt;/strong&gt; Si bien la sintaxis de esta funci&amp;oacute;n es casi id&amp;eacute;ntica a la de &lt;a href=&quot;call&quot;&gt; &lt;code&gt;call()&lt;/code&gt; &lt;/a&gt; , la diferencia fundamental es que &lt;code&gt;call()&lt;/code&gt; acepta una &lt;strong&gt;lista de argumentos&lt;/strong&gt; , mientras que &lt;code&gt;apply()&lt;/code&gt; acepta una &lt;strong&gt;&amp;uacute;nica matriz de argumentos&lt;/strong&gt; .</target>
        </trans-unit>
        <trans-unit id="2d59bee38265027466360229e7e458140b2cc379" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; You call this method directly on the &lt;a href=&quot;../object&quot;&gt;&lt;code&gt;Object&lt;/code&gt;&lt;/a&gt; constructor rather than on an instance of type &lt;code&gt;Object&lt;/code&gt;.</source>
          <target state="translated">&lt;strong&gt;Nota:&lt;/strong&gt; Llame a este m&amp;eacute;todo directamente en el constructor &lt;a href=&quot;../object&quot;&gt; &lt;code&gt;Object&lt;/code&gt; en&lt;/a&gt; lugar de en una instancia del tipo &lt;code&gt;Object&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="9b6b52c30f35b960fa7e13f1a53aad477d6c88a8" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; You can always easily get the global object using the global &lt;a href=&quot;../global_objects/globalthis&quot;&gt;&lt;code&gt;globalThis&lt;/code&gt;&lt;/a&gt; property, regardless of the current context in which your code is running.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a7493391a1888e76b1ca7eb3c4a37230bbebd6bf" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; You cannot use the &lt;code&gt;&lt;var&gt;replacer&lt;/var&gt;&lt;/code&gt; function to remove values from an array. If you return &lt;code&gt;undefined&lt;/code&gt; or a function then &lt;code&gt;null&lt;/code&gt; is used instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bd8ec3585d0563d461a40a712d9dd099952dd2e6" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; You cannot use the &lt;code&gt;replacer&lt;/code&gt; function to remove values from an array. If you return &lt;code&gt;undefined&lt;/code&gt; or a function then &lt;code&gt;null&lt;/code&gt; is used instead.</source>
          <target state="translated">&lt;strong&gt;Nota:&lt;/strong&gt; no puede usar la funci&amp;oacute;n de &lt;code&gt;replacer&lt;/code&gt; para eliminar valores de una matriz. Si devuelve &lt;code&gt;undefined&lt;/code&gt; o una funci&amp;oacute;n, se usa &lt;code&gt;null&lt;/code&gt; en su lugar.</target>
        </trans-unit>
        <trans-unit id="a9d59ed7fc798253e15c8a8e7e933de0f3f06878" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; You cannot write a &lt;code&gt;&quot;use strict&quot;;&lt;/code&gt; directive in the body of a function definition that accepts rest, default, or destructured parameters. Doing so will throw &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Strict_Non_Simple_Params&quot;&gt;a syntax error&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ad9f17cd84782a44036af0759ea462aad9301397" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; You won't get a valid JSON representation of your Object.</source>
          <target state="translated">&lt;strong&gt;Nota:&lt;/strong&gt; No obtendr&amp;aacute; una representaci&amp;oacute;n JSON v&amp;aacute;lida de su objeto.</target>
        </trans-unit>
        <trans-unit id="5d742ca8820cc8f4f5c4af33dd908bfaf75b2050" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; if separator is an array, then Array is coerced to String and used as separator.</source>
          <target state="translated">&lt;strong&gt;Nota:&lt;/strong&gt; si el separador es una matriz, entonces Array se convierte en String y se usa como separador.</target>
        </trans-unit>
        <trans-unit id="f0992c6b2919932b092fd0f7a0df506e469dfbe6" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; parsing of date strings with the &lt;code&gt;Date&lt;/code&gt; constructor (and &lt;code&gt;Date.parse&lt;/code&gt;, they are equivalent) is strongly discouraged due to browser differences and inconsistencies.</source>
          <target state="translated">&lt;strong&gt;Nota:&lt;/strong&gt; se desaconseja encarecidamente el an&amp;aacute;lisis de cadenas de fecha con el constructor &lt;code&gt;Date&lt;/code&gt; (y &lt;code&gt;Date.parse&lt;/code&gt; , son equivalentes) debido a las diferencias e inconsistencias del navegador.</target>
        </trans-unit>
        <trans-unit id="9b9dfd33cb91f3fcb5263a6223e75ed8d7fccfcf" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; parsing of date strings with the &lt;code&gt;Date&lt;/code&gt; constructor (and &lt;code&gt;Date.parse&lt;/code&gt;, they are equivalent) is strongly discouraged due to browser differences and inconsistencies. Support for RFC 2822 format strings is by convention only. Support for ISO 8601 formats differs in that date-only strings (e.g. &quot;1970-01-01&quot;) are treated as UTC, not local.</source>
          <target state="translated">&lt;strong&gt;Nota:&lt;/strong&gt; se desaconseja encarecidamente el an&amp;aacute;lisis de cadenas de fecha con el constructor &lt;code&gt;Date&lt;/code&gt; (y &lt;code&gt;Date.parse&lt;/code&gt; , son equivalentes) debido a las diferencias e inconsistencias del navegador. El soporte para cadenas de formato RFC 2822 es solo por convenci&amp;oacute;n. La compatibilidad con los formatos ISO 8601 difiere en que las cadenas de solo fecha (por ejemplo, &quot;1970-01-01&quot;) se tratan como UTC, no como locales.</target>
        </trans-unit>
        <trans-unit id="8c39a996edba84df7911753e2829b63a5f8e3c59" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt;&lt;a href=&quot;../statements/async_function&quot;&gt;&lt;code&gt;async functions&lt;/code&gt;&lt;/a&gt; created with the &lt;code&gt;AsyncFunction&lt;/code&gt; constructor do not create closures to their creation contexts; they are always created in the global scope. When running them, they will only be able to access their own local variables and global ones, not the ones from the scope in which the &lt;code&gt;AsyncFunction&lt;/code&gt; constructor was called. This is different from using &lt;a href=&quot;eval&quot;&gt;&lt;code&gt;eval&lt;/code&gt;&lt;/a&gt; with code for an async function expression.</source>
          <target state="translated">&lt;strong&gt;Nota: las &lt;/strong&gt;&lt;a href=&quot;../statements/async_function&quot;&gt; &lt;code&gt;async functions&lt;/code&gt; &lt;/a&gt; creadas con el constructor &lt;code&gt;AsyncFunction&lt;/code&gt; no crean cierres para sus contextos de creaci&amp;oacute;n; siempre se crean en el &amp;aacute;mbito global. Al ejecutarlos, solo podr&amp;aacute;n acceder a sus propias variables locales y globales, no a las del &amp;aacute;mbito en el que se &lt;code&gt;AsyncFunction&lt;/code&gt; constructor AsyncFunction . Esto es diferente de usar &lt;a href=&quot;eval&quot;&gt; &lt;code&gt;eval&lt;/code&gt; &lt;/a&gt; con c&amp;oacute;digo para una expresi&amp;oacute;n de funci&amp;oacute;n as&amp;iacute;ncrona.</target>
        </trans-unit>
        <trans-unit id="2eb6541f8ccf55c4468e1e49fcdb6938ff45e9ce" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt;&lt;a href=&quot;../statements/async_function&quot;&gt;async functions&lt;/a&gt; created with the &lt;code&gt;AsyncFunction&lt;/code&gt; constructor do not create closures to their creation contexts; they are always created in the global scope.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d82da84f38fe49ba1869bdfebddcc97658eb025b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt;&lt;a href=&quot;../statements/function*&quot;&gt;&lt;code&gt;generator function&lt;/code&gt;&lt;/a&gt; created with the &lt;code&gt;GeneratorFunction&lt;/code&gt; constructor do not create closures to their creation contexts; they always are created in the global scope. When running them, they will only be able to access their own local variables and global ones, not the ones from the scope in which the &lt;code&gt;GeneratorFunction&lt;/code&gt; constructor was called. This is different from using &lt;a href=&quot;eval&quot;&gt;&lt;code&gt;eval&lt;/code&gt;&lt;/a&gt; with code for a generator function expression.</source>
          <target state="translated">&lt;strong&gt;Nota: la &lt;/strong&gt;&lt;a href=&quot;../statements/function*&quot;&gt; &lt;code&gt;generator function&lt;/code&gt; &lt;/a&gt; creada con el constructor &lt;code&gt;GeneratorFunction&lt;/code&gt; no crea cierres para sus contextos de creaci&amp;oacute;n; siempre se crean en el &amp;aacute;mbito global. Al ejecutarlos, solo podr&amp;aacute;n acceder a sus propias variables locales y globales, no a las del &amp;aacute;mbito en el que se llam&amp;oacute; al constructor &lt;code&gt;GeneratorFunction&lt;/code&gt; . Esto es diferente de usar &lt;a href=&quot;eval&quot;&gt; &lt;code&gt;eval&lt;/code&gt; &lt;/a&gt; con c&amp;oacute;digo para una expresi&amp;oacute;n de funci&amp;oacute;n generadora.</target>
        </trans-unit>
        <trans-unit id="d357069579fd95b82d03b53b937bff1269c19d78" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt;&lt;a href=&quot;../statements/function*&quot;&gt;&lt;code&gt;generator function&lt;/code&gt;&lt;/a&gt; created with the &lt;code&gt;GeneratorFunction&lt;/code&gt; constructor do not create closures to their creation contexts; they are always created in the global scope.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="495863d88fbf751d8ba6907c004a3f640c826674" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt;&lt;code&gt;'abab'.lastIndexOf('ab', 2)&lt;/code&gt; will return 2 and not 0, as fromIndex limits only the beginning of the match.</source>
          <target state="translated">&lt;strong&gt;Nota: &lt;/strong&gt; &lt;code&gt;'abab'.lastIndexOf('ab', 2)&lt;/code&gt; devolver&amp;aacute; 2 y no 0, ya que fromIndex limita solo el comienzo de la coincidencia.</target>
        </trans-unit>
        <trans-unit id="3c3f63d30d20997aaae6a490d7c647f38e169899" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt;&lt;code&gt;'abab'.lastIndexOf('ab', 2)&lt;/code&gt; will return &lt;code&gt;2&lt;/code&gt; and not &lt;code&gt;0&lt;/code&gt;, as &lt;code&gt;&lt;var&gt;fromIndex&lt;/var&gt;&lt;/code&gt; limits only the beginning of the match.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9a8f89b113bc9a50274099344d40a045c940ddd4" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt;&lt;code&gt;GeneratorFunction&lt;/code&gt; is not a global object, but could be obtained from generator function instance (see &lt;a href=&quot;global_objects/generatorfunction&quot;&gt;&lt;code&gt;GeneratorFunction&lt;/code&gt;&lt;/a&gt; for more detail).</source>
          <target state="translated">&lt;strong&gt;Nota: &lt;/strong&gt; &lt;code&gt;GeneratorFunction&lt;/code&gt; no es un objeto global, pero podr&amp;iacute;a obtenerse de la instancia de la funci&amp;oacute;n del generador (consulte &lt;a href=&quot;global_objects/generatorfunction&quot;&gt; &lt;code&gt;GeneratorFunction&lt;/code&gt; &lt;/a&gt; para obtener m&amp;aacute;s detalles).</target>
        </trans-unit>
        <trans-unit id="e58c973f9676387f338549e440d8a09c618f73e5" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt;&lt;code&gt;Object.assign()&lt;/code&gt; does not throw on &lt;a href=&quot;../null&quot;&gt;&lt;code&gt;null&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;../undefined&quot;&gt;&lt;code&gt;undefined&lt;/code&gt;&lt;/a&gt; sources.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bf64f1863041dc269140d2615eaae0c0d9d7a47b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt;&lt;code&gt;charCodeAt()&lt;/code&gt; will always return a value that is less than &lt;code&gt;65536&lt;/code&gt;. This is because the higher code points are represented by &lt;em&gt;a pair&lt;/em&gt; of (lower valued) &quot;surrogate&quot; pseudo-characters which are used to comprise the real character.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="def3ad9fe5c564448194b0f63f7804b66d49b157" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt;&lt;code&gt;for...in&lt;/code&gt; should not be used to iterate over an &lt;a href=&quot;../global_objects/array&quot;&gt;&lt;code&gt;Array&lt;/code&gt;&lt;/a&gt; where the index order is important.</source>
          <target state="translated">&lt;strong&gt;Nota: &lt;/strong&gt; &lt;code&gt;for...in&lt;/code&gt; no debe usarse para iterar sobre una &lt;a href=&quot;../global_objects/array&quot;&gt; &lt;code&gt;Array&lt;/code&gt; &lt;/a&gt; donde el orden del &amp;iacute;ndice es importante.</target>
        </trans-unit>
        <trans-unit id="6c95ec3156cde392e9ef5ec1892d1df414f67649" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt;&lt;code&gt;toGMTString()&lt;/code&gt; is deprecated and should no longer be used. It remains implemented only for backward compatibility; please use &lt;a href=&quot;toutcstring&quot;&gt;&lt;code&gt;toUTCString()&lt;/code&gt;&lt;/a&gt; instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d16464274bd675256a5985eb1eddf843f354c909" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: &lt;code&gt;BigInt()&lt;/code&gt; is not used with the &lt;a href=&quot;../../operators/new&quot;&gt;&lt;code&gt;new&lt;/code&gt;&lt;/a&gt; operator.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="902116d4fd6f892124eb1f57a56121a9e95812bb" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: &lt;code&gt;javascript:&lt;/code&gt; pseudo protocol is discouraged over other alternatives, such as unobtrusive event handlers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="882cfe6315be7052cd357e441923163e031b87d1" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: A WebAssembly page has a constant size of 65,536 bytes, i.e., 64KiB.</source>
          <target state="translated">&lt;strong&gt;Nota&lt;/strong&gt; : Una p&amp;aacute;gina de WebAssembly tiene un tama&amp;ntilde;o constante de 65.536 bytes, es decir, 64 KB.</target>
        </trans-unit>
        <trans-unit id="a8fd1ef24f654d71e16ff8445c0538324825d038" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: A promise is said to be &lt;em&gt;settled&lt;/em&gt; if it is either fulfilled or rejected, but not pending. You will also hear the term &lt;em&gt;resolved&lt;/em&gt; used with promises &amp;mdash; this means that the promise is settled or &amp;ldquo;locked in&amp;rdquo; to match the state of another promise. &lt;a href=&quot;https://github.com/domenic/promises-unwrapping/blob/master/docs/states-and-fates.md&quot;&gt;States and fates&lt;/a&gt; contains more details about promise terminology.</source>
          <target state="translated">&lt;strong&gt;Nota&lt;/strong&gt; : Se dice que una promesa est&amp;aacute; &lt;em&gt;resuelta&lt;/em&gt; si se cumple o se rechaza, pero no est&amp;aacute; pendiente. Tambi&amp;eacute;n escuchar&amp;aacute; que el t&amp;eacute;rmino &lt;em&gt;resuelto se&lt;/em&gt; usa con las promesas; esto significa que la promesa est&amp;aacute; establecida o &amp;ldquo;bloqueada&amp;rdquo; para que coincida con el estado de otra promesa. &lt;a href=&quot;https://github.com/domenic/promises-unwrapping/blob/master/docs/states-and-fates.md&quot;&gt;Estados y destinos&lt;/a&gt; contiene m&amp;aacute;s detalles sobre la terminolog&amp;iacute;a de las promesas.</target>
        </trans-unit>
        <trans-unit id="ea4f7bcefb8aac710664b2121ecc43f91e37c33c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: A promise is said to be &lt;em&gt;settled&lt;/em&gt; if it is either fulfilled or rejected, but not pending. You will also hear the term &lt;em&gt;resolved&lt;/em&gt; used with promises &amp;mdash; this means that the promise is settled or &amp;ldquo;locked-in&amp;rdquo; to match the state of another promise. &lt;a href=&quot;https://github.com/domenic/promises-unwrapping/blob/master/docs/states-and-fates.md&quot;&gt;States and fates&lt;/a&gt; contain more details about promise terminology.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="da18c4aef283b425565115d98ea8cafe9e4b7eab" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: For this to work, &lt;code&gt;.wasm&lt;/code&gt; files should be returned with an &lt;code&gt;application/wasm&lt;/code&gt; MIME type by the server.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b68110d5a709768ad094da32f390cd8a532bb582" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: Hashbang comments in JavaScript mimic &lt;a href=&quot;https://en.wikipedia.org/wiki/Shebang_(Unix)&quot;&gt;shebangs in Unix&lt;/a&gt; used to run files with proper interpreter.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c76700c50c5fa16db7054238c2711b85fbd934f9" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: Properties of non-array objects are not guaranteed to be stringified in any particular order. Do not rely on ordering of properties within the same object within the stringification.</source>
          <target state="translated">&lt;strong&gt;Nota&lt;/strong&gt; : No se garantiza que las propiedades de los objetos que no son de matriz est&amp;eacute;n codificadas en ning&amp;uacute;n orden en particular. No conf&amp;iacute;e en la ordenaci&amp;oacute;n de propiedades dentro del mismo objeto dentro de la cadena.</target>
        </trans-unit>
        <trans-unit id="26b2b5a3e93fc7fc264fe77e39dc89a93f9c95c9" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: See also this &lt;a href=&quot;https://stackoverflow.com/questions/25574963/ies-tolocalestring-has-strange-characters-in-results&quot;&gt;StackOverflow thread&lt;/a&gt; for more details and examples.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2f6afb69d4eebfc7e3036f03848bafb35d8fd458" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: Tables can currently only store function references, but this will likely be expanded in the future.</source>
          <target state="translated">&lt;strong&gt;Nota&lt;/strong&gt; : Actualmente, las tablas solo pueden almacenar referencias de funciones, pero es probable que esto se ampl&amp;iacute;e en el futuro.</target>
        </trans-unit>
        <trans-unit id="b8f7874282f151cfbcdd89b40732976fc8043def" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: The &lt;code&gt;keys()&lt;/code&gt; method is an alias for this method (for similarity with &lt;a href=&quot;../map&quot;&gt;&lt;code&gt;Map&lt;/code&gt;&lt;/a&gt; objects), hence the &lt;code&gt;keys()&lt;/code&gt; page redirecting here. It behaves exactly the same and returns &lt;strong&gt;values&lt;/strong&gt; of &lt;code&gt;Set&lt;/code&gt; elements.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="730c3fbd9fa3f3ea98a713ccc6d273af0217ce1b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: This method returns &lt;code&gt;false&lt;/code&gt; for any condition put on an empty array.</source>
          <target state="translated">&lt;strong&gt;Nota&lt;/strong&gt; : Este m&amp;eacute;todo devuelve &lt;code&gt;false&lt;/code&gt; para cualquier condici&amp;oacute;n puesta en una matriz vac&amp;iacute;a.</target>
        </trans-unit>
        <trans-unit id="a15ca51ca715b47d988eb0b32907c1c0c57fc3ef" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: This method returns &lt;code&gt;true&lt;/code&gt; for any condition put on an empty array.</source>
          <target state="translated">&lt;strong&gt;Nota&lt;/strong&gt; : Este m&amp;eacute;todo devuelve &lt;code&gt;true&lt;/code&gt; para cualquier condici&amp;oacute;n puesta en una matriz vac&amp;iacute;a.</target>
        </trans-unit>
        <trans-unit id="268ad9f0404aa4d4c9f3de0de141d7fb9b970ee9" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: You can also find this example as &lt;a href=&quot;https://github.com/mdn/webassembly-examples/blob/master/js-api-examples/instantiate-streaming.html&quot;&gt;instantiate-streaming.html&lt;/a&gt; on GitHub (&lt;a href=&quot;https://mdn.github.io/webassembly-examples/js-api-examples/instantiate-streaming.html&quot;&gt;view it live also&lt;/a&gt;).</source>
          <target state="translated">&lt;strong&gt;Nota&lt;/strong&gt; : Tambi&amp;eacute;n puede encontrar este ejemplo como &lt;a href=&quot;https://github.com/mdn/webassembly-examples/blob/master/js-api-examples/instantiate-streaming.html&quot;&gt;instantiate-streaming.html&lt;/a&gt; en GitHub ( &lt;a href=&quot;https://mdn.github.io/webassembly-examples/js-api-examples/instantiate-streaming.html&quot;&gt;verlo en vivo tambi&amp;eacute;n&lt;/a&gt; ).</target>
        </trans-unit>
        <trans-unit id="dabecf3ab82a6b52a81ab3fa4b0de9cf41a94cba" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: You can also find this example at &lt;a href=&quot;https://github.com/mdn/webassembly-examples/blob/master/js-api-examples/index.html&quot;&gt;index.html&lt;/a&gt; on GitHub (&lt;a href=&quot;https://mdn.github.io/webassembly-examples/js-api-examples/&quot;&gt;view it live also&lt;/a&gt;).</source>
          <target state="translated">&lt;strong&gt;Nota&lt;/strong&gt; : Tambi&amp;eacute;n puede encontrar este ejemplo en &lt;a href=&quot;https://github.com/mdn/webassembly-examples/blob/master/js-api-examples/index.html&quot;&gt;index.html&lt;/a&gt; en GitHub ( &lt;a href=&quot;https://mdn.github.io/webassembly-examples/js-api-examples/&quot;&gt;verlo en vivo tambi&amp;eacute;n&lt;/a&gt; ).</target>
        </trans-unit>
        <trans-unit id="91bc1fdd36d938de9da490fa6cbe55d7c58f4983" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: You can see the example &lt;a href=&quot;https://mdn.github.io/webassembly-examples/js-api-examples/global.html&quot;&gt;running live on GitHub&lt;/a&gt;; see also the &lt;a href=&quot;https://github.com/mdn/webassembly-examples/blob/master/js-api-examples/global.html&quot;&gt;source code&lt;/a&gt;.</source>
          <target state="translated">&lt;strong&gt;Nota&lt;/strong&gt; : Puede ver el ejemplo &lt;a href=&quot;https://mdn.github.io/webassembly-examples/js-api-examples/global.html&quot;&gt;ejecut&amp;aacute;ndose en vivo en GitHub&lt;/a&gt; ; vea tambi&amp;eacute;n el &lt;a href=&quot;https://github.com/mdn/webassembly-examples/blob/master/js-api-examples/global.html&quot;&gt;c&amp;oacute;digo fuente&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="be682e2136e817b30ce287371c8a73287c26fcdf" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: You'll probably want to use &lt;a href=&quot;compilestreaming&quot;&gt;&lt;code&gt;WebAssembly.compileStreaming()&lt;/code&gt;&lt;/a&gt; in most cases, as it is more efficient than &lt;code&gt;compile()&lt;/code&gt;.</source>
          <target state="translated">&lt;strong&gt;Nota&lt;/strong&gt; : Probablemente querr&amp;aacute; usar &lt;a href=&quot;compilestreaming&quot;&gt; &lt;code&gt;WebAssembly.compileStreaming()&lt;/code&gt; &lt;/a&gt; en la mayor&amp;iacute;a de los casos, ya que es m&amp;aacute;s eficiente que &lt;code&gt;compile()&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="9a46e1cbe0687c5ef74a0082002606802b10569f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: You'll probably want to use &lt;a href=&quot;instantiatestreaming&quot;&gt;&lt;code&gt;WebAssembly.instantiateStreaming()&lt;/code&gt;&lt;/a&gt; in most cases, as it is more efficient than &lt;code&gt;instantiate()&lt;/code&gt;.</source>
          <target state="translated">&lt;strong&gt;Nota&lt;/strong&gt; : Probablemente querr&amp;aacute; usar &lt;a href=&quot;instantiatestreaming&quot;&gt; &lt;code&gt;WebAssembly.instantiateStreaming()&lt;/code&gt; &lt;/a&gt; en la mayor&amp;iacute;a de los casos, ya que es m&amp;aacute;s eficiente que &lt;code&gt;instantiate()&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="cfe6590d93bda764d8848600573bf4b249233971" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: be aware of yielding rejected promises from sync generator. In such case &lt;code&gt;for await...of&lt;/code&gt; throws when consuming rejected promise and DOESN'T CALL &lt;code&gt;finally&lt;/code&gt; blocks within that generator. This can be undesireable if you need to free some allocated resources with &lt;code&gt;try/finally&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c5f3eb9c75799b6711da351bfde82222637c772a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Notes&lt;/strong&gt;: The parentheses &lt;code&gt;( ... )&lt;/code&gt; around the assignment statement are required when using object literal destructuring assignment without a declaration.</source>
          <target state="translated">&lt;strong&gt;Notas&lt;/strong&gt; : Los par&amp;eacute;ntesis &lt;code&gt;( ... )&lt;/code&gt; alrededor de la instrucci&amp;oacute;n de asignaci&amp;oacute;n son obligatorios cuando se usa la asignaci&amp;oacute;n de desestructuraci&amp;oacute;n literal de objeto sin una declaraci&amp;oacute;n.</target>
        </trans-unit>
        <trans-unit id="a14401185f3ff5bd99f02a62b740692d031437ed" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Numbers&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Numbers&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="328dbb416ec43a5d5908babc2a4d818c1d1b4d94" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Numbers&lt;/strong&gt;: Leading zeros are prohibited (in &lt;a href=&quot;json/stringify&quot;&gt;&lt;code&gt;JSON.stringify&lt;/code&gt;&lt;/a&gt; zeros will be ignored, but in &lt;a href=&quot;json/parse&quot;&gt;&lt;code&gt;JSON.parse&lt;/code&gt;&lt;/a&gt; it will throw SyntaxError); a decimal point must be followed by at least one digit.</source>
          <target state="translated">&lt;strong&gt;N&amp;uacute;meros&lt;/strong&gt; : los ceros &lt;a href=&quot;json/stringify&quot;&gt; &lt;code&gt;JSON.stringify&lt;/code&gt; &lt;/a&gt; est&amp;aacute;n prohibidos (en JSON.stringify los ceros se ignorar&amp;aacute;n, pero en &lt;a href=&quot;json/parse&quot;&gt; &lt;code&gt;JSON.parse&lt;/code&gt; &lt;/a&gt; arrojar&amp;aacute; SyntaxError); un punto decimal debe ir seguido de al menos un d&amp;iacute;gito.</target>
        </trans-unit>
        <trans-unit id="159ea910cec98f0557276fc2767d13225aa489ac" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Objects and Arrays&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7ece7382735109b62c363babb434637eaa506bff" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Objects and Arrays&lt;/strong&gt;: Property names must be double-quoted strings; trailing commas are forbidden.</source>
          <target state="translated">&lt;strong&gt;Objetos y matrices&lt;/strong&gt; : los nombres de propiedad deben ser cadenas entre comillas dobles; est&amp;aacute;n prohibidas las comas finales.</target>
        </trans-unit>
        <trans-unit id="1826f809cf822bd5667504e48b0c2d2304b96d8d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Old comprehensions syntax (do not use anymore!):&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Sintaxis de comprensiones antiguas (&amp;iexcl;no la use m&amp;aacute;s!):&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="69bd1ed79ee9bc0bb621aeef86c416fd19b0ce7a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;One key difference:&lt;/strong&gt;&lt;code&gt;Object.defineProperty&lt;/code&gt; returns the object or throws a &lt;a href=&quot;../typeerror&quot;&gt;&lt;code&gt;TypeError&lt;/code&gt;&lt;/a&gt; if the property has not been successfully defined. &lt;code&gt;Reflect.defineProperty&lt;/code&gt;, however, simply returns a &lt;a href=&quot;../boolean&quot;&gt;&lt;code&gt;Boolean&lt;/code&gt;&lt;/a&gt; indicating whether or not the property was successfully defined.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f8d6139fc4fa8f83bc90057837ed73ede18b2f4b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Operator precedence&lt;/strong&gt; determines how operators are parsed concerning each other. Operators with higher precedence become the operands of operators with lower precedence.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3ccfff51da82250c6945871fe29c0806ff574c48" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Output:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Output:&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="52d9ccdbcabfbe2a23a0a89b1f853ca9fcd3e609" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Polyfill Notes:&lt;/strong&gt; This algorithm is exactly as specified in ECMA-262 6&lt;sup&gt;th&lt;/sup&gt; Edition (assuming &lt;code&gt;Object&lt;/code&gt; and &lt;code&gt;TypeError&lt;/code&gt; have their original values and that &lt;code&gt;&lt;var&gt;callback&lt;/var&gt;.call()&lt;/code&gt; evaluates to the original value of &lt;a href=&quot;../function/call&quot;&gt;&lt;code&gt;Function.prototype.call()&lt;/code&gt;&lt;/a&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="68122dbb7070cbaf7691a8bb5160ae8529b51c44" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Pro:&lt;/strong&gt; The &lt;code&gt;with&lt;/code&gt; statement can help reduce file size by reducing the need to repeat a lengthy object reference without performance penalty. The scope chain change required by 'with' is not computationally expensive. Use of 'with' will relieve the interpreter of parsing repeated object references. Note, however, that in many cases this benefit can be achieved by using a temporary variable to store a reference to the desired object.</source>
          <target state="translated">&lt;strong&gt;Ventaja:&lt;/strong&gt; la declaraci&amp;oacute;n &lt;code&gt;with&lt;/code&gt; puede ayudar a reducir el tama&amp;ntilde;o del archivo al reducir la necesidad de repetir una referencia de objeto extensa sin afectar el rendimiento. El cambio de cadena de alcance requerido por 'con' no es computacionalmente costoso. El uso de 'con' aliviar&amp;aacute; al int&amp;eacute;rprete de analizar las referencias a objetos repetidas. Sin embargo, tenga en cuenta que en muchos casos este beneficio se puede lograr utilizando una variable temporal para almacenar una referencia al objeto deseado.</target>
        </trans-unit>
        <trans-unit id="b6b834226693d404aecf56319d99c8560bccf62c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Property accessors&lt;/strong&gt; provide access to an object's properties by using the dot notation or the bracket notation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a7e2daf6ab78ab4941f50d31c4d73b3f5fe43db5" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Reflect&lt;/strong&gt; is a built-in object that provides methods for interceptable JavaScript operations. The methods are the same as those of &lt;a href=&quot;proxy/handler&quot;&gt;proxy handlers&lt;/a&gt;. &lt;code&gt;Reflect&lt;/code&gt; is not a function object, so it's not constructible.</source>
          <target state="translated">&lt;strong&gt;Reflect&lt;/strong&gt; es un objeto integrado que proporciona m&amp;eacute;todos para operaciones JavaScript interceptables. Los m&amp;eacute;todos son los mismos que los de &lt;a href=&quot;proxy/handler&quot;&gt;los controladores&lt;/a&gt; de proxy . &lt;code&gt;Reflect&lt;/code&gt; no es un objeto de funci&amp;oacute;n, por lo que no es construible.</target>
        </trans-unit>
        <trans-unit id="47ffe6b9b671e8b4220d15217c304878663344ae" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Reflect&lt;/strong&gt; is a built-in object that provides methods for interceptable JavaScript operations. The methods are the same as those of &lt;a href=&quot;proxy/proxy&quot;&gt;proxy handlers&lt;/a&gt;. &lt;code&gt;Reflect&lt;/code&gt; is not a function object, so it's not constructible.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="363799465d2aa7632d4980182a2fafaaec66a181" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Relation with strict mode&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2968057f98255a54a356baa8a6298169e0b0da1a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Remove an item by index position&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Eliminar un elemento por posici&amp;oacute;n de &amp;iacute;ndice&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="836d4522c55df23783cf3a14d604005a6b553333" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Remove an item from the beginning of an Array&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c6ba0905a651cec43ed2e2b9063c36aa963060e1" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Remove an item from the end of an Array&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6e47fa095321df3a7f10f4fedbd3b9a8987634de" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Remove from the end of an Array&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Quitar del final de una matriz&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="2c08b8bf8fa04b2a3d5c5cdfdce58bcf6945232b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Remove from the front of an Array&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Quitar de la parte frontal de una matriz&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="1dce4b02f92aa1d139f10dc83a34e567ed4967a1" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Remove items from an index position&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Quitar elementos de una posici&amp;oacute;n de &amp;iacute;ndice&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="2659efc4c4a02d37ec8a044e804f7ca9b1c07d17" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Returns a localized string representing the array and its elements. See also &lt;a href=&quot;array/tolocalestring&quot;&gt;&lt;code&gt;Array.prototype.toLocaleString()&lt;/code&gt;&lt;/a&gt;.&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a8d7ecfc95623c2033f63fd590afd75b15836010" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Returns a new &lt;em&gt;array iterator&lt;/em&gt; object that contains the values for each index in the array.&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="50faf647e72a7f4c8c5501075b83bcc0eb62ebd9" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Returns a string representing the array and its elements. See also &lt;a href=&quot;array/tostring&quot;&gt;&lt;code&gt;Array.prototype.toString()&lt;/code&gt;&lt;/a&gt;.&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d0540c505c27086dc25fba77674774ebc1e5e656" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Since ECMAScript 2017:&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="364e95219afdc861c39574e473e8e92a19cd552a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Snippet:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Snippet:&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="50772e896681591579a59c57654fcb7f272b94bb" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Specification&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Specification&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="36538cd5dd56100c3fc7024ecb42c3b35b4d611a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Spread syntax&lt;/strong&gt; (&lt;code&gt;...&lt;/code&gt;) allows an iterable such as an array expression or string to be expanded in places where zero or more arguments (for function calls) or elements (for array literals) are expected, or an object expression to be expanded in places where zero or more key-value pairs (for object literals) are expected.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b1d7a85c5e31389a97538ee981b219beb53784f1" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Spread syntax&lt;/strong&gt; allows an iterable such as an array expression or string to be expanded in places where zero or more arguments (for function calls) or elements (for array literals) are expected, or an object expression to be expanded in places where zero or more key-value pairs (for object literals) are expected.</source>
          <target state="translated">&lt;strong&gt;La sintaxis de propagaci&amp;oacute;n&lt;/strong&gt; permite que un iterable, como una expresi&amp;oacute;n de matriz o cadena, se expanda en lugares donde se esperan cero o m&amp;aacute;s argumentos (para llamadas a funciones) o elementos (para literales de matriz), o que una expresi&amp;oacute;n de objeto se expanda en lugares donde cero o m&amp;aacute;s Se esperan pares clave-valor (para objetos literales).</target>
        </trans-unit>
        <trans-unit id="01304236fb3fbdd845e39d7a2be8f942c7fc22fa" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Strict vs. non-strict mode&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Modo estricto frente a modo no estricto&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="1c9d22131e0b891bce0d6de6b15ad73403e3bc1e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;String generics are non-standard, deprecated and will get removed in the near future&lt;/strong&gt;.</source>
          <target state="translated">&lt;strong&gt;Los gen&amp;eacute;ricos de cadena no son est&amp;aacute;ndar, est&amp;aacute;n obsoletos y se eliminar&amp;aacute;n en un futuro pr&amp;oacute;ximo&lt;/strong&gt; .</target>
        </trans-unit>
        <trans-unit id="900a3612f842cf82393dfc779b0606d885442dff" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Summary&lt;/strong&gt;: Manually updating or setting the constructor can lead to differrent and sometimes confusing consequences. To prevent this, just define the role of &lt;code&gt;constructor&lt;/code&gt; in each specific case. In most cases, &lt;code&gt;constructor&lt;/code&gt; is not used and reassignment of it is not necessary.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f8fcf8539d8a98297d80b69a936a76ae9287a571" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Summary&lt;/strong&gt;: manually updating or setting the constructor can lead to differrent and sometimes confusing consequences. To prevent this just define the role of constructor in each specific case. In most cases constructor is not used and reassignment of it is not necessary.</source>
          <target state="translated">&lt;strong&gt;Resumen&lt;/strong&gt; : actualizar o configurar manualmente el constructor puede tener consecuencias diferentes y, a veces, confusas. Para evitar esto basta con definir el rol de constructor en cada caso espec&amp;iacute;fico. En la mayor&amp;iacute;a de los casos, el constructor no se utiliza y no es necesario reasignarlo.</target>
        </trans-unit>
        <trans-unit id="31a1b77662216c732a1cc2217e29d26879ca9806" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;The constructor function's&lt;/strong&gt; parameters are not enclosed between slashes but do use quotation marks.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1a6cfbd516cc2269ef92aff805f8c3609006b8a3" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;The iterable protocol&lt;/strong&gt; allows JavaScript objects to define or customize their iteration behavior, such as what values are looped over in a &lt;a href=&quot;statements/for...of&quot;&gt;&lt;code&gt;for...of&lt;/code&gt;&lt;/a&gt; construct. Some built-in types are &lt;a href=&quot;#Built-in_iterables&quot;&gt;built-in iterables&lt;/a&gt; with a default iteration behavior, such as &lt;a href=&quot;global_objects/array&quot;&gt;&lt;code&gt;Array&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;global_objects/map&quot;&gt;&lt;code&gt;Map&lt;/code&gt;&lt;/a&gt;, while other types (such as &lt;a href=&quot;global_objects/object&quot;&gt;&lt;code&gt;Object&lt;/code&gt;&lt;/a&gt;) are not.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="27a3bd24feb600ef1f532bf3d1570bac82bef0bc" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;The iterator protocol&lt;/strong&gt; defines a standard way to produce a sequence of values (either finite or infinite), and potentially a return value when all values have been generated.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="08ef9c91b9ae5e2f70c31a181b25e9d9b15ee64b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;The literal notation's&lt;/strong&gt; parameters are enclosed between slashes and do not use quotation marks.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9833331fd9a6aef6d0b22322f7e75ecf6f7892ad" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;This is an &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/MDN/Contribute/Guidelines/Conventions_definitions#Experimental&quot;&gt;experimental technology&lt;/a&gt;&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Esta es una &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/MDN/Contribute/Guidelines/Conventions_definitions#Experimental&quot;&gt;tecnolog&amp;iacute;a experimental.&lt;/a&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="ba6ae1f995b19991f030b63f8e6f6aa7222c4ccf" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;This page describes experimental features.&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="17a05e908ffe0476bab1d69ee8f5ea9d7ca892ad" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Traditional Example:&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="25ecbbdacf3e506b08947cf29bf7c078336b5206" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Traditional functions&lt;/strong&gt; default &lt;code&gt;this&lt;/code&gt; to the window scope:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2bc368e8ba1749caf464eb591527dcf3dfb77e87" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Trailing commas&lt;/strong&gt; (sometimes called &quot;final commas&quot;) can be useful when adding new elements, parameters, or properties to JavaScript code. If you want to add a new property, you can simply add a new line without modifying the previously last line if that line already uses a trailing comma. This makes version-control diffs cleaner and editing code might be less troublesome.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="717bc18ee99931dbee84a9e8cb53beb20c99f5ed" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Usage note:&lt;/strong&gt; The &amp;lt;big&amp;gt; element has been removed in &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Guide/HTML/HTML5&quot;&gt;HTML5&lt;/a&gt; and shouldn't be used anymore. Instead web developers should use &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS&quot;&gt;CSS&lt;/a&gt; properties.</source>
          <target state="translated">&lt;strong&gt;Nota de uso:&lt;/strong&gt; el elemento &amp;lt;big&amp;gt; se ha eliminado en &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Guide/HTML/HTML5&quot;&gt;HTML5&lt;/a&gt; y ya no deber&amp;iacute;a utilizarse. En su lugar, los desarrolladores web deber&amp;iacute;an utilizar propiedades &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS&quot;&gt;CSS&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="348f7621b2818898cce4b82ca02a826dfbbe6c15" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Usage note:&lt;/strong&gt; The &amp;lt;big&amp;gt; element has been removed in &lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Web/Guide/HTML/HTML5&quot;&gt;HTML5&lt;/a&gt; and shouldn't be used anymore. Instead web developers should use &lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Web/CSS&quot;&gt;CSS&lt;/a&gt; properties.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b64d0614cf0f35a92dc16f50aca15eb7c0be0a39" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Usage note:&lt;/strong&gt; The &amp;lt;font&amp;gt; element has been removed in &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Guide/HTML/HTML5&quot;&gt;HTML5&lt;/a&gt; and shouldn't be used anymore. Instead web developers should use &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS&quot;&gt;CSS&lt;/a&gt; properties.</source>
          <target state="translated">&lt;strong&gt;Nota de uso:&lt;/strong&gt; el elemento &amp;lt;font&amp;gt; se ha eliminado en &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Guide/HTML/HTML5&quot;&gt;HTML5&lt;/a&gt; y ya no deber&amp;iacute;a utilizarse. En su lugar, los desarrolladores web deber&amp;iacute;an utilizar propiedades &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS&quot;&gt;CSS&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="e4601d7cd12f611d7b1cb6a36d90b3d601b3b6db" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Usage note:&lt;/strong&gt; The &amp;lt;font&amp;gt; element has been removed in &lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Web/Guide/HTML/HTML5&quot;&gt;HTML5&lt;/a&gt; and shouldn't be used anymore. Instead web developers should use &lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Web/CSS&quot;&gt;CSS&lt;/a&gt; properties.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f325a31580be62078e7fb5fe92896c3171b548f3" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Value&lt;/strong&gt;: there are no values stored in the array Iterator object; instead it stores the address of the array used in its creation and so depends on the values stored in that array.</source>
          <target state="new"/>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
