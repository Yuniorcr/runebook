<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ru" datatype="htmlbody" original="werkzeug">
    <body>
      <group id="werkzeug">
        <trans-unit id="ef1e87c50e226b0afc93b66f349c6de244faa8ce" translate="yes" xml:space="preserve">
          <source>It&amp;rsquo;s possible to create copies using &lt;code&gt;copy.deepcopy&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e0fb06057415c1fa75e854cb2194940c71ff6ad1" translate="yes" xml:space="preserve">
          <source>It&amp;rsquo;s usually more interesting to directly call &lt;a href=&quot;#werkzeug.urls.iri_to_uri&quot;&gt;&lt;code&gt;iri_to_uri()&lt;/code&gt;&lt;/a&gt; which will return a string.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="82b4f628ffcdafff3b6ce14600e21fc7234b845b" translate="yes" xml:space="preserve">
          <source>It&amp;rsquo;s usually more interesting to directly call &lt;a href=&quot;#werkzeug.urls.uri_to_iri&quot;&gt;&lt;code&gt;uri_to_iri()&lt;/code&gt;&lt;/a&gt; which will return a string.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cf139782105c75f9c42f85b8094c9a2a95bb19a4" translate="yes" xml:space="preserve">
          <source>Iter the response encoded with the encoding of the response. If the response object is invoked as WSGI application the return value of this method is used as application iterator unless &lt;a href=&quot;#werkzeug.wrappers.BaseResponse.direct_passthrough&quot;&gt;&lt;code&gt;direct_passthrough&lt;/code&gt;&lt;/a&gt; was activated.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2b3d87be3595a18fd36f2f32e8541825f311a2fa" translate="yes" xml:space="preserve">
          <source>Iterate over all rules and check if the endpoint expects the arguments provided. This is for example useful if you have some URLs that expect a language code and others that do not and you want to wrap the builder a bit so that the current language code is automatically added if not provided but endpoints expect it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a0ea0adfc9f8593a1b6b645b7ff346eaece1df69" translate="yes" xml:space="preserve">
          <source>Iterate over all rules or the rules of an endpoint.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5deee69aee3e4a0bc1f2641ab52a09897a6318db" translate="yes" xml:space="preserve">
          <source>Iterate over all values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="079570280f64505e562f9719ca49d29bdc997504" translate="yes" xml:space="preserve">
          <source>Iterator / Stream Helpers</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="031a4e76f0b39d0df073d934da5fc48da8d737e5" translate="yes" xml:space="preserve">
          <source>JSON</source>
          <target state="translated">JSON</target>
        </trans-unit>
        <trans-unit id="94bf597eaebd2f49b77908b283c86f4c30ebd538" translate="yes" xml:space="preserve">
          <source>Join a base URL and a possibly relative URL to form an absolute interpretation of the latter.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0b501c67fb12be980182a1a9e8d7dbf5212de79f" translate="yes" xml:space="preserve">
          <source>Joins this URL with another one. This is just a convenience function for calling into &lt;a href=&quot;#werkzeug.urls.url_join&quot;&gt;&lt;code&gt;url_join()&lt;/code&gt;&lt;/a&gt; and then parsing the return value again.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6cd64061aeec2dbdd103deecb8d984e1209fefc6" translate="yes" xml:space="preserve">
          <source>Just go to the URL and you should see &amp;ldquo;Hello World!&amp;rdquo;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cef4d57ea90805f58418de9b90233443b1165375" translate="yes" xml:space="preserve">
          <source>Just put this into the constructor:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2262b7f18eef5d55e0df9577a2b3a88712821bbb" translate="yes" xml:space="preserve">
          <source>Just the host including the port if available. See also: &lt;a href=&quot;#werkzeug.wrappers.BaseRequest.trusted_hosts&quot;&gt;&lt;code&gt;trusted_hosts&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b809ddc3ea1391a53c1da30e42e49bec40c51dba" translate="yes" xml:space="preserve">
          <source>Just the host with scheme as IRI. See also: &lt;a href=&quot;#werkzeug.wrappers.BaseRequest.trusted_hosts&quot;&gt;&lt;code&gt;trusted_hosts&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bcf46b974c73ee5662ae1913bbd4d09d9a3b828c" translate="yes" xml:space="preserve">
          <source>Keep in mind that &lt;code&gt;repr()&lt;/code&gt; is also forwarded, so if you want to find out if you are dealing with a proxy you can do an &lt;code&gt;isinstance()&lt;/code&gt; check:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b8947b1eb1c8610cacc2cba0adfa451e24572f5c" translate="yes" xml:space="preserve">
          <source>Keep in mind that the URL will be joined against the URL root of the script so don&amp;rsquo;t use a leading slash on the target URL unless you really mean root of that domain.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="24b9746458dbc5176e8d0a988543a321e25e994f" translate="yes" xml:space="preserve">
          <source>Keep in mind that the error handling is only customizable for all decoding but not encoding. If Werkzeug encounters an encoding error it will raise a &lt;a href=&quot;https://docs.python.org/3/library/exceptions.html#UnicodeEncodeError&quot;&gt;&lt;code&gt;UnicodeEncodeError&lt;/code&gt;&lt;/a&gt;. It&amp;rsquo;s your responsibility to not create data that is not present in the target charset (a non issue with all unicode encodings such as utf-8).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9520f20cf10a30d460e7257d2d2527a654945064" translate="yes" xml:space="preserve">
          <source>Keep in mind that this method might return exception objects, too, so use &lt;code&gt;Response.force_type&lt;/code&gt; to get a response object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f880f5e1b771b9fa35f56300515e2664374462af" translate="yes" xml:space="preserve">
          <source>Keep in mind that this will modify response objects in place if possible!</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c01c1f59a297bacb33b851e5fd36db6676de32d6" translate="yes" xml:space="preserve">
          <source>Keep in mind that you have to pass an environment to &lt;code&gt;get_response()&lt;/code&gt; because some errors fetch additional information from the WSGI environment.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6ac41f62196b09c579b6efd77c5a8b0821fd6334" translate="yes" xml:space="preserve">
          <source>Keyword arguments can specify additional parameters for the header value, with underscores converted to dashes. See &lt;a href=&quot;#werkzeug.datastructures.Headers.add&quot;&gt;&lt;code&gt;add()&lt;/code&gt;&lt;/a&gt; for more information.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bcf8861955aef8b3f8462c29b3fedab1178ccfc8" translate="yes" xml:space="preserve">
          <source>Keyword arguments can specify additional parameters for the header value, with underscores converted to dashes:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="29f4716c338ec605de656a58d37cbfb016b9a2b5" translate="yes" xml:space="preserve">
          <source>Keyword parameters are converted to XML/SGML attributes, positional arguments are used as children. Because Python accepts positional arguments before keyword arguments it&amp;rsquo;s a good idea to use a list with the star-syntax for some children:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4e1ee2d7c5f184b955bf9a3987e1b347a62ad814" translate="yes" xml:space="preserve">
          <source>Lastly we can add a piece of code that will start a local development server with automatic code reloading and a debugger:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="160ec9e644e70766cf13faa46546bcb6eea71f4f" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s create a request object with all the data a typical web browser transmits so that we can play with it:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ba9f3a0b38d816160281cebea832440ad00c77ae" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s start with the first view: the one for new URLs:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ff0ffa1ce4a5de84291301317e862c909cd76061" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s start with the most useless header: the user agent:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9fc9c5a7d8326df046caa8d770d0b0dc0dbc12f4" translate="yes" xml:space="preserve">
          <source>Licensed under the BSD 3-clause License.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="432381007a64227db8776d8e2e7b6b156e3f9b76" translate="yes" xml:space="preserve">
          <source>Like &lt;a href=&quot;#werkzeug.datastructures.Accept&quot;&gt;&lt;code&gt;Accept&lt;/code&gt;&lt;/a&gt; but with normalization for charsets.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0fa643b82aa8d81c86882748ac3b1d358fe8801e" translate="yes" xml:space="preserve">
          <source>Like &lt;a href=&quot;#werkzeug.datastructures.Accept&quot;&gt;&lt;code&gt;Accept&lt;/code&gt;&lt;/a&gt; but with normalization for language tags.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5ac897f624d585f254dc16f3fe12a69cd83402ae" translate="yes" xml:space="preserve">
          <source>Like &lt;a href=&quot;#werkzeug.datastructures.Accept&quot;&gt;&lt;code&gt;Accept&lt;/code&gt;&lt;/a&gt; but with special methods and behavior for mimetypes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="df35c6836629e60f63534a8b31c7a56e0cf2cc5c" translate="yes" xml:space="preserve">
          <source>Like &lt;a href=&quot;#werkzeug.datastructures.FileStorage.content_type&quot;&gt;&lt;code&gt;content_type&lt;/code&gt;&lt;/a&gt;, but without parameters (eg, without charset, type etc.) and always lowercase. For example if the content type is &lt;code&gt;text/HTML; charset=utf-8&lt;/code&gt; the mimetype would be &lt;code&gt;'text/html'&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4689d4fbb3a7a12e5a5ce5a63653f345af4f319f" translate="yes" xml:space="preserve">
          <source>Like &lt;a href=&quot;#werkzeug.datastructures.HeaderSet.remove&quot;&gt;&lt;code&gt;remove()&lt;/code&gt;&lt;/a&gt; but ignores errors.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9264ad8c51bc87af567bb5a22d7c04c579bea204" translate="yes" xml:space="preserve">
          <source>Like &lt;a href=&quot;#werkzeug.routing.Map.bind&quot;&gt;&lt;code&gt;bind()&lt;/code&gt;&lt;/a&gt; but you can pass it an WSGI environment and it will fetch the information from that dictionary. Note that because of limitations in the protocol there is no way to get the current subdomain and real &lt;code&gt;server_name&lt;/code&gt; from the environment. If you don&amp;rsquo;t provide it, Werkzeug will use &lt;code&gt;SERVER_NAME&lt;/code&gt; and &lt;code&gt;SERVER_PORT&lt;/code&gt; (or &lt;code&gt;HTTP_HOST&lt;/code&gt; if provided) as used &lt;code&gt;server_name&lt;/code&gt; with disabled subdomain feature.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e72b502ec9d725056ae0999f429b7a827d3592e6" translate="yes" xml:space="preserve">
          <source>Like &lt;a href=&quot;#werkzeug.security.pbkdf2_bin&quot;&gt;&lt;code&gt;pbkdf2_bin()&lt;/code&gt;&lt;/a&gt;, but returns a hex-encoded string.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cdbe6444f15c5d676a3b1c10988b585fff5634fb" translate="yes" xml:space="preserve">
          <source>Like &lt;a href=&quot;#werkzeug.urls.url_encode&quot;&gt;&lt;code&gt;url_encode()&lt;/code&gt;&lt;/a&gt; but writes the results to a stream object. If the stream is &lt;code&gt;None&lt;/code&gt; a generator over all encoded pairs is returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="18640493f9b32be3dd5599085686dcd0352d61b5" translate="yes" xml:space="preserve">
          <source>Like &lt;a href=&quot;#werkzeug.wrappers.BaseRequest&quot;&gt;&lt;code&gt;BaseRequest&lt;/code&gt;&lt;/a&gt; which object is lacking a lot of functionality implemented in mixins. This gives you a better control about the actual API of your response objects, so you can create subclasses and add custom functionality. A full featured response object is available as &lt;a href=&quot;#werkzeug.wrappers.Response&quot;&gt;&lt;code&gt;Response&lt;/code&gt;&lt;/a&gt; which implements a couple of useful mixins.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="259eedd7655d8fdb82a803256a108c3ccedabfde" translate="yes" xml:space="preserve">
          <source>Like &lt;a href=&quot;#werkzeug.wrappers.BaseRequest.url&quot;&gt;&lt;code&gt;url&lt;/code&gt;&lt;/a&gt; but without the querystring See also: &lt;a href=&quot;#werkzeug.wrappers.BaseRequest.trusted_hosts&quot;&gt;&lt;code&gt;trusted_hosts&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e39ce5174b63e7f68037760e94b6fdfc21767536" translate="yes" xml:space="preserve">
          <source>Like &lt;a href=&quot;#werkzeug.wrappers.CommonRequestDescriptorsMixin.content_type&quot;&gt;&lt;code&gt;content_type&lt;/code&gt;&lt;/a&gt;, but without parameters (eg, without charset, type etc.) and always lowercase. For example if the content type is &lt;code&gt;text/HTML; charset=utf-8&lt;/code&gt; the mimetype would be &lt;code&gt;'text/html'&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0bfb0f81a9581705fee8a677d3878d6e8f435172" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;Subdomain&lt;/code&gt; but prefixes the URL rule with a given string:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8aa7b83d8274a0cd0d03b98f5cf2b7deae3080fc" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;environ_property&lt;/code&gt; but for headers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c26e7f43b8ef108a113c7046428315073e73c604" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;make_middleware&lt;/code&gt; but for decorating functions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="80161217b63642808ba49ee8865759274b56dedc" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;setdefault&lt;/code&gt; but sets multiple values. The list returned is not a copy, but the list that is actually used internally. This means that you can put new values into the dict by appending items to the list:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3d348e22e3f2c6d4f24c4f1b9272ffd81d426cb5" translate="yes" xml:space="preserve">
          <source>Like &lt;em&gt;413&lt;/em&gt; but for too long URLs.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0efceab6c093a228d28ee83891952f2f66a51f19" translate="yes" xml:space="preserve">
          <source>Like open but method is enforced to DELETE.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="17f587e8fe8c386cc1b1ed40494b2e574c29a372" translate="yes" xml:space="preserve">
          <source>Like open but method is enforced to GET.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4541033a9c771d1ba568bbb44a7d86fe2c42e753" translate="yes" xml:space="preserve">
          <source>Like open but method is enforced to HEAD.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e08692c90625ce964bfb9964a3cdf7ea5ac1cc84" translate="yes" xml:space="preserve">
          <source>Like open but method is enforced to OPTIONS.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c427a41401d1e9c8e6960c93b815c9388407c5e9" translate="yes" xml:space="preserve">
          <source>Like open but method is enforced to PATCH.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="be3d9707a69defb6b39f28f111633059afd3524f" translate="yes" xml:space="preserve">
          <source>Like open but method is enforced to POST.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3ee0469c0587dd2436a460fcf1ba0e4756369fb6" translate="yes" xml:space="preserve">
          <source>Like open but method is enforced to PUT.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4321a276ef47951ba8d4c7e63c371a50589da3bd" translate="yes" xml:space="preserve">
          <source>Like open but method is enforced to TRACE.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="442bdc1c1815746b22c0eaadb0a06e7ab2770eca" translate="yes" xml:space="preserve">
          <source>Like the default &lt;a href=&quot;#werkzeug.routing.UnicodeConverter&quot;&gt;&lt;code&gt;UnicodeConverter&lt;/code&gt;&lt;/a&gt;, but it also matches slashes. This is useful for wikis and similar applications:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="56ffe390768caf820e244a062a4fd773dea23dde" translate="yes" xml:space="preserve">
          <source>Limiting Request Data</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3abd95ca5d200fd6a5761077894f54cf1d21207d" translate="yes" xml:space="preserve">
          <source>Linux / OS X</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f6a8317b06c8e5c46ee18649da6a599876fea033" translate="yes" xml:space="preserve">
          <source>List of charsets this client supports as &lt;a href=&quot;../datastructures/index#werkzeug.datastructures.CharsetAccept&quot;&gt;&lt;code&gt;CharsetAccept&lt;/code&gt;&lt;/a&gt; object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="71959995e146ecc63c2d323d87e44c167a734f3d" translate="yes" xml:space="preserve">
          <source>List of encodings this client accepts. Encodings in a HTTP term are compression encodings such as gzip. For charsets have a look at &lt;code&gt;accept_charset&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e162d5ae75bca38f5017612ca700dad57ba437fd" translate="yes" xml:space="preserve">
          <source>List of languages this client accepts as &lt;a href=&quot;../datastructures/index#werkzeug.datastructures.LanguageAccept&quot;&gt;&lt;code&gt;LanguageAccept&lt;/code&gt;&lt;/a&gt; object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ff0de39a1355b4e6787d5a94b64586aa646c6bab" translate="yes" xml:space="preserve">
          <source>List of mimetypes this client supports as &lt;a href=&quot;../datastructures/index#werkzeug.datastructures.MIMEAccept&quot;&gt;&lt;code&gt;MIMEAccept&lt;/code&gt;&lt;/a&gt; object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="57c42222720e5f496a8df0809680b4294f03d281" translate="yes" xml:space="preserve">
          <source>Living on the edge</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ebf06074592c07ce73d8a5fbca6f6de48be48174" translate="yes" xml:space="preserve">
          <source>Loading Contexts by Hand</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b24351432a61fb59e05fe76a6b7cd0595e409c00" translate="yes" xml:space="preserve">
          <source>Local objects cannot manage themselves. For that you need a local manager. You can pass a local manager multiple locals or add them later by appending them to &lt;code&gt;manager.locals&lt;/code&gt;. Every time the manager cleans up, it will clean up all the data left in the locals for this context.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="57003616863fe634c645e342ee9080681e419c5f" translate="yes" xml:space="preserve">
          <source>Logging</source>
          <target state="translated">Logging</target>
        </trans-unit>
        <trans-unit id="17a3f2193dbd7ff687102e9b19c740767f5faad7" translate="yes" xml:space="preserve">
          <source>Look at the implementation in the example dictionary in the Werkzeug repository to see a version of this tutorial with some small refinements such as a custom 404 page.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b43a91d19d90f76c3f9a938fced39fdf0cb973c4" translate="yes" xml:space="preserve">
          <source>Make sure to import all objects from the places the documentation suggests. It is theoretically possible in some situations to import objects from different locations but this is not supported.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2fbc71c8b6a1ac43172e23bcfb47a09d8623abc0" translate="yes" xml:space="preserve">
          <source>Make sure to set the executable bit on that file so that the servers can execute it:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4328a7313dce8cd510d42b8e81a2f3a8e6fd0992" translate="yes" xml:space="preserve">
          <source>Make the response conditional to the request. This method works best if an etag was defined for the response already. The &lt;code&gt;add_etag&lt;/code&gt; method can be used to do that. If called without etag just the date header is set.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9c5fe4f2362ae510eae7df6c5ef5c59356dc7ad2" translate="yes" xml:space="preserve">
          <source>Manually clean up the data in the locals for this context. Call this at the end of the request or use &lt;code&gt;make_middleware()&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6e161577df9a95b5b77d78037b31080ac1c820f8" translate="yes" xml:space="preserve">
          <source>Many HTTP servers merge consecutive slashes into one when receiving requests. If &lt;code&gt;merge_slashes&lt;/code&gt; is enabled (the default), rules will merge slashes in non-variable parts when matching and building. Visiting a URL with consecutive slashes will redirect to the URL with slashes merged. If you want to disable &lt;code&gt;merge_slashes&lt;/code&gt; for a &lt;a href=&quot;#werkzeug.routing.Rule&quot;&gt;&lt;code&gt;Rule&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;#werkzeug.routing.Map&quot;&gt;&lt;code&gt;Map&lt;/code&gt;&lt;/a&gt;, you&amp;rsquo;ll also need to configure your web server appropriately.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9f8d1874416f45ca79302ab28f6f3162d58e3a97" translate="yes" xml:space="preserve">
          <source>Many people prefer using a standalone Python HTTP server and proxying that server via nginx, Apache etc.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a0246a8b93e711e3ef7caad70d2c3d01d3fa3eb8" translate="yes" xml:space="preserve">
          <source>Many web applications utilize multiple subdomains. This can be a bit tricky to simulate locally. Fortunately there is the &lt;a href=&quot;https://en.wikipedia.org/wiki/Hosts_file&quot;&gt;hosts file&lt;/a&gt; that can be used to assign the local computer multiple names.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3dfd02a92c671ddfe4a6659ecc348f42f4d19d17" translate="yes" xml:space="preserve">
          <source>Maps request attributes to environment variables. This works not only for the Werzeug request object, but also any other class with an environ attribute:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f5ec494ed3158189bf7c33df13de972d3d567076" translate="yes" xml:space="preserve">
          <source>Maps, Rules and Adapters</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="405f7949aff3907791be42a02f866b138c93dedf" translate="yes" xml:space="preserve">
          <source>Marks a function as responder. Decorate a function with it and it will automatically call the return value as WSGI application.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e142457ef890e531762f2fb9659f7d13cf969925" translate="yes" xml:space="preserve">
          <source>Matches one of the items provided. Items can either be Python identifiers or strings:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eb8978ed84b5906ad4191a0b252828be64701bfa" translate="yes" xml:space="preserve">
          <source>Middleware</source>
          <target state="translated">Middleware</target>
        </trans-unit>
        <trans-unit id="66703260a7ca78c9c17f93f8c025f07a88b7305e" translate="yes" xml:space="preserve">
          <source>Missing EOF Marker on Input Stream</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fe3c06b1bf6eb17aa321e0c1fb65d8b9e258ddb7" translate="yes" xml:space="preserve">
          <source>Mixin Classes</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ad80d17f7e2ef1ed27eb75d85862202871defd7a" translate="yes" xml:space="preserve">
          <source>Mixin for &lt;a href=&quot;#werkzeug.wrappers.BaseResponse&quot;&gt;&lt;code&gt;BaseResponse&lt;/code&gt;&lt;/a&gt; subclasses. Classes that inherit from this mixin will automatically get a &lt;a href=&quot;#werkzeug.wrappers.ResponseStreamMixin.stream&quot;&gt;&lt;code&gt;stream&lt;/code&gt;&lt;/a&gt; property that provides a write-only interface to the response iterable.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5900ab8283918a390aad0127b429e115378a814f" translate="yes" xml:space="preserve">
          <source>Mixin to parse &lt;code&gt;data&lt;/code&gt; as JSON. Can be mixed in for both &lt;a href=&quot;#werkzeug.wrappers.Request&quot;&gt;&lt;code&gt;Request&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#werkzeug.wrappers.Response&quot;&gt;&lt;code&gt;Response&lt;/code&gt;&lt;/a&gt; classes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b0bbf96cdc7be23f9101eb0dff0e1435e7388b2e" translate="yes" xml:space="preserve">
          <source>Modern web applications transmit a lot more than multipart form data or url encoded data. To extend the capabilities, subclass &lt;code&gt;BaseRequest&lt;/code&gt; or &lt;code&gt;Request&lt;/code&gt; and add or extend methods.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="08f2509a13211b348d310ebb9ec9bdad5adab221" translate="yes" xml:space="preserve">
          <source>More information about file wrappers are available in &lt;a href=&quot;https://www.python.org/dev/peps/pep-0333&quot; id=&quot;index-0&quot;&gt;&lt;strong&gt;PEP 333&lt;/strong&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="01a006b26641cf71e16eafbde059d53fa5054710" translate="yes" xml:space="preserve">
          <source>Mutability and Reusability of Wrappers</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="33a3014dcb0a844a90ca744fb5791e00cef94ab3" translate="yes" xml:space="preserve">
          <source>Nested multipart is not currently supported (Werkzeug 0.9), but it isn&amp;rsquo;t used by any of the modern web browsers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2dcde8ec0560b6129ac7ceb94e6b76437cebda2e" translate="yes" xml:space="preserve">
          <source>New in version 0.10.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="efa890c292f4c2c9dd8ed004b1eb6913b317e668" translate="yes" xml:space="preserve">
          <source>New in version 0.10: Improved the reloader and added support for changing the backend through the &lt;code&gt;reloader_type&lt;/code&gt; parameter. See &lt;a href=&quot;#reloader&quot;&gt;Reloader&lt;/a&gt; for more information.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="66ee92bb81502405c10e37afde172f538939d0dd" translate="yes" xml:space="preserve">
          <source>New in version 0.10: The class used for the Response object can now be passed in.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e797fa344fcf17efa435eb9b4fe47e604c22b9a8" translate="yes" xml:space="preserve">
          <source>New in version 0.11.10: added support for the &lt;code&gt;cap_at_buffer&lt;/code&gt; parameter.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dc28b70929f839a69ed3e45ea011105ea33d52a9" translate="yes" xml:space="preserve">
          <source>New in version 0.13.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="52ebd0001be9ad2ddaeba3e98fe57c162ffbf813" translate="yes" xml:space="preserve">
          <source>New in version 0.14.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5ab54feda6dd7a7921e1dd2257913369348284b8" translate="yes" xml:space="preserve">
          <source>New in version 0.14: The &lt;code&gt;mimetype&lt;/code&gt; parameter was added.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="73af4998c8d20c7743147253e8c7d8a51d34634f" translate="yes" xml:space="preserve">
          <source>New in version 0.15.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="779edf94f3feed9a20e803d68a8b053b909a94ff" translate="yes" xml:space="preserve">
          <source>New in version 0.15: Added &lt;code&gt;filename_format&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="67acc35e09f378a7c968bf18435af06a0975d318" translate="yes" xml:space="preserve">
          <source>New in version 0.15: The &lt;code&gt;json&lt;/code&gt; param and &lt;a href=&quot;#werkzeug.test.EnvironBuilder.json_dumps&quot;&gt;&lt;code&gt;json_dumps()&lt;/code&gt;&lt;/a&gt; method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="28682906f64b28c4c6884c42197bb9773a752ef9" translate="yes" xml:space="preserve">
          <source>New in version 0.15: The &lt;code&gt;json&lt;/code&gt; parameter.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="072f6c81afafa196b204be1ce2c7981ef607c011" translate="yes" xml:space="preserve">
          <source>New in version 0.15: The &lt;code&gt;signed&lt;/code&gt; parameter.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="190b77939a982bd5d3aacb9763a44069642085ce" translate="yes" xml:space="preserve">
          <source>New in version 0.15: The environ has keys &lt;code&gt;REQUEST_URI&lt;/code&gt; and &lt;code&gt;RAW_URI&lt;/code&gt; containing the path before perecent-decoding. This is not part of the WSGI PEP, but many WSGI servers include it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cea1dca03d6798cd80aa1f533f7dac4cb6a84f09" translate="yes" xml:space="preserve">
          <source>New in version 0.4.1: keyword arguments were added for &lt;a href=&quot;https://docs.python.org/3/library/wsgiref.html#module-wsgiref&quot;&gt;&lt;code&gt;wsgiref&lt;/code&gt;&lt;/a&gt; compatibility.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1c41c95cafce09fc00bdb02d31fa4b185ade21eb" translate="yes" xml:space="preserve">
          <source>New in version 0.5.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="edfb7ca4c9de62a20682db451f07ba313b098dda" translate="yes" xml:space="preserve">
          <source>New in version 0.5.1: The optional &lt;code&gt;silent&lt;/code&gt; flag was added.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ad749f8993fa6c71e951980105a52ea952861c20" translate="yes" xml:space="preserve">
          <source>New in version 0.5: &lt;code&gt;sort&lt;/code&gt; and &lt;code&gt;key&lt;/code&gt; were added.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7cbefd5dc43815330981a042765e0c47a477cddf" translate="yes" xml:space="preserve">
          <source>New in version 0.5: &lt;code&gt;sort&lt;/code&gt;, &lt;code&gt;key&lt;/code&gt;, and &lt;code&gt;separator&lt;/code&gt; were added.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0958499f2b026b0a92f537334be4b2c571ef2994" translate="yes" xml:space="preserve">
          <source>New in version 0.5: &lt;code&gt;static_files&lt;/code&gt; was added to simplify serving of static files as well as &lt;code&gt;passthrough_errors&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d16b88e11ff35b23386fd96a9dd9f176dc7148ea" translate="yes" xml:space="preserve">
          <source>New in version 0.5: &lt;code&gt;use_cookies&lt;/code&gt; is new in this version. Older versions did not provide builtin cookie support.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b1f5a5733ecc7d59e572c31f28802304f585ff9e" translate="yes" xml:space="preserve">
          <source>New in version 0.5: In previous versions a &lt;code&gt;CacheControl&lt;/code&gt; class existed that was used both for request and response.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8f212abff1331eba6af7e44d7faa624fbbeb44a2" translate="yes" xml:space="preserve">
          <source>New in version 0.5: The &lt;code&gt;cls&lt;/code&gt; was added. If not specified an immutable &lt;a href=&quot;../datastructures/index#werkzeug.datastructures.RequestCacheControl&quot;&gt;&lt;code&gt;RequestCacheControl&lt;/code&gt;&lt;/a&gt; is returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2079037c82a2614ad924acf3191153ee1bf865cc" translate="yes" xml:space="preserve">
          <source>New in version 0.5: The &lt;code&gt;max_form_memory_size&lt;/code&gt;, &lt;code&gt;max_content_length&lt;/code&gt; and &lt;code&gt;cls&lt;/code&gt; parameters were added.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4f33d48a116e87598f363ffc066b970e1a01cbfa" translate="yes" xml:space="preserve">
          <source>New in version 0.6.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dac87418299ab4d0c48adb9556603975b601af20" translate="yes" xml:space="preserve">
          <source>New in version 0.6.1.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1579d5397e7bc710bc6b1a55739f22f74e31e8d7" translate="yes" xml:space="preserve">
          <source>New in version 0.6.2: That attribute was previously called &lt;code&gt;implicit_seqence_conversion&lt;/code&gt;. (Notice the typo). If you did use this feature, you have to adapt your code to the name change.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1fad9999c523976ca6d53b9385dd2be186c6cd4d" translate="yes" xml:space="preserve">
          <source>New in version 0.6: Added &lt;code&gt;fallback_mimetype&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="69b9bb60064fe5e556ebbf58400ea605b5a59414" translate="yes" xml:space="preserve">
          <source>New in version 0.6: Added &lt;code&gt;return_rule&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="40a1e630f4af3909c3919a3f4d928915a82ca9a3" translate="yes" xml:space="preserve">
          <source>New in version 0.6: In previous versions you had to use the item-lookup syntax (eg: &lt;code&gt;obj[key]&lt;/code&gt; instead of &lt;code&gt;obj.quality(key)&lt;/code&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2dcc1ba7fc59a7f4d73841ce91852405e1848933" translate="yes" xml:space="preserve">
          <source>New in version 0.6: The location can now be a unicode string that is encoded using the &lt;code&gt;iri_to_uri()&lt;/code&gt; function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6b77fb4f3e6789965b2e2bb8dbb56a4ac2f05928" translate="yes" xml:space="preserve">
          <source>New in version 0.6: support for SSL was added.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="56dc526011cc549956e29f3945f2db60cff7fac9" translate="yes" xml:space="preserve">
          <source>New in version 0.6: the &lt;code&gt;append_unknown&lt;/code&gt; parameter was added.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="14ad4031ecfa25c70438a769924a97f361e055c3" translate="yes" xml:space="preserve">
          <source>New in version 0.7.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d4460d5c5e579e5456328ff7d65de682c52b2a4c" translate="yes" xml:space="preserve">
          <source>New in version 0.7: Added &lt;code&gt;alias&lt;/code&gt; and &lt;code&gt;host&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="32ef3c0e85230898f1e36b75e85b192580ebffe2" translate="yes" xml:space="preserve">
          <source>New in version 0.7: Added &lt;code&gt;query_args&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="48e2833e629833b7582fc86a591171cccb4a2aa1" translate="yes" xml:space="preserve">
          <source>New in version 0.8.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8935ae7249b3d73a41c25ecc46e0ee48572b38a6" translate="yes" xml:space="preserve">
          <source>New in version 0.8: Added support for automatically loading a SSL context from certificate file and private key.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e0798e2f31cc8f6f05534a395874ff516c037ea2" translate="yes" xml:space="preserve">
          <source>New in version 0.9.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="83db800b53c46bb43ba5b115b29a49af793851f7" translate="yes" xml:space="preserve">
          <source>New in version 0.9.2: The &lt;code&gt;unsafe&lt;/code&gt; parameter was added.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eea4f99cc7998a102d5d32141df9fa9378535de5" translate="yes" xml:space="preserve">
          <source>New in version 0.9: Added &lt;code&gt;restrictions&lt;/code&gt; and &lt;code&gt;profile_dir&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2c0d600590f8b0ce33d85ea28426b4a4dff6632a" translate="yes" xml:space="preserve">
          <source>New in version 0.9: Added command-line interface.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="98d833b24b884bd3f1f0b31aae2a366c1ad1f6e4" translate="yes" xml:space="preserve">
          <source>New in version 0.9: Added support for &lt;code&gt;as_bytes&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fb6298bdcb811c0bd40cdb35f512e7ccc2880e8a" translate="yes" xml:space="preserve">
          <source>New in version 0.9: Can now be used in a with statement.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fded4940f942d26e5a18122ea8c39f5f683a90b4" translate="yes" xml:space="preserve">
          <source>New in version 0.9: added support for iterators as input stream.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8b2f96e51721073c2329a19baf189725a5445aae" translate="yes" xml:space="preserve">
          <source>New in version 1.0.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="78d562b48756dc84698a0f57a25ff1e141854239" translate="yes" xml:space="preserve">
          <source>New in version 1.0: Added &lt;code&gt;merge_slashes&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a81e9ce0ded2d82e4a4819a738c60914477f3d29" translate="yes" xml:space="preserve">
          <source>New in version 1.0: Added &lt;code&gt;websocket&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0877340a361d13dda91cae855c93942730c81f17" translate="yes" xml:space="preserve">
          <source>Next up is routing. Routing is the process of matching and parsing the URL to something we can use. Werkzeug provides a flexible integrated routing system which we can use for that. The way it works is that you create a &lt;a href=&quot;../routing/index#werkzeug.routing.Map&quot;&gt;&lt;code&gt;Map&lt;/code&gt;&lt;/a&gt; instance and add a bunch of &lt;a href=&quot;../routing/index#werkzeug.routing.Rule&quot;&gt;&lt;code&gt;Rule&lt;/code&gt;&lt;/a&gt; objects. Each rule has a pattern it will try to match the URL against and an &amp;ldquo;endpoint&amp;rdquo;. The endpoint is typically a string and can be used to uniquely identify the URL. We could also use this to automatically reverse the URL, but that&amp;rsquo;s not what we will do in this tutorial.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5fbc663eaabfa12ca2eb027714d53ef99477c201" translate="yes" xml:space="preserve">
          <source>Normalization is available, so you can safely use alternative forms to perform containment checking:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="020aecf60ecf09310e067e2750dcf3cf52458c03" translate="yes" xml:space="preserve">
          <source>Normally the WSGI environment is provided by the WSGI gateway with the incoming data as part of it. If you want to generate such fake-WSGI environments for unittesting you might want to use the &lt;code&gt;create_environ()&lt;/code&gt; function or the &lt;code&gt;EnvironBuilder&lt;/code&gt; instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2c924e3088204ee77ba681f72be3444357932fca" translate="yes" xml:space="preserve">
          <source>Note</source>
          <target state="translated">Note</target>
        </trans-unit>
        <trans-unit id="b3394a6cf83e24318a7e863e7da9b8fb3d2161af" translate="yes" xml:space="preserve">
          <source>Note on WSGI compliance</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9b960d595849fe231f53210626e35448549b75d1" translate="yes" xml:space="preserve">
          <source>Note that &lt;a href=&quot;#werkzeug.wrappers.BaseRequest.files&quot;&gt;&lt;code&gt;files&lt;/code&gt;&lt;/a&gt; will only contain data if the request method was POST, PUT or PATCH and the &lt;code&gt;&amp;lt;form&amp;gt;&lt;/code&gt; that posted to the request had &lt;code&gt;enctype=&quot;multipart/form-data&quot;&lt;/code&gt;. It will be empty otherwise.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fa0c39cc4f72e142ab4db635d855de230d0405b2" translate="yes" xml:space="preserve">
          <source>Note that if the form data was already parsed this method will not return anything as form data parsing does not cache the data like this method does. To implicitly invoke form data parsing function set &lt;code&gt;parse_form_data&lt;/code&gt; to &lt;code&gt;True&lt;/code&gt;. When this is done the return value of this method will be an empty string if the form parser handles the data. This generally is not necessary as if the whole data is cached (which is the default) the form parser will used the cached data to parse the form data. Please be generally aware of checking the content length first in any case before calling this method to avoid exhausting server memory.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2b07203b0b1d1869c44af05b1590322bc0f9dc0f" translate="yes" xml:space="preserve">
          <source>Note that local objects cannot manage themselves, for that you need a local manager. You can pass a local manager multiple locals or add additionals later by appending them to &lt;code&gt;manager.locals&lt;/code&gt; and every time the manager cleans up it will clean up all the data left in the locals for this context.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c488f08958e4556b15699ad6a45bf395039277ff" translate="yes" xml:space="preserve">
          <source>Note that the string returned might contain unicode characters as the representation is an IRI not an URI. If you need an ASCII only representation you can use the &lt;a href=&quot;../urls/index#werkzeug.urls.iri_to_uri&quot;&gt;&lt;code&gt;iri_to_uri()&lt;/code&gt;&lt;/a&gt; function:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d145ab34b04b31c59a5264307986d806811f4e60" translate="yes" xml:space="preserve">
          <source>Now let&amp;rsquo;s get right into it and create a module for our application. Let&amp;rsquo;s create a file called &lt;code&gt;shortly.py&lt;/code&gt; in the &lt;code&gt;shortly&lt;/code&gt; folder. At first we will need a bunch of imports. I will pull in all the imports here, even if they are not used right away, to keep it from being confusing:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fd7088de84dbbf027544c216e2185c33bd7a3fad" translate="yes" xml:space="preserve">
          <source>Now that we have the basic application class, we can make the constructor do something useful and provide a few helpers on there that can come in handy. We will need to be able to render templates and connect to redis, so let&amp;rsquo;s extend the class a bit:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="59c1903063e4eccf5dabe0361ea475d572358889" translate="yes" xml:space="preserve">
          <source>Now the rule &lt;code&gt;'blog/show'&lt;/code&gt; matches &lt;code&gt;/blog/entry/&amp;lt;entry_slug&amp;gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ddcceaf5040b56a5ae0ce9e6ff460f6fbcfdc0e4" translate="yes" xml:space="preserve">
          <source>Now this tuple can be passed as &lt;code&gt;ssl_context&lt;/code&gt; to the &lt;a href=&quot;#werkzeug.serving.run_simple&quot;&gt;&lt;code&gt;run_simple()&lt;/code&gt;&lt;/a&gt; method:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="49b62159361fab57e562a986764bc1b6f8ed4b00" translate="yes" xml:space="preserve">
          <source>Now we can access the URL parameters easily:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8ed8bca009bc34c9cb61bf55e17c4e32c7494cb5" translate="yes" xml:space="preserve">
          <source>Now we have an environment to play around:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b7b2e4c0ef1670a6ed511c15cce2d0f4b3f648bf" translate="yes" xml:space="preserve">
          <source>Now you can access the important variables and Werkzeug will parse them for you and decode them where it makes sense. The default charset for requests is set to &lt;code&gt;utf-8&lt;/code&gt; but you can change that by subclassing &lt;code&gt;Request&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="96698cd7621210005cd5a6b325f2953b341144ab" translate="yes" xml:space="preserve">
          <source>Now you can continue to &lt;a href=&quot;#install-create-env&quot;&gt;Create an environment&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ca0db77d82d59259781cdabeed82dfdf854cef67" translate="yes" xml:space="preserve">
          <source>Now you should be able to execute the file with &lt;code&gt;python&lt;/code&gt; and see a server on your local machine:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8a58d12f37a1291bb7759cae5f07ed959f63dc87" translate="yes" xml:space="preserve">
          <source>Often people speak of MVC (Model, View, Controller) when developing web applications. However, the Django framework coined MTV (Model, Template, View) which basically means the same but reduces the concept to the data model, a function that processes data from the request and the database and renders a template.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4837353972f268f9ba4abfc902240e5f4ac85f34" translate="yes" xml:space="preserve">
          <source>On FreeBSD install &lt;code&gt;mod_wsgi&lt;/code&gt; by compiling the &lt;code&gt;www/mod_wsgi&lt;/code&gt; port or by using pkg_add:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bfa5971ae042ceae06c62ade85603875b16d6e90" translate="yes" xml:space="preserve">
          <source>On Linux, virtualenv is provided by your package manager:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4dd972f4530a978300884674b9bdf9d03adbe6fc" translate="yes" xml:space="preserve">
          <source>On Python 3 the return value of this function will be a unicode string, on Python 2 it will be a native string. In both cases the return value is usually restricted to ascii as the vast majority of values are properly escaped, but that is no guarantee. If a unicode string is returned it&amp;rsquo;s tunneled through latin1 as required by PEP 3333.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f4c7dbe2053d75aa8f86ca6e7ee0378cb6995ed7" translate="yes" xml:space="preserve">
          <source>On Windows, as an administrator:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="55b56364276b5f7e47e7f031287b139fc5b947d5" translate="yes" xml:space="preserve">
          <source>On Windows:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3929541a6464ec76bc27b34230a863616c189414" translate="yes" xml:space="preserve">
          <source>On operating systems that support ipv6 and have it configured such as modern Linux systems, OS X 10.4 or higher as well as Windows Vista some browsers can be painfully slow if accessing your local server. The reason for this is that sometimes &amp;ldquo;localhost&amp;rdquo; is configured to be available on both ipv4 and ipv6 sockets and some browsers will try to access ipv6 first and then ipv4.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5c729f6c0f82b9ef5bf8a247b6150c0d04f615eb" translate="yes" xml:space="preserve">
          <source>On windows systems the function also makes sure that the file is not named after one of the special device files.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1b606402ebaf4cd4e8e0a818d339d99095a103fe" translate="yes" xml:space="preserve">
          <source>Once enabled and an error happens during a request you will see a detailed traceback instead of a generic &amp;ldquo;internal server error&amp;rdquo;. The traceback is still output to the terminal as well.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7346e4d45825ec177eaaa77f3cf50927846f5271" translate="yes" xml:space="preserve">
          <source>Optional dependencies</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0b9e87babc5454499f427cbca037dab106fe3532" translate="yes" xml:space="preserve">
          <source>Optionally a list of hosts that is trusted by this request. By default all hosts are trusted which means that whatever the client sends the host is will be accepted.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="18637d107488b5cb30c617b10d3fa44f312e03a0" translate="yes" xml:space="preserve">
          <source>Optionally, verify that the host is trusted using &lt;a href=&quot;#werkzeug.wsgi.host_is_trusted&quot;&gt;&lt;code&gt;host_is_trusted()&lt;/code&gt;&lt;/a&gt; and raise a &lt;a href=&quot;../exceptions/index#werkzeug.exceptions.SecurityError&quot;&gt;&lt;code&gt;SecurityError&lt;/code&gt;&lt;/a&gt; if it is not.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d5d9c29893898f6e9242ad7ecf49355e61672d6b" translate="yes" xml:space="preserve">
          <source>Or without a wrapper defined:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8d7bf5bf136e81f9388c1f4eca050d6d94e965d7" translate="yes" xml:space="preserve">
          <source>Others</source>
          <target state="translated">Others</target>
        </trans-unit>
        <trans-unit id="7333f4a7bf31ccfdbb5dc18e2179555f50ce400e" translate="yes" xml:space="preserve">
          <source>Outputs a string in the format &lt;code&gt;Wdy, DD Mon YYYY HH:MM:SS GMT&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2d36f6081cabf381aa825c28877fabb8999f9bd7" translate="yes" xml:space="preserve">
          <source>Outputs a string in the format &lt;code&gt;Wdy, DD-Mon-YYYY HH:MM:SS GMT&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4b7a9c4d7181a0e14c93d6f3f6df854f9d311b6d" translate="yes" xml:space="preserve">
          <source>Override &lt;code&gt;Map.merge_slashes&lt;/code&gt; for this rule.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="860177fc62f34a194e41d355d195f8b4315c4252" translate="yes" xml:space="preserve">
          <source>Override the &lt;code&gt;Map&lt;/code&gt; setting for &lt;code&gt;strict_slashes&lt;/code&gt; only for this rule. If not specified the &lt;code&gt;Map&lt;/code&gt; setting is used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="087b29bae800a20fcc30aa1456d893c778c907cc" translate="yes" xml:space="preserve">
          <source>Packages are not returned unless &lt;code&gt;include_packages&lt;/code&gt; is &lt;code&gt;True&lt;/code&gt;. This can also recursively list modules but in that case it will import all the packages to get the correct load path of that module.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="381c775599d6e4185d4410725809e360928357cd" translate="yes" xml:space="preserve">
          <source>Parameters:</source>
          <target state="translated">Parameters:</target>
        </trans-unit>
        <trans-unit id="be34d1fdfde4fea480ecbc36169237385fba2e8c" translate="yes" xml:space="preserve">
          <source>Parse &lt;code&gt;data&lt;/code&gt; as JSON.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="128f720618fb6c9036a435d2051d49848af33efb" translate="yes" xml:space="preserve">
          <source>Parse a &lt;code&gt;Content-Type&lt;/code&gt; like header into a tuple with the content type and the options:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2057ced34fab90fbd45145351a04f2c0af91f2d3" translate="yes" xml:space="preserve">
          <source>Parse a cache control header. The RFC differs between response and request cache control, this method does not. It&amp;rsquo;s your responsibility to not use the wrong control statements.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="32a575501476556bda29056f057536bbb66451e0" translate="yes" xml:space="preserve">
          <source>Parse a cookie from a string or WSGI environ.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8948998f396cfa2fe16d5c679bb3932c9ef33f36" translate="yes" xml:space="preserve">
          <source>Parse a querystring and return it as &lt;code&gt;MultiDict&lt;/code&gt;. There is a difference in key decoding on different Python versions. On Python 3 keys will always be fully decoded whereas on Python 2, keys will remain bytestrings if they fit into ASCII. On 2.x keys can be forced to be unicode by setting &lt;code&gt;decode_keys&lt;/code&gt; to &lt;code&gt;True&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="85a5176da38f8e0ddafe898202e8b5ce18c389ca" translate="yes" xml:space="preserve">
          <source>Parse a set-like header and return a &lt;a href=&quot;../datastructures/index#werkzeug.datastructures.HeaderSet&quot;&gt;&lt;code&gt;HeaderSet&lt;/code&gt;&lt;/a&gt; object:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8329eeccc68cc58a7126c5c2cc32c827eaf08773" translate="yes" xml:space="preserve">
          <source>Parse an HTTP WWW-Authenticate header into a &lt;a href=&quot;../datastructures/index#werkzeug.datastructures.WWWAuthenticate&quot;&gt;&lt;code&gt;WWWAuthenticate&lt;/code&gt;&lt;/a&gt; object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="652fc103d674fce3db8bc3363c649873924342f4" translate="yes" xml:space="preserve">
          <source>Parse an HTTP basic/digest authorization header transmitted by the web browser. The return value is either &lt;code&gt;None&lt;/code&gt; if the header was invalid or not given, otherwise an &lt;a href=&quot;../datastructures/index#werkzeug.datastructures.Authorization&quot;&gt;&lt;code&gt;Authorization&lt;/code&gt;&lt;/a&gt; object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7d966d4962bc31cfab88f56d83dff86fd8f7b20e" translate="yes" xml:space="preserve">
          <source>Parse an etag header.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c183e5199fbcfed0f10b60224ba4d12516a9b6d3" translate="yes" xml:space="preserve">
          <source>Parse lists as described by RFC 2068 Section 2.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6c476226c2d3fa7b26cf0231ffb495509aba2b82" translate="yes" xml:space="preserve">
          <source>Parse lists of key, value pairs as described by RFC 2068 Section 2 and convert them into a python dict (or any other mapping object created from the type with a dict like interface provided by the &lt;code&gt;cls&lt;/code&gt; argument):</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1c56fb051a53a0d453d1e84bae9b109dd52c1cc0" translate="yes" xml:space="preserve">
          <source>Parse one of the following date formats into a datetime object:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1e2cd6543fe9ef6fc5f3d5cd073eac5eb24f55f7" translate="yes" xml:space="preserve">
          <source>Parse the form data in the environ and return it as tuple in the form &lt;code&gt;(stream, form, files)&lt;/code&gt;. You should only call this method if the transport method is &lt;code&gt;POST&lt;/code&gt;, &lt;code&gt;PUT&lt;/code&gt;, or &lt;code&gt;PATCH&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="99f7bfb28311948a4bb36358e50d6197ebd211b1" translate="yes" xml:space="preserve">
          <source>Parses a URL from a string into a &lt;a href=&quot;#werkzeug.urls.URL&quot;&gt;&lt;code&gt;URL&lt;/code&gt;&lt;/a&gt; tuple. If the URL is lacking a scheme it can be provided as second argument. Otherwise, it is ignored. Optionally fragments can be stripped from the URL by setting &lt;code&gt;allow_fragments&lt;/code&gt; to &lt;code&gt;False&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="21c2be21a71dfd05e1a1f56a61f27a2121ab046c" translate="yes" xml:space="preserve">
          <source>Parses a range header into a &lt;a href=&quot;../datastructures/index#werkzeug.datastructures.ContentRange&quot;&gt;&lt;code&gt;ContentRange&lt;/code&gt;&lt;/a&gt; object or &lt;code&gt;None&lt;/code&gt; if parsing is not possible.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="26bcd83a367f8a466e2e644375d69c6f6b6c6ab5" translate="yes" xml:space="preserve">
          <source>Parses a range header into a &lt;a href=&quot;../datastructures/index#werkzeug.datastructures.Range&quot;&gt;&lt;code&gt;Range&lt;/code&gt;&lt;/a&gt; object. If the header is missing or malformed &lt;code&gt;None&lt;/code&gt; is returned. &lt;code&gt;ranges&lt;/code&gt; is a list of &lt;code&gt;(start, stop)&lt;/code&gt; tuples where the ranges are non-inclusive.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4c4a51a3fc92638477e5e144c51dcfec62898383" translate="yes" xml:space="preserve">
          <source>Parses an HTTP Accept-* header. This does not implement a complete valid algorithm but one that supports at least value and quality extraction.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8ae38619285f4881c32e6c73608d2bb525ac9327" translate="yes" xml:space="preserve">
          <source>Parses an if-range header which can be an etag or a date. Returns a &lt;a href=&quot;../datastructures/index#werkzeug.datastructures.IfRange&quot;&gt;&lt;code&gt;IfRange&lt;/code&gt;&lt;/a&gt; object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ae28f4a64d33b80e8fb613c24a07c54f78584fcd" translate="yes" xml:space="preserve">
          <source>Parses multipart headers from an iterable that yields lines (including the trailing newline symbol). The iterable has to be newline terminated.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="449020fd4cedbde54c936a071c45564b03a99beb" translate="yes" xml:space="preserve">
          <source>Pass it a filename and it will return a secure version of it. This filename can then safely be stored on a regular file system and passed to &lt;a href=&quot;https://docs.python.org/3/library/os.path.html#os.path.join&quot;&gt;&lt;code&gt;os.path.join()&lt;/code&gt;&lt;/a&gt;. The filename returned is an ASCII only string for maximum portability.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="88f8c0e5533039b8735c1ce3586683fb7973237c" translate="yes" xml:space="preserve">
          <source>Passing a &lt;code&gt;MultiDict&lt;/code&gt; will also add multiple values:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ed829f6730e6191f98fd927c6219480f5da70263" translate="yes" xml:space="preserve">
          <source>Pasting Errors</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d84e380e338406cd603f05537cfcf04ddc9645bb" translate="yes" xml:space="preserve">
          <source>Per default a missing value for a key will default to an empty key. If you don&amp;rsquo;t want that behavior you can set &lt;code&gt;include_empty&lt;/code&gt; to &lt;code&gt;False&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fd9ffc5b1351dded590306341c371ef475bcc7af" translate="yes" xml:space="preserve">
          <source>Per default encoding errors are ignored. If you want a different behavior you can set &lt;code&gt;errors&lt;/code&gt; to &lt;code&gt;'replace'&lt;/code&gt; or &lt;code&gt;'strict'&lt;/code&gt;. In strict mode a &lt;code&gt;HTTPUnicodeError&lt;/code&gt; is raised.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c68b3c8876e991206ecbf245f6d6651a20184a35" translate="yes" xml:space="preserve">
          <source>Per default the property is read only. You have to explicitly enable it by passing &lt;code&gt;read_only=False&lt;/code&gt; to the constructor.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3a9b6bf785ee1001370f2e9eaf11d7e0d961fd9b" translate="yes" xml:space="preserve">
          <source>Per default the request object will assume all the text data is &lt;code&gt;utf-8&lt;/code&gt; encoded. Please refer to &lt;a href=&quot;../unicode/index&quot;&gt;the unicode chapter&lt;/a&gt; for more details about customizing the behavior.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bc969ddeebc7e266a86b078d9290ef0e9d6d90cd" translate="yes" xml:space="preserve">
          <source>Per default the request object will be added to the WSGI environment as &lt;code&gt;werkzeug.request&lt;/code&gt; to support the debugging system. If you don&amp;rsquo;t want that, set &lt;code&gt;populate_request&lt;/code&gt; to &lt;code&gt;False&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="953804c62fafc898f9d1d81df9e9015b1e6fd1e6" translate="yes" xml:space="preserve">
          <source>Per default the response object will assume all the text data is &lt;code&gt;utf-8&lt;/code&gt; encoded. Please refer to &lt;a href=&quot;../unicode/index&quot;&gt;the unicode chapter&lt;/a&gt; for more details about customizing the behavior.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e3caf47c12456127d55ed966379a270b7d87a737" translate="yes" xml:space="preserve">
          <source>Per default there are two instances of that class. The &lt;code&gt;html&lt;/code&gt; one, and the &lt;code&gt;xhtml&lt;/code&gt; one for those two dialects. The class uses keyword parameters and positional parameters to generate small snippets of HTML.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="31f38783b442e2725894a9d8f4939be9b40fa4c1" translate="yes" xml:space="preserve">
          <source>Please be aware that redis always works with strings, so you have to convert the click count to &lt;a href=&quot;https://docs.python.org/3/library/functions.html#int&quot;&gt;&lt;code&gt;int&lt;/code&gt;&lt;/a&gt; by hand.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="08e2ff135589e6ef553f3330fa65b7e8cdf02aff" translate="yes" xml:space="preserve">
          <source>Please keep in mind that file uploads will not end up here, but instead in the &lt;a href=&quot;#werkzeug.wrappers.BaseRequest.files&quot;&gt;&lt;code&gt;files&lt;/code&gt;&lt;/a&gt; attribute.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="99bf8e005d750e256917750a9d1c2b54e96a2e09" translate="yes" xml:space="preserve">
          <source>Please refer to &lt;a href=&quot;../urls/index&quot;&gt;URL Helpers&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8cf0db393cddd5280963a420a7fe8e8ebf193a55" translate="yes" xml:space="preserve">
          <source>Pop a &lt;code&gt;(key, list)&lt;/code&gt; tuple from the dict.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dac7e4644446793160297e0da945786f020ab85b" translate="yes" xml:space="preserve">
          <source>Pop an item from the dict.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1d04851d512c28c8b928a529af282bb09888af04" translate="yes" xml:space="preserve">
          <source>Pop the first item for a list on the dict. Afterwards the key is removed from the dict, so additional values are discarded:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d3b3e490d63829cfc5f6b2d4ad9a5a70c35abb02" translate="yes" xml:space="preserve">
          <source>Pop the list for a key from the dict. If the key is not in the dict an empty list is returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="249e3d0b4293cb81ab2bd05a63cfcc196ff05c93" translate="yes" xml:space="preserve">
          <source>Positional arguments are appended as individual segments to the path of the URL:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c0057ada42203fea1f5e2edc58fcbdd1b2f26b28" translate="yes" xml:space="preserve">
          <source>Prefixes all endpoints (which must be strings for this factory) with another string. This can be useful for sub applications:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="170ecf0a8a3f585dce03256f6a7f97de63cf21a5" translate="yes" xml:space="preserve">
          <source>Private:</source>
          <target state="translated">Private:</target>
        </trans-unit>
        <trans-unit id="1c5b1558f697017d00aedb46b42da74df7fe1a5e" translate="yes" xml:space="preserve">
          <source>Process this response as WSGI application.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9067c7946fb6010ae2c1326201c64e3f7e2cbf2c" translate="yes" xml:space="preserve">
          <source>Provides simple access to &lt;code&gt;WWW-Authenticate&lt;/code&gt; headers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="48edcccdfb77f640ae0367bdd144baf5e05402a0" translate="yes" xml:space="preserve">
          <source>Proxy requests under a path to an external server, routing other requests to the app.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f228aab40e88df64993db7327b13aa3c6ed9d5ee" translate="yes" xml:space="preserve">
          <source>Pushes a new item to the stack</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b74d85c0ce7a276adab58d20a1778779815dcb6b" translate="yes" xml:space="preserve">
          <source>Python 3 Unicode strings in the WSGI environment are restricted to ISO-8859-1 code points. If a string read from the environment might contain characters outside that charset, it must first be decoded to bytes as ISO-8859-1, then encoded to a Unicode string using the proper charset (typically UTF-8). The reverse is done when writing to the environ. This is known as the &amp;ldquo;WSGI encoding dance&amp;rdquo;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a54b6675d323337243a044e049646e596641d9d8" translate="yes" xml:space="preserve">
          <source>Python 3 comes bundled with the &lt;a href=&quot;https://docs.python.org/3/library/venv.html#module-venv&quot;&gt;&lt;code&gt;venv&lt;/code&gt;&lt;/a&gt; module to create virtual environments. If you&amp;rsquo;re using a modern version of Python, you can continue on to the next section.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e67dd06503d322ddb37aa204244ecbcc12419ca8" translate="yes" xml:space="preserve">
          <source>Python Version</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d07133c8504b6a0e98371a1b9afe2ca2855a7270" translate="yes" xml:space="preserve">
          <source>Quickstart</source>
          <target state="translated">Quickstart</target>
        </trans-unit>
        <trans-unit id="be45d29805207476d2905adc7780e5d67619b9df" translate="yes" xml:space="preserve">
          <source>Quite often you want to unittest your application or just check the output from an interactive python session. In theory that is pretty simple because you can fake a WSGI environment and call the application with a dummy &lt;code&gt;start_response&lt;/code&gt; and iterate over the application iterator but there are argumentably better ways to interact with an application.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="86ef9f2c52cb91f33ebf78faa545c742f5289fc3" translate="yes" xml:space="preserve">
          <source>Quote a header value if necessary.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d7f12c5bb06e6f75213f09660a2a5c609b637922" translate="yes" xml:space="preserve">
          <source>Quote an etag.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="97a0ae9c5d1682baa0dc42aabceb12738719a373" translate="yes" xml:space="preserve">
          <source>Raise if a resource does not exist and never existed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5ab7d25cfc350b11254970bbdab4984edaeb29a2" translate="yes" xml:space="preserve">
          <source>Raise if a resource existed previously and went away without new location.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7cf6e691d8a89f016ea8f5e513165b9cf726dc1f" translate="yes" xml:space="preserve">
          <source>Raise if an internal server error occurred. This is a good fallback if an unknown error occurred in the dispatcher.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f7da99a6f28f27b0705e78e9f5359d4dc81dc943" translate="yes" xml:space="preserve">
          <source>Raise if the application does not support the action requested by the browser.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b78556909c0f980890c4dc772d254f3dc4407959" translate="yes" xml:space="preserve">
          <source>Raise if the browser sends something to the application the application or server cannot handle.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2d627c3b50464971efcf98db5f53e77c7a44661b" translate="yes" xml:space="preserve">
          <source>Raise if the browser submitted data but no &lt;code&gt;Content-Length&lt;/code&gt; header which is required for the kind of processing the server does.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f7e3824f40a7c27ad964147e52724a37e95e31b5" translate="yes" xml:space="preserve">
          <source>Raise if the server can&amp;rsquo;t return any content conforming to the &lt;code&gt;Accept&lt;/code&gt; headers of the client.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="981e10bd478198d033abe15fe549c70846f01e6c" translate="yes" xml:space="preserve">
          <source>Raise if the server used a method the resource does not handle. For example &lt;code&gt;POST&lt;/code&gt; if the resource is view only. Especially useful for REST.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ce645e0d962dc14a0998b30d867824fe5cd437be" translate="yes" xml:space="preserve">
          <source>Raise if the user doesn&amp;rsquo;t have the permission for the requested resource but was authenticated.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e9f2280df596dc5b45c04476317d12e4ef2d90bd" translate="yes" xml:space="preserve">
          <source>Raise if the user is not authorized to access a resource.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="be8bf1117d0104622117d803b09a623125083860" translate="yes" xml:space="preserve">
          <source>Raise to signal that a request cannot be completed because it conflicts with the current state on the server.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="77da4715bbad54175398fdd3182caca06dc300a3" translate="yes" xml:space="preserve">
          <source>Raise to signalize a timeout.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d2f67b1ac4fcf88054a61271fe510ede952f9fe6" translate="yes" xml:space="preserve">
          <source>Raised if something triggers a security error. This is otherwise exactly like a bad request error.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="01ccc075dd36377f023a70aef4d2881fe440fd7c" translate="yes" xml:space="preserve">
          <source>Raises an &lt;a href=&quot;#werkzeug.exceptions.HTTPException&quot;&gt;&lt;code&gt;HTTPException&lt;/code&gt;&lt;/a&gt; for the given status code or WSGI application.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e0eb5268f437200e3ca42ec2d178bdfb80e8e252" translate="yes" xml:space="preserve">
          <source>Raises:</source>
          <target state="translated">Raises:</target>
        </trans-unit>
        <trans-unit id="bdfc4c8d1b77ddd528203521c66f6daaff7acb87" translate="yes" xml:space="preserve">
          <source>Raw Request URI and Path Encoding</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3bbb27e5dd882bc50c998130720ff30fcfc1ee01" translate="yes" xml:space="preserve">
          <source>Read &lt;code&gt;size&lt;/code&gt; bytes or if size is not provided everything is read.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0b4f7b5f55429f1de89fb7d94c6c8a6463e87414" translate="yes" xml:space="preserve">
          <source>Read only version of the headers from a WSGI environment. This provides the same interface as &lt;code&gt;Headers&lt;/code&gt; and is constructed from a WSGI environment.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9306b39534a1e4dd1ee1cc703f3cccadf0c825ff" translate="yes" xml:space="preserve">
          <source>Reads a file into a list of strings. It calls &lt;a href=&quot;#werkzeug.wsgi.LimitedStream.readline&quot;&gt;&lt;code&gt;readline()&lt;/code&gt;&lt;/a&gt; until the file is read to the end. It does support the optional &lt;code&gt;size&lt;/code&gt; argument if the underlying stream supports it for &lt;code&gt;readline&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="73e66a0410a0486ce375b13f1daceb511863f512" translate="yes" xml:space="preserve">
          <source>Reads one line from the stream.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cfc6b1cf7398e1fe89b5ec3bec1456e0e3d98567" translate="yes" xml:space="preserve">
          <source>Redirects to the same URL but with a slash appended. The behavior of this function is undefined if the path ends with a slash already.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="617b3e834c62388711de7de9bd67db4e37132000" translate="yes" xml:space="preserve">
          <source>Redis was developed for UNIX systems and was never really designed to work on Windows. For development purposes, the unofficial ports however work well enough. You can get them from &lt;a href=&quot;https://github.com/dmajkic/redis/downloads&quot;&gt;github&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="db1c784524e1b54011a95823026161f7c8517fe0" translate="yes" xml:space="preserve">
          <source>Reference</source>
          <target state="translated">Reference</target>
        </trans-unit>
        <trans-unit id="21c55aa3ca137ed0ac3e9c810fc13fb7db973f68" translate="yes" xml:space="preserve">
          <source>Releases the contents of the local for the current context. This makes it possible to use locals without a manager.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="35360f9710e178438cf0beacd29bc2cf155be508" translate="yes" xml:space="preserve">
          <source>Reloader</source>
          <target state="translated">Reloader</target>
        </trans-unit>
        <trans-unit id="61eb76f72975ceba7720788b5b4c2d9b32f1e413" translate="yes" xml:space="preserve">
          <source>Remember to enable the FastCGI, alias and rewrite modules. This configuration binds the application to &lt;code&gt;/yourapplication&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6346ad24b1a3903107fdcebb5bfa690156fabff9" translate="yes" xml:space="preserve">
          <source>Remove a header from the set. This raises an &lt;a href=&quot;https://docs.python.org/3/library/exceptions.html#KeyError&quot;&gt;&lt;code&gt;KeyError&lt;/code&gt;&lt;/a&gt; if the header is not in the set.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6b892a1a9c4232bcdd7dde177a34eb83b2e52549" translate="yes" xml:space="preserve">
          <source>Remove a key.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="97ab1a10a660349eaa9c5290c258cdb6e4ad189d" translate="yes" xml:space="preserve">
          <source>Remove all HTTP/1.1 &amp;ldquo;Hop-by-Hop&amp;rdquo; headers from a list or &lt;code&gt;Headers&lt;/code&gt; object. This operation works in-place.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3dca00dfa90459b39c1576ece118a1a13b50854b" translate="yes" xml:space="preserve">
          <source>Remove all entity headers from a list or &lt;code&gt;Headers&lt;/code&gt; object. This operation works in-place. &lt;code&gt;Expires&lt;/code&gt; and &lt;code&gt;Content-Location&lt;/code&gt; headers are by default not removed. The reason for this is &lt;a href=&quot;https://tools.ietf.org/html/rfc2616.html&quot; id=&quot;index-2&quot;&gt;&lt;strong&gt;RFC 2616&lt;/strong&gt;&lt;/a&gt; section 10.3.5 which specifies some entity headers that should be sent.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1107655923a85b8d087eec5041b712d9285fdf10" translate="yes" xml:space="preserve">
          <source>Remove all header tuples for &lt;code&gt;key&lt;/code&gt; and add a new one. The newly added key either appears at the end of the list if there was no entry or replaces the first one.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1e3cee6e0f52c26f059e382aff73dca379264def" translate="yes" xml:space="preserve">
          <source>Remove any existing values for a header and add new ones.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="636a4debc5bf2a606aae29695e36672393078baf" translate="yes" xml:space="preserve">
          <source>Remove the old values for a key and add new ones. Note that the list you pass the values in will be shallow-copied before it is inserted in the dictionary.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d37cd74729a678da86ded9e0aba9e9c6ca8fcf76" translate="yes" xml:space="preserve">
          <source>Removes a key or index and returns a (key, value) item.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="757eabc131a1726ceb1f4ea4258d98587521bebe" translate="yes" xml:space="preserve">
          <source>Removes and returns a key or index.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="03f873893b984a0c5ed8e6bb71873169e2dcfe91" translate="yes" xml:space="preserve">
          <source>Removes and returns the next segment of &lt;code&gt;PATH_INFO&lt;/code&gt;, pushing it onto &lt;code&gt;SCRIPT_NAME&lt;/code&gt;. Returns &lt;code&gt;None&lt;/code&gt; if there is nothing left on &lt;code&gt;PATH_INFO&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f482734372f088e9e4ebfd76fe379458b6a036bd" translate="yes" xml:space="preserve">
          <source>Removes the topmost item from the stack, will return the old value or &lt;code&gt;None&lt;/code&gt; if the stack was already empty.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="20d84292dd4a5f0f2890480b70f052cadde70564" translate="yes" xml:space="preserve">
          <source>Replace headers in this object with items from another headers object and keyword arguments.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="828976d97916b986b2cc7e045e99f8fc85f3b82a" translate="yes" xml:space="preserve">
          <source>Replace special characters &amp;ldquo;&amp;amp;&amp;rdquo;, &amp;ldquo;&amp;lt;&amp;rdquo;, &amp;ldquo;&amp;gt;&amp;rdquo; and (&amp;ldquo;) to HTML-safe sequences.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f8d530c9dcd7cad645fd797a34c68af028732abd" translate="yes" xml:space="preserve">
          <source>Represents a &lt;code&gt;Range&lt;/code&gt; header. All methods only support only bytes as the unit. Stores a list of ranges if given, but the methods only work if only one range is provided.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e3d264657ee96f7f77c324a35484033e3c51c1b9" translate="yes" xml:space="preserve">
          <source>Represents a parsed URL in bytes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1cf796e689888e9383975b6761295ee4cd772c99" translate="yes" xml:space="preserve">
          <source>Represents a parsed URL. This behaves like a regular tuple but also has some extra attributes that give further insight into the URL.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="92d7178e6ac2b7daa08d6bcd7da39615c2d2620f" translate="yes" xml:space="preserve">
          <source>Represents a user agent. Pass it a WSGI environment or a user agent string and you can inspect some of the details from the user agent string via the attributes. The following attributes exist:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b2b5a994d8aa9340fe3f7957d1d0a709d2af5a3a" translate="yes" xml:space="preserve">
          <source>Represents an &lt;code&gt;Authorization&lt;/code&gt; header sent by the client. You should not create this kind of object yourself but use it when it&amp;rsquo;s returned by the &lt;code&gt;parse_authorization_header&lt;/code&gt; function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="82a437e4295958cbbebe6d40bfa4029b9efe2ade" translate="yes" xml:space="preserve">
          <source>Represents the content range header.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3a092ea4abd340207e201b58d4f5bd0485c5cc73" translate="yes" xml:space="preserve">
          <source>Request / Response Objects</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a4fad55a98a9dd0e93de14214b50a92bce240602" translate="yes" xml:space="preserve">
          <source>Request and Response Objects</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="43ee6cfdda65b287bc776b94946059f11e08fd26" translate="yes" xml:space="preserve">
          <source>Request headers can be accessed by using the &lt;code&gt;headers&lt;/code&gt; attribute:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3130bc79a20af26fffb2aada68957746d20d8789" translate="yes" xml:space="preserve">
          <source>Request objects are &lt;strong&gt;read only&lt;/strong&gt;. As of 0.5 modifications are not allowed in any place. Unlike the lower level parsing functions the request object will use immutable objects everywhere possible.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1a46061f42dd431466606615561bbfa9fb04a7a7" translate="yes" xml:space="preserve">
          <source>Requested path as unicode, including the query string.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2c6d9da7639fc3274b858872a4f7716fdfcca3c1" translate="yes" xml:space="preserve">
          <source>Requested path as unicode. This works a bit like the regular path info in the WSGI environment but will always include a leading slash, even if the URL root is accessed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="541336f5aa581add0c45d58cdef6f154b030cf06" translate="yes" xml:space="preserve">
          <source>Response Object</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4906d554b5e05ca0a3d70c4d70e826e66a4cbd99" translate="yes" xml:space="preserve">
          <source>Response Stream</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a20c18f8e87566e497a2db330607d13152e2d7bd" translate="yes" xml:space="preserve">
          <source>Response can be any kind of iterable or string. If it&amp;rsquo;s a string it&amp;rsquo;s considered being an iterable with one item which is the string passed. Headers can be a list of tuples or a &lt;a href=&quot;../datastructures/index#werkzeug.datastructures.Headers&quot;&gt;&lt;code&gt;Headers&lt;/code&gt;&lt;/a&gt; object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9e764b613f1c988aeab05214dc1838893d04bb43" translate="yes" xml:space="preserve">
          <source>Response objects are the opposite of request objects. They are used to send data back to the client. In reality, response objects are nothing more than glorified WSGI applications.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="633f6e8b851aad01759e04e23cfe5188859a4d5b" translate="yes" xml:space="preserve">
          <source>Responses</source>
          <target state="translated">Responses</target>
        </trans-unit>
        <trans-unit id="8267ea9dde4ffff5e9911ad59836bac2e790e086" translate="yes" xml:space="preserve">
          <source>Return a deep copy of this object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dbb451746f06d28c82ff47eef2be0541c6ada6c9" translate="yes" xml:space="preserve">
          <source>Return a iterator of &lt;code&gt;(key, values)&lt;/code&gt; pairs, where values is the list of all values associated with the key.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e11b734b6717329c813aa53812a73a814526a47b" translate="yes" xml:space="preserve">
          <source>Return a list of all the values for the named field.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9560baf85eead53b2e1ba90e1b1c3cd178197e62" translate="yes" xml:space="preserve">
          <source>Return a new &lt;a href=&quot;#werkzeug.routing.MapAdapter&quot;&gt;&lt;code&gt;MapAdapter&lt;/code&gt;&lt;/a&gt; with the details specified to the call. Note that &lt;code&gt;script_name&lt;/code&gt; will default to &lt;code&gt;'/'&lt;/code&gt; if not further specified or &lt;code&gt;None&lt;/code&gt;. The &lt;code&gt;server_name&lt;/code&gt; at least is a requirement because the HTTP RFC requires absolute URLs for redirects and so all redirect exceptions raised by Werkzeug will contain the full canonical URL.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="73975d4aa2c1d5cd9d8431d090ec06fa0bd9ee81" translate="yes" xml:space="preserve">
          <source>Return a shallow copy of this object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e06ee5c7f0387b5aa7f58e28c623d885f263957f" translate="yes" xml:space="preserve">
          <source>Return a shallow mutable copy of this object. Keep in mind that the standard library&amp;rsquo;s &lt;a href=&quot;#werkzeug.datastructures.ImmutableDict.copy&quot;&gt;&lt;code&gt;copy()&lt;/code&gt;&lt;/a&gt; function is a no-op for this class like for any other python immutable type (eg: &lt;a href=&quot;https://docs.python.org/3/library/stdtypes.html#tuple&quot;&gt;&lt;code&gt;tuple&lt;/code&gt;&lt;/a&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="75d8f87c552acffbcd80a308a1a1919ed0d465fe" translate="yes" xml:space="preserve">
          <source>Return a shallow mutable copy of this object. Keep in mind that the standard library&amp;rsquo;s &lt;a href=&quot;#werkzeug.datastructures.ImmutableMultiDict.copy&quot;&gt;&lt;code&gt;copy()&lt;/code&gt;&lt;/a&gt; function is a no-op for this class like for any other python immutable type (eg: &lt;a href=&quot;https://docs.python.org/3/library/stdtypes.html#tuple&quot;&gt;&lt;code&gt;tuple&lt;/code&gt;&lt;/a&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="94c41e7ec621663c6bda467f3c89c0d1bf3513a6" translate="yes" xml:space="preserve">
          <source>Return a shallow mutable copy of this object. Keep in mind that the standard library&amp;rsquo;s &lt;a href=&quot;#werkzeug.datastructures.ImmutableOrderedMultiDict.copy&quot;&gt;&lt;code&gt;copy()&lt;/code&gt;&lt;/a&gt; function is a no-op for this class like for any other python immutable type (eg: &lt;a href=&quot;https://docs.python.org/3/library/stdtypes.html#tuple&quot;&gt;&lt;code&gt;tuple&lt;/code&gt;&lt;/a&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7baa06fd3c0adc623c976aca0c6eae8df0c6384a" translate="yes" xml:space="preserve">
          <source>Return a shallow mutable copy of this object. Keep in mind that the standard library&amp;rsquo;s &lt;a href=&quot;#werkzeug.datastructures.ImmutableTypeConversionDict.copy&quot;&gt;&lt;code&gt;copy()&lt;/code&gt;&lt;/a&gt; function is a no-op for this class like for any other python immutable type (eg: &lt;a href=&quot;https://docs.python.org/3/library/stdtypes.html#tuple&quot;&gt;&lt;code&gt;tuple&lt;/code&gt;&lt;/a&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e9d7c6327fdef2eecb1b98e3dc1a030cadf37985" translate="yes" xml:space="preserve">
          <source>Return a tuple in the form (app_iter, status, headers) of the application output. This works best if you pass it an application that returns an iterator all the time.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6c8f1c990616f88bc03dd7ae11fe6886f1709221" translate="yes" xml:space="preserve">
          <source>Return a tuple in the form &lt;code&gt;(etag, is_weak)&lt;/code&gt;. If there is no ETag the return value is &lt;code&gt;(None, None)&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="484322bc7a9842add37e45a32d4af7397f80a7a0" translate="yes" xml:space="preserve">
          <source>Return an URL with the same values, except for those parameters given new values by whichever keyword arguments are specified.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2e43e44fa81f6a7d231aadc9a3d3f75730935bd5" translate="yes" xml:space="preserve">
          <source>Return an iterator of &lt;code&gt;(key, value)&lt;/code&gt; pairs.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6810934c84d3e2962da24fcd4b38ce826abc671d" translate="yes" xml:space="preserve">
          <source>Return an iterator of all values associated with a key. Zipping &lt;a href=&quot;#werkzeug.datastructures.MultiDict.keys&quot;&gt;&lt;code&gt;keys()&lt;/code&gt;&lt;/a&gt; and this is the same as calling &lt;a href=&quot;#werkzeug.datastructures.MultiDict.lists&quot;&gt;&lt;code&gt;lists()&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="29b92828e909657cce0d384fe12fb28758bed292" translate="yes" xml:space="preserve">
          <source>Return an unbound copy of this rule.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8b964e663aef21bea174a1e1f5f1923b98a277ba" translate="yes" xml:space="preserve">
          <source>Return the built environ.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fd67836350313e844cf37022aecaafbcea15fb75" translate="yes" xml:space="preserve">
          <source>Return the contents as regular dict. If &lt;code&gt;flat&lt;/code&gt; is &lt;code&gt;True&lt;/code&gt; the returned dict will only have the first item present, if &lt;code&gt;flat&lt;/code&gt; is &lt;code&gt;False&lt;/code&gt; all values will be returned as lists.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f204d9bb07159c7ef3036e95ad9c06afecdc1fe9" translate="yes" xml:space="preserve">
          <source>Return the context identifier the local objects use internally for this context. You cannot override this method to change the behavior but use it to link other context local objects (such as SQLAlchemy&amp;rsquo;s scoped sessions) to the Werkzeug locals.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0825f08a2cf7d87d7b286c1264fddd6da44e38f8" translate="yes" xml:space="preserve">
          <source>Return the current object. This is useful if you want the real object behind the proxy at a time for performance reasons or because you want to pass the object into a different context.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8ab16591ea613d88901039093a0ba166d00ddf05" translate="yes" xml:space="preserve">
          <source>Return the default value if the requested data doesn&amp;rsquo;t exist. If &lt;code&gt;type&lt;/code&gt; is provided and is a callable it should convert the value, return it or raise a &lt;a href=&quot;https://docs.python.org/3/library/exceptions.html#ValueError&quot;&gt;&lt;code&gt;ValueError&lt;/code&gt;&lt;/a&gt; if that is not possible. In this case the function will return the default as if the value was not found:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="03807dd9f661c01f21f4197515e8ca22fdd21f22" translate="yes" xml:space="preserve">
          <source>Return the first value for the key if it is in the headers, otherwise set the header to the value given by &lt;code&gt;default&lt;/code&gt; and return that.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="35468a36494cf07af3f787d992a18033d9886e96" translate="yes" xml:space="preserve">
          <source>Return the host for the given WSGI environment. This first checks the &lt;code&gt;Host&lt;/code&gt; header. If it&amp;rsquo;s not present, then &lt;code&gt;SERVER_NAME&lt;/code&gt; and &lt;code&gt;SERVER_PORT&lt;/code&gt; are used. The host will only contain the port if it is different than the standard port for the protocol.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8ec479cc50fa94c72840a7d9f3818b28f3ca181d" translate="yes" xml:space="preserve">
          <source>Return the index of the header in the set or raise an &lt;a href=&quot;https://docs.python.org/3/library/exceptions.html#IndexError&quot;&gt;&lt;code&gt;IndexError&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eb0dc5a67e560da1d001ab6730ad73d91a85fa52" translate="yes" xml:space="preserve">
          <source>Return the index of the header in the set or return -1 if not found.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7663c9197da228edaa42dcd572efe5b558199a99" translate="yes" xml:space="preserve">
          <source>Return the list of items for a given key. If that key is not in the &lt;a href=&quot;#werkzeug.datastructures.Headers&quot;&gt;&lt;code&gt;Headers&lt;/code&gt;&lt;/a&gt;, the return value will be an empty list. Just as &lt;a href=&quot;#werkzeug.datastructures.Headers.get&quot;&gt;&lt;code&gt;get()&lt;/code&gt;&lt;/a&gt;&lt;a href=&quot;#werkzeug.datastructures.Headers.getlist&quot;&gt;&lt;code&gt;getlist()&lt;/code&gt;&lt;/a&gt; accepts a &lt;code&gt;type&lt;/code&gt; parameter. All items will be converted with the callable defined there.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9bf0cb0b44c7c9a35649129c3b6961a0f5bcd32f" translate="yes" xml:space="preserve">
          <source>Return the list of items for a given key. If that key is not in the &lt;code&gt;MultiDict&lt;/code&gt;, the return value will be an empty list. Just as &lt;code&gt;get&lt;/code&gt;&lt;code&gt;getlist&lt;/code&gt; accepts a &lt;code&gt;type&lt;/code&gt; parameter. All items will be converted with the callable defined there.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d99630b0e42e90feb91ba9881db821c8349dff12" translate="yes" xml:space="preserve">
          <source>Return the list of values for the key if it is in the headers, otherwise set the header to the list of values given by &lt;code&gt;default&lt;/code&gt; and return that.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="251218daef012c168b51df030fa79d7f6b0fb058" translate="yes" xml:space="preserve">
          <source>Return the set as real python set type. When calling this, all the items are converted to lowercase and the ordering is lost.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8246453c6e901bbc2e4288b43a47949404da068a" translate="yes" xml:space="preserve">
          <source>Return type:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1a387378f02b8eb6e435f5858b4dac12b306a1e1" translate="yes" xml:space="preserve">
          <source>Return whether object was opened for reading.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9265b588ebc673d9296a3de8344a301b06219976" translate="yes" xml:space="preserve">
          <source>Returned by &lt;a href=&quot;#werkzeug.routing.Map.bind&quot;&gt;&lt;code&gt;Map.bind()&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;#werkzeug.routing.Map.bind_to_environ&quot;&gt;&lt;code&gt;Map.bind_to_environ()&lt;/code&gt;&lt;/a&gt; and does the URL matching and building based on runtime information.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="418dfd9dad0856f6f6fab6266bee4b4057c92aad" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;True&lt;/code&gt; if the password matched, &lt;code&gt;False&lt;/code&gt; otherwise.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="210cb12d394790c02a81a966e2d1847238d55e21" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;True&lt;/code&gt; if the two strings are equal, or &lt;code&gt;False&lt;/code&gt; if they are not.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="404fdedc6fa993516185ed17656214c3c95b0490" translate="yes" xml:space="preserve">
          <source>Returns True if the request method carries content. As of Werkzeug 0.9 this will be the case if a content type is transmitted.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="65efbe55352983dca97d13b95c8741434ccf3913" translate="yes" xml:space="preserve">
          <source>Returns a &lt;a href=&quot;#werkzeug.urls.BytesURL&quot;&gt;&lt;code&gt;BytesURL&lt;/code&gt;&lt;/a&gt; tuple that holds a URI. This will encode all the information in the URL properly to ASCII using the rules a web browser would follow.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5cad16c8c3141bc90d042bc69ee8b26775700883" translate="yes" xml:space="preserve">
          <source>Returns a &lt;a href=&quot;#werkzeug.urls.URL&quot;&gt;&lt;code&gt;URL&lt;/code&gt;&lt;/a&gt; tuple that holds a IRI. This will try to decode as much information as possible in the URL without losing information similar to how a web browser does it for the URL bar.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6d1cf512c76662ee3ee98e88fc74194d56f0fc18" translate="yes" xml:space="preserve">
          <source>Returns a URL string or bytes depending on the type of the information stored. This is just a convenience function for calling &lt;a href=&quot;#werkzeug.urls.url_unparse&quot;&gt;&lt;code&gt;url_unparse()&lt;/code&gt;&lt;/a&gt; for this URL.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="89a41f7808eff442068bab7f9098425d04f286b0" translate="yes" xml:space="preserve">
          <source>Returns a binary digest for the PBKDF2 hash algorithm of &lt;code&gt;data&lt;/code&gt; with the given &lt;code&gt;salt&lt;/code&gt;. It iterates &lt;code&gt;iterations&lt;/code&gt; times and produces a key of &lt;code&gt;keylen&lt;/code&gt; bytes. By default, SHA-256 is used as hash function; a different hashlib &lt;code&gt;hashfunc&lt;/code&gt; can be provided.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="819eb4318c0c7a00f6c14702a18af412afab3de9" translate="yes" xml:space="preserve">
          <source>Returns a new &lt;code&gt;Accept&lt;/code&gt; object (basically a list of &lt;code&gt;(value, quality)&lt;/code&gt; tuples sorted by the quality with some additional accessor methods).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7df0e2d23a1f6bdbb859411213d331786a95cb08" translate="yes" xml:space="preserve">
          <source>Returns a request with the data. If the request class is not specified &lt;a href=&quot;#werkzeug.test.EnvironBuilder.request_class&quot;&gt;&lt;code&gt;request_class&lt;/code&gt;&lt;/a&gt; is used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1c21bc97327d9cc271f4211f8901f8ed8faa7bc1" translate="yes" xml:space="preserve">
          <source>Returns a response object (a WSGI application) that, if called, redirects the client to the target location. Supported codes are 301, 302, 303, 305, 307, and 308. 300 is not supported because it&amp;rsquo;s not a real redirect and 304 because it&amp;rsquo;s the answer for a request with a request with defined If-Modified-Since headers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3f38ff7aada4750dbe24f0567e23d4db8c707a16" translate="yes" xml:space="preserve">
          <source>Returns a tuple with the location of the file in the form &lt;code&gt;(server, location)&lt;/code&gt;. If the netloc is empty in the URL or points to localhost, it&amp;rsquo;s represented as &lt;code&gt;None&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7c669c73346df97a491802a9755d9644748a4fd2" translate="yes" xml:space="preserve">
          <source>Returns an iterator of the first value on every key&amp;rsquo;s value list.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9c71342780d4fd2f05372adbdd60837814a33a93" translate="yes" xml:space="preserve">
          <source>Returns copies of the rules wrapped and expands string templates in the endpoint, rule, defaults or subdomain sections.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2848a6a061f74ca6ac19cebdb2aea2a137196b7e" translate="yes" xml:space="preserve">
          <source>Returns self so that you can do &lt;code&gt;return resp.make_conditional(req)&lt;/code&gt; but modifies the object in-place.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="008b40bd7bf44392fd4661c0c7b437d5916a5bb6" translate="yes" xml:space="preserve">
          <source>Returns the &lt;code&gt;PATH_INFO&lt;/code&gt; from the WSGI environment and properly decodes it. This also takes care about the WSGI decoding dance on Python 3 environments. if the &lt;code&gt;charset&lt;/code&gt; is set to &lt;code&gt;None&lt;/code&gt; a bytestring is returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8679fe4bb57b7a0568634db38a304a67adbae77d" translate="yes" xml:space="preserve">
          <source>Returns the &lt;code&gt;QUERY_STRING&lt;/code&gt; from the WSGI environment. This also takes care about the WSGI decoding dance on Python 3 environments as a native string. The string returned will be restricted to ASCII characters.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5a1558db465d2c86097b3b29df0d0acdffa1ec77" translate="yes" xml:space="preserve">
          <source>Returns the &lt;code&gt;SCRIPT_NAME&lt;/code&gt; from the WSGI environment and properly decodes it. This also takes care about the WSGI decoding dance on Python 3 environments. if the &lt;code&gt;charset&lt;/code&gt; is set to &lt;code&gt;None&lt;/code&gt; a bytestring is returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e10bcc00a00ef909f2c4158e6965f554b97b0755" translate="yes" xml:space="preserve">
          <source>Returns the application iterator for the given environ. Depending on the request method and the current status code the return value might be an empty response rather than the one from the response.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d4400010b5618a5684118817d217a0d24913bd17" translate="yes" xml:space="preserve">
          <source>Returns the best match from a list of possible matches based on the specificity and quality of the client. If two items have the same quality and specificity, the one is returned that comes first.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6bc22b812f136260b864e2efc9ba4d522b2218d6" translate="yes" xml:space="preserve">
          <source>Returns the content length from the WSGI environment as integer. If it&amp;rsquo;s not available or chunked transfer encoding is used, &lt;code&gt;None&lt;/code&gt; is returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3703466410c7f1dd1f9b98362c6f19c303d47417" translate="yes" xml:space="preserve">
          <source>Returns the content length if available or &lt;code&gt;None&lt;/code&gt; otherwise.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ffe6b7a16fb095df457ad3cbf92cfbbb4b43aaa8" translate="yes" xml:space="preserve">
          <source>Returns the filesystem encoding that should be used. Note that this is different from the Python understanding of the filesystem encoding which might be deeply flawed. Do not use this value against Python&amp;rsquo;s unicode APIs because it might be different. See &lt;a href=&quot;../unicode/index#filesystem-encoding&quot;&gt;The Filesystem&lt;/a&gt; for the exact behavior.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3607e90152647a46ce3c4748dbaabd7d62516e6b" translate="yes" xml:space="preserve">
          <source>Returns the final WSGI response as tuple. The first item in the tuple is the application iterator, the second the status and the third the list of headers. The response returned is created specially for the given environment. For example if the request method in the WSGI environment is &lt;code&gt;'HEAD'&lt;/code&gt; the response will be empty and only the headers and status code will be present.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e972e18db5fe99e413916cd3ea78b0347a98b372" translate="yes" xml:space="preserve">
          <source>Returns the input stream from the WSGI environment and wraps it in the most sensible way possible. The stream returned is not the raw WSGI stream in most cases but one that is safe to read from without taking into account the content length.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f914bac378e84ae7ef3911f748ef8890c9bbfa9a" translate="yes" xml:space="preserve">
          <source>Returns the netloc unchanged as bytes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fb6b95b2a95fa896be5c927d125291f45e1cc471" translate="yes" xml:space="preserve">
          <source>Returns the next segment on the &lt;code&gt;PATH_INFO&lt;/code&gt; or &lt;code&gt;None&lt;/code&gt; if there is none. Works like &lt;a href=&quot;#werkzeug.wsgi.pop_path_info&quot;&gt;&lt;code&gt;pop_path_info()&lt;/code&gt;&lt;/a&gt; without modifying the environment:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c4afaff1478034909acbbbf4b16c13a1ea89f783" translate="yes" xml:space="preserve">
          <source>Returns the position of the stream.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e7c94538982aeed7e136fe9999e31e752e59945f" translate="yes" xml:space="preserve">
          <source>Returns the quality of the key.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b5b923d2be42fd35b808b77a9ba43e83e23b602a" translate="yes" xml:space="preserve">
          <source>Returns the valid methods that match for a given path.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4713a3b252a3c621afbf4ef4cbf27e939965edf5" translate="yes" xml:space="preserve">
          <source>Returns the value for the key if it is in the dict, otherwise it returns &lt;code&gt;default&lt;/code&gt; and sets that value for &lt;code&gt;key&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7749fcf802c472b6c2f5bd0556805e456ffd5674" translate="yes" xml:space="preserve">
          <source>Returns:</source>
          <target state="translated">Returns:</target>
        </trans-unit>
        <trans-unit id="df377af4571a3df42db578af844c8faa3182f0c7" translate="yes" xml:space="preserve">
          <source>Rule Factories</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="92c7ba702cb7c4f66c4d75f6b24aec2ce56ad49d" translate="yes" xml:space="preserve">
          <source>Rule Format</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4fbe9b7210067d85469bc7aacf0f181e8b39b0a4" translate="yes" xml:space="preserve">
          <source>Rule Templates</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="498723ad5d77e45c4b6bf589c98e81303184285c" translate="yes" xml:space="preserve">
          <source>Rule strings are URL paths with placeholders for variable parts in the format &lt;code&gt;&amp;lt;converter(arguments):name&amp;gt;&lt;/code&gt;. &lt;code&gt;converter&lt;/code&gt; and &lt;code&gt;arguments&lt;/code&gt; (with parentheses) are optional. If no converter is given, the &lt;code&gt;default&lt;/code&gt; converter is used (&lt;code&gt;string&lt;/code&gt; by default). The available converters are discussed below.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2b4e54766070faa7665bddb85c71fc2f5c1fdece" translate="yes" xml:space="preserve">
          <source>Rule strings basically are just normal URL paths with placeholders in the format &lt;code&gt;&amp;lt;converter(arguments):name&amp;gt;&lt;/code&gt; where the converter and the arguments are optional. If no converter is defined the &lt;code&gt;default&lt;/code&gt; converter is used which means &lt;code&gt;string&lt;/code&gt; in the normal configuration.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b1275319f457db2a1627a4248cc397e7c68f6c53" translate="yes" xml:space="preserve">
          <source>Rules that end with a slash are &amp;ldquo;branches&amp;rdquo;, others are &amp;ldquo;leaves&amp;rdquo;. If &lt;code&gt;strict_slashes&lt;/code&gt; is enabled (the default), visiting a branch URL without a trailing slash will redirect to the URL with a slash appended.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="78bb8826fcc2504583e625386c238563e6207595" translate="yes" xml:space="preserve">
          <source>SSL</source>
          <target state="translated">SSL</target>
        </trans-unit>
        <trans-unit id="03747b45c0ed5492db155c5b29cf049737ccbecc" translate="yes" xml:space="preserve">
          <source>Safely iterates line-based over an input stream. If the input stream is not a &lt;a href=&quot;#werkzeug.wsgi.LimitedStream&quot;&gt;&lt;code&gt;LimitedStream&lt;/code&gt;&lt;/a&gt; the &lt;code&gt;limit&lt;/code&gt; parameter is mandatory.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0b0073783e7cbe66a175cddbd426da05a3ccf7d8" translate="yes" xml:space="preserve">
          <source>Safely join zero or more untrusted path components to a base directory to avoid escaping the base directory.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fe0b4197bda460ba63463f86dcdb3a997bdaac6a" translate="yes" xml:space="preserve">
          <source>Same for the supplied form data:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4c7d041175b4b1046a1ccdd337efbdad58026552" translate="yes" xml:space="preserve">
          <source>Save the &lt;code&gt;yourapplication.fcgi&lt;/code&gt; file somewhere you will find it again. It makes sense to have that in &lt;code&gt;/var/www/yourapplication&lt;/code&gt; or something similar.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="afcb9572fb5308cf04ba71fb841c6627e4891244" translate="yes" xml:space="preserve">
          <source>Save the changes and after a while you should be able to access the development server on these host names as well. You can use the &lt;a href=&quot;../routing/index#routing&quot;&gt;URL Routing&lt;/a&gt; system to dispatch between different hosts or parse &lt;code&gt;request.host&lt;/code&gt; yourself.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cff971de2474f62cbf1ef53d942cf5126370de12" translate="yes" xml:space="preserve">
          <source>Save the file to a destination path or file object. If the destination is a file object you have to close it yourself after the call. The buffer size is the number of bytes held in memory during the copy process. It defaults to 16KB.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="995bf54d0948756b31adf1885f2cae1c192da27c" translate="yes" xml:space="preserve">
          <source>Security Helpers</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="069df06688ef936dca33e7c2bcbe675bf428fe3b" translate="yes" xml:space="preserve">
          <source>See also &lt;a href=&quot;../filesystem/index#module-werkzeug.filesystem&quot;&gt;&lt;code&gt;werkzeug.filesystem&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="de1c9ead6983daf10ee2f6c95c2209bb117a7d84" translate="yes" xml:space="preserve">
          <source>See the &lt;a href=&quot;../datastructures/index#werkzeug.datastructures.MultiDict&quot;&gt;&lt;code&gt;MultiDict&lt;/code&gt;&lt;/a&gt; / &lt;a href=&quot;../datastructures/index#werkzeug.datastructures.FileStorage&quot;&gt;&lt;code&gt;FileStorage&lt;/code&gt;&lt;/a&gt; documentation for more details about the used data structure.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="488b34067f73d98801af63e52046ae7793c919bd" translate="yes" xml:space="preserve">
          <source>See the Lighty docs for more information on &lt;a href=&quot;https://redmine.lighttpd.net/projects/lighttpd/wiki/Docs_ModFastCGI&quot;&gt;FastCGI and Python&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c53229e4a94b40ce00a56bc61788752a9e5b400a" translate="yes" xml:space="preserve">
          <source>Sent with a preflight request to indicate which headers will be sent with the cross origin request. Set &lt;a href=&quot;#werkzeug.wrappers.cors.CORSResponseMixin.access_control_allow_headers&quot;&gt;&lt;code&gt;access_control_allow_headers&lt;/code&gt;&lt;/a&gt; on the response to indicate which headers are allowed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cf27c3466b608270bc398d9523bcc95e5bd27acb" translate="yes" xml:space="preserve">
          <source>Sent with a preflight request to indicate which method will be used for the cross origin request. Set &lt;a href=&quot;#werkzeug.wrappers.cors.CORSResponseMixin.access_control_allow_methods&quot;&gt;&lt;code&gt;access_control_allow_methods&lt;/code&gt;&lt;/a&gt; on the response to indicate which methods are allowed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9a483e8de3b320718800de3f10a29913fd442ed5" translate="yes" xml:space="preserve">
          <source>Serve Shared Static Files</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3db10d807fcb34bf91aa208e73318fb2a9472d8b" translate="yes" xml:space="preserve">
          <source>Server Setup</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b6f74cfa7ce6a63ad4fb319c7bf13f9e08548bf6" translate="yes" xml:space="preserve">
          <source>Serving WSGI Applications</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="857163312c2fad64929681ec245f9e7712245654" translate="yes" xml:space="preserve">
          <source>Serving and Testing</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0a1b7c19f4cdde2ef77aba4aac3ef100622045bb" translate="yes" xml:space="preserve">
          <source>Set the etag, and override the old one if there was one.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="255e273054b03d05b4961764f4c58c92671ab5c0" translate="yes" xml:space="preserve">
          <source>Set this to True and the rule will never match but will create a URL that can be build. This is useful if you have resources on a subdomain or folder that are not handled by the WSGI application (like static data)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f43b0d5cda683750fe658098c735682abc3dc2dd" translate="yes" xml:space="preserve">
          <source>Sets a cookie. The parameters are the same as in the cookie &lt;code&gt;Morsel&lt;/code&gt; object in the Python standard library but it accepts unicode data, too.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8fbdc75194df3f9ad41fc9bc0f8dfa4566697913" translate="yes" xml:space="preserve">
          <source>Sets a new string as response. The value set must be either a unicode or bytestring. If a unicode string is set it&amp;rsquo;s encoded automatically to the charset of the response (utf-8 by default).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e843d394d377af92e2175eef2b596175062df248" translate="yes" xml:space="preserve">
          <source>Sets the units to &lt;code&gt;None&lt;/code&gt; which indicates that the header should no longer be used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="70e664cdd61273b1c4f7cf8c190f8f0d0bf18f5b" translate="yes" xml:space="preserve">
          <source>Shortcut methods are available for many HTTP methods:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6c971452d942db2001b96b325cc8624ab552c47a" translate="yes" xml:space="preserve">
          <source>Should this response object automatically set the content-length header if possible? This is true by default.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cf3fd2066cf3caf438be59fcf8f91518c06bf329" translate="yes" xml:space="preserve">
          <source>Should this response object correct the location header to be RFC conformant? This is true by default.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="84a4431ccc626e00c71eaed27ab5e698a86f5d63" translate="yes" xml:space="preserve">
          <source>Shutting Down The Server</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b4dd84aef0dd2f3da381bbead0e5772fc8ad1196" translate="yes" xml:space="preserve">
          <source>Similar to the &lt;a href=&quot;#werkzeug.datastructures.ETags&quot;&gt;&lt;code&gt;ETags&lt;/code&gt;&lt;/a&gt; class this implements a set-like structure. Unlike &lt;a href=&quot;#werkzeug.datastructures.ETags&quot;&gt;&lt;code&gt;ETags&lt;/code&gt;&lt;/a&gt; this is case insensitive and used for vary, allow, and content-language headers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fcdc8d4ac9a61066e7eedf6b14301ffdd6de40bc" translate="yes" xml:space="preserve">
          <source>Simple Aborting</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="12eb4ce9fbcebd63905b057381d7769da9564bb9" translate="yes" xml:space="preserve">
          <source>Simple method to update the ranges.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4cfbcf5689a7a189002cd87db6a961ca90ad6a9e" translate="yes" xml:space="preserve">
          <source>Simple test application that dumps the environment. You can use it to check if Werkzeug is working properly:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9494e62d4177dc5db570cd9e3a002d315ff9ced8" translate="yes" xml:space="preserve">
          <source>Since Nginx doesn&amp;rsquo;t load FastCGI apps, you have to do it by yourself. You can either write an &lt;code&gt;init.d&lt;/code&gt; script for that or execute it inside a screen session:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dfd3e6e8e52529ed992a8a7022e7757f0aa24f7d" translate="yes" xml:space="preserve">
          <source>Since Nginx doesn&amp;rsquo;t start your server for you, you have to do it by yourself. You can either write an &lt;code&gt;init.d&lt;/code&gt; script for that or execute it inside a screen session:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7e921e49213b3c89b5ee7a38f9f1ba595ed66dab" translate="yes" xml:space="preserve">
          <source>Since Werkzeug 0.6 it&amp;rsquo;s safe to use the same response object for multiple WSGI responses.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c7bc90c15f70fe27d72d23217470b15e05b441d5" translate="yes" xml:space="preserve">
          <source>Since disconnections cannot be reliably detected and are unspecified by WSGI to a large extent this might or might not be raised if a client is gone.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4f0e41adddb6392eb58031608d742db93c1dea7e" translate="yes" xml:space="preserve">
          <source>Since early Python 2 days unicode was part of all default Python builds. It allows developers to write applications that deal with non-ASCII characters in a straightforward way. But working with unicode requires a basic knowledge about that matter, especially when working with libraries that do not support it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4e65ff44715fb48e82c6c17548282712b4a40e76" translate="yes" xml:space="preserve">
          <source>Since this is not the best debugging environment, Werkzeug provides a WSGI middleware that renders nice tracebacks, optionally with an interactive debug console to execute code in any frame.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2ffde51d109faa1abaae32fc41c24fde3c327664" translate="yes" xml:space="preserve">
          <source>Since version 0.10, there are two backends the reloader supports: &lt;code&gt;stat&lt;/code&gt; and &lt;code&gt;watchdog&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="31d394cf8aa009221e91e163d057667367d60920" translate="yes" xml:space="preserve">
          <source>So an &lt;code&gt;&amp;ouml;&lt;/code&gt; might look totally different depending on the encoding which makes it hard to work with it. The solution is using the &lt;code&gt;unicode&lt;/code&gt; type (as we did above, note the &lt;code&gt;u&lt;/code&gt; prefix before the string). The unicode type does not store the bytes for &lt;code&gt;&amp;ouml;&lt;/code&gt; but the information, that this is a &lt;code&gt;LATIN SMALL LETTER O WITH DIAERESIS&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e71186cf9fe71471554c343127aa9cf37ea7fb5d" translate="yes" xml:space="preserve">
          <source>So how do we find our way from the endpoint to a function? That&amp;rsquo;s up to you. The way we will do it in this tutorial is by calling the method &lt;code&gt;on_&lt;/code&gt; + endpoint on the class itself. Here is how this works:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="47837237b9ec03d112350b513042b71f867f9f86" translate="yes" xml:space="preserve">
          <source>So imagine your standard WSGI &amp;ldquo;Hello World&amp;rdquo; application:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="74bfec49979ca50529c58d8cadcede619220d5be" translate="yes" xml:space="preserve">
          <source>So what does that do? First of all we create a new &lt;a href=&quot;#werkzeug.routing.Map&quot;&gt;&lt;code&gt;Map&lt;/code&gt;&lt;/a&gt; which stores a bunch of URL rules. Then we pass it a list of &lt;a href=&quot;#werkzeug.routing.Rule&quot;&gt;&lt;code&gt;Rule&lt;/code&gt;&lt;/a&gt; objects.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6b9bfedac0012c0b85b4e27fcd21f82226bd4baf" translate="yes" xml:space="preserve">
          <source>So what is missing for this view to work is the template. We will create this later, let&amp;rsquo;s first also write the other views and then do the templates in one go.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8d879c7bb9df1cb102508c7cfac8092c8cc4e1c6" translate="yes" xml:space="preserve">
          <source>So what you are doing is not &lt;em&gt;returning&lt;/em&gt; the response objects from your WSGI application but &lt;em&gt;calling&lt;/em&gt; it as WSGI application inside your WSGI application and returning the return value of that call.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="38c2b619f97c1afa7ad293c12fbeefbaf9a159ae" translate="yes" xml:space="preserve">
          <source>Some edge cases, like modules that failed to import correctly, are not handled by the stat reloader for performance reasons. The watchdog reloader monitors such files too.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="01706013cfdbcb0fc543d3c97784f3f4c235d630" translate="yes" xml:space="preserve">
          <source>Some examples:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4be70c009bba40db7a57f3d87904f3f3753fc1e6" translate="yes" xml:space="preserve">
          <source>Some headers are available as mutable structures. For example most of the &lt;code&gt;Content-&lt;/code&gt; headers are sets of values:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4d5ab2de3c07eaa9bb902596d7c433aaa0ebf088" translate="yes" xml:space="preserve">
          <source>Sometimes applications may use the &lt;code&gt;write()&lt;/code&gt; callable returned by the &lt;code&gt;start_response&lt;/code&gt; function. This tries to resolve such edge cases automatically. But if you don&amp;rsquo;t get the expected output you should set &lt;code&gt;buffered&lt;/code&gt; to &lt;code&gt;True&lt;/code&gt; which enforces buffering.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6a7229ea223c747359cb9276861abd2eddb6c6a8" translate="yes" xml:space="preserve">
          <source>Sometimes it&amp;rsquo;s convenient to just raise an exception by the error code, without importing the exception and looking up the name etc. For this purpose there is the &lt;a href=&quot;#werkzeug.exceptions.abort&quot;&gt;&lt;code&gt;abort()&lt;/code&gt;&lt;/a&gt; function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2021290ad42679ae2b847e852ed607af416ce46f" translate="yes" xml:space="preserve">
          <source>Sometimes you get an URL by a user that just isn&amp;rsquo;t a real URL because it contains unsafe characters like &amp;lsquo; &amp;lsquo; and so on. This function can fix some of the problems in a similar way browsers handle data entered by the user:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c4bc59f64be4981f3108a332252ba1cc767ba0c5" translate="yes" xml:space="preserve">
          <source>Sooner or later you have some things you want to have in every single view or helper function or whatever. In PHP the way to go are global variables. However, that isn&amp;rsquo;t possible in WSGI applications without a major drawback: As soon as you operate on the global namespace your application isn&amp;rsquo;t thread-safe any longer.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3d04559ea4a307d4a8862457ac2ba3742a68c857" translate="yes" xml:space="preserve">
          <source>Special HTTP Exceptions</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ad8078f6ed963e6902ccecc94eb87e7079dad730" translate="yes" xml:space="preserve">
          <source>Special note for &lt;code&gt;mimetype&lt;/code&gt; and &lt;code&gt;content_type&lt;/code&gt;: For most mime types &lt;code&gt;mimetype&lt;/code&gt; and &lt;code&gt;content_type&lt;/code&gt; work the same, the difference affects only &amp;lsquo;text&amp;rsquo; mimetypes. If the mimetype passed with &lt;code&gt;mimetype&lt;/code&gt; is a mimetype starting with &lt;code&gt;text/&lt;/code&gt;, the charset parameter of the response object is appended to it. In contrast the &lt;code&gt;content_type&lt;/code&gt; parameter is always added as header unmodified.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d711000d3589d7959f7c7f63997b3767f25fd48e" translate="yes" xml:space="preserve">
          <source>Special note on the &lt;code&gt;get_data&lt;/code&gt; method: Calling this loads the full request data into memory. This is only safe to do if the &lt;code&gt;max_content_length&lt;/code&gt; is set. Also you can &lt;em&gt;either&lt;/em&gt; read the stream &lt;em&gt;or&lt;/em&gt; call &lt;code&gt;get_data()&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="221f9e596c12942fcee54349fda367f9dbd51ece" translate="yes" xml:space="preserve">
          <source>Start a WSGI application. Optional features include a reloader, multithreading and fork support.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="73e7f5b9981dd871aec8dc2ce4c2c10b50c5f4a3" translate="yes" xml:space="preserve">
          <source>Starting with Werkzeug 0.11 the debug console is protected by a PIN. This is a security helper to make it less likely for the debugger to be exploited if you forget to disable it when deploying to production. The PIN based authentication is enabled by default.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1f6615d39d37d641ea2cc463662defdc7d05ec39" translate="yes" xml:space="preserve">
          <source>Starting with Werkzeug 0.3 some of the builtin classes raise exceptions that look like regular python exceptions (eg &lt;a href=&quot;https://docs.python.org/3/library/exceptions.html#KeyError&quot;&gt;&lt;code&gt;KeyError&lt;/code&gt;&lt;/a&gt;) but are &lt;a href=&quot;#werkzeug.exceptions.BadRequest&quot;&gt;&lt;code&gt;BadRequest&lt;/code&gt;&lt;/a&gt; HTTP exceptions at the same time. This decision was made to simplify a common pattern where you want to abort if the client tampered with the submitted form data in a way that the application can&amp;rsquo;t recover properly and should abort with &lt;code&gt;400 BAD REQUEST&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="87c4ce94040ae41fa3d952fbf4cd0b141410896f" translate="yes" xml:space="preserve">
          <source>Starting with Werkzeug 0.6.1, the server will now switch between ipv4 and ipv6 based on your operating system&amp;rsquo;s configuration. This means if that you disabled ipv6 support in your browser but your operating system is preferring ipv6, you will be unable to connect to your server. In that situation, you can either remove the localhost entry for &lt;code&gt;::1&lt;/code&gt; or explicitly bind the hostname to an ipv4 address (&lt;code&gt;127.0.0.1&lt;/code&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="376bc401a231a96d6828c618c9f89edd827b37e6" translate="yes" xml:space="preserve">
          <source>Starting with Werkzeug 0.7 it&amp;rsquo;s also possible to do matching on the whole host names instead of just the subdomain. To enable this feature you need to pass &lt;code&gt;host_matching=True&lt;/code&gt; to the &lt;a href=&quot;#werkzeug.routing.Map&quot;&gt;&lt;code&gt;Map&lt;/code&gt;&lt;/a&gt; constructor and provide the &lt;code&gt;host&lt;/code&gt; argument to all routes:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="71d2942879f0a817fd352d57b0d8c7ac11c873b6" translate="yes" xml:space="preserve">
          <source>Starting with Werkzeug 0.7 the development server provides a way to shut down the server after a request. This currently only works with Python 2.6 and later and will only work with the development server. To initiate the shutdown you have to call a function named &lt;code&gt;'werkzeug.server.shutdown'&lt;/code&gt; in the WSGI environment:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="26b31d134f3df426443bf49f1dbd5de119212e19" translate="yes" xml:space="preserve">
          <source>Status code used in combination with &lt;code&gt;If-Match&lt;/code&gt;, &lt;code&gt;If-None-Match&lt;/code&gt;, or &lt;code&gt;If-Unmodified-Since&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9dd7c06ccbb1557914325f28e073f049778436b9" translate="yes" xml:space="preserve">
          <source>Status code you should return if a connection to an upstream server times out.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ac751212c9a23143bd512bd757a758a825bc9201" translate="yes" xml:space="preserve">
          <source>Status code you should return if a service is temporarily unavailable.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c4efb6996ae36664e9c8ab2da511e9f8038eae55" translate="yes" xml:space="preserve">
          <source>Step 0: A Basic WSGI Introduction</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5769c0339f27e8b30c92e1f58df4244c3b022b2a" translate="yes" xml:space="preserve">
          <source>Step 1: Creating the Folders</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="909885dc70627a03bc91b5470891467a15a6b031" translate="yes" xml:space="preserve">
          <source>Step 2: The Base Structure</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9f908eb8430844dcd216be7839a152a75b9cc4ab" translate="yes" xml:space="preserve">
          <source>Step 3: The Environment</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="caf49e13be0a79f31dbb56d7963d3e2f27b3ce58" translate="yes" xml:space="preserve">
          <source>Step 4: The Routing</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="314f28f108bbd0a97b42ffbc9b075d8a27dc1455" translate="yes" xml:space="preserve">
          <source>Step 5: The First View</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="64661ab6e8af344ea809119c3ee6808ffcb69662" translate="yes" xml:space="preserve">
          <source>Step 6: Redirect View</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="30bc3850be62a39039d0fdbeaa36d6dd0dda7b31" translate="yes" xml:space="preserve">
          <source>Step 7: Detail View</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5d105d3a21e4af5e377a6e0e9b346f8b718ae1a9" translate="yes" xml:space="preserve">
          <source>Step 8: Templates</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="68383212e0ef46dc2e64c850f78bbe360beb38e3" translate="yes" xml:space="preserve">
          <source>Step 9: The Style</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2b9cb92efd6034a1bad60ceec7cc3f9b99ef46c9" translate="yes" xml:space="preserve">
          <source>Store that file somewhere where you will find it again (eg: &lt;code&gt;/var/www/yourapplication&lt;/code&gt;) and make sure that &lt;code&gt;yourapplication&lt;/code&gt; and all the libraries that are in use are on the python load path. If you don&amp;rsquo;t want to install it system wide consider using a &lt;a href=&quot;https://pypi.org/project/virtualenv/&quot;&gt;virtual python&lt;/a&gt; instance.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="48a58cf8e0c38f71b557c742b8155c4690efd5ef" translate="yes" xml:space="preserve">
          <source>Subclasses can override this method to disallow the access to certain files. However by providing &lt;code&gt;disallow&lt;/code&gt; in the constructor this method is overwritten.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="75b850aad4d5b573f14715b4692819af4f2f20c9" translate="yes" xml:space="preserve">
          <source>Subclasses of &lt;code&gt;RuleFactory&lt;/code&gt; have to override this method and return an iterable of rules.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="91f23c6e9e55cf9a05b380eabc02c9686700b06c" translate="yes" xml:space="preserve">
          <source>Superclass of &lt;a href=&quot;#werkzeug.urls.URL&quot;&gt;&lt;code&gt;URL&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#werkzeug.urls.BytesURL&quot;&gt;&lt;code&gt;BytesURL&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="57f86567ded0db1e1f6b070117ac9cb7ed983787" translate="yes" xml:space="preserve">
          <source>Takes the same arguments as the &lt;a href=&quot;#werkzeug.test.EnvironBuilder&quot;&gt;&lt;code&gt;EnvironBuilder&lt;/code&gt;&lt;/a&gt; class with some additions: You can provide a &lt;a href=&quot;#werkzeug.test.EnvironBuilder&quot;&gt;&lt;code&gt;EnvironBuilder&lt;/code&gt;&lt;/a&gt; or a WSGI environment as only argument instead of the &lt;a href=&quot;#werkzeug.test.EnvironBuilder&quot;&gt;&lt;code&gt;EnvironBuilder&lt;/code&gt;&lt;/a&gt; arguments and two optional keyword arguments (&lt;code&gt;as_tuple&lt;/code&gt;, &lt;code&gt;buffered&lt;/code&gt;) that change the type of the return value or the way the application is executed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f9f882a7cfbac9fa3cff0ad94e26ffd24816fce8" translate="yes" xml:space="preserve">
          <source>Test Utilities</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7ba5b24b232ace23c2adb47b8f664e334993549b" translate="yes" xml:space="preserve">
          <source>Test if a rule would match. Works like &lt;code&gt;match&lt;/code&gt; but returns &lt;code&gt;True&lt;/code&gt; if the URL matches, or &lt;code&gt;False&lt;/code&gt; if it does not exist.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9d2d252fcd07a541793baf93a9ba85f97d53f28f" translate="yes" xml:space="preserve">
          <source>Testing API</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eb7c7ce2e522cbbe3cb3049cfd78e27064293760" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#werkzeug.datastructures.FileStorage&quot;&gt;&lt;code&gt;FileStorage&lt;/code&gt;&lt;/a&gt; class is a thin wrapper over incoming files. It is used by the request object to represent uploaded files. All the attributes of the wrapper stream are proxied by the file storage so it&amp;rsquo;s possible to do &lt;code&gt;storage.read()&lt;/code&gt; instead of the long form &lt;code&gt;storage.stream.read()&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="501c9be3cceb3b54de8b818b355a15351bb3289d" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#werkzeug.routing.MapAdapter.match&quot;&gt;&lt;code&gt;MapAdapter.match()&lt;/code&gt;&lt;/a&gt; method can then either return a tuple in the form &lt;code&gt;(endpoint, args)&lt;/code&gt; or raise one of the three exceptions &lt;a href=&quot;../exceptions/index#werkzeug.exceptions.NotFound&quot;&gt;&lt;code&gt;NotFound&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../exceptions/index#werkzeug.exceptions.MethodNotAllowed&quot;&gt;&lt;code&gt;MethodNotAllowed&lt;/code&gt;&lt;/a&gt;, or &lt;code&gt;RequestRedirect&lt;/code&gt;. For more details about those exceptions have a look at the documentation of the &lt;a href=&quot;#werkzeug.routing.MapAdapter.match&quot;&gt;&lt;code&gt;MapAdapter.match()&lt;/code&gt;&lt;/a&gt; method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b7ec7da1a76f565f90530aad18a6e0da4374de6c" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#werkzeug.test.EnvironBuilder&quot;&gt;&lt;code&gt;EnvironBuilder&lt;/code&gt;&lt;/a&gt; figures out the content type automatically if you pass a dict to the constructor as &lt;code&gt;data&lt;/code&gt;. If you provide a string or an input stream you have to do that yourself.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="390575e656b01cfe0591f03a967a0b98a0603e59" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#werkzeug.wrappers.Request&quot;&gt;&lt;code&gt;Request&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#werkzeug.wrappers.Response&quot;&gt;&lt;code&gt;Response&lt;/code&gt;&lt;/a&gt; classes subclass the &lt;a href=&quot;#werkzeug.wrappers.BaseRequest&quot;&gt;&lt;code&gt;BaseRequest&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#werkzeug.wrappers.BaseResponse&quot;&gt;&lt;code&gt;BaseResponse&lt;/code&gt;&lt;/a&gt; classes and implement all the mixins Werkzeug provides:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6305034d849901c6374715d7549ebe3f54c304e7" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#werkzeug.wrappers.Response&quot;&gt;&lt;code&gt;Response&lt;/code&gt;&lt;/a&gt; on the other hand is a standard WSGI application that you can create. The simple hello world in Werkzeug looks like this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="28edb5ce2594be2f93059a811ed886ae659de914" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../debug/index&quot;&gt;interactive debugger&lt;/a&gt; is also a middleware that can be applied manually, although it is typically used automatically with the &lt;a href=&quot;../serving/index&quot;&gt;development server&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="edaab624ee7482226df2801114f4eea23f5ceb3b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Accept-Ranges&lt;/code&gt; header. Even though the name would indicate that multiple values are supported, it must be one string token only.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="00a7c67795c40d848822d799fca9d24a793f93f8" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Authorization&lt;/code&gt; object in parsed form.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6c3966d9dfb0a550fdda2193b5ce5bd62566eb01" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Content-Range&lt;/code&gt; header as a &lt;a href=&quot;../datastructures/index#werkzeug.datastructures.ContentRange&quot;&gt;&lt;code&gt;ContentRange&lt;/code&gt;&lt;/a&gt; object. Available even if the header is not set.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b3dc395e43e70030d3cf8eb8477894cb24d1c0ab" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;PATH_INFO&lt;/code&gt; in the environ is the path value after percent-decoding. For example, the raw path &lt;code&gt;/hello%2fworld&lt;/code&gt; would show up from the WSGI server to Werkzeug as &lt;code&gt;/hello/world&lt;/code&gt;. This loses the information that the slash was a raw character as opposed to a path separator.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c67a68359558fb50f8c80d3b727ebb8c78515eb7" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;WWW-Authenticate&lt;/code&gt; header in a parsed form.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5b3943eb0254a9fe0fde485bd4541a9415e82b1f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;application&lt;/code&gt; is still a valid WSGI application that accepts the environment and &lt;code&gt;start_response&lt;/code&gt; callable.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cdd4f60d0b1d1704025bb53fdf8718fa87c0f746" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;build&lt;/code&gt; function also accepts an argument called &lt;code&gt;force_external&lt;/code&gt; which, if you set it to &lt;code&gt;True&lt;/code&gt; will force external URLs. Per default external URLs (include the server name) will only be used if the target URL is on a different subdomain.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2e5a50166de1bdc6dd37ac7674cd08c009373a6c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;cls&lt;/code&gt; parameter was added.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1f72f59bbb86725091984fd3e811d6cfa463a397" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;create_app&lt;/code&gt; factory function can be used to create a new instance of our application. Not only will it pass some parameters as configuration to the application but also optionally add a WSGI middleware that exports static files. This way we have access to the files from the static folder even when we are not configuring our server to provide them which is very helpful for development.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6678aeb2ce175d39478570c153e73324b941469f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;evalex&lt;/code&gt; keyword argument allows evaluating expressions in a traceback&amp;rsquo;s frame context.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f5e37d6b5f3fcf6dd2bfa19e306084733c5bdecd" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;follow_redirects&lt;/code&gt; parameter was added to &lt;a href=&quot;#werkzeug.test.Client.open&quot;&gt;&lt;code&gt;open()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f25da95b0729fbb76e7b597796a24e6cf36b611f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;get_remote_addr&lt;/code&gt; method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f83f41dfec2272d29e4ce7d9a4c77975cfd1fab9" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ident_func&lt;/code&gt; parameter can be added to override the default ident function for the wrapped locals.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0a8c2c200c8c9ac5202fa19d0d5d76e145e191f3" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;num_proxies&lt;/code&gt; argument and attribute.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="354c65b2ebcc360f57ecd75036dd2f4b1889ceda" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;pathformat&lt;/code&gt; by default is autodetection but needs to be set when working with URLs of a specific system. The supported values are &lt;code&gt;'windows'&lt;/code&gt; when working with Windows or DOS paths and &lt;code&gt;'posix'&lt;/code&gt; when working with posix paths.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c9d2793d2ba0c86fdfd9f90606f5b5feb09bc734" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;watchdog&lt;/code&gt; backend uses filesystem events, and is much faster than &lt;code&gt;stat&lt;/code&gt;. It requires the &lt;a href=&quot;https://pypi.org/project/watchdog/&quot;&gt;watchdog&lt;/a&gt; module to be installed. The recommended way to achieve this is to add &lt;code&gt;Werkzeug[watchdog]&lt;/code&gt; to your requirements file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="15b8ba701e8de94530f3f359cd7a592eab0de128" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;www_authenticate&lt;/code&gt; argument should be used to set the &lt;code&gt;WWW-Authenticate&lt;/code&gt; header. This is used for HTTP basic auth and other schemes. Use &lt;a href=&quot;../datastructures/index#werkzeug.datastructures.WWWAuthenticate&quot;&gt;&lt;code&gt;WWWAuthenticate&lt;/code&gt;&lt;/a&gt; to create correctly formatted values. Strictly speaking a 401 response is invalid if it doesn&amp;rsquo;t provide at least one value for this header, although real clients typically don&amp;rsquo;t care.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3934f4800447ec3a330664a36b551391080bc466" translate="yes" xml:space="preserve">
          <source>The Age response-header field conveys the sender&amp;rsquo;s estimate of the amount of time since the response (or its revalidation) was generated at the origin server.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6ac81cd61e33292d3a79d7577ea6d5a017843fbb" translate="yes" xml:space="preserve">
          <source>The Allow entity-header field lists the set of methods supported by the resource identified by the Request-URI. The purpose of this field is strictly to inform the recipient of valid methods associated with the resource. An Allow header field MUST be present in a 405 (Method Not Allowed) response.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ac12e74171011e81a8e8e28ea639f419d80c23c9" translate="yes" xml:space="preserve">
          <source>The Cache-Control general-header field is used to specify directives that MUST be obeyed by all caching mechanisms along the request/response chain.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dec50acd29d2736ad423db2e82324ad88ed1003b" translate="yes" xml:space="preserve">
          <source>The Content-Encoding entity-header field is used as a modifier to the media-type. When present, its value indicates what additional content codings have been applied to the entity-body, and thus what decoding mechanisms must be applied in order to obtain the media-type referenced by the Content-Type header field.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="90380b3f4f49772a2149227c369986e78ae611da" translate="yes" xml:space="preserve">
          <source>The Content-Language entity-header field describes the natural language(s) of the intended audience for the enclosed entity. Note that this might not be equivalent to all the languages used within the entity-body.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="97caa4b0f397680c8eeefda38dc644ffc4d7d96a" translate="yes" xml:space="preserve">
          <source>The Content-Length entity-header field indicates the size of the entity-body in bytes or, in the case of the HEAD method, the size of the entity-body that would have been sent had the request been a GET.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9d7f6d342c172d62a965c69dba7b145987638e00" translate="yes" xml:space="preserve">
          <source>The Content-Length entity-header field indicates the size of the entity-body, in decimal number of OCTETs, sent to the recipient or, in the case of the HEAD method, the size of the entity-body that would have been sent had the request been a GET.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="594294d14b30c0b0983066b7be9d6afcae04f1c7" translate="yes" xml:space="preserve">
          <source>The Content-Location entity-header field MAY be used to supply the resource location for the entity enclosed in the message when that entity is accessible from a location separate from the requested resource&amp;rsquo;s URI.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a4703ab6700703c677f880928f854b7a8be748ad" translate="yes" xml:space="preserve">
          <source>The Content-MD5 entity-header field, as defined in RFC 1864, is an MD5 digest of the entity-body for the purpose of providing an end-to-end message integrity check (MIC) of the entity-body. (Note: a MIC is good for detecting accidental modification of the entity-body in transit, but is not proof against malicious attacks.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ed122cb589df2d912e5f0c51d9e4b7b0dea6c686" translate="yes" xml:space="preserve">
          <source>The Content-Security-Policy header adds an additional layer of security to help detect and mitigate certain types of attacks.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1e872f17b1643ebfe7ac4194f50173f8d653163c" translate="yes" xml:space="preserve">
          <source>The Content-Security-Policy-Report-Only header adds a csp policy that is not enforced but is reported thereby helping detect certain types of attacks.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0b7cfc0dba145ac8031fb0855e7e3468b5963b6d" translate="yes" xml:space="preserve">
          <source>The Content-Type entity-header field indicates the media type of the entity-body sent to the recipient or, in the case of the HEAD method, the media type that would have been sent had the request been a GET.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8c86e72d6d75652eda14adb1731029981017d99c" translate="yes" xml:space="preserve">
          <source>The Date general-header field represents the date and time at which the message was originated, having the same semantics as orig-date in RFC 822.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e0a646658da96c0cb47a6b185ff6ec42d490b38f" translate="yes" xml:space="preserve">
          <source>The Expires entity-header field gives the date/time after which the response is considered stale. A stale cache entry may not normally be returned by a cache.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8e9173a33fcf0c3920e5cdaff48d0f54e9fde1e6" translate="yes" xml:space="preserve">
          <source>The Filesystem</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="390605c393b66e259408c78ffd9d21d9901d7330" translate="yes" xml:space="preserve">
          <source>The HTTP status code as a number.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="88a6e49302451f6c84624e1b40ce69ebc8f48dad" translate="yes" xml:space="preserve">
          <source>The HTTP status code as a string.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8e07703b480704b84a2090be816080822c752ecc" translate="yes" xml:space="preserve">
          <source>The Last-Modified entity-header field indicates the date and time at which the origin server believes the variant was last modified.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b595e1d53ab0bb188fd5cb072ae711774c3e4769" translate="yes" xml:space="preserve">
          <source>The Location response-header field is used to redirect the recipient to a location other than the Request-URI for completion of the request or identification of a new resource.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="798020449f134f80412accf053749b8a15def0d0" translate="yes" xml:space="preserve">
          <source>The Max-Forwards request-header field provides a mechanism with the TRACE and OPTIONS methods to limit the number of proxies or gateways that can forward the request to the next inbound server.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e4c08664a343ce23990542efa9cee3c2e4895255" translate="yes" xml:space="preserve">
          <source>The Pragma general-header field is used to include implementation-specific directives that might apply to any recipient along the request/response chain. All pragma directives specify optional behavior from the viewpoint of the protocol; however, some systems MAY require that behavior be consistent with the directives.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="59079e95f6269de35d12af21fd168be397aec27f" translate="yes" xml:space="preserve">
          <source>The Python standard library has a concept called &amp;ldquo;thread locals&amp;rdquo; (or thread-local data). A thread local is a global object in which you can put stuff in and get back later in a thread-safe and thread-specific way. That means that whenever you set or get a value on a thread local object, the thread local object checks in which thread you are and retrieves the value corresponding to your thread (if one exists). So, you won&amp;rsquo;t accidentally get another thread&amp;rsquo;s data.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fe93415c606912dff738740b9170779ef15371f7" translate="yes" xml:space="preserve">
          <source>The Referer[sic] request-header field allows the client to specify, for the server&amp;rsquo;s benefit, the address (URI) of the resource from which the Request-URI was obtained (the &amp;ldquo;referrer&amp;rdquo;, although the header field is misspelled).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fc12ebf75bde2ec54e98ce7b31906d4d79e94250" translate="yes" xml:space="preserve">
          <source>The Retry-After response-header field can be used with a 503 (Service Unavailable) response to indicate how long the service is expected to be unavailable to the requesting client.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f401a04579c4562634ec738e6d3b72795d3fc71a" translate="yes" xml:space="preserve">
          <source>The URI from Request-URI of the Request-Line; duplicated because proxies are allowed to change the Request-Line in transit. HTTP digest auth only.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9549a418d929149541d4d5a895aef0506154cf33" translate="yes" xml:space="preserve">
          <source>The URL arguments as &lt;code&gt;MultiDict&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="62df2008444856eb510873fe9ffbb945bc0f1bb0" translate="yes" xml:space="preserve">
          <source>The URL parameters as raw bytestring.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="99e9de5a355418a411eff4e8ad42477438336ebe" translate="yes" xml:space="preserve">
          <source>The Vary field value indicates the set of request-header fields that fully determines, while the response is fresh, whether a cache is permitted to use the response to reply to a subsequent request without revalidation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4f581d4df5439dabf207ad13c0bf83405a925f3c" translate="yes" xml:space="preserve">
          <source>The WSGI environment contains all the information the user request transmits to the application. It is passed to the WSGI application but you can also create a WSGI environ dict using the &lt;code&gt;create_environ()&lt;/code&gt; helper:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ea34d56ebab429e81bd3542b0b66e3184f14bfcc" translate="yes" xml:space="preserve">
          <source>The WSGI environment on Python 3 works slightly different than it does on Python 2. Werkzeug hides the differences from you if you use the higher level APIs.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eff6408c29facab816cbb6e74904c6a925d8ecbc" translate="yes" xml:space="preserve">
          <source>The WSGI environment that the request object uses for data retrival.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e9440331fa370780900ee01edccb60b290071ecf" translate="yes" xml:space="preserve">
          <source>The WSGI specification (&lt;a href=&quot;https://www.python.org/dev/peps/pep-3333/#unicode-issues&quot;&gt;PEP 3333&lt;/a&gt;) decided to always use the native &lt;code&gt;str&lt;/code&gt; type. On Python 2 this means the raw bytes are passed through and can be decoded directly. On Python 3, however, the raw bytes are always decoded using the ISO-8859-1 charset to produce a Unicode string.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e0a43ba3fd9dac9491bafe004858942504c8833c" translate="yes" xml:space="preserve">
          <source>The WSGI specification (&lt;a href=&quot;https://www.python.org/dev/peps/pep-3333/#unicode-issues&quot;&gt;PEP 3333&lt;/a&gt;) does not provide a way to get the original value, so it is impossible to route some types of data in the path. The most compatible way to work around this is to send problematic data in the query string instead of the path.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="45b63bf9c587805f4ab38f2744e89be0d0d09bf2" translate="yes" xml:space="preserve">
          <source>The WSGI specification requires that all middlewares and gateways respect the &lt;code&gt;close&lt;/code&gt; callback of the iterable returned by the application. Because it is useful to add another close action to a returned iterable and adding a custom iterable is a boring task this class can be used for that:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b2a56dfae6393bdeede385acd507b15d8ea56505" translate="yes" xml:space="preserve">
          <source>The Werkzeug reloader constantly monitors modules and paths of your web application, and restarts the server if any of the observed files change.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9118d14245ab0c95833ae576d040ecdd3bb6f1e5" translate="yes" xml:space="preserve">
          <source>The application displays important information from the WSGI environment, the Python interpreter and the installed libraries.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a67337681d0daf8e51e92e70f5a6f9d5a0780c02" translate="yes" xml:space="preserve">
          <source>The application iterator. If constructed from a string this will be a list, otherwise the object provided as application iterator. (The first argument passed to &lt;a href=&quot;#werkzeug.wrappers.BaseResponse&quot;&gt;&lt;code&gt;BaseResponse&lt;/code&gt;&lt;/a&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7185c50e0ea6b724f0592146c569e9dc03b44921" translate="yes" xml:space="preserve">
          <source>The authentication part in the URL if available, &lt;code&gt;None&lt;/code&gt; otherwise.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="633f0093b56e3e8af78bad73d17cc6a6679ff7cd" translate="yes" xml:space="preserve">
          <source>The base URL is used to extract the URL scheme, host name, port, and root path.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0bb69e58da5b33aef284d195b78c20e221868809" translate="yes" xml:space="preserve">
          <source>The basic idea here is that our &lt;code&gt;Shortly&lt;/code&gt; class is an actual WSGI application. The &lt;code&gt;__call__&lt;/code&gt; method directly dispatches to &lt;code&gt;wsgi_app&lt;/code&gt;. This is done so that we can wrap &lt;code&gt;wsgi_app&lt;/code&gt; to apply middlewares like we do in the &lt;code&gt;create_app&lt;/code&gt; function. The actual &lt;code&gt;wsgi_app&lt;/code&gt; method then creates a &lt;code&gt;Request&lt;/code&gt; object and calls the &lt;code&gt;dispatch_request&lt;/code&gt; method which then has to return a &lt;code&gt;Response&lt;/code&gt; object which is then evaluated as WSGI application again. As you can see: turtles all the way down. Both the &lt;code&gt;Shortly&lt;/code&gt; class we create, as well as any request object in Werkzeug implements the WSGI interface. As a result of that you could even return another WSGI application from the &lt;code&gt;dispatch_request&lt;/code&gt; method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c7be2f27007fb06b4cf41e32e1115de54de52a33" translate="yes" xml:space="preserve">
          <source>The basic implementation of that looks like:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="736efa08df9743fa2171ad7cf4edef92a067ae56" translate="yes" xml:space="preserve">
          <source>The basic nginx configuration looks like this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0aedf34429b8ccac14705f3b26f5c2e896d67aa8" translate="yes" xml:space="preserve">
          <source>The best match as value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5de71eebdc6d971abaffed89c1f63972f18331f3" translate="yes" xml:space="preserve">
          <source>The build method accepts an argument called &lt;code&gt;method&lt;/code&gt; which allows you to specify the method you want to have an URL built for if you have different methods for the same endpoint specified.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7f08750ec4b6bffb19c0ac2527d3605475c500f2" translate="yes" xml:space="preserve">
          <source>The builtin server supports SSL for testing purposes. If an SSL context is provided it will be used. That means a server can either run in HTTP or HTTPS mode, but not both.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ca5cd55b98e504c9a2c834e590876512d1c39bac" translate="yes" xml:space="preserve">
          <source>The charset that is assumed for URLs. Defaults to the value of &lt;a href=&quot;#werkzeug.wrappers.BaseRequest.charset&quot;&gt;&lt;code&gt;charset&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1c9aef5caacf53bd6468eaa4132ee8351388d064" translate="yes" xml:space="preserve">
          <source>The charset used to encode unicode data.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1004ddc714ac983559834378040073505adb1811" translate="yes" xml:space="preserve">
          <source>The class has to have a &lt;code&gt;__dict__&lt;/code&gt; in order for this property to work.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5321278dd0cdd68c98b0fdad486eaab6f1d00d4f" translate="yes" xml:space="preserve">
          <source>The client asked for an invalid part of the file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5e271e66cc99005cb2fd26e46c1a48e7ef9ff7af" translate="yes" xml:space="preserve">
          <source>The concept of a filesystem encoding in generally is not something you should rely on. As such if you ever need to use this function except for writing wrapper code reconsider.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e29c61cf793c62defeacc34941ab0d9d53175e26" translate="yes" xml:space="preserve">
          <source>The content length as integer. Reflected from and to the &lt;a href=&quot;#werkzeug.test.EnvironBuilder.headers&quot;&gt;&lt;code&gt;headers&lt;/code&gt;&lt;/a&gt;. Do not set if you set &lt;a href=&quot;#werkzeug.test.EnvironBuilder.files&quot;&gt;&lt;code&gt;files&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;#werkzeug.test.EnvironBuilder.form&quot;&gt;&lt;code&gt;form&lt;/code&gt;&lt;/a&gt; for auto detection.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1b88721d2feb390c4391c0433c9345c879aa7055" translate="yes" xml:space="preserve">
          <source>The content type for the request. Reflected from and to the &lt;a href=&quot;#werkzeug.test.EnvironBuilder.headers&quot;&gt;&lt;code&gt;headers&lt;/code&gt;&lt;/a&gt;. Do not set if you set &lt;a href=&quot;#werkzeug.test.EnvironBuilder.files&quot;&gt;&lt;code&gt;files&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;#werkzeug.test.EnvironBuilder.form&quot;&gt;&lt;code&gt;form&lt;/code&gt;&lt;/a&gt; for auto detection.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="111735e2286da71fc9056c29cd887d2fd6d18894" translate="yes" xml:space="preserve">
          <source>The content-length sent in the header. Usually not available</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6fb02b7480e7dd2be100a364efb2b73b19334de4" translate="yes" xml:space="preserve">
          <source>The content-type sent in the header. Usually not available</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="49d6edeba728670dbc7013894da99c0d5fea4cbd" translate="yes" xml:space="preserve">
          <source>The contents of the folder &lt;code&gt;./shared&lt;/code&gt; will now be available on &lt;code&gt;http://example.com/shared/&lt;/code&gt;. This is pretty useful during development because a standalone media server is not required. One can also mount files on the root folder and still continue to use the application because the shared data middleware forwards all unhandled requests to the application, even if the requests are below one of the shared folders.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e6fe418fada3a991a8b4e24ade87f97285f589e8" translate="yes" xml:space="preserve">
          <source>The converter should have a &lt;code&gt;regex&lt;/code&gt; attribute with a regular expression to match with. If the converter can take arguments in a URL rule, it should accept them in its &lt;code&gt;__init__&lt;/code&gt; method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="743a08ed18a60454632837e49ab9424467deec3f" translate="yes" xml:space="preserve">
          <source>The converters are defined on the &lt;code&gt;Map&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fe4a59077ef21ef6cc9cc7a52610cafdf0edd51a" translate="yes" xml:space="preserve">
          <source>The current user agent.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="67b09fad9fb8d4d7740370ec6e9d272d11422a77" translate="yes" xml:space="preserve">
          <source>The date in parsed format or &lt;code&gt;None&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c63ec046b3a2b972192a2e70d597683732f6ca79" translate="yes" xml:space="preserve">
          <source>The debugger allows the execution of arbitrary code which makes it a major security risk. &lt;strong&gt;The debugger must never be used on production machines. We cannot stress this enough. Do not enable the debugger in production.&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="683aae66db085f1411f3eb9603660165fc7533ff" translate="yes" xml:space="preserve">
          <source>The default &lt;code&gt;stat&lt;/code&gt; backend simply checks the &lt;code&gt;mtime&lt;/code&gt; of all files in a regular interval. This is sufficient for most cases, however, it is known to drain a laptop&amp;rsquo;s battery.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="453dd76353b69ac610ada9a5e9db3a22cc163509" translate="yes" xml:space="preserve">
          <source>The default implementation returns a temporary file if the total content length is higher than 500KB. Because many browsers do not provide a content length for the files only the total content length matters.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="23bfa018182bda84cc8c2c6915e49c714ee03fc8" translate="yes" xml:space="preserve">
          <source>The dev server can bind to a Unix socket instead of a TCP socket. &lt;a href=&quot;#werkzeug.serving.run_simple&quot;&gt;&lt;code&gt;run_simple()&lt;/code&gt;&lt;/a&gt; will bind to a Unix socket if the &lt;code&gt;hostname&lt;/code&gt; parameter starts with &lt;code&gt;'unix://'&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f50efad16c628694b35e0fc0892b7470a83ef0b7" translate="yes" xml:space="preserve">
          <source>The development server can optionally highlight the request logs in different colors based on the status code. Install &lt;a href=&quot;https://pypi.org/project/click/&quot;&gt;Click&lt;/a&gt; to enable this feature.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="84085aef7a2f14f76e76cf7556b466f470c91ada" translate="yes" xml:space="preserve">
          <source>The development server is not intended to be used on production systems. It was designed especially for development purposes and performs poorly under high load. For deployment setups have a look at the &lt;a href=&quot;../deployment/index#deployment&quot;&gt;Application Deployment&lt;/a&gt; pages.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e9a1bc7b50dbf3fbb1595317dc6ba415c937744d" translate="yes" xml:space="preserve">
          <source>The dict used as base for the newly create environ.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d3bc741db3ac9ae06ef70918fa345b21b47486a9" translate="yes" xml:space="preserve">
          <source>The dictionary of converters. This can be modified after the class was created, but will only affect rules added after the modification. If the rules are defined with the list passed to the class, the &lt;code&gt;converters&lt;/code&gt; parameter to the constructor has to be used instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="59c024fe7665bfd3db1fbfb8ed3d0db433242578" translate="yes" xml:space="preserve">
          <source>The difference to &lt;code&gt;make_middleware&lt;/code&gt; is that the function passed will have all the arguments copied from the inner application (name, docstring, module).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="38fed2317418ad4e033ef415fc55ae22c2623f5c" translate="yes" xml:space="preserve">
          <source>The downside of this of course is that you will have to acknowledge the certificate each time the server is reloaded. Adhoc certificates are discouraged because modern browsers do a bad job at supporting them for security reasons.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="63dc0899ec0732e7358f8c3eac660eb467d053f9" translate="yes" xml:space="preserve">
          <source>The easiest way is creating a small &lt;code&gt;start-myproject.py&lt;/code&gt; file that runs the application using the builtin server:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5dff1b8ed60c10b183033d9dd2cddc65dc12e354" translate="yes" xml:space="preserve">
          <source>The easiest way to do SSL based development with Werkzeug is by using it to generate an SSL certificate and private key and storing that somewhere and to then put it there. For the certificate you need to provide the name of your server on generation or a &lt;code&gt;CN&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="adb6ca977177134004cdb10fae76dedcd3fe812d" translate="yes" xml:space="preserve">
          <source>The easiest way to enable SSL is to start the server in adhoc-mode. In that case Werkzeug will generate an SSL certificate for you:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3784699ca12ffb9bdf4a56ceb7d939ac8f0092df" translate="yes" xml:space="preserve">
          <source>The easiest way to interactively test applications is using the &lt;a href=&quot;#werkzeug.test.EnvironBuilder&quot;&gt;&lt;code&gt;EnvironBuilder&lt;/code&gt;&lt;/a&gt;. It can create both standard WSGI environments and request objects.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b5b1aee295291416759eb16dd7f918c66b0320cd" translate="yes" xml:space="preserve">
          <source>The endpoint for this rule. This can be anything. A reference to a function, a string, a number etc. The preferred way is using a string because the endpoint is used for URL generation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7d3ff3fa5ae2891205d819bcdb048e31ff1fdedd" translate="yes" xml:space="preserve">
          <source>The environ keys &lt;code&gt;orig_remote_addr&lt;/code&gt;, &lt;code&gt;orig_wsgi_url_scheme&lt;/code&gt;, and &lt;code&gt;orig_http_host&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="51cff089c3f241d3a60731c5f1848eb90b02a414" translate="yes" xml:space="preserve">
          <source>The error message is displayed at the top. Clicking it jumps to the bottom of the traceback. Frames that represent user code, as opposed to built-ins or installed packages, are highlighted blue. Clicking a frame will show more lines for context, clicking again will hide them.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7b375e0c8202b01f233e5b0f0ba7e51776507ab2" translate="yes" xml:space="preserve">
          <source>The error stream used for the &lt;code&gt;wsgi.errors&lt;/code&gt; stream.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7bcf523d09d7e5b6bbcfc00d80938f22a5825b34" translate="yes" xml:space="preserve">
          <source>The etag parsed and unquoted. Ranges always operate on strong etags so the weakness information is not necessary.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="141f9b41fa731682325669f5f83f544911ff660d" translate="yes" xml:space="preserve">
          <source>The exception raised provides three attributes:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="90ac49553fa17bf8540dafa46890c0388ec18a81" translate="yes" xml:space="preserve">
          <source>The filename can be customized by passing &lt;code&gt;filename_format&lt;/code&gt;. If it is a string, it will be formatted using &lt;a href=&quot;https://docs.python.org/3/library/stdtypes.html#str.format&quot;&gt;&lt;code&gt;str.format()&lt;/code&gt;&lt;/a&gt; with the following fields available:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="63d52c57ef8fad2cf58ff820364ade9362923e29" translate="yes" xml:space="preserve">
          <source>The filename of the file on the client.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="99566c99bc610741938d8c8dc6d9d8bb5d923d20" translate="yes" xml:space="preserve">
          <source>The files are represented as &lt;code&gt;FileStorage&lt;/code&gt; objects which provide some common operations to work with them.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c5cae45af5017ffaafd5547c30e2fca9d5eddca0" translate="yes" xml:space="preserve">
          <source>The final result will look something like this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dd738ba0313aa56f115e1676861a2cc8a8d99812" translate="yes" xml:space="preserve">
          <source>The first argument for this exception should be a list of allowed methods. Strictly speaking the response would be invalid if you don&amp;rsquo;t provide valid methods in the header which you can do with that list.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7c1d758cb034e643bc0555e6ef223536ca4e138f" translate="yes" xml:space="preserve">
          <source>The first one can be used to limit the total content length. For example by setting it to &lt;code&gt;1024 * 1024 * 16&lt;/code&gt; the request won&amp;rsquo;t accept more than 16MB of transmitted data.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="211eec7bf11b563ec45d0fca3da32163d2c3e21e" translate="yes" xml:space="preserve">
          <source>The first time a console is opened, a dialog will prompt for a PIN that is printed to the command line. The PIN is generated in a stable way that is specific to the project. An explicit PIN can be provided through the environment variable &lt;code&gt;WERKZEUG_DEBUG_PIN&lt;/code&gt;. This can be set to a number and will become the PIN. This variable can also be set to the value &lt;code&gt;off&lt;/code&gt; to disable the PIN check entirely.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e4bcef8ef680022b4bf9c06f78ec4d59758b9804" translate="yes" xml:space="preserve">
          <source>The following classes and functions are designed to make working with the WSGI specification easier or operate on the WSGI layer. All the functionality from this module is available on the high-level &lt;a href=&quot;../wrappers/index#wrappers&quot;&gt;Request / Response classes&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="52bb3064a478ab176dabeec025b4c04a5990a119" translate="yes" xml:space="preserve">
          <source>The following error classes exist in Werkzeug:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="43772212e5e4f110d9ada531bcaa42d9cef94e42" translate="yes" xml:space="preserve">
          <source>The following example creates a WSGI environment with one uploaded file and a form field:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="904d3cc5285936b0bafc991accce0adf405fa1ed" translate="yes" xml:space="preserve">
          <source>The following formats are currently supported by the form data parser:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="56d488774cf396bf652ce149c971bd2e4341cb3b" translate="yes" xml:space="preserve">
          <source>The following functions can be used to parse incoming HTTP headers. Because Python does not provide data structures with the semantics required by &lt;a href=&quot;https://tools.ietf.org/html/rfc2616.html&quot; id=&quot;index-0&quot;&gt;&lt;strong&gt;RFC 2616&lt;/strong&gt;&lt;/a&gt;, Werkzeug implements some custom data structures that are &lt;a href=&quot;../datastructures/index#http-datastructures&quot;&gt;documented separately&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8e3d17f50a93a98d1100963d5320033d95096e07" translate="yes" xml:space="preserve">
          <source>The following functions simplify working with times in an HTTP context. Werkzeug uses offset-naive &lt;a href=&quot;https://docs.python.org/3/library/datetime.html#datetime.datetime&quot;&gt;&lt;code&gt;datetime&lt;/code&gt;&lt;/a&gt; objects internally that store the time in UTC. If you&amp;rsquo;re working with timezones in your application make sure to replace the tzinfo attribute with a UTC timezone information before processing the values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6847c5422eb9dfb9bab371974db7f6136f6f75e8" translate="yes" xml:space="preserve">
          <source>The following utilities operate on HTTP headers well but do not parse them. They are useful if you&amp;rsquo;re dealing with conditional responses or if you want to proxy arbitrary requests but want to remove WSGI-unsupported hop-by-hop headers. Also there is a function to create HTTP header strings from the parsed data.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="27eff5558231fc0de150fc91d08a7546c3fca976" translate="yes" xml:space="preserve">
          <source>The form parameters. By default an &lt;a href=&quot;../datastructures/index#werkzeug.datastructures.ImmutableMultiDict&quot;&gt;&lt;code&gt;ImmutableMultiDict&lt;/code&gt;&lt;/a&gt; is returned from this function. This can be changed by setting &lt;a href=&quot;#werkzeug.wrappers.BaseRequest.parameter_storage_class&quot;&gt;&lt;code&gt;parameter_storage_class&lt;/code&gt;&lt;/a&gt; to a different type. This might be necessary if the order of the form data is important.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="65680f6ea37d835a7d9933d7f437b8d6da581fe7" translate="yes" xml:space="preserve">
          <source>The format for the URL rules is straightforward, but explained in detail below.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4c439cd4263cde8de314bc7bb7a0e4068233024f" translate="yes" xml:space="preserve">
          <source>The format for the hashed string looks like this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="024d1d97e27029a0c6b50ecdda3d420526517ade" translate="yes" xml:space="preserve">
          <source>The full URL root (with hostname), this is the application root as IRI. See also: &lt;a href=&quot;#werkzeug.wrappers.BaseRequest.trusted_hosts&quot;&gt;&lt;code&gt;trusted_hosts&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2d3544f7504a6a5b00f233f6ced89324c261cccb" translate="yes" xml:space="preserve">
          <source>The function might return an empty filename. It&amp;rsquo;s your responsibility to ensure that the filename is unique and that you abort or generate a random filename if the function returned an empty one.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="236b13d6bdf99ba8ac14fec5fe1a5c20b92df5fd" translate="yes" xml:space="preserve">
          <source>The headers from the WSGI environ as immutable &lt;a href=&quot;../datastructures/index#werkzeug.datastructures.EnvironHeaders&quot;&gt;&lt;code&gt;EnvironHeaders&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f4cf34394a1960f10badb1d4e64c203ec3c4ccaa" translate="yes" xml:space="preserve">
          <source>The host header is automatically rewritten to the URL of the target.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4bbc6de4df1609a6aadf77a465faf9fc94604925" translate="yes" xml:space="preserve">
          <source>The host header is overwritten with the value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="148c4c5f5d8638096bcd4e084e5fd41f364e98a2" translate="yes" xml:space="preserve">
          <source>The host header is unmodified from the client request.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5cd4d0cbe9e1b4b1d0f6ea044c732b5c98eb2713" translate="yes" xml:space="preserve">
          <source>The host part of the URL if available, otherwise &lt;code&gt;None&lt;/code&gt;. The host is either the hostname or the IP address mentioned in the URL. It will not contain the port.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1138e0a8fc1a6dffd4153de12f8472a8013bd702" translate="yes" xml:space="preserve">
          <source>The host that the request originated from. Set &lt;a href=&quot;#werkzeug.wrappers.cors.CORSResponseMixin.access_control_allow_origin&quot;&gt;&lt;code&gt;access_control_allow_origin&lt;/code&gt;&lt;/a&gt; on the response to indicate which origins are allowed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9f0c7d5608552d171a5df7f47ad45d08463c798a" translate="yes" xml:space="preserve">
          <source>The implementation of the Werkzeug request and response objects are trying to guard you from common pitfalls by disallowing certain things as much as possible. This serves two purposes: high performance and avoiding of pitfalls.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="075508df0b08bbc28012d7d1c744517731e5c803" translate="yes" xml:space="preserve">
          <source>The input stream for the uploaded file. This usually points to an open temporary file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b905b1bdc1b41e7156201900676449417a604999" translate="yes" xml:space="preserve">
          <source>The input stream has no end-of-file marker. If you would call the &lt;code&gt;read()&lt;/code&gt; method on the &lt;code&gt;wsgi.input&lt;/code&gt; stream you would cause your application to hang on conforming servers. This is actually intentional however painful. Werkzeug solves that problem by wrapping the input stream in a special &lt;code&gt;LimitedStream&lt;/code&gt;. The input stream is exposed on the request objects as &lt;code&gt;stream&lt;/code&gt;. This one is either an empty stream (if the form data was parsed) or a limited stream with the contents of the input stream.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2e7966740b4227bd6aed5e8905063ca66d8a5769" translate="yes" xml:space="preserve">
          <source>The interactive debugger does not work in forking environments, such as a server that starts multiple processes. Most such environments are production servers, where the debugger should not be enabled anyway.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dc19590527b28c23e85a1cb2eb8f7672820a76c6" translate="yes" xml:space="preserve">
          <source>The inverse of this function is &lt;a href=&quot;#werkzeug.urls.url_unparse&quot;&gt;&lt;code&gt;url_unparse()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a9d4c9951e5d919aca842c67fd5bce9280fdbf48" translate="yes" xml:space="preserve">
          <source>The iterable will stop at the line where the headers ended so it can be further consumed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="db9955daf0b158c670b718e5cc4606c99264276b" translate="yes" xml:space="preserve">
          <source>The keys for the headers are of course case insensitive.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a7da2d555c7b24f108d83dbd426f9aada987b2bd" translate="yes" xml:space="preserve">
          <source>The keyword argument dumping uses &lt;code&gt;dump_options_header()&lt;/code&gt; behind the scenes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0f9a1dbabe3b01b3c38d2fbd438b7868158e0c44" translate="yes" xml:space="preserve">
          <source>The last thing you have to do is to create an Apache configuration file for your application. In this example we are telling &lt;code&gt;mod_wsgi&lt;/code&gt; to execute the application under a different user for security reasons:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="81e507e5b5b0c8ea529ea6092c2813fb1f41e103" translate="yes" xml:space="preserve">
          <source>The length of the range or &lt;code&gt;None&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="23a50f576b6a3902eff84021954bdbb1a7b0c88b" translate="yes" xml:space="preserve">
          <source>The limit however must never be higher than what the stream can output. Otherwise &lt;a href=&quot;#werkzeug.wsgi.LimitedStream.readlines&quot;&gt;&lt;code&gt;readlines()&lt;/code&gt;&lt;/a&gt; will try to read past the limit.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4224deb3a56504235fca03891c578a419c1056c0" translate="yes" xml:space="preserve">
          <source>The link detail view is very similar, we just render a template again. In addition to looking up the target, we also ask redis for the number of times the link was clicked and let it default to zero if such a key does not yet exist:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b5f0cd9895f827a1097898a420b4456e0c486cd2" translate="yes" xml:space="preserve">
          <source>The map class stores all the URL rules and some configuration parameters. Some of the configuration values are only stored on the &lt;code&gt;Map&lt;/code&gt; instance since those affect all rules, others are just defaults and can be overridden for each rule. Note that you have to specify all arguments besides the &lt;code&gt;rules&lt;/code&gt; as keyword arguments!</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f2cb35ff879629ef12b90c5e160ef392081e7284" translate="yes" xml:space="preserve">
          <source>The maximum age in seconds the access control settings can be cached for.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c7eb5ac11fbab96c7f322e891250c89067e5ca22" translate="yes" xml:space="preserve">
          <source>The middleware takes a dict that maps a path prefix to a dict describing the host to be proxied to:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cedf3d9a5a3a7e7e6561480c712dfc1dfbf4bbd5" translate="yes" xml:space="preserve">
          <source>The middleware will guess the mimetype using the Python &lt;code&gt;mimetype&lt;/code&gt; module. If it&amp;rsquo;s unable to figure out the charset it will fall back to &lt;code&gt;fallback_mimetype&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d2d1595ecab1897f01531801d8e88b52231a39f9" translate="yes" xml:space="preserve">
          <source>The mimetype (content type without charset etc.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6dee94b7edc7c1366f6de5c62f1871e3b40afbe3" translate="yes" xml:space="preserve">
          <source>The mimetype parameters as dict. For example if the content type is &lt;code&gt;text/html; charset=utf-8&lt;/code&gt; the params would be &lt;code&gt;{'charset': 'utf-8'}&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="768da8cf5afb915d837f00d34408552957950178" translate="yes" xml:space="preserve">
          <source>The mod_wsgi &lt;a href=&quot;https://modwsgi.readthedocs.io/en/develop/installation.html&quot;&gt;installation instructions&lt;/a&gt; cover installation instructions for source installations on UNIX systems.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2570cb57c4a967c9a939ad096faff9521306b69c" translate="yes" xml:space="preserve">
          <source>The most important rule about web development is &amp;ldquo;Do not trust the user&amp;rdquo;. This is especially true for incoming request data on the input stream. With WSGI this is actually a bit harder than you would expect. Because of that Werkzeug wraps the request stream for you to save you from the most prominent problems with it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9b0b3a832b70f4bc3ca1a00f184407d649637e67" translate="yes" xml:space="preserve">
          <source>The most popular one is &lt;a href=&quot;https://pypi.org/project/flup/&quot;&gt;flup&lt;/a&gt; which we will use for this guide. Make sure to have it installed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="846496118459af146ba91d71f08585da68cce345" translate="yes" xml:space="preserve">
          <source>The multipart headers as &lt;a href=&quot;#werkzeug.datastructures.Headers&quot;&gt;&lt;code&gt;Headers&lt;/code&gt;&lt;/a&gt; object. This usually contains irrelevant information but in combination with custom multipart requests the raw headers might be interesting.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8921a91f139091b3fe6ad1bddec32bf332e66543" translate="yes" xml:space="preserve">
          <source>The name of the form field.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b4e8b317a852bf1d9c673bcb10ab672301a92d07" translate="yes" xml:space="preserve">
          <source>The nonce count value transmitted by clients if a qop-header is also transmitted. HTTP digest auth only.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="00a8e6f3063a6e7d490ca0cf99e658475c3a6989" translate="yes" xml:space="preserve">
          <source>The nonce the server sent for digest auth, sent back by the client. A nonce should be unique for every 401 response for HTTP digest auth.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f917454595a3e33385f9e3b9271ab3240003b969" translate="yes" xml:space="preserve">
          <source>The opaque header from the server returned unchanged by the client. It is recommended that this string be base64 or hexadecimal data. Digest auth only.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="933e98d420f35d2cc4cffa16b0a045132fd6268b" translate="yes" xml:space="preserve">
          <source>The optional &lt;code&gt;disallow&lt;/code&gt; parameter can be a list of &lt;a href=&quot;https://docs.python.org/3/library/fnmatch.html#fnmatch.fnmatch&quot;&gt;&lt;code&gt;fnmatch()&lt;/code&gt;&lt;/a&gt; rules for files that are not accessible from the web. If &lt;code&gt;cache&lt;/code&gt; is set to &lt;code&gt;False&lt;/code&gt; no caching headers are sent.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d804587872f73726f0ac7deac61de7b917cf4fbc" translate="yes" xml:space="preserve">
          <source>The optional input stream. This and &lt;a href=&quot;#werkzeug.test.EnvironBuilder.form&quot;&gt;&lt;code&gt;form&lt;/code&gt;&lt;/a&gt; / &lt;a href=&quot;#werkzeug.test.EnvironBuilder.files&quot;&gt;&lt;code&gt;files&lt;/code&gt;&lt;/a&gt; is mutually exclusive. Also do not provide this stream if the request method is not &lt;code&gt;POST&lt;/code&gt; / &lt;code&gt;PUT&lt;/code&gt; or something comparable.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0c19ae5086a438011b48a339ed6f92c38fc5db73" translate="yes" xml:space="preserve">
          <source>The origin or &amp;lsquo;*&amp;rsquo; for any origin that may make cross origin requests.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e855650183088adfd582705f03f31c092b136b7d" translate="yes" xml:space="preserve">
          <source>The original exception that caused this 500 error. Can be used by frameworks to provide context when handling unexpected errors.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0249615ba1ea4d9e2cfab67459808818b5560af3" translate="yes" xml:space="preserve">
          <source>The original values of the headers are stored in the WSGI environ as &lt;code&gt;werkzeug.proxy_fix.orig&lt;/code&gt;, a dict.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bfa181bdba63919c44b79e5bb02556ab0dc1cdff" translate="yes" xml:space="preserve">
          <source>The parsed &lt;code&gt;If-Modified-Since&lt;/code&gt; header as datetime object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8739d5c7f64ef5719eab7b5dedf1b90baa24c1aa" translate="yes" xml:space="preserve">
          <source>The parsed &lt;code&gt;If-Range&lt;/code&gt; header.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3dd555ab87dfb8cae5b9fd670c133cacee687c36" translate="yes" xml:space="preserve">
          <source>The parsed &lt;code&gt;If-Unmodified-Since&lt;/code&gt; header as datetime object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="32ab2ece10dfafd46a8022fc23dd5751fe18aa56" translate="yes" xml:space="preserve">
          <source>The parsed &lt;code&gt;Range&lt;/code&gt; header.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="16431f01802402f16a8109a426cba17d1a242965" translate="yes" xml:space="preserve">
          <source>The parsed JSON data if &lt;code&gt;mimetype&lt;/code&gt; indicates JSON (&lt;em&gt;application/json&lt;/em&gt;, see &lt;a href=&quot;#werkzeug.wrappers.json.JSONMixin.is_json&quot;&gt;&lt;code&gt;is_json()&lt;/code&gt;&lt;/a&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2c3172fd9289fe9cb9d1b0764c4ce5521a4a2943" translate="yes" xml:space="preserve">
          <source>The parsed URL parameters (the part in the URL after the question mark).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a5197d88d17c7507400cc1c3ce86ea4d91ce5386" translate="yes" xml:space="preserve">
          <source>The password if it was part of the URL, &lt;code&gt;None&lt;/code&gt; otherwise. This undergoes URL decoding and will always be a unicode string.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="44e2fef7213041ea3087403ee99d0159a72367de" translate="yes" xml:space="preserve">
          <source>The password if it was part of the URL, &lt;code&gt;None&lt;/code&gt; otherwise. Unlike &lt;a href=&quot;#werkzeug.urls.BaseURL.password&quot;&gt;&lt;code&gt;password&lt;/code&gt;&lt;/a&gt; this one is not being decoded.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0508e436ad46cdb981bded5950ac71fd7e8f52bb" translate="yes" xml:space="preserve">
          <source>The path has to be the exact same path you define in the server config.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="003451f2390305b07ce7548bb13471b8a8acaa78" translate="yes" xml:space="preserve">
          <source>The path of the application. (aka &lt;code&gt;PATH_INFO&lt;/code&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="070f49325e189f8cf5ce7a11dc36f951021f76f0" translate="yes" xml:space="preserve">
          <source>The port in the URL as an integer if it was present, &lt;code&gt;None&lt;/code&gt; otherwise. This does not fill in default ports.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f81788c8a6270562b44d7c68f3a47ae0cdd42902" translate="yes" xml:space="preserve">
          <source>The problem with unicode is that HTTP does not know what unicode is. HTTP is limited to bytes but this is not a big problem as Werkzeug decodes and encodes for us automatically all incoming and outgoing data. Basically what this means is that data sent from the browser to the web application is per default decoded from an utf-8 bytestring into a &lt;code&gt;unicode&lt;/code&gt; string. Data sent from the application back to the browser that is not yet a bytestring is then encoded back to utf-8.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c4e2498c2aec7e0a2013c4255a1518db45154970" translate="yes" xml:space="preserve">
          <source>The query string. If you set this to a string &lt;a href=&quot;#werkzeug.test.EnvironBuilder.args&quot;&gt;&lt;code&gt;args&lt;/code&gt;&lt;/a&gt; will no longer be available.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a5a869a92f3d6339b9aa403466625384e3befda7" translate="yes" xml:space="preserve">
          <source>The reconstructed current URL as IRI. See also: &lt;a href=&quot;#werkzeug.wrappers.BaseRequest.trusted_hosts&quot;&gt;&lt;code&gt;trusted_hosts&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0bf7e81b2a68baedb6c36ce82b0a210a81fa8b60" translate="yes" xml:space="preserve">
          <source>The redirect view is easy. All it has to do is to look for the link in redis and redirect to it. Additionally we will also increment a counter so that we know how often a link was clicked:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5da4df5bfad1333922a47403bf537575f86f1786" translate="yes" xml:space="preserve">
          <source>The remote address of the client.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="171cb57be52c600790ff5e3a42853b6525801070" translate="yes" xml:space="preserve">
          <source>The request and response objects wrap the WSGI environment or the return value from a WSGI application so that it is another WSGI application (wraps a whole application).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="951309d1982867563e6c36ed3eeaf83ff15379b2" translate="yes" xml:space="preserve">
          <source>The request data takes the environ object and allows you to access the data from that environ in a nice manner. The response object is a WSGI application in itself and provides a much nicer way to create responses.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e55fcb9a9798124bfad500f8ab946b75221ba339" translate="yes" xml:space="preserve">
          <source>The request method. (For example &lt;code&gt;'GET'&lt;/code&gt; or &lt;code&gt;'POST'&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4425103b3a0ae4cad30650fa10ee70db0396a2f4" translate="yes" xml:space="preserve">
          <source>The request object is immutable. Modifications are not supported by default, you may however replace the immutable attributes with mutable attributes if you need to modify it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a26e40e040c4989e4296d3f6bcd562cc057a5b37" translate="yes" xml:space="preserve">
          <source>The request object may be shared in the same thread, but is not thread safe itself. If you need to access it from multiple threads, use locks around calls.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3bf83acb44749129f2bb1c4ad8c2dccb30a3a749" translate="yes" xml:space="preserve">
          <source>The response is modified accordingly (status code changed, response body removed, entity headers removed etc.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fe863e82648e31780c870e16cc18f90507d8c1b0" translate="yes" xml:space="preserve">
          <source>The response iterable as write-only stream.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="770057233b352a8f1090fdcb3002ff480644b09c" translate="yes" xml:space="preserve">
          <source>The response object can be pickled or copied after &lt;code&gt;freeze()&lt;/code&gt; was called.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="127a65e445c94674f77f761e2c329847b02592c0" translate="yes" xml:space="preserve">
          <source>The response object is mutable</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c72591567569955a0df5b01d278b50547fb936ad" translate="yes" xml:space="preserve">
          <source>The response status as integer.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8909ed0618722897f4940f123cc7d930df436dc6" translate="yes" xml:space="preserve">
          <source>The response wrapper can be a class or factory function that takes three arguments: app_iter, status and headers. The default response wrapper just returns a tuple.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7b23dee05db710d4c22d87b45ba40bde2c2234d1" translate="yes" xml:space="preserve">
          <source>The rest of the arguments are forwarded to the exception constructor.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b17d1732f6ab747935b09a6052d6e2dacf1ae545" translate="yes" xml:space="preserve">
          <source>The resulting environment is a regular WSGI environment that can be used for further processing:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1a8ef04985a60e421bbc0e3778cd2d5c156ccf83" translate="yes" xml:space="preserve">
          <source>The return value is a standard &lt;a href=&quot;https://docs.python.org/3/library/stdtypes.html#list&quot;&gt;&lt;code&gt;list&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b6e46907ce5d9741001aefc04cf16581bdbe2aad" translate="yes" xml:space="preserve">
          <source>The return value is an object that treats the items case-insensitively and keeps the order of the items:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f7dfc9a0c8aa9bd2cd7cae7653702ec0deff0bed" translate="yes" xml:space="preserve">
          <source>The return value is not ASCII safe if the key contains unicode characters. This is technically against the specification but happens in the wild. It&amp;rsquo;s strongly recommended to not use non-ASCII values for the keys.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8e6edbdecb508b0df2cd30a2998ee3aff95ebcfd" translate="yes" xml:space="preserve">
          <source>The reverse function of &lt;code&gt;escape&lt;/code&gt;. This unescapes all the HTML entities, not only the XML entities inserted by &lt;code&gt;escape&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7bfb9db16a54aaf8bc08d0a3b1f1d582196dbb3b" translate="yes" xml:space="preserve">
          <source>The reverse operation to &lt;a href=&quot;#werkzeug.urls.url_parse&quot;&gt;&lt;code&gt;url_parse()&lt;/code&gt;&lt;/a&gt;. This accepts arbitrary as well as &lt;a href=&quot;#werkzeug.urls.URL&quot;&gt;&lt;code&gt;URL&lt;/code&gt;&lt;/a&gt; tuples and returns a URL as a string.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ab1257fa3c510579e7f36cad8219503b6686df11" translate="yes" xml:space="preserve">
          <source>The root path of the script without the trailing slash.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9042c111a7b9812e277a64f8c8f65a194299bc3f" translate="yes" xml:space="preserve">
          <source>The same context means the same greenlet (if you&amp;rsquo;re using greenlets) in the same thread and same process.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9e6494b075fb60327f609481789a79d7aac99db3" translate="yes" xml:space="preserve">
          <source>The same key can be provided multiple times, the values are stored in-order. The default &lt;code&gt;MultiDict&lt;/code&gt; will have the first value first, and all values can be retrieved with &lt;code&gt;MultiDict.getlist()&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5a169fd6b838f7a022a663bd7ca229703b798f01" translate="yes" xml:space="preserve">
          <source>The same works for languages:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6fca06f9aa18e856a289210f4046cde01b5867ab" translate="yes" xml:space="preserve">
          <source>The second parameter can be a subclass of &lt;code&gt;Accept&lt;/code&gt; that is created with the parsed values and returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e34c07e73c9a3683b4c5b57632090de6a985d1b1" translate="yes" xml:space="preserve">
          <source>The serialization function used when &lt;code&gt;json&lt;/code&gt; is passed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0b96d36fe8da9695b2ee209a6c20424e7802451c" translate="yes" xml:space="preserve">
          <source>The server cannot meet the requirements of the Expect request-header.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="50a09c183f1e90d239fbbaf3442845daeb95efc1" translate="yes" xml:space="preserve">
          <source>The server does not support the HTTP protocol version used in the request.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6c60fa9a9e8d25304b060ed1c6ee1e1e63a48554" translate="yes" xml:space="preserve">
          <source>The server is limiting the rate at which this user receives responses, and this request exceeds that rate. (The server may use any convenient method to identify users and their request rates). The server may include a &amp;ldquo;Retry-After&amp;rdquo; header to indicate how long the user should wait before retrying.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9b06734029437c0effdb5fb7376810c199fd0f05" translate="yes" xml:space="preserve">
          <source>The server name (read-only, use &lt;code&gt;host&lt;/code&gt; to set)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="16e7d2f437ebaed36c358066697c16e641ec0e92" translate="yes" xml:space="preserve">
          <source>The server port as integer (read-only, use &lt;code&gt;host&lt;/code&gt; to set)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dae8482f65de4126ac8c140f9953a8a4175b3ff3" translate="yes" xml:space="preserve">
          <source>The server refuses to process the request because the header fields are too large. One or more individual fields may be too large, or the set of all headers is too large.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6ce9c0efad7fbc45fcffac50ce76a9f11225cbd0" translate="yes" xml:space="preserve">
          <source>The server requires this request to be conditional, typically to prevent the lost update problem, which is a race condition between two or more clients attempting to update a resource through PUT or DELETE. By requiring each client to include a conditional header (&amp;ldquo;If-Match&amp;rdquo; or &amp;ldquo;If-Unmodified- Since&amp;rdquo;) with the proper value retained from a recent GET request, the server ensures that each client has at least seen the previous revision of the resource.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d466e9ae8205aa8ac9fd149c70fb1ca8ca7fb3c1" translate="yes" xml:space="preserve">
          <source>The server should return this if it is a teapot and someone attempted to brew coffee with it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="50e8c07bbb45bf7ae84559f72790bfa506f34f5c" translate="yes" xml:space="preserve">
          <source>The shortly folder is not a python package, but just something where we drop our files. Directly into this folder we will then put our main module in the following steps. The files inside the static folder are available to users of the application via HTTP. This is the place where CSS and JavaScript files go. Inside the templates folder we will make Jinja2 look for templates. The templates you create later in the tutorial will go in this directory.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="44a98f8beb812bd2c8ba0a1abb1e2ff606562570" translate="yes" xml:space="preserve">
          <source>The signature of this class is also used in some other places as of Werkzeug 0.5 (&lt;a href=&quot;#werkzeug.test.create_environ&quot;&gt;&lt;code&gt;create_environ()&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;BaseResponse.from_values()&lt;/code&gt;, &lt;a href=&quot;#werkzeug.test.Client.open&quot;&gt;&lt;code&gt;Client.open()&lt;/code&gt;&lt;/a&gt;). Because of this most of the functionality is available through the constructor alone.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f6030c850eebbaf7d07e8187a5e62cb2ba3c1ef1" translate="yes" xml:space="preserve">
          <source>The standard Werkzeug parsing behavior handles three cases:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="41bb0f2ad8be6ea62a932b8da70e7992c9beb902" translate="yes" xml:space="preserve">
          <source>The start point of the range or &lt;code&gt;None&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e2560771200ab18400fc8dd8419678603a7be87d" translate="yes" xml:space="preserve">
          <source>The status code one should return if the data submitted exceeded a given limit.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="baa3b80f7ea7cfe91baa42df88266a7de52f6a68" translate="yes" xml:space="preserve">
          <source>The status code returned if the server is unable to handle the media type the client transmitted.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2e151eb2f944a4a2ac608a909f7cae92bf9f082b" translate="yes" xml:space="preserve">
          <source>The stop point of the range (non-inclusive) or &lt;code&gt;None&lt;/code&gt;. Can only be &lt;code&gt;None&lt;/code&gt; if also start is &lt;code&gt;None&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="af68460a2a4db2560bf29b7cbbda463a72454627" translate="yes" xml:space="preserve">
          <source>The string representation of the response body. Whenever you call this property the response iterable is encoded and flattened. This can lead to unwanted behavior if you stream big data.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="58a56d64fe4b913abcf0064cca2793838e8dfac9" translate="yes" xml:space="preserve">
          <source>The subdomain rule string for this rule. If not specified the rule only matches for the &lt;code&gt;default_subdomain&lt;/code&gt; of the map. If the map is not bound to a subdomain this feature is disabled.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1086a1c717b5ccc2cb853a5ec7378977e0b5f954" translate="yes" xml:space="preserve">
          <source>The target URL to dispatch to. This is required.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7edc15a96d55b59ef03b5e939f0711dbfe1b88cd" translate="yes" xml:space="preserve">
          <source>The topmost item on the stack. If the stack is empty, &lt;code&gt;None&lt;/code&gt; is returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="01d12f386bcda4df69ae4d946ea14054bf600570" translate="yes" xml:space="preserve">
          <source>The type of lock to use when updating.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="33b43fc98cf5d9e9cf90772a1c08ea34a94f9e83" translate="yes" xml:space="preserve">
          <source>The type of the auth mechanism. HTTP currently specifies &lt;code&gt;Basic&lt;/code&gt; and &lt;code&gt;Digest&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0984953aa4b8b79b88c978c6d8be4dc7b8bec8c0" translate="yes" xml:space="preserve">
          <source>The units of this range. Usually &amp;ldquo;bytes&amp;rdquo;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8330ac04153487f09f36fc4e5225bb55c6e7075a" translate="yes" xml:space="preserve">
          <source>The units to use, usually &amp;ldquo;bytes&amp;rdquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c3af732a966a1b81a3ea27ea63adce36bb61300d" translate="yes" xml:space="preserve">
          <source>The usage is simple: you just pass the match method the current path info as well as the method (which defaults to &lt;code&gt;GET&lt;/code&gt;). The following things can then happen:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="14bf6d4086ea32c0f5e81587aac7b011d0e107cd" translate="yes" xml:space="preserve">
          <source>The use_cookies parameter indicates whether cookies should be stored and sent for subsequent requests. This is True by default, but passing False will disable this behaviour.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6f4cd9d906a8739c726654cf9084b274dc8e1457" translate="yes" xml:space="preserve">
          <source>The username if it was part of the URL, &lt;code&gt;None&lt;/code&gt; otherwise. This undergoes URL decoding and will always be a unicode string.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3130d2e70add565f7d5597409c354a7cc1c580f6" translate="yes" xml:space="preserve">
          <source>The username if it was part of the URL, &lt;code&gt;None&lt;/code&gt; otherwise. Unlike &lt;a href=&quot;#werkzeug.urls.BaseURL.username&quot;&gt;&lt;code&gt;username&lt;/code&gt;&lt;/a&gt; this one is not being decoded.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f5816857e88d11a10bca9ea03f41b8f84411fb5e" translate="yes" xml:space="preserve">
          <source>The username transmitted. This is set for both basic and digest auth all the time.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ae6d3f97f1a22df032587a771c2b8e025035a9a6" translate="yes" xml:space="preserve">
          <source>The value of &lt;code&gt;wsgi.multiprocess&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9ba16afc2fca4443bfb0063bc7c3f10d5f2759d0" translate="yes" xml:space="preserve">
          <source>The value of &lt;code&gt;wsgi.multithread&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6f57c982ba0f8304b1085c68f7573dd0eb340703" translate="yes" xml:space="preserve">
          <source>The values &lt;code&gt;'bytes'&lt;/code&gt; and &lt;code&gt;'none'&lt;/code&gt; are common.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="65be6c4f56dc1d04f1a03257750830b8fb734823" translate="yes" xml:space="preserve">
          <source>The values are byte strings in Python 2 converted to latin1 and unicode strings in Python 3 for the WSGI server to encode.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b2355827b0374d3b5cbe29801c40dea8b4cb920d" translate="yes" xml:space="preserve">
          <source>The warning used by Werkzeug to signal a broken filesystem. Will only be used once per runtime.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0c11476e827ee3b260ec9e401f8e9641249c27d1" translate="yes" xml:space="preserve">
          <source>Then we can create the basic structure for our application and a function to create a new instance of it, optionally with a piece of WSGI middleware that exports all the files on the &lt;code&gt;static&lt;/code&gt; folder on the web:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5e66df931879cf15dac0e711e3d77cf67f8561d0" translate="yes" xml:space="preserve">
          <source>There are a couple of mixins available that add additional functionality to the request object, there is also a class called &lt;code&gt;Request&lt;/code&gt; which subclasses &lt;code&gt;BaseRequest&lt;/code&gt; and all the important mixins.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="851e5a3c175fd3bd6772f25029906b2e4b43dce5" translate="yes" xml:space="preserve">
          <source>There are many ways to serve a WSGI application. While you&amp;rsquo;re developing it, you usually don&amp;rsquo;t want to have a full-blown webserver like Apache up and running, but instead a simple standalone one. Because of that Werkzeug comes with a builtin development server.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="29bd9295375fe7c76d645fe12c05d016a697d16f" translate="yes" xml:space="preserve">
          <source>There is a general problem with IRI conversion with some protocols that are in violation of the URI specification. Consider the following two IRIs:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a68617cbc260a4de3e64e4e5848335f7fa2b15e4" translate="yes" xml:space="preserve">
          <source>There is a special handling for &lt;code&gt;None&lt;/code&gt; which escapes to an empty string.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9f5fd8191ac7bf15da4c843185a5ffa008aab169" translate="yes" xml:space="preserve">
          <source>There is already a mixin that provides JSON parsing:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f3fe6658f4f96e25dded5a9ed38f62141a731987" translate="yes" xml:space="preserve">
          <source>There is also the codecs module which provides an open function that decodes automatically from the given encoding.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="236dededd6c1a9766bd0e48277c5a14979fa97a6" translate="yes" xml:space="preserve">
          <source>There is more. Werkzeug provides convenient access to often used HTTP headers and other request data.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2eb75f66fbb44da1c4f39d36d001fad5aeb3df9b" translate="yes" xml:space="preserve">
          <source>Therefore Werkzeug will force the filesystem encoding to &lt;code&gt;UTF-8&lt;/code&gt; and issue a warning whenever it detects that it is running under BSD or Linux, and &lt;a href=&quot;https://docs.python.org/3/library/sys.html#sys.getfilesystemencoding&quot;&gt;&lt;code&gt;sys.getfilesystemencoding()&lt;/code&gt;&lt;/a&gt; is returning an ASCII encoding.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="20bcc33a9da442fb556ba9e0de087f3660027255" translate="yes" xml:space="preserve">
          <source>These calls are not interchangeable. If you invoke &lt;code&gt;parse_form_data()&lt;/code&gt; you must not use the request object or at least not the attributes that trigger the parsing process.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="856d12cbaa07f5c5b93478ed13808a75c404f736" translate="yes" xml:space="preserve">
          <source>These classes and functions simplify working with the WSGI application iterator and the input stream.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="141152ab323ff0199aedef2740fd3da3ae5126cf" translate="yes" xml:space="preserve">
          <source>These distributions will not be installed automatically. Werkzeug will detect and use them if you install them.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="629676d82b1f63de9f7bf85d033d323bb9e9ec87" translate="yes" xml:space="preserve">
          <source>These functions operate on the WSGI environment. They extract useful information or perform common manipulations:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="018dbdc2029b16b1702e7237839c6fb0818f32a3" translate="yes" xml:space="preserve">
          <source>These mixins are not included in the default &lt;a href=&quot;#werkzeug.wrappers.Request&quot;&gt;&lt;code&gt;Request&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#werkzeug.wrappers.Response&quot;&gt;&lt;code&gt;Response&lt;/code&gt;&lt;/a&gt; classes. They provide extra behavior that needs to be opted into by creating your own subclasses:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="58b0e2eb48695aa9ba8c475a9ccaad599a7579ed" translate="yes" xml:space="preserve">
          <source>These objects implement a common set of operations. They are missing fancy addon functionality like user agent parsing or etag handling. These features are available by mixing in various mixin classes or using &lt;a href=&quot;#werkzeug.wrappers.Request&quot;&gt;&lt;code&gt;Request&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#werkzeug.wrappers.Response&quot;&gt;&lt;code&gt;Response&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b28bda7ee953d0735813d40ee863106dd76c2603" translate="yes" xml:space="preserve">
          <source>They can be force released by using a &lt;a href=&quot;#werkzeug.local.LocalManager&quot;&gt;&lt;code&gt;LocalManager&lt;/code&gt;&lt;/a&gt; or with the &lt;a href=&quot;#werkzeug.local.release_local&quot;&gt;&lt;code&gt;release_local()&lt;/code&gt;&lt;/a&gt; function but the correct way is to pop the item from the stack after using. When the stack is empty it will no longer be bound to the current context (and as such released).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="00803fd1904be0fb0b7ba8b3f8583a8644596eaa" translate="yes" xml:space="preserve">
          <source>This accepts the same arguments as the &lt;a href=&quot;#werkzeug.test.EnvironBuilder&quot;&gt;&lt;code&gt;EnvironBuilder&lt;/code&gt;&lt;/a&gt; constructor.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fee18756b4cde7fd61711f3c761ed83e0f1c4092" translate="yes" xml:space="preserve">
          <source>This accepts the same options as the &lt;a href=&quot;../test/index#werkzeug.test.EnvironBuilder&quot;&gt;&lt;code&gt;EnvironBuilder&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d0d6ac1ff49eaca8fa9a3f70053d20c1c9f5c1fc" translate="yes" xml:space="preserve">
          <source>This allows you to call your local computer &lt;code&gt;yourapplication.local&lt;/code&gt; and &lt;code&gt;api.yourapplication.local&lt;/code&gt; (or anything else) in addition to &lt;code&gt;localhost&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="de58fc5fa0e11cf5d34bb4b53ad9f85c892c969f" translate="yes" xml:space="preserve">
          <source>This approach, however, has a few disadvantages. For example, besides threads, there are other types of concurrency in Python. A very popular one is greenlets. Also, whether every request gets its own thread is not guaranteed in WSGI. It could be that a request is reusing a thread from a previous request, and hence data is left over in the thread local object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5e349fc6bb07d7a1e25de5c463968ec9ca07bdb1" translate="yes" xml:space="preserve">
          <source>This behavior can be disabled by setting &lt;a href=&quot;#werkzeug.wrappers.BaseResponse.implicit_sequence_conversion&quot;&gt;&lt;code&gt;implicit_sequence_conversion&lt;/code&gt;&lt;/a&gt; to &lt;code&gt;False&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="06284619511322b40bbcab549814f25e3b08901c" translate="yes" xml:space="preserve">
          <source>This binds the request to &lt;code&gt;local.request&lt;/code&gt;. Every other piece of code executed after this assignment in the same context can safely access local.request and will get the same request object. The &lt;code&gt;make_middleware&lt;/code&gt; method on the local manager ensures that all references to the local objects are cleared up after the request.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="471c7a92c73fc3d824ac61e722d5a30e81e76db6" translate="yes" xml:space="preserve">
          <source>This can be useful for decorators that forward user submitted data to a view function:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5e54b9d9c25803e9a64ec511b1fd8d4eae7b18ce" translate="yes" xml:space="preserve">
          <source>This can be useful if want to reuse an already bound URL for another map. See &lt;code&gt;get_empty_kwargs&lt;/code&gt; to override what keyword arguments are provided to the new copy.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d408ea8aa58a80da29500a55f4e6c27d68566859" translate="yes" xml:space="preserve">
          <source>This class allows you to send requests to a wrapped application.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d44ab31c9fda7a6002a460ccf643cda9841e9226" translate="yes" xml:space="preserve">
          <source>This class can be used to conveniently create a WSGI environment for testing purposes. It can be used to quickly create WSGI environments or request objects from arbitrary data.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cdf51a635127243ab8ed8332ac4a78348a07fd98" translate="yes" xml:space="preserve">
          <source>This class can be used to convert a &lt;code&gt;file&lt;/code&gt;-like object into an iterable. It yields &lt;code&gt;buffer_size&lt;/code&gt; blocks until the file is fully read.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5cf7315b498bc8bed104186042483206021615a1" translate="yes" xml:space="preserve">
          <source>This class implements parsing of form data for Werkzeug. By itself it can parse multipart and url encoded form data. It can be subclassed and extended but for most mimetypes it is a better idea to use the untouched stream and expose it as separate attributes on a request object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="963b749664ca38b4fa566655995a58cf49fffbd8" translate="yes" xml:space="preserve">
          <source>This class works around some browser limitations and can not be used for arbitrary SGML/XML generation. For that purpose lxml and similar libraries exist.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dfded1d624d6bebbc75a3fb1d79d868afc21f19b" translate="yes" xml:space="preserve">
          <source>This class works similar to a &lt;code&gt;Local&lt;/code&gt; but keeps a stack of objects instead. This is best explained with an example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="484360e31fa8855954aa705dcfe0e5f6eb1ece0c" translate="yes" xml:space="preserve">
          <source>This configuration binds the application to &lt;code&gt;/yourapplication&lt;/code&gt;. If you want to have it in the URL root it&amp;rsquo;s a bit easier because you don&amp;rsquo;t have to figure out how to calculate &lt;code&gt;PATH_INFO&lt;/code&gt; and &lt;code&gt;SCRIPT_NAME&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d0205e0c0788b4f735d6648feaa15602bf8b4504" translate="yes" xml:space="preserve">
          <source>This converter is the default converter and accepts any string but only one path segment. Thus the string can not include a slash.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7327ad075149c4c684428590360da690be58d3b1" translate="yes" xml:space="preserve">
          <source>This converter only accepts UUID strings:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="992b83f1ff62199b8e26514799da00bc8d8b4b77" translate="yes" xml:space="preserve">
          <source>This converter only accepts floating point values:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f975f8a59cc4dd23f0f560761ed1c99f243c4ff9" translate="yes" xml:space="preserve">
          <source>This converter only accepts integer values:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b38c7e0756e9699a86ca8193ff43eb6110c2b12c" translate="yes" xml:space="preserve">
          <source>This data structure is useful if you want a nicer way to handle WSGI headers which are stored as tuples in a list.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="97c5ca6f00468a1fa815d14d51b3957966b4ceb3" translate="yes" xml:space="preserve">
          <source>This does nothing if the request method in the request or environ is anything but GET or HEAD.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3b7769331f9a071492b50c0fe345a24b3188419d" translate="yes" xml:space="preserve">
          <source>This example assumes your application is called &lt;code&gt;application.fcgi&lt;/code&gt; and that your webserver user is &lt;code&gt;www-data&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5646bb21c7fa3ffca2bbed3e03b00afb8d613416" translate="yes" xml:space="preserve">
          <source>This example dispatches to an API app under &amp;ldquo;/api&amp;rdquo;, an admin app under &amp;ldquo;/admin&amp;rdquo;, and an app that serves frontend files for all other requests:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d58b9596d004619c7c14fb14c7d15226da132b41" translate="yes" xml:space="preserve">
          <source>This example implements a &lt;code&gt;BooleanConverter&lt;/code&gt; that will match the strings &lt;code&gt;&quot;yes&quot;&lt;/code&gt;, &lt;code&gt;&quot;no&quot;&lt;/code&gt;, and &lt;code&gt;&quot;maybe&quot;&lt;/code&gt;, returning a random value for &lt;code&gt;&quot;maybe&quot;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bd8ee8609a846fc85dbde3f1e0439ce2ce749bee" translate="yes" xml:space="preserve">
          <source>This example implements a small &lt;code&gt;Hello World&lt;/code&gt; application that greets the user with the name entered:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6014fef89c84d857498fd2c9893e9ea80f39356c" translate="yes" xml:space="preserve">
          <source>This exception is used to signal unicode decode errors of request data. For more information see the &lt;a href=&quot;../unicode/index#unicode&quot;&gt;Unicode&lt;/a&gt; chapter.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ff5a08f73b4050ad00d385719b74a2d83cb8211b" translate="yes" xml:space="preserve">
          <source>This feature requires the cryptography library to be installed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2fbe58e639cfaa8a0477df44b068836182c14ecf" translate="yes" xml:space="preserve">
          <source>This function compares strings in somewhat constant time. This requires that the length of at least one string is known in advance.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="37a7688dc06e845f08d7e7a927061a2ff48c4c1c" translate="yes" xml:space="preserve">
          <source>This function has a command-line interface too:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a4acfa6c7a230d197978a0e62269ba98220d7e40" translate="yes" xml:space="preserve">
          <source>This however does &lt;em&gt;not&lt;/em&gt; affect in-memory stored files if the &lt;code&gt;stream_factory&lt;/code&gt; used returns a in-memory file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ddcbdbf4ba7fe4997ee323e15328b699c24722ca" translate="yes" xml:space="preserve">
          <source>This is a shortcut for the common usage of &lt;a href=&quot;#werkzeug.formparser.FormDataParser&quot;&gt;&lt;code&gt;FormDataParser&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ef099f3fd8537a43475e33042f21bf9c79beed58" translate="yes" xml:space="preserve">
          <source>This is also the way you can use a Werkzeug application on Google&amp;rsquo;s &lt;a href=&quot;https://cloud.google.com/appengine/&quot;&gt;AppEngine&lt;/a&gt;, there however the execution does happen in a CGI-like environment. The application&amp;rsquo;s performance is unaffected because of that.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e1c3bc3e8600fdb77724a841506f0902222bb68d" translate="yes" xml:space="preserve">
          <source>This is also true if you read from the &lt;code&gt;wsgi.input&lt;/code&gt; stream before the parsing.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3f8915e70bd0af4206320cfc02e127fa300ba20b" translate="yes" xml:space="preserve">
          <source>This is automatically called right before the response is started and returns headers modified for the given environment. It returns a copy of the headers from the response with some modifications applied if necessary.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f76840592a1d65e561d46694610c0e747d0a4a76" translate="yes" xml:space="preserve">
          <source>This is called when the stream tries to read past the limit. The return value of this function is returned from the reading function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="585a22486ac9736692f7ad5809339521a3f5f1e9" translate="yes" xml:space="preserve">
          <source>This is enough for Apache to work, however ngingx and older versions of lighttpd need a socket to be explicitly passed to communicate with the FastCGI server. For that to work you need to pass the path to the socket to the &lt;code&gt;WSGIServer&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8dba35aa6e5c3a7e6982f56fc8ef2b259b83e7e3" translate="yes" xml:space="preserve">
          <source>This is especially useful if you want to post-process responses in the main dispatcher and use functionality provided by your subclass.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="029abe7ace27bf474acad38f9f99a90c26466c40" translate="yes" xml:space="preserve">
          <source>This is the default validator.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1975a20f42aff57ee5487e1dbecc38411db04dd8" translate="yes" xml:space="preserve">
          <source>This is the minimal code you need for your own exception. If you want to add more logic to the errors you can override the &lt;code&gt;get_description()&lt;/code&gt;, &lt;code&gt;get_body()&lt;/code&gt;, &lt;code&gt;get_headers()&lt;/code&gt; and &lt;a href=&quot;#werkzeug.exceptions.HTTPException.get_response&quot;&gt;&lt;code&gt;get_response()&lt;/code&gt;&lt;/a&gt; methods. In any case you should have a look at the sourcecode of the exceptions module.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f17feddfcd733d1dd0f589e5971fcfc1307434da" translate="yes" xml:space="preserve">
          <source>This is the server realm sent back for HTTP digest auth.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="461dc9ecec401f6ae284e388973b68d5ea304cda" translate="yes" xml:space="preserve">
          <source>This is useful for checking before applying some sort of post filtering that should not take place for streamed responses.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f5b56f456fe4141ff316f9576dfe6d5012e6201e" translate="yes" xml:space="preserve">
          <source>This logic should be easy to understand. Basically we are checking that the request method is POST, in which case we validate the URL and add a new entry to the database, then redirect to the detail page. This means we need to write a function and a helper method. For URL validation this is good enough:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="71735126cb2ad046981fcfc73bc83cad5ef2ee4e" translate="yes" xml:space="preserve">
          <source>This method can &lt;strong&gt;not&lt;/strong&gt; generate unsalted passwords but it is possible to set param method=&amp;rsquo;plain&amp;rsquo; in order to enforce plaintext passwords. If a salt is used, hmac is used internally to salt the password.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="65104ecdb365b189a36655c9aea7300c4ea94e0f" translate="yes" xml:space="preserve">
          <source>This method can be called by methods that need a sequence. If &lt;code&gt;mutable&lt;/code&gt; is true, it will also ensure that the response sequence is a standard Python list.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bebb8fe263cdc717ebdb9ae53c9422c23740db1e" translate="yes" xml:space="preserve">
          <source>This method can enforce a given response type, and it will also convert arbitrary WSGI callables into response objects if an environ is provided:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b663f2a9a4983f7db52ceeafee950d0fc97c7266" translate="yes" xml:space="preserve">
          <source>This method is compatible with the &lt;a href=&quot;https://docs.python.org/3/library/wsgiref.html#module-wsgiref&quot;&gt;&lt;code&gt;wsgiref&lt;/code&gt;&lt;/a&gt;&lt;a href=&quot;https://docs.python.org/3/library/wsgiref.html#wsgiref.headers.Headers.get_all&quot;&gt;&lt;code&gt;get_all()&lt;/code&gt;&lt;/a&gt; method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="79b2e6dd761615ebe6cf6f9f524ce89e52735073" translate="yes" xml:space="preserve">
          <source>This middleware can only proxy HTTP requests, as that is the only protocol handled by the WSGI server. Other protocols, such as websocket requests, cannot be proxied at this layer. This should only be used for development, in production a real proxying server should be used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b62e31eb4402973375ab91b02090bbf7a1ddd47f" translate="yes" xml:space="preserve">
          <source>This middleware creates a single WSGI application that dispatches to multiple other WSGI applications mounted at different URL paths.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b107f3d05e2d276a1dac7d7061ab159b8560b935" translate="yes" xml:space="preserve">
          <source>This middleware should only be applied if the application is actually behind such a proxy, and should be configured with the number of proxies that are chained in front of it. Not all proxies set all the headers. Since incoming headers can be faked, you must set how many proxies are setting each header so the middleware knows what to trust.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="373370546d0fda042cdad4a45133238276c12f84" translate="yes" xml:space="preserve">
          <source>This module implements a number of Python exceptions you can raise from within your views to trigger a standard non-200 response.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8626d906a034f9c12dc78f90a8e99acf032540fc" translate="yes" xml:space="preserve">
          <source>This module provides a middleware that adjusts the WSGI environ based on &lt;code&gt;X-Forwarded-&lt;/code&gt; headers that proxies in front of an application may set.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="98196ed53e4c4fdd8a9d35675eea849703326e8d" translate="yes" xml:space="preserve">
          <source>This module provides a middleware that performs sanity checks on the behavior of the WSGI server and application. It checks that the &lt;a href=&quot;https://www.python.org/dev/peps/pep-3333&quot; id=&quot;index-0&quot;&gt;&lt;strong&gt;PEP 3333&lt;/strong&gt;&lt;/a&gt; WSGI spec is properly implemented. It also warns on some common HTTP errors such as non-empty responses for 304 status codes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="baddbf74cdebfba491772eef3828f526bcb6da2d" translate="yes" xml:space="preserve">
          <source>This module provides a middleware that profiles each request with the &lt;a href=&quot;https://docs.python.org/3/library/profile.html#module-cProfile&quot;&gt;&lt;code&gt;cProfile&lt;/code&gt;&lt;/a&gt; module. This can help identify bottlenecks in your code that may be slowing down your application.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b6edd2343a285e60d8088d34fe955505f52c205e" translate="yes" xml:space="preserve">
          <source>This must provide a file-like class with &lt;code&gt;read()&lt;/code&gt;, &lt;code&gt;readline()&lt;/code&gt; and &lt;code&gt;seek()&lt;/code&gt; methods that is both writeable and readable.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="32960ee584a27692ba5fcce8fd031a5bf297f3ae" translate="yes" xml:space="preserve">
          <source>This object is a dict subclass and can be altered by setting dict items but it should be considered immutable as it&amp;rsquo;s returned by the client and not meant for modifications.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5dea4c40cf080a1b4cad32f7e8855a8711d8ee79" translate="yes" xml:space="preserve">
          <source>This optionally it verifies that the host is in a list of trusted hosts. If the host is not in there it will raise a &lt;a href=&quot;../exceptions/index#werkzeug.exceptions.SecurityError&quot;&gt;&lt;code&gt;SecurityError&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6bb6748ec9c20143f66ff2a4182931055d87d4cd" translate="yes" xml:space="preserve">
          <source>This page covers important terms used in the documentation and Werkzeug itself.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bbcbf5c835413d2750b2b6a8d8caf1463becaf46" translate="yes" xml:space="preserve">
          <source>This part of the documentation shows how to use the most important parts of Werkzeug. It&amp;rsquo;s intended as a starting point for developers with basic understanding of &lt;a href=&quot;https://www.python.org/dev/peps/pep-0333&quot; id=&quot;index-0&quot;&gt;&lt;strong&gt;PEP 333&lt;/strong&gt;&lt;/a&gt; (WSGI) and &lt;a href=&quot;https://tools.ietf.org/html/rfc2616.html&quot; id=&quot;index-1&quot;&gt;&lt;strong&gt;RFC 2616&lt;/strong&gt;&lt;/a&gt; (HTTP).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a0443f4192ba55338acf65e28bc1d0911a821ac2" translate="yes" xml:space="preserve">
          <source>This reads the buffered incoming data from the client into one bytestring. By default this is cached but that behavior can be changed by setting &lt;code&gt;cache&lt;/code&gt; to &lt;code&gt;False&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2d80887f522d48ab1aeedab593ef01cde1f6ec79" translate="yes" xml:space="preserve">
          <source>This section covers running your application in production on a web server such as Apache or lighttpd.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2c3e23e278deaafc18c9b72fd2ca06af85f22fab" translate="yes" xml:space="preserve">
          <source>This should not be used to parse &lt;code&gt;Cache-Control&lt;/code&gt; like headers that use a slightly different format. For these headers use the &lt;a href=&quot;#werkzeug.http.parse_dict_header&quot;&gt;&lt;code&gt;parse_dict_header()&lt;/code&gt;&lt;/a&gt; function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c788114fa7f39fc053b1b391e4d1fe19199d63a8" translate="yes" xml:space="preserve">
          <source>This status code indicates that the server is denying access to the resource as a consequence of a legal demand.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0a5eb8d04835013c9a886070441c0221f0d3139a" translate="yes" xml:space="preserve">
          <source>This uses the stream&amp;rsquo;s &lt;code&gt;read()&lt;/code&gt; method internally as opposite to the &lt;code&gt;readline()&lt;/code&gt; method that is unsafe and can only be used in violation of the WSGI specification. The same problem applies to the &lt;code&gt;__iter__&lt;/code&gt; function of the input stream which calls &lt;code&gt;readline()&lt;/code&gt; without arguments.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="de995faab2e5e4fee76e0e99608a03f2c387f8c7" translate="yes" xml:space="preserve">
          <source>This way we can also access URL arguments (the query string) and data that was transmitted in a POST/PUT request.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7c0536d9adce18ad460108d530f70f7df7b3ddeb" translate="yes" xml:space="preserve">
          <source>This will then serve the &lt;code&gt;static&lt;/code&gt; folder in the &lt;code&gt;myapplication&lt;/code&gt; Python package.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4b247948e9035c58331b7f60d52bde5c8b1ec84d" translate="yes" xml:space="preserve">
          <source>This will try to get the request or return &lt;code&gt;None&lt;/code&gt; if the request is not (yet?) available.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5dab60d7436a330f68ee58a0df9136d563a3e3ba" translate="yes" xml:space="preserve">
          <source>This works for all read operations and will raise a &lt;code&gt;TypeError&lt;/code&gt; for methods that usually change data which isn&amp;rsquo;t possible.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1406d7e617b4ab898cca4a21c49e2bb7b037d7ca" translate="yes" xml:space="preserve">
          <source>Time in seconds until expiration or date.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8c635eecf248e6d68d6c9530b9e98175b583fa4a" translate="yes" xml:space="preserve">
          <source>To avoid being the victim of a DDOS attack you can set the maximum accepted content length and request field sizes. The &lt;code&gt;BaseRequest&lt;/code&gt; class has two attributes for that: &lt;code&gt;max_content_length&lt;/code&gt; and &lt;code&gt;max_form_memory_size&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="67d3534f7a72972e696636568f10bd4cbc51e6ca" translate="yes" xml:space="preserve">
          <source>To create a header from the &lt;a href=&quot;https://docs.python.org/3/library/stdtypes.html#dict&quot;&gt;&lt;code&gt;dict&lt;/code&gt;&lt;/a&gt; again, use the &lt;a href=&quot;#werkzeug.http.dump_header&quot;&gt;&lt;code&gt;dump_header()&lt;/code&gt;&lt;/a&gt; function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eb12062fbd800206cb09224071eeb302ba8a6a88" translate="yes" xml:space="preserve">
          <source>To create a header from the &lt;a href=&quot;https://docs.python.org/3/library/stdtypes.html#list&quot;&gt;&lt;code&gt;list&lt;/code&gt;&lt;/a&gt; again, use the &lt;a href=&quot;#werkzeug.http.dump_header&quot;&gt;&lt;code&gt;dump_header()&lt;/code&gt;&lt;/a&gt; function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4cd7dc7c6b7525b1b71b78802c0299090eb8bff4" translate="yes" xml:space="preserve">
          <source>To create a header from the &lt;code&gt;HeaderSet&lt;/code&gt; again, use the &lt;a href=&quot;#werkzeug.http.dump_header&quot;&gt;&lt;code&gt;dump_header()&lt;/code&gt;&lt;/a&gt; function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bb605c998f766cfb4a7632a345e476ea10b9f88d" translate="yes" xml:space="preserve">
          <source>To create a new &lt;a href=&quot;#werkzeug.datastructures.Headers&quot;&gt;&lt;code&gt;Headers&lt;/code&gt;&lt;/a&gt; object pass it a list or dict of headers which are used as default values. This does not reuse the list passed to the constructor for internal usage.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3eaa75efa4e9257a1665d76b292d6e1f1e244086" translate="yes" xml:space="preserve">
          <source>To create proxies to &lt;code&gt;Local&lt;/code&gt; or &lt;a href=&quot;#werkzeug.local.LocalStack&quot;&gt;&lt;code&gt;LocalStack&lt;/code&gt;&lt;/a&gt; objects, call the object as shown above. If you want to have a proxy to an object looked up by a function, you can (as of Werkzeug 0.6.1) pass a function to the &lt;a href=&quot;#werkzeug.local.LocalProxy&quot;&gt;&lt;code&gt;LocalProxy&lt;/code&gt;&lt;/a&gt; constructor:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3f541c188802b39cf6d2ec0dd61bd16d9eaffd45" translate="yes" xml:space="preserve">
          <source>To display all variables that are defined in the current frame you can use the &lt;code&gt;dump()&lt;/code&gt; function. You can call it without arguments to get a detailed list of all variables and their values, or with an object as argument to get a detailed list of all the attributes it has.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c01e7319323747eba80fab9c72e82094b41d7563" translate="yes" xml:space="preserve">
          <source>To enforce a new type of already existing responses you can use the &lt;a href=&quot;#werkzeug.wrappers.BaseResponse.force_type&quot;&gt;&lt;code&gt;force_type()&lt;/code&gt;&lt;/a&gt; method. This is useful if you&amp;rsquo;re working with different subclasses of response objects and you want to post process them with a known interface.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="916cef9c0bddfd377bfae5ed174e9ff3f908bc4e" translate="yes" xml:space="preserve">
          <source>To extend existing keys instead of replacing, use &lt;a href=&quot;#werkzeug.datastructures.Headers.extend&quot;&gt;&lt;code&gt;extend()&lt;/code&gt;&lt;/a&gt; instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="209f4cfbd57a1b9091d325a9281327d85c7ca716" translate="yes" xml:space="preserve">
          <source>To get a header of the &lt;a href=&quot;#werkzeug.datastructures.RequestCacheControl&quot;&gt;&lt;code&gt;RequestCacheControl&lt;/code&gt;&lt;/a&gt; object again you can convert the object into a string or call the &lt;code&gt;to_header()&lt;/code&gt; method. If you plan to subclass it and add your own items have a look at the sourcecode for that class.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bc2646849be7053d848c0b71abf005176ec3856e" translate="yes" xml:space="preserve">
          <source>To get a header of the &lt;a href=&quot;#werkzeug.datastructures.ResponseCacheControl&quot;&gt;&lt;code&gt;ResponseCacheControl&lt;/code&gt;&lt;/a&gt; object again you can convert the object into a string or call the &lt;code&gt;to_header()&lt;/code&gt; method. If you plan to subclass it and add your own items have a look at the sourcecode for that class.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="393ba545a3f55d68ac5f45e65282ae57b58e87cd" translate="yes" xml:space="preserve">
          <source>To get the quality for an item you can use normal item lookup:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="771633990d11c2c1b45dc54bb279e5265ae95cd8" translate="yes" xml:space="preserve">
          <source>To make it more useful you can replace it with a function and do some processing:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4ca6a84245c38616b84586ee37b5f77b412f658e" translate="yes" xml:space="preserve">
          <source>To replace existing keys instead of extending, use &lt;a href=&quot;#werkzeug.datastructures.Headers.update&quot;&gt;&lt;code&gt;update()&lt;/code&gt;&lt;/a&gt; instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1acf3c7bfdab8a14cea00c073ee0dcd774c45212" translate="yes" xml:space="preserve">
          <source>To run your application you need a &lt;code&gt;start-server.py&lt;/code&gt; file that starts up the WSGI Server.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2c86414bed10fbdff55ce3b53f322730faff1038" translate="yes" xml:space="preserve">
          <source>To run your application you need a &lt;code&gt;yourapplication.wsgi&lt;/code&gt; file. This file contains the code &lt;code&gt;mod_wsgi&lt;/code&gt; is executing on startup to get the application object. The object called &lt;code&gt;application&lt;/code&gt; in that file is then used as application.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aa07e3e70b203b6b1da817d447b36792fa81659d" translate="yes" xml:space="preserve">
          <source>To switch between the backends you can use the &lt;code&gt;reloader_type&lt;/code&gt; parameter of the &lt;a href=&quot;#werkzeug.serving.run_simple&quot;&gt;&lt;code&gt;run_simple()&lt;/code&gt;&lt;/a&gt; function. &lt;code&gt;'stat'&lt;/code&gt; sets it to the default stat based polling and &lt;code&gt;'watchdog'&lt;/code&gt; forces it to the watchdog backend.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="285ec850c11d78bac10f6bfa31b69a37f1b257c9" translate="yes" xml:space="preserve">
          <source>Troubleshooting</source>
          <target state="translated">Troubleshooting</target>
        </trans-unit>
        <trans-unit id="989bdd3ec0c5027768fb84bf0d5e0e8543c40f04" translate="yes" xml:space="preserve">
          <source>True if this object accepts HTML.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2659240c522067255f83ff003387c5088b373faa" translate="yes" xml:space="preserve">
          <source>True if this object accepts JSON.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="49afccde33efd18a31ef4f501c1c10d53b1ed8cd" translate="yes" xml:space="preserve">
          <source>True if this object accepts XHTML.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="91ecc9fc6dd6b0acfc1a2d033c9c2a57ece37ac4" translate="yes" xml:space="preserve">
          <source>Turn an environ dict back into a builder. Any extra kwargs override the args extracted from the environ.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="72893d261dd86ffa3c9327c668f0bcdc315e8530" translate="yes" xml:space="preserve">
          <source>URL Helpers</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e58d7c1ed56a5920a630686cf129f267a1cc04d8" translate="yes" xml:space="preserve">
          <source>URL Routing</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="417f897c62b532771c5f906357279d41cd254183" translate="yes" xml:space="preserve">
          <source>URL decode a single string with a given encoding. If the charset is set to &lt;code&gt;None&lt;/code&gt; no unicode decoding is performed and raw bytes are returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="59f7f5cf36e63db124a31b0998156e4c59e54723" translate="yes" xml:space="preserve">
          <source>URL decode a single string with the given &lt;code&gt;charset&lt;/code&gt; and decode &amp;ldquo;+&amp;rdquo; to whitespace.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ab7e271ee98b8c3808cb4f3e5346f97005ea1df6" translate="yes" xml:space="preserve">
          <source>URL encode a dict/&lt;code&gt;MultiDict&lt;/code&gt;. If a value is &lt;code&gt;None&lt;/code&gt; it will not appear in the result string. Per default only values are encoded into the target charset strings. If &lt;code&gt;encode_keys&lt;/code&gt; is set to &lt;code&gt;True&lt;/code&gt; unicode keys are supported too.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="53d9c7cecddbe4d9b74c832feae730f4b5232141" translate="yes" xml:space="preserve">
          <source>URL encode a single string with a given encoding.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3439c87f5ba31facd3eb2d2bbec0a86ef308dd9a" translate="yes" xml:space="preserve">
          <source>URL encode a single string with the given encoding and convert whitespace to &amp;ldquo;+&amp;rdquo;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="09310e60d4fdd78818e096ad77839ecb142d428d" translate="yes" xml:space="preserve">
          <source>URL rules that end with a slash are branch URLs, others are leaves. If you have &lt;code&gt;strict_slashes&lt;/code&gt; enabled (which is the default), all branch URLs that are matched without a trailing slash will trigger a redirect to the same URL with the missing slash appended.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="00a7c4c398f08b618e6a7ccdfe4d69a79b0e20e8" translate="yes" xml:space="preserve">
          <source>URL scheme (http or https).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9ab0bd9a6126ee4b9d7538d5c6cba7aa587f31ed" translate="yes" xml:space="preserve">
          <source>Unicode</source>
          <target state="translated">Unicode</target>
        </trans-unit>
        <trans-unit id="f75f308dd57431f1617cf354577da52bc44e8b17" translate="yes" xml:space="preserve">
          <source>Unicode in HTTP</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="df15f4ca8c2d0b743e767ac104a721063faa29d8" translate="yes" xml:space="preserve">
          <source>Unicode in Python</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6816141193a0e3dc3b48a84b10bea2489b164992" translate="yes" xml:space="preserve">
          <source>Unix Sockets</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="49f4d898a6d80c56d3770fd7015f531b07b6f7a4" translate="yes" xml:space="preserve">
          <source>Unlike &lt;a href=&quot;#werkzeug.datastructures.MultiDict.setlistdefault&quot;&gt;&lt;code&gt;MultiDict.setlistdefault()&lt;/code&gt;&lt;/a&gt;, modifying the returned list will not affect the headers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8892faedefb1b4483300dec78974e0f4a4b9caeb" translate="yes" xml:space="preserve">
          <source>Unlike &lt;code&gt;input_stream&lt;/code&gt; this stream is properly guarded that you can&amp;rsquo;t accidentally read past the length of the input. Werkzeug will internally always refer to this stream to read data which makes it possible to wrap this object with a stream that does filtering.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fea530fae27b49822b915b65ef957c6860f6d93e" translate="yes" xml:space="preserve">
          <source>Unquote a single etag:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="38b379a351d52453058b6d9ce766e3c420d9ef76" translate="yes" xml:space="preserve">
          <source>Unquotes a header value. (Reversal of &lt;a href=&quot;#werkzeug.http.quote_header_value&quot;&gt;&lt;code&gt;quote_header_value()&lt;/code&gt;&lt;/a&gt;). This does not use the real unquoting but what browsers are actually using for quoting.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="de870cae840bd39cff0017a07ac1ea8217c1649b" translate="yes" xml:space="preserve">
          <source>Up until version 0.11, Werkzeug used Python&amp;rsquo;s stdlib functionality to detect the filesystem encoding. However, several bug reports against Werkzeug have shown that the value of &lt;a href=&quot;https://docs.python.org/3/library/sys.html#sys.getfilesystemencoding&quot;&gt;&lt;code&gt;sys.getfilesystemencoding()&lt;/code&gt;&lt;/a&gt; cannot be trusted under traditional UNIX systems. The usual problems come from misconfigured systems, where &lt;code&gt;LANG&lt;/code&gt; and similar environment variables are not set. In such cases, Python would default to ASCII as filesystem encoding, a very conservative default that is usually wrong and causes more problems than it avoids.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="342c659777997bec12f413246e5e24d6a8317e2a" translate="yes" xml:space="preserve">
          <source>Usage Example</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fec43ce445f974147bd0eb223a50147e7fb7202d" translate="yes" xml:space="preserve">
          <source>Usage example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="953a7fc5851c23d07844eae60c7f119f3a233621" translate="yes" xml:space="preserve">
          <source>Use a virtual environment to manage the dependencies for your project, both in development and in production.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="88d8ac3effcddb0ce3c2f2e338666e2de65c4500" translate="yes" xml:space="preserve">
          <source>Used if the method could not be performed on the resource because the requested action depended on another action and that action failed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="94601f9ef77420ba88134b5dbb0c9c79ecb42878" translate="yes" xml:space="preserve">
          <source>Used if the request is well formed, but the instructions are otherwise incorrect.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="047059fa9e2737c79e2d7a5d7410d40c335bbfcf" translate="yes" xml:space="preserve">
          <source>Used if the resource that is being accessed is locked.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8f9f2317df27b96fec34402a882717f5741a2312" translate="yes" xml:space="preserve">
          <source>User Agent</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="75f59ba62c8eb76d410054654b5d2ec73ebeb85d" translate="yes" xml:space="preserve">
          <source>UserAgent Parsing</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="845af645f6b5ea1d7ffb87dcb9e348ff5e3549a1" translate="yes" xml:space="preserve">
          <source>Using the Debugger</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0f68bf97c736657b510dc0525880f20b4e753ec0" translate="yes" xml:space="preserve">
          <source>Usually it&amp;rsquo;s a bad idea to call this method without checking the content length first as a client could send dozens of megabytes or more to cause memory problems on the server.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="70aa031f6bcabe7c6b752dad902bcd3b3c30ca0c" translate="yes" xml:space="preserve">
          <source>Usually nobody wants to work with the environ directly because it is limited to bytestrings and does not provide any way to access the form data besides parsing that data by hand.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ee3573f7a3179c375fa029a209dd8e1fd304efdd" translate="yes" xml:space="preserve">
          <source>Usually there are two ways to configure the server. Either just copy the &lt;code&gt;.cgi&lt;/code&gt; into a &lt;code&gt;cgi-bin&lt;/code&gt; (and use &lt;code&gt;mod_rewrite&lt;/code&gt; or something similar to rewrite the URL) or let the server point to the file directly.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9afae4989d5af70d49c12d47ac337efec435958f" translate="yes" xml:space="preserve">
          <source>Usually this &amp;ldquo;just works&amp;rdquo; and we don&amp;rsquo;t have to worry about it, but there are situations where this behavior is problematic. For example the Python 2 IO layer is not unicode aware. This means that whenever you work with data from the file system you have to properly decode it. The correct way to load a text file from the file system looks like this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1b467970d94b615055c86ede540b8ee6143231fc" translate="yes" xml:space="preserve">
          <source>Usually you want to use the high-level layer (the request and response objects). But there are situations where this might not be what you want.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="18fdc5ee8b1f8fba8dabaa933373c0483ab7fad7" translate="yes" xml:space="preserve">
          <source>Utilities</source>
          <target state="translated">Utilities</target>
        </trans-unit>
        <trans-unit id="d1d2c525860271586f9f00ec661105e6640c489f" translate="yes" xml:space="preserve">
          <source>Variable parts are of course also possible in the host section:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c706b25e9a9350f125c2e1e9fbde596c9b497bc3" translate="yes" xml:space="preserve">
          <source>Various utilities for the local filesystem.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b1210c00a440628828eb3ebae14c943405db0eae" translate="yes" xml:space="preserve">
          <source>Various utility functions shipped with Werkzeug.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e3d0872296106e3000cffa85fb872e5af669a0e5" translate="yes" xml:space="preserve">
          <source>Version 0.1</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="164ecd0042d125b561c75b19302a2c4b6d04645a" translate="yes" xml:space="preserve">
          <source>Version 0.10</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fa2e2ff37b4ee75634af1d71a64a7181860dfb27" translate="yes" xml:space="preserve">
          <source>Version 0.10.1</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f53a00f1888b1f0897b171b62529ed34a41d34a2" translate="yes" xml:space="preserve">
          <source>Version 0.10.2</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3dd1acb72cf03f4e4160222c8064f48ec8a9546f" translate="yes" xml:space="preserve">
          <source>Version 0.10.3</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7a43baa433931924566a63205c9a270f28f040b0" translate="yes" xml:space="preserve">
          <source>Version 0.10.4</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="280cbbf2aa0f839af4bf42385b2d1499bafc64d8" translate="yes" xml:space="preserve">
          <source>Version 0.10.5</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d0b0f515ad64ca357140d4d452724c6892bbe084" translate="yes" xml:space="preserve">
          <source>Version 0.11</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="753aec77a66df488af72cbb036b532c40217773f" translate="yes" xml:space="preserve">
          <source>Version 0.11.1</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="95b5f7eb86b04c1e4bab3744298aeb64039dd5b1" translate="yes" xml:space="preserve">
          <source>Version 0.11.10</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="643734e0a14d0bf851ac04c6ecac2dc82bc35704" translate="yes" xml:space="preserve">
          <source>Version 0.11.11</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1ed61ea0e78474a9e8ab4160f5dd2a17b7160f5a" translate="yes" xml:space="preserve">
          <source>Version 0.11.12</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="11e321029f1ba54a4d1c363c3c69344663835f66" translate="yes" xml:space="preserve">
          <source>Version 0.11.13</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="53948ff3ce6136d76140f8061bd3b1993af47312" translate="yes" xml:space="preserve">
          <source>Version 0.11.14</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ba11cc7ca216898f8635dba5f10ba95161ebd90d" translate="yes" xml:space="preserve">
          <source>Version 0.11.15</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="954fdbed640464a4337047c84dd9a5b07b487f62" translate="yes" xml:space="preserve">
          <source>Version 0.11.16</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3f946a64066860f7fea70bcf63a3402c0c09b10b" translate="yes" xml:space="preserve">
          <source>Version 0.11.2</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="17fa26a52c834f9f3c787d89291768adf8e46438" translate="yes" xml:space="preserve">
          <source>Version 0.11.3</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6ea3ad345b50517332f710a6649fa7a82ddb9bf4" translate="yes" xml:space="preserve">
          <source>Version 0.11.4</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="abb9b8f44acb036f01a111c4bebb242778c29fba" translate="yes" xml:space="preserve">
          <source>Version 0.11.5</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a70774d07f50f6160518813067ac3d869a3614f7" translate="yes" xml:space="preserve">
          <source>Version 0.11.6</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="974866ca1bed8c1c983734be925b248a70399684" translate="yes" xml:space="preserve">
          <source>Version 0.11.7</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1597a1ad73ecbe946e9e774a7112884c1cb5b498" translate="yes" xml:space="preserve">
          <source>Version 0.11.8</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="74ea9419e5a3c0f29f208bc55d1999be05d715aa" translate="yes" xml:space="preserve">
          <source>Version 0.11.9</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4f4478af417dc964c1b38d03dea6990e6b59337d" translate="yes" xml:space="preserve">
          <source>Version 0.12</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="00294dfe7244c1c8a6ae8954ef35804a4f8f3d5c" translate="yes" xml:space="preserve">
          <source>Version 0.12.1</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0426376b735575754e18cb94472bd40428064299" translate="yes" xml:space="preserve">
          <source>Version 0.12.2</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="13218b49e8fe47ce903b0ae1972e27f0f681918d" translate="yes" xml:space="preserve">
          <source>Version 0.13</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ee2a33af475806d36ecd57b8f78734d0ffc3b88f" translate="yes" xml:space="preserve">
          <source>Version 0.14</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a9986ab8523026bacb8f7ddf694c2fff2834a808" translate="yes" xml:space="preserve">
          <source>Version 0.14.1</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="15dac1fb03fa780f47c128609d221e4606aa1157" translate="yes" xml:space="preserve">
          <source>Version 0.15.0</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5cb1b48f464788cad10d935377752421e9f65630" translate="yes" xml:space="preserve">
          <source>Version 0.15.1</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9e111b58b8b15f3bb0594a994c179f5d4a39c6b3" translate="yes" xml:space="preserve">
          <source>Version 0.15.2</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="297e348cfe61a5303a6a32789540f990cfbbcb8f" translate="yes" xml:space="preserve">
          <source>Version 0.15.3</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="054e183fb53a714a429bc008ea709efceaf1969a" translate="yes" xml:space="preserve">
          <source>Version 0.15.4</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="11f0a7d660e19416cecf3edeff188b67794afcb9" translate="yes" xml:space="preserve">
          <source>Version 0.15.5</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5e2acb5b5e42a6074396095b185dd4bebc548f39" translate="yes" xml:space="preserve">
          <source>Version 0.15.6</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1e8df1ad560b44dca8dac716b813c66d4b5628d6" translate="yes" xml:space="preserve">
          <source>Version 0.16.0</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d514bd71434318ea3cc68d759fa0ca99d6cf2692" translate="yes" xml:space="preserve">
          <source>Version 0.16.1</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4c2611dcd833d75b55bc4f279b6d5537b8078f6e" translate="yes" xml:space="preserve">
          <source>Version 0.2</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bd19664b1e20352cc8967604f9641063bf46ee3c" translate="yes" xml:space="preserve">
          <source>Version 0.3</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c60fb31f26ed760097b45e6923562b1bdca9fee7" translate="yes" xml:space="preserve">
          <source>Version 0.3.1</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d9478ca0c30be3f7ddcc6a3d34473ce1d43d002a" translate="yes" xml:space="preserve">
          <source>Version 0.4</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="40f5c3693ec0cbebcdd0def50a0cb3774e2bc5de" translate="yes" xml:space="preserve">
          <source>Version 0.4.1</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5d2d8d5e17454d27c1958a6163d0f5311b955848" translate="yes" xml:space="preserve">
          <source>Version 0.5</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4d89d286db5b379e1bb6d168b02f880eb33b6e5e" translate="yes" xml:space="preserve">
          <source>Version 0.5.1</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="13469640a1fe1773fa321106c2212786331ada92" translate="yes" xml:space="preserve">
          <source>Version 0.6</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="235d0a7098aaa1f18850e8ba6bad0e8cc2d9951e" translate="yes" xml:space="preserve">
          <source>Version 0.6.1</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1e4343a302de9749cad2d4000f282716a24d3a58" translate="yes" xml:space="preserve">
          <source>Version 0.6.2</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="207feffb493fb78e452158045a56535661eeb035" translate="yes" xml:space="preserve">
          <source>Version 0.7</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="67e76e75fb41fae561d77cc18f14d2ecd9eacddb" translate="yes" xml:space="preserve">
          <source>Version 0.7.1</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="74c92ba64e880fb8f1afdbaf1cd19da3e2022233" translate="yes" xml:space="preserve">
          <source>Version 0.7.2</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9dd5ffb2f943217a769996eec5354793a3427344" translate="yes" xml:space="preserve">
          <source>Version 0.8</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4a6ec3c768cfa78b196ed4d3a0018ca950193a31" translate="yes" xml:space="preserve">
          <source>Version 0.8.1</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="880203dfce4a5e23dfe4b50fe8170fa7b8943562" translate="yes" xml:space="preserve">
          <source>Version 0.8.2</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="70ac296090c6818d0d0ebb0bc0e7f6a854bc4c76" translate="yes" xml:space="preserve">
          <source>Version 0.8.3</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cc41fe8296b71ac6fcdb18fee6aa8aee24162345" translate="yes" xml:space="preserve">
          <source>Version 0.8.4</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="55985e570c95697b91d8cafbaae783a9f9588693" translate="yes" xml:space="preserve">
          <source>Version 0.9</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0117b2e49bd20c215a3ab710fb03bf80e57190ad" translate="yes" xml:space="preserve">
          <source>Version 0.9.1</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2681b91c837b465bdbe5ee8d7779b4d8a0100af0" translate="yes" xml:space="preserve">
          <source>Version 0.9.2</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="96457e0124511ac7248597475218465cd00275ec" translate="yes" xml:space="preserve">
          <source>Version 0.9.3</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8d2400206503ed24ab81062ec9a56a86150203be" translate="yes" xml:space="preserve">
          <source>Version 0.9.4</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="367c8dd92ad96c2e1277c8b80e80419b1daef826" translate="yes" xml:space="preserve">
          <source>Version 0.9.5</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="104266b0b1e995aafdce2d3b805666e999467222" translate="yes" xml:space="preserve">
          <source>Version 0.9.6</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="826f96ef6c6b26143804c9f21963c8f2d8f3fbe9" translate="yes" xml:space="preserve">
          <source>Version 0.9.7</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="347e553ca29789928643977808849e088fa5b52f" translate="yes" xml:space="preserve">
          <source>Version 1.0.0</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="afc7a8db48b4af8c0902573c671a14cb065e54bc" translate="yes" xml:space="preserve">
          <source>Version 1.0.1</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4641cda3030bb07e688577979dc28ccecd7d91ff" translate="yes" xml:space="preserve">
          <source>Version 1.0.2</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0de4a35ab444f82f147e71aa42d159992b60ff07" translate="yes" xml:space="preserve">
          <source>Very basic request object. This does not implement advanced stuff like entity tag parsing or cache controls. The request object is created with the WSGI environment as first argument and will add itself to the WSGI environment as &lt;code&gt;'werkzeug.request'&lt;/code&gt; unless it&amp;rsquo;s created with &lt;code&gt;populate_request&lt;/code&gt; set to False.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="604736b66fdd2200b67d93497d3215fc45510cb4" translate="yes" xml:space="preserve">
          <source>Very simple object that represents the &lt;code&gt;If-Range&lt;/code&gt; header in parsed form. It will either have neither a etag or date or one of either but never both.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f12e5df5b4e29d487a13125a6a5352e254b327bc" translate="yes" xml:space="preserve">
          <source>View Function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="80e002ac7b12d3f2cdf65aa829a437c692675c0a" translate="yes" xml:space="preserve">
          <source>Virtual Hosts</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6f746bf843c7ebd4981d768101e7250eddd98ac6" translate="yes" xml:space="preserve">
          <source>Virtual environments</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8a94c4f48d0fc6f98d4e011608e99f0d9b58d791" translate="yes" xml:space="preserve">
          <source>Virtual environments are independent groups of Python libraries, one for each project. Packages installed for one project will not affect other projects or the operating system&amp;rsquo;s packages.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="46a599e0d1a0ca93f48789a181c11f4e26c1373d" translate="yes" xml:space="preserve">
          <source>WSGI</source>
          <target state="translated">WSGI</target>
        </trans-unit>
        <trans-unit id="8869941c0890a55d337c977ad12476b81575155b" translate="yes" xml:space="preserve">
          <source>WSGI Environment</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dabe1443487bdfae0e71a83eef1ded9879f3f26b" translate="yes" xml:space="preserve">
          <source>WSGI Helpers</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="32b023b2978e01d43a6ab75a73beadaf2cf154d9" translate="yes" xml:space="preserve">
          <source>WSGI Protocol Linter</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e35eb58ad81ad4892fc912272b6908924f1a7a77" translate="yes" xml:space="preserve">
          <source>WSGI a specification for Python web applications Werkzeug follows. It was specified in the &lt;a href=&quot;https://www.python.org/dev/peps/pep-0333&quot; id=&quot;index-0&quot;&gt;&lt;strong&gt;PEP 333&lt;/strong&gt;&lt;/a&gt; and is widely supported. Unlike previous solutions it guarantees that web applications, servers and utilities can work together.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7dca72476e48ad28afbe05124ec3c01e3505910f" translate="yes" xml:space="preserve">
          <source>Warn if a cookie header exceeds this size. The default, 4093, should be safely &lt;a href=&quot;http://browsercookielimits.squawky.net/&quot;&gt;supported by most browsers&lt;/a&gt;. A cookie larger than this size will still be sent, but it may be ignored or handled incorrectly by some browsers. Set to 0 to disable this check.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e9c45563358e813f157ba81b33143542165ba84e" translate="yes" xml:space="preserve">
          <source>Warning</source>
          <target state="translated">Warning</target>
        </trans-unit>
        <trans-unit id="da6dbe6079ed61deaf66edcd93e90bcc726c932b" translate="yes" xml:space="preserve">
          <source>Warns about common errors in the WSGI and HTTP behavior of the server and wrapped application. Some of the issues it check are:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4fc3dba543b8ef6971b22856cb5481784d4038ac" translate="yes" xml:space="preserve">
          <source>We bind the URL map to the current environment and get back a &lt;code&gt;URLAdapter&lt;/code&gt;. The adapter can be used to match the request but also to reverse URLs. The match method will return the endpoint and a dictionary of values in the URL. For instance the rule for &lt;code&gt;follow_short_link&lt;/code&gt; has a variable part called &lt;code&gt;short_id&lt;/code&gt;. When we go to &lt;code&gt;http://localhost:5000/foo&lt;/code&gt; we will get the following values back:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9df997faf4aee32610661fc6f1fa64b558d6a37c" translate="yes" xml:space="preserve">
          <source>We can also find out which HTTP method was used for the request:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e8c8ace33ed5767ec55801e376a8c55e8cc5d35a" translate="yes" xml:space="preserve">
          <source>We recommend using the latest version of Python 3. Werkzeug supports Python 3.5 and newer and Python 2.7.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e86caf9ff2eaf6785ff6b8f57d3b231050284598" translate="yes" xml:space="preserve">
          <source>We strongly suggest using &lt;a href=&quot;#werkzeug.wsgi.LimitedStream.read&quot;&gt;&lt;code&gt;read()&lt;/code&gt;&lt;/a&gt; only or using the &lt;a href=&quot;#werkzeug.wsgi.make_line_iter&quot;&gt;&lt;code&gt;make_line_iter()&lt;/code&gt;&lt;/a&gt; which safely iterates line-based over a WSGI input stream.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="56d0e53e6a7114caaeb10b3ceba94b42ba2520e2" translate="yes" xml:space="preserve">
          <source>WebSockets</source>
          <target state="translated">WebSockets</target>
        </trans-unit>
        <trans-unit id="05fe648446b6845fb0debe39ec781f8dad9a9847" translate="yes" xml:space="preserve">
          <source>Welcome to the Werkzeug tutorial in which we will create a &lt;a href=&quot;https://tinyurl.com/&quot;&gt;TinyURL&lt;/a&gt; clone that stores URLs in a redis instance. The libraries we will use for this applications are &lt;a href=&quot;http://jinja.pocoo.org/&quot;&gt;Jinja&lt;/a&gt; 2 for the templates, &lt;a href=&quot;https://redis.io/&quot;&gt;redis&lt;/a&gt; for the database layer and, of course, Werkzeug for the WSGI layer.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dfa660bfef7f591b7517f18760d971917ecae5b5" translate="yes" xml:space="preserve">
          <source>Werkzeug</source>
          <target state="translated">Werkzeug</target>
        </trans-unit>
        <trans-unit id="bd2b4d4d41f06829ca59c63f941968341a0b89cf" translate="yes" xml:space="preserve">
          <source>Werkzeug Tutorial</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="934e1f56d3c3ee78f9d3f6e5d10f352e01cf5c9e" translate="yes" xml:space="preserve">
          <source>Werkzeug also provides helper mixins for various HTTP related functionality such as etags, cache control, user agents etc. When subclassing you can mix those classes in to extend the functionality of the &lt;a href=&quot;#werkzeug.wrappers.BaseRequest&quot;&gt;&lt;code&gt;BaseRequest&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;#werkzeug.wrappers.BaseResponse&quot;&gt;&lt;code&gt;BaseResponse&lt;/code&gt;&lt;/a&gt; object. Here a small example for a request object that parses accept headers:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="92141199124020e51687a9cbdea6614c3a43e0a6" translate="yes" xml:space="preserve">
          <source>Werkzeug does not have any direct dependencies.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="506768ae87e21e864fce7605fd730b9e7e45bb67" translate="yes" xml:space="preserve">
          <source>Werkzeug has no further WebSocket support beyond routing. This functionality is mostly of use to ASGI projects.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8dac336aeeea92cd1d3a88ab458a3c78ac2e32f1" translate="yes" xml:space="preserve">
          <source>Werkzeug is Unicode aware and doesn&amp;rsquo;t enforce any dependencies. It is up to the developer to choose a template engine, database adapter, and even how to handle requests.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ae083fbc6773d2775a62452fc29b09c62f9aa0b5" translate="yes" xml:space="preserve">
          <source>Werkzeug is a comprehensive &lt;a href=&quot;https://wsgi.readthedocs.io/en/latest/&quot;&gt;WSGI&lt;/a&gt; web application library. It began as a simple collection of various utilities for WSGI applications and has become one of the most advanced WSGI utility libraries.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="90c016bcb32f3dcf3e0d409ad129d16fe32e880a" translate="yes" xml:space="preserve">
          <source>Werkzeug is a utility library for WSGI. WSGI itself is a protocol or convention that ensures that your web application can speak with the webserver and more importantly that web applications work nicely together.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c6408cf35beb138563cc1f5f2721a21cba32e985" translate="yes" xml:space="preserve">
          <source>Werkzeug is intended to be a utility rather than a framework. Because of that the user-friendly API is separated from the lower-level API so that Werkzeug can easily be used to extend another system.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2eb5bbfb02019c2764387da48c05e4eacf52b2e9" translate="yes" xml:space="preserve">
          <source>Werkzeug itself does not tell you how you should develop applications, but the documentation often speaks of view functions that work roughly the same. The idea of a view function is that it&amp;rsquo;s called with a request object (and optionally some parameters from an URL rule) and returns a response object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cc62ad615098731d90a20f6b99464a01a98dd7a6" translate="yes" xml:space="preserve">
          <source>Werkzeug parses the incoming data under the following situations:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9115cd85343b22953d522f63cc673f594f3262ad" translate="yes" xml:space="preserve">
          <source>Werkzeug provides a &lt;code&gt;Client&lt;/code&gt; object which you can pass a WSGI application (and optionally a response wrapper) which you can use to send virtual requests to the application.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b42809991e32c7cf47a3bf8e16ecb9b9524b82bc" translate="yes" xml:space="preserve">
          <source>Werkzeug provides a couple of functions to parse and generate HTTP headers that are useful when implementing WSGI middlewares or whenever you are operating on a lower level layer. All this functionality is also exposed from request and response objects.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ac79dc095208ca6e932775603ebd5ca7b339c0c6" translate="yes" xml:space="preserve">
          <source>Werkzeug provides a much more powerful system, similar to &lt;a href=&quot;https://routes.readthedocs.io/en/latest/&quot;&gt;Routes&lt;/a&gt;. All the objects mentioned on this page must be imported from &lt;a href=&quot;#module-werkzeug.routing&quot;&gt;&lt;code&gt;werkzeug.routing&lt;/code&gt;&lt;/a&gt;, not from &lt;code&gt;werkzeug&lt;/code&gt;!</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="151720da03ae3c4e5d98ed3c35f2a70e7cd7100d" translate="yes" xml:space="preserve">
          <source>Werkzeug provides functions to deal with this automatically so that you don&amp;rsquo;t need to be aware of the inner workings. Use the functions on this page as well as &lt;a href=&quot;../datastructures/index#werkzeug.datastructures.EnvironHeaders&quot;&gt;&lt;code&gt;EnvironHeaders()&lt;/code&gt;&lt;/a&gt; to read data out of the WSGI environment.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0a6453c74164735bcb776f6c00cebd0ec014a3c0" translate="yes" xml:space="preserve">
          <source>Werkzeug provides its own implementation of local data storage called &lt;code&gt;werkzeug.local&lt;/code&gt;. This approach provides a similar functionality to thread locals but also works with greenlets.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6e2a18204c5479b47b88bc3c7fd34b63b698dac6" translate="yes" xml:space="preserve">
          <source>Werkzeug provides some subclasses of common Python objects to extend them with additional features. Some of them are used to make them immutable, others are used to change some semantics to better work with HTTP.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a1e530f5cca374fbe80b62ad58a802e4021c76fd" translate="yes" xml:space="preserve">
          <source>Werkzeug provides the form parsing functions separately from the request object so that you can access form data from a plain WSGI environment.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="53344856b87e57bb0e350ba5eb673a942757f0d7" translate="yes" xml:space="preserve">
          <source>Werkzeug uses standard Python &lt;a href=&quot;https://docs.python.org/3/library/logging.html#module-logging&quot;&gt;&lt;code&gt;logging&lt;/code&gt;&lt;/a&gt;. The logger is named &lt;code&gt;&quot;werkzeug&quot;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="70e39eaaf0fff8e4ab6acdba42c5d3035b4a948e" translate="yes" xml:space="preserve">
          <source>Werkzeug uses unicode internally everywhere text data is assumed, even if the HTTP standard is not unicode aware as it. Basically all incoming data is decoded from the charset specified (per default &lt;code&gt;utf-8&lt;/code&gt;) so that you don&amp;rsquo;t operate on bytestrings any more. Outgoing unicode data is then encoded into the target charset again.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3adae2193d51366a5aedd1ef9204593ef9e14d07" translate="yes" xml:space="preserve">
          <source>What problem does a virtual environment solve? The more Python projects you have, the more likely it is that you need to work with different versions of Python libraries, or even Python itself. Newer versions of libraries for one project can break compatibility in another project.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ed39856251b4707e0350e38e21efa8241cd968e0" translate="yes" xml:space="preserve">
          <source>What should happen if a disconnect is detected? The return value of this function is returned from read functions in case the client went away. By default a &lt;a href=&quot;../exceptions/index#werkzeug.exceptions.ClientDisconnected&quot;&gt;&lt;code&gt;ClientDisconnected&lt;/code&gt;&lt;/a&gt; exception is raised.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="84146f874af6fb9583ca5200a801fe3b31a05047" translate="yes" xml:space="preserve">
          <source>When a rule template is called the keyword arguments are used to replace the placeholders in all the string parameters.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="13e817bc0701216d0a9fba9210a195df672d806e" translate="yes" xml:space="preserve">
          <source>When an application is running behind a proxy server, WSGI may see the request as coming from that server rather than the real client. Proxies set various headers to track where the request actually came from.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8c568a13dfa8e56f06bec9659e7e87726a31f980" translate="yes" xml:space="preserve">
          <source>When does Werkzeug Parse?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="19de5c16c4983894b64f43d0ed064de82b13b45d" translate="yes" xml:space="preserve">
          <source>When it comes to combining multiple controller or view functions (however you want to call them), you need a dispatcher. A simple way would be applying regular expression tests on &lt;code&gt;PATH_INFO&lt;/code&gt; and call registered callback functions that return the value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="698c02fcc942bbc3d2045b943bbd7c622222ec7f" translate="yes" xml:space="preserve">
          <source>When passed a dict of code -&amp;gt; exception items it can be used as callable that raises exceptions. If the first argument to the callable is an integer it will be looked up in the mapping, if it&amp;rsquo;s a WSGI application it will be raised in a proxy exception.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a2837cd9364e609124bf1821e7be52e8c3c65079" translate="yes" xml:space="preserve">
          <source>When passed a quoted tag it will check if this tag is part of the set. If the tag is weak it is checked against weak and strong tags, otherwise strong only.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="419c449d08b9cfb35b7adcf2dd813e93de80918f" translate="yes" xml:space="preserve">
          <source>When processing those additional values, lists are furthermore interpreted as multiple values (as per &lt;a href=&quot;../datastructures/index#werkzeug.datastructures.MultiDict&quot;&gt;&lt;code&gt;werkzeug.datastructures.MultiDict&lt;/code&gt;&lt;/a&gt;):</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4c953027d980435775bdda6bb1f535b8abbf3b2e" translate="yes" xml:space="preserve">
          <source>When the authentication type is basic this is the password transmitted by the client, else &lt;code&gt;None&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="00fc126917635b6b1c38fdcb854e7ca63ba2cc1c" translate="yes" xml:space="preserve">
          <source>When the rule is matched the routing system will raise a &lt;code&gt;RequestRedirect&lt;/code&gt; exception with the target for the redirect.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a8e0a1d2edadc4e915fda127988218f37efbe19b" translate="yes" xml:space="preserve">
          <source>Whenever something is bound to l.user / l.request the proxy objects will forward all operations. If no object is bound a &lt;a href=&quot;https://docs.python.org/3/library/exceptions.html#RuntimeError&quot;&gt;&lt;code&gt;RuntimeError&lt;/code&gt;&lt;/a&gt; will be raised.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b3688a4a891b6563a240420a59d53e68bb041777" translate="yes" xml:space="preserve">
          <source>Whether credentials can be shared by the browser to JavaScript code. As part of the preflight request it indicates whether credentials can be used on the cross origin request.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a3c23d2d7a3812c5bd0c5bc869ada516901e2af3" translate="yes" xml:space="preserve">
          <source>Whether to remove the prefix from the URL before dispatching it to the target. The default is &lt;code&gt;False&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7ae426c4f34a883e3f9cff77c4e0ea402dd812c8" translate="yes" xml:space="preserve">
          <source>Which headers can be sent with the cross origin request.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dd26b5dd4d9b2d1c27e0a0f9afa5056e571558d9" translate="yes" xml:space="preserve">
          <source>Which headers can be shared by the browser to JavaScript code.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f0c90c71c51a57f9d7872a1912fed17afb5f7a6b" translate="yes" xml:space="preserve">
          <source>Which methods can be used for the cross origin request.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="26d9c28d789c254f71ea99a3463b99a7ccc2f4fa" translate="yes" xml:space="preserve">
          <source>Windows</source>
          <target state="translated">Windows</target>
        </trans-unit>
        <trans-unit id="1e2931094aaeb6b7e3b2294474d6c79bf3723ded" translate="yes" xml:space="preserve">
          <source>With response objects it would look like this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d36e84b58183fa853c7f86428980982d315fb6b8" translate="yes" xml:space="preserve">
          <source>With this function one can release &lt;code&gt;Local&lt;/code&gt; objects as well as &lt;a href=&quot;#werkzeug.local.LocalStack&quot;&gt;&lt;code&gt;LocalStack&lt;/code&gt;&lt;/a&gt; objects. However it is not possible to release data held by proxies that way, one always has to retain a reference to the underlying local object in order to be able to release it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b8caf4375a125bf6766a116d4f9cc1427ae257e6" translate="yes" xml:space="preserve">
          <source>Within the activated environment, use the following command to install Werkzeug:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9e2c98e9b2a9f6f91349394228b0c8425db76f13" translate="yes" xml:space="preserve">
          <source>Works exactly like &lt;a href=&quot;#werkzeug.urls.BaseURL.host&quot;&gt;&lt;code&gt;host&lt;/code&gt;&lt;/a&gt; but will return a result that is restricted to ASCII. If it finds a netloc that is not ASCII it will attempt to idna decode it. This is useful for socket operations when the URL might include internationalized characters.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6d64e29cb6aae481f5dc2c24c92ef542daadd640" translate="yes" xml:space="preserve">
          <source>Works like &lt;a href=&quot;#werkzeug.urls.url_decode&quot;&gt;&lt;code&gt;url_decode()&lt;/code&gt;&lt;/a&gt; but decodes a stream. The behavior of stream and limit follows functions like &lt;a href=&quot;../wsgi/index#werkzeug.wsgi.make_line_iter&quot;&gt;&lt;code&gt;make_line_iter()&lt;/code&gt;&lt;/a&gt;. The generator of pairs is directly fed to the &lt;code&gt;cls&lt;/code&gt; so you can consume the data while it&amp;rsquo;s parsed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f74e15386ad777ef7113a6993638a51b12f2fc18" translate="yes" xml:space="preserve">
          <source>Works like &lt;a href=&quot;#werkzeug.wsgi.make_line_iter&quot;&gt;&lt;code&gt;make_line_iter()&lt;/code&gt;&lt;/a&gt; but accepts a separator which divides chunks. If you want newline based processing you should use &lt;a href=&quot;#werkzeug.wsgi.make_line_iter&quot;&gt;&lt;code&gt;make_line_iter()&lt;/code&gt;&lt;/a&gt; instead as it supports arbitrary newline markers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="721a8a571697079e51855a96eef8393615d8ca1d" translate="yes" xml:space="preserve">
          <source>Works like a &lt;a href=&quot;#werkzeug.datastructures.TypeConversionDict&quot;&gt;&lt;code&gt;TypeConversionDict&lt;/code&gt;&lt;/a&gt; but does not support modifications.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="76b0bcc5633233a5ea17cbffc3a933abb2bcd215" translate="yes" xml:space="preserve">
          <source>Works like a regular &lt;a href=&quot;#werkzeug.datastructures.MultiDict&quot;&gt;&lt;code&gt;MultiDict&lt;/code&gt;&lt;/a&gt; but preserves the order of the fields. To convert the ordered multi dict into a list you can use the &lt;code&gt;items()&lt;/code&gt; method and pass it &lt;code&gt;multi=True&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="adab44d0c0874e95617b042a53a2986e0767ee7e" translate="yes" xml:space="preserve">
          <source>Works like a regular dict but the &lt;a href=&quot;#werkzeug.datastructures.TypeConversionDict.get&quot;&gt;&lt;code&gt;get()&lt;/code&gt;&lt;/a&gt; method can perform type conversions. &lt;a href=&quot;#werkzeug.datastructures.MultiDict&quot;&gt;&lt;code&gt;MultiDict&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#werkzeug.datastructures.CombinedMultiDict&quot;&gt;&lt;code&gt;CombinedMultiDict&lt;/code&gt;&lt;/a&gt; are subclasses of this class and provide the same feature.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ca5859ab5f2b1a8c95797fb00c282ab7ae8a383f" translate="yes" xml:space="preserve">
          <source>Wrap a WSGI application and profile the execution of each request. Responses are buffered so that timings are more exact.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ab83e745a628e75fa9caefafef8c6094297a9e8e" translate="yes" xml:space="preserve">
          <source>Wrap a WSGI application so that cleaning up happens after request end.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="927f02c55caccd44afd1bc206c6c34d1dcf8fd9e" translate="yes" xml:space="preserve">
          <source>Wraps a file. This uses the WSGI server&amp;rsquo;s file wrapper if available or otherwise the generic &lt;a href=&quot;#werkzeug.wsgi.FileWrapper&quot;&gt;&lt;code&gt;FileWrapper&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="44d32feec69bc1c1b18dfbf14cf6dad2b948e7f8" translate="yes" xml:space="preserve">
          <source>Wraps a stream so that it doesn&amp;rsquo;t read more than n bytes. If the stream is exhausted and the caller tries to get more bytes from it &lt;a href=&quot;#werkzeug.wsgi.LimitedStream.on_exhausted&quot;&gt;&lt;code&gt;on_exhausted()&lt;/code&gt;&lt;/a&gt; is called which by default returns an empty string. The return value of that function is forwarded to the reader function. So if it returns an empty string &lt;a href=&quot;#werkzeug.wsgi.LimitedStream.read&quot;&gt;&lt;code&gt;read()&lt;/code&gt;&lt;/a&gt; will return an empty string as well.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0071aca9850f803e6b73910029c693aa8849c710" translate="yes" xml:space="preserve">
          <source>X-Forwarded-For Proxy Fix</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="31869c6001379eb28c3b5f7dc772e05be7424a7c" translate="yes" xml:space="preserve">
          <source>You can add custom converters that add behaviors not provided by the built-in converters. To make a custom converter, subclass &lt;code&gt;BaseConverter&lt;/code&gt; then pass the new class to the &lt;a href=&quot;#werkzeug.routing.Map&quot;&gt;&lt;code&gt;Map&lt;/code&gt;&lt;/a&gt;&lt;code&gt;converters&lt;/code&gt; parameter, or add it to &lt;a href=&quot;#werkzeug.routing.Map.converters&quot;&gt;&lt;code&gt;url_map.converters&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3457e4466b2c192c7bae3f9302d701339c3ee9f1" translate="yes" xml:space="preserve">
          <source>You can also create proxy objects by hand:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="033fb874d472d9eb3502a27259e1242364d5a661" translate="yes" xml:space="preserve">
          <source>You can also pass it the &lt;code&gt;extra_files&lt;/code&gt; keyword argument with a list of additional files (like configuration files) you want to observe.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="89df6a28465047cf924031f75799581f3bdf8f83" translate="yes" xml:space="preserve">
          <source>You can find the hosts file on the following location:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a72c28f5286bf3c9fa7dbcf2c127f68e0c207524" translate="yes" xml:space="preserve">
          <source>You can modify the status of the response in the same way. Either just the code or provide a message as well:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7cd0c621e55f8e2d662f5b3ac0b958b1a6618618" translate="yes" xml:space="preserve">
          <source>You can open the file with your favorite text editor and add a new name after &lt;code&gt;localhost&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3bd7bdb0a55032885d0c83fa79445b3bd7d56212" translate="yes" xml:space="preserve">
          <source>You can override the default description in the constructor with the &lt;code&gt;description&lt;/code&gt; parameter:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d788274d31bdff7b335fa8b379fb2c89a747d09e" translate="yes" xml:space="preserve">
          <source>You can use &lt;code&gt;pip&lt;/code&gt; to install the required libraries:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="226863f12880b43d8780e784a48edc8393f8aff4" translate="yes" xml:space="preserve">
          <source>You must pass the name of the cached property as the second argument.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="746766341bc7bca1f2f98504c8feb2d0fb62c4ab" translate="yes" xml:space="preserve">
          <source>You must tell the middleware how many proxies set each header so it knows what values to trust. It is a security issue to trust values that came from the client rather than a proxy.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ce49957a44e55898d7a09ae466745bf408a0f9c9" translate="yes" xml:space="preserve">
          <source>You should not use this class directly but rather use the &lt;a href=&quot;#werkzeug.wsgi.wrap_file&quot;&gt;&lt;code&gt;wrap_file()&lt;/code&gt;&lt;/a&gt; function that uses the WSGI server&amp;rsquo;s file wrapper support if it&amp;rsquo;s available.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a165a2ffada5c3d0f7a2f2d24bd48469a448e571" translate="yes" xml:space="preserve">
          <source>You will have to acknowledge the certificate in your browser once then.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0d8b713959c121b0afa58390f3cdee42be1bc50e" translate="yes" xml:space="preserve">
          <source>Your WSGI application is always passed two arguments. The WSGI &amp;ldquo;environment&amp;rdquo; and the WSGI &lt;code&gt;start_response&lt;/code&gt; function that is used to start the response phase. The &lt;a href=&quot;#werkzeug.wrappers.Request&quot;&gt;&lt;code&gt;Request&lt;/code&gt;&lt;/a&gt; class wraps the &lt;code&gt;environ&lt;/code&gt; for easier access to request variables (form data, request headers etc.).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="56ddffc04b417958566e4f6b3cd5b2756a0b2d24" translate="yes" xml:space="preserve">
          <source>Your shell prompt will change to show the name of the activated environment.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5c53a522de8c89f2fc9f9294e0b3be255b2206a2" translate="yes" xml:space="preserve">
          <source>a &lt;a href=&quot;../datastructures/index#werkzeug.datastructures.Authorization&quot;&gt;&lt;code&gt;Authorization&lt;/code&gt;&lt;/a&gt; object or &lt;code&gt;None&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0cb6871b8de63ec84e8938894b443c479154c5d5" translate="yes" xml:space="preserve">
          <source>a &lt;a href=&quot;../datastructures/index#werkzeug.datastructures.HeaderSet&quot;&gt;&lt;code&gt;HeaderSet&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6472dbc88c980a404bc7c4d81e049df51482f8ad" translate="yes" xml:space="preserve">
          <source>a &lt;a href=&quot;../datastructures/index#werkzeug.datastructures.WWWAuthenticate&quot;&gt;&lt;code&gt;WWWAuthenticate&lt;/code&gt;&lt;/a&gt; object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8dab90b45d9232e4a5f77170c4038cf7f7445e63" translate="yes" xml:space="preserve">
          <source>a &lt;a href=&quot;https://docs.python.org/3/library/datetime.html#datetime.datetime&quot;&gt;&lt;code&gt;datetime.datetime&lt;/code&gt;&lt;/a&gt; object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1e8f21e6428b6779291012f2402270a33723903a" translate="yes" xml:space="preserve">
          <source>a &lt;a href=&quot;https://docs.python.org/3/library/stdtypes.html#dict&quot;&gt;&lt;code&gt;dict&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cd13a2cd19f7d401df3755e17b761e30be2708c9" translate="yes" xml:space="preserve">
          <source>a &lt;a href=&quot;https://docs.python.org/3/library/stdtypes.html#dict&quot;&gt;&lt;code&gt;dict&lt;/code&gt;&lt;/a&gt; of bound keyword arguments.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d890c442576542c3c07776b4e297c04bbc551d3e" translate="yes" xml:space="preserve">
          <source>a &lt;a href=&quot;https://docs.python.org/3/library/stdtypes.html#list&quot;&gt;&lt;code&gt;list&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fe6c2262a30f1e3a0c2afbc426f0f936b4c2ff26" translate="yes" xml:space="preserve">
          <source>a &lt;a href=&quot;https://docs.python.org/3/library/stdtypes.html#list&quot;&gt;&lt;code&gt;list&lt;/code&gt;&lt;/a&gt; of all the values for the key.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9478f4bb39b63989fe53b49e67fee208d99b91ef" translate="yes" xml:space="preserve">
          <source>a &lt;code&gt;(etag, weak)&lt;/code&gt; tuple.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6c97c3719720c40501866db810bd41b8601fd198" translate="yes" xml:space="preserve">
          <source>a &lt;code&gt;Response&lt;/code&gt; object or a subclass thereof.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="35ab680d92501dfdf2fd822f777665b584fb3776" translate="yes" xml:space="preserve">
          <source>a &lt;code&gt;cls&lt;/code&gt; object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="afb6943be24a5cd86fbf378fc3ab5afa80b2c8c3" translate="yes" xml:space="preserve">
          <source>a &lt;code&gt;dict&lt;/code&gt; or &lt;code&gt;MultiDict&lt;/code&gt;: The keys have to be strings. The values have to be either any of the following objects, or a list of any of the following objects:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f63b01c5f1d1cd9fafee2964cd1a6f2cda1beab9" translate="yes" xml:space="preserve">
          <source>a &lt;code&gt;file&lt;/code&gt;-like object: These are converted into &lt;code&gt;FileStorage&lt;/code&gt; objects automatically.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f283e98f00eb8910dd84871271e7ff9600ecc8b2" translate="yes" xml:space="preserve">
          <source>a &lt;code&gt;str&lt;/code&gt; or &lt;code&gt;bytes&lt;/code&gt; object: The object is converted into an &lt;a href=&quot;#werkzeug.test.EnvironBuilder.input_stream&quot;&gt;&lt;code&gt;input_stream&lt;/code&gt;&lt;/a&gt;, the &lt;a href=&quot;#werkzeug.test.EnvironBuilder.content_length&quot;&gt;&lt;code&gt;content_length&lt;/code&gt;&lt;/a&gt; is set and you have to provide a &lt;a href=&quot;#werkzeug.test.EnvironBuilder.content_type&quot;&gt;&lt;code&gt;content_type&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="950d301121e620919dad1f70c697ecf256c46f46" translate="yes" xml:space="preserve">
          <source>a &lt;code&gt;str&lt;/code&gt;: The string is set as form data for the associated key.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="83edabfce98acc0163c8c543fbddae2bcb3e05b6" translate="yes" xml:space="preserve">
          <source>a &lt;code&gt;tuple&lt;/code&gt;: The &lt;code&gt;add_file()&lt;/code&gt; method is called with the key and the unpacked &lt;code&gt;tuple&lt;/code&gt; items as positional arguments.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8d993b5de08e5d563a2e40c360439e0b026f609a" translate="yes" xml:space="preserve">
          <source>a file-like object: The object content is loaded in memory and then handled like a regular &lt;code&gt;str&lt;/code&gt; or a &lt;code&gt;bytes&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="65bbce0e91382b668dfe4edd6c02e9b88f6a133d" translate="yes" xml:space="preserve">
          <source>a new WSGI callable</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="729888c2f8950022a077825ecb47846d55c992eb" translate="yes" xml:space="preserve">
          <source>a response iterable.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="842be975addd986ac7568caa9155b20ac104dda9" translate="yes" xml:space="preserve">
          <source>a response object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e70ed326faefe439e6ddb5c873b09b6156313d83" translate="yes" xml:space="preserve">
          <source>accessor for &amp;lsquo;immutable&amp;rsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2fe6dfad17f993de519d4ff05835752b0bae7f7d" translate="yes" xml:space="preserve">
          <source>accessor for &amp;lsquo;max-age&amp;rsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1b2bfc60ac3ab805d780dfbfad0919d4425b8aed" translate="yes" xml:space="preserve">
          <source>accessor for &amp;lsquo;max-stale&amp;rsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2d70530faede35827843983da0d5a346366fab6d" translate="yes" xml:space="preserve">
          <source>accessor for &amp;lsquo;min-fresh&amp;rsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b87b490767b6fd92355d8b47cadb988d0977e867" translate="yes" xml:space="preserve">
          <source>accessor for &amp;lsquo;must-revalidate&amp;rsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5daf101d2a57eafe44156299819d429d4c6557f9" translate="yes" xml:space="preserve">
          <source>accessor for &amp;lsquo;no-cache&amp;rsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a8ce0c349b78684498792c56e33a2f76e19c3fa6" translate="yes" xml:space="preserve">
          <source>accessor for &amp;lsquo;no-store&amp;rsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f258573a97f20e6059bfc9507eb252d543c008f7" translate="yes" xml:space="preserve">
          <source>accessor for &amp;lsquo;no-transform&amp;rsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="06b59b3a6785da31716d193ea8533b7bffd15dbc" translate="yes" xml:space="preserve">
          <source>accessor for &amp;lsquo;only-if-cached&amp;rsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8d42aca31693b644afcc7628e8ad4871e62c8925" translate="yes" xml:space="preserve">
          <source>accessor for &amp;lsquo;private&amp;rsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f6e1e9fda195686eb592e60c401ad6736ec009a6" translate="yes" xml:space="preserve">
          <source>accessor for &amp;lsquo;proxy-revalidate&amp;rsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="68fec5c69ec7003ccc97b2f9eaf562482ff56cf2" translate="yes" xml:space="preserve">
          <source>accessor for &amp;lsquo;public&amp;rsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6e4906cf9bf21fe78bca89b1a5fdd9e27d4811cf" translate="yes" xml:space="preserve">
          <source>accessor for &amp;lsquo;s-maxage&amp;rsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3b7bae815c6fe4e1a3415b8bcbe13f79d87a26a4" translate="yes" xml:space="preserve">
          <source>alias of &lt;a href=&quot;../datastructures/index#werkzeug.datastructures.ImmutableList&quot;&gt;&lt;code&gt;werkzeug.datastructures.ImmutableList&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5ed8f20c5f47ae124c7169e8d24027febc32e351" translate="yes" xml:space="preserve">
          <source>alias of &lt;a href=&quot;../datastructures/index#werkzeug.datastructures.ImmutableMultiDict&quot;&gt;&lt;code&gt;werkzeug.datastructures.ImmutableMultiDict&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="918a7c729d714b746c7bec8faa924207a46d6479" translate="yes" xml:space="preserve">
          <source>alias of &lt;a href=&quot;../http/index#werkzeug.formparser.FormDataParser&quot;&gt;&lt;code&gt;werkzeug.formparser.FormDataParser&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="18d2ca387cc895eb425b8a523d399be651726968" translate="yes" xml:space="preserve">
          <source>alias of &lt;code&gt;_JSONModule&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b5f1d8ee3f0475d06ab74c37f1a9cba92da9c662" translate="yes" xml:space="preserve">
          <source>alias of &lt;code&gt;werkzeug.wrappers.base_request.BaseRequest&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="90ef201f76f86227783a08e4a24fc12dc3610848" translate="yes" xml:space="preserve">
          <source>an &lt;a href=&quot;../datastructures/index#werkzeug.datastructures.ETags&quot;&gt;&lt;code&gt;ETags&lt;/code&gt;&lt;/a&gt; object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="635b054ee6276d9abe7788fbb4dcc8893125d643" translate="yes" xml:space="preserve">
          <source>an &lt;code&gt;(app_iter, status, headers)&lt;/code&gt; tuple.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cdc64ade4e8aca67e962ab84cf92ea07d944a14d" translate="yes" xml:space="preserve">
          <source>an application iterator</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e58ee693a912b50046543e1f656a2f8a11ced258" translate="yes" xml:space="preserve">
          <source>an instance of &lt;code&gt;cls&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="07e75712b553eedb846b6029635a61ff45bfa9bf" translate="yes" xml:space="preserve">
          <source>an instance of &lt;code&gt;cls&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0cba6216c408558e95174a899399e7bbc9d02d74" translate="yes" xml:space="preserve">
          <source>an item.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="09984bdaa28ebf8fbfc48647e7e78af46a28e511" translate="yes" xml:space="preserve">
          <source>an iterator</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0f39a7887e076551ace4670d7fe95e8998e83f6c" translate="yes" xml:space="preserve">
          <source>boolean that is &lt;code&gt;True&lt;/code&gt; if the application is served by a WSGI server that spawns multiple processes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2e6a184add8b1bccdad2e1862952a5a2b8016d2d" translate="yes" xml:space="preserve">
          <source>boolean that is &lt;code&gt;True&lt;/code&gt; if the application is served by a multithreaded WSGI server.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f2b73ab96a72da4e8962bbd797c1f18d2b381964" translate="yes" xml:space="preserve">
          <source>boolean that is &lt;code&gt;True&lt;/code&gt; if the application will be executed only once in a process lifetime. This is the case for CGI for example, but it&amp;rsquo;s not guaranteed that the execution only happens one time.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="53685200d214a0f34f84d6361713053f4e2687fd" translate="yes" xml:space="preserve">
          <source>calls to &lt;a href=&quot;#werkzeug.wsgi.LimitedStream.readline&quot;&gt;&lt;code&gt;readline()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#werkzeug.wsgi.LimitedStream.readlines&quot;&gt;&lt;code&gt;readlines()&lt;/code&gt;&lt;/a&gt; are not WSGI compliant because it passes a size argument to the readline methods. Unfortunately the WSGI PEP is not safely implementable without a size argument to &lt;a href=&quot;#werkzeug.wsgi.LimitedStream.readline&quot;&gt;&lt;code&gt;readline()&lt;/code&gt;&lt;/a&gt; because there is no EOF marker in the stream. As a result of that the use of &lt;a href=&quot;#werkzeug.wsgi.LimitedStream.readline&quot;&gt;&lt;code&gt;readline()&lt;/code&gt;&lt;/a&gt; is discouraged.</source>
          <target state="new"/>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
