<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ru" datatype="htmlbody" original="perl">
    <body>
      <group id="perl">
        <trans-unit id="46d2192e63cd05faab929cd650436f61dca14ce8" translate="yes" xml:space="preserve">
          <source>PeerHost =&amp;gt; STRING</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8d075a3ed08988dae4c16a7043806162ccac9817" translate="yes" xml:space="preserve">
          <source>PeerHost AND LocalHost PARSING</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fa91cf15a151119bf0702338d553a73e0af264a2" translate="yes" xml:space="preserve">
          <source>PeerPort =&amp;gt; STRING</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a759d273b63a64efde6b41235362623a3e0e2136" translate="yes" xml:space="preserve">
          <source>PeerService =&amp;gt; STRING</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dff756efe8f5dd0813ab9c374e52c792233eda90" translate="yes" xml:space="preserve">
          <source>Pennsylvania</source>
          <target state="translated">Pennsylvania</target>
        </trans-unit>
        <trans-unit id="3d7bbafed59a27c1513d780d5e784c2a12ef1dc5" translate="yes" xml:space="preserve">
          <source>People frequently expect it to work like this. So it does.</source>
          <target state="translated">Люди часто ожидают,что это сработает вот так.Так и есть.</target>
        </trans-unit>
        <trans-unit id="bc1de57d7a939bd26a67e8c9562637156f53e824" translate="yes" xml:space="preserve">
          <source>People have a hard time remembering that some functions default to $_, or @ARGV, or whatever, but that others which you might expect to do not.</source>
          <target state="translated">Людям трудно вспомнить,что одни функции по умолчанию имеют значение $_,или @ARGV,или что-то в этом роде,а другие нет.</target>
        </trans-unit>
        <trans-unit id="af3c23d7810d9feb567b332e5161af8d9bd9f452" translate="yes" xml:space="preserve">
          <source>People like to see their strings nicely sorted--or as Unicode parlance goes, collated. But again, what do you mean by collate?</source>
          <target state="translated">Людям нравится,когда их струны хорошо отсортированы...или,как на языке Юникода,сопоставлены.Но опять же,что ты имеешь в виду под &quot;сопоставить&quot;?</target>
        </trans-unit>
        <trans-unit id="895626deb1f05ce05a822ae049fef844846a6710" translate="yes" xml:space="preserve">
          <source>People sometimes point out that &lt;a href=&quot;../db_file&quot;&gt;DB_File&lt;/a&gt; will do something similar, and ask why &lt;code&gt;Tie::File&lt;/code&gt; module is necessary.</source>
          <target state="translated">Иногда люди указывают, что &lt;a href=&quot;../db_file&quot;&gt;DB_File&lt;/a&gt; будет делать нечто подобное, и спрашивают, зачем нужен модуль &lt;code&gt;Tie::File&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="e4fa6539419b00af03d768603a4618e5be18322c" translate="yes" xml:space="preserve">
          <source>People sometimes point out that &lt;a href=&quot;db_file&quot;&gt;DB_File&lt;/a&gt; will do something similar, and ask why &lt;code&gt;Tie::File&lt;/code&gt; module is necessary.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="99dcc00aba3ea5fec8f203b99f7aa0dc52bd345a" translate="yes" xml:space="preserve">
          <source>Per default all untar operations are done with the perl module Archive::Tar; by setting this variable to true the external tar command is used if available; on Unix this is usually preferred because they have a reliable and fast gnutar implementation.</source>
          <target state="translated">По умолчанию все операции с tar выполняются с помощью модуля perl Archive::Tar;при установке этой переменной в true используется внешняя команда tar,если она доступна;в Unix это обычно предпочтительнее,так как они имеют надежную и быструю реализацию gnutar.</target>
        </trans-unit>
        <trans-unit id="c4f661f9e3bbabdfe8977d8e07c04f728f007afa" translate="yes" xml:space="preserve">
          <source>Per-Interpreter Variables</source>
          <target state="translated">Переменные для переводчика</target>
        </trans-unit>
        <trans-unit id="2559c9f59f217f32b3e891e1ab6877c4f55356cc" translate="yes" xml:space="preserve">
          <source>Per-instance Data</source>
          <target state="translated">Данные о местоположении</target>
        </trans-unit>
        <trans-unit id="637c16442a8f555cae097e71247c5fc7ee45adfd" translate="yes" xml:space="preserve">
          <source>Per-instance flag bits</source>
          <target state="translated">Биты флага прецедента</target>
        </trans-unit>
        <trans-unit id="24a428fdaa34dbb9d25a2ae2897474ba4a8b3383" translate="yes" xml:space="preserve">
          <source>Perceptive Perl hackers may have noticed that a &lt;code&gt;for&lt;/code&gt; loop has a return value, and that this value can be captured by wrapping the loop in a &lt;code&gt;&lt;a href=&quot;functions/do&quot;&gt;do&lt;/a&gt;&lt;/code&gt; block. The reward for this discovery is this cautionary advice: The return value of a &lt;code&gt;for&lt;/code&gt; loop is unspecified and may change without notice. Do not rely on it.</source>
          <target state="translated">Проницательные хакеры Perl могли заметить, что цикл &lt;code&gt;for&lt;/code&gt; имеет возвращаемое значение, и что это значение можно получить, заключив цикл в блок &lt;code&gt;&lt;a href=&quot;functions/do&quot;&gt;do&lt;/a&gt;&lt;/code&gt; . Наградой за это открытие является предостерегающий совет: возвращаемое значение цикла &lt;code&gt;for&lt;/code&gt; не указано и может измениться без уведомления. Не надейтесь на это.</target>
        </trans-unit>
        <trans-unit id="6e85b222ac46dc12730aecc629694a020c6eeb78" translate="yes" xml:space="preserve">
          <source>Perceptive Perl hackers may have noticed that a &lt;code&gt;for&lt;/code&gt; loop has a return value, and that this value can be captured by wrapping the loop in a &lt;code&gt;do&lt;/code&gt; block. The reward for this discovery is this cautionary advice: The return value of a &lt;code&gt;for&lt;/code&gt; loop is unspecified and may change without notice. Do not rely on it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="07e9965ae0a1c370ab69fb29d7dbc17ad92d7783" translate="yes" xml:space="preserve">
          <source>Perform a stream ping. If the tcp connection isn't already open, it opens it. It then sends some data and waits for a reply. It leaves the stream open on exit.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4d0ad0b2d6ac0afcdcc0122fc81922056578805a" translate="yes" xml:space="preserve">
          <source>Perform a udp echo ping. Construct a message of at least the one-byte sequence number and any additional data bytes. Send the message out and wait for a message to come back. If we get a message, make sure all of its parts match. If they do, we are done. Otherwise go back and wait for the message until we run out of time. Return the result of our efforts.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="79aed27967237d1d2c231b08b0c043db2872fef5" translate="yes" xml:space="preserve">
          <source>Perform an in-place trimming of leading and trailing whitespace from the first argument provided to the function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ec8bd6ff6508298e4713b89624c59cb269e84e9c" translate="yes" xml:space="preserve">
          <source>Perform assignment to the &lt;code&gt;func_args&lt;/code&gt; attribute.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2c46ae69f753cf6246720edd2c4a9cebd27597f5" translate="yes" xml:space="preserve">
          <source>Perform cache scanning ('atstart', 'atexit' or 'never')?</source>
          <target state="translated">Выполнять сканирование кэша ('atstart','atexit' или 'never')?</target>
        </trans-unit>
        <trans-unit id="c63fc543a09237e1df38dff5523874d7739bd5c9" translate="yes" xml:space="preserve">
          <source>Perform sorting on one type of platform only.</source>
          <target state="translated">Выполняйте сортировку только на одном типе платформы.</target>
        </trans-unit>
        <trans-unit id="c27007b93a4bc1c8de4cbbfbb0c5571ba69e57a4" translate="yes" xml:space="preserve">
          <source>Perform the equivalent of &lt;code&gt;&lt;a href=&quot;../functions/splice&quot;&gt;splice&lt;/a&gt;&lt;/code&gt; on the array.</source>
          <target state="translated">Выполните эквивалент &lt;code&gt;&lt;a href=&quot;../functions/splice&quot;&gt;splice&lt;/a&gt;&lt;/code&gt; на массиве.</target>
        </trans-unit>
        <trans-unit id="f4070651c463f5c50952530e94f62331111d1bf1" translate="yes" xml:space="preserve">
          <source>Perform the equivalent of &lt;code&gt;&lt;a href=&quot;functions/splice&quot;&gt;splice&lt;/a&gt;&lt;/code&gt; on the array.</source>
          <target state="translated">Выполните эквивалент &lt;code&gt;&lt;a href=&quot;functions/splice&quot;&gt;splice&lt;/a&gt;&lt;/code&gt; на массиве.</target>
        </trans-unit>
        <trans-unit id="ed35d3518038453f5800bc06513fa8bdaa2767df" translate="yes" xml:space="preserve">
          <source>Perform the equivalent of &lt;code&gt;splice&lt;/code&gt; on the array.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="64184a2388a7346fec59e49f0f94873466b15963" translate="yes" xml:space="preserve">
          <source>Perform whatever actions the command line args specified. The &lt;code&gt;prove&lt;/code&gt; command line tool consists of the following code:</source>
          <target state="translated">Выполните все действия, указанные в аргументах командной строки. Инструмент командной строки &lt;code&gt;prove&lt;/code&gt; состоит из следующего кода:</target>
        </trans-unit>
        <trans-unit id="0cb883fc85b1fd84aaebb7319c682c586a065641" translate="yes" xml:space="preserve">
          <source>Performance considerations</source>
          <target state="translated">Показатели эффективности</target>
        </trans-unit>
        <trans-unit id="8b696788f6758fff45816e3f44d267110dbc7d28" translate="yes" xml:space="preserve">
          <source>Performance issues</source>
          <target state="translated">Вопросы производительности</target>
        </trans-unit>
        <trans-unit id="75fbc5c30da07f1356bcf407f1026c09ad8550fb" translate="yes" xml:space="preserve">
          <source>Performance testing</source>
          <target state="translated">Тестирование производительности</target>
        </trans-unit>
        <trans-unit id="d9a7e43f70de19f613749fe02de0e154833f44cd" translate="yes" xml:space="preserve">
          <source>Performing Perl pattern matches and substitutions from your C program</source>
          <target state="translated">Выполнение шаблонных совпадений и замен по Perl из вашей программы на языке C</target>
        </trans-unit>
        <trans-unit id="3561dc2da1552ce45c86dea5a0a9894997990d1e" translate="yes" xml:space="preserve">
          <source>Performs a TCP echo. It writes the given string to the socket and then reads it back. It returns 1 on success, 0 on failure.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a965e83c4b09bcea3d12be93ff1b3ea645513eea" translate="yes" xml:space="preserve">
          <source>Performs a callback to the Perl sub specified by the SV.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b82005b8824a2b9aeaec337d4f6692160e086478" translate="yes" xml:space="preserve">
          <source>Performs a callback to the Perl sub whose name is in the SV. See &lt;a href=&quot;perlcall&quot;&gt;perlcall&lt;/a&gt;.</source>
          <target state="translated">Выполняет обратный вызов подпрограмме Perl, имя которой находится в SV. См. &lt;a href=&quot;perlcall&quot;&gt;Perlcall&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="c9a6e4b7d6eb6de9cfa7c1c05de09156f5313aec" translate="yes" xml:space="preserve">
          <source>Performs a callback to the specified Perl method. The blessed object must be on the stack. See &lt;a href=&quot;perlcall&quot;&gt;perlcall&lt;/a&gt;.</source>
          <target state="translated">Выполняет обратный вызов указанного метода Perl. Благословенный предмет должен быть в стеке. Смотрите &lt;a href=&quot;perlcall&quot;&gt;perlcall&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="7f3fb532eda4a585d8b90e5f5df9aa47f234c3a5" translate="yes" xml:space="preserve">
          <source>Performs a callback to the specified Perl sub. See &lt;a href=&quot;perlcall&quot;&gt;perlcall&lt;/a&gt;.</source>
          <target state="translated">Выполняет обратный вызов указанного Perl-подпрограммы. Смотрите &lt;a href=&quot;perlcall&quot;&gt;perlcall&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="d6c45982ba770a19e61a195555dad69e694989fd" translate="yes" xml:space="preserve">
          <source>Performs a callback to the specified named and package-scoped Perl subroutine with &lt;code&gt;argv&lt;/code&gt; (a &lt;code&gt;NULL&lt;/code&gt;-terminated array of strings) as arguments. See &lt;a href=&quot;perlcall&quot;&gt;perlcall&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="49600604ba37ec7bb2caf7fae02578e1f3fb4be1" translate="yes" xml:space="preserve">
          <source>Performs a callback to the specified named and package-scoped Perl subroutine with &lt;code&gt;argv&lt;/code&gt; (a NULL-terminated array of strings) as arguments. See &lt;a href=&quot;perlcall&quot;&gt;perlcall&lt;/a&gt;.</source>
          <target state="translated">Выполняет обратный вызов указанной подпрограммы Perl с именем и областью действия пакета с &lt;code&gt;argv&lt;/code&gt; (массив строк с завершающим NULL). См. &lt;a href=&quot;perlcall&quot;&gt;Perlcall&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="a93173811bef953ad5c7fb92a164bcccd11d68ac" translate="yes" xml:space="preserve">
          <source>Performs a logical format of [part of] the disk. &lt;code&gt;$opOutBuf&lt;/code&gt; should be &lt;code&gt;[]&lt;/code&gt;. &lt;code&gt;$pInBuf&lt;/code&gt; should contain a &lt;code&gt;VERIFY_INFORMATION&lt;/code&gt; data structure:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8a85f5d1bfcb6901403b71c0162984e3d90d98b0" translate="yes" xml:space="preserve">
          <source>Performs a mapping at several places inside &lt;code&gt;PARAGRAPH&lt;/code&gt; loop.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ada148fba94bb82b7e37d39db36e65570e59f9e9" translate="yes" xml:space="preserve">
          <source>Performs an &lt;code&gt;hv_iternext&lt;/code&gt; , &lt;code&gt;hv_iterkey&lt;/code&gt; , and &lt;code&gt;hv_iterval&lt;/code&gt; in one operation.</source>
          <target state="translated">Выполняет &lt;code&gt;hv_iternext&lt;/code&gt; , &lt;code&gt;hv_iterkey&lt;/code&gt; и &lt;code&gt;hv_iterval&lt;/code&gt; за одну операцию.</target>
        </trans-unit>
        <trans-unit id="6cba5f16ad57dc74bb0f4aa303ceff45a83b2485" translate="yes" xml:space="preserve">
          <source>Performs an &lt;code&gt;hv_iternext&lt;/code&gt;, &lt;code&gt;hv_iterkey&lt;/code&gt;, and &lt;code&gt;hv_iterval&lt;/code&gt; in one operation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="08fa9ec15a0ad6b718fdf2229eda1c22f6e3ebcd" translate="yes" xml:space="preserve">
          <source>Performs some preprocessing to the string to ensure that it has the correct characteristics of a version. Flags the object if it contains an underscore (which denotes this is an alpha version). The boolean qv denotes that the version should be interpreted as if it had multiple decimals, even if it doesn't.</source>
          <target state="translated">Выполняет некоторую препроцессинговую обработку строки,чтобы удостовериться,что она имеет правильные характеристики версии.Помечает объект,если он содержит символ подчеркивания (что означает,что это альфа-версия).Булева qv обозначает,что версия должна интерпретироваться так,как если бы она имела несколько десятичных знаков,даже если это не так.</target>
        </trans-unit>
        <trans-unit id="8509e18df89af9b03f62a1a48a7b2cabc5f8fb27" translate="yes" xml:space="preserve">
          <source>Performs the default fixup of the arguments part of an &lt;code&gt;entersub&lt;/code&gt; op tree. This consists of applying list context to each of the argument ops. This is the standard treatment used on a call marked with &lt;code&gt;&amp;amp;&lt;/code&gt; , or a method call, or a call through a subroutine reference, or any other call where the callee can't be identified at compile time, or a call where the callee has no prototype.</source>
          <target state="translated">Выполняет исправление по умолчанию части аргументов дерева &lt;code&gt;entersub&lt;/code&gt; . Это состоит в применении контекста списка к каждой операции аргумента. Это стандартная обработка, используемая для вызова, отмеченного символом &lt;code&gt;&amp;amp;&lt;/code&gt; , или вызова метода, или вызова через ссылку на подпрограмму, или любого другого вызова, при котором вызываемый объект не может быть идентифицирован во время компиляции, или вызова, при котором вызываемый объект не имеет опытный образец.</target>
        </trans-unit>
        <trans-unit id="dcd4f6dd1d93f7b286764b64bc6640cc06f23fc9" translate="yes" xml:space="preserve">
          <source>Performs the default fixup of the arguments part of an &lt;code&gt;entersub&lt;/code&gt; op tree. This consists of applying list context to each of the argument ops. This is the standard treatment used on a call marked with &lt;code&gt;&amp;amp;&lt;/code&gt;, or a method call, or a call through a subroutine reference, or any other call where the callee can't be identified at compile time, or a call where the callee has no prototype.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f72b3c1a72c8131e9de33c78c73bf05b880137dc" translate="yes" xml:space="preserve">
          <source>Performs the fixup of the arguments part of an &lt;code&gt;entersub&lt;/code&gt; op tree based on a subroutine prototype. This makes various modifications to the argument ops, from applying context up to inserting &lt;code&gt;refgen&lt;/code&gt; ops, and checking the number and syntactic types of arguments, as directed by the prototype. This is the standard treatment used on a subroutine call, not marked with &lt;code&gt;&amp;amp;&lt;/code&gt; , where the callee can be identified at compile time and has a prototype.</source>
          <target state="translated">Выполняет исправление части аргументов дерева &lt;code&gt;entersub&lt;/code&gt; в подпрограмму на основе прототипа подпрограммы. Это вносит различные изменения в аргументы ops, от применения контекста до вставки &lt;code&gt;refgen&lt;/code&gt; ops и проверки количества и синтаксических типов аргументов, как указано в прототипе. Это стандартная обработка, используемая при вызове подпрограммы, не отмеченная знаком &lt;code&gt;&amp;amp;&lt;/code&gt; , где вызываемый объект может быть идентифицирован во время компиляции и имеет прототип.</target>
        </trans-unit>
        <trans-unit id="4f92bca3cb1656fef11c8172e4312cdfd95b4758" translate="yes" xml:space="preserve">
          <source>Performs the fixup of the arguments part of an &lt;code&gt;entersub&lt;/code&gt; op tree based on a subroutine prototype. This makes various modifications to the argument ops, from applying context up to inserting &lt;code&gt;refgen&lt;/code&gt; ops, and checking the number and syntactic types of arguments, as directed by the prototype. This is the standard treatment used on a subroutine call, not marked with &lt;code&gt;&amp;amp;&lt;/code&gt;, where the callee can be identified at compile time and has a prototype.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6157a20bbb392600596ac64ab923dad03e358522" translate="yes" xml:space="preserve">
          <source>Performs the fixup of the arguments part of an &lt;code&gt;entersub&lt;/code&gt; op tree either based on a subroutine prototype or using default list-context processing. This is the standard treatment used on a subroutine call, not marked with &lt;code&gt;&amp;amp;&lt;/code&gt; , where the callee can be identified at compile time.</source>
          <target state="translated">Выполняет исправление части аргументов дерева &lt;code&gt;entersub&lt;/code&gt; в подпрограмму либо на основе прототипа подпрограммы, либо с использованием обработки контекста списка по умолчанию. Это стандартная обработка, используемая при вызове подпрограммы, не отмеченная знаком &lt;code&gt;&amp;amp;&lt;/code&gt; , где вызываемый может быть идентифицирован во время компиляции.</target>
        </trans-unit>
        <trans-unit id="ffdb85a69182d619eb9ec1084216af019391ff8b" translate="yes" xml:space="preserve">
          <source>Performs the fixup of the arguments part of an &lt;code&gt;entersub&lt;/code&gt; op tree either based on a subroutine prototype or using default list-context processing. This is the standard treatment used on a subroutine call, not marked with &lt;code&gt;&amp;amp;&lt;/code&gt;, where the callee can be identified at compile time.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ad00a766edb2027fe626d56fc86fda79a018bfe9" translate="yes" xml:space="preserve">
          <source>Perhaps I don't need a complete test harness. If I already have a TAP test log that I need to parse all I need is TAP::Parser and the various classes it depends upon. Here's the code I need to run a test and parse its TAP output</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="710b350b3985543df26a6fea7ac3e9557988bb88" translate="yes" xml:space="preserve">
          <source>Perhaps the most common mistake programmers make is to attempt to optimize their code before a program actually does anything useful - this is a bad idea. There's no point in having an extremely fast program that doesn't work. The first job is to get a program to</source>
          <target state="translated">Возможно,самая распространенная ошибка,которую допускают программисты-это попытка оптимизировать свой код до того,как программа действительно сделает что-то полезное-это плохая идея.Нет смысла иметь чрезвычайно быструю программу,которая не работает.Первая задача-заставить программу</target>
        </trans-unit>
        <trans-unit id="f111d810e7ca920bda8f128569fc002610c45314" translate="yes" xml:space="preserve">
          <source>Perl</source>
          <target state="translated">Perl</target>
        </trans-unit>
        <trans-unit id="6e211e278fc97780451705c4eb99e429ff84722f" translate="yes" xml:space="preserve">
          <source>Perl %s required (did you mean %s?)--this is only %s, stopped</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="57d705397ece0db459660f487bdc69be0c678860" translate="yes" xml:space="preserve">
          <source>Perl %s required--this is only %s, stopped</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c1f70e71f78a6960e6bfc54f17ed9725d674c2b0" translate="yes" xml:space="preserve">
          <source>Perl 5 Documentation</source>
          <target state="translated">Perl 5 Документация</target>
        </trans-unit>
        <trans-unit id="8f5e9c26fdc65b3f883a3cb850a843ffd41fb0f9" translate="yes" xml:space="preserve">
          <source>Perl 5 Porters</source>
          <target state="translated">Перл 5 Портеры</target>
        </trans-unit>
        <trans-unit id="142bd9030035d40d81779a4f9a904554905faa01" translate="yes" xml:space="preserve">
          <source>Perl 5 has extension mechanisms, modules and XS, specifically to avoid the need to keep changing the Perl interpreter. You can write modules that export functions, you can give those functions prototypes so they can be called like built-in functions, you can even write XS code to mess with the runtime data structures of the Perl interpreter if you want to implement really complicated things.</source>
          <target state="translated">Perl 5 имеет механизмы расширения,модули и XS,специально для того,чтобы избежать необходимости постоянно менять интерпретатор Perl.Вы можете писать модули,которые экспортируют функции,вы можете дать этим функциям прототипы,чтобы они могли вызываться как встроенные функции,вы даже можете писать XS код,чтобы запутать структуры данных во время выполнения интерпретатора Perl,если вы хотите реализовать действительно сложные вещи.</target>
        </trans-unit>
        <trans-unit id="365a603ab08b813cf9c586a16f80eeba34a1d121" translate="yes" xml:space="preserve">
          <source>Perl 5 is developed by a community, not a corporate entity. Every change contributed to the Perl core is the result of a donation. Typically, these donations are contributions of code or time by individual members of our community. On occasion, these donations come in the form of corporate or organizational sponsorship of a particular individual or project.</source>
          <target state="translated">Perl 5 разработан сообществом,а не юридическим лицом.Каждое изменение,внесенное в ядро Perl,является результатом пожертвования.Обычно эти пожертвования являются вкладом кода или времени отдельных членов нашего сообщества.Иногда эти пожертвования поступают в виде корпоративного или организационного спонсорства конкретного человека или проекта.</target>
        </trans-unit>
        <trans-unit id="c7abcac9fa9f634d755f347614a5c92a44d2c3e5" translate="yes" xml:space="preserve">
          <source>Perl 5 was successfully compiled and tested on:</source>
          <target state="translated">Perl 5 был успешно составлен и протестирован:</target>
        </trans-unit>
        <trans-unit id="c7ebebb63cc5cd6e093751f9acf8676fc8362950" translate="yes" xml:space="preserve">
          <source>Perl 5.10 added three specials, &lt;code&gt;${^MATCH}&lt;/code&gt; , &lt;code&gt;${^PREMATCH}&lt;/code&gt; , and &lt;code&gt;${^POSTMATCH}&lt;/code&gt; to do the same job but without the global performance penalty. Perl 5.10 only sets these variables if you compile or execute the regular expression with the &lt;code&gt;/p&lt;/code&gt; modifier.</source>
          <target state="translated">Perl 5.10 добавил три специальных функции, &lt;code&gt;${^MATCH}&lt;/code&gt; , &lt;code&gt;${^PREMATCH}&lt;/code&gt; и &lt;code&gt;${^POSTMATCH}&lt;/code&gt; чтобы выполнять ту же работу, но без глобального снижения производительности. Perl 5.10 устанавливает эти переменные, только если вы компилируете или выполняете регулярное выражение с модификатором &lt;code&gt;/p&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="2859cc3896fe55bbb891ae357f5f5a8329f3cec3" translate="yes" xml:space="preserve">
          <source>Perl 5.10 added three specials, &lt;code&gt;${^MATCH}&lt;/code&gt;, &lt;code&gt;${^PREMATCH}&lt;/code&gt;, and &lt;code&gt;${^POSTMATCH}&lt;/code&gt; to do the same job but without the global performance penalty. Perl 5.10 only sets these variables if you compile or execute the regular expression with the &lt;code&gt;/p&lt;/code&gt; modifier.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ce44e09ff142e65fee17e89d97567bf27f5d29b1" translate="yes" xml:space="preserve">
          <source>Perl 5.10 also introduced named capture groups and named backreferences. To attach a name to a capturing group, you write either &lt;code&gt;(?&amp;lt;name&amp;gt;...)&lt;/code&gt; or &lt;code&gt;(?'name'...)&lt;/code&gt;. The backreference may then be written as &lt;code&gt;\g{name}&lt;/code&gt; . It is permissible to attach the same name to more than one group, but then only the leftmost one of the eponymous set can be referenced. Outside of the pattern a named capture group is accessible through the &lt;code&gt;%+&lt;/code&gt; hash.</source>
          <target state="translated">Perl 5.10 также представил именованные группы захвата и именованные обратные ссылки. Чтобы присвоить имя группе захвата, вы пишете &lt;code&gt;(?&amp;lt;name&amp;gt;...)&lt;/code&gt; или &lt;code&gt;(?'name'...)&lt;/code&gt; . Тогда обратная ссылка может быть записана как &lt;code&gt;\g{name}&lt;/code&gt; . Допускается присвоение одного и того же имени более чем одной группе, но тогда можно ссылаться только на крайнее левое имя из одноименного набора. Вне шаблона именованная группа захвата доступна через хэш &lt;code&gt;%+&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="115264f71824b47785d298c1ef35a6a89f372587" translate="yes" xml:space="preserve">
          <source>Perl 5.10 also introduced named capture groups and named backreferences. To attach a name to a capturing group, you write either &lt;code&gt;(?&amp;lt;name&amp;gt;...)&lt;/code&gt; or &lt;code&gt;(?'name'...)&lt;/code&gt;. The backreference may then be written as &lt;code&gt;\g{name}&lt;/code&gt;. It is permissible to attach the same name to more than one group, but then only the leftmost one of the eponymous set can be referenced. Outside of the pattern a named capture group is accessible through the &lt;code&gt;%+&lt;/code&gt; hash.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d78bc07daf7287cd2d82e764c55679c183debb95" translate="yes" xml:space="preserve">
          <source>Perl 5.10 introduced a number of control verbs intended to provide detailed control over the backtracking process, by directly influencing the regexp engine and by providing monitoring techniques. As all the features in this group are experimental and subject to change or removal in a future version of Perl, the interested reader is referred to &lt;a href=&quot;perlre#Special-Backtracking-Control-Verbs&quot;&gt;Special Backtracking Control Verbs in perlre&lt;/a&gt; for a detailed description.</source>
          <target state="translated">Perl 5.10 представил ряд управляющих команд, предназначенных для обеспечения детального управления процессом поиска с возвратом, путем прямого воздействия на механизм регулярных выражений и путем предоставления методов мониторинга. Поскольку все функции в этой группе являются экспериментальными и могут быть изменены или удалены в будущей версии Perl, заинтересованный читатель может обратиться к &lt;a href=&quot;perlre#Special-Backtracking-Control-Verbs&quot;&gt;специальным командам управления обратным отслеживанием в perlre&lt;/a&gt; для подробного описания.</target>
        </trans-unit>
        <trans-unit id="8d197238627a1653007f58ee33834bfb110a45a3" translate="yes" xml:space="preserve">
          <source>Perl 5.10 introduced a number of control verbs intended to provide detailed control over the backtracking process, by directly influencing the regexp engine and by providing monitoring techniques. See &lt;a href=&quot;perlre#Special-Backtracking-Control-Verbs&quot;&gt;&quot;Special Backtracking Control Verbs&quot; in perlre&lt;/a&gt; for a detailed description.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="584eeb9af5c995523642f05c75ed86704463abbd" translate="yes" xml:space="preserve">
          <source>Perl 5.10.0 has a bug when compiled with newer gcc versions. This bug causes a segfault whenever a new thread is launched. Test2 will attempt to detect this, and note that the system is not capable of forking when it is detected.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d8fc66ff20f940e5def5d5b04e16e404fe2d5094" translate="yes" xml:space="preserve">
          <source>Perl 5.12 an newer is not compatible with the IBM fileset perl.libext.</source>
          <target state="translated">Perl 5.12 несовместим с IBM-файловым набором perl.libext.</target>
        </trans-unit>
        <trans-unit id="22c1a552baa41f722e50e202fb00024c3ebfb6db" translate="yes" xml:space="preserve">
          <source>Perl 5.16</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ea53addd5f513ae8ff9630b1ab8b434a441c0d82" translate="yes" xml:space="preserve">
          <source>Perl 5.16 introduced a slightly more efficient mechanism that notes separately whether each of &lt;code&gt;$`&lt;/code&gt; , &lt;code&gt;$&amp;amp;&lt;/code&gt; , and &lt;code&gt;$'&lt;/code&gt; have been seen, and thus may only need to copy part of the string. Perl 5.20 introduced a much more efficient copy-on-write mechanism which eliminates any slowdown.</source>
          <target state="translated">Perl 5.16 представил немного более эффективный механизм, который отдельно отмечает, были ли просмотрены каждый из &lt;code&gt;$`&lt;/code&gt; , &lt;code&gt;$&amp;amp;&lt;/code&gt; и &lt;code&gt;$'&lt;/code&gt; , и, следовательно, может потребоваться скопировать только часть строки. Perl 5.20 представил гораздо более эффективный механизм копирования при записи, который устраняет любое замедление.</target>
        </trans-unit>
        <trans-unit id="a1e98cc406baf109c9d02615750864a42131b157" translate="yes" xml:space="preserve">
          <source>Perl 5.16 introduced a slightly more efficient mechanism that notes separately whether each of &lt;code&gt;$`&lt;/code&gt;, &lt;code&gt;$&amp;amp;&lt;/code&gt;, and &lt;code&gt;$'&lt;/code&gt; have been seen, and thus may only need to copy part of the string. Perl 5.20 introduced a much more efficient copy-on-write mechanism which eliminates any slowdown.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ecdd633a06acc3333c70644f93001a3679676523" translate="yes" xml:space="preserve">
          <source>Perl 5.18 introduced a new class, B::PADLIST, returned by B::CV's &lt;code&gt;PADLIST&lt;/code&gt; method.</source>
          <target state="translated">Perl 5,18 ввел новый класс, B :: PADLIST, возвращенный B :: анкетный &lt;code&gt;PADLIST&lt;/code&gt; метод.</target>
        </trans-unit>
        <trans-unit id="6b567ee259b41361a0ad9018ea4088cb70239efc" translate="yes" xml:space="preserve">
          <source>Perl 5.22 also introduces the experimental &quot;const&quot; attribute as an alternative. (Disable the &quot;experimental::const_attr&quot; warnings if you want to use it.) When applied to an anonymous subroutine, it forces the sub to be called when the &lt;code&gt;&lt;a href=&quot;functions/sub&quot;&gt;sub&lt;/a&gt;&lt;/code&gt; expression is evaluated. The return value is captured and turned into a constant subroutine:</source>
          <target state="translated">Perl 5.22 также вводит экспериментальный атрибут &amp;laquo;const&amp;raquo; в качестве альтернативы. (Отключить &amp;laquo;экспериментальный :: const_attr&amp;raquo; предупреждение , если вы хотите использовать его.) Применительно к анонимной подпрограмме, она заставляет суб называться , когда &lt;code&gt;&lt;a href=&quot;functions/sub&quot;&gt;sub&lt;/a&gt;&lt;/code&gt; выражение. Возвращаемое значение фиксируется и превращается в постоянную подпрограмму:</target>
        </trans-unit>
        <trans-unit id="31d7199897d8b920eebab904073bac73dc70089f" translate="yes" xml:space="preserve">
          <source>Perl 5.22 also introduces the experimental &quot;const&quot; attribute as an alternative. (Disable the &quot;experimental::const_attr&quot; warnings if you want to use it.) When applied to an anonymous subroutine, it forces the sub to be called when the &lt;code&gt;sub&lt;/code&gt; expression is evaluated. The return value is captured and turned into a constant subroutine:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cf5bb1f9d37da5d5c2d35eb2fe5db684768a1718" translate="yes" xml:space="preserve">
          <source>Perl 5.22 introduced the B::PADNAMELIST and B::PADNAME classes.</source>
          <target state="translated">Perl 5.22 ввел классы B::PADNAMELIST и B::PADNAME.</target>
        </trans-unit>
        <trans-unit id="8eb64573fd28436266ef8b83ae879c922aa2718a" translate="yes" xml:space="preserve">
          <source>Perl 5.24</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d4d54e9a22b86ccb042ec9ad9cdcb8b20f3feb99" translate="yes" xml:space="preserve">
          <source>Perl 5.26</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0d7d5255cbd686c042840f5ff2f1c80ef3b153ed" translate="yes" xml:space="preserve">
          <source>Perl 5.28</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="87966d58d51aae325250821ef9dbcdd86c8cbe91" translate="yes" xml:space="preserve">
          <source>Perl 5.30</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="366edd1a774f9c1660a61ddaa3d7c12fc7af5703" translate="yes" xml:space="preserve">
          <source>Perl 5.32</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="16cebccb7e37f3bcda23a91f5a5b4aa3276930af" translate="yes" xml:space="preserve">
          <source>Perl 5.32.0 Documentation</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b2d0ccd58dc8c574da7bcb06529ab63a9227edf7" translate="yes" xml:space="preserve">
          <source>Perl 5.34</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2c423e3fdc417abd5c0a870160561ad280c5b05c" translate="yes" xml:space="preserve">
          <source>Perl 5.6 added support for Unicode characters with code points &amp;gt; 255, and Perl 5.8 has full support for Unicode characters in hash keys. Perl internally encodes strings with these characters using utf8, and Storable serializes them as utf8. By default, if an older version of Perl encounters a utf8 value it cannot represent, it will &lt;code&gt;croak()&lt;/code&gt; . To change this behaviour so that Storable deserializes utf8 encoded values as the string of bytes (effectively dropping the</source>
          <target state="translated">Perl 5.6 добавил поддержку символов Unicode с кодовыми точками&amp;gt; 255, а Perl 5.8 полностью поддерживает символы Unicode в хэш-ключах. Perl внутренне кодирует строки с этими символами с помощью utf8, а Storable сериализует их как utf8. По умолчанию, если более старая версия Perl встречает значение utf8, которое она не может представить, она будет &lt;code&gt;croak()&lt;/code&gt; . Чтобы изменить это поведение таким образом, чтобы Storable десериализовал значения в кодировке utf8 как строку байтов (эффективно удаляя</target>
        </trans-unit>
        <trans-unit id="cde995577e5439f98ee44f0a1873e0f95b95226b" translate="yes" xml:space="preserve">
          <source>Perl 5.6 added support for Unicode characters with code points &amp;gt; 255, and Perl 5.8 has full support for Unicode characters in hash keys. Perl internally encodes strings with these characters using utf8, and Storable serializes them as utf8. By default, if an older version of Perl encounters a utf8 value it cannot represent, it will &lt;code&gt;croak()&lt;/code&gt;. To change this behaviour so that Storable deserializes utf8 encoded values as the string of bytes (effectively dropping the</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4d666cc8f0c2aafb781a5c3ee7854aa462c22563" translate="yes" xml:space="preserve">
          <source>Perl 5.6 and earlier used a quicksort algorithm to implement sort. That algorithm was not stable, so</source>
          <target state="translated">Для реализации сортировки на Perl 5.6 и более ранних версиях использовался алгоритм quicksort.Этот алгоритм не был стабильным,поэтому</target>
        </trans-unit>
        <trans-unit id="cc23cb198586dd32a543690c051c8df0366d1085" translate="yes" xml:space="preserve">
          <source>Perl 5.6 lets you write binary numbers directly with the &lt;code&gt;0b&lt;/code&gt; notation:</source>
          <target state="translated">Perl 5.6 позволяет записывать двоичные числа напрямую в нотации &lt;code&gt;0b&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="45926b613d53010c55908af141dded6cf0223b03" translate="yes" xml:space="preserve">
          <source>Perl 5.6.0 introduced Unicode support. It's important for porters and XS writers to understand this support and make sure that the code they write does not corrupt Unicode data.</source>
          <target state="translated">На Perl 5.6.0 введена поддержка Unicode.Для портеров и XS-писателей важно понять эту поддержку и убедиться,что код,который они пишут,не повреждает данные Юникода.</target>
        </trans-unit>
        <trans-unit id="d766774f1389bd4f4ba4c170949b6d3cfbd45c53" translate="yes" xml:space="preserve">
          <source>Perl 5.6.x introduced the ability to optional configure the perl interpreter to use C's &lt;code&gt;long long&lt;/code&gt; type to allow scalars to store 64 bit integers on 32 bit systems. However, due to the way the Perl configuration system generated the C configuration files on non-Windows platforms, and the way Storable generates its header, nothing in the Storable file header reflected whether the perl writing was using 32 or 64 bit integers, despite the fact that Storable was storing some data differently in the file. Hence Storable running on perl with 64 bit integers will read the header from a file written by a 32 bit perl, not realise that the data is actually in a subtly incompatible format, and then go horribly wrong (possibly crashing) if it encountered a stored integer. This is a design failure.</source>
          <target state="translated">Perl 5.6.x представил возможность необязательной настройки интерпретатора perl для использования &lt;code&gt;long long&lt;/code&gt; типа C, чтобы скаляры могли хранить 64-битные целые числа в 32-битных системах. Однако из-за того, как система конфигурации Perl генерировала файлы конфигурации C на платформах, отличных от Windows, и способ, которым Storable генерирует свой заголовок, ничто в заголовке файла Storable не отражало, использовалось ли при записи Perl 32 или 64-битные целые числа, несмотря на Дело в том, что Storable по-разному хранил некоторые данные в файле. Следовательно, Storable, работающий на Perl с 64-битными целыми числами, будет читать заголовок из файла, записанного 32-битным Perl, не осознавая, что данные на самом деле находятся в слегка несовместимом формате, а затем будет ужасно ошибаться (возможно, сбой), если он встретит сохраненный целое число. Это неудачный проект.</target>
        </trans-unit>
        <trans-unit id="85ca30a6ededa148e4bfea0d2618456fe4f02a72" translate="yes" xml:space="preserve">
          <source>Perl 5.8 adds support for restricted hashes, which have keys restricted to a given set, and can have values locked to be read only. By default, when Storable encounters a restricted hash on a perl that doesn't support them, it will deserialize it as a normal hash, silently discarding any placeholder keys and leaving the keys and all values unlocked. To make Storable &lt;code&gt;croak()&lt;/code&gt; instead, set &lt;code&gt;$Storable::downgrade_restricted&lt;/code&gt; to a &lt;code&gt;FALSE&lt;/code&gt; value. To restore the default set it back to some &lt;code&gt;TRUE&lt;/code&gt; value.</source>
          <target state="translated">Perl 5.8 добавляет поддержку ограниченных хэшей, у которых ключи ограничены заданным набором, а значения могут быть заблокированы только для чтения. По умолчанию, когда Storable встречает ограниченный хеш на perl, который их не поддерживает, он десериализует его как обычный хеш, молча отбрасывая все ключи-заполнители и оставляя ключи и все значения разблокированными. Чтобы вместо этого сделать Storable Croak &lt;code&gt;croak()&lt;/code&gt; , установите &lt;code&gt;$Storable::downgrade_restricted&lt;/code&gt; в значение &lt;code&gt;FALSE&lt;/code&gt; . Чтобы восстановить значение по умолчанию, верните его к некоторому &lt;code&gt;TRUE&lt;/code&gt; значению.</target>
        </trans-unit>
        <trans-unit id="565a4d4fa800ce5182da9b6ba981e8a739829623" translate="yes" xml:space="preserve">
          <source>Perl 5.8.0 added support for Unicode on EBCDIC platforms. This support was allowed to lapse in later releases, but was revived in 5.22. Unicode support is somewhat more complex to implement since additional conversions are needed. See &lt;a href=&quot;perlebcdic&quot;&gt;perlebcdic&lt;/a&gt; for more information.</source>
          <target state="translated">Perl 5.8.0 добавил поддержку Unicode на платформах EBCDIC. В более поздних выпусках эта поддержка была прекращена, но была восстановлена ​​в 5.22. Поддержка Unicode несколько сложнее реализовать, поскольку требуются дополнительные преобразования. См. &lt;a href=&quot;perlebcdic&quot;&gt;Perlebcdic&lt;/a&gt; для получения дополнительной информации.</target>
        </trans-unit>
        <trans-unit id="1d3bf07733afdb8eccda724369492b44b06d3912" translate="yes" xml:space="preserve">
          <source>Perl 5.8.0 and later avoid these problems by &quot;deferring&quot; signals. That is, when the signal is delivered to the process by the system (to the C code that implements Perl) a flag is set, and the handler returns immediately. Then at strategic &quot;safe&quot; points in the Perl interpreter (e.g. when it is about to execute a new opcode) the flags are checked and the Perl level handler from %SIG is executed. The &quot;deferred&quot; scheme allows much more flexibility in the coding of signal handlers as we know the Perl interpreter is in a safe state, and that we are not in a system library function when the handler is called. However the implementation does differ from previous Perls in the following ways:</source>
          <target state="translated">Perl 5.8.0 и более поздние версии позволяют избежать этих проблем путем &quot;отсрочки&quot; сигналов.То есть,когда сигнал поступает в процесс от системы (в код на C,реализующий Perl),устанавливается флаг,и обработчик немедленно возвращается.Затем в стратегических &quot;безопасных&quot; точках в интерпретаторе Perl (например,когда собирается выполнить новый опкод)проверяются флаги и выполняется обработчик уровня Perl из %SIG.Отложенная&quot; схема позволяет значительно больше гибкости в кодировании обработчиков сигналов,так как мы знаем,что Perl-интерпретатор находится в безопасном состоянии,и что при вызове обработчика мы не находимся в функции системной библиотеки.Однако реализация отличается от предыдущих Perls следующими способами:</target>
        </trans-unit>
        <trans-unit id="e73fd9ce0c7c872add12735883aa527cd3cbf5df" translate="yes" xml:space="preserve">
          <source>Perl 5.8.0 or later</source>
          <target state="translated">Perl 5.8.0 или более поздняя версия</target>
        </trans-unit>
        <trans-unit id="5a0af5a1468c03fa40c2af7be5d9056970a7782e" translate="yes" xml:space="preserve">
          <source>Perl 5.8.1 and beyond are able to automatically quote v-strings but that is not possible in earlier versions of Perl. In other words:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4e8757ee96021b145f4cb52d1033c040338543b5" translate="yes" xml:space="preserve">
          <source>Perl 6 is a reinvention of Perl, it is a language in the same lineage but not compatible. The two are complementary, not mutually exclusive. Perl 6 is not meant to replace Perl 5, and vice versa. See &lt;a href=&quot;#What-is-Perl-6%3f&quot;&gt;What is Perl 6?&lt;/a&gt; below to find out more.</source>
          <target state="translated">Perl 6 - это новое изобретение Perl, это язык того же происхождения, но несовместимый. Эти два понятия дополняют друг друга, а не исключают друг друга. Perl 6 не предназначен для замены Perl 5, и наоборот. См. &lt;a href=&quot;#What-is-Perl-6%3f&quot;&gt;Что такое Perl 6? &lt;/a&gt;ниже, чтобы узнать больше.</target>
        </trans-unit>
        <trans-unit id="70eed57e9021b8ec1bdc60c299cf0007c990e85c" translate="yes" xml:space="preserve">
          <source>Perl 6 was</source>
          <target state="translated">Perl 6 был</target>
        </trans-unit>
        <trans-unit id="c935317046cb2fe37bcb5104606c71edb33387e0" translate="yes" xml:space="preserve">
          <source>Perl &lt;b&gt;borrows syntax&lt;/b&gt; and concepts from many languages: awk, sed, C, Bourne Shell, Smalltalk, Lisp and even English. Other languages have borrowed syntax from Perl, particularly its regular expression extensions. So if you have programmed in another language you will see familiar pieces in Perl. They often work the same, but see &lt;a href=&quot;perltrap&quot;&gt;perltrap&lt;/a&gt; for information about how they differ.</source>
          <target state="translated">Perl &lt;b&gt;заимствует синтаксис&lt;/b&gt; и концепции из многих языков: awk, sed, C, Bourne Shell, Smalltalk, Lisp и даже английского. Другие языки заимствовали синтаксис Perl, особенно его расширения регулярных выражений. Так что, если вы программировали на другом языке, вы увидите знакомые части в Perl. Они часто работают одинаково, но посмотрите &lt;a href=&quot;perltrap&quot;&gt;perltrap,&lt;/a&gt; чтобы узнать, чем они отличаются.</target>
        </trans-unit>
        <trans-unit id="a37780bb487077495edf8f34f760c1da9044ebae" translate="yes" xml:space="preserve">
          <source>Perl API not supported by ppport.h</source>
          <target state="translated">Perl API не поддерживается ppport.h.</target>
        </trans-unit>
        <trans-unit id="50704605d6b6262fd96cb32c233850a8761b03e3" translate="yes" xml:space="preserve">
          <source>Perl API version %s of %s does not match %s</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5b7471df455475e2c7d2175b53792162c97edfe3" translate="yes" xml:space="preserve">
          <source>Perl Authors Upload Server. Contains links to information for module authors.</source>
          <target state="translated">Perl Authors Upload Server.Содержит ссылки на информацию для авторов модулей.</target>
        </trans-unit>
        <trans-unit id="8bf74964bb9b0e9e3d4da81f0703933934a7c358" translate="yes" xml:space="preserve">
          <source>Perl Best Practices</source>
          <target state="translated">Лучшие практики Perl</target>
        </trans-unit>
        <trans-unit id="2cc43b42e51a4a8837fffe3af550658174edb610" translate="yes" xml:space="preserve">
          <source>Perl Books</source>
          <target state="translated">Перл Букс</target>
        </trans-unit>
        <trans-unit id="ed1deb6e5d999d91341ff20898eb3858a1d9c995" translate="yes" xml:space="preserve">
          <source>Perl Bugs and the CPAN Version of &lt;a href=&quot;threads&quot;&gt;threads&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a3a9e748e5c4dd7f9dfa7cc95a251e60be896a8f" translate="yes" xml:space="preserve">
          <source>Perl Classes</source>
          <target state="translated">Перл-классы</target>
        </trans-unit>
        <trans-unit id="e482403a1124e0521d166c90c8a0769c85673b5e" translate="yes" xml:space="preserve">
          <source>Perl Cookbook</source>
          <target state="translated">Перл-кукнига</target>
        </trans-unit>
        <trans-unit id="d4efb54c65e7e3af46d13e87c7581a8dcba624d0" translate="yes" xml:space="preserve">
          <source>Perl DLL</source>
          <target state="translated">Perl DLL</target>
        </trans-unit>
        <trans-unit id="aeebc1579f8d617b27fe89ad608591410feec7ff" translate="yes" xml:space="preserve">
          <source>Perl Documentation</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3283f18cd28cbde0549accd86697398505934bb4" translate="yes" xml:space="preserve">
          <source>Perl Editor by EngInSite is a complete integrated development environment (IDE) for creating, testing, and debugging Perl scripts; the tool runs on Windows 9x/NT/2000/XP or later.</source>
          <target state="translated">Perl Editor от EngInSite-это полная интегрированная среда разработки (IDE)для создания,тестирования и отладки Perl скриптов;инструмент работает под Windows 9x/NT/2000/XP или более поздней версии.</target>
        </trans-unit>
        <trans-unit id="7ac9d4c93ef979889b211c88f596e981156f45f4" translate="yes" xml:space="preserve">
          <source>Perl Extensions</source>
          <target state="translated">Расширения Perl</target>
        </trans-unit>
        <trans-unit id="f71fad82087d419a133c0dced88c67e1f9877063" translate="yes" xml:space="preserve">
          <source>Perl FAQ</source>
          <target state="translated">Часто задаваемые вопросы на Perl</target>
        </trans-unit>
        <trans-unit id="da7c8c4aaafde8c9b2e5f84c7552444fbb08c636" translate="yes" xml:space="preserve">
          <source>Perl Fails Because Of Unresolved Symbol sockatmark</source>
          <target state="translated">Perl не работает из-за нерешённого символа sockatmark.</target>
        </trans-unit>
        <trans-unit id="7c3d43451e7cda778a3f9c97b52abf3fd44bedb9" translate="yes" xml:space="preserve">
          <source>Perl Functions by Category</source>
          <target state="translated">Функции по категориям</target>
        </trans-unit>
        <trans-unit id="920e14089fbbc423ee2d5724c1de68632aef3813" translate="yes" xml:space="preserve">
          <source>Perl GNU Info Files on AmigaOS</source>
          <target state="translated">Информационные файлы Perl GNU на AmigaOS</target>
        </trans-unit>
        <trans-unit id="37de2a8ad505f52fcef06a6993c850291e480520" translate="yes" xml:space="preserve">
          <source>Perl HTML Documentation on AmigaOS</source>
          <target state="translated">Документация в формате Perl HTML на AmigaOS</target>
        </trans-unit>
        <trans-unit id="05eb1caf8706fb276d9b12087337d5c6103138c5" translate="yes" xml:space="preserve">
          <source>Perl LaTeX Documentation on AmigaOS</source>
          <target state="translated">Perl LaTeX Документация на AmigaOS</target>
        </trans-unit>
        <trans-unit id="04d3717cc2f7e5ee505e9248aa236712bb68755e" translate="yes" xml:space="preserve">
          <source>Perl Module Tests</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="91a43bc6de8b72c656ec8849bbbaebef043357f9" translate="yes" xml:space="preserve">
          <source>Perl Modules</source>
          <target state="translated">Модули Perl</target>
        </trans-unit>
        <trans-unit id="1444928d77d0dfce158ff301d3dbfb2b1588dd16" translate="yes" xml:space="preserve">
          <source>Perl Modules/Scripts</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="216d171ee4524430a28634ae1013da6c2f558efa" translate="yes" xml:space="preserve">
          <source>Perl Objects And C Structures</source>
          <target state="translated">Perl Объекты и С-структуры</target>
        </trans-unit>
        <trans-unit id="a472684894e509305085eced5d45bf35bf21cca5" translate="yes" xml:space="preserve">
          <source>Perl Smokers ( &lt;a href=&quot;http://www.nntp.perl.org/group/perl.daily-build/&quot;&gt;http://www.nntp.perl.org/group/perl.daily-build/&lt;/a&gt; and &lt;a href=&quot;http://www.nntp.perl.org/group/perl.daily-build.reports/&quot;&gt;http://www.nntp.perl.org/group/perl.daily-build.reports/&lt;/a&gt; ) automatically test Perl source releases on platforms with various configurations.</source>
          <target state="translated">Perl Smokers ( &lt;a href=&quot;http://www.nntp.perl.org/group/perl.daily-build/&quot;&gt;http://www.nntp.perl.org/group/perl.daily-build/&lt;/a&gt; и &lt;a href=&quot;http://www.nntp.perl.org/group/perl.daily-build.reports/&quot;&gt;http://www.nntp.perl.org/group/perl.daily-build.reports/&lt;/a&gt; ) автоматически тестируют Perl исходные версии на платформах с различными конфигурациями.</target>
        </trans-unit>
        <trans-unit id="134999afb97cf5b769bf8c4b178dce62bcebf389" translate="yes" xml:space="preserve">
          <source>Perl Smokers ( &lt;a href=&quot;https://www.nntp.perl.org/group/perl.daily-build/&quot;&gt;https://www.nntp.perl.org/group/perl.daily-build/&lt;/a&gt; and &lt;a href=&quot;https://www.nntp.perl.org/group/perl.daily-build.reports/&quot;&gt;https://www.nntp.perl.org/group/perl.daily-build.reports/&lt;/a&gt; ) automatically test Perl source releases on platforms with various configurations.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a5b49734e895fa49b2262a8eac32c0a87b309e7f" translate="yes" xml:space="preserve">
          <source>Perl Source Filter</source>
          <target state="translated">Фильтр на основе Perl</target>
        </trans-unit>
        <trans-unit id="d9385cb28cfa7ddf46c00b8a389aa72f1c3ecd2f" translate="yes" xml:space="preserve">
          <source>Perl Source Filter Utility Module</source>
          <target state="translated">Утилитный модуль фильтрации на основе Perl</target>
        </trans-unit>
        <trans-unit id="11827d68497a169d041d5a9b84cc14e0b5402701" translate="yes" xml:space="preserve">
          <source>Perl Threads Are Not X Threads</source>
          <target state="translated">Нитки Perl-это не X Нитки.</target>
        </trans-unit>
        <trans-unit id="0d5f49a6432453dfdae5c9b853d5d2137d7a3d82" translate="yes" xml:space="preserve">
          <source>Perl Traps</source>
          <target state="translated">Перл Ловушки</target>
        </trans-unit>
        <trans-unit id="baee6a50a34759c52a5448ef022819377b034948" translate="yes" xml:space="preserve">
          <source>Perl VIO and PM executables (dynamically linked)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e81612c89b54aaefee5157e85c78728a2455e0ca" translate="yes" xml:space="preserve">
          <source>Perl XS' attempt at a solution to this is the concept of typemaps. At an abstract level, a Perl XS typemap is nothing but a recipe for converting from a certain Perl data structure to a certain C data structure and vice versa. Since there can be C types that are sufficiently similar to one another to warrant converting with the same logic, XS typemaps are represented by a unique identifier, henceforth called an &lt;b&gt;XS type&lt;/b&gt; in this document. You can then tell the XS compiler that multiple C types are to be mapped with the same XS typemap.</source>
          <target state="translated">Попытка Perl XS решить эту проблему - это концепция типовых карт. На абстрактном уровне карта типов Perl XS - не что иное, как рецепт для преобразования определенной структуры данных Perl в определенную структуру данных C и наоборот. Поскольку могут быть типы C, которые достаточно похожи друг на друга, чтобы гарантировать преобразование с использованием той же логики, карты типов XS представлены уникальным идентификатором, в дальнейшем называемым &lt;b&gt;типом XS&lt;/b&gt; в этом документе. Затем вы можете сообщить компилятору XS, что несколько типов C должны отображаться с одной и той же картой типов XS.</target>
        </trans-unit>
        <trans-unit id="5aedddb9bed4a6f9cc4928e309c3362165c3d8aa" translate="yes" xml:space="preserve">
          <source>Perl actually inserts the following code:</source>
          <target state="translated">Perl фактически вставляет следующий код:</target>
        </trans-unit>
        <trans-unit id="0370590002494d49cbee29303986558b8c939d60" translate="yes" xml:space="preserve">
          <source>Perl actually stands for Pathologically Eclectic Rubbish Lister, but don't tell anyone I said that.</source>
          <target state="translated">Perl на самом деле означает &quot;Патологически эклектичный мусорный листер&quot;,но никому не говорите,что я это сказал.</target>
        </trans-unit>
        <trans-unit id="4ac1014663aa23e842df07d5739089aa502fbf6c" translate="yes" xml:space="preserve">
          <source>Perl adds magic to an SV using the sv_magic function:</source>
          <target state="translated">Perl добавляет магию в SV с помощью функции sv_magic:</target>
        </trans-unit>
        <trans-unit id="c3b8bb4554b031723a2e07241fd747dea1d44323" translate="yes" xml:space="preserve">
          <source>Perl after 5.8.7 has support for the &lt;code&gt;CLONE_SKIP&lt;/code&gt; special subroutine. Like &lt;code&gt;CLONE&lt;/code&gt; , &lt;code&gt;CLONE_SKIP&lt;/code&gt; is called once per package; however, it is called just before cloning starts, and in the context of the parent thread. If it returns a true value, then no objects of that class will be cloned; or rather, they will be copied as unblessed, undef values. For example: if in the parent there are two references to a single blessed hash, then in the child there will be two references to a single undefined scalar value instead. This provides a simple mechanism for making a module threadsafe; just add &lt;code&gt;sub CLONE_SKIP { 1 }&lt;/code&gt; at the top of the class, and &lt;code&gt;DESTROY()&lt;/code&gt; will now only be called once per object. Of course, if the child thread needs to make use of the objects, then a more sophisticated approach is needed.</source>
          <target state="translated">Perl после 5.8.7 поддерживает специальную подпрограмму &lt;code&gt;CLONE_SKIP&lt;/code&gt; . Как и &lt;code&gt;CLONE&lt;/code&gt; , &lt;code&gt;CLONE_SKIP&lt;/code&gt; вызывается один раз для каждого пакета; однако он вызывается непосредственно перед началом клонирования и в контексте родительского потока. Если он возвращает истинное значение, то никакие объекты этого класса не будут клонированы; или, скорее, они будут скопированы как неблагословенные значения undef. Например: если в родительском элементе есть две ссылки на один благословенный хеш, то в дочернем элементе вместо этого будут две ссылки на одно неопределенное скалярное значение. Это обеспечивает простой механизм обеспечения безопасности потоков модуля; просто добавьте &lt;code&gt;sub CLONE_SKIP { 1 }&lt;/code&gt; в начало класса и &lt;code&gt;DESTROY()&lt;/code&gt; теперь будет вызываться только один раз для каждого объекта. Конечно, если дочернему потоку необходимо использовать объекты, тогда необходим более сложный подход.</target>
        </trans-unit>
        <trans-unit id="cc574da81e120f807b416b88f2c0641a8912116e" translate="yes" xml:space="preserve">
          <source>Perl after 5.8.7 has support for the &lt;code&gt;CLONE_SKIP&lt;/code&gt; special subroutine. Like &lt;code&gt;CLONE&lt;/code&gt;, &lt;code&gt;CLONE_SKIP&lt;/code&gt; is called once per package; however, it is called just before cloning starts, and in the context of the parent thread. If it returns a true value, then no objects of that class will be cloned; or rather, they will be copied as unblessed, undef values. For example: if in the parent there are two references to a single blessed hash, then in the child there will be two references to a single undefined scalar value instead. This provides a simple mechanism for making a module threadsafe; just add &lt;code&gt;sub CLONE_SKIP { 1 }&lt;/code&gt; at the top of the class, and &lt;code&gt;DESTROY()&lt;/code&gt; will now only be called once per object. Of course, if the child thread needs to make use of the objects, then a more sophisticated approach is needed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c3994bbd1bc4bb2e8469e1a722d815312e8adf0c" translate="yes" xml:space="preserve">
          <source>Perl allows multiple inheritance, which means that a class can inherit from multiple parents. While this is possible, we strongly recommend against it. Generally, you can use &lt;b&gt;roles&lt;/b&gt; to do everything you can do with multiple inheritance, but in a cleaner way.</source>
          <target state="translated">Perl допускает множественное наследование, что означает, что класс может наследовать от нескольких родителей. Хотя это возможно, мы настоятельно не рекомендуем этого делать. Как правило, вы можете использовать &lt;b&gt;роли,&lt;/b&gt; чтобы делать все, что вы можете делать с множественным наследованием, но более чистым способом.</target>
        </trans-unit>
        <trans-unit id="6599623983e18eb4fc0786b977835cf73837499f" translate="yes" xml:space="preserve">
          <source>Perl allows strings to contain a superset of Unicode code points, but these may not be accepted by other languages/systems. Further, even if these languages/systems accept these large code points, they may have chosen a different representation for them than the UTF-8-like one that Perl has, which would mean files are not exchangeable between them and Perl.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1876b83bb7cab17e23b16333856308b07e0072a3" translate="yes" xml:space="preserve">
          <source>Perl allows strings to contain a superset of Unicode code points, up to the limit of what is storable in an unsigned integer on your system, but these may not be accepted by other languages/systems. At one time, it was legal in some standards to have code points up to 0x7FFF_FFFF, but not higher. Code points above 0xFFFF_FFFF require larger than a 32 bit word.</source>
          <target state="translated">Perl позволяет строкам содержать суперсет из точек кода Юникода,вплоть до того,что хранится в беззнаковом целочислении в вашей системе,но это не может быть принято другими языками/системами.В свое время в некоторых стандартах было законно иметь точки кода до 0x7FFF_FFFFF,но не выше.Точки кода выше 0xFFFF_FFFFF требуют больше 32-битного слова.</target>
        </trans-unit>
        <trans-unit id="da9001288df945c437097ff6bd5fee062555f6d6" translate="yes" xml:space="preserve">
          <source>Perl allows you to call methods using their fully qualified name (the package and method name):</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2ac9734d0ed22e02e26ee85745c9780f4e398059" translate="yes" xml:space="preserve">
          <source>Perl already</source>
          <target state="translated">Перл уже</target>
        </trans-unit>
        <trans-unit id="15634b8ec3adda1649ae8821b358664ffd34a247" translate="yes" xml:space="preserve">
          <source>Perl also defines a consistent extension syntax for features not found in standard tools like &lt;b&gt;awk&lt;/b&gt; and &lt;b&gt;lex&lt;/b&gt;. The syntax for most of these is a pair of parentheses with a question mark as the first thing within the parentheses. The character after the question mark indicates the extension.</source>
          <target state="translated">Perl также определяет согласованный синтаксис расширения для функций, которых нет в стандартных инструментах, таких как &lt;b&gt;awk&lt;/b&gt; и &lt;b&gt;lex&lt;/b&gt; . Синтаксис большинства из них - это пара круглых скобок со знаком вопроса в первую очередь в скобках. Символ после вопросительного знака указывает на расширение.</target>
        </trans-unit>
        <trans-unit id="555f11f2e27ae1e8bf2d2bd41f29991c6d6def35" translate="yes" xml:space="preserve">
          <source>Perl also defines single form synonyms for the block property in cases where these do not conflict with something else. But don't use any of these, because they are unstable. Since these are Perl extensions, they are subordinate to official Unicode property names; Unicode doesn't know nor care about Perl's extensions. It may happen that a name that currently means the Perl extension will later be changed without warning to mean a different Unicode property in a future version of the perl interpreter that uses a later Unicode release, and your code would no longer work. The extensions are mentioned here for completeness: Take the block name and prefix it with one of: &lt;code&gt;In&lt;/code&gt; (for example &lt;code&gt;\p{Blk=Arrows}&lt;/code&gt; can currently be written as &lt;code&gt;\p{In_Arrows}&lt;/code&gt;); or sometimes &lt;code&gt;Is&lt;/code&gt; (like &lt;code&gt;\p{Is_Arrows}&lt;/code&gt;); or sometimes no prefix at all (&lt;code&gt;\p{Arrows}&lt;/code&gt;). As of this writing (Unicode 9.0) there are no conflicts with using the &lt;code&gt;In_&lt;/code&gt; prefix, but there are plenty with the other two forms. For example, &lt;code&gt;\p{Is_Hebrew}&lt;/code&gt; and &lt;code&gt;\p{Hebrew}&lt;/code&gt; mean &lt;code&gt;\p{Script_Extensions=Hebrew}&lt;/code&gt; which is NOT the same thing as &lt;code&gt;\p{Blk=Hebrew}&lt;/code&gt;. Our advice used to be to use the &lt;code&gt;In_&lt;/code&gt; prefix as a single form way of specifying a block. But Unicode 8.0 added properties whose names begin with &lt;code&gt;In&lt;/code&gt;, and it's now clear that it's only luck that's so far prevented a conflict. Using &lt;code&gt;In&lt;/code&gt; is only marginally less typing than &lt;code&gt;Blk:&lt;/code&gt;, and the latter's meaning is clearer anyway, and guaranteed to never conflict. So don't take chances. Use &lt;code&gt;\p{Blk=foo}&lt;/code&gt; for new code. And be sure that block is what you really really want to do. In most cases scripts are what you want instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a619d021759a90d753880bfe4b40f68e2b5378ff" translate="yes" xml:space="preserve">
          <source>Perl also guarantees that the ranges &lt;code&gt;A-Z&lt;/code&gt; , &lt;code&gt;a-z&lt;/code&gt; , &lt;code&gt;0-9&lt;/code&gt; , and any subranges of these match what an English-only speaker would expect them to match on any platform. That is, &lt;code&gt;[A-Z]&lt;/code&gt; matches the 26 ASCII uppercase letters; &lt;code&gt;[a-z]&lt;/code&gt; matches the 26 lowercase letters; and &lt;code&gt;[0-9]&lt;/code&gt; matches the 10 digits. Subranges, like &lt;code&gt;[h-k]&lt;/code&gt; , match correspondingly, in this case just the four letters &lt;code&gt;&quot;h&quot;&lt;/code&gt; , &lt;code&gt;&quot;i&quot;&lt;/code&gt; , &lt;code&gt;&quot;j&quot;&lt;/code&gt; , and &lt;code&gt;&quot;k&quot;&lt;/code&gt; . This is the natural behavior on ASCII platforms where the code points (ordinal values) for &lt;code&gt;&quot;h&quot;&lt;/code&gt; through &lt;code&gt;&quot;k&quot;&lt;/code&gt; are consecutive integers (0x68 through 0x6B). But special handling to achieve this may be needed on platforms with a non-ASCII native character set. For example, on EBCDIC platforms, the code point for &lt;code&gt;&quot;h&quot;&lt;/code&gt; is 0x88, &lt;code&gt;&quot;i&quot;&lt;/code&gt; is 0x89, &lt;code&gt;&quot;j&quot;&lt;/code&gt; is 0x91, and &lt;code&gt;&quot;k&quot;&lt;/code&gt; is 0x92. Perl specially treats &lt;code&gt;[h-k]&lt;/code&gt; to exclude the seven code points in the gap: 0x8A through 0x90. This special handling is only invoked when the range is a subrange of one of the ASCII uppercase, lowercase, and digit ranges, AND each end of the range is expressed either as a literal, like &lt;code&gt;&quot;A&quot;&lt;/code&gt; , or as a named character (&lt;code&gt;\N{...}&lt;/code&gt; , including the &lt;code&gt;\N{U+...&lt;/code&gt; form).</source>
          <target state="translated">Perl также гарантирует, что диапазоны &lt;code&gt;A-Z&lt;/code&gt; , &lt;code&gt;a-z&lt;/code&gt; , &lt;code&gt;0-9&lt;/code&gt; и любые их поддиапазоны соответствуют тому, что говорящий только на английском языке ожидал бы от них на любой платформе. То есть &lt;code&gt;[A-Z]&lt;/code&gt; соответствует 26 заглавным буквам ASCII; &lt;code&gt;[a-z]&lt;/code&gt; соответствует 26 строчным буквам; и &lt;code&gt;[0-9]&lt;/code&gt; соответствует 10 цифрам. Поддиапазоны, такие как &lt;code&gt;[h-k]&lt;/code&gt; , соответствуют соответственно, в данном случае только четыре буквы &lt;code&gt;&quot;h&quot;&lt;/code&gt; , &lt;code&gt;&quot;i&quot;&lt;/code&gt; , &lt;code&gt;&quot;j&quot;&lt;/code&gt; и &lt;code&gt;&quot;k&quot;&lt;/code&gt; . Это естественное поведение на платформах ASCII, где кодовые точки (порядковые значения) от &lt;code&gt;&quot;h&quot;&lt;/code&gt; до &lt;code&gt;&quot;k&quot;&lt;/code&gt; - последовательные целые числа (от 0x68 до 0x6B). Но для этого может потребоваться специальная обработка на платформах с собственным набором символов, отличным от ASCII. Например, на платформах EBCDIC кодовая точка для &lt;code&gt;&quot;h&quot;&lt;/code&gt; - 0x88, &lt;code&gt;&quot;i&quot;&lt;/code&gt; - это 0x89, &lt;code&gt;&quot;j&quot;&lt;/code&gt; - 0x91, а &lt;code&gt;&quot;k&quot;&lt;/code&gt; - 0x92. Perl специально обрабатывает &lt;code&gt;[h-k]&lt;/code&gt; чтобы исключить семь кодовых точек в промежутке: от 0x8A до 0x90. Эта специальная обработка вызывается только тогда, когда диапазон является поддиапазоном одного из диапазонов верхнего, нижнего и цифрового символов ASCII, И каждый конец диапазона выражается либо как литерал, например &lt;code&gt;&quot;A&quot;&lt;/code&gt; , либо как именованный символ ( &lt;code&gt;\N{...}&lt;/code&gt; , включая форму &lt;code&gt;\N{U+...&lt;/code&gt; ).</target>
        </trans-unit>
        <trans-unit id="d3478992830572c2488574386b02bb13d70d568a" translate="yes" xml:space="preserve">
          <source>Perl also guarantees that the ranges &lt;code&gt;A-Z&lt;/code&gt;, &lt;code&gt;a-z&lt;/code&gt;, &lt;code&gt;0-9&lt;/code&gt;, and any subranges of these match what an English-only speaker would expect them to match on any platform. That is, &lt;code&gt;[A-Z]&lt;/code&gt; matches the 26 ASCII uppercase letters; &lt;code&gt;[a-z]&lt;/code&gt; matches the 26 lowercase letters; and &lt;code&gt;[0-9]&lt;/code&gt; matches the 10 digits. Subranges, like &lt;code&gt;[h-k]&lt;/code&gt;, match correspondingly, in this case just the four letters &lt;code&gt;&quot;h&quot;&lt;/code&gt;, &lt;code&gt;&quot;i&quot;&lt;/code&gt;, &lt;code&gt;&quot;j&quot;&lt;/code&gt;, and &lt;code&gt;&quot;k&quot;&lt;/code&gt;. This is the natural behavior on ASCII platforms where the code points (ordinal values) for &lt;code&gt;&quot;h&quot;&lt;/code&gt; through &lt;code&gt;&quot;k&quot;&lt;/code&gt; are consecutive integers (0x68 through 0x6B). But special handling to achieve this may be needed on platforms with a non-ASCII native character set. For example, on EBCDIC platforms, the code point for &lt;code&gt;&quot;h&quot;&lt;/code&gt; is 0x88, &lt;code&gt;&quot;i&quot;&lt;/code&gt; is 0x89, &lt;code&gt;&quot;j&quot;&lt;/code&gt; is 0x91, and &lt;code&gt;&quot;k&quot;&lt;/code&gt; is 0x92. Perl specially treats &lt;code&gt;[h-k]&lt;/code&gt; to exclude the seven code points in the gap: 0x8A through 0x90. This special handling is only invoked when the range is a subrange of one of the ASCII uppercase, lowercase, and digit ranges, AND each end of the range is expressed either as a literal, like &lt;code&gt;&quot;A&quot;&lt;/code&gt;, or as a named character (&lt;code&gt;\N{...}&lt;/code&gt;, including the &lt;code&gt;\N{U+...&lt;/code&gt; form).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="43ed4c36b705c801489a6eaa310a7c1790004938" translate="yes" xml:space="preserve">
          <source>Perl also has environment variables that control how Perl handles data specific to particular natural languages; see &lt;a href=&quot;perllocale&quot;&gt;perllocale&lt;/a&gt;.</source>
          <target state="translated">Perl также имеет переменные среды, которые управляют тем, как Perl обрабатывает данные, специфичные для определенных естественных языков; см. &lt;a href=&quot;perllocale&quot;&gt;perllocale&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="8ec1e88310a904c3504c234668eb6f0ebab9fa04" translate="yes" xml:space="preserve">
          <source>Perl also has its own built-in variables whose names don't follow these rules. They have strange names so they don't accidentally collide with one of your normal variables. Strings that match parenthesized parts of a regular expression are saved under names containing only digits after the &lt;code&gt;$&lt;/code&gt; (see &lt;a href=&quot;perlop&quot;&gt;perlop&lt;/a&gt; and &lt;a href=&quot;perlre&quot;&gt;perlre&lt;/a&gt;). In addition, several special variables that provide windows into the inner working of Perl have names containing punctuation characters and control characters. These are documented in &lt;a href=&quot;perlvar&quot;&gt;perlvar&lt;/a&gt;.</source>
          <target state="translated">Perl также имеет свои собственные встроенные переменные, имена которых не соответствуют этим правилам. У них странные имена, поэтому они случайно не столкнутся с одной из ваших обычных переменных. Строки, соответствующие заключенным в скобки частям регулярного выражения, сохраняются под именами, содержащими только цифры после &lt;code&gt;$&lt;/code&gt; (см. &lt;a href=&quot;perlop&quot;&gt;Perlop&lt;/a&gt; и &lt;a href=&quot;perlre&quot;&gt;perlre&lt;/a&gt; ). Кроме того, несколько специальных переменных, которые открывают окна для внутренней работы Perl, имеют имена, содержащие знаки препинания и управляющие символы. Они задокументированы в &lt;a href=&quot;perlvar&quot;&gt;perlvar&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="f3713f56b650ce5c5c9a6797e5a04ca7cc768c6f" translate="yes" xml:space="preserve">
          <source>Perl also has its own built-in variables whose names don't follow these rules. They have strange names so they don't accidentally collide with one of your normal variables. Strings that match parenthesized parts of a regular expression are saved under names containing only digits after the &lt;code&gt;$&lt;/code&gt; (see &lt;a href=&quot;perlop&quot;&gt;perlop&lt;/a&gt; and &lt;a href=&quot;perlre&quot;&gt;perlre&lt;/a&gt;). In addition, several special variables that provide windows into the inner working of Perl have names containing punctuation characters. These are documented in &lt;a href=&quot;perlvar&quot;&gt;perlvar&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="841c07e6d7a8a9202a2c193293298a117297f325" translate="yes" xml:space="preserve">
          <source>Perl also has single-form extensions that refer to blocks, &lt;code&gt;In_Cyrillic&lt;/code&gt; , meaning &lt;code&gt;Block=Cyrillic&lt;/code&gt; . These have always been written in the new style.</source>
          <target state="translated">Perl также имеет расширения одной формы, которые относятся к блокам, &lt;code&gt;In_Cyrillic&lt;/code&gt; , что означает &lt;code&gt;Block=Cyrillic&lt;/code&gt; . Они всегда писались в новом стиле.</target>
        </trans-unit>
        <trans-unit id="5bfcb9a0154768c6b22ee7b3439e847665a12d5c" translate="yes" xml:space="preserve">
          <source>Perl also has single-form extensions that refer to blocks, &lt;code&gt;In_Cyrillic&lt;/code&gt;, meaning &lt;code&gt;Block=Cyrillic&lt;/code&gt;. These have always been written in the new style.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="137aae63637704103b28432cb70098e2ba4ae7c0" translate="yes" xml:space="preserve">
          <source>Perl also lets you open a filehandle into an external program or shell command rather than into a file. You can do this in order to pass data from your Perl program to an external command for further processing, or to receive data from another program for your own Perl program to process.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e768cdcaf855f3ac360271eae70fa3fb2f42dd9c" translate="yes" xml:space="preserve">
          <source>Perl also lets you use a dereferenced scalar reference in a method call. That's a mouthful, so let's look at some code:</source>
          <target state="translated">Perl также позволяет использовать разыменованную ссылку на скаляр в вызове метода.Это полный рот,так что давайте посмотрим на какой-нибудь код:</target>
        </trans-unit>
        <trans-unit id="bb3ab86dafec3fc1c1204665ff3d23b69370b1f7" translate="yes" xml:space="preserve">
          <source>Perl also lets you use a scalar containing a string as a class name:</source>
          <target state="translated">Perl также позволяет использовать скаляр,содержащий строку в качестве имени класса:</target>
        </trans-unit>
        <trans-unit id="c015ec327f8f9a3ad1518fbf18a7cfa1b7b34e78" translate="yes" xml:space="preserve">
          <source>Perl also makes no guarantees that the representation of these code points won't change at some point in the future, say when machines become available that have larger than a 64-bit word. At that time, files containing any of these, written by an older Perl might require conversion before being readable by a newer Perl.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="371faeea377937a5cb124120c079958efb812b1f" translate="yes" xml:space="preserve">
          <source>Perl also provides some additional extensions and short-cut synonyms for Unicode properties.</source>
          <target state="translated">Perl также предоставляет некоторые дополнительные расширения и короткие синонимы для свойств Юникода.</target>
        </trans-unit>
        <trans-unit id="bc3b136059aadb780f36682ea1b93270fac2fc5f" translate="yes" xml:space="preserve">
          <source>Perl also uses two special typedefs, I32 and I16, which will always be at least 32-bits and 16-bits long, respectively. (Again, there are U32 and U16, as well.) They will usually be exactly 32 and 16 bits long, but on Crays they will both be 64 bits.</source>
          <target state="translated">Perl также использует два специальных шрифта,I32 и I16,которые всегда будут как минимум 32 и 16 бит соответственно.(Опять же,есть U32 и U16,тоже.)Обычно они будут иметь ровно 32 и 16 бит,но на Crays они оба будут 64 бита.</target>
        </trans-unit>
        <trans-unit id="d9ec80db167215866b69eb0ca3e0370b7320f73c" translate="yes" xml:space="preserve">
          <source>Perl and its various modules and components, including its test frameworks, may sometimes make use of certain other environment variables. Some of these are specific to a particular platform. Please consult the appropriate module documentation and any documentation for your platform (like &lt;a href=&quot;perlsolaris&quot;&gt;perlsolaris&lt;/a&gt;, &lt;a href=&quot;perllinux&quot;&gt;perllinux&lt;/a&gt;, &lt;a href=&quot;perlmacosx&quot;&gt;perlmacosx&lt;/a&gt;, &lt;a href=&quot;perlwin32&quot;&gt;perlwin32&lt;/a&gt;, etc) for variables peculiar to those specific situations.</source>
          <target state="translated">Perl и его различные модули и компоненты, включая его тестовые среды, иногда могут использовать некоторые другие переменные среды. Некоторые из них относятся к конкретной платформе. Пожалуйста, обратитесь к документации соответствующего модуля и любой документации для вашей платформы (например, &lt;a href=&quot;perlsolaris&quot;&gt;perlsolaris&lt;/a&gt; , &lt;a href=&quot;perllinux&quot;&gt;perllinux&lt;/a&gt; , &lt;a href=&quot;perlmacosx&quot;&gt;perlmacosx&lt;/a&gt; , &lt;a href=&quot;perlwin32&quot;&gt;perlwin32&lt;/a&gt; и т. Д.) , Чтобы узнать о переменных, характерных для этих конкретных ситуаций.</target>
        </trans-unit>
        <trans-unit id="d1f38ea6665b57c86a485191974a93669f79515b" translate="yes" xml:space="preserve">
          <source>Perl applications</source>
          <target state="translated">Perl-приложения</target>
        </trans-unit>
        <trans-unit id="4025df8be02954e082a25375011463ff96fd6a98" translate="yes" xml:space="preserve">
          <source>Perl array references become JSON arrays.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="502f7e3b25466218701794ac8b146d454581203f" translate="yes" xml:space="preserve">
          <source>Perl attempts to flush all files opened for output before forking the child process, but this may not be supported on some platforms (see &lt;a href=&quot;../perlport&quot;&gt;perlport&lt;/a&gt;). To be safe, you may need to set &lt;code&gt;$|&lt;/code&gt; ($AUTOFLUSH in English) or call the &lt;code&gt;autoflush()&lt;/code&gt; method of &lt;code&gt;IO::Handle&lt;/code&gt; on any open handles to avoid duplicate output.</source>
          <target state="translated">Perl пытается очистить все файлы, открытые для вывода, перед тем, как разветвлять дочерний процесс, но это может не поддерживаться на некоторых платформах (см. &lt;a href=&quot;../perlport&quot;&gt;Perlport&lt;/a&gt; ). В целях безопасности вам может потребоваться установить &lt;code&gt;$|&lt;/code&gt; ($ AutoFlush на английском языке) или вызовите &lt;code&gt;autoflush()&lt;/code&gt; метод &lt;code&gt;IO::Handle&lt;/code&gt; на любые открытые ручки , чтобы избежать дублирования вывода.</target>
        </trans-unit>
        <trans-unit id="9e63e6195bf1a4edf392bb3f6dbbceb58829cc90" translate="yes" xml:space="preserve">
          <source>Perl attempts to flush all files opened for output before forking the child process, but this may not be supported on some platforms (see &lt;a href=&quot;perlport&quot;&gt;perlport&lt;/a&gt;). To be safe, you may need to set &lt;a href=&quot;perlvar#%24%7C&quot;&gt;&lt;code&gt;$|&lt;/code&gt;&lt;/a&gt; (&lt;code&gt;$AUTOFLUSH&lt;/code&gt; in &lt;a href=&quot;english&quot;&gt;English&lt;/a&gt;) or call the &lt;code&gt;autoflush&lt;/code&gt; method of &lt;a href=&quot;IO::Handle#METHODS&quot;&gt;&lt;code&gt;IO::Handle&lt;/code&gt;&lt;/a&gt; on any open handles to avoid duplicate output.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="310c094e234f2eeac0cd6d541a4252ff1573cf15" translate="yes" xml:space="preserve">
          <source>Perl attempts to flush all files opened for output before forking the child process, but this may not be supported on some platforms (see &lt;a href=&quot;perlport&quot;&gt;perlport&lt;/a&gt;). To be safe, you may need to set &lt;code&gt;$|&lt;/code&gt; ($AUTOFLUSH in English) or call the &lt;code&gt;autoflush()&lt;/code&gt; method of &lt;code&gt;IO::Handle&lt;/code&gt; on any open handles to avoid duplicate output.</source>
          <target state="translated">Perl пытается очистить все файлы, открытые для вывода, перед тем, как разветвлять дочерний процесс, но это может не поддерживаться на некоторых платформах (см. &lt;a href=&quot;perlport&quot;&gt;Perlport&lt;/a&gt; ). В целях безопасности вам может потребоваться установить &lt;code&gt;$|&lt;/code&gt; ($ AutoFlush на английском языке) или вызовите &lt;code&gt;autoflush()&lt;/code&gt; метод &lt;code&gt;IO::Handle&lt;/code&gt; на любые открытые ручки , чтобы избежать дублирования вывода.</target>
        </trans-unit>
        <trans-unit id="de17dd0dec4269e99ee3620228765bf8385c7342" translate="yes" xml:space="preserve">
          <source>Perl attempts to flush all files opened for output before the exec, but this may not be supported on some platforms (see &lt;a href=&quot;../perlport&quot;&gt;perlport&lt;/a&gt;). To be safe, you may need to set &lt;code&gt;$|&lt;/code&gt; ($AUTOFLUSH in English) or call the &lt;code&gt;autoflush()&lt;/code&gt; method of &lt;code&gt;IO::Handle&lt;/code&gt; on any open handles to avoid lost output.</source>
          <target state="translated">Perl пытается очистить все файлы, открытые для вывода, перед exec, но это может не поддерживаться на некоторых платформах (см. &lt;a href=&quot;../perlport&quot;&gt;Perlport&lt;/a&gt; ). В целях безопасности вам может потребоваться установить &lt;code&gt;$|&lt;/code&gt; ($ AutoFlush на английском языке) или вызовите &lt;code&gt;autoflush()&lt;/code&gt; метод &lt;code&gt;IO::Handle&lt;/code&gt; на любые открытые ручки , чтобы избежать падения производства.</target>
        </trans-unit>
        <trans-unit id="051c3f058010c205bb09ec0c0f5ce04fd3e0e5c9" translate="yes" xml:space="preserve">
          <source>Perl attempts to flush all files opened for output before the exec, but this may not be supported on some platforms (see &lt;a href=&quot;perlport&quot;&gt;perlport&lt;/a&gt;). To be safe, you may need to set &lt;a href=&quot;perlvar#%24%7C&quot;&gt;&lt;code&gt;$|&lt;/code&gt;&lt;/a&gt; (&lt;code&gt;$AUTOFLUSH&lt;/code&gt; in &lt;a href=&quot;english&quot;&gt;English&lt;/a&gt;) or call the &lt;code&gt;autoflush&lt;/code&gt; method of &lt;a href=&quot;IO::Handle#METHODS&quot;&gt;&lt;code&gt;IO::Handle&lt;/code&gt;&lt;/a&gt; on any open handles to avoid lost output.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="003b4d9ba004fb0af8689ed0414255d30b89d115" translate="yes" xml:space="preserve">
          <source>Perl attempts to flush all files opened for output before the exec, but this may not be supported on some platforms (see &lt;a href=&quot;perlport&quot;&gt;perlport&lt;/a&gt;). To be safe, you may need to set &lt;code&gt;$|&lt;/code&gt; ($AUTOFLUSH in English) or call the &lt;code&gt;autoflush()&lt;/code&gt; method of &lt;code&gt;IO::Handle&lt;/code&gt; on any open handles to avoid lost output.</source>
          <target state="translated">Perl пытается очистить все файлы, открытые для вывода, перед exec, но это может не поддерживаться на некоторых платформах (см. &lt;a href=&quot;perlport&quot;&gt;Perlport&lt;/a&gt; ). В целях безопасности вам может потребоваться установить &lt;code&gt;$|&lt;/code&gt; ($ AutoFlush на английском языке) или вызовите &lt;code&gt;autoflush()&lt;/code&gt; метод &lt;code&gt;IO::Handle&lt;/code&gt; на любые открытые ручки , чтобы избежать падения производства.</target>
        </trans-unit>
        <trans-unit id="7d4f20a9384f8bc5428825b882bff482c1a8070c" translate="yes" xml:space="preserve">
          <source>Perl automatically calls the &lt;code&gt;&lt;a href=&quot;functions/import&quot;&gt;import&lt;/a&gt;&lt;/code&gt; method when processing a &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt;&lt;/code&gt; statement for a module. Modules and &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt;&lt;/code&gt; are documented in &lt;a href=&quot;perlfunc&quot;&gt;perlfunc&lt;/a&gt; and &lt;a href=&quot;perlmod&quot;&gt;perlmod&lt;/a&gt;. Understanding the concept of modules and how the &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt;&lt;/code&gt; statement operates is important to understanding the Exporter.</source>
          <target state="translated">Perl автоматически вызывает метод &lt;code&gt;&lt;a href=&quot;functions/import&quot;&gt;import&lt;/a&gt;&lt;/code&gt; при обработке оператора &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt;&lt;/code&gt; для модуля. Модули и их &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt;&lt;/code&gt; описаны в &lt;a href=&quot;perlfunc&quot;&gt;perlfunc&lt;/a&gt; и &lt;a href=&quot;perlmod&quot;&gt;perlmod&lt;/a&gt; . Понимание концепции модулей и того, как работает инструкция &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt;&lt;/code&gt; , важно для понимания Экспортера.</target>
        </trans-unit>
        <trans-unit id="6a95697cdde6d23d6eaf67c474daab5e6a483bb6" translate="yes" xml:space="preserve">
          <source>Perl automatically calls the &lt;code&gt;import&lt;/code&gt; method when processing a &lt;code&gt;use&lt;/code&gt; statement for a module. Modules and &lt;code&gt;use&lt;/code&gt; are documented in &lt;a href=&quot;perlfunc&quot;&gt;perlfunc&lt;/a&gt; and &lt;a href=&quot;perlmod&quot;&gt;perlmod&lt;/a&gt;. Understanding the concept of modules and how the &lt;code&gt;use&lt;/code&gt; statement operates is important to understanding the Exporter.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f61b6a6317cfa23498f15dd9d06745532cf81070" translate="yes" xml:space="preserve">
          <source>Perl automatically enables a set of special security checks, called</source>
          <target state="translated">Perl автоматически включает набор специальных проверок безопасности,называемых</target>
        </trans-unit>
        <trans-unit id="fbe832a4f97c9466dde588ba9b2da8adad2850de" translate="yes" xml:space="preserve">
          <source>Perl automatically handles most of the common ways a method might be redefined. However, there are a few ways you could change a method in a stash without the cache code noticing, in which case you need to call this method afterwards:</source>
          <target state="translated">Perl автоматически обрабатывает большинство распространенных способов переопределения метода.Однако,есть несколько способов изменить метод в тайнике,не замечая кэш кода,и в этом случае необходимо вызвать этот метод позже:</target>
        </trans-unit>
        <trans-unit id="c56019acc23d2639adf6a34824d254308e6f1860" translate="yes" xml:space="preserve">
          <source>Perl automatically loads &lt;code&gt;Errno&lt;/code&gt; the first time you use &lt;code&gt;%!&lt;/code&gt;, so you don't need an explicit &lt;code&gt;use&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="036d8f87f677f8c5718f1d28012fa559462c3777" translate="yes" xml:space="preserve">
          <source>Perl automatically provides large file support when built under 64-bit Windows.</source>
          <target state="translated">Perl автоматически обеспечивает поддержку больших файлов при сборке под 64-битной Windows.</target>
        </trans-unit>
        <trans-unit id="7a716c995ea81037d2661a333de648b734bf1c68" translate="yes" xml:space="preserve">
          <source>Perl believes that no machine ever has more than one of &lt;code&gt;change&lt;/code&gt; , &lt;code&gt;age&lt;/code&gt; , or &lt;code&gt;quota&lt;/code&gt; implemented, nor more than one of either &lt;code&gt;comment&lt;/code&gt; or &lt;code&gt;class&lt;/code&gt; . Some machines do not support &lt;code&gt;expire&lt;/code&gt; , &lt;code&gt;gecos&lt;/code&gt; , or allegedly, &lt;code&gt;passwd&lt;/code&gt; . You may call these methods no matter what machine you're on, but they return &lt;code&gt;&lt;a href=&quot;../functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; if unimplemented.</source>
          <target state="translated">Perl считает, что ни на одной машине никогда не было реализовано более одного &lt;code&gt;change&lt;/code&gt; , &lt;code&gt;age&lt;/code&gt; или &lt;code&gt;quota&lt;/code&gt; , а также более одного &lt;code&gt;comment&lt;/code&gt; или &lt;code&gt;class&lt;/code&gt; . Некоторые машины не поддерживают &lt;code&gt;expire&lt;/code&gt; , &lt;code&gt;gecos&lt;/code&gt; или предположительно &lt;code&gt;passwd&lt;/code&gt; . Вы можете вызывать эти методы независимо от того, на какой машине вы работаете, но они возвращают &lt;code&gt;&lt;a href=&quot;../functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; , если не реализованы.</target>
        </trans-unit>
        <trans-unit id="9fd89618c3b47a0e722e09957c69ce215a51cf2c" translate="yes" xml:space="preserve">
          <source>Perl believes that no machine ever has more than one of &lt;code&gt;change&lt;/code&gt;, &lt;code&gt;age&lt;/code&gt;, or &lt;code&gt;quota&lt;/code&gt; implemented, nor more than one of either &lt;code&gt;comment&lt;/code&gt; or &lt;code&gt;class&lt;/code&gt;. Some machines do not support &lt;code&gt;expire&lt;/code&gt;, &lt;code&gt;gecos&lt;/code&gt;, or allegedly, &lt;code&gt;passwd&lt;/code&gt;. You may call these methods no matter what machine you're on, but they return &lt;code&gt;undef&lt;/code&gt; if unimplemented.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5d0360d06e2a1778dd48425c09025dbdf8293f8e" translate="yes" xml:space="preserve">
          <source>Perl binary able to run this extension, load XS modules, etc...</source>
          <target state="translated">Двоичный файл Perl,способный запускать это расширение,загружать модули XS и т.д....</target>
        </trans-unit>
        <trans-unit id="cb8da21c98e2920d923d329d6f68942a153a615f" translate="yes" xml:space="preserve">
          <source>Perl binary distributions come with a</source>
          <target state="translated">Двоичные распределения на Perl поставляются с</target>
        </trans-unit>
        <trans-unit id="25b8cd5db95b73c8697ce2a24fc9a3c4624497ef" translate="yes" xml:space="preserve">
          <source>Perl binary for tasks that can be done by miniperl.</source>
          <target state="translated">Двоичный Perl для задач,которые могут быть выполнены с помощью miniperl.</target>
        </trans-unit>
        <trans-unit id="5c60e05f40789a6f58044b7f99b3ed4077f167aa" translate="yes" xml:space="preserve">
          <source>Perl binary for tasks that can be done by miniperl. If it contains spaces or other shell metacharacters, it needs to be quoted in a way that protects them, since this value is intended to be inserted in a shell command line in the Makefile. E.g.:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b72df5c4242785794c622b22864eb9d8a2e74001" translate="yes" xml:space="preserve">
          <source>Perl builds and runs on a bewildering number of platforms. Virtually all known and current Unix derivatives are supported (perl's native platform), as are other systems like VMS, DOS, OS/2, Windows, QNX, BeOS, OS X, MPE/iX and the Amiga.</source>
          <target state="translated">Perl собирается и работает на ошеломляющем количестве платформ.Поддерживаются практически все известные и текущие производные Unix (нативная платформа perl),а также другие системы,такие как VMS,DOS,OS/2,Windows,QNX,BeOS,OS X,MPE/iX и Amiga.</target>
        </trans-unit>
        <trans-unit id="20d139451b19c9903cb470dbddc56287a00a07ca" translate="yes" xml:space="preserve">
          <source>Perl by default comes with the latest supported Unicode version built-in, but the goal is to allow you to change to use any earlier one. In Perls v5.20 and v5.22, however, the earliest usable version is Unicode 5.1. Perl v5.18 and v5.24 are able to handle all earlier versions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="96b360f2cb263510b9740f1a358943c2a62edfbc" translate="yes" xml:space="preserve">
          <source>Perl by default comes with the latest supported Unicode version built-in, but the goal is to allow you to change to use any earlier one. In Perls v5.20 and v5.22, however, the earliest usable version is Unicode 5.1. Perl v5.18 is able to handle all earlier versions.</source>
          <target state="translated">Perl по умолчанию поставляется с последней поддерживаемой версией встроенного Юникода,но цель состоит в том,чтобы позволить вам изменять его для использования любой более ранней версии.Однако в Perls v5.20 и v5.22 самой ранней из поддерживаемых версий является Unicode 5.1.Perl v5.18 способен работать со всеми более ранними версиями.</target>
        </trans-unit>
        <trans-unit id="858924b099068580d5d02f65c2520871f9621191" translate="yes" xml:space="preserve">
          <source>Perl by default is very forgiving. In order to make it more robust it is recommended to start every program with the following lines:</source>
          <target state="translated">Perl по умолчанию очень прощающий.Чтобы сделать его более надежным,рекомендуется начинать каждую программу со следующих строк:</target>
        </trans-unit>
        <trans-unit id="41943c9223a2849d683a6cec44cbaf36e58b907e" translate="yes" xml:space="preserve">
          <source>Perl can be built so that it by default will try to execute</source>
          <target state="translated">Perl может быть построен так,что по умолчанию будет пытаться выполнить</target>
        </trans-unit>
        <trans-unit id="36ba407dbee2d6e43709ef0153d960c56996ecc9" translate="yes" xml:space="preserve">
          <source>Perl can be compiled on platforms that run any of three commonly used EBCDIC character sets, listed below.</source>
          <target state="translated">Perl может быть скомпилирован на платформах,которые работают с любым из трех широко используемых наборов символов EBCDIC,перечисленных ниже.</target>
        </trans-unit>
        <trans-unit id="bea19b77ce1281f9b9bf9a47baf0d79604e6dd7a" translate="yes" xml:space="preserve">
          <source>Perl can be compiled with either HP's ANSI C compiler or with gcc. The former is recommended, as not only can it compile Perl with no difficulty, but also can take advantage of features listed later that require the use of HP compiler-specific command-line flags.</source>
          <target state="translated">Perl может быть скомпилирован либо ANSI C компилятором HP,либо gcc.Первое рекомендуется,так как оно не только может скомпилировать Perl без проблем,но и может использовать возможности,перечисленные ниже,которые требуют использования флагов командной строки,специфичных для компилятора HP.</target>
        </trans-unit>
        <trans-unit id="f05f1e5361560b59743e9bd4f32b54cc023f431f" translate="yes" xml:space="preserve">
          <source>Perl can be compiled with either IBM's ANSI C compiler or with gcc. The former is recommended, as not only can it compile Perl with no difficulty, but also can take advantage of features listed later that require the use of IBM compiler-specific command-line flags.</source>
          <target state="translated">Perl может быть скомпилирован как с помощью ANSI C компилятора IBM,так и с помощью gcc.Первый вариант рекомендуется,так как он не только может скомпилировать Perl без проблем,но и может использовать возможности,перечисленные ниже,которые требуют использования флагов командной строки,специфичных для IBM-компилятора.</target>
        </trans-unit>
        <trans-unit id="19a69f0e2f064ea4c82b3309e77eb45ccd797a4c" translate="yes" xml:space="preserve">
          <source>Perl can be compiled with either IBM's ANSI C compiler or with gcc. The former is recommended, as not only it can compile Perl with no difficulty, but also can take advantage of features listed later that require the use of IBM compiler-specific command-line flags.</source>
          <target state="translated">Perl может быть скомпилирован как с помощью ANSI C компилятора IBM,так и с помощью gcc.Первое рекомендуется,так как оно не только может скомпилировать Perl без проблем,но и может использовать возможности,перечисленные ниже,которые требуют использования флагов командной строки,специфичных для IBM-компилятора.</target>
        </trans-unit>
        <trans-unit id="1eec7cebb78e4a4eae8424666c3dade6b3981bcc" translate="yes" xml:space="preserve">
          <source>Perl can be compiled with gcc from MinGW (version 3.4.5 or later) or from MinGW64 (version 4.4.3 or later). It can be downloaded here:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="751c036d6e62fec07bc2f5f4e73156154792a0fd" translate="yes" xml:space="preserve">
          <source>Perl can be compiled with gcc from MinGW release 3 and later (using gcc 3.4.5 and later). It can be downloaded here:</source>
          <target state="translated">Perl может быть скомпилирован с помощью gcc из MinGW версии 3 и более поздней (с использованием gcc 3.4.5 и более поздней).Его можно скачать здесь:</target>
        </trans-unit>
        <trans-unit id="5aad21700ba14174a334f6c9d33b139e2bf40c72" translate="yes" xml:space="preserve">
          <source>Perl can be cross-compiled using either adb or a normal ssh connection; in general, if you can connect your device to the host using a USB port, or if you don't feel like installing an sshd app on your device, you may want to use adb, although you may be forced to switch to ssh if your device is not rooted and you're unlucky -- more on that later. Alternatively, if you're cross-compiling to an emulator, you'll have to use adb.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="298c207dde281e03961c0f741436a83e917ef6d5" translate="yes" xml:space="preserve">
          <source>Perl can be run under the &quot;C&quot; locale by setting the environment variable &lt;code&gt;LC_ALL&lt;/code&gt; to &quot;C&quot;. This method is perhaps a bit more civilized than the &lt;code&gt;PERL_BADLANG&lt;/code&gt; approach, but setting &lt;code&gt;LC_ALL&lt;/code&gt; (or other locale variables) may affect other programs as well, not just Perl. In particular, external programs run from within Perl will see these changes. If you make the new settings permanent (read on), all programs you run see the changes. See &lt;a href=&quot;#ENVIRONMENT&quot;&gt;&quot;ENVIRONMENT&quot;&lt;/a&gt; for the full list of relevant environment variables and &lt;a href=&quot;#USING-LOCALES&quot;&gt;&quot;USING LOCALES&quot;&lt;/a&gt; for their effects in Perl. Effects in other programs are easily deducible. For example, the variable &lt;code&gt;LC_COLLATE&lt;/code&gt; may well affect your &lt;b&gt;sort&lt;/b&gt; program (or whatever the program that arranges &quot;records&quot; alphabetically in your system is called).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2e57623077581e01731874e47fb8c2a4b90f970b" translate="yes" xml:space="preserve">
          <source>Perl can be run under the &quot;C&quot; locale by setting the environment variable &lt;code&gt;LC_ALL&lt;/code&gt; to &quot;C&quot;. This method is perhaps a bit more civilized than the &lt;code&gt;PERL_BADLANG&lt;/code&gt; approach, but setting &lt;code&gt;LC_ALL&lt;/code&gt; (or other locale variables) may affect other programs as well, not just Perl. In particular, external programs run from within Perl will see these changes. If you make the new settings permanent (read on), all programs you run see the changes. See &lt;a href=&quot;#ENVIRONMENT&quot;&gt;ENVIRONMENT&lt;/a&gt; for the full list of relevant environment variables and &lt;a href=&quot;#USING-LOCALES&quot;&gt;USING LOCALES&lt;/a&gt; for their effects in Perl. Effects in other programs are easily deducible. For example, the variable &lt;code&gt;LC_COLLATE&lt;/code&gt; may well affect your &lt;b&gt;sort&lt;/b&gt; program (or whatever the program that arranges &quot;records&quot; alphabetically in your system is called).</source>
          <target state="translated">Perl можно запустить в локали &amp;laquo;C&amp;raquo;, установив для переменной среды &lt;code&gt;LC_ALL&lt;/code&gt; значение &amp;laquo;C&amp;raquo;. Этот метод, возможно, немного более цивилизован, чем подход &lt;code&gt;PERL_BADLANG&lt;/code&gt; , но установка &lt;code&gt;LC_ALL&lt;/code&gt; (или других переменных локали) может повлиять и на другие программы, а не только на Perl. В частности, эти изменения заметят внешние программы, запущенные из Perl. Если вы сделаете новые настройки постоянными (читайте дальше), все программы, которые вы запускаете, увидят изменения. См. &lt;a href=&quot;#ENVIRONMENT&quot;&gt;ENVIRONMENT&lt;/a&gt; для получения полного списка соответствующих переменных среды и &lt;a href=&quot;#USING-LOCALES&quot;&gt;USING LOCALES&lt;/a&gt; для ознакомления с их действием в Perl. Эффекты в других программах легко вывести. Например, переменная &lt;code&gt;LC_COLLATE&lt;/code&gt; может повлиять на вашу &lt;b&gt;сортировку.&lt;/b&gt; программа (или как там называется программа, которая размещает &amp;laquo;записи&amp;raquo; в алфавитном порядке в вашей системе).</target>
        </trans-unit>
        <trans-unit id="afea4028a165b75f73beb84894121ff0308d01df" translate="yes" xml:space="preserve">
          <source>Perl can be used for almost any coding problem, even ones which require integrating specialist C code for extra speed. As with any tool it can be used well or badly. Perl has many strengths, and a few weaknesses, precisely which areas are good and bad is often a personal choice.</source>
          <target state="translated">Perl можно использовать практически для любой проблемы кодирования,даже для тех,которые требуют интеграции специализированного кода на C для дополнительной скорости.Как и любой другой инструмент,он может быть использован как хорошо,так и плохо.Perl имеет много сильных сторон и несколько слабых сторон,и то,какие именно области являются хорошими,а какие плохими,часто является личным выбором.</target>
        </trans-unit>
        <trans-unit id="9f84aec4fa7ef06751c778c8e8173ffe00dcd629" translate="yes" xml:space="preserve">
          <source>Perl can compile and run under EBCDIC platforms. See &lt;a href=&quot;perlebcdic&quot;&gt;perlebcdic&lt;/a&gt;. This is transparent for the most part, but because the character sets differ, you shouldn't use numeric (decimal, octal, nor hex) constants to refer to characters. You can safely say &lt;code&gt;'A'&lt;/code&gt; , but not &lt;code&gt;0x41&lt;/code&gt; . You can safely say &lt;code&gt;'\n'&lt;/code&gt; , but not &lt;code&gt;\012&lt;/code&gt; . However, you can use macros defined in</source>
          <target state="translated">Perl может компилироваться и запускаться на платформах EBCDIC. См. &lt;a href=&quot;perlebcdic&quot;&gt;Perlebcdic&lt;/a&gt; . По большей части это прозрачно, но поскольку наборы символов различаются, вы не должны использовать числовые (десятичные, восьмеричные или шестнадцатеричные) константы для обозначения символов. Вы можете спокойно сказать &lt;code&gt;'A'&lt;/code&gt; , но не &lt;code&gt;0x41&lt;/code&gt; . Вы можете спокойно произносить &lt;code&gt;'\n'&lt;/code&gt; , но не &lt;code&gt;\012&lt;/code&gt; . Однако вы можете использовать макросы, определенные в</target>
        </trans-unit>
        <trans-unit id="89da686bd0b150df7259283a72feb17be88ef847" translate="yes" xml:space="preserve">
          <source>Perl can compile and run under EBCDIC platforms. See &lt;a href=&quot;perlebcdic&quot;&gt;perlebcdic&lt;/a&gt;. This is transparent for the most part, but because the character sets differ, you shouldn't use numeric (decimal, octal, nor hex) constants to refer to characters. You can safely say &lt;code&gt;'A'&lt;/code&gt;, but not &lt;code&gt;0x41&lt;/code&gt;. You can safely say &lt;code&gt;'\n'&lt;/code&gt;, but not &lt;code&gt;\012&lt;/code&gt;. However, you can use macros defined in</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fa07386a80b47ab8df8b6dbe1e6a41311efb8910" translate="yes" xml:space="preserve">
          <source>Perl can internally represent numbers in 3 different ways: as native integers, as native floating point numbers, and as decimal strings. Decimal strings may have an exponential notation part, as in &lt;code&gt;&quot;12.34e-56&quot;&lt;/code&gt; .</source>
          <target state="translated">Perl может внутренне представлять числа тремя разными способами: как собственные целые числа, как собственные числа с плавающей запятой и как десятичные строки. Десятичные строки могут иметь экспоненциальную часть записи, как в &lt;code&gt;&quot;12.34e-56&quot;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="91d8093cdc26010bc75cbe7ac13c80dda1139d5f" translate="yes" xml:space="preserve">
          <source>Perl can internally represent numbers in 3 different ways: as native integers, as native floating point numbers, and as decimal strings. Decimal strings may have an exponential notation part, as in &lt;code&gt;&quot;12.34e-56&quot;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="05cb1fb37d34785f635f75844d77033b80fc24ef" translate="yes" xml:space="preserve">
          <source>Perl can process line directives, much like the C preprocessor. Using this, one can control Perl's idea of filenames and line numbers in error or warning messages (especially for strings that are processed with &lt;code&gt;&lt;a href=&quot;functions/eval&quot;&gt;eval()&lt;/a&gt;&lt;/code&gt;). The syntax for this mechanism is almost the same as for most C preprocessors: it matches the regular expression</source>
          <target state="translated">Perl может обрабатывать строковые директивы так же, как препроцессор C. Используя это, можно контролировать представление Perl об именах файлов и номерах строк в сообщениях об ошибках или предупреждениях (особенно для строк, которые обрабатываются с помощью &lt;code&gt;&lt;a href=&quot;functions/eval&quot;&gt;eval()&lt;/a&gt;&lt;/code&gt; ). Синтаксис этого механизма почти такой же, как и у большинства препроцессоров C: он соответствует регулярному выражению</target>
        </trans-unit>
        <trans-unit id="5dbe3afd1eb59bb8a6efe4b4b5b6385c4ed178c9" translate="yes" xml:space="preserve">
          <source>Perl can process line directives, much like the C preprocessor. Using this, one can control Perl's idea of filenames and line numbers in error or warning messages (especially for strings that are processed with &lt;code&gt;eval()&lt;/code&gt;). The syntax for this mechanism is almost the same as for most C preprocessors: it matches the regular expression</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0c1175d291fc9d1138f03be93ce22b47fc929ba6" translate="yes" xml:space="preserve">
          <source>Perl can provide access to all non-provisional Unicode character properties, though not all are enabled by default. The omitted ones are the Unihan properties (accessible via the CPAN module &lt;a href=&quot;Unicode::Unihan&quot;&gt;Unicode::Unihan&lt;/a&gt;) and certain deprecated or Unicode-internal properties. (An installation may choose to recompile Perl's tables to change this. See &lt;a href=&quot;#Unicode-character-properties-that-are-NOT-accepted-by-Perl&quot;&gt;&quot;Unicode character properties that are NOT accepted by Perl&quot;&lt;/a&gt;.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="87b4bc522cc9bacefe7588c2849722683c7ccc0c" translate="yes" xml:space="preserve">
          <source>Perl can provide access to all non-provisional Unicode character properties, though not all are enabled by default. The omitted ones are the Unihan properties (accessible via the CPAN module &lt;a href=&quot;http://search.cpan.org/perldoc/Unicode::Unihan&quot;&gt;Unicode::Unihan&lt;/a&gt;) and certain deprecated or Unicode-internal properties. (An installation may choose to recompile Perl's tables to change this. See &lt;a href=&quot;#Unicode-character-properties-that-are-NOT-accepted-by-Perl&quot;&gt;Unicode character properties that are NOT accepted by Perl&lt;/a&gt;.)</source>
          <target state="translated">Perl может предоставить доступ ко всем условным свойствам символов Юникода, хотя не все из них включены по умолчанию. Не указаны свойства Unihan (доступные через модуль CPAN &lt;a href=&quot;http://search.cpan.org/perldoc/Unicode::Unihan&quot;&gt;Unicode :: Unihan&lt;/a&gt; ) и некоторые устаревшие или внутренние свойства Unicode. (При установке может быть выбрана перекомпиляция таблиц Perl, чтобы изменить это. См. &lt;a href=&quot;#Unicode-character-properties-that-are-NOT-accepted-by-Perl&quot;&gt;Свойства символов Unicode, которые НЕ принимаются Perl&lt;/a&gt; .)</target>
        </trans-unit>
        <trans-unit id="b9d3bae2bf6cbe36ec81823e26589a3e2497f6c1" translate="yes" xml:space="preserve">
          <source>Perl cannot be compiled with threading support ATM.</source>
          <target state="translated">Perl не может быть скомпилирован с поддержкой потоков ATM.</target>
        </trans-unit>
        <trans-unit id="5aa9ff89c6dfca6cc410567a511ce06ca99ab635" translate="yes" xml:space="preserve">
          <source>Perl cannot protect you from all possibilities shown in the examples--there is no substitute for your own vigilance--but, when &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; locale&lt;/code&gt; is in effect, Perl uses the tainting mechanism (see &lt;a href=&quot;perlsec&quot;&gt;perlsec&lt;/a&gt;) to mark string results that become locale-dependent, and which may be untrustworthy in consequence. Here is a summary of the tainting behavior of operators and functions that may be affected by the locale:</source>
          <target state="translated">Perl не может защитить вас от всех возможностей , представленных в примерах - нет никакой замены для вашей собственной бдительности - но, когда &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; locale&lt;/code&gt; в сущности, Perl использует механизм загрязненности (см &lt;a href=&quot;perlsec&quot;&gt;perlsec&lt;/a&gt; ) к результатам строковых меток , которые становятся Локальнозависимым , и, как следствие, может оказаться ненадежным. Вот краткое описание заражения операторов и функций, на которые может повлиять языковой стандарт:</target>
        </trans-unit>
        <trans-unit id="a594f813141415e6aca23ee60e047f5b3f5ab72f" translate="yes" xml:space="preserve">
          <source>Perl cannot protect you from all possibilities shown in the examples--there is no substitute for your own vigilance--but, when &lt;code&gt;use locale&lt;/code&gt; is in effect, Perl uses the tainting mechanism (see &lt;a href=&quot;perlsec&quot;&gt;perlsec&lt;/a&gt;) to mark string results that become locale-dependent, and which may be untrustworthy in consequence. Here is a summary of the tainting behavior of operators and functions that may be affected by the locale:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d5f3aa702381872bb34697babcd6d91dd23feeed" translate="yes" xml:space="preserve">
          <source>Perl code is always compiled into an internal format before execution.</source>
          <target state="translated">Perl-код всегда перед выполнением компилируется во внутренний формат.</target>
        </trans-unit>
        <trans-unit id="cbb579bb2906840ac41b443c221a57b4ff511c5a" translate="yes" xml:space="preserve">
          <source>Perl code should convert to either call &lt;a href=&quot;perlapi#Perl_setlocale&quot;&gt;&lt;code&gt;Perl_setlocale&lt;/code&gt;&lt;/a&gt; (which is a drop-in for the system &lt;code&gt;setlocale&lt;/code&gt;) or use the methods given in &lt;a href=&quot;perlcall&quot;&gt;perlcall&lt;/a&gt; to call &lt;a href=&quot;posix#setlocale&quot;&gt;&lt;code&gt;POSIX::setlocale&lt;/code&gt;&lt;/a&gt;. Either one will transparently properly handle all cases of single- vs multi-thread, POSIX 2008-supported or not.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c5cce9b9678a00b1fe024a9af1e795642a5bcb9c" translate="yes" xml:space="preserve">
          <source>Perl comes with a wide selection of builtin functions. Some of the ones we've already seen include &lt;code&gt;&lt;a href=&quot;functions/print&quot;&gt;print&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/sort&quot;&gt;sort&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;functions/reverse&quot;&gt;reverse&lt;/a&gt;&lt;/code&gt;. A list of them is given at the start of &lt;a href=&quot;perlfunc&quot;&gt;perlfunc&lt;/a&gt; and you can easily read about any given function by using &lt;code&gt;perldoc -f &lt;i&gt;functionname&lt;/i&gt;&lt;/code&gt;.</source>
          <target state="translated">Perl поставляется с широким набором встроенных функций. Некоторые из тех, что мы уже видели, включают &lt;code&gt;&lt;a href=&quot;functions/print&quot;&gt;print&lt;/a&gt;&lt;/code&gt; , &lt;code&gt;&lt;a href=&quot;functions/sort&quot;&gt;sort&lt;/a&gt;&lt;/code&gt; и &lt;code&gt;&lt;a href=&quot;functions/reverse&quot;&gt;reverse&lt;/a&gt;&lt;/code&gt; . &lt;a href=&quot;perlfunc&quot;&gt;Их&lt;/a&gt; список приведен в начале perlfunc, и вы можете легко прочитать о любой данной функции, используя &lt;code&gt;perldoc -f &lt;i&gt;functionname&lt;/i&gt;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="79ae445a5a6eedaef6fa6773c44a0f926e1cd176" translate="yes" xml:space="preserve">
          <source>Perl comes with a wide selection of builtin functions. Some of the ones we've already seen include &lt;code&gt;print&lt;/code&gt;, &lt;code&gt;sort&lt;/code&gt; and &lt;code&gt;reverse&lt;/code&gt;. A list of them is given at the start of &lt;a href=&quot;perlfunc&quot;&gt;perlfunc&lt;/a&gt; and you can easily read about any given function by using &lt;code&gt;perldoc -f &lt;i&gt;functionname&lt;/i&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d575f0416db18e1fc564b29cf8cc390222ecf415" translate="yes" xml:space="preserve">
          <source>Perl comes with an interactive debugger, which you can start with the &lt;code&gt;-d&lt;/code&gt; switch. It's fully explained in &lt;a href=&quot;perldebug&quot;&gt;perldebug&lt;/a&gt;.</source>
          <target state="translated">Perl поставляется с интерактивным отладчиком, который можно запустить с помощью переключателя &lt;code&gt;-d&lt;/code&gt; . Это полностью объяснено в &lt;a href=&quot;perldebug&quot;&gt;perldebug&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="641c8779114365eacf0b514d71b892f3c88f6444" translate="yes" xml:space="preserve">
          <source>Perl compiler backend to produce perl code</source>
          <target state="translated">Бэкэнд компилятора Perl для создания perl кода</target>
        </trans-unit>
        <trans-unit id="3d5234796bebd4a0240f58d33b5d22994612e499" translate="yes" xml:space="preserve">
          <source>Perl contains internal support for reporting its own memory usage, but this is a fairly advanced concept that requires some understanding of how memory allocation works. See &lt;a href=&quot;perldebguts#Debugging-Perl-Memory-Usage&quot;&gt;&quot;Debugging Perl Memory Usage&quot; in perldebguts&lt;/a&gt; for the details.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a425209baf3b199ee00ab768f1943ede83ed4ff4" translate="yes" xml:space="preserve">
          <source>Perl contains internal support for reporting its own memory usage, but this is a fairly advanced concept that requires some understanding of how memory allocation works. See &lt;a href=&quot;perldebguts#Debugging-Perl-Memory-Usage&quot;&gt;Debugging Perl Memory Usage in perldebguts&lt;/a&gt; for the details.</source>
          <target state="translated">Perl содержит внутреннюю поддержку для сообщения об использовании собственной памяти, но это довольно продвинутая концепция, требующая некоторого понимания того, как работает распределение памяти. См. Подробности в разделе &amp;laquo; &lt;a href=&quot;perldebguts#Debugging-Perl-Memory-Usage&quot;&gt;Отладка использования памяти Perl в perldebguts&amp;raquo;&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="dd31498cb274469b540952840b7aa19174e08b34" translate="yes" xml:space="preserve">
          <source>Perl continues to support the old non UTF-8 locales as well. There are currently no UTF-8 locales for EBCDIC platforms.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a29ee67698d8ff496114e40d0f60aa708da987ff" translate="yes" xml:space="preserve">
          <source>Perl continues to warn (using the warning category &lt;code&gt;&quot;nonchar&quot;&lt;/code&gt; , which is a sub-category of &lt;code&gt;&quot;utf8&quot;&lt;/code&gt; ) if an attempt is made to output noncharacters.</source>
          <target state="translated">Perl продолжает предупреждать (используя категорию предупреждений &lt;code&gt;&quot;nonchar&quot;&lt;/code&gt; , которая является подкатегорией &lt;code&gt;&quot;utf8&quot;&lt;/code&gt; ), если предпринимается попытка вывести символы, отличные от символов.</target>
        </trans-unit>
        <trans-unit id="9cb01f485dfc78123b0a04671230b175342a0686" translate="yes" xml:space="preserve">
          <source>Perl continues to warn (using the warning category &lt;code&gt;&quot;nonchar&quot;&lt;/code&gt;, which is a sub-category of &lt;code&gt;&quot;utf8&quot;&lt;/code&gt;) if an attempt is made to output noncharacters.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f9d488e88c0eb0084402cd1c0721ceebc56fc521" translate="yes" xml:space="preserve">
          <source>Perl core development team.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="baa05b026a869001e1e5be6e67df2e5d03445c53" translate="yes" xml:space="preserve">
          <source>Perl currently only supports single-byte locales for &lt;code&gt;LC_COLLATE&lt;/code&gt; . This means that a UTF-8 locale likely will just give you machine-native ordering. Use &lt;a href=&quot;unicode/collate&quot;&gt;Unicode::Collate&lt;/a&gt; for the full implementation of the Unicode Collation Algorithm.</source>
          <target state="translated">Perl в настоящее время поддерживает только однобайтовые &lt;code&gt;LC_COLLATE&lt;/code&gt; для LC_COLLATE . Это означает, что локаль UTF-8, скорее всего, просто предоставит вам машинный заказ. Используйте &lt;a href=&quot;unicode/collate&quot;&gt;Unicode :: Collate&lt;/a&gt; для полной реализации алгоритма сортировки Unicode.</target>
        </trans-unit>
        <trans-unit id="77cf5a91724851c2026eb0ed52027faf2ff9d8f3" translate="yes" xml:space="preserve">
          <source>Perl debug information is frequently required not just by debuggers, but also by modules that need some &quot;special&quot; information to do their job properly, like profilers.</source>
          <target state="translated">Отладочная информация на Perl часто требуется не только отладчиками,но и модулями,которым нужна некоторая &quot;специальная&quot; информация для правильного выполнения своей работы,например,профайлерами.</target>
        </trans-unit>
        <trans-unit id="edcd0b1168988fe6213df824f5ad91c7a66c6c43" translate="yes" xml:space="preserve">
          <source>Perl defines the following zero-width assertions:</source>
          <target state="translated">Perl определяет следующие утверждения нулевой ширины:</target>
        </trans-unit>
        <trans-unit id="6b26390b798af49773d52f4620dbbc3aff54133e" translate="yes" xml:space="preserve">
          <source>Perl deliberately randomizes hash order for security purposes on both ASCII and EBCDIC platforms.</source>
          <target state="translated">Perl сознательно рандомизирует порядок хэша в целях безопасности как на ASCII,так и на EBCDIC платформах.</target>
        </trans-unit>
        <trans-unit id="b360e4dc6087d3b16edb381fbc0c1f20ea026de5" translate="yes" xml:space="preserve">
          <source>Perl derives from the ubiquitous C programming language and to a lesser extent from sed, awk, the Unix shell, and many other tools and languages.</source>
          <target state="translated">Perl происходит от вездесущего языка программирования C и в меньшей степени от sed,awk,оболочки Unix и многих других инструментов и языков.</target>
        </trans-unit>
        <trans-unit id="171910ec91b3b6b1e9deeb50ab9dfa78a36b3ec1" translate="yes" xml:space="preserve">
          <source>Perl does its own &lt;a href=&quot;#sprintf-FORMAT%2C-LIST&quot;&gt;&lt;code&gt;sprintf&lt;/code&gt;&lt;/a&gt; formatting: it emulates the C function &lt;a href=&quot;http://man.he.net/man3/sprintf&quot;&gt;sprintf(3)&lt;/a&gt;, but doesn't use it except for floating-point numbers, and even then only standard modifiers are allowed. Non-standard extensions in your local &lt;a href=&quot;http://man.he.net/man3/sprintf&quot;&gt;sprintf(3)&lt;/a&gt; are therefore unavailable from Perl.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="82ed6e041cbd4aae6a032a9f05ea11dde0c68044" translate="yes" xml:space="preserve">
          <source>Perl does its own &lt;code&gt;&lt;a href=&quot;functions/sprintf&quot;&gt;sprintf&lt;/a&gt;&lt;/code&gt; formatting: it emulates the C function sprintf(3), but doesn't use it except for floating-point numbers, and even then only standard modifiers are allowed. Non-standard extensions in your local sprintf(3) are therefore unavailable from Perl.</source>
          <target state="translated">Perl выполняет собственное форматирование &lt;code&gt;&lt;a href=&quot;functions/sprintf&quot;&gt;sprintf&lt;/a&gt;&lt;/code&gt; : он эмулирует C-функцию sprintf (3), но не использует ее, за исключением чисел с плавающей запятой, и даже тогда разрешены только стандартные модификаторы. Поэтому нестандартные расширения в вашем локальном sprintf (3) недоступны в Perl.</target>
        </trans-unit>
        <trans-unit id="9fd3bbafbe5f224f645e29f633eba572a0b47a6b" translate="yes" xml:space="preserve">
          <source>Perl does its own &lt;code&gt;&lt;a href=&quot;sprintf&quot;&gt;sprintf&lt;/a&gt;&lt;/code&gt; formatting: it emulates the C function sprintf(3), but doesn't use it except for floating-point numbers, and even then only standard modifiers are allowed. Non-standard extensions in your local sprintf(3) are therefore unavailable from Perl.</source>
          <target state="translated">Perl выполняет собственное форматирование &lt;code&gt;&lt;a href=&quot;sprintf&quot;&gt;sprintf&lt;/a&gt;&lt;/code&gt; : он эмулирует C-функцию sprintf (3), но не использует ее, за исключением чисел с плавающей запятой, и даже тогда разрешены только стандартные модификаторы. Поэтому нестандартные расширения в вашем локальном sprintf (3) недоступны в Perl.</target>
        </trans-unit>
        <trans-unit id="a4d0575e168bcb93baf91092d083b3f45edc7784" translate="yes" xml:space="preserve">
          <source>Perl does not allow overloading of ranges, so you can neither safely use ranges with bigint endpoints, nor is the iterator variable a bigint.</source>
          <target state="translated">Perl не допускает перегрузки диапазонов,поэтому вы не можете безопасно использовать диапазоны с конечными точками bigint,как и переменная итератора bigint.</target>
        </trans-unit>
        <trans-unit id="c115815d6de8f54c97b95bbf1feacf608d2cdd8a" translate="yes" xml:space="preserve">
          <source>Perl does not call the shell to expand wild cards when you pass &lt;code&gt;&lt;a href=&quot;functions/system&quot;&gt;system&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;functions/exec&quot;&gt;exec&lt;/a&gt;&lt;/code&gt; explicit parameter lists instead of strings with possible shell wildcards in them. Unfortunately, the &lt;code&gt;&lt;a href=&quot;functions/open&quot;&gt;open&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/glob&quot;&gt;glob&lt;/a&gt;&lt;/code&gt;, and backtick functions provide no such alternate calling convention, so more subterfuge will be required.</source>
          <target state="translated">Perl не вызывает оболочку для раскрытия подстановочных знаков, когда вы передаете явные списки параметров &lt;code&gt;&lt;a href=&quot;functions/system&quot;&gt;system&lt;/a&gt;&lt;/code&gt; и &lt;code&gt;&lt;a href=&quot;functions/exec&quot;&gt;exec&lt;/a&gt;&lt;/code&gt; вместо строк с возможными подстановочными знаками оболочки в них. К сожалению, функции &lt;code&gt;&lt;a href=&quot;functions/open&quot;&gt;open&lt;/a&gt;&lt;/code&gt; , &lt;code&gt;&lt;a href=&quot;functions/glob&quot;&gt;glob&lt;/a&gt;&lt;/code&gt; и backtick не предоставляют такого альтернативного соглашения о вызовах, поэтому потребуется больше уловок.</target>
        </trans-unit>
        <trans-unit id="8b58eb8904f65d9a83df8472fec3b9959cc0c48d" translate="yes" xml:space="preserve">
          <source>Perl does not call the shell to expand wild cards when you pass &lt;code&gt;system&lt;/code&gt; and &lt;code&gt;exec&lt;/code&gt; explicit parameter lists instead of strings with possible shell wildcards in them. Unfortunately, the &lt;code&gt;open&lt;/code&gt;, &lt;code&gt;glob&lt;/code&gt;, and backtick functions provide no such alternate calling convention, so more subterfuge will be required.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="acf14eaf9fdbdb615c0b9a213270f3740bd4a2b7" translate="yes" xml:space="preserve">
          <source>Perl does not care about file systems, but the perl library contains many files with long names, so to install it intact one needs a file system which supports long file names.</source>
          <target state="translated">Perl не заботится о файловых системах,но библиотека perl содержит много файлов с длинными именами,поэтому для того,чтобы установить ее нетронутой,нужна файловая система,поддерживающая длинные имена файлов.</target>
        </trans-unit>
        <trans-unit id="5a30d3ce357d2bad0edd8f956d77f82fd680b527" translate="yes" xml:space="preserve">
          <source>Perl does not depend on the registry, but it can look up certain default values if you choose to put them there unless disabled at build time with USE_NO_REGISTRY. On Perl process start Perl checks if &lt;code&gt;HKEY_CURRENT_USER\Software\Perl&lt;/code&gt; and &lt;code&gt;HKEY_LOCAL_MACHINE\Software\Perl&lt;/code&gt; exist. If the keys exists, they will be checked for remainder of the Perl process's run life for certain entries. Entries in &lt;code&gt;HKEY_CURRENT_USER\Software\Perl&lt;/code&gt; override entries in &lt;code&gt;HKEY_LOCAL_MACHINE\Software\Perl&lt;/code&gt;. One or more of the following entries (of type REG_SZ or REG_EXPAND_SZ) may be set in the keys:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5354348a14ac18fad5dfd9ae6dc9f4e8955fd5e4" translate="yes" xml:space="preserve">
          <source>Perl does not depend on the registry, but it can look up certain default values if you choose to put them there. Perl attempts to read entries from &lt;code&gt;HKEY_CURRENT_USER\Software\Perl&lt;/code&gt; and &lt;code&gt;HKEY_LOCAL_MACHINE\Software\Perl&lt;/code&gt; . Entries in the former override entries in the latter. One or more of the following entries (of type REG_SZ or REG_EXPAND_SZ) may be set:</source>
          <target state="translated">Perl не зависит от реестра, но может искать определенные значения по умолчанию, если вы решите поместить их туда. Perl пытается читать записи из &lt;code&gt;HKEY_CURRENT_USER\Software\Perl&lt;/code&gt; и &lt;code&gt;HKEY_LOCAL_MACHINE\Software\Perl&lt;/code&gt; . Записи в первом случае имеют приоритет над записями во втором. Могут быть установлены одна или несколько из следующих записей (типа REG_SZ или REG_EXPAND_SZ):</target>
        </trans-unit>
        <trans-unit id="e6697dea8bad1c38bf0eecc9764ad8eaf5ace311" translate="yes" xml:space="preserve">
          <source>Perl does not enforce private and public parts of its modules as you may have been used to in other languages like C++, Ada, or Modula-17. Perl doesn't have an infatuation with enforced privacy. It would prefer that you stayed out of its living room because you weren't invited, not because it has a shotgun.</source>
          <target state="translated">Perl не использует частные и публичные части своих модулей,к которым вы,возможно,привыкли в других языках,таких как C++,Ada или Modula-17.Perl не увлекается принудительной конфиденциальностью.Он предпочитает,чтобы вы держались подальше от его гостиной,потому что вас не пригласили,а не потому что у него есть дробовик.</target>
        </trans-unit>
        <trans-unit id="7376046122227141976ff6a43223937f5fa71800" translate="yes" xml:space="preserve">
          <source>Perl does not expand &lt;code&gt;~&lt;/code&gt; in filenames, which is good, since some folks use it for their backup files:</source>
          <target state="translated">Perl не расширяет &lt;code&gt;~&lt;/code&gt; в именах файлов, и это хорошо, поскольку некоторые люди используют его для своих файлов резервных копий:</target>
        </trans-unit>
        <trans-unit id="5b47de2bb8098559e3bf2dcabce87f213a6eb4f0" translate="yes" xml:space="preserve">
          <source>Perl does not have any built-in way to express roles. In the past, people just bit the bullet and used multiple inheritance. Nowadays, there are several good choices on CPAN for using roles.</source>
          <target state="translated">Perl не имеет встроенного способа выражения ролей.В прошлом люди просто кусали пулю и использовали множественное наследование.В настоящее время есть несколько хороших вариантов CPAN для использования ролей.</target>
        </trans-unit>
        <trans-unit id="eea568e6b9c913375e5a754c242df8539876547c" translate="yes" xml:space="preserve">
          <source>Perl does not provide any special syntax for class definitions. A package is simply a namespace containing variables and subroutines. The only difference is that in a class, the subroutines may expect a reference to an object or the name of a class as the first argument. This is purely a matter of convention, so a class may contain both methods and subroutines which</source>
          <target state="translated">Perl не предоставляет никакого специального синтаксиса для определений классов.Пакет-это просто пространство имен,содержащее переменные и подпрограммы.Единственное отличие состоит в том,что в классе в качестве первого аргумента подпрограмм можно ожидать ссылку на объект или имя класса.Это чисто условно,поэтому класс может содержать как методы,так и подпрограммы,которые</target>
        </trans-unit>
        <trans-unit id="c5c3b122d3c32f38c2b6df0053286a38a52964b9" translate="yes" xml:space="preserve">
          <source>Perl does not provide any special syntax for defining a method. A method is simply a regular subroutine, and is declared with &lt;code&gt;&lt;a href=&quot;functions/sub&quot;&gt;sub&lt;/a&gt;&lt;/code&gt;. What makes a method special is that it expects to receive either an object or a class name as its first argument.</source>
          <target state="translated">Perl не предоставляет никакого специального синтаксиса для определения метода. Метод - это обычная подпрограмма, объявленная с помощью &lt;code&gt;&lt;a href=&quot;functions/sub&quot;&gt;sub&lt;/a&gt;&lt;/code&gt; . Особенность метода заключается в том, что он ожидает получить в качестве первого аргумента либо объект, либо имя класса.</target>
        </trans-unit>
        <trans-unit id="0947ef57e8f5b7f263717d72ae86b49dba67c724" translate="yes" xml:space="preserve">
          <source>Perl does not provide any special syntax for defining a method. A method is simply a regular subroutine, and is declared with &lt;code&gt;sub&lt;/code&gt;. What makes a method special is that it expects to receive either an object or a class name as its first argument.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="66c91b8b39ed83c72047110950399f56a4745108" translate="yes" xml:space="preserve">
          <source>Perl doesn't match multiple characters in a bracketed character class unless the character that maps to them is explicitly mentioned, and it doesn't match them at all if the character class is inverted, which otherwise could be highly confusing. See &lt;a href=&quot;perlrecharclass#Bracketed-Character-Classes&quot;&gt;&quot;Bracketed Character Classes&quot; in perlrecharclass&lt;/a&gt;, and &lt;a href=&quot;perlrecharclass#Negation&quot;&gt;&quot;Negation&quot; in perlrecharclass&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cedf75e55d51d5b15900a202031f864d4002fc15" translate="yes" xml:space="preserve">
          <source>Perl doesn't match multiple characters in a bracketed character class unless the character that maps to them is explicitly mentioned, and it doesn't match them at all if the character class is inverted, which otherwise could be highly confusing. See &lt;a href=&quot;perlrecharclass#Bracketed-Character-Classes&quot;&gt;Bracketed Character Classes in perlrecharclass&lt;/a&gt;, and &lt;a href=&quot;perlrecharclass#Negation&quot;&gt;Negation in perlrecharclass&lt;/a&gt;.</source>
          <target state="translated">Perl не соответствует нескольким символам в классе символов в квадратных скобках, если символ, который им сопоставляется, явно не упомянут, и он не соответствует им вообще, если класс символов инвертирован, что в противном случае могло бы сильно сбивать с толку. См. &lt;a href=&quot;perlrecharclass#Bracketed-Character-Classes&quot;&gt;Разделы Классы символов в квадратных скобках в perlrecharclass&lt;/a&gt; и &lt;a href=&quot;perlrecharclass#Negation&quot;&gt;Отрицание в perlrecharclass&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="160ee861b96d9abcad026bc93515a6480468d14a" translate="yes" xml:space="preserve">
          <source>Perl doesn't officially have a no-op operator, but the bare constants &lt;code&gt;0&lt;/code&gt; and &lt;code&gt;1&lt;/code&gt; are special-cased not to produce a warning in void context, so you can for example safely do</source>
          <target state="translated">Perl официально не имеет оператора no-op, но голые константы &lt;code&gt;0&lt;/code&gt; и &lt;code&gt;1&lt;/code&gt; имеют специальный корпус, чтобы не выдавать предупреждение в пустом контексте, поэтому вы можете, например, безопасно сделать</target>
        </trans-unit>
        <trans-unit id="ee11bfd628d5bc290b395480aaa995c735fee62a" translate="yes" xml:space="preserve">
          <source>Perl doesn't understand &lt;code&gt;Inf&lt;/code&gt; and &lt;code&gt;NaN&lt;/code&gt; as numeric literals, but you can have them as strings, and Perl will convert them as needed: &quot;Inf&quot; + 1. (You can, however, import them from the POSIX extension; &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; POSIX qw(Inf NaN);&lt;/code&gt; and then use them as literals.)</source>
          <target state="translated">Perl не понимает &lt;code&gt;Inf&lt;/code&gt; и &lt;code&gt;NaN&lt;/code&gt; как числовые литералы, но вы можете иметь их как строки, и Perl преобразует их по мере необходимости: &amp;laquo;Inf&amp;raquo; + 1. (Однако вы можете импортировать их из расширения POSIX; &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; POSIX qw(Inf NaN);&lt;/code&gt; а затем использовать их как литералы.)</target>
        </trans-unit>
        <trans-unit id="ec5da9f5482b92ac03cf293065833b5b8af6f55e" translate="yes" xml:space="preserve">
          <source>Perl doesn't understand &lt;code&gt;Inf&lt;/code&gt; and &lt;code&gt;NaN&lt;/code&gt; as numeric literals, but you can have them as strings, and Perl will convert them as needed: &quot;Inf&quot; + 1. (You can, however, import them from the POSIX extension; &lt;code&gt;use POSIX qw(Inf NaN);&lt;/code&gt; and then use them as literals.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f06c7777ec6a9cec60c6bbba96236c8c49e10f30" translate="yes" xml:space="preserve">
          <source>Perl enables DECC$EFS_CASE_PRESERVE and DECC$ARGV_PARSE_STYLE by default. Note that the latter only takes effect when extended parse is set in the process in which Perl is running. When these features are explicitly disabled in the environment or the CRTL does not support them, Perl follows the traditional CRTL behavior of downcasing command-line arguments and returning file specifications in lower case only.</source>
          <target state="translated">Perl по умолчанию включает DECC$EFS_CASE_PRESERVE и DECC$ARGV_PARSE_STYLE.Обратите внимание,что последнее вступает в силу только в том случае,если в процессе,в котором запущен Perl,задан расширенный синтаксический анализ.Когда эти функции явно отключены в среде или CRTL не поддерживает их,Perl следует традиционному CRTL поведению,заключающемуся в понижении аргументов командной строки и возврате спецификаций файлов только в нижнем регистре.</target>
        </trans-unit>
        <trans-unit id="9a7ffa77beb4b5bfb6e9cd592ffc3d63fefd5d7f" translate="yes" xml:space="preserve">
          <source>Perl environment problems</source>
          <target state="translated">Проблемы окружающей среды Perl</target>
        </trans-unit>
        <trans-unit id="efd321f1d642a6164aeb6c6061ba19e8d5553328" translate="yes" xml:space="preserve">
          <source>Perl equivalent: &lt;code&gt;&lt;a href=&quot;functions/exists&quot;&gt;exists($myarray[$key])&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">Эквивалент Perl: &lt;code&gt;&lt;a href=&quot;functions/exists&quot;&gt;exists($myarray[$key])&lt;/a&gt;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="1023174861c373cd70c764cd28a1ffe52c362de1" translate="yes" xml:space="preserve">
          <source>Perl equivalent: &lt;code&gt;&lt;a href=&quot;functions/my&quot;&gt;my&lt;/a&gt; @array;&lt;/code&gt; .</source>
          <target state="translated">Эквивалент Perl: &lt;code&gt;&lt;a href=&quot;functions/my&quot;&gt;my&lt;/a&gt; @array;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="a1efb4e8b7d1884210a677a24eedc3aaa4097d90" translate="yes" xml:space="preserve">
          <source>Perl equivalent: &lt;code&gt;&lt;a href=&quot;functions/my&quot;&gt;my&lt;/a&gt; @new_array = ($scalar1, $scalar2, $scalar3...);&lt;/code&gt;</source>
          <target state="translated">Эквивалент Perl: &lt;code&gt;&lt;a href=&quot;functions/my&quot;&gt;my&lt;/a&gt; @new_array = ($scalar1, $scalar2, $scalar3...);&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="994d82ebaabf45f0326fee88481665e6c0ceb2c7" translate="yes" xml:space="preserve">
          <source>Perl equivalent: &lt;code&gt;&lt;a href=&quot;functions/pop&quot;&gt;pop(@myarray);&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">Эквивалент Perl: &lt;code&gt;&lt;a href=&quot;functions/pop&quot;&gt;pop(@myarray);&lt;/a&gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="0c448473e835de05f1fd2f4b0a4490f988bfea19" translate="yes" xml:space="preserve">
          <source>Perl equivalent: &lt;code&gt;&lt;a href=&quot;functions/push&quot;&gt;push&lt;/a&gt; @myarray, $elem;&lt;/code&gt; .</source>
          <target state="translated">Эквивалент Perl: &lt;code&gt;&lt;a href=&quot;functions/push&quot;&gt;push&lt;/a&gt; @myarray, $elem;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="7c7b86a8f8deba930918279e3c4fc84bda790f23" translate="yes" xml:space="preserve">
          <source>Perl equivalent: &lt;code&gt;&lt;a href=&quot;functions/shift&quot;&gt;shift(@myarray);&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">Эквивалент Perl: &lt;code&gt;&lt;a href=&quot;functions/shift&quot;&gt;shift(@myarray);&lt;/a&gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="b4b1f7bdfb013ea4679d96a3812b271f5a3c227d" translate="yes" xml:space="preserve">
          <source>Perl equivalent: &lt;code&gt;&lt;a href=&quot;functions/unshift&quot;&gt;unshift&lt;/a&gt; @myarray, ( (&lt;a href=&quot;functions/undef&quot;&gt;undef&lt;/a&gt;) x $n );&lt;/code&gt;</source>
          <target state="translated">Эквивалент Perl: &lt;code&gt;&lt;a href=&quot;functions/unshift&quot;&gt;unshift&lt;/a&gt; @myarray, ( (&lt;a href=&quot;functions/undef&quot;&gt;undef&lt;/a&gt;) x $n );&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="066d54dd7f117a044b123bb5ad4d4d8cf43e8b71" translate="yes" xml:space="preserve">
          <source>Perl equivalent: &lt;code&gt;@myarray = ();&lt;/code&gt; .</source>
          <target state="translated">Эквивалент Perl: &lt;code&gt;@myarray = ();&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="cef9ffe6af51e7c258630229039bfd2bf1b03f4a" translate="yes" xml:space="preserve">
          <source>Perl equivalent: &lt;code&gt;@{&quot;$name&quot;}&lt;/code&gt; .</source>
          <target state="translated">Эквивалент Perl: &lt;code&gt;@{&quot;$name&quot;}&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="fd6c0fa81ee3f8c1c8439229199c54fb18bd674d" translate="yes" xml:space="preserve">
          <source>Perl equivalent: &lt;code&gt;@{&quot;$name&quot;}&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8387ac6319e9c82075e493d979c1ad9402112db0" translate="yes" xml:space="preserve">
          <source>Perl equivalent: &lt;code&gt;exists($myarray[$key])&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5694e8120a54857700407b986aded553056c12c9" translate="yes" xml:space="preserve">
          <source>Perl equivalent: &lt;code&gt;my @array;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="64388bc4ae76bac317e416b96081b0d5a0b6f31c" translate="yes" xml:space="preserve">
          <source>Perl equivalent: &lt;code&gt;my @new_array = ($scalar1, $scalar2, $scalar3...);&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c87143f1eb93d31e9b921daa9a01a7a20ad16d03" translate="yes" xml:space="preserve">
          <source>Perl equivalent: &lt;code&gt;pop(@myarray);&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="697b1808fa2455d4990177e0cd7be75e6d5166eb" translate="yes" xml:space="preserve">
          <source>Perl equivalent: &lt;code&gt;push @myarray, $val;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fa1708a84090946a618873c3a265107ea3020eef" translate="yes" xml:space="preserve">
          <source>Perl equivalent: &lt;code&gt;shift(@myarray);&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="75d39e18ca7e7f2ff2aed6b8cb0b4962580d73a5" translate="yes" xml:space="preserve">
          <source>Perl equivalent: &lt;code&gt;splice(@myarray, $key, 1, undef)&lt;/code&gt; (with the &lt;code&gt;splice&lt;/code&gt; in void context if &lt;code&gt;G_DISCARD&lt;/code&gt; is present).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4a3899dd3b4004ff6e0fc8455247dbe889fc7876" translate="yes" xml:space="preserve">
          <source>Perl equivalent: &lt;code&gt;unshift @myarray, ((undef) x $num);&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1633602744f0213cf03a917c908f3ac91926bf3d" translate="yes" xml:space="preserve">
          <source>Perl exited with active threads:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fa8a19dd0719175a9c848242a7e2217e48154534" translate="yes" xml:space="preserve">
          <source>Perl extension for ARexx support</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8aec2fb1965c42df65abc2f4f5003e7dd1e44262" translate="yes" xml:space="preserve">
          <source>Perl extension for BSD glob routine</source>
          <target state="translated">Расширение на Perl для глобусного режима BSD</target>
        </trans-unit>
        <trans-unit id="24aff9b9093549c7d05ba26875dcbd18c62f3127" translate="yes" xml:space="preserve">
          <source>Perl extension for SHA-1/224/256/384/512</source>
          <target state="translated">Удлинитель на перл для SHA-1/224/256/384/512</target>
        </trans-unit>
        <trans-unit id="403524ab53fcfa65297b5c6d11da8a41e9bdf68e" translate="yes" xml:space="preserve">
          <source>Perl extension for Version Objects</source>
          <target state="translated">Расширение Perl для объектов версии</target>
        </trans-unit>
        <trans-unit id="42f2f6711b11e99ed8f45572975dad7e69bf2e53" translate="yes" xml:space="preserve">
          <source>Perl extension for low level amiga support</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c24a560ca7260d4a2d7424b6161a53890073335c" translate="yes" xml:space="preserve">
          <source>Perl extension for sharing data structures between threads</source>
          <target state="translated">Расширение Perl для обмена структурами данных между потоками</target>
        </trans-unit>
        <trans-unit id="3668aadc429b1304c6228d98dc9c4677872a86f1" translate="yes" xml:space="preserve">
          <source>Perl extension to manipulate DCL symbols</source>
          <target state="translated">Расширение Perl для манипулирования DCL-символами</target>
        </trans-unit>
        <trans-unit id="b4ef3d43e200cfbf35d2a7b6f42754d585642e16" translate="yes" xml:space="preserve">
          <source>Perl extensions are packages which provide both XS and Perl code to add new functionality to perl. (XS is a meta-language which simplifies writing C code which interacts with Perl, see &lt;a href=&quot;perlxs&quot;&gt;perlxs&lt;/a&gt; for more details.) The Perl code for an extension is treated like any other library module - it's made available in your script through the appropriate &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;functions/require&quot;&gt;require&lt;/a&gt;&lt;/code&gt; statement, and usually defines a Perl package containing the extension.</source>
          <target state="translated">Расширения Perl - это пакеты, которые предоставляют код XS и Perl для добавления новых функций в Perl. (XS - это метаязык, который упрощает написание кода C, который взаимодействует с Perl, см. &lt;a href=&quot;perlxs&quot;&gt;Подробности в perlxs&lt;/a&gt; .) Код Perl для расширения рассматривается как любой другой модуль библиотеки - он становится доступным в вашем скрипте посредством соответствующего &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt;&lt;/code&gt; или &lt;code&gt;&lt;a href=&quot;functions/require&quot;&gt;require&lt;/a&gt;&lt;/code&gt; оператор и обычно определяет пакет Perl, содержащий расширение.</target>
        </trans-unit>
        <trans-unit id="0e866b1770868c3ac8fc82a190900a1373e58cc0" translate="yes" xml:space="preserve">
          <source>Perl extensions are packages which provide both XS and Perl code to add new functionality to perl. (XS is a meta-language which simplifies writing C code which interacts with Perl, see &lt;a href=&quot;perlxs&quot;&gt;perlxs&lt;/a&gt; for more details.) The Perl code for an extension is treated like any other library module - it's made available in your script through the appropriate &lt;code&gt;use&lt;/code&gt; or &lt;code&gt;require&lt;/code&gt; statement, and usually defines a Perl package containing the extension.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f81d1af8c2de641461c82be3969f85e5ad3bba8c" translate="yes" xml:space="preserve">
          <source>Perl flavors</source>
          <target state="translated">Вкусы Perl</target>
        </trans-unit>
        <trans-unit id="bd0c8e091c1809181809f92d1bef1271c7b38ca1" translate="yes" xml:space="preserve">
          <source>Perl folding rules are not up-to-date for 0x%X; please use the perlbug utility to report; in regex; marked by &amp;lt;-- HERE in m/%s/</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7d53205939368bef651c20e6009f95c9046101c6" translate="yes" xml:space="preserve">
          <source>Perl for VMS supports redirection of input and output on the command line, using a subset of Bourne shell syntax:</source>
          <target state="translated">Perl для VMS поддерживает перенаправление входных и выходных данных в командной строке,используя подмножество синтаксиса оболочки Борна:</target>
        </trans-unit>
        <trans-unit id="903e263457faf9b024e447e13142cbcffaf64dc8" translate="yes" xml:space="preserve">
          <source>Perl functions</source>
          <target state="translated">Функции Perl</target>
        </trans-unit>
        <trans-unit id="7328221f86957828b643cf959ce54c0e2d391c24" translate="yes" xml:space="preserve">
          <source>Perl functions that execute the most opcodes</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5eab57fb6512949ddd22c0f3a298921f86d2bf10" translate="yes" xml:space="preserve">
          <source>Perl had to change internally to decouple &quot;bytes&quot; from &quot;characters&quot;. It is important that you too change your ideas, if you haven't already, so that &quot;byte&quot; and &quot;character&quot; no longer mean the same thing in your mind.</source>
          <target state="translated">Perl пришлось изменить внутри,чтобы отделить &quot;байты&quot; от &quot;символов&quot;.Важно,чтобы вы тоже изменить свои идеи,если вы еще не сделали,так что &quot;байт&quot; и &quot;символ&quot; больше не означает то же самое в вашем сознании.</target>
        </trans-unit>
        <trans-unit id="eb521c7add3b7379a78d9a6b6db7917dc107bbad" translate="yes" xml:space="preserve">
          <source>Perl has a mechanism for intermixing documentation with source code. While it's expecting the beginning of a new statement, if the compiler encounters a line that begins with an equal sign and a word, like this</source>
          <target state="translated">Perl имеет механизм для смешивания документации с исходным кодом.В ожидании начала нового утверждения,если компилятор встречает строку,которая начинается со знака равенства и слова,подобного этому</target>
        </trans-unit>
        <trans-unit id="1e3d0cb76e6880e13fbb5d4447acbcbd4213008d" translate="yes" xml:space="preserve">
          <source>Perl has a mechanism to help you generate simple reports and charts. To facilitate this, Perl helps you code up your output page close to how it will look when it's printed. It can keep track of things like how many lines are on a page, what page you're on, when to print page headers, etc. Keywords are borrowed from FORTRAN: format() to declare and write() to execute; see their entries in &lt;a href=&quot;perlfunc&quot;&gt;perlfunc&lt;/a&gt;. Fortunately, the layout is much more legible, more like BASIC's PRINT USING statement. Think of it as a poor man's nroff(1).</source>
          <target state="translated">Perl имеет механизм, помогающий создавать простые отчеты и диаграммы. Чтобы облегчить это, Perl помогает вам кодировать вашу страницу вывода так, как она будет выглядеть при печати. Он может отслеживать такие вещи, как количество строк на странице, на какой странице вы находитесь, когда печатать заголовки страниц и т. Д. Ключевые слова заимствованы из FORTRAN: format () для объявления и write () для выполнения; их записи в &lt;a href=&quot;perlfunc&quot;&gt;perlfunc&lt;/a&gt; . К счастью, макет более разборчивый, больше похож на оператор BASIC PRINT USING. Думайте об этом как о нроффе для бедняков (1).</target>
        </trans-unit>
        <trans-unit id="a345738f3732f2f0cdf6981643487de1b3db946b" translate="yes" xml:space="preserve">
          <source>Perl has a number of C functions that allow you to call Perl subroutines. They are</source>
          <target state="translated">Perl имеет ряд функций C,которые позволяют вызывать подпрограммы Perl.Они</target>
        </trans-unit>
        <trans-unit id="1bddeb2bc37a6de64d61b4ee95d33bffdb149de8" translate="yes" xml:space="preserve">
          <source>Perl has a very handy construction</source>
          <target state="translated">Perl имеет очень удобную конструкцию</target>
        </trans-unit>
        <trans-unit id="782c7b78803135d7443e4bbee913a7ff13f6ef7c" translate="yes" xml:space="preserve">
          <source>Perl has allowed you to use a bare here-document terminator to have the here-document end at the first empty line. This practise was deprecated in Perl 5.000; as of Perl 5.28, using a bare here-document terminator throws a fatal error.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0fe803dd8b2d3f30a3a54343a2a1b136039b1f5f" translate="yes" xml:space="preserve">
          <source>Perl has an &lt;b&gt;internal format&lt;/b&gt;, an encoding that it uses to encode text strings so it can store them in memory. All text strings are in this internal format. In fact, text strings are never in any other format!</source>
          <target state="translated">Perl имеет &lt;b&gt;внутренний формат&lt;/b&gt; , кодировку, которую он использует для кодирования текстовых строк, чтобы сохранять их в памяти. Все текстовые строки находятся в этом внутреннем формате. Фактически, текстовые строки никогда не бывают в другом формате!</target>
        </trans-unit>
        <trans-unit id="8e77f37e525e239856b2f6dca9aacaa6be1709a8" translate="yes" xml:space="preserve">
          <source>Perl has an abstracted interface for all supported character encodings, so this is actually a generic &lt;code&gt;Encode&lt;/code&gt; tutorial and &lt;code&gt;Encode&lt;/code&gt; FAQ. But many people think that Unicode is special and magical, and I didn't want to disappoint them, so I decided to call the document a Unicode tutorial.</source>
          <target state="translated">Perl имеет абстрактный интерфейс для всех поддерживаемых кодировок, так что это на самом деле общий &lt;code&gt;Encode&lt;/code&gt; учебник и &lt;code&gt;Encode&lt;/code&gt; FAQ. Но многие люди думают, что Unicode особенный и волшебный, и я не хотел их разочаровывать, поэтому решил назвать этот документ учебником по Unicode.</target>
        </trans-unit>
        <trans-unit id="ba0cf0d83a33c18a21a219f52e56234294b46fae" translate="yes" xml:space="preserve">
          <source>Perl has an experimental facility to allow a subroutine's formal parameters to be introduced by special syntax, separate from the procedural code of the subroutine body. The formal parameter list is known as a</source>
          <target state="translated">Perl имеет экспериментальную установку,позволяющую вводить формальные параметры подпрограммы по специальному синтаксису,отдельному от процедурного кода тела подпрограммы.Список формальных параметров известен как</target>
        </trans-unit>
        <trans-unit id="97abe0ed9adb57fe2fdef50f3e6441c8a80f29df" translate="yes" xml:space="preserve">
          <source>Perl has been built with &lt;code&gt;PERL_OLD_SIGNALS&lt;/code&gt; (see &lt;code&gt;perl -V&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="67a3b41d8b9e93c19e7c374ecedc7c37bde9bf23" translate="yes" xml:space="preserve">
          <source>Perl has been extended to support certain types of locales available in the locale system. This is controlled per application by using one pragma, one function call, and several environment variables.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a1de858c46ad7947531577a6915520f75857a413" translate="yes" xml:space="preserve">
          <source>Perl has been extended to support the locale system. This is controlled per application by using one pragma, one function call, and several environment variables.</source>
          <target state="translated">Perl был расширен для поддержки системы локализации.Это управляется для каждого приложения с помощью одной прагмы,одного вызова функции и нескольких переменных окружения.</target>
        </trans-unit>
        <trans-unit id="9724b09cfb0bd9657e1b0740263fad624a62d13c" translate="yes" xml:space="preserve">
          <source>Perl has been ported to many platforms that do not fit into any of the categories listed above. Some, such as AmigaOS, QNX, Plan 9, and VOS, have been well-integrated into the standard Perl source code kit. You may need to see the</source>
          <target state="translated">Perl был портирован на многие платформы,которые не подходят ни под одну из вышеперечисленных категорий.Некоторые из них,такие как AmigaOS,QNX,Plan 9 и VOS,были хорошо интегрированы в стандартный набор исходных кодов на Perl.Возможно,вам понадобится увидеть</target>
        </trans-unit>
        <trans-unit id="59525826d5ce7fdcf57cd21fd12177031ab869c3" translate="yes" xml:space="preserve">
          <source>Perl has its own special way of easily writing test scripts, but for this example only, we'll create our own test script. Create a file called hello that looks like this:</source>
          <target state="translated">У Perl есть свой особый способ написания тестовых скриптов,но только для этого примера мы создадим свой собственный тестовый скрипт.Создадим файл под названием &quot;Привет&quot;,который будет выглядеть вот так:</target>
        </trans-unit>
        <trans-unit id="998bc2b1651869833ea0ac38395b9fb4d5ed44f8" translate="yes" xml:space="preserve">
          <source>Perl has long been ported to Intel-style microcomputers running under systems like PC-DOS, MS-DOS, OS/2, and most Windows platforms you can bring yourself to mention (except for Windows CE, if you count that). Users familiar with</source>
          <target state="translated">Perl уже давно портирован на микрокомпьютеры в стиле Intel,работающие под такими системами,как PC-DOS,MS-DOS,OS/2,и большинство платформ Windows,о которых вы можете упомянуть (за исключением Windows CE,если вы это считаете).Пользователи,знакомые с</target>
        </trans-unit>
        <trans-unit id="fe67796dc02d7b52e1f554749c03ec30b57d6bfa" translate="yes" xml:space="preserve">
          <source>Perl has most of the usual conditional and looping constructs. As of Perl 5.10, it even has a case/switch statement (spelled &lt;code&gt;given&lt;/code&gt; /&lt;code&gt;when&lt;/code&gt; ). See &lt;a href=&quot;perlsyn#Switch-Statements&quot;&gt;Switch Statements in perlsyn&lt;/a&gt; for more details.</source>
          <target state="translated">Perl имеет большинство обычных условных конструкций и конструкций цикла. Начиная с Perl 5.10, он даже имеет оператор case / switch (пишется &lt;code&gt;given&lt;/code&gt; / &lt;code&gt;when&lt;/code&gt; ). Дополнительные сведения см. В разделе &amp;laquo; &lt;a href=&quot;perlsyn#Switch-Statements&quot;&gt;Операторы переключения в perlsyn&amp;raquo;&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="a9108e90e0b7ad511809f643c664cdbaf3b5a6fd" translate="yes" xml:space="preserve">
          <source>Perl has most of the usual conditional and looping constructs. As of Perl 5.10, it even has a case/switch statement (spelled &lt;code&gt;given&lt;/code&gt;/&lt;code&gt;when&lt;/code&gt;). See &lt;a href=&quot;perlsyn#Switch-Statements&quot;&gt;&quot;Switch Statements&quot; in perlsyn&lt;/a&gt; for more details.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="db019a5ac1f171d008187e1d1c55e0f5d5a9b3a4" translate="yes" xml:space="preserve">
          <source>Perl has never accepted code points above 255 without them being Unicode, so their use implies Unicode for the whole string.</source>
          <target state="translated">Perl никогда не принимал кодовые пункты выше 255,не будучи при этом Юникодом,поэтому их использование подразумевает Юникод для всей строки.</target>
        </trans-unit>
        <trans-unit id="3dbc4a73529270e867678196c4fd9545abf0346b" translate="yes" xml:space="preserve">
          <source>Perl has no special syntax for attributes. Under the hood, attributes are often stored as keys in the object's underlying hash, but don't worry about this.</source>
          <target state="translated">Perl не имеет специального синтаксиса для атрибутов.Под капотом атрибуты часто хранятся в виде ключей в хэше объекта,но не беспокойтесь об этом.</target>
        </trans-unit>
        <trans-unit id="7a462b0d48d68775e02812c002249670e7d86d56" translate="yes" xml:space="preserve">
          <source>Perl has several abbreviations for common character classes. (These definitions are those that Perl uses in ASCII-safe mode with the &lt;code&gt;/a&lt;/code&gt; modifier. Otherwise they could match many more non-ASCII Unicode characters as well. See &lt;a href=&quot;perlrecharclass#Backslash-sequences&quot;&gt;&quot;Backslash sequences&quot; in perlrecharclass&lt;/a&gt; for details.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a2deb2a0ce121e98962483bd16f83d982606bfc5" translate="yes" xml:space="preserve">
          <source>Perl has several abbreviations for common character classes. (These definitions are those that Perl uses in ASCII-safe mode with the &lt;code&gt;/a&lt;/code&gt; modifier. Otherwise they could match many more non-ASCII Unicode characters as well. See &lt;a href=&quot;perlrecharclass#Backslash-sequences&quot;&gt;Backslash sequences in perlrecharclass&lt;/a&gt; for details.)</source>
          <target state="translated">В Perl есть несколько сокращений для общих классов символов. (Это те определения, которые Perl использует в безопасном режиме ASCII с модификатором &lt;code&gt;/a&lt;/code&gt; . В противном случае они могли бы соответствовать гораздо большему количеству символов Unicode, отличных от ASCII. Для получения дополнительной информации см. &lt;a href=&quot;perlrecharclass#Backslash-sequences&quot;&gt;Последовательности обратной косой черты в perlrecharclass&lt;/a&gt; .)</target>
        </trans-unit>
        <trans-unit id="6e2448e5aa8e9e98f0e99e7fca74328732318a16" translate="yes" xml:space="preserve">
          <source>Perl has special debugging hooks at compile-time and run-time used to create debugging environments. These hooks are not to be confused with the</source>
          <target state="translated">Perl имеет специальные крючки для отладки во время компиляции и во время выполнения,используемые для создания отладочных сред.Эти крючки не следует путать с</target>
        </trans-unit>
        <trans-unit id="0380b6f875ab18989e39e87ecb537accdd5cfd4c" translate="yes" xml:space="preserve">
          <source>Perl has three built-in data types: scalars, arrays of scalars, and associative arrays of scalars, known as &quot;hashes&quot;. A scalar is a single string (of any size, limited only by the available memory), number, or a reference to something (which will be discussed in &lt;a href=&quot;perlref&quot;&gt;perlref&lt;/a&gt;). Normal arrays are ordered lists of scalars indexed by number, starting with 0. Hashes are unordered collections of scalar values indexed by their associated string key.</source>
          <target state="translated">Perl имеет три встроенных типа данных: скаляры, массивы скаляров и ассоциативные массивы скаляров, известные как &amp;laquo;хэши&amp;raquo;. Скаляр - это отдельная строка (любого размера, ограниченная только доступной памятью), число или ссылка на что-то (что будет обсуждаться в &lt;a href=&quot;perlref&quot;&gt;perlref&lt;/a&gt; ). Нормальные массивы - это упорядоченные списки скаляров, проиндексированных по номеру, начиная с 0. Хэши - это неупорядоченные коллекции скалярных значений, индексированных по соответствующему строковому ключу.</target>
        </trans-unit>
        <trans-unit id="fe80e5af445506b27b416f76f8599a7353684bc2" translate="yes" xml:space="preserve">
          <source>Perl has three main variable types: scalars, arrays, and hashes.</source>
          <target state="translated">Perl имеет три основных типа переменных:скаляры,массивы и хэши.</target>
        </trans-unit>
        <trans-unit id="5581a893a6439e102c22a8a8e459a544618d9458" translate="yes" xml:space="preserve">
          <source>Perl has three typedefs that handle Perl's three main data types:</source>
          <target state="translated">Perl имеет три типовых файла,которые обрабатывают три основных типа данных Perl:</target>
        </trans-unit>
        <trans-unit id="4982bfdcb9933aa8ea045e6714352b02205f1767" translate="yes" xml:space="preserve">
          <source>Perl has two major annual conventions: The Perl Conference (now part of OSCON), put on by O'Reilly, and Yet Another Perl Conference or YAPC (pronounced yap-see), which is localized into several regional YAPCs (North America, Europe, Asia) in a stunning grassroots display by the Perl community. For more information about either conference, check out their respective web pages: OSCON &lt;a href=&quot;http://conferences.oreillynet.com/&quot;&gt;http://conferences.oreillynet.com/&lt;/a&gt;; YAPC &lt;a href=&quot;http://www.yapc.org&quot;&gt;http://www.yapc.org&lt;/a&gt;.</source>
          <target state="translated">У Perl есть два основных ежегодных конгресса: Perl Conference (теперь часть OSCON), проводимая O'Reilly, и Another Perl Conference или YAPC (произносится как yap-see), которая локализована в нескольких региональных YAPC (Северная Америка, Европа , Азия) в потрясающей демонстрации сообщества Perl. Для получения дополнительной информации о любой конференции посетите соответствующие веб-страницы: OSCON &lt;a href=&quot;http://conferences.oreillynet.com/&quot;&gt;http://conferences.oreillynet.com/&lt;/a&gt; ; YAPC &lt;a href=&quot;http://www.yapc.org&quot;&gt;http://www.yapc.org&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="5fa0e69b9943a36c122fd92838ddb0e5f771d49b" translate="yes" xml:space="preserve">
          <source>Perl hash references become JSON objects. As there is no inherent ordering in hash keys (or JSON objects), they will usually be encoded in a pseudo-random order. JSON::PP can optionally sort the hash keys (determined by the</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d410c5808a3d55ecb935a6972f7fdc386cde6d4b" translate="yes" xml:space="preserve">
          <source>Perl identifiers that begin with digits or punctuation characters are exempt from the effects of the &lt;code&gt;package&lt;/code&gt; declaration and are always forced to be in package &lt;code&gt;main&lt;/code&gt;; they are also exempt from &lt;code&gt;strict 'vars'&lt;/code&gt; errors. A few other names are also exempt in these ways:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9b6b908f8c33f304fe3c47ffea7a9a025bc30e32" translate="yes" xml:space="preserve">
          <source>Perl identifiers that begin with digits, control characters, or punctuation characters are exempt from the effects of the &lt;code&gt;&lt;a href=&quot;functions/package&quot;&gt;package&lt;/a&gt;&lt;/code&gt; declaration and are always forced to be in package &lt;code&gt;main&lt;/code&gt; ; they are also exempt from &lt;code&gt;strict 'vars'&lt;/code&gt; errors. A few other names are also exempt in these ways:</source>
          <target state="translated">Идентификаторы Perl, которые начинаются с цифр, управляющих символов или знаков пунктуации, освобождаются от действия объявления &lt;code&gt;&lt;a href=&quot;functions/package&quot;&gt;package&lt;/a&gt;&lt;/code&gt; и всегда должны находиться в &lt;code&gt;main&lt;/code&gt; пакете ; они также не подвержены &lt;code&gt;strict 'vars'&lt;/code&gt; . Некоторые другие имена также освобождены от уплаты налога:</target>
        </trans-unit>
        <trans-unit id="31969a763381ff2a4c90806f4b46526dbe2b269c" translate="yes" xml:space="preserve">
          <source>Perl implementations</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c8fd67f8a70f5e14b6e3a19738244712c763a3d5" translate="yes" xml:space="preserve">
          <source>Perl implements a class using a package, but the presence of a package doesn't imply the presence of a class. A package is just a namespace. A class is a package that provides subroutines that can be used as methods. A method is just a subroutine that expects, as its first argument, either the name of a package (for &quot;static&quot; methods), or a reference to something (for &quot;virtual&quot; methods).</source>
          <target state="translated">Perl реализует класс,используя пакет,но наличие пакета не подразумевает наличие класса.Пакет-это просто пространство имён.Класс-это пакет,который предоставляет подпрограммы,которые могут быть использованы в качестве методов.Метод-это просто подпрограмма,которая ожидает в качестве первого аргумента либо имя пакета (для &quot;статических&quot; методов),либо ссылку на что-то (для &quot;виртуальных&quot; методов).</target>
        </trans-unit>
        <trans-unit id="58db3a9b91cfa56f68561f9fa6e162ac6046ad34" translate="yes" xml:space="preserve">
          <source>Perl implements a copy-on-write (COW) mechanism for scalars, in which string copies are not immediately made when requested, but are deferred until made necessary by one or the other scalar changing. This is mostly transparent, but one must take care not to modify string buffers that are shared by multiple SVs.</source>
          <target state="translated">Perl реализует механизм копирования на запись (COW)для скаляров,в котором копирование строк происходит не сразу при запросе,а откладывается до тех пор,пока не произойдет необходимое изменение того или иного скаляра.В основном это прозрачно,но следует позаботиться о том,чтобы не модифицировать строковые буферы,которые совместно используются несколькими SV.</target>
        </trans-unit>
        <trans-unit id="9f2e73e561af14b355b2cc7b94da012ba43ebaff" translate="yes" xml:space="preserve">
          <source>Perl in PASE may be used in the same manner as you would use Perl on AIX.</source>
          <target state="translated">Perl в PASE может использоваться так же,как и Perl на AIX.</target>
        </trans-unit>
        <trans-unit id="f2a8c9dfcc6b27fc2b2bc1c4e09ed07f063fafcb" translate="yes" xml:space="preserve">
          <source>Perl inserts the contents of &lt;code&gt;$ENV{PERL5DB}&lt;/code&gt; (or &lt;code&gt;BEGIN {&lt;a href=&quot;functions/require&quot;&gt;require&lt;/a&gt;
'perl5db.pl'}&lt;/code&gt; if not present) before the first line of your program.</source>
          <target state="translated">Perl вставляет содержимое &lt;code&gt;$ENV{PERL5DB}&lt;/code&gt; (или &lt;code&gt;BEGIN {&lt;a href=&quot;functions/require&quot;&gt;require&lt;/a&gt; 'perl5db.pl'}&lt;/code&gt; если он отсутствует) перед первой строкой вашей программы.</target>
        </trans-unit>
        <trans-unit id="5f14427130c0e5366717699f360d7e36f930c1e6" translate="yes" xml:space="preserve">
          <source>Perl inserts the contents of &lt;code&gt;$ENV{PERL5DB}&lt;/code&gt; (or &lt;code&gt;BEGIN {require 'perl5db.pl'}&lt;/code&gt; if not present) before the first line of your program.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="23d0dc7556929e748dc66e21edf0645eb0e4825c" translate="yes" xml:space="preserve">
          <source>Perl installs into the SDK directory structure and expects many of the build tools present in the SDK to be available. So for the best results install the SDK first.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2a9b4ba7a506b9d41ffb5e3879cb8f3519952178" translate="yes" xml:space="preserve">
          <source>Perl interface to IEEE Std 1003.1</source>
          <target state="translated">Perl-интерфейс к IEEE Std 1003.1</target>
        </trans-unit>
        <trans-unit id="98db74e4a9950c02875b0447d97adf3fab69be22" translate="yes" xml:space="preserve">
          <source>Perl interface to the MD5 Algorithm</source>
          <target state="translated">Perl-интерфейс к алгоритму MD5</target>
        </trans-unit>
        <trans-unit id="25640a112f893abdc0c31467980b237692e55c11" translate="yes" xml:space="preserve">
          <source>Perl interface to the UNIX syslog(3) calls</source>
          <target state="translated">Perl-интерфейс для вызовов в UNIX syslog(3)</target>
        </trans-unit>
        <trans-unit id="eb268cafbb2bc2d6a265535e507a93da4ace82e9" translate="yes" xml:space="preserve">
          <source>Perl interface to various &lt;code&gt;&lt;a href=&quot;functions/readline&quot;&gt;readline&lt;/a&gt;&lt;/code&gt; packages.</source>
          <target state="translated">Интерфейс Perl для различных пакетов &lt;code&gt;&lt;a href=&quot;functions/readline&quot;&gt;readline&lt;/a&gt;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="3c4d5afc98ae9e7a6b3b8ccc0bdaf8f20968aa0d" translate="yes" xml:space="preserve">
          <source>Perl interface to various &lt;code&gt;readline&lt;/code&gt; packages.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="532fa58abfc3c5192e3d89ee9b20cda6099a638d" translate="yes" xml:space="preserve">
          <source>Perl interpreter-based threads</source>
          <target state="translated">Потоки на основе Perl-переводчика</target>
        </trans-unit>
        <trans-unit id="7813b6fd0cf6ff0fcbbed68e090fa174337973c7" translate="yes" xml:space="preserve">
          <source>Perl is a &lt;b&gt;free-form&lt;/b&gt; language: you can format and indent it however you like. Whitespace serves mostly to separate tokens, unlike languages like Python where it is an important part of the syntax, or Fortran where it is immaterial.</source>
          <target state="translated">Perl - это язык &lt;b&gt;свободной формы&lt;/b&gt; : вы можете форматировать его и делать отступы, как вам нравится. Пробелы служат в основном для разделения токенов, в отличие от таких языков, как Python, где это важная часть синтаксиса, или Fortran, где это несущественно.</target>
        </trans-unit>
        <trans-unit id="78b17861828e1fc00762c322f49cbad21d37d4a9" translate="yes" xml:space="preserve">
          <source>Perl is a general-purpose programming language originally developed for text manipulation and now used for a wide range of tasks including system administration, web development, network programming, GUI development, and more.</source>
          <target state="translated">Perl-это язык программирования общего назначения,изначально разработанный для работы с текстом,а в настоящее время используемый для решения широкого круга задач,включая системное администрирование,веб-разработку,сетевое программирование,разработку графического интерфейса пользователя и многое другое.</target>
        </trans-unit>
        <trans-unit id="df24bdffd3ed3137e259ab273c3698d7eedca921" translate="yes" xml:space="preserve">
          <source>Perl is a high-level programming language with an eclectic heritage written by Larry Wall and a cast of thousands.</source>
          <target state="translated">Perl-это язык программирования высокого уровня с эклектичным наследием,написанным Ларри Уоллом и тысячами актеров.</target>
        </trans-unit>
        <trans-unit id="8e4a5a9567dfe12d565a7fe3569da1af894be351" translate="yes" xml:space="preserve">
          <source>Perl is a profligate wastrel when it comes to memory use. There is a saying that to estimate memory usage of Perl, assume a reasonable algorithm for memory allocation, multiply that estimate by 10, and while you still may miss the mark, at least you won't be quite so astonished. This is not absolutely true, but may provide a good grasp of what happens.</source>
          <target state="translated">Perl-расточительная пустая трата времени,когда речь заходит об использовании памяти.Существует поговорка,что для оценки использования памяти на Perl,предположить разумный алгоритм выделения памяти,умножить эту оценку на 10,и пока вы все еще можете пропустить отметку,по крайней мере,вы не будете так удивлены.Это не совсем верно,но может дать хорошее представление о том,что произойдет.</target>
        </trans-unit>
        <trans-unit id="5676662b05d1f0dfe8bee99aada0c212a7cfdcd0" translate="yes" xml:space="preserve">
          <source>Perl is at the mercy of your machine's definitions of various operations such as type casting, atof(), and floating-point output with sprintf().</source>
          <target state="translated">Perl находится во власти определений вашей машины различных операций,таких как приведение типов,atof()и вывод с плавающей точкой с помощью sprintf().</target>
        </trans-unit>
        <trans-unit id="cf13bfd73fd319a7fa88b1a848a7fd42bf50c10e" translate="yes" xml:space="preserve">
          <source>Perl is available for most operating systems, including virtually all Unix-like platforms. See &lt;a href=&quot;perlport#Supported-Platforms&quot;&gt;&quot;Supported Platforms&quot; in perlport&lt;/a&gt; for a listing.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1d9807bc15de484f6b43cc02362e93cc66150c42" translate="yes" xml:space="preserve">
          <source>Perl is available for most operating systems, including virtually all Unix-like platforms. See &lt;a href=&quot;perlport#Supported-Platforms&quot;&gt;Supported Platforms in perlport&lt;/a&gt; for a listing.</source>
          <target state="translated">Perl доступен для большинства операционных систем, включая практически все Unix-подобные платформы. См. Список &lt;a href=&quot;perlport#Supported-Platforms&quot;&gt;поддерживаемых платформ в perlport&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="464c9f17acbbf3521c9fe1d4bfb03f4c8f71635b" translate="yes" xml:space="preserve">
          <source>Perl is binary-clean, so it can handle binary data just fine. On Windows or DOS, however, you have to use &lt;code&gt;&lt;a href=&quot;functions/binmode&quot;&gt;binmode&lt;/a&gt;&lt;/code&gt; for binary files to avoid conversions for line endings. In general, you should use &lt;code&gt;&lt;a href=&quot;functions/binmode&quot;&gt;binmode&lt;/a&gt;&lt;/code&gt; any time you want to work with binary data.</source>
          <target state="translated">Perl является двоичным &quot;чистым&quot;, поэтому он может нормально обрабатывать двоичные данные. Однако в Windows или DOS вы должны использовать &lt;code&gt;&lt;a href=&quot;functions/binmode&quot;&gt;binmode&lt;/a&gt;&lt;/code&gt; для двоичных файлов, чтобы избежать преобразования окончаний строк. В общем, вы должны использовать &lt;code&gt;&lt;a href=&quot;functions/binmode&quot;&gt;binmode&lt;/a&gt;&lt;/code&gt; каждый раз, когда хотите работать с двоичными данными.</target>
        </trans-unit>
        <trans-unit id="f177d6bd3fecf3c385b90d51e6e9dcdc131d2dc5" translate="yes" xml:space="preserve">
          <source>Perl is binary-clean, so it can handle binary data just fine. On Windows or DOS, however, you have to use &lt;code&gt;binmode&lt;/code&gt; for binary files to avoid conversions for line endings. In general, you should use &lt;code&gt;binmode&lt;/code&gt; any time you want to work with binary data.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="432dc52a3d4248eb12d8ce12a42a4bd4668bcd6d" translate="yes" xml:space="preserve">
          <source>Perl is built using PerlIO by default; Unless you've changed this (such as building Perl with &lt;code&gt;Configure -Uuseperlio&lt;/code&gt; ), you can open filehandles directly to Perl scalars via:</source>
          <target state="translated">Perl по умолчанию создается с использованием PerlIO; Если вы не изменили это (например, построили Perl с помощью &lt;code&gt;Configure -Uuseperlio&lt;/code&gt; ), вы можете открывать дескрипторы файлов непосредственно в скалярах Perl с помощью:</target>
        </trans-unit>
        <trans-unit id="e2ba202ee46521f5f5b0bea93e68c6d4e90de303" translate="yes" xml:space="preserve">
          <source>Perl is built with a &lt;a href=&quot;perlvar#%24%5EO&quot;&gt;&lt;code&gt;$^O&lt;/code&gt;&lt;/a&gt; variable that indicates the operating system it was built on. This was implemented to help speed up code that would otherwise have to &lt;code&gt;use Config&lt;/code&gt; and use the value of &lt;a href=&quot;config#osname&quot;&gt;&lt;code&gt;$Config{osname}&lt;/code&gt;&lt;/a&gt;. Of course, to get more detailed information about the system, looking into &lt;a href=&quot;config#DESCRIPTION&quot;&gt;&lt;code&gt;%Config&lt;/code&gt;&lt;/a&gt; is certainly recommended.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7c5ecc6508ddab8f3c4d91e33bbc7e0f0b10c001" translate="yes" xml:space="preserve">
          <source>Perl is built with a &lt;code&gt;$^O&lt;/code&gt; variable that indicates the operating system it was built on. This was implemented to help speed up code that would otherwise have to &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; Config&lt;/code&gt; and use the value of &lt;code&gt;$Config{osname}&lt;/code&gt; . Of course, to get more detailed information about the system, looking into &lt;code&gt;%Config&lt;/code&gt; is certainly recommended.</source>
          <target state="translated">Perl построен с переменной &lt;code&gt;$^O&lt;/code&gt; которая указывает операционную систему, на которой он был построен. Это было реализовано, чтобы помочь ускорить код, который в противном случае должен был бы &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; Config&lt;/code&gt; и использовать значение &lt;code&gt;$Config{osname}&lt;/code&gt; . Конечно, для получения более подробной информации о системе, безусловно, рекомендуется &lt;code&gt;%Config&lt;/code&gt; в % Config .</target>
        </trans-unit>
        <trans-unit id="b0b403c257bdd4aeec1cd64ac49b8e8696c81aad" translate="yes" xml:space="preserve">
          <source>Perl is designed to make it easy to program securely even when running with extra privileges, like setuid or setgid programs. Unlike most command line shells, which are based on multiple substitution passes on each line of the script, Perl uses a more conventional evaluation scheme with fewer hidden snags. Additionally, because the language has more builtin functionality, it can rely less upon external (and possibly untrustworthy) programs to accomplish its purposes.</source>
          <target state="translated">Perl разработан для облегчения безопасного программирования даже при запуске с дополнительными привилегиями,такими как setuid или setgid.В отличие от большинства оболочек командной строки,которые основаны на множественных передачах подстановок в каждой строке скрипта,Perl использует более традиционную схему оценки с меньшим количеством скрытых коряг.Кроме того,поскольку язык имеет больше встроенной функциональности,он может меньше полагаться на внешние (и,возможно,ненадежные)программы для достижения своих целей.</target>
        </trans-unit>
        <trans-unit id="95e020b4e0da8b6212d413773e1d9a2f7cfa598b" translate="yes" xml:space="preserve">
          <source>Perl is flexible and extensible enough for you to use on virtually any task, from one-line file-processing tasks to large, elaborate systems.</source>
          <target state="translated">Perl достаточно гибкий и расширяемый,чтобы вы могли использовать его практически для любых задач,от однолинейных задач по обработке файлов до больших,сложных систем.</target>
        </trans-unit>
        <trans-unit id="6ca32777c65e9c1e819db2ba028d7f7c9855e9eb" translate="yes" xml:space="preserve">
          <source>Perl is generally used in the situation when all the floating-point exceptions are ignored, as is the default under EMX. If they are not ignored, some benign Perl programs would get a &lt;code&gt;SIGFPE&lt;/code&gt; and would die a horrible death.</source>
          <target state="translated">Perl обычно используется в ситуации, когда игнорируются все исключения с плавающей запятой, как это принято по умолчанию в EMX. Если их не игнорировать, некоторые безобидные программы Perl получат &lt;code&gt;SIGFPE&lt;/code&gt; и умрут ужасной смертью.</target>
        </trans-unit>
        <trans-unit id="3df1fe819c8ca8623cc85794dcd13ce337949f92" translate="yes" xml:space="preserve">
          <source>Perl is invoked from the command line as described in &lt;a href=&quot;perl&quot;&gt;perl&lt;/a&gt;. Most perl scripts, however, do have a first line such as &quot;#!/usr/local/bin/perl&quot;. This is known as a shebang (shell-bang) statement and tells the OS shell where to find the perl interpreter. In Plan 9 Perl this statement should be &quot;#!/bin/perl&quot; if you wish to be able to directly invoke the script by its name. Alternatively, you may invoke perl with the command &quot;Perl&quot; instead of &quot;perl&quot;. This will produce Acme-friendly error messages of the form &quot;filename:18&quot;.</source>
          <target state="translated">Perl вызывается из командной строки, как описано в &lt;a href=&quot;perl&quot;&gt;perl&lt;/a&gt; . Однако в большинстве сценариев Perl есть первая строка, например &quot;#! / Usr / local / bin / perl&quot;. Это называется оператором shebang (shell-bang) и сообщает оболочке ОС, где найти интерпретатор perl. В Plan 9 Perl этот оператор должен быть &quot;#! / Bin / perl&quot;, если вы хотите иметь возможность напрямую вызывать скрипт по его имени. Как вариант, вы можете вызвать Perl с помощью команды &amp;laquo;Perl&amp;raquo; вместо &amp;laquo;perl&amp;raquo;. Это приведет к появлению удобных для Acme сообщений об ошибках вида &amp;laquo;имя файла: 18&amp;raquo;.</target>
        </trans-unit>
        <trans-unit id="e108d57bca9b7851cac34cf12c398ccee3cee194" translate="yes" xml:space="preserve">
          <source>Perl is one of the most ported pieces of software ever. It works on operating systems I've never even heard of (see perlport for details). It needs a build tool that can work on all those platforms and with any wacky C compilers and linkers they might have.</source>
          <target state="translated">Perl-одна из самых портированных программ.Он работает на операционных системах,о которых я никогда даже не слышал (подробнее см.perlport).Ему нужен инструмент сборки,который может работать на всех этих платформах и с любыми чокнутыми компиляторами и компоновщиками C,которые у них могут быть.</target>
        </trans-unit>
        <trans-unit id="69310d8ba2e9aaba734a13daced6bd681b7dd539" translate="yes" xml:space="preserve">
          <source>Perl is widely renowned for excellence in text processing, and regular expressions are one of the big factors behind this fame. Perl regular expressions display an efficiency and flexibility unknown in most other computer languages. Mastering even the basics of regular expressions will allow you to manipulate text with surprising ease.</source>
          <target state="translated">Perl широко известен совершенством в обработке текстов,и регулярные выражения являются одним из главных факторов,лежащих в основе этой славы.Регулярные выражения на Perl демонстрируют эффективность и гибкость,неизвестные большинству других компьютерных языков.Освоение даже основ регулярных выражений позволит вам работать с текстом с удивительной легкостью.</target>
        </trans-unit>
        <trans-unit id="9136a62ad4b5fb86c3834a4ff695ef28ba74673c" translate="yes" xml:space="preserve">
          <source>Perl isn't sure if you meant this</source>
          <target state="translated">Перл не уверен,что ты это имел в виду.</target>
        </trans-unit>
        <trans-unit id="29e85b3cc84aac2162dbddc5c0e070c097c573e4" translate="yes" xml:space="preserve">
          <source>Perl itself (outside the &lt;a href=&quot;posix&quot;&gt;POSIX&lt;/a&gt; module) will not use locales unless specifically requested to (but again note that Perl may interact with code that does use them). Even if there is such a request, &lt;b&gt;all&lt;/b&gt; of the following must be true for it to work properly:</source>
          <target state="translated">Сам Perl (вне модуля &lt;a href=&quot;posix&quot;&gt;POSIX&lt;/a&gt; ) не будет использовать локали, если это специально не запрошено (но опять же обратите внимание, что Perl может взаимодействовать с кодом, который их использует). Даже если такой запрос есть, для правильной работы должны выполняться &lt;b&gt;все&lt;/b&gt; следующие условия:</target>
        </trans-unit>
        <trans-unit id="b448d0fc5ff15548da831acf37af4494d6504c93" translate="yes" xml:space="preserve">
          <source>Perl itself never had a Y2K problem, although that never stopped people from creating Y2K problems on their own. See the documentation for &lt;code&gt;&lt;a href=&quot;functions/localtime&quot;&gt;localtime&lt;/a&gt;&lt;/code&gt; for its proper use.</source>
          <target state="translated">Сам Perl никогда не имел проблем с Y2K, хотя это никогда не мешало людям создавать проблемы с Y2K самостоятельно. См. Документацию по &lt;code&gt;&lt;a href=&quot;functions/localtime&quot;&gt;localtime&lt;/a&gt;&lt;/code&gt; для его правильного использования.</target>
        </trans-unit>
        <trans-unit id="f2cc4a6fccf4fd64e021bb2b5f362d3715f43b3f" translate="yes" xml:space="preserve">
          <source>Perl itself never had a Y2K problem, although that never stopped people from creating Y2K problems on their own. See the documentation for &lt;code&gt;localtime&lt;/code&gt; for its proper use.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="44b05ec97c9cd0cd0a392295c641d71beeda8b2c" translate="yes" xml:space="preserve">
          <source>Perl keeps the actual data in a linked list of structures with a typedef of HE. These contain the actual key and value pointers (plus extra administrative overhead). The key is a string pointer; the value is an &lt;code&gt;SV*&lt;/code&gt; . However, once you have an &lt;code&gt;HE*&lt;/code&gt; , to get the actual key and value, use the routines specified below.</source>
          <target state="translated">Perl хранит фактические данные в связанном списке структур с typedef HE. Они содержат фактические указатели ключей и значений (плюс дополнительные административные издержки). Ключ - это указатель на строку; значение - &lt;code&gt;SV*&lt;/code&gt; . Однако если у вас есть &lt;code&gt;HE*&lt;/code&gt; , чтобы получить фактический ключ и значение, используйте процедуры, указанные ниже.</target>
        </trans-unit>
        <trans-unit id="fb449bcf7d8ee7c61f13e13d363e2fbfa90f9e62" translate="yes" xml:space="preserve">
          <source>Perl keeps the actual data in a linked list of structures with a typedef of HE. These contain the actual key and value pointers (plus extra administrative overhead). The key is a string pointer; the value is an &lt;code&gt;SV*&lt;/code&gt;. However, once you have an &lt;code&gt;HE*&lt;/code&gt;, to get the actual key and value, use the routines specified below.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b5143bb91f08dc1c6dfd63a718e07f8c7c54d1b4" translate="yes" xml:space="preserve">
          <source>Perl knows how it stored the string internally, and will use that knowledge when you &lt;code&gt;encode&lt;/code&gt; . In other words: don't try to find out what the internal encoding for a certain string is, but instead just encode it into the encoding that you want.</source>
          <target state="translated">Perl знает, как он хранит строку внутри, и будет использовать это знание при &lt;code&gt;encode&lt;/code&gt; . Другими словами: не пытайтесь выяснить, какая внутренняя кодировка для определенной строки, а вместо этого просто закодируйте ее в нужную кодировку.</target>
        </trans-unit>
        <trans-unit id="c655bf7234ceeb2dde7bb0db4fba269b70d380f3" translate="yes" xml:space="preserve">
          <source>Perl knows how it stored the string internally, and will use that knowledge when you &lt;code&gt;encode&lt;/code&gt;. In other words: don't try to find out what the internal encoding for a certain string is, but instead just encode it into the encoding that you want.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="28c0b3b1efe64d6536aefbbd7df5f013304f845e" translate="yes" xml:space="preserve">
          <source>Perl knows what package the method is in by looking at the left side of the arrow. If the left hand side is a package name, it looks for the method in that package. If the left hand side is an object, then Perl looks for the method in the package that the object has been blessed into.</source>
          <target state="translated">Perl знает,в каком пакете находится метод,глядя на левую сторону стрелки.Если слева имя пакета,то он ищет метод в этом пакете.Если левая сторона-это объект,то Perl ищет метод в пакете,в который объект был благословлен.</target>
        </trans-unit>
        <trans-unit id="5816a72e8edbf2978259af959564532c0158a768" translate="yes" xml:space="preserve">
          <source>Perl lets us have complex data structures. You can write something like this and all of a sudden, you'd have an array with three dimensions!</source>
          <target state="translated">Perl позволяет нам иметь сложные структуры данных.Вы можете записать что-нибудь подобное и вдруг у вас будет массив с тремя измерениями!</target>
        </trans-unit>
        <trans-unit id="c792eeb72bf7222c26382dcf2643ff8d2431a9b2" translate="yes" xml:space="preserve">
          <source>Perl lets you use a scalar variable containing a string as a method name:</source>
          <target state="translated">Perl позволяет использовать скалярную переменную,содержащую строку в качестве имени метода:</target>
        </trans-unit>
        <trans-unit id="cbe2b90e37525ab41be0459f402495dfeae82682" translate="yes" xml:space="preserve">
          <source>Perl maintains environment variables in a special hash named &lt;code&gt;%ENV&lt;/code&gt; . For when this access method is inconvenient, the Perl module &lt;code&gt;Env&lt;/code&gt; allows environment variables to be treated as scalar or array variables.</source>
          <target state="translated">Perl хранит переменные среды в специальном хэше с именем &lt;code&gt;%ENV&lt;/code&gt; . Когда этот метод доступа неудобен, Perl-модуль &lt;code&gt;Env&lt;/code&gt; позволяет обрабатывать переменные среды как скалярные переменные или переменные массива.</target>
        </trans-unit>
        <trans-unit id="2f4c9c62b19928dbcce3428ee1199a16ecae0aed" translate="yes" xml:space="preserve">
          <source>Perl maintains environment variables in a special hash named &lt;code&gt;%ENV&lt;/code&gt;. For when this access method is inconvenient, the Perl module &lt;code&gt;Env&lt;/code&gt; allows environment variables to be treated as scalar or array variables.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="adff6cd758f5a3032ba367b5b7627b9df7afebcc" translate="yes" xml:space="preserve">
          <source>Perl makes all environment variables available to the program being executed, and passes these along to any child processes it starts. However, programs running setuid would do well to execute the following lines before doing anything else, just to keep people honest:</source>
          <target state="translated">Perl делает все переменные окружения доступными для исполняемой программы и передает их любым дочерним процессам,которые она запускает.Тем не менее,программы,выполняющие setuid,хорошо бы выполнить следующие строки перед тем,как делать что-либо еще,просто чтобы люди были честны:</target>
        </trans-unit>
        <trans-unit id="162c022ef155f35d9a828d8883301923c1130fa3" translate="yes" xml:space="preserve">
          <source>Perl manual in</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dbb37d4ff4d4f8d3c98e670fbe144d6ded8ac9e4" translate="yes" xml:space="preserve">
          <source>Perl may also use &lt;code&gt;minus()&lt;/code&gt; to implement other operators which have not been specified in the &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; overload&lt;/code&gt; directive, according to the rules for &lt;a href=&quot;#Magic-Autogeneration&quot;&gt;Magic Autogeneration&lt;/a&gt; described later. For example, the &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; overload&lt;/code&gt; above declared no subroutine for any of the operators &lt;code&gt;--&lt;/code&gt; , &lt;code&gt;neg&lt;/code&gt; (the overload key for unary minus), or &lt;code&gt;-=&lt;/code&gt; . Thus</source>
          <target state="translated">Perl может также использовать &lt;code&gt;minus()&lt;/code&gt; для реализации других операторов, которые не были указаны в директиве &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; overload&lt;/code&gt; , в соответствии с правилами для &lt;a href=&quot;#Magic-Autogeneration&quot;&gt;Magic Autogeneration,&lt;/a&gt; описанными ниже. Например, в описанной выше &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; overload&lt;/code&gt; &lt;a href=&quot;functions/use&quot;&gt;use не&lt;/a&gt; объявлено отсутствие подпрограммы ни для одного из операторов &lt;code&gt;--&lt;/code&gt; , &lt;code&gt;neg&lt;/code&gt; (ключ перегрузки для унарного минуса) или &lt;code&gt;-=&lt;/code&gt; . Таким образом</target>
        </trans-unit>
        <trans-unit id="386fe189f1039aa3ac9a068a2d2a8d19e7ef0b9d" translate="yes" xml:space="preserve">
          <source>Perl may also use &lt;code&gt;minus()&lt;/code&gt; to implement other operators which have not been specified in the &lt;code&gt;use overload&lt;/code&gt; directive, according to the rules for &lt;a href=&quot;#Magic-Autogeneration&quot;&gt;&quot;Magic Autogeneration&quot;&lt;/a&gt; described later. For example, the &lt;code&gt;use overload&lt;/code&gt; above declared no subroutine for any of the operators &lt;code&gt;--&lt;/code&gt;, &lt;code&gt;neg&lt;/code&gt; (the overload key for unary minus), or &lt;code&gt;-=&lt;/code&gt;. Thus</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4c8da87cabae75ef4041db61733575500f2f5c87" translate="yes" xml:space="preserve">
          <source>Perl may be built to ignore this variable.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fc722e05604a8e2215a16848c1b1749c16faaf82" translate="yes" xml:space="preserve">
          <source>Perl may be run from the AmigaOS shell but for best results should be run under abc-shell. (abc-shell handles file globbing, pattern expansion, and sets up environment variables in the UN*Xy way that Perl expects.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d02d1a8d8ad8ebaf66f5ae1fae9a8be6973bfe68" translate="yes" xml:space="preserve">
          <source>Perl modifies some standard C library calls in the following ways:</source>
          <target state="translated">Perl изменяет некоторые стандартные вызовы библиотеки C следующим образом:</target>
        </trans-unit>
        <trans-unit id="ae2b30d9e1d501c616a9183c5e463ad869566bb9" translate="yes" xml:space="preserve">
          <source>Perl module that imports environment variables as scalars or arrays</source>
          <target state="translated">Perl модуль,который импортирует переменные окружения в виде скаляров или массивов.</target>
        </trans-unit>
        <trans-unit id="8ba6990d9c4bf6e673e08de2996db458f738f918" translate="yes" xml:space="preserve">
          <source>Perl modules &lt;a href=&quot;BSD::Resource&quot;&gt;BSD::Resource&lt;/a&gt;, &lt;a href=&quot;Time::TAI64&quot;&gt;Time::TAI64&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5bf20acb7bc71507889f12ba0d9ef4ff255fd169" translate="yes" xml:space="preserve">
          <source>Perl modules &lt;a href=&quot;http://search.cpan.org/perldoc/BSD::Resource&quot;&gt;BSD::Resource&lt;/a&gt;, &lt;a href=&quot;http://search.cpan.org/perldoc/Time::TAI64&quot;&gt;Time::TAI64&lt;/a&gt;.</source>
          <target state="translated">Модули Perl &lt;a href=&quot;http://search.cpan.org/perldoc/BSD::Resource&quot;&gt;BSD :: Resource&lt;/a&gt; , &lt;a href=&quot;http://search.cpan.org/perldoc/Time::TAI64&quot;&gt;Time :: TAI64&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="9426f05ffd49561244dd50c76b095078d755129d" translate="yes" xml:space="preserve">
          <source>Perl modules always have a</source>
          <target state="translated">Модули Perl всегда имеют</target>
        </trans-unit>
        <trans-unit id="51c59ce0ac574ea7f8b9de507be10bf4487a787f" translate="yes" xml:space="preserve">
          <source>Perl modules are included into your program by saying</source>
          <target state="translated">Модули на Perl включены в вашу программу,сказав</target>
        </trans-unit>
        <trans-unit id="aefb322d2fca2dbb6f88aa84174a1e5c7a427c0e" translate="yes" xml:space="preserve">
          <source>Perl modules are not the only tools a performance analyst has at their disposal, system tools like &lt;code&gt;&lt;a href=&quot;functions/time&quot;&gt;time&lt;/a&gt;&lt;/code&gt; should not be overlooked as the next example shows, where we take a quick look at sorting. Many books, theses and articles, have been written about efficient sorting algorithms, and this is not the place to repeat such work, there's several good sorting modules which deserve taking a look at too: &lt;code&gt;Sort::Maker&lt;/code&gt; , &lt;code&gt;Sort::Key&lt;/code&gt; spring to mind. However, it's still possible to make some observations on certain Perl specific interpretations on issues relating to sorting data sets and give an example or two with regard to how sorting large data volumes can effect performance. Firstly, an often overlooked point when sorting large amounts of data, one can attempt to reduce the data set to be dealt with and in many cases &lt;code&gt;&lt;a href=&quot;functions/grep&quot;&gt;grep()&lt;/a&gt;&lt;/code&gt; can be quite useful as a simple filter:</source>
          <target state="translated">Модули Perl - не единственные инструменты, которые есть в распоряжении аналитика производительности, системные инструменты, такие как &lt;code&gt;&lt;a href=&quot;functions/time&quot;&gt;time&lt;/a&gt;&lt;/code&gt; не следует упускать из виду, как показывает следующий пример, где мы кратко рассмотрим сортировку. Об эффективных алгоритмах сортировки написано много книг, тезисов и статей, и здесь не место повторять такую ​​работу, есть несколько хороших модулей сортировки, на которые тоже стоит взглянуть: &lt;code&gt;Sort::Maker&lt;/code&gt; , &lt;code&gt;Sort::Key&lt;/code&gt; приходит на ум. Тем не менее, по-прежнему можно сделать некоторые наблюдения в отношении определенных интерпретаций Perl по вопросам, связанным с сортировкой наборов данных, и привести несколько примеров того, как сортировка больших объемов данных может влиять на производительность. Во-первых, часто упускается из виду, что при сортировке больших объемов данных можно попытаться сократить набор данных, с которыми нужно работать, и во многих случаях &lt;code&gt;&lt;a href=&quot;functions/grep&quot;&gt;grep()&lt;/a&gt;&lt;/code&gt; может быть весьма полезен в качестве простого фильтра:</target>
        </trans-unit>
        <trans-unit id="c620f5ed9b475e8a05d4bd8c8511a64bdd8fb857" translate="yes" xml:space="preserve">
          <source>Perl modules are not the only tools a performance analyst has at their disposal, system tools like &lt;code&gt;time&lt;/code&gt; should not be overlooked as the next example shows, where we take a quick look at sorting. Many books, theses and articles, have been written about efficient sorting algorithms, and this is not the place to repeat such work, there's several good sorting modules which deserve taking a look at too: &lt;code&gt;Sort::Maker&lt;/code&gt;, &lt;code&gt;Sort::Key&lt;/code&gt; spring to mind. However, it's still possible to make some observations on certain Perl specific interpretations on issues relating to sorting data sets and give an example or two with regard to how sorting large data volumes can effect performance. Firstly, an often overlooked point when sorting large amounts of data, one can attempt to reduce the data set to be dealt with and in many cases &lt;code&gt;grep()&lt;/code&gt; can be quite useful as a simple filter:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c8ed366b21e1c4b28e58fe8a9ca47a44e9e81f0c" translate="yes" xml:space="preserve">
          <source>Perl modules included on CPAN have a naming hierarchy you should try to fit in with. See &lt;a href=&quot;perlmodlib&quot;&gt;perlmodlib&lt;/a&gt; for more details on how this works, and browse around CPAN and the modules list to get a feel of it. At the very least, remember this: modules should be title capitalised, (This::Thing) fit in with a category, and explain their purpose succinctly.</source>
          <target state="translated">Модули Perl, включенные в CPAN, имеют иерархию именования, которой вы должны попытаться соответствовать. См. &lt;a href=&quot;perlmodlib&quot;&gt;Perlmodlib&lt;/a&gt; для более подробной информации о том, как это работает, и просмотрите CPAN и список модулей, чтобы почувствовать это. По крайней мере, запомните следующее: названия модулей должны начинаться с заглавной буквы, (This :: Thing) соответствовать категории и кратко объяснять их назначение.</target>
        </trans-unit>
        <trans-unit id="16a1215b63adeb8dd991dd695ae42ffb9a1eb457" translate="yes" xml:space="preserve">
          <source>Perl modules provide a range of features to help you avoid reinventing the wheel, and can be downloaded from CPAN ( &lt;a href=&quot;http://www.cpan.org/&quot;&gt;http://www.cpan.org/&lt;/a&gt; ). A number of popular modules are included with the Perl distribution itself.</source>
          <target state="translated">Модули Perl предоставляют ряд функций, которые помогут вам не изобретать колесо, и их можно загрузить с CPAN ( &lt;a href=&quot;http://www.cpan.org/&quot;&gt;http://www.cpan.org/&lt;/a&gt; ). Ряд популярных модулей включен в сам дистрибутив Perl.</target>
        </trans-unit>
        <trans-unit id="4baa5fc19e15bb718240e4d275bac1fb00891783" translate="yes" xml:space="preserve">
          <source>Perl mongers</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d1cd3ab508bb28b102f16c9bbb53b67e972c7a2d" translate="yes" xml:space="preserve">
          <source>Perl must be compiled with the &lt;code&gt;-Dusedtrace&lt;/code&gt; option in order to make use of the provided probes. While DTrace aims to have no overhead when its instrumentation is not active, Perl's support itself cannot uphold that guarantee, so it is built without DTrace probes under most systems. One notable exception is that Mac OS X ships a</source>
          <target state="translated">Perl должен быть скомпилирован с опцией &lt;code&gt;-Dusedtrace&lt;/code&gt; , чтобы можно было использовать предоставленные зонды. В то время как DTrace стремится не иметь накладных расходов, когда его инструментарий не активен, сама поддержка Perl не может обеспечить эту гарантию, поэтому в большинстве систем он построен без зондов DTrace. Заметным исключением является то, что Mac OS X поставляет</target>
        </trans-unit>
        <trans-unit id="4f0521c787f7204ca515e6ab4a24e34133e68740" translate="yes" xml:space="preserve">
          <source>Perl never issued a deprecation warning for this; the deprecation was by documentation policy only. But this deprecation has been lifted as of Perl 5.26.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7959a78b422ac56c4b5d4bc26bed7e5e49a45d2d" translate="yes" xml:space="preserve">
          <source>Perl normally assumes character semantics in the presence of character data (i.e. data that has come from a source that has been marked as being of a particular character encoding). When &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; bytes&lt;/code&gt; is in effect, the encoding is temporarily ignored, and each string is treated as a series of bytes.</source>
          <target state="translated">Perl обычно предполагает семантику символов при наличии символьных данных (т. Е. Данных, которые поступают из источника, который был помечен как имеющий определенную кодировку символов). Когда действует &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; bytes&lt;/code&gt; , кодировка временно игнорируется, и каждая строка обрабатывается как серия байтов.</target>
        </trans-unit>
        <trans-unit id="1b90be8b391bd63ee34d9c789dadd260ffcc448a" translate="yes" xml:space="preserve">
          <source>Perl normally buffers output so it doesn't make a system call for every bit of output. By saving up output, it makes fewer expensive system calls. For instance, in this little bit of code, you want to print a dot to the screen for every line you process to watch the progress of your program. Instead of seeing a dot for every line, Perl buffers the output and you have a long wait before you see a row of 50 dots all at once:</source>
          <target state="translated">Perl обычно выводит буферы,так что он не делает системный вызов для каждого бита вывода.Экономия на выходе делает менее дорогостоящими системные звонки.Например,в этом маленьком кусочке кода,вы хотите распечатать точку на экране для каждой строки,которую вы обрабатываете,чтобы наблюдать за прогрессом вашей программы.Вместо того,чтобы видеть точку для каждой строки,Perl буферизует вывод,и у вас есть долгое ожидание,прежде чем вы увидите строку из 50 точек все сразу:</target>
        </trans-unit>
        <trans-unit id="431e8ad9293b07f5bdc791f87a08a93d077e2bfe" translate="yes" xml:space="preserve">
          <source>Perl now builds with FreeMiNT/Atari. It fails a few tests, that needs some investigation.</source>
          <target state="translated">Perl теперь собирается с FreeMiNT/Atari.Он терпит неудачу в нескольких тестах,что требует некоторого расследования.</target>
        </trans-unit>
        <trans-unit id="a3e768752fac3a285306cd9e651f17f9a775de00" translate="yes" xml:space="preserve">
          <source>Perl officially stands for Practical Extraction and Report Language, except when it doesn't.</source>
          <target state="translated">Perl официально означает &quot;Practical Extraction and Report Language&quot; (Практический язык извлечения и составления отчетов),за исключением случаев,когда это не так.</target>
        </trans-unit>
        <trans-unit id="b0646278b43c189bd46c39a69a1dddf12d2a1a29" translate="yes" xml:space="preserve">
          <source>Perl on ILE</source>
          <target state="translated">Перл на ILE</target>
        </trans-unit>
        <trans-unit id="880fc5c1aef63a3507fd91075a126effdad077b7" translate="yes" xml:space="preserve">
          <source>Perl on VMS can accept either VMS- or Unix-style file specifications as in either of the following:</source>
          <target state="translated">Perl на VMS может принимать спецификации файлов в стиле VMS или Unix,как в одном из следующих пунктов:</target>
        </trans-unit>
        <trans-unit id="4e6cb5edd48ea8ec698a9fa2e92cd3f38a3692ce" translate="yes" xml:space="preserve">
          <source>Perl on VMS is discussed in &lt;a href=&quot;perlvms&quot;&gt;perlvms&lt;/a&gt; in the Perl distribution.</source>
          <target state="translated">Perl для VMS обсуждается в &lt;a href=&quot;perlvms&quot;&gt;perlvms&lt;/a&gt; в дистрибутиве Perl.</target>
        </trans-unit>
        <trans-unit id="d5aebe7d6ab79a49ac64f2ccd625e787536b0d61" translate="yes" xml:space="preserve">
          <source>Perl on VMS supports an emulation of the forked debugger when Perl is run on a VMS system that has X11 support installed.</source>
          <target state="translated">Perl на VMS поддерживает эмуляцию вилочного отладчика,когда Perl запускается на системе VMS,в которой установлена поддержка X11.</target>
        </trans-unit>
        <trans-unit id="e4268b27ba1ef13a83b583c860e24d2f36fbf4ec" translate="yes" xml:space="preserve">
          <source>Perl on VOS (also known as OpenVOS) is discussed in</source>
          <target state="translated">Perl на VOS (также известный как OpenVOS)обсуждается в разделе</target>
        </trans-unit>
        <trans-unit id="30b19fafc5c58735f6b1d4a22aac29cb87b533e0" translate="yes" xml:space="preserve">
          <source>Perl only implements the full form of casefolding, but you can access the simple folds using &lt;a href=&quot;../unicode/ucd#casefold()&quot;&gt;casefold() in Unicode::UCD&lt;/a&gt; and &lt;a href=&quot;../unicode/ucd#prop_invmap()&quot;&gt;prop_invmap() in Unicode::UCD&lt;/a&gt;. For further information on casefolding, refer to the Unicode Standard, specifically sections 3.13 &lt;code&gt;Default Case Operations&lt;/code&gt; , 4.2 &lt;code&gt;Case-Normative&lt;/code&gt; , and 5.18 &lt;code&gt;Case Mappings&lt;/code&gt; , available at &lt;a href=&quot;http://www.unicode.org/versions/latest/&quot;&gt;http://www.unicode.org/versions/latest/&lt;/a&gt;, as well as the Case Charts available at &lt;a href=&quot;http://www.unicode.org/charts/case/&quot;&gt;http://www.unicode.org/charts/case/&lt;/a&gt;.</source>
          <target state="translated">Perl реализует только полную форму сворачивания, но вы можете получить доступ к простым &lt;a href=&quot;../unicode/ucd#casefold()&quot;&gt;сверткам,&lt;/a&gt; используя casefold () в Unicode :: UCD и &lt;a href=&quot;../unicode/ucd#prop_invmap()&quot;&gt;prop_invmap () в Unicode :: UCD&lt;/a&gt; . Для получения дополнительной информации о сворачивании регистра см. Стандарт Unicode, в частности разделы 3.13 &lt;code&gt;Default Case Operations&lt;/code&gt; с регистром по умолчанию , 4.2 &lt;code&gt;Case-Normative&lt;/code&gt; &lt;code&gt;Case Mappings&lt;/code&gt; и 5.18 Отображение регистра , доступные по адресу &lt;a href=&quot;http://www.unicode.org/versions/latest/&quot;&gt;http://www.unicode.org/versions/latest/&lt;/a&gt; , а также Таблицы случаев доступны на &lt;a href=&quot;http://www.unicode.org/charts/case/&quot;&gt;http://www.unicode.org/charts/case/&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="ec15f965c51c1ac480bfbe6c5c4b87645989a486" translate="yes" xml:space="preserve">
          <source>Perl only implements the full form of casefolding, but you can access the simple folds using &lt;a href=&quot;Unicode::UCD#casefold%28%29&quot;&gt;&quot;&lt;b&gt;casefold()&lt;/b&gt;&quot; in Unicode::UCD&lt;/a&gt; and &lt;a href=&quot;Unicode::UCD#prop_invmap%28%29&quot;&gt;&quot;&lt;b&gt;prop_invmap()&lt;/b&gt;&quot; in Unicode::UCD&lt;/a&gt;. For further information on casefolding, refer to the Unicode Standard, specifically sections 3.13 &lt;code&gt;Default Case Operations&lt;/code&gt;, 4.2 &lt;code&gt;Case-Normative&lt;/code&gt;, and 5.18 &lt;code&gt;Case Mappings&lt;/code&gt;, available at &lt;a href=&quot;https://www.unicode.org/versions/latest/&quot;&gt;https://www.unicode.org/versions/latest/&lt;/a&gt;, as well as the Case Charts available at &lt;a href=&quot;https://www.unicode.org/charts/case/&quot;&gt;https://www.unicode.org/charts/case/&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="03ce9ffc7efddb5ffb70fe53243d42ea4fbb733a" translate="yes" xml:space="preserve">
          <source>Perl only implements the full form of casefolding, but you can access the simple folds using &lt;a href=&quot;unicode/ucd#casefold()&quot;&gt;casefold() in Unicode::UCD&lt;/a&gt; and &lt;a href=&quot;unicode/ucd#prop_invmap()&quot;&gt;prop_invmap() in Unicode::UCD&lt;/a&gt;. For further information on casefolding, refer to the Unicode Standard, specifically sections 3.13 &lt;code&gt;Default Case Operations&lt;/code&gt; , 4.2 &lt;code&gt;Case-Normative&lt;/code&gt; , and 5.18 &lt;code&gt;Case Mappings&lt;/code&gt; , available at &lt;a href=&quot;http://www.unicode.org/versions/latest/&quot;&gt;http://www.unicode.org/versions/latest/&lt;/a&gt;, as well as the Case Charts available at &lt;a href=&quot;http://www.unicode.org/charts/case/&quot;&gt;http://www.unicode.org/charts/case/&lt;/a&gt;.</source>
          <target state="translated">Perl реализует только полную форму сворачивания, но вы можете получить доступ к простым &lt;a href=&quot;unicode/ucd#casefold()&quot;&gt;сверткам,&lt;/a&gt; используя casefold () в Unicode :: UCD и &lt;a href=&quot;unicode/ucd#prop_invmap()&quot;&gt;prop_invmap () в Unicode :: UCD&lt;/a&gt; . Для получения дополнительной информации о сворачивании регистра см. Стандарт Unicode, в частности разделы 3.13 &lt;code&gt;Default Case Operations&lt;/code&gt; с регистром по умолчанию , 4.2 &lt;code&gt;Case-Normative&lt;/code&gt; &lt;code&gt;Case Mappings&lt;/code&gt; и 5.18 Отображение регистра , доступные по адресу &lt;a href=&quot;http://www.unicode.org/versions/latest/&quot;&gt;http://www.unicode.org/versions/latest/&lt;/a&gt; , а также Таблицы случаев доступны на &lt;a href=&quot;http://www.unicode.org/charts/case/&quot;&gt;http://www.unicode.org/charts/case/&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="afa3b7b0cef4f08dacda3735ba0561143481e189" translate="yes" xml:space="preserve">
          <source>Perl operations which take a numeric argument treat that argument in one of four different ways: they may force it to one of the integer/floating/ string formats, or they may behave differently depending on the format of the operand. Forcing a numeric value to a particular format does not change the number stored in the value.</source>
          <target state="translated">Операции Perl,которые принимают числовой аргумент,обрабатывают этот аргумент одним из четырех различных способов:они могут принуждать его к одному из форматов целого/плавающего/строкового,или они могут вести себя по-разному в зависимости от формата операндов.Принуждение числового значения к определённому формату не изменяет числа,сохранённого в значении.</target>
        </trans-unit>
        <trans-unit id="2e266081b45b4d898d18421d1048baf2bfd24b32" translate="yes" xml:space="preserve">
          <source>Perl operators are documented in full in &lt;a href=&quot;perlop&quot;&gt;perlop&lt;/a&gt;, but here are a few of the most common ones:</source>
          <target state="translated">Операторы Perl полностью документированы в &lt;a href=&quot;perlop&quot;&gt;perlop&lt;/a&gt; , но вот некоторые из наиболее распространенных:</target>
        </trans-unit>
        <trans-unit id="f67a6a1b456cb0e8982256ff29539f81c3619324" translate="yes" xml:space="preserve">
          <source>Perl operators have the following associativity and precedence, listed from highest precedence to lowest. Operators borrowed from C keep the same precedence relationship with each other, even where C's precedence is slightly screwy. (This makes learning Perl easier for C folks.) With very few exceptions, these all operate on scalar values only, not array values.</source>
          <target state="translated">Операторы Perl имеют следующую ассоциативность и приоритет,перечисленные от самого высокого приоритета до самого низкого.Операторы,заимствованные из C,сохраняют одинаковые отношения приоритета друг с другом,даже если приоритет C слегка неаккуратный.(Это облегчает изучение Perl для людей с C.)За редким исключением,все они работают только со скалярными значениями,а не со значениями массива.</target>
        </trans-unit>
        <trans-unit id="979c77e2112ac6d101931348fcf8adccee72ed6b" translate="yes" xml:space="preserve">
          <source>Perl operators that return true or false generally return values that can be safely used as numbers. For example, the relational operators in this section and the equality operators in the next one return &lt;code&gt;1&lt;/code&gt; for true and a special version of the defined empty string, &lt;code&gt;&quot;&quot;&lt;/code&gt; , which counts as a zero but is exempt from warnings about improper numeric conversions, just as &lt;code&gt;&quot;0 but true&quot;&lt;/code&gt; is.</source>
          <target state="translated">Операторы Perl, возвращающие истину или ложь, обычно возвращают значения, которые можно безопасно использовать как числа. Например, реляционные операторы в этом разделе и операторы равенства в следующем возвращают &lt;code&gt;1&lt;/code&gt; для истины и специальную версию определенной пустой строки &lt;code&gt;&quot;&quot;&lt;/code&gt; , которая считается нулем, но не содержит предупреждений о неправильных числовых преобразованиях, просто как &lt;code&gt;&quot;0 but true&quot;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="677a0f4b34098e3ab8a940f648ce50dea2fe1b35" translate="yes" xml:space="preserve">
          <source>Perl operators that return true or false generally return values that can be safely used as numbers. For example, the relational operators in this section and the equality operators in the next one return &lt;code&gt;1&lt;/code&gt; for true and a special version of the defined empty string, &lt;code&gt;&quot;&quot;&lt;/code&gt;, which counts as a zero but is exempt from warnings about improper numeric conversions, just as &lt;code&gt;&quot;0 but true&quot;&lt;/code&gt; is.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="93117613e1464552c05f74263a894f716b02c8a7" translate="yes" xml:space="preserve">
          <source>Perl packages may be nested inside other package names, so we can have package names containing &lt;code&gt;::&lt;/code&gt; . But if we used that package name directly as a filename it would make for unwieldy or impossible filenames on some systems. Therefore, if a module's name is, say, &lt;code&gt;Text::Soundex&lt;/code&gt; , then its definition is actually found in the library file</source>
          <target state="translated">Пакеты Perl могут быть вложены в другие имена пакетов, поэтому мы можем иметь имена пакетов, содержащие &lt;code&gt;::&lt;/code&gt; . Но если бы мы использовали это имя пакета непосредственно как имя файла, это сделало бы имена файлов громоздкими или невозможными в некоторых системах. Следовательно, если имя модуля, скажем, &lt;code&gt;Text::Soundex&lt;/code&gt; , то его определение фактически находится в файле библиотеки.</target>
        </trans-unit>
        <trans-unit id="216db03ab75c4e916969b56dae5407299d192ab7" translate="yes" xml:space="preserve">
          <source>Perl packages may be nested inside other package names, so we can have package names containing &lt;code&gt;::&lt;/code&gt;. But if we used that package name directly as a filename it would make for unwieldy or impossible filenames on some systems. Therefore, if a module's name is, say, &lt;code&gt;Text::Soundex&lt;/code&gt;, then its definition is actually found in the library file</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="07d7fb295d5657e201671476cb88a17b37a54746" translate="yes" xml:space="preserve">
          <source>Perl pragma for deprecating the core version of a module</source>
          <target state="translated">Перл-прагма для снижения эффективности базовой версии модуля</target>
        </trans-unit>
        <trans-unit id="b96fac04186779fda96ab3e9ac74bb9de167238d" translate="yes" xml:space="preserve">
          <source>Perl pragma for deprecating the inclusion of a module in core</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4ff2d9baf63466a443978236f7b7cb1cc8bd8db5" translate="yes" xml:space="preserve">
          <source>Perl prefers to &lt;code&gt;dup&lt;/code&gt; the new low-level descriptor to the descriptor used by the existing PerlIO. This may become the behaviour of this function in the future.</source>
          <target state="translated">Perl предпочитает &lt;code&gt;dup&lt;/code&gt; новый дескриптор нижнего уровня на дескриптор, используемый существующим PerlIO. Это может стать поведением этой функции в будущем.</target>
        </trans-unit>
        <trans-unit id="c2ad17b9a58ab83af39d92dc2a0f734f0896297e" translate="yes" xml:space="preserve">
          <source>Perl programs are just plain text, so any editor will do.</source>
          <target state="translated">Программы на Perl-это простой текст,так что любой редактор подойдет.</target>
        </trans-unit>
        <trans-unit id="14cf61d2a257794aa1f24ba3ebb61b26c9fd6acc" translate="yes" xml:space="preserve">
          <source>Perl promises, that if we ever add regular expression pattern metacharacters to the dozen already defined (&lt;code&gt;\ | ( ) [ { ^ $ * + ? .&lt;/code&gt; ), that we will only use ones that have the Pattern_Syntax property. Perl also promises, that if we ever add characters that are considered to be white space in regular expressions (currently mostly affected by &lt;code&gt;/x&lt;/code&gt;), they will all have the Pattern_White_Space property.</source>
          <target state="translated">Perl обещает, что если мы когда-нибудь добавим метасимволы шаблона регулярного выражения к дюжине уже определенных ( &lt;code&gt;\ | ( ) [ { ^ $ * + ? .&lt;/code&gt; ), То мы будем использовать только те, которые имеют свойство Pattern_Syntax. Perl также обещает, что если мы когда-нибудь добавим символы, которые считаются пробелами в регулярных выражениях (в настоящее время в основном затрагиваются &lt;code&gt;/x&lt;/code&gt; ), все они будут иметь свойство Pattern_White_Space.</target>
        </trans-unit>
        <trans-unit id="327076e1125cbcba12ce50958edba776f9d04697" translate="yes" xml:space="preserve">
          <source>Perl promises, that if we ever add regular expression pattern metacharacters to the dozen already defined (&lt;code&gt;\ | ( ) [ { ^ $ * + ? .&lt;/code&gt;), that we will only use ones that have the Pattern_Syntax property. Perl also promises, that if we ever add characters that are considered to be white space in regular expressions (currently mostly affected by &lt;code&gt;/x&lt;/code&gt;), they will all have the Pattern_White_Space property.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="67b6495ec04782f446ea386cb264b80a6975aeb6" translate="yes" xml:space="preserve">
          <source>Perl provides a centralized management of these resources:</source>
          <target state="translated">Perl обеспечивает централизованное управление этими ресурсами:</target>
        </trans-unit>
        <trans-unit id="d5560f27b86924c423060a2b1fc2c1981aafcb97" translate="yes" xml:space="preserve">
          <source>Perl provides a fork() keyword that corresponds to the Unix system call of the same name. On most Unix-like platforms where the fork() system call is available, Perl's fork() simply calls it.</source>
          <target state="translated">Perl предоставляет ключевое слово fork(),которое соответствует одноименному системному вызову Unix.На большинстве Unix-подобных платформ,где доступен системный вызов fork(),Perl просто вызывает его.</target>
        </trans-unit>
        <trans-unit id="de3af496d08feb146e6538a70938f9e1c88a9d41" translate="yes" xml:space="preserve">
          <source>Perl provides a mechanism for alternative namespaces to protect packages from stomping on each other's variables. In fact, there's really no such thing as a global variable in Perl. The package statement declares the compilation unit as being in the given namespace. The scope of the package declaration is from the declaration itself through the end of the enclosing block, &lt;code&gt;&lt;a href=&quot;functions/eval&quot;&gt;eval&lt;/a&gt;&lt;/code&gt;, or file, whichever comes first (the same scope as the my() and local() operators). Unqualified dynamic identifiers will be in this namespace, except for those few identifiers that if unqualified, default to the main package instead of the current one as described below. A package statement affects only dynamic variables--including those you've used local() on--but</source>
          <target state="translated">Perl предоставляет механизм для альтернативных пространств имен для защиты пакетов от перехвата переменных друг друга. На самом деле в Perl нет такой вещи, как глобальная переменная. Оператор package объявляет, что модуль компиляции находится в данном пространстве имен. Область действия объявления пакета - от самого объявления до конца включающего блока, &lt;code&gt;&lt;a href=&quot;functions/eval&quot;&gt;eval&lt;/a&gt;&lt;/code&gt; или файла, в зависимости от того, что наступит раньше (та же область, что и у операторов my () и local ()). Неквалифицированные динамические идентификаторы будут в этом пространстве имен, за исключением тех немногих идентификаторов, которые, если они не определены, по умолчанию используются для основного пакета, а не для текущего, как описано ниже. Оператор пакета влияет только на динамические переменные, включая те, для которых вы использовали local (), но</target>
        </trans-unit>
        <trans-unit id="73112f265f6b41c74dc1c4f6ba58a9aa61493def" translate="yes" xml:space="preserve">
          <source>Perl provides a number of mechanisms to coordinate the interactions between themselves and their data, to avoid race conditions and the like. Some of these are designed to resemble the common techniques used in thread libraries such as &lt;code&gt;pthreads&lt;/code&gt; ; others are Perl-specific. Often, the standard techniques are clumsy and difficult to get right (such as condition waits). Where possible, it is usually easier to use Perlish techniques such as queues, which remove some of the hard work involved.</source>
          <target state="translated">Perl предоставляет ряд механизмов для координации взаимодействия между ними и их данными, чтобы избежать состояний гонки и тому подобного. Некоторые из них разработаны, чтобы напоминать общие методы, используемые в библиотеках потоков, таких как &lt;code&gt;pthreads&lt;/code&gt; ; другие специфичны для Perl. Часто стандартные методы неуклюжие, и их сложно понять (например, ожидание условий). Там, где это возможно, обычно проще использовать методы Perlish, такие как очереди, которые снимают часть тяжелой работы.</target>
        </trans-unit>
        <trans-unit id="2033b0d4b88c366862ed2f9bb35924fa40e4eea4" translate="yes" xml:space="preserve">
          <source>Perl provides a number of mechanisms to coordinate the interactions between themselves and their data, to avoid race conditions and the like. Some of these are designed to resemble the common techniques used in thread libraries such as &lt;code&gt;pthreads&lt;/code&gt;; others are Perl-specific. Often, the standard techniques are clumsy and difficult to get right (such as condition waits). Where possible, it is usually easier to use Perlish techniques such as queues, which remove some of the hard work involved.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="36e7e1ce7a021b749d35bdf6f3b510a2bf8dd56c" translate="yes" xml:space="preserve">
          <source>Perl provides a reasonably safe way to open a file or pipe from a setuid or setgid program: just create a child process with reduced privilege who does the dirty work for you. First, fork a child using the special &lt;code&gt;&lt;a href=&quot;functions/open&quot;&gt;open&lt;/a&gt;&lt;/code&gt; syntax that connects the parent and child by a pipe. Now the child resets its ID set and any other per-process attributes, like environment variables, umasks, current working directories, back to the originals or known safe values. Then the child process, which no longer has any special permissions, does the &lt;code&gt;&lt;a href=&quot;functions/open&quot;&gt;open&lt;/a&gt;&lt;/code&gt; or other system call. Finally, the child passes the data it managed to access back to the parent. Because the file or pipe was opened in the child while running under less privilege than the parent, it's not apt to be tricked into doing something it shouldn't.</source>
          <target state="translated">Perl предоставляет достаточно безопасный способ открыть файл или канал из программы setuid или setgid: просто создайте дочерний процесс с ограниченными правами, который сделает за вас грязную работу. Сначала создайте вилку дочернего элемента, используя специальный &lt;code&gt;&lt;a href=&quot;functions/open&quot;&gt;open&lt;/a&gt;&lt;/code&gt; синтаксис, который соединяет родительский и дочерний элемент конвейером. Теперь дочерний элемент сбрасывает свой набор идентификаторов и любые другие атрибуты процесса, такие как переменные среды, umasks, текущие рабочие каталоги, обратно к исходным или известным безопасным значениям. Затем дочерний процесс, у которого больше нет специальных разрешений, выполняет &lt;code&gt;&lt;a href=&quot;functions/open&quot;&gt;open&lt;/a&gt;&lt;/code&gt; или другой системный вызов. Наконец, дочерний элемент передает данные, к которым ему удалось получить доступ, обратно родительскому элементу. Поскольку файл или канал был открыт в дочернем элементе, когда он выполнялся с меньшими привилегиями, чем родительский, его нельзя обмануть, заставив делать что-то, чего он не должен.</target>
        </trans-unit>
        <trans-unit id="6e7a421d4f41bbc8f45292eb6fb0c23e47fd47d6" translate="yes" xml:space="preserve">
          <source>Perl provides a reasonably safe way to open a file or pipe from a setuid or setgid program: just create a child process with reduced privilege who does the dirty work for you. First, fork a child using the special &lt;code&gt;open&lt;/code&gt; syntax that connects the parent and child by a pipe. Now the child resets its ID set and any other per-process attributes, like environment variables, umasks, current working directories, back to the originals or known safe values. Then the child process, which no longer has any special permissions, does the &lt;code&gt;open&lt;/code&gt; or other system call. Finally, the child passes the data it managed to access back to the parent. Because the file or pipe was opened in the child while running under less privilege than the parent, it's not apt to be tricked into doing something it shouldn't.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="01b6956704a1caccc5f1a829b2f6df16370a9f29" translate="yes" xml:space="preserve">
          <source>Perl provides many macros to assist in accessing the Perl stack. Wherever possible, these macros should always be used when interfacing to Perl internals. We hope this should make the code less vulnerable to any changes made to Perl in the future.</source>
          <target state="translated">Perl предоставляет множество макросов для помощи в доступе к стеку Perl.По возможности,эти макросы всегда следует использовать при взаимодействии с внутренним содержимым Perl.Мы надеемся,что это сделает код менее уязвимым к любым изменениям,внесенным в Perl в будущем.</target>
        </trans-unit>
        <trans-unit id="8d83d3e4ff54e649960458ab09222a8186178865" translate="yes" xml:space="preserve">
          <source>Perl provides the function &lt;code&gt;sv_chop&lt;/code&gt; to efficiently remove characters from the beginning of a string; you give it an SV and a pointer to somewhere inside the PV, and it discards everything before the pointer. The efficiency comes by means of a little hack: instead of actually removing the characters, &lt;code&gt;sv_chop&lt;/code&gt; sets the flag &lt;code&gt;OOK&lt;/code&gt; (offset OK) to signal to other functions that the offset hack is in effect, and it moves the PV pointer (called &lt;code&gt;SvPVX&lt;/code&gt; ) forward by the number of bytes chopped off, and adjusts &lt;code&gt;SvCUR&lt;/code&gt; and &lt;code&gt;SvLEN&lt;/code&gt; accordingly. (A portion of the space between the old and new PV pointers is used to store the count of chopped bytes.)</source>
          <target state="translated">Perl предоставляет функцию &lt;code&gt;sv_chop&lt;/code&gt; для эффективного удаления символов из начала строки; вы даете ему SV и указатель где-то внутри PV, и он отбрасывает все, что находится перед указателем. Эффективность достигается за счет небольшого взлома: вместо фактического удаления символов &lt;code&gt;sv_chop&lt;/code&gt; устанавливает флаг &lt;code&gt;OOK&lt;/code&gt; (смещение ОК), чтобы сигнализировать другим функциям, что действует взлом смещения, и перемещает указатель PV (называемый &lt;code&gt;SvPVX&lt;/code&gt; ) вперед. по количеству &lt;code&gt;SvCUR&lt;/code&gt; байтов и соответственно корректирует SvCUR и &lt;code&gt;SvLEN&lt;/code&gt; . (Часть пространства между старым и новым указателями PV используется для хранения количества вырезанных байтов.)</target>
        </trans-unit>
        <trans-unit id="6f5d51550851e99636a22add4af85faee83cebcf" translate="yes" xml:space="preserve">
          <source>Perl provides the function &lt;code&gt;sv_chop&lt;/code&gt; to efficiently remove characters from the beginning of a string; you give it an SV and a pointer to somewhere inside the PV, and it discards everything before the pointer. The efficiency comes by means of a little hack: instead of actually removing the characters, &lt;code&gt;sv_chop&lt;/code&gt; sets the flag &lt;code&gt;OOK&lt;/code&gt; (offset OK) to signal to other functions that the offset hack is in effect, and it moves the PV pointer (called &lt;code&gt;SvPVX&lt;/code&gt;) forward by the number of bytes chopped off, and adjusts &lt;code&gt;SvCUR&lt;/code&gt; and &lt;code&gt;SvLEN&lt;/code&gt; accordingly. (A portion of the space between the old and new PV pointers is used to store the count of chopped bytes.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5b8c268aa39a037e84e8a60b81c199fef5923af6" translate="yes" xml:space="preserve">
          <source>Perl provides two API functions to evaluate pieces of Perl code. These are &lt;a href=&quot;perlapi#eval_sv&quot;&gt;&quot;eval_sv&quot; in perlapi&lt;/a&gt; and &lt;a href=&quot;perlapi#eval_pv&quot;&gt;&quot;eval_pv&quot; in perlapi&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9513d1ec6023b878e1b94840b432efff780b52df" translate="yes" xml:space="preserve">
          <source>Perl provides two API functions to evaluate pieces of Perl code. These are &lt;a href=&quot;perlapi#eval_sv&quot;&gt;eval_sv in perlapi&lt;/a&gt; and &lt;a href=&quot;perlapi#eval_pv&quot;&gt;eval_pv in perlapi&lt;/a&gt;.</source>
          <target state="translated">Perl предоставляет две функции API для оценки фрагментов кода Perl. Это &lt;a href=&quot;perlapi#eval_sv&quot;&gt;eval_sv в perlapi&lt;/a&gt; и &lt;a href=&quot;perlapi#eval_pv&quot;&gt;eval_pv в perlapi&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="ffb39ca049ef57e14f57d4751c1d1ac0f78a02d5" translate="yes" xml:space="preserve">
          <source>Perl recognizes the POSIX character classes &lt;code&gt;[=class=]&lt;/code&gt; and &lt;code&gt;[.class.]&lt;/code&gt;, but does not (yet?) support them. Any attempt to use either construct raises an exception.</source>
          <target state="translated">Perl распознает классы символов POSIX &lt;code&gt;[=class=]&lt;/code&gt; и &lt;code&gt;[.class.]&lt;/code&gt; , Но (пока?) Не поддерживает их. Любая попытка использовать любую конструкцию вызывает исключение.</target>
        </trans-unit>
        <trans-unit id="07f5219960a6f7bb8d18294a65d8b9d67281a7a2" translate="yes" xml:space="preserve">
          <source>Perl recognizes the following POSIX character classes:</source>
          <target state="translated">Perl распознает следующие классы символов POSIX:</target>
        </trans-unit>
        <trans-unit id="d60612137eda4aa3ff39ca1a5e535cbfedf6b435" translate="yes" xml:space="preserve">
          <source>Perl regexps also support backreferences, lookaheads, and all kinds of other complex details. Read all about them in &lt;a href=&quot;perlrequick&quot;&gt;perlrequick&lt;/a&gt;, &lt;a href=&quot;perlretut&quot;&gt;perlretut&lt;/a&gt;, and &lt;a href=&quot;perlre&quot;&gt;perlre&lt;/a&gt;.</source>
          <target state="translated">Регулярные выражения Perl также поддерживают обратные ссылки, просмотр вперед и все виды других сложных деталей. Прочтите о них все на &lt;a href=&quot;perlrequick&quot;&gt;perlrequick&lt;/a&gt; , &lt;a href=&quot;perlretut&quot;&gt;perlretut&lt;/a&gt; и &lt;a href=&quot;perlre&quot;&gt;perlre&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="aa3e77c17de568fb7fabddc21617e1e18fce47ab" translate="yes" xml:space="preserve">
          <source>Perl regexps can handle more than just the standard ASCII character set. Perl supports</source>
          <target state="translated">Perl-регеxps может обрабатывать не только стандартный набор ASCII-символов.Поддержка Perl</target>
        </trans-unit>
        <trans-unit id="d440475b129d32904159fb94e727dbef0d4e25d9" translate="yes" xml:space="preserve">
          <source>Perl regular expressions have a large range of character classes. Some of the character classes are written as a backslash sequence. We will briefly discuss those here; full details of character classes can be found in &lt;a href=&quot;perlrecharclass&quot;&gt;perlrecharclass&lt;/a&gt;.</source>
          <target state="translated">Регулярные выражения Perl имеют широкий диапазон классов символов. Некоторые классы символов записываются как последовательность обратной косой черты. Мы кратко обсудим их здесь; полную информацию о классах персонажей можно найти в &lt;a href=&quot;perlrecharclass&quot;&gt;perlrecharclass&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="8ae626456b6ab696d8a1f8c512b2605f948687bc" translate="yes" xml:space="preserve">
          <source>Perl relies on the underlying system for the implementation of &lt;code&gt;&lt;a href=&quot;functions/rand&quot;&gt;rand&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;functions/srand&quot;&gt;srand&lt;/a&gt;&lt;/code&gt;; on some systems, the generated numbers are not random enough (especially on Windows : see &lt;a href=&quot;http://www.perlmonks.org/?node_id=803632&quot;&gt;http://www.perlmonks.org/?node_id=803632&lt;/a&gt;). Several CPAN modules in the &lt;code&gt;Math&lt;/code&gt; namespace implement better pseudorandom generators; see for example &lt;a href=&quot;http://search.cpan.org/perldoc/Math::Random::MT&quot;&gt;Math::Random::MT&lt;/a&gt; (&quot;Mersenne Twister&quot;, fast), or &lt;a href=&quot;http://search.cpan.org/perldoc/Math::TrulyRandom&quot;&gt;Math::TrulyRandom&lt;/a&gt; (uses the imperfections in the system's timer to generate random numbers, which is rather slow). More algorithms for random numbers are described in &quot;Numerical Recipes in C&quot; at &lt;a href=&quot;http://www.nr.com/&quot;&gt;http://www.nr.com/&lt;/a&gt;</source>
          <target state="translated">Perl полагается на базовую систему для реализации &lt;code&gt;&lt;a href=&quot;functions/rand&quot;&gt;rand&lt;/a&gt;&lt;/code&gt; и &lt;code&gt;&lt;a href=&quot;functions/srand&quot;&gt;srand&lt;/a&gt;&lt;/code&gt; ; в некоторых системах сгенерированные числа недостаточно случайны (особенно в Windows: см. &lt;a href=&quot;http://www.perlmonks.org/?node_id=803632&quot;&gt;http://www.perlmonks.org/?node_id=803632&lt;/a&gt; ). Несколько модулей CPAN в пространстве имен &lt;code&gt;Math&lt;/code&gt; реализуют более совершенные генераторы псевдослучайных сигналов; см., например, &lt;a href=&quot;http://search.cpan.org/perldoc/Math::Random::MT&quot;&gt;Math :: Random :: MT&lt;/a&gt; (&quot;Mersenne Twister&quot;, быстро) или &lt;a href=&quot;http://search.cpan.org/perldoc/Math::TrulyRandom&quot;&gt;Math :: TrulyRandom&lt;/a&gt; (использует недостатки системного таймера для генерации случайных чисел, что довольно медленно). Дополнительные алгоритмы для случайных чисел описаны в &amp;laquo;Числовых рецептах на языке C&amp;raquo; на &lt;a href=&quot;http://www.nr.com/&quot;&gt;http://www.nr.com/&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="3f12ff9832e26034f1b71096dd8784c68818bdcd" translate="yes" xml:space="preserve">
          <source>Perl relies on the underlying system for the implementation of &lt;code&gt;rand&lt;/code&gt; and &lt;code&gt;srand&lt;/code&gt;; on some systems, the generated numbers are not random enough (especially on Windows : see &lt;a href=&quot;http://www.perlmonks.org/?node_id=803632&quot;&gt;http://www.perlmonks.org/?node_id=803632&lt;/a&gt;). Several CPAN modules in the &lt;code&gt;Math&lt;/code&gt; namespace implement better pseudorandom generators; see for example &lt;a href=&quot;Math::Random::MT&quot;&gt;Math::Random::MT&lt;/a&gt; (&quot;Mersenne Twister&quot;, fast), or &lt;a href=&quot;Math::TrulyRandom&quot;&gt;Math::TrulyRandom&lt;/a&gt; (uses the imperfections in the system's timer to generate random numbers, which is rather slow). More algorithms for random numbers are described in &quot;Numerical Recipes in C&quot; at &lt;a href=&quot;http://www.nr.com/&quot;&gt;http://www.nr.com/&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5e8b101afd4e3699b22d8dd044a2afe59a2e5739" translate="yes" xml:space="preserve">
          <source>Perl requires braces following &lt;code&gt;if&lt;/code&gt; , &lt;code&gt;while&lt;/code&gt; , &lt;code&gt;foreach&lt;/code&gt; , etc.</source>
          <target state="translated">Perl требует фигурных скобок, следующих за &lt;code&gt;if&lt;/code&gt; , &lt;code&gt;while&lt;/code&gt; , &lt;code&gt;foreach&lt;/code&gt; и т. Д.</target>
        </trans-unit>
        <trans-unit id="da6e3123b7e4ffb6fc9eae18f7c7e43c09ee3028" translate="yes" xml:space="preserve">
          <source>Perl requires braces following &lt;code&gt;if&lt;/code&gt;, &lt;code&gt;while&lt;/code&gt;, &lt;code&gt;foreach&lt;/code&gt;, etc.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="baeb92759bd60617241bdfef388270964c6488e2" translate="yes" xml:space="preserve">
          <source>Perl requires semicolons to separate statements.</source>
          <target state="translated">Perl требует точки с запятой,чтобы разделить утверждения.</target>
        </trans-unit>
        <trans-unit id="e643a23b551f0082edc8c39f350e57fa7da27bfb" translate="yes" xml:space="preserve">
          <source>Perl resolves this dilemma by transparently calling a copy constructor before calling a method defined to implement a mutator (&lt;code&gt;--&lt;/code&gt; , &lt;code&gt;+=&lt;/code&gt; , and so on.). In the above example, when Perl reaches the decrement statement, it makes a copy of the object data in &lt;code&gt;$a&lt;/code&gt; and assigns to &lt;code&gt;$a&lt;/code&gt; a reference to the copied data. Only then does it call &lt;code&gt;decr()&lt;/code&gt; , which alters the copied data, leaving &lt;code&gt;$b&lt;/code&gt; unchanged. Thus the object metaphor is preserved as far as possible, while mathemagical operations still work according to the arithmetic metaphor.</source>
          <target state="translated">Perl решает эту дилемму, прозрачно вызывая конструктор копирования перед вызовом метода, определенного для реализации мутатора ( &lt;code&gt;--&lt;/code&gt; , &lt;code&gt;+=&lt;/code&gt; и т. Д.). В приведенном выше примере, когда Perl достигает оператора декремента, он делает копию данных объекта в &lt;code&gt;$a&lt;/code&gt; и присваивает &lt;code&gt;$a&lt;/code&gt; a ссылку на скопированные данные. Только после этого он вызывает &lt;code&gt;decr()&lt;/code&gt; , которая изменяет скопированные данные, оставляя &lt;code&gt;$b&lt;/code&gt; без изменений. Таким образом, метафора объекта сохраняется, насколько это возможно, в то время как математические операции по-прежнему работают в соответствии с арифметической метафорой.</target>
        </trans-unit>
        <trans-unit id="1602dd24bebfca9ce4871cb5fb94135e37cae349" translate="yes" xml:space="preserve">
          <source>Perl resolves this dilemma by transparently calling a copy constructor before calling a method defined to implement a mutator (&lt;code&gt;--&lt;/code&gt;, &lt;code&gt;+=&lt;/code&gt;, and so on.). In the above example, when Perl reaches the decrement statement, it makes a copy of the object data in &lt;code&gt;$a&lt;/code&gt; and assigns to &lt;code&gt;$a&lt;/code&gt; a reference to the copied data. Only then does it call &lt;code&gt;decr()&lt;/code&gt;, which alters the copied data, leaving &lt;code&gt;$b&lt;/code&gt; unchanged. Thus the object metaphor is preserved as far as possible, while mathemagical operations still work according to the arithmetic metaphor.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e718ff2371b8bf00697a05f6ee1339b450bff042" translate="yes" xml:space="preserve">
          <source>Perl runs &lt;code&gt;&lt;a href=&quot;functions/require&quot;&gt;require&lt;/a&gt;&lt;/code&gt; statement at run-time. Once Perl loads, compiles, and runs the file, it doesn't do anything else. The &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt;&lt;/code&gt; statement is the same as a &lt;code&gt;&lt;a href=&quot;functions/require&quot;&gt;require&lt;/a&gt;&lt;/code&gt; run at compile-time, but Perl also calls the &lt;code&gt;&lt;a href=&quot;functions/import&quot;&gt;import&lt;/a&gt;&lt;/code&gt; method for the loaded package. These two are the same:</source>
          <target state="translated">Perl запускает оператор &lt;code&gt;&lt;a href=&quot;functions/require&quot;&gt;require&lt;/a&gt;&lt;/code&gt; во время выполнения. После того, как Perl загружает, компилирует и запускает файл, он больше ничего не делает. Оператор &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt;&lt;/code&gt; совпадает с оператором &lt;code&gt;&lt;a href=&quot;functions/require&quot;&gt;require&lt;/a&gt;&lt;/code&gt; во время компиляции, но Perl также вызывает метод &lt;code&gt;&lt;a href=&quot;functions/import&quot;&gt;import&lt;/a&gt;&lt;/code&gt; для загруженного пакета. Эти два одинаковые:</target>
        </trans-unit>
        <trans-unit id="98f089278b6995b15f2d41746ee27d2688f96f52" translate="yes" xml:space="preserve">
          <source>Perl runs &lt;code&gt;require&lt;/code&gt; statement at run-time. Once Perl loads, compiles, and runs the file, it doesn't do anything else. The &lt;code&gt;use&lt;/code&gt; statement is the same as a &lt;code&gt;require&lt;/code&gt; run at compile-time, but Perl also calls the &lt;code&gt;import&lt;/code&gt; method for the loaded package. These two are the same:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="49c228222cbce8f7e3a32ff65352e2b7ebaf362f" translate="yes" xml:space="preserve">
          <source>Perl runs on e-mail; there is no doubt about it. The Camel book was originally written mostly over e-mail and today Perl's development is co-ordinated through mailing lists. The largest repository of Perl mailing lists is located at &lt;a href=&quot;http://lists.perl.org&quot;&gt;http://lists.perl.org&lt;/a&gt;.</source>
          <target state="translated">Perl работает по электронной почте; в этом нет никаких сомнений. Книга Camel изначально была написана в основном по электронной почте, и сегодня разработка Perl координируется через списки рассылки. Самый большой репозиторий списков рассылки Perl находится по адресу &lt;a href=&quot;http://lists.perl.org&quot;&gt;http://lists.perl.org&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="61dbd8b3aa941e2fad4e470525c952ecca2fe9ad" translate="yes" xml:space="preserve">
          <source>Perl runs on numerous operating systems. While most of them share much in common, they also have their own unique features.</source>
          <target state="translated">Perl работает на многочисленных операционных системах.Хотя большинство из них имеют много общего,у них также есть свои уникальные особенности.</target>
        </trans-unit>
        <trans-unit id="421935f6afff0e32fa7e44f720a70058704e68f6" translate="yes" xml:space="preserve">
          <source>Perl runs under Unix Systems Services or USS.</source>
          <target state="translated">Perl работает под Unix Systems Services или USS.</target>
        </trans-unit>
        <trans-unit id="e81d373d15ca40f4e59a6d6a3f7cafb56ab9ed4a" translate="yes" xml:space="preserve">
          <source>Perl scripts on UNIX use the &quot;#!&quot; (a.k.a &quot;shebang&quot;) line to indicate to the OS that it should execute the file using perl. Windows has no comparable means to indicate arbitrary files are executables.</source>
          <target state="translated">Perl-скрипты на UNIX используют &quot;#!&quot;.(a.k.a &quot;shebang&quot;),чтобы указать операционной системе,что она должна выполнить файл с использованием perl.В Windows нет сравнимых средств,указывающих на то,что произвольные файлы являются исполняемыми.</target>
        </trans-unit>
        <trans-unit id="c4939ec259a60d684db202bce3bcf1de4f358448" translate="yes" xml:space="preserve">
          <source>Perl seems to allow out-of-range values (greater than 0x10FFFF). By default, out-of-range values are replaced with &lt;code&gt;U+FFFD&lt;/code&gt; (REPLACEMENT CHARACTER) when &lt;code&gt;UCA_Version&lt;/code&gt; &amp;gt;= 22, or ignored when &lt;code&gt;UCA_Version&lt;/code&gt; &amp;lt;= 20.</source>
          <target state="translated">Кажется, что Perl допускает значения вне диапазона (больше 0x10FFFF). По умолчанию значения вне диапазона заменяются на &lt;code&gt;U+FFFD&lt;/code&gt; ( REPLACEMENT CHARACTER), когда &lt;code&gt;UCA_Version&lt;/code&gt; &amp;gt; = 22, или игнорируются, если &lt;code&gt;UCA_Version&lt;/code&gt; &amp;lt;= 20.</target>
        </trans-unit>
        <trans-unit id="f744319952a7a0f61ea238f46c893e99d13a8174" translate="yes" xml:space="preserve">
          <source>Perl should now build using the win32/Makefile. You will need to edit that file to set</source>
          <target state="translated">Perl теперь должен строиться с использованием win32/Makefile.Вам нужно будет отредактировать этот файл,чтобы установить</target>
        </trans-unit>
        <trans-unit id="a14edbe542c4c995c5b37c95f6789009c27399cc" translate="yes" xml:space="preserve">
          <source>Perl should now build using the win32/Makefile. You will need to edit that file to set CCTYPE to one of MSVC90-MSVC142 first.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cb621d78e2af41af5785030c0b682152fd53b938" translate="yes" xml:space="preserve">
          <source>Perl should now build using the win32/Makefile. You will need to edit that file to set CCTYPE to one of MSVC90FREE-MSVC120FREE first.</source>
          <target state="translated">Perl теперь должен строиться с использованием win32/Makefile.Вам нужно будет отредактировать этот файл,чтобы сначала установить CCTYPE в один из MSVC90FREE-MSVC120FREE.</target>
        </trans-unit>
        <trans-unit id="0ddc1cc89c294f8f7ab11f0687f3217bbc182d09" translate="yes" xml:space="preserve">
          <source>Perl should remain one language, rather than forking into a byte-oriented Perl and a character-oriented Perl.</source>
          <target state="translated">Perl должен оставаться одним языком,вместо того,чтобы вклиниваться в байт-ориентированный Perl и персонаж-ориентированный Perl.</target>
        </trans-unit>
        <trans-unit id="c5c49b8b94391dce923175d25bc4e1e360818232" translate="yes" xml:space="preserve">
          <source>Perl source plays by ANSI C89 rules: no C99 (or C++) extensions. In some cases we have to take pre-ANSI requirements into consideration. You don't care about some particular platform having broken Perl? I hear there is still a strong demand for J2EE programmers.</source>
          <target state="translated">Источник на Perl проигрывается по правилам ANSI C89:никаких расширений C99 (или C++).В некоторых случаях мы должны учитывать требования предварительного ANSI.Вас не волнует,что какая-то конкретная платформа сломала Perl? Я слышал,что все еще существует большой спрос на J2EE-программистов.</target>
        </trans-unit>
        <trans-unit id="50695da7bf648a9c3f976331e85b8f6be17c044c" translate="yes" xml:space="preserve">
          <source>Perl source plays by ANSI C89 rules: no C99 (or C++) extensions. You don't care about some particular platform having broken Perl? I hear there is still a strong demand for J2EE programmers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="912bb016153409bf0daae81d17c059280f97296b" translate="yes" xml:space="preserve">
          <source>Perl stack pointer), and in the handling of data on the stack when returning from an XSUB. In CODE: sections SP preserves the value which was on entry to the XSUB: SP is on the function pointer (which follows the last parameter). In PPCODE: sections SP is moved backward to the beginning of the parameter list, which allows &lt;code&gt;PUSH*()&lt;/code&gt; macros to place output values in the place Perl expects them to be when the XSUB returns back to Perl.</source>
          <target state="translated">Указатель стека Perl), а также при обработке данных в стеке при возврате из XSUB. В разделах CODE: SP сохраняет значение, которое было при входе в XSUB: SP находится в указателе функции (который следует за последним параметром). В PPCODE: разделы SP перемещаются назад в начало списка параметров, что позволяет макросам &lt;code&gt;PUSH*()&lt;/code&gt; размещать выходные значения в том месте, где их ожидает Perl, когда XSUB возвращается обратно в Perl.</target>
        </trans-unit>
        <trans-unit id="c5c35727bb235feb64e08f5a4e4d865a3344d69d" translate="yes" xml:space="preserve">
          <source>Perl starts scripts which begin with cookies &lt;code&gt;extproc&lt;/code&gt; or &lt;code&gt;#!&lt;/code&gt; directly, without an intervention of shell. Perl uses the same algorithm to find the executable as</source>
          <target state="translated">Perl запускает скрипты, которые начинаются с cookies &lt;code&gt;extproc&lt;/code&gt; или &lt;code&gt;#!&lt;/code&gt; напрямую, без вмешательства оболочки. Perl использует тот же алгоритм для поиска исполняемого файла, что и</target>
        </trans-unit>
        <trans-unit id="311066088c9b05b3123661ea7b3305044bcd0edf" translate="yes" xml:space="preserve">
          <source>Perl statements end in a semi-colon:</source>
          <target state="translated">Заявления на Перле заканчиваются на полуколонне:</target>
        </trans-unit>
        <trans-unit id="085142f041ce2e9d800b457019222a09cb16a58b" translate="yes" xml:space="preserve">
          <source>Perl strings are NOT the same as C strings: They may contain &lt;code&gt;NUL&lt;/code&gt; characters, whereas a C string is terminated by the first &lt;code&gt;NUL&lt;/code&gt;. That is why Perl API functions that deal with strings generally take a pointer to the first byte and either a length or a pointer to the byte just beyond the final one.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a3110ac0fdedcb6602950b25f9e6691154e84e0e" translate="yes" xml:space="preserve">
          <source>Perl supports Unicode strings as of version 5.6. Such strings may contain wide characters, namely, characters whose ordinal values are greater than 255. This can cause problems for digest algorithms such as SHA that are specified to operate on sequences of bytes.</source>
          <target state="translated">Perl поддерживает строки Юникода начиная с версии 5.6.Такие строки могут содержать широкие символы,а именно символы,порядковый номер которых больше 255.Это может вызвать проблемы для алгоритмов дайджеста,таких как SHA,которые задаются для работы с последовательностями байтов.</target>
        </trans-unit>
        <trans-unit id="a81cbe4ac67faced842394ca9c16af6e77feb312" translate="yes" xml:space="preserve">
          <source>Perl supports a type of threads called interpreter threads (ithreads). These threads can be used explicitly and implicitly.</source>
          <target state="translated">Perl поддерживает тип потоков,называемых интерпретирующими потоками (ithreads).Эти потоки могут использоваться явно и неявно.</target>
        </trans-unit>
        <trans-unit id="b3ddd3f5c1d03839d509e6149edea808fc6cb5cb" translate="yes" xml:space="preserve">
          <source>Perl supports a very limited kind of compile-time argument checking using function prototyping. This can be declared in either the PROTO section or with a &lt;a href=&quot;attributes#Built-in-Attributes&quot;&gt;prototype attribute&lt;/a&gt;. If you declare either of</source>
          <target state="translated">Perl поддерживает очень ограниченный вид проверки аргументов во время компиляции с использованием прототипирования функций. Это может быть объявлено либо в разделе PROTO, либо с &lt;a href=&quot;attributes#Built-in-Attributes&quot;&gt;атрибутом прототипа&lt;/a&gt; . Если вы объявите одно из</target>
        </trans-unit>
        <trans-unit id="4e581f21aad5ef67a96d247b183e3193eac70dc7" translate="yes" xml:space="preserve">
          <source>Perl supports another method invocation syntax called &quot;indirect object&quot; notation. This syntax is called &quot;indirect&quot; because the method comes before the object it is being invoked on.</source>
          <target state="translated">Perl поддерживает другой синтаксис вызова метода,называемый нотацией &quot;косвенный объект&quot;.Этот синтаксис называется &quot;косвенным&quot;,потому что метод приходит перед объектом,на который он вызывается.</target>
        </trans-unit>
        <trans-unit id="455d7ce007e3563f3b515c14c6a68c715a128b3e" translate="yes" xml:space="preserve">
          <source>Perl supports both pre-5.6 strings of eight-bit native bytes, and strings of Unicode characters. The general principle is that Perl tries to keep its data as eight-bit bytes for as long as possible, but as soon as Unicodeness cannot be avoided, the data is transparently upgraded to Unicode. Prior to Perl v5.14.0, the upgrade was not completely transparent (see &lt;a href=&quot;perlunicode#The-%22Unicode-Bug%22&quot;&gt;&quot;The &quot;Unicode Bug&quot;&quot; in perlunicode&lt;/a&gt;), and for backwards compatibility, full transparency is not gained unless &lt;code&gt;use feature 'unicode_strings'&lt;/code&gt; (see &lt;a href=&quot;feature&quot;&gt;feature&lt;/a&gt;) or &lt;code&gt;use 5.012&lt;/code&gt; (or higher) is selected.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="265dfd10b5f2d39d276f9f524b9c6e80cdea3f6c" translate="yes" xml:space="preserve">
          <source>Perl supports both pre-5.6 strings of eight-bit native bytes, and strings of Unicode characters. The general principle is that Perl tries to keep its data as eight-bit bytes for as long as possible, but as soon as Unicodeness cannot be avoided, the data is transparently upgraded to Unicode. Prior to Perl v5.14.0, the upgrade was not completely transparent (see &lt;a href=&quot;perlunicode#The-%22Unicode-Bug%22&quot;&gt;The Unicode Bug in perlunicode&lt;/a&gt;), and for backwards compatibility, full transparency is not gained unless &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; feature
'unicode_strings'&lt;/code&gt; (see &lt;a href=&quot;feature&quot;&gt;feature&lt;/a&gt;) or &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; 5.012&lt;/code&gt; (or higher) is selected.</source>
          <target state="translated">Perl поддерживает как строки восьмибитных собственных байтов до версии 5.6, так и строки символов Юникода. Общий принцип заключается в том, что Perl старается хранить свои данные в виде восьмибитных байтов как можно дольше, но, как только невозможно избежать однозначности, данные прозрачно обновляются до Unicode. До Perl v5.14.0, обновление не было полностью прозрачным (см &lt;a href=&quot;perlunicode#The-%22Unicode-Bug%22&quot;&gt;Буга Unicode в perlunicode&lt;/a&gt; ), а также для обеспечения обратной совместимости, полная прозрачность не не достигается , если &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; feature 'unicode_strings'&lt;/code&gt; (см &lt;a href=&quot;feature&quot;&gt;функции&lt;/a&gt; ) или &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; 5.012&lt;/code&gt; (или выше) выбрано.</target>
        </trans-unit>
        <trans-unit id="e2d84ca8811712997a8e9f3ad7161c9e75151f4e" translate="yes" xml:space="preserve">
          <source>Perl supports cross-compiling to QNX NTO through the Native Development Kit (NDK) for the Blackberry 10. This means that you can cross-compile for both ARM and x86 versions of the platform.</source>
          <target state="translated">Perl поддерживает кросс-компиляцию в QNX NTO с помощью Комплекта Разработчиков Народов (NDK)для Blackberry 10.Это означает,что вы можете осуществлять кросс-компиляцию как для ARM,так и для x86 версии платформы.</target>
        </trans-unit>
        <trans-unit id="61c6178993abcdebf49b240f9190abe5238c4bb9" translate="yes" xml:space="preserve">
          <source>Perl supports several other ways to call methods besides the &lt;code&gt;$object-&amp;gt;method()&lt;/code&gt; usage we've seen so far.</source>
          <target state="translated">Perl поддерживает несколько других способов вызова методов помимо использования &lt;code&gt;$object-&amp;gt;method()&lt;/code&gt; мы видели до сих пор.</target>
        </trans-unit>
        <trans-unit id="51aafa2b4885796ac3ebbd5ae9ad8631e2f17f44" translate="yes" xml:space="preserve">
          <source>Perl supports single-byte locales that are supersets of ASCII, such as the ISO 8859 ones, and one multi-byte-type locale, UTF-8 ones, described in the next paragraph. Perl doesn't support any other multi-byte locales, such as the ones for East Asian languages.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b921bede497b8f7b569d6ab7232a231253948127" translate="yes" xml:space="preserve">
          <source>Perl tends to add NULs, as an insurance policy, after the end of strings in SV's, so it is likely that using this macro will prevent inadvertent reading beyond the end of the input buffer, even if it is malformed UTF-8.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="39eb141cb70a235796d1c9a3b86085a1c03895dd" translate="yes" xml:space="preserve">
          <source>Perl termcap interface</source>
          <target state="translated">Терминальный интерфейс Perl</target>
        </trans-unit>
        <trans-unit id="29dca9ab8b1d3b8377101aae3e9cbe3e4fbc8b16" translate="yes" xml:space="preserve">
          <source>Perl threading is going to work only in Tru64 4.0 and newer releases, older operating releases like 3.2 aren't probably going to work properly with threads.</source>
          <target state="translated">Perl threading будет работать только в Tru64 4.0 и более новых релизах,старые операционные релизы,такие как 3.2,скорее всего,не будут корректно работать с потоками.</target>
        </trans-unit>
        <trans-unit id="711f6c74d0066ee853703c933b2128a03d5d8197" translate="yes" xml:space="preserve">
          <source>Perl threads mailing list: &lt;a href=&quot;http://lists.perl.org/list/ithreads.html&quot;&gt;http://lists.perl.org/list/ithreads.html&lt;/a&gt;</source>
          <target state="translated">Список рассылки Perl Threads: &lt;a href=&quot;http://lists.perl.org/list/ithreads.html&quot;&gt;http://lists.perl.org/list/ithreads.html&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="e0e60916df8773b323d22d41d88efd67dd0d6e92" translate="yes" xml:space="preserve">
          <source>Perl threads mailing list: &lt;a href=&quot;https://lists.perl.org/list/ithreads.html&quot;&gt;http://lists.perl.org/list/ithreads.html&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cba34b4e3f85c4f737c5ed55db9967c713391cb7" translate="yes" xml:space="preserve">
          <source>Perl threads mailing list: &lt;a href=&quot;https://lists.perl.org/list/ithreads.html&quot;&gt;https://lists.perl.org/list/ithreads.html&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d2559db124cb4f86fc6327b39cc58f5d846e3791" translate="yes" xml:space="preserve">
          <source>Perl tips, autodie</source>
          <target state="translated">Советы на Perl,автодиапазон</target>
        </trans-unit>
        <trans-unit id="eaf5bf8a496158d3f80504dd4ad1d919275e7f1f" translate="yes" xml:space="preserve">
          <source>Perl tracks the dynamic scope by a data structure called the context stack, which is an array of &lt;code&gt;PERL_CONTEXT&lt;/code&gt; structures, and which is itself a big union for all the types of context. Whenever a new scope is entered (such as a block, a &lt;code&gt;for&lt;/code&gt; loop, or a subroutine call), a new context entry is pushed onto the stack. Similarly when leaving a block or returning from a subroutine call etc. a context is popped. Since the context stack represents the current dynamic scope, it can be searched. For example, &lt;code&gt;next LABEL&lt;/code&gt; searches back through the stack looking for a loop context that matches the label; &lt;code&gt;return&lt;/code&gt; pops contexts until it finds a sub or eval context or similar; &lt;code&gt;caller&lt;/code&gt; examines sub contexts on the stack.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="417a3338dad2fe5b9c31529d81335ca36b2c6619" translate="yes" xml:space="preserve">
          <source>Perl under AmigaOS lacks some features of perl under UNIX because of deficiencies in the UNIX-emulation, most notably:</source>
          <target state="translated">Perl под AmigaOS не имеет некоторых особенностей perl под UNIX из-за недостатков в UNIX-эмуляции,в частности:</target>
        </trans-unit>
        <trans-unit id="6de1733b62296869d712e2db6939eb5aa3e92225" translate="yes" xml:space="preserve">
          <source>Perl under DOS lacks some features of perl under UNIX because of deficiencies in the UNIX-emulation, most notably:</source>
          <target state="translated">Perl в ОСН не имеет некоторых особенностей perl в UNIX из-за недостатков в эмуляции UNIX,в частности:</target>
        </trans-unit>
        <trans-unit id="fed7e4c0f6346d8e97d2349cf02d579f8a312bef" translate="yes" xml:space="preserve">
          <source>Perl under Mac OS Classic has not been supported since before Perl 5.10 (April 2004).</source>
          <target state="translated">Perl под Mac OS Classic не поддерживается с версии до Perl 5.10 (апрель 2004).</target>
        </trans-unit>
        <trans-unit id="fe29a7a8cb01db791e95920fcdb336a6f5bf1bcb" translate="yes" xml:space="preserve">
          <source>Perl uses &quot;full&quot; Unicode case mappings. This means that converting a single character to another case may result in a sequence of more than one character. For example, the uppercase of &lt;code&gt;&amp;szlig;&lt;/code&gt; (LATIN SMALL LETTER SHARP S) is the two character sequence &lt;code&gt;SS&lt;/code&gt;. This presents some complications The lowercase of all characters in the range 0..255 is a single character, and thus &lt;code&gt;&lt;a href=&quot;#toLOWER_L1&quot;&gt;&quot;toLOWER_L1&quot;&lt;/a&gt;&lt;/code&gt; is furnished. But, &lt;code&gt;toUPPER_L1&lt;/code&gt; can't exist, as it couldn't return a valid result for all legal inputs. Instead &lt;code&gt;&lt;a href=&quot;#toUPPER_uvchr&quot;&gt;&quot;toUPPER_uvchr&quot;&lt;/a&gt;&lt;/code&gt; has an API that does allow every possible legal result to be returned.) Likewise no other function that is crippled by not being able to give the correct results for the full range of possible inputs has been implemented here.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0c71cd98e9f081d421a495772db91702ad362132" translate="yes" xml:space="preserve">
          <source>Perl uses &lt;code&gt;\n&lt;/code&gt; to represent the &quot;logical&quot; newline, where what is logical may depend on the platform in use. In MacPerl, &lt;code&gt;\n&lt;/code&gt; always means &lt;code&gt;\015&lt;/code&gt; . On EBCDIC platforms, &lt;code&gt;\n&lt;/code&gt; could be &lt;code&gt;\025&lt;/code&gt; or &lt;code&gt;\045&lt;/code&gt; . In DOSish perls, &lt;code&gt;\n&lt;/code&gt; usually means &lt;code&gt;\012&lt;/code&gt; , but when accessing a file in &quot;text&quot; mode, perl uses the &lt;code&gt;:crlf&lt;/code&gt; layer that translates it to (or from) &lt;code&gt;\015\012&lt;/code&gt; , depending on whether you're reading or writing. Unix does the same thing on ttys in canonical mode. &lt;code&gt;\015\012&lt;/code&gt; is commonly referred to as CRLF.</source>
          <target state="translated">Perl использует &lt;code&gt;\n&lt;/code&gt; для представления &amp;laquo;логической&amp;raquo; новой строки, где то, что логично, может зависеть от используемой платформы. В MacPerl &lt;code&gt;\n&lt;/code&gt; всегда означает &lt;code&gt;\015&lt;/code&gt; . На платформах EBCDIC &lt;code&gt;\n&lt;/code&gt; может быть &lt;code&gt;\025&lt;/code&gt; или &lt;code&gt;\045&lt;/code&gt; . В DOSish perls &lt;code&gt;\n&lt;/code&gt; обычно означает &lt;code&gt;\012&lt;/code&gt; , но при доступе к файлу в &quot;текстовом&quot; режиме perl использует слой &lt;code&gt;:crlf&lt;/code&gt; , который переводит его в &lt;code&gt;\015\012&lt;/code&gt; (или из него) , в зависимости от того, читаете вы или пишете . Unix делает то же самое с ttys в каноническом режиме. &lt;code&gt;\015\012&lt;/code&gt; обычно называют CRLF.</target>
        </trans-unit>
        <trans-unit id="890fade91864c028d9bdef8ccb2172dd937cfe65" translate="yes" xml:space="preserve">
          <source>Perl uses &lt;code&gt;\n&lt;/code&gt; to represent the &quot;logical&quot; newline, where what is logical may depend on the platform in use. In MacPerl, &lt;code&gt;\n&lt;/code&gt; always means &lt;code&gt;\015&lt;/code&gt;. On EBCDIC platforms, &lt;code&gt;\n&lt;/code&gt; could be &lt;code&gt;\025&lt;/code&gt; or &lt;code&gt;\045&lt;/code&gt;. In DOSish perls, &lt;code&gt;\n&lt;/code&gt; usually means &lt;code&gt;\012&lt;/code&gt;, but when accessing a file in &quot;text&quot; mode, perl uses the &lt;code&gt;:crlf&lt;/code&gt; layer that translates it to (or from) &lt;code&gt;\015\012&lt;/code&gt;, depending on whether you're reading or writing. Unix does the same thing on ttys in canonical mode. &lt;code&gt;\015\012&lt;/code&gt; is commonly referred to as CRLF.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ef2489d6cf6b9a1519765ae5403d21cedb84ac6c" translate="yes" xml:space="preserve">
          <source>Perl uses UTF-8, internally, for most Unicode strings.</source>
          <target state="translated">Perl использует UTF-8,внутри,для большинства строк Юникода.</target>
        </trans-unit>
        <trans-unit id="a32f78ca0221220c37e8fdc6e6abb5de92126da7" translate="yes" xml:space="preserve">
          <source>Perl uses a reference count-driven garbage collection mechanism. SVs, AVs, or HVs (xV for short in the following) start their life with a reference count of 1. If the reference count of an xV ever drops to 0, then it will be destroyed and its memory made available for reuse.</source>
          <target state="translated">Perl использует механизм сбора мусора,приводимый в действие счетчиком ссылок.SV,AV или HV (xV для краткости ниже)начинают свою жизнь с контрольного числа 1.Если контрольное число xV когда-либо упадет до 0,то оно будет уничтожено,а его память будет доступна для повторного использования.</target>
        </trans-unit>
        <trans-unit id="687866e44b38320b5ab4b8c364c0ba7321b47747" translate="yes" xml:space="preserve">
          <source>Perl uses a reference count-driven garbage collection mechanism. SVs, AVs, or HVs (xV for short in the following) start their life with a reference count of 1. If the reference count of an xV ever drops to 0, then it will be destroyed and its memory made available for reuse. At the most basic internal level, reference counts can be manipulated with the following macros:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ffa78748c6c02aeaa5f6c0aa0037a286831d36b3" translate="yes" xml:space="preserve">
          <source>Perl uses a simple signal handling model: the %SIG hash contains names or references of user-installed signal handlers. These handlers will be called with an argument which is the name of the signal that triggered it. A signal may be generated intentionally from a particular keyboard sequence like control-C or control-Z, sent to you from another process, or triggered automatically by the kernel when special events transpire, like a child process exiting, your own process running out of stack space, or hitting a process file-size limit.</source>
          <target state="translated">Perl использует простую модель обработки сигналов:хэш %SIG содержит имена или ссылки на установленные пользователем обработчики сигналов.Эти обработчики будут вызываться с аргументом-именем сигнала,который его вызвал.Сигнал может быть сгенерирован намеренно из определенной клавиатурной последовательности,такой как control-C или control-Z,отправлен вам от другого процесса,или сгенерирован ядром автоматически при возникновении специальных событий,таких как завершение дочернего процесса,исчерпание пространства стека вашего собственного процесса,или превышение лимита размера файла процесса.</target>
        </trans-unit>
        <trans-unit id="697496faa8f310204a7d494fa53a2d354c2af264" translate="yes" xml:space="preserve">
          <source>Perl uses a special typedef IV which is a simple signed integer type that is guaranteed to be large enough to hold a pointer (as well as an integer). Additionally, there is the UV, which is simply an unsigned IV.</source>
          <target state="translated">Perl использует специальный тип IV,который является простым знаковым целым типом,который гарантированно будет достаточно большим,чтобы содержать указатель (так же,как и целое число).Кроме того,существует UV,который является просто беззнаковым IV.</target>
        </trans-unit>
        <trans-unit id="77447e8f55a3fbc6e220b03acaf3a045c7382163" translate="yes" xml:space="preserve">
          <source>Perl uses an internal type called a</source>
          <target state="translated">Perl использует внутренний тип,называемый</target>
        </trans-unit>
        <trans-unit id="dcd23c3b2c97cdf3da72f0a14a98128b56138f99" translate="yes" xml:space="preserve">
          <source>Perl uses its own malloc() under OS/2 - interpreters are usually malloc-bound for speed, but perl is not, since its malloc is lightning-fast. Perl-memory-usage-tuned benchmarks show that Perl's malloc is 5 times quicker than EMX one. I do not have convincing data about memory footprint, but a (pretty random) benchmark showed that Perl's one is 5% better.</source>
          <target state="translated">Perl использует свою собственную malloc()под OS/2-интерпретаторы,как правило,привязаны к malloc для скорости,но perl-нет,так как его malloc молниеносеносен.Тестирование с использованием Perl-памяти показало,что в Perl malloc в 5 раз быстрее,чем в EMX.У меня нет убедительных данных о занимаемой памяти,но (довольно случайный)бенчмарк показал,что Perl на 5% лучше.</target>
        </trans-unit>
        <trans-unit id="1739ec403c50a46c8549e731f4fbc63bb7b3c7ac" translate="yes" xml:space="preserve">
          <source>Perl uses the hardwired-or-customized shell (see &lt;a href=&quot;#PERL_SH_DIR&quot;&gt;&quot;&lt;code&gt;PERL_SH_DIR&lt;/code&gt;&quot;&lt;/a&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aaeb3f63a0dee2460eba26dc00ff361a3a2b8977" translate="yes" xml:space="preserve">
          <source>Perl uses the hardwired-or-customized shell (see &lt;code&gt;&lt;a href=&quot;#PERL_SH_DIR&quot;&gt;PERL_SH_DIR&lt;/a&gt;&lt;/code&gt;).</source>
          <target state="translated">Perl использует аппаратную или настраиваемую оболочку (см. &lt;code&gt;&lt;a href=&quot;#PERL_SH_DIR&quot;&gt;PERL_SH_DIR&lt;/a&gt;&lt;/code&gt; ).</target>
        </trans-unit>
        <trans-unit id="7ae85ddbb739ce30e8dfb43f3f02245520739733" translate="yes" xml:space="preserve">
          <source>Perl uses the platform's C library collation functions &lt;code&gt;strcoll()&lt;/code&gt; and &lt;code&gt;strxfrm()&lt;/code&gt;. That means you get whatever they give. On some platforms, these functions work well on UTF-8 locales, giving a reasonable default collation for the code points that are important in that locale. (And if they aren't working well, the problem may only be that the locale definition is deficient, so can be fixed by using a better definition file. Unicode's definitions (see &lt;a href=&quot;#Freely-available-locale-definitions&quot;&gt;&quot;Freely available locale definitions&quot;&lt;/a&gt;) provide reasonable UTF-8 locale collation definitions.) Starting in Perl v5.26, Perl's use of these functions has been made more seamless. This may be sufficient for your needs. For more control, and to make sure strings containing any code point (not just the ones important in the locale) collate properly, the &lt;a href=&quot;Unicode::Collate&quot;&gt;Unicode::Collate&lt;/a&gt; module is suggested.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f56985ba618cbe018e4fc2adbd42f3a731d5d38f" translate="yes" xml:space="preserve">
          <source>Perl uses the same mechanism to produce &lt;code&gt;$1&lt;/code&gt; , &lt;code&gt;$2&lt;/code&gt; , etc, so you also pay a price for each pattern that contains capturing parentheses. (To avoid this cost while retaining the grouping behaviour, use the extended regular expression &lt;code&gt;(?: ... )&lt;/code&gt; instead.) But if you never use &lt;code&gt;$&amp;amp;&lt;/code&gt; , &lt;code&gt;$`&lt;/code&gt; or &lt;code&gt;$'&lt;/code&gt; , then patterns</source>
          <target state="translated">Perl использует тот же механизм для создания &lt;code&gt;$1&lt;/code&gt; , &lt;code&gt;$2&lt;/code&gt; и т. Д., Поэтому вы также платите цену за каждый шаблон, содержащий захватывающие круглые скобки. (Чтобы избежать этих затрат при сохранении поведения группировки, используйте вместо этого расширенное регулярное выражение &lt;code&gt;(?: ... )&lt;/code&gt; .) Но если вы никогда не используете &lt;code&gt;$&amp;amp;&lt;/code&gt; , &lt;code&gt;$`&lt;/code&gt; или &lt;code&gt;$'&lt;/code&gt; , тогда шаблоны</target>
        </trans-unit>
        <trans-unit id="fd3d29794e28820446964a33391fd6afd6169a0d" translate="yes" xml:space="preserve">
          <source>Perl uses the same mechanism to produce &lt;code&gt;$1&lt;/code&gt;, &lt;code&gt;$2&lt;/code&gt;,</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="729ae7be2e299ed898ba24317c3f470da4a89862" translate="yes" xml:space="preserve">
          <source>Perl v5.6.0 introduced lexical control over the handling of warnings by category. The &lt;code&gt;warnings&lt;/code&gt; pragma generally replaces the command line flag &lt;b&gt;-w&lt;/b&gt;. Documentation on the use of lexical warnings, once partly found in this document, is now found in the &lt;a href=&quot;warnings&quot;&gt;warnings&lt;/a&gt; documentation.</source>
          <target state="translated">Perl v5.6.0 представил лексический контроль над обработкой предупреждений по категориям. &lt;code&gt;warnings&lt;/code&gt; прагма обычно заменяет флаг командной строки &lt;b&gt;-w&lt;/b&gt; . Документация по использованию лексических предупреждений, которая когда-то частично находилась в этом документе, теперь находится в документации по &lt;a href=&quot;warnings&quot;&gt;предупреждениям&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="ed16c3492238f59d6acc4b17eee61789dc827788" translate="yes" xml:space="preserve">
          <source>Perl v5.8 and better allow extended Unicode characters in strings. Such strings cannot be encoded directly, as the base64 encoding is only defined for single-byte characters. The solution is to use the Encode module to select the byte encoding you want. For example:</source>
          <target state="translated">Perl v5.8 и лучше допускать расширенные символы Юникода в строках.Такие строки не могут быть закодированы напрямую,так как кодировка base64 определена только для однобайтовых символов.Решение заключается в использовании модуля Кодировка для выбора нужной вам байтовой кодировки.Например:</target>
        </trans-unit>
        <trans-unit id="fac662f37a6502961fed43d288ed81deaf631ca7" translate="yes" xml:space="preserve">
          <source>Perl v5.8 and better allow extended Unicode characters in strings. Such strings cannot be encoded directly, as the quoted-printable encoding is only defined for single-byte characters. The solution is to use the Encode module to select the byte encoding you want. For example:</source>
          <target state="translated">Perl v5.8 и лучше допускать расширенные символы Юникода в строках.Такие строки не могут быть закодированы напрямую,так как кодировка,выводимая в кавычки,определяется только для однобайтовых символов.Решение заключается в использовании модуля Кодировка для выбора нужной вам байтовой кодировки.Например:</target>
        </trans-unit>
        <trans-unit id="ca07f22517f53e73e435cde9502974d6bc1e648d" translate="yes" xml:space="preserve">
          <source>Perl variable names may also be a sequence of digits or a single punctuation or control character (with the literal control character form deprecated). These names are all reserved for special uses by Perl; for example, the all-digits names are used to hold data captured by backreferences after a regular expression match. Perl has a special syntax for the single-control-character names: It understands &lt;code&gt;^X&lt;/code&gt; (caret &lt;code&gt;X&lt;/code&gt; ) to mean the control-&lt;code&gt;X&lt;/code&gt; character. For example, the notation &lt;code&gt;$^W&lt;/code&gt; (dollar-sign caret &lt;code&gt;W&lt;/code&gt; ) is the scalar variable whose name is the single character control-&lt;code&gt;W&lt;/code&gt; . This is better than typing a literal control-&lt;code&gt;W&lt;/code&gt; into your program.</source>
          <target state="translated">Имена переменных Perl также могут быть последовательностью цифр, одним знаком пунктуации или управляющим символом (при этом буквенная форма управляющего символа устарела). Все эти имена зарезервированы Perl для специального использования; например, имена, состоящие только из цифр, используются для хранения данных, захваченных обратными ссылками после совпадения регулярного выражения. Perl имеет специальный синтаксис для имен одного контрольно-символов: Он понимает &lt;code&gt;^X&lt;/code&gt; (каретка &lt;code&gt;X&lt;/code&gt; ) , чтобы означать control- &lt;code&gt;X&lt;/code&gt; характер. Например, обозначение &lt;code&gt;$^W&lt;/code&gt; (знак доллара каретка &lt;code&gt;W&lt;/code&gt; ) является скалярной переменной , чье имя является одиночный символ control- &lt;code&gt;W&lt;/code&gt; . Это лучше, чем вводить буквальный control- &lt;code&gt;W&lt;/code&gt; в вашу программу.</target>
        </trans-unit>
        <trans-unit id="939e5e17b46e5bec2f5d706c2937023945ced9ed" translate="yes" xml:space="preserve">
          <source>Perl variable names may also be a sequence of digits, a single punctuation character, or the two-character sequence: &lt;code&gt;^&lt;/code&gt; (caret or CIRCUMFLEX ACCENT) followed by any one of the characters &lt;code&gt;[][A-Z^_?\]&lt;/code&gt;. These names are all reserved for special uses by Perl; for example, the all-digits names are used to hold data captured by backreferences after a regular expression match.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ed35d8a6334fde91537a85bc31a0ea827797100e" translate="yes" xml:space="preserve">
          <source>Perl variable types</source>
          <target state="translated">Типы переменных Perl</target>
        </trans-unit>
        <trans-unit id="4045947434895b417a6c84aaed4fd5f8d36c865a" translate="yes" xml:space="preserve">
          <source>Perl variables</source>
          <target state="translated">Переменные Perl</target>
        </trans-unit>
        <trans-unit id="c155457483cd87781fd4429cf68e8cc70eecc55b" translate="yes" xml:space="preserve">
          <source>Perl versions before 5.8 had in its C source code signal handlers which would catch the signal and possibly run a Perl function that you had set in &lt;code&gt;%SIG&lt;/code&gt; . This violated the rules of signal handling at that level causing perl to dump core. Since version 5.8.0, perl looks at &lt;code&gt;%SIG&lt;/code&gt;&lt;b&gt;after&lt;/b&gt; the signal has been caught, rather than while it is being caught. Previous versions of this answer were incorrect.</source>
          <target state="translated">В версиях Perl до 5.8 в исходном коде C были обработчики сигналов, которые перехватывали сигнал и, возможно, запускали функцию Perl, установленную вами в &lt;code&gt;%SIG&lt;/code&gt; . Это нарушило правила обработки сигналов на этом уровне, что привело к сбросу ядра Perl. Начиная с версии 5.8.0, perl смотрит на &lt;code&gt;%SIG&lt;/code&gt; &lt;b&gt;после&lt;/b&gt; перехвата сигнала, а не во время его перехвата. Предыдущие версии этого ответа были неверными.</target>
        </trans-unit>
        <trans-unit id="89a169d5ba146feda33d133d78a5e42e73c7c504" translate="yes" xml:space="preserve">
          <source>Perl versions before 5.8 had in its C source code signal handlers which would catch the signal and possibly run a Perl function that you had set in &lt;code&gt;%SIG&lt;/code&gt;. This violated the rules of signal handling at that level causing perl to dump core. Since version 5.8.0, perl looks at &lt;code&gt;%SIG&lt;/code&gt;&lt;b&gt;after&lt;/b&gt; the signal has been caught, rather than while it is being caught. Previous versions of this answer were incorrect.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8eacc0652f9a68bdddb6fbf37bd76bc666b4e50b" translate="yes" xml:space="preserve">
          <source>Perl waits for the subprocess to complete before continuing execution in the current process. As described in &lt;a href=&quot;perlfunc&quot;&gt;perlfunc&lt;/a&gt;, the return value of &lt;code&gt;&lt;a href=&quot;functions/system&quot;&gt;system&lt;/a&gt;&lt;/code&gt; is a fake &quot;status&quot; which follows POSIX semantics unless the pragma &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; vmsish 'status'&lt;/code&gt; is in effect; see the description of &lt;code&gt;$?&lt;/code&gt; in this document for more detail.</source>
          <target state="translated">Perl ожидает завершения подпроцесса, прежде чем продолжить выполнение в текущем процессе. Как описано в &lt;a href=&quot;perlfunc&quot;&gt;perlfunc&lt;/a&gt; , возвращаемое значение &lt;code&gt;&lt;a href=&quot;functions/system&quot;&gt;system&lt;/a&gt;&lt;/code&gt; - это поддельный &amp;laquo;статус&amp;raquo;, который следует семантике POSIX, если не действует прагма &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; vmsish 'status'&lt;/code&gt; ; см. описание &lt;code&gt;$?&lt;/code&gt; в этом документе для более подробной информации.</target>
        </trans-unit>
        <trans-unit id="76b6739e84bfe97e715bfa0d21f10031957c9f2e" translate="yes" xml:space="preserve">
          <source>Perl waits for the subprocess to complete before continuing execution in the current process. As described in &lt;a href=&quot;perlfunc&quot;&gt;perlfunc&lt;/a&gt;, the return value of &lt;code&gt;system&lt;/code&gt; is a fake &quot;status&quot; which follows POSIX semantics unless the pragma &lt;code&gt;use vmsish 'status'&lt;/code&gt; is in effect; see the description of &lt;code&gt;$?&lt;/code&gt; in this document for more detail.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="77bc7bc2d999572b3218f851bcc9845dccf95ea0" translate="yes" xml:space="preserve">
          <source>Perl was born in Unix and can therefore access all common Unix system calls. In non-Unix environments, the functionality of some Unix system calls may not be available or details of the available functionality may differ slightly. The Perl functions affected by this are:</source>
          <target state="translated">Perl родился в Unix и поэтому может получить доступ ко всем распространенным системным вызовам Unix.В средах,отличных от Unix,функциональность некоторых системных вызовов Unix может быть недоступна или подробная информация о доступной функциональности может незначительно отличаться.Это влияет на функции Perl:</target>
        </trans-unit>
        <trans-unit id="749163e214f8798aa3cc386d45ba1c2b25237249" translate="yes" xml:space="preserve">
          <source>Perl was originally a language optimized for scanning arbitrary text files, extracting information from those text files, and printing reports based on that information. It quickly became a good language for many system management tasks. Over the years, Perl has grown into a general-purpose programming language. It's widely used for everything from quick &quot;one-liners&quot; to full-scale application development.</source>
          <target state="translated">Первоначально Perl был языком,оптимизированным для сканирования произвольных текстовых файлов,извлечения информации из этих текстовых файлов и печати отчетов на основе этой информации.Он быстро стал хорошим языком для многих задач системного управления.С годами Perl превратился в язык программирования общего назначения.Он широко используется во всем,начиная от быстрых &quot;однолинейных&quot; и заканчивая полномасштабной разработкой приложений.</target>
        </trans-unit>
        <trans-unit id="97d7a9a879c5c36fd28bdf27f2f4d6a7f1d3b405" translate="yes" xml:space="preserve">
          <source>Perl was originally written to handle US-ASCII only (that is characters whose ordinal numbers are in the range 0 - 127). And documentation and comments may still use the term ASCII, when sometimes in fact the entire range from 0 - 255 is meant.</source>
          <target state="translated">Перл был изначально написан только для работы с US-ASCII (т.е.символами,порядковые номера которых находятся в диапазоне 0-127).И в документации и комментариях все еще можно использовать термин ASCII,когда иногда на самом деле имеется в виду весь диапазон от 0 до 255.</target>
        </trans-unit>
        <trans-unit id="bb45aa3bdb1623dc3032bd795cae4fbe7d4a4df0" translate="yes" xml:space="preserve">
          <source>Perl was ported to Mac OS by Matthias Neeracher &amp;lt;neeracher@mac.com&amp;gt;. Chris Nandor &amp;lt;pudge@pobox.com&amp;gt; continued development and maintenance for the duration of the port's life.</source>
          <target state="translated">Perl был перенесен на Mac OS Матиасом Нирахером &amp;lt;neeracher@mac.com&amp;gt;. Крис Нандор &amp;lt;pudge@pobox.com&amp;gt; продолжал разработку и обслуживание в течение всего срока службы порта.</target>
        </trans-unit>
        <trans-unit id="5ead554bbd070f695e13f79404f4e374bc4948d2" translate="yes" xml:space="preserve">
          <source>Perl websites come in a variety of forms, but they fit into two large categories: forums and news websites. There are many Perl-related websites, so only a few of the community's largest are mentioned here.</source>
          <target state="translated">Сайты на Perl бывают разных форм,но они делятся на две большие категории:форумы и новостные сайты.Существует множество сайтов,связанных с Perl,поэтому здесь упоминаются лишь некоторые из самых крупных.</target>
        </trans-unit>
        <trans-unit id="96b1e3be8ed57ad80c83e18b4ef34638cdbe949f" translate="yes" xml:space="preserve">
          <source>Perl will always interpret this as a method call.</source>
          <target state="translated">Perl всегда будет интерпретировать это как вызов метода.</target>
        </trans-unit>
        <trans-unit id="108590eaf1947f78469e9a64442a6238023bfc97" translate="yes" xml:space="preserve">
          <source>Perl will always match at the earliest possible point in the string:</source>
          <target state="translated">Perl всегда будет совпадать в самой ранней точке строки:</target>
        </trans-unit>
        <trans-unit id="dab60b10c40a3d1c155299bacd4f38f02082cabc" translate="yes" xml:space="preserve">
          <source>Perl will attempt to flush all files opened for output before any operation that may do a fork, but this may not be supported on some platforms (see &lt;a href=&quot;../perlport&quot;&gt;perlport&lt;/a&gt;). To be safe, you may need to set &lt;code&gt;$|&lt;/code&gt; ($AUTOFLUSH in English) or call the &lt;code&gt;autoflush()&lt;/code&gt; method of &lt;code&gt;IO::Handle&lt;/code&gt; on any open handles.</source>
          <target state="translated">Perl попытается очистить все файлы, открытые для вывода, перед любой операцией, которая может выполнить форк, но это может не поддерживаться на некоторых платформах (см. &lt;a href=&quot;../perlport&quot;&gt;Perlport&lt;/a&gt; ). В целях безопасности вам может потребоваться установить &lt;code&gt;$|&lt;/code&gt; ($ AutoFlush на английском языке) или вызовите &lt;code&gt;autoflush()&lt;/code&gt; метод &lt;code&gt;IO::Handle&lt;/code&gt; на любых открытых ручках.</target>
        </trans-unit>
        <trans-unit id="cbb77319c3caa8ab8afaeca5e241bd4affc14078" translate="yes" xml:space="preserve">
          <source>Perl will attempt to flush all files opened for output before any operation that may do a fork, but this may not be supported on some platforms (see &lt;a href=&quot;perlport&quot;&gt;perlport&lt;/a&gt;). To be safe, you may need to set &lt;a href=&quot;perlvar#%24%7C&quot;&gt;&lt;code&gt;$|&lt;/code&gt;&lt;/a&gt; (&lt;code&gt;$AUTOFLUSH&lt;/code&gt; in &lt;a href=&quot;english&quot;&gt;English&lt;/a&gt;) or call the &lt;code&gt;autoflush&lt;/code&gt; method of &lt;a href=&quot;IO::Handle#METHODS&quot;&gt;&lt;code&gt;IO::Handle&lt;/code&gt;&lt;/a&gt; on any open handles.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="43b0e0c3bc56ba7ca3959a0f5e022566b0153f54" translate="yes" xml:space="preserve">
          <source>Perl will attempt to flush all files opened for output before any operation that may do a fork, but this may not be supported on some platforms (see &lt;a href=&quot;perlport&quot;&gt;perlport&lt;/a&gt;). To be safe, you may need to set &lt;code&gt;$|&lt;/code&gt; ($AUTOFLUSH in English) or call the &lt;code&gt;autoflush()&lt;/code&gt; method of &lt;code&gt;IO::Handle&lt;/code&gt; on any open handles.</source>
          <target state="translated">Perl попытается очистить все файлы, открытые для вывода, перед любой операцией, которая может выполнить форк, но это может не поддерживаться на некоторых платформах (см. &lt;a href=&quot;perlport&quot;&gt;Perlport&lt;/a&gt; ). В целях безопасности вам может потребоваться установить &lt;code&gt;$|&lt;/code&gt; ($ AutoFlush на английском языке) или вызовите &lt;code&gt;autoflush()&lt;/code&gt; метод &lt;code&gt;IO::Handle&lt;/code&gt; на любых открытых ручках.</target>
        </trans-unit>
        <trans-unit id="2d8b585d320f38f1a30c6c32f686d7f733f4dca8" translate="yes" xml:space="preserve">
          <source>Perl will attempt to flush all files opened for output before starting the child process, but this may not be supported on some platforms (see &lt;a href=&quot;perlport&quot;&gt;perlport&lt;/a&gt;). To be safe, you may need to set &lt;code&gt;$|&lt;/code&gt; (&lt;code&gt;$AUTOFLUSH&lt;/code&gt; in &lt;code&gt;&lt;a href=&quot;english&quot;&gt;English&lt;/a&gt;&lt;/code&gt;) or call the &lt;code&gt;autoflush()&lt;/code&gt; method of &lt;code&gt;&lt;a href=&quot;IO::Handle&quot;&gt;IO::Handle&lt;/a&gt;&lt;/code&gt; on any open handles.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6bea16b3be61058b5cb516538e14480b80e24dcc" translate="yes" xml:space="preserve">
          <source>Perl will attempt to flush all files opened for output before starting the child process, but this may not be supported on some platforms (see &lt;a href=&quot;perlport&quot;&gt;perlport&lt;/a&gt;). To be safe, you may need to set &lt;code&gt;$|&lt;/code&gt; (&lt;code&gt;$AUTOFLUSH&lt;/code&gt; in &lt;code&gt;&lt;a href=&quot;english&quot;&gt;English&lt;/a&gt;&lt;/code&gt;) or call the &lt;code&gt;autoflush()&lt;/code&gt; method of &lt;code&gt;&lt;a href=&quot;io/handle&quot;&gt;IO::Handle&lt;/a&gt;&lt;/code&gt; on any open handles.</source>
          <target state="translated">Perl попытается очистить все файлы, открытые для вывода, перед запуском дочернего процесса, но это может не поддерживаться на некоторых платформах (см. &lt;a href=&quot;perlport&quot;&gt;Perlport&lt;/a&gt; ). В целях безопасности вам может потребоваться установить &lt;code&gt;$|&lt;/code&gt; ( &lt;code&gt;$AUTOFLUSH&lt;/code&gt; на &lt;code&gt;&lt;a href=&quot;english&quot;&gt;English&lt;/a&gt;&lt;/code&gt; ) или вызовите &lt;code&gt;autoflush()&lt;/code&gt; метод &lt;code&gt;&lt;a href=&quot;io/handle&quot;&gt;IO::Handle&lt;/a&gt;&lt;/code&gt; на любых открытых ручках.</target>
        </trans-unit>
        <trans-unit id="69e6c1ab664ef4d480c4cc1af41e9e1fb158cde3" translate="yes" xml:space="preserve">
          <source>Perl will completely read from all open directory handles until they reach the end of the stream. It will then seekdir() back to the original location and all future readdir() requests will be fulfilled from the cache buffer. That means that neither the directory handle held by the parent process nor the one held by the child process will see any changes made to the directory after the fork() call.</source>
          <target state="translated">Perl будет полностью читать из всех открытых дескрипторов каталогов до тех пор,пока они не достигнут конца потока.Затем она будет обращаться к исходному местоположению и все будущие запросы readdir()будут выполняться из кэш-буфера.Это означает,что ни хэндл директории,удерживаемый родительским процессом,ни хэндл,удерживаемый дочерним процессом,не будут видеть никаких изменений,внесенных в директорию после вызова fork().</target>
        </trans-unit>
        <trans-unit id="ae724785888abcc4558016f3ec47b4f4e63fe38a" translate="yes" xml:space="preserve">
          <source>Perl will generate an error for a few character properties in Unicode when used in a regular expression. The non-Unihan ones are listed below, with the reasons they are not accepted, perhaps with work-arounds. The short names for the properties are listed enclosed in (parentheses). As described after the list, an installation can change the defaults and choose to accept any of these. The list is machine generated based on the choices made for the installation that generated this document.</source>
          <target state="translated">Perl сгенерирует ошибку для нескольких свойств символов в Юникоде при использовании в регулярном выражении.Ниже перечислены не-унианские свойства,причины,по которым они не принимаются,возможно,с обходными путями.Короткие имена для свойств приведены ниже (в скобках).Как описано после списка,установка может изменить значения по умолчанию и принять любое из них.Список генерируется машиной на основе выбора,сделанного для установки,сгенерировавшей этот документ.</target>
        </trans-unit>
        <trans-unit id="8b82b63566b58bfbfd5f88517a9ea3598fc70e2d" translate="yes" xml:space="preserve">
          <source>Perl will not guarantee what the result of the above statements is.</source>
          <target state="translated">Perl не будет гарантировать результат вышеуказанных заявлений.</target>
        </trans-unit>
        <trans-unit id="ad11d6c2aaa2cf9eed67c4c4a37abbefb094f00c" translate="yes" xml:space="preserve">
          <source>Perl will print</source>
          <target state="translated">Perl будет печатать</target>
        </trans-unit>
        <trans-unit id="bf866573cd4df8609484c1bf4b87543aa847fff1" translate="yes" xml:space="preserve">
          <source>Perl will print &lt;code&gt;ONCE UPON A TIME THERE WAS&lt;/code&gt; , assuming, of course, that</source>
          <target state="translated">Perl будет печатать &lt;code&gt;ONCE UPON A TIME THERE WAS&lt;/code&gt; , при условии, конечно, что</target>
        </trans-unit>
        <trans-unit id="c9125a8fdf67019b69d1e6b1d55295e266cee711" translate="yes" xml:space="preserve">
          <source>Perl will print &lt;code&gt;ONCE UPON A TIME THERE WAS&lt;/code&gt;, assuming, of course, that</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ef9a0a9d3a3fd7fe149a4004c226420f095952a0" translate="yes" xml:space="preserve">
          <source>Perl will start PM programs from VIO (=text-mode) Perl process in a separate PM session; the opposite is not true: when you start a non-PM program from a PM Perl process, Perl would not run it in a separate session. If a separate session is desired, either ensure that shell will be used, as in &lt;code&gt;&lt;a href=&quot;functions/system&quot;&gt;system&lt;/a&gt; 'cmd /c myprog'&lt;/code&gt; , or start it using optional arguments to system() documented in &lt;code&gt;OS2::Process&lt;/code&gt; module. This is considered to be a feature.</source>
          <target state="translated">Perl будет запускать программы PM из процесса Perl VIO (= text-mode) в отдельном сеансе PM; обратное неверно: когда вы запускаете программу, не относящуюся к PM, из процесса PM Perl, Perl не запускает ее в отдельном сеансе. Если требуется отдельный сеанс, либо убедитесь, что будет использоваться оболочка, как в &lt;code&gt;&lt;a href=&quot;functions/system&quot;&gt;system&lt;/a&gt; 'cmd /c myprog'&lt;/code&gt; , либо запустите ее, используя дополнительные аргументы для system (), задокументированные в &lt;code&gt;OS2::Process&lt;/code&gt; . Это считается особенностью.</target>
        </trans-unit>
        <trans-unit id="78588e527fc97bd83af2c6a428985bc498ac231c" translate="yes" xml:space="preserve">
          <source>Perl will start PM programs from VIO (=text-mode) Perl process in a separate PM session; the opposite is not true: when you start a non-PM program from a PM Perl process, Perl would not run it in a separate session. If a separate session is desired, either ensure that shell will be used, as in &lt;code&gt;system 'cmd /c myprog'&lt;/code&gt;, or start it using optional arguments to system() documented in &lt;code&gt;OS2::Process&lt;/code&gt; module. This is considered to be a feature.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="79467cc317c9e9a63f21c7fa1de773705edf809c" translate="yes" xml:space="preserve">
          <source>Perl word completion module</source>
          <target state="translated">Модуль завершения текста на Perl</target>
        </trans-unit>
        <trans-unit id="5a1baab191c5a4cbb8bc8a1bc0cd6292ba8ea600" translate="yes" xml:space="preserve">
          <source>Perl works on a bewildering variety of Unix and Unix-like platforms (see e.g. most of the files in the</source>
          <target state="translated">Perl работает на ошеломляющем многообразии Unix и Unix-подобных платформ (см.,например,большинство файлов в</target>
        </trans-unit>
        <trans-unit id="5f937e1c9658905a769f6858da3294349601c8d9" translate="yes" xml:space="preserve">
          <source>Perl works with UTF-EBCDIC, a multi-byte encoding. In Perls earlier than v5.22, there may be various bugs in this regard.</source>
          <target state="translated">Perl работает с UTF-EBCDIC,многобайтовой кодировкой.В Perls ранее,чем v5.22,могут быть различные ошибки в этом отношении.</target>
        </trans-unit>
        <trans-unit id="42414ebda9bd8b337ff75ba9b25023988eae655b" translate="yes" xml:space="preserve">
          <source>Perl workshops are, as the name might suggest, workshops where Perl is taught in a variety of ways. At the workshops, subjects range from a beginner's introduction (such as the Pittsburgh Perl Workshop's &quot;Zero To Perl&quot;) to much more advanced subjects.</source>
          <target state="translated">Семинары на Perl-это,как можно предположить из названия,семинары,на которых Perl преподается самыми разными способами.На семинарах преподаются самые разные предметы-от введения новичка (например,в питтсбургской мастерской Perl &quot;Ноль к перлу&quot;)до гораздо более продвинутых предметов.</target>
        </trans-unit>
        <trans-unit id="7e6b25cba02b7a0948e7b911d7360593ba8a4f62" translate="yes" xml:space="preserve">
          <source>Perl&amp;rsquo;s &lt;code&gt;&lt;a href=&quot;functions/printf&quot;&gt;printf&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/sprintf&quot;&gt;sprintf&lt;/a&gt;&lt;/code&gt;, and &lt;code&gt;&lt;a href=&quot;functions/format&quot;&gt;format&lt;/a&gt;&lt;/code&gt; think all codepoints take up 1 print column, but many take 0 or 2. Here to show that normalization makes no difference, we print out both forms:</source>
          <target state="translated">Perl &lt;code&gt;&lt;a href=&quot;functions/printf&quot;&gt;printf&lt;/a&gt;&lt;/code&gt; , &lt;code&gt;&lt;a href=&quot;functions/sprintf&quot;&gt;sprintf&lt;/a&gt;&lt;/code&gt; и &lt;code&gt;&lt;a href=&quot;functions/format&quot;&gt;format&lt;/a&gt;&lt;/code&gt; думают, что все кодовые точки занимают 1 столбец печати, но многие принимают 0 или 2. Здесь, чтобы показать, что нормализация не имеет значения, мы распечатываем обе формы:</target>
        </trans-unit>
        <trans-unit id="df2feb6f1ec6c5fcfce646b1caa76de773ce0f59" translate="yes" xml:space="preserve">
          <source>Perl&amp;rsquo;s &lt;code&gt;printf&lt;/code&gt;, &lt;code&gt;sprintf&lt;/code&gt;, and &lt;code&gt;format&lt;/code&gt; think all codepoints take up 1 print column, but many take 0 or 2. Here to show that normalization makes no difference, we print out both forms:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="609b12c8bffe220b74d5c614b906ddd9f420fc60" translate="yes" xml:space="preserve">
          <source>Perl's</source>
          <target state="translated">Perl's</target>
        </trans-unit>
        <trans-unit id="e5e5cc8de2d6897fcdb211dcd0cc9ecba9c81faf" translate="yes" xml:space="preserve">
          <source>Perl's &quot;use integer&quot; might change the behaviour of % and / for scalars. This is because under 'use integer' Perl does what the underlying C library thinks is right, and this varies. However, &quot;use integer&quot; does not change the way things are done with Math::BigInt objects.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c4304adeb0f8bf2fdb8cb6a0ee28ba6a82fef1c9" translate="yes" xml:space="preserve">
          <source>Perl's 'use integer;' changes the behaviour of % and / for scalars, but will not change BigInt's way to do things. This is because under 'use integer' Perl will do what the underlying C thinks is right and this is different for each system. If you need BigInt's behaving exactly like Perl's 'use integer', bug the author to implement it ;)</source>
          <target state="translated">Perl 'use integer;' изменяет поведение % и/для скаляров,но не изменит BigInt.Это связано с тем,что в разделе 'use integer' Perl будет делать то,что считает правильным лежащий в основе C,и для каждой системы это свойственно по-разному.Если вам нужно,чтобы BigInt вел себя точно так же,как Perl's 'use integer',то ошибтесь,чтобы автор реализовал его ;)</target>
        </trans-unit>
        <trans-unit id="064e821c3cc7d30b6bfa1d90af859d75eba797c0" translate="yes" xml:space="preserve">
          <source>Perl's &lt;a href=&quot;#sprintf-FORMAT%2C-LIST&quot;&gt;&lt;code&gt;sprintf&lt;/code&gt;&lt;/a&gt; permits the following universally-known conversions:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="78408db0ece90050f47f78be2d21f98042f5d6be" translate="yes" xml:space="preserve">
          <source>Perl's &lt;code&gt;&lt;a href=&quot;functions/sprintf&quot;&gt;sprintf&lt;/a&gt;&lt;/code&gt; permits the following universally-known conversions:</source>
          <target state="translated">Perl &lt;code&gt;&lt;a href=&quot;functions/sprintf&quot;&gt;sprintf&lt;/a&gt;&lt;/code&gt; допускает следующие общеизвестные преобразования:</target>
        </trans-unit>
        <trans-unit id="679bce65e9c564373f478362e333d0a68acc42d5" translate="yes" xml:space="preserve">
          <source>Perl's &lt;code&gt;&lt;a href=&quot;sprintf&quot;&gt;sprintf&lt;/a&gt;&lt;/code&gt; permits the following universally-known conversions:</source>
          <target state="translated">Perl &lt;code&gt;&lt;a href=&quot;sprintf&quot;&gt;sprintf&lt;/a&gt;&lt;/code&gt; допускает следующие общеизвестные преобразования:</target>
        </trans-unit>
        <trans-unit id="53cad962b7a83e25af2f6bf67e501730e16fa363" translate="yes" xml:space="preserve">
          <source>Perl's &lt;code&gt;pprivate&lt;/code&gt; structure</source>
          <target state="translated">Структура Perl &lt;code&gt;pprivate&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="50b7e56f45ec7b1f922cb2ef554212efaf347a1d" translate="yes" xml:space="preserve">
          <source>Perl's API has changed over time, gaining new features, new functions, increasing its flexibility, and reducing the impact on the C namespace environment (reduced pollution). The header file written by this module, typically</source>
          <target state="translated">Со временем API Perl претерпел изменения,получив новые возможности,новые функции,увеличив гибкость и уменьшив влияние на среду именного пространства C (уменьшение загрязнения).Заголовочный файл,написанный этим модулем,обычно</target>
        </trans-unit>
        <trans-unit id="e05aa87f748ad78da85fa4d39c89ae07ccce030e" translate="yes" xml:space="preserve">
          <source>Perl's C-style &lt;code&gt;for&lt;/code&gt; loop works like the corresponding &lt;code&gt;while&lt;/code&gt; loop; that means that this:</source>
          <target state="translated">C-стиль в Perl &lt;code&gt;for&lt;/code&gt; цикла работает как соответствующее во &lt;code&gt;while&lt;/code&gt; цикла; это означает, что это:</target>
        </trans-unit>
        <trans-unit id="5db9c37ab5f7f0381d150d83940e69ede28d72bd" translate="yes" xml:space="preserve">
          <source>Perl's IO. Consequently only built-in layers can appear in this list, as external layers (such as &lt;code&gt;:encoding()&lt;/code&gt; ) need IO in order to load them! See &lt;a href=&quot;open&quot;&gt;open pragma&lt;/a&gt; for how to add external encodings as defaults.</source>
          <target state="translated">IO Perl. Следовательно, в этом списке могут отображаться только встроенные слои, так как внешние слои (такие как &lt;code&gt;:encoding()&lt;/code&gt; ) требуют ввода-вывода для их загрузки! См. &lt;a href=&quot;open&quot;&gt;Open pragma,&lt;/a&gt; чтобы узнать, как добавить внешние кодировки по умолчанию.</target>
        </trans-unit>
        <trans-unit id="b76c3fa97974625df89eb014ff16153ff4616729" translate="yes" xml:space="preserve">
          <source>Perl's IO. Consequently only built-in layers can appear in this list, as external layers (such as &lt;code&gt;:encoding()&lt;/code&gt;) need IO in order to load them! See &lt;a href=&quot;open&quot;&gt;&quot;open pragma&quot;&lt;/a&gt; for how to add external encodings as defaults.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4a012002430e5ec63e7214212c95e7a6c13798d5" translate="yes" xml:space="preserve">
          <source>Perl's OO system is class-based. Class-based OO is fairly common. It's used by Java, C++, C#, Python, Ruby, and many other languages. There are other object orientation paradigms as well. JavaScript is the most popular language to use another paradigm. JavaScript's OO system is prototype-based.</source>
          <target state="translated">Система OO Перла основана на классах.Класс-ориентированная система OO довольно распространена.Он используется на Java,C++,C#,Python,Ruby и многих других языках.Существуют и другие парадигмы объектной ориентации.JavaScript является наиболее популярным языком для использования другой парадигмы.Система OO на JavaScript основана на прототипах.</target>
        </trans-unit>
        <trans-unit id="9806e03898721874442226704be9b61686d35f9b" translate="yes" xml:space="preserve">
          <source>Perl's TIEHANDLE spec was incomplete prior to 5.005_57; it was missing support for &lt;code&gt;seek()&lt;/code&gt;, &lt;code&gt;tell()&lt;/code&gt;, and &lt;code&gt;eof()&lt;/code&gt;. Attempting to use these functions with an IO::Scalar will not work prior to 5.005_57. IO::Scalar will not have the relevant methods invoked; and even worse, this kind of bug can lie dormant for a while. If you turn warnings on (via &lt;code&gt;$^W&lt;/code&gt; or &lt;code&gt;perl -w&lt;/code&gt;), and you see something like this...</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f14833bc12320cc5b22e2f7f5922dcba8b20a6ea" translate="yes" xml:space="preserve">
          <source>Perl's Unicode Model</source>
          <target state="translated">Модель Perl's Unicode</target>
        </trans-unit>
        <trans-unit id="78c1f3e5a87cf4bde2cfaf198cd9b736e054adc6" translate="yes" xml:space="preserve">
          <source>Perl's Unicode Support</source>
          <target state="translated">Поддержка Perl Unicode</target>
        </trans-unit>
        <trans-unit id="2f4e8610ccf72680ce428d05cdb3a44400f56202" translate="yes" xml:space="preserve">
          <source>Perl's arrays do not have a fixed size, so you don't need linked lists if you just want to add or remove items. You can use array operations such as &lt;code&gt;&lt;a href=&quot;functions/push&quot;&gt;push&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/pop&quot;&gt;pop&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/shift&quot;&gt;shift&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/unshift&quot;&gt;unshift&lt;/a&gt;&lt;/code&gt;, or &lt;code&gt;&lt;a href=&quot;functions/splice&quot;&gt;splice&lt;/a&gt;&lt;/code&gt; to do that.</source>
          <target state="translated">Массивы Perl не имеют фиксированного размера, поэтому вам не нужны связанные списки, если вы просто хотите добавлять или удалять элементы. Для этого вы можете использовать операции с массивами, такие как &lt;code&gt;&lt;a href=&quot;functions/push&quot;&gt;push&lt;/a&gt;&lt;/code&gt; , &lt;code&gt;&lt;a href=&quot;functions/pop&quot;&gt;pop&lt;/a&gt;&lt;/code&gt; , &lt;code&gt;&lt;a href=&quot;functions/shift&quot;&gt;shift&lt;/a&gt;&lt;/code&gt; , &lt;code&gt;&lt;a href=&quot;functions/unshift&quot;&gt;unshift&lt;/a&gt;&lt;/code&gt; или &lt;code&gt;&lt;a href=&quot;functions/splice&quot;&gt;splice&lt;/a&gt;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="180c125ddac8494f8c8cf2f82ef0744802e2f7e3" translate="yes" xml:space="preserve">
          <source>Perl's arrays do not have a fixed size, so you don't need linked lists if you just want to add or remove items. You can use array operations such as &lt;code&gt;push&lt;/code&gt;, &lt;code&gt;pop&lt;/code&gt;, &lt;code&gt;shift&lt;/code&gt;, &lt;code&gt;unshift&lt;/code&gt;, or &lt;code&gt;splice&lt;/code&gt; to do that.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f0829cd34f91158f6d50d3501d1729557f626943" translate="yes" xml:space="preserve">
          <source>Perl's basic open() statement can also be used for unidirectional interprocess communication by either appending or prepending a pipe symbol to the second argument to open(). Here's how to start something up in a child process you intend to write to:</source>
          <target state="translated">Базовый оператор open()в Perl также может быть использован для однонаправленного межпроцессного взаимодействия путем добавления или предварения символа трубы ко второму аргументу open().Вот как запустить что-то в дочернем процессе,в который вы собираетесь писать:</target>
        </trans-unit>
        <trans-unit id="d1c613eb863cbd84885db8255f46385590e7af47" translate="yes" xml:space="preserve">
          <source>Perl's basic open() statement can also be used for unidirectional interprocess communication by specifying the open mode as &lt;code&gt;|-&lt;/code&gt; or &lt;code&gt;-|&lt;/code&gt;. Here's how to start something up in a child process you intend to write to:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f7f15224970f30bbd8cc0d913eabc8b8733adcd9" translate="yes" xml:space="preserve">
          <source>Perl's built-in introspection features are fairly minimal. &lt;code&gt;Moose&lt;/code&gt; builds on top of them and creates a full introspection layer for your classes. This lets you ask questions like &quot;what methods does the File class implement?&quot; It also lets you modify your classes programmatically.</source>
          <target state="translated">Встроенные в Perl возможности самоанализа довольно минимальны. &lt;code&gt;Moose&lt;/code&gt; строит поверх них и создает слой полного самоанализа для ваших классов. Это позволяет вам задавать такие вопросы, как &amp;laquo;какие методы реализует класс File?&amp;raquo; Он также позволяет вам программно изменять классы.</target>
        </trans-unit>
        <trans-unit id="45287a14757d133ee14640bcf6c328a91774bc92" translate="yes" xml:space="preserve">
          <source>Perl's builtin flock() function (see &lt;a href=&quot;perlfunc&quot;&gt;perlfunc&lt;/a&gt; for details) will call flock(2) if that exists, fcntl(2) if it doesn't (on perl version 5.004 and later), and lockf(3) if neither of the two previous system calls exists. On some systems, it may even use a different form of native locking. Here are some gotchas with Perl's flock():</source>
          <target state="translated">&lt;a href=&quot;perlfunc&quot;&gt;Встроенная&lt;/a&gt; функция Perl flock () ( подробности см. В perlfunc ) будет вызывать flock (2), если он существует, fcntl (2), если он не существует (в версии Perl 5.004 и новее), и lockf (3), если ни один из двух предыдущие системные вызовы существуют. В некоторых системах он может даже использовать другую форму собственной блокировки. Вот несколько ошибок с Perl flock ():</target>
        </trans-unit>
        <trans-unit id="4e23292bcea30aa529b568a400bba32042a7e37e" translate="yes" xml:space="preserve">
          <source>Perl's characters are stored internally as sequences of one or more bytes. This pragma allows for the examination of the individual bytes that together comprise a character.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f507c173df4e9952b98c777db1766156932095e8" translate="yes" xml:space="preserve">
          <source>Perl's documentation is an important resource for our users. It's incredibly important for Perl's documentation to be reasonably coherent and to accurately reflect the current implementation.</source>
          <target state="translated">Документация на Perl является важным ресурсом для наших пользователей.Невероятно важно,чтобы Perl-документация была достаточно последовательной и точно отражала текущую реализацию.</target>
        </trans-unit>
        <trans-unit id="8e7bbfdbc61f02638ca2efad632597e1e0cf6bad" translate="yes" xml:space="preserve">
          <source>Perl's engine sets this flag if the pattern is &lt;code&gt;\s+&lt;/code&gt;.</source>
          <target state="translated">Движок Perl устанавливает этот флаг, если шаблон равен &lt;code&gt;\s+&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="c7dfeaf28529f5593bf2febfb63757ff3cbe501b" translate="yes" xml:space="preserve">
          <source>Perl's engine sets this flag on empty patterns, this optimization makes &lt;code&gt;&lt;a href=&quot;functions/split&quot;&gt;split&lt;/a&gt; //&lt;/code&gt; much faster than it would otherwise be. It's even faster than &lt;code&gt;&lt;a href=&quot;functions/unpack&quot;&gt;unpack&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">Движок Perl устанавливает этот флаг для пустых шаблонов, эта оптимизация делает &lt;code&gt;&lt;a href=&quot;functions/split&quot;&gt;split&lt;/a&gt; //&lt;/code&gt; &lt;a href=&quot;functions/split&quot;&gt;разбиение&lt;/a&gt; намного быстрее, чем это было бы в противном случае. Это даже быстрее, чем &lt;code&gt;&lt;a href=&quot;functions/unpack&quot;&gt;unpack&lt;/a&gt;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="a12b92b4349d16b75893487c4da574782b294666" translate="yes" xml:space="preserve">
          <source>Perl's engine sets this flag on empty patterns, this optimization makes &lt;code&gt;split //&lt;/code&gt; much faster than it would otherwise be. It's even faster than &lt;code&gt;unpack&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ae0e4b0c5f9f6cc7920bb5bbdeff06433a976d20" translate="yes" xml:space="preserve">
          <source>Perl's engine sets this if the pattern is &lt;code&gt;/^/&lt;/code&gt; (&lt;code&gt;plen == 1 &amp;amp;&amp;amp; *exp
== '^'&lt;/code&gt; ), even under &lt;code&gt;/^/s&lt;/code&gt; ; see &lt;a href=&quot;perlfunc&quot;&gt;split&lt;/a&gt;. Of course a different regex engine might want to use the same optimizations with a different syntax.</source>
          <target state="translated">Движок Perl устанавливает это, если шаблон равен &lt;code&gt;/^/&lt;/code&gt; ( &lt;code&gt;plen == 1 &amp;amp;&amp;amp; *exp == '^'&lt;/code&gt; ), даже если &lt;code&gt;/^/s&lt;/code&gt; ; см. &lt;a href=&quot;perlfunc&quot;&gt;разделение&lt;/a&gt; . Конечно, другой движок регулярных выражений может захотеть использовать те же оптимизации с другим синтаксисом.</target>
        </trans-unit>
        <trans-unit id="491c64f9a6d1d02d83e18cbec69820885ad456fd" translate="yes" xml:space="preserve">
          <source>Perl's engine sets this if the pattern is &lt;code&gt;/^/&lt;/code&gt; (&lt;code&gt;plen == 1 &amp;amp;&amp;amp; *exp == '^'&lt;/code&gt;), even under &lt;code&gt;/^/s&lt;/code&gt;; see &lt;a href=&quot;perlfunc&quot;&gt;split&lt;/a&gt;. Of course a different regex engine might want to use the same optimizations with a different syntax.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7f1c7280d32070c89f6f598972838907640e2c7c" translate="yes" xml:space="preserve">
          <source>Perl's exception handing (i.e. &lt;code&gt;&lt;a href=&quot;functions/die&quot;&gt;die&lt;/a&gt;&lt;/code&gt; etc.) is built on top of the low-level &lt;code&gt;setjmp()&lt;/code&gt; /&lt;code&gt;longjmp()&lt;/code&gt; C-library functions. These basically provide a way to capture the current PC and SP registers and later restore them; i.e. a &lt;code&gt;longjmp()&lt;/code&gt; continues at the point in code where a previous &lt;code&gt;setjmp()&lt;/code&gt; was done, with anything further up on the C stack being lost. This is why code should always save values using &lt;code&gt;SAVE_FOO&lt;/code&gt; rather than in auto variables.</source>
          <target state="translated">Обработка исключений Perl (т.е. &lt;code&gt;&lt;a href=&quot;functions/die&quot;&gt;die&lt;/a&gt;&lt;/code&gt; и т.д.) построена на основе низкоуровневых функций C-библиотеки &lt;code&gt;setjmp()&lt;/code&gt; / &lt;code&gt;longjmp()&lt;/code&gt; . Они в основном предоставляют способ захвата текущих регистров ПК и SP и последующего их восстановления; т.е. &lt;code&gt;longjmp()&lt;/code&gt; продолжается в той точке кода, где была выполнена предыдущая &lt;code&gt;setjmp()&lt;/code&gt; , при этом все, что находится дальше в стеке C, теряется. Вот почему код всегда должен сохранять значения с помощью &lt;code&gt;SAVE_FOO&lt;/code&gt; , а не в автоматических переменных.</target>
        </trans-unit>
        <trans-unit id="624ef0dffdfa023577d4ff52307fa87cfe9d9de6" translate="yes" xml:space="preserve">
          <source>Perl's exception handing (i.e. &lt;code&gt;die&lt;/code&gt; etc.) is built on top of the low-level &lt;code&gt;setjmp()&lt;/code&gt;/&lt;code&gt;longjmp()&lt;/code&gt; C-library functions. These basically provide a way to capture the current PC and SP registers and later restore them; i.e. a &lt;code&gt;longjmp()&lt;/code&gt; continues at the point in code where a previous &lt;code&gt;setjmp()&lt;/code&gt; was done, with anything further up on the C stack being lost. This is why code should always save values using &lt;code&gt;SAVE_FOO&lt;/code&gt; rather than in auto variables.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e91c40c4e8331eb78a3c6f0cd54f4782d65eb5ae" translate="yes" xml:space="preserve">
          <source>Perl's exception-handling mechanism is its &lt;code&gt;&lt;a href=&quot;functions/eval&quot;&gt;eval()&lt;/a&gt;&lt;/code&gt; operator. You can use &lt;code&gt;&lt;a href=&quot;functions/eval&quot;&gt;eval()&lt;/a&gt;&lt;/code&gt; as &lt;code&gt;setjmp&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;functions/die&quot;&gt;die()&lt;/a&gt;&lt;/code&gt; as &lt;code&gt;longjmp&lt;/code&gt; . For details of this, see the section on signals, especially the time-out handler for a blocking &lt;code&gt;&lt;a href=&quot;functions/flock&quot;&gt;flock()&lt;/a&gt;&lt;/code&gt; in &lt;a href=&quot;perlipc#Signals&quot;&gt;Signals in perlipc&lt;/a&gt; or the section on &quot;Signals&quot; in</source>
          <target state="translated">Механизм обработки исключений Perl - это его оператор &lt;code&gt;&lt;a href=&quot;functions/eval&quot;&gt;eval()&lt;/a&gt;&lt;/code&gt; . Вы можете использовать &lt;code&gt;&lt;a href=&quot;functions/eval&quot;&gt;eval()&lt;/a&gt;&lt;/code&gt; как &lt;code&gt;setjmp&lt;/code&gt; и &lt;code&gt;&lt;a href=&quot;functions/die&quot;&gt;die()&lt;/a&gt;&lt;/code&gt; как &lt;code&gt;longjmp&lt;/code&gt; . Подробнее об этом см. В разделе о сигналах, особенно об обработчике тайм-аута для блокирующего &lt;code&gt;&lt;a href=&quot;functions/flock&quot;&gt;flock()&lt;/a&gt;&lt;/code&gt; в &lt;a href=&quot;perlipc#Signals&quot;&gt;Signals в perlipc&lt;/a&gt; или в разделе &amp;laquo;Сигналы&amp;raquo; в</target>
        </trans-unit>
        <trans-unit id="9cac2f4c55e81f4acfeedcd4627b6c31b378f1bc" translate="yes" xml:space="preserve">
          <source>Perl's exception-handling mechanism is its &lt;code&gt;eval()&lt;/code&gt; operator. You can use &lt;code&gt;eval()&lt;/code&gt; as &lt;code&gt;setjmp&lt;/code&gt; and &lt;code&gt;die()&lt;/code&gt; as &lt;code&gt;longjmp&lt;/code&gt;. For details of this, see the section on signals, especially the time-out handler for a blocking &lt;code&gt;flock()&lt;/code&gt; in &lt;a href=&quot;perlipc#Signals&quot;&gt;&quot;Signals&quot; in perlipc&lt;/a&gt; or the section on &quot;Signals&quot; in</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7495373aa18cedc70045dae42e442c9fd6b35bbc" translate="yes" xml:space="preserve">
          <source>Perl's initial DTrace support was added, providing &lt;code&gt;&lt;a href=&quot;functions/sub&quot;&gt;sub-entry&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;functions/sub&quot;&gt;sub-return&lt;/a&gt;&lt;/code&gt; probes.</source>
          <target state="translated">Была добавлена ​​первоначальная поддержка DTrace в Perl, обеспечивающая зонды &lt;code&gt;&lt;a href=&quot;functions/sub&quot;&gt;sub-entry&lt;/a&gt;&lt;/code&gt; и &lt;code&gt;&lt;a href=&quot;functions/sub&quot;&gt;sub-return&lt;/a&gt;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="3b6888971fb1fbb4f3722d29940392de31cd3dc2" translate="yes" xml:space="preserve">
          <source>Perl's initial DTrace support was added, providing &lt;code&gt;sub-entry&lt;/code&gt; and &lt;code&gt;sub-return&lt;/code&gt; probes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="de9d9a267eecc4785713b5ac86a07e677cc17c7d" translate="yes" xml:space="preserve">
          <source>Perl's internal UTF8 flag is called &quot;UTF8&quot;, without a hyphen. It indicates whether a string is internally encoded as &quot;utf8&quot;, also without a hyphen.</source>
          <target state="translated">Внутренний флаг Perl UTF8 называется &quot;UTF8&quot;,без дефиса.Он указывает на то,что строка имеет внутреннюю кодировку &quot;utf8&quot;,также без дефиса.</target>
        </trans-unit>
        <trans-unit id="964109bdae72322c39e19dfb06177d03a380e828" translate="yes" xml:space="preserve">
          <source>Perl's internal error-handling mechanisms implement &lt;code&gt;die&lt;/code&gt; (and its internal equivalents) using longjmp. If this occurs during lexing, parsing or compilation, we must ensure that any ops allocated as part of the compilation process are freed. (Older Perl versions did not adequately handle this situation: when failing a parse, they would leak ops that were stored in C &lt;code&gt;auto&lt;/code&gt; variables and not linked anywhere else.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0c96604288539e03d84ef021ff0e6c92aef63b6c" translate="yes" xml:space="preserve">
          <source>Perl's malloc() uses bucketed allocations. Every request is rounded up to the closest bucket size available, and a bucket is taken from the pool of buckets of that size.</source>
          <target state="translated">Perl's malloc()использует ковшовые распределения.Каждый запрос округляется до ближайшего доступного размера ведра,а ведро берется из пула ведер такого размера.</target>
        </trans-unit>
        <trans-unit id="b579bfa5793ff016b56c6d7d86928d92232797da" translate="yes" xml:space="preserve">
          <source>Perl's moaning about locale problems can be silenced by setting the environment variable &lt;code&gt;PERL_BADLANG&lt;/code&gt; to &quot;0&quot; or &quot;&quot;. This method really just sweeps the problem under the carpet: you tell Perl to shut up even when Perl sees that something is wrong. Do not be surprised if later something locale-dependent misbehaves.</source>
          <target state="translated">&lt;code&gt;PERL_BADLANG&lt;/code&gt; Perl о проблемах с локалью можно заглушить, установив для переменной окружения PERL_BADLANG значение &amp;laquo;0&amp;raquo; или &amp;laquo;&amp;raquo;. Этот метод на самом деле просто скрывает проблему: вы говорите Perl замолчать, даже если Perl видит, что что-то не так. Не удивляйтесь, если позже что-то, зависящее от локали, поведет себя неправильно.</target>
        </trans-unit>
        <trans-unit id="1f69de9b9e78267eea8d1d7d32a8294de0865cf8" translate="yes" xml:space="preserve">
          <source>Perl's operator overloading facility is completely ignored here. Operator overloading allows user-defined behaviors for numbers, such as operations over arbitrarily large integers, floating points numbers with arbitrary precision, operations over &quot;exotic&quot; numbers such as modular arithmetic or p-adic arithmetic, and so on. See &lt;a href=&quot;overload&quot;&gt;overload&lt;/a&gt; for details.</source>
          <target state="translated">Возможность перегрузки операторов Perl здесь полностью игнорируется. Перегрузка операторов позволяет определять поведение чисел, определяемое пользователем, например операции над произвольно большими целыми числами, числами с плавающей запятой с произвольной точностью, операции над &amp;laquo;экзотическими&amp;raquo; числами, такие как модульная арифметика или p-адическая арифметика, и так далее. См. Подробности в разделе &amp;laquo; &lt;a href=&quot;overload&quot;&gt;Перегрузка&amp;raquo;&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="669d7e9913d51876345768dad50e148946b6d1f0" translate="yes" xml:space="preserve">
          <source>Perl's own engine will croak on any attempt to modify the capture variables, to do this in another engine use the following callback (copied from &lt;code&gt;Perl_reg_numbered_buff_store&lt;/code&gt; ):</source>
          <target state="translated">Собственный движок Perl будет квакать при любой попытке изменить переменные захвата, чтобы сделать это в другом движке, используйте следующий обратный вызов (скопированный из &lt;code&gt;Perl_reg_numbered_buff_store&lt;/code&gt; ):</target>
        </trans-unit>
        <trans-unit id="532111a8d37e622ace362d3c82b8583e84a70c42" translate="yes" xml:space="preserve">
          <source>Perl's own engine will croak on any attempt to modify the capture variables, to do this in another engine use the following callback (copied from &lt;code&gt;Perl_reg_numbered_buff_store&lt;/code&gt;):</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6c9f49d7c7e821b89479c1f1cbb325917aa3145b" translate="yes" xml:space="preserve">
          <source>Perl's packages, namespaces, and some info on classes.</source>
          <target state="translated">Пакеты Perl,пространства имен и некоторая информация по классам.</target>
        </trans-unit>
        <trans-unit id="89f3a57557f87a2d78c866238eabb4d6f9e4ed76" translate="yes" xml:space="preserve">
          <source>Perl's pprivate structure</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4588c5311e33f989f4525ce1f0cd16204a00ea04" translate="yes" xml:space="preserve">
          <source>Perl's process, file, and text manipulation facilities make it particularly well-suited for tasks involving quick prototyping, system utilities, software tools, system management tasks, database access, graphical programming, networking, and web programming.</source>
          <target state="translated">Возможности Perl по работе с процессами,файлами и текстом делают его особенно подходящим для задач,связанных с быстрым созданием прототипов,системными утилитами,программными средствами,задачами управления системой,доступом к базам данных,графическим программированием,сетевым и веб-программированием.</target>
        </trans-unit>
        <trans-unit id="93c38b6a66fe842db97ccbef348de209e8c19b5f" translate="yes" xml:space="preserve">
          <source>Perl's regular expression support is both broad and deep, and is the subject of lengthy documentation in &lt;a href=&quot;perlrequick&quot;&gt;perlrequick&lt;/a&gt;, &lt;a href=&quot;perlretut&quot;&gt;perlretut&lt;/a&gt;, and elsewhere. However, in short:</source>
          <target state="translated">Поддержка регулярных выражений в Perl широка и глубока и является предметом обширной документации в &lt;a href=&quot;perlrequick&quot;&gt;perlrequick&lt;/a&gt; , &lt;a href=&quot;perlretut&quot;&gt;perlretut&lt;/a&gt; и других местах. Однако вкратце:</target>
        </trans-unit>
        <trans-unit id="ff94ebb325d8b09e3a30e14e5986ca64a175f3eb" translate="yes" xml:space="preserve">
          <source>Perl's roots in text processing haven't been forgotten over the years. It still boasts some of the most powerful regular expressions to be found anywhere, and its support for Unicode text is world-class. It handles all kinds of structured text, too, through an extensive collection of extensions. Those libraries, collected in the CPAN, provide ready-made solutions to an astounding array of problems. When they haven't set the standard themselves, they steal from the best -- just like Perl itself.</source>
          <target state="translated">Корни Перла в обработке текстов не были забыты за эти годы.Он до сих пор может похвастаться одними из самых мощных регулярных выражений,которые можно найти где угодно,а его поддержка Unicode текста-мирового класса.Он также обрабатывает все виды структурированного текста с помощью обширной коллекции расширений.Эти библиотеки,собранные в CPAN,предлагают готовые решения поразительного спектра проблем.Когда они сами не установили стандарт,они крадут у лучших-так же,как и сам Perl.</target>
        </trans-unit>
        <trans-unit id="e5126fad405ea6c1a0317bc1b96e0b7052710e86" translate="yes" xml:space="preserve">
          <source>Perl's source code is stored in a Git repository.</source>
          <target state="translated">Исходный код Perl хранится в Git-репозитории.</target>
        </trans-unit>
        <trans-unit id="770b04c9b25881d8dba46acccf2294a181b06ea5" translate="yes" xml:space="preserve">
          <source>Perl's source code, and extensions that want maximum portability, should use the above functions instead of those defined in ANSI C's</source>
          <target state="translated">Исходный код Perl и расширения,требующие максимальной переносимости,должны использовать вышеперечисленные функции,а не те,которые определены в ANSI C's</target>
        </trans-unit>
        <trans-unit id="c91e012015b18438a085bd4240921bd7bbe55b97" translate="yes" xml:space="preserve">
          <source>Perl's threading package provides the &lt;code&gt;yield()&lt;/code&gt; function that does this. &lt;code&gt;yield()&lt;/code&gt; is pretty straightforward, and works like this:</source>
          <target state="translated">Пакет многопоточности Perl предоставляет для этого функцию &lt;code&gt;yield()&lt;/code&gt; . &lt;code&gt;yield()&lt;/code&gt; довольно прост и работает следующим образом:</target>
        </trans-unit>
        <trans-unit id="0d178a4e92aee7a478bcdc3786f5d6c00e61333c" translate="yes" xml:space="preserve">
          <source>Perl's version of &lt;code&gt;strdup()&lt;/code&gt; . Returns a pointer to a newly allocated string which is a duplicate of &lt;code&gt;pv&lt;/code&gt; . The size of the string is determined by &lt;code&gt;strlen()&lt;/code&gt; , which means it may not contain embedded &lt;code&gt;NUL&lt;/code&gt; characters and must have a trailing &lt;code&gt;NUL&lt;/code&gt; . The memory allocated for the new string can be freed with the &lt;code&gt;Safefree()&lt;/code&gt; function.</source>
          <target state="translated">Версия &lt;code&gt;strdup()&lt;/code&gt; Perl . Возвращает указатель на вновь выделенную строку, которая является дубликатом &lt;code&gt;pv&lt;/code&gt; . Размер строки определяется &lt;code&gt;strlen()&lt;/code&gt; , что означает, что она не может содержать встроенных символов &lt;code&gt;NUL&lt;/code&gt; и должна иметь завершающий &lt;code&gt;NUL&lt;/code&gt; . Память, выделенная для новой строки, может быть освобождена с помощью функции &lt;code&gt;Safefree()&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="cb7ece6ff69cf5a8948099da499efb5b6df6d0fa" translate="yes" xml:space="preserve">
          <source>Perl's version of &lt;code&gt;strdup()&lt;/code&gt;. Returns a pointer to a newly allocated string which is a duplicate of &lt;code&gt;pv&lt;/code&gt;. The size of the string is determined by &lt;code&gt;strlen()&lt;/code&gt;, which means it may not contain embedded &lt;code&gt;NUL&lt;/code&gt; characters and must have a trailing &lt;code&gt;NUL&lt;/code&gt;. To prevent memory leaks, the memory allocated for the new string needs to be freed when no longer needed. This can be done with the &lt;a href=&quot;#Safefree&quot;&gt;&quot;&lt;code&gt;Safefree&lt;/code&gt;&quot;&lt;/a&gt; function, or &lt;a href=&quot;perlguts#SAVEFREEPV%28p%29&quot;&gt;&lt;code&gt;SAVEFREEPV&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="25b683a4b535a4d7cfe41ce26d997bfe703e18cc" translate="yes" xml:space="preserve">
          <source>Perl's version of what &lt;code&gt;strndup()&lt;/code&gt; would be if it existed. Returns a pointer to a newly allocated string which is a duplicate of the first &lt;code&gt;len&lt;/code&gt; bytes from &lt;code&gt;pv&lt;/code&gt; , plus a trailing &lt;code&gt;NUL&lt;/code&gt; byte. The memory allocated for the new string can be freed with the &lt;code&gt;Safefree()&lt;/code&gt; function.</source>
          <target state="translated">Версия Perl того, чем &lt;code&gt;strndup()&lt;/code&gt; бы strndup () , если бы она существовала. Возвращает указатель на вновь выделенную строку, которая является дубликатом первых &lt;code&gt;len&lt;/code&gt; байтов из &lt;code&gt;pv&lt;/code&gt; , а также завершающего байта &lt;code&gt;NUL&lt;/code&gt; . Память, выделенная для новой строки, может быть освобождена с помощью функции &lt;code&gt;Safefree()&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="dcb73b72031ec0067bbb619275e109d78350c312" translate="yes" xml:space="preserve">
          <source>Perl's version of what &lt;code&gt;strndup()&lt;/code&gt; would be if it existed. Returns a pointer to a newly allocated string which is a duplicate of the first &lt;code&gt;len&lt;/code&gt; bytes from &lt;code&gt;pv&lt;/code&gt;, plus a trailing &lt;code&gt;NUL&lt;/code&gt; byte. The memory allocated for the new string can be freed with the &lt;code&gt;Safefree()&lt;/code&gt; function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f5a6f57c5b6a74291061b990e5d20daa26fe09bb" translate="yes" xml:space="preserve">
          <source>Perl's version vs. Unicode version</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7a524db45cae5747e45efc8dd0850e8e606106b1" translate="yes" xml:space="preserve">
          <source>Perl, for example, is supplied with two types of licence: The GNU GPL and The Artistic Licence (see the files README, Copying, and Artistic, or &lt;a href=&quot;https://perldoc.perl.org/5.26.0/perlgpl.html&quot;&gt;perlgpl&lt;/a&gt; and &lt;a href=&quot;https://perldoc.perl.org/5.26.0/perlartistic.html&quot;&gt;perlartistic&lt;/a&gt;). Larry has good reasons for NOT just using the GNU GPL.</source>
          <target state="translated">Perl, например, поставляется с двумя типами лицензий: GNU GPL и Artistic License (см. Файлы README, Copying и Artistic или &lt;a href=&quot;https://perldoc.perl.org/5.26.0/perlgpl.html&quot;&gt;perlgpl&lt;/a&gt; и &lt;a href=&quot;https://perldoc.perl.org/5.26.0/perlartistic.html&quot;&gt;perlartistic&lt;/a&gt; ). У Ларри есть веские причины НЕ использовать только GNU GPL.</target>
        </trans-unit>
        <trans-unit id="564aee985156bf1f7e4d6943ab0b96e9d1591dee" translate="yes" xml:space="preserve">
          <source>Perl, for example, is supplied with two types of licence: The GNU GPL and The Artistic Licence (see the files README, Copying, and Artistic, or &lt;a href=&quot;https://perldoc.perl.org/5.32.0/perlgpl&quot;&gt;perlgpl&lt;/a&gt; and &lt;a href=&quot;https://perldoc.perl.org/5.32.0/perlartistic&quot;&gt;perlartistic&lt;/a&gt;). Larry has good reasons for NOT just using the GNU GPL.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7fb2ce1409b2c38c39e7006d8b4053a16eb3cd6a" translate="yes" xml:space="preserve">
          <source>Perl, in most cases, will raise a warning when matching an above-Unicode code point against a Unicode property when the result is &lt;code&gt;TRUE&lt;/code&gt; for &lt;code&gt;\p{}&lt;/code&gt; , and &lt;code&gt;FALSE&lt;/code&gt; for &lt;code&gt;\P{}&lt;/code&gt; . For example:</source>
          <target state="translated">Perl, в большинстве случаев, выдает предупреждение при сопоставлении указанной выше кодовой точки Unicode со свойством Unicode, когда результат &lt;code&gt;TRUE&lt;/code&gt; для &lt;code&gt;\p{}&lt;/code&gt; и &lt;code&gt;FALSE&lt;/code&gt; для &lt;code&gt;\P{}&lt;/code&gt; . Например:</target>
        </trans-unit>
        <trans-unit id="4e8a529ad62929cfec8c575ae762a6bdd257a323" translate="yes" xml:space="preserve">
          <source>Perl, in most cases, will raise a warning when matching an above-Unicode code point against a Unicode property when the result is &lt;code&gt;TRUE&lt;/code&gt; for &lt;code&gt;\p{}&lt;/code&gt;, and &lt;code&gt;FALSE&lt;/code&gt; for &lt;code&gt;\P{}&lt;/code&gt;. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ca608dbd89f51d5e2692a9f1c25c1e965290836e" translate="yes" xml:space="preserve">
          <source>Perl-Zeitung</source>
          <target state="translated">Perl-Zeitung</target>
        </trans-unit>
        <trans-unit id="ad6b525b8d5c1fb1d32da22f33d9e131f0326e0b" translate="yes" xml:space="preserve">
          <source>Perl.Exe</source>
          <target state="translated">Perl.Exe</target>
        </trans-unit>
        <trans-unit id="9a9aafaa9f4d06797b1c23d69746010b54bd3e53" translate="yes" xml:space="preserve">
          <source>Perl.com has two interesting articles on profiling: &quot;Profiling Perl&quot;, by Simon Cozens, &lt;a href=&quot;http://www.perl.com/lpt/a/850&quot;&gt;http://www.perl.com/lpt/a/850&lt;/a&gt; and &quot;Debugging and Profiling mod_perl Applications&quot;, by Frank Wiles, &lt;a href=&quot;http://www.perl.com/pub/a/2006/02/09/debug_mod_perl.html&quot;&gt;http://www.perl.com/pub/a/2006/02/09/debug_mod_perl.html&lt;/a&gt; .</source>
          <target state="translated">На Perl.com есть две интересные статьи по профилированию: &amp;laquo;Профилирование Perl&amp;raquo; Саймона Козенса &lt;a href=&quot;http://www.perl.com/lpt/a/850&quot;&gt;http://www.perl.com/lpt/a/850&lt;/a&gt; и &amp;laquo;Отладка и профилирование приложений mod_perl&amp;raquo; Фрэнка Уайлса, &lt;a href=&quot;http://www.perl.com/pub/a/2006/02/09/debug_mod_perl.html&quot;&gt;http: / /www.perl.com/pub/a/2006/02/09/debug_mod_perl.html&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="4578b93cb1f77ba5f7e19625dc5d7f4767458f2f" translate="yes" xml:space="preserve">
          <source>Perl.com has two interesting articles on profiling: &quot;Profiling Perl&quot;, by Simon Cozens, &lt;a href=&quot;https://www.perl.com/pub/2004/06/25/profiling.html/&quot;&gt;https://www.perl.com/pub/2004/06/25/profiling.html/&lt;/a&gt; and &quot;Debugging and Profiling mod_perl Applications&quot;, by Frank Wiles, &lt;a href=&quot;http://www.perl.com/pub/a/2006/02/09/debug_mod_perl.html&quot;&gt;http://www.perl.com/pub/a/2006/02/09/debug_mod_perl.html&lt;/a&gt; .</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="59ecc62b49475d2cb5cb7295258de980e7bb9d53" translate="yes" xml:space="preserve">
          <source>Perl.pkg</source>
          <target state="translated">Perl.pkg</target>
        </trans-unit>
        <trans-unit id="047f2fc576481bb11cc4caee3ec1941467bc112a" translate="yes" xml:space="preserve">
          <source>Perl/Pollution/Portability</source>
          <target state="translated">Perl/Pollution/Portability</target>
        </trans-unit>
        <trans-unit id="0fabd9b0cbed286f085c386669bbb624b6ae0be5" translate="yes" xml:space="preserve">
          <source>Perl2Exe ( &lt;a href=&quot;http://www.indigostar.com/perl2exe.htm&quot;&gt;http://www.indigostar.com/perl2exe.htm&lt;/a&gt; ) is a command line program for converting perl scripts to executable files. It targets both Windows and Unix platforms.</source>
          <target state="translated">Perl2Exe ( &lt;a href=&quot;http://www.indigostar.com/perl2exe.htm&quot;&gt;http://www.indigostar.com/perl2exe.htm&lt;/a&gt; ) - это программа командной строки для преобразования сценариев Perl в исполняемые файлы. Он нацелен как на платформы Windows, так и на Unix.</target>
        </trans-unit>
        <trans-unit id="a58d113e289a5dca1b713eadc28920196d35302a" translate="yes" xml:space="preserve">
          <source>Perl5 Functions not currently supported in Plan 9 Perl</source>
          <target state="translated">Perl5 Функции,не поддерживаемые в настоящее время в плане 9 Perl</target>
        </trans-unit>
        <trans-unit id="7cf03298e4568d40fe4a8c254cdea9aeaf4618e7" translate="yes" xml:space="preserve">
          <source>Perl5 access to Berkeley DB version 1.x</source>
          <target state="translated">Доступ Perl5 к Berkeley DB версии 1.x</target>
        </trans-unit>
        <trans-unit id="a6b97c33f7f10f0b285f97ea17573e6970b9aabb" translate="yes" xml:space="preserve">
          <source>Perl5 access to the gdbm library.</source>
          <target state="translated">Perl5 доступ к библиотеке gdbm.</target>
        </trans-unit>
        <trans-unit id="03941ae667c96e0e93e4d324251c39d314452658" translate="yes" xml:space="preserve">
          <source>Perl::OSType</source>
          <target state="translated">Perl::OSType</target>
        </trans-unit>
        <trans-unit id="b6aec8ca037613e9d0fce40c6e0f1816ba73a700" translate="yes" xml:space="preserve">
          <source>Perl::OSType - Map Perl operating system names to generic types</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0f928d45134ea1b82a2f4001e977a9ca5021266a" translate="yes" xml:space="preserve">
          <source>PerlApp</source>
          <target state="translated">PerlApp</target>
        </trans-unit>
        <trans-unit id="35c6d70e8ca70c86c34afe75094fe416cee5049d" translate="yes" xml:space="preserve">
          <source>PerlBuilder</source>
          <target state="translated">PerlBuilder</target>
        </trans-unit>
        <trans-unit id="1fdc87c61ab4b84ad3bb7770857151e78dcb1fd1" translate="yes" xml:space="preserve">
          <source>PerlBuilder is an integrated development environment for Windows that supports Perl development.</source>
          <target state="translated">PerlBuilder-это интегрированная среда разработки для Windows,поддерживающая разработку на Perl.</target>
        </trans-unit>
        <trans-unit id="6649c958c30583d092dd8452f695dfb9e308dc26" translate="yes" xml:space="preserve">
          <source>PerlCE is currently linked with a simple console window, so it also works on non-hpc devices.</source>
          <target state="translated">В настоящее время PerlCE связан с простым консольным окном,поэтому он также работает на устройствах,не использующих Hpc.</target>
        </trans-unit>
        <trans-unit id="7aa73f69917f5eded1a42950facbce7317ea38d8" translate="yes" xml:space="preserve">
          <source>PerlIDE is handy to deal with perlce.</source>
          <target state="translated">С Перлиде удобно иметь дело с Перлиде.</target>
        </trans-unit>
        <trans-unit id="579ddb2e63a9c9da8567b958430ce3a45a513b30" translate="yes" xml:space="preserve">
          <source>PerlIO</source>
          <target state="translated">PerlIO</target>
        </trans-unit>
        <trans-unit id="2bc2886f7622b1210de6b2d1553751fdf04796f5" translate="yes" xml:space="preserve">
          <source>PerlIO * is a FILE *. This has been the default implementation since the abstraction was introduced in perl5.003_02.</source>
          <target state="translated">Перлио-это ФИЛЬЕ.Это было реализацией по умолчанию с тех пор,как абстракция была введена в perl5.003_02.</target>
        </trans-unit>
        <trans-unit id="71eb144823195b4440065066f28d18b5ab87828c" translate="yes" xml:space="preserve">
          <source>PerlIO - On demand loader for PerlIO layers and root of PerlIO::* name space</source>
          <target state="translated">PerlIO-по запросу загрузчик для слоев PerlIO и корня PerlIO::*пространство имен</target>
        </trans-unit>
        <trans-unit id="d16207b42b045b160714ba5de2f5ff0e6ff0943e" translate="yes" xml:space="preserve">
          <source>PerlIO ALWAYS calls this method to make sure it has its own private encoding object.</source>
          <target state="translated">PerlIO ВСЕГДА вызывает этот метод,чтобы удостовериться,что у него есть свой собственный объект частной кодировки.</target>
        </trans-unit>
        <trans-unit id="197c942bd2c3920a8495cda350b62bc73882bf34" translate="yes" xml:space="preserve">
          <source>PerlIO is a stack of layers.</source>
          <target state="translated">PerlIO-это стопка слоев.</target>
        </trans-unit>
        <trans-unit id="44ba71a577701dc77528a1c3cec83d223013c700" translate="yes" xml:space="preserve">
          <source>PerlIO layer ':win32' is experimental</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="439a0e2b9ec37cb15accbd0aa170c3040534253a" translate="yes" xml:space="preserve">
          <source>PerlIO layer for quoted-printable strings</source>
          <target state="translated">Слой PerlIO для строк,цитируемых в кавычках</target>
        </trans-unit>
        <trans-unit id="4ee79df7d6409c5fdbae86adeadf23592d153d40" translate="yes" xml:space="preserve">
          <source>PerlIO layers for &lt;b&gt;STDIN&lt;/b&gt; and &lt;b&gt;STDOUT&lt;/b&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6870089453c5b7ff02d4f86fa5b13e128f37bf93" translate="yes" xml:space="preserve">
          <source>PerlIO material contributed by Lupe Christoph, with some clarification by Nick Ing-Simmons.</source>
          <target state="translated">Материал PerlIO,предоставленный Лупе Кристофом,с некоторыми разъяснениями Ника Инг-Симмонса.</target>
        </trans-unit>
        <trans-unit id="820323203cd8f8b2a76e01512d15f3f0590e6729" translate="yes" xml:space="preserve">
          <source>PerlIO overrides the default Cygwin Text/Binary behaviour. A file will always be treated as binary, regardless of the mode of the mount it lives on, just like it is in UNIX. So CR/LF translation needs to be requested in either the &lt;code&gt;&lt;a href=&quot;functions/open&quot;&gt;open()&lt;/a&gt;&lt;/code&gt; call like this:</source>
          <target state="translated">PerlIO переопределяет поведение Cygwin Text / Binary по умолчанию. Файл всегда будет рассматриваться как двоичный, независимо от режима монтирования, в котором он находится, как и в UNIX. Таким образом, перевод CR / LF необходимо запрашивать либо в вызове &lt;code&gt;&lt;a href=&quot;functions/open&quot;&gt;open()&lt;/a&gt;&lt;/code&gt; как это:</target>
        </trans-unit>
        <trans-unit id="9cc5889d76cbd97257ac5d37c17d569437b80e5c" translate="yes" xml:space="preserve">
          <source>PerlIO overrides the default Cygwin Text/Binary behaviour. A file will always be treated as binary, regardless of the mode of the mount it lives on, just like it is in UNIX. So CR/LF translation needs to be requested in either the &lt;code&gt;open()&lt;/code&gt; call like this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d4261eaed3053779b6ac602dc0094ca271817116" translate="yes" xml:space="preserve">
          <source>PerlIO.pm</source>
          <target state="translated">PerlIO.pm</target>
        </trans-unit>
        <trans-unit id="1154ad98b215ecf5df7b1e7ad79cee31862d0eaf" translate="yes" xml:space="preserve">
          <source>PerlIO::encoding</source>
          <target state="translated">PerlIO::encoding</target>
        </trans-unit>
        <trans-unit id="0bd3d0c97f8a1994a38840e4b2078cd8c7618564" translate="yes" xml:space="preserve">
          <source>PerlIO::encoding - encoding layer</source>
          <target state="translated">PerlIO::кодирование-слой кодирования</target>
        </trans-unit>
        <trans-unit id="1ed740d1e5082e67b34e9a633e9e92164f2f7b46" translate="yes" xml:space="preserve">
          <source>PerlIO::encoding, PerlIO::scalar, PerlIO::via in the Perl core.</source>
          <target state="translated">PerlIO::encoding,PerlIO::scalar,PerlIO::via в ядре Perl.</target>
        </trans-unit>
        <trans-unit id="c62625c5db5d75cf0d983910b623b95f9bd27b6e" translate="yes" xml:space="preserve">
          <source>PerlIO::gzip and APR::PerlIO (mod_perl 2.0) on CPAN.</source>
          <target state="translated">PerlIO::gzip и APR::PerlIO (mod_perl 2.0)на CPAN.</target>
        </trans-unit>
        <trans-unit id="304331cfad71f1b33cdb168da072d68db60896f0" translate="yes" xml:space="preserve">
          <source>PerlIO::mmap</source>
          <target state="translated">PerlIO::mmap</target>
        </trans-unit>
        <trans-unit id="a72b9d3b9fb038f07c1da369e861e7afab553215" translate="yes" xml:space="preserve">
          <source>PerlIO::mmap - Memory mapped IO</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b76466d411ce33a97489bbc61bc858849f23c2d6" translate="yes" xml:space="preserve">
          <source>PerlIO::scalar</source>
          <target state="translated">PerlIO::scalar</target>
        </trans-unit>
        <trans-unit id="68b32bd3bc2551440298bb2d6347e307a14d02ff" translate="yes" xml:space="preserve">
          <source>PerlIO::scalar - in-memory IO, scalar IO</source>
          <target state="translated">Перлио::скаляр-в памяти,скаляр IO.</target>
        </trans-unit>
        <trans-unit id="6f4147b27883b678d3b28400a2747841090cc49c" translate="yes" xml:space="preserve">
          <source>PerlIO::via</source>
          <target state="translated">PerlIO::via</target>
        </trans-unit>
        <trans-unit id="d69e5b0660da6ada8428bd96b3dfa15197a8ec90" translate="yes" xml:space="preserve">
          <source>PerlIO::via - Helper class for PerlIO layers implemented in perl</source>
          <target state="translated">PerlIO::via-класс Helper для слоев PerlIO,реализованный в perl</target>
        </trans-unit>
        <trans-unit id="c1ddecb6a7a6597042738bddffe28139074d4d7b" translate="yes" xml:space="preserve">
          <source>PerlIO::via::QuotedPrint</source>
          <target state="translated">PerlIO::via::QuotedPrint</target>
        </trans-unit>
        <trans-unit id="82ccb99b92622bcc0fc58d955a6b7496cc1351ac" translate="yes" xml:space="preserve">
          <source>PerlIO::via::QuotedPrint - PerlIO layer for quoted-printable strings</source>
          <target state="translated">PerlIO::via::QuotedPrint-слой PerlIO для строк,выводимых на печать в кавычках.</target>
        </trans-unit>
        <trans-unit id="60e19b81fad8ebbf88c9ee26060f85ab35b8d0b9" translate="yes" xml:space="preserve">
          <source>PerlIO::via::QuotedPrint in the Perl core and PerlIO::via::* on CPAN.</source>
          <target state="translated">PerlIO::via::QuotedPrint в ядре Perl и PerlIO::via::*на CPAN.</target>
        </trans-unit>
        <trans-unit id="031a53d77ac71ec3ef46da5f59553f918d566426" translate="yes" xml:space="preserve">
          <source>PerlIOBase(PerlIO *f) returns the &quot;Base&quot; pointer, or in other words, the &lt;code&gt;PerlIOl*&lt;/code&gt; pointer.</source>
          <target state="translated">PerlIOBase (PerlIO * f) возвращает указатель &amp;laquo;Base&amp;raquo;, или, другими словами, указатель &lt;code&gt;PerlIOl*&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="b34114bdf01a0e654170651a1a2e3dc55613845c" translate="yes" xml:space="preserve">
          <source>PerlIOSelf(PerlIO* f, type) return the PerlIOBase cast to a type.</source>
          <target state="translated">PerlIOSelf(PerlIO*f,type)возвращает приведение PerlIOBase к типу.</target>
        </trans-unit>
        <trans-unit id="d57d00fa34f5c798b1a3aa08845fb7d0cb59fd01" translate="yes" xml:space="preserve">
          <source>PerlIO_apply_layers(f,mode,layers)</source>
          <target state="translated">PerlIO_apply_layers(f,mode,layers)</target>
        </trans-unit>
        <trans-unit id="571d6043e2ec872d7cb6f9099f8b8245ff464e37" translate="yes" xml:space="preserve">
          <source>PerlIO_binmode(f,ptype,imode,layers)</source>
          <target state="translated">PerlIO_binmode(f,ptype,imode,layers)</target>
        </trans-unit>
        <trans-unit id="3d8d78d3151e28ab17b88db0695455690dcd0493" translate="yes" xml:space="preserve">
          <source>PerlIO_close</source>
          <target state="translated">PerlIO_close</target>
        </trans-unit>
        <trans-unit id="3be650734ae821da60ceb0f946fbc1e419f8206f" translate="yes" xml:space="preserve">
          <source>PerlIO_context_layers</source>
          <target state="translated">PerlIO_context_layers</target>
        </trans-unit>
        <trans-unit id="0255e27b57dfc3265eea6731c6b0c7839e9ab42d" translate="yes" xml:space="preserve">
          <source>PerlIO_debug is a printf()-like function which can be used for debugging. No return value. Its main use is inside PerlIO where using real printf, warn() etc. would recursively call PerlIO and be a problem.</source>
          <target state="translated">PerlIO_debug-это функция printf()-like,которая может быть использована для отладки.Возвращаемого значения нет.Ее основное использование находится внутри PerlIO,где использование реальных printf,warning()и т.д.будет рекурсивным вызовом PerlIO и будет проблемой.</target>
        </trans-unit>
        <trans-unit id="89d032ee35b94a317d1e11679408a01d0f02011d" translate="yes" xml:space="preserve">
          <source>PerlIO_debug writes to the file named by $ENV{'PERLIO_DEBUG'} or defaults to stderr if the environment variable is not defined. Typical use might be</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8a0fff3fc1334ecf07d826a061819bfc08e3aaea" translate="yes" xml:space="preserve">
          <source>PerlIO_debug writes to the file named by $ENV{'PERLIO_DEBUG'} typical use might be</source>
          <target state="translated">PerlIO_debug записывает в файл с именем $ENV{'PERLIO_DEBUG'}типичное использование может быть следующим</target>
        </trans-unit>
        <trans-unit id="7a73888154ab95ec9d3189d67cc64d8a26900457" translate="yes" xml:space="preserve">
          <source>PerlIO_debug(fmt,...)</source>
          <target state="translated">PerlIO_debug(fmt,...)</target>
        </trans-unit>
        <trans-unit id="100b7f7c057785e0afeda1c6eecdad5e89f91daa" translate="yes" xml:space="preserve">
          <source>PerlIO_error</source>
          <target state="translated">PerlIO_error</target>
        </trans-unit>
        <trans-unit id="9e246fb113c359325db7b695c42623371987cfe5" translate="yes" xml:space="preserve">
          <source>PerlIO_fill</source>
          <target state="translated">PerlIO_fill</target>
        </trans-unit>
        <trans-unit id="13b27853883b92af97538fe15f7fe52484d7c534" translate="yes" xml:space="preserve">
          <source>PerlIO_flush</source>
          <target state="translated">PerlIO_flush</target>
        </trans-unit>
        <trans-unit id="efbc7a55cb5fc7dbd487f7b3df5582d0c9c5b4ab" translate="yes" xml:space="preserve">
          <source>PerlIO_get_bufsiz</source>
          <target state="translated">PerlIO_get_bufsiz</target>
        </trans-unit>
        <trans-unit id="c10b5fb9db4780628505f2900df4a076d31c1d81" translate="yes" xml:space="preserve">
          <source>PerlIO_get_ptr</source>
          <target state="translated">PerlIO_get_ptr</target>
        </trans-unit>
        <trans-unit id="7178d99df96dc1b4506cce98992701276d9c239e" translate="yes" xml:space="preserve">
          <source>PerlIO_read</source>
          <target state="translated">PerlIO_read</target>
        </trans-unit>
        <trans-unit id="c9db204115f2772dfe73d45d977a7ab26c3db174" translate="yes" xml:space="preserve">
          <source>PerlIO_restore_errno</source>
          <target state="translated">PerlIO_restore_errno</target>
        </trans-unit>
        <trans-unit id="4ea99c1a1f0e14060bbf9890b956ec2732fc7963" translate="yes" xml:space="preserve">
          <source>PerlIO_save_errno</source>
          <target state="translated">PerlIO_save_errno</target>
        </trans-unit>
        <trans-unit id="3448e5bfc541fa5c1c6f7d0c567036327a6d1b1d" translate="yes" xml:space="preserve">
          <source>PerlIO_seek</source>
          <target state="translated">PerlIO_seek</target>
        </trans-unit>
        <trans-unit id="c3494517fbb2fd9ae4140e2f05e92ed232d54343" translate="yes" xml:space="preserve">
          <source>PerlIO_set_cnt</source>
          <target state="translated">PerlIO_set_cnt</target>
        </trans-unit>
        <trans-unit id="28b9d60a7d7cdedf7f8eab9fbfb1586a5e74e162" translate="yes" xml:space="preserve">
          <source>PerlIO_setlinebuf</source>
          <target state="translated">PerlIO_setlinebuf</target>
        </trans-unit>
        <trans-unit id="d03e37a9fec4395065d7268bae0c026fec23c250" translate="yes" xml:space="preserve">
          <source>PerlIO_stdout</source>
          <target state="translated">PerlIO_stdout</target>
        </trans-unit>
        <trans-unit id="d0cbd7701c5904432f5b089a12f15c43e18b06f2" translate="yes" xml:space="preserve">
          <source>PerlIO_unread</source>
          <target state="translated">PerlIO_unread</target>
        </trans-unit>
        <trans-unit id="3557c0fab3f26cfdec99b940ea71520d75ea2ee0" translate="yes" xml:space="preserve">
          <source>PerlInterpreter</source>
          <target state="translated">PerlInterpreter</target>
        </trans-unit>
        <trans-unit id="38a6b25b1659011ae61cace35aeff9baee4a13cd" translate="yes" xml:space="preserve">
          <source>PerlLIO_dup2_cloexec</source>
          <target state="translated">PerlLIO_dup2_cloexec</target>
        </trans-unit>
        <trans-unit id="f6ea8eebfba4a8ab959f7002d307625e66933740" translate="yes" xml:space="preserve">
          <source>PerlLIO_dup_cloexec</source>
          <target state="translated">PerlLIO_dup_cloexec</target>
        </trans-unit>
        <trans-unit id="73de2727af3d3234d0781998f683251a2002d497" translate="yes" xml:space="preserve">
          <source>PerlLIO_open3_cloexec</source>
          <target state="translated">PerlLIO_open3_cloexec</target>
        </trans-unit>
        <trans-unit id="f2fae1f35dbb5d09391fca46f2a80c2f8e50cc8b" translate="yes" xml:space="preserve">
          <source>PerlLIO_open_cloexec</source>
          <target state="translated">PerlLIO_open_cloexec</target>
        </trans-unit>
        <trans-unit id="6feba0dc339a322bf408c0ef0a0d56e7e1816aa9" translate="yes" xml:space="preserve">
          <source>PerlMonks is one of the largest Perl forums, and describes itself as &quot;A place for individuals to polish, improve, and showcase their Perl skills.&quot; and &quot;A community which allows everyone to grow and learn from each other.&quot;</source>
          <target state="translated">PerlMonks является одним из крупнейших Perl-форумов и описывает себя как &quot;место,где люди могут отшлифовать,улучшить и продемонстрировать свои навыки работы на Perl&quot; и &quot;сообщество,которое позволяет каждому расти и учиться друг у друга&quot;.</target>
        </trans-unit>
        <trans-unit id="96118a64fd38dbd81e3cb0e3744963bd1d54ba7a" translate="yes" xml:space="preserve">
          <source>PerlPower()</source>
          <target state="translated">PerlPower()</target>
        </trans-unit>
        <trans-unit id="f128e221d24537d88adf37c1080c58489584bc08" translate="yes" xml:space="preserve">
          <source>PerlProc_pipe_cloexec</source>
          <target state="translated">PerlProc_pipe_cloexec</target>
        </trans-unit>
        <trans-unit id="db63ab2940f098200e4ac58afc78b248f4d2fcb2" translate="yes" xml:space="preserve">
          <source>PerlShr.Exe</source>
          <target state="translated">PerlShr.Exe</target>
        </trans-unit>
        <trans-unit id="75aee309a8d63b5243b0d02f20422961a0ea87e9" translate="yes" xml:space="preserve">
          <source>PerlSock_accept_cloexec</source>
          <target state="translated">PerlSock_accept_cloexec</target>
        </trans-unit>
        <trans-unit id="24add7e2c5d5abdc4daafea395e2344696ac59c8" translate="yes" xml:space="preserve">
          <source>PerlSock_socket_cloexec</source>
          <target state="translated">PerlSock_socket_cloexec</target>
        </trans-unit>
        <trans-unit id="223a980cfc2b88529bd63e96b16d41c5cc62261a" translate="yes" xml:space="preserve">
          <source>PerlSock_socketpair_cloexec</source>
          <target state="translated">PerlSock_socketpair_cloexec</target>
        </trans-unit>
        <trans-unit id="097886f8ad6be4d2da4b42cedab0b39cdf7f9b1c" translate="yes" xml:space="preserve">
          <source>Perl_ VIO executable (statically linked)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="07121cdb0e428e6add9cbaefd2f84414e43aa38b" translate="yes" xml:space="preserve">
          <source>Perl_PerlIO_or_Base(PerlIO* f, callback, base, failure, args) either calls the</source>
          <target state="translated">Perl_PerlIO_or_Base(PerlIO*f,обратный вызов,база,сбой,аргументы)либо вызовет</target>
        </trans-unit>
        <trans-unit id="2f0f41f617e9b822c0919fb0f159f1a51c8bb029" translate="yes" xml:space="preserve">
          <source>Perl_PerlIO_or_Base_void(PerlIO* f, callback, base, args) either calls the</source>
          <target state="translated">Perl_PerlIO_or_Base_void(PerlIO*f,обратный вызов,база,аргументы)либо вызывает</target>
        </trans-unit>
        <trans-unit id="81a3f26af0ca1bd5eb03eba445b883c96fd6bebb" translate="yes" xml:space="preserve">
          <source>Perl_PerlIO_or_fail(PerlIO* f, callback, failure, args) either calls the</source>
          <target state="translated">Perl_PerlIO_or_fail(PerlIO*f,обратный вызов,сбой,аргументы)либо вызовет</target>
        </trans-unit>
        <trans-unit id="e4851451f4653d2e45acca412261ea7befab27cf" translate="yes" xml:space="preserve">
          <source>Perl_PerlIO_or_fail_void(PerlIO* f, callback, args) either calls the</source>
          <target state="translated">Perl_PerlIO_or_fail_void(PerlIO*f,обратный вызов,аргументы)либо вызывает</target>
        </trans-unit>
        <trans-unit id="2ed83c745e785ffa5b094c3edf1bccccffccea32" translate="yes" xml:space="preserve">
          <source>Perl_custom_op_xop</source>
          <target state="translated">Perl_custom_op_xop</target>
        </trans-unit>
        <trans-unit id="2bd7ba33bc197c1cac645c3fa7496edd8205233d" translate="yes" xml:space="preserve">
          <source>Perl_isinfnan() is utility function that returns true if the NV argument is either an infinity or a NaN, false otherwise. To test in more detail, use Perl_isinf() and Perl_isnan().</source>
          <target state="translated">Perl_isinfnan()-это утилита,которая возвращает true,если аргумент NV является либо бесконечным,либо NaN,false иначе.Для более детальной проверки используйте Perl_isinf()и Perl_isnan().</target>
        </trans-unit>
        <trans-unit id="9632627677c9064aca08da1e222aaa10c0c1893b" translate="yes" xml:space="preserve">
          <source>Perl_langinfo</source>
          <target state="translated">Perl_langinfo</target>
        </trans-unit>
        <trans-unit id="9ddad3a0f4e11c02b4e6bd2fa655acf548001837" translate="yes" xml:space="preserve">
          <source>Perl_my_%s() not available</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b3f50fc46743d6c022f3455d5dab2d3097bb717c" translate="yes" xml:space="preserve">
          <source>Perl_setlocale</source>
          <target state="translated">Perl_setlocale</target>
        </trans-unit>
        <trans-unit id="d5a2a12addea9810bccfcba9c388e5aa60aaf3d9" translate="yes" xml:space="preserve">
          <source>Perl_signbit</source>
          <target state="translated">Perl_signbit</target>
        </trans-unit>
        <trans-unit id="c68adda4177619ceaf594bde89a717be1213ecd6" translate="yes" xml:space="preserve">
          <source>Perls since %s too modern--this is %s, stopped</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="435a6fd71f06655224907356e4d56d72c377a1bd" translate="yes" xml:space="preserve">
          <source>Perls starting in 5.8 have a different Unicode model from 5.6. In 5.6 the programmer was required to use the &lt;code&gt;utf8&lt;/code&gt; pragma to declare that a given scope expected to deal with Unicode data and had to make sure that only Unicode data were reaching that scope. If you have code that is working with 5.6, you will need some of the following adjustments to your code. The examples are written such that the code will continue to work under 5.6, so you should be safe to try them out.</source>
          <target state="translated">Perls, начиная с версии 5.8, имеют другую модель Unicode от версии 5.6. В версии 5.6 от программиста требовалось использовать прагму &lt;code&gt;utf8&lt;/code&gt; , чтобы объявить, что заданная область должна иметь дело с данными Unicode, и должен был убедиться, что только данные Unicode достигают этой области. Если у вас есть код, работающий с 5.6, вам потребуются некоторые из следующих корректировок в код. Примеры написаны таким образом, что код будет продолжать работать в версии 5.6, поэтому вы можете смело их опробовать.</target>
        </trans-unit>
        <trans-unit id="b95bc9c4bdba73fd23a6e99cb0cb35ee28a07aa3" translate="yes" xml:space="preserve">
          <source>Permanently attach to the shared memory segment. When a &lt;code&gt;IPC::SharedMem&lt;/code&gt; object is attached, it will use &lt;a href=&quot;http://search.cpan.org/perldoc/memread&quot;&gt;memread&lt;/a&gt; and &lt;a href=&quot;http://search.cpan.org/perldoc/memwrite&quot;&gt;memwrite&lt;/a&gt; instead of &lt;a href=&quot;../functions/shmread&quot;&gt;shmread&lt;/a&gt; and &lt;a href=&quot;../functions/shmwrite&quot;&gt;shmwrite&lt;/a&gt; for accessing the shared memory segment. Returns true if successful, or false on error. See &lt;a href=&quot;http://search.cpan.org/perldoc/shmat&quot;&gt;shmat&lt;/a&gt;.</source>
          <target state="translated">Постоянно подключаться к сегменту общей памяти. Когда объект &lt;code&gt;IPC::SharedMem&lt;/code&gt; присоединен, он будет использовать &lt;a href=&quot;http://search.cpan.org/perldoc/memread&quot;&gt;memread&lt;/a&gt; и &lt;a href=&quot;http://search.cpan.org/perldoc/memwrite&quot;&gt;memwrite&lt;/a&gt; вместо &lt;a href=&quot;../functions/shmread&quot;&gt;shmread&lt;/a&gt; и &lt;a href=&quot;../functions/shmwrite&quot;&gt;shmwrite&lt;/a&gt; для доступа к сегменту разделяемой памяти. Возвращает true в случае успеха или false в случае ошибки. См. &lt;a href=&quot;http://search.cpan.org/perldoc/shmat&quot;&gt;Шмат&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="c26d4aa620dca99b812bc4a79254d9e74d407fd7" translate="yes" xml:space="preserve">
          <source>Permanently attach to the shared memory segment. When a &lt;code&gt;IPC::SharedMem&lt;/code&gt; object is attached, it will use &lt;a href=&quot;memread&quot;&gt;memread&lt;/a&gt; and &lt;a href=&quot;memwrite&quot;&gt;memwrite&lt;/a&gt; instead of &lt;a href=&quot;shmread&quot;&gt;shmread&lt;/a&gt; and &lt;a href=&quot;shmwrite&quot;&gt;shmwrite&lt;/a&gt; for accessing the shared memory segment. Returns true if successful, or false on error. See &lt;a href=&quot;http://man.he.net/man2/shmat&quot;&gt;shmat(2)&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="17c52fa4da091dd586a97843497807bc0e23a069" translate="yes" xml:space="preserve">
          <source>Permanently fixing locale problems</source>
          <target state="translated">постоянное устранение локальных проблем</target>
        </trans-unit>
        <trans-unit id="2cf2947e5f569b9ea7e16800990428360247021e" translate="yes" xml:space="preserve">
          <source>Permanently fixing your system's locale configuration</source>
          <target state="translated">Постоянное исправление конфигурации локали вашей системы</target>
        </trans-unit>
        <trans-unit id="9ab7f14d670c62039e207778bc0fed042486426a" translate="yes" xml:space="preserve">
          <source>Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the &quot;Software&quot;), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:</source>
          <target state="translated">Настоящим предоставляется безвозмездное разрешение любому лицу,получающему копию данного Программного обеспечения и связанных с ним файлов документации (&quot;Программное обеспечение&quot;),осуществлять торговлю Программным обеспечением без ограничений,включая без ограничений права на использование,копирование,изменение,объединение,публикацию,распространение,сублицензирование и/или продажу копий Программного обеспечения,а также разрешать лицам,которым предоставляется Программное обеспечение,осуществлять такую торговлю при соблюдении следующих условий:</target>
        </trans-unit>
        <trans-unit id="78d9cc4b4fc45291ef4d268d18882d87b86fac76" translate="yes" xml:space="preserve">
          <source>Permit</source>
          <target state="translated">Permit</target>
        </trans-unit>
        <trans-unit id="0f8250826e3e169df1c1ab3f1a4991fb276b498f" translate="yes" xml:space="preserve">
          <source>Permit the listed operators to be used when compiling code in the compartment (in</source>
          <target state="translated">Разрешите перечисленные операторы использовать при компиляции кода в помещении (в</target>
        </trans-unit>
        <trans-unit id="d4efe59e4dc596d83fe507198172c79c563d3297" translate="yes" xml:space="preserve">
          <source>Pern</source>
          <target state="translated">Pern</target>
        </trans-unit>
        <trans-unit id="b7871f509f5f98e4d602975abaec93401e8fa9c5" translate="yes" xml:space="preserve">
          <source>Persistence for Perl data structures</source>
          <target state="translated">Настойчивость для структур данных Perl</target>
        </trans-unit>
        <trans-unit id="f887bea11bbedab00d763b35a7c513eee8986177" translate="yes" xml:space="preserve">
          <source>Persistent Private Variables</source>
          <target state="translated">Сохраняющиеся частные переменные</target>
        </trans-unit>
        <trans-unit id="37fcb2b67d89818ceecfdb67f2459b636da00b36" translate="yes" xml:space="preserve">
          <source>Persistent variables via state()</source>
          <target state="translated">Постоянные переменные через функцию state()</target>
        </trans-unit>
        <trans-unit id="2e14d0f6039c4bed4f250852e11a5960cec217cc" translate="yes" xml:space="preserve">
          <source>Persistent variables with closures</source>
          <target state="translated">Постоянные переменные с замыканием</target>
        </trans-unit>
        <trans-unit id="297062bf4f638f4e5a1559e426d9dca1019c35bc" translate="yes" xml:space="preserve">
          <source>Peter J. Farley III</source>
          <target state="translated">Питер Дж.Фарли III</target>
        </trans-unit>
        <trans-unit id="2443526b197b82e6711ce47499d4a744b2d3caac" translate="yes" xml:space="preserve">
          <source>Peter John Acklam</source>
          <target state="translated">Питер Джон Аклам</target>
        </trans-unit>
        <trans-unit id="9619c2ff06f7bbbafb0d5e9160ae26df77e91db0" translate="yes" xml:space="preserve">
          <source>Peter John Acklam &amp;lt;pjacklam@gmail.com&amp;lt;gt&amp;gt;, 2014-.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0e9567258b003fa101683db10492bc177b3b183a" translate="yes" xml:space="preserve">
          <source>Peter John Acklam &amp;lt;pjacklam@online.no&amp;gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="587cf83d47912d48cff152ba5703ff6e1be6461d" translate="yes" xml:space="preserve">
          <source>Peter John Acklam &amp;lt;pjacklam@online.no&amp;gt;, 2011-.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9ad3ffe64617bfe15d4f21e7a60a9ca00647098f" translate="yes" xml:space="preserve">
          <source>Peter John Acklam, &amp;lt;pjacklam@online.no&amp;gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a32278777d03ff2e6b6ad59e9b3657ba9315fcef" translate="yes" xml:space="preserve">
          <source>Peter Prymmer</source>
          <target state="translated">Питер Прюммер</target>
        </trans-unit>
        <trans-unit id="c3032976541bf9515b50f93b039ec87133fcbe77" translate="yes" xml:space="preserve">
          <source>Peter Prymmer pvhp@best.com wrote this in 1999 and 2000 with CCSID 0819 and 0037 help from Chris Leach and Andr&amp;eacute; Pirard A.Pirard@ulg.ac.be as well as POSIX-BC help from Thomas Dorner Thomas.Dorner@start.de. Thanks also to Vickie Cooper, Philip Newton, William Raffloer, and Joe Smith. Trademarks, registered trademarks, service marks and registered service marks used in this document are the property of their respective owners.</source>
          <target state="translated">Питер Приммер pvhp@best.com написал это в 1999 и 2000 годах при помощи CCSID 0819 и 0037 от Криса Лича и Андре Пирарда A.Pirard@ulg.ac.be, а также при помощи POSIX-BC от Томаса Дорнера Thomas.Dorner@start. де. Спасибо также Вики Купер, Филиппу Ньютону, Уильяму Раффлору и Джо Смиту. Товарные знаки, зарегистрированные товарные знаки, знаки обслуживания и зарегистрированные знаки обслуживания, используемые в этом документе, являются собственностью соответствующих владельцев.</target>
        </trans-unit>
        <trans-unit id="b678d41f58da447298d919f29043393443d0cb8b" translate="yes" xml:space="preserve">
          <source>Peter Rabbitson</source>
          <target state="translated">Питер Кроликинсон</target>
        </trans-unit>
        <trans-unit id="898a609b1123bee03d0fba96ca647e344dd3c879" translate="yes" xml:space="preserve">
          <source>Peter Rabbitson &amp;lt;ribasushi@cpan.org&amp;gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9a6caa883001f8951928abc18a49fa0996873b1e" translate="yes" xml:space="preserve">
          <source>Peter Scott &amp;lt;Peter@PSDT.com&amp;gt;</source>
          <target state="translated">Питер Скотт &amp;lt;Peter@PSDT.com&amp;gt;</target>
        </trans-unit>
        <trans-unit id="6bf5b1ffed5896f2003c72c19a4b2211605af373" translate="yes" xml:space="preserve">
          <source>Petr P&amp;iacute;sař &amp;lt;ppisar@redhat.com&amp;gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9bab0d91a1e342ed2899a60bb0fd7fbb5d908345" translate="yes" xml:space="preserve">
          <source>Phase-specific attribute handlers</source>
          <target state="translated">обработчики фазовых атрибутов</target>
        </trans-unit>
        <trans-unit id="1299c5da4d36f7c6543acebafdc41ccf1b565939" translate="yes" xml:space="preserve">
          <source>Phases</source>
          <target state="translated">Phases</target>
        </trans-unit>
        <trans-unit id="11224e45779f711f0ecc038e4dc550b38b44febf" translate="yes" xml:space="preserve">
          <source>Philippe Bruhat &amp;lt;book@cpan.org&amp;gt;</source>
          <target state="translated">Филипп Брюа &amp;lt;book@cpan.org&amp;gt;</target>
        </trans-unit>
        <trans-unit id="8067364d44f5e37baba7e13ba124e934df410e2a" translate="yes" xml:space="preserve">
          <source>Philippines</source>
          <target state="translated">Philippines</target>
        </trans-unit>
        <trans-unit id="b7b6129ef396633c6d7fbf8b5ba6a676cf84b685" translate="yes" xml:space="preserve">
          <source>Philosophy and History</source>
          <target state="translated">Философия и история</target>
        </trans-unit>
        <trans-unit id="a7ca65a16231d5ab21bb882a874c4184071b79df" translate="yes" xml:space="preserve">
          <source>Pick one style or another of &quot;TODO&quot; to be on the safe side.</source>
          <target state="translated">Выберите тот или иной стиль &quot;TODO&quot;,чтобы быть в безопасности.</target>
        </trans-unit>
        <trans-unit id="d9e68904cd8d62a6bd9853c94a5ff5af64e98135" translate="yes" xml:space="preserve">
          <source>Picture lines contain output field definitions, intermingled with literal text. These lines do not undergo any kind of variable interpolation. Field definitions are made up from a set of characters, for starting and extending a field to its desired width. This is the complete set of characters for field definitions:</source>
          <target state="translated">Строки рисунка содержат определения поля вывода,переплетённые с буквальным текстом.Эти строки не подвергаются никакой интерполяции переменных.Описания полей составляются из набора символов для начала и расширения поля до нужной ширины.Это полный набор символов для определений полей:</target>
        </trans-unit>
        <trans-unit id="2ce99d2159f85cc771804ecbd9dda841764e190d" translate="yes" xml:space="preserve">
          <source>Pictures help... Here's the &lt;code&gt;%hash&lt;/code&gt; table:</source>
          <target state="translated">Картинки помогают ... Вот &lt;code&gt;%hash&lt;/code&gt; таблица % :</target>
        </trans-unit>
        <trans-unit id="c65c8c71a5372d959508dd740dbc1277950d7e03" translate="yes" xml:space="preserve">
          <source>Pictures of the characters in</source>
          <target state="translated">Изображения персонажей в</target>
        </trans-unit>
        <trans-unit id="576c308de400973ac0e3b490eedf5eb2dfd16554" translate="yes" xml:space="preserve">
          <source>Ping the configured mirrors and print a report</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f0a9c866fde7f49d0c8287047fc7266c3fcf3448" translate="yes" xml:space="preserve">
          <source>Ping the remote host and wait for a response. $host can be either the hostname or the IP number of the remote host. The optional timeout must be greater than 0 seconds and defaults to whatever was specified when the ping object was created. Returns a success flag. If the hostname cannot be found or there is a problem with the IP number, the success flag returned will be undef. Otherwise, the success flag will be 1 if the host is reachable and 0 if it is not. For most practical purposes, undef and 0 and can be treated as the same case. In array context, the elapsed time as well as the string form of the ip the host resolved to are also returned. The elapsed time value will be a float, as returned by the Time::HiRes::time() function, if hires() has been previously called, otherwise it is returned as an integer.</source>
          <target state="translated">Пинг удаленного хоста и ждать ответа.$host может быть как именем хоста,так и IP-номером удаленного хоста.Необязательный таймаут должен быть больше 0 секунд и по умолчанию равен тому,что было указано при создании объекта ping.Возвращает флаг успеха.Если имя хоста не может быть найдено или есть проблема с IP номером,возвращаемый флаг успеха будет отменен.В противном случае,флаг успеха будет равен 1,если хост доступен,и 0,если нет.Для большинства практических целей,undef и 0 и может рассматриваться как один и тот же случай.В контексте массива также возвращается прошедшее время,а также строковая форма ip,к которой хост разрешен.Истекшее значение времени будет представлять собой плавающий диск,возвращаемый функцией Time::HiRes::time(),если ранее была вызвана функция hires(),в противном случае оно возвращается как целое число.</target>
        </trans-unit>
        <trans-unit id="07ec367a9d37985bd6dc081364fe2955df9103f5" translate="yes" xml:space="preserve">
          <source>Piotr Roszatycki &amp;lt;piotr.roszatycki@gmail.com&amp;gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bbc0c839f8f40b7cdba9f85501b6142c7594b73f" translate="yes" xml:space="preserve">
          <source>Pipe-open (see &lt;a href=&quot;functions/open&quot;&gt;open&lt;/a&gt;) with the command which contains redirection or shell meta-characters;</source>
          <target state="translated">Открытие трубы (см. &lt;a href=&quot;functions/open&quot;&gt;Open&lt;/a&gt; ) с помощью команды, содержащей метасимволы перенаправления или оболочки;</target>
        </trans-unit>
        <trans-unit id="5e4c7a898c7f3c0a7c60e0a1f604f62469eeccef" translate="yes" xml:space="preserve">
          <source>Pipe-open (see &lt;a href=&quot;perlfunc#open&quot;&gt;&quot;open&quot; in perlfunc&lt;/a&gt;) with the command which contains redirection or shell meta-characters;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="32b1d5a78493496dd5152fd2d504f7e21009e3f2" translate="yes" xml:space="preserve">
          <source>Pipeline</source>
          <target state="translated">Pipeline</target>
        </trans-unit>
        <trans-unit id="785af2a4ad3c4ee912623c6e0b6d4299ea305bf6" translate="yes" xml:space="preserve">
          <source>Pipes</source>
          <target state="translated">Pipes</target>
        </trans-unit>
        <trans-unit id="86638d4dd1bfeebd306bf371ebd586c8fe132936" translate="yes" xml:space="preserve">
          <source>Place &lt;code&gt;&amp;amp;PL_sv_no&lt;/code&gt; into the specified position &lt;code&gt;&lt;a href=&quot;functions/pos&quot;&gt;pos&lt;/a&gt;&lt;/code&gt; on the stack.</source>
          <target state="translated">Поместите &lt;code&gt;&amp;amp;PL_sv_no&lt;/code&gt; в указанную позицию &lt;code&gt;&lt;a href=&quot;functions/pos&quot;&gt;pos&lt;/a&gt;&lt;/code&gt; в стеке.</target>
        </trans-unit>
        <trans-unit id="667a33361c3428c4b6aa60ad95cf789c3ab5ca45" translate="yes" xml:space="preserve">
          <source>Place &lt;code&gt;&amp;amp;PL_sv_no&lt;/code&gt; into the specified position &lt;code&gt;pos&lt;/code&gt; on the stack.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dfd0139035f77f7f1b17632082240cf0b36e9af1" translate="yes" xml:space="preserve">
          <source>Place &lt;code&gt;&amp;amp;PL_sv_undef&lt;/code&gt; into the specified position &lt;code&gt;&lt;a href=&quot;functions/pos&quot;&gt;pos&lt;/a&gt;&lt;/code&gt; on the stack.</source>
          <target state="translated">Поместите &lt;code&gt;&amp;amp;PL_sv_undef&lt;/code&gt; в указанную позицию &lt;code&gt;&lt;a href=&quot;functions/pos&quot;&gt;pos&lt;/a&gt;&lt;/code&gt; в стеке.</target>
        </trans-unit>
        <trans-unit id="1bb0eaf6fb6e81489445c95594e8a4006384093d" translate="yes" xml:space="preserve">
          <source>Place &lt;code&gt;&amp;amp;PL_sv_undef&lt;/code&gt; into the specified position &lt;code&gt;pos&lt;/code&gt; on the stack.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="916f413ffd5622b866aac763ff8940f66e4a31b9" translate="yes" xml:space="preserve">
          <source>Place &lt;code&gt;&amp;amp;PL_sv_yes&lt;/code&gt; into the specified position &lt;code&gt;&lt;a href=&quot;functions/pos&quot;&gt;pos&lt;/a&gt;&lt;/code&gt; on the stack.</source>
          <target state="translated">Поместите &lt;code&gt;&amp;amp;PL_sv_yes&lt;/code&gt; в указанную позицию &lt;code&gt;&lt;a href=&quot;functions/pos&quot;&gt;pos&lt;/a&gt;&lt;/code&gt; в стеке.</target>
        </trans-unit>
        <trans-unit id="9e6b770ad9c900ebf8f52e20c4972e42b76ef551" translate="yes" xml:space="preserve">
          <source>Place &lt;code&gt;&amp;amp;PL_sv_yes&lt;/code&gt; into the specified position &lt;code&gt;pos&lt;/code&gt; on the stack.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9b6d516f55eff9b2bccabbdde7685a4b4a9da03f" translate="yes" xml:space="preserve">
          <source>Place a copy of a string into the specified position &lt;code&gt;&lt;a href=&quot;functions/pos&quot;&gt;pos&lt;/a&gt;&lt;/code&gt; on the stack. The value is stored in a new mortal SV.</source>
          <target state="translated">Поместите копию строки в указанную позицию &lt;code&gt;&lt;a href=&quot;functions/pos&quot;&gt;pos&lt;/a&gt;&lt;/code&gt; в стеке. Значение сохраняется в новом смертном SV.</target>
        </trans-unit>
        <trans-unit id="0280f1983669ea3d48307e5d81450dc6030237bb" translate="yes" xml:space="preserve">
          <source>Place a copy of a string into the specified position &lt;code&gt;pos&lt;/code&gt; on the stack. The value is stored in a new mortal SV.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4e9ab6d8d695d32843b4420d43d220a9cd88325d" translate="yes" xml:space="preserve">
          <source>Place a double into the specified position &lt;code&gt;&lt;a href=&quot;functions/pos&quot;&gt;pos&lt;/a&gt;&lt;/code&gt; on the stack. The value is stored in a new mortal SV.</source>
          <target state="translated">Поместите двойной в указанном положении &lt;code&gt;&lt;a href=&quot;functions/pos&quot;&gt;pos&lt;/a&gt;&lt;/code&gt; в стеке. Значение сохраняется в новом смертном SV.</target>
        </trans-unit>
        <trans-unit id="acaa37c824afdb131865b7892e6a4b9ea9e6bb6f" translate="yes" xml:space="preserve">
          <source>Place a double into the specified position &lt;code&gt;pos&lt;/code&gt; on the stack. The value is stored in a new mortal SV.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cfd0007151ad5655c9cbf9340c82d4632eb28b7a" translate="yes" xml:space="preserve">
          <source>Place a message on the queue with the data from &lt;code&gt;MSG&lt;/code&gt; and with type &lt;code&gt;TYPE&lt;/code&gt; . See &lt;a href=&quot;../functions/msgsnd&quot;&gt;msgsnd&lt;/a&gt;.</source>
          <target state="translated">Поместите сообщение в очередь с данными из &lt;code&gt;MSG&lt;/code&gt; и с типом &lt;code&gt;TYPE&lt;/code&gt; . См. &lt;a href=&quot;../functions/msgsnd&quot;&gt;Msgsnd&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="0e44c92ac9de84e3be1e9794c9e8e47af2229079" translate="yes" xml:space="preserve">
          <source>Place a message on the queue with the data from &lt;code&gt;MSG&lt;/code&gt; and with type &lt;code&gt;TYPE&lt;/code&gt;. See &lt;a href=&quot;http://man.he.net/man2/msgsnd&quot;&gt;msgsnd(2)&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="25d30c30326aad079b79429ee5676ce31987795b" translate="yes" xml:space="preserve">
          <source>Place an integer into the specified position &lt;code&gt;&lt;a href=&quot;functions/pos&quot;&gt;pos&lt;/a&gt;&lt;/code&gt; on the stack. The value is stored in a new mortal SV.</source>
          <target state="translated">Поместите целое число в указанной позиции &lt;code&gt;&lt;a href=&quot;functions/pos&quot;&gt;pos&lt;/a&gt;&lt;/code&gt; в стеке. Значение сохраняется в новом смертном SV.</target>
        </trans-unit>
        <trans-unit id="710e9af5bbb2e9924ef8178acb3d4818fea16e1d" translate="yes" xml:space="preserve">
          <source>Place an integer into the specified position &lt;code&gt;pos&lt;/code&gt; on the stack. The value is stored in a new mortal SV.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="751296589ec0d0f52635e93df3addb6811063c1f" translate="yes" xml:space="preserve">
          <source>Place an unsigned integer into the specified position &lt;code&gt;pos&lt;/code&gt; on the stack. The value is stored in a new mortal SV.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7ab3cd1c8c731f94b45abaa6c37498e8157e7f50" translate="yes" xml:space="preserve">
          <source>Placeholder for a, w, t, T</source>
          <target state="translated">Держатель для,w,t,T.</target>
        </trans-unit>
        <trans-unit id="51c02f2095250dc21f9cbdf7822d894accd922c2" translate="yes" xml:space="preserve">
          <source>Plain &lt;code&gt;eval&lt;/code&gt; with no argument is just &lt;code&gt;eval EXPR&lt;/code&gt;, where the expression is understood to be contained in &lt;a href=&quot;perlvar#%24_&quot;&gt;&lt;code&gt;$_&lt;/code&gt;&lt;/a&gt;. Thus there are only two real &lt;code&gt;eval&lt;/code&gt; forms; the one with an EXPR is often called &quot;string eval&quot;. In a string eval, the value of the expression (which is itself determined within scalar context) is first parsed, and if there were no errors, executed as a block within the lexical context of the current Perl program. This form is typically used to delay parsing and subsequent execution of the text of EXPR until run time. Note that the value is parsed every time the &lt;code&gt;eval&lt;/code&gt; executes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="054293d76d1e13ea0985d27d43a20139eff0cdfe" translate="yes" xml:space="preserve">
          <source>Plain Old Comments (Not!)</source>
          <target state="translated">Простые старые комментарии (Нет!)</target>
        </trans-unit>
        <trans-unit id="9580fcbce0c31ceaa47eb583e5f7ce637fdc8a0a" translate="yes" xml:space="preserve">
          <source>Plain text</source>
          <target state="translated">простой текст</target>
        </trans-unit>
        <trans-unit id="ae2f98a099fe5855c31126233e9c13641ee7fdba" translate="yes" xml:space="preserve">
          <source>Plan</source>
          <target state="translated">Plan</target>
        </trans-unit>
        <trans-unit id="253c3601a5c1772632a58221b654c54c8e50d5ad" translate="yes" xml:space="preserve">
          <source>Plan 9,</source>
          <target state="translated">План 9,</target>
        </trans-unit>
        <trans-unit id="385e0a23397d52d755976c0e7320a1e9bbbbf5ea" translate="yes" xml:space="preserve">
          <source>Plan events are fired off whenever a plan is declared, done testing is called, or a subtext completes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="24aa0fed2f1fce379a116b32ca6b7911453a9150" translate="yes" xml:space="preserve">
          <source>Plan handling lifted from Test::More. written by Michael G Schwern &amp;lt;schwern@pobox.com&amp;gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4b2cf4211ed36a7b6ec3c0f885611d65d2982aae" translate="yes" xml:space="preserve">
          <source>Plan result token.</source>
          <target state="translated">Жетон результата плана.</target>
        </trans-unit>
        <trans-unit id="89a27c59b357dc17fcf14a17fcc79f90df885094" translate="yes" xml:space="preserve">
          <source>Plane 0</source>
          <target state="translated">Самолет 0</target>
        </trans-unit>
        <trans-unit id="8be58825425054cbd0b59342becdd853b8548be0" translate="yes" xml:space="preserve">
          <source>Platform Specific</source>
          <target state="translated">Специфическая платформа</target>
        </trans-unit>
        <trans-unit id="e0bdb4c07f2772a4a54cf92695aa356c9a6579b0" translate="yes" xml:space="preserve">
          <source>Platform abstraction over &lt;code&gt;inet_ntop()&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="96c39100db86a74639c0232bfd97c1daf53f3255" translate="yes" xml:space="preserve">
          <source>Platform and configuration independent &lt;code&gt;strtol&lt;/code&gt;. This expands to the appropriate &lt;code&gt;strotol&lt;/code&gt;-like function based on the platform and</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8fbe98f422743bc7e2a75d7c1f99951eb4321f74" translate="yes" xml:space="preserve">
          <source>Platform and configuration independent &lt;code&gt;strtoul&lt;/code&gt;. This expands to the appropriate &lt;code&gt;strotoul&lt;/code&gt;-like function based on the platform and</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eb666bc9b27013cda41fa8a2da0d844236374b6f" translate="yes" xml:space="preserve">
          <source>Platform-Specific</source>
          <target state="translated">Platform-Specific</target>
        </trans-unit>
        <trans-unit id="eef47a635b38ce4bb5160d8fbf43c327f07918d8" translate="yes" xml:space="preserve">
          <source>Platform-agnostic MM methods</source>
          <target state="translated">Платформенно-диагностические методы ММ</target>
        </trans-unit>
        <trans-unit id="efc0c78db0c6b708dec802259186b13ee8606a83" translate="yes" xml:space="preserve">
          <source>Platform-specific pieces of the build system also live in platform-specific directories like</source>
          <target state="translated">Специфические для платформы части системы сборки также живут в специфических для платформы каталогах,таких как</target>
        </trans-unit>
        <trans-unit id="67155fe2d558d3be96473a78ebaa5f39e1acf3d8" translate="yes" xml:space="preserve">
          <source>Platforms that do not have &lt;code&gt;rdev&lt;/code&gt;, &lt;code&gt;blksize&lt;/code&gt;, or &lt;code&gt;blocks&lt;/code&gt; will return these as &lt;code&gt;''&lt;/code&gt;, so numeric comparison or manipulation of these fields may cause 'not numeric' warnings.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2151168060825531d644ad2c9ef307ad23d45dd1" translate="yes" xml:space="preserve">
          <source>Platforms that do not have rdev, blksize, or blocks will return these as '', so numeric comparison or manipulation of these fields may cause 'not numeric' warnings.</source>
          <target state="translated">Платформы,которые не имеют rdev,blksize или блоков,будут возвращать их как '',поэтому числовое сравнение или манипулирование этими полями может привести к &quot;не числовым&quot; предупреждениям.</target>
        </trans-unit>
        <trans-unit id="cb78dc6caa9da43d8d82895592406c2fb238b4d0" translate="yes" xml:space="preserve">
          <source>Playing Safe</source>
          <target state="translated">Играть безопасно</target>
        </trans-unit>
        <trans-unit id="f5f50c6b28a2dbf428734248274d14fcc946d37a" translate="yes" xml:space="preserve">
          <source>Please add examples to what follows!</source>
          <target state="translated">Пожалуйста,добавьте примеры ниже!</target>
        </trans-unit>
        <trans-unit id="90db41980a6ddf9879d54f849f2452dacbc9ddd8" translate="yes" xml:space="preserve">
          <source>Please be aware that code in debugger listings may not look the same as your original source code. Line directives and external source filters can alter the code before Perl sees it, causing code to move from its original positions or take on entirely different forms.</source>
          <target state="translated">Пожалуйста,имейте в виду,что код в списках отладчиков может выглядеть не так,как ваш исходный код.Строковые директивы и внешние фильтры исходных текстов могут изменить код до того,как Perl увидит его,что заставит код переместиться с исходных позиций или принять совершенно иные формы.</target>
        </trans-unit>
        <trans-unit id="6e35b70405206d942352bd9cec349bc8a7f2d0ac" translate="yes" xml:space="preserve">
          <source>Please check individual plugin documentation for more details.</source>
          <target state="translated">Подробнее см.документацию по отдельным плагинам.</target>
        </trans-unit>
        <trans-unit id="46a88c30ac9775bf9675292bcf8883102c284165" translate="yes" xml:space="preserve">
          <source>Please check the archive of the perl5-porters list (see below) and/or the bug tracking system before submitting a bug report. Often, you'll find that the bug has been reported already.</source>
          <target state="translated">Пожалуйста,проверьте архив списка perl5-портеров (см.ниже)и/или систему отслеживания ошибок перед отправкой сообщения об ошибке.Часто вы обнаружите,что об ошибке уже сообщали.</target>
        </trans-unit>
        <trans-unit id="30d084e470b1305e613cce5c8a8f760ce12b4e60" translate="yes" xml:space="preserve">
          <source>Please e-mail us with problems, bug fixes, comments and complaints, although if you have compliments you should send them to Raphael. Please don't e-mail Raphael with problems, as he no longer works on Storable, and your message will be delayed while he forwards it to us.</source>
          <target state="translated">Пожалуйста,напишите нам по электронной почте с проблемами,исправлениями ошибок,комментариями и жалобами,хотя если у вас есть комплименты,вы должны отправить их Рафаэлю.Пожалуйста,не пишите Рафаэлю с проблемами,так как он больше не работает на Storable,и ваше сообщение будет отложено,пока он пересылает его нам.</target>
        </trans-unit>
        <trans-unit id="c431b3a19986ac53c575f9800468af7f81b46d87" translate="yes" xml:space="preserve">
          <source>Please feedback what is wrong</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="30c152b00259545a7771c21e247f5c5553ad4a6f" translate="yes" xml:space="preserve">
          <source>Please inform the module author if this is necessary to successfully install a module under 5.6 or later.</source>
          <target state="translated">Пожалуйста,сообщите об этом автору модуля,если это необходимо для успешной установки модуля под 5.6 или более поздней версией.</target>
        </trans-unit>
        <trans-unit id="8b79f33567ebd39e312df677117f1f02c643059b" translate="yes" xml:space="preserve">
          <source>Please keep this list up-to-date by informing me about other items.</source>
          <target state="translated">Пожалуйста,держите этот список в курсе,информируя меня о других пунктах.</target>
        </trans-unit>
        <trans-unit id="d8e4357df6c51adf400f25dbaa777916223b07af" translate="yes" xml:space="preserve">
          <source>Please make sure the SDK version (i.e. the numbers right before '.sdk') matches your system's (in this case, Mac OS X 10.8 &quot;Mountain Lion&quot;), as it is possible to have more than one SDK installed. Also make sure the path exists in your system, and if it doesn't please make sure the SDK is properly installed, as it should come with the 'Command Line Tools' bundle mentioned above. Finally, if you have an older Mac OS X (10.6 &quot;Snow Leopard&quot; and below) running Xcode 4.2 or lower, the SDK path might be something like &lt;code&gt;'/Developer/SDKs/MacOSX10.3.9.sdk'&lt;/code&gt; .</source>
          <target state="translated">Убедитесь, что версия SDK (т. Е. Номера прямо перед '.sdk') соответствует версии вашей системы (в данном случае Mac OS X 10.8 &amp;laquo;Mountain Lion&amp;raquo;), так как возможно установить более одного SDK. Также убедитесь, что путь существует в вашей системе, и если это не так, убедитесь, что SDK правильно установлен, поскольку он должен поставляться с упомянутым выше пакетом &amp;laquo;Инструменты командной строки&amp;raquo;. Наконец, если у вас более старая Mac OS X (10.6 &amp;laquo;Snow Leopard&amp;raquo; и ниже) с Xcode 4.2 или ниже, путь к SDK может выглядеть примерно так: &lt;code&gt;'/Developer/SDKs/MacOSX10.3.9.sdk'&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="83b8ae2c8755481b5060b9d197a3f14fa03b0c26" translate="yes" xml:space="preserve">
          <source>Please make sure the SDK version (i.e. the numbers right before '.sdk') matches your system's (in this case, Mac OS X 10.8 &quot;Mountain Lion&quot;), as it is possible to have more than one SDK installed. Also make sure the path exists in your system, and if it doesn't please make sure the SDK is properly installed, as it should come with the 'Command Line Tools' bundle mentioned above. Finally, if you have an older Mac OS X (10.6 &quot;Snow Leopard&quot; and below) running Xcode 4.2 or lower, the SDK path might be something like &lt;code&gt;'/Developer/SDKs/MacOSX10.3.9.sdk'&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="93b9716fcd4491544e9d39d5e1bcaaba2e6587ef" translate="yes" xml:space="preserve">
          <source>Please make sure you add the perldelta entry to the right section within</source>
          <target state="translated">Пожалуйста,убедитесь,что вы добавили запись perldelta в нужный раздел в пределах</target>
        </trans-unit>
        <trans-unit id="4af848fa0de6bb5d98f95a63ab5b33868a64d534" translate="yes" xml:space="preserve">
          <source>Please make your issue title informative. &quot;a bug&quot; is not informative. Neither is &quot;perl crashes&quot; nor is &quot;HELP!!!&quot;. These don't help. A compact description of what's wrong is fine.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="23a323093ed3237613762e5f23d911eb5beeb543" translate="yes" xml:space="preserve">
          <source>Please note a significant difference in the behavior of &lt;code&gt;&lt;a href=&quot;functions/die&quot;&gt;die&lt;/a&gt;&lt;/code&gt; in the &lt;code&gt;PERL_VMS_POSIX_EXIT&lt;/code&gt; mode is that it does not force a VMS SEVERE_ERROR status on exit. The Unix exit values of 2 through 255 will be encoded in VMS status values with severity levels of SUCCESS. The Unix exit value of 1 will be encoded in a VMS status value with a severity level of ERROR. This is to be compatible with how the VMS C library encodes these values.</source>
          <target state="translated">Обратите внимание, что существенное различие в поведении &lt;code&gt;&lt;a href=&quot;functions/die&quot;&gt;die&lt;/a&gt;&lt;/code&gt; в режиме &lt;code&gt;PERL_VMS_POSIX_EXIT&lt;/code&gt; состоит в том, что он не вызывает состояние VMS SEVERE_ERROR при выходе. Значения выхода Unix от 2 до 255 будут закодированы в значениях статуса VMS с уровнями серьезности УСПЕХ. Значение выхода Unix, равное 1, будет закодировано в значении статуса VMS с уровнем серьезности ERROR. Это должно быть совместимо с тем, как библиотека VMS C кодирует эти значения.</target>
        </trans-unit>
        <trans-unit id="6c177938660fc8c8c17b75bc3c856520fd266ed0" translate="yes" xml:space="preserve">
          <source>Please note a significant difference in the behavior of &lt;code&gt;die&lt;/code&gt; in the &lt;code&gt;PERL_VMS_POSIX_EXIT&lt;/code&gt; mode is that it does not force a VMS SEVERE_ERROR status on exit. The Unix exit values of 2 through 255 will be encoded in VMS status values with severity levels of SUCCESS. The Unix exit value of 1 will be encoded in a VMS status value with a severity level of ERROR. This is to be compatible with how the VMS C library encodes these values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="acb93428fa7988b6bd9d3d5b914c777174b9e347" translate="yes" xml:space="preserve">
          <source>Please note that ':constant' does not affect integer constants, nor binary nor hexadecimal constants. Use &lt;a href=&quot;../bignum&quot;&gt;bignum&lt;/a&gt; or &lt;a href=&quot;bigint&quot;&gt;Math::BigInt&lt;/a&gt; to get this to work.</source>
          <target state="translated">Обратите внимание, что ': constant' не влияет ни на целые, ни на двоичные, ни на шестнадцатеричные константы. Используйте &lt;a href=&quot;../bignum&quot;&gt;bignum&lt;/a&gt; или &lt;a href=&quot;bigint&quot;&gt;Math :: BigInt,&lt;/a&gt; чтобы заставить это работать.</target>
        </trans-unit>
        <trans-unit id="06ca6df37fb7aa8ce55441f1d546847190fefd39" translate="yes" xml:space="preserve">
          <source>Please note that ':constant' does not affect integer constants, nor binary nor hexadecimal constants. Use &lt;a href=&quot;bignum&quot;&gt;bignum&lt;/a&gt; or &lt;a href=&quot;Math::BigInt&quot;&gt;Math::BigInt&lt;/a&gt; to get this to work.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2d144a30f04447f4891231cca52898c1f409adce" translate="yes" xml:space="preserve">
          <source>Please note that &lt;code&gt;&lt;a href=&quot;../functions/local&quot;&gt;local($tabstop)&lt;/a&gt;&lt;/code&gt; doesn't do the right thing and if you want to use &lt;code&gt;&lt;a href=&quot;../functions/local&quot;&gt;local&lt;/a&gt;&lt;/code&gt; to override &lt;code&gt;$tabstop&lt;/code&gt; , you need to use &lt;code&gt;&lt;a href=&quot;../functions/local&quot;&gt;local($Text::Tabs::tabstop)&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">Обратите внимание, что &lt;code&gt;&lt;a href=&quot;../functions/local&quot;&gt;local($tabstop)&lt;/a&gt;&lt;/code&gt; не работает правильно, и если вы хотите использовать &lt;code&gt;&lt;a href=&quot;../functions/local&quot;&gt;local&lt;/a&gt;&lt;/code&gt; для переопределения &lt;code&gt;$tabstop&lt;/code&gt; , вам нужно использовать &lt;code&gt;&lt;a href=&quot;../functions/local&quot;&gt;local($Text::Tabs::tabstop)&lt;/a&gt;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="9aa5bbfabef472a29774dca149c4460b4d54f432" translate="yes" xml:space="preserve">
          <source>Please note that &lt;code&gt;local($tabstop)&lt;/code&gt; doesn't do the right thing and if you want to use &lt;code&gt;local&lt;/code&gt; to override &lt;code&gt;$tabstop&lt;/code&gt;, you need to use &lt;code&gt;local($Text::Tabs::tabstop)&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="633a4db7a1c782ae1b6e824e0fc9e69a016269b6" translate="yes" xml:space="preserve">
          <source>Please note that Math::BigFloat does &lt;b&gt;not&lt;/b&gt; use the denoted library itself, but it merely passes the lib argument to Math::BigInt. So, instead of the need to do:</source>
          <target state="translated">Обратите внимание, что Math :: BigFloat &lt;b&gt;не&lt;/b&gt; использует саму обозначенную библиотеку, а просто передает аргумент lib в Math :: BigInt. Итак, вместо того, чтобы делать:</target>
        </trans-unit>
        <trans-unit id="a54801dfc85b8f9fc3dbd94457ccfddcfab12f10" translate="yes" xml:space="preserve">
          <source>Please note that POD has the notion of &quot;paragraphs&quot;: this is something starting</source>
          <target state="translated">Пожалуйста,обратите внимание,что в ПОД есть понятие &quot;параграфы&quot;:это что-то начинающееся.</target>
        </trans-unit>
        <trans-unit id="72307c57d87a56e5608808a2107363696283fed6" translate="yes" xml:space="preserve">
          <source>Please note that if multiple files are parsed for a single POD document (perhaps the result of some kind of &lt;code&gt;=include&lt;/code&gt; directive) this method is invoked for every file that is parsed. If you wish to perform certain cleanup actions once per document, then you should use &lt;b&gt;end_pod()&lt;/b&gt;.</source>
          <target state="translated">Обратите внимание, что если для одного документа POD анализируется несколько файлов (возможно, это результат какой-то директивы &lt;code&gt;=include&lt;/code&gt; ), этот метод вызывается для каждого анализируемого файла. Если вы хотите выполнить определенные действия по очистке один раз для каждого документа, вам следует использовать &lt;b&gt;end_pod ()&lt;/b&gt; .</target>
        </trans-unit>
        <trans-unit id="10f71534786c6e41d011fbc9deff5549daf1fe0b" translate="yes" xml:space="preserve">
          <source>Please note that if the layer is created in the PerlIO::via:: namespace, it does &lt;b&gt;not&lt;/b&gt; have to be fully qualified. The PerlIO::via module will prefix the PerlIO::via:: namespace if the specified modulename does not exist as a fully qualified module name.</source>
          <target state="translated">Обратите внимание, что если уровень создается в пространстве имен PerlIO :: via ::, он &lt;b&gt;не&lt;/b&gt; обязательно должен быть полностью определен. Модуль PerlIO :: via будет префиксом пространства имен PerlIO :: via ::, если указанное имя модуля не существует как полное имя модуля.</target>
        </trans-unit>
        <trans-unit id="713c4ec8dda734601e7b059dd41a997e18f77cd8" translate="yes" xml:space="preserve">
          <source>Please note that on Windows platforms colorized output also requires the Win32::Console::ANSI module.</source>
          <target state="translated">Обратите внимание,что на Windows-платформах для вывода цветной информации также требуется модуль Win32::Console::ANSI.</target>
        </trans-unit>
        <trans-unit id="b414f05f7085ad8d048ca6abb13a1f7ce979a37b" translate="yes" xml:space="preserve">
          <source>Please note that some of the trigonometric functions can break out from the &lt;b&gt;real axis&lt;/b&gt; into the &lt;b&gt;complex plane&lt;/b&gt;. For example &lt;code&gt;asin(2)&lt;/code&gt; has no definition for plain real numbers but it has definition for complex numbers.</source>
          <target state="translated">Обратите внимание, что некоторые тригонометрические функции могут выходить из &lt;b&gt;действительной оси&lt;/b&gt; в &lt;b&gt;комплексную плоскость&lt;/b&gt; . Например, &lt;code&gt;asin(2)&lt;/code&gt; не имеет определения для простых действительных чисел, но имеет определение для комплексных чисел.</target>
        </trans-unit>
        <trans-unit id="2b7c92535c70d75e42791f8ddb48d4ce9ec51fc0" translate="yes" xml:space="preserve">
          <source>Please note that strings and floating point constants are not affected, so that</source>
          <target state="translated">Пожалуйста,обратите внимание,что на строки и константы с плавающей точкой не влияют,так что</target>
        </trans-unit>
        <trans-unit id="c7e396ad592125eb642ceacdd629f60983df2bdf" translate="yes" xml:space="preserve">
          <source>Please note that the &lt;b&gt;preprocess_line()&lt;/b&gt; method is invoked</source>
          <target state="translated">Обратите внимание, что вызывается метод &lt;b&gt;preprocess_line ()&lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="5653094baeaeebceed5e5c79fc61bfba84826926" translate="yes" xml:space="preserve">
          <source>Please note that the first &lt;code&gt;good&lt;/code&gt; state must be an ancestor of the first &lt;code&gt;bad&lt;/code&gt; state. If you want to search for the commit that</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="865709c0c581d8169eede3efc9f220dad69fc01d" translate="yes" xml:space="preserve">
          <source>Please note that this is an area of recent development in Perl and that the interface described here is therefore still subject to change (and hopefully will have better documentation and more examples).</source>
          <target state="translated">Пожалуйста,обратите внимание на то,что это область последних разработок на Perl,и поэтому интерфейс,описанный здесь,все еще может быть изменен (и,надеюсь,будет иметь лучшую документацию и больше примеров).</target>
        </trans-unit>
        <trans-unit id="9d1dda7d4ff18b02aa0b290b258576653be091e9" translate="yes" xml:space="preserve">
          <source>Please note that this layer is implied when calling open() thus:</source>
          <target state="translated">Обратите внимание,что этот слой подразумевается при вызове open():</target>
        </trans-unit>
        <trans-unit id="14bd27e9d494565b2545ea76d64ba9560ebda982" translate="yes" xml:space="preserve">
          <source>Please note that while this module works on Perl 5.6, it is no longer being routinely tested on 5.6 - the earliest Perl version being routinely tested, and expressly supported, is 5.8.1. However, patches to repair any breakage on 5.6 are still being accepted.</source>
          <target state="translated">Пожалуйста,обратите внимание,что хотя этот модуль работает на Perl 5.6,он больше не тестируется на 5.6-самой ранней версией Perl,которая регулярно тестируется и явно поддерживается,является 5.8.1.Тем не менее,патчи для устранения любой поломки на версии 5.6 все еще принимаются.</target>
        </trans-unit>
        <trans-unit id="538443df0be8abcb2c7740f09bb5b4b6d88ac69f" translate="yes" xml:space="preserve">
          <source>Please note the following does not work as expected (prints nothing), since overloading of '..' is not yet possible in Perl (as of v5.8.0):</source>
          <target state="translated">Обратите внимание,что следующее не работает так,как ожидалось (ничего не печатает),так как перегрузка &quot;...&quot; в Perl (по состоянию на v5.8.0)еще невозможна:</target>
        </trans-unit>
        <trans-unit id="81118967e42641b9c6eb5f04cdbe62abe7740600" translate="yes" xml:space="preserve">
          <source>Please note: This mode of operation is no longer supported as of Perl v5.26.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fdc3f6a4a31c88f4e79077f99064bd4223a68148" translate="yes" xml:space="preserve">
          <source>Please note: in the general case, you're better off using &lt;a href=&quot;encode#decode&quot;&gt;&lt;code&gt;Encode::decode('UTF-8', $utf)&lt;/code&gt;&lt;/a&gt; to decode a UTF-8 encoded byte string to a Perl Unicode string, and &lt;a href=&quot;encode#encode&quot;&gt;&lt;code&gt;Encode::encode('UTF-8', $str)&lt;/code&gt;&lt;/a&gt; to encode a Perl Unicode string to UTF-8 bytes. These functions provide means of handling invalid byte sequences and generally have a friendlier interface.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a240f0a420b088c6642d6eafb7c3deb2f9e741be" translate="yes" xml:space="preserve">
          <source>Please note: in the general case, you're better off using Encode::decode_utf8 to decode a UTF-8 encoded byte string to a Perl Unicode string, and Encode::encode_utf8 to encode a Perl Unicode string to UTF-8 bytes. These functions provide means of handling invalid byte sequences and generally have a friendlier interface.</source>
          <target state="translated">Обратите внимание:в общем случае,лучше использовать Encode::decode_utf8 для декодирования UTF-8 кодированной байтовой строки до Perl Unicode строки,а Encode::encode_utf8 для кодирования Perl Unicode строки до UTF-8 байтов.Эти функции предоставляют средства обработки недействительных последовательностей байтов и обычно имеют более дружественный интерфейс.</target>
        </trans-unit>
        <trans-unit id="a968cbb027497bb1dd61f62478bee1c4fb7295eb" translate="yes" xml:space="preserve">
          <source>Please note: the two functions defined above are</source>
          <target state="translated">Обратите внимание:две указанные выше функции</target>
        </trans-unit>
        <trans-unit id="59a34246a11ef1f18ccb92fad013882849039fa3" translate="yes" xml:space="preserve">
          <source>Please read &lt;a href=&quot;#COPYRIGHT&quot;&gt;&quot;COPYRIGHT&quot;&lt;/a&gt; before using version 2.x or greater of Berkeley DB with DB_File.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e14b19aff89c4aad18c1b1f461b6bc9f9f18afb0" translate="yes" xml:space="preserve">
          <source>Please read &lt;a href=&quot;#COPYRIGHT&quot;&gt;COPYRIGHT&lt;/a&gt; before using version 2.x or greater of Berkeley DB with DB_File.</source>
          <target state="translated">Пожалуйста, прочтите &lt;a href=&quot;#COPYRIGHT&quot;&gt;АВТОРСКОЕ ПРАВО&lt;/a&gt; перед использованием Berkeley DB версии 2.x или выше с DB_File.</target>
        </trans-unit>
        <trans-unit id="a49d7388a9b16b3144a078e3b5020dee8701b8c5" translate="yes" xml:space="preserve">
          <source>Please refer to the &lt;code&gt;Archive::Tar::File&lt;/code&gt; documentation on how to handle these objects.</source>
          <target state="translated">Пожалуйста, обратитесь к документации &lt;code&gt;Archive::Tar::File&lt;/code&gt; о том, как обращаться с этими объектами.</target>
        </trans-unit>
        <trans-unit id="63dd61b82f101f26826b0ee19baaf07fb1de5b36" translate="yes" xml:space="preserve">
          <source>Please refer to the MSDN documentation of the CSIDL constants, currently available at:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9ba05ea79d06558fc847ddce39fd58ed9e3603b4" translate="yes" xml:space="preserve">
          <source>Please refer to your native fcntl(2), open(2), fseek(3), lseek(2) (equal to Perl's seek() and sysseek(), respectively), and chmod(2) documentation to see what constants are implemented in your system.</source>
          <target state="translated">Пожалуйста,обратитесь к вашей родной документации fcntl(2),open(2),fseek(3),lseek(2)(равнозначной запросу Perl's seek()и sysseek(),соответственно),и chmod(2),чтобы увидеть,какие константы реализованы в вашей системе.</target>
        </trans-unit>
        <trans-unit id="c84d853900a8b1e8461d42ec22c7bb0bc4e4555b" translate="yes" xml:space="preserve">
          <source>Please remember to send me an updated entry for the Module list!</source>
          <target state="translated">Пожалуйста,не забудьте прислать мне обновленную запись для списка Модулей!</target>
        </trans-unit>
        <trans-unit id="9d4f61b83a34e9d17810bf3a6beba8149a3099ab" translate="yes" xml:space="preserve">
          <source>Please report all bugs on the RT queue, either via the web interface:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fc5ac378228cc627e576428f688749bb3cf44169" translate="yes" xml:space="preserve">
          <source>Please report all bugs on the RT queue:</source>
          <target state="translated">Пожалуйста,сообщайте обо всех ошибках в очереди RT:</target>
        </trans-unit>
        <trans-unit id="cd1826396d92eaf26d7671cebd0646515ababb89" translate="yes" xml:space="preserve">
          <source>Please report any bugs or feature requests through the issue tracker at &lt;a href=&quot;http://rt.cpan.org/Public/Dist/Display.html?Name=Parse-CPAN-Meta&quot;&gt;http://rt.cpan.org/Public/Dist/Display.html?Name=Parse-CPAN-Meta&lt;/a&gt;. You will be notified automatically of any progress on your issue.</source>
          <target state="translated">Сообщайте о любых ошибках или запросах функций через средство отслеживания проблем по адресу &lt;a href=&quot;http://rt.cpan.org/Public/Dist/Display.html?Name=Parse-CPAN-Meta&quot;&gt;http://rt.cpan.org/Public/Dist/Display.html?Name=Parse-CPAN-Meta&lt;/a&gt; . Вы будете автоматически уведомлены о любом прогрессе в решении вашей проблемы.</target>
        </trans-unit>
        <trans-unit id="f29e539c9949d7fd976fcf0ef31e3d520dfef64c" translate="yes" xml:space="preserve">
          <source>Please report any bugs or feature requests through the issue tracker at &lt;a href=&quot;https://github.com/Perl-Toolchain-Gang/CPAN-Meta-Requirements/issues&quot;&gt;https://github.com/Perl-Toolchain-Gang/CPAN-Meta-Requirements/issues&lt;/a&gt;. You will be notified automatically of any progress on your issue.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e10dad34d98d968a9e79abbac903596e6421800b" translate="yes" xml:space="preserve">
          <source>Please report any bugs or feature requests through the issue tracker at &lt;a href=&quot;https://github.com/Perl-Toolchain-Gang/CPAN-Meta/issues&quot;&gt;https://github.com/Perl-Toolchain-Gang/CPAN-Meta/issues&lt;/a&gt;. You will be notified automatically of any progress on your issue.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="95a04dfd4c1fc483cefbbd64e9cf7d0f5a2a01dc" translate="yes" xml:space="preserve">
          <source>Please report any bugs or feature requests through the issue tracker at &lt;a href=&quot;https://github.com/Perl-Toolchain-Gang/Perl-OSType/issues&quot;&gt;https://github.com/Perl-Toolchain-Gang/Perl-OSType/issues&lt;/a&gt;. You will be notified automatically of any progress on your issue.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2b3e9326f48a70cd35e62a3e7c3c1b10a005c4e2" translate="yes" xml:space="preserve">
          <source>Please report any bugs or feature requests through the issue tracker at &lt;a href=&quot;https://github.com/chansen/p5-http-tiny/issues&quot;&gt;https://github.com/chansen/p5-http-tiny/issues&lt;/a&gt;. You will be notified automatically of any progress on your issue.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="54e910ef38da12f1e82d477c66613f898afde850" translate="yes" xml:space="preserve">
          <source>Please report any bugs or feature requests through the issue tracker at L</source>
          <target state="translated">Пожалуйста,сообщайте о любых ошибках или запросах функций через трекер проблем в L</target>
        </trans-unit>
        <trans-unit id="bb7ffcd32fde8fcb70ebf33b96ca410b8c21fd4d" translate="yes" xml:space="preserve">
          <source>Please report any bugs or feature requests to &lt;code&gt;bug-math-bigint at rt.cpan.org&lt;/code&gt; , or through the web interface at &lt;a href=&quot;https://rt.cpan.org/Ticket/Create.html?Queue=Math-BigInt&quot;&gt;https://rt.cpan.org/Ticket/Create.html?Queue=Math-BigInt&lt;/a&gt; (requires login). We will be notified, and then you'll automatically be notified of progress on your bug as I make changes.</source>
          <target state="translated">&lt;code&gt;bug-math-bigint at rt.cpan.org&lt;/code&gt; о любых ошибках или запросах функций в bug-math-bigint на rt.cpan.org или через веб-интерфейс по адресу &lt;a href=&quot;https://rt.cpan.org/Ticket/Create.html?Queue=Math-BigInt&quot;&gt;https://rt.cpan.org/Ticket/Create.html?Queue=Math-BigInt&lt;/a&gt; (требуется логин ). Мы будем уведомлены, а затем вы будете автоматически уведомлены о ходе исправления ошибки, когда я внесу изменения.</target>
        </trans-unit>
        <trans-unit id="7c1ec7a85f06c97f5ca00ceba49cd056337d425f" translate="yes" xml:space="preserve">
          <source>Please report any bugs or feature requests to &lt;code&gt;bug-math-bigint at rt.cpan.org&lt;/code&gt;, or through the web interface at &lt;a href=&quot;https://rt.cpan.org/Ticket/Create.html?Queue=Math-BigInt&quot;&gt;https://rt.cpan.org/Ticket/Create.html?Queue=Math-BigInt&lt;/a&gt; (requires login). We will be notified, and then you'll automatically be notified of progress on your bug as I make changes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4855ec4202fef3ce386c7a181d6e6a5bd1e45ec3" translate="yes" xml:space="preserve">
          <source>Please report any bugs or feature requests to &lt;code&gt;bug-math-bigint at rt.cpan.org&lt;/code&gt;, or through the web interface at &lt;a href=&quot;https://rt.cpan.org/Ticket/Create.html?Queue=bignum&quot;&gt;https://rt.cpan.org/Ticket/Create.html?Queue=bignum&lt;/a&gt; (requires login). We will be notified, and then you'll automatically be notified of progress on your bug as I make changes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4f1e163ae4819860c0befb05416f4880530b21f6" translate="yes" xml:space="preserve">
          <source>Please report any bugs or feature requests to &lt;code&gt;bug-math-bigint-fastcalc at rt.cpan.org&lt;/code&gt;, or through the web interface at &lt;a href=&quot;https://rt.cpan.org/Ticket/Create.html?Queue=Math-BigInt-FastCalc&quot;&gt;https://rt.cpan.org/Ticket/Create.html?Queue=Math-BigInt-FastCalc&lt;/a&gt; (requires login). We will be notified, and then you'll automatically be notified of progress on your bug as I make changes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fedca4eaf22650d4f30ff44ea5ea07caadc39831" translate="yes" xml:space="preserve">
          <source>Please report any bugs or feature requests to &lt;code&gt;bug-math-bigrat at rt.cpan.org&lt;/code&gt; , or through the web interface at &lt;a href=&quot;https://rt.cpan.org/Ticket/Create.html?Queue=Math-BigRat&quot;&gt;https://rt.cpan.org/Ticket/Create.html?Queue=Math-BigRat&lt;/a&gt; (requires login). We will be notified, and then you'll automatically be notified of progress on your bug as I make changes.</source>
          <target state="translated">Пожалуйста, сообщайте о любых ошибках или запросах функций в &lt;code&gt;bug-math-bigrat at rt.cpan.org&lt;/code&gt; или через веб-интерфейс по адресу &lt;a href=&quot;https://rt.cpan.org/Ticket/Create.html?Queue=Math-BigRat&quot;&gt;https://rt.cpan.org/Ticket/Create.html?Queue=Math-BigRat&lt;/a&gt; (требуется логин ). Мы будем уведомлены, а затем вы будете автоматически уведомлены о ходе исправления ошибки, когда я внесу изменения.</target>
        </trans-unit>
        <trans-unit id="44b2b1389efa7dcc1194b0bee5209d80e2cd9879" translate="yes" xml:space="preserve">
          <source>Please report any bugs or feature requests to &lt;code&gt;bug-math-bigrat at rt.cpan.org&lt;/code&gt;, or through the web interface at &lt;a href=&quot;https://rt.cpan.org/Ticket/Create.html?Queue=Math-BigRat&quot;&gt;https://rt.cpan.org/Ticket/Create.html?Queue=Math-BigRat&lt;/a&gt; (requires login). We will be notified, and then you'll automatically be notified of progress on your bug as I make changes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9e63d77d099b0075753f056790cc8a0a16061cd4" translate="yes" xml:space="preserve">
          <source>Please report any bugs or feature requests to &lt;code&gt;bug-sys-syslog (at) rt.cpan.org&lt;/code&gt;, or through the web interface at &lt;a href=&quot;http://rt.cpan.org/Public/Dist/Display.html?Name=Sys-Syslog&quot;&gt;http://rt.cpan.org/Public/Dist/Display.html?Name=Sys-Syslog&lt;/a&gt;. I will be notified, and then you'll automatically be notified of progress on your bug as I make changes.</source>
          <target state="translated">Сообщайте обо всех ошибках или запросах функций на &lt;code&gt;bug-sys-syslog (at) rt.cpan.org&lt;/code&gt; или через веб-интерфейс по адресу &lt;a href=&quot;http://rt.cpan.org/Public/Dist/Display.html?Name=Sys-Syslog&quot;&gt;http://rt.cpan.org/Public/Dist/Display.html?Name=Sys- Системный журнал&lt;/a&gt; . Я буду уведомлен, а затем вы будете автоматически уведомлены о ходе исправления ошибки, когда я внесу изменения.</target>
        </trans-unit>
        <trans-unit id="ae680a8d27e7e30eaabedd56fcc07aec11c11d49" translate="yes" xml:space="preserve">
          <source>Please report any bugs or feature requests to &lt;code&gt;bug-test-harness at rt.cpan.org&lt;/code&gt; , or through the web interface at &lt;a href=&quot;http://rt.cpan.org/NoAuth/ReportBug.html?Queue=Test-Harness&quot;&gt;http://rt.cpan.org/NoAuth/ReportBug.html?Queue=Test-Harness&lt;/a&gt;. I will be notified, and then you'll automatically be notified of progress on your bug as I make changes.</source>
          <target state="translated">Сообщайте о любых ошибках или запросах функций в &lt;code&gt;bug-test-harness at rt.cpan.org&lt;/code&gt; или через веб-интерфейс по адресу &lt;a href=&quot;http://rt.cpan.org/NoAuth/ReportBug.html?Queue=Test-Harness&quot;&gt;http://rt.cpan.org/NoAuth/ReportBug.html?Queue=Test-Harness&lt;/a&gt; . Я буду уведомлен, а затем вы будете автоматически уведомлены о ходе исправления ошибки, когда я внесу изменения.</target>
        </trans-unit>
        <trans-unit id="341b6e60f3036ad2f760be88739c597fd2cbae0b" translate="yes" xml:space="preserve">
          <source>Please report any bugs or feature requests to &lt;code&gt;bug-test-harness at rt.cpan.org&lt;/code&gt;, or through the web interface at &lt;a href=&quot;http://rt.cpan.org/NoAuth/ReportBug.html?Queue=Test-Harness&quot;&gt;http://rt.cpan.org/NoAuth/ReportBug.html?Queue=Test-Harness&lt;/a&gt;. I will be notified, and then you'll automatically be notified of progress on your bug as I make changes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="667d7074054f4f754df9eeb8e155a22d30cbaad3" translate="yes" xml:space="preserve">
          <source>Please report any bugs or feature requests to &lt;code&gt;bug-test-harness@rt.cpan.org&lt;/code&gt; , or through the web interface at &lt;a href=&quot;http://rt.cpan.org/NoAuth/ReportBug.html?Queue=Test-Harness&quot;&gt;http://rt.cpan.org/NoAuth/ReportBug.html?Queue=Test-Harness&lt;/a&gt;. We will be notified, and then you'll automatically be notified of progress on your bug as we make changes.</source>
          <target state="translated">Пожалуйста, сообщайте о любых ошибках или запросах функций на &lt;code&gt;bug-test-harness@rt.cpan.org&lt;/code&gt; или через веб-интерфейс по адресу &lt;a href=&quot;http://rt.cpan.org/NoAuth/ReportBug.html?Queue=Test-Harness&quot;&gt;http://rt.cpan.org/NoAuth/ReportBug.html?Queue=Test-Harness&lt;/a&gt; . Мы будем уведомлены, а затем вы будете автоматически уведомлены о ходе исправления ошибки по мере внесения нами изменений.</target>
        </trans-unit>
        <trans-unit id="f074316234c4859a301df22686a28d5f2ff92bd3" translate="yes" xml:space="preserve">
          <source>Please report any bugs or feature requests to &lt;code&gt;bug-test-harness@rt.cpan.org&lt;/code&gt;, or through the web interface at &lt;a href=&quot;http://rt.cpan.org/NoAuth/ReportBug.html?Queue=Test-Harness&quot;&gt;http://rt.cpan.org/NoAuth/ReportBug.html?Queue=Test-Harness&lt;/a&gt;. We will be notified, and then you'll automatically be notified of progress on your bug as we make changes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9c61f91a0c5559a90a0233170a166239a41b69c9" translate="yes" xml:space="preserve">
          <source>Please report any bugs or feature requests via the perlbug(1) utility.</source>
          <target state="translated">Пожалуйста,сообщайте о любых ошибках или запросах функций через утилиту perlbug(1).</target>
        </trans-unit>
        <trans-unit id="da1690d7c5d6c84d4dfa27a5c4d0acb738c84780" translate="yes" xml:space="preserve">
          <source>Please report any bugs or feature using the CPAN Request Tracker. Bugs can be submitted through the web interface at &lt;a href=&quot;http://rt.cpan.org/Dist/Display.html?Queue=CPAN-Meta&quot;&gt;http://rt.cpan.org/Dist/Display.html?Queue=CPAN-Meta&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="538631f2230a63e6ce1111d15fa806e9dbfb590c" translate="yes" xml:space="preserve">
          <source>Please report any errors, updates, or suggestions to</source>
          <target state="translated">Пожалуйста,сообщайте о любых ошибках,обновлениях или предложениях,чтобы</target>
        </trans-unit>
        <trans-unit id="b2fed3d97135253678acd7ef66f99b903e366619" translate="yes" xml:space="preserve">
          <source>Please report any errors, updates, or suggestions to &lt;a href=&quot;https://github.com/Perl/perl5/issues&quot;&gt;https://github.com/Perl/perl5/issues&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7fdf7d53b3d96ceb75d6b632d2b4d517d6b8a6a5" translate="yes" xml:space="preserve">
          <source>Please report any other failures as described under &lt;a href=&quot;#BUGS-AND-CAVEATS&quot;&gt;&quot;BUGS AND CAVEATS&quot;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="535c1e5f2236649cfc5cd24875aa7a7f5d8bb2dc" translate="yes" xml:space="preserve">
          <source>Please report any other failures as described under &lt;a href=&quot;#BUGS-AND-CAVEATS&quot;&gt;BUGS AND CAVEATS&lt;/a&gt;.</source>
          <target state="translated">Пожалуйста, сообщайте о любых других сбоях, как описано в разделе &amp;laquo; &lt;a href=&quot;#BUGS-AND-CAVEATS&quot;&gt;ОШИБКИ И ПРЕДУПРЕЖДЕНИЯ&amp;raquo;&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="5ecba84d92ce32aa62a862b9a6870d59796672d9" translate="yes" xml:space="preserve">
          <source>Please report bugs in this version of perl to andy@broad.ology.org.uk in the first instance.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="588e8512c3a527a86acc4f15dfb514051940faad" translate="yes" xml:space="preserve">
          <source>Please report bugs on a specific behavior of this module to RT or GitHub issues (preferred):</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="76aa5507d30b205fb08850d3924328ca2edc4fec" translate="yes" xml:space="preserve">
          <source>Please report bugs or other issues to &amp;lt;bug-file-fetch@rt.cpan.org&amp;lt;gt&amp;gt;.</source>
          <target state="translated">Сообщайте об ошибках или других проблемах по адресу &amp;lt;bug-file-fetch@rt.cpan.org &amp;lt;gt&amp;gt;.</target>
        </trans-unit>
        <trans-unit id="5af156ec0cb2830a387a464db78f0177138c46c7" translate="yes" xml:space="preserve">
          <source>Please report bugs or other issues to &amp;lt;bug-ipc-cmd@rt.cpan.org&amp;gt;.</source>
          <target state="translated">Пожалуйста, сообщайте об ошибках или других проблемах по адресу &amp;lt;bug-ipc-cmd@rt.cpan.org&amp;gt;.</target>
        </trans-unit>
        <trans-unit id="89fa61346f2ac4a97f3b1820d45a05f5cf6df3b4" translate="yes" xml:space="preserve">
          <source>Please report bugs or other issues to &amp;lt;bug-module-load-conditional@rt.cpan.org&amp;gt;.</source>
          <target state="translated">Пожалуйста, сообщайте об ошибках или других проблемах по адресу &amp;lt;bug-module-load-conditional@rt.cpan.org&amp;gt;.</target>
        </trans-unit>
        <trans-unit id="74e57493a005451600337c2cd20b19335784389b" translate="yes" xml:space="preserve">
          <source>Please report bugs or other issues to &amp;lt;bug-module-load@rt.cpan.org&amp;lt;gt&amp;gt;.</source>
          <target state="translated">Пожалуйста, сообщайте об ошибках или других проблемах на &amp;lt;bug-module-load@rt.cpan.org &amp;lt;gt&amp;gt;.</target>
        </trans-unit>
        <trans-unit id="aa48dcb88c79a4bb30f628a4e59b5790599238be" translate="yes" xml:space="preserve">
          <source>Please report bugs or other issues to &amp;lt;bug-module-loaded@rt.cpan.org&amp;lt;gt&amp;gt;.</source>
          <target state="translated">Сообщайте об ошибках или других проблемах по адресу &amp;lt;bug-module-loaded@rt.cpan.org &amp;lt;gt&amp;gt;.</target>
        </trans-unit>
        <trans-unit id="ea6595769a4f7e77e760cd27c4315806767a46e6" translate="yes" xml:space="preserve">
          <source>Please report bugs or other issues to &amp;lt;bug-params-check@rt.cpan.org&amp;gt;.</source>
          <target state="translated">Пожалуйста, сообщайте об ошибках или других проблемах по адресу &amp;lt;bug-params-check@rt.cpan.org&amp;gt;.</target>
        </trans-unit>
        <trans-unit id="e2b012cfb62b0833f158983eb6a125eb9f62cad3" translate="yes" xml:space="preserve">
          <source>Please report bugs using &lt;a href=&quot;http://rt.cpan.org&quot;&gt;http://rt.cpan.org&lt;/a&gt;.</source>
          <target state="translated">Сообщайте об ошибках, используя &lt;a href=&quot;http://rt.cpan.org&quot;&gt;http://rt.cpan.org&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="9b0a18ec15ee7f8f9cfa33de7bf50e0926919e26" translate="yes" xml:space="preserve">
          <source>Please report bugs via &lt;a href=&quot;http://rt.cpan.org/&quot;&gt;http://rt.cpan.org/&lt;/a&gt;</source>
          <target state="translated">Сообщайте об ошибках через &lt;a href=&quot;http://rt.cpan.org/&quot;&gt;http://rt.cpan.org/&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="e4417cf7026fd3b1d558ce74b166a72450fc9e3b" translate="yes" xml:space="preserve">
          <source>Please report bugs via the GitHub Issue Tracker at &lt;a href=&quot;https://github.com/pjf/autodie/issues&quot;&gt;https://github.com/pjf/autodie/issues&lt;/a&gt; or via the CPAN Request Tracker at &lt;a href=&quot;https://rt.cpan.org/NoAuth/Bugs.html?Dist=autodie&quot;&gt;https://rt.cpan.org/NoAuth/Bugs.html?Dist=autodie&lt;/a&gt;.</source>
          <target state="translated">Сообщайте об ошибках через трекер проблем GitHub по адресу &lt;a href=&quot;https://github.com/pjf/autodie/issues&quot;&gt;https://github.com/pjf/autodie/issues&lt;/a&gt; или через трекер запросов CPAN по адресу &lt;a href=&quot;https://rt.cpan.org/NoAuth/Bugs.html?Dist=autodie&quot;&gt;https://rt.cpan.org/NoAuth/Bugs.html?Dist=autodie&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="8aab4e1e45b67fc9f30850be9456ba3f03a04a5a" translate="yes" xml:space="preserve">
          <source>Please report detailed descriptions of any problems and solutions that you may find at &amp;lt;&lt;a href=&quot;https://github.com/Perl/perl5/issues&quot;&gt;https://github.com/Perl/perl5/issues&lt;/a&gt;&amp;gt;, along with the output produced by &lt;code&gt;perl -V&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d79a854cdb114b54082c119689356c304d2fefdd" translate="yes" xml:space="preserve">
          <source>Please reports bugs to &amp;lt;bug-archive-tar@rt.cpan.org&amp;gt;.</source>
          <target state="translated">Сообщайте об ошибках по адресу &amp;lt;bug-archive-tar@rt.cpan.org&amp;gt;.</target>
        </trans-unit>
        <trans-unit id="d4341b4d3e627a1778c8a45b586f98e9adc4ce3b" translate="yes" xml:space="preserve">
          <source>Please see &lt;a href=&quot;#parseopts()&quot;&gt;parseopts()&lt;/a&gt; for a complete description of the interface for the setting and unsetting of parse-options.</source>
          <target state="translated">Пожалуйста, см. &lt;a href=&quot;#parseopts()&quot;&gt;Parseopts ()&lt;/a&gt; для полного описания интерфейса для установки и отмены параметров синтаксического анализа.</target>
        </trans-unit>
        <trans-unit id="e7f51c19c32ff7fa52bd5ea5cccc3312c8f093f3" translate="yes" xml:space="preserve">
          <source>Please see &lt;a href=&quot;../parser#SUBCLASSING&quot;&gt;SUBCLASSING in TAP::Parser&lt;/a&gt; for a subclassing overview.</source>
          <target state="translated">См. &lt;a href=&quot;../parser#SUBCLASSING&quot;&gt;Раздел ПОДКЛАССИРОВАНИЕ в TAP :: Parser&lt;/a&gt; для обзора подклассов.</target>
        </trans-unit>
        <trans-unit id="c86f144c936b547d1a8fcab0618c4dcef4646042" translate="yes" xml:space="preserve">
          <source>Please see &lt;a href=&quot;App::Prove#PLUGINS&quot;&gt;&quot;PLUGINS&quot; in App::Prove&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4e91d7e19846bba266909a5e73288f2011d3c67a" translate="yes" xml:space="preserve">
          <source>Please see &lt;a href=&quot;TAP::Parser#SUBCLASSING&quot;&gt;&quot;SUBCLASSING&quot; in TAP::Parser&lt;/a&gt; for a subclassing overview, and any of the subclasses that ship with this module as an example. What follows is a quick overview.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="26bbee5cc38dd221caeb15c8d0b9944048cfb0e3" translate="yes" xml:space="preserve">
          <source>Please see &lt;a href=&quot;TAP::Parser#SUBCLASSING&quot;&gt;&quot;SUBCLASSING&quot; in TAP::Parser&lt;/a&gt; for a subclassing overview.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c6c46841005cacd4d19b8897f62c9bcdf00ba021" translate="yes" xml:space="preserve">
          <source>Please see &lt;a href=&quot;Test2::API::Context#CRITICAL-DETAILS&quot;&gt;&quot;CRITICAL DETAILS&quot; in Test2::API::Context&lt;/a&gt; for important rules about what you can and cannot do with a context once it is obtained.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5b0d65ae346953461c6709072b8e34d6894faf9a" translate="yes" xml:space="preserve">
          <source>Please see &lt;a href=&quot;Test::use::ok&quot;&gt;Test::use::ok&lt;/a&gt; for the full description.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d2e0a1481bb7e7875074f0faee7691f33bd29319" translate="yes" xml:space="preserve">
          <source>Please see &lt;a href=&quot;app/prove#PLUGINS&quot;&gt;PLUGINS in App::Prove&lt;/a&gt;.</source>
          <target state="translated">См. &lt;a href=&quot;app/prove#PLUGINS&quot;&gt;ПЛАГИНЫ в App :: Prove&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="989a39f3d25282b53431795da6fd8624c0e76184" translate="yes" xml:space="preserve">
          <source>Please see respective module documentation for further details.</source>
          <target state="translated">Подробнее см.документацию по соответствующим модулям.</target>
        </trans-unit>
        <trans-unit id="a30c68c43e99e52ddbaa4a59fdceb1dd51800da4" translate="yes" xml:space="preserve">
          <source>Please see the &quot;See Also&quot; references for a thorough explanation of how to correctly use language tags.</source>
          <target state="translated">Пожалуйста,ознакомьтесь со ссылками &quot;См.также&quot; для получения подробного объяснения о том,как правильно использовать языковые теги.</target>
        </trans-unit>
        <trans-unit id="5eb0ce8841e107e9f0e205e51d26edff17acc24e" translate="yes" xml:space="preserve">
          <source>Please see the &lt;a href=&quot;ExtUtils::Mksymlists&quot;&gt;ExtUtils::Mksymlists&lt;/a&gt; documentation for more information about the DL_FUNCS, DL_VARS and FUNCLIST attributes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="81fd05bcd06561fbf4acc7c17c9823d8c0d4b322" translate="yes" xml:space="preserve">
          <source>Please see the &lt;a href=&quot;mksymlists&quot;&gt;ExtUtils::Mksymlists&lt;/a&gt; documentation for more information about the DL_FUNCS, DL_VARS and FUNCLIST attributes.</source>
          <target state="translated">Пожалуйста, обратитесь к документации &lt;a href=&quot;mksymlists&quot;&gt;ExtUtils :: Mksymlists&lt;/a&gt; для получения дополнительной информации об атрибутах DL_FUNCS, DL_VARS и FUNCLIST.</target>
        </trans-unit>
        <trans-unit id="2c2e515c2102fd49c64f216a02d32d621813ef11" translate="yes" xml:space="preserve">
          <source>Please see the README file in distribution.</source>
          <target state="translated">Пожалуйста,ознакомьтесь с файлом README в дистрибутиве.</target>
        </trans-unit>
        <trans-unit id="628ecfdf942d40232f5db37e81fc0010f48d3a4b" translate="yes" xml:space="preserve">
          <source>Please see the documentation for &lt;code&gt;ExtUtils::Mksymlists&lt;/code&gt; for the details of what these parameters do.</source>
          <target state="translated">См. Документацию для &lt;code&gt;ExtUtils::Mksymlists&lt;/code&gt; для получения подробной информации о том, что делают эти параметры.</target>
        </trans-unit>
        <trans-unit id="f40ec33c90f01c635cb2192f1f99978f9b263bcc" translate="yes" xml:space="preserve">
          <source>Please see the documentation in &lt;a href=&quot;Math::BigInt&quot;&gt;Math::BigInt&lt;/a&gt; for further details.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5a5dc2d5751ee8cce246c66908a7b4ec4c62daf7" translate="yes" xml:space="preserve">
          <source>Please see the documentation in &lt;a href=&quot;bigint&quot;&gt;Math::BigInt&lt;/a&gt; for further details.</source>
          <target state="translated">Пожалуйста, смотрите документацию в &lt;a href=&quot;bigint&quot;&gt;Math :: BigInt&lt;/a&gt; для получения дополнительной информации.</target>
        </trans-unit>
        <trans-unit id="05004fbce196a7e0bf2a95059afe8e5ce82a91f3" translate="yes" xml:space="preserve">
          <source>Please see the documentation in &lt;a href=&quot;bigint&quot;&gt;Math::BigInt&lt;/a&gt;.</source>
          <target state="translated">См. Документацию в &lt;a href=&quot;bigint&quot;&gt;Math :: BigInt&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="e4b33a5a89e332b7c7e9bac36dcb4a5524d98fc6" translate="yes" xml:space="preserve">
          <source>Please see the file README in the Perl source distribution for details of the Perl license.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e0151ca432ab861ca7ca145a28b62d6ba2feb6f2" translate="yes" xml:space="preserve">
          <source>Please see the git repository for revision history.</source>
          <target state="translated">Историю ревизий смотрите в git-репозитории.</target>
        </trans-unit>
        <trans-unit id="8996e7dee5730a1986500bc16557a0d869c75480" translate="yes" xml:space="preserve">
          <source>Please see the section about &lt;a href=&quot;#ACCURACY-and-PRECISION&quot;&gt;&quot;ACCURACY and PRECISION&quot;&lt;/a&gt; for further details.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3073b87722e3ef7fb20a17229c346b64eb30ea5d" translate="yes" xml:space="preserve">
          <source>Please see the section about &lt;a href=&quot;#ACCURACY-and-PRECISION&quot;&gt;ACCURACY and PRECISION&lt;/a&gt; for further details.</source>
          <target state="translated">Пожалуйста, смотрите раздел &lt;a href=&quot;#ACCURACY-and-PRECISION&quot;&gt;ТОЧНОСТЬ и ТОЧНОСТЬ&lt;/a&gt; для получения дополнительной информации.</target>
        </trans-unit>
        <trans-unit id="221b6d6c2e3933bcc937bf432e64ccb1ebb6a488" translate="yes" xml:space="preserve">
          <source>Please send detailed descriptions of any problems and solutions that you may find to &amp;lt;</source>
          <target state="translated">Пожалуйста, отправьте подробное описание любых проблем и решений, которые вы можете найти, по адресу &amp;lt;</target>
        </trans-unit>
        <trans-unit id="ef68d6f3b0d5f9f183ddfa8c1c49597c47fc04d3" translate="yes" xml:space="preserve">
          <source>Please set your policy to one of the three values.</source>
          <target state="translated">Пожалуйста,установите вашу политику на одну из трех величин.</target>
        </trans-unit>
        <trans-unit id="e5456a0ea6c8660091c6463eca153f6f42857178" translate="yes" xml:space="preserve">
          <source>Please submit bug reports and patches to perlbug@perl.org.</source>
          <target state="translated">Пожалуйста,присылайте сообщения об ошибках и исправления по адресу perlbug@perl.org.</target>
        </trans-unit>
        <trans-unit id="1670aa48b29f76eeff5e31510ce8161f83f94922" translate="yes" xml:space="preserve">
          <source>Please submit bugs to the CPAN RT system at &lt;a href=&quot;http://rt.cpan.org/NoAuth/ReportBug.html?Queue=Time-Local&quot;&gt;http://rt.cpan.org/NoAuth/ReportBug.html?Queue=Time-Local&lt;/a&gt; or via email at bug-time-local@rt.cpan.org.</source>
          <target state="translated">Сообщайте об ошибках в систему CPAN RT по адресу &lt;a href=&quot;http://rt.cpan.org/NoAuth/ReportBug.html?Queue=Time-Local&quot;&gt;http://rt.cpan.org/NoAuth/ReportBug.html?Queue=Time-Local&lt;/a&gt; или по электронной почте bug-time-local@rt.cpan.org.</target>
        </trans-unit>
        <trans-unit id="027daf21662ca08eda2a7bd48d5158b216706744" translate="yes" xml:space="preserve">
          <source>Please try and supply some documentation if you add functions to the Perl core.</source>
          <target state="translated">Пожалуйста,попробуйте предоставить некоторую документацию,если вы добавляете функции в ядро Perl.</target>
        </trans-unit>
        <trans-unit id="f0a1af1032147376b66464947571d72cef968e98" translate="yes" xml:space="preserve">
          <source>Please use &lt;a href=&quot;https://github.com/perl-pod/pod-simple/issues/new&quot;&gt;https://github.com/perl-pod/pod-simple/issues/new&lt;/a&gt; to file a bug report.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f714e6d31a681125e28768dfea867640b126ff8d" translate="yes" xml:space="preserve">
          <source>Please, unless you're hacking the internals, or debugging weirdness, don't think about the UTF8 flag at all. That means that you very probably shouldn't use &lt;code&gt;is_utf8&lt;/code&gt; , &lt;code&gt;_utf8_on&lt;/code&gt; or &lt;code&gt;_utf8_off&lt;/code&gt; at all.</source>
          <target state="translated">Пожалуйста, если вы не взламываете внутреннее устройство или не отлаживаете странности, вообще не думайте о флаге UTF8. Это означает, что вам, скорее всего, вообще не следует использовать &lt;code&gt;is_utf8&lt;/code&gt; , &lt;code&gt;_utf8_on&lt;/code&gt; или &lt;code&gt;_utf8_off&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="1202c034ad5e532f9a82495be81ce4863a3e9945" translate="yes" xml:space="preserve">
          <source>Please, unless you're hacking the internals, or debugging weirdness, don't think about the UTF8 flag at all. That means that you very probably shouldn't use &lt;code&gt;is_utf8&lt;/code&gt;, &lt;code&gt;_utf8_on&lt;/code&gt; or &lt;code&gt;_utf8_off&lt;/code&gt; at all.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="34f29d232cd4bc7b00f36ebc0732290db154e722" translate="yes" xml:space="preserve">
          <source>Plug-in module for automatic expiration of memoized values</source>
          <target state="translated">Подключаемый модуль для автоматического истечения срока действия запомненных значений</target>
        </trans-unit>
        <trans-unit id="9edf1040d2bfeaaf802cb8b27a5c7e4a201ff06a" translate="yes" xml:space="preserve">
          <source>Pluggable runops</source>
          <target state="translated">Соединяемые руны</target>
        </trans-unit>
        <trans-unit id="5697803d10d7bf281aadc37a72c18ea36adecd64" translate="yes" xml:space="preserve">
          <source>Plugin support ***EXPERIMENTAL***</source>
          <target state="translated">Поддержка плагина ***ЭКСПЕРИМЕНТАЛ***</target>
        </trans-unit>
        <trans-unit id="ab2e26dd8b8868a3969cb3321e0c983c0d9d67d4" translate="yes" xml:space="preserve">
          <source>Plugins</source>
          <target state="translated">Plugins</target>
        </trans-unit>
        <trans-unit id="76ccce846df3b4c3ab1a6f65fc358f4fc11db43e" translate="yes" xml:space="preserve">
          <source>Plugins are objects that implement any of currently eight methods:</source>
          <target state="translated">Плагины-это объекты,которые реализуют любой из восьми методов:</target>
        </trans-unit>
        <trans-unit id="1de58880797e013d954730b62488aa821afcb4c8" translate="yes" xml:space="preserve">
          <source>Plugins can be loaded using the &lt;code&gt;-P&lt;i&gt;plugin&lt;/i&gt;&lt;/code&gt; syntax, eg:</source>
          <target state="translated">Плагины могут быть загружены с использованием синтаксиса &lt;code&gt;-P&lt;i&gt;plugin&lt;/i&gt;&lt;/code&gt; -P&lt;i&gt;&lt;/i&gt; , например:</target>
        </trans-unit>
        <trans-unit id="71494d8d1e8a55e1a56d948d21ff0111c0e58ab0" translate="yes" xml:space="preserve">
          <source>Pod Commands</source>
          <target state="translated">Команды Под</target>
        </trans-unit>
        <trans-unit id="3d5386faff713ed9d1073c9258ceccd049f3d049" translate="yes" xml:space="preserve">
          <source>Pod Definitions</source>
          <target state="translated">Определения Pod</target>
        </trans-unit>
        <trans-unit id="4ae454b70ee2c5e321bfbc301f9d36222768b986" translate="yes" xml:space="preserve">
          <source>Pod Formatting Codes</source>
          <target state="translated">Коды форматирования стручков</target>
        </trans-unit>
        <trans-unit id="47918185382f833db1e30bfcfbc001132c7cba90" translate="yes" xml:space="preserve">
          <source>Pod content is contained in &lt;b&gt;Pod blocks&lt;/b&gt;. A Pod block starts with a line that matches &lt;code&gt;&lt;a href=&quot;functions/m&quot;&gt;m/\A=[a-zA-Z]/&lt;/a&gt;&lt;/code&gt;, and continues up to the next line that matches &lt;code&gt;&lt;a href=&quot;functions/m&quot;&gt;m/\A=cut/&lt;/a&gt;&lt;/code&gt; or up to the end of the file if there is no &lt;code&gt;&lt;a href=&quot;functions/m&quot;&gt;m/\A=cut/&lt;/a&gt;&lt;/code&gt; line.</source>
          <target state="translated">Контент Pod содержится в &lt;b&gt;блоках Pod&lt;/b&gt; . Блок Pod начинается со строки, которая соответствует &lt;code&gt;&lt;a href=&quot;functions/m&quot;&gt;m/\A=[a-zA-Z]/&lt;/a&gt;&lt;/code&gt; , и продолжается до следующей строки, которая соответствует &lt;code&gt;&lt;a href=&quot;functions/m&quot;&gt;m/\A=cut/&lt;/a&gt;&lt;/code&gt; или до конца файла, если есть нет &lt;code&gt;&lt;a href=&quot;functions/m&quot;&gt;m/\A=cut/&lt;/a&gt;&lt;/code&gt; line.</target>
        </trans-unit>
        <trans-unit id="02c2e8126c233f706e9cd59a2533c9f50c98bc10" translate="yes" xml:space="preserve">
          <source>Pod content is contained in &lt;b&gt;Pod blocks&lt;/b&gt;. A Pod block starts with a line that matches &lt;code&gt;m/\A=[a-zA-Z]/&lt;/code&gt;, and continues up to the next line that matches &lt;code&gt;m/\A=cut/&lt;/code&gt; or up to the end of the file if there is no &lt;code&gt;m/\A=cut/&lt;/code&gt; line.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d6ddb3d03f7f589056100b138c86215515b2e453" translate="yes" xml:space="preserve">
          <source>Pod formatters</source>
          <target state="translated">Форматоры стручков</target>
        </trans-unit>
        <trans-unit id="d66a0d27d4c73edcb27d25e097424b0951626f0c" translate="yes" xml:space="preserve">
          <source>Pod formatters can use Pod::Simple to parse Pod documents and render them into plain text, HTML, or any number of other formats. Typically, such formatters will be subclasses of Pod::Simple, and so they will inherit its methods, like &lt;code&gt;parse_file&lt;/code&gt; .</source>
          <target state="translated">Модули форматирования Pod могут использовать Pod :: Simple для анализа документов Pod и преобразования их в обычный текст, HTML или любое количество других форматов. Как правило, такие средства форматирования являются подклассами Pod :: Simple и поэтому наследуют его методы, такие как &lt;code&gt;parse_file&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="746daa555fbd186d7d4c6882e67f7c32f9c561ea" translate="yes" xml:space="preserve">
          <source>Pod formatters can use Pod::Simple to parse Pod documents and render them into plain text, HTML, or any number of other formats. Typically, such formatters will be subclasses of Pod::Simple, and so they will inherit its methods, like &lt;code&gt;parse_file&lt;/code&gt;. But note that Pod::Simple doesn't understand and properly parse Perl itself, so if you have a file which contains a Perl program that has a multi-line quoted string which has lines that look like pod, Pod::Simple will treat them as pod. This can be avoided if the file makes these into indented here documents instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="44803dfacbed653092718af27817d667ae913774" translate="yes" xml:space="preserve">
          <source>Pod formatters should make reasonable efforts to keep words of Perl code from being broken across lines. For example, &quot;Foo::Bar&quot; in some formatting systems is seen as eligible for being broken across lines as &quot;Foo::&quot; newline &quot;Bar&quot; or even &quot;Foo::-&quot; newline &quot;Bar&quot;. This should be avoided where possible, either by disabling all line-breaking in mid-word, or by wrapping particular words with internal punctuation in &quot;don't break this across lines&quot; codes (which in some formats may not be a single code, but might be a matter of inserting non-breaking zero-width spaces between every pair of characters in a word.)</source>
          <target state="translated">Форматировщики Pod должны приложить разумные усилия,чтобы слова Perl-кода не ломались через строки.Например,в некоторых системах форматирования слово &quot;Foo::Bar&quot; может быть разбито на несколько строк,как &quot;Foo::&quot; newline &quot;Bar&quot; или даже &quot;Foo::-&quot; newline &quot;Bar&quot;.Этого следует избегать там,где это возможно,либо отключив все разрывы строк в середине слова,либо обернув отдельные слова с внутренней пунктуацией в коды &quot;не нарушайте это через строки&quot; (что в некоторых форматах может быть не единственным кодом,но может быть вопросом вставки неразрывных пробелов нулевой ширины между каждой парой символов в слове).</target>
        </trans-unit>
        <trans-unit id="d30f3aa798097994ab967bc039b02fb5704336d9" translate="yes" xml:space="preserve">
          <source>Pod formatters should tolerate lines in verbatim blocks that are of any length, even if that means having to break them (possibly several times, for very long lines) to avoid text running off the side of the page. Pod formatters may warn of such line-breaking. Such warnings are particularly appropriate for lines are over 100 characters long, which are usually not intentional.</source>
          <target state="translated">Форматировщики под должны терпеть строки в дословных блоках любой длины,даже если это означает необходимость разбивать их (возможно,несколько раз,для очень длинных строк),чтобы текст не бежал со стороны страницы.Форматировщики под могут предупредить о таком разрыве строк.Такие предупреждения особенно актуальны для строк длиной более 100 символов,которые,как правило,не являются преднамеренными.</target>
        </trans-unit>
        <trans-unit id="9e45409759a4a45d8ec12bca70ef02e438fd2271" translate="yes" xml:space="preserve">
          <source>Pod formatters, where feasible, are advised to avoid splitting short verbatim paragraphs (under twelve lines, say) across pages.</source>
          <target state="translated">Форматорам стручков,где это возможно,рекомендуется избегать разбиения коротких дословных абзацев (под двенадцатью строками,скажем)на разные страницы.</target>
        </trans-unit>
        <trans-unit id="6b57013c8fdcb737d69c938a9f663099a631cacb" translate="yes" xml:space="preserve">
          <source>Pod is a simple-to-use markup language used for writing documentation for Perl, Perl programs, and Perl modules.</source>
          <target state="translated">Pod-это простой в использовании язык разметки,используемый для написания документации для программ на Perl,Perl и модулей на Perl.</target>
        </trans-unit>
        <trans-unit id="0f6434053591d377adc29bce6462c4e2195b1c17" translate="yes" xml:space="preserve">
          <source>Pod is embedded in files, typically Perl source files, although you can write a file that's nothing but Pod.</source>
          <target state="translated">Pod встроен в файлы,обычно в исходные файлы Perl,хотя вы можете записать файл,который является ничем иным,как Pod.</target>
        </trans-unit>
        <trans-unit id="a317c10bc80719752bdbc59669224f21caf94cb6" translate="yes" xml:space="preserve">
          <source>Pod markup consists of three basic kinds of paragraphs: &lt;a href=&quot;#Ordinary-Paragraph&quot;&gt;ordinary&lt;/a&gt;, &lt;a href=&quot;#Verbatim-Paragraph&quot;&gt;verbatim&lt;/a&gt;, and &lt;a href=&quot;#Command-Paragraph&quot;&gt;command&lt;/a&gt;.</source>
          <target state="translated">Разметка Pod состоит из абзацев трех основных типов: &lt;a href=&quot;#Ordinary-Paragraph&quot;&gt;обычных&lt;/a&gt; , &lt;a href=&quot;#Verbatim-Paragraph&quot;&gt;дословных&lt;/a&gt; и &lt;a href=&quot;#Command-Paragraph&quot;&gt;командных&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="3729d4ffa4c690e28dd8755c4c73a027d3ed32e0" translate="yes" xml:space="preserve">
          <source>Pod now defaults to text.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e4100fa00f1a6ff1bc2589ecc13660c9f209d6e8" translate="yes" xml:space="preserve">
          <source>Pod parsers</source>
          <target state="translated">парсеры стручков</target>
        </trans-unit>
        <trans-unit id="826ed58998f5bc33125341c4f36a3a43574102c1" translate="yes" xml:space="preserve">
          <source>Pod parsers may also note additional attributes including:</source>
          <target state="translated">Парсеры стручки могут также отмечать дополнительные атрибуты,в том числе:</target>
        </trans-unit>
        <trans-unit id="78ce92125382b9b17f3f27b241298cd0d948dfa7" translate="yes" xml:space="preserve">
          <source>Pod parsers must also support the XHTML codes &quot;E&amp;lt;quot&amp;gt;&quot; for character 34 (doublequote, &quot;), &quot;E&amp;lt;amp&amp;gt;&quot; for character 38 (ampersand, &amp;amp;), and &quot;E&amp;lt;apos&amp;gt;&quot; for character 39 (apostrophe, ').</source>
          <target state="translated">Парсеры Pod также должны поддерживать коды XHTML &quot;E &amp;lt;quot&amp;gt;&quot; для символа 34 (двойные кавычки, &quot;),&quot; E &amp;lt;amp&amp;gt; &quot;для символа 38 (амперсанд, &amp;amp;) и&quot; E &amp;lt;apos&amp;gt; &quot;для символа 39 (апостроф , ').</target>
        </trans-unit>
        <trans-unit id="d16107ce92c757a467355de94f2c9937bd3ef851" translate="yes" xml:space="preserve">
          <source>Pod parsers must recognize</source>
          <target state="translated">парсеры стручкового анализатора должны распознать</target>
        </trans-unit>
        <trans-unit id="6e60f4cd73d8a373a60400a3a94686dfb7543ae7" translate="yes" xml:space="preserve">
          <source>Pod parsers must treat a line with only spaces and/or tabs on it as a &quot;blank line&quot; such as separates paragraphs. (Some older parsers recognized only two adjacent newlines as a &quot;blank line&quot; but would not recognize a newline, a space, and a newline, as a blank line. This is noncompliant behavior.)</source>
          <target state="translated">Парсеры стручки должны рассматривать строку с пробелами и/или закладками как &quot;пустую строку&quot;,например,разделяющие абзацы.(Некоторые старые парсеры распознают только две соседние новые строки как &quot;пустую строку&quot;,но не распознают новую строку,пробел и новую строку,как пустую строку.Это является несоответствующим поведением).</target>
        </trans-unit>
        <trans-unit id="0c42bd4ec3460b4dc34871ff713c3f41e0e29ace" translate="yes" xml:space="preserve">
          <source>Pod parsers should accept input lines that are of any length.</source>
          <target state="translated">Парсеры стручки должны принимать входные строки любой длины.</target>
        </trans-unit>
        <trans-unit id="1bf89edbc56bd1aa97ad7cab04b88498a0a483ec" translate="yes" xml:space="preserve">
          <source>Pod parsers should not, by default, try to coerce apostrophe (') and quote (&quot;) into smart quotes (little 9's, 66's, 99's, etc), nor try to turn backtick (`) into anything else but a single backtick character (distinct from an open quote character!), nor &quot;--&quot; into anything but two minus signs. They</source>
          <target state="translated">По умолчанию парсеры Pod не должны пытаться принуждать апостроф (')и кавычки (&quot;)к умным кавычкам (маленькие 9,66,99 и т.д.),а также не пытаться превратить обратную кавычку (`)ни в что другое,кроме одного символа обратной кавычки (отличного от символа открытой кавычки!),или &quot;--&quot; ни в что,кроме двух знаков минус.Они</target>
        </trans-unit>
        <trans-unit id="6e79c8f8c8738ed0d3f21bff581d4bef63a3b7d3" translate="yes" xml:space="preserve">
          <source>Pod parsers should understand all &quot;E&amp;lt;html&amp;gt;&quot; codes as defined in the entity declarations in the most recent XHTML specification at &lt;code&gt;www.W3.org&lt;/code&gt; . Pod parsers must understand at least the entities that define characters in the range 160-255 (Latin-1). Pod parsers, when faced with some unknown &quot;E&amp;lt;</source>
          <target state="translated">Парсеры Pod должны понимать все коды &amp;laquo;E &amp;lt;html&amp;gt;&amp;raquo;, как определено в объявлениях сущностей в самой последней спецификации XHTML на &lt;code&gt;www.W3.org&lt;/code&gt; . Парсеры Pod должны понимать как минимум сущности, которые определяют символы в диапазоне 160&amp;ndash;255 (Latin-1). Парсеры подов, когда сталкиваются с неизвестным &quot;E &amp;lt;</target>
        </trans-unit>
        <trans-unit id="16758347dcd3bd561280b8ac6b5b799804590e6a" translate="yes" xml:space="preserve">
          <source>Pod parsers should understand all &quot;E&amp;lt;html&amp;gt;&quot; codes as defined in the entity declarations in the most recent XHTML specification at &lt;code&gt;www.W3.org&lt;/code&gt;. Pod parsers must understand at least the entities that define characters in the range 160-255 (Latin-1). Pod parsers, when faced with some unknown &quot;E&amp;lt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="435533c0da449df0b3756321a9e1ae46d36e29f8" translate="yes" xml:space="preserve">
          <source>Pod parsers should, by default, expand tabs in verbatim paragraphs as they are processed, before passing them to the formatter or other processor. Parsers may also allow an option for overriding this.</source>
          <target state="translated">По умолчанию парсеры Pod должны по мере обработки разворачивать вкладки в дословных параграфах,прежде чем передавать их форматировщику или другому процессору.Парсеры могут также позволять переопределять это.</target>
        </trans-unit>
        <trans-unit id="3ca8470501fde76fe0175878b3907601deeb185a" translate="yes" xml:space="preserve">
          <source>Pod parsers should, by default, remove newlines from the end of ordinary and verbatim paragraphs before passing them to the formatter. For example, while the paragraph you're reading now could be considered, in Pod source, to end with (and contain) the newline(s) that end it, it should be processed as ending with (and containing) the period character that ends this sentence.</source>
          <target state="translated">По умолчанию парсеры Pod должны удалять новые строки из конца обычных и дословных параграфов,прежде чем передавать их форматировщику.Например,в то время как читаемый сейчас абзац может считаться в исходнике Pod заканчивающимся (и содержащим)новой строкой (строками),которая его оканчивает,он должен быть обработан как заканчивающийся (и содержащий)символом периода,который оканчивает это предложение.</target>
        </trans-unit>
        <trans-unit id="ed20dd657439280794de2dd1f166cc37caab82bd" translate="yes" xml:space="preserve">
          <source>Pod parsers, when processing a series of data paragraphs one after another (within a single region), should consider them to be one large data paragraph that happens to contain blank lines. So the content of the above &quot;=begin html&quot;...&quot;=end html&quot;</source>
          <target state="translated">При обработке серии параграфов данных друг за другом (в пределах одного региона)парсеры Pod должны рассматривать их как один большой параграф данных,который случайно содержит пустые строки.Поэтому содержание вышеприведенного &quot;=begin html&quot;...&quot;=end html&quot;.</target>
        </trans-unit>
        <trans-unit id="f0083162b22d1c665e8c416af71fd03dff278ffc" translate="yes" xml:space="preserve">
          <source>Pod parsers, when processing a series of verbatim paragraphs one after another, should consider them to be one large verbatim paragraph that happens to contain blank lines. I.e., these two lines, which have a blank line between them:</source>
          <target state="translated">Парсеры Pod при обработке серии дословных абзацев один за другим должны рассматривать их как один большой дословный абзац,который случайно содержит пустые строки.Т.е.эти две строки,между которыми есть пустая строка:</target>
        </trans-unit>
        <trans-unit id="b5f64a484d29376d6815265a1e55624e33ac0e03" translate="yes" xml:space="preserve">
          <source>Pod parsers, when reporting errors, should make some effort to report an approximate line number (&quot;Nested E&amp;lt;&amp;gt;'s in Paragraph #52, near line 633 of Thing/Foo.pm!&quot;), instead of merely noting the paragraph number (&quot;Nested E&amp;lt;&amp;gt;'s in Paragraph #52 of Thing/Foo.pm!&quot;). Where this is problematic, the paragraph number should at least be accompanied by an excerpt from the paragraph (&quot;Nested E&amp;lt;&amp;gt;'s in Paragraph #52 of Thing/Foo.pm, which begins 'Read/write accessor for the C&amp;lt;interest rate&amp;gt; attribute...'&quot;).</source>
          <target state="translated">Парсеры Pod при сообщении об ошибках должны приложить некоторые усилия, чтобы сообщить приблизительный номер строки (&amp;laquo;Вложенные E &amp;lt;&amp;gt; в абзаце № 52, рядом со строкой 633 Thing / Foo.pm!&amp;raquo;), Вместо того, чтобы просто отмечать номер абзаца. (&amp;laquo;Вложенные E &amp;lt;&amp;gt; в абзаце № 52 Thing / Foo.pm!&amp;raquo;). Если это проблематично, номер абзаца должен, по крайней мере, сопровождаться выдержкой из абзаца (&amp;laquo;Вложенные E &amp;lt;&amp;gt; в абзаце № 52 файла Thing / Foo.pm&amp;raquo;, который начинается с &amp;laquo;Аксессора чтения / записи для интересующего C &amp;lt; рейтинг&amp;gt; атрибут ... '&quot;).</target>
        </trans-unit>
        <trans-unit id="668dc3898e0866dd2110d298d9f0248ce827b86d" translate="yes" xml:space="preserve">
          <source>Pod processors must now treat &quot;text|&quot;-less links as follows:</source>
          <target state="translated">Теперь процессоры Pod должны обрабатывать &quot;text|&quot; без ссылок следующим образом:</target>
        </trans-unit>
        <trans-unit id="594a4383ca99a25d0a62e673cd217ea7d9ae8dcd" translate="yes" xml:space="preserve">
          <source>Pod processors must treat a &quot;=for [label] [content...]&quot; paragraph as meaning the same thing as a &quot;=begin [label]&quot; paragraph, content, and an &quot;=end [label]&quot; paragraph. (The parser may conflate these two constructs, or may leave them distinct, in the expectation that the formatter will nevertheless treat them the same.)</source>
          <target state="translated">Процессоры Pod должны рассматривать &quot;=для [метки][содержания...]&quot; как означающие то же самое,что и &quot;=начало [метки]&quot;,содержание,и &quot;=окончание [метки]&quot;.(Парсер может соединить эти две конструкции,или оставить их разными,в ожидании,что форматировщик,тем не менее,будет относиться к ним одинаково).</target>
        </trans-unit>
        <trans-unit id="6de2f56b65b8b60daa7959cb94ce9eb7617c07e8" translate="yes" xml:space="preserve">
          <source>Pod processors seeing such a contentless &quot;=over&quot; ... &quot;=back&quot; region, may ignore it, or may report it as an error.</source>
          <target state="translated">Процессоры стручки видят такое бесхитростное &quot;=over&quot; ...&quot;=back&quot;,могут игнорировать его или сообщать об ошибке.</target>
        </trans-unit>
        <trans-unit id="3a61b4f9c5145d423bbf4e3510d246b1bb3674c7" translate="yes" xml:space="preserve">
          <source>Pod processors should tolerate &quot;=item *&quot; / &quot;=item</source>
          <target state="translated">Процессоры Pod должны выдерживать &quot;=пункт *&quot;./&quot;=пункт</target>
        </trans-unit>
        <trans-unit id="9adfdecd54c38e1ba53caaf5b50318f5e88b69d6" translate="yes" xml:space="preserve">
          <source>Pod processors should tolerate empty &quot;=begin</source>
          <target state="translated">Процессоры Pod должны выдерживать пустое &quot;=начальное&quot; значение</target>
        </trans-unit>
        <trans-unit id="6ba827650f169b32c9dafe5b41a25b33124521f2" translate="yes" xml:space="preserve">
          <source>Pod text (i.e., possibly containing formatting codes) that's just not for normal formatting (e.g., may not be a normal-use paragraph, but might be for formatting as a footnote).</source>
          <target state="translated">Подтекст (т.е.,возможно,содержащий коды форматирования),который просто не предназначен для обычного форматирования (например,может не быть обычным пунктом,но может быть для форматирования в виде сноски).</target>
        </trans-unit>
        <trans-unit id="2783a719cd65c4f57c6fddc4f5f579afb17e9719" translate="yes" xml:space="preserve">
          <source>Pod-Parser is free software; you can redistribute it and/or modify it under the terms of the Artistic License distributed with Perl version 5.000 or (at your option) any later version. Please refer to the Artistic License that came with your Perl distribution for more details. If your version of Perl was not distributed under the terms of the Artistic License, than you may distribute PodParser under the same terms as Perl itself.</source>
          <target state="translated">Pod-Parser является свободным программным обеспечением;вы можете распространять его и/или изменять его на условиях Художественной лицензии,распространяемой с Perl версии 5.000 или (по вашему выбору)любой более поздней версии.Пожалуйста,ознакомьтесь с Художественной лицензией,поставляемой вместе с вашим дистрибутивом Perl,для получения более подробной информации.Если ваша версия Perl не была распространена на условиях Художественной лицензии,вы можете распространять PodParser на тех же условиях,что и сам Perl.</target>
        </trans-unit>
        <trans-unit id="1e0d75b84c30c843c8bfda065ca1ea8379066bee" translate="yes" xml:space="preserve">
          <source>Pod::Cache</source>
          <target state="translated">Pod::Cache</target>
        </trans-unit>
        <trans-unit id="b1da253840554c380163f270f69e5e71950e910f" translate="yes" xml:space="preserve">
          <source>Pod::Cache::Item</source>
          <target state="translated">Pod::Cache::Item</target>
        </trans-unit>
        <trans-unit id="4309bafc5148041a8cbecb4efa7c1ba20ab29cfb" translate="yes" xml:space="preserve">
          <source>Pod::Checker</source>
          <target state="translated">Pod::Checker</target>
        </trans-unit>
        <trans-unit id="27cda8ded60e07a80496a98d87fc154efc44a085" translate="yes" xml:space="preserve">
          <source>Pod::Checker - check pod documents for syntax errors</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a5093f45c4b5aaed940c739c6d883bfba267a005" translate="yes" xml:space="preserve">
          <source>Pod::Checker, podchecker() - check pod documents for syntax errors</source>
          <target state="translated">Pod::Checker,podchecker()-проверяет документы pod на синтаксические ошибки.</target>
        </trans-unit>
        <trans-unit id="b66220cfac7078b071d64dbaadef5e2df1a1682d" translate="yes" xml:space="preserve">
          <source>Pod::Escapes</source>
          <target state="translated">Pod::Escapes</target>
        </trans-unit>
        <trans-unit id="70a96b22865c78bae1b86e98f32189c8aaa2bb49" translate="yes" xml:space="preserve">
          <source>Pod::Escapes - for resolving Pod E&amp;lt;...&amp;gt; sequences</source>
          <target state="translated">Pod :: Escapes - для разрешения последовательностей Pod E &amp;lt;...&amp;gt;</target>
        </trans-unit>
        <trans-unit id="6defdf29847160bf19d64c9df0b01a83e7104754" translate="yes" xml:space="preserve">
          <source>Pod::Find</source>
          <target state="translated">Pod::Find</target>
        </trans-unit>
        <trans-unit id="808564a4fa3f783ef4d67e5d6df9a8f115d31c52" translate="yes" xml:space="preserve">
          <source>Pod::Find - find POD documents in directory trees</source>
          <target state="translated">Pod::Find-найти документы POD в деревьях каталогов</target>
        </trans-unit>
        <trans-unit id="dad87a793e174e3498e4bb970a27f08fc37c4ec4" translate="yes" xml:space="preserve">
          <source>Pod::Functions</source>
          <target state="translated">Pod::Functions</target>
        </trans-unit>
        <trans-unit id="5ae2aa0e6801f18d083fa71458d5eb312ff91cd1" translate="yes" xml:space="preserve">
          <source>Pod::Functions - Group Perl's functions a la perlfunc.pod</source>
          <target state="translated">Pod::Functions-Функции группы Perl a la perlfunc.pod</target>
        </trans-unit>
        <trans-unit id="155d59dfdac80d383af24b34deb797773121193e" translate="yes" xml:space="preserve">
          <source>Pod::Html</source>
          <target state="translated">Pod::Html</target>
        </trans-unit>
        <trans-unit id="6ce65cf1b1b1d8e5982cc14bc857d4e459129be4" translate="yes" xml:space="preserve">
          <source>Pod::Html - module to convert pod files to HTML</source>
          <target state="translated">Pod::Html-модуль для преобразования файлов pod в HTML</target>
        </trans-unit>
        <trans-unit id="5ed5257c3f06b8fdcae25020648334294f4275b0" translate="yes" xml:space="preserve">
          <source>Pod::Hyperlink</source>
          <target state="translated">Pod::Hyperlink</target>
        </trans-unit>
        <trans-unit id="dd2479ef40c118023069cffd4b8d4af17078456b" translate="yes" xml:space="preserve">
          <source>Pod::InputObjects</source>
          <target state="translated">Pod::InputObjects</target>
        </trans-unit>
        <trans-unit id="bfd22e221bc5d9239254ba01ea54c7e2a5450505" translate="yes" xml:space="preserve">
          <source>Pod::InputObjects - objects representing POD input paragraphs, commands, etc.</source>
          <target state="translated">Pod::InputObjects-объекты,представляющие POD входные параграфы,команды и т.д.</target>
        </trans-unit>
        <trans-unit id="1fd87a3ff91f7bce73657a26c6061dd462442c15" translate="yes" xml:space="preserve">
          <source>Pod::InteriorSequence-&amp;gt;*new()*</source>
          <target state="translated">Pod::InteriorSequence-&amp;gt;*new()*</target>
        </trans-unit>
        <trans-unit id="aa9152899b6499f1f28c2040e96614e6bafb5e59" translate="yes" xml:space="preserve">
          <source>Pod::InteriorSequence-&amp;gt;&lt;b&gt;new()&lt;/b&gt;</source>
          <target state="translated">Pod::InteriorSequence-&amp;gt;&lt;b&gt;new()&lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="910131799392bc52cef82e99a388fd9c65b4ae23" translate="yes" xml:space="preserve">
          <source>Pod::InteriorSequence::*DESTROY()*</source>
          <target state="translated">Pod::InteriorSequence::*DESTROY()*</target>
        </trans-unit>
        <trans-unit id="1f1f3b74ed98a3dd9e45e5bf6a582d0ed682382c" translate="yes" xml:space="preserve">
          <source>Pod::InteriorSequence::&lt;b&gt;DESTROY()&lt;/b&gt;</source>
          <target state="translated">Pod::InteriorSequence::&lt;b&gt;DESTROY()&lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="7583826bf22698054ad129c59e6b413946e80949" translate="yes" xml:space="preserve">
          <source>Pod::List</source>
          <target state="translated">Pod::List</target>
        </trans-unit>
        <trans-unit id="399a822bdd33d5589ccd5adac65bb8bcadff8e2b" translate="yes" xml:space="preserve">
          <source>Pod::Man</source>
          <target state="translated">Pod::Man</target>
        </trans-unit>
        <trans-unit id="5e62c421e1876f6d3d9c493879772552cb121e98" translate="yes" xml:space="preserve">
          <source>Pod::Man - Convert POD data to formatted *roff input</source>
          <target state="translated">Pod::Man-Преобразование данных POD в форматированные *рофф-входы</target>
        </trans-unit>
        <trans-unit id="b90fbc49b7a05d49287613663bd77efed96454b2" translate="yes" xml:space="preserve">
          <source>Pod::Man assumes that your *roff formatters have a fixed-width font named &lt;code&gt;CW&lt;/code&gt; . If yours is called something else (like &lt;code&gt;CR&lt;/code&gt; ), use the &lt;code&gt;fixed&lt;/code&gt; option to specify it. This generally only matters for troff output for printing. Similarly, you can set the fonts used for bold, italic, and bold italic fixed-width output.</source>
          <target state="translated">Pod :: Man предполагает, что ваши программы форматирования * roff имеют шрифт фиксированной ширины с именем &lt;code&gt;CW&lt;/code&gt; . Если ваш называется чем-то другим (например, &lt;code&gt;CR&lt;/code&gt; ), используйте &lt;code&gt;fixed&lt;/code&gt; параметр, чтобы указать его. Обычно это имеет значение только для вывода troff на печать. Точно так же вы можете установить шрифты, используемые для полужирного, курсивного и полужирного курсива при выводе фиксированной ширины.</target>
        </trans-unit>
        <trans-unit id="cb9d1748a81808e728009b92b1162054aaa06911" translate="yes" xml:space="preserve">
          <source>Pod::Man assumes that your *roff formatters have a fixed-width font named &lt;code&gt;CW&lt;/code&gt;. If yours is called something else (like &lt;code&gt;CR&lt;/code&gt;), use the &lt;code&gt;fixed&lt;/code&gt; option to specify it. This generally only matters for troff output for printing. Similarly, you can set the fonts used for bold, italic, and bold italic fixed-width output.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="87a26f0879ac57b4dc74e16802d7a975443066e4" translate="yes" xml:space="preserve">
          <source>Pod::Man doesn't handle font names longer than two characters. Neither do most &lt;b&gt;troff&lt;/b&gt; implementations, but GNU troff does as an extension. It would be nice to support as an option for those who want to use it.</source>
          <target state="translated">Pod :: Man не обрабатывает имена шрифтов, длина которых превышает два символа. Как и большинство реализаций &lt;b&gt;troff&lt;/b&gt; , но GNU troff делает это как расширение. Было бы неплохо поддержать как вариант для тех, кто хочет им пользоваться.</target>
        </trans-unit>
        <trans-unit id="ac7f587bee7ab6accabf7dabad0c45ac456a4a26" translate="yes" xml:space="preserve">
          <source>Pod::Man is a module to convert documentation in the POD format (the preferred language for documenting Perl) into *roff input using the man macro set. The resulting *roff code is suitable for display on a terminal using</source>
          <target state="translated">Pod::Man-это модуль для преобразования документации в формате POD (предпочтительный язык для документирования Perl)в *roff ввод с помощью набора макросов man.Полученный *рофф-код подходит для отображения на терминале с помощью следующих элементов</target>
        </trans-unit>
        <trans-unit id="3d124211073212f4a2d9f14b6de074e349d8b73d" translate="yes" xml:space="preserve">
          <source>Pod::Man is a module to convert documentation in the POD format (the preferred language for documenting Perl) into *roff input using the man macro set. The resulting *roff code is suitable for display on a terminal using &lt;a href=&quot;http://man.he.net/man1/nroff&quot;&gt;nroff(1)&lt;/a&gt;, normally via &lt;a href=&quot;http://man.he.net/man1/man&quot;&gt;man(1)&lt;/a&gt;, or printing using &lt;a href=&quot;http://man.he.net/man1/troff&quot;&gt;troff(1)&lt;/a&gt;. It is conventionally invoked using the driver script &lt;b&gt;pod2man&lt;/b&gt;, but it can also be used directly.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ad3445f4f79ce9259a8628ec68bc720cda5d5e62" translate="yes" xml:space="preserve">
          <source>Pod::Man is excessively slow.</source>
          <target state="translated">Человек слишком медленный.</target>
        </trans-unit>
        <trans-unit id="51823c2a78f4399e5665a442ee35e9c5bca035b6" translate="yes" xml:space="preserve">
          <source>Pod::Paragraph-&amp;gt;*new()*</source>
          <target state="translated">Pod::Paragraph-&amp;gt;*new()*</target>
        </trans-unit>
        <trans-unit id="7d19eb9c0ae5cf759f818151ef1964f55c63cf45" translate="yes" xml:space="preserve">
          <source>Pod::Paragraph-&amp;gt;&lt;b&gt;new()&lt;/b&gt;</source>
          <target state="translated">Pod::Paragraph-&amp;gt;&lt;b&gt;new()&lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="74702680baaf5527f7457048b890cf998a0bb577" translate="yes" xml:space="preserve">
          <source>Pod::ParseLink</source>
          <target state="translated">Pod::ParseLink</target>
        </trans-unit>
        <trans-unit id="cb542aa99fa734c9712efd42aa4abd5626202cf7" translate="yes" xml:space="preserve">
          <source>Pod::ParseLink - Parse an L&amp;lt;&amp;gt; formatting code in POD text</source>
          <target state="translated">Pod :: ParseLink - Анализирует код форматирования L &amp;lt;&amp;gt; в тексте POD</target>
        </trans-unit>
        <trans-unit id="40d45d7153ea7fd47a061f54ddf8f05276e6b0a8" translate="yes" xml:space="preserve">
          <source>Pod::ParseTree-&amp;gt;*new()*</source>
          <target state="translated">Pod::ParseTree-&amp;gt;*new()*</target>
        </trans-unit>
        <trans-unit id="c5b3a2fe463766f0c50d1925513a960e96c11a70" translate="yes" xml:space="preserve">
          <source>Pod::ParseTree-&amp;gt;&lt;b&gt;new()&lt;/b&gt;</source>
          <target state="translated">Pod::ParseTree-&amp;gt;&lt;b&gt;new()&lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="58e28f5f7a4d5a5122148dd16c2d1e71ce7bc46b" translate="yes" xml:space="preserve">
          <source>Pod::ParseTree::*DESTROY()*</source>
          <target state="translated">Pod::ParseTree::*DESTROY()*</target>
        </trans-unit>
        <trans-unit id="81662ddf3d094b6a72fa9f04c80b756682be36f9" translate="yes" xml:space="preserve">
          <source>Pod::ParseTree::&lt;b&gt;DESTROY()&lt;/b&gt;</source>
          <target state="translated">Pod::ParseTree::&lt;b&gt;DESTROY()&lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="ee80a8df78f91720393a41e76f1774b357695e04" translate="yes" xml:space="preserve">
          <source>Pod::ParseUtils</source>
          <target state="translated">Pod::ParseUtils</target>
        </trans-unit>
        <trans-unit id="bbc14d0ac8be47a43775571a03e2b17ca30027af" translate="yes" xml:space="preserve">
          <source>Pod::ParseUtils - helpers for POD parsing and conversion</source>
          <target state="translated">Pod::ParseUtils-помощники для разбора и преобразования POD</target>
        </trans-unit>
        <trans-unit id="0f85b7c22f11f515805110a0d85c8bbe81e1d272" translate="yes" xml:space="preserve">
          <source>Pod::Parser</source>
          <target state="translated">Pod::Parser</target>
        </trans-unit>
        <trans-unit id="e349932a04d5644a45ac3d6d00713d29777c5bd0" translate="yes" xml:space="preserve">
          <source>Pod::Parser - base class for creating POD filters and translators</source>
          <target state="translated">Pod::Parser-базовый класс для создания фильтров и трансляторов POD.</target>
        </trans-unit>
        <trans-unit id="87e59733686c14028fb5b5ae16afd20f13d498de" translate="yes" xml:space="preserve">
          <source>Pod::Perldoc</source>
          <target state="translated">Pod::Perldoc</target>
        </trans-unit>
        <trans-unit id="9d3a2f1ea446fa05938de94bfd8b37f662112ca1" translate="yes" xml:space="preserve">
          <source>Pod::Perldoc - Look up Perl documentation in Pod format.</source>
          <target state="translated">Pod::Perldoc-поиск документации на Perl в формате Pod.</target>
        </trans-unit>
        <trans-unit id="952ca16414e36da5649f023d81973c25e340d6f9" translate="yes" xml:space="preserve">
          <source>Pod::Perldoc::BaseTo</source>
          <target state="translated">Pod::Perldoc::BaseTo</target>
        </trans-unit>
        <trans-unit id="35bfe0dc1cd61b9db99276bb0f43f2c0c5ad18a2" translate="yes" xml:space="preserve">
          <source>Pod::Perldoc::BaseTo - Base for Pod::Perldoc formatters</source>
          <target state="translated">Pod::Perldoc::BaseTo-База для форматоров Pod::Perldoc</target>
        </trans-unit>
        <trans-unit id="b4063f396bd36a75310fe477b3233942b1f8e567" translate="yes" xml:space="preserve">
          <source>Pod::Perldoc::GetOptsOO</source>
          <target state="translated">Pod::Perldoc::GetOptsOO</target>
        </trans-unit>
        <trans-unit id="a32860ca9b02758a905681124e46d01c0cb1afa0" translate="yes" xml:space="preserve">
          <source>Pod::Perldoc::GetOptsOO - Customized option parser for Pod::Perldoc</source>
          <target state="translated">Pod::Perldoc::GetOptsOOO-Настраиваемый парсер опций для Pod::Perldoc</target>
        </trans-unit>
        <trans-unit id="9cd9c7c8bf140c8ef70c8bdc93de0b50d1c033a5" translate="yes" xml:space="preserve">
          <source>Pod::Perldoc::ToANSI</source>
          <target state="translated">Pod::Perldoc::ToANSI</target>
        </trans-unit>
        <trans-unit id="7657ee714db57c17e93a20e9955a2fbbbe328e50" translate="yes" xml:space="preserve">
          <source>Pod::Perldoc::ToANSI - render Pod with ANSI color escapes</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4db2d3912d225b5fb9794a822706dc8ac6dd251e" translate="yes" xml:space="preserve">
          <source>Pod::Perldoc::ToChecker</source>
          <target state="translated">Pod::Perldoc::ToChecker</target>
        </trans-unit>
        <trans-unit id="fb1bc67a07a358017c46696594ab3bb46f1cb4a2" translate="yes" xml:space="preserve">
          <source>Pod::Perldoc::ToChecker - let Perldoc check Pod for errors</source>
          <target state="translated">Pod::Perldoc::ToChecker-пусть Perldoc проверит Pod на ошибки.</target>
        </trans-unit>
        <trans-unit id="a1574ea07e4ca7da944a178adab1f198c77bb9c4" translate="yes" xml:space="preserve">
          <source>Pod::Perldoc::ToMan</source>
          <target state="translated">Pod::Perldoc::ToMan</target>
        </trans-unit>
        <trans-unit id="30ccb6b13c861e844f65ca3477dee08e5031e04b" translate="yes" xml:space="preserve">
          <source>Pod::Perldoc::ToMan - let Perldoc render Pod as man pages</source>
          <target state="translated">Pod::Perldoc::ToMan-let Perldoc render Pod as man pages</target>
        </trans-unit>
        <trans-unit id="e4528b7a26cc2f22afcb70063b8c90bfcec139cb" translate="yes" xml:space="preserve">
          <source>Pod::Perldoc::ToNroff</source>
          <target state="translated">Pod::Perldoc::ToNroff</target>
        </trans-unit>
        <trans-unit id="aad347f7e727638ba9cf62fde0284182ed3e5499" translate="yes" xml:space="preserve">
          <source>Pod::Perldoc::ToNroff - let Perldoc convert Pod to nroff</source>
          <target state="translated">Pod::Perldoc::ToNroff-пусть Perldoc превратит Pod в nroff.</target>
        </trans-unit>
        <trans-unit id="c74cfee58278b9d7e2d985e281b40bac7cf67fe1" translate="yes" xml:space="preserve">
          <source>Pod::Perldoc::ToPod</source>
          <target state="translated">Pod::Perldoc::ToPod</target>
        </trans-unit>
        <trans-unit id="d74169b37abf471a8016b67eb6b64f1d9c9504cb" translate="yes" xml:space="preserve">
          <source>Pod::Perldoc::ToPod - let Perldoc render Pod as ... Pod!</source>
          <target state="translated">Under::Perldoc::ToPod-let Perldoc render Under как...Под!</target>
        </trans-unit>
        <trans-unit id="f92919a3efdae5160bab598ae79998a12eaeb9d9" translate="yes" xml:space="preserve">
          <source>Pod::Perldoc::ToRtf</source>
          <target state="translated">Pod::Perldoc::ToRtf</target>
        </trans-unit>
        <trans-unit id="0397b052f308b568ed8ea3c3f278e9880b59064b" translate="yes" xml:space="preserve">
          <source>Pod::Perldoc::ToRtf - let Perldoc render Pod as RTF</source>
          <target state="translated">Pod::Perldoc::ToRtf-пусть Perldoc визуализирует Pod как RTF</target>
        </trans-unit>
        <trans-unit id="fd1e41f569b50e20cb00459a2e024d1d48daa4ae" translate="yes" xml:space="preserve">
          <source>Pod::Perldoc::ToTerm</source>
          <target state="translated">Pod::Perldoc::ToTerm</target>
        </trans-unit>
        <trans-unit id="9fd6d1a0399a01712bf45f2452104d56dd37b0b7" translate="yes" xml:space="preserve">
          <source>Pod::Perldoc::ToTerm - render Pod with terminal escapes</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c1c7e677057bffb1949a495159f761c28d093073" translate="yes" xml:space="preserve">
          <source>Pod::Perldoc::ToText</source>
          <target state="translated">Pod::Perldoc::ToText</target>
        </trans-unit>
        <trans-unit id="1b76ad0504a574b95327f3837e47de7fc1023f81" translate="yes" xml:space="preserve">
          <source>Pod::Perldoc::ToText - let Perldoc render Pod as plaintext</source>
          <target state="translated">Pod::Perldoc::ToText-пусть Perldoc визуализирует Pod как простой текст.</target>
        </trans-unit>
        <trans-unit id="44a2311f8a968a637bebf75641a7ba7c7bea0e77" translate="yes" xml:space="preserve">
          <source>Pod::Perldoc::ToTk</source>
          <target state="translated">Pod::Perldoc::ToTk</target>
        </trans-unit>
        <trans-unit id="ce6206e971d4052af6b94fba7e16c592c58263c8" translate="yes" xml:space="preserve">
          <source>Pod::Perldoc::ToTk - let Perldoc use Tk::Pod to render Pod</source>
          <target state="translated">Pod::Perldoc::ToTk-пусть Perldoc использует Tk::Pod для рендеринга Pod</target>
        </trans-unit>
        <trans-unit id="cd1e43a8f3efd6bddd767fd169879bd7e8783197" translate="yes" xml:space="preserve">
          <source>Pod::Perldoc::ToXml</source>
          <target state="translated">Pod::Perldoc::ToXml</target>
        </trans-unit>
        <trans-unit id="eb2c349f8bc3477a2154a9f78f20889a0cd5e99e" translate="yes" xml:space="preserve">
          <source>Pod::Perldoc::ToXml - let Perldoc render Pod as XML</source>
          <target state="translated">Pod::Perldoc::ToXml-пусть Perldoc рендерит Pod как XML</target>
        </trans-unit>
        <trans-unit id="944eb1a064749ff64ccfc3ec1500e3e6fc76949a" translate="yes" xml:space="preserve">
          <source>Pod::PlainText</source>
          <target state="translated">Pod::PlainText</target>
        </trans-unit>
        <trans-unit id="5cc69f416528304166ca8b06a7aa0165df6da3fc" translate="yes" xml:space="preserve">
          <source>Pod::PlainText - Convert POD data to formatted ASCII text</source>
          <target state="translated">Pod::PlainText-преобразование данных POD в форматированный ASCII текст</target>
        </trans-unit>
        <trans-unit id="946a0512ab5f99c773ae3db3dc5b34c4ce07ed9b" translate="yes" xml:space="preserve">
          <source>Pod::PlainText is a module that can convert documentation in the POD format (the preferred language for documenting Perl) into formatted ASCII. It uses no special formatting controls or codes whatsoever, and its output is therefore suitable for nearly any device.</source>
          <target state="translated">Pod::PlainText-это модуль,который может конвертировать документацию в формат POD (предпочтительный язык для документирования Perl)в форматированный ASCII.Он не использует никаких специальных элементов управления форматированием или кодов,и поэтому его вывод подходит практически для любого устройства.</target>
        </trans-unit>
        <trans-unit id="8ed6eb484633051ee80e6a561ff9dcdff2c845ec" translate="yes" xml:space="preserve">
          <source>Pod::Select</source>
          <target state="translated">Pod::Select</target>
        </trans-unit>
        <trans-unit id="14904b6c97faa949c076532da064781f2d55c6b6" translate="yes" xml:space="preserve">
          <source>Pod::Select, podselect() - extract selected sections of POD from input</source>
          <target state="translated">Pod::Select,podselect()-извлечение выбранных секций POD из входных данных.</target>
        </trans-unit>
        <trans-unit id="661be2b89917f8caa0e44c582550ee749e115412" translate="yes" xml:space="preserve">
          <source>Pod::Simpele::XHTML was created by Allison Randal &amp;lt;allison@perl.org&amp;gt;.</source>
          <target state="translated">Pod :: Simpele :: XHTML был создан Эллисон Рэндал &amp;lt;allison@perl.org&amp;gt;.</target>
        </trans-unit>
        <trans-unit id="d6a12e7ef9128476299731ac0108ac1f784f3a4d" translate="yes" xml:space="preserve">
          <source>Pod::Simple</source>
          <target state="translated">Pod::Simple</target>
        </trans-unit>
        <trans-unit id="5996780debc4d561a6d61c26d2810b23db42afb5" translate="yes" xml:space="preserve">
          <source>Pod::Simple - framework for parsing Pod</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6d11b0239af7ff1a19852fc395f1f5f5a3a35c0c" translate="yes" xml:space="preserve">
          <source>Pod::Simple is a Perl library for parsing text in the Pod (&quot;plain old documentation&quot;) markup language that is typically used for writing documentation for Perl and for Perl modules. The Pod format is explained &lt;a href=&quot;../perlpod&quot;&gt;perlpod&lt;/a&gt;; the most common formatter is called &lt;code&gt;perldoc&lt;/code&gt; .</source>
          <target state="translated">Pod :: Simple - это библиотека Perl для анализа текста на языке разметки Pod (&amp;laquo;старая простая документация&amp;raquo;), который обычно используется для написания документации для Perl и модулей Perl. Формат Pod объясняется &lt;a href=&quot;../perlpod&quot;&gt;perlpod&lt;/a&gt; ; наиболее распространенное &lt;code&gt;perldoc&lt;/code&gt; форматирования называется perldoc .</target>
        </trans-unit>
        <trans-unit id="d5137b4a66b1a3ab70161fd3fed20b8efa15f0b7" translate="yes" xml:space="preserve">
          <source>Pod::Simple is a Perl library for parsing text in the Pod (&quot;plain old documentation&quot;) markup language that is typically used for writing documentation for Perl and for Perl modules. The Pod format is explained in &lt;a href=&quot;perlpod&quot;&gt;perlpod&lt;/a&gt;; the most common formatter is called &lt;code&gt;perldoc&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="540c209eeff967303f473e2a9f8cc439bebb7a9a" translate="yes" xml:space="preserve">
          <source>Pod::Simple is maintained by:</source>
          <target state="translated">Под::Простой поддерживается:</target>
        </trans-unit>
        <trans-unit id="bb05ccf22951145f967d6e477a3802aa35df7d1b" translate="yes" xml:space="preserve">
          <source>Pod::Simple provides a lot of methods that aren't generally interesting to the end user of an existing Pod formatter, but some of which you might find useful in writing a Pod formatter. They are listed below. The first several methods (the accept_* methods) are for declaring the capabilities of your parser, notably what &lt;code&gt;=for &lt;i&gt;targetname&lt;/i&gt;&lt;/code&gt; sections it's interested in, what extra N&amp;lt;...&amp;gt; codes it accepts beyond the ones described in the</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1804f7888eed7ad55ddcaa1547cb97407e48d6c0" translate="yes" xml:space="preserve">
          <source>Pod::Simple uses this class for representing the value of the &quot;section&quot; attribute of &quot;L&quot; start-element events. Most applications can just use the normal stringification of objects of this class; they stringify to just the text content of the section, such as &quot;foo&quot; for &lt;code&gt;L&amp;lt;Stuff/foo&amp;gt;&lt;/code&gt; , and &quot;bar&quot; for &lt;code&gt;L&amp;lt;Stuff/bI&amp;lt;ar&amp;gt;&amp;gt;&lt;/code&gt; .</source>
          <target state="translated">Pod :: Simple использует этот класс для представления значения атрибута &quot;section&quot; событий начального элемента &quot;L&quot;. Большинство приложений могут просто использовать обычную строковую привязку объектов этого класса; они преобразуются в текстовое содержимое раздела, например &amp;laquo;foo&amp;raquo; для &lt;code&gt;L&amp;lt;Stuff/foo&amp;gt;&lt;/code&gt; и &amp;laquo;bar&amp;raquo; для &lt;code&gt;L&amp;lt;Stuff/bI&amp;lt;ar&amp;gt;&amp;gt;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="3042d36d43941ed5b64500dc2cd178778f09f598" translate="yes" xml:space="preserve">
          <source>Pod::Simple uses this class for representing the value of the &quot;section&quot; attribute of &quot;L&quot; start-element events. Most applications can just use the normal stringification of objects of this class; they stringify to just the text content of the section, such as &quot;foo&quot; for &lt;code&gt;L&amp;lt;Stuff/foo&amp;gt;&lt;/code&gt;, and &quot;bar&quot; for &lt;code&gt;L&amp;lt;Stuff/bI&amp;lt;ar&amp;gt;&amp;gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dc75eedd949380ed057546f8903efcf7ffa0476d" translate="yes" xml:space="preserve">
          <source>Pod::Simple was created by Sean M. Burke &amp;lt;sburke@cpan.org&amp;gt; with code borrowed from Marek Rouchal's &lt;a href=&quot;../find&quot;&gt;Pod::Find&lt;/a&gt;, which in turn heavily borrowed code from Nick Ing-Simmons' &lt;code&gt;PodToHtml&lt;/code&gt; .</source>
          <target state="translated">Pod :: Simple был создан Шоном М. Берк &amp;lt;sburke@cpan.org&amp;gt; с использованием кода, заимствованного из &lt;a href=&quot;../find&quot;&gt;Pod :: Find&lt;/a&gt; Марека Роучаля , который, в свою очередь, в значительной степени заимствовал код из &lt;code&gt;PodToHtml&lt;/code&gt; Ника Инг-Симмонса .</target>
        </trans-unit>
        <trans-unit id="046013a100ec04c3c2d20b96d7505ecd3be590e8" translate="yes" xml:space="preserve">
          <source>Pod::Simple was created by Sean M. Burke &amp;lt;sburke@cpan.org&amp;gt; with code borrowed from Marek Rouchal's &lt;a href=&quot;Pod::Find&quot;&gt;Pod::Find&lt;/a&gt;, which in turn heavily borrowed code from Nick Ing-Simmons' &lt;code&gt;PodToHtml&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8185c68a0339f127d3dbf1b4ad4adf9a512efe5f" translate="yes" xml:space="preserve">
          <source>Pod::Simple was created by Sean M. Burke &amp;lt;sburke@cpan.org&amp;gt;. But don't bother him, he's retired.</source>
          <target state="translated">Pod :: Simple был создан Шоном М. Берк &amp;lt;sburke@cpan.org&amp;gt;. Но не беспокойте его, он на пенсии.</target>
        </trans-unit>
        <trans-unit id="d80b5e8d9939c2b2cdcf8caadd6b9ea76e6a4a21" translate="yes" xml:space="preserve">
          <source>Pod::Simple::Checker</source>
          <target state="translated">Pod::Simple::Checker</target>
        </trans-unit>
        <trans-unit id="55590025c27353d8a373860de047b5dce37dba23" translate="yes" xml:space="preserve">
          <source>Pod::Simple::Checker -- check the Pod syntax of a document</source>
          <target state="translated">Pod::Простой::Проверка --проверьте синтаксис Pod документа.</target>
        </trans-unit>
        <trans-unit id="b74f1729aad6ae1a22d920544a38e42cdf81b6d7" translate="yes" xml:space="preserve">
          <source>Pod::Simple::Debug</source>
          <target state="translated">Pod::Simple::Debug</target>
        </trans-unit>
        <trans-unit id="fa67e2158a0a94760ae209d78cc2c60c328cfd2a" translate="yes" xml:space="preserve">
          <source>Pod::Simple::Debug -- put Pod::Simple into trace/debug mode</source>
          <target state="translated">Pod::Simple::Debug --поместите Pod::Simple в режим трассировки/отладки</target>
        </trans-unit>
        <trans-unit id="c186101b5cf38096df66f1dfcd5544f7e2c30c6c" translate="yes" xml:space="preserve">
          <source>Pod::Simple::DumpAsText</source>
          <target state="translated">Pod::Simple::DumpAsText</target>
        </trans-unit>
        <trans-unit id="c3c292397a980ed71b52c2ff0898634dee25e619" translate="yes" xml:space="preserve">
          <source>Pod::Simple::DumpAsText -- dump Pod-parsing events as text</source>
          <target state="translated">Pod::Простой::DumpAsText --дамп События Pod-parsing в виде текста</target>
        </trans-unit>
        <trans-unit id="cc35fcc6b860e53e9fba03174336a15b24d3e20e" translate="yes" xml:space="preserve">
          <source>Pod::Simple::DumpAsXML</source>
          <target state="translated">Pod::Simple::DumpAsXML</target>
        </trans-unit>
        <trans-unit id="373b728991f6282ba763bd2a10793d147d39c8ce" translate="yes" xml:space="preserve">
          <source>Pod::Simple::DumpAsXML -- turn Pod into XML</source>
          <target state="translated">Pod::Простой::DumpAsXML --превратить Pod в XML</target>
        </trans-unit>
        <trans-unit id="9f6b85c1362b8bcf343570ad01e881211977b269" translate="yes" xml:space="preserve">
          <source>Pod::Simple::DumpAsXML inherits methods from &lt;a href=&quot;../simple&quot;&gt;Pod::Simple&lt;/a&gt;.</source>
          <target state="translated">Pod :: Simple :: DumpAsXML наследует методы от &lt;a href=&quot;../simple&quot;&gt;Pod :: Simple&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="02b3f87b1932c51400c8b115e4f1ba0a1b176a04" translate="yes" xml:space="preserve">
          <source>Pod::Simple::DumpAsXML inherits methods from &lt;a href=&quot;Pod::Simple&quot;&gt;Pod::Simple&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a26787ab4cbd9b5d37d67ecda1faa021db04bcda" translate="yes" xml:space="preserve">
          <source>Pod::Simple::DumpAsXML is a subclass of &lt;a href=&quot;../simple&quot;&gt;Pod::Simple&lt;/a&gt; that parses Pod and turns it into indented and wrapped XML. This class is of interest to people writing Pod formatters based on Pod::Simple.</source>
          <target state="translated">Pod :: Simple :: DumpAsXML - это подкласс &lt;a href=&quot;../simple&quot;&gt;Pod :: Simple,&lt;/a&gt; который анализирует Pod и превращает его в XML с отступом и оболочкой. Этот класс представляет интерес для людей, пишущих программы форматирования Pod на основе Pod :: Simple.</target>
        </trans-unit>
        <trans-unit id="3bc6aef0753a906554fe52605727fcd96d63c2f8" translate="yes" xml:space="preserve">
          <source>Pod::Simple::DumpAsXML is a subclass of &lt;a href=&quot;Pod::Simple&quot;&gt;Pod::Simple&lt;/a&gt; that parses Pod and turns it into indented and wrapped XML. This class is of interest to people writing Pod formatters based on Pod::Simple.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="18e3cad548b1d58d72a35d1b97df012592abca6a" translate="yes" xml:space="preserve">
          <source>Pod::Simple::HTML</source>
          <target state="translated">Pod::Simple::HTML</target>
        </trans-unit>
        <trans-unit id="9ba84d76002e656d6a841be7c0fa1ddaf7a15278" translate="yes" xml:space="preserve">
          <source>Pod::Simple::HTML - convert Pod to HTML</source>
          <target state="translated">Pod::Простой::HTML-преобразование Pod в HTML</target>
        </trans-unit>
        <trans-unit id="4f616c51b55e2caed067f512efd6be765988729c" translate="yes" xml:space="preserve">
          <source>Pod::Simple::HTMLBatch</source>
          <target state="translated">Pod::Simple::HTMLBatch</target>
        </trans-unit>
        <trans-unit id="b714f30d97375e99cc3dc025fe21efb3928ffb30" translate="yes" xml:space="preserve">
          <source>Pod::Simple::HTMLBatch - convert several Pod files to several HTML files</source>
          <target state="translated">Pod::Простой::HTMLBatch-конвертируйте несколько файлов Pod в несколько HTML-файлов</target>
        </trans-unit>
        <trans-unit id="ffc09ddc7418e3e9cf3efb9e134eaaaeff9f17d4" translate="yes" xml:space="preserve">
          <source>Pod::Simple::JustPod</source>
          <target state="translated">Pod::Simple::JustPod</target>
        </trans-unit>
        <trans-unit id="b431e9b8673f61ccfc1e9efe125ce7dfc3efc755" translate="yes" xml:space="preserve">
          <source>Pod::Simple::JustPod -- just the Pod, the whole Pod, and nothing but the Pod</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eddaf844c75beb11321838c4f34da6339343ef39" translate="yes" xml:space="preserve">
          <source>Pod::Simple::JustPod was developed by John SJ Anderson &lt;code&gt;genehack@genehack.org&lt;/code&gt;, with contributions from Karl Williamson &lt;code&gt;khw@cpan.org&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c7d427af968fe5b5f7cabfdd1b7609d966dc62cc" translate="yes" xml:space="preserve">
          <source>Pod::Simple::LinkSection</source>
          <target state="translated">Pod::Simple::LinkSection</target>
        </trans-unit>
        <trans-unit id="565e4c6e11a593b50f5257b1a4aee37099620372" translate="yes" xml:space="preserve">
          <source>Pod::Simple::LinkSection -- represent &quot;section&quot; attributes of L codes</source>
          <target state="translated">Pod::Простой::LinkSection --представлять атрибуты &quot;раздела&quot; кодов L.</target>
        </trans-unit>
        <trans-unit id="04192c711189c3d3745e9766bf472b32950a1f73" translate="yes" xml:space="preserve">
          <source>Pod::Simple::Methody</source>
          <target state="translated">Pod::Simple::Methody</target>
        </trans-unit>
        <trans-unit id="0ca575b26347f441076a6fd1a824c79b25cf2619" translate="yes" xml:space="preserve">
          <source>Pod::Simple::Methody -- turn Pod::Simple events into method calls</source>
          <target state="translated">Pod::Простые::Метод --превратить Pod::Простые события в вызовы методов</target>
        </trans-unit>
        <trans-unit id="7aa02a3f7b5768f2a6ec877904dc7ab387a3061a" translate="yes" xml:space="preserve">
          <source>Pod::Simple::PullParser</source>
          <target state="translated">Pod::Simple::PullParser</target>
        </trans-unit>
        <trans-unit id="ea0c112c9214628c826e97034dffc164b33f6a82" translate="yes" xml:space="preserve">
          <source>Pod::Simple::PullParser -- a pull-parser interface to parsing Pod</source>
          <target state="translated">Pod::Простой::PullParser --вытаскивающий интерфейс для парсинга Pod</target>
        </trans-unit>
        <trans-unit id="070ea3cf235fa0c5ea455a6107c6b1c28503ff41" translate="yes" xml:space="preserve">
          <source>Pod::Simple::PullParserEndToken</source>
          <target state="translated">Pod::Simple::PullParserEndToken</target>
        </trans-unit>
        <trans-unit id="0e20ea7a70dab49b1f0f66e63f1a06a2f448b097" translate="yes" xml:space="preserve">
          <source>Pod::Simple::PullParserEndToken -- end-tokens from Pod::Simple::PullParser</source>
          <target state="translated">Pod::Простой::PullParserEndToken --end-tokens из Pod::Простой::PullParser</target>
        </trans-unit>
        <trans-unit id="11aea837de023672a7a9d2518ea0e8e11a95f00a" translate="yes" xml:space="preserve">
          <source>Pod::Simple::PullParserStartToken</source>
          <target state="translated">Pod::Simple::PullParserStartToken</target>
        </trans-unit>
        <trans-unit id="d6244e584441e2b0f907fb0ffecde2defcc17cae" translate="yes" xml:space="preserve">
          <source>Pod::Simple::PullParserStartToken -- start-tokens from Pod::Simple::PullParser</source>
          <target state="translated">Pod::Простой::PullParserStartToken --start-tokens от Pod::Простой::PullParser</target>
        </trans-unit>
        <trans-unit id="41b32f7393c26878ea6e6764691f6ab8d4cfed16" translate="yes" xml:space="preserve">
          <source>Pod::Simple::PullParserTextToken</source>
          <target state="translated">Pod::Simple::PullParserTextToken</target>
        </trans-unit>
        <trans-unit id="85a00c2aa32007d196ff05d09a358b591b60a9d7" translate="yes" xml:space="preserve">
          <source>Pod::Simple::PullParserTextToken -- text-tokens from Pod::Simple::PullParser</source>
          <target state="translated">Pod::Простой::PullParserTextToken --text-tokens из Pod::Простой::PullParser</target>
        </trans-unit>
        <trans-unit id="af99c7c32db60fbc39ffa01aa36158222378886f" translate="yes" xml:space="preserve">
          <source>Pod::Simple::PullParserToken</source>
          <target state="translated">Pod::Simple::PullParserToken</target>
        </trans-unit>
        <trans-unit id="83ed709c868d2cc4eff657e59deb01ec607246dd" translate="yes" xml:space="preserve">
          <source>Pod::Simple::PullParserToken -- tokens from Pod::Simple::PullParser</source>
          <target state="translated">Pod::Simple::PullParserToken --жетоны от Pod::Simple::PullParser</target>
        </trans-unit>
        <trans-unit id="cd8b2814ae13bcab0bbe442896010091755dc3df" translate="yes" xml:space="preserve">
          <source>Pod::Simple::RTF</source>
          <target state="translated">Pod::Simple::RTF</target>
        </trans-unit>
        <trans-unit id="b3241001e4eb1949e4d0740b263d2fb59490fadf" translate="yes" xml:space="preserve">
          <source>Pod::Simple::RTF -- format Pod as RTF</source>
          <target state="translated">Pod::Простой::RTF --формат Pod как RTF</target>
        </trans-unit>
        <trans-unit id="7cec88f41732497c431990231ff60d0d97239c5a" translate="yes" xml:space="preserve">
          <source>Pod::Simple::Search</source>
          <target state="translated">Pod::Simple::Search</target>
        </trans-unit>
        <trans-unit id="e1ea8fdb67de63159764e718db4fbefbb27c467f" translate="yes" xml:space="preserve">
          <source>Pod::Simple::Search - find POD documents in directory trees</source>
          <target state="translated">Pod::Простой::Поиск-найти документы POD в деревьях каталогов</target>
        </trans-unit>
        <trans-unit id="62021a054d37a5d7fcf8c80130c7b291785a01cf" translate="yes" xml:space="preserve">
          <source>Pod::Simple::Search will by default internally make an assumption based on the underlying filesystem where the class file is found whether it is case insensitive or not.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4bec063b1fe4a8b7088da5083ba7437146419ca6" translate="yes" xml:space="preserve">
          <source>Pod::Simple::SimpleTree</source>
          <target state="translated">Pod::Simple::SimpleTree</target>
        </trans-unit>
        <trans-unit id="eea909e0d762cb819c8aa8330fdb9ba6a9be4d16" translate="yes" xml:space="preserve">
          <source>Pod::Simple::SimpleTree -- parse Pod into a simple parse tree</source>
          <target state="translated">Pod::Simple::SimpleTree --разобрать Pod на простое дерево разбора</target>
        </trans-unit>
        <trans-unit id="5da91d8d6431a8c01e6c864a85dab3bf9cec1f3e" translate="yes" xml:space="preserve">
          <source>Pod::Simple::Subclassing</source>
          <target state="translated">Pod::Simple::Subclassing</target>
        </trans-unit>
        <trans-unit id="7f952b92af53e1429b73f0a13edd27e756189634" translate="yes" xml:space="preserve">
          <source>Pod::Simple::Subclassing -- write a formatter as a Pod::Simple subclass</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b18ba6877611e38d5ebeca357ca45de50b3d8f5a" translate="yes" xml:space="preserve">
          <source>Pod::Simple::Text</source>
          <target state="translated">Pod::Simple::Text</target>
        </trans-unit>
        <trans-unit id="753e56ce7ac1a58ad889fddf470a50b96539c6da" translate="yes" xml:space="preserve">
          <source>Pod::Simple::Text -- format Pod as plaintext</source>
          <target state="translated">Pod::Простой::Текст --формат Pod в виде простого текста</target>
        </trans-unit>
        <trans-unit id="8d8c6d10cf65bae9e13056ddeb8c6d2c2a890ff6" translate="yes" xml:space="preserve">
          <source>Pod::Simple::TextContent</source>
          <target state="translated">Pod::Simple::TextContent</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
