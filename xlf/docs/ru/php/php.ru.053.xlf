<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ru" datatype="htmlbody" original="php">
    <body>
      <group id="php">
        <trans-unit id="c8ac1529c746c5acacd4bbe9718ee145d9275734" translate="yes" xml:space="preserve">
          <source>To configure event base to use, or avoid specific backend &lt;a href=&quot;class.eventconfig&quot;&gt;EventConfig&lt;/a&gt; class can be used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5dc5d7523ad2d0413890e80a87bfdb0d4a07c996" translate="yes" xml:space="preserve">
          <source>To copy the nodes attributes &lt;code&gt;deep&lt;/code&gt; needs to be set to &lt;strong&gt;&lt;code&gt;TRUE&lt;/code&gt;&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="29e1b0609a33a0b858b5282c01918fcb4a45c55c" translate="yes" xml:space="preserve">
          <source>To create a new &lt;a href=&quot;language.types.object&quot;&gt;object&lt;/a&gt;, use the &lt;em&gt;new&lt;/em&gt; statement to instantiate a class:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e0432b3ba01e3812c25ed3d54657d756135d33c0" translate="yes" xml:space="preserve">
          <source>To create an instance of a class, the &lt;em&gt;new&lt;/em&gt; keyword must be used. An object will always be created unless the object has a &lt;a href=&quot;language.oop5.decon&quot;&gt;constructor&lt;/a&gt; defined that throws an &lt;a href=&quot;language.exceptions&quot;&gt;exception&lt;/a&gt; on error. Classes should be defined before instantiation (and in some cases this is a requirement).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3dbdedd232572de69c94debd1a741d25ec375b16" translate="yes" xml:space="preserve">
          <source>To determine the current state of autocommit use the SQL command &lt;em&gt;SELECT @@autocommit&lt;/em&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0ef2fb41ca48cd139396da22df2f9dd86437eae8" translate="yes" xml:space="preserve">
          <source>To enable persistent connection, the &lt;a href=&quot;https://secure.php.net/manual/en/pgsql.configuration.php#ini.pgsql.allow-persistent&quot;&gt;pgsql.allow_persistent&lt;/a&gt;&lt;var&gt;php.ini&lt;/var&gt; directive must be set to &quot;On&quot; (which is the default). The maximum number of persistent connection can be defined with the &lt;a href=&quot;https://secure.php.net/manual/en/pgsql.configuration.php#ini.pgsql.max-persistent&quot;&gt;pgsql.max_persistent&lt;/a&gt;&lt;var&gt;php.ini&lt;/var&gt; directive (defaults to -1 for no limit). The total number of connections can be set with the &lt;a href=&quot;https://secure.php.net/manual/en/pgsql.configuration.php#ini.pgsql.max-links&quot;&gt;pgsql.max_links&lt;/a&gt;&lt;var&gt;php.ini&lt;/var&gt; directive.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d4f9788ea65e1984e7cb091b3f2c013d7f350007" translate="yes" xml:space="preserve">
          <source>To enable strict mode, the &lt;a href=&quot;control-structures.declare&quot;&gt;&lt;em&gt;declare&lt;/em&gt;&lt;/a&gt; statement is used with the &lt;em&gt;strict_types&lt;/em&gt; declaration:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="30e3869dc879389f73f27559f1876ba96780bb7b" translate="yes" xml:space="preserve">
          <source>To ensure alignment, any characters appearing before or after the number in the formatted output such as currency or sign symbols are padded as necessary with space characters to make their positive and negative formats an equal length.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bfbd97761c475a3497bb511aa26a9d0338989db2" translate="yes" xml:space="preserve">
          <source>To exclude a parameter from signature verification, set its value to &lt;strong&gt;&lt;code&gt;NULL&lt;/code&gt;&lt;/strong&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f9d524d7717bb067b57781812e2bc0ad5a2961b3" translate="yes" xml:space="preserve">
          <source>To explicitly convert a value to &lt;a href=&quot;language.types.boolean&quot;&gt;boolean&lt;/a&gt;, use the &lt;em&gt;(bool)&lt;/em&gt; or &lt;em&gt;(boolean)&lt;/em&gt; casts. However, in most cases the cast is unnecessary, since a value will be automatically converted if an operator, function or control structure requires a &lt;a href=&quot;language.types.boolean&quot;&gt;boolean&lt;/a&gt; argument.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1468b3f5c602367892f4d4c8d5027dd4787a6ece" translate="yes" xml:space="preserve">
          <source>To explicitly convert a value to &lt;a href=&quot;language.types.integer&quot;&gt;integer&lt;/a&gt;, use either the &lt;em&gt;(int)&lt;/em&gt; or &lt;em&gt;(integer)&lt;/em&gt; casts. However, in most cases the cast is not needed, since a value will be automatically converted if an operator, function or control structure requires an &lt;a href=&quot;language.types.integer&quot;&gt;integer&lt;/a&gt; argument. A value can also be converted to &lt;a href=&quot;language.types.integer&quot;&gt;integer&lt;/a&gt; with the &lt;a href=&quot;function.intval&quot;&gt;intval()&lt;/a&gt; function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="74335288ba069a610e07e172fc12a93bc45e411d" translate="yes" xml:space="preserve">
          <source>To export all the functions, pass a special constant &lt;strong&gt;&lt;code&gt;SOAP_FUNCTIONS_ALL&lt;/code&gt;&lt;/strong&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="60785d16aaa5635b3876e77f9e09896bef6255d9" translate="yes" xml:space="preserve">
          <source>To export one function, pass the function name into this parameter as a string.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5a4916586d27e803491c065e6114f5778570e081" translate="yes" xml:space="preserve">
          <source>To export several functions, pass an array of function names.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="731eb546ef06220efe24336953f8395579b920fc" translate="yes" xml:space="preserve">
          <source>To fetch only the unique values of a single column from the result set, bitwise-OR &lt;strong&gt;&lt;code&gt;PDO::FETCH_COLUMN&lt;/code&gt;&lt;/strong&gt; with &lt;strong&gt;&lt;code&gt;PDO::FETCH_UNIQUE&lt;/code&gt;&lt;/strong&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="59ceb3c4e18c1e5960a34f6b0c14c7a82afb6ca6" translate="yes" xml:space="preserve">
          <source>To force a variable to be evaluated as a certain type, see the section on &lt;a href=&quot;language.types.type-juggling#language.types.typecasting&quot;&gt;Type casting&lt;/a&gt;. To change the type of a variable, see the &lt;a href=&quot;function.settype&quot;&gt;settype()&lt;/a&gt; function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7188263dc3762302c47ebebd0b9ca855004e6470" translate="yes" xml:space="preserve">
          <source>To forcibly convert a variable to a certain type, either &lt;a href=&quot;language.types.type-juggling#language.types.typecasting&quot;&gt;cast&lt;/a&gt; the variable or use the &lt;a href=&quot;function.settype&quot;&gt;settype()&lt;/a&gt; function on it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="877b6d7bb8e1e28321c2bf3bd606fb3433f00a81" translate="yes" xml:space="preserve">
          <source>To format dates in other languages, you should use the &lt;a href=&quot;function.setlocale&quot;&gt;setlocale()&lt;/a&gt; and &lt;a href=&quot;function.strftime&quot;&gt;strftime()&lt;/a&gt; functions instead of &lt;strong&gt;date()&lt;/strong&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fc8a3bc5ffb448f5a454ae0e28105ccda24a2020" translate="yes" xml:space="preserve">
          <source>To generate a custom credits page, you may want to use the &lt;code&gt;flag&lt;/code&gt; parameter.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="35fd1704daa6638c190aefa5218b66f033c1d29d" translate="yes" xml:space="preserve">
          <source>To generate a timestamp from a string representation of the date, you may be able to use &lt;a href=&quot;function.strtotime&quot;&gt;strtotime()&lt;/a&gt;. Additionally, some databases have functions to convert their date formats into timestamps (such as MySQL's &lt;a href=&quot;http://dev.mysql.com/doc/mysql/en/date-and-time-functions.html&quot;&gt;&amp;raquo; UNIX_TIMESTAMP&lt;/a&gt; function).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="95842ae81c59f545be58e75c59cda3ad091161ae" translate="yes" xml:space="preserve">
          <source>To get a human-readable representation of a type for debugging, use the &lt;a href=&quot;function.gettype&quot;&gt;gettype()&lt;/a&gt; function. To check for a certain type, do &lt;em&gt;not&lt;/em&gt; use &lt;a href=&quot;function.gettype&quot;&gt;gettype()&lt;/a&gt;, but rather the &lt;em&gt;is_type&lt;/em&gt; functions. Some examples:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d3b4a44b8613f315a29c9027e7123a04a87500c6" translate="yes" xml:space="preserve">
          <source>To get the current &lt;em&gt;QUERY_STRING&lt;/em&gt;, you may use the variable &lt;var&gt;&lt;var&gt;&lt;a href=&quot;reserved.variables.server&quot;&gt;$_SERVER['QUERY_STRING']&lt;/a&gt;&lt;/var&gt;&lt;/var&gt;. Also, you may want to read the section on &lt;a href=&quot;language.variables.external&quot;&gt;variables from external sources&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="101da06c310c37335ec89c9a79ff67aa19c8e653" translate="yes" xml:space="preserve">
          <source>To get the output of the executed command, be sure to set and use the &lt;code&gt;output&lt;/code&gt; parameter.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c70d66a6d5f861e1b6736b790ff2ecb10c17203b" translate="yes" xml:space="preserve">
          <source>To get the value of a &lt;em&gt;SERIAL&lt;/em&gt; field in an inserted row, it is necessary to use the PostgreSQL &lt;em&gt;CURRVAL&lt;/em&gt; function, naming the sequence whose last value is required. If the name of the sequence is unknown, the &lt;em&gt;pg_get_serial_sequence&lt;/em&gt; PostgreSQL 8.0 function is necessary.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1710519d7961d20562b69ad9d5801fd8c587879a" translate="yes" xml:space="preserve">
          <source>To have an argument to a function always passed by reference, prepend an ampersand (&amp;amp;) to the argument name in the function definition:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="09f89f2940fe40130d1a6cc3078c6809b40fa95c" translate="yes" xml:space="preserve">
          <source>To implement a filter, you need to define a class as an extension of &lt;a href=&quot;class.php-user-filter&quot;&gt;php_user_filter&lt;/a&gt; with a number of member functions. When performing read/write operations on the stream to which your filter is attached, PHP will pass the data through your filter (and any other filters attached to that stream) so that the data may be modified as desired. You must implement the methods exactly as described in &lt;a href=&quot;class.php-user-filter&quot;&gt;php_user_filter&lt;/a&gt; - doing otherwise will lead to undefined behaviour.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f4034febeaa90bbf806ac22fd373a6fdb7ee85f8" translate="yes" xml:space="preserve">
          <source>To implement an interface, the &lt;em&gt;implements&lt;/em&gt; operator is used. All methods in the interface must be implemented within a class; failure to do so will result in a fatal error. Classes may implement more than one interface if desired by separating each interface with a comma.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fbdec036391c7af379b1e9ebbe6fa889b63abe8a" translate="yes" xml:space="preserve">
          <source>To include literal characters in &lt;code&gt;format&lt;/code&gt;, you have to escape them with a backslash (&lt;em&gt;\&lt;/em&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ba29c02f31606a27fa05c32c383cf45c71051405" translate="yes" xml:space="preserve">
          <source>To introspect function parameters, first create an instance of the &lt;a href=&quot;class.reflectionfunction&quot;&gt;ReflectionFunction&lt;/a&gt; or &lt;a href=&quot;class.reflectionmethod&quot;&gt;ReflectionMethod&lt;/a&gt; classes and then use their &lt;a href=&quot;reflectionfunctionabstract.getparameters&quot;&gt;ReflectionFunctionAbstract::getParameters()&lt;/a&gt; method to retrieve an array of parameters.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e4e2bef70ff3d0d97a9aabb29fc93f8131d8b538" translate="yes" xml:space="preserve">
          <source>To kill a running query you can use the SQL command &lt;em&gt;KILL QUERY processid&lt;/em&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d68cff6bdc3405fe86211b666880440adfe625b9" translate="yes" xml:space="preserve">
          <source>To make the serialized string into a PHP value again, use &lt;a href=&quot;function.unserialize&quot;&gt;unserialize()&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4336a4821906ec7871c303ddc57eb60910e88251" translate="yes" xml:space="preserve">
          <source>To move to a position before the end-of-file, you need to pass a negative value in &lt;code&gt;offset&lt;/code&gt; and set &lt;code&gt;whence&lt;/code&gt; to &lt;strong&gt;&lt;code&gt;SEEK_END&lt;/code&gt;&lt;/strong&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8ddec63d923253abe8f8c189d540c58ac808088c" translate="yes" xml:space="preserve">
          <source>To parse a date which may be delimited with slashes, dots, or hyphens:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e1501d30d0640cb64b9402393b3c52992a63a031" translate="yes" xml:space="preserve">
          <source>To pass the returned reference to another function expecting a reference you can use this syntax:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e38aa79cb94108c457b9a14ef721381a98ef578d" translate="yes" xml:space="preserve">
          <source>To perform a case insensitive sort, force the sorting order to be determined by a lowercase copy of the original array.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f99469b045ad6e2fd3ffc5377bfe853ee8a3dab3" translate="yes" xml:space="preserve">
          <source>To prepare a statement with another query use function &lt;a href=&quot;mysqli-stmt.prepare&quot;&gt;mysqli_stmt_prepare()&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cab4b572ab390bc389548a826e240aaa23d59a13" translate="yes" xml:space="preserve">
          <source>To prevent this kind of remote code execution vulnerability the &lt;a href=&quot;function.preg-replace-callback&quot;&gt;preg_replace_callback()&lt;/a&gt; function should be used instead:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="961c91d3d46aa4f99f80c470732738eda51e6db3" translate="yes" xml:space="preserve">
          <source>To properly handle BLOB fields which may contain NUL characters, use &lt;a href=&quot;sqlite3stmt.bindparam&quot;&gt;SQLite3Stmt::bindParam()&lt;/a&gt; instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b81ce130c0cd70f97aa95a2580f25ffc0690a550" translate="yes" xml:space="preserve">
          <source>To resolve DNS names(asyncronously), use &lt;a href=&quot;eventbufferevent.connecthost&quot;&gt;EventBufferEvent::connectHost()&lt;/a&gt; method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7d6a56ec866568f8609099f597cdf7ae981c0480" translate="yes" xml:space="preserve">
          <source>To resolve naming conflicts between Traits used in the same class, the &lt;em&gt;insteadof&lt;/em&gt; operator needs to be used to choose exactly one of the conflicting methods.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="95df0e70b581cf7bdb9deb70df0fc2cd2683a06c" translate="yes" xml:space="preserve">
          <source>To retrieve the resultset from the first query you can use &lt;a href=&quot;mysqli.use-result&quot;&gt;mysqli_use_result()&lt;/a&gt; or &lt;a href=&quot;mysqli.store-result&quot;&gt;mysqli_store_result()&lt;/a&gt;. All subsequent query results can be processed using &lt;a href=&quot;mysqli.more-results&quot;&gt;mysqli_more_results()&lt;/a&gt; and &lt;a href=&quot;mysqli.next-result&quot;&gt;mysqli_next_result()&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f20db8114e802801132c25ae3e05850336c35465" translate="yes" xml:space="preserve">
          <source>To return a reference from a function, use the reference operator &amp;amp; in both the function declaration and when assigning the returned value to a variable:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5cb7ea7a85b37a87d9513e67adaaf25ab1fc1f8d" translate="yes" xml:space="preserve">
          <source>To return an array consisting of all values of a single column from the result set, specify &lt;strong&gt;&lt;code&gt;PDO::FETCH_COLUMN&lt;/code&gt;&lt;/strong&gt;. You can specify which column you want with the &lt;code&gt;fetch_argument&lt;/code&gt; parameter.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2f9c66834a84c8bd8f7e29e40876766e84bed8e7" translate="yes" xml:space="preserve">
          <source>To return an associative array grouped by the values of a specified column, bitwise-OR &lt;strong&gt;&lt;code&gt;PDO::FETCH_COLUMN&lt;/code&gt;&lt;/strong&gt; with &lt;strong&gt;&lt;code&gt;PDO::FETCH_GROUP&lt;/code&gt;&lt;/strong&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="88df95f23496ed69ec6ee123ef214c1ea164cf39" translate="yes" xml:space="preserve">
          <source>To run the sub-request, all buffers are terminated and flushed to the browser, pending headers are sent too.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6e13c95fcb7a4a468a62d297f1651a914ba4b790" translate="yes" xml:space="preserve">
          <source>To seek to the beginning of a row, pass an offset value of zero.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="83a6d78fa958ffca68787c157f4dd2a59595fa11" translate="yes" xml:space="preserve">
          <source>To set a timeout for reading/writing data over the socket, use the &lt;a href=&quot;function.stream-set-timeout&quot;&gt;stream_set_timeout()&lt;/a&gt;, as the &lt;code&gt;timeout&lt;/code&gt; only applies while making connecting the socket.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="079028c58e9903c8ff943ebb1f7946ce6449cbed" translate="yes" xml:space="preserve">
          <source>To skip this argument in order to provide the &lt;code&gt;quality&lt;/code&gt; parameter, use &lt;strong&gt;&lt;code&gt;NULL&lt;/code&gt;&lt;/strong&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="391b1c501e04aff943a1826030508009d58748f2" translate="yes" xml:space="preserve">
          <source>To specify a &lt;a href=&quot;language.types.boolean&quot;&gt;boolean&lt;/a&gt; literal, use the constants &lt;strong&gt;&lt;code&gt;TRUE&lt;/code&gt;&lt;/strong&gt; or &lt;strong&gt;&lt;code&gt;FALSE&lt;/code&gt;&lt;/strong&gt;. Both are case-insensitive.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="743b6c85f3746dacf357083aa8008fcf58ac276c" translate="yes" xml:space="preserve">
          <source>To specify a literal single quote, escape it with a backslash (&lt;em&gt;\&lt;/em&gt;). To specify a literal backslash, double it (&lt;em&gt;\\&lt;/em&gt;). All other instances of backslash will be treated as a literal backslash: this means that the other escape sequences you might be used to, such as &lt;em&gt;\r&lt;/em&gt; or &lt;em&gt;\n&lt;/em&gt;, will be output literally as specified rather than having any special meaning.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="44ab4a523f1a3c7fa36ed487bab2234b464d1469" translate="yes" xml:space="preserve">
          <source>To specify a type declaration, the type name should be added before the parameter name. The declaration can be made to accept &lt;strong&gt;&lt;code&gt;NULL&lt;/code&gt;&lt;/strong&gt; values if the default value of the parameter is set to &lt;strong&gt;&lt;code&gt;NULL&lt;/code&gt;&lt;/strong&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="53c7e3db50e11b0ebab6802074cb001771f1b8bd" translate="yes" xml:space="preserve">
          <source>To split off the first four fields from a line from &lt;var&gt;/etc/passwd&lt;/var&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="570cdebd262258dbb79149eae012a8fb2ca0a2a3" translate="yes" xml:space="preserve">
          <source>To step through the result more than once, you can call &lt;strong&gt;odbc_fetch_row()&lt;/strong&gt; with &lt;code&gt;row_number&lt;/code&gt; 1, and then continue doing &lt;strong&gt;odbc_fetch_row()&lt;/strong&gt; without &lt;code&gt;row_number&lt;/code&gt; to review the result. If a driver doesn't support fetching rows by number, the &lt;code&gt;row_number&lt;/code&gt; parameter is ignored.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4dfa2eaa917e695a0e91fc64be2423d9e9203fbd" translate="yes" xml:space="preserve">
          <source>To stop a running query you should use the SQL command &lt;em&gt;KILL QUERY processid&lt;/em&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cd36f289936ce097e8ec5df4635c01f159844176" translate="yes" xml:space="preserve">
          <source>To string.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="633bed1319bc7ac29703e3cfb9b06b0b50c870f8" translate="yes" xml:space="preserve">
          <source>To summarise, always test that your JSON decoder can handle the output you generate from &lt;strong&gt;json_encode()&lt;/strong&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7ef9752f31ac2921f406cbf5fa7f81e7016c5a1c" translate="yes" xml:space="preserve">
          <source>To support enumeration of qualifiers, owners, and table types, the following special semantics for the &lt;code&gt;qualifier&lt;/code&gt;, &lt;code&gt;owner&lt;/code&gt;, &lt;code&gt;name&lt;/code&gt;, and &lt;code&gt;table_type&lt;/code&gt; are available:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5300c5afd69982cee109388d64aa33245f4bdbf4" translate="yes" xml:space="preserve">
          <source>To take it a step further, the &lt;a href=&quot;class.iterator&quot;&gt;Iterator&lt;/a&gt;&lt;a href=&quot;language.oop5.interfaces&quot;&gt;interface&lt;/a&gt; may be implemented. This allows the object to dictate how it will be iterated and what values will be available on each iteration.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="87a570a6b2d2bd17e68444bdb055abcc8409efcb" translate="yes" xml:space="preserve">
          <source>To test any of the examples in this section, cut and paste the examples and insert the following line to see what's going on:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f761dc2deaf2f35a10bf2ac41721b6de8b73ce4c" translate="yes" xml:space="preserve">
          <source>To test any of the examples in this section, use the &lt;a href=&quot;function.var-dump&quot;&gt;var_dump()&lt;/a&gt; function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="37dd14f270279497902ef301914723eb3636432d" translate="yes" xml:space="preserve">
          <source>To test floating point values for equality, an upper bound on the relative error due to rounding is used. This value is known as the machine epsilon, or unit roundoff, and is the smallest acceptable difference in calculations.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d494d3156acfdf8347fc869ae62556eb0e44229a" translate="yes" xml:space="preserve">
          <source>To test if a variable is a number or a numeric string (such as form input, which is always a string), you must use &lt;a href=&quot;function.is-numeric&quot;&gt;is_numeric()&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="14626ef224f7effcb129d55d6404bf7888d57b4d" translate="yes" xml:space="preserve">
          <source>To use a named session, call &lt;a href=&quot;function.session-name&quot;&gt;session_name()&lt;/a&gt; before calling &lt;strong&gt;session_start()&lt;/strong&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ea55c9338eb5cab0609d8766488d251cb00e6ad6" translate="yes" xml:space="preserve">
          <source>To use cookie-based sessions, &lt;strong&gt;session_start()&lt;/strong&gt; must be called before outputing anything to the browser.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="506d9c486cf5324dfda4db14a009eb77f0335c3b" translate="yes" xml:space="preserve">
          <source>To use octal notation, precede the number with a &lt;em&gt;0&lt;/em&gt; (zero). To use hexadecimal notation precede the number with &lt;em&gt;0x&lt;/em&gt;. To use binary notation precede the number with &lt;em&gt;0b&lt;/em&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="94e23895638dee5f20fa1a35b53d7ebcde03e3a5" translate="yes" xml:space="preserve">
          <source>To use the &lt;strong&gt;mysqli_debug()&lt;/strong&gt; function you must compile the MySQL client library to support debugging.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eebb28952bef7256417ffd2d3a1d057fd76db55a" translate="yes" xml:space="preserve">
          <source>To use the SoapServer in WSDL mode, pass the URI of a WSDL file. Otherwise, pass &lt;strong&gt;&lt;code&gt;NULL&lt;/code&gt;&lt;/strong&gt; and set the &lt;em&gt;uri&lt;/em&gt; option to the target namespace for the server.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="160bb74e6eddfa528016f62425b2c6a70a671805" translate="yes" xml:space="preserve">
          <source>To use the extended base introduced in PHP 5.3.2, then PHP must be compiled against GMP 4.2.0 or greater.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="008d3f0fe0e9fb3bb26f77ae28508b5f0b2c7905" translate="yes" xml:space="preserve">
          <source>To use the large object interface, it is necessary to enclose it within a transaction block.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="39974bd1398dcd681e7922f2836faff5b7d3bea8" translate="yes" xml:space="preserve">
          <source>To use the returned reference, you must use reference assigment:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="25a1090f35c4f8bdbc57e0f82e7a6055bbb25087" translate="yes" xml:space="preserve">
          <source>To use this class, first set the save handler you wish to expose using &lt;a href=&quot;https://secure.php.net/manual/en/session.configuration.php#ini.session.save-handler&quot;&gt;session.save_handler&lt;/a&gt; and then pass an instance of &lt;strong&gt;SessionHandler&lt;/strong&gt; or one extending it to &lt;a href=&quot;function.session-set-save-handler&quot;&gt;session_set_save_handler()&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1be04f616bd4b3b58f23935accf2aef45aa54e5f" translate="yes" xml:space="preserve">
          <source>To use this function on a Windows platform you need MySQL client library version 4.1.11 or above (for MySQL 5.0 you need 5.0.6 or above).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5f858d4f51cafbff1cf634a666de4c2faefe85d0" translate="yes" xml:space="preserve">
          <source>Toggles autocommit behaviour.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7783c68ec15b220be892a27d79e487f40a8ecfe3" translate="yes" xml:space="preserve">
          <source>Toggles indentation on or off.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0c8bdf6b370d1a312eb6820161397309d486c6dc" translate="yes" xml:space="preserve">
          <source>Tokenizer</source>
          <target state="translated">Tokenizer</target>
        </trans-unit>
        <trans-unit id="0e6c9046147cf21d787bdfd45fd8e45239523585" translate="yes" xml:space="preserve">
          <source>Tokenizer &amp;rarr;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="76634006b4b7ad5baa86afb0b8a3ea566e880c5e" translate="yes" xml:space="preserve">
          <source>Total number of days as a result of a &lt;a href=&quot;datetime.diff&quot;&gt;DateTime::diff()&lt;/a&gt; or &lt;em&gt;(unknown)&lt;/em&gt; otherwise</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="29e3eaf3c30cc8379558dec34631899137fb5885" translate="yes" xml:space="preserve">
          <source>Total number of found documents matching the query</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3e853cee63a143e430b60a18381812daf3926110" translate="yes" xml:space="preserve">
          <source>Total number of matches found and retrieved (depends on your settings)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0476a0df28eff563d0a46ecc4967099f6c23358c" translate="yes" xml:space="preserve">
          <source>Total number of points (vertices).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4fcf4a5a7bbe3f75ec1a2a5489363b595dad9c3a" translate="yes" xml:space="preserve">
          <source>Total number of vertices, which must be at least 3.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1b7d282250f492051a210ad69d32180da710307e" translate="yes" xml:space="preserve">
          <source>Trader &amp;rarr;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="43e242b9c4a9fd2dc19c4cc914bd6d430981478c" translate="yes" xml:space="preserve">
          <source>Traditional Chinese, mainly used in Taiwan.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4571d68802fc9ba4e0df9877413d157576e02596" translate="yes" xml:space="preserve">
          <source>Traditional assertions (PHP 5 and 7)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d1a616085a1a99a58e14bafaa350abc6783a3160" translate="yes" xml:space="preserve">
          <source>Traits</source>
          <target state="translated">Traits</target>
        </trans-unit>
        <trans-unit id="7e71e8aff312e2462d0983aceb0e1bca0825e5cf" translate="yes" xml:space="preserve">
          <source>Traits &amp;rarr;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="067c05934025d04f3b1919d94e7975514bff1462" translate="yes" xml:space="preserve">
          <source>Traits Composed from Traits</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="607b3539d160039c61c6e7e353c4e6f29c83639e" translate="yes" xml:space="preserve">
          <source>Traits are a mechanism for code reuse in single inheritance languages such as PHP. A Trait is intended to reduce some limitations of single inheritance by enabling a developer to reuse sets of methods freely in several independent classes living in different class hierarchies. The semantics of the combination of Traits and classes is defined in a way which reduces complexity, and avoids the typical problems associated with multiple inheritance and Mixins.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f74502d679ae3eb1d8da3321b3853c7b0dba84ad" translate="yes" xml:space="preserve">
          <source>Traits can also define properties.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e9e01670a19f2ef87f1dbbb75fec06d5db80b38c" translate="yes" xml:space="preserve">
          <source>Traits can define both static members and static methods.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dbea4020479e51ae3ee33d793bf03466c27e9bbd" translate="yes" xml:space="preserve">
          <source>Traits support the use of abstract methods in order to impose requirements upon the exhibiting class.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5d66e85080b4537e57f7b22d793830f7e4c24940" translate="yes" xml:space="preserve">
          <source>Transactions and auto-commit</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0b2d548c9136fb8d98eed66fd9be5ada817df912" translate="yes" xml:space="preserve">
          <source>Transfers the result set from the last query on the database connection represented by the &lt;code&gt;link&lt;/code&gt; parameter to be used with the &lt;a href=&quot;mysqli-result.data-seek&quot;&gt;mysqli_data_seek()&lt;/a&gt; function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c4552518dac7e582f2df1ca03ca4bc8a569914f7" translate="yes" xml:space="preserve">
          <source>Transforms a string or part thereof using an ICU transliterator.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1b9e9898ba2962d59191dda30388417a18e7496c" translate="yes" xml:space="preserve">
          <source>Transforms an image as dictated by the affine matrix.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dd4d5c66384c3f3d0b4e60681cd784840c7404b1" translate="yes" xml:space="preserve">
          <source>Transforms an image to a new colorspace, and then extracts a single channel so that the individual channel values can be viewed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0c1602f6cc6f6c69f1eba9904ead81258ffbb2ff" translate="yes" xml:space="preserve">
          <source>Transforms an image to a new colorspace.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eb942631fd35bf254d4bbb2a5feb2ff94c57f396" translate="yes" xml:space="preserve">
          <source>Transforms the source node to a &lt;a href=&quot;class.domdocument&quot;&gt;DOMDocument&lt;/a&gt; applying the stylesheet given by the &lt;a href=&quot;xsltprocessor.importstylesheet&quot;&gt;XSLTProcessor::importStylesheet()&lt;/a&gt; method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e7e9ad273712af23f70b8cf24a65e992ee007e25" translate="yes" xml:space="preserve">
          <source>Transforms the source node to a string applying the stylesheet given by the &lt;a href=&quot;xsltprocessor.importstylesheet&quot;&gt;xsltprocessor::importStylesheet()&lt;/a&gt; method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="167de393c490d7fa062d72ac0a9a738fd296c7e9" translate="yes" xml:space="preserve">
          <source>Transforms the source node to an URI applying the stylesheet given by the &lt;a href=&quot;xsltprocessor.importstylesheet&quot;&gt;XSLTProcessor::importStylesheet()&lt;/a&gt; method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="039834a3648c1d587b4fb0db0649590e7205d290" translate="yes" xml:space="preserve">
          <source>Translate &lt;em&gt;ISO-8859&lt;/em&gt; characters to &lt;em&gt;t61&lt;/em&gt; characters.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="30556737f89123c97851854c256b1558a9a219ba" translate="yes" xml:space="preserve">
          <source>Translate strings and resources to numbers, usual math</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e20b8d15837473c81de73b3ff77b5e8176de056c" translate="yes" xml:space="preserve">
          <source>Translate, scale, shear, or rotate image colors. This method supports variable sized matrices but normally 5x5 matrix is used for RGBA and 6x6 is used for CMYK. The last row should contain the normalized values. This method is available if Imagick has been compiled against ImageMagick version 6.3.6 or newer.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1509c1a1361a444c5fe50c91ac850bb333365159" translate="yes" xml:space="preserve">
          <source>Translates &lt;code&gt;filename&lt;/code&gt; into the effective real path on the remote filesystem.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="45b7f1e24a5959e0cee258dfa6fc1574d0b08031" translate="yes" xml:space="preserve">
          <source>Translates a Windows timezone (e.g. &quot;Pacific Standard Time&quot;) into a system timezone (e.g. &quot;America/Los_Angeles&quot;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="62ac916ddaa83409c1d18509a99b22ee49a28847" translate="yes" xml:space="preserve">
          <source>Translates a system timezone (e.g. &quot;America/Los_Angeles&quot;) into a Windows timezone (e.g. &quot;Pacific Standard Time&quot;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0d12b9df94270701950fff4c788b89901ca5245a" translate="yes" xml:space="preserve">
          <source>Transliterator &amp;rarr;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f1be8e64cbbbf15920958cdee84b6ebaea213b50" translate="yes" xml:space="preserve">
          <source>Transliterator (class)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3fe40e2aa3ddf3a5d9d0cf7ee264e41cf62a73d7" translate="yes" xml:space="preserve">
          <source>Transliterator provides transliteration of strings.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="551d4d2c6b312fd3b6a7051070c29f2281779985" translate="yes" xml:space="preserve">
          <source>Transliterator::__construct</source>
          <target state="translated">Transliterator::__construct</target>
        </trans-unit>
        <trans-unit id="bef7a2028ed014e013fb4fafe1ac050a4e013c79" translate="yes" xml:space="preserve">
          <source>Transliterator::__construct &amp;mdash; Private constructor to deny instantiation</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a477582e9b6cd8398fa771fffd5106a059fa66d3" translate="yes" xml:space="preserve">
          <source>Transliterator::__construct &amp;rarr;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ff3844bc470fa9019ee11ed8c6d3b650511ddc94" translate="yes" xml:space="preserve">
          <source>Transliterator::create</source>
          <target state="translated">Transliterator::create</target>
        </trans-unit>
        <trans-unit id="6aaf3066e618f3c1166b33d264bce6a455f2298e" translate="yes" xml:space="preserve">
          <source>Transliterator::create &amp;rarr;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ecd61e75d4336dbf3ab7d7378b68b3384ff5a3c9" translate="yes" xml:space="preserve">
          <source>Transliterator::create -- transliterator_create &amp;mdash; Create a transliterator</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9d6673a661883e932547b669f13e81bf7d1ec65b" translate="yes" xml:space="preserve">
          <source>Transliterator::createFromRules</source>
          <target state="translated">Transliterator::createFromRules</target>
        </trans-unit>
        <trans-unit id="4e0207eb71bb032c687c7a38a0f3be4c9929bd38" translate="yes" xml:space="preserve">
          <source>Transliterator::createFromRules &amp;rarr;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="74cd57ed86512485bbdad3a909914265bd1b72f2" translate="yes" xml:space="preserve">
          <source>Transliterator::createFromRules -- transliterator_create_from_rules &amp;mdash; Create transliterator from rules</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bbfead95416f62ba53ff53c58e46f07485b94b37" translate="yes" xml:space="preserve">
          <source>Transliterator::createInverse</source>
          <target state="translated">Transliterator::createInverse</target>
        </trans-unit>
        <trans-unit id="220a68d451cbedada8810a5b5ee2f6c4d1a596a2" translate="yes" xml:space="preserve">
          <source>Transliterator::createInverse &amp;rarr;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d3614f389f1b1e425bcedec4a9321790808bc164" translate="yes" xml:space="preserve">
          <source>Transliterator::createInverse -- transliterator_create_inverse &amp;mdash; Create an inverse transliterator</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f7dfd00ecff51f0367603aecf73383b918b432b8" translate="yes" xml:space="preserve">
          <source>Transliterator::getErrorCode</source>
          <target state="translated">Transliterator::getErrorCode</target>
        </trans-unit>
        <trans-unit id="8031f1b4c04f3fe374fd4294465158e43fff9de6" translate="yes" xml:space="preserve">
          <source>Transliterator::getErrorCode &amp;rarr;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2019fd9cfa9c4ab37e99b0bdbced2d5708013b20" translate="yes" xml:space="preserve">
          <source>Transliterator::getErrorCode -- transliterator_get_error_code &amp;mdash; Get last error code</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0836d4d1d4523952e46991009dd5d318a1f6b98b" translate="yes" xml:space="preserve">
          <source>Transliterator::getErrorMessage</source>
          <target state="translated">Transliterator::getErrorMessage</target>
        </trans-unit>
        <trans-unit id="af0309034bc599008560b272ee8161e517ba706e" translate="yes" xml:space="preserve">
          <source>Transliterator::getErrorMessage &amp;rarr;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fa7e5214f6e78f8fcc13919874acc20fa9e052e7" translate="yes" xml:space="preserve">
          <source>Transliterator::getErrorMessage -- transliterator_get_error_message &amp;mdash; Get last error message</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f84f960c343bccb3313859454abbf40b661f22c0" translate="yes" xml:space="preserve">
          <source>Transliterator::listIDs</source>
          <target state="translated">Transliterator::listIDs</target>
        </trans-unit>
        <trans-unit id="8809ce317ae462c30c4d5d0e1f1c779c5720b3c3" translate="yes" xml:space="preserve">
          <source>Transliterator::listIDs &amp;rarr;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2141996518ca9d4c437f34b46bbfede7d2822ca7" translate="yes" xml:space="preserve">
          <source>Transliterator::listIDs -- transliterator_list_ids &amp;mdash; Get transliterator IDs</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ae2fb9ed8e17e5e0fc2bff4ad1047c35ef44a158" translate="yes" xml:space="preserve">
          <source>Transliterator::transliterate</source>
          <target state="translated">Transliterator::transliterate</target>
        </trans-unit>
        <trans-unit id="7e4dde4e3808a53d59f30e19f24554c95881a7c2" translate="yes" xml:space="preserve">
          <source>Transliterator::transliterate &amp;rarr;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="35707bd44ff23da364d6c7fba5e72c21e15df8fe" translate="yes" xml:space="preserve">
          <source>Transliterator::transliterate -- transliterator_transliterate &amp;mdash; Transliterate a string</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b1caec963f7b20a910161b228ae31de906500366" translate="yes" xml:space="preserve">
          <source>Transparency is copied only with &lt;a href=&quot;function.imagecopymerge&quot;&gt;imagecopymerge()&lt;/a&gt; and true color images, not with &lt;a href=&quot;function.imagecopy&quot;&gt;imagecopy()&lt;/a&gt; or pallete images.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b795f17232474b10e4eb05eb081a307e9d9dfa5d" translate="yes" xml:space="preserve">
          <source>Traversable</source>
          <target state="translated">Traversable</target>
        </trans-unit>
        <trans-unit id="d39d4028f7aca5f01de9a2a71be28a4ef69afcb4" translate="yes" xml:space="preserve">
          <source>Traversable (interface)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9cd1b2d2b46e67877c15a06d3825ad54af736aec" translate="yes" xml:space="preserve">
          <source>Treat only arrays (not objects) as having children for recursive iteration.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bedbb31211f283dd04ff3dabcad2df36e21ed955" translate="yes" xml:space="preserve">
          <source>Tries to clone the Exception, which results in Fatal error.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aadd785716e57c328b2653d718406cbab77cff83" translate="yes" xml:space="preserve">
          <source>Tries to find locale that can satisfy the language list that is requested by the HTTP &quot;Accept-Language&quot; header.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="997d9381f07154d6eb93c54e986b11209af805a7" translate="yes" xml:space="preserve">
          <source>Trigram Phrase Fields</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3c73b177e0885f7c46dfe4366b17d79c71091e35" translate="yes" xml:space="preserve">
          <source>Trim an image, then display to the browser.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dc06c308c2305a48a997fb8e4cefb0444967922a" translate="yes" xml:space="preserve">
          <source>True activates the matte channel and false disables it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5f1b63ad2f77568331e20d2a4b05f053751269b9" translate="yes" xml:space="preserve">
          <source>True to set the bit (set it to 1/on); false to clear the bit (set it to 0/off).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8fe384ae3199c54ad414d9d33a4f7c4fb9f15e88" translate="yes" xml:space="preserve">
          <source>Truncates &lt;a href=&quot;language.types.string&quot;&gt;string&lt;/a&gt;&lt;code&gt;str&lt;/code&gt; to specified &lt;code&gt;width&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1bb32e01debbe84cdfbf02b9297b8aca47bccd2d" translate="yes" xml:space="preserve">
          <source>Truncates the file to &lt;code&gt;size&lt;/code&gt; bytes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="59ebe0e539379bc1144a1886e80978e3ef68f1dd" translate="yes" xml:space="preserve">
          <source>Try all backends(even currupted ones). It's not recommended to use it explicitly. Bitwise operators should be applied here(e.g. &lt;strong&gt;&lt;code&gt;Ev::BACKEND_ALL&lt;/code&gt;&lt;/strong&gt; &amp;amp; ~ &lt;strong&gt;&lt;code&gt;Ev::BACKEND_KQUEUE&lt;/code&gt;&lt;/strong&gt; ) Use &lt;a href=&quot;ev.recommendedbackends&quot;&gt;Ev::recommendedBackends()&lt;/a&gt; , or don't specify any backends at all.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a63d6cbe35bad6a049a6a59dc31617b3b923964c" translate="yes" xml:space="preserve">
          <source>Try to save the numeric indexes used in the original array.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f2cc14835db6423827d115d86334f0dfe561c1a2" translate="yes" xml:space="preserve">
          <source>Trying to get or set private or protected class property's values will result in an exception being thrown.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bacedfc421f77f552812296bed554754c40f1453" translate="yes" xml:space="preserve">
          <source>Trying to implement &lt;strong&gt;DateTimeInterface&lt;/strong&gt; raises a fatal error now. Formerly implementing the interface didn't raise an error, but the behavior was erroneous.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="97caf38b23101b830a281d2852ccb603a9156360" translate="yes" xml:space="preserve">
          <source>Tuesday.</source>
          <target state="translated">Tuesday.</target>
        </trans-unit>
        <trans-unit id="3c31279c62bbc3c3f14624a4959db610d4d54b3e" translate="yes" xml:space="preserve">
          <source>Turns off autocommit mode. While autocommit mode is turned off, changes made to the database via the PDO object instance are not committed until you end the transaction by calling &lt;a href=&quot;pdo.commit&quot;&gt;PDO::commit()&lt;/a&gt;. Calling &lt;a href=&quot;pdo.rollback&quot;&gt;PDO::rollBack()&lt;/a&gt; will roll back all changes to the database and return the connection to autocommit mode.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f6ff328bfb1c3ca207c241addf4737097a0d9201" translate="yes" xml:space="preserve">
          <source>Turns off the usual SSL peer certificate and host checks, this is not for production environments. Alternatively, the &lt;code&gt;sslChecks&lt;/code&gt; member can be set to &lt;strong&gt;&lt;code&gt;FALSE&lt;/code&gt;&lt;/strong&gt; to turn SSL checks off.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b6d518c8fe3d9d408437a0691b25ab5c360c7ff5" translate="yes" xml:space="preserve">
          <source>Turns off verbose request information (off by default). Alternatively, the &lt;a href=&quot;class.oauth#oauth.props.debug&quot;&gt;debug&lt;/a&gt; property can be set to a &lt;strong&gt;&lt;code&gt;FALSE&lt;/code&gt;&lt;/strong&gt; value to turn debug off.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3e31e3cbe52bfda91f027f703d1b467f38849991" translate="yes" xml:space="preserve">
          <source>Turns on or off auto-commit mode on queries for the database connection.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="923c76e62a2f17ec9dcb751f85e8264aece6dbce" translate="yes" xml:space="preserve">
          <source>Turns on the usual SSL peer certificate and host checks (enabled by default). Alternatively, the &lt;code&gt;sslChecks&lt;/code&gt; member can be set to a non-&lt;strong&gt;&lt;code&gt;FALSE&lt;/code&gt;&lt;/strong&gt; value to turn SSL checks off.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b6af8067365791be7807e95912176d95fe8f1e6e" translate="yes" xml:space="preserve">
          <source>Turns on verbose request information useful for debugging, the debug information is stored in the &lt;code&gt;debugInfo&lt;/code&gt; member. Alternatively, the &lt;code&gt;debug&lt;/code&gt; member can be set to a non-&lt;strong&gt;&lt;code&gt;FALSE&lt;/code&gt;&lt;/strong&gt; value to turn debug on.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bf5b1ee99bc2960db142521fbc257b3b8fc6a97d" translate="yes" xml:space="preserve">
          <source>Turns on/off full information display in the result.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6fad2f5a14884cb89e71eaf3f3c746ee43ceb98b" translate="yes" xml:space="preserve">
          <source>Turns reporting off</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="77e966fe094847d198de86cc710af95eff5229fc" translate="yes" xml:space="preserve">
          <source>Turns the specified &lt;code&gt;dn&lt;/code&gt;, into a more user-friendly form, stripping off type names.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="63b43a5156bf2cb21ece1721f6fe44e9d11ef289" translate="yes" xml:space="preserve">
          <source>Tweak specific SSL checks for requests.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="efc30fa9b08d3e06e5dce743b6194bed626456ce" translate="yes" xml:space="preserve">
          <source>Two digit representation of the century (year divided by 100, truncated to an integer)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="37f693712dd8812d8e5640dd8c30345d58189d15" translate="yes" xml:space="preserve">
          <source>Two digit representation of the hour in 12-hour format</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="539082add147acd12bb0993e128b329f4b8d4d12" translate="yes" xml:space="preserve">
          <source>Two digit representation of the hour in 24-hour format</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6d904a25a1d9020087a2a13500f092d66b987ddb" translate="yes" xml:space="preserve">
          <source>Two digit representation of the minute</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="181f837f69282d9604b655db476d3a2de75783c8" translate="yes" xml:space="preserve">
          <source>Two digit representation of the month</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="30de960b17b016f047106416f0e7a2fdd8eb0306" translate="yes" xml:space="preserve">
          <source>Two digit representation of the second</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7e1582837b80129c9a4c0acc782b9e0abc866568" translate="yes" xml:space="preserve">
          <source>Two digit representation of the year</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="06f2cdb0fe75fae9f53d88d9607c9b4b7d0c064e" translate="yes" xml:space="preserve">
          <source>Two digit representation of the year going by ISO-8601:1988 standards (see %V)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0bafe9394962d6969c41e74321cc707d62a219fb" translate="yes" xml:space="preserve">
          <source>Two elements are considered equal if and only if &lt;em&gt;(string) $elem1 === (string) $elem2&lt;/em&gt;. In other words: when the string representation is the same.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="52f7aa82dfd2aee105cf69cdbbebac5cf9095904" translate="yes" xml:space="preserve">
          <source>Two pointers are used to keep track of a head and a tail. The pointers can &amp;ldquo;wrap around&amp;rdquo; the end of the buffer, which avoids the need to move other values around to make room. This makes shift and unshift very fast &amp;mdash; something a &lt;strong&gt;Ds\Vector&lt;/strong&gt; can&amp;rsquo;t compete with.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="25c0461e64dd25a47db5e325012cc12cd24d2f69" translate="yes" xml:space="preserve">
          <source>Two values from &lt;em&gt;key =&amp;gt; value&lt;/em&gt; pairs are considered equal only if &lt;em&gt;(string) $elem1 === (string) $elem2 &lt;/em&gt;. In other words a strict check takes place so the string representations must be the same.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0eaeeab747b3ca146df2c2ff17f67cb1619ee546" translate="yes" xml:space="preserve">
          <source>Two-digit day of the month (with leading zeros)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3deb7456519697ecf4eefc455516c969a3681bae" translate="yes" xml:space="preserve">
          <source>Type</source>
          <target state="translated">Type</target>
        </trans-unit>
        <trans-unit id="fc81af51b62ebbc38c9e2b5459d32d4abb904543" translate="yes" xml:space="preserve">
          <source>Type (class)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7f7ae61fc4d52305e688b8380ee480f65e186212" translate="yes" xml:space="preserve">
          <source>Type Casting</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b7c6b8b9a7e12eee126eed3d12e3b7173d0fd4c4" translate="yes" xml:space="preserve">
          <source>Type Hinting</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bd14c070f42458d74b8ab2b66f34146f19633bec" translate="yes" xml:space="preserve">
          <source>Type Hinting &amp;rarr;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="55cface4380823af7fc71b5bf787e342e7344ac5" translate="yes" xml:space="preserve">
          <source>Type Juggling</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="224b8a0a1181ff8609dfa086e8ea96c0539b920b" translate="yes" xml:space="preserve">
          <source>Type Juggling &amp;rarr;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a13ae1279809745a712d847542e2456d682b93e1" translate="yes" xml:space="preserve">
          <source>Type Operators</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="118e42bdb9602ff3620bdf6d08739ab2f7ff6c35" translate="yes" xml:space="preserve">
          <source>Type Operators &amp;rarr;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cbb1a9343e841346521ac305d709587e3c367585" translate="yes" xml:space="preserve">
          <source>Type and default value depends on the extension class.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="af5d86b4f2772efae88d2abf7995fbbd6d019f95" translate="yes" xml:space="preserve">
          <source>Type casting in PHP works much as it does in C: the name of the desired type is written in parentheses before the variable which is to be cast.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="315f6367d2e7e25cde681d099ca28e1c2c774de1" translate="yes" xml:space="preserve">
          <source>Type declarations</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="076fb5d96fb0c3317030bea1ff9d02bdd37ef58e" translate="yes" xml:space="preserve">
          <source>Type declarations allow functions to require that parameters are of a certain type at call time. If the given value is of the incorrect type, then an error is generated: in PHP 5, this will be a recoverable fatal error, while PHP 7 will throw a &lt;a href=&quot;class.typeerror&quot;&gt;TypeError&lt;/a&gt; exception.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c1fc38af36ee5e71a94a862ff7df1ef1540184e8" translate="yes" xml:space="preserve">
          <source>Type declarations were also known as type hints in PHP 5.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b924e68a609999806986b6e03e9da45522526329" translate="yes" xml:space="preserve">
          <source>Type juggling</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="702e276ab71ae831e6f92d2a260058df77d24233" translate="yes" xml:space="preserve">
          <source>Type of Operand 1</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="54089220ec4b473abf40fc67f6a6126f7676db80" translate="yes" xml:space="preserve">
          <source>Type of Operand 2</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fcbfaa103d537c55d455f2ae2d06f44a7490008c" translate="yes" xml:space="preserve">
          <source>Type of cursor to open for statement when &lt;a href=&quot;mysqli-stmt.execute&quot;&gt;mysqli_stmt_execute()&lt;/a&gt; is invoked. &lt;code&gt;mode&lt;/code&gt; can be &lt;em&gt;MYSQLI_CURSOR_TYPE_NO_CURSOR&lt;/em&gt; (the default) or &lt;em&gt;MYSQLI_CURSOR_TYPE_READ_ONLY&lt;/em&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bc3a6d48cab49e3150128ded197f015114f710d9" translate="yes" xml:space="preserve">
          <source>Type operators (instanceof)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aa3046a33c5bfb0fa9cc94ad8cac9be957ce740b" translate="yes" xml:space="preserve">
          <source>Type::__toString</source>
          <target state="translated">Type::__toString</target>
        </trans-unit>
        <trans-unit id="f5cdbf3c4cf19ad1016a2287a608ff144b58cc60" translate="yes" xml:space="preserve">
          <source>Type::allowsNull</source>
          <target state="translated">Type::allowsNull</target>
        </trans-unit>
        <trans-unit id="0f3ab36716e8b91aa4dddae3765ca918c1e87825" translate="yes" xml:space="preserve">
          <source>Type::isBuiltin</source>
          <target state="translated">Type::isBuiltin</target>
        </trans-unit>
        <trans-unit id="9af8f14bd15271db0f113f7c146e7fa9294b1caa" translate="yes" xml:space="preserve">
          <source>TypeError</source>
          <target state="translated">TypeError</target>
        </trans-unit>
        <trans-unit id="2e32ee671317a81a96e5f4ffb9d2e7b260304bf0" translate="yes" xml:space="preserve">
          <source>TypeError &amp;rarr;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="41f96efd2e96047b9b0b4e94e4eb3721b13507bc" translate="yes" xml:space="preserve">
          <source>Types &amp;rarr;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f6704a575d6518f08192232bc5369db54e5467ef" translate="yes" xml:space="preserve">
          <source>Types of filters</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="98370ec7cbe28c90cb22ae55f4e75eaf4b72d816" translate="yes" xml:space="preserve">
          <source>Typically all the memory allocated for the LDAP result gets freed at the end of the script. In case the script is making successive searches which return large result sets, &lt;strong&gt;ldap_free_result()&lt;/strong&gt; could be called to keep the runtime memory usage by the script low.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c5c308b07bc9eece2adafb59e2375ab0113db4a4" translate="yes" xml:space="preserve">
          <source>Typically the group number from the password file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a71936dca94e8f8ae6bd336edc345118a964c88d" translate="yes" xml:space="preserve">
          <source>Typically, &lt;code&gt;callback&lt;/code&gt; takes on two parameters. The &lt;code&gt;array&lt;/code&gt; parameter's value being the first, and the key/index second.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="365a311d117d935927acbdc46ccb06e89d0796c1" translate="yes" xml:space="preserve">
          <source>Typically, PHP does not alter the names of variables when they are passed into a script. However, it should be noted that the dot (period, full stop) is not a valid character in a PHP variable name. For the reason, look at it:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0064f2de83b56adc182f8dd020af784c1f57ec12" translate="yes" xml:space="preserve">
          <source>Typically, the result of an &lt;a href=&quot;language.operators&quot;&gt;operator&lt;/a&gt; which returns a &lt;a href=&quot;language.types.boolean&quot;&gt;boolean&lt;/a&gt; value is passed on to a &lt;a href=&quot;https://secure.php.net/manual/en/language.control-structures.php&quot;&gt;control structure&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a6ca271d8ead99b78080fcc5935a7b714f8ca2c6" translate="yes" xml:space="preserve">
          <source>UConverter &amp;rarr;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0bbf51db42d8f606dcdb6a48751e10a531e0d71b" translate="yes" xml:space="preserve">
          <source>UConverter (class)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="57b0e3344556df11d6fa328d516863fdad194e51" translate="yes" xml:space="preserve">
          <source>UConverter::__construct</source>
          <target state="translated">UConverter::__construct</target>
        </trans-unit>
        <trans-unit id="dc7032d053ea0bdfe094aef42f9b4761cfde1801" translate="yes" xml:space="preserve">
          <source>UConverter::__construct &amp;mdash; Create UConverter object</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="271c6295f894f52e90ad972c48fbba11aca902bf" translate="yes" xml:space="preserve">
          <source>UConverter::__construct &amp;rarr;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d5e7fd25aa556668eb27e571d96feb0ecf884517" translate="yes" xml:space="preserve">
          <source>UConverter::convert</source>
          <target state="translated">UConverter::convert</target>
        </trans-unit>
        <trans-unit id="20b0d8639a91b2a0a575d7e0162b71b034bd1b5b" translate="yes" xml:space="preserve">
          <source>UConverter::convert &amp;mdash; Convert string from one charset to another</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2b3770f7b45b154b327e4a2647206644fb0b45bc" translate="yes" xml:space="preserve">
          <source>UConverter::convert &amp;rarr;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="84fafeb5dc2098d7c5a0fb72a8d8209d0f4eacdf" translate="yes" xml:space="preserve">
          <source>UConverter::fromUCallback</source>
          <target state="translated">UConverter::fromUCallback</target>
        </trans-unit>
        <trans-unit id="e0bfcd65122e9ce01629ba280f37dde41a1a2eae" translate="yes" xml:space="preserve">
          <source>UConverter::fromUCallback &amp;mdash; Default &quot;from&quot; callback function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="32108a4caa02564b18cd767b4e6c5f525ab59e8c" translate="yes" xml:space="preserve">
          <source>UConverter::fromUCallback &amp;rarr;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8e8359514b39a406903115b00684c54bafb34041" translate="yes" xml:space="preserve">
          <source>UConverter::getAliases</source>
          <target state="translated">UConverter::getAliases</target>
        </trans-unit>
        <trans-unit id="4f815330da1557a580562c88de4d9749a12fee4f" translate="yes" xml:space="preserve">
          <source>UConverter::getAliases &amp;mdash; Get the aliases of the given name</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ff2c8217480c0e0fa32046523580361a622f8129" translate="yes" xml:space="preserve">
          <source>UConverter::getAliases &amp;rarr;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d6a6432c63066011fe160acc5ccb13bfd1e0276e" translate="yes" xml:space="preserve">
          <source>UConverter::getAvailable</source>
          <target state="translated">UConverter::getAvailable</target>
        </trans-unit>
        <trans-unit id="c403ed8aa491a72747af88d9cda21e0479f0b622" translate="yes" xml:space="preserve">
          <source>UConverter::getAvailable &amp;mdash; Get the available canonical converter names</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cf6d654db00b6c9023ca8aaab502dd9844dddfea" translate="yes" xml:space="preserve">
          <source>UConverter::getAvailable &amp;rarr;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4531e74f1f4c922caccd45427b9f905133ead4e4" translate="yes" xml:space="preserve">
          <source>UConverter::getDestinationEncoding</source>
          <target state="translated">UConverter::getDestinationEncoding</target>
        </trans-unit>
        <trans-unit id="c78dacc84449adb62279bd3fae516e633011448d" translate="yes" xml:space="preserve">
          <source>UConverter::getDestinationEncoding &amp;mdash; Get the destination encoding</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0061b36ef4ec6e37ed8c4af69a0f5fa2a98dd805" translate="yes" xml:space="preserve">
          <source>UConverter::getDestinationEncoding &amp;rarr;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e3855c63d78fb1b7c914172e3dd4218c56a7f904" translate="yes" xml:space="preserve">
          <source>UConverter::getDestinationType</source>
          <target state="translated">UConverter::getDestinationType</target>
        </trans-unit>
        <trans-unit id="776b8a998e817ee095ebd64fc6991b8aa143fad9" translate="yes" xml:space="preserve">
          <source>UConverter::getDestinationType &amp;mdash; Get the destination converter type</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="21119af97361db222ec0c70ce2d975097b649836" translate="yes" xml:space="preserve">
          <source>UConverter::getDestinationType &amp;rarr;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2f297e6806e85bd484a83b4358865ea2f1253bca" translate="yes" xml:space="preserve">
          <source>UConverter::getErrorCode</source>
          <target state="translated">UConverter::getErrorCode</target>
        </trans-unit>
        <trans-unit id="5964f1d9855896959b1309d317ebb9cb84e2c02a" translate="yes" xml:space="preserve">
          <source>UConverter::getErrorCode &amp;rarr;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="107becfefe9c71c17bfa71591fd345832ac09614" translate="yes" xml:space="preserve">
          <source>UConverter::getErrorCode -- intl_get_error_code &amp;mdash; Get last error code on the object</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="715bbba56c4a36c01ab7451ebbeeb9ee4ef85d1b" translate="yes" xml:space="preserve">
          <source>UConverter::getErrorMessage</source>
          <target state="translated">UConverter::getErrorMessage</target>
        </trans-unit>
        <trans-unit id="648900ea17c0dfafd293b076889979be7437d97b" translate="yes" xml:space="preserve">
          <source>UConverter::getErrorMessage &amp;mdash; Get last error message on the object</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="85fdad7f894e211f2982ee2f763681ca2987b880" translate="yes" xml:space="preserve">
          <source>UConverter::getErrorMessage &amp;rarr;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="57e1903a7a563bc0fb181a6ce621022b75b9ce58" translate="yes" xml:space="preserve">
          <source>UConverter::getSourceEncoding</source>
          <target state="translated">UConverter::getSourceEncoding</target>
        </trans-unit>
        <trans-unit id="bc892499dcd9ea52b51dd6812d9cef14e743d9fe" translate="yes" xml:space="preserve">
          <source>UConverter::getSourceEncoding &amp;mdash; Get the source encoding</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d711c6ab665d1d7caa5667acfff54a41e451d5fa" translate="yes" xml:space="preserve">
          <source>UConverter::getSourceEncoding &amp;rarr;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e98455056f49da4ad4ae884fae028978d8977697" translate="yes" xml:space="preserve">
          <source>UConverter::getSourceType</source>
          <target state="translated">UConverter::getSourceType</target>
        </trans-unit>
        <trans-unit id="c2224330f20502a92f105792a754d27521ca416c" translate="yes" xml:space="preserve">
          <source>UConverter::getSourceType &amp;mdash; Get the source convertor type</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7c14ff6a60ae008e04683932b0a1466ef3022e48" translate="yes" xml:space="preserve">
          <source>UConverter::getSourceType &amp;rarr;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a08144b08dd34cf57fc977168f3e052a1271ea1c" translate="yes" xml:space="preserve">
          <source>UConverter::getStandards</source>
          <target state="translated">UConverter::getStandards</target>
        </trans-unit>
        <trans-unit id="bc8809c86c86eb59a02cdb52adc8ddf741452c6a" translate="yes" xml:space="preserve">
          <source>UConverter::getStandards &amp;mdash; Get standards associated to converter names</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0665b459762cff69c061c3e5531cb666c6b69abb" translate="yes" xml:space="preserve">
          <source>UConverter::getStandards &amp;rarr;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="79029fded7a42c0e6bc23d6351a3e31de73a2561" translate="yes" xml:space="preserve">
          <source>UConverter::getSubstChars</source>
          <target state="translated">UConverter::getSubstChars</target>
        </trans-unit>
        <trans-unit id="82c960480535a29b126f85a3b49a7bfa81dfcdd8" translate="yes" xml:space="preserve">
          <source>UConverter::getSubstChars &amp;mdash; Get substitution chars</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="04628e3d6cafde0fe564cbf60e5964211849d3e1" translate="yes" xml:space="preserve">
          <source>UConverter::getSubstChars &amp;rarr;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8c7e259ad13a2bdee21b7d19755667237a6a4fc2" translate="yes" xml:space="preserve">
          <source>UConverter::reasonText</source>
          <target state="translated">UConverter::reasonText</target>
        </trans-unit>
        <trans-unit id="dc7a82a5843b53eb6a558648b62e275488ea8b2b" translate="yes" xml:space="preserve">
          <source>UConverter::reasonText &amp;mdash; Get string representation of the callback reason</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9cc996e1da9aa23667358c1ba2ec2fb64fac7fa4" translate="yes" xml:space="preserve">
          <source>UConverter::reasonText &amp;rarr;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="96f4be10784fb2c97f45c2302ac7d0df1785d525" translate="yes" xml:space="preserve">
          <source>UConverter::setDestinationEncoding</source>
          <target state="translated">UConverter::setDestinationEncoding</target>
        </trans-unit>
        <trans-unit id="7246ee7713e91206e159a1c2cf9d124931ec1def" translate="yes" xml:space="preserve">
          <source>UConverter::setDestinationEncoding &amp;mdash; Set the destination encoding</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bcc7b06525c828d71232ffdd0cb53ee36f32c801" translate="yes" xml:space="preserve">
          <source>UConverter::setDestinationEncoding &amp;rarr;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9961b951f595c9931f771a2d6a5aa74e34a18210" translate="yes" xml:space="preserve">
          <source>UConverter::setSourceEncoding</source>
          <target state="translated">UConverter::setSourceEncoding</target>
        </trans-unit>
        <trans-unit id="ab84be2fa9b16ef2bafb516bba1b407c2608a4a6" translate="yes" xml:space="preserve">
          <source>UConverter::setSourceEncoding &amp;mdash; Set the source encoding</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b646b36021b0cbabc03d40c73e9d37e9d61b1d71" translate="yes" xml:space="preserve">
          <source>UConverter::setSourceEncoding &amp;rarr;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2e122ca106892d789a3fe9f096745e3250f506c8" translate="yes" xml:space="preserve">
          <source>UConverter::setSubstChars</source>
          <target state="translated">UConverter::setSubstChars</target>
        </trans-unit>
        <trans-unit id="3dd35b33efab43fac59c0b6a32201bb2478141fc" translate="yes" xml:space="preserve">
          <source>UConverter::setSubstChars &amp;mdash; Set the substitution chars</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6f1a3bc0b41a0c492f902d4f344349928d5e7c74" translate="yes" xml:space="preserve">
          <source>UConverter::setSubstChars &amp;rarr;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ab14eb7824215d6bbe3f10a4427bb5e4b4859e17" translate="yes" xml:space="preserve">
          <source>UConverter::toUCallback</source>
          <target state="translated">UConverter::toUCallback</target>
        </trans-unit>
        <trans-unit id="2c9c0ca4680d11354c1688e1bdb1fd6e1cdc21e9" translate="yes" xml:space="preserve">
          <source>UConverter::toUCallback &amp;mdash; Default &quot;to&quot; callback function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="20ad737829008f27fc1fd76986726d3d997cf39e" translate="yes" xml:space="preserve">
          <source>UConverter::toUCallback &amp;rarr;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e4f6427c9b92100051e2a565ab4e2f07c079ef06" translate="yes" xml:space="preserve">
          <source>UConverter::transcode</source>
          <target state="translated">UConverter::transcode</target>
        </trans-unit>
        <trans-unit id="8c326eb47770532f90783bf6eda030d0f86ef00b" translate="yes" xml:space="preserve">
          <source>UConverter::transcode &amp;mdash; Convert string from one charset to another</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="58570531702a37e63ab2d769b7388d8770b4b927" translate="yes" xml:space="preserve">
          <source>UConverter::transcode &amp;rarr;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c2195db1b3be3cde6f00a845fc824cab62bb5640" translate="yes" xml:space="preserve">
          <source>UDP sockets will sometimes appear to have opened without an error, even if the remote host is unreachable. The error will only become apparent when you read or write data to/from the socket. The reason for this is because UDP is a &quot;connectionless&quot; protocol, which means that the operating system does not try to establish a link for the socket until it actually needs to send or receive data.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8fb37c7519d6134eff8257624d3e5fe096838045" translate="yes" xml:space="preserve">
          <source>UIterator (class)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1fe75696c11954367e9449458a24b29cc8bd93cc" translate="yes" xml:space="preserve">
          <source>UIterator::__construct</source>
          <target state="translated">UIterator::__construct</target>
        </trans-unit>
        <trans-unit id="0b213a7e5b81aca8445015104cdf6c55cc9a871f" translate="yes" xml:space="preserve">
          <source>UIterator::current</source>
          <target state="translated">UIterator::current</target>
        </trans-unit>
        <trans-unit id="26b57585be73a2791b31812c5c91d519fb9cf14f" translate="yes" xml:space="preserve">
          <source>UIterator::getTotalCount</source>
          <target state="translated">UIterator::getTotalCount</target>
        </trans-unit>
        <trans-unit id="915bcbaa3f937bd7040ebd5f6610fb456f12fa44" translate="yes" xml:space="preserve">
          <source>UIterator::getTotalHits</source>
          <target state="translated">UIterator::getTotalHits</target>
        </trans-unit>
        <trans-unit id="295c78c15f6bdeb283ce74ee049c16022f75e68f" translate="yes" xml:space="preserve">
          <source>UIterator::getTotalSize</source>
          <target state="translated">UIterator::getTotalSize</target>
        </trans-unit>
        <trans-unit id="f6d63eb6bcc8a4e4b95ece88ea454de5af6397a7" translate="yes" xml:space="preserve">
          <source>UIterator::key</source>
          <target state="translated">UIterator::key</target>
        </trans-unit>
        <trans-unit id="0f7f582ab191b0b6529cffeea1fb178862e97632" translate="yes" xml:space="preserve">
          <source>UIterator::next</source>
          <target state="translated">UIterator::next</target>
        </trans-unit>
        <trans-unit id="fbf36fb5b58974fd5dab032af7155397efc74b48" translate="yes" xml:space="preserve">
          <source>UIterator::rewind</source>
          <target state="translated">UIterator::rewind</target>
        </trans-unit>
        <trans-unit id="dc498ca6f69bd66da28e80b0c5f64706cc7e3eaf" translate="yes" xml:space="preserve">
          <source>UIterator::valid</source>
          <target state="translated">UIterator::valid</target>
        </trans-unit>
        <trans-unit id="049f1c726baad86e4322cdade9ed71baa99f2b05" translate="yes" xml:space="preserve">
          <source>UNANSWERED - match messages that have not been answered</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d1c5e523b9400b582af096786628fb268669154e" translate="yes" xml:space="preserve">
          <source>UNDELETED - match messages that are not deleted</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4f93719f2fef7de1ee6a7d04b578540a93ea9306" translate="yes" xml:space="preserve">
          <source>UNFLAGGED - match messages that are not flagged</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="12423e87877feab17608cc883e2867e5d121d49b" translate="yes" xml:space="preserve">
          <source>UNIX domain sockets' support added.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="875be0634e3e7e78596d9c2262c9a47175f7b3fd" translate="yes" xml:space="preserve">
          <source>UNKEYWORD &quot;string&quot; - match messages that do not have the keyword &quot;string&quot;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="28369bb07e627809ee80d5850aefcbd02eb66af5" translate="yes" xml:space="preserve">
          <source>UNSEEN - match messages which have not been read yet</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="56e82de820e4eb1c4a3c6fe979003d35dcaf4d39" translate="yes" xml:space="preserve">
          <source>UNSIGNED_ATTRIBUTE</source>
          <target state="translated">UNSIGNED_ATTRIBUTE</target>
        </trans-unit>
        <trans-unit id="6db9d1e9285b1f322bb197e12c09032ac0155c84" translate="yes" xml:space="preserve">
          <source>UPDATE ...</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0f48c2467497aa4c6ce5d5a01f9e93b5ad9b5cc1" translate="yes" xml:space="preserve">
          <source>UPDATE_RULE</source>
          <target state="translated">UPDATE_RULE</target>
        </trans-unit>
        <trans-unit id="3de600d716aaf868de0314567ce8f4240fa04799" translate="yes" xml:space="preserve">
          <source>UPPER-CASE 'AM' or 'PM' based on the given time</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cb371c93c5aa0e62198efd303ae2c17474416d1a" translate="yes" xml:space="preserve">
          <source>URI</source>
          <target state="translated">URI</target>
        </trans-unit>
        <trans-unit id="7041444cfb378da4891d2e04261738ea71d5c75b" translate="yes" xml:space="preserve">
          <source>URI invocation</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3daf1f7046000f3dd13e396e0498ec3cf08b50ce" translate="yes" xml:space="preserve">
          <source>URI of the &lt;em&gt;WSDL&lt;/em&gt; file or &lt;strong&gt;&lt;code&gt;NULL&lt;/code&gt;&lt;/strong&gt; if working in &lt;em&gt;non-WSDL&lt;/em&gt; mode.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="157732b6d36eb622ccc1a4a0c594b0bfd54b82da" translate="yes" xml:space="preserve">
          <source>URI pointing to the document.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="654d4a5e7acd76f82375142ab6a95024e8e30a18" translate="yes" xml:space="preserve">
          <source>URI to encode.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0e2d9b0777a485c1276de0803c12a7d76fbc5c39" translate="yes" xml:space="preserve">
          <source>URL</source>
          <target state="translated">URL</target>
        </trans-unit>
        <trans-unit id="8175dd6a4ad2832117e4065a616f07392fed5e81" translate="yes" xml:space="preserve">
          <source>URL describing location of file to be hashed; Supports fopen wrappers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b6f62f8baf02dd7b8a4bfc58b2dee1a080deb761" translate="yes" xml:space="preserve">
          <source>URL for request</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="974406447d3fcae34ba870da161e189bd1b4787a" translate="yes" xml:space="preserve">
          <source>URL for request.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9544f4a2dfcb40ffa310b5611546b0f0d9cafc15" translate="yes" xml:space="preserve">
          <source>URL regular expression in PCRE compatible syntax. It's based on the ban.url varnish command.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cfe81fc46f8a91aba4104de0441cd00274620203" translate="yes" xml:space="preserve">
          <source>URL to the OAuth protected resource.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c59926180018b50741a66ca1d64e682bc5148ef5" translate="yes" xml:space="preserve">
          <source>URL to the access token API.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="491b5efcca10859bac805940338eb8cf931798eb" translate="yes" xml:space="preserve">
          <source>URL to the request token API.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3764a45dc9e76fa234e3367e4055776d84722779" translate="yes" xml:space="preserve">
          <source>URL to use to obtain fill pattern.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dcbda48dedbd7892baa6ec1e21926a971c5d2719" translate="yes" xml:space="preserve">
          <source>URLs &amp;rarr;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c32acb0453dbd9c4bc1f8f277cf4e0849dfa472b" translate="yes" xml:space="preserve">
          <source>USENET news subsystem</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="03c61107d3914e032849aa21122cddddb4b6cc58" translate="yes" xml:space="preserve">
          <source>UTC time zones.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="663b90c899fa25a111067be0c22ffc64dcf581c2" translate="yes" xml:space="preserve">
          <source>UTF-8</source>
          <target state="translated">UTF-8</target>
        </trans-unit>
        <trans-unit id="0293970de723cdfda820105b49f9384d45abf6db" translate="yes" xml:space="preserve">
          <source>UUCP subsystem</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aaf076bd9f5cc019c975419b590a05562043caa8" translate="yes" xml:space="preserve">
          <source>Ultimately, this means writing correct programs using Unicode depends on carefully avoiding functions that will not work and that most likely will corrupt the data and using instead the functions that do behave correctly, generally from the &lt;a href=&quot;https://secure.php.net/manual/en/book.intl.php&quot;&gt;intl&lt;/a&gt; and &lt;a href=&quot;https://secure.php.net/manual/en/book.mbstring.php&quot;&gt;mbstring&lt;/a&gt; extensions. However, using functions that can handle Unicode encodings is just the beginning. No matter the functions the language provides, it is essential to know the Unicode specification. For instance, a program that assumes there is only uppercase and lowercase is making a wrong assumption.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2ba0e630a3628d95448b4498145e47fec6802505" translate="yes" xml:space="preserve">
          <source>Un-quotes a quoted string.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e57016edceec7e7b4449fe027bb35d1ba319eb9f" translate="yes" xml:space="preserve">
          <source>Unassigned</source>
          <target state="translated">Unassigned</target>
        </trans-unit>
        <trans-unit id="b807d2e163e22eda2e62a0eabee714fc9f028d64" translate="yes" xml:space="preserve">
          <source>Unbinds from the LDAP directory.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="700b1b1eba59bf54f67d34755477d0933d5fc207" translate="yes" xml:space="preserve">
          <source>Unblocks (start receiving again) packets arriving from a specific source address to a specific multicast group, which must have been previously joined. (added in PHP 5.4)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e5941be54d98bb49adeb60671a65b139495bda06" translate="yes" xml:space="preserve">
          <source>Unbound numbers of repetitions as specified by ISO 8601 section 4.5 &quot;Recurring time interval&quot; are not supported, i.e. neither passing &lt;em&gt;&quot;R/...&quot;&lt;/em&gt; as &lt;code&gt;isostr&lt;/code&gt; nor passing &lt;strong&gt;&lt;code&gt;NULL&lt;/code&gt;&lt;/strong&gt; as &lt;code&gt;end&lt;/code&gt; would work.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c8318a2a96364bd8843d44347680ec801af33bf2" translate="yes" xml:space="preserve">
          <source>Uncompress any raw/gzip/zlib encoded data.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a2d6662685db30e971d7e77c4e4312ea6c68a944" translate="yes" xml:space="preserve">
          <source>Undefined Constants referenced using any backslash die with fatal error</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3222c8392cc1311c536ce92467b5ace2e1c2e635" translate="yes" xml:space="preserve">
          <source>Under Cygwin, the &lt;code&gt;more_entropy&lt;/code&gt; must be set to &lt;strong&gt;&lt;code&gt;TRUE&lt;/code&gt;&lt;/strong&gt; for this function to work.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="51ec195cc880d84ecd20fc2a1a0da94a28b9acf4" translate="yes" xml:space="preserve">
          <source>UnderflowException &amp;rarr;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7a4010e74ceeb17b4cd45527edc9faadf9498df5" translate="yes" xml:space="preserve">
          <source>UnderflowException (class)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="86eb4f01708af47e2e1debe46fe3b9a778db3665" translate="yes" xml:space="preserve">
          <source>Underlying input buffer object( &lt;a href=&quot;class.eventbuffer&quot;&gt;EventBuffer&lt;/a&gt; )</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9c76721a6ebdc9a3ac6df8b304f667ba892d3da3" translate="yes" xml:space="preserve">
          <source>Underlying output buffer object( &lt;a href=&quot;class.eventbuffer&quot;&gt;EventBuffer&lt;/a&gt; )</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="134ad3ff87b57ec76795a7c688c20683ba9a8279" translate="yes" xml:space="preserve">
          <source>Undo all changes done in the archive.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="645e37a49d828b43cc519d5e43b0bf2a76b42fa7" translate="yes" xml:space="preserve">
          <source>UnexpectedValueException &amp;rarr;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ba52e54e9b701e38013a50219a9df2560f2e01c6" translate="yes" xml:space="preserve">
          <source>UnexpectedValueException (class)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9ab0bd9a6126ee4b9d7538d5c6cba7aa587f31ed" translate="yes" xml:space="preserve">
          <source>Unicode</source>
          <target state="translated">Unicode</target>
        </trans-unit>
        <trans-unit id="4e0fe5ad550e0c545e997880f2d9ef289d85f0f1" translate="yes" xml:space="preserve">
          <source>Unicode character properties</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a9428ded955841cfabed028065f0a7c855399df2" translate="yes" xml:space="preserve">
          <source>Unicode character properties &amp;rarr;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b2a245785e423382c5f099a972f8861bf0dad9b0" translate="yes" xml:space="preserve">
          <source>Unicode character properties can appear inside a character class. They can not be part of a range. The minus (hyphen) character after a Unicode character class will match literally. Trying to end a range with a Unicode character property will result in a warning.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bd09ca364e59ee95c6a4c0e7ead3f32bcb069885" translate="yes" xml:space="preserve">
          <source>Unicode, especially in version 3.2, defines many more properties than the original set in UnicodeData.txt.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="70a1bd5acd0cd0a09c50b7faf7bc2a9128346ff5" translate="yes" xml:space="preserve">
          <source>Uniform Resource Identifier (URI) of namespace.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="72d1bc1786787b9f5cf6f8701a1fb442f4f59285" translate="yes" xml:space="preserve">
          <source>Union</source>
          <target state="translated">Union</target>
        </trans-unit>
        <trans-unit id="3e9cdbbe210ed1ff5d6f77d6e84aa315e44bf7d2" translate="yes" xml:space="preserve">
          <source>Union of &lt;var&gt;&lt;var&gt;$a&lt;/var&gt;&lt;/var&gt; and &lt;var&gt;&lt;var&gt;$b&lt;/var&gt;&lt;/var&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b5f67b5a6931cc71d31a27499876eeae4f2435fe" translate="yes" xml:space="preserve">
          <source>Unique value associated with the existing item. Generated by memcache.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="39386022395f0ff0b7bdd1fdca6920ad5338a27d" translate="yes" xml:space="preserve">
          <source>Unix - If not explicitly set in the &lt;var&gt;php.ini&lt;/var&gt;, the default extension directory depends on</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f11986838ebdf52fcfbdf057157bea123ec56120" translate="yes" xml:space="preserve">
          <source>Unix Epoch Time timestamp (same as the &lt;a href=&quot;function.time&quot;&gt;time()&lt;/a&gt; function)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="507e50156d8bdf0cfb57c125df846d3ae79911a7" translate="yes" xml:space="preserve">
          <source>Unix style paths with forward slashes can cause significant performance degradation on Windows systems; be sure to call &lt;a href=&quot;function.realpath&quot;&gt;realpath()&lt;/a&gt; in such a case.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e0d2cd88259f646d9dc5a9c9cbf893f32e349f53" translate="yes" xml:space="preserve">
          <source>Unix timestamp representing the date.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7cf09a4d635ce95f845e36a63dd1766c2b1e0bc1" translate="yes" xml:space="preserve">
          <source>Unknown node type(very common). Further &lt;a href=&quot;function.stat&quot;&gt;stat()&lt;/a&gt; needed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8a7d64a5938dc71713a8f6e9830c54ee03d5d7c3" translate="yes" xml:space="preserve">
          <source>Unless &lt;strong&gt;&lt;code&gt;PGSQL_DML_STRING&lt;/code&gt;&lt;/strong&gt; is passed, the function now returns the connection resource instead of &lt;strong&gt;&lt;code&gt;TRUE&lt;/code&gt;&lt;/strong&gt; on success.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f2315a47416106dbbfbc532927cf17d832b4e1cc" translate="yes" xml:space="preserve">
          <source>Unless autoloading is used, then classes must be defined before they are used. If a class extends another, then the parent class must be declared before the child class structure. This rule applies to classes that inherit other classes and interfaces.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0d41316e6207b35d786c1eae77f7b65e95e81a37" translate="yes" xml:space="preserve">
          <source>Unless you lower your warning level in your &lt;var&gt;php.ini&lt;/var&gt; sufficiently or prefix your LDAP commands with &lt;em&gt;@&lt;/em&gt; (at) characters to suppress warning output, the errors generated will also show up in your HTML output.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1e39146709e19304173d4141c32c90e6d1abb82e" translate="yes" xml:space="preserve">
          <source>Unless you lower your warning level in your &lt;var&gt;php.ini&lt;/var&gt; sufficiently or prefix your LDAP commands with @ (at) characters to suppress warning output, the errors generated will also show up in your HTML output.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a98daccb75487603147394008a102afcc6dd788c" translate="yes" xml:space="preserve">
          <source>Unlike &lt;a href=&quot;class.evtimer&quot;&gt;EvTimer&lt;/a&gt; , &lt;strong&gt;EvPeriodic&lt;/strong&gt; watchers are not based on real time(or relative time, the physical time that passes) but on wall clock time(absolute time, calendar or clock). The difference is that wall clock time can run faster or slower than real time, and time jumps are not uncommon(e.g. when adjusting it).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a34e8cf6b0a90bde7c0c386880ca5c0cb49c7e74" translate="yes" xml:space="preserve">
          <source>Unlike &lt;a href=&quot;class.intlcalendar#intlcalendar.constants.field-week-of-month&quot;&gt;&lt;strong&gt;&lt;code&gt;IntlCalendar::FIELD_WEEK_OF_MONTH&lt;/code&gt;&lt;/strong&gt;&lt;/a&gt; and &lt;a href=&quot;class.intlcalendar#intlcalendar.constants.field-week-of-year&quot;&gt;&lt;strong&gt;&lt;code&gt;IntlCalendar::FIELD_WEEK_OF_YEAR&lt;/code&gt;&lt;/strong&gt;&lt;/a&gt;, this value does not depend on &lt;a href=&quot;intlcalendar.getfirstdayofweek&quot;&gt;IntlCalendar::getFirstDayOfWeek()&lt;/a&gt; or on &lt;a href=&quot;intlcalendar.getminimaldaysinfirstweek&quot;&gt;IntlCalendar::getMinimalDaysInFirstWeek()&lt;/a&gt;. The first Monday is the first Monday, even if it occurs in a week that belongs to the previous month.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8ced362eb38f6bf9be982cbe91d1603003b56868" translate="yes" xml:space="preserve">
          <source>Unlike &lt;a href=&quot;ev.feedsignalevent&quot;&gt;Ev::feedSignalEvent()&lt;/a&gt; , this works regardless of which loop has registered the signal.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0d6ba4fe5f9f0e8e0022f931db5d16f0d82c6f57" translate="yes" xml:space="preserve">
          <source>Unlike &lt;a href=&quot;function.array-diff-assoc&quot;&gt;array_diff_assoc()&lt;/a&gt; a user supplied callback function is used for the indices comparison, not internal function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a33e817f36e7081b3fd18db5315b3bff9288f82f" translate="yes" xml:space="preserve">
          <source>Unlike &lt;a href=&quot;function.array-diff-key&quot;&gt;array_diff_key()&lt;/a&gt; a user supplied callback function is used for the indices comparison, not internal function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8e7acf1ad196f315d057f57a4e5efdbf3929f798" translate="yes" xml:space="preserve">
          <source>Unlike &lt;a href=&quot;function.fopen&quot;&gt;fopen()&lt;/a&gt; and other similar functions, the return value of &lt;strong&gt;zip_entry_open()&lt;/strong&gt; only indicates the result of the operation and is not needed for reading or closing the directory entry.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="be2dcd5aa77282a99228daac7dda3a701328b1ec" translate="yes" xml:space="preserve">
          <source>Unlike all of the other &lt;a href=&quot;language.variables.superglobals&quot;&gt;superglobals&lt;/a&gt;, &lt;var&gt;&lt;var&gt;$GLOBALS&lt;/var&gt;&lt;/var&gt; has essentially always been available in PHP.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c2f904953d77b83b728cac0e46e7b609b8cfbf9f" translate="yes" xml:space="preserve">
          <source>Unlike most of the other GMP functions, &lt;strong&gt;gmp_clrbit()&lt;/strong&gt; must be called with a GMP resource that already exists (using &lt;a href=&quot;function.gmp-init&quot;&gt;gmp_init()&lt;/a&gt; for example). One will not be automatically created.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="512c9f7067cf47c68d270aa1007e9a8bb741f92c" translate="yes" xml:space="preserve">
          <source>Unlike most of the other GMP functions, &lt;strong&gt;gmp_setbit()&lt;/strong&gt; must be called with a GMP resource that already exists (using &lt;a href=&quot;function.gmp-init&quot;&gt;gmp_init()&lt;/a&gt; for example). One will not be automatically created.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5c6b7b95ea230ac3237eedde8efd4f402ef1b14e" translate="yes" xml:space="preserve">
          <source>Unlike sandbox child variable access, the variable scope is not limited to globals only. By setting the &lt;em&gt;parent_scope&lt;/em&gt; setting to an appropriate integer value, other scopes in the active call stack may be inspected instead. A value of 0 (Default) will direct variable access at the global scope. 1 will point variable access at whatever variable scope was active at the time the current block of sandbox code was executed. Higher values progress back through the functions that called the functions that led to the sandbox executing code that tried to access its own parent's variables.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="669b2e7cce60c00353ec48ecf286d03aefc68daf" translate="yes" xml:space="preserve">
          <source>Unlike some other languages, backticks have no special meaning within double-quoted strings.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3975c62dc759e6834e43f17ce45a2231333480ad" translate="yes" xml:space="preserve">
          <source>Unlike the &lt;a href=&quot;function.strpos&quot;&gt;strpos()&lt;/a&gt;, &lt;strong&gt;stripos()&lt;/strong&gt; is case-insensitive.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4f0b75c8e12a2d45e7a470f216507b09a8d622bb" translate="yes" xml:space="preserve">
          <source>Unlike the &lt;a href=&quot;function.strrpos&quot;&gt;strrpos()&lt;/a&gt;, &lt;strong&gt;strripos()&lt;/strong&gt; is case-insensitive.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f0d48ef34b929459817c5409fbb1b2a61f7b00db" translate="yes" xml:space="preserve">
          <source>Unlike the function &lt;a href=&quot;function.date&quot;&gt;date()&lt;/a&gt;, &lt;strong&gt;idate()&lt;/strong&gt; accepts just one char in the &lt;code&gt;format&lt;/code&gt; parameter.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6305aec9b385df8673ffe6240d41a62c758250e0" translate="yes" xml:space="preserve">
          <source>Unlike with other methods, PHP will not generate an &lt;strong&gt;&lt;code&gt;E_STRICT&lt;/code&gt;&lt;/strong&gt; level error message when &lt;a href=&quot;language.oop5.decon#object.construct&quot;&gt;__construct()&lt;/a&gt; is overridden with different parameters than the parent &lt;a href=&quot;language.oop5.decon#object.construct&quot;&gt;__construct()&lt;/a&gt; method has.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="697516b1578f375a35f8f52fd0a55568ced63da4" translate="yes" xml:space="preserve">
          <source>Unlock the referenced objects storage for the calling context</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6e0619eec01b02c1cf1b64cc6d6dbf2856b335ac" translate="yes" xml:space="preserve">
          <source>Unpacking nested arrays with &lt;a href=&quot;function.list&quot;&gt;list()&lt;/a&gt; is supported.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="47c9d758585ac54b4a57a28a67cf24e58c68a2bc" translate="yes" xml:space="preserve">
          <source>Unpacking nested arrays with list()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8d270402a52d91f2960e7300244ac19b349d32cb" translate="yes" xml:space="preserve">
          <source>Unpacks from a binary string into an array according to the given &lt;code&gt;format&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a270a5574d32e8adfe38a87489b29291a3f4a791" translate="yes" xml:space="preserve">
          <source>Unqualified name</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="574ff635180066bbaae5260131511c28dd776258" translate="yes" xml:space="preserve">
          <source>Unqualified name, or an unprefixed class name like &lt;em&gt;$a = new foo();&lt;/em&gt; or &lt;em&gt;foo::staticmethod();&lt;/em&gt;. If the current namespace is &lt;em&gt;currentnamespace&lt;/em&gt;, this resolves to &lt;em&gt;currentnamespace\foo&lt;/em&gt;. If the code is global, non-namespaced code, this resolves to &lt;em&gt;foo&lt;/em&gt;.  One caveat: unqualified names for functions and constants will resolve to global functions and constants if the namespaced function or constant is not defined. See &lt;a href=&quot;language.namespaces.fallback&quot;&gt;Using namespaces: fallback to global function/constant&lt;/a&gt; for details.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="07b032b56f7aa399f0c5a6580292f3e83d7b1fad" translate="yes" xml:space="preserve">
          <source>Unread</source>
          <target state="translated">Unread</target>
        </trans-unit>
        <trans-unit id="63cb2f57c42a516d82b6ca43574e2d54cc8da4d1" translate="yes" xml:space="preserve">
          <source>Unrecognized characters in the format string will be printed as-is. The &lt;em&gt;Z&lt;/em&gt; format will always return &lt;em&gt;0&lt;/em&gt; when using &lt;a href=&quot;function.gmdate&quot;&gt;gmdate()&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="649f889346c286d6cefa014c65c2f17c2d5b93d0" translate="yes" xml:space="preserve">
          <source>Unrecognized characters in the format string will cause the parsing to fail and an error message is appended to the returned structure. You can query error messages with &lt;a href=&quot;datetime.getlasterrors&quot;&gt;DateTime::getLastErrors()&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="817eb7f935d4057f36cf909374a375f961894d14" translate="yes" xml:space="preserve">
          <source>Unregisters a function name with the job servers ensuring that no more jobs (for that function) are sent to this worker.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cc2b0260f2e76a6fe7485e51f82f2c7e640d70cb" translate="yes" xml:space="preserve">
          <source>Unregisters all previously registered functions, ensuring that no more jobs are sent to this worker.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b3d62a9661211df4a825d027f030a2b4c59e74f0" translate="yes" xml:space="preserve">
          <source>Unseen - &lt;em&gt;U&lt;/em&gt; if not seen AND not recent, ' ' if seen OR not seen and recent</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7ddd6abb43a6d04254ed16659bd21d644693e40c" translate="yes" xml:space="preserve">
          <source>Unserialize.</source>
          <target state="translated">Unserialize.</target>
        </trans-unit>
        <trans-unit id="7a29f49bad8096af9def0fb69814b25b467bef32" translate="yes" xml:space="preserve">
          <source>Unserializes a serialized &lt;a href=&quot;class.arrayobject&quot;&gt;ArrayObject&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b524ee8088f47a1a2d4562af023ebe3e32aa636c" translate="yes" xml:space="preserve">
          <source>Unserializes storage entries and attach them to the current storage.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0fb91c4b78474686b2277038ffe02d2344f48e29" translate="yes" xml:space="preserve">
          <source>Unserializes the storage, from &lt;a href=&quot;spldoublylinkedlist.serialize&quot;&gt;SplDoublyLinkedList::serialize()&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="061e01a2ea791b4e2b16430ac5f4e160d13e6757" translate="yes" xml:space="preserve">
          <source>Unsets a value for an offset.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="431f0ad3c8a0650d5320b3844c8f56e990984d75" translate="yes" xml:space="preserve">
          <source>Unsets an offset.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3e3d9feec526ef1167fa6921cb34862d869a82de" translate="yes" xml:space="preserve">
          <source>Unsets the value at the specified index.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="539db806f400b9f91c4edc980e327ce9e8528d6e" translate="yes" xml:space="preserve">
          <source>Unsets the value for the property. This is used when the object is treated as an array. This object is read-only. This should never be attempted.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="471f7340795419cefbcdda0b7415f6b095a79b07" translate="yes" xml:space="preserve">
          <source>Unsetting References</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="01c1354e5c709b37c70eb5dd47a31015840bbdf1" translate="yes" xml:space="preserve">
          <source>Unsetting References &amp;rarr;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="539250bc47c76ed5a6c137e59f1f28e8778b6ce8" translate="yes" xml:space="preserve">
          <source>Unspecified IP address family</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d772bbf32e31a6a7d487023a0c55da6ec2574181" translate="yes" xml:space="preserve">
          <source>Unsubscribe from the specified &lt;code&gt;mailbox&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5df36a7aaa7bc305be39b354ddbcb95774027e7b" translate="yes" xml:space="preserve">
          <source>Untaint strings</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c29741c3d91473a7f5c3d7f35420f647854745b4" translate="yes" xml:space="preserve">
          <source>Until PHP 4.3.0, omitting it would assume 1024 as the line length. If the majority of the lines in the file are all larger than 8KB, it is more resource efficient for your script to specify the maximum line length.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="42871ee7aa3897b9bb12ccbe7a8b76d544d6cea6" translate="yes" xml:space="preserve">
          <source>Unused as of PHP 7.2.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b59b414f94482ab819d74fbae36df53fea23c9e4" translate="yes" xml:space="preserve">
          <source>Unused variable, here for compatibility with PEAR's PHP_Archive.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="df2ddc85feb25989cfb9334e6981f1fcc7ba2b74" translate="yes" xml:space="preserve">
          <source>Up to (and including) PHP 4.1.0 &lt;var&gt;&lt;var&gt;$regs&lt;/var&gt;&lt;/var&gt; will be filled with exactly ten elements, even though more or fewer than ten parenthesized substrings may actually have matched. This has no effect on &lt;strong&gt;ereg()&lt;/strong&gt;'s ability to match more substrings. If no matches are found, &lt;em&gt;$regs&lt;/em&gt; will not be altered by &lt;strong&gt;ereg()&lt;/strong&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cef8037476329667f38afb009d762a21a449de85" translate="yes" xml:space="preserve">
          <source>Up to &lt;code&gt;len&lt;/code&gt; bytes will be fetched from remote host.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b7989bf7075a73eca3bf762996f0a7c24dff5fb1" translate="yes" xml:space="preserve">
          <source>Up to &lt;code&gt;length&lt;/code&gt; number of bytes read.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c19ca48d7694ee0e5ba95e12e13fcba82f1bd3f2" translate="yes" xml:space="preserve">
          <source>UpdateResponse (class)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a74a2b7feb61d94d04514abb82a21dafbe8854ad" translate="yes" xml:space="preserve">
          <source>UpdateResponse::__construct</source>
          <target state="translated">UpdateResponse::__construct</target>
        </trans-unit>
        <trans-unit id="64fa549528b33037092e5192c15189b39cad8549" translate="yes" xml:space="preserve">
          <source>UpdateResponse::__destruct</source>
          <target state="translated">UpdateResponse::__destruct</target>
        </trans-unit>
        <trans-unit id="946f4d54a981fd9079228e49819c472b35db09d4" translate="yes" xml:space="preserve">
          <source>Updates a value at a given index.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="15ca81751e3216d38a06d7d575abeb3a47ade63d" translate="yes" xml:space="preserve">
          <source>Updates all values by applying a &lt;code&gt;callback&lt;/code&gt; function to each value in the deque.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b4dc03d5fc700ff569d95d52c107247f00d654d7" translate="yes" xml:space="preserve">
          <source>Updates all values by applying a &lt;code&gt;callback&lt;/code&gt; function to each value in the map.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ae8ce8689966de6ca794628554eef79712b96e05" translate="yes" xml:space="preserve">
          <source>Updates all values by applying a &lt;code&gt;callback&lt;/code&gt; function to each value in the sequence.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="da2e1d13c78c0db83f27220f76ca6fbe4cd9c4f9" translate="yes" xml:space="preserve">
          <source>Updates all values by applying a &lt;code&gt;callback&lt;/code&gt; function to each value in the vector.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="81936b1cd6d6c063a86cea6f0c547d34a27a91be" translate="yes" xml:space="preserve">
          <source>Updates the map with a new key-value pair. If the key already existed in the map, the old value is replaced with the new.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1099be6eb087ca41e84dd8be033fee73106b4d7c" translate="yes" xml:space="preserve">
          <source>Upon failure, an &lt;strong&gt;&lt;code&gt;E_WARNING&lt;/code&gt;&lt;/strong&gt; is emitted.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bf94b9f2315928e9965b83570ff315e1a32383cf" translate="yes" xml:space="preserve">
          <source>Upon success, &lt;a href=&quot;streamwrapper.stream-tell&quot;&gt;streamWrapper::stream_tell()&lt;/a&gt; is called directly after calling &lt;strong&gt;streamWrapper::stream_seek()&lt;/strong&gt;. If &lt;a href=&quot;streamwrapper.stream-tell&quot;&gt;streamWrapper::stream_tell()&lt;/a&gt; fails, the return value to the caller function will be set to &lt;strong&gt;&lt;code&gt;FALSE&lt;/code&gt;&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f2802bd3c73eccef878be8cec3a46dc2535698c4" translate="yes" xml:space="preserve">
          <source>Upon success, returns 0; otherwise, returns -1.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4570277f0a5a626715d642e62f45a8f02fc8f970" translate="yes" xml:space="preserve">
          <source>Upon success, returns 0; otherwise, returns -1. Note that seeking past EOF is not considered an error.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a4d2a2bd0c41b85141f245fd995d643533031c6d" translate="yes" xml:space="preserve">
          <source>Upon successful completion the message queue data structure is updated as follows: &lt;code&gt;msg_lspid&lt;/code&gt; is set to the process-ID of the calling process, &lt;code&gt;msg_qnum&lt;/code&gt; is incremented by 1 and &lt;code&gt;msg_stime&lt;/code&gt; is set to the current time.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ccc9a0794eab6e2a7dcf440076e10a0eac4f1c6b" translate="yes" xml:space="preserve">
          <source>Upon successful completion the message queue data structure is updated as follows: &lt;em&gt;msg_lrpid&lt;/em&gt; is set to the process-ID of the calling process, &lt;em&gt;msg_qnum&lt;/em&gt; is decremented by 1 and &lt;em&gt;msg_rtime&lt;/em&gt; is set to the current time.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9988d980bb2faf6f7fc3bb985c93152da239fcab" translate="yes" xml:space="preserve">
          <source>Upon successful completion, returns &lt;a href=&quot;language.types.string&quot;&gt;string&lt;/a&gt; of the pathname to the current controlling terminal. Otherwise &lt;strong&gt;&lt;code&gt;FALSE&lt;/code&gt;&lt;/strong&gt; is returned and errno is set, which can be checked with &lt;a href=&quot;function.posix-get-last-error&quot;&gt;posix_get_last_error()&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eefb0b1f58105669405f84b928ff067c03bd34de" translate="yes" xml:space="preserve">
          <source>Upper case letter</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b4ce669c22528df36fc65092de8d1baa51c9a913" translate="yes" xml:space="preserve">
          <source>Upper left x coordinate.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7b2c19858b83a2a677e196512989387a642879a1" translate="yes" xml:space="preserve">
          <source>Upper left y coordinate 0, 0 is the top left corner of the image.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bdae822f18bd64822f1a57d4373375bfe5169364" translate="yes" xml:space="preserve">
          <source>Uppercase Ante meridiem and Post meridiem</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ff938eb09391acdb83f93a789223a56b65ce376c" translate="yes" xml:space="preserve">
          <source>Usage of &lt;strong&gt;parse_str()&lt;/strong&gt; without a second parameter now emits an &lt;strong&gt;&lt;code&gt;E_DEPRECATED&lt;/code&gt;&lt;/strong&gt; notice.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="29be6163da2e1f41a4fc4d34cb2c66aa5b01ea18" translate="yes" xml:space="preserve">
          <source>Usage of a &lt;a href=&quot;language.types.string&quot;&gt;string&lt;/a&gt; as the &lt;code&gt;assertion&lt;/code&gt; became deprecated. It now emits an &lt;strong&gt;&lt;code&gt;E_DEPRECATED&lt;/code&gt;&lt;/strong&gt; notice when both &lt;a href=&quot;https://secure.php.net/manual/en/info.configuration.php#ini.assert.active&quot;&gt;assert.active&lt;/a&gt; and &lt;a href=&quot;https://secure.php.net/manual/en/ini.core.php#ini.zend.assertions&quot;&gt;zend.assertions&lt;/a&gt; are set to &lt;em&gt;1&lt;/em&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="05913502dbe640189757892791a1131afd8fc118" translate="yes" xml:space="preserve">
          <source>Usage of non-cryptographic hash functions (adler32, crc32, crc32b, fnv132, fnv1a32, fnv164, fnv1a64, joaat) was disabled.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="306b9b69ad8c6409e2c3c056d45f1d0aba1775cf" translate="yes" xml:space="preserve">
          <source>Usage of non-cryptographic hash functions (adler32, crc32, crc32b, fnv132, fnv1a32, fnv164, fnv1a64, joaat) with &lt;strong&gt;&lt;code&gt;HASH_HMAC&lt;/code&gt;&lt;/strong&gt; was disabled.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c141feb446f57b6539cca9696200be6978cd82b7" translate="yes" xml:space="preserve">
          <source>Use &lt;a href=&quot;cachingiterator.current&quot;&gt;current&lt;/a&gt; for conversion to string.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="74f7893d925127c551397bde84d8549658283a3f" translate="yes" xml:space="preserve">
          <source>Use &lt;a href=&quot;cachingiterator.getinneriterator&quot;&gt;inner&lt;/a&gt; for conversion to string.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6fec193b61609fef52ff7b9e5c6176a8b066e248" translate="yes" xml:space="preserve">
          <source>Use &lt;a href=&quot;cachingiterator.key&quot;&gt;key&lt;/a&gt; for conversion to string.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="68eb083f6f4a5bcf9d9973b72f4c5437640b56d4" translate="yes" xml:space="preserve">
          <source>Use &lt;a href=&quot;datetime.getlasterrors&quot;&gt;DateTime::getLastErrors()&lt;/a&gt; to find out whether trailing data was present.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="992162cf0ebf6df373684aaa0b3b2cd76b32bc60" translate="yes" xml:space="preserve">
          <source>Use &lt;a href=&quot;function.extension-loaded&quot;&gt;extension_loaded()&lt;/a&gt; to test whether a given extension is already available or not. This works on both built-in extensions and dynamically loaded ones (either through &lt;var&gt;php.ini&lt;/var&gt; or &lt;strong&gt;dl()&lt;/strong&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8ec561eae710f17d369009ac9d8114a90d728165" translate="yes" xml:space="preserve">
          <source>Use &lt;a href=&quot;function.libxml-use-internal-errors&quot;&gt;libxml_use_internal_errors()&lt;/a&gt; to suppress all XML errors, and &lt;a href=&quot;function.libxml-get-errors&quot;&gt;libxml_get_errors()&lt;/a&gt; to iterate over them afterwards.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="49c6047133069eb750edc27e4373df130341c969" translate="yes" xml:space="preserve">
          <source>Use &lt;a href=&quot;function.pg-get-result&quot;&gt;pg_get_result()&lt;/a&gt; to determine the query result.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="66b6494f20dcf5e2482518a57edfea9988b276b7" translate="yes" xml:space="preserve">
          <source>Use &lt;a href=&quot;function.pg-result-error&quot;&gt;pg_result_error()&lt;/a&gt;, &lt;a href=&quot;function.pg-result-error-field&quot;&gt;pg_result_error_field()&lt;/a&gt;, &lt;a href=&quot;function.pg-result-status&quot;&gt;pg_result_status()&lt;/a&gt; and &lt;a href=&quot;function.pg-connection-status&quot;&gt;pg_connection_status()&lt;/a&gt; for better error handling.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="747cc1e8f9d0ea2516b134b9c461735b8e83e40e" translate="yes" xml:space="preserve">
          <source>Use &lt;strong&gt;&lt;code&gt;TRUE&lt;/code&gt;&lt;/strong&gt; to activate the lenient mode; &lt;strong&gt;&lt;code&gt;FALSE&lt;/code&gt;&lt;/strong&gt; otherwise.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5bc31215cb2464529f475256baeb10fadab6594e" translate="yes" xml:space="preserve">
          <source>Use &lt;strong&gt;PDOStatement::columnCount()&lt;/strong&gt; to return the number of columns in the result set represented by the PDOStatement object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="392b1fe0833898f05193aff8005660e7033027ff" translate="yes" xml:space="preserve">
          <source>Use SSL (encryption)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="46fe680044eca6e3657c41d66c7c2b1ed67e00b9" translate="yes" xml:space="preserve">
          <source>Use SolrQuery::FACET_SORT_INDEX for sorting by index order or SolrQuery::FACET_SORT_COUNT for sorting by count.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b8dd9a5ca8f548c195b98ee0125c57715752bea1" translate="yes" xml:space="preserve">
          <source>Use SolrResponse::PARSE_SOLR_OBJ or SolrResponse::PARSE_SOLR_DOC</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b9fee576c23e4ccef68947099dbe8d49bcc839b0" translate="yes" xml:space="preserve">
          <source>Use SpanScorer to highlight phrase terms only when they appear within the query phrase in the document.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2f8c4aec21fae9c08d0bd3b570bb006285447ea7" translate="yes" xml:space="preserve">
          <source>Use W3C XSD schema to validate the document as it is processed. Activation is only possible before the first Read().</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="806d9abad1aefb9a4f6510b30d3a4345847d5e9d" translate="yes" xml:space="preserve">
          <source>Use cases:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cf3720ed9545a217069ad0a5e9b4af86c9439457" translate="yes" xml:space="preserve">
          <source>Use compression protocol</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2fb0a11b22461c82e35ecece56bfbd3be512ac86" translate="yes" xml:space="preserve">
          <source>Use functions from the &lt;a href=&quot;https://secure.php.net/manual/en/book.gmp.php&quot;&gt;gmp&lt;/a&gt; extension for bitwise manipulation on numbers beyond &lt;em&gt;PHP_INT_MAX&lt;/em&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9b2d6fb96fe494ea7629fea87c4ad9a2fa71eae9" translate="yes" xml:space="preserve">
          <source>Use grouping separator.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a0edc010cf498b41d96905818373053a4eddf045" translate="yes" xml:space="preserve">
          <source>Use normal pixel blending (equivalent of passing &lt;strong&gt;&lt;code&gt;FALSE&lt;/code&gt;&lt;/strong&gt; to &lt;a href=&quot;function.imagealphablending&quot;&gt;imagealphablending()&lt;/a&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6355743e9852d0bfbb606e2a0c5512feb3b0456f" translate="yes" xml:space="preserve">
          <source>Use of &lt;a href=&quot;https://secure.php.net/manual/en/zlib.configuration.php#ini.zlib.output-compression&quot;&gt;zlib.output_compression&lt;/a&gt; is recommended instead of &lt;a href=&quot;function.ob-gzhandler&quot;&gt;ob_gzhandler()&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="115b3f20cc96cf5ff001a7dadfa830eb32c9bf5f" translate="yes" xml:space="preserve">
          <source>Use of &lt;em&gt;LOG_LOCAL0&lt;/em&gt; through &lt;em&gt;LOG_LOCAL7&lt;/em&gt; for the &lt;code&gt;facility&lt;/code&gt; parameter of &lt;a href=&quot;function.openlog&quot;&gt;openlog()&lt;/a&gt; is not available in Windows.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="94ada6c01426d8588ce071643b0ead8d0c29a2ea" translate="yes" xml:space="preserve">
          <source>Use of &lt;strong&gt;stream_select()&lt;/strong&gt; on file descriptors returned by &lt;a href=&quot;function.proc-open&quot;&gt;proc_open()&lt;/a&gt; will fail and return &lt;strong&gt;&lt;code&gt;FALSE&lt;/code&gt;&lt;/strong&gt; under Windows.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3a173b0ffb28ea6367eff2019eea56584689a05a" translate="yes" xml:space="preserve">
          <source>Use of parentheses, even when not strictly necessary, can often increase readability of the code by making grouping explicit rather than relying on the implicit operator precedence and associativity.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="146b3e024ad892c78853a396f1c9f66a1047ed83" translate="yes" xml:space="preserve">
          <source>Use of return</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="43cd393f31c9db27d9dc973b4ad572c7c24c560f" translate="yes" xml:space="preserve">
          <source>Use of the &lt;strong&gt;pg_put_line()&lt;/strong&gt; causes most large object operations, including &lt;a href=&quot;function.pg-lo-read&quot;&gt;pg_lo_read()&lt;/a&gt; and &lt;a href=&quot;function.pg-lo-tell&quot;&gt;pg_lo_tell()&lt;/a&gt;, to subsequently fail. You can use &lt;a href=&quot;function.pg-copy-from&quot;&gt;pg_copy_from()&lt;/a&gt; and &lt;a href=&quot;function.pg-copy-to&quot;&gt;pg_copy_to()&lt;/a&gt; instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="67e9ba08475a2f7a236606ad10ef07c024b5f222" translate="yes" xml:space="preserve">
          <source>Use of this modifier is &lt;em&gt;discouraged&lt;/em&gt;, as it can easily introduce security vulnerabilites:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2c64b332856622c797a55057852881bdace0bbae" translate="yes" xml:space="preserve">
          <source>Use one of the following constants to specify the implementation of the algorithm to use.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e72592b69c1d278e5da07a96d8d841ba5408551f" translate="yes" xml:space="preserve">
          <source>Use one of the following constants to specify the mode in which rounding occurs.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4df12c4bde8fdad298821c4d8fbd8440d5b4aa2d" translate="yes" xml:space="preserve">
          <source>Use parentheses to ensure the desired &lt;a href=&quot;language.operators.precedence&quot;&gt;precedence&lt;/a&gt;. For example, &lt;em&gt;$a &amp;amp; $b == true&lt;/em&gt; evaluates the equivalency then the bitwise and; while &lt;em&gt;($a &amp;amp; $b) == true&lt;/em&gt; evaluates the bitwise and then the equivalency.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6d2dcb7ee7ffca3f8e023e0d49d5045a0007105a" translate="yes" xml:space="preserve">
          <source>Use pixel replacement (equivalent of passing &lt;strong&gt;&lt;code&gt;TRUE&lt;/code&gt;&lt;/strong&gt; to &lt;a href=&quot;function.imagealphablending&quot;&gt;imagealphablending()&lt;/a&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="33529c1491f698075df9e2d34e1b96ee36498057" translate="yes" xml:space="preserve">
          <source>Use significant digits.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="55fd2850c187c4cd453b269b9a762b10a3d55d15" translate="yes" xml:space="preserve">
          <source>Use the &lt;a href=&quot;function.stream-context-get-options&quot;&gt;stream_context_get_options()&lt;/a&gt; to parse the context.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ad9cc76786d452250b472a9db0044a645219032a" translate="yes" xml:space="preserve">
          <source>Use the factory methods &lt;a href=&quot;transliterator.create&quot;&gt;Transliterator::create()&lt;/a&gt; or &lt;a href=&quot;transliterator.createfromrules&quot;&gt;Transliterator::createFromRules()&lt;/a&gt; instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7f4e4dd0828c5c4c890407c8e9fe744e70c60be1" translate="yes" xml:space="preserve">
          <source>Use the fast-exponentiation method to raise &lt;code&gt;base&lt;/code&gt; to the power &lt;code&gt;exponent&lt;/code&gt; with respect to the modulus &lt;code&gt;modulus&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="13413e8725a850f7e072ceb1556264f7b5b9f7cf" translate="yes" xml:space="preserve">
          <source>Use this method to check if the file referenced by the SplFileInfo object is a link.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f20bdb6744287ea57bdccb7cf7713e036162a88e" translate="yes" xml:space="preserve">
          <source>Use this method to set a custom class which will be used when &lt;a href=&quot;splfileinfo.getfileinfo&quot;&gt;SplFileInfo::getFileInfo()&lt;/a&gt; and &lt;a href=&quot;splfileinfo.getpathinfo&quot;&gt;SplFileInfo::getPathInfo()&lt;/a&gt; are called. The class name passed to this method must be &lt;a href=&quot;class.splfileinfo&quot;&gt;SplFileInfo&lt;/a&gt; or a class derived from &lt;a href=&quot;class.splfileinfo&quot;&gt;SplFileInfo&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d412404f8548b394b17878cef34cd80bc3df5f3b" translate="yes" xml:space="preserve">
          <source>Use this method to set a custom class which will be used when &lt;a href=&quot;splfileinfo.openfile&quot;&gt;SplFileInfo::openFile()&lt;/a&gt; is called. The class name passed to this method must be &lt;a href=&quot;class.splfileobject&quot;&gt;SplFileObject&lt;/a&gt; or a class derived from &lt;a href=&quot;class.splfileobject&quot;&gt;SplFileObject&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c3c1edc8769f44c3ca7ebd104ad19ec87fe03c83" translate="yes" xml:space="preserve">
          <source>Use this parameter to only allow certain functions to be called from XPath.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0e2dc3445afc178ba4b502174e4e0e5705fce68c" translate="yes" xml:space="preserve">
          <source>Use this parameter to only allow certain functions to be called from XSLT.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a31d2faa488e48f985226ed3908f2ac5c8720d77" translate="yes" xml:space="preserve">
          <source>Use this parameter to output only a specific node without XML declaration rather than the entire document.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3e3d912da85df4a8470e0fe0536f6403b9962fcb" translate="yes" xml:space="preserve">
          <source>Use this parameter to specify return path upon mail delivery failure. This is useful when using PHP as a mail client for multiple users.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="723276b69bbafbf03b76a720d8729642c65ee387" translate="yes" xml:space="preserve">
          <source>Use this public key as a parameter to &lt;strong&gt;openssl_dh_compute_key()&lt;/strong&gt; in order to compute the shared secret.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7bc0ecfd910287aeff993be5cb5e51df2465b888" translate="yes" xml:space="preserve">
          <source>Use to set a function to be called when a &lt;a href=&quot;class.gearmantask&quot;&gt;GearmanTask&lt;/a&gt; is completed, or when &lt;a href=&quot;gearmanjob.sendcomplete&quot;&gt;GearmanJob::sendComplete()&lt;/a&gt; is invoked by a worker (whichever happens first).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="893873b779e6ed32fcc8281a73d749f9f5b41daf" translate="yes" xml:space="preserve">
          <source>Used after changing the error handler function using &lt;a href=&quot;function.set-error-handler&quot;&gt;set_error_handler()&lt;/a&gt;, to revert to the previous error handler (which could be the built-in or a user defined function).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9b52f3ac63927b536eb0dd79279b5040908f82bc" translate="yes" xml:space="preserve">
          <source>Used after changing the exception handler function using &lt;a href=&quot;function.set-exception-handler&quot;&gt;set_exception_handler()&lt;/a&gt;, to revert to the previous exception handler (which could be the built-in or a user defined function).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="40e0a89f4ebeb36f697e85418827abb16063ca85" translate="yes" xml:space="preserve">
          <source>Used as locale parameter with the methods of the various locale affected classes, such as NumberFormatter. This constant would make the methods to use default locale.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0791c38cda46ae1e72ba1650c13767b593a6e957" translate="yes" xml:space="preserve">
          <source>Used for advanced performance control. It tells searchd to forcibly stop search query once &lt;code&gt;cutoff&lt;/code&gt; matches have been found and processed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6e0a42cffddf797ec51dc9abd162caed5c37de18" translate="yes" xml:space="preserve">
          <source>Used for custom serialization</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dda7c76c83fa55ebfef56f23c273f806815f4a51" translate="yes" xml:space="preserve">
          <source>Used for custom serialization.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="96511fd60cf7d9c89db68a86a4b9bedc1bbc664b" translate="yes" xml:space="preserve">
          <source>Used for encoding e-mail messages. Valid languages are &quot;Japanese&quot;, &quot;ja&quot;,&quot;English&quot;,&quot;en&quot; and &quot;uni&quot; (UTF-8). &lt;a href=&quot;function.mb-send-mail&quot;&gt;mb_send_mail()&lt;/a&gt; uses this setting to encode e-mail.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="689100b2cf4ba7e0f00c62f20f333c34cab3947b" translate="yes" xml:space="preserve">
          <source>Used for establishing secure connections using SSL. It must be called before &lt;a href=&quot;mysqli.real-connect&quot;&gt;mysqli_real_connect()&lt;/a&gt;. This function does nothing unless OpenSSL support is enabled.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4ee8ff37b33f379ee35e0fce0d1ef9cf3dad8011" translate="yes" xml:space="preserve">
          <source>Used for the initialization in CBC, CFB, OFB modes, and in some algorithms in STREAM mode. If the provided IV size is not supported by the chaining mode or no IV was provided, but the chaining mode requires one, the function will emit a warning and return &lt;strong&gt;&lt;code&gt;FALSE&lt;/code&gt;&lt;/strong&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1562bb28c11757f3d7ca7ab952ab9ce79fe3464b" translate="yes" xml:space="preserve">
          <source>Used in the TermsComponent</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3cc75916ad3448d78e4fc0683864f2fa00421217" translate="yes" xml:space="preserve">
          <source>Used in the TermsComponent (Duplicated for easier migration)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="309b27d3fd4d21108edbdbc4cf031eb2829ca791" translate="yes" xml:space="preserve">
          <source>Used only in &lt;strong&gt;&lt;code&gt;IMG_CROP_THRESHOLD&lt;/code&gt;&lt;/strong&gt; mode.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="87a26c84ac7741007a09b1d888c10dfb1677b472" translate="yes" xml:space="preserve">
          <source>Used query string.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fef2ee54cf404e3e4dca3ed4e5ac4c0234ad31e2" translate="yes" xml:space="preserve">
          <source>Used to check if the request to the server was successful.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="137102e267177e52c07514994fa009b801b1ebf0" translate="yes" xml:space="preserve">
          <source>Used to control how the results should be sorted.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e265b98195794fc8d82cc175d734746fe887b7e6" translate="yes" xml:space="preserve">
          <source>Used to embed one event loop into another.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dff48631a0696ea143bde5095667345fd368092a" translate="yes" xml:space="preserve">
          <source>Used to get the value of a property. This is used when the object is treated as an array.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d2a0902b5968e2b11216c0ce8752af5b29ea6a9e" translate="yes" xml:space="preserve">
          <source>Used to implement signal detection. See &quot;Constructing signal events&quot; below.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1ae70c2d4e3a6740913b8cefd3d5eb61f5866da0" translate="yes" xml:space="preserve">
          <source>Used to indicate that in addition to the Term-based constraints of a facet field, a count of all matching results which have no value for the field should be computed</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f56d9fe78b634ad7f1cce33293213d1a44a9d59e" translate="yes" xml:space="preserve">
          <source>Used to initiate the retrieval of a result set from the last query executed using the &lt;a href=&quot;mysqli.real-query&quot;&gt;mysqli_real_query()&lt;/a&gt; function on the database connection.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eb515fa50b61d91330a411e56d0b9c2c5262d9f8" translate="yes" xml:space="preserve">
          <source>Used to modify the behavior of a prepared statement. This function may be called multiple times to set several attributes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a9287a1a2b52a60a878c3f82dd014cf60148d34a" translate="yes" xml:space="preserve">
          <source>Used to request if the RDNs are returned with only values or their attributes as well. To get RDNs with the attributes (i.e. in attribute=value format) set &lt;code&gt;with_attrib&lt;/code&gt; to 0 and to get only values set it to 1.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cbf87c3379f6c02d549af15b685a53e66c3eab47" translate="yes" xml:space="preserve">
          <source>Used to request status information from the Gearman server, which will call the specified status callback (set using &lt;a href=&quot;gearmanclient.setstatuscallback&quot;&gt;GearmanClient::setStatusCallback()&lt;/a&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="27d6c7757d66f8af9a5ab6192aa8b2219ba62402" translate="yes" xml:space="preserve">
          <source>Used to send a HTTP header</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="be617683c1822cb928a9305bcc3efac31d255ce9" translate="yes" xml:space="preserve">
          <source>Used to send requests to a Solr server. Currently, cloning and serialization of SolrClient instances is not supported.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ba47d528d6df0ba681844f0ebd947c39ea6e7257" translate="yes" xml:space="preserve">
          <source>Used to set extra connect options and affect behavior for a connection.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4f291fb532c161e21b0fd2876f1de84af55aecca" translate="yes" xml:space="preserve">
          <source>Used to specify that the facet should sort by count</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b65f3327a85269cf3841900c168c40aa002a1568" translate="yes" xml:space="preserve">
          <source>Used to specify that the facet should sort by count (Duplicated for easier migration)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="495934133919421bae68e8a48f09dfe419474860" translate="yes" xml:space="preserve">
          <source>Used to specify that the facet should sort by index</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0883bb6840e460bb62e41024a7746099bb644f02" translate="yes" xml:space="preserve">
          <source>Used to specify that the facet should sort by index (Duplicated for easier migration)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="444c3f151c9b55c5d1204478effd451e1478f4c6" translate="yes" xml:space="preserve">
          <source>Used to specify that the sorting should be in acending order</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="611acbfe1321189ddfeb199179c4abb2b8e80d68" translate="yes" xml:space="preserve">
          <source>Used to specify that the sorting should be in acending order (Duplicated for easier migration)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="100a878edb84a5383d04a969b13e729785fa4437" translate="yes" xml:space="preserve">
          <source>Used to specify that the sorting should be in descending order</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c8e94f817761fda4df7ce0e364a6e16b6a74a976" translate="yes" xml:space="preserve">
          <source>Used to specify that the sorting should be in descending order (Duplicated for easier migration)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4081a88268db59d63fb5b581fe93bb5fe301cd6b" translate="yes" xml:space="preserve">
          <source>Used to trigger a user error condition, it can be used in conjunction with the built-in error handler, or with a user defined function that has been set as the new error handler (&lt;a href=&quot;function.set-error-handler&quot;&gt;set_error_handler()&lt;/a&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="58bc832926f40e4e58a69726298326b412d577af" translate="yes" xml:space="preserve">
          <source>Used when retrieving system information from the system servlet.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="55630dea364ea94fc2907e50afbd5579081b2abc" translate="yes" xml:space="preserve">
          <source>Used when the object is treated as an array to add a field to the document.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ee3e2bc9e8b71661977d345a2c36909e97b7cc35" translate="yes" xml:space="preserve">
          <source>Used when updating the ping servlet.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1b0be778751dd84781b3c3026ce1c43ce2ee6959" translate="yes" xml:space="preserve">
          <source>Used when updating the search servlet.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8b75d4af83c2a4b332ab910635a803522f5e9647" translate="yes" xml:space="preserve">
          <source>Used when updating the terms servlet.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4d405307e7bdac0bc7190818a7f99d3706cb2da6" translate="yes" xml:space="preserve">
          <source>Used when updating the threads servlet.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f7a8eb34aeb69850879609916e3e2ab5e8b2ffff" translate="yes" xml:space="preserve">
          <source>Used when updating the update servlet.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="33cc8398531eeec1655e1c8fcddb6c0c6fd1f30b" translate="yes" xml:space="preserve">
          <source>Useful functions</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="531c4549d12e36de278e921bc93ff15df082156c" translate="yes" xml:space="preserve">
          <source>Useful functions and operators</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="87183aded8db33907e148faac7b80a4e32ba9333" translate="yes" xml:space="preserve">
          <source>Useful to handle errors occurred in static methods when there's no object to get error code from.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ad5e2662c4ab3798b491e04bbb1104d5e397edea" translate="yes" xml:space="preserve">
          <source>Usenet new</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ace887c13334357c9aa3496bbf75b4eccad13f9f" translate="yes" xml:space="preserve">
          <source>User &amp;lt;user@example.com&amp;gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="547df9b0e989d686baad9b577525cdeff1708487" translate="yes" xml:space="preserve">
          <source>User &amp;lt;user@example.com&amp;gt;, Another User &amp;lt;anotheruser@example.com&amp;gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="384653a353fa0d7207349a1fa76e43cd7ddc4b17" translate="yes" xml:space="preserve">
          <source>User Fields: Specifies which schema fields the end user shall be allowed to query.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="76689a783a7064421464d9dca4e67c47b3ab00cd" translate="yes" xml:space="preserve">
          <source>User ID of the user in numeric form.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="12223720add70a9393cde61a60f0876068515f89" translate="yes" xml:space="preserve">
          <source>User ID, should be the same as the &lt;code&gt;uid&lt;/code&gt; parameter used when calling the function, and hence redundant.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="585ced06fdc9c4e3df87c0a7a04d3712c5acc6b4" translate="yes" xml:space="preserve">
          <source>User ID. Is ignored when equal to -1.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3c5d636b03538ad369e28cdb41d533956293e78b" translate="yes" xml:space="preserve">
          <source>User custom data associated with the watcher</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="709a1662909b2d4b68fc3ab99b9bec59c4c565bc" translate="yes" xml:space="preserve">
          <source>User custom data attached to the callback.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a27ba0b9a0a05be10267fd461659853aa3fcade1" translate="yes" xml:space="preserve">
          <source>User custom data passed to the callback.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="42fadcc247a43c3bc531faec593404a3298b42dc" translate="yes" xml:space="preserve">
          <source>User error handlers</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="65a434a7c0a6bf1acc6918b0e225df8400daa88b" translate="yes" xml:space="preserve">
          <source>User may define their own Bootstrap class by inheriting &lt;strong&gt;Yaf_Bootstrap_Abstract&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="91515cfc8c655c7a5fb9b26436d135eeedba0d52" translate="yes" xml:space="preserve">
          <source>User name or number.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="57761d2c31979f97c94fcc1f43186fffca2ff68e" translate="yes" xml:space="preserve">
          <source>User specified recursion depth.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0a88cd7be4cd34db1d28b9ead4a33bd6389cae41" translate="yes" xml:space="preserve">
          <source>User-defined functions</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e10c54927b86fb4998ddfa7337e105c096675dab" translate="yes" xml:space="preserve">
          <source>User-supplied values should always be passed as parameters, not interpolated into the query string, where they form possible &lt;a href=&quot;https://secure.php.net/manual/en/security.database.sql-injection.php&quot;&gt; SQL injection&lt;/a&gt; attack vectors and introduce bugs when handling data containing quotes. If for some reason you cannot use a parameter, ensure that interpolated values are &lt;a href=&quot;function.pg-escape-string&quot;&gt;properly escaped&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="89806231812362068de836814998a383643af2ac" translate="yes" xml:space="preserve">
          <source>Users of PHP 5.5 and later may also want to investigate &lt;a href=&quot;https://secure.php.net/manual/en/language.generators.php&quot;&gt;generators&lt;/a&gt;, which provide an alternative way of defining iterators.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6d0b0db0853ccd8c83951f170093864bb4e04ec7" translate="yes" xml:space="preserve">
          <source>Uses a &lt;strong&gt;Ds\Vector&lt;/strong&gt; internally.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1e0885f32a565db442df8fb8968f30d54663d079" translate="yes" xml:space="preserve">
          <source>Uses an incorrect Mersenne Twister implementation which was used as the default up till PHP 7.1.0. This mode is available for backward compatibility.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2f262d325443b363e2d86386405318f6e7ea6b5f" translate="yes" xml:space="preserve">
          <source>Uses less overall memory than an &lt;a href=&quot;language.types.array&quot;&gt;array&lt;/a&gt; for the same number of values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0dd538faf3c17ae3ba3e598fcafb90d8176e039d" translate="yes" xml:space="preserve">
          <source>Uses the 4 corners of the image to attempt to detect the background to crop.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="985cae13a738b8174ada264fcd40f9caf70418c3" translate="yes" xml:space="preserve">
          <source>Uses the fixed, correct, Mersenne Twister implementation, available as of PHP 7.1.0.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="95ecfef009163d7014cd2c3e97ed70744ee037db" translate="yes" xml:space="preserve">
          <source>Uses the normal date parsers and sets up a DateInterval from the relative parts of the parsed string.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="270b51a039bfaf13bf6acfadb1c0aa9934a3d896" translate="yes" xml:space="preserve">
          <source>Using &lt;a href=&quot;language.types.string&quot;&gt;string&lt;/a&gt; as the &lt;code&gt;assertion&lt;/code&gt; is &lt;em&gt;DEPRECATED&lt;/em&gt; as of PHP 7.2.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0b0e8a165ad48cfba8683aba4a77ae2f9269fb19" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;offset&lt;/code&gt; is not equivalent to passing &lt;code&gt;substr($subject, $offset)&lt;/code&gt; to &lt;strong&gt;preg_match()&lt;/strong&gt; in place of the subject string, because &lt;code&gt;pattern&lt;/code&gt; can contain assertions such as &lt;em&gt;^&lt;/em&gt;, &lt;em&gt;$&lt;/em&gt; or &lt;em&gt;(?&amp;lt;=x)&lt;/em&gt;. Compare:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a4426f1bb446da8557c4802e62f54975a1902359" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;offset&lt;/code&gt; is not equivalent to passing &lt;code&gt;substr($subject, $offset)&lt;/code&gt; to &lt;strong&gt;preg_match_all()&lt;/strong&gt; in place of the subject string, because &lt;code&gt;pattern&lt;/code&gt; can contain assertions such as &lt;em&gt;^&lt;/em&gt;, &lt;em&gt;$&lt;/em&gt; or &lt;em&gt;(?&amp;lt;=x)&lt;/em&gt;. See &lt;a href=&quot;function.preg-match&quot;&gt;preg_match()&lt;/a&gt; for examples.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="74957d71f87bc4e280bf05f0190d3887bf974280" translate="yes" xml:space="preserve">
          <source>Using &lt;em&gt;U&lt;/em&gt; as the parameter to &lt;a href=&quot;datetime.format&quot;&gt;DateTime::format()&lt;/a&gt; is an alternative when using PHP 5.2.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="64990d18ac6610b863cbad24d693530086dfdbca" translate="yes" xml:space="preserve">
          <source>Using &lt;em&gt;global&lt;/em&gt; keyword outside a function is not an error. It can be used if the file is included from inside a function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b4ece3360c48b612fde1e6b9425e2b0e40daf994" translate="yes" xml:space="preserve">
          <source>Using &lt;em&gt;static&lt;/em&gt; variables</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aeb7ebe18599c6f78f1bf49ff2828af3f86a43d1" translate="yes" xml:space="preserve">
          <source>Using &lt;strong&gt;inotify_add_watch()&lt;/strong&gt; on a watched object replaces the existing watch. Using the &lt;strong&gt;&lt;code&gt;IN_MASK_ADD&lt;/code&gt;&lt;/strong&gt; constant adds (OR) events to the existing watch.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="44d75eb3ebb4bfff06597a8c699c7d8bc97955b4" translate="yes" xml:space="preserve">
          <source>Using &lt;strong&gt;mail()&lt;/strong&gt; to send a simple email:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e4ff39172993631d6a4ade55b47c1a490960a2ca" translate="yes" xml:space="preserve">
          <source>Using &lt;strong&gt;odbc_num_rows()&lt;/strong&gt; to determine the number of rows available after a SELECT will return -1 with many drivers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="85f65e68c8f8fa07e6ef43cfa9e4c29d31ce958d" translate="yes" xml:space="preserve">
          <source>Using &lt;strong&gt;pg_close()&lt;/strong&gt; is not usually necessary, as non-persistent open connections are automatically closed at the end of the script.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="726b00517a258a147ef1d8d0241f97698d27f340" translate="yes" xml:space="preserve">
          <source>Using Iterables</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f4707f1003a1d8430efebee23583fc4c517accb5" translate="yes" xml:space="preserve">
          <source>Using Phar::convertToData():</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dd6c617e24963650da2b2aae1b1617fc3c704164" translate="yes" xml:space="preserve">
          <source>Using Phar::convertToExecutable():</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e0d2dda6145bc9c5a845bdd8663294857927117e" translate="yes" xml:space="preserve">
          <source>Using PharData::convertToData():</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b8634ac50c4aa20179486873e8c90b145220e085" translate="yes" xml:space="preserve">
          <source>Using PharData::convertToExecutable():</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="977758ef2067592564e5e22c99e12186be63fab7" translate="yes" xml:space="preserve">
          <source>Using a GET form is similar except you'll use the appropriate GET predefined variable instead. GET also applies to the &lt;em&gt;QUERY_STRING&lt;/em&gt; (the information after the '?' in a URL). So, for example, &lt;em&gt;http://www.example.com/test.php?id=3&lt;/em&gt; contains GET data which is accessible with &lt;var&gt;&lt;var&gt;&lt;a href=&quot;reserved.variables.get&quot;&gt;$_GET['id']&lt;/a&gt;&lt;/var&gt;&lt;/var&gt;. See also &lt;var&gt;&lt;var&gt;&lt;a href=&quot;reserved.variables.request&quot;&gt;$_REQUEST&lt;/a&gt;&lt;/var&gt;&lt;/var&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0d642674689834eb493e95f9214d15fd9a4ced4b" translate="yes" xml:space="preserve">
          <source>Using a timeout value of &lt;em&gt;0&lt;/em&gt; allows you to instantaneously poll the status of the streams, however, it is NOT a good idea to use a &lt;em&gt;0&lt;/em&gt; timeout value in a loop as it will cause your script to consume too much CPU time.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a987ddea07b01aa58c4f24a4c2da4691327bef36" translate="yes" xml:space="preserve">
          <source>Using antialiased primitives with transparent background color can end with some unexpected results. The blend method uses the background color as any other colors. The lack of alpha component support does not allow an alpha based antialiasing method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e58f20970a40d8a8e46df5abc590b1f20e7fa2be" translate="yes" xml:space="preserve">
          <source>Using evaluateImage to reduce opacity in an image.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="feaa805d1a4c05028ee0ecb36788fbde4b7ef7a3" translate="yes" xml:space="preserve">
          <source>Using namespaces: Aliasing/Importing</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1f111425e2c85f6e6d0bdbf837e5d8fe77b2080c" translate="yes" xml:space="preserve">
          <source>Using namespaces: Aliasing/Importing &amp;rarr;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f90ca4aa8f51463c35b2073a2e73a680f40c061a" translate="yes" xml:space="preserve">
          <source>Using namespaces: Basics</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="351be1cce07e779f52e1bcd6b7cb62834cf3aef8" translate="yes" xml:space="preserve">
          <source>Using namespaces: Basics &amp;rarr;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="20b09122de6357c50395cc6931a7737faad24028" translate="yes" xml:space="preserve">
          <source>Using namespaces: fallback to global function/constant</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6e5188dab3a792ea8855694356d7b377e1f303f6" translate="yes" xml:space="preserve">
          <source>Using namespaces: fallback to global function/constant &amp;rarr;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c4a581459571c82c2db9b52b9906ab1f9dd8154d" translate="yes" xml:space="preserve">
          <source>Using short tags should be avoided when developing applications or libraries that are meant for redistribution, or deployment on PHP servers which are not under your control, because short tags may not be supported on the target server. For portable, redistributable code, be sure not to use short tags.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="40334acf8e077c7a429a7a95e0dc8c327f50f6a7" translate="yes" xml:space="preserve">
          <source>Using structures with conditions</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="35a6c079180b8e14b1a91c648f7127bc39007318" translate="yes" xml:space="preserve">
          <source>Using the &lt;code&gt;types&lt;/code&gt; parameter, you can specify which request variables to import. You can use 'G', 'P' and 'C' characters respectively for GET, POST and Cookie. These characters are not case sensitive, so you can also use any combination of 'g', 'p' and 'c'. POST includes the POST uploaded file information.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d9163702fdf7f250c0b32f937e7b92d0582ab477" translate="yes" xml:space="preserve">
          <source>Using the &lt;em&gt;as&lt;/em&gt; syntax, one can also adjust the visibility of the method in the exhibiting class.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="69e3270a145503111c099bd297dba76902e9f94f" translate="yes" xml:space="preserve">
          <source>Using the &lt;strong&gt;&lt;code&gt;CRYPT_BLOWFISH&lt;/code&gt;&lt;/strong&gt; algorithm, will result in the &lt;code&gt;str&lt;/code&gt; parameter being truncated to a maximum length of 72 characters.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="55658f052396176e977032bb215ecaff429fe42d" translate="yes" xml:space="preserve">
          <source>Using the &lt;strong&gt;&lt;code&gt;PASSWORD_BCRYPT&lt;/code&gt;&lt;/strong&gt; as the algorithm, will result in the &lt;code&gt;password&lt;/code&gt; parameter being truncated to a maximum length of 72 characters.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dd65df5e9c6293f053c27ee4d9d00707ee55f806" translate="yes" xml:space="preserve">
          <source>Using the Unix timestamp format to construct a new &lt;a href=&quot;class.datetime&quot;&gt;DateTime&lt;/a&gt; object is an alternative when using PHP 5.2, as shown in the example below.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d6983cf95d080ae62ce751c7cefcc4eeb3e741c6" translate="yes" xml:space="preserve">
          <source>Using the available PHP Reserved Predefined Variables, like the &lt;a href=&quot;language.variables.superglobals&quot;&gt;superglobal arrays&lt;/a&gt;, is preferred.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="119b452865d5890e84d066bcf6fb43f2dea7787f" translate="yes" xml:space="preserve">
          <source>Using this command will always cause the current database connection to behave as if was a completely new database connection, regardless of if the operation was completed successfully. This reset includes performing a rollback on any active transactions, closing all temporary tables, and unlocking all locked tables.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3d6ef0ad6e3d47cf5b654c7c123baac85f9dae7b" translate="yes" xml:space="preserve">
          <source>Using this flag in combination with a &lt;code&gt;desiredmsgtype&lt;/code&gt; greater than 0 will cause the function to receive the first message that is not equal to &lt;code&gt;desiredmsgtype&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ffc86c4b9143ade8842db97f5b7e97960ef8ece1" translate="yes" xml:space="preserve">
          <source>Using this function for mathematical operations is not advisable. It is better to use &lt;a href=&quot;datetime.add&quot;&gt;DateTime::add()&lt;/a&gt; and &lt;a href=&quot;datetime.sub&quot;&gt;DateTime::sub()&lt;/a&gt; in PHP 5.3 and later, or &lt;a href=&quot;datetime.modify&quot;&gt;DateTime::modify()&lt;/a&gt; in PHP 5.2.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fb5aaacac7bc5c66d5c26ff549c58e0b78e3f0d0" translate="yes" xml:space="preserve">
          <source>Using this function will use any registered &lt;a href=&quot;language.oop5.autoload&quot;&gt;autoloaders&lt;/a&gt; if the class is not already known.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a9a1deecefff06093132fe19f27c9b6f2d1440cc" translate="yes" xml:space="preserve">
          <source>Using this function without the &lt;code&gt;result&lt;/code&gt; parameter is highly &lt;em&gt;DISCOURAGED&lt;/em&gt; and &lt;em&gt;DEPRECATED&lt;/em&gt; as of PHP 7.2.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eb8a6dc91e874f736f474b13bed027ec4601bb8c" translate="yes" xml:space="preserve">
          <source>Using this method to fetch large result sets will result in a heavy demand on system and possibly network resources. Rather than retrieving all of the data and manipulating it in PHP, consider using the database server to manipulate the result sets. For example, use the WHERE and ORDER BY clauses in SQL to restrict results before retrieving and processing them with PHP.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="287481c9bea658efe6abf8bdc5a2a0a7280082d7" translate="yes" xml:space="preserve">
          <source>Using this parameter is much more efficient than the default action (which is to return all attributes and their associated values). The use of this parameter should therefore be considered good practice.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0b1bebb8718d6cfc91ce7e5802112461b65478a2" translate="yes" xml:space="preserve">
          <source>Using this pattern, both &lt;em&gt;Sun&lt;/em&gt; and &lt;em&gt;Sat&lt;/em&gt; would be stored in backreference 1.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="944953e6df9043cd6618ec604d2c4871e28f7928" translate="yes" xml:space="preserve">
          <source>Usual RPC calls will be issued as HTTP POST requests. If a HTTP GET request is issued to the uri, the service information (commented section above) will be printed on the page</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="364be7fdcef85d5df2b3602982c5519845f4730a" translate="yes" xml:space="preserve">
          <source>Usually an application wants to perform some amount of data buffering in addition to just responding to events. When we want to write data, for example, the usual pattern looks like:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3769dce969013385cf190726134c3c8e5fdbeca6" translate="yes" xml:space="preserve">
          <source>Usually returns either &lt;strong&gt;&lt;code&gt;ZLIB_OK&lt;/code&gt;&lt;/strong&gt; or &lt;strong&gt;&lt;code&gt;ZLIB_STREAM_END&lt;/code&gt;&lt;/strong&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="94656ba56c9518a5817da9946dcf3bf9b9620502" translate="yes" xml:space="preserve">
          <source>Usually there is no need to call this method, since normally it is done within internal object destructors. However, sometimes we have a long-time script allocating lots of instances, or a script with a heavy memory usage, where we need to free resources as soon as possible. In such cases &lt;strong&gt;EventBufferEvent::free()&lt;/strong&gt; may be used to protect the script against running up to the &lt;em&gt;memory_limit&lt;/em&gt; .</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9b02b02255dc64e919eaefb766ac27acbdb387d8" translate="yes" xml:space="preserve">
          <source>Usually these parameters will be passed as single quote delimited strings. The reason for using single quoted strings, is to protect the variable names from parsing, otherwise, if you use double quotes there will be a need to escape the variable names, e.g. &lt;em&gt;\$avar&lt;/em&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8f9ef2d5918ba353644385a345dfc9e75b21b89f" translate="yes" xml:space="preserve">
          <source>Usually used in combination with the other flags. Indicates that a complete stand-alone HTML page needs to be printed including the information indicated by the other flags.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5a6b7523457c000dcc1d506b4e9ee06c53e83412" translate="yes" xml:space="preserve">
          <source>Usually when using two or more arrays, they should be of equal length because the callback function is applied in parallel to the corresponding elements. If the arrays are of unequal length, shorter ones will be extended with empty elements to match the length of the longest.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="efcbd976f89bc5171b954bf46e7784721a2c9e3b" translate="yes" xml:space="preserve">
          <source>Util (class)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d9d00e60352c72dac3efe9a0a8e365dd273c6079" translate="yes" xml:space="preserve">
          <source>Util::__construct</source>
          <target state="translated">Util::__construct</target>
        </trans-unit>
        <trans-unit id="d18d66d8d806492dd481714856c1a802274b225e" translate="yes" xml:space="preserve">
          <source>Util::getLastSocketErrno</source>
          <target state="translated">Util::getLastSocketErrno</target>
        </trans-unit>
        <trans-unit id="7fee4b2f8415cee340d0867be6dfb85bb24c10a4" translate="yes" xml:space="preserve">
          <source>Util::getLastSocketError</source>
          <target state="translated">Util::getLastSocketError</target>
        </trans-unit>
        <trans-unit id="4e0ceb6379814341ba9ae7eaf698e6d562aa6b67" translate="yes" xml:space="preserve">
          <source>Util::getSocketFd</source>
          <target state="translated">Util::getSocketFd</target>
        </trans-unit>
        <trans-unit id="de1f44350a8ff02ff2d72f5d77f437697b8a3f2e" translate="yes" xml:space="preserve">
          <source>Util::getSocketName</source>
          <target state="translated">Util::getSocketName</target>
        </trans-unit>
        <trans-unit id="cc1c6ba99d5dbab68dfde13f0552bad1b6c0984e" translate="yes" xml:space="preserve">
          <source>Util::setSocketOption</source>
          <target state="translated">Util::setSocketOption</target>
        </trans-unit>
        <trans-unit id="039c3669041e5d3892dcbd1c36ce72ad03e109b2" translate="yes" xml:space="preserve">
          <source>Util::sslRandPoll</source>
          <target state="translated">Util::sslRandPoll</target>
        </trans-unit>
        <trans-unit id="ca28ca9c2a841e7188a348c16ec457622a9140e3" translate="yes" xml:space="preserve">
          <source>Utils (class)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f5edf4d61f21a1c1f22eeb75651c9838379b6194" translate="yes" xml:space="preserve">
          <source>Utils::digestXmlResponse</source>
          <target state="translated">Utils::digestXmlResponse</target>
        </trans-unit>
        <trans-unit id="d09a28be54c39107c43096f39dc2442bf7ea6aa8" translate="yes" xml:space="preserve">
          <source>Utils::escapeQueryChars</source>
          <target state="translated">Utils::escapeQueryChars</target>
        </trans-unit>
        <trans-unit id="92459ed1166d72df1d1a9b49fcfd10d44293d0e9" translate="yes" xml:space="preserve">
          <source>Utils::getSolrVersion</source>
          <target state="translated">Utils::getSolrVersion</target>
        </trans-unit>
        <trans-unit id="b0204b8a0b20f287ee3e7b125cfb3db6d98e12d0" translate="yes" xml:space="preserve">
          <source>Utils::queryPhrase</source>
          <target state="translated">Utils::queryPhrase</target>
        </trans-unit>
        <trans-unit id="84f98540ccc2f54deee9ff60fedf7d32fddb6bef" translate="yes" xml:space="preserve">
          <source>Uuencode translates all strings (including binary data) into printable characters, making them safe for network transmissions. Uuencoded data is about 35% larger than the original.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c9ee5681d3c59f7541c27a38b67edf46259e187b" translate="yes" xml:space="preserve">
          <source>V</source>
          <target state="translated">V</target>
        </trans-unit>
        <trans-unit id="5ff72d4e897c0f47a13aaf44ef8af797dd176469" translate="yes" xml:space="preserve">
          <source>V8Js</source>
          <target state="translated">V8Js</target>
        </trans-unit>
        <trans-unit id="9137aba114864d6576ae9a446c9975da389351bb" translate="yes" xml:space="preserve">
          <source>V8Js::__construct</source>
          <target state="translated">V8Js::__construct</target>
        </trans-unit>
        <trans-unit id="7264e91cb1d91eba982aac2ab12f2836ef6cbb83" translate="yes" xml:space="preserve">
          <source>V8Js::__construct &amp;mdash; Construct a new &lt;a href=&quot;class.v8js&quot;&gt;V8Js&lt;/a&gt; object</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="37f229fc231d357ae36bf17891ae20d2a3dc67e4" translate="yes" xml:space="preserve">
          <source>V8Js::__construct &amp;rarr;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0b050b3856c1687d7e19c0caac0deae7cad03e13" translate="yes" xml:space="preserve">
          <source>V8Js::executeString</source>
          <target state="translated">V8Js::executeString</target>
        </trans-unit>
        <trans-unit id="a7c5aee7746f6a045d61bbe398e7430bd175a311" translate="yes" xml:space="preserve">
          <source>V8Js::executeString &amp;mdash; Execute a string as Javascript code</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f217f3de634907c5772cf6530b4e5fa4cf9fe76e" translate="yes" xml:space="preserve">
          <source>V8Js::executeString &amp;rarr;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6eec628984ef328a70858f3896c1b67a8c7ccce1" translate="yes" xml:space="preserve">
          <source>V8Js::getExtensions</source>
          <target state="translated">V8Js::getExtensions</target>
        </trans-unit>
        <trans-unit id="c14db88b1826bb23cd6ea82b8a6c00a284cec806" translate="yes" xml:space="preserve">
          <source>V8Js::getExtensions &amp;mdash; Return an array of registered extensions</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="090cd5d2a88c9b2e9924ee4d5bd8c61be70e057f" translate="yes" xml:space="preserve">
          <source>V8Js::getExtensions &amp;rarr;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5dc2b54c1f7144aeb82227062adb11183a8d90a9" translate="yes" xml:space="preserve">
          <source>V8Js::getPendingException</source>
          <target state="translated">V8Js::getPendingException</target>
        </trans-unit>
        <trans-unit id="eb4e732f872adcbbc3f0306f9e06304d9b39ebd7" translate="yes" xml:space="preserve">
          <source>V8Js::getPendingException &amp;mdash; Return pending uncaught Javascript exception</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cc1d8cf1df62b56731e70810cb731b57438751c3" translate="yes" xml:space="preserve">
          <source>V8Js::getPendingException &amp;rarr;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3d0d33f78fe03e734e9e1ab9e284d7e3e8de8349" translate="yes" xml:space="preserve">
          <source>V8Js::registerExtension</source>
          <target state="translated">V8Js::registerExtension</target>
        </trans-unit>
        <trans-unit id="0f2751b8c7342c63df3fda25897c375f5857cef4" translate="yes" xml:space="preserve">
          <source>V8Js::registerExtension &amp;mdash; Register Javascript extensions for V8Js</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c71999f4f6d0237ef6fcc7ba0894033b493212c8" translate="yes" xml:space="preserve">
          <source>V8Js::registerExtension &amp;rarr;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aa3cbf7aa8783a48f88a2e96b74593fe95c42486" translate="yes" xml:space="preserve">
          <source>V8JsException &amp;rarr;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="398718e9a0ed152655c4af71aa7c1f69f42ad99a" translate="yes" xml:space="preserve">
          <source>V8JsException::getJsFileName</source>
          <target state="translated">V8JsException::getJsFileName</target>
        </trans-unit>
        <trans-unit id="d2a7246dd24cb471c2bd5e7eddbe75a91001dd59" translate="yes" xml:space="preserve">
          <source>V8JsException::getJsFileName &amp;mdash; The getJsFileName purpose</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a291f5eec6ad61874f65864b754a1a5b7b53d05c" translate="yes" xml:space="preserve">
          <source>V8JsException::getJsFileName &amp;rarr;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1b271cb0c1b9085c9284cbb9c8c6cc65812a0595" translate="yes" xml:space="preserve">
          <source>V8JsException::getJsLineNumber</source>
          <target state="translated">V8JsException::getJsLineNumber</target>
        </trans-unit>
        <trans-unit id="814d23e01c8e80543db24e78e2b7ec246d856dee" translate="yes" xml:space="preserve">
          <source>V8JsException::getJsLineNumber &amp;mdash; The getJsLineNumber purpose</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d8694d83269ef3f27d670da857e8937e644a39f5" translate="yes" xml:space="preserve">
          <source>V8JsException::getJsLineNumber &amp;rarr;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d7a7f789ab2b0c38e2c4051085f8c9fca94af33e" translate="yes" xml:space="preserve">
          <source>V8JsException::getJsSourceLine</source>
          <target state="translated">V8JsException::getJsSourceLine</target>
        </trans-unit>
        <trans-unit id="85117e382ee491c880ea1216cf6fa18a35045bfe" translate="yes" xml:space="preserve">
          <source>V8JsException::getJsSourceLine &amp;mdash; The getJsSourceLine purpose</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a44329dadb78a017dec298725b473d8b8e3b2fef" translate="yes" xml:space="preserve">
          <source>V8JsException::getJsSourceLine &amp;rarr;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f5ae18965915cc3bd39b1f864eed88524bb3f89a" translate="yes" xml:space="preserve">
          <source>V8JsException::getJsTrace</source>
          <target state="translated">V8JsException::getJsTrace</target>
        </trans-unit>
        <trans-unit id="43f0d4b895a4bd8186936b9df715441def777b0c" translate="yes" xml:space="preserve">
          <source>V8JsException::getJsTrace &amp;mdash; The getJsTrace purpose</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dbd09ab628a4062b7fe6eb6e58bfaad1db6463ed" translate="yes" xml:space="preserve">
          <source>V8JsException::getJsTrace &amp;rarr;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7f5b14bad0e6327323b86a9b550aff15c790f619" translate="yes" xml:space="preserve">
          <source>V8js &amp;rarr;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7f95fc54eb27ecca09795eebe38715f1f360d7de" translate="yes" xml:space="preserve">
          <source>Valid PHP code to be evaluated.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3325047102b341842421064879e1c796970d41af" translate="yes" xml:space="preserve">
          <source>Valid PHP stream resource. Must be castable to file descriptor.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b62c9e689752a8c98a9571934fa8f793f7c59390" translate="yes" xml:space="preserve">
          <source>Valid PHP stream resource. The stream must be castable to file descriptor, so you most likely won't be able to use any of filtered streams.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="29eccc1ff0263176dac874b265bd5f21e658dc02" translate="yes" xml:space="preserve">
          <source>Valid PHP stream, must be castable to file descriptor.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="da09f389e89ea8d2b1ef2d73dfa2673dee99f1c2" translate="yes" xml:space="preserve">
          <source>Valid Range for Julian Calendar 4713 B.C. to 9999 A.D.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2d4a53fd396af32bc96f5c7a2101a6ec3c78342b" translate="yes" xml:space="preserve">
          <source>Valid buffered event resource.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6bdfb2752b5ecd746838cc072b2b81d05780312f" translate="yes" xml:space="preserve">
          <source>Valid event base resource that needs to be re-initialized.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7a731bbda702352c4580e5b020eefba04207a2af" translate="yes" xml:space="preserve">
          <source>Valid event base resource.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4daf7553591a0ce2773c07e890806ceeba9b798a" translate="yes" xml:space="preserve">
          <source>Valid event resource.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="21ac8f2056fac05926f631bb6ebba49a9791963a" translate="yes" xml:space="preserve">
          <source>Valid flags are:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5fe988c47717b6a4cea0b5ac9eb57c890052ab0b" translate="yes" xml:space="preserve">
          <source>Valid flags:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aabbb10a2e3ac3d708e37562691fc4eae3841d04" translate="yes" xml:space="preserve">
          <source>Valid protocol options are: &lt;code&gt;CURLPROTO_HTTP&lt;/code&gt;, &lt;code&gt;CURLPROTO_HTTPS&lt;/code&gt;, &lt;code&gt;CURLPROTO_FTP&lt;/code&gt;, &lt;code&gt;CURLPROTO_FTPS&lt;/code&gt;, &lt;code&gt;CURLPROTO_SCP&lt;/code&gt;, &lt;code&gt;CURLPROTO_SFTP&lt;/code&gt;, &lt;code&gt;CURLPROTO_TELNET&lt;/code&gt;, &lt;code&gt;CURLPROTO_LDAP&lt;/code&gt;, &lt;code&gt;CURLPROTO_LDAPS&lt;/code&gt;, &lt;code&gt;CURLPROTO_DICT&lt;/code&gt;, &lt;code&gt;CURLPROTO_FILE&lt;/code&gt;, &lt;code&gt;CURLPROTO_TFTP&lt;/code&gt;, &lt;code&gt;CURLPROTO_ALL&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="681646fb9b84a2c215c71c06a6d065e0e56ad9a3" translate="yes" xml:space="preserve">
          <source>Valid types</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bf1d03ded40655b84831e5067855552774ae68a0" translate="yes" xml:space="preserve">
          <source>Valid values for &lt;code&gt;options&lt;/code&gt; are &lt;strong&gt;&lt;code&gt;SE_UID&lt;/code&gt;&lt;/strong&gt;, which causes the returned array to contain UIDs instead of messages sequence numbers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5b2984d924c2168bef2e9cfa2a6db0187ff5cfc8" translate="yes" xml:space="preserve">
          <source>Validates a document based on a schema defined in the given string.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c046fe8919b4447a61974f3a6f089c0c5afe262f" translate="yes" xml:space="preserve">
          <source>Validates a document based on the given schema file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="418f6819c5ffb1211c975c3ecfb2ae0c443a6959" translate="yes" xml:space="preserve">
          <source>Validates an existing signed public key and challenge</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2e17429a69b06cdbfa2ded4ea072b427fa0e7e8e" translate="yes" xml:space="preserve">
          <source>Validates an existing signed public key and challenge issued from the &amp;lt;keygen&amp;gt; element</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b4d9033c3d937423bdd6254f1b853dfc9dc76888" translate="yes" xml:space="preserve">
          <source>Validates the document based on its DTD.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1ae1b8e5576a90fb31296c5347c2a7f3f3e5ff86" translate="yes" xml:space="preserve">
          <source>Validates the supplied signed public key and challenge</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8dce170de238b1feda2ecd9674ea3ca0d068fbcb" translate="yes" xml:space="preserve">
          <source>Value</source>
          <target state="translated">Value</target>
        </trans-unit>
        <trans-unit id="68cbc83afcfbf3493da828a916e45f40c348b86a" translate="yes" xml:space="preserve">
          <source>Value description</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1834f00f3861f921aeba4b89754ef47632604ae4" translate="yes" xml:space="preserve">
          <source>Value of alpha component.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a54ded7e40da38f8c6c98f6eb4fae037328404a8" translate="yes" xml:space="preserve">
          <source>Value of blue component.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4000d9420187faf70e3d2ed631b56b599b769016" translate="yes" xml:space="preserve">
          <source>Value of errno in the case of a GEARMAN_ERRNO return value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="16fd3ac7f470313649de4f3d1d9f3fc359d12e0d" translate="yes" xml:space="preserve">
          <source>Value of green component.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d6658aee4c906df33050aa490e035f1aa689fcbb" translate="yes" xml:space="preserve">
          <source>Value of parameter</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1b7ccd121635e2945b5a908e7613a836bab8f5c4" translate="yes" xml:space="preserve">
          <source>Value of red component.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bed2b3ea55558386985a57db2a6a3971cb62f718" translate="yes" xml:space="preserve">
          <source>Value of the &lt;em&gt;actor&lt;/em&gt; attribute of the SOAP header element.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fa1eae74f3414de52c3a2c02b4948af5f9703b4b" translate="yes" xml:space="preserve">
          <source>Value of the &lt;em&gt;mustUnderstand&lt;/em&gt; attribute of the SOAP header element.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="414f94c4f7fca72ce02c2d614cc1d9a1fb5a7249" translate="yes" xml:space="preserve">
          <source>Value of the constant.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cfd7041f9dbd11a16e90cb4fc9da6d3fe7b3e9d5" translate="yes" xml:space="preserve">
          <source>Value of the parameter</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b3d9219b8263ef99378a682bd45b10d23a907380" translate="yes" xml:space="preserve">
          <source>Value of the requested variable on success, &lt;strong&gt;&lt;code&gt;FALSE&lt;/code&gt;&lt;/strong&gt; if the filter fails, or &lt;strong&gt;&lt;code&gt;NULL&lt;/code&gt;&lt;/strong&gt; if the &lt;code&gt;variable_name&lt;/code&gt; variable is not set. If the flag &lt;strong&gt;&lt;code&gt;FILTER_NULL_ON_FAILURE&lt;/code&gt;&lt;/strong&gt; is used, it returns &lt;strong&gt;&lt;code&gt;FALSE&lt;/code&gt;&lt;/strong&gt; if the variable is not set and &lt;strong&gt;&lt;code&gt;NULL&lt;/code&gt;&lt;/strong&gt; if the filter fails.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d4dac4d340683484fde8c5d00c6af1bdb0a3b15d" translate="yes" xml:space="preserve">
          <source>Value to check.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bf173a326df9ec4d357089865d31df2c58fc311d" translate="yes" xml:space="preserve">
          <source>Value to filter. Note that scalar values are &lt;a href=&quot;language.types.string#language.types.string.casting&quot;&gt;converted to string&lt;/a&gt; internally before they are filtered.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f1f779f4287b22d1e3f7e4abacbb95f51b6e20be" translate="yes" xml:space="preserve">
          <source>Value to format. This may be a &lt;a href=&quot;class.datetimeinterface&quot;&gt;DateTimeInterface&lt;/a&gt; object, an &lt;a href=&quot;class.intlcalendar&quot;&gt;IntlCalendar&lt;/a&gt; object, a numeric type representing a (possibly fractional) number of seconds since epoch or an &lt;a href=&quot;language.types.array&quot;&gt;array&lt;/a&gt; in the format output by &lt;a href=&quot;function.localtime&quot;&gt;localtime()&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cb90ba5231e4c96dc023d8cb495dc5e28abf388f" translate="yes" xml:space="preserve">
          <source>Value to pad if &lt;code&gt;array&lt;/code&gt; is less than &lt;code&gt;size&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0297d6ed8211f6965dd504b2fc27fff82e04e50c" translate="yes" xml:space="preserve">
          <source>Value to send into the generator. This value will be the return value of the &lt;a href=&quot;language.generators.syntax#control-structures.yield&quot;&gt;yield&lt;/a&gt; expression the generator is currently at.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="df1f9101edc12a5c3fc5d3bf84871342cf478afb" translate="yes" xml:space="preserve">
          <source>Value to set the type</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fc2bd0d87fcfe1d4c84f4e843cc03debf8dc001b" translate="yes" xml:space="preserve">
          <source>Value to use for filling</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2139d78e43cf42b8c7904885f78e1c7edc3cb901" translate="yes" xml:space="preserve">
          <source>Value:</source>
          <target state="translated">Value:</target>
        </trans-unit>
        <trans-unit id="b1564f6b1512cbfa3cfcebc9a5badb6b239954f1" translate="yes" xml:space="preserve">
          <source>Values</source>
          <target state="translated">Values</target>
        </trans-unit>
        <trans-unit id="9ae8e9e5dc658bbd4434e228ed50d89cdc9a6254" translate="yes" xml:space="preserve">
          <source>Values are returned by using the optional return statement. Any type may be returned, including arrays and objects. This causes the function to end its execution immediately and pass control back to the line from which it was called. See &lt;a href=&quot;function.return&quot;&gt;return&lt;/a&gt; for more information.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1171bfb01d6d174dda7454605e2dd593c78b7f8d" translate="yes" xml:space="preserve">
          <source>Values can be any type, including objects.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b63925d22cc7faea6e84850935accaf093683dce" translate="yes" xml:space="preserve">
          <source>Values enclosed in double quotes can contain new lines.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3b8a1d25b6be25521b64323c1b4f37b3021a35c5" translate="yes" xml:space="preserve">
          <source>Values from the current instance will be kept.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e4a60d05f4c6da4daeefbaf6ffee7d1009f4ce29" translate="yes" xml:space="preserve">
          <source>Values in the input array with numeric keys will be renumbered with incrementing keys starting from zero in the result array.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="debdbd60015052b5262a85a0a952efbf68c69635" translate="yes" xml:space="preserve">
          <source>Values intended for &lt;em&gt;bytea&lt;/em&gt; fields are not supported as parameters. Use &lt;a href=&quot;function.pg-escape-bytea&quot;&gt;pg_escape_bytea()&lt;/a&gt; instead, or use the large object functions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5dbb58e12c6cb6ac20c4dcd560fa82a7e33b2dc7" translate="yes" xml:space="preserve">
          <source>Values of different types will be compared using the &lt;a href=&quot;language.operators.comparison&quot;&gt; standard comparison rules&lt;/a&gt;. For instance, a non-numeric &lt;a href=&quot;language.types.string&quot;&gt;string&lt;/a&gt; will be compared to an &lt;a href=&quot;language.types.integer&quot;&gt;integer&lt;/a&gt; as though it were &lt;em&gt;0&lt;/em&gt;, but multiple non-numeric &lt;a href=&quot;language.types.string&quot;&gt;string&lt;/a&gt; values will be compared alphanumerically. The actual value returned will be of the original type with no conversion applied.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="565a884b6e498c4327b5e53cea6026bfece7565a" translate="yes" xml:space="preserve">
          <source>Values of the current instance will be overwritten by those provided where keys are equal.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2b089b5e4ce06133e749632fa2960747bcda3de6" translate="yes" xml:space="preserve">
          <source>Values of type &lt;a href=&quot;language.types.object&quot;&gt;object&lt;/a&gt; are supported. If an object implements &lt;strong&gt;Ds\Hashable&lt;/strong&gt;, equality will be determined by the object's &lt;code&gt;equals&lt;/code&gt; function. If an object does not implement &lt;strong&gt;Ds\Hashable&lt;/strong&gt;, objects must be references to the same instance to be considered equal.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ce8f825972ad06df69b99a28bcf7d663e544faf6" translate="yes" xml:space="preserve">
          <source>Values outside the valid range (0..255) will be bitwise and'ed with 255, which is equivalent to the following algorithm:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1d30a47d37b8febfd59fdc1175f688528c67bbaa" translate="yes" xml:space="preserve">
          <source>Values passed to the constructor of the specified class. If the constructor of the specified class takes parameters, the ctorParams array must be supplied.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d9c216482c1c188bf640badc3c9e83a852ae8f9c" translate="yes" xml:space="preserve">
          <source>Values to add to the set.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0d50d3e3526173cec78db6f4eb1adad6befff92a" translate="yes" xml:space="preserve">
          <source>Values to check.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4dec07826947357fbcfb6297a825e7c91d25e02f" translate="yes" xml:space="preserve">
          <source>Values will always be indexed as [0, 1, 2, &amp;hellip;, size - 1].</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7bcbc5ede52a3917dbc4b333d49d60ec317d408e" translate="yes" xml:space="preserve">
          <source>Values will be compared by value and by type.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8f0a54d5cde6e441e00f43dbc1ba8ab388fba9f5" translate="yes" xml:space="preserve">
          <source>Values with equal priority fall back to FIFO (first in first out).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="19de69cb601f53a4ea7af22a65c71ae63251365c" translate="yes" xml:space="preserve">
          <source>Variable</source>
          <target state="translated">Variable</target>
        </trans-unit>
        <trans-unit id="e7530537613a1f85f44a02776c7576049557ee43" translate="yes" xml:space="preserve">
          <source>Variable &lt;var&gt;&lt;var&gt;&lt;a href=&quot;reserved.variables.phperrormsg&quot;&gt;$php_errormsg&lt;/a&gt;&lt;/var&gt;&lt;/var&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b280dc1f4f1b58422609af96e60af9910ffc1aac" translate="yes" xml:space="preserve">
          <source>Variable Scope</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6f2f9b9488a91e036840d17f9d5b3fb62e649bfe" translate="yes" xml:space="preserve">
          <source>Variable functions</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8407794943aecaa5d2fbdf5e19abe82f46a8044a" translate="yes" xml:space="preserve">
          <source>Variable functions &amp;rarr;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e68006f647ada716ae683ce999aac2f8a967e958" translate="yes" xml:space="preserve">
          <source>Variable functions won't work with language constructs such as &lt;a href=&quot;function.echo&quot;&gt;echo&lt;/a&gt;, &lt;a href=&quot;function.print&quot;&gt;print&lt;/a&gt;, &lt;a href=&quot;function.unset&quot;&gt;unset()&lt;/a&gt;, &lt;a href=&quot;function.isset&quot;&gt;isset()&lt;/a&gt;, &lt;a href=&quot;function.empty&quot;&gt;empty()&lt;/a&gt;, &lt;a href=&quot;function.include&quot;&gt;include&lt;/a&gt;, &lt;a href=&quot;function.require&quot;&gt;require&lt;/a&gt; and the like. Utilize wrapper functions to make use of any of these constructs as variable functions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e2b07a3d9de2d3c4d9597814525f9ccebeb21802" translate="yes" xml:space="preserve">
          <source>Variable handling &amp;rarr;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d7d3cc6e8dc7ee32d651df9d117444e10e38349d" translate="yes" xml:space="preserve">
          <source>Variable length list of arguments to use as function arguments to the block</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7d2b56e166787d9877c27b7226e183afbd851754" translate="yes" xml:space="preserve">
          <source>Variable list of array arguments to compare keys against.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="afd8d17fec9a66b9faa8150006265caa036e865b" translate="yes" xml:space="preserve">
          <source>Variable list of array arguments to compare values against.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e6f1edfd5e38f4dd82fae7287f6a581858eadb2c" translate="yes" xml:space="preserve">
          <source>Variable list of array arguments to run through the &lt;code&gt;callback&lt;/code&gt; function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6e16cc074a61ec75e06b5c80db2ab39a6bc18279" translate="yes" xml:space="preserve">
          <source>Variable list of arrays to merge.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5a0436f09421de6c9c7613098b3b1226689eb795" translate="yes" xml:space="preserve">
          <source>Variable list of arrays to recursively merge.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d81a99334632e88444e53a1da4ba6db127a9f301" translate="yes" xml:space="preserve">
          <source>Variable name prefix, prepended before all variable's name imported into the global scope. So if you have a GET value named &quot;&lt;em&gt;userid&lt;/em&gt;&quot;, and provide a prefix &quot;&lt;em&gt;pref_&lt;/em&gt;&quot;, then you'll get a global variable named &lt;var&gt;&lt;var&gt;$pref_userid&lt;/var&gt;&lt;/var&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9ab461e86ea9b74ba465cf9cdfb5caf96f0d5250" translate="yes" xml:space="preserve">
          <source>Variable names follow the same rules as other labels in PHP. A valid variable name starts with a letter or underscore, followed by any number of letters, numbers, or underscores. As a regular expression, it would be expressed thus: '&lt;em&gt;[a-zA-Z_\x7f-\xff][a-zA-Z0-9_\x7f-\xff]*&lt;/em&gt;'</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fa943025b61aec22a2044569d4b7fbb9b4e5634c" translate="yes" xml:space="preserve">
          <source>Variable parsing</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="69cd2e4d36065246c043d32da81f65b5ec76feab" translate="yes" xml:space="preserve">
          <source>Variable scope</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7bfa8577d91999948cbcee37fe50bd13ca9d4d33" translate="yes" xml:space="preserve">
          <source>Variable scope &amp;rarr;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="00d0e96514fcb6415bc5eb92b2d512572522b4c8" translate="yes" xml:space="preserve">
          <source>Variable to be checked</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1111297a60c966ce00ac9226ebd21bbc6545475e" translate="yes" xml:space="preserve">
          <source>Variable variables</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bd1f94f5f19a48d6c39290d69bcb253770926935" translate="yes" xml:space="preserve">
          <source>Variable variables &amp;rarr;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="34c2e2dc4cbca6dfbb374d854ece0b68626e42c8" translate="yes" xml:space="preserve">
          <source>Variable-length argument lists</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ac018db1f7b00972061adff843d37497d8ee153c" translate="yes" xml:space="preserve">
          <source>Variables</source>
          <target state="translated">Variables</target>
        </trans-unit>
        <trans-unit id="c82b16e7cb503316dcbe021e1c444815457add33" translate="yes" xml:space="preserve">
          <source>Variables &amp;rarr;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8405688284c327d0495e5a4cd2c6388314361ff1" translate="yes" xml:space="preserve">
          <source>Variables From External Sources</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="663cd4ea4d879d0ae2f98f5aea0652ef873a3c6f" translate="yes" xml:space="preserve">
          <source>Variables From External Sources &amp;rarr;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ce4935a6fa0971c51cb907a79b421e1044a1ddd2" translate="yes" xml:space="preserve">
          <source>Variables in PHP are represented by a dollar sign followed by the name of the variable. The variable name is case-sensitive.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0adf18126b86e69c37a7653ad1d65e4346a6eb66" translate="yes" xml:space="preserve">
          <source>Variables of type &lt;a href=&quot;language.types.resource&quot;&gt;resource&lt;/a&gt; couldn't be exported by this function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cfcc0e763199570c36dbfe5a9ab6ea49ebab31af" translate="yes" xml:space="preserve">
          <source>Variables will be co-erced to a suitable type for the specifier:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1202b22fb36064804b25666b86b42ab6c9a7cb12" translate="yes" xml:space="preserve">
          <source>Variables, i.e. &lt;em&gt;foo($a)&lt;/em&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="56c28563e5b5b32e2e25bda08a4bc2b82c782343" translate="yes" xml:space="preserve">
          <source>Variant subtag</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c9ceded6e318dd519f5046ce64bfc7ee59ca4fd7" translate="yes" xml:space="preserve">
          <source>Varnish</source>
          <target state="translated">Varnish</target>
        </trans-unit>
        <trans-unit id="8b97de3852a8bbc949aad1775e0fab9224c7556f" translate="yes" xml:space="preserve">
          <source>Varnish VCL expression. It's based on the varnish ban command.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0b99bb5d92ee99363d6c6a0d733b874c421ee519" translate="yes" xml:space="preserve">
          <source>Varnish compatibility option.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="67ddbaad51b593aeabb42dc2edae298f936b4a48" translate="yes" xml:space="preserve">
          <source>Varnish configuration param name.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="084d8cbdefc789d22ecca86010342e498daf095a" translate="yes" xml:space="preserve">
          <source>Varnish configuration param value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4befb20b5e13cc94f081ee9ea85a23a306316b89" translate="yes" xml:space="preserve">
          <source>VarnishAdmin::__construct</source>
          <target state="translated">VarnishAdmin::__construct</target>
        </trans-unit>
        <trans-unit id="c5791364afadac579944f47b01e50697009831c4" translate="yes" xml:space="preserve">
          <source>VarnishAdmin::__construct &amp;mdash; VarnishAdmin constructor</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="44b1643c674a30a5d6c7b2cb1db0ca36cb252ee0" translate="yes" xml:space="preserve">
          <source>VarnishAdmin::__construct &amp;rarr;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="86aac593b9590757b6400a8a38324b5060ff8c22" translate="yes" xml:space="preserve">
          <source>VarnishAdmin::auth</source>
          <target state="translated">VarnishAdmin::auth</target>
        </trans-unit>
        <trans-unit id="ca7d8bb105d8e0e2dd157bee695931b112c3bcac" translate="yes" xml:space="preserve">
          <source>VarnishAdmin::auth &amp;mdash; Authenticate on a varnish instance</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="182a5abf938d5c1b2150600ed9b648eae04bc20f" translate="yes" xml:space="preserve">
          <source>VarnishAdmin::auth &amp;rarr;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c7f8693c703a78e5817e3bd0a8c27f8388fa6f3d" translate="yes" xml:space="preserve">
          <source>VarnishAdmin::ban</source>
          <target state="translated">VarnishAdmin::ban</target>
        </trans-unit>
        <trans-unit id="0c9bbe96c06f9049e26080812dd57256fbe45ed6" translate="yes" xml:space="preserve">
          <source>VarnishAdmin::ban &amp;mdash; Ban URLs using a VCL expression</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5c315e6e82c8dcf2a543841e814231146c605019" translate="yes" xml:space="preserve">
          <source>VarnishAdmin::ban &amp;rarr;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="706611aa6335d3c9c20b6d93b7d9316dd645bb56" translate="yes" xml:space="preserve">
          <source>VarnishAdmin::banUrl</source>
          <target state="translated">VarnishAdmin::banUrl</target>
        </trans-unit>
        <trans-unit id="ed7d957c974333630d21734e6013d1f7db9527ea" translate="yes" xml:space="preserve">
          <source>VarnishAdmin::banUrl &amp;mdash; Ban an URL using a VCL expression</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e69374b21cfd22b48592f5ef5d0aa7d58fa7b71a" translate="yes" xml:space="preserve">
          <source>VarnishAdmin::banUrl &amp;rarr;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="72babebe55667a93a2159b6b6593ec164b4dfe80" translate="yes" xml:space="preserve">
          <source>VarnishAdmin::clearPanic</source>
          <target state="translated">VarnishAdmin::clearPanic</target>
        </trans-unit>
        <trans-unit id="867498bfb3e70b5c89efa2785cbaafa25ed3671c" translate="yes" xml:space="preserve">
          <source>VarnishAdmin::clearPanic &amp;mdash; Clear varnish instance panic messages</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7b1b6dc4a4f8b1862ae2b9f5a539ef7a8ad249ed" translate="yes" xml:space="preserve">
          <source>VarnishAdmin::clearPanic &amp;rarr;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6f43e746c3903d867a9162b76e2cff4c6858bc96" translate="yes" xml:space="preserve">
          <source>VarnishAdmin::connect</source>
          <target state="translated">VarnishAdmin::connect</target>
        </trans-unit>
        <trans-unit id="13f45579a05e39d12d68e9ad5baaaa6b0d6dea94" translate="yes" xml:space="preserve">
          <source>VarnishAdmin::connect &amp;mdash; Connect to a varnish instance administration interface</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="10da3cabec6954b50daf9ed8f3436aeea0b5c1e6" translate="yes" xml:space="preserve">
          <source>VarnishAdmin::connect &amp;rarr;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3bb11127bb457ec2a4ed2b7cac55b08bf80705d3" translate="yes" xml:space="preserve">
          <source>VarnishAdmin::disconnect</source>
          <target state="translated">VarnishAdmin::disconnect</target>
        </trans-unit>
        <trans-unit id="a3cad2eca80230398adcfb332b18a2f90808d6ff" translate="yes" xml:space="preserve">
          <source>VarnishAdmin::disconnect &amp;mdash; Disconnect from a varnish instance administration interface</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6668c76aa2abf3c3fa1442d264c2b96aa2bcb110" translate="yes" xml:space="preserve">
          <source>VarnishAdmin::disconnect &amp;rarr;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="025f42ad6804aaa5b097f00bc76f7f69d33f2d1f" translate="yes" xml:space="preserve">
          <source>VarnishAdmin::getPanic</source>
          <target state="translated">VarnishAdmin::getPanic</target>
        </trans-unit>
        <trans-unit id="10033b481842ca67ed5c7426558052b4764e2f37" translate="yes" xml:space="preserve">
          <source>VarnishAdmin::getPanic &amp;mdash; Get the last panic message on a varnish instance</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a0da47aa9a8ed05f1804ce4dfe5db0c1fd20e886" translate="yes" xml:space="preserve">
          <source>VarnishAdmin::getPanic &amp;rarr;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="53a87ec0f713960a0eda8c1ed713662d61ece8ee" translate="yes" xml:space="preserve">
          <source>VarnishAdmin::getParams</source>
          <target state="translated">VarnishAdmin::getParams</target>
        </trans-unit>
        <trans-unit id="2096cc0b6ab5748ee9c3c1c6c6097eb62fed1447" translate="yes" xml:space="preserve">
          <source>VarnishAdmin::getParams &amp;mdash; Fetch current varnish instance configuration parameters</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="86c6a11290d57bb1f75dea03ebeaf3d2bb5971f8" translate="yes" xml:space="preserve">
          <source>VarnishAdmin::getParams &amp;rarr;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="29dc03153915410288de8e7b692f93c70ded2b3c" translate="yes" xml:space="preserve">
          <source>VarnishAdmin::isRunning</source>
          <target state="translated">VarnishAdmin::isRunning</target>
        </trans-unit>
        <trans-unit id="dcd25d8136d216c6b1b797f17af3ab1dd86a1439" translate="yes" xml:space="preserve">
          <source>VarnishAdmin::isRunning &amp;mdash; Check if the varnish slave process is currently running</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9cae71090387e1adbf69ef46404806d08c45798d" translate="yes" xml:space="preserve">
          <source>VarnishAdmin::isRunning &amp;rarr;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="131098e064e1b499046356db38a6e57305793ff8" translate="yes" xml:space="preserve">
          <source>VarnishAdmin::setCompat</source>
          <target state="translated">VarnishAdmin::setCompat</target>
        </trans-unit>
        <trans-unit id="df59ccf5ad56f82c3fa9f8cadc3320dee49b39cd" translate="yes" xml:space="preserve">
          <source>VarnishAdmin::setCompat &amp;mdash; Set the class compat configuration param</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ba0c00d53309d4741ad402c0971942e6c252eb1d" translate="yes" xml:space="preserve">
          <source>VarnishAdmin::setCompat &amp;rarr;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c049fc697f73cb866edcee5be18e9a9c82872395" translate="yes" xml:space="preserve">
          <source>VarnishAdmin::setHost</source>
          <target state="translated">VarnishAdmin::setHost</target>
        </trans-unit>
        <trans-unit id="67f9c0d11abc522651ca4ef082c2868b74b95395" translate="yes" xml:space="preserve">
          <source>VarnishAdmin::setHost &amp;mdash; Set the class host configuration param</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ec42c03ec2a8b08aa2250478b1203a88aef3b3e2" translate="yes" xml:space="preserve">
          <source>VarnishAdmin::setHost &amp;rarr;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="883b3070cec0d1ab71d4a35cd0cd9b7278653c6c" translate="yes" xml:space="preserve">
          <source>VarnishAdmin::setIdent</source>
          <target state="translated">VarnishAdmin::setIdent</target>
        </trans-unit>
        <trans-unit id="55d702dd14608a7cc8e7a559d5cba2713e30849a" translate="yes" xml:space="preserve">
          <source>VarnishAdmin::setIdent &amp;mdash; Set the class ident configuration param</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9433987920891109d79d63860bd1650e39b3d52e" translate="yes" xml:space="preserve">
          <source>VarnishAdmin::setIdent &amp;rarr;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="65bd02a12c3800fb2406c6dbf74c5ab8a44621c5" translate="yes" xml:space="preserve">
          <source>VarnishAdmin::setParam</source>
          <target state="translated">VarnishAdmin::setParam</target>
        </trans-unit>
        <trans-unit id="fea3b88509a9b4f779d2a2a2c86e6f26d19cb157" translate="yes" xml:space="preserve">
          <source>VarnishAdmin::setParam &amp;mdash; Set configuration param on the current varnish instance</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7578dfab95eeae716256ec372880e935c01dcfb9" translate="yes" xml:space="preserve">
          <source>VarnishAdmin::setParam &amp;rarr;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5a7576836ba47ca8cf6ff92262c925b522c400bf" translate="yes" xml:space="preserve">
          <source>VarnishAdmin::setPort</source>
          <target state="translated">VarnishAdmin::setPort</target>
        </trans-unit>
        <trans-unit id="8f8e03134d0ea38fde7bcb699703596a938dcaba" translate="yes" xml:space="preserve">
          <source>VarnishAdmin::setPort &amp;mdash; Set the class port configuration param</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="63f39445b7a828e2bc25146006cd5eabb41f7d0f" translate="yes" xml:space="preserve">
          <source>VarnishAdmin::setPort &amp;rarr;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="55e288d39e7b60dc2abfdd5fa8e9cbd775052b86" translate="yes" xml:space="preserve">
          <source>VarnishAdmin::setSecret</source>
          <target state="translated">VarnishAdmin::setSecret</target>
        </trans-unit>
        <trans-unit id="5bf29777a0e61436dce6f9b90b20e0d0bda8ea82" translate="yes" xml:space="preserve">
          <source>VarnishAdmin::setSecret &amp;mdash; Set the class secret configuration param</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="61b94e7144903baa7d288e7c7dd373a4187a873d" translate="yes" xml:space="preserve">
          <source>VarnishAdmin::setSecret &amp;rarr;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="21e34f9e7417e3e10d6f54a69557dad3e463a579" translate="yes" xml:space="preserve">
          <source>VarnishAdmin::setTimeout</source>
          <target state="translated">VarnishAdmin::setTimeout</target>
        </trans-unit>
        <trans-unit id="da0237e0add57d6ea36f6d7c0184bbb9a5583bdb" translate="yes" xml:space="preserve">
          <source>VarnishAdmin::setTimeout &amp;mdash; Set the class timeout configuration param</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="04448e8610286e6aa54e958068713473cccb39de" translate="yes" xml:space="preserve">
          <source>VarnishAdmin::setTimeout &amp;rarr;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b63f0ad1d3378293e401f73742990392606e0846" translate="yes" xml:space="preserve">
          <source>VarnishAdmin::start</source>
          <target state="translated">VarnishAdmin::start</target>
        </trans-unit>
        <trans-unit id="c4e8a5389986fbed8e7591589615bb9318f7ede3" translate="yes" xml:space="preserve">
          <source>VarnishAdmin::start &amp;mdash; Start varnish worker process</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0872644c2edc0bd1916c6dc36734110977f72762" translate="yes" xml:space="preserve">
          <source>VarnishAdmin::start &amp;rarr;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="690159873c5ac015147ada8cdd0eb3239f92a4dc" translate="yes" xml:space="preserve">
          <source>VarnishAdmin::stop</source>
          <target state="translated">VarnishAdmin::stop</target>
        </trans-unit>
        <trans-unit id="50b8361a8faebb0530b770813f63e7789a84783e" translate="yes" xml:space="preserve">
          <source>VarnishAdmin::stop &amp;mdash; Stop varnish worker process</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="13e14b0f006668d845fafc45b7cafa4d4e0f9206" translate="yes" xml:space="preserve">
          <source>VarnishAdmin::stop &amp;rarr;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ebb7e04e71981824f6fcf5a73c26bf341f9b41d1" translate="yes" xml:space="preserve">
          <source>VarnishLog &amp;rarr;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9217b4a5e86f283a223c38cca054be633f383911" translate="yes" xml:space="preserve">
          <source>VarnishLog::__construct</source>
          <target state="translated">VarnishLog::__construct</target>
        </trans-unit>
        <trans-unit id="8307fb5fc33f76dbbe983bb3efd4c88fa9d32935" translate="yes" xml:space="preserve">
          <source>VarnishLog::__construct &amp;mdash; Varnishlog constructor</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="38af704d6c253a90e5001d4a03fd8f29b5306991" translate="yes" xml:space="preserve">
          <source>VarnishLog::__construct &amp;rarr;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e53a9be90a8772d240db23720d8459878942a5e3" translate="yes" xml:space="preserve">
          <source>VarnishLog::getLine</source>
          <target state="translated">VarnishLog::getLine</target>
        </trans-unit>
        <trans-unit id="d63de2319acaf2998c6c11ced1c5973f9e1ec413" translate="yes" xml:space="preserve">
          <source>VarnishLog::getLine &amp;mdash; Get next log line</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7c92aebee4781435afbc53281be34885d05dbb13" translate="yes" xml:space="preserve">
          <source>VarnishLog::getLine &amp;rarr;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d6ae45c9094835a35cc384b1c91c823d73189ab9" translate="yes" xml:space="preserve">
          <source>VarnishLog::getTagName</source>
          <target state="translated">VarnishLog::getTagName</target>
        </trans-unit>
        <trans-unit id="a54de2c1446892b6174333bcadccebc687bb3359" translate="yes" xml:space="preserve">
          <source>VarnishLog::getTagName &amp;mdash; Get the log tag string representation by its index</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ada30f18c07a1b9b73d4cabc3174a2e8ac3b57c7" translate="yes" xml:space="preserve">
          <source>VarnishLog::getTagName &amp;rarr;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e42585315f7e14199bf39a231e3395579b7fba0f" translate="yes" xml:space="preserve">
          <source>VarnishStat &amp;rarr;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5e2ef5c9a6591cba3147b09b903dc5cbaf2f4b8b" translate="yes" xml:space="preserve">
          <source>VarnishStat::__construct</source>
          <target state="translated">VarnishStat::__construct</target>
        </trans-unit>
        <trans-unit id="2d4dca26b4143d796021f576e09ed90fa9c93f5e" translate="yes" xml:space="preserve">
          <source>VarnishStat::__construct &amp;mdash; VarnishStat constructor</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bd97f5ebfa70c118abc8ac80fb7147fb2d935ca6" translate="yes" xml:space="preserve">
          <source>VarnishStat::__construct &amp;rarr;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4d47574384f0af2ae7ecf83433ac11ed32850307" translate="yes" xml:space="preserve">
          <source>VarnishStat::getSnapshot</source>
          <target state="translated">VarnishStat::getSnapshot</target>
        </trans-unit>
        <trans-unit id="58ed48ed8e7fabd7b237b43ad3eba04678c37083" translate="yes" xml:space="preserve">
          <source>VarnishStat::getSnapshot &amp;mdash; Get the current varnish instance statistics snapshot</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aaa0b789e31780af861a718305845654013c8cd8" translate="yes" xml:space="preserve">
          <source>VarnishStat::getSnapshot &amp;rarr;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4cee42e9d84b86ba6c7311bc60865f5d07dfda00" translate="yes" xml:space="preserve">
          <source>Vector &amp;rarr;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bd5a97dcf60ed4d4bfb8bf75ac3e71d0e6f40f0f" translate="yes" xml:space="preserve">
          <source>Vector (class)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7708413caca932190daa867bcfd7a28ff652a274" translate="yes" xml:space="preserve">
          <source>Vendemiaire, Brumaire, Frimaire, Nivose, Pluviose, Ventose, Germinal, Floreal, Prairial, Messidor, Thermidor, Fructidor, Extra</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b7f8e2655ffad4c3043367b9b2c1ab7b486f5725" translate="yes" xml:space="preserve">
          <source>Verifies that the given hash matches the given password.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fd88721ff6e7e13d39b227b6cccdd312ffac22de" translate="yes" xml:space="preserve">
          <source>Verify that the contents of a variable can be called as a function. This can check that a simple variable contains the name of a valid function, or that an array contains a properly encoded object and function name.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4861006e77cd631129fd5c51319fcd70006fe8b9" translate="yes" xml:space="preserve">
          <source>Verify that the contents of a variable is accepted by the iterable pseudo-type, i.e. that it is an &lt;a href=&quot;language.types.array&quot;&gt;array&lt;/a&gt; or an object implementing &lt;a href=&quot;class.traversable&quot;&gt;Traversable&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="281fea3b8a8c971bf6feeb0d6243d6d2e3374c7f" translate="yes" xml:space="preserve">
          <source>Verify that the contents of a variable is an &lt;a href=&quot;language.types.array&quot;&gt;array&lt;/a&gt; or an object implementing &lt;a href=&quot;class.countable&quot;&gt;Countable&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2da600bf9404843107a9531694f654e5662959e0" translate="yes" xml:space="preserve">
          <source>Version</source>
          <target state="translated">Version</target>
        </trans-unit>
        <trans-unit id="216d591865b23f21a21cbd933fb60c540972448a" translate="yes" xml:space="preserve">
          <source>Versions of PHP 5, prior to PHP 5.3.0 do not support nesting of exceptions. The following code fragment can be used as a replacement MyException class if you wish to run this example.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1158f7218475aff9422f0cdca312d19fbabc63f9" translate="yes" xml:space="preserve">
          <source>Vertical bar characters are used to separate alternative patterns. For example, the pattern &lt;em&gt;gilbert|sullivan&lt;/em&gt; matches either &quot;gilbert&quot; or &quot;sullivan&quot;. Any number of alternatives may appear, and an empty alternative is permitted (matching the empty string). The matching process tries each alternative in turn, from left to right, and the first one that succeeds is used. If the alternatives are within a subpattern (defined below), &quot;succeeds&quot; means matching the rest of the main pattern as well as the alternative in the subpattern.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a29cebfd83f9a42fdfb9755600e312df01f6831f" translate="yes" xml:space="preserve">
          <source>Vertical offset in pixels to the baseline of text</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7d9ff4f0de398581c4640bcbb6e536c355a391be" translate="yes" xml:space="preserve">
          <source>Visibility</source>
          <target state="translated">Visibility</target>
        </trans-unit>
        <trans-unit id="d29c3f04e4d8b6ef1dec262fa3dad9f63526dfaa" translate="yes" xml:space="preserve">
          <source>Visibility &amp;rarr;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0b9dd4710b6171324ae50778cb44a06d445302c4" translate="yes" xml:space="preserve">
          <source>Visibility from other objects</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8ba4e16f51660911b9a5e356a4082c0ad962627f" translate="yes" xml:space="preserve">
          <source>Volatile &amp;rarr;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dd67e2fc1d589688ad7430a13e8b85b83c73e557" translate="yes" xml:space="preserve">
          <source>Volatile (class)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="762dd6a7da550e7b6fdc00b417847fd608d3d449" translate="yes" xml:space="preserve">
          <source>WBMP</source>
          <target state="translated">WBMP</target>
        </trans-unit>
        <trans-unit id="ab49b15e33551bf0c1b5bfb8f9561ebc71acc533" translate="yes" xml:space="preserve">
          <source>WBMP Support</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="237c00019acae36160814c9f86029c99d93a40da" translate="yes" xml:space="preserve">
          <source>WDDX &amp;rarr;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1a0b8ba6d641bb08bf546a0c91bafb52a2c1d1f3" translate="yes" xml:space="preserve">
          <source>Wait for a signal on a Condition Variable, optionally specifying a timeout to limit waiting time.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ac131c3b8c349189dafdecc246291d5315b9fb25" translate="yes" xml:space="preserve">
          <source>Wait for events to become active, and run their callbacks.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="36db53172c253989ad68ae5c9817504786f733e2" translate="yes" xml:space="preserve">
          <source>Wait for events to become active, and run their callbacks. The same as &lt;a href=&quot;eventbase.loop&quot;&gt;EventBase::loop()&lt;/a&gt; with no flags set.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="309f6545ef4eeafe11b16fdac9341b6a635dc055" translate="yes" xml:space="preserve">
          <source>Wait for status changes of process PID(or any process if PID is specified as &lt;strong&gt;&lt;code&gt;0&lt;/code&gt;&lt;/strong&gt; ).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ea12d95865457785b2dcfc289a3d056de6f19528" translate="yes" xml:space="preserve">
          <source>Wait for the connection to become writable</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="26eb333088100daf7e18623a979205639cc21f9b" translate="yes" xml:space="preserve">
          <source>Waits for a job to be assigned and then calls the appropriate callback function. Issues an &lt;strong&gt;&lt;code&gt;E_WARNING&lt;/code&gt;&lt;/strong&gt; with the last Gearman error if the return code is not one of &lt;strong&gt;&lt;code&gt;GEARMAN_SUCCESS&lt;/code&gt;&lt;/strong&gt;, &lt;strong&gt;&lt;code&gt;GEARMAN_IO_WAIT&lt;/code&gt;&lt;/strong&gt;, or &lt;strong&gt;&lt;code&gt;GEARMAN_WORK_FAIL&lt;/code&gt;&lt;/strong&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dfd475aebbf9b864c69bda6b0f5439629f142992" translate="yes" xml:space="preserve">
          <source>Waits for the SyncEvent object to be fired.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ff9c1199304da95e66f7c3e1e051767a01f28481" translate="yes" xml:space="preserve">
          <source>Warnings (&lt;strong&gt;&lt;code&gt;E_WARNING&lt;/code&gt;&lt;/strong&gt; level) will be issued if &lt;code&gt;shm_identifier&lt;/code&gt; is not a valid SysV shared memory index or if there was not enough shared memory remaining to complete your request.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8341f59991dc354cf75baacae43bc707bb3d93ee" translate="yes" xml:space="preserve">
          <source>WarningsReturnAsErrors</source>
          <target state="translated">WarningsReturnAsErrors</target>
        </trans-unit>
        <trans-unit id="1ca6aa81b1679ace7b6363da925c6a906054bea1" translate="yes" xml:space="preserve">
          <source>Was there an error during the request</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dbca700ada736976456fb80b30dd292faaca6f6c" translate="yes" xml:space="preserve">
          <source>Watch to remove from the instance</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="829cccf277f268db6aeccaadd2774537a17d678d" translate="yes" xml:space="preserve">
          <source>Watcher priorities:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="019b8318d75981dab2b5332b37633750de4528cf" translate="yes" xml:space="preserve">
          <source>Watcher priority</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ce8053b726ca33a75c518b0f4c4794df1a4cd3bb" translate="yes" xml:space="preserve">
          <source>Watchers have keepalive &lt;code&gt;value&lt;/code&gt;&lt;strong&gt;&lt;code&gt;TRUE&lt;/code&gt;&lt;/strong&gt; by default.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="88c6807f4cc76a27f04e0c4228051d5cf4888130" translate="yes" xml:space="preserve">
          <source>We can also use the &lt;code&gt;contextnode&lt;/code&gt; parameter to shorten our expression:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3c3411d7a57213dc2d30df7025f6048129e707ff" translate="yes" xml:space="preserve">
          <source>We have an array of rows, but &lt;strong&gt;array_multisort()&lt;/strong&gt; requires an array of columns, so we use the below code to obtain the columns, then perform the sorting.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f56e6bfbd29bf4cbc03b3a2bdabc12d1d772c323" translate="yes" xml:space="preserve">
          <source>We now have a problem. The order of the placeholders in the format string does not match the order of the arguments in the code. We would like to leave the code as is and simply indicate in the format string which arguments the placeholders refer to. We would write the format string like this instead:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fa2b73f03a92dac297d2bc57596766eb747fd379" translate="yes" xml:space="preserve">
          <source>We will use different locales and format specifications to illustrate the use of this function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ada4821ef23e4cb054641fbf445860bfa5fdcc36" translate="yes" xml:space="preserve">
          <source>We're assuming that error_reporting is disabled for this example; otherwise the following code would trigger deprecated and strict notices, respectively, depending on the PHP version.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eadae35c85dd863f2fa8116682bc9d25d9bcaaf6" translate="yes" xml:space="preserve">
          <source>WeakMap &amp;rarr;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="079ab461bdde86f071557402023d773143cc1a84" translate="yes" xml:space="preserve">
          <source>WeakMap (class)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dde20a153c79a1ca4aaf0e78e341eb1988948e01" translate="yes" xml:space="preserve">
          <source>WeakMap::__construct</source>
          <target state="translated">WeakMap::__construct</target>
        </trans-unit>
        <trans-unit id="1631ab71c771e75076602b2a61083b8a2dd33965" translate="yes" xml:space="preserve">
          <source>WeakMap::__construct &amp;mdash; Constructs a new map</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="712fa82621493390681fa68f246ba0d0677173d9" translate="yes" xml:space="preserve">
          <source>WeakMap::__construct &amp;rarr;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7317c14cc8bd193ea27cd7a3e58bf037a6e2d1fb" translate="yes" xml:space="preserve">
          <source>WeakMap::count</source>
          <target state="translated">WeakMap::count</target>
        </trans-unit>
        <trans-unit id="c96c7e900be3f188521d06dabf7bba68a67b3177" translate="yes" xml:space="preserve">
          <source>WeakMap::count &amp;mdash; Counts the number of live entries in the map</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ae70d573cede4ae1e67daa13ccc384a163ed1011" translate="yes" xml:space="preserve">
          <source>WeakMap::count &amp;rarr;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d99f7703fd36d0387a1c7635664135fc9e14ed42" translate="yes" xml:space="preserve">
          <source>WeakMap::current</source>
          <target state="translated">WeakMap::current</target>
        </trans-unit>
        <trans-unit id="65594c1ccdd404d055af5fc42fcccaacbc085bbd" translate="yes" xml:space="preserve">
          <source>WeakMap::current &amp;mdash; Returns the current value under iteration</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="66b42fe89a6edeb49d796f6745f600ffa1c57a52" translate="yes" xml:space="preserve">
          <source>WeakMap::current &amp;rarr;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="44816283eaf101655be7f51652d62efb05c1e91d" translate="yes" xml:space="preserve">
          <source>WeakMap::key</source>
          <target state="translated">WeakMap::key</target>
        </trans-unit>
        <trans-unit id="f50870f0a856a46f76c23c98f98cdbed47601713" translate="yes" xml:space="preserve">
          <source>WeakMap::key &amp;mdash; Returns the current key under iteration</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3e93c18769437899a1b71cdc730437b5cbde30e7" translate="yes" xml:space="preserve">
          <source>WeakMap::key &amp;rarr;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e0534fa83e726131c4e11bf4172c5e8f88773a2e" translate="yes" xml:space="preserve">
          <source>WeakMap::next</source>
          <target state="translated">WeakMap::next</target>
        </trans-unit>
        <trans-unit id="407eea3e49926ed67266ada7d30287b0737d619a" translate="yes" xml:space="preserve">
          <source>WeakMap::next &amp;mdash; Advances to the next map element</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ee557ee0a64cf5a34e2dced2ce4946bc65348103" translate="yes" xml:space="preserve">
          <source>WeakMap::next &amp;rarr;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5204b328dc8c3c2fe8b340cd70b22dfb8a32f024" translate="yes" xml:space="preserve">
          <source>WeakMap::offsetExists</source>
          <target state="translated">WeakMap::offsetExists</target>
        </trans-unit>
        <trans-unit id="23eb85027cab7e71476d5472ec0ba171b2d33194" translate="yes" xml:space="preserve">
          <source>WeakMap::offsetExists &amp;mdash; Checks whether a certain object is in the map</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="96289e648a78082cff2b0b4d7229017f24530dd8" translate="yes" xml:space="preserve">
          <source>WeakMap::offsetExists &amp;rarr;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="67e2fcea0a411d16a3f843d258c847e3b8182830" translate="yes" xml:space="preserve">
          <source>WeakMap::offsetGet</source>
          <target state="translated">WeakMap::offsetGet</target>
        </trans-unit>
        <trans-unit id="7e087c543543e38fc10305dd96f292cfc0131729" translate="yes" xml:space="preserve">
          <source>WeakMap::offsetGet &amp;mdash; Returns the value pointed to by a certain object</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6abced49078e3b5b81bc4e7f711a484342d3e67d" translate="yes" xml:space="preserve">
          <source>WeakMap::offsetGet &amp;rarr;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7989e55d50142d997d31bc762c179d8f861fcdb2" translate="yes" xml:space="preserve">
          <source>WeakMap::offsetSet</source>
          <target state="translated">WeakMap::offsetSet</target>
        </trans-unit>
        <trans-unit id="50f4c3932dfb5f8a12a92437a41daff434dd41d0" translate="yes" xml:space="preserve">
          <source>WeakMap::offsetSet &amp;mdash; Updates the map with a new key-value pair</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="feff7069866164d6d0c328919153bd956f9ae5f8" translate="yes" xml:space="preserve">
          <source>WeakMap::offsetSet &amp;rarr;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="13a0b8df9e4742e56206a067d8a40f2d383fb14f" translate="yes" xml:space="preserve">
          <source>WeakMap::offsetUnset</source>
          <target state="translated">WeakMap::offsetUnset</target>
        </trans-unit>
        <trans-unit id="0966dc8539a939244c226243eda43ff5b77c0762" translate="yes" xml:space="preserve">
          <source>WeakMap::offsetUnset &amp;mdash; Removes an entry from the map</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ba7220b7fd95593806ebb50240de79e2e0f97c83" translate="yes" xml:space="preserve">
          <source>WeakMap::offsetUnset &amp;rarr;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6e8404a5ce61fe517a2c031d07ce3afb6ef0b43c" translate="yes" xml:space="preserve">
          <source>WeakMap::rewind</source>
          <target state="translated">WeakMap::rewind</target>
        </trans-unit>
        <trans-unit id="2915899dea6e0c6f5b048b620233e1e6489fc74c" translate="yes" xml:space="preserve">
          <source>WeakMap::rewind &amp;mdash; Rewinds the iterator to the beginning of the map</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d3622bee16d1f25ea4113d1ea48d1ccf5f06e853" translate="yes" xml:space="preserve">
          <source>WeakMap::rewind &amp;rarr;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="64cb1566f6b125a443c03d061a65389478079edd" translate="yes" xml:space="preserve">
          <source>WeakMap::valid</source>
          <target state="translated">WeakMap::valid</target>
        </trans-unit>
        <trans-unit id="4a54bfb528224740739db42045a5bb2a2473b1ed" translate="yes" xml:space="preserve">
          <source>WeakMap::valid &amp;mdash; Returns whether the iterator is still on a valid map element</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4497247ee7781bf747b2fa240c706c0ad8ffe2dc" translate="yes" xml:space="preserve">
          <source>WeakMap::valid &amp;rarr;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="755bfe35247cd09b3ebeac36897ffd1534866f01" translate="yes" xml:space="preserve">
          <source>WeakRef (class)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="164229223b3dc3c2756fee31fd2aa2274bb441af" translate="yes" xml:space="preserve">
          <source>Weaknesses</source>
          <target state="translated">Weaknesses</target>
        </trans-unit>
        <trans-unit id="6d78031203a1534986b193ab2a1f1cda67ffd1f7" translate="yes" xml:space="preserve">
          <source>Weakref</source>
          <target state="translated">Weakref</target>
        </trans-unit>
        <trans-unit id="198ea921eb6d46e32760c4f09a586d803c85d987" translate="yes" xml:space="preserve">
          <source>Weakref::__construct</source>
          <target state="translated">Weakref::__construct</target>
        </trans-unit>
        <trans-unit id="2135974abd1102d56d81bcb389194addd048ca16" translate="yes" xml:space="preserve">
          <source>Weakref::__construct &amp;mdash; Constructs a new weak reference</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="087897d7063d75b22093e397b7e1968f3e8be04d" translate="yes" xml:space="preserve">
          <source>Weakref::__construct &amp;rarr;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="02a8c6e849cd12ce56d964546b55a8a501fa8cc1" translate="yes" xml:space="preserve">
          <source>Weakref::acquire</source>
          <target state="translated">Weakref::acquire</target>
        </trans-unit>
        <trans-unit id="e657e593cc6779f72288a0745b3e98544ade4621" translate="yes" xml:space="preserve">
          <source>Weakref::acquire &amp;mdash; Acquires a strong reference on that object</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="da3f63b046d52ab8f929edc6dc692c5fb022fdf3" translate="yes" xml:space="preserve">
          <source>Weakref::acquire &amp;rarr;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0e5d0f61fbb853555fcd3bef5a233c2149e880b5" translate="yes" xml:space="preserve">
          <source>Weakref::get</source>
          <target state="translated">Weakref::get</target>
        </trans-unit>
        <trans-unit id="96419e77394f27ef9872f8536aadf63b7854822a" translate="yes" xml:space="preserve">
          <source>Weakref::get &amp;mdash; Returns the object pointed to by the weak reference</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9f54a80f18c23449fdfde9b00ff94244557491d9" translate="yes" xml:space="preserve">
          <source>Weakref::get &amp;rarr;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="12d4a9fe6ce8d6283d1d9e39df22155963321258" translate="yes" xml:space="preserve">
          <source>Weakref::release</source>
          <target state="translated">Weakref::release</target>
        </trans-unit>
        <trans-unit id="f505e9de90f967329fc958e3945626e4c917a3ad" translate="yes" xml:space="preserve">
          <source>Weakref::release &amp;mdash; Releases a previously acquired reference</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0a3dd279e7d14e56d124d24d20bca5e51badd3a5" translate="yes" xml:space="preserve">
          <source>Weakref::release &amp;rarr;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="143ca284b581706b184b150d9fb170c6be26833d" translate="yes" xml:space="preserve">
          <source>Weakref::valid</source>
          <target state="translated">Weakref::valid</target>
        </trans-unit>
        <trans-unit id="1f53d87876899bb7c0fd3612cba8ed633ea3b57d" translate="yes" xml:space="preserve">
          <source>Weakref::valid &amp;mdash; Checks whether the object referenced still exists</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fb650c282453a8f197e6e80d95c59689ff95ad6f" translate="yes" xml:space="preserve">
          <source>Weakref::valid &amp;rarr;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e80805083ea9c8568a9aa46f0885b43318f66b9c" translate="yes" xml:space="preserve">
          <source>Web Services &amp;rarr;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7a9fe4926f27ca26ad09c60006889c894f588cc2" translate="yes" xml:space="preserve">
          <source>WebP Support</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b0fcf8fa503da4e77eeb3f89103a94545a235679" translate="yes" xml:space="preserve">
          <source>Wednesday.</source>
          <target state="translated">Wednesday.</target>
        </trans-unit>
        <trans-unit id="4b57f1621241ed16f6420cf00a8f0e1ffa609b46" translate="yes" xml:space="preserve">
          <source>Week number of the given year, starting with the first Sunday as the first week</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a5cce1680cb8961ad65012c1094cce2fb7e714df" translate="yes" xml:space="preserve">
          <source>Week of the date.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1cc048b98ac5c8f92cdb500f6a7ae3760b40c287" translate="yes" xml:space="preserve">
          <source>Western European, Latin-1.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4f6e1b15162fe15a990f076d7d4b1230936ec11b" translate="yes" xml:space="preserve">
          <source>Western European, Latin-9. Adds the Euro sign, French and Finnish letters missing in Latin-1 (ISO-8859-1).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a818ff92cfd1e268b4de83e0b926af42deb1ce3f" translate="yes" xml:space="preserve">
          <source>What PHP does with these errors depends on two further php.ini directives. &lt;a href=&quot;https://secure.php.net/manual/en/errorfunc.configuration.php#ini.display-errors&quot;&gt;&lt;code&gt;display_errors&lt;/code&gt;&lt;/a&gt; controls whether the error is shown as part of the script's output. This should always be disabled in a production environment, as it can include confidential information such as database passwords, but is often useful to enable in development, as it ensures immediate reporting of issues.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="51c47d817b4e5189780176de99bd413d7f13bdf6" translate="yes" xml:space="preserve">
          <source>What References Are</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fdecff9b6c22d689d7c2abfc3dfe7d3d73024828" translate="yes" xml:space="preserve">
          <source>What References Are Not</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6d7b6c6140fbe71886c7c45ed10826cb7389bc71" translate="yes" xml:space="preserve">
          <source>What References Are Not &amp;rarr;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3bf04eca56fea473ac9bcb9ebdca621934e16a7c" translate="yes" xml:space="preserve">
          <source>What References Do</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cf1081c5da62d7bf83a88e4405b56f2268967b53" translate="yes" xml:space="preserve">
          <source>What References Do &amp;rarr;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="091c0a9e66d7ec1a59cd819688b95d279ac11ec2" translate="yes" xml:space="preserve">
          <source>What are namespaces? In the broadest definition namespaces are a way of encapsulating items. This can be seen as an abstract concept in many places. For example, in any operating system directories serve to group related files, and act as a namespace for the files within them. As a concrete example, the file &lt;em&gt;foo.txt&lt;/em&gt; can exist in both directory &lt;em&gt;/home/greg&lt;/em&gt; and in &lt;em&gt;/home/other&lt;/em&gt;, but two copies of &lt;em&gt;foo.txt&lt;/em&gt; cannot co-exist in the same directory. In addition, to access the &lt;em&gt;foo.txt&lt;/em&gt; file outside of the &lt;em&gt;/home/greg&lt;/em&gt; directory, we must prepend the directory name to the file name using the directory separator to get &lt;em&gt;/home/greg/foo.txt&lt;/em&gt;. This same principle extends to namespaces in the programming world.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8b077f006d219ba5aa5bb763875a4eeddbdd4476" translate="yes" xml:space="preserve">
          <source>What happens is that &lt;var&gt;&lt;var&gt;$var&lt;/var&gt;&lt;/var&gt; in &lt;var&gt;&lt;var&gt;foo&lt;/var&gt;&lt;/var&gt; will be bound with &lt;var&gt;&lt;var&gt;$bar&lt;/var&gt;&lt;/var&gt; in the caller, but then re-bound with &lt;var&gt;&lt;var&gt;&lt;a href=&quot;reserved.variables.globals&quot;&gt;$GLOBALS[&quot;baz&quot;]&lt;/a&gt;&lt;/var&gt;&lt;/var&gt;. There's no way to bind &lt;var&gt;&lt;var&gt;$bar&lt;/var&gt;&lt;/var&gt; in the calling scope to something else using the reference mechanism, since &lt;var&gt;&lt;var&gt;$bar&lt;/var&gt;&lt;/var&gt; is not available in the function &lt;var&gt;&lt;var&gt;foo&lt;/var&gt;&lt;/var&gt; (it is represented by &lt;var&gt;&lt;var&gt;$var&lt;/var&gt;&lt;/var&gt;, but &lt;var&gt;&lt;var&gt;$var&lt;/var&gt;&lt;/var&gt; has only variable contents and not name-to-value binding in the calling symbol table). You can use &lt;a href=&quot;language.references.return&quot;&gt;returning references&lt;/a&gt; to reference variables selected by the function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bbebaee3a83ff2385568e485f87a67a6e4cdb1ba" translate="yes" xml:space="preserve">
          <source>What revision of the CGI specification the server is using; i.e. '&lt;em&gt;CGI/1.1&lt;/em&gt;'.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fac0aeeb77e1995e22e4589ae8b56dbe97ff3fdc" translate="yes" xml:space="preserve">
          <source>What scope will parental property access look at? 0 == Global scope, 1 == Calling scope, 2 == Scope preceding calling scope, 3 == The scope before that, etc..., etc...</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="85aa1801581444cbfb8ceee3d44f040a1516da28" translate="yes" xml:space="preserve">
          <source>What the function returns, first on success, then on failure. See also the &amp;amp;return.success; entity</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d2a4ff29e1e98d2838be401b2ecc61db5ea42505" translate="yes" xml:space="preserve">
          <source>When &lt;a href=&quot;https://secure.php.net/manual/en/errorfunc.configuration.php#ini.error-reporting&quot;&gt;error_reporting&lt;/a&gt; is set to show &lt;strong&gt;&lt;code&gt;E_NOTICE&lt;/code&gt;&lt;/strong&gt; level errors (by setting it to &lt;strong&gt;&lt;code&gt;E_ALL&lt;/code&gt;&lt;/strong&gt;, for example), such uses will become immediately visible. By default, &lt;a href=&quot;https://secure.php.net/manual/en/errorfunc.configuration.php#ini.error-reporting&quot;&gt;error_reporting&lt;/a&gt; is set not to show notices.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d4d0fa30aa3d8e2fbc653f186008dd8aeae8e6a6" translate="yes" xml:space="preserve">
          <source>When &lt;a href=&quot;https://secure.php.net/manual/en/ini.sect.safe-mode.php#ini.safe-mode&quot;&gt;safe mode&lt;/a&gt; is enabled, PHP checks whether the files or directories you are about to operate on have the same UID (owner) as the script that is being executed. In addition, you cannot set the SUID, SGID and sticky bits.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ebbd6b6678c4ab7ad9678a3b3c4b3e716270c491" translate="yes" xml:space="preserve">
          <source>When &lt;a href=&quot;https://secure.php.net/manual/en/session.configuration.php#ini.session.use-strict-mode&quot;&gt;session.use_strict_mode&lt;/a&gt; is enabled. You do not have to remove obsolete session ID cookie because session module will not accept session ID cookie when there is no data associated to the session ID and set new session ID cookie. Enabling &lt;a href=&quot;https://secure.php.net/manual/en/session.configuration.php#ini.session.use-strict-mode&quot;&gt;session.use_strict_mode&lt;/a&gt; is recommended for all sites.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3d2397c5dfde37a434bb11f4ac3a1a29fc4bf1b2" translate="yes" xml:space="preserve">
          <source>When &lt;a href=&quot;https://secure.php.net/manual/en/session.configuration.php#ini.session.use-trans-sid&quot;&gt;session.use_trans_sid&lt;/a&gt; is enabled, output must be started after &lt;strong&gt;session_regenerate_id()&lt;/strong&gt; call. Otherwise, old session ID is used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d55a433046460eb1bf1a5f16289f500ad97a8cdd" translate="yes" xml:space="preserve">
          <source>When &lt;a href=&quot;https://secure.php.net/manual/en/session.configuration.php#ini.session.use-trans-sid&quot;&gt;session.use_trans_sid&lt;/a&gt; is enabled, the &lt;strong&gt;session_start()&lt;/strong&gt; function will register an internal output handler for URL rewriting.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fbd8d40e9e1b1ff7590aa52ebc0c4de263f1b484" translate="yes" xml:space="preserve">
          <source>When &lt;a href=&quot;mysqli-stmt.fetch&quot;&gt;mysqli_stmt_fetch()&lt;/a&gt; is called to fetch data, the MySQL client/server protocol places the data for the bound columns into the specified variables &lt;code&gt;var1, ...&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="59ee09afcbdf262e6384fd282de3bee06ee0a8ac" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;details&lt;/code&gt; is &lt;strong&gt;&lt;code&gt;FALSE&lt;/code&gt;&lt;/strong&gt; the value will be the current value of the option.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="87b73a3fb2d3f1b6cbe7ebfd4c1bd3eb1e4cbc6e" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;details&lt;/code&gt; is &lt;strong&gt;&lt;code&gt;TRUE&lt;/code&gt;&lt;/strong&gt; (default) the array will contain &lt;em&gt;global_value&lt;/em&gt; (set in &lt;var&gt;php.ini&lt;/var&gt;), &lt;em&gt;local_value&lt;/em&gt; (perhaps set with &lt;a href=&quot;function.ini-set&quot;&gt;ini_set()&lt;/a&gt; or &lt;var&gt;.htaccess&lt;/var&gt;), and &lt;em&gt;access&lt;/em&gt; (the access level).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6916f9764fee532b5968d35ec4fd1181b0f12ac1" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;double_encode&lt;/code&gt; is turned off PHP will not encode existing html entities, the default is to convert everything.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aaed849fee8316b0256b435cede2ead294ec74f7" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;double_encode&lt;/code&gt; is turned off PHP will not encode existing html entities. The default is to convert everything.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cef082e739c5322b9af13b6273d5665a050eba11" translate="yes" xml:space="preserve">
          <source>When &lt;em&gt;parent_scope&lt;/em&gt; is set to a string value, it refers to a named array variable in the global scope. If the named variable does not exist at the time of access it will be created as an empty array. If the variable exists but it not an array, a dummy array will be created containing a reference to the named global variable.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8498179e3e8d69ed1e671da2424dc72727e52551" translate="yes" xml:space="preserve">
          <source>When &lt;strong&gt;&lt;code&gt;FALSE&lt;/code&gt;&lt;/strong&gt;, the &lt;a href=&quot;class.sqlite3&quot;&gt;SQLite3&lt;/a&gt; instance, and &lt;a href=&quot;class.sqlite3stmt&quot;&gt;SQLite3Stmt&lt;/a&gt; and &lt;a href=&quot;class.sqlite3result&quot;&gt;SQLite3Result&lt;/a&gt; instances derived from it, will raise warnings on error.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1e03a6bf2ab72f7778bbfbd6ba84c6a650afd28d" translate="yes" xml:space="preserve">
          <source>When &lt;strong&gt;&lt;code&gt;HASH_HMAC&lt;/code&gt;&lt;/strong&gt; is specified for &lt;code&gt;options&lt;/code&gt;, a shared secret key to be used with the HMAC hashing method must be supplied in this parameter.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="417505c6d60faed727ab6a5a1b203e06ed94d35e" translate="yes" xml:space="preserve">
          <source>When &lt;strong&gt;&lt;code&gt;TRUE&lt;/code&gt;&lt;/strong&gt; the cookie will be made accessible only through the HTTP protocol. This means that the cookie won't be accessible by scripting languages, such as JavaScript. It has been suggested that this setting can effectively help to reduce identity theft through XSS attacks (although it is not supported by all browsers), but that claim is often disputed. Added in PHP 5.2.0. &lt;strong&gt;&lt;code&gt;TRUE&lt;/code&gt;&lt;/strong&gt; or &lt;strong&gt;&lt;code&gt;FALSE&lt;/code&gt;&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="61310f8c850b04dd7c9f5f19b2a0d7021c0cd9a2" translate="yes" xml:space="preserve">
          <source>When &lt;strong&gt;&lt;code&gt;TRUE&lt;/code&gt;&lt;/strong&gt;, returned &lt;a href=&quot;language.types.object&quot;&gt;object&lt;/a&gt;s will be converted into associative &lt;a href=&quot;language.types.array&quot;&gt;array&lt;/a&gt;s.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d41df91f7bc5c7604548da41f2c2b0569c57689c" translate="yes" xml:space="preserve">
          <source>When &lt;strong&gt;&lt;code&gt;TRUE&lt;/code&gt;&lt;/strong&gt;, returns the digest in raw binary format with a length of 16.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="64ce52402baa77edf4f39c0a8123dd0f0550f4a7" translate="yes" xml:space="preserve">
          <source>When &lt;strong&gt;&lt;code&gt;TRUE&lt;/code&gt;&lt;/strong&gt;, returns the digest in raw binary format with a length of 20.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="616f6d3c463f7ba34905361f3b913da543426ad7" translate="yes" xml:space="preserve">
          <source>When &lt;strong&gt;&lt;code&gt;TRUE&lt;/code&gt;&lt;/strong&gt;, the &lt;a href=&quot;class.sqlite3&quot;&gt;SQLite3&lt;/a&gt; instance, and &lt;a href=&quot;class.sqlite3stmt&quot;&gt;SQLite3Stmt&lt;/a&gt; and &lt;a href=&quot;class.sqlite3result&quot;&gt;SQLite3Result&lt;/a&gt; instances derived from it, will throw exceptions on error.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9a0106c21e7055e6969c5c9d65146719abca7873" translate="yes" xml:space="preserve">
          <source>When &lt;strong&gt;imap_alerts()&lt;/strong&gt; is called, the alert stack is subsequently cleared. The</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1685fa1eebb3c8c31d193f5e57ebd028b651a6f9" translate="yes" xml:space="preserve">
          <source>When &lt;strong&gt;imap_errors()&lt;/strong&gt; is called, the error stack is subsequently cleared.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a3f2786a231d8dfc29dd80b579f53b49737cffc6" translate="yes" xml:space="preserve">
          <source>When &lt;strong&gt;serialize()&lt;/strong&gt; serializes objects, the leading backslash is not included in the class name of namespaced classes for maximum compatibility.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e04663d3841ab50b1248bf886f918f1148f1fbbc" translate="yes" xml:space="preserve">
          <source>When &lt;strong&gt;session_start()&lt;/strong&gt; is called or when a session auto starts, PHP will call the open and read session save handlers. These will either be a built-in save handler provided by default or by PHP extensions (such as SQLite or Memcached); or can be custom handler as defined by &lt;a href=&quot;function.session-set-save-handler&quot;&gt;session_set_save_handler()&lt;/a&gt;. The read callback will retrieve any existing session data (stored in a special serialized format) and will be unserialized and used to automatically populate the $_SESSION superglobal when the read callback returns the saved session data back to PHP session handling.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="30828ec0a9008947515f4ee35d77b90d59c86d3f" translate="yes" xml:space="preserve">
          <source>When &lt;strong&gt;stream_select()&lt;/strong&gt; returns, the arrays &lt;code&gt;read&lt;/code&gt;, &lt;code&gt;write&lt;/code&gt; and &lt;code&gt;except&lt;/code&gt; are modified to indicate which stream resource(s) actually changed status.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f15e766b60b789578deec6d1563c660b3e3db72c" translate="yes" xml:space="preserve">
          <source>When &lt;strong&gt;var_export()&lt;/strong&gt; exports objects, the leading backslash is not included in the class name of namespaced classes for maximum compatibility.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="77d8ab47108394f4f575cad62d6674e0b288dfb6" translate="yes" xml:space="preserve">
          <source>When PHP parses a file, it looks for opening and closing tags, which are &lt;em&gt;&amp;lt;?php&lt;/em&gt; and &lt;em&gt;?&amp;gt;&lt;/em&gt; which tell PHP to start and stop interpreting the code between them. Parsing in this manner allows PHP to be embedded in all sorts of different documents, as everything outside of a pair of opening and closing tags is ignored by the PHP parser.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ad28ef947a1e6c52f331fb8a20000d01184ad40d" translate="yes" xml:space="preserve">
          <source>When a &lt;a href=&quot;language.types.string&quot;&gt;string&lt;/a&gt; is evaluated in a numeric context, the resulting value and type are determined as follows.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a75e6ba10b16e45a1017e547a107d249e7d12661" translate="yes" xml:space="preserve">
          <source>When a &lt;a href=&quot;language.types.string&quot;&gt;string&lt;/a&gt; is specified in double quotes or with heredoc, &lt;a href=&quot;https://secure.php.net/manual/en/language.variables.php&quot;&gt;variables&lt;/a&gt; are parsed within it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7cc7cbd43824bcbc1ea796ec40bc78b4e9e72b07" translate="yes" xml:space="preserve">
          <source>When a &lt;code&gt;start&lt;/code&gt; parameter is set, the returned length is counted starting from this position, not from the beginning of &lt;code&gt;subject&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ef7799fc26492fd2f307f9517c787aea95caedce" translate="yes" xml:space="preserve">
          <source>When a Worker is started, the run method will be executed, but the Thread will not leave until one of the following conditions are met:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0842a78423840398897901b6408ca175cf3f8a9b" translate="yes" xml:space="preserve">
          <source>When a capturing subpattern is repeated, the value captured is the substring that matched the final iteration. For example, after &lt;em&gt;(tweedle[dume]{3}\s*)+&lt;/em&gt; has matched &quot;tweedledum tweedledee&quot; the value of the captured substring is &quot;tweedledee&quot;. However, if there are nested capturing subpatterns, the corresponding captured values may have been set in previous iterations. For example, after &lt;em&gt;/(a|(b))+/&lt;/em&gt; matches &quot;aba&quot; the value of the second captured substring is &quot;b&quot;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="98dd1006a23d763b0f30b24c48860d1060451f68" translate="yes" xml:space="preserve">
          <source>When a correct signature is found, the appropriate constant value will be returned otherwise the return value is &lt;strong&gt;&lt;code&gt;FALSE&lt;/code&gt;&lt;/strong&gt;. The return value is the same value that &lt;a href=&quot;function.getimagesize&quot;&gt;getimagesize()&lt;/a&gt; returns in index 2 but &lt;strong&gt;exif_imagetype()&lt;/strong&gt; is much faster.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b2488020760c0ba7d1b58d79db9d80de43ef61db" translate="yes" xml:space="preserve">
          <source>When a file is included, parsing drops out of PHP mode and into HTML mode at the beginning of the target file, and resumes again at the end. For this reason, any code inside the target file which should be executed as PHP code must be enclosed within &lt;a href=&quot;language.basic-syntax.phpmode&quot;&gt;valid PHP start and end tags&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bd3cf007cf1af09cdc25bf2c5c0ff0a9706cb483" translate="yes" xml:space="preserve">
          <source>When a file is included, the code it contains inherits the &lt;a href=&quot;language.variables.scope&quot;&gt;variable scope&lt;/a&gt; of the line on which the include occurs. Any variables available at that line in the calling file will be available within the called file, from that point forward. However, all functions and classes defined in the included file have the global scope.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="33bcc6cd7b523f9fe8ed5df311e46c2255a9e9ab" translate="yes" xml:space="preserve">
          <source>When a file is set to be added to the archive, PHP will lock the file. The lock is only released once the &lt;a href=&quot;class.ziparchive&quot;&gt;ZipArchive&lt;/a&gt; object has been closed, either via &lt;a href=&quot;ziparchive.close&quot;&gt;ZipArchive::close()&lt;/a&gt; or the &lt;a href=&quot;class.ziparchive&quot;&gt;ZipArchive&lt;/a&gt; object being destroyed. This may prevent you from being able to delete the file being added until after the lock has been released.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e9863bb72f146ee290958f0922b98d4bcdcffdd1" translate="yes" xml:space="preserve">
          <source>When a form is submitted to a PHP script, the information from that form is automatically made available to the script. There are few ways to access this information, for example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ed4f02c713760328689f107621b8f850e70f4d9c" translate="yes" xml:space="preserve">
          <source>When a function is defined in a conditional manner such as the two examples shown. Its definition must be processed &lt;em&gt;prior&lt;/em&gt; to being called.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c3141b4f28a73a6725b854f401904845821e62a1" translate="yes" xml:space="preserve">
          <source>When a generator function is called, a new object of the internal &lt;a href=&quot;class.generator&quot;&gt;Generator&lt;/a&gt; class is returned. This object implements the &lt;a href=&quot;class.iterator&quot;&gt;Iterator&lt;/a&gt; interface in much the same way as a forward-only iterator object would, and provides methods that can be called to manipulate the state of the generator, including sending values to and returning values from it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1e4257975198f39a98128f9f8b37a284b596b381" translate="yes" xml:space="preserve">
          <source>When a generator function is called, it returns an object that can be iterated over. When you iterate over that object (for instance, via a &lt;a href=&quot;control-structures.foreach&quot;&gt;foreach&lt;/a&gt; loop), PHP will call the object's iteration methods each time it needs a value, then saves the state of the generator when the generator yields a value so that it can be resumed when the next value is required.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f7c92a8b8f9ae84eb91c5a4a6cd8c1cf6eb1342a" translate="yes" xml:space="preserve">
          <source>When a parenthesized subpattern is quantified with a minimum repeat count that is greater than 1 or with a limited maximum, more store is required for the compiled pattern, in proportion to the size of the minimum or maximum.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c6608c1c91e18e36d3d139581f7a58e080c0ebf0" translate="yes" xml:space="preserve">
          <source>When a pattern begins with .* and the &lt;a href=&quot;reference.pcre.pattern.modifiers&quot;&gt;PCRE_DOTALL&lt;/a&gt; option is set, the pattern is implicitly anchored by PCRE, since it can match only at the start of a subject string. However, if &lt;a href=&quot;reference.pcre.pattern.modifiers&quot;&gt;PCRE_DOTALL&lt;/a&gt; is not set, PCRE cannot make this optimization, because the . metacharacter does not then match a newline, and if the subject string contains newlines, the pattern may match from the character immediately following one of them instead of from the very start. For example, the pattern &lt;em&gt;(.*) second&lt;/em&gt; matches the subject &quot;first\nand second&quot; (where \n stands for a newline character) with the first captured substring being &quot;and&quot;. In order to do this, PCRE has to retry the match starting after every newline in the subject.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="73309604f8eda2df18d594cf23314d13ab252b67" translate="yes" xml:space="preserve">
          <source>When a pattern contains an unlimited repeat inside a subpattern that can itself be repeated an unlimited number of times, the use of a once-only subpattern is the only way to avoid some failing matches taking a very long time indeed. The pattern &lt;em&gt;(\D+|&amp;lt;\d+&amp;gt;)*[!?]&lt;/em&gt; matches an unlimited number of substrings that either consist of non-digits, or digits enclosed in &amp;lt;&amp;gt;, followed by either ! or ?. When it matches, it runs quickly. However, if it is applied to &lt;em&gt;aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa&lt;/em&gt; it takes a long time before reporting failure. This is because the string can be divided between the two repeats in a large number of ways, and all have to be tried. (The example used [!?] rather than a single character at the end, because both PCRE and Perl have an optimization that allows for fast failure when a single character is used. They remember the last single character that is required for a match, and fail early if it is not present in the string.) If the pattern is changed to &lt;em&gt;((?&amp;gt;\D+)|&amp;lt;\d+&amp;gt;)*[!?]&lt;/em&gt; sequences of non-digits cannot be broken, and failure happens quickly.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="82c942718ce47c969f3f3afddb35516fac62cacf" translate="yes" xml:space="preserve">
          <source>When a pattern is going to be used several times, it is worth spending more time analyzing it in order to speed up the time taken for matching. If this modifier is set, then this extra analysis is performed. At present, studying a pattern is useful only for non-anchored patterns that do not have a single fixed starting character.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e81053fc4010b759de1a59e6cebd07c9eba50410" translate="yes" xml:space="preserve">
          <source>When a plain instance of &lt;strong&gt;SessionHandler&lt;/strong&gt; is set as the save handler using &lt;a href=&quot;function.session-set-save-handler&quot;&gt;session_set_save_handler()&lt;/a&gt; it will wrap the current save handlers. A class extending from &lt;strong&gt;SessionHandler&lt;/strong&gt; allows you to override the methods or intercept or filter them by calls the parent class methods which ultimately wrap the internal PHP session handlers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5aa3239c7fd454f250bfb77f79f74d7801f62320" translate="yes" xml:space="preserve">
          <source>When a variable has a single reference (as did &lt;em&gt;$var1&lt;/em&gt; before it was used as an argument to &lt;strong&gt;debug_zval_dump()&lt;/strong&gt;), PHP's engine optimizes the manner in which it is passed to a function. Internally, PHP treats &lt;em&gt;$var1&lt;/em&gt; like a reference (in that the &lt;em&gt;refcount&lt;/em&gt; is increased for the scope of this function), with the caveat that &lt;em&gt;if&lt;/em&gt; the passed reference happens to be written to, a copy is made, but only at the moment of writing. This is known as &quot;copy on write.&quot;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a36822b6ef4ef1eb1f3ca3ebe39e0af0f75f9bfc" translate="yes" xml:space="preserve">
          <source>When allowing user-supplied data to be passed to this function, use &lt;a href=&quot;function.escapeshellarg&quot;&gt;escapeshellarg()&lt;/a&gt; or &lt;a href=&quot;function.escapeshellcmd&quot;&gt;escapeshellcmd()&lt;/a&gt; to ensure that users cannot trick the system into executing arbitrary commands.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="08de23417b13b2fc4faa19ecc1894f4c8f56b1b2" translate="yes" xml:space="preserve">
          <source>When an Exif header contains a Copyright note, this itself can contain two values. As the solution is inconsistent in the Exif 2.10 standard, the &lt;em&gt;COMPUTED&lt;/em&gt; section will return both entries &lt;em&gt;Copyright.Photographer&lt;/em&gt; and &lt;em&gt;Copyright.Editor&lt;/em&gt; while the &lt;em&gt;IFD0&lt;/em&gt; sections contains the byte array with the NULL character that splits both entries. Or just the first entry if the datatype was wrong (normal behaviour of Exif). The &lt;em&gt;COMPUTED&lt;/em&gt; will also contain the entry &lt;em&gt;Copyright&lt;/em&gt; which is either the original copyright string, or a comma separated list of the photo and editor copyright.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d0afbedaf451d57d0fe66c83f081f4621ba07eb0" translate="yes" xml:space="preserve">
          <source>When an autloading is trigger, &lt;a href=&quot;class.yaf-loader&quot;&gt;Yaf_Loader&lt;/a&gt; will determine which library directory should be searched in by exame the prefix name of the missed classname. If the prefix name is registered as a localnamespack then look for it in local library directory, otherwise look for it in global library directory.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8adbdfe1f86b0c70eff01069b0a1a8a817a1b18f" translate="yes" xml:space="preserve">
          <source>When an exception is thrown, code following the statement will not be executed, and PHP will attempt to find the first matching &lt;a href=&quot;language.exceptions#language.exceptions.catch&quot;&gt;&lt;em&gt;catch&lt;/em&gt;&lt;/a&gt; block. If an exception is not caught, a PHP Fatal Error will be issued with an &quot;&lt;em&gt;Uncaught Exception ...&lt;/em&gt;&quot; message, unless a handler has been defined with &lt;a href=&quot;function.set-exception-handler&quot;&gt;set_exception_handler()&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="28010906c954841c73678e15ae9f00687f285abc" translate="yes" xml:space="preserve">
          <source>When an extending class overrides the parents definition of a method, PHP will not call the parent's method. It's up to the extended class on whether or not the parent's method is called. This also applies to &lt;a href=&quot;language.oop5.decon&quot;&gt;Constructors and Destructors&lt;/a&gt;, &lt;a href=&quot;language.oop5.overloading&quot;&gt;Overloading&lt;/a&gt;, and &lt;a href=&quot;language.oop5.magic&quot;&gt;Magic&lt;/a&gt; method definitions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="72ef869fe88d8aaf031e2439c061ac48df8fd4c6" translate="yes" xml:space="preserve">
          <source>When an object is cloned, PHP 5 will perform a shallow copy of all of the object's properties. Any properties that are references to other variables will remain references.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="773aea7e261dbdd51ffaf4261c97f26e8ad868f0" translate="yes" xml:space="preserve">
          <source>When an object is destroyed, its hash may be reused for other objects.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f1d4545951b5fcac9bc933b7ca2751e66ef064b4" translate="yes" xml:space="preserve">
          <source>When an object is destroyed, its id may be reused for other objects.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7eee0e4e47ad76723052c55823f4bd8272f3bd8a" translate="yes" xml:space="preserve">
          <source>When an object is fetched, its properties are assigned from respective column values, and afterwards its constructor is invoked.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="473a3db88282d484298b6d764748029afe1e12be" translate="yes" xml:space="preserve">
          <source>When an operation (e.g. receive, send, connect, accept, ...) is performed on a blocking socket, the script will pause its execution until it receives a signal or it can perform the operation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f3cf8ebffb41daedb940c05fa60dd087d8e5d509" translate="yes" xml:space="preserve">
          <source>When an operation (e.g. receive, send, connect, accept, ...) is performed on a non-blocking socket, the script will not pause its execution until it receives a signal or it can perform the operation. Rather, if the operation would result in a block, the called function will fail.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="32a9ccd7c327dfc8e94f86cf5b9f862d2a869051" translate="yes" xml:space="preserve">
          <source>When an option change occurs at top level (that is, not inside subpattern parentheses), the change applies to the remainder of the pattern that follows. So &lt;em&gt;/ab(?i)c/&lt;/em&gt; matches only &quot;abc&quot; and &quot;abC&quot;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9115a19bb2b21903f1909f279d5ae6c78bf6dd88" translate="yes" xml:space="preserve">
          <source>When assigning an already created instance of a class to a new variable, the new variable will access the same instance as the object that was assigned. This behaviour is the same when passing instances to a function. A copy of an already created object can be made by &lt;a href=&quot;language.oop5.cloning&quot;&gt;cloning&lt;/a&gt; it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7bfc2149ebb61a70c718c6122c2837b0a4537485" translate="yes" xml:space="preserve">
          <source>When binary SQL data is converted to character C data, each byte (8 bits) of source data is represented as two ASCII characters. These characters are the ASCII character representation of the number in its hexadecimal form. For example, a binary &lt;em&gt;00000001&lt;/em&gt; is converted to &lt;em&gt;&quot;01&quot;&lt;/em&gt; and a binary &lt;em&gt;11111111&lt;/em&gt; is converted to &lt;em&gt;&quot;FF&quot;&lt;/em&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8a81c427d8208375abd62fc3f49e2a6add48b17d" translate="yes" xml:space="preserve">
          <source>When called with no arguments, &lt;strong&gt;mktime()&lt;/strong&gt; throws &lt;strong&gt;&lt;code&gt;E_STRICT&lt;/code&gt;&lt;/strong&gt; notice. Use the &lt;a href=&quot;function.time&quot;&gt;time()&lt;/a&gt; function instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f248eb7b438ee0dd21e8953d5107df9d1411ffa5" translate="yes" xml:space="preserve">
          <source>When called, &lt;strong&gt;set_time_limit()&lt;/strong&gt; restarts the timeout counter from zero. In other words, if the timeout is the default 30 seconds, and 25 seconds into script execution a call such as &lt;em&gt;set_time_limit(20)&lt;/em&gt; is made, the script will run for a total of 45 seconds before timing out.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="26541bfbd1621348ec6b3108b8409eb364b7c8aa" translate="yes" xml:space="preserve">
          <source>When calling static methods, the function call is stronger than the static property operator:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6a456ae570f823443708ace06570a023583c5454" translate="yes" xml:space="preserve">
          <source>When calling without an argument, it simply returns the current list of extensions each separated by comma. To modify the list of file extensions, simply invoke the functions with the new list of file extensions to use in a single string with each extensions separated by comma.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4bfa942dfc8ac1e1f4753c455141a3868023532a" translate="yes" xml:space="preserve">
          <source>When case-insensitive (caseless) matching is set, any letters in a class represent both their upper case and lower case versions, so for example, an insensitive [aeiou] matches &quot;A&quot; as well as &quot;a&quot;, and an insensitive [^aeiou] does not match &quot;A&quot;, whereas a sensitive (caseful) version would.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8c67689d778d38d17dc68af8228ddde1c7125ecb" translate="yes" xml:space="preserve">
          <source>When combined with namespaces, the only legal syntax for declare is &lt;em&gt;declare(encoding='...');&lt;/em&gt; where &lt;em&gt;...&lt;/em&gt; is the encoding value. &lt;em&gt;declare(encoding='...') {}&lt;/em&gt; will result in a parse error when combined with namespaces.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1f36683027410b24b0aa8fd18a20241f94cfd290" translate="yes" xml:space="preserve">
          <source>When consuming a result set that has multiple columns with the same name, it may be better to use &lt;a href=&quot;function.sqlsrv-fetch-array&quot;&gt;sqlsrv_fetch_array()&lt;/a&gt; or the combination of &lt;a href=&quot;function.sqlsrv-fetch&quot;&gt;sqlsrv_fetch()&lt;/a&gt; and &lt;a href=&quot;function.sqlsrv-get-field&quot;&gt;sqlsrv_get_field()&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6791642cf7b5127c8ce14817bfe2139a905e0e71" translate="yes" xml:space="preserve">
          <source>When converting from &lt;a href=&quot;language.types.float&quot;&gt;float&lt;/a&gt; to &lt;a href=&quot;language.types.integer&quot;&gt;integer&lt;/a&gt;, the number will be rounded &lt;em&gt;towards zero&lt;/em&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fc5aa1a27861ea1935b5aae74f2f9dcfd2898f8e" translate="yes" xml:space="preserve">
          <source>When converting to &lt;a href=&quot;language.types.boolean&quot;&gt;boolean&lt;/a&gt;, the following values are considered &lt;strong&gt;&lt;code&gt;FALSE&lt;/code&gt;&lt;/strong&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="937d50efc1ee33117dad9a4dbfd142611048c6e4" translate="yes" xml:space="preserve">
          <source>When deleting a cookie you should assure that the expiration date is in the past, to trigger the removal mechanism in your browser. Examples follow how to delete cookies sent in previous example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2bf3a6ecca45a85e29c21afb533c401e15c75fb9" translate="yes" xml:space="preserve">
          <source>When disabled, PHP will ignore the IP address returned by the FTP server in response to the PASV command and instead use the IP address that was supplied in the ftp_connect(). &lt;code&gt;value&lt;/code&gt; must be a boolean.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c7cc006dc6c26700795f19bae3eb1f08998be7cb" translate="yes" xml:space="preserve">
          <source>When doing Digest HTTP authentication this variable is set to the 'Authorization' header sent by the client (which you should then use to make the appropriate validation).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5005dd2fb4575b707f511d15664c64d2f93f4bc2" translate="yes" xml:space="preserve">
          <source>When doing HTTP authentication this variable is set to the authentication type.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ae0584fd54fdda79d9401432347e268b67429d5b" translate="yes" xml:space="preserve">
          <source>When doing HTTP authentication this variable is set to the password provided by the user.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e92d053255f03962d73e70f4f3b6484ec20a39dc" translate="yes" xml:space="preserve">
          <source>When doing HTTP authentication this variable is set to the username provided by the user.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5726019da74d93faf5f991dd3aa740fa59326213" translate="yes" xml:space="preserve">
          <source>When enabled, GET or PUT requests with a &lt;code&gt;resumepos&lt;/code&gt; or &lt;code&gt;startpos&lt;/code&gt; parameter will first seek to the requested position within the file. This is enabled by default.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e176af26e9638e99968428e6e6ffe9e2423ecc2a" translate="yes" xml:space="preserve">
          <source>When encoding an array, if the keys are not a continuous numeric sequence starting from 0, all keys are encoded as strings, and specified explicitly for each key-value pair.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ea4d62ab5510822bd93fccbc8caea2449e3eeea8" translate="yes" xml:space="preserve">
          <source>When executed, this script will print the following:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b277c95a0abe293ef12c8531834ea72ee4633bbf" translate="yes" xml:space="preserve">
          <source>When executing the example with: php script.php arg1 arg2 arg3</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="45749d12b234575c0d61faed14757d70eb7d25c9" translate="yes" xml:space="preserve">
          <source>When getting the encoding detection order, an ordered array of the encodings is returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="895397df9c61a3ac749ec54099091559e7c3d345" translate="yes" xml:space="preserve">
          <source>When inheriting from an abstract class, all methods marked abstract in the parent's class declaration must be defined by the child; additionally, these methods must be defined with the same (or a less restricted) &lt;a href=&quot;language.oop5.visibility&quot;&gt;visibility&lt;/a&gt;. For example, if the abstract method is defined as protected, the function implementation must be defined as either protected or public, but not private. Furthermore the signatures of the methods must match, i.e. the type hints and the number of required arguments must be the same. For example, if the child class defines an optional argument, where the abstract method's signature does not, there is no conflict in the signature. This also applies to constructors as of PHP 5.4. Before 5.4 constructor signatures could differ.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d25ccb323f20371a259e5fbf3a5614338047acc1" translate="yes" xml:space="preserve">
          <source>When instantiating a custom &lt;a href=&quot;class.domdocument&quot;&gt;DOMDocument&lt;/a&gt; the &lt;var&gt;&lt;var&gt;ownerDocument&lt;/var&gt;&lt;/var&gt; property will refer to the instantiated class, meaning there is no need (and in fact not possible) to use &lt;strong&gt;DOMDocument::registerNodeClass()&lt;/strong&gt; with &lt;a href=&quot;class.domdocument&quot;&gt;DOMDocument&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9828a647165a2f3e0f144f8bded8930f9ffbd67e" translate="yes" xml:space="preserve">
          <source>When more than one of &lt;strong&gt;&lt;code&gt;ENT_COMPAT&lt;/code&gt;&lt;/strong&gt;, &lt;strong&gt;&lt;code&gt;ENT_QUOTES&lt;/code&gt;&lt;/strong&gt;, &lt;strong&gt;&lt;code&gt;ENT_NOQUOTES&lt;/code&gt;&lt;/strong&gt; is present, &lt;strong&gt;&lt;code&gt;ENT_QUOTES&lt;/code&gt;&lt;/strong&gt; takes the highest precedence, followed by &lt;strong&gt;&lt;code&gt;ENT_COMPAT&lt;/code&gt;&lt;/strong&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d7a2c215d40d69b4c92fbca4bc8cba0556a93b77" translate="yes" xml:space="preserve">
          <source>When more than one of &lt;strong&gt;&lt;code&gt;ENT_DISALLOWED&lt;/code&gt;&lt;/strong&gt;, &lt;strong&gt;&lt;code&gt;ENT_IGNORE&lt;/code&gt;&lt;/strong&gt;, &lt;strong&gt;&lt;code&gt;ENT_SUBSTITUTE&lt;/code&gt;&lt;/strong&gt; are present, &lt;strong&gt;&lt;code&gt;ENT_IGNORE&lt;/code&gt;&lt;/strong&gt; takes the highest precedence, followed by &lt;strong&gt;&lt;code&gt;ENT_SUBSTITUTE&lt;/code&gt;&lt;/strong&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0c4cebed3f75f8053c6f8811adeaacc5b102732c" translate="yes" xml:space="preserve">
          <source>When more than one of &lt;strong&gt;&lt;code&gt;ENT_HTML401&lt;/code&gt;&lt;/strong&gt;, &lt;strong&gt;&lt;code&gt;ENT_HTML5&lt;/code&gt;&lt;/strong&gt;, &lt;strong&gt;&lt;code&gt;ENT_XHTML&lt;/code&gt;&lt;/strong&gt;, &lt;strong&gt;&lt;code&gt;ENT_XML1&lt;/code&gt;&lt;/strong&gt; is present, &lt;strong&gt;&lt;code&gt;ENT_HTML5&lt;/code&gt;&lt;/strong&gt; takes the highest precedence, followed by &lt;strong&gt;&lt;code&gt;ENT_XHTML&lt;/code&gt;&lt;/strong&gt;, &lt;strong&gt;&lt;code&gt;ENT_HTML401&lt;/code&gt;&lt;/strong&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0525ee2a95f009d4b4f5cea55cbe9beceb120329" translate="yes" xml:space="preserve">
          <source>When neither of &lt;strong&gt;&lt;code&gt;ENT_COMPAT&lt;/code&gt;&lt;/strong&gt;, &lt;strong&gt;&lt;code&gt;ENT_QUOTES&lt;/code&gt;&lt;/strong&gt;, &lt;strong&gt;&lt;code&gt;ENT_NOQUOTES&lt;/code&gt;&lt;/strong&gt; is present, the default is &lt;strong&gt;&lt;code&gt;ENT_COMPAT&lt;/code&gt;&lt;/strong&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="797e0bd8c3a7e11f129a6860deaea1f37ba09102" translate="yes" xml:space="preserve">
          <source>When neither of &lt;strong&gt;&lt;code&gt;ENT_HTML401&lt;/code&gt;&lt;/strong&gt;, &lt;strong&gt;&lt;code&gt;ENT_HTML5&lt;/code&gt;&lt;/strong&gt;, &lt;strong&gt;&lt;code&gt;ENT_XHTML&lt;/code&gt;&lt;/strong&gt;, &lt;strong&gt;&lt;code&gt;ENT_XML1&lt;/code&gt;&lt;/strong&gt; is present, the default is &lt;strong&gt;&lt;code&gt;ENT_HTML401&lt;/code&gt;&lt;/strong&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d88835dde02fd3fae31fc61d30e47044c760ddb5" translate="yes" xml:space="preserve">
          <source>When not enough random data is available to the system, this function will fill the remaining random bytes using the internal PHP &lt;a href=&quot;function.rand&quot;&gt;rand()&lt;/a&gt; implementation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0288e8a03062f3f725b197157bbd67a001b70b7a" translate="yes" xml:space="preserve">
          <source>When objects are fetched via &lt;em&gt;PDO::FETCH_CLASS&lt;/em&gt; the object properties are assigned first, and then the constructor of the class is invoked. If &lt;em&gt;PDO::FETCH_PROPS_LATE&lt;/em&gt; is also given, this order is reversed, i.e. first the constructor is called, and afterwards the properties are assigned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cfc0bc7632b81953ce2679b6ac9a331d8efe5d1f" translate="yes" xml:space="preserve">
          <source>When operators have equal precedence their associativity decides how the operators are grouped. For example &quot;-&quot; is left-associative, so &lt;em&gt;1 - 2 - 3&lt;/em&gt; is grouped as &lt;em&gt;(1 - 2) - 3&lt;/em&gt; and evaluates to &lt;em&gt;-4&lt;/em&gt;. &quot;=&quot; on the other hand is right-associative, so &lt;em&gt;$a = $b = $c&lt;/em&gt; is grouped as &lt;em&gt;$a = ($b = $c)&lt;/em&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2972caaa16039a4c89dfdfdb3d1cbca5523de2fa" translate="yes" xml:space="preserve">
          <source>When overriding a parent method, the child's method must match any return type declaration on the parent. If the parent doesn't define a return type, then the child method may do so.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="05deff60839426d9ba13c1b9aca49fe87c277433" translate="yes" xml:space="preserve">
          <source>When overriding methods, the parameter signature should remain the same or PHP will generate an &lt;strong&gt;&lt;code&gt;E_STRICT&lt;/code&gt;&lt;/strong&gt; level error. This does not apply to the constructor, which allows overriding with different parameters.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ace7b4ee70e90742dc096cc4cfa790bcea5f4b1d" translate="yes" xml:space="preserve">
          <source>When passed in a valid hash created by an algorithm supported by &lt;a href=&quot;function.password-hash&quot;&gt;password_hash()&lt;/a&gt;, this function will return an array of information about that hash.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="63411548935a67fabdbe9a922f0c85cf1e7f6498" translate="yes" xml:space="preserve">
          <source>When passing arguments to a sandbox function, the arguments are taken from the outer instance of PHP. If you wish to pass arguments from the sandbox's scope, be sure to access them as properties of the sandbox object as illustrated above.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fbdd5eb5c049e536f37d8dcdf07f7796e1a1ea08" translate="yes" xml:space="preserve">
          <source>When picking only one entry, &lt;strong&gt;array_rand()&lt;/strong&gt; returns the key for a random entry. Otherwise, an array of keys for the random entries is returned. This is done so that random keys can be picked from the array as well as random values. Trying to pick more elements than there are in the array will result in an &lt;strong&gt;&lt;code&gt;E_WARNING&lt;/code&gt;&lt;/strong&gt; level error, and NULL will be returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6f9a6ab083297f569c1c85947b657fcdad222f84" translate="yes" xml:space="preserve">
          <source>When reading GIF files into memory, only the first frame is returned in the image resource pointer. The size of the image is not necessarily what is reported by &lt;a href=&quot;function.getimagesize&quot;&gt;getimagesize()&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7ebb13aac5fa45849beee6f426aa77911c7c8fd7" translate="yes" xml:space="preserve">
          <source>When reading from anything that is not a regular local file, such as streams returned when reading &lt;a href=&quot;https://secure.php.net/manual/en/features.remote-files.php&quot;&gt;remote files&lt;/a&gt; or from &lt;a href=&quot;function.popen&quot;&gt;popen()&lt;/a&gt; and &lt;a href=&quot;function.fsockopen&quot;&gt;fsockopen()&lt;/a&gt;, reading will stop after a packet is available. This means that you should collect the data together in chunks as shown in the examples below.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="92767e1b09c194a5e2a17f0b4863ec959b01bd1a" translate="yes" xml:space="preserve">
          <source>When reading the whole file (for example, with &lt;a href=&quot;function.file-get-contents&quot;&gt;file_get_contents()&lt;/a&gt;), PHP will call &lt;a href=&quot;streamwrapper.stream-read&quot;&gt;streamWrapper::stream_read()&lt;/a&gt; followed by &lt;strong&gt;streamWrapper::stream_eof()&lt;/strong&gt; in a loop but as long as &lt;a href=&quot;streamwrapper.stream-read&quot;&gt;streamWrapper::stream_read()&lt;/a&gt; returns a non-empty string, the return value of &lt;strong&gt;streamWrapper::stream_eof()&lt;/strong&gt; is ignored.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ac86c31bef80d45864ca565426b1e253086fc78e" translate="yes" xml:space="preserve">
          <source>When reading the whole file (for example, with &lt;a href=&quot;function.file-get-contents&quot;&gt;file_get_contents()&lt;/a&gt;), PHP will call &lt;strong&gt;streamWrapper::stream_read()&lt;/strong&gt; followed by &lt;a href=&quot;streamwrapper.stream-eof&quot;&gt;streamWrapper::stream_eof()&lt;/a&gt; in a loop but as long as &lt;strong&gt;streamWrapper::stream_read()&lt;/strong&gt; returns a non-empty string, the return value of &lt;a href=&quot;streamwrapper.stream-eof&quot;&gt;streamWrapper::stream_eof()&lt;/a&gt; is ignored.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0d8a4090e46b7ca632ef23a825f897877b754c89" translate="yes" xml:space="preserve">
          <source>When referencing these items from outside the class definition, use the name of the class.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="795025dab2bef01d57e0535963a4bf8b71e1f74d" translate="yes" xml:space="preserve">
          <source>When repeating, this contains the offset value, otherwise this is the absolute point in time(the offset value passed to &lt;a href=&quot;evperiodic.set&quot;&gt;EvPeriodic::set()&lt;/a&gt; , although &lt;em&gt;libev&lt;/em&gt; might modify this value for better numerical stability).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4dd9e44ee815f7f794cfca01650e519bba62133f" translate="yes" xml:space="preserve">
          <source>When run in Finland (GMT +0200), the first line below prints &quot;Jan 01 1998 00:00:00&quot;, while the second prints &quot;Dec 31 1997 22:00:00&quot;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="944e4c37f7834fa80e9bfda626950b2e8120f01c" translate="yes" xml:space="preserve">
          <source>When running PHP as a command line script, and the script's tty goes away without the script being terminated then the script will die the next time it tries to write anything, unless &lt;code&gt;value&lt;/code&gt; is set to &lt;strong&gt;&lt;code&gt;TRUE&lt;/code&gt;&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="90def8fc866327dba72edf0ed07612d8d23e1def" translate="yes" xml:space="preserve">
          <source>When running on the &lt;a href=&quot;https://secure.php.net/manual/en/features.commandline.php&quot;&gt;command line &lt;/a&gt;, this will &lt;em&gt;not&lt;/em&gt; include the &lt;a href=&quot;reserved.variables.argv&quot;&gt;argv&lt;/a&gt; and &lt;a href=&quot;reserved.variables.argc&quot;&gt;argc&lt;/a&gt; entries; these are present in the &lt;var&gt;&lt;var&gt;&lt;a href=&quot;reserved.variables.server&quot;&gt;$_SERVER&lt;/a&gt;&lt;/var&gt;&lt;/var&gt;&lt;a href=&quot;language.types.array&quot;&gt;array&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b57686b673321e37605af0ab05c7f5c07e34fee0" translate="yes" xml:space="preserve">
          <source>When sending mail, the mail &lt;em&gt;must&lt;/em&gt; contain a &lt;em&gt;From&lt;/em&gt; header. This can be set with the &lt;code&gt;additional_headers&lt;/code&gt; parameter, or a default can be set in &lt;var&gt;php.ini&lt;/var&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9a7c9ca2c6d6a09045bee4486043032116a05f46" translate="yes" xml:space="preserve">
          <source>When serializing objects, PHP will attempt to call the member function &lt;a href=&quot;language.oop5.magic#object.sleep&quot;&gt;__sleep()&lt;/a&gt; prior to serialization. This is to allow the object to do any last minute clean-up, etc. prior to being serialized. Likewise, when the object is restored using &lt;a href=&quot;function.unserialize&quot;&gt;unserialize()&lt;/a&gt; the &lt;a href=&quot;language.oop5.magic#object.wakeup&quot;&gt;__wakeup()&lt;/a&gt; member function is called.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="febd7acc2a86bf5041e1e03417ac369f22921657" translate="yes" xml:space="preserve">
          <source>When set to &lt;strong&gt;&lt;code&gt;FALSE&lt;/code&gt;&lt;/strong&gt; (default) &lt;strong&gt;apc_sma_info()&lt;/strong&gt; will return a detailed information about each segment.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="884f8eca280475ffbf659fcfc1da8c8911e380c6" translate="yes" xml:space="preserve">
          <source>When set to &lt;strong&gt;&lt;code&gt;FALSE&lt;/code&gt;&lt;/strong&gt; (default) &lt;strong&gt;apcu_sma_info()&lt;/strong&gt; will return a detailed information about each segment.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8ada2f56ad713347860c58ac8e1c8d587c9daf50" translate="yes" xml:space="preserve">
          <source>When set to &lt;strong&gt;&lt;code&gt;TRUE&lt;/code&gt;&lt;/strong&gt; keys will be preserved. Default is &lt;strong&gt;&lt;code&gt;FALSE&lt;/code&gt;&lt;/strong&gt; which will reindex the chunk numerically</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e8382363967498bea18cb238ca50c1460a8d0b38" translate="yes" xml:space="preserve">
          <source>When set to &lt;strong&gt;&lt;code&gt;TRUE&lt;/code&gt;&lt;/strong&gt; the thumbnail itself is read. Otherwise, only the tagged data is read.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="45fdf13dee963050f85e49d30140769a11b28787" translate="yes" xml:space="preserve">
          <source>When set to &lt;strong&gt;&lt;code&gt;TRUE&lt;/code&gt;&lt;/strong&gt;, a float instead of an array is returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c3b5d464c329531256005abf55db9a956c024345" translate="yes" xml:space="preserve">
          <source>When set to &lt;strong&gt;&lt;code&gt;TRUE&lt;/code&gt;&lt;/strong&gt;, outputs raw binary data. &lt;strong&gt;&lt;code&gt;FALSE&lt;/code&gt;&lt;/strong&gt; outputs lowercase hexits.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0d399f34f13253b77b4695e4a93773d328956466" translate="yes" xml:space="preserve">
          <source>When set to &lt;strong&gt;&lt;code&gt;TRUE&lt;/code&gt;&lt;/strong&gt;, the filename is also searched for within the &lt;a href=&quot;https://secure.php.net/manual/en/ini.core.php#ini.include-path&quot;&gt;include_path&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c7806aa5dee92a2e3a793d6ac2a75ac1b7f80631" translate="yes" xml:space="preserve">
          <source>When set to a valid callback, all output generated by the Sandbox instance will be processed through the named function. Sandbox output handlers follow the same calling conventions as the system-wide output handler.</source>
          <target state="new"/>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
