<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ru" datatype="htmlbody" original="reactivex">
    <body>
      <group id="reactivex">
        <trans-unit id="d8ae8a91748aa8c817a74485374bf0ca136cb28e" translate="yes" xml:space="preserve">
          <source>Javadoc: &lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/Observable.html#doOnTerminate(rx.functions.Action0)&quot;&gt;&lt;code&gt;doOnTerminate(Action0)&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/Observable.html#doOnTerminate(rx.functions.Action0)&quot;&gt; &lt;code&gt;doOnTerminate(Action0)&lt;/code&gt; &lt;/a&gt; Javadoc: doOnTerminate (Action0)</target>
        </trans-unit>
        <trans-unit id="bf2aef06a4173f306fa53cd88a1dea65d6e74f31" translate="yes" xml:space="preserve">
          <source>Javadoc: &lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/Observable.html#doOnUnsubscribe(rx.functions.Action0)&quot;&gt;&lt;code&gt;doOnUnsubscribe(Action0)&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/Observable.html#doOnUnsubscribe(rx.functions.Action0)&quot;&gt; &lt;code&gt;doOnUnsubscribe(Action0)&lt;/code&gt; &lt;/a&gt; Javadoc: doOnUnsubscribe (Action0)</target>
        </trans-unit>
        <trans-unit id="14b23874b4a8211875986291f4f42bc503475431" translate="yes" xml:space="preserve">
          <source>Javadoc: &lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/Observable.html#elementAt(int)&quot;&gt;&lt;code&gt;elementAt(int)&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/Observable.html#elementAt(int)&quot;&gt; &lt;code&gt;elementAt(int)&lt;/code&gt; &lt;/a&gt; Javadoc: elementAt (интервал)</target>
        </trans-unit>
        <trans-unit id="3f27103b9ca5296b8fd70ea33d0f34dc56115a32" translate="yes" xml:space="preserve">
          <source>Javadoc: &lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/Observable.html#elementAtOrDefault(int,%20T)&quot;&gt;&lt;code&gt;elementAtOrDefault(int,T)&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/Observable.html#elementAtOrDefault(int,%20T)&quot;&gt; &lt;code&gt;elementAtOrDefault(int,T)&lt;/code&gt; &lt;/a&gt; Javadoc: elementAtOrDefault (интервал, T)</target>
        </trans-unit>
        <trans-unit id="940265b227b5a89470f16e251499280d71e71ccf" translate="yes" xml:space="preserve">
          <source>Javadoc: &lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/Observable.html#empty()&quot;&gt;&lt;code&gt;empty()&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">Документация Javadoc: &lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/Observable.html#empty()&quot;&gt; &lt;code&gt;empty()&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="0bc6afc0dd5c862b98b86233a4750eac3bcdd618" translate="yes" xml:space="preserve">
          <source>Javadoc: &lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/Observable.html#error(java.lang.Throwable)&quot;&gt;&lt;code&gt;error(throwable)&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">Javadoc: &lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/Observable.html#error(java.lang.Throwable)&quot;&gt; &lt;code&gt;error(throwable)&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="15132a3096bcf245f14e8e3771af0d20fd651c2c" translate="yes" xml:space="preserve">
          <source>Javadoc: &lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/Observable.html#exists(rx.functions.Func1)&quot;&gt;&lt;code&gt;exists(Func1)&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/Observable.html#exists(rx.functions.Func1)&quot;&gt; &lt;code&gt;exists(Func1)&lt;/code&gt; &lt;/a&gt; Javadoc: существует (Func1)</target>
        </trans-unit>
        <trans-unit id="a111952226b13c6a9e98186b7baebd67d09645bc" translate="yes" xml:space="preserve">
          <source>Javadoc: &lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/Observable.html#filter(rx.functions.Func1)&quot;&gt;&lt;code&gt;filter(Func1)&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/Observable.html#filter(rx.functions.Func1)&quot;&gt; &lt;code&gt;filter(Func1)&lt;/code&gt; &lt;/a&gt; Javadoc: фильтр (Func1)</target>
        </trans-unit>
        <trans-unit id="33332ead4604f09985cf7ec6ed153c408adc1d59" translate="yes" xml:space="preserve">
          <source>Javadoc: &lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/Observable.html#finallyDo(rx.functions.Action0)&quot;&gt;&lt;code&gt;finallyDo(Action0)&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/Observable.html#finallyDo(rx.functions.Action0)&quot;&gt; &lt;code&gt;finallyDo(Action0)&lt;/code&gt; &lt;/a&gt; Javadoc: finallyDo (Action0)</target>
        </trans-unit>
        <trans-unit id="02ccaf0dbf4fbd7098503d59b58512056a0524bf" translate="yes" xml:space="preserve">
          <source>Javadoc: &lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/Observable.html#first()&quot;&gt;&lt;code&gt;first()&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">Документация Javadoc: &lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/Observable.html#first()&quot;&gt; &lt;code&gt;first()&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="9e8ef4dc1bb18a61bd81e398cfa6cb01892ae641" translate="yes" xml:space="preserve">
          <source>Javadoc: &lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/Observable.html#first(rx.functions.Func1)&quot;&gt;&lt;code&gt;first(Func1)&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/Observable.html#first(rx.functions.Func1)&quot;&gt; &lt;code&gt;first(Func1)&lt;/code&gt; &lt;/a&gt; Javadoc: первая (Func1)</target>
        </trans-unit>
        <trans-unit id="c8324cbd3e379541c11563888fc159d1e1b5dc5f" translate="yes" xml:space="preserve">
          <source>Javadoc: &lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/Observable.html#firstOrDefault(T)&quot;&gt;&lt;code&gt;firstOrDefault(T)&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/Observable.html#firstOrDefault(T)&quot;&gt; &lt;code&gt;firstOrDefault(T)&lt;/code&gt; &lt;/a&gt; Javadoc: firstOrDefault (T)</target>
        </trans-unit>
        <trans-unit id="ba8886cd56340587c1d2444cdc4cc4f29e9b08b2" translate="yes" xml:space="preserve">
          <source>Javadoc: &lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/Observable.html#flatMap(rx.functions.Func1)&quot;&gt;&lt;code&gt;flatMap(Func1)&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/Observable.html#flatMap(rx.functions.Func1)&quot;&gt; &lt;code&gt;flatMap(Func1)&lt;/code&gt; &lt;/a&gt; Javadoc: flatMap (Func1)</target>
        </trans-unit>
        <trans-unit id="c1c8633a9d26113c81133ac70d8be1034ad52982" translate="yes" xml:space="preserve">
          <source>Javadoc: &lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/Observable.html#flatMap(rx.functions.Func1,%20int)&quot;&gt;&lt;code&gt;flatMap(Func1,int)&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/Observable.html#flatMap(rx.functions.Func1,%20int)&quot;&gt; &lt;code&gt;flatMap(Func1,int)&lt;/code&gt; &lt;/a&gt; Javadoc: flatMap (Func1, int)</target>
        </trans-unit>
        <trans-unit id="4575ca953696a9736a7ccfbb44aceb7e1d31e83b" translate="yes" xml:space="preserve">
          <source>Javadoc: &lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/Observable.html#flatMap(rx.functions.Func1,%20rx.functions.Func1,%20rx.functions.Func0)&quot;&gt;&lt;code&gt;flatMap(Func1,Func1,Func0)&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/Observable.html#flatMap(rx.functions.Func1,%20rx.functions.Func1,%20rx.functions.Func0)&quot;&gt; &lt;code&gt;flatMap(Func1,Func1,Func0)&lt;/code&gt; &lt;/a&gt; Javadoc: flatMap (Func1, Func1, Func0)</target>
        </trans-unit>
        <trans-unit id="d4ffefe396f78f0b2237e91fa83ffd31c047158c" translate="yes" xml:space="preserve">
          <source>Javadoc: &lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/Observable.html#flatMap(rx.functions.Func1,%20rx.functions.Func1,%20rx.functions.Func0,%20int)&quot;&gt;&lt;code&gt;flatMap(Func1,Func1,Func0,int)&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/Observable.html#flatMap(rx.functions.Func1,%20rx.functions.Func1,%20rx.functions.Func0,%20int)&quot;&gt; &lt;code&gt;flatMap(Func1,Func1,Func0,int)&lt;/code&gt; &lt;/a&gt; Javadoc: flatMap (Func1, Func1, Func0, int)</target>
        </trans-unit>
        <trans-unit id="2114a1f6d8b7a27a4e72fd438524ca505abcf29c" translate="yes" xml:space="preserve">
          <source>Javadoc: &lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/Observable.html#flatMap(rx.functions.Func1,%20rx.functions.Func2)&quot;&gt;&lt;code&gt;flatMap(Func1,Func2)&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/Observable.html#flatMap(rx.functions.Func1,%20rx.functions.Func2)&quot;&gt; &lt;code&gt;flatMap(Func1,Func2)&lt;/code&gt; &lt;/a&gt; Javadoc: flatMap (Func1, Func2)</target>
        </trans-unit>
        <trans-unit id="6c67d8d25838a60251ceebec216a818c6ed4187d" translate="yes" xml:space="preserve">
          <source>Javadoc: &lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/Observable.html#flatMap(rx.functions.Func1,%20rx.functions.Func2,%20int)&quot;&gt;&lt;code&gt;flatMap(Func1,Func2,int)&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/Observable.html#flatMap(rx.functions.Func1,%20rx.functions.Func2,%20int)&quot;&gt; &lt;code&gt;flatMap(Func1,Func2,int)&lt;/code&gt; &lt;/a&gt; Javadoc: flatMap (Func1, Func2, int)</target>
        </trans-unit>
        <trans-unit id="5c1858b77bea2f47bdfcbe589428438f686fbfb6" translate="yes" xml:space="preserve">
          <source>Javadoc: &lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/Observable.html#flatMapIterable(rx.functions.Func1)&quot;&gt;&lt;code&gt;flatMapIterable(Func1)&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/Observable.html#flatMapIterable(rx.functions.Func1)&quot;&gt; &lt;code&gt;flatMapIterable(Func1)&lt;/code&gt; &lt;/a&gt; Javadoc: flatMapIterable (Func1)</target>
        </trans-unit>
        <trans-unit id="d226819e445351327ab77cca6acb637f215b5681" translate="yes" xml:space="preserve">
          <source>Javadoc: &lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/Observable.html#flatMapIterable(rx.functions.Func1,%20rx.functions.Func2)&quot;&gt;&lt;code&gt;flatMapIterable(Func1,Func2)&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/Observable.html#flatMapIterable(rx.functions.Func1,%20rx.functions.Func2)&quot;&gt; &lt;code&gt;flatMapIterable(Func1,Func2)&lt;/code&gt; &lt;/a&gt; Javadoc: flatMapIterable (Func1, Func2)</target>
        </trans-unit>
        <trans-unit id="6be0f0ac3d7f8c24de5d2663bce7c99a3e71e004" translate="yes" xml:space="preserve">
          <source>Javadoc: &lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/Observable.html#forEach(rx.functions.Action1)&quot;&gt;&lt;code&gt;forEach(Action1)&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">Документация Javadoc: &lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/Observable.html#forEach(rx.functions.Action1)&quot;&gt; &lt;code&gt;forEach(Action1)&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="17ec4be11da9c7b33bfe14ff8235b27506212c2a" translate="yes" xml:space="preserve">
          <source>Javadoc: &lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/Observable.html#forEach(rx.functions.Action1,%20rx.functions.Action1)&quot;&gt;&lt;code&gt;forEach(Action1,Action1)&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">Документация Javadoc: &lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/Observable.html#forEach(rx.functions.Action1,%20rx.functions.Action1)&quot;&gt; &lt;code&gt;forEach(Action1,Action1)&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="f2931f53e47a4e6e5c5088fd998c6481ee27c330" translate="yes" xml:space="preserve">
          <source>Javadoc: &lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/Observable.html#forEach(rx.functions.Action1,%20rx.functions.Action1,%20rx.functions.Action0)&quot;&gt;&lt;code&gt;forEach(Action1,Action1,Action0)&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">Документация Javadoc: &lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/Observable.html#forEach(rx.functions.Action1,%20rx.functions.Action1,%20rx.functions.Action0)&quot;&gt; &lt;code&gt;forEach(Action1,Action1,Action0)&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="b6e92084beaf2d670145b9c407d49c290645c1a8" translate="yes" xml:space="preserve">
          <source>Javadoc: &lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/Observable.html#from(T%5B%5D)&quot;&gt;&lt;code&gt;from(array)&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">Документация Javadoc: &lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/Observable.html#from(T%5B%5D)&quot;&gt; &lt;code&gt;from(array)&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="237e4b0b866878deab50800f41ef1256557229e6" translate="yes" xml:space="preserve">
          <source>Javadoc: &lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/Observable.html#from(java.lang.Iterable)&quot;&gt;&lt;code&gt;from(Iterable)&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">Javadoc: &lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/Observable.html#from(java.lang.Iterable)&quot;&gt; &lt;code&gt;from(Iterable)&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="a18392e4441049b3ea083fbf82411162ffda1102" translate="yes" xml:space="preserve">
          <source>Javadoc: &lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/Observable.html#from(java.util.concurrent.Future)&quot;&gt;&lt;code&gt;from(Future)&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">Javadoc: &lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/Observable.html#from(java.util.concurrent.Future)&quot;&gt; &lt;code&gt;from(Future)&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="16a386e63148d6d2d5600efc4894ab81cb6ebd8c" translate="yes" xml:space="preserve">
          <source>Javadoc: &lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/Observable.html#from(java.util.concurrent.Future,%20long,%20java.util.concurrent.TimeUnit)&quot;&gt;&lt;code&gt;from(Future,timout,timeUnit)&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/Observable.html#from(java.util.concurrent.Future,%20long,%20java.util.concurrent.TimeUnit)&quot;&gt; &lt;code&gt;from(Future,timout,timeUnit)&lt;/code&gt; &lt;/a&gt; Javadoc: от (Будущее, время ожидания, timeUnit)</target>
        </trans-unit>
        <trans-unit id="dca30482c6af993db4072cbab6b1c8738e7dac7f" translate="yes" xml:space="preserve">
          <source>Javadoc: &lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/Observable.html#from(java.util.concurrent.Future,%20rx.Scheduler)&quot;&gt;&lt;code&gt;from(Future,Scheduler)&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">Javadoc: &lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/Observable.html#from(java.util.concurrent.Future,%20rx.Scheduler)&quot;&gt; &lt;code&gt;from(Future,Scheduler)&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="a63182416d1ab617425330c4b964f731b2bee751" translate="yes" xml:space="preserve">
          <source>Javadoc: &lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/Observable.html#groupBy(rx.functions.Func1)&quot;&gt;&lt;code&gt;groupBy(Func1)&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/Observable.html#groupBy(rx.functions.Func1)&quot;&gt; &lt;code&gt;groupBy(Func1)&lt;/code&gt; &lt;/a&gt; Javadoc: groupBy (Func1)</target>
        </trans-unit>
        <trans-unit id="6a6d4af8b1efee4ab8c5005cb16e1dcb586ab8f3" translate="yes" xml:space="preserve">
          <source>Javadoc: &lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/Observable.html#groupBy(rx.functions.Func1,%20rx.functions.Func1)&quot;&gt;&lt;code&gt;groupBy(Func1,Func1)&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/Observable.html#groupBy(rx.functions.Func1,%20rx.functions.Func1)&quot;&gt; &lt;code&gt;groupBy(Func1,Func1)&lt;/code&gt; &lt;/a&gt; Javadoc: groupBy (Func1, Func1)</target>
        </trans-unit>
        <trans-unit id="db8b327c263e02a2feb7b0f330761424f3fbec42" translate="yes" xml:space="preserve">
          <source>Javadoc: &lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/Observable.html#groupJoin(rx.Observable,%20rx.functions.Func1,%20rx.functions.Func1,%20rx.functions.Func2)&quot;&gt;&lt;code&gt;groupJoin(Observable,Func1,Func1,Func2)&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/Observable.html#groupJoin(rx.Observable,%20rx.functions.Func1,%20rx.functions.Func1,%20rx.functions.Func2)&quot;&gt; &lt;code&gt;groupJoin(Observable,Func1,Func1,Func2)&lt;/code&gt; &lt;/a&gt; Javadoc: groupJoin (Observable, Func1, Func1, Func2)</target>
        </trans-unit>
        <trans-unit id="b59cf7e3ab775df7263b6eadb4ed791c0800b5af" translate="yes" xml:space="preserve">
          <source>Javadoc: &lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/Observable.html#ignoreElements()&quot;&gt;&lt;code&gt;ignoreElements()&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/Observable.html#ignoreElements()&quot;&gt; &lt;code&gt;ignoreElements()&lt;/code&gt; &lt;/a&gt; Javadoc: ignoreElements ()</target>
        </trans-unit>
        <trans-unit id="cb103c5652bf41a668a5de546fce9268889c6838" translate="yes" xml:space="preserve">
          <source>Javadoc: &lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/Observable.html#interval(long,%20java.util.concurrent.TimeUnit%20rx.Scheduler)&quot;&gt;&lt;code&gt;interval(long,TimeUnit,Scheduler)&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/Observable.html#interval(long,%20java.util.concurrent.TimeUnit%20rx.Scheduler)&quot;&gt; &lt;code&gt;interval(long,TimeUnit,Scheduler)&lt;/code&gt; &lt;/a&gt; Javadoc: интервал (длинный, TimeUnit, планировщик)</target>
        </trans-unit>
        <trans-unit id="70bb57ed1701f5cbb8dac1c0a3fb720639421415" translate="yes" xml:space="preserve">
          <source>Javadoc: &lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/Observable.html#interval(long,%20java.util.concurrent.TimeUnit)&quot;&gt;&lt;code&gt;interval(long,TimeUnit)&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/Observable.html#interval(long,%20java.util.concurrent.TimeUnit)&quot;&gt; &lt;code&gt;interval(long,TimeUnit)&lt;/code&gt; &lt;/a&gt; Javadoc: интервал (длинный, TimeUnit)</target>
        </trans-unit>
        <trans-unit id="854012724f9b8fc378c0f4e16e4c850d0d079f05" translate="yes" xml:space="preserve">
          <source>Javadoc: &lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/Observable.html#interval(long,%20long,%20java.util.concurrent.TimeUnit)&quot;&gt;&lt;code&gt;interval(long,long,TimeUnit)&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">Документация Javadoc: &lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/Observable.html#interval(long,%20long,%20java.util.concurrent.TimeUnit)&quot;&gt; &lt;code&gt;interval(long,long,TimeUnit)&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="941d4c19f5ef34c0b9186254b39767fe7fa3c3d5" translate="yes" xml:space="preserve">
          <source>Javadoc: &lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/Observable.html#interval(long,%20long,%20java.util.concurrent.TimeUnit,%20rx.Scheduler)&quot;&gt;&lt;code&gt;interval(long,long,TimeUnit,Scheduler)&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">Документация Javadoc: &lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/Observable.html#interval(long,%20long,%20java.util.concurrent.TimeUnit,%20rx.Scheduler)&quot;&gt; &lt;code&gt;interval(long,long,TimeUnit,Scheduler)&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="30baa456d38c473a53e5c348af0256c7b3056163" translate="yes" xml:space="preserve">
          <source>Javadoc: &lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/Observable.html#isEmpty()&quot;&gt;&lt;code&gt;isEmpty()&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">Документация Javadoc: &lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/Observable.html#isEmpty()&quot;&gt; &lt;code&gt;isEmpty()&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="adf5c98709e91057fba87233ccaff357ffcb53a7" translate="yes" xml:space="preserve">
          <source>Javadoc: &lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/Observable.html#join(rx.Observable,%20rx.functions.Func1,%20rx.functions.Func1,%20rx.functions.Func2)&quot;&gt;&lt;code&gt;Join(Observable,Func1,Func1,Func2)&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/Observable.html#join(rx.Observable,%20rx.functions.Func1,%20rx.functions.Func1,%20rx.functions.Func2)&quot;&gt; &lt;code&gt;Join(Observable,Func1,Func1,Func2)&lt;/code&gt; &lt;/a&gt; Javadoc: Присоединиться (Observable, Func1, Func1, Func2)</target>
        </trans-unit>
        <trans-unit id="63207beead4a67f64cfbd0f1f53b4c9f1bf29753" translate="yes" xml:space="preserve">
          <source>Javadoc: &lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/Observable.html#just(T)&quot;&gt;&lt;code&gt;just(item)&lt;/code&gt;&lt;/a&gt; (there are also versions that accept between two and nine items as parameters)</source>
          <target state="translated">Javadoc: &lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/Observable.html#just(T)&quot;&gt; &lt;code&gt;just(item)&lt;/code&gt; &lt;/a&gt; (есть также версии, которые принимают от двух до девяти элементов в качестве параметров)</target>
        </trans-unit>
        <trans-unit id="27279f72b76ace175be709c7534b2fb45bfb5ca8" translate="yes" xml:space="preserve">
          <source>Javadoc: &lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/Observable.html#last()&quot;&gt;&lt;code&gt;last()&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">Документация Javadoc: &lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/Observable.html#last()&quot;&gt; &lt;code&gt;last()&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="8c245ef904250dfde8457b10531b2740bc151ae8" translate="yes" xml:space="preserve">
          <source>Javadoc: &lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/Observable.html#last(rx.functions.Func1)&quot;&gt;&lt;code&gt;last(Func1)&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/Observable.html#last(rx.functions.Func1)&quot;&gt; &lt;code&gt;last(Func1)&lt;/code&gt; &lt;/a&gt; Javadoc: последняя (Func1)</target>
        </trans-unit>
        <trans-unit id="c62079ce1cbc24611011ab92efb6a2286c786ecd" translate="yes" xml:space="preserve">
          <source>Javadoc: &lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/Observable.html#lastOrDefault(T)&quot;&gt;&lt;code&gt;lastOrDefault(T)&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/Observable.html#lastOrDefault(T)&quot;&gt; &lt;code&gt;lastOrDefault(T)&lt;/code&gt; &lt;/a&gt; Javadoc: lastOrDefault (T)</target>
        </trans-unit>
        <trans-unit id="3ed360887083da8612dcc96f6386832586626835" translate="yes" xml:space="preserve">
          <source>Javadoc: &lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/Observable.html#map(rx.functions.Func1)&quot;&gt;&lt;code&gt;map(Func1)&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/Observable.html#map(rx.functions.Func1)&quot;&gt; &lt;code&gt;map(Func1)&lt;/code&gt; &lt;/a&gt; Javadoc: карта (Func1)</target>
        </trans-unit>
        <trans-unit id="75f315b1efe6b904a0db6c60f8c5104e7b7192fe" translate="yes" xml:space="preserve">
          <source>Javadoc: &lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/Observable.html#materialize()&quot;&gt;&lt;code&gt;materialize()&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">Документация Javadoc: &lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/Observable.html#materialize()&quot;&gt; &lt;code&gt;materialize()&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="aadf4afaf9e0ec48c14712dd0c2799884a1f41a7" translate="yes" xml:space="preserve">
          <source>Javadoc: &lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/Observable.html#merge(java.lang.Iterable)&quot;&gt;&lt;code&gt;merge(Iterable)&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">Javadoc: &lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/Observable.html#merge(java.lang.Iterable)&quot;&gt; &lt;code&gt;merge(Iterable)&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="f86aad698657bff976a8f12d75f5cb62cf4ea308" translate="yes" xml:space="preserve">
          <source>Javadoc: &lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/Observable.html#merge(java.lang.Iterable,%20int)&quot;&gt;&lt;code&gt;merge(Iterable,int)&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">Документ Javadoc: &lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/Observable.html#merge(java.lang.Iterable,%20int)&quot;&gt; &lt;code&gt;merge(Iterable,int)&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="2d9ed74d2aca31f0384a8395e2781dc2c15e3310" translate="yes" xml:space="preserve">
          <source>Javadoc: &lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/Observable.html#merge(rx.Observable%5B%5D)&quot;&gt;&lt;code&gt;merge(Observable[])&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">Документация Javadoc: &lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/Observable.html#merge(rx.Observable%5B%5D)&quot;&gt; &lt;code&gt;merge(Observable[])&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="8cb9a060c7fcb3d4710da99831e6d028fc8c8a51" translate="yes" xml:space="preserve">
          <source>Javadoc: &lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/Observable.html#merge(rx.Observable%5B%5D,%20int)&quot;&gt;&lt;code&gt;merge(Observable[],&amp;nbsp;int)&lt;/code&gt; (RxGroovy 1.1)&lt;/a&gt;</source>
          <target state="translated">Документ Javadoc: &lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/Observable.html#merge(rx.Observable%5B%5D,%20int)&quot;&gt; &lt;code&gt;merge(Observable[],&amp;nbsp;int)&lt;/code&gt; (RxGroovy 1.1)&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="48c7d1477453d5c2e4d392256d07b7fae9f9b9f3" translate="yes" xml:space="preserve">
          <source>Javadoc: &lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/Observable.html#merge(rx.Observable%5B%5D,%20int)&quot;&gt;&lt;code&gt;merge(Observable[],&amp;nbsp;int)&lt;/code&gt; (RxJava 1.1)&lt;/a&gt;</source>
          <target state="translated">Документация Javadoc: &lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/Observable.html#merge(rx.Observable%5B%5D,%20int)&quot;&gt; &lt;code&gt;merge(Observable[],&amp;nbsp;int)&lt;/code&gt; (RxJava 1.1)&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="f44a46169ed5e3f895aefcc3074ae0947c4996fb" translate="yes" xml:space="preserve">
          <source>Javadoc: &lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/Observable.html#merge(rx.Observable)&quot;&gt;&lt;code&gt;merge(Observable&amp;lt;Observable&amp;gt;)&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">Документация Javadoc: &lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/Observable.html#merge(rx.Observable)&quot;&gt; &lt;code&gt;merge(Observable&amp;lt;Observable&amp;gt;)&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="4ecbad7b0353c0b2c99a31dd7d544be977abb1c9" translate="yes" xml:space="preserve">
          <source>Javadoc: &lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/Observable.html#merge(rx.Observable,%20int)&quot;&gt;&lt;code&gt;merge(Observable&amp;lt;Observable&amp;gt;,&amp;nbsp;int)&lt;/code&gt; (RxJava 1.1)&lt;/a&gt;</source>
          <target state="translated">Документ Javadoc: &lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/Observable.html#merge(rx.Observable,%20int)&quot;&gt; &lt;code&gt;merge(Observable&amp;lt;Observable&amp;gt;,&amp;nbsp;int)&lt;/code&gt; (RxJava 1.1)&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="2ede1fd82c468c830ef66f71f0dd4e055c224037" translate="yes" xml:space="preserve">
          <source>Javadoc: &lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/Observable.html#merge(rx.Observable,%20int)&quot;&gt;&lt;code&gt;merge(Observable&amp;lt;Observable&amp;gt;,int)&lt;/code&gt; (RxGroovy 1.1)&lt;/a&gt;</source>
          <target state="translated">Документация Javadoc: &lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/Observable.html#merge(rx.Observable,%20int)&quot;&gt; &lt;code&gt;merge(Observable&amp;lt;Observable&amp;gt;,int)&lt;/code&gt; (RxGroovy 1.1)&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="c2433f6f011ff2fdaf2fb7eaafb2c2a0961aaeb8" translate="yes" xml:space="preserve">
          <source>Javadoc: &lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/Observable.html#merge(rx.Observable,%20rx.Observable)&quot;&gt;&lt;code&gt;merge(Observable,&amp;nbsp;Observable)&lt;/code&gt;&lt;/a&gt; (there are also versions that take up to nine Observables)</source>
          <target state="translated">Javadoc: &lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/Observable.html#merge(rx.Observable,%20rx.Observable)&quot;&gt; &lt;code&gt;merge(Observable,&amp;nbsp;Observable)&lt;/code&gt; &lt;/a&gt; (есть также версии, которые занимают до девяти Observable)</target>
        </trans-unit>
        <trans-unit id="97f7b3fbd560c35f724b5ccff5eb22ba1e248d13" translate="yes" xml:space="preserve">
          <source>Javadoc: &lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/Observable.html#mergeDelayError(rx.Observable)&quot;&gt;&lt;code&gt;mergeDelayError(Observable&amp;lt;Observable&amp;gt;)&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/Observable.html#mergeDelayError(rx.Observable)&quot;&gt; &lt;code&gt;mergeDelayError(Observable&amp;lt;Observable&amp;gt;)&lt;/code&gt; &lt;/a&gt; Javadoc: mergeDelayError (Observable &amp;lt;Observable&amp;gt;)</target>
        </trans-unit>
        <trans-unit id="52cafb5ff50bc97c34b88a9a8d4bf7c7f29fc567" translate="yes" xml:space="preserve">
          <source>Javadoc: &lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/Observable.html#mergeDelayError(rx.Observable,%20rx.Observable)&quot;&gt;&lt;code&gt;mergeDelayError(Observable,Observable)&lt;/code&gt;&lt;/a&gt; (there are also versions that take up to nine Observables)</source>
          <target state="translated">Javadoc: &lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/Observable.html#mergeDelayError(rx.Observable,%20rx.Observable)&quot;&gt; &lt;code&gt;mergeDelayError(Observable,Observable)&lt;/code&gt; &lt;/a&gt; (есть также версии, которые занимают до девяти Observable)</target>
        </trans-unit>
        <trans-unit id="62219f96452128dbd1e3c2ec81cdf85ee5a22388" translate="yes" xml:space="preserve">
          <source>Javadoc: &lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/Observable.html#mergeWith(rx.Observable)&quot;&gt;&lt;code&gt;mergeWith(Observable)&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/Observable.html#mergeWith(rx.Observable)&quot;&gt; &lt;code&gt;mergeWith(Observable)&lt;/code&gt; &lt;/a&gt; Javadoc: mergeWith (наблюдаемый)</target>
        </trans-unit>
        <trans-unit id="86de2a46f25ec167d5947718e58e5d6201890fc2" translate="yes" xml:space="preserve">
          <source>Javadoc: &lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/Observable.html#never()&quot;&gt;&lt;code&gt;never()&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">Javadoc: &lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/Observable.html#never()&quot;&gt; &lt;code&gt;never()&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="75ee570e85c5ea387f3eb1c5dd1382fb24454f60" translate="yes" xml:space="preserve">
          <source>Javadoc: &lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/Observable.html#observeOn(rx.Scheduler)&quot;&gt;&lt;code&gt;observeOn(Scheduler)&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/Observable.html#observeOn(rx.Scheduler)&quot;&gt; &lt;code&gt;observeOn(Scheduler)&lt;/code&gt; &lt;/a&gt; Javadoc: НаблюдатьОн (Планировщик)</target>
        </trans-unit>
        <trans-unit id="7563b97440680da77345c86af64d4fa18f4a3602" translate="yes" xml:space="preserve">
          <source>Javadoc: &lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/Observable.html#ofType(java.lang.Class)&quot;&gt;&lt;code&gt;ofType(Class)&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/Observable.html#ofType(java.lang.Class)&quot;&gt; &lt;code&gt;ofType(Class)&lt;/code&gt; &lt;/a&gt; Javadoc: ofType (класс)</target>
        </trans-unit>
        <trans-unit id="b6b8f887ba04b8f87c5da815508dc1f9a91b0200" translate="yes" xml:space="preserve">
          <source>Javadoc: &lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/Observable.html#onBackpressureBuffer()&quot;&gt;&lt;code&gt;onBackpressureBuffer()&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/Observable.html#onBackpressureBuffer()&quot;&gt; &lt;code&gt;onBackpressureBuffer()&lt;/code&gt; &lt;/a&gt; Javadoc: onBackpressureBuffer ()</target>
        </trans-unit>
        <trans-unit id="97ede67dfc71f044842e5e73b2ec267e4613b43c" translate="yes" xml:space="preserve">
          <source>Javadoc: &lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/Observable.html#onBackpressureBuffer(long)&quot;&gt;&lt;code&gt;onBackpressureBuffer(long)&lt;/code&gt; (RxGroovy 1.1)&lt;/a&gt;</source>
          <target state="translated">Javadoc: &lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/Observable.html#onBackpressureBuffer(long)&quot;&gt; &lt;code&gt;onBackpressureBuffer(long)&lt;/code&gt; (RxGroovy 1.1)&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="73ac8818e5d183ea8793b98809319e3670ddda20" translate="yes" xml:space="preserve">
          <source>Javadoc: &lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/Observable.html#onBackpressureBuffer(long)&quot;&gt;&lt;code&gt;onBackpressureBuffer(long)&lt;/code&gt; (RxJava 1.1)&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/Observable.html#onBackpressureBuffer(long)&quot;&gt; &lt;code&gt;onBackpressureBuffer(long)&lt;/code&gt; &lt;/a&gt; Javadoc: onBackpressureBuffer (длинный) (RxJava 1.1)</target>
        </trans-unit>
        <trans-unit id="b4e1c325f9f8c5a89e545edf18f64ced724ea22c" translate="yes" xml:space="preserve">
          <source>Javadoc: &lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/Observable.html#onBackpressureBuffer(long,%20rx.functions.Action0)&quot;&gt;&lt;code&gt;onBackpressureBuffer(long,&amp;nbsp;Action0)&lt;/code&gt; (RxGroovy 1.1)&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/Observable.html#onBackpressureBuffer(long,%20rx.functions.Action0)&quot;&gt; &lt;code&gt;onBackpressureBuffer(long,&amp;nbsp;Action0)&lt;/code&gt; &lt;/a&gt; Javadoc: onBackpressureBuffer (long, Action0) (RxGroovy 1.1)</target>
        </trans-unit>
        <trans-unit id="a2df7b06d8f7e1dcb276b3539c4d3082860e1b11" translate="yes" xml:space="preserve">
          <source>Javadoc: &lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/Observable.html#onBackpressureBuffer(long,%20rx.functions.Action0)&quot;&gt;&lt;code&gt;onBackpressureBuffer(long,&amp;nbsp;Action0)&lt;/code&gt; (RxJava 1.1)&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/Observable.html#onBackpressureBuffer(long,%20rx.functions.Action0)&quot;&gt; &lt;code&gt;onBackpressureBuffer(long,&amp;nbsp;Action0)&lt;/code&gt; &lt;/a&gt; Javadoc: onBackpressureBuffer (long, Action0) (RxJava 1.1)</target>
        </trans-unit>
        <trans-unit id="f0f0eeaa3919f3925d32ccce79c4589ec3719f87" translate="yes" xml:space="preserve">
          <source>Javadoc: &lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/Observable.html#onBackpressureDrop()&quot;&gt;&lt;code&gt;onBackpressureDrop()&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/Observable.html#onBackpressureDrop()&quot;&gt; &lt;code&gt;onBackpressureDrop()&lt;/code&gt; &lt;/a&gt; Javadoc: onBackpressureDrop ()</target>
        </trans-unit>
        <trans-unit id="bbf961f1ac980955e75b6770a11414ea6a3a2fbb" translate="yes" xml:space="preserve">
          <source>Javadoc: &lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/Observable.html#onBackpressureDrop(rx.functions.Action1)&quot;&gt;onBackpressureDrop(Action1) (RxGroovy 1.1)&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/Observable.html#onBackpressureDrop(rx.functions.Action1)&quot;&gt;Документация&lt;/a&gt; Javadoc: onBackpressureDrop (Action1) (RxGroovy 1.1)</target>
        </trans-unit>
        <trans-unit id="7a8efea03a1172591a603fb86906fec3e21b3f60" translate="yes" xml:space="preserve">
          <source>Javadoc: &lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/Observable.html#onBackpressureDrop(rx.functions.Action1)&quot;&gt;onBackpressureDrop(Action1) (RxJava 1.1)&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/Observable.html#onBackpressureDrop(rx.functions.Action1)&quot;&gt;Документация&lt;/a&gt; Javadoc: onBackpressureDrop (Действие1) (RxJava 1.1)</target>
        </trans-unit>
        <trans-unit id="38241e25841883c136f0013cb57c0d73edc96036" translate="yes" xml:space="preserve">
          <source>Javadoc: &lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/Observable.html#onBackpressureLatest()&quot;&gt;&lt;code&gt;onBackpressureLatest()&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/Observable.html#onBackpressureLatest()&quot;&gt; &lt;code&gt;onBackpressureLatest()&lt;/code&gt; &lt;/a&gt; Javadoc: onBackpressureLatest ()</target>
        </trans-unit>
        <trans-unit id="d975aee47519ff0e0a579e8098873ace72a85e68" translate="yes" xml:space="preserve">
          <source>Javadoc: &lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/Observable.html#onErrorResumeNext(rx.Observable)&quot;&gt;&lt;code&gt;onErrorResumeNext(Observable)&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/Observable.html#onErrorResumeNext(rx.Observable)&quot;&gt; &lt;code&gt;onErrorResumeNext(Observable)&lt;/code&gt; &lt;/a&gt; Javadoc: onErrorResumeNext (наблюдаемый)</target>
        </trans-unit>
        <trans-unit id="1637a5cfd40842ff31f38a2a5c4f05fabc1d6cd7" translate="yes" xml:space="preserve">
          <source>Javadoc: &lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/Observable.html#onErrorResumeNext(rx.functions.Func1)&quot;&gt;&lt;code&gt;onErrorResumeNext(Func1)&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/Observable.html#onErrorResumeNext(rx.functions.Func1)&quot;&gt; &lt;code&gt;onErrorResumeNext(Func1)&lt;/code&gt; &lt;/a&gt; Javadoc: onErrorResumeNext (Func1)</target>
        </trans-unit>
        <trans-unit id="8346ed7f498fd76c563a7cb29d7503f22f252239" translate="yes" xml:space="preserve">
          <source>Javadoc: &lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/Observable.html#onErrorReturn(rx.functions.Func1)&quot;&gt;&lt;code&gt;onErrorReturn(Func1)&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/Observable.html#onErrorReturn(rx.functions.Func1)&quot;&gt; &lt;code&gt;onErrorReturn(Func1)&lt;/code&gt; &lt;/a&gt; Javadoc: onErrorReturn (Func1)</target>
        </trans-unit>
        <trans-unit id="3c0ce1c3b8e96ec31fbc8bfee82f1d31bcaa1643" translate="yes" xml:space="preserve">
          <source>Javadoc: &lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/Observable.html#onExceptionResumeNext(rx.Observable)&quot;&gt;&lt;code&gt;onExceptionResumeNext(Observable)&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/Observable.html#onExceptionResumeNext(rx.Observable)&quot;&gt; &lt;code&gt;onExceptionResumeNext(Observable)&lt;/code&gt; &lt;/a&gt; Javadoc: onExceptionResumeNext (наблюдаемый)</target>
        </trans-unit>
        <trans-unit id="6156d96702a167fd2a368974eae910a415988c0c" translate="yes" xml:space="preserve">
          <source>Javadoc: &lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/Observable.html#publish()&quot;&gt;&lt;code&gt;publish()&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">Документация Javadoc: &lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/Observable.html#publish()&quot;&gt; &lt;code&gt;publish()&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="9c142898e492cd9427a6a6ea5a10f1ff60df3db4" translate="yes" xml:space="preserve">
          <source>Javadoc: &lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/Observable.html#publish(rx.functions.Func1)&quot;&gt;&lt;code&gt;publish(Func1)&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/Observable.html#publish(rx.functions.Func1)&quot;&gt; &lt;code&gt;publish(Func1)&lt;/code&gt; &lt;/a&gt; Javadoc: опубликовать (Func1)</target>
        </trans-unit>
        <trans-unit id="acf38f3984065bdb4cdaf9d497504a10495e3922" translate="yes" xml:space="preserve">
          <source>Javadoc: &lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/Observable.html#range(int,%20int%20rx.Scheduler)&quot;&gt;&lt;code&gt;range(int,int,Scheduler)&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">Документация Javadoc: &lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/Observable.html#range(int,%20int%20rx.Scheduler)&quot;&gt; &lt;code&gt;range(int,int,Scheduler)&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="0394820290c65245c2e5bd33521d6921d76d6c21" translate="yes" xml:space="preserve">
          <source>Javadoc: &lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/Observable.html#range(int,%20int)&quot;&gt;&lt;code&gt;range(int,int)&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">Документация Javadoc: &lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/Observable.html#range(int,%20int)&quot;&gt; &lt;code&gt;range(int,int)&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="20c1b46c75003aed181ad88283266d9b7ac6c785" translate="yes" xml:space="preserve">
          <source>Javadoc: &lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/Observable.html#reduce(R,%20rx.functions.Func2)&quot;&gt;&lt;code&gt;reduce(R,Func2)&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/Observable.html#reduce(R,%20rx.functions.Func2)&quot;&gt; &lt;code&gt;reduce(R,Func2)&lt;/code&gt; &lt;/a&gt; Javadoc: уменьшить (R, Func2)</target>
        </trans-unit>
        <trans-unit id="1ba5d239f6ebf0e14cd8205727e7656af2d6db14" translate="yes" xml:space="preserve">
          <source>Javadoc: &lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/Observable.html#reduce(rx.functions.Func2)&quot;&gt;&lt;code&gt;reduce(Func2)&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/Observable.html#reduce(rx.functions.Func2)&quot;&gt; &lt;code&gt;reduce(Func2)&lt;/code&gt; &lt;/a&gt; Javadoc: уменьшить (Func2)</target>
        </trans-unit>
        <trans-unit id="501ba53b9512c9392640aa449bfd71277782d979" translate="yes" xml:space="preserve">
          <source>Javadoc: &lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/Observable.html#repeat()&quot;&gt;&lt;code&gt;repeat()&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">Документация Javadoc: &lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/Observable.html#repeat()&quot;&gt; &lt;code&gt;repeat()&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="f8e7eede910044ddb07de91fa35483def0d24af9" translate="yes" xml:space="preserve">
          <source>Javadoc: &lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/Observable.html#repeat(long)&quot;&gt;&lt;code&gt;repeat(long)&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">Javadoc: &lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/Observable.html#repeat(long)&quot;&gt; &lt;code&gt;repeat(long)&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="07b4252632bcfa345799d2c98fa5bafc2b46c0d0" translate="yes" xml:space="preserve">
          <source>Javadoc: &lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/Observable.html#repeat(long,%20rx.Scheduler)&quot;&gt;&lt;code&gt;repeat(long,Scheduler)&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">Javadoc: &lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/Observable.html#repeat(long,%20rx.Scheduler)&quot;&gt; &lt;code&gt;repeat(long,Scheduler)&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="6d7b6ee030ce75e9228ee1e76c323c95d7c6a5e5" translate="yes" xml:space="preserve">
          <source>Javadoc: &lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/Observable.html#repeat(rx.Scheduler)&quot;&gt;&lt;code&gt;repeat(Scheduler)&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">Javadoc: &lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/Observable.html#repeat(rx.Scheduler)&quot;&gt; &lt;code&gt;repeat(Scheduler)&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="374d7f95f7b24227782eea9ee797af44476641d5" translate="yes" xml:space="preserve">
          <source>Javadoc: &lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/Observable.html#repeatWhen(rx.functions.Func1)&quot;&gt;&lt;code&gt;repeatWhen(Func1)&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/Observable.html#repeatWhen(rx.functions.Func1)&quot;&gt; &lt;code&gt;repeatWhen(Func1)&lt;/code&gt; &lt;/a&gt; Javadoc: repeatWhen (Func1)</target>
        </trans-unit>
        <trans-unit id="210dd6be52852c7d6841f3d62247b5c7e39306c6" translate="yes" xml:space="preserve">
          <source>Javadoc: &lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/Observable.html#repeatWhen(rx.functions.Func1,%20rx.Scheduler)&quot;&gt;&lt;code&gt;repeatWhen(Func1,Scheduler)&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/Observable.html#repeatWhen(rx.functions.Func1,%20rx.Scheduler)&quot;&gt; &lt;code&gt;repeatWhen(Func1,Scheduler)&lt;/code&gt; &lt;/a&gt; Javadoc: repeatWhen (Func1, планировщик)</target>
        </trans-unit>
        <trans-unit id="8d1621d456c89d846c0610db9f2c4f48097beff3" translate="yes" xml:space="preserve">
          <source>Javadoc: &lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/Observable.html#replay()&quot;&gt;&lt;code&gt;replay()&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">Документация Javadoc: &lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/Observable.html#replay()&quot;&gt; &lt;code&gt;replay()&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="b3266b3085e9e1af9495c36b08af7e3cc32bf286" translate="yes" xml:space="preserve">
          <source>Javadoc: &lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/Observable.html#replay(int)&quot;&gt;&lt;code&gt;replay(int)&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">Документация Javadoc: &lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/Observable.html#replay(int)&quot;&gt; &lt;code&gt;replay(int)&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="327e68c6d87acff23f73caf9ad02b95d273a9cfe" translate="yes" xml:space="preserve">
          <source>Javadoc: &lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/Observable.html#replay(int,%20long,%20java.util.concurrent.TimeUnit)&quot;&gt;&lt;code&gt;replay(int,long,TimeUnit)&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">Документация Javadoc: &lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/Observable.html#replay(int,%20long,%20java.util.concurrent.TimeUnit)&quot;&gt; &lt;code&gt;replay(int,long,TimeUnit)&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="537838af73d9d5c4fe0d65b05b217be7f430731c" translate="yes" xml:space="preserve">
          <source>Javadoc: &lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/Observable.html#replay(int,%20long,%20java.util.concurrent.TimeUnit,%20rx.Scheduler)&quot;&gt;&lt;code&gt;replay(int,long,TimeUnit,Scheduler)&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">Документация Javadoc: &lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/Observable.html#replay(int,%20long,%20java.util.concurrent.TimeUnit,%20rx.Scheduler)&quot;&gt; &lt;code&gt;replay(int,long,TimeUnit,Scheduler)&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="6033123885b84404fcf5aaddde80d6873eb28c5f" translate="yes" xml:space="preserve">
          <source>Javadoc: &lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/Observable.html#replay(int,%20rx.Scheduler)&quot;&gt;&lt;code&gt;replay(int,Scheduler)&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">Документация Javadoc: &lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/Observable.html#replay(int,%20rx.Scheduler)&quot;&gt; &lt;code&gt;replay(int,Scheduler)&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="76bc0e5a6974d3b3e12e45f315a40a1b03c4bed5" translate="yes" xml:space="preserve">
          <source>Javadoc: &lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/Observable.html#replay(long,%20java.util.concurrent.TimeUnit)&quot;&gt;&lt;code&gt;replay(long,TimeUnit)&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/Observable.html#replay(long,%20java.util.concurrent.TimeUnit)&quot;&gt; &lt;code&gt;replay(long,TimeUnit)&lt;/code&gt; &lt;/a&gt; Javadoc: повтор (длинный, TimeUnit)</target>
        </trans-unit>
        <trans-unit id="f3a98a729b2489c00afa7b7849af968a99d106a5" translate="yes" xml:space="preserve">
          <source>Javadoc: &lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/Observable.html#replay(long,%20java.util.concurrent.TimeUnit,%20rx.Scheduler)&quot;&gt;&lt;code&gt;replay(long,TimeUnit,Scheduler)&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/Observable.html#replay(long,%20java.util.concurrent.TimeUnit,%20rx.Scheduler)&quot;&gt; &lt;code&gt;replay(long,TimeUnit,Scheduler)&lt;/code&gt; &lt;/a&gt; Javadoc: повтор (длинный, TimeUnit, планировщик)</target>
        </trans-unit>
        <trans-unit id="0358fa0a25a39334147ade1a80f5520351688b79" translate="yes" xml:space="preserve">
          <source>Javadoc: &lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/Observable.html#replay(rx.Scheduler)&quot;&gt;&lt;code&gt;replay(Scheduler)&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">Javadoc: &lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/Observable.html#replay(rx.Scheduler)&quot;&gt; &lt;code&gt;replay(Scheduler)&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="cada69b919d6de0bae0d47ff8e6010e2db9651d8" translate="yes" xml:space="preserve">
          <source>Javadoc: &lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/Observable.html#replay(rx.functions.Func1)&quot;&gt;&lt;code&gt;replay(Func1)&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/Observable.html#replay(rx.functions.Func1)&quot;&gt; &lt;code&gt;replay(Func1)&lt;/code&gt; &lt;/a&gt; Javadoc: воспроизведение (Func1)</target>
        </trans-unit>
        <trans-unit id="e1de5f49aa5d1f591745517b743358442f29e8f8" translate="yes" xml:space="preserve">
          <source>Javadoc: &lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/Observable.html#replay(rx.functions.Func1,%20int)&quot;&gt;&lt;code&gt;replay(Func1,int)&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/Observable.html#replay(rx.functions.Func1,%20int)&quot;&gt; &lt;code&gt;replay(Func1,int)&lt;/code&gt; &lt;/a&gt; Javadoc: воспроизведение (Func1, int)</target>
        </trans-unit>
        <trans-unit id="41b15791cfe5340f5ec100cb7d3ed8a3b5f6b4b7" translate="yes" xml:space="preserve">
          <source>Javadoc: &lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/Observable.html#replay(rx.functions.Func1,%20int,%20long,%20java.util.concurrent.TimeUnit)&quot;&gt;&lt;code&gt;replay(Func1,int,long,TimeUnit)&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/Observable.html#replay(rx.functions.Func1,%20int,%20long,%20java.util.concurrent.TimeUnit)&quot;&gt; &lt;code&gt;replay(Func1,int,long,TimeUnit)&lt;/code&gt; &lt;/a&gt; Javadoc: воспроизведение (Func1, int, long, TimeUnit)</target>
        </trans-unit>
        <trans-unit id="5aad1dccae3814f4760926dbcc0f715fd795c356" translate="yes" xml:space="preserve">
          <source>Javadoc: &lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/Observable.html#replay(rx.functions.Func1,%20int,%20long,%20java.util.concurrent.TimeUnit,%20rx.Scheduler)&quot;&gt;&lt;code&gt;replay(Func1,int,long,TimeUnit,Scheduler)&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/Observable.html#replay(rx.functions.Func1,%20int,%20long,%20java.util.concurrent.TimeUnit,%20rx.Scheduler)&quot;&gt; &lt;code&gt;replay(Func1,int,long,TimeUnit,Scheduler)&lt;/code&gt; &lt;/a&gt; Javadoc: воспроизведение (Func1, int, long, TimeUnit, Scheduler)</target>
        </trans-unit>
        <trans-unit id="7137aa1351ebb4d150d79c7b057eed0571934c54" translate="yes" xml:space="preserve">
          <source>Javadoc: &lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/Observable.html#replay(rx.functions.Func1,%20int,%20rx.Scheduler)&quot;&gt;&lt;code&gt;replay(Func1,int,Scheduler)&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/Observable.html#replay(rx.functions.Func1,%20int,%20rx.Scheduler)&quot;&gt; &lt;code&gt;replay(Func1,int,Scheduler)&lt;/code&gt; &lt;/a&gt; Javadoc: воспроизведение (Func1, int, Scheduler)</target>
        </trans-unit>
        <trans-unit id="d10a3db8b541e9e19f6f204ca3ab3ae011bca70f" translate="yes" xml:space="preserve">
          <source>Javadoc: &lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/Observable.html#replay(rx.functions.Func1,%20long,%20java.util.concurrent.TimeUnit)&quot;&gt;&lt;code&gt;replay(Func1,long,TimeUnit)&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/Observable.html#replay(rx.functions.Func1,%20long,%20java.util.concurrent.TimeUnit)&quot;&gt; &lt;code&gt;replay(Func1,long,TimeUnit)&lt;/code&gt; &lt;/a&gt; Javadoc: воспроизведение (Func1, long, TimeUnit)</target>
        </trans-unit>
        <trans-unit id="3e8d7a7b724ad7753320d6608a224ebb9a29f11a" translate="yes" xml:space="preserve">
          <source>Javadoc: &lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/Observable.html#replay(rx.functions.Func1,%20long,%20java.util.concurrent.TimeUnit,%20rx.Scheduler)&quot;&gt;&lt;code&gt;replay(Func1,long,TimeUnit,Scheduler)&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/Observable.html#replay(rx.functions.Func1,%20long,%20java.util.concurrent.TimeUnit,%20rx.Scheduler)&quot;&gt; &lt;code&gt;replay(Func1,long,TimeUnit,Scheduler)&lt;/code&gt; &lt;/a&gt; Javadoc: воспроизведение (Func1, long, TimeUnit, Scheduler)</target>
        </trans-unit>
        <trans-unit id="47603c71bdc02a57c0bf7f95d9216e9759cea5bf" translate="yes" xml:space="preserve">
          <source>Javadoc: &lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/Observable.html#replay(rx.functions.Func1,%20rx.Scheduler)&quot;&gt;&lt;code&gt;replay(Func1,Scheduler)&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/Observable.html#replay(rx.functions.Func1,%20rx.Scheduler)&quot;&gt; &lt;code&gt;replay(Func1,Scheduler)&lt;/code&gt; &lt;/a&gt; Javadoc: воспроизведение (Func1, планировщик)</target>
        </trans-unit>
        <trans-unit id="611b23cbb96748a29d45276c29304c948eaf3a41" translate="yes" xml:space="preserve">
          <source>Javadoc: &lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/Observable.html#retry()&quot;&gt;&lt;code&gt;retry()&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">Документ Javadoc: &lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/Observable.html#retry()&quot;&gt; &lt;code&gt;retry()&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="4400ebf14431c2d6c6c3e22587452387f2dd3e9e" translate="yes" xml:space="preserve">
          <source>Javadoc: &lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/Observable.html#retry(long)&quot;&gt;&lt;code&gt;retry(long)&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">Документ Javadoc: &lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/Observable.html#retry(long)&quot;&gt; &lt;code&gt;retry(long)&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="6aefda7a4df3ce01d0daa9290fcb60e5045221b5" translate="yes" xml:space="preserve">
          <source>Javadoc: &lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/Observable.html#retry(rx.functions.Func2)&quot;&gt;&lt;code&gt;retry(Func2)&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/Observable.html#retry(rx.functions.Func2)&quot;&gt; &lt;code&gt;retry(Func2)&lt;/code&gt; &lt;/a&gt; Javadoc: повторить попытку (Func2)</target>
        </trans-unit>
        <trans-unit id="fef1cded6e9903bb403450fce6909b6b68b6045e" translate="yes" xml:space="preserve">
          <source>Javadoc: &lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/Observable.html#retryWhen(rx.functions.Func1)&quot;&gt;&lt;code&gt;retryWhen(Func1)&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/Observable.html#retryWhen(rx.functions.Func1)&quot;&gt; &lt;code&gt;retryWhen(Func1)&lt;/code&gt; &lt;/a&gt; Javadoc: retryWhen (Func1)</target>
        </trans-unit>
        <trans-unit id="a2d89617d20e0dd90c3f56e93c7b4a6502859416" translate="yes" xml:space="preserve">
          <source>Javadoc: &lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/Observable.html#retryWhen(rx.functions.Func1,%20rx.Scheduler)&quot;&gt;&lt;code&gt;retryWhen(Func1,Scheduler)&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/Observable.html#retryWhen(rx.functions.Func1,%20rx.Scheduler)&quot;&gt; &lt;code&gt;retryWhen(Func1,Scheduler)&lt;/code&gt; &lt;/a&gt; Javadoc: retryWhen (Func1, Scheduler)</target>
        </trans-unit>
        <trans-unit id="02ca1a10ef44f43246cb5c3a49cfb35d54402437" translate="yes" xml:space="preserve">
          <source>Javadoc: &lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/Observable.html#sample(long,%20java.util.concurrent.TimeUnit)&quot;&gt;&lt;code&gt;sample(long,TimeUnit)&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/Observable.html#throttleLast(long,%20java.util.concurrent.TimeUnit)&quot;&gt;&lt;code&gt;throttleLast(long,TimeUnit)&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/Observable.html#sample(long,%20java.util.concurrent.TimeUnit)&quot;&gt; &lt;code&gt;sample(long,TimeUnit)&lt;/code&gt; &lt;/a&gt; Javadoc: образец (long, TimeUnit) и &lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/Observable.html#throttleLast(long,%20java.util.concurrent.TimeUnit)&quot;&gt; &lt;code&gt;throttleLast(long,TimeUnit)&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="e988ee2cdae3b9d15ee0fc1936eb7d21f580c4c8" translate="yes" xml:space="preserve">
          <source>Javadoc: &lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/Observable.html#sample(long,%20java.util.concurrent.TimeUnit,%20rx.Scheduler)&quot;&gt;&lt;code&gt;sample(long,TimeUnit,Scheduler)&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/Observable.html#throttleLast(long,%20java.util.concurrent.TimeUnit,%20rx.Scheduler)&quot;&gt;&lt;code&gt;throttleLast(long,TimeUnit,Scheduler)&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/Observable.html#sample(long,%20java.util.concurrent.TimeUnit,%20rx.Scheduler)&quot;&gt; &lt;code&gt;sample(long,TimeUnit,Scheduler)&lt;/code&gt; &lt;/a&gt; Javadoc: образец (long, TimeUnit, Scheduler) и &lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/Observable.html#throttleLast(long,%20java.util.concurrent.TimeUnit,%20rx.Scheduler)&quot;&gt; &lt;code&gt;throttleLast(long,TimeUnit,Scheduler)&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="3baa9dbcdfbc1c158ef7729eec32f066c9d86c6c" translate="yes" xml:space="preserve">
          <source>Javadoc: &lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/Observable.html#sample(rx.Observable)&quot;&gt;&lt;code&gt;sample(Observable)&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">Документация Javadoc: &lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/Observable.html#sample(rx.Observable)&quot;&gt; &lt;code&gt;sample(Observable)&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="d4460d508c18e985e4b4f5c7bc5b8e6bc839c0a3" translate="yes" xml:space="preserve">
          <source>Javadoc: &lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/Observable.html#scan(R,%20rx.functions.Func2)&quot;&gt;&lt;code&gt;scan(R,Func2)&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/Observable.html#scan(R,%20rx.functions.Func2)&quot;&gt; &lt;code&gt;scan(R,Func2)&lt;/code&gt; &lt;/a&gt; Javadoc: сканирование (R, Func2)</target>
        </trans-unit>
        <trans-unit id="ab8a2ce0d1cc2d61493cc5aec1a15bb8ddb03d13" translate="yes" xml:space="preserve">
          <source>Javadoc: &lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/Observable.html#scan(rx.functions.Func2)&quot;&gt;&lt;code&gt;scan(Func2)&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/Observable.html#scan(rx.functions.Func2)&quot;&gt; &lt;code&gt;scan(Func2)&lt;/code&gt; &lt;/a&gt; Javadoc: сканирование (Func2)</target>
        </trans-unit>
        <trans-unit id="ba8929d2539f322ba639678a66f69d48fdca23f4" translate="yes" xml:space="preserve">
          <source>Javadoc: &lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/Observable.html#sequenceEqual(rx.Observable,%20rx.Observable)&quot;&gt;&lt;code&gt;sequenceEqual(Observable,Observable)&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">Документация Javadoc: &lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/Observable.html#sequenceEqual(rx.Observable,%20rx.Observable)&quot;&gt; &lt;code&gt;sequenceEqual(Observable,Observable)&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="49b5bcb0c08fcc7f72f3fe36605dd8ab35437f19" translate="yes" xml:space="preserve">
          <source>Javadoc: &lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/Observable.html#sequenceEqual(rx.Observable,%20rx.Observable,%20rx.functions.Func2)&quot;&gt;&lt;code&gt;sequenceEqual(Observable,Observable,Func2)&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">Документация Javadoc: &lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/Observable.html#sequenceEqual(rx.Observable,%20rx.Observable,%20rx.functions.Func2)&quot;&gt; &lt;code&gt;sequenceEqual(Observable,Observable,Func2)&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="aa1b01fc53dcf0f44192d375a77d87a59a0fb397" translate="yes" xml:space="preserve">
          <source>Javadoc: &lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/Observable.html#serialize()&quot;&gt;&lt;code&gt;serialize()&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">Документация Javadoc: &lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/Observable.html#serialize()&quot;&gt; &lt;code&gt;serialize()&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="3892287c14948092738b91ae0a611e48ab3c9030" translate="yes" xml:space="preserve">
          <source>Javadoc: &lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/Observable.html#share()&quot;&gt;&lt;code&gt;share()&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">Документация Javadoc: &lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/Observable.html#share()&quot;&gt; &lt;code&gt;share()&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="d5c6478a203a8e23c9541d42240b41246283fa36" translate="yes" xml:space="preserve">
          <source>Javadoc: &lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/Observable.html#single()&quot;&gt;&lt;code&gt;single()&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">Документация Javadoc: &lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/Observable.html#single()&quot;&gt; &lt;code&gt;single()&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="e6d6acc64fa299ff667ec2af694a8f3ba68510b7" translate="yes" xml:space="preserve">
          <source>Javadoc: &lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/Observable.html#single(rx.functions.Func1)&quot;&gt;&lt;code&gt;single(Func1)&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/Observable.html#single(rx.functions.Func1)&quot;&gt; &lt;code&gt;single(Func1)&lt;/code&gt; &lt;/a&gt; Javadoc: single (Func1)</target>
        </trans-unit>
        <trans-unit id="d30d6200c47db94fe5475800986a8efc647d4252" translate="yes" xml:space="preserve">
          <source>Javadoc: &lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/Observable.html#singleOrDefault(T)&quot;&gt;&lt;code&gt;singleOrDefault(T)&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/Observable.html#singleOrDefault(T)&quot;&gt; &lt;code&gt;singleOrDefault(T)&lt;/code&gt; &lt;/a&gt; Javadoc: singleOrDefault (T)</target>
        </trans-unit>
        <trans-unit id="3226e69e3c571666bc6bc54d6c28d494dc2f2d2a" translate="yes" xml:space="preserve">
          <source>Javadoc: &lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/Observable.html#singleOrDefault(rx.functions.Func1,%20T)&quot;&gt;&lt;code&gt;singleOrDefault(Func1,T)&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/Observable.html#singleOrDefault(rx.functions.Func1,%20T)&quot;&gt; &lt;code&gt;singleOrDefault(Func1,T)&lt;/code&gt; &lt;/a&gt; Javadoc: singleOrDefault (Func1, T)</target>
        </trans-unit>
        <trans-unit id="835c21db69e77a9fe04c247bd21729f894651842" translate="yes" xml:space="preserve">
          <source>Javadoc: &lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/Observable.html#skip(int)&quot;&gt;&lt;code&gt;skip(int)&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">Документация Javadoc: &lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/Observable.html#skip(int)&quot;&gt; &lt;code&gt;skip(int)&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="fd188f0b735e6b34c9909f576f441f4800ad72a2" translate="yes" xml:space="preserve">
          <source>Javadoc: &lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/Observable.html#skip(long,%20java.util.concurrent.TimeUnit)&quot;&gt;&lt;code&gt;skip(long,TimeUnit)&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/Observable.html#skip(long,%20java.util.concurrent.TimeUnit)&quot;&gt; &lt;code&gt;skip(long,TimeUnit)&lt;/code&gt; &lt;/a&gt; Javadoc: пропустить (длинный, TimeUnit)</target>
        </trans-unit>
        <trans-unit id="eb460989ba50ac0358523c51764ac8024fdbeab5" translate="yes" xml:space="preserve">
          <source>Javadoc: &lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/Observable.html#skip(long,%20java.util.concurrent.TimeUnit,%20rx.Scheduler)&quot;&gt;&lt;code&gt;skip(long,TimeUnit,Scheduler)&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/Observable.html#skip(long,%20java.util.concurrent.TimeUnit,%20rx.Scheduler)&quot;&gt; &lt;code&gt;skip(long,TimeUnit,Scheduler)&lt;/code&gt; &lt;/a&gt; Javadoc: пропустить (long, TimeUnit, Scheduler)</target>
        </trans-unit>
        <trans-unit id="b91e179dcdfa3257ea8f35bad2a843d75c099ebb" translate="yes" xml:space="preserve">
          <source>Javadoc: &lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/Observable.html#skipLast(int)&quot;&gt;&lt;code&gt;skipLast(int)&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/Observable.html#skipLast(int)&quot;&gt; &lt;code&gt;skipLast(int)&lt;/code&gt; &lt;/a&gt; Javadoc: skipLast (число)</target>
        </trans-unit>
        <trans-unit id="abffc82c209d374a82bbf4398f7cd856754ffd42" translate="yes" xml:space="preserve">
          <source>Javadoc: &lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/Observable.html#skipLast(long,%20java.util.concurrent.TimeUnit)&quot;&gt;&lt;code&gt;skipLast(long,TimeUnit)&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/Observable.html#skipLast(long,%20java.util.concurrent.TimeUnit)&quot;&gt; &lt;code&gt;skipLast(long,TimeUnit)&lt;/code&gt; &lt;/a&gt; Javadoc: skipLast (long, TimeUnit)</target>
        </trans-unit>
        <trans-unit id="f688b905352b796b15f7c66580d644769234fc85" translate="yes" xml:space="preserve">
          <source>Javadoc: &lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/Observable.html#skipLast(long,%20java.util.concurrent.TimeUnit,%20rx.Scheduler)&quot;&gt;&lt;code&gt;skipLast(long,TimeUnit,Scheduler)&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/Observable.html#skipLast(long,%20java.util.concurrent.TimeUnit,%20rx.Scheduler)&quot;&gt; &lt;code&gt;skipLast(long,TimeUnit,Scheduler)&lt;/code&gt; &lt;/a&gt; Javadoc: skipLast (long, TimeUnit, Scheduler)</target>
        </trans-unit>
        <trans-unit id="666f60f4683f0cd8ea2caeb9c7e502eb05128d81" translate="yes" xml:space="preserve">
          <source>Javadoc: &lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/Observable.html#skipUntil(rx.Observable)&quot;&gt;&lt;code&gt;skipUntil(Observable)&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/Observable.html#skipUntil(rx.Observable)&quot;&gt; &lt;code&gt;skipUntil(Observable)&lt;/code&gt; &lt;/a&gt; Javadoc: skipUntil (наблюдаемый)</target>
        </trans-unit>
        <trans-unit id="ff8a77a186b7ed906ba9f350b7649ff20c63a6b9" translate="yes" xml:space="preserve">
          <source>Javadoc: &lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/Observable.html#skipWhile(rx.functions.Func1)&quot;&gt;&lt;code&gt;skipWhile(Func1)&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/Observable.html#skipWhile(rx.functions.Func1)&quot;&gt; &lt;code&gt;skipWhile(Func1)&lt;/code&gt; &lt;/a&gt; Javadoc: skipWhile (Func1)</target>
        </trans-unit>
        <trans-unit id="d7548903d60f7bcd82c5cf638d0ca7631cd960da" translate="yes" xml:space="preserve">
          <source>Javadoc: &lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/Observable.html#startWith(T)&quot;&gt;&lt;code&gt;startWith(T)&lt;/code&gt;&lt;/a&gt; (there are also versions that take up to nine individual items)</source>
          <target state="translated">Javadoc: &lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/Observable.html#startWith(T)&quot;&gt; &lt;code&gt;startWith(T)&lt;/code&gt; &lt;/a&gt; (есть также версии, которые занимают до девяти отдельных элементов)</target>
        </trans-unit>
        <trans-unit id="14df546ef0067542b864b05c1ce59fa8e0019e38" translate="yes" xml:space="preserve">
          <source>Javadoc: &lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/Observable.html#startWith(java.lang.Iterable)&quot;&gt;&lt;code&gt;startWith(Iterable)&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/Observable.html#startWith(java.lang.Iterable)&quot;&gt; &lt;code&gt;startWith(Iterable)&lt;/code&gt; &lt;/a&gt; Javadoc: startWith (Iterable)</target>
        </trans-unit>
        <trans-unit id="614d1cad38ad65c317418d29d36ad6a90d7d7b85" translate="yes" xml:space="preserve">
          <source>Javadoc: &lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/Observable.html#startWith(rx.Observable)&quot;&gt;&lt;code&gt;startWith(Observable)&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/Observable.html#startWith(rx.Observable)&quot;&gt; &lt;code&gt;startWith(Observable)&lt;/code&gt; &lt;/a&gt; Javadoc: startWith (наблюдаемый)</target>
        </trans-unit>
        <trans-unit id="6fec5ce4280ff3a97fa7d090069378a978f85be9" translate="yes" xml:space="preserve">
          <source>Javadoc: &lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/Observable.html#subscribe()&quot;&gt;&lt;code&gt;subscribe()&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">Документация Javadoc: &lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/Observable.html#subscribe()&quot;&gt; &lt;code&gt;subscribe()&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="4ea0961c8a8f04dd6288eb6428b2ed594794fd8d" translate="yes" xml:space="preserve">
          <source>Javadoc: &lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/Observable.html#subscribe(rx.Observer)&quot;&gt;&lt;code&gt;subscribe(Observer)&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">Javadoc: &lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/Observable.html#subscribe(rx.Observer)&quot;&gt; &lt;code&gt;subscribe(Observer)&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="097306ce5978ae52acb97ebfa3ba05ad393656dc" translate="yes" xml:space="preserve">
          <source>Javadoc: &lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/Observable.html#subscribe(rx.Subscriber)&quot;&gt;&lt;code&gt;subscribe(Subscriber)&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">Javadoc: &lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/Observable.html#subscribe(rx.Subscriber)&quot;&gt; &lt;code&gt;subscribe(Subscriber)&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="1225bce158f4452dfb0a5d8158ce2c2a057fab0a" translate="yes" xml:space="preserve">
          <source>Javadoc: &lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/Observable.html#subscribe(rx.functions.Action1)&quot;&gt;&lt;code&gt;subscribe(Action1)&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">Документация Javadoc: &lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/Observable.html#subscribe(rx.functions.Action1)&quot;&gt; &lt;code&gt;subscribe(Action1)&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="3fe5488f2e26cf9d225b043d97c0ef15d44a0d50" translate="yes" xml:space="preserve">
          <source>Javadoc: &lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/Observable.html#subscribe(rx.functions.Action1,%20rx.functions.Action1)&quot;&gt;&lt;code&gt;subscribe(Action1,Action1)&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">Документация Javadoc: &lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/Observable.html#subscribe(rx.functions.Action1,%20rx.functions.Action1)&quot;&gt; &lt;code&gt;subscribe(Action1,Action1)&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="5273767573126f2ba75183515cb2a0df6247e9ad" translate="yes" xml:space="preserve">
          <source>Javadoc: &lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/Observable.html#subscribe(rx.functions.Action1,%20rx.functions.Action1,%20rx.functions.Action0)&quot;&gt;&lt;code&gt;subscribe(Action1,Action1,Action0)&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">Документация Javadoc: &lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/Observable.html#subscribe(rx.functions.Action1,%20rx.functions.Action1,%20rx.functions.Action0)&quot;&gt; &lt;code&gt;subscribe(Action1,Action1,Action0)&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="e16640c97bd78a9db7bfcfb8ac9576968d286b9d" translate="yes" xml:space="preserve">
          <source>Javadoc: &lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/Observable.html#subscribeOn(rx.Scheduler)&quot;&gt;&lt;code&gt;subscribeOn(Scheduler)&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">Документация Javadoc: &lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/Observable.html#subscribeOn(rx.Scheduler)&quot;&gt; &lt;code&gt;subscribeOn(Scheduler)&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="8f87bfcd3e57f0d3f21dc51faa3d2c5794a28d5f" translate="yes" xml:space="preserve">
          <source>Javadoc: &lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/Observable.html#switchMap(rx.functions.Func1)&quot;&gt;&lt;code&gt;switchMap(Func1)&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/Observable.html#switchMap(rx.functions.Func1)&quot;&gt; &lt;code&gt;switchMap(Func1)&lt;/code&gt; &lt;/a&gt; Javadoc: switchMap (Func1)</target>
        </trans-unit>
        <trans-unit id="2a0233eb9d0daa95910a6994297b8407bdb14e1f" translate="yes" xml:space="preserve">
          <source>Javadoc: &lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/Observable.html#switchOnNext(rx.Observable)&quot;&gt;&lt;code&gt;switchOnNext(Observable)&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/Observable.html#switchOnNext(rx.Observable)&quot;&gt; &lt;code&gt;switchOnNext(Observable)&lt;/code&gt; &lt;/a&gt; Javadoc: switchOnNext (наблюдаемый)</target>
        </trans-unit>
        <trans-unit id="90db27df51f16034b27ec1f7fa7c28ddf0f4ddaa" translate="yes" xml:space="preserve">
          <source>Javadoc: &lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/Observable.html#take(int)&quot;&gt;&lt;code&gt;take(int)&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">Javadoc: &lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/Observable.html#take(int)&quot;&gt; &lt;code&gt;take(int)&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="dc219d33b90162e583998ee5707d761838b65dab" translate="yes" xml:space="preserve">
          <source>Javadoc: &lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/Observable.html#take(long,%20java.util.concurrent.TimeUnit)&quot;&gt;&lt;code&gt;take(long,TimeUnit)&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">Javadoc: &lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/Observable.html#take(long,%20java.util.concurrent.TimeUnit)&quot;&gt; &lt;code&gt;take(long,TimeUnit)&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="996b6faf2821834d1379e5d5d2551e5e6bda9484" translate="yes" xml:space="preserve">
          <source>Javadoc: &lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/Observable.html#take(long,%20java.util.concurrent.TimeUnit,%20rx.Scheduler)&quot;&gt;&lt;code&gt;take(long,TimeUnit,Scheduler)&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">Javadoc: &lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/Observable.html#take(long,%20java.util.concurrent.TimeUnit,%20rx.Scheduler)&quot;&gt; &lt;code&gt;take(long,TimeUnit,Scheduler)&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="3e57f9cb2ef102812dad865daf5117b7e7a45f9e" translate="yes" xml:space="preserve">
          <source>Javadoc: &lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/Observable.html#takeFirst(rx.functions.Func1)&quot;&gt;&lt;code&gt;takeFirst(Func1)&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/Observable.html#takeFirst(rx.functions.Func1)&quot;&gt; &lt;code&gt;takeFirst(Func1)&lt;/code&gt; &lt;/a&gt; Javadoc: takeFirst (Func1)</target>
        </trans-unit>
        <trans-unit id="b5d4e04df6ed0b23381e57a6b85a100ca1021015" translate="yes" xml:space="preserve">
          <source>Javadoc: &lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/Observable.html#takeLast(int)&quot;&gt;&lt;code&gt;takeLast(int)&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/Observable.html#takeLast(int)&quot;&gt; &lt;code&gt;takeLast(int)&lt;/code&gt; &lt;/a&gt; Javadoc: takeLast (int)</target>
        </trans-unit>
        <trans-unit id="baf231c2daccd1485db622e169bdd7b05a70d5ac" translate="yes" xml:space="preserve">
          <source>Javadoc: &lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/Observable.html#takeLast(int,%20long,%20java.util.concurrent.TimeUnit)&quot;&gt;&lt;code&gt;takeLast(int,long,TimeUnit)&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/Observable.html#takeLast(int,%20long,%20java.util.concurrent.TimeUnit)&quot;&gt; &lt;code&gt;takeLast(int,long,TimeUnit)&lt;/code&gt; &lt;/a&gt; Javadoc: takeLast (int, long, TimeUnit)</target>
        </trans-unit>
        <trans-unit id="5dc067a867f6b480173f343bb1ac1b987ce1f242" translate="yes" xml:space="preserve">
          <source>Javadoc: &lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/Observable.html#takeLast(int,%20long,%20java.util.concurrent.TimeUnit,%20rx.Scheduler)&quot;&gt;&lt;code&gt;takeLast(int,long,TimeUnit,Scheduler)&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/Observable.html#takeLast(int,%20long,%20java.util.concurrent.TimeUnit,%20rx.Scheduler)&quot;&gt; &lt;code&gt;takeLast(int,long,TimeUnit,Scheduler)&lt;/code&gt; &lt;/a&gt; Javadoc: takeLast (int, long, TimeUnit, Scheduler)</target>
        </trans-unit>
        <trans-unit id="dd85f702e8d2813c45519174bf3c08765cd9582b" translate="yes" xml:space="preserve">
          <source>Javadoc: &lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/Observable.html#takeLast(long,%20java.util.concurrent.TimeUnit)&quot;&gt;&lt;code&gt;takeLast(long,TimeUnit)&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/Observable.html#takeLast(long,%20java.util.concurrent.TimeUnit)&quot;&gt; &lt;code&gt;takeLast(long,TimeUnit)&lt;/code&gt; &lt;/a&gt; Javadoc: takeLast (long, TimeUnit)</target>
        </trans-unit>
        <trans-unit id="b07d4ab33dc3cacb39972fabcef884cd8ebda8e6" translate="yes" xml:space="preserve">
          <source>Javadoc: &lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/Observable.html#takeLast(long,%20java.util.concurrent.TimeUnit,%20rx.Scheduler)&quot;&gt;&lt;code&gt;takeLast(long,TimeUnit,Scheduler)&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/Observable.html#takeLast(long,%20java.util.concurrent.TimeUnit,%20rx.Scheduler)&quot;&gt; &lt;code&gt;takeLast(long,TimeUnit,Scheduler)&lt;/code&gt; &lt;/a&gt; Javadoc: takeLast (long, TimeUnit, Scheduler)</target>
        </trans-unit>
        <trans-unit id="736e0d30ca69629d092ea6ebd09aaf669d03caa9" translate="yes" xml:space="preserve">
          <source>Javadoc: &lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/Observable.html#takeLastBuffer(int)&quot;&gt;&lt;code&gt;takeLastBuffer(int)&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/Observable.html#takeLastBuffer(int)&quot;&gt; &lt;code&gt;takeLastBuffer(int)&lt;/code&gt; &lt;/a&gt; Javadoc: takeLastBuffer (число)</target>
        </trans-unit>
        <trans-unit id="a0231c569cc16ccec230cdc6c4035044d30d70f4" translate="yes" xml:space="preserve">
          <source>Javadoc: &lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/Observable.html#takeLastBuffer(int,%20long,%20java.util.concurrent.TimeUnit)&quot;&gt;&lt;code&gt;takeLastBuffer(int,long,TimeUnit)&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/Observable.html#takeLastBuffer(int,%20long,%20java.util.concurrent.TimeUnit)&quot;&gt; &lt;code&gt;takeLastBuffer(int,long,TimeUnit)&lt;/code&gt; &lt;/a&gt; Javadoc: takeLastBuffer (int, long, TimeUnit)</target>
        </trans-unit>
        <trans-unit id="d9592245d38d0b977cb375882b204d7de6286a87" translate="yes" xml:space="preserve">
          <source>Javadoc: &lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/Observable.html#takeLastBuffer(int,%20long,%20java.util.concurrent.TimeUnit,%20rx.Scheduler)&quot;&gt;&lt;code&gt;takeLastBuffer(int,long,TimeUnit,Scheduler)&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/Observable.html#takeLastBuffer(int,%20long,%20java.util.concurrent.TimeUnit,%20rx.Scheduler)&quot;&gt; &lt;code&gt;takeLastBuffer(int,long,TimeUnit,Scheduler)&lt;/code&gt; &lt;/a&gt; Javadoc: takeLastBuffer (int, long, TimeUnit, Scheduler)</target>
        </trans-unit>
        <trans-unit id="f6a4d9ecc5ae1d271d9812b61488cc43d8023474" translate="yes" xml:space="preserve">
          <source>Javadoc: &lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/Observable.html#takeLastBuffer(long,%20java.util.concurrent.TimeUnit)&quot;&gt;&lt;code&gt;takeLastBuffer(long,TimeUnit)&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/Observable.html#takeLastBuffer(long,%20java.util.concurrent.TimeUnit)&quot;&gt; &lt;code&gt;takeLastBuffer(long,TimeUnit)&lt;/code&gt; &lt;/a&gt; Javadoc: takeLastBuffer (long, TimeUnit)</target>
        </trans-unit>
        <trans-unit id="574acc72c891d2320a7204af2fbb157ea0049588" translate="yes" xml:space="preserve">
          <source>Javadoc: &lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/Observable.html#takeLastBuffer(long,%20java.util.concurrent.TimeUnit,%20rx.Scheduler)&quot;&gt;&lt;code&gt;takeLastBuffer(long,TimeUnit,Scheduler)&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/Observable.html#takeLastBuffer(long,%20java.util.concurrent.TimeUnit,%20rx.Scheduler)&quot;&gt; &lt;code&gt;takeLastBuffer(long,TimeUnit,Scheduler)&lt;/code&gt; &lt;/a&gt; Javadoc: takeLastBuffer (long, TimeUnit, Scheduler)</target>
        </trans-unit>
        <trans-unit id="4c744cfd9bb72012db683363833045d3acb29dc6" translate="yes" xml:space="preserve">
          <source>Javadoc: &lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/Observable.html#takeUntil(rx.Observable)&quot;&gt;&lt;code&gt;takeUntil(Observable)&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/Observable.html#takeUntil(rx.Observable)&quot;&gt; &lt;code&gt;takeUntil(Observable)&lt;/code&gt; &lt;/a&gt; Javadoc: takeUntil (наблюдаемый)</target>
        </trans-unit>
        <trans-unit id="6ec9ef828f2ca4f3b6ad2848abef05266e08dd82" translate="yes" xml:space="preserve">
          <source>Javadoc: &lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/Observable.html#takeUntil(rx.functions.Func1)&quot;&gt;&lt;code&gt;takeUntil(Func1)&lt;/code&gt; (RxGroovy 1.1)&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/Observable.html#takeUntil(rx.functions.Func1)&quot;&gt; &lt;code&gt;takeUntil(Func1)&lt;/code&gt; &lt;/a&gt; Javadoc: takeUntil (Func1) (RxGroovy 1.1)</target>
        </trans-unit>
        <trans-unit id="0040d56581aabc48659a3fbce7eccff0fff9c6a4" translate="yes" xml:space="preserve">
          <source>Javadoc: &lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/Observable.html#takeUntil(rx.functions.Func1)&quot;&gt;&lt;code&gt;takeUntil(Func1)&lt;/code&gt; (RxJava 1.1)&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/Observable.html#takeUntil(rx.functions.Func1)&quot;&gt; &lt;code&gt;takeUntil(Func1)&lt;/code&gt; &lt;/a&gt; Javadoc: takeUntil (Func1) (RxJava 1.1)</target>
        </trans-unit>
        <trans-unit id="9cda317400041cd7462281348199373a43d1bccf" translate="yes" xml:space="preserve">
          <source>Javadoc: &lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/Observable.html#takeWhile(rx.functions.Func1)&quot;&gt;&lt;code&gt;takeWhile(Func1)&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/Observable.html#takeWhile(rx.functions.Func1)&quot;&gt; &lt;code&gt;takeWhile(Func1)&lt;/code&gt; &lt;/a&gt; Javadoc: takeWhile (Func1)</target>
        </trans-unit>
        <trans-unit id="b8dbdaf485b389ccf24b3c4b9359db39402496c9" translate="yes" xml:space="preserve">
          <source>Javadoc: &lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/Observable.html#throttleWithTimeout(long,%20java.util.concurrent.TimeUnit)&quot;&gt;&lt;code&gt;throttleWithTimeout(long,TimeUnit)&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/Observable.html#debounce(long,%20java.util.concurrent.TimeUnit)&quot;&gt;&lt;code&gt;debounce(long,TimeUnit)&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/Observable.html#throttleWithTimeout(long,%20java.util.concurrent.TimeUnit)&quot;&gt; &lt;code&gt;throttleWithTimeout(long,TimeUnit)&lt;/code&gt; &lt;/a&gt; Javadoc: throttleWithTimeout (long, TimeUnit) и &lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/Observable.html#debounce(long,%20java.util.concurrent.TimeUnit)&quot;&gt; &lt;code&gt;debounce(long,TimeUnit)&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="af9847e3373cb3e30618b8fa5d9aa087bf2f2b73" translate="yes" xml:space="preserve">
          <source>Javadoc: &lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/Observable.html#throttleWithTimeout(long,%20java.util.concurrent.TimeUnit,%20rx.Scheduler)&quot;&gt;&lt;code&gt;throttleWithTimeout(long,TimeUnit,Scheduler)&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/Observable.html#debounce(long,%20java.util.concurrent.TimeUnit,%20rx.Scheduler)&quot;&gt;&lt;code&gt;debounce(long,TimeUnit,Scheduler)&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/Observable.html#throttleWithTimeout(long,%20java.util.concurrent.TimeUnit,%20rx.Scheduler)&quot;&gt; &lt;code&gt;throttleWithTimeout(long,TimeUnit,Scheduler)&lt;/code&gt; &lt;/a&gt; Javadoc: throttleWithTimeout (long, TimeUnit, Scheduler) и &lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/Observable.html#debounce(long,%20java.util.concurrent.TimeUnit,%20rx.Scheduler)&quot;&gt; &lt;code&gt;debounce(long,TimeUnit,Scheduler)&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="43f01d747584fe391d3e8dc83a5bc63ac3e7e422" translate="yes" xml:space="preserve">
          <source>Javadoc: &lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/Observable.html#timeInterval()&quot;&gt;&lt;code&gt;timeInterval()&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/Observable.html#timeInterval()&quot;&gt; &lt;code&gt;timeInterval()&lt;/code&gt; &lt;/a&gt; Javadoc: timeInterval ()</target>
        </trans-unit>
        <trans-unit id="e27bad34dfa8a42c45ad436e643d0ac83a52c796" translate="yes" xml:space="preserve">
          <source>Javadoc: &lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/Observable.html#timeInterval(rx.Scheduler)&quot;&gt;&lt;code&gt;timeInterval(Scheduler)&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/Observable.html#timeInterval(rx.Scheduler)&quot;&gt; &lt;code&gt;timeInterval(Scheduler)&lt;/code&gt; &lt;/a&gt; Javadoc: timeInterval (планировщик)</target>
        </trans-unit>
        <trans-unit id="0bd475a0a7f0c802a0bb91eb390af6086fa5d176" translate="yes" xml:space="preserve">
          <source>Javadoc: &lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/Observable.html#timeout(long,%20java.util.concurrent.TimeUnit)&quot;&gt;&lt;code&gt;timeout(long,TimeUnit)&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/Observable.html#timeout(long,%20java.util.concurrent.TimeUnit)&quot;&gt; &lt;code&gt;timeout(long,TimeUnit)&lt;/code&gt; &lt;/a&gt; Javadoc: тайм-аут (длинный, TimeUnit)</target>
        </trans-unit>
        <trans-unit id="de99bb2f799f5374d47c9b7e77f1a63f9cecd5c8" translate="yes" xml:space="preserve">
          <source>Javadoc: &lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/Observable.html#timeout(long,%20java.util.concurrent.TimeUnit,%20rx.Observable)&quot;&gt;&lt;code&gt;timeout(long,TimeUnit,Observable)&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">Javadoc: &lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/Observable.html#timeout(long,%20java.util.concurrent.TimeUnit,%20rx.Observable)&quot;&gt; &lt;code&gt;timeout(long,TimeUnit,Observable)&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="93ae03f6a17001686942d78ace15e9b939e2fa93" translate="yes" xml:space="preserve">
          <source>Javadoc: &lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/Observable.html#timeout(long,%20java.util.concurrent.TimeUnit,%20rx.Observable,%20rx.Scheduler)&quot;&gt;&lt;code&gt;timeout(long,TimeUnit,Observable,Scheduler)&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">Javadoc: &lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/Observable.html#timeout(long,%20java.util.concurrent.TimeUnit,%20rx.Observable,%20rx.Scheduler)&quot;&gt; &lt;code&gt;timeout(long,TimeUnit,Observable,Scheduler)&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="88ab891839c3535d647259068745d01d4e3315bc" translate="yes" xml:space="preserve">
          <source>Javadoc: &lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/Observable.html#timeout(long,%20java.util.concurrent.TimeUnit,%20rx.Scheduler)&quot;&gt;&lt;code&gt;timeout()&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">Документация Javadoc: &lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/Observable.html#timeout(long,%20java.util.concurrent.TimeUnit,%20rx.Scheduler)&quot;&gt; &lt;code&gt;timeout()&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="70b5a536e24f235ccac53b12291d3a53ecfc5d1f" translate="yes" xml:space="preserve">
          <source>Javadoc: &lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/Observable.html#timeout(rx.functions.Func0,%20rx.functions.Func1)&quot;&gt;&lt;code&gt;timeout(Func0,Func1)&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/Observable.html#timeout(rx.functions.Func0,%20rx.functions.Func1)&quot;&gt; &lt;code&gt;timeout(Func0,Func1)&lt;/code&gt; &lt;/a&gt; Javadoc: тайм-аут (Func0, Func1)</target>
        </trans-unit>
        <trans-unit id="c80ae920112651f6f95ebb7991a2d3ac90e124e1" translate="yes" xml:space="preserve">
          <source>Javadoc: &lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/Observable.html#timeout(rx.functions.Func0,%20rx.functions.Func1,%20rx.Observable)&quot;&gt;&lt;code&gt;timeout(Func0,Func1,Observable)&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/Observable.html#timeout(rx.functions.Func0,%20rx.functions.Func1,%20rx.Observable)&quot;&gt; &lt;code&gt;timeout(Func0,Func1,Observable)&lt;/code&gt; &lt;/a&gt; Javadoc: тайм-аут (Func0, Func1, Observable)</target>
        </trans-unit>
        <trans-unit id="2393153bd0564f570b25f56b29f91fa0aebfcaca" translate="yes" xml:space="preserve">
          <source>Javadoc: &lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/Observable.html#timeout(rx.functions.Func1)&quot;&gt;&lt;code&gt;timeout(Func1)&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/Observable.html#timeout(rx.functions.Func1)&quot;&gt; &lt;code&gt;timeout(Func1)&lt;/code&gt; &lt;/a&gt; Javadoc: тайм-аут (Func1)</target>
        </trans-unit>
        <trans-unit id="6098e4c0ed5c27a1aea355eda5f7eaa047e954f1" translate="yes" xml:space="preserve">
          <source>Javadoc: &lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/Observable.html#timeout(rx.functions.Func1,%20rx.Observable)&quot;&gt;&lt;code&gt;timeout(Func1,Observable)&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/Observable.html#timeout(rx.functions.Func1,%20rx.Observable)&quot;&gt; &lt;code&gt;timeout(Func1,Observable)&lt;/code&gt; &lt;/a&gt; Javadoc: тайм-аут (Func1, Observable)</target>
        </trans-unit>
        <trans-unit id="de06e8300bc5beeb4a72473d0c3f5c75b89a64b7" translate="yes" xml:space="preserve">
          <source>Javadoc: &lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/Observable.html#timer(long,%20java.util.concurrent.TimeUnit)&quot;&gt;&lt;code&gt;timer(long,TimeUnit)&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/Observable.html#timer(long,%20java.util.concurrent.TimeUnit)&quot;&gt; &lt;code&gt;timer(long,TimeUnit)&lt;/code&gt; &lt;/a&gt; Javadoc: таймер (длинный, TimeUnit)</target>
        </trans-unit>
        <trans-unit id="1064abd461c14983de59fbd0177de60d78537b37" translate="yes" xml:space="preserve">
          <source>Javadoc: &lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/Observable.html#timer(long,%20java.util.concurrent.TimeUnit,%20rx.Scheduler)&quot;&gt;&lt;code&gt;timer(long,TimeUnit,Scheduler)&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">Javadoc: &lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/Observable.html#timer(long,%20java.util.concurrent.TimeUnit,%20rx.Scheduler)&quot;&gt; &lt;code&gt;timer(long,TimeUnit,Scheduler)&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="508ba21d7d7b247582564dc3fbf16c8cbded0c97" translate="yes" xml:space="preserve">
          <source>Javadoc: &lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/Observable.html#timestamp()&quot;&gt;&lt;code&gt;timestamp()&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">Документация Javadoc: &lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/Observable.html#timestamp()&quot;&gt; &lt;code&gt;timestamp()&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="e19d89cff442ea127f2c5e9efcfa9fd361c21c8b" translate="yes" xml:space="preserve">
          <source>Javadoc: &lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/Observable.html#timestamp(rx.Scheduler)&quot;&gt;&lt;code&gt;timestamp(Scheduler)&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">Javadoc: &lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/Observable.html#timestamp(rx.Scheduler)&quot;&gt; &lt;code&gt;timestamp(Scheduler)&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="ff89a8dc90358b22a2175f7d7a3524be1a572ad7" translate="yes" xml:space="preserve">
          <source>Javadoc: &lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/Observable.html#toBlocking()&quot;&gt;&lt;code&gt;Observable.toBlocking()&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">Документация Javadoc: &lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/Observable.html#toBlocking()&quot;&gt; &lt;code&gt;Observable.toBlocking()&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="c86f12819560d920c35f348e6ec391efad150936" translate="yes" xml:space="preserve">
          <source>Javadoc: &lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/Observable.html#toList()&quot;&gt;&lt;code&gt;toList()&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/Observable.html#toList()&quot;&gt; &lt;code&gt;toList()&lt;/code&gt; &lt;/a&gt; Javadoc: toList ()</target>
        </trans-unit>
        <trans-unit id="dc0ef40088bb8d758a24757584928a2474f55ee3" translate="yes" xml:space="preserve">
          <source>Javadoc: &lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/Observable.html#toMap(rx.functions.Func1)&quot;&gt;&lt;code&gt;toMap(Func1)&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/Observable.html#toMap(rx.functions.Func1)&quot;&gt; &lt;code&gt;toMap(Func1)&lt;/code&gt; &lt;/a&gt; Javadoc: toMap (Func1)</target>
        </trans-unit>
        <trans-unit id="42cb5b2c2554deafd193411c59af8241a3a99cff" translate="yes" xml:space="preserve">
          <source>Javadoc: &lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/Observable.html#toMap(rx.functions.Func1,%20rx.functions.Func1)&quot;&gt;&lt;code&gt;toMap(Func1,Func1)&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/Observable.html#toMap(rx.functions.Func1,%20rx.functions.Func1)&quot;&gt; &lt;code&gt;toMap(Func1,Func1)&lt;/code&gt; &lt;/a&gt; Javadoc: toMap (Func1, Func1)</target>
        </trans-unit>
        <trans-unit id="abefde76a935bc9dd90d031d3817f1931bc6d00b" translate="yes" xml:space="preserve">
          <source>Javadoc: &lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/Observable.html#toMap(rx.functions.Func1,%20rx.functions.Func1,%20rx.functions.Func0)&quot;&gt;&lt;code&gt;toMap(Func1,Func1,Func0)&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/Observable.html#toMap(rx.functions.Func1,%20rx.functions.Func1,%20rx.functions.Func0)&quot;&gt; &lt;code&gt;toMap(Func1,Func1,Func0)&lt;/code&gt; &lt;/a&gt; Javadoc: toMap (Func1, Func1, Func0)</target>
        </trans-unit>
        <trans-unit id="2e3ba3d2807da627e3d4b5b179015279738cf507" translate="yes" xml:space="preserve">
          <source>Javadoc: &lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/Observable.html#toMultimap(rx.functions.Func1)&quot;&gt;&lt;code&gt;toMultiMap(Func1)&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/Observable.html#toMultimap(rx.functions.Func1)&quot;&gt; &lt;code&gt;toMultiMap(Func1)&lt;/code&gt; &lt;/a&gt; Javadoc: toMultiMap (Func1)</target>
        </trans-unit>
        <trans-unit id="63ad6238ee1be7ee05d47c7ca61f9b5d85ccd5ab" translate="yes" xml:space="preserve">
          <source>Javadoc: &lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/Observable.html#toMultimap(rx.functions.Func1,%20rx.functions.Func1)&quot;&gt;&lt;code&gt;toMultiMap(Func1,Func1)&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/Observable.html#toMultimap(rx.functions.Func1,%20rx.functions.Func1)&quot;&gt; &lt;code&gt;toMultiMap(Func1,Func1)&lt;/code&gt; &lt;/a&gt; Javadoc: toMultiMap (Func1, Func1)</target>
        </trans-unit>
        <trans-unit id="e105ebe5a571fd538d342023c0e368650f721f12" translate="yes" xml:space="preserve">
          <source>Javadoc: &lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/Observable.html#toMultimap(rx.functions.Func1,%20rx.functions.Func1,%20rx.functions.Func0)&quot;&gt;&lt;code&gt;toMultiMap(Func1,Func1,Func0)&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/Observable.html#toMultimap(rx.functions.Func1,%20rx.functions.Func1,%20rx.functions.Func0)&quot;&gt; &lt;code&gt;toMultiMap(Func1,Func1,Func0)&lt;/code&gt; &lt;/a&gt; Javadoc: toMultiMap (Func1, Func1, Func0)</target>
        </trans-unit>
        <trans-unit id="f2f58a4601bd677d958d819a2a72f6a81ba9303b" translate="yes" xml:space="preserve">
          <source>Javadoc: &lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/Observable.html#toMultimap(rx.functions.Func1,%20rx.functions.Func1,%20rx.functions.Func0,%20rx.functions.Func1)&quot;&gt;&lt;code&gt;toMultiMap(Func1,Func1,Func0,Func1)&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/Observable.html#toMultimap(rx.functions.Func1,%20rx.functions.Func1,%20rx.functions.Func0,%20rx.functions.Func1)&quot;&gt; &lt;code&gt;toMultiMap(Func1,Func1,Func0,Func1)&lt;/code&gt; &lt;/a&gt; Javadoc: toMultiMap (Func1, Func1, Func0, Func1)</target>
        </trans-unit>
        <trans-unit id="ce0c4ce3c67a7537fa39abc2bb3cb0e0d4fd83e9" translate="yes" xml:space="preserve">
          <source>Javadoc: &lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/Observable.html#toSortedList()&quot;&gt;&lt;code&gt;toSortedList()&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/Observable.html#toSortedList()&quot;&gt; &lt;code&gt;toSortedList()&lt;/code&gt; &lt;/a&gt; Javadoc: toSortedList ()</target>
        </trans-unit>
        <trans-unit id="3174ca68b9c314da083aeadf6b05edd126809689" translate="yes" xml:space="preserve">
          <source>Javadoc: &lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/Observable.html#toSortedList(rx.functions.Func2)&quot;&gt;&lt;code&gt;toSortedList(Func2)&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/Observable.html#toSortedList(rx.functions.Func2)&quot;&gt; &lt;code&gt;toSortedList(Func2)&lt;/code&gt; &lt;/a&gt; Javadoc: toSortedList (Func2)</target>
        </trans-unit>
        <trans-unit id="bf1a14640554ba2b9ab351287c4a14e5e1c06b9c" translate="yes" xml:space="preserve">
          <source>Javadoc: &lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/Observable.html#unsubscribeOn(rx.Scheduler)&quot;&gt;&lt;code&gt;unsubscribeOn(Scheduler)&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">Документация Javadoc: &lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/Observable.html#unsubscribeOn(rx.Scheduler)&quot;&gt; &lt;code&gt;unsubscribeOn(Scheduler)&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="62b64c5336a1aeb2c8228c20ecae9932b484c89b" translate="yes" xml:space="preserve">
          <source>Javadoc: &lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/Observable.html#using(rx.functions.Func0,%20rx.functions.Func1,%20rx.functions.Action1)&quot;&gt;&lt;code&gt;using(Func0,Func1,Action1)&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/Observable.html#using(rx.functions.Func0,%20rx.functions.Func1,%20rx.functions.Action1)&quot;&gt; &lt;code&gt;using(Func0,Func1,Action1)&lt;/code&gt; &lt;/a&gt; Javadoc: использование (Func0, Func1, Action1)</target>
        </trans-unit>
        <trans-unit id="cc831bc49a253316689ce17ba29508d1c69c969f" translate="yes" xml:space="preserve">
          <source>Javadoc: &lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/Observable.html#window(int)&quot;&gt;&lt;code&gt;window(int)&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">Документация Javadoc: &lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/Observable.html#window(int)&quot;&gt; &lt;code&gt;window(int)&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="69f1b3b4f7fd8183879c2fc76107c9bcc5cde9bd" translate="yes" xml:space="preserve">
          <source>Javadoc: &lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/Observable.html#window(int,%20int)&quot;&gt;&lt;code&gt;window(int,int)&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">Документация Javadoc: &lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/Observable.html#window(int,%20int)&quot;&gt; &lt;code&gt;window(int,int)&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="a91e3a62e445e068a191b8e05f542f04baa43165" translate="yes" xml:space="preserve">
          <source>Javadoc: &lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/Observable.html#window(long,%20java.util.concurrent.TimeUnit)&quot;&gt;&lt;code&gt;window(long,TimeUnit)&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/Observable.html#window(long,%20java.util.concurrent.TimeUnit)&quot;&gt; &lt;code&gt;window(long,TimeUnit)&lt;/code&gt; &lt;/a&gt; Javadoc: окно (длинное, TimeUnit)</target>
        </trans-unit>
        <trans-unit id="b9c0f39c04a609ac87ff3954ab6685d1be673f7a" translate="yes" xml:space="preserve">
          <source>Javadoc: &lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/Observable.html#window(long,%20java.util.concurrent.TimeUnit,%20int)&quot;&gt;&lt;code&gt;window(long,TimeUnit,int)&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/Observable.html#window(long,%20java.util.concurrent.TimeUnit,%20int)&quot;&gt; &lt;code&gt;window(long,TimeUnit,int)&lt;/code&gt; &lt;/a&gt; Javadoc: окно (длинное, TimeUnit, int)</target>
        </trans-unit>
        <trans-unit id="b65080e143cec16e2d98e8b4d6597ba84ed951d5" translate="yes" xml:space="preserve">
          <source>Javadoc: &lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/Observable.html#window(long,%20java.util.concurrent.TimeUnit,%20int,%20rx.Scheduler)&quot;&gt;&lt;code&gt;window(long,TimeUnit,int,Scheduler)&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/Observable.html#window(long,%20java.util.concurrent.TimeUnit,%20int,%20rx.Scheduler)&quot;&gt; &lt;code&gt;window(long,TimeUnit,int,Scheduler)&lt;/code&gt; &lt;/a&gt; Javadoc: окно (long, TimeUnit, int, Scheduler)</target>
        </trans-unit>
        <trans-unit id="bbe9c2712eef60b7edaeb49639cdfead80e6dccb" translate="yes" xml:space="preserve">
          <source>Javadoc: &lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/Observable.html#window(long,%20java.util.concurrent.TimeUnit,%20rx.Scheduler)&quot;&gt;&lt;code&gt;window(long,TimeUnit,Scheduler)&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/Observable.html#window(long,%20java.util.concurrent.TimeUnit,%20rx.Scheduler)&quot;&gt; &lt;code&gt;window(long,TimeUnit,Scheduler)&lt;/code&gt; &lt;/a&gt; Javadoc: окно (длинное, TimeUnit, планировщик)</target>
        </trans-unit>
        <trans-unit id="2eaf8a736415def38c22ec9c60b56fe170a18c41" translate="yes" xml:space="preserve">
          <source>Javadoc: &lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/Observable.html#window(long,%20long,%20java.util.concurrent.TimeUnit)&quot;&gt;&lt;code&gt;window(long,long,TimeUnit)&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">Javadoc: &lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/Observable.html#window(long,%20long,%20java.util.concurrent.TimeUnit)&quot;&gt; &lt;code&gt;window(long,long,TimeUnit)&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="e05751ebba6280c73de0b976f4beb83065303314" translate="yes" xml:space="preserve">
          <source>Javadoc: &lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/Observable.html#window(long,%20long,%20java.util.concurrent.TimeUnit,%20rx.Scheduler)&quot;&gt;&lt;code&gt;window(long,long,TimeUnit,Scheduler)&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">Документ Javadoc: &lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/Observable.html#window(long,%20long,%20java.util.concurrent.TimeUnit,%20rx.Scheduler)&quot;&gt; &lt;code&gt;window(long,long,TimeUnit,Scheduler)&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="5b4fc95b6afcab91013fbb78606207fa5b6cd8d3" translate="yes" xml:space="preserve">
          <source>Javadoc: &lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/Observable.html#window(rx.Observable,%20rx.functions.Func1)&quot;&gt;&lt;code&gt;window(Observable,Func1)&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/Observable.html#window(rx.Observable,%20rx.functions.Func1)&quot;&gt; &lt;code&gt;window(Observable,Func1)&lt;/code&gt; &lt;/a&gt; Javadoc: окно (наблюдаемое, Func1)</target>
        </trans-unit>
        <trans-unit id="c3a7e53c82ce67222c476e954992f114cfa166e3" translate="yes" xml:space="preserve">
          <source>Javadoc: &lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/Observable.html#window(rx.functions.Func0)&quot;&gt;&lt;code&gt;window(Func0)&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/Observable.html#window(rx.functions.Func0)&quot;&gt; &lt;code&gt;window(Func0)&lt;/code&gt; &lt;/a&gt; Javadoc: окно (Func0)</target>
        </trans-unit>
        <trans-unit id="a27eeca3d644d41dd8deda38c312886178fd25f1" translate="yes" xml:space="preserve">
          <source>Javadoc: &lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/Observable.html#zip(java.lang.Iterable,%20rx.functions.FuncN)&quot;&gt;&lt;code&gt;zip(Iterable&amp;lt;Observable&amp;gt;,FuncN)&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">Документация Javadoc: &lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/Observable.html#zip(java.lang.Iterable,%20rx.functions.FuncN)&quot;&gt; &lt;code&gt;zip(Iterable&amp;lt;Observable&amp;gt;,FuncN)&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="5ed0481d1f7869e5ef7a50586ec3e26cf9e51894" translate="yes" xml:space="preserve">
          <source>Javadoc: &lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/Observable.html#zip(rx.Observable,%20rx.Observable,%20rx.functions.Func2)&quot;&gt;&lt;code&gt;zip(Observable,Observable,Func2)&lt;/code&gt;&lt;/a&gt; (there are also versions that take up to nine Observables)</source>
          <target state="translated">Javadoc: &lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/Observable.html#zip(rx.Observable,%20rx.Observable,%20rx.functions.Func2)&quot;&gt; &lt;code&gt;zip(Observable,Observable,Func2)&lt;/code&gt; &lt;/a&gt; (есть также версии, которые занимают до девяти Observable)</target>
        </trans-unit>
        <trans-unit id="b7ae23130ac1e1306f4fa892356c131f2e578fb5" translate="yes" xml:space="preserve">
          <source>Javadoc: &lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/Observable.html#zip(rx.Observable,%20rx.functions.FuncN)&quot;&gt;&lt;code&gt;zip(Observable&amp;lt;Observable&amp;gt;,FuncN)&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">Документация Javadoc: &lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/Observable.html#zip(rx.Observable,%20rx.functions.FuncN)&quot;&gt; &lt;code&gt;zip(Observable&amp;lt;Observable&amp;gt;,FuncN)&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="5cf99a6c68f0a5432c5831b22d7d480ade929d7a" translate="yes" xml:space="preserve">
          <source>Javadoc: &lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/Observable.html#zipWith(java.lang.Iterable,%20rx.functions.Func2)&quot;&gt;&lt;code&gt;zipWith(Iterable,Func2)&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/Observable.html#zipWith(java.lang.Iterable,%20rx.functions.Func2)&quot;&gt; &lt;code&gt;zipWith(Iterable,Func2)&lt;/code&gt; &lt;/a&gt; Javadoc: zipWith (Iterable, Func2)</target>
        </trans-unit>
        <trans-unit id="a2e93359a16a9214bfcc401d55cde65668096c6c" translate="yes" xml:space="preserve">
          <source>Javadoc: &lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/Observable.html#zipWith(rx.Observable,%20rx.functions.Func2)&quot;&gt;&lt;code&gt;zipWith(Observable,Func2)&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/Observable.html#zipWith(rx.Observable,%20rx.functions.Func2)&quot;&gt; &lt;code&gt;zipWith(Observable,Func2)&lt;/code&gt; &lt;/a&gt; Javadoc: zipWith (наблюдаемый, Func2)</target>
        </trans-unit>
        <trans-unit id="c0fb4692a6c21a924960f0ce366303f4a6ec7cdd" translate="yes" xml:space="preserve">
          <source>Javadoc: &lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/observables/BlockingObservable.html#first()&quot;&gt;&lt;code&gt;BlockingObservable.first()&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">Документация Javadoc: &lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/observables/BlockingObservable.html#first()&quot;&gt; &lt;code&gt;BlockingObservable.first()&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="2c1a831f042c5f98b53ef5960937a10554b3854b" translate="yes" xml:space="preserve">
          <source>Javadoc: &lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/observables/BlockingObservable.html#first(rx.functions.Func1)&quot;&gt;&lt;code&gt;BlockingObservable.first(Func1)&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/observables/BlockingObservable.html#first(rx.functions.Func1)&quot;&gt; &lt;code&gt;BlockingObservable.first(Func1)&lt;/code&gt; &lt;/a&gt; Javadoc: BlockingObservable.first (Func1)</target>
        </trans-unit>
        <trans-unit id="a0913c13656a37c718fbeb143ad3ecf6531e3830" translate="yes" xml:space="preserve">
          <source>Javadoc: &lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/observables/BlockingObservable.html#firstOrDefault(T)&quot;&gt;&lt;code&gt;BlockingObservable.firstOrDefault()&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">Документация Javadoc: &lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/observables/BlockingObservable.html#firstOrDefault(T)&quot;&gt; &lt;code&gt;BlockingObservable.firstOrDefault()&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="f30119640ab268c75e072e01fc1dc6050708d8ac" translate="yes" xml:space="preserve">
          <source>Javadoc: &lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/observables/BlockingObservable.html#firstOrDefault(T,%20rx.functions.Func1)&quot;&gt;&lt;code&gt;BlockingObservable.firstOrDefault(Func1)&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/observables/BlockingObservable.html#firstOrDefault(T,%20rx.functions.Func1)&quot;&gt; &lt;code&gt;BlockingObservable.firstOrDefault(Func1)&lt;/code&gt; &lt;/a&gt; Javadoc: BlockingObservable.firstOrDefault (Func1)</target>
        </trans-unit>
        <trans-unit id="e56d9eceb64869cb48b7f06d24aa570391e5c418" translate="yes" xml:space="preserve">
          <source>Javadoc: &lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/observables/BlockingObservable.html#forEach(rx.functions.Action1)&quot;&gt;BlockingObservable.forEach(Action1)&lt;/a&gt;</source>
          <target state="translated">Документация Javadoc: &lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/observables/BlockingObservable.html#forEach(rx.functions.Action1)&quot;&gt;BlockingObservable.forEach (Action1)&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="449e624997b8c041ac9ff6d6b9d92083b2b8619e" translate="yes" xml:space="preserve">
          <source>Javadoc: &lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/observables/BlockingObservable.html#from(rx.Observable)&quot;&gt;&lt;code&gt;BlockingObservable.from(Observable)&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">Документация Javadoc: &lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/observables/BlockingObservable.html#from(rx.Observable)&quot;&gt; &lt;code&gt;BlockingObservable.from(Observable)&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="ede57859fa1ad57fd19a4c652808c475d5e7ec9a" translate="yes" xml:space="preserve">
          <source>Javadoc: &lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/observables/BlockingObservable.html#getIterator()&quot;&gt;&lt;code&gt;BlockingObservable.getIterator()&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">Документация Javadoc: &lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/observables/BlockingObservable.html#getIterator()&quot;&gt; &lt;code&gt;BlockingObservable.getIterator()&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="764af8b9511f6e3d179a5c422f67d7104b92c6f1" translate="yes" xml:space="preserve">
          <source>Javadoc: &lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/observables/BlockingObservable.html#last()&quot;&gt;&lt;code&gt;BlockingObservable.last()&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">Документация Javadoc: &lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/observables/BlockingObservable.html#last()&quot;&gt; &lt;code&gt;BlockingObservable.last()&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="dfa09a7dd668bb0d3f920ce6ae8ff144c379f7e8" translate="yes" xml:space="preserve">
          <source>Javadoc: &lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/observables/BlockingObservable.html#last(rx.functions.Func1)&quot;&gt;&lt;code&gt;BlockingObservable.last(Func1)&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/observables/BlockingObservable.html#last(rx.functions.Func1)&quot;&gt; &lt;code&gt;BlockingObservable.last(Func1)&lt;/code&gt; &lt;/a&gt; Javadoc: BlockingObservable.last (Func1)</target>
        </trans-unit>
        <trans-unit id="07a7ee5518602ac24333fdc288e35be62aab01ab" translate="yes" xml:space="preserve">
          <source>Javadoc: &lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/observables/BlockingObservable.html#lastOrDefault(T)&quot;&gt;&lt;code&gt;BlockingObservable.lastOrDefault()&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">Документация Javadoc: &lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/observables/BlockingObservable.html#lastOrDefault(T)&quot;&gt; &lt;code&gt;BlockingObservable.lastOrDefault()&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="d351a34bd30ffd75f5b34238c4c727fc22b5c0d3" translate="yes" xml:space="preserve">
          <source>Javadoc: &lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/observables/BlockingObservable.html#lastOrDefault(T,%20rx.functions.Func1)&quot;&gt;&lt;code&gt;BlockingObservable.lastOrDefault(Func1)&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/observables/BlockingObservable.html#lastOrDefault(T,%20rx.functions.Func1)&quot;&gt; &lt;code&gt;BlockingObservable.lastOrDefault(Func1)&lt;/code&gt; &lt;/a&gt; Javadoc: BlockingObservable.lastOrDefault (Func1)</target>
        </trans-unit>
        <trans-unit id="66beaef1a300fff47ad335c1e71de4c6999defa3" translate="yes" xml:space="preserve">
          <source>Javadoc: &lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/observables/BlockingObservable.html#latest()&quot;&gt;&lt;code&gt;latest()&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">Javadoc: &lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/observables/BlockingObservable.html#latest()&quot;&gt; &lt;code&gt;latest()&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="02a2159209868d00e902fdd8ffff803991517648" translate="yes" xml:space="preserve">
          <source>Javadoc: &lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/observables/BlockingObservable.html#mostRecent(T)&quot;&gt;&lt;code&gt;mostRecent(T)&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/observables/BlockingObservable.html#mostRecent(T)&quot;&gt; &lt;code&gt;mostRecent(T)&lt;/code&gt; &lt;/a&gt; Javadoc: mostRecent (T)</target>
        </trans-unit>
        <trans-unit id="4f86cf2fba37072a33891c3b83844e65cccfd75d" translate="yes" xml:space="preserve">
          <source>Javadoc: &lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/observables/BlockingObservable.html#next()&quot;&gt;&lt;code&gt;next()&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">Документация Javadoc: &lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/observables/BlockingObservable.html#next()&quot;&gt; &lt;code&gt;next()&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="a75b64436e4fc90b1060ab99eebeb02ebd4bb5e2" translate="yes" xml:space="preserve">
          <source>Javadoc: &lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/observables/BlockingObservable.html#single()&quot;&gt;&lt;code&gt;single()&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">Документация Javadoc: &lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/observables/BlockingObservable.html#single()&quot;&gt; &lt;code&gt;single()&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="ea35d7eb676c5f45fb5e50e222a286cb19921845" translate="yes" xml:space="preserve">
          <source>Javadoc: &lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/observables/BlockingObservable.html#single(rx.functions.Func1)&quot;&gt;&lt;code&gt;single(Func1)&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/observables/BlockingObservable.html#single(rx.functions.Func1)&quot;&gt; &lt;code&gt;single(Func1)&lt;/code&gt; &lt;/a&gt; Javadoc: single (Func1)</target>
        </trans-unit>
        <trans-unit id="550a3c98a6c050627a41ec1ece2cbd424eef9f99" translate="yes" xml:space="preserve">
          <source>Javadoc: &lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/observables/BlockingObservable.html#singleOrDefault(T)&quot;&gt;&lt;code&gt;singleOrDefault(T)&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/observables/BlockingObservable.html#singleOrDefault(T)&quot;&gt; &lt;code&gt;singleOrDefault(T)&lt;/code&gt; &lt;/a&gt; Javadoc: singleOrDefault (T)</target>
        </trans-unit>
        <trans-unit id="9fe93056c2ffca1713ae3c951c2500b56589f431" translate="yes" xml:space="preserve">
          <source>Javadoc: &lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/observables/BlockingObservable.html#singleOrDefault(rx.functions.Func1,%20T)&quot;&gt;&lt;code&gt;singleOrDefault(Func1,T)&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/observables/BlockingObservable.html#singleOrDefault(rx.functions.Func1,%20T)&quot;&gt; &lt;code&gt;singleOrDefault(Func1,T)&lt;/code&gt; &lt;/a&gt; Javadoc: singleOrDefault (Func1, T)</target>
        </trans-unit>
        <trans-unit id="9325b07f3367f18fb1ae10a54955a8b05be9ec64" translate="yes" xml:space="preserve">
          <source>Javadoc: &lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/observables/BlockingObservable.html#toFuture()&quot;&gt;&lt;code&gt;BlockingObservable.toFuture()&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">Документация Javadoc: &lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/observables/BlockingObservable.html#toFuture()&quot;&gt; &lt;code&gt;BlockingObservable.toFuture()&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="a199fdba7363ac4f6012297b1515c251d1b54afb" translate="yes" xml:space="preserve">
          <source>Javadoc: &lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/observables/BlockingObservable.html#toIterable()&quot;&gt;&lt;code&gt;BlockingObservable.toIterable()&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">Документация Javadoc: &lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/observables/BlockingObservable.html#toIterable()&quot;&gt; &lt;code&gt;BlockingObservable.toIterable()&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="675cb520c956ae1b795491897d7c20919c00bae9" translate="yes" xml:space="preserve">
          <source>Javadoc: &lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/observables/ConnectableObservable.html#connect()&quot;&gt;&lt;code&gt;connect()&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">Документация Javadoc: &lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/observables/ConnectableObservable.html#connect()&quot;&gt; &lt;code&gt;connect()&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="0e1efc97f0057e3a221dd23979ec7dea571e4058" translate="yes" xml:space="preserve">
          <source>Javadoc: &lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/observables/ConnectableObservable.html#connect(rx.functions.Action1)&quot;&gt;&lt;code&gt;connect(Action1)&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">Документация Javadoc: &lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/observables/ConnectableObservable.html#connect(rx.functions.Action1)&quot;&gt; &lt;code&gt;connect(Action1)&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="60f11c605184eafd7acf584c70fa763ba271fe2b" translate="yes" xml:space="preserve">
          <source>Javadoc: &lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/observables/ConnectableObservable.html#refCount()&quot;&gt;&lt;code&gt;refCount()&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/observables/ConnectableObservable.html#refCount()&quot;&gt; &lt;code&gt;refCount()&lt;/code&gt; &lt;/a&gt; Javadoc: refCount ()</target>
        </trans-unit>
        <trans-unit id="8f6896c8817e19a0bae7cf75426f72fc3e1b48df" translate="yes" xml:space="preserve">
          <source>Javadoc: &lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/subjects/AsyncSubject.html&quot;&gt;&lt;code&gt;AsyncSubject&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/subjects/AsyncSubject.html&quot;&gt; &lt;code&gt;AsyncSubject&lt;/code&gt; &lt;/a&gt; Javadoc: AsyncSubject</target>
        </trans-unit>
        <trans-unit id="0633d200735e0fbb01f8ec8522366ea04a6e4cd8" translate="yes" xml:space="preserve">
          <source>Javadoc: &lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/subjects/BehaviorSubject.html&quot;&gt;&lt;code&gt;BehaviorSubject&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">Документ Javadoc: &lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/subjects/BehaviorSubject.html&quot;&gt; &lt;code&gt;BehaviorSubject&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="db85e309cd5913e6e1f0e0d83055f93bcf55f0c7" translate="yes" xml:space="preserve">
          <source>Javadoc: &lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/subjects/PublishSubject.html&quot;&gt;&lt;code&gt;PublishSubject&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/subjects/PublishSubject.html&quot;&gt; &lt;code&gt;PublishSubject&lt;/code&gt; &lt;/a&gt; Javadoc: PublishSubject</target>
        </trans-unit>
        <trans-unit id="181b1ab61919c20749b5607729b9c83309e81357" translate="yes" xml:space="preserve">
          <source>Javadoc: &lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/subjects/ReplaySubject.html&quot;&gt;&lt;code&gt;ReplaySubject&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/subjects/ReplaySubject.html&quot;&gt; &lt;code&gt;ReplaySubject&lt;/code&gt; &lt;/a&gt; Javadoc: ReplaySubject</target>
        </trans-unit>
        <trans-unit id="3e40fe6a11a588bba1376a1d32a7e3428ab6615f" translate="yes" xml:space="preserve">
          <source>Javadoc: &lt;code&gt;ambArray(Iterable)&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;ambArray(Iterable)&lt;/code&gt; Javadoc: ambArray (итерируемый)</target>
        </trans-unit>
        <trans-unit id="e0d73143de80d17e82de2e017ac156ca3b9c4e01" translate="yes" xml:space="preserve">
          <source>Join</source>
          <target state="translated">Join</target>
        </trans-unit>
        <trans-unit id="e9b44bbe20a40e68483f6d02ac7fb6e3c17a777c" translate="yes" xml:space="preserve">
          <source>Just</source>
          <target state="translated">Just</target>
        </trans-unit>
        <trans-unit id="5eb0ac0860ed5a87c232f4280c251acf04eee53b" translate="yes" xml:space="preserve">
          <source>Just is similar to From, but note that From will dive into an array or an iterable or something of that sort to pull out items to emit, while Just will simply emit the array or iterable or what-have-you as it is, unchanged, as a single item.</source>
          <target state="translated">Просто похоже на From,но обратите внимание,что From погрузится в массив,или итерабельный,или что-то в этом роде,чтобы вытащить элементы для излучения,в то время как Just будет просто излучать массив,или итерабельный,или что-нибудь в этом роде,без изменений,в качестве одного элемента.</target>
        </trans-unit>
        <trans-unit id="3cdd81c6268cd82eb1cc9f62bf2c17d8d4459722" translate="yes" xml:space="preserve">
          <source>Language-Specific Information</source>
          <target state="translated">Информация,специфичная для языка</target>
        </trans-unit>
        <trans-unit id="d1c69a859a9638b242f2dabf8acf1c0b1450ce6b" translate="yes" xml:space="preserve">
          <source>Last</source>
          <target state="translated">Last</target>
        </trans-unit>
        <trans-unit id="8c76e400a05e5ee1bdc7f01b1259378694dfcd71" translate="yes" xml:space="preserve">
          <source>Licensed under the Apache License 2.0.</source>
          <target state="translated">Лицензия Apache 2.0.</target>
        </trans-unit>
        <trans-unit id="45198f467901dbc43f136f39231059a9e4d25bec" translate="yes" xml:space="preserve">
          <source>Like Buffer, Window has many varieties, each with its own way of subdividing the original Observable into the resulting Observable emissions, each one of which contains a &amp;ldquo;window&amp;rdquo; onto the original emitted items. In the terminology of the Window operator, when a window &amp;ldquo;opens,&amp;rdquo; this means that a new Observable is emitted and that Observable will begin emitting items emitted by the source Observable. When a window &amp;ldquo;closes,&amp;rdquo; this means that the emitted Observable stops emitting items from the source Observable and terminates with an &lt;code&gt;onCompleted&lt;/code&gt; notification to its observers.</source>
          <target state="translated">Как и Buffer, Window имеет множество разновидностей, каждая из которых имеет свой способ деления исходного Observable на результирующие Observable-выбросы, каждое из которых содержит &amp;laquo;окно&amp;raquo; на исходные излучаемые элементы. В терминологии оператора Window, когда окно &amp;laquo;открывается&amp;raquo;, это означает, что генерируется новый Observable и что Observable начинает испускать элементы, испускаемые исходным Observable. Когда окно &amp;laquo;закрывается&amp;raquo;, это означает, что испускаемый Observable перестает излучать элементы из исходного Observable и завершается уведомлением &lt;code&gt;onCompleted&lt;/code&gt; для своих наблюдателей.</target>
        </trans-unit>
        <trans-unit id="7be437aa154c532d7432a5431b195c167ba911c5" translate="yes" xml:space="preserve">
          <source>Like Observables, Singles can be manipulated by means of a variety of operators. Some operators also allow for an interface between the Observable world and the Single world so that you can mix the two varieties:</source>
          <target state="translated">Как и &quot;Наблюдатели&quot;,&quot;Одинокими&quot; можно манипулировать с помощью различных операторов.Некоторые операторы также обеспечивают интерфейс между наблюдаемым и одиночным миром,что позволяет смешивать эти две разновидности:</target>
        </trans-unit>
        <trans-unit id="4e836fdc2572ab23d5dc8c36bd613ac6b0f82d63" translate="yes" xml:space="preserve">
          <source>Manual</source>
          <target state="translated">Manual</target>
        </trans-unit>
        <trans-unit id="12ce83dfda8e1f9f2db5ab2740f2dc4733b23113" translate="yes" xml:space="preserve">
          <source>Many implementations of ReactiveX use &lt;a href=&quot;../scheduler&quot;&gt;&amp;ldquo;&lt;code&gt;Scheduler&lt;/code&gt;s&amp;rdquo;&lt;/a&gt; to govern an Observable&amp;rsquo;s transitions between threads in a multi-threaded environment. You can instruct an Observable to do its work on a particular Scheduler by calling the Observable&amp;rsquo;s SubscribeOn operator.</source>
          <target state="translated">Многие реализации ReactiveX используют &lt;a href=&quot;../scheduler&quot;&gt;&amp;laquo; &lt;code&gt;Scheduler&lt;/code&gt; &amp;raquo;&lt;/a&gt; для управления переходами Observable между потоками в многопоточной среде. Вы можете указать Observable выполнять свою работу с конкретным планировщиком, вызвав оператор SubscribeOn Observable.</target>
        </trans-unit>
        <trans-unit id="27e3deaa908102cf5c0a63fa6f9e289f0b0d4bfc" translate="yes" xml:space="preserve">
          <source>Many implementations of ReactiveX use &lt;a href=&quot;../scheduler&quot;&gt;&amp;ldquo;&lt;code&gt;Scheduler&lt;/code&gt;s&amp;rdquo;&lt;/a&gt; to govern an Observable&amp;rsquo;s transitions between threads in a multi-threaded environment. You can instruct an Observable to send its notifications to observers on a particular Scheduler by means of the ObserveOn operator.</source>
          <target state="translated">Многие реализации ReactiveX используют &lt;a href=&quot;../scheduler&quot;&gt;&amp;laquo; &lt;code&gt;Scheduler&lt;/code&gt; &amp;raquo;&lt;/a&gt; для управления переходами Observable между потоками в многопоточной среде. Вы можете указать Observable отправлять свои уведомления наблюдателям в конкретном планировщике с помощью оператора ObserveOn.</target>
        </trans-unit>
        <trans-unit id="ab478f3efc840eebab919dff1b9512286f70c10c" translate="yes" xml:space="preserve">
          <source>Map</source>
          <target state="translated">Map</target>
        </trans-unit>
        <trans-unit id="1b6568d0f5f498e3218a266b3dca5f7ee4f23346" translate="yes" xml:space="preserve">
          <source>Maps every value to the same value every time</source>
          <target state="translated">Каждый раз сопоставляет каждое значение с одним и тем же значением.</target>
        </trans-unit>
        <trans-unit id="fbc2ee18bb010b837c1cf6c925752d541ab7bd99" translate="yes" xml:space="preserve">
          <source>Maps operator variant that calls the map selector with the index and value</source>
          <target state="translated">Вариант оператора карт,который вызывает селектор карт с индексом и значением</target>
        </trans-unit>
        <trans-unit id="8e5c1300b294a8287f0a641655579bda334c9fa0" translate="yes" xml:space="preserve">
          <source>Materialize</source>
          <target state="translated">Materialize</target>
        </trans-unit>
        <trans-unit id="56a48467cd7794d87b0e8b0b95c4b10354c21ad0" translate="yes" xml:space="preserve">
          <source>Materialize/Dematerialize</source>
          <target state="translated">Materialize/Dematerialize</target>
        </trans-unit>
        <trans-unit id="b152b24d328e5fd90c494995eb9626e0a281e5f4" translate="yes" xml:space="preserve">
          <source>Materializes the implicit notifications of an observable sequence as explicit notifications.</source>
          <target state="translated">Материализует неявные уведомления о наблюдаемой последовательности в виде явных уведомлений.</target>
        </trans-unit>
        <trans-unit id="af1b44c100e040643b0085d763ae6b330a4e5dad" translate="yes" xml:space="preserve">
          <source>Mathematical and Aggregate</source>
          <target state="translated">Математический и совокупный</target>
        </trans-unit>
        <trans-unit id="e5ad7305b4c7c55d47850eb79c3ee937127a37dc" translate="yes" xml:space="preserve">
          <source>Mathematical and Aggregate Operators</source>
          <target state="translated">Математические и суммарные операторы</target>
        </trans-unit>
        <trans-unit id="a95e85aed56318093b024674e217cae0bd30241d" translate="yes" xml:space="preserve">
          <source>Max</source>
          <target state="translated">Max</target>
        </trans-unit>
        <trans-unit id="ea8f0d02371e3267b086392b1f463d0c520d86e5" translate="yes" xml:space="preserve">
          <source>Merge</source>
          <target state="translated">Merge</target>
        </trans-unit>
        <trans-unit id="9e4ac30fe9ec5a4344d3e33e285e7a8fef96c2ce" translate="yes" xml:space="preserve">
          <source>Merge may interleave the items emitted by the merged Observables (a similar operator, &lt;a href=&quot;concat&quot;&gt;Concat&lt;/a&gt;, does not interleave items, but emits all of each source Observable&amp;rsquo;s items in turn before beginning to emit items from the next source Observable).</source>
          <target state="translated">Слияние может чередовать элементы, испускаемые объединенными Observable (аналогичный оператор, &lt;a href=&quot;concat&quot;&gt;Concat&lt;/a&gt; , не чередует элементы, но по очереди испускает все элементы каждого исходного Observable, прежде чем начать испускать элементы из следующего источника Observable).</target>
        </trans-unit>
        <trans-unit id="8bb33b95ed9ba8964c5e9759b00134f428deb27e" translate="yes" xml:space="preserve">
          <source>Merges an observable sequence of observables into an observable sequence.</source>
          <target state="translated">Соединяет наблюдаемую последовательность в наблюдаемую последовательность.</target>
        </trans-unit>
        <trans-unit id="a57499375e6ec328464a8aaa1aa7e438f8085aed" translate="yes" xml:space="preserve">
          <source>Merges the specified observable sequences into one observable sequence by using the selector function only when the (first) source observable sequence produces an element.</source>
          <target state="translated">Соединяет указанные наблюдаемые последовательности в одну наблюдаемую последовательность с помощью селекторной функции только тогда,когда (первая)наблюдаемая последовательность источника производит элемент.</target>
        </trans-unit>
        <trans-unit id="50221ba8a967d574d27994275a480cf7fb45cd9b" translate="yes" xml:space="preserve">
          <source>Merges the specified observable sequences into one observable sequence by using the selector function whenever all of the observable sequences have produced an element at a corresponding index. If the result selector function is omitted, a list with the elements of the observable sequences at corresponding indexes will be yielded.</source>
          <target state="translated">Соединяет указанные наблюдаемые последовательности в одну наблюдаемую последовательность с помощью селекторной функции в тех случаях,когда все наблюдаемые последовательности производят элемент по соответствующему индексу.Если селекторная функция результата опущена,то получается список с элементами наблюдаемых последовательностей по соответствующим индексам.</target>
        </trans-unit>
        <trans-unit id="240ad00188b92be9f5949820f9154c8d6290bc02" translate="yes" xml:space="preserve">
          <source>Merges the specified observable sequences into one observable sequence by using the selector function whenever any of the observable sequences produces an element. Observables need to be an array. If the result selector is omitted, a list with the elements will be yielded.</source>
          <target state="translated">Объединяет указанные наблюдаемые последовательности в одну наблюдаемую последовательность с помощью селекторной функции всякий раз,когда какая-либо из наблюдаемых последовательностей производит элемент.Наблюдаемые последовательности должны быть массивом.При опускании селектора результатов будет получен список с элементами.</target>
        </trans-unit>
        <trans-unit id="7eb0cee888ab55b559592d38eec027e9118d7d35" translate="yes" xml:space="preserve">
          <source>Min</source>
          <target state="translated">Min</target>
        </trans-unit>
        <trans-unit id="fbf6912d4adc328dc0fa607074e2fec62b3ebee1" translate="yes" xml:space="preserve">
          <source>Most ReactiveX implementations that have a &lt;code&gt;Join&lt;/code&gt; operator also have a &lt;code&gt;GroupJoin&lt;/code&gt; operator that is similar, except that the function you define to combine items emitted by the two Observables pairs individual items emitted by the source Observable not with an item from the second Observable, but with an Observable that emits items from the second Observable that fall in the same window.</source>
          <target state="translated">Большинство реализаций ReactiveX, имеющих оператор &lt;code&gt;Join&lt;/code&gt; , также имеют &lt;code&gt;GroupJoin&lt;/code&gt; оператор GroupJoin , за исключением того, что функция, которую вы определяете для объединения элементов, излучаемых двумя парами Observable, отдельными элементами, излучаемыми исходным Observable, не с элементом из второго Observable, а с Observable, который испускает элементы из второго Observable, попадающие в то же окно.</target>
        </trans-unit>
        <trans-unit id="28bf1aad57ebb9bf66e5ffe900defb880f8ac198" translate="yes" xml:space="preserve">
          <source>Most operators operate on an Observable and return an Observable. This allows you to apply these operators one after the other, in a chain. Each operator in the chain modifies the Observable that results from the operation of the previous operator.</source>
          <target state="translated">Большинство операторов работают на &quot;Наблюдаемом&quot; и возвращают &quot;Наблюдаемый&quot;.Это позволяет применять эти операторы один за другим,в цепочке.Каждый оператор в цепочке изменяет параметр &quot;Наблюдаемое&quot;,который является результатом работы предыдущего оператора.</target>
        </trans-unit>
        <trans-unit id="32f20f2daf75696a15d8aeb1da99710ee3ba8add" translate="yes" xml:space="preserve">
          <source>Much like &lt;code&gt;onErrorResumeNext&lt;/code&gt; method, this returns an Observable that mirrors the behavior of the source Observable, unless that Observable invokes &lt;code&gt;onError&lt;/code&gt; in which case, if the Throwable passed to &lt;code&gt;onError&lt;/code&gt; is an Exception, rather than propagating that Exception to the observer, &lt;code&gt;onExceptionResumeNext&lt;/code&gt; will instead begin mirroring a second, backup Observable. If the Throwable is not an Exception, the Observable returned by &lt;code&gt;onExceptionResumeNext&lt;/code&gt; will propagate it to its observer&amp;rsquo;s &lt;code&gt;onError&lt;/code&gt; method and will not invoke its backup Observable.</source>
          <target state="translated">Как и метод &lt;code&gt;onErrorResumeNext&lt;/code&gt; , это возвращает Observable, который отражает поведение исходного Observable, если только этот Observable не вызывает &lt;code&gt;onError&lt;/code&gt; ,и в этом случае, если Throwable, переданный &lt;code&gt;onError&lt;/code&gt; , является Exception, вместо того, чтобы распространять это Exception на наблюдателя, &lt;code&gt;onExceptionResumeNext&lt;/code&gt; вместо этого начнет зеркалирование второго, резервного Observable. Если Throwable не является исключением, Observable, возвращаемый &lt;code&gt;onExceptionResumeNext&lt;/code&gt; , распространит его на метод &lt;code&gt;onError&lt;/code&gt; своего наблюдателя и не будет вызывать его резервную копию Observable.</target>
        </trans-unit>
        <trans-unit id="ffee678fddf9f9b6bd1b5057101f7c671b38dd8f" translate="yes" xml:space="preserve">
          <source>Multicasts the source sequence notifications through an instantiated subject from a subject selector factory, into all uses of the sequence within a selector function. Each subscription to the resulting sequence causes a separate multicast invocation, exposing the sequence resulting from the selector function's invocation. For specializations with fixed subject types, see Publish, PublishLast, and Replay.</source>
          <target state="translated">Многократная передача уведомлений о последовательности источников через конкретную тему с завода-изготовителя селектора объектов во все области использования последовательности в рамках функции селектора.Каждая подписка на результирующую последовательность вызывает отдельный многоадресный вызов,обнажая последовательность,возникающую в результате вызова функции селектора.Специализации с фиксированными типами объектов см.в разделах &quot;Публикация&quot;,&quot;Публикация в Интернет&quot; и &quot;Воспроизведение&quot;.</target>
        </trans-unit>
        <trans-unit id="8ae359ae41a6e688e3f5deb8f64bb7791dc7166a" translate="yes" xml:space="preserve">
          <source>Multicasts the source sequence notifications through an instantiated subject into all uses of the sequence within a selector function. Each subscription to the resulting sequence causes a separate multicast invocation, exposing the sequence resulting from the selector function's invocation. For specializations with fixed subject types, see Publish, PublishLast, and Replay.</source>
          <target state="translated">Мультикастинг уведомлений о последовательности источников через инстанцированную тему во все области использования последовательности в рамках функции селектора.Каждая подписка на результирующую последовательность вызывает отдельный многоадресный вызов,обнажая последовательность,возникающую в результате вызова функции селектора.Специализации с фиксированными типами объектов см.в разделах &quot;Публикация&quot;,&quot;ПубликацияLast&quot; и &quot;Воспроизведение&quot;.</target>
        </trans-unit>
        <trans-unit id="bb8e6af78f24c3295a681695d6c685323f1299b7" translate="yes" xml:space="preserve">
          <source>Multiple Observers</source>
          <target state="translated">Несколько наблюдателей</target>
        </trans-unit>
        <trans-unit id="80c3052d33ccdee15ffaaa110c5c39072495fe63" translate="yes" xml:space="preserve">
          <source>Never</source>
          <target state="translated">Never</target>
        </trans-unit>
        <trans-unit id="0585b757dc6dbc475abaf51189e264cf705ad5ab" translate="yes" xml:space="preserve">
          <source>Next is a &amp;ldquo;decision tree&amp;rdquo; that may help you choose the operator that is most appropriate to your use case.</source>
          <target state="translated">Далее идет &amp;laquo;дерево решений&amp;raquo;, которое может помочь вам выбрать оператор, наиболее подходящий для вашего варианта использования.</target>
        </trans-unit>
        <trans-unit id="84e3f31bfa79e71f9cfc2fa75de9fbcdde4a5353" translate="yes" xml:space="preserve">
          <source>Normally, an Observable that emits multiple items will do so by invoking its observer&amp;rsquo;s &lt;code&gt;onNext&lt;/code&gt; method for each such item. You can change this behavior, instructing the Observable to compose a &lt;code&gt;Set&lt;/code&gt; of these multiple items and then to invoke the observer&amp;rsquo;s &lt;code&gt;onNext&lt;/code&gt; method only once, passing it the entire &lt;code&gt;Set&lt;/code&gt;, by applying the &lt;code&gt;toSet&lt;/code&gt; operator to the Observable.</source>
          <target state="translated">Обычно Observable, который испускает несколько элементов, будет делать это, вызывая метод &lt;code&gt;onNext&lt;/code&gt; своего наблюдателя для каждого такого элемента. Вы можете изменить это поведение, указав Observable составить &lt;code&gt;Set&lt;/code&gt; из этих нескольких элементов, а затем вызвать метод наблюдателя &lt;code&gt;onNext&lt;/code&gt; только один раз, передав ему весь &lt;code&gt;Set&lt;/code&gt; , применив оператор &lt;code&gt;toSet&lt;/code&gt; к Observable.</target>
        </trans-unit>
        <trans-unit id="84fad6a13426002afd534f7e8aeacedc50a42e36" translate="yes" xml:space="preserve">
          <source>Normally, an Observable that emits multiple items will do so by invoking its observer&amp;rsquo;s &lt;code&gt;onNext&lt;/code&gt; method for each such item. You can change this behavior, instructing the Observable to compose a list of these multiple items and then to invoke the observer&amp;rsquo;s &lt;code&gt;onNext&lt;/code&gt; method only once, passing it the entire list, by applying the &lt;code&gt;toList&lt;/code&gt; operator to the Observable.</source>
          <target state="translated">Обычно Observable, который испускает несколько элементов, будет делать это, вызывая метод &lt;code&gt;onNext&lt;/code&gt; своего наблюдателя для каждого такого элемента. Вы можете изменить это поведение, указав Observable составить список из этих нескольких элементов, а затем вызвать метод наблюдателя &lt;code&gt;onNext&lt;/code&gt; только один раз, передав ему весь список, применив оператор &lt;code&gt;toList&lt;/code&gt; к Observable.</target>
        </trans-unit>
        <trans-unit id="392bfbdd328bc8aae9f2857dc6e67ffb95f857e0" translate="yes" xml:space="preserve">
          <source>Normally, an Observable that emits multiple items will do so by invoking its observer&amp;rsquo;s &lt;code&gt;onNext&lt;/code&gt; method for each such item. You can change this behavior, instructing the Observable to compose an array of these multiple items and then to invoke the observer&amp;rsquo;s &lt;code&gt;onNext&lt;/code&gt; method only once, passing it the entire array, by applying the &lt;code&gt;toArray&lt;/code&gt; operator to the Observable.</source>
          <target state="translated">Обычно Observable, который испускает несколько элементов, будет делать это, вызывая метод &lt;code&gt;onNext&lt;/code&gt; своего наблюдателя для каждого такого элемента. Вы можете изменить это поведение, указав Observable составить массив из этих нескольких элементов, а затем вызвать метод &lt;code&gt;onNext&lt;/code&gt; наблюдателя только один раз, передав ему весь массив, применив оператор &lt;code&gt;toArray&lt;/code&gt; к Observable.</target>
        </trans-unit>
        <trans-unit id="3deefe2c711ecb00b93c7e5db326f3ef20ac0231" translate="yes" xml:space="preserve">
          <source>Note that &lt;code&gt;delay&lt;/code&gt; will not time-shift an &lt;code&gt;onError&lt;/code&gt; notification in this fashion but it will forward such a notification immediately to its subscribers while dropping any pending &lt;code&gt;onNext&lt;/code&gt; notifications. It will however time shift an &lt;code&gt;onCompleted&lt;/code&gt; notification.</source>
          <target state="translated">Обратите внимание, что &lt;code&gt;delay&lt;/code&gt; не будет сдвигать по &lt;code&gt;onError&lt;/code&gt; уведомление onError таким образом, но он будет немедленно пересылать такое уведомление своим подписчикам, отбрасывая любые ожидающие уведомления &lt;code&gt;onNext&lt;/code&gt; . Однако он будет сдвигать по времени уведомление &lt;code&gt;onCompleted&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="f8e246560a3f2b7493f073c12fef65e4716df93b" translate="yes" xml:space="preserve">
          <source>Note that &lt;code&gt;onErrorFlatMap&lt;/code&gt; will not react to both errors generated by both Observables, but only to the single error passed along by &lt;code&gt;merge&lt;/code&gt;.</source>
          <target state="translated">Обратите внимание, что &lt;code&gt;onErrorFlatMap&lt;/code&gt; не будет реагировать на обе ошибки, сгенерированные обоими Observables, а только на одну ошибку, переданную &lt;code&gt;merge&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="2241ed250a727a5bb7fc3fcc6586c392dbcf7e51" translate="yes" xml:space="preserve">
          <source>Note that FlatMap&lt;em&gt;merges&lt;/em&gt; the emissions of these Observables, so that they may interleave.</source>
          <target state="translated">Обратите внимание, что FlatMap &lt;em&gt;объединяет&lt;/em&gt; выбросы этих Observables, так что они могут чередоваться.</target>
        </trans-unit>
        <trans-unit id="980380c68fa3c17741eea4960820e1e5d2062d45" translate="yes" xml:space="preserve">
          <source>Note that ObserveOn will forward an &lt;code&gt;onError&lt;/code&gt; termination notification immediately if it receives one, and will not wait for a slow-consuming observer to receive any not-yet-emitted items that it is aware of first. This may mean that the &lt;code&gt;onError&lt;/code&gt; notification jumps ahead of (and swallows) items emitted by the source Observable, as in the diagram above.</source>
          <target state="translated">Обратите внимание, что ObserveOn немедленно &lt;code&gt;onError&lt;/code&gt; уведомление о завершении onError, если оно его получит, и не будет ждать, пока медленно потребляющий наблюдатель получит какие-либо еще не отправленные элементы, о которых он знает первым. Это может означать, что уведомление &lt;code&gt;onError&lt;/code&gt; опережает (и поглощает) элементы, отправленные источником Observable, как на диаграмме выше.</target>
        </trans-unit>
        <trans-unit id="1f7f77ae8956f7497734095c32496fac1587a65d" translate="yes" xml:space="preserve">
          <source>Note that a &lt;code&gt;PublishSubject&lt;/code&gt; may begin emitting items immediately upon creation (unless you have taken steps to prevent this), and so there is a risk that one or more items may be lost between the time the Subject is created and the observer subscribes to it. If you need to guarantee delivery of all items from the source Observable, you&amp;rsquo;ll need either to form that Observable with &lt;a href=&quot;operators/create&quot;&gt;&lt;code&gt;Create&lt;/code&gt;&lt;/a&gt; so that you can manually reintroduce &amp;ldquo;cold&amp;rdquo; Observable behavior (checking to see that all observers have subscribed before beginning to emit items), or switch to using a &lt;code&gt;ReplaySubject&lt;/code&gt; instead.</source>
          <target state="translated">Обратите внимание, что &lt;code&gt;PublishSubject&lt;/code&gt; может начать генерировать элементы сразу после создания (если вы не предприняли шаги для предотвращения этого), и поэтому существует риск того, что один или несколько элементов могут быть потеряны между временем создания Subject и подписанием на него наблюдателя. Если вам нужно гарантировать доставку всех элементов из исходного Observable, вам нужно либо сформировать этот Observable с помощью &lt;a href=&quot;operators/create&quot;&gt; &lt;code&gt;Create&lt;/code&gt; ,&lt;/a&gt; чтобы вы могли вручную повторно ввести &amp;laquo;холодное&amp;raquo; поведение Observable (проверяя, чтобы все наблюдатели подписались, прежде чем начать выпускать элементы). ) или переключитесь на использование &lt;code&gt;ReplaySubject&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="7d831b08915c0603ab2418739858974669e79f2d" translate="yes" xml:space="preserve">
          <source>Note that if any of the individual Observables mapped to the items from the source Observable by &lt;code&gt;flatMap&lt;/code&gt; aborts by invoking &lt;code&gt;onError&lt;/code&gt;, the Observable produced by &lt;code&gt;flatMap&lt;/code&gt; will itself immediately abort and invoke &lt;code&gt;onError&lt;/code&gt;.</source>
          <target state="translated">Обратите внимание, что если какой-либо из отдельных Observable, сопоставленных с элементами из источника Observable с помощью &lt;code&gt;flatMap&lt;/code&gt; , прерывается &lt;code&gt;onError&lt;/code&gt; , Observable, созданный &lt;code&gt;flatMap&lt;/code&gt; , немедленно &lt;code&gt;onError&lt;/code&gt; и вызывает onError .</target>
        </trans-unit>
        <trans-unit id="22ff4a9d39aed41a6684af11838df1c90d98ff0b" translate="yes" xml:space="preserve">
          <source>Note that if the source Observable does not emit any items, &lt;code&gt;reduce&lt;/code&gt; will fail with an &lt;code&gt;IllegalArgumentException&lt;/code&gt;.</source>
          <target state="translated">Обратите внимание: если исходный Observable не испускает никаких элементов, &lt;code&gt;reduce&lt;/code&gt; завершится ошибкой с &lt;code&gt;IllegalArgumentException&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="89a1b53aac9603b4623f7eb328b1f964748e79ac" translate="yes" xml:space="preserve">
          <source>Note that if the source Observable has emitted no items since the last time it was sampled, the Observable that results from this operator will emit no item for that sampling period.</source>
          <target state="translated">Обратите внимание,что если источник &quot;Наблюдаемый&quot; не выделял никаких элементов с момента последней выборки,то оператор &quot;Наблюдаемый&quot;,получающий результаты от этого оператора,не выделяет ни одного элемента за этот период выборки.</target>
        </trans-unit>
        <trans-unit id="fda62ff0233be7f3ea6feb8f4c49897c98397589" translate="yes" xml:space="preserve">
          <source>Note that if the source Observable issues an &lt;code&gt;onError&lt;/code&gt; notification, Buffer will pass on this notification immediately without first emitting the buffer it is in the process of assembling, even if that buffer contains items that were emitted by the source Observable before it issued the error notification.</source>
          <target state="translated">Обратите внимание, что если источник Observable выдает уведомление &lt;code&gt;onError&lt;/code&gt; , Buffer передаст это уведомление немедленно, не создавая предварительно буфер, который находится в процессе сборки, даже если этот буфер содержит элементы, которые были отправлены источником Observable до того, как он выпустил уведомление об ошибке. .</target>
        </trans-unit>
        <trans-unit id="737d991023625cc60621ad665885141466949545" translate="yes" xml:space="preserve">
          <source>Note that if you pass &lt;code&gt;null&lt;/code&gt; to Just, it will return an Observable that &lt;em&gt;emits&lt;/em&gt;&lt;code&gt;null&lt;/code&gt; as an item. Do not make the mistake of assuming that this will return an empty Observable (one that emits no items at all). For that, you will need the &lt;a href=&quot;empty-never-throw&quot;&gt;Empty&lt;/a&gt; operator.</source>
          <target state="translated">Обратите внимание, что если вы передадите &lt;code&gt;null&lt;/code&gt; в Just, он вернет Observable, который &lt;em&gt;испускает &lt;/em&gt; &lt;code&gt;null&lt;/code&gt; как элемент. Не совершайте ошибку, предполагая, что это вернет пустой Observable (тот, который вообще не выдает никаких элементов). Для этого вам понадобится &lt;a href=&quot;empty-never-throw&quot;&gt;пустой&lt;/a&gt; оператор.</target>
        </trans-unit>
        <trans-unit id="bffe0f9f45c82fb7299935b79b3c0dbd1b4ec66c" translate="yes" xml:space="preserve">
          <source>Note that in this example, the resulting Observable completes normally after emitting three items, which is the number of items emitted by the shorter of the two component Observbles (&lt;code&gt;evens&lt;/code&gt;, which emits three items).</source>
          <target state="translated">Обратите внимание , что в этом примере, в результате Наблюдаемые завершается нормально после испускания три элемента, который является количество элементов , испускаемых наименьшего из двух компонентов Observbles ( &lt;code&gt;evens&lt;/code&gt; , который испускает три элемента).</target>
        </trans-unit>
        <trans-unit id="bbe9894c26aee7ccb515d8080eef59ca7221d4c6" translate="yes" xml:space="preserve">
          <source>Note that the function or Action will only be executed once, even if more than one observer subscribes to the resulting Observable.</source>
          <target state="translated">Обратите внимание,что функция или Действие будет выполнено только один раз,даже если несколько наблюдателей подписываются на полученный Наблюдатель.</target>
        </trans-unit>
        <trans-unit id="8f8ef75339c87aba9783c015133a68ac23c056ac" translate="yes" xml:space="preserve">
          <source>Note that the function will only be executed once, even if more than one observer subscribes to the resulting Observable.</source>
          <target state="translated">Обратите внимание,что функция будет выполняться только один раз,даже если несколько наблюдателей подписываются на полученный Наблюдатель.</target>
        </trans-unit>
        <trans-unit id="a7860a535df31358f374ffa0c8919204cd926a2f" translate="yes" xml:space="preserve">
          <source>Note that the last item emitted by the source Observable will be emitted in turn by this operator even if the source Observable&amp;rsquo;s &lt;code&gt;onCompleted&lt;/code&gt; notification is issued within the time window you specify since that item&amp;rsquo;s emission. That is to say: an &lt;code&gt;onCompleted&lt;/code&gt; notification will not trigger a throttle.</source>
          <target state="translated">Обратите внимание, что последний элемент, выпущенный источником Observable, будет по очереди выдан этим оператором, даже если уведомление &lt;code&gt;onCompleted&lt;/code&gt; исходного Observable выдается в пределах временного окна, которое вы указываете с момента передачи этого элемента. То есть: уведомление &lt;code&gt;onCompleted&lt;/code&gt; не вызывает дросселирования.</target>
        </trans-unit>
        <trans-unit id="d298392e4a4a8d8c960c9ef160ec5aeb5a52792b" translate="yes" xml:space="preserve">
          <source>Note that the mechanism by which this is implemented will delay the emission of any item from the source Observable until that Observable completes.</source>
          <target state="translated">Обратите внимание,что механизм,с помощью которого это осуществляется,откладывает выброс любого элемента из источника &quot;Наблюдаемый&quot; до тех пор,пока этот &quot;Наблюдаемый&quot; не завершит свою работу.</target>
        </trans-unit>
        <trans-unit id="6411be73ff33d352396f1d9d0fdca4781de79930" translate="yes" xml:space="preserve">
          <source>Note that the mechanism by which this is implemented will delay the emission of any item from the source Observable until the given duration passes since its emission.</source>
          <target state="translated">Обратите внимание,что механизм,с помощью которого это реализуется,задерживает выброс любого элемента из источника,наблюдаемого до тех пор,пока не пройдет заданная продолжительность с момента его выброса.</target>
        </trans-unit>
        <trans-unit id="98b2d3cd3670fa9702da3cf0b66514553d7e86a7" translate="yes" xml:space="preserve">
          <source>Note that there is also a &lt;code&gt;from&lt;/code&gt; operator that is a method of the optional &lt;code&gt;StringObservable&lt;/code&gt; class. It converts a stream of characters or a &lt;code&gt;Reader&lt;/code&gt; into an Observable that emits byte arrays or Strings.</source>
          <target state="translated">Обратите внимание, что существует также оператор &lt;code&gt;from&lt;/code&gt; , который является методом необязательного класса &lt;code&gt;StringObservable&lt;/code&gt; . Он преобразует поток символов или &lt;code&gt;Reader&lt;/code&gt; в Observable, который генерирует байтовые массивы или строки.</target>
        </trans-unit>
        <trans-unit id="d2d93abfd67e470a4be2687d21fed817ff2d861a" translate="yes" xml:space="preserve">
          <source>Note that there is also a &lt;code&gt;join&lt;/code&gt; operator in the optional &lt;code&gt;StringObservable&lt;/code&gt; class. It converts an Observable that emits a sequence of strings into an Observable that emits a single string that concatenates them all, separating them by a specified string delimiter.</source>
          <target state="translated">Обратите внимание , что есть также &lt;code&gt;join&lt;/code&gt; к оператору в дополнительном &lt;code&gt;StringObservable&lt;/code&gt; класса. Он преобразует Observable, который испускает последовательность строк, в Observable, который испускает одну строку, которая объединяет их все, разделяя их указанным разделителем строк.</target>
        </trans-unit>
        <trans-unit id="1e29c6aaea2044aa2bb7094b6f42e483250621d9" translate="yes" xml:space="preserve">
          <source>Note that this only works in an ES6 environment or polyfilled.</source>
          <target state="translated">Обратите внимание,что это работает только в среде ES6 или полизаполненной.</target>
        </trans-unit>
        <trans-unit id="be097aa718528f8c9a311fd5d7ed738450759bc2" translate="yes" xml:space="preserve">
          <source>Note that this will delay the emission of any item from the source Observable until the source Observable completes.</source>
          <target state="translated">Обратите внимание,что это задержит выброс любого элемента из источника &quot;Наблюдаемый&quot; до тех пор,пока источник &quot;Наблюдаемый&quot; не завершится.</target>
        </trans-unit>
        <trans-unit id="3d92eb084b01a561bfe4e3e7854584a593fdd208" translate="yes" xml:space="preserve">
          <source>Note that when &lt;code&gt;groupBy&lt;/code&gt; splits up the source Observable into an Observable that emits &lt;code&gt;GroupedObservable&lt;/code&gt;s, each of these &lt;code&gt;GroupedObservable&lt;/code&gt;s begins to buffer the items that it will emit upon subscription. For this reason, if you ignore any of these &lt;code&gt;GroupedObservable&lt;/code&gt;s (you neither subscribe to it or apply an operator to it that subscribes to it), this buffer will present a potential memory leak. For this reason, rather than ignoring a &lt;code&gt;GroupedObservable&lt;/code&gt; that you have no interest in observing, you should instead apply an operator like &lt;a href=&quot;take&quot;&gt;&lt;code&gt;take(0)&lt;/code&gt;&lt;/a&gt; to it as a way of signalling to it that it may discard its buffer.</source>
          <target state="translated">Обратите внимание, что когда &lt;code&gt;groupBy&lt;/code&gt; разделяет исходный Observable на Observable, который испускает &lt;code&gt;GroupedObservable&lt;/code&gt; , каждый из этих &lt;code&gt;GroupedObservable&lt;/code&gt; начинает буферизовать элементы, которые он будет генерировать при подписке. По этой причине, если вы игнорируете любой из этих &lt;code&gt;GroupedObservable&lt;/code&gt; (вы не подписываетесь на него и не применяете к нему оператор, который подписывается на него), этот буфер будет представлять потенциальную утечку памяти. По этой причине, вместо того, чтобы игнорировать &lt;code&gt;GroupedObservable&lt;/code&gt; , наблюдение за которым вам неинтересно, вы должны вместо этого применить к нему такой оператор, как &lt;a href=&quot;take&quot;&gt; &lt;code&gt;take(0)&lt;/code&gt; &lt;/a&gt; как способ сообщить ему, что он может сбросить свой буфер.</target>
        </trans-unit>
        <trans-unit id="723b7e62bb2f757b6991848d7e4ce20aae896233" translate="yes" xml:space="preserve">
          <source>Note that you should apply &lt;code&gt;onErrorFlatMap&lt;/code&gt; directly to the pathological source Observable, and not to that Observable after it has been modified by additional operators, as such operators may effectively renormalize the source Observable by unsubscribing from it immediately after it issues an error. Above, for example, is an illustration showing how &lt;code&gt;onErrorFlatMap&lt;/code&gt; will respond to two error-generating Observables that have been merged by the &lt;a href=&quot;merge&quot;&gt;Merge&lt;/a&gt; operator:</source>
          <target state="translated">Обратите внимание, что вы должны применить &lt;code&gt;onErrorFlatMap&lt;/code&gt; непосредственно к патологическому источнику Observable, а не к этому Observable после того, как он был изменен дополнительными операторами, поскольку такие операторы могут эффективно перенормировать источник Observable, отказавшись от подписки на него сразу после того, как он выдает ошибку. Выше, например, приведена иллюстрация, показывающая, как &lt;code&gt;onErrorFlatMap&lt;/code&gt; будет реагировать на два вызывающих ошибки Observable, которые были объединены оператором &lt;a href=&quot;merge&quot;&gt;Merge&lt;/a&gt; :</target>
        </trans-unit>
        <trans-unit id="753a22b2eb617204efee4644795034b8ace1ee14" translate="yes" xml:space="preserve">
          <source>Notifications</source>
          <target state="translated">Notifications</target>
        </trans-unit>
        <trans-unit id="c05a035376852df74a7bf98f85185ed3263ba77b" translate="yes" xml:space="preserve">
          <source>Objects of the &lt;code&gt;Worker&lt;/code&gt; class implement &lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/Subscription.html&quot;&gt;the &lt;code&gt;Subscription&lt;/code&gt; interface&lt;/a&gt;, with its &lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/Subscription.html#isUnsubscribed()&quot;&gt;&lt;code&gt;isUnsubscribed&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/Subscription.html#unsubscribe()&quot;&gt;&lt;code&gt;unsubscribe&lt;/code&gt;&lt;/a&gt; methods, so you can stop work when a subscription is cancelled, or you can cancel the subscription from within the scheduled task:</source>
          <target state="translated">Объекты &lt;code&gt;Worker&lt;/code&gt; класса реализации &lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/Subscription.html&quot;&gt;в &lt;code&gt;Subscription&lt;/code&gt; интерфейс&lt;/a&gt; , с его &lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/Subscription.html#isUnsubscribed()&quot;&gt; &lt;code&gt;isUnsubscribed&lt;/code&gt; &lt;/a&gt; и &lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/Subscription.html#unsubscribe()&quot;&gt; &lt;code&gt;unsubscribe&lt;/code&gt; &lt;/a&gt; методами, так что вы можете остановить работу при отмене подписки, или вы можете отменить подписку внутри запланированной задачи:</target>
        </trans-unit>
        <trans-unit id="c92258fa87a7fd87bfb0eac39b2cad3876c1531d" translate="yes" xml:space="preserve">
          <source>Observable</source>
          <target state="translated">Observable</target>
        </trans-unit>
        <trans-unit id="dead403537296d5d044ab2afa58d05dcc1cf11ed" translate="yes" xml:space="preserve">
          <source>Observable (push)</source>
          <target state="translated">Наблюдаемый (толчок)</target>
        </trans-unit>
        <trans-unit id="5849a76583e44e98972a069fac734407c3de193a" translate="yes" xml:space="preserve">
          <source>Observable Termination</source>
          <target state="translated">Соблюдаемое прекращение</target>
        </trans-unit>
        <trans-unit id="287945fe0d3db7085391bbb8c289cf211c7aba7f" translate="yes" xml:space="preserve">
          <source>Observable Utility Operators</source>
          <target state="translated">Наблюдаемые операторы коммунальных сетей</target>
        </trans-unit>
        <trans-unit id="55b043fdccf72e313143bbfc410beb069596729d" translate="yes" xml:space="preserve">
          <source>Observables Are Composable</source>
          <target state="translated">Наблюдатели являются составными</target>
        </trans-unit>
        <trans-unit id="22ae4a1aadbceb342ae7d762a8b5936b1a9c7dff" translate="yes" xml:space="preserve">
          <source>Observables Are Flexible</source>
          <target state="translated">Наблюдатели гибкие</target>
        </trans-unit>
        <trans-unit id="bb6b26cbb72553bbc4e55a12cfd2642db0bc0b7c" translate="yes" xml:space="preserve">
          <source>Observables Are Less Opinionated</source>
          <target state="translated">Наблюдатели менее убедительны</target>
        </trans-unit>
        <trans-unit id="ee393d26ff4346dda3c3cc98092b563a441ecbe8" translate="yes" xml:space="preserve">
          <source>Observables and observers are only the start of ReactiveX. By themselves they&amp;rsquo;d be nothing more than a slight extension of the standard observer pattern, better suited to handling a sequence of events rather than a single callback.</source>
          <target state="translated">Наблюдатели и наблюдатели - это только начало ReactiveX. Сами по себе они были бы не чем иным, как небольшим расширением стандартного шаблона наблюдателя, более подходящим для обработки последовательности событий, а не одного обратного вызова.</target>
        </trans-unit>
        <trans-unit id="60c7b2cb3f525cce571679d340d7c5f044b66409" translate="yes" xml:space="preserve">
          <source>Observables fill the gap by being the ideal way to access asynchronous sequences of multiple items</source>
          <target state="translated">Наблюдатели заполняют пробел,являясь идеальным способом доступа к асинхронным последовательностям множества элементов</target>
        </trans-unit>
        <trans-unit id="5647aeba882496c026e31292a2ab3562d8e045a3" translate="yes" xml:space="preserve">
          <source>Observables must issue notifications to observers serially (not in parallel). They may issue these notifications from different threads, but there must be a formal</source>
          <target state="translated">Наблюдатели должны подавать уведомления наблюдателям серийно (а не параллельно).Они могут выдавать эти уведомления из разных потоков,но должны быть формальные</target>
        </trans-unit>
        <trans-unit id="3bc4916d948175a6a4c4c5924eb79d750f37a31b" translate="yes" xml:space="preserve">
          <source>ObserveOn</source>
          <target state="translated">ObserveOn</target>
        </trans-unit>
        <trans-unit id="6af4431ee6a5e5d3925ab95a067db83545e4e1af" translate="yes" xml:space="preserve">
          <source>OnCompleted</source>
          <target state="translated">OnCompleted</target>
        </trans-unit>
        <trans-unit id="1ec9c77019b9c571c284d11d62850d0be7f7d725" translate="yes" xml:space="preserve">
          <source>OnError</source>
          <target state="translated">OnError</target>
        </trans-unit>
        <trans-unit id="f15d90156aca19295b6fc0fdbc4cd5683b9c2a8c" translate="yes" xml:space="preserve">
          <source>OnNext</source>
          <target state="translated">OnNext</target>
        </trans-unit>
        <trans-unit id="7ed1347ff548c1117a94c66e563584615555104b" translate="yes" xml:space="preserve">
          <source>OnSubscribe</source>
          <target state="translated">OnSubscribe</target>
        </trans-unit>
        <trans-unit id="124b157ab3498925ab139f0f21da44803d11b704" translate="yes" xml:space="preserve">
          <source>OnSubscribe (optional)</source>
          <target state="translated">OnSubscribe (опционально)</target>
        </trans-unit>
        <trans-unit id="cb0e67f1be08a53d2751e4bb4f937cefb28e8ccd" translate="yes" xml:space="preserve">
          <source>One variant of &lt;code&gt;Retry&lt;/code&gt; takes no parameters. It will continue to resubscribe to and mirror the source Observable no matter how many &lt;code&gt;onError&lt;/code&gt; notifications it receives.</source>
          <target state="translated">Один вариант &lt;code&gt;Retry&lt;/code&gt; не требует параметров. Он продолжит повторную подписку и зеркальное отображение исходного Observable независимо от того, сколько уведомлений &lt;code&gt;onError&lt;/code&gt; он получит.</target>
        </trans-unit>
        <trans-unit id="92b09374767e4656d9c2097b2ac8a23089612893" translate="yes" xml:space="preserve">
          <source>One variant of &lt;code&gt;retry&lt;/code&gt; takes no parameters. It will continue to resubscribe to and mirror the source Observable no matter how many &lt;code&gt;onError&lt;/code&gt; notifications it receives.</source>
          <target state="translated">Один вариант &lt;code&gt;retry&lt;/code&gt; требует параметров. Он продолжит повторную подписку и зеркальное отображение исходного Observable независимо от того, сколько уведомлений &lt;code&gt;onError&lt;/code&gt; он получит.</target>
        </trans-unit>
        <trans-unit id="86cb2e8c5f0b5be8f3d867b3ffe2e7933a110703" translate="yes" xml:space="preserve">
          <source>One variant of &lt;code&gt;sample&lt;/code&gt; (or its alias, &lt;code&gt;throttleLast&lt;/code&gt;) samples at a periodic time interval that you choose by passing in a &lt;code&gt;TimeUnit&lt;/code&gt; and a quantity of such units as parameters to &lt;code&gt;sample&lt;/code&gt;.</source>
          <target state="translated">Один вариант &lt;code&gt;sample&lt;/code&gt; (или его псевдоним &lt;code&gt;throttleLast&lt;/code&gt; ) сэмплирует с периодическим интервалом времени, который вы выбираете, передав &lt;code&gt;TimeUnit&lt;/code&gt; и количество таких единиц в качестве параметров для &lt;code&gt;sample&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="2a6cd9d2b030a97e42e751551442c2e4d9fba089" translate="yes" xml:space="preserve">
          <source>One variant of &lt;code&gt;throtleWithTimeout&lt;/code&gt;/&lt;code&gt;debounce&lt;/code&gt; (two names for the same operator variant) throttles at a periodic time interval that you choose by passing in a &lt;code&gt;TimeUnit&lt;/code&gt; and a quantity of such units as parameters to the operator.</source>
          <target state="translated">Один вариант &lt;code&gt;throtleWithTimeout&lt;/code&gt; / &lt;code&gt;debounce&lt;/code&gt; (два имени для одного и того же варианта оператора) дросселирует с периодическим интервалом времени, который вы выбираете, передавая &lt;code&gt;TimeUnit&lt;/code&gt; и количество таких единиц в качестве параметров оператору.</target>
        </trans-unit>
        <trans-unit id="e01cf64af4cd67cb0bf6a3083b3f894754959ba3" translate="yes" xml:space="preserve">
          <source>One variant of &lt;code&gt;timeout&lt;/code&gt; accepts a duration of time (in milliseconds). Each time the source Observable emits an item, &lt;code&gt;timeout&lt;/code&gt; starts a timer, and if that timer exceeds the duration before the source Observable emits another item, &lt;code&gt;timeout&lt;/code&gt; terminates its Observable with an error (&amp;ldquo;&lt;code&gt;Timeout&lt;/code&gt;&amp;rdquo; or a string of your choice that you pass as an optional second parameter).</source>
          <target state="translated">Один вариант &lt;code&gt;timeout&lt;/code&gt; принимает продолжительность времени (в миллисекундах). Каждый раз, когда исходный Observable испускает элемент, &lt;code&gt;timeout&lt;/code&gt; запускает таймер, и если этот таймер превышает продолжительность до того, как исходный Observable испускает другой элемент, &lt;code&gt;timeout&lt;/code&gt; завершает его Observable с ошибкой (&amp;laquo; &lt;code&gt;Timeout&lt;/code&gt; &amp;raquo; или строка по вашему выбору, которую вы передаете как необязательный второй параметр).</target>
        </trans-unit>
        <trans-unit id="c643e84221b883407df608c6356e9da8ef624697" translate="yes" xml:space="preserve">
          <source>One version of merge takes a Single that emits a second Single and converts it into a Single that emits the item emitted by that second Single:</source>
          <target state="translated">Один вариант слияния берет сингл,который испускает второй сингл,и преобразует его в сингл,который испускает элемент,испускаемый этим вторым синглом:</target>
        </trans-unit>
        <trans-unit id="d1077ecec7218cd8512804114548524bd2dcc605" translate="yes" xml:space="preserve">
          <source>Open interactive diagram on rxmarbles.com</source>
          <target state="translated">Открытая интерактивная диаграмма на rxmarbles.com</target>
        </trans-unit>
        <trans-unit id="7c1d97d1a43b0d0d897f01365e85f5d37c576cb7" translate="yes" xml:space="preserve">
          <source>Operators By Category</source>
          <target state="translated">Операторы по категориям</target>
        </trans-unit>
        <trans-unit id="5813a39dd7e14b4b6b82ef9f0683c793f1610fd1" translate="yes" xml:space="preserve">
          <source>Operators that evaluate one or more Observables or items emitted by Observables</source>
          <target state="translated">Операторы,которые оценивают один или несколько Наблюдателей или предметов,выбрасываемых Наблюдателями.</target>
        </trans-unit>
        <trans-unit id="239cd85f34d402d18e743f73c0cc9849666626e3" translate="yes" xml:space="preserve">
          <source>Operators that help to recover from error notifications from an Observable</source>
          <target state="translated">Операторы,которые помогают восстанавливаться после уведомления об ошибках от Наблюдателя</target>
        </trans-unit>
        <trans-unit id="53fce20d02f25e517ffe96344cffb9f84f528127" translate="yes" xml:space="preserve">
          <source>Operators that operate on the entire sequence of items emitted by an Observable</source>
          <target state="translated">Операторы,которые работают со всей последовательностью элементов,излучаемых Наблюдателем</target>
        </trans-unit>
        <trans-unit id="e790ccc7ead4c1e44d97dd91d3e07ef94bc3f187" translate="yes" xml:space="preserve">
          <source>Operators that originate new Observables.</source>
          <target state="translated">Операторы,которые создают новые Наблюдатели.</target>
        </trans-unit>
        <trans-unit id="5e3655defa4f89cd3c91d0aff090ba417203a920" translate="yes" xml:space="preserve">
          <source>Operators that selectively emit items from a source Observable.</source>
          <target state="translated">Операторы,селективно излучающие предметы из источника Наблюдаемый.</target>
        </trans-unit>
        <trans-unit id="b6db7529413d0ee54b22d8c8eeae1bdf8b1bbd90" translate="yes" xml:space="preserve">
          <source>Operators that transform items that are emitted by an Observable.</source>
          <target state="translated">Операторы,которые преобразуют элементы,излучаемые наблюдателем.</target>
        </trans-unit>
        <trans-unit id="d303d928498731e8f65d8ed1b7a95f057e2c8c66" translate="yes" xml:space="preserve">
          <source>Operators that work with multiple source Observables to create a single Observable</source>
          <target state="translated">Операторы,которые работают с несколькими источниками Наблюдатели для создания одного Наблюдателя</target>
        </trans-unit>
        <trans-unit id="6a0f09746f9f899243e77b4e6b4ebbc22b9fb784" translate="yes" xml:space="preserve">
          <source>Operators to Convert Observables</source>
          <target state="translated">Операторы для преобразования наблюдений</target>
        </trans-unit>
        <trans-unit id="66f29d7776b7cbdf6037a351a58f915c82a608cd" translate="yes" xml:space="preserve">
          <source>Or you could choose to emit a new window of items for every</source>
          <target state="translated">Или вы можете выбрать,чтобы издать новое окно элементов для каждого</target>
        </trans-unit>
        <trans-unit id="972a4f6c0c64b91746929ee0434a53edd3755def" translate="yes" xml:space="preserve">
          <source>Or you could get fancy, and collect items in buffers during the bursty periods and emit them at the end of each burst, by using the &lt;a href=&quot;debounce&quot;&gt;Debounce&lt;/a&gt; operator to emit a buffer closing indicator to the buffer operator.</source>
          <target state="translated">Или вы можете пофантазировать и собирать элементы в буферах во время периодов всплеска и выдавать их в конце каждого всплеска, используя оператор &lt;a href=&quot;debounce&quot;&gt;Debounce,&lt;/a&gt; чтобы передать индикатор закрытия буфера оператору буфера.</target>
        </trans-unit>
        <trans-unit id="caa4857a99d5df64990c4dbb7953791002ad4ddf" translate="yes" xml:space="preserve">
          <source>Or, something like this:</source>
          <target state="translated">Или что-то вроде этого:</target>
        </trans-unit>
        <trans-unit id="77d1ad4dcf6e5a083ee7d2a87aae1f6dccc07ae7" translate="yes" xml:space="preserve">
          <source>Other Considerations</source>
          <target state="translated">Другие соображения</target>
        </trans-unit>
        <trans-unit id="b7572f0eec783aa1659c103e63e5d73f1c579fe1" translate="yes" xml:space="preserve">
          <source>Pass &lt;code&gt;runAsync&lt;/code&gt; an &lt;code&gt;Action&lt;/code&gt; and a &lt;a href=&quot;../scheduler&quot;&gt;&lt;code&gt;Scheduler&lt;/code&gt;&lt;/a&gt;, and it will return a &lt;code&gt;StoppableObservable&lt;/code&gt; that uses the specified &lt;code&gt;Action&lt;/code&gt; to generate items that it emits. The &lt;code&gt;Action&lt;/code&gt; accepts an &lt;code&gt;Observer&lt;/code&gt; and a &lt;code&gt;Subscription&lt;/code&gt;. It uses the &lt;code&gt;Subscription&lt;/code&gt; to check for the &lt;code&gt;unsubscribed&lt;/code&gt; condition, upon which it will stop emitting items. You can also manually stop a &lt;code&gt;StoppableObservable&lt;/code&gt; at any time by calling its &lt;code&gt;unsubscribe&lt;/code&gt; method (which will also unsubscribe the &lt;code&gt;Subscription&lt;/code&gt; you have associated with the &lt;code&gt;StoppableObservable&lt;/code&gt;).</source>
          <target state="translated">Pass &lt;code&gt;runAsync&lt;/code&gt; &lt;code&gt;Action&lt;/code&gt; и &lt;a href=&quot;../scheduler&quot;&gt; &lt;code&gt;Scheduler&lt;/code&gt; &lt;/a&gt; , и он будет возвращать &lt;code&gt;StoppableObservable&lt;/code&gt; , который использует указанный &lt;code&gt;Action&lt;/code&gt; для создания предметов , которые он излучает. &lt;code&gt;Action&lt;/code&gt; принимает &lt;code&gt;Observer&lt;/code&gt; и &lt;code&gt;Subscription&lt;/code&gt; . Он использует &lt;code&gt;Subscription&lt;/code&gt; для проверки условия &lt;code&gt;unsubscribed&lt;/code&gt; от подписки , после чего прекращает отправку элементов. Вы также можете вручную остановить &lt;code&gt;StoppableObservable&lt;/code&gt; в любое время, вызвав его метод отказа от &lt;code&gt;unsubscribe&lt;/code&gt; (который также &lt;code&gt;StoppableObservable&lt;/code&gt; &lt;code&gt;Subscription&lt;/code&gt; вы связали с StoppableObservable).</target>
        </trans-unit>
        <trans-unit id="f82db6aff34416a6d9eb42ed4e910b35316bdd15" translate="yes" xml:space="preserve">
          <source>Pass &lt;code&gt;sequenceEqual&lt;/code&gt; two Observables, and it will compare the items emitted by each Observable, and the Observable it returns will emit &lt;code&gt;true&lt;/code&gt; only if both sequences terminate normally after emitting the same sequence of items in the same order; otherwise it will emit &lt;code&gt;false&lt;/code&gt;. You can optionally pass a third parameter: a function that accepts two items and returns &lt;code&gt;true&lt;/code&gt; if they are equal according to a standard of your choosing.</source>
          <target state="translated">Передайте &lt;code&gt;sequenceEqual&lt;/code&gt; two Observable, и он сравнит элементы, испускаемые каждым Observable, и Observable, который он возвращает, будет выдавать &lt;code&gt;true&lt;/code&gt; только в том случае, если обе последовательности завершаются нормально после испускания одной и той же последовательности элементов в том же порядке; в противном случае будет выдано &lt;code&gt;false&lt;/code&gt; . При желании вы можете передать третий параметр: функцию, которая принимает два элемента и возвращает &lt;code&gt;true&lt;/code&gt; , если они равны согласно выбранному вами стандарту.</target>
        </trans-unit>
        <trans-unit id="99a08298daed86535aab518ecdad7069bf75ace2" translate="yes" xml:space="preserve">
          <source>Pass SequenceEqual two Observables, and it will compare the items emitted by each Observable, and the Observable it returns will emit &lt;code&gt;true&lt;/code&gt; only if both sequences are the same (the same items, in the same order, with the same termination state).</source>
          <target state="translated">Передайте SequenceEqual два Observable, и он будет сравнивать элементы, испускаемые каждым Observable, и Observable, который он возвращает, будет выдавать &lt;code&gt;true&lt;/code&gt; только в том случае, если обе последовательности одинаковы (те же элементы, в том же порядке, с одинаковым состоянием завершения).</target>
        </trans-unit>
        <trans-unit id="5963815474f8068270a23f44af0ba64d46f46627" translate="yes" xml:space="preserve">
          <source>Pass a predicate function to the All operator that accepts an item emitted by the source Observable and returns a boolean value based on an evaluation of that item. All returns an Observable that emits a single boolean value: &lt;code&gt;true&lt;/code&gt; if and only if the source Observable terminates normally and every item emitted by the source Observable evaluated as &lt;code&gt;true&lt;/code&gt; according to this predicate; &lt;code&gt;false&lt;/code&gt; if any item emitted by the source Observable evaluates as &lt;code&gt;false&lt;/code&gt; according to this predicate.</source>
          <target state="translated">Передайте функцию предиката оператору All, который принимает элемент, созданный исходным Observable, и возвращает логическое значение на основе оценки этого элемента. All возвращает Observable, который испускает одно логическое значение: &lt;code&gt;true&lt;/code&gt; тогда и только тогда, когда исходный Observable завершается нормально, и каждый элемент, излучаемый исходным Observable, оценивается как &lt;code&gt;true&lt;/code&gt; в соответствии с этим предикатом; &lt;code&gt;false&lt;/code&gt; , если какой-либо элемент, излучаемый источником Observable, оценивается как &lt;code&gt;false&lt;/code&gt; в соответствии с этим предикатом.</target>
        </trans-unit>
        <trans-unit id="8c99c468e2d65d5efd37c00bf73e4e878b7d9d0a" translate="yes" xml:space="preserve">
          <source>Pass the Contains operator a particular item, and the Observable it returns will emit &lt;code&gt;true&lt;/code&gt; if that item is emitted by the source Observable, or &lt;code&gt;false&lt;/code&gt; if the source Observable terminates without emitting that item.</source>
          <target state="translated">Передайте оператору Contains конкретный элемент, и Observable, который он возвращает, будет выдавать &lt;code&gt;true&lt;/code&gt; , если этот элемент испускается исходным Observable, или &lt;code&gt;false&lt;/code&gt; , если исходный Observable завершается без испускания этого элемента.</target>
        </trans-unit>
        <trans-unit id="a9c4bea587f71c22348bd2acef47ce24e0eee533" translate="yes" xml:space="preserve">
          <source>Prepends a sequence of values to an observable sequence with an argument of an array of values to prepend.</source>
          <target state="translated">Предварительно подготавливает последовательность значений к наблюдаемой последовательности с аргументом массива значений.</target>
        </trans-unit>
        <trans-unit id="af2cb834226d1be0aeedd2c6e1631de03794a032" translate="yes" xml:space="preserve">
          <source>Prepends a value to an observable sequence with an argument of a signal value to prepend.</source>
          <target state="translated">Предварительно подготавливает значение к наблюдаемой последовательности с аргументом значения сигнала.</target>
        </trans-unit>
        <trans-unit id="239a7312a8ef96acac8d433d75bccef64f64ecb3" translate="yes" xml:space="preserve">
          <source>Projects each element of an observable sequence into zero or more buffers which are produced based on element count information.</source>
          <target state="translated">Проецирует каждый элемент наблюдаемой последовательности в нулевой или более буферов,которые создаются на основе информации о количестве элементов.</target>
        </trans-unit>
        <trans-unit id="13710a22fdc40eb2193d7fc0469d55af2f857964" translate="yes" xml:space="preserve">
          <source>Projects each element of an observable sequence to an observable sequence and concatenates the resulting observable sequences into one observable sequence.</source>
          <target state="translated">Проецирует каждый элемент наблюдаемой последовательности на наблюдаемую последовательность и объединяет полученные наблюдаемые последовательности в одну наблюдаемую последовательность.</target>
        </trans-unit>
        <trans-unit id="0711543c0a6df55c098eebde45a7a7f0eb15706a" translate="yes" xml:space="preserve">
          <source>Projects each element of an observable sequence to an observable sequence and merges the resulting observable sequences into one observable sequence.</source>
          <target state="translated">Проецирует каждый элемент наблюдаемой последовательности на наблюдаемую последовательность и объединяет полученные наблюдаемые последовательности в одну наблюдаемую последовательность.</target>
        </trans-unit>
        <trans-unit id="bd49e6320190a1a8b76a7a063fd534a0f422a98f" translate="yes" xml:space="preserve">
          <source>Projects each element of the source observable sequence to the other observable sequence and merges the resulting observable sequences into one observable sequence.</source>
          <target state="translated">Проецирует каждый элемент наблюдаемой последовательности источника на другую наблюдаемую последовательность и объединяет полученные наблюдаемые последовательности в одну наблюдаемую последовательность.</target>
        </trans-unit>
        <trans-unit id="b9ad9a17bfae8f5b1538fa36bcb40bf68b62fb85" translate="yes" xml:space="preserve">
          <source>Propagates the observable sequence that reacts first. Also known as 'amb'.</source>
          <target state="translated">Распространяется наблюдаемая последовательность,которая реагирует первой.Также известен как &quot;засада&quot;.</target>
        </trans-unit>
        <trans-unit id="5656400564f25dcbe129f43deea78952060bee36" translate="yes" xml:space="preserve">
          <source>Publish</source>
          <target state="translated">Publish</target>
        </trans-unit>
        <trans-unit id="563353d4bbf7a3ce852f3a31b6f2c0a3db380bce" translate="yes" xml:space="preserve">
          <source>PublishLast</source>
          <target state="translated">PublishLast</target>
        </trans-unit>
        <trans-unit id="4d6e9dae1663009dad11daa532cffeb416f75080" translate="yes" xml:space="preserve">
          <source>PublishSubject</source>
          <target state="translated">PublishSubject</target>
        </trans-unit>
        <trans-unit id="a16c5bbe4bf996740f257aa1e81bd57e4c52c8dd" translate="yes" xml:space="preserve">
          <source>Range</source>
          <target state="translated">Range</target>
        </trans-unit>
        <trans-unit id="c362b24f82f04c2eff34e3078226362d4aa1b47c" translate="yes" xml:space="preserve">
          <source>Reactive Programming</source>
          <target state="translated">Реактивное программирование</target>
        </trans-unit>
        <trans-unit id="5ea54b00cbcbe30e43a7fb1e53369508f18ef861" translate="yes" xml:space="preserve">
          <source>ReactiveX</source>
          <target state="translated">ReactiveX</target>
        </trans-unit>
        <trans-unit id="66f20c80762e6bcc40fadcaabdd3b37de491964b" translate="yes" xml:space="preserve">
          <source>ReactiveX Is a Polyglot Implementation</source>
          <target state="translated">ReactiveX является реализацией полиглота.</target>
        </trans-unit>
        <trans-unit id="383d40d321e45f752836e49ca4d195f2d398fa0b" translate="yes" xml:space="preserve">
          <source>ReactiveX Observables support not just the emission of single scalar values (as Futures do), but also of sequences of values or even infinite streams. &lt;code&gt;Observable&lt;/code&gt; is a single abstraction that can be used for any of these use cases. An Observable has all of the flexibility and elegance associated with its mirror-image cousin the Iterable.</source>
          <target state="translated">ReactiveX Observables поддерживает не только выдачу одиночных скалярных значений (как это делают Futures), но также последовательностей значений или даже бесконечных потоков. &lt;code&gt;Observable&lt;/code&gt; - это единственная абстракция, которую можно использовать для любого из этих вариантов использования. Observable обладает всей гибкостью и элегантностью, присущей его зеркальному кузену Iterable.</target>
        </trans-unit>
        <trans-unit id="3c0c64c232eb30ef31a6304e4a4ac0112ba8044d" translate="yes" xml:space="preserve">
          <source>ReactiveX Observables, on the other hand, are &lt;em&gt;intended&lt;/em&gt; for &lt;a href=&quot;https://github.com/Netflix/RxJava/wiki/How-To-Use#composition&quot;&gt;composing flows and sequences of asynchronous data&lt;/a&gt;.</source>
          <target state="translated">ReactiveX Observables, с другой стороны, &lt;em&gt;предназначены&lt;/em&gt; для &lt;a href=&quot;https://github.com/Netflix/RxJava/wiki/How-To-Use#composition&quot;&gt;составления потоков и последовательностей асинхронных данных&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="5bae8422ed5dae151f248563aa8e4f695edd564b" translate="yes" xml:space="preserve">
          <source>ReactiveX is a library for composing asynchronous and event-based programs by using observable sequences.</source>
          <target state="translated">ReactiveX-это библиотека для составления асинхронных и событийных программ с использованием наблюдаемых последовательностей.</target>
        </trans-unit>
        <trans-unit id="0dd32fb104d588cdf33f43e26eb886270a5105ec" translate="yes" xml:space="preserve">
          <source>ReactiveX is currently implemented in a variety of languages, in ways that respect those languages&amp;rsquo; idioms, and more languages are being added at a rapid clip.</source>
          <target state="translated">ReactiveX в настоящее время реализован на множестве языков с учетом идиом этих языков, и быстро добавляются новые языки.</target>
        </trans-unit>
        <trans-unit id="e63e270b678daedd878cf2bf75b1ce7aec688a11" translate="yes" xml:space="preserve">
          <source>ReactiveX is not biased toward some particular source of concurrency or asynchronicity. Observables can be implemented using thread-pools, event loops, non-blocking I/O, actors (such as from Akka), or whatever implementation suits your needs, your style, or your expertise. Client code treats all of its interactions with Observables as asynchronous, whether your underlying implementation is blocking or non-blocking and however you choose to implement it.</source>
          <target state="translated">ReactiveX не предвзято относится к какому-либо конкретному источнику параллельности или асинхроничности.Наблюдатели могут быть реализованы с использованием потоковых полюсов,циклов обработки событий,неблокирующего ввода/вывода,акторов (например,от Akka),или любой другой реализации,соответствующей вашим потребностям,вашему стилю или вашим знаниям и опыту.Клиентский код рассматривает все свои взаимодействия с &quot;Наблюдателями&quot; как асинхронные,независимо от того,является ли ваша базовая реализация блокирующей или неблокирующей,и как бы вы ни выбрали ее реализацию.</target>
        </trans-unit>
        <trans-unit id="51e3aeaa4941e564afa374f5588f3efb19227aa8" translate="yes" xml:space="preserve">
          <source>ReactiveX provides &lt;a href=&quot;documentation/operators&quot;&gt;a collection of operators&lt;/a&gt; with which you can filter, select, transform, combine, and compose Observables. This allows for efficient execution and composition.</source>
          <target state="translated">ReactiveX предоставляет &lt;a href=&quot;documentation/operators&quot;&gt;набор операторов,&lt;/a&gt; с помощью которых вы можете фильтровать, выбирать, преобразовывать, комбинировать и составлять Observables. Это обеспечивает эффективное исполнение и композицию.</target>
        </trans-unit>
        <trans-unit id="5aacc470f55105f1b52f1008ceaf9204e0c52762" translate="yes" xml:space="preserve">
          <source>Receives an Observable of Observables and propagates the first Observable exclusively until it completes before it begins subscribes to the next Observable. Observables that come before the current Observable completes will be dropped and will not propagate. This operator is similar to concatAll() except that it will not hold onto Observables that come in before the current one is finished completed.</source>
          <target state="translated">Получает Наблюдателя и распространяет первый Наблюдатель исключительно до тех пор,пока он не завершит свою работу,прежде чем начать подписываться на следующий Наблюдатель.Наблюдаемые,которые приходят до завершения текущего Наблюдаемый будет сброшен и не будет распространяться.Этот оператор похож на concatAll()за исключением того,что он не будет удерживать Observables,которые появляются до завершения текущего.</target>
        </trans-unit>
        <trans-unit id="a2677bc0b6b30d5b993eb8845633a1d75ad446d9" translate="yes" xml:space="preserve">
          <source>Records the timestamp for each value in an observable sequence.</source>
          <target state="translated">Записывает временную метку для каждого значения в наблюдаемой последовательности.</target>
        </trans-unit>
        <trans-unit id="5b704d38ab23b4eab2308cb7062f931939cca29d" translate="yes" xml:space="preserve">
          <source>Recursive Schedulers</source>
          <target state="translated">Рекурсивные планировщики</target>
        </trans-unit>
        <trans-unit id="0f62a19eebe00dd0d30914b3390d1fb624f823b3" translate="yes" xml:space="preserve">
          <source>Reduce</source>
          <target state="translated">Reduce</target>
        </trans-unit>
        <trans-unit id="1fc985c4c8bf7da355c3b609bdb089a400f9ac2f" translate="yes" xml:space="preserve">
          <source>RefCount</source>
          <target state="translated">RefCount</target>
        </trans-unit>
        <trans-unit id="659eba121958f4a29fab3d29d61cedc55a892334" translate="yes" xml:space="preserve">
          <source>Repeat</source>
          <target state="translated">Repeat</target>
        </trans-unit>
        <trans-unit id="9fb957ac6693e6a050d6d3d6d354c43ff89c264a" translate="yes" xml:space="preserve">
          <source>Repeats the source observable sequence on error when the notifier emits a next value. If the source observable errors and the notifier completes, it will complete the source sequence.</source>
          <target state="translated">Повторяет наблюдаемую источником последовательность при ошибке,когда нотификатор выдает следующее значение.Если наблюдаемые источники ошибок и нотификатор завершается,он завершает последовательность источников.</target>
        </trans-unit>
        <trans-unit id="a3774f613568f94d09dd3dfb4e0e93a525908c68" translate="yes" xml:space="preserve">
          <source>Repeats the source observable sequence the specified number of times or until it successfully terminates. If the retry count is not specified, it retries indefinitely. Note if you encounter an error and want it to retry once, then you must use -&amp;gt;retry(2).</source>
          <target state="translated">Повторяет наблюдаемую исходную последовательность указанное количество раз или до тех пор, пока она не завершится успешно. Если счетчик повторов не указан, повторяется бесконечно. Обратите внимание, если вы столкнулись с ошибкой и хотите, чтобы она повторила попытку один раз, вы должны использовать -&amp;gt; retry (2).</target>
        </trans-unit>
        <trans-unit id="c0f85d6679730ccd89a8730e6639a423b4297ef8" translate="yes" xml:space="preserve">
          <source>Replay</source>
          <target state="translated">Replay</target>
        </trans-unit>
        <trans-unit id="b015fbcad7d2684fdfcb7dedc9d6d94c863e77be" translate="yes" xml:space="preserve">
          <source>ReplaySubject</source>
          <target state="translated">ReplaySubject</target>
        </trans-unit>
        <trans-unit id="4aed03cac49d5e43da4e855a967286931a4d621a" translate="yes" xml:space="preserve">
          <source>Request</source>
          <target state="translated">Request</target>
        </trans-unit>
        <trans-unit id="362f2c501be45e75e83623fbc75ffb6bd8539aa0" translate="yes" xml:space="preserve">
          <source>Request (optional)</source>
          <target state="translated">Запрос (необязательный)</target>
        </trans-unit>
        <trans-unit id="ae649f85b8bb8e9e5d82ff7bc8fb627a73a78597" translate="yes" xml:space="preserve">
          <source>Requests are cumulative. For example, if an observer issues three Request notifications to an Observable, for 3, 5, and 10 items respectively, that Observable may emit as many as 18 items to the observer, no matter when those Request notifications arrived relative to when the Observable emitted items in response.</source>
          <target state="translated">Запросы являются совокупными.Например,если наблюдатель направляет наблюдателю три Запроса об уведомлении,соответственно,о 3,5 и 10 единицах,то наблюдатель может высвободить до 18 единиц,независимо от того,когда эти Запросы поступили по отношению к тому моменту,когда наблюдаемые единицы высвободились в ответ.</target>
        </trans-unit>
        <trans-unit id="9f5cd8a2e8807d73efa02c844bfbca9fe552b283" translate="yes" xml:space="preserve">
          <source>Retry</source>
          <target state="translated">Retry</target>
        </trans-unit>
        <trans-unit id="f65aa2d06a374325c808eae2736095a70d5455cf" translate="yes" xml:space="preserve">
          <source>Returns a non-terminating observable sequence, which can be used to denote an infinite duration.</source>
          <target state="translated">Возвращает бесконечную наблюдаемую последовательность,которая может быть использована для обозначения бесконечной длительности.</target>
        </trans-unit>
        <trans-unit id="b66265e2c132081955a55ecd4d6f193b694306fc" translate="yes" xml:space="preserve">
          <source>Returns a specified number of contiguous elements from the end of an observable sequence.</source>
          <target state="translated">Возвращает заданное количество смежных элементов из конца наблюдаемой последовательности.</target>
        </trans-unit>
        <trans-unit id="1575f8654513725daee2a2a363add232179c51c0" translate="yes" xml:space="preserve">
          <source>Returns a specified number of contiguous elements from the start of an observable sequence</source>
          <target state="translated">Возвращает заданное количество смежных элементов с начала наблюдаемой последовательности</target>
        </trans-unit>
        <trans-unit id="cff7b986404009682ba27df6090fb73164efb0c0" translate="yes" xml:space="preserve">
          <source>Returns an Observable containing the value of a specified array index (if array) or property (if object) from all elements in the Observable sequence. If a property can't be resolved the observable will error.</source>
          <target state="translated">Возвращает Observable,содержащий значение индекса указанного массива (если массив)или свойства (если объект)из всех элементов в последовательности Observable.Если какое-либо свойство не может быть разрешено,то наблюдаемый будет ошибкой.</target>
        </trans-unit>
        <trans-unit id="bfee5cf25ec9ee59cccd49eefb43f35a911fc6c5" translate="yes" xml:space="preserve">
          <source>Returns an Observable that emits an infinite sequence of ascending integers starting at 0, with a constant interval of time of your choosing between emissions.</source>
          <target state="translated">Возвращает Наблюдаемое,которое испускает бесконечную последовательность восходящих целых чисел,начинающуюся с 0,с постоянным интервалом времени на выбор между излучениями.</target>
        </trans-unit>
        <trans-unit id="26770deb5069efb2f0e23c1d2802012bd5cd58a1" translate="yes" xml:space="preserve">
          <source>Returns an Observable that emits only the first item emitted by the source Observable during sequential time windows of a specified duration. If items are emitted on the source observable prior to the expiration of the time period, the last item emitted on the source observable will be emitted.</source>
          <target state="translated">Возвращает наблюдаемый,который испускает только первый элемент,испускаемый источником Наблюдаемый в течение последовательных временных окон заданной продолжительности.Если до истечения этого периода времени на наблюдаемом источнике высвечивается последнее,то на наблюдаемом источнике высвечивается последнее,что высвечивается на наблюдаемом источнике.</target>
        </trans-unit>
        <trans-unit id="6b6219de9751a2c6038288e9e7f374637b417000" translate="yes" xml:space="preserve">
          <source>Returns an Observable that emits the same values as the source Observable with the exception of an onCompleted. An onCompleted notification from the source will result in the emission of a count item to the Observable provided as an argument to the notificationHandler function. If that Observable calls onComplete or onError then repeatWhen will call onCompleted or onError on the child subscription. Otherwise, this Observable will resubscribe to the source observable.</source>
          <target state="translated">Возвращает Observable,который излучает те же значения,что и источник Observable,за исключением onCompleted.Уведомление onCompleted от источника приводит к выбросу элемента счета в Observable,предоставленного в качестве аргумента функции notifyHandler.Если параметр Observable вызывает функцию OnComplete или onError,то при повторном вызове функции OnCompleteted или OnError в дочерней подписке будет вызван параметр OnCompleteted.В противном случае этот наблюдаемый будет переподписан на наблюдаемый источник.</target>
        </trans-unit>
        <trans-unit id="05bffaf9ef566665d8498092b0d67cc30b891531" translate="yes" xml:space="preserve">
          <source>Returns an empty observable sequence.</source>
          <target state="translated">Возвращает пустую наблюдаемую последовательность.</target>
        </trans-unit>
        <trans-unit id="faef0366d79706a5efbb13b09e21109d85a66cfd" translate="yes" xml:space="preserve">
          <source>Returns an observable sequence containing a value that represents how many elements in the specified observable sequence satisfy a condition if provided, else the count of items.</source>
          <target state="translated">Возвращает наблюдаемую последовательность,содержащую значение,представляющее собой количество элементов в указанной наблюдаемой последовательности,удовлетворяющих условию,если оно предусмотрено,в противном случае-количество элементов.</target>
        </trans-unit>
        <trans-unit id="2cff3d212fd9570d01a6f8f690aefbd139a62de6" translate="yes" xml:space="preserve">
          <source>Returns an observable sequence that contains a single element.</source>
          <target state="translated">Возвращает наблюдаемую последовательность,содержащую один элемент.</target>
        </trans-unit>
        <trans-unit id="a682e73ec6ab8bd79eca228116ba58915bbfb650" translate="yes" xml:space="preserve">
          <source>Returns an observable sequence that contains only distinct elements according to the keySelector and the comparer. Usage of this operator should be considered carefully due to the maintenance of an internal lookup structure which can grow large.</source>
          <target state="translated">Возвращает наблюдаемую последовательность,которая содержит только отдельные элементы в соответствии с keySelector и сравнителем.Использование этого оператора должно быть тщательно продумано в связи с сохранением внутренней структуры поиска,которая может вырасти в больших размерах.</target>
        </trans-unit>
        <trans-unit id="964c614d391711eee1cd6bf84c4d5063d98aaf0e" translate="yes" xml:space="preserve">
          <source>Returns an observable sequence that invokes the specified factory function whenever a new observer subscribes.</source>
          <target state="translated">Возвращает наблюдаемую последовательность,которая вызывает указанную заводскую функцию всякий раз,когда новый наблюдатель подписывается.</target>
        </trans-unit>
        <trans-unit id="8e19527a3e82af8612f51a7099ef690823df7b73" translate="yes" xml:space="preserve">
          <source>Returns an observable sequence that is the result of invoking the selector on a connectable observable sequence that shares a single subscription to the underlying sequence and starts with initialValue. This operator is a specialization of Multicast using a BehaviorSubject.</source>
          <target state="translated">Возвращает наблюдаемую последовательность,которая является результатом обращения к селектору на подключаемой наблюдаемой последовательности,которая разделяет одну подписку на базовую последовательность и начинается с initialValue.Этот оператор является специализацией Multicast с использованием BehaviorSubject.</target>
        </trans-unit>
        <trans-unit id="1c641264f413f219546c7a78b990e6144ec6b1bf" translate="yes" xml:space="preserve">
          <source>Returns an observable sequence that is the result of invoking the selector on a connectable observable sequence that shares a single subscription to the underlying sequence containing only the last notification. This operator is a specialization of Multicast using a AsyncSubject.</source>
          <target state="translated">Возвращает наблюдаемую последовательность,которая является результатом обращения к селектору на наблюдаемую соединительную последовательность,которая разделяет одну подписку на базовую последовательность,содержащую только последнее уведомление.Этот оператор является специализацией Multicast с использованием AsyncSubject.</target>
        </trans-unit>
        <trans-unit id="e1647283ed9c49922a40bfc37564423fbdde7946" translate="yes" xml:space="preserve">
          <source>Returns an observable sequence that is the result of invoking the selector on a connectable observable sequence that shares a single subscription to the underlying sequence replaying notifications subject to a maximum time length for the replay buffer. This operator is a specialization of Multicast using a ReplaySubject.</source>
          <target state="translated">Возвращает наблюдаемую последовательность,которая является результатом обращения к селектору на подключаемой наблюдаемой последовательности,которая разделяет одну подписку на уведомления о воспроизведении базовой последовательности с учетом максимальной длительности буфера воспроизведения.Этот оператор является специализацией Multicast с использованием ReplaySubject.</target>
        </trans-unit>
        <trans-unit id="8e2db112557cddf96b22e7126d143a9b1b31f1a5" translate="yes" xml:space="preserve">
          <source>Returns an observable sequence that is the result of invoking the selector on a connectable observable sequence that shares a single subscription to the underlying sequence. This operator is a specialization of Multicast using a regular Subject.</source>
          <target state="translated">Возвращает наблюдаемую последовательность,которая является результатом обращения к селектору на наблюдаемую соединительную последовательность,которая разделяет одну подписку на базовую последовательность.Этот оператор является специализацией Multicast с использованием обычного субъекта.</target>
        </trans-unit>
        <trans-unit id="016eec14311721770f7b2a683d75336e8a7a7af1" translate="yes" xml:space="preserve">
          <source>Returns an observable sequence that produces a value after dueTime has elapsed.</source>
          <target state="translated">Возвращает наблюдаемую последовательность,которая производит значение после истечения срока оплаты.</target>
        </trans-unit>
        <trans-unit id="1d20e06ad0f4800b3d11f541c5f56e847c907311" translate="yes" xml:space="preserve">
          <source>Returns an observable sequence that shares a single subscription to the underlying sequence and starts with an initialValue. This operator is a specialization of publishValue which creates a subscription when the number of observers goes from zero to one, then shares that subscription with all subsequent observers until the number of observers returns to zero, at which point the subscription is disposed.</source>
          <target state="translated">Возвращает наблюдаемую последовательность,которая разделяет одну подписку на базовую последовательность,и начинается с initialValue.Этот оператор представляет собой специализацию publishValue,которая создает подписку,когда количество наблюдателей переходит с нуля на единицу,затем делит эту подписку со всеми последующими наблюдателями до тех пор,пока количество наблюдателей не вернется к нулю,после чего подписка становится доступной.</target>
        </trans-unit>
        <trans-unit id="38d56a908119faae591881f4dcda9fa40c10e222" translate="yes" xml:space="preserve">
          <source>Returns an observable sequence that shares a single subscription to the underlying sequence replaying notifications subject to a maximum time length for the replay buffer. This operator is a specialization of replay which creates a subscription when the number of observers goes from zero to one, then shares that subscription with all subsequent observers until the number of observers returns to zero, at which point the subscription is disposed.</source>
          <target state="translated">Возвращает наблюдаемую последовательность,которая разделяет одну подписку на уведомления о воспроизведении базовой последовательности с учетом максимальной длительности буфера воспроизведения.Этот оператор представляет собой специализацию повтора,который создает подписку,когда количество наблюдателей переходит с нуля на единицу,затем делит эту подписку со всеми последующими наблюдателями до тех пор,пока количество наблюдателей не вернется к нулю,и в этот момент подписка ликвидируется.</target>
        </trans-unit>
        <trans-unit id="f5df10620c57e1c997d557f63f68c3d0159c5478" translate="yes" xml:space="preserve">
          <source>Returns an observable sequence that shares a single subscription to the underlying sequence. This observable sequence can be resubscribed to, even if all prior subscriptions have ended. This operator behaves like share() in RxJS 5</source>
          <target state="translated">Возвращает наблюдаемую последовательность,которая разделяет одну подписку на базовую последовательность.Эта наблюдаемая последовательность может быть переподписана,даже если все предыдущие подписки закончились.Этот оператор ведет себя как share()в RxJS 5.</target>
        </trans-unit>
        <trans-unit id="4a44249e030428e86c07a60a51b755fbe6925176" translate="yes" xml:space="preserve">
          <source>Returns an observable sequence that shares a single subscription to the underlying sequence. This operator is a specialization of publish which creates a subscription when the number of observers goes from zero to one, then shares that subscription with all subsequent observers until the number of observers returns to zero, at which point the subscription is disposed.</source>
          <target state="translated">Возвращает наблюдаемую последовательность,которая разделяет одну подписку на базовую последовательность.Этот оператор представляет собой специализацию публикации,которая создает подписку,когда количество наблюдателей переходит с нуля на единицу,затем делит эту подписку со всеми последующими наблюдателями до тех пор,пока количество наблюдателей не вернется к нулю,и в этот момент подписка ликвидируется.</target>
        </trans-unit>
        <trans-unit id="9e6151ef39c4add9c04f16b1f5e3d6298e2d55ce" translate="yes" xml:space="preserve">
          <source>Returns an observable sequence that terminates with an exception.</source>
          <target state="translated">Возвращает наблюдаемую последовательность,которая заканчивается с исключением.</target>
        </trans-unit>
        <trans-unit id="97a920ffca11d6f46fe633813aae1f64d9041a3e" translate="yes" xml:space="preserve">
          <source>Returns elements from an observable sequence as long as a specified condition is true. It takes as a parameter a a callback to test each source element for a condition. The callback predicate is called with the index and the value of the element.</source>
          <target state="translated">Возвращает элементы из наблюдаемой последовательности до тех пор,пока указанное условие истинно.В качестве параметра берется обратный вызов для проверки каждого исходного элемента на условие.Предикат обратного вызова вызывается с индексом и значением элемента.</target>
        </trans-unit>
        <trans-unit id="7f25e53c6e84b6097983f2fccac3e648fd742421" translate="yes" xml:space="preserve">
          <source>Returns elements from an observable sequence as long as a specified condition is true. It takes as a parameter a a callback to test each source element for a condition. The callback predicate is called with the value of the element.</source>
          <target state="translated">Возвращает элементы из наблюдаемой последовательности до тех пор,пока указанное условие истинно.В качестве параметра берется обратный вызов для проверки каждого исходного элемента на условие.Предикат обратного вызова вызывается со значением элемента.</target>
        </trans-unit>
        <trans-unit id="0ae3fb382150e6992cfff288381c767831419094" translate="yes" xml:space="preserve">
          <source>Returns the maximum value in an observable sequence according to the specified comparer.</source>
          <target state="translated">Возвращает максимальное значение в наблюдаемой последовательности в соответствии с указанным сравнителем.</target>
        </trans-unit>
        <trans-unit id="271ae3c857f28d685f73adfc30b60a535acdf251" translate="yes" xml:space="preserve">
          <source>Returns the minimum value in an observable sequence according to the specified comparer.</source>
          <target state="translated">Возвращает минимальное значение в наблюдаемой последовательности в соответствии с указанным сравнителем.</target>
        </trans-unit>
        <trans-unit id="7f0e70bc9059a2774e04a9972917ec0b052a56b6" translate="yes" xml:space="preserve">
          <source>Returns the specified value of an observable if the sequence is empty.</source>
          <target state="translated">Возвращает заданное значение наблюдаемого,если последовательность пуста.</target>
        </trans-unit>
        <trans-unit id="5541d47ad32064d2467dbbef86815651c50d2b81" translate="yes" xml:space="preserve">
          <source>Returns the values from the source observable sequence only after the other observable sequence produces a value.</source>
          <target state="translated">Возвращает значения из исходной наблюдаемой последовательности только после того,как другая наблюдаемая последовательность выдаст значение.</target>
        </trans-unit>
        <trans-unit id="a55a6df2ec577b818d546560131cce3912ac26ee" translate="yes" xml:space="preserve">
          <source>Returns the values from the source observable sequence until the other observable sequence produces a value.</source>
          <target state="translated">Возвращает значения из наблюдаемой последовательности источника до тех пор,пока другая наблюдаемая последовательность не выдаст значение.</target>
        </trans-unit>
        <trans-unit id="d7e8610f022a19744fb0f497cb46583529f0dd28" translate="yes" xml:space="preserve">
          <source>Returns two observables which partition the observations of the source by the given function. The first will trigger observations for those values for which the predicate returns true. The second will trigger observations for those values where the predicate returns false. The predicate is executed once for each subscribed observer. Both also propagate all error observations arising from the source and each completes when the source completes.</source>
          <target state="translated">Возвращает две наблюдения,которые делят наблюдения источника на данную функцию.Первая вызывает наблюдения для тех значений,для которых предикат возвращает истину.Вторая вызывает наблюдения для тех значений,для которых предикат возвращает false.Предикат выполняется один раз для каждого подписанного наблюдателя.Обе функции также распространяют все наблюдения за ошибками,вытекающими из источника,и каждая из них завершается по окончании работы источника.</target>
        </trans-unit>
        <trans-unit id="2aa10594b914e4a32f8df4e9e894eff7e8460936" translate="yes" xml:space="preserve">
          <source>Runs all observable sequences in parallel and collect their last elements.</source>
          <target state="translated">Выполняет все наблюдаемые последовательности параллельно и собирает их последние элементы.</target>
        </trans-unit>
        <trans-unit id="5ec212716c26419b75407d06511140254ca8d102" translate="yes" xml:space="preserve">
          <source>Rx.NET implements the Catch operator with two distinct operators:</source>
          <target state="translated">Rx.NET реализует оператора Catch с двумя разными операторами:</target>
        </trans-unit>
        <trans-unit id="4a7e8a648562880dc650b2261d5336328d90cd78" translate="yes" xml:space="preserve">
          <source>Rx.NET implements this operator as &lt;code&gt;Concat&lt;/code&gt;. It accepts either an enumerable of Observables, an Observable of Observables, or two Observables as parameters, and concatenates these in the order given.</source>
          <target state="translated">Rx.NET реализует этот оператор как &lt;code&gt;Concat&lt;/code&gt; . Он принимает либо перечислимое из Observables, либо Observable из Observable, либо два Observable в качестве параметров и объединяет их в указанном порядке.</target>
        </trans-unit>
        <trans-unit id="01e204ac0f0a81493413125f2d548ecc926b4865" translate="yes" xml:space="preserve">
          <source>Rx.NET implements this operator as &lt;code&gt;Merge&lt;/code&gt;.</source>
          <target state="translated">Rx.NET реализует этот оператор как &lt;code&gt;Merge&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="ad278cb650a82cba8f98e3cf6755b47ca355a0bb" translate="yes" xml:space="preserve">
          <source>Rx.NET implements this operator as &lt;code&gt;Retry&lt;/code&gt;.</source>
          <target state="translated">Rx.NET реализует этот оператор как &lt;code&gt;Retry&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="492fc74d33e5b534570b753b59ab3b77ce7560fe" translate="yes" xml:space="preserve">
          <source>Rx.NET implements this operator as &lt;code&gt;StartWith&lt;/code&gt;. It accepts an array of items which it prepends to the resulting Observable sequence in the order they appear in the array before it emits the items from the source Observable.</source>
          <target state="translated">Rx.NET реализует этот оператор как &lt;code&gt;StartWith&lt;/code&gt; . Он принимает массив элементов, которые он добавляет к результирующей последовательности Observable в том порядке, в котором они появляются в массиве, прежде чем он испускает элементы из исходного Observable.</target>
        </trans-unit>
        <trans-unit id="5419fdb9d365ee9ea53f40776d139b6f5c1ce39f" translate="yes" xml:space="preserve">
          <source>Rx.rb has three variants of the Buffer operator:</source>
          <target state="translated">В Rx.rb есть три варианта оператора Buffer:</target>
        </trans-unit>
        <trans-unit id="da0f75ea1f37f6f7e9f31336287688a4c12de8fd" translate="yes" xml:space="preserve">
          <source>Rx.rb has two versions of this operator: &lt;code&gt;retry&lt;/code&gt; and &lt;code&gt;retry_infinitely&lt;/code&gt;.</source>
          <target state="translated">Rx.rb имеет две версии этого оператора: &lt;code&gt;retry&lt;/code&gt; и &lt;code&gt;retry_infinitely&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="ca6fb9b1560ae6619da364d578fa6e03bf702ebc" translate="yes" xml:space="preserve">
          <source>Rx.rb implements the Catch operator with four distinct operators:</source>
          <target state="translated">Rx.rb реализует оператора Catch с четырьмя разными операторами:</target>
        </trans-unit>
        <trans-unit id="595081981f525f320a9476299f6229fac421f651" translate="yes" xml:space="preserve">
          <source>Rx.rb implements the Catch operator with two distinct operators:</source>
          <target state="translated">Rx.rb реализует оператора Catch с двумя разными операторами:</target>
        </trans-unit>
        <trans-unit id="49f824d805e6101878eb0ba7060ccc54a12a13bf" translate="yes" xml:space="preserve">
          <source>Rx.rb implements this operator as &lt;code&gt;merge&lt;/code&gt;, &lt;code&gt;merge_concurrent&lt;/code&gt;, and &lt;code&gt;merge_all&lt;/code&gt;.</source>
          <target state="translated">Rx.rb реализует этот оператор как &lt;code&gt;merge&lt;/code&gt; , &lt;code&gt;merge_concurrent&lt;/code&gt; и &lt;code&gt;merge_all&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="c16f42485f5cd6b38676a0e0d7b7f3874a6066ac" translate="yes" xml:space="preserve">
          <source>Rx.rb implements this operator as &lt;code&gt;start_with&lt;/code&gt;. It accepts an array of items which it prepends to the resulting Observable sequence in the order they appear in the array before it emits the items from the source Observable.</source>
          <target state="translated">Rx.rb реализует этот оператор как &lt;code&gt;start_with&lt;/code&gt; . Он принимает массив элементов, которые он добавляет к результирующей последовательности Observable в том порядке, в котором они появляются в массиве, прежде чем он испускает элементы из исходного Observable.</target>
        </trans-unit>
        <trans-unit id="dcbe2ea09d022c4acf28c13516ecc3b3d31a30dd" translate="yes" xml:space="preserve">
          <source>Rx.rb implements this operator as &lt;code&gt;window_with_count&lt;/code&gt;. It opens its first window immediately. It then opens a new window beginning with every &lt;code&gt;skip&lt;/code&gt; item from the source Observable (so, for example, if &lt;code&gt;skip&lt;/code&gt; is 3, then it opens a new window starting with every third item). It closes each window when that window has emitted &lt;code&gt;count&lt;/code&gt; items or if it receives an &lt;code&gt;onCompleted&lt;/code&gt; or &lt;code&gt;onError&lt;/code&gt; notification from the source Observable. If &lt;code&gt;skip&amp;nbsp;=&amp;nbsp;count&lt;/code&gt; then there is a one-to-one correspondence between the items emitted by the source Observable and those emitted by the window Observables; if &lt;code&gt;skip&amp;nbsp;&amp;lt;&amp;nbsp;count&lt;/code&gt; the windows will overlap by &lt;code&gt;count&amp;nbsp;&amp;minus;&amp;nbsp;skip&lt;/code&gt; items; if &lt;code&gt;skip&amp;nbsp;&amp;gt;&amp;nbsp;count&lt;/code&gt; the windows will drop &lt;code&gt;skip&amp;nbsp;&amp;minus;&amp;nbsp;count&lt;/code&gt; items from the source Observable between every window.</source>
          <target state="translated">Rx.rb реализует этот оператор как &lt;code&gt;window_with_count&lt;/code&gt; . Он сразу открывает свое первое окно. Затем он открывает новое окно, начиная с каждого элемента &lt;code&gt;skip&lt;/code&gt; из исходного Observable (так, например, если &lt;code&gt;skip&lt;/code&gt; равно 3, то открывается новое окно, начиная с каждого третьего элемента). Он закрывает каждое окно, когда это окно испускает элементы &lt;code&gt;count&lt;/code&gt; или если оно получает уведомление &lt;code&gt;onCompleted&lt;/code&gt; или &lt;code&gt;onError&lt;/code&gt; от источника Observable. Если &lt;code&gt;skip&amp;nbsp;=&amp;nbsp;count&lt;/code&gt; то существует взаимно однозначное соответствие между элементами, испускаемыми исходным Observable, и теми, которые испускаются окном Observables; если &lt;code&gt;skip&amp;nbsp;&amp;lt;&amp;nbsp;count&lt;/code&gt; окна будут перекрываться &lt;code&gt;count&amp;nbsp;&amp;minus;&amp;nbsp;skip&lt;/code&gt; предметы; если &lt;code&gt;skip&amp;nbsp;&amp;gt;&amp;nbsp;count&lt;/code&gt; окна будут &lt;code&gt;skip&amp;nbsp;&amp;minus;&amp;nbsp;count&lt;/code&gt; элементы из источника Observable между каждым окном.</target>
        </trans-unit>
        <trans-unit id="32a0288af3ef07f09fa0afc1c999f58ddcec6fc3" translate="yes" xml:space="preserve">
          <source>RxClojure</source>
          <target state="translated">RxClojure</target>
        </trans-unit>
        <trans-unit id="f6e512f823676459f47b423260adee32c899d443" translate="yes" xml:space="preserve">
          <source>RxClojure &lt;code&gt;catch*&lt;/code&gt;</source>
          <target state="translated">RxClojure &lt;code&gt;catch*&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="6ec1d0418f5dfedfc8c9e3479714635ea1b1f0e4" translate="yes" xml:space="preserve">
          <source>RxClojure &lt;code&gt;concat concat*&lt;/code&gt;</source>
          <target state="translated">RxClojure concat concat &lt;code&gt;concat concat*&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="872bebed9f674331cae38963af40a73ff9b393e8" translate="yes" xml:space="preserve">
          <source>RxClojure &lt;code&gt;cons&lt;/code&gt;</source>
          <target state="translated">RxClojure &lt;code&gt;cons&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="65e019e4fda7eee4a13e2358494dd07df853ac9b" translate="yes" xml:space="preserve">
          <source>RxClojure &lt;code&gt;count longCount&lt;/code&gt;</source>
          <target state="translated">RxClojure &lt;code&gt;count longCount&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="15efd0368b15f9d34b5a8ad5dc237d38aba013bc" translate="yes" xml:space="preserve">
          <source>RxClojure &lt;code&gt;interleave interleave* merge merge* merge-delay-error merge-delay-error*&lt;/code&gt;</source>
          <target state="translated">RxClojure &lt;code&gt;interleave interleave* merge merge* merge-delay-error merge-delay-error*&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="788fb5d76e722d04536e8650a8138a7557310ed2" translate="yes" xml:space="preserve">
          <source>RxClojure &lt;code&gt;partition-all&lt;/code&gt;</source>
          <target state="translated">RxClojure &lt;code&gt;partition-all&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="8b47ff032a7a36be5954731e45b1fa08529a8e92" translate="yes" xml:space="preserve">
          <source>RxClojure does not implement the Retry operator.</source>
          <target state="translated">RxClojure не реализует оператор Retry.</target>
        </trans-unit>
        <trans-unit id="b5be8e39de462cee70fff9af96c263ca9aedecf1" translate="yes" xml:space="preserve">
          <source>RxClojure has both &lt;code&gt;count&lt;/code&gt; and &lt;code&gt;longCount&lt;/code&gt; variants of this operator, but both of these in fact return long values.</source>
          <target state="translated">В RxClojure есть варианты этого оператора &lt;code&gt;count&lt;/code&gt; и &lt;code&gt;longCount&lt;/code&gt; , но оба они фактически возвращают длинные значения.</target>
        </trans-unit>
        <trans-unit id="1bf408e74c58fd9e73975f910c8805700b2bbda6" translate="yes" xml:space="preserve">
          <source>RxClojure implements this operator as &lt;code&gt;catch*&lt;/code&gt;. This operator takes two arguments, both of which are functions of your choosing that take the exception raised by &lt;code&gt;onError&lt;/code&gt; as their single parameters. The first function is a predicate. If it returns &lt;code&gt;false&lt;/code&gt;, &lt;code&gt;catch*&lt;/code&gt; passes the &lt;code&gt;onError&lt;/code&gt; notification unchanged to its observers. If it returns &lt;code&gt;true&lt;/code&gt;, however, &lt;code&gt;catch*&lt;/code&gt; swallows the error, calls the second function (which returns an Observable), and passes along the emissions and notifications from this new Observable to its observers.</source>
          <target state="translated">RxClojure реализует этот оператор как &lt;code&gt;catch*&lt;/code&gt; . Этот оператор принимает два аргумента, оба из которых являются функциями по вашему выбору, которые принимают исключение, &lt;code&gt;onError&lt;/code&gt; как свои единственные параметры. Первая функция - это предикат. Если он возвращает &lt;code&gt;false&lt;/code&gt; , &lt;code&gt;catch*&lt;/code&gt; передает своим наблюдателям уведомление &lt;code&gt;onError&lt;/code&gt; без изменений. Однако если он возвращает &lt;code&gt;true&lt;/code&gt; , &lt;code&gt;catch*&lt;/code&gt; проглатывает ошибку, вызывает вторую функцию (которая возвращает Observable) и передает выбросы и уведомления от этого нового Observable своим наблюдателям.</target>
        </trans-unit>
        <trans-unit id="a6452a5c578f4872f3f40511f42c500f4c6e9727" translate="yes" xml:space="preserve">
          <source>RxClojure implements this operator as &lt;code&gt;cons&lt;/code&gt;. It takes an item and an Observable as parameters, and prepends the item to the items emitted by the Observable as its own Observable sequence.</source>
          <target state="translated">RxClojure реализует этот оператор как &lt;code&gt;cons&lt;/code&gt; . Он принимает элемент и Observable в качестве параметров и добавляет элемент к элементам, выдаваемым Observable как его собственная последовательность Observable.</target>
        </trans-unit>
        <trans-unit id="d0a99fd0b89ee15094ef307e21c34c9baffc3ee7" translate="yes" xml:space="preserve">
          <source>RxClojure implements this operator as &lt;code&gt;partition-all&lt;/code&gt;:</source>
          <target state="translated">RxClojure реализует этот оператор как &lt;code&gt;partition-all&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="ba1d1c94e49ad4d342dadc9d9e01e7ae2f02ace8" translate="yes" xml:space="preserve">
          <source>RxCpp</source>
          <target state="translated">RxCpp</target>
        </trans-unit>
        <trans-unit id="692e583fcc5eb8826781e52d07a9a6081c36d0af" translate="yes" xml:space="preserve">
          <source>RxCpp &lt;code&gt;buffer pairwise&lt;/code&gt;</source>
          <target state="translated">RxCpp &lt;code&gt;buffer pairwise&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="7eeaa6d009460e0bc0fb7e2f5da450b8c714491d" translate="yes" xml:space="preserve">
          <source>RxCpp &lt;code&gt;concat&lt;/code&gt;</source>
          <target state="translated">RxCpp &lt;code&gt;concat&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="a442361d68efae58b3f1cf17e2d71c27e1550b13" translate="yes" xml:space="preserve">
          <source>RxCpp &lt;code&gt;count&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;count&lt;/code&gt; RxCpp</target>
        </trans-unit>
        <trans-unit id="16a2436cfaba03dda2b81921dae012b2ba8e22da" translate="yes" xml:space="preserve">
          <source>RxCpp &lt;code&gt;merge&lt;/code&gt;</source>
          <target state="translated">RxCpp &lt;code&gt;merge&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="e301509a898a576eb2bd120f637805bb4c587a8c" translate="yes" xml:space="preserve">
          <source>RxCpp &lt;code&gt;retry&lt;/code&gt;</source>
          <target state="translated">RxCpp &lt;code&gt;retry&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="ee9d3ea287a2096f5bf82d3b34515cd09c7f58be" translate="yes" xml:space="preserve">
          <source>RxCpp &lt;code&gt;start_with&lt;/code&gt;</source>
          <target state="translated">RxCpp &lt;code&gt;start_with&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="65fbdbd92546d261effd680d1c3eb384685d4fb0" translate="yes" xml:space="preserve">
          <source>RxCpp &lt;code&gt;window window_with_time window_with_time_or_count&lt;/code&gt;</source>
          <target state="translated">RxCpp &lt;code&gt;window window_with_time window_with_time_or_count&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="9465313e9c692fc5201ad52b39604329a2de026d" translate="yes" xml:space="preserve">
          <source>RxCpp does not implement the Catch operator.</source>
          <target state="translated">RxCpp не реализует оператора Catch.</target>
        </trans-unit>
        <trans-unit id="e398d9bfe37d224cb67747e8f875ecc3f044cc75" translate="yes" xml:space="preserve">
          <source>RxCpp implements this operator as &lt;code&gt;concat&lt;/code&gt;:</source>
          <target state="translated">RxCpp реализует этот оператор как &lt;code&gt;concat&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="112942a6d86dc5064f0b5fa57a3f35b144a717c5" translate="yes" xml:space="preserve">
          <source>RxCpp implements this operator as &lt;code&gt;count&lt;/code&gt;.</source>
          <target state="translated">RxCpp реализует этот оператор как &lt;code&gt;count&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="9ee9151a1f968a1d77b059f86438bc32e70eb66f" translate="yes" xml:space="preserve">
          <source>RxCpp implements this operator as &lt;code&gt;merge&lt;/code&gt;.</source>
          <target state="translated">RxCpp реализует этот оператор как &lt;code&gt;merge&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="d3925f81edbf3f582d7e1759f319a166b7b18111" translate="yes" xml:space="preserve">
          <source>RxCpp implements this operator as &lt;code&gt;retry&lt;/code&gt;:</source>
          <target state="translated">RxCpp реализует этот оператор как &lt;code&gt;retry&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="95643b668f7bb6c32c95c23fa36690689e00da29" translate="yes" xml:space="preserve">
          <source>RxCpp implements this operator as &lt;code&gt;start_with&lt;/code&gt;. It takes an Observable and one or more items as parameters, and prepends these items, in the order they are given in the parameter list, to the items emitted by the Observable as its own Observable sequence.</source>
          <target state="translated">RxCpp реализует этот оператор как &lt;code&gt;start_with&lt;/code&gt; . Он принимает Observable и один или несколько элементов в качестве параметров и добавляет эти элементы в том порядке, в котором они указаны в списке параметров, к элементам, генерируемым Observable как его собственная последовательность Observable.</target>
        </trans-unit>
        <trans-unit id="db559673c45550ba778835989db385c247f98402" translate="yes" xml:space="preserve">
          <source>RxCpp implements this operator as two variants of &lt;code&gt;window&lt;/code&gt;, two variants of &lt;code&gt;window_with_time&lt;/code&gt;, and as &lt;code&gt;window_with_time_or_count&lt;/code&gt;:</source>
          <target state="translated">RxCpp реализует этот оператор как два варианта &lt;code&gt;window&lt;/code&gt; , два варианта &lt;code&gt;window_with_time&lt;/code&gt; и как &lt;code&gt;window_with_time_or_count&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="53f8b9fc1760ce559e1488099e21abc8afc9d486" translate="yes" xml:space="preserve">
          <source>RxCpp implements two variants of Buffer:</source>
          <target state="translated">RxCpp реализует два варианта буфера:</target>
        </trans-unit>
        <trans-unit id="f8b320e74f3d1f39a14242cd132a7b14bfb13492" translate="yes" xml:space="preserve">
          <source>RxGroovy</source>
          <target state="translated">RxGroovy</target>
        </trans-unit>
        <trans-unit id="c5ac44478090ccc9e968103e6090f3f473e77611" translate="yes" xml:space="preserve">
          <source>RxGroovy &lt;code&gt;BlockingObservable.forEach forEach subscribe&lt;/code&gt;</source>
          <target state="translated">RxGroovy &lt;code&gt;BlockingObservable.forEach forEach subscribe&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="1956d0cef69125dd7e8d21bf299eeec2a0cc0d15" translate="yes" xml:space="preserve">
          <source>RxGroovy &lt;code&gt;BlockingObservable.from BlockingObservable.getIterator nest toBlocking BlockingObservable.toFuture BlockingObservable.toIterable toList toMap toMultiMap toSortedList&lt;/code&gt;</source>
          <target state="translated">RxGroovy &lt;code&gt;BlockingObservable.from BlockingObservable.getIterator nest toBlocking BlockingObservable.toFuture BlockingObservable.toIterable toList toMap toMultiMap toSortedList&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="5b9292f27f863728cf6055e27ecfd4a6a22cfbc2" translate="yes" xml:space="preserve">
          <source>RxGroovy &lt;code&gt;all&lt;/code&gt;</source>
          <target state="translated">RxGroovy &lt;code&gt;all&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="51aa46d2c873850307b68daf8552e2ba4932335c" translate="yes" xml:space="preserve">
          <source>RxGroovy &lt;code&gt;amb ambWith&lt;/code&gt;</source>
          <target state="translated">RxGroovy &lt;code&gt;amb ambWith&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="ca52561b1e680d9ea99ff5f16018509d791ff05d" translate="yes" xml:space="preserve">
          <source>RxGroovy &lt;code&gt;and then when&lt;/code&gt;</source>
          <target state="translated">RxGroovy, &lt;code&gt;and then when&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="9fa6a8ffa2a6dcb1b2df308b9a5233f69a2c311a" translate="yes" xml:space="preserve">
          <source>RxGroovy &lt;code&gt;asyncAction asyncFunc deferFuture forEachFuture fromAction fromCallable fromFunc0 fromRunnable start startFuture toAsync&lt;/code&gt;</source>
          <target state="translated">RxGroovy &lt;code&gt;asyncAction asyncFunc deferFuture forEachFuture fromAction fromCallable fromFunc0 fromRunnable start startFuture toAsync&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="4203863a1efdb479006e48614f5501ebd6438f2f" translate="yes" xml:space="preserve">
          <source>RxGroovy &lt;code&gt;averageDouble averageFloat averageInteger averageLong&lt;/code&gt;</source>
          <target state="translated">RxГлавное &lt;code&gt;averageDouble averageFloat averageInteger averageLong&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="720df6f1f9506d9fefef3e3e0ceee8c290336de3" translate="yes" xml:space="preserve">
          <source>RxGroovy &lt;code&gt;buffer&lt;/code&gt;</source>
          <target state="translated">RxGroovy &lt;code&gt;buffer&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="278f22dd27d2f0717726dafa7b86331bcdfb5ccc" translate="yes" xml:space="preserve">
          <source>RxGroovy &lt;code&gt;byLine cast encode map&lt;/code&gt;</source>
          <target state="translated">RxGroovy &lt;code&gt;byLine cast encode map&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="d2994f10b5bb661cffefd29a45b261d41212a653" translate="yes" xml:space="preserve">
          <source>RxGroovy &lt;code&gt;collect reduce&lt;/code&gt;</source>
          <target state="translated">RxGroovy &lt;code&gt;collect reduce&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="2d24e704db80c60e5bd4b0225c40e37707ee8be1" translate="yes" xml:space="preserve">
          <source>RxGroovy &lt;code&gt;combineLatest withLatestFrom&lt;/code&gt;</source>
          <target state="translated">RxGroovy &lt;code&gt;combineLatest withLatestFrom&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="ba585f16af6c6c2c82cf1249455c18860e48b1c4" translate="yes" xml:space="preserve">
          <source>RxGroovy &lt;code&gt;concat concatWith&lt;/code&gt;</source>
          <target state="translated">RxGroovy &lt;code&gt;concat concatWith&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="eb043c5ff115f29bd3e74e6d5d6074a99f48b6a8" translate="yes" xml:space="preserve">
          <source>RxGroovy &lt;code&gt;concatMap flatMap flatMapIterable StringObservable.split switchMap&lt;/code&gt;</source>
          <target state="translated">RxGroovy &lt;code&gt;concatMap flatMap flatMapIterable StringObservable.split switchMap&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="6db56b2ec23d9819314fbbba1584671cfbc1f7d2" translate="yes" xml:space="preserve">
          <source>RxGroovy &lt;code&gt;connect&lt;/code&gt;</source>
          <target state="translated">RxGroovy &lt;code&gt;connect&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="018c120e517f44fbee3d03b5a5c8b4cf48b347f6" translate="yes" xml:space="preserve">
          <source>RxGroovy &lt;code&gt;contains exists isEmpty&lt;/code&gt;</source>
          <target state="translated">RxGroovy &lt;code&gt;contains exists isEmpty&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="ab3bc1b121c2b2096b4082380d4d0c585486b080" translate="yes" xml:space="preserve">
          <source>RxGroovy &lt;code&gt;count countLong&lt;/code&gt;</source>
          <target state="translated">RxGroovy &lt;code&gt;count countLong&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="a1bc008955cb2e3c720562d1fe254ec811440a71" translate="yes" xml:space="preserve">
          <source>RxGroovy &lt;code&gt;create&lt;/code&gt;</source>
          <target state="translated">RxGroovy &lt;code&gt;create&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="7b6e626efebb226a5155ba3c3149065bfb2bec8d" translate="yes" xml:space="preserve">
          <source>RxGroovy &lt;code&gt;debounce throttleWithTimeout&lt;/code&gt;</source>
          <target state="translated">RxGroovy &lt;code&gt;debounce throttleWithTimeout&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="bc8a843f1a17520838d20843468bf89d9405ed7c" translate="yes" xml:space="preserve">
          <source>RxGroovy &lt;code&gt;decode from fromAction fromCallable fromFunc0 fromRunnable runAsync&lt;/code&gt;</source>
          <target state="translated">RxGroovy &lt;code&gt;decode from fromAction fromCallable fromFunc0 fromRunnable runAsync&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="4607e088333ff7b6e0eb842ccf5b2a49b9a6747c" translate="yes" xml:space="preserve">
          <source>RxGroovy &lt;code&gt;defaultIfEmpty switchIfEmpty&lt;/code&gt;</source>
          <target state="translated">RxGroovy &lt;code&gt;defaultIfEmpty switchIfEmpty&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="0a431719b9cd99c7becc0d97fcf5eb2435a17fa5" translate="yes" xml:space="preserve">
          <source>RxGroovy &lt;code&gt;defer ifThen switchCase&lt;/code&gt;</source>
          <target state="translated">RxGroovy &lt;code&gt;defer ifThen switchCase&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="76390f3ee6cbf5310b6ce8766c9288ae3871155b" translate="yes" xml:space="preserve">
          <source>RxGroovy &lt;code&gt;delay delaySubscription&lt;/code&gt;</source>
          <target state="translated">Задержка &lt;code&gt;delay delaySubscription&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="58dc49a9f9af44436d2bdba1c60881c494fc0f03" translate="yes" xml:space="preserve">
          <source>RxGroovy &lt;code&gt;dematerialize materialize&lt;/code&gt;</source>
          <target state="translated">RxGroovy &lt;code&gt;dematerialize materialize&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="9d93b2c08f653bc58b787cec8dfe23bced792082" translate="yes" xml:space="preserve">
          <source>RxGroovy &lt;code&gt;distinct distinctUntilChanged&lt;/code&gt;</source>
          <target state="translated">RxGroovy &lt;code&gt;distinct distinctUntilChanged&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="11452f5a81c585fdb30cb4a0c071a29258895c9a" translate="yes" xml:space="preserve">
          <source>RxGroovy &lt;code&gt;doOnCompleted doOnEach doOnError doOnNext doOnRequest doOnSubscribe doOnTerminate doOnUnsubscribe finallyDo&lt;/code&gt;</source>
          <target state="translated">RxGroovy &lt;code&gt;doOnCompleted doOnEach doOnError doOnNext doOnRequest doOnSubscribe doOnTerminate doOnUnsubscribe finallyDo&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="0e7639dbf9cbebc030915e7de2b4487e5212b3ca" translate="yes" xml:space="preserve">
          <source>RxGroovy &lt;code&gt;doWhile repeat repeatWhen whileDo&lt;/code&gt;</source>
          <target state="translated">RxGroovy &lt;code&gt;doWhile repeat repeatWhen whileDo&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="3e86a5dfaa9420622d13a01fdbfa114c4d059f4f" translate="yes" xml:space="preserve">
          <source>RxGroovy &lt;code&gt;elementAt elementAtOrDefault&lt;/code&gt;</source>
          <target state="translated">RxGroovy &lt;code&gt;elementAt elementAtOrDefault&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="92f9ef1d5c1196d338b4d66470580cada96d4e35" translate="yes" xml:space="preserve">
          <source>RxGroovy &lt;code&gt;empty never error&lt;/code&gt;</source>
          <target state="translated">RxGroovy &lt;code&gt;empty never error&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="2e93dbf5b7311ee3e71f23f325855f48801f383f" translate="yes" xml:space="preserve">
          <source>RxGroovy &lt;code&gt;filter ofType&lt;/code&gt;</source>
          <target state="translated">RxGroovy &lt;code&gt;filter ofType&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="6b28a9db3d9263adb4aa25c67bd36c4e995b4790" translate="yes" xml:space="preserve">
          <source>RxGroovy &lt;code&gt;first firstOrDefault latest mostRecent next single singleOrDefault takeFirst&lt;/code&gt;</source>
          <target state="translated">RxGroovy &lt;code&gt;first firstOrDefault latest mostRecent next single singleOrDefault takeFirst&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="1ca1c957a336484e7113a02575cda362a05923f9" translate="yes" xml:space="preserve">
          <source>RxGroovy &lt;code&gt;groupBy&lt;/code&gt;</source>
          <target state="translated">Группа &lt;code&gt;groupBy&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="4efafc0848d5257d57b1883d86cfa7fa8f2ab831" translate="yes" xml:space="preserve">
          <source>RxGroovy &lt;code&gt;ignoreElements&lt;/code&gt;</source>
          <target state="translated">RxGroovy &lt;code&gt;ignoreElements&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="56bf44d8b57f0547e7150e7f6730b9fcbc1363eb" translate="yes" xml:space="preserve">
          <source>RxGroovy &lt;code&gt;interval&lt;/code&gt;</source>
          <target state="translated">RxGroovy &lt;code&gt;interval&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="bf08d459ed70f16c5e53ad1aec84fc00e6b5afee" translate="yes" xml:space="preserve">
          <source>RxGroovy &lt;code&gt;join groupJoin&lt;/code&gt;</source>
          <target state="translated">RxGroovy &lt;code&gt;join groupJoin&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="af9720ef47fb9388c38840d8a17a7be686f473c8" translate="yes" xml:space="preserve">
          <source>RxGroovy &lt;code&gt;just&lt;/code&gt;</source>
          <target state="translated">RxGroovy &lt;code&gt;just&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="1f518bca594186a525cc570c1f031024b9bc6859" translate="yes" xml:space="preserve">
          <source>RxGroovy &lt;code&gt;last lastOrDefault&lt;/code&gt;</source>
          <target state="translated">RxGroovy &lt;code&gt;last lastOrDefault&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="87132bec06aa7e75366a5c94e5791e61495ef222" translate="yes" xml:space="preserve">
          <source>RxGroovy &lt;code&gt;limit take&lt;/code&gt;</source>
          <target state="translated">Лимитный &lt;code&gt;limit take&lt;/code&gt; RxGroovy</target>
        </trans-unit>
        <trans-unit id="3c536a422ee9ce4fcd6a53c6799f4a61bb0ee62f" translate="yes" xml:space="preserve">
          <source>RxGroovy &lt;code&gt;max maxBy&lt;/code&gt;</source>
          <target state="translated">RxGroovy &lt;code&gt;max maxBy&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="5e6869c1a8e7e4d8a5d77efe5bbd40edb495637f" translate="yes" xml:space="preserve">
          <source>RxGroovy &lt;code&gt;merge mergeDelayError mergeWith&lt;/code&gt;</source>
          <target state="translated">RxGroovy &lt;code&gt;merge mergeDelayError mergeWith&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="bbd1f4890f98b750da1d6a602000825d876e1c3e" translate="yes" xml:space="preserve">
          <source>RxGroovy &lt;code&gt;min minBy&lt;/code&gt;</source>
          <target state="translated">RxGroovy &lt;code&gt;min minBy&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="a0df4b19451e20dd15c612726e4525fa4cdfa56d" translate="yes" xml:space="preserve">
          <source>RxGroovy &lt;code&gt;observeOn&lt;/code&gt;</source>
          <target state="translated">RxGroovy &lt;code&gt;observeOn&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="037d32772fd2e5343d23cbc5b7c78d174b0f689e" translate="yes" xml:space="preserve">
          <source>RxGroovy &lt;code&gt;onBackpressureBuffer onBackpressureDrop onBackpressureLatest&lt;/code&gt;</source>
          <target state="translated">RxGroovy &lt;code&gt;onBackpressureBuffer onBackpressureDrop onBackpressureLatest&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="e86f12adfeb35d8c638444d05093aaf2467a9ab1" translate="yes" xml:space="preserve">
          <source>RxGroovy &lt;code&gt;onErrorResumeNext onErrorReturn onExceptionResumeNext&lt;/code&gt;</source>
          <target state="translated">RxGroovy &lt;code&gt;onErrorResumeNext onErrorReturn onExceptionResumeNext&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="d401d55dcbac3be48f4e1975e7fa75427c031b14" translate="yes" xml:space="preserve">
          <source>RxGroovy &lt;code&gt;publish&lt;/code&gt;</source>
          <target state="translated">RxGroovy &lt;code&gt;publish&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="37df82705ad3aa1200ddc9ff87fd41e88395ce3c" translate="yes" xml:space="preserve">
          <source>RxGroovy &lt;code&gt;range&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;range&lt;/code&gt; RxGroovy</target>
        </trans-unit>
        <trans-unit id="d1354f4038c68b11a914ee25dcdc4de978757eed" translate="yes" xml:space="preserve">
          <source>RxGroovy &lt;code&gt;refCount share&lt;/code&gt;</source>
          <target state="translated">RxGroovy &lt;code&gt;refCount share&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="c77a9fdaaeb75e4596a1062f2043335bb36069a7" translate="yes" xml:space="preserve">
          <source>RxGroovy &lt;code&gt;replay cache&lt;/code&gt;</source>
          <target state="translated">Кеш &lt;code&gt;replay cache&lt;/code&gt; RxGroovy</target>
        </trans-unit>
        <trans-unit id="fb4329805a89823c171438c8f447ae2e4f87a84e" translate="yes" xml:space="preserve">
          <source>RxGroovy &lt;code&gt;retry retryWhen&lt;/code&gt;</source>
          <target state="translated">RxGroovy &lt;code&gt;retry retryWhen&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="abeecd46bd93c244851659e8d1b825d402a74824" translate="yes" xml:space="preserve">
          <source>RxGroovy &lt;code&gt;sample throttleFirst throttleLast&lt;/code&gt;</source>
          <target state="translated">RxGroovy &lt;code&gt;sample throttleFirst throttleLast&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="e58b504fc00d7d6eed45d4d58b84d6a6e69ace8d" translate="yes" xml:space="preserve">
          <source>RxGroovy &lt;code&gt;scan&lt;/code&gt;</source>
          <target state="translated">RxGroovy &lt;code&gt;scan&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="1107020d9fcac8104c5898d0b2e5e33c262526a4" translate="yes" xml:space="preserve">
          <source>RxGroovy &lt;code&gt;sequenceEqual&lt;/code&gt;</source>
          <target state="translated">RxGroovy &lt;code&gt;sequenceEqual&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="c45edc262a0fd5889e7ecfd21375e6c08c05a99a" translate="yes" xml:space="preserve">
          <source>RxGroovy &lt;code&gt;serialize&lt;/code&gt;</source>
          <target state="translated">RxGroovy &lt;code&gt;serialize&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="9463d0793a69b9b902bf72f9601411861b9828f8" translate="yes" xml:space="preserve">
          <source>RxGroovy &lt;code&gt;skip&lt;/code&gt;</source>
          <target state="translated">RxGroovy &lt;code&gt;skip&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="06302f5b37c97c5e7a43a44afbfcdf6370a984c1" translate="yes" xml:space="preserve">
          <source>RxGroovy &lt;code&gt;skipLast&lt;/code&gt;</source>
          <target state="translated">RxGroovy &lt;code&gt;skipLast&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="c56d9743d87f4fd09ae5943138fe6cb23601c938" translate="yes" xml:space="preserve">
          <source>RxGroovy &lt;code&gt;skipUntil&lt;/code&gt;</source>
          <target state="translated">RxGroovy &lt;code&gt;skipUntil&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="0eb06792cd04aa1c75086e752e60ef9f92a52e8e" translate="yes" xml:space="preserve">
          <source>RxGroovy &lt;code&gt;skipWhile&lt;/code&gt;</source>
          <target state="translated">RxGroovy &lt;code&gt;skipWhile&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="6aaee12b3c9790e36b981d65b87763749e681a5c" translate="yes" xml:space="preserve">
          <source>RxGroovy &lt;code&gt;startWith&lt;/code&gt;</source>
          <target state="translated">RxGroovy &lt;code&gt;startWith&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="6e1dcb245222d0163a829986bee52467b2b07810" translate="yes" xml:space="preserve">
          <source>RxGroovy &lt;code&gt;subscribeOn unsubscribeOn&lt;/code&gt;</source>
          <target state="translated">RxGroovy &lt;code&gt;subscribeOn unsubscribeOn&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="1de4fffb6f3c115d6f72e25acbbf64cf2c19830f" translate="yes" xml:space="preserve">
          <source>RxGroovy &lt;code&gt;sumDouble sumFloat sumInteger sumLong StringObservable.join StringObservable.stringConcat&lt;/code&gt;</source>
          <target state="translated">RxGroovy &lt;code&gt;sumDouble sumFloat sumInteger sumLong StringObservable.join StringObservable.stringConcat&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="2e0dfc16aaf7fa9c924bd573d812106010cb8c98" translate="yes" xml:space="preserve">
          <source>RxGroovy &lt;code&gt;switchOnNext&lt;/code&gt;</source>
          <target state="translated">RxGroovy &lt;code&gt;switchOnNext&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="29852cef5745c026f751ec2bbd1013455dbe4fd2" translate="yes" xml:space="preserve">
          <source>RxGroovy &lt;code&gt;takeLast takeLastBuffer&lt;/code&gt;</source>
          <target state="translated">RxGroovy &lt;code&gt;takeLast takeLastBuffer&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="789bf795b6a7e45f8644f178e5c9592b00af2f6e" translate="yes" xml:space="preserve">
          <source>RxGroovy &lt;code&gt;takeUntil&lt;/code&gt;</source>
          <target state="translated">RxGroovy &lt;code&gt;takeUntil&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="3fa7a01c54bdc617e04710428beabc1e1a65208b" translate="yes" xml:space="preserve">
          <source>RxGroovy &lt;code&gt;takeWhile&lt;/code&gt;</source>
          <target state="translated">RxGroovy &lt;code&gt;takeWhile&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="494a494dbd053ed14efbfdac86fde8bacece29f4" translate="yes" xml:space="preserve">
          <source>RxGroovy &lt;code&gt;timeInterval&lt;/code&gt;</source>
          <target state="translated">RxGroovy &lt;code&gt;timeInterval&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="1113d80d8523235ff22dda143fcf2707a210957f" translate="yes" xml:space="preserve">
          <source>RxGroovy &lt;code&gt;timeout&lt;/code&gt;</source>
          <target state="translated">Время &lt;code&gt;timeout&lt;/code&gt; RxGroovy</target>
        </trans-unit>
        <trans-unit id="e6591c17199216b214ea9d4be5f3724398354730" translate="yes" xml:space="preserve">
          <source>RxGroovy &lt;code&gt;timer&lt;/code&gt;</source>
          <target state="translated">RxGroovy &lt;code&gt;timer&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="2e73eff71e5c6e79d83e203752ee5a2451f1a44e" translate="yes" xml:space="preserve">
          <source>RxGroovy &lt;code&gt;timestamp&lt;/code&gt;</source>
          <target state="translated">Метка &lt;code&gt;timestamp&lt;/code&gt; RxGroovy</target>
        </trans-unit>
        <trans-unit id="c1c4c0c9a8d059c0135ced6b1e0705d563f5df6e" translate="yes" xml:space="preserve">
          <source>RxGroovy &lt;code&gt;using&lt;/code&gt;</source>
          <target state="translated">RxGroovy &lt;code&gt;using&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="5d7b02e5fc4cc6c16de22d7a6ad4ccd8349f12ad" translate="yes" xml:space="preserve">
          <source>RxGroovy &lt;code&gt;window&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;window&lt;/code&gt; RxGroovy</target>
        </trans-unit>
        <trans-unit id="b4dbc42e9bab5e3669188bf1a5cc8c52a453db56" translate="yes" xml:space="preserve">
          <source>RxGroovy &lt;code&gt;zip zipWith&lt;/code&gt;</source>
          <target state="translated">RxGroovy &lt;code&gt;zip zipWith&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="6dacd8c34365c2d35f5e320c3eed6f92587df052" translate="yes" xml:space="preserve">
          <source>RxGroovy also has a &lt;code&gt;nest&lt;/code&gt; operator that has one particular purpose: it converts a source Observable into an Observable that emits that source Observable as its sole item.</source>
          <target state="translated">RxGroovy также имеет &lt;code&gt;nest&lt;/code&gt; оператора , который имеет одну конкретной цели: он преобразует источник Observable в наблюдаемый , который излучает , что источник Наблюдаемого в качестве единственного элемента.</target>
        </trans-unit>
        <trans-unit id="d7f28527e01b5ed7414557dd37c7c33eb2466dd6" translate="yes" xml:space="preserve">
          <source>RxGroovy also implements the &lt;code&gt;distinctUntilChanged&lt;/code&gt; operator. It only compares emitted items from the source Observable against their immediate predecessors in order to determine whether or not they are distinct.</source>
          <target state="translated">RxGroovy также реализует &lt;code&gt;distinctUntilChanged&lt;/code&gt; оператора. Он только сравнивает отправленные элементы из источника Observable с их непосредственными предшественниками, чтобы определить, являются ли они различными.</target>
        </trans-unit>
        <trans-unit id="ed487ec3769a8b0729fcca340c88924a4871541e" translate="yes" xml:space="preserve">
          <source>RxGroovy also implements the &lt;code&gt;elementAtOrDefault&lt;/code&gt; operator. It differs from &lt;code&gt;elementAt&lt;/code&gt; in that it will not throw an exception if the source Observable emits fewer than &lt;code&gt;&lt;i&gt;index value&lt;/i&gt;&amp;nbsp;+&amp;nbsp;1&lt;/code&gt; items. Instead, it will emit a &amp;ldquo;default&amp;rdquo; item that you specify with an additional parameter to &lt;code&gt;elementAtOrDefault&lt;/code&gt;.</source>
          <target state="translated">RxGroovy также реализует оператор &lt;code&gt;elementAtOrDefault&lt;/code&gt; . Он отличается от &lt;code&gt;elementAt&lt;/code&gt; тем, что не вызовет исключения, если исходный Observable выдает меньше, чем &lt;code&gt;&lt;i&gt;index value&lt;/i&gt;&amp;nbsp;+&amp;nbsp;1&lt;/code&gt; элементов. Вместо этого он выдаст элемент &amp;laquo;по умолчанию&amp;raquo;, который вы укажете с дополнительным параметром &lt;code&gt;elementAtOrDefault&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="b0d0add7326bfce4eed943dd7035fd7d1b692241" translate="yes" xml:space="preserve">
          <source>RxGroovy also implements the &lt;code&gt;exists&lt;/code&gt; operator. It is similar to &lt;code&gt;contains&lt;/code&gt; but tests items emitted by the source Observable against a predicate function you supply, rather than testing them for identity with a particular object. The Observable returned from &lt;code&gt;exists&lt;/code&gt; will return &lt;code&gt;true&lt;/code&gt; if the source Observable emits an item that satisfies your predicate function, and &lt;code&gt;false&lt;/code&gt; if it completes without emitting such an item.</source>
          <target state="translated">RxGroovy также реализует оператор &lt;code&gt;exists&lt;/code&gt; . Он похож на &lt;code&gt;contains&lt;/code&gt; , но проверяет элементы, испускаемые источником Observable, на основе предоставленной вами функции предиката, а не проверяет их на идентичность с конкретным объектом. Observable, возвращенный из &lt;code&gt;exists&lt;/code&gt; , вернет &lt;code&gt;true&lt;/code&gt; , если исходный Observable испускает элемент, который удовлетворяет вашей функции предиката, и &lt;code&gt;false&lt;/code&gt; , если он завершается без испускания такого элемента.</target>
        </trans-unit>
        <trans-unit id="7ef11a79e0e0d52cc5ef3cb37ce0e18967c87454" translate="yes" xml:space="preserve">
          <source>RxGroovy also implements the &lt;code&gt;isEmpty&lt;/code&gt; operator. The Observable returned from &lt;code&gt;isEmpty&lt;/code&gt; will return &lt;code&gt;false&lt;/code&gt; if the source Observable emits an item, and &lt;code&gt;true&lt;/code&gt; if it completes without emitting an item.</source>
          <target state="translated">RxGroovy также реализует оператор &lt;code&gt;isEmpty&lt;/code&gt; . Observable, возвращенный из &lt;code&gt;isEmpty&lt;/code&gt; , вернет &lt;code&gt;false&lt;/code&gt; , если исходный Observable испускает элемент, и &lt;code&gt;true&lt;/code&gt; , если он завершается без испускания элемента.</target>
        </trans-unit>
        <trans-unit id="2c17f72df555b9b206ae4683fd7fb5811ff19f17" translate="yes" xml:space="preserve">
          <source>RxGroovy also implements the &lt;code&gt;switchMap&lt;/code&gt; operator. It behaves much like &lt;code&gt;flatMap&lt;/code&gt;, except that whenever a new item is emitted by the source Observable, it will unsubscribe to and stop mirroring the Observable that was generated from the previously-emitted item, and begin only mirroring the current one.</source>
          <target state="translated">RxGroovy также реализует оператор &lt;code&gt;switchMap&lt;/code&gt; . Он ведет себя так же, как &lt;code&gt;flatMap&lt;/code&gt; , за исключением того, что всякий раз, когда источник Observable генерирует новый элемент, он отменяет подписку на Observable, который был сгенерирован из ранее выданного элемента, и прекращает его зеркальное отображение, и начинает только зеркальное отображение текущего.</target>
        </trans-unit>
        <trans-unit id="e376db375e41af7651ffe2c3e4f41d0446aa58cd" translate="yes" xml:space="preserve">
          <source>RxGroovy has several Do variants.</source>
          <target state="translated">У RxGroovy есть несколько вариантов Do.</target>
        </trans-unit>
        <trans-unit id="ea2489ea007d0c7e83d138170c0a13a7d67c93b8" translate="yes" xml:space="preserve">
          <source>RxGroovy has two versions of this operator: &lt;code&gt;retry&lt;/code&gt; and &lt;code&gt;retryWhen&lt;/code&gt;.</source>
          <target state="translated">RxGroovy имеет две версии этого оператора: &lt;code&gt;retry&lt;/code&gt; и &lt;code&gt;retryWhen&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="00ec54d6e9fc1f354863eb29fc09009d36f39b55" translate="yes" xml:space="preserve">
          <source>RxGroovy implements a &lt;code&gt;max&lt;/code&gt; operator. It takes an optional comparator that it will use instead of its default to compare the value of two items. If more than one item has the identical maximum value, &lt;code&gt;max&lt;/code&gt; will emit the &lt;em&gt;last&lt;/em&gt; such item emitted by the source Observable.</source>
          <target state="translated">RxGroovy реализует оператор &lt;code&gt;max&lt;/code&gt; . Требуется дополнительный компаратор, который он будет использовать вместо своего значения по умолчанию для сравнения значений двух элементов. Если более чем один элемент имеет одинаковое максимальное значение, &lt;code&gt;max&lt;/code&gt; будет генерировать &lt;em&gt;последний&lt;/em&gt; такой элемент, выпущенный источником Observable.</target>
        </trans-unit>
        <trans-unit id="4acd770caf9f1cc0c55f6aab09855c46942f265e" translate="yes" xml:space="preserve">
          <source>RxGroovy implements a &lt;code&gt;min&lt;/code&gt; operator. It takes an optional comparator that it will use instead of its default to compare the value of two items. If more than one item has the identical minimum value, &lt;code&gt;min&lt;/code&gt; will emit the &lt;em&gt;last&lt;/em&gt; such item emitted by the source Observable.</source>
          <target state="translated">RxGroovy реализует оператор &lt;code&gt;min&lt;/code&gt; . Требуется дополнительный компаратор, который он будет использовать вместо своего значения по умолчанию для сравнения значений двух элементов. Если более чем один элемент имеет одинаковое минимальное значение, &lt;code&gt;min&lt;/code&gt; будет выдавать &lt;em&gt;последний&lt;/em&gt; такой элемент, выпущенный источником Observable.</target>
        </trans-unit>
        <trans-unit id="72df3e7acb7782379c3c12044f8d008d37936d8a" translate="yes" xml:space="preserve">
          <source>RxGroovy implements reactive pull backpressure, and many of its operators support that form of backpressure. It also has three operators that you can apply to Observables that have not been written to support backpressure:</source>
          <target state="translated">RxGroovy реализует реактивное противодавление вытяжки,и многие операторы поддерживают эту форму противодавления.В ней также есть три оператора,которые вы можете применить к &quot;Наблюдателям&quot;,которые не были написаны для поддержки противодавления:</target>
        </trans-unit>
        <trans-unit id="9b93c1262c50007c96b3f43da550c31c3fb64c0b" translate="yes" xml:space="preserve">
          <source>RxGroovy implements several variants of &lt;code&gt;subscribe&lt;/code&gt;.</source>
          <target state="translated">RxGroovy реализует несколько вариантов &lt;code&gt;subscribe&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="3f4b768d71a0362bc76130220d7816979d6d2dd6" translate="yes" xml:space="preserve">
          <source>RxGroovy implements the &lt;code&gt;flatMap&lt;/code&gt; operator.</source>
          <target state="translated">RxGroovy реализует оператор &lt;code&gt;flatMap&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="74d8a953185ca387e100dd3f33af081c9d39eaa0" translate="yes" xml:space="preserve">
          <source>RxGroovy implements the &lt;code&gt;groupBy&lt;/code&gt; operator. The Observable it returns emits items of a particular subclass of Observable &amp;mdash; the &lt;code&gt;GroupedObservable&lt;/code&gt;. Objects that implement the &lt;code&gt;GroupedObservable&lt;/code&gt; interface have an additional method &amp;mdash; &lt;code&gt;getkey&lt;/code&gt; &amp;mdash; by which you can retrieve the key by which items were designated for this particular &lt;code&gt;GroupedObservable&lt;/code&gt;.</source>
          <target state="translated">RxGroovy реализует оператор &lt;code&gt;groupBy&lt;/code&gt; . Возвращаемый Observable испускает элементы определенного подкласса Observable - &lt;code&gt;GroupedObservable&lt;/code&gt; . У объектов, реализующих интерфейс &lt;code&gt;GroupedObservable&lt;/code&gt; , есть дополнительный метод - &lt;code&gt;getkey&lt;/code&gt; - с помощью которого вы можете получить ключ, по которому элементы были назначены для этого конкретного &lt;code&gt;GroupedObservable&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="3fdb7fb2973b7171aa7743ba7fcda328d7c3f907" translate="yes" xml:space="preserve">
          <source>RxGroovy implements the Catch operator in the same way as does RxJava. There are three distinct operators that provide this functionality:</source>
          <target state="translated">RxGroovy внедряет оператора Catch точно так же,как и RxJava.Есть три различных оператора,которые обеспечивают эту функциональность:</target>
        </trans-unit>
        <trans-unit id="15bfb6c475f4ebb7d7439380e0f39588f93a94eb" translate="yes" xml:space="preserve">
          <source>RxGroovy implements these operators as &lt;code&gt;empty&lt;/code&gt;, &lt;code&gt;never&lt;/code&gt;, and &lt;code&gt;error&lt;/code&gt;. The &lt;code&gt;error&lt;/code&gt; operator takes as a parameter the &lt;code&gt;Throwable&lt;/code&gt; with which you want the Observable to terminate.</source>
          <target state="translated">RxGroovy реализует эти операторы как &lt;code&gt;empty&lt;/code&gt; , &lt;code&gt;never&lt;/code&gt; и &lt;code&gt;error&lt;/code&gt; . Оператор &lt;code&gt;error&lt;/code&gt; принимает в качестве параметра &lt;code&gt;Throwable&lt;/code&gt; , с которым вы хотите завершить Observable.</target>
        </trans-unit>
        <trans-unit id="3b385685d7e5c0b961d57b3b0bc6f72fc501b25a" translate="yes" xml:space="preserve">
          <source>RxGroovy implements this operator as &lt;code&gt;all&lt;/code&gt;. It does not by default operate on any particular &lt;a href=&quot;../scheduler&quot;&gt;Scheduler&lt;/a&gt;. The following example shows how to use this operator:</source>
          <target state="translated">RxGroovy реализует этот оператор как &lt;code&gt;all&lt;/code&gt; . По умолчанию он не работает с каким-либо конкретным &lt;a href=&quot;../scheduler&quot;&gt;планировщиком&lt;/a&gt; . В следующем примере показано, как использовать этот оператор:</target>
        </trans-unit>
        <trans-unit id="7c2a8ffaadbe70d4f548c99d34d30fdd8c847cb5" translate="yes" xml:space="preserve">
          <source>RxGroovy implements this operator as &lt;code&gt;amb&lt;/code&gt;. It takes up to nine Observables as individual parameters, or a single Iterable of Observables. There is also an instance version of the operator, &lt;code&gt;ambWith&lt;/code&gt;, so that, for example, instead of writing &lt;code&gt;Observable.amb(o1,o2)&lt;/code&gt; you could also write &lt;code&gt;o1.ambWith(o2)&lt;/code&gt; for the same effect.</source>
          <target state="translated">RxGroovy реализует этот оператор как &lt;code&gt;amb&lt;/code&gt; . Он принимает до девяти Observable в качестве отдельных параметров или один Iterable of Observables. Также существует экземплярная версия оператора &lt;code&gt;ambWith&lt;/code&gt; , так что, например, вместо записи &lt;code&gt;Observable.amb(o1,o2)&lt;/code&gt; вы также можете написать &lt;code&gt;o1.ambWith(o2)&lt;/code&gt; для того же эффекта.</target>
        </trans-unit>
        <trans-unit id="40033729330b6e61a94c443acf41446f5f9764f9" translate="yes" xml:space="preserve">
          <source>RxGroovy implements this operator as &lt;code&gt;combineLatest&lt;/code&gt;. It may take between two and nine Observables (as well as the combining function) as parameters, or a single &lt;code&gt;List&lt;/code&gt; of Observables (as well as the combining function). It does not by default operate on any particular &lt;a href=&quot;../scheduler&quot;&gt;Scheduler&lt;/a&gt;.</source>
          <target state="translated">RxGroovy реализует этот оператор как &lt;code&gt;combineLatest&lt;/code&gt; . Он может принимать от двух до девяти Observables (а также функцию объединения) в качестве параметров или один &lt;code&gt;List&lt;/code&gt; of Observables (а также функцию объединения). По умолчанию он не работает с каким-либо конкретным &lt;a href=&quot;../scheduler&quot;&gt;планировщиком&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="ee8b48cad82d6a44d353428f66957455c3c4557b" translate="yes" xml:space="preserve">
          <source>RxGroovy implements this operator as &lt;code&gt;concat&lt;/code&gt;. There are variants of this operator that take between two and nine Observables as parameters, and that concatenate them in the order they appear in the parameter list. There is also a variant that takes as a parameter an Observable of Observables, and concatenates each of these Observables in the order that they are emitted.</source>
          <target state="translated">RxGroovy реализует этот оператор как &lt;code&gt;concat&lt;/code&gt; . Существуют варианты этого оператора, которые принимают от двух до девяти Observable в качестве параметров и объединяют их в том порядке, в котором они появляются в списке параметров. Существует также вариант, который принимает в качестве параметра Observable или Observables и объединяет каждый из этих Observable в том порядке, в котором они были отправлены.</target>
        </trans-unit>
        <trans-unit id="713047098702b8915fc86f75b20aa1e55c622742" translate="yes" xml:space="preserve">
          <source>RxGroovy implements this operator as &lt;code&gt;contains&lt;/code&gt;. It does not by default operate on any particular &lt;a href=&quot;../scheduler&quot;&gt;Scheduler&lt;/a&gt;.</source>
          <target state="translated">RxGroovy реализует этот оператор как &lt;code&gt;contains&lt;/code&gt; . По умолчанию он не работает с каким-либо конкретным &lt;a href=&quot;../scheduler&quot;&gt;планировщиком&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="6602c38283ec529692c8372f859a82e073664929" translate="yes" xml:space="preserve">
          <source>RxGroovy implements this operator as &lt;code&gt;create&lt;/code&gt;.</source>
          <target state="translated">RxGroovy реализует этот оператор как &lt;code&gt;create&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="249b58d38363372b2d30a6822c8c042d33ea5873" translate="yes" xml:space="preserve">
          <source>RxGroovy implements this operator as &lt;code&gt;defaultIfEmpty&lt;/code&gt;.</source>
          <target state="translated">RxGroovy реализует этот оператор как &lt;code&gt;defaultIfEmpty&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="a098240472c9d245188414435a5bc56587cef514" translate="yes" xml:space="preserve">
          <source>RxGroovy implements this operator as &lt;code&gt;defer&lt;/code&gt;. This operator takes as its sole parameter an Observable factory function of your choosing. This function takes no parameters and returns an Observable.</source>
          <target state="translated">RxGroovy реализует этот оператор как &lt;code&gt;defer&lt;/code&gt; . Этот оператор принимает в качестве единственного параметра любую наблюдаемую фабричную функцию по вашему выбору. Эта функция не принимает параметров и возвращает Observable.</target>
        </trans-unit>
        <trans-unit id="5191f06ecff272cad1725829fb7bbdf9f99f8d45" translate="yes" xml:space="preserve">
          <source>RxGroovy implements this operator as &lt;code&gt;distinct&lt;/code&gt;.</source>
          <target state="translated">RxGroovy реализует этот оператор &lt;code&gt;distinct&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="7689cb285da0255ec58c1bb67dd228c81db77bb2" translate="yes" xml:space="preserve">
          <source>RxGroovy implements this operator as &lt;code&gt;elementAt&lt;/code&gt;. Pass &lt;code&gt;elementAt&lt;/code&gt; a zero-based index value and it will emit the solitary item from the source Observable&amp;rsquo;s sequence that matches that index value (for example, if you pass the index value 5, &lt;code&gt;elementAt&lt;/code&gt; will emit the sixth item emitted by the source Observable).</source>
          <target state="translated">RxGroovy реализует этот оператор как &lt;code&gt;elementAt&lt;/code&gt; . Передайте &lt;code&gt;elementAt&lt;/code&gt; с нулевым значением индекса, и он испустит отдельный элемент из исходной последовательности Observable, который соответствует этому значению индекса (например, если вы передадите значение индекса 5, &lt;code&gt;elementAt&lt;/code&gt; выдаст шестой элемент, излучаемый исходным Observable).</target>
        </trans-unit>
        <trans-unit id="b9c0f227fbef4fcade4e3476d5206203df90ea75" translate="yes" xml:space="preserve">
          <source>RxGroovy implements this operator as &lt;code&gt;filter&lt;/code&gt;. You can filter an Observable, discarding any items that do not meet some test, by passing a filtering function into the &lt;code&gt;filter&lt;/code&gt; operator. For example, the following code filters a list of integers, emitting only those that are even (that is, where the remainder from dividing the number by two is zero):</source>
          <target state="translated">RxGroovy реализует этот оператор как &lt;code&gt;filter&lt;/code&gt; . Вы можете отфильтровать Observable, отбросив все элементы, которые не соответствуют какому-либо тесту, передав функцию фильтрации в оператор &lt;code&gt;filter&lt;/code&gt; . Например, следующий код фильтрует список целых чисел, выдавая только те, которые являются четными (то есть, где остаток от деления числа на два равен нулю):</target>
        </trans-unit>
        <trans-unit id="98a35fdb6bc3ac142b31fc3ffdef743c93a9fde7" translate="yes" xml:space="preserve">
          <source>RxGroovy implements this operator as &lt;code&gt;ignoreElements&lt;/code&gt;.</source>
          <target state="translated">RxGroovy реализует этот оператор как &lt;code&gt;ignoreElements&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="80d14189e2f84b1fe8ace57b8d176590850612b4" translate="yes" xml:space="preserve">
          <source>RxGroovy implements this operator as &lt;code&gt;interval&lt;/code&gt;. It accepts as its parameters a span of time to wait between emissions and the &lt;code&gt;TimeUnit&lt;/code&gt; in which this span is measured.</source>
          <target state="translated">RxGroovy реализует этот оператор как &lt;code&gt;interval&lt;/code&gt; . Он принимает в качестве своих параметров интервал времени ожидания между выбросами и &lt;code&gt;TimeUnit&lt;/code&gt; , в котором этот интервал измеряется.</target>
        </trans-unit>
        <trans-unit id="e325c9b4d36933adc5fe596cf740125ca517c05c" translate="yes" xml:space="preserve">
          <source>RxGroovy implements this operator as &lt;code&gt;just&lt;/code&gt;. It accepts between one and nine items as parameters, and returns an Observable that emits these items in the same order as they are given in the parameter list.</source>
          <target state="translated">RxGroovy реализует этот оператор как &lt;code&gt;just&lt;/code&gt; . Он принимает от одного до девяти элементов в качестве параметров и возвращает Observable, который испускает эти элементы в том же порядке, в каком они указаны в списке параметров.</target>
        </trans-unit>
        <trans-unit id="a8d4dafe26dda8404f55f627d1230c917fefdfa0" translate="yes" xml:space="preserve">
          <source>RxGroovy implements this operator as &lt;code&gt;map&lt;/code&gt;. For example, the following code maps a function that squares the incoming value onto the values in &lt;code&gt;numbers&lt;/code&gt;:</source>
          <target state="translated">RxGroovy реализует этот оператор как &lt;code&gt;map&lt;/code&gt; . Например, следующий код отображает функцию, которая возводит входящее значение в квадрат со значениями в &lt;code&gt;numbers&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="84f64d4a7d0fe5f5bf5716b155e895a1adae56c1" translate="yes" xml:space="preserve">
          <source>RxGroovy implements this operator as &lt;code&gt;merge&lt;/code&gt;, &lt;code&gt;mergeWith&lt;/code&gt;, and &lt;code&gt;mergeDelayError&lt;/code&gt;.</source>
          <target state="translated">RxGroovy реализует этот оператор как &lt;code&gt;merge&lt;/code&gt; , &lt;code&gt;mergeWith&lt;/code&gt; и &lt;code&gt;mergeDelayError&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="5bdf42a28369b35b879cdf48bca1cbdd5a6dd78a" translate="yes" xml:space="preserve">
          <source>RxGroovy implements this operator as &lt;code&gt;publish&lt;/code&gt;.</source>
          <target state="translated">RxGroovy реализует этот оператор как &lt;code&gt;publish&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="757854a67a4ec98f418475a3c0382552339cb45c" translate="yes" xml:space="preserve">
          <source>RxGroovy implements this operator as &lt;code&gt;range&lt;/code&gt;. It accepts as its parameters the start value of the range and the number of items in the range. If you set that number of items to zero, the resulting Observable will emit no values (if you set it to a negative number, &lt;code&gt;range&lt;/code&gt; will cause an exception).</source>
          <target state="translated">RxGroovy реализует этот оператор как &lt;code&gt;range&lt;/code&gt; . Он принимает в качестве параметров начальное значение диапазона и количество элементов в диапазоне. Если вы установите это количество элементов равным нулю, результирующий Observable не будет выдавать никаких значений (если вы установите отрицательное число, &lt;code&gt;range&lt;/code&gt; вызовет исключение).</target>
        </trans-unit>
        <trans-unit id="fa8243ccd038e975d04260bfcc8d94ea9b9da251" translate="yes" xml:space="preserve">
          <source>RxGroovy implements this operator as &lt;code&gt;refCount&lt;/code&gt;.</source>
          <target state="translated">RxGroovy реализует этот оператор как &lt;code&gt;refCount&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="d07b68034de2e505cec660a55b51b1e9f09c72bd" translate="yes" xml:space="preserve">
          <source>RxGroovy implements this operator as &lt;code&gt;repeat&lt;/code&gt;. It does not initiate an Observable, but operates on an Observable in such a way that it repeats the sequence emitted by the source Observable as its own sequence, either infinitely, or in the case of &lt;code&gt;repeat(&lt;i&gt;n&lt;/i&gt;)&lt;/code&gt;,</source>
          <target state="translated">RxGroovy реализует этот оператор как &lt;code&gt;repeat&lt;/code&gt; . Он не инициирует Observable, но работает с Observable таким образом, что он повторяет последовательность, испущенную исходным Observable, как свою собственную последовательность, либо бесконечно, либо в случае &lt;code&gt;repeat(&lt;i&gt;n&lt;/i&gt;)&lt;/code&gt; ,</target>
        </trans-unit>
        <trans-unit id="fa04d25f248cd0d005390521c2216b4f239dcacf" translate="yes" xml:space="preserve">
          <source>RxGroovy implements this operator as &lt;code&gt;sample&lt;/code&gt; and &lt;code&gt;throttleLast&lt;/code&gt;.</source>
          <target state="translated">RxGroovy реализует этот оператор как &lt;code&gt;sample&lt;/code&gt; и &lt;code&gt;throttleLast&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="4ec4ee0b07fedbf44ca4d3905d9438e678ab2751" translate="yes" xml:space="preserve">
          <source>RxGroovy implements this operator as &lt;code&gt;scan&lt;/code&gt;. The following code, for example, takes an Observable that emits a consecutive sequence of</source>
          <target state="translated">RxGroovy реализует этот оператор как &lt;code&gt;scan&lt;/code&gt; . Следующий код, например, принимает Observable, который генерирует последовательную последовательность</target>
        </trans-unit>
        <trans-unit id="5e70d045f3e8f9fb3f3138bbc39a102e8738a7f6" translate="yes" xml:space="preserve">
          <source>RxGroovy implements this operator as &lt;code&gt;serialize&lt;/code&gt;. It does not by default operate on any particular &lt;a href=&quot;../scheduler&quot;&gt;Scheduler&lt;/a&gt;.</source>
          <target state="translated">RxGroovy реализует этот оператор как &lt;code&gt;serialize&lt;/code&gt; . По умолчанию он не работает с каким-либо конкретным &lt;a href=&quot;../scheduler&quot;&gt;планировщиком&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="66131458bc4317410d186e55aafb95ca1cf71317" translate="yes" xml:space="preserve">
          <source>RxGroovy implements this operator as &lt;code&gt;startWith&lt;/code&gt;.</source>
          <target state="translated">RxGroovy реализует этот оператор как &lt;code&gt;startWith&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="143d5dfb65f42a694fb58192bedd1997e0fef8b9" translate="yes" xml:space="preserve">
          <source>RxGroovy implements this operator as &lt;code&gt;switchOnNext&lt;/code&gt;. It does not by default operate on any particular &lt;a href=&quot;../scheduler&quot;&gt;Scheduler&lt;/a&gt;.</source>
          <target state="translated">RxGroovy реализует этот оператор как &lt;code&gt;switchOnNext&lt;/code&gt; . По умолчанию он не работает с каким-либо конкретным &lt;a href=&quot;../scheduler&quot;&gt;планировщиком&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="af3521a7d07c09b0c53a51c9b558dda01ec89729" translate="yes" xml:space="preserve">
          <source>RxGroovy implements this operator as &lt;code&gt;throttleWithTimeout&lt;/code&gt; and &lt;code&gt;debounce&lt;/code&gt;.</source>
          <target state="translated">RxGroovy реализует этот оператор как &lt;code&gt;throttleWithTimeout&lt;/code&gt; и &lt;code&gt;debounce&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="e4fee10489f2dde2a8718e2831c0a49eb0e9428e" translate="yes" xml:space="preserve">
          <source>RxGroovy implements this operator as &lt;code&gt;timeout&lt;/code&gt;, but in several variants.</source>
          <target state="translated">RxGroovy реализует этот оператор как &lt;code&gt;timeout&lt;/code&gt; , но в нескольких вариантах.</target>
        </trans-unit>
        <trans-unit id="306b5b7f7655e4f3c3d48b47cbd68dde4b413f6b" translate="yes" xml:space="preserve">
          <source>RxGroovy implements this operator as &lt;code&gt;timer&lt;/code&gt;.</source>
          <target state="translated">RxGroovy реализует этот оператор как &lt;code&gt;timer&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="b41ab15ed4e4b3634fa592b05c1bd4356e0403ed" translate="yes" xml:space="preserve">
          <source>RxGroovy implements this operator as several variants of &lt;code&gt;zip&lt;/code&gt; and also as &lt;code&gt;zipWith&lt;/code&gt;, an instance function version of the operator.</source>
          <target state="translated">RxGroovy реализует этот оператор как несколько вариантов &lt;code&gt;zip&lt;/code&gt; , а также как &lt;code&gt;zipWith&lt;/code&gt; , версию функции экземпляра оператора.</target>
        </trans-unit>
        <trans-unit id="1ab4285a16fea85b5011a5d762922cecf2b9abcb" translate="yes" xml:space="preserve">
          <source>RxGroovy implements this operator as variants of &lt;code&gt;delay&lt;/code&gt; and &lt;code&gt;delaySubscription&lt;/code&gt;.</source>
          <target state="translated">RxGroovy реализует этот оператор как варианты &lt;code&gt;delay&lt;/code&gt; и &lt;code&gt;delaySubscription&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="297ff09ad1fee6372badff1acb02a01184e1b455" translate="yes" xml:space="preserve">
          <source>RxJS</source>
          <target state="translated">RxJS</target>
        </trans-unit>
        <trans-unit id="0405f8182eedfae5a9df96c2aad8f3afcdf39126" translate="yes" xml:space="preserve">
          <source>RxJS &lt;code&gt;amb&lt;/code&gt;</source>
          <target state="translated">RxJS &lt;code&gt;amb&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="556a56e07034255b714ba69837b773b71b898646" translate="yes" xml:space="preserve">
          <source>RxJS &lt;code&gt;and thenDo when&lt;/code&gt;</source>
          <target state="translated">RxJS, &lt;code&gt;and thenDo when&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="ca04db96857dfe6611176b4a7e1290c5aad1ea59" translate="yes" xml:space="preserve">
          <source>RxJS &lt;code&gt;average&lt;/code&gt;</source>
          <target state="translated">RxJS в &lt;code&gt;average&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="e0a6bc43a1b6ed14a959439dd7be5e471867aec1" translate="yes" xml:space="preserve">
          <source>RxJS &lt;code&gt;buffer bufferWithCount bufferWithTime bufferWithTimeOrCount&lt;/code&gt;</source>
          <target state="translated">RxJS &lt;code&gt;buffer bufferWithCount bufferWithTime bufferWithTimeOrCount&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="10b0bf74807674015ba4e9cb57e5628d18f889d4" translate="yes" xml:space="preserve">
          <source>RxJS &lt;code&gt;case defer if switchCase&lt;/code&gt;</source>
          <target state="translated">Задержка &lt;code&gt;case defer if switchCase&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="0917ce1a1c90fc739971253869c7d5a33b23d6a5" translate="yes" xml:space="preserve">
          <source>RxJS &lt;code&gt;catch onErrorResumeNext&lt;/code&gt;</source>
          <target state="translated">RxJS &lt;code&gt;catch onErrorResumeNext&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="76ae845b78e1e88e3decb9d124b4ac191d3d999b" translate="yes" xml:space="preserve">
          <source>RxJS &lt;code&gt;combineLatest withLatestFrom&lt;/code&gt;</source>
          <target state="translated">RxJS &lt;code&gt;combineLatest withLatestFrom&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="a7965fa5d4ef75dc3da771f3e30babb125cc4af3" translate="yes" xml:space="preserve">
          <source>RxJS &lt;code&gt;concat concatAll&lt;/code&gt;</source>
          <target state="translated">RxJS &lt;code&gt;concat concatAll&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="9a70b3fd3a8c4880e172e6f84893c89742c2a795" translate="yes" xml:space="preserve">
          <source>RxJS &lt;code&gt;concatMap concatMapObserver flatMap flatMapFirst flatMapLatest flatMapObserver flatMapWithMaxConcurrency for forIn manySelect selectConcat selectConcatObserver selectMany selectManyObserver selectSwitch selectSwitchFirst selectWithMatchConcurrent switchMap&lt;/code&gt;</source>
          <target state="translated">RxJS &lt;code&gt;concatMap concatMapObserver flatMap flatMapFirst flatMapLatest flatMapObserver flatMapWithMaxConcurrency for forIn manySelect selectConcat selectConcatObserver selectMany selectManyObserver selectSwitch selectSwitchFirst selectWithMatchConcurrent switchMap&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="994e90cbccca62db327b63dfec594e35af8e082d" translate="yes" xml:space="preserve">
          <source>RxJS &lt;code&gt;connect&lt;/code&gt;</source>
          <target state="translated">RxJS &lt;code&gt;connect&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="6e1ae1aa2607aaa3b8eb0135b5cfa3cbda798905" translate="yes" xml:space="preserve">
          <source>RxJS &lt;code&gt;contains findIndex indexOf isEmpty&lt;/code&gt;</source>
          <target state="translated">RxJS &lt;code&gt;contains findIndex indexOf isEmpty&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="7b19387222d4beb3fafbe6c2abf12b5741832f66" translate="yes" xml:space="preserve">
          <source>RxJS &lt;code&gt;controlled pausable pausableBuffered stopAndWait windowed&lt;/code&gt;</source>
          <target state="translated">Pausable, &lt;code&gt;controlled pausable pausableBuffered stopAndWait windowed&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="da1c801d405a69e10a0032bfe3fcc5a5ca040dea" translate="yes" xml:space="preserve">
          <source>RxJS &lt;code&gt;count&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;count&lt;/code&gt; RxJS</target>
        </trans-unit>
        <trans-unit id="d702e9b32f4c6f5528780be97381b2fb0fc6a9c4" translate="yes" xml:space="preserve">
          <source>RxJS &lt;code&gt;create createWithDisposable generate generateWithAbsoluteTime generateWithRelativeTime&lt;/code&gt;</source>
          <target state="translated">RxJS &lt;code&gt;create createWithDisposable generate generateWithAbsoluteTime generateWithRelativeTime&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="f1891cf6cb37e968dafd840298f3d29794b7d464" translate="yes" xml:space="preserve">
          <source>RxJS &lt;code&gt;debounce debounceWithSelector throttleWithTimeout&lt;/code&gt;</source>
          <target state="translated">RxJS &lt;code&gt;debounce debounceWithSelector throttleWithTimeout&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="91735e7df3f6dc7b00b352f13b5ebc5a6443474d" translate="yes" xml:space="preserve">
          <source>RxJS &lt;code&gt;defaultIfEmpty&lt;/code&gt;</source>
          <target state="translated">RxJS &lt;code&gt;defaultIfEmpty&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="fa30bf926a77e93c6e584047f2bb8495287c81f1" translate="yes" xml:space="preserve">
          <source>RxJS &lt;code&gt;delay delaySubscription delayWithSelector&lt;/code&gt;</source>
          <target state="translated">RxJS &lt;code&gt;delay delaySubscription delayWithSelector&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="d8a8e3d196eaa00eb4e98d7971db6dbbcd4bf8bd" translate="yes" xml:space="preserve">
          <source>RxJS &lt;code&gt;dematerialize&lt;/code&gt;</source>
          <target state="translated">RxJS &lt;code&gt;dematerialize&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="51aecb65f1b5888fb7411280ad49c1f4113704ac" translate="yes" xml:space="preserve">
          <source>RxJS &lt;code&gt;distinct distinctUntilChanged&lt;/code&gt;</source>
          <target state="translated">RxJS &lt;code&gt;distinct distinctUntilChanged&lt;/code&gt; untilChanged</target>
        </trans-unit>
        <trans-unit id="203360bcdc1e20125967968879cd39a9161bcc94" translate="yes" xml:space="preserve">
          <source>RxJS &lt;code&gt;do doOnCompleted doOnError doOnNext finally tap tapOnCompleted tapOnError tapOnNext&lt;/code&gt;</source>
          <target state="translated">RxJS &lt;code&gt;do doOnCompleted doOnError doOnNext finally tap tapOnCompleted tapOnError tapOnNext&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="5817fdc0cb758ed3b01fed1b6d105782ffd78c63" translate="yes" xml:space="preserve">
          <source>RxJS &lt;code&gt;doWhile repeat while&lt;/code&gt;</source>
          <target state="translated">RxJS &lt;code&gt;doWhile repeat while&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="e92e9e6dfc8e1410330eab70ba41a5eb850db924" translate="yes" xml:space="preserve">
          <source>RxJS &lt;code&gt;elementAt&lt;/code&gt;</source>
          <target state="translated">Элемент &lt;code&gt;elementAt&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="572afb64c764213947669967fec23c100b42e06b" translate="yes" xml:space="preserve">
          <source>RxJS &lt;code&gt;empty never throw&lt;/code&gt;</source>
          <target state="translated">RxJS &lt;code&gt;empty never throw&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="7f33abec7d9c8b029a73473f199771e06f0efe7c" translate="yes" xml:space="preserve">
          <source>RxJS &lt;code&gt;every jortSort jortSortUntil&lt;/code&gt;</source>
          <target state="translated">RxJS &lt;code&gt;every jortSort jortSortUntil&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="7969d1b681f3e7e1a514141890a81ccf6061183b" translate="yes" xml:space="preserve">
          <source>RxJS &lt;code&gt;expand scan&lt;/code&gt;</source>
          <target state="translated">RxJS &lt;code&gt;expand scan&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="31f2c7a8eddcc0434e1bd7f6cef6ad5058cb2b07" translate="yes" xml:space="preserve">
          <source>RxJS &lt;code&gt;filter where&lt;/code&gt;</source>
          <target state="translated">RxJS &lt;code&gt;filter where&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="e1b3a23ce466d36eb3d964c1511a34db74d230b6" translate="yes" xml:space="preserve">
          <source>RxJS &lt;code&gt;find findIndex first single&lt;/code&gt;</source>
          <target state="translated">RxJS &lt;code&gt;find findIndex first single&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="9da56190fed38d83eea7d6b86794ca556c20c19b" translate="yes" xml:space="preserve">
          <source>RxJS &lt;code&gt;forEach subscribe subscribeOnCompleted subscribeOnError subscribeOnNext&lt;/code&gt;</source>
          <target state="translated">RxJS для каждой &lt;code&gt;forEach subscribe subscribeOnCompleted subscribeOnError subscribeOnNext&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="94f5979db944c9ad36eb3f4d843f610951193f41" translate="yes" xml:space="preserve">
          <source>RxJS &lt;code&gt;forkJoin zip zipArray&lt;/code&gt;</source>
          <target state="translated">RxJS &lt;code&gt;forkJoin zip zipArray&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="7253a1d47cd42293208492b799ffd7b3b100705b" translate="yes" xml:space="preserve">
          <source>RxJS &lt;code&gt;from fromCallback fromEvent fromEventPattern fromNodeCallback fromPromise of ofArrayChanges ofObjectChanges ofWithScheduler pairs&lt;/code&gt;</source>
          <target state="translated">RxJS &lt;code&gt;from fromCallback fromEvent fromEventPattern fromNodeCallback fromPromise of ofArrayChanges ofObjectChanges ofWithScheduler pairs&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="2d233c2d498b8e7ddfb69aaad43f7ea2aeca1804" translate="yes" xml:space="preserve">
          <source>RxJS &lt;code&gt;groupBy groupByUntil&lt;/code&gt;</source>
          <target state="translated">RxJS &lt;code&gt;groupBy groupByUntil&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="6b3b5949c562688c8500411a9abe9c528444ddad" translate="yes" xml:space="preserve">
          <source>RxJS &lt;code&gt;ignoreElements&lt;/code&gt;</source>
          <target state="translated">RxJS &lt;code&gt;ignoreElements&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="a5ba7f475ba55e2370be413eec2a4526dcaf561c" translate="yes" xml:space="preserve">
          <source>RxJS &lt;code&gt;interval&lt;/code&gt;</source>
          <target state="translated">RxJS &lt;code&gt;interval&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="dcf6e2baf44f8278c749b506e070be89a898a7fd" translate="yes" xml:space="preserve">
          <source>RxJS &lt;code&gt;join groupJoin&lt;/code&gt;</source>
          <target state="translated">RxJS &lt;code&gt;join groupJoin&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="95723a181e58b10d684c1d5951fdd226ba0a7e85" translate="yes" xml:space="preserve">
          <source>RxJS &lt;code&gt;just return&lt;/code&gt;</source>
          <target state="translated">RxJS &lt;code&gt;just return&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="9e6c055d00a26f6762671cc5e16330bca1b0e802" translate="yes" xml:space="preserve">
          <source>RxJS &lt;code&gt;last&lt;/code&gt;</source>
          <target state="translated">RxJS &lt;code&gt;last&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="e9202627a31cd651ccacfda6efd17b02a3a0fffc" translate="yes" xml:space="preserve">
          <source>RxJS &lt;code&gt;let letBind multicast publish publishLast publishValue&lt;/code&gt;</source>
          <target state="translated">RxJS &lt;code&gt;let letBind multicast publish publishLast publishValue&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="34a481487b318e5ccc68522632019a3626f4b896" translate="yes" xml:space="preserve">
          <source>RxJS &lt;code&gt;map pluck select&lt;/code&gt;</source>
          <target state="translated">Выбор &lt;code&gt;map pluck select&lt;/code&gt; RxJS</target>
        </trans-unit>
        <trans-unit id="d1fbb2d5f732d6f277fdb6fddd17a77a8678fa49" translate="yes" xml:space="preserve">
          <source>RxJS &lt;code&gt;max maxBy&lt;/code&gt;</source>
          <target state="translated">RxJS &lt;code&gt;max maxBy&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="2af6c215659773e457dd03fc2587b6f7a38edbc2" translate="yes" xml:space="preserve">
          <source>RxJS &lt;code&gt;merge mergeAll mergeDelayError&lt;/code&gt;</source>
          <target state="translated">RxJS &lt;code&gt;merge mergeAll mergeDelayError&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="fd7307cc8282014b3bbb47efe08a6dbea2a22644" translate="yes" xml:space="preserve">
          <source>RxJS &lt;code&gt;min minBy&lt;/code&gt;</source>
          <target state="translated">RxJS &lt;code&gt;min minBy&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="9b2c2df4f1c22d4bb65fa84be09afd277c731e68" translate="yes" xml:space="preserve">
          <source>RxJS &lt;code&gt;observeOn&lt;/code&gt;</source>
          <target state="translated">Наблюдение за &lt;code&gt;observeOn&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="12f41074225c6d8fb5e5a937c49cae996ffc1d07" translate="yes" xml:space="preserve">
          <source>RxJS &lt;code&gt;range&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;range&lt;/code&gt; RxJS</target>
        </trans-unit>
        <trans-unit id="be5c11e1e57a4e13e687d358c32cf0377bff6380" translate="yes" xml:space="preserve">
          <source>RxJS &lt;code&gt;reduce&lt;/code&gt;</source>
          <target state="translated">RxJS &lt;code&gt;reduce&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="2d5f82fec6fe812b76c29e5c9050d143662a721a" translate="yes" xml:space="preserve">
          <source>RxJS &lt;code&gt;refCount share shareValue&lt;/code&gt;</source>
          <target state="translated">RxJS &lt;code&gt;refCount share shareValue&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="120d04059d26fa872b97ab402ac1d8f66f11aa05" translate="yes" xml:space="preserve">
          <source>RxJS &lt;code&gt;replay shareReplay&lt;/code&gt;</source>
          <target state="translated">Поделиться &lt;code&gt;replay shareReplay&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="131970c2e93ff0cadf2dddfdf476d183419ac2a7" translate="yes" xml:space="preserve">
          <source>RxJS &lt;code&gt;retry&lt;/code&gt;</source>
          <target state="translated">RxJS &lt;code&gt;retry&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="ee4f1557507936e1544c64a08c872c25351979ba" translate="yes" xml:space="preserve">
          <source>RxJS &lt;code&gt;sample throttleFirst&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;sample throttleFirst&lt;/code&gt; RxJSFirst</target>
        </trans-unit>
        <trans-unit id="f661ac6859c25cfe5b9738c7efed9fda63a3cb88" translate="yes" xml:space="preserve">
          <source>RxJS &lt;code&gt;sequenceEqual&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;sequenceEqual&lt;/code&gt; RxJSEqual</target>
        </trans-unit>
        <trans-unit id="f622b110b28d3f029f1ec0b56687f497c3617127" translate="yes" xml:space="preserve">
          <source>RxJS &lt;code&gt;skip skipUntilWithTime&lt;/code&gt;</source>
          <target state="translated">RxJS &lt;code&gt;skip skipUntilWithTime&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="3d4b342a241f531018ea9732f27b20905f906148" translate="yes" xml:space="preserve">
          <source>RxJS &lt;code&gt;skipLast skipLastWithTime&lt;/code&gt;</source>
          <target state="translated">RxJS &lt;code&gt;skipLast skipLastWithTime&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="15c9edbfcceac33542d638badbe3158c67f04f30" translate="yes" xml:space="preserve">
          <source>RxJS &lt;code&gt;skipUntil&lt;/code&gt;</source>
          <target state="translated">RxJS &lt;code&gt;skipUntil&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="7e595d442206e9394b69e16fbc0181ff137eaa2c" translate="yes" xml:space="preserve">
          <source>RxJS &lt;code&gt;skipWhile&lt;/code&gt;</source>
          <target state="translated">RxJS &lt;code&gt;skipWhile&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="d5cb29de89d96744dd71309738ebebbffb262514" translate="yes" xml:space="preserve">
          <source>RxJS &lt;code&gt;start startAsync toAsync&lt;/code&gt;</source>
          <target state="translated">RxJS &lt;code&gt;start startAsync toAsync&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="7441ff685626f4a00e081b30028070e2521b843c" translate="yes" xml:space="preserve">
          <source>RxJS &lt;code&gt;startWith&lt;/code&gt;</source>
          <target state="translated">RxJS &lt;code&gt;startWith&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="780d4abe0f23b7998704a63e2096a4b88504a3ba" translate="yes" xml:space="preserve">
          <source>RxJS &lt;code&gt;subscribeOn&lt;/code&gt;</source>
          <target state="translated">RxJS &lt;code&gt;subscribeOn&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="5dc48da1895aa477d952a2e0eda6c8b4918d1f36" translate="yes" xml:space="preserve">
          <source>RxJS &lt;code&gt;sum&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;sum&lt;/code&gt; RxJS</target>
        </trans-unit>
        <trans-unit id="b70b98a58f31fe4f99ba8501a83689488b8c8962" translate="yes" xml:space="preserve">
          <source>RxJS &lt;code&gt;switch&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;switch&lt;/code&gt; RxJS</target>
        </trans-unit>
        <trans-unit id="95144999a3798673314865690994995a630c5720" translate="yes" xml:space="preserve">
          <source>RxJS &lt;code&gt;take takeUntilWithTime&lt;/code&gt;</source>
          <target state="translated">RxJS &lt;code&gt;take takeUntilWithTime&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="4f8e56f6e64aa9d022a64a014c608638082338bd" translate="yes" xml:space="preserve">
          <source>RxJS &lt;code&gt;takeLast takeLastBuffer takeLastBufferWithTime takeLastWithTime&lt;/code&gt;</source>
          <target state="translated">RxJS &lt;code&gt;takeLast takeLastBuffer takeLastBufferWithTime takeLastWithTime&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="6be421faedfcedbdb651957169d8e8a75a560ff9" translate="yes" xml:space="preserve">
          <source>RxJS &lt;code&gt;takeUntil&lt;/code&gt;</source>
          <target state="translated">RxJS &lt;code&gt;takeUntil&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="13b704663cce9e3d3bc89cd70f7110c79a5c2678" translate="yes" xml:space="preserve">
          <source>RxJS &lt;code&gt;takeWhile&lt;/code&gt;</source>
          <target state="translated">RxJS &lt;code&gt;takeWhile&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="5742b5575b5caff8db13140a9815c3e46cbbfaf8" translate="yes" xml:space="preserve">
          <source>RxJS &lt;code&gt;timeInterval&lt;/code&gt;</source>
          <target state="translated">RxJS &lt;code&gt;timeInterval&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="0fb311e180a183d8abab6c8796d8db4b99bf2c83" translate="yes" xml:space="preserve">
          <source>RxJS &lt;code&gt;timeout timeoutWithSelector&lt;/code&gt;</source>
          <target state="translated">Время &lt;code&gt;timeout timeoutWithSelector&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="7b301e66c18404bdfccca37885fe17bc7d07f868" translate="yes" xml:space="preserve">
          <source>RxJS &lt;code&gt;timer&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;timer&lt;/code&gt; RxJS</target>
        </trans-unit>
        <trans-unit id="47d2ba0c70be81437b4dcc3a464bdd0c554e8dcc" translate="yes" xml:space="preserve">
          <source>RxJS &lt;code&gt;timestamp&lt;/code&gt;</source>
          <target state="translated">Метка &lt;code&gt;timestamp&lt;/code&gt; RxJS</target>
        </trans-unit>
        <trans-unit id="367d720453e11c317949002a39173233959ebae3" translate="yes" xml:space="preserve">
          <source>RxJS &lt;code&gt;toArray toMap toSet&lt;/code&gt;</source>
          <target state="translated">RxJS &lt;code&gt;toArray toMap toSet&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="c6c363e41ed9a5f659285a9b73b340f12c579bc1" translate="yes" xml:space="preserve">
          <source>RxJS &lt;code&gt;using&lt;/code&gt;</source>
          <target state="translated">RxJS &lt;code&gt;using&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="1a14964cbdd4d92257838440c1eab11bd7346054" translate="yes" xml:space="preserve">
          <source>RxJS &lt;code&gt;window windowWithCount windowWithTime windowWithTimeOrCount&lt;/code&gt;</source>
          <target state="translated">RxJS &lt;code&gt;window windowWithCount windowWithTime windowWithTimeOrCount&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="0ab5eb020fa38951d71f27b09776ebd8334358fb" translate="yes" xml:space="preserve">
          <source>RxJS also has a &lt;code&gt;distinctUntilChanged&lt;/code&gt; operator. It only compares emitted items from the source Observable against their immediate predecessors in order to determine whether or not they are distinct. It takes the same two optional parameters as the &lt;code&gt;distinct&lt;/code&gt; operator.</source>
          <target state="translated">RxJS также имеет &lt;code&gt;distinctUntilChanged&lt;/code&gt; оператор UntilChanged . Он только сравнивает элементы, отправленные из источника Observable, с их непосредственными предшественниками, чтобы определить, являются ли они различными. Он принимает те же два необязательных параметра, что и &lt;code&gt;distinct&lt;/code&gt; оператор.</target>
        </trans-unit>
        <trans-unit id="f6016e7299622581b8f148b7fa3501fa913b92bd" translate="yes" xml:space="preserve">
          <source>RxJS also has a &lt;code&gt;multicast&lt;/code&gt; operator which operates on an ordinary Observable, multicasts that Observable by means of a particular Subject that you specify, applies a transformative function to each emission, and then emits those transformed values as its own ordinary Observable sequence. Each subscription to this new Observable will trigger a new subscription to the underlying multicast Observable.</source>
          <target state="translated">RxJS также имеет оператор &lt;code&gt;multicast&lt;/code&gt; который работает с обычным Observable, многоадресными рассылками, которые Observable с помощью определенного Subject, который вы указываете, применяет функцию преобразования к каждому излучению, а затем испускает эти преобразованные значения как свою собственную обычную Observable последовательность. Каждая подписка на этот новый Observable будет запускать новую подписку на базовый многоадресный Observable.</target>
        </trans-unit>
        <trans-unit id="98c66e1c8524ac25e8463124a99c7841da6a2d73" translate="yes" xml:space="preserve">
          <source>RxJS also has a &lt;code&gt;withLatestFrom&lt;/code&gt; operator. It is similar to &lt;code&gt;combineLatest&lt;/code&gt;, but only emits items when the single source Observable emits an item (not when &lt;em&gt;any&lt;/em&gt; of the Observables that are passed to the operator do, as &lt;code&gt;combineLatest&lt;/code&gt; does).</source>
          <target state="translated">RxJS также имеет оператор &lt;code&gt;withLatestFrom&lt;/code&gt; . Он похож на &lt;code&gt;combineLatest&lt;/code&gt; , но генерирует элементы только тогда, когда объект Observable из единственного источника испускает элемент (а не когда &lt;code&gt;combineLatest&lt;/code&gt; делает &lt;em&gt;любой&lt;/em&gt; из Observable, переданных оператору, как это делаетcommonLatest ).</target>
        </trans-unit>
        <trans-unit id="0a539abd14355a077f8e4074b9dc15b0fb88a815" translate="yes" xml:space="preserve">
          <source>RxJS also implements &lt;code&gt;doOnCompleted&lt;/code&gt; or &lt;code&gt;tapOnCompleted&lt;/code&gt; (two names for the same operator). It is a specialized form of Do that responds only to the &lt;code&gt;onCompleted&lt;/code&gt; case, by calling a callback function you provide as a parameter. You may also optionally pass a second parameter that will be the &amp;ldquo;&lt;code&gt;this&lt;/code&gt;&amp;rdquo; object from the point of view of your callback function when it executes.</source>
          <target state="translated">RxJS также реализует &lt;code&gt;doOnCompleted&lt;/code&gt; или &lt;code&gt;tapOnCompleted&lt;/code&gt; (два имени для одного оператора). Это специализированная форма Do, которая отвечает только на случай &lt;code&gt;onCompleted&lt;/code&gt; , вызывая функцию обратного вызова, которую вы предоставляете в качестве параметра. Вы также можете при желании передать второй параметр, который будет объектом &amp;laquo; &lt;code&gt;this&lt;/code&gt; &amp;raquo; с точки зрения вашей функции обратного вызова при ее выполнении.</target>
        </trans-unit>
        <trans-unit id="284109037151667df43862e13fd6d1d79d55bb35" translate="yes" xml:space="preserve">
          <source>RxJS also implements &lt;code&gt;doOnError&lt;/code&gt; or &lt;code&gt;tapOnError&lt;/code&gt; (two names for the same operator). It is a specialized form of Do that responds only to the &lt;code&gt;onError&lt;/code&gt; case, by calling a callback function you provide as a parameter. You may also optionally pass a second parameter that will be the &amp;ldquo;&lt;code&gt;this&lt;/code&gt;&amp;rdquo; object from the point of view of your callback function when it executes.</source>
          <target state="translated">RxJS также реализует &lt;code&gt;doOnError&lt;/code&gt; или &lt;code&gt;tapOnError&lt;/code&gt; (два имени для одного оператора). Это специализированная форма Do, которая реагирует только на случай &lt;code&gt;onError&lt;/code&gt; , вызывая функцию обратного вызова, которую вы предоставляете в качестве параметра. Вы также можете при желании передать второй параметр, который будет объектом &amp;laquo; &lt;code&gt;this&lt;/code&gt; &amp;raquo; с точки зрения вашей функции обратного вызова при ее выполнении.</target>
        </trans-unit>
        <trans-unit id="4c63450b929be00de2b12751bb6e095da8db4171" translate="yes" xml:space="preserve">
          <source>RxJS also implements &lt;code&gt;doOnNext&lt;/code&gt; or &lt;code&gt;tapOnNext&lt;/code&gt; (two names for the same operator). It is a specialized form of Do that responds only to the &lt;code&gt;onNext&lt;/code&gt; case, by calling a callback function you provide as a parameter. You may also optionally pass a second parameter that will be the &amp;ldquo;&lt;code&gt;this&lt;/code&gt;&amp;rdquo; object from the point of view of your callback function when it executes.</source>
          <target state="translated">RxJS также реализует &lt;code&gt;doOnNext&lt;/code&gt; или &lt;code&gt;tapOnNext&lt;/code&gt; (два имени для одного и того же оператора). Это специализированная форма Do, которая отвечает только на случай &lt;code&gt;onNext&lt;/code&gt; , вызывая функцию обратного вызова, которую вы предоставляете в качестве параметра. Вы также можете при желании передать второй параметр, который будет объектом &amp;laquo; &lt;code&gt;this&lt;/code&gt; &amp;raquo; с точки зрения вашей функции обратного вызова при ее выполнении.</target>
        </trans-unit>
        <trans-unit id="908488b70ee442886d950d09ff5bd0e7c2a2a4a4" translate="yes" xml:space="preserve">
          <source>RxJS also implements &lt;code&gt;groupByUntil&lt;/code&gt;. It monitors an additional Observable, and whenever that Observable emits an item, it closes any of the keyed Observables it has opened (it will open new ones if additional items are emitted by the source Observable that match the key). &lt;code&gt;groupByUntil&lt;/code&gt; takes from two to four parameters:</source>
          <target state="translated">RxJS также реализует &lt;code&gt;groupByUntil&lt;/code&gt; . Он отслеживает дополнительный Observable, и всякий раз, когда этот Observable испускает элемент, он закрывает любой из открытых Observable с ключом (он откроет новые, если исходный Observable отправит дополнительные элементы, соответствующие ключу). &lt;code&gt;groupByUntil&lt;/code&gt; принимает от двух до четырех параметров:</target>
        </trans-unit>
        <trans-unit id="2e1318d2c629ad02b825d20d719d1e2ff1457058" translate="yes" xml:space="preserve">
          <source>RxJS also implements a &lt;code&gt;finally&lt;/code&gt; operator. It takes a function that will be called after the resulting Observable terminates, whether normally (&lt;code&gt;onCompleted&lt;/code&gt;) or abnormally (&lt;code&gt;onError&lt;/code&gt;).</source>
          <target state="translated">RxJS также реализует оператор &lt;code&gt;finally&lt;/code&gt; . Требуется функция, которая будет вызываться после завершения результирующего Observable, будь то нормально ( &lt;code&gt;onCompleted&lt;/code&gt; ) или ненормально ( &lt;code&gt;onError&lt;/code&gt; ).</target>
        </trans-unit>
        <trans-unit id="59d6e13aee21ef7253b1e43a39d37923df57ed26" translate="yes" xml:space="preserve">
          <source>RxJS also implements a &lt;code&gt;skipUntilWithTime&lt;/code&gt; operator that does not skip a particular quantity of items from the source Observable, but skips items based on chronology. You set this skip period by passing in a parameter to &lt;code&gt;skipUntilWithTime&lt;/code&gt;, in either of these formats:</source>
          <target state="translated">RxJS также реализует оператор &lt;code&gt;skipUntilWithTime&lt;/code&gt; , который не пропускает определенное количество элементов из исходного Observable, но пропускает элементы на основе хронологии. Вы устанавливаете этот период пропуска, передавая параметр &lt;code&gt;skipUntilWithTime&lt;/code&gt; в любом из этих форматов:</target>
        </trans-unit>
        <trans-unit id="88e0689b4109f3c709ea70c5908acc5f0db7c27a" translate="yes" xml:space="preserve">
          <source>RxJS also implements a &lt;code&gt;takeUntilWithTime&lt;/code&gt; operator, which is like &lt;code&gt;take&lt;/code&gt; except that rather than taking a particular quantity of items, it takes all of the items that are emitted during an initial period of time. You establish this period of by passing in a parameter to &lt;code&gt;takeUntilWithTime&lt;/code&gt;, in either of these formats:</source>
          <target state="translated">RxJS также реализует оператор &lt;code&gt;takeUntilWithTime&lt;/code&gt; , который похож на &lt;code&gt;take&lt;/code&gt; , за исключением того, что вместо того, чтобы брать определенное количество элементов, он берет все элементы, которые были отправлены в течение начального периода времени. Вы устанавливаете этот период, передавая параметр &lt;code&gt;takeUntilWithTime&lt;/code&gt; в любом из этих форматов:</target>
        </trans-unit>
        <trans-unit id="32632534d44b45c9ad8dfbfa839404a053bd69a1" translate="yes" xml:space="preserve">
          <source>RxJS also implements a similar operator, &lt;code&gt;forkJoin&lt;/code&gt;. There are two varieties of this operator. The first collects the last element emitted by each of the source Observables into an array and emits this array as its own sole emitted item. You can either pass a list of Observables to &lt;code&gt;forkJoin&lt;/code&gt; as individual parameters or as an array of Observables.</source>
          <target state="translated">RxJS также реализует аналогичный оператор &lt;code&gt;forkJoin&lt;/code&gt; . Есть две разновидности этого оператора. Первый собирает последний элемент, излучаемый каждым из исходных Observable, в массив и излучает этот массив как свой собственный единственный излучаемый элемент. Вы можете передать список Observables в &lt;code&gt;forkJoin&lt;/code&gt; как отдельные параметры или как массив Observables.</target>
        </trans-unit>
        <trans-unit id="a33bca320138ba8813623f5bfbd866c9abd76efa" translate="yes" xml:space="preserve">
          <source>RxJS also implements the &lt;code&gt;doWhile&lt;/code&gt; operator. It repeats the source Observable&amp;rsquo;s sequence of emissions only so long as a condition you specify remains true.</source>
          <target state="translated">RxJS также реализует оператор &lt;code&gt;doWhile&lt;/code&gt; . Он повторяет последовательность излучений источника Observable только до тех пор, пока указанное вами условие остается верным.</target>
        </trans-unit>
        <trans-unit id="9d0b2d12ecfda2c6bdfdfde6c82bfe056be88c2f" translate="yes" xml:space="preserve">
          <source>RxJS also implements the &lt;code&gt;expand&lt;/code&gt; operator, which is somewhat similar. Rather than applying the function to the previous return value of the function combined with the next item emitted from the source Observable, such that the number of items it emits is equal to the number emitted by the source Observable, &lt;code&gt;expand&lt;/code&gt; simply feeds the return value from the function back into the function without regard to future emissions from the Observable, such that it will just continue to create new values at its own pace.</source>
          <target state="translated">RxJS также реализует оператор &lt;code&gt;expand&lt;/code&gt; , который в чем-то похож. Вместо того, чтобы применять функцию к предыдущему возвращаемому значению функции в сочетании со следующим элементом, испускаемым из исходного Observable, так что количество элементов, которые он излучает, равно количеству, испускаемому исходным Observable, &lt;code&gt;expand&lt;/code&gt; просто передает возвращаемое значение из функция возвращается в функцию без учета будущих выбросов от Observable, так что он просто продолжит создавать новые значения в своем собственном темпе.</target>
        </trans-unit>
        <trans-unit id="253d4f8a33f7998d8a3d5f63d2bca1aacb5d527a" translate="yes" xml:space="preserve">
          <source>RxJS also implements the &lt;code&gt;if&lt;/code&gt; operator. It takes as parameters a function that returns a boolean, an Observable to mirror if that function returns a true value, and optionally a second Observable to mirror if that function returns a false value (if you omit this parameter, &lt;code&gt;if&lt;/code&gt; will mirror an empty Observable in such a case).</source>
          <target state="translated">RxJS также реализует оператор &lt;code&gt;if&lt;/code&gt; . Он принимает в качестве параметров функцию, которая возвращает логическое значение, Observable для зеркалирования, если эта функция возвращает истинное значение, и, необязательно, второй Observable для зеркального отображения, если эта функция возвращает ложное значение (если вы опустите этот параметр, &lt;code&gt;if&lt;/code&gt; будет отражать пустой Observable в таком случае).</target>
        </trans-unit>
        <trans-unit id="cd2db8570e66af9eac2220aff0c0a4488309781b" translate="yes" xml:space="preserve">
          <source>RxJS also implements the &lt;code&gt;isEmpty&lt;/code&gt; operator. The Observable returned from &lt;code&gt;isEmpty&lt;/code&gt; will return &lt;code&gt;false&lt;/code&gt; if the source Observable emits an item, and &lt;code&gt;true&lt;/code&gt; if it completes without emitting an item.</source>
          <target state="translated">RxJS также реализует оператор &lt;code&gt;isEmpty&lt;/code&gt; . Observable, возвращенный из &lt;code&gt;isEmpty&lt;/code&gt; , вернет &lt;code&gt;false&lt;/code&gt; , если исходный Observable испускает элемент, и &lt;code&gt;true&lt;/code&gt; , если он завершается без испускания элемента.</target>
        </trans-unit>
        <trans-unit id="a2b8bf2a061f9a96a6c2b6af8ed499fe865aefe1" translate="yes" xml:space="preserve">
          <source>RxJS also implements the &lt;code&gt;startAsync&lt;/code&gt; operator. It takes as its parameters an asynchronous function whose return value will be the emission from the resulting Observable.</source>
          <target state="translated">RxJS также реализует оператор &lt;code&gt;startAsync&lt;/code&gt; . Он принимает в качестве параметров асинхронную функцию, возвращаемое значение которой будет излучением результирующего Observable.</target>
        </trans-unit>
        <trans-unit id="021f91df458b5900a07fbe2afedfed6e0a6e7fa3" translate="yes" xml:space="preserve">
          <source>RxJS also implements the &lt;code&gt;while&lt;/code&gt; operator. It repeats the source Observable&amp;rsquo;s sequence of emissions only if a condition you specify is true.</source>
          <target state="translated">RxJS также реализует оператор &lt;code&gt;while&lt;/code&gt; . Он повторяет последовательность излучений исходного Observable только в том случае, если указанное вами условие истинно.</target>
        </trans-unit>
        <trans-unit id="28ea502c0d8da49fc4717495a2dd8d81ed3cef74" translate="yes" xml:space="preserve">
          <source>RxJS has a wealth of operators that perform FlatMap-like operations. In RxJS, the functions that transform items emitted by the source Observable into Observables typically take as parameters both the item and the index of the item in the Observable sequence.</source>
          <target state="translated">В RxJS есть множество операторов,выполняющих операции типа FlatMap.В RxJS функции,преобразующие элементы,излучаемые источником Observable,в Observables обычно принимают за параметры как элемент,так и индекс элемента в последовательности Observable.</target>
        </trans-unit>
        <trans-unit id="9ed5fb0a32ce4c835a9cd4d2018c50029b9422b4" translate="yes" xml:space="preserve">
          <source>RxJS has four Buffer operators &amp;mdash; &lt;code&gt;buffer&lt;/code&gt;, &lt;code&gt;bufferWithCount&lt;/code&gt;, &lt;code&gt;bufferWithTime&lt;/code&gt;, and &lt;code&gt;bufferWithTimeOrCount&lt;/code&gt; &amp;mdash; each of which has variants that have different ways of governing which source Observable items are emitted as part of which buffers.</source>
          <target state="translated">RxJS имеет четыре оператора &lt;code&gt;buffer&lt;/code&gt; - buffer , &lt;code&gt;bufferWithCount&lt;/code&gt; , &lt;code&gt;bufferWithTime&lt;/code&gt; и &lt;code&gt;bufferWithTimeOrCount&lt;/code&gt; - каждый из которых имеет варианты, которые имеют разные способы управления тем, какие исходные наблюдаемые элементы генерируются как часть буферов.</target>
        </trans-unit>
        <trans-unit id="1b6e17a9fc06bad6eea776001ce8e621f0ed556d" translate="yes" xml:space="preserve">
          <source>RxJS implements &lt;code&gt;defaultIfEmpty&lt;/code&gt;, but the parameter that sets the default value is optional. If you do not pass this default value, &lt;code&gt;defaultIfEmpty&lt;/code&gt; will emit a &amp;ldquo;&lt;code&gt;null&lt;/code&gt;&amp;rdquo; if the source Observable completes without emitting anything. (Note that an emission of a &amp;ldquo;&lt;code&gt;null&lt;/code&gt;&amp;rdquo; is &lt;em&gt;not&lt;/em&gt; the same as no emission.)</source>
          <target state="translated">RxJS реализует &lt;code&gt;defaultIfEmpty&lt;/code&gt; , но параметр, устанавливающий значение по умолчанию, является необязательным. Если вы не передадите это значение по умолчанию, &lt;code&gt;defaultIfEmpty&lt;/code&gt; выдаст &amp;laquo; &lt;code&gt;null&lt;/code&gt; &amp;raquo;, если исходный Observable завершится, ничего не исполнив. (Обратите внимание, что выброс &amp;laquo; &lt;code&gt;null&lt;/code&gt; &amp;raquo; - это &lt;em&gt;не&lt;/em&gt; то же самое, что отсутствие излучения.)</target>
        </trans-unit>
        <trans-unit id="833434a271bf5e2b3a5378b0e62ee30c3921c919" translate="yes" xml:space="preserve">
          <source>RxJS implements &lt;code&gt;groupBy&lt;/code&gt;. It takes one to three parameters:</source>
          <target state="translated">RxJS реализует &lt;code&gt;groupBy&lt;/code&gt; . Требуется от одного до трех параметров:</target>
        </trans-unit>
        <trans-unit id="bf4adc7aab8f00e8fbf1657e8a396bc448a66e01" translate="yes" xml:space="preserve">
          <source>RxJS implements a somewhat similar operator called &lt;code&gt;case&lt;/code&gt; (or &amp;ldquo;&lt;code&gt;switchCase&lt;/code&gt;&amp;rdquo;). This operator conditionally creates and returns one of a set of possible Observables. It takes the following parameters:</source>
          <target state="translated">RxJS реализует несколько похожий оператор, называемый &lt;code&gt;case&lt;/code&gt; (или &amp;laquo; &lt;code&gt;switchCase&lt;/code&gt; &amp;raquo;). Этот оператор условно создает и возвращает один из набора возможных Observable. Принимает следующие параметры:</target>
        </trans-unit>
        <trans-unit id="464fbc3707a98b960e74ca1ef11f17101335cbe1" translate="yes" xml:space="preserve">
          <source>RxJS implements backpressure by transforming an ordinary Observable into a &lt;code&gt;ControlledObservable&lt;/code&gt; with the &lt;code&gt;controlled&lt;/code&gt; operator. This forces the Observable to respect pull &lt;code&gt;request&lt;/code&gt;s from its observer rather than pushing items on its own initiative.</source>
          <target state="translated">RxJS реализует противодавление, преобразовывая обычный Observable в &lt;code&gt;ControlledObservable&lt;/code&gt; с &lt;code&gt;controlled&lt;/code&gt; оператором. Это заставляет Observable учитывать &lt;code&gt;request&lt;/code&gt; вытягивание от своего наблюдателя, а не отправлять элементы по собственной инициативе.</target>
        </trans-unit>
        <trans-unit id="7128ac0d4d225946d71d420ce49afe831ab301f2" translate="yes" xml:space="preserve">
          <source>RxJS implements the &lt;code&gt;first&lt;/code&gt; operator. It optionally takes a predicate function as a parameter, in which case, rather than emitting the first item from the source Observable, the resulting Observable will emit the first item from the source Observable that satisfies the predicate.</source>
          <target state="translated">RxJS реализует &lt;code&gt;first&lt;/code&gt; оператор. Он необязательно принимает функцию предиката в качестве параметра, и в этом случае вместо того, чтобы испускать первый элемент из исходного Observable, полученный Observable будет выдавать первый элемент из исходного Observable, который удовлетворяет предикату.</target>
        </trans-unit>
        <trans-unit id="b1b6fcb38b22848230f6db1d0a3c0d7f599cd001" translate="yes" xml:space="preserve">
          <source>RxJS implements the &lt;code&gt;last&lt;/code&gt; operator. It optionally takes a predicate function as a parameter, in which case, rather than emitting the last item from the source Observable, the resulting Observable will emit the last item from the source Observable that satisfies the predicate.</source>
          <target state="translated">RxJS реализует &lt;code&gt;last&lt;/code&gt; оператор. Он необязательно принимает функцию предиката в качестве параметра, и в этом случае вместо того, чтобы испускать последний элемент из исходного Observable, полученный Observable будет выдавать последний элемент из исходного Observable, который удовлетворяет предикату.</target>
        </trans-unit>
        <trans-unit id="75605ce73b1d8fd2946a60286ebf7e98f66fb6c8" translate="yes" xml:space="preserve">
          <source>RxJS implements the &lt;code&gt;max&lt;/code&gt; operator. It takes an optional comparer function that it will use instead of its default to compare the value of two items.</source>
          <target state="translated">RxJS реализует оператор &lt;code&gt;max&lt;/code&gt; . Требуется дополнительная функция сравнения, которую он будет использовать вместо значения по умолчанию для сравнения значений двух элементов.</target>
        </trans-unit>
        <trans-unit id="ae706fcd34fe247445446ece45326ffcc7fd61b0" translate="yes" xml:space="preserve">
          <source>RxJS implements the &lt;code&gt;min&lt;/code&gt; operator. It takes an optional comparer function that it will use instead of its default to compare the value of two items.</source>
          <target state="translated">RxJS реализует оператор &lt;code&gt;min&lt;/code&gt; . Требуется дополнительная функция сравнения, которую он будет использовать вместо значения по умолчанию для сравнения значений двух элементов.</target>
        </trans-unit>
        <trans-unit id="f2d48dab4f7a1c60150710d3ef4310e665c3df77" translate="yes" xml:space="preserve">
          <source>RxJS implements the &lt;code&gt;reduce&lt;/code&gt; operator. Pass it an accumulator function, and, optionally, a seed value to pass into the accumulator function with the first item emitted by the source Observable.</source>
          <target state="translated">RxJS реализует оператор &lt;code&gt;reduce&lt;/code&gt; . Передайте ему функцию-аккумулятор и, необязательно, начальное значение для передачи в функцию-аккумулятор с первым элементом, испущенным источником Observable.</target>
        </trans-unit>
        <trans-unit id="8582925c772e00970afb0bb65d13a76eed2a249a" translate="yes" xml:space="preserve">
          <source>RxJS implements the &lt;code&gt;scan&lt;/code&gt; operator.</source>
          <target state="translated">RxJS реализует оператор &lt;code&gt;scan&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="4b5e832745c005b2e1ac55041aa6048c3b30c920" translate="yes" xml:space="preserve">
          <source>RxJS implements the &lt;code&gt;skip&lt;/code&gt; operator.</source>
          <target state="translated">RxJS реализует оператор &lt;code&gt;skip&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="7f22e1562419b63e7b24ea5f8e23940f629aa8ba" translate="yes" xml:space="preserve">
          <source>RxJS implements the &lt;code&gt;skipUntil&lt;/code&gt; operator. You can pass it either an Observable or a &lt;code&gt;Promise&lt;/code&gt; that it will monitor for an item that triggers &lt;code&gt;skipUntil&lt;/code&gt; to begin mirroring the source Observable.</source>
          <target state="translated">RxJS реализует оператор &lt;code&gt;skipUntil&lt;/code&gt; . Вы можете передать ему либо Observable, либо &lt;code&gt;Promise&lt;/code&gt; , которое будет отслеживать элемент, который запускает &lt;code&gt;skipUntil&lt;/code&gt; , чтобы начать зеркалирование исходного Observable.</target>
        </trans-unit>
        <trans-unit id="8eaebde4a9f1abdffb70d73508f1e56d9d098bb8" translate="yes" xml:space="preserve">
          <source>RxJS implements the &lt;code&gt;skipWhile&lt;/code&gt; operator. You pass it a function that governs the skipping process. &lt;code&gt;skipWhile&lt;/code&gt; calls that function for each item emitted by the source Observable until such time as the function returns &lt;code&gt;false&lt;/code&gt;, whereupon &lt;code&gt;skipWhile&lt;/code&gt; begins mirroring the source Observable (starting with that item). The function takes three parameters:</source>
          <target state="translated">RxJS реализует оператор &lt;code&gt;skipWhile&lt;/code&gt; . Вы передаете ему функцию, которая управляет процессом пропуска. &lt;code&gt;skipWhile&lt;/code&gt; вызывает эту функцию для каждого элемента, испускаемого исходным Observable, до тех пор, пока функция не вернет &lt;code&gt;false&lt;/code&gt; , после чего &lt;code&gt;skipWhile&lt;/code&gt; начинает зеркалировать исходный Observable (начиная с этого элемента). Функция принимает три параметра:</target>
        </trans-unit>
        <trans-unit id="d12c1ded920289a206f0d2344fda5d295b86464b" translate="yes" xml:space="preserve">
          <source>RxJS implements the &lt;code&gt;start&lt;/code&gt; operator. It takes as its parameters a function whose return value will be the emission from the resulting Observable, and, optionally, any additional parameter to that function and a &lt;a href=&quot;../scheduler&quot;&gt;Scheduler&lt;/a&gt; on which to run the function.</source>
          <target state="translated">RxJS реализует оператор &lt;code&gt;start&lt;/code&gt; . В качестве параметров он принимает функцию, возвращаемое значение которой будет излучением результирующего Observable, и, необязательно, любой дополнительный параметр этой функции и &lt;a href=&quot;../scheduler&quot;&gt;планировщик,&lt;/a&gt; на котором будет запускаться функция.</target>
        </trans-unit>
        <trans-unit id="f3d37b8f6c42255b2a91985134db3b1362e9a783" translate="yes" xml:space="preserve">
          <source>RxJS implements the &lt;code&gt;take&lt;/code&gt; operator.</source>
          <target state="translated">RxJS реализует оператор &lt;code&gt;take&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="d11ca1c4958df6d531fbae958aaadb653de886ad" translate="yes" xml:space="preserve">
          <source>RxJS implements the &lt;code&gt;takeUntil&lt;/code&gt; operator. You can pass it either an Observable or a &lt;code&gt;Promise&lt;/code&gt; that it will monitor for an item that triggers &lt;code&gt;takeUntil&lt;/code&gt; to stop mirroring the source Observable.</source>
          <target state="translated">RxJS реализует оператор &lt;code&gt;takeUntil&lt;/code&gt; . Вы можете передать ему либо Observable, либо &lt;code&gt;Promise&lt;/code&gt; , которое будет отслеживать элемент, который запускает &lt;code&gt;takeUntil&lt;/code&gt; , чтобы прекратить зеркальное отображение исходного Observable.</target>
        </trans-unit>
        <trans-unit id="2549e229fb3fb8f7d66314be5b16e94c55c58e79" translate="yes" xml:space="preserve">
          <source>RxJS implements the &lt;code&gt;takeWhile&lt;/code&gt; operator. You pass it a function that governs the takeping process. &lt;code&gt;takeWhile&lt;/code&gt; calls that function for each item emitted by the source Observable until such time as the function returns &lt;code&gt;false&lt;/code&gt;, whereupon &lt;code&gt;takeWhile&lt;/code&gt; stops mirroring the source Observable (starting with that item) and issues an &lt;code&gt;onCompleted&lt;/code&gt; notification. The function takes three parameters:</source>
          <target state="translated">RxJS реализует оператор &lt;code&gt;takeWhile&lt;/code&gt; . Вы передаете ему функцию, которая управляет процессом получения. &lt;code&gt;takeWhile&lt;/code&gt; вызывает эту функцию для каждого элемента, испускаемого исходным Observable, до тех пор, пока функция не вернет &lt;code&gt;false&lt;/code&gt; , после чего &lt;code&gt;takeWhile&lt;/code&gt; прекращает зеркальное отображение исходного Observable (начиная с этого элемента) и выдает уведомление &lt;code&gt;onCompleted&lt;/code&gt; . Функция принимает три параметра:</target>
        </trans-unit>
        <trans-unit id="0d3dc90823cdd2e239fcea24b5916a9dcd872913" translate="yes" xml:space="preserve">
          <source>RxJS implements the Catch operator with two distinct operators:</source>
          <target state="translated">RxJS реализует оператора Catch с двумя разными операторами:</target>
        </trans-unit>
        <trans-unit id="dff475820d36e241578387477df7e9f144116d61" translate="yes" xml:space="preserve">
          <source>RxJS implements the basic &lt;code&gt;flatMap&lt;/code&gt; operator. It has a variant that allows you to apply a transformative function (an optional second parameter to &lt;code&gt;flatMap&lt;/code&gt;) to the items emitted by the Observables generated for each item in the source Observable, before merging and emitting those items.</source>
          <target state="translated">RxJS реализует основной оператор &lt;code&gt;flatMap&lt;/code&gt; . У него есть вариант, который позволяет вам применять трансформирующую функцию (необязательный второй параметр для &lt;code&gt;flatMap&lt;/code&gt; ) к элементам, испускаемым Observables, сгенерированным для каждого элемента в исходном Observable, перед объединением и испусканием этих элементов.</target>
        </trans-unit>
        <trans-unit id="164bcc9b7c3b99c3e5a2dc642bca6c992831266b" translate="yes" xml:space="preserve">
          <source>RxJS implements the basic Do operator as &lt;code&gt;do&lt;/code&gt; or &lt;code&gt;tap&lt;/code&gt; (two names for the same operator). You have two choices for how to use this operator:</source>
          <target state="translated">RxJS реализует базовый оператор Do как &lt;code&gt;do&lt;/code&gt; или &lt;code&gt;tap&lt;/code&gt; (два имени для одного оператора). У вас есть два варианта использования этого оператора:</target>
        </trans-unit>
        <trans-unit id="010c4e518b0fa0ceda69e52da42170cdfc4f8c67" translate="yes" xml:space="preserve">
          <source>RxJS implements these operators as &lt;code&gt;and&lt;/code&gt;, &lt;code&gt;thenDo&lt;/code&gt;, and &lt;code&gt;when&lt;/code&gt;.</source>
          <target state="translated">RxJS реализует эти операторы as &lt;code&gt;and&lt;/code&gt; , &lt;code&gt;thenDo&lt;/code&gt; и &lt;code&gt;when&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="ba9807b94a6f52f2bbf70b871cf0e98a4495bdb3" translate="yes" xml:space="preserve">
          <source>RxJS implements these operators as &lt;code&gt;empty&lt;/code&gt;, &lt;code&gt;never&lt;/code&gt;, and &lt;code&gt;throw&lt;/code&gt;.</source>
          <target state="translated">RxJS реализует эти операторы как &lt;code&gt;empty&lt;/code&gt; , &lt;code&gt;never&lt;/code&gt; и &lt;code&gt;throw&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="cf5f0e5c672d194df6d4d1868ed644871866d1e5" translate="yes" xml:space="preserve">
          <source>RxJS implements this operator as &lt;code&gt;amb&lt;/code&gt;. It takes a variable number of parameters, which may be either Observables or Promises (or combinations of the two).</source>
          <target state="translated">RxJS реализует этот оператор как &lt;code&gt;amb&lt;/code&gt; . Он принимает переменное количество параметров, которые могут быть либо Observables, либо Promises (или их комбинациями).</target>
        </trans-unit>
        <trans-unit id="b0964b19902f28045d210a8d1f98fd508bed74ee" translate="yes" xml:space="preserve">
          <source>RxJS implements this operator as &lt;code&gt;average&lt;/code&gt;. The following code sample shows how to use it:</source>
          <target state="translated">RxJS реализует этот оператор как &lt;code&gt;average&lt;/code&gt; . В следующем примере кода показано, как его использовать:</target>
        </trans-unit>
        <trans-unit id="c6c59700c9eddc1ad4f7ae0b4770ae2ac381aadd" translate="yes" xml:space="preserve">
          <source>RxJS implements this operator as &lt;code&gt;combineLatest&lt;/code&gt;. It may take a variable number of individual Observables (as well as the combining function) as parameters, or a single &lt;code&gt;Array&lt;/code&gt; of Observables (as well as the combining function).</source>
          <target state="translated">RxJS реализует этот оператор как &lt;code&gt;combineLatest&lt;/code&gt; . Он может принимать переменное количество отдельных Observables (а также функцию объединения) в качестве параметров или один &lt;code&gt;Array&lt;/code&gt; Observables (а также функцию объединения).</target>
        </trans-unit>
        <trans-unit id="24d100c3f8e2aa41ad0fbf540eef9d0fb8f213bd" translate="yes" xml:space="preserve">
          <source>RxJS implements this operator as &lt;code&gt;concat&lt;/code&gt; and &lt;code&gt;concatAll&lt;/code&gt;.</source>
          <target state="translated">RxJS реализует этот оператор как &lt;code&gt;concat&lt;/code&gt; и &lt;code&gt;concatAll&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="0f31e2bf51b0edf9b25c85ddfbf9004631416420" translate="yes" xml:space="preserve">
          <source>RxJS implements this operator as &lt;code&gt;create&lt;/code&gt; (there is also an alternate name for the same operator: &lt;code&gt;createWithDisposable&lt;/code&gt;).</source>
          <target state="translated">RxJS реализует этот оператор как &lt;code&gt;create&lt;/code&gt; (есть также альтернативное имя для того же оператора: &lt;code&gt;createWithDisposable&lt;/code&gt; ).</target>
        </trans-unit>
        <trans-unit id="9b6c24d7b431f17d39ce96e811b9bef1cdbbd98e" translate="yes" xml:space="preserve">
          <source>RxJS implements this operator as &lt;code&gt;defer&lt;/code&gt;. This operator takes as its sole parameter an Observable factory function of your choosing. This function takes no parameters and returns an Observable or a Promise.</source>
          <target state="translated">RxJS реализует этот оператор как &lt;code&gt;defer&lt;/code&gt; . Этот оператор принимает в качестве единственного параметра любую наблюдаемую фабричную функцию по вашему выбору. Эта функция не принимает параметров и возвращает Observable или Promise.</target>
        </trans-unit>
        <trans-unit id="0af5a9948341a9f8462d95f0b48013fd5b424399" translate="yes" xml:space="preserve">
          <source>RxJS implements this operator as &lt;code&gt;elementAt&lt;/code&gt;. Pass &lt;code&gt;elementAt&lt;/code&gt; a zero-based index value and it will emit the solitary item from the source Observable&amp;rsquo;s sequence that matches that index value (for example, if you pass the index value 5, &lt;code&gt;elementAt&lt;/code&gt; will emit the sixth item emitted by the source Observable).</source>
          <target state="translated">RxJS реализует этот оператор как &lt;code&gt;elementAt&lt;/code&gt; . Передайте &lt;code&gt;elementAt&lt;/code&gt; с нулевым значением индекса, и он испустит отдельный элемент из исходной последовательности Observable, который соответствует этому значению индекса (например, если вы передадите значение индекса 5, &lt;code&gt;elementAt&lt;/code&gt; выдаст шестой элемент, излучаемый исходным Observable).</target>
        </trans-unit>
        <trans-unit id="7122e0d4daf66afd84ef8ab74de9e33ff887359b" translate="yes" xml:space="preserve">
          <source>RxJS implements this operator as &lt;code&gt;every&lt;/code&gt;. The following example shows how to use this operator:</source>
          <target state="translated">RxJS реализует этот оператор как &lt;code&gt;every&lt;/code&gt; . В следующем примере показано, как использовать этот оператор:</target>
        </trans-unit>
        <trans-unit id="c7e840fecea0e388a9b537de6d15b813ed393328" translate="yes" xml:space="preserve">
          <source>RxJS implements this operator as &lt;code&gt;ignoreElements&lt;/code&gt;.</source>
          <target state="translated">RxJS реализует этот оператор как &lt;code&gt;ignoreElements&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="1b04dcfa170374cdeddbb7f162e74c456ce770cf" translate="yes" xml:space="preserve">
          <source>RxJS implements this operator as &lt;code&gt;interval&lt;/code&gt;. It accepts as its parameter the number of milliseconds to wait between emissions.</source>
          <target state="translated">RxJS реализует этот оператор как &lt;code&gt;interval&lt;/code&gt; . Он принимает в качестве параметра количество миллисекунд ожидания между выбросами.</target>
        </trans-unit>
        <trans-unit id="7a316a09dbf90518ec7008a4bcd79bd646b3da27" translate="yes" xml:space="preserve">
          <source>RxJS implements this operator as &lt;code&gt;map&lt;/code&gt; or &lt;code&gt;select&lt;/code&gt; (the two are synonymous). In addition to the transforming function, you may pass this operator an optional second parameter that will become the &amp;ldquo;&lt;code&gt;this&lt;/code&gt;&amp;rdquo; context in which the transforming function will execute.</source>
          <target state="translated">RxJS реализует этот оператор как &lt;code&gt;map&lt;/code&gt; или &lt;code&gt;select&lt;/code&gt; (оба являются синонимами). В дополнение к функции преобразования, вы можете передать этому оператору необязательный второй параметр, который станет контекстом &amp;laquo; &lt;code&gt;this&lt;/code&gt; &amp;raquo;, в котором будет выполняться функция преобразования.</target>
        </trans-unit>
        <trans-unit id="fa9b6d2760450a8c6987be6c15eae768d3f266b4" translate="yes" xml:space="preserve">
          <source>RxJS implements this operator as &lt;code&gt;range&lt;/code&gt;. It accepts as its parameters the start value of the range and the number of items in the range.</source>
          <target state="translated">RxJS реализует этот оператор как &lt;code&gt;range&lt;/code&gt; . Он принимает в качестве параметров начальное значение диапазона и количество элементов в диапазоне.</target>
        </trans-unit>
        <trans-unit id="ea3a1685e352c99a6f5e4379f277173e8f711c3c" translate="yes" xml:space="preserve">
          <source>RxJS implements this operator as &lt;code&gt;repeat&lt;/code&gt;. It accepts as its parameter the item to repeat, and optionally two other parameters: the number of times you want the item to repeat, and the &lt;a href=&quot;../scheduler&quot;&gt;Scheduler&lt;/a&gt; on which you want to perform this operation (it uses the &lt;code&gt;immediate&lt;/code&gt; Scheduler by default).</source>
          <target state="translated">RxJS реализует этот оператор как &lt;code&gt;repeat&lt;/code&gt; . Он принимает в качестве параметра повторяемый элемент и, необязательно, два других параметра: количество раз, которое вы хотите, чтобы элемент повторялся, и &lt;a href=&quot;../scheduler&quot;&gt;планировщик,&lt;/a&gt; для которого вы хотите выполнить эту операцию ( по умолчанию он использует &lt;code&gt;immediate&lt;/code&gt; планировщик).</target>
        </trans-unit>
        <trans-unit id="d9b0149e0c0c52e133bebb35cde1368acf36918b" translate="yes" xml:space="preserve">
          <source>RxJS implements this operator as &lt;code&gt;retry&lt;/code&gt;.</source>
          <target state="translated">RxJS реализует этот оператор как &lt;code&gt;retry&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="f6f54fe525dbde7139b135530071a4f0ccf0988e" translate="yes" xml:space="preserve">
          <source>RxJS implements this operator as &lt;code&gt;return&lt;/code&gt; and as &lt;code&gt;just&lt;/code&gt; (two names for the same operator with the same behavior). It accepts a single item as a parameter and returns an Observable that emits that single item as its sole emission.</source>
          <target state="translated">RxJS реализует этот оператор как &lt;code&gt;return&lt;/code&gt; и as &lt;code&gt;just&lt;/code&gt; (два имени для одного и того же оператора с одинаковым поведением). Он принимает один элемент в качестве параметра и возвращает Observable, который испускает этот единственный элемент в качестве своей единственной эмиссии.</target>
        </trans-unit>
        <trans-unit id="2ca17f4c4efe5358c93986b032c1b695027c54ba" translate="yes" xml:space="preserve">
          <source>RxJS implements this operator as &lt;code&gt;startWith&lt;/code&gt;. It accepts a variable number of function parameters and treats each one as an item that it will prepend to the resulting Observable sequence in the order they are given in the parameter list.</source>
          <target state="translated">RxJS реализует этот оператор как &lt;code&gt;startWith&lt;/code&gt; . Он принимает переменное количество параметров функции и обрабатывает каждый из них как элемент, который будет добавлен к результирующей наблюдаемой последовательности в том порядке, в котором они указаны в списке параметров.</target>
        </trans-unit>
        <trans-unit id="b5471c4ff237906b8d5673ac8923c8a39c92c7e3" translate="yes" xml:space="preserve">
          <source>RxJS implements this operator as &lt;code&gt;sum&lt;/code&gt;. The following code sample shows how to use it:</source>
          <target state="translated">RxJS реализует этот оператор как &lt;code&gt;sum&lt;/code&gt; . В следующем примере кода показано, как его использовать:</target>
        </trans-unit>
        <trans-unit id="d5abbadd879d6889e47c0169ec814c384626d856" translate="yes" xml:space="preserve">
          <source>RxJS implements this operator as &lt;code&gt;switch&lt;/code&gt;</source>
          <target state="translated">RxJS реализует этот оператор как &lt;code&gt;switch&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="7548bee4b6bbc1abcf79a1ac71b3c002119b9f94" translate="yes" xml:space="preserve">
          <source>RxJS implements this operator as &lt;code&gt;timeout&lt;/code&gt; and &lt;code&gt;timeoutWithSelector&lt;/code&gt;:</source>
          <target state="translated">RxJS реализует этот оператор как &lt;code&gt;timeout&lt;/code&gt; и &lt;code&gt;timeoutWithSelector&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="8126686feaa0941f5f1e9267cf8561cd1d738756" translate="yes" xml:space="preserve">
          <source>RxJS implements this operator as &lt;code&gt;zip&lt;/code&gt; and &lt;code&gt;zipArray&lt;/code&gt;.</source>
          <target state="translated">RxJS реализует этот оператор как &lt;code&gt;zip&lt;/code&gt; и &lt;code&gt;zipArray&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="90f9a0bc0e56234e6c52677080217cf64bb40c61" translate="yes" xml:space="preserve">
          <source>RxJS implements this operator under two names, but with identical behavior: &lt;code&gt;filter&lt;/code&gt; and &lt;code&gt;where&lt;/code&gt;. This operator takes two parameters: the predicate function, and an optional object that will represent that function&amp;rsquo;s &amp;ldquo;&lt;code&gt;this&lt;/code&gt;&amp;rdquo; context when it executes.</source>
          <target state="translated">RxJS реализует этот оператор под двумя именами, но с идентичным поведением: &lt;code&gt;filter&lt;/code&gt; и &lt;code&gt;where&lt;/code&gt; . Этот оператор принимает два параметра: функцию-предикат и необязательный объект, который будет представлять контекст &amp;laquo; &lt;code&gt;this&lt;/code&gt; &amp;raquo; этой функции при ее выполнении.</target>
        </trans-unit>
        <trans-unit id="02b5accf7c88c4667d9f2a0914de5cf5dff9daf1" translate="yes" xml:space="preserve">
          <source>RxJS implements this operator with two variants of &lt;code&gt;sample&lt;/code&gt;.</source>
          <target state="translated">RxJS реализует этот оператор с двумя вариантами &lt;code&gt;sample&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="f5c21423843bff6b9a4bf4e8982354e0722a25fe" translate="yes" xml:space="preserve">
          <source>RxJS only implements the &lt;code&gt;dematerialize&lt;/code&gt; operator. If you want a &amp;ldquo;materialized&amp;rdquo; Observable, you have to assemble it by hand by manually creating and emitting the &lt;code&gt;Notification&lt;/code&gt; objects that represent Observable notification calls.</source>
          <target state="translated">RxJS реализует только оператор &lt;code&gt;dematerialize&lt;/code&gt; . Если вам нужен &amp;laquo;материализованный&amp;raquo; Observable, вы должны собрать его вручную, вручную создав и испуская объекты &lt;code&gt;Notification&lt;/code&gt; , которые представляют вызовы Observable-уведомлений.</target>
        </trans-unit>
        <trans-unit id="fbe7200978cee8a6d61a07d52d10a68335f208ea" translate="yes" xml:space="preserve">
          <source>RxJava (and its derivatives like RxGroovy &amp;amp; RxScala) has developed an &lt;a href=&quot;observable&quot;&gt;Observable&lt;/a&gt; variant called &amp;ldquo;Single.&amp;rdquo;</source>
          <target state="translated">RxJava (и его производные, такие как RxGroovy и RxScala) разработали вариант &lt;a href=&quot;observable&quot;&gt;Observable&lt;/a&gt; под названием &amp;laquo;Single&amp;raquo;.</target>
        </trans-unit>
        <trans-unit id="302e871591845528d4fdf7dda7bb604c13542993" translate="yes" xml:space="preserve">
          <source>RxJava 1.x implements these operators as &lt;code&gt;empty&lt;/code&gt;, &lt;code&gt;never&lt;/code&gt;, and &lt;code&gt;error&lt;/code&gt;. The &lt;code&gt;error&lt;/code&gt; operator takes as a parameter the &lt;code&gt;Throwable&lt;/code&gt; with which you want the Observable to terminate.</source>
          <target state="translated">RxJava 1.x реализует эти операторы как &lt;code&gt;empty&lt;/code&gt; , &lt;code&gt;never&lt;/code&gt; и &lt;code&gt;error&lt;/code&gt; . Оператор &lt;code&gt;error&lt;/code&gt; принимает в качестве параметра &lt;code&gt;Throwable&lt;/code&gt; , с которым вы хотите завершить Observable.</target>
        </trans-unit>
        <trans-unit id="e1757c6d1b97a3413b20f9c5710c2e23da87867e" translate="yes" xml:space="preserve">
          <source>RxJava 1.x implements this operator as &lt;code&gt;all&lt;/code&gt;. It does not by default operate on any particular &lt;a href=&quot;../scheduler&quot;&gt;Scheduler&lt;/a&gt;.</source>
          <target state="translated">RxJava 1.x реализует этот оператор как &lt;code&gt;all&lt;/code&gt; . По умолчанию он не работает с каким-либо конкретным &lt;a href=&quot;../scheduler&quot;&gt;планировщиком&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="340edb101a9c2f805f2da1cce5e588ee5f6e78ca" translate="yes" xml:space="preserve">
          <source>RxJava 1.x implements this operator as &lt;code&gt;amb&lt;/code&gt;. It takes up to nine Observables as individual parameters, or a single Iterable of Observables. There is also an instance version of the operator, &lt;code&gt;ambWith&lt;/code&gt;, so that, for example, instead of writing &lt;code&gt;Observable.amb(o1,o2)&lt;/code&gt; you could also write &lt;code&gt;o1.ambWith(o2)&lt;/code&gt; for the same effect.</source>
          <target state="translated">RxJava 1.x реализует этот оператор как &lt;code&gt;amb&lt;/code&gt; . Он принимает до девяти Observable в качестве отдельных параметров или один Iterable of Observables. Также существует экземплярная версия оператора &lt;code&gt;ambWith&lt;/code&gt; , так что, например, вместо записи &lt;code&gt;Observable.amb(o1,o2)&lt;/code&gt; вы также можете написать &lt;code&gt;o1.ambWith(o2)&lt;/code&gt; для того же эффекта.</target>
        </trans-unit>
        <trans-unit id="d3d55b39bbc3f293ad5119e72b4a9dc8f78058b7" translate="yes" xml:space="preserve">
          <source>RxJava 1․x</source>
          <target state="translated">RxJava 1․x</target>
        </trans-unit>
        <trans-unit id="09156b33c967311584ab6f07ac69e49998189081" translate="yes" xml:space="preserve">
          <source>RxJava 1․x &lt;code&gt;BlockingObservable.forEach forEach subscribe&lt;/code&gt;</source>
          <target state="translated">RxJava 1․x &lt;code&gt;BlockingObservable.forEach forEach subscribe&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="7c8b15377115dda5bba5008f6cd6a83bf6a945df" translate="yes" xml:space="preserve">
          <source>RxJava 1․x &lt;code&gt;BlockingObservable.from BlockingObservable.getIterator nest toBlocking BlockingObservable.toFuture BlockingObservable.toIterable toList toMap toMultiMap toSortedList&lt;/code&gt;</source>
          <target state="translated">RxJava 1․x &lt;code&gt;BlockingObservable.from BlockingObservable.getIterator nest toBlocking BlockingObservable.toFuture BlockingObservable.toIterable toList toMap toMultiMap toSortedList&lt;/code&gt; От BlockingObservable.getIterator гнездо до Blocking BlockingObservable.toFuture BlockingObservable.toIterable toList toMap to MultiMap toSortedList</target>
        </trans-unit>
        <trans-unit id="7104098da08a6030d8cdc16228bc7e325009e5d2" translate="yes" xml:space="preserve">
          <source>RxJava 1․x &lt;code&gt;all&lt;/code&gt;</source>
          <target state="translated">RxJava 1․x &lt;code&gt;all&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="1a7358351d081f0340466520539d3a2fdfea98b1" translate="yes" xml:space="preserve">
          <source>RxJava 1․x &lt;code&gt;amb ambWith&lt;/code&gt;</source>
          <target state="translated">RxJava 1․x &lt;code&gt;amb ambWith&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="b1971de1c710932fa0a919f3382dbd7e74ac9517" translate="yes" xml:space="preserve">
          <source>RxJava 1․x &lt;code&gt;and then when&lt;/code&gt;</source>
          <target state="translated">RxJava 1․x, &lt;code&gt;and then when&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="4e40566e6068c626244c89c04d3de985ce8fd691" translate="yes" xml:space="preserve">
          <source>RxJava 1․x &lt;code&gt;asyncAction asyncFunc deferFuture forEachFuture fromAction fromCallable fromFunc0 fromRunnable start startFuture toAsync&lt;/code&gt;</source>
          <target state="translated">RxJava 1․x &lt;code&gt;asyncAction asyncFunc deferFuture forEachFuture fromAction fromCallable fromFunc0 fromRunnable start startFuture toAsync&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="55d8e1ec235bad42b8109bca542a81efc2f2b96c" translate="yes" xml:space="preserve">
          <source>RxJava 1․x &lt;code&gt;averageDouble averageFloat averageInteger averageLong&lt;/code&gt;</source>
          <target state="translated">RxJava 1․x в &lt;code&gt;averageDouble averageFloat averageInteger averageLong&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="732d4a912236c9ed18239c9c4a0d11b2b4f3e4ee" translate="yes" xml:space="preserve">
          <source>RxJava 1․x &lt;code&gt;buffer&lt;/code&gt;</source>
          <target state="translated">RxJava 1․x &lt;code&gt;buffer&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="d24dca97f5e5e9222bda50a2e7c115093da013d9" translate="yes" xml:space="preserve">
          <source>RxJava 1․x &lt;code&gt;byLine cast encode map&lt;/code&gt;</source>
          <target state="translated">RxJava 1․x &lt;code&gt;byLine cast encode map&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="8382b50b7583d83b2d6c578a5f62e98b49ec676d" translate="yes" xml:space="preserve">
          <source>RxJava 1․x &lt;code&gt;cache replay&lt;/code&gt;</source>
          <target state="translated">Воспроизведение &lt;code&gt;cache replay&lt;/code&gt; RxJava 1xx</target>
        </trans-unit>
        <trans-unit id="e2c31c9e12dd2e4204a7984491187676ab855f14" translate="yes" xml:space="preserve">
          <source>RxJava 1․x &lt;code&gt;collect reduce&lt;/code&gt;</source>
          <target state="translated">RxJava 1․x &lt;code&gt;collect reduce&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="c6c2f4e3682cfaef3871a2da0a09cb462fb8d17f" translate="yes" xml:space="preserve">
          <source>RxJava 1․x &lt;code&gt;combineLatest withLatestFrom&lt;/code&gt;</source>
          <target state="translated">RxJava 1․x &lt;code&gt;combineLatest withLatestFrom&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="7436f1a4e5c7f0f964d6d56df5d9028d789efc55" translate="yes" xml:space="preserve">
          <source>RxJava 1․x &lt;code&gt;concat concatWith&lt;/code&gt;</source>
          <target state="translated">RxJava 1․x &lt;code&gt;concat concatWith&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="b2ae627f16256e1b148a2fbba40c47b04422088a" translate="yes" xml:space="preserve">
          <source>RxJava 1․x &lt;code&gt;concatMap flatMap flatMapIterable StringObervable.split switchMap&lt;/code&gt;</source>
          <target state="translated">RxJava 1․x &lt;code&gt;concatMap flatMap flatMapIterable StringObervable.split switchMap&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="93f57c63911f67b93c60f289e9b0d9863a08b75b" translate="yes" xml:space="preserve">
          <source>RxJava 1․x &lt;code&gt;connect&lt;/code&gt;</source>
          <target state="translated">RxJava 1․x &lt;code&gt;connect&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="0620225475a550a3fc13253d713d9e3117823bc8" translate="yes" xml:space="preserve">
          <source>RxJava 1․x &lt;code&gt;contains exists isEmpty&lt;/code&gt;</source>
          <target state="translated">RxJava 1․x &lt;code&gt;contains exists isEmpty&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="acdb243b0615875cf9ef59a9dbf27a5971841ffc" translate="yes" xml:space="preserve">
          <source>RxJava 1․x &lt;code&gt;count countLong&lt;/code&gt;</source>
          <target state="translated">RxJava 1․x &lt;code&gt;count countLong&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="bf43cbc451f8c999075e3205bbd862c3411248f4" translate="yes" xml:space="preserve">
          <source>RxJava 1․x &lt;code&gt;create&lt;/code&gt;</source>
          <target state="translated">RxJava 1․x &lt;code&gt;create&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="ed3a500ce517bcf2e5f52d217365d7bba0346548" translate="yes" xml:space="preserve">
          <source>RxJava 1․x &lt;code&gt;debounce throttleWithTimeout&lt;/code&gt;</source>
          <target state="translated">RxJava 1․x &lt;code&gt;debounce throttleWithTimeout&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="69fe5c550ea6efb0436b09b68081dc5109910608" translate="yes" xml:space="preserve">
          <source>RxJava 1․x &lt;code&gt;decode from fromAction fromCallable fromFunc0 fromRunnable runAsync&lt;/code&gt;</source>
          <target state="translated">RxJava 1․x &lt;code&gt;decode from fromAction fromCallable fromFunc0 fromRunnable runAsync&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="04e57e058baf1531117a8d88afc72b9d9916b545" translate="yes" xml:space="preserve">
          <source>RxJava 1․x &lt;code&gt;defaultIfEmpty switchIfEmpty&lt;/code&gt;</source>
          <target state="translated">RxJava 1․x &lt;code&gt;defaultIfEmpty switchIfEmpty&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="9d0f27220fbc8c2b37a640437d49b372942dc6bf" translate="yes" xml:space="preserve">
          <source>RxJava 1․x &lt;code&gt;defer ifThen switchCase&lt;/code&gt;</source>
          <target state="translated">RxJava 1․x &lt;code&gt;defer ifThen switchCase&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="1b1fe5ec7bd7fec1335f817f4848b20f768c02aa" translate="yes" xml:space="preserve">
          <source>RxJava 1․x &lt;code&gt;delay delaySubscription&lt;/code&gt;</source>
          <target state="translated">RxJava &lt;code&gt;delay delaySubscription&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="bbc400edc58eff455964715650cfc77727c4d831" translate="yes" xml:space="preserve">
          <source>RxJava 1․x &lt;code&gt;dematerialize materialize&lt;/code&gt;</source>
          <target state="translated">RxJava 1․x &lt;code&gt;dematerialize materialize&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="4bb9ec32417cc7bb400c8cb5e79831dd79f8063a" translate="yes" xml:space="preserve">
          <source>RxJava 1․x &lt;code&gt;distinct distinctUntilChanged&lt;/code&gt;</source>
          <target state="translated">RxJava 1․x &lt;code&gt;distinct distinctUntilChanged&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="7ab1a8edb373d867419e4398b8dfe30bf069b2fe" translate="yes" xml:space="preserve">
          <source>RxJava 1․x &lt;code&gt;doOnCompleted doOnEach doOnError doOnNext doOnRequest doOnSubscribe doOnTerminate doOnUnsubscribe finallyDo doAfterTerminate&lt;/code&gt;</source>
          <target state="translated">RxJava 1․x &lt;code&gt;doOnCompleted doOnEach doOnError doOnNext doOnRequest doOnSubscribe doOnTerminate doOnUnsubscribe finallyDo doAfterTerminate&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="cd457aa8b00155f4d6bc4b4df542af7e90efd269" translate="yes" xml:space="preserve">
          <source>RxJava 1․x &lt;code&gt;doWhile repeat repeatWhen whileDo&lt;/code&gt;</source>
          <target state="translated">RxJava 1․x &lt;code&gt;doWhile repeat repeatWhen whileDo&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="00e4ebcb80ec208af3afd67a83bcb47b3f6430f0" translate="yes" xml:space="preserve">
          <source>RxJava 1․x &lt;code&gt;elementAt elementAtOrDefault&lt;/code&gt;</source>
          <target state="translated">RxJava 1․x &lt;code&gt;elementAt elementAtOrDefault&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="0cdf79305e3674e2fe019da11530b21e78fd2d08" translate="yes" xml:space="preserve">
          <source>RxJava 1․x &lt;code&gt;empty never error&lt;/code&gt;</source>
          <target state="translated">RxJava 1․x &lt;code&gt;empty never error&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="e8fdaa121a1afea7b16ecfc7d347707554b7491c" translate="yes" xml:space="preserve">
          <source>RxJava 1․x &lt;code&gt;filter ofType&lt;/code&gt;</source>
          <target state="translated">RxJava 1․x &lt;code&gt;filter ofType&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="6ff72499d22c86555a4241a982cbd0385323bbaa" translate="yes" xml:space="preserve">
          <source>RxJava 1․x &lt;code&gt;first firstOrDefault latest mostRecent next single singleOrDefault takeFirst&lt;/code&gt;</source>
          <target state="translated">RxJava 1․x &lt;code&gt;first firstOrDefault latest mostRecent next single singleOrDefault takeFirst&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="ee6e7c8b44258dc67d4b028bf8e39f9b2169451f" translate="yes" xml:space="preserve">
          <source>RxJava 1․x &lt;code&gt;groupBy&lt;/code&gt;</source>
          <target state="translated">RxJava 1․x &lt;code&gt;groupBy&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="8890856867d6552c54f00a6a38f89158eba09c08" translate="yes" xml:space="preserve">
          <source>RxJava 1․x &lt;code&gt;ignoreElements&lt;/code&gt;</source>
          <target state="translated">RxJava 1․x &lt;code&gt;ignoreElements&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="0d33d34caef576b2e38d2ce00c02ec2d76e13492" translate="yes" xml:space="preserve">
          <source>RxJava 1․x &lt;code&gt;interval&lt;/code&gt;</source>
          <target state="translated">RxJava 1․x &lt;code&gt;interval&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="5d1a5b178453c118c97241dc154ef04cdeddc0f8" translate="yes" xml:space="preserve">
          <source>RxJava 1․x &lt;code&gt;join groupJoin&lt;/code&gt;</source>
          <target state="translated">RxJava 1․x &lt;code&gt;join groupJoin&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="07c37f6026b0d32a2bb5284f388e38ecbb71e3ec" translate="yes" xml:space="preserve">
          <source>RxJava 1․x &lt;code&gt;just&lt;/code&gt;</source>
          <target state="translated">RxJava 1․x &lt;code&gt;just&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="3bbfa17d3030a2e1515aa3c1df1c88d210710bf9" translate="yes" xml:space="preserve">
          <source>RxJava 1․x &lt;code&gt;last lastOrDefault&lt;/code&gt;</source>
          <target state="translated">RxJava 1․x &lt;code&gt;last lastOrDefault&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="877b7899850621b7c222074a43d748f5974174c4" translate="yes" xml:space="preserve">
          <source>RxJava 1․x &lt;code&gt;limit take&lt;/code&gt;</source>
          <target state="translated">RxJava 1․x &lt;code&gt;limit take&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="978fdcad2ec95cf6d149fe4cc047d3030d771364" translate="yes" xml:space="preserve">
          <source>RxJava 1․x &lt;code&gt;max maxBy&lt;/code&gt;</source>
          <target state="translated">RxJava 1․x &lt;code&gt;max maxBy&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="3a64f2c2e4ddbdc37ad9aefad55faa4225cdfa9f" translate="yes" xml:space="preserve">
          <source>RxJava 1․x &lt;code&gt;merge mergeDelayError mergeWith&lt;/code&gt;</source>
          <target state="translated">RxJava 1․x &lt;code&gt;merge mergeDelayError mergeWith&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="5681402ec5c9f39e9ab0e6e198047f966ad7f965" translate="yes" xml:space="preserve">
          <source>RxJava 1․x &lt;code&gt;min minBy&lt;/code&gt;</source>
          <target state="translated">RxJava 1․x &lt;code&gt;min minBy&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="6ebe5e1ecaab5e75e28b559ef07d1c9db0eebbd3" translate="yes" xml:space="preserve">
          <source>RxJava 1․x &lt;code&gt;observeOn&lt;/code&gt;</source>
          <target state="translated">RxJava 1․x &lt;code&gt;observeOn&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="3c528cf53472110cda3f6874aac4954bef7bf855" translate="yes" xml:space="preserve">
          <source>RxJava 1․x &lt;code&gt;onBackpressureBuffer onBackpressureDrop onBackpressureLatest&lt;/code&gt;</source>
          <target state="translated">RxJava 1․x &lt;code&gt;onBackpressureBuffer onBackpressureDrop onBackpressureLatest&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="c6b2ccd30ae7558cd8bcaf67536f249d6e3c95df" translate="yes" xml:space="preserve">
          <source>RxJava 1․x &lt;code&gt;onErrorResumeNext onErrorReturn onExceptionResumeNext&lt;/code&gt;</source>
          <target state="translated">RxJava 1․x &lt;code&gt;onErrorResumeNext onErrorReturn onExceptionResumeNext&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="78806ddaa521338826b0bec33334738093e61d05" translate="yes" xml:space="preserve">
          <source>RxJava 1․x &lt;code&gt;publish&lt;/code&gt;</source>
          <target state="translated">RxJava 1․x &lt;code&gt;publish&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="bf34db6f3041a5f41d5d428cc7059c007c374c48" translate="yes" xml:space="preserve">
          <source>RxJava 1․x &lt;code&gt;range&lt;/code&gt;</source>
          <target state="translated">RxJava 1․x &lt;code&gt;range&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="e9c16f1da41fa17fdf7c8099e49ff973eedb6f7c" translate="yes" xml:space="preserve">
          <source>RxJava 1․x &lt;code&gt;refCount share&lt;/code&gt;</source>
          <target state="translated">RxJava 1․x &lt;code&gt;refCount share&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="7d0015c387c51aeb1d34ee2c8bbef5c910566fa1" translate="yes" xml:space="preserve">
          <source>RxJava 1․x &lt;code&gt;retry retryWhen&lt;/code&gt;</source>
          <target state="translated">RxJava 1․x &lt;code&gt;retry retryWhen&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="dc87e3cab25800be0127e29d971190b26ae6c71b" translate="yes" xml:space="preserve">
          <source>RxJava 1․x &lt;code&gt;sample throttleFirst throttleLast&lt;/code&gt;</source>
          <target state="translated">Примерный &lt;code&gt;sample throttleFirst throttleLast&lt;/code&gt; RxJava 1․x Первый дроссельLast</target>
        </trans-unit>
        <trans-unit id="402e6e501f56a67e5bfb2d8de6a462c18fe2dff5" translate="yes" xml:space="preserve">
          <source>RxJava 1․x &lt;code&gt;scan&lt;/code&gt;</source>
          <target state="translated">RxJava 1․x &lt;code&gt;scan&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="612d3883c5a834d2a85fd42c07fe5e38038de218" translate="yes" xml:space="preserve">
          <source>RxJava 1․x &lt;code&gt;sequenceEqual&lt;/code&gt;</source>
          <target state="translated">RxJava 1.x &lt;code&gt;sequenceEqual&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="629eb10fbe33dccbc5606e5481d73ad33a9fe3a8" translate="yes" xml:space="preserve">
          <source>RxJava 1․x &lt;code&gt;serialize&lt;/code&gt;</source>
          <target state="translated">RxJava 1․x &lt;code&gt;serialize&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="546298580b30f00b8e153d706d352a2d0da79789" translate="yes" xml:space="preserve">
          <source>RxJava 1․x &lt;code&gt;skip&lt;/code&gt;</source>
          <target state="translated">RxJava 1․x &lt;code&gt;skip&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="5bfdefde89fae14f21daf3d525ce53f42b04859f" translate="yes" xml:space="preserve">
          <source>RxJava 1․x &lt;code&gt;skipLast&lt;/code&gt;</source>
          <target state="translated">RxJava 1․x &lt;code&gt;skipLast&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="eb45b9a35ceb07b1d54a17acb017560934204194" translate="yes" xml:space="preserve">
          <source>RxJava 1․x &lt;code&gt;skipUntil&lt;/code&gt;</source>
          <target state="translated">RxJava 1․x &lt;code&gt;skipUntil&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="69d7a310692445a4d420446b075efa9cdd11f6a8" translate="yes" xml:space="preserve">
          <source>RxJava 1․x &lt;code&gt;skipWhile&lt;/code&gt;</source>
          <target state="translated">RxJava 1․x &lt;code&gt;skipWhile&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="c1f3d5b968c0f9749053d37691f45ed6f720b8c9" translate="yes" xml:space="preserve">
          <source>RxJava 1․x &lt;code&gt;startWith&lt;/code&gt;</source>
          <target state="translated">RxJava 1․x &lt;code&gt;startWith&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="ae1303a2bb6a2090bb97355f9ed5f044205901fe" translate="yes" xml:space="preserve">
          <source>RxJava 1․x &lt;code&gt;subscribeOn unsubscribeOn&lt;/code&gt;</source>
          <target state="translated">RxJava 1․x &lt;code&gt;subscribeOn unsubscribeOn&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="164fd1a20ff3b7d9c9297b6b47cf523d15fec9ce" translate="yes" xml:space="preserve">
          <source>RxJava 1․x &lt;code&gt;sumDouble sumFloat sumInteger sumLong StringObservable.join StringObservable.stringConcat&lt;/code&gt;</source>
          <target state="translated">RxJava 1․x &lt;code&gt;sumDouble sumFloat sumInteger sumLong StringObservable.join StringObservable.stringConcat&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="2325a3d38176945b0106202ba5ea15ffaee2055f" translate="yes" xml:space="preserve">
          <source>RxJava 1․x &lt;code&gt;switchOnNext&lt;/code&gt;</source>
          <target state="translated">RxJava 1․x &lt;code&gt;switchOnNext&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="d70ca00c36c9ee4e36ea2a992958f68379376c53" translate="yes" xml:space="preserve">
          <source>RxJava 1․x &lt;code&gt;takeLast takeLastBuffer&lt;/code&gt;</source>
          <target state="translated">RxJava 1․x &lt;code&gt;takeLast takeLastBuffer&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="5a24155db8b5258f3f7f85ef7a56cc25eeaf0b15" translate="yes" xml:space="preserve">
          <source>RxJava 1․x &lt;code&gt;takeUntil&lt;/code&gt;</source>
          <target state="translated">RxJava 1․x &lt;code&gt;takeUntil&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="5a15ee85f3c3644bb9e777585edebfa043c1023c" translate="yes" xml:space="preserve">
          <source>RxJava 1․x &lt;code&gt;takeWhile&lt;/code&gt;</source>
          <target state="translated">RxJava 1․x &lt;code&gt;takeWhile&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="c1c775c4c5ebd87aae41c99f89e7af6d51c0efe5" translate="yes" xml:space="preserve">
          <source>RxJava 1․x &lt;code&gt;timeInterval&lt;/code&gt;</source>
          <target state="translated">RxJava 1․x &lt;code&gt;timeInterval&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="c146d48adf9bf127876fbd32b4cfc9a1dbe76b6c" translate="yes" xml:space="preserve">
          <source>RxJava 1․x &lt;code&gt;timeout&lt;/code&gt;</source>
          <target state="translated">RxJava 1․x &lt;code&gt;timeout&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="4ddb01e01327b055a2ff32e0e5ff406137e1b3c9" translate="yes" xml:space="preserve">
          <source>RxJava 1․x &lt;code&gt;timer&lt;/code&gt;</source>
          <target state="translated">RxJava 1avax &lt;code&gt;timer&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="a530249a3eaeda805bda74d85f7d6a2ed3396133" translate="yes" xml:space="preserve">
          <source>RxJava 1․x &lt;code&gt;timestamp&lt;/code&gt;</source>
          <target state="translated">Метка &lt;code&gt;timestamp&lt;/code&gt; RxJava 1․x</target>
        </trans-unit>
        <trans-unit id="c5639896561fb4fe6070f887867d75058cccf548" translate="yes" xml:space="preserve">
          <source>RxJava 1․x &lt;code&gt;using&lt;/code&gt;</source>
          <target state="translated">RxJava 1․x &lt;code&gt;using&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="644aee96ae45d3378e36e4ff6d4d00b07ced504e" translate="yes" xml:space="preserve">
          <source>RxJava 1․x &lt;code&gt;window&lt;/code&gt;</source>
          <target state="translated">1.x RxJava &lt;code&gt;window&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="b52330bd8c67309e3b879bdbdd88a4800a116c86" translate="yes" xml:space="preserve">
          <source>RxJava 1․x &lt;code&gt;zip zipWith&lt;/code&gt;</source>
          <target state="translated">RxJava 1․x &lt;code&gt;zip zipWith&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="2a05da424ac49ff760c67aa9489c754cf8ade366" translate="yes" xml:space="preserve">
          <source>RxJava 2.x implements these operators as &lt;code&gt;empty&lt;/code&gt;, &lt;code&gt;never&lt;/code&gt;, and &lt;code&gt;error&lt;/code&gt;. The &lt;code&gt;error&lt;/code&gt; operator takes as a parameter the &lt;code&gt;Throwable&lt;/code&gt; with which you want the Observable to terminate, or a &lt;code&gt;Callable&lt;/code&gt; that returns such a &lt;code&gt;Throwable&lt;/code&gt;.</source>
          <target state="translated">RxJava 2.x реализует эти операторы как &lt;code&gt;empty&lt;/code&gt; , &lt;code&gt;never&lt;/code&gt; и &lt;code&gt;error&lt;/code&gt; . Оператор &lt;code&gt;error&lt;/code&gt; принимает в качестве параметра &lt;code&gt;Throwable&lt;/code&gt; , которым вы хотите завершить Observable, или &lt;code&gt;Callable&lt;/code&gt; , который возвращает такой &lt;code&gt;Throwable&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="0fe894c8b7631e47ac846c9c472001a3020b0322" translate="yes" xml:space="preserve">
          <source>RxJava 2.x implements this operator as &lt;code&gt;all&lt;/code&gt;. It does not by default operate on any particular &lt;a href=&quot;../scheduler&quot;&gt;Scheduler&lt;/a&gt;.</source>
          <target state="translated">RxJava 2.x реализует этот оператор как &lt;code&gt;all&lt;/code&gt; . По умолчанию он не работает с каким-либо конкретным &lt;a href=&quot;../scheduler&quot;&gt;планировщиком&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="22b48e67b07c0aa8a7344d4c0c547c6ed5d917f2" translate="yes" xml:space="preserve">
          <source>RxJava 2.x implements this operator as &lt;code&gt;amb&lt;/code&gt;. It takes an Iterable of Observables as its parameter. You can also use &lt;code&gt;ambArray&lt;/code&gt; to pass an array of Observables. There is also an instance version of the operator, &lt;code&gt;ambWith&lt;/code&gt;, so that, for example, instead of writing &lt;code&gt;Observable.ambArray([o1,o2])&lt;/code&gt; you could also write &lt;code&gt;o1.ambWith(o2)&lt;/code&gt; for the same effect.</source>
          <target state="translated">RxJava 2.x реализует этот оператор как &lt;code&gt;amb&lt;/code&gt; . Он принимает в качестве параметра Iterable of Observables. Вы также можете использовать &lt;code&gt;ambArray&lt;/code&gt; для передачи массива Observables. Также существует экземплярная версия оператора &lt;code&gt;ambWith&lt;/code&gt; , так что, например, вместо записи &lt;code&gt;Observable.ambArray([o1,o2])&lt;/code&gt; вы также можете написать &lt;code&gt;o1.ambWith(o2)&lt;/code&gt; для того же эффекта.</target>
        </trans-unit>
        <trans-unit id="854c0713f9ea5d906427a71acb7de1f44e9e0574" translate="yes" xml:space="preserve">
          <source>RxJava 2․x &lt;code&gt;all&lt;/code&gt;</source>
          <target state="translated">RxJava 2․x &lt;code&gt;all&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="e4410d2b19cd7df24cbaa26ac6dc610b17e36a1d" translate="yes" xml:space="preserve">
          <source>RxJava 2․x &lt;code&gt;amb ambArray ambWith&lt;/code&gt;</source>
          <target state="translated">RxJava 2․x &lt;code&gt;amb ambArray ambWith&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="dcf989473f7287f679006f87123ee35266dbb382" translate="yes" xml:space="preserve">
          <source>RxJava 2․x &lt;code&gt;any contains isEmpty&lt;/code&gt;</source>
          <target state="translated">RxJava 2․x &lt;code&gt;any contains isEmpty&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="2a463f62604cc55afcc7931d9e70a53bdfe350ed" translate="yes" xml:space="preserve">
          <source>RxJava 2․x &lt;code&gt;defaultIfEmpty switchIfEmpty&lt;/code&gt;</source>
          <target state="translated">RxJava 2․x &lt;code&gt;defaultIfEmpty switchIfEmpty&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="dca5b00ec5c630ab6290c13f196c4d59827e9d24" translate="yes" xml:space="preserve">
          <source>RxJava 2․x &lt;code&gt;empty never error&lt;/code&gt;</source>
          <target state="translated">RxJava 2․x &lt;code&gt;empty never error&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="d883aeb1476b8a5f9b60dc3d2616ca5b41440a59" translate="yes" xml:space="preserve">
          <source>RxJava Tutorial 03: Observable from, just, &amp;amp; create methods</source>
          <target state="translated">RxJava Tutorial 03: Observable from, just, &amp;amp; create методы</target>
        </trans-unit>
        <trans-unit id="495159a3cc065aa194dd61853f9b55d32a956202" translate="yes" xml:space="preserve">
          <source>RxJava also has a &lt;code&gt;nest&lt;/code&gt; operator that has one particular purpose: it converts a source Observable into an Observable that emits that source Observable as its sole item.</source>
          <target state="translated">RxJava также имеет &lt;code&gt;nest&lt;/code&gt; оператора , который имеет одну конкретной цели: он преобразует источник Observable в наблюдаемый , который излучает , что источник Наблюдаемого в качестве единственного элемента.</target>
        </trans-unit>
        <trans-unit id="b19e07c35fb2e9fa0bc905a1b2e2fe7877aa614f" translate="yes" xml:space="preserve">
          <source>RxJava also implements the &lt;code&gt;distinctUntilChanged&lt;/code&gt; operator. It only compares emitted items from the source Observable against their immediate predecessors in order to determine whether or not they are distinct.</source>
          <target state="translated">RxJava также реализует &lt;code&gt;distinctUntilChanged&lt;/code&gt; оператора. Он только сравнивает отправленные элементы из источника Observable с их непосредственными предшественниками, чтобы определить, являются ли они различными.</target>
        </trans-unit>
        <trans-unit id="f5648b83b3ec6c22393fec55d1a31d4200652c4e" translate="yes" xml:space="preserve">
          <source>RxJava also implements the &lt;code&gt;exists&lt;/code&gt; operator. It is similar to &lt;code&gt;contains&lt;/code&gt; but tests items emitted by the source Observable against a predicate function you supply, rather than testing them for identity with a particular object. The Observable returned from &lt;code&gt;exists&lt;/code&gt; will return &lt;code&gt;true&lt;/code&gt; if the source Observable emits an item that satisfies your predicate function, and &lt;code&gt;false&lt;/code&gt; if it completes without emitting such an item.</source>
          <target state="translated">RxJava также реализует оператор &lt;code&gt;exists&lt;/code&gt; . Он похож на &lt;code&gt;contains&lt;/code&gt; , но проверяет элементы, испускаемые источником Observable, на основе предоставленной вами функции предиката, а не проверяет их на идентичность с конкретным объектом. Observable, возвращенный из &lt;code&gt;exists&lt;/code&gt; , вернет &lt;code&gt;true&lt;/code&gt; , если исходный Observable испускает элемент, который удовлетворяет вашей функции предиката, и &lt;code&gt;false&lt;/code&gt; , если он завершается без испускания такого элемента.</target>
        </trans-unit>
        <trans-unit id="5d8a487b36564d3a62bacace7303cb2e5e663457" translate="yes" xml:space="preserve">
          <source>RxJava also implements the &lt;code&gt;isEmpty&lt;/code&gt; operator. The Observable returned from &lt;code&gt;isEmpty&lt;/code&gt; will return &lt;code&gt;false&lt;/code&gt; if the source Observable emits an item, and &lt;code&gt;true&lt;/code&gt; if it completes without emitting an item.</source>
          <target state="translated">RxJava также реализует оператор &lt;code&gt;isEmpty&lt;/code&gt; . Observable, возвращенный из &lt;code&gt;isEmpty&lt;/code&gt; , вернет &lt;code&gt;false&lt;/code&gt; , если исходный Observable испускает элемент, и &lt;code&gt;true&lt;/code&gt; , если он завершается без испускания элемента.</target>
        </trans-unit>
        <trans-unit id="755de58c819cd745cde87d3de3c29b3c9341186c" translate="yes" xml:space="preserve">
          <source>RxJava also implements the &lt;code&gt;switchMap&lt;/code&gt; operator. It behaves much like &lt;code&gt;flatMap&lt;/code&gt;, except that whenever a new item is emitted by the source Observable, it will unsubscribe to and stop mirroring the Observable that was generated from the previously-emitted item, and begin only mirroring the current one.</source>
          <target state="translated">RxJava также реализует оператор &lt;code&gt;switchMap&lt;/code&gt; . Он ведет себя так же, как &lt;code&gt;flatMap&lt;/code&gt; , за исключением того, что всякий раз, когда источник Observable генерирует новый элемент, он отменяет подписку на Observable, который был сгенерирован из ранее выданного элемента, и прекращает его зеркальное отображение, и начинает только зеркальное отображение текущего.</target>
        </trans-unit>
        <trans-unit id="07a87340b6d4231e69ffa835d45c77e002cf8b1c" translate="yes" xml:space="preserve">
          <source>RxJava has several Do variants.</source>
          <target state="translated">У RxJava есть несколько вариантов Do.</target>
        </trans-unit>
        <trans-unit id="3b376db8d1430d2983e06e3f2ac3200aba6f0b7f" translate="yes" xml:space="preserve">
          <source>RxJava has two versions of this operator: &lt;code&gt;retry&lt;/code&gt; and &lt;code&gt;retryWhen&lt;/code&gt;.</source>
          <target state="translated">RxJava имеет две версии этого оператора: &lt;code&gt;retry&lt;/code&gt; и &lt;code&gt;retryWhen&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="3faee876d5e097db742fb8cca5bccee9e4fe094d" translate="yes" xml:space="preserve">
          <source>RxJava implements a &lt;code&gt;max&lt;/code&gt; operator. It takes an optional comparator that it will use instead of its default to compare the value of two items. If more than one item has the identical maximum value, &lt;code&gt;max&lt;/code&gt; will emit the &lt;em&gt;last&lt;/em&gt; such item emitted by the source Observable.</source>
          <target state="translated">RxJava реализует оператор &lt;code&gt;max&lt;/code&gt; . Требуется дополнительный компаратор, который он будет использовать вместо своего значения по умолчанию для сравнения значений двух элементов. Если более чем один элемент имеет одинаковое максимальное значение, &lt;code&gt;max&lt;/code&gt; будет генерировать &lt;em&gt;последний&lt;/em&gt; такой элемент, выпущенный источником Observable.</target>
        </trans-unit>
        <trans-unit id="9ea5780e471e20e503c5e8a09c67a25b0261142b" translate="yes" xml:space="preserve">
          <source>RxJava implements a &lt;code&gt;min&lt;/code&gt; operator. It takes an optional comparator that it will use instead of its default to compare the value of two items. If more than one item has the identical minimum value, &lt;code&gt;min&lt;/code&gt; will emit the &lt;em&gt;last&lt;/em&gt; such item emitted by the source Observable.</source>
          <target state="translated">RxJava реализует оператор &lt;code&gt;min&lt;/code&gt; . Требуется дополнительный компаратор, который он будет использовать вместо своего значения по умолчанию для сравнения значений двух элементов. Если более чем один элемент имеет одинаковое минимальное значение, &lt;code&gt;min&lt;/code&gt; будет выдавать &lt;em&gt;последний&lt;/em&gt; такой элемент, выпущенный источником Observable.</target>
        </trans-unit>
        <trans-unit id="6c42fab8985f7ed135128958f82bab0c5ca621c2" translate="yes" xml:space="preserve">
          <source>RxJava implements reactive pull backpressure, and many of its operators support that form of backpressure. It also has three operators that you can apply to Observables that have not been written to support backpressure:</source>
          <target state="translated">RxJava реализует противодавление реактивной тяги,и многие операторы поддерживают эту форму противодавления.В ней также есть три оператора,которые вы можете применить к &quot;Наблюдателям&quot;,которые не были написаны для поддержки противодавления:</target>
        </trans-unit>
        <trans-unit id="7e4376ec4980f3d02ae1eb3346609ed53b3a4eba" translate="yes" xml:space="preserve">
          <source>RxJava implements several variants of &lt;code&gt;subscribe&lt;/code&gt;.</source>
          <target state="translated">RxJava реализует несколько вариантов &lt;code&gt;subscribe&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="19c0c0a8cf2b753db738624ec1ee9f008455de06" translate="yes" xml:space="preserve">
          <source>RxJava implements the &lt;code&gt;flatMap&lt;/code&gt; operator.</source>
          <target state="translated">RxJava реализует оператор &lt;code&gt;flatMap&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="bf5f290060bc640bb009c63b121fc60680f9cdc0" translate="yes" xml:space="preserve">
          <source>RxJava implements the &lt;code&gt;groupBy&lt;/code&gt; operator. The Observable it returns emits items of a particular subclass of Observable &amp;mdash; the &lt;code&gt;GroupedObservable&lt;/code&gt;. Objects that implement the &lt;code&gt;GroupedObservable&lt;/code&gt; interface have an additional method &amp;mdash; &lt;code&gt;getkey&lt;/code&gt; &amp;mdash; by which you can retrieve the key by which items were designated for this particular &lt;code&gt;GroupedObservable&lt;/code&gt;.</source>
          <target state="translated">RxJava реализует оператор &lt;code&gt;groupBy&lt;/code&gt; . Возвращаемый Observable испускает элементы определенного подкласса Observable - &lt;code&gt;GroupedObservable&lt;/code&gt; . У объектов, реализующих интерфейс &lt;code&gt;GroupedObservable&lt;/code&gt; , есть дополнительный метод - &lt;code&gt;getkey&lt;/code&gt; - с помощью которого вы можете получить ключ, по которому элементы были назначены для этого конкретного &lt;code&gt;GroupedObservable&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="921cf795b4edda6a898eaf064cfde69631ca4faa" translate="yes" xml:space="preserve">
          <source>RxJava implements the Catch operator with three distinct operators:</source>
          <target state="translated">RxJava реализует оператора Catch с тремя разными операторами:</target>
        </trans-unit>
        <trans-unit id="8a94c6d25ecf2aadb5e75d972386f2d9956927ee" translate="yes" xml:space="preserve">
          <source>RxJava implements this operator as &lt;code&gt;combineLatest&lt;/code&gt;. It may take between two and nine Observables (as well as the combining function) as parameters, or a single &lt;code&gt;List&lt;/code&gt; of Observables (as well as the combining function). It does not by default operate on any particular &lt;a href=&quot;../scheduler&quot;&gt;Scheduler&lt;/a&gt;.</source>
          <target state="translated">RxJava реализует этот оператор как &lt;code&gt;combineLatest&lt;/code&gt; . Он может принимать от двух до девяти Observables (а также функцию объединения) в качестве параметров или один &lt;code&gt;List&lt;/code&gt; of Observables (а также функцию объединения). По умолчанию он не работает с каким-либо конкретным &lt;a href=&quot;../scheduler&quot;&gt;планировщиком&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="808f0dee2b9ecfc5702512869a79ca9db6afdc2f" translate="yes" xml:space="preserve">
          <source>RxJava implements this operator as &lt;code&gt;concat&lt;/code&gt;. There are variants of this operator that take between two and nine Observables as parameters, and that concatenate them in the order they appear in the parameter list. There is also a variant that takes as a parameter an Observable of Observables, and concatenates each of these Observables in the order that they are emitted.</source>
          <target state="translated">RxJava реализует этот оператор как &lt;code&gt;concat&lt;/code&gt; . Существуют варианты этого оператора, которые принимают от двух до девяти Observable в качестве параметров и объединяют их в том порядке, в котором они появляются в списке параметров. Существует также вариант, который принимает в качестве параметра Observable или Observables и объединяет каждый из этих Observable в том порядке, в котором они были отправлены.</target>
        </trans-unit>
        <trans-unit id="3c7c7293262a4f48c88354ad120daae3e7c18557" translate="yes" xml:space="preserve">
          <source>RxJava implements this operator as &lt;code&gt;contains&lt;/code&gt;. It does not by default operate on any particular &lt;a href=&quot;../scheduler&quot;&gt;Scheduler&lt;/a&gt;.</source>
          <target state="translated">RxJava реализует этот оператор как &lt;code&gt;contains&lt;/code&gt; . По умолчанию он не работает с каким-либо конкретным &lt;a href=&quot;../scheduler&quot;&gt;планировщиком&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="d6489fe04fcdc35dfccce65a0ceefaf376cdf5f6" translate="yes" xml:space="preserve">
          <source>RxJava implements this operator as &lt;code&gt;create&lt;/code&gt;.</source>
          <target state="translated">RxJava реализует этот оператор как &lt;code&gt;create&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="251a5eede44bc9071efd31b8434cc168cf2c6d2d" translate="yes" xml:space="preserve">
          <source>RxJava implements this operator as &lt;code&gt;defaultIfEmpty&lt;/code&gt;.</source>
          <target state="translated">RxJava реализует этот оператор как &lt;code&gt;defaultIfEmpty&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="82c486a8d1205a7eb09c044a7cc7a2ce33984a35" translate="yes" xml:space="preserve">
          <source>RxJava implements this operator as &lt;code&gt;defer&lt;/code&gt;. This operator takes as its sole parameter an Observable factory function of your choosing. This function takes no parameters and returns an Observable.</source>
          <target state="translated">RxJava реализует этот оператор как &lt;code&gt;defer&lt;/code&gt; . Этот оператор принимает в качестве единственного параметра любую наблюдаемую фабричную функцию по вашему выбору. Эта функция не принимает параметров и возвращает Observable.</target>
        </trans-unit>
        <trans-unit id="085a3960416c49cc5a4ca36f8bc10c673612abef" translate="yes" xml:space="preserve">
          <source>RxJava implements this operator as &lt;code&gt;distinct&lt;/code&gt;.</source>
          <target state="translated">RxJava реализует этот оператор &lt;code&gt;distinct&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="e0598e43b8cd6d246c81a4d433ea77d118e4fc51" translate="yes" xml:space="preserve">
          <source>RxJava implements this operator as &lt;code&gt;filter&lt;/code&gt;.</source>
          <target state="translated">RxJava реализует этот оператор как &lt;code&gt;filter&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="8109349ff21a12901105a628ebb5717e8622e269" translate="yes" xml:space="preserve">
          <source>RxJava implements this operator as &lt;code&gt;ignoreElements&lt;/code&gt;.</source>
          <target state="translated">RxJava реализует этот оператор как &lt;code&gt;ignoreElements&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="cbc1bb1ec317b2d4523ea7dcdabf5fc62f29f5b0" translate="yes" xml:space="preserve">
          <source>RxJava implements this operator as &lt;code&gt;interval&lt;/code&gt;. It accepts as its parameters a span of time to wait between emissions and the &lt;code&gt;TimeUnit&lt;/code&gt; in which this span is measured.</source>
          <target state="translated">RxJava реализует этот оператор как &lt;code&gt;interval&lt;/code&gt; . Он принимает в качестве своих параметров интервал времени ожидания между выбросами и &lt;code&gt;TimeUnit&lt;/code&gt; , в котором этот интервал измеряется.</target>
        </trans-unit>
        <trans-unit id="000771929ca1eb0e71865c18b54188b629d92946" translate="yes" xml:space="preserve">
          <source>RxJava implements this operator as &lt;code&gt;just&lt;/code&gt;. It accepts between one and nine items as parameters, and returns an Observable that emits these items in the same order as they are given in the parameter list.</source>
          <target state="translated">RxJava реализует этот оператор как &lt;code&gt;just&lt;/code&gt; . Он принимает от одного до девяти элементов в качестве параметров и возвращает Observable, который испускает эти элементы в том же порядке, в каком они указаны в списке параметров.</target>
        </trans-unit>
        <trans-unit id="db27816a9d0cffdce1a5a566c78c4089052b63ba" translate="yes" xml:space="preserve">
          <source>RxJava implements this operator as &lt;code&gt;map&lt;/code&gt;.</source>
          <target state="translated">RxJava реализует этот оператор как &lt;code&gt;map&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="8e71cef34e2fb6da4259c4359da4b760337dbdb9" translate="yes" xml:space="preserve">
          <source>RxJava implements this operator as &lt;code&gt;merge&lt;/code&gt;, &lt;code&gt;mergeWith&lt;/code&gt;, and &lt;code&gt;mergeDelayError&lt;/code&gt;.</source>
          <target state="translated">RxJava реализует этот оператор как &lt;code&gt;merge&lt;/code&gt; , &lt;code&gt;mergeWith&lt;/code&gt; и &lt;code&gt;mergeDelayError&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="a72bcba0859e39f9428208ad44154c5f2a5aaa04" translate="yes" xml:space="preserve">
          <source>RxJava implements this operator as &lt;code&gt;publish&lt;/code&gt;.</source>
          <target state="translated">RxJava реализует этот оператор как &lt;code&gt;publish&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="1ed348b710a23e29309352f25f300229735e4a55" translate="yes" xml:space="preserve">
          <source>RxJava implements this operator as &lt;code&gt;range&lt;/code&gt;. It accepts as its parameters the start value of the range and the number of items in the range. If you set that number of items to zero, the resulting Observable will emit no values (if you set it to a negative number, &lt;code&gt;range&lt;/code&gt; will cause an exception).</source>
          <target state="translated">RxJava реализует этот оператор как &lt;code&gt;range&lt;/code&gt; . Он принимает в качестве параметров начальное значение диапазона и количество элементов в диапазоне. Если вы установите это количество элементов равным нулю, результирующий Observable не будет выдавать никаких значений (если вы установите отрицательное число, &lt;code&gt;range&lt;/code&gt; вызовет исключение).</target>
        </trans-unit>
        <trans-unit id="4b9b38e57be28d83066ec44a35e109fda38aee04" translate="yes" xml:space="preserve">
          <source>RxJava implements this operator as &lt;code&gt;refCount&lt;/code&gt;.</source>
          <target state="translated">RxJava реализует этот оператор как &lt;code&gt;refCount&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="9e9524b36437ff532c5f159b805867c46d566686" translate="yes" xml:space="preserve">
          <source>RxJava implements this operator as &lt;code&gt;repeat&lt;/code&gt;. It does not initiate an Observable, but operates on an Observable in such a way that it repeats the sequence emitted by the source Observable as its own sequence, either infinitely, or in the case of &lt;code&gt;repeat(&lt;i&gt;n&lt;/i&gt;)&lt;/code&gt;,</source>
          <target state="translated">RxJava реализует этот оператор как &lt;code&gt;repeat&lt;/code&gt; . Он не инициирует Observable, но работает с Observable таким образом, что он повторяет последовательность, испущенную исходным Observable, как свою собственную последовательность, либо бесконечно, либо в случае &lt;code&gt;repeat(&lt;i&gt;n&lt;/i&gt;)&lt;/code&gt; ,</target>
        </trans-unit>
        <trans-unit id="d0ac6ed673611a72ec3c86fb9b63938d79646bfd" translate="yes" xml:space="preserve">
          <source>RxJava implements this operator as &lt;code&gt;sample&lt;/code&gt; and &lt;code&gt;throttleLast&lt;/code&gt;.</source>
          <target state="translated">RxJava реализует этот оператор как &lt;code&gt;sample&lt;/code&gt; и &lt;code&gt;throttleLast&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="58e6769a41b3558e2e709ef50322b43433a88663" translate="yes" xml:space="preserve">
          <source>RxJava implements this operator as &lt;code&gt;scan&lt;/code&gt;.</source>
          <target state="translated">RxJava реализует этот оператор как &lt;code&gt;scan&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="30581da5528bcd10f94da48f4d10dcfc54496906" translate="yes" xml:space="preserve">
          <source>RxJava implements this operator as &lt;code&gt;serialize&lt;/code&gt;. It does not by default operate on any particular &lt;a href=&quot;../scheduler&quot;&gt;Scheduler&lt;/a&gt;.</source>
          <target state="translated">RxJava реализует этот оператор как &lt;code&gt;serialize&lt;/code&gt; . По умолчанию он не работает с каким-либо конкретным &lt;a href=&quot;../scheduler&quot;&gt;планировщиком&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="5540d62ab871e084bf17fd4f0bc9cfff17608a1c" translate="yes" xml:space="preserve">
          <source>RxJava implements this operator as &lt;code&gt;startWith&lt;/code&gt;.</source>
          <target state="translated">RxJava реализует этот оператор как &lt;code&gt;startWith&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="9a2b1edda98e71e541da288fc8eb1f2ea0dec1a8" translate="yes" xml:space="preserve">
          <source>RxJava implements this operator as &lt;code&gt;switchOnNext&lt;/code&gt;. It does not by default operate on any particular &lt;a href=&quot;../scheduler&quot;&gt;Scheduler&lt;/a&gt;.</source>
          <target state="translated">RxJava реализует этот оператор как &lt;code&gt;switchOnNext&lt;/code&gt; . По умолчанию он не работает с каким-либо конкретным &lt;a href=&quot;../scheduler&quot;&gt;планировщиком&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="a43115d7b72525ab01f02fd2396dc1a4436021ae" translate="yes" xml:space="preserve">
          <source>RxJava implements this operator as &lt;code&gt;throttleWithTimeout&lt;/code&gt; and &lt;code&gt;debounce&lt;/code&gt;.</source>
          <target state="translated">RxJava реализует этот оператор как &lt;code&gt;throttleWithTimeout&lt;/code&gt; и &lt;code&gt;debounce&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="6dc9cbbad7dd46d86a6a5d029f909061c278436c" translate="yes" xml:space="preserve">
          <source>RxJava implements this operator as &lt;code&gt;timeout&lt;/code&gt;, but in several variants.</source>
          <target state="translated">RxJava реализует этот оператор как &lt;code&gt;timeout&lt;/code&gt; , но в нескольких вариантах.</target>
        </trans-unit>
        <trans-unit id="acb0c821f551156b27e16a3b5c03033b9eef355c" translate="yes" xml:space="preserve">
          <source>RxJava implements this operator as &lt;code&gt;timer&lt;/code&gt;.</source>
          <target state="translated">RxJava реализует этот оператор как &lt;code&gt;timer&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="8a09999bcf055fe9da6c0a42a13916d3e530aa0d" translate="yes" xml:space="preserve">
          <source>RxJava implements this operator as several variants of &lt;code&gt;zip&lt;/code&gt; and also as &lt;code&gt;zipWith&lt;/code&gt;, an instance function version of the operator.</source>
          <target state="translated">RxJava реализует этот оператор как несколько вариантов &lt;code&gt;zip&lt;/code&gt; , а также как &lt;code&gt;zipWith&lt;/code&gt; , версию функции экземпляра оператора.</target>
        </trans-unit>
        <trans-unit id="ff4b03af7da322cf85a255917ef15d1ceda12fbc" translate="yes" xml:space="preserve">
          <source>RxJava implements this operator as variants of &lt;code&gt;delay&lt;/code&gt; and &lt;code&gt;delaySubscription&lt;/code&gt;.</source>
          <target state="translated">RxJava реализует этот оператор как варианты &lt;code&gt;delay&lt;/code&gt; и &lt;code&gt;delaySubscription&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="9dac2df2def7441dbcb07ba56a65ad9f6cd3d348" translate="yes" xml:space="preserve">
          <source>RxKotlin &lt;code&gt;buffer&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;buffer&lt;/code&gt; RxKotlin</target>
        </trans-unit>
        <trans-unit id="521d6cf0964d9c955424ecc4f6aab1ac9797ae7c" translate="yes" xml:space="preserve">
          <source>RxKotlin &lt;code&gt;concat concatWith&lt;/code&gt;</source>
          <target state="translated">RxKotlin &lt;code&gt;concat concatWith&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="a70ff358a16c44f05e303569a976cb31721a9d5b" translate="yes" xml:space="preserve">
          <source>RxKotlin &lt;code&gt;count&lt;/code&gt;</source>
          <target state="translated">RxKotlin &lt;code&gt;count&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="3ac374d773b5453eddc1f5d68fbd26738da51f3c" translate="yes" xml:space="preserve">
          <source>RxKotlin &lt;code&gt;merge mergeDelayError mergeWith&lt;/code&gt;</source>
          <target state="translated">RxKotlin &lt;code&gt;merge mergeDelayError mergeWith&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="d97815c04744ae033109be055305646d30a25422" translate="yes" xml:space="preserve">
          <source>RxKotlin &lt;code&gt;onErrorResumeNext onErrorReturn onExceptionResumeNext&lt;/code&gt;</source>
          <target state="translated">RxKotlin &lt;code&gt;onErrorResumeNext onErrorReturn onExceptionResumeNext&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="f24cd5faef03d1b1d17dfad6f47c53f96a729393" translate="yes" xml:space="preserve">
          <source>RxKotlin &lt;code&gt;retry retryWhen&lt;/code&gt;</source>
          <target state="translated">RxKotlin &lt;code&gt;retry retryWhen&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="b366ce57d17e142b859ba9aff817bcba2df10297" translate="yes" xml:space="preserve">
          <source>RxKotlin &lt;code&gt;startWith&lt;/code&gt;</source>
          <target state="translated">RxKotlin &lt;code&gt;startWith&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="5a81ffb57feafd69798f861a135c571d5e922f0c" translate="yes" xml:space="preserve">
          <source>RxKotlin &lt;code&gt;window&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;window&lt;/code&gt; RxKotlin</target>
        </trans-unit>
        <trans-unit id="ff3e5c91513f00231a00c68f20374c4d07725420" translate="yes" xml:space="preserve">
          <source>RxKotlin has two versions of this operator: &lt;code&gt;retry&lt;/code&gt; and &lt;code&gt;retryWhen&lt;/code&gt;.</source>
          <target state="translated">RxKotlin имеет две версии этого оператора: &lt;code&gt;retry&lt;/code&gt; и &lt;code&gt;retryWhen&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="975a49e99b0a7a6de101a17ca04575efd1f7d551" translate="yes" xml:space="preserve">
          <source>RxKotlin implements the Catch operator in the same way as does RxJava. There are three distinct operators that provide this functionality:</source>
          <target state="translated">RxKotlin реализует оператора Catch точно так же,как и RxJava.Существует три различных оператора,которые обеспечивают эту функциональность:</target>
        </trans-unit>
        <trans-unit id="c9d82095bbcaded1c957f591f63dd5a688a6bfb3" translate="yes" xml:space="preserve">
          <source>RxKotlin implements this operator as &lt;code&gt;concat&lt;/code&gt;. There are variants of this operator that take between two and nine Observables as parameters, and that concatenate them in the order they appear in the parameter list. There is also a variant that takes as a parameter an Observable of Observables, and concatenates each of these Observables in the order that they are emitted.</source>
          <target state="translated">RxKotlin реализует этот оператор как &lt;code&gt;concat&lt;/code&gt; . Существуют варианты этого оператора, которые принимают от двух до девяти Observable в качестве параметров и объединяют их в том порядке, в котором они появляются в списке параметров. Существует также вариант, который принимает в качестве параметра Observable или Observables и объединяет каждый из этих Observable в том порядке, в котором они были отправлены.</target>
        </trans-unit>
        <trans-unit id="34c2d9cbc19f1ac0cfea994d72dca5649f67b57e" translate="yes" xml:space="preserve">
          <source>RxKotlin implements this operator as &lt;code&gt;count&lt;/code&gt;.</source>
          <target state="translated">RxKotlin реализует этот оператор как &lt;code&gt;count&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="3ee39e4224115cbab6c4798edf46a46687340a63" translate="yes" xml:space="preserve">
          <source>RxKotlin implements this operator as &lt;code&gt;merge&lt;/code&gt;, &lt;code&gt;mergeWith&lt;/code&gt;, and &lt;code&gt;mergeDelayError&lt;/code&gt;.</source>
          <target state="translated">RxKotlin реализует этот оператор как &lt;code&gt;merge&lt;/code&gt; , &lt;code&gt;mergeWith&lt;/code&gt; и &lt;code&gt;mergeDelayError&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="1b12826dfd8865eb72fcbd26b27fff1febb197bd" translate="yes" xml:space="preserve">
          <source>RxKotlin implements this operator as &lt;code&gt;startWith&lt;/code&gt;.</source>
          <target state="translated">RxKotlin реализует этот оператор как &lt;code&gt;startWith&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="56cb4625042a56fee5e9664c2b797d80034870a1" translate="yes" xml:space="preserve">
          <source>RxMarbles: &lt;code&gt;amb&lt;/code&gt;</source>
          <target state="translated">RxMarbles: &lt;code&gt;amb&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="fc749a78d3ae294dd7f050d0fa59805102db6778" translate="yes" xml:space="preserve">
          <source>RxMarbles: &lt;code&gt;average&lt;/code&gt;</source>
          <target state="translated">RxMarbles: &lt;code&gt;average&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="111e84d7cb739223d4b02fb8d1bd60cca1cec978" translate="yes" xml:space="preserve">
          <source>RxMarbles: &lt;code&gt;combineLatest&lt;/code&gt;</source>
          <target state="translated">RxMarbles: &lt;code&gt;combineLatest&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="b9f88e1a7b31d7aac399620a26839bc6a2b09d56" translate="yes" xml:space="preserve">
          <source>RxMarbles: &lt;code&gt;concat&lt;/code&gt;</source>
          <target state="translated">RxMarbles: &lt;code&gt;concat&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="abcd452c65a27eca2d66374bed17444a9254a884" translate="yes" xml:space="preserve">
          <source>RxMarbles: &lt;code&gt;contains&lt;/code&gt;</source>
          <target state="translated">RxMarbles: &lt;code&gt;contains&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="97b79155ef9e93fa7dde129c07f9469b876a076d" translate="yes" xml:space="preserve">
          <source>RxMarbles: &lt;code&gt;count&lt;/code&gt;</source>
          <target state="translated">RxMarbles: &lt;code&gt;count&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="ddb87f6529eaccfda15fb8f845a1188ec6b42a0e" translate="yes" xml:space="preserve">
          <source>RxMarbles: &lt;code&gt;debounce&lt;/code&gt;</source>
          <target state="translated">RxMarbles: &lt;code&gt;debounce&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="8327631530799a425a9e5e82e61e5d2e4217dc6c" translate="yes" xml:space="preserve">
          <source>RxMarbles: &lt;code&gt;debounceWithSelector&lt;/code&gt;</source>
          <target state="translated">RxMarbles: &lt;code&gt;debounceWithSelector&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="17998c38ffe11c8eb90802e50e9eedf073f80e27" translate="yes" xml:space="preserve">
          <source>RxMarbles: &lt;code&gt;delay&lt;/code&gt;</source>
          <target state="translated">RxMarbles: &lt;code&gt;delay&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="0662bb9857d50bd25068c9a7b1736e03532fee54" translate="yes" xml:space="preserve">
          <source>RxMarbles: &lt;code&gt;delayWithSelector&lt;/code&gt;</source>
          <target state="translated">RxMarbles: &lt;code&gt;delayWithSelector&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="dc2669850803b5e82d4fd4ce6a3d78fe7b0de9f8" translate="yes" xml:space="preserve">
          <source>RxMarbles: &lt;code&gt;distinct&lt;/code&gt;</source>
          <target state="translated">RxMarbles: &lt;code&gt;distinct&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="edd4e22374c29f68eced8168f5692f4049949971" translate="yes" xml:space="preserve">
          <source>RxMarbles: &lt;code&gt;distinctUntilChanged&lt;/code&gt;</source>
          <target state="translated">RxMarbles: &lt;code&gt;distinctUntilChanged&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="220159147639202dc41d781e5e08b6e0c41f9ebc" translate="yes" xml:space="preserve">
          <source>RxMarbles: &lt;code&gt;elementAt&lt;/code&gt;</source>
          <target state="translated">RxMarbles: &lt;code&gt;elementAt&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="cd36de55d7d582f5a8967158d1941c5c58aa7edd" translate="yes" xml:space="preserve">
          <source>RxMarbles: &lt;code&gt;every&lt;/code&gt;</source>
          <target state="translated">RxMarbles: &lt;code&gt;every&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="1f3a095359009c4f253332439bd1ba049f2bb041" translate="yes" xml:space="preserve">
          <source>RxMarbles: &lt;code&gt;filter&lt;/code&gt;</source>
          <target state="translated">RxMarbles: &lt;code&gt;filter&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="876ac702476ddfdcaa640dde28e8fea343234a47" translate="yes" xml:space="preserve">
          <source>RxMarbles: &lt;code&gt;find&lt;/code&gt;</source>
          <target state="translated">RxMarbles: &lt;code&gt;find&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="3486acefa10f191f40d9046f0a053bd170224e34" translate="yes" xml:space="preserve">
          <source>RxMarbles: &lt;code&gt;findIndex&lt;/code&gt;</source>
          <target state="translated">RxMarbles: &lt;code&gt;findIndex&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="e264fbdfd9a2410f6aaf99eedf7ca59479da0702" translate="yes" xml:space="preserve">
          <source>RxMarbles: &lt;code&gt;first&lt;/code&gt;</source>
          <target state="translated">RxMarbles: &lt;code&gt;first&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="d157ce03dc1d028abb855105dd41753b33c70d37" translate="yes" xml:space="preserve">
          <source>RxMarbles: &lt;code&gt;last&lt;/code&gt;</source>
          <target state="translated">RxMarbles: &lt;code&gt;last&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="631d388aaba3bd6c551076241d0b507e5e1f4bd0" translate="yes" xml:space="preserve">
          <source>RxMarbles: &lt;code&gt;map&lt;/code&gt;</source>
          <target state="translated">RxMarbles: &lt;code&gt;map&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="5100ad1f32f6b5f69667ff813391878d9602d13a" translate="yes" xml:space="preserve">
          <source>RxMarbles: &lt;code&gt;max&lt;/code&gt;</source>
          <target state="translated">RxMarbles: &lt;code&gt;max&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="10400d692f09000792468b8e290b6205cf6ce389" translate="yes" xml:space="preserve">
          <source>RxMarbles: &lt;code&gt;merge&lt;/code&gt;</source>
          <target state="translated">RxMarbles: &lt;code&gt;merge&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="2c1dcdbe98b17d2eac919f6afb23fc5bfb2467ab" translate="yes" xml:space="preserve">
          <source>RxMarbles: &lt;code&gt;min&lt;/code&gt;</source>
          <target state="translated">RxMarbles: &lt;code&gt;min&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="819c65c9b01479f05062b657c232d6c6e7285952" translate="yes" xml:space="preserve">
          <source>RxMarbles: &lt;code&gt;pausable&lt;/code&gt;</source>
          <target state="translated">RxMarbles: &lt;code&gt;pausable&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="1ceed2d8c0652eec66ef54f0fdda8b588437b927" translate="yes" xml:space="preserve">
          <source>RxMarbles: &lt;code&gt;pausableBuffered&lt;/code&gt;</source>
          <target state="translated">RxMarbles: &lt;code&gt;pausableBuffered&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="090f6b7b340c8fca5f6e530f1567df20ce521866" translate="yes" xml:space="preserve">
          <source>RxMarbles: &lt;code&gt;reduce&lt;/code&gt;</source>
          <target state="translated">RxMarbles: &lt;code&gt;reduce&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="ac7aa9f13769185b15d13d31132d302f896d7cef" translate="yes" xml:space="preserve">
          <source>RxMarbles: &lt;code&gt;sample&lt;/code&gt;</source>
          <target state="translated">RxMarbles: &lt;code&gt;sample&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="f77796b4db1f1aff1d0e09dd8d859c43bbfa2cd5" translate="yes" xml:space="preserve">
          <source>RxMarbles: &lt;code&gt;scan&lt;/code&gt;</source>
          <target state="translated">RxMarbles: &lt;code&gt;scan&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="b2815085fe92379965cba55fd12890267ef00aec" translate="yes" xml:space="preserve">
          <source>RxMarbles: &lt;code&gt;sequenceEqual&lt;/code&gt;</source>
          <target state="translated">RxMarbles: &lt;code&gt;sequenceEqual&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="319fb13fe61ecb7b727e18d755ea3065566a2140" translate="yes" xml:space="preserve">
          <source>RxMarbles: &lt;code&gt;skip&lt;/code&gt;</source>
          <target state="translated">RxMarbles: &lt;code&gt;skip&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="83115d4a0f24322448d5214ca144f0045d47827e" translate="yes" xml:space="preserve">
          <source>RxMarbles: &lt;code&gt;skipLast&lt;/code&gt;</source>
          <target state="translated">RxMarbles: &lt;code&gt;skipLast&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="2716a747d3220b07a0d0a98c6d54ae58ccc1f212" translate="yes" xml:space="preserve">
          <source>RxMarbles: &lt;code&gt;skipUntil&lt;/code&gt;</source>
          <target state="translated">RxMarbles: &lt;code&gt;skipUntil&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="bdc1e08e1ad1bbdc4006bcfc65aca97576d0cb10" translate="yes" xml:space="preserve">
          <source>RxMarbles: &lt;code&gt;some&lt;/code&gt;</source>
          <target state="translated">RxMarbles: &lt;code&gt;some&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="f49bbda3329eb8082486fcd94fbb926a8676c49d" translate="yes" xml:space="preserve">
          <source>RxMarbles: &lt;code&gt;startWith&lt;/code&gt;</source>
          <target state="translated">RxMarbles: &lt;code&gt;startWith&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="0acf1d52ec7640e188cc27b9fe75d24774a67249" translate="yes" xml:space="preserve">
          <source>RxMarbles: &lt;code&gt;sum&lt;/code&gt;</source>
          <target state="translated">RxMarbles: &lt;code&gt;sum&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="9bf9bf4394799327a7838db65cb5b9dc4d8bab27" translate="yes" xml:space="preserve">
          <source>RxMarbles: &lt;code&gt;take&lt;/code&gt;</source>
          <target state="translated">RxMarbles: &lt;code&gt;take&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="462b0bb53ecea4d3db25d0554741812cc3334dea" translate="yes" xml:space="preserve">
          <source>RxMarbles: &lt;code&gt;takeLast&lt;/code&gt;</source>
          <target state="translated">RxMarbles: &lt;code&gt;takeLast&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="8dc3e0fafab3dd6320cdd03ac4c1b04e06a9381d" translate="yes" xml:space="preserve">
          <source>RxMarbles: &lt;code&gt;takeUntil&lt;/code&gt;</source>
          <target state="translated">RxMarbles: &lt;code&gt;takeUntil&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="f8e088a29d1384399a37b6bd40edc22e278fc617" translate="yes" xml:space="preserve">
          <source>RxMarbles: &lt;code&gt;withLatestFrom&lt;/code&gt;</source>
          <target state="translated">RxMarbles: &lt;code&gt;withLatestFrom&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="3ab201b57b75f616822cb65a376df701303006e6" translate="yes" xml:space="preserve">
          <source>RxMarbles: &lt;code&gt;zip&lt;/code&gt;</source>
          <target state="translated">RxMarbles: &lt;code&gt;zip&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="087a51d0b70c20257232a7d9345552ab1df1848c" translate="yes" xml:space="preserve">
          <source>RxNET &lt;code&gt;Buffer&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;Buffer&lt;/code&gt; RxNET</target>
        </trans-unit>
        <trans-unit id="ef3f9445d0eb0f00e016fd0755533840bebba5cb" translate="yes" xml:space="preserve">
          <source>RxNET &lt;code&gt;Catch OnErrorResumeNext&lt;/code&gt;</source>
          <target state="translated">RxNET &lt;code&gt;Catch OnErrorResumeNext&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="f942bcb59840c735af54c616b00ab98756d0680b" translate="yes" xml:space="preserve">
          <source>RxNET &lt;code&gt;Concat&lt;/code&gt;</source>
          <target state="translated">RxNET &lt;code&gt;Concat&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="4683cfec2fd91ab462126d67ced24438192dae5f" translate="yes" xml:space="preserve">
          <source>RxNET &lt;code&gt;Count LongCount&lt;/code&gt;</source>
          <target state="translated">RxNET &lt;code&gt;Count LongCount&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="6ef4aed9a3fae3f5e2610988e480fe04bc73a543" translate="yes" xml:space="preserve">
          <source>RxNET &lt;code&gt;Merge&lt;/code&gt;</source>
          <target state="translated">RxNET &lt;code&gt;Merge&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="fa11702a54b894deed3aeaae4fdae9f227013e82" translate="yes" xml:space="preserve">
          <source>RxNET &lt;code&gt;Retry&lt;/code&gt;</source>
          <target state="translated">RxNET &lt;code&gt;Retry&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="f40fe63b18eb33b7495fdc91d614514fe7b153ec" translate="yes" xml:space="preserve">
          <source>RxNET &lt;code&gt;Window&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;Window&lt;/code&gt; RxNET</target>
        </trans-unit>
        <trans-unit id="19e68a388dd199bb524fac1a3bf810fb29fbb24a" translate="yes" xml:space="preserve">
          <source>RxNet &lt;code&gt;StartWith&lt;/code&gt;</source>
          <target state="translated">RxNet &lt;code&gt;StartWith&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="48b5f1820117f9b88dbf1adc7cae55595226217e" translate="yes" xml:space="preserve">
          <source>RxPHP &lt;code&gt;average&lt;/code&gt;</source>
          <target state="translated">RxPHP в &lt;code&gt;average&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="7b3995daee3ed54bb9c69372d592a63d715cfa36" translate="yes" xml:space="preserve">
          <source>RxPHP &lt;code&gt;bufferWithCount&lt;/code&gt;</source>
          <target state="translated">RxPHP &lt;code&gt;bufferWithCount&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="2c8718a23f0dcbe3c7dba6123e5c413ab9cafc0f" translate="yes" xml:space="preserve">
          <source>RxPHP &lt;code&gt;catch&lt;/code&gt;</source>
          <target state="translated">RxPHP &lt;code&gt;catch&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="fccf06e59e97d6142ad4e977a4644354fb17a06b" translate="yes" xml:space="preserve">
          <source>RxPHP &lt;code&gt;combineLatest withLatestFrom&lt;/code&gt;</source>
          <target state="translated">RxPHP &lt;code&gt;combineLatest withLatestFrom&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="6803f893583f73be28104053cf3ca927f0fc70a9" translate="yes" xml:space="preserve">
          <source>RxPHP &lt;code&gt;concat concatAll&lt;/code&gt;</source>
          <target state="translated">RxPHP &lt;code&gt;concat concatAll&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="ead3f091ed0555568041cd9eac47b7c273d447fa" translate="yes" xml:space="preserve">
          <source>RxPHP &lt;code&gt;count&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;count&lt;/code&gt; RxPHP</target>
        </trans-unit>
        <trans-unit id="98f1c88f1d6ec64a9bbc7351a5dd6e40ceef30cc" translate="yes" xml:space="preserve">
          <source>RxPHP &lt;code&gt;create&lt;/code&gt;</source>
          <target state="translated">RxPHP &lt;code&gt;create&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="f2d13d06bcf4469332d165646fb28748761d0b16" translate="yes" xml:space="preserve">
          <source>RxPHP &lt;code&gt;defaultIfEmpty&lt;/code&gt;</source>
          <target state="translated">RxPHP &lt;code&gt;defaultIfEmpty&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="dd3e3d611b7fad26d39c1382dcafb1bb8101ba3b" translate="yes" xml:space="preserve">
          <source>RxPHP &lt;code&gt;defer&lt;/code&gt;</source>
          <target state="translated">RxPHP &lt;code&gt;defer&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="df9e47d5a09f6c485330724e2b56a802d1c26197" translate="yes" xml:space="preserve">
          <source>RxPHP &lt;code&gt;delay&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;delay&lt;/code&gt; RxPHP</target>
        </trans-unit>
        <trans-unit id="810cc9df8ccbac32ea7ff175724758c282ac1286" translate="yes" xml:space="preserve">
          <source>RxPHP &lt;code&gt;distinct distinctKey distinctUntilChanged distinctUntilKeyChanged&lt;/code&gt;</source>
          <target state="translated">RxPHP &lt;code&gt;distinct distinctKey distinctUntilChanged distinctUntilKeyChanged&lt;/code&gt; ключ отдельныйUntilChanged отличный</target>
        </trans-unit>
        <trans-unit id="f657877acff2652dbb6b1c35561822986a2bc8c1" translate="yes" xml:space="preserve">
          <source>RxPHP &lt;code&gt;do doOnError doOnCompleted finally&lt;/code&gt;</source>
          <target state="translated">RxPHP &lt;code&gt;do doOnError doOnCompleted finally&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="49a5b00c78b6e8b8c0eb3db030b4112a73ed54d7" translate="yes" xml:space="preserve">
          <source>RxPHP &lt;code&gt;empty never error&lt;/code&gt;</source>
          <target state="translated">RxPHP &lt;code&gt;empty never error&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="a7da4f1ca7e175722f4ef435c22d9fef0b6adf56" translate="yes" xml:space="preserve">
          <source>RxPHP &lt;code&gt;filter where&lt;/code&gt;</source>
          <target state="translated">RxPHP &lt;code&gt;filter where&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="417e2107a1b0507c9635a20e92b71600da1c121f" translate="yes" xml:space="preserve">
          <source>RxPHP &lt;code&gt;flatMap flatMapTo selectMany flatMapLatest concatMap concatMapTo&lt;/code&gt;</source>
          <target state="translated">RxPHP &lt;code&gt;flatMap flatMapTo selectMany flatMapLatest concatMap concatMapTo&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="945aeb4ac8a678ab0fbcb562dd2b3bb5a9f2c049" translate="yes" xml:space="preserve">
          <source>RxPHP &lt;code&gt;fromArray fromIterator asObservable fromPromise&lt;/code&gt;</source>
          <target state="translated">RxPHP &lt;code&gt;fromArray fromIterator asObservable fromPromise&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="1da7d771d15d7efcfbab7bf3ddf7c634de316a4c" translate="yes" xml:space="preserve">
          <source>RxPHP &lt;code&gt;groupBy groupByUntil partition&lt;/code&gt;</source>
          <target state="translated">RxPHP &lt;code&gt;groupBy groupByUntil partition&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="aa5678409169d8e28d24eea113da1280887e89b3" translate="yes" xml:space="preserve">
          <source>RxPHP &lt;code&gt;interval&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;interval&lt;/code&gt; RxPHP</target>
        </trans-unit>
        <trans-unit id="9d6a1e227ce5de01a4079693e8abd0c98b2a9535" translate="yes" xml:space="preserve">
          <source>RxPHP &lt;code&gt;isEmpty&lt;/code&gt;</source>
          <target state="translated">RxPHP &lt;code&gt;isEmpty&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="c3152a371e7b2c5683a76e872c18758aed0cf45c" translate="yes" xml:space="preserve">
          <source>RxPHP &lt;code&gt;map mapWithIndex mapTo select pluck&lt;/code&gt;</source>
          <target state="translated">RxPHP &lt;code&gt;map mapWithIndex mapTo select pluck&lt;/code&gt; mapWithIndex map Выбор извлечения</target>
        </trans-unit>
        <trans-unit id="58f6547a84fff38404c8c714055ef4a28b07000c" translate="yes" xml:space="preserve">
          <source>RxPHP &lt;code&gt;materialize dematerialize&lt;/code&gt;</source>
          <target state="translated">RxPHP &lt;code&gt;materialize dematerialize&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="ebf9a6abd4496d3a149db94d1759c3485d230eed" translate="yes" xml:space="preserve">
          <source>RxPHP &lt;code&gt;max&lt;/code&gt;</source>
          <target state="translated">RxPHP &lt;code&gt;max&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="f8751db5ed2a8b43d763fe695a82dbf59b93d0f6" translate="yes" xml:space="preserve">
          <source>RxPHP &lt;code&gt;merge mergeAll&lt;/code&gt;</source>
          <target state="translated">RxPHP &lt;code&gt;merge mergeAll&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="28812bbc3dd29ae3ea8c4b93e7fe506cd267f3b3" translate="yes" xml:space="preserve">
          <source>RxPHP &lt;code&gt;min&lt;/code&gt;</source>
          <target state="translated">RxPHP &lt;code&gt;min&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="680c9a4760d0f797ee46cde7bbbcd0dc8e17e745" translate="yes" xml:space="preserve">
          <source>RxPHP &lt;code&gt;multicast multicastWithSelector publish publishLast publishValue&lt;/code&gt;</source>
          <target state="translated">RxPHP &lt;code&gt;multicast multicastWithSelector publish publishLast publishValue&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="1bb35575c634bd93cdccdcc437c6ad714547961d" translate="yes" xml:space="preserve">
          <source>RxPHP &lt;code&gt;of&lt;/code&gt;</source>
          <target state="translated">RxPHP &lt;code&gt;of&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="c1b737ea0dde0487aefc4d6fd73f1a5247956748" translate="yes" xml:space="preserve">
          <source>RxPHP &lt;code&gt;race&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;race&lt;/code&gt; RxPHP</target>
        </trans-unit>
        <trans-unit id="2d3845a8e5d885ff21e1d6e3220055836ec76943" translate="yes" xml:space="preserve">
          <source>RxPHP &lt;code&gt;range&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;range&lt;/code&gt; RxPHP</target>
        </trans-unit>
        <trans-unit id="d655060602de39a13cadecec569f2eee907e1730" translate="yes" xml:space="preserve">
          <source>RxPHP &lt;code&gt;reduce&lt;/code&gt;</source>
          <target state="translated">RxPHP &lt;code&gt;reduce&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="bdde1323910cce2882671a9a69219a69bd9ea277" translate="yes" xml:space="preserve">
          <source>RxPHP &lt;code&gt;repeat repeatWhen&lt;/code&gt;</source>
          <target state="translated">RxPHP &lt;code&gt;repeat repeatWhen&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="061ca1d32f375a4048622453fd56c3d89945e116" translate="yes" xml:space="preserve">
          <source>RxPHP &lt;code&gt;replay shareReplay&lt;/code&gt;</source>
          <target state="translated">Поделиться &lt;code&gt;replay shareReplay&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="982f3994f08f22a585112a0f35abcb45c72a645e" translate="yes" xml:space="preserve">
          <source>RxPHP &lt;code&gt;retry retryWhen&lt;/code&gt;</source>
          <target state="translated">RxPHP &lt;code&gt;retry retryWhen&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="3ba23b23df753122d5f94f7f55e9e0c3b7044396" translate="yes" xml:space="preserve">
          <source>RxPHP &lt;code&gt;scan&lt;/code&gt;</source>
          <target state="translated">RxPHP &lt;code&gt;scan&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="6972c2847197b5b434abd2a11d7950e73b784680" translate="yes" xml:space="preserve">
          <source>RxPHP &lt;code&gt;share singleInstance shareValue&lt;/code&gt;</source>
          <target state="translated">RxPHP &lt;code&gt;share singleInstance shareValue&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="907ecab08054221873595bc70e97751a56bf855e" translate="yes" xml:space="preserve">
          <source>RxPHP &lt;code&gt;skip&lt;/code&gt;</source>
          <target state="translated">RxPHP &lt;code&gt;skip&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="b959eec4c6e118ac1b932cc2ea636a94f91d6520" translate="yes" xml:space="preserve">
          <source>RxPHP &lt;code&gt;skipLast&lt;/code&gt;</source>
          <target state="translated">RxPHP &lt;code&gt;skipLast&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="4b9bb913c4cc9125a974801f2c11da10e6106d9d" translate="yes" xml:space="preserve">
          <source>RxPHP &lt;code&gt;skipUntil&lt;/code&gt;</source>
          <target state="translated">RxPHP &lt;code&gt;skipUntil&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="540413ffde1ca3c84f98d555da9eaf3e353643c3" translate="yes" xml:space="preserve">
          <source>RxPHP &lt;code&gt;skipWhile skipWhileWithIndex&lt;/code&gt;</source>
          <target state="translated">RxPHP &lt;code&gt;skipWhile skipWhileWithIndex&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="1c320d5ec51d591f04e97148c798a9defd0e16d9" translate="yes" xml:space="preserve">
          <source>RxPHP &lt;code&gt;start&lt;/code&gt;</source>
          <target state="translated">RxPHP &lt;code&gt;start&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="f21e51f212f7b2a39d24a487c674ffe18e9ba9c4" translate="yes" xml:space="preserve">
          <source>RxPHP &lt;code&gt;startWith startWithArray&lt;/code&gt;</source>
          <target state="translated">RxPHP &lt;code&gt;startWith startWithArray&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="fd435c2e5cdcbeacd35b19a8aef6ba89bd9e32b7" translate="yes" xml:space="preserve">
          <source>RxPHP &lt;code&gt;subscribe&lt;/code&gt;</source>
          <target state="translated">RxPHP &lt;code&gt;subscribe&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="31da2c35f327da70928490de41c2e3fd93e09e51" translate="yes" xml:space="preserve">
          <source>RxPHP &lt;code&gt;sum&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;sum&lt;/code&gt; RxPHP</target>
        </trans-unit>
        <trans-unit id="03a502874777a27027d7b56fb54bf6284ff05812" translate="yes" xml:space="preserve">
          <source>RxPHP &lt;code&gt;switch switchFirst&lt;/code&gt;</source>
          <target state="translated">RxPHP &lt;code&gt;switch switchFirst&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="13e3e9cbb7c85d8900f0438564c7d40f2927fd11" translate="yes" xml:space="preserve">
          <source>RxPHP &lt;code&gt;take takeUntil&lt;/code&gt;</source>
          <target state="translated">RxPHP &lt;code&gt;take takeUntil&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="b8462bbb932f82e0b0b96d4d4554f6427cd20822" translate="yes" xml:space="preserve">
          <source>RxPHP &lt;code&gt;takeLast&lt;/code&gt;</source>
          <target state="translated">RxPHP &lt;code&gt;takeLast&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="15f2ab6b1c579f8937426784e43b91f789598808" translate="yes" xml:space="preserve">
          <source>RxPHP &lt;code&gt;takeUntil&lt;/code&gt;</source>
          <target state="translated">RxPHP &lt;code&gt;takeUntil&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="0d594a6e30430d4f77275851b49a2170ca8d29dd" translate="yes" xml:space="preserve">
          <source>RxPHP &lt;code&gt;takeWhile takeWhileWithIndex&lt;/code&gt;</source>
          <target state="translated">RxPHP &lt;code&gt;takeWhile takeWhileWithIndex&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="854eaec47c551cdfc9a64920c7fdd88f4dc95f6b" translate="yes" xml:space="preserve">
          <source>RxPHP &lt;code&gt;throttle&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;throttle&lt;/code&gt; RxPHP</target>
        </trans-unit>
        <trans-unit id="00ed4add29969125b2a4e152bf605f4d88d1bc42" translate="yes" xml:space="preserve">
          <source>RxPHP &lt;code&gt;timeout&lt;/code&gt;</source>
          <target state="translated">RxPHP &lt;code&gt;timeout&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="fbb8e441023fb4de86cd032ec15c5f28f2d5f5b4" translate="yes" xml:space="preserve">
          <source>RxPHP &lt;code&gt;timer&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;timer&lt;/code&gt; RxPHP</target>
        </trans-unit>
        <trans-unit id="524ca49ba3b169b0c74f3157d90fdb6c264cdd77" translate="yes" xml:space="preserve">
          <source>RxPHP &lt;code&gt;timestamp&lt;/code&gt;</source>
          <target state="translated">Метка &lt;code&gt;timestamp&lt;/code&gt; RxPHP</target>
        </trans-unit>
        <trans-unit id="95befb541f1904ec66955af7401282e700361a9d" translate="yes" xml:space="preserve">
          <source>RxPHP &lt;code&gt;toArray&lt;/code&gt;</source>
          <target state="translated">RxPHP &lt;code&gt;toArray&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="e20281967d99a5d3743eb1f3606090e9ebfb9244" translate="yes" xml:space="preserve">
          <source>RxPHP &lt;code&gt;zip forkJoin&lt;/code&gt;</source>
          <target state="translated">RxPHP &lt;code&gt;zip forkJoin&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="8d9b02bb65d78d2ae40943021ce85103fdf2d20d" translate="yes" xml:space="preserve">
          <source>RxPHP also has an operator &lt;code&gt;asObservable&lt;/code&gt;.</source>
          <target state="translated">RxPHP также имеет оператор &lt;code&gt;asObservable&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="8ba6067f5fbd398adbfee211c69b51735c742595" translate="yes" xml:space="preserve">
          <source>RxPHP also has an operator &lt;code&gt;concatAll&lt;/code&gt;.</source>
          <target state="translated">RxPHP также имеет оператор &lt;code&gt;concatAll&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="39d66d452236e5891891aaa4c97ecea3fa408123" translate="yes" xml:space="preserve">
          <source>RxPHP also has an operator &lt;code&gt;concatMap&lt;/code&gt;.</source>
          <target state="translated">RxPHP также имеет оператор &lt;code&gt;concatMap&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="913a581f21924aa458ae958d7e674b02788a42e1" translate="yes" xml:space="preserve">
          <source>RxPHP also has an operator &lt;code&gt;concatMapTo&lt;/code&gt;.</source>
          <target state="translated">RxPHP также имеет оператор &lt;code&gt;concatMapTo&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="49473a630f688e686a94f3dc7cce13ccc37ec0e9" translate="yes" xml:space="preserve">
          <source>RxPHP also has an operator &lt;code&gt;dematerialize&lt;/code&gt;.</source>
          <target state="translated">RxPHP также имеет оператор &lt;code&gt;dematerialize&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="3980ea7c4df032e20300a0b130850e2201e3b53b" translate="yes" xml:space="preserve">
          <source>RxPHP also has an operator &lt;code&gt;distinctKey&lt;/code&gt;.</source>
          <target state="translated">RxPHP также оператор &lt;code&gt;distinctKey&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="f35e8a7da7c7d7644894d0dee56ac867c70b5145" translate="yes" xml:space="preserve">
          <source>RxPHP also has an operator &lt;code&gt;distinctUntilChanged&lt;/code&gt;.</source>
          <target state="translated">RxPHP также оператор &lt;code&gt;distinctUntilChanged&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="7e54e235e4023d61e23c26645105abe4db878bd3" translate="yes" xml:space="preserve">
          <source>RxPHP also has an operator &lt;code&gt;distinctUntilKeyChanged&lt;/code&gt;.</source>
          <target state="translated">RxPHP также оператор &lt;code&gt;distinctUntilKeyChanged&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="003123148b6373cd197976d83c981c00a111d435" translate="yes" xml:space="preserve">
          <source>RxPHP also has an operator &lt;code&gt;doOnCompleted&lt;/code&gt;.</source>
          <target state="translated">RxPHP также имеет оператор &lt;code&gt;doOnCompleted&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="19c6cf98d875c6aa2df1e34ca7ad73a5643cc7b7" translate="yes" xml:space="preserve">
          <source>RxPHP also has an operator &lt;code&gt;doOnError&lt;/code&gt;.</source>
          <target state="translated">RxPHP также имеет оператор &lt;code&gt;doOnError&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="9e891d40963120fa3be44d379b94a42e9727ad09" translate="yes" xml:space="preserve">
          <source>RxPHP also has an operator &lt;code&gt;error&lt;/code&gt;.</source>
          <target state="translated">RxPHP также имеет &lt;code&gt;error&lt;/code&gt; оператора .</target>
        </trans-unit>
        <trans-unit id="6127d15e01e4913dd4756379b1b1606f2bda8829" translate="yes" xml:space="preserve">
          <source>RxPHP also has an operator &lt;code&gt;finally&lt;/code&gt;.</source>
          <target state="translated">RxPHP также имеет оператор &lt;code&gt;finally&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="98e09fa8dcaf394fb4a5ebc677be9939c91d1918" translate="yes" xml:space="preserve">
          <source>RxPHP also has an operator &lt;code&gt;flatMapLatest&lt;/code&gt;.</source>
          <target state="translated">RxPHP также имеет оператор &lt;code&gt;flatMapLatest&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="2850675b24e0a9d2457f0d6d6d8fe8abf66f24f5" translate="yes" xml:space="preserve">
          <source>RxPHP also has an operator &lt;code&gt;flatMapTo&lt;/code&gt;.</source>
          <target state="translated">RxPHP также имеет оператор &lt;code&gt;flatMapTo&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="f826f8d98f063a85275be61a19319f57dd01c57e" translate="yes" xml:space="preserve">
          <source>RxPHP also has an operator &lt;code&gt;forkJoin&lt;/code&gt;.</source>
          <target state="translated">RxPHP также имеет оператор &lt;code&gt;forkJoin&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="243f8fb794c28485f413a3b301536500789e56ca" translate="yes" xml:space="preserve">
          <source>RxPHP also has an operator &lt;code&gt;fromIterator&lt;/code&gt;.</source>
          <target state="translated">RxPHP также имеет оператор &lt;code&gt;fromIterator&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="1496e9f0d105a1e72306878cd1ec54cbac5366f0" translate="yes" xml:space="preserve">
          <source>RxPHP also has an operator &lt;code&gt;fromPromise&lt;/code&gt;.</source>
          <target state="translated">RxPHP также имеет оператора &lt;code&gt;fromPromise&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="a117a3e8eecfb8383942d8c005bd20c39c7d39cf" translate="yes" xml:space="preserve">
          <source>RxPHP also has an operator &lt;code&gt;groupByUntil&lt;/code&gt;.</source>
          <target state="translated">RxPHP также имеет оператор &lt;code&gt;groupByUntil&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="1926b285f97b36e30532dfaaa7b44d711b14ac51" translate="yes" xml:space="preserve">
          <source>RxPHP also has an operator &lt;code&gt;mapTo&lt;/code&gt;.</source>
          <target state="translated">RxPHP также имеет оператор &lt;code&gt;mapTo&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="7c38158f8df65be56342ae3133f5db423264b989" translate="yes" xml:space="preserve">
          <source>RxPHP also has an operator &lt;code&gt;mapWithIndex&lt;/code&gt;.</source>
          <target state="translated">RxPHP также имеет оператор &lt;code&gt;mapWithIndex&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="fb05710a621fadd79dcf5613ac74351f50d1796c" translate="yes" xml:space="preserve">
          <source>RxPHP also has an operator &lt;code&gt;mergeAll&lt;/code&gt;.</source>
          <target state="translated">RxPHP также имеет оператор &lt;code&gt;mergeAll&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="acf62abad2d8a775a3f76a351be0b44eaa1fbdae" translate="yes" xml:space="preserve">
          <source>RxPHP also has an operator &lt;code&gt;multicastWithSelector&lt;/code&gt;.</source>
          <target state="translated">RxPHP также имеет оператор &lt;code&gt;multicastWithSelector&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="34709ba2c911cfc24c77af2a0df51e187d500a0b" translate="yes" xml:space="preserve">
          <source>RxPHP also has an operator &lt;code&gt;never&lt;/code&gt;.</source>
          <target state="translated">В RxPHP также есть оператор &lt;code&gt;never&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="ae11225a4f7cacdff7b84ac87f418ce052314c83" translate="yes" xml:space="preserve">
          <source>RxPHP also has an operator &lt;code&gt;partition&lt;/code&gt;.</source>
          <target state="translated">RxPHP также имеет &lt;code&gt;partition&lt;/code&gt; операторов .</target>
        </trans-unit>
        <trans-unit id="1e3eafc5768e5d1f2ef0f12b3ee339bc108b80e4" translate="yes" xml:space="preserve">
          <source>RxPHP also has an operator &lt;code&gt;pluck&lt;/code&gt;.</source>
          <target state="translated">У RxPHP также есть операторский &lt;code&gt;pluck&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="d04770ab270bf4e74f99e239dc38191898b49df3" translate="yes" xml:space="preserve">
          <source>RxPHP also has an operator &lt;code&gt;publish&lt;/code&gt;.</source>
          <target state="translated">RxPHP также имеет &lt;code&gt;publish&lt;/code&gt; оператора .</target>
        </trans-unit>
        <trans-unit id="9b75907bb462f0e3e1d8d860efa6fd50f1338bf7" translate="yes" xml:space="preserve">
          <source>RxPHP also has an operator &lt;code&gt;publishLast&lt;/code&gt;.</source>
          <target state="translated">RxPHP также имеет оператор &lt;code&gt;publishLast&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="8a5a5ead1a8aa6a5ed17464c731194aa3b89ff26" translate="yes" xml:space="preserve">
          <source>RxPHP also has an operator &lt;code&gt;publishValue&lt;/code&gt;.</source>
          <target state="translated">RxPHP также имеет оператор &lt;code&gt;publishValue&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="7655b7c8e5df9fb88299c725dacd7eefdb20dc8c" translate="yes" xml:space="preserve">
          <source>RxPHP also has an operator &lt;code&gt;repeatWhen&lt;/code&gt;.</source>
          <target state="translated">RxPHP также имеет оператор &lt;code&gt;repeatWhen&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="a324cdfdf6d530111e8300362f095f6de21abd9d" translate="yes" xml:space="preserve">
          <source>RxPHP also has an operator &lt;code&gt;retryWhen&lt;/code&gt;.</source>
          <target state="translated">RxPHP также имеет оператор &lt;code&gt;retryWhen&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="d42e3d35485c8103492ff0749fee2acb6b2c95af" translate="yes" xml:space="preserve">
          <source>RxPHP also has an operator &lt;code&gt;select&lt;/code&gt;.</source>
          <target state="translated">RxPHP также имеет &lt;code&gt;select&lt;/code&gt; оператора .</target>
        </trans-unit>
        <trans-unit id="ec446979e827dde59652fe0ba55982f3464fa200" translate="yes" xml:space="preserve">
          <source>RxPHP also has an operator &lt;code&gt;selectMany&lt;/code&gt;.</source>
          <target state="translated">RxPHP также имеет оператор &lt;code&gt;selectMany&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="a363f06a399856b9c4cc0a9573a57da51d627894" translate="yes" xml:space="preserve">
          <source>RxPHP also has an operator &lt;code&gt;shareReplay&lt;/code&gt;.</source>
          <target state="translated">RxPHP также имеет оператор &lt;code&gt;shareReplay&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="e56a6bb5bc169e8f23147ada53e6991b80856ffc" translate="yes" xml:space="preserve">
          <source>RxPHP also has an operator &lt;code&gt;shareValue&lt;/code&gt;.</source>
          <target state="translated">RxPHP также имеет оператор &lt;code&gt;shareValue&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="5aef287868f17feda72ec85b31b9e098ce6912de" translate="yes" xml:space="preserve">
          <source>RxPHP also has an operator &lt;code&gt;singleInstance&lt;/code&gt;.</source>
          <target state="translated">RxPHP также имеет оператор &lt;code&gt;singleInstance&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="252288f667313838731112c40d62c6e2b2e1e3d8" translate="yes" xml:space="preserve">
          <source>RxPHP also has an operator &lt;code&gt;skipWhileWithIndex&lt;/code&gt;.</source>
          <target state="translated">RxPHP также имеет оператор &lt;code&gt;skipWhileWithIndex&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="ac870e8e5d6b4d68de14c096c3ffa9ce49efbb17" translate="yes" xml:space="preserve">
          <source>RxPHP also has an operator &lt;code&gt;startWithArray&lt;/code&gt;.</source>
          <target state="translated">RxPHP также имеет оператор &lt;code&gt;startWithArray&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="94054865d5bf902e14e6d12f7bd8fd69667a8603" translate="yes" xml:space="preserve">
          <source>RxPHP also has an operator &lt;code&gt;switchFirst&lt;/code&gt;.</source>
          <target state="translated">RxPHP также имеет оператор &lt;code&gt;switchFirst&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="493714f804421974719b61125431214842eeb8e8" translate="yes" xml:space="preserve">
          <source>RxPHP also has an operator &lt;code&gt;takeUntil&lt;/code&gt;.</source>
          <target state="translated">RxPHP также имеет оператор &lt;code&gt;takeUntil&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="4f2de1b1f7c525d85dbea6fca24fe9242dab5f48" translate="yes" xml:space="preserve">
          <source>RxPHP also has an operator &lt;code&gt;takeWhileWithIndex&lt;/code&gt;.</source>
          <target state="translated">RxPHP также имеет оператор &lt;code&gt;takeWhileWithIndex&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="9b956559d30d6e1c0f6872897ef7a383d031477d" translate="yes" xml:space="preserve">
          <source>RxPHP also has an operator &lt;code&gt;where&lt;/code&gt;.</source>
          <target state="translated">RxPHP также имеет оператор &lt;code&gt;where&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="0ff6ca86f5788efd0e721ccea16d4196a8270813" translate="yes" xml:space="preserve">
          <source>RxPHP also has an operator &lt;code&gt;withLatestFrom&lt;/code&gt;.</source>
          <target state="translated">RxPHP также имеет оператор &lt;code&gt;withLatestFrom&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="4dd1b3346d85c82064de9c6431ee4a4ea1bec307" translate="yes" xml:space="preserve">
          <source>RxPHP implements this operator as &lt;code&gt;average&lt;/code&gt;.</source>
          <target state="translated">RxPHP реализует этот оператор как &lt;code&gt;average&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="f8247f63e2249264b8c59dbd0dd4ee983bef7ecd" translate="yes" xml:space="preserve">
          <source>RxPHP implements this operator as &lt;code&gt;bufferWithCount&lt;/code&gt;.</source>
          <target state="translated">RxPHP реализует этот оператор как &lt;code&gt;bufferWithCount&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="3e51c41da24c9bdc586f8ab1ed812054164d1d47" translate="yes" xml:space="preserve">
          <source>RxPHP implements this operator as &lt;code&gt;catch&lt;/code&gt;.</source>
          <target state="translated">RxPHP реализует этот оператор как &lt;code&gt;catch&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="4a9820fae49dd869b3ca2191fba3d95eefbae003" translate="yes" xml:space="preserve">
          <source>RxPHP implements this operator as &lt;code&gt;combineLatest&lt;/code&gt;.</source>
          <target state="translated">RxPHP реализует этот оператор как &lt;code&gt;combineLatest&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="61a42c32105e02c443343cce7b76083d57929bc5" translate="yes" xml:space="preserve">
          <source>RxPHP implements this operator as &lt;code&gt;concat&lt;/code&gt;.</source>
          <target state="translated">RxPHP реализует этот оператор как &lt;code&gt;concat&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="e52a82382d335fc361f150f3007b45a7bc8f77b5" translate="yes" xml:space="preserve">
          <source>RxPHP implements this operator as &lt;code&gt;count&lt;/code&gt;.</source>
          <target state="translated">RxPHP реализует этот оператор как &lt;code&gt;count&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="659aece3e097efb609480682f67d1688119f696a" translate="yes" xml:space="preserve">
          <source>RxPHP implements this operator as &lt;code&gt;create&lt;/code&gt;.</source>
          <target state="translated">RxPHP реализует этот оператор как &lt;code&gt;create&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="53057b3972879e979b60314900a4a7166e603bcb" translate="yes" xml:space="preserve">
          <source>RxPHP implements this operator as &lt;code&gt;defaultIfEmpty&lt;/code&gt;.</source>
          <target state="translated">RxPHP реализует этот оператор как &lt;code&gt;defaultIfEmpty&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="b7377303470be9b4c103bdd8a30847c262813d91" translate="yes" xml:space="preserve">
          <source>RxPHP implements this operator as &lt;code&gt;defer&lt;/code&gt;.</source>
          <target state="translated">RxPHP реализует этот оператор как &lt;code&gt;defer&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="e57b7bc1a6e0ca1ce3b74b54b0f63d2febbba7bc" translate="yes" xml:space="preserve">
          <source>RxPHP implements this operator as &lt;code&gt;delay&lt;/code&gt;.</source>
          <target state="translated">RxPHP реализует этот оператор как &lt;code&gt;delay&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="dbba8379a046d18e74c5434f04156ffa32fb2dd8" translate="yes" xml:space="preserve">
          <source>RxPHP implements this operator as &lt;code&gt;distinct&lt;/code&gt;.</source>
          <target state="translated">RxPHP реализует этот оператор &lt;code&gt;distinct&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="1729e839fd71ac6df73746fb0970963f5137a250" translate="yes" xml:space="preserve">
          <source>RxPHP implements this operator as &lt;code&gt;do&lt;/code&gt;.</source>
          <target state="translated">RxPHP реализует этот оператор как &lt;code&gt;do&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="cfda8a2cbe93c99a6c551989edd64fafe3e57175" translate="yes" xml:space="preserve">
          <source>RxPHP implements this operator as &lt;code&gt;empty&lt;/code&gt;.</source>
          <target state="translated">RxPHP реализует этот оператор как &lt;code&gt;empty&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="f5d7502112fc6c6bc22f5954998236a234451144" translate="yes" xml:space="preserve">
          <source>RxPHP implements this operator as &lt;code&gt;filter&lt;/code&gt;.</source>
          <target state="translated">RxPHP реализует этот оператор как &lt;code&gt;filter&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="0e39e3ebbd25b567a97952287d377f9dae46b1c0" translate="yes" xml:space="preserve">
          <source>RxPHP implements this operator as &lt;code&gt;flatMap&lt;/code&gt;.</source>
          <target state="translated">RxPHP реализует этот оператор как &lt;code&gt;flatMap&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="f077e0cc4cfe6bf3c028003c80b9ae5b157fd428" translate="yes" xml:space="preserve">
          <source>RxPHP implements this operator as &lt;code&gt;fromArray&lt;/code&gt;.</source>
          <target state="translated">RxPHP реализует этот оператор как &lt;code&gt;fromArray&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="5b71e2639dccca221658beee3b68b0525f8c77c8" translate="yes" xml:space="preserve">
          <source>RxPHP implements this operator as &lt;code&gt;groupBy&lt;/code&gt;.</source>
          <target state="translated">RxPHP реализует этот оператор как &lt;code&gt;groupBy&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="9916754d02cb0d973418e8391606187b45956ca6" translate="yes" xml:space="preserve">
          <source>RxPHP implements this operator as &lt;code&gt;interval&lt;/code&gt;.</source>
          <target state="translated">RxPHP реализует этот оператор как &lt;code&gt;interval&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="b760f4145f402cdc5420771d6e1151f2a06de8da" translate="yes" xml:space="preserve">
          <source>RxPHP implements this operator as &lt;code&gt;isEmpty&lt;/code&gt;.</source>
          <target state="translated">RxPHP реализует этот оператор как &lt;code&gt;isEmpty&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="16116a7b668cca5d9439ac3a3ca7d54d9b133461" translate="yes" xml:space="preserve">
          <source>RxPHP implements this operator as &lt;code&gt;map&lt;/code&gt;.</source>
          <target state="translated">RxPHP реализует этот оператор как &lt;code&gt;map&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="9fc1ccafcfb97baebb8bd97326f2f23c28b35e49" translate="yes" xml:space="preserve">
          <source>RxPHP implements this operator as &lt;code&gt;materialize&lt;/code&gt;.</source>
          <target state="translated">RxPHP реализует этот оператор как &lt;code&gt;materialize&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="76875c04b837873dcd31c8449d16fa059f7870ab" translate="yes" xml:space="preserve">
          <source>RxPHP implements this operator as &lt;code&gt;max&lt;/code&gt;.</source>
          <target state="translated">RxPHP реализует этот оператор как &lt;code&gt;max&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="0987649d4b1736b2e29d839f81da6f526eb76397" translate="yes" xml:space="preserve">
          <source>RxPHP implements this operator as &lt;code&gt;merge&lt;/code&gt;.</source>
          <target state="translated">RxPHP реализует этот оператор как &lt;code&gt;merge&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="bfb77faaa650d26d52f5de5afa6c6bd396dfd0ce" translate="yes" xml:space="preserve">
          <source>RxPHP implements this operator as &lt;code&gt;min&lt;/code&gt;.</source>
          <target state="translated">RxPHP реализует этот оператор как &lt;code&gt;min&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="017dc67c4a849a1251c77bfa3411d93149abd809" translate="yes" xml:space="preserve">
          <source>RxPHP implements this operator as &lt;code&gt;multicast&lt;/code&gt;.</source>
          <target state="translated">RxPHP реализует этот оператор как &lt;code&gt;multicast&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="00ed05e070d003d51c053edd5a9e7b29bad0df10" translate="yes" xml:space="preserve">
          <source>RxPHP implements this operator as &lt;code&gt;of&lt;/code&gt;.</source>
          <target state="translated">RxPHP реализует этот оператор начиная &lt;code&gt;of&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="a3a3c98782a2dd2547d369b2e20d29b9952c61aa" translate="yes" xml:space="preserve">
          <source>RxPHP implements this operator as &lt;code&gt;race&lt;/code&gt;.</source>
          <target state="translated">RxPHP реализует этот оператор как &lt;code&gt;race&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="82122604dff8c582e8b41c4f09dfbbd520c069a2" translate="yes" xml:space="preserve">
          <source>RxPHP implements this operator as &lt;code&gt;range&lt;/code&gt;.</source>
          <target state="translated">RxPHP реализует этот оператор как &lt;code&gt;range&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="473a8cbcb88e3eee1374fa8e2366eac0779b0eab" translate="yes" xml:space="preserve">
          <source>RxPHP implements this operator as &lt;code&gt;reduce&lt;/code&gt;.</source>
          <target state="translated">RxPHP реализует этот оператор как &lt;code&gt;reduce&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="ae89a5966069a54119867d62660c604b5ac7a9f7" translate="yes" xml:space="preserve">
          <source>RxPHP implements this operator as &lt;code&gt;repeat&lt;/code&gt;.</source>
          <target state="translated">RxPHP реализует этот оператор как &lt;code&gt;repeat&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="e88cb82aff2a86450a63b1f47ab7113866dd0383" translate="yes" xml:space="preserve">
          <source>RxPHP implements this operator as &lt;code&gt;replay&lt;/code&gt;.</source>
          <target state="translated">RxPHP реализует этот оператор как &lt;code&gt;replay&lt;/code&gt; .</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
